{"info": {"author": "Ingo Marquardt", "author_email": "ingo.marquardt@gmx.de", "bugtrack_url": null, "classifiers": [], "description": "|PyPI version| |Build Status| |codecov| |DOI|\n\nPyPRF\n=====\n\nA free & open source *python package* for *population receptive field\n(pRF) analysis*. With this package you can present visual stimuli for a\nretinotopic mapping fMRI experiment, and perform a pRF analysis on the\nfMRI data.\n\n1. Stimulus presentation\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nPresents visual stimuli for retinotopic mapping experiments. The stimuli\nconsist of bars at different locations and orientations, filled with\nflickering black and white checkerboards. It is important that the\nparticipant fixates throughout the experiment. Therefore, there is a\ncentral fixation task. The fixation dot occasionally changes its colour,\nand the task is to press a button (number ``1``) in response. At the end\nof the presentation, the participant\u2019s hit rate is provided as feedback.\n\n2. Data analysis\n~~~~~~~~~~~~~~~~\n\nAnalysis tools for fMRI data from retinotopic mapping experiment. A pRF\nis estimated for each voxel (see [1]). The pRF model used here is a 2D\nGaussian; the free parameters are the Gaussian\u2019s x- and y-position, and\nits width (SD). This rather simple pRF model is best suited for early\nvisual cortex (higher cortical areas may require more complex models).\n\nHow to use - stimulus presentation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1. Installation\n\nThe stimulus presentation is implemented in\n`Psychopy <http://psychopy.org/>`__, so if you would like to run the\nexperiment, you first need to install Psychopy (if you already have fMRI\ndata and would like to run the analysis, you can skip this step). On\n`debian <https://www.debian.org/>`__, Psychopy can easily be installed\nusing ``apt-get``:\n\n.. code:: bash\n\n   sudo apt-get install psychopy\n\nIf you\u2019re running some other operating system, please refer to the\n`Psychopy website <http://psychopy.org/>`__.\n\nFor the stimulus presentation, you do not need to install ``pyprf``. You\nonly need a copy of the folder ``~/pyprf/pyprf/stimulus_presentation``.\nThe easiest way to get the ``pyprf`` stimuli is to clone the github\nrepository:\n\n.. code:: bash\n\n   git clone https://github.com/ingo-m/pyprf.git\n\n(Or click the download button.)\n\nThen you can simply copy the folder ``stimulus_presentation`` and all\nits contents to the computer that you use for stimulus presentation. (Do\nnot change the folder names. )\n\n2. Create design matrix\n\nBefore you can run the experiment, you need to create a design matrix in\nwhich you specify the experimental design (e.g.\u00a0how many repetitions of\nthe stimulus, inter trial interval for target events, fMRI volume TR,\netc.). You can either open the script\n``~/pyprf/pyprf/stimulus_presentation/code/create_design_matrix.py`` in\nPsychopy and run it from there, or call it directly at command line.\n\nYou can specify all parameters in the GUI that will pop up. Note that\nthere is one stimulus per fMRI volume, so you have to know the volume TR\nwhen creating the design matrix.\n\n3. Stimulus presentation\n\nIn order to present the stimuli, you can open the file\n``~/pyprf/pyprf/stimulus_presentation/code/stimulus.py`` in Psychopy and\nrun it from there. Alternatively, you can call the presentation script\ndirectly from command line:\n\n.. code:: bash\n\n   python `~/pyprf/pyprf/stimulus_presentation/code/stimulus.py`\n\nA GUI will open where you can specify further experimental parameters.\nImportantly, the name of the design matrix (e.g. \u2018Run_01\u2019) needs to\nmatch that of the file you created in the previous step.\n\nAfter starting the script, it will wait for a trigger signal from the\nfMRI scanner (default: keyboard button ``5``).\n\nThe stimuli look like this:\n\nYou can interrupt the presentation by pressing ``e`` and ``x`` at the\nsame time.\n\nHow to use - analysis\n~~~~~~~~~~~~~~~~~~~~~\n\n1. Install ``numpy``. For instance:\n\n.. code:: bash\n\n   pip install numpy\n\n(Or, alternatively, if you\u2019re using conda,\n``conda install -c conda-forge numpy``.)\n\n2. The ``pyprf`` package can directly be installed from PyPI, in the\n   following way:\n\n.. code:: bash\n\n   pip install pyprf\n\n(Alternatively, you could also installed it from the repository, like\nthis: ``git clone https://github.com/ingo-m/pyprf.git`` followed by\n``pip install /path/to/pyprf``.)\n\n3. Data analysis:\n\nIn order to prepare the analysis, you need to run the stimulus\npresentation script in *logging mode* in order to create a log of the\nstimulus presentation. Run\n``~/pyprf/pyprf/stimulus_presentation/code/stimulus.py`` (as described\nabove, either from Psychopy or at command line). In the GUI, set\n\u2018Logging mode\u2019 to ``True``.\n\nThe stimulus presentation log is created in the folder\n``~/pyprf/pyprf/stimulus_presentation/log/Run_*_frames/``.\n\nThe analysis parameters are set in a config file. An example file can be\nfound\n`here <https://github.com/ingo-m/pyprf/blob/master/pyprf/analysis/config_default.csv>`__.\nSee comments therein for more information.\n\nRun the analysis:\n\n.. code:: bash\n\n   pyprf -config /path/to/config.csv\n\nDependencies\n~~~~~~~~~~~~\n\n``pyprf`` is implemented in `Python 3.6 <https://www.python.org/>`__.\n\nIf you install ``pyprf`` using ``pip`` (as described above), all of the\nfollowing dependencies except for ``Psychopy`` and ``numpy`` are\ninstalled automatically - you do not have to take care of this yourself.\nSimply follow the above installation instructions.\n\n+--------------------------------------------------------+----------------+\n| Stimulus presentation                                  | Tested version |\n+========================================================+================+\n| `Psychopy <http://www.Psychopy.org/>`__                | 1.83.04        |\n+--------------------------------------------------------+----------------+\n| `NumPy <http://www.numpy.org/>`__                      | 1.15.1         |\n+--------------------------------------------------------+----------------+\n| `SciPy <http://www.scipy.org/>`__                      | 1.1.0          |\n+--------------------------------------------------------+----------------+\n| `Pillow <https://pypi.python.org/pypi/Pillow/4.3.0>`__ | 5.0.0          |\n+--------------------------------------------------------+----------------+\n\n+--------------------------------------------------------+----------------+\n| Data analysis                                          | Tested version |\n+========================================================+================+\n| `NumPy <http://www.numpy.org/>`__                      | 1.15.1         |\n+--------------------------------------------------------+----------------+\n| `SciPy <http://www.scipy.org/>`__                      | 1.1.0          |\n+--------------------------------------------------------+----------------+\n| `NiBabel <http://nipy.org/nibabel/>`__                 | 2.2.1          |\n+--------------------------------------------------------+----------------+\n| `Cython <http://cython.org/>`__\\ \u00b9                     | 0.27.1         |\n+--------------------------------------------------------+----------------+\n| `Pillow <https://pypi.python.org/pypi/Pillow/4.3.0>`__ | 5.0.0          |\n+--------------------------------------------------------+----------------+\n| `Tensorflow <https://www.tensorflow.org/>`__\\ \u00b2        | 1.4.0          |\n+--------------------------------------------------------+----------------+\n| `h5py <http://www.h5py.org/>`__                        | 2.8.0          |\n+--------------------------------------------------------+----------------+\n\n\u00b9: For considerably faster performance\n\n\u00b2: Can yield fast performance, depending on hardware. However, requires\ntensorflow to be configured for GPU usage (additional tensorflow\nspecific dependencies, including GPU drivers).\n\nThe analysis can be carried out in three different ways: using\n`numpy <http://www.numpy.org/>`__, `cython <http://cython.org/>`__, or\n`tensorflow <https://www.tensorflow.org/>`__. You can set this option in\nthe ``config.csv`` file. All three approaches yield the same results,\nbut differ in their dependencies and computational time: - **Numpy**\nuses numpy for the model fitting. Should work out of the box. -\n**Cython** offers a considerable speedup by using compiled cython code\nfor model fitting. Should work out of the box. *This approach is\nrecommended for most users*. - **Tensorflow** may outperform the other\noptions in terms of speed (depending on the available hardware) by\nrunning the GLM model fitting on the graphics processing unit (GPU).\nHowever, in order for this to work, tensorflow needs to be configured to\nuse the GPU (including respective drivers). See the\n`tensorflow <https://www.tensorflow.org/>`__ website for information on\nhow to configure your system to use the GPU. If you do not configure\ntensorflow to use the GPU, the analysis should still run without error\non the CPU. Because this analysis may run single-threaded, it would be\nslow. Numpy is always required, no matter which option you choose.\n\nContributions\n~~~~~~~~~~~~~\n\nFor contributors, we suggest the following procedure:\n\n-  Create your own fork (in the web interface, or by\n   ``git checkout -b new_branch``)\n\n   -  If you create the branch in the web interface, pull changes to\n      your local repository (``git pull``)\n\n-  Change to new branch: ``git checkout new_branch``\n-  Make changes\n-  Commit changes to new branch (``git add .`` and ``git commit -m``)\n-  Push changes to new branch (``git push origin new_branch``)\n-  Create a pull request using the web interface\n\nReferences\n~~~~~~~~~~\n\nThis application is based on the following work:\n\n[1] Dumoulin, S. O. & Wandell, B. A. (2008). Population receptive field\nestimates in human visual cortex. NeuroImage 39, 647\u2013660.\n\nSupport\n~~~~~~~\n\nPlease use the `github\nissues <https://github.com/ingo-m/pyprf/issues>`__ for questions or bug\nreports. You can also contact us on the ``pyprf`` |gitter| channel.\n\nLicense\n~~~~~~~\n\nThe project is licensed under `GNU General Public License Version\n3 <http://www.gnu.org/licenses/gpl.html>`__.\n\n.. |PyPI version| image:: https://badge.fury.io/py/pyprf.svg\n   :target: https://badge.fury.io/py/pyprf\n.. |Build Status| image:: https://travis-ci.org/ingo-m/pyprf.svg?branch=master\n   :target: https://travis-ci.org/ingo-m/pyprf\n.. |codecov| image:: https://codecov.io/gh/ingo-m/pyprf/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/ingo-m/pyprf\n.. |DOI| image:: https://zenodo.org/badge/DOI/10.5281/zenodo.1475439.svg\n   :target: https://doi.org/10.5281/zenodo.1475439\n.. |gitter| image:: https://badges.gitter.im/gitterHQ/gitter.png\n   :target: https://gitter.im/pyprf/Lobby", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/ingo-m/pyprf/archive/v2.0.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ingo-m/pyprf", "keywords": "pRF,fMRI,retinotopy", "license": "GNU General Public License Version 3", "maintainer": "", "maintainer_email": "", "name": "pyprf", "package_url": "https://pypi.org/project/pyprf/", "platform": "", "project_url": "https://pypi.org/project/pyprf/", "project_urls": {"Download": "https://github.com/ingo-m/pyprf/archive/v2.0.0.tar.gz", "Homepage": "https://github.com/ingo-m/pyprf"}, "release_url": "https://pypi.org/project/pyprf/2.0.0/", "requires_dist": null, "requires_python": "", "summary": "A free & open source python tool for population receptive                     field analysis of fMRI data.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/pyprf\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26606e228eac35bf99fbadd7e64eaeb2c195eef6/68747470733a2f2f62616467652e667572792e696f2f70792f70797072662e737667\"></a> <a href=\"https://travis-ci.org/ingo-m/pyprf\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73d42ce29c9cc6e27ed364e95b3e97ce4dc270fa/68747470733a2f2f7472617669732d63692e6f72672f696e676f2d6d2f70797072662e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/ingo-m/pyprf\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a703f95a1506a326f5c021f38babe7ad3bc1aa8/68747470733a2f2f636f6465636f762e696f2f67682f696e676f2d6d2f70797072662f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://doi.org/10.5281/zenodo.1475439\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66e4c0b93f250fc0a7e5fa32c96e61926dff1760/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e313437353433392e737667\"></a></p>\n<div id=\"pyprf\">\n<h2>PyPRF</h2>\n<p>A free &amp; open source <em>python package</em> for <em>population receptive field\n(pRF) analysis</em>. With this package you can present visual stimuli for a\nretinotopic mapping fMRI experiment, and perform a pRF analysis on the\nfMRI data.</p>\n<div id=\"stimulus-presentation\">\n<h3>1. Stimulus presentation</h3>\n<p>Presents visual stimuli for retinotopic mapping experiments. The stimuli\nconsist of bars at different locations and orientations, filled with\nflickering black and white checkerboards. It is important that the\nparticipant fixates throughout the experiment. Therefore, there is a\ncentral fixation task. The fixation dot occasionally changes its colour,\nand the task is to press a button (number <tt>1</tt>) in response. At the end\nof the presentation, the participant\u2019s hit rate is provided as feedback.</p>\n</div>\n<div id=\"data-analysis\">\n<h3>2. Data analysis</h3>\n<p>Analysis tools for fMRI data from retinotopic mapping experiment. A pRF\nis estimated for each voxel (see [1]). The pRF model used here is a 2D\nGaussian; the free parameters are the Gaussian\u2019s x- and y-position, and\nits width (SD). This rather simple pRF model is best suited for early\nvisual cortex (higher cortical areas may require more complex models).</p>\n</div>\n<div id=\"how-to-use-stimulus-presentation\">\n<h3>How to use - stimulus presentation</h3>\n<ol>\n<li>Installation</li>\n</ol>\n<p>The stimulus presentation is implemented in\n<a href=\"http://psychopy.org/\" rel=\"nofollow\">Psychopy</a>, so if you would like to run the\nexperiment, you first need to install Psychopy (if you already have fMRI\ndata and would like to run the analysis, you can skip this step). On\n<a href=\"https://www.debian.org/\" rel=\"nofollow\">debian</a>, Psychopy can easily be installed\nusing <tt><span class=\"pre\">apt-get</span></tt>:</p>\n<pre>sudo apt-get install psychopy\n</pre>\n<p>If you\u2019re running some other operating system, please refer to the\n<a href=\"http://psychopy.org/\" rel=\"nofollow\">Psychopy website</a>.</p>\n<p>For the stimulus presentation, you do not need to install <tt>pyprf</tt>. You\nonly need a copy of the folder <tt>~/pyprf/pyprf/stimulus_presentation</tt>.\nThe easiest way to get the <tt>pyprf</tt> stimuli is to clone the github\nrepository:</p>\n<pre>git clone https://github.com/ingo-m/pyprf.git\n</pre>\n<p>(Or click the download button.)</p>\n<p>Then you can simply copy the folder <tt>stimulus_presentation</tt> and all\nits contents to the computer that you use for stimulus presentation. (Do\nnot change the folder names. )</p>\n<ol>\n<li>Create design matrix</li>\n</ol>\n<p>Before you can run the experiment, you need to create a design matrix in\nwhich you specify the experimental design (e.g.\u00a0how many repetitions of\nthe stimulus, inter trial interval for target events, fMRI volume TR,\netc.). You can either open the script\n<tt>~/pyprf/pyprf/stimulus_presentation/code/create_design_matrix.py</tt> in\nPsychopy and run it from there, or call it directly at command line.</p>\n<p>You can specify all parameters in the GUI that will pop up. Note that\nthere is one stimulus per fMRI volume, so you have to know the volume TR\nwhen creating the design matrix.</p>\n<ol>\n<li>Stimulus presentation</li>\n</ol>\n<p>In order to present the stimuli, you can open the file\n<tt>~/pyprf/pyprf/stimulus_presentation/code/stimulus.py</tt> in Psychopy and\nrun it from there. Alternatively, you can call the presentation script\ndirectly from command line:</p>\n<pre>python <span class=\"sb\">`</span>~/pyprf/pyprf/stimulus_presentation/code/stimulus.py<span class=\"sb\">`</span>\n</pre>\n<p>A GUI will open where you can specify further experimental parameters.\nImportantly, the name of the design matrix (e.g. \u2018Run_01\u2019) needs to\nmatch that of the file you created in the previous step.</p>\n<p>After starting the script, it will wait for a trigger signal from the\nfMRI scanner (default: keyboard button <tt>5</tt>).</p>\n<p>The stimuli look like this:</p>\n<p>You can interrupt the presentation by pressing <tt>e</tt> and <tt>x</tt> at the\nsame time.</p>\n</div>\n<div id=\"how-to-use-analysis\">\n<h3>How to use - analysis</h3>\n<ol>\n<li>Install <tt>numpy</tt>. For instance:</li>\n</ol>\n<pre>pip install numpy\n</pre>\n<p>(Or, alternatively, if you\u2019re using conda,\n<tt>conda install <span class=\"pre\">-c</span> <span class=\"pre\">conda-forge</span> numpy</tt>.)</p>\n<ol>\n<li>The <tt>pyprf</tt> package can directly be installed from PyPI, in the\nfollowing way:</li>\n</ol>\n<pre>pip install pyprf\n</pre>\n<p>(Alternatively, you could also installed it from the repository, like\nthis: <tt>git clone <span class=\"pre\">https://github.com/ingo-m/pyprf.git</span></tt> followed by\n<tt>pip install /path/to/pyprf</tt>.)</p>\n<ol>\n<li>Data analysis:</li>\n</ol>\n<p>In order to prepare the analysis, you need to run the stimulus\npresentation script in <em>logging mode</em> in order to create a log of the\nstimulus presentation. Run\n<tt>~/pyprf/pyprf/stimulus_presentation/code/stimulus.py</tt> (as described\nabove, either from Psychopy or at command line). In the GUI, set\n\u2018Logging mode\u2019 to <tt>True</tt>.</p>\n<p>The stimulus presentation log is created in the folder\n<tt>~/pyprf/pyprf/stimulus_presentation/log/Run_*_frames/</tt>.</p>\n<p>The analysis parameters are set in a config file. An example file can be\nfound\n<a href=\"https://github.com/ingo-m/pyprf/blob/master/pyprf/analysis/config_default.csv\" rel=\"nofollow\">here</a>.\nSee comments therein for more information.</p>\n<p>Run the analysis:</p>\n<pre>pyprf -config /path/to/config.csv\n</pre>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p><tt>pyprf</tt> is implemented in <a href=\"https://www.python.org/\" rel=\"nofollow\">Python 3.6</a>.</p>\n<p>If you install <tt>pyprf</tt> using <tt>pip</tt> (as described above), all of the\nfollowing dependencies except for <tt>Psychopy</tt> and <tt>numpy</tt> are\ninstalled automatically - you do not have to take care of this yourself.\nSimply follow the above installation instructions.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Stimulus presentation</th>\n<th>Tested version</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><a href=\"http://www.Psychopy.org/\" rel=\"nofollow\">Psychopy</a></td>\n<td>1.83.04</td>\n</tr>\n<tr><td><a href=\"http://www.numpy.org/\" rel=\"nofollow\">NumPy</a></td>\n<td>1.15.1</td>\n</tr>\n<tr><td><a href=\"http://www.scipy.org/\" rel=\"nofollow\">SciPy</a></td>\n<td>1.1.0</td>\n</tr>\n<tr><td><a href=\"https://pypi.python.org/pypi/Pillow/4.3.0\" rel=\"nofollow\">Pillow</a></td>\n<td>5.0.0</td>\n</tr>\n</tbody>\n</table>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Data analysis</th>\n<th>Tested version</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><a href=\"http://www.numpy.org/\" rel=\"nofollow\">NumPy</a></td>\n<td>1.15.1</td>\n</tr>\n<tr><td><a href=\"http://www.scipy.org/\" rel=\"nofollow\">SciPy</a></td>\n<td>1.1.0</td>\n</tr>\n<tr><td><a href=\"http://nipy.org/nibabel/\" rel=\"nofollow\">NiBabel</a></td>\n<td>2.2.1</td>\n</tr>\n<tr><td><a href=\"http://cython.org/\" rel=\"nofollow\">Cython</a>\u00b9</td>\n<td>0.27.1</td>\n</tr>\n<tr><td><a href=\"https://pypi.python.org/pypi/Pillow/4.3.0\" rel=\"nofollow\">Pillow</a></td>\n<td>5.0.0</td>\n</tr>\n<tr><td><a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">Tensorflow</a>\u00b2</td>\n<td>1.4.0</td>\n</tr>\n<tr><td><a href=\"http://www.h5py.org/\" rel=\"nofollow\">h5py</a></td>\n<td>2.8.0</td>\n</tr>\n</tbody>\n</table>\n<p>\u00b9: For considerably faster performance</p>\n<p>\u00b2: Can yield fast performance, depending on hardware. However, requires\ntensorflow to be configured for GPU usage (additional tensorflow\nspecific dependencies, including GPU drivers).</p>\n<p>The analysis can be carried out in three different ways: using\n<a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a>, <a href=\"http://cython.org/\" rel=\"nofollow\">cython</a>, or\n<a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">tensorflow</a>. You can set this option in\nthe <tt>config.csv</tt> file. All three approaches yield the same results,\nbut differ in their dependencies and computational time: - <strong>Numpy</strong>\nuses numpy for the model fitting. Should work out of the box. -\n<strong>Cython</strong> offers a considerable speedup by using compiled cython code\nfor model fitting. Should work out of the box. <em>This approach is\nrecommended for most users</em>. - <strong>Tensorflow</strong> may outperform the other\noptions in terms of speed (depending on the available hardware) by\nrunning the GLM model fitting on the graphics processing unit (GPU).\nHowever, in order for this to work, tensorflow needs to be configured to\nuse the GPU (including respective drivers). See the\n<a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">tensorflow</a> website for information on\nhow to configure your system to use the GPU. If you do not configure\ntensorflow to use the GPU, the analysis should still run without error\non the CPU. Because this analysis may run single-threaded, it would be\nslow. Numpy is always required, no matter which option you choose.</p>\n</div>\n<div id=\"contributions\">\n<h3>Contributions</h3>\n<p>For contributors, we suggest the following procedure:</p>\n<ul>\n<li>Create your own fork (in the web interface, or by\n<tt>git checkout <span class=\"pre\">-b</span> new_branch</tt>)<ul>\n<li>If you create the branch in the web interface, pull changes to\nyour local repository (<tt>git pull</tt>)</li>\n</ul>\n</li>\n<li>Change to new branch: <tt>git checkout new_branch</tt></li>\n<li>Make changes</li>\n<li>Commit changes to new branch (<tt>git add .</tt> and <tt>git commit <span class=\"pre\">-m</span></tt>)</li>\n<li>Push changes to new branch (<tt>git push origin new_branch</tt>)</li>\n<li>Create a pull request using the web interface</li>\n</ul>\n</div>\n<div id=\"references\">\n<h3>References</h3>\n<p>This application is based on the following work:</p>\n<p>[1] Dumoulin, S. O. &amp; Wandell, B. A. (2008). Population receptive field\nestimates in human visual cortex. NeuroImage 39, 647\u2013660.</p>\n</div>\n<div id=\"support\">\n<h3>Support</h3>\n<p>Please use the <a href=\"https://github.com/ingo-m/pyprf/issues\" rel=\"nofollow\">github\nissues</a> for questions or bug\nreports. You can also contact us on the <tt>pyprf</tt> <a href=\"https://gitter.im/pyprf/Lobby\" rel=\"nofollow\"><img alt=\"gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ccaa9f480b61b818a4de6009abf3eaca6dc76efa/68747470733a2f2f6261646765732e6769747465722e696d2f67697474657248512f6769747465722e706e67\"></a> channel.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>The project is licensed under <a href=\"http://www.gnu.org/licenses/gpl.html\" rel=\"nofollow\">GNU General Public License Version\n3</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4433567, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "105db8b6393222bb22a628c1a7856087", "sha256": "9af9472fa16a8293adf7a55f924a2912d85af1600cb639e46101b85228fb005a"}, "downloads": -1, "filename": "pyprf-1.1.0.tar.gz", "has_sig": false, "md5_digest": "105db8b6393222bb22a628c1a7856087", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34345, "upload_time": "2018-01-13T00:02:56", "upload_time_iso_8601": "2018-01-13T00:02:56.577027Z", "url": "https://files.pythonhosted.org/packages/40/b1/9bfd6bf04670c9dde23774e0e081fcf76af21cc70f4d2c2bd0cac0a1a2be/pyprf-1.1.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "f74c9f48ec926a6a39f763bbc1a73e4e", "sha256": "2e7e9427578b5cb2b26d398f4d9983aaaad2d6e0f6b0cbfe0f7d48572f6d8371"}, "downloads": -1, "filename": "pyprf-1.3.0.tar.gz", "has_sig": false, "md5_digest": "f74c9f48ec926a6a39f763bbc1a73e4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34581, "upload_time": "2018-02-20T13:54:09", "upload_time_iso_8601": "2018-02-20T13:54:09.765177Z", "url": "https://files.pythonhosted.org/packages/84/5d/e9e60d16539b701747e3848c449dc2a8994f3fca9fb02e61580425c8d0df/pyprf-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "3be7d570cdd2cb1232ae09483bb531c8", "sha256": "be51e4d5de47ddf47d409eefb2cafc434bb0aea65cab35b7df3edebe75f08a6a"}, "downloads": -1, "filename": "pyprf-1.3.1.tar.gz", "has_sig": false, "md5_digest": "3be7d570cdd2cb1232ae09483bb531c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34658, "upload_time": "2018-02-20T15:29:55", "upload_time_iso_8601": "2018-02-20T15:29:55.240293Z", "url": "https://files.pythonhosted.org/packages/9e/8c/3522f30fe1500a35339bb942fac707c188e06371c08d6f9cc3d41c4b7e5b/pyprf-1.3.1.tar.gz", "yanked": false}], "1.3.10": [{"comment_text": "", "digests": {"md5": "6e413f536a4b10ec866c65814058b0c9", "sha256": "f673c8e8d436a56c8f0932d57c52a608ebe849a9b95cd6c2f894f1bef40b89bb"}, "downloads": -1, "filename": "pyprf-1.3.10.tar.gz", "has_sig": false, "md5_digest": "6e413f536a4b10ec866c65814058b0c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154474, "upload_time": "2018-03-11T12:06:26", "upload_time_iso_8601": "2018-03-11T12:06:26.921067Z", "url": "https://files.pythonhosted.org/packages/4b/2d/c1c2a0c2f6b72d38eabfe4281048534d0451acc9511bacc66274c53ae755/pyprf-1.3.10.tar.gz", "yanked": false}], "1.3.11": [{"comment_text": "", "digests": {"md5": "c212354fe2aac9859403a352d76d87ec", "sha256": "4a9d8e21d4dcf17dca02f3e197c5d386a72fba3f9e912e17032f6dcb450250b0"}, "downloads": -1, "filename": "pyprf-1.3.11.tar.gz", "has_sig": false, "md5_digest": "c212354fe2aac9859403a352d76d87ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154543, "upload_time": "2018-04-18T12:45:57", "upload_time_iso_8601": "2018-04-18T12:45:57.456368Z", "url": "https://files.pythonhosted.org/packages/27/ad/347f091563270b2089753ff47affb2e87125046155b5afa52920aebd3416/pyprf-1.3.11.tar.gz", "yanked": false}], "1.3.12": [{"comment_text": "", "digests": {"md5": "6de9e2b2c0891bd792f59116bc180bdb", "sha256": "2e16616bf6d57054b5eb07b0014233a17ba764825d18403481219f12d14f6560"}, "downloads": -1, "filename": "pyprf-1.3.12.tar.gz", "has_sig": false, "md5_digest": "6de9e2b2c0891bd792f59116bc180bdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154003, "upload_time": "2018-09-16T19:23:24", "upload_time_iso_8601": "2018-09-16T19:23:24.724493Z", "url": "https://files.pythonhosted.org/packages/a1/b3/6ab690d1efa35ea253c2d3af3a0b97055ee2775e6ecb75a849a95c002720/pyprf-1.3.12.tar.gz", "yanked": false}], "1.3.13": [{"comment_text": "", "digests": {"md5": "abe73b1bc1d03ade4088e5173e100efc", "sha256": "7e9acd679022564e4fa70f57c46b9b7ee84e251ecda914234468d9870f9a478b"}, "downloads": -1, "filename": "pyprf-1.3.13.tar.gz", "has_sig": false, "md5_digest": "abe73b1bc1d03ade4088e5173e100efc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 156557, "upload_time": "2018-09-19T19:57:03", "upload_time_iso_8601": "2018-09-19T19:57:03.904274Z", "url": "https://files.pythonhosted.org/packages/7a/d7/5f7d5b19f43af55898a4ac947cafa0d3afd6161b4f1a94cf712f28cef555/pyprf-1.3.13.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "893a132653e2044a0cabe951f16e40e5", "sha256": "3f308efbd83ad975da2b397a8c7d68a696e20b887d629386300f98ffac3bbfc6"}, "downloads": -1, "filename": "pyprf-1.3.2.tar.gz", "has_sig": false, "md5_digest": "893a132653e2044a0cabe951f16e40e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34652, "upload_time": "2018-02-20T16:07:06", "upload_time_iso_8601": "2018-02-20T16:07:06.727310Z", "url": "https://files.pythonhosted.org/packages/0b/44/069f16188978a73a5996920f17b2c7d7b3642feb7d2c0582bb90cece5aba/pyprf-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "1ab1256b37d3a0b36872b57153f27528", "sha256": "4e1763df7badc1c7b1d482dccf7caf6e8c22699bc958d72e5f9c193e5e100c4a"}, "downloads": -1, "filename": "pyprf-1.3.3.tar.gz", "has_sig": false, "md5_digest": "1ab1256b37d3a0b36872b57153f27528", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34704, "upload_time": "2018-02-20T16:45:39", "upload_time_iso_8601": "2018-02-20T16:45:39.681292Z", "url": "https://files.pythonhosted.org/packages/cd/9c/507fa59c9b778f3870de82e7303ce604508cbbe0aa4b6655442fe94adfa1/pyprf-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "6bb508ce3c26682e355b222bfb151249", "sha256": "7814dc7793e368ce6ba7afbac2ee20d44ec4c037853870a813687f0d694d7bbb"}, "downloads": -1, "filename": "pyprf-1.3.4.tar.gz", "has_sig": false, "md5_digest": "6bb508ce3c26682e355b222bfb151249", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151487, "upload_time": "2018-02-20T16:52:43", "upload_time_iso_8601": "2018-02-20T16:52:43.295417Z", "url": "https://files.pythonhosted.org/packages/eb/1c/23bf13daa12c2e3fabb52ca87de34421703adeb1cc797a2f484e3bd940ad/pyprf-1.3.4.tar.gz", "yanked": false}], "1.3.5": [{"comment_text": "", "digests": {"md5": "bf3b1e92c0ccce3ba0cf1754db76b861", "sha256": "83f9323f49ed7d83b7591fb481e834df019cc2f67c01797229793ccfeea2f053"}, "downloads": -1, "filename": "pyprf-1.3.5.tar.gz", "has_sig": false, "md5_digest": "bf3b1e92c0ccce3ba0cf1754db76b861", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 150412, "upload_time": "2018-02-20T18:26:08", "upload_time_iso_8601": "2018-02-20T18:26:08.976610Z", "url": "https://files.pythonhosted.org/packages/13/94/e702bb412623a1002e5898e53299ecf93d08e20292b44bb4b46bc1a485e9/pyprf-1.3.5.tar.gz", "yanked": false}], "1.3.6": [{"comment_text": "", "digests": {"md5": "6223ac70829dc10d3d01f664aa5a36cd", "sha256": "8317141192c23ad4a5960f562ab80d34c3a20485444d9b14316f9eabfe587b0c"}, "downloads": -1, "filename": "pyprf-1.3.6.tar.gz", "has_sig": false, "md5_digest": "6223ac70829dc10d3d01f664aa5a36cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 150415, "upload_time": "2018-02-20T18:52:27", "upload_time_iso_8601": "2018-02-20T18:52:27.998616Z", "url": "https://files.pythonhosted.org/packages/78/86/c3990b6dc850a3ba514859e39cfb40a48a6ca5293c5d08bf46a56d1a4586/pyprf-1.3.6.tar.gz", "yanked": false}], "1.3.9": [{"comment_text": "", "digests": {"md5": "23ce5dd825172fa6bf1eb9dd4797f9fb", "sha256": "569afd5d04788eddab6a810f4c888cb7551841f99669b1cfee4624e44505153f"}, "downloads": -1, "filename": "pyprf-1.3.9.tar.gz", "has_sig": false, "md5_digest": "23ce5dd825172fa6bf1eb9dd4797f9fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153655, "upload_time": "2018-03-11T11:18:50", "upload_time_iso_8601": "2018-03-11T11:18:50.090951Z", "url": "https://files.pythonhosted.org/packages/f5/f5/0020dc2ffa25a24787c7a896ec1e2f4f7ab16755b91f2e15ee6ca788e6e9/pyprf-1.3.9.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "66f64b0bd0851b06b0277692922e4adf", "sha256": "e15d3f6c3e0c27539dc6a7273dda250d0791cca20060de00fdec61e1e3428b65"}, "downloads": -1, "filename": "pyprf-2.0.0.tar.gz", "has_sig": false, "md5_digest": "66f64b0bd0851b06b0277692922e4adf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 415901, "upload_time": "2018-10-30T22:40:57", "upload_time_iso_8601": "2018-10-30T22:40:57.724867Z", "url": "https://files.pythonhosted.org/packages/11/8a/aa79db3698e89867ba7a8be6362197d68b62da9c3a46c318fce8b5ccb60f/pyprf-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "66f64b0bd0851b06b0277692922e4adf", "sha256": "e15d3f6c3e0c27539dc6a7273dda250d0791cca20060de00fdec61e1e3428b65"}, "downloads": -1, "filename": "pyprf-2.0.0.tar.gz", "has_sig": false, "md5_digest": "66f64b0bd0851b06b0277692922e4adf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 415901, "upload_time": "2018-10-30T22:40:57", "upload_time_iso_8601": "2018-10-30T22:40:57.724867Z", "url": "https://files.pythonhosted.org/packages/11/8a/aa79db3698e89867ba7a8be6362197d68b62da9c3a46c318fce8b5ccb60f/pyprf-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:10 2020"}