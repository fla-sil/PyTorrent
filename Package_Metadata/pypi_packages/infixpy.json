{"info": {"author": "Stephen Boesch based on original code form Matt Hagy", "author_email": "javadba@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# infixpy \nSee blog post, \n[Introducing infixpy: Scala-inspired data structures for Python](https://medium.com/@matthagy/introducing-infixpy-scala-inspired-data-structures-for-python-53f3afc8696)\nto learn about using this library.\n> A functional, object-oriented approach for working with sequences and collections. Also similar to Spark RDDs and Java Streams. Hope you find they simplify your code by providing a plethora of common algorithms for working with sequences and collections.\n\n## Stephen's Direct from Scala example\n\nScala version\n\n```scala\nval a = ((1 to 50)\n  .map(_ * 4)\n  .filter( _ <= 170)\n  .filter(_.toString.length == 2)\n  .filter (_ % 20 == 0)\n  .zipWithIndex\n  .map{ case(x,n) => s\"Result[$n]=$x\"}\n  .mkString(\"  .. \"))\n\n  a: String = Result[0]=20  .. Result[1]=40  .. Result[2]=60  .. Result[3]=80\n```\nVersion using the infixpy library with python\n\n```python\nfrom infixpy import *\na = (Seq(range(1,51))\n     .map(lambda x: x * 4)\n     .filter(lambda x: x <= 170)\n     .filter(lambda x: len(str(x)) == 2)\n     .filter( lambda x: x % 20 ==0)\n     .enumerate() \n     .map(lambda x: 'Result[%d]=%s' %(x[0],x[1]))\n     .mkstring(' .. '))\nprint(a)\n\n  # Result[0]=20  .. Result[1]=40  .. Result[2]=60  .. Result[3]=80\n```\n\n\n## Original Example\n```python\nfrom infixpy import Seq\n\n(Seq(range(10))\n .map(lambda x: x+3)\n .filter(lambda x: x%2==0)\n .group_by(lambda x: x%3)\n .items()\n .for_each(print))\n```\n\n#### Output\n```\u00ce\n(1, SList([4, 10]))\n(0, SList([6, 12]))\n(2, SList([8]))\n```\n\n## Examples\nSee examples/ directory for additional examples of using infixpy. \n\nAlso see example usages in\n[career_village_entities](https://github.com/matthagy/career_village_entities).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sboesch/infixpy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "infixpy", "package_url": "https://pypi.org/project/infixpy/", "platform": "", "project_url": "https://pypi.org/project/infixpy/", "project_urls": {"Homepage": "https://github.com/sboesch/infixpy"}, "release_url": "https://pypi.org/project/infixpy/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Infix data structures for Python", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>infixpy</h1>\n<p>See blog post,\n<a href=\"https://medium.com/@matthagy/introducing-infixpy-scala-inspired-data-structures-for-python-53f3afc8696\" rel=\"nofollow\">Introducing infixpy: Scala-inspired data structures for Python</a>\nto learn about using this library.</p>\n<blockquote>\n<p>A functional, object-oriented approach for working with sequences and collections. Also similar to Spark RDDs and Java Streams. Hope you find they simplify your code by providing a plethora of common algorithms for working with sequences and collections.</p>\n</blockquote>\n<h2>Stephen's Direct from Scala example</h2>\n<p>Scala version</p>\n<pre><span class=\"k\">val</span> <span class=\"n\">a</span> <span class=\"k\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"mi\">50</span><span class=\"o\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span> <span class=\"k\">_</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">170</span><span class=\"o\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"o\">%</span> <span class=\"mi\">20</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">zipWithIndex</span>\n  <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">{</span> <span class=\"k\">case</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"s\">s\"Result[</span><span class=\"si\">$n</span><span class=\"s\">]=</span><span class=\"si\">$x</span><span class=\"s\">\"</span><span class=\"o\">}</span>\n  <span class=\"o\">.</span><span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">\"  .. \"</span><span class=\"o\">))</span>\n\n  <span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"nc\">Result</span><span class=\"o\">[</span><span class=\"err\">0</span><span class=\"o\">]</span><span class=\"k\">=</span><span class=\"mi\">20</span>  <span class=\"o\">..</span> <span class=\"nc\">Result</span><span class=\"o\">[</span><span class=\"err\">1</span><span class=\"o\">]</span><span class=\"k\">=</span><span class=\"mi\">40</span>  <span class=\"o\">..</span> <span class=\"nc\">Result</span><span class=\"o\">[</span><span class=\"err\">2</span><span class=\"o\">]</span><span class=\"k\">=</span><span class=\"mi\">60</span>  <span class=\"o\">..</span> <span class=\"nc\">Result</span><span class=\"o\">[</span><span class=\"err\">3</span><span class=\"o\">]</span><span class=\"k\">=</span><span class=\"mi\">80</span>\n</pre>\n<p>Version using the infixpy library with python</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">infixpy</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Seq</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">51</span><span class=\"p\">))</span>\n     <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n     <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">170</span><span class=\"p\">)</span>\n     <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n     <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">20</span> <span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n     <span class=\"o\">.</span><span class=\"n\">enumerate</span><span class=\"p\">()</span> \n     <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">'Result[</span><span class=\"si\">%d</span><span class=\"s1\">]=</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n     <span class=\"o\">.</span><span class=\"n\">mkstring</span><span class=\"p\">(</span><span class=\"s1\">' .. '</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Result[0]=20  .. Result[1]=40  .. Result[2]=60  .. Result[3]=80</span>\n</pre>\n<h2>Original Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">infixpy</span> <span class=\"kn\">import</span> <span class=\"n\">Seq</span>\n\n<span class=\"p\">(</span><span class=\"n\">Seq</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n <span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n <span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n <span class=\"o\">.</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">))</span>\n</pre>\n<h4>Output</h4>\n<pre>(1, SList([4, 10]))\n(0, SList([6, 12]))\n(2, SList([8]))\n</pre>\n<h2>Examples</h2>\n<p>See examples/ directory for additional examples of using infixpy.</p>\n<p>Also see example usages in\n<a href=\"https://github.com/matthagy/career_village_entities\" rel=\"nofollow\">career_village_entities</a>.</p>\n\n          </div>"}, "last_serial": 6091520, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "f4149715480546b336d0ad6c15c8f88e", "sha256": "f0c1d5bcbec3e4c33ca4b319516197280a8e4082e7f094c2d4d9834c19a87f51"}, "downloads": -1, "filename": "infixpy-0.0.3-py3.7.egg", "has_sig": false, "md5_digest": "f4149715480546b336d0ad6c15c8f88e", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 11137, "upload_time": "2019-11-07T05:56:29", "upload_time_iso_8601": "2019-11-07T05:56:29.436617Z", "url": "https://files.pythonhosted.org/packages/a2/6a/3a641daf569b8c7f37d3ea54950b6b8c4f94bcd0e7b6ec694beb3f236708/infixpy-0.0.3-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e35a7157c41c9867fcadff0ab9953e93", "sha256": "35f718d1358275d9609d8204f9627f9baa9f761c0971eceb5ed2b7ca50d735ee"}, "downloads": -1, "filename": "infixpy-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e35a7157c41c9867fcadff0ab9953e93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9598, "upload_time": "2019-11-07T03:56:00", "upload_time_iso_8601": "2019-11-07T03:56:00.325815Z", "url": "https://files.pythonhosted.org/packages/ed/25/e8b0753eb6d263cd03a484846378c75ec623a3e3512df24f6b4c07dd677e/infixpy-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "078130b838edbcabd7e313bfb263396b", "sha256": "3e67aab4eee8d037ccc3cc5dfeca2949905cc7bb465ec3d11591e52cebb34aac"}, "downloads": -1, "filename": "infixpy-0.0.3.tar.gz", "has_sig": false, "md5_digest": "078130b838edbcabd7e313bfb263396b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5360, "upload_time": "2019-11-07T03:56:02", "upload_time_iso_8601": "2019-11-07T03:56:02.815946Z", "url": "https://files.pythonhosted.org/packages/f6/c8/2729930aa8edef6fac5a13ff1bc140b7859fe58d51e586a74bbe982dee38/infixpy-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "8035675ca6e424110260052c18fe86bb", "sha256": "ada5538cbe68c6472811b43fda3a06b17b2415529daf3d42d4b41d33ae1955c6"}, "downloads": -1, "filename": "infixpy-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8035675ca6e424110260052c18fe86bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9463, "upload_time": "2019-11-07T05:56:28", "upload_time_iso_8601": "2019-11-07T05:56:28.155713Z", "url": "https://files.pythonhosted.org/packages/fb/65/b4ea5d5efe26ba1e4581d650afd8dbc01048c6481770eb01c726398ea661/infixpy-0.0.4-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8035675ca6e424110260052c18fe86bb", "sha256": "ada5538cbe68c6472811b43fda3a06b17b2415529daf3d42d4b41d33ae1955c6"}, "downloads": -1, "filename": "infixpy-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8035675ca6e424110260052c18fe86bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9463, "upload_time": "2019-11-07T05:56:28", "upload_time_iso_8601": "2019-11-07T05:56:28.155713Z", "url": "https://files.pythonhosted.org/packages/fb/65/b4ea5d5efe26ba1e4581d650afd8dbc01048c6481770eb01c726398ea661/infixpy-0.0.4-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:56:06 2020"}