{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "NoseJS is a `Nose`_ plugin for integrating JavaScript tests into a Python test suite.\n\n.. _Nose: http://www.somethingaboutorange.com/mrl/projects/nose/\n.. _Rhino: http://www.mozilla.org/rhino/\n\n.. contents::\n\nOverview\n========\n\nNoseJS is designed for Python projects that require JavaScript code for some Web functionality.  It currently has two features:\n\n- Discover and run JavaScript tests alongside Python tests\n- Validate JavaScript syntax (check for lint).\n\nInstall\n=======\n\nThere are some optional external dependencies in the sections below.\n\nYou can get NoseJS with `easy_install <http://peak.telecommunity.com/DevCenter/EasyInstall>`_ ::\n    \n    $ easy_install NoseJS\n\nOr you can clone the source using `Mercurial <http://www.selenic.com/mercurial/wiki/index.cgi/Mercurial>`_ from http://bitbucket.org/kumar303/nosejs/ and install it with ::\n    \n    $ python setup.py develop\n\nChecking JavaScript Syntax\n==========================\n\nNoseJS will find JavaScript files (e.g. ``app.js``) along the Nose path and run them through the `jsl`_ command line tool to check for \"lint.\"  In other words, show you syntax errors, warnings, etc.  You can install jsl on most systems using your package manager (i.e. ``port install javascript-lint`` on Mac OS X) otherwise it is available for download on the `jsl`_ site.  \n\n.. _jsl: http://www.javascriptlint.com/\n\nUsage\n-----\n\nTo check for lint without running any JavaScript unit tests, type::\n    \n    $ nosetests --with-javascript --no-javascript-tests path/to/javascript\n\nTo disable lint checking, add ``--no-javascript-lint``\n\nRunning JavaScript Tests\n========================\n\nNoseJS will also find and run JavaScript test files, those that match Nose's test pattern and end in ``.js``.  Currently, NoseJS supports running executing tests in `Rhino`_, a Java implementation of the JavaScript language.  There is experimental support for `python-spidermonkey <http://github.com/davisp/python-spidermonkey/tree/master>`_ using the ``--spidermonkey`` switch.\n\nUsage\n-----\n\nAssuming you've downloaded `Rhino`_ into ``~/src``, discover and run JavaScript tests with this command::\n    \n    $ nosetests --with-javascript --rhino-jar ~/src/rhino1_7R1/js.jar path/to/javascript/tests\n\nThis command would look for any files along Nose's path ending in .js that match Nose's current test pattern, collect them all, then execute them using Rhino in a single Java subprocess at the end of all other tests.  By default, files looking like ``test*.js`` will be collected and run.\n\nThe idea behind NoseJS is that you might have a Python web application that relies on JavaScript for some of its functionality and you want to run both Python and JavaScript tests with one command, `nosetests <http://www.somethingaboutorange.com/mrl/projects/nose/>`_.  You can put these JavaScript tests wherever you want in your project.\n\nHere is a more realistic example that shows how the `Fudge <http://farmdev.com/projects/fudge/>`_ project is tested simultaneously for Python and JavaScript functionality.  Its project layout looks roughly like this::\n\n    |-- fudge\n    |   |-- __init__.py\n    |   |-- patcher.py\n    |   |-- tests\n    |   |   |-- __init__.py\n    |   |   |-- test_fudge.py\n    |   |   |-- test_patcher.py\n    |-- javascript\n    |   |-- fudge\n    |   |   |-- fudge.js\n    |   |   |-- tests\n    |   |   |   |-- test_fudge.html\n    |   |   |   `-- test_fudge.js\n    `-- setup.py\n\nBoth Python and JavaScript tests can be run with this command::\n    \n    $ nosetests  --with-javascript \\\n                 --rhino-jar ~/src/rhino1_7R1/js.jar \\\n                 --with-dom \\\n                 --javascript-dir javascript/fudge/tests/\n    ......................................................\n    ----------------------------------------------------------------------\n    Test Fake\n      can find objects\n      can create objects\n      expected call not called\n      call intercepted\n      returns value\n      returns fake\n    Test ExpectedCall\n      ExpectedCall properties\n      call is logged\n    Test fudge.registry\n      expected call not called\n      start resets calls\n      stop resets calls\n      global stop\n      global clear expectations\n\n    Loaded 6 JavaScript files\n\n    OK\n    ----------------------------------------------------------------------\n    Ran 54 tests in 0.392s\n\n    OK\n    \nThe dots are the Python tests that were run and the output below that is what Fudge's JavaScript test files printed out.  Be sure to read the Caveats section below ;)\n\nSpecifying a path to JavaScript files\n-------------------------------------\n\nIf JavaScript files are nested in a subdirectory, like the above example, specify that directory with::\n    \n    $ nosetests --with-javascript --javascript-dir javascript/fudge/tests/ --javascript-dir ./another/dir\n\nnosejs JavaScript namespace\n---------------------------\n\nAll JavaScripts have the ``nosejs`` JavaScript namespace available for use.  The following methods are available:\n\n- **nosejs.requireFile(path)**\n  \n  - Load a JavaScript file from your test script.  If you require the same file multiple times, it will only \n    be loaded once.  If the file does not start with a slash, then it should be a path relative to the directory \n    of the script where requireFile() was called from.  For example, here is how test_fudge.js requires the \n    fudge library before testing::\n        \n        if (typeof nosejs !== 'undefined') {\n            nosejs.requireFile(\"../fudge.js\");\n        }\n\n- **nosejs.requireResource(name)**\n  \n  - Require a JavaScript file that is bundled with NoseJS.  There are a few available resources:\n    \n    jquery-1.3.1.js\n        Will load the `JQuery <http://jquery.com/>`_ library before loading any other tests\n\n    jquery/qunit-testrunner.js\n        Will load a very minimal set of JavaScript functions for testing.  It is a partial implementation of the `QUnit test runner <http://docs.jquery.com/QUnit>`_ interface.  \n        Supported methods: module(), test(), equals(), ok(), and expect()\n    \n    For example, test_fudge.js uses jquery and the testrunner ::\n    \n        if (typeof nosejs !== 'undefined') {\n            nosejs.requireResource(\"jquery-1.3.1.js\");\n            nosejs.requireResource(\"jquery/qunit-testrunner.js\");\n            nosejs.requireFile(\"../fudge.js\");\n        }\n\nUsing the DOM\n-------------\n\nIf your JavaScript under test relies on a browser-like DOM environment, it might still work!  Just run::\n    \n    $ nosetests --with-javascript --with-dom\n\nThis will load a copy of John Resig's `env.js <http://ejohn.org/projects/bringing-the-browser-to-the-server/>`_ script to simulate a DOM before loading any other JavaScript.  There are a few very minor patches made to env.js, marked with @@nosejs in the NoseJS source.\n\nCaveats\n-------\n\n- Currently if JavaScript tests fail, nosetests **will not** indicate failure and its exit status will be unaffected.  I can't figure out a clean way to do this.  Please get in touch if you'd like to help.  \n- In general, JavaScript tests are not very well integrated into Nose.\n\nWait ... Python *and* Java?\n---------------------------\n\n`Rhino`_ is pretty much the only stable, command line oriented implementation of JavaScript I know of and it's well supported by Mozilla.  \n\nAlternatively, John J. Lee created a Python binding to the fast `Spider Monkey engine <http://www.mozilla.org/js/spidermonkey/>`_, Atul Varma revived it once in a fork on `Google Code <http://code.google.com/p/python-spidermonkey/>`_, and now Paul J. Davis is working on it (in `git <http://github.com/davisp/python-spidermonkey/tree/master>`_ and it is released on `PyPI <http://pypi.python.org/pypi/python-spidermonkey>`_).  \n\nThere is current experimental support for Python Spidermonkey in NoseJS using the ``--spidermonkey`` option, which switches out the JavaScript engine.\n\nContributing\n============\n\nPlease submit `bugs and patches <http://bitbucket.org/kumar303/nosejs/issues/>`_.  All contributors will be acknowledged.  Thanks!\n\nChangelog\n=========\n\n- 0.9.4\n \n  - Multiple paths for the --javascript-dir option can now be specified on multiple lines in setup.cfg\n  \n- 0.9.3\n  \n  - Added --with-javascript-only option to stop execution of any other Nose tests when needed.\n  \n- 0.9.2\n  \n  - **CHANGED**: The --js-test-dir option is now known as --javascript-dir\n  - Added experimental support for python-spidermonkey\n  - Added JavaScript lint check using the jsl tool\n  - Fixed bugs in how custom paths to JavaScript were expanded\n  \n- 0.9.1\n  \n  - Fixed distribution problem\n  \n- 0.9\n  \n  - Initial release\n\nTo Do\n=====\n\n- Better spidermonkey support\n- Distribute a Rhino js.jar with NoseJS\n- Upgrade env.js using git repo", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "NoseJS", "package_url": "https://pypi.org/project/NoseJS/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/NoseJS/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/NoseJS/0.9.4/", "requires_dist": null, "requires_python": null, "summary": "A Nose plugin for integrating JavaScript tests into a Python test suite.", "version": "0.9.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>NoseJS is a <a href=\"http://www.somethingaboutorange.com/mrl/projects/nose/\" rel=\"nofollow\">Nose</a> plugin for integrating JavaScript tests into a Python test suite.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id2\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#install\" id=\"id3\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#checking-javascript-syntax\" id=\"id4\" rel=\"nofollow\">Checking JavaScript Syntax</a><ul>\n<li><a href=\"#usage\" id=\"id5\" rel=\"nofollow\">Usage</a></li>\n</ul>\n</li>\n<li><a href=\"#running-javascript-tests\" id=\"id6\" rel=\"nofollow\">Running JavaScript Tests</a><ul>\n<li><a href=\"#id1\" id=\"id7\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#specifying-a-path-to-javascript-files\" id=\"id8\" rel=\"nofollow\">Specifying a path to JavaScript files</a></li>\n<li><a href=\"#nosejs-javascript-namespace\" id=\"id9\" rel=\"nofollow\">nosejs JavaScript namespace</a></li>\n<li><a href=\"#using-the-dom\" id=\"id10\" rel=\"nofollow\">Using the DOM</a></li>\n<li><a href=\"#caveats\" id=\"id11\" rel=\"nofollow\">Caveats</a></li>\n<li><a href=\"#wait-python-and-java\" id=\"id12\" rel=\"nofollow\">Wait \u2026 Python <em>and</em> Java?</a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\" id=\"id13\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#changelog\" id=\"id14\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#to-do\" id=\"id15\" rel=\"nofollow\">To Do</a></li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Overview</a></h2>\n<p>NoseJS is designed for Python projects that require JavaScript code for some Web functionality.  It currently has two features:</p>\n<ul>\n<li>Discover and run JavaScript tests alongside Python tests</li>\n<li>Validate JavaScript syntax (check for lint).</li>\n</ul>\n</div>\n<div id=\"install\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Install</a></h2>\n<p>There are some optional external dependencies in the sections below.</p>\n<p>You can get NoseJS with <a href=\"http://peak.telecommunity.com/DevCenter/EasyInstall\" rel=\"nofollow\">easy_install</a></p>\n<pre>$ easy_install NoseJS\n</pre>\n<p>Or you can clone the source using <a href=\"http://www.selenic.com/mercurial/wiki/index.cgi/Mercurial\" rel=\"nofollow\">Mercurial</a> from <a href=\"http://bitbucket.org/kumar303/nosejs/\" rel=\"nofollow\">http://bitbucket.org/kumar303/nosejs/</a> and install it with</p>\n<pre>$ python setup.py develop\n</pre>\n</div>\n<div id=\"checking-javascript-syntax\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Checking JavaScript Syntax</a></h2>\n<p>NoseJS will find JavaScript files (e.g. <tt>app.js</tt>) along the Nose path and run them through the <a href=\"http://www.javascriptlint.com/\" rel=\"nofollow\">jsl</a> command line tool to check for \u201clint.\u201d  In other words, show you syntax errors, warnings, etc.  You can install jsl on most systems using your package manager (i.e. <tt>port install <span class=\"pre\">javascript-lint</span></tt> on Mac OS X) otherwise it is available for download on the <a href=\"http://www.javascriptlint.com/\" rel=\"nofollow\">jsl</a> site.</p>\n<div id=\"usage\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Usage</a></h3>\n<p>To check for lint without running any JavaScript unit tests, type:</p>\n<pre>$ nosetests --with-javascript --no-javascript-tests path/to/javascript\n</pre>\n<p>To disable lint checking, add <tt><span class=\"pre\">--no-javascript-lint</span></tt></p>\n</div>\n</div>\n<div id=\"running-javascript-tests\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Running JavaScript Tests</a></h2>\n<p>NoseJS will also find and run JavaScript test files, those that match Nose\u2019s test pattern and end in <tt>.js</tt>.  Currently, NoseJS supports running executing tests in <a href=\"http://www.mozilla.org/rhino/\" rel=\"nofollow\">Rhino</a>, a Java implementation of the JavaScript language.  There is experimental support for <a href=\"http://github.com/davisp/python-spidermonkey/tree/master\" rel=\"nofollow\">python-spidermonkey</a> using the <tt><span class=\"pre\">--spidermonkey</span></tt> switch.</p>\n<div id=\"id1\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Usage</a></h3>\n<p>Assuming you\u2019ve downloaded <a href=\"http://www.mozilla.org/rhino/\" rel=\"nofollow\">Rhino</a> into <tt>~/src</tt>, discover and run JavaScript tests with this command:</p>\n<pre>$ nosetests --with-javascript --rhino-jar ~/src/rhino1_7R1/js.jar path/to/javascript/tests\n</pre>\n<p>This command would look for any files along Nose\u2019s path ending in .js that match Nose\u2019s current test pattern, collect them all, then execute them using Rhino in a single Java subprocess at the end of all other tests.  By default, files looking like <tt><span class=\"pre\">test*.js</span></tt> will be collected and run.</p>\n<p>The idea behind NoseJS is that you might have a Python web application that relies on JavaScript for some of its functionality and you want to run both Python and JavaScript tests with one command, <a href=\"http://www.somethingaboutorange.com/mrl/projects/nose/\" rel=\"nofollow\">nosetests</a>.  You can put these JavaScript tests wherever you want in your project.</p>\n<p>Here is a more realistic example that shows how the <a href=\"http://farmdev.com/projects/fudge/\" rel=\"nofollow\">Fudge</a> project is tested simultaneously for Python and JavaScript functionality.  Its project layout looks roughly like this:</p>\n<pre>|-- fudge\n|   |-- __init__.py\n|   |-- patcher.py\n|   |-- tests\n|   |   |-- __init__.py\n|   |   |-- test_fudge.py\n|   |   |-- test_patcher.py\n|-- javascript\n|   |-- fudge\n|   |   |-- fudge.js\n|   |   |-- tests\n|   |   |   |-- test_fudge.html\n|   |   |   `-- test_fudge.js\n`-- setup.py\n</pre>\n<p>Both Python and JavaScript tests can be run with this command:</p>\n<pre>$ nosetests  --with-javascript \\\n             --rhino-jar ~/src/rhino1_7R1/js.jar \\\n             --with-dom \\\n             --javascript-dir javascript/fudge/tests/\n......................................................\n----------------------------------------------------------------------\nTest Fake\n  can find objects\n  can create objects\n  expected call not called\n  call intercepted\n  returns value\n  returns fake\nTest ExpectedCall\n  ExpectedCall properties\n  call is logged\nTest fudge.registry\n  expected call not called\n  start resets calls\n  stop resets calls\n  global stop\n  global clear expectations\n\nLoaded 6 JavaScript files\n\nOK\n----------------------------------------------------------------------\nRan 54 tests in 0.392s\n\nOK\n</pre>\n<p>The dots are the Python tests that were run and the output below that is what Fudge\u2019s JavaScript test files printed out.  Be sure to read the Caveats section below ;)</p>\n</div>\n<div id=\"specifying-a-path-to-javascript-files\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Specifying a path to JavaScript files</a></h3>\n<p>If JavaScript files are nested in a subdirectory, like the above example, specify that directory with:</p>\n<pre>$ nosetests --with-javascript --javascript-dir javascript/fudge/tests/ --javascript-dir ./another/dir\n</pre>\n</div>\n<div id=\"nosejs-javascript-namespace\">\n<h3><a href=\"#id9\" rel=\"nofollow\">nosejs JavaScript namespace</a></h3>\n<p>All JavaScripts have the <tt>nosejs</tt> JavaScript namespace available for use.  The following methods are available:</p>\n<ul>\n<li><p><strong>nosejs.requireFile(path)</strong></p>\n<ul>\n<li><p>Load a JavaScript file from your test script.  If you require the same file multiple times, it will only\nbe loaded once.  If the file does not start with a slash, then it should be a path relative to the directory\nof the script where requireFile() was called from.  For example, here is how test_fudge.js requires the\nfudge library before testing:</p>\n<pre>if (typeof nosejs !== 'undefined') {\n    nosejs.requireFile(\"../fudge.js\");\n}\n</pre>\n</li>\n</ul>\n</li>\n<li><p><strong>nosejs.requireResource(name)</strong></p>\n<ul>\n<li><p>Require a JavaScript file that is bundled with NoseJS.  There are a few available resources:</p>\n<dl>\n<dt>jquery-1.3.1.js</dt>\n<dd><p>Will load the <a href=\"http://jquery.com/\" rel=\"nofollow\">JQuery</a> library before loading any other tests</p>\n</dd>\n<dt>jquery/qunit-testrunner.js</dt>\n<dd><p>Will load a very minimal set of JavaScript functions for testing.  It is a partial implementation of the <a href=\"http://docs.jquery.com/QUnit\" rel=\"nofollow\">QUnit test runner</a> interface.\nSupported methods: module(), test(), equals(), ok(), and expect()</p>\n</dd>\n</dl>\n<p>For example, test_fudge.js uses jquery and the testrunner</p>\n<pre>if (typeof nosejs !== 'undefined') {\n    nosejs.requireResource(\"jquery-1.3.1.js\");\n    nosejs.requireResource(\"jquery/qunit-testrunner.js\");\n    nosejs.requireFile(\"../fudge.js\");\n}\n</pre>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"using-the-dom\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Using the DOM</a></h3>\n<p>If your JavaScript under test relies on a browser-like DOM environment, it might still work!  Just run:</p>\n<pre>$ nosetests --with-javascript --with-dom\n</pre>\n<p>This will load a copy of John Resig\u2019s <a href=\"http://ejohn.org/projects/bringing-the-browser-to-the-server/\" rel=\"nofollow\">env.js</a> script to simulate a DOM before loading any other JavaScript.  There are a few very minor patches made to env.js, marked with @@nosejs in the NoseJS source.</p>\n</div>\n<div id=\"caveats\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Caveats</a></h3>\n<ul>\n<li>Currently if JavaScript tests fail, nosetests <strong>will not</strong> indicate failure and its exit status will be unaffected.  I can\u2019t figure out a clean way to do this.  Please get in touch if you\u2019d like to help.</li>\n<li>In general, JavaScript tests are not very well integrated into Nose.</li>\n</ul>\n</div>\n<div id=\"wait-python-and-java\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Wait \u2026 Python <em>and</em> Java?</a></h3>\n<p><a href=\"http://www.mozilla.org/rhino/\" rel=\"nofollow\">Rhino</a> is pretty much the only stable, command line oriented implementation of JavaScript I know of and it\u2019s well supported by Mozilla.</p>\n<p>Alternatively, John J. Lee created a Python binding to the fast <a href=\"http://www.mozilla.org/js/spidermonkey/\" rel=\"nofollow\">Spider Monkey engine</a>, Atul Varma revived it once in a fork on <a href=\"http://code.google.com/p/python-spidermonkey/\" rel=\"nofollow\">Google Code</a>, and now Paul J. Davis is working on it (in <a href=\"http://github.com/davisp/python-spidermonkey/tree/master\" rel=\"nofollow\">git</a> and it is released on <a href=\"http://pypi.python.org/pypi/python-spidermonkey\" rel=\"nofollow\">PyPI</a>).</p>\n<p>There is current experimental support for Python Spidermonkey in NoseJS using the <tt><span class=\"pre\">--spidermonkey</span></tt> option, which switches out the JavaScript engine.</p>\n</div>\n</div>\n<div id=\"contributing\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Contributing</a></h2>\n<p>Please submit <a href=\"http://bitbucket.org/kumar303/nosejs/issues/\" rel=\"nofollow\">bugs and patches</a>.  All contributors will be acknowledged.  Thanks!</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Changelog</a></h2>\n<ul>\n<li>0.9.4<ul>\n<li>Multiple paths for the \u2013javascript-dir option can now be specified on multiple lines in setup.cfg</li>\n</ul>\n</li>\n<li>0.9.3<ul>\n<li>Added \u2013with-javascript-only option to stop execution of any other Nose tests when needed.</li>\n</ul>\n</li>\n<li>0.9.2<ul>\n<li><strong>CHANGED</strong>: The \u2013js-test-dir option is now known as \u2013javascript-dir</li>\n<li>Added experimental support for python-spidermonkey</li>\n<li>Added JavaScript lint check using the jsl tool</li>\n<li>Fixed bugs in how custom paths to JavaScript were expanded</li>\n</ul>\n</li>\n<li>0.9.1<ul>\n<li>Fixed distribution problem</li>\n</ul>\n</li>\n<li>0.9<ul>\n<li>Initial release</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"to-do\">\n<h2><a href=\"#id15\" rel=\"nofollow\">To Do</a></h2>\n<ul>\n<li>Better spidermonkey support</li>\n<li>Distribute a Rhino js.jar with NoseJS</li>\n<li>Upgrade env.js using git repo</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 784810, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "702042bd142a00671e06cf467d253877", "sha256": "bac7cd68408a3cf15f5a733f5ab590949c217fa938b95db435ad6468b5c56654"}, "downloads": -1, "filename": "NoseJS-0.9.tar.gz", "has_sig": true, "md5_digest": "702042bd142a00671e06cf467d253877", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47657, "upload_time": "2009-02-15T23:33:53", "upload_time_iso_8601": "2009-02-15T23:33:53.436606Z", "url": "https://files.pythonhosted.org/packages/8b/0b/e83b7f9fa7a7cc16826ae999f445a9820a3713d681370063038ec247ff76/NoseJS-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "8a95acc79fadb93a7f34457b64314792", "sha256": "20c6e774dca946d4e3c8111a7e8dd91eef98025a924f1b2102ac42acafd2c4e4"}, "downloads": -1, "filename": "NoseJS-0.9.1.tar.gz", "has_sig": true, "md5_digest": "8a95acc79fadb93a7f34457b64314792", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47718, "upload_time": "2009-02-16T03:56:18", "upload_time_iso_8601": "2009-02-16T03:56:18.618474Z", "url": "https://files.pythonhosted.org/packages/b8/b4/e3a6d8095baf8bf88348efc60b93eaf9d52fdcf8f35a1c85c1f3d6d9688e/NoseJS-0.9.1.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "152854c3bde2cbc2fc558f9918892466", "sha256": "e2045a7158991e677027b43cf9a5b45636bcf25f3928dcce6aaaf31c5dfcf35b"}, "downloads": -1, "filename": "NoseJS-0.9.4-py2.5.egg", "has_sig": true, "md5_digest": "152854c3bde2cbc2fc558f9918892466", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 62310, "upload_time": "2009-09-14T17:08:55", "upload_time_iso_8601": "2009-09-14T17:08:55.880768Z", "url": "https://files.pythonhosted.org/packages/8a/1d/5ab99b6137b960bb901750aa14638d91d8cce71ddff8ed16ac9f6b30ceb6/NoseJS-0.9.4-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "904fdb01eba531419e98ab32065c39c5", "sha256": "be15b59f0e38c6dc41ae5819fa0a88bc29ca1c871e6b308dc3a6a8a7479b3063"}, "downloads": -1, "filename": "NoseJS-0.9.4.tar.gz", "has_sig": true, "md5_digest": "904fdb01eba531419e98ab32065c39c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52082, "upload_time": "2009-09-14T17:08:54", "upload_time_iso_8601": "2009-09-14T17:08:54.970806Z", "url": "https://files.pythonhosted.org/packages/c1/76/cb74641148504a3484cf0e16cfd229be523c307cea9a787010d89039c097/NoseJS-0.9.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "152854c3bde2cbc2fc558f9918892466", "sha256": "e2045a7158991e677027b43cf9a5b45636bcf25f3928dcce6aaaf31c5dfcf35b"}, "downloads": -1, "filename": "NoseJS-0.9.4-py2.5.egg", "has_sig": true, "md5_digest": "152854c3bde2cbc2fc558f9918892466", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 62310, "upload_time": "2009-09-14T17:08:55", "upload_time_iso_8601": "2009-09-14T17:08:55.880768Z", "url": "https://files.pythonhosted.org/packages/8a/1d/5ab99b6137b960bb901750aa14638d91d8cce71ddff8ed16ac9f6b30ceb6/NoseJS-0.9.4-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "904fdb01eba531419e98ab32065c39c5", "sha256": "be15b59f0e38c6dc41ae5819fa0a88bc29ca1c871e6b308dc3a6a8a7479b3063"}, "downloads": -1, "filename": "NoseJS-0.9.4.tar.gz", "has_sig": true, "md5_digest": "904fdb01eba531419e98ab32065c39c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52082, "upload_time": "2009-09-14T17:08:54", "upload_time_iso_8601": "2009-09-14T17:08:54.970806Z", "url": "https://files.pythonhosted.org/packages/c1/76/cb74641148504a3484cf0e16cfd229be523c307cea9a787010d89039c097/NoseJS-0.9.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:46 2020"}