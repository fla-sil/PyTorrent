{"info": {"author": "Rubbie Kelvin", "author_email": "rubbiekelvinvoltsman@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Sockdot\n\n### simplified tcp networking library\nnote: This is <b>not a websocket.</b>\n<br>\n\nsockdot allows you to create server/client applications without having to use web-standard protocols in your application. the library is a threaded tcp socket and allows for events to be used, making it easy to inpliment in server/client application. i created this library to meet my needs in a Lan software project, so 't could be of use to someone else :).\n\n### Installation\n```shell\npip install sockdot\n```\n\nInstalling from source.\n```shell\ngit clone https://github.com/rubbiekelvin/sockdot.git\ncd sockdot\npython setup.py sdist bdist_wheel\npip install dist\\sockdot-1.0.1-py3-none-any.whl\n```\n\n### Usage\n\nserver.py</br>\n```python\nfrom sockdot import Server\nfrom sockdot.events import Event\n\nserverevents = Event()\nserver = Server(debug=True)\n\n@serverevents.event\ndef on_data_recieved(client, data):\n\tprint(\"recieved:\", data)\n\tserver.send(client, f\"you said {data}\")\n\n@serverevents.event\ndef on_connection_open(client):\n\tprint(f\"client {client} joined\")\n\n@serverevents.event\ndef on_connection_close(client):\n\tprint(client, \"closed connection\")\n\n@serverevents.event\ndef on_server_destruct():\n\tprint(\"server shutdown\")\n\n@serverevents.event\ndef on_error(exception, message):\n\t# print(f\"error {exception} occured, message:\", message)\n\tpass\n\n@serverevents.event\ndef on_port_changed(port):\n\tprint(\"server changed port to\", port)\n\n@serverevents.event\ndef on_running_changed(running):\n\tprint(\"server is running\" if running else \"server is not running\")\n\nserver.updateevent(serverevents)\nserver.run()\n\n```\n<small>the server's runs on the machine's host name</small>\n```python\nfrom sockdot import host\nprint(host())\n# outputs [\"host_name\", \"host_ip\"]\n```\n\nclient.py\n\n```python\nimport time, threading\nfrom sockdot import Client\nfrom sockdot.events import Event\n\nclientevents = Event()\nclient = Client(host=\"rubbie-io\", debug=True)\n\ndef start(connected):\n\tif connected:\n\t\tfor i in range(10):\n\t\t\tclient.send(str(i))\n\t\t\ttime.sleep(4)\n\t\tclient.close()\n\n@clientevents.event\ndef on_data_recieved(data):\n\tprint(f\"got {data} from server\")\n\n@clientevents.event\ndef on_connected_changed(connected):\n\tthreading.Thread(target=start, args=(connected,)).start()\n\n@clientevents.event\ndef on_error(exception, message):\n\tprint(f\"error {exception} occured, message:\", message)\n\n@clientevents.event\ndef on_host_changed(host):\n\tpass\n\n@clientevents.event\ndef on_port_changed(port):\n\tpass\n\n@clientevents.event\ndef on_handshake_started():\n\tpass\n\n@clientevents.event\ndef on_handshake_ended(result):\n\tpass\n\nclient.updateevent(clientevents)\nclient.connect()\n\n```\n\n## Adding authenthecation\ncreate a file <b>\".auth\"</b>, could be anything you want, but in my case, i named it \".auth\". the file contains keys and values of security parameters in json format.\n\n\n```json\n{\n\t\"SECURITY_KEY\" : \"secret key\",\n\t\"WHITELIST\": [],\n\t\"BLACKLIST\": [],\n\t\"USE_WHITELIST\": false\n}\n```\n\nin server.py, make this change:<br>\nnote that it is also possible for auth settings to be in a python dictionary, use could use any one you want. the <span style=\"color: #26c6da;\">auth</span> keyword argument can be a <span style=\"color: #ffa000;\">str</span> (filename) type or <span style=\"color: #ffa000;\">dict</span> (auth dictionary).\n```python\n# from file...\nserver = Server(debug=True, auth=\".auth\")\n\n# from dictionary\nserver = Server(debug=True, auth={\n\t\"SECURITY_KEY\" : \"secret key\",\n\t\"WHITELIST\": [],\n\t\"BLACKLIST\": [],\n\t\"USE_WHITELIST\": False\n})\n```\n\nin client.py, make this change:\n```python\nclient.connect(authkey=\"secret key\")\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rubbiekelvin/sockdot", "keywords": "socket client server multithreaded", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sockdot", "package_url": "https://pypi.org/project/sockdot/", "platform": "", "project_url": "https://pypi.org/project/sockdot/", "project_urls": {"Homepage": "https://github.com/rubbiekelvin/sockdot"}, "release_url": "https://pypi.org/project/sockdot/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Multithreaded TCP server/client", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sockdot</h1>\n<h3>simplified tcp networking library</h3>\n<p>note: This is <b>not a websocket.</b>\n<br></p>\n<p>sockdot allows you to create server/client applications without having to use web-standard protocols in your application. the library is a threaded tcp socket and allows for events to be used, making it easy to inpliment in server/client application. i created this library to meet my needs in a Lan software project, so 't could be of use to someone else :).</p>\n<h3>Installation</h3>\n<pre>pip install sockdot\n</pre>\n<p>Installing from source.</p>\n<pre>git clone https://github.com/rubbiekelvin/sockdot.git\n<span class=\"nb\">cd</span> sockdot\npython setup.py sdist bdist_wheel\npip install dist<span class=\"se\">\\s</span>ockdot-1.0.1-py3-none-any.whl\n</pre>\n<h3>Usage</h3>\n<p>server.py<br></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sockdot</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sockdot.events</span> <span class=\"kn\">import</span> <span class=\"n\">Event</span>\n\n<span class=\"n\">serverevents</span> <span class=\"o\">=</span> <span class=\"n\">Event</span><span class=\"p\">()</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@serverevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_data_recieved</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"recieved:\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\t<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s2\">\"you said </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@serverevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_connection_open</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"client </span><span class=\"si\">{</span><span class=\"n\">client</span><span class=\"si\">}</span><span class=\"s2\"> joined\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@serverevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_connection_close</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s2\">\"closed connection\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@serverevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_server_destruct</span><span class=\"p\">():</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"server shutdown\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@serverevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_error</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># print(f\"error {exception} occured, message:\", message)</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"nd\">@serverevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_port_changed</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"server changed port to\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@serverevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_running_changed</span><span class=\"p\">(</span><span class=\"n\">running</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"server is running\"</span> <span class=\"k\">if</span> <span class=\"n\">running</span> <span class=\"k\">else</span> <span class=\"s2\">\"server is not running\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">updateevent</span><span class=\"p\">(</span><span class=\"n\">serverevents</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>&lt;small&gt;the server's runs on the machine's host name&lt;/small&gt;</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sockdot</span> <span class=\"kn\">import</span> <span class=\"n\">host</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">())</span>\n<span class=\"c1\"># outputs [\"host_name\", \"host_ip\"]</span>\n</pre>\n<p>client.py</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"o\">,</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sockdot</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sockdot.events</span> <span class=\"kn\">import</span> <span class=\"n\">Event</span>\n\n<span class=\"n\">clientevents</span> <span class=\"o\">=</span> <span class=\"n\">Event</span><span class=\"p\">()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"rubbie-io\"</span><span class=\"p\">,</span> <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"n\">connected</span><span class=\"p\">):</span>\n\t<span class=\"k\">if</span> <span class=\"n\">connected</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n\t\t\t<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n\t\t\t<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@clientevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_data_recieved</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"got </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"s2\"> from server\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@clientevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_connected_changed</span><span class=\"p\">(</span><span class=\"n\">connected</span><span class=\"p\">):</span>\n\t<span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">connected</span><span class=\"p\">,))</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@clientevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_error</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"error </span><span class=\"si\">{</span><span class=\"n\">exception</span><span class=\"si\">}</span><span class=\"s2\"> occured, message:\"</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@clientevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_host_changed</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"nd\">@clientevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_port_changed</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"nd\">@clientevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_handshake_started</span><span class=\"p\">():</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"nd\">@clientevents</span><span class=\"o\">.</span><span class=\"n\">event</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_handshake_ended</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">updateevent</span><span class=\"p\">(</span><span class=\"n\">clientevents</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<h2>Adding authenthecation</h2>\n<p>create a file <b>\".auth\"</b>, could be anything you want, but in my case, i named it \".auth\". the file contains keys and values of security parameters in json format.</p>\n<pre><span class=\"p\">{</span>\n\t<span class=\"nt\">\"SECURITY_KEY\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"secret key\"</span><span class=\"p\">,</span>\n\t<span class=\"nt\">\"WHITELIST\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n\t<span class=\"nt\">\"BLACKLIST\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n\t<span class=\"nt\">\"USE_WHITELIST\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">}</span>\n</pre>\n<p>in server.py, make this change:<br>\nnote that it is also possible for auth settings to be in a python dictionary, use could use any one you want. the <span>auth</span> keyword argument can be a <span>str</span> (filename) type or <span>dict</span> (auth dictionary).</p>\n<pre><span class=\"c1\"># from file...</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"s2\">\".auth\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># from dictionary</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"p\">{</span>\n\t<span class=\"s2\">\"SECURITY_KEY\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"secret key\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"WHITELIST\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n\t<span class=\"s2\">\"BLACKLIST\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n\t<span class=\"s2\">\"USE_WHITELIST\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n<span class=\"p\">})</span>\n</pre>\n<p>in client.py, make this change:</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">authkey</span><span class=\"o\">=</span><span class=\"s2\">\"secret key\"</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6217751, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "dcb40c1bbb2475b7e057c2eb07a40281", "sha256": "9c1b1cdd005b8324402af8f06d8e9c1ee6574ad98e5bc35a68f51d75733dfc4d"}, "downloads": -1, "filename": "sockdot-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dcb40c1bbb2475b7e057c2eb07a40281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5367, "upload_time": "2019-11-27T21:01:03", "upload_time_iso_8601": "2019-11-27T21:01:03.188388Z", "url": "https://files.pythonhosted.org/packages/b3/ea/8e7fa6fe2ad8f0fbe53a776447d4caea497a550e1514d639e4aaa70a17ab/sockdot-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f83166911ad1aff3fd27aa963ee6e465", "sha256": "b86bc77a69a628da8ed5efbade62dcc04f610ee21a11f766c4bdd808f19fc059"}, "downloads": -1, "filename": "sockdot-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f83166911ad1aff3fd27aa963ee6e465", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4063, "upload_time": "2019-11-27T21:01:05", "upload_time_iso_8601": "2019-11-27T21:01:05.981351Z", "url": "https://files.pythonhosted.org/packages/b7/8f/c5ed11a3b22d44fd2a45c676f8173dbf34da91e2659e82e8025086233683/sockdot-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "894707d2f7462f576b049bd96988676b", "sha256": "b7a6e356d32f5202e44ff235b8d518c64ea56cd12061e08c19246d80d13fce2c"}, "downloads": -1, "filename": "sockdot-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "894707d2f7462f576b049bd96988676b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6567, "upload_time": "2019-11-29T10:47:00", "upload_time_iso_8601": "2019-11-29T10:47:00.074601Z", "url": "https://files.pythonhosted.org/packages/db/1d/2f8a078635b2344d8f940ddeb2aa7339b40ddc3c54d9cbb13e31fee1aa86/sockdot-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e7df4f8222b24efbfff0eef96c91237", "sha256": "2a70796c7c4134c09370e6ce27674f5a077b66f06fec583b4dc279b8686ae56b"}, "downloads": -1, "filename": "sockdot-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7e7df4f8222b24efbfff0eef96c91237", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5222, "upload_time": "2019-11-29T10:47:12", "upload_time_iso_8601": "2019-11-29T10:47:12.405812Z", "url": "https://files.pythonhosted.org/packages/8f/3b/76719ddab16e319cfe325283a96c457eaefea8110872dac3fa082a3ba942/sockdot-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "894707d2f7462f576b049bd96988676b", "sha256": "b7a6e356d32f5202e44ff235b8d518c64ea56cd12061e08c19246d80d13fce2c"}, "downloads": -1, "filename": "sockdot-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "894707d2f7462f576b049bd96988676b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6567, "upload_time": "2019-11-29T10:47:00", "upload_time_iso_8601": "2019-11-29T10:47:00.074601Z", "url": "https://files.pythonhosted.org/packages/db/1d/2f8a078635b2344d8f940ddeb2aa7339b40ddc3c54d9cbb13e31fee1aa86/sockdot-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e7df4f8222b24efbfff0eef96c91237", "sha256": "2a70796c7c4134c09370e6ce27674f5a077b66f06fec583b4dc279b8686ae56b"}, "downloads": -1, "filename": "sockdot-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7e7df4f8222b24efbfff0eef96c91237", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5222, "upload_time": "2019-11-29T10:47:12", "upload_time_iso_8601": "2019-11-29T10:47:12.405812Z", "url": "https://files.pythonhosted.org/packages/8f/3b/76719ddab16e319cfe325283a96c457eaefea8110872dac3fa082a3ba942/sockdot-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:03 2020"}