{"info": {"author": "Greg Operto", "author_email": "goperto@barcelonabeta.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "Operating System :: Unix", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "# nisnap\n\n[![pipeline status](https://gitlab.com/xgrg/nisnap/badges/master/pipeline.svg)](https://gitlab.com/xgrg/nisnap/commits/master)\n[![coverage report](https://gitlab.com/xgrg/nisnap/badges/master/coverage.svg)](https://gitlab.com/xgrg/nisnap/commits/master)\n[![downloads](https://img.shields.io/pypi/dm/nisnap.svg)](https://pypi.org/project/nisnap/)\n[![python versions](https://img.shields.io/pypi/pyversions/nisnap.svg)](https://pypi.org/project/nisnap/)\n[![pypi version](https://img.shields.io/pypi/v/nisnap.svg)](https://pypi.org/project/nisnap/)\n\n\nCreate snapshots of segmentation maps produced by neuroimaging software.\nInspired by tools like [nilearn](https://nilearn.github.io/),\n[visualqc](https://github.com/raamana/visualqc), [fmriprep](https://fmriprep.readthedocs.io/en/stable/) and others.\n\n![example](https://gitlab.com/xgrg/nisnap/raw/master/doc/nisnap.gif)\n\n![example](https://gitlab.com/xgrg/nisnap/raw/master/doc/nisnap2.gif)\n\n\n\n\n## Usage\n\n#### From a Terminal:\n\n```sh\nnisnap c1.nii.gz c2.nii.gz c3.nii.gz --bg /tmp/raw.nii.gz --opacity 50 -o /tmp/snapshot.gif\n\nnisnap labels.nii.gz --bg raw.nii.gz --opacity 50 --axes x --contours -o /tmp/snapshot.gif\n```\n\n```sh\nArguments:\n\n  files                 segmentation map(s) to create snapshots from\n\noptional arguments:\n  --bg BG               background image on which segmentations will be plotted.\n  --axes AXES           choose the direction of the cuts (among 'x', 'y', or 'z')\n  --opacity OPACITY     opacity (in %) of the segmentation maps when plotted over a background image. Only used if a background image is provided.\n  --contours            if True, segmentations will be rendered as contoured regions. If False, will be rendered as superimposed masks.\n  -o OUTPUT, --output OUTPUT\n                        snapshot will be stored in this file. If extension is .gif, snapshot will be rendered as an animation.\n  --config CONFIG       [XNAT mode] XNAT configuration file\n  --nobg                [XNAT mode] no background image. Plots segmentation maps only.\n  -e EXPERIMENT, --experiment EXPERIMENT\n                        [XNAT mode] ID of the experiment to create snapshots from.\n  --resource RESOURCE   [XNAT mode] name of the resource to download\n  --cache               [XNAT mode] skip downloads (e.g. if running for a second time\n  --disable_warnings\n  --verbose\n```\n\n\n#### From IPython/Jupyter Notebook:\n\nExample:\n\n```python\nimport nisnap\nfilepaths = ['c1.nii.gz', 'c2.nii.gz', 'c3.nii.gz']\nbg = 'source.nii.gz'\nnisnap.plot_segment(filepaths, bg=bg, opacity=30, axes='x', animated=True)\n```\n\n#### Reference:\n\n```python\ndef plot_segment(filepaths, axes='xyz', bg=None, opacity=30, slices=None,\n        animated=False, savefig=None, contours=False, rowsize=None,\n        figsize=None, width=2000):\n    \"\"\"Plots a set of segmentation maps/masks.\n\n    Parameters\n    ----------\n    filepaths: a list of str\n        Paths to segmentation maps (between 1 and 3). Must be of same dimensions\n        and in same reference space.\n\n    axes: string, or a tuple of strings\n        Choose the direction of the cuts (among 'x', 'y', or 'z')\n\n    bg: None or str\n        Path to the background image that the masks will be plotted on top of.\n        If nothing is specified, the segmentation maps/masks will be plotted only.\n        The opacity (in %) of the segmentation maps when plotted over a background\n        image. Only used if a background image is provided. Default: 10\n\n    slices: None, or a tuple of floats\n        The indexes of the slices that will be rendered. If None is given, the\n        slices are selected automatically.\n\n    animated: boolean, optional\n        If True, the snapshot will be rendered as an animated GIF.\n        If False, the snapshot will be rendered as a static PNG image. Default:\n        False\n\n    savefig: string, optional\n        Filepath where the resulting snapshot will be created. If None is given,\n        a temporary file will be created and/or the result will be displayed\n        inline in a Jupyter Notebook.\n\n    contours: boolean, optional\n        If True, segmentations will be rendered as contoured regions. If False,\n        will be rendered as superimposed masks. Default: False\n\n    rowsize: None, or int, or dict\n        Set the number of slices per row in the final compiled figure.\n        Default: {'x': 9, 'y': 9, 'z': 6}\n\n    figsize: None, or a 2-uple of floats, or dict\n        Sets the dimensions of one row of slices.\n        Default: {'x': (37, 3), 'y': (40, 3), 'z': (18, 3)}\n\n    width: int, optional\n        Width (in px) of the final compiled figure. Default: 2000.\n\n\n    See Also\n    --------\n    xnat.plot_segment : To plot segmentation maps directly providing their\n        experiment_id on an XNAT instance\n    \"\"\"\n```\n\n### Using XNAT\n\n#### From a Terminal:\n\n```sh\nnisnap --config .xnat.cfg -e EXPERIMENT_ID --resource ASHS --axes A --opacity 50 -o /tmp/test.gif\n```\n\n#### From IPython/Jupyter Notebook:\n\nExample:\n\n```python\nfrom nisnap import xnat\nxnat.plot_segment(config='/home/grg/.xnat.cfg', experiment_id='BBRC_E000',\n  raw=True, opacity=30, axes='x', slices=range(100,120,2), figsize=(15,5),\n  animated=True)\n```\n\n#### Reference:\n\n```python\ndef plot_segment(config, experiment_id, savefig=None, slices=None,\n    resource_name='SPM12_SEGMENT_T2T1_COREG',\n    axes='xyz', raw=True, opacity=10, animated=False, rowsize=None,\n    figsize=None, width=2000, contours=False, cache=False):\n    \"\"\"Download a given experiment/resource from an XNAT instance and create\n    snapshots of this resource along a selected set of slices.\n\n    Parameters\n    ----------\n    config: string\n        Configuration file to the XNAT instance.\n\n    experiment_id : string\n        ID of the experiment from which to download the segmentation maps and\n        raw anatomical image.\n\n    savefig: string, optional\n        Filepath where the resulting snapshot will be created. If None is given,\n        a temporary file will be created and/or the result will be displayed\n        inline in a Jupyter Notebook.\n\n    slices: None, or a tuple of floats\n        The indexes of the slices that will be rendered. If None is given, the\n        slices are selected automatically.\n\n    resource_name: string, optional\n        Name of the resource where the segmentation maps are stored in the XNAT\n        instance. Default: SPM12_SEGMENT_T2T1_COREG\n\n    axes: string, or a tuple of strings\n        Choose the direction of the cuts (among 'x', 'y', 'z')\n\n    raw: boolean, optional\n        If True, the segmentation maps will be plotted over a background image\n        (e.g. anatomical T1 or T2, as in xnat.download_resources). If False,\n        the segmentation maps will be rendered only. Default: True\n\n    opacity: integer, optional\n        The opacity (in %) of the segmentation maps when plotted over a background\n        image. Only used if a background image is provided. Default: 10\n\n    animated: boolean, optional\n        If True, the snapshot will be rendered as an animated GIF.\n        If False, the snapshot will be rendered as a static PNG image. Default:\n        False\n\n    rowsize: None, or int, or dict\n        Set the number of slices per row in the final compiled figure.\n        Default: {'x': 9, 'y': 9, 'z': 6}\n\n    figsize: None, or a 2-uple of floats, or dict\n        Sets the dimensions of one row of slices.\n        Default: {'x': (37, 3), 'y': (40, 3), 'z': (18, 3)}\n\n    width: int, optional\n        Width (in px) of the final compiled figure. Default: 2000.\n\n    contours: boolean, optional\n        If True, segmentations will be rendered as contoured regions. If False,\n        will be rendered as superimposed masks. Default: False\n\n    cache: boolean, optional\n        If False, resources will be normally downloaded from XNAT. If True,\n        download will be skipped and data will be looked up locally.\n        Default: False\n\n    Notes\n    -----\n    Requires an XNAT instance where SPM segmentation maps will be found\n    following a certain data organization in experiment resources named\n    `resource_name`.\n\n    See Also\n    --------\n    xnat.download_resources : To download resources (e.g. segmentation maps +\n        raw images) from an XNAT instance (e.g. prior to snapshot creation)\n    nisnap.plot_segment : To plot segmentation maps directly providing their\n        filepaths\n    \"\"\"\n```\n\n\n```python\ndef download_resources(config, experiment_id, resource_name,  destination,\n    raw=True, cache=False):\n    \"\"\"Download a given experiment/resource from an XNAT instance in a local\n    destination folder.\n\n    Parameters\n    ----------\n    config: string\n        Configuration file to the XNAT instance.\n        See http://xgrg.github.io/first-steps-with-pyxnat/ for more details.\n\n    experiment_id : string\n        ID of the experiment from which to download the segmentation maps and\n        raw anatomical image.\n\n    resource_name: string\n        Name of the resource where the segmentation maps are stored in the XNAT\n        instance.\n\n    destination: string\n        Destination folder where to store the downloaded resources.\n\n    raw: boolean, optional\n        If True, a raw anatomical image will be downloaded along with the\n        target resources. If False, only the resources referred to by\n        `resource_name` will be downloaded. Default: True\n\n    cache: boolean, optional\n        If False, resources will be normally downloaded from XNAT. If True,\n        download will be skipped and data will be looked up locally.\n        Default: False\n\n    Notes\n    -----\n    Requires an XNAT instance where SPM segmentation maps will be found\n    following a certain data organization in experiment resources named\n    `resource_name`.\n\n    See Also\n    --------\n    xnat.plot_segment : To plot segmentation maps directly providing their\n        experiment_id on an XNAT instance\n    nisnap.plot_segment : To plot segmentation maps directly providing their\n        filepaths\n    \"\"\"\n\n```\n\n## How to install\n\n```\npip install nisnap\n```\n\n## Credits\n\nGreg Operto and Jordi Huguet ([BarcelonaBeta Brain Research Center](http://barcelonabeta.org))", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://gitlab.com/xgrg/nisnap/-/archive/v0.1/nisnap-v0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/xgrg/nisnap", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nisnap", "package_url": "https://pypi.org/project/nisnap/", "platform": "", "project_url": "https://pypi.org/project/nisnap/", "project_urls": {"Download": "https://gitlab.com/xgrg/nisnap/-/archive/v0.1/nisnap-v0.1.tar.gz", "Homepage": "https://gitlab.com/xgrg/nisnap"}, "release_url": "https://pypi.org/project/nisnap/0.3.3/", "requires_dist": null, "requires_python": "", "summary": "nisnap", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nisnap</h1>\n<p><a href=\"https://gitlab.com/xgrg/nisnap/commits/master\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ec003e442b1629abccf27ad416d518828482d95/68747470733a2f2f6769746c61622e636f6d2f786772672f6e69736e61702f6261646765732f6d61737465722f706970656c696e652e737667\"></a>\n<a href=\"https://gitlab.com/xgrg/nisnap/commits/master\" rel=\"nofollow\"><img alt=\"coverage report\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96c0c6da0b90ef41a4f86552d9840ac5bad63f53/68747470733a2f2f6769746c61622e636f6d2f786772672f6e69736e61702f6261646765732f6d61737465722f636f7665726167652e737667\"></a>\n<a href=\"https://pypi.org/project/nisnap/\" rel=\"nofollow\"><img alt=\"downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2b5024b81aa203d863af7a6261f525beae20c6e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6e69736e61702e737667\"></a>\n<a href=\"https://pypi.org/project/nisnap/\" rel=\"nofollow\"><img alt=\"python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1fac5f3fac923f21bcbb50ad490bb7630c8c280/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6e69736e61702e737667\"></a>\n<a href=\"https://pypi.org/project/nisnap/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d036ccdd2bb8a4b6955b5d8f6a49f29e0efaec31/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e69736e61702e737667\"></a></p>\n<p>Create snapshots of segmentation maps produced by neuroimaging software.\nInspired by tools like <a href=\"https://nilearn.github.io/\" rel=\"nofollow\">nilearn</a>,\n<a href=\"https://github.com/raamana/visualqc\" rel=\"nofollow\">visualqc</a>, <a href=\"https://fmriprep.readthedocs.io/en/stable/\" rel=\"nofollow\">fmriprep</a> and others.</p>\n<p><img alt=\"example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07b8f504b6023c85cccc717d48583b002f333514/68747470733a2f2f6769746c61622e636f6d2f786772672f6e69736e61702f7261772f6d61737465722f646f632f6e69736e61702e676966\"></p>\n<p><img alt=\"example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fe8143a1b0f613e4916c4e050070f73a3fbe658/68747470733a2f2f6769746c61622e636f6d2f786772672f6e69736e61702f7261772f6d61737465722f646f632f6e69736e6170322e676966\"></p>\n<h2>Usage</h2>\n<h4>From a Terminal:</h4>\n<pre>nisnap c1.nii.gz c2.nii.gz c3.nii.gz --bg /tmp/raw.nii.gz --opacity <span class=\"m\">50</span> -o /tmp/snapshot.gif\n\nnisnap labels.nii.gz --bg raw.nii.gz --opacity <span class=\"m\">50</span> --axes x --contours -o /tmp/snapshot.gif\n</pre>\n<pre>Arguments:\n\n  files                 segmentation map<span class=\"o\">(</span>s<span class=\"o\">)</span> to create snapshots from\n\noptional arguments:\n  --bg BG               background image on which segmentations will be plotted.\n  --axes AXES           choose the direction of the cuts <span class=\"o\">(</span>among <span class=\"s1\">'x'</span>, <span class=\"s1\">'y'</span>, or <span class=\"s1\">'z'</span><span class=\"o\">)</span>\n  --opacity OPACITY     opacity <span class=\"o\">(</span>in %<span class=\"o\">)</span> of the segmentation maps when plotted over a background image. Only used <span class=\"k\">if</span> a background image is provided.\n  --contours            <span class=\"k\">if</span> True, segmentations will be rendered as contoured regions. If False, will be rendered as superimposed masks.\n  -o OUTPUT, --output OUTPUT\n                        snapshot will be stored in this file. If extension is .gif, snapshot will be rendered as an animation.\n  --config CONFIG       <span class=\"o\">[</span>XNAT mode<span class=\"o\">]</span> XNAT configuration file\n  --nobg                <span class=\"o\">[</span>XNAT mode<span class=\"o\">]</span> no background image. Plots segmentation maps only.\n  -e EXPERIMENT, --experiment EXPERIMENT\n                        <span class=\"o\">[</span>XNAT mode<span class=\"o\">]</span> ID of the experiment to create snapshots from.\n  --resource RESOURCE   <span class=\"o\">[</span>XNAT mode<span class=\"o\">]</span> name of the resource to download\n  --cache               <span class=\"o\">[</span>XNAT mode<span class=\"o\">]</span> skip downloads <span class=\"o\">(</span>e.g. <span class=\"k\">if</span> running <span class=\"k\">for</span> a second <span class=\"nb\">time</span>\n  --disable_warnings\n  --verbose\n</pre>\n<h4>From IPython/Jupyter Notebook:</h4>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nisnap</span>\n<span class=\"n\">filepaths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'c1.nii.gz'</span><span class=\"p\">,</span> <span class=\"s1\">'c2.nii.gz'</span><span class=\"p\">,</span> <span class=\"s1\">'c3.nii.gz'</span><span class=\"p\">]</span>\n<span class=\"n\">bg</span> <span class=\"o\">=</span> <span class=\"s1\">'source.nii.gz'</span>\n<span class=\"n\">nisnap</span><span class=\"o\">.</span><span class=\"n\">plot_segment</span><span class=\"p\">(</span><span class=\"n\">filepaths</span><span class=\"p\">,</span> <span class=\"n\">bg</span><span class=\"o\">=</span><span class=\"n\">bg</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">animated</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h4>Reference:</h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">plot_segment</span><span class=\"p\">(</span><span class=\"n\">filepaths</span><span class=\"p\">,</span> <span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"s1\">'xyz'</span><span class=\"p\">,</span> <span class=\"n\">bg</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">slices</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">animated</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">savefig</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">contours</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">rowsize</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Plots a set of segmentation maps/masks.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    filepaths: a list of str</span>\n<span class=\"sd\">        Paths to segmentation maps (between 1 and 3). Must be of same dimensions</span>\n<span class=\"sd\">        and in same reference space.</span>\n\n<span class=\"sd\">    axes: string, or a tuple of strings</span>\n<span class=\"sd\">        Choose the direction of the cuts (among 'x', 'y', or 'z')</span>\n\n<span class=\"sd\">    bg: None or str</span>\n<span class=\"sd\">        Path to the background image that the masks will be plotted on top of.</span>\n<span class=\"sd\">        If nothing is specified, the segmentation maps/masks will be plotted only.</span>\n<span class=\"sd\">        The opacity (in %) of the segmentation maps when plotted over a background</span>\n<span class=\"sd\">        image. Only used if a background image is provided. Default: 10</span>\n\n<span class=\"sd\">    slices: None, or a tuple of floats</span>\n<span class=\"sd\">        The indexes of the slices that will be rendered. If None is given, the</span>\n<span class=\"sd\">        slices are selected automatically.</span>\n\n<span class=\"sd\">    animated: boolean, optional</span>\n<span class=\"sd\">        If True, the snapshot will be rendered as an animated GIF.</span>\n<span class=\"sd\">        If False, the snapshot will be rendered as a static PNG image. Default:</span>\n<span class=\"sd\">        False</span>\n\n<span class=\"sd\">    savefig: string, optional</span>\n<span class=\"sd\">        Filepath where the resulting snapshot will be created. If None is given,</span>\n<span class=\"sd\">        a temporary file will be created and/or the result will be displayed</span>\n<span class=\"sd\">        inline in a Jupyter Notebook.</span>\n\n<span class=\"sd\">    contours: boolean, optional</span>\n<span class=\"sd\">        If True, segmentations will be rendered as contoured regions. If False,</span>\n<span class=\"sd\">        will be rendered as superimposed masks. Default: False</span>\n\n<span class=\"sd\">    rowsize: None, or int, or dict</span>\n<span class=\"sd\">        Set the number of slices per row in the final compiled figure.</span>\n<span class=\"sd\">        Default: {'x': 9, 'y': 9, 'z': 6}</span>\n\n<span class=\"sd\">    figsize: None, or a 2-uple of floats, or dict</span>\n<span class=\"sd\">        Sets the dimensions of one row of slices.</span>\n<span class=\"sd\">        Default: {'x': (37, 3), 'y': (40, 3), 'z': (18, 3)}</span>\n\n<span class=\"sd\">    width: int, optional</span>\n<span class=\"sd\">        Width (in px) of the final compiled figure. Default: 2000.</span>\n\n\n<span class=\"sd\">    See Also</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    xnat.plot_segment : To plot segmentation maps directly providing their</span>\n<span class=\"sd\">        experiment_id on an XNAT instance</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h3>Using XNAT</h3>\n<h4>From a Terminal:</h4>\n<pre>nisnap --config .xnat.cfg -e EXPERIMENT_ID --resource ASHS --axes A --opacity <span class=\"m\">50</span> -o /tmp/test.gif\n</pre>\n<h4>From IPython/Jupyter Notebook:</h4>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nisnap</span> <span class=\"kn\">import</span> <span class=\"n\">xnat</span>\n<span class=\"n\">xnat</span><span class=\"o\">.</span><span class=\"n\">plot_segment</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"s1\">'/home/grg/.xnat.cfg'</span><span class=\"p\">,</span> <span class=\"n\">experiment_id</span><span class=\"o\">=</span><span class=\"s1\">'BBRC_E000'</span><span class=\"p\">,</span>\n  <span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">slices</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">120</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n  <span class=\"n\">animated</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h4>Reference:</h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">plot_segment</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">experiment_id</span><span class=\"p\">,</span> <span class=\"n\">savefig</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">slices</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">resource_name</span><span class=\"o\">=</span><span class=\"s1\">'SPM12_SEGMENT_T2T1_COREG'</span><span class=\"p\">,</span>\n    <span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"s1\">'xyz'</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">animated</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">rowsize</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"n\">contours</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Download a given experiment/resource from an XNAT instance and create</span>\n<span class=\"sd\">    snapshots of this resource along a selected set of slices.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    config: string</span>\n<span class=\"sd\">        Configuration file to the XNAT instance.</span>\n\n<span class=\"sd\">    experiment_id : string</span>\n<span class=\"sd\">        ID of the experiment from which to download the segmentation maps and</span>\n<span class=\"sd\">        raw anatomical image.</span>\n\n<span class=\"sd\">    savefig: string, optional</span>\n<span class=\"sd\">        Filepath where the resulting snapshot will be created. If None is given,</span>\n<span class=\"sd\">        a temporary file will be created and/or the result will be displayed</span>\n<span class=\"sd\">        inline in a Jupyter Notebook.</span>\n\n<span class=\"sd\">    slices: None, or a tuple of floats</span>\n<span class=\"sd\">        The indexes of the slices that will be rendered. If None is given, the</span>\n<span class=\"sd\">        slices are selected automatically.</span>\n\n<span class=\"sd\">    resource_name: string, optional</span>\n<span class=\"sd\">        Name of the resource where the segmentation maps are stored in the XNAT</span>\n<span class=\"sd\">        instance. Default: SPM12_SEGMENT_T2T1_COREG</span>\n\n<span class=\"sd\">    axes: string, or a tuple of strings</span>\n<span class=\"sd\">        Choose the direction of the cuts (among 'x', 'y', 'z')</span>\n\n<span class=\"sd\">    raw: boolean, optional</span>\n<span class=\"sd\">        If True, the segmentation maps will be plotted over a background image</span>\n<span class=\"sd\">        (e.g. anatomical T1 or T2, as in xnat.download_resources). If False,</span>\n<span class=\"sd\">        the segmentation maps will be rendered only. Default: True</span>\n\n<span class=\"sd\">    opacity: integer, optional</span>\n<span class=\"sd\">        The opacity (in %) of the segmentation maps when plotted over a background</span>\n<span class=\"sd\">        image. Only used if a background image is provided. Default: 10</span>\n\n<span class=\"sd\">    animated: boolean, optional</span>\n<span class=\"sd\">        If True, the snapshot will be rendered as an animated GIF.</span>\n<span class=\"sd\">        If False, the snapshot will be rendered as a static PNG image. Default:</span>\n<span class=\"sd\">        False</span>\n\n<span class=\"sd\">    rowsize: None, or int, or dict</span>\n<span class=\"sd\">        Set the number of slices per row in the final compiled figure.</span>\n<span class=\"sd\">        Default: {'x': 9, 'y': 9, 'z': 6}</span>\n\n<span class=\"sd\">    figsize: None, or a 2-uple of floats, or dict</span>\n<span class=\"sd\">        Sets the dimensions of one row of slices.</span>\n<span class=\"sd\">        Default: {'x': (37, 3), 'y': (40, 3), 'z': (18, 3)}</span>\n\n<span class=\"sd\">    width: int, optional</span>\n<span class=\"sd\">        Width (in px) of the final compiled figure. Default: 2000.</span>\n\n<span class=\"sd\">    contours: boolean, optional</span>\n<span class=\"sd\">        If True, segmentations will be rendered as contoured regions. If False,</span>\n<span class=\"sd\">        will be rendered as superimposed masks. Default: False</span>\n\n<span class=\"sd\">    cache: boolean, optional</span>\n<span class=\"sd\">        If False, resources will be normally downloaded from XNAT. If True,</span>\n<span class=\"sd\">        download will be skipped and data will be looked up locally.</span>\n<span class=\"sd\">        Default: False</span>\n\n<span class=\"sd\">    Notes</span>\n<span class=\"sd\">    -----</span>\n<span class=\"sd\">    Requires an XNAT instance where SPM segmentation maps will be found</span>\n<span class=\"sd\">    following a certain data organization in experiment resources named</span>\n<span class=\"sd\">    `resource_name`.</span>\n\n<span class=\"sd\">    See Also</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    xnat.download_resources : To download resources (e.g. segmentation maps +</span>\n<span class=\"sd\">        raw images) from an XNAT instance (e.g. prior to snapshot creation)</span>\n<span class=\"sd\">    nisnap.plot_segment : To plot segmentation maps directly providing their</span>\n<span class=\"sd\">        filepaths</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<pre><span class=\"k\">def</span> <span class=\"nf\">download_resources</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">experiment_id</span><span class=\"p\">,</span> <span class=\"n\">resource_name</span><span class=\"p\">,</span>  <span class=\"n\">destination</span><span class=\"p\">,</span>\n    <span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Download a given experiment/resource from an XNAT instance in a local</span>\n<span class=\"sd\">    destination folder.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    config: string</span>\n<span class=\"sd\">        Configuration file to the XNAT instance.</span>\n<span class=\"sd\">        See http://xgrg.github.io/first-steps-with-pyxnat/ for more details.</span>\n\n<span class=\"sd\">    experiment_id : string</span>\n<span class=\"sd\">        ID of the experiment from which to download the segmentation maps and</span>\n<span class=\"sd\">        raw anatomical image.</span>\n\n<span class=\"sd\">    resource_name: string</span>\n<span class=\"sd\">        Name of the resource where the segmentation maps are stored in the XNAT</span>\n<span class=\"sd\">        instance.</span>\n\n<span class=\"sd\">    destination: string</span>\n<span class=\"sd\">        Destination folder where to store the downloaded resources.</span>\n\n<span class=\"sd\">    raw: boolean, optional</span>\n<span class=\"sd\">        If True, a raw anatomical image will be downloaded along with the</span>\n<span class=\"sd\">        target resources. If False, only the resources referred to by</span>\n<span class=\"sd\">        `resource_name` will be downloaded. Default: True</span>\n\n<span class=\"sd\">    cache: boolean, optional</span>\n<span class=\"sd\">        If False, resources will be normally downloaded from XNAT. If True,</span>\n<span class=\"sd\">        download will be skipped and data will be looked up locally.</span>\n<span class=\"sd\">        Default: False</span>\n\n<span class=\"sd\">    Notes</span>\n<span class=\"sd\">    -----</span>\n<span class=\"sd\">    Requires an XNAT instance where SPM segmentation maps will be found</span>\n<span class=\"sd\">    following a certain data organization in experiment resources named</span>\n<span class=\"sd\">    `resource_name`.</span>\n\n<span class=\"sd\">    See Also</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    xnat.plot_segment : To plot segmentation maps directly providing their</span>\n<span class=\"sd\">        experiment_id on an XNAT instance</span>\n<span class=\"sd\">    nisnap.plot_segment : To plot segmentation maps directly providing their</span>\n<span class=\"sd\">        filepaths</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h2>How to install</h2>\n<pre><code>pip install nisnap\n</code></pre>\n<h2>Credits</h2>\n<p>Greg Operto and Jordi Huguet (<a href=\"http://barcelonabeta.org\" rel=\"nofollow\">BarcelonaBeta Brain Research Center</a>)</p>\n\n          </div>"}, "last_serial": 6911636, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c24b32bacdee440ae95a4263a4b2bfb6", "sha256": "e6878a1f3f555c082f8739d4daadf3d144126f9b09ab3367c3c619d4add88765"}, "downloads": -1, "filename": "nisnap-0.1.tar.gz", "has_sig": false, "md5_digest": "c24b32bacdee440ae95a4263a4b2bfb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9219, "upload_time": "2020-03-13T13:54:04", "upload_time_iso_8601": "2020-03-13T13:54:04.756973Z", "url": "https://files.pythonhosted.org/packages/52/5e/80d6e0c6c8d55c969124770c81e5b3f2e908cea962d1c5927f4da484bf41/nisnap-0.1.tar.gz", "yanked": false}], "0.1.post0": [{"comment_text": "", "digests": {"md5": "17910c3066be438f544bafad510cdb3a", "sha256": "ef51d1ac15331ee99b2d9c39c0074ff5f55ff2e4e687d5e1554e2b706af78ad3"}, "downloads": -1, "filename": "nisnap-0.1.post0.tar.gz", "has_sig": false, "md5_digest": "17910c3066be438f544bafad510cdb3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9401, "upload_time": "2020-03-13T23:22:14", "upload_time_iso_8601": "2020-03-13T23:22:14.475202Z", "url": "https://files.pythonhosted.org/packages/05/b6/134599b5d60a19629c5beb3c26c4a1295987675549f87db133ef5c036bbf/nisnap-0.1.post0.tar.gz", "yanked": false}], "0.1b0": [{"comment_text": "", "digests": {"md5": "b0bb2e2efee9853c79b590353a24da0d", "sha256": "57eb1d0e401e54e9fe4b8655a023080bcc566047f8aab1a5cbd48f32abee026f"}, "downloads": -1, "filename": "nisnap-0.1b0.tar.gz", "has_sig": false, "md5_digest": "b0bb2e2efee9853c79b590353a24da0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6558, "upload_time": "2020-03-09T00:08:29", "upload_time_iso_8601": "2020-03-09T00:08:29.602299Z", "url": "https://files.pythonhosted.org/packages/22/a6/f3151c5f045d8aa576a25205d8511dc57d0c0e125c118f04230dd6efada6/nisnap-0.1b0.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d6622c270f993c642e88e17ac23fdf03", "sha256": "5acad898ed00411afd5923ec99ed2daaaaee0e18104a804b8d4f5b7562ae4ed1"}, "downloads": -1, "filename": "nisnap-0.2.tar.gz", "has_sig": false, "md5_digest": "d6622c270f993c642e88e17ac23fdf03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11860, "upload_time": "2020-03-19T20:50:57", "upload_time_iso_8601": "2020-03-19T20:50:57.468105Z", "url": "https://files.pythonhosted.org/packages/6e/28/3e348e288f19f530820bcb68f960cf6103184ee8d469f7fa4887ec3cbfc3/nisnap-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2a99b73277dc7fa26ce6841dbcda61c0", "sha256": "97ea992f2ea49a8f26d582a8631da34e4c61b118c4168933ce7c55c225f401b7"}, "downloads": -1, "filename": "nisnap-0.3.tar.gz", "has_sig": false, "md5_digest": "2a99b73277dc7fa26ce6841dbcda61c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12288, "upload_time": "2020-03-23T18:51:02", "upload_time_iso_8601": "2020-03-23T18:51:02.407002Z", "url": "https://files.pythonhosted.org/packages/cb/5b/74f8ec7ff345c009506e089a3a9a07c5d3d9a25ea142a31001bb21ef87bf/nisnap-0.3.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "9205ae0d7422cf546269e5d9025cbdc6", "sha256": "1043288521180da306a18ac1c5b9d149fd12abc12d2d5db6114529c268252c48"}, "downloads": -1, "filename": "nisnap-0.3.3.tar.gz", "has_sig": false, "md5_digest": "9205ae0d7422cf546269e5d9025cbdc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13260, "upload_time": "2020-03-30T09:15:58", "upload_time_iso_8601": "2020-03-30T09:15:58.649950Z", "url": "https://files.pythonhosted.org/packages/d7/14/aee66a2edddd340bc7707a679c886e41610afb5514d0484622bc9bbfc0c7/nisnap-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9205ae0d7422cf546269e5d9025cbdc6", "sha256": "1043288521180da306a18ac1c5b9d149fd12abc12d2d5db6114529c268252c48"}, "downloads": -1, "filename": "nisnap-0.3.3.tar.gz", "has_sig": false, "md5_digest": "9205ae0d7422cf546269e5d9025cbdc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13260, "upload_time": "2020-03-30T09:15:58", "upload_time_iso_8601": "2020-03-30T09:15:58.649950Z", "url": "https://files.pythonhosted.org/packages/d7/14/aee66a2edddd340bc7707a679c886e41610afb5514d0484622bc9bbfc0c7/nisnap-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:17 2020"}