{"info": {"author": "Thomas Maroulis", "author_email": "thomasmaroulis@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# OR-Shifty\n`OR-Shifty` is a CLI app to automate assignment of on-call shifts via constraint solving by use of the\n[OR-tools](https://github.com/google/or-tools) library.\n\nIt is designed to accept two JSON files as input:\n\n- a config file which describes the desired on-call rota, the people to assign, and any constraints\n- a history file which describes past shifts per person, to be used by certain constraints described below\n\nIt will then attempt to create a rota allocation given these inputs and print it either on terminal or as JSON to an\noutput file if provided.\n\nThe given constraints can be prioritised so if a solution cannot be found that satisfies all of them the tool will\ndrop the least important constraint and try again, repeatedly, until a solution is found or no more constraints can\nbe dropped. If any constraints had to be dropped the tool will also print to the terminal which of the original\nconstraints were violated, for which person, and on which day.\n\n## Installation\nYou will need Python 3.7 or greater.\n\n```bash\npip install or-shifty\n```\n\n## Use\nHelp:\n\n```bash\nshifty --help\n```\n\n### Solver mode\nFor using shifty in its default solver mode.\n\nAn output file path can optionally be provided in which case shifty will write the solution to the file in JSON\nformat. If a file already exists at that path then it will overwritten.\n\n```bash\nshifty \\\n    --config <path_to_config.json> \\\n    --history <path_to_history.json> \\\n    [--output <path_to_optional_output.json>]\n```\n\n### Evaluation mode\nShifty can also be run in evaluation mode.\n\nIn this mode an output with an existing solution must be provided. Shifty will then evaluate this solution against\nthe constraints, objective function, and history provided and it will print which (if any) constraints are violated\nby the solution and the score of the objective function. This is intended as a diagnostic tool to inspect shifty's\ndecisions.\n\nWhen in this mode the output file must contain exactly an assigned shift for every shift specified in config otherwise\nshifty will exit with an error.\n\n```bash\nshifty \\\n    --config <path_to_config.json> \\\n    --history <path_to_history.json> \\\n    --output <path_to_optional_output.json> \\\n    --evaluate\n```\n\n### Shift types\nAny shift can be assigned one of three types. These types have no intrinsic meaning and only exist so different \nconstraints can be applied to different shifts, e.g. it might be desired to have more unassigned days after having a\nSaturday shift or similar.\n\nThe currently supported shift types are:\n\n- STANDARD\n- SPECIAL_A\n- SPECIAL_B\n\n### Constraints\nSolver constraints fall into one of two categories:\n\n- Mandatory, that are always included\n- User selected, that can be included and configured using the config input file\n\nFor each user selected constraint there will be an example of the JSON configuration needed to include it.\n\nUser selected constraints can also be given a priority. If a solution can not be found the constraints with the highest\npriority number will be dropped and the solver will retry, then the constraints with the second highest priority\nnumber will be dropped and so on. Priority must be a positive integer. A priority of 0 means the constraint cannot ever\nbe dropped. If multiple constraints have the same priority and that priority is due to be dropped then all these\nconstraints will be dropped together.\n\nConstraints can also be named to make them easier to manager by providing `\"name\": \"constraint name\"` in the JSON\nconfig.\n\nIt is valid to include the same type of constraint multiple times in the config, e.g. by having a stricter constraint\nwith a higher priority number, followed by a more permissive one with a lower priority number. This way the solver\nwill try to meet the strict one first, but if it cannot it will then at least try to meet the more permissive one.\n\nThe mandatory constraints are mostly common sense and can be seen in the code, e.g. you can't assign Eve's first shift\ntwice, etc.\n\nThe user selected constraints are as follows:\n\n#### Each person works at most X shifts per assignment period\n```json\n\"constraints\": [\n    {\n      \"type\": \"EachPersonWorksAtMostXShiftsPerAssignmentPeriod\",\n      \"priority\": 0,\n      \"params\": {\"x\":  1}\n    }\n]\n```\n\nAn assignment period is one run of the program with given input files. This constraints that a person can only be\nassigned X of these shifts.\n\n#### There should be at least X days between ops\n```json\n\"constraints\": [\n    {\n      \"type\": \"ThereShouldBeAtLeastXDaysBetweenOps\",\n      \"priority\": 0,\n      \"params\": {\"x\":  4}\n    }\n]\n```\n\nSubtract the last date on ops from the date assigned on a shift. The resulting number of days must be greater that X.\n\n#### There should be at least X days between ops of shift types\n```json\n\"constraints\": [\n    {\n      \"type\": \"ThereShouldBeAtLeastXDaysBetweenOpsOfShiftTypes\",\n      \"priority\": 0,\n      \"params\": {\"x\":  8, \"shift_types\": [\"SPECIAL_A\", \"SPECIAL_B\"]}\n    }\n]\n```\nSubtract the last date on ops of any the given types from the date assigned on a shift of one of the given types. The\nresulting number of days must be grater than X. In the example configuration someone cannot be assigned to a\nSPECIAL_A or SPECIAL_B type shift if they have had a SPECIAL_A or SPECIAL_B shift in the last 8 days.\n\n#### Respect person restrictions per shift type\n```json\n\"constraints\": [\n    {\n      \"type\": \"RespectPersonRestrictionsPerShiftType\",\n      \"priority\": 0,\n      \"params\": {\"forbidden_by_shift_type\": {\"special_a\": [\"Alice\"]}}\n    }\n]\n```\n\nDisallow particular people from being assigned any shifts of a given type.\n\n#### Respect person restrictions per day\n```json\n\"constraints\": [\n    {\n      \"type\": \"RespectPersonRestrictionsPerDay\",\n      \"name\": \"Holidays\",\n      \"priority\": 0,\n      \"params\": {\"restrictions\": {\"Alice\": [\"2019-11-01\"]}}\n    }\n]\n```\n\nDisallow particular people from being assigned any shifts on a given date.\n\n### Objective function\nWhen scheduling the solver will choose between possible solutions that satisfy the constraints by using an objective \nfunction. Each possible solution will be assigned a score using this function and the solution with the highest score\nwill be chosen.\n\nThere is currently support for only one type of objective function called `RankingWeight`.\n\n#### RankingWeight\nThis objective function will rank people for each shift type based on the following criteria:\n\n1. How many shifts of the given type have they done before\n1. How recently have they been on shift\n1. Their name (just to ensure there is a total ordering)\n\nIn addition it will also rank someone being assigned a second shift below everyone else being assigned their first shift\nand so on for possible additional shifts on the same person.\n\ne.g. we have Bob, Alice, and Eve. Bob has done 10 shifts, Alice and Eve have done 8 each. Alice was last on call 2 days\nago and Even was 4 days ago. Everyone can be assigned a maximum of two shifts. The ranking would be:\n\n1. Eve, 1st shift\n1. Alice, 1st shift\n1. Bob, 1st shift\n1. Eve, 2nd shift\n1. Alice, 2nd shift\n1. Bob, 2nd shift\n\nEve is given the highest priority because she is tied for least number of shifts done, but has not been on call as\nrecently. Second shifts are ranked the same way, but after all first shifts.\n\nEach level of this rank is then assigned a weight that is higher the further up in the ranking. \n\nThere is a large gap in the weights when switching from the first shift to the second and so on in order to discourage\nassigning multiple shifts before exhausting other possibilities.\n\nThis process is repeated for each shift type. The resulting weights are then added together to produce the final score.\nThis final score is then given as a reward to the solver for assigning the corresponding person/shift.\n\n### Config\nExamples can be found under `examples`.\n\nThe config file describes the desired on-call rota, the people to assign, and any constraints. The meaning of its\nsections are as follows:\n\n- `shifts`: contains one entry for each shift to assign, along with its name, and type\n- `people`: the people to assign\n- `max_shifts_per_person`: a hard limit on how many shifts a single person can be assigned\n- `objective`: the chosen objective function\n- `constraints`: the chosen constraints\n\n### History\nExamples can be found under `examples`.\n\nThe history file describes past shifts per person, to be used by certain constraints. The meaning of its sections\nare as follows:\n\n- `shifts`: one entry per past shift a person has done, including its type\n- `offset`: offsets to be added to number of shifts done per type for each person\n\n## Development\nOR-Shifty is Python3 application developed using [Poetry](https://github.com/python-poetry/poetry). The minimum required\nPython version, project dependencies, and other project information can be found in the `pyproject.toml` file.\n\nFor ease of development there is a `Makefile`.\n\n```bash\nmake help     # Get a list of all supported make targets\nmake freeze   # Update and freeze python requirements\nmake test     # Run tests\nmake format   # Run formatters and linters\nmake verify   # Run formatters and linters in check only mode\nmake install  # Install project dependencies from poetry.lock, project module, and `shifty` script\nmake build    # Build source and wheels\n```\n\nBefore submitting any pull requests `make test` and `make verify` must both be run an be passing.\n\n## License\nSee the LICENSE file that is included with this repository.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Dalamar42/or-shifty", "keywords": "rota,scheduling,on-call", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "or-shifty", "package_url": "https://pypi.org/project/or-shifty/", "platform": "", "project_url": "https://pypi.org/project/or-shifty/", "project_urls": {"Homepage": "https://github.com/Dalamar42/or-shifty", "Repository": "https://github.com/Dalamar42/or-shifty"}, "release_url": "https://pypi.org/project/or-shifty/1.1.0/", "requires_dist": ["ortools (>=7.2,<8.0)"], "requires_python": ">=3.7,<4.0", "summary": "", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OR-Shifty</h1>\n<p><code>OR-Shifty</code> is a CLI app to automate assignment of on-call shifts via constraint solving by use of the\n<a href=\"https://github.com/google/or-tools\" rel=\"nofollow\">OR-tools</a> library.</p>\n<p>It is designed to accept two JSON files as input:</p>\n<ul>\n<li>a config file which describes the desired on-call rota, the people to assign, and any constraints</li>\n<li>a history file which describes past shifts per person, to be used by certain constraints described below</li>\n</ul>\n<p>It will then attempt to create a rota allocation given these inputs and print it either on terminal or as JSON to an\noutput file if provided.</p>\n<p>The given constraints can be prioritised so if a solution cannot be found that satisfies all of them the tool will\ndrop the least important constraint and try again, repeatedly, until a solution is found or no more constraints can\nbe dropped. If any constraints had to be dropped the tool will also print to the terminal which of the original\nconstraints were violated, for which person, and on which day.</p>\n<h2>Installation</h2>\n<p>You will need Python 3.7 or greater.</p>\n<pre>pip install or-shifty\n</pre>\n<h2>Use</h2>\n<p>Help:</p>\n<pre>shifty --help\n</pre>\n<h3>Solver mode</h3>\n<p>For using shifty in its default solver mode.</p>\n<p>An output file path can optionally be provided in which case shifty will write the solution to the file in JSON\nformat. If a file already exists at that path then it will overwritten.</p>\n<pre>shifty <span class=\"se\">\\</span>\n    --config &lt;path_to_config.json&gt; <span class=\"se\">\\</span>\n    --history &lt;path_to_history.json&gt; <span class=\"se\">\\</span>\n    <span class=\"o\">[</span>--output &lt;path_to_optional_output.json&gt;<span class=\"o\">]</span>\n</pre>\n<h3>Evaluation mode</h3>\n<p>Shifty can also be run in evaluation mode.</p>\n<p>In this mode an output with an existing solution must be provided. Shifty will then evaluate this solution against\nthe constraints, objective function, and history provided and it will print which (if any) constraints are violated\nby the solution and the score of the objective function. This is intended as a diagnostic tool to inspect shifty's\ndecisions.</p>\n<p>When in this mode the output file must contain exactly an assigned shift for every shift specified in config otherwise\nshifty will exit with an error.</p>\n<pre>shifty <span class=\"se\">\\</span>\n    --config &lt;path_to_config.json&gt; <span class=\"se\">\\</span>\n    --history &lt;path_to_history.json&gt; <span class=\"se\">\\</span>\n    --output &lt;path_to_optional_output.json&gt; <span class=\"se\">\\</span>\n    --evaluate\n</pre>\n<h3>Shift types</h3>\n<p>Any shift can be assigned one of three types. These types have no intrinsic meaning and only exist so different\nconstraints can be applied to different shifts, e.g. it might be desired to have more unassigned days after having a\nSaturday shift or similar.</p>\n<p>The currently supported shift types are:</p>\n<ul>\n<li>STANDARD</li>\n<li>SPECIAL_A</li>\n<li>SPECIAL_B</li>\n</ul>\n<h3>Constraints</h3>\n<p>Solver constraints fall into one of two categories:</p>\n<ul>\n<li>Mandatory, that are always included</li>\n<li>User selected, that can be included and configured using the config input file</li>\n</ul>\n<p>For each user selected constraint there will be an example of the JSON configuration needed to include it.</p>\n<p>User selected constraints can also be given a priority. If a solution can not be found the constraints with the highest\npriority number will be dropped and the solver will retry, then the constraints with the second highest priority\nnumber will be dropped and so on. Priority must be a positive integer. A priority of 0 means the constraint cannot ever\nbe dropped. If multiple constraints have the same priority and that priority is due to be dropped then all these\nconstraints will be dropped together.</p>\n<p>Constraints can also be named to make them easier to manager by providing <code>\"name\": \"constraint name\"</code> in the JSON\nconfig.</p>\n<p>It is valid to include the same type of constraint multiple times in the config, e.g. by having a stricter constraint\nwith a higher priority number, followed by a more permissive one with a lower priority number. This way the solver\nwill try to meet the strict one first, but if it cannot it will then at least try to meet the more permissive one.</p>\n<p>The mandatory constraints are mostly common sense and can be seen in the code, e.g. you can't assign Eve's first shift\ntwice, etc.</p>\n<p>The user selected constraints are as follows:</p>\n<h4>Each person works at most X shifts per assignment period</h4>\n<pre><span class=\"s2\">\"constraints\"</span><span class=\"err\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"EachPersonWorksAtMostXShiftsPerAssignmentPeriod\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"params\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"x\"</span><span class=\"p\">:</span>  <span class=\"mi\">1</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>An assignment period is one run of the program with given input files. This constraints that a person can only be\nassigned X of these shifts.</p>\n<h4>There should be at least X days between ops</h4>\n<pre><span class=\"s2\">\"constraints\"</span><span class=\"err\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ThereShouldBeAtLeastXDaysBetweenOps\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"params\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"x\"</span><span class=\"p\">:</span>  <span class=\"mi\">4</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Subtract the last date on ops from the date assigned on a shift. The resulting number of days must be greater that X.</p>\n<h4>There should be at least X days between ops of shift types</h4>\n<pre><span class=\"s2\">\"constraints\"</span><span class=\"err\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ThereShouldBeAtLeastXDaysBetweenOpsOfShiftTypes\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"params\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"x\"</span><span class=\"p\">:</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"nt\">\"shift_types\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"SPECIAL_A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"SPECIAL_B\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Subtract the last date on ops of any the given types from the date assigned on a shift of one of the given types. The\nresulting number of days must be grater than X. In the example configuration someone cannot be assigned to a\nSPECIAL_A or SPECIAL_B type shift if they have had a SPECIAL_A or SPECIAL_B shift in the last 8 days.</p>\n<h4>Respect person restrictions per shift type</h4>\n<pre><span class=\"s2\">\"constraints\"</span><span class=\"err\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"RespectPersonRestrictionsPerShiftType\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"params\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"forbidden_by_shift_type\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"special_a\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Alice\"</span><span class=\"p\">]}}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Disallow particular people from being assigned any shifts of a given type.</p>\n<h4>Respect person restrictions per day</h4>\n<pre><span class=\"s2\">\"constraints\"</span><span class=\"err\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"RespectPersonRestrictionsPerDay\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Holidays\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"params\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"restrictions\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"Alice\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"2019-11-01\"</span><span class=\"p\">]}}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Disallow particular people from being assigned any shifts on a given date.</p>\n<h3>Objective function</h3>\n<p>When scheduling the solver will choose between possible solutions that satisfy the constraints by using an objective\nfunction. Each possible solution will be assigned a score using this function and the solution with the highest score\nwill be chosen.</p>\n<p>There is currently support for only one type of objective function called <code>RankingWeight</code>.</p>\n<h4>RankingWeight</h4>\n<p>This objective function will rank people for each shift type based on the following criteria:</p>\n<ol>\n<li>How many shifts of the given type have they done before</li>\n<li>How recently have they been on shift</li>\n<li>Their name (just to ensure there is a total ordering)</li>\n</ol>\n<p>In addition it will also rank someone being assigned a second shift below everyone else being assigned their first shift\nand so on for possible additional shifts on the same person.</p>\n<p>e.g. we have Bob, Alice, and Eve. Bob has done 10 shifts, Alice and Eve have done 8 each. Alice was last on call 2 days\nago and Even was 4 days ago. Everyone can be assigned a maximum of two shifts. The ranking would be:</p>\n<ol>\n<li>Eve, 1st shift</li>\n<li>Alice, 1st shift</li>\n<li>Bob, 1st shift</li>\n<li>Eve, 2nd shift</li>\n<li>Alice, 2nd shift</li>\n<li>Bob, 2nd shift</li>\n</ol>\n<p>Eve is given the highest priority because she is tied for least number of shifts done, but has not been on call as\nrecently. Second shifts are ranked the same way, but after all first shifts.</p>\n<p>Each level of this rank is then assigned a weight that is higher the further up in the ranking.</p>\n<p>There is a large gap in the weights when switching from the first shift to the second and so on in order to discourage\nassigning multiple shifts before exhausting other possibilities.</p>\n<p>This process is repeated for each shift type. The resulting weights are then added together to produce the final score.\nThis final score is then given as a reward to the solver for assigning the corresponding person/shift.</p>\n<h3>Config</h3>\n<p>Examples can be found under <code>examples</code>.</p>\n<p>The config file describes the desired on-call rota, the people to assign, and any constraints. The meaning of its\nsections are as follows:</p>\n<ul>\n<li><code>shifts</code>: contains one entry for each shift to assign, along with its name, and type</li>\n<li><code>people</code>: the people to assign</li>\n<li><code>max_shifts_per_person</code>: a hard limit on how many shifts a single person can be assigned</li>\n<li><code>objective</code>: the chosen objective function</li>\n<li><code>constraints</code>: the chosen constraints</li>\n</ul>\n<h3>History</h3>\n<p>Examples can be found under <code>examples</code>.</p>\n<p>The history file describes past shifts per person, to be used by certain constraints. The meaning of its sections\nare as follows:</p>\n<ul>\n<li><code>shifts</code>: one entry per past shift a person has done, including its type</li>\n<li><code>offset</code>: offsets to be added to number of shifts done per type for each person</li>\n</ul>\n<h2>Development</h2>\n<p>OR-Shifty is Python3 application developed using <a href=\"https://github.com/python-poetry/poetry\" rel=\"nofollow\">Poetry</a>. The minimum required\nPython version, project dependencies, and other project information can be found in the <code>pyproject.toml</code> file.</p>\n<p>For ease of development there is a <code>Makefile</code>.</p>\n<pre>make <span class=\"nb\">help</span>     <span class=\"c1\"># Get a list of all supported make targets</span>\nmake freeze   <span class=\"c1\"># Update and freeze python requirements</span>\nmake <span class=\"nb\">test</span>     <span class=\"c1\"># Run tests</span>\nmake format   <span class=\"c1\"># Run formatters and linters</span>\nmake verify   <span class=\"c1\"># Run formatters and linters in check only mode</span>\nmake install  <span class=\"c1\"># Install project dependencies from poetry.lock, project module, and `shifty` script</span>\nmake build    <span class=\"c1\"># Build source and wheels</span>\n</pre>\n<p>Before submitting any pull requests <code>make test</code> and <code>make verify</code> must both be run an be passing.</p>\n<h2>License</h2>\n<p>See the LICENSE file that is included with this repository.</p>\n\n          </div>"}, "last_serial": 6518887, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "be8ec47a7548e13f69bee11721a169fc", "sha256": "6a5c300ab852ff766114902595e6f1e1cf06d3c773658fdf4f75b6b16761078f"}, "downloads": -1, "filename": "or_shifty-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "be8ec47a7548e13f69bee11721a169fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 16886, "upload_time": "2020-01-10T22:12:30", "upload_time_iso_8601": "2020-01-10T22:12:30.446493Z", "url": "https://files.pythonhosted.org/packages/b4/75/1850c232b3d1e099afc4cc65c2dbc4c5e5f1d9cd31221f1ce02371682a73/or_shifty-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d679c2e8bbe6054164890399bf85cff", "sha256": "cf3a91f88173af2f1bdad329eef2cccfc9b6056048482b2eb62ecfa096d20c81"}, "downloads": -1, "filename": "or-shifty-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7d679c2e8bbe6054164890399bf85cff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 16651, "upload_time": "2020-01-10T22:12:27", "upload_time_iso_8601": "2020-01-10T22:12:27.559130Z", "url": "https://files.pythonhosted.org/packages/7f/b8/7566b607175d12efd65d7ec3bc11c072a1f4e78db82687888e685acff22a/or-shifty-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e4a7c2aaf9bcc2e1e042a8375c13eb64", "sha256": "ed53cddf32658dd620e1b825a1e3170bee8759d1aedf2da40a973ad27cf22b8e"}, "downloads": -1, "filename": "or_shifty-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e4a7c2aaf9bcc2e1e042a8375c13eb64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 18452, "upload_time": "2020-01-25T15:03:36", "upload_time_iso_8601": "2020-01-25T15:03:36.494856Z", "url": "https://files.pythonhosted.org/packages/19/c8/373e5b078bed7af5f075fed38d8811c84bc76f2af5dc13c9477ec5bcf1aa/or_shifty-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "930d624082f6f819b499f68aff90c9cf", "sha256": "f443d89e9666a2ec6fad811c6a57b90b8a1158012f3d7601802d3c8c5d4434bc"}, "downloads": -1, "filename": "or-shifty-1.1.0.tar.gz", "has_sig": false, "md5_digest": "930d624082f6f819b499f68aff90c9cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18546, "upload_time": "2020-01-25T15:03:34", "upload_time_iso_8601": "2020-01-25T15:03:34.676496Z", "url": "https://files.pythonhosted.org/packages/74/b1/3f9d0b2b97d74d0b81ff6abc3af1e2e05e20ffc5b4629c587a44940fa0c5/or-shifty-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e4a7c2aaf9bcc2e1e042a8375c13eb64", "sha256": "ed53cddf32658dd620e1b825a1e3170bee8759d1aedf2da40a973ad27cf22b8e"}, "downloads": -1, "filename": "or_shifty-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e4a7c2aaf9bcc2e1e042a8375c13eb64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 18452, "upload_time": "2020-01-25T15:03:36", "upload_time_iso_8601": "2020-01-25T15:03:36.494856Z", "url": "https://files.pythonhosted.org/packages/19/c8/373e5b078bed7af5f075fed38d8811c84bc76f2af5dc13c9477ec5bcf1aa/or_shifty-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "930d624082f6f819b499f68aff90c9cf", "sha256": "f443d89e9666a2ec6fad811c6a57b90b8a1158012f3d7601802d3c8c5d4434bc"}, "downloads": -1, "filename": "or-shifty-1.1.0.tar.gz", "has_sig": false, "md5_digest": "930d624082f6f819b499f68aff90c9cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18546, "upload_time": "2020-01-25T15:03:34", "upload_time_iso_8601": "2020-01-25T15:03:34.676496Z", "url": "https://files.pythonhosted.org/packages/74/b1/3f9d0b2b97d74d0b81ff6abc3af1e2e05e20ffc5b4629c587a44940fa0c5/or-shifty-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:31 2020"}