{"info": {"author": "Jonathan Schemoul", "author_email": "jonathan.schemoul@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\r\n============\r\n\r\nPyjon.Versionning is a little helper to use mercurial to version objects in your application.\r\n\r\nThose objects can be stored in a database for example, allowing changes from the filesystem to be synchronised in the database and the other way around (while maintaining an history).\r\n\r\nVersionning managers are classes that get a repository folder and initialize it if not existing yet.\r\n\r\nThe base managers available are :\r\n\r\n- `pyjon.versionning.Repository`: the base repository.\r\n- `pyjon.versionning.SARepository`: the base repository to version sqlalchemy objects.\r\n\r\nBasically, the default classes assume you have a payload or payload_xml field in your objects, and this field will get written to file.\r\n\r\nIf you want to have other field (or version your whole object serializing it as json for example), you have to create your own repository class basen on the base one.\r\n\r\nExample using a simple json serializer ::\r\n    \r\n    import simplejson\r\n    from myapp import get_vehicles, get_people, get_adresses\r\n    from pyjon.versionning import Repository\r\n    \r\n    # for an sqlalchemy repository :\r\n    # class MyRepository(SARepository):\r\n    # for a normal one (or manual fetching) :\r\n    class MyRepository(Repository):\r\n         def get_file_content(self, item):\r\n            # we will assume your objects have an \"serializable_fields\" attribute\r\n            # this is to support multiple object types (each object type will be stored in a separate folder)\r\n\r\n            output_dict = dict()\r\n            for field in item.serializable_fields:\r\n                output_dict[field] = getattr(item, field)\r\n                \r\n            return simplejson.dumps(output_dict)\r\n\r\n        \r\n\r\n        def update_content(self, item, value):\r\n\r\n            input_dict = simplejson.loads(value)\r\n            for field in item.serializable_fields:\r\n                setattr(item, field, input_dict[field])\r\n                \r\n            return simplejson.dumps(my_output_dict)\r\n           \r\n        # this is used to init the repository with all existing data\r\n        # not necessary with SARepository as it will do it himself with the given classes and dbsession\r\n        def get_all_objects(self):\r\n            for item in get_vehicle():\r\n                yield item\r\n                \r\n            for item in get_people():\r\n                yield item\r\n                \r\n            for item in get_adresses():\r\n                yield item\r\n                \r\nTo call it, here is how ::\r\n    \r\n    # it's thread safe, so you can define it as a global var (imported like \"from my_app.versionning import repository\")\r\n    repository = MyRepository('./repository',\r\n                              default_user=\"our_great_app <system@ourgreatapp.com>\")\r\n    \r\n    # if you have an SARepository, here is how to call it:\r\n    from my_app.model import session, vehicles, people, adresses\r\n    repository = MyRepository('./repository', session,\r\n                              [vehicles, people, adresses],\r\n                              default_user=\"our_great_app <system@ourgreatapp.com>\")\r\n    \r\n    # now, before using an item in your app (to check changes in the repo), just do that:\r\n    repository.check_item(item)\r\n    \r\n    # after saving or creating an item:\r\n    repository.store_item(item) # you can define user= to specify the user who did that\r\n    \r\n    # after deleting an item:\r\n    repository.delete_item(item) # you can define user= to specify the user who did that", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "versionning mercurial sqlalchemy web", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyjon.versionning", "package_url": "https://pypi.org/project/pyjon.versionning/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyjon.versionning/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/pyjon.versionning/0.4.2/", "requires_dist": null, "requires_python": null, "summary": "Versionning system taking Python objects (likely from an ORM like SQL Alchemy) and saving those objects in a repository with synchronisation facility.", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pyjon.Versionning is a little helper to use mercurial to version objects in your application.</p>\n<p>Those objects can be stored in a database for example, allowing changes from the filesystem to be synchronised in the database and the other way around (while maintaining an history).</p>\n<p>Versionning managers are classes that get a repository folder and initialize it if not existing yet.</p>\n<p>The base managers available are :</p>\n<ul>\n<li><cite>pyjon.versionning.Repository</cite>: the base repository.</li>\n<li><cite>pyjon.versionning.SARepository</cite>: the base repository to version sqlalchemy objects.</li>\n</ul>\n<p>Basically, the default classes assume you have a payload or payload_xml field in your objects, and this field will get written to file.</p>\n<p>If you want to have other field (or version your whole object serializing it as json for example), you have to create your own repository class basen on the base one.</p>\n<p>Example using a simple json serializer</p>\n<pre>import simplejson\nfrom myapp import get_vehicles, get_people, get_adresses\nfrom pyjon.versionning import Repository\n\n# for an sqlalchemy repository :\n# class MyRepository(SARepository):\n# for a normal one (or manual fetching) :\nclass MyRepository(Repository):\n     def get_file_content(self, item):\n        # we will assume your objects have an \"serializable_fields\" attribute\n        # this is to support multiple object types (each object type will be stored in a separate folder)\n\n        output_dict = dict()\n        for field in item.serializable_fields:\n            output_dict[field] = getattr(item, field)\n\n        return simplejson.dumps(output_dict)\n\n\n\n    def update_content(self, item, value):\n\n        input_dict = simplejson.loads(value)\n        for field in item.serializable_fields:\n            setattr(item, field, input_dict[field])\n\n        return simplejson.dumps(my_output_dict)\n\n    # this is used to init the repository with all existing data\n    # not necessary with SARepository as it will do it himself with the given classes and dbsession\n    def get_all_objects(self):\n        for item in get_vehicle():\n            yield item\n\n        for item in get_people():\n            yield item\n\n        for item in get_adresses():\n            yield item\n</pre>\n<p>To call it, here is how</p>\n<pre># it's thread safe, so you can define it as a global var (imported like \"from my_app.versionning import repository\")\nrepository = MyRepository('./repository',\n                          default_user=\"our_great_app &lt;system@ourgreatapp.com&gt;\")\n\n# if you have an SARepository, here is how to call it:\nfrom my_app.model import session, vehicles, people, adresses\nrepository = MyRepository('./repository', session,\n                          [vehicles, people, adresses],\n                          default_user=\"our_great_app &lt;system@ourgreatapp.com&gt;\")\n\n# now, before using an item in your app (to check changes in the repo), just do that:\nrepository.check_item(item)\n\n# after saving or creating an item:\nrepository.store_item(item) # you can define user= to specify the user who did that\n\n# after deleting an item:\nrepository.delete_item(item) # you can define user= to specify the user who did that\n</pre>\n\n          </div>"}, "last_serial": 797316, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "d78bf439c5e530b6f899cde6ed779a02", "sha256": "f9740e931bb835786ed85580629c924831a85eef1f610302fedfe2c165e68e37"}, "downloads": -1, "filename": "pyjon.versionning-0.3-py2.6.egg", "has_sig": false, "md5_digest": "d78bf439c5e530b6f899cde6ed779a02", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 8800, "upload_time": "2009-12-03T21:23:36", "upload_time_iso_8601": "2009-12-03T21:23:36.785436Z", "url": "https://files.pythonhosted.org/packages/b0/fb/ce8aa622da095b023242c4411b911f759af5c7afcc7b5c21702948a030fd/pyjon.versionning-0.3-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9455a8877c6dc04e76bae6b1dd2f773", "sha256": "fd5341e471ff91931d2f3a98ee1ffadc4643fca30d1cb64b0f9c78d8129b1241"}, "downloads": -1, "filename": "pyjon.versionning-0.3.tar.gz", "has_sig": false, "md5_digest": "c9455a8877c6dc04e76bae6b1dd2f773", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3160, "upload_time": "2009-12-03T21:23:36", "upload_time_iso_8601": "2009-12-03T21:23:36.517577Z", "url": "https://files.pythonhosted.org/packages/90/3d/7a3b9151e3f0cbba3ca40dfd5d9b6b83c09b96b6ff078dd63981b22d79bf/pyjon.versionning-0.3.tar.gz", "yanked": false}], "0.3dev": [{"comment_text": "", "digests": {"md5": "f4bc39efa3bb740a9245548b0075236c", "sha256": "567b6ffb96afcffb4c20e34a5a3e39a359331702c248024dfcc284ecc8554fae"}, "downloads": -1, "filename": "pyjon.versionning-0.3dev-py2.6.egg", "has_sig": false, "md5_digest": "f4bc39efa3bb740a9245548b0075236c", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 8802, "upload_time": "2009-12-03T21:22:46", "upload_time_iso_8601": "2009-12-03T21:22:46.800558Z", "url": "https://files.pythonhosted.org/packages/7a/4f/41258cf0e0e958ec578b60f958c40f9526768b4d3b7cf12612163ad854ac/pyjon.versionning-0.3dev-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5c16cd6ef3ca2b5e35690d758f5c099", "sha256": "1b286b6e0391445c4f9754e03b8bd14973cddc7c2d8c3514c31f1b381e002e3c"}, "downloads": -1, "filename": "pyjon.versionning-0.3dev.tar.gz", "has_sig": false, "md5_digest": "f5c16cd6ef3ca2b5e35690d758f5c099", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3167, "upload_time": "2009-12-03T21:22:46", "upload_time_iso_8601": "2009-12-03T21:22:46.528212Z", "url": "https://files.pythonhosted.org/packages/54/fe/585905bec4fc0487dba2c739e23ed02b1835959f18ce39d6c60f6fcef043/pyjon.versionning-0.3dev.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "4fc628fd35c2c2056c7b51f084829818", "sha256": "353f05c55efd10e44eed4b072b4ee6ee8a5e57a527f1ff46651c73afbe94d0f9"}, "downloads": -1, "filename": "pyjon.versionning-0.4-py2.6.egg", "has_sig": false, "md5_digest": "4fc628fd35c2c2056c7b51f084829818", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 8953, "upload_time": "2010-07-12T14:08:12", "upload_time_iso_8601": "2010-07-12T14:08:12.025798Z", "url": "https://files.pythonhosted.org/packages/ef/f0/212a3f36258bf97d480ce6d04c143dbcdb2e72cce416d30fbb079e18c406/pyjon.versionning-0.4-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca62bc812e35eef0d755cdf8c836cfa8", "sha256": "03159e007b69d21c301d8c90868c1d7e59beb04b6365788cb659a0c8c7ac8f82"}, "downloads": -1, "filename": "pyjon.versionning-0.4.tar.gz", "has_sig": false, "md5_digest": "ca62bc812e35eef0d755cdf8c836cfa8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3235, "upload_time": "2010-07-12T14:19:38", "upload_time_iso_8601": "2010-07-12T14:19:38.008845Z", "url": "https://files.pythonhosted.org/packages/f0/b5/c52b0c8d4065374e1d3a49c2a7215046a1b5a9acc284fc68086262afd6b8/pyjon.versionning-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "c080ef98e737d5139882cf7acb52a813", "sha256": "16d23be945c5fd6320ff6743923c878f0ee880bdc6824f86ab32a632bd038076"}, "downloads": -1, "filename": "pyjon.versionning-0.4.1-py2.6.egg", "has_sig": false, "md5_digest": "c080ef98e737d5139882cf7acb52a813", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 8897, "upload_time": "2010-07-12T16:34:28", "upload_time_iso_8601": "2010-07-12T16:34:28.175229Z", "url": "https://files.pythonhosted.org/packages/58/2c/04307b5768c90e3600b8c1c20de834eb1a937eab8fb54e6b2a1da1d96f89/pyjon.versionning-0.4.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9fbad6673821714717df820701e19ad9", "sha256": "50ae16fcb221994bbf7f8c3518c0633a242a6e4cbe368b17dcc15e4715134b2a"}, "downloads": -1, "filename": "pyjon.versionning-0.4.1.tar.gz", "has_sig": false, "md5_digest": "9fbad6673821714717df820701e19ad9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3134, "upload_time": "2010-07-12T16:34:27", "upload_time_iso_8601": "2010-07-12T16:34:27.258617Z", "url": "https://files.pythonhosted.org/packages/dd/6e/56841a2f217c8224454e8b2dd8291c33a46df4377b553cedc1498ad2685f/pyjon.versionning-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "6b91f33bb3ddb29f308eac8023d77334", "sha256": "de0a10ab7c07ede067b1505eef5d12c5c84c01c1b9664cd56ebb1d87f8176a28"}, "downloads": -1, "filename": "pyjon.versionning-0.4.2-py2.6.egg", "has_sig": false, "md5_digest": "6b91f33bb3ddb29f308eac8023d77334", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 9048, "upload_time": "2010-10-04T15:28:33", "upload_time_iso_8601": "2010-10-04T15:28:33.629987Z", "url": "https://files.pythonhosted.org/packages/b0/2c/7a25940615a7e05749dcb96a7694dca66f78411ddc5e92d8147844af557f/pyjon.versionning-0.4.2-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3cbfa21791b7a84b58757e2ec5572a2", "sha256": "43f21a54dbb7b0f11ab0d1dd31af23a2a96d7e1858c674c88219bc742cdde2a5"}, "downloads": -1, "filename": "pyjon.versionning-0.4.2.tar.gz", "has_sig": false, "md5_digest": "e3cbfa21791b7a84b58757e2ec5572a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3189, "upload_time": "2010-10-04T15:28:33", "upload_time_iso_8601": "2010-10-04T15:28:33.087063Z", "url": "https://files.pythonhosted.org/packages/d7/e7/04878d2b8534d6f443b1ec64d5352c5f27da60c1d0aec3c17f8c2f4d0637/pyjon.versionning-0.4.2.tar.gz", "yanked": false}], "0.4.2dev": []}, "urls": [{"comment_text": "", "digests": {"md5": "6b91f33bb3ddb29f308eac8023d77334", "sha256": "de0a10ab7c07ede067b1505eef5d12c5c84c01c1b9664cd56ebb1d87f8176a28"}, "downloads": -1, "filename": "pyjon.versionning-0.4.2-py2.6.egg", "has_sig": false, "md5_digest": "6b91f33bb3ddb29f308eac8023d77334", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 9048, "upload_time": "2010-10-04T15:28:33", "upload_time_iso_8601": "2010-10-04T15:28:33.629987Z", "url": "https://files.pythonhosted.org/packages/b0/2c/7a25940615a7e05749dcb96a7694dca66f78411ddc5e92d8147844af557f/pyjon.versionning-0.4.2-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3cbfa21791b7a84b58757e2ec5572a2", "sha256": "43f21a54dbb7b0f11ab0d1dd31af23a2a96d7e1858c674c88219bc742cdde2a5"}, "downloads": -1, "filename": "pyjon.versionning-0.4.2.tar.gz", "has_sig": false, "md5_digest": "e3cbfa21791b7a84b58757e2ec5572a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3189, "upload_time": "2010-10-04T15:28:33", "upload_time_iso_8601": "2010-10-04T15:28:33.087063Z", "url": "https://files.pythonhosted.org/packages/d7/e7/04878d2b8534d6f443b1ec64d5352c5f27da60c1d0aec3c17f8c2f4d0637/pyjon.versionning-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:44 2020"}