{"info": {"author": "Cisco Innovation Edge", "author_email": "miott@cisco.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: System :: Networking", "Topic :: System :: Networking :: Monitoring"], "description": "# cisco-gnmi-python\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\nThis library wraps gNMI functionality to ease usage with Cisco implementations in Python programs. Derived from [openconfig/gnmi](https://github.com/openconfig/gnmi/tree/master/proto).\n\n## Usage\n```bash\npip install cisco-gnmi\npython -c \"import cisco_gnmi; print(cisco_gnmi)\"\n```\n\nThis library covers the gNMI defined `capabilities`, `get`, `set`, and `subscribe` RPCs, and helper clients provide OS-specific recommendations. As commonalities and differences are identified this library will be refactored as necessary.\n\nIt is *highly* recommended that users of the library learn [Google Protocol Buffers](https://developers.google.com/protocol-buffers/) syntax to significantly ease usage. Understanding how to read Protocol Buffers, and reference [`gnmi.proto`](https://github.com/openconfig/gnmi/blob/master/proto/gnmi/gnmi.proto), will be immensely useful for utilizing gNMI and any other gRPC interface.\n\n### ClientBuilder\nSince `v1.0.0` a builder pattern is available with `ClientBuilder`. `ClientBuilder` provides several `set_*` methods which define the intended `Client` connectivity and a `construct` method to construct and return the desired `Client`. There are several major methods involved here:\n\n```\n    set_target(...)\n        Specifies the network element to build a client for.\n    set_os(...)\n        Specifies which OS wrapper to deliver.\n    set_secure(...)\n        Specifies that a secure gRPC channel should be used.\n    set_secure_from_file(...)\n        Loads certificates from file system for secure gRPC channel.\n    set_secure_from_target(...)\n        Attempts to utilize available certificate from target for secure gRPC channel.\n    set_call_authentication(...)\n        Specifies username/password to utilize for authentication.\n    set_ssl_target_override(...)\n        Sets the gRPC option to override the SSL target name.\n    set_channel_option(...)\n        Sets a gRPC channel option. Implies knowledge of channel options.\n    construct()\n        Constructs and returns the built Client.\n```\n\n#### Initialization Examples\n`ClientBuilder` can be chained for initialization or instantiated line-by-line.\n\n```python\nfrom cisco_gnmi import ClientBuilder\n\nbuilder = ClientBuilder('127.0.0.1:9339')\nbuilder.set_os('IOS XR')\nbuilder.set_secure_from_target()\nbuilder.set_call_authentication('admin', 'its_a_secret')\nclient = builder.construct()\n\n# Or...\n\nclient = ClientBuilder('127.0.0.1:9339').set_os('IOS XR').set_secure_from_target().set_call_authentication('admin', 'its_a_secret').construct()\n```\n\nUsing an encrypted channel automatically getting the certificate from the device, quick for testing:\n\n```python\nfrom cisco_gnmi import ClientBuilder\n\nclient = ClientBuilder(\n    '127.0.0.1:9339'\n).set_os('IOS XR').set_secure_from_target().set_call_authentication(\n    'admin',\n    'its_a_secret'\n).construct()\n```\n\nUsing an owned root certificate on the filesystem:\n\n```python\nfrom cisco_gnmi import ClientBuilder\n\nclient = ClientBuilder(\n    '127.0.0.1:9339'\n).set_os('IOS XR').set_secure_from_file(\n    'ems.pem'\n).set_call_authentication(\n    'admin',\n    'its_a_secret'\n).construct()\n```\n\nPassing certificate content to method:\n\n```python\nfrom cisco_gnmi import ClientBuilder\n\n# Note reading as bytes\nwith open('ems.pem', 'rb') as cert_fd:\n    root_cert = cert_fd.read()\n\nclient = ClientBuilder(\n    '127.0.0.1:9339'\n).set_os('IOS XR').set_secure(\n    root_cert\n).set_call_authentication(\n    'admin',\n    'its_a_secret'\n).construct()\n```\n\nUsage with root certificate, private key, and cert chain:\n\n```python\nfrom cisco_gnmi import ClientBuilder\n\nclient = ClientBuilder(\n    '127.0.0.1:9339'\n).set_os('IOS XE').set_secure_from_file(\n    root_certificates='rootCA.pem',\n    private_key='client.key',\n    certificate_chain='client.crt',\n).set_call_authentication(\n    'admin',\n    'its_a_secret'\n).construct()\n```\n\n\n### Client\n`Client` is a very barebones class simply implementing `capabilities`, `get`, `set`, and `subscribe` methods. It provides some context around the expectation for what should be supplied to these RPC functions and helpers for validation.\n\nMethods are documented in [`src/cisco_gnmi/client.py`](src/cisco_gnmi/client.py).\n\n### NXClient\n`NXClient` inherits from `Client` and provides several wrapper methods which aid with NX-OS gNMI implementation usage. These are `subscribe_xpaths`, and the removal of `get` and `set` as they are not yet supported operations. These methods have some helpers and constraints around what is supported by the implementation.\n\nMethods and usage examples are documented in [`src/cisco_gnmi/nx.py`](src/cisco_gnmi/nx.py).\n\n### XEClient\n`XEClient` inherits from `Client` and provides several wrapper methods which aid with IOS XE gNMI implementation usage. These are `delete_xpaths`, `get_xpaths`, `set_json`, and `subscribe_xpaths`. These methods have some helpers and constraints around what is supported by the implementation.\n\nMethods and usage examples are documented in [`src/cisco_gnmi/xe.py`](src/cisco_gnmi/xe.py).\n\n### XRClient\n`XRClient` inherits from `Client` and provides several wrapper methods which aid with IOS XR gNMI implementation usage. These are `delete_xpaths`, `get_xpaths`, `set_json`, and `subscribe_xpaths`. These methods have some helpers and constraints around what is supported by the implementation.\n\nMethods and usage examples are documented in [`src/cisco_gnmi/xr.py`](src/cisco_gnmi/xr.py).\n\n## gNMI\ngRPC Network Management Interface (gNMI) is a service defining an interface for a network management system (NMS) to interact with a network element. It may be thought of as akin to NETCONF or other control protocols which define operations and behaviors. The scope of gNMI is relatively simple - it seeks to \"[[define](https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md)] a gRPC-based protocol for the modification and retrieval of configuration from a target device, as well as the control and generation of telemetry streams from a target device to a data collection system. The intention is that a single gRPC service definition can cover both configuration and telemetry - allowing a single implementation on the target, as well as a single NMS element to interact with the device via telemetry and configuration RPCs\".\n\ngNMI is a specification developed by [OpenConfig](https://openconfig.net), an operator-driven working-group. It is important to note that gNMI only defines a protocol of behavior - not data models. This is akin to SNMP/MIBs and NETCONF/YANG. SNMP and NETCONF are respectively decoupled from the data itself in MIBs and YANG modules. gNMI is a control protocol, not a standardization of data. OpenConfig does develop standard data models as well, and does have some specialized behavior with OpenConfig originating models, but the data models themselves are out of the scope of gNMI.\n\n## Development\nRequires Python and utilizes `pipenv` for environment management. Manual usage of `pip`/`virtualenv` is not covered. Uses `black` for code formatting and `pylint` for code linting. `black` is not explicitly installed as it requires Python 3.6+.\n\n### Get Source\n```bash\ngit clone https://github.com/cisco-ie/cisco-gnmi-python.git\ncd cisco-gnmi-python\n# If pipenv not installed, install!\npip install --user pipenv\n# Now use Makefile...\nmake setup\n# Or pipenv manually if make not present\npipenv --three install --dev\n# Enter virtual environment\npipenv shell\n# Work work\nexit\n```\n\n### Code Hygiene\nWe use [`black`](https://github.com/ambv/black) for code formatting and [`pylint`](https://www.pylint.org/) for code linting. `hygiene.sh` will run `black` against all of the code under `gnmi/` except for `protoc` compiled protobufs, and run `pylint` against Python files directly under `gnmi/`. They don't totally agree, so we're not looking for perfection here. `black` is not automatically installed due to requiring Python 3.6+. `hygiene.sh` will check for regular path availability and via `pipenv`, and otherwise falls directly to `pylint`. If `black` usage is desired, please install it into `pipenv` if using Python 3.6+ or separate methods e.g. `brew install black`.\n\n```bash\n# If using Python 3.6+\npipenv install --dev black\n# Otherwise...\n./hygiene.sh\n```\n\n### Recompile Protobufs\nIf a new `gnmi.proto` definition is released, use `update_protos.sh` to recompile. If breaking changes are introduced the wrapper library must be updated.\n\n```bash\n./update_protos.sh\n```\n\n## Licensing\n`cisco-gnmi-python` is licensed as [Apache License, Version 2.0](LICENSE).\n\n## Issues\nOpen an issue :)\n\n## Related Projects\n1. [openconfig/gnmi](https://github.com/openconfig/gnmi)\n2. [google/gnxi](https://github.com/google/gnxi)\n3. [Telegraf Cisco gNMI Plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/cisco_telemetry_gnmi)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/miott/cisco-gnmi-python.git", "keywords": "", "license": "Apache License (2.0)", "maintainer": "Cisco Innovation Edge/Michael Ott", "maintainer_email": "miott@cisco.com", "name": "cisco-gnmi-miott", "package_url": "https://pypi.org/project/cisco-gnmi-miott/", "platform": "", "project_url": "https://pypi.org/project/cisco-gnmi-miott/", "project_urls": {"Code": "https://github.com/miott/cisco-gnmi-python.git", "Homepage": "https://github.com/miott/cisco-gnmi-python.git", "Issue Tracker": "https://github.com/miott/cisco-gnmi-python.git/issues"}, "release_url": "https://pypi.org/project/cisco-gnmi-miott/1.1.0/", "requires_dist": ["grpcio", "protobuf", "six", "cryptography", "grpcio-tools ; extra == 'dev'", "googleapis-common-protos ; extra == 'dev'", "pylint ; extra == 'dev'", "twine ; extra == 'dev'", "setuptools ; extra == 'dev'", "wheel ; extra == 'dev'", "pytest ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "pytest-mock ; extra == 'dev'", "coverage ; extra == 'dev'"], "requires_python": ">=3.6, <4", "summary": "This library forks gNMI functionality from https://github.com/cisco-ie/cisco-gnmi-python.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cisco-gnmi-python</h1>\n<p><a href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p>This library wraps gNMI functionality to ease usage with Cisco implementations in Python programs. Derived from <a href=\"https://github.com/openconfig/gnmi/tree/master/proto\" rel=\"nofollow\">openconfig/gnmi</a>.</p>\n<h2>Usage</h2>\n<pre>pip install cisco-gnmi\npython -c <span class=\"s2\">\"import cisco_gnmi; print(cisco_gnmi)\"</span>\n</pre>\n<p>This library covers the gNMI defined <code>capabilities</code>, <code>get</code>, <code>set</code>, and <code>subscribe</code> RPCs, and helper clients provide OS-specific recommendations. As commonalities and differences are identified this library will be refactored as necessary.</p>\n<p>It is <em>highly</em> recommended that users of the library learn <a href=\"https://developers.google.com/protocol-buffers/\" rel=\"nofollow\">Google Protocol Buffers</a> syntax to significantly ease usage. Understanding how to read Protocol Buffers, and reference <a href=\"https://github.com/openconfig/gnmi/blob/master/proto/gnmi/gnmi.proto\" rel=\"nofollow\"><code>gnmi.proto</code></a>, will be immensely useful for utilizing gNMI and any other gRPC interface.</p>\n<h3>ClientBuilder</h3>\n<p>Since <code>v1.0.0</code> a builder pattern is available with <code>ClientBuilder</code>. <code>ClientBuilder</code> provides several <code>set_*</code> methods which define the intended <code>Client</code> connectivity and a <code>construct</code> method to construct and return the desired <code>Client</code>. There are several major methods involved here:</p>\n<pre><code>    set_target(...)\n        Specifies the network element to build a client for.\n    set_os(...)\n        Specifies which OS wrapper to deliver.\n    set_secure(...)\n        Specifies that a secure gRPC channel should be used.\n    set_secure_from_file(...)\n        Loads certificates from file system for secure gRPC channel.\n    set_secure_from_target(...)\n        Attempts to utilize available certificate from target for secure gRPC channel.\n    set_call_authentication(...)\n        Specifies username/password to utilize for authentication.\n    set_ssl_target_override(...)\n        Sets the gRPC option to override the SSL target name.\n    set_channel_option(...)\n        Sets a gRPC channel option. Implies knowledge of channel options.\n    construct()\n        Constructs and returns the built Client.\n</code></pre>\n<h4>Initialization Examples</h4>\n<p><code>ClientBuilder</code> can be chained for initialization or instantiated line-by-line.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cisco_gnmi</span> <span class=\"kn\">import</span> <span class=\"n\">ClientBuilder</span>\n\n<span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">ClientBuilder</span><span class=\"p\">(</span><span class=\"s1\">'127.0.0.1:9339'</span><span class=\"p\">)</span>\n<span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">set_os</span><span class=\"p\">(</span><span class=\"s1\">'IOS XR'</span><span class=\"p\">)</span>\n<span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">set_secure_from_target</span><span class=\"p\">()</span>\n<span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">set_call_authentication</span><span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"s1\">'its_a_secret'</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">construct</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Or...</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ClientBuilder</span><span class=\"p\">(</span><span class=\"s1\">'127.0.0.1:9339'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_os</span><span class=\"p\">(</span><span class=\"s1\">'IOS XR'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_secure_from_target</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_call_authentication</span><span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"s1\">'its_a_secret'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">construct</span><span class=\"p\">()</span>\n</pre>\n<p>Using an encrypted channel automatically getting the certificate from the device, quick for testing:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cisco_gnmi</span> <span class=\"kn\">import</span> <span class=\"n\">ClientBuilder</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ClientBuilder</span><span class=\"p\">(</span>\n    <span class=\"s1\">'127.0.0.1:9339'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_os</span><span class=\"p\">(</span><span class=\"s1\">'IOS XR'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_secure_from_target</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_call_authentication</span><span class=\"p\">(</span>\n    <span class=\"s1\">'admin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'its_a_secret'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">construct</span><span class=\"p\">()</span>\n</pre>\n<p>Using an owned root certificate on the filesystem:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cisco_gnmi</span> <span class=\"kn\">import</span> <span class=\"n\">ClientBuilder</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ClientBuilder</span><span class=\"p\">(</span>\n    <span class=\"s1\">'127.0.0.1:9339'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_os</span><span class=\"p\">(</span><span class=\"s1\">'IOS XR'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_secure_from_file</span><span class=\"p\">(</span>\n    <span class=\"s1\">'ems.pem'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_call_authentication</span><span class=\"p\">(</span>\n    <span class=\"s1\">'admin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'its_a_secret'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">construct</span><span class=\"p\">()</span>\n</pre>\n<p>Passing certificate content to method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cisco_gnmi</span> <span class=\"kn\">import</span> <span class=\"n\">ClientBuilder</span>\n\n<span class=\"c1\"># Note reading as bytes</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'ems.pem'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cert_fd</span><span class=\"p\">:</span>\n    <span class=\"n\">root_cert</span> <span class=\"o\">=</span> <span class=\"n\">cert_fd</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ClientBuilder</span><span class=\"p\">(</span>\n    <span class=\"s1\">'127.0.0.1:9339'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_os</span><span class=\"p\">(</span><span class=\"s1\">'IOS XR'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_secure</span><span class=\"p\">(</span>\n    <span class=\"n\">root_cert</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_call_authentication</span><span class=\"p\">(</span>\n    <span class=\"s1\">'admin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'its_a_secret'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">construct</span><span class=\"p\">()</span>\n</pre>\n<p>Usage with root certificate, private key, and cert chain:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cisco_gnmi</span> <span class=\"kn\">import</span> <span class=\"n\">ClientBuilder</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ClientBuilder</span><span class=\"p\">(</span>\n    <span class=\"s1\">'127.0.0.1:9339'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_os</span><span class=\"p\">(</span><span class=\"s1\">'IOS XE'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_secure_from_file</span><span class=\"p\">(</span>\n    <span class=\"n\">root_certificates</span><span class=\"o\">=</span><span class=\"s1\">'rootCA.pem'</span><span class=\"p\">,</span>\n    <span class=\"n\">private_key</span><span class=\"o\">=</span><span class=\"s1\">'client.key'</span><span class=\"p\">,</span>\n    <span class=\"n\">certificate_chain</span><span class=\"o\">=</span><span class=\"s1\">'client.crt'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_call_authentication</span><span class=\"p\">(</span>\n    <span class=\"s1\">'admin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'its_a_secret'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">construct</span><span class=\"p\">()</span>\n</pre>\n<h3>Client</h3>\n<p><code>Client</code> is a very barebones class simply implementing <code>capabilities</code>, <code>get</code>, <code>set</code>, and <code>subscribe</code> methods. It provides some context around the expectation for what should be supplied to these RPC functions and helpers for validation.</p>\n<p>Methods are documented in <a href=\"src/cisco_gnmi/client.py\" rel=\"nofollow\"><code>src/cisco_gnmi/client.py</code></a>.</p>\n<h3>NXClient</h3>\n<p><code>NXClient</code> inherits from <code>Client</code> and provides several wrapper methods which aid with NX-OS gNMI implementation usage. These are <code>subscribe_xpaths</code>, and the removal of <code>get</code> and <code>set</code> as they are not yet supported operations. These methods have some helpers and constraints around what is supported by the implementation.</p>\n<p>Methods and usage examples are documented in <a href=\"src/cisco_gnmi/nx.py\" rel=\"nofollow\"><code>src/cisco_gnmi/nx.py</code></a>.</p>\n<h3>XEClient</h3>\n<p><code>XEClient</code> inherits from <code>Client</code> and provides several wrapper methods which aid with IOS XE gNMI implementation usage. These are <code>delete_xpaths</code>, <code>get_xpaths</code>, <code>set_json</code>, and <code>subscribe_xpaths</code>. These methods have some helpers and constraints around what is supported by the implementation.</p>\n<p>Methods and usage examples are documented in <a href=\"src/cisco_gnmi/xe.py\" rel=\"nofollow\"><code>src/cisco_gnmi/xe.py</code></a>.</p>\n<h3>XRClient</h3>\n<p><code>XRClient</code> inherits from <code>Client</code> and provides several wrapper methods which aid with IOS XR gNMI implementation usage. These are <code>delete_xpaths</code>, <code>get_xpaths</code>, <code>set_json</code>, and <code>subscribe_xpaths</code>. These methods have some helpers and constraints around what is supported by the implementation.</p>\n<p>Methods and usage examples are documented in <a href=\"src/cisco_gnmi/xr.py\" rel=\"nofollow\"><code>src/cisco_gnmi/xr.py</code></a>.</p>\n<h2>gNMI</h2>\n<p>gRPC Network Management Interface (gNMI) is a service defining an interface for a network management system (NMS) to interact with a network element. It may be thought of as akin to NETCONF or other control protocols which define operations and behaviors. The scope of gNMI is relatively simple - it seeks to \"[<a href=\"https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md\" rel=\"nofollow\">define</a>] a gRPC-based protocol for the modification and retrieval of configuration from a target device, as well as the control and generation of telemetry streams from a target device to a data collection system. The intention is that a single gRPC service definition can cover both configuration and telemetry - allowing a single implementation on the target, as well as a single NMS element to interact with the device via telemetry and configuration RPCs\".</p>\n<p>gNMI is a specification developed by <a href=\"https://openconfig.net\" rel=\"nofollow\">OpenConfig</a>, an operator-driven working-group. It is important to note that gNMI only defines a protocol of behavior - not data models. This is akin to SNMP/MIBs and NETCONF/YANG. SNMP and NETCONF are respectively decoupled from the data itself in MIBs and YANG modules. gNMI is a control protocol, not a standardization of data. OpenConfig does develop standard data models as well, and does have some specialized behavior with OpenConfig originating models, but the data models themselves are out of the scope of gNMI.</p>\n<h2>Development</h2>\n<p>Requires Python and utilizes <code>pipenv</code> for environment management. Manual usage of <code>pip</code>/<code>virtualenv</code> is not covered. Uses <code>black</code> for code formatting and <code>pylint</code> for code linting. <code>black</code> is not explicitly installed as it requires Python 3.6+.</p>\n<h3>Get Source</h3>\n<pre>git clone https://github.com/cisco-ie/cisco-gnmi-python.git\n<span class=\"nb\">cd</span> cisco-gnmi-python\n<span class=\"c1\"># If pipenv not installed, install!</span>\npip install --user pipenv\n<span class=\"c1\"># Now use Makefile...</span>\nmake setup\n<span class=\"c1\"># Or pipenv manually if make not present</span>\npipenv --three install --dev\n<span class=\"c1\"># Enter virtual environment</span>\npipenv shell\n<span class=\"c1\"># Work work</span>\n<span class=\"nb\">exit</span>\n</pre>\n<h3>Code Hygiene</h3>\n<p>We use <a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><code>black</code></a> for code formatting and <a href=\"https://www.pylint.org/\" rel=\"nofollow\"><code>pylint</code></a> for code linting. <code>hygiene.sh</code> will run <code>black</code> against all of the code under <code>gnmi/</code> except for <code>protoc</code> compiled protobufs, and run <code>pylint</code> against Python files directly under <code>gnmi/</code>. They don't totally agree, so we're not looking for perfection here. <code>black</code> is not automatically installed due to requiring Python 3.6+. <code>hygiene.sh</code> will check for regular path availability and via <code>pipenv</code>, and otherwise falls directly to <code>pylint</code>. If <code>black</code> usage is desired, please install it into <code>pipenv</code> if using Python 3.6+ or separate methods e.g. <code>brew install black</code>.</p>\n<pre><span class=\"c1\"># If using Python 3.6+</span>\npipenv install --dev black\n<span class=\"c1\"># Otherwise...</span>\n./hygiene.sh\n</pre>\n<h3>Recompile Protobufs</h3>\n<p>If a new <code>gnmi.proto</code> definition is released, use <code>update_protos.sh</code> to recompile. If breaking changes are introduced the wrapper library must be updated.</p>\n<pre>./update_protos.sh\n</pre>\n<h2>Licensing</h2>\n<p><code>cisco-gnmi-python</code> is licensed as <a href=\"LICENSE\" rel=\"nofollow\">Apache License, Version 2.0</a>.</p>\n<h2>Issues</h2>\n<p>Open an issue :)</p>\n<h2>Related Projects</h2>\n<ol>\n<li><a href=\"https://github.com/openconfig/gnmi\" rel=\"nofollow\">openconfig/gnmi</a></li>\n<li><a href=\"https://github.com/google/gnxi\" rel=\"nofollow\">google/gnxi</a></li>\n<li><a href=\"https://github.com/influxdata/telegraf/tree/master/plugins/inputs/cisco_telemetry_gnmi\" rel=\"nofollow\">Telegraf Cisco gNMI Plugin</a></li>\n</ol>\n\n          </div>"}, "last_serial": 7112770, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "0373d7bfaf32d0aef2ab095bef2e21ad", "sha256": "a2896cb1bea31dbe4c6c0e7542a9311e4928b68500c5d1edee4d659b49d2c789"}, "downloads": -1, "filename": "cisco_gnmi_miott-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0373d7bfaf32d0aef2ab095bef2e21ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 48035, "upload_time": "2020-04-27T15:52:17", "upload_time_iso_8601": "2020-04-27T15:52:17.231505Z", "url": "https://files.pythonhosted.org/packages/6d/29/62476d482a5aa5db1c01ecddb6f282092230b9da048bfc16cd89e935f799/cisco_gnmi_miott-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b218f6f175b5e96f11c3bcf1fb1fc2a", "sha256": "28902f98b0a1f11e6271a03948b191e659f78f8b268ec629fd6716240e732872"}, "downloads": -1, "filename": "cisco_gnmi_miott-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7b218f6f175b5e96f11c3bcf1fb1fc2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 38824, "upload_time": "2020-04-27T15:52:19", "upload_time_iso_8601": "2020-04-27T15:52:19.400486Z", "url": "https://files.pythonhosted.org/packages/77/30/3d07d8753a0c37c442b1813eccaf9e2663ce2af8e63562f20890f9fe62aa/cisco_gnmi_miott-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0373d7bfaf32d0aef2ab095bef2e21ad", "sha256": "a2896cb1bea31dbe4c6c0e7542a9311e4928b68500c5d1edee4d659b49d2c789"}, "downloads": -1, "filename": "cisco_gnmi_miott-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0373d7bfaf32d0aef2ab095bef2e21ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 48035, "upload_time": "2020-04-27T15:52:17", "upload_time_iso_8601": "2020-04-27T15:52:17.231505Z", "url": "https://files.pythonhosted.org/packages/6d/29/62476d482a5aa5db1c01ecddb6f282092230b9da048bfc16cd89e935f799/cisco_gnmi_miott-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b218f6f175b5e96f11c3bcf1fb1fc2a", "sha256": "28902f98b0a1f11e6271a03948b191e659f78f8b268ec629fd6716240e732872"}, "downloads": -1, "filename": "cisco_gnmi_miott-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7b218f6f175b5e96f11c3bcf1fb1fc2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 38824, "upload_time": "2020-04-27T15:52:19", "upload_time_iso_8601": "2020-04-27T15:52:19.400486Z", "url": "https://files.pythonhosted.org/packages/77/30/3d07d8753a0c37c442b1813eccaf9e2663ce2af8e63562f20890f9fe62aa/cisco_gnmi_miott-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:18 2020"}