{"info": {"author": "Richard O'Dwyer", "author_email": "richard@richard.do", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: C", "Programming Language :: Python", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": ".. -*- mode: rst -*-\n\nsoft-DTW\n=========\n\nPython implementation of soft-DTW.\n\nWhat is it?\n-----------\n\nThe celebrated dynamic time warping (DTW) [1] defines the discrepancy between\ntwo time series, of possibly variable length, as their minimal alignment cost.\nAlthough the number of possible alignments is exponential in the length of the\ntwo time series, [1] showed that DTW can be computed in only quadractic time\nusing dynamic programming.\n\nSoft-DTW [2] proposes to replace this minimum by a soft minimum. Like the\noriginal DTW, soft-DTW can be computed in quadratic time using dynamic\nprogramming. However, the main advantage of soft-DTW stems from the fact that\nit is differentiable everywhere and that its gradient can also be computed in\nquadratic time. This enables to use soft-DTW for time series averaging or as a\nloss function, between a ground-truth time series and a time series predicted\nby a neural network, trained end-to-end using backpropagation.\n\nSupported features\n------------------\n\n* soft-DTW (forward pass) and gradient (backward pass) computations,\n  implemented in Cython for speed\n* barycenters (time series averaging)\n* dataset loader for the `UCR archive <http://www.cs.ucr.edu/~eamonn/time_series_data/>`_\n* `Chainer <http://chainer.org>`_ function\n\nPlanned features\n-----------------\n\n* PyTorch function\n\nExample\n--------\n\n.. code-block:: python\n\n    from sdtw import SoftDTW\n    from sdtw.distance import SquaredEuclidean\n\n    # Time series 1: numpy array, shape = [m, d] where m = length and d = dim\n    X = ...\n    # Time series 2: numpy array, shape = [n, d] where n = length and d = dim\n    Y = ...\n\n    # D can also be an arbitrary distance matrix: numpy array, shape [m, n]\n    D = SquaredEuclidean(X, Y)\n    sdtw = SoftDTW(D, gamma=1.0)\n    # soft-DTW discrepancy, approaches DTW as gamma -> 0\n    value = sdtw.compute()\n    # gradient w.r.t. D, shape = [m, n], which is also the expected alignment matrix\n    E = sdtw.grad()\n    # gradient w.r.t. X, shape = [m, d]\n    G = D.jacobian_product(E)\n\nInstallation\n------------\n\nBinary packages are not available.\n\nThis project can be installed from its git repository. It is assumed that you\nhave a working C compiler.\n\n1. Obtain the sources by::\n\n    git clone https://github.com/mblondel/soft-dtw.git\n\nor, if `git` is unavailable, `download as a ZIP from GitHub <https://github.com/mblondel/soft-dtw/archive/master.zip>`_.\n\n\n2. Install the dependencies::\n\n    # via pip\n\n    pip install numpy scipy scikit-learn cython nose\n\n\n    # via conda\n\n    conda install numpy scipy scikit-learn cython nose\n\n\n3. Build and install soft-dtw::\n\n    cd soft-dtw\n    python setup.py install\n\n\nReferences\n----------\n\n.. [1] Hiroaki Sakoe, Seibi Chiba.\n       *Dynamic programming algorithm optimization for spoken word recognition.*\n       In: IEEE Trans. on Acoustics, Speech, and Sig. Proc, 1978.\n\n.. [2] Marco Cuturi, Mathieu Blondel.\n       *Soft-DTW: a Differentiable Loss Function for Time-Series.*\n       In: Proc. of ICML 2017.\n       [`PDF <https://arxiv.org/abs/1703.01541>`_]\n\nAuthor\n------\n\n- Mathieu Blondel, 2017\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/mblondel/soft-dtw/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mblondel/soft-dtw/", "keywords": "", "license": "Simplified BSD", "maintainer": "", "maintainer_email": "", "name": "soft-dtw", "package_url": "https://pypi.org/project/soft-dtw/", "platform": "", "project_url": "https://pypi.org/project/soft-dtw/", "project_urls": {"Download": "https://github.com/mblondel/soft-dtw/", "Homepage": "https://github.com/mblondel/soft-dtw/"}, "release_url": "https://pypi.org/project/soft-dtw/0.1.6/", "requires_dist": null, "requires_python": "", "summary": "Python implementation of soft-DTW", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python implementation of soft-DTW.</p>\n<div id=\"what-is-it\">\n<h2>What is it?</h2>\n<p>The celebrated dynamic time warping (DTW) [1] defines the discrepancy between\ntwo time series, of possibly variable length, as their minimal alignment cost.\nAlthough the number of possible alignments is exponential in the length of the\ntwo time series, [1] showed that DTW can be computed in only quadractic time\nusing dynamic programming.</p>\n<p>Soft-DTW [2] proposes to replace this minimum by a soft minimum. Like the\noriginal DTW, soft-DTW can be computed in quadratic time using dynamic\nprogramming. However, the main advantage of soft-DTW stems from the fact that\nit is differentiable everywhere and that its gradient can also be computed in\nquadratic time. This enables to use soft-DTW for time series averaging or as a\nloss function, between a ground-truth time series and a time series predicted\nby a neural network, trained end-to-end using backpropagation.</p>\n</div>\n<div id=\"supported-features\">\n<h2>Supported features</h2>\n<ul>\n<li>soft-DTW (forward pass) and gradient (backward pass) computations,\nimplemented in Cython for speed</li>\n<li>barycenters (time series averaging)</li>\n<li>dataset loader for the <a href=\"http://www.cs.ucr.edu/~eamonn/time_series_data/\" rel=\"nofollow\">UCR archive</a></li>\n<li><a href=\"http://chainer.org\" rel=\"nofollow\">Chainer</a> function</li>\n</ul>\n</div>\n<div id=\"planned-features\">\n<h2>Planned features</h2>\n<ul>\n<li>PyTorch function</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sdtw</span> <span class=\"kn\">import</span> <span class=\"n\">SoftDTW</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sdtw.distance</span> <span class=\"kn\">import</span> <span class=\"n\">SquaredEuclidean</span>\n\n<span class=\"c1\"># Time series 1: numpy array, shape = [m, d] where m = length and d = dim</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"c1\"># Time series 2: numpy array, shape = [n, d] where n = length and d = dim</span>\n<span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n<span class=\"c1\"># D can also be an arbitrary distance matrix: numpy array, shape [m, n]</span>\n<span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"n\">SquaredEuclidean</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">)</span>\n<span class=\"n\">sdtw</span> <span class=\"o\">=</span> <span class=\"n\">SoftDTW</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"c1\"># soft-DTW discrepancy, approaches DTW as gamma -&gt; 0</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">sdtw</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n<span class=\"c1\"># gradient w.r.t. D, shape = [m, n], which is also the expected alignment matrix</span>\n<span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">sdtw</span><span class=\"o\">.</span><span class=\"n\">grad</span><span class=\"p\">()</span>\n<span class=\"c1\"># gradient w.r.t. X, shape = [m, d]</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">jacobian_product</span><span class=\"p\">(</span><span class=\"n\">E</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Binary packages are not available.</p>\n<p>This project can be installed from its git repository. It is assumed that you\nhave a working C compiler.</p>\n<ol>\n<li><p>Obtain the sources by:</p>\n<pre>git clone https://github.com/mblondel/soft-dtw.git\n</pre>\n</li>\n</ol>\n<p>or, if <cite>git</cite> is unavailable, <a href=\"https://github.com/mblondel/soft-dtw/archive/master.zip\" rel=\"nofollow\">download as a ZIP from GitHub</a>.</p>\n<ol>\n<li><p>Install the dependencies:</p>\n<pre># via pip\n\npip install numpy scipy scikit-learn cython nose\n\n\n# via conda\n\nconda install numpy scipy scikit-learn cython nose\n</pre>\n</li>\n<li><p>Build and install soft-dtw:</p>\n<pre>cd soft-dtw\npython setup.py install\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<table id=\"id1\">\n<col><col>\n<tbody>\n<tr><td>[1]</td><td>Hiroaki Sakoe, Seibi Chiba.\n<em>Dynamic programming algorithm optimization for spoken word recognition.</em>\nIn: IEEE Trans. on Acoustics, Speech, and Sig. Proc, 1978.</td></tr>\n</tbody>\n</table>\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td>[2]</td><td>Marco Cuturi, Mathieu Blondel.\n<em>Soft-DTW: a Differentiable Loss Function for Time-Series.</em>\nIn: Proc. of ICML 2017.\n[<a href=\"https://arxiv.org/abs/1703.01541\" rel=\"nofollow\">PDF</a>]</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<ul>\n<li>Mathieu Blondel, 2017</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3868595, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0a8faaac1e27b501abf7f977dbf75ee6", "sha256": "2ea2cfd07b961fd27e5d88b64b71108cde2526fc2ef9843fb899224123e8dd56"}, "downloads": -1, "filename": "soft-dtw-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0a8faaac1e27b501abf7f977dbf75ee6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7732, "upload_time": "2018-05-16T10:02:52", "upload_time_iso_8601": "2018-05-16T10:02:52.681014Z", "url": "https://files.pythonhosted.org/packages/0d/77/98818372f5628693535b3a1ce6ac1c52bc0db78bc9b72544cd2a28aad66c/soft-dtw-0.1.0.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "458e0e76bca6f9306b82f486b41e8a97", "sha256": "75092414fbdc31fe4c82e560aee4b4c5bd4993275e7934dea5dd24a461473f12"}, "downloads": -1, "filename": "soft_dtw-0.1.6-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "458e0e76bca6f9306b82f486b41e8a97", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 29299, "upload_time": "2018-05-16T13:10:54", "upload_time_iso_8601": "2018-05-16T13:10:54.067355Z", "url": "https://files.pythonhosted.org/packages/26/e9/98305d8a5b37d4e0754cbdc42c9678582ca21d0838dc5efaa1c07cce82a6/soft_dtw-0.1.6-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3773eecc33cbd537c5a38ec48ea72d1", "sha256": "60498ee2049a6a0b49276d26deca8abfa007a9ac9c51afbaecfb1fa403806da8"}, "downloads": -1, "filename": "soft-dtw-0.1.6.tar.gz", "has_sig": false, "md5_digest": "d3773eecc33cbd537c5a38ec48ea72d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58060, "upload_time": "2018-05-16T13:10:25", "upload_time_iso_8601": "2018-05-16T13:10:25.470517Z", "url": "https://files.pythonhosted.org/packages/ec/a8/99a1c684116c73dee995ed690a1ed9217ae0eb9514c0b06fdd386c7c21da/soft-dtw-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "458e0e76bca6f9306b82f486b41e8a97", "sha256": "75092414fbdc31fe4c82e560aee4b4c5bd4993275e7934dea5dd24a461473f12"}, "downloads": -1, "filename": "soft_dtw-0.1.6-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "458e0e76bca6f9306b82f486b41e8a97", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 29299, "upload_time": "2018-05-16T13:10:54", "upload_time_iso_8601": "2018-05-16T13:10:54.067355Z", "url": "https://files.pythonhosted.org/packages/26/e9/98305d8a5b37d4e0754cbdc42c9678582ca21d0838dc5efaa1c07cce82a6/soft_dtw-0.1.6-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3773eecc33cbd537c5a38ec48ea72d1", "sha256": "60498ee2049a6a0b49276d26deca8abfa007a9ac9c51afbaecfb1fa403806da8"}, "downloads": -1, "filename": "soft-dtw-0.1.6.tar.gz", "has_sig": false, "md5_digest": "d3773eecc33cbd537c5a38ec48ea72d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58060, "upload_time": "2018-05-16T13:10:25", "upload_time_iso_8601": "2018-05-16T13:10:25.470517Z", "url": "https://files.pythonhosted.org/packages/ec/a8/99a1c684116c73dee995ed690a1ed9217ae0eb9514c0b06fdd386c7c21da/soft-dtw-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:55 2020"}