{"info": {"author": "Brandon W Maister", "author_email": "quodlibetor@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Topic :: System :: Archiving", "Topic :: System :: Archiving :: Backup", "Topic :: System :: Archiving :: Packaging"], "description": "==========\nZip Please\n==========\n\nA script to help you zip playlists.\n\nHomepage: http://bitbucket.org/quodlibetor/zipls\n\n.. contents::\n\n\nInstallation\n============\n\nTo make this work best you want to have pip\n(http://pypi.python.org/pypi/pip) installed, although technically it\nis possible to install it without it.\n\nFrom a terminal, (Terminal.app if you're on a Mac, or whatever turns\nyou on) after installing pip, do::\n\n    sudo pip install argparse mutagen zipls\n\nThat should do it. If it doesn't, please contact_ me.\n\nUsage\n=====\n\nUsers\n-----\n\nGraphical Use\n~~~~~~~~~~~~~\n\nAfter installation there should be a program ``zipls`` that you can\nrun. Run it.\n\nThat is to say that, in general, if you run zipls without any\narguments it will give you a gui.\n\nIf you run it from a command line with playlist files as arguments,\nyou can give it the ``-g`` switch to make it still run in graphical\nmode. All arguments given to the command line should still apply even\nif run in graphics mode.\n\nCommand Line\n~~~~~~~~~~~~\n\nTypically::\n\n    zipls PLAYLIST.pls\n\nthat'll generate a zip file PLAYLIST.zip with a folder PLAYLIST inside\nof it with all the songs pointed to by PLAYLIST.pls.\n\nAnd of course::\n\n    zipls --help\n\nworks. (Did you think I was a jerk?)\n\nProgrammers\n-----------\n\nBasically all you care about is the ``Songs`` class from zipls. It\ntakes a path, or list of paths, to a playlist and knows how to zip\nthem::\n\n    from zipls import Songs\n\n    songs = Songs(\"path/to/playlist.m3u\")\n\n    # __init__ just goes through add():\n    songs.add(\"path/to/another/playlist.xspf\")\n    # lists of paths also work:\n    songs.add(['another.pls', 'something/else.m3u'])\n\n    songs.zip_em('path/to/zipcollection')\n\nExtending\n~~~~~~~~~\n\nFirst of all, just email me with an example of the playlist that you\nwant zipls to parse and I'll do it. But if you want to *not*\nmonkey-patch it:\n\nIf you want to add a new playlist format with extension EXT: subclass\n``Songs`` and implement a function ``_songs_from_EXT(self,\n'path/to/pls')`` that expects to receive a path to the playlist.\n\nSimilarly, if you want to add audio format reading capabilities\nsubclass ``Song`` (singular) and create a ``_set_artist_from_EXT``, where\nEXT is the extension of the music format you want to add. You'll also\nneed to initialize ``Songs`` with your new song class.\n\nSo if I wanted to add ``.spf`` playlists and ``.mus`` audio::\n\n    class MusSong(zipls.Song):\n        def _set_artist_from_mus(self):\n            # and then probably:\n            from mutagen.mus import Mus\n            self.artist = Mus(self.path)['artist'][0]\n    class SpfSongs(zipls.Songs):\n        def _songs_from_spf(self, playlist):\n            # add songs\n\n    songs = SpfSongs('path/to/playlist', MusSong)\n\n\nWorks With\n----------\n\nplaylist formats:\n\n    - .pls\n    - .xspf\n    - .m3u\n\nA variety of common audio formats. (Ogg Vorbis, MP3/4, FLAC...)\nBasically everything supported by mutagen_ should work\n\n.. _contact:\n\nContact and Copying\n===================\n\nMy name's Brandon, email me at quodlibetor@gmail.com, and the project\nhome page is http://bitbucket.org/quodlibetor/zipls .\n\nBasically do whatever you want, and if you make something way better\nbased on this, lemme know.\n\nCopyright (C) 2010 Brandon W Maister quodlibetor@gmail.com\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n.. _mutagen: https://code.google.com/p/mutagen/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/quodlibetdor/zipls", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "zipls", "package_url": "https://pypi.org/project/zipls/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zipls/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/quodlibetdor/zipls"}, "release_url": "https://pypi.org/project/zipls/0.2/", "requires_dist": null, "requires_python": null, "summary": "A script to zip your playlists", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A script to help you zip playlists.</p>\n<p>Homepage: <a href=\"http://bitbucket.org/quodlibetor/zipls\" rel=\"nofollow\">http://bitbucket.org/quodlibetor/zipls</a></p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#users\" id=\"id3\" rel=\"nofollow\">Users</a><ul>\n<li><a href=\"#graphical-use\" id=\"id4\" rel=\"nofollow\">Graphical Use</a></li>\n<li><a href=\"#command-line\" id=\"id5\" rel=\"nofollow\">Command Line</a></li>\n</ul>\n</li>\n<li><a href=\"#programmers\" id=\"id6\" rel=\"nofollow\">Programmers</a><ul>\n<li><a href=\"#extending\" id=\"id7\" rel=\"nofollow\">Extending</a></li>\n</ul>\n</li>\n<li><a href=\"#works-with\" id=\"id8\" rel=\"nofollow\">Works With</a></li>\n</ul>\n</li>\n<li><a href=\"#contact-and-copying\" id=\"id9\" rel=\"nofollow\">Contact and Copying</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<p>To make this work best you want to have pip\n(<a href=\"http://pypi.python.org/pypi/pip\" rel=\"nofollow\">http://pypi.python.org/pypi/pip</a>) installed, although technically it\nis possible to install it without it.</p>\n<p>From a terminal, (Terminal.app if you\u2019re on a Mac, or whatever turns\nyou on) after installing pip, do:</p>\n<pre>sudo pip install argparse mutagen zipls\n</pre>\n<p>That should do it. If it doesn\u2019t, please <a href=\"#contact\" rel=\"nofollow\">contact</a> me.</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"users\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Users</a></h3>\n<div id=\"graphical-use\">\n<h4><a href=\"#id4\" rel=\"nofollow\">Graphical Use</a></h4>\n<p>After installation there should be a program <tt>zipls</tt> that you can\nrun. Run it.</p>\n<p>That is to say that, in general, if you run zipls without any\narguments it will give you a gui.</p>\n<p>If you run it from a command line with playlist files as arguments,\nyou can give it the <tt><span class=\"pre\">-g</span></tt> switch to make it still run in graphical\nmode. All arguments given to the command line should still apply even\nif run in graphics mode.</p>\n</div>\n<div id=\"command-line\">\n<h4><a href=\"#id5\" rel=\"nofollow\">Command Line</a></h4>\n<p>Typically:</p>\n<pre>zipls PLAYLIST.pls\n</pre>\n<p>that\u2019ll generate a zip file PLAYLIST.zip with a folder PLAYLIST inside\nof it with all the songs pointed to by PLAYLIST.pls.</p>\n<p>And of course:</p>\n<pre>zipls --help\n</pre>\n<p>works. (Did you think I was a jerk?)</p>\n</div>\n</div>\n<div id=\"programmers\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Programmers</a></h3>\n<p>Basically all you care about is the <tt>Songs</tt> class from zipls. It\ntakes a path, or list of paths, to a playlist and knows how to zip\nthem:</p>\n<pre>from zipls import Songs\n\nsongs = Songs(\"path/to/playlist.m3u\")\n\n# __init__ just goes through add():\nsongs.add(\"path/to/another/playlist.xspf\")\n# lists of paths also work:\nsongs.add(['another.pls', 'something/else.m3u'])\n\nsongs.zip_em('path/to/zipcollection')\n</pre>\n<div id=\"extending\">\n<h4><a href=\"#id7\" rel=\"nofollow\">Extending</a></h4>\n<p>First of all, just email me with an example of the playlist that you\nwant zipls to parse and I\u2019ll do it. But if you want to <em>not</em>\nmonkey-patch it:</p>\n<p>If you want to add a new playlist format with extension EXT: subclass\n<tt>Songs</tt> and implement a function <tt>_songs_from_EXT(self,\n'path/to/pls')</tt> that expects to receive a path to the playlist.</p>\n<p>Similarly, if you want to add audio format reading capabilities\nsubclass <tt>Song</tt> (singular) and create a <tt>_set_artist_from_EXT</tt>, where\nEXT is the extension of the music format you want to add. You\u2019ll also\nneed to initialize <tt>Songs</tt> with your new song class.</p>\n<p>So if I wanted to add <tt>.spf</tt> playlists and <tt>.mus</tt> audio:</p>\n<pre>class MusSong(zipls.Song):\n    def _set_artist_from_mus(self):\n        # and then probably:\n        from mutagen.mus import Mus\n        self.artist = Mus(self.path)['artist'][0]\nclass SpfSongs(zipls.Songs):\n    def _songs_from_spf(self, playlist):\n        # add songs\n\nsongs = SpfSongs('path/to/playlist', MusSong)\n</pre>\n</div>\n</div>\n<div id=\"works-with\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Works With</a></h3>\n<p>playlist formats:</p>\n<blockquote>\n<ul>\n<li>.pls</li>\n<li>.xspf</li>\n<li>.m3u</li>\n</ul>\n</blockquote>\n<p>A variety of common audio formats. (Ogg Vorbis, MP3/4, FLAC\u2026)\nBasically everything supported by <a href=\"https://code.google.com/p/mutagen/\" rel=\"nofollow\">mutagen</a> should work</p>\n</div>\n</div>\n<div id=\"contact-and-copying\">\n<span id=\"contact\"></span><h2><a href=\"#id9\" rel=\"nofollow\">Contact and Copying</a></h2>\n<p>My name\u2019s Brandon, email me at <a href=\"mailto:quodlibetor%40gmail.com\">quodlibetor<span>@</span>gmail<span>.</span>com</a>, and the project\nhome page is <a href=\"http://bitbucket.org/quodlibetor/zipls\" rel=\"nofollow\">http://bitbucket.org/quodlibetor/zipls</a> .</p>\n<p>Basically do whatever you want, and if you make something way better\nbased on this, lemme know.</p>\n<p>Copyright (C) 2010 Brandon W Maister <a href=\"mailto:quodlibetor%40gmail.com\">quodlibetor<span>@</span>gmail<span>.</span>com</a></p>\n<p>This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.</p>\n<p>This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.</p>\n<p>You should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;<a href=\"http://www.gnu.org/licenses/\" rel=\"nofollow\">http://www.gnu.org/licenses/</a>&gt;.</p>\n</div>\n\n          </div>"}, "last_serial": 745243, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1658f5d3fc728e4e428a6f215bcb673e", "sha256": "5d907e9d91e1b0e9078a7b1e83b75d86873392f188664863fc04e4b0ee9c73dd"}, "downloads": -1, "filename": "zipls-0.1.tar.gz", "has_sig": false, "md5_digest": "1658f5d3fc728e4e428a6f215bcb673e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20305, "upload_time": "2010-12-23T20:01:08", "upload_time_iso_8601": "2010-12-23T20:01:08.547531Z", "url": "https://files.pythonhosted.org/packages/a2/bd/6e5e67f6475bc84995c3a738d693099d32210b0eb4d2b014806059e53561/zipls-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "99643d22863235b6af907b124c85b130", "sha256": "0677628a8ba7caec273766e3bf48eddcd734073284f3a23d4200a5a4f96f7e86"}, "downloads": -1, "filename": "zipls-0.2.tar.gz", "has_sig": false, "md5_digest": "99643d22863235b6af907b124c85b130", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26095, "upload_time": "2011-01-23T01:54:00", "upload_time_iso_8601": "2011-01-23T01:54:00.019109Z", "url": "https://files.pythonhosted.org/packages/6a/5b/b053cf48499de2812aafde2328243f2b0b25c37a017c86c4fdcca478fe95/zipls-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "99643d22863235b6af907b124c85b130", "sha256": "0677628a8ba7caec273766e3bf48eddcd734073284f3a23d4200a5a4f96f7e86"}, "downloads": -1, "filename": "zipls-0.2.tar.gz", "has_sig": false, "md5_digest": "99643d22863235b6af907b124c85b130", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26095, "upload_time": "2011-01-23T01:54:00", "upload_time_iso_8601": "2011-01-23T01:54:00.019109Z", "url": "https://files.pythonhosted.org/packages/6a/5b/b053cf48499de2812aafde2328243f2b0b25c37a017c86c4fdcca478fe95/zipls-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:57 2020"}