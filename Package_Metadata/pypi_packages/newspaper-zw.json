{"info": {"author": "Donald Chinhuru", "author_email": "donychinhuru@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# zim-newspaper\nlibrary to get newspaper, news from zim leading news providers\n\n### Example\n``` py\nfrom newspaperzw.Provider import Providers\nfrom newspaperzw.news import News\n\n# add your favourite news source so as to use its name only when getting news data\np = Providers(provider={'techzim': 'https://www.techzim.co.zw/'})\n\n# get all preset news sources and url\nall = Providers().getAll()\n\ntry:\n  # get data from news site by name, default = `herald`\n  api       = News(provider='techzim')\n  news_data =  api.paper()\n\n  # return dict with all news data, best to use `prettyprinter`\n  print(new_data)\n\nexcept Exception as e:\n  print(\"There was a problem: \", e)\n```\n\n## Get summary of article\n- to get summary through NLP function, ```nltk``` is needed as dependent\n- this returns same results as above but with a summary attribute that contains a summary of the article\n\n```py\nfrom newspaperzw.Provider import Providers\nfrom newspaperzw.news import News\n\ntry:\n  # get data from news site by name, default = `herald`\n  api       = News(provider='techzim', summary=True)\n  news_data =  api.paper()\n\n  # return dict with all news data, best to use `prettyprinter`\n  print(new_data)\n\nexcept Exception as e:\n  print(\"There was a problem: \", e)\n```\n\n### NEW! \n#### added flag to set or disable cache \n```py\n# __version__1.1.0\n\nfrom newspaperzw.Provider import Providers\nfrom newspaperzw.news import News\n\n'''\n\tget a summary of the article from each article through the `summary=True` flag\n\tavoid cache memory by disabling it through the `cache=False` flag\n\tif cache is True, it will not return news previously downloaded on previous runs\n'''\n\ntry:\n  # get data from news site by name, default = `herald`\n  api       = News(provider='techzim', summary=True, cache=False)\n  news_data =  api.paper()\n\n  # return dict with all news data, best to use `prettyprinter`\n  print(new_data)\n\nexcept Exception as e:\n  print(\"There was a problem: \", e)\n```\n\n## TODO\n- library scrapes all available data that it encounters, need to narrow it down by date/month/year\n- start from `today` up to any news obtained from `last year`\n- improve speed\n- disble logging\n- date published\n\n- log files need to be deleted in case they occupy signficant space on disk\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DonnC/zim-newspaper", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "newspaper-zw", "package_url": "https://pypi.org/project/newspaper-zw/", "platform": "", "project_url": "https://pypi.org/project/newspaper-zw/", "project_urls": {"Homepage": "https://github.com/DonnC/zim-newspaper"}, "release_url": "https://pypi.org/project/newspaper-zw/1.1.0/", "requires_dist": ["newspaper3k", "nltk"], "requires_python": "", "summary": "get newspaper from online leading Zimbabwe content providers", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>zim-newspaper</h1>\n<p>library to get newspaper, news from zim leading news providers</p>\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">newspaperzw.Provider</span> <span class=\"kn\">import</span> <span class=\"n\">Providers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">newspaperzw.news</span> <span class=\"kn\">import</span> <span class=\"n\">News</span>\n\n<span class=\"c1\"># add your favourite news source so as to use its name only when getting news data</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Providers</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'techzim'</span><span class=\"p\">:</span> <span class=\"s1\">'https://www.techzim.co.zw/'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># get all preset news sources and url</span>\n<span class=\"nb\">all</span> <span class=\"o\">=</span> <span class=\"n\">Providers</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">getAll</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"c1\"># get data from news site by name, default = `herald`</span>\n  <span class=\"n\">api</span>       <span class=\"o\">=</span> <span class=\"n\">News</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"s1\">'techzim'</span><span class=\"p\">)</span>\n  <span class=\"n\">news_data</span> <span class=\"o\">=</span>  <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">paper</span><span class=\"p\">()</span>\n\n  <span class=\"c1\"># return dict with all news data, best to use `prettyprinter`</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_data</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"There was a problem: \"</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<h2>Get summary of article</h2>\n<ul>\n<li>to get summary through NLP function, <code>nltk</code> is needed as dependent</li>\n<li>this returns same results as above but with a summary attribute that contains a summary of the article</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">newspaperzw.Provider</span> <span class=\"kn\">import</span> <span class=\"n\">Providers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">newspaperzw.news</span> <span class=\"kn\">import</span> <span class=\"n\">News</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"c1\"># get data from news site by name, default = `herald`</span>\n  <span class=\"n\">api</span>       <span class=\"o\">=</span> <span class=\"n\">News</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"s1\">'techzim'</span><span class=\"p\">,</span> <span class=\"n\">summary</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n  <span class=\"n\">news_data</span> <span class=\"o\">=</span>  <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">paper</span><span class=\"p\">()</span>\n\n  <span class=\"c1\"># return dict with all news data, best to use `prettyprinter`</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_data</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"There was a problem: \"</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<h3>NEW!</h3>\n<h4>added flag to set or disable cache</h4>\n<pre><span class=\"c1\"># __version__1.1.0</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">newspaperzw.Provider</span> <span class=\"kn\">import</span> <span class=\"n\">Providers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">newspaperzw.news</span> <span class=\"kn\">import</span> <span class=\"n\">News</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">\tget a summary of the article from each article through the `summary=True` flag</span>\n<span class=\"sd\">\tavoid cache memory by disabling it through the `cache=False` flag</span>\n<span class=\"sd\">\tif cache is True, it will not return news previously downloaded on previous runs</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"c1\"># get data from news site by name, default = `herald`</span>\n  <span class=\"n\">api</span>       <span class=\"o\">=</span> <span class=\"n\">News</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"s1\">'techzim'</span><span class=\"p\">,</span> <span class=\"n\">summary</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n  <span class=\"n\">news_data</span> <span class=\"o\">=</span>  <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">paper</span><span class=\"p\">()</span>\n\n  <span class=\"c1\"># return dict with all news data, best to use `prettyprinter`</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_data</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"There was a problem: \"</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<h2>TODO</h2>\n<ul>\n<li>\n<p>library scrapes all available data that it encounters, need to narrow it down by date/month/year</p>\n</li>\n<li>\n<p>start from <code>today</code> up to any news obtained from <code>last year</code></p>\n</li>\n<li>\n<p>improve speed</p>\n</li>\n<li>\n<p>disble logging</p>\n</li>\n<li>\n<p>date published</p>\n</li>\n<li>\n<p>log files need to be deleted in case they occupy signficant space on disk</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6158868, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "cef1e3a97a20dec69f91164bbca7975e", "sha256": "78c383075932773a33437e4d1d283a5d5e9e4afdbf99e717d0445c2ee4de1fec"}, "downloads": -1, "filename": "newspaper-zw-1.0.0.tar.gz", "has_sig": false, "md5_digest": "cef1e3a97a20dec69f91164bbca7975e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3231, "upload_time": "2019-11-18T21:36:29", "upload_time_iso_8601": "2019-11-18T21:36:29.695781Z", "url": "https://files.pythonhosted.org/packages/4d/b5/0d3c4eb4efeb788160e276f598504d1a86b40de5590f8ae45dba8188a69e/newspaper-zw-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "a2938e66b559dfd9617d3ce595cbc028", "sha256": "74d4f810c9b84ebe701475a5d3a29b96f540da40e976c5aa464437d9aaf8b22a"}, "downloads": -1, "filename": "newspaper_zw-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a2938e66b559dfd9617d3ce595cbc028", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5621, "upload_time": "2019-11-18T23:11:44", "upload_time_iso_8601": "2019-11-18T23:11:44.105847Z", "url": "https://files.pythonhosted.org/packages/b9/04/00a3759cb19177b7f4c41fa502462d24acacf7be098a1339ac7df8744bee/newspaper_zw-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2735cdb106ee4a9700aa138a4d063b0", "sha256": "62544ce3acdc363f894233a4fc5ba261521232bd1e320cb4d10fcc61593e4deb"}, "downloads": -1, "filename": "newspaper-zw-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b2735cdb106ee4a9700aa138a4d063b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4121, "upload_time": "2019-11-18T23:11:47", "upload_time_iso_8601": "2019-11-18T23:11:47.142513Z", "url": "https://files.pythonhosted.org/packages/ff/04/3c29b41fee17ab2f6e3167b1c736b2728adccf76492941cc9908ee55658a/newspaper-zw-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a2938e66b559dfd9617d3ce595cbc028", "sha256": "74d4f810c9b84ebe701475a5d3a29b96f540da40e976c5aa464437d9aaf8b22a"}, "downloads": -1, "filename": "newspaper_zw-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a2938e66b559dfd9617d3ce595cbc028", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5621, "upload_time": "2019-11-18T23:11:44", "upload_time_iso_8601": "2019-11-18T23:11:44.105847Z", "url": "https://files.pythonhosted.org/packages/b9/04/00a3759cb19177b7f4c41fa502462d24acacf7be098a1339ac7df8744bee/newspaper_zw-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2735cdb106ee4a9700aa138a4d063b0", "sha256": "62544ce3acdc363f894233a4fc5ba261521232bd1e320cb4d10fcc61593e4deb"}, "downloads": -1, "filename": "newspaper-zw-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b2735cdb106ee4a9700aa138a4d063b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4121, "upload_time": "2019-11-18T23:11:47", "upload_time_iso_8601": "2019-11-18T23:11:47.142513Z", "url": "https://files.pythonhosted.org/packages/ff/04/3c29b41fee17ab2f6e3167b1c736b2728adccf76492941cc9908ee55658a/newspaper-zw-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:38 2020"}