{"info": {"author": "Smartcar", "author_email": "hello@smartcar.com", "bugtrack_url": null, "classifiers": [], "description": "# Smartcar Python Backend SDK [![Build Status][ci-image]][ci-url] [![PyPI version][pypi-image]][pypi-url]\n\n## Overview\n\nThe [Smartcar API](https://smartcar.com/docs) lets you read vehicle data (location, odometer) and send commands to vehicles (lock, unlock) to connected vehicles using HTTP requests.\n\nTo make requests to a vehicle a web or mobile application, the end user must connect their vehicle using [Smartcar Connect](https://smartcar.com/docs/api#authorization).\n\nBefore integrating with Python SDK, you'll need to register an application in the [Smartcar Developer portal](https://dashboard.smartcar.com). Once you have registered an application, you will have a Client ID and Client Secret, which will allow you to authorize users.\n\n## Installation\n```\npip install smartcar\n```\n\n## Overall Usage\n\nNow that you have your id, secret and redirect URI, here's a simple overall idea of how to use the SDK to authenticate and make requests with the Smartcar API.\n\n* Import the sdk `import smartcar`\n* Create a new smartcar `client` with `smartcar.AuthClient(client_id, client_secret, redirect_uri, scope, test_mode)`\n* Redirect the user to an OEM login page using the URL from `client.get_auth_url()`\n* The user will login, and then accept or deny the permissions in your `scope`\n    * If the user is already connected to your application, they will not be shown the accept or deny dialog. However the application can force this dialog to be shown with `client.get_auth_url(force=True)`\n    * If the user accepts, they will be redirected to your `redirect_uri`. The query field `code` will contain an authorization code. This is *very* important, so save it for later.\n    * If the user denies, the query field `code` will equal `\"access_denied\"`, so you should handle this somehow.\n\n* With your authorization code in hand, use `client.exchange_code(authorization_code)` to exchange your authorization code for an **access object**. This access object will look like this:\n\n```json\n{\n  \"access_token\": \"...\",\n  \"token_type\": \"Bearer\",\n  \"expiration\": \"2018-05-02T18:04:25+00:00\",\n  \"refresh_token\": \"...\",\n  \"refresh_expiration\": \"2018-06-02T18:03:25+00:00\",\n  \"expires_in\": \"...\"\n}\n```\n\n* To make any vehicle data request to the Smartcar API, you'll need to give the SDK a valid **access token**. Access tokens will expire every 2 hours, so you'll need to constantly refresh them. To check if an access object is expired, use `smartcar.is_expired(access['expiration'])`.\n\n* It was pretty hard getting that first access token, but from now on it's easy! Calling `client.exchange_refresh_token(refresh_token)` will return a new access object using a previous access object's **refresh token**. This means you can always have a fresh access token, by doing something like this:\n\n```python\ndef get_fresh_access():\n    access = load_access_from_database()\n    if smartcar.is_expired(access['expiration']):\n        new_access = client.exchange_refresh_token(access['refresh_token'])\n        put_access_into_database(new_access)\n        return new_access\n    else:\n        return access\n\nfresh_access_token = get_fresh_access()['access_token']\n```\n\n* With your fresh access token in hand, use `smartcar.get_vehicle_ids(access_token)` to get a list of the user's vehicles. The response will look like this:\n\n```json\n{\n  \"vehicles\": [\n    \"uuid-of-first-vehicle\",\n    \"...\",\n    \"uuid-of-nth-vehicle\"\n  ],\n  \"paging\": {\n    \"count\": 10,\n    \"offset\": 0\n  }\n}\n```\n\n* Now with a **vehicle id** in hand, use `smartcar.Vehicle(vehicle_id, access_token)` to get a Vehicle object representing the user's vehicle.\n\n* Now you can ask the car to do things, or ask it for some data! For example:\n\n```python\nvehicle = smartcar.Vehicle(vehicle_id, access_token)\nodometer = vehicle.odometer()['data']['distance']\n```\n\n* For a lot more examples on everything you can do with a car, see the [smartcar developer docs](https://smartcar.com/docs)\n\n## Handling Exceptions\n\n* Any time you make a request to the Smartcar API, something can go wrong. This means that you *really* should wrap each call to `client.exchange_code`, `client.exchange_refresh_token`, `client.get_vehicle_ids`, and any vehicle method with some exception handling code.\n\n* Fortunately for you, we've made this as easy as we can! Whenever a request through the SDK returns a non 200 status code, the SDK will throw a nicely named exception for you to handle.\n\n|status code|exception name|\n|:-----------:|--------------|\n|400|smartcar.ValidationException|\n|401|smartcar.AuthenticationException|\n|403|smartcar.PermissionException|\n|404|smartcar.ResourceNotFoundException|\n|409|smartcar.StateException|\n|429|smartcar.RateLimitingException|\n|430|smartcar.MonthlyLimitExceeded|\n|500|smartcar.ServerException|\n|501|smartcar.VehicleNotCapableException|\n|501|smartcar.SmartcarNotCapableException|\n|504|smartcar.GatewayTimeoutException|\n\nCheckout our [Errors documentation][errors] to learn more.\n\n## AuthClient\n\n### `smartcar.AuthClient(self, client_id, client_secret, redirect_uri, scope=None, test_mode=False)`\n\nA client for accessing the Smartcar API\n\n#### Arguments:\n| Parameter       | Type | Required | Description   |\n|:--------------- |:---|:---|:------------- |\n| `client_id`     | String |**Required** | Application clientId obtained from [Smartcar Developer Portal](https://dashboard.smartcar.com). |\n| `client_secret` | String |**Required** | Application clientSecret obtained from [Smartcar Developer Portal](https://dashboard.smartcar.com). |\n| `redirect_uri`  | String |**Required** | RedirectURI set in [application settings](https://dashboard.smartcar.com/apps). Given URL must match URL in application settings. |\n| `scope`         | String[] |**Optional** | List of permissions your application requires. This will default to requiring all scopes. The valid permission names are found in the [API Reference](https://smartcar.com/docs/api#get-all-vehicles). |\n| `test_mode`   | Boolean |**Optional** | Launch the Smartcar Connect in test mode. |\n\n### `get_auth_url(self, force=False, state=None, vehicle_info=None)`\n\nGenerate the Connect URL\n\n#### Arguments\n| Parameter       | Type | Required | Description   |\n|:--------------- |:---|:---|:------------- |\n| `force`   | Boolean |**Optional** | Setting `forcePrompt` to `true` will show the permissions approval screen on every authentication attempt, even if the user has previously consented to the exact scope of permissions. |\n| `state`         | String |**Optional** | OAuth state parameter passed to the redirectUri. This parameter may be used for identifying the user who initiated the request. |\n| `vehicle_info['make']`  | String |**Optional** | Including the dict `vehicle_info` with a `make` property allows users to bypass the car brand selection screen. For a complete list of supported makes, please see our [API Reference](https://smartcar.com/docs/api#authorization) documentation. Makes are case-insensitive. |\n| `single_select` | Boolean or Dictionary | **Optional** | An optional value that sets the behavior of the grant dialog displayed to the user. If set to `true`, `single_select` limits the user to selecting only one vehicle. See the [Single Select guide](https://smartcar.com/docs/guides/single-select/) for more information.\n| `single_select.vin` | String | **Optional** | The VIN (Vehicle Identifier Number) of a vehicle. By passing in `single_select` as a dict with a `vin` property, the single select behavior will be turned on and Smartcar will authorize only the vehicle with the specified VIN. The `single_select_vin` takes precedence over the `make` parameter. Please refer to the [Single Select guide](https://smartcar.com/docs/guides/single-select/).\n\n#### Return\n| Type             | Description         |\n|:---------------- |:--------------------|\n| String           | Smartcar Connect URL |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n#### Example\n```\n'https://connect.smartcar.com/oauth/authorize?response_type=token...'\n```\n\n### `exchange_code(code)`\n\nExchange an authorization code for an access dictionary\n\n#### Arguments\n| Parameter       | Type | Description   |\n|:--------------- |:---|:------------- |\n| `code`         | String |Authorization code to exchange with Smartcar for an `access_token`. |\n\n#### Return\n| Type                            | Description         |\n|:------------------------------- |:--------------------|\n| Dictionary                      | Dictionary containing the access and refresh token |\n| Dictionary.`access_token`       | A string representing an access token used to make requests to the Smartcar API. |\n| Dictionary.`expiration`         | A datetime of the expiration of the access_token |\n| Dictionary.`refresh_token`      | A string representing a refresh token, which is used to renew access when the current access token expires. The refresh token expires in 60 days. |\n| Dictionary.`refresh_expiration` | A datetime of the expiration of the refresh_token |\n| Dictionary.`token_type`         | Always set to  Bearer . Token type is used in forming the Authorization header used by the Smartcar API in the following step. |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `exchange_refresh_token(token)`\n\nExchange a refresh token for a new access dictionary\n\n#### Arguments\n| Parameter       | Type | Description   |\n|:--------------- |:---|:------------- |\n| `token`         | String |Refresh token to exchange with Smartcar for an `access_token`. |\n\n#### Return\n| Type                            | Description         |\n|:------------------------------- |:--------------------|\n| Dictionary                      | Dictionary containing the access and refresh token |\n| Dictionary.`access_token`       | A string representing an access token used to make requests to the Smartcar API. |\n| Dictionary.`expiration`         | A datetime of the expiration of the access_token |\n| Dictionary.`refresh_token`      | A string representing a refresh token, which is used to renew access when the current access token expires. The refresh token expires in 60 days. |\n| Dictionary.`refresh_expiration` | A datetime of the expiration of the refresh_token |\n| Dictionary.`token_type`         | Always set to  Bearer . Token type is used in forming the Authorization header used by the Smartcar API in the following step. |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `is_compatible(vin, scope)`\n\nDetermine vehicle compatibility with Smartcar.\n\nA compatible vehicle is a vehicle that:\n1. has the hardware required for internet connectivity,\n2. belongs to the makes and models Smartcar supports, and\n3. supports the permissions.\n\n_To use this function, please contact us!_\n\n#### Arguments\n| Parameter       | Type | Required | Description   |\n|:--------------- |:---|:---|:------------- |\n| `vin`         | String | **Required** | The VIN of the vehicle. |\n| `scope`       | String[] | **Required** | The list of permissions to check compatibility for. Valid permission names are found in the [API Reference](https://smartcar.com/docs/api#get-all-vehicles).\n\n#### Return\n| Type                            | Description         |\n|:------------------------------- |:--------------------|\n| Boolean                         | `False` if the vehicle is NOT compatible. `True` if the vehicle is _likely_ compatible.* |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n**\\*Note:** as we are only using the VIN, we can only guarantee if a vehicle is NOT compatible with the platform.\n\n## Vehicle\n\nAfter receiving an `access_token` from the Smartcar Connect, your application may make\nrequests to the vehicle using the `access_token` and the `Vehicle` class.\n\n### `smartcar.Vehicle(self, vehicle_id, access_token, unit_system='metric')`\n\nInitializes a new Vehicle to use for making requests to the Smartcar API.\n\n#### Arguments\n| Parameter       | Type | Required | Description   |\n|:--------------- |:---|:---|:------------- |\n| `vehicle_id`    | String | **Required** | the vehicle's unique identifier |\n| `access_token`  | String | **Required** | a valid access token |\n| `unit_system`   | String | **Optional** | the unit system to use for vehicle data. Defaults to metric. |\n\n### `set_unit_system(self, unit_system)`\n\nUpdate the unit system to use in requests to the Smartcar API.\n\n#### Arguments\n| Parameter       | Type | Description   |\n|:--------------- |:---- |:------------- |\n| `unit_system`          | String | the unit system to use (metric/imperial) |\n\n### `permissions(self)`\n\nReturns a paged list of all permissions currently associated with this vehicle.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| String[]       | \tAn array of permissions. |\n\n### `has_permissions(self, permissions)`\n\nReturns whether the vehicle contains specified permission(s).\n\n#### Arguments\n| Parameter       | Type |  Description   |\n|:--------------- |:---|:------------- |\n| `permissions`         | String[] or String | The permission(s) to check. |\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Boolean      | Whether the vehicle has the specified permission(s). |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `info(self)`\n\nReturns a single vehicle object, containing identifying information.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary         | vehicle's info |\n| Dictionary.`id`    | A vehicle ID (UUID v4). |\n| Dictionary.`make`  | The manufacturer of the vehicle. |\n| Dictionary.`model` | The model of the vehicle. |\n| Dictionary.`year`  | The model year. |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `vin(self)`\n\nReturns the vehicle's manufacturer identifier.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| String             | The manufacturer unique identifier. |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `location(self)`\n\nReturns the location of the vehicle in geographic coordinates.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary         | vehicle's location  |\n| Dictionary.`data`.`latitude`  | The latitude (in degrees). |\n| Dictionary.`data`.`longitude` | The longitude (in degrees). |\n| Dictionary.`age`   | A datetime for the age of the data |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `odometer(self)`\n\nReturns the vehicle's current odometer reading.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary         | vehicle's odometer (in kms or miles). To set unit, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system). |\n| Dictionary.`data`.`distance`  | The current odometer of the vehicle |\n| Dictionary.`unit_system` | the unit system of the odometer data. To set, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system). |\n| Dictionary.`age`   | A datetime for the age of the data |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `fuel(self)`\n\nReturns the vehicle's fuel status.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary         | vehicle's fuel status  |\n| Dictionary.`data.range`  | The estimated remaining distance the car can travel (in kms or miles). To set unit, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system). |\n| Dictionary.`data.percentRemaining`  | The remaining level of fuel in the tank (in percent) |\n| Dictionary.`data.amountRemaining`  | The amount of fuel in the tank (in liters or gallons (US)). To set unit, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system). |\n| Dictionary.`unit_system` | the unit system of the fuel data. To set, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system).|\n| Dictionary.`age`   | A datetime for the age of the data |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `battery(self)`\n\nReturns the vehicle's battery status.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary         | vehicle's battery status  |\n| Dictionary.`data.range`  | The estimated remaining distance the car can travel (in kms or miles). To set unit, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system). |\n| Dictionary.`data.percentRemaining`  | The remaining level of charge in the battery (in percent) |\n| Dictionary.`unit_system` | the unit system of the battery data. To set, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system). |\n| Dictionary.`age`   | A datetime for the age of the data |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `charge(self)`\n\nReturns the vehicle's charge status.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary         | vehicle's charge status  |\n| Dictionary.`data.isPluggedIn`  | Indicates whether charging cable is plugged in |\n| Dictionary.`data.state`  | Indicates the current state of the charge system. Can be `FULLY_CHARGED`, `CHARGING`, or `NOT_CHARGING` |\n| Dictionary.`age`   | A datetime for the age of the data |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `oil(self)`\n\nReturns the vehicle's oil status.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary         | vehicle's oil status  |\n| Dictionary.`data.lifeRemaining`  | The engine oil's remaining life span (as a percentage). Oil life is based on the current quality of the oil. |\n| Dictionary.`age`   | A datetime for the age of the data |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `tirePressure(self)`\n\nReturns the vehicle's tire pressure status.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary         | vehicle's tire pressure status  |\n| Dictionary.`data.tires`         | Information about the pressure of each tire.  |\n| Dictionary.`data.tires.frontLeft`  | The current air pressure of the front left tire (in psi or kpa). To set unit, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system). |\n| Dictionary.`data.tires.fronRight`  | The current air pressure of the front right tire (in psi or kpa). To set unit, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system). |\n| Dictionary.`data.tires.backLeft`  | The current air pressure of the back left tire (in psi or kpa). To set unit, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system). |\n| Dictionary.`data.tires.backRight`  | The current air pressure of the back right tire (in psi or kpa). To set unit, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system). |\n| Dictionary.`unit_system` | the unit system of the fuel data. To set, see [setUnitSystem](https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system).|\n| Dictionary.`age`   | A datetime for the age of the data |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `disconnect(self)`\n\nDisconnect this vehicle from the connected application.\n\n#### Raises\n<code>SmartcarException</code> - on unsuccessful request. See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\nNote: Calling this method will invalidate your access token and you will\nhave to have the user reauthorize the vehicle to your application if you\nwish to make requests to it\n\n### `unlock(self)`\n\nUnlock the vehicle.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary.`status`| Set to success on successful request. |\n\n#### Raises\n<code>SmartcarException</code> on unsuccessful request\n\n### `lock(self)`\n\nLock the vehicle.\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary.`status`| Set to success on successful request. |\n\n#### Raises\n<code>SmartcarException</code> - on unsuccessful request. See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `batch(self, paths)`\n\nMake a batch request to the vehicle. WARNING: This feature is exclusive to [Smartcar Pro](https://smartcar.com/pricing/) members. Visit https://smartcar.com/pricing to sign up and gain access.\n\n#### Arguments\n| Parameter       | Type | Description   |\n|:--------------- |:---|:------------- |\n| `paths`    | List | A list of paths (i.e. `\"/odometer\"`) to request data from. |\n\n\n#### Return\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary | An object containing the responses. The keys to this object are requested paths. |\n| Dictionary.`/`| The response from the Vehicle Info endpoint.  |\n| Dictionary.`/vin`| The response from the VIN endpoint.  |\n| Dictionary.`/odometer`| The response from the Odometer endpoint.  |\n| Dictionary.`/fuel`|  The response from the Fuel tank endpoint.  |\n| Dictionary.`/engine/oil`| The response from the Engine oil life endpoint.  |\n| Dictionary.`/tires/pressure`| The response from the Tire pressure endpoint.  |\n| Dictionary.`/battery`| The response from the EV battery endpoint. |\n| Dictionary.`/charge`| The response from the EV charge endpoint.  |\n| Dictionary.`/location`|  The response from the Location endpoint.  |\n| Dictionary.`/ENDPOINT`.`code`| The HTTP response code from the response.  |\n| Dictionary.`/ENDPOINT`.`body`| The response body.  |\n| Dictionary.`/ENDPOINT`.`headers`| The response headers.  |\n| Dictionary.`/ENDPOINT`.`headers`.`sc-data-age`| The timestamp of when the data was last updated.  |\n| Dictionary.`/ENDPOINT`.`headers`.`sc-unit-system`| The unit system for this response (metric/imperial).  |\n\n#### Example Response\n\n```json\n{\n  \"/odometer\" : {\n      \"body\": {\n        \"distance\": 37829\n      },\n      \"code\": 200,\n      \"headers\": {\n        \"sc-data-age\": \"2019-10-24T00:43:46.000Z\",\n        \"sc-unit-system\": \"metric\"\n      }\n  },\n  \"/location\" : {\n      \"body\": {\n        \"latitude\": 37.4292,\n        \"longitude\": 122.1381\n      },\n      \"code\": 200,\n      \"headers\": {\n        \"sc-data-age\": \"2019-10-24T00:43:46.000Z\"\n      }\n  }\n}\n```\n\n#### Raises\n<code>SmartcarException</code> - on unsuccessful request. See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n\n## Static Methods\n\n### `smartcar.is_expired(expiration)`\n\nCheck if an expiration is expired\n\n#### Arguments\n| Parameter       | Type | Description   |\n|:--------------- |:---|:------------- |\n| `expiration`    | DateTime | expiration datetime |\n\n#### Returns\n\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Boolean            | true if expired     |\n\n### `smartcar.get_vehicle_ids(access_token, limit=10, offset=0)`\n\nGet a list of the user's vehicle ids\n\n#### Arguments\n| Parameter       | Type | Required | Description   |\n|:--------------- |:---|:---|:------------- |\n| `access_token`    | String | **Required** | A valid access token from a previously retrieved access object |\n| `limit`    | Integer | **Optional** | The number of vehicle ids to return |\n| `offset`    | Integer | **Optional** | The index to start the vehicle list at |\n\n#### Returns\n| Type               | Description         |\n|:------------------ |:--------------------|\n| Dictionary            | response containing the list of vehicle ids and paging information  |\n| Dictionary.`vehicles` | An array of vehicle IDs. |\n| Dictionary.`paging`.`count` | The total number of elements for the entire query (not just the given page). |\n| Dictionary.`paging`.`offset` | The current start index of the returned list of elements. |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n### `smartcar.get_user_id(access_token)`\n\n Retrieve the userId associated with the access_token\n\n#### Arguments\n| Parameter       | Type | Description   |\n|:--------------- |:---|:------------- |\n| `access_token`    | String | A valid access token from a previously retrieved access object |\n\n#### Returns\n| Type               | Description         |\n|:------------------ |:--------------------|\n| String             | the user id |\n\n#### Raises\n<code>SmartcarException</code> - See the [exceptions section](https://github.com/smartcar/python-sdk#handling-exceptions) for all possible exceptions.\n\n[ci-url]: https://travis-ci.com/smartcar/python-sdk\n[ci-image]: https://travis-ci.com/smartcar/python-sdk.svg?token=FcsopC3DdDmqUpnZsrwg&branch=master\n[pypi-url]: https://badge.fury.io/py/smartcar\n[pypi-image]: https://badge.fury.io/py/smartcar.svg\n[errors]: https://smartcar.com/docs/api#errors", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/smartcar/python-sdk", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "smartcar", "package_url": "https://pypi.org/project/smartcar/", "platform": "", "project_url": "https://pypi.org/project/smartcar/", "project_urls": {"Homepage": "https://github.com/smartcar/python-sdk"}, "release_url": "https://pypi.org/project/smartcar/4.2.4/", "requires_dist": null, "requires_python": "", "summary": "Smartcar Python SDK", "version": "4.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Smartcar Python Backend SDK <a href=\"https://travis-ci.com/smartcar/python-sdk\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b27b2449f4b9740ec519027a1f1891aeb8cdfaac/68747470733a2f2f7472617669732d63692e636f6d2f736d6172746361722f707974686f6e2d73646b2e7376673f746f6b656e3d4663736f7043334464446d7155706e5a73727767266272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/smartcar\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef5f973818272ddb9c4bc03871c17924bf078091/68747470733a2f2f62616467652e667572792e696f2f70792f736d6172746361722e737667\"></a></h1>\n<h2>Overview</h2>\n<p>The <a href=\"https://smartcar.com/docs\" rel=\"nofollow\">Smartcar API</a> lets you read vehicle data (location, odometer) and send commands to vehicles (lock, unlock) to connected vehicles using HTTP requests.</p>\n<p>To make requests to a vehicle a web or mobile application, the end user must connect their vehicle using <a href=\"https://smartcar.com/docs/api#authorization\" rel=\"nofollow\">Smartcar Connect</a>.</p>\n<p>Before integrating with Python SDK, you'll need to register an application in the <a href=\"https://dashboard.smartcar.com\" rel=\"nofollow\">Smartcar Developer portal</a>. Once you have registered an application, you will have a Client ID and Client Secret, which will allow you to authorize users.</p>\n<h2>Installation</h2>\n<pre><code>pip install smartcar\n</code></pre>\n<h2>Overall Usage</h2>\n<p>Now that you have your id, secret and redirect URI, here's a simple overall idea of how to use the SDK to authenticate and make requests with the Smartcar API.</p>\n<ul>\n<li>\n<p>Import the sdk <code>import smartcar</code></p>\n</li>\n<li>\n<p>Create a new smartcar <code>client</code> with <code>smartcar.AuthClient(client_id, client_secret, redirect_uri, scope, test_mode)</code></p>\n</li>\n<li>\n<p>Redirect the user to an OEM login page using the URL from <code>client.get_auth_url()</code></p>\n</li>\n<li>\n<p>The user will login, and then accept or deny the permissions in your <code>scope</code></p>\n<ul>\n<li>If the user is already connected to your application, they will not be shown the accept or deny dialog. However the application can force this dialog to be shown with <code>client.get_auth_url(force=True)</code></li>\n<li>If the user accepts, they will be redirected to your <code>redirect_uri</code>. The query field <code>code</code> will contain an authorization code. This is <em>very</em> important, so save it for later.</li>\n<li>If the user denies, the query field <code>code</code> will equal <code>\"access_denied\"</code>, so you should handle this somehow.</li>\n</ul>\n</li>\n<li>\n<p>With your authorization code in hand, use <code>client.exchange_code(authorization_code)</code> to exchange your authorization code for an <strong>access object</strong>. This access object will look like this:</p>\n</li>\n</ul>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"access_token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"...\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"token_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bearer\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"expiration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2018-05-02T18:04:25+00:00\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"refresh_token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"...\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"refresh_expiration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2018-06-02T18:03:25+00:00\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"expires_in\"</span><span class=\"p\">:</span> <span class=\"s2\">\"...\"</span>\n<span class=\"p\">}</span>\n</pre>\n<ul>\n<li>\n<p>To make any vehicle data request to the Smartcar API, you'll need to give the SDK a valid <strong>access token</strong>. Access tokens will expire every 2 hours, so you'll need to constantly refresh them. To check if an access object is expired, use <code>smartcar.is_expired(access['expiration'])</code>.</p>\n</li>\n<li>\n<p>It was pretty hard getting that first access token, but from now on it's easy! Calling <code>client.exchange_refresh_token(refresh_token)</code> will return a new access object using a previous access object's <strong>refresh token</strong>. This means you can always have a fresh access token, by doing something like this:</p>\n</li>\n</ul>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_fresh_access</span><span class=\"p\">():</span>\n    <span class=\"n\">access</span> <span class=\"o\">=</span> <span class=\"n\">load_access_from_database</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">smartcar</span><span class=\"o\">.</span><span class=\"n\">is_expired</span><span class=\"p\">(</span><span class=\"n\">access</span><span class=\"p\">[</span><span class=\"s1\">'expiration'</span><span class=\"p\">]):</span>\n        <span class=\"n\">new_access</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">exchange_refresh_token</span><span class=\"p\">(</span><span class=\"n\">access</span><span class=\"p\">[</span><span class=\"s1\">'refresh_token'</span><span class=\"p\">])</span>\n        <span class=\"n\">put_access_into_database</span><span class=\"p\">(</span><span class=\"n\">new_access</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_access</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">access</span>\n\n<span class=\"n\">fresh_access_token</span> <span class=\"o\">=</span> <span class=\"n\">get_fresh_access</span><span class=\"p\">()[</span><span class=\"s1\">'access_token'</span><span class=\"p\">]</span>\n</pre>\n<ul>\n<li>With your fresh access token in hand, use <code>smartcar.get_vehicle_ids(access_token)</code> to get a list of the user's vehicles. The response will look like this:</li>\n</ul>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"vehicles\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"uuid-of-first-vehicle\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"...\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"uuid-of-nth-vehicle\"</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"paging\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"count\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"offset\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<ul>\n<li>\n<p>Now with a <strong>vehicle id</strong> in hand, use <code>smartcar.Vehicle(vehicle_id, access_token)</code> to get a Vehicle object representing the user's vehicle.</p>\n</li>\n<li>\n<p>Now you can ask the car to do things, or ask it for some data! For example:</p>\n</li>\n</ul>\n<pre><span class=\"n\">vehicle</span> <span class=\"o\">=</span> <span class=\"n\">smartcar</span><span class=\"o\">.</span><span class=\"n\">Vehicle</span><span class=\"p\">(</span><span class=\"n\">vehicle_id</span><span class=\"p\">,</span> <span class=\"n\">access_token</span><span class=\"p\">)</span>\n<span class=\"n\">odometer</span> <span class=\"o\">=</span> <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">odometer</span><span class=\"p\">()[</span><span class=\"s1\">'data'</span><span class=\"p\">][</span><span class=\"s1\">'distance'</span><span class=\"p\">]</span>\n</pre>\n<ul>\n<li>For a lot more examples on everything you can do with a car, see the <a href=\"https://smartcar.com/docs\" rel=\"nofollow\">smartcar developer docs</a></li>\n</ul>\n<h2>Handling Exceptions</h2>\n<ul>\n<li>\n<p>Any time you make a request to the Smartcar API, something can go wrong. This means that you <em>really</em> should wrap each call to <code>client.exchange_code</code>, <code>client.exchange_refresh_token</code>, <code>client.get_vehicle_ids</code>, and any vehicle method with some exception handling code.</p>\n</li>\n<li>\n<p>Fortunately for you, we've made this as easy as we can! Whenever a request through the SDK returns a non 200 status code, the SDK will throw a nicely named exception for you to handle.</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">status code</th>\n<th>exception name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">400</td>\n<td>smartcar.ValidationException</td>\n</tr>\n<tr>\n<td align=\"center\">401</td>\n<td>smartcar.AuthenticationException</td>\n</tr>\n<tr>\n<td align=\"center\">403</td>\n<td>smartcar.PermissionException</td>\n</tr>\n<tr>\n<td align=\"center\">404</td>\n<td>smartcar.ResourceNotFoundException</td>\n</tr>\n<tr>\n<td align=\"center\">409</td>\n<td>smartcar.StateException</td>\n</tr>\n<tr>\n<td align=\"center\">429</td>\n<td>smartcar.RateLimitingException</td>\n</tr>\n<tr>\n<td align=\"center\">430</td>\n<td>smartcar.MonthlyLimitExceeded</td>\n</tr>\n<tr>\n<td align=\"center\">500</td>\n<td>smartcar.ServerException</td>\n</tr>\n<tr>\n<td align=\"center\">501</td>\n<td>smartcar.VehicleNotCapableException</td>\n</tr>\n<tr>\n<td align=\"center\">501</td>\n<td>smartcar.SmartcarNotCapableException</td>\n</tr>\n<tr>\n<td align=\"center\">504</td>\n<td>smartcar.GatewayTimeoutException</td>\n</tr></tbody></table>\n<p>Checkout our <a href=\"https://smartcar.com/docs/api#errors\" rel=\"nofollow\">Errors documentation</a> to learn more.</p>\n<h2>AuthClient</h2>\n<h3><code>smartcar.AuthClient(self, client_id, client_secret, redirect_uri, scope=None, test_mode=False)</code></h3>\n<p>A client for accessing the Smartcar API</p>\n<h4>Arguments:</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Required</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>client_id</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Required</strong></td>\n<td align=\"left\">Application clientId obtained from <a href=\"https://dashboard.smartcar.com\" rel=\"nofollow\">Smartcar Developer Portal</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>client_secret</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Required</strong></td>\n<td align=\"left\">Application clientSecret obtained from <a href=\"https://dashboard.smartcar.com\" rel=\"nofollow\">Smartcar Developer Portal</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>redirect_uri</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Required</strong></td>\n<td align=\"left\">RedirectURI set in <a href=\"https://dashboard.smartcar.com/apps\" rel=\"nofollow\">application settings</a>. Given URL must match URL in application settings.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">String[]</td>\n<td align=\"left\"><strong>Optional</strong></td>\n<td align=\"left\">List of permissions your application requires. This will default to requiring all scopes. The valid permission names are found in the <a href=\"https://smartcar.com/docs/api#get-all-vehicles\" rel=\"nofollow\">API Reference</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>test_mode</code></td>\n<td align=\"left\">Boolean</td>\n<td align=\"left\"><strong>Optional</strong></td>\n<td align=\"left\">Launch the Smartcar Connect in test mode.</td>\n</tr></tbody></table>\n<h3><code>get_auth_url(self, force=False, state=None, vehicle_info=None)</code></h3>\n<p>Generate the Connect URL</p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Required</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>force</code></td>\n<td align=\"left\">Boolean</td>\n<td align=\"left\"><strong>Optional</strong></td>\n<td align=\"left\">Setting <code>forcePrompt</code> to <code>true</code> will show the permissions approval screen on every authentication attempt, even if the user has previously consented to the exact scope of permissions.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>state</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Optional</strong></td>\n<td align=\"left\">OAuth state parameter passed to the redirectUri. This parameter may be used for identifying the user who initiated the request.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>vehicle_info['make']</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Optional</strong></td>\n<td align=\"left\">Including the dict <code>vehicle_info</code> with a <code>make</code> property allows users to bypass the car brand selection screen. For a complete list of supported makes, please see our <a href=\"https://smartcar.com/docs/api#authorization\" rel=\"nofollow\">API Reference</a> documentation. Makes are case-insensitive.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>single_select</code></td>\n<td align=\"left\">Boolean or Dictionary</td>\n<td align=\"left\"><strong>Optional</strong></td>\n<td align=\"left\">An optional value that sets the behavior of the grant dialog displayed to the user. If set to <code>true</code>, <code>single_select</code> limits the user to selecting only one vehicle. See the <a href=\"https://smartcar.com/docs/guides/single-select/\" rel=\"nofollow\">Single Select guide</a> for more information.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>single_select.vin</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Optional</strong></td>\n<td align=\"left\">The VIN (Vehicle Identifier Number) of a vehicle. By passing in <code>single_select</code> as a dict with a <code>vin</code> property, the single select behavior will be turned on and Smartcar will authorize only the vehicle with the specified VIN. The <code>single_select_vin</code> takes precedence over the <code>make</code> parameter. Please refer to the <a href=\"https://smartcar.com/docs/guides/single-select/\" rel=\"nofollow\">Single Select guide</a>.</td>\n</tr></tbody></table>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">String</td>\n<td align=\"left\">Smartcar Connect URL</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h4>Example</h4>\n<pre><code>'https://connect.smartcar.com/oauth/authorize?response_type=token...'\n</code></pre>\n<h3><code>exchange_code(code)</code></h3>\n<p>Exchange an authorization code for an access dictionary</p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>code</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\">Authorization code to exchange with Smartcar for an <code>access_token</code>.</td>\n</tr></tbody></table>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">Dictionary containing the access and refresh token</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>access_token</code></td>\n<td align=\"left\">A string representing an access token used to make requests to the Smartcar API.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>expiration</code></td>\n<td align=\"left\">A datetime of the expiration of the access_token</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>refresh_token</code></td>\n<td align=\"left\">A string representing a refresh token, which is used to renew access when the current access token expires. The refresh token expires in 60 days.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>refresh_expiration</code></td>\n<td align=\"left\">A datetime of the expiration of the refresh_token</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>token_type</code></td>\n<td align=\"left\">Always set to  Bearer . Token type is used in forming the Authorization header used by the Smartcar API in the following step.</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>exchange_refresh_token(token)</code></h3>\n<p>Exchange a refresh token for a new access dictionary</p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>token</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\">Refresh token to exchange with Smartcar for an <code>access_token</code>.</td>\n</tr></tbody></table>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">Dictionary containing the access and refresh token</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>access_token</code></td>\n<td align=\"left\">A string representing an access token used to make requests to the Smartcar API.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>expiration</code></td>\n<td align=\"left\">A datetime of the expiration of the access_token</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>refresh_token</code></td>\n<td align=\"left\">A string representing a refresh token, which is used to renew access when the current access token expires. The refresh token expires in 60 days.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>refresh_expiration</code></td>\n<td align=\"left\">A datetime of the expiration of the refresh_token</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>token_type</code></td>\n<td align=\"left\">Always set to  Bearer . Token type is used in forming the Authorization header used by the Smartcar API in the following step.</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>is_compatible(vin, scope)</code></h3>\n<p>Determine vehicle compatibility with Smartcar.</p>\n<p>A compatible vehicle is a vehicle that:</p>\n<ol>\n<li>has the hardware required for internet connectivity,</li>\n<li>belongs to the makes and models Smartcar supports, and</li>\n<li>supports the permissions.</li>\n</ol>\n<p><em>To use this function, please contact us!</em></p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Required</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>vin</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Required</strong></td>\n<td align=\"left\">The VIN of the vehicle.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>scope</code></td>\n<td align=\"left\">String[]</td>\n<td align=\"left\"><strong>Required</strong></td>\n<td align=\"left\">The list of permissions to check compatibility for. Valid permission names are found in the <a href=\"https://smartcar.com/docs/api#get-all-vehicles\" rel=\"nofollow\">API Reference</a>.</td>\n</tr></tbody></table>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Boolean</td>\n<td align=\"left\"><code>False</code> if the vehicle is NOT compatible. <code>True</code> if the vehicle is <em>likely</em> compatible.*</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<p><strong>*Note:</strong> as we are only using the VIN, we can only guarantee if a vehicle is NOT compatible with the platform.</p>\n<h2>Vehicle</h2>\n<p>After receiving an <code>access_token</code> from the Smartcar Connect, your application may make\nrequests to the vehicle using the <code>access_token</code> and the <code>Vehicle</code> class.</p>\n<h3><code>smartcar.Vehicle(self, vehicle_id, access_token, unit_system='metric')</code></h3>\n<p>Initializes a new Vehicle to use for making requests to the Smartcar API.</p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Required</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>vehicle_id</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Required</strong></td>\n<td align=\"left\">the vehicle's unique identifier</td>\n</tr>\n<tr>\n<td align=\"left\"><code>access_token</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Required</strong></td>\n<td align=\"left\">a valid access token</td>\n</tr>\n<tr>\n<td align=\"left\"><code>unit_system</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Optional</strong></td>\n<td align=\"left\">the unit system to use for vehicle data. Defaults to metric.</td>\n</tr></tbody></table>\n<h3><code>set_unit_system(self, unit_system)</code></h3>\n<p>Update the unit system to use in requests to the Smartcar API.</p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>unit_system</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\">the unit system to use (metric/imperial)</td>\n</tr></tbody></table>\n<h3><code>permissions(self)</code></h3>\n<p>Returns a paged list of all permissions currently associated with this vehicle.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">String[]</td>\n<td align=\"left\">An array of permissions.</td>\n</tr></tbody></table>\n<h3><code>has_permissions(self, permissions)</code></h3>\n<p>Returns whether the vehicle contains specified permission(s).</p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>permissions</code></td>\n<td align=\"left\">String[] or String</td>\n<td align=\"left\">The permission(s) to check.</td>\n</tr></tbody></table>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Boolean</td>\n<td align=\"left\">Whether the vehicle has the specified permission(s).</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>info(self)</code></h3>\n<p>Returns a single vehicle object, containing identifying information.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">vehicle's info</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>id</code></td>\n<td align=\"left\">A vehicle ID (UUID v4).</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>make</code></td>\n<td align=\"left\">The manufacturer of the vehicle.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>model</code></td>\n<td align=\"left\">The model of the vehicle.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>year</code></td>\n<td align=\"left\">The model year.</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>vin(self)</code></h3>\n<p>Returns the vehicle's manufacturer identifier.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">String</td>\n<td align=\"left\">The manufacturer unique identifier.</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>location(self)</code></h3>\n<p>Returns the location of the vehicle in geographic coordinates.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">vehicle's location</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data</code>.<code>latitude</code></td>\n<td align=\"left\">The latitude (in degrees).</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data</code>.<code>longitude</code></td>\n<td align=\"left\">The longitude (in degrees).</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>age</code></td>\n<td align=\"left\">A datetime for the age of the data</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>odometer(self)</code></h3>\n<p>Returns the vehicle's current odometer reading.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">vehicle's odometer (in kms or miles). To set unit, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data</code>.<code>distance</code></td>\n<td align=\"left\">The current odometer of the vehicle</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>unit_system</code></td>\n<td align=\"left\">the unit system of the odometer data. To set, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>age</code></td>\n<td align=\"left\">A datetime for the age of the data</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>fuel(self)</code></h3>\n<p>Returns the vehicle's fuel status.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">vehicle's fuel status</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.range</code></td>\n<td align=\"left\">The estimated remaining distance the car can travel (in kms or miles). To set unit, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.percentRemaining</code></td>\n<td align=\"left\">The remaining level of fuel in the tank (in percent)</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.amountRemaining</code></td>\n<td align=\"left\">The amount of fuel in the tank (in liters or gallons (US)). To set unit, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>unit_system</code></td>\n<td align=\"left\">the unit system of the fuel data. To set, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>age</code></td>\n<td align=\"left\">A datetime for the age of the data</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>battery(self)</code></h3>\n<p>Returns the vehicle's battery status.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">vehicle's battery status</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.range</code></td>\n<td align=\"left\">The estimated remaining distance the car can travel (in kms or miles). To set unit, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.percentRemaining</code></td>\n<td align=\"left\">The remaining level of charge in the battery (in percent)</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>unit_system</code></td>\n<td align=\"left\">the unit system of the battery data. To set, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>age</code></td>\n<td align=\"left\">A datetime for the age of the data</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>charge(self)</code></h3>\n<p>Returns the vehicle's charge status.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">vehicle's charge status</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.isPluggedIn</code></td>\n<td align=\"left\">Indicates whether charging cable is plugged in</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.state</code></td>\n<td align=\"left\">Indicates the current state of the charge system. Can be <code>FULLY_CHARGED</code>, <code>CHARGING</code>, or <code>NOT_CHARGING</code></td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>age</code></td>\n<td align=\"left\">A datetime for the age of the data</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>oil(self)</code></h3>\n<p>Returns the vehicle's oil status.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">vehicle's oil status</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.lifeRemaining</code></td>\n<td align=\"left\">The engine oil's remaining life span (as a percentage). Oil life is based on the current quality of the oil.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>age</code></td>\n<td align=\"left\">A datetime for the age of the data</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>tirePressure(self)</code></h3>\n<p>Returns the vehicle's tire pressure status.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">vehicle's tire pressure status</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.tires</code></td>\n<td align=\"left\">Information about the pressure of each tire.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.tires.frontLeft</code></td>\n<td align=\"left\">The current air pressure of the front left tire (in psi or kpa). To set unit, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.tires.fronRight</code></td>\n<td align=\"left\">The current air pressure of the front right tire (in psi or kpa). To set unit, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.tires.backLeft</code></td>\n<td align=\"left\">The current air pressure of the back left tire (in psi or kpa). To set unit, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>data.tires.backRight</code></td>\n<td align=\"left\">The current air pressure of the back right tire (in psi or kpa). To set unit, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>unit_system</code></td>\n<td align=\"left\">the unit system of the fuel data. To set, see <a href=\"https://github.com/smartcar/python-sdk#set_unit_systemself-unit_system\" rel=\"nofollow\">setUnitSystem</a>.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>age</code></td>\n<td align=\"left\">A datetime for the age of the data</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>disconnect(self)</code></h3>\n<p>Disconnect this vehicle from the connected application.</p>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - on unsuccessful request. See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<p>Note: Calling this method will invalidate your access token and you will\nhave to have the user reauthorize the vehicle to your application if you\nwish to make requests to it</p>\n<h3><code>unlock(self)</code></h3>\n<p>Unlock the vehicle.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary.<code>status</code></td>\n<td align=\"left\">Set to success on successful request.</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> on unsuccessful request</p>\n<h3><code>lock(self)</code></h3>\n<p>Lock the vehicle.</p>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary.<code>status</code></td>\n<td align=\"left\">Set to success on successful request.</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - on unsuccessful request. See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>batch(self, paths)</code></h3>\n<p>Make a batch request to the vehicle. WARNING: This feature is exclusive to <a href=\"https://smartcar.com/pricing/\" rel=\"nofollow\">Smartcar Pro</a> members. Visit <a href=\"https://smartcar.com/pricing\" rel=\"nofollow\">https://smartcar.com/pricing</a> to sign up and gain access.</p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>paths</code></td>\n<td align=\"left\">List</td>\n<td align=\"left\">A list of paths (i.e. <code>\"/odometer\"</code>) to request data from.</td>\n</tr></tbody></table>\n<h4>Return</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">An object containing the responses. The keys to this object are requested paths.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/</code></td>\n<td align=\"left\">The response from the Vehicle Info endpoint.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/vin</code></td>\n<td align=\"left\">The response from the VIN endpoint.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/odometer</code></td>\n<td align=\"left\">The response from the Odometer endpoint.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/fuel</code></td>\n<td align=\"left\">The response from the Fuel tank endpoint.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/engine/oil</code></td>\n<td align=\"left\">The response from the Engine oil life endpoint.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/tires/pressure</code></td>\n<td align=\"left\">The response from the Tire pressure endpoint.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/battery</code></td>\n<td align=\"left\">The response from the EV battery endpoint.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/charge</code></td>\n<td align=\"left\">The response from the EV charge endpoint.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/location</code></td>\n<td align=\"left\">The response from the Location endpoint.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/ENDPOINT</code>.<code>code</code></td>\n<td align=\"left\">The HTTP response code from the response.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/ENDPOINT</code>.<code>body</code></td>\n<td align=\"left\">The response body.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/ENDPOINT</code>.<code>headers</code></td>\n<td align=\"left\">The response headers.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/ENDPOINT</code>.<code>headers</code>.<code>sc-data-age</code></td>\n<td align=\"left\">The timestamp of when the data was last updated.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>/ENDPOINT</code>.<code>headers</code>.<code>sc-unit-system</code></td>\n<td align=\"left\">The unit system for this response (metric/imperial).</td>\n</tr></tbody></table>\n<h4>Example Response</h4>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"/odometer\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"body\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"distance\"</span><span class=\"p\">:</span> <span class=\"mi\">37829</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"headers\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"sc-data-age\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-10-24T00:43:46.000Z\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"sc-unit-system\"</span><span class=\"p\">:</span> <span class=\"s2\">\"metric\"</span>\n      <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"/location\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"body\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"latitude\"</span><span class=\"p\">:</span> <span class=\"mf\">37.4292</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"longitude\"</span><span class=\"p\">:</span> <span class=\"mf\">122.1381</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"headers\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"sc-data-age\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-10-24T00:43:46.000Z\"</span>\n      <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - on unsuccessful request. See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h2>Static Methods</h2>\n<h3><code>smartcar.is_expired(expiration)</code></h3>\n<p>Check if an expiration is expired</p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>expiration</code></td>\n<td align=\"left\">DateTime</td>\n<td align=\"left\">expiration datetime</td>\n</tr></tbody></table>\n<h4>Returns</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Boolean</td>\n<td align=\"left\">true if expired</td>\n</tr></tbody></table>\n<h3><code>smartcar.get_vehicle_ids(access_token, limit=10, offset=0)</code></h3>\n<p>Get a list of the user's vehicle ids</p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Required</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>access_token</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\"><strong>Required</strong></td>\n<td align=\"left\">A valid access token from a previously retrieved access object</td>\n</tr>\n<tr>\n<td align=\"left\"><code>limit</code></td>\n<td align=\"left\">Integer</td>\n<td align=\"left\"><strong>Optional</strong></td>\n<td align=\"left\">The number of vehicle ids to return</td>\n</tr>\n<tr>\n<td align=\"left\"><code>offset</code></td>\n<td align=\"left\">Integer</td>\n<td align=\"left\"><strong>Optional</strong></td>\n<td align=\"left\">The index to start the vehicle list at</td>\n</tr></tbody></table>\n<h4>Returns</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Dictionary</td>\n<td align=\"left\">response containing the list of vehicle ids and paging information</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>vehicles</code></td>\n<td align=\"left\">An array of vehicle IDs.</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>paging</code>.<code>count</code></td>\n<td align=\"left\">The total number of elements for the entire query (not just the given page).</td>\n</tr>\n<tr>\n<td align=\"left\">Dictionary.<code>paging</code>.<code>offset</code></td>\n<td align=\"left\">The current start index of the returned list of elements.</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n<h3><code>smartcar.get_user_id(access_token)</code></h3>\n<p>Retrieve the userId associated with the access_token</p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameter</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>access_token</code></td>\n<td align=\"left\">String</td>\n<td align=\"left\">A valid access token from a previously retrieved access object</td>\n</tr></tbody></table>\n<h4>Returns</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">String</td>\n<td align=\"left\">the user id</td>\n</tr></tbody></table>\n<h4>Raises</h4>\n<p><code>SmartcarException</code> - See the <a href=\"https://github.com/smartcar/python-sdk#handling-exceptions\" rel=\"nofollow\">exceptions section</a> for all possible exceptions.</p>\n\n          </div>"}, "last_serial": 6328735, "releases": {"0.0.0": [], "1.0.0": [{"comment_text": "", "digests": {"md5": "933f67196db435ec2e2edb6efa03e3ba", "sha256": "60b0a24b2a530c521d2c79318e12e0fecc6bfbcda41f16d4fed989986b7260d7"}, "downloads": -1, "filename": "smartcar-1.0.0.tar.gz", "has_sig": false, "md5_digest": "933f67196db435ec2e2edb6efa03e3ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7967, "upload_time": "2018-05-02T22:25:52", "upload_time_iso_8601": "2018-05-02T22:25:52.509875Z", "url": "https://files.pythonhosted.org/packages/4a/58/8c700442eb92514361ff03efb6c26c53565a84cac0ca8298f0d65d25d7c8/smartcar-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a8eec89a1031e10c0ef8d253f0547e72", "sha256": "fc38388330c7ffa080fc32603f24bc25931dc76ca4e8819dac6fb5b468c6ab67"}, "downloads": -1, "filename": "smartcar-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a8eec89a1031e10c0ef8d253f0547e72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9966, "upload_time": "2018-05-02T22:55:13", "upload_time_iso_8601": "2018-05-02T22:55:13.053105Z", "url": "https://files.pythonhosted.org/packages/9b/79/2b45b563b252448c98e8f8ae54f102dac0d2fc0e9816dfd4d6b9df40e905/smartcar-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "2749b74219d8814a2b80362cc725799e", "sha256": "8536dd3a54e16322cf55bf22fe3f8f8f12159b49a5e3d0f6bfa2882be46e627f"}, "downloads": -1, "filename": "smartcar-1.0.10.tar.gz", "has_sig": false, "md5_digest": "2749b74219d8814a2b80362cc725799e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9653, "upload_time": "2018-09-14T19:54:14", "upload_time_iso_8601": "2018-09-14T19:54:14.883593Z", "url": "https://files.pythonhosted.org/packages/a3/f2/276a0ea9b3a7acb9aee21959a755d31c43e0d2dc71c0c2ef9ff85b5ab337/smartcar-1.0.10.tar.gz", "yanked": false}], "1.0.11": [{"comment_text": "", "digests": {"md5": "0afca9e8e37282bd62afff85848c96f0", "sha256": "3358d4a3da93eb924432677c5ec7d3b59eb8ac8340aba7d3e36fda66105e9ae1"}, "downloads": -1, "filename": "smartcar-1.0.11.tar.gz", "has_sig": false, "md5_digest": "0afca9e8e37282bd62afff85848c96f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9641, "upload_time": "2018-09-22T20:06:13", "upload_time_iso_8601": "2018-09-22T20:06:13.738454Z", "url": "https://files.pythonhosted.org/packages/7a/41/3c08797a96ee2494cbfe3d100fd74778a6d05c96705a414d41ad12f05489/smartcar-1.0.11.tar.gz", "yanked": false}], "1.0.12": [{"comment_text": "", "digests": {"md5": "ff1a88033a5872988a401c74c7ed5dee", "sha256": "1aa75166ff7220fd0f802f252ed9a5c63d45ea6075ec9c70b0921e9bc1fae4ce"}, "downloads": -1, "filename": "smartcar-1.0.12.tar.gz", "has_sig": false, "md5_digest": "ff1a88033a5872988a401c74c7ed5dee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9649, "upload_time": "2018-10-30T23:02:30", "upload_time_iso_8601": "2018-10-30T23:02:30.785757Z", "url": "https://files.pythonhosted.org/packages/eb/f8/b691e129d2c158b7085547375511a1ce70085299dc0bbd6bede4d324a846/smartcar-1.0.12.tar.gz", "yanked": false}], "1.0.13": [{"comment_text": "", "digests": {"md5": "bbcf5012fcecd9874bbaf56117f17d61", "sha256": "c489fb0627ca482524323e5ec0318deb9d7c899495135fb4835bdc9efc2d5026"}, "downloads": -1, "filename": "smartcar-1.0.13.tar.gz", "has_sig": false, "md5_digest": "bbcf5012fcecd9874bbaf56117f17d61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9403, "upload_time": "2019-02-19T19:49:17", "upload_time_iso_8601": "2019-02-19T19:49:17.031081Z", "url": "https://files.pythonhosted.org/packages/f4/6d/c0ac95d879be04e3ab4f9656b7a9f7dd8e54a31b3c58582a809d44af5ab3/smartcar-1.0.13.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "de1fff227eedd44a2910dc51e965a6fc", "sha256": "0ea147110b4949ffe133c6f50a65affa55b93e6d982abd1680733327a028263e"}, "downloads": -1, "filename": "smartcar-1.0.2.tar.gz", "has_sig": false, "md5_digest": "de1fff227eedd44a2910dc51e965a6fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10081, "upload_time": "2018-05-02T23:10:26", "upload_time_iso_8601": "2018-05-02T23:10:26.539824Z", "url": "https://files.pythonhosted.org/packages/31/64/d3e838eb2fd0e5c1135520572018596ddbb75e0cfb4632949dc027c1370e/smartcar-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "1a694e9f8e2ec7bac84c8cd4db027dd6", "sha256": "5fdc7f454b1b935e824e2698ca124881034982891a49ffd196128fdd3c8d7766"}, "downloads": -1, "filename": "smartcar-1.0.3.tar.gz", "has_sig": false, "md5_digest": "1a694e9f8e2ec7bac84c8cd4db027dd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10082, "upload_time": "2018-05-03T21:53:00", "upload_time_iso_8601": "2018-05-03T21:53:00.519097Z", "url": "https://files.pythonhosted.org/packages/84/02/883c6d889aee30f79c51ceaafab3f79fa3da0774d1daa850e2b581caa69e/smartcar-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "b7a9f4524bab8dd325db155c5c498319", "sha256": "40d0801bf7b5419b9251e8b75321a415463e18163d3771f436b6ec1844fd5319"}, "downloads": -1, "filename": "smartcar-1.0.4.tar.gz", "has_sig": false, "md5_digest": "b7a9f4524bab8dd325db155c5c498319", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10132, "upload_time": "2018-05-08T01:32:00", "upload_time_iso_8601": "2018-05-08T01:32:00.009798Z", "url": "https://files.pythonhosted.org/packages/5b/9b/c5e231c23b35ad4fba55a7009b8445833b5bf0d67bdfd38c306697e83ccd/smartcar-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "cc86c876c22f27c92c4cf2da0f7bbea4", "sha256": "0c7e33e834460aea0000b3cf9b27631a3fb634bc303b47cb35fe4934b24a643c"}, "downloads": -1, "filename": "smartcar-1.0.5.tar.gz", "has_sig": false, "md5_digest": "cc86c876c22f27c92c4cf2da0f7bbea4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10130, "upload_time": "2018-05-09T18:15:25", "upload_time_iso_8601": "2018-05-09T18:15:25.383850Z", "url": "https://files.pythonhosted.org/packages/fc/3e/4dba4f9a80a54752db42fc7f32d012a33a2f217f3c917292ae3dd07d7e3b/smartcar-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "f41cc2fce1e4ce8b675d1c7f0a34ee8b", "sha256": "8be85fb5a079ec40071b8d06b427ad0dd0ba2cb315bd44be694a2ee086fd5c68"}, "downloads": -1, "filename": "smartcar-1.0.6.tar.gz", "has_sig": false, "md5_digest": "f41cc2fce1e4ce8b675d1c7f0a34ee8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10164, "upload_time": "2018-05-30T17:59:15", "upload_time_iso_8601": "2018-05-30T17:59:15.815011Z", "url": "https://files.pythonhosted.org/packages/96/e9/e163a3fcca7d30dd09ba3313c1f8068e956bd32a0653aeff559030ad76cc/smartcar-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "d4e772f4c0758c69ec583df0d42a7089", "sha256": "f39fdd5f28aceb89f37270092d13a36cc4cab51a90fb946003ecff79e08b5bc6"}, "downloads": -1, "filename": "smartcar-1.0.7.tar.gz", "has_sig": false, "md5_digest": "d4e772f4c0758c69ec583df0d42a7089", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10202, "upload_time": "2018-07-11T01:10:43", "upload_time_iso_8601": "2018-07-11T01:10:43.750292Z", "url": "https://files.pythonhosted.org/packages/10/35/e99e9ac7b4db49cadea711e362eb94726df6dec5fbf18845dec5dc3a37a6/smartcar-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "95b0afda086f011b75127233b2ca8823", "sha256": "1116fc63330e2789c1622f1276585d0f183461d4947f8cbc5d22eb8b9f6aeec7"}, "downloads": -1, "filename": "smartcar-1.0.8.tar.gz", "has_sig": false, "md5_digest": "95b0afda086f011b75127233b2ca8823", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10202, "upload_time": "2018-08-13T15:31:53", "upload_time_iso_8601": "2018-08-13T15:31:53.630068Z", "url": "https://files.pythonhosted.org/packages/0f/aa/4cf41df8321bab2c692bd76e3f6b74071e9916acd25e99523c59259f5bd1/smartcar-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "50a93786cd7c413778c4af476096a54b", "sha256": "a8eeaf53d6ecd16a80b2e428419883636f3aeb1d66c094f279d0c61a71cc0857"}, "downloads": -1, "filename": "smartcar-1.0.9.tar.gz", "has_sig": false, "md5_digest": "50a93786cd7c413778c4af476096a54b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9469, "upload_time": "2018-08-17T23:06:41", "upload_time_iso_8601": "2018-08-17T23:06:41.017593Z", "url": "https://files.pythonhosted.org/packages/3d/2c/3cfb1e07a9c5c8ec8eeeb39684d117952a94b5c762d8f6468a753246e692/smartcar-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e6e319886981f1dd45dd27118517dac0", "sha256": "6c0b4621874ac70b06c90956b16e45a5c1d4b30b736dbd2e43ef79bf785dca32"}, "downloads": -1, "filename": "smartcar-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e6e319886981f1dd45dd27118517dac0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9634, "upload_time": "2019-02-26T03:50:16", "upload_time_iso_8601": "2019-02-26T03:50:16.761925Z", "url": "https://files.pythonhosted.org/packages/a4/19/b121b88baa3b2c71c235478f81bb0a64fef75601f93d3c0427b101ca5b28/smartcar-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "90ccdedc2c9d54208da40e62002b3713", "sha256": "5969be219f5f5c6aea470fa01516ce54a18e100566e8bd81359c64f3e38162c0"}, "downloads": -1, "filename": "smartcar-1.2.0.tar.gz", "has_sig": false, "md5_digest": "90ccdedc2c9d54208da40e62002b3713", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9897, "upload_time": "2019-03-29T15:42:47", "upload_time_iso_8601": "2019-03-29T15:42:47.722508Z", "url": "https://files.pythonhosted.org/packages/41/b4/f108dbb295d7774dcaf1570da9fd7edc707712962315e610919216564220/smartcar-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "5ef51a9ff7a8651e10065a9a94b735f0", "sha256": "54a729a8bbe73886ff01195ba194881cb2b6180bb0ca31be39d6bb816ce755ca"}, "downloads": -1, "filename": "smartcar-1.2.1.tar.gz", "has_sig": false, "md5_digest": "5ef51a9ff7a8651e10065a9a94b735f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9874, "upload_time": "2019-04-01T16:24:03", "upload_time_iso_8601": "2019-04-01T16:24:03.029542Z", "url": "https://files.pythonhosted.org/packages/43/72/b8735a446ce6b3494d5e4e96720ca0150d098eb588057ee137bd6c8c253a/smartcar-1.2.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "8e963364ec91164daebe11aa3a2a2c25", "sha256": "272a364610bd0f90c8f155ee755f093b8e0bc3a236572d048f0cf2676f9897d6"}, "downloads": -1, "filename": "smartcar-2.0.0.tar.gz", "has_sig": false, "md5_digest": "8e963364ec91164daebe11aa3a2a2c25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10145, "upload_time": "2019-04-03T21:23:57", "upload_time_iso_8601": "2019-04-03T21:23:57.003961Z", "url": "https://files.pythonhosted.org/packages/c8/07/d1fb605bf0a9c4d086bce6bfa271ddb20539c6973732bb79420200dd0823/smartcar-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "75c8893dc918f450f900ef38bc582426", "sha256": "8950d5abb5e4c88c2647345fb6f6a50d32616617c8b8ce69441f232d4904a5f8"}, "downloads": -1, "filename": "smartcar-2.0.1.tar.gz", "has_sig": false, "md5_digest": "75c8893dc918f450f900ef38bc582426", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10147, "upload_time": "2019-04-04T17:11:08", "upload_time_iso_8601": "2019-04-04T17:11:08.820728Z", "url": "https://files.pythonhosted.org/packages/5d/a2/04ba31d0c017849d4ed70b7f3db465482c610077dcfc400978bdbda3184c/smartcar-2.0.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "b0a7a880fe0c775526c02574c6c31c6a", "sha256": "89ea3b9b9262a78e0b75f70e9004cde491e69bf19c39d995c9a3083d9ad024e2"}, "downloads": -1, "filename": "smartcar-3.0.0.tar.gz", "has_sig": false, "md5_digest": "b0a7a880fe0c775526c02574c6c31c6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10260, "upload_time": "2019-04-09T16:05:05", "upload_time_iso_8601": "2019-04-09T16:05:05.342780Z", "url": "https://files.pythonhosted.org/packages/ef/04/2b8a6ee4d3f83346c430b56191589cfee8a821b3f4e4ba1e7d44adf72018/smartcar-3.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "3d4b7a24f63d97540512ede099f72dcb", "sha256": "ec8e9a77107fbd66fea7651ebc7178b8fa7a67eba2aac73876f17b86bdeea3a1"}, "downloads": -1, "filename": "smartcar-3.0.1.tar.gz", "has_sig": false, "md5_digest": "3d4b7a24f63d97540512ede099f72dcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10268, "upload_time": "2019-04-25T23:21:47", "upload_time_iso_8601": "2019-04-25T23:21:47.686945Z", "url": "https://files.pythonhosted.org/packages/72/ad/ac1a9c7f24cc6c3c67df2214b44a93e83c8d2295ed7ba0d42d1b9b15dc1d/smartcar-3.0.1.tar.gz", "yanked": false}], "3.0.3": [{"comment_text": "", "digests": {"md5": "e04fa640acd2bd8a182d512079191330", "sha256": "8fac8430356c26444fb0e2d2bac99ff29ef2fa24289875d434a4edb6c4bd0b36"}, "downloads": -1, "filename": "smartcar-3.0.3.tar.gz", "has_sig": false, "md5_digest": "e04fa640acd2bd8a182d512079191330", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10322, "upload_time": "2019-06-21T17:07:59", "upload_time_iso_8601": "2019-06-21T17:07:59.658778Z", "url": "https://files.pythonhosted.org/packages/f8/e8/4100cc005408328c6eb86e7c1d59439c88dd996452d8e6a141123afefaf0/smartcar-3.0.3.tar.gz", "yanked": false}], "3.0.4": [{"comment_text": "", "digests": {"md5": "5f61d02446e481de28a251e23e5ffea7", "sha256": "ce923da8a4f560e8207cacd86f8adffc20cf0ed202f821abb0d677998e2bfc4c"}, "downloads": -1, "filename": "smartcar-3.0.4.tar.gz", "has_sig": false, "md5_digest": "5f61d02446e481de28a251e23e5ffea7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10589, "upload_time": "2019-07-10T20:19:47", "upload_time_iso_8601": "2019-07-10T20:19:47.473840Z", "url": "https://files.pythonhosted.org/packages/d2/8b/92f8eebeaba3e7171a8706d571becc255f10b4b5d26fe9138e57cc28b20b/smartcar-3.0.4.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "cf2c29cd2d67a29ebf48e873542445db", "sha256": "d76031fffd5bcd0713697eb47e0d025da08317247e0156f8abf21516ca413c2e"}, "downloads": -1, "filename": "smartcar-4.0.0.tar.gz", "has_sig": false, "md5_digest": "cf2c29cd2d67a29ebf48e873542445db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11384, "upload_time": "2019-07-17T23:58:53", "upload_time_iso_8601": "2019-07-17T23:58:53.442259Z", "url": "https://files.pythonhosted.org/packages/0f/67/1d1bc5816ee9c4bbed798bb8ddbb03fd9dd50e617755c5a60a5607c36f0d/smartcar-4.0.0.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "f2a68640c4e74dfc8c14c1be0b5f0513", "sha256": "e55eaa57601cb8e22d2e4d09af14affe8ac345987b342ffeff81cd1f2ac6f1bc"}, "downloads": -1, "filename": "smartcar-4.1.0.tar.gz", "has_sig": false, "md5_digest": "f2a68640c4e74dfc8c14c1be0b5f0513", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11573, "upload_time": "2019-07-18T23:42:47", "upload_time_iso_8601": "2019-07-18T23:42:47.538759Z", "url": "https://files.pythonhosted.org/packages/5c/22/70589b9990938b04d1a4fb076065eb0037a98344f6448f0a9c4934ae73cf/smartcar-4.1.0.tar.gz", "yanked": false}], "4.1.1": [{"comment_text": "", "digests": {"md5": "f89eae1c46aa3ade93e61e8cce53e7c1", "sha256": "fd37b2046346f58eb8567af15e2b38daa4866d7cfc310f88cfdb42ff72a02e1f"}, "downloads": -1, "filename": "smartcar-4.1.1.tar.gz", "has_sig": false, "md5_digest": "f89eae1c46aa3ade93e61e8cce53e7c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11964, "upload_time": "2019-07-30T00:52:13", "upload_time_iso_8601": "2019-07-30T00:52:13.116372Z", "url": "https://files.pythonhosted.org/packages/3f/0a/bfb279d8a471929d92bd3bd007af74240e57960cd5c04cdc04712666f5ad/smartcar-4.1.1.tar.gz", "yanked": false}], "4.1.3": [{"comment_text": "", "digests": {"md5": "86ec660624934ffd4d832b18e5357f12", "sha256": "cc3376cfb4974d9f5ccceedb0214d9b39b287103231dfbcae54df6a22df1c551"}, "downloads": -1, "filename": "smartcar-4.1.3.tar.gz", "has_sig": false, "md5_digest": "86ec660624934ffd4d832b18e5357f12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12017, "upload_time": "2019-09-20T16:54:46", "upload_time_iso_8601": "2019-09-20T16:54:46.545220Z", "url": "https://files.pythonhosted.org/packages/e8/11/73985a940bb9a6ab9b2d3b1b81b7f4be1bc431f4675f3418cfeb88124c44/smartcar-4.1.3.tar.gz", "yanked": false}], "4.1.4": [{"comment_text": "", "digests": {"md5": "e64b06a776f67fd8cf8165fc1b14ad57", "sha256": "492a934c485076d53a352d383b130a75262808a64a9c7ddd837bbe1abce6b54a"}, "downloads": -1, "filename": "smartcar-4.1.4.tar.gz", "has_sig": false, "md5_digest": "e64b06a776f67fd8cf8165fc1b14ad57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16972, "upload_time": "2019-09-24T20:22:22", "upload_time_iso_8601": "2019-09-24T20:22:22.376248Z", "url": "https://files.pythonhosted.org/packages/0a/cb/aa736d75f33e3d464271ee044724cf76f455a8ef3344b7a8257bdb053cec/smartcar-4.1.4.tar.gz", "yanked": false}], "4.1.5": [{"comment_text": "", "digests": {"md5": "737411ee179b0fc3f1558aad970b9cb3", "sha256": "3288c60e2e6925c15fb8c67c1b08828099e4b91733a157e2d75dbc16be0c52bb"}, "downloads": -1, "filename": "smartcar-4.1.5.tar.gz", "has_sig": false, "md5_digest": "737411ee179b0fc3f1558aad970b9cb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16969, "upload_time": "2019-09-25T00:33:32", "upload_time_iso_8601": "2019-09-25T00:33:32.442780Z", "url": "https://files.pythonhosted.org/packages/f1/ad/7677b05b1f0b865be653c14297e64748907644d746dc8f009995bfc016eb/smartcar-4.1.5.tar.gz", "yanked": false}], "4.2.0": [{"comment_text": "", "digests": {"md5": "b9d522506425421337d8d7ba8ba375f0", "sha256": "3b48605c9a15e8406f9e825f2d96103b5382c662fd58a9265de7a71fee4a3f6b"}, "downloads": -1, "filename": "smartcar-4.2.0.tar.gz", "has_sig": false, "md5_digest": "b9d522506425421337d8d7ba8ba375f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14091, "upload_time": "2019-10-18T22:19:31", "upload_time_iso_8601": "2019-10-18T22:19:31.123113Z", "url": "https://files.pythonhosted.org/packages/17/78/eda53cc46b628270de154a8f93625d61cf843b6cfa8983b5660174de92f5/smartcar-4.2.0.tar.gz", "yanked": false}], "4.2.1": [{"comment_text": "", "digests": {"md5": "56c32849c486ed8f8c5b27a1f7eea25e", "sha256": "56e1b485e32c3f18570b12e6024a23a77e5447b5304579ac7b69dc511507e563"}, "downloads": -1, "filename": "smartcar-4.2.1.tar.gz", "has_sig": false, "md5_digest": "56c32849c486ed8f8c5b27a1f7eea25e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14082, "upload_time": "2019-10-22T22:45:11", "upload_time_iso_8601": "2019-10-22T22:45:11.072757Z", "url": "https://files.pythonhosted.org/packages/3c/ff/eb928e9166b714d87927788d464379028a9fac47979e32ed79c6bd6f5967/smartcar-4.2.1.tar.gz", "yanked": false}], "4.2.2": [{"comment_text": "", "digests": {"md5": "5020ac79b7a3d1571d4470a8ffdecab0", "sha256": "5f9c01fff32038417bb93353c5c49a6a2ca1f7686f8c38d5e8a73ab6250dd38a"}, "downloads": -1, "filename": "smartcar-4.2.2.tar.gz", "has_sig": false, "md5_digest": "5020ac79b7a3d1571d4470a8ffdecab0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14081, "upload_time": "2019-10-24T02:46:41", "upload_time_iso_8601": "2019-10-24T02:46:41.927198Z", "url": "https://files.pythonhosted.org/packages/48/b5/505e5c85ea5d37d47fbf050c0902c912dc5df3a3aed5226a5bb111297b4a/smartcar-4.2.2.tar.gz", "yanked": false}], "4.2.3": [{"comment_text": "", "digests": {"md5": "3ea5fcfebf8e060c4ea6a8eb6664b44b", "sha256": "fefd7c2d75f298344de842c46156f9b69df6b5f2112c7037c8e8463b115f8d8d"}, "downloads": -1, "filename": "smartcar-4.2.3.tar.gz", "has_sig": false, "md5_digest": "3ea5fcfebf8e060c4ea6a8eb6664b44b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15305, "upload_time": "2019-10-24T21:31:37", "upload_time_iso_8601": "2019-10-24T21:31:37.395740Z", "url": "https://files.pythonhosted.org/packages/fc/09/6b0747c4b215872c5a8a7262c274a8ac71ed9396eba63d858ea489cf4103/smartcar-4.2.3.tar.gz", "yanked": false}], "4.2.4": [{"comment_text": "", "digests": {"md5": "6ea7d4a2d14f2deae5f0169edcf1f7b6", "sha256": "54e16626348cf337c91de397eb2a8cf79cbb13944a2c5fa3d13451be2e8d66e3"}, "downloads": -1, "filename": "smartcar-4.2.4.tar.gz", "has_sig": false, "md5_digest": "6ea7d4a2d14f2deae5f0169edcf1f7b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19915, "upload_time": "2019-12-18T22:17:40", "upload_time_iso_8601": "2019-12-18T22:17:40.050260Z", "url": "https://files.pythonhosted.org/packages/ec/8f/afd277f4631da0ec33f79f09c1855119ed533e2f8b33c87ff158b972ff87/smartcar-4.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ea7d4a2d14f2deae5f0169edcf1f7b6", "sha256": "54e16626348cf337c91de397eb2a8cf79cbb13944a2c5fa3d13451be2e8d66e3"}, "downloads": -1, "filename": "smartcar-4.2.4.tar.gz", "has_sig": false, "md5_digest": "6ea7d4a2d14f2deae5f0169edcf1f7b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19915, "upload_time": "2019-12-18T22:17:40", "upload_time_iso_8601": "2019-12-18T22:17:40.050260Z", "url": "https://files.pythonhosted.org/packages/ec/8f/afd277f4631da0ec33f79f09c1855119ed533e2f8b33c87ff158b972ff87/smartcar-4.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:06 2020"}