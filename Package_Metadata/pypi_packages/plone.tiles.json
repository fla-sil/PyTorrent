{"info": {"author": "Martin Aspeli", "author_email": "optilude@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Plone", "Framework :: Plone :: 4.3", "Framework :: Plone :: 5.1", "Framework :: Plone :: 5.2", "Framework :: Plone :: Core", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===========\nplone.tiles\n===========\n\n.. image:: https://secure.travis-ci.org/plone/plone.tiles.png?branch=master\n    :alt: Travis CI badge\n    :target: http://travis-ci.org/plone/plone.tiles\n\n.. image:: https://coveralls.io/repos/plone/plone.tiles/badge.png?branch=master\n    :alt: Coveralls badge\n    :target: https://coveralls.io/r/plone/plone.tiles\n\n``plone.tiles`` implements a low-level, non-Plone/Zope2-specific support for creating \"tiles\".\n\n.. contents::\n\n\nIntroduction\n============\n\nFor the purposes of this package,\na tile is a browser view and an associated utility providing some metadata about that view.\nThe metadata includes a title and description,\nan 'add' permission and optionally a schema interface describing configurable aspects of the tile.\nThe idea is that a UI (such as Mosaic) can present the user with a list of insertable tiles and optionally render a form to configure the tile upon insertion.\n\nA tile is inserted into a layout as a link:\n\n.. code-block:: xml\n\n    <link rel=\"tile\" target=\"placeholder\" href=\"./@@sample.tile/tile1?option1=value1\" />\n\nThe sub-path (``tile1`` in this case) is used to set the tile ``id`` attribute.\nThis allows the tile to know its unique id, and, in the case of persistent tiles, look up its data.\n``sample.tile`` is the name of the browser view that implements the tile.\nThis is made available as the ``__name__`` attribute.\nOther parameters may be turned into tile data, available under the ``data`` attribute, a dict, for regular tiles.\nFor persistent tiles\n(those deriving from the ``PersistentTile`` base class),\nthe data is fetched from annotations instead,\nbased on the tile id.\n\nThere are three interfaces describing tiles in this package:\n\n``IBasicTile``\n    is the low-level interface for tiles.\n    It extends ``IBrowserView`` to describe the semantics of the ``__name__`` and  ``id`` attributes.\n``ITile``\n    describes a tile that can be configured with some data.\n    The data is accessible via a dict called ``data``.\n    The default implementation of this interface, ``plone.tiles.Tile``,\n    will use the schema of the tile type and the query string (``self.request.form``) to construct that dictionary.\n    This interface also describes an attribute ``url``,\n    which gives the canonical tile URL,\n    including the id sub-path and any query string parameters.\n    (Note that tiles also correctly implement ``IAbsoluteURL``.)\n``IPersistentTile``\n    describes a tile that stores its configuration in object annotations,\n    and is needed when configuration values cannot be encoded into a query string.\n    The default implementation is in ``plone.tiles.PersistentTile``.\n    To make it possible to have several tiles of a given type on the same layout,\n    the annotations are keyed by the tile ``__name__``.\n\nInternally tiles are described by ``ITileType``.\nIt contains attributes for the tile name, title, description, add permission and schema (if required).\n\nA properly configured tile consists of\n\n- a utility providing ``ITileType`` with the same name as the tile browser view.\n- a browser view providing ``IBasicTile`` or one of its derivatives.\n\nThe directive ``<plone:tile ... />`` is used to register both of these components in one go.\n\nTo support creation of appropriate tile links, ``plone.tiles.data`` contains two methods:\n\n1) ``encode()`` and\n2) ``decode()``\n\nto help turn a data dictionary into a query string and turn a `request.form` dict into a data dict that complies with a tile's schema interface.\n\nIn addition to the default tile configuration sources\n(transient query strings for ITile and persistent annotations for IPersistentTile),\nit is possible to define custom tile configuration sources by registering dictionary like\nITileDataStorage-adapter for your context, request and tile interface.\nWill be accessed dictionary like by tile data managers with tile id and its data dictionary.\n\nCreating a Simple Tile\n----------------------\n\nThe most basic tile looks like this:\n\n.. code-block:: python\n\n    from plone.tiles import Tile\n\n    class MyTile(Tile):\n\n        def __call__(self):\n            return u'<html><body><p>Hello world</p></body></html>'\n\nNote that the tile is expected to return a complete HTML document.\nThis will be interpolated into the page output according to the following rules:\n\n* The contents of the tile's ``<head />`` section is appended to the output document's ``<head />`` section.\n* The contents of the tile's ``<body />`` section will replace the tile placeholder as indicated by the tile link.\n\nNote that this package does *not* provide these interpolations.\nFor a Plone implementation of the interpolation algorithm, see `plone.app.blocks`_.\n\nIf you require a persistent tile, subclass ``plone.tiles.PersistentTile`` instead.\nYou may also need a schema interface if you want a configurable transient or persistent tile.\n\nTo register the tile, use ZCML like this:\n\n.. code-block:: xml\n\n    <configure xmlns:plone=\"http://namespaces.plone.org/plone\">\n\n        <plone:tile\n            name=\"sample.tile\"\n\n            title=\"A title for the tile\"\n            description=\"My tile's description\"\n            add_permission=\"my.add.Permission\"\n            schema=\".interfaces.IMyTileSchema\"\n\n            class=\".mytile.MyTile\"\n            permission=\"zope.Public\"\n            for=\"*\"\n            layer=\"*\"\n            />\n\n    </configure>\n\nThe first five attributes describe the tile by configuring an appropriate ``ITileType`` directive.\nThe rest mimics the ``<browser:page />`` directive,\nso you can specify a ``template`` file and omit the ``class``, or use both a ``template`` and ``class``.\n\nIf you want to register a persistent tile with a custom schema, but a template only, you can do e.g.:\n\n.. code-block:: xml\n\n    <plone:tile\n        name=\"sample.persistenttile\"\n        title=\"A title for the tile\"\n        description=\"My tile's description\"\n        add_permission=\"my.add.Permission\"\n        schema=\".interfaces.IMyTileSchema\"\n        class=\"plone.tiles.PersistentTile\"\n        template=\"mytile.pt\"\n        permission=\"zope.Public\"\n        for=\"*\"\n        />\n\nIf you want to override an existing tile, e.g. with a new layer or more specific context,\nyou *must* omit the tile metadata (title, description, icon, add permission or schema).\nIf you include any metadata you will get a conflict error on Zope startup.\nThis example shows how to use a different template for our tile:\n\n.. code-block:: xml\n\n    <plone:tile\n        name=\"sample.persistenttile\"\n        template=\"override.pt\"\n        permission=\"zope.Public\"\n        for=\"*\"\n        layer=\".interfaces.IMyLayer\"\n        />\n\nZCML Reference\n--------------\n\nThe ``plone:tile`` directive uses the namespace ``xmlns:plone=\"http://namespaces.plone.org/plone\"``.\nIn order to enable it loading of its ``meta.zcml`` is needed, use:\n\n.. code-block:: xml\n\n    <include package=\"plone.tiles\" file=\"meta.zcml\" />\n\nWhen registering a tile, in the background two registrations are done:\n\n1) How to **add** the tile (registered as a utility component as an instance of ``plone.tiles.type.TileType``).\n\n   It is possible to register a tile without adding capabilities.\n   However, such a tile needs to be directly called, there won't be any TTW adding possible.\n\n   This registration can be done once only.\n\n   This registration uses the following attributes:\n\n   - ``name`` (required)\n   - ``title`` (required)\n   - ``description`` (optional)\n   - ``icon`` (optional)\n   - ``permission`` (required)\n   - ``add_permission`` (required for adding capabilities)\n   - ``edit_permission`` (optional, default to add_permission)\n   - ``delete_permission`` (optional, default to add_permission)\n   - ``schema`` (optional)\n\n2) How to **render** the tile (as a usual page).\n\n   It is possible to register different renderers for the same ``name`` but for different contexts (``for`` or ``layer``).\n\n   This registration uses the following attributes:\n\n   - ``name`` (required)\n   - ``for`` (optional)\n   - ``layer`` (optional)\n   - ``class`` (this or ``template`` or both is required)\n   - ``template`` (this or ``class`` or both is required)\n   - ``permission`` (required)\n\nThe **directives attributes** have the following meaning:\n\n``name``\n    A unique, dotted name for the tile.\n\n``title``\n    A user friendly title, used when configuring the tile.\n\n``description``\n    A longer summary of the tile's purpose and function.\n\n``icon``\n    Image that represents tile purpose and function.\n\n``permission``\n    Name of the permission required to view the tile.\n\n``add_permission``\n    Name of the permission required to instantiate the tile.\n\n``edit_permission``\n    Name of the permission required to modify the tile.\n    Defaults to the ``add_permission``.\n\n``delete_permission``\n    Name of the permission required to remove the tile.\n    Defaults to the ``add_permission``.\n\n``schema``\n    Configuration schema for the tile.\n    This is used to create standard add/edit forms.\n\n``for``\n    The interface or class this tile is available for.\n\n``layer``\n    The layer (request marker interface) the tile is available for.\n\n``class``\n    Class implementing this tile. A browser view providing ``IBasicTile`` or one of its derivatives.\n\n``template``\n    The name of a template that renders this tile.\n    Refers to a file containing a page template.\n\n\nFurther Reading\n---------------\n\nSee `tiles.rst` and `directives.rst` for more details.\n\n.. _plone.app.blocks: http://pypi.python.org/pypi/plone.app.blocks\n\n\nTiles in detail\n===============\n\nTiles are a form of view component used to compose pages.\nThink of a tile as a view describing one part of a page,\nthat can be configured with some data described by a schema and inserted into a layout via a dedicated GUI.\n\nLike a browser view, a tile can be traversed to and published on its own.\nThe tile should then return a full HTML page,\nincluding a <head /> with any required resources,\nand a <body /> with the visible part of the tile.\nThis will then be merged into the page, using a system such as ``plone.app.blocks``.\n\nThe API in this package provides support for tiles being configured according to a schema,\nwith data either passed on the query string (transient tiles) or retrieved from annotations (persistent tiles).\n\nNote that there is no direct UI support in this package,\nso the forms that allow users to construct and edit tiles must live elsewhere.\nYou may be interested in ``plone.app.tiles`` and ``plone.app.mosaic`` for that purpose.\n\nTo use the package, you should first load its ZCML configuration:\n\n.. code-block:: python\n\n    >>> configuration = \"\"\"\\\n    ... <configure\n    ...      xmlns=\"http://namespaces.zope.org/zope\"\n    ...      xmlns:plone=\"http://namespaces.plone.org/plone\"\n    ...      i18n_domain=\"plone.tiles.tests\">\n    ...\n    ...     <include package=\"zope.component\" file=\"meta.zcml\" />\n    ...     <include package=\"zope.browserpage\" file=\"meta.zcml\" />\n    ...\n    ...     <include package=\"plone.tiles\" file=\"meta.zcml\" />\n    ...     <include package=\"plone.tiles\" />\n    ...\n    ... </configure>\n    ... \"\"\"\n\n    >>> from six import StringIO\n    >>> from zope.configuration import xmlconfig\n    >>> xmlconfig.xmlconfig(StringIO(configuration))\n\nA simple transient tile\n-----------------------\n\nA basic tile is a view that implements the ``ITile`` interface.\nThe easiest way to do this is to subclass the ``Tile`` class:\n\n.. code-block:: python\n\n    >>> from plone.tiles import Tile\n    >>> class SampleTile(Tile):\n    ...\n    ...     __name__ = 'sample.tile' # would normally be set by a ZCML handler\n    ...\n    ...     def __call__(self):\n    ...         return '<html><body><b>My tile</b></body></html>'\n\nThe tile is a browser view:\n\n.. code-block:: python\n\n    >>> from plone.tiles.interfaces import ITile\n    >>> ITile.implementedBy(SampleTile)\n    True\n\n    >>> from zope.publisher.interfaces.browser import IBrowserView\n    >>> IBrowserView.implementedBy(SampleTile)\n    True\n\nThe tile instance has a ``__name__`` attribute\n(normally set at class level by the ``<plone:tile />`` ZCML directive),\nas well as a property ``id``.\nThe id may be set explicitly, either in code, or by sub-path traversal.\nFor example, if the tile name is ``example.tile``,\nthe id may be set to ``tile1`` using an URL like ``http://example.com/foo/@@example.tile/tile1``.\n\nThis tile is registered as a normal browser view,\nalongside a utility that provides some information about the tile itself.\nNormally, this is done using the ``<plone:tile />`` directive.\nHere's how to create one manually:\n\n.. code-block:: python\n\n    >>> from plone.tiles.type import TileType\n    >>> sampleTileType = TileType(\n    ...     u'sample.tile',\n    ...     u'Sample tile',\n    ...     'dummy.Permission',\n    ...     'dummy.Permission',\n    ...     description=u'A tile used for testing',\n    ...     schema=None)\n\nThe name should match the view name and the name the utility is registered under.\nThe title and description may be used by the UI.\nThe add permission is the name of a permission that will be required to insert the tile.\nThe schema attribute may be used to indicate schema interface describing the tile's configurable data - more on this below.\n\nTo register a tile in ZCML, we could do:\n\n.. code-block:: xml\n\n    <plone:tile\n        name=\"sample.tile\"\n        title=\"Sample tile\"\n        description=\"A tile used for testing\"\n        add_permission=\"dummy.Permission\"\n        class=\".mytiles.SampleTile\"\n        for=\"*\"\n        permission=\"zope.Public\"\n        />\n\n.. note:: The tile name should be a dotted name, prefixed by a namespace you control.\n   It's a good idea to use a package name for this purpose.\n\nIt is also possible to specify a ``layer`` or ``template`` like the ``browser:page`` directive, as well as a ``schema``,\nwhich we will describe below.\n\nWe'll register the sample tile directly here, for later testing.\n\n.. code-block:: python\n\n    >>> from zope.component import provideAdapter, provideUtility\n    >>> from zope.interface import Interface\n    >>> from plone.tiles.interfaces import IBasicTile\n\n    >>> provideUtility(sampleTileType, name=u'sample.tile')\n    >>> provideAdapter(SampleTile, (Interface, Interface), IBasicTile, name=u'sample.tile')\n\nTile traversal\n--------------\n\nTiles are publishable as a normal browser view.\nThey will normally be called with a sub-path that specifies a tile id.\nThis allows tiles to be made aware of their instance name.\nThe id is unique within the page layout where the tile is used,\nand may be the basis for looking up tile data.\n\nFor example, a tile may be saved in a layout as a link like:\n\n.. code-block:: html\n\n    <link rel=\"tile\" target=\"mytile\" href=\"./@@sample.tile/tile1\" />\n\n(The idea here is that the tile link tells the rendering algorithm to replace\nthe element with id ``mytile`` with the body of the rendered tile - see\n``plone.app.blocks`` for details).\n\nLet's create a sample context,\nlook up the view as it would be during traversal,\nand verify how the tile is instantiated.\n\n.. code-block:: python\n\n    >>> from zope.component import getMultiAdapter\n    >>> from zope.interface import classImplements\n    >>> from zope.interface import Interface\n    >>> from zope.interface import implementer\n    >>> from zope.publisher.browser import TestRequest\n    >>> from zope.annotation.interfaces import IAnnotations\n    >>> from zope.annotation.interfaces import IAttributeAnnotatable\n    >>> classImplements(TestRequest, IAttributeAnnotatable)\n\n    >>> class IContext(Interface):\n    ...     pass\n\n    >>> @implementer(IContext)\n    ... class Context(object):\n    ...     pass\n\n    >>> context = Context()\n    >>> request = TestRequest()\n\n    >>> tile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> tile = tile['tile1'] # simulates sub-path traversal\n\nThe tile will now be aware of its name and id:\n\n.. code-block:: python\n\n    >>> isinstance(tile, SampleTile)\n    True\n    >>> tile.__parent__ is context\n    True\n    >>> tile.id\n    'tile1'\n    >>> tile.__name__\n    'sample.tile'\n\nThe sub-path traversal is implemented using a custom ``__getitem__()`` method.\nTo look up a view on a tile,\nyou can traverse to it *after* you've traversed to the id sub-path:\n\n.. code-block:: python\n\n    >>> from zope.component import adapts\n    >>> from zope.interface import Interface\n    >>> from zope.publisher.browser import BrowserView\n    >>> from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n\n    >>> class TestView(BrowserView):\n    ...     adapts(SampleTile, IDefaultBrowserLayer)\n    ...     def __call__(self):\n    ...         return 'Dummy view'\n\n    >>> provideAdapter(TestView, provides=Interface, name='test-view')\n\n    >>> tile.id is not None\n    True\n    >>> tile['test-view']()\n    'Dummy view'\n\nIf there is no view and we have an id already, we will get a ``KeyError``:\n\n.. code-block:: python\n\n    >>> tile['not-known'] # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    KeyError: 'not-known'\n\nTo ensure consistency with Zope's various tangles publication machines,\nit is also possible to traverse using the ``publishTraverse`` method:\n\n.. code-block:: python\n\n    >>> tile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> tile = tile.publishTraverse(request, 'tile1') # simulates sub-path traversal\n\n    >>> isinstance(tile, SampleTile)\n    True\n    >>> tile.__parent__ is context\n    True\n    >>> tile.id\n    'tile1'\n    >>> tile.__name__\n    'sample.tile'\n\nTransient tile data\n-------------------\n\nLet us now consider how tiles may have data.\nIn the simplest case, tile data is passed on the query string, and described according to a schema.\nA simple schema may look like:\n\n.. code-block:: python\n\n    >>> import zope.schema\n\n    >>> class ISampleTileData(Interface):\n    ...     title = zope.schema.TextLine(title=u'Tile title')\n    ...     cssClass = zope.schema.ASCIILine(title=u'CSS class to apply')\n    ...     count = zope.schema.Int(title=u'Number of things to show in the tile')\n\nWe would normally have listed this interface when registering this tile in ZCML.\nWe can simply update the utility here.\n\n.. code-block:: python\n\n    >>> sampleTileType.schema = ISampleTileData\n\nTile data is represented by a simple dictionary. For example:\n\n.. code-block:: python\n\n    >>> data = {'title': u'My title', 'count': 5, 'cssClass': 'foo'}\n\nThe idea is that a tile add form is built from the schema interface, and its data saved to a dictionary.\n\nFor transient tiles,\nthis data is then encoded into the tile query string.\nTo help with this,\na utility function can be used to encode a dict to a query string,\napplying Zope form marshalers according to the types described in the schema:\n\n.. code-block:: python\n\n    >>> from plone.tiles.data import encode\n    >>> encode(data, ISampleTileData)\n    'title=My+title&cssClass=foo&count%3Along=5'\n\nThe ``count%3Along=5`` bit is the encoded version of ``count:long=5``.\n\nNote that not all field types may be saved.\nIn particular, object, interface, set or frozen set fields may not be saved, and will result in a ``KeyError``.\nLengthy text fields or bytes fields with binary data may also be a problem.\nFor these types of fields,\nlook to use persistent tiles instead.\n\nFurthermore, the conversion may not be perfect.\nFor example, Zope's form marshalers cannot distinguish between unicode and ascii fields.\nTherefore, there is a corresponding ``decode()`` method that may be used to ensure that the values match the schema:\n\n.. code-block:: python\n\n    >>> marshaled = {'title': u'My tile', 'count': 5, 'cssClass': u'foo'}\n\n    >>> from plone.tiles.data import decode\n    >>> sorted(decode(marshaled, ISampleTileData).items())\n    [('count', 5), ('cssClass', 'foo'), ('title', 'My tile')]\n\nWhen saved into a layout, the tile link would now look like:\n\n.. code-block:: html\n\n    <link rel=\"tile\" target=\"mytile\"\n      href=\"./@@sample.tile/tile1?title=My+title&count%3Along=5&cssClass=foo\" />\n\nLet's simulate traversal once more and see how the data is now available to the tile instance:\n\n.. code-block:: python\n\n    >>> context = Context()\n    >>> request = TestRequest(form={'title': u'My title', 'count': 5, 'cssClass': u'foo'})\n\n    >>> tile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> tile = tile['tile1']\n\n    >>> sorted(tile.data.items())\n    [('count', 5), ('cssClass', 'foo'), ('title', 'My title')]\n\nNotice also how the data has been properly decoded according to the schema.\n\nTransient tiles will get their data directly from the request parameters but,\nif a `_tiledata` JSON-encoded parameter is present in the request,\nthis one will be used instead:\n\n.. code-block:: python\n\n    >>> import json\n\n    >>> request = TestRequest(form={\n    ...     'title': u'My title', 'count': 5, 'cssClass': u'foo',\n    ...     '_tiledata': json.dumps({'title': u'Your title', 'count': 6, 'cssClass': u'bar'})\n    ...     })\n    >>> tile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> tile = tile['tile1']\n\n    >>> sorted(tile.data.items())\n    [('count', 6), ('cssClass', 'bar'), ('title', 'Your title')]\n\nThis way we can use transient tiles safely in contexts where the tile data can be confused with raw data coming from a form, e.g. in an edit form.\n\nThe tile data manager\n---------------------\n\nThe ``data`` attribute is a convenience attribute to get hold of a (cached) copy of the data returned by an ``ITileDataManager``.\nThis interface provides three methods:\n``get()``, to return the tile's data,\n``set()``, to update it with a new dictionary of data,\nand ``delete()``, to delete the data.\n\nThis adapter is mostly useful for writing UI around tiles.\nUsing our tile above, we can get the data like so:\n\n.. code-block:: python\n\n    >>> from plone.tiles.interfaces import ITileDataManager\n    >>> dataManager = ITileDataManager(tile)\n    >>> dataManager.get() == tile.data\n    True\n\nWe can also update the tile data:\n\n.. code-block:: python\n\n    >>> dataManager.set({'count': 1, 'cssClass': 'bar', 'title': u'Another title'})\n    >>> sorted(dataManager.get().items())\n    [('count', 1), ('cssClass', 'bar'), ('title', 'Another title')]\n\nThe data can also be deleted:\n\n.. code-block:: python\n\n    >>> dataManager.delete()\n    >>> sorted(dataManager.get().items())\n    [('count', None), ('cssClass', None), ('title', None)]\n\nNote that in the case of a transient tile,\nall we are doing is modifying the ``form`` dictionary of the request\n(or the `_tiledata` parameter of this dictionary, if present).\nThe data needs to be encoded into the query string,\neither using the ``encode()`` method or via the tile's ``IAbsoluteURL`` adapter (see below for details).\n\nFor persistent tiles, the data manager is a bit more interesting.\n\nPersistent tiles\n----------------\n\nNot all types of data can be placed in a query string.\nFor more substantial storage requirements,\nyou can use persistent tiles, which store data in annotations.\n\n.. note:: If you have more intricate requirements,\n   you can also write your own ``ITileDataManager`` to handle data retrieval.\n   In this case, you probably still want to derive from ``PersistentTile``,\n   to get the appropriate ``IAbsoluteURL`` adapter, among other things.\n\nFirst, we need to write up annotations support.\n\n.. code-block:: python\n\n    >>> from zope.annotation.attribute import AttributeAnnotations\n    >>> provideAdapter(AttributeAnnotations)\n\nWe also need a context that is annotatable.\n\n.. code-block:: python\n\n    >>> from zope.annotation.interfaces import IAttributeAnnotatable\n    >>> from zope.interface import alsoProvides\n    >>> alsoProvides(context, IAttributeAnnotatable)\n\nNow, let's create a persistent tile with a schema.\n\n.. code-block:: python\n\n    >>> class IPersistentSampleData(Interface):\n    ...     text = zope.schema.Text(title=u'Detailed text', missing_value=u'Missing!')\n\n    >>> from plone.tiles import PersistentTile\n    >>> class PersistentSampleTile(PersistentTile):\n    ...\n    ...     __name__ = 'sample.persistenttile' # would normally be set by ZCML handler\n    ...\n    ...     def __call__(self):\n    ...         return u'<b>You said</b> %s' % self.data['text']\n\n    >>> persistentSampleTileType = TileType(\n    ...     u'sample.persistenttile',\n    ...     u'Persistent sample tile',\n    ...     'dummy.Permission',\n    ...     'dummy.Permission',\n    ...     description=u'A tile used for testing',\n    ...     schema=IPersistentSampleData)\n\n    >>> provideUtility(persistentSampleTileType, name=u'sample.persistenttile')\n    >>> provideAdapter(PersistentSampleTile, (Interface, Interface), IBasicTile, name=u'sample.persistenttile')\n\nWe can now traverse to the tile as before.\nBy default, there is no data, and the field's missing value will be used.\n\n.. code-block:: python\n\n    >>> request = TestRequest()\n\n    >>> tile = getMultiAdapter((context, request), name=u'sample.persistenttile')\n    >>> tile = tile['tile2']\n    >>> tile.__name__\n    'sample.persistenttile'\n    >>> tile.id\n    'tile2'\n\n    >>> tile()\n    '<b>You said</b> Missing!'\n\nAt this point, there is nothing in the annotations for the type either:\n\n.. code-block:: python\n\n    >>> list(dict(getattr(context, '__annotations__', {})).keys())\n    []\n\nWe can write data to the context's annotations using an ``ITileDataManager``:\n\n.. code-block:: python\n\n    >>> dataManager = ITileDataManager(tile)\n    >>> dataManager.set({'text': 'Hello!'})\n\nThis writes data to annotations:\n\n.. code-block:: python\n\n    >>> list(dict(context.__annotations__).keys())\n    ['plone.tiles.data.tile2']\n    >>> context.__annotations__[u'plone.tiles.data.tile2']\n    {'text': 'Hello!'}\n\nWe can get this from the data manager too, of course:\n\n.. code-block:: python\n\n    >>> dataManager.get()\n    {'text': 'Hello!'}\n\nNote that as with transient tiles,\nthe ``data`` attribute is cached and will only be looked up once.\n\nIf we now look up the tile again, we will get the new value:\n\n.. code-block:: python\n\n    >>> tile = getMultiAdapter((context, request), name=u'sample.persistenttile')\n    >>> tile = tile['tile2']\n    >>> tile()\n    '<b>You said</b> Hello!'\n\n    >>> tile.data\n    {'text': 'Hello!'}\n\nWe can also remove the annotation using the data manager:\n\n.. code-block:: python\n\n    >>> dataManager.delete()\n    >>> sorted(dict(context.__annotations__).items()) # doctest: +ELLIPSIS\n    []\n\nOverriding transient data with persistent\n-----------------------------------------\n\nTo be able to re-use the same centrally managed tile based layouts for multiple context objects,\nbut still allow optional customization for tiles,\nit's possible to override otherwise transient tile configuration with context specific persistent configuration.\n\nThis is done by either by setting a client side request header or query param ``X-Tile-Persistent``:\n\n.. code-block:: python\n\n    >>> request = TestRequest(\n    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo',\n    ...           'X-Tile-Persistent': 'yes'}\n    ... )\n\nYet, just adding the flag, doesn't create new persistent annotations on GET requests:\n\n.. code-block:: python\n\n    >>> tile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> ITileDataManager(tile)\n    <plone.tiles.data.PersistentTileDataManager object at ...>\n\n    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])\n    [('count', 5), ('cssClass', 'foo'), ('title', 'My title')]\n\n    >>> list(IAnnotations(context).keys())\n    []\n\nThat's because the data is persistent only once it's set:\n\n.. code-block:: python\n\n    >>> data = ITileDataManager(tile).get()\n    >>> data.update({'count': 6})\n    >>> ITileDataManager(tile).set(data)\n    >>> list(IAnnotations(context).keys())\n    ['plone.tiles.data...']\n\n    >>> sorted(list(IAnnotations(context).values())[0].items(), key=lambda x: x[0])\n    [('count', 6), ('cssClass', 'foo'), ('title', 'My title')]\n\n    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])\n    [('count', 6), ('cssClass', 'foo'), ('title', 'My title')]\n\nWithout the persistent flag, fixed transient data would be returned:\n\n.. code-block:: python\n\n    >>> request = TestRequest(\n    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo'},\n    ... )\n    >>> tile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> ITileDataManager(tile)\n    <plone.tiles.data.TransientTileDataManager object at ...>\n\n    >>> data = ITileDataManager(tile).get()\n    >>> sorted(data.items(), key=lambda x: x[0])\n    [('count', 5), ('cssClass', 'foo'), ('title', 'My title')]\n\nFinally, the persistent override could also be deleted:\n\n.. code-block:: python\n\n    >>> request = TestRequest(\n    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo',\n    ...           'X-Tile-Persistent': 'yes'}\n    ... )\n    >>> tile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> ITileDataManager(tile)\n    <plone.tiles.data.PersistentTileDataManager object at ...>\n\n    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])\n    [('count', 6), ('cssClass', 'foo'), ('title', 'My title')]\n\n    >>> ITileDataManager(tile).delete()\n    >>> list(IAnnotations(context).keys())\n    []\n\n    >>> sorted(ITileDataManager(tile).get().items(), key=lambda x: x[0])\n    [('count', 5), ('cssClass', 'foo'), ('title', 'My title')]\n\n    >>> request = TestRequest(\n    ...     form={'title': u'My title', 'count': 5, 'cssClass': u'foo'},\n    ... )\n    >>> tile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> ITileDataManager(tile)\n    <plone.tiles.data.TransientTileDataManager object at ...>\n\n\nTile URLs\n---------\n\nAs we have seen, tiles have a canonical URL.\nFor transient tiles, this may also encode some tile data.\n\nIf you have a tile instance and you need to know the canonical tile URL,\nyou can use the ``IAbsoluteURL`` API.\n\nFor the purposes of testing,\nwe need to ensure that we can get an absolute URL for the context.\nWe'll achieve that with a dummy adapter:\n\n.. code-block:: python\n\n    >>> from zope.interface import implementer\n    >>> from zope.component import adapter\n\n    >>> from zope.traversing.browser.interfaces import IAbsoluteURL\n    >>> from zope.publisher.interfaces.http import IHTTPRequest\n\n    >>> @implementer(IAbsoluteURL)\n    ... @adapter(IContext, IHTTPRequest)\n    ... class DummyAbsoluteURL(object):\n    ...\n    ...     def __init__(self, context, request):\n    ...         self.context = context\n    ...         self.request = request\n    ...\n    ...     def __unicode__(self):\n    ...         return u'http://example.com/context'\n    ...     def __str__(self):\n    ...         return u'http://example.com/context'\n    ...     def __call__(self):\n    ...         return self.__str__()\n    ...     def breadcrumbs(self):\n    ...         return ({'name': u'context', 'url': 'http://example.com/context'},)\n    >>> provideAdapter(DummyAbsoluteURL, name=u'absolute_url')\n    >>> provideAdapter(DummyAbsoluteURL)\n\n    >>> from zope.traversing.browser.absoluteurl import absoluteURL\n    >>> from zope.component import getMultiAdapter\n\n    >>> context = Context()\n    >>> request = TestRequest(form={'title': u'My title', 'count': 5, 'cssClass': u'foo'})\n    >>> transientTile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> transientTile = transientTile['tile1']\n\n    >>> absoluteURL(transientTile, request)\n    'http://example.com/context/@@sample.tile/tile1?title=My+title&cssClass=foo&count%3Along=5'\n\n    >>> getMultiAdapter((transientTile, request), IAbsoluteURL).breadcrumbs() == \\\n    ... ({'url': 'http://example.com/context', 'name': u'context'},\n    ...  {'url': 'http://example.com/context/@@sample.tile/tile1', 'name': 'sample.tile'})\n    True\n\nFor convenience, the tile URL is also available under the ``url`` property:\n\n.. code-block:: python\n\n    >>> transientTile.url\n    'http://example.com/context/@@sample.tile/tile1?title=My+title&cssClass=foo&count%3Along=5'\n\nThe tile absolute URL structure remains unaltered if the data is\ncoming from a `_tiledata` JSON-encoded parameter instead of from the request\nparameters directly:\n\n.. code-block:: python\n\n    >>> request = TestRequest(form={'_tiledata': json.dumps({'title': u'Your title', 'count': 6, 'cssClass': u'bar'})})\n    >>> transientTile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> transientTile = transientTile['tile1']\n\n    >>> absoluteURL(transientTile, request)\n    'http://example.com/context/@@sample.tile/tile1?title=Your+title&cssClass=bar&count%3Along=6'\n\nFor persistent tiles, the are no data parameters:\n\n.. code-block:: python\n\n    >>> context = Context()\n    >>> request = TestRequest(form={'title': u'Ignored', 'count': 0, 'cssClass': u'ignored'})\n    >>> persistentTile = getMultiAdapter((context, request), name=u'sample.persistenttile')\n    >>> persistentTile = persistentTile['tile2']\n\n    >>> absoluteURL(persistentTile, request)\n    'http://example.com/context/@@sample.persistenttile/tile2'\n\n    >>> getMultiAdapter((persistentTile, request), IAbsoluteURL).breadcrumbs() == \\\n    ... ({'url': 'http://example.com/context', 'name': u'context'},\n    ...  {'url': 'http://example.com/context/@@sample.persistenttile/tile2', 'name': 'sample.persistenttile'})\n    True\n\nAnd again, for convenience:\n\n.. code-block:: python\n\n    >>> persistentTile.url\n    'http://example.com/context/@@sample.persistenttile/tile2'\n\nIf the tile doesn't have an id, we don't get any sub-path:\n\n.. code-block:: python\n\n    >>> request = TestRequest(form={'title': u'My title', 'count': 5, 'cssClass': u'foo'})\n    >>> transientTile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> absoluteURL(transientTile, request)\n    'http://example.com/context/@@sample.tile?title=My+title&cssClass=foo&count%3Along=5'\n\n    >>> request = TestRequest()\n    >>> persistentTile = getMultiAdapter((context, request), name=u'sample.persistenttile')\n    >>> absoluteURL(persistentTile, request)\n    'http://example.com/context/@@sample.persistenttile'\n\n\nWe can also disallow query parameters providing data into our tiles\n\n.. code-block:: python\n\n    >>> import zope.schema\n    >>> from plone.tiles.directives import ignore_querystring\n\n    >>> class ISampleTileData(Interface):\n    ...     unfiltered = zope.schema.Text(title=u'Unfiltered data')\n    ...     ignore_querystring('unfiltered')\n    ...     filtered = zope.schema.Text(title=u'filtered data')\n\n    >>> sampleTileType.schema = ISampleTileData\n\nAnd create a tile with our new schema\n\n.. code-block:: python\n\n  >>> from plone.tiles import Tile\n  >>> class SampleTile(Tile):\n  ...\n  ...     __name__ = 'sample.unfilteredtile' # would normally be set by a ZCML handler\n  ...\n  ...     def __call__(self):\n  ...         return '<html><body><div>{}{}</div></body></html>'.format(\n  ...             self.data.get('unfiltered') or '',\n  ...             self.data.get('filtered') or '')\n\nWe'll register the sample unfiltered tile directly here, for testing.\n\n.. code-block:: python\n\n    >>> from zope.component import provideAdapter, provideUtility\n    >>> from zope.interface import Interface\n    >>> from plone.tiles.interfaces import IBasicTile\n\n    >>> provideUtility(sampleTileType, name=u'sample.unfilteredtile')\n    >>> provideAdapter(SampleTile, (Interface, Interface), IBasicTile, name=u'sample.unfilteredtile')\n\n\nLet's simulate traversal to test if form data is used:\n\n.. code-block:: python\n\n    >>> context = Context()\n    >>> request = TestRequest(form={'unfiltered': 'foobar', 'filtered': 'safe'})\n\n    >>> tile = getMultiAdapter((context, request), name=u'sample.unfilteredtile')\n    >>> tile = tile['tile1']\n\nData should not contain unfiltered field:\n\n.. code-block:: python\n\n    >>> sorted(tile.data.items())\n    [('filtered', 'safe')]\n\n\nRendering the tile should not include ignored query string:\n\n.. code-block:: python\n\n    >>> 'foobar' in tile()\n    False\n\n    >>> tile()\n    '<html><body><div>safe</div></body></html>'\n\nZCML directive\n==============\n\nA tile is really just a browser view providing ``IBasicTile``\n(or, more commonly, ``ITile`` or ``IPersistentTile``)\ncoupled with a named utility providing ``ITileType``.\nThe names of the browser view and the tile should match.\n\nTo make it easier to register these components,\nthis package provides a ``<plone:tile />`` directive that sets up both.\nIt supports several use cases:\n\n* Registering a new tile from a class\n* Registering a new tile from a template only\n* Registering a new tile form a class and a template\n* Registering a new tile for an existing tile type (e.g. for a new layer)\n\nTo test this,\nwe have created a dummy schema and a dummy tile in ``testing.py``,\nand a dummy template in ``test.pt``.\n\nLet's show how these may be used by registering several tiles:\n\n.. code-block:: python\n\n    >>> configuration = \"\"\"\\\n    ... <configure package=\"plone.tiles\"\n    ...      xmlns=\"http://namespaces.zope.org/zope\"\n    ...      xmlns:plone=\"http://namespaces.plone.org/plone\"\n    ...      i18n_domain=\"plone.tiles.tests\">\n    ...\n    ...     <include package=\"zope.component\" file=\"meta.zcml\" />\n    ...     <include package=\"zope.security\" file=\"meta.zcml\" />\n    ...     <include package=\"zope.browserpage\" file=\"meta.zcml\" />\n    ...\n    ...     <include package=\"plone.tiles\" file=\"meta.zcml\" />\n    ...     <include package=\"plone.tiles\" />\n    ...\n    ...     <permission\n    ...         id=\"plone.tiles.testing.DummyAdd\"\n    ...         title=\"Dummy add permission\"\n    ...         />\n    ...     <permission\n    ...         id=\"plone.tiles.testing.DummyView\"\n    ...         title=\"Dummy view permission\"\n    ...         />\n    ...\n    ...     <!-- A tile configured with all available attributes -->\n    ...     <plone:tile\n    ...         name=\"dummy1\"\n    ...         title=\"Dummy tile 1\"\n    ...         description=\"This one shows all available options\"\n    ...         add_permission=\"plone.tiles.testing.DummyAdd\"\n    ...         schema=\"plone.tiles.testing.IDummySchema\"\n    ...         class=\"plone.tiles.testing.DummyTileWithTemplate\"\n    ...         template=\"test.pt\"\n    ...         for=\"plone.tiles.testing.IDummyContext\"\n    ...         layer=\"plone.tiles.testing.IDummyLayer\"\n    ...         permission=\"plone.tiles.testing.DummyView\"\n    ...         />\n    ...\n    ...     <!-- A class-only tile -->\n    ...     <plone:tile\n    ...         name=\"dummy2\"\n    ...         title=\"Dummy tile 2\"\n    ...         add_permission=\"plone.tiles.testing.DummyAdd\"\n    ...         class=\"plone.tiles.testing.DummyTile\"\n    ...         for=\"*\"\n    ...         permission=\"plone.tiles.testing.DummyView\"\n    ...         />\n    ...\n    ...     <!-- A template-only tile -->\n    ...     <plone:tile\n    ...         name=\"dummy3\"\n    ...         title=\"Dummy tile 3\"\n    ...         add_permission=\"plone.tiles.testing.DummyAdd\"\n    ...         template=\"test.pt\"\n    ...         for=\"*\"\n    ...         permission=\"plone.tiles.testing.DummyView\"\n    ...         />\n    ...\n    ...     <!-- Use the PersistentTile class directly with a template-only tile -->\n    ...     <plone:tile\n    ...         name=\"dummy4\"\n    ...         title=\"Dummy tile 4\"\n    ...         add_permission=\"plone.tiles.testing.DummyAdd\"\n    ...         schema=\"plone.tiles.testing.IDummySchema\"\n    ...         class=\"plone.tiles.PersistentTile\"\n    ...         template=\"test.pt\"\n    ...         for=\"*\"\n    ...         permission=\"plone.tiles.testing.DummyView\"\n    ...         />\n    ...\n    ...     <!-- Override dummy3 for a new layer -->\n    ...     <plone:tile\n    ...         name=\"dummy3\"\n    ...         class=\"plone.tiles.testing.DummyTile\"\n    ...         for=\"*\"\n    ...         layer=\"plone.tiles.testing.IDummyLayer\"\n    ...         permission=\"plone.tiles.testing.DummyView\"\n    ...         />\n    ...\n    ... </configure>\n    ... \"\"\"\n\n    >>> from six import StringIO\n    >>> from zope.configuration import xmlconfig\n    >>> xmlconfig.xmlconfig(StringIO(configuration))\n\nLet's check how the tiles were registered:\n\n.. code-block:: python\n\n    >>> from zope.component import getUtility\n    >>> from plone.tiles.interfaces import ITileType\n\n    >>> tile1_type = getUtility(ITileType, name=u'dummy1')\n    >>> tile1_type\n    <TileType dummy1 (Dummy tile 1)>\n    >>> tile1_type.description\n    'This one shows all available options'\n\n    >>> tile1_type.add_permission\n    'plone.tiles.testing.DummyAdd'\n\n    >>> tile1_type.view_permission\n    'plone.tiles.testing.DummyView'\n\n    >>> tile1_type.schema\n    <InterfaceClass plone.tiles.testing.IDummySchema>\n\n    >>> tile2_type = getUtility(ITileType, name=u'dummy2')\n    >>> tile2_type\n    <TileType dummy2 (Dummy tile 2)>\n    >>> tile2_type.description is None\n    True\n    >>> tile2_type.add_permission\n    'plone.tiles.testing.DummyAdd'\n    >>> tile2_type.schema is None\n    True\n\n    >>> tile3_type = getUtility(ITileType, name=u'dummy3')\n    >>> tile3_type\n    <TileType dummy3 (Dummy tile 3)>\n    >>> tile3_type.description is None\n    True\n    >>> tile3_type.add_permission\n    'plone.tiles.testing.DummyAdd'\n    >>> tile3_type.schema is None\n    True\n\n    >>> tile4_type = getUtility(ITileType, name=u'dummy4')\n    >>> tile4_type\n    <TileType dummy4 (Dummy tile 4)>\n    >>> tile4_type.description is None\n    True\n    >>> tile4_type.add_permission\n    'plone.tiles.testing.DummyAdd'\n    >>> tile4_type.schema\n    <InterfaceClass plone.tiles.testing.IDummySchema>\n\nFinally, let's check that we can look up the tiles:\n\n.. code-block:: python\n\n    >>> from zope.publisher.browser import TestRequest\n    >>> from zope.interface import implementer, alsoProvides\n\n    >>> from plone.tiles.testing import IDummyContext, IDummyLayer\n\n    >>> @implementer(IDummyContext)\n    ... class Context(object):\n    ...     pass\n\n    >>> context = Context()\n    >>> request = TestRequest()\n    >>> layer_request = TestRequest(skin=IDummyLayer)\n\n    >>> from zope.component import getMultiAdapter\n    >>> from plone.tiles import Tile, PersistentTile\n    >>> from plone.tiles.testing import DummyTile, DummyTileWithTemplate\n\n    >>> tile1 = getMultiAdapter((context, layer_request), name='dummy1')\n    >>> isinstance(tile1, DummyTileWithTemplate)\n    True\n    >>> print(tile1())\n    <b>test!</b>\n    >>> tile1.__name__\n    'dummy1'\n\n    >>> tile2 = getMultiAdapter((context, request), name='dummy2')\n    >>> isinstance(tile2, DummyTile)\n    True\n    >>> print(tile2())\n    dummy\n    >>> tile2.__name__\n    'dummy2'\n\n    >>> tile3 = getMultiAdapter((context, request), name='dummy3')\n    >>> isinstance(tile3, Tile)\n    True\n    >>> print(tile3())\n    <b>test!</b>\n    >>> tile3.__name__\n    'dummy3'\n\n    >>> tile4 = getMultiAdapter((context, request), name='dummy4')\n    >>> isinstance(tile4, PersistentTile)\n    True\n    >>> print(tile4())\n    <b>test!</b>\n    >>> tile4.__name__\n    'dummy4'\n\n    >>> tile3_layer = getMultiAdapter((context, layer_request), name='dummy3')\n    >>> isinstance(tile3_layer, DummyTile)\n    True\n    >>> print(tile3_layer())\n    dummy\n    >>> tile3_layer.__name__\n    'dummy3'\n\nESI support\n===========\n\nSome sites may choose to render tiles in a delayed fashion using Edge Side Includes or some similar mechanism.\n``plone.tiles`` includes some support to help render ESI placeholders.\nThis is used in ``plone.app.blocks`` to facilitate ESI rendering.\nSince ESI normally involves a \"dumb\" replacement operation,\n``plone.tiles`` also provides a means of accessing just the head and/or just the body of a tile.\n\nTo use the package, you should first load its ZCML configuration.\n\n.. code-block:: python\n\n    >>> configuration = \"\"\"\\\n    ... <configure\n    ...      xmlns=\"http://namespaces.zope.org/zope\"\n    ...      xmlns:plone=\"http://namespaces.plone.org/plone\"\n    ...      i18n_domain=\"plone.tiles.tests\">\n    ...\n    ...     <include package=\"zope.component\" file=\"meta.zcml\" />\n    ...     <include package=\"zope.browserpage\" file=\"meta.zcml\" />\n    ...\n    ...     <include package=\"plone.tiles\" file=\"meta.zcml\" />\n    ...     <include package=\"plone.tiles\" />\n    ...\n    ... </configure>\n    ... \"\"\"\n\n    >>> from six import StringIO\n    >>> from zope.configuration import xmlconfig\n    >>> xmlconfig.xmlconfig(StringIO(configuration))\n\nMarking a tile as ESI-rendered\n------------------------------\n\nFor ESI rendering to be available, the tile must be marked with the ``IESIRendered`` marker interface.\nWe can create a dummy tile with this interface like so:\n\n.. code-block:: python\n\n    >>> from zope.interface import implementer\n    >>> from plone.tiles.interfaces import IESIRendered\n    >>> from plone.tiles import Tile\n\n    >>> @implementer(IESIRendered)\n    ... class SampleTile(Tile):\n    ...\n    ...     __name__ = 'sample.tile' # would normally be set by ZCML handler\n    ...\n    ...     def __call__(self):\n    ...         return '<html><head><title>Title</title></head><body><b>My tile</b></body></html>'\n\nAbove, we have created a simple HTML string.\nThis would normally be rendered using a page template.\n\nWe'll register this tile manually here.\nOrdinarily, of course, it would be registered via ZCML.\n\n.. code-block:: python\n\n    >>> from plone.tiles.type import TileType\n    >>> from zope.security.permission import Permission\n    >>> permission = Permission('dummy.Permission')\n    >>> sampleTileType = TileType(\n    ...     name=u'sample.tile',\n    ...     title=u'Sample tile',\n    ...     description=u'A tile used for testing',\n    ...     add_permission='dummy.Permission',\n    ...     view_permission='dummy.Permission',\n    ...     schema=None)\n\n    >>> from zope.component import provideAdapter, provideUtility\n    >>> from zope.interface import Interface\n    >>> from plone.tiles.interfaces import IBasicTile\n\n    >>> provideUtility(permission, name=u'dummy.Permission')\n    >>> provideUtility(sampleTileType, name=u'sample.tile')\n    >>> provideAdapter(SampleTile, (Interface, Interface), IBasicTile, name=u'sample.tile')\n\nESI lookup\n----------\n\nWhen a page is rendered\n(for example by a system like ``plone.app.blocks``, but see below),\na tile placeholder may be replaced by a link such as:\n\n.. code-block:: xml\n\n    <esi:include src=\"/path/to/context/@@sample.tile/tile1/@@esi-body\" />\n\nWhen this is resolved, it will return the body part of the tile.\nEqually, a tile in the head can be replaced by:\n\n.. code-block:: xml\n\n    <esi:include src=\"/path/to/context/@@sample.tile/tile1/@@esi-head\" />\n\nTo illustrate how this works,\nlet's create a sample context,\nlook up the view as it would be during traversal,\nand instantiate the tile,\nbefore looking up the ESI views and rendering them.\n\n.. code-block:: python\n\n    >>> from zope.interface import implementer\n    >>> from zope.publisher.browser import TestRequest\n\n    >>> class IContext(Interface):\n    ...     pass\n\n    >>> @implementer(IContext)\n    ... class Context(object):\n    ...     pass\n\n    >>> class IntegratedTestRequest(TestRequest):\n    ...     @property\n    ...     def environ(self):\n    ...         return self._environ\n\n    >>> context = Context()\n    >>> request = IntegratedTestRequest()\n\nThe following simulates traversal to ``context/@@sample.tile/tile1``\n\n.. code-block:: python\n\n    >>> from zope.interface import Interface\n    >>> from zope.component import getMultiAdapter\n    >>> tile = getMultiAdapter((context, request), name=u'sample.tile')\n    >>> tile = tile['tile1'] # simulates sub-path traversal\n\nThis tile should be ESI rendered:\n\n.. code-block:: python\n\n    >>> IESIRendered.providedBy(tile)\n    True\n\nAt this point, we can look up the ESI views:\n\n.. code-block:: python\n\n    >>> head = getMultiAdapter((tile, request), name='esi-head')\n    >>> head()\n    Traceback (most recent call last):\n    ...\n    zExceptions.unauthorized.Unauthorized: Unauthorized()\n\nBut we can only render them when we have the required permissions:\n\n    >>> from AccessControl.SecurityManagement import newSecurityManager\n    >>> from AccessControl.User import Super\n    >>> newSecurityManager(None, Super('manager', '', ['Manager'], []))\n    >>> print(head())\n    <title>Title</title>\n\n    >>> body = getMultiAdapter((tile, request), name='esi-body')\n    >>> print(body())\n    <b>My tile</b>\n\nTiles without heads or bodies\n-----------------------------\n\nIn general, tiles are supposed to return full HTML documents.\nThe ``esi-head`` and ``esi-body`` views are tolerant of tiles that do not.\nIf they cannot find a ``<head />`` or ``<body />`` element, respectively, they will return the underlying tile output unaltered.\n\nFor example:\n\n.. code-block:: python\n\n    >>> from plone.tiles.esi import ESITile\n    >>> class LazyTile(ESITile):\n    ...     __name__ = 'sample.esi1' # would normally be set by ZCML handler\n    ...     def __call__(self):\n    ...         return '<title>Page title</title>'\n\nWe won't bother to register this for this test, instead just instantiating it directly:\n\n.. code-block:: python\n\n    >>> tile = LazyTile(context, request)['tile1']\n\n    >>> IESIRendered.providedBy(tile)\n    True\n\n    >>> head = getMultiAdapter((tile, request), name='esi-head')\n    >>> print(head())\n    <title>Page title</title>\n\nOf course, the ESI body renderer would return the same thing,\nsince it can't extract a specific body either:\n\n.. code-block:: python\n\n    >>> body = getMultiAdapter((tile, request), name='esi-body')\n    >>> print(body())\n    <title>Page title</title>\n\nIn this case, we would likely end up with invalid HTML,\nsince the ``<title />`` tag is not allowed in the body.\nWhether and how to resolve this is left up to the ESI interpolation implementation.\n\nConvenience classes and placeholder rendering\n---------------------------------------------\n\nTwo convenience base classes can be found in the ``plone.tiles.esi`` module.\nThese extend the standard ``Tile`` and ``PersistentTile`` classes to provide the ``IESIRendered`` interface.\n\n* ``plone.tiles.esi.ESITile``, a transient, ESI-rendered tile\n* ``plone.tiles.esi.ESIPersistentTile``, a persistent, ESI-rendered tile\n\nThese are particularly useful if you are creating a template-only tile and want ESI rendering.\nFor example:\n\n.. code-block:: xml\n\n    <plone:tile\n        name=\"sample.esitile\"\n        title=\"An ESI-rendered tile\"\n        add_permission=\"plone.tiles.tests.DummyAdd\"\n        template=\"esitile.pt\"\n        class=\"plone.tiles.esi.ESITile\"\n        for=\"*\"\n        permission=\"zope.View\"\n        />\n\nAdditionally,\nthese base classes implement a ``__call__()`` method that will render a tile placeholder,\nif the request contains an ``X-ESI-Enabled`` header set to the literal 'true'.\n\nThe placeholder is a simple HTML ``<a />`` tag,\nwhich can be transformed into an ``<esi:include />`` tag using the helper function ``substituteESILinks()``.\nThe reason for this indirection is that the ``esi`` namespace is not allowed in HTML documents,\nand are liable to be stripped out by transforms using the ``libxml2`` / ``lxml`` HTML parser.\n\nLet us now create a simple ESI tile. To benefit from the default rendering,\nwe should implement the ``render()`` method instead of ``__call__()``. Setting\na page template as the ``index`` class variable or using the ``template``\nattribute to the ZCML directive will work also.\n\n.. code-block:: python\n\n    >>> from plone.tiles.esi import ESITile\n\n    >>> class SampleESITile(ESITile):\n    ...     __name__ = 'sample.esitile' # would normally be set by ZCML handler\n    ...\n    ...     def render(self):\n    ...         return '<html><head><title>Title</title></head><body><b>My ESI tile</b></body></html>'\n\n    >>> sampleESITileType = TileType(\n    ...     name=u'sample.esitile',\n    ...     title=u'Sample ESI tile',\n    ...     description=u'A tile used for testing ESI',\n    ...     add_permission='dummy.Permission',\n    ...     view_permission='dummy.Permission',\n    ...     schema=None)\n\n    >>> provideUtility(sampleESITileType, name=u'sample.esitile')\n    >>> provideAdapter(SampleESITile, (Interface, Interface), IBasicTile, name=u'sample.esitile')\n\nThe following simulates traversal to ``context/@@sample.esitile/tile1``\n\n.. code-block:: python\n\n    >>> tile = getMultiAdapter((context, request), name=u'sample.esitile')\n    >>> tile = tile['tile1'] # simulates sub-path traversal\n\nBy default, the tile renders as normal:\n\n.. code-block:: python\n\n    >>> print(tile())\n    <html><head><title>Title</title></head><body><b>My ESI tile</b></body></html>\n\nHowever, if we opt into ESI rendering via a request header, we get a different view:\n\n.. code-block:: python\n\n    >>> from plone.tiles.interfaces import ESI_HEADER_KEY\n    >>> request.environ[ESI_HEADER_KEY] = 'true'\n    >>> print(tile()) # doctest: +NORMALIZE_WHITESPACE\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n        <body>\n            <a class=\"_esi_placeholder\"\n               rel=\"esi\"\n               href=\"http://127.0.0.1/@@esi-body?\"></a>\n        </body>\n    </html>\n\nThis can be transformed into a proper ESI tag with ``substituteESILinks()``:\n\n.. code-block:: python\n\n    >>> from plone.tiles.esi import substituteESILinks\n    >>> print(substituteESILinks(tile())) # doctest: +NORMALIZE_WHITESPACE\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n    <html xmlns:esi=\"http://www.edge-delivery.org/esi/1.0\" xmlns=\"http://www.w3.org/1999/xhtml\">\n        <body>\n            <esi:include src=\"http://127.0.0.1/@@esi-body?\" />\n        </body>\n    </html>\n\nIt is also possible to render the ESI tile for the head.\nThis is done with a class variable 'head'\n(which would of course normally be set within the class):\n\n.. code-block:: python\n\n    >>> SampleESITile.head = True\n    >>> print(tile()) # doctest: +NORMALIZE_WHITESPACE\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\n        <body>\n            <a class=\"_esi_placeholder\"\n               rel=\"esi\"\n               href=\"http://127.0.0.1/@@esi-head?\"></a>\n        </body>\n    </html>\n\nChangelog\n=========\n\n.. You should *NOT* be adding new change log entries to this file.\n   You should create a file in the news directory instead.\n   For helpful instructions, please see:\n   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n\n.. towncrier release notes start\n\n2.2.2 (2020-04-22)\n------------------\n\nBug fixes:\n\n\n- Minor packaging updates. (#1)\n- Fixed tests on Travis.\n  [maurits] (#33)\n\n\n2.2.1 (2019-05-01)\n------------------\n\nBug fixes:\n\n\n- Fixed issue where creating a Mosaic page with shared content layout with filled rich text fields ended up having empty rich text fields, because the rich text field is marked primary (as it should be), and primary fields were never parsed from query string by default. (#30)\n\n\n2.2.0 (2018-11-21)\n------------------\n\nNew features:\n\n\n- Add support for Python 3. [pbauer] (#29)\n\n\nBug fixes:\n\n\n- Initialize towncrier. [gforcada] (#2548)\n\n\n2.1 (2018-07-05)\n----------------\n\n- Dependency on zope.app.publisher removed,\n  needed parts were moved to zope.browserpage long time ago.\n  This probably breaks Plone 4.2 support (removed).\n  [jensens]\n\n\n2.0.0 (2018-04-13)\n------------------\n\n- Fix license classifier.\n\n\n2.0.0b3 (2017-08-22)\n--------------------\n\nBreaking changes:\n\n- Fix querystring en-/decoder to always skip primary fields\n  [datakurre]\n\n\n2.0.0b2 (2017-03-29)\n--------------------\n\nBug fixes:\n\n- Do not swallow ``AttributeError`` inside ``index()`` on template rendering.\n  [hvelarde]\n\n- Fix code analysis errors.\n  [gforcada]\n\n\n2.0.0b1 (2017-02-24)\n--------------------\n\nBreaking changes:\n\n- Tiles no longer add relative ``X-Tile-Url``-header in ``__call__``.\n  Tiles still add absolute ``X-Tile-Url``-header during traversal, but\n  it gets removed after rendering when request is not CSRF-authorized.\n  [datakurre]\n\n- Generic ESI helper check now taht the request is authorized to render\n  the tile according to the registered view permission fo the tile.\n  [datakurre]\n\n- Transactions of requests to ESI helper views are automatically aborted,\n  because ESI requests should always be immutable GET requests\n  [datakurre]\n\n- plone.app.theming (transform) is now disabled with X-Theme-Disabled-header\n  for requests rendering tiles\n  [datakurre]\n\n- plone.protect's ProtectTransform is skipped for tile requests with correct\n  CSRF token prevent its side-effects on tile editors rendering tiles\n  individually\n  [datakurre]\n\nNew features:\n\n- Added X-Frame-Options -header for ESI-tile views with matching behavior\n  with plone.protect\n  [datakurre]\n\nBug fixes:\n\n- Fix issue where ESI-tile helper views didn't get correct\n  Cache-Control-headers, because ESI-helpers views were not acquisition\n  wrapped\n  [datakurre]\n\n\n1.8.2 (2017-01-10)\n------------------\n\nBug fixes:\n\n- Fix issue where transient tile was unable to encode data\n  with list of unicode strings\n  [datakurre]\n\n- Remove unused unittest2 requirement\n  [tomgross]\n\n\n1.8.1 (2016-11-24)\n------------------\n\nBugfix:\n\n- Fix encode error in nested unicodes (like in plone.app.querystring)\n  [tomgross]\n\n- Restructure testing\n  [tomgross]\n\n\n1.8.0 (2016-09-13)\n------------------\n\nNew features:\n\n  - Provide ignore_querystring form directive to mark particular tiles fields\n    that are not allowed to default data from query string data\n    [vangheem]\n\n\n1.7.1 (2016-09-12)\n------------------\n\n- Fix issue where collective.cover was broken, because internal changes in\n  default data managers\n  [datakurre]\n\n1.7.0 (2016-09-08)\n------------------\n\nNew features:\n\n- Option to customize storage layer with ITileDataStorage adapter\n  [datakurre]\n\n\n1.6.1 (2016-09-07)\n------------------\n\nBug fixes:\n\n- Reformat docs.\n  [gforcada]\n\n- Add coveralls shield.\n  [gforcada]\n\n\n1.6 (2016-06-27)\n----------------\n\n- Let TileType instances (tile registration utility) know about the view\n  permission too.\n  [jensens]\n\n\n1.5.2 (2016-03-28)\n------------------\n\n- Fix issue where ESI href was not properly replaced.\n  [jensens]\n\n- Add section \"ZCML Reference\" to README.rst.\n  [jensens]\n\n- PEP8, code-analysis, documentation and packaging fixes.\n  [jensens, mauritsvanrees]\n\n\n1.5.1 (2015-10-09)\n------------------\n\n- Fix decoding List type of Choice value types\n  [vangheem]\n\n\n1.5.0 (2015-09-04)\n------------------\n\n- Add support for overriding transient data manager with persistent data\n  manager by adding X-Tile-Persistent=1 into tile URL\n  [datakurre]\n\n- Fix persistent data manager to read its default from query string\n  [vangheem]\n\n1.4.0 (2015-05-25)\n------------------\n\n- Add support for encoding dictionary fields into tile URL\n  [datakurre]\n- Fix issue where saving or deleting transient tile data mutated the current request\n  [datakurre]\n- Fix issue where non-ascii characters in tile data raised UnicodeEncode/DecodeErrors\n  [datakurre]\n\n1.3.0 (2015-04-21)\n------------------\n\n- Fix edit_permission and delete_permission to default\n  to add_permission only in TileType constructor\n  [datakurre]\n\n- Fix argument order in TileType constructor call\n  [datakurre]\n\n- Fix absolute_url-adapter to fallback to relative URL\n  [datakurre]\n\n- Add response to include absolute X-Tile-Url header\n  [bloodbare]\n\n1.2 (2012-11-07)\n----------------\n\n- Adding icon property for tiletype\n  [garbas]\n\n- Url that we pass via X-Tile-Url should be relative to current context\n  [garbas]\n\n- Adding support for more robust permissions for edit and delete on tiles\n  [cewing calvinhp]\n\n1.1 (2012-06-22)\n----------------\n\n- X-Tile-Uid header is passed on tile view containing tile's id.\n  [garbas]\n\n- PEP 8/Pyflakes (ignoring E121, E123, E126, E127 and E501).\n  [hvelarde]\n\n1.0 (2012-05-14)\n----------------\n\n- Refactor ESI support. To use the ``ESITile`` and ``ESIPersistentTile``\n  base classes, you should either use a template assigned via ZCML or\n  override the ``render()`` method. See ``esi.rst`` for full details.\n  [optilude]\n\n- Internationalized title and description of the tile directive.\n  [vincentfretin]\n\n- Use a  json-encoded parameter in transient tiles as first option.\n  [dukebody]\n\n- Use adapters for the Zope Publisher type casting\n  [dukebody]\n\n- Conditionaly support z3c.relationfield's RelationChoice fields\n  [dukebody]\n\n- Ignore type casting for fields without fixed type, like zope.schema.Choice\n  [dukebody]\n\n1.0a1 (2010-05-17)\n------------------\n\n- Initial release.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/plone/plone.tiles", "keywords": "plone tiles", "license": "GPL version 2", "maintainer": "", "maintainer_email": "", "name": "plone.tiles", "package_url": "https://pypi.org/project/plone.tiles/", "platform": "", "project_url": "https://pypi.org/project/plone.tiles/", "project_urls": {"Homepage": "https://github.com/plone/plone.tiles"}, "release_url": "https://pypi.org/project/plone.tiles/2.2.2/", "requires_dist": ["plone.subrequest", "setuptools", "zope.annotation", "zope.browserpage", "zope.component", "zope.configuration", "zope.interface", "zope.publisher", "zope.schema", "zope.security", "zope.traversing", "Zope2", "plone.testing[z2,zca] ; extra == 'test'", "plone.rfc822 ; extra == 'test'"], "requires_python": "", "summary": "APIs for managing tiles", "version": "2.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.org/plone/plone.tiles\" rel=\"nofollow\"><img alt=\"Travis CI badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d106b09a06093e0c61998d46bbd0229c104e2f3/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f706c6f6e652f706c6f6e652e74696c65732e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/plone/plone.tiles\" rel=\"nofollow\"><img alt=\"Coveralls badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3f4b5c2d144806cf61537add1958dd1d2040c53/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f706c6f6e652f706c6f6e652e74696c65732f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<p><tt>plone.tiles</tt> implements a low-level, non-Plone/Zope2-specific support for creating \u201ctiles\u201d.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id21\" rel=\"nofollow\">Introduction</a><ul>\n<li><a href=\"#creating-a-simple-tile\" id=\"id22\" rel=\"nofollow\">Creating a Simple Tile</a></li>\n<li><a href=\"#zcml-reference\" id=\"id23\" rel=\"nofollow\">ZCML Reference</a></li>\n<li><a href=\"#further-reading\" id=\"id24\" rel=\"nofollow\">Further Reading</a></li>\n</ul>\n</li>\n<li><a href=\"#tiles-in-detail\" id=\"id25\" rel=\"nofollow\">Tiles in detail</a><ul>\n<li><a href=\"#a-simple-transient-tile\" id=\"id26\" rel=\"nofollow\">A simple transient tile</a></li>\n<li><a href=\"#tile-traversal\" id=\"id27\" rel=\"nofollow\">Tile traversal</a></li>\n<li><a href=\"#transient-tile-data\" id=\"id28\" rel=\"nofollow\">Transient tile data</a></li>\n<li><a href=\"#the-tile-data-manager\" id=\"id29\" rel=\"nofollow\">The tile data manager</a></li>\n<li><a href=\"#persistent-tiles\" id=\"id30\" rel=\"nofollow\">Persistent tiles</a></li>\n<li><a href=\"#overriding-transient-data-with-persistent\" id=\"id31\" rel=\"nofollow\">Overriding transient data with persistent</a></li>\n<li><a href=\"#tile-urls\" id=\"id32\" rel=\"nofollow\">Tile URLs</a></li>\n</ul>\n</li>\n<li><a href=\"#zcml-directive\" id=\"id33\" rel=\"nofollow\">ZCML directive</a></li>\n<li><a href=\"#esi-support\" id=\"id34\" rel=\"nofollow\">ESI support</a><ul>\n<li><a href=\"#marking-a-tile-as-esi-rendered\" id=\"id35\" rel=\"nofollow\">Marking a tile as ESI-rendered</a></li>\n<li><a href=\"#esi-lookup\" id=\"id36\" rel=\"nofollow\">ESI lookup</a></li>\n<li><a href=\"#tiles-without-heads-or-bodies\" id=\"id37\" rel=\"nofollow\">Tiles without heads or bodies</a></li>\n<li><a href=\"#convenience-classes-and-placeholder-rendering\" id=\"id38\" rel=\"nofollow\">Convenience classes and placeholder rendering</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id39\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id40\" rel=\"nofollow\">2.2.2 (2020-04-22)</a></li>\n<li><a href=\"#id2\" id=\"id41\" rel=\"nofollow\">2.2.1 (2019-05-01)</a></li>\n<li><a href=\"#id3\" id=\"id42\" rel=\"nofollow\">2.2.0 (2018-11-21)</a></li>\n<li><a href=\"#id4\" id=\"id43\" rel=\"nofollow\">2.1 (2018-07-05)</a></li>\n<li><a href=\"#id5\" id=\"id44\" rel=\"nofollow\">2.0.0 (2018-04-13)</a></li>\n<li><a href=\"#b3-2017-08-22\" id=\"id45\" rel=\"nofollow\">2.0.0b3 (2017-08-22)</a></li>\n<li><a href=\"#b2-2017-03-29\" id=\"id46\" rel=\"nofollow\">2.0.0b2 (2017-03-29)</a></li>\n<li><a href=\"#b1-2017-02-24\" id=\"id47\" rel=\"nofollow\">2.0.0b1 (2017-02-24)</a></li>\n<li><a href=\"#id6\" id=\"id48\" rel=\"nofollow\">1.8.2 (2017-01-10)</a></li>\n<li><a href=\"#id7\" id=\"id49\" rel=\"nofollow\">1.8.1 (2016-11-24)</a></li>\n<li><a href=\"#id8\" id=\"id50\" rel=\"nofollow\">1.8.0 (2016-09-13)</a></li>\n<li><a href=\"#id9\" id=\"id51\" rel=\"nofollow\">1.7.1 (2016-09-12)</a></li>\n<li><a href=\"#id10\" id=\"id52\" rel=\"nofollow\">1.7.0 (2016-09-08)</a></li>\n<li><a href=\"#id11\" id=\"id53\" rel=\"nofollow\">1.6.1 (2016-09-07)</a></li>\n<li><a href=\"#id12\" id=\"id54\" rel=\"nofollow\">1.6 (2016-06-27)</a></li>\n<li><a href=\"#id13\" id=\"id55\" rel=\"nofollow\">1.5.2 (2016-03-28)</a></li>\n<li><a href=\"#id14\" id=\"id56\" rel=\"nofollow\">1.5.1 (2015-10-09)</a></li>\n<li><a href=\"#id15\" id=\"id57\" rel=\"nofollow\">1.5.0 (2015-09-04)</a></li>\n<li><a href=\"#id16\" id=\"id58\" rel=\"nofollow\">1.4.0 (2015-05-25)</a></li>\n<li><a href=\"#id17\" id=\"id59\" rel=\"nofollow\">1.3.0 (2015-04-21)</a></li>\n<li><a href=\"#id18\" id=\"id60\" rel=\"nofollow\">1.2 (2012-11-07)</a></li>\n<li><a href=\"#id19\" id=\"id61\" rel=\"nofollow\">1.1 (2012-06-22)</a></li>\n<li><a href=\"#id20\" id=\"id62\" rel=\"nofollow\">1.0 (2012-05-14)</a></li>\n<li><a href=\"#a1-2010-05-17\" id=\"id63\" rel=\"nofollow\">1.0a1 (2010-05-17)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id21\" rel=\"nofollow\">Introduction</a></h2>\n<p>For the purposes of this package,\na tile is a browser view and an associated utility providing some metadata about that view.\nThe metadata includes a title and description,\nan \u2018add\u2019 permission and optionally a schema interface describing configurable aspects of the tile.\nThe idea is that a UI (such as Mosaic) can present the user with a list of insertable tiles and optionally render a form to configure the tile upon insertion.</p>\n<p>A tile is inserted into a layout as a link:</p>\n<pre><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"tile\"</span> <span class=\"na\">target=</span><span class=\"s\">\"placeholder\"</span> <span class=\"na\">href=</span><span class=\"s\">\"./@@sample.tile/tile1?option1=value1\"</span> <span class=\"nt\">/&gt;</span>\n</pre>\n<p>The sub-path (<tt>tile1</tt> in this case) is used to set the tile <tt>id</tt> attribute.\nThis allows the tile to know its unique id, and, in the case of persistent tiles, look up its data.\n<tt>sample.tile</tt> is the name of the browser view that implements the tile.\nThis is made available as the <tt>__name__</tt> attribute.\nOther parameters may be turned into tile data, available under the <tt>data</tt> attribute, a dict, for regular tiles.\nFor persistent tiles\n(those deriving from the <tt>PersistentTile</tt> base class),\nthe data is fetched from annotations instead,\nbased on the tile id.</p>\n<p>There are three interfaces describing tiles in this package:</p>\n<dl>\n<dt><tt>IBasicTile</tt></dt>\n<dd>is the low-level interface for tiles.\nIt extends <tt>IBrowserView</tt> to describe the semantics of the <tt>__name__</tt> and  <tt>id</tt> attributes.</dd>\n<dt><tt>ITile</tt></dt>\n<dd>describes a tile that can be configured with some data.\nThe data is accessible via a dict called <tt>data</tt>.\nThe default implementation of this interface, <tt>plone.tiles.Tile</tt>,\nwill use the schema of the tile type and the query string (<tt>self.request.form</tt>) to construct that dictionary.\nThis interface also describes an attribute <tt>url</tt>,\nwhich gives the canonical tile URL,\nincluding the id sub-path and any query string parameters.\n(Note that tiles also correctly implement <tt>IAbsoluteURL</tt>.)</dd>\n<dt><tt>IPersistentTile</tt></dt>\n<dd>describes a tile that stores its configuration in object annotations,\nand is needed when configuration values cannot be encoded into a query string.\nThe default implementation is in <tt>plone.tiles.PersistentTile</tt>.\nTo make it possible to have several tiles of a given type on the same layout,\nthe annotations are keyed by the tile <tt>__name__</tt>.</dd>\n</dl>\n<p>Internally tiles are described by <tt>ITileType</tt>.\nIt contains attributes for the tile name, title, description, add permission and schema (if required).</p>\n<p>A properly configured tile consists of</p>\n<ul>\n<li>a utility providing <tt>ITileType</tt> with the same name as the tile browser view.</li>\n<li>a browser view providing <tt>IBasicTile</tt> or one of its derivatives.</li>\n</ul>\n<p>The directive <tt>&lt;plone:tile ... /&gt;</tt> is used to register both of these components in one go.</p>\n<p>To support creation of appropriate tile links, <tt>plone.tiles.data</tt> contains two methods:</p>\n<ol>\n<li><tt>encode()</tt> and</li>\n<li><tt>decode()</tt></li>\n</ol>\n<p>to help turn a data dictionary into a query string and turn a <cite>request.form</cite> dict into a data dict that complies with a tile\u2019s schema interface.</p>\n<p>In addition to the default tile configuration sources\n(transient query strings for ITile and persistent annotations for IPersistentTile),\nit is possible to define custom tile configuration sources by registering dictionary like\nITileDataStorage-adapter for your context, request and tile interface.\nWill be accessed dictionary like by tile data managers with tile id and its data dictionary.</p>\n<div id=\"creating-a-simple-tile\">\n<h3><a href=\"#id22\" rel=\"nofollow\">Creating a Simple Tile</a></h3>\n<p>The most basic tile looks like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plone.tiles</span> <span class=\"kn\">import</span> <span class=\"n\">Tile</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTile</span><span class=\"p\">(</span><span class=\"n\">Tile</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">u</span><span class=\"s1\">'&lt;html&gt;&lt;body&gt;&lt;p&gt;Hello world&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'</span>\n</pre>\n<p>Note that the tile is expected to return a complete HTML document.\nThis will be interpolated into the page output according to the following rules:</p>\n<ul>\n<li>The contents of the tile\u2019s <tt>&lt;head /&gt;</tt> section is appended to the output document\u2019s <tt>&lt;head /&gt;</tt> section.</li>\n<li>The contents of the tile\u2019s <tt>&lt;body /&gt;</tt> section will replace the tile placeholder as indicated by the tile link.</li>\n</ul>\n<p>Note that this package does <em>not</em> provide these interpolations.\nFor a Plone implementation of the interpolation algorithm, see <a href=\"http://pypi.python.org/pypi/plone.app.blocks\" rel=\"nofollow\">plone.app.blocks</a>.</p>\n<p>If you require a persistent tile, subclass <tt>plone.tiles.PersistentTile</tt> instead.\nYou may also need a schema interface if you want a configurable transient or persistent tile.</p>\n<p>To register the tile, use ZCML like this:</p>\n<pre><span class=\"nt\">&lt;configure</span> <span class=\"na\">xmlns:plone=</span><span class=\"s\">\"http://namespaces.plone.org/plone\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;plone:tile</span>\n        <span class=\"na\">name=</span><span class=\"s\">\"sample.tile\"</span>\n\n        <span class=\"na\">title=</span><span class=\"s\">\"A title for the tile\"</span>\n        <span class=\"na\">description=</span><span class=\"s\">\"My tile's description\"</span>\n        <span class=\"na\">add_permission=</span><span class=\"s\">\"my.add.Permission\"</span>\n        <span class=\"na\">schema=</span><span class=\"s\">\".interfaces.IMyTileSchema\"</span>\n\n        <span class=\"na\">class=</span><span class=\"s\">\".mytile.MyTile\"</span>\n        <span class=\"na\">permission=</span><span class=\"s\">\"zope.Public\"</span>\n        <span class=\"na\">for=</span><span class=\"s\">\"*\"</span>\n        <span class=\"na\">layer=</span><span class=\"s\">\"*\"</span>\n        <span class=\"nt\">/&gt;</span>\n\n<span class=\"nt\">&lt;/configure&gt;</span>\n</pre>\n<p>The first five attributes describe the tile by configuring an appropriate <tt>ITileType</tt> directive.\nThe rest mimics the <tt>&lt;browser:page /&gt;</tt> directive,\nso you can specify a <tt>template</tt> file and omit the <tt>class</tt>, or use both a <tt>template</tt> and <tt>class</tt>.</p>\n<p>If you want to register a persistent tile with a custom schema, but a template only, you can do e.g.:</p>\n<pre><span class=\"nt\">&lt;plone:tile</span>\n    <span class=\"na\">name=</span><span class=\"s\">\"sample.persistenttile\"</span>\n    <span class=\"na\">title=</span><span class=\"s\">\"A title for the tile\"</span>\n    <span class=\"na\">description=</span><span class=\"s\">\"My tile's description\"</span>\n    <span class=\"na\">add_permission=</span><span class=\"s\">\"my.add.Permission\"</span>\n    <span class=\"na\">schema=</span><span class=\"s\">\".interfaces.IMyTileSchema\"</span>\n    <span class=\"na\">class=</span><span class=\"s\">\"plone.tiles.PersistentTile\"</span>\n    <span class=\"na\">template=</span><span class=\"s\">\"mytile.pt\"</span>\n    <span class=\"na\">permission=</span><span class=\"s\">\"zope.Public\"</span>\n    <span class=\"na\">for=</span><span class=\"s\">\"*\"</span>\n    <span class=\"nt\">/&gt;</span>\n</pre>\n<p>If you want to override an existing tile, e.g. with a new layer or more specific context,\nyou <em>must</em> omit the tile metadata (title, description, icon, add permission or schema).\nIf you include any metadata you will get a conflict error on Zope startup.\nThis example shows how to use a different template for our tile:</p>\n<pre><span class=\"nt\">&lt;plone:tile</span>\n    <span class=\"na\">name=</span><span class=\"s\">\"sample.persistenttile\"</span>\n    <span class=\"na\">template=</span><span class=\"s\">\"override.pt\"</span>\n    <span class=\"na\">permission=</span><span class=\"s\">\"zope.Public\"</span>\n    <span class=\"na\">for=</span><span class=\"s\">\"*\"</span>\n    <span class=\"na\">layer=</span><span class=\"s\">\".interfaces.IMyLayer\"</span>\n    <span class=\"nt\">/&gt;</span>\n</pre>\n</div>\n<div id=\"zcml-reference\">\n<h3><a href=\"#id23\" rel=\"nofollow\">ZCML Reference</a></h3>\n<p>The <tt>plone:tile</tt> directive uses the namespace <tt><span class=\"pre\">xmlns:plone=\"http://namespaces.plone.org/plone\"</span></tt>.\nIn order to enable it loading of its <tt>meta.zcml</tt> is needed, use:</p>\n<pre><span class=\"nt\">&lt;include</span> <span class=\"na\">package=</span><span class=\"s\">\"plone.tiles\"</span> <span class=\"na\">file=</span><span class=\"s\">\"meta.zcml\"</span> <span class=\"nt\">/&gt;</span>\n</pre>\n<p>When registering a tile, in the background two registrations are done:</p>\n<ol>\n<li><p>How to <strong>add</strong> the tile (registered as a utility component as an instance of <tt>plone.tiles.type.TileType</tt>).</p>\n<p>It is possible to register a tile without adding capabilities.\nHowever, such a tile needs to be directly called, there won\u2019t be any TTW adding possible.</p>\n<p>This registration can be done once only.</p>\n<p>This registration uses the following attributes:</p>\n<ul>\n<li><tt>name</tt> (required)</li>\n<li><tt>title</tt> (required)</li>\n<li><tt>description</tt> (optional)</li>\n<li><tt>icon</tt> (optional)</li>\n<li><tt>permission</tt> (required)</li>\n<li><tt>add_permission</tt> (required for adding capabilities)</li>\n<li><tt>edit_permission</tt> (optional, default to add_permission)</li>\n<li><tt>delete_permission</tt> (optional, default to add_permission)</li>\n<li><tt>schema</tt> (optional)</li>\n</ul>\n</li>\n<li><p>How to <strong>render</strong> the tile (as a usual page).</p>\n<p>It is possible to register different renderers for the same <tt>name</tt> but for different contexts (<tt>for</tt> or <tt>layer</tt>).</p>\n<p>This registration uses the following attributes:</p>\n<ul>\n<li><tt>name</tt> (required)</li>\n<li><tt>for</tt> (optional)</li>\n<li><tt>layer</tt> (optional)</li>\n<li><tt>class</tt> (this or <tt>template</tt> or both is required)</li>\n<li><tt>template</tt> (this or <tt>class</tt> or both is required)</li>\n<li><tt>permission</tt> (required)</li>\n</ul>\n</li>\n</ol>\n<p>The <strong>directives attributes</strong> have the following meaning:</p>\n<dl>\n<dt><tt>name</tt></dt>\n<dd>A unique, dotted name for the tile.</dd>\n<dt><tt>title</tt></dt>\n<dd>A user friendly title, used when configuring the tile.</dd>\n<dt><tt>description</tt></dt>\n<dd>A longer summary of the tile\u2019s purpose and function.</dd>\n<dt><tt>icon</tt></dt>\n<dd>Image that represents tile purpose and function.</dd>\n<dt><tt>permission</tt></dt>\n<dd>Name of the permission required to view the tile.</dd>\n<dt><tt>add_permission</tt></dt>\n<dd>Name of the permission required to instantiate the tile.</dd>\n<dt><tt>edit_permission</tt></dt>\n<dd>Name of the permission required to modify the tile.\nDefaults to the <tt>add_permission</tt>.</dd>\n<dt><tt>delete_permission</tt></dt>\n<dd>Name of the permission required to remove the tile.\nDefaults to the <tt>add_permission</tt>.</dd>\n<dt><tt>schema</tt></dt>\n<dd>Configuration schema for the tile.\nThis is used to create standard add/edit forms.</dd>\n<dt><tt>for</tt></dt>\n<dd>The interface or class this tile is available for.</dd>\n<dt><tt>layer</tt></dt>\n<dd>The layer (request marker interface) the tile is available for.</dd>\n<dt><tt>class</tt></dt>\n<dd>Class implementing this tile. A browser view providing <tt>IBasicTile</tt> or one of its derivatives.</dd>\n<dt><tt>template</tt></dt>\n<dd>The name of a template that renders this tile.\nRefers to a file containing a page template.</dd>\n</dl>\n</div>\n<div id=\"further-reading\">\n<h3><a href=\"#id24\" rel=\"nofollow\">Further Reading</a></h3>\n<p>See <cite>tiles.rst</cite> and <cite>directives.rst</cite> for more details.</p>\n</div>\n</div>\n<div id=\"tiles-in-detail\">\n<h2><a href=\"#id25\" rel=\"nofollow\">Tiles in detail</a></h2>\n<p>Tiles are a form of view component used to compose pages.\nThink of a tile as a view describing one part of a page,\nthat can be configured with some data described by a schema and inserted into a layout via a dedicated GUI.</p>\n<p>Like a browser view, a tile can be traversed to and published on its own.\nThe tile should then return a full HTML page,\nincluding a &lt;head /&gt; with any required resources,\nand a &lt;body /&gt; with the visible part of the tile.\nThis will then be merged into the page, using a system such as <tt>plone.app.blocks</tt>.</p>\n<p>The API in this package provides support for tiles being configured according to a schema,\nwith data either passed on the query string (transient tiles) or retrieved from annotations (persistent tiles).</p>\n<p>Note that there is no direct UI support in this package,\nso the forms that allow users to construct and edit tiles must live elsewhere.\nYou may be interested in <tt>plone.app.tiles</tt> and <tt>plone.app.mosaic</tt> for that purpose.</p>\n<p>To use the package, you should first load its ZCML configuration:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\\n</span><span class=\"s2\">... &lt;configure\n...      xmlns=\"http://namespaces.zope.org/zope\"\n...      xmlns:plone=\"http://namespaces.plone.org/plone\"\n...      i18n_domain=\"plone.tiles.tests\"&gt;\n...\n...     &lt;include package=\"zope.component\" file=\"meta.zcml\" /&gt;\n...     &lt;include package=\"zope.browserpage\" file=\"meta.zcml\" /&gt;\n...\n...     &lt;include package=\"plone.tiles\" file=\"meta.zcml\" /&gt;\n...     &lt;include package=\"plone.tiles\" /&gt;\n...\n... &lt;/configure&gt;\n... \"\"\"</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">six</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.configuration</span> <span class=\"kn\">import</span> <span class=\"n\">xmlconfig</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">xmlconfig</span><span class=\"o\">.</span><span class=\"n\">xmlconfig</span><span class=\"p\">(</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"p\">))</span>\n</pre>\n<div id=\"a-simple-transient-tile\">\n<h3><a href=\"#id26\" rel=\"nofollow\">A simple transient tile</a></h3>\n<p>A basic tile is a view that implements the <tt>ITile</tt> interface.\nThe easiest way to do this is to subclass the <tt>Tile</tt> class:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles</span> <span class=\"kn\">import</span> <span class=\"n\">Tile</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">SampleTile</span><span class=\"p\">(</span><span class=\"n\">Tile</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"s1\">'sample.tile'</span> <span class=\"c1\"># would normally be set by a ZCML handler</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s1\">'&lt;html&gt;&lt;body&gt;&lt;b&gt;My tile&lt;/b&gt;&lt;/body&gt;&lt;/html&gt;'</span>\n</pre>\n<p>The tile is a browser view:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">ITile</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ITile</span><span class=\"o\">.</span><span class=\"n\">implementedBy</span><span class=\"p\">(</span><span class=\"n\">SampleTile</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.publisher.interfaces.browser</span> <span class=\"kn\">import</span> <span class=\"n\">IBrowserView</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">IBrowserView</span><span class=\"o\">.</span><span class=\"n\">implementedBy</span><span class=\"p\">(</span><span class=\"n\">SampleTile</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>The tile instance has a <tt>__name__</tt> attribute\n(normally set at class level by the <tt>&lt;plone:tile /&gt;</tt> ZCML directive),\nas well as a property <tt>id</tt>.\nThe id may be set explicitly, either in code, or by sub-path traversal.\nFor example, if the tile name is <tt>example.tile</tt>,\nthe id may be set to <tt>tile1</tt> using an URL like <tt><span class=\"pre\">http://example.com/foo/@@example.tile/tile1</span></tt>.</p>\n<p>This tile is registered as a normal browser view,\nalongside a utility that provides some information about the tile itself.\nNormally, this is done using the <tt>&lt;plone:tile /&gt;</tt> directive.\nHere\u2019s how to create one manually:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.type</span> <span class=\"kn\">import</span> <span class=\"n\">TileType</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sampleTileType</span> <span class=\"o\">=</span> <span class=\"n\">TileType</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"sa\">u</span><span class=\"s1\">'Sample tile'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'dummy.Permission'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'dummy.Permission'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'A tile used for testing'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>The name should match the view name and the name the utility is registered under.\nThe title and description may be used by the UI.\nThe add permission is the name of a permission that will be required to insert the tile.\nThe schema attribute may be used to indicate schema interface describing the tile\u2019s configurable data - more on this below.</p>\n<p>To register a tile in ZCML, we could do:</p>\n<pre><span class=\"nt\">&lt;plone:tile</span>\n    <span class=\"na\">name=</span><span class=\"s\">\"sample.tile\"</span>\n    <span class=\"na\">title=</span><span class=\"s\">\"Sample tile\"</span>\n    <span class=\"na\">description=</span><span class=\"s\">\"A tile used for testing\"</span>\n    <span class=\"na\">add_permission=</span><span class=\"s\">\"dummy.Permission\"</span>\n    <span class=\"na\">class=</span><span class=\"s\">\".mytiles.SampleTile\"</span>\n    <span class=\"na\">for=</span><span class=\"s\">\"*\"</span>\n    <span class=\"na\">permission=</span><span class=\"s\">\"zope.Public\"</span>\n    <span class=\"nt\">/&gt;</span>\n</pre>\n<div>\n<p>Note</p>\n<p>The tile name should be a dotted name, prefixed by a namespace you control.\nIt\u2019s a good idea to use a package name for this purpose.</p>\n</div>\n<p>It is also possible to specify a <tt>layer</tt> or <tt>template</tt> like the <tt>browser:page</tt> directive, as well as a <tt>schema</tt>,\nwhich we will describe below.</p>\n<p>We\u2019ll register the sample tile directly here, for later testing.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">provideAdapter</span><span class=\"p\">,</span> <span class=\"n\">provideUtility</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IBasicTile</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideUtility</span><span class=\"p\">(</span><span class=\"n\">sampleTileType</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideAdapter</span><span class=\"p\">(</span><span class=\"n\">SampleTile</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">,</span> <span class=\"n\">Interface</span><span class=\"p\">),</span> <span class=\"n\">IBasicTile</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"tile-traversal\">\n<h3><a href=\"#id27\" rel=\"nofollow\">Tile traversal</a></h3>\n<p>Tiles are publishable as a normal browser view.\nThey will normally be called with a sub-path that specifies a tile id.\nThis allows tiles to be made aware of their instance name.\nThe id is unique within the page layout where the tile is used,\nand may be the basis for looking up tile data.</p>\n<p>For example, a tile may be saved in a layout as a link like:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"tile\"</span> <span class=\"na\">target</span><span class=\"o\">=</span><span class=\"s\">\"mytile\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"./@@sample.tile/tile1\"</span> <span class=\"p\">/&gt;</span>\n</pre>\n<p>(The idea here is that the tile link tells the rendering algorithm to replace\nthe element with id <tt>mytile</tt> with the body of the rendered tile - see\n<tt>plone.app.blocks</tt> for details).</p>\n<p>Let\u2019s create a sample context,\nlook up the view as it would be during traversal,\nand verify how the tile is instantiated.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">getMultiAdapter</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">classImplements</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implementer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.publisher.browser</span> <span class=\"kn\">import</span> <span class=\"n\">TestRequest</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.annotation.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IAnnotations</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.annotation.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IAttributeAnnotatable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">classImplements</span><span class=\"p\">(</span><span class=\"n\">TestRequest</span><span class=\"p\">,</span> <span class=\"n\">IAttributeAnnotatable</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">IContext</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IContext</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Context</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'tile1'</span><span class=\"p\">]</span> <span class=\"c1\"># simulates sub-path traversal</span>\n</pre>\n<p>The tile will now be aware of its name and id:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">,</span> <span class=\"n\">SampleTile</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">__parent__</span> <span class=\"ow\">is</span> <span class=\"n\">context</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">id</span>\n<span class=\"s1\">'tile1'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"s1\">'sample.tile'</span>\n</pre>\n<p>The sub-path traversal is implemented using a custom <tt>__getitem__()</tt> method.\nTo look up a view on a tile,\nyou can traverse to it <em>after</em> you\u2019ve traversed to the id sub-path:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">adapts</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.publisher.browser</span> <span class=\"kn\">import</span> <span class=\"n\">BrowserView</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.publisher.interfaces.browser</span> <span class=\"kn\">import</span> <span class=\"n\">IDefaultBrowserLayer</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">TestView</span><span class=\"p\">(</span><span class=\"n\">BrowserView</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">adapts</span><span class=\"p\">(</span><span class=\"n\">SampleTile</span><span class=\"p\">,</span> <span class=\"n\">IDefaultBrowserLayer</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s1\">'Dummy view'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideAdapter</span><span class=\"p\">(</span><span class=\"n\">TestView</span><span class=\"p\">,</span> <span class=\"n\">provides</span><span class=\"o\">=</span><span class=\"n\">Interface</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'test-view'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'test-view'</span><span class=\"p\">]()</span>\n<span class=\"s1\">'Dummy view'</span>\n</pre>\n<p>If there is no view and we have an id already, we will get a <tt>KeyError</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'not-known'</span><span class=\"p\">]</span> <span class=\"c1\"># doctest: +ELLIPSIS</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"s1\">'not-known'</span>\n</pre>\n<p>To ensure consistency with Zope\u2019s various tangles publication machines,\nit is also possible to traverse using the <tt>publishTraverse</tt> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">publishTraverse</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s1\">'tile1'</span><span class=\"p\">)</span> <span class=\"c1\"># simulates sub-path traversal</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">,</span> <span class=\"n\">SampleTile</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">__parent__</span> <span class=\"ow\">is</span> <span class=\"n\">context</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">id</span>\n<span class=\"s1\">'tile1'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"s1\">'sample.tile'</span>\n</pre>\n</div>\n<div id=\"transient-tile-data\">\n<h3><a href=\"#id28\" rel=\"nofollow\">Transient tile data</a></h3>\n<p>Let us now consider how tiles may have data.\nIn the simplest case, tile data is passed on the query string, and described according to a schema.\nA simple schema may look like:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">zope.schema</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">ISampleTileData</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">TextLine</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Tile title'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">cssClass</span> <span class=\"o\">=</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">ASCIILine</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'CSS class to apply'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Number of things to show in the tile'</span><span class=\"p\">)</span>\n</pre>\n<p>We would normally have listed this interface when registering this tile in ZCML.\nWe can simply update the utility here.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sampleTileType</span><span class=\"o\">.</span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">ISampleTileData</span>\n</pre>\n<p>Tile data is represented by a simple dictionary. For example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'My title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">}</span>\n</pre>\n<p>The idea is that a tile add form is built from the schema interface, and its data saved to a dictionary.</p>\n<p>For transient tiles,\nthis data is then encoded into the tile query string.\nTo help with this,\na utility function can be used to encode a dict to a query string,\napplying Zope form marshalers according to the types described in the schema:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.data</span> <span class=\"kn\">import</span> <span class=\"n\">encode</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ISampleTileData</span><span class=\"p\">)</span>\n<span class=\"s1\">'title=My+title&amp;cssClass=foo&amp;count%3Along=5'</span>\n</pre>\n<p>The <tt>count%3Along=5</tt> bit is the encoded version of <tt>count:long=5</tt>.</p>\n<p>Note that not all field types may be saved.\nIn particular, object, interface, set or frozen set fields may not be saved, and will result in a <tt>KeyError</tt>.\nLengthy text fields or bytes fields with binary data may also be a problem.\nFor these types of fields,\nlook to use persistent tiles instead.</p>\n<p>Furthermore, the conversion may not be perfect.\nFor example, Zope\u2019s form marshalers cannot distinguish between unicode and ascii fields.\nTherefore, there is a corresponding <tt>decode()</tt> method that may be used to ensure that the values match the schema:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">marshaled</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'My tile'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'foo'</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.data</span> <span class=\"kn\">import</span> <span class=\"n\">decode</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">marshaled</span><span class=\"p\">,</span> <span class=\"n\">ISampleTileData</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'My tile'</span><span class=\"p\">)]</span>\n</pre>\n<p>When saved into a layout, the tile link would now look like:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"tile\"</span> <span class=\"na\">target</span><span class=\"o\">=</span><span class=\"s\">\"mytile\"</span>\n  <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"./@@sample.tile/tile1?title=My+title&amp;count%3Along=5&amp;cssClass=foo\"</span> <span class=\"p\">/&gt;</span>\n</pre>\n<p>Let\u2019s simulate traversal once more and see how the data is now available to the tile instance:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'My title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'foo'</span><span class=\"p\">})</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'tile1'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'My title'</span><span class=\"p\">)]</span>\n</pre>\n<p>Notice also how the data has been properly decoded according to the schema.</p>\n<p>Transient tiles will get their data directly from the request parameters but,\nif a <cite>_tiledata</cite> JSON-encoded parameter is present in the request,\nthis one will be used instead:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'My title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'_tiledata'</span><span class=\"p\">:</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Your title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'bar'</span><span class=\"p\">})</span>\n<span class=\"o\">...</span>     <span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'tile1'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'Your title'</span><span class=\"p\">)]</span>\n</pre>\n<p>This way we can use transient tiles safely in contexts where the tile data can be confused with raw data coming from a form, e.g. in an edit form.</p>\n</div>\n<div id=\"the-tile-data-manager\">\n<h3><a href=\"#id29\" rel=\"nofollow\">The tile data manager</a></h3>\n<p>The <tt>data</tt> attribute is a convenience attribute to get hold of a (cached) copy of the data returned by an <tt>ITileDataManager</tt>.\nThis interface provides three methods:\n<tt>get()</tt>, to return the tile\u2019s data,\n<tt>set()</tt>, to update it with a new dictionary of data,\nand <tt>delete()</tt>, to delete the data.</p>\n<p>This adapter is mostly useful for writing UI around tiles.\nUsing our tile above, we can get the data like so:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">ITileDataManager</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dataManager</span> <span class=\"o\">=</span> <span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dataManager</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>We can also update the tile data:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dataManager</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">({</span><span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Another title'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">dataManager</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'Another title'</span><span class=\"p\">)]</span>\n</pre>\n<p>The data can also be deleted:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dataManager</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">dataManager</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)]</span>\n</pre>\n<p>Note that in the case of a transient tile,\nall we are doing is modifying the <tt>form</tt> dictionary of the request\n(or the <cite>_tiledata</cite> parameter of this dictionary, if present).\nThe data needs to be encoded into the query string,\neither using the <tt>encode()</tt> method or via the tile\u2019s <tt>IAbsoluteURL</tt> adapter (see below for details).</p>\n<p>For persistent tiles, the data manager is a bit more interesting.</p>\n</div>\n<div id=\"persistent-tiles\">\n<h3><a href=\"#id30\" rel=\"nofollow\">Persistent tiles</a></h3>\n<p>Not all types of data can be placed in a query string.\nFor more substantial storage requirements,\nyou can use persistent tiles, which store data in annotations.</p>\n<div>\n<p>Note</p>\n<p>If you have more intricate requirements,\nyou can also write your own <tt>ITileDataManager</tt> to handle data retrieval.\nIn this case, you probably still want to derive from <tt>PersistentTile</tt>,\nto get the appropriate <tt>IAbsoluteURL</tt> adapter, among other things.</p>\n</div>\n<p>First, we need to write up annotations support.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.annotation.attribute</span> <span class=\"kn\">import</span> <span class=\"n\">AttributeAnnotations</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideAdapter</span><span class=\"p\">(</span><span class=\"n\">AttributeAnnotations</span><span class=\"p\">)</span>\n</pre>\n<p>We also need a context that is annotatable.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.annotation.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IAttributeAnnotatable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">alsoProvides</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">alsoProvides</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">IAttributeAnnotatable</span><span class=\"p\">)</span>\n</pre>\n<p>Now, let\u2019s create a persistent tile with a schema.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">IPersistentSampleData</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Detailed text'</span><span class=\"p\">,</span> <span class=\"n\">missing_value</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Missing!'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles</span> <span class=\"kn\">import</span> <span class=\"n\">PersistentTile</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">PersistentSampleTile</span><span class=\"p\">(</span><span class=\"n\">PersistentTile</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"s1\">'sample.persistenttile'</span> <span class=\"c1\"># would normally be set by ZCML handler</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"sa\">u</span><span class=\"s1\">'&lt;b&gt;You said&lt;/b&gt; </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">persistentSampleTileType</span> <span class=\"o\">=</span> <span class=\"n\">TileType</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"sa\">u</span><span class=\"s1\">'sample.persistenttile'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"sa\">u</span><span class=\"s1\">'Persistent sample tile'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'dummy.Permission'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'dummy.Permission'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'A tile used for testing'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">IPersistentSampleData</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideUtility</span><span class=\"p\">(</span><span class=\"n\">persistentSampleTileType</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.persistenttile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideAdapter</span><span class=\"p\">(</span><span class=\"n\">PersistentSampleTile</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">,</span> <span class=\"n\">Interface</span><span class=\"p\">),</span> <span class=\"n\">IBasicTile</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.persistenttile'</span><span class=\"p\">)</span>\n</pre>\n<p>We can now traverse to the tile as before.\nBy default, there is no data, and the field\u2019s missing value will be used.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.persistenttile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'tile2'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"s1\">'sample.persistenttile'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">id</span>\n<span class=\"s1\">'tile2'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"p\">()</span>\n<span class=\"s1\">'&lt;b&gt;You said&lt;/b&gt; Missing!'</span>\n</pre>\n<p>At this point, there is nothing in the annotations for the type either:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"s1\">'__annotations__'</span><span class=\"p\">,</span> <span class=\"p\">{}))</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>We can write data to the context\u2019s annotations using an <tt>ITileDataManager</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dataManager</span> <span class=\"o\">=</span> <span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dataManager</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">({</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello!'</span><span class=\"p\">})</span>\n</pre>\n<p>This writes data to annotations:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"vm\">__annotations__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"p\">[</span><span class=\"s1\">'plone.tiles.data.tile2'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"vm\">__annotations__</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'plone.tiles.data.tile2'</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello!'</span><span class=\"p\">}</span>\n</pre>\n<p>We can get this from the data manager too, of course:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dataManager</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello!'</span><span class=\"p\">}</span>\n</pre>\n<p>Note that as with transient tiles,\nthe <tt>data</tt> attribute is cached and will only be looked up once.</p>\n<p>If we now look up the tile again, we will get the new value:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.persistenttile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'tile2'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"p\">()</span>\n<span class=\"s1\">'&lt;b&gt;You said&lt;/b&gt; Hello!'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello!'</span><span class=\"p\">}</span>\n</pre>\n<p>We can also remove the annotation using the data manager:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dataManager</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"vm\">__annotations__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span> <span class=\"c1\"># doctest: +ELLIPSIS</span>\n<span class=\"p\">[]</span>\n</pre>\n</div>\n<div id=\"overriding-transient-data-with-persistent\">\n<h3><a href=\"#id31\" rel=\"nofollow\">Overriding transient data with persistent</a></h3>\n<p>To be able to re-use the same centrally managed tile based layouts for multiple context objects,\nbut still allow optional customization for tiles,\nit\u2019s possible to override otherwise transient tile configuration with context specific persistent configuration.</p>\n<p>This is done by either by setting a client side request header or query param <tt><span class=\"pre\">X-Tile-Persistent</span></tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'My title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>           <span class=\"s1\">'X-Tile-Persistent'</span><span class=\"p\">:</span> <span class=\"s1\">'yes'</span><span class=\"p\">}</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n</pre>\n<p>Yet, just adding the flag, doesn\u2019t create new persistent annotations on GET requests:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">plone</span><span class=\"o\">.</span><span class=\"n\">tiles</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">PersistentTileDataManager</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'My title'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">IAnnotations</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>That\u2019s because the data is persistent only once it\u2019s set:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">IAnnotations</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"p\">[</span><span class=\"s1\">'plone.tiles.data...'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">IAnnotations</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'My title'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'My title'</span><span class=\"p\">)]</span>\n</pre>\n<p>Without the persistent flag, fixed transient data would be returned:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'My title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'foo'</span><span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">plone</span><span class=\"o\">.</span><span class=\"n\">tiles</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">TransientTileDataManager</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'My title'</span><span class=\"p\">)]</span>\n</pre>\n<p>Finally, the persistent override could also be deleted:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'My title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>           <span class=\"s1\">'X-Tile-Persistent'</span><span class=\"p\">:</span> <span class=\"s1\">'yes'</span><span class=\"p\">}</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">plone</span><span class=\"o\">.</span><span class=\"n\">tiles</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">PersistentTileDataManager</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'My title'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">IAnnotations</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"p\">[]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"p\">[(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'cssClass'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'My title'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'My title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'foo'</span><span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ITileDataManager</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">plone</span><span class=\"o\">.</span><span class=\"n\">tiles</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">TransientTileDataManager</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span>\n</pre>\n</div>\n<div id=\"tile-urls\">\n<h3><a href=\"#id32\" rel=\"nofollow\">Tile URLs</a></h3>\n<p>As we have seen, tiles have a canonical URL.\nFor transient tiles, this may also encode some tile data.</p>\n<p>If you have a tile instance and you need to know the canonical tile URL,\nyou can use the <tt>IAbsoluteURL</tt> API.</p>\n<p>For the purposes of testing,\nwe need to ensure that we can get an absolute URL for the context.\nWe\u2019ll achieve that with a dummy adapter:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implementer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">adapter</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.traversing.browser.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IAbsoluteURL</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.publisher.interfaces.http</span> <span class=\"kn\">import</span> <span class=\"n\">IHTTPRequest</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IAbsoluteURL</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"nd\">@adapter</span><span class=\"p\">(</span><span class=\"n\">IContext</span><span class=\"p\">,</span> <span class=\"n\">IHTTPRequest</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">DummyAbsoluteURL</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">context</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">__unicode__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"sa\">u</span><span class=\"s1\">'http://example.com/context'</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"sa\">u</span><span class=\"s1\">'http://example.com/context'</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__str__</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">breadcrumbs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'context'</span><span class=\"p\">,</span> <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://example.com/context'</span><span class=\"p\">},)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideAdapter</span><span class=\"p\">(</span><span class=\"n\">DummyAbsoluteURL</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'absolute_url'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideAdapter</span><span class=\"p\">(</span><span class=\"n\">DummyAbsoluteURL</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.traversing.browser.absoluteurl</span> <span class=\"kn\">import</span> <span class=\"n\">absoluteURL</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">getMultiAdapter</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'My title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'foo'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">transientTile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">transientTile</span> <span class=\"o\">=</span> <span class=\"n\">transientTile</span><span class=\"p\">[</span><span class=\"s1\">'tile1'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">absoluteURL</span><span class=\"p\">(</span><span class=\"n\">transientTile</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"s1\">'http://example.com/context/@@sample.tile/tile1?title=My+title&amp;cssClass=foo&amp;count%3Along=5'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">transientTile</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">IAbsoluteURL</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">breadcrumbs</span><span class=\"p\">()</span> <span class=\"o\">==</span> \\\n<span class=\"o\">...</span> <span class=\"p\">({</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://example.com/context'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'context'</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>  <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://example.com/context/@@sample.tile/tile1'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'sample.tile'</span><span class=\"p\">})</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>For convenience, the tile URL is also available under the <tt>url</tt> property:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">transientTile</span><span class=\"o\">.</span><span class=\"n\">url</span>\n<span class=\"s1\">'http://example.com/context/@@sample.tile/tile1?title=My+title&amp;cssClass=foo&amp;count%3Along=5'</span>\n</pre>\n<p>The tile absolute URL structure remains unaltered if the data is\ncoming from a <cite>_tiledata</cite> JSON-encoded parameter instead of from the request\nparameters directly:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'_tiledata'</span><span class=\"p\">:</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Your title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'bar'</span><span class=\"p\">})})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">transientTile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">transientTile</span> <span class=\"o\">=</span> <span class=\"n\">transientTile</span><span class=\"p\">[</span><span class=\"s1\">'tile1'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">absoluteURL</span><span class=\"p\">(</span><span class=\"n\">transientTile</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"s1\">'http://example.com/context/@@sample.tile/tile1?title=Your+title&amp;cssClass=bar&amp;count%3Along=6'</span>\n</pre>\n<p>For persistent tiles, the are no data parameters:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Ignored'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'ignored'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">persistentTile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.persistenttile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">persistentTile</span> <span class=\"o\">=</span> <span class=\"n\">persistentTile</span><span class=\"p\">[</span><span class=\"s1\">'tile2'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">absoluteURL</span><span class=\"p\">(</span><span class=\"n\">persistentTile</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"s1\">'http://example.com/context/@@sample.persistenttile/tile2'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">persistentTile</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">IAbsoluteURL</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">breadcrumbs</span><span class=\"p\">()</span> <span class=\"o\">==</span> \\\n<span class=\"o\">...</span> <span class=\"p\">({</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://example.com/context'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'context'</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>  <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://example.com/context/@@sample.persistenttile/tile2'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'sample.persistenttile'</span><span class=\"p\">})</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>And again, for convenience:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">persistentTile</span><span class=\"o\">.</span><span class=\"n\">url</span>\n<span class=\"s1\">'http://example.com/context/@@sample.persistenttile/tile2'</span>\n</pre>\n<p>If the tile doesn\u2019t have an id, we don\u2019t get any sub-path:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'My title'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cssClass'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'foo'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">transientTile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">absoluteURL</span><span class=\"p\">(</span><span class=\"n\">transientTile</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"s1\">'http://example.com/context/@@sample.tile?title=My+title&amp;cssClass=foo&amp;count%3Along=5'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">persistentTile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.persistenttile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">absoluteURL</span><span class=\"p\">(</span><span class=\"n\">persistentTile</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"s1\">'http://example.com/context/@@sample.persistenttile'</span>\n</pre>\n<p>We can also disallow query parameters providing data into our tiles</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">zope.schema</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.directives</span> <span class=\"kn\">import</span> <span class=\"n\">ignore_querystring</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">ISampleTileData</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">unfiltered</span> <span class=\"o\">=</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Unfiltered data'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">ignore_querystring</span><span class=\"p\">(</span><span class=\"s1\">'unfiltered'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">filtered</span> <span class=\"o\">=</span> <span class=\"n\">zope</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'filtered data'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sampleTileType</span><span class=\"o\">.</span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">ISampleTileData</span>\n</pre>\n<p>And create a tile with our new schema</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles</span> <span class=\"kn\">import</span> <span class=\"n\">Tile</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">SampleTile</span><span class=\"p\">(</span><span class=\"n\">Tile</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"s1\">'sample.unfilteredtile'</span> <span class=\"c1\"># would normally be set by a ZCML handler</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s1\">'&lt;html&gt;&lt;body&gt;&lt;div&gt;</span><span class=\"si\">{}{}</span><span class=\"s1\">&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>             <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'unfiltered'</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>             <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'filtered'</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n</pre>\n<p>We\u2019ll register the sample unfiltered tile directly here, for testing.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">provideAdapter</span><span class=\"p\">,</span> <span class=\"n\">provideUtility</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IBasicTile</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideUtility</span><span class=\"p\">(</span><span class=\"n\">sampleTileType</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.unfilteredtile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideAdapter</span><span class=\"p\">(</span><span class=\"n\">SampleTile</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">,</span> <span class=\"n\">Interface</span><span class=\"p\">),</span> <span class=\"n\">IBasicTile</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.unfilteredtile'</span><span class=\"p\">)</span>\n</pre>\n<p>Let\u2019s simulate traversal to test if form data is used:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'unfiltered'</span><span class=\"p\">:</span> <span class=\"s1\">'foobar'</span><span class=\"p\">,</span> <span class=\"s1\">'filtered'</span><span class=\"p\">:</span> <span class=\"s1\">'safe'</span><span class=\"p\">})</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.unfilteredtile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'tile1'</span><span class=\"p\">]</span>\n</pre>\n<p>Data should not contain unfiltered field:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"s1\">'filtered'</span><span class=\"p\">,</span> <span class=\"s1\">'safe'</span><span class=\"p\">)]</span>\n</pre>\n<p>Rendering the tile should not include ignored query string:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'foobar'</span> <span class=\"ow\">in</span> <span class=\"n\">tile</span><span class=\"p\">()</span>\n<span class=\"kc\">False</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span><span class=\"p\">()</span>\n<span class=\"s1\">'&lt;html&gt;&lt;body&gt;&lt;div&gt;safe&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'</span>\n</pre>\n</div>\n</div>\n<div id=\"zcml-directive\">\n<h2><a href=\"#id33\" rel=\"nofollow\">ZCML directive</a></h2>\n<p>A tile is really just a browser view providing <tt>IBasicTile</tt>\n(or, more commonly, <tt>ITile</tt> or <tt>IPersistentTile</tt>)\ncoupled with a named utility providing <tt>ITileType</tt>.\nThe names of the browser view and the tile should match.</p>\n<p>To make it easier to register these components,\nthis package provides a <tt>&lt;plone:tile /&gt;</tt> directive that sets up both.\nIt supports several use cases:</p>\n<ul>\n<li>Registering a new tile from a class</li>\n<li>Registering a new tile from a template only</li>\n<li>Registering a new tile form a class and a template</li>\n<li>Registering a new tile for an existing tile type (e.g. for a new layer)</li>\n</ul>\n<p>To test this,\nwe have created a dummy schema and a dummy tile in <tt>testing.py</tt>,\nand a dummy template in <tt>test.pt</tt>.</p>\n<p>Let\u2019s show how these may be used by registering several tiles:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\\n</span><span class=\"s2\">... &lt;configure package=\"plone.tiles\"\n...      xmlns=\"http://namespaces.zope.org/zope\"\n...      xmlns:plone=\"http://namespaces.plone.org/plone\"\n...      i18n_domain=\"plone.tiles.tests\"&gt;\n...\n...     &lt;include package=\"zope.component\" file=\"meta.zcml\" /&gt;\n...     &lt;include package=\"zope.security\" file=\"meta.zcml\" /&gt;\n...     &lt;include package=\"zope.browserpage\" file=\"meta.zcml\" /&gt;\n...\n...     &lt;include package=\"plone.tiles\" file=\"meta.zcml\" /&gt;\n...     &lt;include package=\"plone.tiles\" /&gt;\n...\n...     &lt;permission\n...         id=\"plone.tiles.testing.DummyAdd\"\n...         title=\"Dummy add permission\"\n...         /&gt;\n...     &lt;permission\n...         id=\"plone.tiles.testing.DummyView\"\n...         title=\"Dummy view permission\"\n...         /&gt;\n...\n...     &lt;!-- A tile configured with all available attributes --&gt;\n...     &lt;plone:tile\n...         name=\"dummy1\"\n...         title=\"Dummy tile 1\"\n...         description=\"This one shows all available options\"\n...         add_permission=\"plone.tiles.testing.DummyAdd\"\n...         schema=\"plone.tiles.testing.IDummySchema\"\n...         class=\"plone.tiles.testing.DummyTileWithTemplate\"\n...         template=\"test.pt\"\n...         for=\"plone.tiles.testing.IDummyContext\"\n...         layer=\"plone.tiles.testing.IDummyLayer\"\n...         permission=\"plone.tiles.testing.DummyView\"\n...         /&gt;\n...\n...     &lt;!-- A class-only tile --&gt;\n...     &lt;plone:tile\n...         name=\"dummy2\"\n...         title=\"Dummy tile 2\"\n...         add_permission=\"plone.tiles.testing.DummyAdd\"\n...         class=\"plone.tiles.testing.DummyTile\"\n...         for=\"*\"\n...         permission=\"plone.tiles.testing.DummyView\"\n...         /&gt;\n...\n...     &lt;!-- A template-only tile --&gt;\n...     &lt;plone:tile\n...         name=\"dummy3\"\n...         title=\"Dummy tile 3\"\n...         add_permission=\"plone.tiles.testing.DummyAdd\"\n...         template=\"test.pt\"\n...         for=\"*\"\n...         permission=\"plone.tiles.testing.DummyView\"\n...         /&gt;\n...\n...     &lt;!-- Use the PersistentTile class directly with a template-only tile --&gt;\n...     &lt;plone:tile\n...         name=\"dummy4\"\n...         title=\"Dummy tile 4\"\n...         add_permission=\"plone.tiles.testing.DummyAdd\"\n...         schema=\"plone.tiles.testing.IDummySchema\"\n...         class=\"plone.tiles.PersistentTile\"\n...         template=\"test.pt\"\n...         for=\"*\"\n...         permission=\"plone.tiles.testing.DummyView\"\n...         /&gt;\n...\n...     &lt;!-- Override dummy3 for a new layer --&gt;\n...     &lt;plone:tile\n...         name=\"dummy3\"\n...         class=\"plone.tiles.testing.DummyTile\"\n...         for=\"*\"\n...         layer=\"plone.tiles.testing.IDummyLayer\"\n...         permission=\"plone.tiles.testing.DummyView\"\n...         /&gt;\n...\n... &lt;/configure&gt;\n... \"\"\"</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">six</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.configuration</span> <span class=\"kn\">import</span> <span class=\"n\">xmlconfig</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">xmlconfig</span><span class=\"o\">.</span><span class=\"n\">xmlconfig</span><span class=\"p\">(</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"p\">))</span>\n</pre>\n<p>Let\u2019s check how the tiles were registered:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">getUtility</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">ITileType</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile1_type</span> <span class=\"o\">=</span> <span class=\"n\">getUtility</span><span class=\"p\">(</span><span class=\"n\">ITileType</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'dummy1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile1_type</span>\n<span class=\"o\">&lt;</span><span class=\"n\">TileType</span> <span class=\"n\">dummy1</span> <span class=\"p\">(</span><span class=\"n\">Dummy</span> <span class=\"n\">tile</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile1_type</span><span class=\"o\">.</span><span class=\"n\">description</span>\n<span class=\"s1\">'This one shows all available options'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile1_type</span><span class=\"o\">.</span><span class=\"n\">add_permission</span>\n<span class=\"s1\">'plone.tiles.testing.DummyAdd'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile1_type</span><span class=\"o\">.</span><span class=\"n\">view_permission</span>\n<span class=\"s1\">'plone.tiles.testing.DummyView'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile1_type</span><span class=\"o\">.</span><span class=\"n\">schema</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">plone</span><span class=\"o\">.</span><span class=\"n\">tiles</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">IDummySchema</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile2_type</span> <span class=\"o\">=</span> <span class=\"n\">getUtility</span><span class=\"p\">(</span><span class=\"n\">ITileType</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'dummy2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile2_type</span>\n<span class=\"o\">&lt;</span><span class=\"n\">TileType</span> <span class=\"n\">dummy2</span> <span class=\"p\">(</span><span class=\"n\">Dummy</span> <span class=\"n\">tile</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile2_type</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile2_type</span><span class=\"o\">.</span><span class=\"n\">add_permission</span>\n<span class=\"s1\">'plone.tiles.testing.DummyAdd'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile2_type</span><span class=\"o\">.</span><span class=\"n\">schema</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile3_type</span> <span class=\"o\">=</span> <span class=\"n\">getUtility</span><span class=\"p\">(</span><span class=\"n\">ITileType</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'dummy3'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile3_type</span>\n<span class=\"o\">&lt;</span><span class=\"n\">TileType</span> <span class=\"n\">dummy3</span> <span class=\"p\">(</span><span class=\"n\">Dummy</span> <span class=\"n\">tile</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile3_type</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile3_type</span><span class=\"o\">.</span><span class=\"n\">add_permission</span>\n<span class=\"s1\">'plone.tiles.testing.DummyAdd'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile3_type</span><span class=\"o\">.</span><span class=\"n\">schema</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile4_type</span> <span class=\"o\">=</span> <span class=\"n\">getUtility</span><span class=\"p\">(</span><span class=\"n\">ITileType</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'dummy4'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile4_type</span>\n<span class=\"o\">&lt;</span><span class=\"n\">TileType</span> <span class=\"n\">dummy4</span> <span class=\"p\">(</span><span class=\"n\">Dummy</span> <span class=\"n\">tile</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile4_type</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile4_type</span><span class=\"o\">.</span><span class=\"n\">add_permission</span>\n<span class=\"s1\">'plone.tiles.testing.DummyAdd'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile4_type</span><span class=\"o\">.</span><span class=\"n\">schema</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InterfaceClass</span> <span class=\"n\">plone</span><span class=\"o\">.</span><span class=\"n\">tiles</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">IDummySchema</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Finally, let\u2019s check that we can look up the tiles:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.publisher.browser</span> <span class=\"kn\">import</span> <span class=\"n\">TestRequest</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implementer</span><span class=\"p\">,</span> <span class=\"n\">alsoProvides</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.testing</span> <span class=\"kn\">import</span> <span class=\"n\">IDummyContext</span><span class=\"p\">,</span> <span class=\"n\">IDummyLayer</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IDummyContext</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Context</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">layer_request</span> <span class=\"o\">=</span> <span class=\"n\">TestRequest</span><span class=\"p\">(</span><span class=\"n\">skin</span><span class=\"o\">=</span><span class=\"n\">IDummyLayer</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">getMultiAdapter</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles</span> <span class=\"kn\">import</span> <span class=\"n\">Tile</span><span class=\"p\">,</span> <span class=\"n\">PersistentTile</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.testing</span> <span class=\"kn\">import</span> <span class=\"n\">DummyTile</span><span class=\"p\">,</span> <span class=\"n\">DummyTileWithTemplate</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile1</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">layer_request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'dummy1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">tile1</span><span class=\"p\">,</span> <span class=\"n\">DummyTileWithTemplate</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tile1</span><span class=\"p\">())</span>\n<span class=\"o\">&lt;</span><span class=\"n\">b</span><span class=\"o\">&gt;</span><span class=\"n\">test</span><span class=\"err\">!</span><span class=\"o\">&lt;/</span><span class=\"n\">b</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile1</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"s1\">'dummy1'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile2</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'dummy2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">tile2</span><span class=\"p\">,</span> <span class=\"n\">DummyTile</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tile2</span><span class=\"p\">())</span>\n<span class=\"n\">dummy</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile2</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"s1\">'dummy2'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile3</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'dummy3'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">tile3</span><span class=\"p\">,</span> <span class=\"n\">Tile</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tile3</span><span class=\"p\">())</span>\n<span class=\"o\">&lt;</span><span class=\"n\">b</span><span class=\"o\">&gt;</span><span class=\"n\">test</span><span class=\"err\">!</span><span class=\"o\">&lt;/</span><span class=\"n\">b</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile3</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"s1\">'dummy3'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile4</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'dummy4'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">tile4</span><span class=\"p\">,</span> <span class=\"n\">PersistentTile</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tile4</span><span class=\"p\">())</span>\n<span class=\"o\">&lt;</span><span class=\"n\">b</span><span class=\"o\">&gt;</span><span class=\"n\">test</span><span class=\"err\">!</span><span class=\"o\">&lt;/</span><span class=\"n\">b</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile4</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"s1\">'dummy4'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile3_layer</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">layer_request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'dummy3'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">tile3_layer</span><span class=\"p\">,</span> <span class=\"n\">DummyTile</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tile3_layer</span><span class=\"p\">())</span>\n<span class=\"n\">dummy</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile3_layer</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"s1\">'dummy3'</span>\n</pre>\n</div>\n<div id=\"esi-support\">\n<h2><a href=\"#id34\" rel=\"nofollow\">ESI support</a></h2>\n<p>Some sites may choose to render tiles in a delayed fashion using Edge Side Includes or some similar mechanism.\n<tt>plone.tiles</tt> includes some support to help render ESI placeholders.\nThis is used in <tt>plone.app.blocks</tt> to facilitate ESI rendering.\nSince ESI normally involves a \u201cdumb\u201d replacement operation,\n<tt>plone.tiles</tt> also provides a means of accessing just the head and/or just the body of a tile.</p>\n<p>To use the package, you should first load its ZCML configuration.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\\n</span><span class=\"s2\">... &lt;configure\n...      xmlns=\"http://namespaces.zope.org/zope\"\n...      xmlns:plone=\"http://namespaces.plone.org/plone\"\n...      i18n_domain=\"plone.tiles.tests\"&gt;\n...\n...     &lt;include package=\"zope.component\" file=\"meta.zcml\" /&gt;\n...     &lt;include package=\"zope.browserpage\" file=\"meta.zcml\" /&gt;\n...\n...     &lt;include package=\"plone.tiles\" file=\"meta.zcml\" /&gt;\n...     &lt;include package=\"plone.tiles\" /&gt;\n...\n... &lt;/configure&gt;\n... \"\"\"</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">six</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.configuration</span> <span class=\"kn\">import</span> <span class=\"n\">xmlconfig</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">xmlconfig</span><span class=\"o\">.</span><span class=\"n\">xmlconfig</span><span class=\"p\">(</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"p\">))</span>\n</pre>\n<div id=\"marking-a-tile-as-esi-rendered\">\n<h3><a href=\"#id35\" rel=\"nofollow\">Marking a tile as ESI-rendered</a></h3>\n<p>For ESI rendering to be available, the tile must be marked with the <tt>IESIRendered</tt> marker interface.\nWe can create a dummy tile with this interface like so:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implementer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IESIRendered</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles</span> <span class=\"kn\">import</span> <span class=\"n\">Tile</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IESIRendered</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">SampleTile</span><span class=\"p\">(</span><span class=\"n\">Tile</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"s1\">'sample.tile'</span> <span class=\"c1\"># would normally be set by ZCML handler</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s1\">'&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;b&gt;My tile&lt;/b&gt;&lt;/body&gt;&lt;/html&gt;'</span>\n</pre>\n<p>Above, we have created a simple HTML string.\nThis would normally be rendered using a page template.</p>\n<p>We\u2019ll register this tile manually here.\nOrdinarily, of course, it would be registered via ZCML.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.type</span> <span class=\"kn\">import</span> <span class=\"n\">TileType</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.security.permission</span> <span class=\"kn\">import</span> <span class=\"n\">Permission</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">permission</span> <span class=\"o\">=</span> <span class=\"n\">Permission</span><span class=\"p\">(</span><span class=\"s1\">'dummy.Permission'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sampleTileType</span> <span class=\"o\">=</span> <span class=\"n\">TileType</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Sample tile'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'A tile used for testing'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">add_permission</span><span class=\"o\">=</span><span class=\"s1\">'dummy.Permission'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">view_permission</span><span class=\"o\">=</span><span class=\"s1\">'dummy.Permission'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">provideAdapter</span><span class=\"p\">,</span> <span class=\"n\">provideUtility</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IBasicTile</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideUtility</span><span class=\"p\">(</span><span class=\"n\">permission</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'dummy.Permission'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideUtility</span><span class=\"p\">(</span><span class=\"n\">sampleTileType</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideAdapter</span><span class=\"p\">(</span><span class=\"n\">SampleTile</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">,</span> <span class=\"n\">Interface</span><span class=\"p\">),</span> <span class=\"n\">IBasicTile</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"esi-lookup\">\n<h3><a href=\"#id36\" rel=\"nofollow\">ESI lookup</a></h3>\n<p>When a page is rendered\n(for example by a system like <tt>plone.app.blocks</tt>, but see below),\na tile placeholder may be replaced by a link such as:</p>\n<pre><span class=\"nt\">&lt;esi:include</span> <span class=\"na\">src=</span><span class=\"s\">\"/path/to/context/@@sample.tile/tile1/@@esi-body\"</span> <span class=\"nt\">/&gt;</span>\n</pre>\n<p>When this is resolved, it will return the body part of the tile.\nEqually, a tile in the head can be replaced by:</p>\n<pre><span class=\"nt\">&lt;esi:include</span> <span class=\"na\">src=</span><span class=\"s\">\"/path/to/context/@@sample.tile/tile1/@@esi-head\"</span> <span class=\"nt\">/&gt;</span>\n</pre>\n<p>To illustrate how this works,\nlet\u2019s create a sample context,\nlook up the view as it would be during traversal,\nand instantiate the tile,\nbefore looking up the ESI views and rendering them.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implementer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.publisher.browser</span> <span class=\"kn\">import</span> <span class=\"n\">TestRequest</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">IContext</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IContext</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Context</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">IntegratedTestRequest</span><span class=\"p\">(</span><span class=\"n\">TestRequest</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@property</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">environ</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_environ</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">IntegratedTestRequest</span><span class=\"p\">()</span>\n</pre>\n<p>The following simulates traversal to <tt><span class=\"pre\">context/@@sample.tile/tile1</span></tt></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">getMultiAdapter</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.tile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'tile1'</span><span class=\"p\">]</span> <span class=\"c1\"># simulates sub-path traversal</span>\n</pre>\n<p>This tile should be ESI rendered:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">IESIRendered</span><span class=\"o\">.</span><span class=\"n\">providedBy</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>At this point, we can look up the ESI views:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">tile</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'esi-head'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"n\">zExceptions</span><span class=\"o\">.</span><span class=\"n\">unauthorized</span><span class=\"o\">.</span><span class=\"n\">Unauthorized</span><span class=\"p\">:</span> <span class=\"n\">Unauthorized</span><span class=\"p\">()</span>\n</pre>\n<p>But we can only render them when we have the required permissions:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from AccessControl.SecurityManagement import newSecurityManager\n&gt;&gt;&gt; from AccessControl.User import Super\n&gt;&gt;&gt; newSecurityManager(None, Super('manager', '', ['Manager'], []))\n&gt;&gt;&gt; print(head())\n&lt;title&gt;Title&lt;/title&gt;\n</pre>\n<pre>&gt;&gt;&gt; body = getMultiAdapter((tile, request), name='esi-body')\n&gt;&gt;&gt; print(body())\n&lt;b&gt;My tile&lt;/b&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"tiles-without-heads-or-bodies\">\n<h3><a href=\"#id37\" rel=\"nofollow\">Tiles without heads or bodies</a></h3>\n<p>In general, tiles are supposed to return full HTML documents.\nThe <tt><span class=\"pre\">esi-head</span></tt> and <tt><span class=\"pre\">esi-body</span></tt> views are tolerant of tiles that do not.\nIf they cannot find a <tt>&lt;head /&gt;</tt> or <tt>&lt;body /&gt;</tt> element, respectively, they will return the underlying tile output unaltered.</p>\n<p>For example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.esi</span> <span class=\"kn\">import</span> <span class=\"n\">ESITile</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">LazyTile</span><span class=\"p\">(</span><span class=\"n\">ESITile</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"s1\">'sample.esi1'</span> <span class=\"c1\"># would normally be set by ZCML handler</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s1\">'&lt;title&gt;Page title&lt;/title&gt;'</span>\n</pre>\n<p>We won\u2019t bother to register this for this test, instead just instantiating it directly:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">LazyTile</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)[</span><span class=\"s1\">'tile1'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">IESIRendered</span><span class=\"o\">.</span><span class=\"n\">providedBy</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">tile</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'esi-head'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">())</span>\n<span class=\"o\">&lt;</span><span class=\"n\">title</span><span class=\"o\">&gt;</span><span class=\"n\">Page</span> <span class=\"n\">title</span><span class=\"o\">&lt;/</span><span class=\"n\">title</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Of course, the ESI body renderer would return the same thing,\nsince it can\u2019t extract a specific body either:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">tile</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'esi-body'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">())</span>\n<span class=\"o\">&lt;</span><span class=\"n\">title</span><span class=\"o\">&gt;</span><span class=\"n\">Page</span> <span class=\"n\">title</span><span class=\"o\">&lt;/</span><span class=\"n\">title</span><span class=\"o\">&gt;</span>\n</pre>\n<p>In this case, we would likely end up with invalid HTML,\nsince the <tt>&lt;title /&gt;</tt> tag is not allowed in the body.\nWhether and how to resolve this is left up to the ESI interpolation implementation.</p>\n</div>\n<div id=\"convenience-classes-and-placeholder-rendering\">\n<h3><a href=\"#id38\" rel=\"nofollow\">Convenience classes and placeholder rendering</a></h3>\n<p>Two convenience base classes can be found in the <tt>plone.tiles.esi</tt> module.\nThese extend the standard <tt>Tile</tt> and <tt>PersistentTile</tt> classes to provide the <tt>IESIRendered</tt> interface.</p>\n<ul>\n<li><tt>plone.tiles.esi.ESITile</tt>, a transient, ESI-rendered tile</li>\n<li><tt>plone.tiles.esi.ESIPersistentTile</tt>, a persistent, ESI-rendered tile</li>\n</ul>\n<p>These are particularly useful if you are creating a template-only tile and want ESI rendering.\nFor example:</p>\n<pre><span class=\"nt\">&lt;plone:tile</span>\n    <span class=\"na\">name=</span><span class=\"s\">\"sample.esitile\"</span>\n    <span class=\"na\">title=</span><span class=\"s\">\"An ESI-rendered tile\"</span>\n    <span class=\"na\">add_permission=</span><span class=\"s\">\"plone.tiles.tests.DummyAdd\"</span>\n    <span class=\"na\">template=</span><span class=\"s\">\"esitile.pt\"</span>\n    <span class=\"na\">class=</span><span class=\"s\">\"plone.tiles.esi.ESITile\"</span>\n    <span class=\"na\">for=</span><span class=\"s\">\"*\"</span>\n    <span class=\"na\">permission=</span><span class=\"s\">\"zope.View\"</span>\n    <span class=\"nt\">/&gt;</span>\n</pre>\n<p>Additionally,\nthese base classes implement a <tt>__call__()</tt> method that will render a tile placeholder,\nif the request contains an <tt><span class=\"pre\">X-ESI-Enabled</span></tt> header set to the literal \u2018true\u2019.</p>\n<p>The placeholder is a simple HTML <tt>&lt;a /&gt;</tt> tag,\nwhich can be transformed into an <tt>&lt;esi:include /&gt;</tt> tag using the helper function <tt>substituteESILinks()</tt>.\nThe reason for this indirection is that the <tt>esi</tt> namespace is not allowed in HTML documents,\nand are liable to be stripped out by transforms using the <tt>libxml2</tt> / <tt>lxml</tt> HTML parser.</p>\n<p>Let us now create a simple ESI tile. To benefit from the default rendering,\nwe should implement the <tt>render()</tt> method instead of <tt>__call__()</tt>. Setting\na page template as the <tt>index</tt> class variable or using the <tt>template</tt>\nattribute to the ZCML directive will work also.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.esi</span> <span class=\"kn\">import</span> <span class=\"n\">ESITile</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">SampleESITile</span><span class=\"p\">(</span><span class=\"n\">ESITile</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"s1\">'sample.esitile'</span> <span class=\"c1\"># would normally be set by ZCML handler</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s1\">'&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;b&gt;My ESI tile&lt;/b&gt;&lt;/body&gt;&lt;/html&gt;'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sampleESITileType</span> <span class=\"o\">=</span> <span class=\"n\">TileType</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.esitile'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'Sample ESI tile'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'A tile used for testing ESI'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">add_permission</span><span class=\"o\">=</span><span class=\"s1\">'dummy.Permission'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">view_permission</span><span class=\"o\">=</span><span class=\"s1\">'dummy.Permission'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideUtility</span><span class=\"p\">(</span><span class=\"n\">sampleESITileType</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.esitile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">provideAdapter</span><span class=\"p\">(</span><span class=\"n\">SampleESITile</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">,</span> <span class=\"n\">Interface</span><span class=\"p\">),</span> <span class=\"n\">IBasicTile</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.esitile'</span><span class=\"p\">)</span>\n</pre>\n<p>The following simulates traversal to <tt><span class=\"pre\">context/@@sample.esitile/tile1</span></tt></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">getMultiAdapter</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'sample.esitile'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">tile</span><span class=\"p\">[</span><span class=\"s1\">'tile1'</span><span class=\"p\">]</span> <span class=\"c1\"># simulates sub-path traversal</span>\n</pre>\n<p>By default, the tile renders as normal:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">())</span>\n<span class=\"o\">&lt;</span><span class=\"n\">html</span><span class=\"o\">&gt;&lt;</span><span class=\"n\">head</span><span class=\"o\">&gt;&lt;</span><span class=\"n\">title</span><span class=\"o\">&gt;</span><span class=\"n\">Title</span><span class=\"o\">&lt;/</span><span class=\"n\">title</span><span class=\"o\">&gt;&lt;/</span><span class=\"n\">head</span><span class=\"o\">&gt;&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;&lt;</span><span class=\"n\">b</span><span class=\"o\">&gt;</span><span class=\"n\">My</span> <span class=\"n\">ESI</span> <span class=\"n\">tile</span><span class=\"o\">&lt;/</span><span class=\"n\">b</span><span class=\"o\">&gt;&lt;/</span><span class=\"n\">body</span><span class=\"o\">&gt;&lt;/</span><span class=\"n\">html</span><span class=\"o\">&gt;</span>\n</pre>\n<p>However, if we opt into ESI rendering via a request header, we get a different view:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">ESI_HEADER_KEY</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"n\">ESI_HEADER_KEY</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'true'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">())</span> <span class=\"c1\"># doctest: +NORMALIZE_WHITESPACE</span>\n<span class=\"o\">&lt;</span><span class=\"err\">!</span><span class=\"n\">DOCTYPE</span> <span class=\"n\">html</span> <span class=\"n\">PUBLIC</span> <span class=\"s2\">\"-//W3C//DTD XHTML 1.0 Transitional//EN\"</span>\n    <span class=\"s2\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"n\">html</span> <span class=\"n\">xmlns</span><span class=\"o\">=</span><span class=\"s2\">\"http://www.w3.org/1999/xhtml\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"n\">a</span> <span class=\"n\">class</span><span class=\"o\">=</span><span class=\"s2\">\"_esi_placeholder\"</span>\n           <span class=\"n\">rel</span><span class=\"o\">=</span><span class=\"s2\">\"esi\"</span>\n           <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s2\">\"http://127.0.0.1/@@esi-body?\"</span><span class=\"o\">&gt;&lt;/</span><span class=\"n\">a</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">html</span><span class=\"o\">&gt;</span>\n</pre>\n<p>This can be transformed into a proper ESI tag with <tt>substituteESILinks()</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plone.tiles.esi</span> <span class=\"kn\">import</span> <span class=\"n\">substituteESILinks</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">substituteESILinks</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">()))</span> <span class=\"c1\"># doctest: +NORMALIZE_WHITESPACE</span>\n<span class=\"o\">&lt;</span><span class=\"err\">!</span><span class=\"n\">DOCTYPE</span> <span class=\"n\">html</span> <span class=\"n\">PUBLIC</span> <span class=\"s2\">\"-//W3C//DTD XHTML 1.0 Transitional//EN\"</span>\n    <span class=\"s2\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"n\">html</span> <span class=\"n\">xmlns</span><span class=\"p\">:</span><span class=\"n\">esi</span><span class=\"o\">=</span><span class=\"s2\">\"http://www.edge-delivery.org/esi/1.0\"</span> <span class=\"n\">xmlns</span><span class=\"o\">=</span><span class=\"s2\">\"http://www.w3.org/1999/xhtml\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"n\">esi</span><span class=\"p\">:</span><span class=\"n\">include</span> <span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s2\">\"http://127.0.0.1/@@esi-body?\"</span> <span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">html</span><span class=\"o\">&gt;</span>\n</pre>\n<p>It is also possible to render the ESI tile for the head.\nThis is done with a class variable \u2018head\u2019\n(which would of course normally be set within the class):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">SampleESITile</span><span class=\"o\">.</span><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tile</span><span class=\"p\">())</span> <span class=\"c1\"># doctest: +NORMALIZE_WHITESPACE</span>\n<span class=\"o\">&lt;</span><span class=\"err\">!</span><span class=\"n\">DOCTYPE</span> <span class=\"n\">html</span> <span class=\"n\">PUBLIC</span> <span class=\"s2\">\"-//W3C//DTD XHTML 1.0 Transitional//EN\"</span>\n    <span class=\"s2\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"n\">html</span> <span class=\"n\">xmlns</span><span class=\"o\">=</span><span class=\"s2\">\"http://www.w3.org/1999/xhtml\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"n\">a</span> <span class=\"n\">class</span><span class=\"o\">=</span><span class=\"s2\">\"_esi_placeholder\"</span>\n           <span class=\"n\">rel</span><span class=\"o\">=</span><span class=\"s2\">\"esi\"</span>\n           <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s2\">\"http://127.0.0.1/@@esi-head?\"</span><span class=\"o\">&gt;&lt;/</span><span class=\"n\">a</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">html</span><span class=\"o\">&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id39\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id40\" rel=\"nofollow\">2.2.2 (2020-04-22)</a></h3>\n<p>Bug fixes:</p>\n<ul>\n<li>Minor packaging updates. (#1)</li>\n<li>Fixed tests on Travis.\n[maurits] (#33)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id41\" rel=\"nofollow\">2.2.1 (2019-05-01)</a></h3>\n<p>Bug fixes:</p>\n<ul>\n<li>Fixed issue where creating a Mosaic page with shared content layout with filled rich text fields ended up having empty rich text fields, because the rich text field is marked primary (as it should be), and primary fields were never parsed from query string by default. (#30)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id42\" rel=\"nofollow\">2.2.0 (2018-11-21)</a></h3>\n<p>New features:</p>\n<ul>\n<li>Add support for Python 3. [pbauer] (#29)</li>\n</ul>\n<p>Bug fixes:</p>\n<ul>\n<li>Initialize towncrier. [gforcada] (#2548)</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id43\" rel=\"nofollow\">2.1 (2018-07-05)</a></h3>\n<ul>\n<li>Dependency on zope.app.publisher removed,\nneeded parts were moved to zope.browserpage long time ago.\nThis probably breaks Plone 4.2 support (removed).\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id44\" rel=\"nofollow\">2.0.0 (2018-04-13)</a></h3>\n<ul>\n<li>Fix license classifier.</li>\n</ul>\n</div>\n<div id=\"b3-2017-08-22\">\n<h3><a href=\"#id45\" rel=\"nofollow\">2.0.0b3 (2017-08-22)</a></h3>\n<p>Breaking changes:</p>\n<ul>\n<li>Fix querystring en-/decoder to always skip primary fields\n[datakurre]</li>\n</ul>\n</div>\n<div id=\"b2-2017-03-29\">\n<h3><a href=\"#id46\" rel=\"nofollow\">2.0.0b2 (2017-03-29)</a></h3>\n<p>Bug fixes:</p>\n<ul>\n<li>Do not swallow <tt>AttributeError</tt> inside <tt>index()</tt> on template rendering.\n[hvelarde]</li>\n<li>Fix code analysis errors.\n[gforcada]</li>\n</ul>\n</div>\n<div id=\"b1-2017-02-24\">\n<h3><a href=\"#id47\" rel=\"nofollow\">2.0.0b1 (2017-02-24)</a></h3>\n<p>Breaking changes:</p>\n<ul>\n<li>Tiles no longer add relative <tt><span class=\"pre\">X-Tile-Url</span></tt>-header in <tt>__call__</tt>.\nTiles still add absolute <tt><span class=\"pre\">X-Tile-Url</span></tt>-header during traversal, but\nit gets removed after rendering when request is not CSRF-authorized.\n[datakurre]</li>\n<li>Generic ESI helper check now taht the request is authorized to render\nthe tile according to the registered view permission fo the tile.\n[datakurre]</li>\n<li>Transactions of requests to ESI helper views are automatically aborted,\nbecause ESI requests should always be immutable GET requests\n[datakurre]</li>\n<li>plone.app.theming (transform) is now disabled with X-Theme-Disabled-header\nfor requests rendering tiles\n[datakurre]</li>\n<li>plone.protect\u2019s ProtectTransform is skipped for tile requests with correct\nCSRF token prevent its side-effects on tile editors rendering tiles\nindividually\n[datakurre]</li>\n</ul>\n<p>New features:</p>\n<ul>\n<li>Added X-Frame-Options -header for ESI-tile views with matching behavior\nwith plone.protect\n[datakurre]</li>\n</ul>\n<p>Bug fixes:</p>\n<ul>\n<li>Fix issue where ESI-tile helper views didn\u2019t get correct\nCache-Control-headers, because ESI-helpers views were not acquisition\nwrapped\n[datakurre]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id48\" rel=\"nofollow\">1.8.2 (2017-01-10)</a></h3>\n<p>Bug fixes:</p>\n<ul>\n<li>Fix issue where transient tile was unable to encode data\nwith list of unicode strings\n[datakurre]</li>\n<li>Remove unused unittest2 requirement\n[tomgross]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id49\" rel=\"nofollow\">1.8.1 (2016-11-24)</a></h3>\n<p>Bugfix:</p>\n<ul>\n<li>Fix encode error in nested unicodes (like in plone.app.querystring)\n[tomgross]</li>\n<li>Restructure testing\n[tomgross]</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id50\" rel=\"nofollow\">1.8.0 (2016-09-13)</a></h3>\n<p>New features:</p>\n<blockquote>\n<ul>\n<li>Provide ignore_querystring form directive to mark particular tiles fields\nthat are not allowed to default data from query string data\n[vangheem]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id51\" rel=\"nofollow\">1.7.1 (2016-09-12)</a></h3>\n<ul>\n<li>Fix issue where collective.cover was broken, because internal changes in\ndefault data managers\n[datakurre]</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id52\" rel=\"nofollow\">1.7.0 (2016-09-08)</a></h3>\n<p>New features:</p>\n<ul>\n<li>Option to customize storage layer with ITileDataStorage adapter\n[datakurre]</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id53\" rel=\"nofollow\">1.6.1 (2016-09-07)</a></h3>\n<p>Bug fixes:</p>\n<ul>\n<li>Reformat docs.\n[gforcada]</li>\n<li>Add coveralls shield.\n[gforcada]</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id54\" rel=\"nofollow\">1.6 (2016-06-27)</a></h3>\n<ul>\n<li>Let TileType instances (tile registration utility) know about the view\npermission too.\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id55\" rel=\"nofollow\">1.5.2 (2016-03-28)</a></h3>\n<ul>\n<li>Fix issue where ESI href was not properly replaced.\n[jensens]</li>\n<li>Add section \u201cZCML Reference\u201d to README.rst.\n[jensens]</li>\n<li>PEP8, code-analysis, documentation and packaging fixes.\n[jensens, mauritsvanrees]</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id56\" rel=\"nofollow\">1.5.1 (2015-10-09)</a></h3>\n<ul>\n<li>Fix decoding List type of Choice value types\n[vangheem]</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3><a href=\"#id57\" rel=\"nofollow\">1.5.0 (2015-09-04)</a></h3>\n<ul>\n<li>Add support for overriding transient data manager with persistent data\nmanager by adding X-Tile-Persistent=1 into tile URL\n[datakurre]</li>\n<li>Fix persistent data manager to read its default from query string\n[vangheem]</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3><a href=\"#id58\" rel=\"nofollow\">1.4.0 (2015-05-25)</a></h3>\n<ul>\n<li>Add support for encoding dictionary fields into tile URL\n[datakurre]</li>\n<li>Fix issue where saving or deleting transient tile data mutated the current request\n[datakurre]</li>\n<li>Fix issue where non-ascii characters in tile data raised UnicodeEncode/DecodeErrors\n[datakurre]</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3><a href=\"#id59\" rel=\"nofollow\">1.3.0 (2015-04-21)</a></h3>\n<ul>\n<li>Fix edit_permission and delete_permission to default\nto add_permission only in TileType constructor\n[datakurre]</li>\n<li>Fix argument order in TileType constructor call\n[datakurre]</li>\n<li>Fix absolute_url-adapter to fallback to relative URL\n[datakurre]</li>\n<li>Add response to include absolute X-Tile-Url header\n[bloodbare]</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3><a href=\"#id60\" rel=\"nofollow\">1.2 (2012-11-07)</a></h3>\n<ul>\n<li>Adding icon property for tiletype\n[garbas]</li>\n<li>Url that we pass via X-Tile-Url should be relative to current context\n[garbas]</li>\n<li>Adding support for more robust permissions for edit and delete on tiles\n[cewing calvinhp]</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3><a href=\"#id61\" rel=\"nofollow\">1.1 (2012-06-22)</a></h3>\n<ul>\n<li>X-Tile-Uid header is passed on tile view containing tile\u2019s id.\n[garbas]</li>\n<li>PEP 8/Pyflakes (ignoring E121, E123, E126, E127 and E501).\n[hvelarde]</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3><a href=\"#id62\" rel=\"nofollow\">1.0 (2012-05-14)</a></h3>\n<ul>\n<li>Refactor ESI support. To use the <tt>ESITile</tt> and <tt>ESIPersistentTile</tt>\nbase classes, you should either use a template assigned via ZCML or\noverride the <tt>render()</tt> method. See <tt>esi.rst</tt> for full details.\n[optilude]</li>\n<li>Internationalized title and description of the tile directive.\n[vincentfretin]</li>\n<li>Use a  json-encoded parameter in transient tiles as first option.\n[dukebody]</li>\n<li>Use adapters for the Zope Publisher type casting\n[dukebody]</li>\n<li>Conditionaly support z3c.relationfield\u2019s RelationChoice fields\n[dukebody]</li>\n<li>Ignore type casting for fields without fixed type, like zope.schema.Choice\n[dukebody]</li>\n</ul>\n</div>\n<div id=\"a1-2010-05-17\">\n<h3><a href=\"#id63\" rel=\"nofollow\">1.0a1 (2010-05-17)</a></h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7080159, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b98c093d6f3b3b9453a77673a891cedd", "sha256": "e7882a98bb602fcfa13b1e29de9b154ca5eca4f945840dd596fdea37e8d181ba"}, "downloads": -1, "filename": "plone.tiles-1.0.tar.gz", "has_sig": false, "md5_digest": "b98c093d6f3b3b9453a77673a891cedd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42752, "upload_time": "2012-05-14T19:48:14", "upload_time_iso_8601": "2012-05-14T19:48:14.920118Z", "url": "https://files.pythonhosted.org/packages/a2/ea/d096146a81001aefbf4677091c9c1f72307c1c4bed1ddbc1e0ba76ae7f75/plone.tiles-1.0.tar.gz", "yanked": false}], "1.0a1": [{"comment_text": "", "digests": {"md5": "4084d7547dcd874a2d49ef1886e288c0", "sha256": "7e0f62d1b89e2732e5fab6298b3730209c30f80576d28d4eee37c5c0b41e5051"}, "downloads": -1, "filename": "plone.tiles-1.0a1.tar.gz", "has_sig": false, "md5_digest": "4084d7547dcd874a2d49ef1886e288c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36795, "upload_time": "2010-05-17T15:58:57", "upload_time_iso_8601": "2010-05-17T15:58:57.610449Z", "url": "https://files.pythonhosted.org/packages/de/70/b5cc41cd96f8c4013f96d4399d6d23db4e571e5eb8bac789ffa6747eaa4a/plone.tiles-1.0a1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "adcfe7dc02a464b26c0d8b3f2c3baee5", "sha256": "4a4c04f729e4591eaf22970bbb509aad7a60ef501903e55659208b78a5d614e5"}, "downloads": -1, "filename": "plone.tiles-1.1.tar.gz", "has_sig": false, "md5_digest": "adcfe7dc02a464b26c0d8b3f2c3baee5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43024, "upload_time": "2012-06-22T23:52:02", "upload_time_iso_8601": "2012-06-22T23:52:02.519041Z", "url": "https://files.pythonhosted.org/packages/75/1c/3b4fe10336958e03d6dca570f6d51b8f4c1cb0331d84390eb401d5fd2958/plone.tiles-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "1ba09b368a41a0e448d1170ac523c829", "sha256": "7c43edc00bfdf1fc3b1e7f7091820514dc0d930956b01e5c6d4a57076fab93e3"}, "downloads": -1, "filename": "plone.tiles-1.2.tar.gz", "has_sig": false, "md5_digest": "1ba09b368a41a0e448d1170ac523c829", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50671, "upload_time": "2012-11-07T00:37:26", "upload_time_iso_8601": "2012-11-07T00:37:26.487253Z", "url": "https://files.pythonhosted.org/packages/81/52/1e0417622a4a1a94ee806d5e47026ca8899d6e83f359d4bf01e387495a6c/plone.tiles-1.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "ab263253791759eead3c2c135d14a501", "sha256": "9d9c9e5a8b2491dac6d723b9a4a4d50db77b7c110c08a79b2840156cf2f5c0a1"}, "downloads": -1, "filename": "plone.tiles-1.3.0.zip", "has_sig": false, "md5_digest": "ab263253791759eead3c2c135d14a501", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64011, "upload_time": "2015-04-21T13:08:00", "upload_time_iso_8601": "2015-04-21T13:08:00.883615Z", "url": "https://files.pythonhosted.org/packages/ba/54/ea5018d73969a010e03be30e7da79ef7c9d1a57c5eaed59878ba2dd27ce4/plone.tiles-1.3.0.zip", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "04da597a62d33764d7b10598cbb412ed", "sha256": "b72420f04da2a05c5d1246816739ef52c1e5ab08f29a808a221375700f118970"}, "downloads": -1, "filename": "plone.tiles-1.4.0.tar.gz", "has_sig": false, "md5_digest": "04da597a62d33764d7b10598cbb412ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55416, "upload_time": "2015-05-25T14:13:59", "upload_time_iso_8601": "2015-05-25T14:13:59.103482Z", "url": "https://files.pythonhosted.org/packages/c5/2d/71e2180751567a04bbfdc70bef9faad934600abf7f563aba33497aac1b64/plone.tiles-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "c475ae084736c77fa093b63f2049d899", "sha256": "9dfb0a629e96dab9f8c667aafc665c308f0e29356b4ebd38caac8e1826f6977b"}, "downloads": -1, "filename": "plone.tiles-1.5.0.tar.gz", "has_sig": false, "md5_digest": "c475ae084736c77fa093b63f2049d899", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55182, "upload_time": "2015-09-04T15:22:38", "upload_time_iso_8601": "2015-09-04T15:22:38.228523Z", "url": "https://files.pythonhosted.org/packages/06/5c/090a7e0c2472cd3d38d230a3e699709942e6eb77c82fe4a8bd0ac48f7e63/plone.tiles-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "b6ee36348f90df93c2c68b447d850ba9", "sha256": "d018cd2b267399aaf666a90adeca5843afe2a68a9f1e07fb8b11d9b6322dbdc0"}, "downloads": -1, "filename": "plone.tiles-1.5.1.tar.gz", "has_sig": false, "md5_digest": "b6ee36348f90df93c2c68b447d850ba9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55382, "upload_time": "2015-10-09T20:32:53", "upload_time_iso_8601": "2015-10-09T20:32:53.696312Z", "url": "https://files.pythonhosted.org/packages/23/e8/e46020d8470668b976789acb06d04422eade0eb12c5196480fd49d83db08/plone.tiles-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "a1c29b70d51f705b7ee32342b78e91ff", "sha256": "762f582605cec99c532998e805941a24204031c66be8ebebf6183ea5161d4df7"}, "downloads": -1, "filename": "plone.tiles-1.5.2.tar.gz", "has_sig": false, "md5_digest": "a1c29b70d51f705b7ee32342b78e91ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58173, "upload_time": "2016-03-28T16:56:23", "upload_time_iso_8601": "2016-03-28T16:56:23.386383Z", "url": "https://files.pythonhosted.org/packages/f1/46/d163361791dd38a3d2be33b88b33a8374e4fd02ea55144209ce973034d75/plone.tiles-1.5.2.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "a2a97a27e1f8dc8030bcfa366b99582a", "sha256": "4e502a272f2ee0b1dd79870901393c2e2200833525a918a2098ffb501138ec67"}, "downloads": -1, "filename": "plone.tiles-1.6.tar.gz", "has_sig": false, "md5_digest": "a2a97a27e1f8dc8030bcfa366b99582a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58489, "upload_time": "2016-06-27T11:26:34", "upload_time_iso_8601": "2016-06-27T11:26:34.731359Z", "url": "https://files.pythonhosted.org/packages/40/21/44af89b713c9631002a0050daa3bf3eeb5b141967c77595cd4d28cabc9cf/plone.tiles-1.6.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "8cf3f08d58ef83a2ffbfc520dfd1092e", "sha256": "dec996826503fcad41cab67819621c2d3be9524ce94253cff865b6843cc1516d"}, "downloads": -1, "filename": "plone.tiles-1.6.1.tar.gz", "has_sig": false, "md5_digest": "8cf3f08d58ef83a2ffbfc520dfd1092e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58895, "upload_time": "2016-09-06T23:51:49", "upload_time_iso_8601": "2016-09-06T23:51:49.218295Z", "url": "https://files.pythonhosted.org/packages/22/c1/e96a8e7d70844f97a1bb388f0c7b17d4c12bbf9b86cce13570bf978c8046/plone.tiles-1.6.1.tar.gz", "yanked": false}], "1.6.dev0": [{"comment_text": "", "digests": {"md5": "81d2737420f02b2810d2e235518fedfe", "sha256": "3345765e5b74a2053e30485b2bd1d7f93c06fc988dfa6eb0e17c61571fa1769f"}, "downloads": -1, "filename": "plone.tiles-1.6.dev0.tar.gz", "has_sig": false, "md5_digest": "81d2737420f02b2810d2e235518fedfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58426, "upload_time": "2016-05-23T07:20:00", "upload_time_iso_8601": "2016-05-23T07:20:00.263021Z", "url": "https://files.pythonhosted.org/packages/26/ea/2e318b54ea1b78339f1d8533390708ceb7f4b5b8b5235307f350993171d2/plone.tiles-1.6.dev0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "68256a585d6a7e72a5defbc8c595985b", "sha256": "fbdbcb4fd1fce30ecb1713893653019cf2f97edf6eafb2729b6fddb054c740ba"}, "downloads": -1, "filename": "plone.tiles-1.7.0.tar.gz", "has_sig": false, "md5_digest": "68256a585d6a7e72a5defbc8c595985b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58995, "upload_time": "2016-09-08T16:56:30", "upload_time_iso_8601": "2016-09-08T16:56:30.319574Z", "url": "https://files.pythonhosted.org/packages/7c/4f/58dd11b8a45d6dc1a026df6acd9055bb645464052964aecd2921bcd7c5b7/plone.tiles-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "26bbecf4a16aef15e81b3762e3007cc4", "sha256": "7f1637f17c5f3e5f6f601fc655e59cc4ff528d939e877a81c628acdf53110d6f"}, "downloads": -1, "filename": "plone.tiles-1.7.1.tar.gz", "has_sig": false, "md5_digest": "26bbecf4a16aef15e81b3762e3007cc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59198, "upload_time": "2016-09-12T07:39:41", "upload_time_iso_8601": "2016-09-12T07:39:41.299998Z", "url": "https://files.pythonhosted.org/packages/9c/3e/997f6c90304e13ac0b54749720a0f838d485abe649286ee93ae441ea7a5b/plone.tiles-1.7.1.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "44c89633ed486af8e71cc1fd512172bb", "sha256": "0cd94fabd0fdaca7676b7d40b66095d0615155cd2c3b720bdd0aeed637d197c2"}, "downloads": -1, "filename": "plone.tiles-1.8.0.tar.gz", "has_sig": false, "md5_digest": "44c89633ed486af8e71cc1fd512172bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60673, "upload_time": "2016-09-13T08:02:41", "upload_time_iso_8601": "2016-09-13T08:02:41.442650Z", "url": "https://files.pythonhosted.org/packages/02/30/33340584865132901f1a5c7ce3d4b6196333b1de6128ba5a87f6ab7f16ee/plone.tiles-1.8.0.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "86a81b30ac0195f2b754402f3c47c931", "sha256": "5ac4bc3299bc3bb2520e22188418b3ee1a772bb95e7d97d9c180b04b4528b486"}, "downloads": -1, "filename": "plone.tiles-1.8.1.tar.gz", "has_sig": false, "md5_digest": "86a81b30ac0195f2b754402f3c47c931", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61157, "upload_time": "2016-11-24T05:29:46", "upload_time_iso_8601": "2016-11-24T05:29:46.012739Z", "url": "https://files.pythonhosted.org/packages/82/58/0ee9201a1e5cbe7bc923ea83a0335ff611bd29142d0bfab876d29bc15742/plone.tiles-1.8.1.tar.gz", "yanked": false}], "1.8.2": [{"comment_text": "", "digests": {"md5": "d0595bc356aca2443f574ccb082f3142", "sha256": "c36b01a660908edc814691aca392f669d8666846e680425c354caa525ddbf060"}, "downloads": -1, "filename": "plone.tiles-1.8.2.tar.gz", "has_sig": false, "md5_digest": "d0595bc356aca2443f574ccb082f3142", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61374, "upload_time": "2017-01-10T07:19:52", "upload_time_iso_8601": "2017-01-10T07:19:52.000562Z", "url": "https://files.pythonhosted.org/packages/e7/77/d36b3facd0f6dd2e2a02eb5aed50a3ebafecf815af0d9f55ecae900cbd74/plone.tiles-1.8.2.tar.gz", "yanked": false}], "1.8.3": [{"comment_text": "", "digests": {"md5": "dceaca87def0b0abcde95b586b42d314", "sha256": "543a95165c3c87f3ff66f3efbf2a169fa512ed4e088d0849c9394ab4810598fa"}, "downloads": -1, "filename": "plone.tiles-1.8.3.tar.gz", "has_sig": false, "md5_digest": "dceaca87def0b0abcde95b586b42d314", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62683, "upload_time": "2017-06-08T10:16:31", "upload_time_iso_8601": "2017-06-08T10:16:31.395887Z", "url": "https://files.pythonhosted.org/packages/95/c7/9115508298bd20fb224898f4f29f5e2593a1c26b9340392299de01a4e694/plone.tiles-1.8.3.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "13d66446308b80dc7e8327e52ea55cef", "sha256": "962caa9b3223e57ab41402d7e110dea21b9434e816cc240366754e0f56380e94"}, "downloads": -1, "filename": "plone.tiles-2.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "13d66446308b80dc7e8327e52ea55cef", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 63298, "upload_time": "2018-04-13T11:09:31", "upload_time_iso_8601": "2018-04-13T11:09:31.616846Z", "url": "https://files.pythonhosted.org/packages/d6/03/0ab6013a6b1de293f71663b01d2d37bcbd99ee3d53c2bef404cd13814c3f/plone.tiles-2.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e94ebf9b2ef6060a9fcda331c3b50b1", "sha256": "bafd409d4850fefecd4d3506dd8000cf4e64efdf5c37dbed3f95877f3cdedd1c"}, "downloads": -1, "filename": "plone.tiles-2.0.0.tar.gz", "has_sig": false, "md5_digest": "8e94ebf9b2ef6060a9fcda331c3b50b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65471, "upload_time": "2018-04-13T11:09:33", "upload_time_iso_8601": "2018-04-13T11:09:33.082642Z", "url": "https://files.pythonhosted.org/packages/b8/bd/e0f17072839572d3ad66c6efea84a426e961f9d648e9700edad37b6dcdee/plone.tiles-2.0.0.tar.gz", "yanked": false}], "2.0.0b1": [{"comment_text": "", "digests": {"md5": "1109f98c6ce8527a8c2dab6d911311ff", "sha256": "b6f9bd5ad500b794db808154a8eca953764d2e171408df79c32927fc0527e724"}, "downloads": -1, "filename": "plone.tiles-2.0.0b1.tar.gz", "has_sig": false, "md5_digest": "1109f98c6ce8527a8c2dab6d911311ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64785, "upload_time": "2017-02-24T07:39:56", "upload_time_iso_8601": "2017-02-24T07:39:56.529812Z", "url": "https://files.pythonhosted.org/packages/36/56/e4ef61fa6183fbeb514128928faef5324ccb79029e30a78d22ca62fa4b23/plone.tiles-2.0.0b1.tar.gz", "yanked": false}], "2.0.0b2": [{"comment_text": "", "digests": {"md5": "3bb98e3a5e78353437cedada8ab67e17", "sha256": "bc98e30d8f433ce2f2e224dc88267850999378c2c1852a0154e3e37fab7b5059"}, "downloads": -1, "filename": "plone.tiles-2.0.0b2.tar.gz", "has_sig": false, "md5_digest": "3bb98e3a5e78353437cedada8ab67e17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64036, "upload_time": "2017-03-29T08:29:38", "upload_time_iso_8601": "2017-03-29T08:29:38.175638Z", "url": "https://files.pythonhosted.org/packages/b4/0d/5c944d4e0a45c54898936eb0199082785e3006479beb8bdf99e876714358/plone.tiles-2.0.0b2.tar.gz", "yanked": false}], "2.0.0b3": [{"comment_text": "", "digests": {"md5": "54aa5cb34f0a7a01519cebde183193b9", "sha256": "f6cc3adbe1a283177ded4ecaea6f47e5d90e4dd77b2f14832d65d29bd002fdd5"}, "downloads": -1, "filename": "plone.tiles-2.0.0b3-py2-none-any.whl", "has_sig": false, "md5_digest": "54aa5cb34f0a7a01519cebde183193b9", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 63235, "upload_time": "2017-08-21T21:23:40", "upload_time_iso_8601": "2017-08-21T21:23:40.920942Z", "url": "https://files.pythonhosted.org/packages/52/34/e276150fdb056182c2f6bab3050c981f91c67e39d251487884a88499da17/plone.tiles-2.0.0b3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "888461a132e9548e230724533ceaaa90", "sha256": "efd037519b8ef37278ea862b25cf497089f8cc22e5b7a4c6fd50adf28af4aea8"}, "downloads": -1, "filename": "plone.tiles-2.0.0b3.tar.gz", "has_sig": false, "md5_digest": "888461a132e9548e230724533ceaaa90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66118, "upload_time": "2017-08-21T21:23:45", "upload_time_iso_8601": "2017-08-21T21:23:45.295864Z", "url": "https://files.pythonhosted.org/packages/4c/b0/f6388549181f5864908b9b183dafd8402f36d526fd1f752e62b43b8ee737/plone.tiles-2.0.0b3.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "367315922440a795dcc2a6b91eb3496d", "sha256": "ee38a5cd40c94558bb15fd092e315a483b7230523820a39f97180861d865b0a0"}, "downloads": -1, "filename": "plone.tiles-2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "367315922440a795dcc2a6b91eb3496d", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 47968, "upload_time": "2018-07-05T12:01:21", "upload_time_iso_8601": "2018-07-05T12:01:21.027532Z", "url": "https://files.pythonhosted.org/packages/2d/0e/c2a448edf8000c64e18e5e1a11ca4f355862ba86b98257f5828950124654/plone.tiles-2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a0954b4e026d6c2e8e30fec7a1e986d", "sha256": "706dc4d9c4389f8046258d298c0b2cbd1d315a21339650075729f9282fec78d7"}, "downloads": -1, "filename": "plone.tiles-2.1.tar.gz", "has_sig": false, "md5_digest": "8a0954b4e026d6c2e8e30fec7a1e986d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65686, "upload_time": "2018-07-05T12:01:22", "upload_time_iso_8601": "2018-07-05T12:01:22.726330Z", "url": "https://files.pythonhosted.org/packages/0e/41/cdc7b15712784b3f27e6a5a1f50fff7d60282a94add8174ee9b7d26e86ba/plone.tiles-2.1.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "e9c009b296a0ed6abac3b325a68ecf40", "sha256": "d7e22355018b9ea6744f908d2a683094d085d07ea42a3314ec10289a50f5fc79"}, "downloads": -1, "filename": "plone.tiles-2.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "e9c009b296a0ed6abac3b325a68ecf40", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 56087, "upload_time": "2018-11-21T22:31:28", "upload_time_iso_8601": "2018-11-21T22:31:28.466136Z", "url": "https://files.pythonhosted.org/packages/f6/b2/8e22820b24e82d009cf7fff31a4fe37cad928fdbf6476c8abb4789b0336a/plone.tiles-2.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd07117ddf9d32c2783d7e0b183fc892", "sha256": "85b12eae6ed30b8afc24371d381893c16b894935ec6f445246232c2e1cbd2971"}, "downloads": -1, "filename": "plone.tiles-2.2.0.tar.gz", "has_sig": false, "md5_digest": "fd07117ddf9d32c2783d7e0b183fc892", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67508, "upload_time": "2018-11-21T22:31:31", "upload_time_iso_8601": "2018-11-21T22:31:31.072511Z", "url": "https://files.pythonhosted.org/packages/d1/bd/f5633f28180cc8c6dcec55773eab97e5a1ab0efa5bb5e51f8fa7f2679618/plone.tiles-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "d025db4756108394d5080bdbe0f4981b", "sha256": "99d49a188f64d25bfd35e1459e8e0cf779e5525e462c3ab4cb4b50eec5c4b4ad"}, "downloads": -1, "filename": "plone.tiles-2.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d025db4756108394d5080bdbe0f4981b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 56314, "upload_time": "2019-05-01T23:25:11", "upload_time_iso_8601": "2019-05-01T23:25:11.756865Z", "url": "https://files.pythonhosted.org/packages/f5/e1/bc55fdc6f0235ff3000fb42bcb538762bffe88b3e966780969e80e2c6676/plone.tiles-2.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4dfacd82e85fce5f0f3c32e01a23272b", "sha256": "c577074ebfbd88269845b3c3cf425abaa833807c18b995c72acf46d25efc8401"}, "downloads": -1, "filename": "plone.tiles-2.2.1.tar.gz", "has_sig": false, "md5_digest": "4dfacd82e85fce5f0f3c32e01a23272b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68234, "upload_time": "2019-05-01T23:25:13", "upload_time_iso_8601": "2019-05-01T23:25:13.632982Z", "url": "https://files.pythonhosted.org/packages/30/ac/f2780c54db89a9076ac71b5be423adb20b9f473664639a870495381cd312/plone.tiles-2.2.1.tar.gz", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "a3aaab6ea2b598b8301c93190881daf2", "sha256": "7afd27264f5dc92d638004c4ee04e633fcc2dc6e8c5ac353ed1af016bfcd3188"}, "downloads": -1, "filename": "plone.tiles-2.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a3aaab6ea2b598b8301c93190881daf2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 56353, "upload_time": "2020-04-22T21:27:18", "upload_time_iso_8601": "2020-04-22T21:27:18.445447Z", "url": "https://files.pythonhosted.org/packages/69/be/88f3f37b7b74fa146c078b38cf1ca9dcd071b5ee4f94384d0cc441136554/plone.tiles-2.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c350500e5f8866619e7e5ebcb7224f3a", "sha256": "39c735a93802deea8da9700ec919ebfc501e6df29285f32ee71845e1972e5067"}, "downloads": -1, "filename": "plone.tiles-2.2.2.tar.gz", "has_sig": false, "md5_digest": "c350500e5f8866619e7e5ebcb7224f3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68635, "upload_time": "2020-04-22T21:27:21", "upload_time_iso_8601": "2020-04-22T21:27:21.994357Z", "url": "https://files.pythonhosted.org/packages/fb/75/1bd23f406dca19f4829a8c6da205b485442e0f8f714460597780d46aae33/plone.tiles-2.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3aaab6ea2b598b8301c93190881daf2", "sha256": "7afd27264f5dc92d638004c4ee04e633fcc2dc6e8c5ac353ed1af016bfcd3188"}, "downloads": -1, "filename": "plone.tiles-2.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a3aaab6ea2b598b8301c93190881daf2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 56353, "upload_time": "2020-04-22T21:27:18", "upload_time_iso_8601": "2020-04-22T21:27:18.445447Z", "url": "https://files.pythonhosted.org/packages/69/be/88f3f37b7b74fa146c078b38cf1ca9dcd071b5ee4f94384d0cc441136554/plone.tiles-2.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c350500e5f8866619e7e5ebcb7224f3a", "sha256": "39c735a93802deea8da9700ec919ebfc501e6df29285f32ee71845e1972e5067"}, "downloads": -1, "filename": "plone.tiles-2.2.2.tar.gz", "has_sig": false, "md5_digest": "c350500e5f8866619e7e5ebcb7224f3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68635, "upload_time": "2020-04-22T21:27:21", "upload_time_iso_8601": "2020-04-22T21:27:21.994357Z", "url": "https://files.pythonhosted.org/packages/fb/75/1bd23f406dca19f4829a8c6da205b485442e0f8f714460597780d46aae33/plone.tiles-2.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:38 2020"}