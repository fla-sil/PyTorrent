{"info": {"author": "Mike Edmunds", "author_email": "medmunds@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: System :: Installation/Setup", "Topic :: System :: Systems Administration"], "description": "# AWS CloudFormation resources for Amazon SES domain and email identities\n\nAWS [CloudFormation][] provides several built-in \n[Amazon SES resource types][cfn-ses-resources], but is oddly missing the ones \nmost needed to get going with SES: **domain and email verification**. \n\nThis package implements those missing types as CloudFormation \n[custom resources][custom-resource]: `Custom::SES_Domain` and\n`Custom::SES_EmailIdentity`. \n\nYou can use `Custom::SES_Domain` to verify domains for sending and/or receiving \nemail through Amazon SES. It handles the SES domain verification calls and outputs \nSES's required DNS entries, so you can feed them directly into a standard\n`AWS::Route53::RecordSetGroup` resource (or to another DNS provider if you're not \nusing Route 53).\n\nSimilarly, you can use `Custom::SES_EmailIdentity` to verify individual email addresses\nfor sending through Amazon SES.\n\nThe custom resource implementations will properly create, update, and delete Amazon SES\nidentities as you modify your CloudFormation stack.\n\n\n**Documentation**\n\n* [Installation](#installation)\n* [Usage](#usage)\n  * [Custom::SES_Domain](#customses_domain)\n    * [Properties](#properties)\n    * [Return Values](#return-values)\n  * [Custom::SES_EmailIdentity](#customses_emailidentity)\n    * [Properties](#properties-1)\n    * [Return Values](#return-values-1)\n  * [Validating Your Templates](#validating-your-templates)\n* [Development](#development)\n* [Alternatives](#alternatives)\n* [Future](#future)\n\n\n## Installation\n\nThe custom SES resources are implemented as AWS Lambda Functions. To use them\nfrom your CloudFormation templates, you'll need to set up the functions along with \nIAM roles giving them permission to manage your Amazon SES domain/email identities.\n\nThe easiest way to do this is with a CloudFormation [nested stack][NestedStack]: \n\n1. Copy the `aws-cfn-ses-domain-VERSION.lambda.zip` Lambda package and \n   `aws-cfn-ses-domain-VERSION.cf.yaml` CloudFormation template from this repository's \n   [releases][] page into an S3 bucket in the region where you'll be running your\n   CloudFormation stack. This bucket needs to be readable from CloudFormation, but\n   need not be public. \n\n2. Then in your CloudFormation template, use a nested stack to create the Lambda \n   Functions and IAM roles for the custom SES resource types:\n\n```yaml\n  CfnSESResources:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/aws-cfn-ses-domain-VERSION.cf.yaml\n      Parameters:\n        LambdaCodeS3Bucket: YOUR_BUCKET\n        LambdaCodeS3Key: aws-cfn-ses-domain-VERSION.lambda.zip\n```\n\nThe `Custom::SES_Domain` and `Custom::SES_EmailIdentity` resource types are now \navailable to use like this (see [Usage](#usage) below for the full list of properties \nand return values):\n\n```yaml\n  MySESDomain:\n    Type: Custom::SES_Domain\n    Properties:\n      ServiceToken: !GetAtt CfnSESResources.Outputs.CustomDomainIdentityArn\n      Domain: \"example.com\"\n      # ...\n\n  MySESEmailIdentity:\n    Type: Custom::SES_EmailIdentity\n    Properties:\n      ServiceToken: !GetAtt CfnSESResources.Outputs.CustomEmailIdentityArn\n      EmailAddress: \"sender@example.com\"\n      # ...\n```\n\nIf you'd prefer to build and upload the custom resource code from source, \nsee the [Development](#development) section.\n\n\n\n## Usage\n\n### `Custom::SES_Domain`\n\nTo work with a `Custom::SES_Domain` resource in your CloudFormation template, you'll\ntypically:\n\n1. Define the AWS Lambda Function that implements the `Custom::SES_Domain` CloudFormation \n   custom resource type, as shown in [Installation](#installation) above.\n\n2. Declare a `Custom::SES_Domain` resource for your Amazon SES domain, specifying \n   whatever SES options you need.\n\n3. Declare an [`AWS::Route53::RecordSetGroup`][RecordSetGroup] resource to manage SES's \n   required DNS entries, passing it the [`Route53RecordSets`](#route53recordsets) \n   attribute of your `Custom::SES_Domain`. (Or if you're not using Route 53, use the \n   other `Custom::SES_Domain` [return values](#return-values) to create the appropriate \n   records with your DNS provider.)\n\nHere's how that looks in a cloudformation.yaml template\u2026\n\n```yaml\nResources:\n  # 1. Define the Custom::SES_Domain's Lambda Function via a nested stack. \n  CfnSESResources:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/aws-cfn-ses-domain-VERSION.cf.yaml\n      Parameters:\n        LambdaCodeS3Bucket: YOUR_BUCKET\n        LambdaCodeS3Key: aws-cfn-ses-domain-VERSION.lambda.zip\n\n  # 2. Declare a Custom::SES_Domain resource for your SES domain.\n  MySESDomain:\n    Type: Custom::SES_Domain\n    Properties:\n      # ServiceToken is the Arn of a Lambda Function from the nested stack:\n      ServiceToken: !GetAtt CfnSESResources.Outputs.CustomDomainIdentityArn\n      # Remaining Properties are options for provisioning for your SES domain identity:\n      # (Domain is required; all others are optional and shown with their defaults)\n      Domain: \"example.com\"\n      EnableSend: true\n      EnableReceive: false\n      MailFromSubdomain: \"mail\"\n      TTL: \"1800\"\n      CustomDMARC: '\"v=DMARC1; p=none; pct=100; sp=none; aspf=r;\"'\n      Region: !Ref \"AWS::Region\"\n\n  # 3. Declare a Route 53 RecordSetGroup to manage SES's required DNS entries.\n  #    (This assumes you already have a Route 53 hosted zone for your domain;\n  #    if not, you'll also want an AWS::Route53::HostedZone resource for it.\n  #    Or if you don't use Route 53, see \"Return Values\" for other DNS options.)\n  MyRoute53RecordsForSES:\n    Type: AWS::Route53::RecordSetGroup\n    Properties:\n      HostedZoneName: \"example.com.\"\n      # The Route53RecordSets attribute specifies all DNS records needed:\n      RecordSets: !GetAtt MySESDomain.Route53RecordSets\n```\n\n#### Properties\n\nA `Custom::SES_Domain` resource supports the following Properties:\n\n##### `ServiceToken`\n\nThe ARN of the Lambda Function that implements the `Custom::SES_Domain` type.\n(This is a standard property of all CloudFormation \n[AWS::CloudFormation::CustomResource][CustomResource] types.)\n\nIf you are using a nested stack as recommended in [Installation](#installation) above,\nthe `ServiceToken` should be set to the nested stack's `Outputs.CustomDomainIdentityArn`.\n\nNote that `Custom::SES_Domain` and `Custom::SES_EmailIdentity` use *different*\nServiceToken ARNs, even though both are provided from the same nested stack. \n\n*Required:* Yes\n\n*Type:* String\n\n*Update requires:* Updates are not supported\n\n\n##### `Domain` \n\nThe domain name you want to provision for sending and/or receiving email via Amazon SES,\nsuch as `example.com`. (A trailing period is not required, but is allowed to simplify \nworking with Route 53 HostedZone names that do require it.)\n\nFor more information, see [Verifying Domains in Amazon SES][verifying-ses-domains] \nin the *Amazon SES Developer Guide.*\n\n*Required:* Yes\n\n*Type:* String\n\n*Update requires:* Replacement\n\n\n##### `EnableSend`\n\nWhether to enable outbound Amazon SES email from the domain. If `true` (the default),\nthe resulting DNS records will include SES's required verification token and DKIM \nentries.\n\n*Required:* No\n\n*Type:* Boolean\n\n*Default:* `true`\n\n*Update requires:* No interruption\n\n\n##### `EnableReceive`\n\nWhether to enable inbound Amazon SES email to the domain. If `true`, the resulting\nDNS records will include SES's required verification token and inbound MX entry.\n\n*Required:* No\n\n*Type:* Boolean\n\n*Default:* `false`\n\n*Update requires:* No interruption\n\n\n##### `MailFromSubdomain`\n\nThe *subdomain* of [`Domain`](#domain) to use as a custom MAIL FROM domain when sending\nthrough Amazon SES. The default is `mail` (so if your `Custom::SES_Domain` resource has \n`Domain: example.com`, it will by default be provisioned in SES with the custom\nMAIL FROM domain `mail.example.com`). The resulting DNS records will include SES's \nrequired SPF and feedback MX entries for the MAIL FROM domain. \n\nTo *disable* using a custom MAIL FROM domain (and instead use SES's default \n*amazonses.com*), set to an empty string: `MailFromSubdomain: ''`.\n\nThis property is only meaningful when [`EnableSend`](#enablesend) is `true`. \n\nFor more information, see [Using a Custom MAIL FROM Domain][custom-mail-from-domain]\nin the *Amazon SES Developer Guide.*\n\n*Required:* No\n\n*Type:* String\n\n*Default:* `'mail'`\n\n*Update requires:* No interruption\n\n\n##### `CustomDMARC`\n\nA custom DMARC value to include in the resulting DNS entries. The default will enable\nDMARC for your outbound email in \"report only\" mode. Note that you *must* include the\ndouble quotes around the entire string (which requires escaping in JSON or wrapping\nin single quotes in YAML). Example:\n\n```yaml\n    CustomDMARC: '\"v=DMARC1; p=reject; pct=100; rua=mailto:postmaster@example.com\"'\n```\n\nTo *disable* generating a DMARC record, set to an empty string: `CustomDMARC: ''`.\n\nThis property is only meaningful when [`EnableSend`](#enablesend) is `true`. \n\nFor more information, see the [DMARC.org Overview][DMARC-overview].\n\n*Required:* No\n\n*Type:* String\n\n*Default:* `'\"v=DMARC1; p=none; pct=100; sp=none; aspf=r;\"'`\n\n*Update requires:* No interruption\n\n\n##### `TTL`\n\nThe time-to-live value to include in resulting DNS records (in seconds).\n\n*Required:* No\n\n*Type:* String\n\n*Default:* `'1800'`\n\n*Update requires:* No interruption\n\n\n##### `Region`\n\nThe AWS Region where your Amazon SES domain will be provisioned, e.g., `\"us-east-1\"`. \nThis must be a region where Amazon SES is supported. The default is the region where\nyour CloudFormation stack is running (or technically, where the `Custom::SES_Domain` \nlambda function is running.)\n\n*Required:* No\n\n*Type:* String\n\n*Default:* `${AWS::Region}`\n\n*Update requires:* Replacement\n\n\n\n#### Return Values\n\n##### Ref\n\nWhen a `Custom::SES_Domain` resource is provided to the `Ref` intrinsic function, \n`Ref` returns the Amazon Resource Name (ARN) of the Amazon SES domain identity \n(e.g., `arn:aws:ses:us-east-1:111111111111:identity/example.com`).\n\n*Changed in v0.3:* Earlier versions returned the domain (which is still available \nas `!GetAtt MySESDomain.Domain`).\n\n\n##### Fn::GetAtt\n\nA `Custom::SES_Domain` resource returns several [`Fn::GetAtt`][GetAtt] attributes that \ncan be used with other CloudFormation resources to maintain the required DNS records \nfor your Amazon SES domain.\n\n\n###### `Route53RecordSets`\n\nA List of [`AWS::Route53::RecordSet`][RecordSet] objects specifying the DNS records\nrequired for the `Custom::SES_Domain` identity.\n\nThis is suitable for use as the `RecordSets` property of an \n[`AWS::Route53::RecordSetGroup`][RecordSetGroup] resource. E.g.:\n\n```yaml\n  MyRoute53RecordsForSES:\n    Type: AWS::Route53::RecordSetGroup\n    Properties:\n      # HostedZone or HostedZoneName: ...\n      RecordSets: !GetAtt MySESDomain.Route53RecordSets\n```\n\nIf you update a `Custom::SES_Domain` resource, the `Route53RecordSets` attribute \nwill change accordingly, and CloudFormation will figure out the precise updates \nneeded to the Route 53 records.\n\n\n###### `ZoneFileEntries`\n\nA List of String lines that can be used in a standard [Zone File][ZoneFile] to specify \nthe DNS records required for the `Custom::SES_Domain` identity. The *name* field in each\nentry is a fully qualified hostname (ends in a period).\n\nExample:\n```yaml\n[\n  '_amazonses.example.com.         1800  IN  TXT    \"abcde12345\"',\n  'abcde1._domainkey.example.com.  1800  IN  CNAME  abcde1.dkim.amazonses.com.',\n  'fghij2._domainkey.example.com.  1800  IN  CNAME  fghij2.dkim.amazonses.com.',\n  'klmno3._domainkey.example.com.  1800  IN  CNAME  klmno3.dkim.amazonses.com.',\n  'mail.example.com.               1800  IN  MX     10 feedback-smtp.us-west-1.amazonses.com.',\n  'mail.example.com.               1800  IN  TXT    \"v=spf1 include:amazonses.com -all\"',\n  '_dmarc.example.com.             1800  IN  TXT    \"v=DMARC1; p=none; pct=100; sp=none; aspf=r;\"',\n  'example.com.                    1800  IN  MX     10 inbound-smtp.us-west-1.amazonaws.com.'\n]\n```\n\nThis can be useful if you are working with a DNS provider other than Route 53. For\nexample, to include the zone file entries in your stack's output, use something like:\n\n```yaml\nOutputs:\n  ZoneFileEntries:\n    Description: Add these lines to the zone file at your DNS provider.\n    Value: !Join [\"\\n\", !GetAtt MySESDomain.ZoneFileEntries]\n```\n\n\n###### Other attributes\n\nA `Custom::SES_Domain` resource provides several other SES-related attributes which\nmay be helpful for generating custom DNS records or other purposes:\n\n* `Domain` (String): The [`Domain`](#domain), without any trailing period. \n* `VerificationToken` (String): The VerificationToken returned from \n  [SES:VerifyDomainIdentity][VerifyDomainIdentity]\n* `DkimTokens` (List of String): The list of DkimTokens returned from \n  [SES:VerifyDomainDkim][VerifyDomainDkim] \n  (not available if [`EnableSend`](#enablesend) is false)\n* `MailFromDomain` (String): the custom MAIL FROM domain, e.g., `mail.example.com`\n  (not available if [`EnableSend`](#enablesend) is false \n  or if [`MailFromSubdomain`](#mailfromsubdomain) is empty)\n* `MailFromMX` (String): the feedback MX host to use with a custom MAIL FROM domain,\n  e.g., `feedback-smtp.us-east-1.amazonses.com` \n  (not available if [`EnableSend`](#enablesend) is false \n  or if [`MailFromSubdomain`](#mailfromsubdomain) is empty)\n* `MailFromSPF` (String): the SPF record value to use with a custom MAIL FROM domain\n  (including the double quotes), e.g., `\"v=spf1 include:amazonses.com -all\"`\n  (not available if [`EnableSend`](#enablesend) is false \n  or if [`MailFromSubdomain`](#mailfromsubdomain) is empty)\n* `DMARC` (String): the DMARC record value to use for outbound mail (including the \n  double quotes), e.g., `\"v=DMARC1; p=none; pct=100; sp=none; aspf=r;\"`\n  (not available if [`EnableSend`](#enablesend) is false \n  or if [`CustomDMARC`](#customdmarc) is empty)\n* `ReceiveMX` (String): the inbound MX host to use for receiving email, e.g.,\n  `inbound-smtp.us-east-1.amazonaws.com` \n  (not available if [`EnableReceive`](#enablereceive) is false) \n* `Arn` (String): the Amazon Resource Name (ARN) of the provisioned Amazon SES \n  domain identity (useful for delegating sending authorization; this is the same\n  value returned by [`!Ref MySESDomain`](#ref))\n* `Region` (String): the resolved [`Region`](#region) where the Amazon SES domain \n  was provisioned \n\n\n### `Custom::SES_EmailIdentity`\n\nTo work with a `Custom::SES_EmailIdentity` resource in your CloudFormation template, \nyou'll typically:\n\n1. Define the AWS Lambda Function that implements the `Custom::SES_EmailIdentity` \n  CloudFormation custom resource type, as shown in [Installation](#installation) above.\n\n2. Declare one or more `Custom::SES_EmailIdentity` resource for your the email addresses\n   you need to verify. \n\nHere's how that looks in a cloudformation.yaml template\u2026\n\n```yaml\nResources:\n  # 1. Define the Custom::SES_EmailIdentity's Lambda Function via a nested stack. \n  CfnSESResources:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/aws-cfn-ses-domain-VERSION.cf.yaml\n      Parameters:\n        LambdaCodeS3Bucket: YOUR_BUCKET\n        LambdaCodeS3Key: aws-cfn-ses-domain-VERSION.lambda.zip\n\n  # 2. Declare Custom::SES_EmailIdentity resources for each address to verify.\n  MySESSender:\n    Type: Custom::SES_EmailIdentity\n    Properties:\n      # ServiceToken is the Arn of a Lambda Function from the nested stack:\n      ServiceToken: !GetAtt CfnSESResources.Outputs.CustomEmailIdentityArn\n      # Remaining Properties are options for verifying the email address:\n      # (EmailAddress is required; all others are optional and shown with their defaults)\n      EmailAddress: \"sender@example.com\"\n      Region: !Ref \"AWS::Region\"\n\n  MySESReplyTo:\n    Type: Custom::SES_EmailIdentity\n    Properties:\n      ServiceToken: !GetAtt CfnSESResources.Outputs.CustomEmailIdentityArn\n      EmailAddress: \"noreply@example.com\"\n```\n\n#### Properties\n\n##### `ServiceToken`\n\nThe ARN of the Lambda Function that implements the `Custom::SES_EmailIdentity` type.\n(This is a standard property of all CloudFormation \n[AWS::CloudFormation::CustomResource][CustomResource] types.)\n\nIf you are using a nested stack as recommended in [Installation](#installation) above,\nthe `ServiceToken` should be set to the nested stack's `Outputs.CustomEmailIdentityArn`.\n\nNote that `Custom::SES_EmailIdentity` and `Custom::SES_Domain` use *different*\nServiceToken ARNs, even though both are provided from the same nested stack. \n\n*Required:* Yes\n\n*Type:* String\n\n*Update requires:* Updates are not supported\n\n\n##### `EmailAddress` \n\nThe email address you want to verify for sending through Amazon SES, such as \n`sender@example.com`. This cannot include any \"display name\", and must be a single\nemail address. (If you need to verify multiple addresses, simply create as many\n`Custom::SES_EmailAddress` resources as needed.)\n\nAWS will send a verification email to this address the first time the stack containing\nthe `Custom::SES_EmailAddress` resource is deployed, and again on any stack updates\nthat alter the resource (such as changing its `Region`). \n\nFor more information, see [Verifying Email Addresses in Amazon SES][verifying-ses-emails] \nin the *Amazon SES Developer Guide.*\n\n*Required:* Yes\n\n*Type:* String\n\n*Update requires:* Replacement\n\n\n##### `Region`\n\nThe AWS Region where the email address will be verified, e.g., `\"us-east-1\"`. \nThis must be a region where Amazon SES is supported. The default is the region where\nyour CloudFormation stack is running (or technically, where the \n`Custom::SES_EmailIdentity` lambda function is running.)\n\n*Required:* No\n\n*Type:* String\n\n*Default:* `${AWS::Region}`\n\n*Update requires:* Replacement\n\n\n#### Return Values\n\n##### Ref\n\nWhen a `Custom::SES_EmailIdentity` resource is provided to the `Ref` intrinsic function, \n`Ref` returns the Amazon Resource Name (ARN) of the Amazon SES email identity \n(e.g., `arn:aws:ses:us-east-1:111111111111:identity/sender@example.com`).\n\n##### Fn::GetAtt\n\nA `Custom::SES_EmailIdentity` resource returns a few [`Fn::GetAtt`][GetAtt] attributes\nthat may be helpful for working with it elsewhere in your template.\n\n* `Arn` (String): the Amazon Resource Name (ARN) of the Amazon SES email identity \n  (this is the same value returned by [`!Ref MySESEmailAddress`](#ref-1))\n* `EmailAddress` (String): the [`EmailAddress`](#emailaddress) that was verified\n* `Region` (String): the resolved [`Region`](#region-1) where the email identity \n  was verified \n\n\n### Validating Your Templates\n\nIf you use [cfn-lint][] (recommended!) to check your CloudFormation templates,\nyou can include an \"override spec\" so your `Custom::SES_Domain` and \n`Custom::SES_EmailIdentity` properties and attributes will be validated. Download a \ncopy of [CustomSESDomainSpecification.json](CustomSESDomainSpecification.json) and then:\n\n```bash\ncfn-lint --override-spec CustomSESDomainSpecification.json YOUR-TEMPLATE.cf.yaml\n``` \n\n(Without the override-spec, cfn-lint will allow *any* properties and values for\n`Custom::SES_Domain` and `Custom::SES_EmailIdentity` resources.)\n\n\n## Development\n\nDevelopment requires GNU Make (standard on most Linux-like systems) and [pipenv][].\n(Pipenv is used only to manage the development environment; package requirements are\ntracked in `setup.py`.)\n\nTo set up your development environment, clone the repository and then run `make init`.\n(This just runs `pipenv install`. If you are a package maintainer who will release\nto PyPI, use `pipenv install --dev` instead.)\n\nTo see a list of available make targets, run `make help`.\n\nTo package and upload your own version of the Lambda zip package and the CloudFormation\ntemplates, run `make S3_BUCKET=your_bucket_name upload`. If you just want to build \nlocally without uploading to S3, run `make S3_BUCKET=your_bucket_name all`. You can also\ninclude `S3_PREFIX=your/s3/prefix` or `S3_PREFIX=` in either of these commands,\nif desired.\n\nIf you are changing code, you will want to run tests (`make test`) and static code\nchecks (`make check`) before uploading.\n\nAdditional development customization variables are documented near the top \nof the Makefile.\n\n\n## Alternatives\n\nThese packages offer similar functionality (and provided some helpful background\nfor `Custom::SES_Domain`):\n\n* https://medium.com/poka-techblog/verify-domains-for-ses-using-cloudformation-8dd185c9b05c\n* https://github.com/binxio/cfn-ses-provider\n\nBoth of these manage your Route 53 records directly from the Lambda Function \n(rather than leaving that to other CloudFormation resources), and they may support \nfewer Amazon SES domain identity options than this package.\n\n\n## Future\n\nThe `Custom::SES_Domain` implementation is currently missing these Amazon SES \ndomain identity features:\n\n* Control over SNS feedback notifications and forwarding options\n  (SES:SetIdentityNotificationTopic and SES:SetIdentityFeedbackForwardingEnabled)\n* Control over Easy DKIM enabling (SES:SetIdentityDkimEnabled\u2014currently, \n  `Custom::SES_Domain` assumes if you are enabling sending, you also want Easy DKIM)\n\nAnd the `Custom::SES_EmailIdentity` implementation is currently missing this Amazon SES\nemail identity feature:\n\n* Ability to use a custom verification email template (SES:SendCustomVerificationEmail)\n  and configuration set when verifying an email address.\n\nAdding them is likely straightforward; contributions are welcome.\n\nAre you from Amazon? It'd be great to have the SES domain and email identity resources\nstandard in CloudFormation. Please consider adopting or obsoleting this package. \n(Just reach out if you'd like me to assign or transfer it.)\n\n\n[cfn-lint]:\n  https://github.com/awslabs/cfn-python-lint\n[cfn-ses-resources]:\n  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_SES.html\n[CloudFormation]:\n  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html\n[custom-mail-from-domain]: \n  https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html\n[custom-resource]: \n  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html\n[CustomResource]:\n  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html\n[DMARC-overview]: \n  https://dmarc.org/overview/\n[GetAtt]:\n  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html\n[NestedStack]: \n  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\n[RecordSet]: \n  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html\n[RecordSetGroup]: \n  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordsetgroup.html\n[pipenv]:\n  https://pipenv.readthedocs.io/\n[releases]: \n  https://github.com/medmunds/aws-cfn-ses-domain/releases\n[ses-smtp-endpoints]: \n  https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html#region-endpoints\n[VerifyDomainDkim]: \n  https://docs.aws.amazon.com/ses/latest/APIReference/API_VerifyDomainDkim.html\n[VerifyDomainIdentity]: \n  https://docs.aws.amazon.com/ses/latest/APIReference/API_VerifyDomainIdentity.html\n[verifying-ses-domains]: \n  https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html\n[verifying-ses-emails]: \n  https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html\n[ZoneFile]: \n  https://en.wikipedia.org/wiki/Zone_file\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/medmunds/aws-cfn-ses-domain", "keywords": "AWS-CloudFormation CloudFormation CloudFormation-custom-resource CustomResource Amazon-SES SES Route53 AWS-Lambda-Function", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "aws-cfn-ses-domain", "package_url": "https://pypi.org/project/aws-cfn-ses-domain/", "platform": "", "project_url": "https://pypi.org/project/aws-cfn-ses-domain/", "project_urls": {"Homepage": "https://github.com/medmunds/aws-cfn-ses-domain"}, "release_url": "https://pypi.org/project/aws-cfn-ses-domain/0.3/", "requires_dist": ["boto3 ; extra == 'test'"], "requires_python": ">=3.6.0", "summary": "AWS CloudFormation resources for Amazon SES domain and email identities", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AWS CloudFormation resources for Amazon SES domain and email identities</h1>\n<p>AWS <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html\" rel=\"nofollow\">CloudFormation</a> provides several built-in\n<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_SES.html\" rel=\"nofollow\">Amazon SES resource types</a>, but is oddly missing the ones\nmost needed to get going with SES: <strong>domain and email verification</strong>.</p>\n<p>This package implements those missing types as CloudFormation\n<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html\" rel=\"nofollow\">custom resources</a>: <code>Custom::SES_Domain</code> and\n<code>Custom::SES_EmailIdentity</code>.</p>\n<p>You can use <code>Custom::SES_Domain</code> to verify domains for sending and/or receiving\nemail through Amazon SES. It handles the SES domain verification calls and outputs\nSES's required DNS entries, so you can feed them directly into a standard\n<code>AWS::Route53::RecordSetGroup</code> resource (or to another DNS provider if you're not\nusing Route 53).</p>\n<p>Similarly, you can use <code>Custom::SES_EmailIdentity</code> to verify individual email addresses\nfor sending through Amazon SES.</p>\n<p>The custom resource implementations will properly create, update, and delete Amazon SES\nidentities as you modify your CloudFormation stack.</p>\n<p><strong>Documentation</strong></p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#customses_domain\" rel=\"nofollow\">Custom::SES_Domain</a>\n<ul>\n<li><a href=\"#properties\" rel=\"nofollow\">Properties</a></li>\n<li><a href=\"#return-values\" rel=\"nofollow\">Return Values</a></li>\n</ul>\n</li>\n<li><a href=\"#customses_emailidentity\" rel=\"nofollow\">Custom::SES_EmailIdentity</a>\n<ul>\n<li><a href=\"#properties-1\" rel=\"nofollow\">Properties</a></li>\n<li><a href=\"#return-values-1\" rel=\"nofollow\">Return Values</a></li>\n</ul>\n</li>\n<li><a href=\"#validating-your-templates\" rel=\"nofollow\">Validating Your Templates</a></li>\n</ul>\n</li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"#alternatives\" rel=\"nofollow\">Alternatives</a></li>\n<li><a href=\"#future\" rel=\"nofollow\">Future</a></li>\n</ul>\n<h2>Installation</h2>\n<p>The custom SES resources are implemented as AWS Lambda Functions. To use them\nfrom your CloudFormation templates, you'll need to set up the functions along with\nIAM roles giving them permission to manage your Amazon SES domain/email identities.</p>\n<p>The easiest way to do this is with a CloudFormation <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\" rel=\"nofollow\">nested stack</a>:</p>\n<ol>\n<li>\n<p>Copy the <code>aws-cfn-ses-domain-VERSION.lambda.zip</code> Lambda package and\n<code>aws-cfn-ses-domain-VERSION.cf.yaml</code> CloudFormation template from this repository's\n<a href=\"https://github.com/medmunds/aws-cfn-ses-domain/releases\" rel=\"nofollow\">releases</a> page into an S3 bucket in the region where you'll be running your\nCloudFormation stack. This bucket needs to be readable from CloudFormation, but\nneed not be public.</p>\n</li>\n<li>\n<p>Then in your CloudFormation template, use a nested stack to create the Lambda\nFunctions and IAM roles for the custom SES resource types:</p>\n</li>\n</ol>\n<pre>  <span class=\"nt\">CfnSESResources</span><span class=\"p\">:</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AWS::CloudFormation::Stack</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"nt\">TemplateURL</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://s3.amazonaws.com/YOUR_BUCKET/aws-cfn-ses-domain-VERSION.cf.yaml</span>\n      <span class=\"nt\">Parameters</span><span class=\"p\">:</span>\n        <span class=\"nt\">LambdaCodeS3Bucket</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">YOUR_BUCKET</span>\n        <span class=\"nt\">LambdaCodeS3Key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">aws-cfn-ses-domain-VERSION.lambda.zip</span>\n</pre>\n<p>The <code>Custom::SES_Domain</code> and <code>Custom::SES_EmailIdentity</code> resource types are now\navailable to use like this (see <a href=\"#usage\" rel=\"nofollow\">Usage</a> below for the full list of properties\nand return values):</p>\n<pre>  <span class=\"nt\">MySESDomain</span><span class=\"p\">:</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Custom::SES_Domain</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"nt\">ServiceToken</span><span class=\"p\">:</span> <span class=\"kt\">!GetAtt</span> <span class=\"l l-Scalar l-Scalar-Plain\">CfnSESResources.Outputs.CustomDomainIdentityArn</span>\n      <span class=\"nt\">Domain</span><span class=\"p\">:</span> <span class=\"s\">\"example.com\"</span>\n      <span class=\"c1\"># ...</span>\n\n  <span class=\"nt\">MySESEmailIdentity</span><span class=\"p\">:</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Custom::SES_EmailIdentity</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"nt\">ServiceToken</span><span class=\"p\">:</span> <span class=\"kt\">!GetAtt</span> <span class=\"l l-Scalar l-Scalar-Plain\">CfnSESResources.Outputs.CustomEmailIdentityArn</span>\n      <span class=\"nt\">EmailAddress</span><span class=\"p\">:</span> <span class=\"s\">\"sender@example.com\"</span>\n      <span class=\"c1\"># ...</span>\n</pre>\n<p>If you'd prefer to build and upload the custom resource code from source,\nsee the <a href=\"#development\" rel=\"nofollow\">Development</a> section.</p>\n<h2>Usage</h2>\n<h3><code>Custom::SES_Domain</code></h3>\n<p>To work with a <code>Custom::SES_Domain</code> resource in your CloudFormation template, you'll\ntypically:</p>\n<ol>\n<li>\n<p>Define the AWS Lambda Function that implements the <code>Custom::SES_Domain</code> CloudFormation\ncustom resource type, as shown in <a href=\"#installation\" rel=\"nofollow\">Installation</a> above.</p>\n</li>\n<li>\n<p>Declare a <code>Custom::SES_Domain</code> resource for your Amazon SES domain, specifying\nwhatever SES options you need.</p>\n</li>\n<li>\n<p>Declare an <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordsetgroup.html\" rel=\"nofollow\"><code>AWS::Route53::RecordSetGroup</code></a> resource to manage SES's\nrequired DNS entries, passing it the <a href=\"#route53recordsets\" rel=\"nofollow\"><code>Route53RecordSets</code></a>\nattribute of your <code>Custom::SES_Domain</code>. (Or if you're not using Route 53, use the\nother <code>Custom::SES_Domain</code> <a href=\"#return-values\" rel=\"nofollow\">return values</a> to create the appropriate\nrecords with your DNS provider.)</p>\n</li>\n</ol>\n<p>Here's how that looks in a cloudformation.yaml template\u2026</p>\n<pre><span class=\"nt\">Resources</span><span class=\"p\">:</span>\n  <span class=\"c1\"># 1. Define the Custom::SES_Domain's Lambda Function via a nested stack. </span>\n  <span class=\"nt\">CfnSESResources</span><span class=\"p\">:</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AWS::CloudFormation::Stack</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"nt\">TemplateURL</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://s3.amazonaws.com/YOUR_BUCKET/aws-cfn-ses-domain-VERSION.cf.yaml</span>\n      <span class=\"nt\">Parameters</span><span class=\"p\">:</span>\n        <span class=\"nt\">LambdaCodeS3Bucket</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">YOUR_BUCKET</span>\n        <span class=\"nt\">LambdaCodeS3Key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">aws-cfn-ses-domain-VERSION.lambda.zip</span>\n\n  <span class=\"c1\"># 2. Declare a Custom::SES_Domain resource for your SES domain.</span>\n  <span class=\"nt\">MySESDomain</span><span class=\"p\">:</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Custom::SES_Domain</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"c1\"># ServiceToken is the Arn of a Lambda Function from the nested stack:</span>\n      <span class=\"nt\">ServiceToken</span><span class=\"p\">:</span> <span class=\"kt\">!GetAtt</span> <span class=\"l l-Scalar l-Scalar-Plain\">CfnSESResources.Outputs.CustomDomainIdentityArn</span>\n      <span class=\"c1\"># Remaining Properties are options for provisioning for your SES domain identity:</span>\n      <span class=\"c1\"># (Domain is required; all others are optional and shown with their defaults)</span>\n      <span class=\"nt\">Domain</span><span class=\"p\">:</span> <span class=\"s\">\"example.com\"</span>\n      <span class=\"nt\">EnableSend</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n      <span class=\"nt\">EnableReceive</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n      <span class=\"nt\">MailFromSubdomain</span><span class=\"p\">:</span> <span class=\"s\">\"mail\"</span>\n      <span class=\"nt\">TTL</span><span class=\"p\">:</span> <span class=\"s\">\"1800\"</span>\n      <span class=\"nt\">CustomDMARC</span><span class=\"p\">:</span> <span class=\"s\">'\"v=DMARC1;</span><span class=\"nv\"> </span><span class=\"s\">p=none;</span><span class=\"nv\"> </span><span class=\"s\">pct=100;</span><span class=\"nv\"> </span><span class=\"s\">sp=none;</span><span class=\"nv\"> </span><span class=\"s\">aspf=r;\"'</span>\n      <span class=\"nt\">Region</span><span class=\"p\">:</span> <span class=\"kt\">!Ref</span> <span class=\"s\">\"AWS::Region\"</span>\n\n  <span class=\"c1\"># 3. Declare a Route 53 RecordSetGroup to manage SES's required DNS entries.</span>\n  <span class=\"c1\">#    (This assumes you already have a Route 53 hosted zone for your domain;</span>\n  <span class=\"c1\">#    if not, you'll also want an AWS::Route53::HostedZone resource for it.</span>\n  <span class=\"c1\">#    Or if you don't use Route 53, see \"Return Values\" for other DNS options.)</span>\n  <span class=\"nt\">MyRoute53RecordsForSES</span><span class=\"p\">:</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AWS::Route53::RecordSetGroup</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"nt\">HostedZoneName</span><span class=\"p\">:</span> <span class=\"s\">\"example.com.\"</span>\n      <span class=\"c1\"># The Route53RecordSets attribute specifies all DNS records needed:</span>\n      <span class=\"nt\">RecordSets</span><span class=\"p\">:</span> <span class=\"kt\">!GetAtt</span> <span class=\"l l-Scalar l-Scalar-Plain\">MySESDomain.Route53RecordSets</span>\n</pre>\n<h4>Properties</h4>\n<p>A <code>Custom::SES_Domain</code> resource supports the following Properties:</p>\n<h5><code>ServiceToken</code></h5>\n<p>The ARN of the Lambda Function that implements the <code>Custom::SES_Domain</code> type.\n(This is a standard property of all CloudFormation\n<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html\" rel=\"nofollow\">AWS::CloudFormation::CustomResource</a> types.)</p>\n<p>If you are using a nested stack as recommended in <a href=\"#installation\" rel=\"nofollow\">Installation</a> above,\nthe <code>ServiceToken</code> should be set to the nested stack's <code>Outputs.CustomDomainIdentityArn</code>.</p>\n<p>Note that <code>Custom::SES_Domain</code> and <code>Custom::SES_EmailIdentity</code> use <em>different</em>\nServiceToken ARNs, even though both are provided from the same nested stack.</p>\n<p><em>Required:</em> Yes</p>\n<p><em>Type:</em> String</p>\n<p><em>Update requires:</em> Updates are not supported</p>\n<h5><code>Domain</code></h5>\n<p>The domain name you want to provision for sending and/or receiving email via Amazon SES,\nsuch as <code>example.com</code>. (A trailing period is not required, but is allowed to simplify\nworking with Route 53 HostedZone names that do require it.)</p>\n<p>For more information, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html\" rel=\"nofollow\">Verifying Domains in Amazon SES</a>\nin the <em>Amazon SES Developer Guide.</em></p>\n<p><em>Required:</em> Yes</p>\n<p><em>Type:</em> String</p>\n<p><em>Update requires:</em> Replacement</p>\n<h5><code>EnableSend</code></h5>\n<p>Whether to enable outbound Amazon SES email from the domain. If <code>true</code> (the default),\nthe resulting DNS records will include SES's required verification token and DKIM\nentries.</p>\n<p><em>Required:</em> No</p>\n<p><em>Type:</em> Boolean</p>\n<p><em>Default:</em> <code>true</code></p>\n<p><em>Update requires:</em> No interruption</p>\n<h5><code>EnableReceive</code></h5>\n<p>Whether to enable inbound Amazon SES email to the domain. If <code>true</code>, the resulting\nDNS records will include SES's required verification token and inbound MX entry.</p>\n<p><em>Required:</em> No</p>\n<p><em>Type:</em> Boolean</p>\n<p><em>Default:</em> <code>false</code></p>\n<p><em>Update requires:</em> No interruption</p>\n<h5><code>MailFromSubdomain</code></h5>\n<p>The <em>subdomain</em> of <a href=\"#domain\" rel=\"nofollow\"><code>Domain</code></a> to use as a custom MAIL FROM domain when sending\nthrough Amazon SES. The default is <code>mail</code> (so if your <code>Custom::SES_Domain</code> resource has\n<code>Domain: example.com</code>, it will by default be provisioned in SES with the custom\nMAIL FROM domain <code>mail.example.com</code>). The resulting DNS records will include SES's\nrequired SPF and feedback MX entries for the MAIL FROM domain.</p>\n<p>To <em>disable</em> using a custom MAIL FROM domain (and instead use SES's default\n<em>amazonses.com</em>), set to an empty string: <code>MailFromSubdomain: ''</code>.</p>\n<p>This property is only meaningful when <a href=\"#enablesend\" rel=\"nofollow\"><code>EnableSend</code></a> is <code>true</code>.</p>\n<p>For more information, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html\" rel=\"nofollow\">Using a Custom MAIL FROM Domain</a>\nin the <em>Amazon SES Developer Guide.</em></p>\n<p><em>Required:</em> No</p>\n<p><em>Type:</em> String</p>\n<p><em>Default:</em> <code>'mail'</code></p>\n<p><em>Update requires:</em> No interruption</p>\n<h5><code>CustomDMARC</code></h5>\n<p>A custom DMARC value to include in the resulting DNS entries. The default will enable\nDMARC for your outbound email in \"report only\" mode. Note that you <em>must</em> include the\ndouble quotes around the entire string (which requires escaping in JSON or wrapping\nin single quotes in YAML). Example:</p>\n<pre>    <span class=\"nt\">CustomDMARC</span><span class=\"p\">:</span> <span class=\"s\">'\"v=DMARC1;</span><span class=\"nv\"> </span><span class=\"s\">p=reject;</span><span class=\"nv\"> </span><span class=\"s\">pct=100;</span><span class=\"nv\"> </span><span class=\"s\">rua=mailto:postmaster@example.com\"'</span>\n</pre>\n<p>To <em>disable</em> generating a DMARC record, set to an empty string: <code>CustomDMARC: ''</code>.</p>\n<p>This property is only meaningful when <a href=\"#enablesend\" rel=\"nofollow\"><code>EnableSend</code></a> is <code>true</code>.</p>\n<p>For more information, see the <a href=\"https://dmarc.org/overview/\" rel=\"nofollow\">DMARC.org Overview</a>.</p>\n<p><em>Required:</em> No</p>\n<p><em>Type:</em> String</p>\n<p><em>Default:</em> <code>'\"v=DMARC1; p=none; pct=100; sp=none; aspf=r;\"'</code></p>\n<p><em>Update requires:</em> No interruption</p>\n<h5><code>TTL</code></h5>\n<p>The time-to-live value to include in resulting DNS records (in seconds).</p>\n<p><em>Required:</em> No</p>\n<p><em>Type:</em> String</p>\n<p><em>Default:</em> <code>'1800'</code></p>\n<p><em>Update requires:</em> No interruption</p>\n<h5><code>Region</code></h5>\n<p>The AWS Region where your Amazon SES domain will be provisioned, e.g., <code>\"us-east-1\"</code>.\nThis must be a region where Amazon SES is supported. The default is the region where\nyour CloudFormation stack is running (or technically, where the <code>Custom::SES_Domain</code>\nlambda function is running.)</p>\n<p><em>Required:</em> No</p>\n<p><em>Type:</em> String</p>\n<p><em>Default:</em> <code>${AWS::Region}</code></p>\n<p><em>Update requires:</em> Replacement</p>\n<h4>Return Values</h4>\n<h5>Ref</h5>\n<p>When a <code>Custom::SES_Domain</code> resource is provided to the <code>Ref</code> intrinsic function,\n<code>Ref</code> returns the Amazon Resource Name (ARN) of the Amazon SES domain identity\n(e.g., <code>arn:aws:ses:us-east-1:111111111111:identity/example.com</code>).</p>\n<p><em>Changed in v0.3:</em> Earlier versions returned the domain (which is still available\nas <code>!GetAtt MySESDomain.Domain</code>).</p>\n<h5>Fn::GetAtt</h5>\n<p>A <code>Custom::SES_Domain</code> resource returns several <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html\" rel=\"nofollow\"><code>Fn::GetAtt</code></a> attributes that\ncan be used with other CloudFormation resources to maintain the required DNS records\nfor your Amazon SES domain.</p>\n<h6><code>Route53RecordSets</code></h6>\n<p>A List of <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html\" rel=\"nofollow\"><code>AWS::Route53::RecordSet</code></a> objects specifying the DNS records\nrequired for the <code>Custom::SES_Domain</code> identity.</p>\n<p>This is suitable for use as the <code>RecordSets</code> property of an\n<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordsetgroup.html\" rel=\"nofollow\"><code>AWS::Route53::RecordSetGroup</code></a> resource. E.g.:</p>\n<pre>  <span class=\"nt\">MyRoute53RecordsForSES</span><span class=\"p\">:</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AWS::Route53::RecordSetGroup</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"c1\"># HostedZone or HostedZoneName: ...</span>\n      <span class=\"nt\">RecordSets</span><span class=\"p\">:</span> <span class=\"kt\">!GetAtt</span> <span class=\"l l-Scalar l-Scalar-Plain\">MySESDomain.Route53RecordSets</span>\n</pre>\n<p>If you update a <code>Custom::SES_Domain</code> resource, the <code>Route53RecordSets</code> attribute\nwill change accordingly, and CloudFormation will figure out the precise updates\nneeded to the Route 53 records.</p>\n<h6><code>ZoneFileEntries</code></h6>\n<p>A List of String lines that can be used in a standard <a href=\"https://en.wikipedia.org/wiki/Zone_file\" rel=\"nofollow\">Zone File</a> to specify\nthe DNS records required for the <code>Custom::SES_Domain</code> identity. The <em>name</em> field in each\nentry is a fully qualified hostname (ends in a period).</p>\n<p>Example:</p>\n<pre><span class=\"p p-Indicator\">[</span>\n  <span class=\"s\">'_amazonses.example.com.</span><span class=\"nv\">         </span><span class=\"s\">1800</span><span class=\"nv\">  </span><span class=\"s\">IN</span><span class=\"nv\">  </span><span class=\"s\">TXT</span><span class=\"nv\">    </span><span class=\"s\">\"abcde12345\"'</span><span class=\"p p-Indicator\">,</span>\n  <span class=\"s\">'abcde1._domainkey.example.com.</span><span class=\"nv\">  </span><span class=\"s\">1800</span><span class=\"nv\">  </span><span class=\"s\">IN</span><span class=\"nv\">  </span><span class=\"s\">CNAME</span><span class=\"nv\">  </span><span class=\"s\">abcde1.dkim.amazonses.com.'</span><span class=\"p p-Indicator\">,</span>\n  <span class=\"s\">'fghij2._domainkey.example.com.</span><span class=\"nv\">  </span><span class=\"s\">1800</span><span class=\"nv\">  </span><span class=\"s\">IN</span><span class=\"nv\">  </span><span class=\"s\">CNAME</span><span class=\"nv\">  </span><span class=\"s\">fghij2.dkim.amazonses.com.'</span><span class=\"p p-Indicator\">,</span>\n  <span class=\"s\">'klmno3._domainkey.example.com.</span><span class=\"nv\">  </span><span class=\"s\">1800</span><span class=\"nv\">  </span><span class=\"s\">IN</span><span class=\"nv\">  </span><span class=\"s\">CNAME</span><span class=\"nv\">  </span><span class=\"s\">klmno3.dkim.amazonses.com.'</span><span class=\"p p-Indicator\">,</span>\n  <span class=\"s\">'mail.example.com.</span><span class=\"nv\">               </span><span class=\"s\">1800</span><span class=\"nv\">  </span><span class=\"s\">IN</span><span class=\"nv\">  </span><span class=\"s\">MX</span><span class=\"nv\">     </span><span class=\"s\">10</span><span class=\"nv\"> </span><span class=\"s\">feedback-smtp.us-west-1.amazonses.com.'</span><span class=\"p p-Indicator\">,</span>\n  <span class=\"s\">'mail.example.com.</span><span class=\"nv\">               </span><span class=\"s\">1800</span><span class=\"nv\">  </span><span class=\"s\">IN</span><span class=\"nv\">  </span><span class=\"s\">TXT</span><span class=\"nv\">    </span><span class=\"s\">\"v=spf1</span><span class=\"nv\"> </span><span class=\"s\">include:amazonses.com</span><span class=\"nv\"> </span><span class=\"s\">-all\"'</span><span class=\"p p-Indicator\">,</span>\n  <span class=\"s\">'_dmarc.example.com.</span><span class=\"nv\">             </span><span class=\"s\">1800</span><span class=\"nv\">  </span><span class=\"s\">IN</span><span class=\"nv\">  </span><span class=\"s\">TXT</span><span class=\"nv\">    </span><span class=\"s\">\"v=DMARC1;</span><span class=\"nv\"> </span><span class=\"s\">p=none;</span><span class=\"nv\"> </span><span class=\"s\">pct=100;</span><span class=\"nv\"> </span><span class=\"s\">sp=none;</span><span class=\"nv\"> </span><span class=\"s\">aspf=r;\"'</span><span class=\"p p-Indicator\">,</span>\n  <span class=\"s\">'example.com.</span><span class=\"nv\">                    </span><span class=\"s\">1800</span><span class=\"nv\">  </span><span class=\"s\">IN</span><span class=\"nv\">  </span><span class=\"s\">MX</span><span class=\"nv\">     </span><span class=\"s\">10</span><span class=\"nv\"> </span><span class=\"s\">inbound-smtp.us-west-1.amazonaws.com.'</span>\n<span class=\"p p-Indicator\">]</span>\n</pre>\n<p>This can be useful if you are working with a DNS provider other than Route 53. For\nexample, to include the zone file entries in your stack's output, use something like:</p>\n<pre><span class=\"nt\">Outputs</span><span class=\"p\">:</span>\n  <span class=\"nt\">ZoneFileEntries</span><span class=\"p\">:</span>\n    <span class=\"nt\">Description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Add these lines to the zone file at your DNS provider.</span>\n    <span class=\"nt\">Value</span><span class=\"p\">:</span> <span class=\"kt\">!Join</span> <span class=\"p p-Indicator\">[</span><span class=\"s\">\"\\n\"</span><span class=\"p p-Indicator\">,</span> <span class=\"kt\">!GetAtt</span> <span class=\"nv\">MySESDomain.ZoneFileEntries</span><span class=\"p p-Indicator\">]</span>\n</pre>\n<h6>Other attributes</h6>\n<p>A <code>Custom::SES_Domain</code> resource provides several other SES-related attributes which\nmay be helpful for generating custom DNS records or other purposes:</p>\n<ul>\n<li><code>Domain</code> (String): The <a href=\"#domain\" rel=\"nofollow\"><code>Domain</code></a>, without any trailing period.</li>\n<li><code>VerificationToken</code> (String): The VerificationToken returned from\n<a href=\"https://docs.aws.amazon.com/ses/latest/APIReference/API_VerifyDomainIdentity.html\" rel=\"nofollow\">SES:VerifyDomainIdentity</a></li>\n<li><code>DkimTokens</code> (List of String): The list of DkimTokens returned from\n<a href=\"https://docs.aws.amazon.com/ses/latest/APIReference/API_VerifyDomainDkim.html\" rel=\"nofollow\">SES:VerifyDomainDkim</a>\n(not available if <a href=\"#enablesend\" rel=\"nofollow\"><code>EnableSend</code></a> is false)</li>\n<li><code>MailFromDomain</code> (String): the custom MAIL FROM domain, e.g., <code>mail.example.com</code>\n(not available if <a href=\"#enablesend\" rel=\"nofollow\"><code>EnableSend</code></a> is false\nor if <a href=\"#mailfromsubdomain\" rel=\"nofollow\"><code>MailFromSubdomain</code></a> is empty)</li>\n<li><code>MailFromMX</code> (String): the feedback MX host to use with a custom MAIL FROM domain,\ne.g., <code>feedback-smtp.us-east-1.amazonses.com</code>\n(not available if <a href=\"#enablesend\" rel=\"nofollow\"><code>EnableSend</code></a> is false\nor if <a href=\"#mailfromsubdomain\" rel=\"nofollow\"><code>MailFromSubdomain</code></a> is empty)</li>\n<li><code>MailFromSPF</code> (String): the SPF record value to use with a custom MAIL FROM domain\n(including the double quotes), e.g., <code>\"v=spf1 include:amazonses.com -all\"</code>\n(not available if <a href=\"#enablesend\" rel=\"nofollow\"><code>EnableSend</code></a> is false\nor if <a href=\"#mailfromsubdomain\" rel=\"nofollow\"><code>MailFromSubdomain</code></a> is empty)</li>\n<li><code>DMARC</code> (String): the DMARC record value to use for outbound mail (including the\ndouble quotes), e.g., <code>\"v=DMARC1; p=none; pct=100; sp=none; aspf=r;\"</code>\n(not available if <a href=\"#enablesend\" rel=\"nofollow\"><code>EnableSend</code></a> is false\nor if <a href=\"#customdmarc\" rel=\"nofollow\"><code>CustomDMARC</code></a> is empty)</li>\n<li><code>ReceiveMX</code> (String): the inbound MX host to use for receiving email, e.g.,\n<code>inbound-smtp.us-east-1.amazonaws.com</code>\n(not available if <a href=\"#enablereceive\" rel=\"nofollow\"><code>EnableReceive</code></a> is false)</li>\n<li><code>Arn</code> (String): the Amazon Resource Name (ARN) of the provisioned Amazon SES\ndomain identity (useful for delegating sending authorization; this is the same\nvalue returned by <a href=\"#ref\" rel=\"nofollow\"><code>!Ref MySESDomain</code></a>)</li>\n<li><code>Region</code> (String): the resolved <a href=\"#region\" rel=\"nofollow\"><code>Region</code></a> where the Amazon SES domain\nwas provisioned</li>\n</ul>\n<h3><code>Custom::SES_EmailIdentity</code></h3>\n<p>To work with a <code>Custom::SES_EmailIdentity</code> resource in your CloudFormation template,\nyou'll typically:</p>\n<ol>\n<li>\n<p>Define the AWS Lambda Function that implements the <code>Custom::SES_EmailIdentity</code>\nCloudFormation custom resource type, as shown in <a href=\"#installation\" rel=\"nofollow\">Installation</a> above.</p>\n</li>\n<li>\n<p>Declare one or more <code>Custom::SES_EmailIdentity</code> resource for your the email addresses\nyou need to verify.</p>\n</li>\n</ol>\n<p>Here's how that looks in a cloudformation.yaml template\u2026</p>\n<pre><span class=\"nt\">Resources</span><span class=\"p\">:</span>\n  <span class=\"c1\"># 1. Define the Custom::SES_EmailIdentity's Lambda Function via a nested stack. </span>\n  <span class=\"nt\">CfnSESResources</span><span class=\"p\">:</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AWS::CloudFormation::Stack</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"nt\">TemplateURL</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://s3.amazonaws.com/YOUR_BUCKET/aws-cfn-ses-domain-VERSION.cf.yaml</span>\n      <span class=\"nt\">Parameters</span><span class=\"p\">:</span>\n        <span class=\"nt\">LambdaCodeS3Bucket</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">YOUR_BUCKET</span>\n        <span class=\"nt\">LambdaCodeS3Key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">aws-cfn-ses-domain-VERSION.lambda.zip</span>\n\n  <span class=\"c1\"># 2. Declare Custom::SES_EmailIdentity resources for each address to verify.</span>\n  <span class=\"nt\">MySESSender</span><span class=\"p\">:</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Custom::SES_EmailIdentity</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"c1\"># ServiceToken is the Arn of a Lambda Function from the nested stack:</span>\n      <span class=\"nt\">ServiceToken</span><span class=\"p\">:</span> <span class=\"kt\">!GetAtt</span> <span class=\"l l-Scalar l-Scalar-Plain\">CfnSESResources.Outputs.CustomEmailIdentityArn</span>\n      <span class=\"c1\"># Remaining Properties are options for verifying the email address:</span>\n      <span class=\"c1\"># (EmailAddress is required; all others are optional and shown with their defaults)</span>\n      <span class=\"nt\">EmailAddress</span><span class=\"p\">:</span> <span class=\"s\">\"sender@example.com\"</span>\n      <span class=\"nt\">Region</span><span class=\"p\">:</span> <span class=\"kt\">!Ref</span> <span class=\"s\">\"AWS::Region\"</span>\n\n  <span class=\"nt\">MySESReplyTo</span><span class=\"p\">:</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Custom::SES_EmailIdentity</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"nt\">ServiceToken</span><span class=\"p\">:</span> <span class=\"kt\">!GetAtt</span> <span class=\"l l-Scalar l-Scalar-Plain\">CfnSESResources.Outputs.CustomEmailIdentityArn</span>\n      <span class=\"nt\">EmailAddress</span><span class=\"p\">:</span> <span class=\"s\">\"noreply@example.com\"</span>\n</pre>\n<h4>Properties</h4>\n<h5><code>ServiceToken</code></h5>\n<p>The ARN of the Lambda Function that implements the <code>Custom::SES_EmailIdentity</code> type.\n(This is a standard property of all CloudFormation\n<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html\" rel=\"nofollow\">AWS::CloudFormation::CustomResource</a> types.)</p>\n<p>If you are using a nested stack as recommended in <a href=\"#installation\" rel=\"nofollow\">Installation</a> above,\nthe <code>ServiceToken</code> should be set to the nested stack's <code>Outputs.CustomEmailIdentityArn</code>.</p>\n<p>Note that <code>Custom::SES_EmailIdentity</code> and <code>Custom::SES_Domain</code> use <em>different</em>\nServiceToken ARNs, even though both are provided from the same nested stack.</p>\n<p><em>Required:</em> Yes</p>\n<p><em>Type:</em> String</p>\n<p><em>Update requires:</em> Updates are not supported</p>\n<h5><code>EmailAddress</code></h5>\n<p>The email address you want to verify for sending through Amazon SES, such as\n<code>sender@example.com</code>. This cannot include any \"display name\", and must be a single\nemail address. (If you need to verify multiple addresses, simply create as many\n<code>Custom::SES_EmailAddress</code> resources as needed.)</p>\n<p>AWS will send a verification email to this address the first time the stack containing\nthe <code>Custom::SES_EmailAddress</code> resource is deployed, and again on any stack updates\nthat alter the resource (such as changing its <code>Region</code>).</p>\n<p>For more information, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html\" rel=\"nofollow\">Verifying Email Addresses in Amazon SES</a>\nin the <em>Amazon SES Developer Guide.</em></p>\n<p><em>Required:</em> Yes</p>\n<p><em>Type:</em> String</p>\n<p><em>Update requires:</em> Replacement</p>\n<h5><code>Region</code></h5>\n<p>The AWS Region where the email address will be verified, e.g., <code>\"us-east-1\"</code>.\nThis must be a region where Amazon SES is supported. The default is the region where\nyour CloudFormation stack is running (or technically, where the\n<code>Custom::SES_EmailIdentity</code> lambda function is running.)</p>\n<p><em>Required:</em> No</p>\n<p><em>Type:</em> String</p>\n<p><em>Default:</em> <code>${AWS::Region}</code></p>\n<p><em>Update requires:</em> Replacement</p>\n<h4>Return Values</h4>\n<h5>Ref</h5>\n<p>When a <code>Custom::SES_EmailIdentity</code> resource is provided to the <code>Ref</code> intrinsic function,\n<code>Ref</code> returns the Amazon Resource Name (ARN) of the Amazon SES email identity\n(e.g., <code>arn:aws:ses:us-east-1:111111111111:identity/sender@example.com</code>).</p>\n<h5>Fn::GetAtt</h5>\n<p>A <code>Custom::SES_EmailIdentity</code> resource returns a few <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html\" rel=\"nofollow\"><code>Fn::GetAtt</code></a> attributes\nthat may be helpful for working with it elsewhere in your template.</p>\n<ul>\n<li><code>Arn</code> (String): the Amazon Resource Name (ARN) of the Amazon SES email identity\n(this is the same value returned by <a href=\"#ref-1\" rel=\"nofollow\"><code>!Ref MySESEmailAddress</code></a>)</li>\n<li><code>EmailAddress</code> (String): the <a href=\"#emailaddress\" rel=\"nofollow\"><code>EmailAddress</code></a> that was verified</li>\n<li><code>Region</code> (String): the resolved <a href=\"#region-1\" rel=\"nofollow\"><code>Region</code></a> where the email identity\nwas verified</li>\n</ul>\n<h3>Validating Your Templates</h3>\n<p>If you use <a href=\"https://github.com/awslabs/cfn-python-lint\" rel=\"nofollow\">cfn-lint</a> (recommended!) to check your CloudFormation templates,\nyou can include an \"override spec\" so your <code>Custom::SES_Domain</code> and\n<code>Custom::SES_EmailIdentity</code> properties and attributes will be validated. Download a\ncopy of <a href=\"CustomSESDomainSpecification.json\" rel=\"nofollow\">CustomSESDomainSpecification.json</a> and then:</p>\n<pre>cfn-lint --override-spec CustomSESDomainSpecification.json YOUR-TEMPLATE.cf.yaml\n</pre>\n<p>(Without the override-spec, cfn-lint will allow <em>any</em> properties and values for\n<code>Custom::SES_Domain</code> and <code>Custom::SES_EmailIdentity</code> resources.)</p>\n<h2>Development</h2>\n<p>Development requires GNU Make (standard on most Linux-like systems) and <a href=\"https://pipenv.readthedocs.io/\" rel=\"nofollow\">pipenv</a>.\n(Pipenv is used only to manage the development environment; package requirements are\ntracked in <code>setup.py</code>.)</p>\n<p>To set up your development environment, clone the repository and then run <code>make init</code>.\n(This just runs <code>pipenv install</code>. If you are a package maintainer who will release\nto PyPI, use <code>pipenv install --dev</code> instead.)</p>\n<p>To see a list of available make targets, run <code>make help</code>.</p>\n<p>To package and upload your own version of the Lambda zip package and the CloudFormation\ntemplates, run <code>make S3_BUCKET=your_bucket_name upload</code>. If you just want to build\nlocally without uploading to S3, run <code>make S3_BUCKET=your_bucket_name all</code>. You can also\ninclude <code>S3_PREFIX=your/s3/prefix</code> or <code>S3_PREFIX=</code> in either of these commands,\nif desired.</p>\n<p>If you are changing code, you will want to run tests (<code>make test</code>) and static code\nchecks (<code>make check</code>) before uploading.</p>\n<p>Additional development customization variables are documented near the top\nof the Makefile.</p>\n<h2>Alternatives</h2>\n<p>These packages offer similar functionality (and provided some helpful background\nfor <code>Custom::SES_Domain</code>):</p>\n<ul>\n<li><a href=\"https://medium.com/poka-techblog/verify-domains-for-ses-using-cloudformation-8dd185c9b05c\" rel=\"nofollow\">https://medium.com/poka-techblog/verify-domains-for-ses-using-cloudformation-8dd185c9b05c</a></li>\n<li><a href=\"https://github.com/binxio/cfn-ses-provider\" rel=\"nofollow\">https://github.com/binxio/cfn-ses-provider</a></li>\n</ul>\n<p>Both of these manage your Route 53 records directly from the Lambda Function\n(rather than leaving that to other CloudFormation resources), and they may support\nfewer Amazon SES domain identity options than this package.</p>\n<h2>Future</h2>\n<p>The <code>Custom::SES_Domain</code> implementation is currently missing these Amazon SES\ndomain identity features:</p>\n<ul>\n<li>Control over SNS feedback notifications and forwarding options\n(SES:SetIdentityNotificationTopic and SES:SetIdentityFeedbackForwardingEnabled)</li>\n<li>Control over Easy DKIM enabling (SES:SetIdentityDkimEnabled\u2014currently,\n<code>Custom::SES_Domain</code> assumes if you are enabling sending, you also want Easy DKIM)</li>\n</ul>\n<p>And the <code>Custom::SES_EmailIdentity</code> implementation is currently missing this Amazon SES\nemail identity feature:</p>\n<ul>\n<li>Ability to use a custom verification email template (SES:SendCustomVerificationEmail)\nand configuration set when verifying an email address.</li>\n</ul>\n<p>Adding them is likely straightforward; contributions are welcome.</p>\n<p>Are you from Amazon? It'd be great to have the SES domain and email identity resources\nstandard in CloudFormation. Please consider adopting or obsoleting this package.\n(Just reach out if you'd like me to assign or transfer it.)</p>\n\n          </div>"}, "last_serial": 6411106, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "dbf2ae76f9b7f3fdfc7b15770c8ca508", "sha256": "091a5f8951bf0b1eeb24b43ff99580bdeab36812c4a2193364d492073d45c151"}, "downloads": -1, "filename": "aws_cfn_ses_domain-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dbf2ae76f9b7f3fdfc7b15770c8ca508", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 14627, "upload_time": "2018-11-02T23:56:01", "upload_time_iso_8601": "2018-11-02T23:56:01.692398Z", "url": "https://files.pythonhosted.org/packages/d1/a5/cdf2ef70efbd3a1c2b7462bb8aa751901347d160567aaddb3f0360a4f6ce/aws_cfn_ses_domain-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa74559f3e7812d4313624c2c13b0f93", "sha256": "ea145a1f7ccdd238fbb173b8b92c935723b60cc38e2d87951ea23c15b30a9f67"}, "downloads": -1, "filename": "aws-cfn-ses-domain-0.1.tar.gz", "has_sig": false, "md5_digest": "aa74559f3e7812d4313624c2c13b0f93", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 14815, "upload_time": "2018-11-02T23:56:03", "upload_time_iso_8601": "2018-11-02T23:56:03.995260Z", "url": "https://files.pythonhosted.org/packages/b3/6c/7a4fd3a4337feba213440d118c4041e5eba005e2c851505aa667a2fea1bd/aws-cfn-ses-domain-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "02a9ed5813144d36c00b4cb12f474ab8", "sha256": "e026f4d6ec3bcebfbcc8bff05751b74f6beaf6d01f474b6aaf38e34c9882310f"}, "downloads": -1, "filename": "aws_cfn_ses_domain-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "02a9ed5813144d36c00b4cb12f474ab8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 14844, "upload_time": "2019-04-23T19:05:34", "upload_time_iso_8601": "2019-04-23T19:05:34.651903Z", "url": "https://files.pythonhosted.org/packages/3b/c6/b9221634b46ff0ea561e7f8d8f4fb7696d8f1eeca3dd6fc44c9e94adfc48/aws_cfn_ses_domain-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efeeeee03ee51cdd704e652d6ce548c1", "sha256": "6f9a3be70e5f8ef3563832be92f6aa50cf818018d6cea67276a791a0fb447b67"}, "downloads": -1, "filename": "aws-cfn-ses-domain-0.2.tar.gz", "has_sig": false, "md5_digest": "efeeeee03ee51cdd704e652d6ce548c1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 15609, "upload_time": "2019-04-23T19:05:35", "upload_time_iso_8601": "2019-04-23T19:05:35.986802Z", "url": "https://files.pythonhosted.org/packages/a9/16/4c36df831f43a435ecb8f9709ba32160d6a09c32f4ec2178f8b26b8f0955/aws-cfn-ses-domain-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "a67340bb8dffa93eaf8afecd3f9d0a45", "sha256": "218a036e3266bb2db55c3a2283152f79f08a7e3f387e9d6856d30ca751be8617"}, "downloads": -1, "filename": "aws_cfn_ses_domain-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a67340bb8dffa93eaf8afecd3f9d0a45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 18639, "upload_time": "2020-01-07T21:55:32", "upload_time_iso_8601": "2020-01-07T21:55:32.294802Z", "url": "https://files.pythonhosted.org/packages/02/43/069da4ec669a123c5432536e653f94a9f675c806bdeca802b1a78d77f330/aws_cfn_ses_domain-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b222c7e65bdaf98a393be18f80e707f", "sha256": "3ccaa507263644f908649e0683913a20dc8ae09027251e9c40c086785be36a3c"}, "downloads": -1, "filename": "aws-cfn-ses-domain-0.3.tar.gz", "has_sig": false, "md5_digest": "4b222c7e65bdaf98a393be18f80e707f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 21093, "upload_time": "2020-01-07T21:55:34", "upload_time_iso_8601": "2020-01-07T21:55:34.036095Z", "url": "https://files.pythonhosted.org/packages/27/e2/d247c58b9b1eff35c37f4680f81570bd1c450510baaf6637afc6518d11d4/aws-cfn-ses-domain-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a67340bb8dffa93eaf8afecd3f9d0a45", "sha256": "218a036e3266bb2db55c3a2283152f79f08a7e3f387e9d6856d30ca751be8617"}, "downloads": -1, "filename": "aws_cfn_ses_domain-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a67340bb8dffa93eaf8afecd3f9d0a45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 18639, "upload_time": "2020-01-07T21:55:32", "upload_time_iso_8601": "2020-01-07T21:55:32.294802Z", "url": "https://files.pythonhosted.org/packages/02/43/069da4ec669a123c5432536e653f94a9f675c806bdeca802b1a78d77f330/aws_cfn_ses_domain-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b222c7e65bdaf98a393be18f80e707f", "sha256": "3ccaa507263644f908649e0683913a20dc8ae09027251e9c40c086785be36a3c"}, "downloads": -1, "filename": "aws-cfn-ses-domain-0.3.tar.gz", "has_sig": false, "md5_digest": "4b222c7e65bdaf98a393be18f80e707f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 21093, "upload_time": "2020-01-07T21:55:34", "upload_time_iso_8601": "2020-01-07T21:55:34.036095Z", "url": "https://files.pythonhosted.org/packages/27/e2/d247c58b9b1eff35c37f4680f81570bd1c450510baaf6637afc6518d11d4/aws-cfn-ses-domain-0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:44 2020"}