{"info": {"author": "4teamwork AG", "author_email": "mailto:info@4teamwork.ch", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Plone :: 4.3", "Framework :: Plone :: 5.1", "Framework :: Plone :: 5.2", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7", "Topic :: Software Development"], "description": "Introduction\n============\n\nThis product aims to simplify running and writing third-party Generic Setup\nupgrade steps in Plone.\n\nIt provides a control panel for running multiple upgrades\nat once, based on the upgrade mechanism of Generic Setup (portal_setup).\n\nFurther a base class for writing upgrade steps with a variety of\nhelpers for common tasks is provided.\n\n.. contents:: Table of Contents\n\n.. figure:: http://onegov.ch/approved.png/image\n   :align: right\n   :target: http://onegov.ch/community/zertifizierte-module/ftw.upgrade\n\n   Certified: 01/2013\n\n\nFeatures\n========\n\n* **Managing upgrades**: Provides an advanced view for upgrading\n  third-party Plone packages using Generic Setup.\n  It enables upgrading multiple packages at once with an easy to use user\n  interface.\n  By resolving the dependency graph it is able to optimize the upgrade\n  step order so that the upgrade is hassle free.\n\n* **Writing upgrades**: The package provides a base upgrade class with\n  various helpers for common upgrade tasks.\n\n* **Upgrade directories with less ZCML**: By registering a directory\n  as upgrade-directory, no additional ZCML is needed for each upgrade step.\n  By using a timestamp as version number we have less (merge-) conflicts\n  and less error potential.\n\n* **Import profile upgrade steps**: Sometimes an upgrade step consists\n  solely of importing a purpose-made generic setup profile. A new\n  ``upgrade-step:importProfile`` ZCML directive makes this much simpler.\n\n\nInstallation\n============\n\n- Install ``ftw.upgrade`` by adding it to the list of eggs in your buildout.\n  Then run buildout and restart your instance:\n\n.. code:: ini\n\n    [instance]\n    eggs +=\n        ftw.upgrade\n\n\n- Go to Site Setup of your Plone site and activate the ``ftw.upgrade`` add-on.\n\n\n.. _`console script installation`:\n\nInstalling ftw.upgrade's console script\n---------------------------------------\n\nIf you include ``ftw.upgrade`` in the list of ``eggs`` of a\n``plone.recipe.zope2instance`` based section, the ``bin/upgrade`` script\nshould be generated automatically for you (that is, if you haven't limited or\nsuppressed script generation via the ``scripts`` option).\n\nOtherwise, installing the console script ``bin/upgrade`` can be done with an\nadditional buildout part:\n\n.. code:: ini\n\n    [buildout]\n    parts += upgrade\n\n    [upgrade]\n    recipe = zc.recipe.egg:scripts\n    eggs = ftw.upgrade\n\n\nCompatibility\n-------------\n\nCompatible with Plone 4.3.x and 5.1.x.\n\n\nManage upgrades\n===============\n\nThe ``@@manage-upgrades`` view allows to upgrade multiple packages at once:\n\n.. image:: https://github.com/4teamwork/ftw.upgrade/raw/master/docs/manage-upgrades.png\n\n\nFallback view\n-------------\n\nThe ``@@manage-upgrades-plain`` view acts as a fallback view for ``@@manage-upgrades``.\nIt does not include plone`s main template and thus might be able to render when the default\nview fails for some reason.\n\n\nThe bin/upgrade script\n======================\n\nRefer to the `console script installation`_ section for instructions on how\nto install ``bin/upgrade``.\n\nThe ``bin/upgrade`` console script enables management of upgrades on the filesystem\n(creating new upgrades, changing upgrade order) as well as interacting with an installed\nPlone site, listing profiles and upgrades and installing upgrades.\n\nSome examples:\n\n.. code:: sh\n\n    $ bin/upgrade create \"AddCatalogIndex\"\n    $ bin/upgrade touch my/package/upgrades/20110101000000_add_catalog_index\n    $ bin/upgrade sites\n    $ bin/upgrade list -s Plone --auth admin:admin --upgrades\n    $ bin/upgrade install -s Plone --auth admin:admin  --proposed\n\nThe full documentation of the ``bin/upgrade`` script is available using its help system:\n\n.. code:: sh\n\n    $ bin/upgrade help\n\n\n\nUpgrade step helpers\n====================\n\nThe ``UpgradeStep`` base class provides various tools and helpers useful\nwhen writing upgrade steps.\nIt can be used by registering the classmethod directly.\nBe aware that the class is very special: it acts like a function and calls\nitself automatically.\n\nExample upgrade step definition (defined in a ``upgrades.py``):\n\n.. code:: python\n\n    from ftw.upgrade import UpgradeStep\n\n    class UpdateFooIndex(UpgradeStep):\n       \"\"\"The index ``foo`` is a ``FieldIndex`` instead of a\n       ``KeywordIndex``. This upgrade step changes the index type\n       and reindexes the objects.\n       \"\"\"\n\n       def __call__(self):\n           index_name = 'foo'\n           if self.catalog_has_index(index_name):\n               self.catalog_remove_index(index_name)\n\n           self.catalog_add_index(index_name, 'KeywordIndex')\n           self.catalog_rebuild_index(index_name)\n\n\nRegistration in ``configure.zcml`` (assuming it's in the same directory):\n\n.. code:: xml\n\n    <configure\n        xmlns=\"http://namespaces.zope.org/zope\"\n        xmlns:genericsetup=\"http://namespaces.zope.org/genericsetup\"\n        i18n_domain=\"my.package\">\n\n        <genericsetup:upgradeStep\n            profile=\"my.package:default\"\n            source=\"4\"\n            destination=\"5\"\n            title=\"Update index 'foo'.\"\n            handler=\".upgrades.UpdateFooIndex\"\n            />\n\n    </configure>\n\n\nUpdating objects with progress logging\n--------------------------------------\n\nSince an upgrade step often updates a set of objects indexed in the catalog,\nthere is a useful helper method `self.objects()` which combines querying the\ncatalog with the `Progress Logger`_.\nThe catalog is queried unrestricted so that we handle all the objects.\n\nHere is an example for updating all objects of a particular type:\n\n.. code:: python\n\n    from ftw.upgrade import ProgressLogger\n    from ftw.upgrade import UpgradeStep\n\n    class ExcludeFilesFromNavigation(UpgradeStep):\n\n       def __call__(self):\n           for obj in self.objects({'portal_type': 'File'},\n                                   'Enable exclude from navigation for files'):\n               obj.setExcludeFromNav(True)\n\n\nWhen running the upgrade step you'll be shown a progress log::\n\n    INFO ftw.upgrade STARTING Enable exclude from navigation for files\n    INFO ftw.upgrade 1 of 10 (10%): Enable exclude from navigation for files\n    INFO ftw.upgrade 5 of 50 (50%): Enable exclude from navigation for files\n    INFO ftw.upgrade 10 of 10 (100%): Enable exclude from navigation for files\n    INFO ftw.upgrade DONE: Enable exclude from navigation for files\n\n\n\nMethods\n-------\n\nThe ``UpgradeStep`` class has various helper functions:\n\n\n``self.getToolByName(tool_name)``\n    Returns the tool with the name ``tool_name`` of the upgraded site.\n\n``self.objects(catalog_query, message, logger=None, savepoints=None)``\n    Queries the catalog (unrestricted) and an iterator with full objects.\n    The iterator configures and calls a ``ProgressLogger`` with the\n    passed ``message``.\n\n    If set to a non-zero value, the ``savepoints`` argument causes a transaction\n    savepoint to be created every n items. This can be used to keep memory usage\n    in check when creating large transactions.\n    The default value ``None`` indicates that we are not configuring this feature\n    and it should use the default configuration, which is usually ``1000``. See\n    the `Savepoints`_ section for more details.\n    In order to disable savepoints completely, you can use ``savepoints=False``.\n\n    This method will remove matching brains from the catalog when they are broken\n    because the object of the brain no longer exists.\n    The progress logger will not compensate for the skipped objects and terminate\n    before reaching 100%.\n\n``self.catalog_rebuild_index(name)``\n    Reindex the ``portal_catalog`` index identified by ``name``.\n\n``self.catalog_reindex_objects(query, idxs=None, savepoints=None)``\n    Reindex all objects found in the catalog with `query`.\n    A list of indexes can be passed as `idxs` for limiting the\n    indexed indexes.\n    The ``savepoints`` argument will be passed to ``self.objects()``.\n\n``self.catalog_has_index(name)``\n    Returns whether there is a catalog index ``name``.\n\n``self.catalog_add_index(name, type_, extra=None)``\n    Adds a new index to the ``portal_catalog`` tool.\n\n``self.catalog_remove_index(name)``\n    Removes an index from the ``portal_catalog`` tool.\n\n``self.actions_remove_action(category, action_id)``\n    Removes an action identified by ``action_id`` within the given\n    ``category`` from the ``portal_actions`` tool.\n\n``self.catalog_unrestricted_get_object(brain)``\n    Returns the unrestricted object of a brain.\n    Dead brains, for which there is no longer an object, are removed from\n    the catalog and ``None`` is returned.\n\n``self.catalog_unrestricted_search(query, full_objects=False)``\n    Searches the catalog without checking security.\n    When `full_objects` is `True`, unrestricted objects are\n    returned instead of brains.\n    Upgrade steps should generally use unrestricted catalog access\n    since all objects should be upgraded - even if the manager\n    running the upgrades has no access on the objects.\n\n    When using ``full_objects``, dead brains, for which there is no longer\n    an object, are removed from the catalog and skipped in the generator.\n    When dead brains are removed, the resulting sized generator's length\n    will not compensate for the skipped objects and therefore be too large.\n\n``self.actions_add_type_action(self, portal_type, after, action_id, **kwargs)``\n    Add a ``portal_types`` action from the type identified\n    by ``portal_type``, the position can be defined by the\n    ``after`` attribute. If the after action can not be found,\n    the action will be inserted at the end of the list.\n\n``self.actions_remove_type_action(portal_type, action_id)``\n    Removes a ``portal_types`` action from the type identified\n    by ``portal_type`` with the action id ``action_id``.\n\n``self.set_property(context, key, value, data_type='string')``\n    Safely set a property with the key ``key`` and the value ``value``\n    on the given ``context``.\n    The property is created with the type ``data_type`` if it does not exist.\n\n``self.add_lines_to_property(context, key, lines)``\n    Updates a property with key ``key`` on the object ``context``\n    adding ``lines``.\n    The property is expected to be of type \"lines\".\n    If the property does not exist it is created.\n\n``self.setup_install_profile(profileid, steps=None)``\n    Installs the generic setup profile identified by ``profileid``.\n    If a list step names is passed with ``steps`` (e.g. ['actions']),\n    only those steps are installed. All steps are installed by default.\n\n``self.ensure_profile_installed(profileid)``\n    Install a generic setup profile only when it is not yet installed.\n\n``self.install_upgrade_profile(steps=None)``\n    Installs the generic setup profile associated with this upgrade step.\n    The profile may be associated to upgrade steps by using either the\n    ``upgrade-step:importProfile`` or the ``upgrade-step:directory`` directive.\n\n``self.is_profile_installed(profileid)``\n    Checks whether a generic setup profile is installed.\n    Respects product uninstallation via quickinstaller.\n\n``self.is_product_installed(product_name)``\n    Check whether a product is installed.\n\n``self.uninstall_product(product_name)``\n    Uninstalls a product using the quick installer.\n\n``self.migrate_class(obj, new_class)``\n    Changes the class of an object. It has a special handling for BTreeFolder2Base\n    based containers.\n\n``self.remove_broken_browserlayer(name, dottedname)``\n    Removes a browser layer registration whose interface can't be imported any\n    more from the persistent registry.\n    Messages like these on instance boot time can be an indication of this\n    problem:\n    ``WARNING OFS.Uninstalled Could not import class 'IMyProductSpecific' from\n    module 'my.product.interfaces'``\n\n``self.update_security(obj, reindex_security=True)``\n    Update the security of a single object (checkboxes in manage_access).\n    This is usefuly in combination with the ``ProgressLogger``.\n    It is possible to skip reindexing the object security in the catalog\n    (``allowedRolesAndUsers``). This speeds up the update but should only be disabled\n    when there are no changes for the ``View`` permission.\n\n``self.update_workflow_security(workflow_names, reindex_security=True, savepoints=None)``\n    Update all objects which have one of a list of workflows.\n    This is useful when updating a bunch of workflows and you want to make sure\n    that the object security is updated properly.\n\n    The update done is kept as small as possible by only searching for\n    types which might have this workflow. It does support placeful workflow policies.\n\n    To further speed this up you can pass ``reindex_security=False``, but you need to make\n    sure you did not change any security relevant permissions (only ``View`` needs\n    ``reindex_security=True`` for default Plone).\n\n    By default, transaction savepoints are created every 1000th object. This prevents\n    exaggerated memory consumption when creating large transactions. If your server has\n    enough memory, you may turn savepoints off by passing ``savepoints=None``.\n\n``self.base_profile``\n    The attribute ``base_profile`` contains the profile name of the upgraded\n    profile including the ``profile-`` prefix.\n    Example: ``u\"profile-the.package:default\"``.\n    This information is only available when using the\n    ``upgrade-step:directory`` directive.\n\n``self.target_version``\n    The attribute ``target_version`` contains the target version of the upgrade\n    step as a bytestring.\n    Example with upgrade step directory: ``\"20110101000000\"``.\n    This information is only available when using the\n    ``upgrade-step:directory`` directive.\n\n\n\nProgress logger\n---------------\n\nWhen an upgrade step is taking a long time to complete (e.g. while performing a data migration), the\nadministrator needs to have information about the progress of the update. It is also important to have\ncontinuous output for avoiding proxy timeouts when accessing Zope through a webserver / proxy.\n\nThe ``ProgressLogger`` makes logging progress very easy:\n\n.. code:: python\n\n    from ftw.upgrade import ProgressLogger\n    from ftw.upgrade import UpgradeStep\n\n    class MyUpgrade(UpgradeStep):\n\n       def __call__(self):\n           objects = self.catalog_unrestricted_search(\n               {'portal_type': 'MyType'}, full_objects=True)\n\n           for obj in ProgressLogger('Migrate my type', objects):\n               self.upgrade_obj(obj)\n\n       def upgrade_obj(self, obj):\n           do_something_with(obj)\n\n\nThe logger will log the current progress every 5 seconds (default).\nExample log output::\n\n    INFO ftw.upgrade STARTING Migrate MyType\n    INFO ftw.upgrade 1 of 10 (10%): Migrate MyType\n    INFO ftw.upgrade 5 of 50 (50%): Migrate MyType\n    INFO ftw.upgrade 10 of 10 (100%): Migrate MyType\n    INFO ftw.upgrade DONE: Migrate MyType\n\n\nWorkflow Chain Updater\n----------------------\n\nWhen the workflow is changed for a content type, the workflow state is\nreset to the init state of new workflow for every existing object of this\ntype. This can be really annoying.\n\nThe `WorkflowChainUpdater` takes care of setting every object to the correct\nstate after changing the chain (the workflow for the type):\n\n.. code:: python\n\n    from ftw.upgrade.workflow import WorkflowChainUpdater\n    from ftw.upgrade import UpgradeStep\n\n    class UpdateWorkflowChains(UpgradeStep):\n\n        def __call__(self):\n            query = {'portal_type': ['Document', 'Folder']}\n            objects = self.catalog_unrestricted_search(\n                query, full_objects=True)\n\n            review_state_mapping={\n                ('intranet_workflow', 'plone_workflow'): {\n                    'external': 'published',\n                    'pending': 'pending'}}\n\n            with WorkflowChainUpdater(objects, review_state_mapping):\n                # assume that the profile 1002 does install a new workflow\n                # chain for Document and Folder.\n                self.setup_install_profile('profile-my.package.upgrades:1002')\n\n\nThe workflow chain updater migrates the workflow history by default.\nThe workflow history migration can be disabled by setting\n``migrate_workflow_history`` to ``False``:\n\n.. code:: python\n\n    with WorkflowChainUpdater(objects, review_state_mapping,\n                              migrate_workflow_history=False):\n        # code\n\n\nIf a transition mapping is provided, the actions in the workflow history\nentries are migrated according to the mapping so that the translations\nwork for the new workflow:\n\n.. code:: python\n\n    transition_mapping = {\n        ('intranet_workflow', 'new_workflow'): {\n            'submit': 'submit-for-approval'}}\n\n    with WorkflowChainUpdater(objects, review_state_mapping,\n                              transition_mapping=transition_mapping):\n        # code\n\n\n\nPlaceful Workflow Policy Activator\n----------------------------------\n\nWhen manually activating a placeful workflow policy all objects with a new\nworkflow might be reset to the initial state of the new workflow.\n\nftw.upgrade has a tool for enabling placeful workflow policies without\nbreaking the review state by mapping it from the old to the new workflows:\n\n.. code:: python\n\n    from ftw.upgrade.placefulworkflow import PlacefulWorkflowPolicyActivator\n    from ftw.upgrade import UpgradeStep\n\n    class ActivatePlacefulWorkflowPolicy(UpgradeStep):\n\n        def __call__(self):\n            portal_url = self.getToolByName('portal_url')\n            portal = portal_url.getPortalObject()\n\n            context = portal.unrestrictedTraverse('path/to/object')\n\n            activator = PlacefulWorkflowPolicyActivator(context)\n            activator.activate_policy(\n                'local_policy',\n                review_state_mapping={\n                    ('intranet_workflow', 'plone_workflow'): {\n                        'external': 'published',\n                        'pending': 'pending'}})\n\nThe above example activates a placeful workflow policy recursively on the\nobject under \"path/to/object\", enabling the placeful workflow policy\n\"local_policy\".\n\nThe mapping then maps the \"intranet_workflow\" to the \"plone_workflow\" by\ndefining which old states (key, intranet_workflow) should be changed to\nthe new states (value, plone_workflow).\n\n**Options**\n\n- `activate_in`: Activates the placeful workflow policy for the passed in\n  object (`True` by default).\n- `activate_below`: Activates the placeful workflow policy for the children\n  of the passed in object, recursively (`True` by default).\n- `update_security`: Update object security and reindex\n  allowedRolesAndUsers (`True` by default).\n\n\nInplace Migrator\n----------------\n\nThe inplace migrator provides a fast and easy way for migrating content in\nupgrade steps.\nIt can be used for example to migrate from Archetypes to Dexterity.\n\nThe difference between Plone's standard migration and the inplace migration\nis that the standard migration creates a new sibling and moves the children\nand the inplace migration simply replaces the objects within the tree and\nattaches the children to the new parent.\nThis is a much faster approach since no move / rename events are fired.\n\nExample usage:\n\n.. code:: python\n\n    from ftw.upgrade import UpgradeStep\n    from ftw.upgrade.migration import InplaceMigrator\n\n    class MigrateContentPages(UpgradeStep):\n\n        def __call__(self):\n            self.install_upgrade_profile()\n\n            migrator = InplaceMigrator(\n                new_portal_type='DXContentPage',\n                field_mapping={'text': 'content'},\n            )\n\n            for obj in self.objects({'portal_type': 'ATContentPage'},\n                                    'Migrate content pages to dexterity'):\n                migrator.migrate_object(obj)\n\n\n**Arguments:**\n\n- ``new_portal_type`` (required): The portal_type name of the destination type.\n- ``field_mapping``: A mapping of old fieldnames to new fieldnames.\n- ``options``: One or many options (binary flags).\n- ``ignore_fields``: A list of fields which should be ignored.\n- ``attributes_to_migrate``: A list of attributes (not fields!) which should be\n  copied from the old to the new object. This defaults to\n  ``DEFAULT_ATTRIBUTES_TO_COPY``.\n\n**Options:**\n\nThe options are binary flags: multiple options can be or-ed.\nExample:\n\n.. code:: python\n\n   from ftw.upgrade.migration import IGNORE_STANDARD_FIELD_MAPPING\n   from ftw.upgrade.migration import IGNORE_UNMAPPED_FIELDS\n   from ftw.upgrade.migration import InplaceMigrator\n\n    migrator = InplaceMigrator(\n        'DXContentPage',\n        options=IGNORE_UNMAPPED_FIELDS | IGNORE_STANDARD_FIELD_MAPPING,\n    })\n\n- ``DISABLE_FIELD_AUTOMAPPING``: by default, fields with the same name on the\n  old and the new implementation are automatically mapped. This flags disables\n  the automatic mapping.\n- ``IGNORE_UNMAPPED_FIELDS``: by default, a ``FieldsNotMappedError`` is raised\n  when unmapped fields are detected. This flags disables this behavior and\n  unmapped fields are simply ignored.\n- ``BACKUP_AND_IGNORE_UNMAPPED_FIELDS``: ignores unmapped fields but stores the\n  values of unmapped fields in the annotations of the new object (using the\n  key from the constant ``UNMAPPED_FIELDS_BACKUP_ANN_KEY``), so that the values\n  can be handled later. This is useful when having additional fields (schema\n  extender).\n- ``IGNORE_STANDARD_FIELD_MAPPING`` by default, the ``STANDARD_FIELD_MAPPING``\n  is merged into each field mapping, containing standard Plone field mappings\n  from Archetypes to Dexterity. This flag disables this behavior.\n- ``IGNORE_DEFAULT_IGNORE_FIELDS`` by default, the fields listed in\n  ``DEFAULT_IGNORED_FIELDS`` are skipped. This flag disables this behavior.\n- ``SKIP_MODIFIED_EVENT`` when `True`, no modified event is triggered.\n\n\nUpgrade directories\n===================\n\nThe ``upgrade-step:directory`` ZCML directive allows us to use a new upgrade step\ndefinition syntax with these **advantages**:\n\n- The directory is once registered (ZCML) and automatically scanned at Zope boot time.\n  This *reduces the ZCML* used for each upgrade step\n  and avoids the redundancy created by having to specify the profile version in multiple places.\n- Timestamps are used instead of version numbers.\n  Because of that we have *less merge-conflicts*.\n- The version in the profile's ``metadata.xml`` is removed and dynamically set\n  at Zope boot time to the version of the latest upgrade step.\n  We no longer have to maintain this version in upgrades.\n- Each upgrade is automatically a Generic Setup profile.\n  An instance of the ``UpgradeStep`` class knows which profile it belongs to,\n  and that profile can easily be imported with ``self.install_upgrade_profile()``.\n  ``self.install_upgrade_profile()``.\n- The ``manage-upgrades`` view shows us when we have accidentally merged upgrade steps\n  with older timestamps than already executed upgrade steps.\n  This helps us detect a long-term-branch merge problem.\n\nSetting up an upgrade directory\n-------------------------------\n\n- Register an upgrade directory for your profile (e.g. ``my/package/configure.zcml``):\n\n.. code:: xml\n\n    <configure\n        xmlns=\"http://namespaces.zope.org/zope\"\n        xmlns:upgrade-step=\"http://namespaces.zope.org/ftw.upgrade\"\n        i18n_domain=\"my.package\">\n\n        <include package=\"ftw.upgrade\" file=\"meta.zcml\" />\n\n        <upgrade-step:directory\n            profile=\"my.package:default\"\n            directory=\"./upgrades\"\n            />\n\n    </configure>\n\n- Create the configured upgrade step directory (e.g. ``my/package/upgrades``) and put an\n  empty ``__init__.py`` in this directory (prevents some python import warnings).\n\n- Remove the version from the ``metadata.xml`` of the profile for which this upgrade step\n  directory is configured (e.g. ``my/package/profiles/default/metadata.xml``):\n\n.. code:: xml\n\n    <?xml version=\"1.0\"?>\n    <metadata>\n        <dependencies>\n            <dependency>profile-other.package:default</dependency>\n        </dependencies>\n    </metadata>\n\n\nDeclare upgrades soft dependencies\n----------------------------------\n\nWhen having optional dependencies (``extras_require``), we sometimes need to tell\n``ftw.upgrade`` that our optional dependency's upgrades needs to be installed\nbefore our upgrades are installed.\n\nWe do that by declare a soft dependency in the ``upgrade-step:directory``\ndirective.\nIt is possible to declare multiple dependencies by separating them\nwith whitespace.\n\n.. code:: xml\n\n    <configure\n        xmlns=\"http://namespaces.zope.org/zope\"\n        xmlns:upgrade-step=\"http://namespaces.zope.org/ftw.upgrade\"\n        i18n_domain=\"my.package\">\n\n        <include package=\"ftw.upgrade\" file=\"meta.zcml\" />\n\n        <upgrade-step:directory\n            profile=\"my.package:default\"\n            directory=\"./upgrades\"\n            soft_dependencies=\"other.package:default\n                               collective.fancy:default\"\n            />\n\n    </configure>\n\n\nCreating an upgrade step\n------------------------\n\nUpgrade steps can be generated with ``ftw.upgrade``'s ``bin/upgrade`` console script.\nThe idea is to install this script with buildout using\n`zc.recipe.egg <https://pypi.org/project/zc.recipe.egg/>`_.\n\nOnce installed, upgrade steps can simply be scaffolded with the script:\n\n.. code::\n\n    $ bin/upgrade create AddControlpanelAction\n\nThe ``create`` command searches for your ``upgrades`` directory by resolving the\n``*.egg-info/top_level.txt`` file. If you have no egg-infos or your upgrades directory is\nnamed differently the automatic discovery does not work and you can provide the\npath to the upgrades directory using the ``--path`` argument.\n\n.. sidebar:: Global create-upgrade script\n\n    The\n    `create-upgrade <https://github.com/4teamwork/ftw.upgrade/blob/master/scripts/create-upgrade>`_\n    script helps you create upgrade steps in any directory (also when not named ``upgrades``).\n    Download it and place it somewhere in your ``PATH``, cd into the directory and create an upgrade\n    step: ``create-upgrade add_control_panel_action``.\n\nIf you would like to have colorized output in the terminal, you can install\nthe ``colors`` extras (``ftw.upgrade[colors]``).\n\n\nReordering upgrade steps\n------------------------\n\nThe ``bin/upgrade`` console script provides a ``touch`` for reordering generated upgrade steps.\nWith the optional arguments ``--before`` and ``--after`` upgrade steps can be moved to a specific\nposition.\nWhen the optional arguments are omitted, the upgrade step timestamp is set to the current time.\n\nExamples:\n\n.. code::\n\n    $ bin/upgrade touch upgrades/20141218093045_add_controlpanel_action\n    $ bin/upgrade touch 20141218093045_add_controlpanel_action --before 20141220181500_update_registry\n    $ bin/upgrade touch 20141218093045_add_controlpanel_action --after 20141220181500_update_registry\n\n\n\nCreating an upgrade step manually\n---------------------------------\n\n- Create a directory for the upgrade step in the upgrades directory.\n  The directory name must contain a timestamp and a description, concatenated by an underscore,\n  e.g. ``YYYYMMDDHHMMII_description_of_what_is_done``:\n\n.. code::\n\n    $ mkdir my/package/upgrades/20141218093045_add_controlpanel_action\n\n- Next, create the upgrade step code in an ``upgrade.py`` in the above directory.\n  This file needs to be created, otherwise the upgrade step is not registered.\n\n.. code:: python\n\n    # my/package/upgrades/20141218093045_add_controlpanel_action/upgrade.py\n\n    from ftw.upgrade import UpgradeStep\n\n    class AddControlPanelAction(UpgradeStep):\n        \"\"\"Adds a new control panel action for the package.\n        \"\"\"\n        def __call__(self):\n            # maybe do something\n            self.install_upgrade_profile()\n            # maybe do something\n\n..\n\n  - You must inherit from ``UpgradeStep``.\n  - Give your class a proper name, although it does not show up anywhere.\n  - Add a descriptive docstring to the class, the first consecutive lines are\n    used as upgrade step description.\n  - Do not forget to execute ``self.install_upgrade_profile()`` if you have Generic Setup based\n    changes in your upgrade.\n\n- Put Generic Setup files in the same upgrade step directory, it automatically acts as a\n  Generic Setup profile just for this upgrade step.\n  The ``install_upgrade_profile`` knows what to import.\n\n  For our example this means we put a file at\n  ``my/package/upgrades/20141218093045_add_controlpanel_action/controlpanel.xml``\n  which adds the new control panel action.\n\nThe resulting directory structure should be something like this:\n\n.. code::\n\n    my/\n      package/\n        configure.zcml                              # registers the profile and the upgrade directory\n        upgrades/                                   # contains the upgrade steps\n          __init__.py                               # prevents python import warnings\n          20141218093045_add_controlpanel_action/   # our first upgrade step\n            upgrade.py                              # should contain an ``UpgradeStep`` subclass\n            controlpanel.xml                        # Generic Setup data to import\n          20141220181500_update_registry/           # another upgrade step\n            upgrade.py\n            *.xml\n        profiles/\n          default/                                  # the default Generic Setup profile\n            metadata.xml\n\n\n\nDeferrable upgrades\n-------------------\n\nDeferrable upgrades are a special type of upgrade that can be omitted on\ndemand. They still will be proposed and installed by default but can be\nexcluded from installation by setting a flag.\nDeferrable upgrades can be used to decouple upgrades that need not be run right\nnow, but only eventually, from the critical upgrade path. This can be\nparticularly useful for long running data migrations or for fix-scripts.\n\nUpgrade-steps can be marked as deferrable by setting a class attribute\n``deferrable`` on a subclass of ``UpgradeStep``:\n\n.. code:: python\n\n    # my/package/upgrades/20180709135657_long_running_upgrade/upgrade.py\n\n    from ftw.upgrade import UpgradeStep\n\n    class LongRunningUpgrade(UpgradeStep):\n        \"\"\"Potentially long running upgrade which is deferrable.\n        \"\"\"\n        deferrable = True\n\n        def __call__(self):\n            pass\n\n\nWhen you install upgrades from the command line, you can skip the installation\nof deferred upgrade steps with:\n\n.. code:: sh\n\n    $ bin/upgrade install -s plone --proposed --skip-deferrable\n\n\nWhen you install upgrades with the ``@@manage-upgrades`` view, deferrable\nupgrade steps show an additional icon and can be deselected manually.\n\n\nJSON API\n========\n\nThe JSON API allows to get profiles and upgrades for a Plone site and execute upgrades.\n\n\nAuthentication and authorization\n--------------------------------\n\nThe API is available for users with the \"cmf.ManagePortal\" permission, usually the \"Manager\"\nrole is required.\n\n\nVersioning\n----------\n\nA specific API version can be requested by adding the version to the URL. Example:\n\n.. code:: sh\n\n    $ curl -uadmin:admin http://localhost:8080/upgrades-api/v1/list_plone_sites\n\n\nAPI Discovery\n-------------\n\nThe API is discoverable and self descriptive.\nThe API description is returned when the API action is omitted:\n\n\n.. code:: sh\n\n    $ curl -uadmin:admin http://localhost:8080/upgrades-api/\n    {\n        \"api_version\": \"v1\",\n        \"actions\": [\n            {\n                \"request_method\": \"GET\",\n                \"required_params\": [],\n                \"name\": \"current_user\",\n                \"description\": \"Return the current user when authenticated properly. This can be used for testing authentication.\"\n            },\n            {\n                \"request_method\": \"GET\",\n                \"required_params\": [],\n                \"name\": \"list_plone_sites\",\n                \"description\": \"Returns a list of Plone sites.\"\n            }\n        ]\n    }\n\n    $ curl -uadmin:admin http://localhost:8080/Plone/upgrades-api/\n    ...\n\n\n\n\nListing Plone sites:\n--------------------\n\n.. code:: sh\n\n    $ curl -uadmin:admin http://localhost:8080/upgrades-api/list_plone_sites\n    [\n        {\n            \"path\": \"/Plone\",\n            \"id\": \"Plone\",\n            \"title\": \"Website\"\n        }\n    ]\n\n\nListing profiles and upgrades\n-----------------------------\n\nList all profiles\n~~~~~~~~~~~~~~~~~\n\nListing all installed Generic Setup profiles with upgrades for a Plone site:\n\n.. code:: sh\n\n    $ curl -uadmin:admin http://localhost:8080/Plone/upgrades-api/list_profiles\n    [\n        {\n            \"id\": \"Products.CMFEditions:CMFEditions\",\n            \"db_version\": \"4\",\n            \"product\": \"Products.CMFEditions\",\n            \"title\": \"CMFEditions\",\n            \"outdated_fs_version\": false,\n            \"fs_version\": \"4\",\n            \"upgrades\": [\n                {\n                    \"proposed\": false,\n                    \"title\": \"Fix portal_historyidhandler\",\n                    \"outdated_fs_version\": false,\n                    \"orphan\": false,\n                    \"deferred\": false,\n                    \"dest\": \"3\",\n                    \"done\": true,\n                    \"source\": \"2.0\",\n                    \"id\": \"3@Products.CMFEditions:CMFEditions\"\n                },\n\n    ...\n\nGet a profile\n~~~~~~~~~~~~~\n\nListing a single profile and its upgrades:\n\n.. code:: sh\n\n    $ curl -uadmin:admin \"http://localhost:8080/Plone/upgrades-api/get_profile?profileid=Products.TinyMCE:TinyMCE\"\n    {\n        \"id\": \"Products.TinyMCE:TinyMCE\",\n        \"db_version\": \"7\",\n        \"product\": \"Products.TinyMCE\",\n        \"title\": \"TinyMCE Editor Support\",\n        \"outdated_fs_version\": false,\n        \"fs_version\": \"7\",\n        \"upgrades\": [\n            {\n                \"proposed\": false,\n                \"title\": \"Upgrade TinyMCE\",\n                \"outdated_fs_version\": false,\n                \"orphan\": false,\n                \"deferred\": false,\n                \"dest\": \"1.1\",\n                \"done\": true,\n                \"source\": \"1.0\",\n                \"id\": \"1.1@Products.TinyMCE:TinyMCE\"\n            },\n    ...\n\n\nList proposed profiles\n~~~~~~~~~~~~~~~~~~~~~~\n\nListing all profiles proposing upgrades, each profile only including upgrades which\nare propsosed:\n\n.. code:: sh\n\n    $ curl -uadmin:admin http://localhost:8080/Plone/upgrades-api/list_profiles_proposing_upgrades\n    ...\n\n\nList proposed upgrades\n~~~~~~~~~~~~~~~~~~~~~~\n\nListing all proposed upgrades without the wrapping profile infos:\n\n.. code:: sh\n\n    $ curl -uadmin:admin http://localhost:8080/Plone/upgrades-api/list_proposed_upgrades\n    [\n        {\n            \"proposed\": true,\n            \"title\": \"Foo.\",\n            \"outdated_fs_version\": false,\n            \"orphan\": true,\n            \"deferred\": false,\n            \"dest\": \"20150114104527\",\n            \"done\": false,\n            \"source\": \"10000000000000\",\n            \"id\": \"20150114104527@ftw.upgrade:default\"\n        }\n    ]\n\n\nExecuting upgrades\n------------------\n\nWhen executing upgrades the response is not of type JSON but a streamed upgrade log.\nIf the request is correct, the response status will always be 200 OK, no matter whether\nthe upgrades will install correctly or not.\nIf an upgrade fails, the request and the transaction is aborted and the response content\nwill end with \"Result: FAILURE\\n\".\nIf the upgrade succeeds, the response content will end with \"Result: SUCCESS\\n\".\n\n\nExecuting selected upgrades\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSelected upgrades can be executed by their API-ID (format: \"<dest>@<profileid>\").\nWhen upgrade groups are used the API-ID is kind of ambiguous and identifies / installs all\nupgrade steps of the same profile with the same target version.\n\nAll upgrade steps are reordered to the installation order proposed by ftw.upgrade.\nIt is not possible to change the order within one request, use multiple requests for\nunproposed installation order.\nThe installation order is done by topogically ordering the profiles by their dependencies\nand ordering the upgrades within each profile by their target version.\n\nExample for executing a selected set of upgrades:\n\n.. code:: sh\n\n    $ curl -uadmin:admin -X POST \"http://localhost:8080/Plone/upgrades-api/execute_upgrades?upgrades:list=7@Products.TinyMCE:TinyMCE&upgrades:list=20150114104527@ftw.upgrade:default\"\n    2015-01-14 11:16:14 INFO ftw.upgrade ______________________________________________________________________\n    2015-01-14 11:16:14 INFO ftw.upgrade UPGRADE STEP Products.TinyMCE:TinyMCE: Upgrade TinyMCE 1.3.4 to 1.3.5\n    2015-01-14 11:16:14 INFO ftw.upgrade Ran upgrade step Upgrade TinyMCE 1.3.4 to 1.3.5 for profile Products.TinyMCE:TinyMCE\n    2015-01-14 11:16:14 INFO ftw.upgrade Upgrade step duration: 1 second\n    2015-01-14 11:16:14 INFO ftw.upgrade ______________________________________________________________________\n    2015-01-14 11:16:14 INFO ftw.upgrade UPGRADE STEP ftw.upgrade:default: Foo.\n    2015-01-14 11:16:14 INFO GenericSetup.rolemap Role / permission map imported.\n    2015-01-14 11:16:14 INFO GenericSetup.archetypetool Archetype tool imported.\n    2015-01-14 11:16:14 INFO ftw.upgrade Ran upgrade step Foo. for profile ftw.upgrade:default\n    2015-01-14 11:16:14 INFO ftw.upgrade Upgrade step duration: 1 second\n    Result: SUCCESS\n\n\nExecute all proposed upgrades\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nExample for executing all proposed upgrades of a Plone site:\n\n.. code:: sh\n\n    $ curl -uadmin:admin -X POST http://localhost:8080/Plone/upgrades-api/execute_proposed_upgrades\n    2015-01-14 11:17:34 INFO ftw.upgrade ______________________________________________________________________\n    2015-01-14 11:17:34 INFO ftw.upgrade UPGRADE STEP ftw.upgrade:default: Bar.\n    2015-01-14 11:17:35 INFO GenericSetup.rolemap Role / permission map imported.\n    2015-01-14 11:17:35 INFO GenericSetup.archetypetool Archetype tool imported.\n    2015-01-14 11:17:35 INFO ftw.upgrade Ran upgrade step Bar. for profile ftw.upgrade:default\n    2015-01-14 11:17:35 INFO ftw.upgrade Upgrade step duration: 1 second\n    Result: SUCCESS\n\n\nInstalling profiles\n~~~~~~~~~~~~~~~~~~~\n\nYou can install complete profiles.  When the profile is already\ninstalled, nothing is done.  Usually you will want to install the\ndefault profile, but it is fine to install an uninstall profile.\n\nNote that we do nothing with the ``portal_quickinstaller``.  So if you\ninstall an uninstall profile, you may still see the product as\ninstalled.  But for default profiles everything works as you would\nexpect.\n\nExample for installing PloneFormGen (which was not installed yet) and\nftw.upgrade (which was already installed):\n\n.. code:: sh\n\n    $ curl -uadmin:admin -X POST \"http://localhost:8080/Plone/upgrades-api/execute_profiles?profiles:list=Products.PloneFormGen:default&profiles:list=ftw.upgrade:default\"\n    2016-01-05 13:09:46 INFO ftw.upgrade Installing profile Products.PloneFormGen:default.\n    2016-01-05 13:09:46 INFO GenericSetup.rolemap Role / permission map imported.\n    ...\n    2016-01-05 13:09:48 INFO GenericSetup.types 'FieldsetEnd' type info imported.\n    2016-01-05 13:09:48 INFO GenericSetup.factorytool FactoryTool settings imported.\n    2016-01-05 13:09:48 INFO ftw.upgrade Done installing profile Products.PloneFormGen:default.\n    2016-01-05 13:09:48 INFO ftw.upgrade Ignoring already installed profile ftw.upgrade:default.\n    Result: SUCCESS\n\nBy default, already installed profiles are skipped.\nWhen supplying the ``force_reinstall=True`` request parameter,\nalready installed profiles will be reinstalled.\n\n\nUpgrading Plone\n~~~~~~~~~~~~~~~\n\nYou can migrate your Plone Site.  This is what you would manually do\nin the @@plone-upgrade view, which is linked to in the overview\ncontrol panel (or the ZMI) when your Plone Site needs updating.\n\nExample for upgrading Plone:\n\n.. code:: sh\n\n    $ curl -uadmin:admin -X POST \"http://localhost:8080/test/upgrades-api/plone_upgrade\"\n    \"Plone Site has been updated.\"\n\nExample for upgrading Plone when no upgrade is needed:\n\n.. code:: sh\n\n    $ curl -uadmin:admin -X POST \"http://localhost:8080/test/upgrades-api/plone_upgrade\"\n    \"Plone Site was already up to date.\"\n\nFor checking whether a Plone upgrade is needed, you can do:\n\n.. code:: sh\n\n    $ curl -uadmin:admin -X POST \"http://localhost:8080/test/upgrades-api/plone_upgrade_needed\"\n\n\nRecook resources\n----------------\n\nCSS and JavaScript resource bundles can be recooked:\n\n.. code:: sh\n\n    $ curl -uadmin:admin -X POST http://localhost:8080/Plone/upgrades-api/recook_resources\n    \"OK\"\n\n\nCombine bundles\n---------------\n\nCSS and JavaScript bundles can be combined:\n\n.. code:: sh\n\n    $ curl -uadmin:admin -X POST http://localhost:8080/Plone/upgrades-api/combine_bundles\n    \"OK\"\n\nThis is for Plone 5 or higher.\nThis runs the same code that runs when you import a profile that makes changes in the resource registries.\n\n\nImport-Profile Upgrade Steps\n============================\n\nSometimes an upgrade step consists solely of importing a purpose-made generic setup\nprofile. Creating such upgrade steps are often much simpler than doing\nthe change in python, because we can simply copy the necessary parts of the new\ndefault generic setup profile into the upgrade step profile.\n\nNormally to do this, we would have to register an upgrade step and a Generic Setup\nprofile and write an upgrade step handler importing the profile.\n\nftw.upgrade makes this much simpler by providing an ``importProfile`` ZCML directive\nspecifically for this use case.\n\nExample ``configure.zcml`` meant to be placed in your ``upgrades`` sub-package:\n\n.. code:: xml\n\n    <configure\n        xmlns=\"http://namespaces.zope.org/zope\"\n        xmlns:upgrade-step=\"http://namespaces.zope.org/ftw.upgrade\"\n        i18n_domain=\"my.package\">\n\n        <include package=\"ftw.upgrade\" file=\"meta.zcml\" />\n\n        <upgrade-step:importProfile\n            title=\"Update email_from_address\"\n            profile=\"my.package:default\"\n            source=\"1007\"\n            destination=\"1008\"\n            directory=\"profiles/1008\"\n            />\n\n    </configure>\n\nThis example upgrade step updates the ``email_from_address`` property.\n\nA generic setup profile is automatically registered and hooked up with the\ngenerated upgrade step handler.\n\nSimply put a ``properties.xml`` in the folder ``profiles/1008`` relative to the\nabove ``configure.zcml`` and the upgrade step is ready for deployment.\n\nOptionally, a ``handler`` may be defined.\nThe handler, a subclass of ``UpgradeStep``, can import the associated generic\nsetup profile with ``self.install_upgrade_profile()``.\n\n\n\nIPostUpgrade adapter\n====================\n\nBy registering an ``IPostUpgrade`` adapter it is possible to run custom code\nafter running upgrades.\nAll adapters are executed after each time upgrades were run, regardless of\nwhich upgrades are run.\nThe name of the adapters should be the profile of the package, so that\n``ftw.upgrade`` is able to execute the adapters in order of the GS dependencies.\n\nExample adapter:\n\n.. code:: python\n\n    from ftw.upgrade.interfaces import IPostUpgrade\n    from zope.interface import implements\n\n    class MyPostUpgradeAdapter(object):\n        implements(IPostUpgrade)\n\n        def __init__(self, portal, request):\n            self.portal = portal\n            self.request = request\n\n        def __call__(self):\n            # custom code, e.g. import a generic setup profile for customizations\n\nRegistration in ZCML:\n\n.. code:: xml\n\n    <configure xmlns=\"http://namespaces.zope.org/zope\">\n        <adapter\n            factory=\".adapters.MyPostUpgradeAdapter\"\n            provides=\"ftw.upgrade.interfaces.IPostUpgrade\"\n            for=\"Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot\n                 zope.interface.Interface\"\n            name=\"my.package:default\" />\n    </configure>\n\n\nSavepoints\n==========\n\nCertain iterators of ``ftw.upgrade`` are wrapped with a ``SavepointIterator``,\ncreating savepoints after each batch of items.\nThis allows us to keep the memory footprint low.\n\nThe threshold for the savepoint iterator can be passed to certain methods, such as\n``self.objects`` in an upgrade, or it can be configured globally with an environment variable:\n\n.. code::\n\n  UPGRADE_SAVEPOINT_THRESHOLD = 1000\n\nThe default savepoint threshold is 1000.\n\nMemory optimization while running upgrades\n==========================================\n\nZope is optimized for executing many smaller requests.\nThe ZODB pickle cache keeps objects in the memory, so that they can be used for the next\nrequest.\n\nRunning a large upgrade is a long-running request though, increasing the chance of a\nmemory problem.\n\n``ftw.upgrade`` tries to optimize the memory usage by creating savepoints and triggering\nthe pickle cache garbage collector.\n\nIn order for this to work properly you should configure your ZODB cache sizes correctly\n(`zodb-cache-size-bytes` or `zodb-cache-size`).\n\n\nPrevent ftw.upgrade from marking upgrades as installed\n======================================================\n\n``ftw.upgrade`` automatically marks all upgrade steps of a profile as installed when\nthe full profile is imported. This is important for the initial installation.\n\nIn certain situations you may want to import the profile but not mark the upgrade steps\nas installed. For example this could be done in a big migration project where the default\nmigration path cannot be followed.\n\nYou can do that like this for all generic setup profiles:\n\n.. code:: python\n\n    from ftw.upgrade.directory.subscribers import no_upgrade_step_marking\n\n    with no_upgrade_step_marking():\n        # install profile with portal_setup\n\nor for certain generic setup profiles:\n\n.. code:: python\n\n    from ftw.upgrade.directory.subscribers import no_upgrade_step_marking\n\n    with no_upgrade_step_marking('my.package:default'):\n        # install profile with portal_setup\n\n\n\nLinks\n=====\n\n- Github: https://github.com/4teamwork/ftw.upgrade\n- Issues: https://github.com/4teamwork/ftw.upgrade/issues\n- Pypi: https://pypi.org/project/ftw.upgrade/\n- Continuous integration: https://jenkins.4teamwork.ch/search?q=ftw.upgrade\n\n\nCopyright\n=========\n\nThis package is copyright by `4teamwork <http://www.4teamwork.ch/>`_.\n\n``ftw.upgrade`` is licensed under GNU General Public License, version 2.\n\nChangelog\n=========\n\n\n3.0.0 (2020-03-23)\n------------------\n\n- Add support for Plone 5.2 and Python 3. [buchi]\n- Also look for the instance port number in ``wsgi.ini``.  [maurits]\n\n\n2.16.0 (2020-02-14)\n-------------------\n\n- Allow additional indexes to be reindexed in the WorkflowChainUpdater. [tinagerber]\n\n\n2.15.2 (2020-01-27)\n-------------------\n\n- Fix missing values in IntIds catalog as we go within migrate_intid(). [djowett-ftw]\n\n\n2.15.1 (2019-12-16)\n-------------------\n\n- Cleanup broken catalog brains on `NotFound`. [jone]\n\n\n2.15.0 (2019-12-12)\n-------------------\n\n- Add context manager for disabling upgrade step marking. [jone]\n\n- Do not mark upgrade steps as installed when not doing a full import. [jone]\n\n\n2.14.1 (2019-11-08)\n-------------------\n\n- Migrate creators even when dublin core behaviors are not enabled. [jone]\n\n- Migrate empty values in RichTextFields correctly.\n  Fixes `https://github.com/4teamwork/izug.refegovservice/issues/2`. [djowett-ftw]\n\n\n2.14.0 (2019-10-31)\n-------------------\n\n- Added ``--allow-outdated`` option to ``install`` command.\n  This allows installing upgrades or profiles on a not up-to-date site.\n  Fixes `issue 182 <https://github.com/4teamwork/ftw.upgrade/issues/182>`. [maurits]\n\n\n2.13.0 (2019-08-22)\n-------------------\n\n- Added combine_bundles command for Plone 5.\n  This combines JS/CSS bundles together.  [maurits]\n\n\n2.12.2 (2019-06-19)\n-------------------\n\n- Make sure to always use a portal_migration tool wrapped in a RequestContainer.\n  (Fixes \"AttributeError: REQUEST\" on a Plone 5.1.x upgrade) [lgraf]\n\n\n2.12.1 (2019-06-18)\n-------------------\n\n- Choose actual port used by ZServer layer to run CommandAndInstance tests against. [lgraf]\n- Disable Diazo on upgrades-plain for Plone 5.1.5 support. [jone]\n\n\n2.12.0 (2018-07-26)\n-------------------\n\n- Allow marking upgrades as deferred so they won't be proposed by default. [deiferni]\n\n\n2.11.1 (2018-04-05)\n-------------------\n\n- Fix connection problem when zope.conf contains ip-address. [jone]\n- Make sure remove_broken_browserlayer() helper doesn't fail if the browser\n  layer registration to be removed doesn't exist (any more). [lgraf]\n\n\n2.11.0 (2018-01-31)\n-------------------\n\n- Provide upgrade step handler interfaces and handler class in wrapper. [jone]\n- Do not propose executed upgrades newer than current db version. [jone]\n\n\n2.10.0 (2018-01-08)\n-------------------\n\n- Support installing proposed upgrades of specific Generic Setup profiles.\n  Use ``bin/upgrade install --proposed the.package:default``. [jone]\n\n\n2.9.0 (2017-12-14)\n------------------\n\n- Optimize memory footprint after every upgrade step. [jone]\n- Reduce memory footprint in SavepointIterator by garbage-collecting connection cache. [jone]\n- Set the default savepoint threshold to 1000; make it configurable. [jone]\n- Enable savepoint iterator by default. Affects ``self.objects``. [jone]\n- Use a SavepointIterator in the WorkflowSecurityUpdater in order not to exceed\n  memory. [mbaechtold]\n\n\n2.8.1 (2017-10-13)\n------------------\n\n- Also catch AttributeErrors when accessing objects of broken brains. [buchi]\n\n\n2.8.0 (2017-07-27)\n------------------\n\n- The upgrade step methods will remove and skip broken catalog brains. [jone]\n\n\n2.7.2 (2017-07-13)\n------------------\n\n- Fix encoding issues in ASCII terminals. [jone]\n\n\n2.7.1 (2017-06-28)\n------------------\n\n- Fix tempfile authentication when created by different user. [jone]\n\n\n2.7.0 (2017-06-28)\n------------------\n\n- Support using ``bin/upgrade`` by another user than the Zope server\n  with less strict security checks.[jone]\n\n\n2.6.1 (2017-06-28)\n------------------\n\n- Fix a bug which caused ``bin/upgrade`` to fail when the ``var`` directory\n  had the setguid flag active. [jone]\n\n\n2.6.0 (2017-06-08)\n------------------\n\n- Log (re/un)-indexing progress if collective.indexing is installed. [deiferni]\n\n\n2.5.0 (2017-06-07)\n------------------\n\n- Add support for Plone 5.1. [jone]\n\n\n2.4.0 (2017-06-07)\n------------------\n\n- Escape < and > in browser logger. [lknoepfel]\n\n- Log current item in ProcessLogger if logger exits unexpectedly. [lknoepfel]\n\n\n2.3.1 (2017-02-15)\n------------------\n\n- Fix bug causing that versions are not properly set after upgrading\n  when switching versioning system. [jone]\n\n- Avoid overriding customizations by reinstalling already installed\n  profiles while upgrading (Plone>=4.3.8). [jone]\n\n\n2.3.0 (2017-02-14)\n------------------\n\n- InplaceMigrator: Preserve object position in parent. [lknoepfel]\n\n- Do not downgrade installed version when installing an orphan upgrade step. [jone]\n\n- Add \"soft_dependencies\" option to \"upgrade-step:directory\" directive. [jone]\n\n\n2.2.0 (2017-01-30)\n------------------\n\n- Add method to remove a previously uninstalled portlet manager from the\n  persistent registry.\n  [deiferni]\n\n\n2.1.1 (2016-12-13)\n------------------\n\n- Fix support for GS import by tarball upload. [jone]\n\n\n2.1.0 (2016-12-06)\n------------------\n\n- Add upgrade step method ``ensure_profile_installed(profileid)``. [jone]\n\n- Add upgrade step method ``is_profile_installed(profileid)``. [jone]\n\n- Add upgrade step method ``is_product_installed(product_name)``. [jone]\n\n\n2.0.5 (2016-10-24)\n------------------\n\n- Migration: fix error when file obj is an empty string. [jone]\n\n\n2.0.4 (2016-10-24)\n------------------\n\n- Migration: do not migrate empty blobs. [jone]\n\n\n2.0.3 (2016-09-27)\n------------------\n\n- Migration: support all types of standard relation fields. [jone]\n\n\n2.0.2 (2016-09-27)\n------------------\n\n- Migration: skip invalid relations. [jone]\n\n\n2.0.1 (2016-09-02)\n------------------\n\n- Added support for jQuery 1.9+ on @@manage-upgrades control panel. [neilferreira]\n\n\n2.0.0 (2016-08-18)\n------------------\n\n- Fix NoneType AttributeError with newest requests module. [jone]\n\n- Drop Plone 4.1 and 4.2 support. [jone]\n\n- Implement inplace migrator. [jone]\n\n\n1.19.0 (2016-04-11)\n-------------------\n\n- Add option to force reinstall already installed profiles. [jone]\n\n\n1.18.1 (2016-03-09)\n-------------------\n\n- Disable automatic CSRF protection for authorized jsonapi requests. [jone]\n\n\n1.18.0 (2016-02-16)\n-------------------\n\n- Provide the attributes ``base_profile`` and ``target_version`` on\n  upgrade steps when using the ``upgrade-step:directory`` directive. [jone]\n\n- Fix profile version when using `upgrade-step:directory` and\n  having old upgrade steps but no new ones. [jone]\n\n\n1.17.0 (2016-01-22)\n-------------------\n\n- Add ``bin/upgrade plone_upgrade_needed`` command.  [jone]\n\n\n1.16.3 (2016-01-22)\n-------------------\n\n- Fix upgrade scaffolding when having dots or other\n  non-alphanumeric characters. [jone]\n\n\n1.16.2 (2016-01-15)\n-------------------\n\n- Actually the same as 1.16.1, but pypi was broken when I\n  released it and now it does not let me use the same version\n  number. :-(\n  [jone]\n\n\n1.16.1 (2016-01-13)\n-------------------\n\n- Added documentation for the additions of the previous release.  [maurits]\n\n\n1.16.0 (2016-01-05)\n-------------------\n\n- Added ``--all-sites`` option.  This iterates over all sites and\n  performs the specified command on each of them.  A failing command\n  for one site will stop the entire command.  [maurits]\n\n- Configure logging for the command line utility.  By default print\n  only our own logging, on info level or higher.  With the new\n  ``--verbose`` option print all loggers (so also from other packages\n  like ``requests``) at debug level and higher.  [maurits]\n\n- Added ``plone_upgrade`` command to upgrade a Plone Site.  This is\n  what you would manually do in the ``@@plone-upgrade`` view.  [maurits]\n\n- Added support for installing profiles.  Profiles are only applied\n  once.  Example command line: ``bin/upgrade install --site Plone\n  --profiles Products.PloneFormGen:default``.  [maurits]\n\n- Prevented UnicodeEncodeError when piping output of ``bin/upgrade\n  sites``.  This would fail when a site had non-ascii characters in\n  its title.  [maurits]\n\n\n1.15.1 (2015-11-11)\n-------------------\n\n- Change instance detection to support any name.\n  Before only \"instance*\" was supported.\n  [jone]\n\n\n1.15.0 (2015-10-30)\n-------------------\n\n- Make \"blessed\" dependency optional in the \"colors\" extras.\n  [jone]\n\n- Update references to class-migrated objects in the intid utility.\n  [deiferni]\n\n\n1.14.8 (2015-09-21)\n-------------------\n\n- Migrate workflow states with wfhistory migration and do not set state manually unless necessary.\n  [tschanzt]\n\n\n1.14.7 (2015-08-27)\n-------------------\n\n- Add an afterCommitHook that notifies about the transaction having been\n  committed (or aborted) after installing upgrades.\n  [lgraf]\n\n- Fix authentication problem with bin/upgrade command.\n  [jone]\n\n\n1.14.6 (2015-07-22)\n-------------------\n\n- Return context manager to allow \"as\" statements.\n  [lknoepfel]\n\n\n1.14.5 (2015-05-20)\n-------------------\n\n- Update quickinstaller product version when upgrading a package.\n  [jone]\n\n\n1.14.4 (2015-04-09)\n-------------------\n\n- Fix post upgrade ordering which was broken since 1.11.0.\n  [jone]\n\n\n1.14.3 (2015-03-29)\n-------------------\n\n- Fix error in upgrade-step:directory directive.\n  The error occured when the directory was a subdirectory relative to the\n  ZCML directory, causing the package module to be replaced with the\n  upgrades package directory in sys.modules.\n  [jone]\n\n- Fix issue with transaction note length when a large not already exists.\n  When the transaction note already has maximum length (e.g. with Archetypes notes),\n  nothing more should be added.\n  Also increased the threshold back (reduced in 1.14.2).\n  [jone]\n\n\n1.14.2 (2015-03-25)\n-------------------\n\n- Reduce maximum transaction note length used by ftw.upgrade.\n  [jone]\n\n\n1.14.1 (2015-03-18)\n-------------------\n\n- Command: fix instance discover when bound to public interface.\n  [jone]\n\n\n1.14.0 (2015-02-24)\n-------------------\n\n- Command: add fake terminal fallback when blessed cannot be loaded.\n  This can happen for example when Python is built without curses support.\n  [jone]\n\n- ``bin/upgrade recook`` command for recooking resources.\n  [jone]\n\n- Recook resources after installing upgrades.\n  [jone]\n\n- plone.reload support for upgrade step directory.\n  [jone]\n\n\n1.13.0 (2015-02-20)\n-------------------\n\n- ``bin/upgrade``: automatically authenticate with a tempfile\n  negotiation mechanism when no other authentication information is\n  provided.\n  [jone]\n\n- New ``bin/upgrade user`` command for testing authentication.\n  [jone]\n\n\n1.12.0 (2015-02-16)\n-------------------\n\n- Add ``bin/upgrade`` commands ``sites``, ``list`` and ``install``.\n  This makes it possible to install upgrades from the console.\n  [jone]\n\n- Update upgrade step scaffold to support plone.reload.\n  [jone]\n\n- New JSON API implemented, accessible with `/upgrades-api`.\n  [jone]\n\n- Executioner: `install_upgrades_by_api_ids` was added, allowing to install\n  a selection of upgrades identified by API ugprade ids.\n  [jone]\n\n- Gatherer: `get_upgrades_by_api_ids` was added, returning upgrade infos\n  for a selection of API upgrade ids.\n  [jone]\n\n- Gatherer: `get_upgrades` is deprecated and replaced by `get_profiles`.\n  `get_profiles` now has a `proposed_only` flag.\n  [jone]\n\n\n1.11.0 (2015-01-08)\n-------------------\n\n- Reverse post upgrade adapter ordering.\n  The order was reversed, it should execute dependencies first.\n  [jone]\n\n- create-upgrade: Make sure to quote argument passed to bin/upgrade.\n  [lgraf]\n\n- Add a ``create-upgrade`` script which can be installed globally.\n  [jone]\n\n- Create a ``bin/upgrade`` script:\n\n  - the ``create`` command creates a upgrade step in the \"upgrades\" directory.\n  - the ``touch`` command can be used for reordering upgrade steps.\n\n  [jone]\n\n- New ``upgrade-step:directory`` directive for registering a directory\n  with upgrade steps which are automatically detected and registered.\n  [jone]\n\n- Extend the importProfile directive so that a handler can be\n  defined. The handler may import the associated upgrade step\n  profile with the new method ``self.install_upgrade_profile()``.\n  [jone]\n\n\n1.10.2 (2014-11-19)\n-------------------\n\n- Exclude uninstalled products from upgrades view.\n  [jone]\n\n- Make upgrades appear in undo form again.\n  The transaction note fix in 1.7.4 caused upgrade transaction to not appear in the undo form.\n  [jone]\n\n\n1.10.1 (2014-10-27)\n-------------------\n\n- Update upgrade view ordering for root nodes.\n  The dependency graph does not define any order for root\n  profiles (e.g. included in buildout directly), which causes\n  random sorting in the upgrade view for those profiles.\n  This change sorts those root profiles by name without changing\n  the order of profiles which is depended on.\n  [jone]\n\n\n1.10.0 (2014-08-28)\n-------------------\n\n- Wrap step.objects in a SavepointIterator that creates a savepoint every n items.\n  [lgraf]\n\n\n1.9.0 (2014-08-27)\n------------------\n\n- Add @@manage-upgrades-plain fallback view for @@manage-upgrades.\n  It does not include plone`s main template and thus might be able to render when\n  the default view fails for some reason.\n  [deiferni]\n\n\n1.8.0 (2014-08-11)\n------------------\n\n- Prevent portal_quickinstaller from picking upgrade-steps instead of the\n  default-profile by prefixing the profile-id with ``upgrade_to_`` (fix #45)\n  [pbauer]\n\n- Flag profiles whose filesystem version is outdated.\n  Highlights profiles with upgrades that lead to a destination version that is\n  higher than the corresponding profile's current filesystem version.\n  This usually means someone forgot to update the version in metadata.xml of the\n  corresponding profile.\n  [lgraf]\n\n\n1.7.4 (2014-05-12)\n------------------\n\n- Extend workflow updater to migrate workflow history.\n  [jone]\n\n- Fix workflow updater to always update objects.\n  The objects are updated even when it seems that the object was\n  not update or has no longer a workflow.\n  This fixes issues when updating a workflow, in which case the\n  old workflow and the new workflow has the same ID.\n  [jone]\n\n- Make sure the transaction note does not get too long.\n  Zope limits the transaction note length. By actively managing the transaction note\n  we can provide fallbacks for when it gets too long because a lot of upgrade steps\n  are installed at the same time.\n  [jone]\n\n\n1.7.3 (2014-04-30)\n------------------\n\n- Add ``uninstall_product`` method to upgrade step class.\n  [jone]\n\n\n1.7.2 (2014-02-28)\n------------------\n\n- Update provided interfaces when migrating objects to new class.\n  [jone]\n\n\n1.7.1 (2014-01-09)\n------------------\n\n- Fix LocationError on manage-ugprades view on cyclic dependencies.\n  [jone]\n\n\n1.7.0 (2013-09-24)\n------------------\n\n- Add a ``update_workflow_security`` helper function to the upgrade step.\n  [jone]\n\n\n1.6.0 (2013-08-30)\n------------------\n\n- Fix inplace modification bug when updating the catalog while\n  iterating over a catalog result.\n  [jone]\n\n- Implement new ``importProfile`` directive for creating upgrade steps\n  that just import a specific upgrade step generic setup profile.\n  [jone]\n\n\n1.5 (2013-08-16)\n----------------\n\n- Add a ``WorkflowChainUpdater`` for changing workflow chains without\n  resetting existing objects to the initial review state of the new\n  workflow.\n  [jone]\n\n\n1.4.0 (2013-07-18)\n------------------\n\n- Added helper for adding a type_action.\n  [phgross]\n\n- Add `objects` method to `UpgradeStep` for easy querying the catalog\n  and doing stuff with progress logging combined.\n  [jone]\n\n- Make ProgressLogger an iterator too, because it is easier to use.\n  [jone]\n\n- Improve logging while installing upgrade steps.\n  Show duration for installing.\n  [jone]\n\n- Fix upgrade step icons for Plone 4.3.\n  [jone]\n\n- Add ``update_security`` helper.\n  [jone]\n\n- Fix incomplete status info entry prodcued by\n  placeful workflow policy activator.\n  [jone]\n\n\n1.3 (2013-06-13)\n----------------\n\n- Implement a placeful workflow policy activator.\n  [jone]\n\n- Added remove_broken_browserlayer method to step class.\n  [lgraf]\n\n\n1.2.1 (2013-04-23)\n------------------\n\n- Keep modification date on reindexObject wihtout idxs.\n  [mathias.leimgruber]\n\n1.2 (2013-01-24)\n----------------\n\n- onegov.ch approved: add badge to readme.\n  [jone]\n\n- Remove 'step' and 'for' values from internal data structure.\n  This is needed for allowing us to serialize the data (json).\n  [jone]\n\n- Add IPostUpgrade adapter hook.\n  [jone]\n\n- Refactor dependency sorting into seperate function.\n  [jone]\n\n- Add security declarations.\n  [jone]\n\n- Fix wrong tool usage when installing a profile in step class.\n  [jone]\n\n\n1.1 (2012-10-08)\n----------------\n\n- Add catalog_unrestricted_get_object and catalog_unrestricted_search methods to step class.\n  [jone]\n\n- Handle profiles of packages which were removed but have leftover generic setup entries.\n  [jone]\n\n\n1.0 (2012-08-13)\n----------------\n\n- Add installed upgrades to transaction note. Closes #7\n  [jone]\n\n- Add ``migrate_class`` helper with _p_changed implementation supporting BTreeFolder2Base containers.\n  [jone]\n\n- Remove ``purge_resource_registries()`` helper because it does not behave as expected.\n  [jone]\n\n- Set min-height of upgrade output frame to 500px.\n  [jone]\n\n- Print exceptions to browser log stream.\n  [jone]\n\n\n1.0b2 (2012-07-04)\n------------------\n\n- Fix the upgrade registration problem (using a classmethod does not work\n  since registration fails).\n  [jone]\n\n- Let @@manage-upgrade be usable without actually installing the GS profile.\n  [maethu]\n\n\n1.0b1 (2012-06-27)\n------------------\n\n- First implementation.\n  [jone]", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/4teamwork/ftw.upgrade", "keywords": "plone ftw upgrade", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "ftw.upgrade", "package_url": "https://pypi.org/project/ftw.upgrade/", "platform": "", "project_url": "https://pypi.org/project/ftw.upgrade/", "project_urls": {"Homepage": "https://github.com/4teamwork/ftw.upgrade"}, "release_url": "https://pypi.org/project/ftw.upgrade/3.0.0/", "requires_dist": null, "requires_python": "", "summary": "An upgrade control panel and upgrade helpers for plone upgrades.", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2><a href=\"#id76\" rel=\"nofollow\">Introduction</a></h2>\n<p>This product aims to simplify running and writing third-party Generic Setup\nupgrade steps in Plone.</p>\n<p>It provides a control panel for running multiple upgrades\nat once, based on the upgrade mechanism of Generic Setup (portal_setup).</p>\n<p>Further a base class for writing upgrade steps with a variety of\nhelpers for common tasks is provided.</p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id76\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#features\" id=\"id77\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#installation\" id=\"id78\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#installing-ftw-upgrade-s-console-script\" id=\"id79\" rel=\"nofollow\">Installing ftw.upgrade\u2019s console script</a></li>\n<li><a href=\"#compatibility\" id=\"id80\" rel=\"nofollow\">Compatibility</a></li>\n</ul>\n</li>\n<li><a href=\"#manage-upgrades\" id=\"id81\" rel=\"nofollow\">Manage upgrades</a><ul>\n<li><a href=\"#fallback-view\" id=\"id82\" rel=\"nofollow\">Fallback view</a></li>\n</ul>\n</li>\n<li><a href=\"#the-bin-upgrade-script\" id=\"id83\" rel=\"nofollow\">The bin/upgrade script</a></li>\n<li><a href=\"#upgrade-step-helpers\" id=\"id84\" rel=\"nofollow\">Upgrade step helpers</a><ul>\n<li><a href=\"#updating-objects-with-progress-logging\" id=\"id85\" rel=\"nofollow\">Updating objects with progress logging</a></li>\n<li><a href=\"#methods\" id=\"id86\" rel=\"nofollow\">Methods</a></li>\n<li><a href=\"#progress-logger\" id=\"id87\" rel=\"nofollow\">Progress logger</a></li>\n<li><a href=\"#workflow-chain-updater\" id=\"id88\" rel=\"nofollow\">Workflow Chain Updater</a></li>\n<li><a href=\"#placeful-workflow-policy-activator\" id=\"id89\" rel=\"nofollow\">Placeful Workflow Policy Activator</a></li>\n<li><a href=\"#inplace-migrator\" id=\"id90\" rel=\"nofollow\">Inplace Migrator</a></li>\n</ul>\n</li>\n<li><a href=\"#upgrade-directories\" id=\"id91\" rel=\"nofollow\">Upgrade directories</a><ul>\n<li><a href=\"#setting-up-an-upgrade-directory\" id=\"id92\" rel=\"nofollow\">Setting up an upgrade directory</a></li>\n<li><a href=\"#declare-upgrades-soft-dependencies\" id=\"id93\" rel=\"nofollow\">Declare upgrades soft dependencies</a></li>\n<li><a href=\"#creating-an-upgrade-step\" id=\"id94\" rel=\"nofollow\">Creating an upgrade step</a></li>\n<li><a href=\"#reordering-upgrade-steps\" id=\"id95\" rel=\"nofollow\">Reordering upgrade steps</a></li>\n<li><a href=\"#creating-an-upgrade-step-manually\" id=\"id96\" rel=\"nofollow\">Creating an upgrade step manually</a></li>\n<li><a href=\"#deferrable-upgrades\" id=\"id97\" rel=\"nofollow\">Deferrable upgrades</a></li>\n</ul>\n</li>\n<li><a href=\"#json-api\" id=\"id98\" rel=\"nofollow\">JSON API</a><ul>\n<li><a href=\"#authentication-and-authorization\" id=\"id99\" rel=\"nofollow\">Authentication and authorization</a></li>\n<li><a href=\"#versioning\" id=\"id100\" rel=\"nofollow\">Versioning</a></li>\n<li><a href=\"#api-discovery\" id=\"id101\" rel=\"nofollow\">API Discovery</a></li>\n<li><a href=\"#listing-plone-sites\" id=\"id102\" rel=\"nofollow\">Listing Plone sites:</a></li>\n<li><a href=\"#listing-profiles-and-upgrades\" id=\"id103\" rel=\"nofollow\">Listing profiles and upgrades</a><ul>\n<li><a href=\"#list-all-profiles\" id=\"id104\" rel=\"nofollow\">List all profiles</a></li>\n<li><a href=\"#get-a-profile\" id=\"id105\" rel=\"nofollow\">Get a profile</a></li>\n<li><a href=\"#list-proposed-profiles\" id=\"id106\" rel=\"nofollow\">List proposed profiles</a></li>\n<li><a href=\"#list-proposed-upgrades\" id=\"id107\" rel=\"nofollow\">List proposed upgrades</a></li>\n</ul>\n</li>\n<li><a href=\"#executing-upgrades\" id=\"id108\" rel=\"nofollow\">Executing upgrades</a><ul>\n<li><a href=\"#executing-selected-upgrades\" id=\"id109\" rel=\"nofollow\">Executing selected upgrades</a></li>\n<li><a href=\"#execute-all-proposed-upgrades\" id=\"id110\" rel=\"nofollow\">Execute all proposed upgrades</a></li>\n<li><a href=\"#installing-profiles\" id=\"id111\" rel=\"nofollow\">Installing profiles</a></li>\n<li><a href=\"#upgrading-plone\" id=\"id112\" rel=\"nofollow\">Upgrading Plone</a></li>\n</ul>\n</li>\n<li><a href=\"#recook-resources\" id=\"id113\" rel=\"nofollow\">Recook resources</a></li>\n<li><a href=\"#combine-bundles\" id=\"id114\" rel=\"nofollow\">Combine bundles</a></li>\n</ul>\n</li>\n<li><a href=\"#import-profile-upgrade-steps\" id=\"id115\" rel=\"nofollow\">Import-Profile Upgrade Steps</a></li>\n<li><a href=\"#ipostupgrade-adapter\" id=\"id116\" rel=\"nofollow\">IPostUpgrade adapter</a></li>\n<li><a href=\"#savepoints\" id=\"id117\" rel=\"nofollow\">Savepoints</a></li>\n<li><a href=\"#memory-optimization-while-running-upgrades\" id=\"id118\" rel=\"nofollow\">Memory optimization while running upgrades</a></li>\n<li><a href=\"#prevent-ftw-upgrade-from-marking-upgrades-as-installed\" id=\"id119\" rel=\"nofollow\">Prevent ftw.upgrade from marking upgrades as installed</a></li>\n<li><a href=\"#links\" id=\"id120\" rel=\"nofollow\">Links</a></li>\n<li><a href=\"#copyright\" id=\"id121\" rel=\"nofollow\">Copyright</a></li>\n<li><a href=\"#changelog\" id=\"id122\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id123\" rel=\"nofollow\">3.0.0 (2020-03-23)</a></li>\n<li><a href=\"#id2\" id=\"id124\" rel=\"nofollow\">2.16.0 (2020-02-14)</a></li>\n<li><a href=\"#id3\" id=\"id125\" rel=\"nofollow\">2.15.2 (2020-01-27)</a></li>\n<li><a href=\"#id4\" id=\"id126\" rel=\"nofollow\">2.15.1 (2019-12-16)</a></li>\n<li><a href=\"#id5\" id=\"id127\" rel=\"nofollow\">2.15.0 (2019-12-12)</a></li>\n<li><a href=\"#id6\" id=\"id128\" rel=\"nofollow\">2.14.1 (2019-11-08)</a></li>\n<li><a href=\"#id7\" id=\"id129\" rel=\"nofollow\">2.14.0 (2019-10-31)</a></li>\n<li><a href=\"#id8\" id=\"id130\" rel=\"nofollow\">2.13.0 (2019-08-22)</a></li>\n<li><a href=\"#id9\" id=\"id131\" rel=\"nofollow\">2.12.2 (2019-06-19)</a></li>\n<li><a href=\"#id10\" id=\"id132\" rel=\"nofollow\">2.12.1 (2019-06-18)</a></li>\n<li><a href=\"#id11\" id=\"id133\" rel=\"nofollow\">2.12.0 (2018-07-26)</a></li>\n<li><a href=\"#id12\" id=\"id134\" rel=\"nofollow\">2.11.1 (2018-04-05)</a></li>\n<li><a href=\"#id13\" id=\"id135\" rel=\"nofollow\">2.11.0 (2018-01-31)</a></li>\n<li><a href=\"#id14\" id=\"id136\" rel=\"nofollow\">2.10.0 (2018-01-08)</a></li>\n<li><a href=\"#id15\" id=\"id137\" rel=\"nofollow\">2.9.0 (2017-12-14)</a></li>\n<li><a href=\"#id16\" id=\"id138\" rel=\"nofollow\">2.8.1 (2017-10-13)</a></li>\n<li><a href=\"#id17\" id=\"id139\" rel=\"nofollow\">2.8.0 (2017-07-27)</a></li>\n<li><a href=\"#id18\" id=\"id140\" rel=\"nofollow\">2.7.2 (2017-07-13)</a></li>\n<li><a href=\"#id19\" id=\"id141\" rel=\"nofollow\">2.7.1 (2017-06-28)</a></li>\n<li><a href=\"#id20\" id=\"id142\" rel=\"nofollow\">2.7.0 (2017-06-28)</a></li>\n<li><a href=\"#id21\" id=\"id143\" rel=\"nofollow\">2.6.1 (2017-06-28)</a></li>\n<li><a href=\"#id22\" id=\"id144\" rel=\"nofollow\">2.6.0 (2017-06-08)</a></li>\n<li><a href=\"#id23\" id=\"id145\" rel=\"nofollow\">2.5.0 (2017-06-07)</a></li>\n<li><a href=\"#id24\" id=\"id146\" rel=\"nofollow\">2.4.0 (2017-06-07)</a></li>\n<li><a href=\"#id25\" id=\"id147\" rel=\"nofollow\">2.3.1 (2017-02-15)</a></li>\n<li><a href=\"#id26\" id=\"id148\" rel=\"nofollow\">2.3.0 (2017-02-14)</a></li>\n<li><a href=\"#id27\" id=\"id149\" rel=\"nofollow\">2.2.0 (2017-01-30)</a></li>\n<li><a href=\"#id28\" id=\"id150\" rel=\"nofollow\">2.1.1 (2016-12-13)</a></li>\n<li><a href=\"#id29\" id=\"id151\" rel=\"nofollow\">2.1.0 (2016-12-06)</a></li>\n<li><a href=\"#id30\" id=\"id152\" rel=\"nofollow\">2.0.5 (2016-10-24)</a></li>\n<li><a href=\"#id31\" id=\"id153\" rel=\"nofollow\">2.0.4 (2016-10-24)</a></li>\n<li><a href=\"#id32\" id=\"id154\" rel=\"nofollow\">2.0.3 (2016-09-27)</a></li>\n<li><a href=\"#id33\" id=\"id155\" rel=\"nofollow\">2.0.2 (2016-09-27)</a></li>\n<li><a href=\"#id34\" id=\"id156\" rel=\"nofollow\">2.0.1 (2016-09-02)</a></li>\n<li><a href=\"#id35\" id=\"id157\" rel=\"nofollow\">2.0.0 (2016-08-18)</a></li>\n<li><a href=\"#id36\" id=\"id158\" rel=\"nofollow\">1.19.0 (2016-04-11)</a></li>\n<li><a href=\"#id37\" id=\"id159\" rel=\"nofollow\">1.18.1 (2016-03-09)</a></li>\n<li><a href=\"#id38\" id=\"id160\" rel=\"nofollow\">1.18.0 (2016-02-16)</a></li>\n<li><a href=\"#id39\" id=\"id161\" rel=\"nofollow\">1.17.0 (2016-01-22)</a></li>\n<li><a href=\"#id40\" id=\"id162\" rel=\"nofollow\">1.16.3 (2016-01-22)</a></li>\n<li><a href=\"#id41\" id=\"id163\" rel=\"nofollow\">1.16.2 (2016-01-15)</a></li>\n<li><a href=\"#id42\" id=\"id164\" rel=\"nofollow\">1.16.1 (2016-01-13)</a></li>\n<li><a href=\"#id43\" id=\"id165\" rel=\"nofollow\">1.16.0 (2016-01-05)</a></li>\n<li><a href=\"#id44\" id=\"id166\" rel=\"nofollow\">1.15.1 (2015-11-11)</a></li>\n<li><a href=\"#id45\" id=\"id167\" rel=\"nofollow\">1.15.0 (2015-10-30)</a></li>\n<li><a href=\"#id46\" id=\"id168\" rel=\"nofollow\">1.14.8 (2015-09-21)</a></li>\n<li><a href=\"#id47\" id=\"id169\" rel=\"nofollow\">1.14.7 (2015-08-27)</a></li>\n<li><a href=\"#id48\" id=\"id170\" rel=\"nofollow\">1.14.6 (2015-07-22)</a></li>\n<li><a href=\"#id49\" id=\"id171\" rel=\"nofollow\">1.14.5 (2015-05-20)</a></li>\n<li><a href=\"#id50\" id=\"id172\" rel=\"nofollow\">1.14.4 (2015-04-09)</a></li>\n<li><a href=\"#id51\" id=\"id173\" rel=\"nofollow\">1.14.3 (2015-03-29)</a></li>\n<li><a href=\"#id52\" id=\"id174\" rel=\"nofollow\">1.14.2 (2015-03-25)</a></li>\n<li><a href=\"#id53\" id=\"id175\" rel=\"nofollow\">1.14.1 (2015-03-18)</a></li>\n<li><a href=\"#id54\" id=\"id176\" rel=\"nofollow\">1.14.0 (2015-02-24)</a></li>\n<li><a href=\"#id55\" id=\"id177\" rel=\"nofollow\">1.13.0 (2015-02-20)</a></li>\n<li><a href=\"#id56\" id=\"id178\" rel=\"nofollow\">1.12.0 (2015-02-16)</a></li>\n<li><a href=\"#id57\" id=\"id179\" rel=\"nofollow\">1.11.0 (2015-01-08)</a></li>\n<li><a href=\"#id58\" id=\"id180\" rel=\"nofollow\">1.10.2 (2014-11-19)</a></li>\n<li><a href=\"#id59\" id=\"id181\" rel=\"nofollow\">1.10.1 (2014-10-27)</a></li>\n<li><a href=\"#id60\" id=\"id182\" rel=\"nofollow\">1.10.0 (2014-08-28)</a></li>\n<li><a href=\"#id61\" id=\"id183\" rel=\"nofollow\">1.9.0 (2014-08-27)</a></li>\n<li><a href=\"#id62\" id=\"id184\" rel=\"nofollow\">1.8.0 (2014-08-11)</a></li>\n<li><a href=\"#id63\" id=\"id185\" rel=\"nofollow\">1.7.4 (2014-05-12)</a></li>\n<li><a href=\"#id64\" id=\"id186\" rel=\"nofollow\">1.7.3 (2014-04-30)</a></li>\n<li><a href=\"#id65\" id=\"id187\" rel=\"nofollow\">1.7.2 (2014-02-28)</a></li>\n<li><a href=\"#id66\" id=\"id188\" rel=\"nofollow\">1.7.1 (2014-01-09)</a></li>\n<li><a href=\"#id67\" id=\"id189\" rel=\"nofollow\">1.7.0 (2013-09-24)</a></li>\n<li><a href=\"#id68\" id=\"id190\" rel=\"nofollow\">1.6.0 (2013-08-30)</a></li>\n<li><a href=\"#id69\" id=\"id191\" rel=\"nofollow\">1.5 (2013-08-16)</a></li>\n<li><a href=\"#id70\" id=\"id192\" rel=\"nofollow\">1.4.0 (2013-07-18)</a></li>\n<li><a href=\"#id71\" id=\"id193\" rel=\"nofollow\">1.3 (2013-06-13)</a></li>\n<li><a href=\"#id72\" id=\"id194\" rel=\"nofollow\">1.2.1 (2013-04-23)</a></li>\n<li><a href=\"#id73\" id=\"id195\" rel=\"nofollow\">1.2 (2013-01-24)</a></li>\n<li><a href=\"#id74\" id=\"id196\" rel=\"nofollow\">1.1 (2012-10-08)</a></li>\n<li><a href=\"#id75\" id=\"id197\" rel=\"nofollow\">1.0 (2012-08-13)</a></li>\n<li><a href=\"#b2-2012-07-04\" id=\"id198\" rel=\"nofollow\">1.0b2 (2012-07-04)</a></li>\n<li><a href=\"#b1-2012-06-27\" id=\"id199\" rel=\"nofollow\">1.0b1 (2012-06-27)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div>\n<a href=\"http://onegov.ch/community/zertifizierte-module/ftw.upgrade\" rel=\"nofollow\"><img alt=\"http://onegov.ch/approved.png/image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16226b3bfe2627d52f9aa98b89b76a557ff24194/687474703a2f2f6f6e65676f762e63682f617070726f7665642e706e672f696d616765\"></a>\n<p>Certified: 01/2013</p>\n</div>\n</div>\n<div id=\"features\">\n<h2><a href=\"#id77\" rel=\"nofollow\">Features</a></h2>\n<ul>\n<li><strong>Managing upgrades</strong>: Provides an advanced view for upgrading\nthird-party Plone packages using Generic Setup.\nIt enables upgrading multiple packages at once with an easy to use user\ninterface.\nBy resolving the dependency graph it is able to optimize the upgrade\nstep order so that the upgrade is hassle free.</li>\n<li><strong>Writing upgrades</strong>: The package provides a base upgrade class with\nvarious helpers for common upgrade tasks.</li>\n<li><strong>Upgrade directories with less ZCML</strong>: By registering a directory\nas upgrade-directory, no additional ZCML is needed for each upgrade step.\nBy using a timestamp as version number we have less (merge-) conflicts\nand less error potential.</li>\n<li><strong>Import profile upgrade steps</strong>: Sometimes an upgrade step consists\nsolely of importing a purpose-made generic setup profile. A new\n<tt><span class=\"pre\">upgrade-step:importProfile</span></tt> ZCML directive makes this much simpler.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id78\" rel=\"nofollow\">Installation</a></h2>\n<ul>\n<li>Install <tt>ftw.upgrade</tt> by adding it to the list of eggs in your buildout.\nThen run buildout and restart your instance:</li>\n</ul>\n<pre><span class=\"k\">[instance]</span>\n<span class=\"na\">eggs +</span><span class=\"o\">=</span><span class=\"s\">\n    ftw.upgrade</span>\n</pre>\n<ul>\n<li>Go to Site Setup of your Plone site and activate the <tt>ftw.upgrade</tt> add-on.</li>\n</ul>\n<div id=\"installing-ftw-upgrade-s-console-script\">\n<span id=\"console-script-installation\"></span><h3><a href=\"#id79\" rel=\"nofollow\">Installing ftw.upgrade\u2019s console script</a></h3>\n<p>If you include <tt>ftw.upgrade</tt> in the list of <tt>eggs</tt> of a\n<tt>plone.recipe.zope2instance</tt> based section, the <tt>bin/upgrade</tt> script\nshould be generated automatically for you (that is, if you haven\u2019t limited or\nsuppressed script generation via the <tt>scripts</tt> option).</p>\n<p>Otherwise, installing the console script <tt>bin/upgrade</tt> can be done with an\nadditional buildout part:</p>\n<pre><span class=\"k\">[buildout]</span>\n<span class=\"na\">parts +</span><span class=\"o\">=</span> <span class=\"s\">upgrade</span>\n\n<span class=\"k\">[upgrade]</span>\n<span class=\"na\">recipe</span> <span class=\"o\">=</span> <span class=\"s\">zc.recipe.egg:scripts</span>\n<span class=\"na\">eggs</span> <span class=\"o\">=</span> <span class=\"s\">ftw.upgrade</span>\n</pre>\n</div>\n<div id=\"compatibility\">\n<h3><a href=\"#id80\" rel=\"nofollow\">Compatibility</a></h3>\n<p>Compatible with Plone 4.3.x and 5.1.x.</p>\n</div>\n</div>\n<div id=\"manage-upgrades\">\n<h2><a href=\"#id81\" rel=\"nofollow\">Manage upgrades</a></h2>\n<p>The <tt><span class=\"pre\">@@manage-upgrades</span></tt> view allows to upgrade multiple packages at once:</p>\n<img alt=\"https://github.com/4teamwork/ftw.upgrade/raw/master/docs/manage-upgrades.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d3991034c55872c6e9eb73fd09c31a3a9018278/68747470733a2f2f6769746875622e636f6d2f347465616d776f726b2f6674772e757067726164652f7261772f6d61737465722f646f63732f6d616e6167652d75706772616465732e706e67\">\n<div id=\"fallback-view\">\n<h3><a href=\"#id82\" rel=\"nofollow\">Fallback view</a></h3>\n<p>The <tt><span class=\"pre\">@@manage-upgrades-plain</span></tt> view acts as a fallback view for <tt><span class=\"pre\">@@manage-upgrades</span></tt>.\nIt does not include plone`s main template and thus might be able to render when the default\nview fails for some reason.</p>\n</div>\n</div>\n<div id=\"the-bin-upgrade-script\">\n<h2><a href=\"#id83\" rel=\"nofollow\">The bin/upgrade script</a></h2>\n<p>Refer to the <a href=\"#console-script-installation\" rel=\"nofollow\">console script installation</a> section for instructions on how\nto install <tt>bin/upgrade</tt>.</p>\n<p>The <tt>bin/upgrade</tt> console script enables management of upgrades on the filesystem\n(creating new upgrades, changing upgrade order) as well as interacting with an installed\nPlone site, listing profiles and upgrades and installing upgrades.</p>\n<p>Some examples:</p>\n<pre>$ bin/upgrade create <span class=\"s2\">\"AddCatalogIndex\"</span>\n$ bin/upgrade touch my/package/upgrades/20110101000000_add_catalog_index\n$ bin/upgrade sites\n$ bin/upgrade list -s Plone --auth admin:admin --upgrades\n$ bin/upgrade install -s Plone --auth admin:admin  --proposed\n</pre>\n<p>The full documentation of the <tt>bin/upgrade</tt> script is available using its help system:</p>\n<pre>$ bin/upgrade <span class=\"nb\">help</span>\n</pre>\n</div>\n<div id=\"upgrade-step-helpers\">\n<h2><a href=\"#id84\" rel=\"nofollow\">Upgrade step helpers</a></h2>\n<p>The <tt>UpgradeStep</tt> base class provides various tools and helpers useful\nwhen writing upgrade steps.\nIt can be used by registering the classmethod directly.\nBe aware that the class is very special: it acts like a function and calls\nitself automatically.</p>\n<p>Example upgrade step definition (defined in a <tt>upgrades.py</tt>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade</span> <span class=\"kn\">import</span> <span class=\"n\">UpgradeStep</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UpdateFooIndex</span><span class=\"p\">(</span><span class=\"n\">UpgradeStep</span><span class=\"p\">):</span>\n   <span class=\"sd\">\"\"\"The index ``foo`` is a ``FieldIndex`` instead of a\n   ``KeywordIndex``. This upgrade step changes the index type\n   and reindexes the objects.\n   \"\"\"</span>\n\n   <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n       <span class=\"n\">index_name</span> <span class=\"o\">=</span> <span class=\"s1\">'foo'</span>\n       <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">catalog_has_index</span><span class=\"p\">(</span><span class=\"n\">index_name</span><span class=\"p\">):</span>\n           <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">catalog_remove_index</span><span class=\"p\">(</span><span class=\"n\">index_name</span><span class=\"p\">)</span>\n\n       <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">catalog_add_index</span><span class=\"p\">(</span><span class=\"n\">index_name</span><span class=\"p\">,</span> <span class=\"s1\">'KeywordIndex'</span><span class=\"p\">)</span>\n       <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">catalog_rebuild_index</span><span class=\"p\">(</span><span class=\"n\">index_name</span><span class=\"p\">)</span>\n</pre>\n<p>Registration in <tt>configure.zcml</tt> (assuming it\u2019s in the same directory):</p>\n<pre><span class=\"nt\">&lt;configure</span>\n    <span class=\"na\">xmlns=</span><span class=\"s\">\"http://namespaces.zope.org/zope\"</span>\n    <span class=\"na\">xmlns:genericsetup=</span><span class=\"s\">\"http://namespaces.zope.org/genericsetup\"</span>\n    <span class=\"na\">i18n_domain=</span><span class=\"s\">\"my.package\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;genericsetup:upgradeStep</span>\n        <span class=\"na\">profile=</span><span class=\"s\">\"my.package:default\"</span>\n        <span class=\"na\">source=</span><span class=\"s\">\"4\"</span>\n        <span class=\"na\">destination=</span><span class=\"s\">\"5\"</span>\n        <span class=\"na\">title=</span><span class=\"s\">\"Update index 'foo'.\"</span>\n        <span class=\"na\">handler=</span><span class=\"s\">\".upgrades.UpdateFooIndex\"</span>\n        <span class=\"nt\">/&gt;</span>\n\n<span class=\"nt\">&lt;/configure&gt;</span>\n</pre>\n<div id=\"updating-objects-with-progress-logging\">\n<h3><a href=\"#id85\" rel=\"nofollow\">Updating objects with progress logging</a></h3>\n<p>Since an upgrade step often updates a set of objects indexed in the catalog,\nthere is a useful helper method <cite>self.objects()</cite> which combines querying the\ncatalog with the <a href=\"#progress-logger\" rel=\"nofollow\">Progress Logger</a>.\nThe catalog is queried unrestricted so that we handle all the objects.</p>\n<p>Here is an example for updating all objects of a particular type:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade</span> <span class=\"kn\">import</span> <span class=\"n\">ProgressLogger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade</span> <span class=\"kn\">import</span> <span class=\"n\">UpgradeStep</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExcludeFilesFromNavigation</span><span class=\"p\">(</span><span class=\"n\">UpgradeStep</span><span class=\"p\">):</span>\n\n   <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n       <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">({</span><span class=\"s1\">'portal_type'</span><span class=\"p\">:</span> <span class=\"s1\">'File'</span><span class=\"p\">},</span>\n                               <span class=\"s1\">'Enable exclude from navigation for files'</span><span class=\"p\">):</span>\n           <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">setExcludeFromNav</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>When running the upgrade step you\u2019ll be shown a progress log:</p>\n<pre>INFO ftw.upgrade STARTING Enable exclude from navigation for files\nINFO ftw.upgrade 1 of 10 (10%): Enable exclude from navigation for files\nINFO ftw.upgrade 5 of 50 (50%): Enable exclude from navigation for files\nINFO ftw.upgrade 10 of 10 (100%): Enable exclude from navigation for files\nINFO ftw.upgrade DONE: Enable exclude from navigation for files\n</pre>\n</div>\n<div id=\"methods\">\n<h3><a href=\"#id86\" rel=\"nofollow\">Methods</a></h3>\n<p>The <tt>UpgradeStep</tt> class has various helper functions:</p>\n<dl>\n<dt><tt>self.getToolByName(tool_name)</tt></dt>\n<dd>Returns the tool with the name <tt>tool_name</tt> of the upgraded site.</dd>\n<dt><tt>self.objects(catalog_query, message, logger=None, savepoints=None)</tt></dt>\n<dd><p>Queries the catalog (unrestricted) and an iterator with full objects.\nThe iterator configures and calls a <tt>ProgressLogger</tt> with the\npassed <tt>message</tt>.</p>\n<p>If set to a non-zero value, the <tt>savepoints</tt> argument causes a transaction\nsavepoint to be created every n items. This can be used to keep memory usage\nin check when creating large transactions.\nThe default value <tt>None</tt> indicates that we are not configuring this feature\nand it should use the default configuration, which is usually <tt>1000</tt>. See\nthe <a href=\"#savepoints\" rel=\"nofollow\">Savepoints</a> section for more details.\nIn order to disable savepoints completely, you can use <tt>savepoints=False</tt>.</p>\n<p>This method will remove matching brains from the catalog when they are broken\nbecause the object of the brain no longer exists.\nThe progress logger will not compensate for the skipped objects and terminate\nbefore reaching 100%.</p>\n</dd>\n<dt><tt>self.catalog_rebuild_index(name)</tt></dt>\n<dd>Reindex the <tt>portal_catalog</tt> index identified by <tt>name</tt>.</dd>\n<dt><tt>self.catalog_reindex_objects(query, idxs=None, savepoints=None)</tt></dt>\n<dd>Reindex all objects found in the catalog with <cite>query</cite>.\nA list of indexes can be passed as <cite>idxs</cite> for limiting the\nindexed indexes.\nThe <tt>savepoints</tt> argument will be passed to <tt>self.objects()</tt>.</dd>\n<dt><tt>self.catalog_has_index(name)</tt></dt>\n<dd>Returns whether there is a catalog index <tt>name</tt>.</dd>\n<dt><tt>self.catalog_add_index(name, type_, extra=None)</tt></dt>\n<dd>Adds a new index to the <tt>portal_catalog</tt> tool.</dd>\n<dt><tt>self.catalog_remove_index(name)</tt></dt>\n<dd>Removes an index from the <tt>portal_catalog</tt> tool.</dd>\n<dt><tt>self.actions_remove_action(category, action_id)</tt></dt>\n<dd>Removes an action identified by <tt>action_id</tt> within the given\n<tt>category</tt> from the <tt>portal_actions</tt> tool.</dd>\n<dt><tt>self.catalog_unrestricted_get_object(brain)</tt></dt>\n<dd>Returns the unrestricted object of a brain.\nDead brains, for which there is no longer an object, are removed from\nthe catalog and <tt>None</tt> is returned.</dd>\n<dt><tt>self.catalog_unrestricted_search(query, full_objects=False)</tt></dt>\n<dd><p>Searches the catalog without checking security.\nWhen <cite>full_objects</cite> is <cite>True</cite>, unrestricted objects are\nreturned instead of brains.\nUpgrade steps should generally use unrestricted catalog access\nsince all objects should be upgraded - even if the manager\nrunning the upgrades has no access on the objects.</p>\n<p>When using <tt>full_objects</tt>, dead brains, for which there is no longer\nan object, are removed from the catalog and skipped in the generator.\nWhen dead brains are removed, the resulting sized generator\u2019s length\nwill not compensate for the skipped objects and therefore be too large.</p>\n</dd>\n<dt><tt>self.actions_add_type_action(self, portal_type, after, action_id, **kwargs)</tt></dt>\n<dd>Add a <tt>portal_types</tt> action from the type identified\nby <tt>portal_type</tt>, the position can be defined by the\n<tt>after</tt> attribute. If the after action can not be found,\nthe action will be inserted at the end of the list.</dd>\n<dt><tt>self.actions_remove_type_action(portal_type, action_id)</tt></dt>\n<dd>Removes a <tt>portal_types</tt> action from the type identified\nby <tt>portal_type</tt> with the action id <tt>action_id</tt>.</dd>\n<dt><tt>self.set_property(context, key, value, <span class=\"pre\">data_type='string')</span></tt></dt>\n<dd>Safely set a property with the key <tt>key</tt> and the value <tt>value</tt>\non the given <tt>context</tt>.\nThe property is created with the type <tt>data_type</tt> if it does not exist.</dd>\n<dt><tt>self.add_lines_to_property(context, key, lines)</tt></dt>\n<dd>Updates a property with key <tt>key</tt> on the object <tt>context</tt>\nadding <tt>lines</tt>.\nThe property is expected to be of type \u201clines\u201d.\nIf the property does not exist it is created.</dd>\n<dt><tt>self.setup_install_profile(profileid, steps=None)</tt></dt>\n<dd>Installs the generic setup profile identified by <tt>profileid</tt>.\nIf a list step names is passed with <tt>steps</tt> (e.g. [\u2018actions\u2019]),\nonly those steps are installed. All steps are installed by default.</dd>\n<dt><tt>self.ensure_profile_installed(profileid)</tt></dt>\n<dd>Install a generic setup profile only when it is not yet installed.</dd>\n<dt><tt>self.install_upgrade_profile(steps=None)</tt></dt>\n<dd>Installs the generic setup profile associated with this upgrade step.\nThe profile may be associated to upgrade steps by using either the\n<tt><span class=\"pre\">upgrade-step:importProfile</span></tt> or the <tt><span class=\"pre\">upgrade-step:directory</span></tt> directive.</dd>\n<dt><tt>self.is_profile_installed(profileid)</tt></dt>\n<dd>Checks whether a generic setup profile is installed.\nRespects product uninstallation via quickinstaller.</dd>\n<dt><tt>self.is_product_installed(product_name)</tt></dt>\n<dd>Check whether a product is installed.</dd>\n<dt><tt>self.uninstall_product(product_name)</tt></dt>\n<dd>Uninstalls a product using the quick installer.</dd>\n<dt><tt>self.migrate_class(obj, new_class)</tt></dt>\n<dd>Changes the class of an object. It has a special handling for BTreeFolder2Base\nbased containers.</dd>\n<dt><tt>self.remove_broken_browserlayer(name, dottedname)</tt></dt>\n<dd>Removes a browser layer registration whose interface can\u2019t be imported any\nmore from the persistent registry.\nMessages like these on instance boot time can be an indication of this\nproblem:\n<tt>WARNING OFS.Uninstalled Could not import class 'IMyProductSpecific' from\nmodule 'my.product.interfaces'</tt></dd>\n<dt><tt>self.update_security(obj, reindex_security=True)</tt></dt>\n<dd>Update the security of a single object (checkboxes in manage_access).\nThis is usefuly in combination with the <tt>ProgressLogger</tt>.\nIt is possible to skip reindexing the object security in the catalog\n(<tt>allowedRolesAndUsers</tt>). This speeds up the update but should only be disabled\nwhen there are no changes for the <tt>View</tt> permission.</dd>\n<dt><tt>self.update_workflow_security(workflow_names, reindex_security=True, savepoints=None)</tt></dt>\n<dd><p>Update all objects which have one of a list of workflows.\nThis is useful when updating a bunch of workflows and you want to make sure\nthat the object security is updated properly.</p>\n<p>The update done is kept as small as possible by only searching for\ntypes which might have this workflow. It does support placeful workflow policies.</p>\n<p>To further speed this up you can pass <tt>reindex_security=False</tt>, but you need to make\nsure you did not change any security relevant permissions (only <tt>View</tt> needs\n<tt>reindex_security=True</tt> for default Plone).</p>\n<p>By default, transaction savepoints are created every 1000th object. This prevents\nexaggerated memory consumption when creating large transactions. If your server has\nenough memory, you may turn savepoints off by passing <tt>savepoints=None</tt>.</p>\n</dd>\n<dt><tt>self.base_profile</tt></dt>\n<dd>The attribute <tt>base_profile</tt> contains the profile name of the upgraded\nprofile including the <tt>profile-</tt> prefix.\nExample: <tt><span class=\"pre\">u\"profile-the.package:default\"</span></tt>.\nThis information is only available when using the\n<tt><span class=\"pre\">upgrade-step:directory</span></tt> directive.</dd>\n<dt><tt>self.target_version</tt></dt>\n<dd>The attribute <tt>target_version</tt> contains the target version of the upgrade\nstep as a bytestring.\nExample with upgrade step directory: <tt>\"20110101000000\"</tt>.\nThis information is only available when using the\n<tt><span class=\"pre\">upgrade-step:directory</span></tt> directive.</dd>\n</dl>\n</div>\n<div id=\"progress-logger\">\n<h3><a href=\"#id87\" rel=\"nofollow\">Progress logger</a></h3>\n<p>When an upgrade step is taking a long time to complete (e.g. while performing a data migration), the\nadministrator needs to have information about the progress of the update. It is also important to have\ncontinuous output for avoiding proxy timeouts when accessing Zope through a webserver / proxy.</p>\n<p>The <tt>ProgressLogger</tt> makes logging progress very easy:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade</span> <span class=\"kn\">import</span> <span class=\"n\">ProgressLogger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade</span> <span class=\"kn\">import</span> <span class=\"n\">UpgradeStep</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyUpgrade</span><span class=\"p\">(</span><span class=\"n\">UpgradeStep</span><span class=\"p\">):</span>\n\n   <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n       <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">catalog_unrestricted_search</span><span class=\"p\">(</span>\n           <span class=\"p\">{</span><span class=\"s1\">'portal_type'</span><span class=\"p\">:</span> <span class=\"s1\">'MyType'</span><span class=\"p\">},</span> <span class=\"n\">full_objects</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n       <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">ProgressLogger</span><span class=\"p\">(</span><span class=\"s1\">'Migrate my type'</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"p\">):</span>\n           <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">upgrade_obj</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">upgrade_obj</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n       <span class=\"n\">do_something_with</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n</pre>\n<p>The logger will log the current progress every 5 seconds (default).\nExample log output:</p>\n<pre>INFO ftw.upgrade STARTING Migrate MyType\nINFO ftw.upgrade 1 of 10 (10%): Migrate MyType\nINFO ftw.upgrade 5 of 50 (50%): Migrate MyType\nINFO ftw.upgrade 10 of 10 (100%): Migrate MyType\nINFO ftw.upgrade DONE: Migrate MyType\n</pre>\n</div>\n<div id=\"workflow-chain-updater\">\n<h3><a href=\"#id88\" rel=\"nofollow\">Workflow Chain Updater</a></h3>\n<p>When the workflow is changed for a content type, the workflow state is\nreset to the init state of new workflow for every existing object of this\ntype. This can be really annoying.</p>\n<p>The <cite>WorkflowChainUpdater</cite> takes care of setting every object to the correct\nstate after changing the chain (the workflow for the type):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade.workflow</span> <span class=\"kn\">import</span> <span class=\"n\">WorkflowChainUpdater</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade</span> <span class=\"kn\">import</span> <span class=\"n\">UpgradeStep</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UpdateWorkflowChains</span><span class=\"p\">(</span><span class=\"n\">UpgradeStep</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'portal_type'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Document'</span><span class=\"p\">,</span> <span class=\"s1\">'Folder'</span><span class=\"p\">]}</span>\n        <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">catalog_unrestricted_search</span><span class=\"p\">(</span>\n            <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">full_objects</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">review_state_mapping</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"p\">(</span><span class=\"s1\">'intranet_workflow'</span><span class=\"p\">,</span> <span class=\"s1\">'plone_workflow'</span><span class=\"p\">):</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'external'</span><span class=\"p\">:</span> <span class=\"s1\">'published'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'pending'</span><span class=\"p\">:</span> <span class=\"s1\">'pending'</span><span class=\"p\">}}</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">WorkflowChainUpdater</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">review_state_mapping</span><span class=\"p\">):</span>\n            <span class=\"c1\"># assume that the profile 1002 does install a new workflow</span>\n            <span class=\"c1\"># chain for Document and Folder.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_install_profile</span><span class=\"p\">(</span><span class=\"s1\">'profile-my.package.upgrades:1002'</span><span class=\"p\">)</span>\n</pre>\n<p>The workflow chain updater migrates the workflow history by default.\nThe workflow history migration can be disabled by setting\n<tt>migrate_workflow_history</tt> to <tt>False</tt>:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">WorkflowChainUpdater</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">review_state_mapping</span><span class=\"p\">,</span>\n                          <span class=\"n\">migrate_workflow_history</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"c1\"># code</span>\n</pre>\n<p>If a transition mapping is provided, the actions in the workflow history\nentries are migrated according to the mapping so that the translations\nwork for the new workflow:</p>\n<pre><span class=\"n\">transition_mapping</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"s1\">'intranet_workflow'</span><span class=\"p\">,</span> <span class=\"s1\">'new_workflow'</span><span class=\"p\">):</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'submit'</span><span class=\"p\">:</span> <span class=\"s1\">'submit-for-approval'</span><span class=\"p\">}}</span>\n\n<span class=\"k\">with</span> <span class=\"n\">WorkflowChainUpdater</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">review_state_mapping</span><span class=\"p\">,</span>\n                          <span class=\"n\">transition_mapping</span><span class=\"o\">=</span><span class=\"n\">transition_mapping</span><span class=\"p\">):</span>\n    <span class=\"c1\"># code</span>\n</pre>\n</div>\n<div id=\"placeful-workflow-policy-activator\">\n<h3><a href=\"#id89\" rel=\"nofollow\">Placeful Workflow Policy Activator</a></h3>\n<p>When manually activating a placeful workflow policy all objects with a new\nworkflow might be reset to the initial state of the new workflow.</p>\n<p>ftw.upgrade has a tool for enabling placeful workflow policies without\nbreaking the review state by mapping it from the old to the new workflows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade.placefulworkflow</span> <span class=\"kn\">import</span> <span class=\"n\">PlacefulWorkflowPolicyActivator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade</span> <span class=\"kn\">import</span> <span class=\"n\">UpgradeStep</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ActivatePlacefulWorkflowPolicy</span><span class=\"p\">(</span><span class=\"n\">UpgradeStep</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">portal_url</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getToolByName</span><span class=\"p\">(</span><span class=\"s1\">'portal_url'</span><span class=\"p\">)</span>\n        <span class=\"n\">portal</span> <span class=\"o\">=</span> <span class=\"n\">portal_url</span><span class=\"o\">.</span><span class=\"n\">getPortalObject</span><span class=\"p\">()</span>\n\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">portal</span><span class=\"o\">.</span><span class=\"n\">unrestrictedTraverse</span><span class=\"p\">(</span><span class=\"s1\">'path/to/object'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">activator</span> <span class=\"o\">=</span> <span class=\"n\">PlacefulWorkflowPolicyActivator</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"n\">activator</span><span class=\"o\">.</span><span class=\"n\">activate_policy</span><span class=\"p\">(</span>\n            <span class=\"s1\">'local_policy'</span><span class=\"p\">,</span>\n            <span class=\"n\">review_state_mapping</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"p\">(</span><span class=\"s1\">'intranet_workflow'</span><span class=\"p\">,</span> <span class=\"s1\">'plone_workflow'</span><span class=\"p\">):</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'external'</span><span class=\"p\">:</span> <span class=\"s1\">'published'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'pending'</span><span class=\"p\">:</span> <span class=\"s1\">'pending'</span><span class=\"p\">}})</span>\n</pre>\n<p>The above example activates a placeful workflow policy recursively on the\nobject under \u201cpath/to/object\u201d, enabling the placeful workflow policy\n\u201clocal_policy\u201d.</p>\n<p>The mapping then maps the \u201cintranet_workflow\u201d to the \u201cplone_workflow\u201d by\ndefining which old states (key, intranet_workflow) should be changed to\nthe new states (value, plone_workflow).</p>\n<p><strong>Options</strong></p>\n<ul>\n<li><cite>activate_in</cite>: Activates the placeful workflow policy for the passed in\nobject (<cite>True</cite> by default).</li>\n<li><cite>activate_below</cite>: Activates the placeful workflow policy for the children\nof the passed in object, recursively (<cite>True</cite> by default).</li>\n<li><cite>update_security</cite>: Update object security and reindex\nallowedRolesAndUsers (<cite>True</cite> by default).</li>\n</ul>\n</div>\n<div id=\"inplace-migrator\">\n<h3><a href=\"#id90\" rel=\"nofollow\">Inplace Migrator</a></h3>\n<p>The inplace migrator provides a fast and easy way for migrating content in\nupgrade steps.\nIt can be used for example to migrate from Archetypes to Dexterity.</p>\n<p>The difference between Plone\u2019s standard migration and the inplace migration\nis that the standard migration creates a new sibling and moves the children\nand the inplace migration simply replaces the objects within the tree and\nattaches the children to the new parent.\nThis is a much faster approach since no move / rename events are fired.</p>\n<p>Example usage:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade</span> <span class=\"kn\">import</span> <span class=\"n\">UpgradeStep</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade.migration</span> <span class=\"kn\">import</span> <span class=\"n\">InplaceMigrator</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MigrateContentPages</span><span class=\"p\">(</span><span class=\"n\">UpgradeStep</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">install_upgrade_profile</span><span class=\"p\">()</span>\n\n        <span class=\"n\">migrator</span> <span class=\"o\">=</span> <span class=\"n\">InplaceMigrator</span><span class=\"p\">(</span>\n            <span class=\"n\">new_portal_type</span><span class=\"o\">=</span><span class=\"s1\">'DXContentPage'</span><span class=\"p\">,</span>\n            <span class=\"n\">field_mapping</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'content'</span><span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">({</span><span class=\"s1\">'portal_type'</span><span class=\"p\">:</span> <span class=\"s1\">'ATContentPage'</span><span class=\"p\">},</span>\n                                <span class=\"s1\">'Migrate content pages to dexterity'</span><span class=\"p\">):</span>\n            <span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">migrate_object</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><tt>new_portal_type</tt> (required): The portal_type name of the destination type.</li>\n<li><tt>field_mapping</tt>: A mapping of old fieldnames to new fieldnames.</li>\n<li><tt>options</tt>: One or many options (binary flags).</li>\n<li><tt>ignore_fields</tt>: A list of fields which should be ignored.</li>\n<li><tt>attributes_to_migrate</tt>: A list of attributes (not fields!) which should be\ncopied from the old to the new object. This defaults to\n<tt>DEFAULT_ATTRIBUTES_TO_COPY</tt>.</li>\n</ul>\n<p><strong>Options:</strong></p>\n<p>The options are binary flags: multiple options can be or-ed.\nExample:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade.migration</span> <span class=\"kn\">import</span> <span class=\"n\">IGNORE_STANDARD_FIELD_MAPPING</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade.migration</span> <span class=\"kn\">import</span> <span class=\"n\">IGNORE_UNMAPPED_FIELDS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade.migration</span> <span class=\"kn\">import</span> <span class=\"n\">InplaceMigrator</span>\n\n <span class=\"n\">migrator</span> <span class=\"o\">=</span> <span class=\"n\">InplaceMigrator</span><span class=\"p\">(</span>\n     <span class=\"s1\">'DXContentPage'</span><span class=\"p\">,</span>\n     <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">IGNORE_UNMAPPED_FIELDS</span> <span class=\"o\">|</span> <span class=\"n\">IGNORE_STANDARD_FIELD_MAPPING</span><span class=\"p\">,</span>\n <span class=\"p\">})</span>\n</pre>\n<ul>\n<li><tt>DISABLE_FIELD_AUTOMAPPING</tt>: by default, fields with the same name on the\nold and the new implementation are automatically mapped. This flags disables\nthe automatic mapping.</li>\n<li><tt>IGNORE_UNMAPPED_FIELDS</tt>: by default, a <tt>FieldsNotMappedError</tt> is raised\nwhen unmapped fields are detected. This flags disables this behavior and\nunmapped fields are simply ignored.</li>\n<li><tt>BACKUP_AND_IGNORE_UNMAPPED_FIELDS</tt>: ignores unmapped fields but stores the\nvalues of unmapped fields in the annotations of the new object (using the\nkey from the constant <tt>UNMAPPED_FIELDS_BACKUP_ANN_KEY</tt>), so that the values\ncan be handled later. This is useful when having additional fields (schema\nextender).</li>\n<li><tt>IGNORE_STANDARD_FIELD_MAPPING</tt> by default, the <tt>STANDARD_FIELD_MAPPING</tt>\nis merged into each field mapping, containing standard Plone field mappings\nfrom Archetypes to Dexterity. This flag disables this behavior.</li>\n<li><tt>IGNORE_DEFAULT_IGNORE_FIELDS</tt> by default, the fields listed in\n<tt>DEFAULT_IGNORED_FIELDS</tt> are skipped. This flag disables this behavior.</li>\n<li><tt>SKIP_MODIFIED_EVENT</tt> when <cite>True</cite>, no modified event is triggered.</li>\n</ul>\n</div>\n</div>\n<div id=\"upgrade-directories\">\n<h2><a href=\"#id91\" rel=\"nofollow\">Upgrade directories</a></h2>\n<p>The <tt><span class=\"pre\">upgrade-step:directory</span></tt> ZCML directive allows us to use a new upgrade step\ndefinition syntax with these <strong>advantages</strong>:</p>\n<ul>\n<li>The directory is once registered (ZCML) and automatically scanned at Zope boot time.\nThis <em>reduces the ZCML</em> used for each upgrade step\nand avoids the redundancy created by having to specify the profile version in multiple places.</li>\n<li>Timestamps are used instead of version numbers.\nBecause of that we have <em>less merge-conflicts</em>.</li>\n<li>The version in the profile\u2019s <tt>metadata.xml</tt> is removed and dynamically set\nat Zope boot time to the version of the latest upgrade step.\nWe no longer have to maintain this version in upgrades.</li>\n<li>Each upgrade is automatically a Generic Setup profile.\nAn instance of the <tt>UpgradeStep</tt> class knows which profile it belongs to,\nand that profile can easily be imported with <tt>self.install_upgrade_profile()</tt>.\n<tt>self.install_upgrade_profile()</tt>.</li>\n<li>The <tt><span class=\"pre\">manage-upgrades</span></tt> view shows us when we have accidentally merged upgrade steps\nwith older timestamps than already executed upgrade steps.\nThis helps us detect a long-term-branch merge problem.</li>\n</ul>\n<div id=\"setting-up-an-upgrade-directory\">\n<h3><a href=\"#id92\" rel=\"nofollow\">Setting up an upgrade directory</a></h3>\n<ul>\n<li>Register an upgrade directory for your profile (e.g. <tt>my/package/configure.zcml</tt>):</li>\n</ul>\n<pre><span class=\"nt\">&lt;configure</span>\n    <span class=\"na\">xmlns=</span><span class=\"s\">\"http://namespaces.zope.org/zope\"</span>\n    <span class=\"na\">xmlns:upgrade-step=</span><span class=\"s\">\"http://namespaces.zope.org/ftw.upgrade\"</span>\n    <span class=\"na\">i18n_domain=</span><span class=\"s\">\"my.package\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;include</span> <span class=\"na\">package=</span><span class=\"s\">\"ftw.upgrade\"</span> <span class=\"na\">file=</span><span class=\"s\">\"meta.zcml\"</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;upgrade-step:directory</span>\n        <span class=\"na\">profile=</span><span class=\"s\">\"my.package:default\"</span>\n        <span class=\"na\">directory=</span><span class=\"s\">\"./upgrades\"</span>\n        <span class=\"nt\">/&gt;</span>\n\n<span class=\"nt\">&lt;/configure&gt;</span>\n</pre>\n<ul>\n<li>Create the configured upgrade step directory (e.g. <tt>my/package/upgrades</tt>) and put an\nempty <tt>__init__.py</tt> in this directory (prevents some python import warnings).</li>\n<li>Remove the version from the <tt>metadata.xml</tt> of the profile for which this upgrade step\ndirectory is configured (e.g. <tt>my/package/profiles/default/metadata.xml</tt>):</li>\n</ul>\n<pre><span class=\"cp\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"nt\">&lt;metadata&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>profile-other.package:default<span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/metadata&gt;</span>\n</pre>\n</div>\n<div id=\"declare-upgrades-soft-dependencies\">\n<h3><a href=\"#id93\" rel=\"nofollow\">Declare upgrades soft dependencies</a></h3>\n<p>When having optional dependencies (<tt>extras_require</tt>), we sometimes need to tell\n<tt>ftw.upgrade</tt> that our optional dependency\u2019s upgrades needs to be installed\nbefore our upgrades are installed.</p>\n<p>We do that by declare a soft dependency in the <tt><span class=\"pre\">upgrade-step:directory</span></tt>\ndirective.\nIt is possible to declare multiple dependencies by separating them\nwith whitespace.</p>\n<pre><span class=\"nt\">&lt;configure</span>\n    <span class=\"na\">xmlns=</span><span class=\"s\">\"http://namespaces.zope.org/zope\"</span>\n    <span class=\"na\">xmlns:upgrade-step=</span><span class=\"s\">\"http://namespaces.zope.org/ftw.upgrade\"</span>\n    <span class=\"na\">i18n_domain=</span><span class=\"s\">\"my.package\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;include</span> <span class=\"na\">package=</span><span class=\"s\">\"ftw.upgrade\"</span> <span class=\"na\">file=</span><span class=\"s\">\"meta.zcml\"</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;upgrade-step:directory</span>\n        <span class=\"na\">profile=</span><span class=\"s\">\"my.package:default\"</span>\n        <span class=\"na\">directory=</span><span class=\"s\">\"./upgrades\"</span>\n        <span class=\"na\">soft_dependencies=</span><span class=\"s\">\"other.package:default\n                           collective.fancy:default\"</span>\n        <span class=\"nt\">/&gt;</span>\n\n<span class=\"nt\">&lt;/configure&gt;</span>\n</pre>\n</div>\n<div id=\"creating-an-upgrade-step\">\n<h3><a href=\"#id94\" rel=\"nofollow\">Creating an upgrade step</a></h3>\n<p>Upgrade steps can be generated with <tt>ftw.upgrade</tt>\u2019s <tt>bin/upgrade</tt> console script.\nThe idea is to install this script with buildout using\n<a href=\"https://pypi.org/project/zc.recipe.egg/\" rel=\"nofollow\">zc.recipe.egg</a>.</p>\n<p>Once installed, upgrade steps can simply be scaffolded with the script:</p>\n<pre>$ bin/upgrade create AddControlpanelAction\n</pre>\n<p>The <tt>create</tt> command searches for your <tt>upgrades</tt> directory by resolving the\n<tt><span class=\"pre\">*.egg-info/top_level.txt</span></tt> file. If you have no egg-infos or your upgrades directory is\nnamed differently the automatic discovery does not work and you can provide the\npath to the upgrades directory using the <tt><span class=\"pre\">--path</span></tt> argument.</p>\n<div>\n<p>Global create-upgrade script</p>\n<p>The\n<a href=\"https://github.com/4teamwork/ftw.upgrade/blob/master/scripts/create-upgrade\" rel=\"nofollow\">create-upgrade</a>\nscript helps you create upgrade steps in any directory (also when not named <tt>upgrades</tt>).\nDownload it and place it somewhere in your <tt>PATH</tt>, cd into the directory and create an upgrade\nstep: <tt><span class=\"pre\">create-upgrade</span> add_control_panel_action</tt>.</p>\n</div>\n<p>If you would like to have colorized output in the terminal, you can install\nthe <tt>colors</tt> extras (<tt>ftw.upgrade[colors]</tt>).</p>\n</div>\n<div id=\"reordering-upgrade-steps\">\n<h3><a href=\"#id95\" rel=\"nofollow\">Reordering upgrade steps</a></h3>\n<p>The <tt>bin/upgrade</tt> console script provides a <tt>touch</tt> for reordering generated upgrade steps.\nWith the optional arguments <tt><span class=\"pre\">--before</span></tt> and <tt><span class=\"pre\">--after</span></tt> upgrade steps can be moved to a specific\nposition.\nWhen the optional arguments are omitted, the upgrade step timestamp is set to the current time.</p>\n<p>Examples:</p>\n<pre>$ bin/upgrade touch upgrades/20141218093045_add_controlpanel_action\n$ bin/upgrade touch 20141218093045_add_controlpanel_action --before 20141220181500_update_registry\n$ bin/upgrade touch 20141218093045_add_controlpanel_action --after 20141220181500_update_registry\n</pre>\n</div>\n<div id=\"creating-an-upgrade-step-manually\">\n<h3><a href=\"#id96\" rel=\"nofollow\">Creating an upgrade step manually</a></h3>\n<ul>\n<li>Create a directory for the upgrade step in the upgrades directory.\nThe directory name must contain a timestamp and a description, concatenated by an underscore,\ne.g. <tt>YYYYMMDDHHMMII_description_of_what_is_done</tt>:</li>\n</ul>\n<pre>$ mkdir my/package/upgrades/20141218093045_add_controlpanel_action\n</pre>\n<ul>\n<li>Next, create the upgrade step code in an <tt>upgrade.py</tt> in the above directory.\nThis file needs to be created, otherwise the upgrade step is not registered.</li>\n</ul>\n<pre><span class=\"c1\"># my/package/upgrades/20141218093045_add_controlpanel_action/upgrade.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade</span> <span class=\"kn\">import</span> <span class=\"n\">UpgradeStep</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AddControlPanelAction</span><span class=\"p\">(</span><span class=\"n\">UpgradeStep</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Adds a new control panel action for the package.\n    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># maybe do something</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">install_upgrade_profile</span><span class=\"p\">()</span>\n        <span class=\"c1\"># maybe do something</span>\n</pre>\n<blockquote>\n<ul>\n<li>You must inherit from <tt>UpgradeStep</tt>.</li>\n<li>Give your class a proper name, although it does not show up anywhere.</li>\n<li>Add a descriptive docstring to the class, the first consecutive lines are\nused as upgrade step description.</li>\n<li>Do not forget to execute <tt>self.install_upgrade_profile()</tt> if you have Generic Setup based\nchanges in your upgrade.</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>Put Generic Setup files in the same upgrade step directory, it automatically acts as a\nGeneric Setup profile just for this upgrade step.\nThe <tt>install_upgrade_profile</tt> knows what to import.</p>\n<p>For our example this means we put a file at\n<tt>my/package/upgrades/20141218093045_add_controlpanel_action/controlpanel.xml</tt>\nwhich adds the new control panel action.</p>\n</li>\n</ul>\n<p>The resulting directory structure should be something like this:</p>\n<pre>my/\n  package/\n    configure.zcml                              # registers the profile and the upgrade directory\n    upgrades/                                   # contains the upgrade steps\n      __init__.py                               # prevents python import warnings\n      20141218093045_add_controlpanel_action/   # our first upgrade step\n        upgrade.py                              # should contain an ``UpgradeStep`` subclass\n        controlpanel.xml                        # Generic Setup data to import\n      20141220181500_update_registry/           # another upgrade step\n        upgrade.py\n        *.xml\n    profiles/\n      default/                                  # the default Generic Setup profile\n        metadata.xml\n</pre>\n</div>\n<div id=\"deferrable-upgrades\">\n<h3><a href=\"#id97\" rel=\"nofollow\">Deferrable upgrades</a></h3>\n<p>Deferrable upgrades are a special type of upgrade that can be omitted on\ndemand. They still will be proposed and installed by default but can be\nexcluded from installation by setting a flag.\nDeferrable upgrades can be used to decouple upgrades that need not be run right\nnow, but only eventually, from the critical upgrade path. This can be\nparticularly useful for long running data migrations or for fix-scripts.</p>\n<p>Upgrade-steps can be marked as deferrable by setting a class attribute\n<tt>deferrable</tt> on a subclass of <tt>UpgradeStep</tt>:</p>\n<pre><span class=\"c1\"># my/package/upgrades/20180709135657_long_running_upgrade/upgrade.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade</span> <span class=\"kn\">import</span> <span class=\"n\">UpgradeStep</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LongRunningUpgrade</span><span class=\"p\">(</span><span class=\"n\">UpgradeStep</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Potentially long running upgrade which is deferrable.\n    \"\"\"</span>\n    <span class=\"n\">deferrable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>When you install upgrades from the command line, you can skip the installation\nof deferred upgrade steps with:</p>\n<pre>$ bin/upgrade install -s plone --proposed --skip-deferrable\n</pre>\n<p>When you install upgrades with the <tt><span class=\"pre\">@@manage-upgrades</span></tt> view, deferrable\nupgrade steps show an additional icon and can be deselected manually.</p>\n</div>\n</div>\n<div id=\"json-api\">\n<h2><a href=\"#id98\" rel=\"nofollow\">JSON API</a></h2>\n<p>The JSON API allows to get profiles and upgrades for a Plone site and execute upgrades.</p>\n<div id=\"authentication-and-authorization\">\n<h3><a href=\"#id99\" rel=\"nofollow\">Authentication and authorization</a></h3>\n<p>The API is available for users with the \u201ccmf.ManagePortal\u201d permission, usually the \u201cManager\u201d\nrole is required.</p>\n</div>\n<div id=\"versioning\">\n<h3><a href=\"#id100\" rel=\"nofollow\">Versioning</a></h3>\n<p>A specific API version can be requested by adding the version to the URL. Example:</p>\n<pre>$ curl -uadmin:admin http://localhost:8080/upgrades-api/v1/list_plone_sites\n</pre>\n</div>\n<div id=\"api-discovery\">\n<h3><a href=\"#id101\" rel=\"nofollow\">API Discovery</a></h3>\n<p>The API is discoverable and self descriptive.\nThe API description is returned when the API action is omitted:</p>\n<pre>$ curl -uadmin:admin http://localhost:8080/upgrades-api/\n<span class=\"o\">{</span>\n    <span class=\"s2\">\"api_version\"</span>: <span class=\"s2\">\"v1\"</span>,\n    <span class=\"s2\">\"actions\"</span>: <span class=\"o\">[</span>\n        <span class=\"o\">{</span>\n            <span class=\"s2\">\"request_method\"</span>: <span class=\"s2\">\"GET\"</span>,\n            <span class=\"s2\">\"required_params\"</span>: <span class=\"o\">[]</span>,\n            <span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"current_user\"</span>,\n            <span class=\"s2\">\"description\"</span>: <span class=\"s2\">\"Return the current user when authenticated properly. This can be used for testing authentication.\"</span>\n        <span class=\"o\">}</span>,\n        <span class=\"o\">{</span>\n            <span class=\"s2\">\"request_method\"</span>: <span class=\"s2\">\"GET\"</span>,\n            <span class=\"s2\">\"required_params\"</span>: <span class=\"o\">[]</span>,\n            <span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"list_plone_sites\"</span>,\n            <span class=\"s2\">\"description\"</span>: <span class=\"s2\">\"Returns a list of Plone sites.\"</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n$ curl -uadmin:admin http://localhost:8080/Plone/upgrades-api/\n...\n</pre>\n</div>\n<div id=\"listing-plone-sites\">\n<h3><a href=\"#id102\" rel=\"nofollow\">Listing Plone sites:</a></h3>\n<pre>$ curl -uadmin:admin http://localhost:8080/upgrades-api/list_plone_sites\n<span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n        <span class=\"s2\">\"path\"</span>: <span class=\"s2\">\"/Plone\"</span>,\n        <span class=\"s2\">\"id\"</span>: <span class=\"s2\">\"Plone\"</span>,\n        <span class=\"s2\">\"title\"</span>: <span class=\"s2\">\"Website\"</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"listing-profiles-and-upgrades\">\n<h3><a href=\"#id103\" rel=\"nofollow\">Listing profiles and upgrades</a></h3>\n<div id=\"list-all-profiles\">\n<h4><a href=\"#id104\" rel=\"nofollow\">List all profiles</a></h4>\n<p>Listing all installed Generic Setup profiles with upgrades for a Plone site:</p>\n<pre>$ curl -uadmin:admin http://localhost:8080/Plone/upgrades-api/list_profiles\n<span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n        <span class=\"s2\">\"id\"</span>: <span class=\"s2\">\"Products.CMFEditions:CMFEditions\"</span>,\n        <span class=\"s2\">\"db_version\"</span>: <span class=\"s2\">\"4\"</span>,\n        <span class=\"s2\">\"product\"</span>: <span class=\"s2\">\"Products.CMFEditions\"</span>,\n        <span class=\"s2\">\"title\"</span>: <span class=\"s2\">\"CMFEditions\"</span>,\n        <span class=\"s2\">\"outdated_fs_version\"</span>: false,\n        <span class=\"s2\">\"fs_version\"</span>: <span class=\"s2\">\"4\"</span>,\n        <span class=\"s2\">\"upgrades\"</span>: <span class=\"o\">[</span>\n            <span class=\"o\">{</span>\n                <span class=\"s2\">\"proposed\"</span>: false,\n                <span class=\"s2\">\"title\"</span>: <span class=\"s2\">\"Fix portal_historyidhandler\"</span>,\n                <span class=\"s2\">\"outdated_fs_version\"</span>: false,\n                <span class=\"s2\">\"orphan\"</span>: false,\n                <span class=\"s2\">\"deferred\"</span>: false,\n                <span class=\"s2\">\"dest\"</span>: <span class=\"s2\">\"3\"</span>,\n                <span class=\"s2\">\"done\"</span>: true,\n                <span class=\"s2\">\"source\"</span>: <span class=\"s2\">\"2.0\"</span>,\n                <span class=\"s2\">\"id\"</span>: <span class=\"s2\">\"3@Products.CMFEditions:CMFEditions\"</span>\n            <span class=\"o\">}</span>,\n\n...\n</pre>\n</div>\n<div id=\"get-a-profile\">\n<h4><a href=\"#id105\" rel=\"nofollow\">Get a profile</a></h4>\n<p>Listing a single profile and its upgrades:</p>\n<pre>$ curl -uadmin:admin <span class=\"s2\">\"http://localhost:8080/Plone/upgrades-api/get_profile?profileid=Products.TinyMCE:TinyMCE\"</span>\n<span class=\"o\">{</span>\n    <span class=\"s2\">\"id\"</span>: <span class=\"s2\">\"Products.TinyMCE:TinyMCE\"</span>,\n    <span class=\"s2\">\"db_version\"</span>: <span class=\"s2\">\"7\"</span>,\n    <span class=\"s2\">\"product\"</span>: <span class=\"s2\">\"Products.TinyMCE\"</span>,\n    <span class=\"s2\">\"title\"</span>: <span class=\"s2\">\"TinyMCE Editor Support\"</span>,\n    <span class=\"s2\">\"outdated_fs_version\"</span>: false,\n    <span class=\"s2\">\"fs_version\"</span>: <span class=\"s2\">\"7\"</span>,\n    <span class=\"s2\">\"upgrades\"</span>: <span class=\"o\">[</span>\n        <span class=\"o\">{</span>\n            <span class=\"s2\">\"proposed\"</span>: false,\n            <span class=\"s2\">\"title\"</span>: <span class=\"s2\">\"Upgrade TinyMCE\"</span>,\n            <span class=\"s2\">\"outdated_fs_version\"</span>: false,\n            <span class=\"s2\">\"orphan\"</span>: false,\n            <span class=\"s2\">\"deferred\"</span>: false,\n            <span class=\"s2\">\"dest\"</span>: <span class=\"s2\">\"1.1\"</span>,\n            <span class=\"s2\">\"done\"</span>: true,\n            <span class=\"s2\">\"source\"</span>: <span class=\"s2\">\"1.0\"</span>,\n            <span class=\"s2\">\"id\"</span>: <span class=\"s2\">\"1.1@Products.TinyMCE:TinyMCE\"</span>\n        <span class=\"o\">}</span>,\n...\n</pre>\n</div>\n<div id=\"list-proposed-profiles\">\n<h4><a href=\"#id106\" rel=\"nofollow\">List proposed profiles</a></h4>\n<p>Listing all profiles proposing upgrades, each profile only including upgrades which\nare propsosed:</p>\n<pre>$ curl -uadmin:admin http://localhost:8080/Plone/upgrades-api/list_profiles_proposing_upgrades\n...\n</pre>\n</div>\n<div id=\"list-proposed-upgrades\">\n<h4><a href=\"#id107\" rel=\"nofollow\">List proposed upgrades</a></h4>\n<p>Listing all proposed upgrades without the wrapping profile infos:</p>\n<pre>$ curl -uadmin:admin http://localhost:8080/Plone/upgrades-api/list_proposed_upgrades\n<span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n        <span class=\"s2\">\"proposed\"</span>: true,\n        <span class=\"s2\">\"title\"</span>: <span class=\"s2\">\"Foo.\"</span>,\n        <span class=\"s2\">\"outdated_fs_version\"</span>: false,\n        <span class=\"s2\">\"orphan\"</span>: true,\n        <span class=\"s2\">\"deferred\"</span>: false,\n        <span class=\"s2\">\"dest\"</span>: <span class=\"s2\">\"20150114104527\"</span>,\n        <span class=\"s2\">\"done\"</span>: false,\n        <span class=\"s2\">\"source\"</span>: <span class=\"s2\">\"10000000000000\"</span>,\n        <span class=\"s2\">\"id\"</span>: <span class=\"s2\">\"20150114104527@ftw.upgrade:default\"</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">]</span>\n</pre>\n</div>\n</div>\n<div id=\"executing-upgrades\">\n<h3><a href=\"#id108\" rel=\"nofollow\">Executing upgrades</a></h3>\n<p>When executing upgrades the response is not of type JSON but a streamed upgrade log.\nIf the request is correct, the response status will always be 200 OK, no matter whether\nthe upgrades will install correctly or not.\nIf an upgrade fails, the request and the transaction is aborted and the response content\nwill end with \u201cResult: FAILUREn\u201d.\nIf the upgrade succeeds, the response content will end with \u201cResult: SUCCESSn\u201d.</p>\n<div id=\"executing-selected-upgrades\">\n<h4><a href=\"#id109\" rel=\"nofollow\">Executing selected upgrades</a></h4>\n<p>Selected upgrades can be executed by their API-ID (format: \u201c&lt;dest&gt;@&lt;profileid&gt;\u201d).\nWhen upgrade groups are used the API-ID is kind of ambiguous and identifies / installs all\nupgrade steps of the same profile with the same target version.</p>\n<p>All upgrade steps are reordered to the installation order proposed by ftw.upgrade.\nIt is not possible to change the order within one request, use multiple requests for\nunproposed installation order.\nThe installation order is done by topogically ordering the profiles by their dependencies\nand ordering the upgrades within each profile by their target version.</p>\n<p>Example for executing a selected set of upgrades:</p>\n<pre>$ curl -uadmin:admin -X POST <span class=\"s2\">\"http://localhost:8080/Plone/upgrades-api/execute_upgrades?upgrades:list=7@Products.TinyMCE:TinyMCE&amp;upgrades:list=20150114104527@ftw.upgrade:default\"</span>\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:16:14 INFO ftw.upgrade ______________________________________________________________________\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:16:14 INFO ftw.upgrade UPGRADE STEP Products.TinyMCE:TinyMCE: Upgrade TinyMCE <span class=\"m\">1</span>.3.4 to <span class=\"m\">1</span>.3.5\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:16:14 INFO ftw.upgrade Ran upgrade step Upgrade TinyMCE <span class=\"m\">1</span>.3.4 to <span class=\"m\">1</span>.3.5 <span class=\"k\">for</span> profile Products.TinyMCE:TinyMCE\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:16:14 INFO ftw.upgrade Upgrade step duration: <span class=\"m\">1</span> second\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:16:14 INFO ftw.upgrade ______________________________________________________________________\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:16:14 INFO ftw.upgrade UPGRADE STEP ftw.upgrade:default: Foo.\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:16:14 INFO GenericSetup.rolemap Role / permission map imported.\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:16:14 INFO GenericSetup.archetypetool Archetype tool imported.\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:16:14 INFO ftw.upgrade Ran upgrade step Foo. <span class=\"k\">for</span> profile ftw.upgrade:default\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:16:14 INFO ftw.upgrade Upgrade step duration: <span class=\"m\">1</span> second\nResult: SUCCESS\n</pre>\n</div>\n<div id=\"execute-all-proposed-upgrades\">\n<h4><a href=\"#id110\" rel=\"nofollow\">Execute all proposed upgrades</a></h4>\n<p>Example for executing all proposed upgrades of a Plone site:</p>\n<pre>$ curl -uadmin:admin -X POST http://localhost:8080/Plone/upgrades-api/execute_proposed_upgrades\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:17:34 INFO ftw.upgrade ______________________________________________________________________\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:17:34 INFO ftw.upgrade UPGRADE STEP ftw.upgrade:default: Bar.\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:17:35 INFO GenericSetup.rolemap Role / permission map imported.\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:17:35 INFO GenericSetup.archetypetool Archetype tool imported.\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:17:35 INFO ftw.upgrade Ran upgrade step Bar. <span class=\"k\">for</span> profile ftw.upgrade:default\n<span class=\"m\">2015</span>-01-14 <span class=\"m\">11</span>:17:35 INFO ftw.upgrade Upgrade step duration: <span class=\"m\">1</span> second\nResult: SUCCESS\n</pre>\n</div>\n<div id=\"installing-profiles\">\n<h4><a href=\"#id111\" rel=\"nofollow\">Installing profiles</a></h4>\n<p>You can install complete profiles.  When the profile is already\ninstalled, nothing is done.  Usually you will want to install the\ndefault profile, but it is fine to install an uninstall profile.</p>\n<p>Note that we do nothing with the <tt>portal_quickinstaller</tt>.  So if you\ninstall an uninstall profile, you may still see the product as\ninstalled.  But for default profiles everything works as you would\nexpect.</p>\n<p>Example for installing PloneFormGen (which was not installed yet) and\nftw.upgrade (which was already installed):</p>\n<pre>$ curl -uadmin:admin -X POST <span class=\"s2\">\"http://localhost:8080/Plone/upgrades-api/execute_profiles?profiles:list=Products.PloneFormGen:default&amp;profiles:list=ftw.upgrade:default\"</span>\n<span class=\"m\">2016</span>-01-05 <span class=\"m\">13</span>:09:46 INFO ftw.upgrade Installing profile Products.PloneFormGen:default.\n<span class=\"m\">2016</span>-01-05 <span class=\"m\">13</span>:09:46 INFO GenericSetup.rolemap Role / permission map imported.\n...\n<span class=\"m\">2016</span>-01-05 <span class=\"m\">13</span>:09:48 INFO GenericSetup.types <span class=\"s1\">'FieldsetEnd'</span> <span class=\"nb\">type</span> info imported.\n<span class=\"m\">2016</span>-01-05 <span class=\"m\">13</span>:09:48 INFO GenericSetup.factorytool FactoryTool settings imported.\n<span class=\"m\">2016</span>-01-05 <span class=\"m\">13</span>:09:48 INFO ftw.upgrade Done installing profile Products.PloneFormGen:default.\n<span class=\"m\">2016</span>-01-05 <span class=\"m\">13</span>:09:48 INFO ftw.upgrade Ignoring already installed profile ftw.upgrade:default.\nResult: SUCCESS\n</pre>\n<p>By default, already installed profiles are skipped.\nWhen supplying the <tt>force_reinstall=True</tt> request parameter,\nalready installed profiles will be reinstalled.</p>\n</div>\n<div id=\"upgrading-plone\">\n<h4><a href=\"#id112\" rel=\"nofollow\">Upgrading Plone</a></h4>\n<p>You can migrate your Plone Site.  This is what you would manually do\nin the @@plone-upgrade view, which is linked to in the overview\ncontrol panel (or the ZMI) when your Plone Site needs updating.</p>\n<p>Example for upgrading Plone:</p>\n<pre>$ curl -uadmin:admin -X POST <span class=\"s2\">\"http://localhost:8080/test/upgrades-api/plone_upgrade\"</span>\n<span class=\"s2\">\"Plone Site has been updated.\"</span>\n</pre>\n<p>Example for upgrading Plone when no upgrade is needed:</p>\n<pre>$ curl -uadmin:admin -X POST <span class=\"s2\">\"http://localhost:8080/test/upgrades-api/plone_upgrade\"</span>\n<span class=\"s2\">\"Plone Site was already up to date.\"</span>\n</pre>\n<p>For checking whether a Plone upgrade is needed, you can do:</p>\n<pre>$ curl -uadmin:admin -X POST <span class=\"s2\">\"http://localhost:8080/test/upgrades-api/plone_upgrade_needed\"</span>\n</pre>\n</div>\n</div>\n<div id=\"recook-resources\">\n<h3><a href=\"#id113\" rel=\"nofollow\">Recook resources</a></h3>\n<p>CSS and JavaScript resource bundles can be recooked:</p>\n<pre>$ curl -uadmin:admin -X POST http://localhost:8080/Plone/upgrades-api/recook_resources\n<span class=\"s2\">\"OK\"</span>\n</pre>\n</div>\n<div id=\"combine-bundles\">\n<h3><a href=\"#id114\" rel=\"nofollow\">Combine bundles</a></h3>\n<p>CSS and JavaScript bundles can be combined:</p>\n<pre>$ curl -uadmin:admin -X POST http://localhost:8080/Plone/upgrades-api/combine_bundles\n<span class=\"s2\">\"OK\"</span>\n</pre>\n<p>This is for Plone 5 or higher.\nThis runs the same code that runs when you import a profile that makes changes in the resource registries.</p>\n</div>\n</div>\n<div id=\"import-profile-upgrade-steps\">\n<h2><a href=\"#id115\" rel=\"nofollow\">Import-Profile Upgrade Steps</a></h2>\n<p>Sometimes an upgrade step consists solely of importing a purpose-made generic setup\nprofile. Creating such upgrade steps are often much simpler than doing\nthe change in python, because we can simply copy the necessary parts of the new\ndefault generic setup profile into the upgrade step profile.</p>\n<p>Normally to do this, we would have to register an upgrade step and a Generic Setup\nprofile and write an upgrade step handler importing the profile.</p>\n<p>ftw.upgrade makes this much simpler by providing an <tt>importProfile</tt> ZCML directive\nspecifically for this use case.</p>\n<p>Example <tt>configure.zcml</tt> meant to be placed in your <tt>upgrades</tt> sub-package:</p>\n<pre><span class=\"nt\">&lt;configure</span>\n    <span class=\"na\">xmlns=</span><span class=\"s\">\"http://namespaces.zope.org/zope\"</span>\n    <span class=\"na\">xmlns:upgrade-step=</span><span class=\"s\">\"http://namespaces.zope.org/ftw.upgrade\"</span>\n    <span class=\"na\">i18n_domain=</span><span class=\"s\">\"my.package\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;include</span> <span class=\"na\">package=</span><span class=\"s\">\"ftw.upgrade\"</span> <span class=\"na\">file=</span><span class=\"s\">\"meta.zcml\"</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;upgrade-step:importProfile</span>\n        <span class=\"na\">title=</span><span class=\"s\">\"Update email_from_address\"</span>\n        <span class=\"na\">profile=</span><span class=\"s\">\"my.package:default\"</span>\n        <span class=\"na\">source=</span><span class=\"s\">\"1007\"</span>\n        <span class=\"na\">destination=</span><span class=\"s\">\"1008\"</span>\n        <span class=\"na\">directory=</span><span class=\"s\">\"profiles/1008\"</span>\n        <span class=\"nt\">/&gt;</span>\n\n<span class=\"nt\">&lt;/configure&gt;</span>\n</pre>\n<p>This example upgrade step updates the <tt>email_from_address</tt> property.</p>\n<p>A generic setup profile is automatically registered and hooked up with the\ngenerated upgrade step handler.</p>\n<p>Simply put a <tt>properties.xml</tt> in the folder <tt>profiles/1008</tt> relative to the\nabove <tt>configure.zcml</tt> and the upgrade step is ready for deployment.</p>\n<p>Optionally, a <tt>handler</tt> may be defined.\nThe handler, a subclass of <tt>UpgradeStep</tt>, can import the associated generic\nsetup profile with <tt>self.install_upgrade_profile()</tt>.</p>\n</div>\n<div id=\"ipostupgrade-adapter\">\n<h2><a href=\"#id116\" rel=\"nofollow\">IPostUpgrade adapter</a></h2>\n<p>By registering an <tt>IPostUpgrade</tt> adapter it is possible to run custom code\nafter running upgrades.\nAll adapters are executed after each time upgrades were run, regardless of\nwhich upgrades are run.\nThe name of the adapters should be the profile of the package, so that\n<tt>ftw.upgrade</tt> is able to execute the adapters in order of the GS dependencies.</p>\n<p>Example adapter:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IPostUpgrade</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implements</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyPostUpgradeAdapter</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">implements</span><span class=\"p\">(</span><span class=\"n\">IPostUpgrade</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">portal</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">portal</span> <span class=\"o\">=</span> <span class=\"n\">portal</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># custom code, e.g. import a generic setup profile for customizations</span>\n</pre>\n<p>Registration in ZCML:</p>\n<pre><span class=\"nt\">&lt;configure</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://namespaces.zope.org/zope\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;adapter</span>\n        <span class=\"na\">factory=</span><span class=\"s\">\".adapters.MyPostUpgradeAdapter\"</span>\n        <span class=\"na\">provides=</span><span class=\"s\">\"ftw.upgrade.interfaces.IPostUpgrade\"</span>\n        <span class=\"na\">for=</span><span class=\"s\">\"Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot\n             zope.interface.Interface\"</span>\n        <span class=\"na\">name=</span><span class=\"s\">\"my.package:default\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/configure&gt;</span>\n</pre>\n</div>\n<div id=\"savepoints\">\n<h2><a href=\"#id117\" rel=\"nofollow\">Savepoints</a></h2>\n<p>Certain iterators of <tt>ftw.upgrade</tt> are wrapped with a <tt>SavepointIterator</tt>,\ncreating savepoints after each batch of items.\nThis allows us to keep the memory footprint low.</p>\n<p>The threshold for the savepoint iterator can be passed to certain methods, such as\n<tt>self.objects</tt> in an upgrade, or it can be configured globally with an environment variable:</p>\n<pre>UPGRADE_SAVEPOINT_THRESHOLD = 1000\n</pre>\n<p>The default savepoint threshold is 1000.</p>\n</div>\n<div id=\"memory-optimization-while-running-upgrades\">\n<h2><a href=\"#id118\" rel=\"nofollow\">Memory optimization while running upgrades</a></h2>\n<p>Zope is optimized for executing many smaller requests.\nThe ZODB pickle cache keeps objects in the memory, so that they can be used for the next\nrequest.</p>\n<p>Running a large upgrade is a long-running request though, increasing the chance of a\nmemory problem.</p>\n<p><tt>ftw.upgrade</tt> tries to optimize the memory usage by creating savepoints and triggering\nthe pickle cache garbage collector.</p>\n<p>In order for this to work properly you should configure your ZODB cache sizes correctly\n(<cite>zodb-cache-size-bytes</cite> or <cite>zodb-cache-size</cite>).</p>\n</div>\n<div id=\"prevent-ftw-upgrade-from-marking-upgrades-as-installed\">\n<h2><a href=\"#id119\" rel=\"nofollow\">Prevent ftw.upgrade from marking upgrades as installed</a></h2>\n<p><tt>ftw.upgrade</tt> automatically marks all upgrade steps of a profile as installed when\nthe full profile is imported. This is important for the initial installation.</p>\n<p>In certain situations you may want to import the profile but not mark the upgrade steps\nas installed. For example this could be done in a big migration project where the default\nmigration path cannot be followed.</p>\n<p>You can do that like this for all generic setup profiles:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade.directory.subscribers</span> <span class=\"kn\">import</span> <span class=\"n\">no_upgrade_step_marking</span>\n\n<span class=\"k\">with</span> <span class=\"n\">no_upgrade_step_marking</span><span class=\"p\">():</span>\n    <span class=\"c1\"># install profile with portal_setup</span>\n</pre>\n<p>or for certain generic setup profiles:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.upgrade.directory.subscribers</span> <span class=\"kn\">import</span> <span class=\"n\">no_upgrade_step_marking</span>\n\n<span class=\"k\">with</span> <span class=\"n\">no_upgrade_step_marking</span><span class=\"p\">(</span><span class=\"s1\">'my.package:default'</span><span class=\"p\">):</span>\n    <span class=\"c1\"># install profile with portal_setup</span>\n</pre>\n</div>\n<div id=\"links\">\n<h2><a href=\"#id120\" rel=\"nofollow\">Links</a></h2>\n<ul>\n<li>Github: <a href=\"https://github.com/4teamwork/ftw.upgrade\" rel=\"nofollow\">https://github.com/4teamwork/ftw.upgrade</a></li>\n<li>Issues: <a href=\"https://github.com/4teamwork/ftw.upgrade/issues\" rel=\"nofollow\">https://github.com/4teamwork/ftw.upgrade/issues</a></li>\n<li>Pypi: <a href=\"https://pypi.org/project/ftw.upgrade/\" rel=\"nofollow\">https://pypi.org/project/ftw.upgrade/</a></li>\n<li>Continuous integration: <a href=\"https://jenkins.4teamwork.ch/search?q=ftw.upgrade\" rel=\"nofollow\">https://jenkins.4teamwork.ch/search?q=ftw.upgrade</a></li>\n</ul>\n</div>\n<div id=\"copyright\">\n<h2><a href=\"#id121\" rel=\"nofollow\">Copyright</a></h2>\n<p>This package is copyright by <a href=\"http://www.4teamwork.ch/\" rel=\"nofollow\">4teamwork</a>.</p>\n<p><tt>ftw.upgrade</tt> is licensed under GNU General Public License, version 2.</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id122\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id123\" rel=\"nofollow\">3.0.0 (2020-03-23)</a></h3>\n<ul>\n<li>Add support for Plone 5.2 and Python 3. [buchi]</li>\n<li>Also look for the instance port number in <tt>wsgi.ini</tt>.  [maurits]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id124\" rel=\"nofollow\">2.16.0 (2020-02-14)</a></h3>\n<ul>\n<li>Allow additional indexes to be reindexed in the WorkflowChainUpdater. [tinagerber]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id125\" rel=\"nofollow\">2.15.2 (2020-01-27)</a></h3>\n<ul>\n<li>Fix missing values in IntIds catalog as we go within migrate_intid(). [djowett-ftw]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id126\" rel=\"nofollow\">2.15.1 (2019-12-16)</a></h3>\n<ul>\n<li>Cleanup broken catalog brains on <cite>NotFound</cite>. [jone]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id127\" rel=\"nofollow\">2.15.0 (2019-12-12)</a></h3>\n<ul>\n<li>Add context manager for disabling upgrade step marking. [jone]</li>\n<li>Do not mark upgrade steps as installed when not doing a full import. [jone]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id128\" rel=\"nofollow\">2.14.1 (2019-11-08)</a></h3>\n<ul>\n<li>Migrate creators even when dublin core behaviors are not enabled. [jone]</li>\n<li>Migrate empty values in RichTextFields correctly.\nFixes <cite>https://github.com/4teamwork/izug.refegovservice/issues/2</cite>. [djowett-ftw]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id129\" rel=\"nofollow\">2.14.0 (2019-10-31)</a></h3>\n<ul>\n<li>Added <tt><span class=\"pre\">--allow-outdated</span></tt> option to <tt>install</tt> command.\nThis allows installing upgrades or profiles on a not up-to-date site.\nFixes <cite>issue 182 &lt;https://github.com/4teamwork/ftw.upgrade/issues/182&gt;</cite>. [maurits]</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id130\" rel=\"nofollow\">2.13.0 (2019-08-22)</a></h3>\n<ul>\n<li>Added combine_bundles command for Plone 5.\nThis combines JS/CSS bundles together.  [maurits]</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id131\" rel=\"nofollow\">2.12.2 (2019-06-19)</a></h3>\n<ul>\n<li>Make sure to always use a portal_migration tool wrapped in a RequestContainer.\n(Fixes \u201cAttributeError: REQUEST\u201d on a Plone 5.1.x upgrade) [lgraf]</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id132\" rel=\"nofollow\">2.12.1 (2019-06-18)</a></h3>\n<ul>\n<li>Choose actual port used by ZServer layer to run CommandAndInstance tests against. [lgraf]</li>\n<li>Disable Diazo on upgrades-plain for Plone 5.1.5 support. [jone]</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id133\" rel=\"nofollow\">2.12.0 (2018-07-26)</a></h3>\n<ul>\n<li>Allow marking upgrades as deferred so they won\u2019t be proposed by default. [deiferni]</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id134\" rel=\"nofollow\">2.11.1 (2018-04-05)</a></h3>\n<ul>\n<li>Fix connection problem when zope.conf contains ip-address. [jone]</li>\n<li>Make sure remove_broken_browserlayer() helper doesn\u2019t fail if the browser\nlayer registration to be removed doesn\u2019t exist (any more). [lgraf]</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id135\" rel=\"nofollow\">2.11.0 (2018-01-31)</a></h3>\n<ul>\n<li>Provide upgrade step handler interfaces and handler class in wrapper. [jone]</li>\n<li>Do not propose executed upgrades newer than current db version. [jone]</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id136\" rel=\"nofollow\">2.10.0 (2018-01-08)</a></h3>\n<ul>\n<li>Support installing proposed upgrades of specific Generic Setup profiles.\nUse <tt>bin/upgrade install <span class=\"pre\">--proposed</span> the.package:default</tt>. [jone]</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3><a href=\"#id137\" rel=\"nofollow\">2.9.0 (2017-12-14)</a></h3>\n<ul>\n<li>Optimize memory footprint after every upgrade step. [jone]</li>\n<li>Reduce memory footprint in SavepointIterator by garbage-collecting connection cache. [jone]</li>\n<li>Set the default savepoint threshold to 1000; make it configurable. [jone]</li>\n<li>Enable savepoint iterator by default. Affects <tt>self.objects</tt>. [jone]</li>\n<li>Use a SavepointIterator in the WorkflowSecurityUpdater in order not to exceed\nmemory. [mbaechtold]</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3><a href=\"#id138\" rel=\"nofollow\">2.8.1 (2017-10-13)</a></h3>\n<ul>\n<li>Also catch AttributeErrors when accessing objects of broken brains. [buchi]</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3><a href=\"#id139\" rel=\"nofollow\">2.8.0 (2017-07-27)</a></h3>\n<ul>\n<li>The upgrade step methods will remove and skip broken catalog brains. [jone]</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3><a href=\"#id140\" rel=\"nofollow\">2.7.2 (2017-07-13)</a></h3>\n<ul>\n<li>Fix encoding issues in ASCII terminals. [jone]</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3><a href=\"#id141\" rel=\"nofollow\">2.7.1 (2017-06-28)</a></h3>\n<ul>\n<li>Fix tempfile authentication when created by different user. [jone]</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3><a href=\"#id142\" rel=\"nofollow\">2.7.0 (2017-06-28)</a></h3>\n<ul>\n<li>Support using <tt>bin/upgrade</tt> by another user than the Zope server\nwith less strict security checks.[jone]</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3><a href=\"#id143\" rel=\"nofollow\">2.6.1 (2017-06-28)</a></h3>\n<ul>\n<li>Fix a bug which caused <tt>bin/upgrade</tt> to fail when the <tt>var</tt> directory\nhad the setguid flag active. [jone]</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3><a href=\"#id144\" rel=\"nofollow\">2.6.0 (2017-06-08)</a></h3>\n<ul>\n<li>Log (re/un)-indexing progress if collective.indexing is installed. [deiferni]</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3><a href=\"#id145\" rel=\"nofollow\">2.5.0 (2017-06-07)</a></h3>\n<ul>\n<li>Add support for Plone 5.1. [jone]</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h3><a href=\"#id146\" rel=\"nofollow\">2.4.0 (2017-06-07)</a></h3>\n<ul>\n<li>Escape &lt; and &gt; in browser logger. [lknoepfel]</li>\n<li>Log current item in ProcessLogger if logger exits unexpectedly. [lknoepfel]</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h3><a href=\"#id147\" rel=\"nofollow\">2.3.1 (2017-02-15)</a></h3>\n<ul>\n<li>Fix bug causing that versions are not properly set after upgrading\nwhen switching versioning system. [jone]</li>\n<li>Avoid overriding customizations by reinstalling already installed\nprofiles while upgrading (Plone&gt;=4.3.8). [jone]</li>\n</ul>\n</div>\n<div id=\"id26\">\n<h3><a href=\"#id148\" rel=\"nofollow\">2.3.0 (2017-02-14)</a></h3>\n<ul>\n<li>InplaceMigrator: Preserve object position in parent. [lknoepfel]</li>\n<li>Do not downgrade installed version when installing an orphan upgrade step. [jone]</li>\n<li>Add \u201csoft_dependencies\u201d option to \u201cupgrade-step:directory\u201d directive. [jone]</li>\n</ul>\n</div>\n<div id=\"id27\">\n<h3><a href=\"#id149\" rel=\"nofollow\">2.2.0 (2017-01-30)</a></h3>\n<ul>\n<li>Add method to remove a previously uninstalled portlet manager from the\npersistent registry.\n[deiferni]</li>\n</ul>\n</div>\n<div id=\"id28\">\n<h3><a href=\"#id150\" rel=\"nofollow\">2.1.1 (2016-12-13)</a></h3>\n<ul>\n<li>Fix support for GS import by tarball upload. [jone]</li>\n</ul>\n</div>\n<div id=\"id29\">\n<h3><a href=\"#id151\" rel=\"nofollow\">2.1.0 (2016-12-06)</a></h3>\n<ul>\n<li>Add upgrade step method <tt>ensure_profile_installed(profileid)</tt>. [jone]</li>\n<li>Add upgrade step method <tt>is_profile_installed(profileid)</tt>. [jone]</li>\n<li>Add upgrade step method <tt>is_product_installed(product_name)</tt>. [jone]</li>\n</ul>\n</div>\n<div id=\"id30\">\n<h3><a href=\"#id152\" rel=\"nofollow\">2.0.5 (2016-10-24)</a></h3>\n<ul>\n<li>Migration: fix error when file obj is an empty string. [jone]</li>\n</ul>\n</div>\n<div id=\"id31\">\n<h3><a href=\"#id153\" rel=\"nofollow\">2.0.4 (2016-10-24)</a></h3>\n<ul>\n<li>Migration: do not migrate empty blobs. [jone]</li>\n</ul>\n</div>\n<div id=\"id32\">\n<h3><a href=\"#id154\" rel=\"nofollow\">2.0.3 (2016-09-27)</a></h3>\n<ul>\n<li>Migration: support all types of standard relation fields. [jone]</li>\n</ul>\n</div>\n<div id=\"id33\">\n<h3><a href=\"#id155\" rel=\"nofollow\">2.0.2 (2016-09-27)</a></h3>\n<ul>\n<li>Migration: skip invalid relations. [jone]</li>\n</ul>\n</div>\n<div id=\"id34\">\n<h3><a href=\"#id156\" rel=\"nofollow\">2.0.1 (2016-09-02)</a></h3>\n<ul>\n<li>Added support for jQuery 1.9+ on @@manage-upgrades control panel. [neilferreira]</li>\n</ul>\n</div>\n<div id=\"id35\">\n<h3><a href=\"#id157\" rel=\"nofollow\">2.0.0 (2016-08-18)</a></h3>\n<ul>\n<li>Fix NoneType AttributeError with newest requests module. [jone]</li>\n<li>Drop Plone 4.1 and 4.2 support. [jone]</li>\n<li>Implement inplace migrator. [jone]</li>\n</ul>\n</div>\n<div id=\"id36\">\n<h3><a href=\"#id158\" rel=\"nofollow\">1.19.0 (2016-04-11)</a></h3>\n<ul>\n<li>Add option to force reinstall already installed profiles. [jone]</li>\n</ul>\n</div>\n<div id=\"id37\">\n<h3><a href=\"#id159\" rel=\"nofollow\">1.18.1 (2016-03-09)</a></h3>\n<ul>\n<li>Disable automatic CSRF protection for authorized jsonapi requests. [jone]</li>\n</ul>\n</div>\n<div id=\"id38\">\n<h3><a href=\"#id160\" rel=\"nofollow\">1.18.0 (2016-02-16)</a></h3>\n<ul>\n<li>Provide the attributes <tt>base_profile</tt> and <tt>target_version</tt> on\nupgrade steps when using the <tt><span class=\"pre\">upgrade-step:directory</span></tt> directive. [jone]</li>\n<li>Fix profile version when using <cite>upgrade-step:directory</cite> and\nhaving old upgrade steps but no new ones. [jone]</li>\n</ul>\n</div>\n<div id=\"id39\">\n<h3><a href=\"#id161\" rel=\"nofollow\">1.17.0 (2016-01-22)</a></h3>\n<ul>\n<li>Add <tt>bin/upgrade plone_upgrade_needed</tt> command.  [jone]</li>\n</ul>\n</div>\n<div id=\"id40\">\n<h3><a href=\"#id162\" rel=\"nofollow\">1.16.3 (2016-01-22)</a></h3>\n<ul>\n<li>Fix upgrade scaffolding when having dots or other\nnon-alphanumeric characters. [jone]</li>\n</ul>\n</div>\n<div id=\"id41\">\n<h3><a href=\"#id163\" rel=\"nofollow\">1.16.2 (2016-01-15)</a></h3>\n<ul>\n<li>Actually the same as 1.16.1, but pypi was broken when I\nreleased it and now it does not let me use the same version\nnumber. :-(\n[jone]</li>\n</ul>\n</div>\n<div id=\"id42\">\n<h3><a href=\"#id164\" rel=\"nofollow\">1.16.1 (2016-01-13)</a></h3>\n<ul>\n<li>Added documentation for the additions of the previous release.  [maurits]</li>\n</ul>\n</div>\n<div id=\"id43\">\n<h3><a href=\"#id165\" rel=\"nofollow\">1.16.0 (2016-01-05)</a></h3>\n<ul>\n<li>Added <tt><span class=\"pre\">--all-sites</span></tt> option.  This iterates over all sites and\nperforms the specified command on each of them.  A failing command\nfor one site will stop the entire command.  [maurits]</li>\n<li>Configure logging for the command line utility.  By default print\nonly our own logging, on info level or higher.  With the new\n<tt><span class=\"pre\">--verbose</span></tt> option print all loggers (so also from other packages\nlike <tt>requests</tt>) at debug level and higher.  [maurits]</li>\n<li>Added <tt>plone_upgrade</tt> command to upgrade a Plone Site.  This is\nwhat you would manually do in the <tt><span class=\"pre\">@@plone-upgrade</span></tt> view.  [maurits]</li>\n<li>Added support for installing profiles.  Profiles are only applied\nonce.  Example command line: <tt>bin/upgrade install <span class=\"pre\">--site</span> Plone\n<span class=\"pre\">--profiles</span> Products.PloneFormGen:default</tt>.  [maurits]</li>\n<li>Prevented UnicodeEncodeError when piping output of <tt>bin/upgrade\nsites</tt>.  This would fail when a site had non-ascii characters in\nits title.  [maurits]</li>\n</ul>\n</div>\n<div id=\"id44\">\n<h3><a href=\"#id166\" rel=\"nofollow\">1.15.1 (2015-11-11)</a></h3>\n<ul>\n<li>Change instance detection to support any name.\nBefore only \u201cinstance*\u201d was supported.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id45\">\n<h3><a href=\"#id167\" rel=\"nofollow\">1.15.0 (2015-10-30)</a></h3>\n<ul>\n<li>Make \u201cblessed\u201d dependency optional in the \u201ccolors\u201d extras.\n[jone]</li>\n<li>Update references to class-migrated objects in the intid utility.\n[deiferni]</li>\n</ul>\n</div>\n<div id=\"id46\">\n<h3><a href=\"#id168\" rel=\"nofollow\">1.14.8 (2015-09-21)</a></h3>\n<ul>\n<li>Migrate workflow states with wfhistory migration and do not set state manually unless necessary.\n[tschanzt]</li>\n</ul>\n</div>\n<div id=\"id47\">\n<h3><a href=\"#id169\" rel=\"nofollow\">1.14.7 (2015-08-27)</a></h3>\n<ul>\n<li>Add an afterCommitHook that notifies about the transaction having been\ncommitted (or aborted) after installing upgrades.\n[lgraf]</li>\n<li>Fix authentication problem with bin/upgrade command.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id48\">\n<h3><a href=\"#id170\" rel=\"nofollow\">1.14.6 (2015-07-22)</a></h3>\n<ul>\n<li>Return context manager to allow \u201cas\u201d statements.\n[lknoepfel]</li>\n</ul>\n</div>\n<div id=\"id49\">\n<h3><a href=\"#id171\" rel=\"nofollow\">1.14.5 (2015-05-20)</a></h3>\n<ul>\n<li>Update quickinstaller product version when upgrading a package.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id50\">\n<h3><a href=\"#id172\" rel=\"nofollow\">1.14.4 (2015-04-09)</a></h3>\n<ul>\n<li>Fix post upgrade ordering which was broken since 1.11.0.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id51\">\n<h3><a href=\"#id173\" rel=\"nofollow\">1.14.3 (2015-03-29)</a></h3>\n<ul>\n<li>Fix error in upgrade-step:directory directive.\nThe error occured when the directory was a subdirectory relative to the\nZCML directory, causing the package module to be replaced with the\nupgrades package directory in sys.modules.\n[jone]</li>\n<li>Fix issue with transaction note length when a large not already exists.\nWhen the transaction note already has maximum length (e.g. with Archetypes notes),\nnothing more should be added.\nAlso increased the threshold back (reduced in 1.14.2).\n[jone]</li>\n</ul>\n</div>\n<div id=\"id52\">\n<h3><a href=\"#id174\" rel=\"nofollow\">1.14.2 (2015-03-25)</a></h3>\n<ul>\n<li>Reduce maximum transaction note length used by ftw.upgrade.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id53\">\n<h3><a href=\"#id175\" rel=\"nofollow\">1.14.1 (2015-03-18)</a></h3>\n<ul>\n<li>Command: fix instance discover when bound to public interface.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id54\">\n<h3><a href=\"#id176\" rel=\"nofollow\">1.14.0 (2015-02-24)</a></h3>\n<ul>\n<li>Command: add fake terminal fallback when blessed cannot be loaded.\nThis can happen for example when Python is built without curses support.\n[jone]</li>\n<li><tt>bin/upgrade recook</tt> command for recooking resources.\n[jone]</li>\n<li>Recook resources after installing upgrades.\n[jone]</li>\n<li>plone.reload support for upgrade step directory.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id55\">\n<h3><a href=\"#id177\" rel=\"nofollow\">1.13.0 (2015-02-20)</a></h3>\n<ul>\n<li><tt>bin/upgrade</tt>: automatically authenticate with a tempfile\nnegotiation mechanism when no other authentication information is\nprovided.\n[jone]</li>\n<li>New <tt>bin/upgrade user</tt> command for testing authentication.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id56\">\n<h3><a href=\"#id178\" rel=\"nofollow\">1.12.0 (2015-02-16)</a></h3>\n<ul>\n<li>Add <tt>bin/upgrade</tt> commands <tt>sites</tt>, <tt>list</tt> and <tt>install</tt>.\nThis makes it possible to install upgrades from the console.\n[jone]</li>\n<li>Update upgrade step scaffold to support plone.reload.\n[jone]</li>\n<li>New JSON API implemented, accessible with <cite>/upgrades-api</cite>.\n[jone]</li>\n<li>Executioner: <cite>install_upgrades_by_api_ids</cite> was added, allowing to install\na selection of upgrades identified by API ugprade ids.\n[jone]</li>\n<li>Gatherer: <cite>get_upgrades_by_api_ids</cite> was added, returning upgrade infos\nfor a selection of API upgrade ids.\n[jone]</li>\n<li>Gatherer: <cite>get_upgrades</cite> is deprecated and replaced by <cite>get_profiles</cite>.\n<cite>get_profiles</cite> now has a <cite>proposed_only</cite> flag.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id57\">\n<h3><a href=\"#id179\" rel=\"nofollow\">1.11.0 (2015-01-08)</a></h3>\n<ul>\n<li><p>Reverse post upgrade adapter ordering.\nThe order was reversed, it should execute dependencies first.\n[jone]</p>\n</li>\n<li><p>create-upgrade: Make sure to quote argument passed to bin/upgrade.\n[lgraf]</p>\n</li>\n<li><p>Add a <tt><span class=\"pre\">create-upgrade</span></tt> script which can be installed globally.\n[jone]</p>\n</li>\n<li><p>Create a <tt>bin/upgrade</tt> script:</p>\n<ul>\n<li>the <tt>create</tt> command creates a upgrade step in the \u201cupgrades\u201d directory.</li>\n<li>the <tt>touch</tt> command can be used for reordering upgrade steps.</li>\n</ul>\n<p>[jone]</p>\n</li>\n<li><p>New <tt><span class=\"pre\">upgrade-step:directory</span></tt> directive for registering a directory\nwith upgrade steps which are automatically detected and registered.\n[jone]</p>\n</li>\n<li><p>Extend the importProfile directive so that a handler can be\ndefined. The handler may import the associated upgrade step\nprofile with the new method <tt>self.install_upgrade_profile()</tt>.\n[jone]</p>\n</li>\n</ul>\n</div>\n<div id=\"id58\">\n<h3><a href=\"#id180\" rel=\"nofollow\">1.10.2 (2014-11-19)</a></h3>\n<ul>\n<li>Exclude uninstalled products from upgrades view.\n[jone]</li>\n<li>Make upgrades appear in undo form again.\nThe transaction note fix in 1.7.4 caused upgrade transaction to not appear in the undo form.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id59\">\n<h3><a href=\"#id181\" rel=\"nofollow\">1.10.1 (2014-10-27)</a></h3>\n<ul>\n<li>Update upgrade view ordering for root nodes.\nThe dependency graph does not define any order for root\nprofiles (e.g. included in buildout directly), which causes\nrandom sorting in the upgrade view for those profiles.\nThis change sorts those root profiles by name without changing\nthe order of profiles which is depended on.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id60\">\n<h3><a href=\"#id182\" rel=\"nofollow\">1.10.0 (2014-08-28)</a></h3>\n<ul>\n<li>Wrap step.objects in a SavepointIterator that creates a savepoint every n items.\n[lgraf]</li>\n</ul>\n</div>\n<div id=\"id61\">\n<h3><a href=\"#id183\" rel=\"nofollow\">1.9.0 (2014-08-27)</a></h3>\n<ul>\n<li>Add @@manage-upgrades-plain fallback view for @@manage-upgrades.\nIt does not include plone`s main template and thus might be able to render when\nthe default view fails for some reason.\n[deiferni]</li>\n</ul>\n</div>\n<div id=\"id62\">\n<h3><a href=\"#id184\" rel=\"nofollow\">1.8.0 (2014-08-11)</a></h3>\n<ul>\n<li>Prevent portal_quickinstaller from picking upgrade-steps instead of the\ndefault-profile by prefixing the profile-id with <tt>upgrade_to_</tt> (fix #45)\n[pbauer]</li>\n<li>Flag profiles whose filesystem version is outdated.\nHighlights profiles with upgrades that lead to a destination version that is\nhigher than the corresponding profile\u2019s current filesystem version.\nThis usually means someone forgot to update the version in metadata.xml of the\ncorresponding profile.\n[lgraf]</li>\n</ul>\n</div>\n<div id=\"id63\">\n<h3><a href=\"#id185\" rel=\"nofollow\">1.7.4 (2014-05-12)</a></h3>\n<ul>\n<li>Extend workflow updater to migrate workflow history.\n[jone]</li>\n<li>Fix workflow updater to always update objects.\nThe objects are updated even when it seems that the object was\nnot update or has no longer a workflow.\nThis fixes issues when updating a workflow, in which case the\nold workflow and the new workflow has the same ID.\n[jone]</li>\n<li>Make sure the transaction note does not get too long.\nZope limits the transaction note length. By actively managing the transaction note\nwe can provide fallbacks for when it gets too long because a lot of upgrade steps\nare installed at the same time.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id64\">\n<h3><a href=\"#id186\" rel=\"nofollow\">1.7.3 (2014-04-30)</a></h3>\n<ul>\n<li>Add <tt>uninstall_product</tt> method to upgrade step class.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id65\">\n<h3><a href=\"#id187\" rel=\"nofollow\">1.7.2 (2014-02-28)</a></h3>\n<ul>\n<li>Update provided interfaces when migrating objects to new class.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id66\">\n<h3><a href=\"#id188\" rel=\"nofollow\">1.7.1 (2014-01-09)</a></h3>\n<ul>\n<li>Fix LocationError on manage-ugprades view on cyclic dependencies.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id67\">\n<h3><a href=\"#id189\" rel=\"nofollow\">1.7.0 (2013-09-24)</a></h3>\n<ul>\n<li>Add a <tt>update_workflow_security</tt> helper function to the upgrade step.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id68\">\n<h3><a href=\"#id190\" rel=\"nofollow\">1.6.0 (2013-08-30)</a></h3>\n<ul>\n<li>Fix inplace modification bug when updating the catalog while\niterating over a catalog result.\n[jone]</li>\n<li>Implement new <tt>importProfile</tt> directive for creating upgrade steps\nthat just import a specific upgrade step generic setup profile.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id69\">\n<h3><a href=\"#id191\" rel=\"nofollow\">1.5 (2013-08-16)</a></h3>\n<ul>\n<li>Add a <tt>WorkflowChainUpdater</tt> for changing workflow chains without\nresetting existing objects to the initial review state of the new\nworkflow.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id70\">\n<h3><a href=\"#id192\" rel=\"nofollow\">1.4.0 (2013-07-18)</a></h3>\n<ul>\n<li>Added helper for adding a type_action.\n[phgross]</li>\n<li>Add <cite>objects</cite> method to <cite>UpgradeStep</cite> for easy querying the catalog\nand doing stuff with progress logging combined.\n[jone]</li>\n<li>Make ProgressLogger an iterator too, because it is easier to use.\n[jone]</li>\n<li>Improve logging while installing upgrade steps.\nShow duration for installing.\n[jone]</li>\n<li>Fix upgrade step icons for Plone 4.3.\n[jone]</li>\n<li>Add <tt>update_security</tt> helper.\n[jone]</li>\n<li>Fix incomplete status info entry prodcued by\nplaceful workflow policy activator.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id71\">\n<h3><a href=\"#id193\" rel=\"nofollow\">1.3 (2013-06-13)</a></h3>\n<ul>\n<li>Implement a placeful workflow policy activator.\n[jone]</li>\n<li>Added remove_broken_browserlayer method to step class.\n[lgraf]</li>\n</ul>\n</div>\n<div id=\"id72\">\n<h3><a href=\"#id194\" rel=\"nofollow\">1.2.1 (2013-04-23)</a></h3>\n<ul>\n<li>Keep modification date on reindexObject wihtout idxs.\n[mathias.leimgruber]</li>\n</ul>\n</div>\n<div id=\"id73\">\n<h3><a href=\"#id195\" rel=\"nofollow\">1.2 (2013-01-24)</a></h3>\n<ul>\n<li>onegov.ch approved: add badge to readme.\n[jone]</li>\n<li>Remove \u2018step\u2019 and \u2018for\u2019 values from internal data structure.\nThis is needed for allowing us to serialize the data (json).\n[jone]</li>\n<li>Add IPostUpgrade adapter hook.\n[jone]</li>\n<li>Refactor dependency sorting into seperate function.\n[jone]</li>\n<li>Add security declarations.\n[jone]</li>\n<li>Fix wrong tool usage when installing a profile in step class.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id74\">\n<h3><a href=\"#id196\" rel=\"nofollow\">1.1 (2012-10-08)</a></h3>\n<ul>\n<li>Add catalog_unrestricted_get_object and catalog_unrestricted_search methods to step class.\n[jone]</li>\n<li>Handle profiles of packages which were removed but have leftover generic setup entries.\n[jone]</li>\n</ul>\n</div>\n<div id=\"id75\">\n<h3><a href=\"#id197\" rel=\"nofollow\">1.0 (2012-08-13)</a></h3>\n<ul>\n<li>Add installed upgrades to transaction note. Closes #7\n[jone]</li>\n<li>Add <tt>migrate_class</tt> helper with _p_changed implementation supporting BTreeFolder2Base containers.\n[jone]</li>\n<li>Remove <tt>purge_resource_registries()</tt> helper because it does not behave as expected.\n[jone]</li>\n<li>Set min-height of upgrade output frame to 500px.\n[jone]</li>\n<li>Print exceptions to browser log stream.\n[jone]</li>\n</ul>\n</div>\n<div id=\"b2-2012-07-04\">\n<h3><a href=\"#id198\" rel=\"nofollow\">1.0b2 (2012-07-04)</a></h3>\n<ul>\n<li>Fix the upgrade registration problem (using a classmethod does not work\nsince registration fails).\n[jone]</li>\n<li>Let @@manage-upgrade be usable without actually installing the GS profile.\n[maethu]</li>\n</ul>\n</div>\n<div id=\"b1-2012-06-27\">\n<h3><a href=\"#id199\" rel=\"nofollow\">1.0b1 (2012-06-27)</a></h3>\n<ul>\n<li>First implementation.\n[jone]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6867408, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b0267b75fcf03b8304231dee8e92306e", "sha256": "978beb16e3998170725fbd68c3f9b7c4287440d81f55ec2c7d4a20aafa07521d"}, "downloads": -1, "filename": "ftw.upgrade-1.0.zip", "has_sig": false, "md5_digest": "b0267b75fcf03b8304231dee8e92306e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 114591, "upload_time": "2012-08-13T14:07:58", "upload_time_iso_8601": "2012-08-13T14:07:58.030990Z", "url": "https://files.pythonhosted.org/packages/62/35/e9807d8264a5da09225913f6d782298979a1517760f3bd411795636b6378/ftw.upgrade-1.0.zip", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "f31ab93b30ed04ff32a9e0d093bc4dcc", "sha256": "8adb08b3c0e5e6d29efa34c52beb676391c701865ff13b982277a07216f4a864"}, "downloads": -1, "filename": "ftw.upgrade-1.0b1.zip", "has_sig": false, "md5_digest": "f31ab93b30ed04ff32a9e0d093bc4dcc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113126, "upload_time": "2012-06-27T12:01:13", "upload_time_iso_8601": "2012-06-27T12:01:13.160142Z", "url": "https://files.pythonhosted.org/packages/0d/75/5ce0ec5b9d3324ef2583d6e5b6de3fb6703225d25690f65a7d7daa6765be/ftw.upgrade-1.0b1.zip", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "90709f537d50918bb4e8150a4eadb420", "sha256": "d05becf6215d241c8f062289986ebcadd71bed2c85d4cbfec32fec33df4c18b3"}, "downloads": -1, "filename": "ftw.upgrade-1.0b2.zip", "has_sig": false, "md5_digest": "90709f537d50918bb4e8150a4eadb420", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113767, "upload_time": "2012-07-04T18:26:31", "upload_time_iso_8601": "2012-07-04T18:26:31.787214Z", "url": "https://files.pythonhosted.org/packages/f9/96/eacd7e9d30df790ceff5325097e3f2b31256e6967ebfe39ea34b9fee6e43/ftw.upgrade-1.0b2.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "1108f9b1de83595d5da5c439b477c732", "sha256": "9df36a9e08a2fc40e5e0a5949563edd005a51e185cd6884dec6a3572a9a5ec1f"}, "downloads": -1, "filename": "ftw.upgrade-1.1.zip", "has_sig": false, "md5_digest": "1108f9b1de83595d5da5c439b477c732", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116725, "upload_time": "2012-10-08T12:58:44", "upload_time_iso_8601": "2012-10-08T12:58:44.642902Z", "url": "https://files.pythonhosted.org/packages/dc/80/4634617825dde5884eefceac7fb1f2601c62a5a802f41151777de77ce0a7/ftw.upgrade-1.1.zip", "yanked": false}], "1.10.0": [{"comment_text": "", "digests": {"md5": "2baf283e90c4961357b3dd99ce1f6971", "sha256": "5e0d3b2efd53c0e09fa1b6cf674a52b1aead22072d288e9dbd6fdb00404ba47b"}, "downloads": -1, "filename": "ftw.upgrade-1.10.0.zip", "has_sig": false, "md5_digest": "2baf283e90c4961357b3dd99ce1f6971", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167928, "upload_time": "2014-08-28T15:42:52", "upload_time_iso_8601": "2014-08-28T15:42:52.736689Z", "url": "https://files.pythonhosted.org/packages/0f/5b/a0106925a8f6cc153f0c5af3098d8882669a4b7b67105f8428f7f4ccc30b/ftw.upgrade-1.10.0.zip", "yanked": false}], "1.10.1": [{"comment_text": "", "digests": {"md5": "f5a9f79cac3b1bc72f021d6691c87b44", "sha256": "dc55cd3af4297de311ddb04d5529b8e2a416a4444505e608edb15643eb0447ca"}, "downloads": -1, "filename": "ftw.upgrade-1.10.1.zip", "has_sig": false, "md5_digest": "f5a9f79cac3b1bc72f021d6691c87b44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 168590, "upload_time": "2014-10-27T08:24:40", "upload_time_iso_8601": "2014-10-27T08:24:40.431985Z", "url": "https://files.pythonhosted.org/packages/3e/79/c51e169feedd9bedf6d3c78e5be132090327aabfd649eac9f5cba57de172/ftw.upgrade-1.10.1.zip", "yanked": false}], "1.10.2": [{"comment_text": "", "digests": {"md5": "14641aecd316d5952ad832101b9491f9", "sha256": "3639e5fd3cfab26a2bee2fcfdab5c88d1ff6fb27c48c91112f8153cc816c0d1e"}, "downloads": -1, "filename": "ftw.upgrade-1.10.2.zip", "has_sig": false, "md5_digest": "14641aecd316d5952ad832101b9491f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 169460, "upload_time": "2014-11-19T19:05:52", "upload_time_iso_8601": "2014-11-19T19:05:52.112426Z", "url": "https://files.pythonhosted.org/packages/f7/8e/05cdb6b27a61e8ac1c81d10c77c3d55c5c321691aec583361deb2798c3bd/ftw.upgrade-1.10.2.zip", "yanked": false}], "1.11.0": [{"comment_text": "", "digests": {"md5": "d2603fa9ec9310374daf150e780072de", "sha256": "b9d6aba5c778821183ece8821205244f3ad05d9beb06e3af831f6d76a9eca3a5"}, "downloads": -1, "filename": "ftw.upgrade-1.11.0.zip", "has_sig": false, "md5_digest": "d2603fa9ec9310374daf150e780072de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 195156, "upload_time": "2015-01-08T10:59:56", "upload_time_iso_8601": "2015-01-08T10:59:56.852876Z", "url": "https://files.pythonhosted.org/packages/30/19/6acd2c5a00b14501aec9df9f97c22eaf0298c6623357e59c25a65f92ad0c/ftw.upgrade-1.11.0.zip", "yanked": false}], "1.12.0": [{"comment_text": "", "digests": {"md5": "33988aec74958e432bc1da8e6050a109", "sha256": "1d900f3b0db44fd788d444661b3863d97e81f69414114ebd21e359fe94f78f2e"}, "downloads": -1, "filename": "ftw.upgrade-1.12.0.zip", "has_sig": false, "md5_digest": "33988aec74958e432bc1da8e6050a109", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 230021, "upload_time": "2015-02-16T16:45:55", "upload_time_iso_8601": "2015-02-16T16:45:55.522566Z", "url": "https://files.pythonhosted.org/packages/79/5d/9c8ec05a65827a7d669e09319fb494c4a7aca18b674e383780f9060cc520/ftw.upgrade-1.12.0.zip", "yanked": false}], "1.13.0": [{"comment_text": "", "digests": {"md5": "00eec2d0b84f239f987c4bb90edb14b2", "sha256": "4bfba53086e748beba6de49cf8c25a48aeea987fc3a8a3375a8a0e69f09c3144"}, "downloads": -1, "filename": "ftw.upgrade-1.13.0.zip", "has_sig": false, "md5_digest": "00eec2d0b84f239f987c4bb90edb14b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 233787, "upload_time": "2015-02-20T10:11:12", "upload_time_iso_8601": "2015-02-20T10:11:12.906906Z", "url": "https://files.pythonhosted.org/packages/ce/45/6db61db08dcb91c1d7c6880ad36faa5ab601340b0fce2171ddd7301f185b/ftw.upgrade-1.13.0.zip", "yanked": false}], "1.14.0": [{"comment_text": "", "digests": {"md5": "0a243b6e7775ed980f975242ad59fc57", "sha256": "d5226bc01cf5859560777b0458ecd876dcf4a61dbc5570fa3384bc3d19d8bf0e"}, "downloads": -1, "filename": "ftw.upgrade-1.14.0.zip", "has_sig": false, "md5_digest": "0a243b6e7775ed980f975242ad59fc57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 237375, "upload_time": "2015-02-24T10:53:39", "upload_time_iso_8601": "2015-02-24T10:53:39.973959Z", "url": "https://files.pythonhosted.org/packages/d4/02/2e710ec80389df622c72c3174ff4ddfc6874ed082dcc2c4726803bc484f5/ftw.upgrade-1.14.0.zip", "yanked": false}], "1.14.1": [{"comment_text": "", "digests": {"md5": "77b10d46fc8a31ab666e2ddfe639a0f1", "sha256": "d1063deace5e406081fa9d7b894f9611ca73b1f676f1b9a5d7e4a8d243cd82fb"}, "downloads": -1, "filename": "ftw.upgrade-1.14.1.zip", "has_sig": false, "md5_digest": "77b10d46fc8a31ab666e2ddfe639a0f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 237802, "upload_time": "2015-03-18T13:09:54", "upload_time_iso_8601": "2015-03-18T13:09:54.007301Z", "url": "https://files.pythonhosted.org/packages/d4/3a/f5789ee879d536b3be6d38f7aefcaaad3ec0be22d7acb83c531b62c92aa5/ftw.upgrade-1.14.1.zip", "yanked": false}], "1.14.2": [{"comment_text": "", "digests": {"md5": "e2aad2069e06f935f474733b0096f0cd", "sha256": "a63a730183d095ad0775178c3076b0d39ff45181b79554e7b08d64d9f3882f75"}, "downloads": -1, "filename": "ftw.upgrade-1.14.2.zip", "has_sig": false, "md5_digest": "e2aad2069e06f935f474733b0096f0cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 237974, "upload_time": "2015-03-25T16:45:25", "upload_time_iso_8601": "2015-03-25T16:45:25.027055Z", "url": "https://files.pythonhosted.org/packages/71/b8/f46f0b0e8f8c41b7b04912573769d4f5395301ee9e124a6548dd78f723bf/ftw.upgrade-1.14.2.zip", "yanked": false}], "1.14.3": [{"comment_text": "", "digests": {"md5": "bf0a3c63f250a588e4ae3289b73ea22f", "sha256": "f9f97da0745c8a19cb5f3a6c6ea23f554256c0d56d3dc145f0c6b3f195eae29d"}, "downloads": -1, "filename": "ftw.upgrade-1.14.3.zip", "has_sig": false, "md5_digest": "bf0a3c63f250a588e4ae3289b73ea22f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 238957, "upload_time": "2015-03-29T11:14:44", "upload_time_iso_8601": "2015-03-29T11:14:44.915168Z", "url": "https://files.pythonhosted.org/packages/59/30/de09c9e0666bcb1e4bd7183a32103ecad6766a5ab3b68fd17e9b971af98e/ftw.upgrade-1.14.3.zip", "yanked": false}], "1.14.4": [{"comment_text": "", "digests": {"md5": "eafeb4ec5c36591d254ab64a38f5a7bd", "sha256": "9a00c7a42b7fe264ee9495231970bf9d8ab7d0bddc8a1e8c93694d42058fbaed"}, "downloads": -1, "filename": "ftw.upgrade-1.14.4.zip", "has_sig": false, "md5_digest": "eafeb4ec5c36591d254ab64a38f5a7bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 239052, "upload_time": "2015-04-09T16:26:47", "upload_time_iso_8601": "2015-04-09T16:26:47.483437Z", "url": "https://files.pythonhosted.org/packages/1e/88/08cda58cd47e6cae6dd6dad20b16115b6dab98a8e2cabbfdd656422e2377/ftw.upgrade-1.14.4.zip", "yanked": false}], "1.14.5": [{"comment_text": "", "digests": {"md5": "68d1d61bf65a64b6621ad1617cc2014b", "sha256": "52c22cfbf4a7cb7c89cbf09530d6e05d09e6b8a61a3bda5c8bf49828742038d5"}, "downloads": -1, "filename": "ftw.upgrade-1.14.5.zip", "has_sig": false, "md5_digest": "68d1d61bf65a64b6621ad1617cc2014b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 239078, "upload_time": "2015-05-20T16:32:19", "upload_time_iso_8601": "2015-05-20T16:32:19.830580Z", "url": "https://files.pythonhosted.org/packages/24/f7/0ba50651b04c5ebcfb8c8aa568bb264fac91695acd997b102ec2764354cf/ftw.upgrade-1.14.5.zip", "yanked": false}], "1.14.6": [{"comment_text": "", "digests": {"md5": "9f3886946e119e1526747cb5b703c180", "sha256": "49952df45cced9cee897b5e22c856a9af5a63cd5d1c86fa6baaea19dc5934d65"}, "downloads": -1, "filename": "ftw.upgrade-1.14.6.tar.gz", "has_sig": false, "md5_digest": "9f3886946e119e1526747cb5b703c180", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 193266, "upload_time": "2015-07-22T12:27:03", "upload_time_iso_8601": "2015-07-22T12:27:03.858577Z", "url": "https://files.pythonhosted.org/packages/85/c6/66fb964f8d1465e39d4d03ac2b07e87e9ed7f2b4433bad4f363559568f8a/ftw.upgrade-1.14.6.tar.gz", "yanked": false}], "1.14.7": [{"comment_text": "", "digests": {"md5": "0d43bd5ad6ce531518eac7d96022910e", "sha256": "6f11b0413262a631b7ce523bda301c1600ba7fc3e381dacfbd6389572f33ef81"}, "downloads": -1, "filename": "ftw.upgrade-1.14.7.zip", "has_sig": false, "md5_digest": "0d43bd5ad6ce531518eac7d96022910e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 239719, "upload_time": "2015-08-27T15:07:13", "upload_time_iso_8601": "2015-08-27T15:07:13.205743Z", "url": "https://files.pythonhosted.org/packages/cb/cd/07f93fd49a20e2c4e04e8622d4071805d3ed64bc72029a82a6415223cfda/ftw.upgrade-1.14.7.zip", "yanked": false}], "1.14.8": [{"comment_text": "", "digests": {"md5": "e37287d3fedc5d4d94aaea3c6187e705", "sha256": "fdd996ec02f090ab0c13b40dd34130f76691e48513cbacaec1c58488ce3bdd39"}, "downloads": -1, "filename": "ftw.upgrade-1.14.8.tar.gz", "has_sig": false, "md5_digest": "e37287d3fedc5d4d94aaea3c6187e705", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194039, "upload_time": "2015-09-21T12:52:11", "upload_time_iso_8601": "2015-09-21T12:52:11.443181Z", "url": "https://files.pythonhosted.org/packages/2e/a2/b4633f1018fadeb890fcffa1c9b4f43de01f3577f08d6714f2f63811e373/ftw.upgrade-1.14.8.tar.gz", "yanked": false}], "1.15.0": [{"comment_text": "", "digests": {"md5": "ecfdf1ac7497becea195c5b6f22d0c65", "sha256": "8fb0e5d90248039a568ac0cb0ca2d2af7082701e3ad70c13993075e155990550"}, "downloads": -1, "filename": "ftw.upgrade-1.15.0.tar.gz", "has_sig": false, "md5_digest": "ecfdf1ac7497becea195c5b6f22d0c65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 195657, "upload_time": "2015-10-30T07:54:14", "upload_time_iso_8601": "2015-10-30T07:54:14.702667Z", "url": "https://files.pythonhosted.org/packages/89/f7/6cedd41fe5a8cebf56a2e351ace02538886846bf6b8570bfe58c2e5e0f4c/ftw.upgrade-1.15.0.tar.gz", "yanked": false}], "1.15.1": [{"comment_text": "", "digests": {"md5": "184dcc22e819817a3556de1c2f882930", "sha256": "6a4d4bc7bc10baab786daef10e4abeeb3c1781987382e309f2b0239e934fe339"}, "downloads": -1, "filename": "ftw.upgrade-1.15.1.tar.gz", "has_sig": false, "md5_digest": "184dcc22e819817a3556de1c2f882930", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 195810, "upload_time": "2015-11-11T15:58:31", "upload_time_iso_8601": "2015-11-11T15:58:31.220612Z", "url": "https://files.pythonhosted.org/packages/d9/c6/80ddab6dcdbb01251ca43c522f75c40f190c723e83503e908554acd8be63/ftw.upgrade-1.15.1.tar.gz", "yanked": false}], "1.16.0": [{"comment_text": "", "digests": {"md5": "fa4474df3682394ef842b28499a5d250", "sha256": "e6fd3ac2dec6da58b672b7255eba9850d71973c9c22fff53a666a2497aaf6479"}, "downloads": -1, "filename": "ftw.upgrade-1.16.0.tar.gz", "has_sig": false, "md5_digest": "fa4474df3682394ef842b28499a5d250", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 200319, "upload_time": "2016-01-05T11:28:42", "upload_time_iso_8601": "2016-01-05T11:28:42.802837Z", "url": "https://files.pythonhosted.org/packages/2f/11/c2f2d5c1e7d96bfd31b6f276755aaf5b4544dd88758c52111b9c421758b5/ftw.upgrade-1.16.0.tar.gz", "yanked": false}], "1.16.1": [], "1.16.2": [{"comment_text": "", "digests": {"md5": "684a545ae83ae5c49be8f28d478f7181", "sha256": "eb5005a377cee038cca6cdf4ea6848250a3b5686868dde38102d2f0034ced6b8"}, "downloads": -1, "filename": "ftw.upgrade-1.16.2.tar.gz", "has_sig": false, "md5_digest": "684a545ae83ae5c49be8f28d478f7181", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 201941, "upload_time": "2016-01-15T15:33:55", "upload_time_iso_8601": "2016-01-15T15:33:55.460025Z", "url": "https://files.pythonhosted.org/packages/30/64/c59e39c5c8026a3466ce59623309f55929fef0e182a6697f8af6a9d50172/ftw.upgrade-1.16.2.tar.gz", "yanked": false}], "1.16.3": [{"comment_text": "", "digests": {"md5": "c7f2dc970be569cf922e75ddbcd60252", "sha256": "107c466559393ec1ae7eac2b6c3b9b8d785417c933f5a67fc4da42d71bfd2eae"}, "downloads": -1, "filename": "ftw.upgrade-1.16.3.tar.gz", "has_sig": false, "md5_digest": "c7f2dc970be569cf922e75ddbcd60252", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 202438, "upload_time": "2016-01-22T13:07:46", "upload_time_iso_8601": "2016-01-22T13:07:46.571837Z", "url": "https://files.pythonhosted.org/packages/97/fd/96d9c3d608e11d2579dc71196e1620c3f313e7bf79e6ccda7da71ae95b32/ftw.upgrade-1.16.3.tar.gz", "yanked": false}], "1.17.0": [{"comment_text": "", "digests": {"md5": "cfcca137f0e54f141255d5280adbffd2", "sha256": "8b2efa9b7dc6a7f526be33ac7274dc8e8ee33ee25cb3fb556aae9d9ebc1a4486"}, "downloads": -1, "filename": "ftw.upgrade-1.17.0.tar.gz", "has_sig": false, "md5_digest": "cfcca137f0e54f141255d5280adbffd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203066, "upload_time": "2016-01-22T15:34:30", "upload_time_iso_8601": "2016-01-22T15:34:30.760910Z", "url": "https://files.pythonhosted.org/packages/2c/f1/798496e77add460786f152c7226d8a75583b57c7cc42576768466b0b96f5/ftw.upgrade-1.17.0.tar.gz", "yanked": false}], "1.18.0": [{"comment_text": "", "digests": {"md5": "51bc8c4ad0bddb2f5f55875ef559cee4", "sha256": "4f52a901db305e9cffa51f604bf1b51da5ef14413145ea9bb2839bc57404446c"}, "downloads": -1, "filename": "ftw.upgrade-1.18.0.tar.gz", "has_sig": false, "md5_digest": "51bc8c4ad0bddb2f5f55875ef559cee4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 204178, "upload_time": "2016-02-16T15:05:23", "upload_time_iso_8601": "2016-02-16T15:05:23.091741Z", "url": "https://files.pythonhosted.org/packages/da/da/10ed944c7afc937fcc38c3fe33b3939f0a84138c277cf81cdb10e23cb4aa/ftw.upgrade-1.18.0.tar.gz", "yanked": false}], "1.18.1": [{"comment_text": "", "digests": {"md5": "64694de7f43eabd2101bd694451b7a44", "sha256": "00ec0f9cbe537785fb42b577d12875422c7ee068b8cda4e18da600765673a430"}, "downloads": -1, "filename": "ftw.upgrade-1.18.1.tar.gz", "has_sig": false, "md5_digest": "64694de7f43eabd2101bd694451b7a44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 207694, "upload_time": "2016-03-09T13:28:42", "upload_time_iso_8601": "2016-03-09T13:28:42.582041Z", "url": "https://files.pythonhosted.org/packages/38/74/e46eb8a89464cb4b3a9a93f77455631021188133a15d67259bcaf1933883/ftw.upgrade-1.18.1.tar.gz", "yanked": false}], "1.19.0": [{"comment_text": "", "digests": {"md5": "31b1e637c723099c06f76a40beaceabc", "sha256": "12b939723fdba77215e5fc122b33fd52c00db17ee8672e5ffd2e90e00c6e3d82"}, "downloads": -1, "filename": "ftw.upgrade-1.19.0.tar.gz", "has_sig": false, "md5_digest": "31b1e637c723099c06f76a40beaceabc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 205692, "upload_time": "2016-04-11T14:55:52", "upload_time_iso_8601": "2016-04-11T14:55:52.002552Z", "url": "https://files.pythonhosted.org/packages/cd/90/c1722ba3178fa9da9c25c2ba92977f0dc23f0d4df3c9524b689b60dcc9a9/ftw.upgrade-1.19.0.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "816a45736f522ae70f4777fa693e8e2a", "sha256": "d53f182f02c26f8c8f5202730c483fdb6350436c0b5e76f7337d1ebe7aeba2b4"}, "downloads": -1, "filename": "ftw.upgrade-1.2.tar.gz", "has_sig": false, "md5_digest": "816a45736f522ae70f4777fa693e8e2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99766, "upload_time": "2013-01-24T16:36:34", "upload_time_iso_8601": "2013-01-24T16:36:34.016920Z", "url": "https://files.pythonhosted.org/packages/f9/71/994a25aba7ddf1844abaff97af998099f2c815527e66d80bac01ae193b52/ftw.upgrade-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "faba9e2764a731872cfeab0f5b846fcf", "sha256": "669f3a13fd99a7cddcc133accc6b5cf1f08009d08900a259b6e12f50243e67bf"}, "downloads": -1, "filename": "ftw.upgrade-1.2.1.zip", "has_sig": false, "md5_digest": "faba9e2764a731872cfeab0f5b846fcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123097, "upload_time": "2013-04-23T08:49:54", "upload_time_iso_8601": "2013-04-23T08:49:54.638253Z", "url": "https://files.pythonhosted.org/packages/8a/a2/7a10e3fe07f6fb6eaa36cb474cd6425bdc9bd48e5ccd6dd70ef49736838d/ftw.upgrade-1.2.1.zip", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "d00091cbd1547255f9cb40e32af68487", "sha256": "3a50b3f826a25ac5549c15831b4e6f9bb3944bd90cd0d2f3b116052ed8907bcf"}, "downloads": -1, "filename": "ftw.upgrade-1.3.zip", "has_sig": false, "md5_digest": "d00091cbd1547255f9cb40e32af68487", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129239, "upload_time": "2013-06-13T15:57:09", "upload_time_iso_8601": "2013-06-13T15:57:09.802226Z", "url": "https://files.pythonhosted.org/packages/65/97/6c799d7bc72d3210c7750a73e5140fbe34e032711ffc5e560f283afd2bf4/ftw.upgrade-1.3.zip", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "591576f4437b7b789d8d2f48bfbcfabb", "sha256": "a59b201c4a501633d6770e19c8740058851e56c5eaf138229941d02cbd027eda"}, "downloads": -1, "filename": "ftw.upgrade-1.4.0.zip", "has_sig": false, "md5_digest": "591576f4437b7b789d8d2f48bfbcfabb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 135877, "upload_time": "2013-07-18T14:08:32", "upload_time_iso_8601": "2013-07-18T14:08:32.449182Z", "url": "https://files.pythonhosted.org/packages/1a/25/23eee0f22ae5db474f7b38cc50a6237d08d14124838bba49597f01304892/ftw.upgrade-1.4.0.zip", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "ac1512b77b888c818348c8371eb4131f", "sha256": "4c77f36b152487bdac6d146e7f04e8178daca2c761b6c9294b6539e1c2bd9fd0"}, "downloads": -1, "filename": "ftw.upgrade-1.5.zip", "has_sig": false, "md5_digest": "ac1512b77b888c818348c8371eb4131f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 140144, "upload_time": "2013-08-16T13:00:44", "upload_time_iso_8601": "2013-08-16T13:00:44.651621Z", "url": "https://files.pythonhosted.org/packages/a3/66/f7521ef2bb265c3f05c94452c1759b7d0921a80e24e21ae46be9eb26f5d1/ftw.upgrade-1.5.zip", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "77c8d165f59cd28cc53b87dac81ce1f6", "sha256": "c7393a4499cb49a5407318403bf359e2f1456a5a315bd4d3f96313a3d33a3556"}, "downloads": -1, "filename": "ftw.upgrade-1.6.0.zip", "has_sig": false, "md5_digest": "77c8d165f59cd28cc53b87dac81ce1f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145138, "upload_time": "2013-08-30T07:05:11", "upload_time_iso_8601": "2013-08-30T07:05:11.878764Z", "url": "https://files.pythonhosted.org/packages/4b/7d/2b2b69c51f434a19867d092a6a295a94733d2495bf24d2adc9af641f03ec/ftw.upgrade-1.6.0.zip", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "ec86ee8b13790bcea3a24bc566f4c346", "sha256": "ab293b5801b2af8e820bb260abd868021420ae02e878ed1fc7b9d4adeef1f20e"}, "downloads": -1, "filename": "ftw.upgrade-1.7.0.zip", "has_sig": false, "md5_digest": "ec86ee8b13790bcea3a24bc566f4c346", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 147358, "upload_time": "2013-09-24T10:22:07", "upload_time_iso_8601": "2013-09-24T10:22:07.433664Z", "url": "https://files.pythonhosted.org/packages/b4/ab/2d5d6bf683026387825b1f0b00c2ce3678c6b95b2c3e252b53e0af38d2a8/ftw.upgrade-1.7.0.zip", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "7c465b44a80680674ca8afb220bef8c4", "sha256": "f1972d2e87d5261b40f2733107bb9d6d16e4965f99bec447769eac0f12f43837"}, "downloads": -1, "filename": "ftw.upgrade-1.7.1.zip", "has_sig": false, "md5_digest": "7c465b44a80680674ca8afb220bef8c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 149959, "upload_time": "2014-01-09T08:40:13", "upload_time_iso_8601": "2014-01-09T08:40:13.481214Z", "url": "https://files.pythonhosted.org/packages/bd/b6/12b385da598065d349aa441326562178d5209f37a4442634e48ee704e5b7/ftw.upgrade-1.7.1.zip", "yanked": false}], "1.7.2": [{"comment_text": "", "digests": {"md5": "ffa58915b38dd2da14df3206f185af18", "sha256": "24eb909b5b73ecb6ea5f48ffd7f83bedd11411cd80f1c66596ac84e1903e4681"}, "downloads": -1, "filename": "ftw.upgrade-1.7.2.zip", "has_sig": false, "md5_digest": "ffa58915b38dd2da14df3206f185af18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 150244, "upload_time": "2014-02-28T15:10:10", "upload_time_iso_8601": "2014-02-28T15:10:10.633355Z", "url": "https://files.pythonhosted.org/packages/7c/09/a80af0c9f4ddebfeae04a6ee73c79812757dab04afeedafda0002442d3c0/ftw.upgrade-1.7.2.zip", "yanked": false}], "1.7.3": [{"comment_text": "", "digests": {"md5": "9815ca857a399cc22ae33349163b1b44", "sha256": "d1a9e6c8335aabbff5e59bbdfcdf691d45528ae7caa60f4f18a7c8ea2e16a824"}, "downloads": -1, "filename": "ftw.upgrade-1.7.3.zip", "has_sig": false, "md5_digest": "9815ca857a399cc22ae33349163b1b44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 150596, "upload_time": "2014-04-30T14:05:15", "upload_time_iso_8601": "2014-04-30T14:05:15.734037Z", "url": "https://files.pythonhosted.org/packages/2b/87/70e7283988ad1c1a8dc9a52fbb38041b613d558d5840eca226f5b72d6ac5/ftw.upgrade-1.7.3.zip", "yanked": false}], "1.7.4": [{"comment_text": "", "digests": {"md5": "076c118df79f00fad9d47d911c900742", "sha256": "d05cca623f50b9accf3b244f1922e7c06a59fba24ef1cb8534a3e1cc3442a048"}, "downloads": -1, "filename": "ftw.upgrade-1.7.4.zip", "has_sig": false, "md5_digest": "076c118df79f00fad9d47d911c900742", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154332, "upload_time": "2014-05-12T09:05:02", "upload_time_iso_8601": "2014-05-12T09:05:02.983646Z", "url": "https://files.pythonhosted.org/packages/6a/e7/05f0b4f203eb1b82e3cfb01d5c82e827a0f3aca5397de0e47d2f2bdc6fe0/ftw.upgrade-1.7.4.zip", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "acdcbe39bfeac93902a5e16bf1c05107", "sha256": "abe073daf33ba2c155e6bc670ae1bdf919acab88891ba147b7a234bf411c517d"}, "downloads": -1, "filename": "ftw.upgrade-1.8.0.zip", "has_sig": false, "md5_digest": "acdcbe39bfeac93902a5e16bf1c05107", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 165266, "upload_time": "2014-08-11T13:34:49", "upload_time_iso_8601": "2014-08-11T13:34:49.131259Z", "url": "https://files.pythonhosted.org/packages/33/a9/aa948cd2a91038ad18a20f71d422a48e73fff18271bd1c12eec8e2308767/ftw.upgrade-1.8.0.zip", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "d2ae7e39359a6f906a7504d004dd0646", "sha256": "a88c46283cfb56717896106ec4c2cfd43ddf95ec388d966b56fdfcedc1d95d9b"}, "downloads": -1, "filename": "ftw.upgrade-1.9.0.zip", "has_sig": false, "md5_digest": "d2ae7e39359a6f906a7504d004dd0646", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166275, "upload_time": "2014-08-27T07:21:38", "upload_time_iso_8601": "2014-08-27T07:21:38.064121Z", "url": "https://files.pythonhosted.org/packages/cc/24/73c562a340259c7a489b7e63f0d62b40a8027c55b9c34d04099c45de9ff5/ftw.upgrade-1.9.0.zip", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "d1a8d3d55243f66232d3194e7ffd10e0", "sha256": "4664a25a8c4ff270ef1c23cf6a3c0bf37e1c87a7e34a97a0919198c07bbc44cb"}, "downloads": -1, "filename": "ftw.upgrade-2.0.0.zip", "has_sig": false, "md5_digest": "d1a8d3d55243f66232d3194e7ffd10e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266034, "upload_time": "2016-08-18T10:09:55", "upload_time_iso_8601": "2016-08-18T10:09:55.366897Z", "url": "https://files.pythonhosted.org/packages/da/f7/3bc3d63233e539de0e3e69edf26eba5ed822d60c2b8e9c2c8a2ebe20ced8/ftw.upgrade-2.0.0.zip", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "80e2c332828b105102c2ad58c9294e9f", "sha256": "eb6382cabe73fa51a3f7d3bb9fba86bd8affcfca83aabdb38ede6bb2de9e5b8d"}, "downloads": -1, "filename": "ftw.upgrade-2.0.1.tar.gz", "has_sig": false, "md5_digest": "80e2c332828b105102c2ad58c9294e9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216368, "upload_time": "2016-09-02T08:10:00", "upload_time_iso_8601": "2016-09-02T08:10:00.668311Z", "url": "https://files.pythonhosted.org/packages/b5/e3/7f07e891a2cb45b96cd157d7679414b91e3a235664d493688e1c52a59ee2/ftw.upgrade-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "9fa49a489a47ed6bbcd4fc5f086bf6fd", "sha256": "8a2f862fd22814d1228c854a632b2b4bf65001ba11537611b526eb10f2965823"}, "downloads": -1, "filename": "ftw.upgrade-2.0.2.tar.gz", "has_sig": false, "md5_digest": "9fa49a489a47ed6bbcd4fc5f086bf6fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216660, "upload_time": "2016-09-27T10:30:40", "upload_time_iso_8601": "2016-09-27T10:30:40.983617Z", "url": "https://files.pythonhosted.org/packages/80/d4/3e25a1445dc50784528e51a26158b9d0374d6f390815fb8261a57608cfa8/ftw.upgrade-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "2121656f252f157c79483a0518881ae3", "sha256": "fbd27b1d82e898f90bdacfebb74a5aa11a2397657246816d7dd929a67d00abe4"}, "downloads": -1, "filename": "ftw.upgrade-2.0.3.tar.gz", "has_sig": false, "md5_digest": "2121656f252f157c79483a0518881ae3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216711, "upload_time": "2016-09-27T12:37:04", "upload_time_iso_8601": "2016-09-27T12:37:04.783700Z", "url": "https://files.pythonhosted.org/packages/98/e7/bdaf34cb3af5ffc104f50f6b3dc5aabbb51296eea08e4389e9bf4bff0462/ftw.upgrade-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "24118d62cc62a75c04b81e3420e23aad", "sha256": "f46b843ebe1067e42e91bc547d2ce1b0e5e823b49edca5933337cf98fbc77344"}, "downloads": -1, "filename": "ftw.upgrade-2.0.4.tar.gz", "has_sig": false, "md5_digest": "24118d62cc62a75c04b81e3420e23aad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216747, "upload_time": "2016-10-24T06:20:59", "upload_time_iso_8601": "2016-10-24T06:20:59.700634Z", "url": "https://files.pythonhosted.org/packages/84/b5/bf79ba61c1cc570bd5a39585dfb3cb6793948de55022a1a2eda572ce4f59/ftw.upgrade-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "717bf205abf40b1270bed63718c58cff", "sha256": "86dab142332b9dc079dde1ad37901329d49bcb1d8c3338e64b1c7957e15dab07"}, "downloads": -1, "filename": "ftw.upgrade-2.0.5.tar.gz", "has_sig": false, "md5_digest": "717bf205abf40b1270bed63718c58cff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216844, "upload_time": "2016-10-24T16:00:35", "upload_time_iso_8601": "2016-10-24T16:00:35.434675Z", "url": "https://files.pythonhosted.org/packages/69/48/e3398e95c12819f55cb1683ca802def5bdde053c08752a1fe64c96fd0264/ftw.upgrade-2.0.5.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "16394b55224fdd0354bde565a12a5e47", "sha256": "21736ee526dd3a30d0deff755283888f2501c84e661c681cb82dab5c4ca6f063"}, "downloads": -1, "filename": "ftw.upgrade-2.1.0.tar.gz", "has_sig": false, "md5_digest": "16394b55224fdd0354bde565a12a5e47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217734, "upload_time": "2016-12-06T13:14:17", "upload_time_iso_8601": "2016-12-06T13:14:17.110920Z", "url": "https://files.pythonhosted.org/packages/52/65/ea21ee4fe32e7e9c3293d15ab4846524d36f47a8c64b4877c485aafa92e3/ftw.upgrade-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "f6237770c05269343ad38fea6ed51e76", "sha256": "d8716d1287ab15c375c20b9d4dee8f3b4b78c2369cc4877e2f4624176e663627"}, "downloads": -1, "filename": "ftw.upgrade-2.1.1.tar.gz", "has_sig": false, "md5_digest": "f6237770c05269343ad38fea6ed51e76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217950, "upload_time": "2016-12-13T16:45:50", "upload_time_iso_8601": "2016-12-13T16:45:50.773738Z", "url": "https://files.pythonhosted.org/packages/16/30/58dfb0de3fc336700d7dc3f02a40d666f56d313051f3c0e55cdcee6f5f29/ftw.upgrade-2.1.1.tar.gz", "yanked": false}], "2.10.0": [{"comment_text": "", "digests": {"md5": "a9f8ad6fd502f750ab19dc6c7a17ba1d", "sha256": "22973c5fc8793fdcf513f970e70355ff1efcb4b6f77bf5ca834ba68bb564ed4d"}, "downloads": -1, "filename": "ftw.upgrade-2.10.0.tar.gz", "has_sig": false, "md5_digest": "a9f8ad6fd502f750ab19dc6c7a17ba1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 230407, "upload_time": "2018-01-08T14:50:50", "upload_time_iso_8601": "2018-01-08T14:50:50.532091Z", "url": "https://files.pythonhosted.org/packages/1c/1f/8773113c6d02e84f63c341fd0ca01aee4f14ebbf602e53eed1bdb58ce5de/ftw.upgrade-2.10.0.tar.gz", "yanked": false}], "2.11.0": [{"comment_text": "", "digests": {"md5": "52917a16dcbcc67377f8a5bfaedbeb94", "sha256": "dfaadd1defd58c66c8a7b8ceb71f93074e2e149b32c96f1cf1e9f791fea454f3"}, "downloads": -1, "filename": "ftw.upgrade-2.11.0.tar.gz", "has_sig": false, "md5_digest": "52917a16dcbcc67377f8a5bfaedbeb94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 231093, "upload_time": "2018-01-31T16:22:27", "upload_time_iso_8601": "2018-01-31T16:22:27.170981Z", "url": "https://files.pythonhosted.org/packages/56/d0/10318d12b8ed0520456b5e8750c5d34e05b6c6fa4600a47b43feb197e52b/ftw.upgrade-2.11.0.tar.gz", "yanked": false}], "2.11.1": [{"comment_text": "", "digests": {"md5": "180ca0c77fbf7e0ed3ff4fd2a09cddf8", "sha256": "e8e188aa1859c4014b44e9c94d8ca4d9349b934e2383dfab73e9e65f024fd0e2"}, "downloads": -1, "filename": "ftw.upgrade-2.11.1.tar.gz", "has_sig": false, "md5_digest": "180ca0c77fbf7e0ed3ff4fd2a09cddf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 231780, "upload_time": "2018-04-05T06:48:18", "upload_time_iso_8601": "2018-04-05T06:48:18.142050Z", "url": "https://files.pythonhosted.org/packages/ab/07/34f3f22f82d357a7df389e634d22f7f0919e08feebfa7372c696c034ff02/ftw.upgrade-2.11.1.tar.gz", "yanked": false}], "2.12.0": [{"comment_text": "", "digests": {"md5": "a0863a2c98aca5d3364571d431c75a75", "sha256": "5646808e52a83bf85f0b09b7d5dc9bdae829cc8d4c510f96a9a53a8680d45990"}, "downloads": -1, "filename": "ftw.upgrade-2.12.0.tar.gz", "has_sig": false, "md5_digest": "a0863a2c98aca5d3364571d431c75a75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 272589, "upload_time": "2018-07-26T10:07:04", "upload_time_iso_8601": "2018-07-26T10:07:04.667920Z", "url": "https://files.pythonhosted.org/packages/43/a8/22de468e4fa9a07f632a00fe2d60e439ccd36b7857133e9527659a620076/ftw.upgrade-2.12.0.tar.gz", "yanked": false}], "2.12.1": [{"comment_text": "", "digests": {"md5": "9aeea072f59b09064e3dd658cbc08953", "sha256": "0184bfa0a6d891703e6dd7ac2f6fd053e2195685578f4dadcb20b86f787e6c49"}, "downloads": -1, "filename": "ftw.upgrade-2.12.1.tar.gz", "has_sig": false, "md5_digest": "9aeea072f59b09064e3dd658cbc08953", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 272836, "upload_time": "2019-06-18T11:47:12", "upload_time_iso_8601": "2019-06-18T11:47:12.333131Z", "url": "https://files.pythonhosted.org/packages/6a/3d/7bcf588768e5ccc513b4d3c74946772fa8a17d501a5fbbc30a71b77cd24a/ftw.upgrade-2.12.1.tar.gz", "yanked": false}], "2.12.2": [{"comment_text": "", "digests": {"md5": "f5b54ca1fa56e8bd874f42906f95bbc3", "sha256": "d2803b221574c1e3e321affe6f8b7e21a7c0cb769530a778e00f67ba222c9dc5"}, "downloads": -1, "filename": "ftw.upgrade-2.12.2.tar.gz", "has_sig": false, "md5_digest": "f5b54ca1fa56e8bd874f42906f95bbc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 273443, "upload_time": "2019-06-19T09:47:13", "upload_time_iso_8601": "2019-06-19T09:47:13.488796Z", "url": "https://files.pythonhosted.org/packages/4b/83/c388a89018dba4900686e500f3042d157c87b8388ddc04729847af143b4f/ftw.upgrade-2.12.2.tar.gz", "yanked": false}], "2.13.0": [{"comment_text": "", "digests": {"md5": "206cacbd206b0918bf628b41315d8ace", "sha256": "4a2d3bfd108208945d80863a57c7c9cd665decc2fa01c246c196f20c15ae429c"}, "downloads": -1, "filename": "ftw.upgrade-2.13.0.tar.gz", "has_sig": false, "md5_digest": "206cacbd206b0918bf628b41315d8ace", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 274616, "upload_time": "2019-08-22T09:04:02", "upload_time_iso_8601": "2019-08-22T09:04:02.132176Z", "url": "https://files.pythonhosted.org/packages/80/e0/c22ec32ea48e10e2bdf07143cbd7ff034ff804eb7209d39938f6136be62d/ftw.upgrade-2.13.0.tar.gz", "yanked": false}], "2.14.0": [{"comment_text": "", "digests": {"md5": "62399343ee2f6e7f59f522981286844b", "sha256": "8566db1e4a5db368360b88f546383f7223f0954d33c8a4cd7a36b5ac34ff5717"}, "downloads": -1, "filename": "ftw.upgrade-2.14.0.tar.gz", "has_sig": false, "md5_digest": "62399343ee2f6e7f59f522981286844b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 275196, "upload_time": "2019-10-31T06:37:10", "upload_time_iso_8601": "2019-10-31T06:37:10.839588Z", "url": "https://files.pythonhosted.org/packages/8d/c2/aea09dc2fbd885bc0a155654d96217590e7918313204c0ffcecaa59ce480/ftw.upgrade-2.14.0.tar.gz", "yanked": false}], "2.14.1": [{"comment_text": "", "digests": {"md5": "e9444c95cdce659da9257dc79f5af51f", "sha256": "2296d1c362e3c2d6de2b33aceeca5b258b7a0fd8acba6c93abf45ae5923c4f8a"}, "downloads": -1, "filename": "ftw.upgrade-2.14.1.tar.gz", "has_sig": false, "md5_digest": "e9444c95cdce659da9257dc79f5af51f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 276345, "upload_time": "2019-11-08T12:51:40", "upload_time_iso_8601": "2019-11-08T12:51:40.590768Z", "url": "https://files.pythonhosted.org/packages/9e/df/1a4011f1986bc80b05ec72ffa6a7925013795d805c95b6baca92fac2fce2/ftw.upgrade-2.14.1.tar.gz", "yanked": false}], "2.15.0": [{"comment_text": "", "digests": {"md5": "701acb3b4489b50b56a81541102740d5", "sha256": "d2bbbe6ca014488a206c4b2c3497fbf895b5d5398e1400b8a6f6805aad85cb96"}, "downloads": -1, "filename": "ftw.upgrade-2.15.0.tar.gz", "has_sig": false, "md5_digest": "701acb3b4489b50b56a81541102740d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 274190, "upload_time": "2019-12-12T07:16:38", "upload_time_iso_8601": "2019-12-12T07:16:38.039295Z", "url": "https://files.pythonhosted.org/packages/6e/f3/f4b1f6ceeb2863916c2f164fc15e89f7fb57b11be7a75647235389bc2a12/ftw.upgrade-2.15.0.tar.gz", "yanked": false}], "2.15.1": [{"comment_text": "", "digests": {"md5": "e7cd688df4d9d758d9d2e6c388a456a6", "sha256": "7e44326da1f2dba909f31f38e879ec9ee3f0ab6c77cea9b2ae655830182caa1d"}, "downloads": -1, "filename": "ftw.upgrade-2.15.1.tar.gz", "has_sig": false, "md5_digest": "e7cd688df4d9d758d9d2e6c388a456a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 274299, "upload_time": "2019-12-16T10:41:51", "upload_time_iso_8601": "2019-12-16T10:41:51.856081Z", "url": "https://files.pythonhosted.org/packages/d6/b1/8a7939fb3dbdc22911a803842a23a990fee8a1ddb098e64d4edbce52c303/ftw.upgrade-2.15.1.tar.gz", "yanked": false}], "2.15.2": [{"comment_text": "", "digests": {"md5": "afeb3f3c21c0a070e8c9a63ab81ad3d6", "sha256": "51afdbcdba3c112ac147c9c58afbfb9bb186ff6047514e512b1d335896f7b76c"}, "downloads": -1, "filename": "ftw.upgrade-2.15.2.tar.gz", "has_sig": false, "md5_digest": "afeb3f3c21c0a070e8c9a63ab81ad3d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 278380, "upload_time": "2020-01-27T12:32:24", "upload_time_iso_8601": "2020-01-27T12:32:24.313157Z", "url": "https://files.pythonhosted.org/packages/f7/8c/53ed3a2e000ff25a6a51bc15f7f825bb39f26893a5454915ca4c74083135/ftw.upgrade-2.15.2.tar.gz", "yanked": false}], "2.16.0": [{"comment_text": "", "digests": {"md5": "4e140c4f5f8667fcd43c21e70aace939", "sha256": "29bd76bb78769543b2363cb3b73b278641d19a787b89d333e3109188da0993bc"}, "downloads": -1, "filename": "ftw.upgrade-2.16.0.tar.gz", "has_sig": false, "md5_digest": "4e140c4f5f8667fcd43c21e70aace939", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 274711, "upload_time": "2020-02-14T10:17:25", "upload_time_iso_8601": "2020-02-14T10:17:25.691695Z", "url": "https://files.pythonhosted.org/packages/48/0e/17dca2576a4a8fcdfeedd23637a0ecef809b49c901776e0322e1aae8bb7f/ftw.upgrade-2.16.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "62303fca590da0f1cb1afb3ea955cf5f", "sha256": "ccef76630154a73f5f5aa84b09f3914c1cd3f5531582202ecf865ba57d24700f"}, "downloads": -1, "filename": "ftw.upgrade-2.2.0.tar.gz", "has_sig": false, "md5_digest": "62303fca590da0f1cb1afb3ea955cf5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 219030, "upload_time": "2017-01-30T10:29:53", "upload_time_iso_8601": "2017-01-30T10:29:53.430821Z", "url": "https://files.pythonhosted.org/packages/47/bf/a037794abbe740841e0033841f3aa0d43b6bcee66335185382a11eb735c5/ftw.upgrade-2.2.0.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "6a20bae7f83cf9d9f5e9b6adc474d42c", "sha256": "8a80853db2a423b16be4390654c33241cbbacad5b7ac9419bbf5c4ac7791a140"}, "downloads": -1, "filename": "ftw.upgrade-2.3.0.tar.gz", "has_sig": false, "md5_digest": "6a20bae7f83cf9d9f5e9b6adc474d42c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 220443, "upload_time": "2017-02-14T10:32:23", "upload_time_iso_8601": "2017-02-14T10:32:23.346973Z", "url": "https://files.pythonhosted.org/packages/13/0a/570cce98cf7020e1c1666fa4f8d4d2718da938fc96196f6c6a3566ccb2f7/ftw.upgrade-2.3.0.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "e7e02a0724cc536d4ac1be36b884f6b4", "sha256": "22605c2bcfc3e849f0e22f2aa8c0a33451f1af6a42bc6e3746729b28544cec00"}, "downloads": -1, "filename": "ftw.upgrade-2.3.1.tar.gz", "has_sig": false, "md5_digest": "e7e02a0724cc536d4ac1be36b884f6b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 221624, "upload_time": "2017-02-15T13:52:50", "upload_time_iso_8601": "2017-02-15T13:52:50.904508Z", "url": "https://files.pythonhosted.org/packages/29/5d/a79c239ca1b6eab15ad2e1a3272036391034fffb317ca15c90ba734e1faa/ftw.upgrade-2.3.1.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "7c8d89f4dcd509ee062a78de60d76166", "sha256": "f8c08fd333ad1bc4279ae0a05e742ffc79f524c8fbb242a3a223bc12c0b637bd"}, "downloads": -1, "filename": "ftw.upgrade-2.4.0.tar.gz", "has_sig": false, "md5_digest": "7c8d89f4dcd509ee062a78de60d76166", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 221760, "upload_time": "2017-06-07T17:37:46", "upload_time_iso_8601": "2017-06-07T17:37:46.699822Z", "url": "https://files.pythonhosted.org/packages/56/e5/9c6d7dc8f04fc9cf2d5c890f692f6b87ce3a70700e4ced9688cc6e3341ff/ftw.upgrade-2.4.0.tar.gz", "yanked": false}], "2.5.0": [{"comment_text": "", "digests": {"md5": "412d6c2e8275fc518184cf67f5f0cd27", "sha256": "2ddf0d79a89bbdbe5aa63870d16e54e9be6a4a1a158fc73829250aea62474743"}, "downloads": -1, "filename": "ftw.upgrade-2.5.0.tar.gz", "has_sig": false, "md5_digest": "412d6c2e8275fc518184cf67f5f0cd27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 222573, "upload_time": "2017-06-07T17:49:33", "upload_time_iso_8601": "2017-06-07T17:49:33.174348Z", "url": "https://files.pythonhosted.org/packages/67/7b/75dded06a808285d83b7a7b95580f990bc69bf3a1cd99143c15e145f177f/ftw.upgrade-2.5.0.tar.gz", "yanked": false}], "2.6.0": [{"comment_text": "", "digests": {"md5": "3808d34b39296d12d9e99282428f183c", "sha256": "6b2b056e79d74d3225fa3b4a263404c863ddfb1d08b948789ec5430f3464f194"}, "downloads": -1, "filename": "ftw.upgrade-2.6.0.tar.gz", "has_sig": false, "md5_digest": "3808d34b39296d12d9e99282428f183c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 223919, "upload_time": "2017-06-08T15:14:14", "upload_time_iso_8601": "2017-06-08T15:14:14.162724Z", "url": "https://files.pythonhosted.org/packages/3d/1d/d40b360053362a150b8c7fe452ed50c1479a188adbf7a2b7aa45c5b2dc71/ftw.upgrade-2.6.0.tar.gz", "yanked": false}], "2.6.1": [{"comment_text": "", "digests": {"md5": "b9fab559b0b0dd5da423266a429b6da6", "sha256": "ca3a71865a8fd59422bc90a83657e365f7de67e8ac2f178709c1759472462d37"}, "downloads": -1, "filename": "ftw.upgrade-2.6.1.tar.gz", "has_sig": false, "md5_digest": "b9fab559b0b0dd5da423266a429b6da6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224446, "upload_time": "2017-06-28T14:40:12", "upload_time_iso_8601": "2017-06-28T14:40:12.872630Z", "url": "https://files.pythonhosted.org/packages/d3/23/eb9babf30384f1f49d623587d47f506aedc70bdda58497fe9ca5bc585530/ftw.upgrade-2.6.1.tar.gz", "yanked": false}], "2.7.0": [{"comment_text": "", "digests": {"md5": "7f8b8bfb5968821c0731b3bc5cba7555", "sha256": "afd7e89f9bface2572e86addbcad1b058a9ea31bac7eab86e52add8bb791e072"}, "downloads": -1, "filename": "ftw.upgrade-2.7.0.tar.gz", "has_sig": false, "md5_digest": "7f8b8bfb5968821c0731b3bc5cba7555", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224511, "upload_time": "2017-06-28T15:19:22", "upload_time_iso_8601": "2017-06-28T15:19:22.497854Z", "url": "https://files.pythonhosted.org/packages/99/26/1030f7d0ecdacee2ffb27b1256ba94559f5ac8eebcc1f569a5689d32412f/ftw.upgrade-2.7.0.tar.gz", "yanked": false}], "2.7.1": [{"comment_text": "", "digests": {"md5": "354db314b21963f02ec1cad93de57af2", "sha256": "d98691309876dc4e3bfb717048b5fa4c4784f353cabc6dafaaad2293194352ab"}, "downloads": -1, "filename": "ftw.upgrade-2.7.1.tar.gz", "has_sig": false, "md5_digest": "354db314b21963f02ec1cad93de57af2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224666, "upload_time": "2017-06-28T16:11:43", "upload_time_iso_8601": "2017-06-28T16:11:43.570240Z", "url": "https://files.pythonhosted.org/packages/4b/b3/9412ad0e53876e6830ac8a9a3abd5d3bb9ec4605121d8897a614c5359e4f/ftw.upgrade-2.7.1.tar.gz", "yanked": false}], "2.7.2": [{"comment_text": "", "digests": {"md5": "5caf2237abb627f217d8d3ede8db36e7", "sha256": "fa094a79f423caea64bb5e62cd8bc23e36e982b8934a15caa716dbcafcc4c4ee"}, "downloads": -1, "filename": "ftw.upgrade-2.7.2.tar.gz", "has_sig": false, "md5_digest": "5caf2237abb627f217d8d3ede8db36e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 225055, "upload_time": "2017-07-13T08:28:22", "upload_time_iso_8601": "2017-07-13T08:28:22.497367Z", "url": "https://files.pythonhosted.org/packages/72/d7/4acde9bf6e82c9e4a44781077ca4689c88f0a4b76af173e0562795c49a1d/ftw.upgrade-2.7.2.tar.gz", "yanked": false}], "2.8.0": [{"comment_text": "", "digests": {"md5": "eeac17c6c8dcf38bba731210deeaf244", "sha256": "3ad3124443aeb31fac2e89dbc9a63a16543f0284d23c243f1331e858572ec108"}, "downloads": -1, "filename": "ftw.upgrade-2.8.0.tar.gz", "has_sig": false, "md5_digest": "eeac17c6c8dcf38bba731210deeaf244", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 226631, "upload_time": "2017-07-27T06:56:32", "upload_time_iso_8601": "2017-07-27T06:56:32.441659Z", "url": "https://files.pythonhosted.org/packages/ec/1f/9065c3e3fd05c28483187360c34ba900b26f4f84cf2da0b2f92b1f3d9ab1/ftw.upgrade-2.8.0.tar.gz", "yanked": false}], "2.8.1": [{"comment_text": "", "digests": {"md5": "67d3eed3ef2694bf7480e08cf27523c2", "sha256": "27f737d7b0abd3d08b3875289dae127d0acc1fddcae2950ea07a161f04440b9c"}, "downloads": -1, "filename": "ftw.upgrade-2.8.1.tar.gz", "has_sig": false, "md5_digest": "67d3eed3ef2694bf7480e08cf27523c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 226725, "upload_time": "2017-10-13T14:57:04", "upload_time_iso_8601": "2017-10-13T14:57:04.627136Z", "url": "https://files.pythonhosted.org/packages/9a/b9/3155edac1025c744beb838d131efa6f4d0117586df64ad93e73aafe444a6/ftw.upgrade-2.8.1.tar.gz", "yanked": false}], "2.9.0": [{"comment_text": "", "digests": {"md5": "bf63c27a1be69f461cf492edc3aaac15", "sha256": "bb7d02b3671f61c25aa9bdd61dc69096b660b2fbe4ff29ba63b28f94b088501d"}, "downloads": -1, "filename": "ftw.upgrade-2.9.0.tar.gz", "has_sig": false, "md5_digest": "bf63c27a1be69f461cf492edc3aaac15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 230008, "upload_time": "2017-12-14T15:48:05", "upload_time_iso_8601": "2017-12-14T15:48:05.414142Z", "url": "https://files.pythonhosted.org/packages/82/52/86890860df0ed3c4fb44b9535c47102a2e685634e23782c6f879344e7bd4/ftw.upgrade-2.9.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "01aad6bd7c657f1e1bcc966888b6e6c8", "sha256": "fb9d56ec3c6c1523e906d53f3ca52562d3ac51672b44d1e68b7585974db2b579"}, "downloads": -1, "filename": "ftw.upgrade-3.0.0.tar.gz", "has_sig": false, "md5_digest": "01aad6bd7c657f1e1bcc966888b6e6c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 275912, "upload_time": "2020-03-23T18:18:39", "upload_time_iso_8601": "2020-03-23T18:18:39.176567Z", "url": "https://files.pythonhosted.org/packages/29/9b/5175c059e8e0368cdffdaf32c75b63e8f6fc3aa459e9d42bb178d5240d02/ftw.upgrade-3.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "01aad6bd7c657f1e1bcc966888b6e6c8", "sha256": "fb9d56ec3c6c1523e906d53f3ca52562d3ac51672b44d1e68b7585974db2b579"}, "downloads": -1, "filename": "ftw.upgrade-3.0.0.tar.gz", "has_sig": false, "md5_digest": "01aad6bd7c657f1e1bcc966888b6e6c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 275912, "upload_time": "2020-03-23T18:18:39", "upload_time_iso_8601": "2020-03-23T18:18:39.176567Z", "url": "https://files.pythonhosted.org/packages/29/9b/5175c059e8e0368cdffdaf32c75b63e8f6fc3aa459e9d42bb178d5240d02/ftw.upgrade-3.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:48 2020"}