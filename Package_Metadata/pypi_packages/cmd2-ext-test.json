{"info": {"author": "Eric Lin", "author_email": "anselor@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# cmd2 External Test Plugin\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Example cmd2 Application](#example-cmd2-application)\n- [Defining the test fixture](#defining-the-test-fixture)\n- [Writing Tests](#writing-tests)\n- [License](#license)\n\n\n## Overview\n\nThis plugin supports testing of a cmd2 application by exposing access cmd2 commands with the same context \nas from within a cmd2 pyscript.  This allows for verification of an application's support for pyscripts.\n\n\n## Example cmd2 Application\n\nThe following short example shows how to mix in the external test plugin to create a fixture for testing\nyour cmd2 application.\n\nDefine your cmd2 application\n\n```python\nimport cmd2\nclass ExampleApp(cmd2.Cmd):\n    \"\"\"An class to show how to use a plugin\"\"\"\n    def __init__(self, *args, **kwargs):\n        # gotta have this or neither the plugin or cmd2 will initialize\n        super().__init__(*args, **kwargs)\n\n    def do_something(self, arg):\n        self.last_result = 5\n        self.poutput('this is the something command')\n```\n\n## Defining the test fixture\n\nIn your test, define a fixture for your cmd2 application\n\n```python\nimport cmd2_ext_test\nimport pytest\n\nclass ExampleAppTester(cmd2_ext_test.ExternalTestMixin, ExampleApp):\n    def __init__(self, *args, **kwargs):\n        # gotta have this or neither the plugin or cmd2 will initialize\n        super().__init__(*args, **kwargs)\n\n@pytest.fixture\ndef example_app():\n    app = ExampleAppTester()\n    app.fixture_setup()\n    yield app\n    app.fixture_teardown()\n\n```\n\n## Writing Tests\n\nNow write your tests that validate your application using the `app_cmd` function to access\nthe cmd2 application's commands. This allows invocation of the application's commands in the\nsame format as a user would type. The results from calling a command matches what is returned\nfrom running an python script with cmd2's pyscript command, which provides stdout, stderr, and \nthe command's result data.\n\n```python\nfrom cmd2 import CommandResult\n\ndef test_something(example_app):\n    # execute a command\n    out = example_app.app_cmd(\"something\")\n\n    # validate the command output and result data\n    assert isinstance(out, CommandResult)\n    assert str(out.stdout).strip() == 'this is the something command'\n    assert out.data == 5\n```\n\n## License\n\ncmd2 [uses the very liberal MIT license](https://github.com/python-cmd2/cmd2/blob/master/LICENSE).\nWe invite plugin authors to consider doing the same.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/python-cmd2/cmd2-ext-test", "keywords": "cmd2 test plugin", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cmd2-ext-test", "package_url": "https://pypi.org/project/cmd2-ext-test/", "platform": "", "project_url": "https://pypi.org/project/cmd2-ext-test/", "project_urls": {"Homepage": "https://github.com/python-cmd2/cmd2-ext-test"}, "release_url": "https://pypi.org/project/cmd2-ext-test/0.1.0/", "requires_dist": ["cmd2 (<=2,>=0.9.4)", "setuptools-scm ; extra == 'dev'", "pytest ; extra == 'dev'", "codecov ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "pylint ; extra == 'dev'", "invoke ; extra == 'dev'", "wheel ; extra == 'dev'", "twine ; extra == 'dev'"], "requires_python": ">=3.4", "summary": "External test plugin for cmd2. Allows for external invocation of commands as if from a cmd2 pyscript", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cmd2 External Test Plugin</h1>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#overview\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#example-cmd2-application\" rel=\"nofollow\">Example cmd2 Application</a></li>\n<li><a href=\"#defining-the-test-fixture\" rel=\"nofollow\">Defining the test fixture</a></li>\n<li><a href=\"#writing-tests\" rel=\"nofollow\">Writing Tests</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Overview</h2>\n<p>This plugin supports testing of a cmd2 application by exposing access cmd2 commands with the same context\nas from within a cmd2 pyscript.  This allows for verification of an application's support for pyscripts.</p>\n<h2>Example cmd2 Application</h2>\n<p>The following short example shows how to mix in the external test plugin to create a fixture for testing\nyour cmd2 application.</p>\n<p>Define your cmd2 application</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cmd2</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExampleApp</span><span class=\"p\">(</span><span class=\"n\">cmd2</span><span class=\"o\">.</span><span class=\"n\">Cmd</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"An class to show how to use a plugin\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># gotta have this or neither the plugin or cmd2 will initialize</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_result</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">poutput</span><span class=\"p\">(</span><span class=\"s1\">'this is the something command'</span><span class=\"p\">)</span>\n</pre>\n<h2>Defining the test fixture</h2>\n<p>In your test, define a fixture for your cmd2 application</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cmd2_ext_test</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleAppTester</span><span class=\"p\">(</span><span class=\"n\">cmd2_ext_test</span><span class=\"o\">.</span><span class=\"n\">ExternalTestMixin</span><span class=\"p\">,</span> <span class=\"n\">ExampleApp</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># gotta have this or neither the plugin or cmd2 will initialize</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">example_app</span><span class=\"p\">():</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">ExampleAppTester</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">fixture_setup</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">app</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">fixture_teardown</span><span class=\"p\">()</span>\n</pre>\n<h2>Writing Tests</h2>\n<p>Now write your tests that validate your application using the <code>app_cmd</code> function to access\nthe cmd2 application's commands. This allows invocation of the application's commands in the\nsame format as a user would type. The results from calling a command matches what is returned\nfrom running an python script with cmd2's pyscript command, which provides stdout, stderr, and\nthe command's result data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cmd2</span> <span class=\"kn\">import</span> <span class=\"n\">CommandResult</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">example_app</span><span class=\"p\">):</span>\n    <span class=\"c1\"># execute a command</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">example_app</span><span class=\"o\">.</span><span class=\"n\">app_cmd</span><span class=\"p\">(</span><span class=\"s2\">\"something\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># validate the command output and result data</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">CommandResult</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'this is the something command'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>\n</pre>\n<h2>License</h2>\n<p>cmd2 <a href=\"https://github.com/python-cmd2/cmd2/blob/master/LICENSE\" rel=\"nofollow\">uses the very liberal MIT license</a>.\nWe invite plugin authors to consider doing the same.</p>\n\n          </div>"}, "last_serial": 6789557, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8f3a18381469c89f40b086468cb41e39", "sha256": "abd94096eb10b906e41926960004a6dea5f9eec4f82c414b909c41d43a76efb9"}, "downloads": -1, "filename": "cmd2_ext_test-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8f3a18381469c89f40b086468cb41e39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 4368, "upload_time": "2020-03-11T04:24:55", "upload_time_iso_8601": "2020-03-11T04:24:55.248302Z", "url": "https://files.pythonhosted.org/packages/bd/69/b0c21a5d87a35e2448fc48ab66c7287feb90d2a5c333f4421b80c3764a92/cmd2_ext_test-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f69cd3f6868130e515d853ee56c3807", "sha256": "e0e8e697187c0d33d97198edd7dd60a9d3194b93bcb80cf325784c2928750f28"}, "downloads": -1, "filename": "cmd2-ext-test-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6f69cd3f6868130e515d853ee56c3807", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8778, "upload_time": "2020-03-11T04:24:57", "upload_time_iso_8601": "2020-03-11T04:24:57.351178Z", "url": "https://files.pythonhosted.org/packages/a6/9d/ce804093c075bded00608ed107fcb2a811daa08f6885be2ebde1b45a46e2/cmd2-ext-test-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8f3a18381469c89f40b086468cb41e39", "sha256": "abd94096eb10b906e41926960004a6dea5f9eec4f82c414b909c41d43a76efb9"}, "downloads": -1, "filename": "cmd2_ext_test-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8f3a18381469c89f40b086468cb41e39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 4368, "upload_time": "2020-03-11T04:24:55", "upload_time_iso_8601": "2020-03-11T04:24:55.248302Z", "url": "https://files.pythonhosted.org/packages/bd/69/b0c21a5d87a35e2448fc48ab66c7287feb90d2a5c333f4421b80c3764a92/cmd2_ext_test-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f69cd3f6868130e515d853ee56c3807", "sha256": "e0e8e697187c0d33d97198edd7dd60a9d3194b93bcb80cf325784c2928750f28"}, "downloads": -1, "filename": "cmd2-ext-test-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6f69cd3f6868130e515d853ee56c3807", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 8778, "upload_time": "2020-03-11T04:24:57", "upload_time_iso_8601": "2020-03-11T04:24:57.351178Z", "url": "https://files.pythonhosted.org/packages/a6/9d/ce804093c075bded00608ed107fcb2a811daa08f6885be2ebde1b45a46e2/cmd2-ext-test-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:36 2020"}