{"info": {"author": "Cedric GUSTAVE", "author_email": "cgustave@free.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Topic :: System :: Networking"], "description": "# Checkitbaby \n\n## Definition\n\nCheckitbaby is a tool to allow automatic tests validations in a lab.\nIt uses 'agents' to interact with the setup for instance to play simple client/server role, to change the setup topology or even to query the DUT. Agent are connected using ssh. It is recommended to use ssh keys.  \n\n*Playbooks* are defined as a collection of *Testcases*, each testcase is a simple text file where each lines defines an action applied to an *Agent*.\nEach line of the testcase can either trigger an action or get some information and see if some requirements are met (checks).  \nTest scenario syntax is simple and evolutive, commands are defined keywords and depend on the type of agents targeted.  \nMultiple simultaneous connections to agents are supported.  *Variables* are allowed  in testcase. A variable is just a keyword starting with a dollar sign '$' and defined in a variable file. \nDuring testcases execution, all *Run* information such as agent ouputs are collected in log files. The test verification would always be done from log file parsing like a human would do. With this, it is possible to easily double-check the test result post-run.  *Marks* can be used as a delimeter for check verification within the agent log file.  \n\nWhen all the testcases from a Playbook has run, a *Report* in a json format is delivered. The report is organized by testcases and include all checks results from the testcase.\nA general Pass/Fail covering all testcases is also included.  \n\nCheckitbaby can be simply run as a script to run all or some testcases against the setup. It is possible to run the testcase in *Dry-Run* mode to only validate the scenario file syntax for staging.  \n\nCheckitbaby focus is to run against FortiPoc setup, either from withing the PoC (from a testing lxc) or externaly to PoC (from user PC)  \n\n\n## Installation\n\nWill be deliver as python package (to be done)\n* Requirements : netcontrol python library: `pip install -I netcontrol`\n\n\n## Organization\n\n#### File tree structure\n\nThe following directory tree structure is used to organize the tests :\n\n- Directory structure:\n~~~\n/PLAYBOOK_BASE_PATH : The base name of the playbook location\n\t  ex : /fortipoc/playbooks\n\n/PLAYBOOK_BASE_PATH/ANY_PLAYBOOK_NAME\n\t  ex : /fortipoc/playbooks/advpn\n\n/PLAYBOOK_BASE_PATH/ANY_PLAYBOOK_NAME/agents.conf  : files with agents definitions\n\t  ex : /fortipoc/playbooks/advpn/agents.conf\n\n/PLAYBOOK_BASE_PATH/ANY_PLAYBOOK_NAME/variables.conf :  files with variables definitions\n\t  ex : /fortipoc/playbooks/advpn/variables.conf\n\n/PLAYBOOK_BASE_PATH/ANY_PLAYBOOK_NAME/testcases    : directory containing testcases\n\t  ex : /fortipoc/playbooks/advpn/testcases\n\n/PLAYBOOK_BASE_PATH/ANY_PLAYBOOK_NAME/testcases/NNN_TESTCASE_NAME : one testcase file\n\t                                   with NNN : a number starting from 000 (to order testcases)\n\t\t\t\t\t\t\t\t\t        TESTCASE_NAME : any name for the testcase\n\n      ex : /fortipoc/playbooks/advpn/testcases/001_spoke_to_hub_connectivity.txt\n      ex : /fortipoc/playbooks/advpn/testcases/002_spoke_ipsec_tunnel.txt\n      ex : /fortipoc/playbooks/advpn/testcases/003_spoke_routing.txt\n~~~\n\n* Creating a new playbook:\n\nUse program create_new_playbook.sh to create a new playbook file tree:\n`Usage : ./create_new_playbook.sh <playbook_name>`\n\n\n\n## Agents\n\nCurrently supported agents are : Debian LXC, Vyos routers, FortiGate devices, FortiPoC.  \nA few agent-less functions are defined (for instance to wait or append some comments or *standard marks* in the logs)\n\nThe generic syntax of each line of a testcase is as follow :  \n`__AGENT_NAME__:__AGENT_CONNECTION_ID__  __COMMAND__ __COMMAND_SPECIFIC_DATA__ `\n\nEach test/validation uses command 'check' followed by the test reference between square bracket [__TEST_NAME__].  \nThe _TEST_NAME_ should be uniq in the testcase file.  \nA check may include a single or a list of *Requirements*. Requirements follow keyword 'has', they are provided as key=value pairs separated by spaces.\nA test pass if all provided requirements are met. If not requirement are provided, test would be succefull if an occurence was found.  \n\nEach line starting with comment sign '#' are ignored.  \nLines are run sequentially.   \n\nSSH connections to agents are automatically opened and closed at the end of the testcase.  \n\nThe following chapter defines each agent command syntax and support.  \n\n\n#### Generic commands\n\nFollowing commands are not agent specific and can be used with all agents\n\n~~~\n\n# Append a message on the user output when running the testcase\n# This message is not append on the agent log file.\nmessage \"set Branch 1 connections delays and losses\"\n\n# Appends a mark on the agent log file (but not on user output)\n# This should be used to delimit checks parsing start (see check command 'since')\nHOSTS-B2:1 mark \"receive_ready\"\n\n# Skip all following lines from the testcase\nskip all\n\n# Wait a number of seconds\nwait 30\n~~~\n\n\n#### Debian LXC\n\nSimple ping test.  \nConnection (UDP or TCP) one way or two-way test.  \nOpen, connect, close connections and send data. It is recommended to use 'marks' to limit the check parsing area.\n~~~\n# Ping test, pass if at least one packet is not lost\n# Delay and loss are added in the report\nLXC1-1:1 ping [con_test] 10.0.2.1\n\n# Ping test, pass if maximum packet loss under 50 %\nLXC1-1:1 ping [con_test] 10.0.2.1 maxloss 50\n\n# Open a tcp server on port 8000  on agent LXC-1 from its connection 1\nLXC-1:1 open tcp 8000\n\n# Append a mark in LXC-1:1 log file\nLXC-1:1 mark \"server ready\"\n\n# Connect to a tcp server at ip 10.0.2.1 on port 8000\nLXC-2:1 connect tcp 10.0.2.1 8000\n\n# Send data string 'alice' on tcp connection from client side\nLXC-2:1 data send \"alice\"\n\n# Check data 'alice' is received server. Test is called '1_traffic_origin_direction'\n# Parsing on server log file starts at mark \"server ready\"\nLXC-1:1 check [1_traffic_origin_direction] data receive \"alice\" since \"server ready\"\n\n# Append a mark \"client ready\" on client log file\nLXC-2:1 mark \"client ready\"\n\n# Send data string 'bob' on tcp connection from server side:\nLXC-1:1 data send \"bob\"\n\n# Check data 'bob' is received on client. Test is called '2_traffic_reply_direction'\n# Search scope on client log file start at mark \"client ready\"\nLXC-2:1 check [2_traffic_reply_direction] data receive \"bob\" since \"client ready\"\n\n# Close tcp socket from client side:\nLXC-1:1 close tcp\n\n~~~\n\n\n#### Vyos\n\nInteract with vyos router. Does not generate tests results in reports.\n\n~~~\n# Change vyos device R1-B1 traffic-policy named 'WAN' settings \nR1-B1:1 traffic-policy WAN delay 10 loss 0\n~~~\n\n#### FortiGate\nInteract with FortiGate device, generates test results and retrieve information added to the report.\n\n###### Status\n\n~~~\n# Check that FGT-B1 VM license is Valid\nFGT-B1-1:1 check [FGT-B1_license] status has license=True\n\n# Get FortiGate firmware version and VM license status\n# Added in the reports as respectively 'version' and 'license'\nFGT-B1-1:1 get status\n~~~\n\n\n###### Sessions\n\nChecks on FortiGate session table.\nThis command has a first 'filter' section to select the sessions. An implicit 'diag sys session filter clear' is done before the command. Allowed keywords are :  \n['vd','sintf','dintf','src','nsrc','dst','proto','sport','nport','dport','policy','expire','duration','proto-state','session-state1','session-state2','ext-src','ext-dst','ext-src-negate','ext-dst-negate','negate']. Multiple selectors can be used if separated with space.  \n\nSupported requirements : 'state', 'src','dest','sport','dport','proto','proto_state','duration','expire','timeout','dev','gwy','total' (number of sessions)\n~~~\n# Checks that a least a session with destination port 9000 exists\nFGT-B1-1:1 check [session_tcp9000] session filter dport=9000\n\n# Checks that a least a session with dport 22 and dest ip 192.168.0.1 exists\nFGT-B1-1 check [ssh_session_exist] session filter dport=22 dest=192.168.0.1\n\n# Checks that session with destination port 5000 has dirty flag set\nFGT-B1-1 check [session_is_dirty] session filter dport=5000 has flag=dirty\n~~~\n\n###### IPsec tunnel\n\n- Generic checks on IPsec based on `diagnose vpn ike status`\n- flush all ike gateway \n\n~~~\n# Flush all ike gateways ('diagnose vpn ike gateway flush') \nFGT-B1-1:1 flush ike gateway\n\n# Check number of established ike tunnels\nFGT-B1-1:1 check [B1_tunnels] ike status has ike_established=3\n\n# Check number of established IPsec tunnels (created and established)\nFGT-B1-1:1 check [B1_tunnels] ike status has ipsec_created=3 ipsec_established=3\n~~~\n\n\n###### BGP routes\n\nChecks on routing table BGP from `get router info routing-table bgp`\n\n~~~\n# number of bgp routes is 4 :\nFGT-B1-1 check [bgp_4_routes] bgp has total=4\n\n# bgp route for subnet 10.0.0.0/24 exist :\nFGT-B1-1 check [bgp_subnet_10.0.0.0] bgp has subnet=10.0.0.0/24\n\n# bgp nexthop 10.255.1.253 exist\nFGT-B1-1 check [bgp_nexthop_10.255.1.253] bgp has nexthop=10.255.1.253\n\n# bgp has route toward interface vpn_mpls\nFGT-B1-1 check [bgp_subnet_10.0.0.0] bgp has interface=vpn_mpls\n\n# multiple requirements can be combined\nFGT-B1-1 check [multi] bgp has nexthop=10.255.1.253 nexthop=10.255.2.253 subnet=10.0.0.0/24\nFGT-A:1 check [route_ok] routing table bgp 10.0.0.0/24 next-hop 1.1.1.1 interface port1\n~~~\n\n###### SD-WAN\n\nVarious checks from `diagnose sys virtual-wan-link service __SERVICE__`\n\n~~~\n# check alive members :\nFGT-B1-1 check [sdwan_1_member1_alive] sdwan service 1 member 1 has state=alive\n\n# check sla value for a particular member (only available for sla type rule)\nFGT-B1-1 check [sdwan_1_member1_sla] sdwan service 1 member 1 has sla=0x1\n\n# check that member seq 1 is the preferred member on service 1 (aka rule 1)\nFGT-B1-1 check [sdwan_1_preferred] sdwan service 1 member 1 has preferred=1\n~~~\n\n\n#### FortiPoC\n\nInteract with FortiPoC to bring ports up or down\nUsing fpoc link up/down __device__ __port__\n\n~~~\n# Bring up link for FGT-B1-port1 switch side\nfpoc:1 link up FGT-B1-1 port1\n\n# Bring down link for FGT-B1-port1 switch side\nfpoc:1 link down FGT-B1-1 port1\n~~~\n\n\n## Debug\nWhen running, all debugs are stored in file debug.log\nUsefull message (for instance to track syntax error in testcases definition) should be with level WARNING or ERROR.\nProgram is aborted for level ERROR.\n\nsample :\n~~~\n20200317:17:25:30,198 DEBUG   [playbook  .    get_agent_type      :  319] name=HOSTS-B2 type=lxc\n20200317:17:25:30,198 DEBUG   [playbook  .    _get_agent_from_tc_l:  347] Found corresponding type=lxc\n20200317:17:25:30,198 DEBUG   [playbook  .    run_testcase        :  199] agent_name=HOSTS-B2 agent_type=lxc agent_conn=1\n20200317:17:25:30,198 INFO    [playbook  .    _create_agent_conn  :  273] Enter with name=HOSTS-B2 type=lxc conn=1\n20200317:17:25:30,198 DEBUG   [playbook  .    _create_agent_conn  :  283] agent=HOSTS-B2 is already in our list\n20200317:17:25:30,198 DEBUG   [playbook  .    _create_agent_conn  :  303] Connection to HOSTS-B2:1 already exists\n20200317:17:25:30,198 DEBUG   [playbook  .    run_testcase        :  219] Agent already existing\n~~~\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cgustave/checkitbaby", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "checkitbaby", "package_url": "https://pypi.org/project/checkitbaby/", "platform": "", "project_url": "https://pypi.org/project/checkitbaby/", "project_urls": {"Homepage": "https://github.com/cgustave/checkitbaby"}, "release_url": "https://pypi.org/project/checkitbaby/1.5/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Package checkitbaby", "version": "1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Checkitbaby</h1>\n<h2>Definition</h2>\n<p>Checkitbaby is a tool to allow automatic tests validations in a lab.\nIt uses 'agents' to interact with the setup for instance to play simple client/server role, to change the setup topology or even to query the DUT. Agent are connected using ssh. It is recommended to use ssh keys.</p>\n<p><em>Playbooks</em> are defined as a collection of <em>Testcases</em>, each testcase is a simple text file where each lines defines an action applied to an <em>Agent</em>.\nEach line of the testcase can either trigger an action or get some information and see if some requirements are met (checks).<br>\nTest scenario syntax is simple and evolutive, commands are defined keywords and depend on the type of agents targeted.<br>\nMultiple simultaneous connections to agents are supported.  <em>Variables</em> are allowed  in testcase. A variable is just a keyword starting with a dollar sign '$' and defined in a variable file.\nDuring testcases execution, all <em>Run</em> information such as agent ouputs are collected in log files. The test verification would always be done from log file parsing like a human would do. With this, it is possible to easily double-check the test result post-run.  <em>Marks</em> can be used as a delimeter for check verification within the agent log file.</p>\n<p>When all the testcases from a Playbook has run, a <em>Report</em> in a json format is delivered. The report is organized by testcases and include all checks results from the testcase.\nA general Pass/Fail covering all testcases is also included.</p>\n<p>Checkitbaby can be simply run as a script to run all or some testcases against the setup. It is possible to run the testcase in <em>Dry-Run</em> mode to only validate the scenario file syntax for staging.</p>\n<p>Checkitbaby focus is to run against FortiPoc setup, either from withing the PoC (from a testing lxc) or externaly to PoC (from user PC)</p>\n<h2>Installation</h2>\n<p>Will be deliver as python package (to be done)</p>\n<ul>\n<li>Requirements : netcontrol python library: <code>pip install -I netcontrol</code></li>\n</ul>\n<h2>Organization</h2>\n<h4>File tree structure</h4>\n<p>The following directory tree structure is used to organize the tests :</p>\n<ul>\n<li>Directory structure:</li>\n</ul>\n<pre><code>/PLAYBOOK_BASE_PATH : The base name of the playbook location\n\t  ex : /fortipoc/playbooks\n\n/PLAYBOOK_BASE_PATH/ANY_PLAYBOOK_NAME\n\t  ex : /fortipoc/playbooks/advpn\n\n/PLAYBOOK_BASE_PATH/ANY_PLAYBOOK_NAME/agents.conf  : files with agents definitions\n\t  ex : /fortipoc/playbooks/advpn/agents.conf\n\n/PLAYBOOK_BASE_PATH/ANY_PLAYBOOK_NAME/variables.conf :  files with variables definitions\n\t  ex : /fortipoc/playbooks/advpn/variables.conf\n\n/PLAYBOOK_BASE_PATH/ANY_PLAYBOOK_NAME/testcases    : directory containing testcases\n\t  ex : /fortipoc/playbooks/advpn/testcases\n\n/PLAYBOOK_BASE_PATH/ANY_PLAYBOOK_NAME/testcases/NNN_TESTCASE_NAME : one testcase file\n\t                                   with NNN : a number starting from 000 (to order testcases)\n\t\t\t\t\t\t\t\t\t        TESTCASE_NAME : any name for the testcase\n\n      ex : /fortipoc/playbooks/advpn/testcases/001_spoke_to_hub_connectivity.txt\n      ex : /fortipoc/playbooks/advpn/testcases/002_spoke_ipsec_tunnel.txt\n      ex : /fortipoc/playbooks/advpn/testcases/003_spoke_routing.txt\n</code></pre>\n<ul>\n<li>Creating a new playbook:</li>\n</ul>\n<p>Use program create_new_playbook.sh to create a new playbook file tree:\n<code>Usage : ./create_new_playbook.sh &lt;playbook_name&gt;</code></p>\n<h2>Agents</h2>\n<p>Currently supported agents are : Debian LXC, Vyos routers, FortiGate devices, FortiPoC.<br>\nA few agent-less functions are defined (for instance to wait or append some comments or <em>standard marks</em> in the logs)</p>\n<p>The generic syntax of each line of a testcase is as follow :<br>\n<code>__AGENT_NAME__:__AGENT_CONNECTION_ID__ __COMMAND__ __COMMAND_SPECIFIC_DATA__</code></p>\n<p>Each test/validation uses command 'check' followed by the test reference between square bracket [<strong>TEST_NAME</strong>].<br>\nThe <em>TEST_NAME</em> should be uniq in the testcase file.<br>\nA check may include a single or a list of <em>Requirements</em>. Requirements follow keyword 'has', they are provided as key=value pairs separated by spaces.\nA test pass if all provided requirements are met. If not requirement are provided, test would be succefull if an occurence was found.</p>\n<p>Each line starting with comment sign '#' are ignored.<br>\nLines are run sequentially.</p>\n<p>SSH connections to agents are automatically opened and closed at the end of the testcase.</p>\n<p>The following chapter defines each agent command syntax and support.</p>\n<h4>Generic commands</h4>\n<p>Following commands are not agent specific and can be used with all agents</p>\n<pre><code>\n# Append a message on the user output when running the testcase\n# This message is not append on the agent log file.\nmessage \"set Branch 1 connections delays and losses\"\n\n# Appends a mark on the agent log file (but not on user output)\n# This should be used to delimit checks parsing start (see check command 'since')\nHOSTS-B2:1 mark \"receive_ready\"\n\n# Skip all following lines from the testcase\nskip all\n\n# Wait a number of seconds\nwait 30\n</code></pre>\n<h4>Debian LXC</h4>\n<p>Simple ping test.<br>\nConnection (UDP or TCP) one way or two-way test.<br>\nOpen, connect, close connections and send data. It is recommended to use 'marks' to limit the check parsing area.</p>\n<pre><code># Ping test, pass if at least one packet is not lost\n# Delay and loss are added in the report\nLXC1-1:1 ping [con_test] 10.0.2.1\n\n# Ping test, pass if maximum packet loss under 50 %\nLXC1-1:1 ping [con_test] 10.0.2.1 maxloss 50\n\n# Open a tcp server on port 8000  on agent LXC-1 from its connection 1\nLXC-1:1 open tcp 8000\n\n# Append a mark in LXC-1:1 log file\nLXC-1:1 mark \"server ready\"\n\n# Connect to a tcp server at ip 10.0.2.1 on port 8000\nLXC-2:1 connect tcp 10.0.2.1 8000\n\n# Send data string 'alice' on tcp connection from client side\nLXC-2:1 data send \"alice\"\n\n# Check data 'alice' is received server. Test is called '1_traffic_origin_direction'\n# Parsing on server log file starts at mark \"server ready\"\nLXC-1:1 check [1_traffic_origin_direction] data receive \"alice\" since \"server ready\"\n\n# Append a mark \"client ready\" on client log file\nLXC-2:1 mark \"client ready\"\n\n# Send data string 'bob' on tcp connection from server side:\nLXC-1:1 data send \"bob\"\n\n# Check data 'bob' is received on client. Test is called '2_traffic_reply_direction'\n# Search scope on client log file start at mark \"client ready\"\nLXC-2:1 check [2_traffic_reply_direction] data receive \"bob\" since \"client ready\"\n\n# Close tcp socket from client side:\nLXC-1:1 close tcp\n\n</code></pre>\n<h4>Vyos</h4>\n<p>Interact with vyos router. Does not generate tests results in reports.</p>\n<pre><code># Change vyos device R1-B1 traffic-policy named 'WAN' settings \nR1-B1:1 traffic-policy WAN delay 10 loss 0\n</code></pre>\n<h4>FortiGate</h4>\n<p>Interact with FortiGate device, generates test results and retrieve information added to the report.</p>\n<h6>Status</h6>\n<pre><code># Check that FGT-B1 VM license is Valid\nFGT-B1-1:1 check [FGT-B1_license] status has license=True\n\n# Get FortiGate firmware version and VM license status\n# Added in the reports as respectively 'version' and 'license'\nFGT-B1-1:1 get status\n</code></pre>\n<h6>Sessions</h6>\n<p>Checks on FortiGate session table.\nThis command has a first 'filter' section to select the sessions. An implicit 'diag sys session filter clear' is done before the command. Allowed keywords are :<br>\n['vd','sintf','dintf','src','nsrc','dst','proto','sport','nport','dport','policy','expire','duration','proto-state','session-state1','session-state2','ext-src','ext-dst','ext-src-negate','ext-dst-negate','negate']. Multiple selectors can be used if separated with space.</p>\n<p>Supported requirements : 'state', 'src','dest','sport','dport','proto','proto_state','duration','expire','timeout','dev','gwy','total' (number of sessions)</p>\n<pre><code># Checks that a least a session with destination port 9000 exists\nFGT-B1-1:1 check [session_tcp9000] session filter dport=9000\n\n# Checks that a least a session with dport 22 and dest ip 192.168.0.1 exists\nFGT-B1-1 check [ssh_session_exist] session filter dport=22 dest=192.168.0.1\n\n# Checks that session with destination port 5000 has dirty flag set\nFGT-B1-1 check [session_is_dirty] session filter dport=5000 has flag=dirty\n</code></pre>\n<h6>IPsec tunnel</h6>\n<ul>\n<li>Generic checks on IPsec based on <code>diagnose vpn ike status</code></li>\n<li>flush all ike gateway</li>\n</ul>\n<pre><code># Flush all ike gateways ('diagnose vpn ike gateway flush') \nFGT-B1-1:1 flush ike gateway\n\n# Check number of established ike tunnels\nFGT-B1-1:1 check [B1_tunnels] ike status has ike_established=3\n\n# Check number of established IPsec tunnels (created and established)\nFGT-B1-1:1 check [B1_tunnels] ike status has ipsec_created=3 ipsec_established=3\n</code></pre>\n<h6>BGP routes</h6>\n<p>Checks on routing table BGP from <code>get router info routing-table bgp</code></p>\n<pre><code># number of bgp routes is 4 :\nFGT-B1-1 check [bgp_4_routes] bgp has total=4\n\n# bgp route for subnet 10.0.0.0/24 exist :\nFGT-B1-1 check [bgp_subnet_10.0.0.0] bgp has subnet=10.0.0.0/24\n\n# bgp nexthop 10.255.1.253 exist\nFGT-B1-1 check [bgp_nexthop_10.255.1.253] bgp has nexthop=10.255.1.253\n\n# bgp has route toward interface vpn_mpls\nFGT-B1-1 check [bgp_subnet_10.0.0.0] bgp has interface=vpn_mpls\n\n# multiple requirements can be combined\nFGT-B1-1 check [multi] bgp has nexthop=10.255.1.253 nexthop=10.255.2.253 subnet=10.0.0.0/24\nFGT-A:1 check [route_ok] routing table bgp 10.0.0.0/24 next-hop 1.1.1.1 interface port1\n</code></pre>\n<h6>SD-WAN</h6>\n<p>Various checks from <code>diagnose sys virtual-wan-link service __SERVICE__</code></p>\n<pre><code># check alive members :\nFGT-B1-1 check [sdwan_1_member1_alive] sdwan service 1 member 1 has state=alive\n\n# check sla value for a particular member (only available for sla type rule)\nFGT-B1-1 check [sdwan_1_member1_sla] sdwan service 1 member 1 has sla=0x1\n\n# check that member seq 1 is the preferred member on service 1 (aka rule 1)\nFGT-B1-1 check [sdwan_1_preferred] sdwan service 1 member 1 has preferred=1\n</code></pre>\n<h4>FortiPoC</h4>\n<p>Interact with FortiPoC to bring ports up or down\nUsing fpoc link up/down <strong>device</strong> <strong>port</strong></p>\n<pre><code># Bring up link for FGT-B1-port1 switch side\nfpoc:1 link up FGT-B1-1 port1\n\n# Bring down link for FGT-B1-port1 switch side\nfpoc:1 link down FGT-B1-1 port1\n</code></pre>\n<h2>Debug</h2>\n<p>When running, all debugs are stored in file debug.log\nUsefull message (for instance to track syntax error in testcases definition) should be with level WARNING or ERROR.\nProgram is aborted for level ERROR.</p>\n<p>sample :</p>\n<pre><code>20200317:17:25:30,198 DEBUG   [playbook  .    get_agent_type      :  319] name=HOSTS-B2 type=lxc\n20200317:17:25:30,198 DEBUG   [playbook  .    _get_agent_from_tc_l:  347] Found corresponding type=lxc\n20200317:17:25:30,198 DEBUG   [playbook  .    run_testcase        :  199] agent_name=HOSTS-B2 agent_type=lxc agent_conn=1\n20200317:17:25:30,198 INFO    [playbook  .    _create_agent_conn  :  273] Enter with name=HOSTS-B2 type=lxc conn=1\n20200317:17:25:30,198 DEBUG   [playbook  .    _create_agent_conn  :  283] agent=HOSTS-B2 is already in our list\n20200317:17:25:30,198 DEBUG   [playbook  .    _create_agent_conn  :  303] Connection to HOSTS-B2:1 already exists\n20200317:17:25:30,198 DEBUG   [playbook  .    run_testcase        :  219] Agent already existing\n</code></pre>\n\n          </div>"}, "last_serial": 6831696, "releases": {"1.4": [{"comment_text": "", "digests": {"md5": "142f679af22b3e350d45ab7efb505e50", "sha256": "1245315179646b233835cddf92ffbef801b09cd5a38000a75e33b3ea1874e7dd"}, "downloads": -1, "filename": "checkitbaby-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "142f679af22b3e350d45ab7efb505e50", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6140, "upload_time": "2020-03-17T21:14:34", "upload_time_iso_8601": "2020-03-17T21:14:34.140537Z", "url": "https://files.pythonhosted.org/packages/61/61/45e32b7d779f9c29d0f6bd3a08e748a42f133af50a33b49cf29977da6256/checkitbaby-1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dae1eb3763ee62c3bf3eeea20a7cd93", "sha256": "dac3f13c5321122a89f027070593c233e9a8bcf6981c53addc11aa9de5fcfb5b"}, "downloads": -1, "filename": "checkitbaby-1.4.tar.gz", "has_sig": false, "md5_digest": "1dae1eb3763ee62c3bf3eeea20a7cd93", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6109, "upload_time": "2020-03-17T21:14:36", "upload_time_iso_8601": "2020-03-17T21:14:36.361368Z", "url": "https://files.pythonhosted.org/packages/72/f3/6bde09476161eb36f1d719b0e543d7df0959a123729d2489cb550543ab68/checkitbaby-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "664a01e128ede7091d72ccaf3e2811fe", "sha256": "0c8fdf8c0c9d1d05562e51e21b9d10070862121eae191969888826bcf8efa74b"}, "downloads": -1, "filename": "checkitbaby-1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "664a01e128ede7091d72ccaf3e2811fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6139, "upload_time": "2020-03-17T21:50:38", "upload_time_iso_8601": "2020-03-17T21:50:38.264685Z", "url": "https://files.pythonhosted.org/packages/a7/8f/d2aaabd62f12108cbf84f599f9bdc700c0d40ea6020039bf1b2fe04b0c0f/checkitbaby-1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7119bafd0906ce881f7d0ef92ce4504", "sha256": "6cac010454273573be08587bfe0c95802f36536485d8dd6f37bb42d4ea1f0fdb"}, "downloads": -1, "filename": "checkitbaby-1.5.tar.gz", "has_sig": false, "md5_digest": "d7119bafd0906ce881f7d0ef92ce4504", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6104, "upload_time": "2020-03-17T21:50:40", "upload_time_iso_8601": "2020-03-17T21:50:40.110784Z", "url": "https://files.pythonhosted.org/packages/9d/44/3f7143d94450a293f1f5a081aee1ae56efe7439e60d2a17826302fda2604/checkitbaby-1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "664a01e128ede7091d72ccaf3e2811fe", "sha256": "0c8fdf8c0c9d1d05562e51e21b9d10070862121eae191969888826bcf8efa74b"}, "downloads": -1, "filename": "checkitbaby-1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "664a01e128ede7091d72ccaf3e2811fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6139, "upload_time": "2020-03-17T21:50:38", "upload_time_iso_8601": "2020-03-17T21:50:38.264685Z", "url": "https://files.pythonhosted.org/packages/a7/8f/d2aaabd62f12108cbf84f599f9bdc700c0d40ea6020039bf1b2fe04b0c0f/checkitbaby-1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7119bafd0906ce881f7d0ef92ce4504", "sha256": "6cac010454273573be08587bfe0c95802f36536485d8dd6f37bb42d4ea1f0fdb"}, "downloads": -1, "filename": "checkitbaby-1.5.tar.gz", "has_sig": false, "md5_digest": "d7119bafd0906ce881f7d0ef92ce4504", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6104, "upload_time": "2020-03-17T21:50:40", "upload_time_iso_8601": "2020-03-17T21:50:40.110784Z", "url": "https://files.pythonhosted.org/packages/9d/44/3f7143d94450a293f1f5a081aee1ae56efe7439e60d2a17826302fda2604/checkitbaby-1.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:20 2020"}