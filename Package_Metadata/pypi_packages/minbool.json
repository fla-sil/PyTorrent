{"info": {"author": "Chris Rossi", "author_email": "chris@archimedeanco.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python"], "description": "=======\nminbool\n=======\n\n`minbool` is a small library for minimizing boolean expressions. It does this\nusing the the Quine-McCluskey algorithm.\n\nSimplify an Expression\n======================\n\n::\n\n    >>> import minbool\n    >>> result = minbool.simplify(\"A and not C or A and C\")\n    >>> result\n    <minbool.ASTBooleanExpression object at 0xb723606c>\n    >>> result.ast()\n    <_ast.Name object at 0xb722ef2c>\n    >>> str(result)\n    'A'\n\nSynthesize an Expression\n========================\n\nIt is sometimes useful to synthesize a boolean expression from an existing \nfunction::\n\n    >>> def f(A, B, C, D):\n    ...     return A if B else C or D\n    ... \n    >>> result = minbool.synthesize(f, 'A', 'B', 'C', 'D')\n    >>> result\n    <minbool.BooleanExpression object at 0xb72361cc>\n    >>> str(result)\n    '(not(B) and D) or (not(B) and C) or (A and B)'\n\nCommand Line Use\n================\n\nThe minbool egg installs a console script: 'simplify'::\n\n    $ simplify A and B or A and C and not C\n    (A and B)\n\nPerformance\n===========\n\nPerformance is big O exponential.  In each case a truthtable is constructed, \nwhere the number of rows is 2**N, where N is the number of variables in the \nexpression.  \n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "minbool", "package_url": "https://pypi.org/project/minbool/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/minbool/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/minbool/1.0/", "requires_dist": null, "requires_python": null, "summary": "Implementation of Quine-McCluskey algorithm for minimizing boolean expressions.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><cite>minbool</cite> is a small library for minimizing boolean expressions. It does this\nusing the the Quine-McCluskey algorithm.</p>\n<div id=\"simplify-an-expression\">\n<h2>Simplify an Expression</h2>\n<pre>&gt;&gt;&gt; import minbool\n&gt;&gt;&gt; result = minbool.simplify(\"A and not C or A and C\")\n&gt;&gt;&gt; result\n&lt;minbool.ASTBooleanExpression object at 0xb723606c&gt;\n&gt;&gt;&gt; result.ast()\n&lt;_ast.Name object at 0xb722ef2c&gt;\n&gt;&gt;&gt; str(result)\n'A'\n</pre>\n</div>\n<div id=\"synthesize-an-expression\">\n<h2>Synthesize an Expression</h2>\n<p>It is sometimes useful to synthesize a boolean expression from an existing\nfunction:</p>\n<pre>&gt;&gt;&gt; def f(A, B, C, D):\n...     return A if B else C or D\n...\n&gt;&gt;&gt; result = minbool.synthesize(f, 'A', 'B', 'C', 'D')\n&gt;&gt;&gt; result\n&lt;minbool.BooleanExpression object at 0xb72361cc&gt;\n&gt;&gt;&gt; str(result)\n'(not(B) and D) or (not(B) and C) or (A and B)'\n</pre>\n</div>\n<div id=\"command-line-use\">\n<h2>Command Line Use</h2>\n<p>The minbool egg installs a console script: \u2018simplify\u2019:</p>\n<pre>$ simplify A and B or A and C and not C\n(A and B)\n</pre>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>Performance is big O exponential.  In each case a truthtable is constructed,\nwhere the number of rows is 2**N, where N is the number of variables in the\nexpression.</p>\n</div>\n\n          </div>"}, "last_serial": 794792, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "cd2fe4b4184ee2649aa209b4ca27ee6d", "sha256": "b40a42dcfece39560da6134e9153a958748868e67ad2302870db7481a687c09c"}, "downloads": -1, "filename": "minbool-1.0.tar.gz", "has_sig": false, "md5_digest": "cd2fe4b4184ee2649aa209b4ca27ee6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12967, "upload_time": "2012-06-26T21:09:39", "upload_time_iso_8601": "2012-06-26T21:09:39.559442Z", "url": "https://files.pythonhosted.org/packages/89/65/fff7b3ca25f41195e9b42336684360536b7991e1fbcfe92b8239b71b5e2c/minbool-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd2fe4b4184ee2649aa209b4ca27ee6d", "sha256": "b40a42dcfece39560da6134e9153a958748868e67ad2302870db7481a687c09c"}, "downloads": -1, "filename": "minbool-1.0.tar.gz", "has_sig": false, "md5_digest": "cd2fe4b4184ee2649aa209b4ca27ee6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12967, "upload_time": "2012-06-26T21:09:39", "upload_time_iso_8601": "2012-06-26T21:09:39.559442Z", "url": "https://files.pythonhosted.org/packages/89/65/fff7b3ca25f41195e9b42336684360536b7991e1fbcfe92b8239b71b5e2c/minbool-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:35 2020"}