{"info": {"author": "Tanner Burns", "author_email": "tjburns102@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# Ridoculous\n\n    Easily document any python object to a linked table of contents and markdown\n\n# Documentation\n\n   The documentation below was generated using Ridoculous by running the following:\n```python\nimport ridoculous.core\nridoculous.Ridoculous.makedocs(ridoculous.core, 'RIDOCULOUS_README.md')\n```\n\n- [ ridoculous.core ](#ridoculous.core_1529377134)\n\t- [ ridoculous.core.ClassRDoc ](#ridoculous.core.ClassRDoc_277831325)\n\t\t- [ ClassRDoc.__init__ ](#ClassRDoc.__init___1734499510)\n\t\t- [ ClassRDoc.__repr__ ](#ClassRDoc.__repr___684002517)\n\t\t- [ ClassRDoc.__str__ ](#ClassRDoc.__str___1102790725)\n\t- [ ridoculous.core.FunctionRDoc ](#ridoculous.core.FunctionRDoc_2006125902)\n\t\t- [ FunctionRDoc.__init__ ](#FunctionRDoc.__init___254940244)\n\t\t- [ FunctionRDoc.__repr__ ](#FunctionRDoc.__repr___1802332811)\n\t\t- [ FunctionRDoc.__str__ ](#FunctionRDoc.__str___374102979)\n\t- [ ridoculous.core.ModuleRDoc ](#ridoculous.core.ModuleRDoc_438349111)\n\t\t- [ ModuleRDoc.__init__ ](#ModuleRDoc.__init___273728676)\n\t\t- [ ModuleRDoc.__repr__ ](#ModuleRDoc.__repr___737580618)\n\t\t- [ ModuleRDoc.__str__ ](#ModuleRDoc.__str___2135828915)\n\t- [ ridoculous.core.RDocObject ](#ridoculous.core.RDocObject_973396301)\n\t\t- [ RDocObject.__getnewargs__ ](#RDocObject.__getnewargs___1737972049)\n\t\t- [ RDocObject.__new__ ](#RDocObject.__new___671582273)\n\t\t- [ RDocObject.__repr__ ](#RDocObject.__repr___350994193)\n\t\t- [ RDocObject._asdict ](#RDocObject._asdict_1837743226)\n\t\t- [ RDocObject._replace ](#RDocObject._replace_991483276)\n\t- [ ridoculous.core.Ridoculous ](#ridoculous.core.Ridoculous_983589323)\n\t\t- [ Ridoculous.__init__ ](#Ridoculous.__init___2004908398)\n\t\t- [ Ridoculous.make_doc_list ](#Ridoculous.make_doc_list_1854256711)\n\t\t- [ Ridoculous.write ](#Ridoculous.write_1109144762)\n\n\n<a name=\"ridoculous.core_1529377134\"></a>\n## ridoculous.core\n\n<a name=\"ridoculous.core.ClassRDoc_277831325\"></a>\n### ridoculous.core.ClassRDoc(self, obj: object = None)\n\nThis class documents class objects. The format will look like the following for a documented class. Link is\n    used for a table of contents and the hash of the name is used to keep the links unique.\n\n        Table of Contents String:\n            - [ name ](#link)\n\n        Markdown string:\n            <a name=\"[link]\"></a>\n            #### [name]\n\n                [docstring]\n\n    \n\n<a name=\"ClassRDoc.__init___1734499510\"></a>\n#### `ClassRDoc.__init__(self, obj: object = None)`\n\nWhen a new `ClassRDoc` is created, all attributes are set during init. First the `obj` that was passed\n        will be verified as a class object using the inspect library. The name will be found using a regex pattern,\n        the signature is obtained using the inspect library, the docstring is copied and then the document attributes\n        are created. The link is created to connect the table of contents to the header, the table of contents string\n        is then created, and lastly the markdown for the class object.\n\n        Args:\n            obj {object} -- object to document (should be a function)\n\n        \n\n<a name=\"ClassRDoc.__repr___684002517\"></a>\n#### `ClassRDoc.__repr__(self)`\n\noverloaded for ease of use, when class is printed, it will be the str of the markdown generated for the\n        instance of `ClassRDoc`\n        \n\n<a name=\"ClassRDoc.__str___1102790725\"></a>\n#### `ClassRDoc.__str__(self)`\n\noverloaded for ease of use\n        \n\n<a name=\"ridoculous.core.FunctionRDoc_2006125902\"></a>\n### ridoculous.core.FunctionRDoc(self, obj: object = None)\n\nThis class documents functions. The format will look like the following for a function. Link is used for a\n    table of contents and the hash of the name is used to keep the links unique.\n\n        Table of Contents String:\n            - [ name ](#link)\n\n        Markdown string:\n            <a name=\"[link]\"></a>\n            #### [name]\n\n                [docstring]\n\n    \n\n<a name=\"FunctionRDoc.__init___254940244\"></a>\n#### `FunctionRDoc.__init__(self, obj: object = None)`\n\nWhen a new `FunctionRDoc` is created, all attributes are set during init. First the `obj` that was passed\n        will be verified as a function using the inspect library. The name will be found using a regex pattern,\n        the signature is obtained using the inspect library, the docstring is copied and then the document attributes\n        are created. The link is created to connect the table of contents to the header, the table of contents string\n        is then created, and lastly the markdown for the function.\n\n        Args:\n            obj {object} -- object to document (should be a function)\n\n        \n\n<a name=\"FunctionRDoc.__repr___1802332811\"></a>\n#### `FunctionRDoc.__repr__(self) -> str`\n\noverloaded for ease of use, when class is printed, it will be the str of the markdown generated for the\n        instance of `FunctionRDoc`\n        \n\n<a name=\"FunctionRDoc.__str___374102979\"></a>\n#### `FunctionRDoc.__str__(self) -> str`\n\noverloaded for ease of use\n        \n\n<a name=\"ridoculous.core.ModuleRDoc_438349111\"></a>\n### ridoculous.core.ModuleRDoc(self, obj: object = None)\n\nThis class documents module objects. The format will look like the following for a module. Link is\n    used for a table of contents and the hash of the name is used to keep the links unique.\n\n        Table of Contents String:\n            - [ name ](#link)\n\n        Markdown string:\n            <a name=\"[link]\"></a>\n            #### [name]\n\n    \n\n<a name=\"ModuleRDoc.__init___273728676\"></a>\n#### `ModuleRDoc.__init__(self, obj: object = None)`\n\nWhen a new `ModuleRDoc` is created, all attributes are set during init. First the `obj` that was passed\n        will be verified as a module using the inspect library. The name will be the `__name__` of the object.\n        The link is created to connect the table of contents to the header, the table of contents string\n        is then created, and lastly the markdown for the module.\n\n        Args:\n            obj {object} -- object to document\n\n        \n\n<a name=\"ModuleRDoc.__repr___737580618\"></a>\n#### `ModuleRDoc.__repr__(self)`\n\noverloaded for ease of use, when class is printed, it will be the str of the markdown generated for the\n        instance of `ModuleRDoc`\n        \n\n<a name=\"ModuleRDoc.__str___2135828915\"></a>\n#### `ModuleRDoc.__str__(self)`\n\noverloaded for ease of use\n        \n\n<a name=\"ridoculous.core.RDocObject_973396301\"></a>\n### ridoculous.core.RDocObject(self, /, *args, **kwargs)\n\nAn `RDocObject` is a container object that is the starting object to document. The name will be taken\n    from the initial object provided. It will then be walked to find any sub modules, classes, and functions inside the\n    given module(s)\n\n    Args:\n        name {str} -- name of RDocObject\n        modules {List[ModuleRDoc]} -- list holding the documented modules\n    \n\n<a name=\"RDocObject.__getnewargs___1737972049\"></a>\n#### `RDocObject.__getnewargs__(self)`\n\nReturn self as a plain tuple.  Used by copy and pickle.\n\n<a name=\"RDocObject.__new___671582273\"></a>\n#### `RDocObject.__new__(_cls, name: str, modules: List[ridoculous.core.ModuleRDoc])`\n\nCreate new instance of RDocObject(name, modules)\n\n<a name=\"RDocObject.__repr___350994193\"></a>\n#### `RDocObject.__repr__(self)`\n\nReturn a nicely formatted representation string\n\n<a name=\"RDocObject._asdict_1837743226\"></a>\n#### `RDocObject._asdict(self)`\n\nReturn a new OrderedDict which maps field names to their values.\n\n<a name=\"RDocObject._replace_991483276\"></a>\n#### `RDocObject._replace(_self, **kwds)`\n\nReturn a new RDocObject object replacing specified fields with new values\n\n<a name=\"ridoculous.core.Ridoculous_983589323\"></a>\n### ridoculous.core.Ridoculous(self, objects: List[object] = None)\n\nRidoculous - making documentation for any python object\n        The `Ridoculous` class is meant to take any object and document all modules, classes, and functions found\n        inside that object. Ridoculous relies heavily on the code being documented using docstrings that are easy\n        to read and understand. A table of contents that links to all the found objects will be creating along with\n        the documents that were built.\n\n        The goal of this utility is to help document code cleanly and quickly, that will then be used inside a readme\n        or document to display the information found from the objects.\n\n    \n\n<a name=\"Ridoculous.__init___2004908398\"></a>\n#### `Ridoculous.__init__(self, objects: List[object] = None)`\n\nThe given list of objects will be parsed and ready to be documented. The list of strings that are written to\n        the file are held in `.docs`. This is a raw version of what is dumped into the final output.\n\n        Args:\n            objects {List[object]} -- a list of object to document\n        \n\n<a name=\"Ridoculous.make_doc_list_1854256711\"></a>\n#### `Ridoculous.make_doc_list(self)`\n\ncreates the list of markdown strings to be help in `.docs`. firstly iterates over the RDocObjects and creates\n        a table of contents, lastly reiterating over the RDocObjects and ordering the markdown\n\n        return:\n            list -- a list of markdown strings to be written in a file\n        \n\n<a name=\"Ridoculous.write_1109144762\"></a>\n#### `Ridoculous.write(self, filename: str = 'GENERATED_README.md')`\n\nwrite `.docs` to a file\n\n        Args:\n            filename {str} -- the path of the filename to save the markdown as [default: GENERATED_README.md]", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/tannerburns/ridoculous", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ridoculous", "package_url": "https://pypi.org/project/ridoculous/", "platform": "", "project_url": "https://pypi.org/project/ridoculous/", "project_urls": {"Homepage": "https://www.github.com/tannerburns/ridoculous"}, "release_url": "https://pypi.org/project/ridoculous/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Easily document any object to a markdown file", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Ridoculous</h1>\n<pre><code>Easily document any python object to a linked table of contents and markdown\n</code></pre>\n<h1>Documentation</h1>\n<p>The documentation below was generated using Ridoculous by running the following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ridoculous.core</span>\n<span class=\"n\">ridoculous</span><span class=\"o\">.</span><span class=\"n\">Ridoculous</span><span class=\"o\">.</span><span class=\"n\">makedocs</span><span class=\"p\">(</span><span class=\"n\">ridoculous</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"p\">,</span> <span class=\"s1\">'RIDOCULOUS_README.md'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><a href=\"#ridoculous.core_1529377134\" rel=\"nofollow\"> ridoculous.core </a>\n<ul>\n<li><a href=\"#ridoculous.core.ClassRDoc_277831325\" rel=\"nofollow\"> ridoculous.core.ClassRDoc </a>\n<ul>\n<li><a href=\"#ClassRDoc.__init___1734499510\" rel=\"nofollow\"> ClassRDoc.<strong>init</strong> </a></li>\n<li><a href=\"#ClassRDoc.__repr___684002517\" rel=\"nofollow\"> ClassRDoc.<strong>repr</strong> </a></li>\n<li><a href=\"#ClassRDoc.__str___1102790725\" rel=\"nofollow\"> ClassRDoc.<strong>str</strong> </a></li>\n</ul>\n</li>\n<li><a href=\"#ridoculous.core.FunctionRDoc_2006125902\" rel=\"nofollow\"> ridoculous.core.FunctionRDoc </a>\n<ul>\n<li><a href=\"#FunctionRDoc.__init___254940244\" rel=\"nofollow\"> FunctionRDoc.<strong>init</strong> </a></li>\n<li><a href=\"#FunctionRDoc.__repr___1802332811\" rel=\"nofollow\"> FunctionRDoc.<strong>repr</strong> </a></li>\n<li><a href=\"#FunctionRDoc.__str___374102979\" rel=\"nofollow\"> FunctionRDoc.<strong>str</strong> </a></li>\n</ul>\n</li>\n<li><a href=\"#ridoculous.core.ModuleRDoc_438349111\" rel=\"nofollow\"> ridoculous.core.ModuleRDoc </a>\n<ul>\n<li><a href=\"#ModuleRDoc.__init___273728676\" rel=\"nofollow\"> ModuleRDoc.<strong>init</strong> </a></li>\n<li><a href=\"#ModuleRDoc.__repr___737580618\" rel=\"nofollow\"> ModuleRDoc.<strong>repr</strong> </a></li>\n<li><a href=\"#ModuleRDoc.__str___2135828915\" rel=\"nofollow\"> ModuleRDoc.<strong>str</strong> </a></li>\n</ul>\n</li>\n<li><a href=\"#ridoculous.core.RDocObject_973396301\" rel=\"nofollow\"> ridoculous.core.RDocObject </a>\n<ul>\n<li><a href=\"#RDocObject.__getnewargs___1737972049\" rel=\"nofollow\"> RDocObject.<strong>getnewargs</strong> </a></li>\n<li><a href=\"#RDocObject.__new___671582273\" rel=\"nofollow\"> RDocObject.<strong>new</strong> </a></li>\n<li><a href=\"#RDocObject.__repr___350994193\" rel=\"nofollow\"> RDocObject.<strong>repr</strong> </a></li>\n<li><a href=\"#RDocObject._asdict_1837743226\" rel=\"nofollow\"> RDocObject._asdict </a></li>\n<li><a href=\"#RDocObject._replace_991483276\" rel=\"nofollow\"> RDocObject._replace </a></li>\n</ul>\n</li>\n<li><a href=\"#ridoculous.core.Ridoculous_983589323\" rel=\"nofollow\"> ridoculous.core.Ridoculous </a>\n<ul>\n<li><a href=\"#Ridoculous.__init___2004908398\" rel=\"nofollow\"> Ridoculous.<strong>init</strong> </a></li>\n<li><a href=\"#Ridoculous.make_doc_list_1854256711\" rel=\"nofollow\"> Ridoculous.make_doc_list </a></li>\n<li><a href=\"#Ridoculous.write_1109144762\" rel=\"nofollow\"> Ridoculous.write </a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><a></a></p>\n<h2>ridoculous.core</h2>\n<p><a></a></p>\n<h3>ridoculous.core.ClassRDoc(self, obj: object = None)</h3>\n<p>This class documents class objects. The format will look like the following for a documented class. Link is\nused for a table of contents and the hash of the name is used to keep the links unique.</p>\n<pre><code>    Table of Contents String:\n        - [ name ](#link)\n\n    Markdown string:\n        &lt;a name=\"[link]\"&gt;&lt;/a&gt;\n        #### [name]\n\n            [docstring]\n</code></pre>\n<p><a></a></p>\n<h4><code>ClassRDoc.__init__(self, obj: object = None)</code></h4>\n<p>When a new <code>ClassRDoc</code> is created, all attributes are set during init. First the <code>obj</code> that was passed\nwill be verified as a class object using the inspect library. The name will be found using a regex pattern,\nthe signature is obtained using the inspect library, the docstring is copied and then the document attributes\nare created. The link is created to connect the table of contents to the header, the table of contents string\nis then created, and lastly the markdown for the class object.</p>\n<pre><code>    Args:\n        obj {object} -- object to document (should be a function)\n</code></pre>\n<p><a></a></p>\n<h4><code>ClassRDoc.__repr__(self)</code></h4>\n<p>overloaded for ease of use, when class is printed, it will be the str of the markdown generated for the\ninstance of <code>ClassRDoc</code></p>\n<p><a></a></p>\n<h4><code>ClassRDoc.__str__(self)</code></h4>\n<p>overloaded for ease of use</p>\n<p><a></a></p>\n<h3>ridoculous.core.FunctionRDoc(self, obj: object = None)</h3>\n<p>This class documents functions. The format will look like the following for a function. Link is used for a\ntable of contents and the hash of the name is used to keep the links unique.</p>\n<pre><code>    Table of Contents String:\n        - [ name ](#link)\n\n    Markdown string:\n        &lt;a name=\"[link]\"&gt;&lt;/a&gt;\n        #### [name]\n\n            [docstring]\n</code></pre>\n<p><a></a></p>\n<h4><code>FunctionRDoc.__init__(self, obj: object = None)</code></h4>\n<p>When a new <code>FunctionRDoc</code> is created, all attributes are set during init. First the <code>obj</code> that was passed\nwill be verified as a function using the inspect library. The name will be found using a regex pattern,\nthe signature is obtained using the inspect library, the docstring is copied and then the document attributes\nare created. The link is created to connect the table of contents to the header, the table of contents string\nis then created, and lastly the markdown for the function.</p>\n<pre><code>    Args:\n        obj {object} -- object to document (should be a function)\n</code></pre>\n<p><a></a></p>\n<h4><code>FunctionRDoc.__repr__(self) -&gt; str</code></h4>\n<p>overloaded for ease of use, when class is printed, it will be the str of the markdown generated for the\ninstance of <code>FunctionRDoc</code></p>\n<p><a></a></p>\n<h4><code>FunctionRDoc.__str__(self) -&gt; str</code></h4>\n<p>overloaded for ease of use</p>\n<p><a></a></p>\n<h3>ridoculous.core.ModuleRDoc(self, obj: object = None)</h3>\n<p>This class documents module objects. The format will look like the following for a module. Link is\nused for a table of contents and the hash of the name is used to keep the links unique.</p>\n<pre><code>    Table of Contents String:\n        - [ name ](#link)\n\n    Markdown string:\n        &lt;a name=\"[link]\"&gt;&lt;/a&gt;\n        #### [name]\n</code></pre>\n<p><a></a></p>\n<h4><code>ModuleRDoc.__init__(self, obj: object = None)</code></h4>\n<p>When a new <code>ModuleRDoc</code> is created, all attributes are set during init. First the <code>obj</code> that was passed\nwill be verified as a module using the inspect library. The name will be the <code>__name__</code> of the object.\nThe link is created to connect the table of contents to the header, the table of contents string\nis then created, and lastly the markdown for the module.</p>\n<pre><code>    Args:\n        obj {object} -- object to document\n</code></pre>\n<p><a></a></p>\n<h4><code>ModuleRDoc.__repr__(self)</code></h4>\n<p>overloaded for ease of use, when class is printed, it will be the str of the markdown generated for the\ninstance of <code>ModuleRDoc</code></p>\n<p><a></a></p>\n<h4><code>ModuleRDoc.__str__(self)</code></h4>\n<p>overloaded for ease of use</p>\n<p><a></a></p>\n<h3>ridoculous.core.RDocObject(self, /, *args, **kwargs)</h3>\n<p>An <code>RDocObject</code> is a container object that is the starting object to document. The name will be taken\nfrom the initial object provided. It will then be walked to find any sub modules, classes, and functions inside the\ngiven module(s)</p>\n<pre><code>Args:\n    name {str} -- name of RDocObject\n    modules {List[ModuleRDoc]} -- list holding the documented modules\n</code></pre>\n<p><a></a></p>\n<h4><code>RDocObject.__getnewargs__(self)</code></h4>\n<p>Return self as a plain tuple.  Used by copy and pickle.</p>\n<p><a></a></p>\n<h4><code>RDocObject.__new__(_cls, name: str, modules: List[ridoculous.core.ModuleRDoc])</code></h4>\n<p>Create new instance of RDocObject(name, modules)</p>\n<p><a></a></p>\n<h4><code>RDocObject.__repr__(self)</code></h4>\n<p>Return a nicely formatted representation string</p>\n<p><a></a></p>\n<h4><code>RDocObject._asdict(self)</code></h4>\n<p>Return a new OrderedDict which maps field names to their values.</p>\n<p><a></a></p>\n<h4><code>RDocObject._replace(_self, **kwds)</code></h4>\n<p>Return a new RDocObject object replacing specified fields with new values</p>\n<p><a></a></p>\n<h3>ridoculous.core.Ridoculous(self, objects: List[object] = None)</h3>\n<p>Ridoculous - making documentation for any python object\nThe <code>Ridoculous</code> class is meant to take any object and document all modules, classes, and functions found\ninside that object. Ridoculous relies heavily on the code being documented using docstrings that are easy\nto read and understand. A table of contents that links to all the found objects will be creating along with\nthe documents that were built.</p>\n<pre><code>    The goal of this utility is to help document code cleanly and quickly, that will then be used inside a readme\n    or document to display the information found from the objects.\n</code></pre>\n<p><a></a></p>\n<h4><code>Ridoculous.__init__(self, objects: List[object] = None)</code></h4>\n<p>The given list of objects will be parsed and ready to be documented. The list of strings that are written to\nthe file are held in <code>.docs</code>. This is a raw version of what is dumped into the final output.</p>\n<pre><code>    Args:\n        objects {List[object]} -- a list of object to document\n</code></pre>\n<p><a></a></p>\n<h4><code>Ridoculous.make_doc_list(self)</code></h4>\n<p>creates the list of markdown strings to be help in <code>.docs</code>. firstly iterates over the RDocObjects and creates\na table of contents, lastly reiterating over the RDocObjects and ordering the markdown</p>\n<pre><code>    return:\n        list -- a list of markdown strings to be written in a file\n</code></pre>\n<p><a></a></p>\n<h4><code>Ridoculous.write(self, filename: str = 'GENERATED_README.md')</code></h4>\n<p>write <code>.docs</code> to a file</p>\n<pre><code>    Args:\n        filename {str} -- the path of the filename to save the markdown as [default: GENERATED_README.md]\n</code></pre>\n\n          </div>"}, "last_serial": 6782064, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "a233da3781ee1fd15ffb61686542168a", "sha256": "2828169bece5a3af559c95bf38187b1f55413ce8ba3727fc16f85b52728c0038"}, "downloads": -1, "filename": "ridoculous-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a233da3781ee1fd15ffb61686542168a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3724, "upload_time": "2020-03-05T18:59:53", "upload_time_iso_8601": "2020-03-05T18:59:53.423762Z", "url": "https://files.pythonhosted.org/packages/c9/6a/b1527a74f5e134d19a47bb71fb366308abbb8e3863e930a0efdc669ecd88/ridoculous-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "dcb23cb550b773df363c43aab1458956", "sha256": "88ae1a3e6e9d272c01ea2ef0335cbbef70b330b9301fde47c3a78486a266933d"}, "downloads": -1, "filename": "ridoculous-0.0.4.tar.gz", "has_sig": false, "md5_digest": "dcb23cb550b773df363c43aab1458956", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6804, "upload_time": "2020-03-10T01:44:40", "upload_time_iso_8601": "2020-03-10T01:44:40.039816Z", "url": "https://files.pythonhosted.org/packages/7c/24/dc3c3c971ff253e44f94a04ebcb840a86ee6ed035d71caee5d4ddd915e31/ridoculous-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dcb23cb550b773df363c43aab1458956", "sha256": "88ae1a3e6e9d272c01ea2ef0335cbbef70b330b9301fde47c3a78486a266933d"}, "downloads": -1, "filename": "ridoculous-0.0.4.tar.gz", "has_sig": false, "md5_digest": "dcb23cb550b773df363c43aab1458956", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6804, "upload_time": "2020-03-10T01:44:40", "upload_time_iso_8601": "2020-03-10T01:44:40.039816Z", "url": "https://files.pythonhosted.org/packages/7c/24/dc3c3c971ff253e44f94a04ebcb840a86ee6ed035d71caee5d4ddd915e31/ridoculous-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:43 2020"}