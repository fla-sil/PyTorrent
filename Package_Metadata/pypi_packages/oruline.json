{"info": {"author": "Ganesh Kumar T K", "author_email": "ganeshkumartk@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Build Tools"], "description": "Oruline !\n=========\n\n[![Build Status](https://travis-ci.org/csvoss/onelinerizer.svg?branch=master)](https://travis-ci.org/csvoss/onelinerizer)\n\n\nConvert any Python file into a single line of code which has the same functionality.\n\"Oru\" means *One/Single* (in tamil). So, Single line == Oruline !\n\nNo newlines allowed. No semicolons allowed, either.\n\n\n\nUser Installation and Usage\n---\n\nInstall via `pip` from PyPI:\n\n```sh\n$ pip install oruline\n```\n\nUse either the command line function or the Python module:\n\n```sh\n$ echo \"def f(x):\\n    print x\\nf(4)\" > sandbox.py\n$ oruliner sandbox.py --debug\n$ oruliner sandbox_ol.py\n```\n\n```python\nfrom oruliner import oruline\noruline(\"def f(x):\\n    print x\\nf(4)\")\n```\n\nExamples\n--------\n\n**Before:**\n\n```python\nx = 3\ny = 4\nprint (x < y < 5)\n```\n\n**After:**\n\n```python\n(lambda __builtin__: (lambda __print, __y, d: [[__print(d.x<d.y<5) for d.y in [(4)]][0] for d.x in [(3)]][0])(__builtin__.__dict__['print'],(lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))),type('StateDict',(),__builtin__.__dict__)()))(__import__('__builtin__'))\n```\n\nThat line looks complicated, because we need some tricks to import the print function and to support certain tricks which are needed for more complicated features such as `while` and `if`. For a program as simple as this one, though, you can think of it as working this way:\n\n```python\n(lambda x: (lambda y: print(x<y<5))(4))(3)\n```\n\n**Before:**\n\n```python\ndef f(x):\n    return x+5\nprint f(13)\n```\n\n**After:**\n\n```python\n(lambda __builtin__: (lambda __print, __y, d: [__print(d.f(13)) for d.f in [(lambda x:[(d.x+5) for d.x in [(x)]][0])]][0])(__builtin__.__dict__['print'],(lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))),type('StateDict',(),__builtin__.__dict__)()))(__import__('__builtin__'))\n```\n\n...or, if you want to think about something more simplified:\n\n```python\n(lambda f: print(f(13)))(lambda x: x+5)\n```\n\n**Before:**\n\n```python\ndef guess_my_number(n):\n    while True:\n        user_input = raw_input(\"Enter a positive integer to guess: \")\n        if len(user_input)==0 or not user_input.isdigit():\n            print \"Not a positive integer!\"\n        else:\n            user_input = int(user_input)\n            if user_input > n:\n                print \"Too big! Try again!\"\n            elif user_input < n:\n                print \"Too small! Try again!\"\n            else:\n                print \"You win!\"\n                return True\nguess_my_number(42)\n```\n\n**After:**\n\n```python\n(lambda __builtin__: (lambda __print, __y, d: [(lambda ___: None)(d.guess_my_number(42)) for d.guess_my_number in [(lambda n:[(__y(lambda __this: (lambda d: (lambda __after: [(lambda __after: (lambda ___: __after(d))(__print('Not a positive integer!')) if (d.len(d.user_input)==0 or (not d.user_input.isdigit())) else [(lambda __after: (lambda ___: __after(d))(__print('Too big! Try again!')) if d.user_input>d.n else (lambda __after: (lambda ___: __after(d))(__print('Too small! Try again!')) if d.user_input<d.n else (lambda ___: d.True)(__print('You win!')))(lambda d: __after(d)))(lambda d: __after(d)) for d.user_input in [(d.int(d.user_input))]][0])(lambda d: __this(d)) for d.user_input in [(d.raw_input('Enter a positive integer to guess: '))]][0] if d.True else __after(d))(lambda d: None))))(d) for d.n in [(n)]][0])]][0])(__builtin__.__dict__['print'],(lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))),type('StateDict',(),__builtin__.__dict__)()))(__import__('__builtin__'))\n```\n\nFAQ\n---\n\n### Oh dear God why?\n\nYeah. I'm sorry. But on the other hand, why not?\n\n### Can't you use semicolons?\n\nThat would be against the spirit of this exercise. Why pass up a perfectly good excuse to abuse [lambda functions](https://docs.python.org/2/reference/expressions.html#lambda), [ternary expressions](https://docs.python.org/2/reference/expressions.html#conditional-expressions), [list comprehensions](https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions), and even the occasional [Y combinator](http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator)? Never pass up an opportunity to use the Y combinator.\n\nAnalysis\n--------\n### Output program size\n\n*O(n)*. No code is ever duplicated, so the one-lined code produced is linear in the size of the input code.\n\n### Runtime of one-lined code\n\nI have no reason to believe the resulting code, however absurd, is more than a constant factor slower than the original code. Since while loops, etc. are implemented using recursive function calls, causing more overhead for setting up those function calls, the constant factor is likely to be somewhat bad.\n\n### Tips\n\nThe one-lined code tends to contain many nested lambdas; if there are too many, Python will refuse to run it.\n\n```sh\n$ python main_ol.py\ns_push: parser stack overflow\nMemoryError\n```\n\nThis can be fixed using pypy.\n\n```sh\n$ pypy main_ol.py\n````\n\nHowever, since while loops and for loops are implemented with recursion, you might encounter `maximum recursion depth exceeded` errors during runtime if your loops go on for too long.\n\nTo get around this, you can put\n\n```python\nimport sys\nsys.setrecursionlimit(new_limit)\n```\n\nin your original Python code. (oneliner will not place this command in for you.)\n\n\nNot Implemented\n---------------\n* from foo import *\n\nOpen Problems\n-------------\n* with\n* yield\n\nDeveloper Installation and Testing\n---\n```sh\n$ git clone https://github.com/coderganesh/1line\n$ cd oruline\n$ python -m oruline .setup.py setup.py\n$ python setup.py test\n```\n\nTo install the local module:\n```sh\n$ pip install .\n```\n\nFurther Reading\n---------------\n* [Lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus)\n* [Fixed-point combinator](https://en.wikipedia.org/wiki/Fixed-point_combinator)\n* [StackOverflow](http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru/2576240#2576240) post about how functional programming helps with Python mastery\n* [On writing Python one-liners](http://blog.sigfpe.com/2008/09/on-writing-python-one-liners.html) - a similar idea\n* Shout-out to the author of [this StackOverflow post](http://stackoverflow.com/questions/11089808/raising-and-catching-exceptions-in-an-expression-in-python-3), who seems to have worked on a very similar project", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/coderganesh/1line", "keywords": "obfuscate,oneliner,short,oneline,single,oruline,lambda", "license": "MIT", "maintainer": "Ganesh", "maintainer_email": "ganeshkumartk@outlook.com", "name": "oruline", "package_url": "https://pypi.org/project/oruline/", "platform": "", "project_url": "https://pypi.org/project/oruline/", "project_urls": {"Homepage": "https://github.com/coderganesh/1line"}, "release_url": "https://pypi.org/project/oruline/1.0.5/", "requires_dist": null, "requires_python": "", "summary": "Convert any Python file into a single line of code.", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Oruline !</h1>\n<p><a href=\"https://travis-ci.org/csvoss/onelinerizer\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93c9a4755af39379da8cb901a401fce1fb19372c/68747470733a2f2f7472617669732d63692e6f72672f6373766f73732f6f6e656c696e6572697a65722e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Convert any Python file into a single line of code which has the same functionality.\n\"Oru\" means <em>One/Single</em> (in tamil). So, Single line == Oruline !</p>\n<p>No newlines allowed. No semicolons allowed, either.</p>\n<h2>User Installation and Usage</h2>\n<p>Install via <code>pip</code> from PyPI:</p>\n<pre>$ pip install oruline\n</pre>\n<p>Use either the command line function or the Python module:</p>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s2\">\"def f(x):\\n    print x\\nf(4)\"</span> &gt; sandbox.py\n$ oruliner sandbox.py --debug\n$ oruliner sandbox_ol.py\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oruliner</span> <span class=\"kn\">import</span> <span class=\"n\">oruline</span>\n<span class=\"n\">oruline</span><span class=\"p\">(</span><span class=\"s2\">\"def f(x):</span><span class=\"se\">\\n</span><span class=\"s2\">    print x</span><span class=\"se\">\\n</span><span class=\"s2\">f(4)\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Examples</h2>\n<p><strong>Before:</strong></p>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p><strong>After:</strong></p>\n<pre><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">__builtin__</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">__print</span><span class=\"p\">,</span> <span class=\"n\">__y</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"n\">__print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">&lt;</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">&lt;</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"mi\">4</span><span class=\"p\">)]][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">)]][</span><span class=\"mi\">0</span><span class=\"p\">])(</span><span class=\"n\">__builtin__</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"s1\">'print'</span><span class=\"p\">],(</span><span class=\"k\">lambda</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)))),</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s1\">'StateDict'</span><span class=\"p\">,(),</span><span class=\"n\">__builtin__</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)()))(</span><span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"s1\">'__builtin__'</span><span class=\"p\">))</span>\n</pre>\n<p>That line looks complicated, because we need some tricks to import the print function and to support certain tricks which are needed for more complicated features such as <code>while</code> and <code>if</code>. For a program as simple as this one, though, you can think of it as working this way:</p>\n<pre><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">&lt;</span><span class=\"n\">y</span><span class=\"o\">&lt;</span><span class=\"mi\">5</span><span class=\"p\">))(</span><span class=\"mi\">4</span><span class=\"p\">))(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Before:</strong></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">5</span>\n<span class=\"nb\">print</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n</pre>\n<p><strong>After:</strong></p>\n<pre><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">__builtin__</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">__print</span><span class=\"p\">,</span> <span class=\"n\">__y</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">__print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:[(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"n\">x</span><span class=\"p\">)]][</span><span class=\"mi\">0</span><span class=\"p\">])]][</span><span class=\"mi\">0</span><span class=\"p\">])(</span><span class=\"n\">__builtin__</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"s1\">'print'</span><span class=\"p\">],(</span><span class=\"k\">lambda</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)))),</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s1\">'StateDict'</span><span class=\"p\">,(),</span><span class=\"n\">__builtin__</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)()))(</span><span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"s1\">'__builtin__'</span><span class=\"p\">))</span>\n</pre>\n<p>...or, if you want to think about something more simplified:</p>\n<pre><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">)))(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Before:</strong></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">guess_my_number</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">user_input</span> <span class=\"o\">=</span> <span class=\"n\">raw_input</span><span class=\"p\">(</span><span class=\"s2\">\"Enter a positive integer to guess: \"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">user_input</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">user_input</span><span class=\"o\">.</span><span class=\"n\">isdigit</span><span class=\"p\">():</span>\n            <span class=\"nb\">print</span> <span class=\"s2\">\"Not a positive integer!\"</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">user_input</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">user_input</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">user_input</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span> <span class=\"s2\">\"Too big! Try again!\"</span>\n            <span class=\"k\">elif</span> <span class=\"n\">user_input</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span> <span class=\"s2\">\"Too small! Try again!\"</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span> <span class=\"s2\">\"You win!\"</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n<span class=\"n\">guess_my_number</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n</pre>\n<p><strong>After:</strong></p>\n<pre><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">__builtin__</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">__print</span><span class=\"p\">,</span> <span class=\"n\">__y</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"k\">lambda</span> <span class=\"n\">___</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">guess_my_number</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">guess_my_number</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:[(</span><span class=\"n\">__y</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">__this</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">__after</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"k\">lambda</span> <span class=\"n\">__after</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">___</span><span class=\"p\">:</span> <span class=\"n\">__after</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))(</span><span class=\"n\">__print</span><span class=\"p\">(</span><span class=\"s1\">'Not a positive integer!'</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">user_input</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">user_input</span><span class=\"o\">.</span><span class=\"n\">isdigit</span><span class=\"p\">()))</span> <span class=\"k\">else</span> <span class=\"p\">[(</span><span class=\"k\">lambda</span> <span class=\"n\">__after</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">___</span><span class=\"p\">:</span> <span class=\"n\">__after</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))(</span><span class=\"n\">__print</span><span class=\"p\">(</span><span class=\"s1\">'Too big! Try again!'</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">user_input</span><span class=\"o\">&gt;</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">__after</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">___</span><span class=\"p\">:</span> <span class=\"n\">__after</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))(</span><span class=\"n\">__print</span><span class=\"p\">(</span><span class=\"s1\">'Too small! Try again!'</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">user_input</span><span class=\"o\">&lt;</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">___</span><span class=\"p\">:</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"kc\">True</span><span class=\"p\">)(</span><span class=\"n\">__print</span><span class=\"p\">(</span><span class=\"s1\">'You win!'</span><span class=\"p\">)))(</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">__after</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)))(</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">__after</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">user_input</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">user_input</span><span class=\"p\">))]][</span><span class=\"mi\">0</span><span class=\"p\">])(</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">__this</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">user_input</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">raw_input</span><span class=\"p\">(</span><span class=\"s1\">'Enter a positive integer to guess: '</span><span class=\"p\">))]][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"kc\">True</span> <span class=\"k\">else</span> <span class=\"n\">__after</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))(</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">))))(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"n\">n</span><span class=\"p\">)]][</span><span class=\"mi\">0</span><span class=\"p\">])]][</span><span class=\"mi\">0</span><span class=\"p\">])(</span><span class=\"n\">__builtin__</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"s1\">'print'</span><span class=\"p\">],(</span><span class=\"k\">lambda</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)))),</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s1\">'StateDict'</span><span class=\"p\">,(),</span><span class=\"n\">__builtin__</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)()))(</span><span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"s1\">'__builtin__'</span><span class=\"p\">))</span>\n</pre>\n<h2>FAQ</h2>\n<h3>Oh dear God why?</h3>\n<p>Yeah. I'm sorry. But on the other hand, why not?</p>\n<h3>Can't you use semicolons?</h3>\n<p>That would be against the spirit of this exercise. Why pass up a perfectly good excuse to abuse <a href=\"https://docs.python.org/2/reference/expressions.html#lambda\" rel=\"nofollow\">lambda functions</a>, <a href=\"https://docs.python.org/2/reference/expressions.html#conditional-expressions\" rel=\"nofollow\">ternary expressions</a>, <a href=\"https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"nofollow\">list comprehensions</a>, and even the occasional <a href=\"http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator\" rel=\"nofollow\">Y combinator</a>? Never pass up an opportunity to use the Y combinator.</p>\n<h2>Analysis</h2>\n<h3>Output program size</h3>\n<p><em>O(n)</em>. No code is ever duplicated, so the one-lined code produced is linear in the size of the input code.</p>\n<h3>Runtime of one-lined code</h3>\n<p>I have no reason to believe the resulting code, however absurd, is more than a constant factor slower than the original code. Since while loops, etc. are implemented using recursive function calls, causing more overhead for setting up those function calls, the constant factor is likely to be somewhat bad.</p>\n<h3>Tips</h3>\n<p>The one-lined code tends to contain many nested lambdas; if there are too many, Python will refuse to run it.</p>\n<pre>$ python main_ol.py\ns_push: parser stack overflow\nMemoryError\n</pre>\n<p>This can be fixed using pypy.</p>\n<pre>$ pypy main_ol.py\n</pre>\n<p>However, since while loops and for loops are implemented with recursion, you might encounter <code>maximum recursion depth exceeded</code> errors during runtime if your loops go on for too long.</p>\n<p>To get around this, you can put</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">setrecursionlimit</span><span class=\"p\">(</span><span class=\"n\">new_limit</span><span class=\"p\">)</span>\n</pre>\n<p>in your original Python code. (oneliner will not place this command in for you.)</p>\n<h2>Not Implemented</h2>\n<ul>\n<li>from foo import *</li>\n</ul>\n<h2>Open Problems</h2>\n<ul>\n<li>with</li>\n<li>yield</li>\n</ul>\n<h2>Developer Installation and Testing</h2>\n<pre>$ git clone https://github.com/coderganesh/1line\n$ <span class=\"nb\">cd</span> oruline\n$ python -m oruline .setup.py setup.py\n$ python setup.py <span class=\"nb\">test</span>\n</pre>\n<p>To install the local module:</p>\n<pre>$ pip install .\n</pre>\n<h2>Further Reading</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Lambda_calculus\" rel=\"nofollow\">Lambda calculus</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Fixed-point_combinator\" rel=\"nofollow\">Fixed-point combinator</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru/2576240#2576240\" rel=\"nofollow\">StackOverflow</a> post about how functional programming helps with Python mastery</li>\n<li><a href=\"http://blog.sigfpe.com/2008/09/on-writing-python-one-liners.html\" rel=\"nofollow\">On writing Python one-liners</a> - a similar idea</li>\n<li>Shout-out to the author of <a href=\"http://stackoverflow.com/questions/11089808/raising-and-catching-exceptions-in-an-expression-in-python-3\" rel=\"nofollow\">this StackOverflow post</a>, who seems to have worked on a very similar project</li>\n</ul>\n\n          </div>"}, "last_serial": 5382342, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "35f936a94a8c216ad5dbb6d6fc6fb0a2", "sha256": "66cdb27d0177830c4761efc0e4d37605e5ada9f13a2194b9c2186a902c998d1f"}, "downloads": -1, "filename": "oruline-1.0.0.tar.gz", "has_sig": false, "md5_digest": "35f936a94a8c216ad5dbb6d6fc6fb0a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16677, "upload_time": "2019-06-05T15:27:27", "upload_time_iso_8601": "2019-06-05T15:27:27.829660Z", "url": "https://files.pythonhosted.org/packages/7e/89/afa7425b41a72dafaf17da5f76e90d512da91a39fee09e1091d3690d676a/oruline-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "9df87b67bb6197051ed6d5313194f09d", "sha256": "c25caf4af1c8bd8e6dca9650d484647a8ee37071eb7a357da212e299f833fa2c"}, "downloads": -1, "filename": "oruline-1.0.2.tar.gz", "has_sig": false, "md5_digest": "9df87b67bb6197051ed6d5313194f09d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16672, "upload_time": "2019-06-05T15:34:12", "upload_time_iso_8601": "2019-06-05T15:34:12.873341Z", "url": "https://files.pythonhosted.org/packages/92/53/3cc6517142e1516376a8fddc2f957efd7f5c772114f46e2f0f2f0fc97579/oruline-1.0.2.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "b3fa39c81ddb9d64b72716ecebf1400e", "sha256": "1ba05a4673429d12477095c8511a8c4ab8b0d1014028b2b98620abe394ab0d67"}, "downloads": -1, "filename": "oruline-1.0.5.tar.gz", "has_sig": false, "md5_digest": "b3fa39c81ddb9d64b72716ecebf1400e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16684, "upload_time": "2019-06-10T16:42:53", "upload_time_iso_8601": "2019-06-10T16:42:53.579898Z", "url": "https://files.pythonhosted.org/packages/b3/52/67304aecc2a50ba547822a6bd9cd38198f6a4162a4a8f8a569e4b935386f/oruline-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3fa39c81ddb9d64b72716ecebf1400e", "sha256": "1ba05a4673429d12477095c8511a8c4ab8b0d1014028b2b98620abe394ab0d67"}, "downloads": -1, "filename": "oruline-1.0.5.tar.gz", "has_sig": false, "md5_digest": "b3fa39c81ddb9d64b72716ecebf1400e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16684, "upload_time": "2019-06-10T16:42:53", "upload_time_iso_8601": "2019-06-10T16:42:53.579898Z", "url": "https://files.pythonhosted.org/packages/b3/52/67304aecc2a50ba547822a6bd9cd38198f6a4162a4a8f8a569e4b935386f/oruline-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:29 2020"}