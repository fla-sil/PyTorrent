{"info": {"author": "CorrelAid", "author_email": "packages@correlaid.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Natural Language :: German", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Education", "Topic :: Sociology"], "description": "Datenguide Python\n=================\n\n\n.. image:: https://img.shields.io/pypi/v/datenguidepy.svg\n        :target: https://pypi.python.org/pypi/datenguidepy\n\n.. image:: https://img.shields.io/travis/CorrelAid/datenguide-python.svg\n        :target: https://travis-ci.org/CorrelAid/datenguide-python\n\n.. image:: https://readthedocs.org/projects/datenguidepy/badge/?version=latest\n        :target: https://datenguidepy.readthedocs.io/en/latest/readme/#quick-start\n\n\n\nThe package provides easy access to German publicly available `regional statistics`_.\nIt does so by providing a wrapper for the `GraphQL API of the Datenguide project`_.\n\n\n* Free software: MIT license\n* Documentation:  https://datenguidepy.readthedocs.io/\n\n\nFeatures\n--------\n\n**Overview of available statistics and regions:**\n  The package provides DataFrames with the available statistics and regions, which\n  can be queried by the user without having to refer to expert knowledge on regional\n  statistics or the documentation of the underlying GraphQL API\n\n**Build and Execute Queries:**\n  The package provides the user an object oriented interface to build queries that\n  fetch certain statistics and return the results as a pandas DataFrame for\n  further analysis.\n\nQuick Start\n-----------\n\n============\nInstall\n============\nTo use the package install the package (command line): \n\n.. code-block:: python\n\n   pip install datenguidepy\n\n============\nSetup query\n============\nWithin your python file or notebook:\n\n**1. Import the package**\n\n.. code-block:: python\n\n    from datenguidepy import Query\n\n**2. Creating a query**\n\n- either for single regions\n\n.. code-block:: python\n\n    query = Query.region('01')\n\n- or for all subregions a region (e.g. all Kommunen in a Bundesland)\n\n.. code-block:: python\n\n   query_allregions = Query.allRegions(parent='01')\n\n- How to get IDs for regions? see below \"Get information on fields and meta data\"\n\n**3. Add statistics (fields)**\n\n- Add statistics you want to get data on\n\n.. code-block:: python\n\n    field = query.add_field('BEV001')\n\n- How do I find the short name of the statistics? see below \"Get information on fields and meta data\"\n\n**4. Add filters**\n    A field can also be added with filters. E.g. you can specify, that only data from a specific year     shall    be returned.\n\n.. code-block:: python\n\n    field.add_args({'year': [2014, 2015]})\n\n**5. Add subfield**\n    A set of default subfields are defined for all statistics (year, value, source). \n    If additional fields (columns in the results table) shall be returned, they can be specified as a field argument.\n\n.. code-block:: python\n\n    field.add_field('GES') # Geschlecht\n\n    # by default the summed value for a field is returned. \n    # E.g. if the field \"Geschlecht\" is added, the results table will show \"None\" in each row, \n    # which means total value for women and man.\n    # To get disaggregated values, they speficically need to be passed as args. \n    # If e.g. only values for women shall be returned, use:\n\n    field.add_args({'GES': 'GESW'})\n\n    # if all possible enum values shall be returned disaggregated, pass 'ALL':\n\n    field.add_args({'GES': 'ALL'})\n\n**6. Get results**\n    Get the results as a Pandas DataFrame\n\n.. code-block:: python\n\n    df = query.results()\n\n\n=======================================\nGet information on fields and meta data\n=======================================\n\n**Get information on region ids**\n\n.. code-block:: python\n\n    from datenguidepy import get_all_regions\n\n    get_all_regions()\n\nUse pandas *query()* functionality to get specific regions. E.g., if you want to get all IDs on \"Bundel\u00e4nder\" use.\nFor more information on \"nuts\" levels see Wikipedia_.\n\n.. code-block:: python\n\n    get_all_regions().query(\"level == 'nuts1'\")\n\n\n\n**Get information on statistic shortnames**\n\n.. code-block:: python\n\n    from datenguidepy import get_statistics\n\n    get_statistics()\n\n**Get information on single fields**\n\nYou can further information about description, possible arguments, fields and enum values on a field you added to a query.\n\n.. code-block:: python\n\n    query = Query.region(\"01\")\n    field = query.add_field(\"BEV001\")\n    field.get_info()\n\n===================\nFurther information\n===================\n\nFor detailed examples see the notebooks within the use_case_ folder.\n\nFor a detailed documentation of all statistics and fields see the Datenguide API.\n\n\n\nCredits\n-------\nAll this builds on the great work of Datenguide_ and their GraphQL API `datenguide/datenguide-api`_ \n\nThe data is retrieved via the Datenguide API from the \"Statistische \u00c4mter des Bundes und der L\u00e4nder\". \nData being used via this package has to be `credited according to the \"Datenlizenz Deutschland \u2013 Namensnennung \u2013 Version 2.0\"`_.\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _`datenguide/datenguide-api`: https://github.com/datenguide/datenguide-api\n.. _Datenguide: https://datengui.de/\n.. _`GraphQL API of the Datenguide project`: https://github.com/datenguide/datenguide-api\n.. _`regional statistics`: https://www.regionalstatistik.de/genesis/online/logon\n.. _use_case: https://github.com/CorrelAid/datenguide-python/tree/master/use_case\n.. _`credited according to the \"Datenlizenz Deutschland \u2013 Namensnennung \u2013 Version 2.0\"`: https://www.regionalstatistik.de/genesis/online;sid=C636A83329D19AF20E3A4F9E767576A9.reg2?Menu=Impressum\n.. _Wikipedia: https://de.wikipedia.org/wiki/NUTS:DE#Liste_der_NUTS-Regionen_in_Deutschland_(NUTS_2016)\n\n\n=======\nHistory\n=======\n\n0.1.0 (2019-10-07)\n------------------\n\n* First release on PyPI.\n\n0.1.1 (2019-10-09)\n------------------\n\n* Cleanup of the first release regarding naming, authors and docs.\n\n0.2.0 (2019-11-30)\n------------------\n\n* Added functionality to use meta data for displaying descriptive statistics names and enum values", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CorrelAid/datenguide-python", "keywords": "datenguidepy", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "datenguidepy", "package_url": "https://pypi.org/project/datenguidepy/", "platform": "", "project_url": "https://pypi.org/project/datenguidepy/", "project_urls": {"Homepage": "https://github.com/CorrelAid/datenguide-python"}, "release_url": "https://pypi.org/project/datenguidepy/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Provids easy access to German publically availible regional statistics", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/datenguidepy\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/datenguidepy.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d24cbf0328e2ff52a9d9e44578f4c02cbdff4a20/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646174656e677569646570792e737667\"></a>\n<a href=\"https://travis-ci.org/CorrelAid/datenguide-python\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/CorrelAid/datenguide-python.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0b23f9c95dc5419d2faba6409f75fe36f5cf297/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f436f7272656c4169642f646174656e67756964652d707974686f6e2e737667\"></a>\n<a href=\"https://datenguidepy.readthedocs.io/en/latest/readme/#quick-start\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/datenguidepy/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c14cde899ee45dd8f5c2be68bf93244f644eb55b/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646174656e677569646570792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>The package provides easy access to German publicly available <a href=\"https://www.regionalstatistik.de/genesis/online/logon\" rel=\"nofollow\">regional statistics</a>.\nIt does so by providing a wrapper for the <a href=\"https://github.com/datenguide/datenguide-api\" rel=\"nofollow\">GraphQL API of the Datenguide project</a>.</p>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation:  <a href=\"https://datenguidepy.readthedocs.io/\" rel=\"nofollow\">https://datenguidepy.readthedocs.io/</a></li>\n</ul>\n<div id=\"features\">\n<h2>Features</h2>\n<dl>\n<dt><strong>Overview of available statistics and regions:</strong></dt>\n<dd>The package provides DataFrames with the available statistics and regions, which\ncan be queried by the user without having to refer to expert knowledge on regional\nstatistics or the documentation of the underlying GraphQL API</dd>\n<dt><strong>Build and Execute Queries:</strong></dt>\n<dd>The package provides the user an object oriented interface to build queries that\nfetch certain statistics and return the results as a pandas DataFrame for\nfurther analysis.</dd>\n</dl>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<div id=\"install\">\n<h3>Install</h3>\n<p>To use the package install the package (command line):</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">datenguidepy</span>\n</pre>\n</div>\n<div id=\"setup-query\">\n<h3>Setup query</h3>\n<p>Within your python file or notebook:</p>\n<p><strong>1. Import the package</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datenguidepy</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n</pre>\n<p><strong>2. Creating a query</strong></p>\n<ul>\n<li>either for single regions</li>\n</ul>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"o\">.</span><span class=\"n\">region</span><span class=\"p\">(</span><span class=\"s1\">'01'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>or for all subregions a region (e.g. all Kommunen in a Bundesland)</li>\n</ul>\n<pre><span class=\"n\">query_allregions</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"o\">.</span><span class=\"n\">allRegions</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"s1\">'01'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>How to get IDs for regions? see below \u201cGet information on fields and meta data\u201d</li>\n</ul>\n<p><strong>3. Add statistics (fields)</strong></p>\n<ul>\n<li>Add statistics you want to get data on</li>\n</ul>\n<pre><span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">add_field</span><span class=\"p\">(</span><span class=\"s1\">'BEV001'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>How do I find the short name of the statistics? see below \u201cGet information on fields and meta data\u201d</li>\n</ul>\n<dl>\n<dt><strong>4. Add filters</strong></dt>\n<dd>A field can also be added with filters. E.g. you can specify, that only data from a specific year     shall    be returned.</dd>\n</dl>\n<pre><span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">add_args</span><span class=\"p\">({</span><span class=\"s1\">'year'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2014</span><span class=\"p\">,</span> <span class=\"mi\">2015</span><span class=\"p\">]})</span>\n</pre>\n<dl>\n<dt><strong>5. Add subfield</strong></dt>\n<dd>A set of default subfields are defined for all statistics (year, value, source).\nIf additional fields (columns in the results table) shall be returned, they can be specified as a field argument.</dd>\n</dl>\n<pre><span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">add_field</span><span class=\"p\">(</span><span class=\"s1\">'GES'</span><span class=\"p\">)</span> <span class=\"c1\"># Geschlecht</span>\n\n<span class=\"c1\"># by default the summed value for a field is returned.</span>\n<span class=\"c1\"># E.g. if the field \"Geschlecht\" is added, the results table will show \"None\" in each row,</span>\n<span class=\"c1\"># which means total value for women and man.</span>\n<span class=\"c1\"># To get disaggregated values, they speficically need to be passed as args.</span>\n<span class=\"c1\"># If e.g. only values for women shall be returned, use:</span>\n\n<span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">add_args</span><span class=\"p\">({</span><span class=\"s1\">'GES'</span><span class=\"p\">:</span> <span class=\"s1\">'GESW'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># if all possible enum values shall be returned disaggregated, pass 'ALL':</span>\n\n<span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">add_args</span><span class=\"p\">({</span><span class=\"s1\">'GES'</span><span class=\"p\">:</span> <span class=\"s1\">'ALL'</span><span class=\"p\">})</span>\n</pre>\n<dl>\n<dt><strong>6. Get results</strong></dt>\n<dd>Get the results as a Pandas DataFrame</dd>\n</dl>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"get-information-on-fields-and-meta-data\">\n<h3>Get information on fields and meta data</h3>\n<p><strong>Get information on region ids</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datenguidepy</span> <span class=\"kn\">import</span> <span class=\"n\">get_all_regions</span>\n\n<span class=\"n\">get_all_regions</span><span class=\"p\">()</span>\n</pre>\n<p>Use pandas <em>query()</em> functionality to get specific regions. E.g., if you want to get all IDs on \u201cBundel\u00e4nder\u201d use.\nFor more information on \u201cnuts\u201d levels see <a href=\"https://de.wikipedia.org/wiki/NUTS:DE#Liste_der_NUTS-Regionen_in_Deutschland_(NUTS_2016)\" rel=\"nofollow\">Wikipedia</a>.</p>\n<pre><span class=\"n\">get_all_regions</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"level == 'nuts1'\"</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Get information on statistic shortnames</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datenguidepy</span> <span class=\"kn\">import</span> <span class=\"n\">get_statistics</span>\n\n<span class=\"n\">get_statistics</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Get information on single fields</strong></p>\n<p>You can further information about description, possible arguments, fields and enum values on a field you added to a query.</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"o\">.</span><span class=\"n\">region</span><span class=\"p\">(</span><span class=\"s2\">\"01\"</span><span class=\"p\">)</span>\n<span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">add_field</span><span class=\"p\">(</span><span class=\"s2\">\"BEV001\"</span><span class=\"p\">)</span>\n<span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"further-information\">\n<h3>Further information</h3>\n<p>For detailed examples see the notebooks within the <a href=\"https://github.com/CorrelAid/datenguide-python/tree/master/use_case\" rel=\"nofollow\">use_case</a> folder.</p>\n<p>For a detailed documentation of all statistics and fields see the Datenguide API.</p>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>All this builds on the great work of <a href=\"https://datengui.de/\" rel=\"nofollow\">Datenguide</a> and their GraphQL API <a href=\"https://github.com/datenguide/datenguide-api\" rel=\"nofollow\">datenguide/datenguide-api</a></p>\n<p>The data is retrieved via the Datenguide API from the \u201cStatistische \u00c4mter des Bundes und der L\u00e4nder\u201d.\nData being used via this package has to be <a href=\"https://www.regionalstatistik.de/genesis/online;sid=C636A83329D19AF20E3A4F9E767576A9.reg2?Menu=Impressum\" rel=\"nofollow\">credited according to the \u201cDatenlizenz Deutschland \u2013 Namensnennung \u2013 Version 2.0\u201d</a>.</p>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n<div id=\"history\">\n<h3>History</h3>\n</div>\n</div>\n<div id=\"id1\">\n<h2>0.1.0 (2019-10-07)</h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>0.1.1 (2019-10-09)</h2>\n<ul>\n<li>Cleanup of the first release regarding naming, authors and docs.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h2>0.2.0 (2019-11-30)</h2>\n<ul>\n<li>Added functionality to use meta data for displaying descriptive statistics names and enum values</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6220643, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1ccd75561ee0e5de838fff1038d97c7d", "sha256": "c26e50c31cff48e33a7d36bd0dd0c8a6e65aa3dd70f3dfe8d40afca11d56fde9"}, "downloads": -1, "filename": "datenguidepy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1ccd75561ee0e5de838fff1038d97c7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 142381, "upload_time": "2019-10-07T19:25:58", "upload_time_iso_8601": "2019-10-07T19:25:58.243294Z", "url": "https://files.pythonhosted.org/packages/d2/bf/d04ac7be7d56bfa03df44fb3d9b2a36da6d4dc675aaad644232da9699c6c/datenguidepy-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9b7aed301b43ebfaceaceba52dac99d1", "sha256": "98459461b54294c621e87204f58b93b4be122c63d3897c2d2f36f1ac8bcd979d"}, "downloads": -1, "filename": "datenguidepy-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9b7aed301b43ebfaceaceba52dac99d1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 130028, "upload_time": "2019-10-09T17:39:48", "upload_time_iso_8601": "2019-10-09T17:39:48.430429Z", "url": "https://files.pythonhosted.org/packages/cb/e8/74496026e8a6babc3b56e41f301b0e9db17dfdd0f6134de9f1326e1e05ae/datenguidepy-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21bfd030b5194c3d4e6709fe88a0070f", "sha256": "9698586e986484c19b5db6c17fc4c9df2fb619004229924027e1d918721e587d"}, "downloads": -1, "filename": "datenguidepy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "21bfd030b5194c3d4e6709fe88a0070f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 142835, "upload_time": "2019-10-09T17:39:50", "upload_time_iso_8601": "2019-10-09T17:39:50.877894Z", "url": "https://files.pythonhosted.org/packages/17/53/88e50db79d9612b622f2f0b4d939b6ce4764f8811d84ef4a902d6e5b574b/datenguidepy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "aa7c6fa9ffcfaabc92aa070e709f2049", "sha256": "e7c4a527d558760d1ec42d042802843089a435735131574763c7bed7b844a02f"}, "downloads": -1, "filename": "datenguidepy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "aa7c6fa9ffcfaabc92aa070e709f2049", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151787, "upload_time": "2019-10-26T06:37:29", "upload_time_iso_8601": "2019-10-26T06:37:29.451912Z", "url": "https://files.pythonhosted.org/packages/b4/46/1ab1ae814ea108c73af90f5285773ddf39f3a8a2b58201dabb520f0301b5/datenguidepy-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7ddb91767cf5395295f87f2c08ca8e2f", "sha256": "897d992c1b98eb7222bd5225383a8a98ef2f0424307223a50d2637ca4b7957d5"}, "downloads": -1, "filename": "datenguidepy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7ddb91767cf5395295f87f2c08ca8e2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155246, "upload_time": "2019-11-30T06:06:29", "upload_time_iso_8601": "2019-11-30T06:06:29.372877Z", "url": "https://files.pythonhosted.org/packages/20/a4/3f536fc3d4dc511295679e7e126df56c9dff0a2033c8cb4cce0195453745/datenguidepy-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7ddb91767cf5395295f87f2c08ca8e2f", "sha256": "897d992c1b98eb7222bd5225383a8a98ef2f0424307223a50d2637ca4b7957d5"}, "downloads": -1, "filename": "datenguidepy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7ddb91767cf5395295f87f2c08ca8e2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155246, "upload_time": "2019-11-30T06:06:29", "upload_time_iso_8601": "2019-11-30T06:06:29.372877Z", "url": "https://files.pythonhosted.org/packages/20/a4/3f536fc3d4dc511295679e7e126df56c9dff0a2033c8cb4cce0195453745/datenguidepy-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:05 2020"}