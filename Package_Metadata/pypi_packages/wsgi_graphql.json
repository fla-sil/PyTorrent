{"info": {"author": "Moritz K.", "author_email": "moritzmhmk@googlemail.com", "bugtrack_url": null, "classifiers": [], "description": "WSGI-GraphQL\n=============\n\nCreate a WSGI Application for a GraphQL schema.\n\nUsage\n-----\n\nUse the ``GraphQLApplication`` from ``wsgi_graphql``.\n\n.. code:: python\n\n    from wsgi_graphql import GraphQLApplication\n    application = GraphQLApplication(schema)\n\nOptions\n~~~~~~~\n\n- ``schema``: ``GraphQLSchema`` to serve with this application.\n- ``execute_options``: Dictionary of options to be passed to ``graphql.execute``\n  via ``graphql_server.run_http_query``. If the dictionary values are callable\n  they will be called (see example below).\n- ``format_error``: Function to format errors (defaults to ``graphql_server.default_format_error``).\n- ``encode``: Function to encode dictionary (defaults to ``graphql_server.json_encode``).\n\nAll ``execute_options`` can be ``callable`` (i.e. functions) and will receive\nthe current ``environ`` as an argument. This can be used for tasks like parsing\nauthentication tokens and inserting results as ``context_value``.\n\nThis snippet from the ``example.py`` sets the ``context_value`` to a dictionary\ncontaining the value of the request header ``greet``.\n\n.. code:: python\n\n  application = GraphQLApplication(schema, execute_options={\n      'context_value': lambda environ: {\n          'greet': environ.get('HTTP_GREET')\n      }\n  })\n\nThis ``curl`` command will return ``{\"data\":{\"hello\":\"world\"}}``.\n\n.. code:: bash\n\n  curl --request POST\\\n   --url http://localhost:8080\\\n   --header 'Content-Type: application/graphql'\\\n   --header 'greet: world'\\\n   --data 'query {hello}'\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/moritzmhmk/wsgi-graphql/archive/v0.0.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/moritzmhmk/wsgi-graphql", "keywords": "graphql", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "wsgi_graphql", "package_url": "https://pypi.org/project/wsgi_graphql/", "platform": "", "project_url": "https://pypi.org/project/wsgi_graphql/", "project_urls": {"Download": "https://github.com/moritzmhmk/wsgi-graphql/archive/v0.0.2.tar.gz", "Homepage": "https://github.com/moritzmhmk/wsgi-graphql"}, "release_url": "https://pypi.org/project/wsgi_graphql/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Create a WSGI Application for a GraphQL schema.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Create a WSGI Application for a GraphQL schema.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Use the <tt>GraphQLApplication</tt> from <tt>wsgi_graphql</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wsgi_graphql</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLApplication</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLApplication</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n</pre>\n<div id=\"options\">\n<h3>Options</h3>\n<ul>\n<li><tt>schema</tt>: <tt>GraphQLSchema</tt> to serve with this application.</li>\n<li><tt>execute_options</tt>: Dictionary of options to be passed to <tt>graphql.execute</tt>\nvia <tt>graphql_server.run_http_query</tt>. If the dictionary values are callable\nthey will be called (see example below).</li>\n<li><tt>format_error</tt>: Function to format errors (defaults to <tt>graphql_server.default_format_error</tt>).</li>\n<li><tt>encode</tt>: Function to encode dictionary (defaults to <tt>graphql_server.json_encode</tt>).</li>\n</ul>\n<p>All <tt>execute_options</tt> can be <tt>callable</tt> (i.e. functions) and will receive\nthe current <tt>environ</tt> as an argument. This can be used for tasks like parsing\nauthentication tokens and inserting results as <tt>context_value</tt>.</p>\n<p>This snippet from the <tt>example.py</tt> sets the <tt>context_value</tt> to a dictionary\ncontaining the value of the request header <tt>greet</tt>.</p>\n<pre><span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLApplication</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">,</span> <span class=\"n\">execute_options</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'context_value'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">environ</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'greet'</span><span class=\"p\">:</span> <span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_GREET'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<p>This <tt>curl</tt> command will return <tt><span class=\"pre\">{\"data\":{\"hello\":\"world\"}}</span></tt>.</p>\n<pre>curl --request POST<span class=\"se\">\\\n</span> --url http://localhost:8080<span class=\"se\">\\\n</span> --header <span class=\"s1\">'Content-Type: application/graphql'</span><span class=\"se\">\\\n</span> --header <span class=\"s1\">'greet: world'</span><span class=\"se\">\\\n</span> --data <span class=\"s1\">'query {hello}'</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3713872, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6ad2ded3a976e5a500b28724a6c781bb", "sha256": "5a884ce422211cc5472b936f2e3fde486d32bc5c98ee8c8cd20b024dbff4b94a"}, "downloads": -1, "filename": "wsgi_graphql-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6ad2ded3a976e5a500b28724a6c781bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3488, "upload_time": "2018-03-27T20:25:47", "upload_time_iso_8601": "2018-03-27T20:25:47.244701Z", "url": "https://files.pythonhosted.org/packages/4f/0d/c2cf26187b994cdea8f954a5e6da6e31f2a81d97a62d3237562967671d55/wsgi_graphql-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "2f0276c1dc428747472d654f4b474588", "sha256": "20412c281b59d4add43464f858d62ede99d5fa016aab2acf7aced6534dc9a028"}, "downloads": -1, "filename": "wsgi_graphql-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2f0276c1dc428747472d654f4b474588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3523, "upload_time": "2018-03-28T13:52:42", "upload_time_iso_8601": "2018-03-28T13:52:42.199363Z", "url": "https://files.pythonhosted.org/packages/9c/6b/1c855d459e428f811203375e56b97d5267676f3846cb509fc1420d2a2417/wsgi_graphql-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f0276c1dc428747472d654f4b474588", "sha256": "20412c281b59d4add43464f858d62ede99d5fa016aab2acf7aced6534dc9a028"}, "downloads": -1, "filename": "wsgi_graphql-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2f0276c1dc428747472d654f4b474588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3523, "upload_time": "2018-03-28T13:52:42", "upload_time_iso_8601": "2018-03-28T13:52:42.199363Z", "url": "https://files.pythonhosted.org/packages/9c/6b/1c855d459e428f811203375e56b97d5267676f3846cb509fc1420d2a2417/wsgi_graphql-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:08 2020"}