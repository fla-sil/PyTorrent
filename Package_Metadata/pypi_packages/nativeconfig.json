{"info": {"author": "Ilya Kulakov", "author_email": "kulakov.ilya@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "nativeconfig\n============\n\n.. image:: https://badge.fury.io/py/nativeconfig.png\n    :target: http://badge.fury.io/py/nativeconfig\n    :alt: Travis\n.. image:: https://ci.appveyor.com/api/projects/status/l39b91mms8lch8au/branch/master?svg=true\n    :target: https://ci.appveyor.com/project/GreatFruitOmsk/nativeconfig\n    :alt: AppVeyor\n.. image:: https://codecov.io/gh/GreatFruitOmsk/nativeconfig/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/GreatFruitOmsk/nativeconfig\n    :alt: Coverage\n.. image:: https://pyup.io/repos/github/GreatFruitOmsk/nativeconfig/shield.svg\n    :target: https://pyup.io/repos/github/GreatFruitOmsk/nativeconfig\n    :alt: Updates\n.. image:: https://pyup.io/repos/github/GreatFruitOmsk/nativeconfig/python-3-shield.svg\n    :target: https://pyup.io/repos/github/GreatFruitOmsk/nativeconfig\n    :alt: Python 3\n.. image:: https://img.shields.io/pypi/v/nativeconfig.svg\n    :target: https://pypi.python.org/pypi/nativeconfig\n    :alt: PyPI\n\n\nDevelopers of cross-platform applications often face problems when they need to interact with the system.\nConfig files are no exception, since every popular OS has its own format and guidelines.\n\nnativeconfig addresses this problem in an elegant and pythonic way:\n\n.. code-block:: python\n\n    import os\n    from nativeconfig import PreferredConfig, StringOption, IntOption\n\n    class MyConfig(PreferredConfig):\n        CONFIG_VERSION = __version__\n        REGISTRY_PATH = r'Software\\MyApp'\n        JSON_PATH = os.path.expanduser('~/.config/MyApp/config')\n\n        first_name = StringOption('FirstName')\n        last_name = StringOption('LastName')\n        age = IntOption('Age')\n\nwill store config in Registry on Windows, in NSUserDefaults on Mac OS X (if the `pyobjc-core <https://pypi.python.org/pypi/pyobjc-core/3.0.4>`_ module is available) and in json-formatted file everywhere else.\n\n\nCaching\n-------\nImplementations for all platforms support caching which minimizes access to the backend. Specifically value is only read if it's not known to cache\nand written if it's different than cached one.\n\nSimply declare your subclass with `ALLOW_CACHE` set to `True`:\n\n.. code-block:: python\n\n    class MyConfig(PreferredConfig):\n        CONFIG_VERSION = __version__\n        ALLOW_CACHE = True\n        REGISTRY_PATH = r'Software\\MyApp'\n        JSON_PATH = os.path.expanduser('~/.config/MyApp/config')\n\n        first_name = StringOption('FirstName')\n        last_name = StringOption('LastName')\n\nYou can also set this settings per option, by declarding them with `allow_cache` set to `True`.\n\n\nJSON as a universal format\n--------------------------\nAt some point you will need to provide public interface (e.g. CLI or API) to edit config of your application.\nFor this reason there are methods to convert each option individually or whole config into JSON:\n\n.. code-block:: python\n\n    class MyConfig(PreferredConfig):\n        CONFIG_VERSION = __version__\n        REGISTRY_PATH = r'Software\\MyApp'\n        JSON_PATH = os.path.expanduser('~/.config/MyApp/config')\n\n        first_name = StringOption('FirstName')\n        last_name = StringOption('LastName')\n\n    MyConfig.get_instance().get_value_for_option_name('FirstName')  # will return JSON version of first_name's value\n    MyConfig.get_instance().snapshot()  # will return a JSON dictionary of all options\n    MyConfig.get_instance().restore_snapshot(user_edited_snapshot)  # will update options with from user-edited JSON\n\n\nIntrospection\n-------------\nIt's always cool when you hack around possible flaws in lib's code. So you have it: API of BasicConfig and BasicOption is carefully designed to be hackable.\nIn particular, config's attibutes can be easily inspected via the set of methods grouped under \"Introspection\" section or by playing with the BasicConfig._ordered_options\ndirectly. You didn't misread, options are already are ordered in order of definition and even subclassing and even overriding!\n\n.. code-block:: python\n\n    class MyConfig(PreferredConfig):\n        CONFIG_VERSION = __version__\n        REGISTRY_PATH = r'Software\\MyApp'\n        JSON_PATH = os.path.expanduser('~/.config/MyApp/config')\n\n        first_name = StringOption('FirstName')\n        last_name = StringOption('LastName')\n\n    MyConfig.get_instance().get_value_for_option_name('FirstName')  # will return python value of the FirstName option\n    MyConfig.get_instance().get_raw_value_for_option_name('FirstName')  # will return raw value of the FirstName option\n    MyConfig.get_instance().get_json_value_for_option_name('FirstName')  # will return JSON encoded value of the FirstName option\n\n\n\nVersioning\n----------\nThe task that every developer is going to face. Fortunately nativeconfig has everything to assist you!\n\nEach config is versioned and default to 1.0. Its version is stored in the config backend under the \"ConfigVersion\" name which\ncan be altered by modifying the CONFIG_VERSION_OPTION_NAME class variable.\n\nYou should override it in custom subclass by defining the CONFIG_VERSION variable. Value that usually makes most sense is the `__version__ <https://www.python.org/dev/peps/pep-0396/>`_ variable.\nEach time config is instantiated the `migrate` method is called. Implementation of the base class simply updates value of the \"ConfigVersion\" (or whatever you called it) option to the actual value.\nReasonably, but insufficiently. Let's see what we can do:\n\n.. code-block:: python\n\n    class MyConfig(PreferredConfig):\n        CONFIG_VERSION = __version__\n        REGISTRY_PATH = r'Software\\MyApp'\n        JSON_PATH = os.path.expanduser('~/.config/MyApp/config')\n\n        first_name = StringOption('FirstName')\n        last_name = StringOption('LastName')\n\n        def migrate(self, version):\n            if version is None:\n                # Either called for the very first time OR user's backed is broken because it lacks value of the ConfigVersion option.\n                pass\n\n            if version <= <newer version>:\n                # Obviously <= will not work for strings. You should use your own comparison function that follows you versioning guidelines.\n                pass\n\n            if version <= <newest version>:\n                # Version should be checked starting from the oldest to the current so you can gracefully migrate even the oldest user's config.\n                # `if` is used instead of `elif` for the same reason: you may need to migrate user's data through multiple versions of the config file.\n                pass\n\n            if version <= <most recent version>:\n                pass\n\n\n            super().migrate(version)  # always call base class implementation at the end!\n\n\nTL;DR three simple rules:\n\n1. Check from the oldest to the newest version\n2. User `if` instead of `elif`\n3. Call super at the end\n\n\nError Recovery\n--------------\nWhen user base is huge, all sorts of weird issues will happen. Unexpected values of options is probably the most common one.\nAnd nativeconfig has everything you need to recover from such errors!\n\nWhenever config is unable to deserialize value or if deserialized value is unexpected (e.g. you wanted float bug got a path)\nthe `resolve_value` method is called. Default implementation logs an error and returns a default. If that's not sufficient\nor you have a better idea of how to recover than using default, you should override this method:\n\n.. code-block:: python\n\n    class MyConfig(PreferredConfig):\n        CONFIG_VERSION = __version__\n        REGISTRY_PATH = r'Software\\MyApp'\n        JSON_PATH = os.path.expanduser('~/.config/MyApp/config')\n\n        first_name = StringOption('FirstName')\n        last_name = StringOption('LastName')\n\n        def resolve_value(self, exc_info, name, raw_or_json_value, source):\n            if name == 'FirstName':\n                # E.g. restore value from Cloud-stored credentials.\n                pass\n\nPretty basic: you have exc_info extracted where problem happened (either ValidationError or DeserializationError), name of the option, raw or json value and\nsource that explains where error happened.\n\n\nDebugging\n---------\nThe `warn` module is used in some places, so you're advised to debug your app by turning all warnings into errors as described in `docs <https://docs.python.org/library/warnings.html>`_.\nVarious logs are written to the `nativeconfig` logger. You can increase verbosity by advancing the level.\n\n\nTesting\n-------\nTo run tests, use the `python -m test` command.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GreatFruitOmsk/nativeconfig", "keywords": "config,winreg,NSUserDefaults", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "nativeconfig", "package_url": "https://pypi.org/project/nativeconfig/", "platform": "any", "project_url": "https://pypi.org/project/nativeconfig/", "project_urls": {"Homepage": "https://github.com/GreatFruitOmsk/nativeconfig"}, "release_url": "https://pypi.org/project/nativeconfig/3.4.0/", "requires_dist": null, "requires_python": "", "summary": "Cross-platform python module to store application config via native subsystems such as Windows Registry or NSUserDefaults.", "version": "3.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://badge.fury.io/py/nativeconfig\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db8a59cab3cd210c17c0890b62ba67e740f6b4a5/68747470733a2f2f62616467652e667572792e696f2f70792f6e6174697665636f6e6669672e706e67\"></a>\n<a href=\"https://ci.appveyor.com/project/GreatFruitOmsk/nativeconfig\" rel=\"nofollow\"><img alt=\"AppVeyor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f063158232ab82c54eeab56a058cbe96745ebbb/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6c33396239316d6d73386c63683861752f6272616e63682f6d61737465723f7376673d74727565\"></a>\n<a href=\"https://codecov.io/gh/GreatFruitOmsk/nativeconfig\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/587798923ca6a24c8c2d5fcd4c67be2f36cd2323/68747470733a2f2f636f6465636f762e696f2f67682f477265617446727569744f6d736b2f6e6174697665636f6e6669672f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pyup.io/repos/github/GreatFruitOmsk/nativeconfig\" rel=\"nofollow\"><img alt=\"Updates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a7ea8445147243e36d4d9b9e09854b6427f37f0/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f477265617446727569744f6d736b2f6e6174697665636f6e6669672f736869656c642e737667\"></a>\n<a href=\"https://pyup.io/repos/github/GreatFruitOmsk/nativeconfig\" rel=\"nofollow\"><img alt=\"Python 3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e56056aaa5ea1d8d89fb4b984a6272be5084fc0a/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f477265617446727569744f6d736b2f6e6174697665636f6e6669672f707974686f6e2d332d736869656c642e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/nativeconfig\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b882c1831da51985cadec9e30daa3dc5bc06a5fa/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e6174697665636f6e6669672e737667\"></a>\n<p>Developers of cross-platform applications often face problems when they need to interact with the system.\nConfig files are no exception, since every popular OS has its own format and guidelines.</p>\n<p>nativeconfig addresses this problem in an elegant and pythonic way:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nativeconfig</span> <span class=\"kn\">import</span> <span class=\"n\">PreferredConfig</span><span class=\"p\">,</span> <span class=\"n\">StringOption</span><span class=\"p\">,</span> <span class=\"n\">IntOption</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">PreferredConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">CONFIG_VERSION</span> <span class=\"o\">=</span> <span class=\"n\">__version__</span>\n    <span class=\"n\">REGISTRY_PATH</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'Software\\MyApp'</span>\n    <span class=\"n\">JSON_PATH</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">'~/.config/MyApp/config'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'FirstName'</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'LastName'</span><span class=\"p\">)</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">IntOption</span><span class=\"p\">(</span><span class=\"s1\">'Age'</span><span class=\"p\">)</span>\n</pre>\n<p>will store config in Registry on Windows, in NSUserDefaults on Mac OS X (if the <a href=\"https://pypi.python.org/pypi/pyobjc-core/3.0.4\" rel=\"nofollow\">pyobjc-core</a> module is available) and in json-formatted file everywhere else.</p>\n<div id=\"caching\">\n<h2>Caching</h2>\n<p>Implementations for all platforms support caching which minimizes access to the backend. Specifically value is only read if it\u2019s not known to cache\nand written if it\u2019s different than cached one.</p>\n<p>Simply declare your subclass with <cite>ALLOW_CACHE</cite> set to <cite>True</cite>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">PreferredConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">CONFIG_VERSION</span> <span class=\"o\">=</span> <span class=\"n\">__version__</span>\n    <span class=\"n\">ALLOW_CACHE</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">REGISTRY_PATH</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'Software\\MyApp'</span>\n    <span class=\"n\">JSON_PATH</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">'~/.config/MyApp/config'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'FirstName'</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'LastName'</span><span class=\"p\">)</span>\n</pre>\n<p>You can also set this settings per option, by declarding them with <cite>allow_cache</cite> set to <cite>True</cite>.</p>\n</div>\n<div id=\"json-as-a-universal-format\">\n<h2>JSON as a universal format</h2>\n<p>At some point you will need to provide public interface (e.g. CLI or API) to edit config of your application.\nFor this reason there are methods to convert each option individually or whole config into JSON:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">PreferredConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">CONFIG_VERSION</span> <span class=\"o\">=</span> <span class=\"n\">__version__</span>\n    <span class=\"n\">REGISTRY_PATH</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'Software\\MyApp'</span>\n    <span class=\"n\">JSON_PATH</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">'~/.config/MyApp/config'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'FirstName'</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'LastName'</span><span class=\"p\">)</span>\n\n<span class=\"n\">MyConfig</span><span class=\"o\">.</span><span class=\"n\">get_instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_value_for_option_name</span><span class=\"p\">(</span><span class=\"s1\">'FirstName'</span><span class=\"p\">)</span>  <span class=\"c1\"># will return JSON version of first_name's value</span>\n<span class=\"n\">MyConfig</span><span class=\"o\">.</span><span class=\"n\">get_instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"p\">()</span>  <span class=\"c1\"># will return a JSON dictionary of all options</span>\n<span class=\"n\">MyConfig</span><span class=\"o\">.</span><span class=\"n\">get_instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">restore_snapshot</span><span class=\"p\">(</span><span class=\"n\">user_edited_snapshot</span><span class=\"p\">)</span>  <span class=\"c1\"># will update options with from user-edited JSON</span>\n</pre>\n</div>\n<div id=\"introspection\">\n<h2>Introspection</h2>\n<p>It\u2019s always cool when you hack around possible flaws in lib\u2019s code. So you have it: API of BasicConfig and BasicOption is carefully designed to be hackable.\nIn particular, config\u2019s attibutes can be easily inspected via the set of methods grouped under \u201cIntrospection\u201d section or by playing with the BasicConfig._ordered_options\ndirectly. You didn\u2019t misread, options are already are ordered in order of definition and even subclassing and even overriding!</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">PreferredConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">CONFIG_VERSION</span> <span class=\"o\">=</span> <span class=\"n\">__version__</span>\n    <span class=\"n\">REGISTRY_PATH</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'Software\\MyApp'</span>\n    <span class=\"n\">JSON_PATH</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">'~/.config/MyApp/config'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'FirstName'</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'LastName'</span><span class=\"p\">)</span>\n\n<span class=\"n\">MyConfig</span><span class=\"o\">.</span><span class=\"n\">get_instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_value_for_option_name</span><span class=\"p\">(</span><span class=\"s1\">'FirstName'</span><span class=\"p\">)</span>  <span class=\"c1\"># will return python value of the FirstName option</span>\n<span class=\"n\">MyConfig</span><span class=\"o\">.</span><span class=\"n\">get_instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_raw_value_for_option_name</span><span class=\"p\">(</span><span class=\"s1\">'FirstName'</span><span class=\"p\">)</span>  <span class=\"c1\"># will return raw value of the FirstName option</span>\n<span class=\"n\">MyConfig</span><span class=\"o\">.</span><span class=\"n\">get_instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_json_value_for_option_name</span><span class=\"p\">(</span><span class=\"s1\">'FirstName'</span><span class=\"p\">)</span>  <span class=\"c1\"># will return JSON encoded value of the FirstName option</span>\n</pre>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>The task that every developer is going to face. Fortunately nativeconfig has everything to assist you!</p>\n<p>Each config is versioned and default to 1.0. Its version is stored in the config backend under the \u201cConfigVersion\u201d name which\ncan be altered by modifying the CONFIG_VERSION_OPTION_NAME class variable.</p>\n<p>You should override it in custom subclass by defining the CONFIG_VERSION variable. Value that usually makes most sense is the <a href=\"https://www.python.org/dev/peps/pep-0396/\" rel=\"nofollow\">__version__</a> variable.\nEach time config is instantiated the <cite>migrate</cite> method is called. Implementation of the base class simply updates value of the \u201cConfigVersion\u201d (or whatever you called it) option to the actual value.\nReasonably, but insufficiently. Let\u2019s see what we can do:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">PreferredConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">CONFIG_VERSION</span> <span class=\"o\">=</span> <span class=\"n\">__version__</span>\n    <span class=\"n\">REGISTRY_PATH</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'Software\\MyApp'</span>\n    <span class=\"n\">JSON_PATH</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">'~/.config/MyApp/config'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'FirstName'</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'LastName'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">migrate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">version</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Either called for the very first time OR user's backed is broken because it lacks value of the ConfigVersion option.</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">version</span> <span class=\"o\">&lt;=</span> <span class=\"o\">&lt;</span><span class=\"n\">newer</span> <span class=\"n\">version</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Obviously &lt;= will not work for strings. You should use your own comparison function that follows you versioning guidelines.</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">version</span> <span class=\"o\">&lt;=</span> <span class=\"o\">&lt;</span><span class=\"n\">newest</span> <span class=\"n\">version</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Version should be checked starting from the oldest to the current so you can gracefully migrate even the oldest user's config.</span>\n            <span class=\"c1\"># `if` is used instead of `elif` for the same reason: you may need to migrate user's data through multiple versions of the config file.</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">version</span> <span class=\"o\">&lt;=</span> <span class=\"o\">&lt;</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">version</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">migrate</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"p\">)</span>  <span class=\"c1\"># always call base class implementation at the end!</span>\n</pre>\n<p>TL;DR three simple rules:</p>\n<ol>\n<li>Check from the oldest to the newest version</li>\n<li>User <cite>if</cite> instead of <cite>elif</cite></li>\n<li>Call super at the end</li>\n</ol>\n</div>\n<div id=\"error-recovery\">\n<h2>Error Recovery</h2>\n<p>When user base is huge, all sorts of weird issues will happen. Unexpected values of options is probably the most common one.\nAnd nativeconfig has everything you need to recover from such errors!</p>\n<p>Whenever config is unable to deserialize value or if deserialized value is unexpected (e.g. you wanted float bug got a path)\nthe <cite>resolve_value</cite> method is called. Default implementation logs an error and returns a default. If that\u2019s not sufficient\nor you have a better idea of how to recover than using default, you should override this method:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">PreferredConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">CONFIG_VERSION</span> <span class=\"o\">=</span> <span class=\"n\">__version__</span>\n    <span class=\"n\">REGISTRY_PATH</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'Software\\MyApp'</span>\n    <span class=\"n\">JSON_PATH</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">'~/.config/MyApp/config'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'FirstName'</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">StringOption</span><span class=\"p\">(</span><span class=\"s1\">'LastName'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">raw_or_json_value</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'FirstName'</span><span class=\"p\">:</span>\n            <span class=\"c1\"># E.g. restore value from Cloud-stored credentials.</span>\n            <span class=\"k\">pass</span>\n</pre>\n<p>Pretty basic: you have exc_info extracted where problem happened (either ValidationError or DeserializationError), name of the option, raw or json value and\nsource that explains where error happened.</p>\n</div>\n<div id=\"debugging\">\n<h2>Debugging</h2>\n<p>The <cite>warn</cite> module is used in some places, so you\u2019re advised to debug your app by turning all warnings into errors as described in <a href=\"https://docs.python.org/library/warnings.html\" rel=\"nofollow\">docs</a>.\nVarious logs are written to the <cite>nativeconfig</cite> logger. You can increase verbosity by advancing the level.</p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>To run tests, use the <cite>python -m test</cite> command.</p>\n</div>\n\n          </div>"}, "last_serial": 3451232, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4feec33db9ef2433a55d29bf680ad16f", "sha256": "c5d54f0802755f94839c60f0beaed92203717a16e2486e10acfc321c291a04bb"}, "downloads": -1, "filename": "nativeconfig-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4feec33db9ef2433a55d29bf680ad16f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8834, "upload_time": "2015-01-05T18:30:23", "upload_time_iso_8601": "2015-01-05T18:30:23.209196Z", "url": "https://files.pythonhosted.org/packages/79/0b/cf1fe4fc82c238522308b8076368707f61f936b81b7698f266917b2f0704/nativeconfig-1.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "65af4af955f16b2e3150db5d6181a7d2", "sha256": "a9693331df9b030e37dee52d7e2cc1c9f3d412d5852c3cbf2232937b728a08d0"}, "downloads": -1, "filename": "nativeconfig-2.0.1.tar.gz", "has_sig": false, "md5_digest": "65af4af955f16b2e3150db5d6181a7d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2831, "upload_time": "2015-05-13T10:28:55", "upload_time_iso_8601": "2015-05-13T10:28:55.558343Z", "url": "https://files.pythonhosted.org/packages/4f/3d/72d395279a0a34b6364da76fad7743a9e1e3af65912a2c5644fe0b1862ac/nativeconfig-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "6d21ef5800bad874c9817ce218e05c8d", "sha256": "afbddcbd6cfb82a6a09b77211df7d87b39db168902464990fad01b28edf03b48"}, "downloads": -1, "filename": "nativeconfig-2.0.2.tar.gz", "has_sig": false, "md5_digest": "6d21ef5800bad874c9817ce218e05c8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12550, "upload_time": "2015-05-13T12:31:01", "upload_time_iso_8601": "2015-05-13T12:31:01.867710Z", "url": "https://files.pythonhosted.org/packages/23/f6/4fa087c824f09381e3fd4bcd60d60679a0ddf956461236bed083dd902c62/nativeconfig-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "14c7218f3616ecc0d52d525ed86707d7", "sha256": "5132dad226987d32466d6db49d11e4eb4c7080fdc0a08cfbaa72ac6ddec28a9c"}, "downloads": -1, "filename": "nativeconfig-2.0.3.tar.gz", "has_sig": false, "md5_digest": "14c7218f3616ecc0d52d525ed86707d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12543, "upload_time": "2015-05-13T13:06:43", "upload_time_iso_8601": "2015-05-13T13:06:43.019974Z", "url": "https://files.pythonhosted.org/packages/85/07/7f1ff0c755040642e6c4f6bfd2544a5a9107551eba9c144350cf6b06ed07/nativeconfig-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "438c669800f7be2df0f04b7690dbb43f", "sha256": "25318989b5000bf7c59791a5b5f45ee99bfcd075d50e8d3e6547dd4ff194e8e7"}, "downloads": -1, "filename": "nativeconfig-2.0.4.tar.gz", "has_sig": false, "md5_digest": "438c669800f7be2df0f04b7690dbb43f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12563, "upload_time": "2015-05-15T09:54:12", "upload_time_iso_8601": "2015-05-15T09:54:12.528225Z", "url": "https://files.pythonhosted.org/packages/9e/ed/f60001fa82b3466fb053590ebaec64a393d927f1272b87bbef60747b0b4c/nativeconfig-2.0.4.tar.gz", "yanked": false}], "2.0.5": [], "2.0.6": [{"comment_text": "", "digests": {"md5": "5937bb2bc2f412ae666803c793832173", "sha256": "a423d7a1d927c2ba4272a91a0a767d8241fa6dcb65b8ebb754d6a3e59aa1cf05"}, "downloads": -1, "filename": "nativeconfig-2.0.6.tar.gz", "has_sig": false, "md5_digest": "5937bb2bc2f412ae666803c793832173", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11344, "upload_time": "2015-06-24T21:29:31", "upload_time_iso_8601": "2015-06-24T21:29:31.693016Z", "url": "https://files.pythonhosted.org/packages/55/d8/451fddb9eeb23ab6c2071ca692fee904afac03f3f876b6e3e29dcfb7c46a/nativeconfig-2.0.6.tar.gz", "yanked": false}], "2.0.7": [{"comment_text": "", "digests": {"md5": "6b79eb52f304a9725796e3934c1fd982", "sha256": "1580e13a341c0900e06ee1a7924191fa74fffcc80a9ecabfaa6c094bb9199285"}, "downloads": -1, "filename": "nativeconfig-2.0.7.tar.gz", "has_sig": false, "md5_digest": "6b79eb52f304a9725796e3934c1fd982", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11786, "upload_time": "2015-06-24T22:13:30", "upload_time_iso_8601": "2015-06-24T22:13:30.979490Z", "url": "https://files.pythonhosted.org/packages/98/a6/73cf8c6bcccf5e750617a8a74cd35b96d07778da8d59ee7ea26897b7c843/nativeconfig-2.0.7.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "ebe3376d817f9e337fb232afb986cdcb", "sha256": "bbb77982e9d6fce22fdb714bcda25cd10c26bbc6178eda896675c7fa3edaaefa"}, "downloads": -1, "filename": "nativeconfig-2.1.0.tar.gz", "has_sig": false, "md5_digest": "ebe3376d817f9e337fb232afb986cdcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12976, "upload_time": "2015-07-03T04:34:23", "upload_time_iso_8601": "2015-07-03T04:34:23.805492Z", "url": "https://files.pythonhosted.org/packages/69/f4/79b9880baa52c3621cfda5da8d5a887311e5973da2c3d08562172ec6f038/nativeconfig-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "01a89be1b2c1918395a3e174c8872ed5", "sha256": "26d22b83b0b852a9d3ef922398b895f2735f0ec33b021f744178499cda2f1b24"}, "downloads": -1, "filename": "nativeconfig-2.1.1.tar.gz", "has_sig": false, "md5_digest": "01a89be1b2c1918395a3e174c8872ed5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13203, "upload_time": "2015-07-06T18:07:05", "upload_time_iso_8601": "2015-07-06T18:07:05.545012Z", "url": "https://files.pythonhosted.org/packages/b2/4b/3c35073b1798132e9d8b7d7194bec0dfe2d75bce134702fb439776287bfc/nativeconfig-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "045dc46e8c3ad3beada9dd4511142ef0", "sha256": "ab9894cfbb462f8c0b78b1a12ebb8ab75a895c33126ab2a8c2a6a17c4bc8cfa7"}, "downloads": -1, "filename": "nativeconfig-2.1.2.tar.gz", "has_sig": false, "md5_digest": "045dc46e8c3ad3beada9dd4511142ef0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13391, "upload_time": "2015-07-09T03:37:31", "upload_time_iso_8601": "2015-07-09T03:37:31.466667Z", "url": "https://files.pythonhosted.org/packages/e0/bc/4c97bcc8c5cf5a81f727c848830c18b10206ca06553dfe44314c5635d244/nativeconfig-2.1.2.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "00a7025e6f8cd22a9b603b67b7977e57", "sha256": "96e0aa2850e3cc2b801bf8210c8a2f9d8e7cff9df4a04f218d672463ba6e8954"}, "downloads": -1, "filename": "nativeconfig-2.2.0.tar.gz", "has_sig": false, "md5_digest": "00a7025e6f8cd22a9b603b67b7977e57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14167, "upload_time": "2015-07-16T18:08:14", "upload_time_iso_8601": "2015-07-16T18:08:14.416911Z", "url": "https://files.pythonhosted.org/packages/96/91/a870fc126346939f77b0c1bb08f358911a3e6096fa53784f67d2fe6725af/nativeconfig-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "f0799e3f7381675d2a607f6743f9a040", "sha256": "620b853ad2fb7bf788cbddf5cfa69769c2d9f5c5bc4d9687a8b15e43cfef3240"}, "downloads": -1, "filename": "nativeconfig-2.2.1.tar.gz", "has_sig": false, "md5_digest": "f0799e3f7381675d2a607f6743f9a040", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14204, "upload_time": "2015-07-16T18:48:39", "upload_time_iso_8601": "2015-07-16T18:48:39.047511Z", "url": "https://files.pythonhosted.org/packages/d1/ff/cb942456ca17e3bb831ebf509d60b8ad6e486f5a6eb47efff58058d16ab9/nativeconfig-2.2.1.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "994090e22ec0b1dd571ede6403e576ea", "sha256": "54282e21a91794bb9c52d3d4226fa5d31536997f871f5ab84859e73eff756a82"}, "downloads": -1, "filename": "nativeconfig-2.2.3.tar.gz", "has_sig": false, "md5_digest": "994090e22ec0b1dd571ede6403e576ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14421, "upload_time": "2015-07-17T00:33:18", "upload_time_iso_8601": "2015-07-17T00:33:18.427722Z", "url": "https://files.pythonhosted.org/packages/ec/5a/96872805c8dbed68983c895e6b61f308dc77a44b18e26651e4ca21d4e7c7/nativeconfig-2.2.3.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "d063381441052129c7e6ba394c9460ef", "sha256": "ed9e47dcd584b1b2a19393a7e6e5d869f448b443d24eb5bf1d499da54dd3ad6e"}, "downloads": -1, "filename": "nativeconfig-2.3.0.tar.gz", "has_sig": false, "md5_digest": "d063381441052129c7e6ba394c9460ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14418, "upload_time": "2015-10-19T16:43:20", "upload_time_iso_8601": "2015-10-19T16:43:20.128159Z", "url": "https://files.pythonhosted.org/packages/a0/ce/e47fe9ec91c5380433632ba7edb283ad1f427d6e2a1ecf09676553181f09/nativeconfig-2.3.0.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "4f5319a6865b7b637cba26278687441f", "sha256": "a6a2324623375902f733bfefc27c58c06c0593a2ab6a648213e18f5ffc90521d"}, "downloads": -1, "filename": "nativeconfig-2.4.0.tar.gz", "has_sig": false, "md5_digest": "4f5319a6865b7b637cba26278687441f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14479, "upload_time": "2015-10-26T02:54:41", "upload_time_iso_8601": "2015-10-26T02:54:41.125752Z", "url": "https://files.pythonhosted.org/packages/f4/32/cacb362264080828a0baa76dc54ae72a35e0db94d61574005f9233bee3a0/nativeconfig-2.4.0.tar.gz", "yanked": false}], "2.5.0": [{"comment_text": "", "digests": {"md5": "f99d8eece118c553d4863702fc206f96", "sha256": "9841143c16408ef0c5f798e06ded785b7969b15b5af842fd84ffcbb9e358de2b"}, "downloads": -1, "filename": "nativeconfig-2.5.0.tar.gz", "has_sig": false, "md5_digest": "f99d8eece118c553d4863702fc206f96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14650, "upload_time": "2015-10-27T21:45:02", "upload_time_iso_8601": "2015-10-27T21:45:02.253624Z", "url": "https://files.pythonhosted.org/packages/93/5c/82bdf1a0c930d026eea86d8d4181e6c3e0eb5c1ab1c17b7af8d86b96200c/nativeconfig-2.5.0.tar.gz", "yanked": false}], "2.6.0": [{"comment_text": "", "digests": {"md5": "4ff6b15f31a8fef9267d176bd0168aaf", "sha256": "96d2472f4b2dfa62281e8b1b5713bb32669693424eafdab9b0bb387f09c778ba"}, "downloads": -1, "filename": "nativeconfig-2.6.0.tar.gz", "has_sig": false, "md5_digest": "4ff6b15f31a8fef9267d176bd0168aaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14672, "upload_time": "2015-10-27T23:28:38", "upload_time_iso_8601": "2015-10-27T23:28:38.700727Z", "url": "https://files.pythonhosted.org/packages/47/44/a10276ad997bf1bd2347a6984bc514482b90bbd85d4ddb036596a7b54144/nativeconfig-2.6.0.tar.gz", "yanked": false}], "2.7.0": [{"comment_text": "", "digests": {"md5": "1cff5f3321d9069b01b65b4abf3bed7f", "sha256": "703e95d13e482acf93079155748067dafa4c12f1f5f7a4895c9482a765a19f2c"}, "downloads": -1, "filename": "nativeconfig-2.7.0.tar.gz", "has_sig": false, "md5_digest": "1cff5f3321d9069b01b65b4abf3bed7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15809, "upload_time": "2015-11-24T13:33:16", "upload_time_iso_8601": "2015-11-24T13:33:16.124001Z", "url": "https://files.pythonhosted.org/packages/4e/13/545d6a66f206582aba1c1ab2b293a5565ab85d4ae8d7db874565537faaf5/nativeconfig-2.7.0.tar.gz", "yanked": false}], "2.7.1": [{"comment_text": "", "digests": {"md5": "3185edb061e9f87aa6312dfb17ef921d", "sha256": "c0911d31790f0abced49c143a889fa5d9a1cb161b394104363302597ad17ca78"}, "downloads": -1, "filename": "nativeconfig-2.7.1.tar.gz", "has_sig": false, "md5_digest": "3185edb061e9f87aa6312dfb17ef921d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15941, "upload_time": "2015-11-24T13:53:25", "upload_time_iso_8601": "2015-11-24T13:53:25.161519Z", "url": "https://files.pythonhosted.org/packages/45/36/59973479f5a29be08bd79c3f4f350d83cbca61ad35309f5f20e7414896d0/nativeconfig-2.7.1.tar.gz", "yanked": false}], "2.7.2": [{"comment_text": "", "digests": {"md5": "9aff3238dc769379c43d60e92db84b58", "sha256": "8174464053cfa1eef83c900d1438c15450dd13852532c823d9cc8e3662e0fe79"}, "downloads": -1, "filename": "nativeconfig-2.7.2.tar.gz", "has_sig": false, "md5_digest": "9aff3238dc769379c43d60e92db84b58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15961, "upload_time": "2015-11-30T09:17:35", "upload_time_iso_8601": "2015-11-30T09:17:35.464337Z", "url": "https://files.pythonhosted.org/packages/19/27/78d82e41eec8d73cd3dc0db75071e704982caec662e8e7b967c1877887f0/nativeconfig-2.7.2.tar.gz", "yanked": false}], "2.8": [{"comment_text": "", "digests": {"md5": "c4120ffed63e23c80d849c88022fc991", "sha256": "6b2bc7eb5bc2d91472aa598a9d9f3274698e58ec1cf92fe131ddba9e1f74d4e9"}, "downloads": -1, "filename": "nativeconfig-2.8.tar.gz", "has_sig": false, "md5_digest": "c4120ffed63e23c80d849c88022fc991", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15932, "upload_time": "2016-03-04T10:32:45", "upload_time_iso_8601": "2016-03-04T10:32:45.699797Z", "url": "https://files.pythonhosted.org/packages/20/8a/c7249291a886802b8a35bde1f23163b84966867acce963af1e81f04c261a/nativeconfig-2.8.tar.gz", "yanked": false}], "2.8.1": [{"comment_text": "", "digests": {"md5": "d9205f90c4fb0de8a72ec4e7fb9992ce", "sha256": "5406ab89db0f8567e5d4dafd3ea9e37ef5c659c7037afd1e055cb10e04f37337"}, "downloads": -1, "filename": "nativeconfig-2.8.1.tar.gz", "has_sig": false, "md5_digest": "d9205f90c4fb0de8a72ec4e7fb9992ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15607, "upload_time": "2016-07-14T23:47:00", "upload_time_iso_8601": "2016-07-14T23:47:00.109730Z", "url": "https://files.pythonhosted.org/packages/26/f6/102338b71464aa9b54c423641cb14dd81797a89fe54bb7801a6fc2866041/nativeconfig-2.8.1.tar.gz", "yanked": false}], "2.8.2": [{"comment_text": "", "digests": {"md5": "4c4ac8df47194e8bfa408ed6eba55faf", "sha256": "7c98c72a1cc9e0196fecf92e218904ef5bd2a370a64fd46641fbbb4615f35a2c"}, "downloads": -1, "filename": "nativeconfig-2.8.2.tar.gz", "has_sig": false, "md5_digest": "4c4ac8df47194e8bfa408ed6eba55faf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15621, "upload_time": "2016-07-29T21:23:27", "upload_time_iso_8601": "2016-07-29T21:23:27.218009Z", "url": "https://files.pythonhosted.org/packages/ba/73/91586d3e757178e32d04885f2b03e30e2a03125325666f4e94e450b9fa81/nativeconfig-2.8.2.tar.gz", "yanked": false}], "2.9": [{"comment_text": "", "digests": {"md5": "679e79475ab13d9b2c958a5d9b551c63", "sha256": "a31802c0c2b253f82b212ea71af4ffb28375f75cd8460f6aa3f2e13601bf0dee"}, "downloads": -1, "filename": "nativeconfig-2.9.tar.gz", "has_sig": false, "md5_digest": "679e79475ab13d9b2c958a5d9b551c63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15643, "upload_time": "2016-08-04T00:14:06", "upload_time_iso_8601": "2016-08-04T00:14:06.637450Z", "url": "https://files.pythonhosted.org/packages/49/11/c145ca33cfd77ef016139d88cc5e4e2b676fce78538b7fd432039801ea30/nativeconfig-2.9.tar.gz", "yanked": false}], "2.9.1": [{"comment_text": "", "digests": {"md5": "a95837576f4f93879bb8164ab6e6cf29", "sha256": "a5ad335802542481512270429944028fdd413ab4f64172ed4570d3f8f4cf51c4"}, "downloads": -1, "filename": "nativeconfig-2.9.1.tar.gz", "has_sig": false, "md5_digest": "a95837576f4f93879bb8164ab6e6cf29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15668, "upload_time": "2016-08-12T01:06:49", "upload_time_iso_8601": "2016-08-12T01:06:49.836542Z", "url": "https://files.pythonhosted.org/packages/9f/fa/872d86cff43951ec7e2a4649b96a3c38de4f944ebf0e7419d8edefcf7cac/nativeconfig-2.9.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "8a80cc501e72a3f5d4b1b350d4d9db18", "sha256": "42663e8a2b00d857197f47f81c1f4eed8639ea45e9ca2a2b0ba419fac9d377ec"}, "downloads": -1, "filename": "nativeconfig-3.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8a80cc501e72a3f5d4b1b350d4d9db18", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21209, "upload_time": "2016-09-29T01:12:50", "upload_time_iso_8601": "2016-09-29T01:12:50.691542Z", "url": "https://files.pythonhosted.org/packages/42/6f/cf37c89f5b715f816644f9a105757e9b40b0445644392cb55ff8d50ff712/nativeconfig-3.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2607b120d1eb6e300cdea5deb700deac", "sha256": "82cb8443eb7d1860b54e8d3703a1af8105190c2cd642dc074216fddd57fdbe17"}, "downloads": -1, "filename": "nativeconfig-3.0.0.tar.gz", "has_sig": false, "md5_digest": "2607b120d1eb6e300cdea5deb700deac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16124, "upload_time": "2016-09-29T01:12:33", "upload_time_iso_8601": "2016-09-29T01:12:33.732673Z", "url": "https://files.pythonhosted.org/packages/8b/27/e30d5d9b9c950fd7ba8e4d4349f54b36c6d0bb544521d99c1ebbe1b69f4d/nativeconfig-3.0.0.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "be4bc6409099f9aa011c43d7837aa7d4", "sha256": "21e53dd7e9e40d50eb4711b5dcbb6bdf5b470f8d7d00235046c483113a719aca"}, "downloads": -1, "filename": "nativeconfig-3.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "be4bc6409099f9aa011c43d7837aa7d4", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 38536, "upload_time": "2016-10-01T00:19:04", "upload_time_iso_8601": "2016-10-01T00:19:04.767445Z", "url": "https://files.pythonhosted.org/packages/8e/db/ee2694668ebad61d3d17f0c96ee6b0f94a8bc96e4516b45c115c8e8905ef/nativeconfig-3.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "297e61510b806db3c0a8b04f5f93e0c4", "sha256": "730632b83bd7f8f1f5dbf485583d9fe12dc0c8caf3efb6043ce79cd9de24620f"}, "downloads": -1, "filename": "nativeconfig-3.1.1.tar.gz", "has_sig": false, "md5_digest": "297e61510b806db3c0a8b04f5f93e0c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15944, "upload_time": "2016-10-01T00:19:01", "upload_time_iso_8601": "2016-10-01T00:19:01.469905Z", "url": "https://files.pythonhosted.org/packages/31/bb/3072d7bf09b6eb78c0b3ab86a29f307d82c8786512d8f52bb5bc563ea1e5/nativeconfig-3.1.1.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "6edd16168147f46cab4292668646c71b", "sha256": "835c2186ab041c533b36c2db33d9fc10f40db6919e219d74e1b1a0bfa6133566"}, "downloads": -1, "filename": "nativeconfig-3.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6edd16168147f46cab4292668646c71b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31310, "upload_time": "2017-03-17T22:28:40", "upload_time_iso_8601": "2017-03-17T22:28:40.530920Z", "url": "https://files.pythonhosted.org/packages/17/9b/90a775822463cfeab11a5506c4cbcfe1ff1d61ced81fdf3aed39713177dd/nativeconfig-3.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "489643f10054711e453a7491c0c892eb", "sha256": "fd4f2bbad11e776775e35a3ac9f2d9f51ce495f986a5d800a3fc827fbebfc4e0"}, "downloads": -1, "filename": "nativeconfig-3.2.0.tar.gz", "has_sig": false, "md5_digest": "489643f10054711e453a7491c0c892eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16868, "upload_time": "2017-03-17T22:28:41", "upload_time_iso_8601": "2017-03-17T22:28:41.629783Z", "url": "https://files.pythonhosted.org/packages/dc/bf/c14edbec8f2d5c77a3e6470eb03c2a9df95d290730ea5deed90a1d938cb3/nativeconfig-3.2.0.tar.gz", "yanked": false}], "3.2.1": [{"comment_text": "", "digests": {"md5": "11b41a61b7b5b375dbb34dde4fb7bdfc", "sha256": "57843960a413a25c1ef9884ce615a83ed1ae807e77cbe770d159effbda4297a4"}, "downloads": -1, "filename": "nativeconfig-3.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "11b41a61b7b5b375dbb34dde4fb7bdfc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36531, "upload_time": "2017-03-17T22:33:34", "upload_time_iso_8601": "2017-03-17T22:33:34.440198Z", "url": "https://files.pythonhosted.org/packages/d3/04/f66b8772c9fbe1766647166fcb92a668e0e1b094363addb2dac9d90258c9/nativeconfig-3.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad27f645031953e025ebee5745469e52", "sha256": "091cf408f5ac4ffc6ebf3c3a0185d17795b0b5e2e31ca543b0c4278e5e723ea7"}, "downloads": -1, "filename": "nativeconfig-3.2.1.tar.gz", "has_sig": false, "md5_digest": "ad27f645031953e025ebee5745469e52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17353, "upload_time": "2017-03-17T22:33:35", "upload_time_iso_8601": "2017-03-17T22:33:35.958058Z", "url": "https://files.pythonhosted.org/packages/cc/9d/75724a9c475a3d4df5067a702ada72d061f1d1d1361f41eecd8dcd1e4877/nativeconfig-3.2.1.tar.gz", "yanked": false}], "3.3.0": [{"comment_text": "", "digests": {"md5": "844dab53056868360f66f1b30cb35079", "sha256": "898026450a006974a6374e42d99e994f69b7157b7fe376669c0943ef1d5ec68f"}, "downloads": -1, "filename": "nativeconfig-3.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "844dab53056868360f66f1b30cb35079", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36529, "upload_time": "2017-03-25T00:21:32", "upload_time_iso_8601": "2017-03-25T00:21:32.089795Z", "url": "https://files.pythonhosted.org/packages/4b/b2/4611d2fb45b279b53b46ccb7ad0584c3ccacbd842f5415a573cd537fbc60/nativeconfig-3.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9857f1b72407d572d4424b1fbf55984e", "sha256": "fb0edc4c3def48a8cda19789130fe6998f173fa6720cd6ef08dc93690b8a8190"}, "downloads": -1, "filename": "nativeconfig-3.3.0.tar.gz", "has_sig": false, "md5_digest": "9857f1b72407d572d4424b1fbf55984e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17109, "upload_time": "2017-03-25T00:21:34", "upload_time_iso_8601": "2017-03-25T00:21:34.406824Z", "url": "https://files.pythonhosted.org/packages/24/30/c61eb45c7d845d6b82403ac436762d2a6fe84ec0114d6d15ea6c9e2fde77/nativeconfig-3.3.0.tar.gz", "yanked": false}], "3.3.1": [{"comment_text": "", "digests": {"md5": "53871091abce3b0da1573ab3ff5651c7", "sha256": "7c98c5135b64b982aae6c75d9237b76f0f3e9afc4edb61c5febeedd004108fbb"}, "downloads": -1, "filename": "nativeconfig-3.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "53871091abce3b0da1573ab3ff5651c7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36671, "upload_time": "2017-04-17T23:34:48", "upload_time_iso_8601": "2017-04-17T23:34:48.151767Z", "url": "https://files.pythonhosted.org/packages/6a/d6/d16046e7cecfcfe6078c0721defe517423c702be8a23a7800ebc55bc9b0d/nativeconfig-3.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "570ddf790330938d9aefe9f4a1da5439", "sha256": "8528d4ef7ebc419d8d49d304aa89c253be4c05b8a3fa7670e1fa5d0baecee0c8"}, "downloads": -1, "filename": "nativeconfig-3.3.1.tar.gz", "has_sig": false, "md5_digest": "570ddf790330938d9aefe9f4a1da5439", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17200, "upload_time": "2017-04-17T23:34:49", "upload_time_iso_8601": "2017-04-17T23:34:49.585464Z", "url": "https://files.pythonhosted.org/packages/09/2f/b4aa77d1167cb7865823f56b5e0c11b4d1273ff4fe5186e2eea95cde3466/nativeconfig-3.3.1.tar.gz", "yanked": false}], "3.4.0": [{"comment_text": "", "digests": {"md5": "9a30fff33705bb4a1e28ce82944ff984", "sha256": "211c4bc7841816cb8642d4f5c116dbeaf2d4d294bd2c24d18588477e5e2422c5"}, "downloads": -1, "filename": "nativeconfig-3.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9a30fff33705bb4a1e28ce82944ff984", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28948, "upload_time": "2017-12-30T08:11:58", "upload_time_iso_8601": "2017-12-30T08:11:58.001598Z", "url": "https://files.pythonhosted.org/packages/f4/45/e1e9c892a113c3491fa121b717402f76a8378a7cea9ae624a2c921315134/nativeconfig-3.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f5bd676b2ba6d053bb07afab457b2e0", "sha256": "67f986a9ded5f26e5263b81912b28810e0887abcc074eb4bd85d0107b9f8f823"}, "downloads": -1, "filename": "nativeconfig-3.4.0.tar.gz", "has_sig": false, "md5_digest": "0f5bd676b2ba6d053bb07afab457b2e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17936, "upload_time": "2017-12-30T08:12:00", "upload_time_iso_8601": "2017-12-30T08:12:00.901230Z", "url": "https://files.pythonhosted.org/packages/ef/f2/6ff7dd6a9c0d928dbf447bad057bf7339b1e1ad22c45e4676dd21f6d2640/nativeconfig-3.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9a30fff33705bb4a1e28ce82944ff984", "sha256": "211c4bc7841816cb8642d4f5c116dbeaf2d4d294bd2c24d18588477e5e2422c5"}, "downloads": -1, "filename": "nativeconfig-3.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9a30fff33705bb4a1e28ce82944ff984", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28948, "upload_time": "2017-12-30T08:11:58", "upload_time_iso_8601": "2017-12-30T08:11:58.001598Z", "url": "https://files.pythonhosted.org/packages/f4/45/e1e9c892a113c3491fa121b717402f76a8378a7cea9ae624a2c921315134/nativeconfig-3.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f5bd676b2ba6d053bb07afab457b2e0", "sha256": "67f986a9ded5f26e5263b81912b28810e0887abcc074eb4bd85d0107b9f8f823"}, "downloads": -1, "filename": "nativeconfig-3.4.0.tar.gz", "has_sig": false, "md5_digest": "0f5bd676b2ba6d053bb07afab457b2e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17936, "upload_time": "2017-12-30T08:12:00", "upload_time_iso_8601": "2017-12-30T08:12:00.901230Z", "url": "https://files.pythonhosted.org/packages/ef/f2/6ff7dd6a9c0d928dbf447bad057bf7339b1e1ad22c45e4676dd21f6d2640/nativeconfig-3.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:21 2020"}