{"info": {"author": "Ivan Sorokin", "author_email": "sorokin.ivan@inbox.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# PyTorch bindings for CUDA-Warp Recurrent Neural Aligner\n\n\n```python\ndef rna_loss(log_probs: torch.FloatTensor,\n             labels: torch.IntTensor,\n             frames_lengths: torch.IntTensor,\n             labels_lengths: torch.IntTensor,\n             average_frames: bool = False,\n             reduction: Optional[AnyStr] = None,\n             blank: int = 0) -> torch.Tensor:\n\n    \"\"\"The CUDA-Warp Recurrent Neural Aligner loss.\n\n    Args:\n        log_probs (torch.FloatTensor): Input tensor with shape (N, T, U, V)\n            where N is the minibatch size, T is the maximum number of\n            input frames, U is the maximum number of output labels and V is\n            the vocabulary of labels (including the blank).\n        labels (torch.IntTensor): Tensor with shape (N, U-1) representing the\n            reference labels for all samples in the minibatch.\n        frames_lengths (torch.IntTensor): Tensor with shape (N,) representing the\n            number of frames for each sample in the minibatch.\n        labels_lengths (torch.IntTensor): Tensor with shape (N,) representing the\n            length of the transcription for each sample in the minibatch.\n        average_frames (bool, optional): Specifies whether the loss of each\n            sample should be divided by its number of frames.\n            Default: False.\n        reduction (string, optional): Specifies the type of reduction.\n            Default: None.\n        blank (int, optional): label used to represent the blank symbol.\n            Default: 0.\n    \"\"\"\n```\n\n## Requirements\n\n- C++11 or C++14 compiler (tested with GCC 5.4).\n- Python: 3.5, 3.6, 3.7 (tested with version 3.6).\n- [PyTorch](http://pytorch.org/) >= 1.0.0 (tested with version 1.1.0).\n- [CUDA Toolkit](https://developer.nvidia.com/cuda-zone) (tested with version 10.0).\n\n\n\n## Install\n\nThe following setup instructions compile the package from the source code locally.\n\n### From Pypi\n\n```bash\npip install warp_rna\n```\n\n### From GitHub\n\n```bash\ngit clone https://github.com/1ytic/warp-rna\ncd warp-rna/pytorch_binding\npython setup.py install\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/1ytic/warp-rna/tree/master/pytorch_binding", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "warp-rna", "package_url": "https://pypi.org/project/warp-rna/", "platform": "", "project_url": "https://pypi.org/project/warp-rna/", "project_urls": {"Homepage": "https://github.com/1ytic/warp-rna/tree/master/pytorch_binding"}, "release_url": "https://pypi.org/project/warp-rna/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "PyTorch bindings for CUDA-Warp Recurrent Neural Aligner", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyTorch bindings for CUDA-Warp Recurrent Neural Aligner</h1>\n<pre><span class=\"k\">def</span> <span class=\"nf\">rna_loss</span><span class=\"p\">(</span><span class=\"n\">log_probs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">FloatTensor</span><span class=\"p\">,</span>\n             <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">IntTensor</span><span class=\"p\">,</span>\n             <span class=\"n\">frames_lengths</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">IntTensor</span><span class=\"p\">,</span>\n             <span class=\"n\">labels_lengths</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">IntTensor</span><span class=\"p\">,</span>\n             <span class=\"n\">average_frames</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n             <span class=\"n\">reduction</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">AnyStr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n             <span class=\"n\">blank</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">:</span>\n\n    <span class=\"sd\">\"\"\"The CUDA-Warp Recurrent Neural Aligner loss.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        log_probs (torch.FloatTensor): Input tensor with shape (N, T, U, V)</span>\n<span class=\"sd\">            where N is the minibatch size, T is the maximum number of</span>\n<span class=\"sd\">            input frames, U is the maximum number of output labels and V is</span>\n<span class=\"sd\">            the vocabulary of labels (including the blank).</span>\n<span class=\"sd\">        labels (torch.IntTensor): Tensor with shape (N, U-1) representing the</span>\n<span class=\"sd\">            reference labels for all samples in the minibatch.</span>\n<span class=\"sd\">        frames_lengths (torch.IntTensor): Tensor with shape (N,) representing the</span>\n<span class=\"sd\">            number of frames for each sample in the minibatch.</span>\n<span class=\"sd\">        labels_lengths (torch.IntTensor): Tensor with shape (N,) representing the</span>\n<span class=\"sd\">            length of the transcription for each sample in the minibatch.</span>\n<span class=\"sd\">        average_frames (bool, optional): Specifies whether the loss of each</span>\n<span class=\"sd\">            sample should be divided by its number of frames.</span>\n<span class=\"sd\">            Default: False.</span>\n<span class=\"sd\">        reduction (string, optional): Specifies the type of reduction.</span>\n<span class=\"sd\">            Default: None.</span>\n<span class=\"sd\">        blank (int, optional): label used to represent the blank symbol.</span>\n<span class=\"sd\">            Default: 0.</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h2>Requirements</h2>\n<ul>\n<li>C++11 or C++14 compiler (tested with GCC 5.4).</li>\n<li>Python: 3.5, 3.6, 3.7 (tested with version 3.6).</li>\n<li><a href=\"http://pytorch.org/\" rel=\"nofollow\">PyTorch</a> &gt;= 1.0.0 (tested with version 1.1.0).</li>\n<li><a href=\"https://developer.nvidia.com/cuda-zone\" rel=\"nofollow\">CUDA Toolkit</a> (tested with version 10.0).</li>\n</ul>\n<h2>Install</h2>\n<p>The following setup instructions compile the package from the source code locally.</p>\n<h3>From Pypi</h3>\n<pre>pip install warp_rna\n</pre>\n<h3>From GitHub</h3>\n<pre>git clone https://github.com/1ytic/warp-rna\n<span class=\"nb\">cd</span> warp-rna/pytorch_binding\npython setup.py install\n</pre>\n\n          </div>"}, "last_serial": 7016227, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a47183f79153097a8ff6b958a257ec7b", "sha256": "f99805d70ae82efb35f3155d17297011f9e715bbe20f83dcdd6dac4058ccd188"}, "downloads": -1, "filename": "warp_rna-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a47183f79153097a8ff6b958a257ec7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8347, "upload_time": "2019-08-11T07:45:55", "upload_time_iso_8601": "2019-08-11T07:45:55.553003Z", "url": "https://files.pythonhosted.org/packages/0b/01/fbcdc84dabd2686337af7a97b50b7ff8b3c6ff5461762595e3df1c053467/warp_rna-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "075bc50a38ea5ee7c05f5a18bea79bc2", "sha256": "b2e457aa8ee2a098331540acea03d924f62b76661bdbbbbfa7965ea5af77fa48"}, "downloads": -1, "filename": "warp_rna-0.0.2.tar.gz", "has_sig": false, "md5_digest": "075bc50a38ea5ee7c05f5a18bea79bc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9346, "upload_time": "2019-08-11T07:50:54", "upload_time_iso_8601": "2019-08-11T07:50:54.371296Z", "url": "https://files.pythonhosted.org/packages/6d/4b/5f8788dc301fad8f9f76bac6c04746a8fec59700282a27582062fc674947/warp_rna-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "36dc65771308276cb03895cd4b888860", "sha256": "5e93ace031aeeba5b2f0b4d2225b873e62a2eb43e9cc07cb19df9cf4b9c52e3a"}, "downloads": -1, "filename": "warp_rna-0.1.0.tar.gz", "has_sig": false, "md5_digest": "36dc65771308276cb03895cd4b888860", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9153, "upload_time": "2019-08-13T16:00:58", "upload_time_iso_8601": "2019-08-13T16:00:58.784796Z", "url": "https://files.pythonhosted.org/packages/21/8e/5672b361a170ae6d20cbf50e021a9d5456210ccfd12b916abc632ea0f551/warp_rna-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "aa68249d423a70f9c0ecadb6950a11ae", "sha256": "dc9571ae08f654cb2dcd9e71083bb8a699f365da6559c419c45b1a7c34988155"}, "downloads": -1, "filename": "warp_rna-0.2.0.tar.gz", "has_sig": false, "md5_digest": "aa68249d423a70f9c0ecadb6950a11ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8823, "upload_time": "2019-12-08T08:14:22", "upload_time_iso_8601": "2019-12-08T08:14:22.779649Z", "url": "https://files.pythonhosted.org/packages/59/6c/9de75b5e0809555e361db0a63ba61f214b5f2d4bdc8a8dcace9db3c4c3a1/warp_rna-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "e78eafdded12592397cc327965586c6b", "sha256": "79e9db3c46b21633f08e917c3af3b422541b2657f22397f90fa43b3753695df2"}, "downloads": -1, "filename": "warp_rna-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e78eafdded12592397cc327965586c6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8381, "upload_time": "2020-04-14T10:46:57", "upload_time_iso_8601": "2020-04-14T10:46:57.847988Z", "url": "https://files.pythonhosted.org/packages/99/b1/ddec69cddadf990c276536da586b773191b8de49be79630a9e17d61aa2e9/warp_rna-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e78eafdded12592397cc327965586c6b", "sha256": "79e9db3c46b21633f08e917c3af3b422541b2657f22397f90fa43b3753695df2"}, "downloads": -1, "filename": "warp_rna-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e78eafdded12592397cc327965586c6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8381, "upload_time": "2020-04-14T10:46:57", "upload_time_iso_8601": "2020-04-14T10:46:57.847988Z", "url": "https://files.pythonhosted.org/packages/99/b1/ddec69cddadf990c276536da586b773191b8de49be79630a9e17d61aa2e9/warp_rna-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:22 2020"}