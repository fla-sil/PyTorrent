{"info": {"author": "Naoyuki Kamo", "author_email": "naoyuki.kamo829@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# pytorch_complex\n\n[![Build Status](https://travis-ci.org/kamo-naoyuki/pytorch_complex.svg?branch=master)](https://travis-ci.org/kamo-naoyuki/pytorch_complex)\n[![codecov](https://codecov.io/gh/kamo-naoyuki/pytorch_complex/branch/master/graph/badge.svg)](https://codecov.io/gh/kamo-naoyuki/pytorch_complex)\n\nA temporal python class for PyTorch-ComplexTensor\n\n\n## What is this?\nA Python class to perform as `ComplexTensor` in PyTorch: Nothing except for the following,\n\n```python\nclass ComplexTensor: \n    def __init__(self, ...):\n        self.real = torch.Tensor(...)\n        self.imag = torch.Tensor(...)\n```\n\n### Why?\nPyTorch is great DNN Python library, except that it doesn't support `ComplexTensor` in Python level.\n\nhttps://github.com/pytorch/pytorch/issues/755\n\nI'm looking forward to the completion, but I need `ComplexTensor` for now.\n I created this cheap module for the temporal replacement of it. Thus, I'll throw away this project as soon as  `ComplexTensor` is completely supported!\n\n## Requirements\n\n```\nPython>=3.6\nPyTorch>=1.0\n```\n\n## Install\n\n```\npip install git+https://github.com/kamo-naoyuki/pytorch_complex\n```\n\n## How to use\n\n### Basic mathematical operation\n```python\nimport numpy as np\nfrom torch_complex.tensor import ComplexTensor\n\nreal = np.random.randn(3, 10, 10)\nimag = np.random.randn(3, 10, 10)\n\nx = ComplexTensor(real, imag)\nx.numpy()\n\nx + x\nx * x\nx - x\nx / x\nx ** 1.5\nx @ x  # Batch-matmul\nx.conj()\nx.inverse() # Batch-inverse\n```\n\nAll are implemented with combinations of computation of `RealTensor` in python level, thus the speed\u3000is not good enough.\n\n\n### Functional\n\n```python\nimport torch_complex.functional as F\nF.cat([x, x])\nF.stack([x, x])\nF.matmul(x, x)  # Same as x @ x\nF.einsum('bij,bjk,bkl->bil', [x, x, x])\n```\n\n### For DNN\nAlmost all methods that `torch.Tensor` has are implemented. \n\n```python\nx.cuda()\nx.cpu()\n(x + x).sum().backward()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kamo-naoyuki/torch_complex", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "torch-complex", "package_url": "https://pypi.org/project/torch-complex/", "platform": "", "project_url": "https://pypi.org/project/torch-complex/", "project_urls": {"Homepage": "https://github.com/kamo-naoyuki/torch_complex"}, "release_url": "https://pypi.org/project/torch-complex/0.0.3/", "requires_dist": ["numpy"], "requires_python": "", "summary": "A fugacious python class for PyTorch-ComplexTensor", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pytorch_complex</h1>\n<p><a href=\"https://travis-ci.org/kamo-naoyuki/pytorch_complex\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab5fda77e96195d457ea0a30ea790dcbd5d5c662/68747470733a2f2f7472617669732d63692e6f72672f6b616d6f2d6e616f79756b692f7079746f7263685f636f6d706c65782e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/kamo-naoyuki/pytorch_complex\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a32328a3b6375a75f7cdcfd472c0bf374152360/68747470733a2f2f636f6465636f762e696f2f67682f6b616d6f2d6e616f79756b692f7079746f7263685f636f6d706c65782f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>A temporal python class for PyTorch-ComplexTensor</p>\n<h2>What is this?</h2>\n<p>A Python class to perform as <code>ComplexTensor</code> in PyTorch: Nothing except for the following,</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ComplexTensor</span><span class=\"p\">:</span> \n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">real</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">imag</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<h3>Why?</h3>\n<p>PyTorch is great DNN Python library, except that it doesn't support <code>ComplexTensor</code> in Python level.</p>\n<p><a href=\"https://github.com/pytorch/pytorch/issues/755\" rel=\"nofollow\">https://github.com/pytorch/pytorch/issues/755</a></p>\n<p>I'm looking forward to the completion, but I need <code>ComplexTensor</code> for now.\nI created this cheap module for the temporal replacement of it. Thus, I'll throw away this project as soon as  <code>ComplexTensor</code> is completely supported!</p>\n<h2>Requirements</h2>\n<pre><code>Python&gt;=3.6\nPyTorch&gt;=1.0\n</code></pre>\n<h2>Install</h2>\n<pre><code>pip install git+https://github.com/kamo-naoyuki/pytorch_complex\n</code></pre>\n<h2>How to use</h2>\n<h3>Basic mathematical operation</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch_complex.tensor</span> <span class=\"kn\">import</span> <span class=\"n\">ComplexTensor</span>\n\n<span class=\"n\">real</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">imag</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ComplexTensor</span><span class=\"p\">(</span><span class=\"n\">real</span><span class=\"p\">,</span> <span class=\"n\">imag</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">numpy</span><span class=\"p\">()</span>\n\n<span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">x</span>\n<span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n<span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">x</span>\n<span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">x</span>\n<span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mf\">1.5</span>\n<span class=\"n\">x</span> <span class=\"o\">@</span> <span class=\"n\">x</span>  <span class=\"c1\"># Batch-matmul</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">conj</span><span class=\"p\">()</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">inverse</span><span class=\"p\">()</span> <span class=\"c1\"># Batch-inverse</span>\n</pre>\n<p>All are implemented with combinations of computation of <code>RealTensor</code> in python level, thus the speed\u3000is not good enough.</p>\n<h3>Functional</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch_complex.functional</span> <span class=\"k\">as</span> <span class=\"nn\">F</span>\n<span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">cat</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">])</span>\n<span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">])</span>\n<span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">matmul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># Same as x @ x</span>\n<span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">einsum</span><span class=\"p\">(</span><span class=\"s1\">'bij,bjk,bkl-&gt;bil'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">])</span>\n</pre>\n<h3>For DNN</h3>\n<p>Almost all methods that <code>torch.Tensor</code> has are implemented.</p>\n<pre><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">cuda</span><span class=\"p\">()</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">cpu</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 7150265, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "a745fcfffbf63146ed75d060b9116dd7", "sha256": "173eb9709571346c3cc72221f088d2f7b11a87ac233b95e4e8a97d14cf43c4fc"}, "downloads": -1, "filename": "torch_complex-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a745fcfffbf63146ed75d060b9116dd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7335, "upload_time": "2020-05-02T07:40:34", "upload_time_iso_8601": "2020-05-02T07:40:34.832402Z", "url": "https://files.pythonhosted.org/packages/d7/99/a045d269ba0b476f8eb49a7e378caf312346fa230a59e1bf382a91149488/torch_complex-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac6604798eed32a1e4d6b78aa0986388", "sha256": "7effa21e69806f6644a411ecb210d67661170a8e2669a162dee475d3485ca3ff"}, "downloads": -1, "filename": "torch_complex-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ac6604798eed32a1e4d6b78aa0986388", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7997, "upload_time": "2020-05-02T07:40:37", "upload_time_iso_8601": "2020-05-02T07:40:37.860422Z", "url": "https://files.pythonhosted.org/packages/b6/9e/cbb6bd11fc0038c17bf08509152f47e19da917d7cb03d5e5d9ac4bc10b0e/torch_complex-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "1d22ae5f9d6dd4358cab8413b0100ee7", "sha256": "8c305ccb27088a9ff551d0521975568b58cebdd0001a6a1ff1a81bc95440db86"}, "downloads": -1, "filename": "torch_complex-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1d22ae5f9d6dd4358cab8413b0100ee7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7337, "upload_time": "2020-05-02T08:16:40", "upload_time_iso_8601": "2020-05-02T08:16:40.176051Z", "url": "https://files.pythonhosted.org/packages/4b/9b/8cc15fe78872746c68a6731e837357e21ea9edc89ee5ff95b8c2b5e2a55f/torch_complex-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee3bc19071869767300e07069a17b110", "sha256": "120afbb8430fec4eb63cedee5d9295ae3a00b9523a89a7ff6fb21fd6c2ae9569"}, "downloads": -1, "filename": "torch_complex-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ee3bc19071869767300e07069a17b110", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8339, "upload_time": "2020-05-02T08:16:41", "upload_time_iso_8601": "2020-05-02T08:16:41.077217Z", "url": "https://files.pythonhosted.org/packages/26/c2/cc24a46882dfd3dbd25f16d5f68924adf6e180db45f17449ea13c0a4eef5/torch_complex-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d22ae5f9d6dd4358cab8413b0100ee7", "sha256": "8c305ccb27088a9ff551d0521975568b58cebdd0001a6a1ff1a81bc95440db86"}, "downloads": -1, "filename": "torch_complex-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1d22ae5f9d6dd4358cab8413b0100ee7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7337, "upload_time": "2020-05-02T08:16:40", "upload_time_iso_8601": "2020-05-02T08:16:40.176051Z", "url": "https://files.pythonhosted.org/packages/4b/9b/8cc15fe78872746c68a6731e837357e21ea9edc89ee5ff95b8c2b5e2a55f/torch_complex-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee3bc19071869767300e07069a17b110", "sha256": "120afbb8430fec4eb63cedee5d9295ae3a00b9523a89a7ff6fb21fd6c2ae9569"}, "downloads": -1, "filename": "torch_complex-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ee3bc19071869767300e07069a17b110", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8339, "upload_time": "2020-05-02T08:16:41", "upload_time_iso_8601": "2020-05-02T08:16:41.077217Z", "url": "https://files.pythonhosted.org/packages/26/c2/cc24a46882dfd3dbd25f16d5f68924adf6e180db45f17449ea13c0a4eef5/torch_complex-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:50:34 2020"}