{"info": {"author": "Enthought", "author_email": "info@enthought.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Cython", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "----------------------------------------------------------------\nvpsearch - Fast Vantage-Point Tree Search for Sequence Databases\n----------------------------------------------------------------\n\nThis is a package for indexing and querying a sequence database for fast\nnearest-neighbor search by means of [vantage point\ntrees](https://en.wikipedia.org/wiki/Vantage-point_tree). For reasonably large\ndatabases, such as [RDP](https://rdp.cme.msu.edu/), this results in sequence\nlookups that are typically 5-10 times faster than other alignment-based lookup\nmethods.\n\nVantage-point tree search uses global-to-global alignment to compare sequences,\nrather than seed-and-extend approximative methods as used for example by\nBLAST.\n\n## Usage\n\nGiven a sequence database (in FASTA format), `vpsearch build` constructs an\noptimized vantage point search tree. Building the tree is a one-time operation\nand doesn't have to be done again unless the database changes. As an\nillustration, we build a vantage point tree for the RDP database of bacterial\n16S sequences. This database contains 281261 sequences of which 39237 are\nduplicates. After removing these duplicates, we are left with 242024 unique\nsequences. Building a tree for these sequences is done with:\n```bash\n  $ vpsearch build rdp_download_281261seqs_dedup.fa\n  Building for 242024 sequences...\n  done.\n  Linearizing...done.\n  Database created in rdp_download_281261seqs_dedup.db\n```\nFor the RDP database of full length sequences, this takes about 20 minutes on a\nstandard machine. When only selected regions of the sequences are considered,\nthe time needed to build a tree can be much reduced. For example, vantage point\ntrees for the v1-v2 hypervariable region (350 base pairs) or the v3-v4 region\n(250 base pairs) of the RDP 16S sequencese can be built in 30 seconds to 1\nminute.\n\nOnce a tree has been built, unknown sequences can be looked up using the\n`vpsearch query` command. Here we supply a query file with a single sequence\n```bash\n  vpsearch query rdp_download_281261seqs_dedup.fa query.fa\n  query\tS000143715\t99.54\t1529\t0\t0\t1\t1524\t1\t1529\t0\t7546\n  query\tS004085923\t99.08\t1529\t0\t0\t1\t1524\t1\t1526\t0\t7481\n  query\tS004085922\t99.08\t1529\t0\t0\t1\t1524\t1\t1526\t0\t7481\n  query\tS004085925\t98.50\t1531\t0\t0\t1\t1524\t1\t1527\t0\t7386\n\n```\nBy default, the `vpsearch query` command outputs the best four matches in the\ndatabase per query sequence (the number of matches can be changed with the `-k`\nparameter). Lookup is done one query sequence at a time, but multiple queries\ncan be considered in parallel by enabling multiple threads; use the `-j` option\nto specify the number of threads.\n\nThe `vpsearch query` command attempts to output its results in the standard\nBLAST tabular format. The interpretation of the columns is as follows:\n\n| Column name      | Example    | Notes                              |\n|------------------|------------|------------------------------------|\n| query ID         | query      |                                    |\n| subject ID       | S000143715 |                                    |\n| % identity       | 99.54      |                                    |\n| alignment length | 1529       |                                    |\n| mismatches       | 0          | currently not implemented          |\n| gap openings     | 0          | currently not implemented          |\n| query start      | 1          |                                    |\n| query end        | 1524       |                                    |\n| subject start    | 1          |                                    |\n| subject end      | 1529       |                                    |\n| E-value          | 0          | N/A (always 0)                     |\n| bit score        | 7546       | interpreted as the alignment score |\n\nNote that the number of mismatches and gap openings are currently not displayed\nin the result output. This will be addressed in a future version of the\npackage.\n\n## Installation\n\n### Using EDM\n\nUsers of the [Enthought Deployment Manager(EDM)](https://www.enthought.com/enthought-deployment-manager/)\ncan install the necessary prerequisites (Click, Cython, Numpy, and Parasail) by\nimporting an EDM environment from the bundle file shipped with this repository\n\n```bash\n  edm env import -f <bundle.json> vpsearch\n```\nwhere `<bundle.json>` is one of `vpsearch_py3.6_osx-x86_64.json` or\n`vpsearch_py3.6_rh6-x86_64.json`, depending on your platform.\n\nWhen this is done, activate the environment, and install this package. From the\nroot of this repository, run\n```bash\n  edm shell -e vpsearch\n  pip install -e .\n```\n\n### Using Pip, Conda, etc.\n\nUsers of other package installation tools, such as Pip or Conda, need to\ninstall the [Parasail](https://github.com/jeffdaily/parasail) library following\nthe instructions on the Parasail web page. Once that is done, the Python\ndependencies can be installed using the appropriate command for your package\nmanager. For pip, for example, this can be done with\n```bash\n  pip install -r requirements.txt\n```\n\nOnce that is done, activate your virtual environment, and install this package\nvia\n```bash\n  pip install -e .\n```\n\n### Troubleshooting\n\nThe vpsearch package relies on the Parasail C library for alignment. If\nbuilding the package fails because the Parasail library cannot be found, you\ncan manually specify the location of the Parasail include files and shared\nobject libraries by setting the `PARASAIL_INCLUDE_DIR` and `PARASAIL_LIB_DIR`\nenvironment variables before building the package:\n```bash\n  export PARASAIL_INCLUDE_DIR=/location/of/parasail/include/files\n  export PARASAIL_LIB_DIR=/location/of/parasail/lib/files\n  pip install -e .\n```\nNote that if Parasail is installed in a non-standard location, you may have to\nset the `LD_LIBRARY_PATH` variable at runtime.\n\n## Implementation notes\n\nThe tree construction operates in two phases. We first build the tree as a tree\nof Python object nodes because it's easier to build with a dynamic data\nstructure. Then it linearizes the topology of the nodes into a few integer\narrays that are easy to serialize and fast to look up. The object that\nrepresents the linearized tree can only query the database, not build the tree.\nThe slower tree-of-nodes implementation can build and query (albeit with more\noverhead).\n\n## License\n\nThis package is licensed under the [BSD license](LICENSE.txt).\n\n## References\n\nVantage point trees were introduced in\n\n> Uhlmann, Jeffrey (1991). \"Satisfying General Proximity/Similarity Queries\n  with Metric Trees\". Information Processing Letters. 40 (4):\n  175\u2013179. doi:10.1016/0020-0190(91)90074-r.\n\n> Yianilos (1993). Data structures and algorithms for nearest neighbor search\n  in general metric spaces (PDF). Fourth annual ACM-SIAM symposium on Discrete\n  algorithms. Society for Industrial and Applied Mathematics Philadelphia, PA,\n  USA. pp. 311\u2013321. pny93.\n\nThe Parasail library is described in\n\n> Daily, Jeff. (2016). Parasail: SIMD C library for global, semi-global, and\n  local pairwise sequence alignments. BMC Bioinformatics, 17(1),\n  1-11. doi:10.1186/s12859-016-0930-z", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/enthought/vpsearch", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "vpsearch", "package_url": "https://pypi.org/project/vpsearch/", "platform": "Linux", "project_url": "https://pypi.org/project/vpsearch/", "project_urls": {"Homepage": "https://github.com/enthought/vpsearch"}, "release_url": "https://pypi.org/project/vpsearch/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Global-Global genetic database search.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <hr>\n<h2>vpsearch - Fast Vantage-Point Tree Search for Sequence Databases</h2>\n<p>This is a package for indexing and querying a sequence database for fast\nnearest-neighbor search by means of <a href=\"https://en.wikipedia.org/wiki/Vantage-point_tree\" rel=\"nofollow\">vantage point\ntrees</a>. For reasonably large\ndatabases, such as <a href=\"https://rdp.cme.msu.edu/\" rel=\"nofollow\">RDP</a>, this results in sequence\nlookups that are typically 5-10 times faster than other alignment-based lookup\nmethods.</p>\n<p>Vantage-point tree search uses global-to-global alignment to compare sequences,\nrather than seed-and-extend approximative methods as used for example by\nBLAST.</p>\n<h2>Usage</h2>\n<p>Given a sequence database (in FASTA format), <code>vpsearch build</code> constructs an\noptimized vantage point search tree. Building the tree is a one-time operation\nand doesn't have to be done again unless the database changes. As an\nillustration, we build a vantage point tree for the RDP database of bacterial\n16S sequences. This database contains 281261 sequences of which 39237 are\nduplicates. After removing these duplicates, we are left with 242024 unique\nsequences. Building a tree for these sequences is done with:</p>\n<pre>  $ vpsearch build rdp_download_281261seqs_dedup.fa\n  Building <span class=\"k\">for</span> <span class=\"m\">242024</span> sequences...\n  <span class=\"k\">done</span>.\n  Linearizing...done.\n  Database created in rdp_download_281261seqs_dedup.db\n</pre>\n<p>For the RDP database of full length sequences, this takes about 20 minutes on a\nstandard machine. When only selected regions of the sequences are considered,\nthe time needed to build a tree can be much reduced. For example, vantage point\ntrees for the v1-v2 hypervariable region (350 base pairs) or the v3-v4 region\n(250 base pairs) of the RDP 16S sequencese can be built in 30 seconds to 1\nminute.</p>\n<p>Once a tree has been built, unknown sequences can be looked up using the\n<code>vpsearch query</code> command. Here we supply a query file with a single sequence</p>\n<pre>  vpsearch query rdp_download_281261seqs_dedup.fa query.fa\n  query\tS000143715\t<span class=\"m\">99</span>.54\t<span class=\"m\">1529</span>\t<span class=\"m\">0</span>\t<span class=\"m\">0</span>\t<span class=\"m\">1</span>\t<span class=\"m\">1524</span>\t<span class=\"m\">1</span>\t<span class=\"m\">1529</span>\t<span class=\"m\">0</span>\t<span class=\"m\">7546</span>\n  query\tS004085923\t<span class=\"m\">99</span>.08\t<span class=\"m\">1529</span>\t<span class=\"m\">0</span>\t<span class=\"m\">0</span>\t<span class=\"m\">1</span>\t<span class=\"m\">1524</span>\t<span class=\"m\">1</span>\t<span class=\"m\">1526</span>\t<span class=\"m\">0</span>\t<span class=\"m\">7481</span>\n  query\tS004085922\t<span class=\"m\">99</span>.08\t<span class=\"m\">1529</span>\t<span class=\"m\">0</span>\t<span class=\"m\">0</span>\t<span class=\"m\">1</span>\t<span class=\"m\">1524</span>\t<span class=\"m\">1</span>\t<span class=\"m\">1526</span>\t<span class=\"m\">0</span>\t<span class=\"m\">7481</span>\n  query\tS004085925\t<span class=\"m\">98</span>.50\t<span class=\"m\">1531</span>\t<span class=\"m\">0</span>\t<span class=\"m\">0</span>\t<span class=\"m\">1</span>\t<span class=\"m\">1524</span>\t<span class=\"m\">1</span>\t<span class=\"m\">1527</span>\t<span class=\"m\">0</span>\t<span class=\"m\">7386</span>\n</pre>\n<p>By default, the <code>vpsearch query</code> command outputs the best four matches in the\ndatabase per query sequence (the number of matches can be changed with the <code>-k</code>\nparameter). Lookup is done one query sequence at a time, but multiple queries\ncan be considered in parallel by enabling multiple threads; use the <code>-j</code> option\nto specify the number of threads.</p>\n<p>The <code>vpsearch query</code> command attempts to output its results in the standard\nBLAST tabular format. The interpretation of the columns is as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Column name</th>\n<th>Example</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>query ID</td>\n<td>query</td>\n<td></td>\n</tr>\n<tr>\n<td>subject ID</td>\n<td>S000143715</td>\n<td></td>\n</tr>\n<tr>\n<td>% identity</td>\n<td>99.54</td>\n<td></td>\n</tr>\n<tr>\n<td>alignment length</td>\n<td>1529</td>\n<td></td>\n</tr>\n<tr>\n<td>mismatches</td>\n<td>0</td>\n<td>currently not implemented</td>\n</tr>\n<tr>\n<td>gap openings</td>\n<td>0</td>\n<td>currently not implemented</td>\n</tr>\n<tr>\n<td>query start</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>query end</td>\n<td>1524</td>\n<td></td>\n</tr>\n<tr>\n<td>subject start</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>subject end</td>\n<td>1529</td>\n<td></td>\n</tr>\n<tr>\n<td>E-value</td>\n<td>0</td>\n<td>N/A (always 0)</td>\n</tr>\n<tr>\n<td>bit score</td>\n<td>7546</td>\n<td>interpreted as the alignment score</td>\n</tr></tbody></table>\n<p>Note that the number of mismatches and gap openings are currently not displayed\nin the result output. This will be addressed in a future version of the\npackage.</p>\n<h2>Installation</h2>\n<h3>Using EDM</h3>\n<p>Users of the <a href=\"https://www.enthought.com/enthought-deployment-manager/\" rel=\"nofollow\">Enthought Deployment Manager(EDM)</a>\ncan install the necessary prerequisites (Click, Cython, Numpy, and Parasail) by\nimporting an EDM environment from the bundle file shipped with this repository</p>\n<pre>  edm env import -f &lt;bundle.json&gt; vpsearch\n</pre>\n<p>where <code>&lt;bundle.json&gt;</code> is one of <code>vpsearch_py3.6_osx-x86_64.json</code> or\n<code>vpsearch_py3.6_rh6-x86_64.json</code>, depending on your platform.</p>\n<p>When this is done, activate the environment, and install this package. From the\nroot of this repository, run</p>\n<pre>  edm shell -e vpsearch\n  pip install -e .\n</pre>\n<h3>Using Pip, Conda, etc.</h3>\n<p>Users of other package installation tools, such as Pip or Conda, need to\ninstall the <a href=\"https://github.com/jeffdaily/parasail\" rel=\"nofollow\">Parasail</a> library following\nthe instructions on the Parasail web page. Once that is done, the Python\ndependencies can be installed using the appropriate command for your package\nmanager. For pip, for example, this can be done with</p>\n<pre>  pip install -r requirements.txt\n</pre>\n<p>Once that is done, activate your virtual environment, and install this package\nvia</p>\n<pre>  pip install -e .\n</pre>\n<h3>Troubleshooting</h3>\n<p>The vpsearch package relies on the Parasail C library for alignment. If\nbuilding the package fails because the Parasail library cannot be found, you\ncan manually specify the location of the Parasail include files and shared\nobject libraries by setting the <code>PARASAIL_INCLUDE_DIR</code> and <code>PARASAIL_LIB_DIR</code>\nenvironment variables before building the package:</p>\n<pre>  <span class=\"nb\">export</span> <span class=\"nv\">PARASAIL_INCLUDE_DIR</span><span class=\"o\">=</span>/location/of/parasail/include/files\n  <span class=\"nb\">export</span> <span class=\"nv\">PARASAIL_LIB_DIR</span><span class=\"o\">=</span>/location/of/parasail/lib/files\n  pip install -e .\n</pre>\n<p>Note that if Parasail is installed in a non-standard location, you may have to\nset the <code>LD_LIBRARY_PATH</code> variable at runtime.</p>\n<h2>Implementation notes</h2>\n<p>The tree construction operates in two phases. We first build the tree as a tree\nof Python object nodes because it's easier to build with a dynamic data\nstructure. Then it linearizes the topology of the nodes into a few integer\narrays that are easy to serialize and fast to look up. The object that\nrepresents the linearized tree can only query the database, not build the tree.\nThe slower tree-of-nodes implementation can build and query (albeit with more\noverhead).</p>\n<h2>License</h2>\n<p>This package is licensed under the <a href=\"LICENSE.txt\" rel=\"nofollow\">BSD license</a>.</p>\n<h2>References</h2>\n<p>Vantage point trees were introduced in</p>\n<blockquote>\n<p>Uhlmann, Jeffrey (1991). \"Satisfying General Proximity/Similarity Queries\nwith Metric Trees\". Information Processing Letters. 40 (4):\n175\u2013179. doi:10.1016/0020-0190(91)90074-r.</p>\n</blockquote>\n<blockquote>\n<p>Yianilos (1993). Data structures and algorithms for nearest neighbor search\nin general metric spaces (PDF). Fourth annual ACM-SIAM symposium on Discrete\nalgorithms. Society for Industrial and Applied Mathematics Philadelphia, PA,\nUSA. pp. 311\u2013321. pny93.</p>\n</blockquote>\n<p>The Parasail library is described in</p>\n<blockquote>\n<p>Daily, Jeff. (2016). Parasail: SIMD C library for global, semi-global, and\nlocal pairwise sequence alignments. BMC Bioinformatics, 17(1),\n1-11. doi:10.1186/s12859-016-0930-z</p>\n</blockquote>\n\n          </div>"}, "last_serial": 6410131, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a23ce8727673dfc367272f9fe3c0b020", "sha256": "17e09ed156669774dcc7570e1d053a59658a7421704a276da0215ae57b552b8a"}, "downloads": -1, "filename": "vpsearch-0.1.tar.gz", "has_sig": false, "md5_digest": "a23ce8727673dfc367272f9fe3c0b020", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10183, "upload_time": "2020-01-05T08:48:07", "upload_time_iso_8601": "2020-01-05T08:48:07.771467Z", "url": "https://files.pythonhosted.org/packages/1d/a5/ecd0d54f5d62c33f18f064116d6e0685f319e53c23d119997e7e6f22a4bb/vpsearch-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "79ddc007d54de3f35e472702945e7448", "sha256": "b676d8b89b9bd355a3d5e592fad14ebb28fe2569d8a90813ce802b6666e68587"}, "downloads": -1, "filename": "vpsearch-0.1.1.tar.gz", "has_sig": false, "md5_digest": "79ddc007d54de3f35e472702945e7448", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 218990, "upload_time": "2020-01-07T18:47:26", "upload_time_iso_8601": "2020-01-07T18:47:26.453737Z", "url": "https://files.pythonhosted.org/packages/d7/2b/84d8d319107ecaf394f06b1a41a4490f7533e9872cbb53f21daeb944b20e/vpsearch-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79ddc007d54de3f35e472702945e7448", "sha256": "b676d8b89b9bd355a3d5e592fad14ebb28fe2569d8a90813ce802b6666e68587"}, "downloads": -1, "filename": "vpsearch-0.1.1.tar.gz", "has_sig": false, "md5_digest": "79ddc007d54de3f35e472702945e7448", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 218990, "upload_time": "2020-01-07T18:47:26", "upload_time_iso_8601": "2020-01-07T18:47:26.453737Z", "url": "https://files.pythonhosted.org/packages/d7/2b/84d8d319107ecaf394f06b1a41a4490f7533e9872cbb53f21daeb944b20e/vpsearch-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:10 2020"}