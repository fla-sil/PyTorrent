{"info": {"author": "Josh Bendavid", "author_email": "joshbendavid@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# aiopylgtv\nLibrary to control webOS based LG Tv devices.\n\nBased on pylgtv library at https://github.com/TheRealLink/pylgtv which is no longer maintained.\n\n## Requirements\n- Python >= 3.7\n\n## Install\n```bash\npip install aiopylgtv\n```\n\n## Install from Source\nRun the following command inside this folder\n```bash\npip install --upgrade .\n```\n\n## Basic Example\n\n```python\nimport asyncio\nfrom aiopylgtv import WebOsClient\n\nasync def runloop(client):\n    await client.connect()\n    apps = await client.get_apps()\n    for app in apps:\n        print(app)\n\n    await client.disconnect()\n\nclient = WebOsClient('192.168.1.53')\nasyncio.get_event_loop().run_until_complete(runloop(client))\n```\n\n## Subscribed state updates\nA callback coroutine can be registered with the client in order to be notified of any state changes.\n```python\nimport asyncio\nfrom aiopylgtv import WebOsClient\n\nasync def on_state_change():\n    print(\"State changed:\")\n    print(client.current_appId)\n    print(client.muted)\n    print(client.volume)\n    print(client.current_channel)\n    print(client.apps)\n    print(client.inputs)\n    print(client.system_info)\n    print(client.software_info)\n\n\nasync def runloop():\n    await client.register_state_update_callback(on_state_change)\n\n    await client.connect()\n\n    print(client.inputs)\n    ret = await client.set_input(\"HDMI_3\")\n    print(ret)\n\n    await client.disconnect()\n\nclient = WebOsClient('192.168.1.53')\nasyncio.get_event_loop().run_until_complete(runloop())\n```\n\n## Calibration functionality\nWARNING: Messing with the calibration data COULD brick your TV in some circumstances, requiring a mainboard replacement.\nAll of the currently implemented functions SHOULD be safe, but no guarantees.\n\nOn supported models, calibration functionality and upload to internal LUTs is supported.  The supported input formats for LUTs are IRIDAS .cube format for both 1D and 3D LUTs, and ArgyllCMS .cal files for 1D LUTs.\n\nNot yet supported:\n-Dolby Vision config upload\n-Custom tone mapping for 2019 models (functionality does not exist on 2018 models)\n\nSupported models:\nLG 2019 Alpha 9 G2 OLED R9 Z9 W9 W9S E9 C9 NanoCell SM99\nLG 2019 Alpha 7 G2 NanoCell (8000 & higher model numbers)\nLG 2018 Alpha 7 Super UHD LED (8000 & higher model numbers)\nLG 2018 Alpha 7 OLED B8\nLG 2018 Alpha 9 OLED C8 E8 G8 W8\n\nModels with Alpha 9 use 33 point 3D LUTs, while those with Alpha 7 use 17 points.\n\nn.b. this has only been extensively tested for the 2018 Alpha 9 case, so fixes may be needed still for the others.\n\nWARNING:  When running the ddc_reset or uploading LUT data on 2018 models the only way to restore the factory\nLUTs and behaviour for a given input mode is to do a factory reset of the TV.\nddc_reset uploads unity 1d and 3d luts and resets oled light/brightness/contrast/color/ to default values (80/50/85/50).\nWhen running the ddc_reset or uploading any 1D LUT data, service menu white balance settings are ignored, and gamma,\ncolorspace, and white balance settings in the user menu are greyed out and inaccessible.\n\nCalibration data is specific to each picture mode, and picture modes are independent for SDR, HDR10+HLG, and Dolby Vision.\nPicture modes from each of the three groups are only accessible when the TV is in the appropriate mode.  Ie to upload\ncalibration data for HDR10 picture modes, one has to send the TV an HDR10 signal or play an HDR10 file, and similarly\nfor Dolby Vision.\n\nFor SDR and HDR10 modes there are two 3D LUTs which will be automatically selected depending on the colorspace flags of the signal\nor content.  In principle almost all SDR content should be bt709 and HDR10 content should be bt2020 but there could be\nnonstandard cases where this is not true.\n\nFor Dolby Vision the bt709 3d LUT seems to be active and the only one used.\n\nKnown supported picMode strings are:\nSDR: cinema, expert1, expert2, game, technicolorExpert\nHDR10(+HLG): hdr_technicolorExpert, hdr_cinema, hdr_game\nDV: dolby_cinema_dark, dolby_cinema_bright, dolby_game\n\nCalibration commands can only be run while in calibration mode (controlled by \"start_calibration\" and \"end_calibration\").\n\nWhile in calibration mode for HDR10 tone mapping is bypassed.\nThere may be other not fully known/understood changes in the image processing pipeline while in calibration mode.\n\n```python\nimport asyncio\nfrom aiopylgtv import WebOsClient\n\nasync def runloop():\n    await client.connect()\n\n    await client.set_input(\"HDMI_2\")\n    await client.start_calibration(picMode = \"expert1\")\n    await client.ddc_reset(picMode = \"expert1\")\n    await client.set_oled_light(picMode = \"expert1\", value = 26)\n    await client.set_contrast(picMode = \"expert1\", value = 100)\n    await client.upload_1d_lut_from_file(picMode = \"expert1\", filename = \"test.cal\")\n    await client.upload_3d_lut_bt709_from_file(picMode = \"expert1\", filename = \"test3d.cube\")\n    await client.upload_3d_lut_bt2020_from_file(picMode = \"expert1\", filename = \"test3d.cube\")\n    await client.end_calibration(picMode = \"expert1\")\n\n    await client.disconnect()\n\nclient = WebOsClient('192.168.1.53')\nasyncio.get_event_loop().run_until_complete(runloop())\n```\n\n## Development of `aiopylgtv`\n\nWe use [`pre-commit`](https://pre-commit.com) to keep a consistent code style, so ``pip install pre_commit`` and run\n```bash\npre-commit install\n```\nto install the hooks.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bendavid/aiopylgtv", "keywords": "webos,tv", "license": "", "maintainer": "", "maintainer_email": "", "name": "aiopylgtv", "package_url": "https://pypi.org/project/aiopylgtv/", "platform": "", "project_url": "https://pypi.org/project/aiopylgtv/", "project_urls": {"Homepage": "https://github.com/bendavid/aiopylgtv"}, "release_url": "https://pypi.org/project/aiopylgtv/0.3.3/", "requires_dist": ["websockets (>=8.1)", "numpy (>=1.17.0)"], "requires_python": ">=3.7", "summary": "Library to control webOS based LG TV devices.", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aiopylgtv</h1>\n<p>Library to control webOS based LG Tv devices.</p>\n<p>Based on pylgtv library at <a href=\"https://github.com/TheRealLink/pylgtv\" rel=\"nofollow\">https://github.com/TheRealLink/pylgtv</a> which is no longer maintained.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;= 3.7</li>\n</ul>\n<h2>Install</h2>\n<pre>pip install aiopylgtv\n</pre>\n<h2>Install from Source</h2>\n<p>Run the following command inside this folder</p>\n<pre>pip install --upgrade .\n</pre>\n<h2>Basic Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiopylgtv</span> <span class=\"kn\">import</span> <span class=\"n\">WebOsClient</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">runloop</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n    <span class=\"n\">apps</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_apps</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">app</span> <span class=\"ow\">in</span> <span class=\"n\">apps</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">WebOsClient</span><span class=\"p\">(</span><span class=\"s1\">'192.168.1.53'</span><span class=\"p\">)</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">runloop</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">))</span>\n</pre>\n<h2>Subscribed state updates</h2>\n<p>A callback coroutine can be registered with the client in order to be notified of any state changes.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiopylgtv</span> <span class=\"kn\">import</span> <span class=\"n\">WebOsClient</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_state_change</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"State changed:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">current_appId</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">muted</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">current_channel</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">system_info</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">software_info</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">runloop</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">register_state_update_callback</span><span class=\"p\">(</span><span class=\"n\">on_state_change</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_input</span><span class=\"p\">(</span><span class=\"s2\">\"HDMI_3\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">WebOsClient</span><span class=\"p\">(</span><span class=\"s1\">'192.168.1.53'</span><span class=\"p\">)</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">runloop</span><span class=\"p\">())</span>\n</pre>\n<h2>Calibration functionality</h2>\n<p>WARNING: Messing with the calibration data COULD brick your TV in some circumstances, requiring a mainboard replacement.\nAll of the currently implemented functions SHOULD be safe, but no guarantees.</p>\n<p>On supported models, calibration functionality and upload to internal LUTs is supported.  The supported input formats for LUTs are IRIDAS .cube format for both 1D and 3D LUTs, and ArgyllCMS .cal files for 1D LUTs.</p>\n<p>Not yet supported:\n-Dolby Vision config upload\n-Custom tone mapping for 2019 models (functionality does not exist on 2018 models)</p>\n<p>Supported models:\nLG 2019 Alpha 9 G2 OLED R9 Z9 W9 W9S E9 C9 NanoCell SM99\nLG 2019 Alpha 7 G2 NanoCell (8000 &amp; higher model numbers)\nLG 2018 Alpha 7 Super UHD LED (8000 &amp; higher model numbers)\nLG 2018 Alpha 7 OLED B8\nLG 2018 Alpha 9 OLED C8 E8 G8 W8</p>\n<p>Models with Alpha 9 use 33 point 3D LUTs, while those with Alpha 7 use 17 points.</p>\n<p>n.b. this has only been extensively tested for the 2018 Alpha 9 case, so fixes may be needed still for the others.</p>\n<p>WARNING:  When running the ddc_reset or uploading LUT data on 2018 models the only way to restore the factory\nLUTs and behaviour for a given input mode is to do a factory reset of the TV.\nddc_reset uploads unity 1d and 3d luts and resets oled light/brightness/contrast/color/ to default values (80/50/85/50).\nWhen running the ddc_reset or uploading any 1D LUT data, service menu white balance settings are ignored, and gamma,\ncolorspace, and white balance settings in the user menu are greyed out and inaccessible.</p>\n<p>Calibration data is specific to each picture mode, and picture modes are independent for SDR, HDR10+HLG, and Dolby Vision.\nPicture modes from each of the three groups are only accessible when the TV is in the appropriate mode.  Ie to upload\ncalibration data for HDR10 picture modes, one has to send the TV an HDR10 signal or play an HDR10 file, and similarly\nfor Dolby Vision.</p>\n<p>For SDR and HDR10 modes there are two 3D LUTs which will be automatically selected depending on the colorspace flags of the signal\nor content.  In principle almost all SDR content should be bt709 and HDR10 content should be bt2020 but there could be\nnonstandard cases where this is not true.</p>\n<p>For Dolby Vision the bt709 3d LUT seems to be active and the only one used.</p>\n<p>Known supported picMode strings are:\nSDR: cinema, expert1, expert2, game, technicolorExpert\nHDR10(+HLG): hdr_technicolorExpert, hdr_cinema, hdr_game\nDV: dolby_cinema_dark, dolby_cinema_bright, dolby_game</p>\n<p>Calibration commands can only be run while in calibration mode (controlled by \"start_calibration\" and \"end_calibration\").</p>\n<p>While in calibration mode for HDR10 tone mapping is bypassed.\nThere may be other not fully known/understood changes in the image processing pipeline while in calibration mode.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiopylgtv</span> <span class=\"kn\">import</span> <span class=\"n\">WebOsClient</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">runloop</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_input</span><span class=\"p\">(</span><span class=\"s2\">\"HDMI_2\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">start_calibration</span><span class=\"p\">(</span><span class=\"n\">picMode</span> <span class=\"o\">=</span> <span class=\"s2\">\"expert1\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ddc_reset</span><span class=\"p\">(</span><span class=\"n\">picMode</span> <span class=\"o\">=</span> <span class=\"s2\">\"expert1\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_oled_light</span><span class=\"p\">(</span><span class=\"n\">picMode</span> <span class=\"o\">=</span> <span class=\"s2\">\"expert1\"</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">26</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_contrast</span><span class=\"p\">(</span><span class=\"n\">picMode</span> <span class=\"o\">=</span> <span class=\"s2\">\"expert1\"</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">upload_1d_lut_from_file</span><span class=\"p\">(</span><span class=\"n\">picMode</span> <span class=\"o\">=</span> <span class=\"s2\">\"expert1\"</span><span class=\"p\">,</span> <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"test.cal\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">upload_3d_lut_bt709_from_file</span><span class=\"p\">(</span><span class=\"n\">picMode</span> <span class=\"o\">=</span> <span class=\"s2\">\"expert1\"</span><span class=\"p\">,</span> <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"test3d.cube\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">upload_3d_lut_bt2020_from_file</span><span class=\"p\">(</span><span class=\"n\">picMode</span> <span class=\"o\">=</span> <span class=\"s2\">\"expert1\"</span><span class=\"p\">,</span> <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"test3d.cube\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">end_calibration</span><span class=\"p\">(</span><span class=\"n\">picMode</span> <span class=\"o\">=</span> <span class=\"s2\">\"expert1\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">WebOsClient</span><span class=\"p\">(</span><span class=\"s1\">'192.168.1.53'</span><span class=\"p\">)</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">runloop</span><span class=\"p\">())</span>\n</pre>\n<h2>Development of <code>aiopylgtv</code></h2>\n<p>We use <a href=\"https://pre-commit.com\" rel=\"nofollow\"><code>pre-commit</code></a> to keep a consistent code style, so <code>pip install pre_commit</code> and run</p>\n<pre>pre-commit install\n</pre>\n<p>to install the hooks.</p>\n\n          </div>"}, "last_serial": 6583197, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "4a12bbcc2c54ef70d8d00ba903a2d7ef", "sha256": "085b1b34306ec4c39bb7747c24e96af64263e752f2732ddcf26c86bd00906426"}, "downloads": -1, "filename": "aiopylgtv-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4a12bbcc2c54ef70d8d00ba903a2d7ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14428, "upload_time": "2019-12-01T13:08:20", "upload_time_iso_8601": "2019-12-01T13:08:20.302026Z", "url": "https://files.pythonhosted.org/packages/a1/3c/32a95d0341cf241ea009365931b613838f7ac7c7c8244964f3225309e3f0/aiopylgtv-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2eab88c6f26bc88ecfcc07ac5ef3fc40", "sha256": "0b52f0b074fe55204c4fd5e22800447755195f5a9cdcfcd92de8eea028c15a32"}, "downloads": -1, "filename": "aiopylgtv-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2eab88c6f26bc88ecfcc07ac5ef3fc40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14848, "upload_time": "2019-12-01T13:08:23", "upload_time_iso_8601": "2019-12-01T13:08:23.547365Z", "url": "https://files.pythonhosted.org/packages/e7/f9/7565d6e6f2eff1b320a7aee2aeb426c455fb2faf4c7cb26661f83c0a90ad/aiopylgtv-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "6518b474f01d0674fbeb140550bc2985", "sha256": "0618daa55ae190619ed894689d33a5e4e56b669bdc4b5c6da893f1e964e8d429"}, "downloads": -1, "filename": "aiopylgtv-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6518b474f01d0674fbeb140550bc2985", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14549, "upload_time": "2019-12-04T20:19:25", "upload_time_iso_8601": "2019-12-04T20:19:25.169453Z", "url": "https://files.pythonhosted.org/packages/8c/1f/6b1f5a637bc6ff079f938b575a3713af10044dacaa564c7b2fc7f32248f9/aiopylgtv-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "965f8468a13d43c9678a1d8a9bf04760", "sha256": "595bb762c8a3a888afd81943868aba1b467728b298590f5f9057ba98328ebf1d"}, "downloads": -1, "filename": "aiopylgtv-0.2.1.tar.gz", "has_sig": false, "md5_digest": "965f8468a13d43c9678a1d8a9bf04760", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15030, "upload_time": "2019-12-04T20:19:26", "upload_time_iso_8601": "2019-12-04T20:19:26.470784Z", "url": "https://files.pythonhosted.org/packages/64/fb/e7d7c7846b2fa7d272d6fe0709d3a75b8d725040c84cbf1b2eb60b750035/aiopylgtv-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "da8020b001477ca097b22b79171cd255", "sha256": "6eeac3ebe96ca66b9a305900e2640cf4ecb669c1bad18e7ff688025caa08667c"}, "downloads": -1, "filename": "aiopylgtv-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "da8020b001477ca097b22b79171cd255", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14793, "upload_time": "2019-12-11T18:18:56", "upload_time_iso_8601": "2019-12-11T18:18:56.713830Z", "url": "https://files.pythonhosted.org/packages/70/84/0eeab9eb13c07225b1b11e1d0c510ccae78a90dbd2b4ad0c7a3bdc36ad00/aiopylgtv-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1426ce748be919f72edeab20147f2cae", "sha256": "a01970606ae4161c9f5c3629afd57bf28a61cc03cd22e8c32a78aec0ae9bd95a"}, "downloads": -1, "filename": "aiopylgtv-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1426ce748be919f72edeab20147f2cae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15266, "upload_time": "2019-12-11T18:18:58", "upload_time_iso_8601": "2019-12-11T18:18:58.651549Z", "url": "https://files.pythonhosted.org/packages/4f/68/0c1cdfc63fbf32c8fae1a3303fa86433c0b41dc7671fe80a478813973566/aiopylgtv-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "99da0c7f22312ac2ee2c6747108a9cb6", "sha256": "07613b0eb38f9ab9c125e19b7fd3e439d3e7d6700c070221fe540b9b274e24d8"}, "downloads": -1, "filename": "aiopylgtv-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "99da0c7f22312ac2ee2c6747108a9cb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14798, "upload_time": "2019-12-14T19:21:10", "upload_time_iso_8601": "2019-12-14T19:21:10.095039Z", "url": "https://files.pythonhosted.org/packages/77/6b/a482ee2e7eeb74b72bb30a3673b809eb18076979ba4139cce365e9462329/aiopylgtv-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22c2dcf746b4d99c5810f935ce936df1", "sha256": "83c3ec4ae062d11f2a2ed80f78eb0e570c8eebae57eb9ab49bbc62157bf81dc3"}, "downloads": -1, "filename": "aiopylgtv-0.2.3.tar.gz", "has_sig": false, "md5_digest": "22c2dcf746b4d99c5810f935ce936df1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15277, "upload_time": "2019-12-14T19:21:11", "upload_time_iso_8601": "2019-12-14T19:21:11.664919Z", "url": "https://files.pythonhosted.org/packages/95/74/7b4705e6c9bbb717ee0450a03a8b5a9d0a77a28befc4e5cabf84d447f99e/aiopylgtv-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "c02f550166a6dbd76192f4e9aa9f48fc", "sha256": "a9cd70436e06548d2dd5c8a0ae234eeb2d6a3e350ed316f66e94ff3e1d8d6558"}, "downloads": -1, "filename": "aiopylgtv-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c02f550166a6dbd76192f4e9aa9f48fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14790, "upload_time": "2019-12-29T01:02:03", "upload_time_iso_8601": "2019-12-29T01:02:03.893254Z", "url": "https://files.pythonhosted.org/packages/fe/e3/eb62848812d4c4ea64099a1d41a9632f6a99d9ddd7ac9d31616bcfc4a366/aiopylgtv-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b382de65eed18d05cda1a2b615180abc", "sha256": "2920f6ccb56b7e8da93216c4cc3708887ae1db267daa0eb0cdc21b7205445e89"}, "downloads": -1, "filename": "aiopylgtv-0.2.4.tar.gz", "has_sig": false, "md5_digest": "b382de65eed18d05cda1a2b615180abc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15228, "upload_time": "2019-12-29T01:02:05", "upload_time_iso_8601": "2019-12-29T01:02:05.295768Z", "url": "https://files.pythonhosted.org/packages/83/4f/c44b7ab4d4a39108612b363cff2b66464143b4739737e90b23e72ff7c501/aiopylgtv-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "bde8d101d0bb4655bfb06fdb61b48711", "sha256": "a51feb6668d44700b8b4c7c7b4a9fb3b48bf921031394c72eed0bcb1f29bc268"}, "downloads": -1, "filename": "aiopylgtv-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bde8d101d0bb4655bfb06fdb61b48711", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14802, "upload_time": "2020-01-12T14:14:56", "upload_time_iso_8601": "2020-01-12T14:14:56.650150Z", "url": "https://files.pythonhosted.org/packages/c3/db/303c080d3558b706737f28a257086925ecd814fcac5afde8ceda257f213f/aiopylgtv-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "441ca3d8c369fbfc6bb54fdfe8ff6004", "sha256": "345ddbb3b16a3a5c7e6a52bc04d52c40da84440314caf2fc638cdf7f69e468c6"}, "downloads": -1, "filename": "aiopylgtv-0.2.5.tar.gz", "has_sig": false, "md5_digest": "441ca3d8c369fbfc6bb54fdfe8ff6004", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15209, "upload_time": "2020-01-12T14:14:58", "upload_time_iso_8601": "2020-01-12T14:14:58.267397Z", "url": "https://files.pythonhosted.org/packages/fd/19/0992532b6c29db7273a07956ce9c0094847acdbd7ee20f0229a2fbff8483/aiopylgtv-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "19709769bf11c113e3391a1d907a6777", "sha256": "257eef29dd8b321ab95a1a9fc37e05f945ded601753a25122dd6a951c3a488f3"}, "downloads": -1, "filename": "aiopylgtv-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "19709769bf11c113e3391a1d907a6777", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14778, "upload_time": "2020-01-13T15:17:46", "upload_time_iso_8601": "2020-01-13T15:17:46.299298Z", "url": "https://files.pythonhosted.org/packages/ff/3d/529c8bdf24b58eb2dd781d59474ee37c2b911f5bb2ade05fdcfdd32ba2e2/aiopylgtv-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e49f10e68751e2bcb1caf29d8d55b64d", "sha256": "ac821a63ba323b0b417d3baab4b3de9cc3f90df30b0449436760810f365b67f0"}, "downloads": -1, "filename": "aiopylgtv-0.2.6.tar.gz", "has_sig": false, "md5_digest": "e49f10e68751e2bcb1caf29d8d55b64d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15195, "upload_time": "2020-01-13T15:17:47", "upload_time_iso_8601": "2020-01-13T15:17:47.642813Z", "url": "https://files.pythonhosted.org/packages/68/e8/8cfa04b807263f40b8874cedabca16fc8fd4b1a7ef075c282617ae618d55/aiopylgtv-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "ceefb1c3fb10fbd717f75c467323d3f7", "sha256": "e2c6237772fc8462746c150fe918746400acc6da9ede8c365da1ef7b59360c5f"}, "downloads": -1, "filename": "aiopylgtv-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ceefb1c3fb10fbd717f75c467323d3f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14805, "upload_time": "2020-01-15T18:01:17", "upload_time_iso_8601": "2020-01-15T18:01:17.641565Z", "url": "https://files.pythonhosted.org/packages/54/77/69c20846bc012d2b8a45cb486abae56e77e9673a69e99aaf51ff9a28c160/aiopylgtv-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "880c4672c54b08e26a51feb9bf543564", "sha256": "fec45c94fb162dc7d484b3f7936883deb9bcae66bf5a85afbb08e3c3b805514e"}, "downloads": -1, "filename": "aiopylgtv-0.2.7.tar.gz", "has_sig": false, "md5_digest": "880c4672c54b08e26a51feb9bf543564", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15226, "upload_time": "2020-01-15T18:01:18", "upload_time_iso_8601": "2020-01-15T18:01:18.959705Z", "url": "https://files.pythonhosted.org/packages/bc/f3/ecf8ff00827c40b21bdee0f134b07bc44a7ee3fa1223ea07f16e8cb44bbe/aiopylgtv-0.2.7.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "91afb3683cdf76663cc508d93c3caca6", "sha256": "a8a116633eb62165de1958e8188d5ef802fea6bb3c3c4d8936e30435262d85d6"}, "downloads": -1, "filename": "aiopylgtv-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "91afb3683cdf76663cc508d93c3caca6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18507, "upload_time": "2020-01-21T09:22:05", "upload_time_iso_8601": "2020-01-21T09:22:05.255791Z", "url": "https://files.pythonhosted.org/packages/02/83/b86ecdb340ad245b09ea2a1b6e4715693e5cce432722737a894fee861978/aiopylgtv-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abd929cce2e1e6f21d811c5f67fa2503", "sha256": "cd95c340447c76982c2b67945a96068a4e9e281ab9f7e37cdd389f186297f6a9"}, "downloads": -1, "filename": "aiopylgtv-0.3.0.tar.gz", "has_sig": false, "md5_digest": "abd929cce2e1e6f21d811c5f67fa2503", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 19177, "upload_time": "2020-01-21T09:22:06", "upload_time_iso_8601": "2020-01-21T09:22:06.975637Z", "url": "https://files.pythonhosted.org/packages/4d/f6/be3eac4987a67f9866b85512ac7b0ca8ebbbdbcb7d20785fc08a74707c49/aiopylgtv-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "327c6f7c9d1716363261d8eaf4d557e7", "sha256": "0a5a5b9a8691921ccee2edbd3c0fca522d71f1478e7ec9c8a05c17827450e415"}, "downloads": -1, "filename": "aiopylgtv-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "327c6f7c9d1716363261d8eaf4d557e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18578, "upload_time": "2020-01-23T10:13:16", "upload_time_iso_8601": "2020-01-23T10:13:16.262270Z", "url": "https://files.pythonhosted.org/packages/ed/bd/2f74e44e6cfc718bb4d8e001c02d7ba4ef42d2d6f37f3a83a3104e7727bb/aiopylgtv-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "182b5d5a7cee5528aff722bedba060ee", "sha256": "d6d742e3a5543dae45b04fc10971c583cf4fe678e24c3c3c881fdfbfde9fdd0c"}, "downloads": -1, "filename": "aiopylgtv-0.3.1.tar.gz", "has_sig": false, "md5_digest": "182b5d5a7cee5528aff722bedba060ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 19245, "upload_time": "2020-01-23T10:13:18", "upload_time_iso_8601": "2020-01-23T10:13:18.065446Z", "url": "https://files.pythonhosted.org/packages/44/8f/df02bc286d1a9908ed012c445e0d81931923e9d96034bc64f305f3090662/aiopylgtv-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "5fbfa4ee2a2ad88e8c9473eb14243f23", "sha256": "31c4c0cb623cd43fa0d621a1cbfab2b279512d3a9472812f89e5c72337c66127"}, "downloads": -1, "filename": "aiopylgtv-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5fbfa4ee2a2ad88e8c9473eb14243f23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18718, "upload_time": "2020-01-24T16:20:50", "upload_time_iso_8601": "2020-01-24T16:20:50.979773Z", "url": "https://files.pythonhosted.org/packages/0a/1c/826ed23e1dea864ce5150e8e5c72b04bdf9c3f8f28d3fb7c2317dcfbc97a/aiopylgtv-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56eb059b4019faa08820559ff373972a", "sha256": "e897709aca3f97824dff69b781466a8fcfa8e37a6395e97eac8a9ffe417bbe86"}, "downloads": -1, "filename": "aiopylgtv-0.3.2.tar.gz", "has_sig": false, "md5_digest": "56eb059b4019faa08820559ff373972a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 19386, "upload_time": "2020-01-24T16:20:52", "upload_time_iso_8601": "2020-01-24T16:20:52.860913Z", "url": "https://files.pythonhosted.org/packages/7a/41/3ffc3467a6c51f671ca5e6fbfc783e211fa02a47d056f6633da634aadafb/aiopylgtv-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "65e15330221e5f50e447838013ce8e68", "sha256": "b71a382b63acd6158f43d7a5827b114a50064e8c43f7ce2e37bdbf2d06609b5f"}, "downloads": -1, "filename": "aiopylgtv-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "65e15330221e5f50e447838013ce8e68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18730, "upload_time": "2020-02-06T16:53:22", "upload_time_iso_8601": "2020-02-06T16:53:22.695771Z", "url": "https://files.pythonhosted.org/packages/d1/0b/58016c7fbd9ee6d271eba0d9f8d638d83bf56b2b8de9d5e5680ae4269aaa/aiopylgtv-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cb5a0a1efcd2bda00041d593cca59fc", "sha256": "0c7ac40518709b4baa0a74a9294541b23b9a26faaa198d541fb160590ca8fb7c"}, "downloads": -1, "filename": "aiopylgtv-0.3.3.tar.gz", "has_sig": false, "md5_digest": "6cb5a0a1efcd2bda00041d593cca59fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 19393, "upload_time": "2020-02-06T16:53:24", "upload_time_iso_8601": "2020-02-06T16:53:24.179119Z", "url": "https://files.pythonhosted.org/packages/b3/90/8e0a46ec1eeebecc85d9e299670df06c1addbdb2f7ef9dd6a88aa6f30883/aiopylgtv-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "65e15330221e5f50e447838013ce8e68", "sha256": "b71a382b63acd6158f43d7a5827b114a50064e8c43f7ce2e37bdbf2d06609b5f"}, "downloads": -1, "filename": "aiopylgtv-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "65e15330221e5f50e447838013ce8e68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18730, "upload_time": "2020-02-06T16:53:22", "upload_time_iso_8601": "2020-02-06T16:53:22.695771Z", "url": "https://files.pythonhosted.org/packages/d1/0b/58016c7fbd9ee6d271eba0d9f8d638d83bf56b2b8de9d5e5680ae4269aaa/aiopylgtv-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cb5a0a1efcd2bda00041d593cca59fc", "sha256": "0c7ac40518709b4baa0a74a9294541b23b9a26faaa198d541fb160590ca8fb7c"}, "downloads": -1, "filename": "aiopylgtv-0.3.3.tar.gz", "has_sig": false, "md5_digest": "6cb5a0a1efcd2bda00041d593cca59fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 19393, "upload_time": "2020-02-06T16:53:24", "upload_time_iso_8601": "2020-02-06T16:53:24.179119Z", "url": "https://files.pythonhosted.org/packages/b3/90/8e0a46ec1eeebecc85d9e299670df06c1addbdb2f7ef9dd6a88aa6f30883/aiopylgtv-0.3.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:54 2020"}