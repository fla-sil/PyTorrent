{"info": {"author": "Jim Fulton", "author_email": "jim@zope.com", "bugtrack_url": null, "classifiers": [], "description": "Logger Monitor\n==============\n\nThe zc.loggermonitor package provides a zc.monitor plugin for getting\nand setting logger levels.\n\n    >>> import sys, zc.loggermonitor\n\nIt is an error to call the monitor without user arguments.\n\n    >>> zc.loggermonitor.level(sys.stdout)\n    Traceback (most recent call last):\n    ...\n    TypeError: level() takes at least 2 arguments (1 given)\n\nIf you pass it a logger name, it returns the current effective level:\n\n    >>> zc.loggermonitor.level(sys.stdout, '.')\n    NOTSET\n    >>> zc.loggermonitor.level(sys.stdout, 'mylogger')\n    NOTSET\n\nIf you pass a level it sets the level:\n\n    >>> zc.loggermonitor.level(sys.stdout, '.', 'INFO')\n\n    >>> zc.loggermonitor.level(sys.stdout, '.')\n    INFO\n    >>> zc.loggermonitor.level(sys.stdout, 'mylogger')\n    INFO\n\nYou can also pass a numeric value:\n\n    >>> zc.loggermonitor.level(sys.stdout, 'mylogger', '5')\n    >>> zc.loggermonitor.level(sys.stdout, '.')\n    INFO\n    >>> zc.loggermonitor.level(sys.stdout, 'mylogger')\n    Level 5\n\n    >>> zc.loggermonitor.level(sys.stdout, 'mylogger', '10')\n    >>> zc.loggermonitor.level(sys.stdout, '.')\n    INFO\n    >>> zc.loggermonitor.level(sys.stdout, 'mylogger')\n    DEBUG\n\n    >>> zc.loggermonitor.level(sys.stdout, 'mylogger', 'NOTSET')\n    >>> zc.loggermonitor.level(sys.stdout, '.')\n    INFO\n    >>> zc.loggermonitor.level(sys.stdout, 'mylogger')\n    INFO\n\n    >>> zc.loggermonitor.level(sys.stdout, '.', 'NOTSET')\n    >>> zc.loggermonitor.level(sys.stdout, '.')\n    NOTSET\n    >>> zc.loggermonitor.level(sys.stdout, 'mylogger')\n    NOTSET\n\nDownload\n--------", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "zc.loggermonitor", "package_url": "https://pypi.org/project/zc.loggermonitor/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zc.loggermonitor/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/zc.loggermonitor/0.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The zc.loggermonitor package provides a zc.monitor plugin for getting\nand setting logger levels.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import sys, zc.loggermonitor\n</pre>\n</blockquote>\n<p>It is an error to call the monitor without user arguments.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout)\nTraceback (most recent call last):\n...\nTypeError: level() takes at least 2 arguments (1 given)\n</pre>\n</blockquote>\n<p>If you pass it a logger name, it returns the current effective level:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, '.')\nNOTSET\n&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, 'mylogger')\nNOTSET\n</pre>\n</blockquote>\n<p>If you pass a level it sets the level:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, '.', 'INFO')\n</pre>\n<pre>&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, '.')\nINFO\n&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, 'mylogger')\nINFO\n</pre>\n</blockquote>\n<p>You can also pass a numeric value:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, 'mylogger', '5')\n&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, '.')\nINFO\n&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, 'mylogger')\nLevel 5\n</pre>\n<pre>&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, 'mylogger', '10')\n&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, '.')\nINFO\n&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, 'mylogger')\nDEBUG\n</pre>\n<pre>&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, 'mylogger', 'NOTSET')\n&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, '.')\nINFO\n&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, 'mylogger')\nINFO\n</pre>\n<pre>&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, '.', 'NOTSET')\n&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, '.')\nNOTSET\n&gt;&gt;&gt; zc.loggermonitor.level(sys.stdout, 'mylogger')\nNOTSET\n</pre>\n</blockquote>\n<div id=\"download\">\n<h2>Download</h2>\n</div>\n\n          </div>"}, "last_serial": 802180, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "906c3f2b8a841453a2832e87dbc534c3", "sha256": "9d0e47150c8674733267c647df837838c19a6d8b32534f4f4b43ff3a80dca176"}, "downloads": -1, "filename": "zc.loggermonitor-0.1.tar.gz", "has_sig": false, "md5_digest": "906c3f2b8a841453a2832e87dbc534c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2792, "upload_time": "2009-02-20T21:24:59", "upload_time_iso_8601": "2009-02-20T21:24:59.324301Z", "url": "https://files.pythonhosted.org/packages/5b/2d/3963a7c95b2088ef60da6433c07809b73eb83d54a35eaa2af222d3f8edc5/zc.loggermonitor-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "906c3f2b8a841453a2832e87dbc534c3", "sha256": "9d0e47150c8674733267c647df837838c19a6d8b32534f4f4b43ff3a80dca176"}, "downloads": -1, "filename": "zc.loggermonitor-0.1.tar.gz", "has_sig": false, "md5_digest": "906c3f2b8a841453a2832e87dbc534c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2792, "upload_time": "2009-02-20T21:24:59", "upload_time_iso_8601": "2009-02-20T21:24:59.324301Z", "url": "https://files.pythonhosted.org/packages/5b/2d/3963a7c95b2088ef60da6433c07809b73eb83d54a35eaa2af222d3f8edc5/zc.loggermonitor-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:17 2020"}