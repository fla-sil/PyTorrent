{"info": {"author": "mike wakerly", "author_email": "opensource@hoho.com", "bugtrack_url": null, "classifiers": [], "description": "# pymidi\n\nA python RTP-MIDI / AppleMIDI implementation. You can use this library to build a network attached virtual MIDI device.\n\n[![Build Status](https://travis-ci.org/mik3y/pymidi.svg?branch=master)](https://travis-ci.org/mik3y/pymidi)\n\n**Latest release:** v0.4.0 (2018-12-26) ([changelog](https://github.com/mik3y/pymidi/blob/master/CHANGELOG.md))\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**\n\n- [Quickstart](#quickstart)\n- [Developer Setup](#developer-setup)\n  - [Compatibility](#compatibility)\n  - [Running tests](#running-tests)\n  - [Developing against something else](#developing-against-something-else)\n- [Demo Server](#demo-server)\n- [Using in Another Project](#using-in-another-project)\n- [Project Status](#project-status)\n- [References and Reading](#references-and-reading)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Quickstart\n\n```\n$ pip install pymidi\n```\nor\n\n```\npipenv install pymidi\n```\n\nSee [Using in Another Project](#using-in-another-project) and the [Developer Setup wiki](wiki/Developer-MIDI-Setup) for more information.\n\n## Developer Setup\n\nSet up your workspace with the very excellent [Pipenv](https://pipenv.readthedocs.io/en/latest/):\n\n```\n$ pipenv install\n```\n\nOnce installed, you'll probably find it useful to work in a `pipenv shell`, for ease of testing and running things:\n\n```\n$ pipenv shell\n(pymidi-tFFCbXNj)\n$ python pymidi/server.py\n```\n\n### Compatibility\n\n`pymidi` requires Python 3. It has been tested against Python 3.6 and Python 3.7.\n\n### Running tests\n\nTests are run with pytest:\n\n```\n$ pytest\n```\n\n### Developing against something else\n\nIf you're working on a project that uses `pymidi` and want to develop both concurrently, leverage the setuptools `develop` command:\n\n```\n$ cd ~/git/otherproject\n$ pipenv shell\n$ pushd ~/git/pymidi && python setup.py develop && popd\n```\n\nThis creates a link to `~/git/pymidi` within the environment of `~/git/otherproject`.\n\n## Demo Server\n\nThe library includes a simple demo server which prints stuff.\n\n```\n$ python pymidi/server.py\n```\n\nSee `--help` for usage.\n\n## Using in Another Project\n\nMost likely you will want to embed a server in another project, and respond to MIDI commands in some application specific way. The demo serve is an example of what you need to do.\n\nFirst, create a subclass of `server.Handler` to implement your policy:\n\n```py\nfrom pymidi import server\n\nclass MyHandler(server.Handler):\n    def on_peer_connected(self, peer):\n        print('Peer connected: {}'.format(peer))\n\n    def on_peer_disconnected(self, peer):\n        print('Peer disconnected: {}'.format(peer))\n\n    def on_midi_commands(self, peer, command_list):\n        for command in command_list:\n            if command.command == 'note_on':\n                key = command.params.key\n                velocity = command.params.velocity\n                print('Someone hit the key {} with velocity {}'.format(key, velocity))\n```\n\nThen install it in a server and start serving:\n\n```\nmyServer = server.Server([('0.0.0.0', 5051)])\nmyServer.add_handler(MyHandler())\nmyServer.serve_forever()\n```\n\nSee the [Developer Setup wiki](https://github.com/mik3y/pymidi/wiki/Developer-MIDI-Setup) for ways to test with real devices.\n\n## Project Status\n\nWhat works:\n* Exchange packet parsing\n* Timestamp sync packet parsing\n* Exchange & timestamp sync protocol support\n* MIDI message parsing\n\nNot (yet) implemented:\n* Journal contents parsing\n* Verification of peers on the data channel\n* Auto-disconnect peers that stop synchronizing clocks\n\n## References and Reading\n\n* Official docs\n  - [RFC 6295: RTP Payload Format for MIDI](https://tools.ietf.org/html/rfc6295)\n  - [AppleMIDI Reference Documentation from Apple](https://developer.apple.com/library/archive/documentation/Audio/Conceptual/MIDINetworkDriverProtocol/MIDI/MIDI.html)\n  - [RTP-MIDI on Wikipedia](https://en.wikipedia.org/wiki/RTP-MIDI)\n* Other helpful docs/sites\n  - [The MIDI Specification](http://midi.teragonaudio.com/tech/midispec.htm)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mik3y/pymidi", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pymidi", "package_url": "https://pypi.org/project/pymidi/", "platform": "", "project_url": "https://pypi.org/project/pymidi/", "project_urls": {"Homepage": "https://github.com/mik3y/pymidi"}, "release_url": "https://pypi.org/project/pymidi/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "Python RTP-MIDI / AppleMIDI driver", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pymidi</h1>\n<p>A python RTP-MIDI / AppleMIDI implementation. You can use this library to build a network attached virtual MIDI device.</p>\n<p><a href=\"https://travis-ci.org/mik3y/pymidi\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/926af2cbe07299a88e9c94eabbba21922b455fac/68747470733a2f2f7472617669732d63692e6f72672f6d696b33792f70796d6964692e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><strong>Latest release:</strong> v0.4.0 (2018-12-26) (<a href=\"https://github.com/mik3y/pymidi/blob/master/CHANGELOG.md\" rel=\"nofollow\">changelog</a>)</p>\n\n\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#developer-setup\" rel=\"nofollow\">Developer Setup</a>\n<ul>\n<li><a href=\"#compatibility\" rel=\"nofollow\">Compatibility</a></li>\n<li><a href=\"#running-tests\" rel=\"nofollow\">Running tests</a></li>\n<li><a href=\"#developing-against-something-else\" rel=\"nofollow\">Developing against something else</a></li>\n</ul>\n</li>\n<li><a href=\"#demo-server\" rel=\"nofollow\">Demo Server</a></li>\n<li><a href=\"#using-in-another-project\" rel=\"nofollow\">Using in Another Project</a></li>\n<li><a href=\"#project-status\" rel=\"nofollow\">Project Status</a></li>\n<li><a href=\"#references-and-reading\" rel=\"nofollow\">References and Reading</a></li>\n</ul>\n\n<h2>Quickstart</h2>\n<pre><code>$ pip install pymidi\n</code></pre>\n<p>or</p>\n<pre><code>pipenv install pymidi\n</code></pre>\n<p>See <a href=\"#using-in-another-project\" rel=\"nofollow\">Using in Another Project</a> and the <a href=\"wiki/Developer-MIDI-Setup\" rel=\"nofollow\">Developer Setup wiki</a> for more information.</p>\n<h2>Developer Setup</h2>\n<p>Set up your workspace with the very excellent <a href=\"https://pipenv.readthedocs.io/en/latest/\" rel=\"nofollow\">Pipenv</a>:</p>\n<pre><code>$ pipenv install\n</code></pre>\n<p>Once installed, you'll probably find it useful to work in a <code>pipenv shell</code>, for ease of testing and running things:</p>\n<pre><code>$ pipenv shell\n(pymidi-tFFCbXNj)\n$ python pymidi/server.py\n</code></pre>\n<h3>Compatibility</h3>\n<p><code>pymidi</code> requires Python 3. It has been tested against Python 3.6 and Python 3.7.</p>\n<h3>Running tests</h3>\n<p>Tests are run with pytest:</p>\n<pre><code>$ pytest\n</code></pre>\n<h3>Developing against something else</h3>\n<p>If you're working on a project that uses <code>pymidi</code> and want to develop both concurrently, leverage the setuptools <code>develop</code> command:</p>\n<pre><code>$ cd ~/git/otherproject\n$ pipenv shell\n$ pushd ~/git/pymidi &amp;&amp; python setup.py develop &amp;&amp; popd\n</code></pre>\n<p>This creates a link to <code>~/git/pymidi</code> within the environment of <code>~/git/otherproject</code>.</p>\n<h2>Demo Server</h2>\n<p>The library includes a simple demo server which prints stuff.</p>\n<pre><code>$ python pymidi/server.py\n</code></pre>\n<p>See <code>--help</code> for usage.</p>\n<h2>Using in Another Project</h2>\n<p>Most likely you will want to embed a server in another project, and respond to MIDI commands in some application specific way. The demo serve is an example of what you need to do.</p>\n<p>First, create a subclass of <code>server.Handler</code> to implement your policy:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymidi</span> <span class=\"kn\">import</span> <span class=\"n\">server</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyHandler</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_peer_connected</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">peer</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Peer connected: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">peer</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_peer_disconnected</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">peer</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Peer disconnected: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">peer</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_midi_commands</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">peer</span><span class=\"p\">,</span> <span class=\"n\">command_list</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">command</span> <span class=\"ow\">in</span> <span class=\"n\">command_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span> <span class=\"o\">==</span> <span class=\"s1\">'note_on'</span><span class=\"p\">:</span>\n                <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">key</span>\n                <span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">velocity</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Someone hit the key </span><span class=\"si\">{}</span><span class=\"s1\"> with velocity </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">velocity</span><span class=\"p\">))</span>\n</pre>\n<p>Then install it in a server and start serving:</p>\n<pre><code>myServer = server.Server([('0.0.0.0', 5051)])\nmyServer.add_handler(MyHandler())\nmyServer.serve_forever()\n</code></pre>\n<p>See the <a href=\"https://github.com/mik3y/pymidi/wiki/Developer-MIDI-Setup\" rel=\"nofollow\">Developer Setup wiki</a> for ways to test with real devices.</p>\n<h2>Project Status</h2>\n<p>What works:</p>\n<ul>\n<li>Exchange packet parsing</li>\n<li>Timestamp sync packet parsing</li>\n<li>Exchange &amp; timestamp sync protocol support</li>\n<li>MIDI message parsing</li>\n</ul>\n<p>Not (yet) implemented:</p>\n<ul>\n<li>Journal contents parsing</li>\n<li>Verification of peers on the data channel</li>\n<li>Auto-disconnect peers that stop synchronizing clocks</li>\n</ul>\n<h2>References and Reading</h2>\n<ul>\n<li>Official docs\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc6295\" rel=\"nofollow\">RFC 6295: RTP Payload Format for MIDI</a></li>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/Audio/Conceptual/MIDINetworkDriverProtocol/MIDI/MIDI.html\" rel=\"nofollow\">AppleMIDI Reference Documentation from Apple</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/RTP-MIDI\" rel=\"nofollow\">RTP-MIDI on Wikipedia</a></li>\n</ul>\n</li>\n<li>Other helpful docs/sites\n<ul>\n<li><a href=\"http://midi.teragonaudio.com/tech/midispec.htm\" rel=\"nofollow\">The MIDI Specification</a></li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6440741, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fc9b201c2035b7c8e9c1173babd414a0", "sha256": "622f64fa8d72cde974916cd5d594867c52779ec11f40432c5714bf78ab7d8e65"}, "downloads": -1, "filename": "pymidi-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fc9b201c2035b7c8e9c1173babd414a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8203, "upload_time": "2018-09-16T23:43:41", "upload_time_iso_8601": "2018-09-16T23:43:41.112109Z", "url": "https://files.pythonhosted.org/packages/9b/ba/c78bc89b7a339c23335cc619c821fda672f1e69fb66d7ffa19a65d0bf844/pymidi-0.1.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "cae9e13f4dd7724c4d931e0608109c0b", "sha256": "79bc6d8ebb115c67811326c7ea44a1e45d96068d77cf52af2325b27a5bb63078"}, "downloads": -1, "filename": "pymidi-0.2.1.tar.gz", "has_sig": false, "md5_digest": "cae9e13f4dd7724c4d931e0608109c0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11008, "upload_time": "2018-09-17T03:29:39", "upload_time_iso_8601": "2018-09-17T03:29:39.451769Z", "url": "https://files.pythonhosted.org/packages/45/85/355da3c85f3ea44b74e9f9d71695184d99573964d8e63e2d68491351e712/pymidi-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2f5cea08fb5c99245dcf45706095d4e1", "sha256": "80537181710a2a5a967984e5ec763345d24f15b34c31405c33e55da8e256333a"}, "downloads": -1, "filename": "pymidi-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2f5cea08fb5c99245dcf45706095d4e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11196, "upload_time": "2018-10-20T22:56:15", "upload_time_iso_8601": "2018-10-20T22:56:15.443877Z", "url": "https://files.pythonhosted.org/packages/3b/fc/da425d521e4daca306960eb6cb47a17c6e23443a06fc30fc941c6153e331/pymidi-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "56c88ab3fb886d652ffda310c38fb634", "sha256": "b1b05970ea67aabb9f04b88373929041926906d06f9f84c26dedf9608979365c"}, "downloads": -1, "filename": "pymidi-0.4.0.tar.gz", "has_sig": false, "md5_digest": "56c88ab3fb886d652ffda310c38fb634", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12682, "upload_time": "2018-12-26T19:09:11", "upload_time_iso_8601": "2018-12-26T19:09:11.203916Z", "url": "https://files.pythonhosted.org/packages/4f/bc/8599287347bc3228738074d80bb15c6cd62b7d48bf12812c5419a49b716a/pymidi-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "6486c20e8f4b82525862684b66fb45cb", "sha256": "00120a6ef1ea590e578e892bfc75cd174f717650ade1d550333a3b2d4a1e329d"}, "downloads": -1, "filename": "pymidi-0.5.0.tar.gz", "has_sig": false, "md5_digest": "6486c20e8f4b82525862684b66fb45cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13326, "upload_time": "2020-01-12T18:11:57", "upload_time_iso_8601": "2020-01-12T18:11:57.952867Z", "url": "https://files.pythonhosted.org/packages/20/1c/3656b7e97143eaefea22308d050f8a1bfaf6cc27e102eac2ebe35ee6386a/pymidi-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6486c20e8f4b82525862684b66fb45cb", "sha256": "00120a6ef1ea590e578e892bfc75cd174f717650ade1d550333a3b2d4a1e329d"}, "downloads": -1, "filename": "pymidi-0.5.0.tar.gz", "has_sig": false, "md5_digest": "6486c20e8f4b82525862684b66fb45cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13326, "upload_time": "2020-01-12T18:11:57", "upload_time_iso_8601": "2020-01-12T18:11:57.952867Z", "url": "https://files.pythonhosted.org/packages/20/1c/3656b7e97143eaefea22308d050f8a1bfaf6cc27e102eac2ebe35ee6386a/pymidi-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:08 2020"}