{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# ultraheatmap\n\nultraheatmap facilitates the production of [deepTools](https://github.com/deeptools/deepTools)\nheatmaps. The heatmaps typically show signal at genomic regions, which can be\nappended by orthogonal data, like associated gene expression. ultraheatmap\nfacilitates adding orthogonal data to a deepTools matrix and allows to cluster a\ngenomic heatmap by selected samples in just one single command-line call.\n\n\n## Getting Started\n\nThese instructions will get you a copy of ultraheatmap up and running on your local machine.\n\n### Prerequisites\n\nThe Prerequisites can be found in requirements.yaml\n\n### Installation\n\nFirst, get the source code:\n\n             $  git clone https://github.com/maxplanck-ie/ultraheatmap.git\n\n\nAfterwards, create a new conda environment with all the Prerequisites by running the following command line:\n\n              $ conda env create -f requirements.yaml\n\n\nThen activate the environment:\n\n              $ conda activate ultraheatmap\n\nTo install the program in this environment:\n\n              $ python setup.py install\n\nfrom the ultraheatmap directory.\n\n\nAlternatively, `pip` or `conda` can be used to install the package. We highly\nrecommend you to create a new conda environment prior to the installation and\ninstall it after activating this environment. This can be done as follows:\n\n              $ conda create -n ultraheatmap python=3.6\n\n              $ conda activate ultraheatmap\n\n              $ conda install -c bioconda -c conda-forge ultraheatmap\n\n\nNow, you already have the program installed and can access each of the modules by calling them. Try\n\n              $  ultraheatmap -h ,\n\n              $  computeOrderedMatrix -h\n\nor\n\n              $  addFeatureToMatrix -h\n\n\n              $ conda deactivate\n\n\n### Usage example\n              $ computeOrderedMatrix -h\n\n              usage: computeOrderedMatrix [-h] -S BIGWIGS [BIGWIGS ...] -R REGIONOFINTEREST\n              [REGIONOFINTEREST ...] -o MATRIXOUTPUT\n              [-g REFINDICES [REFINDICES ...]]\n              [-p NUMBEROFPROCESSORS [NUMBEROFPROCESSORS ...]]\n              [--outFileSortedRegions OUTFILESORTEDREGIONS]\n              [--outputReferenceMatrix OUTPUTREFERENCEMATRIX]\n              [--kmeans INT] [--hclust INT]\n              [-b BEFOREREGIONSTARTLENGTH [BEFOREREGIONSTARTLENGTH ...]]\n              [-a AFTERREGIONSTARTLENGTH [AFTERREGIONSTARTLENGTH ...]]\n              [-op PLOTOUTPUT] [--config USERCONFIG]\n\n              The program sorts/clusters regions considering the reference samples ( given\n              by --groupUsingSamples) and makes a matrix over all the samples using the\n              sorted/clustered regions.\n\n              optional arguments:\n                -h, --help            show this help message and exit\n\n              required arguments:\n\n                -S BIGWIGS [BIGWIGS ...], --scoreFileName BIGWIGS [BIGWIGS ...]\n                bigwig files, the ordered matrix is computedfrom.\n                (default: None)\n\n                -R REGIONOFINTEREST [REGIONOFINTEREST ...],\n                --regionsFileName REGIONOFINTEREST  [REGIONOFINTEREST ...]\n                BED files definig the genomic regions of the\n                matrix.Multiple files can be provided, but the per\n                group information will be lost due to the clustering\n                (default: None)\n\n                -o MATRIXOUTPUT, --outFileName MATRIXOUTPUT\n                Matrix clustered by the given reference samples\n                (default: None)\n\n             optional arguments:\n\n                -g REFINDICES [REFINDICES ...],\n                --groupUsingSamples REFINDICES [REFINDICES ...]\n                sample indices (order of the bigwig files given via -S).\n                It is 1-based and is used to define the reference samples.\n                The reference samples will be used for sorting/clustering the\n                regions (given bed files), before all samples will be used to\n                generate the output matrix. Several indices can be added while\n                separated by space from each other. Default is None and will\n                take all the samples into account to sort/cluster the regions.\n                (default: None)\n\n                -p NUMBEROFPROCESSORS [NUMBEROFPROCESSORS ...],\n                --numberOfProcessors  NUMBEROFPROCESSORS [NUMBEROFPROCESSORS ...]\n                From deepTools doc: Number of processors to use. Type\n                \"max/2\" to use half the maximum number of processors\n                or \"max\" to use all available processors. (default:\n                [1, 1])\n\n                --outFileSortedRegions OUTFILESORTEDREGIONS\n                From deepTools doc: File name in which the regions are\n                saved after skiping zeros or min/max threshold values.\n                The order of the regions in the file follows the\n                sorting order selected. This is useful, for example,\n                to generate other heatmaps keeping the sorting of the\n                first heatmap. (default: None)\n\n                --outputReferenceMatrix OUTPUTREFERENCEMATRIX\n                Matrix on the reference sampels only before clustering\n                (default: None)\n\n                --kmeans INT number of clusters in k-means clustering (default: None)\n\n                --hclust INT number of clusters to compute using\n                hierarchicalclustering as defined by deepTools\n                plotHeatmap (default: None)\n\n                -b BEFOREREGIONSTARTLENGTH [BEFOREREGIONSTARTLENGTH ...],\n                --upstream BEFOREREGIONSTARTLENGTH [BEFOREREGIONSTARTLENGTH ...],\n                --beforeRegionStartLength BEFOREREGIONSTARTLENGTH [BEFOREREGIONSTARTLENGTH ...]\n                From deepTools doc: Distance upstream of the start\n                site of the regions defined in the region file. If the\n                regions are genes, this would be the distance upstream\n                of the transcription start site. (default: [0, 0])\n\n                -a AFTERREGIONSTARTLENGTH [AFTERREGIONSTARTLENGTH ...],\n                --downstream AFTERREGIONSTARTLENGTH [AFTERREGIONSTARTLENGTH ...],\n                --afterRegionStartLength AFTERREGIONSTARTLENGTH [AFTERREGIONSTARTLENGTH ...]\n                From deepTools doc: Distance downstream of the end\n                site of the given regions. If the regions are genes,\n                this would be the distance downstream of the\n                transcription end site. (default: [0, 0])\n\n                -op PLOTOUTPUT, --plotOutput PLOTOUTPUT\n                File name to save the intermediate heatmap. The file\n                ending will be used to determine the format of the\n                image . Available formats are: \"png\", \"eps\", \"pdf\" and\n                \"svg\" (From deeptools doc) (default: None)\n\n                --config USERCONFIG   Added to the default configuration, overwrites if\n\n\nexample\n\n              $ computeOrderedMatrix -S signal1.bw signal2.bw -R regions.bed \\\n              -o final_matrix.gz -p 20 -a 100 -b 100 --outputReferenceMatrix intermediate_matrix.gz \\\n              -op intermediate_matrix_heatmap.png -g 1 --kmeans 2\n\nthe above command line produces a `deeptools` matrix on both given `.bw` files while\nthe regions are the clusters obtained from the given `.bed` file after using `kmeans`\nclustering algorithm with 2 clusters (`--kmeans 2`) based on the signal of first bigwig file (`-g 1`).\n\n\n              $ addFeatureToMatrix -h\n              usage: addFeatureToMatrix [-h] --matrix STR --output STR\n              --feature.tables TABLES [TABLES ...]\n              [--annotationFeature ANNOTATIONFEATURE]\n              [--filteredGenomeGtfOutputFile ANNOTATIONOUTPUT]\n              [--genomeGtf STR]\n              [--featureNames FEATURES [FEATURES ...]]\n              [--featureIdColumn IDCOLUMN]\n              [--referencePoint REFERENCEPOINT]\n              [--closestGenesOutput CLOSESTGENESOUTPUT]\n\n              optional arguments:\n                -h, --help            show this help message and exit\n\n              required arguments:\n\n                --matrix STR, -m STR  deeptools matrix (default: None)\n\n                --output STR, -o STR  output matrix (default: None)\n\n                --feature.tables TABLES [TABLES ...], -t TABLES [TABLES ...]\n                gene id tables or name based tables, tables should be\n                space-separated. (default: None)\n\n              optional arguments:\n\n                --annotationFeature ANNOTATIONFEATURE, -F ANNOTATIONFEATURE\n                annotation file can be filtered by a feature such as\n                gene, exon or transcript (default: None)\n\n                --filteredGenomeGtfOutputFile ANNOTATIONOUTPUT, -oa ANNOTATIONOUTPUT\n                saving filtered annotation file if --annotationFeature\n                (default: None)\n\n                --genomeGtf STR, -g STR\n                genome annotation (gtf) to map peaks to closest gene.\n                Will be filtered through '--annotationFeature'\n                (default: None)\n\n                --featureNames FEATURES [FEATURES ...], -f FEATURES [FEATURES ...]\n                A list of features of interest from gene id tables or\n                name based tables (default: ['log2(FC)'])\n\n                --featureIdColumn IDCOLUMN\n                name of the column includes ids/names (default:\n                GeneID)\n\n                --referencePoint REFERENCEPOINT\n                If closest TSS or TES is needed, otherwise closest\n                gene body will be found (default: None)\n\n                --closestGenesOutput CLOSESTGENESOUTPUT, -og CLOSESTGENESOUTPUT\n                A bed file to save the closest genes (default: None)\n\n\n\nexample\n\n              $ addFeatureToMatrix -m  deeptools_matrix.gz -o appended_matrix.gz \\\n              -t feature_table.tsv -g annotaion.gtf -f column_of_interest_header \\\n              --featureIdColumn id_col_header\n\nThe above command adds extra columns to the input matrix. The output will be a matrix with\n`deeptools` format which can be visualized by `deeptools plotHeatmap`. The extra columns could be gene expression. If annotation file is provided, program finds the closest gene for each region of the input matrix and looks for the gene expression of that gene from the given feature tables.\nIf no annotation is given, program checks for the exact match between regions name from the input matrix and finds the same name on the given feature tables.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ultraheatmap", "package_url": "https://pypi.org/project/ultraheatmap/", "platform": "", "project_url": "https://pypi.org/project/ultraheatmap/", "project_urls": null, "release_url": "https://pypi.org/project/ultraheatmap/1.3.0/", "requires_dist": null, "requires_python": "", "summary": "", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># ultraheatmap</p>\n<p>ultraheatmap facilitates the production of [deepTools](<a href=\"https://github.com/deeptools/deepTools\" rel=\"nofollow\">https://github.com/deeptools/deepTools</a>)\nheatmaps. The heatmaps typically show signal at genomic regions, which can be\nappended by orthogonal data, like associated gene expression. ultraheatmap\nfacilitates adding orthogonal data to a deepTools matrix and allows to cluster a\ngenomic heatmap by selected samples in just one single command-line call.</p>\n<p>## Getting Started</p>\n<p>These instructions will get you a copy of ultraheatmap up and running on your local machine.</p>\n<p>### Prerequisites</p>\n<p>The Prerequisites can be found in requirements.yaml</p>\n<p>### Installation</p>\n<p>First, get the source code:</p>\n<blockquote>\n$  git clone <a href=\"https://github.com/maxplanck-ie/ultraheatmap.git\" rel=\"nofollow\">https://github.com/maxplanck-ie/ultraheatmap.git</a></blockquote>\n<p>Afterwards, create a new conda environment with all the Prerequisites by running the following command line:</p>\n<blockquote>\n$ conda env create -f requirements.yaml</blockquote>\n<p>Then activate the environment:</p>\n<blockquote>\n$ conda activate ultraheatmap</blockquote>\n<p>To install the program in this environment:</p>\n<blockquote>\n$ python setup.py install</blockquote>\n<p>from the ultraheatmap directory.</p>\n<p>Alternatively, <cite>pip</cite> or <cite>conda</cite> can be used to install the package. We highly\nrecommend you to create a new conda environment prior to the installation and\ninstall it after activating this environment. This can be done as follows:</p>\n<blockquote>\n<p>$ conda create -n ultraheatmap python=3.6</p>\n<p>$ conda activate ultraheatmap</p>\n<p>$ conda install -c bioconda -c conda-forge ultraheatmap</p>\n</blockquote>\n<p>Now, you already have the program installed and can access each of the modules by calling them. Try</p>\n<blockquote>\n<p>$  ultraheatmap -h ,</p>\n<p>$  computeOrderedMatrix -h</p>\n</blockquote>\n<p>or</p>\n<blockquote>\n<p>$  addFeatureToMatrix -h</p>\n<p>$ conda deactivate</p>\n</blockquote>\n<dl>\n<dt>### Usage example</dt>\n<dd><blockquote>\n<p>$ computeOrderedMatrix -h</p>\n<p>usage: computeOrderedMatrix [-h] -S BIGWIGS [BIGWIGS \u2026] -R REGIONOFINTEREST\n[REGIONOFINTEREST \u2026] -o MATRIXOUTPUT\n[-g REFINDICES [REFINDICES \u2026]]\n[-p NUMBEROFPROCESSORS [NUMBEROFPROCESSORS \u2026]]\n[\u2013outFileSortedRegions OUTFILESORTEDREGIONS]\n[\u2013outputReferenceMatrix OUTPUTREFERENCEMATRIX]\n[\u2013kmeans INT] [\u2013hclust INT]\n[-b BEFOREREGIONSTARTLENGTH [BEFOREREGIONSTARTLENGTH \u2026]]\n[-a AFTERREGIONSTARTLENGTH [AFTERREGIONSTARTLENGTH \u2026]]\n[-op PLOTOUTPUT] [\u2013config USERCONFIG]</p>\n<p>The program sorts/clusters regions considering the reference samples ( given\nby \u2013groupUsingSamples) and makes a matrix over all the samples using the\nsorted/clustered regions.</p>\n<dl>\n<dt>optional arguments:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>show this help message and exit</td></tr>\n</tbody>\n</table>\n</dd>\n</dl>\n<p>required arguments:</p>\n<blockquote>\n<p>-S BIGWIGS [BIGWIGS \u2026], \u2013scoreFileName BIGWIGS [BIGWIGS \u2026]\nbigwig files, the ordered matrix is computedfrom.\n(default: None)</p>\n<p>-R REGIONOFINTEREST [REGIONOFINTEREST \u2026],\n\u2013regionsFileName REGIONOFINTEREST  [REGIONOFINTEREST \u2026]\nBED files definig the genomic regions of the\nmatrix.Multiple files can be provided, but the per\ngroup information will be lost due to the clustering\n(default: None)</p>\n<p>-o MATRIXOUTPUT, \u2013outFileName MATRIXOUTPUT\nMatrix clustered by the given reference samples\n(default: None)</p>\n</blockquote>\n</blockquote>\n<p>optional arguments:</p>\n<blockquote>\n<p>-g REFINDICES [REFINDICES \u2026],\n\u2013groupUsingSamples REFINDICES [REFINDICES \u2026]\nsample indices (order of the bigwig files given via -S).\nIt is 1-based and is used to define the reference samples.\nThe reference samples will be used for sorting/clustering the\nregions (given bed files), before all samples will be used to\ngenerate the output matrix. Several indices can be added while\nseparated by space from each other. Default is None and will\ntake all the samples into account to sort/cluster the regions.\n(default: None)</p>\n<p>-p NUMBEROFPROCESSORS [NUMBEROFPROCESSORS \u2026],\n\u2013numberOfProcessors  NUMBEROFPROCESSORS [NUMBEROFPROCESSORS \u2026]\nFrom deepTools doc: Number of processors to use. Type\n\u201cmax/2\u201d to use half the maximum number of processors\nor \u201cmax\u201d to use all available processors. (default:\n[1, 1])</p>\n<p>\u2014outFileSortedRegions OUTFILESORTEDREGIONS\nFrom deepTools doc: File name in which the regions are\nsaved after skiping zeros or min/max threshold values.\nThe order of the regions in the file follows the\nsorting order selected. This is useful, for example,\nto generate other heatmaps keeping the sorting of the\nfirst heatmap. (default: None)</p>\n</blockquote>\n<blockquote>\n<p>\u2013outputReferenceMatrix OUTPUTREFERENCEMATRIX\nMatrix on the reference sampels only before clustering\n(default: None)</p>\n<p>\u2014kmeans INT number of clusters in k-means clustering (default: None)</p>\n</blockquote>\n<blockquote>\n<p>\u2013hclust INT number of clusters to compute using\nhierarchicalclustering as defined by deepTools\nplotHeatmap (default: None)</p>\n<p>-b BEFOREREGIONSTARTLENGTH [BEFOREREGIONSTARTLENGTH \u2026],\n\u2013upstream BEFOREREGIONSTARTLENGTH [BEFOREREGIONSTARTLENGTH \u2026],\n\u2013beforeRegionStartLength BEFOREREGIONSTARTLENGTH [BEFOREREGIONSTARTLENGTH \u2026]\nFrom deepTools doc: Distance upstream of the start\nsite of the regions defined in the region file. If the\nregions are genes, this would be the distance upstream\nof the transcription start site. (default: [0, 0])</p>\n<p>-a AFTERREGIONSTARTLENGTH [AFTERREGIONSTARTLENGTH \u2026],\n\u2013downstream AFTERREGIONSTARTLENGTH [AFTERREGIONSTARTLENGTH \u2026],\n\u2013afterRegionStartLength AFTERREGIONSTARTLENGTH [AFTERREGIONSTARTLENGTH \u2026]\nFrom deepTools doc: Distance downstream of the end\nsite of the given regions. If the regions are genes,\nthis would be the distance downstream of the\ntranscription end site. (default: [0, 0])</p>\n<p>-op PLOTOUTPUT, \u2013plotOutput PLOTOUTPUT\nFile name to save the intermediate heatmap. The file\nending will be used to determine the format of the\nimage . Available formats are: \u201cpng\u201d, \u201ceps\u201d, \u201cpdf\u201d and\n\u201csvg\u201d (From deeptools doc) (default: None)</p>\n<p>\u2014config USERCONFIG   Added to the default configuration, overwrites if</p>\n</blockquote>\n</dd>\n</dl>\n<p>example</p>\n<blockquote>\n$ computeOrderedMatrix -S signal1.bw signal2.bw -R regions.bed -o final_matrix.gz -p 20 -a 100 -b 100 \u2013outputReferenceMatrix intermediate_matrix.gz -op intermediate_matrix_heatmap.png -g 1 \u2013kmeans 2</blockquote>\n<p>the above command line produces a <cite>deeptools</cite> matrix on both given <cite>.bw</cite> files while\nthe regions are the clusters obtained from the given <cite>.bed</cite> file after using <cite>kmeans</cite>\nclustering algorithm with 2 clusters (<cite>\u2013kmeans 2</cite>) based on the signal of first bigwig file (<cite>-g 1</cite>).</p>\n<blockquote>\n<p>$ addFeatureToMatrix -h\nusage: addFeatureToMatrix [-h] \u2013matrix STR \u2013output STR\n\u2013feature.tables TABLES [TABLES \u2026]\n[\u2013annotationFeature ANNOTATIONFEATURE]\n[\u2013filteredGenomeGtfOutputFile ANNOTATIONOUTPUT]\n[\u2013genomeGtf STR]\n[\u2013featureNames FEATURES [FEATURES \u2026]]\n[\u2013featureIdColumn IDCOLUMN]\n[\u2013referencePoint REFERENCEPOINT]\n[\u2013closestGenesOutput CLOSESTGENESOUTPUT]</p>\n<dl>\n<dt>optional arguments:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>show this help message and exit</td></tr>\n</tbody>\n</table>\n</dd>\n</dl>\n<p>required arguments:</p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">--matrix <var>STR</var></span>, <span class=\"option\">-m <var>STR</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>deeptools matrix (default: None)</td></tr>\n</tbody>\n</table>\n<p>\u2014output STR, -o STR  output matrix (default: None)</p>\n</blockquote>\n<blockquote>\n\u2013feature.tables TABLES [TABLES \u2026], -t TABLES [TABLES \u2026]\ngene id tables or name based tables, tables should be\nspace-separated. (default: None)</blockquote>\n<p>optional arguments:</p>\n<blockquote>\n<p>\u2013annotationFeature ANNOTATIONFEATURE, -F ANNOTATIONFEATURE\nannotation file can be filtered by a feature such as\ngene, exon or transcript (default: None)</p>\n<p>\u2014filteredGenomeGtfOutputFile ANNOTATIONOUTPUT, -oa ANNOTATIONOUTPUT\nsaving filtered annotation file if \u2013annotationFeature\n(default: None)</p>\n</blockquote>\n<blockquote>\n<p>\u2013genomeGtf STR, -g STR\ngenome annotation (gtf) to map peaks to closest gene.\nWill be filtered through \u2018\u2013annotationFeature\u2019\n(default: None)</p>\n<p>\u2014featureNames FEATURES [FEATURES \u2026], -f FEATURES [FEATURES \u2026]\nA list of features of interest from gene id tables or\nname based tables (default: [\u2018log2(FC)\u2019])</p>\n</blockquote>\n<blockquote>\n<p>\u2013featureIdColumn IDCOLUMN\nname of the column includes ids/names (default:\nGeneID)</p>\n<p>\u2014referencePoint REFERENCEPOINT\nIf closest TSS or TES is needed, otherwise closest\ngene body will be found (default: None)</p>\n</blockquote>\n<blockquote>\n\u2013closestGenesOutput CLOSESTGENESOUTPUT, -og CLOSESTGENESOUTPUT\nA bed file to save the closest genes (default: None)</blockquote>\n</blockquote>\n<p>example</p>\n<blockquote>\n$ addFeatureToMatrix -m  deeptools_matrix.gz -o appended_matrix.gz -t feature_table.tsv -g annotaion.gtf -f column_of_interest_header \u2013featureIdColumn id_col_header</blockquote>\n<p>The above command adds extra columns to the input matrix. The output will be a matrix with\n<cite>deeptools</cite> format which can be visualized by <cite>deeptools plotHeatmap</cite>. The extra columns could be gene expression. If annotation file is provided, program finds the closest gene for each region of the input matrix and looks for the gene expression of that gene from the given feature tables.\nIf no annotation is given, program checks for the exact match between regions name from the input matrix and finds the same name on the given feature tables.</p>\n\n          </div>"}, "last_serial": 6012350, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "6b8003de9c388c4c0066018880cb0c6f", "sha256": "118f8516faf00096151a126f9b66a1e412f86edc6b470cd690caf80698a3e320"}, "downloads": -1, "filename": "ultraheatmap-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6b8003de9c388c4c0066018880cb0c6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14100, "upload_time": "2019-07-16T13:27:47", "upload_time_iso_8601": "2019-07-16T13:27:47.930542Z", "url": "https://files.pythonhosted.org/packages/07/bc/cba7fbd4919dd73d341c82727d21486117ad5106777c7f2ee31baa502ba5/ultraheatmap-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "715d3c010204066ba8037143f556eefd", "sha256": "90011a70e14eb8185bd66a62ac98420455fcfab9b0892411246073219a15bbc7"}, "downloads": -1, "filename": "ultraheatmap-0.0.0.tar.gz", "has_sig": false, "md5_digest": "715d3c010204066ba8037143f556eefd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9900, "upload_time": "2019-07-16T13:27:50", "upload_time_iso_8601": "2019-07-16T13:27:50.283716Z", "url": "https://files.pythonhosted.org/packages/84/23/2df414d08de1fc0c9cea1f6394eb0e8c07fbe36f0f6bb8e6183ce7d5f388/ultraheatmap-0.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6ba04fa1aa019e1c04177e2344429ef4", "sha256": "1ddeccdaf5be7f6fedd3e941ebdd14057ccf7b23e6cef2d0bf3ee3a60f9577da"}, "downloads": -1, "filename": "ultraheatmap-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6ba04fa1aa019e1c04177e2344429ef4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14019, "upload_time": "2019-07-16T14:40:20", "upload_time_iso_8601": "2019-07-16T14:40:20.021817Z", "url": "https://files.pythonhosted.org/packages/51/d6/8972fdeb774908cc484394229a4645cb5ed241f2121d1ccae49cf4946b29/ultraheatmap-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f18ea5acdb96bb84bfca18fd0c73ebea", "sha256": "f025162a483954f32c399a38b6a4ce8dcb7b974438355859518d6e5feff571a6"}, "downloads": -1, "filename": "ultraheatmap-1.1.0.tar.gz", "has_sig": false, "md5_digest": "f18ea5acdb96bb84bfca18fd0c73ebea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10063, "upload_time": "2019-07-16T14:40:21", "upload_time_iso_8601": "2019-07-16T14:40:21.258845Z", "url": "https://files.pythonhosted.org/packages/83/6f/c978828e50d181eb9893d0991f8a4284400bc460b7f88154eee52f8df3ce/ultraheatmap-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "6d6b68b33f1b0257c266900ab73bd741", "sha256": "82b5a79c10452d98a5abfe2775d99740ae113dcd5dd838b79b159a53b4d13c7f"}, "downloads": -1, "filename": "ultraheatmap-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6d6b68b33f1b0257c266900ab73bd741", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14030, "upload_time": "2019-07-29T09:34:16", "upload_time_iso_8601": "2019-07-29T09:34:16.662946Z", "url": "https://files.pythonhosted.org/packages/45/29/6972f022be4e4c8b518c24602c190749cfe819b67981833fc6732d00a993/ultraheatmap-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb240a5f80d35b79f7c7591923251265", "sha256": "82966d32ee0db0202e12a8b7a40db23ebec07fad44e4f7377c2d424fbeba6f59"}, "downloads": -1, "filename": "ultraheatmap-1.2.0.tar.gz", "has_sig": false, "md5_digest": "eb240a5f80d35b79f7c7591923251265", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9857, "upload_time": "2019-07-29T09:34:18", "upload_time_iso_8601": "2019-07-29T09:34:18.338962Z", "url": "https://files.pythonhosted.org/packages/26/74/281c36eb53528096bebbda80a3fec322d5e9efb660ed0cd92ae7e1eaf974/ultraheatmap-1.2.0.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "fc0c0a1ccb47e7e5cdafb92870026767", "sha256": "d31158fec6814bafb8df316d6786d7d9b9ca6fb61bb5c77ba2940201c1fdc6d2"}, "downloads": -1, "filename": "ultraheatmap-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fc0c0a1ccb47e7e5cdafb92870026767", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14021, "upload_time": "2019-08-02T08:24:48", "upload_time_iso_8601": "2019-08-02T08:24:48.279700Z", "url": "https://files.pythonhosted.org/packages/c7/a3/4068645b80c7489f09294b68582c36f6ecf62782ca6c31f494cb55fe45db/ultraheatmap-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4eca54da2256e8e180600af7353818f8", "sha256": "3f35705a2f9d71298b42af51d311b375adbe1e7a43b2f4838d652b39eb435e45"}, "downloads": -1, "filename": "ultraheatmap-1.2.2.tar.gz", "has_sig": false, "md5_digest": "4eca54da2256e8e180600af7353818f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10060, "upload_time": "2019-08-02T08:24:49", "upload_time_iso_8601": "2019-08-02T08:24:49.947523Z", "url": "https://files.pythonhosted.org/packages/a6/a3/27bd11cd285d4d7cfee2faa1ae5d91f51bae59e2e829b658f9afd8e47b6f/ultraheatmap-1.2.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "97ce138dcedc4706f73f2384626699ec", "sha256": "5b5993806e5398d4f7b196f53f0cd502dc6fc83f497aa6e9ccb67597c3abaa19"}, "downloads": -1, "filename": "ultraheatmap-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "97ce138dcedc4706f73f2384626699ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17670, "upload_time": "2019-10-22T11:53:07", "upload_time_iso_8601": "2019-10-22T11:53:07.751128Z", "url": "https://files.pythonhosted.org/packages/85/f6/554827352ff7eedd9bfb63bbce568dee67e5705045782af75da38c872437/ultraheatmap-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c22af2ec3df4781d4e86b4e8605aeca0", "sha256": "63ff11ec1af1b8f160be02fb3ca33a5bdc0e3ebdcc06988d478bd0f5f3d51ce2"}, "downloads": -1, "filename": "ultraheatmap-1.3.0.tar.gz", "has_sig": false, "md5_digest": "c22af2ec3df4781d4e86b4e8605aeca0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13287, "upload_time": "2019-10-22T11:53:09", "upload_time_iso_8601": "2019-10-22T11:53:09.743557Z", "url": "https://files.pythonhosted.org/packages/bb/94/518bc97c6b31f8b9dc815f998022afbe016f8ac01368f407238a56031ab9/ultraheatmap-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97ce138dcedc4706f73f2384626699ec", "sha256": "5b5993806e5398d4f7b196f53f0cd502dc6fc83f497aa6e9ccb67597c3abaa19"}, "downloads": -1, "filename": "ultraheatmap-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "97ce138dcedc4706f73f2384626699ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17670, "upload_time": "2019-10-22T11:53:07", "upload_time_iso_8601": "2019-10-22T11:53:07.751128Z", "url": "https://files.pythonhosted.org/packages/85/f6/554827352ff7eedd9bfb63bbce568dee67e5705045782af75da38c872437/ultraheatmap-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c22af2ec3df4781d4e86b4e8605aeca0", "sha256": "63ff11ec1af1b8f160be02fb3ca33a5bdc0e3ebdcc06988d478bd0f5f3d51ce2"}, "downloads": -1, "filename": "ultraheatmap-1.3.0.tar.gz", "has_sig": false, "md5_digest": "c22af2ec3df4781d4e86b4e8605aeca0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13287, "upload_time": "2019-10-22T11:53:09", "upload_time_iso_8601": "2019-10-22T11:53:09.743557Z", "url": "https://files.pythonhosted.org/packages/bb/94/518bc97c6b31f8b9dc815f998022afbe016f8ac01368f407238a56031ab9/ultraheatmap-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:07 2020"}