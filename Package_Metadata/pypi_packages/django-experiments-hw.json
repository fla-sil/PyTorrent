{"info": {"author": "Mixcloud", "author_email": "technical@mixcloud.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.11", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries"], "description": "Django-Experiments\n==================\n\n.. image:: https://codeship.com/projects/1c7cb7a0-caa8-0130-f2cb-36bd8b1bab14/status?branch=master\n   :target: https://codeship.com/projects/4846\n\nDjango-Experiments is an AB Testing Framework for Django.\n\nIt is possible to set up an experiment through template tags only.\nThrough the Django admin you can monitor and control experiment progress.\n\nIf you don't know what AB testing is, check out `wikipedia <http://en.wikipedia.org/wiki/A/B_testing>`_.\n\n\nInstallation\n------------\n\nDjango-Experiments is best installed via pip:\n\n.. code-block:: bash\n\n    pip install django-experiments\n\nThis should download django-experiments and any dependencies. If downloading from the repo,\npip is still the recommended way to install dependencies:\n\n.. code-block:: bash\n\n    pip install -e .\n\nDependencies\n------------\n- `Django <https://github.com/django/django/>`_\n- `Redis <http://redis.io/>`_\n- `jsonfield <https://github.com/bradjasper/django-jsonfield/>`_\n- `django-modeldict <https://github.com/disqus/django-modeldict>`_\n\n(Detailed list in setup.py)\n\nIt also requires 'django.contrib.humanize' to be in INSTALLED_APPS.\n\nUsage\n-----\n\nThe example project is a good place to get started and have a play.\nResults are stored in redis and displayed in the Django admin. The key\ncomponents of this framework are: the experiments, alternatives and\ngoals.\n\n\nConfiguration\n~~~~~~~~~~~~~\n\nBefore you can start configuring django-experiments, you must ensure\nyou have a redis server up and running. See `redis.io <http://redis.io/>`_ for downloads and documentation.\n\nThis is a quick guide to configuring your settings file to the bare minimum.\nFirst, add the relevant settings for your redis server (we run it as localhost):\n\n.. code-block:: python\n\n    #Example Redis Settings\n    EXPERIMENTS_REDIS_HOST = 'localhost'\n    EXPERIMENTS_REDIS_PORT = 6379\n    EXPERIMENTS_REDIS_DB = 0\n\nNext, activate the apps by adding them to your INSTALLED_APPS:\n\n.. code-block:: python\n\n    #Installed Apps\n    INSTALLED_APPS = [\n        ...\n        'django.contrib.admin',\n        'django.contrib.humanize',\n        'experiments',\n    ]\n\nInclude 'django.contrib.humanize' as above if not already included.\n\nInclude the app URLconf in your urls.py file:\n\n    url(r'experiments/', include('experiments.urls')),\n\nWe haven't configured our goals yet, we'll do that in a bit. Please ensure\nyou have correctly configured your STATIC_URL setting.\n\nOPTIONAL:\nIf you want to use the built in retention goals you will need to include the retention middleware:\n\n.. code-block:: python\n\n    MIDDLEWARE_CLASSES [\n        ...\n        'experiments.middleware.ExperimentsRetentionMiddleware',\n    ]\n\n*Note, more configuration options are detailed below.*\n\n\nExperiments and Alternatives\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe experiment can be manually created in your Django admin. Adding alternatives must currently be done in template tags or by calling the relevant code, as described below.\n\nAn experiment allows you to test the effect of various design\nalternatives on user interaction. Django-Experiments is designed to work\nfrom within django templates, to make it easier for designers. We begin\nby loading our module:\n\n.. code-block:: html\n\n    {% load experiments %}\n\nand we then define our first experiment and alternative, using the\nfollowing syntax:\n\n.. code-block:: html\n\n    {% experiment EXPERIMENT ALTERNATIVE %}\n\nWe are going to run an experiment called \u201cregister\\_text\u201d to see what\nregistration link text causes more users to complete the registration\nprocess. Our first alternative must always be the \u201ccontrol\u201d alternative.\nThis is our fallback if the experiment is disabled.\n\n.. code-block:: html\n\n    {% experiment register_text control %}\n        <a href = \"register.html\">Register now.</a>\n    {% endexperiment %}\n\nSo while the experiment is disabled, users will see a register link\nsaying \u201cRegister now\u201d. Let\u2019s define another, more polite alternative:\n\n.. code-block:: html\n\n    {% experiment register_text polite %}\n        <a href = \"register.html\">Please register!</a>\n    {% endexperiment %}\n\nWhile experiment is disabled, users will still see the \u201ccontrol\u201d\nalternative, and their registration link will say \u201cRegister now\u201d. When\nthe experiment is enabled, users will be randomly assigned to each\nalternative. This information is stored in the enrollment, a unique\ncombination of the user, the experiment and which alternative they are\nassigned to.\n\nMake sure the experiment tag has access to the request object (not an\nissue for regular templates but you might have to manually add it\ninside an inclusion tag) or it will silently fail to work.\n\nThe experiment_enroll assignment tag can also be used (note that it\ntakes strings or variables unlike the older experiment tag):\n\n.. code-block:: html\n\n     {% experiment_enroll \"experiment_name\" \"alternative1\" \"alternative2\" as assigned_alternative %}\n     {% if assigned_alternative == \"alternative1\" or assigned_alternative == \"alternative2\" %}\n        <a href = \"register.html\">Please register!</a>\n     {% else %}\n        <a href = \"register.html\">Register now.</a>\n     {% endif %}\n\nYou can also enroll users in experiments and find out what alternative they\nare part of from python. To enroll a user in an experiment and show a\ndifferent result based on the alternative:\n\n.. code-block:: python\n\n    from experiments.utils import participant\n    alternative = participant(request).enroll('register_text', ['polite'])\n    if alternative == 'polite':\n        text_to_show = get_polite_text()\n    elif alternative == 'control':\n        text_to_show = get_normal_text()\n\nIf you wish to find out what experiment alternative a user is part of, but not\nenroll them if they are not yet a member, you can use get_alternative. This\nwill return 'control' if the user is not enrolled. 'control' is also returned\nfor users who are enrolled in the experiment but have been assigned to the\ncontrol group - there is no way to differentiate between these cases.\n\n.. code-block:: python\n\n    from experiments.utils import participant\n    alternative = participant(request).get_alternative('register_text')\n    if alternative == 'polite':\n        header_text = get_polite_text_summary()\n    elif alternative == 'control':\n        header_text = get_normal_text_summary()\n\nYou can also weight the experiments using the following techniques\n\n.. code-block:: python\n\n   alternative = participant(request).enroll('example_test', {'control': 99, 'v2': 1})\n\n.. code-block:: html\n\n   {% experiment example_test control 99 %}v2{% endexperiment %}\n   {% experiment example_test v2 1 %}v2{% endexperiment %}\n\nBy default the participant function expects a HttpRequest object, but you can\nalternatively pass a user or session as a keyword argument\n\n.. code-block:: python\n\n    participant(user=current_user).get_alternative('register_text')\n    participant(session=session).get_alternative('register_text')\n\n\n\\*\\ *Experiments will be dynamically created by default if they are\ndefined in a template but not in the admin. This can be overridden in\nsettings.*\n\nAfter creating an experiment either using the Django admin, or through\ntemplate tags or code, you must enable the experiment in the Django\nadmin or manually for it to work.\n\n\n\nGoals\n~~~~~\n\nGoals allow us to acknowledge when a user hits a certain page. You\nspecify them in the EXPERIMENTS\\_GOALS tuple in your settings. Given the\nexample above, we would want a goal to be triggered once the user has\ncompleted the registration process.\n\nAdd the goal to our EXPERIMENT_GOALS tuple in settings.py:\n\n.. code-block:: python\n\n    EXPERIMENTS_GOALS = (\"registration\",)\n\nGoals are simple strings that uniquely identify a goal.\n\nOur registration successful page will contain the goal template tag:\n\n.. code-block:: html\n\n    {% experiment_goal \"registration\" %}\n\nThis will be fired when the user loads the page. This is not the only way of firing a goal. In total, there are four ways of recording goals:\n\n1. **Django Template Tags** (as above).\n\n    .. code-block:: html\n\n        {% experiment_goal \"registration\" %}\n\n2. **Server side**, using a python function somewhere in your django views:\n\n    .. code-block:: python\n\n        from experiments.utils import participant\n\n        participant(request).goal('registration')\n\n3. **JavaScript onclick**:\n\n    .. code-block:: html\n\n        <button onclick=\"experiments.goal('registration')\">Complete Registration</button>\n\n    (Please note, this requires CSRF authentication. Please see the `Django Docs <https://docs.djangoproject.com/en/1.4/ref/contrib/csrf/#ajax>`_)\n\n4. **Cookies**:\n\n    .. code-block:: html\n\n        <span data-experiments-goal=\"registration\">Complete Registration</span>\n\nMultiple goals can be recorded via the cookie using space as a separator.\n\nThe goal is independent from the experiment as many experiments can all\nhave the same goal. The goals are defined in the settings.py file for\nyour project.\n\nRetention Goals\n~~~~~~~~~~~~~~~\n\nThere are two retention goals (VISIT_PRESENT_COUNT_GOAL and VISIT_NOT_PRESENT_COUNT_GOAL that\ndefault to '_retention_present_visits' and '_retention_not_present_visits' respectively). To\nuse these install the retention middleware. A visit is defined by no page views within\nSESSION_LENGTH hours (defaults to 6).\n\nVISIT_PRESENT_COUNT_GOAL does not trigger until the next visit after the user is enrolled and\nshould be used in most cases. VISIT_NOT_PRESENT_COUNT_GOAL triggers on the first visit after\nenrollment and should be used in situations where the user isn't present when being enrolled\n(for example when sending an email). Both goals are tracked for all experiments so take care\nto only use one when interpreting the results.\n\nConfirming Human\n~~~~~~~~~~~~~~~~\n\nThe framework can distinguish between humans and bots. By including\n\n.. code-block:: html\n\n    {% load experiments %}\n\n    {% experiments_confirm_human %}\n\nat some point in your code (we recommend you put it in your base.html\nfile), unregistered users will then be confirmed as human. This can be\nquickly overridden in settings, but be careful - bots can really mess up\nyour results!\n\nIf you want to customize the confirm human code you can change the\nCONFIRM_HUMAN_SESSION_KEY setting and manage setting the value yourself.\nNote that you need to call confirm_human on the participant when they\nbecome confirmed as well as setting session[CONFIRM_HUMAN_SESSION_KEY]\nequal to True.\n\nManaging Experiments\n--------------------\n\nExperiments can be managed in the Django admin (/admin/experiments/experiment/ by\ndefault).\n\nThe States\n~~~~~~~~~~\n\n**Control** - The experiment is essentially disabled. All users will see\nthe control alternative, and no data will be collected.\n\n**Enabled** - The experiment is enabled globally, for all users.\n\n\nSettings\n--------\n\n.. code-block:: python\n\n    #Experiment Goals\n    EXPERIMENTS_GOALS = ()\n\n    #Auto-create experiment if doesn't exist\n    EXPERIMENTS_AUTO_CREATE = True\n\n    #Toggle whether the framework should verify user is human. Be careful.\n    EXPERIMENTS_VERIFY_HUMAN = False\n\n    #Example Redis Settings\n    EXPERIMENTS_REDIS_HOST = 'localhost'\n    EXPERIMENTS_REDIS_PORT = 6379\n    EXPERIMENTS_REDIS_DB = 0\n\nSee conf.py for other settings\n\n\nChangelog\n---------\nUNRELEASED\n~~~~~~~~~~\n - Conform to common expectations in `setup.py`:\n    - Separate `install_requires` and `tests_require` (not reading from `requirements.txt`)\n    - Add trove classifiers including Python and Django supported versions\n    - Fix license name (from \"MIT license, see LICENSE file\" to \"MIT\")\n    - Make `setup.py` ready for Python 3 (read `README.rst` using codecs module)\n    - Dropped an irrelevant workaround for ancient Python bugs\n - Add `setup.cfg` to support building of universal wheels (preparing for Python 3)\n - Tox runs `python setup.py test` (honouring both `install_requires` and `tests_require`)\n - Prepared `tox.ini` for Python 3 and Django 1.11 compatibility\n\n1.2.0\n~~~~~\n - Add support for Django 1.10 (Thanks to @Kobold)\n - Make requirements.txt more flexible\n - Tox support added for testing on multiple Django Versions (Thanks to @Kobold again!)\n\n1.1.6\n~~~~~\n - Change to use django-modeldict-yplan as its maintained\n - Change to use pythons inbuilt unittest and not Django's as its Deprecated)\n\n1.1.5\n~~~~~\n - Removing experiment_helpers template tag library since it is no longer used and breaks under Django 1.9 (thanks david12341235)\n\n1.1.4\n~~~~~\n\n - Removing django-jsonfield from requirements.txt (thank you to bustavo) and adding jsonfield\n\n1.1.2\n~~~~~\n\n - Updating migrations\n - Documentation improvements\n - Updating example app\n\n1.1.1\n~~~~~\n\n - Fixing EXPERIMENTS_AUTO_CREATE flag (previously setting it to True did nothing)\n\n1.1.0\n~~~~~\n\n - Nexus is no longer required or used - the standard Django admin for the Experiment model takes over the functionality previously provided by Nexus - NOTE this may have some backwards incompatibilities depending on how you included the media files\n - Promote an experiment to a particular alternative (other than Control) through the admin\n - New experiment_enroll assignment tag (see below)\n\n1.0.0\n~~~~~\n\nBumping version to 1.0.0 because django-experiments is definitely production\nready but also due to backwards incompatible changes that have been merged in.\n\n - Django 1.7 and 1.8 support (including custom user models)\n - Fixed numerous bugs to do with retention goals - before this update they are not trustworthy. See retention section below for more information.\n - Fixed bug caused by the participant cache on request\n - Fixed bugs related to confirm human and made the functionality pluggable\n - Added \"force_alternative\" option to participant.enroll (important note: forcing the alternative in a non-random way will generate potentially invalid results)\n - Removal of gargoyle integration and extra \"request\" parameters to methods that no longer need them such as is_enrolled (BACKWARDS INCOMPATIBLE CHANGE)\n - ExperimentsMiddleware changed to ExperimentsRetentionMiddleware (BACKWARDS INCOMPATIBLE CHANGE)\n - More tests and logging added\n\n0.3.5\n~~~~~\n\n- Add migration scripts for south\n- Fix rendering when probabilities close to 100%\n- Reduce database load when a user performs an action multiple times\n\n0.3.4\n~~~~~\n\n- Updated JS goal to POST method. Requires csrf javascript.\n- Random number on template tag goal image to prevent caching\n\n\n0.3.3\n~~~~~\n\n- Static media handled by nexus again\n\n0.3.2\n~~~~~\n\n- Fixed missing edit/delete images\n\n0.3.1\n~~~~~\n\n- Replaced django static template tags. Supports django 1.3 again!\n\n0.3.0\n~~~~~\n\n- Added django permission support.\n- Started using django static instead of nexus:media. (django 1.4 only)\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mixcloud/django-experiments", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-experiments-hw", "package_url": "https://pypi.org/project/django-experiments-hw/", "platform": "", "project_url": "https://pypi.org/project/django-experiments-hw/", "project_urls": {"Homepage": "https://github.com/mixcloud/django-experiments"}, "release_url": "https://pypi.org/project/django-experiments-hw/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "Python Django AB Testing Framework", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://codeship.com/projects/4846\" rel=\"nofollow\"><img alt=\"https://codeship.com/projects/1c7cb7a0-caa8-0130-f2cb-36bd8b1bab14/status?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9748959d34c6260178fcb31962fc6a1b79ff5018/68747470733a2f2f636f6465736869702e636f6d2f70726f6a656374732f31633763623761302d636161382d303133302d663263622d3336626438623162616231342f7374617475733f6272616e63683d6d6173746572\"></a>\n<p>Django-Experiments is an AB Testing Framework for Django.</p>\n<p>It is possible to set up an experiment through template tags only.\nThrough the Django admin you can monitor and control experiment progress.</p>\n<p>If you don\u2019t know what AB testing is, check out <a href=\"http://en.wikipedia.org/wiki/A/B_testing\" rel=\"nofollow\">wikipedia</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Django-Experiments is best installed via pip:</p>\n<pre>pip install django-experiments\n</pre>\n<p>This should download django-experiments and any dependencies. If downloading from the repo,\npip is still the recommended way to install dependencies:</p>\n<pre>pip install -e .\n</pre>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://github.com/django/django/\" rel=\"nofollow\">Django</a></li>\n<li><a href=\"http://redis.io/\" rel=\"nofollow\">Redis</a></li>\n<li><a href=\"https://github.com/bradjasper/django-jsonfield/\" rel=\"nofollow\">jsonfield</a></li>\n<li><a href=\"https://github.com/disqus/django-modeldict\" rel=\"nofollow\">django-modeldict</a></li>\n</ul>\n<p>(Detailed list in setup.py)</p>\n<p>It also requires \u2018django.contrib.humanize\u2019 to be in INSTALLED_APPS.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The example project is a good place to get started and have a play.\nResults are stored in redis and displayed in the Django admin. The key\ncomponents of this framework are: the experiments, alternatives and\ngoals.</p>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>Before you can start configuring django-experiments, you must ensure\nyou have a redis server up and running. See <a href=\"http://redis.io/\" rel=\"nofollow\">redis.io</a> for downloads and documentation.</p>\n<p>This is a quick guide to configuring your settings file to the bare minimum.\nFirst, add the relevant settings for your redis server (we run it as localhost):</p>\n<pre><span class=\"c1\">#Example Redis Settings</span>\n<span class=\"n\">EXPERIMENTS_REDIS_HOST</span> <span class=\"o\">=</span> <span class=\"s1\">'localhost'</span>\n<span class=\"n\">EXPERIMENTS_REDIS_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">6379</span>\n<span class=\"n\">EXPERIMENTS_REDIS_DB</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre>\n<p>Next, activate the apps by adding them to your INSTALLED_APPS:</p>\n<pre><span class=\"c1\">#Installed Apps</span>\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.humanize'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'experiments'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Include \u2018django.contrib.humanize\u2019 as above if not already included.</p>\n<p>Include the app URLconf in your urls.py file:</p>\n<blockquote>\nurl(r\u2019experiments/\u2019, include(\u2018experiments.urls\u2019)),</blockquote>\n<p>We haven\u2019t configured our goals yet, we\u2019ll do that in a bit. Please ensure\nyou have correctly configured your STATIC_URL setting.</p>\n<p>OPTIONAL:\nIf you want to use the built in retention goals you will need to include the retention middleware:</p>\n<pre><span class=\"n\">MIDDLEWARE_CLASSES</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'experiments.middleware.ExperimentsRetentionMiddleware'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p><em>Note, more configuration options are detailed below.</em></p>\n</div>\n<div id=\"experiments-and-alternatives\">\n<h3>Experiments and Alternatives</h3>\n<p>The experiment can be manually created in your Django admin. Adding alternatives must currently be done in template tags or by calling the relevant code, as described below.</p>\n<p>An experiment allows you to test the effect of various design\nalternatives on user interaction. Django-Experiments is designed to work\nfrom within django templates, to make it easier for designers. We begin\nby loading our module:</p>\n<pre>{% load experiments %}\n</pre>\n<p>and we then define our first experiment and alternative, using the\nfollowing syntax:</p>\n<pre>{% experiment EXPERIMENT ALTERNATIVE %}\n</pre>\n<p>We are going to run an experiment called \u201cregister_text\u201d to see what\nregistration link text causes more users to complete the registration\nprocess. Our first alternative must always be the \u201ccontrol\u201d alternative.\nThis is our fallback if the experiment is disabled.</p>\n<pre>{% experiment register_text control %}\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href </span><span class=\"o\">=</span> <span class=\"s\">\"register.html\"</span><span class=\"p\">&gt;</span>Register now.<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n{% endexperiment %}\n</pre>\n<p>So while the experiment is disabled, users will see a register link\nsaying \u201cRegister now\u201d. Let\u2019s define another, more polite alternative:</p>\n<pre>{% experiment register_text polite %}\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href </span><span class=\"o\">=</span> <span class=\"s\">\"register.html\"</span><span class=\"p\">&gt;</span>Please register!<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n{% endexperiment %}\n</pre>\n<p>While experiment is disabled, users will still see the \u201ccontrol\u201d\nalternative, and their registration link will say \u201cRegister now\u201d. When\nthe experiment is enabled, users will be randomly assigned to each\nalternative. This information is stored in the enrollment, a unique\ncombination of the user, the experiment and which alternative they are\nassigned to.</p>\n<p>Make sure the experiment tag has access to the request object (not an\nissue for regular templates but you might have to manually add it\ninside an inclusion tag) or it will silently fail to work.</p>\n<p>The experiment_enroll assignment tag can also be used (note that it\ntakes strings or variables unlike the older experiment tag):</p>\n<pre>{% experiment_enroll \"experiment_name\" \"alternative1\" \"alternative2\" as assigned_alternative %}\n{% if assigned_alternative == \"alternative1\" or assigned_alternative == \"alternative2\" %}\n   <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href </span><span class=\"o\">=</span> <span class=\"s\">\"register.html\"</span><span class=\"p\">&gt;</span>Please register!<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n{% else %}\n   <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href </span><span class=\"o\">=</span> <span class=\"s\">\"register.html\"</span><span class=\"p\">&gt;</span>Register now.<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n{% endif %}\n</pre>\n<p>You can also enroll users in experiments and find out what alternative they\nare part of from python. To enroll a user in an experiment and show a\ndifferent result based on the alternative:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">experiments.utils</span> <span class=\"kn\">import</span> <span class=\"n\">participant</span>\n<span class=\"n\">alternative</span> <span class=\"o\">=</span> <span class=\"n\">participant</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">enroll</span><span class=\"p\">(</span><span class=\"s1\">'register_text'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'polite'</span><span class=\"p\">])</span>\n<span class=\"k\">if</span> <span class=\"n\">alternative</span> <span class=\"o\">==</span> <span class=\"s1\">'polite'</span><span class=\"p\">:</span>\n    <span class=\"n\">text_to_show</span> <span class=\"o\">=</span> <span class=\"n\">get_polite_text</span><span class=\"p\">()</span>\n<span class=\"k\">elif</span> <span class=\"n\">alternative</span> <span class=\"o\">==</span> <span class=\"s1\">'control'</span><span class=\"p\">:</span>\n    <span class=\"n\">text_to_show</span> <span class=\"o\">=</span> <span class=\"n\">get_normal_text</span><span class=\"p\">()</span>\n</pre>\n<p>If you wish to find out what experiment alternative a user is part of, but not\nenroll them if they are not yet a member, you can use get_alternative. This\nwill return \u2018control\u2019 if the user is not enrolled. \u2018control\u2019 is also returned\nfor users who are enrolled in the experiment but have been assigned to the\ncontrol group - there is no way to differentiate between these cases.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">experiments.utils</span> <span class=\"kn\">import</span> <span class=\"n\">participant</span>\n<span class=\"n\">alternative</span> <span class=\"o\">=</span> <span class=\"n\">participant</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_alternative</span><span class=\"p\">(</span><span class=\"s1\">'register_text'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">alternative</span> <span class=\"o\">==</span> <span class=\"s1\">'polite'</span><span class=\"p\">:</span>\n    <span class=\"n\">header_text</span> <span class=\"o\">=</span> <span class=\"n\">get_polite_text_summary</span><span class=\"p\">()</span>\n<span class=\"k\">elif</span> <span class=\"n\">alternative</span> <span class=\"o\">==</span> <span class=\"s1\">'control'</span><span class=\"p\">:</span>\n    <span class=\"n\">header_text</span> <span class=\"o\">=</span> <span class=\"n\">get_normal_text_summary</span><span class=\"p\">()</span>\n</pre>\n<p>You can also weight the experiments using the following techniques</p>\n<pre><span class=\"n\">alternative</span> <span class=\"o\">=</span> <span class=\"n\">participant</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">enroll</span><span class=\"p\">(</span><span class=\"s1\">'example_test'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'control'</span><span class=\"p\">:</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"s1\">'v2'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n</pre>\n<pre>{% experiment example_test control 99 %}v2{% endexperiment %}\n{% experiment example_test v2 1 %}v2{% endexperiment %}\n</pre>\n<p>By default the participant function expects a HttpRequest object, but you can\nalternatively pass a user or session as a keyword argument</p>\n<pre><span class=\"n\">participant</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">current_user</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_alternative</span><span class=\"p\">(</span><span class=\"s1\">'register_text'</span><span class=\"p\">)</span>\n<span class=\"n\">participant</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_alternative</span><span class=\"p\">(</span><span class=\"s1\">'register_text'</span><span class=\"p\">)</span>\n</pre>\n<p>*<em>Experiments will be dynamically created by default if they are\ndefined in a template but not in the admin. This can be overridden in\nsettings.</em></p>\n<p>After creating an experiment either using the Django admin, or through\ntemplate tags or code, you must enable the experiment in the Django\nadmin or manually for it to work.</p>\n</div>\n<div id=\"goals\">\n<h3>Goals</h3>\n<p>Goals allow us to acknowledge when a user hits a certain page. You\nspecify them in the EXPERIMENTS_GOALS tuple in your settings. Given the\nexample above, we would want a goal to be triggered once the user has\ncompleted the registration process.</p>\n<p>Add the goal to our EXPERIMENT_GOALS tuple in settings.py:</p>\n<pre><span class=\"n\">EXPERIMENTS_GOALS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"registration\"</span><span class=\"p\">,)</span>\n</pre>\n<p>Goals are simple strings that uniquely identify a goal.</p>\n<p>Our registration successful page will contain the goal template tag:</p>\n<pre>{% experiment_goal \"registration\" %}\n</pre>\n<p>This will be fired when the user loads the page. This is not the only way of firing a goal. In total, there are four ways of recording goals:</p>\n<ol>\n<li><p><strong>Django Template Tags</strong> (as above).</p>\n<blockquote>\n<pre>{% experiment_goal \"registration\" %}\n</pre>\n</blockquote>\n</li>\n<li><p><strong>Server side</strong>, using a python function somewhere in your django views:</p>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">experiments.utils</span> <span class=\"kn\">import</span> <span class=\"n\">participant</span>\n\n<span class=\"n\">participant</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">goal</span><span class=\"p\">(</span><span class=\"s1\">'registration'</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</li>\n<li><p><strong>JavaScript onclick</strong>:</p>\n<blockquote>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onclick</span><span class=\"o\">=</span><span class=\"s\">\"experiments.goal('registration')\"</span><span class=\"p\">&gt;</span>Complete Registration<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n</pre>\n<p>(Please note, this requires CSRF authentication. Please see the <a href=\"https://docs.djangoproject.com/en/1.4/ref/contrib/csrf/#ajax\" rel=\"nofollow\">Django Docs</a>)</p>\n</blockquote>\n</li>\n<li><p><strong>Cookies</strong>:</p>\n<blockquote>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">data-experiments-goal</span><span class=\"o\">=</span><span class=\"s\">\"registration\"</span><span class=\"p\">&gt;</span>Complete Registration<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n</pre>\n</blockquote>\n</li>\n</ol>\n<p>Multiple goals can be recorded via the cookie using space as a separator.</p>\n<p>The goal is independent from the experiment as many experiments can all\nhave the same goal. The goals are defined in the settings.py file for\nyour project.</p>\n</div>\n<div id=\"retention-goals\">\n<h3>Retention Goals</h3>\n<p>There are two retention goals (VISIT_PRESENT_COUNT_GOAL and VISIT_NOT_PRESENT_COUNT_GOAL that\ndefault to \u2018_retention_present_visits\u2019 and \u2018_retention_not_present_visits\u2019 respectively). To\nuse these install the retention middleware. A visit is defined by no page views within\nSESSION_LENGTH hours (defaults to 6).</p>\n<p>VISIT_PRESENT_COUNT_GOAL does not trigger until the next visit after the user is enrolled and\nshould be used in most cases. VISIT_NOT_PRESENT_COUNT_GOAL triggers on the first visit after\nenrollment and should be used in situations where the user isn\u2019t present when being enrolled\n(for example when sending an email). Both goals are tracked for all experiments so take care\nto only use one when interpreting the results.</p>\n</div>\n<div id=\"confirming-human\">\n<h3>Confirming Human</h3>\n<p>The framework can distinguish between humans and bots. By including</p>\n<pre>{% load experiments %}\n\n{% experiments_confirm_human %}\n</pre>\n<p>at some point in your code (we recommend you put it in your base.html\nfile), unregistered users will then be confirmed as human. This can be\nquickly overridden in settings, but be careful - bots can really mess up\nyour results!</p>\n<p>If you want to customize the confirm human code you can change the\nCONFIRM_HUMAN_SESSION_KEY setting and manage setting the value yourself.\nNote that you need to call confirm_human on the participant when they\nbecome confirmed as well as setting session[CONFIRM_HUMAN_SESSION_KEY]\nequal to True.</p>\n</div>\n</div>\n<div id=\"managing-experiments\">\n<h2>Managing Experiments</h2>\n<p>Experiments can be managed in the Django admin (/admin/experiments/experiment/ by\ndefault).</p>\n<div id=\"the-states\">\n<h3>The States</h3>\n<p><strong>Control</strong> - The experiment is essentially disabled. All users will see\nthe control alternative, and no data will be collected.</p>\n<p><strong>Enabled</strong> - The experiment is enabled globally, for all users.</p>\n</div>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<pre><span class=\"c1\">#Experiment Goals</span>\n<span class=\"n\">EXPERIMENTS_GOALS</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n<span class=\"c1\">#Auto-create experiment if doesn't exist</span>\n<span class=\"n\">EXPERIMENTS_AUTO_CREATE</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\">#Toggle whether the framework should verify user is human. Be careful.</span>\n<span class=\"n\">EXPERIMENTS_VERIFY_HUMAN</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\">#Example Redis Settings</span>\n<span class=\"n\">EXPERIMENTS_REDIS_HOST</span> <span class=\"o\">=</span> <span class=\"s1\">'localhost'</span>\n<span class=\"n\">EXPERIMENTS_REDIS_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">6379</span>\n<span class=\"n\">EXPERIMENTS_REDIS_DB</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre>\n<p>See conf.py for other settings</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"unreleased\">\n<h3>UNRELEASED</h3>\n<blockquote>\n<ul>\n<li><dl>\n<dt>Conform to common expectations in <cite>setup.py</cite>:</dt>\n<dd><ul>\n<li>Separate <cite>install_requires</cite> and <cite>tests_require</cite> (not reading from <cite>requirements.txt</cite>)</li>\n<li>Add trove classifiers including Python and Django supported versions</li>\n<li>Fix license name (from \u201cMIT license, see LICENSE file\u201d to \u201cMIT\u201d)</li>\n<li>Make <cite>setup.py</cite> ready for Python 3 (read <cite>README.rst</cite> using codecs module)</li>\n<li>Dropped an irrelevant workaround for ancient Python bugs</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>Add <cite>setup.cfg</cite> to support building of universal wheels (preparing for Python 3)</li>\n<li>Tox runs <cite>python setup.py test</cite> (honouring both <cite>install_requires</cite> and <cite>tests_require</cite>)</li>\n<li>Prepared <cite>tox.ini</cite> for Python 3 and Django 1.11 compatibility</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id1\">\n<h3>1.2.0</h3>\n<blockquote>\n<ul>\n<li>Add support for Django 1.10 (Thanks to @Kobold)</li>\n<li>Make requirements.txt more flexible</li>\n<li>Tox support added for testing on multiple Django Versions (Thanks to @Kobold again!)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id2\">\n<h3>1.1.6</h3>\n<blockquote>\n<ul>\n<li>Change to use django-modeldict-yplan as its maintained</li>\n<li>Change to use pythons inbuilt unittest and not Django\u2019s as its Deprecated)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h3>1.1.5</h3>\n<blockquote>\n<ul>\n<li>Removing experiment_helpers template tag library since it is no longer used and breaks under Django 1.9 (thanks david12341235)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id4\">\n<h3>1.1.4</h3>\n<blockquote>\n<ul>\n<li>Removing django-jsonfield from requirements.txt (thank you to bustavo) and adding jsonfield</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id5\">\n<h3>1.1.2</h3>\n<blockquote>\n<ul>\n<li>Updating migrations</li>\n<li>Documentation improvements</li>\n<li>Updating example app</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id6\">\n<h3>1.1.1</h3>\n<blockquote>\n<ul>\n<li>Fixing EXPERIMENTS_AUTO_CREATE flag (previously setting it to True did nothing)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id7\">\n<h3>1.1.0</h3>\n<blockquote>\n<ul>\n<li>Nexus is no longer required or used - the standard Django admin for the Experiment model takes over the functionality previously provided by Nexus - NOTE this may have some backwards incompatibilities depending on how you included the media files</li>\n<li>Promote an experiment to a particular alternative (other than Control) through the admin</li>\n<li>New experiment_enroll assignment tag (see below)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id8\">\n<h3>1.0.0</h3>\n<p>Bumping version to 1.0.0 because django-experiments is definitely production\nready but also due to backwards incompatible changes that have been merged in.</p>\n<blockquote>\n<ul>\n<li>Django 1.7 and 1.8 support (including custom user models)</li>\n<li>Fixed numerous bugs to do with retention goals - before this update they are not trustworthy. See retention section below for more information.</li>\n<li>Fixed bug caused by the participant cache on request</li>\n<li>Fixed bugs related to confirm human and made the functionality pluggable</li>\n<li>Added \u201cforce_alternative\u201d option to participant.enroll (important note: forcing the alternative in a non-random way will generate potentially invalid results)</li>\n<li>Removal of gargoyle integration and extra \u201crequest\u201d parameters to methods that no longer need them such as is_enrolled (BACKWARDS INCOMPATIBLE CHANGE)</li>\n<li>ExperimentsMiddleware changed to ExperimentsRetentionMiddleware (BACKWARDS INCOMPATIBLE CHANGE)</li>\n<li>More tests and logging added</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id9\">\n<h3>0.3.5</h3>\n<ul>\n<li>Add migration scripts for south</li>\n<li>Fix rendering when probabilities close to 100%</li>\n<li>Reduce database load when a user performs an action multiple times</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.3.4</h3>\n<ul>\n<li>Updated JS goal to POST method. Requires csrf javascript.</li>\n<li>Random number on template tag goal image to prevent caching</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.3.3</h3>\n<ul>\n<li>Static media handled by nexus again</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.3.2</h3>\n<ul>\n<li>Fixed missing edit/delete images</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.3.1</h3>\n<ul>\n<li>Replaced django static template tags. Supports django 1.3 again!</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>0.3.0</h3>\n<ul>\n<li>Added django permission support.</li>\n<li>Started using django static instead of nexus:media. (django 1.4 only)</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3159520, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "db803e2bd7f4bed5c3e9725389812bac", "sha256": "605dcffefbc82ef439a02fdb449914eb7890d6f8342027617757313ea0226b4c"}, "downloads": -1, "filename": "django-experiments-hw-1.2.0.tar.gz", "has_sig": false, "md5_digest": "db803e2bd7f4bed5c3e9725389812bac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43396, "upload_time": "2017-09-08T15:29:46", "upload_time_iso_8601": "2017-09-08T15:29:46.912558Z", "url": "https://files.pythonhosted.org/packages/00/ee/6c1b5e3d66a4544c29b70aa48934f8f505c846c1a618681ef77fdbaa2e10/django-experiments-hw-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db803e2bd7f4bed5c3e9725389812bac", "sha256": "605dcffefbc82ef439a02fdb449914eb7890d6f8342027617757313ea0226b4c"}, "downloads": -1, "filename": "django-experiments-hw-1.2.0.tar.gz", "has_sig": false, "md5_digest": "db803e2bd7f4bed5c3e9725389812bac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43396, "upload_time": "2017-09-08T15:29:46", "upload_time_iso_8601": "2017-09-08T15:29:46.912558Z", "url": "https://files.pythonhosted.org/packages/00/ee/6c1b5e3d66a4544c29b70aa48934f8f505c846c1a618681ef77fdbaa2e10/django-experiments-hw-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:16 2020"}