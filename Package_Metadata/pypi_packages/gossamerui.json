{"info": {"author": "Jack Lutz", "author_email": "uijllji@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "Gossamer\n        ========\n        \n        Gossamer watches you browse a website and record screenshots of your UI,\n        then recreates your browsing session and passes or fails tests depending\n        on whether the UI has changed. It's a way of automating in-browser\n        visual regression testing, using Gossamer to automate Selenium\n        WebDriver, expose test statuses of pass/fail/error, and provide visual\n        diffs of failing tests. You needn't write Selenium tests, or make and\n        keep in sync static pages for testing UI: this tool will test full\n        webpages run on a development or testing webserver. Gossamer can be\n        integrated into your continuous integration either via the command-line\n        interface, or, if you're testing a Python application, via Python\n        unittest integration.\n        \n        Usage\n        -----\n        \n        Gossamer is a command-line application, called with ``gossamer``. You\n        create tests you wish to record in a text Gossamerfile. For each test, a\n        WebDriver window is opened and you interact with the browser as a normal\n        user, going back to the command line when you wish to take a screenshot\n        and pressing enter. Your screenshots, and a JSON record of your test, is\n        written to a data directory. Playback is done by reading this directory,\n        and comparing against 'good' screenshots. Gossamer assumes that Selenium\n        Server is already running.\n        \n        To start, create a file ``Gossamerfile`` and specify a name and URL to\n        visit for every test.\n        \n        ::\n        \n            [example]\n            url=http://www.example.com\n        \n        You can also add in additional settings:\n        \n        ::\n        \n            [example]\n            url=http://www.example.com\n            desc=Example.com hasn't changed\n            screensize=800x1000\n            browser=chrome\n            expect_redirect=false\n        \n        By default, Gossamer looks for a file called ``Gossamerfile`` in the\n        current directory, and stores data in ``./gossamer`` with one directory\n        per test. Each test directory contains a ``record.json`` containing the\n        data to reproduce the test, as well as good screenshots, and in a\n        sub-directory ``last``, the last test run's (possibly failing)\n        screenshots.\n        \n        You can run your tests with:\n        \n        ::\n        \n            gossamer --file Gossamerfile --data <data_dir> --record --save-diff\n        \n        If you wish to run only a subset of tests in that file, specify those\n        tests' names as positional arguments.\n        \n        When you browse, wait for requests to finish and rendering to be\n        complete before moving on to another action. If you navigate to a new\n        page, you will need to take a screenshot before new events are observed.\n        \n        If your UI has changed and you wish to update the screenshots to match,\n        then run with ``--rerecord``: the test will be rerun automatically, and\n        new PNGs will be saved. To playback the tests, simply call without an\n        ``-r/-rr`` flag.\n        \n        If you're running Python tests, you can integrate your Gossamer tests\n        like so:\n        \n        ::\n        \n            # myapp/test.py\n            from gossamer import run_gossamerfile\n            run_gossamerfile(locals(), <filename>, <data_dir>)\n        \n        This mutates your module's locals to include a ``unittest.TestCase``\n        instance for every test in the given Gossamerfile(s). Your test runner\n        will then detect and run them. You will, however, need to ensure that\n        your Selenium server and test webserver are up when your tests are run.\n        \n        Installation\n        ------------\n        \n        Your testing machine will need\n        `Pillow's <https://github.com/python-imaging/Pillow>`__ system-level\n        dependencies for PNG support. Gossamer can then be installed from PyPi\n        with ``pip install gossamerui``.\n        \n        On that machine or another accessible to it you will need `Selenium\n        Server <http://docs.seleniumhq.org/download/>`__ installed and running.\n        Note that Selenium Server comes with Firefox by default, needing an\n        additional system package for Chrome, and for Internet Explorer an\n        IE-specific standalone version of Selenium Server.\n        \n        You'll also need your 'target' webserver running on any machine.\n        \n        Authors\n        -------\n        \n        See the file ``AUTHORS``. Based on Facebook's\n        `Huxley <https://github.com/facebook/huxley>`__, and rewritten.\n        \n        License\n        -------\n        \n        Apache 2.0\n        \n        Known Issues\n        ------------\n        \n        -  Scrolling is unreliable.\n        -  Opening a slow iframe will likely timeout on playback.\n        -  Internet Explorer < 11 (which is all Selenium supports) shouldn't\n           work at the moment because we use MutationObservers, but an older way\n           of observing changes can be added for IE<11 (see\n           ``js.pageChangingObserver``).\n        \n        Issues\n        ------\n        \n        Please create issues and pull requests at the `GitHub\n        repository <https://github.com/ijl/gossamer>`__.\n        \n        Contributing\n        ------------\n        \n        -  Once you have the repository, setup using ``make develop``.\n        -  Please add tests and use the included .pylintrc; you can run\n           ``make test`` and ``make lint``.\n        -  If any breaking changes are made to data structures, increment\n           ``constant.DATA_VERSION`` and modify ``util.import_recorded_run`` to\n           handle both new and old data.\n        -  Feel free to contribute any functionality you want.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/ijl/gossamer/archive/0.9.5.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ijl/gossamer", "keywords": "selenium webdriver testing regression ui automated visual diff screenshot huxley", "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "gossamerui", "package_url": "https://pypi.org/project/gossamerui/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gossamerui/", "project_urls": {"Download": "https://github.com/ijl/gossamer/archive/0.9.5.tar.gz", "Homepage": "https://github.com/ijl/gossamer"}, "release_url": "https://pypi.org/project/gossamerui/0.9.5/", "requires_dist": null, "requires_python": null, "summary": "Website user interface regression testing", "version": "0.9.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            Gossamer<br>        ========<br>        <br>        Gossamer watches you browse a website and record screenshots of your UI,<br>        then recreates your browsing session and passes or fails tests depending<br>        on whether the UI has changed. It's a way of automating in-browser<br>        visual regression testing, using Gossamer to automate Selenium<br>        WebDriver, expose test statuses of pass/fail/error, and provide visual<br>        diffs of failing tests. You needn't write Selenium tests, or make and<br>        keep in sync static pages for testing UI: this tool will test full<br>        webpages run on a development or testing webserver. Gossamer can be<br>        integrated into your continuous integration either via the command-line<br>        interface, or, if you're testing a Python application, via Python<br>        unittest integration.<br>        <br>        Usage<br>        -----<br>        <br>        Gossamer is a command-line application, called with ``gossamer``. You<br>        create tests you wish to record in a text Gossamerfile. For each test, a<br>        WebDriver window is opened and you interact with the browser as a normal<br>        user, going back to the command line when you wish to take a screenshot<br>        and pressing enter. Your screenshots, and a JSON record of your test, is<br>        written to a data directory. Playback is done by reading this directory,<br>        and comparing against 'good' screenshots. Gossamer assumes that Selenium<br>        Server is already running.<br>        <br>        To start, create a file ``Gossamerfile`` and specify a name and URL to<br>        visit for every test.<br>        <br>        ::<br>        <br>            [example]<br>            url=http://www.example.com<br>        <br>        You can also add in additional settings:<br>        <br>        ::<br>        <br>            [example]<br>            url=http://www.example.com<br>            desc=Example.com hasn't changed<br>            screensize=800x1000<br>            browser=chrome<br>            expect_redirect=false<br>        <br>        By default, Gossamer looks for a file called ``Gossamerfile`` in the<br>        current directory, and stores data in ``./gossamer`` with one directory<br>        per test. Each test directory contains a ``record.json`` containing the<br>        data to reproduce the test, as well as good screenshots, and in a<br>        sub-directory ``last``, the last test run's (possibly failing)<br>        screenshots.<br>        <br>        You can run your tests with:<br>        <br>        ::<br>        <br>            gossamer --file Gossamerfile --data &lt;data_dir&gt; --record --save-diff<br>        <br>        If you wish to run only a subset of tests in that file, specify those<br>        tests' names as positional arguments.<br>        <br>        When you browse, wait for requests to finish and rendering to be<br>        complete before moving on to another action. If you navigate to a new<br>        page, you will need to take a screenshot before new events are observed.<br>        <br>        If your UI has changed and you wish to update the screenshots to match,<br>        then run with ``--rerecord``: the test will be rerun automatically, and<br>        new PNGs will be saved. To playback the tests, simply call without an<br>        ``-r/-rr`` flag.<br>        <br>        If you're running Python tests, you can integrate your Gossamer tests<br>        like so:<br>        <br>        ::<br>        <br>            # myapp/test.py<br>            from gossamer import run_gossamerfile<br>            run_gossamerfile(locals(), &lt;filename&gt;, &lt;data_dir&gt;)<br>        <br>        This mutates your module's locals to include a ``unittest.TestCase``<br>        instance for every test in the given Gossamerfile(s). Your test runner<br>        will then detect and run them. You will, however, need to ensure that<br>        your Selenium server and test webserver are up when your tests are run.<br>        <br>        Installation<br>        ------------<br>        <br>        Your testing machine will need<br>        `Pillow's &lt;https://github.com/python-imaging/Pillow&gt;`__ system-level<br>        dependencies for PNG support. Gossamer can then be installed from PyPi<br>        with ``pip install gossamerui``.<br>        <br>        On that machine or another accessible to it you will need `Selenium<br>        Server &lt;http://docs.seleniumhq.org/download/&gt;`__ installed and running.<br>        Note that Selenium Server comes with Firefox by default, needing an<br>        additional system package for Chrome, and for Internet Explorer an<br>        IE-specific standalone version of Selenium Server.<br>        <br>        You'll also need your 'target' webserver running on any machine.<br>        <br>        Authors<br>        -------<br>        <br>        See the file ``AUTHORS``. Based on Facebook's<br>        `Huxley &lt;https://github.com/facebook/huxley&gt;`__, and rewritten.<br>        <br>        License<br>        -------<br>        <br>        Apache 2.0<br>        <br>        Known Issues<br>        ------------<br>        <br>        -  Scrolling is unreliable.<br>        -  Opening a slow iframe will likely timeout on playback.<br>        -  Internet Explorer &lt; 11 (which is all Selenium supports) shouldn't<br>           work at the moment because we use MutationObservers, but an older way<br>           of observing changes can be added for IE&lt;11 (see<br>           ``js.pageChangingObserver``).<br>        <br>        Issues<br>        ------<br>        <br>        Please create issues and pull requests at the `GitHub<br>        repository &lt;https://github.com/ijl/gossamer&gt;`__.<br>        <br>        Contributing<br>        ------------<br>        <br>        -  Once you have the repository, setup using ``make develop``.<br>        -  Please add tests and use the included .pylintrc; you can run<br>           ``make test`` and ``make lint``.<br>        -  If any breaking changes are made to data structures, increment<br>           ``constant.DATA_VERSION`` and modify ``util.import_recorded_run`` to<br>           handle both new and old data.<br>        -  Feel free to contribute any functionality you want.\n          </div>"}, "last_serial": 887810, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "4a7e3ac548ff8b943f32cc7ab806a906", "sha256": "74b3c1fa9abc94f2ff28b3f1bd0e60c1c8f622c815d2d0ed3213fe0d2a975a6d"}, "downloads": -1, "filename": "gossamerui-0.9.0.tar.gz", "has_sig": false, "md5_digest": "4a7e3ac548ff8b943f32cc7ab806a906", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17172, "upload_time": "2013-09-20T19:10:58", "upload_time_iso_8601": "2013-09-20T19:10:58.803940Z", "url": "https://files.pythonhosted.org/packages/3a/de/351b560081f5a52096058f58ef75355b77f6ff69c9064f132b74b45dfc5b/gossamerui-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "a1c9b91520417d703682f1a6e02daca6", "sha256": "31ed3f51b98df54f2a45db9df3e5d79d1668849593d14442a19afb8307978665"}, "downloads": -1, "filename": "gossamerui-0.9.1.tar.gz", "has_sig": false, "md5_digest": "a1c9b91520417d703682f1a6e02daca6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21984, "upload_time": "2013-09-20T21:09:51", "upload_time_iso_8601": "2013-09-20T21:09:51.889301Z", "url": "https://files.pythonhosted.org/packages/2b/5a/a7251a006aaebb8f7dc253f56794b6c817843cfcc582da0b377cc993cc7b/gossamerui-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "60c18d9525d32efcd5ae0f97c9ff6296", "sha256": "2d287212cb7f56f75931de409cff1e8e9da8852470850a9b2979a0648810f8e0"}, "downloads": -1, "filename": "gossamerui-0.9.2.tar.gz", "has_sig": false, "md5_digest": "60c18d9525d32efcd5ae0f97c9ff6296", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23895, "upload_time": "2013-09-24T22:27:21", "upload_time_iso_8601": "2013-09-24T22:27:21.105848Z", "url": "https://files.pythonhosted.org/packages/4d/1f/c24c78f2f1310077259d6ed31eb664f797bc999dc502a3215beb648ae458/gossamerui-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "595e8e560ca2b0a3c6ef2690b1402025", "sha256": "539b23db4b81b64b8bc9286e8e09ff7f65ec5911ec62bdb73c088c331f11b55e"}, "downloads": -1, "filename": "gossamerui-0.9.3.tar.gz", "has_sig": false, "md5_digest": "595e8e560ca2b0a3c6ef2690b1402025", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20528, "upload_time": "2013-09-25T22:01:16", "upload_time_iso_8601": "2013-09-25T22:01:16.045605Z", "url": "https://files.pythonhosted.org/packages/69/7a/b21dd902ce7ca86fe7bde07dca84c924323e737777fb644058bdd0b912da/gossamerui-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "6f830a9cc6ba2c34cc3ece8e592f671c", "sha256": "3d4e1784c4ab09c5460ffbf6126d6e383161ee050c461182b09e1bf839e9480a"}, "downloads": -1, "filename": "gossamerui-0.9.4.tar.gz", "has_sig": false, "md5_digest": "6f830a9cc6ba2c34cc3ece8e592f671c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22121, "upload_time": "2013-10-01T22:02:03", "upload_time_iso_8601": "2013-10-01T22:02:03.240824Z", "url": "https://files.pythonhosted.org/packages/b2/45/105b701efb3306cad262f9a951effd5a48c6b570a2a63707e6bafd665c6a/gossamerui-0.9.4.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "7d44a10c36966b243ddef1efd3ad9bb5", "sha256": "4239303f512004ded2eda923128cf40417d53154e64e123dc31e7a2452ec691d"}, "downloads": -1, "filename": "gossamerui-0.9.5.tar.gz", "has_sig": false, "md5_digest": "7d44a10c36966b243ddef1efd3ad9bb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21409, "upload_time": "2013-10-11T21:12:59", "upload_time_iso_8601": "2013-10-11T21:12:59.819731Z", "url": "https://files.pythonhosted.org/packages/8f/b2/1f56e87299e2ce772a3966372223dd93812e8de015219edecb85a577d190/gossamerui-0.9.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d44a10c36966b243ddef1efd3ad9bb5", "sha256": "4239303f512004ded2eda923128cf40417d53154e64e123dc31e7a2452ec691d"}, "downloads": -1, "filename": "gossamerui-0.9.5.tar.gz", "has_sig": false, "md5_digest": "7d44a10c36966b243ddef1efd3ad9bb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21409, "upload_time": "2013-10-11T21:12:59", "upload_time_iso_8601": "2013-10-11T21:12:59.819731Z", "url": "https://files.pythonhosted.org/packages/8f/b2/1f56e87299e2ce772a3966372223dd93812e8de015219edecb85a577d190/gossamerui-0.9.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:26 2020"}