{"info": {"author": "Stephan Houben", "author_email": "stephanh42@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "akitchensyncio\n==============\n\nUtility functions for asyncio which Stephan wished where in the stdlib\nbut aren't.\n\nRequires a Python version which supports the ``async`` syntax (Python\n3.5 or higher).\n\nInstallation\n============\n\nTo install akitchensyncio, simply:\n\n.. code:: bash\n\n    $ pip install akitchensyncio\n\nFunction ``wrap_future(f)``\n---------------------------\n\nTakes a callable ``f`` which returns an awaitable, and returns a\ncallable which wraps the awaitable in ``asyncio.ensure_future``.\n\nCan also be used as a decorator, especially with coroutine functions:\n\n.. code:: python\n\n    @wrap_future\n    async def foo(arg1, arg2):\n        ...\n\nThis is especially useful in combination with ``functools.lru_cache``.\nSuppose you have a coroutine function which does an asynchronous query,\nand you decide you want to introduce some caching. Just add two\ndecorators as follows.\n\n.. code:: python\n\n    @functools.lru_cache(100)\n    @wrap_future\n    async def do_some_query(arg1, arg2):\n        ...\n\nFunction ``transform_future(f, awaitable)``\n-------------------------------------------\n\nApply a function to the result of an awaitable, return a future which\ndelivers the result.\n\nAs an example, suppose you have a way to query addresses given names.\nThe API takes a bunch of names rather than a single one to reduce\noverhead. However, to your callers you would like to hand out futures\nrepresenting results for individual names.\n\nEssentially you want to turn a \"future resulting in a dict\" into a \"dict\ncontaining futures\". Kind of the opposite of ``async.gather``.\n\n.. code:: python\n\n    from operator import itemgetter\n\n    def query_addresses(names):\n       fut = do_bunched_address_query(names)\n       # fut is a single future which resolves\n       # into a dict mapping names to addresses.\n       return {name: transform_future(itemgetter(name), fut) for name in names}\n\nFunction ``iawait(awaitable)``\n------------------------------\n\n\"Interactive await\" -- Run default eventloop until awaitable has\ncompleted. Mainly useful for interactive experimentation.\n\nThen remove the \"i\" from ``iawait`` to get code which you can use in an\n``async def`` function.\n\nAn alternative is to put this in your ``~/.pythonrc.py``:\n\n.. code:: python\n\n    def iawait(x):\n        import asyncio\n        loop = asyncio.get_event_loop()\n        return loop.run_until_complete(x)\n\nThis will only import ``asyncio`` on first use of ``iawait``, so it\nwon't slow down your startup in general.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stephanh42/akitchensyncio", "keywords": "asyncio", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "akitchensyncio", "package_url": "https://pypi.org/project/akitchensyncio/", "platform": "", "project_url": "https://pypi.org/project/akitchensyncio/", "project_urls": {"Homepage": "https://github.com/stephanh42/akitchensyncio"}, "release_url": "https://pypi.org/project/akitchensyncio/0.1.1/", "requires_dist": null, "requires_python": "~=3.5", "summary": "Utility functions for asyncio which Stephan wished where in the stdlib but aren't.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"akitchensyncio\">\n<h2>akitchensyncio</h2>\n<p>Utility functions for asyncio which Stephan wished where in the stdlib\nbut aren\u2019t.</p>\n<p>Requires a Python version which supports the <tt>async</tt> syntax (Python\n3.5 or higher).</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install akitchensyncio, simply:</p>\n<pre>$ pip install akitchensyncio\n</pre>\n<div id=\"function-wrap-future-f\">\n<h3>Function <tt>wrap_future(f)</tt></h3>\n<p>Takes a callable <tt>f</tt> which returns an awaitable, and returns a\ncallable which wraps the awaitable in <tt>asyncio.ensure_future</tt>.</p>\n<p>Can also be used as a decorator, especially with coroutine functions:</p>\n<pre><span class=\"nd\">@wrap_future</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>This is especially useful in combination with <tt>functools.lru_cache</tt>.\nSuppose you have a coroutine function which does an asynchronous query,\nand you decide you want to introduce some caching. Just add two\ndecorators as follows.</p>\n<pre><span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">lru_cache</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"nd\">@wrap_future</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">do_some_query</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"function-transform-future-f-awaitable\">\n<h3>Function <tt>transform_future(f, awaitable)</tt></h3>\n<p>Apply a function to the result of an awaitable, return a future which\ndelivers the result.</p>\n<p>As an example, suppose you have a way to query addresses given names.\nThe API takes a bunch of names rather than a single one to reduce\noverhead. However, to your callers you would like to hand out futures\nrepresenting results for individual names.</p>\n<p>Essentially you want to turn a \u201cfuture resulting in a dict\u201d into a \u201cdict\ncontaining futures\u201d. Kind of the opposite of <tt>async.gather</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">itemgetter</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">query_addresses</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">):</span>\n   <span class=\"n\">fut</span> <span class=\"o\">=</span> <span class=\"n\">do_bunched_address_query</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span>\n   <span class=\"c1\"># fut is a single future which resolves</span>\n   <span class=\"c1\"># into a dict mapping names to addresses.</span>\n   <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">transform_future</span><span class=\"p\">(</span><span class=\"n\">itemgetter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">),</span> <span class=\"n\">fut</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"function-iawait-awaitable\">\n<h3>Function <tt>iawait(awaitable)</tt></h3>\n<p>\u201cInteractive await\u201d \u2013 Run default eventloop until awaitable has\ncompleted. Mainly useful for interactive experimentation.</p>\n<p>Then remove the \u201ci\u201d from <tt>iawait</tt> to get code which you can use in an\n<tt>async def</tt> function.</p>\n<p>An alternative is to put this in your <tt><span class=\"pre\">~/.pythonrc.py</span></tt>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">iawait</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p>This will only import <tt>asyncio</tt> on first use of <tt>iawait</tt>, so it\nwon\u2019t slow down your startup in general.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3196818, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9505168291191605e85a8dae8c673f86", "sha256": "5e803c73ecbb7c77a02cdca6a1adf186ac4692de702993f65254243c370e2b73"}, "downloads": -1, "filename": "akitchensyncio-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9505168291191605e85a8dae8c673f86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 3583, "upload_time": "2017-09-23T07:37:00", "upload_time_iso_8601": "2017-09-23T07:37:00.790270Z", "url": "https://files.pythonhosted.org/packages/03/23/3ac87c0537499641a51bbca888d907bd8fbe745ab624e7c1376e4fe72487/akitchensyncio-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd2f8ca0ff3d15656a794ac533a8ab72", "sha256": "204e198b05618bdae3e383aa290263355e74d376e408073896b2fcbf63231fff"}, "downloads": -1, "filename": "akitchensyncio-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bd2f8ca0ff3d15656a794ac533a8ab72", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 2991, "upload_time": "2017-09-23T07:37:02", "upload_time_iso_8601": "2017-09-23T07:37:02.790676Z", "url": "https://files.pythonhosted.org/packages/16/3b/8173abeb45cc4672f428d7d3447b3527a2306c901e868a8cf2fe12f8f25a/akitchensyncio-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a5db6e1288f21f8e89e318a867d798f3", "sha256": "58fb85a72d44f5e34d0ed11d13fa5ba5ce4388c084988f0c09192bbc715d1be5"}, "downloads": -1, "filename": "akitchensyncio-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a5db6e1288f21f8e89e318a867d798f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 5048, "upload_time": "2017-09-23T10:11:10", "upload_time_iso_8601": "2017-09-23T10:11:10.569597Z", "url": "https://files.pythonhosted.org/packages/1d/1b/ef17daf79bc8162a1dd3259988abda8af8ef7b9650a06cb1cb9bc923bdaa/akitchensyncio-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cd26d83ac2fe25395b6e1a15b61e246", "sha256": "e416f5e36d27f5df8c52726b0691b55455dbbdbe97369b586a506cad25cf6eb4"}, "downloads": -1, "filename": "akitchensyncio-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5cd26d83ac2fe25395b6e1a15b61e246", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 5112, "upload_time": "2017-09-23T10:11:11", "upload_time_iso_8601": "2017-09-23T10:11:11.648125Z", "url": "https://files.pythonhosted.org/packages/c9/51/f971b7b4a0d2b60dbcfd9f9c443b93d391dafb5b818f802b424fab8bfed5/akitchensyncio-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a5db6e1288f21f8e89e318a867d798f3", "sha256": "58fb85a72d44f5e34d0ed11d13fa5ba5ce4388c084988f0c09192bbc715d1be5"}, "downloads": -1, "filename": "akitchensyncio-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a5db6e1288f21f8e89e318a867d798f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 5048, "upload_time": "2017-09-23T10:11:10", "upload_time_iso_8601": "2017-09-23T10:11:10.569597Z", "url": "https://files.pythonhosted.org/packages/1d/1b/ef17daf79bc8162a1dd3259988abda8af8ef7b9650a06cb1cb9bc923bdaa/akitchensyncio-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cd26d83ac2fe25395b6e1a15b61e246", "sha256": "e416f5e36d27f5df8c52726b0691b55455dbbdbe97369b586a506cad25cf6eb4"}, "downloads": -1, "filename": "akitchensyncio-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5cd26d83ac2fe25395b6e1a15b61e246", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 5112, "upload_time": "2017-09-23T10:11:11", "upload_time_iso_8601": "2017-09-23T10:11:11.648125Z", "url": "https://files.pythonhosted.org/packages/c9/51/f971b7b4a0d2b60dbcfd9f9c443b93d391dafb5b818f802b424fab8bfed5/akitchensyncio-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:10 2020"}