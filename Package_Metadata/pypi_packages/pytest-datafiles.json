{"info": {"author": "Omar Kohl", "author_email": "omarkohl@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Testing"], "description": "================\npytest-datafiles\n================\n\n.. image:: https://img.shields.io/travis/omarkohl/pytest-datafiles.svg\n        :target: https://travis-ci.org/omarkohl/pytest-datafiles\n\n\n.. image:: https://coveralls.io/repos/omarkohl/pytest-datafiles/badge.svg?branch=master&service=github\n  :target: https://coveralls.io/github/omarkohl/pytest-datafiles?branch=master\n\n\n.. image:: https://img.shields.io/pypi/v/pytest-datafiles.svg\n\t:target: https://pypi.python.org/pypi/pytest-datafiles\n\n\n.. image:: https://codeclimate.com/github/omarkohl/pytest-datafiles/badges/gpa.svg\n   :target: https://codeclimate.com/github/omarkohl/pytest-datafiles\n   :alt: Code Climate\n\n\n`pytest`_ plugin to create a `tmpdir`_ containing a preconfigured set of\nfiles and/or directories.\n\n**Note about maintenance:** This project is maintained and bug reports or pull\nrequests will be addressed. There is little activity because it simply works and\nno changes are required.\n\nFeatures\n--------\n\nThis plugin allows you to specify one or several files/directories that are\ncopied to a temporary directory (`tmpdir`_) before the execution of the test.\nThis means the original files are not modified and every test runs on its own\nversion of the same files.\n\nFiles/directories can be specified either as *strings* or as *py.path* objects.\n\nTo take advantage of the *datafiles* fixture in a test function, add\n*datafiles* as one of the test function parameters (per usual with `pytest`_\nfixtures) and decorate the test function with *@pytest.mark.datafiles(file1,\nfile2, dir1, dir2, ...)*. See the examples below.\n\nThe *datafiles* variable in your test function is a py.path object\n(`tmpdir`_) where the copied files are located. Under Linux systems this\nwill most likely be some subdirectory of */tmp/*.\n\n\nOptions\n-------\n\nThe following options can be specified as keyword arguments (kwargs) to the\n*@pytest.mark.datafiles* decorator function:\n\n- **keep_top_dir:** For all parameters that represent directories, keep that\n  directory instead of only (recursively) copying its content. Possible values\n  are *True* or *False*. *False* is the default value.\n- **on_duplicate:** Specify the action to take when duplicate files/directories\n  are found. Possible values are: *exception*, *ignore* and *replace*. The\n  default value is *exception*.\n\n  - *exception:* An exception is raised instead of copying the duplicate\n    file/directory.\n  - *ignore:* The second (or subsequent) files/directories with the same name\n    as the first one are simply ignored (i.e., the first file/directory with the\n    duplicate name is kept).\n  - *replace:* The second (or subsequent) files/directories with the same name\n    replace the previous ones (i.e., the last file/directory with the duplicate\n    name is kept).\n\nSee below for some *examples*.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install pytest-datafiles\n\n\nUsage\n-----\n\nExample 1\n~~~~~~~~~\n\nOne possible use case is when you are running tests on very big files that are\nnot included or packaged with your tests. For example, your test files are\nlarge video files stored under */opt/big_files/* . You don't want your tests modifying\nthe original files, but the files are required by the tests. You can reference these\ndata files in your test method as follows:\n\n.. code-block:: python\n\n    import os\n    import pytest\n\n    @pytest.mark.datafiles('/opt/big_files/film1.mp4')\n    def test_fast_forward(datafiles):\n        path = str(datafiles)  # Convert from py.path object to path (str)\n        assert len(os.listdir(path)) == 1\n        assert os.path.isfile(os.path.join(path, 'film1.mp4'))\n        #assert some_operation(os.path.join(path, 'film1.mp4')) == expected_result\n\n        # Using py.path syntax\n        assert len(datafiles.listdir()) == 1\n        assert (datafiles / 'film1.mp4').check(file=1)\n\nExample 2\n~~~~~~~~~\n\nNow for another use case: let's say in the directory where your tests are located, you\nplace a directory named *test_files*. Here you have a lot of images you want to run tests\non. By using this plugin, you make sure the original files under *test_files* are not\nmodified by every test.\n\n.. code-block:: python\n\n    import os\n    import pytest\n\n    FIXTURE_DIR = os.path.join(\n        os.path.dirname(os.path.realpath(__file__)),\n        'test_files',\n        )\n\n    @pytest.mark.datafiles(\n        os.path.join(FIXTURE_DIR, 'img1.jpg'),\n        os.path.join(FIXTURE_DIR, 'img2.jpg'),\n        os.path.join(FIXTURE_DIR, 'img3.jpg'),\n        )\n    def test_find_borders(datafiles):\n        for img in datafiles.listdir():\n            print(img)\n            #assert process(img) == some_expected_value\n\n    @pytest.mark.datafiles(\n        os.path.join(FIXTURE_DIR, 'img4.jpg'),\n        os.path.join(FIXTURE_DIR, 'img5.jpg'),\n        )\n    def test_brightness(datafiles):\n        for img in datafiles.listdir():\n            print(img)\n            #assert process(img) == some_expected_value\n\nExample 3\n~~~~~~~~~\n\nIf all (or many) of your tests rely on the same files it can be easier to\ndefine one decorator beforehand and apply it to every test like this example:\n\n.. code-block:: python\n\n    import os\n    import pytest\n\n    FIXTURE_DIR = os.path.join(\n        os.path.dirname(os.path.realpath(__file__)),\n        'test_files',\n        )\n\n    ALL_IMGS = pytest.mark.datafiles(\n        os.path.join(FIXTURE_DIR, 'img1.jpg'),\n        os.path.join(FIXTURE_DIR, 'img2.jpg'),\n        os.path.join(FIXTURE_DIR, 'img3.jpg'),\n        os.path.join(FIXTURE_DIR, 'img4.jpg'),\n        os.path.join(FIXTURE_DIR, 'img5.jpg'),\n        os.path.join(FIXTURE_DIR, 'img6.jpg'),\n        os.path.join(FIXTURE_DIR, 'img7.jpg'),\n        os.path.join(FIXTURE_DIR, 'img8.jpg'),\n        )\n\n    @ALL_IMGS\n    def test_something1(datafiles):\n        for img in datafiles.listdir():\n            print(img)\n            #assert process(img) == some_expected_value\n\n    @ALL_IMGS\n    def test_something2(datafiles):\n        for img in datafiles.listdir():\n            print(img)\n            #assert process(img) == some_expected_value\n\nExample 4\n~~~~~~~~~\n\nImagine you have 3 directories (*dir1*, *dir2*, *dir3*) each containing the files\n(*fileA* and *fileB*).\n\nThis example clarifies the options **on_duplicate** and **keep_top_dir**.\n\n.. code-block:: python\n\n    import os\n    import pytest\n\n    FIXTURE_DIR = os.path.join(\n        os.path.dirname(os.path.realpath(__file__)),\n        '_fixture_files',\n        )\n\n    @pytest.mark.datafiles(\n        os.path.join(FIXTURE_DIR, 'dir1'),\n        os.path.join(FIXTURE_DIR, 'dir2'),\n        os.path.join(FIXTURE_DIR, 'dir3'),\n        on_duplicate='ignore',\n        )\n    def test_dir_ignore(datafiles):\n        # datafiles.listdir() will list fileA and fileB originally from dir1\n        pass\n\n    @pytest.mark.datafiles(\n        os.path.join(FIXTURE_DIR, 'dir1'),\n        os.path.join(FIXTURE_DIR, 'dir2'),\n        os.path.join(FIXTURE_DIR, 'dir3'),\n        on_duplicate='replace',\n        )\n    def test_dir_replace(datafiles):\n        # datafiles.listdir() will list fileA and fileB originally from dir3\n        pass\n\n    @pytest.mark.datafiles(\n        os.path.join(FIXTURE_DIR, 'dir1'),\n        os.path.join(FIXTURE_DIR, 'dir2'),\n        os.path.join(FIXTURE_DIR, 'dir3'),\n        # on_duplicate='exception' is the default and does not need to be\n        # specified\n        )\n    def test_dir_exception(datafiles):\n        # An exception will be raised because of duplicate filename fileA\n        pass\n\n    @pytest.mark.datafiles(\n        os.path.join(FIXTURE_DIR, 'dir1'),\n        os.path.join(FIXTURE_DIR, 'dir2'),\n        os.path.join(FIXTURE_DIR, 'dir3'),\n        keep_top_dir=True,\n        )\n    def test_dir_keep_top_dir(datafiles):\n        # datafiles.listdir() will list dir1, dir2 and dir3 (each containing\n        # fileA and fileB)\n        pass\n\nExample 5\n~~~~~~~~~\n\nYou can also use a py.path object instead of str paths.\n\n.. code-block:: python\n\n    import os\n    import py\n    import pytest\n\n    _dir = os.path.dirname(os.path.realpath(__file__))\n    FIXTURE_DIR = py.path.local(_dir) / 'test_files'\n\n    @pytest.mark.datafiles(\n        FIXTURE_DIR / 'img1.jpg',\n        FIXTURE_DIR / 'img2.jpg',\n        FIXTURE_DIR / 'img3.jpg',\n        )\n    def test_fast_forward(datafiles):\n        assert len(datafiles.listdir()) == 3\n\n\nContributing\n------------\n\nContributions are very welcome. Tests can be run with `tox`_. Please\nensure the coverage stays at least the same before you submit a pull\nrequest.\n\nTo create and upload a new package first update the version number and then:\n\n.. code-block:: bash\n\n    pip3 install --user -U twine\n    make clean\n    make dist\n    twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n    # Verify the package is usable\n    virtualenv -p python3 test-venv\n    test-venv/bin/pip install pytest\n    test-venv/bin/pip install --index-url https://test.pypi.org/simple/ pytest-datafiles\n    # Create some test_example.py (e.g. with one of the examples above)\n    test-venv/bin/pytest test_example.py\n    # Set the git tag for final release\n    git tag -a 2.0\n    git push --tags\n    # Upload the package for final release\n    twine upload dist/*\n\nOf course this will only work if you have the necessary PyPI credentials for\nthis package.\n\n\nLicense\n-------\n\nDistributed under the terms of the `MIT license`_, \"pytest-datafiles\" is\nfree and open source software.\n\n\nIssues\n------\n\nIf you encounter any problems, please `file an issue`_ along with a\ndetailed description.\n\n\nAcknowledgements\n----------------\n\nThanks to `@flub`_ for the idea to use `pytest`_ marks to solve the\nproblem this plugin is trying to solve.\n\nSome ideas to improve this project were taken from the `Cookiecutter`_\ntemplates `cookiecutter-pypackage`_ and `cookiecutter-pytest-plugin`_.\n\n\n.. _`pytest`: https://pytest.org/latest/contents.html\n.. _`tmpdir`: https://pytest.org/latest/tmpdir.html\n.. _`tox`: https://tox.readthedocs.org/en/latest/\n.. _`MIT License`: http://opensource.org/licenses/MIT\n.. _`file an issue`: https://github.com/omarkohl/pytest-datafiles/issues\n.. _`@flub`: https://github.com/flub\n.. _`Cookiecutter`: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _`cookiecutter-pytest-plugin`: https://github.com/pytest-dev/cookiecutter-pytest-plugin\n\n\n.. :changelog:\n\nChange Log\n----------\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to `Semantic Versioning`_. The change log is\nformatted as suggested by `Keep a CHANGELOG`_.\n\n`Unreleased`_\n~~~~~~~~~~~~~\n\nAdded\nChanged\nDeprecated\nRemoved\nFixed\nSecurity\n\n`2.0`_\n~~~~~~\n\nAdded\n\n* Explicit support for Python 3.6 (no changes were necessary)\n\nRemoved\n\n* BREAKING CHANGE: Python 2.6 is no longer supported (because we rely on pytest\n  >= 3.6)\n\nFixed\n\n* Use the new pytest mark API to fix MarkInfo warnings (`#2`_)\n* BREAKING CHANGE: Symlinks are now copied as links instead of copying the\n  target they point to (`#1`_)\n\n`1.0`_\n~~~~~~\n\nChanged\n\n* Bump version to 1.0 to signal that the plugin is stable\n* Minor refactorization without repercussions for users\n* Only use regular 'paths' (str) instead of py.path objects in documentation\n  examples because they were confusing to some people (unfamiliar with py.path)\n\n`0.2`_\n~~~~~~\n\nAdded\n\n* Support for directories\n* Option 'keep_top_dir' to keep the top level directory (instead of only\n  copying its content). Possible values are: True, False (default)\n* Option 'on_duplicate' to specify what to do when duplicate files or\n  directories are encountered. Possible values are: 'exception' (default),\n  'ignore', 'overwrite'\n\n`0.1`_\n~~~~~~\n\nAdded\n\n* Specify one or multiple files to be copied by decorating the test\n  function\n\n\n.. _`Unreleased`: https://github.com/omarkohl/pytest-datafiles/compare/2.0...master\n.. _`2.0`: https://github.com/omarkohl/pytest-datafiles/compare/1.0...2.0\n.. _`1.0`: https://github.com/omarkohl/pytest-datafiles/compare/0.2...1.0\n.. _`0.2`: https://github.com/omarkohl/pytest-datafiles/compare/0.1...0.2\n.. _`0.1`: https://github.com/omarkohl/pytest-datafiles/compare/3c31b2c...0.1\n\n\n.. _`#1`: https://github.com/omarkohl/pytest-datafiles/issues/1\n.. _`#2`: https://github.com/omarkohl/pytest-datafiles/issues/2\n\n\n.. _`Semantic Versioning`: http://semver.org/\n.. _`Keep a CHANGELOG`: http://keepachangelog.com/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/omarkohl/pytest-datafiles", "keywords": "pytest datafiles tmpdir", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytest-datafiles", "package_url": "https://pypi.org/project/pytest-datafiles/", "platform": "", "project_url": "https://pypi.org/project/pytest-datafiles/", "project_urls": {"Homepage": "https://github.com/omarkohl/pytest-datafiles"}, "release_url": "https://pypi.org/project/pytest-datafiles/2.0/", "requires_dist": ["py", "pytest (>=3.6)"], "requires_python": "", "summary": "py.test plugin to create a 'tmpdir' containing predefined files/directories.", "version": "2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/omarkohl/pytest-datafiles\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/omarkohl/pytest-datafiles.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d8e514e0404d4447196beccb171503710bacea3/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6f6d61726b6f686c2f7079746573742d6461746166696c65732e737667\"></a>\n<a href=\"https://coveralls.io/github/omarkohl/pytest-datafiles?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/omarkohl/pytest-datafiles/badge.svg?branch=master&amp;service=github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f345411cb98b09a57eb7fc4d42b493c432f9544b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6f6d61726b6f686c2f7079746573742d6461746166696c65732f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<a href=\"https://pypi.python.org/pypi/pytest-datafiles\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pytest-datafiles.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a54129f3d82ee022904ce702b8fa2760258e05aa/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d6461746166696c65732e737667\"></a>\n<a href=\"https://codeclimate.com/github/omarkohl/pytest-datafiles\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e31775cb4bd31893251e958395e67852a8a9aa40/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6f6d61726b6f686c2f7079746573742d6461746166696c65732f6261646765732f6770612e737667\"></a>\n<p><a href=\"https://pytest.org/latest/contents.html\" rel=\"nofollow\">pytest</a> plugin to create a <a href=\"https://pytest.org/latest/tmpdir.html\" rel=\"nofollow\">tmpdir</a> containing a preconfigured set of\nfiles and/or directories.</p>\n<p><strong>Note about maintenance:</strong> This project is maintained and bug reports or pull\nrequests will be addressed. There is little activity because it simply works and\nno changes are required.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<p>This plugin allows you to specify one or several files/directories that are\ncopied to a temporary directory (<a href=\"https://pytest.org/latest/tmpdir.html\" rel=\"nofollow\">tmpdir</a>) before the execution of the test.\nThis means the original files are not modified and every test runs on its own\nversion of the same files.</p>\n<p>Files/directories can be specified either as <em>strings</em> or as <em>py.path</em> objects.</p>\n<p>To take advantage of the <em>datafiles</em> fixture in a test function, add\n<em>datafiles</em> as one of the test function parameters (per usual with <a href=\"https://pytest.org/latest/contents.html\" rel=\"nofollow\">pytest</a>\nfixtures) and decorate the test function with <em>@pytest.mark.datafiles(file1,\nfile2, dir1, dir2, \u2026)</em>. See the examples below.</p>\n<p>The <em>datafiles</em> variable in your test function is a py.path object\n(<a href=\"https://pytest.org/latest/tmpdir.html\" rel=\"nofollow\">tmpdir</a>) where the copied files are located. Under Linux systems this\nwill most likely be some subdirectory of <em>/tmp/</em>.</p>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<p>The following options can be specified as keyword arguments (kwargs) to the\n<em>@pytest.mark.datafiles</em> decorator function:</p>\n<ul>\n<li><strong>keep_top_dir:</strong> For all parameters that represent directories, keep that\ndirectory instead of only (recursively) copying its content. Possible values\nare <em>True</em> or <em>False</em>. <em>False</em> is the default value.</li>\n<li><strong>on_duplicate:</strong> Specify the action to take when duplicate files/directories\nare found. Possible values are: <em>exception</em>, <em>ignore</em> and <em>replace</em>. The\ndefault value is <em>exception</em>.<ul>\n<li><em>exception:</em> An exception is raised instead of copying the duplicate\nfile/directory.</li>\n<li><em>ignore:</em> The second (or subsequent) files/directories with the same name\nas the first one are simply ignored (i.e., the first file/directory with the\nduplicate name is kept).</li>\n<li><em>replace:</em> The second (or subsequent) files/directories with the same name\nreplace the previous ones (i.e., the last file/directory with the duplicate\nname is kept).</li>\n</ul>\n</li>\n</ul>\n<p>See below for some <em>examples</em>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install pytest-datafiles\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"example-1\">\n<h3>Example 1</h3>\n<p>One possible use case is when you are running tests on very big files that are\nnot included or packaged with your tests. For example, your test files are\nlarge video files stored under <em>/opt/big_files/</em> . You don\u2019t want your tests modifying\nthe original files, but the files are required by the tests. You can reference these\ndata files in your test method as follows:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">datafiles</span><span class=\"p\">(</span><span class=\"s1\">'/opt/big_files/film1.mp4'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_fast_forward</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">):</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">)</span>  <span class=\"c1\"># Convert from py.path object to path (str)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s1\">'film1.mp4'</span><span class=\"p\">))</span>\n    <span class=\"c1\">#assert some_operation(os.path.join(path, 'film1.mp4')) == expected_result</span>\n\n    <span class=\"c1\"># Using py.path syntax</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"n\">datafiles</span> <span class=\"o\">/</span> <span class=\"s1\">'film1.mp4'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"example-2\">\n<h3>Example 2</h3>\n<p>Now for another use case: let\u2019s say in the directory where your tests are located, you\nplace a directory named <em>test_files</em>. Here you have a lot of images you want to run tests\non. By using this plugin, you make sure the original files under <em>test_files</em> are not\nmodified by every test.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"n\">FIXTURE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)),</span>\n    <span class=\"s1\">'test_files'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">datafiles</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img1.jpg'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img2.jpg'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img3.jpg'</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_find_borders</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">img</span> <span class=\"ow\">in</span> <span class=\"n\">datafiles</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n        <span class=\"c1\">#assert process(img) == some_expected_value</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">datafiles</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img4.jpg'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img5.jpg'</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_brightness</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">img</span> <span class=\"ow\">in</span> <span class=\"n\">datafiles</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n        <span class=\"c1\">#assert process(img) == some_expected_value</span>\n</pre>\n</div>\n<div id=\"example-3\">\n<h3>Example 3</h3>\n<p>If all (or many) of your tests rely on the same files it can be easier to\ndefine one decorator beforehand and apply it to every test like this example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"n\">FIXTURE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)),</span>\n    <span class=\"s1\">'test_files'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">ALL_IMGS</span> <span class=\"o\">=</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">datafiles</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img1.jpg'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img2.jpg'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img3.jpg'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img4.jpg'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img5.jpg'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img6.jpg'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img7.jpg'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'img8.jpg'</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nd\">@ALL_IMGS</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_something1</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">img</span> <span class=\"ow\">in</span> <span class=\"n\">datafiles</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n        <span class=\"c1\">#assert process(img) == some_expected_value</span>\n\n<span class=\"nd\">@ALL_IMGS</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_something2</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">img</span> <span class=\"ow\">in</span> <span class=\"n\">datafiles</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n        <span class=\"c1\">#assert process(img) == some_expected_value</span>\n</pre>\n</div>\n<div id=\"example-4\">\n<h3>Example 4</h3>\n<p>Imagine you have 3 directories (<em>dir1</em>, <em>dir2</em>, <em>dir3</em>) each containing the files\n(<em>fileA</em> and <em>fileB</em>).</p>\n<p>This example clarifies the options <strong>on_duplicate</strong> and <strong>keep_top_dir</strong>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"n\">FIXTURE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)),</span>\n    <span class=\"s1\">'_fixture_files'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">datafiles</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir1'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir2'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir3'</span><span class=\"p\">),</span>\n    <span class=\"n\">on_duplicate</span><span class=\"o\">=</span><span class=\"s1\">'ignore'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_dir_ignore</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">):</span>\n    <span class=\"c1\"># datafiles.listdir() will list fileA and fileB originally from dir1</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">datafiles</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir1'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir2'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir3'</span><span class=\"p\">),</span>\n    <span class=\"n\">on_duplicate</span><span class=\"o\">=</span><span class=\"s1\">'replace'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_dir_replace</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">):</span>\n    <span class=\"c1\"># datafiles.listdir() will list fileA and fileB originally from dir3</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">datafiles</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir1'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir2'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir3'</span><span class=\"p\">),</span>\n    <span class=\"c1\"># on_duplicate='exception' is the default and does not need to be</span>\n    <span class=\"c1\"># specified</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_dir_exception</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">):</span>\n    <span class=\"c1\"># An exception will be raised because of duplicate filename fileA</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">datafiles</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir1'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir2'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">FIXTURE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'dir3'</span><span class=\"p\">),</span>\n    <span class=\"n\">keep_top_dir</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_dir_keep_top_dir</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">):</span>\n    <span class=\"c1\"># datafiles.listdir() will list dir1, dir2 and dir3 (each containing</span>\n    <span class=\"c1\"># fileA and fileB)</span>\n    <span class=\"k\">pass</span>\n</pre>\n</div>\n<div id=\"example-5\">\n<h3>Example 5</h3>\n<p>You can also use a py.path object instead of str paths.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"n\">_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n<span class=\"n\">FIXTURE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">py</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"p\">(</span><span class=\"n\">_dir</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"s1\">'test_files'</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">datafiles</span><span class=\"p\">(</span>\n    <span class=\"n\">FIXTURE_DIR</span> <span class=\"o\">/</span> <span class=\"s1\">'img1.jpg'</span><span class=\"p\">,</span>\n    <span class=\"n\">FIXTURE_DIR</span> <span class=\"o\">/</span> <span class=\"s1\">'img2.jpg'</span><span class=\"p\">,</span>\n    <span class=\"n\">FIXTURE_DIR</span> <span class=\"o\">/</span> <span class=\"s1\">'img3.jpg'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_fast_forward</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">datafiles</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are very welcome. Tests can be run with <a href=\"https://tox.readthedocs.org/en/latest/\" rel=\"nofollow\">tox</a>. Please\nensure the coverage stays at least the same before you submit a pull\nrequest.</p>\n<p>To create and upload a new package first update the version number and then:</p>\n<pre>pip3 install --user -U twine\nmake clean\nmake dist\ntwine upload --repository-url https://test.pypi.org/legacy/ dist/*\n<span class=\"c1\"># Verify the package is usable\n</span>virtualenv -p python3 test-venv\ntest-venv/bin/pip install pytest\ntest-venv/bin/pip install --index-url https://test.pypi.org/simple/ pytest-datafiles\n<span class=\"c1\"># Create some test_example.py (e.g. with one of the examples above)\n</span>test-venv/bin/pytest test_example.py\n<span class=\"c1\"># Set the git tag for final release\n</span>git tag -a <span class=\"m\">2</span>.0\ngit push --tags\n<span class=\"c1\"># Upload the package for final release\n</span>twine upload dist/*\n</pre>\n<p>Of course this will only work if you have the necessary PyPI credentials for\nthis package.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Distributed under the terms of the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT license</a>, \u201cpytest-datafiles\u201d is\nfree and open source software.</p>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>If you encounter any problems, please <a href=\"https://github.com/omarkohl/pytest-datafiles/issues\" rel=\"nofollow\">file an issue</a> along with a\ndetailed description.</p>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>Thanks to <a href=\"https://github.com/flub\" rel=\"nofollow\">@flub</a> for the idea to use <a href=\"https://pytest.org/latest/contents.html\" rel=\"nofollow\">pytest</a> marks to solve the\nproblem this plugin is trying to solve.</p>\n<p>Some ideas to improve this project were taken from the <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a>\ntemplates <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">cookiecutter-pypackage</a> and <a href=\"https://github.com/pytest-dev/cookiecutter-pytest-plugin\" rel=\"nofollow\">cookiecutter-pytest-plugin</a>.</p>\n</div>\n<div id=\"change-log\">\n<h2>Change Log</h2>\n<p>All notable changes to this project will be documented in this file.\nThis project adheres to <a href=\"http://semver.org/\" rel=\"nofollow\">Semantic Versioning</a>. The change log is\nformatted as suggested by <a href=\"http://keepachangelog.com/\" rel=\"nofollow\">Keep a CHANGELOG</a>.</p>\n<div id=\"unreleased\">\n<h3><a href=\"https://github.com/omarkohl/pytest-datafiles/compare/2.0...master\" rel=\"nofollow\">Unreleased</a></h3>\n<p>Added\nChanged\nDeprecated\nRemoved\nFixed\nSecurity</p>\n</div>\n<div id=\"id1\">\n<h3><a href=\"https://github.com/omarkohl/pytest-datafiles/compare/1.0...2.0\" rel=\"nofollow\">2.0</a></h3>\n<p>Added</p>\n<ul>\n<li>Explicit support for Python 3.6 (no changes were necessary)</li>\n</ul>\n<p>Removed</p>\n<ul>\n<li>BREAKING CHANGE: Python 2.6 is no longer supported (because we rely on pytest\n&gt;= 3.6)</li>\n</ul>\n<p>Fixed</p>\n<ul>\n<li>Use the new pytest mark API to fix MarkInfo warnings (<a href=\"https://github.com/omarkohl/pytest-datafiles/issues/2\" rel=\"nofollow\">#2</a>)</li>\n<li>BREAKING CHANGE: Symlinks are now copied as links instead of copying the\ntarget they point to (<a href=\"https://github.com/omarkohl/pytest-datafiles/issues/1\" rel=\"nofollow\">#1</a>)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"https://github.com/omarkohl/pytest-datafiles/compare/0.2...1.0\" rel=\"nofollow\">1.0</a></h3>\n<p>Changed</p>\n<ul>\n<li>Bump version to 1.0 to signal that the plugin is stable</li>\n<li>Minor refactorization without repercussions for users</li>\n<li>Only use regular \u2018paths\u2019 (str) instead of py.path objects in documentation\nexamples because they were confusing to some people (unfamiliar with py.path)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"https://github.com/omarkohl/pytest-datafiles/compare/0.1...0.2\" rel=\"nofollow\">0.2</a></h3>\n<p>Added</p>\n<ul>\n<li>Support for directories</li>\n<li>Option \u2018keep_top_dir\u2019 to keep the top level directory (instead of only\ncopying its content). Possible values are: True, False (default)</li>\n<li>Option \u2018on_duplicate\u2019 to specify what to do when duplicate files or\ndirectories are encountered. Possible values are: \u2018exception\u2019 (default),\n\u2018ignore\u2019, \u2018overwrite\u2019</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"https://github.com/omarkohl/pytest-datafiles/compare/3c31b2c...0.1\" rel=\"nofollow\">0.1</a></h3>\n<p>Added</p>\n<ul>\n<li>Specify one or multiple files to be copied by decorating the test\nfunction</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4349109, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "20fd566115f5cc3685d599185cfd1625", "sha256": "ebfb9be005d095ba4877110270ceda5a1967409849833a7794cdddf989a0fe95"}, "downloads": -1, "filename": "pytest_datafiles-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "20fd566115f5cc3685d599185cfd1625", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6903, "upload_time": "2015-08-01T21:45:13", "upload_time_iso_8601": "2015-08-01T21:45:13.466821Z", "url": "https://files.pythonhosted.org/packages/a8/98/b0e27603b9a8a63020728253540ad3d763faeace7b8cd77afa67d36688ac/pytest_datafiles-0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93d8b57337aa24ac13aca35a390abe92", "sha256": "93162f63bc7125a99ceeb830fc75de678e3a67cfd26acb4a250b8e07a0290a0a"}, "downloads": -1, "filename": "pytest-datafiles-0.1.tar.gz", "has_sig": false, "md5_digest": "93d8b57337aa24ac13aca35a390abe92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4948, "upload_time": "2015-08-01T21:44:54", "upload_time_iso_8601": "2015-08-01T21:44:54.993132Z", "url": "https://files.pythonhosted.org/packages/9d/0e/9f4c0ca3951e71c36440ad74cf9780331fcbd910adb49454af78936c4d1d/pytest-datafiles-0.1.tar.gz", "yanked": false}], "0.1.dev0": [{"comment_text": "", "digests": {"md5": "fdae7289687b1a2eba69bbd224ca7e91", "sha256": "339f74a49fb1f5d8985edb1440bdf11b2fb20bd65dc54e59ba2fb0c72dd82aee"}, "downloads": -1, "filename": "pytest-datafiles-0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "fdae7289687b1a2eba69bbd224ca7e91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1588, "upload_time": "2015-07-28T12:28:03", "upload_time_iso_8601": "2015-07-28T12:28:03.808823Z", "url": "https://files.pythonhosted.org/packages/ca/84/b026087c2ba24c8e7a4ee26009b1556b47ffb3d8d525dade4a94aaba6a74/pytest-datafiles-0.1.dev0.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "489dff9efba563fd818520e9550ee1c8", "sha256": "797def269706f10e28bb56f8de30015f665d43665c5bd29b148752c95a25f9ad"}, "downloads": -1, "filename": "pytest_datafiles-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "489dff9efba563fd818520e9550ee1c8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9159, "upload_time": "2015-09-02T19:44:24", "upload_time_iso_8601": "2015-09-02T19:44:24.002786Z", "url": "https://files.pythonhosted.org/packages/b4/ef/dca407dcf464c31ee8fb35050566ebfffe6356ecc3a38536d3dcc2ce9fde/pytest_datafiles-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4ef8cfed3f5ef48b1982854888fcaab", "sha256": "afbeed6a98a7bd376e1c2a10421a0752ee6104e5f078c9d591c65d62493bdf04"}, "downloads": -1, "filename": "pytest-datafiles-0.2.tar.gz", "has_sig": false, "md5_digest": "c4ef8cfed3f5ef48b1982854888fcaab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6699, "upload_time": "2015-09-02T19:44:11", "upload_time_iso_8601": "2015-09-02T19:44:11.263630Z", "url": "https://files.pythonhosted.org/packages/7e/19/a6519fb041d5ba2f41de21adc9101d1f01f4d531e5dbf385f305539dd1eb/pytest-datafiles-0.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "1438d922b28d0a33bb61b0d179ba482d", "sha256": "f7b10ad81f0361e4bfa5206be6df1159701b466e60a9c88c616fc135248c0024"}, "downloads": -1, "filename": "pytest_datafiles-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1438d922b28d0a33bb61b0d179ba482d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29269, "upload_time": "2016-06-24T19:02:26", "upload_time_iso_8601": "2016-06-24T19:02:26.526969Z", "url": "https://files.pythonhosted.org/packages/81/c9/0740b92c7f4c1c63b1636bdad254499e8f59ea60257f3e709f1d16af1742/pytest_datafiles-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e18280eba114ce3edbb606b5f92c435e", "sha256": "bb6493c00e8cfb26e9a08f3cc6d5796ae1d168a5a3d09a0e31b3c65b5619a4f0"}, "downloads": -1, "filename": "pytest-datafiles-1.0.tar.gz", "has_sig": false, "md5_digest": "e18280eba114ce3edbb606b5f92c435e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7373, "upload_time": "2016-06-24T19:02:44", "upload_time_iso_8601": "2016-06-24T19:02:44.705067Z", "url": "https://files.pythonhosted.org/packages/22/9b/bc99e1f5abc17d746e41b1fbfb2643268a75189fd7102eff2cd6f2ecc087/pytest-datafiles-1.0.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "a9c596dd310ce2564facf8ec38808dc8", "sha256": "e349b6ad7bcca111f3677b7201d3ca81f93b5e09dcfae8ee2be2c3cae9f55bc7"}, "downloads": -1, "filename": "pytest_datafiles-2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a9c596dd310ce2564facf8ec38808dc8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11319, "upload_time": "2018-10-07T11:18:00", "upload_time_iso_8601": "2018-10-07T11:18:00.724707Z", "url": "https://files.pythonhosted.org/packages/21/a2/7da7d04eeca8def8062480e6696570aefde1c378152d2da9d5f3870649fb/pytest_datafiles-2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fdb332b13e623b70ecee66584f48b594", "sha256": "143329cbb1dbbb07af24f88fa4668e2f59ce233696cf12c49fd1c98d1756dbf9"}, "downloads": -1, "filename": "pytest-datafiles-2.0.tar.gz", "has_sig": false, "md5_digest": "fdb332b13e623b70ecee66584f48b594", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8205, "upload_time": "2018-10-07T11:18:02", "upload_time_iso_8601": "2018-10-07T11:18:02.629323Z", "url": "https://files.pythonhosted.org/packages/c0/37/80e34ae45909d5e4d69e15ab765170c7e37ee9de1a09097d3badd74bb072/pytest-datafiles-2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a9c596dd310ce2564facf8ec38808dc8", "sha256": "e349b6ad7bcca111f3677b7201d3ca81f93b5e09dcfae8ee2be2c3cae9f55bc7"}, "downloads": -1, "filename": "pytest_datafiles-2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a9c596dd310ce2564facf8ec38808dc8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11319, "upload_time": "2018-10-07T11:18:00", "upload_time_iso_8601": "2018-10-07T11:18:00.724707Z", "url": "https://files.pythonhosted.org/packages/21/a2/7da7d04eeca8def8062480e6696570aefde1c378152d2da9d5f3870649fb/pytest_datafiles-2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fdb332b13e623b70ecee66584f48b594", "sha256": "143329cbb1dbbb07af24f88fa4668e2f59ce233696cf12c49fd1c98d1756dbf9"}, "downloads": -1, "filename": "pytest-datafiles-2.0.tar.gz", "has_sig": false, "md5_digest": "fdb332b13e623b70ecee66584f48b594", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8205, "upload_time": "2018-10-07T11:18:02", "upload_time_iso_8601": "2018-10-07T11:18:02.629323Z", "url": "https://files.pythonhosted.org/packages/c0/37/80e34ae45909d5e4d69e15ab765170c7e37ee9de1a09097d3badd74bb072/pytest-datafiles-2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:17 2020"}