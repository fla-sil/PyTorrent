{"info": {"author": "Maksim Vorontsov", "author_email": "social.maksim.vrs@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "<h1 align=\"center\">aiohttp-apispec</h1>\n<p align=\"center\">Build and document REST APIs with <a href=\"https://github.com/aio-libs/aiohttp\">aiohttp</a> and <a href=\"https://github.com/marshmallow-code/apispec\">apispec</a></p>\n\n<p align=\"center\">\n  <a href=\"https://pypi.python.org/pypi/aiohttp-apispec\"><img src=\"https://badge.fury.io/py/aiohttp-apispec.svg\" alt=\"Pypi\"></a>\n  <a href=\"https://travis-ci.org/maximdanilchenko/aiohttp-apispec\"><img src=\"https://travis-ci.org/maximdanilchenko/aiohttp-apispec.svg\" alt=\"build status\"></a>\n  <a href=\"https://codecov.io/gh/maximdanilchenko/aiohttp-apispec\"><img src=\"https://codecov.io/gh/maximdanilchenko/aiohttp-apispec/branch/master/graph/badge.svg\" alt=\"[codcov]\"></a>\n</p>\n<p align=\"center\">\n  <a href=\"https://aiohttp-apispec.readthedocs.io/en/latest/?badge=latest\"><img src=\"https://readthedocs.org/projects/aiohttp-apispec/badge/?version=latest\" alt=\"[docs]\"></a>\n  <a href=\"https://github.com/ambv/black\"><img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" alt=\"Code style: black\"></a>\n  <a href=\"https://github.com/maximdanilchenko/aiohttp-apispec/graphs/contributors\"><img src=\"https://img.shields.io/github/contributors/maximdanilchenko/aiohttp-apispec.svg\" alt=\"Contributors\"></a>\n</p>\n<p align=\"center\">\n   <a href=\"https://www.python.org/downloads/\"><img src=\"https://img.shields.io/badge/python-3.5-blue.svg\" alt=\"Python 3.5\"></a>\n   <a href=\"https://www.python.org/downloads/\"><img src=\"https://img.shields.io/badge/python-3.6-blue.svg\" alt=\"Python 3.6\"></a>\n   <a href=\"https://www.python.org/downloads/\"><img src=\"https://img.shields.io/badge/python-3.7-blue.svg\" alt=\"Python 3.7\"></a>\n</p>\n\n<p>\n\n```aiohttp-apispec``` key features:\n- ```docs``` and ```request_schema``` decorators \nto add swagger spec support out of the box;\n- ```validation_middleware``` middleware to enable validating \nwith marshmallow schemas from those decorators;\n- **SwaggerUI** support.\n- *New from version 2.0* -  ```match_info_schema```, ```querystring_schema```, \n```form_schema```, ```json_schema```, ```headers_schema``` and ```cookies_schema``` \ndecorators for specific request parts validation. \nLook [here](#more-decorators) for more info.\n\n```aiohttp-apispec``` api is fully inspired by ```flask-apispec``` library\n\n## Contents\n\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Adding validation middleware](#adding-validation-middleware)\n- [More decorators](#more-decorators)\n- [Custom error handling](#custom-error-handling)\n- [Build swagger web client](#build-swagger-web-client)\n\n\n## Install\n\n```\npip install aiohttp-apispec\n```\n\n## Quickstart\n\n```Python\nfrom aiohttp_apispec import (\n    docs,\n    request_schema,\n    setup_aiohttp_apispec,\n)\nfrom aiohttp import web\nfrom marshmallow import Schema, fields\n\n\nclass RequestSchema(Schema):\n    id = fields.Int()\n    name = fields.Str(description=\"name\")\n\n@docs(\n    tags=[\"mytag\"],\n    summary=\"Test method summary\",\n    description=\"Test method description\",\n)\n@request_schema(RequestSchema(strict=True))\nasync def index(request):\n    return web.json_response({\"msg\": \"done\", \"data\": {}})\n\n\napp = web.Application()\napp.router.add_post(\"/v1/test\", index)\n\n# init docs with all parameters, usual for ApiSpec\nsetup_aiohttp_apispec(\n    app=app, \n    title=\"My Documentation\", \n    version=\"v1\",\n    url=\"/api/docs/swagger.json\",\n    swagger_path=\"/api/docs\",\n)\n\n# Now we can find spec on 'http://localhost:8080/api/docs/swagger.json'\n# and docs on 'http://localhost:8080/api/docs'\nweb.run_app(app)\n```\nClass based views are also supported:\n```python\nclass TheView(web.View):\n    @docs(\n        tags=[\"mytag\"],\n        summary=\"View method summary\",\n        description=\"View method description\",\n    )\n    @request_schema(RequestSchema(strict=True))\n    @response_schema(ResponseSchema(), 200)\n    def delete(self):\n        return web.json_response(\n            {\"msg\": \"done\", \"data\": {\"name\": self.request[\"data\"][\"name\"]}}\n        )\n\n\napp.router.add_view(\"/v1/view\", TheView)\n```\n\nAs alternative you can add responses info to `docs` decorator, which is more compact way. \nAnd it allows you not to use schemas for responses documentation:\n\n```python\n@docs(\n    tags=[\"mytag\"],\n    summary=\"Test method summary\",\n    description=\"Test method description\",\n    responses={\n        200: {\n            \"schema\": ResponseSchema,\n            \"description\": \"Success response\",\n        },  # regular response\n        404: {\"description\": \"Not found\"},  # responses without schema\n        422: {\"description\": \"Validation error\"},\n    },\n)\n@request_schema(RequestSchema(strict=True))\nasync def index(request):\n    return web.json_response({\"msg\": \"done\", \"data\": {}})\n```\n\n## Adding validation middleware\n\n```Python\nfrom aiohttp_apispec import validation_middleware\n\n...\n\napp.middlewares.append(validation_middleware)\n```\nNow you can access all validated data in route from ```request['data']``` like so:\n\n```Python\n@docs(\n    tags=[\"mytag\"],\n    summary=\"Test method summary\",\n    description=\"Test method description\",\n)\n@request_schema(RequestSchema(strict=True))\n@response_schema(ResponseSchema, 200)\nasync def index(request):\n    uid = request[\"data\"][\"id\"]\n    name = request[\"data\"][\"name\"]\n    return web.json_response(\n        {\"msg\": \"done\", \"data\": {\"info\": f\"name - {name}, id - {uid}\"}}\n    )\n```\n\n\nYou can change ``Request``'s ``'data'`` param to another with ``request_data_name`` argument of \n``setup_aiohttp_apispec`` function:\n\n```python\nsetup_aiohttp_apispec(\n    app=app,\n    request_data_name=\"validated_data\",\n)\n\n...\n\n\n@request_schema(RequestSchema(strict=True))\nasync def index(request):\n    uid = request[\"validated_data\"][\"id\"]\n    ...\n```\n\nAlso you can do it for specific view using ```put_into``` \nparameter (beginning from version 2.0):\n\n```python\n@request_schema(RequestSchema(strict=True), put_into=\"validated_data\")\nasync def index(request):\n    uid = request[\"validated_data\"][\"id\"]\n    ...\n```\n\n## More decorators\n\nStarting from version 2.0 you can use shortenings for documenting and validating \nspecific request parts like cookies, headers etc using those decorators:\n\n| Decorator name | Default put_into param |\n|:----------|:-----------------|\n| match_info_schema | match_info |\n| querystring_schema | querystring |\n| form_schema | form |\n| json_schema | json |\n| headers_schema | headers |\n| cookies_schema | cookies | \n\nAnd example:\n\n```python\n@docs(\n    tags=[\"users\"],\n    summary=\"Create new user\",\n    description=\"Add new user to our toy database\",\n    responses={\n        200: {\"description\": \"Ok. User created\", \"schema\": OkResponse},\n        401: {\"description\": \"Unauthorized\"},\n        422: {\"description\": \"Validation error\"},\n        500: {\"description\": \"Server error\"},\n    },\n)\n@headers_schema(AuthHeaders)  # <- schema for headers validation\n@json_schema(UserMeta)  # <- schema for json body validation\n@querystring_schema(UserParams)  # <- schema for querystring params validation\nasync def create_user(request: web.Request):\n    headers = request[\"headers\"]  # <- validated headers!\n    json_data = request[\"json\"]  # <- validated json!\n    query_params = request[\"querystring\"]  # <- validated querystring!\n    ...\n```\n\n## Custom error handling\n\nIf you want to catch validation errors by yourself you \ncould use `error_callback` parameter and create your custom error handler. Note that\nit can be one of coroutine or callable and it should \nhave interface exactly like in examples below:\n\n```python\nfrom marshmallow import ValidationError, Schema\nfrom aiohttp import web\nfrom typing import Optional, Mapping, NoReturn\n\n\ndef my_error_handler(\n    error: ValidationError,\n    req: web.Request,\n    schema: Schema,\n    error_status_code: Optional[int] = None,\n    error_headers: Optional[Mapping[str, str]] = None,\n) -> NoReturn:\n    raise web.HTTPBadRequest(\n            body=json.dumps(error.messages),\n            headers=error_headers,\n            content_type=\"application/json\",\n        )\n\nsetup_aiohttp_apispec(app, error_callback=my_error_handler)\n```\nAlso you can create your own exceptions and create \nregular Request in middleware like so:\n\n```python\nclass MyException(Exception):\n    def __init__(self, message):\n        self.message = message\n\n# It can be coroutine as well:\nasync def my_error_handler(\n    error, req, schema, error_status_code, error_headers\n):\n    await req.app[\"db\"].do_smth()  # So you can use some async stuff\n    raise MyException({\"errors\": error.messages, \"text\": \"Oops\"})\n\n# This middleware will handle your own exceptions:\n@web.middleware\nasync def intercept_error(request, handler):\n    try:\n        return await handler(request)\n    except MyException as e:\n        return web.json_response(e.message, status=400)\n\n\nsetup_aiohttp_apispec(app, error_callback=my_error_handler)\n\n# Do not forget to add your own middleware before validation_middleware\napp.middlewares.extend([intercept_error, validation_middleware])\n```\n\n## Build swagger web client\n\n#### 3.X SwaggerUI version\n\nJust add `swagger_path` parameter to `setup_aiohttp_apispec` function.\n\nFor example:\n\n```python\nsetup_aiohttp_apispec(app, swagger_path=\"/docs\")\n```\n\nThen go to `/docs` and see awesome SwaggerUI\n\n#### 2.X SwaggerUI version\n\nIf you prefer older version you can use \n[aiohttp_swagger](https://github.com/cr0hn/aiohttp-swagger) library.\n`aiohttp-apispec` adds `swagger_dict` parameter to aiohttp web application \nafter initialization (with `setup_aiohttp_apispec` function). \nSo you can use it easily like:\n\n```Python\nfrom aiohttp_apispec import setup_aiohttp_apispec\nfrom aiohttp_swagger import setup_swagger\n\n\ndef create_app(app):\n    setup_aiohttp_apispec(app)\n\n    async def swagger(app):\n        setup_swagger(\n            app=app, swagger_url=\"/api/doc\", swagger_info=app[\"swagger_dict\"]\n        )\n\n    app.on_startup.append(swagger)\n    # now we can access swagger client on '/api/doc' url\n    ...\n    return app\n```\n\n------\n\nPlease star this repository if this project helped you!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maksimvrs/aiohttp-apispec", "keywords": "aiohttp marshmallow apispec swagger", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aiohttp-apispec-patch", "package_url": "https://pypi.org/project/aiohttp-apispec-patch/", "platform": "", "project_url": "https://pypi.org/project/aiohttp-apispec-patch/", "project_urls": {"Homepage": "https://github.com/maksimvrs/aiohttp-apispec"}, "release_url": "https://pypi.org/project/aiohttp-apispec-patch/2.0.0/", "requires_dist": null, "requires_python": "", "summary": "Build and document REST APIs with aiohttp and apispec", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aiohttp-apispec</h1>\n<p align=\"center\">Build and document REST APIs with <a href=\"https://github.com/aio-libs/aiohttp\" rel=\"nofollow\">aiohttp</a> and <a href=\"https://github.com/marshmallow-code/apispec\" rel=\"nofollow\">apispec</a></p>\n<p align=\"center\">\n  <a href=\"https://pypi.python.org/pypi/aiohttp-apispec\" rel=\"nofollow\"><img alt=\"Pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3c813966726920e726687dd09b2f873efb622e6/68747470733a2f2f62616467652e667572792e696f2f70792f61696f687474702d617069737065632e737667\"></a>\n  <a href=\"https://travis-ci.org/maximdanilchenko/aiohttp-apispec\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8916574cce33ae415ddb554a6c2ab18ffca13892/68747470733a2f2f7472617669732d63692e6f72672f6d6178696d64616e696c6368656e6b6f2f61696f687474702d617069737065632e737667\"></a>\n  <a href=\"https://codecov.io/gh/maximdanilchenko/aiohttp-apispec\" rel=\"nofollow\"><img alt=\"[codcov]\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f56b5d44b01d5eb05b4b78029ed4d86231a786d6/68747470733a2f2f636f6465636f762e696f2f67682f6d6178696d64616e696c6368656e6b6f2f61696f687474702d617069737065632f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n</p>\n<p align=\"center\">\n  <a href=\"https://aiohttp-apispec.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"[docs]\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02e5ae6502bb36ec7f2219d04943dabd499b55f1/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696f687474702d617069737065632f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n  <a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n  <a href=\"https://github.com/maximdanilchenko/aiohttp-apispec/graphs/contributors\" rel=\"nofollow\"><img alt=\"Contributors\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e67c9fb44f3fe491830f0ea966ab36e0d06ba896/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f6d6178696d64616e696c6368656e6b6f2f61696f687474702d617069737065632e737667\"></a>\n</p>\n<p align=\"center\">\n   <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\"><img alt=\"Python 3.5\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8963091336cb0312d5fefe404229cb9ec0fb8b25/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e352d626c75652e737667\"></a>\n   <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\"><img alt=\"Python 3.6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01419d339114693587408dd14856677a4789006a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362d626c75652e737667\"></a>\n   <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\"><img alt=\"Python 3.7\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99a5180f32db379110e9948c7de1aaf8f77bf2e8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e372d626c75652e737667\"></a>\n</p>\n<p>\n</p><p><code>aiohttp-apispec</code> key features:</p>\n<ul>\n<li><code>docs</code> and <code>request_schema</code> decorators\nto add swagger spec support out of the box;</li>\n<li><code>validation_middleware</code> middleware to enable validating\nwith marshmallow schemas from those decorators;</li>\n<li><strong>SwaggerUI</strong> support.</li>\n<li><em>New from version 2.0</em> -  <code>match_info_schema</code>, <code>querystring_schema</code>,\n<code>form_schema</code>, <code>json_schema</code>, <code>headers_schema</code> and <code>cookies_schema</code>\ndecorators for specific request parts validation.\nLook <a href=\"#more-decorators\" rel=\"nofollow\">here</a> for more info.</li>\n</ul>\n<p><code>aiohttp-apispec</code> api is fully inspired by <code>flask-apispec</code> library</p>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#adding-validation-middleware\" rel=\"nofollow\">Adding validation middleware</a></li>\n<li><a href=\"#more-decorators\" rel=\"nofollow\">More decorators</a></li>\n<li><a href=\"#custom-error-handling\" rel=\"nofollow\">Custom error handling</a></li>\n<li><a href=\"#build-swagger-web-client\" rel=\"nofollow\">Build swagger web client</a></li>\n</ul>\n<h2>Install</h2>\n<pre><code>pip install aiohttp-apispec\n</code></pre>\n<h2>Quickstart</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp_apispec</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">docs</span><span class=\"p\">,</span>\n    <span class=\"n\">request_schema</span><span class=\"p\">,</span>\n    <span class=\"n\">setup_aiohttp_apispec</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">marshmallow</span> <span class=\"kn\">import</span> <span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">fields</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RequestSchema</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Int</span><span class=\"p\">()</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@docs</span><span class=\"p\">(</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"mytag\"</span><span class=\"p\">],</span>\n    <span class=\"n\">summary</span><span class=\"o\">=</span><span class=\"s2\">\"Test method summary\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Test method description\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@request_schema</span><span class=\"p\">(</span><span class=\"n\">RequestSchema</span><span class=\"p\">(</span><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">json_response</span><span class=\"p\">({</span><span class=\"s2\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"done\"</span><span class=\"p\">,</span> <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{}})</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_post</span><span class=\"p\">(</span><span class=\"s2\">\"/v1/test\"</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># init docs with all parameters, usual for ApiSpec</span>\n<span class=\"n\">setup_aiohttp_apispec</span><span class=\"p\">(</span>\n    <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"p\">,</span> \n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"My Documentation\"</span><span class=\"p\">,</span> \n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">\"v1\"</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"/api/docs/swagger.json\"</span><span class=\"p\">,</span>\n    <span class=\"n\">swagger_path</span><span class=\"o\">=</span><span class=\"s2\">\"/api/docs\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Now we can find spec on 'http://localhost:8080/api/docs/swagger.json'</span>\n<span class=\"c1\"># and docs on 'http://localhost:8080/api/docs'</span>\n<span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>Class based views are also supported:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TheView</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"nd\">@docs</span><span class=\"p\">(</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"mytag\"</span><span class=\"p\">],</span>\n        <span class=\"n\">summary</span><span class=\"o\">=</span><span class=\"s2\">\"View method summary\"</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"View method description\"</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"nd\">@request_schema</span><span class=\"p\">(</span><span class=\"n\">RequestSchema</span><span class=\"p\">(</span><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n    <span class=\"nd\">@response_schema</span><span class=\"p\">(</span><span class=\"n\">ResponseSchema</span><span class=\"p\">(),</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">json_response</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span><span class=\"s2\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"done\"</span><span class=\"p\">,</span> <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">][</span><span class=\"s2\">\"name\"</span><span class=\"p\">]}}</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_view</span><span class=\"p\">(</span><span class=\"s2\">\"/v1/view\"</span><span class=\"p\">,</span> <span class=\"n\">TheView</span><span class=\"p\">)</span>\n</pre>\n<p>As alternative you can add responses info to <code>docs</code> decorator, which is more compact way.\nAnd it allows you not to use schemas for responses documentation:</p>\n<pre><span class=\"nd\">@docs</span><span class=\"p\">(</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"mytag\"</span><span class=\"p\">],</span>\n    <span class=\"n\">summary</span><span class=\"o\">=</span><span class=\"s2\">\"Test method summary\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Test method description\"</span><span class=\"p\">,</span>\n    <span class=\"n\">responses</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"mi\">200</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"schema\"</span><span class=\"p\">:</span> <span class=\"n\">ResponseSchema</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Success response\"</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>  <span class=\"c1\"># regular response</span>\n        <span class=\"mi\">404</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Not found\"</span><span class=\"p\">},</span>  <span class=\"c1\"># responses without schema</span>\n        <span class=\"mi\">422</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Validation error\"</span><span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@request_schema</span><span class=\"p\">(</span><span class=\"n\">RequestSchema</span><span class=\"p\">(</span><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">json_response</span><span class=\"p\">({</span><span class=\"s2\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"done\"</span><span class=\"p\">,</span> <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{}})</span>\n</pre>\n<h2>Adding validation middleware</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp_apispec</span> <span class=\"kn\">import</span> <span class=\"n\">validation_middleware</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">middlewares</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">validation_middleware</span><span class=\"p\">)</span>\n</pre>\n<p>Now you can access all validated data in route from <code>request['data']</code> like so:</p>\n<pre><span class=\"nd\">@docs</span><span class=\"p\">(</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"mytag\"</span><span class=\"p\">],</span>\n    <span class=\"n\">summary</span><span class=\"o\">=</span><span class=\"s2\">\"Test method summary\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Test method description\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@request_schema</span><span class=\"p\">(</span><span class=\"n\">RequestSchema</span><span class=\"p\">(</span><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"nd\">@response_schema</span><span class=\"p\">(</span><span class=\"n\">ResponseSchema</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">][</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">][</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">json_response</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"done\"</span><span class=\"p\">,</span> <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"info\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"name - </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">, id - </span><span class=\"si\">{</span><span class=\"n\">uid</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">}}</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>You can change <code>Request</code>'s <code>'data'</code> param to another with <code>request_data_name</code> argument of\n<code>setup_aiohttp_apispec</code> function:</p>\n<pre><span class=\"n\">setup_aiohttp_apispec</span><span class=\"p\">(</span>\n    <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"p\">,</span>\n    <span class=\"n\">request_data_name</span><span class=\"o\">=</span><span class=\"s2\">\"validated_data\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n\n\n<span class=\"nd\">@request_schema</span><span class=\"p\">(</span><span class=\"n\">RequestSchema</span><span class=\"p\">(</span><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s2\">\"validated_data\"</span><span class=\"p\">][</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Also you can do it for specific view using <code>put_into</code>\nparameter (beginning from version 2.0):</p>\n<pre><span class=\"nd\">@request_schema</span><span class=\"p\">(</span><span class=\"n\">RequestSchema</span><span class=\"p\">(</span><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">put_into</span><span class=\"o\">=</span><span class=\"s2\">\"validated_data\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s2\">\"validated_data\"</span><span class=\"p\">][</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n</pre>\n<h2>More decorators</h2>\n<p>Starting from version 2.0 you can use shortenings for documenting and validating\nspecific request parts like cookies, headers etc using those decorators:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Decorator name</th>\n<th align=\"left\">Default put_into param</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">match_info_schema</td>\n<td align=\"left\">match_info</td>\n</tr>\n<tr>\n<td align=\"left\">querystring_schema</td>\n<td align=\"left\">querystring</td>\n</tr>\n<tr>\n<td align=\"left\">form_schema</td>\n<td align=\"left\">form</td>\n</tr>\n<tr>\n<td align=\"left\">json_schema</td>\n<td align=\"left\">json</td>\n</tr>\n<tr>\n<td align=\"left\">headers_schema</td>\n<td align=\"left\">headers</td>\n</tr>\n<tr>\n<td align=\"left\">cookies_schema</td>\n<td align=\"left\">cookies</td>\n</tr></tbody></table>\n<p>And example:</p>\n<pre><span class=\"nd\">@docs</span><span class=\"p\">(</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"users\"</span><span class=\"p\">],</span>\n    <span class=\"n\">summary</span><span class=\"o\">=</span><span class=\"s2\">\"Create new user\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Add new user to our toy database\"</span><span class=\"p\">,</span>\n    <span class=\"n\">responses</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"mi\">200</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ok. User created\"</span><span class=\"p\">,</span> <span class=\"s2\">\"schema\"</span><span class=\"p\">:</span> <span class=\"n\">OkResponse</span><span class=\"p\">},</span>\n        <span class=\"mi\">401</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Unauthorized\"</span><span class=\"p\">},</span>\n        <span class=\"mi\">422</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Validation error\"</span><span class=\"p\">},</span>\n        <span class=\"mi\">500</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Server error\"</span><span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@headers_schema</span><span class=\"p\">(</span><span class=\"n\">AuthHeaders</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;- schema for headers validation</span>\n<span class=\"nd\">@json_schema</span><span class=\"p\">(</span><span class=\"n\">UserMeta</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;- schema for json body validation</span>\n<span class=\"nd\">@querystring_schema</span><span class=\"p\">(</span><span class=\"n\">UserParams</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;- schema for querystring params validation</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">):</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s2\">\"headers\"</span><span class=\"p\">]</span>  <span class=\"c1\"># &lt;- validated headers!</span>\n    <span class=\"n\">json_data</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s2\">\"json\"</span><span class=\"p\">]</span>  <span class=\"c1\"># &lt;- validated json!</span>\n    <span class=\"n\">query_params</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s2\">\"querystring\"</span><span class=\"p\">]</span>  <span class=\"c1\"># &lt;- validated querystring!</span>\n    <span class=\"o\">...</span>\n</pre>\n<h2>Custom error handling</h2>\n<p>If you want to catch validation errors by yourself you\ncould use <code>error_callback</code> parameter and create your custom error handler. Note that\nit can be one of coroutine or callable and it should\nhave interface exactly like in examples below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">marshmallow</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span><span class=\"p\">,</span> <span class=\"n\">Schema</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Mapping</span><span class=\"p\">,</span> <span class=\"n\">NoReturn</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_error_handler</span><span class=\"p\">(</span>\n    <span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">ValidationError</span><span class=\"p\">,</span>\n    <span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">,</span>\n    <span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">Schema</span><span class=\"p\">,</span>\n    <span class=\"n\">error_status_code</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">error_headers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">NoReturn</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">HTTPBadRequest</span><span class=\"p\">(</span>\n            <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"p\">),</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">error_headers</span><span class=\"p\">,</span>\n            <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">\"application/json\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n<span class=\"n\">setup_aiohttp_apispec</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">error_callback</span><span class=\"o\">=</span><span class=\"n\">my_error_handler</span><span class=\"p\">)</span>\n</pre>\n<p>Also you can create your own exceptions and create\nregular Request in middleware like so:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyException</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">message</span>\n\n<span class=\"c1\"># It can be coroutine as well:</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">my_error_handler</span><span class=\"p\">(</span>\n    <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">,</span> <span class=\"n\">error_status_code</span><span class=\"p\">,</span> <span class=\"n\">error_headers</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"s2\">\"db\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">do_smth</span><span class=\"p\">()</span>  <span class=\"c1\"># So you can use some async stuff</span>\n    <span class=\"k\">raise</span> <span class=\"n\">MyException</span><span class=\"p\">({</span><span class=\"s2\">\"errors\"</span><span class=\"p\">:</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Oops\"</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># This middleware will handle your own exceptions:</span>\n<span class=\"nd\">@web</span><span class=\"o\">.</span><span class=\"n\">middleware</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">intercept_error</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">MyException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">json_response</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">setup_aiohttp_apispec</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">error_callback</span><span class=\"o\">=</span><span class=\"n\">my_error_handler</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Do not forget to add your own middleware before validation_middleware</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">middlewares</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">intercept_error</span><span class=\"p\">,</span> <span class=\"n\">validation_middleware</span><span class=\"p\">])</span>\n</pre>\n<h2>Build swagger web client</h2>\n<h4>3.X SwaggerUI version</h4>\n<p>Just add <code>swagger_path</code> parameter to <code>setup_aiohttp_apispec</code> function.</p>\n<p>For example:</p>\n<pre><span class=\"n\">setup_aiohttp_apispec</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">swagger_path</span><span class=\"o\">=</span><span class=\"s2\">\"/docs\"</span><span class=\"p\">)</span>\n</pre>\n<p>Then go to <code>/docs</code> and see awesome SwaggerUI</p>\n<h4>2.X SwaggerUI version</h4>\n<p>If you prefer older version you can use\n<a href=\"https://github.com/cr0hn/aiohttp-swagger\" rel=\"nofollow\">aiohttp_swagger</a> library.\n<code>aiohttp-apispec</code> adds <code>swagger_dict</code> parameter to aiohttp web application\nafter initialization (with <code>setup_aiohttp_apispec</code> function).\nSo you can use it easily like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp_apispec</span> <span class=\"kn\">import</span> <span class=\"n\">setup_aiohttp_apispec</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp_swagger</span> <span class=\"kn\">import</span> <span class=\"n\">setup_swagger</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n    <span class=\"n\">setup_aiohttp_apispec</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">swagger</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"n\">setup_swagger</span><span class=\"p\">(</span>\n            <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">swagger_url</span><span class=\"o\">=</span><span class=\"s2\">\"/api/doc\"</span><span class=\"p\">,</span> <span class=\"n\">swagger_info</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"s2\">\"swagger_dict\"</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">on_startup</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">swagger</span><span class=\"p\">)</span>\n    <span class=\"c1\"># now we can access swagger client on '/api/doc' url</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n</pre>\n<hr>\n<p>Please star this repository if this project helped you!</p>\n\n          </div>"}, "last_serial": 6189737, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "ffbc30799be85df013cab26eb914cbf1", "sha256": "8a0f161523c5ead019a58ab95715efffe6876f34f0d15981bdb5f1e619855b72"}, "downloads": -1, "filename": "aiohttp-apispec-patch-2.0.0.tar.gz", "has_sig": false, "md5_digest": "ffbc30799be85df013cab26eb914cbf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2330927, "upload_time": "2019-11-24T12:39:45", "upload_time_iso_8601": "2019-11-24T12:39:45.161405Z", "url": "https://files.pythonhosted.org/packages/9f/96/56cca65213e9009b1eecfea533104f55e75e6ef5c64c5adaa9ecb89c7f1c/aiohttp-apispec-patch-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ffbc30799be85df013cab26eb914cbf1", "sha256": "8a0f161523c5ead019a58ab95715efffe6876f34f0d15981bdb5f1e619855b72"}, "downloads": -1, "filename": "aiohttp-apispec-patch-2.0.0.tar.gz", "has_sig": false, "md5_digest": "ffbc30799be85df013cab26eb914cbf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2330927, "upload_time": "2019-11-24T12:39:45", "upload_time_iso_8601": "2019-11-24T12:39:45.161405Z", "url": "https://files.pythonhosted.org/packages/9f/96/56cca65213e9009b1eecfea533104f55e75e6ef5c64c5adaa9ecb89c7f1c/aiohttp-apispec-patch-2.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:22 2020"}