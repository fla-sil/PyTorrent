{"info": {"author": "Abhinav Tushar", "author_email": "abhinav.tushar.vs@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "eep\n===\n\n.. image:: https://badge.fury.io/py/eep.png\n    :target: https://badge.fury.io/py/eep\n\nEmacs style, point based search-replace for python.\n\nIt works by moving a ``point`` and a ``mark`` around in the text,\nsomewhat similar to how emacs handles its ``buffers``. This becomes\nintuitive and easier for *some* text processing tasks which require\nusage of *after* and *before* in text.\n\nAn example problem is\n`here <http://ergoemacs.org/emacs/elisp_process_html.html>`__. Using\n``eep``, the equivalent python code is\n\n.. code:: python\n\n      import eep\n\n      text = \"\"\"<p class='q'>Q: Why</p>\\n<p class='a'>Because</p>\\n\n      <p class='a'>You need to do</p>\\n\\n\n      <p class='q'>Q: How</p>\\n\n      <p class='a'>Do this</p>\\n\n      <p class='a'>And that</p>\"\"\"\n\n      es = eep.Searcher(text)\n\n      print(\"Before : \\n\" + str(es) + \"\\n\\n\")\n\n      while es.search_forward(\"<p class='q'>\"):\n          es.search_forward(\"<p class='a'>\")\n          es.swap_markers()\n          es.insert(\"<div class='a'>\\n\")\n\n          if es.search_forward(\"<p class='q'>\"):\n              es.search_backward(\"</p>\")\n              es.swap_markers()\n              es.insert(\"\\n</div>\")\n\n      es.goto(\"end\")\n      es.search_backward(\"<p class='a'>\")\n      es.search_forward(\"</p>\")\n      es.insert(\"\\n</div>\")\n\n      es.goto(\"start\")\n      while es.search_forward(\"<p class='a'>\"):\n          es.replace(\"<p>\")\n\n      es.goto(\"start\")\n      while es.search_forward(\"<p class='q'>Q: \"):\n          es.replace(\"<p class='q'>\")\n\n      print(\"After : \\n\" + str(es))\n\n.. code:: shell\n\n      Before : \n      <p class='q'>Q: Why</p>\n      <p class='a'>Because</p>\n      <p class='a'>You need to do</p>\n\n      <p class='q'>Q: How</p>\n      <p class='a'>Do this</p>\n      <p class='a'>And that</p>\n\n\n      After : \n      <p class='q'>Why</p>\n      <div class='a'>\n      <p>Because</p>\n      <p>You need to do</p>\n      </div>\n\n      <p class='q'>How</p>\n      <div class='a'>\n      <p>Do this</p>\n      <p>And that</p>\n      </div>\n\nUsage\n-----\n\n-  Install using ``pip install eep``\n-  Instantiate a searcher\n\n.. code:: python\n\n      import eep\n\n      es = eep.Searcher(\"this is a sample text. this is a sentence.\")\n\n-  A searcher has two markers for defining regions. A ``point`` moves\n   around while searching, replacing, inserting etc. It is the *current*\n   position where operations are done.\n-  ``mark`` moves after successful forward or backward searches to mark\n   matching region with the ``point``.\n\n.. code:: python\n\n      # Search forward for first match from current point\n      # Return true if match found\n      # Set mark in beginning and point at end\n      es.search_forward(\"th\")\n\n      # Search backward for first match from current point\n      # Return true if match found\n      # Set point in beginning and mark at end\n      es.search_backward(\"th\")\n\n      # Replace marked region\n      es.replace(\"dodo\")\n\n      # Insert at current point\n      es.insert(\"dodo\")\n\n      # Move the point\n      es.jump(-3)\n      es.goto(34) # also accepts \"start\" and \"end\" strings\n\n      # Exchange markers\n      es.swap_markers()", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lepisma/eep", "keywords": "eep string search replace", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "eep", "package_url": "https://pypi.org/project/eep/", "platform": "", "project_url": "https://pypi.org/project/eep/", "project_urls": {"Homepage": "https://github.com/lepisma/eep"}, "release_url": "https://pypi.org/project/eep/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Emacs style, point based string search-replace library for python", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/eep\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/eep.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8721b931c15495b66ae637ce653ec7431efccc68/68747470733a2f2f62616467652e667572792e696f2f70792f6565702e706e67\"></a>\n<p>Emacs style, point based search-replace for python.</p>\n<p>It works by moving a <tt>point</tt> and a <tt>mark</tt> around in the text,\nsomewhat similar to how emacs handles its <tt>buffers</tt>. This becomes\nintuitive and easier for <em>some</em> text processing tasks which require\nusage of <em>after</em> and <em>before</em> in text.</p>\n<p>An example problem is\n<a href=\"http://ergoemacs.org/emacs/elisp_process_html.html\" rel=\"nofollow\">here</a>. Using\n<tt>eep</tt>, the equivalent python code is</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">eep</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"&lt;p class='q'&gt;Q: Why&lt;/p&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">&lt;p class='a'&gt;Because&lt;/p&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">\n&lt;p class='a'&gt;You need to do&lt;/p&gt;</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\n&lt;p class='q'&gt;Q: How&lt;/p&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">\n&lt;p class='a'&gt;Do this&lt;/p&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">\n&lt;p class='a'&gt;And that&lt;/p&gt;\"\"\"</span>\n\n<span class=\"n\">es</span> <span class=\"o\">=</span> <span class=\"n\">eep</span><span class=\"o\">.</span><span class=\"n\">Searcher</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Before : </span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">es</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">search_forward</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;p class='q'&gt;\"</span><span class=\"p\">):</span>\n    <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">search_forward</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;p class='a'&gt;\"</span><span class=\"p\">)</span>\n    <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">swap_markers</span><span class=\"p\">()</span>\n    <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;div class='a'&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">search_forward</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;p class='q'&gt;\"</span><span class=\"p\">):</span>\n        <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">search_backward</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;/p&gt;\"</span><span class=\"p\">)</span>\n        <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">swap_markers</span><span class=\"p\">()</span>\n        <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">&lt;/div&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">goto</span><span class=\"p\">(</span><span class=\"s2\">\"end\"</span><span class=\"p\">)</span>\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">search_backward</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;p class='a'&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">search_forward</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;/p&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">&lt;/div&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">goto</span><span class=\"p\">(</span><span class=\"s2\">\"start\"</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">search_forward</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;p class='a'&gt;\"</span><span class=\"p\">):</span>\n    <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;p&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">goto</span><span class=\"p\">(</span><span class=\"s2\">\"start\"</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">search_forward</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;p class='q'&gt;Q: \"</span><span class=\"p\">):</span>\n    <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;p class='q'&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"After : </span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">es</span><span class=\"p\">))</span>\n</pre>\n<pre>Before :\n&lt;p <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s1\">'q'</span>&gt;Q: Why&lt;/p&gt;\n&lt;p <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s1\">'a'</span>&gt;Because&lt;/p&gt;\n&lt;p <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s1\">'a'</span>&gt;You need to <span class=\"k\">do</span>&lt;/p&gt;\n\n&lt;p <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s1\">'q'</span>&gt;Q: How&lt;/p&gt;\n&lt;p <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s1\">'a'</span>&gt;Do this&lt;/p&gt;\n&lt;p <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s1\">'a'</span>&gt;And that&lt;/p&gt;\n\n\nAfter :\n&lt;p <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s1\">'q'</span>&gt;Why&lt;/p&gt;\n&lt;div <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s1\">'a'</span>&gt;\n&lt;p&gt;Because&lt;/p&gt;\n&lt;p&gt;You need to <span class=\"k\">do</span>&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;p <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s1\">'q'</span>&gt;How&lt;/p&gt;\n&lt;div <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s1\">'a'</span>&gt;\n&lt;p&gt;Do this&lt;/p&gt;\n&lt;p&gt;And that&lt;/p&gt;\n&lt;/div&gt;\n</pre>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ul>\n<li>Install using <tt>pip install eep</tt></li>\n<li>Instantiate a searcher</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">eep</span>\n\n<span class=\"n\">es</span> <span class=\"o\">=</span> <span class=\"n\">eep</span><span class=\"o\">.</span><span class=\"n\">Searcher</span><span class=\"p\">(</span><span class=\"s2\">\"this is a sample text. this is a sentence.\"</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>A searcher has two markers for defining regions. A <tt>point</tt> moves\naround while searching, replacing, inserting etc. It is the <em>current</em>\nposition where operations are done.</li>\n<li><tt>mark</tt> moves after successful forward or backward searches to mark\nmatching region with the <tt>point</tt>.</li>\n</ul>\n<pre><span class=\"c1\"># Search forward for first match from current point</span>\n<span class=\"c1\"># Return true if match found</span>\n<span class=\"c1\"># Set mark in beginning and point at end</span>\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">search_forward</span><span class=\"p\">(</span><span class=\"s2\">\"th\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Search backward for first match from current point</span>\n<span class=\"c1\"># Return true if match found</span>\n<span class=\"c1\"># Set point in beginning and mark at end</span>\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">search_backward</span><span class=\"p\">(</span><span class=\"s2\">\"th\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Replace marked region</span>\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"dodo\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Insert at current point</span>\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s2\">\"dodo\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Move the point</span>\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">jump</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">goto</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"c1\"># also accepts \"start\" and \"end\" strings</span>\n\n<span class=\"c1\"># Exchange markers</span>\n<span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">swap_markers</span><span class=\"p\">()</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2653564, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2f7b066c74614a3d6b125c32830d7ace", "sha256": "7f3414c22d4eba91d8b3e0fa591277252a814b490150b66823e4d74da5c9addd"}, "downloads": -1, "filename": "eep-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2f7b066c74614a3d6b125c32830d7ace", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8108, "upload_time": "2016-05-27T21:48:14", "upload_time_iso_8601": "2016-05-27T21:48:14.459395Z", "url": "https://files.pythonhosted.org/packages/0c/a5/5bf0fc6393a17d3c8b4ac79dc09884a30d50ea1bbd941696d4467a150c2e/eep-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "34d6735d1d73ca10142dc27d64e8768f", "sha256": "42f8c266ab391b9e18e05e910362efc2f1abcbfdda8eb8e5eb5da1bcfe9e282d"}, "downloads": -1, "filename": "eep-0.1.1.tar.gz", "has_sig": false, "md5_digest": "34d6735d1d73ca10142dc27d64e8768f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4265, "upload_time": "2016-05-27T21:55:09", "upload_time_iso_8601": "2016-05-27T21:55:09.701140Z", "url": "https://files.pythonhosted.org/packages/c3/b0/5d0196e5633804a7b830c109d5b524ed162a38d5177c2ff3a0312c2d93f8/eep-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "157a279678faf54e3436f9ddc044317c", "sha256": "bef1fdf2b309a9c2974bed2c513dcc463425a3b50a6dd92091c097ab42f13fe3"}, "downloads": -1, "filename": "eep-0.1.2.tar.gz", "has_sig": false, "md5_digest": "157a279678faf54e3436f9ddc044317c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4207, "upload_time": "2017-02-19T22:00:24", "upload_time_iso_8601": "2017-02-19T22:00:24.092894Z", "url": "https://files.pythonhosted.org/packages/80/ef/1f56db21f9db85a373a03fc5477ee7fccac434e1d3f9e73362aa4bf1bba7/eep-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b4518776fc5789267c98342a64389a9a", "sha256": "6e0e2adcb8a0f3704c0caecedfe80c7762a54160cb5bdd68129f733a3be17d8d"}, "downloads": -1, "filename": "eep-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b4518776fc5789267c98342a64389a9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4246, "upload_time": "2017-02-19T22:14:39", "upload_time_iso_8601": "2017-02-19T22:14:39.669761Z", "url": "https://files.pythonhosted.org/packages/17/0a/b7c98699ce28e0d1385fea413e6c2f3d4ca6ff71ab179e6d581e1201f07e/eep-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b4518776fc5789267c98342a64389a9a", "sha256": "6e0e2adcb8a0f3704c0caecedfe80c7762a54160cb5bdd68129f733a3be17d8d"}, "downloads": -1, "filename": "eep-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b4518776fc5789267c98342a64389a9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4246, "upload_time": "2017-02-19T22:14:39", "upload_time_iso_8601": "2017-02-19T22:14:39.669761Z", "url": "https://files.pythonhosted.org/packages/17/0a/b7c98699ce28e0d1385fea413e6c2f3d4ca6ff71ab179e6d581e1201f07e/eep-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:25 2020"}