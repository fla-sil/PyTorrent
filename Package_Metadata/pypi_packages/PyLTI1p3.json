{"info": {"author": "Dmitry Viskov", "author_email": "dmitry.viskov@webenterprise.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Flask", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Security", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "LTI 1.3 Advantage Tool implementation in Python\n===============================================\n\n.. image:: https://img.shields.io/pypi/v/PyLTI1p3\n    :scale: 100%\n    :target: https://pypi.python.org/pypi/PyLTI1p3\n    :alt: PyPI\n\n.. image:: https://img.shields.io/pypi/pyversions/PyLTI1p3\n    :scale: 100%\n    :target: https://www.python.org/\n    :alt: Python\n\n.. image:: https://travis-ci.org/dmitry-viskov/pylti1.3.svg?branch=master\n    :scale: 100%\n    :target: https://travis-ci.org/dmitry-viskov/pylti1.3\n    :alt: Build Status\n\n.. image:: https://img.shields.io/github/license/dmitry-viskov/pylti1.3\n    :scale: 100%\n    :target: https://raw.githubusercontent.com/dmitry-viskov/pylti1.3/master/LICENSE\n    :alt: MIT\n\n\nThis project is a Python implementation of the similar `PHP tool`_.\nLibrary contains adapters for usage from Django and Flask web frameworks but there is no difficulty to adapt it to other frameworks: you should just re-implement ``OIDCLogin`` and ``MessageLaunch`` classes as it is already done in existing adapters.\n\n.. _PHP tool: https://github.com/IMSGlobal/lti-1-3-php-library\n\nExamples of usage\n=================\n\nDjango: https://github.com/dmitry-viskov/pylti1.3-django-example\n\nFlask: https://github.com/dmitry-viskov/pylti1.3-flask-example\n\nConfiguration\n=============\n\nTo configure your own tool you may use built-in adapters:\n\n.. code-block:: python\n\n    from pylti1p3.tool_config import ToolConfJsonFile\n    tool_conf = ToolConfJsonFile('path/to/json')\n\n    from pylti1p3.tool_config import ToolConfDict\n    settings = {\n        \"<issuer_1>\": { },  # one issuer ~ one client-id (outdated and not recommended way)\n        \"<issuer_2>\": [{ }, { }]  # one issuer ~ many client-ids (preferable way)\n    }\n    private_key = '...'\n    public_key = '...'\n    tool_conf = ToolConfDict(settings)\n\n    client_id = '...' # must be set in case of \"one issuer ~ many client-ids\" concept\n\n    tool_conf.set_private_key(iss, private_key, client_id=client_id)\n    tool_conf.set_public_key(iss, public_key, client_id=client_id)\n\nor create your own implementation. The ``pylti1p3.tool_config.ToolConfAbstract`` interface must be fully implemented for this to work.\nConcept of ``one issuer ~ many client-ids`` is a preferable way to organize configs and may be useful in case of integration with Canvas (https://canvas.instructure.com)\nor other Cloud LMS-es where platform doesn't change ``iss`` for each customer.\n\nIn case of Django Framework you may use ``DjangoDbToolConf`` (see `Configuration using Django Admin UI`_ section below)\n\n\nExample of JSON config:\n\n.. code-block:: javascript\n\n    {\n        \"iss1\": [{\n            \"default\": true,\n            \"client_id\": \"client_id1\",\n            \"auth_login_url\": \"auth_login_url1\",\n            \"auth_token_url\": \"auth_token_url1\",\n            \"auth_audience\": null,\n            \"key_set_url\": \"key_set_url1\",\n            \"key_set\": null,\n            \"private_key_file\": \"private.key\",\n            \"public_key_file\": \"public.key\",\n            \"deployment_ids\": [\"deployment_id1\", \"deployment_id2\"]\n        }, {\n            \"default\": false,\n            \"client_id\": \"client_id2\",\n            \"auth_login_url\": \"auth_login_url2\",\n            \"auth_token_url\": \"auth_token_url2\",\n            \"auth_audience\": null,\n            \"key_set_url\": \"key_set_url2\",\n            \"key_set\": null,\n            \"private_key_file\": \"private.key\",\n            \"public_key_file\": \"public.key\",\n            \"deployment_ids\": [\"deployment_id3\", \"deployment_id4\"]\n        }],\n        \"iss2\": [ ],\n        \"iss3\": { }\n    }\n\n\n| ``default (bool)`` - this iss config will be used in case if client-id was not passed on the login step\n| ``client_id`` - this is the id received in the 'aud' during a launch\n| ``auth_login_url`` - the platform's OIDC login endpoint\n| ``auth_token_url`` - the platform's service authorization endpoint\n| ``auth_audience`` - the platform's OAuth2 Audience (aud). Is used to get platform's access token. Usually the same as \"auth_token_url\" and could be skipped but in the common case could be a different url\n| ``key_set_url`` - the platform's JWKS endpoint\n| ``key_set`` - in case if platform's JWKS endpoint somehow unavailable you may paste JWKS here\n| ``private_key_file`` - relative path to the tool's private key\n| ``public_key_file`` - relative path to the tool's public key\n| ``deployment_ids (list)`` - The deployment_id passed by the platform during launch\n\nUsage with Django\n=================\n\n.. _Configuration:\n\nConfiguration using Django Admin UI\n-----------------------------------\n\n.. code-block:: python\n\n    # settings.py\n\n    INSTALLED_APPS = [\n        'django.contrib.admin',\n        ...\n        'pylti1p3.contrib.django.lti1p3_tool_config'\n    ]\n\n    # urls.py\n\n    urlpatterns = [\n        ...\n        path('admin/', admin.site.urls),\n        ...\n    ]\n\n    # views.py\n\n    from pylti1p3.contrib.django import DjangoDbToolConf\n\n    tool_conf = DjangoDbToolConf()\n\n\nOpen Id Connect Login Request\n-----------------------------\n\nLTI 1.3 uses a modified version of the OpenId Connect third party initiate login flow. This means that to do an LTI 1.3 launch, you must first receive a login initialization request and return to the platform.\n\nTo handle this request, you must first create a new ``OIDCLogin`` (or ``DjangoOIDCLogin``) object:\n\n.. code-block:: python\n\n    from pylti1p3.contrib.django import DjangoOIDCLogin\n\n    oidc_login = DjangoOIDCLogin(request, tool_conf)\n\nNow you must configure your login request with a return url (this must be preconfigured and white-listed on the tool).\nIf a redirect url is not given or the registration does not exist an ``pylti1p3.exception.OIDC_Exception`` will be thrown.\n\n.. code-block:: python\n\n    try:\n        oidc_login.redirect(get_launch_url(request))\n    except OIDC_Exception:\n        # display error page\n        log.error('Error doing OIDC login')\n\nWith the redirect, we can now redirect the user back to the tool.\nThere are three ways to do this:\n\nThis will add a HTTP 302 location header:\n\n.. code-block:: python\n\n    oidc_login.redirect(get_launch_url(request))\n\nThis will display some javascript to do the redirect instead of using a HTTP 302:\n\n.. code-block:: python\n\n    oidc_login.redirect(get_launch_url(request), js_redirect=True)\n\nYou can also get the url you need to redirect to, with all the necessary query parameters (if you would prefer to redirect in a custom way):\n\n.. code-block:: python\n\n    redirect_obj = oidc_login.get_redirect_object()\n    redirect_url = redirect_obj.get_redirect_url()\n\nRedirect is done, we can move onto the launch.\n\nLTI Message Launches\n--------------------\n\nNow that we have done the OIDC log the platform will launch back to the tool. To handle this request, first we need to create a new ``MessageLaunch`` (or ``DjangoMessageLaunch``) object.\n\n.. code-block:: python\n\n    message_launch = DjangoMessageLaunch(request, tool_conf)\n\nOnce we have the message launch, we can validate it. Validation is transparent - it's done once before you try to access the message body:\n\n.. code-block:: python\n\n    try:\n        launch_data = message_launch.get_launch_data()\n    except LtiException:\n        log.error('Launch validation failed')\n\nYou may do it more explicitly:\n\n.. code-block:: python\n\n    try:\n        launch_data = message_launch.set_auto_validation(enable=False).validate()\n    except LtiException:\n        log.error('Launch validation failed')\n\nNow we know the launch is valid we can find out more information about the launch.\n\nCheck if we have a resource launch or a deep linking launch:\n\n.. code-block:: python\n\n    if message_launch.is_resource_launch():\n        # Resource Launch!\n    elif message_launch.is_deep_link_launch():\n        # Deep Linking Launch!\n    else:\n        # Unknown launch type\n\nCheck which services we have access to:\n\n.. code-block:: python\n\n    if message_launch.has_ags():\n        # Has Assignments and Grades Service\n    if message_launch.has_nrps():\n        # Has Names and Roles Service\n\nAccessing Cached Launch Requests\n--------------------------------\n\nIt is likely that you will want to refer back to a launch later during subsequent requests. This is done using the launch id to identify a cached request. The launch id can be found using:\n\n.. code-block:: python\n\n    launch_id = message_launch.get_launch_id()\n\nOnce you have the launch id, you can link it to your session and pass it along as a query parameter.\n\nRetrieving a launch using the launch id can be done using:\n\n.. code-block:: python\n\n    message_launch = DjangoMessageLaunch.from_cache(launch_id, request, tool_conf)\n\nOnce retrieved, you can call any of the methods on the launch object as normal, e.g.\n\n.. code-block:: python\n\n    if message_launch.has_ags():\n        # Has Assignments and Grades Service\n\nDeep Linking Responses\n----------------------\n\nIf you receive a deep linking launch, it is very likely that you are going to want to respond to the deep linking request with resources for the platform.\n\nTo create a deep link response you will need to get the deep link for the current launch:\n\n.. code-block:: python\n\n    deep_link = message_launch.get_deep_link()\n\nNow we need to create ``pylti1p3.deep_link_resource.DeepLinkResource`` to return:\n\n.. code-block:: python\n\n    resource = DeepLinkResource()\n    resource.set_url(\"https://my.tool/launch\")\\\n        .set_custom_params({'my_param': my_param})\\\n        .set_title('My Resource')\n\nEverything is set to return the resource to the platform. There are two methods of doing this.\n\nThe following method will output the html for an aut-posting form for you.\n\n.. code-block:: python\n\n    deep_link.output_response_form([resource1, resource2])\n\nAlternatively you can just request the signed JWT that will need posting back to the platform by calling.\n\n.. code-block:: python\n\n    deep_link.get_response_jwt([resource1, resource2])\n\nNames and Roles Service\n-----------------------\n\nBefore using names and roles you should check that you have access to it:\n\n.. code-block:: python\n\n    if not message_launch.has_nrps():\n        raise Exception(\"Don't have names and roles!\")\n\nOnce we know we can access it, we can get an instance of the service from the launch.\n\n.. code-block:: python\n\n    nrps = message_launch.get_nrps()\n\nFrom the service we can get list of all members by calling:\n\n.. code-block:: python\n\n    members = nrps.get_members()\n\nAssignments and Grades Service\n------------------------------\n\nBefore using assignments and grades you should check that you have access to it:\n\n.. code-block:: python\n\n    if not launch.has_ags():\n        raise Exception(\"Don't have assignments and grades!\")\n\nOnce we know we can access it, we can get an instance of the service from the launch:\n\n.. code-block:: python\n\n    ags = launch.get_ags()\n\nTo pass a grade back to the platform, you will need to create a ``pylti1p3.grade.Grade`` object and populate it with the necessary information:\n\n.. code-block:: python\n\n    gr = Grade()\n    gr.set_score_given(earned_score)\\\n         .set_score_maximum(100)\\\n         .set_timestamp(datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S+0000'))\\\n         .set_activity_progress('Completed')\\\n         .set_grading_progress('FullyGraded')\\\n         .set_user_id(external_user_id)\n\nTo send the grade to the platform we can call:\n\n.. code-block:: python\n\n    ags.put_grade(gr)\n\nThis will put the grade into the default provided lineitem. If no default lineitem exists it will create one.\n\nIf you want to send multiple types of grade back, that can be done by specifying a ``pylti1p3.lineitem.LineItem``:\n\n.. code-block:: python\n\n    line_item = LineItem()\n    line_item.set_tag('grade')\\\n        .set_score_maximum(100)\\\n        .set_label('Grade')\n\n    ags.put_grade(gr, line_item);\n\nIf a lineitem with the same ``tag`` exists, that lineitem will be used, otherwise a new lineitem will be created.\n\nUsage with Flask\n================\n\nOpen Id Connect Login Request\n-----------------------------\n\nThis is draft of API endpoint. Wrap it in library of your choice.\n\nCreate ``FlaskRequest`` adapter. Then create instance of ``FlaskOIDCLogin``. ``redirect`` method will return instance of ``werkzeug.wrappers.Response`` that points to LTI platform if login was successful. Handle exceptions.\n\n.. code-block:: python\n\n    from flask import request, session\n    from pylti1p3.flask_adapter import (FlaskRequest, FlaskOIDCLogin)\n\n    def login(request_params_dict):\n\n        tool_conf = ... # See Configuration chapter above\n\n        # FlaskRequest by default use flask.request and flask.session\n        # so in this case you may define request object without any arguments:\n\n        request = FlaskRequest()\n\n        # in case of using different request object (for example webargs or something like this)\n        # you may pass your own values:\n\n        request = FlaskRequest(\n            cookies=request.cookies,\n            session=session,\n            request_data=request_params_dict,\n            request_is_secure=request.is_secure\n        )\n\n        oidc_login = FlaskOIDCLogin(\n            request=request,\n            tool_config=tool_conf,\n            session_service=FlaskSessionService(request),\n            cookie_service=FlaskCookieService(request)\n        )\n\n        return oidc_login.redirect(request.get_param('target_link_uri'))\n\nLTI Message Launches\n--------------------\n\nThis is draft of API endpoint. Wrap it in library of your choice.\n\nCreate ``FlaskRequest`` adapter. Then create instance of ``FlaskMessageLaunch``. It lets you access data from LTI launch message if launch was successful. Handle exceptions.\n\n.. code-block:: python\n\n    from flask import request, session\n    from werkzeug.utils import redirect\n    from pylti1p3.flask_adapter import (FlaskRequest, FlaskMessageLaunch)\n\n    def launch(request_params_dict):\n\n        tool_conf = ... # See Configuration chapter above\n\n        request = FlaskRequest()\n\n        # or\n\n        request = FlaskRequest(\n            cookies=...,\n            session=...,\n            request_data=...,\n            request_is_secure=...\n        )\n\n        message_launch = FlaskMessageLaunch(\n            request=request,\n            tool_config=tool_conf\n        )\n\n        email = message_launch.get_launch_data().get('email')\n\n        # Place your user creation/update/login logic\n        # and redirect to tool content here\n\nCookies issue in the iframes\n============================\n\nSome browsers may deny to save cookies in the iframes. For example `Google Chrome from ver.80 deny to save`_ all cookies in\nthe iframes except cookies with flags ``Secure`` (i.e HTTPS usage) and ``SameSite=None``. `Safari deny to save`_\nall third-party cookies by default. ``pylti1p3`` library contains workaround for such behaviour:\n\n.. _Google Chrome from ver.80 deny to save: https://blog.heroku.com/chrome-changes-samesite-cookie\n.. _Safari deny to save: https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/\n\n.. code-block:: python\n\n    def login():\n        ...\n        return oidc_login\\\n            .enable_check_cookies()\\\n            .redirect(target_link_uri)\n\nAfter this the special JS code will try to write and then read test cookie instead of redirect. User will see\n`special page`_ with asking to open current URL in the new window in case if cookies are unavailable. In case if\ncookies are allowed user will be transparently redirected to the next page. All texts are configurable with passing arguments:\n\n.. _special page: https://raw.githubusercontent.com/dmitry-viskov/repos-assets/master/pylti1p3/examples/cookies-check/001.png\n\n.. code-block:: python\n\n    oidc_login.enable_check_cookies(main_msg, click_msg, loading_msg)\n\nAlso you may have troubles with default framework sessions (because ``pylti1p3`` library can't control your framework\nsettings connected with the session ID cookie). So without necessary settings user's session could be unavailable in\ncase of iframe usage. To avoid this troubles it is recommended to change default session adapter to the new cache\nadapter (with memcache/redis backend) and as a consequence allow library to set it's own LTI1.3 session id cookie\n(that will be set with all necessary params like `Secure` and `SameSite=None`).\n\nDjango cache data storage\n-------------------------\n\n.. code-block:: python\n\n    from pylti1p3.contrib.django import DjangoCacheDataStorage\n\n    def login(request):\n        ...\n        launch_data_storage = DjangoCacheDataStorage(cache_name='default')\n        oidc_login = DjangoOIDCLogin(request, tool_conf, launch_data_storage=launch_data_storage)\n\n    def launch(request):\n        ...\n        launch_data_storage = DjangoCacheDataStorage(cache_name='default')\n        message_launch = DjangoMessageLaunch(request, tool_conf, launch_data_storage=launch_data_storage)\n\n    def restore_launch(request):\n        ...\n        launch_data_storage = get_launch_data_storage(cache_name='default')\n        message_launch = DjangoMessageLaunch.from_cache(launch_id, request, tool_conf,\n                                                        launch_data_storage=launch_data_storage)\n\nFlask cache data storage\n-------------------------\n\n.. code-block:: python\n\n    from flask_caching import Cache\n    from pylti1p3.contrib.flask import FlaskCacheDataStorage\n\n    cache = Cache(app)\n\n    def login():\n        ...\n        launch_data_storage = FlaskCacheDataStorage(cache)\n        oidc_login = DjangoOIDCLogin(request, tool_conf, launch_data_storage=launch_data_storage)\n\n    def launch():\n        ...\n        launch_data_storage = FlaskCacheDataStorage(cache)\n        message_launch = DjangoMessageLaunch(request, tool_conf, launch_data_storage=launch_data_storage)\n\n    def restore_launch():\n        ...\n        launch_data_storage = FlaskCacheDataStorage(cache)\n        message_launch = DjangoMessageLaunch.from_cache(launch_id, request, tool_conf,\n                                                        launch_data_storage=launch_data_storage)\n\nCache for Public Key\n====================\n\nLibrary try to fetch platform's public key everytime on the message launch step. This public key may be stored in cache\n(memcache/redis) to speed-up launch process:\n\n.. code-block:: python\n\n    # Django cache storage:\n    launch_data_storage = DjangoCacheDataStorage()\n\n    # Flask cache storage:\n    launch_data_storage = FlaskCacheDataStorage(cache)\n\n    message_launch.set_public_key_caching(launch_data_storage, cache_lifetime=7200)\n\n\nAPI to get JWKS\n===============\n\nYou may generate JWKS from Tool Config object:\n\n.. code-block:: python\n\n    tool_conf.set_public_key(iss, public_key, client_id=client_id)\n    jwks_dict = tool_conf.get_jwks()  # {\"keys\": [{ ... }]}\n\n    # or you may specify iss and client_id:\n    jwks_dict = tool_conf.get_jwks(iss, client_id)  # {\"keys\": [{ ... }]}\n\nDon't forget to set public key because without it JWKS can't be generated.\nAlso you may generate JWK for any public key using construction below:\n\n.. code-block:: python\n\n    from pylti1p3.registration import Registration\n\n    jwk_dict = Registration.get_jwk(public_key)\n    # {\"e\": ..., \"kid\": ..., \"kty\": ..., \"n\": ..., \"alg\": ..., \"use\": ...}\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dmitry-viskov/pylti1.3", "keywords": "pylti,pylti1p3,lti,lti1.3,lti1p3,django,flask", "license": "MIT", "maintainer": "Dmitry Viskov", "maintainer_email": "", "name": "PyLTI1p3", "package_url": "https://pypi.org/project/PyLTI1p3/", "platform": "", "project_url": "https://pypi.org/project/PyLTI1p3/", "project_urls": {"Homepage": "https://github.com/dmitry-viskov/pylti1.3"}, "release_url": "https://pypi.org/project/PyLTI1p3/1.7.0/", "requires_dist": ["pyjwt (>=1.5)", "jwcrypto", "requests"], "requires_python": "", "summary": "LTI 1.3 Advantage Tool implementation in Python", "version": "1.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"lti-1-3-advantage-tool-implementation-in-python\">\n<h2>LTI 1.3 Advantage Tool implementation in Python</h2>\n<a href=\"https://pypi.python.org/pypi/PyLTI1p3\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f0709810b05a13be69faf67188145bd17f9f66b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f50794c5449317033\"></a>\n<a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8240fcf5cf79831deee27e4ce44f0992ebb0032a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f50794c5449317033\"></a>\n<a href=\"https://travis-ci.org/dmitry-viskov/pylti1.3\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b7ddb1468109ba67d70ea031b1bb3e8cf3adaab/68747470733a2f2f7472617669732d63692e6f72672f646d697472792d7669736b6f762f70796c7469312e332e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://raw.githubusercontent.com/dmitry-viskov/pylti1.3/master/LICENSE\" rel=\"nofollow\"><img alt=\"MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6eb38dacef7af8d0147352807be6248457d2eca/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f646d697472792d7669736b6f762f70796c7469312e33\"></a>\n<p>This project is a Python implementation of the similar <a href=\"https://github.com/IMSGlobal/lti-1-3-php-library\" rel=\"nofollow\">PHP tool</a>.\nLibrary contains adapters for usage from Django and Flask web frameworks but there is no difficulty to adapt it to other frameworks: you should just re-implement <tt>OIDCLogin</tt> and <tt>MessageLaunch</tt> classes as it is already done in existing adapters.</p>\n</div>\n<div id=\"examples-of-usage\">\n<h2>Examples of usage</h2>\n<p>Django: <a href=\"https://github.com/dmitry-viskov/pylti1.3-django-example\" rel=\"nofollow\">https://github.com/dmitry-viskov/pylti1.3-django-example</a></p>\n<p>Flask: <a href=\"https://github.com/dmitry-viskov/pylti1.3-flask-example\" rel=\"nofollow\">https://github.com/dmitry-viskov/pylti1.3-flask-example</a></p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>To configure your own tool you may use built-in adapters:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylti1p3.tool_config</span> <span class=\"kn\">import</span> <span class=\"n\">ToolConfJsonFile</span>\n<span class=\"n\">tool_conf</span> <span class=\"o\">=</span> <span class=\"n\">ToolConfJsonFile</span><span class=\"p\">(</span><span class=\"s1\">'path/to/json'</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pylti1p3.tool_config</span> <span class=\"kn\">import</span> <span class=\"n\">ToolConfDict</span>\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"&lt;issuer_1&gt;\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">},</span>  <span class=\"c1\"># one issuer ~ one client-id (outdated and not recommended way)</span>\n    <span class=\"s2\">\"&lt;issuer_2&gt;\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"p\">}]</span>  <span class=\"c1\"># one issuer ~ many client-ids (preferable way)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">private_key</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>\n<span class=\"n\">public_key</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>\n<span class=\"n\">tool_conf</span> <span class=\"o\">=</span> <span class=\"n\">ToolConfDict</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n\n<span class=\"n\">client_id</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span> <span class=\"c1\"># must be set in case of \"one issuer ~ many client-ids\" concept</span>\n\n<span class=\"n\">tool_conf</span><span class=\"o\">.</span><span class=\"n\">set_private_key</span><span class=\"p\">(</span><span class=\"n\">iss</span><span class=\"p\">,</span> <span class=\"n\">private_key</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"n\">client_id</span><span class=\"p\">)</span>\n<span class=\"n\">tool_conf</span><span class=\"o\">.</span><span class=\"n\">set_public_key</span><span class=\"p\">(</span><span class=\"n\">iss</span><span class=\"p\">,</span> <span class=\"n\">public_key</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"n\">client_id</span><span class=\"p\">)</span>\n</pre>\n<p>or create your own implementation. The <tt>pylti1p3.tool_config.ToolConfAbstract</tt> interface must be fully implemented for this to work.\nConcept of <tt>one issuer ~ many <span class=\"pre\">client-ids</span></tt> is a preferable way to organize configs and may be useful in case of integration with Canvas (<a href=\"https://canvas.instructure.com\" rel=\"nofollow\">https://canvas.instructure.com</a>)\nor other Cloud LMS-es where platform doesn\u2019t change <tt>iss</tt> for each customer.</p>\n<p>In case of Django Framework you may use <tt>DjangoDbToolConf</tt> (see <a href=\"#configuration-using-django-admin-ui\" rel=\"nofollow\">Configuration using Django Admin UI</a> section below)</p>\n<p>Example of JSON config:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"iss1\"</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">\"default\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"client_id\"</span><span class=\"o\">:</span> <span class=\"s2\">\"client_id1\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"auth_login_url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"auth_login_url1\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"auth_token_url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"auth_token_url1\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"auth_audience\"</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"key_set_url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"key_set_url1\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"key_set\"</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"private_key_file\"</span><span class=\"o\">:</span> <span class=\"s2\">\"private.key\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"public_key_file\"</span><span class=\"o\">:</span> <span class=\"s2\">\"public.key\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"deployment_ids\"</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"deployment_id1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"deployment_id2\"</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"default\"</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"client_id\"</span><span class=\"o\">:</span> <span class=\"s2\">\"client_id2\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"auth_login_url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"auth_login_url2\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"auth_token_url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"auth_token_url2\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"auth_audience\"</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"key_set_url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"key_set_url2\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"key_set\"</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"private_key_file\"</span><span class=\"o\">:</span> <span class=\"s2\">\"private.key\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"public_key_file\"</span><span class=\"o\">:</span> <span class=\"s2\">\"public.key\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"deployment_ids\"</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"deployment_id3\"</span><span class=\"p\">,</span> <span class=\"s2\">\"deployment_id4\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}],</span>\n    <span class=\"s2\">\"iss2\"</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"p\">],</span>\n    <span class=\"s2\">\"iss3\"</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<div>\n<div><tt>default (bool)</tt> - this iss config will be used in case if client-id was not passed on the login step</div>\n<div><tt>client_id</tt> - this is the id received in the \u2018aud\u2019 during a launch</div>\n<div><tt>auth_login_url</tt> - the platform\u2019s OIDC login endpoint</div>\n<div><tt>auth_token_url</tt> - the platform\u2019s service authorization endpoint</div>\n<div><tt>auth_audience</tt> - the platform\u2019s OAuth2 Audience (aud). Is used to get platform\u2019s access token. Usually the same as \u201cauth_token_url\u201d and could be skipped but in the common case could be a different url</div>\n<div><tt>key_set_url</tt> - the platform\u2019s JWKS endpoint</div>\n<div><tt>key_set</tt> - in case if platform\u2019s JWKS endpoint somehow unavailable you may paste JWKS here</div>\n<div><tt>private_key_file</tt> - relative path to the tool\u2019s private key</div>\n<div><tt>public_key_file</tt> - relative path to the tool\u2019s public key</div>\n<div><tt>deployment_ids (list)</tt> - The deployment_id passed by the platform during launch</div>\n</div>\n</div>\n<div id=\"usage-with-django\">\n<h2>Usage with Django</h2>\n<div id=\"configuration-using-django-admin-ui\">\n<span id=\"id1\"></span><h3>Configuration using Django Admin UI</h3>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'pylti1p3.contrib.django.lti1p3_tool_config'</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># urls.py</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># views.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pylti1p3.contrib.django</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoDbToolConf</span>\n\n<span class=\"n\">tool_conf</span> <span class=\"o\">=</span> <span class=\"n\">DjangoDbToolConf</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"open-id-connect-login-request\">\n<h3>Open Id Connect Login Request</h3>\n<p>LTI 1.3 uses a modified version of the OpenId Connect third party initiate login flow. This means that to do an LTI 1.3 launch, you must first receive a login initialization request and return to the platform.</p>\n<p>To handle this request, you must first create a new <tt>OIDCLogin</tt> (or <tt>DjangoOIDCLogin</tt>) object:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylti1p3.contrib.django</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoOIDCLogin</span>\n\n<span class=\"n\">oidc_login</span> <span class=\"o\">=</span> <span class=\"n\">DjangoOIDCLogin</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">tool_conf</span><span class=\"p\">)</span>\n</pre>\n<p>Now you must configure your login request with a return url (this must be preconfigured and white-listed on the tool).\nIf a redirect url is not given or the registration does not exist an <tt>pylti1p3.exception.OIDC_Exception</tt> will be thrown.</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">oidc_login</span><span class=\"o\">.</span><span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">get_launch_url</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">))</span>\n<span class=\"k\">except</span> <span class=\"n\">OIDC_Exception</span><span class=\"p\">:</span>\n    <span class=\"c1\"># display error page</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'Error doing OIDC login'</span><span class=\"p\">)</span>\n</pre>\n<p>With the redirect, we can now redirect the user back to the tool.\nThere are three ways to do this:</p>\n<p>This will add a HTTP 302 location header:</p>\n<pre><span class=\"n\">oidc_login</span><span class=\"o\">.</span><span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">get_launch_url</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">))</span>\n</pre>\n<p>This will display some javascript to do the redirect instead of using a HTTP 302:</p>\n<pre><span class=\"n\">oidc_login</span><span class=\"o\">.</span><span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">get_launch_url</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">),</span> <span class=\"n\">js_redirect</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>You can also get the url you need to redirect to, with all the necessary query parameters (if you would prefer to redirect in a custom way):</p>\n<pre><span class=\"n\">redirect_obj</span> <span class=\"o\">=</span> <span class=\"n\">oidc_login</span><span class=\"o\">.</span><span class=\"n\">get_redirect_object</span><span class=\"p\">()</span>\n<span class=\"n\">redirect_url</span> <span class=\"o\">=</span> <span class=\"n\">redirect_obj</span><span class=\"o\">.</span><span class=\"n\">get_redirect_url</span><span class=\"p\">()</span>\n</pre>\n<p>Redirect is done, we can move onto the launch.</p>\n</div>\n<div id=\"lti-message-launches\">\n<h3>LTI Message Launches</h3>\n<p>Now that we have done the OIDC log the platform will launch back to the tool. To handle this request, first we need to create a new <tt>MessageLaunch</tt> (or <tt>DjangoMessageLaunch</tt>) object.</p>\n<pre><span class=\"n\">message_launch</span> <span class=\"o\">=</span> <span class=\"n\">DjangoMessageLaunch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">tool_conf</span><span class=\"p\">)</span>\n</pre>\n<p>Once we have the message launch, we can validate it. Validation is transparent - it\u2019s done once before you try to access the message body:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">launch_data</span> <span class=\"o\">=</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">get_launch_data</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">LtiException</span><span class=\"p\">:</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'Launch validation failed'</span><span class=\"p\">)</span>\n</pre>\n<p>You may do it more explicitly:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">launch_data</span> <span class=\"o\">=</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">set_auto_validation</span><span class=\"p\">(</span><span class=\"n\">enable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">LtiException</span><span class=\"p\">:</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'Launch validation failed'</span><span class=\"p\">)</span>\n</pre>\n<p>Now we know the launch is valid we can find out more information about the launch.</p>\n<p>Check if we have a resource launch or a deep linking launch:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">is_resource_launch</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Resource Launch!</span>\n<span class=\"k\">elif</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">is_deep_link_launch</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Deep Linking Launch!</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Unknown launch type</span>\n</pre>\n<p>Check which services we have access to:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">has_ags</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Has Assignments and Grades Service</span>\n<span class=\"k\">if</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">has_nrps</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Has Names and Roles Service</span>\n</pre>\n</div>\n<div id=\"accessing-cached-launch-requests\">\n<h3>Accessing Cached Launch Requests</h3>\n<p>It is likely that you will want to refer back to a launch later during subsequent requests. This is done using the launch id to identify a cached request. The launch id can be found using:</p>\n<pre><span class=\"n\">launch_id</span> <span class=\"o\">=</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">get_launch_id</span><span class=\"p\">()</span>\n</pre>\n<p>Once you have the launch id, you can link it to your session and pass it along as a query parameter.</p>\n<p>Retrieving a launch using the launch id can be done using:</p>\n<pre><span class=\"n\">message_launch</span> <span class=\"o\">=</span> <span class=\"n\">DjangoMessageLaunch</span><span class=\"o\">.</span><span class=\"n\">from_cache</span><span class=\"p\">(</span><span class=\"n\">launch_id</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">tool_conf</span><span class=\"p\">)</span>\n</pre>\n<p>Once retrieved, you can call any of the methods on the launch object as normal, e.g.</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">has_ags</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Has Assignments and Grades Service</span>\n</pre>\n</div>\n<div id=\"deep-linking-responses\">\n<h3>Deep Linking Responses</h3>\n<p>If you receive a deep linking launch, it is very likely that you are going to want to respond to the deep linking request with resources for the platform.</p>\n<p>To create a deep link response you will need to get the deep link for the current launch:</p>\n<pre><span class=\"n\">deep_link</span> <span class=\"o\">=</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">get_deep_link</span><span class=\"p\">()</span>\n</pre>\n<p>Now we need to create <tt>pylti1p3.deep_link_resource.DeepLinkResource</tt> to return:</p>\n<pre><span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">DeepLinkResource</span><span class=\"p\">()</span>\n<span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">set_url</span><span class=\"p\">(</span><span class=\"s2\">\"https://my.tool/launch\"</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">set_custom_params</span><span class=\"p\">({</span><span class=\"s1\">'my_param'</span><span class=\"p\">:</span> <span class=\"n\">my_param</span><span class=\"p\">})</span>\\\n    <span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">'My Resource'</span><span class=\"p\">)</span>\n</pre>\n<p>Everything is set to return the resource to the platform. There are two methods of doing this.</p>\n<p>The following method will output the html for an aut-posting form for you.</p>\n<pre><span class=\"n\">deep_link</span><span class=\"o\">.</span><span class=\"n\">output_response_form</span><span class=\"p\">([</span><span class=\"n\">resource1</span><span class=\"p\">,</span> <span class=\"n\">resource2</span><span class=\"p\">])</span>\n</pre>\n<p>Alternatively you can just request the signed JWT that will need posting back to the platform by calling.</p>\n<pre><span class=\"n\">deep_link</span><span class=\"o\">.</span><span class=\"n\">get_response_jwt</span><span class=\"p\">([</span><span class=\"n\">resource1</span><span class=\"p\">,</span> <span class=\"n\">resource2</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"names-and-roles-service\">\n<h3>Names and Roles Service</h3>\n<p>Before using names and roles you should check that you have access to it:</p>\n<pre><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">has_nrps</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"Don't have names and roles!\"</span><span class=\"p\">)</span>\n</pre>\n<p>Once we know we can access it, we can get an instance of the service from the launch.</p>\n<pre><span class=\"n\">nrps</span> <span class=\"o\">=</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">get_nrps</span><span class=\"p\">()</span>\n</pre>\n<p>From the service we can get list of all members by calling:</p>\n<pre><span class=\"n\">members</span> <span class=\"o\">=</span> <span class=\"n\">nrps</span><span class=\"o\">.</span><span class=\"n\">get_members</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"assignments-and-grades-service\">\n<h3>Assignments and Grades Service</h3>\n<p>Before using assignments and grades you should check that you have access to it:</p>\n<pre><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">launch</span><span class=\"o\">.</span><span class=\"n\">has_ags</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"Don't have assignments and grades!\"</span><span class=\"p\">)</span>\n</pre>\n<p>Once we know we can access it, we can get an instance of the service from the launch:</p>\n<pre><span class=\"n\">ags</span> <span class=\"o\">=</span> <span class=\"n\">launch</span><span class=\"o\">.</span><span class=\"n\">get_ags</span><span class=\"p\">()</span>\n</pre>\n<p>To pass a grade back to the platform, you will need to create a <tt>pylti1p3.grade.Grade</tt> object and populate it with the necessary information:</p>\n<pre><span class=\"n\">gr</span> <span class=\"o\">=</span> <span class=\"n\">Grade</span><span class=\"p\">()</span>\n<span class=\"n\">gr</span><span class=\"o\">.</span><span class=\"n\">set_score_given</span><span class=\"p\">(</span><span class=\"n\">earned_score</span><span class=\"p\">)</span>\\\n     <span class=\"o\">.</span><span class=\"n\">set_score_maximum</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\\\n     <span class=\"o\">.</span><span class=\"n\">set_timestamp</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">T%H:%M:%S+0000'</span><span class=\"p\">))</span>\\\n     <span class=\"o\">.</span><span class=\"n\">set_activity_progress</span><span class=\"p\">(</span><span class=\"s1\">'Completed'</span><span class=\"p\">)</span>\\\n     <span class=\"o\">.</span><span class=\"n\">set_grading_progress</span><span class=\"p\">(</span><span class=\"s1\">'FullyGraded'</span><span class=\"p\">)</span>\\\n     <span class=\"o\">.</span><span class=\"n\">set_user_id</span><span class=\"p\">(</span><span class=\"n\">external_user_id</span><span class=\"p\">)</span>\n</pre>\n<p>To send the grade to the platform we can call:</p>\n<pre><span class=\"n\">ags</span><span class=\"o\">.</span><span class=\"n\">put_grade</span><span class=\"p\">(</span><span class=\"n\">gr</span><span class=\"p\">)</span>\n</pre>\n<p>This will put the grade into the default provided lineitem. If no default lineitem exists it will create one.</p>\n<p>If you want to send multiple types of grade back, that can be done by specifying a <tt>pylti1p3.lineitem.LineItem</tt>:</p>\n<pre><span class=\"n\">line_item</span> <span class=\"o\">=</span> <span class=\"n\">LineItem</span><span class=\"p\">()</span>\n<span class=\"n\">line_item</span><span class=\"o\">.</span><span class=\"n\">set_tag</span><span class=\"p\">(</span><span class=\"s1\">'grade'</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">set_score_maximum</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">set_label</span><span class=\"p\">(</span><span class=\"s1\">'Grade'</span><span class=\"p\">)</span>\n\n<span class=\"n\">ags</span><span class=\"o\">.</span><span class=\"n\">put_grade</span><span class=\"p\">(</span><span class=\"n\">gr</span><span class=\"p\">,</span> <span class=\"n\">line_item</span><span class=\"p\">);</span>\n</pre>\n<p>If a lineitem with the same <tt>tag</tt> exists, that lineitem will be used, otherwise a new lineitem will be created.</p>\n</div>\n</div>\n<div id=\"usage-with-flask\">\n<h2>Usage with Flask</h2>\n<div id=\"id2\">\n<h3>Open Id Connect Login Request</h3>\n<p>This is draft of API endpoint. Wrap it in library of your choice.</p>\n<p>Create <tt>FlaskRequest</tt> adapter. Then create instance of <tt>FlaskOIDCLogin</tt>. <tt>redirect</tt> method will return instance of <tt>werkzeug.wrappers.Response</tt> that points to LTI platform if login was successful. Handle exceptions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">session</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylti1p3.flask_adapter</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">FlaskRequest</span><span class=\"p\">,</span> <span class=\"n\">FlaskOIDCLogin</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request_params_dict</span><span class=\"p\">):</span>\n\n    <span class=\"n\">tool_conf</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"c1\"># See Configuration chapter above</span>\n\n    <span class=\"c1\"># FlaskRequest by default use flask.request and flask.session</span>\n    <span class=\"c1\"># so in this case you may define request object without any arguments:</span>\n\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">FlaskRequest</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># in case of using different request object (for example webargs or something like this)</span>\n    <span class=\"c1\"># you may pass your own values:</span>\n\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">FlaskRequest</span><span class=\"p\">(</span>\n        <span class=\"n\">cookies</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">,</span>\n        <span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">,</span>\n        <span class=\"n\">request_data</span><span class=\"o\">=</span><span class=\"n\">request_params_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">request_is_secure</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">is_secure</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">oidc_login</span> <span class=\"o\">=</span> <span class=\"n\">FlaskOIDCLogin</span><span class=\"p\">(</span>\n        <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">,</span>\n        <span class=\"n\">tool_config</span><span class=\"o\">=</span><span class=\"n\">tool_conf</span><span class=\"p\">,</span>\n        <span class=\"n\">session_service</span><span class=\"o\">=</span><span class=\"n\">FlaskSessionService</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">),</span>\n        <span class=\"n\">cookie_service</span><span class=\"o\">=</span><span class=\"n\">FlaskCookieService</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">oidc_login</span><span class=\"o\">.</span><span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_param</span><span class=\"p\">(</span><span class=\"s1\">'target_link_uri'</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"id3\">\n<h3>LTI Message Launches</h3>\n<p>This is draft of API endpoint. Wrap it in library of your choice.</p>\n<p>Create <tt>FlaskRequest</tt> adapter. Then create instance of <tt>FlaskMessageLaunch</tt>. It lets you access data from LTI launch message if launch was successful. Handle exceptions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">session</span>\n<span class=\"kn\">from</span> <span class=\"nn\">werkzeug.utils</span> <span class=\"kn\">import</span> <span class=\"n\">redirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylti1p3.flask_adapter</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">FlaskRequest</span><span class=\"p\">,</span> <span class=\"n\">FlaskMessageLaunch</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">launch</span><span class=\"p\">(</span><span class=\"n\">request_params_dict</span><span class=\"p\">):</span>\n\n    <span class=\"n\">tool_conf</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"c1\"># See Configuration chapter above</span>\n\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">FlaskRequest</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># or</span>\n\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">FlaskRequest</span><span class=\"p\">(</span>\n        <span class=\"n\">cookies</span><span class=\"o\">=...</span><span class=\"p\">,</span>\n        <span class=\"n\">session</span><span class=\"o\">=...</span><span class=\"p\">,</span>\n        <span class=\"n\">request_data</span><span class=\"o\">=...</span><span class=\"p\">,</span>\n        <span class=\"n\">request_is_secure</span><span class=\"o\">=...</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">message_launch</span> <span class=\"o\">=</span> <span class=\"n\">FlaskMessageLaunch</span><span class=\"p\">(</span>\n        <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">,</span>\n        <span class=\"n\">tool_config</span><span class=\"o\">=</span><span class=\"n\">tool_conf</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">get_launch_data</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'email'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Place your user creation/update/login logic</span>\n    <span class=\"c1\"># and redirect to tool content here</span>\n</pre>\n</div>\n</div>\n<div id=\"cookies-issue-in-the-iframes\">\n<h2>Cookies issue in the iframes</h2>\n<p>Some browsers may deny to save cookies in the iframes. For example <a href=\"https://blog.heroku.com/chrome-changes-samesite-cookie\" rel=\"nofollow\">Google Chrome from ver.80 deny to save</a> all cookies in\nthe iframes except cookies with flags <tt>Secure</tt> (i.e HTTPS usage) and <tt>SameSite=None</tt>. <a href=\"https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/\" rel=\"nofollow\">Safari deny to save</a>\nall third-party cookies by default. <tt>pylti1p3</tt> library contains workaround for such behaviour:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">oidc_login</span>\\\n        <span class=\"o\">.</span><span class=\"n\">enable_check_cookies</span><span class=\"p\">()</span>\\\n        <span class=\"o\">.</span><span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">target_link_uri</span><span class=\"p\">)</span>\n</pre>\n<p>After this the special JS code will try to write and then read test cookie instead of redirect. User will see\n<a href=\"https://raw.githubusercontent.com/dmitry-viskov/repos-assets/master/pylti1p3/examples/cookies-check/001.png\" rel=\"nofollow\">special page</a> with asking to open current URL in the new window in case if cookies are unavailable. In case if\ncookies are allowed user will be transparently redirected to the next page. All texts are configurable with passing arguments:</p>\n<pre><span class=\"n\">oidc_login</span><span class=\"o\">.</span><span class=\"n\">enable_check_cookies</span><span class=\"p\">(</span><span class=\"n\">main_msg</span><span class=\"p\">,</span> <span class=\"n\">click_msg</span><span class=\"p\">,</span> <span class=\"n\">loading_msg</span><span class=\"p\">)</span>\n</pre>\n<p>Also you may have troubles with default framework sessions (because <tt>pylti1p3</tt> library can\u2019t control your framework\nsettings connected with the session ID cookie). So without necessary settings user\u2019s session could be unavailable in\ncase of iframe usage. To avoid this troubles it is recommended to change default session adapter to the new cache\nadapter (with memcache/redis backend) and as a consequence allow library to set it\u2019s own LTI1.3 session id cookie\n(that will be set with all necessary params like <cite>Secure</cite> and <cite>SameSite=None</cite>).</p>\n<div id=\"django-cache-data-storage\">\n<h3>Django cache data storage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylti1p3.contrib.django</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoCacheDataStorage</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">launch_data_storage</span> <span class=\"o\">=</span> <span class=\"n\">DjangoCacheDataStorage</span><span class=\"p\">(</span><span class=\"n\">cache_name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">)</span>\n    <span class=\"n\">oidc_login</span> <span class=\"o\">=</span> <span class=\"n\">DjangoOIDCLogin</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">tool_conf</span><span class=\"p\">,</span> <span class=\"n\">launch_data_storage</span><span class=\"o\">=</span><span class=\"n\">launch_data_storage</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">launch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">launch_data_storage</span> <span class=\"o\">=</span> <span class=\"n\">DjangoCacheDataStorage</span><span class=\"p\">(</span><span class=\"n\">cache_name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">)</span>\n    <span class=\"n\">message_launch</span> <span class=\"o\">=</span> <span class=\"n\">DjangoMessageLaunch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">tool_conf</span><span class=\"p\">,</span> <span class=\"n\">launch_data_storage</span><span class=\"o\">=</span><span class=\"n\">launch_data_storage</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">restore_launch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">launch_data_storage</span> <span class=\"o\">=</span> <span class=\"n\">get_launch_data_storage</span><span class=\"p\">(</span><span class=\"n\">cache_name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">)</span>\n    <span class=\"n\">message_launch</span> <span class=\"o\">=</span> <span class=\"n\">DjangoMessageLaunch</span><span class=\"o\">.</span><span class=\"n\">from_cache</span><span class=\"p\">(</span><span class=\"n\">launch_id</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">tool_conf</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">launch_data_storage</span><span class=\"o\">=</span><span class=\"n\">launch_data_storage</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"flask-cache-data-storage\">\n<h3>Flask cache data storage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_caching</span> <span class=\"kn\">import</span> <span class=\"n\">Cache</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylti1p3.contrib.flask</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskCacheDataStorage</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">launch_data_storage</span> <span class=\"o\">=</span> <span class=\"n\">FlaskCacheDataStorage</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">)</span>\n    <span class=\"n\">oidc_login</span> <span class=\"o\">=</span> <span class=\"n\">DjangoOIDCLogin</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">tool_conf</span><span class=\"p\">,</span> <span class=\"n\">launch_data_storage</span><span class=\"o\">=</span><span class=\"n\">launch_data_storage</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">launch</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">launch_data_storage</span> <span class=\"o\">=</span> <span class=\"n\">FlaskCacheDataStorage</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">)</span>\n    <span class=\"n\">message_launch</span> <span class=\"o\">=</span> <span class=\"n\">DjangoMessageLaunch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">tool_conf</span><span class=\"p\">,</span> <span class=\"n\">launch_data_storage</span><span class=\"o\">=</span><span class=\"n\">launch_data_storage</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">restore_launch</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">launch_data_storage</span> <span class=\"o\">=</span> <span class=\"n\">FlaskCacheDataStorage</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">)</span>\n    <span class=\"n\">message_launch</span> <span class=\"o\">=</span> <span class=\"n\">DjangoMessageLaunch</span><span class=\"o\">.</span><span class=\"n\">from_cache</span><span class=\"p\">(</span><span class=\"n\">launch_id</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">tool_conf</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">launch_data_storage</span><span class=\"o\">=</span><span class=\"n\">launch_data_storage</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"cache-for-public-key\">\n<h2>Cache for Public Key</h2>\n<p>Library try to fetch platform\u2019s public key everytime on the message launch step. This public key may be stored in cache\n(memcache/redis) to speed-up launch process:</p>\n<pre><span class=\"c1\"># Django cache storage:</span>\n<span class=\"n\">launch_data_storage</span> <span class=\"o\">=</span> <span class=\"n\">DjangoCacheDataStorage</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Flask cache storage:</span>\n<span class=\"n\">launch_data_storage</span> <span class=\"o\">=</span> <span class=\"n\">FlaskCacheDataStorage</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">)</span>\n\n<span class=\"n\">message_launch</span><span class=\"o\">.</span><span class=\"n\">set_public_key_caching</span><span class=\"p\">(</span><span class=\"n\">launch_data_storage</span><span class=\"p\">,</span> <span class=\"n\">cache_lifetime</span><span class=\"o\">=</span><span class=\"mi\">7200</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"api-to-get-jwks\">\n<h2>API to get JWKS</h2>\n<p>You may generate JWKS from Tool Config object:</p>\n<pre><span class=\"n\">tool_conf</span><span class=\"o\">.</span><span class=\"n\">set_public_key</span><span class=\"p\">(</span><span class=\"n\">iss</span><span class=\"p\">,</span> <span class=\"n\">public_key</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"n\">client_id</span><span class=\"p\">)</span>\n<span class=\"n\">jwks_dict</span> <span class=\"o\">=</span> <span class=\"n\">tool_conf</span><span class=\"o\">.</span><span class=\"n\">get_jwks</span><span class=\"p\">()</span>  <span class=\"c1\"># {\"keys\": [{ ... }]}</span>\n\n<span class=\"c1\"># or you may specify iss and client_id:</span>\n<span class=\"n\">jwks_dict</span> <span class=\"o\">=</span> <span class=\"n\">tool_conf</span><span class=\"o\">.</span><span class=\"n\">get_jwks</span><span class=\"p\">(</span><span class=\"n\">iss</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"p\">)</span>  <span class=\"c1\"># {\"keys\": [{ ... }]}</span>\n</pre>\n<p>Don\u2019t forget to set public key because without it JWKS can\u2019t be generated.\nAlso you may generate JWK for any public key using construction below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylti1p3.registration</span> <span class=\"kn\">import</span> <span class=\"n\">Registration</span>\n\n<span class=\"n\">jwk_dict</span> <span class=\"o\">=</span> <span class=\"n\">Registration</span><span class=\"o\">.</span><span class=\"n\">get_jwk</span><span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">)</span>\n<span class=\"c1\"># {\"e\": ..., \"kid\": ..., \"kty\": ..., \"n\": ..., \"alg\": ..., \"use\": ...}</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7166101, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "223b9bb9df840164c6dd04868f5a866b", "sha256": "cf1573e7d70d27094cd4f550e02a770b1590d55f012ab27c4f3bee700fd48e36"}, "downloads": -1, "filename": "PyLTI1p3-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "223b9bb9df840164c6dd04868f5a866b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24798, "upload_time": "2019-08-13T11:23:05", "upload_time_iso_8601": "2019-08-13T11:23:05.358400Z", "url": "https://files.pythonhosted.org/packages/14/05/9403b3e5aee6103c0493e6d8a60bfa8308ff6dae4990ce25658a0980800b/PyLTI1p3-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d89f903f24153ca7627652978ac49d0", "sha256": "ca94ffa611bfc19c7a55a742b2086e508d424d06c99d9319184b701f75060b16"}, "downloads": -1, "filename": "PyLTI1p3-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2d89f903f24153ca7627652978ac49d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20603, "upload_time": "2019-08-13T11:23:08", "upload_time_iso_8601": "2019-08-13T11:23:08.284057Z", "url": "https://files.pythonhosted.org/packages/98/d4/adf9e8f414570023ff52e7e20c41789c4839c0d2d9eae8f3e3f8ef534880/PyLTI1p3-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "717e672bab7b2a579b3d1ad88e45d39e", "sha256": "349fe03405119fb6ee0415b78925dad8e54cd05f3ba227c4ba2564e7780bc547"}, "downloads": -1, "filename": "PyLTI1p3-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "717e672bab7b2a579b3d1ad88e45d39e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24959, "upload_time": "2019-08-16T13:15:55", "upload_time_iso_8601": "2019-08-16T13:15:55.837055Z", "url": "https://files.pythonhosted.org/packages/80/02/7370d0555521620ccbfa1d3e6219328da7520af666581db79eace4e40583/PyLTI1p3-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4aeb246cd68033e01fc12ade78680248", "sha256": "32124ed60360b1e5713c15e1565ff4acbde8e12040ca984c375e7a766f30edeb"}, "downloads": -1, "filename": "PyLTI1p3-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4aeb246cd68033e01fc12ade78680248", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20748, "upload_time": "2019-08-16T13:15:58", "upload_time_iso_8601": "2019-08-16T13:15:58.878470Z", "url": "https://files.pythonhosted.org/packages/0b/65/58054dc66cb8ee44e67df396b90971ee176c9f206c0ef04cff7333f34e28/PyLTI1p3-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "b0893ead9fbe63bda60da440198253c8", "sha256": "527fb69a68a69bcd8412f3c94ee2792e8f2696d4baf1f82365789ee558198569"}, "downloads": -1, "filename": "PyLTI1p3-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b0893ead9fbe63bda60da440198253c8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24959, "upload_time": "2019-08-16T15:19:33", "upload_time_iso_8601": "2019-08-16T15:19:33.283037Z", "url": "https://files.pythonhosted.org/packages/3b/47/07e21f9b73f517905da0959e2fb48275e7f422a832b257ac64ac401e9750/PyLTI1p3-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ce2825b504f3a9becbd2392be85d236", "sha256": "4b8f2c137399d1bfbe235fa9246266723358d434bf8acbd7c733b9ebd06c0cef"}, "downloads": -1, "filename": "PyLTI1p3-1.1.1.tar.gz", "has_sig": false, "md5_digest": "0ce2825b504f3a9becbd2392be85d236", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20747, "upload_time": "2019-08-16T15:19:37", "upload_time_iso_8601": "2019-08-16T15:19:37.392438Z", "url": "https://files.pythonhosted.org/packages/28/7d/c840d2de0890327fe33f7e5d4dc360dd5951dc33e34584f54afa04c81be8/PyLTI1p3-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "69e44cdc0270d01a865f4f6de6b75890", "sha256": "877445187873ac22e49f116f27e3418b9ae0cd740f6b8f4f50bb7256de4d674b"}, "downloads": -1, "filename": "PyLTI1p3-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "69e44cdc0270d01a865f4f6de6b75890", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25125, "upload_time": "2019-08-20T17:19:44", "upload_time_iso_8601": "2019-08-20T17:19:44.086855Z", "url": "https://files.pythonhosted.org/packages/1d/22/3ed2fe943c2e6cf083b86caf07f2ce07da797a47ff5841642d9e0573e30c/PyLTI1p3-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "005fc4b4e26d436422163c57fc60d3a5", "sha256": "69f76b3244a7f7d9f058faed3f5b5e43d9d00dbd0bc0bc5b8bb35965a69dfb96"}, "downloads": -1, "filename": "PyLTI1p3-1.2.0.tar.gz", "has_sig": false, "md5_digest": "005fc4b4e26d436422163c57fc60d3a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20908, "upload_time": "2019-08-20T17:19:46", "upload_time_iso_8601": "2019-08-20T17:19:46.346945Z", "url": "https://files.pythonhosted.org/packages/2e/31/c55428080a773447eb6d779bcc19e85773c74d49c9141ca2c899f9a0c38a/PyLTI1p3-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "33ff593d5739a0e3d87376b3b275f5f8", "sha256": "82293182697148feee7686e3ea029357d3cae45884b06c354de82cc8148cc299"}, "downloads": -1, "filename": "PyLTI1p3-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "33ff593d5739a0e3d87376b3b275f5f8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25393, "upload_time": "2019-08-22T13:17:59", "upload_time_iso_8601": "2019-08-22T13:17:59.357282Z", "url": "https://files.pythonhosted.org/packages/09/a1/2bc694313083cc46724ec26ff39fd04aaedd2ef7a9c748810af6d3021620/PyLTI1p3-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40ca78935f5acc5d5312c15497f263d8", "sha256": "fadb860f4600b7f355435dbc5866445bd240a7df68740b45df3b2937d21cd7bb"}, "downloads": -1, "filename": "PyLTI1p3-1.3.0.tar.gz", "has_sig": false, "md5_digest": "40ca78935f5acc5d5312c15497f263d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21419, "upload_time": "2019-08-22T13:18:01", "upload_time_iso_8601": "2019-08-22T13:18:01.689647Z", "url": "https://files.pythonhosted.org/packages/85/3e/e3b1f07bde3eaebc4482ac5889349a59bdddc8ec011a3fcc04f8aa4b94e4/PyLTI1p3-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "7ecdf96045568875941896b299f6f57b", "sha256": "3e08763ccba7b3ef69479365465c7b3a05f96f1e0616a2abcb0cf7a82a6b218e"}, "downloads": -1, "filename": "PyLTI1p3-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7ecdf96045568875941896b299f6f57b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25463, "upload_time": "2019-10-30T10:05:55", "upload_time_iso_8601": "2019-10-30T10:05:55.140604Z", "url": "https://files.pythonhosted.org/packages/7b/10/cf50c23d6fcd4dcd9a7c8cd6ee45b508d9ba94b68e1e0b0d9d3fe3e2f3ed/PyLTI1p3-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3740aba19ac2ffbf4ac003e7e83d5be4", "sha256": "5659965c9c60f8d731f4227311f4020094df36ca8effa901ad84941a2f4f77f8"}, "downloads": -1, "filename": "PyLTI1p3-1.3.1.tar.gz", "has_sig": false, "md5_digest": "3740aba19ac2ffbf4ac003e7e83d5be4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21515, "upload_time": "2019-10-30T10:05:57", "upload_time_iso_8601": "2019-10-30T10:05:57.357950Z", "url": "https://files.pythonhosted.org/packages/29/b8/0e6c04be9c90358f4afb0c29e23e2a7ecbf5fec2829ce6c56f6383aeb3d4/PyLTI1p3-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "83821f6f4aafd10122fd9c66e75dec3b", "sha256": "053989ac8285913d38d75f3eea5ff3731e9225ab22d63d430191792d999d23fc"}, "downloads": -1, "filename": "PyLTI1p3-1.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "83821f6f4aafd10122fd9c66e75dec3b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25479, "upload_time": "2019-10-30T10:34:06", "upload_time_iso_8601": "2019-10-30T10:34:06.702333Z", "url": "https://files.pythonhosted.org/packages/9a/f9/ea6fbaf3e91ea1f87ba1cdf8ded4747c772d51d95e5c077b0dc244b9df8b/PyLTI1p3-1.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed577d8090d9b6d252b0b414ac8a7cb3", "sha256": "7b7870c471a2ca786dcba579ba75ae319194f747d2a6f3ca6efab2b86aa4eff6"}, "downloads": -1, "filename": "PyLTI1p3-1.3.2.tar.gz", "has_sig": false, "md5_digest": "ed577d8090d9b6d252b0b414ac8a7cb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21514, "upload_time": "2019-10-30T10:34:08", "upload_time_iso_8601": "2019-10-30T10:34:08.403606Z", "url": "https://files.pythonhosted.org/packages/23/b3/f63b3ed96f00e775cc1583897806c023885dcaae1eaf7cd1cb682264ca3b/PyLTI1p3-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "9d5336c008f002857aa5644321d404cd", "sha256": "995a9771a3e48b5c46c8241252ce9d15ff4ef4f9b8d5918541c52a3bbd12841f"}, "downloads": -1, "filename": "PyLTI1p3-1.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9d5336c008f002857aa5644321d404cd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25484, "upload_time": "2020-01-23T10:31:14", "upload_time_iso_8601": "2020-01-23T10:31:14.209408Z", "url": "https://files.pythonhosted.org/packages/d3/51/8126534c71fe47137283e49f92f465c1de5d2e962b199a4780274c1aef95/PyLTI1p3-1.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f038dd877ca8964049d4b9d19dacf7af", "sha256": "8ef27e67e9afde0b6f8d08c25054482a6a2da13c45ff18c58c89d38dc73b9443"}, "downloads": -1, "filename": "PyLTI1p3-1.3.3.tar.gz", "has_sig": false, "md5_digest": "f038dd877ca8964049d4b9d19dacf7af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21527, "upload_time": "2020-01-23T10:31:16", "upload_time_iso_8601": "2020-01-23T10:31:16.240149Z", "url": "https://files.pythonhosted.org/packages/40/bc/e90020c26039a45c0a4af8e1b86a32dff34afcc0f58833a48044f1b3bb2c/PyLTI1p3-1.3.3.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "6087b5aadeca03043ee1c6c1042d494e", "sha256": "0b3ca838009a8a3e4fde6f62971ebd6a73ae751053eab6eb9e1916abdfbd0830"}, "downloads": -1, "filename": "PyLTI1p3-1.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6087b5aadeca03043ee1c6c1042d494e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29999, "upload_time": "2020-03-24T11:55:42", "upload_time_iso_8601": "2020-03-24T11:55:42.559317Z", "url": "https://files.pythonhosted.org/packages/b8/63/dedc6abf9837f825876e5c04867ac7dbd747883fd356a1e860fc97ceae69/PyLTI1p3-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "956711fc063cee0457d8d105e656516b", "sha256": "385af17d2deddddc80b9e9dc02739c0043bab0b042ae545cf62bf9dc7aa27cc9"}, "downloads": -1, "filename": "PyLTI1p3-1.4.0.tar.gz", "has_sig": false, "md5_digest": "956711fc063cee0457d8d105e656516b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19537, "upload_time": "2020-03-24T11:55:44", "upload_time_iso_8601": "2020-03-24T11:55:44.517359Z", "url": "https://files.pythonhosted.org/packages/00/00/9ee4f2f45e19275043d6d1be4b229878e7d42ffb63bce9fb9c4841b7755a/PyLTI1p3-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "e943f1a474bf76bb7172947e36474a80", "sha256": "5ef312c43a6407cd57f835b39e8fd943c86e2331d00797c2feff739e5ea400b3"}, "downloads": -1, "filename": "PyLTI1p3-1.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e943f1a474bf76bb7172947e36474a80", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 40760, "upload_time": "2020-04-23T22:15:18", "upload_time_iso_8601": "2020-04-23T22:15:18.540501Z", "url": "https://files.pythonhosted.org/packages/ff/9d/b7fe10b06201b508b93df1549fe09606daf10edce1c96b938129f10a0523/PyLTI1p3-1.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21e7c2585aadb1ce61504de6f58f465d", "sha256": "2f394f80c6a6a2065edb9513cee07dc3162cf7dbef0cd379d402b2f20d777fdb"}, "downloads": -1, "filename": "PyLTI1p3-1.5.0.tar.gz", "has_sig": false, "md5_digest": "21e7c2585aadb1ce61504de6f58f465d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27501, "upload_time": "2020-04-23T22:15:20", "upload_time_iso_8601": "2020-04-23T22:15:20.231234Z", "url": "https://files.pythonhosted.org/packages/bc/c0/8f7c7ffae95e1cee75608fb2b97de380bc1b27a9b03dfbacf448415b25c3/PyLTI1p3-1.5.0.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "1d18b5a85a30103b84734aa645fe38b6", "sha256": "aca6f4938dda971852aeb5bc486a4e6a7d78250baa87610c3dd4842a10861abc"}, "downloads": -1, "filename": "PyLTI1p3-1.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1d18b5a85a30103b84734aa645fe38b6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 41389, "upload_time": "2020-04-30T13:52:07", "upload_time_iso_8601": "2020-04-30T13:52:07.155290Z", "url": "https://files.pythonhosted.org/packages/91/13/4d1b00465c7687c663ed309c16b6a136f63cbf23e69d250301806a836c32/PyLTI1p3-1.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cd2b4ac9d94051ee5bdab2e40db863a", "sha256": "538f92eccba5f0d2dc167ba35ad3bbca26888d8bbee77aa2e133654bc9d04fc2"}, "downloads": -1, "filename": "PyLTI1p3-1.6.0.tar.gz", "has_sig": false, "md5_digest": "5cd2b4ac9d94051ee5bdab2e40db863a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28065, "upload_time": "2020-04-30T13:52:09", "upload_time_iso_8601": "2020-04-30T13:52:09.303615Z", "url": "https://files.pythonhosted.org/packages/c9/c0/d3802678ee9e50619944b3d8f87da46962f990f308328aee2e8c223ada09/PyLTI1p3-1.6.0.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "ab3c5c479906cc170a0630e2251c2b22", "sha256": "edc96567688a3e2d9827f9862778f68986231fb70c171625be289a4c1db45176"}, "downloads": -1, "filename": "PyLTI1p3-1.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ab3c5c479906cc170a0630e2251c2b22", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 41405, "upload_time": "2020-05-01T21:16:28", "upload_time_iso_8601": "2020-05-01T21:16:28.030793Z", "url": "https://files.pythonhosted.org/packages/c0/6d/540c3ab5e82a4f3c303d58f5d7b9bce6c389889edc762e15173bfd56636a/PyLTI1p3-1.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35b3dc6c8bdbdd06d11aa35db61a875f", "sha256": "4abde0d75d0681ca8d1b22fd57ab41540dacca75141087398792028106f7b6fc"}, "downloads": -1, "filename": "PyLTI1p3-1.6.1.tar.gz", "has_sig": false, "md5_digest": "35b3dc6c8bdbdd06d11aa35db61a875f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28044, "upload_time": "2020-05-01T21:16:29", "upload_time_iso_8601": "2020-05-01T21:16:29.722935Z", "url": "https://files.pythonhosted.org/packages/7b/71/cf55c1718033a89d83f4c2e94f0332fb4d410771561dbc6af92486ec0a27/PyLTI1p3-1.6.1.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "bcaaf75668cb4bee5c70a2f3d7d8c863", "sha256": "9d203b25d83dc0e926d85c340272a443b7971fcbafdd7652430f5b9ae1a6da75"}, "downloads": -1, "filename": "PyLTI1p3-1.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bcaaf75668cb4bee5c70a2f3d7d8c863", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 47760, "upload_time": "2020-05-04T17:30:16", "upload_time_iso_8601": "2020-05-04T17:30:16.513410Z", "url": "https://files.pythonhosted.org/packages/71/fb/4aa15823ac79d61aabf1fad7f471cf752493f2ffbf0b56394895cc693739/PyLTI1p3-1.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd76fabab68fc4ebcc296d7f09715baf", "sha256": "4409b325facd5d522099459ae2e5edd12f6f8e4ab2529a962720ca320592efcf"}, "downloads": -1, "filename": "PyLTI1p3-1.7.0.tar.gz", "has_sig": false, "md5_digest": "cd76fabab68fc4ebcc296d7f09715baf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32803, "upload_time": "2020-05-04T17:30:18", "upload_time_iso_8601": "2020-05-04T17:30:18.119029Z", "url": "https://files.pythonhosted.org/packages/a6/bc/2c1e4d31cbc7ecc3f14ee9ae4d6f9cb97d0f289614aaa391251980756e98/PyLTI1p3-1.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bcaaf75668cb4bee5c70a2f3d7d8c863", "sha256": "9d203b25d83dc0e926d85c340272a443b7971fcbafdd7652430f5b9ae1a6da75"}, "downloads": -1, "filename": "PyLTI1p3-1.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bcaaf75668cb4bee5c70a2f3d7d8c863", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 47760, "upload_time": "2020-05-04T17:30:16", "upload_time_iso_8601": "2020-05-04T17:30:16.513410Z", "url": "https://files.pythonhosted.org/packages/71/fb/4aa15823ac79d61aabf1fad7f471cf752493f2ffbf0b56394895cc693739/PyLTI1p3-1.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd76fabab68fc4ebcc296d7f09715baf", "sha256": "4409b325facd5d522099459ae2e5edd12f6f8e4ab2529a962720ca320592efcf"}, "downloads": -1, "filename": "PyLTI1p3-1.7.0.tar.gz", "has_sig": false, "md5_digest": "cd76fabab68fc4ebcc296d7f09715baf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32803, "upload_time": "2020-05-04T17:30:18", "upload_time_iso_8601": "2020-05-04T17:30:18.119029Z", "url": "https://files.pythonhosted.org/packages/a6/bc/2c1e4d31cbc7ecc3f14ee9ae4d6f9cb97d0f289614aaa391251980756e98/PyLTI1p3-1.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:43 2020"}