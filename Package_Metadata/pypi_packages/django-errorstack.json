{"info": {"author": "Carl Meyer", "author_email": "carl@dirtcircle.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "=================\ndjango-errorstack\n=================\n\nA Django reusable application for logging errors to the `ErrorStack`_\nservice.\n\n.. _ErrorStack: http://www.errorstack.com/\n\nInstallation\n============\n\nInstall from PyPI with ``easy_install`` or ``pip``::\n\n    pip install django-errorstack\n\nor get the `in-development version`_::\n\n    pip install django-errorstack==tip\n\n.. _in-development version: http://bitbucket.org/carljm/django-errorstack/get/tip.gz#egg=django_errorstack-tip\n\nDependencies\n------------\n\n``django-errorstack`` requires `Django`_ 1.0 or later.\n\n.. _Django: http://www.djangoproject.com/\n\nUsage\n=====\n\nTo use ``django-errorstack`` in your Django project:\n\n    1. Add ``'errorstack'`` to your ``INSTALLED_APPS`` setting.\n\n    2. Set the `ERRORSTACK_STACK_KEY`_ setting.\n\n    3. Add ``errorstack.middleware.ErrorStackMiddleware`` to the end\n       of your ``MIDDLEWARE_CLASSES`` setting.\n\nWhen ``DEBUG`` is False, all unhandled view exceptions will be logged\nto ErrorStack. Error handling will otherwise proceed as it would\notherwise: ``django-errorstack`` does not disable or modify Django's\nusual error handling.\n\nLogging errors manually\n-----------------------\n\nYou may want to log some errors to ErrorStack in your own code,\nwithout raising an unhandled exception or displaying a 500 page to\nyour user.\n\n``django-errorstack`` uses a named logger from the Python standard\nlibrary ``logging`` module. The name of the logger is defined by the\n`ERRORSTACK_LOGGER_NAME` setting (defaults to \"errorstack\"). Assuming\nyou don't change the setting, you could log errors yourself like this::\n\n    import logging\n\n    logger = logging.getLogger(\"errorstack\")\n\n    try:\n        #... some code that raises an exception\n    except:\n        logger.error(\"Something bad happpened.\", exc_info=True)\n\nThis logger only sends errors or critical errors (not warnings or info\nor debug messages) to ErrorStack.\n\nAttaching the ErrorStack handler to your own logger\n---------------------------------------------------\n\nYour application may already use the stdlib ``logging`` module with\nyour own named loggers. If you want to attach the ErrorStack logger\nhandler to your own loggers, you can do the following::\n\n    import logging\n\n    from errorstack.handlers import errorstack_handler\n\n    logger = logging.getLogger(\"my_logger\")\n    logger.addHandler(errorstack_handler)\n\nAgain, this handler only listens for errors or critical errors.\n\nSettings\n========\n\nERRORSTACK_STACK_KEY\n--------------------\n\nThe key of the error stack you want to send errors to. This option is\nrequired.\n\nERRORSTACK_CATCH_404\n--------------------\n\nLog ``Http404`` exceptions to ErrorStack if this is\n``True``. ``False`` by default.\n\nERRORSTACK_LOGGER_NAME\n----------------------\n\nThe logger name to use. Defaults to \"errorstack\".\n\nCHANGES\n=======\n\ntip (unreleased)\n----------------\n\n0.1 (2009.12.16)\n----------------\n\n- Initial release.\n\nTODO\n====", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/carljm/django-errorstack/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-errorstack", "package_url": "https://pypi.org/project/django-errorstack/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-errorstack/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/carljm/django-errorstack/"}, "release_url": "https://pypi.org/project/django-errorstack/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Easy Django integration with the ErrorStack.com service", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Django reusable application for logging errors to the <a href=\"http://www.errorstack.com/\" rel=\"nofollow\">ErrorStack</a>\nservice.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from PyPI with <tt>easy_install</tt> or <tt>pip</tt>:</p>\n<pre>pip install django-errorstack\n</pre>\n<p>or get the <a href=\"http://bitbucket.org/carljm/django-errorstack/get/tip.gz#egg=django_errorstack-tip\" rel=\"nofollow\">in-development version</a>:</p>\n<pre>pip install django-errorstack==tip\n</pre>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p><tt><span class=\"pre\">django-errorstack</span></tt> requires <a href=\"http://www.djangoproject.com/\" rel=\"nofollow\">Django</a> 1.0 or later.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use <tt><span class=\"pre\">django-errorstack</span></tt> in your Django project:</p>\n<blockquote>\n<ol>\n<li>Add <tt>'errorstack'</tt> to your <tt>INSTALLED_APPS</tt> setting.</li>\n<li>Set the <a href=\"#errorstack-stack-key\" rel=\"nofollow\">ERRORSTACK_STACK_KEY</a> setting.</li>\n<li>Add <tt>errorstack.middleware.ErrorStackMiddleware</tt> to the end\nof your <tt>MIDDLEWARE_CLASSES</tt> setting.</li>\n</ol>\n</blockquote>\n<p>When <tt>DEBUG</tt> is False, all unhandled view exceptions will be logged\nto ErrorStack. Error handling will otherwise proceed as it would\notherwise: <tt><span class=\"pre\">django-errorstack</span></tt> does not disable or modify Django\u2019s\nusual error handling.</p>\n<div id=\"logging-errors-manually\">\n<h3>Logging errors manually</h3>\n<p>You may want to log some errors to ErrorStack in your own code,\nwithout raising an unhandled exception or displaying a 500 page to\nyour user.</p>\n<p><tt><span class=\"pre\">django-errorstack</span></tt> uses a named logger from the Python standard\nlibrary <tt>logging</tt> module. The name of the logger is defined by the\n<cite>ERRORSTACK_LOGGER_NAME</cite> setting (defaults to \u201cerrorstack\u201d). Assuming\nyou don\u2019t change the setting, you could log errors yourself like this:</p>\n<pre>import logging\n\nlogger = logging.getLogger(\"errorstack\")\n\ntry:\n    #... some code that raises an exception\nexcept:\n    logger.error(\"Something bad happpened.\", exc_info=True)\n</pre>\n<p>This logger only sends errors or critical errors (not warnings or info\nor debug messages) to ErrorStack.</p>\n</div>\n<div id=\"attaching-the-errorstack-handler-to-your-own-logger\">\n<h3>Attaching the ErrorStack handler to your own logger</h3>\n<p>Your application may already use the stdlib <tt>logging</tt> module with\nyour own named loggers. If you want to attach the ErrorStack logger\nhandler to your own loggers, you can do the following:</p>\n<pre>import logging\n\nfrom errorstack.handlers import errorstack_handler\n\nlogger = logging.getLogger(\"my_logger\")\nlogger.addHandler(errorstack_handler)\n</pre>\n<p>Again, this handler only listens for errors or critical errors.</p>\n</div>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<div id=\"errorstack-stack-key\">\n<h3>ERRORSTACK_STACK_KEY</h3>\n<p>The key of the error stack you want to send errors to. This option is\nrequired.</p>\n</div>\n<div id=\"errorstack-catch-404\">\n<h3>ERRORSTACK_CATCH_404</h3>\n<p>Log <tt>Http404</tt> exceptions to ErrorStack if this is\n<tt>True</tt>. <tt>False</tt> by default.</p>\n</div>\n<div id=\"errorstack-logger-name\">\n<h3>ERRORSTACK_LOGGER_NAME</h3>\n<p>The logger name to use. Defaults to \u201cerrorstack\u201d.</p>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"tip-unreleased\">\n<h3>tip (unreleased)</h3>\n</div>\n<div id=\"id1\">\n<h3>0.1 (2009.12.16)</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n</div>\n\n          </div>"}, "last_serial": 707200, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d0538197f8060e5cb68611f5f6ee517d", "sha256": "4d693f2af02b1d5b9d5fa2f554b6b963521809092926b6f8cae2f1b0829f70a4"}, "downloads": -1, "filename": "django-errorstack-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d0538197f8060e5cb68611f5f6ee517d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5186, "upload_time": "2009-12-16T23:26:42", "upload_time_iso_8601": "2009-12-16T23:26:42.960915Z", "url": "https://files.pythonhosted.org/packages/4c/0c/7ec3cc22bac9f1a89bf92d41b9c9b4d8e08855e50558112d085176680e62/django-errorstack-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d0538197f8060e5cb68611f5f6ee517d", "sha256": "4d693f2af02b1d5b9d5fa2f554b6b963521809092926b6f8cae2f1b0829f70a4"}, "downloads": -1, "filename": "django-errorstack-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d0538197f8060e5cb68611f5f6ee517d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5186, "upload_time": "2009-12-16T23:26:42", "upload_time_iso_8601": "2009-12-16T23:26:42.960915Z", "url": "https://files.pythonhosted.org/packages/4c/0c/7ec3cc22bac9f1a89bf92d41b9c9b4d8e08855e50558112d085176680e62/django-errorstack-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:19 2020"}