{"info": {"author": "Jos\u00e9 Luis Pati\u00f1o Andr\u00e9s", "author_email": "jose.lpa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: Unix", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Utilities"], "description": "===============\nCrossbar HTTP 3\n===============\n\n.. image:: https://travis-ci.org/jose-lpa/crossbarhttp3.svg?branch=master\n    :target: https://travis-ci.org/jose-lpa/crossbarhttp3\n\n.. image:: https://codecov.io/gh/jose-lpa/crossbarhttp3/branch/master/graph/badge.svg\n    :target: https://codecov.io/github/jose-lpa/crossbarhttp3\n\n.. image:: https://img.shields.io/pypi/v/crossbarhttp3.svg\n    :target: https://pypi.python.org/pypi/crossbarhttp3\n\n.. image:: https://img.shields.io/pypi/l/crossbarhttp3.svg\n    :target: https://pypi.python.org/pypi/crossbarhttp3\n\nModule that provides methods for accessing Crossbar.io HTTP Bridge Services\n\nFork of the original package by `Eric Chapman at The HQ`_, now supporting \nPython 2.6, 2.7 and 3+ versions.\n\n\nInstallation\n============\n\nInstall Crossbar HTTP 3 with pip::\n\n    pip install crossbarhttp3\n\n\nBasic usage\n===========\n\nCall\n----\n\nTo call a Crossbar HTTP bridge, do the following:\n\n.. code-block:: python\n\n    client = Client('http://127.0.0.1/call')\n    result = client.call('com.example.add', 2, 3, offset=10)\n    \nThis will call the following ``add_something`` method of an `ApplicationSession object`_:\n\n.. code-block:: python\n\n    from autobahn.twisted.wamp import ApplicationSession\n    from twisted.internet.defer import inlineCallbacks\n\n\n    class MyComponent(ApplicationSession):\n        @inlineCallbacks\n        def onJoin(self, details):\n\n            def add_something(x, y, offset=0):\n                print('Add was called')\n                return x + y + offset\n\n            yield self.register(add_something, 'com.example.add')\n        \nPublish\n-------\n\nTo publish to a Crossbar HTTP bridge, do the following:\n\n.. code-block:: python\n\n    client = Client('http://127.0.0.1/publish')\n    result = client.publish('com.example.event', event='new event')\n    \nThe receiving subscription implemented in an ``ApplicationSession`` class would\nlook like this:\n\n.. code-block:: python\n\n    from autobahn.twisted.wamp import ApplicationSession\n    from twisted.internet.defer import inlineCallbacks\n\n\n    class MyComponent(ApplicationSession):\n        @inlineCallbacks\n        def onJoin(self, details):\n\n            def subscribe_something(event=None, **kwargs):\n                print('Publish was called with event %s' % event)\n\n            yield self.subscribe(subscribe_something, 'com.example.event')\n\nKey/Secret\n----------\n\nFor bridge services that have a key and secret defined, simply include the key\nand secret in the instantiation of the client.\n\n.. code-block:: python\n\n    client = Client('http://127.0.0.1/publish', key='key', secret='secret')\n\nAdditional options\n------------------\n\nThere are two more options available in the client instantiation:\n\n- ``timeout``: Lets you specify a number of seconds from which an idle request to the Crossbar.io node will be dismissed (timed out). Defaults to ``None``, meaning that the global default timeout setting will be used.\n- ``silently``: If set to ``True``, any failed request to the Crossbar.io node will be returned by the client as ``None``, **without raising any exception**. Defaults to ``False``, meaning that all failures will raise their correspondent exceptions.\n\nExceptions\n----------\n\nThe library will throw the following exceptions.  Note that all exceptions\nsubclass from ``ClientBaseException`` so you can just catch that if you don't\nwant the granularity.\n\n- ``ClientBadUrl`` - The specified URL is not a HTTP bridge service\n- ``ClientBadHost`` - The specified host name is rejecting the connection\n- ``ClientMissingParams`` - The call was missing parameters\n- ``ClientSignatureError`` - The signature did not match\n- ``ClientNoCalleeRegistered`` - Callee was not registered on the router for the specified procedure\n- ``ClientCallRuntimeError`` - Procedure triggered an exception\n\nContributing\n============\n\nAll bug-fixes or improvements to the library are welcome.\n\nTo contribute, fork the repo and submit a pull request to the ``develop``\nbranch. Please, try to follow this basic coding rules:\n\n- Always include some unit tests for the new code you write or the bugs you fix. Or, update the existent unit tests if necessary.\n- Stick to `PEP-8`_ styling.\n\nTesting\n-------\n\nIn order to test Crossbar HTTP 3 properly you must have a Crossbar.io node in\nHTTP Bridge mode running in localhost port 8001. You can do that by yourself if\nyou need it, but otherwise there is a `Docker image`_ already prepared, so you\ndon't have to bother with this.\n\nTo use that image and raise a Docker container with everything working, make\nsure you have `Docker installed`_ and execute this command::\n\n    docker run -t -p 8001:8001 --name crossbar-bridge joselpa/crossbar-http-bridge:0.2\n\nThen you can run the unit tests in the regular way::\n\n    python setup.py test\n\nLicense\n=======\n\nReleased under `MIT License`_.\n\n.. _Eric Chapman at The HQ: https://github.com/thehq/python-crossbarhttp\n.. _ApplicationSession object: http://autobahn.ws/python/wamp/programming.html#creating-components\n.. _PEP-8: https://www.python.org/dev/peps/pep-0008/\n.. _Docker image: https://hub.docker.com/r/joselpa/crossbar-http-bridge/\n.. _Docker installed: https://docs.docker.com/\n.. _MIT License: https://opensource.org/licenses/MIT\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jose-lpa/crossbarhttp3", "keywords": "wamp,crossbar.io,websockets,http-bridge", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "crossbarhttp3", "package_url": "https://pypi.org/project/crossbarhttp3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/crossbarhttp3/", "project_urls": {"Homepage": "https://github.com/jose-lpa/crossbarhttp3"}, "release_url": "https://pypi.org/project/crossbarhttp3/1.1/", "requires_dist": ["future"], "requires_python": "", "summary": "Library for connecting to Crossbar.io HTTP Bridge Services.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/jose-lpa/crossbarhttp3\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/jose-lpa/crossbarhttp3.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69d9d856d5cb628bdf405b7b128d427cbd0a2548/68747470733a2f2f7472617669732d63692e6f72672f6a6f73652d6c70612f63726f737362617268747470332e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/jose-lpa/crossbarhttp3\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/jose-lpa/crossbarhttp3/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e32905b5b975c51f5727852f1f455701649c802d/68747470733a2f2f636f6465636f762e696f2f67682f6a6f73652d6c70612f63726f737362617268747470332f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/crossbarhttp3\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/crossbarhttp3.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92621d1723b3bde9adc79e6cecb7cc42f794cd04/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63726f737362617268747470332e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/crossbarhttp3\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/crossbarhttp3.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/14620d33f8f4cb109dc51a232a9a0c64ef6204ea/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f63726f737362617268747470332e737667\"></a>\n<p>Module that provides methods for accessing Crossbar.io HTTP Bridge Services</p>\n<p>Fork of the original package by <a href=\"https://github.com/thehq/python-crossbarhttp\" rel=\"nofollow\">Eric Chapman at The HQ</a>, now supporting\nPython 2.6, 2.7 and 3+ versions.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install Crossbar HTTP 3 with pip:</p>\n<pre>pip install crossbarhttp3\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<div id=\"call\">\n<h3>Call</h3>\n<p>To call a Crossbar HTTP bridge, do the following:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1/call'</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'com.example.add'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>This will call the following <tt>add_something</tt> method of an <a href=\"http://autobahn.ws/python/wamp/programming.html#creating-components\" rel=\"nofollow\">ApplicationSession object</a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autobahn.twisted.wamp</span> <span class=\"kn\">import</span> <span class=\"n\">ApplicationSession</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyComponent</span><span class=\"p\">(</span><span class=\"n\">ApplicationSession</span><span class=\"p\">):</span>\n    <span class=\"nd\">@inlineCallbacks</span>\n    <span class=\"k\">def</span> <span class=\"nf\">onJoin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">details</span><span class=\"p\">):</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">add_something</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Add was called'</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">offset</span>\n\n        <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">add_something</span><span class=\"p\">,</span> <span class=\"s1\">'com.example.add'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"publish\">\n<h3>Publish</h3>\n<p>To publish to a Crossbar HTTP bridge, do the following:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1/publish'</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"s1\">'com.example.event'</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"o\">=</span><span class=\"s1\">'new event'</span><span class=\"p\">)</span>\n</pre>\n<p>The receiving subscription implemented in an <tt>ApplicationSession</tt> class would\nlook like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autobahn.twisted.wamp</span> <span class=\"kn\">import</span> <span class=\"n\">ApplicationSession</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyComponent</span><span class=\"p\">(</span><span class=\"n\">ApplicationSession</span><span class=\"p\">):</span>\n    <span class=\"nd\">@inlineCallbacks</span>\n    <span class=\"k\">def</span> <span class=\"nf\">onJoin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">details</span><span class=\"p\">):</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">subscribe_something</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Publish was called with event </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n\n        <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">subscribe_something</span><span class=\"p\">,</span> <span class=\"s1\">'com.example.event'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"key-secret\">\n<h3>Key/Secret</h3>\n<p>For bridge services that have a key and secret defined, simply include the key\nand secret in the instantiation of the client.</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1/publish'</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'key'</span><span class=\"p\">,</span> <span class=\"n\">secret</span><span class=\"o\">=</span><span class=\"s1\">'secret'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"additional-options\">\n<h3>Additional options</h3>\n<p>There are two more options available in the client instantiation:</p>\n<ul>\n<li><tt>timeout</tt>: Lets you specify a number of seconds from which an idle request to the Crossbar.io node will be dismissed (timed out). Defaults to <tt>None</tt>, meaning that the global default timeout setting will be used.</li>\n<li><tt>silently</tt>: If set to <tt>True</tt>, any failed request to the Crossbar.io node will be returned by the client as <tt>None</tt>, <strong>without raising any exception</strong>. Defaults to <tt>False</tt>, meaning that all failures will raise their correspondent exceptions.</li>\n</ul>\n</div>\n<div id=\"exceptions\">\n<h3>Exceptions</h3>\n<p>The library will throw the following exceptions.  Note that all exceptions\nsubclass from <tt>ClientBaseException</tt> so you can just catch that if you don\u2019t\nwant the granularity.</p>\n<ul>\n<li><tt>ClientBadUrl</tt> - The specified URL is not a HTTP bridge service</li>\n<li><tt>ClientBadHost</tt> - The specified host name is rejecting the connection</li>\n<li><tt>ClientMissingParams</tt> - The call was missing parameters</li>\n<li><tt>ClientSignatureError</tt> - The signature did not match</li>\n<li><tt>ClientNoCalleeRegistered</tt> - Callee was not registered on the router for the specified procedure</li>\n<li><tt>ClientCallRuntimeError</tt> - Procedure triggered an exception</li>\n</ul>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>All bug-fixes or improvements to the library are welcome.</p>\n<p>To contribute, fork the repo and submit a pull request to the <tt>develop</tt>\nbranch. Please, try to follow this basic coding rules:</p>\n<ul>\n<li>Always include some unit tests for the new code you write or the bugs you fix. Or, update the existent unit tests if necessary.</li>\n<li>Stick to <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP-8</a> styling.</li>\n</ul>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>In order to test Crossbar HTTP 3 properly you must have a Crossbar.io node in\nHTTP Bridge mode running in localhost port 8001. You can do that by yourself if\nyou need it, but otherwise there is a <a href=\"https://hub.docker.com/r/joselpa/crossbar-http-bridge/\" rel=\"nofollow\">Docker image</a> already prepared, so you\ndon\u2019t have to bother with this.</p>\n<p>To use that image and raise a Docker container with everything working, make\nsure you have <a href=\"https://docs.docker.com/\" rel=\"nofollow\">Docker installed</a> and execute this command:</p>\n<pre>docker run -t -p 8001:8001 --name crossbar-bridge joselpa/crossbar-http-bridge:0.2\n</pre>\n<p>Then you can run the unit tests in the regular way:</p>\n<pre>python setup.py test\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Released under <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT License</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2336410, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "31cea746e0ac953626af22d52c737e2a", "sha256": "d03fb48a43523c01e6372eed40bcb1cb7b76e5024c5a7e8308c83fded99c6860"}, "downloads": -1, "filename": "crossbarhttp3-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "31cea746e0ac953626af22d52c737e2a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5789, "upload_time": "2016-09-11T16:38:25", "upload_time_iso_8601": "2016-09-11T16:38:25.589270Z", "url": "https://files.pythonhosted.org/packages/f1/d5/47df14de22c52d64c777b4a4be3f2de383a8b68a1e363163baffa087c95c/crossbarhttp3-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "605e9b7fa955d04b0c1ab1875d1a088b", "sha256": "3bd1a1d868cfc05609a36320d9a8207049a66eb4fd9a535fb309f42453130dd4"}, "downloads": -1, "filename": "crossbarhttp3-1.1.tar.gz", "has_sig": false, "md5_digest": "605e9b7fa955d04b0c1ab1875d1a088b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5934, "upload_time": "2016-09-11T16:38:27", "upload_time_iso_8601": "2016-09-11T16:38:27.902971Z", "url": "https://files.pythonhosted.org/packages/1e/5d/23e8ae3269ca91c9f515f32a14874b60c1ef96342ada6d7f831654d56183/crossbarhttp3-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "31cea746e0ac953626af22d52c737e2a", "sha256": "d03fb48a43523c01e6372eed40bcb1cb7b76e5024c5a7e8308c83fded99c6860"}, "downloads": -1, "filename": "crossbarhttp3-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "31cea746e0ac953626af22d52c737e2a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5789, "upload_time": "2016-09-11T16:38:25", "upload_time_iso_8601": "2016-09-11T16:38:25.589270Z", "url": "https://files.pythonhosted.org/packages/f1/d5/47df14de22c52d64c777b4a4be3f2de383a8b68a1e363163baffa087c95c/crossbarhttp3-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "605e9b7fa955d04b0c1ab1875d1a088b", "sha256": "3bd1a1d868cfc05609a36320d9a8207049a66eb4fd9a535fb309f42453130dd4"}, "downloads": -1, "filename": "crossbarhttp3-1.1.tar.gz", "has_sig": false, "md5_digest": "605e9b7fa955d04b0c1ab1875d1a088b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5934, "upload_time": "2016-09-11T16:38:27", "upload_time_iso_8601": "2016-09-11T16:38:27.902971Z", "url": "https://files.pythonhosted.org/packages/1e/5d/23e8ae3269ca91c9f515f32a14874b60c1ef96342ada6d7f831654d56183/crossbarhttp3-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:12 2020"}