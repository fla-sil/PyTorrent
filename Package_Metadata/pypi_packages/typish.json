{"info": {"author": "Ramon Hagenaars", "author_email": "ramon.hagenaars@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![image](https://img.shields.io/pypi/pyversions/typish.svg)](https://pypi.org/project/typish/)\n[![Downloads](https://pepy.tech/badge/typish)](https://pepy.tech/project/typish)\n[![Pypi version](https://badge.fury.io/py/typish.svg)](https://badge.fury.io/py/typish)\n[![codecov](https://codecov.io/gh/ramonhagenaars/typish/branch/master/graph/badge.svg)](https://codecov.io/gh/ramonhagenaars/typish)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/ramonhagenaars/typish/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/ramonhagenaars/typish/?branch=master)\n\n# Typish\n\n* Functions for thorough checks on types\n* Instance checks considering generics\n* Typesafe Duck-typing\n\n## Example\n\n```python\n>>> from typing import Iterable\n>>> from typish import instance_of\n>>> instance_of([1, 2, 3], Iterable[int])\nTrue\n```\n\n## Installation\n\n```\npip install typish\n```\n\n## Content\n\n### Functions\n\n| Function | Description\n|---|---\n| ``subclass_of(cls: type, *args: type) -> bool`` | Returns whether ``cls`` is a sub type of *all* types in ``args``\n| ``instance_of(obj: object, *args: type) -> bool`` | Returns whether ``cls`` is an instance of *all* types in ``args``\n| ``get_origin(t: type) -> type`` | Return the \"origin\" of a generic type. E.g. ``get_origin(List[str])`` gives ``list``.\n| ``get_args(t: type) -> typing.Tuple[type, ...]`` | Return the arguments of a generic type. E.g. ``get_args(List[str])`` gives ``(str, )``.\n| ``get_alias(cls: T) -> typing.Optional[T]`` | Return the ``typing`` alias for a type. E.g ``get_alias(list)`` gives ``List``.\n| ``get_type(inst: T, use_union: bool = False) -> typing.Type[T]`` | Return the (generic) type of an instance. E.g. a list of ints will give ``List[int]``.\n| ``common_ancestor(*args: object) -> type`` | Return the closest common ancestor of the given instances.\n| ``common_ancestor_of_types(*args: type) -> type`` | Return the closest common ancestor of the given classes.\n| ``get_args_and_return_type(hint: typing.Type[typing.Callable]) -> typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]`` | Get the argument types and the return type of a callable type hint (e.g. ``Callable[[int], str]``). \n| ``get_type_hints_of_callable(func: typing.Callable) -> typing.Dict[str, type]`` | Return the type hints of the parameters of the given callable.\n| ``is_type_annotation(item: typing.Any) -> bool`` | Returns whether ``item`` is a ``type`` or a ``typing`` type.\n\n\n### Types\n\n| Type | Description\n|---|---|\n| ``T`` | A generic Type var.\n| ``KT`` | A Type var for keys in a dict.\n| ``VT`` | A type var for values in a dict.\n| ``Empty`` | The type of emptiness (= ``Parameter.empty``).\n| ``Unknown`` | The type of something unknown.\n| ``Module`` | The type of a module.\n| ``NoneType`` | The type of ``None``.\n| ``EllipsisType`` | The type of ``...``.\n\n### Classes\n\n#### SubscriptableType\nThis metaclass allows a type to become subscriptable.\n\n*Example:*\n```python\nclass MyClass(metaclass=SubscriptableType):\n    ...\n```\nNow you can do:\n```python\nMyClass2 = MyClass['some args']\nprint(MyClass2.__args__)\nprint(MyClass2.__origin__)\n```\nOutput:\n```\nsome args\n<class '__main__.MyClass'>\n```\n\n#### Something\nDefine an interface with ``typish.Something``.\n\n*Example:*\n```python\nDuck = Something['walk': Callable[[], None], \n                 'quack': Callable[[], None]]\n```\n\nAnything that has the attributes defined in ``Something`` with the right type is \nconsidered an instance of that ``Something`` (classes, objects, even modules...).\n\nThe builtin ``isinstance`` is supported as well as ``typish.instance_of``.\n\n#### ClsDict\nA dictionary that uses instance checking to determine which value to return.\nIt only accepts types as keys.\n\nThis is particularly useful when a function accepts multiple types for an \nargument and you want to split the implementation into separate functions.\n\n*Example:* \n```python\n\ndef _handle_str(item):\n    ...\n\ndef _handle_int(item):\n    ...\n\ndef func(item):\n    # Suppose item can be a string or an int, you can use ClsDict to\n    # pick a handler function.\n\n    cd = ClsDict({\n        str: _handle_str,\n        int: _handle_int,\n    })\n\n    handler = cd[item]  # Pick the right handler.\n    handler(item)       # Call that handler.\n```\n\n#### ClsFunction\nA callable that uses `ClsDict` to call the right function.\nBelow is the same example as above, but slightly modified in \nthat it uses `ClsFunction`.\n\n*Example:*\n\n```python\ndef _handle_str(item):\n    ...\n\n\ndef _handle_int(item):\n    ...\n\n\ndef func(item):\n    # Suppose item can be a string or an int, you can use ClsFunction to\n    # delegate to the right handler function.\n\n    function = ClsFunction({\n        str: _handle_str,\n        int: _handle_int,\n    })\n\n    function(item)\n\n```\n\n#### Literal\nA backwards compatible variant of typing.Literal (Python3.8). When importing \n`Literal` from `typish`, you will get the `typing.Literal` if it is available.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ramonhagenaars/typish", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "typish", "package_url": "https://pypi.org/project/typish/", "platform": "", "project_url": "https://pypi.org/project/typish/", "project_urls": {"Homepage": "https://github.com/ramonhagenaars/typish"}, "release_url": "https://pypi.org/project/typish/1.6.0/", "requires_dist": ["numpy ; extra == 'test'", "nptyping ; extra == 'test'", "pycodestyle ; extra == 'test'", "pylint ; extra == 'test'", "mypy ; extra == 'test'", "pytest ; extra == 'test'", "coverage ; extra == 'test'", "codecov ; extra == 'test'"], "requires_python": "", "summary": "Functionality for types", "version": "1.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/typish/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5659a4f513f668db4db0706671d091bd1afc97a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7479706973682e737667\"></a>\n<a href=\"https://pepy.tech/project/typish\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d03740ca9e651fd3bcc03ae178f0011cbfd0fc41/68747470733a2f2f706570792e746563682f62616467652f747970697368\"></a>\n<a href=\"https://badge.fury.io/py/typish\" rel=\"nofollow\"><img alt=\"Pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00c5f8e66af63395ac4156d29be20b10a4c648a2/68747470733a2f2f62616467652e667572792e696f2f70792f7479706973682e737667\"></a>\n<a href=\"https://codecov.io/gh/ramonhagenaars/typish\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3db61dd9f581ac55779edefed041f804396bafd/68747470733a2f2f636f6465636f762e696f2f67682f72616d6f6e686167656e616172732f7479706973682f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://scrutinizer-ci.com/g/ramonhagenaars/typish/?branch=master\" rel=\"nofollow\"><img alt=\"Scrutinizer Code Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15ca7664b597eea7db53597e2b97bb8b8bcbaeda/68747470733a2f2f7363727574696e697a65722d63692e636f6d2f672f72616d6f6e686167656e616172732f7479706973682f6261646765732f7175616c6974792d73636f72652e706e673f623d6d6173746572\"></a></p>\n<h1>Typish</h1>\n<ul>\n<li>Functions for thorough checks on types</li>\n<li>Instance checks considering generics</li>\n<li>Typesafe Duck-typing</li>\n</ul>\n<h2>Example</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Iterable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">typish</span> <span class=\"kn\">import</span> <span class=\"n\">instance_of</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">instance_of</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span>\n<span class=\"kc\">True</span>\n</pre>\n<h2>Installation</h2>\n<pre><code>pip install typish\n</code></pre>\n<h2>Content</h2>\n<h3>Functions</h3>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>subclass_of(cls: type, *args: type) -&gt; bool</code></td>\n<td>Returns whether <code>cls</code> is a sub type of <em>all</em> types in <code>args</code></td>\n</tr>\n<tr>\n<td><code>instance_of(obj: object, *args: type) -&gt; bool</code></td>\n<td>Returns whether <code>cls</code> is an instance of <em>all</em> types in <code>args</code></td>\n</tr>\n<tr>\n<td><code>get_origin(t: type) -&gt; type</code></td>\n<td>Return the \"origin\" of a generic type. E.g. <code>get_origin(List[str])</code> gives <code>list</code>.</td>\n</tr>\n<tr>\n<td><code>get_args(t: type) -&gt; typing.Tuple[type, ...]</code></td>\n<td>Return the arguments of a generic type. E.g. <code>get_args(List[str])</code> gives <code>(str, )</code>.</td>\n</tr>\n<tr>\n<td><code>get_alias(cls: T) -&gt; typing.Optional[T]</code></td>\n<td>Return the <code>typing</code> alias for a type. E.g <code>get_alias(list)</code> gives <code>List</code>.</td>\n</tr>\n<tr>\n<td><code>get_type(inst: T, use_union: bool = False) -&gt; typing.Type[T]</code></td>\n<td>Return the (generic) type of an instance. E.g. a list of ints will give <code>List[int]</code>.</td>\n</tr>\n<tr>\n<td><code>common_ancestor(*args: object) -&gt; type</code></td>\n<td>Return the closest common ancestor of the given instances.</td>\n</tr>\n<tr>\n<td><code>common_ancestor_of_types(*args: type) -&gt; type</code></td>\n<td>Return the closest common ancestor of the given classes.</td>\n</tr>\n<tr>\n<td><code>get_args_and_return_type(hint: typing.Type[typing.Callable]) -&gt; typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]</code></td>\n<td>Get the argument types and the return type of a callable type hint (e.g. <code>Callable[[int], str]</code>).</td>\n</tr>\n<tr>\n<td><code>get_type_hints_of_callable(func: typing.Callable) -&gt; typing.Dict[str, type]</code></td>\n<td>Return the type hints of the parameters of the given callable.</td>\n</tr>\n<tr>\n<td><code>is_type_annotation(item: typing.Any) -&gt; bool</code></td>\n<td>Returns whether <code>item</code> is a <code>type</code> or a <code>typing</code> type.</td>\n</tr></tbody></table>\n<h3>Types</h3>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>T</code></td>\n<td>A generic Type var.</td>\n</tr>\n<tr>\n<td><code>KT</code></td>\n<td>A Type var for keys in a dict.</td>\n</tr>\n<tr>\n<td><code>VT</code></td>\n<td>A type var for values in a dict.</td>\n</tr>\n<tr>\n<td><code>Empty</code></td>\n<td>The type of emptiness (= <code>Parameter.empty</code>).</td>\n</tr>\n<tr>\n<td><code>Unknown</code></td>\n<td>The type of something unknown.</td>\n</tr>\n<tr>\n<td><code>Module</code></td>\n<td>The type of a module.</td>\n</tr>\n<tr>\n<td><code>NoneType</code></td>\n<td>The type of <code>None</code>.</td>\n</tr>\n<tr>\n<td><code>EllipsisType</code></td>\n<td>The type of <code>...</code>.</td>\n</tr></tbody></table>\n<h3>Classes</h3>\n<h4>SubscriptableType</h4>\n<p>This metaclass allows a type to become subscriptable.</p>\n<p><em>Example:</em></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">SubscriptableType</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Now you can do:</p>\n<pre><span class=\"n\">MyClass2</span> <span class=\"o\">=</span> <span class=\"n\">MyClass</span><span class=\"p\">[</span><span class=\"s1\">'some args'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">MyClass2</span><span class=\"o\">.</span><span class=\"n\">__args__</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">MyClass2</span><span class=\"o\">.</span><span class=\"n\">__origin__</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><code>some args\n&lt;class '__main__.MyClass'&gt;\n</code></pre>\n<h4>Something</h4>\n<p>Define an interface with <code>typish.Something</code>.</p>\n<p><em>Example:</em></p>\n<pre><span class=\"n\">Duck</span> <span class=\"o\">=</span> <span class=\"n\">Something</span><span class=\"p\">[</span><span class=\"s1\">'walk'</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"kc\">None</span><span class=\"p\">],</span> \n                 <span class=\"s1\">'quack'</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"kc\">None</span><span class=\"p\">]]</span>\n</pre>\n<p>Anything that has the attributes defined in <code>Something</code> with the right type is\nconsidered an instance of that <code>Something</code> (classes, objects, even modules...).</p>\n<p>The builtin <code>isinstance</code> is supported as well as <code>typish.instance_of</code>.</p>\n<h4>ClsDict</h4>\n<p>A dictionary that uses instance checking to determine which value to return.\nIt only accepts types as keys.</p>\n<p>This is particularly useful when a function accepts multiple types for an\nargument and you want to split the implementation into separate functions.</p>\n<p><em>Example:</em></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">_handle_str</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_handle_int</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Suppose item can be a string or an int, you can use ClsDict to</span>\n    <span class=\"c1\"># pick a handler function.</span>\n\n    <span class=\"n\">cd</span> <span class=\"o\">=</span> <span class=\"n\">ClsDict</span><span class=\"p\">({</span>\n        <span class=\"nb\">str</span><span class=\"p\">:</span> <span class=\"n\">_handle_str</span><span class=\"p\">,</span>\n        <span class=\"nb\">int</span><span class=\"p\">:</span> <span class=\"n\">_handle_int</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">cd</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span>  <span class=\"c1\"># Pick the right handler.</span>\n    <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>       <span class=\"c1\"># Call that handler.</span>\n</pre>\n<h4>ClsFunction</h4>\n<p>A callable that uses <code>ClsDict</code> to call the right function.\nBelow is the same example as above, but slightly modified in\nthat it uses <code>ClsFunction</code>.</p>\n<p><em>Example:</em></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">_handle_str</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_handle_int</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Suppose item can be a string or an int, you can use ClsFunction to</span>\n    <span class=\"c1\"># delegate to the right handler function.</span>\n\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"n\">ClsFunction</span><span class=\"p\">({</span>\n        <span class=\"nb\">str</span><span class=\"p\">:</span> <span class=\"n\">_handle_str</span><span class=\"p\">,</span>\n        <span class=\"nb\">int</span><span class=\"p\">:</span> <span class=\"n\">_handle_int</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</pre>\n<h4>Literal</h4>\n<p>A backwards compatible variant of typing.Literal (Python3.8). When importing\n<code>Literal</code> from <code>typish</code>, you will get the <code>typing.Literal</code> if it is available.</p>\n\n          </div>"}, "last_serial": 7034539, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "bbd6326f2341ec5a1a7698a845f5d660", "sha256": "bc4b57537444735286c119f60485611762e367bebfb9ca7621425ce2aecbdbd8"}, "downloads": -1, "filename": "typish-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bbd6326f2341ec5a1a7698a845f5d660", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7376, "upload_time": "2019-08-03T15:59:45", "upload_time_iso_8601": "2019-08-03T15:59:45.987890Z", "url": "https://files.pythonhosted.org/packages/93/aa/38e5149bfcc7b2921d86866659fb7b61f4f824c0957278f398dfff5314ee/typish-1.0.0-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ee4c84d0356abd25ed9f4ebe7c52af9b", "sha256": "c39f43589dcfefcb383e6a90cc8a03ddde29cbd9f2992e68c3112c2258499098"}, "downloads": -1, "filename": "typish-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ee4c84d0356abd25ed9f4ebe7c52af9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8188, "upload_time": "2019-08-06T20:09:40", "upload_time_iso_8601": "2019-08-06T20:09:40.686003Z", "url": "https://files.pythonhosted.org/packages/37/46/cbae8e600d1ec595fc0489b2934c6ee2a37a972383900f7e7e413aaa5644/typish-1.1.0-py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "058d6811053f89f7164f36ce7b104188", "sha256": "101c79de50561b552886dbfaf0d1ea4d8efccdf6cabc98dfccdec98b33e44e77"}, "downloads": -1, "filename": "typish-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "058d6811053f89f7164f36ce7b104188", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8976, "upload_time": "2019-09-11T19:14:23", "upload_time_iso_8601": "2019-09-11T19:14:23.527587Z", "url": "https://files.pythonhosted.org/packages/70/c7/dfbf7953820a6644a261d9aa05114affb4c146a008330fe4fbd8f1a627c4/typish-1.2.0-py3-none-any.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "722b039eca21633e0d6eeb091aa28fa8", "sha256": "b640cd31280734e574dac35cbf403b75cfe145b6439026248cb7029971a74b3d"}, "downloads": -1, "filename": "typish-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "722b039eca21633e0d6eeb091aa28fa8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9854, "upload_time": "2019-11-23T18:35:59", "upload_time_iso_8601": "2019-11-23T18:35:59.204435Z", "url": "https://files.pythonhosted.org/packages/77/57/d3e7d6b0225fb6cf8774ecb82e9dfdcd4dbff36c75d38fa3479bac1a6b57/typish-1.3.0-py3-none-any.whl", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "ab4e97a4ff6cdaf93b29718f34d4adb4", "sha256": "0b08ae232ed6fc517ed25b0fd9c0bae9bd8b8a0a99b22daebe68ad8a4af0e125"}, "downloads": -1, "filename": "typish-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ab4e97a4ff6cdaf93b29718f34d4adb4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9907, "upload_time": "2019-11-23T18:55:57", "upload_time_iso_8601": "2019-11-23T18:55:57.843479Z", "url": "https://files.pythonhosted.org/packages/69/ac/370f0128f4019720fbfcb326faf44018a46d6567b967aaeed808067b6309/typish-1.3.1-py3-none-any.whl", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "ec7c74a32ca3e8f58438b824185f1126", "sha256": "717711ac195071c5c1a3ee2854b65630a97311d49745acc7daf0be90e1ac3d0d"}, "downloads": -1, "filename": "typish-1.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ec7c74a32ca3e8f58438b824185f1126", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10344, "upload_time": "2020-02-29T13:15:12", "upload_time_iso_8601": "2020-02-29T13:15:12.310396Z", "url": "https://files.pythonhosted.org/packages/12/f4/118e5c020d86d82662a98cf258eaafd594fdfd3864d22c0d13b05524f0ac/typish-1.3.2-py3-none-any.whl", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "c99fd4c475b34417fccb2ba9ef35d28e", "sha256": "500be62518b8782fc34ef57243e0a9b15a7e6adc2cb342b0ae9e2d9dbe4ecdd8"}, "downloads": -1, "filename": "typish-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c99fd4c475b34417fccb2ba9ef35d28e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11578, "upload_time": "2020-03-15T20:34:22", "upload_time_iso_8601": "2020-03-15T20:34:22.997584Z", "url": "https://files.pythonhosted.org/packages/6d/4d/28aa60f0f56e7a707c17900bbafdb09c3b9054bd2ac18f1611d68342cf0b/typish-1.4.0-py3-none-any.whl", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "7de9fd8b1285f698d84c89afd8213ed0", "sha256": "00f7431c79415cc953c3f3d025271aee56293bfc46481eb722d7320b8d147a24"}, "downloads": -1, "filename": "typish-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7de9fd8b1285f698d84c89afd8213ed0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12608, "upload_time": "2020-03-30T20:14:47", "upload_time_iso_8601": "2020-03-30T20:14:47.713452Z", "url": "https://files.pythonhosted.org/packages/ab/ac/7c0a800ea25dbd97a852c1d8a230435b681859db300186cb1acd93e50d65/typish-1.5.0-py3-none-any.whl", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "3187605e7f62ad8a898d0d4fd346287b", "sha256": "d3e8d30a286c83c6f682a494075a3517dc30d8c56d801353dba2b29d4164966f"}, "downloads": -1, "filename": "typish-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3187605e7f62ad8a898d0d4fd346287b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12661, "upload_time": "2020-04-04T09:49:27", "upload_time_iso_8601": "2020-04-04T09:49:27.099229Z", "url": "https://files.pythonhosted.org/packages/98/5f/3fe76bca54a00b61ba034f3da757fe8eec9796fd5eb12da6b2c628af1e50/typish-1.5.1-py3-none-any.whl", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "2b03d968d8504679ddeb01926cb8ab13", "sha256": "a136abcd6571aff7245b1872b488056981d1ef09602c99f3a7e0209dd966929e"}, "downloads": -1, "filename": "typish-1.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2b03d968d8504679ddeb01926cb8ab13", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12709, "upload_time": "2020-04-04T10:54:41", "upload_time_iso_8601": "2020-04-04T10:54:41.266931Z", "url": "https://files.pythonhosted.org/packages/4f/28/97f54fb0ebcde32a04afa463451278bec62afe943b06b86a81c737340f7e/typish-1.5.2-py3-none-any.whl", "yanked": false}], "1.5.3": [{"comment_text": "", "digests": {"md5": "607d7d4ba4e6347ce5669c1a836b36c8", "sha256": "54d250f11030a103e385004566aad2779eadc848068291d0d342f457ac984c5a"}, "downloads": -1, "filename": "typish-1.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "607d7d4ba4e6347ce5669c1a836b36c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13093, "upload_time": "2020-04-07T07:31:28", "upload_time_iso_8601": "2020-04-07T07:31:28.855125Z", "url": "https://files.pythonhosted.org/packages/d9/c9/655c0ec8ff49beb6022be2450002902c576a8b0ab2316047b83bcebd4380/typish-1.5.3-py3-none-any.whl", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "326f486d00d42ba2d146d52b89d2a1ed", "sha256": "13f7d5f1b86faab11f016af6d82a157b12dba60a82f2e823608a3ee8165eac28"}, "downloads": -1, "filename": "typish-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "326f486d00d42ba2d146d52b89d2a1ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27709, "upload_time": "2020-04-16T19:36:34", "upload_time_iso_8601": "2020-04-16T19:36:34.569493Z", "url": "https://files.pythonhosted.org/packages/af/b5/b5ddbd624e12b40742a0bca7cd86db42f1b4f21f6503f74542ae046c3188/typish-1.6.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "326f486d00d42ba2d146d52b89d2a1ed", "sha256": "13f7d5f1b86faab11f016af6d82a157b12dba60a82f2e823608a3ee8165eac28"}, "downloads": -1, "filename": "typish-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "326f486d00d42ba2d146d52b89d2a1ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27709, "upload_time": "2020-04-16T19:36:34", "upload_time_iso_8601": "2020-04-16T19:36:34.569493Z", "url": "https://files.pythonhosted.org/packages/af/b5/b5ddbd624e12b40742a0bca7cd86db42f1b4f21f6503f74542ae046c3188/typish-1.6.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:42:36 2020"}