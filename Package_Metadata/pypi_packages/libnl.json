{"info": {"author": "@Robpol86", "author_email": "robpol86@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "=======\n libnl\n=======\n\nA port of `libnl <http://www.infradead.org/~tgr/libnl/>`_, a collection of libraries providing APIs to the Netlink\nprotocol based Linux kernel interfaces. This library is API-equivalent to the original C library, and should make it\nrelatively easy to convert C programs into pure Python without having to call external binaries.\n\nAs Netlink is a Linux-specific protocol, this library will only work on Linux hosts. All communication is done using\nsockets between the Python process and the Linux kernel. The main driver for porting libnl was to use\n`nl80211 <https://wireless.wiki.kernel.org/en/developers/documentation/nl80211>`_ in Python to scan for wireless access\npoints natively, without having to run an external program and parse its output.\n\n* Python 2.6, 2.7, PyPy, PyPy3, 3.3, and 3.4 supported on Linux\n\n.. |buildWercker| image:: https://img.shields.io/wercker/ci/54f908261d0e8d4b221bfc9d.svg?style=flat-square\n   :target: https://app.wercker.com/#applications/54f908261d0e8d4b221bfc9d\n   :alt: Build Status WiFi\n\n.. |buildTravis| image:: https://img.shields.io/travis/Robpol86/libnl/master.svg?style=flat-square\n   :target: https://travis-ci.org/Robpol86/libnl\n   :alt: Build Status\n\n.. |coverage| image:: https://img.shields.io/codecov/c/github/Robpol86/libnl/master.svg?style=flat-square\n   :target: https://codecov.io/github/Robpol86/libnl\n   :alt: Coverage Status\n\n.. |latestVersion| image:: https://img.shields.io/pypi/v/libnl.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/libnl/\n   :alt: Latest Version\n\n.. |downloads| image:: https://img.shields.io/pypi/dm/libnl.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/libnl/\n   :alt: Downloads\n\n============== ================ ============= =============== ===========\nWiFi           Linux            Coverage      Latest          Downloads\n============== ================ ============= =============== ===========\n|buildWercker| |buildTravis|    |coverage|    |latestVersion| |downloads|\n============== ================ ============= =============== ===========\n\n`Quickstart`_\n=============\n\nInstall:\n\n.. code:: bash\n\n    pip install libnl\n\n`Example Implementations`_\n==========================\n\nA simple Python program that merely lists network adapters on the host:\n\n.. code:: python\n\n    import ctypes\n    import socket\n\n    from libnl.error import errmsg\n    from libnl.handlers import NL_CB_CUSTOM, NL_CB_VALID, NL_OK\n    from libnl.linux_private.if_link import IFLA_IFNAME, IFLA_RTA\n    from libnl.linux_private.netlink import NETLINK_ROUTE, NLMSG_LENGTH, NLM_F_DUMP, NLM_F_REQUEST\n    from libnl.linux_private.rtnetlink import RTA_DATA, RTA_NEXT, RTA_OK, RTM_GETLINK, ifinfomsg, rtgenmsg\n    from libnl.misc import get_string\n    from libnl.msg import nlmsg_data, nlmsg_hdr\n    from libnl.nl import nl_connect, nl_recvmsgs_default, nl_send_simple\n    from libnl.socket_ import nl_socket_alloc, nl_socket_modify_cb\n\n\n    def callback(msg, _):\n        nlh = nlmsg_hdr(msg)\n        iface = ifinfomsg(nlmsg_data(nlh))\n        hdr = IFLA_RTA(iface)\n        remaining = ctypes.c_int(nlh.nlmsg_len - NLMSG_LENGTH(iface.SIZEOF))\n        while RTA_OK(hdr, remaining):\n            if hdr.rta_type == IFLA_IFNAME:\n                print('Found interface {0}: {1}'.format(iface.ifi_index, get_string(RTA_DATA(hdr)).decode('ascii')))\n            hdr = RTA_NEXT(hdr, remaining)\n        return NL_OK\n\n\n    sk = nl_socket_alloc()  # Creates an nl_sock instance.\n    ret = nl_connect(sk, NETLINK_ROUTE)  # Create file descriptor and bind socket.\n    if ret < 0:\n        raise RuntimeError('nl_connect() returned {0} ({1})'.format(ret, errmsg[abs(ret)]))\n    rt_hdr = rtgenmsg(rtgen_family=socket.AF_PACKET)\n    ret = nl_send_simple(sk, RTM_GETLINK, NLM_F_REQUEST | NLM_F_DUMP, rt_hdr, rt_hdr.SIZEOF)\n    if ret < 0:\n        raise RuntimeError('nl_send_simple() returned {0} ({1})'.format(ret, errmsg[abs(ret)]))\n    nl_socket_modify_cb(sk, NL_CB_VALID, NL_CB_CUSTOM, callback, None)  # Add callback to the nl_sock instance.\n    ret = nl_recvmsgs_default(sk)  # Get kernel's answer, and call attached callbacks.\n    if ret < 0:\n        raise RuntimeError('nl_recvmsgs_default() returned {0} ({1})'.format(ret, errmsg[abs(ret)]))\n\nHere are some more examples with their C equivalents in order from \"easy\" to \"hard\":\n\n* `example_list_network_interfaces.py <https://github.com/Robpol86/libnl/blob/master/example_list_network_interfaces.py>`_ (`list_network_interfaces.c <https://github.com/Robpol86/libnl/blob/master/example_c/list_network_interfaces.c>`_)\n* `example_show_wifi_interface.py <https://github.com/Robpol86/libnl/blob/master/example_show_wifi_interface.py>`_ (`show_wifi_interface.c <https://github.com/Robpol86/libnl/blob/master/example_c/show_wifi_interface.c>`_)\n* `example_scan_access_points.py <https://github.com/Robpol86/libnl/blob/master/example_scan_access_points.py>`_ (`scan_access_points.c <https://github.com/Robpol86/libnl/blob/master/example_c/scan_access_points.c>`_)\n\n`Changelog`_\n============\n\nThis project adheres to `Semantic Versioning <http://semver.org/>`_.\n\n`0.2.0 - 2015-03-26`_\n---------------------\n\nAdded\n    * Python2.6, PyPy, and PyPy3 support.\n\n`0.1.1 - 2015-03-15`_\n---------------------\n\n* Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Robpol86/libnl", "keywords": "netlink libnl libnl-genl nl80211", "license": "LGPL2.1", "maintainer": null, "maintainer_email": null, "name": "libnl", "package_url": "https://pypi.org/project/libnl/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/libnl/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Robpol86/libnl"}, "release_url": "https://pypi.org/project/libnl/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Pure Python port of the Netlink protocol library suite.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A port of <a href=\"http://www.infradead.org/~tgr/libnl/\" rel=\"nofollow\">libnl</a>, a collection of libraries providing APIs to the Netlink\nprotocol based Linux kernel interfaces. This library is API-equivalent to the original C library, and should make it\nrelatively easy to convert C programs into pure Python without having to call external binaries.</p>\n<p>As Netlink is a Linux-specific protocol, this library will only work on Linux hosts. All communication is done using\nsockets between the Python process and the Linux kernel. The main driver for porting libnl was to use\n<a href=\"https://wireless.wiki.kernel.org/en/developers/documentation/nl80211\" rel=\"nofollow\">nl80211</a> in Python to scan for wireless access\npoints natively, without having to run an external program and parse its output.</p>\n<ul>\n<li>Python 2.6, 2.7, PyPy, PyPy3, 3.3, and 3.4 supported on Linux</li>\n</ul>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>WiFi</th>\n<th>Linux</th>\n<th>Coverage</th>\n<th>Latest</th>\n<th>Downloads</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><a href=\"https://app.wercker.com/#applications/54f908261d0e8d4b221bfc9d\" rel=\"nofollow\"><img alt=\"Build Status WiFi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d222ba5fd4f11c4096fa97b7555c9931b553c03b/68747470733a2f2f696d672e736869656c64732e696f2f776572636b65722f63692f3534663930383236316430653864346232323162666339642e7376673f7374796c653d666c61742d737175617265\"></a></td>\n<td><a href=\"https://travis-ci.org/Robpol86/libnl\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77f9ef87aa589e96ede2628df34fd05c185fd294/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f526f62706f6c38362f6c69626e6c2f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a></td>\n<td><a href=\"https://codecov.io/github/Robpol86/libnl\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af3004182e602f44922f130449f12fafa15fee12/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f526f62706f6c38362f6c69626e6c2f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a></td>\n<td><a href=\"https://pypi.python.org/pypi/libnl/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a272170811dd5f1216db7c3097c473ffb73b7f6d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c69626e6c2e7376673f7374796c653d666c61742d737175617265\"></a></td>\n<td><a href=\"https://pypi.python.org/pypi/libnl/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/081f0853b3461d37a9a4a0cb8e4ca72dccde6083/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6c69626e6c2e7376673f7374796c653d666c61742d737175617265\"></a></td>\n</tr>\n</tbody>\n</table>\n<div id=\"quickstart\">\n<h2><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></h2>\n<p>Install:</p>\n<pre>pip install libnl\n</pre>\n</div>\n<div id=\"example-implementations\">\n<h2><a href=\"#example-implementations\" rel=\"nofollow\">Example Implementations</a></h2>\n<p>A simple Python program that merely lists network adapters on the host:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ctypes</span>\n<span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">libnl.error</span> <span class=\"kn\">import</span> <span class=\"n\">errmsg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libnl.handlers</span> <span class=\"kn\">import</span> <span class=\"n\">NL_CB_CUSTOM</span><span class=\"p\">,</span> <span class=\"n\">NL_CB_VALID</span><span class=\"p\">,</span> <span class=\"n\">NL_OK</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libnl.linux_private.if_link</span> <span class=\"kn\">import</span> <span class=\"n\">IFLA_IFNAME</span><span class=\"p\">,</span> <span class=\"n\">IFLA_RTA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libnl.linux_private.netlink</span> <span class=\"kn\">import</span> <span class=\"n\">NETLINK_ROUTE</span><span class=\"p\">,</span> <span class=\"n\">NLMSG_LENGTH</span><span class=\"p\">,</span> <span class=\"n\">NLM_F_DUMP</span><span class=\"p\">,</span> <span class=\"n\">NLM_F_REQUEST</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libnl.linux_private.rtnetlink</span> <span class=\"kn\">import</span> <span class=\"n\">RTA_DATA</span><span class=\"p\">,</span> <span class=\"n\">RTA_NEXT</span><span class=\"p\">,</span> <span class=\"n\">RTA_OK</span><span class=\"p\">,</span> <span class=\"n\">RTM_GETLINK</span><span class=\"p\">,</span> <span class=\"n\">ifinfomsg</span><span class=\"p\">,</span> <span class=\"n\">rtgenmsg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libnl.misc</span> <span class=\"kn\">import</span> <span class=\"n\">get_string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libnl.msg</span> <span class=\"kn\">import</span> <span class=\"n\">nlmsg_data</span><span class=\"p\">,</span> <span class=\"n\">nlmsg_hdr</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libnl.nl</span> <span class=\"kn\">import</span> <span class=\"n\">nl_connect</span><span class=\"p\">,</span> <span class=\"n\">nl_recvmsgs_default</span><span class=\"p\">,</span> <span class=\"n\">nl_send_simple</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libnl.socket_</span> <span class=\"kn\">import</span> <span class=\"n\">nl_socket_alloc</span><span class=\"p\">,</span> <span class=\"n\">nl_socket_modify_cb</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">):</span>\n    <span class=\"n\">nlh</span> <span class=\"o\">=</span> <span class=\"n\">nlmsg_hdr</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n    <span class=\"n\">iface</span> <span class=\"o\">=</span> <span class=\"n\">ifinfomsg</span><span class=\"p\">(</span><span class=\"n\">nlmsg_data</span><span class=\"p\">(</span><span class=\"n\">nlh</span><span class=\"p\">))</span>\n    <span class=\"n\">hdr</span> <span class=\"o\">=</span> <span class=\"n\">IFLA_RTA</span><span class=\"p\">(</span><span class=\"n\">iface</span><span class=\"p\">)</span>\n    <span class=\"n\">remaining</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">c_int</span><span class=\"p\">(</span><span class=\"n\">nlh</span><span class=\"o\">.</span><span class=\"n\">nlmsg_len</span> <span class=\"o\">-</span> <span class=\"n\">NLMSG_LENGTH</span><span class=\"p\">(</span><span class=\"n\">iface</span><span class=\"o\">.</span><span class=\"n\">SIZEOF</span><span class=\"p\">))</span>\n    <span class=\"k\">while</span> <span class=\"n\">RTA_OK</span><span class=\"p\">(</span><span class=\"n\">hdr</span><span class=\"p\">,</span> <span class=\"n\">remaining</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">hdr</span><span class=\"o\">.</span><span class=\"n\">rta_type</span> <span class=\"o\">==</span> <span class=\"n\">IFLA_IFNAME</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Found interface </span><span class=\"si\">{0}</span><span class=\"s1\">: </span><span class=\"si\">{1}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">iface</span><span class=\"o\">.</span><span class=\"n\">ifi_index</span><span class=\"p\">,</span> <span class=\"n\">get_string</span><span class=\"p\">(</span><span class=\"n\">RTA_DATA</span><span class=\"p\">(</span><span class=\"n\">hdr</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'ascii'</span><span class=\"p\">)))</span>\n        <span class=\"n\">hdr</span> <span class=\"o\">=</span> <span class=\"n\">RTA_NEXT</span><span class=\"p\">(</span><span class=\"n\">hdr</span><span class=\"p\">,</span> <span class=\"n\">remaining</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">NL_OK</span>\n\n\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">nl_socket_alloc</span><span class=\"p\">()</span>  <span class=\"c1\"># Creates an nl_sock instance.</span>\n<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">nl_connect</span><span class=\"p\">(</span><span class=\"n\">sk</span><span class=\"p\">,</span> <span class=\"n\">NETLINK_ROUTE</span><span class=\"p\">)</span>  <span class=\"c1\"># Create file descriptor and bind socket.</span>\n<span class=\"k\">if</span> <span class=\"n\">ret</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'nl_connect() returned </span><span class=\"si\">{0}</span><span class=\"s1\"> (</span><span class=\"si\">{1}</span><span class=\"s1\">)'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">errmsg</span><span class=\"p\">[</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)]))</span>\n<span class=\"n\">rt_hdr</span> <span class=\"o\">=</span> <span class=\"n\">rtgenmsg</span><span class=\"p\">(</span><span class=\"n\">rtgen_family</span><span class=\"o\">=</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_PACKET</span><span class=\"p\">)</span>\n<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">nl_send_simple</span><span class=\"p\">(</span><span class=\"n\">sk</span><span class=\"p\">,</span> <span class=\"n\">RTM_GETLINK</span><span class=\"p\">,</span> <span class=\"n\">NLM_F_REQUEST</span> <span class=\"o\">|</span> <span class=\"n\">NLM_F_DUMP</span><span class=\"p\">,</span> <span class=\"n\">rt_hdr</span><span class=\"p\">,</span> <span class=\"n\">rt_hdr</span><span class=\"o\">.</span><span class=\"n\">SIZEOF</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">ret</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'nl_send_simple() returned </span><span class=\"si\">{0}</span><span class=\"s1\"> (</span><span class=\"si\">{1}</span><span class=\"s1\">)'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">errmsg</span><span class=\"p\">[</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)]))</span>\n<span class=\"n\">nl_socket_modify_cb</span><span class=\"p\">(</span><span class=\"n\">sk</span><span class=\"p\">,</span> <span class=\"n\">NL_CB_VALID</span><span class=\"p\">,</span> <span class=\"n\">NL_CB_CUSTOM</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># Add callback to the nl_sock instance.</span>\n<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">nl_recvmsgs_default</span><span class=\"p\">(</span><span class=\"n\">sk</span><span class=\"p\">)</span>  <span class=\"c1\"># Get kernel's answer, and call attached callbacks.</span>\n<span class=\"k\">if</span> <span class=\"n\">ret</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'nl_recvmsgs_default() returned </span><span class=\"si\">{0}</span><span class=\"s1\"> (</span><span class=\"si\">{1}</span><span class=\"s1\">)'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">errmsg</span><span class=\"p\">[</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)]))</span>\n</pre>\n<p>Here are some more examples with their C equivalents in order from \u201ceasy\u201d to \u201chard\u201d:</p>\n<ul>\n<li><a href=\"https://github.com/Robpol86/libnl/blob/master/example_list_network_interfaces.py\" rel=\"nofollow\">example_list_network_interfaces.py</a> (<a href=\"https://github.com/Robpol86/libnl/blob/master/example_c/list_network_interfaces.c\" rel=\"nofollow\">list_network_interfaces.c</a>)</li>\n<li><a href=\"https://github.com/Robpol86/libnl/blob/master/example_show_wifi_interface.py\" rel=\"nofollow\">example_show_wifi_interface.py</a> (<a href=\"https://github.com/Robpol86/libnl/blob/master/example_c/show_wifi_interface.c\" rel=\"nofollow\">show_wifi_interface.c</a>)</li>\n<li><a href=\"https://github.com/Robpol86/libnl/blob/master/example_scan_access_points.py\" rel=\"nofollow\">example_scan_access_points.py</a> (<a href=\"https://github.com/Robpol86/libnl/blob/master/example_c/scan_access_points.c\" rel=\"nofollow\">scan_access_points.c</a>)</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#changelog\" rel=\"nofollow\">Changelog</a></h2>\n<p>This project adheres to <a href=\"http://semver.org/\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<div id=\"id2\">\n<h3><a href=\"#id2\" rel=\"nofollow\">0.2.0 - 2015-03-26</a></h3>\n<dl>\n<dt>Added</dt>\n<dd><ul>\n<li>Python2.6, PyPy, and PyPy3 support.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id3\" rel=\"nofollow\">0.1.1 - 2015-03-15</a></h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1479740, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "17b2bf9f717f2fd184810936b034a3c4", "sha256": "ecb3e2d62be00880089db580c787dfeab5e4fccd4d76bb00957c41624ada3fbe"}, "downloads": -1, "filename": "libnl-0.1.1.tar.gz", "has_sig": false, "md5_digest": "17b2bf9f717f2fd184810936b034a3c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62139, "upload_time": "2015-03-16T03:41:13", "upload_time_iso_8601": "2015-03-16T03:41:13.341634Z", "url": "https://files.pythonhosted.org/packages/da/80/ef28ef4d6313005af2225b2443294c600d69167431d961e74ef005c4f5e9/libnl-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7abb80f459dfb63d4bf3eee463b0d222", "sha256": "4afc211b90dea144c9b9fa18df5a314c729571bc26e7450ef9adf26e15c23f75"}, "downloads": -1, "filename": "libnl-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7abb80f459dfb63d4bf3eee463b0d222", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63064, "upload_time": "2015-03-27T06:06:14", "upload_time_iso_8601": "2015-03-27T06:06:14.253900Z", "url": "https://files.pythonhosted.org/packages/03/2b/b1338cb872a0bc608c1406b342cc4f63910d2549af9832118e9e79575c2b/libnl-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7abb80f459dfb63d4bf3eee463b0d222", "sha256": "4afc211b90dea144c9b9fa18df5a314c729571bc26e7450ef9adf26e15c23f75"}, "downloads": -1, "filename": "libnl-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7abb80f459dfb63d4bf3eee463b0d222", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63064, "upload_time": "2015-03-27T06:06:14", "upload_time_iso_8601": "2015-03-27T06:06:14.253900Z", "url": "https://files.pythonhosted.org/packages/03/2b/b1338cb872a0bc608c1406b342cc4f63910d2549af9832118e9e79575c2b/libnl-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:31 2020"}