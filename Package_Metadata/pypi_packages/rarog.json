{"info": {"author": "Illarion Khlestov", "author_email": "khlyestovillarion@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries"], "description": "===================================================\nMonitoring utility for machine learning experiments\n===================================================\n\n.. image:: https://travis-ci.com/ikhlestov/rarog.svg?branch=master\n   :target: https://travis-ci.com/ikhlestov/rarog/\n   :alt: Travis status for master branch\n\n.. image:: https://codecov.io/gh/ikhlestov/rarog/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/ikhlestov/rarog/\n   :alt: codecov.io status for master branch\n\n.. image:: https://img.shields.io/pypi/pyversions/rarog.svg\n    :target: https://pypi.org/project/rarog\n\n\nRarog is a monitoring utility for machine learning experiments. You may use it as a\nlight-weight alternative for `TensorBoard <https://github.com/tensorflow/tensorboard>`_\nor `Visdom <https://github.com/facebookresearch/visdom>`_. Rarog stores all records in\n`ClickHouse`_ database using \n`ClickHouse Python Driver <https://github.com/mymarilyn/clickhouse-driver>`__.\n\nFeatures\n========\n\n- log common python data types(bool, int, float, string, iterables)\n- log 1d numpy arrays\n- distributed experiments monitoring\n\nSetup\n=====\n\nInstall via `pip`_:\n\n.. code-block:: bash\n\n    pip install rarog\n\nStart `ClickHouse`_ database if required:\n\n.. code-block:: bash\n\n    docker run -d --name clickhouse --ulimit nofile=262144:262144 -p 9000:9000 yandex/clickhouse-server\n\n**Important note:** the example above is just the easiest way. For production, you should\nsetup database backups or replicated.\n\nRarog supports Python 3.4 and newer.\n\nUsage\n===============\n\n.. code:: python3\n\n    import random\n    \n    from rarog import Tracker\n    \n    tracker = Tracker(name='experiment_name')\n    \n    # trace values one by one\n    for step in range(10):\n        tracker.trace(\n            name='int_value',\n            value=random.randint(10, 20),\n            step=step)\n        tracker.trace(\n            name='float_value',\n            value=random.random(),\n            step=step)\n        # provide experiment phase as a string\n        tracker.trace(\n            name='list_value',\n            value=[random.random(), random.random()],\n            step=step,\n            phase='val')\n        \n    # trace values by dict\n    for step in range(10, 20):\n        tracker.multy_trace({\n            'int_value': random.randint(10, 20),\n            'float_value': random.random()\n        }, step=step)\n    \n    # get names of traced metrics\n    tracker.metrics\n    # Out: ['time', 'step', 'phase', 'int_value', 'float_value', 'list_value']\n\n\nIf you are going to record more than 100 entries per second,\nit's better to use ``sync_step`` or ``sync_seconds`` arguments.\nThus writing to the database will be done with some period, which is much faster.\n\n.. code:: python3\n\n    # `exist_ok` flag allow to use the same name for experiment\n    step_tracker = Tracker(name='experiment_name', sync_step=1000, exist_ok=True)\n    \n    for step in range(20, 10**4):\n        step_tracker.trace(name='bool_value', value=bool(random.randint(0, 1)), step=step)\n        step_tracker.multy_trace({\n            'int_value': random.randint(10, 20),\n            'float_value': random.random()\n        }, step=step)\n    \n    # tracker should be manually synchronized after last entry\n    step_tracker.sync_accumulated_values()\n\nExperiments can be handled via manager\n\n.. code:: python3\n\n    from rarog import Manager\n    \n    manager = Manager()\n    manager.list_experiments()\n    # Out: ['experiment_name']\n    \n    manager.remove_experiment('experiment_name')\n\n\n\nRetrieving your data\n====================\n\nTODO (manually and with visualization)\n\n\n.. _ClickHouse: https://clickhouse.yandex\n.. _pip: https://pip.pypa.io/en/stable/quickstart/\n\n\nTODO\n=====\n\n- Pytorch tensors support\n- Support 2d arrays\n- Tensorflow data types support\n- Split Aggregation View for summarization and underlying tables\n- Store experiments metadata(config, author, etc.)\n- Autodocs", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ikhlestov/rarog", "keywords": "", "license": "Apache 2", "maintainer": "Illarion Khlestov", "maintainer_email": "khlyestovillarion@gmail.com", "name": "rarog", "package_url": "https://pypi.org/project/rarog/", "platform": "", "project_url": "https://pypi.org/project/rarog/", "project_urls": {"CI: Travis": "https://travis-ci.com/ikhlestov/rarog/", "Coverage: codecov": "https://codecov.io/gh/ikhlestov/rarog/", "GitHub: repo": "https://github.com/ikhlestov/rarog", "Homepage": "https://github.com/ikhlestov/rarog"}, "release_url": "https://pypi.org/project/rarog/0.1.dev1/", "requires_dist": null, "requires_python": ">=3.4.0", "summary": "Monitoring utility for machine learning experiments", "version": "0.1.dev1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.com/ikhlestov/rarog/\" rel=\"nofollow\"><img alt=\"Travis status for master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1810c44afe82072ebc26b5f1568bc3c1156ae3f1/68747470733a2f2f7472617669732d63692e636f6d2f696b686c6573746f762f7261726f672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/ikhlestov/rarog/\" rel=\"nofollow\"><img alt=\"codecov.io status for master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dca06c896fa7657789a7bc34fa83c46ed36ee0ad/68747470733a2f2f636f6465636f762e696f2f67682f696b686c6573746f762f7261726f672f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/rarog\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/rarog.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2973496d520cc49f8d40786f0ae931cbd0e9f7ef/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7261726f672e737667\"></a>\n<p>Rarog is a monitoring utility for machine learning experiments. You may use it as a\nlight-weight alternative for <a href=\"https://github.com/tensorflow/tensorboard\" rel=\"nofollow\">TensorBoard</a>\nor <a href=\"https://github.com/facebookresearch/visdom\" rel=\"nofollow\">Visdom</a>. Rarog stores all records in\n<a href=\"https://clickhouse.yandex\" rel=\"nofollow\">ClickHouse</a> database using\n<a href=\"https://github.com/mymarilyn/clickhouse-driver\" rel=\"nofollow\">ClickHouse Python Driver</a>.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>log common python data types(bool, int, float, string, iterables)</li>\n<li>log 1d numpy arrays</li>\n<li>distributed experiments monitoring</li>\n</ul>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>Install via <a href=\"https://pip.pypa.io/en/stable/quickstart/\" rel=\"nofollow\">pip</a>:</p>\n<pre>pip install rarog\n</pre>\n<p>Start <a href=\"https://clickhouse.yandex\" rel=\"nofollow\">ClickHouse</a> database if required:</p>\n<pre>docker run -d --name clickhouse --ulimit <span class=\"nv\">nofile</span><span class=\"o\">=</span><span class=\"m\">262144</span>:262144 -p <span class=\"m\">9000</span>:9000 yandex/clickhouse-server\n</pre>\n<p><strong>Important note:</strong> the example above is just the easiest way. For production, you should\nsetup database backups or replicated.</p>\n<p>Rarog supports Python 3.4 and newer.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">rarog</span> <span class=\"kn\">import</span> <span class=\"n\">Tracker</span>\n\n<span class=\"n\">tracker</span> <span class=\"o\">=</span> <span class=\"n\">Tracker</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'experiment_name'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># trace values one by one</span>\n<span class=\"k\">for</span> <span class=\"n\">step</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'int_value'</span><span class=\"p\">,</span>\n        <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n        <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"n\">step</span><span class=\"p\">)</span>\n    <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'float_value'</span><span class=\"p\">,</span>\n        <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(),</span>\n        <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"n\">step</span><span class=\"p\">)</span>\n    <span class=\"c1\"># provide experiment phase as a string</span>\n    <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'list_value'</span><span class=\"p\">,</span>\n        <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(),</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()],</span>\n        <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"n\">step</span><span class=\"p\">,</span>\n        <span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"s1\">'val'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># trace values by dict</span>\n<span class=\"k\">for</span> <span class=\"n\">step</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">):</span>\n    <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">multy_trace</span><span class=\"p\">({</span>\n        <span class=\"s1\">'int_value'</span><span class=\"p\">:</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n        <span class=\"s1\">'float_value'</span><span class=\"p\">:</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span>\n    <span class=\"p\">},</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"n\">step</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get names of traced metrics</span>\n<span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">metrics</span>\n<span class=\"c1\"># Out: ['time', 'step', 'phase', 'int_value', 'float_value', 'list_value']</span>\n</pre>\n<p>If you are going to record more than 100 entries per second,\nit\u2019s better to use <tt>sync_step</tt> or <tt>sync_seconds</tt> arguments.\nThus writing to the database will be done with some period, which is much faster.</p>\n<pre><span class=\"c1\"># `exist_ok` flag allow to use the same name for experiment</span>\n<span class=\"n\">step_tracker</span> <span class=\"o\">=</span> <span class=\"n\">Tracker</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'experiment_name'</span><span class=\"p\">,</span> <span class=\"n\">sync_step</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">step</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"n\">step_tracker</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'bool_value'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"n\">step</span><span class=\"p\">)</span>\n    <span class=\"n\">step_tracker</span><span class=\"o\">.</span><span class=\"n\">multy_trace</span><span class=\"p\">({</span>\n        <span class=\"s1\">'int_value'</span><span class=\"p\">:</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n        <span class=\"s1\">'float_value'</span><span class=\"p\">:</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span>\n    <span class=\"p\">},</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"n\">step</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># tracker should be manually synchronized after last entry</span>\n<span class=\"n\">step_tracker</span><span class=\"o\">.</span><span class=\"n\">sync_accumulated_values</span><span class=\"p\">()</span>\n</pre>\n<p>Experiments can be handled via manager</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rarog</span> <span class=\"kn\">import</span> <span class=\"n\">Manager</span>\n\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">Manager</span><span class=\"p\">()</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">list_experiments</span><span class=\"p\">()</span>\n<span class=\"c1\"># Out: ['experiment_name']</span>\n\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">remove_experiment</span><span class=\"p\">(</span><span class=\"s1\">'experiment_name'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"retrieving-your-data\">\n<h2>Retrieving your data</h2>\n<p>TODO (manually and with visualization)</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Pytorch tensors support</li>\n<li>Support 2d arrays</li>\n<li>Tensorflow data types support</li>\n<li>Split Aggregation View for summarization and underlying tables</li>\n<li>Store experiments metadata(config, author, etc.)</li>\n<li>Autodocs</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5757442, "releases": {"0.1.dev0": [{"comment_text": "", "digests": {"md5": "b5da099264da21dc1ad17942282e4464", "sha256": "e2b2625f407ac6a15efbd81b13843a4ef67c24e80b96b915335201a645ed3446"}, "downloads": -1, "filename": "rarog-0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "b5da099264da21dc1ad17942282e4464", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 5643, "upload_time": "2019-08-29T22:34:43", "upload_time_iso_8601": "2019-08-29T22:34:43.150612Z", "url": "https://files.pythonhosted.org/packages/14/1e/f786b6aca6aa4ac97d7922a9ca49bb3cbf7622d2383053d0a866b6cebb2b/rarog-0.1.dev0.tar.gz", "yanked": false}], "0.1.dev1": [{"comment_text": "", "digests": {"md5": "066c3b7b7ce00613c35b4900096cb46e", "sha256": "71351edd1bd9391172fa86b36c64fab58f67df8e3d1e73940a449de6a24ea473"}, "downloads": -1, "filename": "rarog-0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "066c3b7b7ce00613c35b4900096cb46e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 5909, "upload_time": "2019-08-29T23:10:47", "upload_time_iso_8601": "2019-08-29T23:10:47.019416Z", "url": "https://files.pythonhosted.org/packages/05/b3/0e9e69a8aa471c236c4dc4f7db61d400cd218959972abb1f0cd0437df240/rarog-0.1.dev1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "066c3b7b7ce00613c35b4900096cb46e", "sha256": "71351edd1bd9391172fa86b36c64fab58f67df8e3d1e73940a449de6a24ea473"}, "downloads": -1, "filename": "rarog-0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "066c3b7b7ce00613c35b4900096cb46e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 5909, "upload_time": "2019-08-29T23:10:47", "upload_time_iso_8601": "2019-08-29T23:10:47.019416Z", "url": "https://files.pythonhosted.org/packages/05/b3/0e9e69a8aa471c236c4dc4f7db61d400cd218959972abb1f0cd0437df240/rarog-0.1.dev1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:18 2020"}