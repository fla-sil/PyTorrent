{"info": {"author": "David Ziegler", "author_email": "david.ziegler@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "Django css\n=================\n\nDjango-css is a fork of django_compressor_ that makes it easy to use CSS compilers with your Django projects. CSS compilers extend CSS syntax to include more powerful features such as variables and nested blocks, and pretty much rock_ all around. Django-css can currently be used with any CSS compiler that can be called from the command line, such as HSS_, Sass_, CleverCSS_, or LESS_.\n\n.. _rock: http://blog.davidziegler.net/post/92203003/css-compilers-rock\n.. _HSS: http://ncannasse.fr/projects/hss \n.. _Sass: http://haml.hamptoncatlin.com/docs/rdoc/classes/Sass.html\n.. _CleverCSS: http://github.com/dziegler/clevercss/tree/master \n.. _LESS: http://lesscss.org/\n.. _django_compressor: http://github.com/mintchaos/django_compressor/tree/master \n\nThanks to django_compressor, django-css will also version and compress linked and inline javascript or CSS into a single cached file. These cached files will get served through whatever frontend server you use for serving static files, because serving static files through Django is just silly.\n\nNote: The pypi version of CleverCSS is buggy and will not work with django-css. Use the updated version on github: http://github.com/dziegler/clevercss/tree/master \n\nInstallation\n************\n\nAdd ``compressor`` to INSTALLED_APPS. You should also enable some type of caching backend such as memcached, e.g. ``CACHE_BACKEND = 'memcached://127.0.0.1:11211/'``. Don't worry, your static files are not being served through Django. The only thing stored in cache is the path to the static file.\n\n\nNEW in v2.2!\n*************\nDjango-css now uses Django's storage backend when saving compressed files. This means that if you're using something like the S3 backend in django-storages_, your compressed files will automatically be saved to S3. If not, everything should function as normal. Check out django-storages_ for more info on custom storage backends.\n\n.. _django-storages: http://code.welldev.org/django-storages/wiki/Home\n\n\nUsage\n*****\n\nSyntax::\n\n    {% load compress %}\n    {% compress <js/css> %}\n    <html of inline or linked JS/CSS>\n    {% endcompress %}\n\nExamples::\n\n    {% load compress %}\n    {% compress css %}\n    <link rel=\"stylesheet\" href=\"/media/css/one.css\" type=\"text/css\" charset=\"utf-8\">\n    <link rel=\"stylesheet\" href=\"/media/css/two.sass\" type=\"text/css\" charset=\"utf-8\">\n    {% endcompress %}\n\nWhich would be rendered like::\n\n    <link rel=\"stylesheet\" href=\"/media/CACHE/css/f7c661b7a124.css\" type=\"text/css\" media=\"all\" charset=\"utf-8\">\n\nor::\n\n    {% load compress %}\n    {% compress js %}\n    <script src=\"/media/js/one.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <script type=\"text/javascript\" charset=\"utf-8\">obj.value = \"value\";</script>\n    {% endcompress %}\n\nWhich would be rendered like::\n\n    <script type=\"text/javascript\" src=\"/media/CACHE/js/3f33b9146e12.js\" charset=\"utf-8\"></script>\n\nIf you're using xhtml, you should use::\n\n    {% load compress %}\n    {% compress css xhtml %}\n    <link rel=\"stylesheet\" href=\"/media/css/one.css\" type=\"text/css\" charset=\"utf-8\" />\n    <link rel=\"stylesheet\" href=\"/media/css/two.sass\" type=\"text/css\" charset=\"utf-8\" />\n    {% compress css %}\n\nWhich would be rendered like::\n\n    <link rel=\"stylesheet\" href=\"/media/CACHE/css/f7c661b7a124.css\" type=\"text/css\" media=\"all\" charset=\"utf-8\" />\n\n\nSettings\n********\n\n`COMPILER_FORMATS` default: {}\n  A dictionary specifying the compiler and arguments to associate with each extension. \n\n\ndjango-css will select which CSS compiler to use based off a file's extension. For example::\n\n    COMPILER_FORMATS = {\n        '.sass': {\n            'binary_path':'sass',\n            'arguments': '*.sass *.css' \n        },\n        '.hss': {\n            'binary_path':'/home/dziegler/hss',\n            'arguments':'*.hss'\n        },\n        '.ccss': {\n            'binary_path':'clevercss',\n            'arguments': '*.ccss'\n        },\n    }\n\n\nwill use Sass to compile `*.sass` files, HSS to compile `*.hss` files, and clevercss to compile `*.ccss` files. `*.css` files will be treated like normal css files. \n\nbinary_path is the path to the CSS compiler. In the above example, sass and clevercss are installed in my path, and   hss is located at /home/dziegler/hss.\n\narguments are arguments you would call in the command line to the compiler. The order and format of these will depend on the CSS compiler you use. Prior to compilation, * will be replaced with the name of your file to be compiled.\n\nIf this seems a little hacky, it's because I wanted to make it easy to use whatever CSS compiler you want with as little setup as possible. \n\n\n`COMPRESS` default: the opposite of `DEBUG`\n  Boolean that decides if compression will happen.\n\n`COMPRESS_CSS_FILTERS` default: []\n  A list of filters that will be applied to CSS.\n\n`COMPRESS_JS_FILTERS` default: ['compressor.filters.jsmin.JSMinFilter'])\n  A list of filters that will be applied to javascript.\n\n`COMPRESS_URL` default: `MEDIA_URL`\n  Controls the URL that linked media will be read from and compressed media\n  will be written to.\n\n`COMPRESS_ROOT` default: `MEDIA_ROOT`\n  Controls the absolute file path that linked media will be read from and\n  compressed media will be written to.\n\n`COMPRESS_OUTPUT_DIR` default: `\"CACHE\"`\n  Controls the directory inside `COMPRESS_ROOT` that compressed files will\n  be written to.\n \n`ABSOLUTE_CSS_URLS` default: `True`\n  If True, all relative url() bits specified in linked CSS files are automatically\n  converted to absolute URLs while being processed. Any local absolute urls (those\n  starting with a '/') are left alone.\n\n\nNotes\n*****\n\nStylesheets that are @import'd are not compressed into the main file. They are\nleft alone.\n\nIf the media attribute is set on <style> and <link> elements, a separate compressed file is created and linked for each media value you specified. This allows the media attribute to remain on the generated link element, instead of wrapping your CSS with @media blocks (which can break your own @media queries or @font-face declarations). It also allows browsers to avoid downloading CSS for irrelevant media types.\n\nLinked files must be on your COMPRESS_URL (which defaults to MEDIA_URL).\nIf DEBUG is true off-site files will throw exceptions. If DEBUG is false\nthey will be silently stripped.\n\nCSS files are compiled only when needed, because it would be silly to re-compile on every page request. The way this works is that django-css looks at the time your css was last modified, and the time your CleverCSS, HSS, etc file was modified. If the modification time for the CleverCSS, HSS, etc file is after the css file's, then the css file gets re-compiled. \n\nIf COMPRESS is False (defaults to the opposite of DEBUG) CSS files will still be compiled if needed, but files will not be compressed and versioned.\n\nThe pypi version of CleverCSS is buggy and will not work with django-css. Use the updated version on github: http://github.com/dziegler/clevercss/tree/master \n\n**Recommendations:**\n\n* Use only relative or full domain absolute urls in your CSS files.\n* Avoid @import! Simply list all your CSS files in the HTML, they'll be combined anyway.\n\n\nChanges from 1.0.0, aka the version from google code\n****************************************************\n\nDjango-css was previously using django-compress_ for versioning and compression, and it now uses django_compressor_. The main reasons being that with django_compressor, css/js files are included in the template itself, not in settings, and versioning is much cleaner. Version 2 requires much less setup and is easier to use, but is not compatible with version 1.\n\n.. _django-compress: http://code.google.com/p/django-compress/\n.. _django_compressor: http://github.com/mintchaos/django_compressor/tree/master \n\nSpecial thanks to Christian Metts and Andreas Pelme for all their hard work on django_compressor and django-compress.\n\n\n\n\nDependecies\n***********\n\n* BeautifulSoup", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/dziegler/django-css", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-css", "package_url": "https://pypi.org/project/django-css/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-css/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/dziegler/django-css"}, "release_url": "https://pypi.org/project/django-css/2.3.1/", "requires_dist": null, "requires_python": null, "summary": "django-css provides an easy way to use CSS compilers with Django projects, and an automated system for compressing CSS and JavaScript files", "version": "2.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django-css is a fork of <a href=\"http://github.com/mintchaos/django_compressor/tree/master\" rel=\"nofollow\">django_compressor</a> that makes it easy to use CSS compilers with your Django projects. CSS compilers extend CSS syntax to include more powerful features such as variables and nested blocks, and pretty much <a href=\"http://blog.davidziegler.net/post/92203003/css-compilers-rock\" rel=\"nofollow\">rock</a> all around. Django-css can currently be used with any CSS compiler that can be called from the command line, such as <a href=\"http://ncannasse.fr/projects/hss\" rel=\"nofollow\">HSS</a>, <a href=\"http://haml.hamptoncatlin.com/docs/rdoc/classes/Sass.html\" rel=\"nofollow\">Sass</a>, <a href=\"http://github.com/dziegler/clevercss/tree/master\" rel=\"nofollow\">CleverCSS</a>, or <a href=\"http://lesscss.org/\" rel=\"nofollow\">LESS</a>.</p>\n<p>Thanks to django_compressor, django-css will also version and compress linked and inline javascript or CSS into a single cached file. These cached files will get served through whatever frontend server you use for serving static files, because serving static files through Django is just silly.</p>\n<p>Note: The pypi version of CleverCSS is buggy and will not work with django-css. Use the updated version on github: <a href=\"http://github.com/dziegler/clevercss/tree/master\" rel=\"nofollow\">http://github.com/dziegler/clevercss/tree/master</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Add <tt>compressor</tt> to INSTALLED_APPS. You should also enable some type of caching backend such as memcached, e.g. <tt>CACHE_BACKEND = <span class=\"pre\">'memcached://127.0.0.1:11211/'</span></tt>. Don\u2019t worry, your static files are not being served through Django. The only thing stored in cache is the path to the static file.</p>\n</div>\n<div id=\"new-in-v2-2\">\n<h2>NEW in v2.2!</h2>\n<p>Django-css now uses Django\u2019s storage backend when saving compressed files. This means that if you\u2019re using something like the S3 backend in <a href=\"http://code.welldev.org/django-storages/wiki/Home\" rel=\"nofollow\">django-storages</a>, your compressed files will automatically be saved to S3. If not, everything should function as normal. Check out <a href=\"http://code.welldev.org/django-storages/wiki/Home\" rel=\"nofollow\">django-storages</a> for more info on custom storage backends.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Syntax:</p>\n<pre>{% load compress %}\n{% compress &lt;js/css&gt; %}\n&lt;html of inline or linked JS/CSS&gt;\n{% endcompress %}\n</pre>\n<p>Examples:</p>\n<pre>{% load compress %}\n{% compress css %}\n&lt;link rel=\"stylesheet\" href=\"/media/css/one.css\" type=\"text/css\" charset=\"utf-8\"&gt;\n&lt;link rel=\"stylesheet\" href=\"/media/css/two.sass\" type=\"text/css\" charset=\"utf-8\"&gt;\n{% endcompress %}\n</pre>\n<p>Which would be rendered like:</p>\n<pre>&lt;link rel=\"stylesheet\" href=\"/media/CACHE/css/f7c661b7a124.css\" type=\"text/css\" media=\"all\" charset=\"utf-8\"&gt;\n</pre>\n<p>or:</p>\n<pre>{% load compress %}\n{% compress js %}\n&lt;script src=\"/media/js/one.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;obj.value = \"value\";&lt;/script&gt;\n{% endcompress %}\n</pre>\n<p>Which would be rendered like:</p>\n<pre>&lt;script type=\"text/javascript\" src=\"/media/CACHE/js/3f33b9146e12.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n</pre>\n<p>If you\u2019re using xhtml, you should use:</p>\n<pre>{% load compress %}\n{% compress css xhtml %}\n&lt;link rel=\"stylesheet\" href=\"/media/css/one.css\" type=\"text/css\" charset=\"utf-8\" /&gt;\n&lt;link rel=\"stylesheet\" href=\"/media/css/two.sass\" type=\"text/css\" charset=\"utf-8\" /&gt;\n{% compress css %}\n</pre>\n<p>Which would be rendered like:</p>\n<pre>&lt;link rel=\"stylesheet\" href=\"/media/CACHE/css/f7c661b7a124.css\" type=\"text/css\" media=\"all\" charset=\"utf-8\" /&gt;\n</pre>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<dl>\n<dt><cite>COMPILER_FORMATS</cite> default: {}</dt>\n<dd>A dictionary specifying the compiler and arguments to associate with each extension.</dd>\n</dl>\n<p>django-css will select which CSS compiler to use based off a file\u2019s extension. For example:</p>\n<pre>COMPILER_FORMATS = {\n    '.sass': {\n        'binary_path':'sass',\n        'arguments': '*.sass *.css'\n    },\n    '.hss': {\n        'binary_path':'/home/dziegler/hss',\n        'arguments':'*.hss'\n    },\n    '.ccss': {\n        'binary_path':'clevercss',\n        'arguments': '*.ccss'\n    },\n}\n</pre>\n<p>will use Sass to compile <cite>*.sass</cite> files, HSS to compile <cite>*.hss</cite> files, and clevercss to compile <cite>*.ccss</cite> files. <cite>*.css</cite> files will be treated like normal css files.</p>\n<p>binary_path is the path to the CSS compiler. In the above example, sass and clevercss are installed in my path, and   hss is located at /home/dziegler/hss.</p>\n<p>arguments are arguments you would call in the command line to the compiler. The order and format of these will depend on the CSS compiler you use. Prior to compilation, * will be replaced with the name of your file to be compiled.</p>\n<p>If this seems a little hacky, it\u2019s because I wanted to make it easy to use whatever CSS compiler you want with as little setup as possible.</p>\n<dl>\n<dt><cite>COMPRESS</cite> default: the opposite of <cite>DEBUG</cite></dt>\n<dd>Boolean that decides if compression will happen.</dd>\n<dt><cite>COMPRESS_CSS_FILTERS</cite> default: []</dt>\n<dd>A list of filters that will be applied to CSS.</dd>\n<dt><cite>COMPRESS_JS_FILTERS</cite> default: [\u2018compressor.filters.jsmin.JSMinFilter\u2019])</dt>\n<dd>A list of filters that will be applied to javascript.</dd>\n<dt><cite>COMPRESS_URL</cite> default: <cite>MEDIA_URL</cite></dt>\n<dd>Controls the URL that linked media will be read from and compressed media\nwill be written to.</dd>\n<dt><cite>COMPRESS_ROOT</cite> default: <cite>MEDIA_ROOT</cite></dt>\n<dd>Controls the absolute file path that linked media will be read from and\ncompressed media will be written to.</dd>\n<dt><cite>COMPRESS_OUTPUT_DIR</cite> default: <cite>\u201cCACHE\u201d</cite></dt>\n<dd>Controls the directory inside <cite>COMPRESS_ROOT</cite> that compressed files will\nbe written to.</dd>\n<dt><cite>ABSOLUTE_CSS_URLS</cite> default: <cite>True</cite></dt>\n<dd>If True, all relative url() bits specified in linked CSS files are automatically\nconverted to absolute URLs while being processed. Any local absolute urls (those\nstarting with a \u2018/\u2019) are left alone.</dd>\n</dl>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<p>Stylesheets that are @import\u2019d are not compressed into the main file. They are\nleft alone.</p>\n<p>If the media attribute is set on &lt;style&gt; and &lt;link&gt; elements, a separate compressed file is created and linked for each media value you specified. This allows the media attribute to remain on the generated link element, instead of wrapping your CSS with @media blocks (which can break your own @media queries or @font-face declarations). It also allows browsers to avoid downloading CSS for irrelevant media types.</p>\n<p>Linked files must be on your COMPRESS_URL (which defaults to MEDIA_URL).\nIf DEBUG is true off-site files will throw exceptions. If DEBUG is false\nthey will be silently stripped.</p>\n<p>CSS files are compiled only when needed, because it would be silly to re-compile on every page request. The way this works is that django-css looks at the time your css was last modified, and the time your CleverCSS, HSS, etc file was modified. If the modification time for the CleverCSS, HSS, etc file is after the css file\u2019s, then the css file gets re-compiled.</p>\n<p>If COMPRESS is False (defaults to the opposite of DEBUG) CSS files will still be compiled if needed, but files will not be compressed and versioned.</p>\n<p>The pypi version of CleverCSS is buggy and will not work with django-css. Use the updated version on github: <a href=\"http://github.com/dziegler/clevercss/tree/master\" rel=\"nofollow\">http://github.com/dziegler/clevercss/tree/master</a></p>\n<p><strong>Recommendations:</strong></p>\n<ul>\n<li>Use only relative or full domain absolute urls in your CSS files.</li>\n<li>Avoid @import! Simply list all your CSS files in the HTML, they\u2019ll be combined anyway.</li>\n</ul>\n</div>\n<div id=\"changes-from-1-0-0-aka-the-version-from-google-code\">\n<h2>Changes from 1.0.0, aka the version from google code</h2>\n<p>Django-css was previously using <a href=\"http://code.google.com/p/django-compress/\" rel=\"nofollow\">django-compress</a> for versioning and compression, and it now uses <a href=\"http://github.com/mintchaos/django_compressor/tree/master\" rel=\"nofollow\">django_compressor</a>. The main reasons being that with django_compressor, css/js files are included in the template itself, not in settings, and versioning is much cleaner. Version 2 requires much less setup and is easier to use, but is not compatible with version 1.</p>\n<p>Special thanks to Christian Metts and Andreas Pelme for all their hard work on django_compressor and django-compress.</p>\n</div>\n<div id=\"dependecies\">\n<h2>Dependecies</h2>\n<ul>\n<li>BeautifulSoup</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 789403, "releases": {"2.1.4": [{"comment_text": "", "digests": {"md5": "df15cb3bcba1764cf1378208ee81bc62", "sha256": "4b9ee5816fd4c1e4d59388c3da2190d62d12ad77c361deff83bae4cc96b04995"}, "downloads": -1, "filename": "django-css-2.1.4.tar.gz", "has_sig": false, "md5_digest": "df15cb3bcba1764cf1378208ee81bc62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12611, "upload_time": "2009-11-13T05:14:21", "upload_time_iso_8601": "2009-11-13T05:14:21.183201Z", "url": "https://files.pythonhosted.org/packages/11/11/400ee5ce723e03ed59a57983fcb8c8702237df9847febee508674375ba75/django-css-2.1.4.tar.gz", "yanked": false}], "2.1.5": [{"comment_text": "", "digests": {"md5": "b5d39b6ff890b5a1d369f32942d2634d", "sha256": "48a75879f5beaa25442c69103e81d3c34c2b83c55bb6f548812e0e90296f402f"}, "downloads": -1, "filename": "django-css-2.1.5.tar.gz", "has_sig": false, "md5_digest": "b5d39b6ff890b5a1d369f32942d2634d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12743, "upload_time": "2009-12-31T07:33:10", "upload_time_iso_8601": "2009-12-31T07:33:10.511670Z", "url": "https://files.pythonhosted.org/packages/33/f4/c961e3b2869ab7631e752d4e6ce11e3ece42d5460e9148dea77f020c5250/django-css-2.1.5.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0b2cee44e69f33b0c10016e934912c2", "sha256": "a3e330fc574fbb676c5f821c6e3c1a04625cb0571b68899dfb1b69240737e24d"}, "downloads": -1, "filename": "django-css-2.1.5.zip", "has_sig": false, "md5_digest": "d0b2cee44e69f33b0c10016e934912c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21373, "upload_time": "2009-12-31T07:33:36", "upload_time_iso_8601": "2009-12-31T07:33:36.939608Z", "url": "https://files.pythonhosted.org/packages/5e/21/52f997e74b131cd7dc6d2f0fadb0ca3b9f6f87412df62f6393ff64141e3b/django-css-2.1.5.zip", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "d3262a127dade5c2482acadce04e7430", "sha256": "1605e04fbeeaffb82f90263b16d8d23df4453982824761d86dcba2373e5bdaa1"}, "downloads": -1, "filename": "django-css-2.2.tar.gz", "has_sig": false, "md5_digest": "d3262a127dade5c2482acadce04e7430", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13039, "upload_time": "2010-01-28T14:55:26", "upload_time_iso_8601": "2010-01-28T14:55:26.034804Z", "url": "https://files.pythonhosted.org/packages/5e/f7/08941e94a36fbca0720c87136072591e8733d426f2fe4714be9a2c7955bb/django-css-2.2.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "b4ab5e9a8d0079abafdbf0d5e67c579d", "sha256": "fbcef7fda419289cf98cabf6a0b7e3a7276704b2092af56297ae41ea8716a853"}, "downloads": -1, "filename": "django-css-2.2.1.tar.gz", "has_sig": false, "md5_digest": "b4ab5e9a8d0079abafdbf0d5e67c579d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13134, "upload_time": "2010-01-29T00:21:40", "upload_time_iso_8601": "2010-01-29T00:21:40.417718Z", "url": "https://files.pythonhosted.org/packages/40/6d/72bdb15c182566692c27de33ca1df92bb7d1f01c0ec931d5a442f67fb45c/django-css-2.2.1.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "dd43941221e016dfd4dee79831f1c1a4", "sha256": "7126ce49f8dedbbec0401d364ce32180ae4b576d91fcdae6bfa624e52fa84832"}, "downloads": -1, "filename": "django-css-2.3.1.tar.gz", "has_sig": false, "md5_digest": "dd43941221e016dfd4dee79831f1c1a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15500, "upload_time": "2010-11-03T21:39:45", "upload_time_iso_8601": "2010-11-03T21:39:45.686660Z", "url": "https://files.pythonhosted.org/packages/ca/c4/637f19d7a4b573c8431a571bb6a70d0623b5532cc433eeff7025a9dff802/django-css-2.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dd43941221e016dfd4dee79831f1c1a4", "sha256": "7126ce49f8dedbbec0401d364ce32180ae4b576d91fcdae6bfa624e52fa84832"}, "downloads": -1, "filename": "django-css-2.3.1.tar.gz", "has_sig": false, "md5_digest": "dd43941221e016dfd4dee79831f1c1a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15500, "upload_time": "2010-11-03T21:39:45", "upload_time_iso_8601": "2010-11-03T21:39:45.686660Z", "url": "https://files.pythonhosted.org/packages/ca/c4/637f19d7a4b573c8431a571bb6a70d0623b5532cc433eeff7025a9dff802/django-css-2.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:46 2020"}