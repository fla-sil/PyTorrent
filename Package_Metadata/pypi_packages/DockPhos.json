{"info": {"author": "SDC-CH", "author_email": "sdc-ch@unige.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Using DockerPhosphoros\n\n## Starting the container\n\nUsing DockerPhosphoros is straight forward. First you have to start the Phosphoros docker container (which will continue running in the background):\n\n```bash\nDockPhos start\n```\n\nNote that when you start the container, your Phosphoros root directory will be mounted to the container (see Directory Organization for more information of what this directory is). If this directory does not exist (by default is the directory Phosphoros under your home directory) the container will not start and you will get an error message. To fix this you just have to create the directory.\n\n**Tip**:  The first time you start the Phosphoros docker container, it will be downloaded from the internet. This may take a while, so be patient. The next time you start the container everything will be available locally and it will start much faster.\n\n\n## Using a different Phosphoros root directory\n\nIf you do not want to use the default Phosphoros root directory you can either set the environment variable `PHOSPHOROS_ROOT` or your can pass the -d option to the start command:\n\n```bash\nDockPhos start -d \"/your/phosphoros/root/dir\"\n```\n\nIf the Phosphoros container was already running it will be restarted and the new directory will be mounted. Again, the directory must already exist, otherwise you will get an error message.\n\n## Connecting to the container\n\nTo connect to the container you can use the following command:\n\n```bash\nDockPhos connect\n```\n\nAfter running this command your terminal will be moved in the Phosphoros container. From there you can use any of the Phosphoros commands, for example:\n\n```bash\nPhosphoros GUI\n```\n\n**Tip:**  You can run the `DockPhos` connect command in multiple terminals and all of them will connect to the same container\nNote that when you are inside the container you are the user phosphoros and that the Phosphoros root directory is mounted under `/home/phosphoros/Phosphoros`.\n\n**Warning:** The filesystem of the container is NOT the same with yours! Your local files will not be accessible from inside the container. The only exception is the Phosphoros root directory, which can be used to move files in and out of the container.\n\nWhen you want to leave the container and return back to your machine you can just type exit. This will not stop the Phosphoros container. You can re-connect using the `DockPhos` connect command.\n\n## Choosing the Phosphoros version\n\nBy default, when run the start command the latest stable version of Phosphoros is used. If you want to use a different version you can use the -v option when you start the container:\n\n```bash\nDockPhos start -v \"<VERSION>\"\n```\n\nIf you want to get a list of all the available versions you can run the command:\n\n```bash\nDockPhos versions\n```\n\n## Stopping the container\n\nAfter you finish you work and you exit the container using the exit command you can stop stop the Phosphoros container to release your resources by running:\n\n```bash\nDockPhos stop\n```\n\n## Advanced options\n\n### Mounting extra directories\n\nSometimes you might need to have access to files which are not under the Phosphoros root directory. To mount extra directories, so they are visible from inside the container you can use the -m option when you start the container:\n\n```bash\nDockPhos start -m \"/directory/to/mount\"\n```\n\nAll directories mounted this way are visible in the container under the /mount directory and they contain the full absolute path of the mounted directory. For example, the above command will make the directory available inside the container user:\n\n```\n/mount/directory/to/mount\n```\n\nIf the directory path is too long, you can use an alias name, by prefixing the directory to mount with : and the alias name:\n\n```bash\nDockPhos start -m \"/directory/to/mount:mydir\"\n```\n\nThe above command will make the directory available inside the container under:\n\n```\n/mount/mydir\n```\n\nIf you want to mount more than one directories you can pass multiple directories to the `-m` option, separated by space:\n\n```bash\nDockPhos start -m /first/dir/to/mount:first /second/dir/to/mount:second\n```\n\n### Deleting the Phosphoros docker images\n\nWhen you run the `DockPhos` start command, docker will download from the internet the Phosphoros docker images. The location where these files are stored depends on the OS and they are managed by the docker itself. If you want to delete all these images to get back your disk space you can run the command:\n\n```bash\nDockPhos cleanup\n```\n\n**Tip:** The next time you start the docker container the images will be re-downloaded automatically\n\n### Minimizing the disk space usage\n\nThe Phosphoros docker images can be quite big. This is to support extra functionality above the core Phosphoros. If you have disk space limitations and you are not interested on the post-processing functionality you can use the `-l` option when you start the container, which will download a smaller image:\n\n```bash\nDockPhos start -l \"<LABEL>\"\n```\n\nThe currently available labels are the following:\n\ntopcat (1.07 GB)\n: Contains all the Phosphoros tools as well as topcat for examining the results (see Connecting with TOPCAT for more details). This is the default and recommended option.\n\nfull (870 MB)\n: Contains all the Phosphoros tools except the topcat (topcat and JRE are removed).\n\nlight (491 MB)\n: Contains the Phosphoros GUI and all the core functionality. numpy, astropy and matplotlib are removed, so most of the post processing Phosphoros tools will not work.\n\ncli (386 MB)\n: The smallest available image. Only the core functionality of the Phosphoros can be used from the command line.\n\nTo get a full up to date list of the available labels you can use the command:\n\n```bash\nDockPhos labels\n```\n\n**Tip:** The Phosphoros docker images are built as a stack, so if you run multiple labels, the total size occupied will by only the size of the biggest one.\n\n### Retrieving the status of the Phosphoros container\n\nTo check if the Phosphoros docker container is already running and to get information about it you can run the command:\n\n```bash\nDockPhos status\n```\n\nIf the container is running, this command will return its docker ID, the local port used to connect to the container and all the directories mounted.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.euclid-sgs.uk//SDC-CH/SDCCH_DockerPhosphoros", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "DockPhos", "package_url": "https://pypi.org/project/DockPhos/", "platform": "", "project_url": "https://pypi.org/project/DockPhos/", "project_urls": {"Homepage": "https://gitlab.euclid-sgs.uk//SDC-CH/SDCCH_DockerPhosphoros"}, "release_url": "https://pypi.org/project/DockPhos/4.6/", "requires_dist": ["coloredlogs", "requests", "packaging"], "requires_python": ">=3.1", "summary": "Helper script for using the Phosphoros Docker container", "version": "4.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Using DockerPhosphoros</h1>\n<h2>Starting the container</h2>\n<p>Using DockerPhosphoros is straight forward. First you have to start the Phosphoros docker container (which will continue running in the background):</p>\n<pre>DockPhos start\n</pre>\n<p>Note that when you start the container, your Phosphoros root directory will be mounted to the container (see Directory Organization for more information of what this directory is). If this directory does not exist (by default is the directory Phosphoros under your home directory) the container will not start and you will get an error message. To fix this you just have to create the directory.</p>\n<p><strong>Tip</strong>:  The first time you start the Phosphoros docker container, it will be downloaded from the internet. This may take a while, so be patient. The next time you start the container everything will be available locally and it will start much faster.</p>\n<h2>Using a different Phosphoros root directory</h2>\n<p>If you do not want to use the default Phosphoros root directory you can either set the environment variable <code>PHOSPHOROS_ROOT</code> or your can pass the -d option to the start command:</p>\n<pre>DockPhos start -d <span class=\"s2\">\"/your/phosphoros/root/dir\"</span>\n</pre>\n<p>If the Phosphoros container was already running it will be restarted and the new directory will be mounted. Again, the directory must already exist, otherwise you will get an error message.</p>\n<h2>Connecting to the container</h2>\n<p>To connect to the container you can use the following command:</p>\n<pre>DockPhos connect\n</pre>\n<p>After running this command your terminal will be moved in the Phosphoros container. From there you can use any of the Phosphoros commands, for example:</p>\n<pre>Phosphoros GUI\n</pre>\n<p><strong>Tip:</strong>  You can run the <code>DockPhos</code> connect command in multiple terminals and all of them will connect to the same container\nNote that when you are inside the container you are the user phosphoros and that the Phosphoros root directory is mounted under <code>/home/phosphoros/Phosphoros</code>.</p>\n<p><strong>Warning:</strong> The filesystem of the container is NOT the same with yours! Your local files will not be accessible from inside the container. The only exception is the Phosphoros root directory, which can be used to move files in and out of the container.</p>\n<p>When you want to leave the container and return back to your machine you can just type exit. This will not stop the Phosphoros container. You can re-connect using the <code>DockPhos</code> connect command.</p>\n<h2>Choosing the Phosphoros version</h2>\n<p>By default, when run the start command the latest stable version of Phosphoros is used. If you want to use a different version you can use the -v option when you start the container:</p>\n<pre>DockPhos start -v <span class=\"s2\">\"&lt;VERSION&gt;\"</span>\n</pre>\n<p>If you want to get a list of all the available versions you can run the command:</p>\n<pre>DockPhos versions\n</pre>\n<h2>Stopping the container</h2>\n<p>After you finish you work and you exit the container using the exit command you can stop stop the Phosphoros container to release your resources by running:</p>\n<pre>DockPhos stop\n</pre>\n<h2>Advanced options</h2>\n<h3>Mounting extra directories</h3>\n<p>Sometimes you might need to have access to files which are not under the Phosphoros root directory. To mount extra directories, so they are visible from inside the container you can use the -m option when you start the container:</p>\n<pre>DockPhos start -m <span class=\"s2\">\"/directory/to/mount\"</span>\n</pre>\n<p>All directories mounted this way are visible in the container under the /mount directory and they contain the full absolute path of the mounted directory. For example, the above command will make the directory available inside the container user:</p>\n<pre><code>/mount/directory/to/mount\n</code></pre>\n<p>If the directory path is too long, you can use an alias name, by prefixing the directory to mount with : and the alias name:</p>\n<pre>DockPhos start -m <span class=\"s2\">\"/directory/to/mount:mydir\"</span>\n</pre>\n<p>The above command will make the directory available inside the container under:</p>\n<pre><code>/mount/mydir\n</code></pre>\n<p>If you want to mount more than one directories you can pass multiple directories to the <code>-m</code> option, separated by space:</p>\n<pre>DockPhos start -m /first/dir/to/mount:first /second/dir/to/mount:second\n</pre>\n<h3>Deleting the Phosphoros docker images</h3>\n<p>When you run the <code>DockPhos</code> start command, docker will download from the internet the Phosphoros docker images. The location where these files are stored depends on the OS and they are managed by the docker itself. If you want to delete all these images to get back your disk space you can run the command:</p>\n<pre>DockPhos cleanup\n</pre>\n<p><strong>Tip:</strong> The next time you start the docker container the images will be re-downloaded automatically</p>\n<h3>Minimizing the disk space usage</h3>\n<p>The Phosphoros docker images can be quite big. This is to support extra functionality above the core Phosphoros. If you have disk space limitations and you are not interested on the post-processing functionality you can use the <code>-l</code> option when you start the container, which will download a smaller image:</p>\n<pre>DockPhos start -l <span class=\"s2\">\"&lt;LABEL&gt;\"</span>\n</pre>\n<p>The currently available labels are the following:</p>\n<p>topcat (1.07 GB)\n: Contains all the Phosphoros tools as well as topcat for examining the results (see Connecting with TOPCAT for more details). This is the default and recommended option.</p>\n<p>full (870 MB)\n: Contains all the Phosphoros tools except the topcat (topcat and JRE are removed).</p>\n<p>light (491 MB)\n: Contains the Phosphoros GUI and all the core functionality. numpy, astropy and matplotlib are removed, so most of the post processing Phosphoros tools will not work.</p>\n<p>cli (386 MB)\n: The smallest available image. Only the core functionality of the Phosphoros can be used from the command line.</p>\n<p>To get a full up to date list of the available labels you can use the command:</p>\n<pre>DockPhos labels\n</pre>\n<p><strong>Tip:</strong> The Phosphoros docker images are built as a stack, so if you run multiple labels, the total size occupied will by only the size of the biggest one.</p>\n<h3>Retrieving the status of the Phosphoros container</h3>\n<p>To check if the Phosphoros docker container is already running and to get information about it you can run the command:</p>\n<pre>DockPhos status\n</pre>\n<p>If the container is running, this command will return its docker ID, the local port used to connect to the container and all the directories mounted.</p>\n\n          </div>"}, "last_serial": 6093368, "releases": {"4.4": [{"comment_text": "", "digests": {"md5": "8cd20b7ffccee4a6ec38fd54643814fd", "sha256": "1b0aa554cd822983b3a41a263e9cdcca4e43a53d56d8135e9845d3cb70a80e4e"}, "downloads": -1, "filename": "DockPhos-4.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8cd20b7ffccee4a6ec38fd54643814fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.1", "size": 11441, "upload_time": "2019-11-05T14:10:46", "upload_time_iso_8601": "2019-11-05T14:10:46.785061Z", "url": "https://files.pythonhosted.org/packages/b9/42/a07611604eda6eb67096f64572c6ba2da1783fd277660489b3a20130aea7/DockPhos-4.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef31985c9fb4308a1635322b4fdc5d6d", "sha256": "2e281c900e3a15b0d8c057b37d5a53df2e3eba5818c511008ee7e75c55675e80"}, "downloads": -1, "filename": "DockPhos-4.4.tar.gz", "has_sig": false, "md5_digest": "ef31985c9fb4308a1635322b4fdc5d6d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.1", "size": 8529, "upload_time": "2019-11-05T14:10:48", "upload_time_iso_8601": "2019-11-05T14:10:48.483385Z", "url": "https://files.pythonhosted.org/packages/80/10/e8eb53d3fa8eaf2e6ae8620a3a7787d284b2e28dcdcd47cebda93f673a27/DockPhos-4.4.tar.gz", "yanked": false}], "4.5": [{"comment_text": "", "digests": {"md5": "227da89a7c9e6828c9606cbb1d04961b", "sha256": "46d708aab8c2da92237455439a15367da79420157486c72c56e3aaf297f6b12a"}, "downloads": -1, "filename": "DockPhos-4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "227da89a7c9e6828c9606cbb1d04961b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.1", "size": 11539, "upload_time": "2019-11-07T11:42:46", "upload_time_iso_8601": "2019-11-07T11:42:46.492199Z", "url": "https://files.pythonhosted.org/packages/e5/a8/ebfb301e3a38a46e4a1053b8bf19b8360fc4e58cd319c085c552f88a6d3c/DockPhos-4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c01810e9debeba8cc59b8d10e5811062", "sha256": "03dc3c48f718763b540815c7de8d3352f216ed80e5e1299769ae064a00993645"}, "downloads": -1, "filename": "DockPhos-4.5.tar.gz", "has_sig": false, "md5_digest": "c01810e9debeba8cc59b8d10e5811062", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.1", "size": 10587, "upload_time": "2019-11-07T11:42:48", "upload_time_iso_8601": "2019-11-07T11:42:48.146789Z", "url": "https://files.pythonhosted.org/packages/54/44/408385a7b55c1ed61b4073e363d0e5b66282837d5e6b706d96aca55973cf/DockPhos-4.5.tar.gz", "yanked": false}], "4.6": [{"comment_text": "", "digests": {"md5": "ce4df92c06aee9f172b5347e16e6a8cc", "sha256": "c970702ea4963b188bc61f794a30288e7d983ef0d55e2349ce9cc1331c9dfcb0"}, "downloads": -1, "filename": "DockPhos-4.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ce4df92c06aee9f172b5347e16e6a8cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.1", "size": 11485, "upload_time": "2019-11-07T13:34:28", "upload_time_iso_8601": "2019-11-07T13:34:28.473027Z", "url": "https://files.pythonhosted.org/packages/78/2f/9fe5f681194b5bc6deaebddccce9e06766a86a0ae20f85133c8c60400ea5/DockPhos-4.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bc46bab5ac8db14e32ae7c6ef373a78", "sha256": "0770c2d134fbfaba495dc8b02a79f92f9d278f5231029d28c559072763572fe6"}, "downloads": -1, "filename": "DockPhos-4.6.tar.gz", "has_sig": false, "md5_digest": "4bc46bab5ac8db14e32ae7c6ef373a78", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.1", "size": 8557, "upload_time": "2019-11-07T13:34:29", "upload_time_iso_8601": "2019-11-07T13:34:29.684912Z", "url": "https://files.pythonhosted.org/packages/3a/75/1ae694ec324eba6b5699126ac897fe841ac6eea1fe16e3d3243f3f04d5cd/DockPhos-4.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce4df92c06aee9f172b5347e16e6a8cc", "sha256": "c970702ea4963b188bc61f794a30288e7d983ef0d55e2349ce9cc1331c9dfcb0"}, "downloads": -1, "filename": "DockPhos-4.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ce4df92c06aee9f172b5347e16e6a8cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.1", "size": 11485, "upload_time": "2019-11-07T13:34:28", "upload_time_iso_8601": "2019-11-07T13:34:28.473027Z", "url": "https://files.pythonhosted.org/packages/78/2f/9fe5f681194b5bc6deaebddccce9e06766a86a0ae20f85133c8c60400ea5/DockPhos-4.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bc46bab5ac8db14e32ae7c6ef373a78", "sha256": "0770c2d134fbfaba495dc8b02a79f92f9d278f5231029d28c559072763572fe6"}, "downloads": -1, "filename": "DockPhos-4.6.tar.gz", "has_sig": false, "md5_digest": "4bc46bab5ac8db14e32ae7c6ef373a78", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.1", "size": 8557, "upload_time": "2019-11-07T13:34:29", "upload_time_iso_8601": "2019-11-07T13:34:29.684912Z", "url": "https://files.pythonhosted.org/packages/3a/75/1ae694ec324eba6b5699126ac897fe841ac6eea1fe16e3d3243f3f04d5cd/DockPhos-4.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:45 2020"}