{"info": {"author": "Brandt Bucher", "author_email": "brandtbucher@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "<div align=center>\n\nHAX\n===\n\n[![latest version](https://img.shields.io/github/release-pre/brandtbucher/hax.svg?style=for-the-badge&label=latest)![latest release date](https://img.shields.io/github/release-date-pre/brandtbucher/hax.svg?style=for-the-badge&label=released)](https://github.com/brandtbucher/hax/releases)[![build status](https://img.shields.io/travis/com/brandtbucher/hax/master.svg?style=for-the-badge)](https://travis-ci.com/brandtbucher/hax/branches)[![issues](https://img.shields.io/github/issues-raw/brandtbucher/hax.svg?label=issues&style=for-the-badge)](https://github.com/brandtbucher/hax/issues)\n\n<br>\n\n</div>\n\n<div align=justify>\n\nHAX lets you write compiled bytecode inline with standard Python syntax. It was\noriginally built for exploring new improvements to CPython's compiler and\npeephole optimizer.\n\nInstallation\n------------\n\nHAX supports CPython 3.6+ on all platforms.\n\nTo install, just run:\n\n```sh\n$ pip install hax\n```\n\nExample\n-------\n\nConsider the following function; it accepts a sequence of items, and returns a \nlist with each item repeated twice:\n\n```py\ndef doubled(items):\n    out = []\n    for item in items:\n        out += item, item\n    return out            \n```\n\nFor example, `doubled((0, 1, 2))` returns `[0, 0, 1, 1, 2, 2]`.\n\nWe can make this function faster by keeping `out` on the stack (instead of in a \nlocal variable) and using the `LIST_APPEND` op to build it. HAX makes it \nsimple to inline these instructions:\n\n```py\nfrom hax import *\n\n@hax \ndef doubled(items):\n\n    BUILD_LIST(0)\n\n    for item in items:\n\n        LOAD_FAST(\"item\")\n        DUP_TOP()\n        LIST_APPEND(3)\n        LIST_APPEND(2)\n\n    RETURN_VALUE()\n```\n\nWith the help of labeled jump targets, the function can be further sped up by\nrewriting the for-loop in bytecode, removing _all_ temporary variables, and\noperating **entirely on the stack**:\n\n```py\nfrom hax import *\n\n@hax \ndef doubled(items):\n\n    BUILD_LIST(0)\n\n    LOAD_FAST(\"items\")\n    GET_ITER()\n    LABEL(\"loop\")\n    FOR_ITER(\"return\")\n\n    DUP_TOP()\n    LIST_APPEND(3)\n    LIST_APPEND(2)\n    JUMP_ABSOLUTE(\"loop\")\n\n    LABEL(\"return\")\n    RETURN_VALUE()\n```\n\nIt's important to realize that the functions HAX provides (`BUILD_LIST`,\n`LOAD_FAST`, ...) aren't just \"emulating\" their respective bytecode\ninstructions; the `@hax` decorator detects them, and completely recompiles\n`double`'s code to use the _actual_ ops that we've specified here!\n\nThese performance improvements are impossible to get from CPython's compiler and \noptimizer alone.\n\n</div>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brandtbucher/hax", "keywords": "bytecode", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hax", "package_url": "https://pypi.org/project/hax/", "platform": "", "project_url": "https://pypi.org/project/hax/", "project_urls": {"Homepage": "https://github.com/brandtbucher/hax"}, "release_url": "https://pypi.org/project/hax/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Write compiled bytecode inline with standard Python syntax.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<h1>HAX</h1>\n<p><a href=\"https://github.com/brandtbucher/hax/releases\" rel=\"nofollow\"><img alt=\"latest version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/148bdd333594782673f09c9fb1168e1900e9fac3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d7072652f6272616e64746275636865722f6861782e7376673f7374796c653d666f722d7468652d6261646765266c6162656c3d6c6174657374\"><img alt=\"latest release date\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26b03b5a6ba0516cba020d3719279ecd7d2a4050/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d646174652d7072652f6272616e64746275636865722f6861782e7376673f7374796c653d666f722d7468652d6261646765266c6162656c3d72656c6561736564\"></a><a href=\"https://travis-ci.com/brandtbucher/hax/branches\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39314a33a6c6b140a2016895a403422420051348/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f6272616e64746275636865722f6861782f6d61737465722e7376673f7374796c653d666f722d7468652d6261646765\"></a><a href=\"https://github.com/brandtbucher/hax/issues\" rel=\"nofollow\"><img alt=\"issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41b8a5d9e7d1277982af81e15259bf70050ca6ed/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f6272616e64746275636865722f6861782e7376673f6c6162656c3d697373756573267374796c653d666f722d7468652d6261646765\"></a></p>\n<br>\n</div>\n<div>\n<p>HAX lets you write compiled bytecode inline with standard Python syntax. It was\noriginally built for exploring new improvements to CPython's compiler and\npeephole optimizer.</p>\n<h2>Installation</h2>\n<p>HAX supports CPython 3.6+ on all platforms.</p>\n<p>To install, just run:</p>\n<pre>$ pip install hax\n</pre>\n<h2>Example</h2>\n<p>Consider the following function; it accepts a sequence of items, and returns a\nlist with each item repeated twice:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">doubled</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">item</span>\n    <span class=\"k\">return</span> <span class=\"n\">out</span>            \n</pre>\n<p>For example, <code>doubled((0, 1, 2))</code> returns <code>[0, 0, 1, 1, 2, 2]</code>.</p>\n<p>We can make this function faster by keeping <code>out</code> on the stack (instead of in a\nlocal variable) and using the <code>LIST_APPEND</code> op to build it. HAX makes it\nsimple to inline these instructions:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hax</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"nd\">@hax</span> \n<span class=\"k\">def</span> <span class=\"nf\">doubled</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n\n    <span class=\"n\">BUILD_LIST</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n\n        <span class=\"n\">LOAD_FAST</span><span class=\"p\">(</span><span class=\"s2\">\"item\"</span><span class=\"p\">)</span>\n        <span class=\"n\">DUP_TOP</span><span class=\"p\">()</span>\n        <span class=\"n\">LIST_APPEND</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">LIST_APPEND</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"n\">RETURN_VALUE</span><span class=\"p\">()</span>\n</pre>\n<p>With the help of labeled jump targets, the function can be further sped up by\nrewriting the for-loop in bytecode, removing <em>all</em> temporary variables, and\noperating <strong>entirely on the stack</strong>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hax</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"nd\">@hax</span> \n<span class=\"k\">def</span> <span class=\"nf\">doubled</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n\n    <span class=\"n\">BUILD_LIST</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"n\">LOAD_FAST</span><span class=\"p\">(</span><span class=\"s2\">\"items\"</span><span class=\"p\">)</span>\n    <span class=\"n\">GET_ITER</span><span class=\"p\">()</span>\n    <span class=\"n\">LABEL</span><span class=\"p\">(</span><span class=\"s2\">\"loop\"</span><span class=\"p\">)</span>\n    <span class=\"n\">FOR_ITER</span><span class=\"p\">(</span><span class=\"s2\">\"return\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">DUP_TOP</span><span class=\"p\">()</span>\n    <span class=\"n\">LIST_APPEND</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">LIST_APPEND</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">JUMP_ABSOLUTE</span><span class=\"p\">(</span><span class=\"s2\">\"loop\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">LABEL</span><span class=\"p\">(</span><span class=\"s2\">\"return\"</span><span class=\"p\">)</span>\n    <span class=\"n\">RETURN_VALUE</span><span class=\"p\">()</span>\n</pre>\n<p>It's important to realize that the functions HAX provides (<code>BUILD_LIST</code>,\n<code>LOAD_FAST</code>, ...) aren't just \"emulating\" their respective bytecode\ninstructions; the <code>@hax</code> decorator detects them, and completely recompiles\n<code>double</code>'s code to use the <em>actual</em> ops that we've specified here!</p>\n<p>These performance improvements are impossible to get from CPython's compiler and\noptimizer alone.</p>\n</div>\n\n          </div>"}, "last_serial": 6064873, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "d460003b78edad396ead5627307e159b", "sha256": "23c52587b2694a829418ac3c93d3e013bdb82cacfaa0d27b67e2b99fcb4483bc"}, "downloads": -1, "filename": "hax-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d460003b78edad396ead5627307e159b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6176, "upload_time": "2019-10-16T08:03:59", "upload_time_iso_8601": "2019-10-16T08:03:59.755866Z", "url": "https://files.pythonhosted.org/packages/26/e5/147ccc9d1848eb9387dd17b3b5af3556ded85963d5ae64aef30f4c85072f/hax-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2da1c2e3cbbca8f2d15d0ad020c2744", "sha256": "0c6934e61d5c8f37a017208b0aaea153350a17a807e8e4ea76075fb35f98e5c4"}, "downloads": -1, "filename": "hax-0.0.0.tar.gz", "has_sig": false, "md5_digest": "a2da1c2e3cbbca8f2d15d0ad020c2744", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5217, "upload_time": "2019-10-16T08:04:03", "upload_time_iso_8601": "2019-10-16T08:04:03.974785Z", "url": "https://files.pythonhosted.org/packages/6d/a4/dea3b72755be51e6dfa48596d2cbd104f10f90ea97dbaedefe0227054cdc/hax-0.0.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b9c869743c274fa2dac73f5b711529e3", "sha256": "bce5d1e2b2c6c52240c919bc73904e129a1d1079a4f4d605b95355b81581b2d8"}, "downloads": -1, "filename": "hax-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b9c869743c274fa2dac73f5b711529e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6792, "upload_time": "2019-10-20T14:34:14", "upload_time_iso_8601": "2019-10-20T14:34:14.520712Z", "url": "https://files.pythonhosted.org/packages/3e/23/3545af286c47344aa37dea9a3bb09fbfff413bb37441d2b65166b39df955/hax-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be45c1fbb8e9d63e15e8de61c3fdec86", "sha256": "789f19638d26a90e530b8d18fa9223e6c8152b16863512f868517869eb82a9eb"}, "downloads": -1, "filename": "hax-0.1.0.tar.gz", "has_sig": false, "md5_digest": "be45c1fbb8e9d63e15e8de61c3fdec86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5843, "upload_time": "2019-10-20T14:34:18", "upload_time_iso_8601": "2019-10-20T14:34:18.354559Z", "url": "https://files.pythonhosted.org/packages/53/90/56376e4b153948bc01264fade3738243c48484dde810722c7a567f832c59/hax-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ddbc3518d54af838c59af004092db9fe", "sha256": "fefbab0f59b41796c01482cdeefe300339541fec20431124482efaf258f999f6"}, "downloads": -1, "filename": "hax-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ddbc3518d54af838c59af004092db9fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7465, "upload_time": "2019-10-25T05:59:16", "upload_time_iso_8601": "2019-10-25T05:59:16.120976Z", "url": "https://files.pythonhosted.org/packages/44/ce/f13c8da133b36220d305f4c23ccc519b9a171d12c0874e3605c893e80892/hax-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a564f05a178062bb68240b35a9473588", "sha256": "99b6a42ade57533fd485018d38915003681799ee0cb99714bbb4c377876f628a"}, "downloads": -1, "filename": "hax-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a564f05a178062bb68240b35a9473588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6516, "upload_time": "2019-10-25T05:59:17", "upload_time_iso_8601": "2019-10-25T05:59:17.775624Z", "url": "https://files.pythonhosted.org/packages/47/21/84f49393ca6a8ee2a5dba91cf61e459945bbf804ad1563c947e8968fef4b/hax-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1d46938d020d6612ec31611d3178a737", "sha256": "e4882c4ff0c7a58c4d004c09b0660be4e2740b6b6a830971e821ce8d5334c1b5"}, "downloads": -1, "filename": "hax-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1d46938d020d6612ec31611d3178a737", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10592, "upload_time": "2019-11-01T16:28:19", "upload_time_iso_8601": "2019-11-01T16:28:19.343142Z", "url": "https://files.pythonhosted.org/packages/aa/67/530901a086fea7de593196ac77633470d60144670f222e1ba037a97deaed/hax-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3fecf6aaf869bf108057a40ef7be414", "sha256": "23f84a289a0b42c8d067e7785d416d9c9335d16167539b16314dfd6e230173a9"}, "downloads": -1, "filename": "hax-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e3fecf6aaf869bf108057a40ef7be414", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9853, "upload_time": "2019-11-01T16:28:21", "upload_time_iso_8601": "2019-11-01T16:28:21.276098Z", "url": "https://files.pythonhosted.org/packages/ee/40/26b2cc74223c1399ba7e14bf6b6d1afa7cd40f2765b98cfbef445e507adc/hax-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d46938d020d6612ec31611d3178a737", "sha256": "e4882c4ff0c7a58c4d004c09b0660be4e2740b6b6a830971e821ce8d5334c1b5"}, "downloads": -1, "filename": "hax-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1d46938d020d6612ec31611d3178a737", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10592, "upload_time": "2019-11-01T16:28:19", "upload_time_iso_8601": "2019-11-01T16:28:19.343142Z", "url": "https://files.pythonhosted.org/packages/aa/67/530901a086fea7de593196ac77633470d60144670f222e1ba037a97deaed/hax-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3fecf6aaf869bf108057a40ef7be414", "sha256": "23f84a289a0b42c8d067e7785d416d9c9335d16167539b16314dfd6e230173a9"}, "downloads": -1, "filename": "hax-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e3fecf6aaf869bf108057a40ef7be414", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9853, "upload_time": "2019-11-01T16:28:21", "upload_time_iso_8601": "2019-11-01T16:28:21.276098Z", "url": "https://files.pythonhosted.org/packages/ee/40/26b2cc74223c1399ba7e14bf6b6d1afa7cd40f2765b98cfbef445e507adc/hax-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:13 2020"}