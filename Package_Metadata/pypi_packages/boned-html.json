{"info": {"author": "Jurismarches", "author_email": "contact@jurismarches.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "|logo| boned-html\n##################\n\n|pypi| |travis| |coveralls|\n\nBoned html is a small python library.\n\nIt helps you extract text from an html (in the form of a lxml tree),\nprocess this text, to classify it,\nreinject text in the html with specific css classes.\n\nThe typical use is for anotating an html with classes.\nFor example you are categorizing text,\nand you want the user to visualize those categories on the original html.\n\nThe text will be extracted in a smart way:\nit won't stop at semantic tags (`<i>`, `<em>`, etc.)\nbut at other tags (`<h1>`, `<p>`, etc.).\n\nAs you reinject the text, semantic tags will be added back to text,\nand general html layout will be respected.\n\n.. |logo| image:: ./images/boned-html-64.png\n\n.. |pypi| image:: http://img.shields.io/pypi/v/boned-html.svg?style=flat\n    :target: https://pypi.python.org/pypi/boned-html\n.. |travis| image:: http://img.shields.io/travis/jurismarches/boned-html/master.svg?style=flat\n    :target: https://travis-ci.org/jurismarches/boned-html\n.. |coveralls| image:: http://img.shields.io/coveralls/jurismarches/boned-html/master.svg?style=flat\n    :target: https://coveralls.io/r/jurismarches/boned-html\n\nInstallation\n============\n\n::\n\n  pip install boned-html\n\nUsage\n=====\n\nThe fonctionalities are provided by the class `boned_html.Chunker`__ with methods:\n\n* `chunk_tree` to get text chunks from an lxml tree.\n* `unchunk` to put back chunks together providing css classes for pieces of text.\n\n.. __: ./boned_html/chunker.py\n\n\n\nA quick example: imagine we have a function to detect a tel number value in a sentence::\n\n   >>> import re\n   >>> from itertools import cycle\n   >>> def get_tel(text):\n   ...    splits = re.split(r\"(\\+?(?:\\d\\s*){8,13})\", text)\n   ...    return list(zip(splits, cycle([None, \"tel\"])))\n   >>> get_tel(\"call +33 00 00 00 00\")\n   [('call ', None), ('+33 00 00 00 00', 'tel'), ('', None)]\n\nAnd an html::\n\n   >>> html = '''\n   ... <html>\n   ...   <head><title>call +33 00 00 00 00</title></head>\n   ...   <body>\n   ...     <p>To get an operator <em>call</em></p>\n   ...     <p><b>call</b> <em>(country) +33</em> 00 00 00 00</p>\n   ...   </body>\n   ... </html>\n   ... '''\n\nWe chunk::\n\n   >>> import lxml.html\n   >>> from boned_html import HtmlBoner\n   >>> tree = lxml.html.fromstring(html)\n   >>> boned = HtmlBoner(tree)\n\nWe evaluate each text and assign \"tel\" class to it if there is a telephone::\n\n   >>> for i, text in enumerate(boned):\n   ...     if text is not None:\n   ...         boned.set_classes(i, get_tel(text))\n\nWe now rebuild the tree::\n\n   >>> boned.tree\n   <Element html ...>\n   >>> print(boned)\n   <html>\n     <head><title>call +33 00 00 00 00</title></head>\n     <body>\n       <p>To get an operator <em>call</em></p>\n       <p><b>call</b> <em>(country) </em><span class=\"tel\" id=\"chunk-6-1\"><em>+33</em> 00 00 00 00</span></p>\n     </body>\n   </html>\n\nWe have a specific span around our number,\nalso opening and closure of `em` tag was handled,\nand phone number in `head/title` remains the same.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jurismarches/boned-html", "keywords": "html,lxml,scrapping", "license": "", "maintainer": "", "maintainer_email": "", "name": "boned-html", "package_url": "https://pypi.org/project/boned-html/", "platform": "", "project_url": "https://pypi.org/project/boned-html/", "project_urls": {"Homepage": "https://github.com/jurismarches/boned-html"}, "release_url": "https://pypi.org/project/boned-html/0.2/", "requires_dist": ["lxml", "flake8 (>=2.5.4); extra == 'quality'", "coverage (>=4.0.3); extra == 'test'", "nose (>=1.3.7); extra == 'test'"], "requires_python": "", "summary": "A small library to smartly extract text from html and eventually rebuild html", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/boned-html\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28d7fe941795c46013860d278f7b8f83436c3f09/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f626f6e65642d68746d6c2e7376673f7374796c653d666c6174\"></a> <a href=\"https://travis-ci.org/jurismarches/boned-html\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/335192fe7800898abf368b21cbe2f558f07cac31/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6a757269736d6172636865732f626f6e65642d68746d6c2f6d61737465722e7376673f7374796c653d666c6174\"></a> <a href=\"https://coveralls.io/r/jurismarches/boned-html\" rel=\"nofollow\"><img alt=\"coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdc84286c166ada53d02a21526a5f8d33b8a043e/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6a757269736d6172636865732f626f6e65642d68746d6c2f6d61737465722e7376673f7374796c653d666c6174\"></a></p>\n<p>Boned html is a small python library.</p>\n<p>It helps you extract text from an html (in the form of a lxml tree),\nprocess this text, to classify it,\nreinject text in the html with specific css classes.</p>\n<p>The typical use is for anotating an html with classes.\nFor example you are categorizing text,\nand you want the user to visualize those categories on the original html.</p>\n<p>The text will be extracted in a smart way:\nit won\u2019t stop at semantic tags (<cite>&lt;i&gt;</cite>, <cite>&lt;em&gt;</cite>, etc.)\nbut at other tags (<cite>&lt;h1&gt;</cite>, <cite>&lt;p&gt;</cite>, etc.).</p>\n<p>As you reinject the text, semantic tags will be added back to text,\nand general html layout will be respected.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install boned-html\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The fonctionalities are provided by the class <a href=\"./boned_html/chunker.py\" rel=\"nofollow\">boned_html.Chunker</a> with methods:</p>\n<ul>\n<li><cite>chunk_tree</cite> to get text chunks from an lxml tree.</li>\n<li><cite>unchunk</cite> to put back chunks together providing css classes for pieces of text.</li>\n</ul>\n<p>A quick example: imagine we have a function to detect a tel number value in a sentence:</p>\n<pre>&gt;&gt;&gt; import re\n&gt;&gt;&gt; from itertools import cycle\n&gt;&gt;&gt; def get_tel(text):\n...    splits = re.split(r\"(\\+?(?:\\d\\s*){8,13})\", text)\n...    return list(zip(splits, cycle([None, \"tel\"])))\n&gt;&gt;&gt; get_tel(\"call +33 00 00 00 00\")\n[('call ', None), ('+33 00 00 00 00', 'tel'), ('', None)]\n</pre>\n<p>And an html:</p>\n<pre>&gt;&gt;&gt; html = '''\n... &lt;html&gt;\n...   &lt;head&gt;&lt;title&gt;call +33 00 00 00 00&lt;/title&gt;&lt;/head&gt;\n...   &lt;body&gt;\n...     &lt;p&gt;To get an operator &lt;em&gt;call&lt;/em&gt;&lt;/p&gt;\n...     &lt;p&gt;&lt;b&gt;call&lt;/b&gt; &lt;em&gt;(country) +33&lt;/em&gt; 00 00 00 00&lt;/p&gt;\n...   &lt;/body&gt;\n... &lt;/html&gt;\n... '''\n</pre>\n<p>We chunk:</p>\n<pre>&gt;&gt;&gt; import lxml.html\n&gt;&gt;&gt; from boned_html import HtmlBoner\n&gt;&gt;&gt; tree = lxml.html.fromstring(html)\n&gt;&gt;&gt; boned = HtmlBoner(tree)\n</pre>\n<p>We evaluate each text and assign \u201ctel\u201d class to it if there is a telephone:</p>\n<pre>&gt;&gt;&gt; for i, text in enumerate(boned):\n...     if text is not None:\n...         boned.set_classes(i, get_tel(text))\n</pre>\n<p>We now rebuild the tree:</p>\n<pre>&gt;&gt;&gt; boned.tree\n&lt;Element html ...&gt;\n&gt;&gt;&gt; print(boned)\n&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;call +33 00 00 00 00&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;To get an operator &lt;em&gt;call&lt;/em&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;b&gt;call&lt;/b&gt; &lt;em&gt;(country) &lt;/em&gt;&lt;span class=\"tel\" id=\"chunk-6-1\"&gt;&lt;em&gt;+33&lt;/em&gt; 00 00 00 00&lt;/span&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>We have a specific span around our number,\nalso opening and closure of <cite>em</cite> tag was handled,\nand phone number in <cite>head/title</cite> remains the same.</p>\n</div>\n\n          </div>"}, "last_serial": 2964973, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d2b37999fd0b783c9f2950ba0c4a397d", "sha256": "0ca823e798d664bb65c62041a0233b11d72a0d9f2333e253500496c14fa58d6f"}, "downloads": -1, "filename": "boned_html-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d2b37999fd0b783c9f2950ba0c4a397d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10102, "upload_time": "2017-06-20T18:53:55", "upload_time_iso_8601": "2017-06-20T18:53:55.719553Z", "url": "https://files.pythonhosted.org/packages/90/84/a4f6408061019706e72c0e1a3e52469e4e6bdf4cd33ad8686a948d0fdba4/boned_html-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5017e4e7061e943c8d93e955e882c825", "sha256": "508d9fe48dd1403f8adf5ce9171677fa10321cb0eeb0135bcaa22fd17bed6fc0"}, "downloads": -1, "filename": "boned-html-0.1.tar.gz", "has_sig": false, "md5_digest": "5017e4e7061e943c8d93e955e882c825", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7300, "upload_time": "2017-06-20T18:53:57", "upload_time_iso_8601": "2017-06-20T18:53:57.538752Z", "url": "https://files.pythonhosted.org/packages/ee/df/7ceb2c7560ea4c9717c40f00cce2b27b2b5b4175a4dfa68b1f2003cee7e1/boned-html-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "9545412bc910a236fe4d41c13154e809", "sha256": "e75ba1ebfd018660f9ac9dc12f0fe8e3a8ce84b840add48c92cb98748c82de9b"}, "downloads": -1, "filename": "boned_html-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9545412bc910a236fe4d41c13154e809", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13003, "upload_time": "2017-06-21T13:35:50", "upload_time_iso_8601": "2017-06-21T13:35:50.144919Z", "url": "https://files.pythonhosted.org/packages/5e/54/3252b547ac81f7933be843b62432e7a8a6bd83ed05652d98860a97cee53b/boned_html-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "099be9ed384bb245b3f9f24f315ad472", "sha256": "69b1e42a3ef14217b531c47635b355cdeddd716684af1da2d284d4649cf4caff"}, "downloads": -1, "filename": "boned-html-0.2.tar.gz", "has_sig": false, "md5_digest": "099be9ed384bb245b3f9f24f315ad472", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10892, "upload_time": "2017-06-21T13:35:52", "upload_time_iso_8601": "2017-06-21T13:35:52.036078Z", "url": "https://files.pythonhosted.org/packages/9a/e2/d54fb05a126bbb6047a7062206aa3fa773b204ce3e982e29afbf46cd8d7d/boned-html-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9545412bc910a236fe4d41c13154e809", "sha256": "e75ba1ebfd018660f9ac9dc12f0fe8e3a8ce84b840add48c92cb98748c82de9b"}, "downloads": -1, "filename": "boned_html-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9545412bc910a236fe4d41c13154e809", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13003, "upload_time": "2017-06-21T13:35:50", "upload_time_iso_8601": "2017-06-21T13:35:50.144919Z", "url": "https://files.pythonhosted.org/packages/5e/54/3252b547ac81f7933be843b62432e7a8a6bd83ed05652d98860a97cee53b/boned_html-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "099be9ed384bb245b3f9f24f315ad472", "sha256": "69b1e42a3ef14217b531c47635b355cdeddd716684af1da2d284d4649cf4caff"}, "downloads": -1, "filename": "boned-html-0.2.tar.gz", "has_sig": false, "md5_digest": "099be9ed384bb245b3f9f24f315ad472", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10892, "upload_time": "2017-06-21T13:35:52", "upload_time_iso_8601": "2017-06-21T13:35:52.036078Z", "url": "https://files.pythonhosted.org/packages/9a/e2/d54fb05a126bbb6047a7062206aa3fa773b204ce3e982e29afbf46cd8d7d/boned-html-0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:46 2020"}