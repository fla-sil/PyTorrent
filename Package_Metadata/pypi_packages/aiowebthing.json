{"info": {"author": "hidaris", "author_email": "zuocool@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# aiowebthing\n\nAsync implementation of an HTTP Web Thing. This library is compatible with 3.6+.\n\n## Installation\nwebthing can be installed via pip, as such:\n\n`$ pip install aiowebthing`\n\n## Running the Sample\n`$ wget\nhttps://raw.githubusercontent.com/mozilla-iot/webthing-python/master/example/single-thing.py`\n\n`$ uvicorn single-thing:app --reload`\n\nThis starts a server and lets you search for it from your gateway through mDNS. To add it to your gateway, navigate to the Things page in the gateway's UI and click the + icon at the bottom right. If both are on the same network, the example thing will automatically appear.\n\n## Example Implementation\nIn this code-walkthrough we will set up a dimmable light and a humidity sensor (both using fake data, of course). Both working examples can be found in here.\n\nDimmable Light\nImagine you have a dimmable light that you want to expose via the web of things API. The light can be turned on/off and the brightness can be set from 0% to 100%. Besides the name, description, and type, a Light is required to expose two properties:\n\non: the state of the light, whether it is turned on or off\nSetting this property via a PUT {\"on\": true/false} call to the REST API toggles\nthe light.\n\nbrightness: the brightness level of the light from 0-100%\nSetting this property via a PUT call to the REST API sets the brightness level of this light.\nFirst we create a new Thing:\n\n``` python\nlight = Thing(\n    'urn:dev:ops:my-lamp-1234',\n    'My Lamp',\n    ['OnOffSwitch', 'Light'],\n    'A web connected lamp'\n)\n```\nNow we can add the required properties.\n\nThe on property reports and sets the on/off state of the light. For this, we need to have a Value object which holds the actual state and also a method to turn the light on/off. For our purposes, we just want to log the new state if the light is switched on/off.\n\n``` python\nawait light.add_property(\n    Property(\n        light,\n        'on',\n        Value(True, lambda v: print('On-State is now', v)),\n        metadata={\n            '@type': 'OnOffProperty',\n            'title': 'On/Off',\n            'type': 'boolean',\n            'description': 'Whether the lamp is turned on',\n        }))\n```\n\nThe brightness property reports the brightness level of the light and sets the level. Like before, instead of actually setting the level of a light, we just log the level.\n\n``` python\nawait light.add_property(\n    Property(\n        light,\n        'brightness',\n        Value(50, lambda v: print('Brightness is now', v)),\n        metadata={\n            '@type': 'BrightnessProperty',\n            'title': 'Brightness',\n            'type': 'number',\n            'description': 'The level of light from 0-100',\n            'minimum': 0,\n            'maximum': 100,\n            'unit': 'percent',\n        }))\n```\n\nNow we can add our newly created thing to the server and start it:\n\n``` python\n# If adding more than one thing, use MultipleThings() with a name.\n# In the single thing case, the thing's name will be broadcast.\nwith background_thread_loop() as loop:\n    app = WebThingServer(loop, FileThing().build).create()\n```\n\nThis will start the server, making the light available via the WoT REST API and announcing it as a discoverable resource on your local network via mDNS.\n\nSensor\nLet's now also connect a humidity sensor to the server we set up for our light.\n\nA MultiLevelSensor (a sensor that returns a level instead of just on/off) has one required property (besides the name, type, and optional description): level. We want to monitor this property and get notified if the value changes.\n\nFirst we create a new Thing:\n\n```python\nsensor = Thing(\n    'urn:dev:ops:my-humidity-sensor-1234',\n    'My Humidity Sensor',\n     ['MultiLevelSensor'],\n     'A web connected humidity sensor'\n)\n```\n\n\nThen we create and add the appropriate property:\n\nlevel: tells us what the sensor is actually reading\n\nContrary to the light, the value cannot be set via an API call, as it wouldn't make much sense, to SET what a sensor is reading. Therefore, we are creating a readOnly property.\n\n```python\nlevel = Value(0.0);\n\nawait sensor.add_property(\n    Property(\n        sensor,\n        'level',\n        level,\n        metadata={\n            '@type': 'LevelProperty',\n            'title': 'Humidity',\n            'type': 'number',\n            'description': 'The current humidity in %',\n            'minimum': 0,\n            'maximum': 100,\n            'unit': 'percent',\n            'readOnly': True,\n        }))\n```\n\n\nNow we have a sensor that constantly reports 0%. To make it usable, we need a thread or some kind of input when the sensor has a new reading available. For this purpose we start a thread that queries the physical sensor every few seconds. For our purposes, it just calls a fake method.\n\n```python\nself.sensor_update_task = \\\n    get_event_loop().create_task(self.update_level())\n\nasync def update_level(self):\n    try:\n        while True:\n            await sleep(3)\n            new_level = self.read_from_gpio()\n            logging.debug('setting new humidity level: %s', new_level)\n            await self.level.notify_of_external_update(new_level)\n    except CancelledError:\n        pass\n```\n\n\nThis will update our Value object with the sensor readings via the self.level.notify_of_external_update(read_from_gpio()) call. The Value object now notifies the property and the thing that the value has changed, which in turn notifies all websocket listeners.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hidaris/aiowebthing", "keywords": "async mozilla iot web thing webthing", "license": "MPL-2.0", "maintainer": "", "maintainer_email": "", "name": "aiowebthing", "package_url": "https://pypi.org/project/aiowebthing/", "platform": "", "project_url": "https://pypi.org/project/aiowebthing/", "project_urls": {"Homepage": "https://github.com/hidaris/aiowebthing", "Source": "https://github.com/hidaris/aiowebthing", "Tracker": "https://github.com/hidaris/aiowebthing/issues"}, "release_url": "https://pypi.org/project/aiowebthing/0.1.6/", "requires_dist": ["ifaddr (>=0.1.0)", "pyee (>=7.0.0)", "jsonschema (>=3.2.0)", "zeroconf (>=0.21.0)", "ujson", "httpx (==0.12.*)", "starlette (==0.13.*)", "uvicorn (==0.11.*)"], "requires_python": ">=3.6, <4", "summary": "HTTP Web Thing async implementation", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aiowebthing</h1>\n<p>Async implementation of an HTTP Web Thing. This library is compatible with 3.6+.</p>\n<h2>Installation</h2>\n<p>webthing can be installed via pip, as such:</p>\n<p><code>$ pip install aiowebthing</code></p>\n<h2>Running the Sample</h2>\n<p><code>$ wget https://raw.githubusercontent.com/mozilla-iot/webthing-python/master/example/single-thing.py</code></p>\n<p><code>$ uvicorn single-thing:app --reload</code></p>\n<p>This starts a server and lets you search for it from your gateway through mDNS. To add it to your gateway, navigate to the Things page in the gateway's UI and click the + icon at the bottom right. If both are on the same network, the example thing will automatically appear.</p>\n<h2>Example Implementation</h2>\n<p>In this code-walkthrough we will set up a dimmable light and a humidity sensor (both using fake data, of course). Both working examples can be found in here.</p>\n<p>Dimmable Light\nImagine you have a dimmable light that you want to expose via the web of things API. The light can be turned on/off and the brightness can be set from 0% to 100%. Besides the name, description, and type, a Light is required to expose two properties:</p>\n<p>on: the state of the light, whether it is turned on or off\nSetting this property via a PUT {\"on\": true/false} call to the REST API toggles\nthe light.</p>\n<p>brightness: the brightness level of the light from 0-100%\nSetting this property via a PUT call to the REST API sets the brightness level of this light.\nFirst we create a new Thing:</p>\n<pre><span class=\"n\">light</span> <span class=\"o\">=</span> <span class=\"n\">Thing</span><span class=\"p\">(</span>\n    <span class=\"s1\">'urn:dev:ops:my-lamp-1234'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'My Lamp'</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"s1\">'OnOffSwitch'</span><span class=\"p\">,</span> <span class=\"s1\">'Light'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'A web connected lamp'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Now we can add the required properties.</p>\n<p>The on property reports and sets the on/off state of the light. For this, we need to have a Value object which holds the actual state and also a method to turn the light on/off. For our purposes, we just want to log the new state if the light is switched on/off.</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">add_property</span><span class=\"p\">(</span>\n    <span class=\"n\">Property</span><span class=\"p\">(</span>\n        <span class=\"n\">light</span><span class=\"p\">,</span>\n        <span class=\"s1\">'on'</span><span class=\"p\">,</span>\n        <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'On-State is now'</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)),</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">'@type'</span><span class=\"p\">:</span> <span class=\"s1\">'OnOffProperty'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'On/Off'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'boolean'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'Whether the lamp is turned on'</span><span class=\"p\">,</span>\n        <span class=\"p\">}))</span>\n</pre>\n<p>The brightness property reports the brightness level of the light and sets the level. Like before, instead of actually setting the level of a light, we just log the level.</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">add_property</span><span class=\"p\">(</span>\n    <span class=\"n\">Property</span><span class=\"p\">(</span>\n        <span class=\"n\">light</span><span class=\"p\">,</span>\n        <span class=\"s1\">'brightness'</span><span class=\"p\">,</span>\n        <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Brightness is now'</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)),</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">'@type'</span><span class=\"p\">:</span> <span class=\"s1\">'BrightnessProperty'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Brightness'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'number'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'The level of light from 0-100'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'minimum'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"s1\">'maximum'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n            <span class=\"s1\">'unit'</span><span class=\"p\">:</span> <span class=\"s1\">'percent'</span><span class=\"p\">,</span>\n        <span class=\"p\">}))</span>\n</pre>\n<p>Now we can add our newly created thing to the server and start it:</p>\n<pre><span class=\"c1\"># If adding more than one thing, use MultipleThings() with a name.</span>\n<span class=\"c1\"># In the single thing case, the thing's name will be broadcast.</span>\n<span class=\"k\">with</span> <span class=\"n\">background_thread_loop</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">WebThingServer</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">FileThing</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n</pre>\n<p>This will start the server, making the light available via the WoT REST API and announcing it as a discoverable resource on your local network via mDNS.</p>\n<p>Sensor\nLet's now also connect a humidity sensor to the server we set up for our light.</p>\n<p>A MultiLevelSensor (a sensor that returns a level instead of just on/off) has one required property (besides the name, type, and optional description): level. We want to monitor this property and get notified if the value changes.</p>\n<p>First we create a new Thing:</p>\n<pre><span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">Thing</span><span class=\"p\">(</span>\n    <span class=\"s1\">'urn:dev:ops:my-humidity-sensor-1234'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'My Humidity Sensor'</span><span class=\"p\">,</span>\n     <span class=\"p\">[</span><span class=\"s1\">'MultiLevelSensor'</span><span class=\"p\">],</span>\n     <span class=\"s1\">'A web connected humidity sensor'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Then we create and add the appropriate property:</p>\n<p>level: tells us what the sensor is actually reading</p>\n<p>Contrary to the light, the value cannot be set via an API call, as it wouldn't make much sense, to SET what a sensor is reading. Therefore, we are creating a readOnly property.</p>\n<pre><span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">);</span>\n\n<span class=\"k\">await</span> <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">add_property</span><span class=\"p\">(</span>\n    <span class=\"n\">Property</span><span class=\"p\">(</span>\n        <span class=\"n\">sensor</span><span class=\"p\">,</span>\n        <span class=\"s1\">'level'</span><span class=\"p\">,</span>\n        <span class=\"n\">level</span><span class=\"p\">,</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">'@type'</span><span class=\"p\">:</span> <span class=\"s1\">'LevelProperty'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Humidity'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'number'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'The current humidity in %'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'minimum'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"s1\">'maximum'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n            <span class=\"s1\">'unit'</span><span class=\"p\">:</span> <span class=\"s1\">'percent'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'readOnly'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">}))</span>\n</pre>\n<p>Now we have a sensor that constantly reports 0%. To make it usable, we need a thread or some kind of input when the sensor has a new reading available. For this purpose we start a thread that queries the physical sensor every few seconds. For our purposes, it just calls a fake method.</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sensor_update_task</span> <span class=\"o\">=</span> \\\n    <span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_level</span><span class=\"p\">())</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">update_level</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"n\">new_level</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">read_from_gpio</span><span class=\"p\">()</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'setting new humidity level: </span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">new_level</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">notify_of_external_update</span><span class=\"p\">(</span><span class=\"n\">new_level</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">CancelledError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>This will update our Value object with the sensor readings via the self.level.notify_of_external_update(read_from_gpio()) call. The Value object now notifies the property and the thing that the value has changed, which in turn notifies all websocket listeners.</p>\n\n          </div>"}, "last_serial": 7086059, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b850c418d2b4a46ecec4423d29eb4f34", "sha256": "3828e061c15192def1606893c9b4bb920dbc3386fae53968473b7fa566625eca"}, "downloads": -1, "filename": "aiowebthing-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b850c418d2b4a46ecec4423d29eb4f34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 16353, "upload_time": "2020-04-12T17:45:43", "upload_time_iso_8601": "2020-04-12T17:45:43.671563Z", "url": "https://files.pythonhosted.org/packages/06/d1/42cf35ed06e6c31db28ec172c2955b1049dae173c594075cd8364cb1180e/aiowebthing-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4063c2b1d4f95f95cf13cb376d54a5c", "sha256": "ccf6699b9542e2631573c9c5e247b8749abc680daf32a2095cd1791aedb9cd3e"}, "downloads": -1, "filename": "aiowebthing-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a4063c2b1d4f95f95cf13cb376d54a5c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 13795, "upload_time": "2020-04-12T17:45:46", "upload_time_iso_8601": "2020-04-12T17:45:46.498783Z", "url": "https://files.pythonhosted.org/packages/c0/4f/08fc419ed52e33b7cc0cb166cd1c41827c9513b6faf17f9b25a521b7dbb4/aiowebthing-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2a1f8e965cda78a36cd01bf12f93f5ff", "sha256": "8afd6ad489d44c444fde42ba0a35fa53379a00c9bff8decb85ad9312f03b8151"}, "downloads": -1, "filename": "aiowebthing-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2a1f8e965cda78a36cd01bf12f93f5ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 16464, "upload_time": "2020-04-15T12:58:22", "upload_time_iso_8601": "2020-04-15T12:58:22.047610Z", "url": "https://files.pythonhosted.org/packages/9f/d9/11746a74558ec08fee7cb4bdb5e37e9fb2453d6019fc513e1f5df136af4a/aiowebthing-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc635a93744b0ad90979c73d6d4dd810", "sha256": "e83f6fdb37cf919e0cd55e439ef07d9fe5342da271940dbe58ddc916cc2bf1d7"}, "downloads": -1, "filename": "aiowebthing-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bc635a93744b0ad90979c73d6d4dd810", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 13935, "upload_time": "2020-04-15T12:58:25", "upload_time_iso_8601": "2020-04-15T12:58:25.524489Z", "url": "https://files.pythonhosted.org/packages/0a/93/9018e29c14e90039a56356218fc118bc3a24e3e0431ea89ef917f5bd604b/aiowebthing-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "109646bdf8dadc0319ef688439d04c45", "sha256": "30eba10d6d025acd92ae298296afa1cc3e39d56850c5c217df3283b0a876e2d4"}, "downloads": -1, "filename": "aiowebthing-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "109646bdf8dadc0319ef688439d04c45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 16468, "upload_time": "2020-04-16T07:46:17", "upload_time_iso_8601": "2020-04-16T07:46:17.214813Z", "url": "https://files.pythonhosted.org/packages/00/8f/4d56a61b1ab9ab82797ee6e2359d8c51d3bef1ae089146b5684985dbe102/aiowebthing-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04c98012bc1aefa0ae828735ce641ff2", "sha256": "93c3688dec0577ee4257a149e229c744dd9a4adee43d9b5d1160813c3c10f021"}, "downloads": -1, "filename": "aiowebthing-0.1.2.tar.gz", "has_sig": false, "md5_digest": "04c98012bc1aefa0ae828735ce641ff2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 13935, "upload_time": "2020-04-16T07:46:18", "upload_time_iso_8601": "2020-04-16T07:46:18.968303Z", "url": "https://files.pythonhosted.org/packages/26/d1/22999c6aa0a8a38957269957f489774329d49eee6374de3e521cfd9e4b65/aiowebthing-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "f126d23910c8eaa663bbec010b38f622", "sha256": "70c61ee529544c4e01612e060f47da2f2d35c7d423790e62120356ae5c6c3637"}, "downloads": -1, "filename": "aiowebthing-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f126d23910c8eaa663bbec010b38f622", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 16472, "upload_time": "2020-04-16T08:08:55", "upload_time_iso_8601": "2020-04-16T08:08:55.840056Z", "url": "https://files.pythonhosted.org/packages/81/71/0cb1db70ca6fa2547e12974287ee7105a014a5cf2253663e417131094fa1/aiowebthing-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b77b072715acf364d24a6dafc4e8ae00", "sha256": "401c1e264b7f5f06d8e8f9d79abb7ed876ab8af2f0eaaf7c8964bf180e2785dd"}, "downloads": -1, "filename": "aiowebthing-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b77b072715acf364d24a6dafc4e8ae00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 13939, "upload_time": "2020-04-16T08:08:57", "upload_time_iso_8601": "2020-04-16T08:08:57.205613Z", "url": "https://files.pythonhosted.org/packages/45/b9/16b02454e7dc48f439df071b88e2bd7b5fbbb0dd423e09c149e2afa3a1e1/aiowebthing-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "c73f6a0d1a948eb280c46e0c58821ccf", "sha256": "3a2e923f8276c9915962d18b810585c5bba5dca9f2479b03658dd5c92818cec1"}, "downloads": -1, "filename": "aiowebthing-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c73f6a0d1a948eb280c46e0c58821ccf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 16518, "upload_time": "2020-04-16T09:11:25", "upload_time_iso_8601": "2020-04-16T09:11:25.129238Z", "url": "https://files.pythonhosted.org/packages/95/23/11f6a341d953450fa574f3eecef745dcf3226e6d46ef29f688932c9db4be/aiowebthing-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d86d08180b8160968b5373282f8ab34", "sha256": "b128f465af5e4995bbda7e3d8a630183d0234626a1d02ad4fd4b20c56960153d"}, "downloads": -1, "filename": "aiowebthing-0.1.4.tar.gz", "has_sig": false, "md5_digest": "3d86d08180b8160968b5373282f8ab34", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 13984, "upload_time": "2020-04-16T09:11:26", "upload_time_iso_8601": "2020-04-16T09:11:26.480601Z", "url": "https://files.pythonhosted.org/packages/be/cc/f00de27a100968f92676230318426d35b5525ec98b4c898c631a4ed741bc/aiowebthing-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "49b2fa9d50a6fc1438697f1db74499f2", "sha256": "455cbcc758c7d820ee72c031c863108ce89e462fd139d5c9dbc7233f65ee3730"}, "downloads": -1, "filename": "aiowebthing-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "49b2fa9d50a6fc1438697f1db74499f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 16455, "upload_time": "2020-04-16T10:37:00", "upload_time_iso_8601": "2020-04-16T10:37:00.666234Z", "url": "https://files.pythonhosted.org/packages/ef/3d/f63d46a3a3a270de7a91b0b6bdacf76daec1729f18204c2bbb00249eba7f/aiowebthing-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c206d7546f21ba0c0b855e1420ef343e", "sha256": "32e2cc027cb5f79967893bdfc994292a455bb1a28537c47725aa9e77169cd59d"}, "downloads": -1, "filename": "aiowebthing-0.1.5.tar.gz", "has_sig": false, "md5_digest": "c206d7546f21ba0c0b855e1420ef343e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 13942, "upload_time": "2020-04-16T10:37:02", "upload_time_iso_8601": "2020-04-16T10:37:02.398100Z", "url": "https://files.pythonhosted.org/packages/34/b3/d2968a1d657d4597d4ac486514684890ac6072615378da45c5ac01272dd2/aiowebthing-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "b2989ecac6b6021796c7973d22d682cd", "sha256": "cc3df5da193554555b656ddb736989eb51a1d3eb9e5d43c440d21ed366423b7e"}, "downloads": -1, "filename": "aiowebthing-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "b2989ecac6b6021796c7973d22d682cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 16552, "upload_time": "2020-04-23T17:13:06", "upload_time_iso_8601": "2020-04-23T17:13:06.476713Z", "url": "https://files.pythonhosted.org/packages/aa/d0/c722a2d1985a82e566ed17fd7b8e04684e8cfca06a348cca7d5556c9a02d/aiowebthing-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71fcb4a5c10ea14fa23b5808362bd5e4", "sha256": "014e97617e10d73b00ba219696d9fe3f3947b9b216c3ba35e5ce5268172f2617"}, "downloads": -1, "filename": "aiowebthing-0.1.6.tar.gz", "has_sig": false, "md5_digest": "71fcb4a5c10ea14fa23b5808362bd5e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 13427, "upload_time": "2020-04-23T17:13:07", "upload_time_iso_8601": "2020-04-23T17:13:07.953841Z", "url": "https://files.pythonhosted.org/packages/8f/75/c6dc1f784665dffabf3c989bfde11d7776c277699eebe88d1f13906c67db/aiowebthing-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2989ecac6b6021796c7973d22d682cd", "sha256": "cc3df5da193554555b656ddb736989eb51a1d3eb9e5d43c440d21ed366423b7e"}, "downloads": -1, "filename": "aiowebthing-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "b2989ecac6b6021796c7973d22d682cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 16552, "upload_time": "2020-04-23T17:13:06", "upload_time_iso_8601": "2020-04-23T17:13:06.476713Z", "url": "https://files.pythonhosted.org/packages/aa/d0/c722a2d1985a82e566ed17fd7b8e04684e8cfca06a348cca7d5556c9a02d/aiowebthing-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71fcb4a5c10ea14fa23b5808362bd5e4", "sha256": "014e97617e10d73b00ba219696d9fe3f3947b9b216c3ba35e5ce5268172f2617"}, "downloads": -1, "filename": "aiowebthing-0.1.6.tar.gz", "has_sig": false, "md5_digest": "71fcb4a5c10ea14fa23b5808362bd5e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 13427, "upload_time": "2020-04-23T17:13:07", "upload_time_iso_8601": "2020-04-23T17:13:07.953841Z", "url": "https://files.pythonhosted.org/packages/8f/75/c6dc1f784665dffabf3c989bfde11d7776c277699eebe88d1f13906c67db/aiowebthing-0.1.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:37 2020"}