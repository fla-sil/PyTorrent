{"info": {"author": "Elias Mistler, Previse Limited", "author_email": "elias@previ.se", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet", "Topic :: Office/Business", "Topic :: Software Development"], "description": "# Companies' House Python API\nSimply create an API client as an instance of CompaniesHouseAPI:\n```\nfrom companies_house.api import CompaniesHouseAPI\nch = CompaniesHouseAPI(api_key)\n```\n\nThis will give you access to all the functions registered in the API. For full reference, including the available\nadditional arguments (which can be passed as kwargs), please\nrefer to [the official API documentation](https://developer.companieshouse.gov.uk/api/docs/).\n\nThe Python wrapper additionally gives you the following functionality for each function:\n* `flatten`: Flatten the returned `dict` (to allow use in flat files, pandas etc.)\n* `follow_links`: API resources are linked by a `links` attribute. If  you set `follow_links` to true, those are\n    automatically followed and merged into the main object, to form a deeper, more comprehensive object. Use with care\n    as there are currently no checks for recursion!\n\n```\nhelp(CompaniesHouseAPI)\n```\n\n```\nHelp on class CompaniesHouseAPI in module __main__:\n\nclass CompaniesHouseAPI(CompaniesHouseAPIBase)\n |  Method resolution order:\n |      CompaniesHouseAPI\n |      CompaniesHouseAPIBase\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  get_company(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the basic company information\n |      :param company_number:\n |  \n |  get_company_charges(self, company_number:str, charge_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get a single charge for a company\n |      :param company_number:\n |      :param charge_id:\n |  \n |  get_company_exemptions(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the company exemptions information.\n |      :param company_number:\n |  \n |  get_company_filing_history(self, company_number:str, transaction_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the filing history of the company\n |      :param company_number:\n |      :param transaction_id:\n |  \n |  get_company_insolvency(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get company insolvency information\n |      :param company_number:\n |  \n |  get_company_persons_with_significant_control_corporate_entity(self, company_number:str, psc_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the corporate entity with significant control\n |      :param company_number:\n |      :param psc_id:\n |  \n |  get_company_persons_with_significant_control_individual(self, company_number:str, psc_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the individual person with significant control\n |      :param company_number:\n |      :param psc_id:\n |  \n |  get_company_persons_with_significant_control_legal_person(self, company_number:str, psc_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the legal person with significant control\n |      :param company_number:\n |      :param psc_id:\n |  \n |  get_company_persons_with_significant_control_statements(self, company_number:str, statement_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the person with significant control statement\n |      :param company_number:\n |      :param statement_id:\n |  \n |  get_company_persons_with_significant_control_super_secure(self, company_number:str, super_secure_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the super secure person with significant control\n |      :param company_number:\n |      :param super_secure_id:\n |  \n |  get_company_registered_office_address(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the current address of a company\n |      :param company_number:\n |  \n |  get_company_registers(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the company registers information\n |      :param company_number:\n |  \n |  get_disqualified_officers_corporate(self, officer_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get a corporate officer's disqualifications\n |      :param officer_id:\n |  \n |  get_disqualified_officers_natural(self, officer_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get a natural officer's disqualifications\n |      :param officer_id:\n |  \n |  list_company_charges(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get a list of charges for a company\n |      :param company_number:\n |  \n |  list_company_filing_history(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get the filing history of the company\n |      :param company_number:\n |  \n |  list_company_officers(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      List the company officers\n |      :param company_number:\n |  \n |  list_company_persons_with_significant_control(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      List the company persons with significant control\n |      :param company_number:\n |  \n |  list_company_persons_with_significant_control_statements(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      List the company persons with significant control statements\n |      :param company_number:\n |  \n |  list_company_uk_establishments(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Get a list of UK Establishment companies\n |      :param company_number:\n |  \n |  list_officers_appointments(self, officer_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      List the officer appointments\n |      :param officer_id:\n |  \n |  search(self, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Search Companies House\n |  \n |  search_companies(self, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Search companies\n |  \n |  search_disqualified_officers(self, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Search disqualified officers\n |  \n |  search_officers(self, flatten:bool=False, follow_links:bool=False, **kwargs) -> Union[dict, NoneType]\n |      Search company officers\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from CompaniesHouseAPIBase:\n |  \n |  __init__(self, api_key:str) -> None\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  get(self, query:str, flatten:bool=False, follow_links:bool=False) -> Union[dict, NoneType]\n |      Run a GET query against the Companies' House API\n |      :param query: the query, e.g. \"company/09117429\"\n |      :param flatten: flatten the result dictionary\n |      :return: the result as dict\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from CompaniesHouseAPIBase:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from CompaniesHouseAPIBase:\n |  \n |  __annotations__ = {'_api_key': <class 'str'>}\n\n\n```\nWhen the API has changed, \nrun `update.py` to re-download the API definition. \nWhen running the API, this documentation is updated automatically.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://previ.se", "keywords": "companieshouse api", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "companies-house", "package_url": "https://pypi.org/project/companies-house/", "platform": "", "project_url": "https://pypi.org/project/companies-house/", "project_urls": {"Homepage": "http://previ.se", "Source": "https://github.com/previsedigital/companies_house"}, "release_url": "https://pypi.org/project/companies-house/0.1.2/", "requires_dist": null, "requires_python": ">=3", "summary": "Dynamic API wrapper for Companies' House", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Companies' House Python API</h1>\n<p>Simply create an API client as an instance of CompaniesHouseAPI:</p>\n<pre><code>from companies_house.api import CompaniesHouseAPI\nch = CompaniesHouseAPI(api_key)\n</code></pre>\n<p>This will give you access to all the functions registered in the API. For full reference, including the available\nadditional arguments (which can be passed as kwargs), please\nrefer to <a href=\"https://developer.companieshouse.gov.uk/api/docs/\" rel=\"nofollow\">the official API documentation</a>.</p>\n<p>The Python wrapper additionally gives you the following functionality for each function:</p>\n<ul>\n<li><code>flatten</code>: Flatten the returned <code>dict</code> (to allow use in flat files, pandas etc.)</li>\n<li><code>follow_links</code>: API resources are linked by a <code>links</code> attribute. If  you set <code>follow_links</code> to true, those are\nautomatically followed and merged into the main object, to form a deeper, more comprehensive object. Use with care\nas there are currently no checks for recursion!</li>\n</ul>\n<pre><code>help(CompaniesHouseAPI)\n</code></pre>\n<pre><code>Help on class CompaniesHouseAPI in module __main__:\n\nclass CompaniesHouseAPI(CompaniesHouseAPIBase)\n |  Method resolution order:\n |      CompaniesHouseAPI\n |      CompaniesHouseAPIBase\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  get_company(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the basic company information\n |      :param company_number:\n |  \n |  get_company_charges(self, company_number:str, charge_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get a single charge for a company\n |      :param company_number:\n |      :param charge_id:\n |  \n |  get_company_exemptions(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the company exemptions information.\n |      :param company_number:\n |  \n |  get_company_filing_history(self, company_number:str, transaction_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the filing history of the company\n |      :param company_number:\n |      :param transaction_id:\n |  \n |  get_company_insolvency(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get company insolvency information\n |      :param company_number:\n |  \n |  get_company_persons_with_significant_control_corporate_entity(self, company_number:str, psc_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the corporate entity with significant control\n |      :param company_number:\n |      :param psc_id:\n |  \n |  get_company_persons_with_significant_control_individual(self, company_number:str, psc_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the individual person with significant control\n |      :param company_number:\n |      :param psc_id:\n |  \n |  get_company_persons_with_significant_control_legal_person(self, company_number:str, psc_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the legal person with significant control\n |      :param company_number:\n |      :param psc_id:\n |  \n |  get_company_persons_with_significant_control_statements(self, company_number:str, statement_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the person with significant control statement\n |      :param company_number:\n |      :param statement_id:\n |  \n |  get_company_persons_with_significant_control_super_secure(self, company_number:str, super_secure_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the super secure person with significant control\n |      :param company_number:\n |      :param super_secure_id:\n |  \n |  get_company_registered_office_address(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the current address of a company\n |      :param company_number:\n |  \n |  get_company_registers(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the company registers information\n |      :param company_number:\n |  \n |  get_disqualified_officers_corporate(self, officer_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get a corporate officer's disqualifications\n |      :param officer_id:\n |  \n |  get_disqualified_officers_natural(self, officer_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get a natural officer's disqualifications\n |      :param officer_id:\n |  \n |  list_company_charges(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get a list of charges for a company\n |      :param company_number:\n |  \n |  list_company_filing_history(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get the filing history of the company\n |      :param company_number:\n |  \n |  list_company_officers(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      List the company officers\n |      :param company_number:\n |  \n |  list_company_persons_with_significant_control(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      List the company persons with significant control\n |      :param company_number:\n |  \n |  list_company_persons_with_significant_control_statements(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      List the company persons with significant control statements\n |      :param company_number:\n |  \n |  list_company_uk_establishments(self, company_number:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Get a list of UK Establishment companies\n |      :param company_number:\n |  \n |  list_officers_appointments(self, officer_id:str, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      List the officer appointments\n |      :param officer_id:\n |  \n |  search(self, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Search Companies House\n |  \n |  search_companies(self, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Search companies\n |  \n |  search_disqualified_officers(self, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Search disqualified officers\n |  \n |  search_officers(self, flatten:bool=False, follow_links:bool=False, **kwargs) -&gt; Union[dict, NoneType]\n |      Search company officers\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from CompaniesHouseAPIBase:\n |  \n |  __init__(self, api_key:str) -&gt; None\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  get(self, query:str, flatten:bool=False, follow_links:bool=False) -&gt; Union[dict, NoneType]\n |      Run a GET query against the Companies' House API\n |      :param query: the query, e.g. \"company/09117429\"\n |      :param flatten: flatten the result dictionary\n |      :return: the result as dict\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from CompaniesHouseAPIBase:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from CompaniesHouseAPIBase:\n |  \n |  __annotations__ = {'_api_key': &lt;class 'str'&gt;}\n\n\n</code></pre>\n<p>When the API has changed,\nrun <code>update.py</code> to re-download the API definition.\nWhen running the API, this documentation is updated automatically.</p>\n\n          </div>"}, "last_serial": 3775909, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "b2b3ff15e92488c158ec71ac22579202", "sha256": "90dad18f5269992fc1fe2d6e39c6e1afc2c1e43c8a8fc4aec39973d73165dbe0"}, "downloads": -1, "filename": "companies_house-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b2b3ff15e92488c158ec71ac22579202", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8854, "upload_time": "2018-04-17T16:38:47", "upload_time_iso_8601": "2018-04-17T16:38:47.041123Z", "url": "https://files.pythonhosted.org/packages/da/95/6e98d4f8f3fae14b9fc6018230d66e7d6faf0e33d4ff6293dd6c0da3cfae/companies_house-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "247703f25ec012ab357a730b0ddfea27", "sha256": "b800e1c8b37217867275aea6cd8620fe18346a126dc562c84bc669d9391e0e02"}, "downloads": -1, "filename": "companies_house-0.1.1.tar.gz", "has_sig": false, "md5_digest": "247703f25ec012ab357a730b0ddfea27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6411, "upload_time": "2018-04-17T16:38:44", "upload_time_iso_8601": "2018-04-17T16:38:44.977532Z", "url": "https://files.pythonhosted.org/packages/8d/3f/e0baaebf962d58cc68ee8419e50fcd656f7a10839e8db944317eb87a4c15/companies_house-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6f9c1ee49f1883637fd6fb669e25cfee", "sha256": "e73997321596c6f7ce22c88acc0bdd9087e0c36398a7c0b8a60b36d923357fe2"}, "downloads": -1, "filename": "companies_house-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6f9c1ee49f1883637fd6fb669e25cfee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8898, "upload_time": "2018-04-18T07:19:43", "upload_time_iso_8601": "2018-04-18T07:19:43.608927Z", "url": "https://files.pythonhosted.org/packages/21/9d/1af3ada5a036cd7aab8f614446e9f0ad97f979b483bbace018d032da3687/companies_house-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46ec9b32a47d40b63338f64291374552", "sha256": "6001b9bb555d6b031ebb2444c6f9b5b361632d1fb94c2902ecb9498f398910d1"}, "downloads": -1, "filename": "companies_house-0.1.2.tar.gz", "has_sig": false, "md5_digest": "46ec9b32a47d40b63338f64291374552", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6429, "upload_time": "2018-04-18T07:19:41", "upload_time_iso_8601": "2018-04-18T07:19:41.467304Z", "url": "https://files.pythonhosted.org/packages/a2/dd/9d216063fe8ad25f1d2970ce924d39b6cad5be5e32f1553652f888b35ee2/companies_house-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f9c1ee49f1883637fd6fb669e25cfee", "sha256": "e73997321596c6f7ce22c88acc0bdd9087e0c36398a7c0b8a60b36d923357fe2"}, "downloads": -1, "filename": "companies_house-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6f9c1ee49f1883637fd6fb669e25cfee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8898, "upload_time": "2018-04-18T07:19:43", "upload_time_iso_8601": "2018-04-18T07:19:43.608927Z", "url": "https://files.pythonhosted.org/packages/21/9d/1af3ada5a036cd7aab8f614446e9f0ad97f979b483bbace018d032da3687/companies_house-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46ec9b32a47d40b63338f64291374552", "sha256": "6001b9bb555d6b031ebb2444c6f9b5b361632d1fb94c2902ecb9498f398910d1"}, "downloads": -1, "filename": "companies_house-0.1.2.tar.gz", "has_sig": false, "md5_digest": "46ec9b32a47d40b63338f64291374552", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6429, "upload_time": "2018-04-18T07:19:41", "upload_time_iso_8601": "2018-04-18T07:19:41.467304Z", "url": "https://files.pythonhosted.org/packages/a2/dd/9d216063fe8ad25f1d2970ce924d39b6cad5be5e32f1553652f888b35ee2/companies_house-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:18 2020"}