{"info": {"author": "Martin Mahner", "author_email": "martin@mahner.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": ".. warning:: This package is not in active development. It's likely not functional\n             with the latest Python and/or Django version. If you like to take over\n             the project please contact me. \n\n====================\ndjango-frontendadmin\n====================\n\ndjango-frontendadmin is a set of templatetags to allow an easy and unobstrusive\nway to edit model-data in the frontend of your page.\n\nExample project\n===============\n\nThis package provides an easy example project, a weblog with comments. Here is\na quick step-by-step guide how to get this running quickly:\n\n1. Open your terminal and cd to the ``django-frontendadmin/example_project/`` directory.\n2. ``$ ./manage.py syncdb`` and create a superuser.\n3. ``$ ./manage.py runserver`` and point your browser to ``http://127.0.0.1:8000/admin/``.\n4. Authenticate yourself with the username/password you provided in step 2.\n5. Go to the frontpage ``http://127.0.0.1:8000/`` and start playing.\n6. Put some beer in your fridge and call me. :-)\n\nQuick installation instruction\n==============================\n\n1. Put ``frontendadmin`` in your ``INSTALLED_APPS`` in the settings.py of your\n   django project.\n\n2. Add ``django.core.context_processors.request`` to your ``TEMPLATE_CONTEXT_PROCESSORS``\n   in the settings.py of your django project. If this is not available (default since\n   some days) put this snippet into your settings::\n\n    TEMPLATE_CONTEXT_PROCESSORS = (\n        'django.core.context_processors.request',\n        'django.core.context_processors.auth',\n        'django.core.context_processors.debug',\n        'django.core.context_processors.i18n',\n        'django.core.context_processors.media',\n    )\n\n3. Include frontendadmin urls in your urlsconf::\n\n    (r'^frontendadmin/', include('frontendadmin.urls')),\n\n4. Load the ``frontendadmin_tags`` library in every template you want to use\n   the frontendamin links. (see below)::\n\n    {% load frontendadmin_tags %}\n\n5. There are three templatetags to either create, change or delete objects::\n\n    {% frontendadmin_add queryset_of_objects label_for_link %}\n    {% frontendadmin_change object_to_change label_for_link %}\n    {% frontendadmin_delete object_to_delete label_for_link %}\n\n   Assumed that you have a weblog application and using generic-views, your\n   template might look so::\n\n    {% for entry in object_list %}\n    <div>\n      <h2>{{ entry.title }}</h2>\n      {{ entry.body }}\n    <div>\n    {% endfor %}\n\n   A proper implementation of frontendadmin would be::\n\n    {% frontendadmin_add object_list %}\n    {% for entry in object_list %}\n    <div>\n      <h2>{{ entry.title }}</h2>\n      {{ entry.body }}\n      {% frontendadmin_change entry %}\n      {% frontendadmin_delete entry %}\n    <div>\n    {% endfor %}\n\n   Custom labels can be used as the last argument to any tag::\n\n    {% frontendadmin_add object_list 'Post an entry' %}\n    {% for entry in object_list %}\n    <div>\n      <h2>{{ entry.title }}</h2>\n      {{ entry.body }}\n      {% frontendadmin_change entry 'Edit this entry' %}\n      {% frontendadmin_delete entry 'Remove it permanently' %}\n    <div>\n    {% endfor %}\n\n6. Thats all. Frontendadmin will automatically check whether the current user has\n   add/change/delete permissions for the given model.\n\n   Frontendadmin has build-in ajax support using the jquery library. See the\n   template-sources for details.\n\nCustom Configuration\n====================\n1. Admin forms will be used if registered with the model you are trying to use. If you have\n   a model admin called ``EntryAdmin`` registered with ``django.contrib.admin.site`` then \n   frontendadmin will use any form associated with, specified in ``EntryAdmin.Meta.form``.\n\n2. You can also set which forms will be used for a specific model. The forms may\n   be in your codebase, or anywhere on your python path. This is handy for custom widgets\n   like split datetime fields and WYSIWYG editors. Set the following settings\n   directives to see custom forms in action::\n\n    FRONTEND_FORMS = {\n        'blog.entry': 'blog.forms.EntryForm',\n    }\n\n   In this example, the ``entry`` model in the ``blog`` app will be rendered with\n   the ``EntryForm`` within the ``blog.forms`` module. The key for the\n   dictionary is ``app_label`` . ``model_name`` and must be all lower case.\n   The value of the dictionary is ``module_name`` . ``form_class`` and must match\n   the capitalization of the actual module. \n\n3. You may define which fields to include or exclude on a per model basis\n   from inside your settings. Here is a snippet that blocks a user from being\n   able to change the ``user`` field on their profile and limits them to only\n   information that they should be able to edit::\n\n    FRONTEND_EXCLUDES = {\n        'profiles.userprofile': ('user',)\n    }\n    FRONTEND_INCLUDES = {\n        'profiles.userprofile': ('address1','address2','avatar')\n    }\n\n   This will include the ``address1``, ``address2``, and ``avatar`` fields\n   and exclude the ``user`` field from the form. Notice the key for both\n   dictionaries is ``app_label`` . ``model_name`` and must be all lower case.\n\n   \n4. Custom form templates will be used by default if they exist. For a model\n   named ``entry`` in the app ``blog`` the frontendadmin will try to use\n   ``frontendadmin/blog_entry_form.html`` for the full form and ``frontendadmin/blog_entry_form_ajax.html``\n   for the ajax form. If they do not exist, the defaults will be used.\n\nLicense\n=======\n\nThe application is licensed under the ``New BSD License``. See the LICENSE File\nfor details.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.mahner.org/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-frontendadmin", "package_url": "https://pypi.org/project/django-frontendadmin/", "platform": "", "project_url": "https://pypi.org/project/django-frontendadmin/", "project_urls": {"Homepage": "http://www.mahner.org/"}, "release_url": "https://pypi.org/project/django-frontendadmin/0.5/", "requires_dist": null, "requires_python": "", "summary": "A a set of templatetags to allow an easy and unobstrusive way to edit model-data in the frontend of your page.", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<p>Warning</p>\n<p>This package is not in active development. It\u2019s likely not functional\nwith the latest Python and/or Django version. If you like to take over\nthe project please contact me.</p>\n</div>\n<div id=\"django-frontendadmin\">\n<h2>django-frontendadmin</h2>\n<p>django-frontendadmin is a set of templatetags to allow an easy and unobstrusive\nway to edit model-data in the frontend of your page.</p>\n<div id=\"example-project\">\n<h3>Example project</h3>\n<p>This package provides an easy example project, a weblog with comments. Here is\na quick step-by-step guide how to get this running quickly:</p>\n<ol>\n<li>Open your terminal and cd to the <tt><span class=\"pre\">django-frontendadmin/example_project/</span></tt> directory.</li>\n<li><tt>$ ./manage.py syncdb</tt> and create a superuser.</li>\n<li><tt>$ ./manage.py runserver</tt> and point your browser to <tt><span class=\"pre\">http://127.0.0.1:8000/admin/</span></tt>.</li>\n<li>Authenticate yourself with the username/password you provided in step 2.</li>\n<li>Go to the frontpage <tt><span class=\"pre\">http://127.0.0.1:8000/</span></tt> and start playing.</li>\n<li>Put some beer in your fridge and call me. :-)</li>\n</ol>\n</div>\n<div id=\"quick-installation-instruction\">\n<h3>Quick installation instruction</h3>\n<ol>\n<li><p>Put <tt>frontendadmin</tt> in your <tt>INSTALLED_APPS</tt> in the settings.py of your\ndjango project.</p>\n</li>\n<li><p>Add <tt>django.core.context_processors.request</tt> to your <tt>TEMPLATE_CONTEXT_PROCESSORS</tt>\nin the settings.py of your django project. If this is not available (default since\nsome days) put this snippet into your settings:</p>\n<pre>TEMPLATE_CONTEXT_PROCESSORS = (\n    'django.core.context_processors.request',\n    'django.core.context_processors.auth',\n    'django.core.context_processors.debug',\n    'django.core.context_processors.i18n',\n    'django.core.context_processors.media',\n)\n</pre>\n</li>\n<li><p>Include frontendadmin urls in your urlsconf:</p>\n<pre>(r'^frontendadmin/', include('frontendadmin.urls')),\n</pre>\n</li>\n<li><p>Load the <tt>frontendadmin_tags</tt> library in every template you want to use\nthe frontendamin links. (see below):</p>\n<pre>{% load frontendadmin_tags %}\n</pre>\n</li>\n<li><p>There are three templatetags to either create, change or delete objects:</p>\n<pre>{% frontendadmin_add queryset_of_objects label_for_link %}\n{% frontendadmin_change object_to_change label_for_link %}\n{% frontendadmin_delete object_to_delete label_for_link %}\n</pre>\n<p>Assumed that you have a weblog application and using generic-views, your\ntemplate might look so:</p>\n<pre>{% for entry in object_list %}\n&lt;div&gt;\n  &lt;h2&gt;{{ entry.title }}&lt;/h2&gt;\n  {{ entry.body }}\n&lt;div&gt;\n{% endfor %}\n</pre>\n<p>A proper implementation of frontendadmin would be:</p>\n<pre>{% frontendadmin_add object_list %}\n{% for entry in object_list %}\n&lt;div&gt;\n  &lt;h2&gt;{{ entry.title }}&lt;/h2&gt;\n  {{ entry.body }}\n  {% frontendadmin_change entry %}\n  {% frontendadmin_delete entry %}\n&lt;div&gt;\n{% endfor %}\n</pre>\n<p>Custom labels can be used as the last argument to any tag:</p>\n<pre>{% frontendadmin_add object_list 'Post an entry' %}\n{% for entry in object_list %}\n&lt;div&gt;\n  &lt;h2&gt;{{ entry.title }}&lt;/h2&gt;\n  {{ entry.body }}\n  {% frontendadmin_change entry 'Edit this entry' %}\n  {% frontendadmin_delete entry 'Remove it permanently' %}\n&lt;div&gt;\n{% endfor %}\n</pre>\n</li>\n<li><p>Thats all. Frontendadmin will automatically check whether the current user has\nadd/change/delete permissions for the given model.</p>\n<p>Frontendadmin has build-in ajax support using the jquery library. See the\ntemplate-sources for details.</p>\n</li>\n</ol>\n</div>\n<div id=\"custom-configuration\">\n<h3>Custom Configuration</h3>\n<ol>\n<li><p>Admin forms will be used if registered with the model you are trying to use. If you have\na model admin called <tt>EntryAdmin</tt> registered with <tt>django.contrib.admin.site</tt> then\nfrontendadmin will use any form associated with, specified in <tt>EntryAdmin.Meta.form</tt>.</p>\n</li>\n<li><p>You can also set which forms will be used for a specific model. The forms may\nbe in your codebase, or anywhere on your python path. This is handy for custom widgets\nlike split datetime fields and WYSIWYG editors. Set the following settings\ndirectives to see custom forms in action:</p>\n<pre>FRONTEND_FORMS = {\n    'blog.entry': 'blog.forms.EntryForm',\n}\n</pre>\n<p>In this example, the <tt>entry</tt> model in the <tt>blog</tt> app will be rendered with\nthe <tt>EntryForm</tt> within the <tt>blog.forms</tt> module. The key for the\ndictionary is <tt>app_label</tt> . <tt>model_name</tt> and must be all lower case.\nThe value of the dictionary is <tt>module_name</tt> . <tt>form_class</tt> and must match\nthe capitalization of the actual module.</p>\n</li>\n<li><p>You may define which fields to include or exclude on a per model basis\nfrom inside your settings. Here is a snippet that blocks a user from being\nable to change the <tt>user</tt> field on their profile and limits them to only\ninformation that they should be able to edit:</p>\n<pre>FRONTEND_EXCLUDES = {\n    'profiles.userprofile': ('user',)\n}\nFRONTEND_INCLUDES = {\n    'profiles.userprofile': ('address1','address2','avatar')\n}\n</pre>\n<p>This will include the <tt>address1</tt>, <tt>address2</tt>, and <tt>avatar</tt> fields\nand exclude the <tt>user</tt> field from the form. Notice the key for both\ndictionaries is <tt>app_label</tt> . <tt>model_name</tt> and must be all lower case.</p>\n</li>\n<li><p>Custom form templates will be used by default if they exist. For a model\nnamed <tt>entry</tt> in the app <tt>blog</tt> the frontendadmin will try to use\n<tt>frontendadmin/blog_entry_form.html</tt> for the full form and <tt>frontendadmin/blog_entry_form_ajax.html</tt>\nfor the ajax form. If they do not exist, the defaults will be used.</p>\n</li>\n</ol>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>The application is licensed under the <tt>New BSD License</tt>. See the LICENSE File\nfor details.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3405964, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "034c78e2646d44800cd5874263527e76", "sha256": "174fb1d9158ea06906d819e1a63669cf7e126aa419deafe20b86c35ce08aadcc"}, "downloads": -1, "filename": "django-frontendadmin-0.3.tar.gz", "has_sig": true, "md5_digest": "034c78e2646d44800cd5874263527e76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7414, "upload_time": "2008-12-12T22:52:40", "upload_time_iso_8601": "2008-12-12T22:52:40Z", "url": "https://files.pythonhosted.org/packages/a5/a2/d7dffc0cd486e0f6558fd073146f1b0e9793f1dc3303c429b22a6e7946f2/django-frontendadmin-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "9eb62e385ea1e9b3863d93c633efe6f6", "sha256": "61c65f190ea915402ecc669803d5ff11009bcbdc23a3345a724f1caff11d8a2f"}, "downloads": -1, "filename": "django-frontendadmin-0.4.tar.gz", "has_sig": true, "md5_digest": "9eb62e385ea1e9b3863d93c633efe6f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7964, "upload_time": "2009-06-11T21:41:05", "upload_time_iso_8601": "2009-06-11T21:41:05.837847Z", "url": "https://files.pythonhosted.org/packages/44/2d/861f3e8f1f5c9ad15653a00e272f0a3f2fe38881d56a0bade3c6459d7451/django-frontendadmin-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "414d6ff0ddd373e04696cb580214fd2e", "sha256": "88236370ed15ceb2a56962f70a931642c570a8b9627efb89820529ef5b20a3a2"}, "downloads": -1, "filename": "django-frontendadmin-0.5.tar.gz", "has_sig": true, "md5_digest": "414d6ff0ddd373e04696cb580214fd2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10135, "upload_time": "2017-12-10T20:10:59", "upload_time_iso_8601": "2017-12-10T20:10:59.741794Z", "url": "https://files.pythonhosted.org/packages/2f/2f/d635fa83c7b8d9009160eb7e869548d7501f8a8de9a6d0cc99fd406f02d5/django-frontendadmin-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "414d6ff0ddd373e04696cb580214fd2e", "sha256": "88236370ed15ceb2a56962f70a931642c570a8b9627efb89820529ef5b20a3a2"}, "downloads": -1, "filename": "django-frontendadmin-0.5.tar.gz", "has_sig": true, "md5_digest": "414d6ff0ddd373e04696cb580214fd2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10135, "upload_time": "2017-12-10T20:10:59", "upload_time_iso_8601": "2017-12-10T20:10:59.741794Z", "url": "https://files.pythonhosted.org/packages/2f/2f/d635fa83c7b8d9009160eb7e869548d7501f8a8de9a6d0cc99fd406f02d5/django-frontendadmin-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:59 2020"}