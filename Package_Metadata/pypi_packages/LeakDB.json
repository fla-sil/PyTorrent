{"info": {"author": "Lujeni", "author_email": "julien@thebault.co", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: Unix", "Programming Language :: Python :: 2.7"], "description": "LeakDB\n======\n\nWhy ?\n-----\nFor the fun \\o/\n\nOverview\n--------\nLeakDB is a very simple and fast key value store for Python.\n\nAll data is stored in memory and the persistence is defined by the user.\nA max queue size can be defined for a auto-flush.\n\nAPI\n---\n.. code:: python\n\n    >>> from leakdb import PersistentQueueStorage\n    >>> leak = PersistentQueueStorage(filename='/tmp/foobar.db')\n\n    # set the value of a key\n    >>> leak.set('bar', {'foo': 'bar'})\n    >>> leak.set('foo', 2, key_prefix='bar_')\n\n    # increment a key\n    >>> leak.incr(key='bar_foo', delta=5)\n     7\n\n    >>> leak.incr(key='foobar', initial_value=1000)\n     1000\n\n    # looks up multiple keys\n    >>> leak.get_multi(keys=['bar', 'foobar'])\n     {u'foobar': 1000, u'bar': {u'foo': u'bar'}}\n\n    # ensure changes are sent to disk\n    >>> print leak\n     /tmp/foobar.db 12288 bytes :: 3 items in queue :: 3 items in storage memory\n\n    >>> leak.flush(force=True)\n     /tmp/foobar.db 12338 bytes :: 0 items in queue :: 3 items in storage memory\n\n    >>> leak.close()\n\nSTORAGE\n-------\n\n- **DefaultStorage** :: The default storage, all API operations are implemented ``set`` ``set_multi`` ``incr`` ``decr`` ``get_multi`` ``delete``\n- **QueueStorage** :: Use the ``DefaultStorage`` with a queue. You can override the ``QueueStorage.worker_process`` method and make what you want when the ``flush`` method is called.\n\n.. code:: python\n\n    from leakdb import QueueStorage\n\n    class MyQueueStorage(QueueStorage):\n\n        def worker_process(self, item):\n            \"\"\" Default action execute by each worker.\n                Must return a True statement to remove the item,\n                otherwise the worker put the item into the queue.\n            \"\"\"\n            logger.info('process item :: {}'.format(item))\n            return True\n\n- **PersistentStorage** :: Use the ``DefaultStorage``, otherwise **each** operation is stored through the ``shelve`` module.\n- **PersistentQueueStorage** :: Use the ``QueueStorage`` and the ``PersistentStorage``.\n\n.. code:: python\n\n    # see also the API part\n    from leakdb import PersistentQueueStorage\n\n    storage = PersistentQueueStorage(filename=\"/tmp/foobar.db\",  maxsize=1, workers=1)\n    # the queue is auto-flush, each operations check the queue size\n    storage.set('foo', 1)\n\nTODO\n----\n\n- finish the transport layer through zeroMQ\n- cleanup the code\n- improves the unittests\n- write a CLI\n- benchmark each storage", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Lujeni/LeakDB", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "LeakDB", "package_url": "https://pypi.org/project/LeakDB/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/LeakDB/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Lujeni/LeakDB"}, "release_url": "https://pypi.org/project/LeakDB/0.2/", "requires_dist": null, "requires_python": null, "summary": "LeakDB is a very simple and fast key value store for Python", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"why\">\n<h2>Why ?</h2>\n<p>For the fun o/</p>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>LeakDB is a very simple and fast key value store for Python.</p>\n<p>All data is stored in memory and the persistence is defined by the user.\nA max queue size can be defined for a auto-flush.</p>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">leakdb</span> <span class=\"kn\">import</span> <span class=\"n\">PersistentQueueStorage</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">leak</span> <span class=\"o\">=</span> <span class=\"n\">PersistentQueueStorage</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/foobar.db'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the value of a key</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">leak</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">leak</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">key_prefix</span><span class=\"o\">=</span><span class=\"s1\">'bar_'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># increment a key</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">leak</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'bar_foo'</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n <span class=\"mi\">7</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">leak</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'foobar'</span><span class=\"p\">,</span> <span class=\"n\">initial_value</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n <span class=\"mi\">1000</span>\n\n<span class=\"c1\"># looks up multiple keys</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">leak</span><span class=\"o\">.</span><span class=\"n\">get_multi</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'foobar'</span><span class=\"p\">])</span>\n <span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'foobar'</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'bar'</span><span class=\"p\">}}</span>\n\n<span class=\"c1\"># ensure changes are sent to disk</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">leak</span>\n <span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"mi\">12288</span> <span class=\"nb\">bytes</span> <span class=\"p\">::</span> <span class=\"mi\">3</span> <span class=\"n\">items</span> <span class=\"ow\">in</span> <span class=\"n\">queue</span> <span class=\"p\">::</span> <span class=\"mi\">3</span> <span class=\"n\">items</span> <span class=\"ow\">in</span> <span class=\"n\">storage</span> <span class=\"n\">memory</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">leak</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">(</span><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n <span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"mi\">12338</span> <span class=\"nb\">bytes</span> <span class=\"p\">::</span> <span class=\"mi\">0</span> <span class=\"n\">items</span> <span class=\"ow\">in</span> <span class=\"n\">queue</span> <span class=\"p\">::</span> <span class=\"mi\">3</span> <span class=\"n\">items</span> <span class=\"ow\">in</span> <span class=\"n\">storage</span> <span class=\"n\">memory</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">leak</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"storage\">\n<h2>STORAGE</h2>\n<ul>\n<li><strong>DefaultStorage</strong> :: The default storage, all API operations are implemented <tt>set</tt> <tt>set_multi</tt> <tt>incr</tt> <tt>decr</tt> <tt>get_multi</tt> <tt>delete</tt></li>\n<li><strong>QueueStorage</strong> :: Use the <tt>DefaultStorage</tt> with a queue. You can override the <tt>QueueStorage.worker_process</tt> method and make what you want when the <tt>flush</tt> method is called.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">leakdb</span> <span class=\"kn\">import</span> <span class=\"n\">QueueStorage</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyQueueStorage</span><span class=\"p\">(</span><span class=\"n\">QueueStorage</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">worker_process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Default action execute by each worker.\n            Must return a True statement to remove the item,\n            otherwise the worker put the item into the queue.\n        \"\"\"</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'process item :: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<ul>\n<li><strong>PersistentStorage</strong> :: Use the <tt>DefaultStorage</tt>, otherwise <strong>each</strong> operation is stored through the <tt>shelve</tt> module.</li>\n<li><strong>PersistentQueueStorage</strong> :: Use the <tt>QueueStorage</tt> and the <tt>PersistentStorage</tt>.</li>\n</ul>\n<pre><span class=\"c1\"># see also the API part</span>\n<span class=\"kn\">from</span> <span class=\"nn\">leakdb</span> <span class=\"kn\">import</span> <span class=\"n\">PersistentQueueStorage</span>\n\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">PersistentQueueStorage</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"/tmp/foobar.db\"</span><span class=\"p\">,</span>  <span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># the queue is auto-flush, each operations check the queue size</span>\n<span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>finish the transport layer through zeroMQ</li>\n<li>cleanup the code</li>\n<li>improves the unittests</li>\n<li>write a CLI</li>\n<li>benchmark each storage</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1183091, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a96106516764aa027cd986ce26365a51", "sha256": "a931dfd5660da9ec5debb0af9cfacfb0092fec4be0635a92b4bad121360385c5"}, "downloads": -1, "filename": "LeakDB-0.1.tar.gz", "has_sig": false, "md5_digest": "a96106516764aa027cd986ce26365a51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4966, "upload_time": "2014-08-01T20:09:03", "upload_time_iso_8601": "2014-08-01T20:09:03.297236Z", "url": "https://files.pythonhosted.org/packages/a7/bc/036b72766e4a84f521562e21e9a32ec791325a9ea763fed845ed2e87c168/LeakDB-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7b5cff00669c84e2aa233150337a6125", "sha256": "8ce8c7aaa0f534afc47d5964bddf200c00ba13fcba0d46cc1140f47b7b54a131"}, "downloads": -1, "filename": "LeakDB-0.2.tar.gz", "has_sig": false, "md5_digest": "7b5cff00669c84e2aa233150337a6125", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5231, "upload_time": "2014-08-07T16:40:40", "upload_time_iso_8601": "2014-08-07T16:40:40.838264Z", "url": "https://files.pythonhosted.org/packages/b1/7b/cf6ccbf87917785e294256b13ee40cb60715ddb272550ccc6032765f272f/LeakDB-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b5cff00669c84e2aa233150337a6125", "sha256": "8ce8c7aaa0f534afc47d5964bddf200c00ba13fcba0d46cc1140f47b7b54a131"}, "downloads": -1, "filename": "LeakDB-0.2.tar.gz", "has_sig": false, "md5_digest": "7b5cff00669c84e2aa233150337a6125", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5231, "upload_time": "2014-08-07T16:40:40", "upload_time_iso_8601": "2014-08-07T16:40:40.838264Z", "url": "https://files.pythonhosted.org/packages/b1/7b/cf6ccbf87917785e294256b13ee40cb60715ddb272550ccc6032765f272f/LeakDB-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:20 2020"}