{"info": {"author": "Andres Morey", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP"], "description": "# Starlette-WTF\n\nStarlette-WTF is a simple tool for integrating [Starlette](https://www.starlette.io/) and [WTForms](https://wtforms.readthedocs.io/en/stable/). It is modeled on the excellent [Flask-WTF](https://flask-wtf.readthedocs.io) library.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Quickstart](#quickstart)\n- [Creating Forms](#creating-forms)\n  * [The StarletteForm Class](#the-starletteform-class)\n  * [Validation](#validation)\n- [CSRF Protection](#csrf-protection)\n  * [Setup](#setup)\n  * [Protect Views](#protect-views)\n  * [HTML Forms](#html-forms)\n  * [JavaScript Requests](#javascript-requests)\n  * [Disable in Unit Tests](#disable-in-unit-tests)\n  * [Configuration](#configuration)\n- [Development](#development)\n  * [Get the code](#get-the-code)\n  * [Run unit tests](#run-unit-tests)\n\n## Installation\n\nInstalling Starlette-WTF is simple with [pip](https://pip.pypa.io/en/stable/):\n\n```bash\n$ pip install starlette-wtf\n```\n\n## Quickstart\n\nThe following code implements a simple form handler with CSRF protection. The form has a required string field and validation errors are handled by the html template. Note that CSRF protection requires `SessionMiddleware`, `CSRFProtectMiddleware`, `@csrf_protect` and the `csrf_token` field to be added to the HTML form.\n\nFirst, install the dependencies for this quickstart:\n\n```bash\n$ pip install starlette starlette-wtf jinja2 uvicorn \n```\n\nNext, create a Python file (app.py) with the following code:\n\n```python\nfrom jinja2 import Template\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette.responses import PlainTextResponse, HTMLResponse\nfrom starlette_wtf import StarletteForm, CSRFProtectMiddleware, csrf_protect\nfrom wtforms import StringField\nfrom wtforms.validators\timport DataRequired\n\n\nclass MyForm(StarletteForm):\n    name = StringField('name', validators=[DataRequired()])\n\n\ntemplate = Template('''\n<html>\n  <body>\n    <form method=\"post\" novalidate>\n      {{ form.csrf_token }}\n      <div>\n        {{ form.name(placeholder='Name') }}\n        {% if form.name.errors -%}\n        <span>{{ form.name.errors[0] }}</span>\n        {%- endif %}\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  </body>\n</html>\n''')\n\n\napp = Starlette(middleware=[\n    Middleware(SessionMiddleware, secret_key='***REPLACEME1***'),\n    Middleware(CSRFProtectMiddleware, csrf_secret='***REPLACEME2***')\n])\n\n\n@app.route('/', methods=['GET', 'POST'])\n@csrf_protect\nasync def index(request):\n    \"\"\"GET|POST /: form handler\n    \"\"\"\n    form = await MyForm.from_formdata(request)\n    \n    if form.validate_on_submit():\n        return PlainTextResponse('SUCCESS')\n\n    html = template.render(form=form)\n    return HTMLResponse(html)\n```\n    \nFinally, run the app using the following command:\n    \n```bash\n$ uvicorn app:app\n```\n\n## Creating Forms\n\n### The StarletteForm Class\n\nStarlette-WTF provides a form class that makes it easy to add form validation and CSRF protection to Starlette apps. To make a form, subclass the `StarletteForm` class and use [WTForms](https://wtforms.readthedocs.io/) fields, validators and widgets to define the inputs. The `StarletteForm` class inherits from the WTForms `Form` class so you can use WTForms features and methods to add more advanced functionality to your app:\n\n```python\nfrom starlette_wtf import StarletteForm\nfrom wtforms import TextField, PasswordField\nfrom wtforms.validators import DataRequired, Email, EqualTo\nfrom wtforms.widgets import PasswordInput\n\n\nclass CreateAccountForm(StarletteForm):\n    email = TextField(\n        'Email address',\n        validators=[\n            DataRequired('Please enter your email address'),\n            Email()\n        ]\n    )\n\n    password = PasswordField(\n        'Password',\n        widget=PasswordInput(hide_value=False),\n        validators=[\n            DataRequired('Please enter your password'),\n            EqualTo('password_confirm', message='Passwords must match')\n        ]\n    )\n\n    password_confirm = PasswordField(\n        'Confirm Password',\n        widget=PasswordInput(hide_value=False),\n        validators=[\n            DataRequired('Please confirm your password')\n        ]\n    )\n```\n\nOften you will want to initialize form objects using default values on GET requests and from submitted formdata on POST requests. To make this easier you can use the `.from_formdata()` async class method which does this for you automatically:\n\n```python\n@app.route('/create-account', methods=['GET', 'POST'])\nasync def create_account(request):\n    \"\"\"GET|POST /create-account: Create account form handler\n    \"\"\"\n    form = await CreateAccountForm.from_formdata(request)\n    return PlainTextResponse()\n```\n\n### Validation\n\nThe `StarletteForm` class has a useful `.validate_on_submit()` method that performs input validation for POST, PUT, PATCH and DELETE requests and returns a boolean indicating whether or not there were any errors. After validation, errors are available via the `.errors` attribute attached to each input field instance:\n\n```python\nfrom jinja2 import Template\nfrom starlette.applications import Starlette\nfrom starlette.responses import (PlainTextResponse, RedirectResponse,\n                                 HTMLResponse)\n\n\ntemplate = Template('''\n<html>\n  <body>\n    <h1>Create Account</h1>\n    <form method=\"post\" novalidate>\n      <div>\n        {{ form.email(placeholder='Email address',\n                      autofocus='true',\n                      type='email',\n                      spellcheck='false') }}\n        {% if form.email.errors -%}\n        <span>{{ form.email.errors[0] }}</span>\n        {%- endif %}\n      </div>\n      <div>\n        {{ form.password(placeholder=\"Password\") }}\n        {% if form.password.errors -%}\n        <span>{{ form.password.errors[0] }}</span>\n        {%- endif %}\n      </div>\n      <div>\n        {{ form.password_confirm(placeholder=\"Confirm password\") }}\n        {% if form.password_confirm.errors -%}\n        <span>{{ form.password_confirm.errors[0] }}</span>\n        {%- endif %}\n      </div>\n      <button type=\"submit\">Create account</button>\n    </form>\n  </body>\n</html>\n''')\n\n\napp = Starlette()\n\n\n@app.route('/', methods=['GET'])\nasync def index(request):\n    \"\"\"GET /: Return home page\n    \"\"\"\n    return PlainTextResponse()\n\n\n@app.route('/create-account', methods=['GET', 'POST'])\nasync def create_account(request):\n    \"\"\"GET|POST /create-account: Create account form handler\n    \"\"\"\n    # initialize form\n    form = await CreateAccountForm.from_formdata(request)\n\n    # validate form\n    if form.validate_on_submit():\n        # TODO: Save account credentials before returning redirect response\n        return RedirectResponse(url='/', status_code=303)\n\n    # generate html\n    html = template.render(form=form)\n\n    # return response\n    status_code = 422 if form.errors else 200\n    return HTMLResponse(html, status_code=status_code)\n```\n\n## CSRF Protection\n\nIn order to add CSRF protection to your app, first you must ensure that Starlette's `SessionMiddleware` is enabled, second you must configure Starlette-WTF using `CSRFProtectMiddleware`, third you must use the `@csrf_protect` decorator to protect individual endpoints, and fourth you must add the CSRF token to your HTML forms or JavaScript requests.\n\n### Setup\n\nTo enable CSRF protection for your app, first you must ensure that Starlette's `SessionMiddleware` is enabled, and second you must configure Starlette-WTF using `CSRFProtectMiddleware`.\n\n```python\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette_wtf import CSRFProtectMiddleware\n\n\napp = Starlette(middleware=[\n    Middleware(SessionMiddleware, secret_key='***REPLACEME1***'),\n    Middleware(CSRFProtectMiddleware, csrf_secret='***REPLACEME2***')\n])\n```\n\n### Protect Views\n\nOnce Starlette-WTF has been configured using `CSRFProtectMiddleware` you can enable CSRF protection for individual endpoints using the `@csrf_protect` decorator. The `@csrf_protect` decorator will automatically look for `csrf_token` in the form data or in the request headers (`X-CSRFToken`) and it will raise an `HTTPException` if the token is missing or invalid. Note that the `@csrf_protect` must run after `@app.route()`:\n\n```python\nfrom starlette.responses import PlainTextResponse\nfrom starlette_wtf import csrf_protect\n\n\n@app.route('/form-handler', methods=['GET', 'POST'])\n@csrf_protect\nasync def form_handler(request):\n    \"\"\"GET|POST /form-handler: Form handler\n    \"\"\"\n    # this code won't run unless the CSRF token has been validated\n    return PlainTextResponse()\n```\n\n### HTML Forms\n\nWhen using `StarletteForm` you can render the form's CSRF token field like this:\n\n```html\n<form method=\"post\">\n  {{ form.csrf_token }}\n</form>\n```\n\n### JavaScript Requests\n\nWhen sending an AJAX request, add the `X-CSRFToken` header to allow Starlette-WTF to perform CSRF validation. For example, in jQuery you can configure all requests to send the token:\n\n```html\n<script type=\"text/javascript\">\n  var csrf_token = \"{{ csrf_token(request) }}\";\n\n  $.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n      if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {\n        xhr.setRequestHeader(\"X-CSRFToken\", csrf_token);\n      }\n    }\n  });\n</script>\n```\n\n### Disable in Unit Tests\n\nTo disable CSRF protection in unit tests you can toggle the `enable` attribute in `CSRFProtectionMiddleware`:\n\n```python\nfrom starlette.applications import Starlette\nfrom starlette.config import environ\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette_wtf import CSRFProtectMiddleware\n\n\napp = Starlette(middleware=[\n    Middleware(SessionMiddleware, secret_key='***REPLACEME1***'),\n    Middleware(CSRFProtectMiddleware,\n               enable=!environ.get('TESTING', False),\n               csrf_secret='***REPLACEME2***')\n])\n```\n\n### Configuration\n\n`CSRFProtectMiddleware` accepts the following options:\n\n| Argument          | Description\n| ----------------- | -----------\n| enabled         | If true, enables CSRF protection. Default to True.\n| csrf_secret     | The CSRF token signing key.\n| csrf_field_name | The CSRF token's field name in the session. Defaults to \"csrf_token\"\n| csrf_time_limit | The time limit for each signed token in seconds. Defaults to 3600.\n| csrf_headers    | List of CSRF HTTP header field names. Defaults to [\"X-CSRFToken\", \"X-CSRF-Token\"]\n| csrf_ssl_strict | If enabled, ensures same origin policy on https requests. Defaults to True.\n\n## Development\n\n### Get the code\n\nStarlette-WTF is actively developed on GitHub. You can clone the repository using git:\n\n```bash\n$ git clone git@github.com:muicss/starlette-wtf.git\n```\n\nOnce you have a copy of the source, you can install it into your site-packages in development mode so you can modify and execute the code:\n\n```bash\n$ python setup.py develop\n```\n\n### Run unit tests\n\nTo install unit test dependencies:\n\n```bash\n$ pip install -e .[test]\n```\n\nTo run unit tests:\n\n```bash\n$ pytest\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/muicss/starlette-wtf", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Starlette-WTF", "package_url": "https://pypi.org/project/Starlette-WTF/", "platform": "any", "project_url": "https://pypi.org/project/Starlette-WTF/", "project_urls": {"Homepage": "https://github.com/muicss/starlette-wtf"}, "release_url": "https://pypi.org/project/Starlette-WTF/0.2.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Simple integration of Starlette and WTForms.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Starlette-WTF</h1>\n<p>Starlette-WTF is a simple tool for integrating <a href=\"https://www.starlette.io/\" rel=\"nofollow\">Starlette</a> and <a href=\"https://wtforms.readthedocs.io/en/stable/\" rel=\"nofollow\">WTForms</a>. It is modeled on the excellent <a href=\"https://flask-wtf.readthedocs.io\" rel=\"nofollow\">Flask-WTF</a> library.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#creating-forms\" rel=\"nofollow\">Creating Forms</a>\n<ul>\n<li><a href=\"#the-starletteform-class\" rel=\"nofollow\">The StarletteForm Class</a></li>\n<li><a href=\"#validation\" rel=\"nofollow\">Validation</a></li>\n</ul>\n</li>\n<li><a href=\"#csrf-protection\" rel=\"nofollow\">CSRF Protection</a>\n<ul>\n<li><a href=\"#setup\" rel=\"nofollow\">Setup</a></li>\n<li><a href=\"#protect-views\" rel=\"nofollow\">Protect Views</a></li>\n<li><a href=\"#html-forms\" rel=\"nofollow\">HTML Forms</a></li>\n<li><a href=\"#javascript-requests\" rel=\"nofollow\">JavaScript Requests</a></li>\n<li><a href=\"#disable-in-unit-tests\" rel=\"nofollow\">Disable in Unit Tests</a></li>\n<li><a href=\"#configuration\" rel=\"nofollow\">Configuration</a></li>\n</ul>\n</li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a>\n<ul>\n<li><a href=\"#get-the-code\" rel=\"nofollow\">Get the code</a></li>\n<li><a href=\"#run-unit-tests\" rel=\"nofollow\">Run unit tests</a></li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Installing Starlette-WTF is simple with <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ pip install starlette-wtf\n</pre>\n<h2>Quickstart</h2>\n<p>The following code implements a simple form handler with CSRF protection. The form has a required string field and validation errors are handled by the html template. Note that CSRF protection requires <code>SessionMiddleware</code>, <code>CSRFProtectMiddleware</code>, <code>@csrf_protect</code> and the <code>csrf_token</code> field to be added to the HTML form.</p>\n<p>First, install the dependencies for this quickstart:</p>\n<pre>$ pip install starlette starlette-wtf jinja2 uvicorn \n</pre>\n<p>Next, create a Python file (app.py) with the following code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jinja2</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">Middleware</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.middleware.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">SessionMiddleware</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">PlainTextResponse</span><span class=\"p\">,</span> <span class=\"n\">HTMLResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette_wtf</span> <span class=\"kn\">import</span> <span class=\"n\">StarletteForm</span><span class=\"p\">,</span> <span class=\"n\">CSRFProtectMiddleware</span><span class=\"p\">,</span> <span class=\"n\">csrf_protect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wtforms</span> <span class=\"kn\">import</span> <span class=\"n\">StringField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wtforms.validators</span>\t<span class=\"kn\">import</span> <span class=\"n\">DataRequired</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyForm</span><span class=\"p\">(</span><span class=\"n\">StarletteForm</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">DataRequired</span><span class=\"p\">()])</span>\n\n\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s1\">'''</span>\n<span class=\"s1\">&lt;html&gt;</span>\n<span class=\"s1\">  &lt;body&gt;</span>\n<span class=\"s1\">    &lt;form method=\"post\" novalidate&gt;</span>\n<span class=\"s1\">      {{ form.csrf_token }}</span>\n<span class=\"s1\">      &lt;div&gt;</span>\n<span class=\"s1\">        {{ form.name(placeholder='Name') }}</span>\n<span class=\"s1\">        {</span><span class=\"si\">% i</span><span class=\"s1\">f form.name.errors -%}</span>\n<span class=\"s1\">        &lt;span&gt;{{ form.name.errors[0] }}&lt;/span&gt;</span>\n<span class=\"s1\">        {</span><span class=\"si\">%- e</span><span class=\"s1\">ndif %}</span>\n<span class=\"s1\">      &lt;/div&gt;</span>\n<span class=\"s1\">      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;</span>\n<span class=\"s1\">    &lt;/form&gt;</span>\n<span class=\"s1\">  &lt;/body&gt;</span>\n<span class=\"s1\">&lt;/html&gt;</span>\n<span class=\"s1\">'''</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">(</span><span class=\"n\">middleware</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Middleware</span><span class=\"p\">(</span><span class=\"n\">SessionMiddleware</span><span class=\"p\">,</span> <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'***REPLACEME1***'</span><span class=\"p\">),</span>\n    <span class=\"n\">Middleware</span><span class=\"p\">(</span><span class=\"n\">CSRFProtectMiddleware</span><span class=\"p\">,</span> <span class=\"n\">csrf_secret</span><span class=\"o\">=</span><span class=\"s1\">'***REPLACEME2***'</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"nd\">@csrf_protect</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"GET|POST /: form handler</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">MyForm</span><span class=\"o\">.</span><span class=\"n\">from_formdata</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">validate_on_submit</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">PlainTextResponse</span><span class=\"p\">(</span><span class=\"s1\">'SUCCESS'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"n\">form</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HTMLResponse</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, run the app using the following command:</p>\n<pre>$ uvicorn app:app\n</pre>\n<h2>Creating Forms</h2>\n<h3>The StarletteForm Class</h3>\n<p>Starlette-WTF provides a form class that makes it easy to add form validation and CSRF protection to Starlette apps. To make a form, subclass the <code>StarletteForm</code> class and use <a href=\"https://wtforms.readthedocs.io/\" rel=\"nofollow\">WTForms</a> fields, validators and widgets to define the inputs. The <code>StarletteForm</code> class inherits from the WTForms <code>Form</code> class so you can use WTForms features and methods to add more advanced functionality to your app:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette_wtf</span> <span class=\"kn\">import</span> <span class=\"n\">StarletteForm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wtforms</span> <span class=\"kn\">import</span> <span class=\"n\">TextField</span><span class=\"p\">,</span> <span class=\"n\">PasswordField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wtforms.validators</span> <span class=\"kn\">import</span> <span class=\"n\">DataRequired</span><span class=\"p\">,</span> <span class=\"n\">Email</span><span class=\"p\">,</span> <span class=\"n\">EqualTo</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wtforms.widgets</span> <span class=\"kn\">import</span> <span class=\"n\">PasswordInput</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CreateAccountForm</span><span class=\"p\">(</span><span class=\"n\">StarletteForm</span><span class=\"p\">):</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">TextField</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Email address'</span><span class=\"p\">,</span>\n        <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"n\">DataRequired</span><span class=\"p\">(</span><span class=\"s1\">'Please enter your email address'</span><span class=\"p\">),</span>\n            <span class=\"n\">Email</span><span class=\"p\">()</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">PasswordField</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Password'</span><span class=\"p\">,</span>\n        <span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">PasswordInput</span><span class=\"p\">(</span><span class=\"n\">hide_value</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n        <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"n\">DataRequired</span><span class=\"p\">(</span><span class=\"s1\">'Please enter your password'</span><span class=\"p\">),</span>\n            <span class=\"n\">EqualTo</span><span class=\"p\">(</span><span class=\"s1\">'password_confirm'</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'Passwords must match'</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">password_confirm</span> <span class=\"o\">=</span> <span class=\"n\">PasswordField</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Confirm Password'</span><span class=\"p\">,</span>\n        <span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">PasswordInput</span><span class=\"p\">(</span><span class=\"n\">hide_value</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n        <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"n\">DataRequired</span><span class=\"p\">(</span><span class=\"s1\">'Please confirm your password'</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Often you will want to initialize form objects using default values on GET requests and from submitted formdata on POST requests. To make this easier you can use the <code>.from_formdata()</code> async class method which does this for you automatically:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/create-account'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_account</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"GET|POST /create-account: Create account form handler</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">CreateAccountForm</span><span class=\"o\">.</span><span class=\"n\">from_formdata</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">PlainTextResponse</span><span class=\"p\">()</span>\n</pre>\n<h3>Validation</h3>\n<p>The <code>StarletteForm</code> class has a useful <code>.validate_on_submit()</code> method that performs input validation for POST, PUT, PATCH and DELETE requests and returns a boolean indicating whether or not there were any errors. After validation, errors are available via the <code>.errors</code> attribute attached to each input field instance:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jinja2</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">PlainTextResponse</span><span class=\"p\">,</span> <span class=\"n\">RedirectResponse</span><span class=\"p\">,</span>\n                                 <span class=\"n\">HTMLResponse</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s1\">'''</span>\n<span class=\"s1\">&lt;html&gt;</span>\n<span class=\"s1\">  &lt;body&gt;</span>\n<span class=\"s1\">    &lt;h1&gt;Create Account&lt;/h1&gt;</span>\n<span class=\"s1\">    &lt;form method=\"post\" novalidate&gt;</span>\n<span class=\"s1\">      &lt;div&gt;</span>\n<span class=\"s1\">        {{ form.email(placeholder='Email address',</span>\n<span class=\"s1\">                      autofocus='true',</span>\n<span class=\"s1\">                      type='email',</span>\n<span class=\"s1\">                      spellcheck='false') }}</span>\n<span class=\"s1\">        {</span><span class=\"si\">% i</span><span class=\"s1\">f form.email.errors -%}</span>\n<span class=\"s1\">        &lt;span&gt;{{ form.email.errors[0] }}&lt;/span&gt;</span>\n<span class=\"s1\">        {</span><span class=\"si\">%- e</span><span class=\"s1\">ndif %}</span>\n<span class=\"s1\">      &lt;/div&gt;</span>\n<span class=\"s1\">      &lt;div&gt;</span>\n<span class=\"s1\">        {{ form.password(placeholder=\"Password\") }}</span>\n<span class=\"s1\">        {</span><span class=\"si\">% i</span><span class=\"s1\">f form.password.errors -%}</span>\n<span class=\"s1\">        &lt;span&gt;{{ form.password.errors[0] }}&lt;/span&gt;</span>\n<span class=\"s1\">        {</span><span class=\"si\">%- e</span><span class=\"s1\">ndif %}</span>\n<span class=\"s1\">      &lt;/div&gt;</span>\n<span class=\"s1\">      &lt;div&gt;</span>\n<span class=\"s1\">        {{ form.password_confirm(placeholder=\"Confirm password\") }}</span>\n<span class=\"s1\">        {</span><span class=\"si\">% i</span><span class=\"s1\">f form.password_confirm.errors -%}</span>\n<span class=\"s1\">        &lt;span&gt;{{ form.password_confirm.errors[0] }}&lt;/span&gt;</span>\n<span class=\"s1\">        {</span><span class=\"si\">%- e</span><span class=\"s1\">ndif %}</span>\n<span class=\"s1\">      &lt;/div&gt;</span>\n<span class=\"s1\">      &lt;button type=\"submit\"&gt;Create account&lt;/button&gt;</span>\n<span class=\"s1\">    &lt;/form&gt;</span>\n<span class=\"s1\">  &lt;/body&gt;</span>\n<span class=\"s1\">&lt;/html&gt;</span>\n<span class=\"s1\">'''</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">])</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"GET /: Return home page</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">PlainTextResponse</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/create-account'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_account</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"GET|POST /create-account: Create account form handler</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># initialize form</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">CreateAccountForm</span><span class=\"o\">.</span><span class=\"n\">from_formdata</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># validate form</span>\n    <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">validate_on_submit</span><span class=\"p\">():</span>\n        <span class=\"c1\"># TODO: Save account credentials before returning redirect response</span>\n        <span class=\"k\">return</span> <span class=\"n\">RedirectResponse</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">303</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># generate html</span>\n    <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"n\">form</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># return response</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">422</span> <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">errors</span> <span class=\"k\">else</span> <span class=\"mi\">200</span>\n    <span class=\"k\">return</span> <span class=\"n\">HTMLResponse</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status_code</span><span class=\"p\">)</span>\n</pre>\n<h2>CSRF Protection</h2>\n<p>In order to add CSRF protection to your app, first you must ensure that Starlette's <code>SessionMiddleware</code> is enabled, second you must configure Starlette-WTF using <code>CSRFProtectMiddleware</code>, third you must use the <code>@csrf_protect</code> decorator to protect individual endpoints, and fourth you must add the CSRF token to your HTML forms or JavaScript requests.</p>\n<h3>Setup</h3>\n<p>To enable CSRF protection for your app, first you must ensure that Starlette's <code>SessionMiddleware</code> is enabled, and second you must configure Starlette-WTF using <code>CSRFProtectMiddleware</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">Middleware</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.middleware.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">SessionMiddleware</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette_wtf</span> <span class=\"kn\">import</span> <span class=\"n\">CSRFProtectMiddleware</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">(</span><span class=\"n\">middleware</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Middleware</span><span class=\"p\">(</span><span class=\"n\">SessionMiddleware</span><span class=\"p\">,</span> <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'***REPLACEME1***'</span><span class=\"p\">),</span>\n    <span class=\"n\">Middleware</span><span class=\"p\">(</span><span class=\"n\">CSRFProtectMiddleware</span><span class=\"p\">,</span> <span class=\"n\">csrf_secret</span><span class=\"o\">=</span><span class=\"s1\">'***REPLACEME2***'</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n</pre>\n<h3>Protect Views</h3>\n<p>Once Starlette-WTF has been configured using <code>CSRFProtectMiddleware</code> you can enable CSRF protection for individual endpoints using the <code>@csrf_protect</code> decorator. The <code>@csrf_protect</code> decorator will automatically look for <code>csrf_token</code> in the form data or in the request headers (<code>X-CSRFToken</code>) and it will raise an <code>HTTPException</code> if the token is missing or invalid. Note that the <code>@csrf_protect</code> must run after <code>@app.route()</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">PlainTextResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette_wtf</span> <span class=\"kn\">import</span> <span class=\"n\">csrf_protect</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/form-handler'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"nd\">@csrf_protect</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">form_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"GET|POST /form-handler: Form handler</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># this code won't run unless the CSRF token has been validated</span>\n    <span class=\"k\">return</span> <span class=\"n\">PlainTextResponse</span><span class=\"p\">()</span>\n</pre>\n<h3>HTML Forms</h3>\n<p>When using <code>StarletteForm</code> you can render the form's CSRF token field like this:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">\"post\"</span><span class=\"p\">&gt;</span>\n  {{ form.csrf_token }}\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n</pre>\n<h3>JavaScript Requests</h3>\n<p>When sending an AJAX request, add the <code>X-CSRFToken</code> header to allow Starlette-WTF to perform CSRF validation. For example, in jQuery you can configure all requests to send the token:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span><span class=\"p\">&gt;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">csrf_token</span> <span class=\"o\">=</span> <span class=\"s2\">\"{{ csrf_token(request) }}\"</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajaxSetup</span><span class=\"p\">({</span>\n    <span class=\"nx\">beforeSend</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">,</span> <span class=\"nx\">settings</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"sr\">/^(GET|HEAD|OPTIONS|TRACE)$/i</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">settings</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">crossDomain</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">setRequestHeader</span><span class=\"p\">(</span><span class=\"s2\">\"X-CSRFToken\"</span><span class=\"p\">,</span> <span class=\"nx\">csrf_token</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<h3>Disable in Unit Tests</h3>\n<p>To disable CSRF protection in unit tests you can toggle the <code>enable</code> attribute in <code>CSRFProtectionMiddleware</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.config</span> <span class=\"kn\">import</span> <span class=\"n\">environ</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">Middleware</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.middleware.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">SessionMiddleware</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette_wtf</span> <span class=\"kn\">import</span> <span class=\"n\">CSRFProtectMiddleware</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">(</span><span class=\"n\">middleware</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Middleware</span><span class=\"p\">(</span><span class=\"n\">SessionMiddleware</span><span class=\"p\">,</span> <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'***REPLACEME1***'</span><span class=\"p\">),</span>\n    <span class=\"n\">Middleware</span><span class=\"p\">(</span><span class=\"n\">CSRFProtectMiddleware</span><span class=\"p\">,</span>\n               <span class=\"n\">enable</span><span class=\"o\">=</span><span class=\"err\">!</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'TESTING'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n               <span class=\"n\">csrf_secret</span><span class=\"o\">=</span><span class=\"s1\">'***REPLACEME2***'</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n</pre>\n<h3>Configuration</h3>\n<p><code>CSRFProtectMiddleware</code> accepts the following options:</p>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>enabled</td>\n<td>If true, enables CSRF protection. Default to True.</td>\n</tr>\n<tr>\n<td>csrf_secret</td>\n<td>The CSRF token signing key.</td>\n</tr>\n<tr>\n<td>csrf_field_name</td>\n<td>The CSRF token's field name in the session. Defaults to \"csrf_token\"</td>\n</tr>\n<tr>\n<td>csrf_time_limit</td>\n<td>The time limit for each signed token in seconds. Defaults to 3600.</td>\n</tr>\n<tr>\n<td>csrf_headers</td>\n<td>List of CSRF HTTP header field names. Defaults to [\"X-CSRFToken\", \"X-CSRF-Token\"]</td>\n</tr>\n<tr>\n<td>csrf_ssl_strict</td>\n<td>If enabled, ensures same origin policy on https requests. Defaults to True.</td>\n</tr></tbody></table>\n<h2>Development</h2>\n<h3>Get the code</h3>\n<p>Starlette-WTF is actively developed on GitHub. You can clone the repository using git:</p>\n<pre>$ git clone git@github.com:muicss/starlette-wtf.git\n</pre>\n<p>Once you have a copy of the source, you can install it into your site-packages in development mode so you can modify and execute the code:</p>\n<pre>$ python setup.py develop\n</pre>\n<h3>Run unit tests</h3>\n<p>To install unit test dependencies:</p>\n<pre>$ pip install -e .<span class=\"o\">[</span>test<span class=\"o\">]</span>\n</pre>\n<p>To run unit tests:</p>\n<pre>$ pytest\n</pre>\n\n          </div>"}, "last_serial": 6562835, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ca3fb514be92522811ec41f0e6860c24", "sha256": "b3498d9986302c3b1f598345a672f81badde32388685950cfdd6d000f1e6ed49"}, "downloads": -1, "filename": "Starlette-WTF-0.1.tar.gz", "has_sig": false, "md5_digest": "ca3fb514be92522811ec41f0e6860c24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10143, "upload_time": "2020-02-03T09:44:33", "upload_time_iso_8601": "2020-02-03T09:44:33.022017Z", "url": "https://files.pythonhosted.org/packages/d7/07/9b8565df6d2910c8be70a01fe5b2a7bf5cd63e63f113e2c755abb4169acf/Starlette-WTF-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b031f5d9eb2b1b7167de6d23286ec29b", "sha256": "4ea290da27f5f64941ff9e3ca9a9eeb3e26059276c74595c39e551a3f5db1094"}, "downloads": -1, "filename": "Starlette-WTF-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b031f5d9eb2b1b7167de6d23286ec29b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10135, "upload_time": "2020-02-03T10:05:33", "upload_time_iso_8601": "2020-02-03T10:05:33.979274Z", "url": "https://files.pythonhosted.org/packages/0d/71/b3c0b94dd77274421b90825de1716b956963d6cff938c246c545723849e4/Starlette-WTF-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0a1c7ce8f5f06e87283e507fad40af0b", "sha256": "8f6348b0590309bed278e559b9c633f49b0fe01688b5ea2e0166a84e1d7cb3cd"}, "downloads": -1, "filename": "Starlette-WTF-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0a1c7ce8f5f06e87283e507fad40af0b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10144, "upload_time": "2020-02-03T10:07:52", "upload_time_iso_8601": "2020-02-03T10:07:52.174660Z", "url": "https://files.pythonhosted.org/packages/79/1a/4998336f584f00f6ec8683aac9e0938bb0d36df55b8f5c65513c9042625c/Starlette-WTF-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3af547602bfdf3d54e915dced57deba5", "sha256": "b3b71d4e1cdc8281667b884e61972bcb70cfd6e09f7a9a7f2f2cfa5999f90920"}, "downloads": -1, "filename": "Starlette-WTF-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3af547602bfdf3d54e915dced57deba5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10336, "upload_time": "2020-02-03T13:34:27", "upload_time_iso_8601": "2020-02-03T13:34:27.515096Z", "url": "https://files.pythonhosted.org/packages/17/cf/e9b76c680eaebcb1e075b7c642bb96fe384931d446ea4cbcb55b9726370c/Starlette-WTF-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "9d21ec0d4a7c10b317219eed2f140713", "sha256": "7ad1cfd31e22a91860ef10ddf84030d37458eec27a41fdc9978c78becd33ca64"}, "downloads": -1, "filename": "Starlette-WTF-0.2.2.tar.gz", "has_sig": false, "md5_digest": "9d21ec0d4a7c10b317219eed2f140713", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10397, "upload_time": "2020-02-03T14:14:36", "upload_time_iso_8601": "2020-02-03T14:14:36.446790Z", "url": "https://files.pythonhosted.org/packages/04/b5/262a38f426eb7d2ce560715cd037ea5143eecf0433edc3fe362166733e46/Starlette-WTF-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d21ec0d4a7c10b317219eed2f140713", "sha256": "7ad1cfd31e22a91860ef10ddf84030d37458eec27a41fdc9978c78becd33ca64"}, "downloads": -1, "filename": "Starlette-WTF-0.2.2.tar.gz", "has_sig": false, "md5_digest": "9d21ec0d4a7c10b317219eed2f140713", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10397, "upload_time": "2020-02-03T14:14:36", "upload_time_iso_8601": "2020-02-03T14:14:36.446790Z", "url": "https://files.pythonhosted.org/packages/04/b5/262a38f426eb7d2ce560715cd037ea5143eecf0433edc3fe362166733e46/Starlette-WTF-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:36 2020"}