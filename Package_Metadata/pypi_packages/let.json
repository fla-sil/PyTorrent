{"info": {"author": "Taylor Marks", "author_email": "taylor@marksfam.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.3", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "let\n===\n*Assign variables wherever, whenever you want.*\n\nInstallation\n------------\nInstall via pip:\n\n.. code-block:: bash\n\n    $ pip install let\n\nDone.\n\nIf you insist on the (slightly) harder way of installing, from source,\nyou know how to do it already and don't need my help.\n\nI might later upload the source to:\nhttps://github.com/TaylorSMarks/let\n\nQuick Start\n-----------\nOnce you've installed, you can really quickly verified that it works with just this:\n\n.. code-block:: python\n\n    >>> from let import let\n    >>> if let(count = len('Hello World!')):\n    ...     print(count)\n    12\n\nDocumentation\n-------------\nIn C, Java, and many other languages, it's possible to assign variables inside\nof if or while condition statements. This is useful in allowing you to concisely\nboth assign the value, and check whether a condition is met.\n\nThis ability doesn't exist in Python, because of the thought that when people\nwrite something like:\n\n.. code-block:: python\n\n    if row = db.fetch_results():\n        ...\n\nThey may have actually meant:\n\n.. code-block:: python\n\n    if row == db.fetch_results():\n        ...\n\nPersonally, I have never made this mistake. It seems far more like a theoretical\nmistake that could plausibly happen than one that actually happens and warrants\nremoving features, as was chosen in Python.\n\nAnyways, the let function in this module gives you something very close to that\nability in other languages. A few examples:\n\n.. code-block:: python\n\n    if let(name = longInstanceName.longAttributeName):\n        ...\n\n    # Yes, db.fetch_results() should just return a generator. No, it doesn't.\n    while let(results = db.fetch_results()):\n        ...\n\n    if let(count = len(nameValuePair)) != 1:\n        raise Exception('Bad amount: {}'.format(count))\n\nCopyright\n---------\nThis software is Copyright (c) 2016 Taylor Marks <taylor@marksfam.com>.\n\nSee the bundled LICENSE file for more information.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TaylorSMarks/let", "keywords": "let assign assignment var variable conditional if while return", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "let", "package_url": "https://pypi.org/project/let/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/let/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/TaylorSMarks/let"}, "release_url": "https://pypi.org/project/let/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Assign variables wherever, whenever you want.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Assign variables wherever, whenever you want.</em></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install via pip:</p>\n<pre>$ pip install <span class=\"nb\">let</span>\n</pre>\n<p>Done.</p>\n<p>If you insist on the (slightly) harder way of installing, from source,\nyou know how to do it already and don\u2019t need my help.</p>\n<p>I might later upload the source to:\n<a href=\"https://github.com/TaylorSMarks/let\" rel=\"nofollow\">https://github.com/TaylorSMarks/let</a></p>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<p>Once you\u2019ve installed, you can really quickly verified that it works with just this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">let</span> <span class=\"kn\">import</span> <span class=\"n\">let</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">if</span> <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"s1\">'Hello World!'</span><span class=\"p\">)):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span>\n<span class=\"mi\">12</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>In C, Java, and many other languages, it\u2019s possible to assign variables inside\nof if or while condition statements. This is useful in allowing you to concisely\nboth assign the value, and check whether a condition is met.</p>\n<p>This ability doesn\u2019t exist in Python, because of the thought that when people\nwrite something like:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">fetch_results</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>They may have actually meant:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">row</span> <span class=\"o\">==</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">fetch_results</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Personally, I have never made this mistake. It seems far more like a theoretical\nmistake that could plausibly happen than one that actually happens and warrants\nremoving features, as was chosen in Python.</p>\n<p>Anyways, the let function in this module gives you something very close to that\nability in other languages. A few examples:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">longInstanceName</span><span class=\"o\">.</span><span class=\"n\">longAttributeName</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># Yes, db.fetch_results() should just return a generator. No, it doesn't.</span>\n<span class=\"k\">while</span> <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">fetch_results</span><span class=\"p\">()):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">if</span> <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nameValuePair</span><span class=\"p\">))</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">'Bad amount: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"copyright\">\n<h2>Copyright</h2>\n<p>This software is Copyright (c) 2016 Taylor Marks &lt;<a href=\"mailto:taylor%40marksfam.com\">taylor<span>@</span>marksfam<span>.</span>com</a>&gt;.</p>\n<p>See the bundled LICENSE file for more information.</p>\n</div>\n\n          </div>"}, "last_serial": 1977338, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1d73cc545f01cb6a460b5e492097256b", "sha256": "09d9ffb48472902c3589c7a324801a108dffca1174cb7b9f944737b08d284b9f"}, "downloads": -1, "filename": "let-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1d73cc545f01cb6a460b5e492097256b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3515, "upload_time": "2016-02-07T21:10:54", "upload_time_iso_8601": "2016-02-07T21:10:54.079031Z", "url": "https://files.pythonhosted.org/packages/d8/2c/72efff5f602fbda34000189a8212d64e721c35943d3ba822ad123665ef43/let-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e9c02496172c3614feb7a957b0372420", "sha256": "e9908eb4c4cddd6c58b3ed7346e1b26fb37da95d0071f04615f1d662495c732b"}, "downloads": -1, "filename": "let-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e9c02496172c3614feb7a957b0372420", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3783, "upload_time": "2016-02-26T03:08:46", "upload_time_iso_8601": "2016-02-26T03:08:46.218478Z", "url": "https://files.pythonhosted.org/packages/9c/65/a89c6733476523c85c17c717d28bfd333e9b00c0cd71019d342e046d5179/let-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e9c02496172c3614feb7a957b0372420", "sha256": "e9908eb4c4cddd6c58b3ed7346e1b26fb37da95d0071f04615f1d662495c732b"}, "downloads": -1, "filename": "let-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e9c02496172c3614feb7a957b0372420", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3783, "upload_time": "2016-02-26T03:08:46", "upload_time_iso_8601": "2016-02-26T03:08:46.218478Z", "url": "https://files.pythonhosted.org/packages/9c/65/a89c6733476523c85c17c717d28bfd333e9b00c0cd71019d342e046d5179/let-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:55 2020"}