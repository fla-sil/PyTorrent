{"info": {"author": "Wichert Akkerman - Simplon", "author_email": "wichert@wiggy.net", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\n============\n\n*bicop* is a python library to process ISC bind-style configuration files.\nThese are nested structures that look like this::\n\n    datasource1 {\n        server     \"server1.your.domain\";\n        username   \"client\";\n        password   \"secret\";\n        extra {\n            isolation \"full\";\n        };\n    };\n\n    tables {\n        \"users\";\n        \"groups\";\n    };\n\n\nParsing\n=======\n\nParsing is trivial using the ''parse'' method::\n\n   from bicop import parse\n   parse(\"/etc/bind/named.conf\")\n\nThis returns a standard python dictionary with all data read from the\nfile. Entries in the dictionary can be other dictionaries or lists.\n\n\nMerging\n=======\n\nA common need is to be able to support default values for configurations\nor to handle configuration at multiple levels with priorities, for example\na uer configuration overriding entries from the system-wide configuration.\nTo support this bicop has a utility method that can merge dictionaries. You\ncan use it like this::\n\n  from bicop import parse\n  from bicop import merge\n\n  configuration=parse(\"/etc/application.conf\")\n  userconfig=parse(\"/home/user/.application\")\n  merge(configuration, userconfig, overwrite=True)\n\n\nEasy access for nested dictionaries\n===================================\n\nConfiguration files in this format can have deeply nested structures. Accessing\nthose using standard python dictionaries is a slightly cumbersone. To make\nthis a bit more pleasant on the eyes you can use the NestedDict wrapper::\n\n  from bicop import parse\n  from bicop import NestedDict\n\n  configuration=NestedDict(parse(\"/etc/application.conf\"))\n  print \"Your signature is: %s\" % configuration[\"profiles/user/signature\"]\n\n\nChanges\n=======\n\n1.0rc2 - August 2, 20009\n------------------------\n\n* Add an optional dictclass parameter to the parse method. This can be\n  used to use alternative dictionary types, most typically ordered\n  dictionaries.\n\n* Drop dependency on nose to run tests.\n\n* Use ez_setup to automatically install setuptools if needed.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "configparser configuration parser ISC bind", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "bicop", "package_url": "https://pypi.org/project/bicop/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bicop/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/bicop/1.0rc2/", "requires_dist": null, "requires_python": null, "summary": "Read bind-style configuration files", "version": "1.0rc2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p><em>bicop</em> is a python library to process ISC bind-style configuration files.\nThese are nested structures that look like this:</p>\n<pre>datasource1 {\n    server     \"server1.your.domain\";\n    username   \"client\";\n    password   \"secret\";\n    extra {\n        isolation \"full\";\n    };\n};\n\ntables {\n    \"users\";\n    \"groups\";\n};\n</pre>\n</div>\n<div id=\"parsing\">\n<h2>Parsing</h2>\n<p>Parsing is trivial using the \u2018\u2019parse\u2019\u2019 method:</p>\n<pre>from bicop import parse\nparse(\"/etc/bind/named.conf\")\n</pre>\n<p>This returns a standard python dictionary with all data read from the\nfile. Entries in the dictionary can be other dictionaries or lists.</p>\n</div>\n<div id=\"merging\">\n<h2>Merging</h2>\n<p>A common need is to be able to support default values for configurations\nor to handle configuration at multiple levels with priorities, for example\na uer configuration overriding entries from the system-wide configuration.\nTo support this bicop has a utility method that can merge dictionaries. You\ncan use it like this:</p>\n<pre>from bicop import parse\nfrom bicop import merge\n\nconfiguration=parse(\"/etc/application.conf\")\nuserconfig=parse(\"/home/user/.application\")\nmerge(configuration, userconfig, overwrite=True)\n</pre>\n</div>\n<div id=\"easy-access-for-nested-dictionaries\">\n<h2>Easy access for nested dictionaries</h2>\n<p>Configuration files in this format can have deeply nested structures. Accessing\nthose using standard python dictionaries is a slightly cumbersone. To make\nthis a bit more pleasant on the eyes you can use the NestedDict wrapper:</p>\n<pre>from bicop import parse\nfrom bicop import NestedDict\n\nconfiguration=NestedDict(parse(\"/etc/application.conf\"))\nprint \"Your signature is: %s\" % configuration[\"profiles/user/signature\"]\n</pre>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<h2 id=\"rc2-august-2-20009\"><span class=\"section-subtitle\">1.0rc2 - August 2, 20009</span></h2>\n<ul>\n<li>Add an optional dictclass parameter to the parse method. This can be\nused to use alternative dictionary types, most typically ordered\ndictionaries.</li>\n<li>Drop dependency on nose to run tests.</li>\n<li>Use ez_setup to automatically install setuptools if needed.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 635861, "releases": {"1.0rc1": [{"comment_text": "", "digests": {"md5": "19997c8b47324c8bd4e3339a8e277af8", "sha256": "2e197a11d966e5b4ef07c032dc2680a05b1541e67f831b06d881e2e3bf6de9c3"}, "downloads": -1, "filename": "bicop-1.0rc1-py2.4.egg", "has_sig": false, "md5_digest": "19997c8b47324c8bd4e3339a8e277af8", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 16321, "upload_time": "2007-11-16T22:29:22", "upload_time_iso_8601": "2007-11-16T22:29:22Z", "url": "https://files.pythonhosted.org/packages/bc/d6/9759ca1044b1274af56ad42badd0d0ab4af2564b0b6e9d879909129bbb6e/bicop-1.0rc1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "db60bde9a5a9b15bc4c4cfd6c5f7428c", "sha256": "884fe1e808b667f249a23b50ce6a7cfc46fc04f1735cfa2583fa861ee7af3974"}, "downloads": -1, "filename": "bicop-1.0rc1.tar.gz", "has_sig": false, "md5_digest": "db60bde9a5a9b15bc4c4cfd6c5f7428c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5901, "upload_time": "2007-11-16T22:29:21", "upload_time_iso_8601": "2007-11-16T22:29:21Z", "url": "https://files.pythonhosted.org/packages/7f/c8/06ae4866938eedd07e91c12a6d99a0fc06b0980b42cb5107614e619abd0e/bicop-1.0rc1.tar.gz", "yanked": false}], "1.0rc2": [{"comment_text": "", "digests": {"md5": "0bde05ca32cadb3739a103210b879e82", "sha256": "6969171cf7f064738e13f6b045d24e4b54100c1d1e4e3fbee9bd89f8c069715e"}, "downloads": -1, "filename": "bicop-1.0rc2.tar.gz", "has_sig": false, "md5_digest": "0bde05ca32cadb3739a103210b879e82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9605, "upload_time": "2009-08-02T23:08:06", "upload_time_iso_8601": "2009-08-02T23:08:06.822164Z", "url": "https://files.pythonhosted.org/packages/72/90/b7cf47a8a19eaeab838ce180f8c978ec7a49dbdeafd61bc8a2a52b8de542/bicop-1.0rc2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0bde05ca32cadb3739a103210b879e82", "sha256": "6969171cf7f064738e13f6b045d24e4b54100c1d1e4e3fbee9bd89f8c069715e"}, "downloads": -1, "filename": "bicop-1.0rc2.tar.gz", "has_sig": false, "md5_digest": "0bde05ca32cadb3739a103210b879e82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9605, "upload_time": "2009-08-02T23:08:06", "upload_time_iso_8601": "2009-08-02T23:08:06.822164Z", "url": "https://files.pythonhosted.org/packages/72/90/b7cf47a8a19eaeab838ce180f8c978ec7a49dbdeafd61bc8a2a52b8de542/bicop-1.0rc2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:36 2020"}