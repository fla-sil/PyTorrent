{"info": {"author": "Mikael Koli", "author_email": "koli.mikael@op.fi", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# JuBox\n[![Build Status](https://travis-ci.com/Miksus/jubox.svg?branch=master)](https://travis-ci.com/Miksus/jubox)\n\n> Programmatical Jupyter Notebook API for humans\n\n> Jupyter Notebook extension, Python 3, Easy to use\n\n\n---\n\n![Example](docs/img/example.png \"Jubox image\")\n\n## What?\n- Pythonic approach to load, modify, run and save Jupyter Notebooks in Python code\n- This enables to quickly and easily create:\n    - Parametrized notebooks\n    - Version controlable notebooks directly from inserted code snippets, Python files or even straight from Python functions and classes.\n    - Notebooks with code generated markdown\n\n## Installation\n\n- Pip install from pip\n```shell\npip install jubox\n```\n\n- Clone the source code and pip install:\n```shell\ngit clone https://github.com/Miksus/jubox.git\ncd jubox\npip install -e .\n```\n\n## Example\n\nSee [demo](docs/Demo.ipynb) or [cook book](docs/cookbook/README.md) for detailed examples. \n\n```python\nfrom jubox import JupyterNotebook, CodeCell\n\n# Load jupyter Notebook\nnb = JupyterNotebook(\"my_file.ipynb\")\nnb.load()\n\n# Run the notebook\n# by making a copy (output is lost if raised exception)\nnb_runned = nb()\n\n# or in place (maintains exceptions in the file)\nnb(inplace=True)\n\n\n# save the file to the original file\nnb.save()\n# or to new file\nnb.to_ipynb(\"run_notebook.ipynb\")\n\n\n# Get cells with specific tags\nparam_cells = nb.get_cells(tags=[\"parametrized\"])\n\n# Rewrite the first tagged cell with dict of parameters\nnew_cell = CodeCell.from_variable_dict(run_date=\"2020-01-01\", category=\"blue\")\nparam_cells[0].overwrite(new_cell)\n\n```\n\n\n---\n\n## Features\n- Convenient object oriented API for Jupyter Notebooks. \n- Load, save and run notebooks and get cells containing \n- Render Jupyter Notebooks in a Jupyter Notebook!\n\n## Test\nPytest was chosen as testing suites. Tests are found in test directory inside the source. \n\n## Test\nPytest was chosen as testing suites. Tests are found in test directory inside the source. \n\n\n---\n\n## Author\n\n* **Mikael Koli** - [Miksus](https://github.com/Miksus) - koli.mikael@gmail.com\n\n---\n## License\n\n- **[MIT license](http://opensource.org/licenses/mit-license.php)**\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "JuBox", "package_url": "https://pypi.org/project/JuBox/", "platform": "", "project_url": "https://pypi.org/project/JuBox/", "project_urls": null, "release_url": "https://pypi.org/project/JuBox/0.3.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Object oriented interface to Jupyter Notebook", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>JuBox</h1>\n<p><a href=\"https://travis-ci.com/Miksus/jubox\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7bb1f643686949716787c88c9043295c9c374cf8/68747470733a2f2f7472617669732d63692e636f6d2f4d696b7375732f6a75626f782e7376673f6272616e63683d6d6173746572\"></a></p>\n<blockquote>\n<p>Programmatical Jupyter Notebook API for humans</p>\n</blockquote>\n<blockquote>\n<p>Jupyter Notebook extension, Python 3, Easy to use</p>\n</blockquote>\n<hr>\n<p><img alt=\"Example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ecfc0c06679b299f8f9e5b553c2af202239a8eeb/646f63732f696d672f6578616d706c652e706e67\"></p>\n<h2>What?</h2>\n<ul>\n<li>Pythonic approach to load, modify, run and save Jupyter Notebooks in Python code</li>\n<li>This enables to quickly and easily create:\n<ul>\n<li>Parametrized notebooks</li>\n<li>Version controlable notebooks directly from inserted code snippets, Python files or even straight from Python functions and classes.</li>\n<li>Notebooks with code generated markdown</li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>Pip install from pip</li>\n</ul>\n<pre>pip install jubox\n</pre>\n<ul>\n<li>Clone the source code and pip install:</li>\n</ul>\n<pre>git clone https://github.com/Miksus/jubox.git\n<span class=\"nb\">cd</span> jubox\npip install -e .\n</pre>\n<h2>Example</h2>\n<p>See <a href=\"docs/Demo.ipynb\" rel=\"nofollow\">demo</a> or <a href=\"docs/cookbook/README.md\" rel=\"nofollow\">cook book</a> for detailed examples.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jubox</span> <span class=\"kn\">import</span> <span class=\"n\">JupyterNotebook</span><span class=\"p\">,</span> <span class=\"n\">CodeCell</span>\n\n<span class=\"c1\"># Load jupyter Notebook</span>\n<span class=\"n\">nb</span> <span class=\"o\">=</span> <span class=\"n\">JupyterNotebook</span><span class=\"p\">(</span><span class=\"s2\">\"my_file.ipynb\"</span><span class=\"p\">)</span>\n<span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Run the notebook</span>\n<span class=\"c1\"># by making a copy (output is lost if raised exception)</span>\n<span class=\"n\">nb_runned</span> <span class=\"o\">=</span> <span class=\"n\">nb</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># or in place (maintains exceptions in the file)</span>\n<span class=\"n\">nb</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># save the file to the original file</span>\n<span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"c1\"># or to new file</span>\n<span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">to_ipynb</span><span class=\"p\">(</span><span class=\"s2\">\"run_notebook.ipynb\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Get cells with specific tags</span>\n<span class=\"n\">param_cells</span> <span class=\"o\">=</span> <span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">get_cells</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"parametrized\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Rewrite the first tagged cell with dict of parameters</span>\n<span class=\"n\">new_cell</span> <span class=\"o\">=</span> <span class=\"n\">CodeCell</span><span class=\"o\">.</span><span class=\"n\">from_variable_dict</span><span class=\"p\">(</span><span class=\"n\">run_date</span><span class=\"o\">=</span><span class=\"s2\">\"2020-01-01\"</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">\"blue\"</span><span class=\"p\">)</span>\n<span class=\"n\">param_cells</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">overwrite</span><span class=\"p\">(</span><span class=\"n\">new_cell</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h2>Features</h2>\n<ul>\n<li>Convenient object oriented API for Jupyter Notebooks.</li>\n<li>Load, save and run notebooks and get cells containing</li>\n<li>Render Jupyter Notebooks in a Jupyter Notebook!</li>\n</ul>\n<h2>Test</h2>\n<p>Pytest was chosen as testing suites. Tests are found in test directory inside the source.</p>\n<h2>Test</h2>\n<p>Pytest was chosen as testing suites. Tests are found in test directory inside the source.</p>\n<hr>\n<h2>Author</h2>\n<ul>\n<li><strong>Mikael Koli</strong> - <a href=\"https://github.com/Miksus\" rel=\"nofollow\">Miksus</a> - <a href=\"mailto:koli.mikael@gmail.com\">koli.mikael@gmail.com</a></li>\n</ul>\n<hr>\n<h2>License</h2>\n<ul>\n<li><strong><a href=\"http://opensource.org/licenses/mit-license.php\" rel=\"nofollow\">MIT license</a></strong></li>\n</ul>\n\n          </div>"}, "last_serial": 7099686, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "3c275db0a14fc7fabd37dfe935a92f40", "sha256": "61c98dd8d61f43bc38697b3f7c432aa961f36fb846e5c5279d3e530f1b3b8f1d"}, "downloads": -1, "filename": "JuBox-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3c275db0a14fc7fabd37dfe935a92f40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 34934, "upload_time": "2020-04-25T14:10:34", "upload_time_iso_8601": "2020-04-25T14:10:34.103270Z", "url": "https://files.pythonhosted.org/packages/ad/d5/c3c39a46f4577ff73454097aa0f8c4578ad30b8f6ff0b36d3afdcc61593a/JuBox-0.3.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c275db0a14fc7fabd37dfe935a92f40", "sha256": "61c98dd8d61f43bc38697b3f7c432aa961f36fb846e5c5279d3e530f1b3b8f1d"}, "downloads": -1, "filename": "JuBox-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3c275db0a14fc7fabd37dfe935a92f40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 34934, "upload_time": "2020-04-25T14:10:34", "upload_time_iso_8601": "2020-04-25T14:10:34.103270Z", "url": "https://files.pythonhosted.org/packages/ad/d5/c3c39a46f4577ff73454097aa0f8c4578ad30b8f6ff0b36d3afdcc61593a/JuBox-0.3.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:28 2020"}