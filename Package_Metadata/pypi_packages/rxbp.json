{"info": {"author": "Michael Schneeberger", "author_email": "michael.schneeb@outlook.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "\nRxPy back-pressure extension\n============================\n\n![Build Status](https://github.com/MichaelSchneeberger/rxbackpressure/workflows/build/badge.svg)\n[![Coverage Status](https://coveralls.io/repos/github/MichaelSchneeberger/rxbackpressure/badge.svg?branch=master)](https://coveralls.io/github/MichaelSchneeberger/rxbackpressure?branch=master)\n![Package Publish Status](https://github.com/MichaelSchneeberger/rxbackpressure/workflows/pypi/badge.svg)\n\n*rxbp* is an extension to the [RxPY](https://github.com/ReactiveX/RxPY) python \nlibrary, that integrates back-pressure into the *Observable* pattern\nin form of *Flowables*.\n\nThe *rxbp* library is inspired by [Monix](https://github.com/monix/monix), \nand **has still an experimental status**. \n\nInstallation\n------------\n\nrxbp v3.x runs on Python 3.7 or above. To install rxbp alpha version:\n\n```\npip3 install --pre rxbp\n```\n\nExample\n-------\n\n*rxbackpressure* has a similar syntax as RxPY.\n\n```python\n# example taken from RxPY\nimport rxbp\n\nsource = rxbp.from_([\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\"])\n\ncomposed = source.pipe(\n    rxbp.op.map(lambda s: len(s)),\n    rxbp.op.filter(lambda i: i >= 5)\n)\ncomposed.subscribe(lambda value: print(f\"Received {value}\"))\n```\n\nIntegrate RxPY\n--------------\n\nA RxPY Observable can be converted to a *Flowable* by using the `rxbp.from_rx` function.\nEquivalently, a *Flowable* can be converted to an RxPY Observable \nby using the `to_rx` function.\n\n```python\nimport rx\nimport rxbp\n\nrx_source = rx.of(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n\n# convert Observable to Flowable\nsource = rxbp.from_rx(rx_source)\n\ncomposed = source.pipe(\n    rxbp.op.map(lambda s: len(s)),\n    rxbp.op.filter(lambda i: i >= 5)\n)\n\n# convert Flowable to Observable\ncomposed.to_rx().subscribe(lambda value: print(f\"Received {value}\"))\n```\n\nDifferences from RxPY\n---------------------\n\n### Flowable\n\nSimilar to an RxPY Observable, a *Flowable* implements a `subscribe` method,\nwhich is a mechanism that allows to describe a data flow from its source to \na sink. The description is done with *rxbp* operators exposed by `rxbp.op`.\n\nLike in functional programming, usings *rxbp* operators \ndoes not create any mutable states, but rather concatenates functions \nwithout calling them yet. We first describe what we intend to \ndo in form of a plan and then execute the plan. A *Flowable* is \nexecuted by calling its `subscribe` method. This will start a chain \nreaction, where each downsream *Flowables* calls the `subscribe` \nmethod of its upstream *Flowable* until\nthe sources start emitting the data. Once a *Flowable* is subscribed, we\nallow it to have internal mutable states.\n\nCompared to RxPY Observables, however, a *Flowable* uses `Observers` that are\nable to back-pressure on an `on_next` method call. This has the effect that\ncertain operators behave differently from the ones in RxPY.\n\n### MultiCast (experimental)\n\nA *MultiCast* is used when a *Flowable* emits elements to more than one `Observer`, \nand can be though of a nested *Flowable* of type `Observable[T[Flowable]]`.\n\nThe syntax to *multi-cast* a Flowable is quite different from RxPY and there are good\nreasons for that. In RxPY, there is an operator called `share`, that turns an *Observable* \ninto a so-called hot *Observable* allowing multiple downstream subscribers to receive the \nsame elements. The first `subscribe` call has the side-effect that subsequent `subscribe` \ncalls will not propagate upstream, but register themselves to the hot *Observable*.\nThe following example illustrates the side-effect that happens when a shared *Observable*\nis subscribed for the first time.\n\n``` python\nimport rx\nfrom rx import operators as op\n\no = rx.range(4).pipe(\n    op.share(),\n)\n\no.subscribe(print)\no.subscribe(print)      # the second time no elements are sent\n```\n\nThe previous code outputs:\n\n```\n0\n1\n2\n3\n```\n\nIn *rxbp*, however, the elements of a *Flowable* sequence can only be multi-casted,\nif the *Flowable* is nested inside a *MultiCast*. This can be done with the \n`rxbp.multicast.return_flowable` function. `return_flowable` takes a *Flowable*, a\nlist of *Flowables* or a dictionary of *Flowables* and creates a *MultiCast* that\nemits the nested *Flowables*. Similarly to a *Flowable*, a *MultiCast* implements a `pipe`\nmethod that takes a sequence of *MultiCast* operators, which are exposed by \n`rxbp.multicast.op`.\n\n```python\nimport rxbp\n\nf = rxbp.multicast.return_flowable(rxbp.range(10)).pipe(\n    rxbp.multicast.op.map(lambda base: base.pipe(\n        rxbp.op.zip(base.pipe(\n            rxbp.op.map(lambda v: v + 1),\n            rxbp.op.filter(lambda v: v % 2 == 0)),\n        ),\n    )),\n).to_flowable()\nf.subscribe(print)\n```\n\nThe previous code outputs:\n\n```\n(0, 2)\n(1, 4)\n(2, 6)\n(3, 8)\n(4, 10)\n```\n\n\n### match operator (experimental)\n\nThe `match` operator tries to match two *Flowables*, and raises an exception otherwise.\nTwo *Flowables* match if they have the same base or if there exists a mapping that maps \none base to the base of the other *Flowable*. These mappings propagated internally when \nsubscribing to a *Flowable*.\n\nIf two *Flowables* match, the elements of each *Flowable* sequence are filtered and\ndublicated (if necessary) first and then zipped together. The following example creates\ntwo *Flowables* where one is having base *10* and the other contains a mapping from\nbase *10* to it's own base *None* (base *None* refers to a unknown *Flowable* sequence). \nThe `match` operator applies the mapping to the Flowable of base *10* such that every\nsecond element is selected due to `v % 2`.\n\n\n```python\nimport rxbp\n\nrxbp.from_range(10).pipe(\n    rxbp.op.match(rxbp.from_range(10).pipe(\n        rxbp.op.filter(lambda v: v % 2 == 0)),\n    )\n).subscribe(print)\n```\n\nThe previous code outputs:\n\n```\n(1, 1)\n(3, 3)\n(5, 5)\n(7, 7)\n(9, 9)\n```\n\nWhen to use a Flowable, when RxPY Observable?\n-----------------------------------------\n\nA *Flowable* is used when some asynchronous stage cannot process the data fast enough, \nor needs to synchronize the data with some other event. Let's take the `zip` operator \nas an example. It receives elements from two or more sources and emits a tuple once it \nreceived one element from each source. But what happens if one source emits the \nelements before the other does? Without back-pressure, the `zip` operator has to buffer \nthe elements from the eager source until it receives the elements from the other source.\nThis might be ok depending on how many elements need to be buffered. But often it is too\nrisky to buffer elements somewhere in our stream as it potentially leads to an \nout of memory exception. The back-pressure capability prevents buffers to grow by holding \nthe data back until it is actually needed.\n\nThe advantage of a RxPY Observable is that it is generally faster and more lightweight.\n\n\nFlowable\n--------\n\n### Create a Flowable\n\n- `empty` - create a *Flowable* emitting no elements\n- `from_` - create a *Flowable* that emits each element of an iterable\n- `from_iterable` - see `from_`\n- `from_list` - create a *Flowable* that emits each element of a list\n- `from_range` - create a *Flowable* that emits elements defined by the range\n- `from_rx` - wrap a rx.Observable and exposes it as a *Flowable*, relaying signals in a backpressure-aware manner.\n- `return_flowable` - create a *Flowable* that emits a single element\n\n### Transforming operators\n\n- `filter` - emit only those elements for which the given predicate holds\n- `first` - emit the first element only\n- `flat_map` - apply a function to each item emitted by the source and \nflattens the result\n- `map` - map each element emitted by the source by applying the given \nfunction\n- `map_to_iterator` - create a *Flowable* that maps each element emitted \nby the source to an iterator and emits each element of these iterators.\n- `pairwise` - create a *Flowable* that emits a pair for each consecutive \npairs of elements in the *Flowable* sequence\n- `reduce` - Apply an accumulator function over a Flowable sequence and \nemits a single element\n- `repeat_first` - Return a *Flowable* that repeats the first element it \nreceives from the source forever (until disposed).\n- `scan` - apply an accumulator function over a *Flowable* sequence and \nreturns each intermediate result.\n- `to_list` - Create a new *Flowable* that collects the elements from \nthe source sequence, and emits a single element of type List.\n- `zip_with_index` - zip each item emitted by the source with the \nenumerated index\n\n### Combining operators\n\n- `concat` - Concatentates *Flowable* sequences together by back-pressuring \nthe tail *Flowables* until the current *Flowable* has completed\n- `controlled_zip` - create a new *Flowable* from two *Flowables* by combining \ntheir elements in pairs. Which element gets paired with an element from \nthe other *Flowable* is determined by two functions called `request_left` and \n`request_right`\n- `match` - create a new *Flowable* from two *Flowables* by first filtering and \nduplicating (if necessary) the elements of each *Flowable* and zip the resulting \n*Flowable* sequences together\n- `merge` - merge the elements of the *Flowable* sequences into a single *Flowable*\n- `zip` - Create a new *Flowable* from two *Flowables* by combining their \nitem in pairs in a strict sequence\n\n### Other operators\n\n- `buffer` - buffer the element emitted by the source without back-pressure until \nthe buffer is full\n- `debug` - print debug messages to the console\n- `execute_on` - inject new scheduler that is used to subscribe the *Flowable*\n- `observe_on` - schedule elements emitted by the source on a dedicated scheduler\n- `set_base` - overwrite the base of the current Flowable sequence\n- `share` - multi-cast the elements of the *Flowable* to possibly \nmultiple subscribers\n\n### Create a rx Observable\n\n- `to_rx` - create a rx Observable from a Observable\n\nMultiCast (experimental)\n------------------------\n\n### Create a MultiCast\n\n- `empty` - create a *MultiCast* emitting no elements\n- `return_flowable` - turn zero or more *Flowables* into multi-cast *Flowables* \nemitted as a single element inside a  *MultiCast*\n- `return_` - create a *MultiCast* emitting a single element\n- `from_iterable` - create a *MultiCast* from an iterable\n- `from_rx_observable` - create a *MultiCast* from an *rx.Observable*\n- `from_flowable` - (similar to `from_rx_observable`) create a *MultiCast* \nthat emits each element received by the Flowable\n\n### Transforming operators\n\n- `default_if_empty` - either emits the elements of the source or a default element\n- `filter` - emit only those *MultiCast* for which the given predicate hold\n- `flat_map` - apply a function to each item emitted by the source and \nflattens the result\n- `lift` - lift the current `MultiCast[T1]` to a `MultiCast[T2[MultiCast[T1]]]`.\n- `map` - map each element emitted by the source by applying the given \nfunction\n- `merge` - merge the elements of the *MultiCast* sequences into a single *MultiCast*\n\n### Transforming operators (Flowables)\n\n- `join_flowables` - zip one or more *Multicasts* (each emitting a single *Flowable*)\n to a *Multicast* emitting a single element (tuple of *Flowables*)\n- `loop_flowables` - create a loop inside *Flowables*\n- `collect_flowables` - create a *Multicast* that emits a single element containing \nthe reduced *Flowables* of the first element sent by the source\n\n### Other operators \n\n- `debug` - print debug messages to the console\n- `observe_on` - schedule elements emitted by the source on a dedicated scheduler\n- `share` - multi-cast the elements of the source to possibly \nmultiple subscribers\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MichaelSchneeberger/rxbackpressure", "keywords": "rx reactive extension back-pressure backpressure flowable multicast", "license": "", "maintainer": "", "maintainer_email": "", "name": "rxbp", "package_url": "https://pypi.org/project/rxbp/", "platform": "", "project_url": "https://pypi.org/project/rxbp/", "project_urls": {"Homepage": "https://github.com/MichaelSchneeberger/rxbackpressure"}, "release_url": "https://pypi.org/project/rxbp/3.0.0a9/", "requires_dist": ["rx"], "requires_python": ">=3.7", "summary": "An RxPY extension with back-pressure", "version": "3.0.0a9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RxPy back-pressure extension</h1>\n<p><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/575c31d7e17163f70cc7a1ee575197f3a04ea0fe/68747470733a2f2f6769746875622e636f6d2f4d69636861656c5363686e65656265726765722f72786261636b70726573737572652f776f726b666c6f77732f6275696c642f62616467652e737667\">\n<a href=\"https://coveralls.io/github/MichaelSchneeberger/rxbackpressure?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b75b488a7da7c98ce4b07e80a7aa406872a0d81/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4d69636861656c5363686e65656265726765722f72786261636b70726573737572652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"Package Publish Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1115330a242ce02fc3de999e5dfd378a9acd3cb/68747470733a2f2f6769746875622e636f6d2f4d69636861656c5363686e65656265726765722f72786261636b70726573737572652f776f726b666c6f77732f707970692f62616467652e737667\"></p>\n<p><em>rxbp</em> is an extension to the <a href=\"https://github.com/ReactiveX/RxPY\" rel=\"nofollow\">RxPY</a> python\nlibrary, that integrates back-pressure into the <em>Observable</em> pattern\nin form of <em>Flowables</em>.</p>\n<p>The <em>rxbp</em> library is inspired by <a href=\"https://github.com/monix/monix\" rel=\"nofollow\">Monix</a>,\nand <strong>has still an experimental status</strong>.</p>\n<h2>Installation</h2>\n<p>rxbp v3.x runs on Python 3.7 or above. To install rxbp alpha version:</p>\n<pre><code>pip3 install --pre rxbp\n</code></pre>\n<h2>Example</h2>\n<p><em>rxbackpressure</em> has a similar syntax as RxPY.</p>\n<pre><span class=\"c1\"># example taken from RxPY</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rxbp</span>\n\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">from_</span><span class=\"p\">([</span><span class=\"s2\">\"Alpha\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Beta\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Gamma\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Delta\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Epsilon\"</span><span class=\"p\">])</span>\n\n<span class=\"n\">composed</span> <span class=\"o\">=</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span>\n    <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)),</span>\n    <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"n\">composed</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Received </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n</pre>\n<h2>Integrate RxPY</h2>\n<p>A RxPY Observable can be converted to a <em>Flowable</em> by using the <code>rxbp.from_rx</code> function.\nEquivalently, a <em>Flowable</em> can be converted to an RxPY Observable\nby using the <code>to_rx</code> function.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rxbp</span>\n\n<span class=\"n\">rx_source</span> <span class=\"o\">=</span> <span class=\"n\">rx</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Alpha\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Beta\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Gamma\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Delta\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Epsilon\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># convert Observable to Flowable</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">from_rx</span><span class=\"p\">(</span><span class=\"n\">rx_source</span><span class=\"p\">)</span>\n\n<span class=\"n\">composed</span> <span class=\"o\">=</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span>\n    <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)),</span>\n    <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># convert Flowable to Observable</span>\n<span class=\"n\">composed</span><span class=\"o\">.</span><span class=\"n\">to_rx</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Received </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n</pre>\n<h2>Differences from RxPY</h2>\n<h3>Flowable</h3>\n<p>Similar to an RxPY Observable, a <em>Flowable</em> implements a <code>subscribe</code> method,\nwhich is a mechanism that allows to describe a data flow from its source to\na sink. The description is done with <em>rxbp</em> operators exposed by <code>rxbp.op</code>.</p>\n<p>Like in functional programming, usings <em>rxbp</em> operators\ndoes not create any mutable states, but rather concatenates functions\nwithout calling them yet. We first describe what we intend to\ndo in form of a plan and then execute the plan. A <em>Flowable</em> is\nexecuted by calling its <code>subscribe</code> method. This will start a chain\nreaction, where each downsream <em>Flowables</em> calls the <code>subscribe</code>\nmethod of its upstream <em>Flowable</em> until\nthe sources start emitting the data. Once a <em>Flowable</em> is subscribed, we\nallow it to have internal mutable states.</p>\n<p>Compared to RxPY Observables, however, a <em>Flowable</em> uses <code>Observers</code> that are\nable to back-pressure on an <code>on_next</code> method call. This has the effect that\ncertain operators behave differently from the ones in RxPY.</p>\n<h3>MultiCast (experimental)</h3>\n<p>A <em>MultiCast</em> is used when a <em>Flowable</em> emits elements to more than one <code>Observer</code>,\nand can be though of a nested <em>Flowable</em> of type <code>Observable[T[Flowable]]</code>.</p>\n<p>The syntax to <em>multi-cast</em> a Flowable is quite different from RxPY and there are good\nreasons for that. In RxPY, there is an operator called <code>share</code>, that turns an <em>Observable</em>\ninto a so-called hot <em>Observable</em> allowing multiple downstream subscribers to receive the\nsame elements. The first <code>subscribe</code> call has the side-effect that subsequent <code>subscribe</code>\ncalls will not propagate upstream, but register themselves to the hot <em>Observable</em>.\nThe following example illustrates the side-effect that happens when a shared <em>Observable</em>\nis subscribed for the first time.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rx</span> <span class=\"kn\">import</span> <span class=\"n\">operators</span> <span class=\"k\">as</span> <span class=\"n\">op</span>\n\n<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">rx</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span>\n    <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">share</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">)</span>\n<span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">)</span>      <span class=\"c1\"># the second time no elements are sent</span>\n</pre>\n<p>The previous code outputs:</p>\n<pre><code>0\n1\n2\n3\n</code></pre>\n<p>In <em>rxbp</em>, however, the elements of a <em>Flowable</em> sequence can only be multi-casted,\nif the <em>Flowable</em> is nested inside a <em>MultiCast</em>. This can be done with the\n<code>rxbp.multicast.return_flowable</code> function. <code>return_flowable</code> takes a <em>Flowable</em>, a\nlist of <em>Flowables</em> or a dictionary of <em>Flowables</em> and creates a <em>MultiCast</em> that\nemits the nested <em>Flowables</em>. Similarly to a <em>Flowable</em>, a <em>MultiCast</em> implements a <code>pipe</code>\nmethod that takes a sequence of <em>MultiCast</em> operators, which are exposed by\n<code>rxbp.multicast.op</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rxbp</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">multicast</span><span class=\"o\">.</span><span class=\"n\">return_flowable</span><span class=\"p\">(</span><span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span>\n    <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">multicast</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">base</span><span class=\"p\">:</span> <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span>\n        <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span>\n            <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">)),</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_flowable</span><span class=\"p\">()</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">)</span>\n</pre>\n<p>The previous code outputs:</p>\n<pre><code>(0, 2)\n(1, 4)\n(2, 6)\n(3, 8)\n(4, 10)\n</code></pre>\n<h3>match operator (experimental)</h3>\n<p>The <code>match</code> operator tries to match two <em>Flowables</em>, and raises an exception otherwise.\nTwo <em>Flowables</em> match if they have the same base or if there exists a mapping that maps\none base to the base of the other <em>Flowable</em>. These mappings propagated internally when\nsubscribing to a <em>Flowable</em>.</p>\n<p>If two <em>Flowables</em> match, the elements of each <em>Flowable</em> sequence are filtered and\ndublicated (if necessary) first and then zipped together. The following example creates\ntwo <em>Flowables</em> where one is having base <em>10</em> and the other contains a mapping from\nbase <em>10</em> to it's own base <em>None</em> (base <em>None</em> refers to a unknown <em>Flowable</em> sequence).\nThe <code>match</code> operator applies the mapping to the Flowable of base <em>10</em> such that every\nsecond element is selected due to <code>v % 2</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rxbp</span>\n\n<span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">from_range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span>\n    <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">from_range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span>\n        <span class=\"n\">rxbp</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">)</span>\n</pre>\n<p>The previous code outputs:</p>\n<pre><code>(1, 1)\n(3, 3)\n(5, 5)\n(7, 7)\n(9, 9)\n</code></pre>\n<h2>When to use a Flowable, when RxPY Observable?</h2>\n<p>A <em>Flowable</em> is used when some asynchronous stage cannot process the data fast enough,\nor needs to synchronize the data with some other event. Let's take the <code>zip</code> operator\nas an example. It receives elements from two or more sources and emits a tuple once it\nreceived one element from each source. But what happens if one source emits the\nelements before the other does? Without back-pressure, the <code>zip</code> operator has to buffer\nthe elements from the eager source until it receives the elements from the other source.\nThis might be ok depending on how many elements need to be buffered. But often it is too\nrisky to buffer elements somewhere in our stream as it potentially leads to an\nout of memory exception. The back-pressure capability prevents buffers to grow by holding\nthe data back until it is actually needed.</p>\n<p>The advantage of a RxPY Observable is that it is generally faster and more lightweight.</p>\n<h2>Flowable</h2>\n<h3>Create a Flowable</h3>\n<ul>\n<li><code>empty</code> - create a <em>Flowable</em> emitting no elements</li>\n<li><code>from_</code> - create a <em>Flowable</em> that emits each element of an iterable</li>\n<li><code>from_iterable</code> - see <code>from_</code></li>\n<li><code>from_list</code> - create a <em>Flowable</em> that emits each element of a list</li>\n<li><code>from_range</code> - create a <em>Flowable</em> that emits elements defined by the range</li>\n<li><code>from_rx</code> - wrap a rx.Observable and exposes it as a <em>Flowable</em>, relaying signals in a backpressure-aware manner.</li>\n<li><code>return_flowable</code> - create a <em>Flowable</em> that emits a single element</li>\n</ul>\n<h3>Transforming operators</h3>\n<ul>\n<li><code>filter</code> - emit only those elements for which the given predicate holds</li>\n<li><code>first</code> - emit the first element only</li>\n<li><code>flat_map</code> - apply a function to each item emitted by the source and\nflattens the result</li>\n<li><code>map</code> - map each element emitted by the source by applying the given\nfunction</li>\n<li><code>map_to_iterator</code> - create a <em>Flowable</em> that maps each element emitted\nby the source to an iterator and emits each element of these iterators.</li>\n<li><code>pairwise</code> - create a <em>Flowable</em> that emits a pair for each consecutive\npairs of elements in the <em>Flowable</em> sequence</li>\n<li><code>reduce</code> - Apply an accumulator function over a Flowable sequence and\nemits a single element</li>\n<li><code>repeat_first</code> - Return a <em>Flowable</em> that repeats the first element it\nreceives from the source forever (until disposed).</li>\n<li><code>scan</code> - apply an accumulator function over a <em>Flowable</em> sequence and\nreturns each intermediate result.</li>\n<li><code>to_list</code> - Create a new <em>Flowable</em> that collects the elements from\nthe source sequence, and emits a single element of type List.</li>\n<li><code>zip_with_index</code> - zip each item emitted by the source with the\nenumerated index</li>\n</ul>\n<h3>Combining operators</h3>\n<ul>\n<li><code>concat</code> - Concatentates <em>Flowable</em> sequences together by back-pressuring\nthe tail <em>Flowables</em> until the current <em>Flowable</em> has completed</li>\n<li><code>controlled_zip</code> - create a new <em>Flowable</em> from two <em>Flowables</em> by combining\ntheir elements in pairs. Which element gets paired with an element from\nthe other <em>Flowable</em> is determined by two functions called <code>request_left</code> and\n<code>request_right</code></li>\n<li><code>match</code> - create a new <em>Flowable</em> from two <em>Flowables</em> by first filtering and\nduplicating (if necessary) the elements of each <em>Flowable</em> and zip the resulting\n<em>Flowable</em> sequences together</li>\n<li><code>merge</code> - merge the elements of the <em>Flowable</em> sequences into a single <em>Flowable</em></li>\n<li><code>zip</code> - Create a new <em>Flowable</em> from two <em>Flowables</em> by combining their\nitem in pairs in a strict sequence</li>\n</ul>\n<h3>Other operators</h3>\n<ul>\n<li><code>buffer</code> - buffer the element emitted by the source without back-pressure until\nthe buffer is full</li>\n<li><code>debug</code> - print debug messages to the console</li>\n<li><code>execute_on</code> - inject new scheduler that is used to subscribe the <em>Flowable</em></li>\n<li><code>observe_on</code> - schedule elements emitted by the source on a dedicated scheduler</li>\n<li><code>set_base</code> - overwrite the base of the current Flowable sequence</li>\n<li><code>share</code> - multi-cast the elements of the <em>Flowable</em> to possibly\nmultiple subscribers</li>\n</ul>\n<h3>Create a rx Observable</h3>\n<ul>\n<li><code>to_rx</code> - create a rx Observable from a Observable</li>\n</ul>\n<h2>MultiCast (experimental)</h2>\n<h3>Create a MultiCast</h3>\n<ul>\n<li><code>empty</code> - create a <em>MultiCast</em> emitting no elements</li>\n<li><code>return_flowable</code> - turn zero or more <em>Flowables</em> into multi-cast <em>Flowables</em>\nemitted as a single element inside a  <em>MultiCast</em></li>\n<li><code>return_</code> - create a <em>MultiCast</em> emitting a single element</li>\n<li><code>from_iterable</code> - create a <em>MultiCast</em> from an iterable</li>\n<li><code>from_rx_observable</code> - create a <em>MultiCast</em> from an <em>rx.Observable</em></li>\n<li><code>from_flowable</code> - (similar to <code>from_rx_observable</code>) create a <em>MultiCast</em>\nthat emits each element received by the Flowable</li>\n</ul>\n<h3>Transforming operators</h3>\n<ul>\n<li><code>default_if_empty</code> - either emits the elements of the source or a default element</li>\n<li><code>filter</code> - emit only those <em>MultiCast</em> for which the given predicate hold</li>\n<li><code>flat_map</code> - apply a function to each item emitted by the source and\nflattens the result</li>\n<li><code>lift</code> - lift the current <code>MultiCast[T1]</code> to a <code>MultiCast[T2[MultiCast[T1]]]</code>.</li>\n<li><code>map</code> - map each element emitted by the source by applying the given\nfunction</li>\n<li><code>merge</code> - merge the elements of the <em>MultiCast</em> sequences into a single <em>MultiCast</em></li>\n</ul>\n<h3>Transforming operators (Flowables)</h3>\n<ul>\n<li><code>join_flowables</code> - zip one or more <em>Multicasts</em> (each emitting a single <em>Flowable</em>)\nto a <em>Multicast</em> emitting a single element (tuple of <em>Flowables</em>)</li>\n<li><code>loop_flowables</code> - create a loop inside <em>Flowables</em></li>\n<li><code>collect_flowables</code> - create a <em>Multicast</em> that emits a single element containing\nthe reduced <em>Flowables</em> of the first element sent by the source</li>\n</ul>\n<h3>Other operators</h3>\n<ul>\n<li><code>debug</code> - print debug messages to the console</li>\n<li><code>observe_on</code> - schedule elements emitted by the source on a dedicated scheduler</li>\n<li><code>share</code> - multi-cast the elements of the source to possibly\nmultiple subscribers</li>\n</ul>\n\n          </div>"}, "last_serial": 7026531, "releases": {"3.0.0a2": [{"comment_text": "", "digests": {"md5": "9eb7d86824b93998ee1661d821865077", "sha256": "6979047278f949d5ea02375d30361ad09927ef2ecabb1612a73c01e329c42aec"}, "downloads": -1, "filename": "rxbp-3.0.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "9eb7d86824b93998ee1661d821865077", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 68444, "upload_time": "2019-04-29T20:59:24", "upload_time_iso_8601": "2019-04-29T20:59:24.986882Z", "url": "https://files.pythonhosted.org/packages/45/26/feff07fa37d07562b91ca6c98a8c2423db53d4091546d9c4c874c27357a6/rxbp-3.0.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e733e79510af091394e567b66b7bc50f", "sha256": "525dededa4befd6007c6f6ece602559114d63c3baee37cffaf5b969cacfaa169"}, "downloads": -1, "filename": "rxbp-3.0.0a2.tar.gz", "has_sig": false, "md5_digest": "e733e79510af091394e567b66b7bc50f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41574, "upload_time": "2019-04-29T20:59:29", "upload_time_iso_8601": "2019-04-29T20:59:29.690290Z", "url": "https://files.pythonhosted.org/packages/5f/af/fd984ef2c13f2823df094bb9040b34f84db7f54af70d235d661e4566f681/rxbp-3.0.0a2.tar.gz", "yanked": false}], "3.0.0a3": [{"comment_text": "", "digests": {"md5": "6ff71cca34be69d6b2b1bc7f51b445ba", "sha256": "eec1c73b30ea66a072671705e2a80529086940bf41ddaf04fd5ca91269ec4548"}, "downloads": -1, "filename": "rxbp-3.0.0a3-py3-none-any.whl", "has_sig": false, "md5_digest": "6ff71cca34be69d6b2b1bc7f51b445ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 73057, "upload_time": "2019-05-14T18:23:45", "upload_time_iso_8601": "2019-05-14T18:23:45.328365Z", "url": "https://files.pythonhosted.org/packages/bb/94/77466304364f7ddab31cf9c6cabcb09229b39203612cf23f219d74c297d0/rxbp-3.0.0a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12364729a08e049caeb6b40dc4266ce2", "sha256": "f6c1d68bb3ff0ef57fb9db4f7bbe3f070311454d0fd4eed3e992d37619beac1e"}, "downloads": -1, "filename": "rxbp-3.0.0a3.tar.gz", "has_sig": false, "md5_digest": "12364729a08e049caeb6b40dc4266ce2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39039, "upload_time": "2019-05-14T18:23:46", "upload_time_iso_8601": "2019-05-14T18:23:46.956657Z", "url": "https://files.pythonhosted.org/packages/77/f9/0ec2e032e4c53990f51e33a17156dab45cb8243f0f696370a945f7997cdc/rxbp-3.0.0a3.tar.gz", "yanked": false}], "3.0.0a4": [{"comment_text": "", "digests": {"md5": "e94d16266378c2075a561630e6ac41f0", "sha256": "1de2b2cbf9e66119d871a85d2af7d5a30fc5bf053bd310414c87297b88e0018e"}, "downloads": -1, "filename": "rxbp-3.0.0a4-py3-none-any.whl", "has_sig": false, "md5_digest": "e94d16266378c2075a561630e6ac41f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 109327, "upload_time": "2019-10-10T19:14:15", "upload_time_iso_8601": "2019-10-10T19:14:15.498783Z", "url": "https://files.pythonhosted.org/packages/b0/7d/ef377c54f89a49e41a9fe6a0b54e13bf871b2ce91463b9ab6313d9091b97/rxbp-3.0.0a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "094901f33e5e81f3b07c9706ca5f6361", "sha256": "e6a135720a8daea133eef6f6d02f3e4929ada84754392f82e3e6e5364228eddc"}, "downloads": -1, "filename": "rxbp-3.0.0a4.tar.gz", "has_sig": false, "md5_digest": "094901f33e5e81f3b07c9706ca5f6361", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61203, "upload_time": "2019-10-10T19:14:19", "upload_time_iso_8601": "2019-10-10T19:14:19.267301Z", "url": "https://files.pythonhosted.org/packages/e3/24/aea813ab37ce9f00cb1d766b8a5116be52df826ec47e724e9a8d26cf0b80/rxbp-3.0.0a4.tar.gz", "yanked": false}], "3.0.0a5": [{"comment_text": "", "digests": {"md5": "cf65c7a2ed1e6e18c8339329841238f8", "sha256": "47dc2f2c18399dfef4ef70beea14051021312aa816d0c993e030f7f7c38a4caf"}, "downloads": -1, "filename": "rxbp-3.0.0a5-py3-none-any.whl", "has_sig": false, "md5_digest": "cf65c7a2ed1e6e18c8339329841238f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 153367, "upload_time": "2019-12-13T20:51:53", "upload_time_iso_8601": "2019-12-13T20:51:53.804534Z", "url": "https://files.pythonhosted.org/packages/e0/6e/0c4b0483c53334eee213ec64fe789309340338072eb6f964751766a2e9fb/rxbp-3.0.0a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9766adfde4eadd1ebcddda5f04e0a04", "sha256": "e13869f7872a95b0337b08720ba7040d7bacd9dc69c5b08cde48daf9cb4324b8"}, "downloads": -1, "filename": "rxbp-3.0.0a5.tar.gz", "has_sig": false, "md5_digest": "b9766adfde4eadd1ebcddda5f04e0a04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83558, "upload_time": "2019-12-13T20:51:55", "upload_time_iso_8601": "2019-12-13T20:51:55.371068Z", "url": "https://files.pythonhosted.org/packages/a8/32/3c6b23227125c826ec5ac66239078d9461b4a2025f1a4b1d14a07c0296a7/rxbp-3.0.0a5.tar.gz", "yanked": false}], "3.0.0a6": [{"comment_text": "", "digests": {"md5": "2fbe5747858daaaef62b5e4b500bdafd", "sha256": "84086f98d00ab7f495ff66a1a4b793fff033686ce9f7291cca6d7385b8c505ba"}, "downloads": -1, "filename": "rxbp-3.0.0a6-py3-none-any.whl", "has_sig": false, "md5_digest": "2fbe5747858daaaef62b5e4b500bdafd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 181266, "upload_time": "2020-02-01T19:58:32", "upload_time_iso_8601": "2020-02-01T19:58:32.916657Z", "url": "https://files.pythonhosted.org/packages/52/d3/35bb7eb66a762d53821a7d5301ef87d626c7be4c6fb45a552dd8f85ff498/rxbp-3.0.0a6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0933bc2ea5bc1b0168121487e8b46d82", "sha256": "ee58c2c0ecde19aab495b38715e8e97c4772f6567ec91767009aab09d19d9a1a"}, "downloads": -1, "filename": "rxbp-3.0.0a6.tar.gz", "has_sig": false, "md5_digest": "0933bc2ea5bc1b0168121487e8b46d82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97447, "upload_time": "2020-02-01T19:58:34", "upload_time_iso_8601": "2020-02-01T19:58:34.569057Z", "url": "https://files.pythonhosted.org/packages/a5/af/8db124c444cd90a6c52fd2140175c4663a8d07952c1ced0f5b29fcde76c9/rxbp-3.0.0a6.tar.gz", "yanked": false}], "3.0.0a7": [{"comment_text": "", "digests": {"md5": "e295e4012cf48c5d050f8e7bedfdd34f", "sha256": "07272e363036064c4e2fad7c309d8720b24ee22aa2f035aca9a1fc20de8f972d"}, "downloads": -1, "filename": "rxbp-3.0.0a7-py3-none-any.whl", "has_sig": false, "md5_digest": "e295e4012cf48c5d050f8e7bedfdd34f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 204441, "upload_time": "2020-03-21T08:21:59", "upload_time_iso_8601": "2020-03-21T08:21:59.942125Z", "url": "https://files.pythonhosted.org/packages/7d/e5/5affa3da5e4902eb0da967e8a3a3147459e4f80b92bf0af4bbe54efc481a/rxbp-3.0.0a7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17234e675b367f0f7112151e3ee7782e", "sha256": "2a85a7c693e296f19ec8803661369b6ee2b86348fee09b44c0d4358cfa7fc012"}, "downloads": -1, "filename": "rxbp-3.0.0a7.tar.gz", "has_sig": false, "md5_digest": "17234e675b367f0f7112151e3ee7782e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108196, "upload_time": "2020-03-21T08:22:01", "upload_time_iso_8601": "2020-03-21T08:22:01.366072Z", "url": "https://files.pythonhosted.org/packages/ed/3c/b35f3f8f00ba3738076aed07ec2001550b114130c6c36eef0dd35c8214d9/rxbp-3.0.0a7.tar.gz", "yanked": false}], "3.0.0a8": [{"comment_text": "", "digests": {"md5": "2316f9665505e19d55dd88f0e36db2b8", "sha256": "b610811742ad9eb8bed6b4b43d81c0e908f3a63cd1a0814862b68a1e250329ab"}, "downloads": -1, "filename": "rxbp-3.0.0a8-py3-none-any.whl", "has_sig": false, "md5_digest": "2316f9665505e19d55dd88f0e36db2b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 26687, "upload_time": "2020-03-26T12:32:16", "upload_time_iso_8601": "2020-03-26T12:32:16.982343Z", "url": "https://files.pythonhosted.org/packages/a4/4d/fcd5c5a01013425e3253961532dbb1a79d300e80bb6fc4682a4156998f1d/rxbp-3.0.0a8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6968391acbe2af476cd74a06b94758c2", "sha256": "d084da9ecc9e9094c8c0609d731e64d595206b15e719c5eb89e35c0afe5889c8"}, "downloads": -1, "filename": "rxbp-3.0.0a8.tar.gz", "has_sig": false, "md5_digest": "6968391acbe2af476cd74a06b94758c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 20723, "upload_time": "2020-03-26T12:32:18", "upload_time_iso_8601": "2020-03-26T12:32:18.304786Z", "url": "https://files.pythonhosted.org/packages/fe/43/585d3a8c3f77af812452c9268800a4845e3f625ffa383ecd34bfcc986535/rxbp-3.0.0a8.tar.gz", "yanked": false}], "3.0.0a9": [{"comment_text": "", "digests": {"md5": "d8df2cf9dd96493e3e081b053b39f503", "sha256": "b6951b38a41891b4f93f659606a3982ba281f37c16f4859ccbc7bf4a71d4bdc3"}, "downloads": -1, "filename": "rxbp-3.0.0a9-py3-none-any.whl", "has_sig": false, "md5_digest": "d8df2cf9dd96493e3e081b053b39f503", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 155144, "upload_time": "2020-04-15T18:42:36", "upload_time_iso_8601": "2020-04-15T18:42:36.476410Z", "url": "https://files.pythonhosted.org/packages/9b/1c/ecb30cfc32a2f58111f8da3f7b3e7bc684ddc3678c7410f2746b9338f4d6/rxbp-3.0.0a9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e85915e06c3d1790fcc06d533f955230", "sha256": "54bdeae0c1be55761d6c78cfa7e12bd8d87b6c6c9803cb29f48b9d8edaae849f"}, "downloads": -1, "filename": "rxbp-3.0.0a9.tar.gz", "has_sig": false, "md5_digest": "e85915e06c3d1790fcc06d533f955230", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 87441, "upload_time": "2020-04-15T18:42:37", "upload_time_iso_8601": "2020-04-15T18:42:37.719339Z", "url": "https://files.pythonhosted.org/packages/e4/3a/4773b1d90a8797310cd432f23762bbd50c9a954047939d25abb7871dec49/rxbp-3.0.0a9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d8df2cf9dd96493e3e081b053b39f503", "sha256": "b6951b38a41891b4f93f659606a3982ba281f37c16f4859ccbc7bf4a71d4bdc3"}, "downloads": -1, "filename": "rxbp-3.0.0a9-py3-none-any.whl", "has_sig": false, "md5_digest": "d8df2cf9dd96493e3e081b053b39f503", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 155144, "upload_time": "2020-04-15T18:42:36", "upload_time_iso_8601": "2020-04-15T18:42:36.476410Z", "url": "https://files.pythonhosted.org/packages/9b/1c/ecb30cfc32a2f58111f8da3f7b3e7bc684ddc3678c7410f2746b9338f4d6/rxbp-3.0.0a9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e85915e06c3d1790fcc06d533f955230", "sha256": "54bdeae0c1be55761d6c78cfa7e12bd8d87b6c6c9803cb29f48b9d8edaae849f"}, "downloads": -1, "filename": "rxbp-3.0.0a9.tar.gz", "has_sig": false, "md5_digest": "e85915e06c3d1790fcc06d533f955230", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 87441, "upload_time": "2020-04-15T18:42:37", "upload_time_iso_8601": "2020-04-15T18:42:37.719339Z", "url": "https://files.pythonhosted.org/packages/e4/3a/4773b1d90a8797310cd432f23762bbd50c9a954047939d25abb7871dec49/rxbp-3.0.0a9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:47 2020"}