{"info": {"author": "Samapriya Roy", "author_email": "samapriya.roy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: Microsoft :: Windows", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: GIS"], "description": "================================\nGoogle Earth Engine Takeout Tool\n================================\n\nThis tool replicates a Google Earth Engine account and transfer everything over to a new account. Even if you are not replicating your account, think of this as an add on which allows you to download your entire code repositories, create an asset report and best of all iteratively change permissions to all image-collection and images whether or not within a folder.\n\nSetup Before Using the Tool\n```````````````````````````\n*  Both your google accounts have an external password, since it requires that to download and perform a lot of the operations. Also enable `Let Less Secure App use your account <https://support.google.com/accounts/answer/6010255?hl=en>`_ on both these accounts.\n*  Your system has native python available in terminal or command prompt depending on what kind of system you are using. You can check this by typing **python --version**\n*  Git is installed on your system. For windows you can find `installation instruction here <https://git-scm.com/downloads>`_\n*  Earth Engine Command Line(earthengine cli) interface is installed, instructions are in the `developer page <https://developers.google.com/earth-engine/python_install_manual>`_\n*  You have authenticated earthengine cli using **earthengine authenticate**\n*  Make sure you visit the `git source for your account <https://earthengine.googlesource.com/>`_ within earth engine and allow access.\n*  Check git is accessible via your system path type **git help** and check if the system can reach installed git command line tools.\n\n**You can read the** `medium article with the tutorial here <https://medium.com/@samapriyaroy/google-earth-engine-takeout-tools-and-guide-for-code-and-asset-transfer-aa865e0046e3>`_\n\nAnatomy of the Process: How to transfer step by step\n````````````````````````````````````````````````````\nGetting first things out of the way is to understand the three sections of this tool. To make life and this process simpler I designed the tool to have a flow so you can run these tools one after the other. The *EE Setup and Housekeeping* sections are optional , since I will generally\nupdated the selenium driver for mozilla and it assumes you have authenticated your earthengine CLI . The tool might show an error if you have not authenticated using earthengine authenticate\n::\n\n   If you have installed the tool run\n   geetakeout -h\n\n   If you have migrated into the folder after downloading it from github\n   python geetakeout.py -h\n\nStep 1: Getting your Repository Lists(gee_repo)\n-----------------------------------------------\nThis assumes that you have visited the Git Source for your codes in Google Earth Engine and authorized it. The tool is setup for accessing all repositories that are shared with you. This downloads the list into an html file which can then be parsed for your repositories.\n\nStep 2: Setting up your Git with Earth Engine Credentials(git_auth)\n-------------------------------------------------------------------\nYou can do this using two methods\n\n-  The first simple includes you visiting your `gitsource account page\n   <https://earthengine.googlesource.com/>`_ that we accessed earlier and click\n   ``Generate Password`` and follow instructions.\n\nI am going to talk more about the second method because this eliminates the need to get the password again and again since it is save as passkey. This will authenticate your git client with your git password using a browser less login and also store your gitkey. We will use this again to setup our second account post authorization. This will print our gitkey location and make sure you copy that so you can swap in out as needed. Note the name of the key is in the format ``git-username``\n\nStep 3: Authorize your Git Client with Git Key(git_swap)\n--------------------------------------------------------\nThe next step is to use the saved gitkey to authorize the git client. We are setting everything up so that we can clone the repositories to which we have access.\n\nStep 4: Clone your repositories(git_clone)\n------------------------------------------\nThis tool makes use of your earlier created GIT list, now that your git client has been authorized in step 2, you should be able to download your repos. This tool uses the account already linked to your terminal account. If you are not sure try ``earthengine ls`` to see your\nusername. The export path is noted for the collection of repositories.\n\nStep 5: Working with Assets: Generating Asset Report(ee_report)\n---------------------------------------------------------------\nThis includes all your assets , including tables, images, image collections and folders. We need to make sure we have this list to work on copying over your assets to the secondary account. Running this is simple and just requires a location for the csv file (the full path). The output is a csv file consiting of the type of asset and the asset path to be replicated in the new account. And now that we have the list time to get permissions to copy these assets.\n\nStep 6: Setting Permissions to Assets(ee_permissions)\n-----------------------------------------------------\nWe now use the report file generated to grant read access to all assets in your account. Once this is completed you will be able to copy your assets apart from being able to copy your codes.\n\n`````````````````````````````````````````````````````````````````````````````````\nLet us Begin to Copy : We change gears and switch over to the destination account\n`````````````````````````````````````````````````````````````````````````````````\n\nStep 7: Setting up the Destination Account(ee_user and git_swap)\n----------------------------------------------------------------\nNow we have to do two steps one after the other, do a quick earthengine authenticate and authenticate to your new account and perform Step 2 and Step 3 this time using your new account. The tool ``ee_user`` will also allow you to change your accounts. I already created Step 2 for my secondary account and now I will use that to authorize my git client with the new account.\n\nStep 8: Replicate Repositories (git_create)\n-------------------------------------------\nTo setup our new account we need to build the outline of the earlier account, the repolists and\nfolders inside these repos and then similarly the folders and empty collections in the secondary account.\n\n**Note: Git cannot push an empty repository so if you have an empty repository delete it before downloading and pushing to new account**\n\nStep 9: Push to New Account(git_replicate)\n------------------------------------------\nNow we push all codes from our earlier account to our new account, this way our repositories\nwill now be populated with the most recent codes. **Do not push to any repository that already has code because this will overwrite it**\n\nStep 10: Replicate Asset Structure(asset_create) and Assets(asset_replicate)\n----------------------------------------------------------------------------\n\nThis is similar to git_create here we replicate the collection and folder structure so we can push our assets to them. You pass it the original report you created from your primary account and it sets up as needed. This has replicated the collection and Image folder structures. However this is still empty and the last step makes sure that your assets are actually copied over to your new asset home. I have included a counter to measure transfers left incase it is a large collection. Over the last 10 steps we have managed to replicate and move an earth engine account from one place to another. Though I found this useful to move accounts within a university setting, I see some value in moving accounts and replicating when a project member leaves a project or for simply migrating at large. For now if an owner of an account deletes his/her account or looses access to his/her account and even if you are a writer to the repository and the collection, you will loose access to these codes and assets. So this can aid in maintaining continuity by moving codes to more persistent account.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/samapriya/gee-takeout", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "geetakeout", "package_url": "https://pypi.org/project/geetakeout/", "platform": "", "project_url": "https://pypi.org/project/geetakeout/", "project_urls": {"Homepage": "https://github.com/samapriya/gee-takeout"}, "release_url": "https://pypi.org/project/geetakeout/0.1/", "requires_dist": null, "requires_python": "", "summary": "Google Earth Engine Takeout Tool", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This tool replicates a Google Earth Engine account and transfer everything over to a new account. Even if you are not replicating your account, think of this as an add on which allows you to download your entire code repositories, create an asset report and best of all iteratively change permissions to all image-collection and images whether or not within a folder.</p>\n<div id=\"setup-before-using-the-tool\">\n<h2>Setup Before Using the Tool</h2>\n<ul>\n<li>Both your google accounts have an external password, since it requires that to download and perform a lot of the operations. Also enable <a href=\"https://support.google.com/accounts/answer/6010255?hl=en\" rel=\"nofollow\">Let Less Secure App use your account</a> on both these accounts.</li>\n<li>Your system has native python available in terminal or command prompt depending on what kind of system you are using. You can check this by typing <strong>python \u2013version</strong></li>\n<li>Git is installed on your system. For windows you can find <a href=\"https://git-scm.com/downloads\" rel=\"nofollow\">installation instruction here</a></li>\n<li>Earth Engine Command Line(earthengine cli) interface is installed, instructions are in the <a href=\"https://developers.google.com/earth-engine/python_install_manual\" rel=\"nofollow\">developer page</a></li>\n<li>You have authenticated earthengine cli using <strong>earthengine authenticate</strong></li>\n<li>Make sure you visit the <a href=\"https://earthengine.googlesource.com/\" rel=\"nofollow\">git source for your account</a> within earth engine and allow access.</li>\n<li>Check git is accessible via your system path type <strong>git help</strong> and check if the system can reach installed git command line tools.</li>\n</ul>\n<p><strong>You can read the</strong> <a href=\"https://medium.com/@samapriyaroy/google-earth-engine-takeout-tools-and-guide-for-code-and-asset-transfer-aa865e0046e3\" rel=\"nofollow\">medium article with the tutorial here</a></p>\n</div>\n<div id=\"anatomy-of-the-process-how-to-transfer-step-by-step\">\n<h2>Anatomy of the Process: How to transfer step by step</h2>\n<p>Getting first things out of the way is to understand the three sections of this tool. To make life and this process simpler I designed the tool to have a flow so you can run these tools one after the other. The <em>EE Setup and Housekeeping</em> sections are optional , since I will generally\nupdated the selenium driver for mozilla and it assumes you have authenticated your earthengine CLI . The tool might show an error if you have not authenticated using earthengine authenticate</p>\n<pre>If you have installed the tool run\ngeetakeout -h\n\nIf you have migrated into the folder after downloading it from github\npython geetakeout.py -h\n</pre>\n<div id=\"step-1-getting-your-repository-lists-gee-repo\">\n<h3>Step 1: Getting your Repository Lists(gee_repo)</h3>\n<p>This assumes that you have visited the Git Source for your codes in Google Earth Engine and authorized it. The tool is setup for accessing all repositories that are shared with you. This downloads the list into an html file which can then be parsed for your repositories.</p>\n</div>\n<div id=\"step-2-setting-up-your-git-with-earth-engine-credentials-git-auth\">\n<h3>Step 2: Setting up your Git with Earth Engine Credentials(git_auth)</h3>\n<p>You can do this using two methods</p>\n<ul>\n<li>The first simple includes you visiting your <a href=\"https://earthengine.googlesource.com/\" rel=\"nofollow\">gitsource account page</a> that we accessed earlier and click\n<tt>Generate Password</tt> and follow instructions.</li>\n</ul>\n<p>I am going to talk more about the second method because this eliminates the need to get the password again and again since it is save as passkey. This will authenticate your git client with your git password using a browser less login and also store your gitkey. We will use this again to setup our second account post authorization. This will print our gitkey location and make sure you copy that so you can swap in out as needed. Note the name of the key is in the format <tt><span class=\"pre\">git-username</span></tt></p>\n</div>\n<div id=\"step-3-authorize-your-git-client-with-git-key-git-swap\">\n<h3>Step 3: Authorize your Git Client with Git Key(git_swap)</h3>\n<p>The next step is to use the saved gitkey to authorize the git client. We are setting everything up so that we can clone the repositories to which we have access.</p>\n</div>\n<div id=\"step-4-clone-your-repositories-git-clone\">\n<h3>Step 4: Clone your repositories(git_clone)</h3>\n<p>This tool makes use of your earlier created GIT list, now that your git client has been authorized in step 2, you should be able to download your repos. This tool uses the account already linked to your terminal account. If you are not sure try <tt>earthengine ls</tt> to see your\nusername. The export path is noted for the collection of repositories.</p>\n</div>\n<div id=\"step-5-working-with-assets-generating-asset-report-ee-report\">\n<h3>Step 5: Working with Assets: Generating Asset Report(ee_report)</h3>\n<p>This includes all your assets , including tables, images, image collections and folders. We need to make sure we have this list to work on copying over your assets to the secondary account. Running this is simple and just requires a location for the csv file (the full path). The output is a csv file consiting of the type of asset and the asset path to be replicated in the new account. And now that we have the list time to get permissions to copy these assets.</p>\n</div>\n<div id=\"step-6-setting-permissions-to-assets-ee-permissions\">\n<h3>Step 6: Setting Permissions to Assets(ee_permissions)</h3>\n<p>We now use the report file generated to grant read access to all assets in your account. Once this is completed you will be able to copy your assets apart from being able to copy your codes.</p>\n<div id=\"let-us-begin-to-copy-we-change-gears-and-switch-over-to-the-destination-account\">\n<h4>Let us Begin to Copy : We change gears and switch over to the destination account</h4>\n</div>\n</div>\n<div id=\"step-7-setting-up-the-destination-account-ee-user-and-git-swap\">\n<h3>Step 7: Setting up the Destination Account(ee_user and git_swap)</h3>\n<p>Now we have to do two steps one after the other, do a quick earthengine authenticate and authenticate to your new account and perform Step 2 and Step 3 this time using your new account. The tool <tt>ee_user</tt> will also allow you to change your accounts. I already created Step 2 for my secondary account and now I will use that to authorize my git client with the new account.</p>\n</div>\n<div id=\"step-8-replicate-repositories-git-create\">\n<h3>Step 8: Replicate Repositories (git_create)</h3>\n<p>To setup our new account we need to build the outline of the earlier account, the repolists and\nfolders inside these repos and then similarly the folders and empty collections in the secondary account.</p>\n<p><strong>Note: Git cannot push an empty repository so if you have an empty repository delete it before downloading and pushing to new account</strong></p>\n</div>\n<div id=\"step-9-push-to-new-account-git-replicate\">\n<h3>Step 9: Push to New Account(git_replicate)</h3>\n<p>Now we push all codes from our earlier account to our new account, this way our repositories\nwill now be populated with the most recent codes. <strong>Do not push to any repository that already has code because this will overwrite it</strong></p>\n</div>\n<div id=\"step-10-replicate-asset-structure-asset-create-and-assets-asset-replicate\">\n<h3>Step 10: Replicate Asset Structure(asset_create) and Assets(asset_replicate)</h3>\n<p>This is similar to git_create here we replicate the collection and folder structure so we can push our assets to them. You pass it the original report you created from your primary account and it sets up as needed. This has replicated the collection and Image folder structures. However this is still empty and the last step makes sure that your assets are actually copied over to your new asset home. I have included a counter to measure transfers left incase it is a large collection. Over the last 10 steps we have managed to replicate and move an earth engine account from one place to another. Though I found this useful to move accounts within a university setting, I see some value in moving accounts and replicating when a project member leaves a project or for simply migrating at large. For now if an owner of an account deletes his/her account or looses access to his/her account and even if you are a writer to the repository and the collection, you will loose access to these codes and assets. So this can aid in maintaining continuity by moving codes to more persistent account.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3881917, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "27c0c96e45bc1d3d496d109192dc175d", "sha256": "da10a807e0e11e133f7585afd6bf5b50ad83ba1a52169524191eb179dfbb572e"}, "downloads": -1, "filename": "geetakeout-0.1.tar.gz", "has_sig": false, "md5_digest": "27c0c96e45bc1d3d496d109192dc175d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5375005, "upload_time": "2018-05-21T02:17:25", "upload_time_iso_8601": "2018-05-21T02:17:25.310734Z", "url": "https://files.pythonhosted.org/packages/47/57/53c5ae1c1bc805b6c70238a54efb910ae7596fb7ea424bebe7f592886a31/geetakeout-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "27c0c96e45bc1d3d496d109192dc175d", "sha256": "da10a807e0e11e133f7585afd6bf5b50ad83ba1a52169524191eb179dfbb572e"}, "downloads": -1, "filename": "geetakeout-0.1.tar.gz", "has_sig": false, "md5_digest": "27c0c96e45bc1d3d496d109192dc175d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5375005, "upload_time": "2018-05-21T02:17:25", "upload_time_iso_8601": "2018-05-21T02:17:25.310734Z", "url": "https://files.pythonhosted.org/packages/47/57/53c5ae1c1bc805b6c70238a54efb910ae7596fb7ea424bebe7f592886a31/geetakeout-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:33 2020"}