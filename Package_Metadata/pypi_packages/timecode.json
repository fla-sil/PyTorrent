{"info": {"author": "['Erkan Ozgur Yilmaz']", "author_email": "eoyilmaz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "About\n-----\n\nPython Module for manipulating SMPTE timecode. Supports 23.98, 24, 25, 29.97,\n30, 50, 59.94, 60 frame rates and milliseconds (1000 fps).\n\nThis library is a fork of the original PyTimeCode python library. You should\nnot use the two library together (PyTimeCode is not maintained and has known\nbugs).\n\nThe math behind the drop frame calculation is based on the\n`blog post of David Heidelberger`_ .\n\n.. _`blog post of David Heidelberger`: http://www.davidheidelberger.com/blog/?p=29\n\nSimple math operations like, addition, subtraction, multiplication or division\nwith an integer value or with a timecode is possible. Math operations between\ntimecodes with different frame rates are supported. So::\n\n    from timecode import Timecode\n\n    tc1 = Timecode('29.97', '00:00:00:00')\n    tc2 = Timecode('24', '00:00:00:10')\n    tc3 = tc1 + tc2\n    assert tc3.framerate == '29.97'\n    assert tc3.frames == 12\n    assert tc3 == '00:00:00:11'\n\nCreating a Timecode instance with a start timecode of '00:00:00:00' will\nresult a timecode object where the total number of frames is 1. So::\n\n    tc4 = Timecode('24', '00:00:00:00')\n    assert tc4.frames == 1\n\nUse the ``frame_number`` attribute if you want to get a 0 based frame number::\n\n    assert tc4.frame_number == 0\n\nFrame rates 29.97 and 59.94 are always drop frame, and all the others are non\ndrop frame.\n\nThe timecode library supports rational frame rates passed as a either a string\n or tuple::\n\n    tc5 = Timecode('30000/1001', '00:00:00;00')\n    assert tc5.framerate == '29.97'\n\n    tc6 = Timecode((30000, 1001), '00:00:00;00')\n    assert tc6.framerate == '29.97'\n\nYou may also pass a big \"Binary Coded Decimal\" integer as start timecode::\n\n    tc7 = Timecode('24', 421729315)\n    assert repr(tc7) == '19:23:14:23'\n\nThis is useful for parsing timecodes stored in OpenEXR's and extracted through\nOpenImageIO for instance.\n\nTimecode also supports passing start timecodes formatted like HH:MM:SS.sss where\nSS.sss is seconds and fractions of seconds::\n\n    tc8 = Timecode(25, '00:00:00.040')\n    assert tc8.frame_number == 1\n\nYou may set any timecode to be represented as fractions of seconds::\n\n    tc9 = Timecode(24, '19:23:14:23')\n    assert repr(tc9) == '19:23:14:23'\n\n    tc9.set_fractional(True)\n    assert repr(tc9) == '19:23:14.958'\n\nFraction of seconds is useful when working with tools like FFmpeg.\n\n\nThe SMPTE standard limits the timecode with 24 hours. Even though, Timecode\ninstance will show the current timecode inline with the SMPTE standard, it will\nkeep counting the total frames without clipping it.\n\nPlease report any bugs to the `GitHub`_ page.\n\n.. _`GitHub`: https://github.com/eoyilmaz/timecode\n\nCopyright 2014 Joshua Banton and PyTimeCode developers.\n\n\n=======\nChanges\n=======\n\n1.2.0\n=====\n* **NEW:** Support for passing a tuple with numerator and denominator when\n  passing rational framerate.\n\n* **NEW:** set_fractional method for setting whether or not to represent a\n  timecode as fractional seconds.\n\n* **Update:** Updated READEME's with info on new features\n\n* **FIX:** Some merge issues.\n\n1.1.0\n=====\n\n* **New:** Support for passing \"binary coded decimal\" (BCD) integer to\n  timecode argument as it's stored in certain formats like OpenEXR and DPX.\n  Useful for parsing timecode from metadata through OpenImageIO for instance.\n  Example: ``Timecode(24, 421729315) -> 19:23:14:23``\n  https://en.wikipedia.org/wiki/SMPTE_timecode\n\n1.0.1\n=====\n\n* **Update:** To prevent confusion, passing 0 for ``start_seconds`` argument\n  will raise a ValueError now in ``Timecode.__init__` method.\n\n1.0.0\n=====\n\n* **New:** Added support for passing rational frame rate. 24000/1001 for 23.97\n  etc.\n\n* **New:** Added tests for new functionality. Fractional seconds and\n  rational frame rates.\n\n* **New:** added __ge__ and __le__ methods for better comparison between two\n  timecodes.\n\n* **New:** Added support for fractional seconds in the frame field as used in\n  ffmpeg's duration for instance.\n\n* **Important:** When passing fractional second style timecode, the\n  Timecode.frs will return a float representing the fraction of a second. This\n  is a major change for people expecting int values\n\n0.4.2\n=====\n\n* **Update:** Version bump for PyPI.\n\n0.4.1\n=====\n\n* **Fix:** Fixed a test that was testing overloaded operators.\n\n0.4.0\n=====\n\n* **New:** Frame delimiter is now set to \":\" for Non Drop Frame, \";\" for Drop\n  Frame and \".\" for millisecond based time codes.\n  If ``Timecode.__init__()`` start_timecode is passed a string with the wrong\n  delimiter it will be converted automatically.\n\n* **Update:** All tests involving Drop Frame and millisecond time codes are now\n  set to use the new delimiter.\n\n* **New:** ``Timecode.tc_to_string()`` method added to present the correctly\n  formatted time code.\n\n* **New:** ``Timecode.ms_frame`` boolean attribute added.\n\n* **New:** ``Timecode.__init__()`` now supports strings, ints and floats for\n  the framerate argument.\n\n0.3.0\n=====\n\n* **New:** Renamed the library to ``timecode``.\n\n0.2.0\n=====\n\n* **New:** Rewritten the whole library from scratch.\n\n* **New:** Most important change is the licencing. There was now license\n  defined in the previous implementation. The library is now licensed under MIT\n  license.\n\n* **Update:** Timecode.__init__() arguments has been changed, removed the\n  unnecessary ``drop_frame``, ``iter_returns`` arguments.\n\n  Drop frame can be interpreted from the ``framerate`` argument and\n  ``iter_returns`` is unnecessary cause any iteration on the object will return\n  another ``Timecode`` instance.\n\n  If you want to get a string representation use ``Timecode.__str__()`` or\n  ``str(Timecode)`` or ``Timecode.__repr__()`` or ``\\`Timecode\\``` or\n  ``'%s' % Timecode`` any other thing that will convert it to a string.\n\n  If you want to get an integer use ``Timecode.frames`` or\n  ``Timecode.frame_count`` depending on what you want to get out of it.\n\n  So setting the ``iter_returns`` to something and nailing the output was\n  unnecessary.\n\n* **Update:** Updated the drop frame calculation to a much better one, which\n  is based on to the blog post of David Heidelberger at\n  http://www.davidheidelberger.com/blog/?p=29\n\n* **New:** Added ``Timecode.__eq__()`` so it is now possible to check the\n  equality of two timecode instances or a timecode and a string or a timecode\n  and an integer (which will check the total frame count).\n\n* **Update:** ``Timecode.tc_to_frames()`` now needs a timecode as a string\n  and will return an integer value which is the number of frames in that\n  timecode.\n\n* **Update:** ``Timecode.frames_to_tc()`` now needs an integer frame count\n  and returns 4 integers for hours, minutes, seconds and frames.\n\n* **Update:** ``Timecode.hrs``, ``Timecode.mins``, ``Timecode.secs`` and\n  ``Timecode.frs`` attributes are now properties. Because it was so rare to\n  check the individual hours, minutes, seconds or frame values, their values\n  are calculated with ``Timecode.frames_to_tc()`` method. But in future they\n  can still be converted to attributes and their value will be updated each\n  time the ``Timecode.frames`` attribute is changed (so add a ``_frames``\n  attribute and make ``frames`` a property with a getter and setter, and update\n  the hrs, mins, secs and frs in setter etc.).\n\n* **Update:** Removed ``Timecode.calc_drop_frame()`` method. The drop frame\n  calculation is neatly done inside ``Timecode.frames_to_tc()`` and\n  ``Timecode.tc_to_frames()`` methods.\n\n* **Update:** Updated ``Timecode.parse_timecode()`` method to a much simpler\n  algorithm.\n\n* **Update:** Removed ``Timecode.__return_item__()`` method. It is not\n  necessary to return an item in that way anymore.\n\n* **Update:** Removed ``Timecode.make_timecode()`` method. It was another\n  unnecessary method, so it is removed. Now using simple python string\n  templates for string representations.\n\n* **New:** Added ``timecode.__version__`` string, and set the value to\n  \"0.2.0\".\n\n* **Update:** Removed ``Timecode.set_int_framerate()`` method. Setting the\n  framerate will automatically set the ``Timecode.int_framerate`` attribute.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eoyilmaz/timecode", "keywords": "video", "license": "", "maintainer": "", "maintainer_email": "", "name": "timecode", "package_url": "https://pypi.org/project/timecode/", "platform": "", "project_url": "https://pypi.org/project/timecode/", "project_urls": {"Homepage": "https://github.com/eoyilmaz/timecode"}, "release_url": "https://pypi.org/project/timecode/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "SMPTE Time Code Manipulation Library", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            About<br>-----<br><br>Python Module for manipulating SMPTE timecode. Supports 23.98, 24, 25, 29.97,<br>30, 50, 59.94, 60 frame rates and milliseconds (1000 fps).<br><br>This library is a fork of the original PyTimeCode python library. You should<br>not use the two library together (PyTimeCode is not maintained and has known<br>bugs).<br><br>The math behind the drop frame calculation is based on the<br>`blog post of David Heidelberger`_ .<br><br>.. _`blog post of David Heidelberger`: http://www.davidheidelberger.com/blog/?p=29<br><br>Simple math operations like, addition, subtraction, multiplication or division<br>with an integer value or with a timecode is possible. Math operations between<br>timecodes with different frame rates are supported. So::<br><br>    from timecode import Timecode<br><br>    tc1 = Timecode('29.97', '00:00:00:00')<br>    tc2 = Timecode('24', '00:00:00:10')<br>    tc3 = tc1 + tc2<br>    assert tc3.framerate == '29.97'<br>    assert tc3.frames == 12<br>    assert tc3 == '00:00:00:11'<br><br>Creating a Timecode instance with a start timecode of '00:00:00:00' will<br>result a timecode object where the total number of frames is 1. So::<br><br>    tc4 = Timecode('24', '00:00:00:00')<br>    assert tc4.frames == 1<br><br>Use the ``frame_number`` attribute if you want to get a 0 based frame number::<br><br>    assert tc4.frame_number == 0<br><br>Frame rates 29.97 and 59.94 are always drop frame, and all the others are non<br>drop frame.<br><br>The timecode library supports rational frame rates passed as a either a string<br> or tuple::<br><br>    tc5 = Timecode('30000/1001', '00:00:00;00')<br>    assert tc5.framerate == '29.97'<br><br>    tc6 = Timecode((30000, 1001), '00:00:00;00')<br>    assert tc6.framerate == '29.97'<br><br>You may also pass a big \"Binary Coded Decimal\" integer as start timecode::<br><br>    tc7 = Timecode('24', 421729315)<br>    assert repr(tc7) == '19:23:14:23'<br><br>This is useful for parsing timecodes stored in OpenEXR's and extracted through<br>OpenImageIO for instance.<br><br>Timecode also supports passing start timecodes formatted like HH:MM:SS.sss where<br>SS.sss is seconds and fractions of seconds::<br><br>    tc8 = Timecode(25, '00:00:00.040')<br>    assert tc8.frame_number == 1<br><br>You may set any timecode to be represented as fractions of seconds::<br><br>    tc9 = Timecode(24, '19:23:14:23')<br>    assert repr(tc9) == '19:23:14:23'<br><br>    tc9.set_fractional(True)<br>    assert repr(tc9) == '19:23:14.958'<br><br>Fraction of seconds is useful when working with tools like FFmpeg.<br><br><br>The SMPTE standard limits the timecode with 24 hours. Even though, Timecode<br>instance will show the current timecode inline with the SMPTE standard, it will<br>keep counting the total frames without clipping it.<br><br>Please report any bugs to the `GitHub`_ page.<br><br>.. _`GitHub`: https://github.com/eoyilmaz/timecode<br><br>Copyright 2014 Joshua Banton and PyTimeCode developers.<br><br><br>=======<br>Changes<br>=======<br><br>1.2.0<br>=====<br>* **NEW:** Support for passing a tuple with numerator and denominator when<br>  passing rational framerate.<br><br>* **NEW:** set_fractional method for setting whether or not to represent a<br>  timecode as fractional seconds.<br><br>* **Update:** Updated READEME's with info on new features<br><br>* **FIX:** Some merge issues.<br><br>1.1.0<br>=====<br><br>* **New:** Support for passing \"binary coded decimal\" (BCD) integer to<br>  timecode argument as it's stored in certain formats like OpenEXR and DPX.<br>  Useful for parsing timecode from metadata through OpenImageIO for instance.<br>  Example: ``Timecode(24, 421729315) -&gt; 19:23:14:23``<br>  https://en.wikipedia.org/wiki/SMPTE_timecode<br><br>1.0.1<br>=====<br><br>* **Update:** To prevent confusion, passing 0 for ``start_seconds`` argument<br>  will raise a ValueError now in ``Timecode.__init__` method.<br><br>1.0.0<br>=====<br><br>* **New:** Added support for passing rational frame rate. 24000/1001 for 23.97<br>  etc.<br><br>* **New:** Added tests for new functionality. Fractional seconds and<br>  rational frame rates.<br><br>* **New:** added __ge__ and __le__ methods for better comparison between two<br>  timecodes.<br><br>* **New:** Added support for fractional seconds in the frame field as used in<br>  ffmpeg's duration for instance.<br><br>* **Important:** When passing fractional second style timecode, the<br>  Timecode.frs will return a float representing the fraction of a second. This<br>  is a major change for people expecting int values<br><br>0.4.2<br>=====<br><br>* **Update:** Version bump for PyPI.<br><br>0.4.1<br>=====<br><br>* **Fix:** Fixed a test that was testing overloaded operators.<br><br>0.4.0<br>=====<br><br>* **New:** Frame delimiter is now set to \":\" for Non Drop Frame, \";\" for Drop<br>  Frame and \".\" for millisecond based time codes.<br>  If ``Timecode.__init__()`` start_timecode is passed a string with the wrong<br>  delimiter it will be converted automatically.<br><br>* **Update:** All tests involving Drop Frame and millisecond time codes are now<br>  set to use the new delimiter.<br><br>* **New:** ``Timecode.tc_to_string()`` method added to present the correctly<br>  formatted time code.<br><br>* **New:** ``Timecode.ms_frame`` boolean attribute added.<br><br>* **New:** ``Timecode.__init__()`` now supports strings, ints and floats for<br>  the framerate argument.<br><br>0.3.0<br>=====<br><br>* **New:** Renamed the library to ``timecode``.<br><br>0.2.0<br>=====<br><br>* **New:** Rewritten the whole library from scratch.<br><br>* **New:** Most important change is the licencing. There was now license<br>  defined in the previous implementation. The library is now licensed under MIT<br>  license.<br><br>* **Update:** Timecode.__init__() arguments has been changed, removed the<br>  unnecessary ``drop_frame``, ``iter_returns`` arguments.<br><br>  Drop frame can be interpreted from the ``framerate`` argument and<br>  ``iter_returns`` is unnecessary cause any iteration on the object will return<br>  another ``Timecode`` instance.<br><br>  If you want to get a string representation use ``Timecode.__str__()`` or<br>  ``str(Timecode)`` or ``Timecode.__repr__()`` or ``\\`Timecode\\``` or<br>  ``'%s' % Timecode`` any other thing that will convert it to a string.<br><br>  If you want to get an integer use ``Timecode.frames`` or<br>  ``Timecode.frame_count`` depending on what you want to get out of it.<br><br>  So setting the ``iter_returns`` to something and nailing the output was<br>  unnecessary.<br><br>* **Update:** Updated the drop frame calculation to a much better one, which<br>  is based on to the blog post of David Heidelberger at<br>  http://www.davidheidelberger.com/blog/?p=29<br><br>* **New:** Added ``Timecode.__eq__()`` so it is now possible to check the<br>  equality of two timecode instances or a timecode and a string or a timecode<br>  and an integer (which will check the total frame count).<br><br>* **Update:** ``Timecode.tc_to_frames()`` now needs a timecode as a string<br>  and will return an integer value which is the number of frames in that<br>  timecode.<br><br>* **Update:** ``Timecode.frames_to_tc()`` now needs an integer frame count<br>  and returns 4 integers for hours, minutes, seconds and frames.<br><br>* **Update:** ``Timecode.hrs``, ``Timecode.mins``, ``Timecode.secs`` and<br>  ``Timecode.frs`` attributes are now properties. Because it was so rare to<br>  check the individual hours, minutes, seconds or frame values, their values<br>  are calculated with ``Timecode.frames_to_tc()`` method. But in future they<br>  can still be converted to attributes and their value will be updated each<br>  time the ``Timecode.frames`` attribute is changed (so add a ``_frames``<br>  attribute and make ``frames`` a property with a getter and setter, and update<br>  the hrs, mins, secs and frs in setter etc.).<br><br>* **Update:** Removed ``Timecode.calc_drop_frame()`` method. The drop frame<br>  calculation is neatly done inside ``Timecode.frames_to_tc()`` and<br>  ``Timecode.tc_to_frames()`` methods.<br><br>* **Update:** Updated ``Timecode.parse_timecode()`` method to a much simpler<br>  algorithm.<br><br>* **Update:** Removed ``Timecode.__return_item__()`` method. It is not<br>  necessary to return an item in that way anymore.<br><br>* **Update:** Removed ``Timecode.make_timecode()`` method. It was another<br>  unnecessary method, so it is removed. Now using simple python string<br>  templates for string representations.<br><br>* **New:** Added ``timecode.__version__`` string, and set the value to<br>  \"0.2.0\".<br><br>* **Update:** Removed ``Timecode.set_int_framerate()`` method. Setting the<br>  framerate will automatically set the ``Timecode.int_framerate`` attribute.<br>\n          </div>"}, "last_serial": 3642643, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "d99a1227ae72f2d98dc5c8f255e19cbc", "sha256": "250087e7fe309b18c0b5adca3974e453f894dae0aaf6f4f66a8b418eb8c8d7e9"}, "downloads": -1, "filename": "timecode-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d99a1227ae72f2d98dc5c8f255e19cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16800, "upload_time": "2014-07-08T13:51:04", "upload_time_iso_8601": "2014-07-08T13:51:04.105685Z", "url": "https://files.pythonhosted.org/packages/f6/e5/12045070ef704becaf3a72127fada95634b5153c669153fa7733bd774efa/timecode-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "ddce203c08bcc1022a4704630c5bbc6f", "sha256": "68d3892d3409ac9d695542c717dbc9e2a16f74584bf7526cb312e74360a22b29"}, "downloads": -1, "filename": "timecode-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ddce203c08bcc1022a4704630c5bbc6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13543, "upload_time": "2017-06-06T07:07:54", "upload_time_iso_8601": "2017-06-06T07:07:54.889398Z", "url": "https://files.pythonhosted.org/packages/f3/f1/0dbc261f957c861ba5fb19c72b5ab84a50bfb3aecc1548433387cd21b7b7/timecode-0.4.0.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "7bdeccd1df5ee29204c5798f499beeb7", "sha256": "9566577c5cfbca5e39521b74a5b988444ab09b32f9e8be8a57f49d79a19a54ad"}, "downloads": -1, "filename": "timecode-0.4.2.tar.gz", "has_sig": false, "md5_digest": "7bdeccd1df5ee29204c5798f499beeb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13681, "upload_time": "2017-06-15T08:28:21", "upload_time_iso_8601": "2017-06-15T08:28:21.608357Z", "url": "https://files.pythonhosted.org/packages/13/3f/234ca19bdacbeab408227dd3492d0d7258f68cab645d917e1e42c90c304c/timecode-0.4.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "81bf24a7ca66ed98d37e7039328484e8", "sha256": "28076416a46343ce7a038bd2f8bb7bcba98f7577b98e8ea215ddc5ffe6859883"}, "downloads": -1, "filename": "timecode-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "81bf24a7ca66ed98d37e7039328484e8", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11013, "upload_time": "2017-11-25T20:42:34", "upload_time_iso_8601": "2017-11-25T20:42:34.981172Z", "url": "https://files.pythonhosted.org/packages/d2/8a/7cc3cc8de29db8c6aa183b179e4e8b26247dafa97d62e8c6d526db8e8191/timecode-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebf05c364585bba994147308ab9a99cb", "sha256": "6a9a2d82e761132ee43325f908800e31deb19a1c0d069c774dd129e5f919b18f"}, "downloads": -1, "filename": "timecode-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ebf05c364585bba994147308ab9a99cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15229, "upload_time": "2017-11-25T20:42:32", "upload_time_iso_8601": "2017-11-25T20:42:32.701853Z", "url": "https://files.pythonhosted.org/packages/dc/58/cc4eeccc09280311117c5c27c4f9d4ed2475837ed992fe441838feed8946/timecode-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "2ae31fcf268835dee551c2885b97b36b", "sha256": "1b00649fc5b4ddd7faf8b6a9e924f47a4f2783f5c65b3db5636b67b3030a15b8"}, "downloads": -1, "filename": "timecode-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2ae31fcf268835dee551c2885b97b36b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11636, "upload_time": "2017-11-28T01:38:16", "upload_time_iso_8601": "2017-11-28T01:38:16.562617Z", "url": "https://files.pythonhosted.org/packages/40/3a/2beeb96465125f48b77a8522cf6a13541e47ffcb240ac8ccc17f58a366a1/timecode-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c248f993b91274905e0324ceb570675a", "sha256": "de350150a99af89936f7c35bc8ecc4b3536300a8f4ce95f70f4ea31c6928c3fd"}, "downloads": -1, "filename": "timecode-1.1.0.tar.gz", "has_sig": false, "md5_digest": "c248f993b91274905e0324ceb570675a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16001, "upload_time": "2017-11-28T01:38:14", "upload_time_iso_8601": "2017-11-28T01:38:14.539083Z", "url": "https://files.pythonhosted.org/packages/df/17/51ecbcd51a178a438dae6f930379e65fd738e644592f924a6f2395c6137f/timecode-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bdf76e4033aab5097a3907753f59a16b", "sha256": "c4a6309ca3bde9549ee8ece0c1f6395fbb851492c01376f9b3743537097816ac"}, "downloads": -1, "filename": "timecode-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bdf76e4033aab5097a3907753f59a16b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 12577, "upload_time": "2018-03-06T03:50:49", "upload_time_iso_8601": "2018-03-06T03:50:49.972026Z", "url": "https://files.pythonhosted.org/packages/64/53/87fc532710aab8e6c9046f1842c923e3f5761c3e6ac9c08f98c01370282d/timecode-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f924a2a56d5b0f84ec64733c3bf79a0", "sha256": "7b2db29bdcb358716c557f28622cb00fb09850206776b6ef53c6a5a36786e036"}, "downloads": -1, "filename": "timecode-1.2.0.tar.gz", "has_sig": false, "md5_digest": "9f924a2a56d5b0f84ec64733c3bf79a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17083, "upload_time": "2018-03-06T03:50:47", "upload_time_iso_8601": "2018-03-06T03:50:47.615186Z", "url": "https://files.pythonhosted.org/packages/a3/57/ec6321c1f3827caf37b2e485f70a6064d55c5a961550f2e89713b9530da7/timecode-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdf76e4033aab5097a3907753f59a16b", "sha256": "c4a6309ca3bde9549ee8ece0c1f6395fbb851492c01376f9b3743537097816ac"}, "downloads": -1, "filename": "timecode-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bdf76e4033aab5097a3907753f59a16b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 12577, "upload_time": "2018-03-06T03:50:49", "upload_time_iso_8601": "2018-03-06T03:50:49.972026Z", "url": "https://files.pythonhosted.org/packages/64/53/87fc532710aab8e6c9046f1842c923e3f5761c3e6ac9c08f98c01370282d/timecode-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f924a2a56d5b0f84ec64733c3bf79a0", "sha256": "7b2db29bdcb358716c557f28622cb00fb09850206776b6ef53c6a5a36786e036"}, "downloads": -1, "filename": "timecode-1.2.0.tar.gz", "has_sig": false, "md5_digest": "9f924a2a56d5b0f84ec64733c3bf79a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17083, "upload_time": "2018-03-06T03:50:47", "upload_time_iso_8601": "2018-03-06T03:50:47.615186Z", "url": "https://files.pythonhosted.org/packages/a3/57/ec6321c1f3827caf37b2e485f70a6064d55c5a961550f2e89713b9530da7/timecode-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:36 2020"}