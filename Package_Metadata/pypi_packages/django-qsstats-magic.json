{"info": {"author": "Matt Croydon, Mikhail Korobov", "author_email": "mcroydon@gmail.com, kmike84@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "====================================================\ndjango-qsstats-magic: QuerySet statistics for Django\n====================================================\n\nThe goal of django-qsstats is to be a microframework to make\nrepetitive tasks such as generating aggregate statistics of querysets\nover time easier.  It's probably overkill for the task at hand, but yay\nmicroframeworks!\n\ndjango-qsstats-magic is a refactoring of django-qsstats app with slightly\nchanged API, simplified internals and faster time_series implementation.\n\n\nRequirements\n============\n\n* `python-dateutil <http://labix.org/python-dateutil>`_ > 1.4, < 2.0\n* `django <http://www.djangoproject.com/>`_ 1.8+\n\nDatabase\n--------\n\nIf timezone support is enabled in Django, the database must have also timezone support installed.\nFor MySQL it might be needed to run:\n\n::\n  - mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql\n\n\nLicense\n=======\n\nLiensed under a BSD-style license.\n\nExamples\n========\n\nHow many users signed up today? this month? this year?\n------------------------------------------------------\n\n::\n\n    from django.contrib.auth.models import User\n    import qsstats\n\n    qs = User.objects.all()\n    qss = qsstats.QuerySetStats(qs, 'date_joined')\n\n    print '%s new accounts today.' % qss.this_day()\n    print '%s new accounts this week.' % qss.this_week()\n    print '%s new accounts this month.' % qss.this_month()\n    print '%s new accounts this year.' % qss.this_year()\n    print '%s new accounts until now.' % qss.until_now()\n\nThis might print something like::\n\n    5 new accounts today.\n    11 new accounts this week.\n    27 new accounts this month.\n    377 new accounts this year.\n    409 new accounts until now.\n\nAggregating time-series data suitable for graphing\n--------------------------------------------------\n\n::\n\n    from django.contrib.auth.models import User\n    import datetime, qsstats\n\n    qs = User.objects.all()\n    qss = qsstats.QuerySetStats(qs, 'date_joined')\n\n    today = datetime.date.today()\n    seven_days_ago = today - datetime.timedelta(days=7)\n\n    time_series = qss.time_series(seven_days_ago, today)\n    print 'New users in the last 7 days: %s' % [t[1] for t in time_series]\n\nThis might print something like::\n\n    New users in the last 7 days: [3, 10, 7, 4, 12, 9, 11]\n\n\nPlease see qsstats/tests.py for similar usage examples.\n\nAPI\n===\n\nThe ``QuerySetStats`` object\n----------------------------\n\nIn order to provide maximum flexibility, the ``QuerySetStats`` object\ncan be instantiated with as little or as much information as you like.\nAll keword arguments are optional but ``DateFieldMissing`` and\n``QuerySetMissing`` will be raised if you try to use ``QuerySetStats``\nwithout providing enough information.\n\n``qs``\n    The queryset to operate on.\n\n    Default: ``None``\n\n``date_field``\n    The date field within the queryset to use.\n\n    Default: ``None``\n\n``aggregate``\n    The django aggregation instance. Can be set also set when\n    instantiating or calling one of the methods.\n\n    Default: ``Count('id')``\n\n``operator``\n    The default operator to use for the ``pivot`` function.  Can be also set\n    when calling ``pivot``.\n\n    Default: ``'lte'``\n\n``today``\n    The date that will be considered as today date. If ``today`` param is None\n    QuerySetStats' today will be datetime.date.today().\n\n    Default: ``None``\n\n\nAll of the documented methods take a standard set of keyword arguments\nthat override any information already stored within the ``QuerySetStats``\nobject.  These keyword arguments are ``date_field`` and ``aggregate``.\n\nOnce you have a ``QuerySetStats`` object instantiated, you can receive a\nsingle aggregate result by using the following methods:\n\n* ``for_minute``\n* ``for_hour``\n* ``for_day``\n* ``for_week``\n* ``for_month``\n* ``for_year``\n\n    Positional arguments: ``dt``, a ``datetime.datetime`` or ``datetime.date``\n    object to filter the queryset to this interval (minute, hour, day, week,\n    month or year).\n\n* ``this_minute``\n* ``this_hour``\n* ``this_day``\n* ``this_week``\n* ``this_month``\n* ``this_year``\n\n    Wrappers around ``for_<interval>`` that uses ``dateutil.relativedelta`` to\n    provide aggregate information for this current interval.\n\n``QuerySetStats`` also provides a method for returning aggregated\ntime-series data which may be extremely using in plotting data:\n\n``time_series``\n    Positional arguments: ``start`` and ``end``, each a\n    ``datetime.date`` or ``datetime.datetime`` object used in marking\n    the start and stop of the time series data.\n\n    Keyword arguments: In addition to the standard ``date_field`` and\n    ``aggregate`` keyword argument, ``time_series`` takes an optional\n    ``interval`` keyword argument used to mark which interval to use while\n    calculating aggregate data between ``start`` and ``end``.  This argument\n    defaults to ``'days'`` and can accept ``'years'``, ``'months'``,\n    ``'weeks'``, ``'days'``, ``'hours'`` or ``'minutes'``.\n    It will raise ``InvalidInterval`` otherwise.\n\n    This methods returns a list of tuples.  The first item in each\n    tuple is a ``datetime.datetime`` object for the current inverval.  The\n    second item is the result of the aggregate operation.  For\n    example::\n\n        [(datetime.datetime(2010, 3, 28, 0, 0), 12), (datetime.datetime(2010, 3, 29, 0, 0), 0), ...]\n\n    Formatting of date information is left as an exercise to the user and may\n    vary depending on interval used.\n\n``until``\n    Provide aggregate information until a given date or time, filtering the\n    queryset using ``lte``.\n\n    Positional arguments: ``dt`` a ``datetime.date`` or ``datetime.datetime``\n    object to be used for filtering the queryset since.\n\n    Keyword arguments: ``date_field``, ``aggregate``.\n\n``until_now``\n    Aggregate information until now.\n\n    Positional arguments: ``dt`` a ``datetime.date`` or ``datetime.datetime``\n    object to be used for filtering the queryset since (using ``lte``).\n\n    Keyword arguments: ``date_field``, ``aggregate``.\n\n``after``\n    Aggregate information after a given date or time, filtering the queryset\n    using ``gte``.\n\n    Positional arguments: ``dt`` a ``datetime.date`` or ``datetime.datetime``\n    object to be used for filtering the queryset since.\n\n    Keyword arguments: ``date_field``, ``aggregate``.\n\n``after_now``\n    Aggregate information after now.\n\n    Positional arguments: ``dt`` a ``datetime.date`` or ``datetime.datetime``\n    object to be used for filtering the queryset since (using ``gte``).\n\n    Keyword arguments: ``date_field``, ``aggregate``.\n\n``pivot``\n    Used by ``since``, ``after``, and ``until_now`` but potentially useful if\n    you would like to specify your own operator instead of the defaults.\n\n    Positional arguments: ``dt`` a ``datetime.date`` or ``datetime.datetime``\n    object to be used for filtering the queryset since (using ``lte``).\n\n    Keyword arguments: ``operator``, ``date_field``, ``aggregate``.\n\n    Raises ``InvalidOperator`` if the operator provided is not one of ``'lt'``,\n    ``'lte'``, ``gt`` or ``gte``.\n\nTesting\n=======\n\nIf you'd like to test ``django-qsstats-magic`` against your local configuration, add\n``qsstats`` to your ``INSTALLED_APPS`` and run ``./manage.py test qsstats``.\nThe test suite assumes that ``django.contrib.auth`` is installed.\n\nFor testing against different python, DB and django versions install tox\n(pip install tox) and run 'tox' from the source checkout::\n\n    $ tox\n\nDb user 'qsstats_test' with password 'qsstats_test' and a DB 'qsstats_test'\nshould exist.\n\nDifference from django-qsstats\n==============================\n\n1. Faster time_series method using 1 sql query (currently works for MySQL and\n   PostgreSQL, with a fallback to the old method for other DB backends).\n2. Single ``aggregate`` parameter instead of ``aggregate_field`` and\n   ``aggregate_class``. Default value is always ``Count('id')`` and can't be\n   specified in settings.py. ``QUERYSETSTATS_DEFAULT_OPERATOR`` option is also\n   unsupported now.\n3. Support for minute and hour aggregates.\n4. ``start_date`` and ``end_date`` arguments are renamed to ``start`` and\n   ``end`` because of 3.\n5. Internals are changed.\n\nI don't know if original author (Matt Croydon) would like my changes so\nI renamed a project for now. If the changes will be merged then\ndjango-qsstats-magic will become obsolete.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PetrDlouhy/django-qsstats-magic", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-qsstats-magic", "package_url": "https://pypi.org/project/django-qsstats-magic/", "platform": "", "project_url": "https://pypi.org/project/django-qsstats-magic/", "project_urls": {"Homepage": "https://github.com/PetrDlouhy/django-qsstats-magic"}, "release_url": "https://pypi.org/project/django-qsstats-magic/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "A django microframework that eases the generation of aggregate data for querysets.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The goal of django-qsstats is to be a microframework to make\nrepetitive tasks such as generating aggregate statistics of querysets\nover time easier.  It\u2019s probably overkill for the task at hand, but yay\nmicroframeworks!</p>\n<p>django-qsstats-magic is a refactoring of django-qsstats app with slightly\nchanged API, simplified internals and faster time_series implementation.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"http://labix.org/python-dateutil\" rel=\"nofollow\">python-dateutil</a> &gt; 1.4, &lt; 2.0</li>\n<li><a href=\"http://www.djangoproject.com/\" rel=\"nofollow\">django</a> 1.8+</li>\n</ul>\n<div id=\"database\">\n<h3>Database</h3>\n<p>If timezone support is enabled in Django, the database must have also timezone support installed.\nFor MySQL it might be needed to run:</p>\n<dl>\n<dt>::</dt>\n<dd><ul>\n<li>mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql</li>\n</ul>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Liensed under a BSD-style license.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"how-many-users-signed-up-today-this-month-this-year\">\n<h3>How many users signed up today? this month? this year?</h3>\n<pre>from django.contrib.auth.models import User\nimport qsstats\n\nqs = User.objects.all()\nqss = qsstats.QuerySetStats(qs, 'date_joined')\n\nprint '%s new accounts today.' % qss.this_day()\nprint '%s new accounts this week.' % qss.this_week()\nprint '%s new accounts this month.' % qss.this_month()\nprint '%s new accounts this year.' % qss.this_year()\nprint '%s new accounts until now.' % qss.until_now()\n</pre>\n<p>This might print something like:</p>\n<pre>5 new accounts today.\n11 new accounts this week.\n27 new accounts this month.\n377 new accounts this year.\n409 new accounts until now.\n</pre>\n</div>\n<div id=\"aggregating-time-series-data-suitable-for-graphing\">\n<h3>Aggregating time-series data suitable for graphing</h3>\n<pre>from django.contrib.auth.models import User\nimport datetime, qsstats\n\nqs = User.objects.all()\nqss = qsstats.QuerySetStats(qs, 'date_joined')\n\ntoday = datetime.date.today()\nseven_days_ago = today - datetime.timedelta(days=7)\n\ntime_series = qss.time_series(seven_days_ago, today)\nprint 'New users in the last 7 days: %s' % [t[1] for t in time_series]\n</pre>\n<p>This might print something like:</p>\n<pre>New users in the last 7 days: [3, 10, 7, 4, 12, 9, 11]\n</pre>\n<p>Please see qsstats/tests.py for similar usage examples.</p>\n</div>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<h2 id=\"the-querysetstats-object\"><span class=\"section-subtitle\">The <tt>QuerySetStats</tt> object</span></h2>\n<p>In order to provide maximum flexibility, the <tt>QuerySetStats</tt> object\ncan be instantiated with as little or as much information as you like.\nAll keword arguments are optional but <tt>DateFieldMissing</tt> and\n<tt>QuerySetMissing</tt> will be raised if you try to use <tt>QuerySetStats</tt>\nwithout providing enough information.</p>\n<dl>\n<dt><tt>qs</tt></dt>\n<dd><p>The queryset to operate on.</p>\n<p>Default: <tt>None</tt></p>\n</dd>\n<dt><tt>date_field</tt></dt>\n<dd><p>The date field within the queryset to use.</p>\n<p>Default: <tt>None</tt></p>\n</dd>\n<dt><tt>aggregate</tt></dt>\n<dd><p>The django aggregation instance. Can be set also set when\ninstantiating or calling one of the methods.</p>\n<p>Default: <tt><span class=\"pre\">Count('id')</span></tt></p>\n</dd>\n<dt><tt>operator</tt></dt>\n<dd><p>The default operator to use for the <tt>pivot</tt> function.  Can be also set\nwhen calling <tt>pivot</tt>.</p>\n<p>Default: <tt>'lte'</tt></p>\n</dd>\n<dt><tt>today</tt></dt>\n<dd><p>The date that will be considered as today date. If <tt>today</tt> param is None\nQuerySetStats\u2019 today will be datetime.date.today().</p>\n<p>Default: <tt>None</tt></p>\n</dd>\n</dl>\n<p>All of the documented methods take a standard set of keyword arguments\nthat override any information already stored within the <tt>QuerySetStats</tt>\nobject.  These keyword arguments are <tt>date_field</tt> and <tt>aggregate</tt>.</p>\n<p>Once you have a <tt>QuerySetStats</tt> object instantiated, you can receive a\nsingle aggregate result by using the following methods:</p>\n<ul>\n<li><p><tt>for_minute</tt></p>\n</li>\n<li><p><tt>for_hour</tt></p>\n</li>\n<li><p><tt>for_day</tt></p>\n</li>\n<li><p><tt>for_week</tt></p>\n</li>\n<li><p><tt>for_month</tt></p>\n</li>\n<li><p><tt>for_year</tt></p>\n<blockquote>\n<p>Positional arguments: <tt>dt</tt>, a <tt>datetime.datetime</tt> or <tt>datetime.date</tt>\nobject to filter the queryset to this interval (minute, hour, day, week,\nmonth or year).</p>\n</blockquote>\n</li>\n<li><p><tt>this_minute</tt></p>\n</li>\n<li><p><tt>this_hour</tt></p>\n</li>\n<li><p><tt>this_day</tt></p>\n</li>\n<li><p><tt>this_week</tt></p>\n</li>\n<li><p><tt>this_month</tt></p>\n</li>\n<li><p><tt>this_year</tt></p>\n<blockquote>\n<p>Wrappers around <tt>for_&lt;interval&gt;</tt> that uses <tt>dateutil.relativedelta</tt> to\nprovide aggregate information for this current interval.</p>\n</blockquote>\n</li>\n</ul>\n<p><tt>QuerySetStats</tt> also provides a method for returning aggregated\ntime-series data which may be extremely using in plotting data:</p>\n<dl>\n<dt><tt>time_series</tt></dt>\n<dd><p>Positional arguments: <tt>start</tt> and <tt>end</tt>, each a\n<tt>datetime.date</tt> or <tt>datetime.datetime</tt> object used in marking\nthe start and stop of the time series data.</p>\n<p>Keyword arguments: In addition to the standard <tt>date_field</tt> and\n<tt>aggregate</tt> keyword argument, <tt>time_series</tt> takes an optional\n<tt>interval</tt> keyword argument used to mark which interval to use while\ncalculating aggregate data between <tt>start</tt> and <tt>end</tt>.  This argument\ndefaults to <tt>'days'</tt> and can accept <tt>'years'</tt>, <tt>'months'</tt>,\n<tt>'weeks'</tt>, <tt>'days'</tt>, <tt>'hours'</tt> or <tt>'minutes'</tt>.\nIt will raise <tt>InvalidInterval</tt> otherwise.</p>\n<p>This methods returns a list of tuples.  The first item in each\ntuple is a <tt>datetime.datetime</tt> object for the current inverval.  The\nsecond item is the result of the aggregate operation.  For\nexample:</p>\n<pre>[(datetime.datetime(2010, 3, 28, 0, 0), 12), (datetime.datetime(2010, 3, 29, 0, 0), 0), ...]\n</pre>\n<p>Formatting of date information is left as an exercise to the user and may\nvary depending on interval used.</p>\n</dd>\n<dt><tt>until</tt></dt>\n<dd><p>Provide aggregate information until a given date or time, filtering the\nqueryset using <tt>lte</tt>.</p>\n<p>Positional arguments: <tt>dt</tt> a <tt>datetime.date</tt> or <tt>datetime.datetime</tt>\nobject to be used for filtering the queryset since.</p>\n<p>Keyword arguments: <tt>date_field</tt>, <tt>aggregate</tt>.</p>\n</dd>\n<dt><tt>until_now</tt></dt>\n<dd><p>Aggregate information until now.</p>\n<p>Positional arguments: <tt>dt</tt> a <tt>datetime.date</tt> or <tt>datetime.datetime</tt>\nobject to be used for filtering the queryset since (using <tt>lte</tt>).</p>\n<p>Keyword arguments: <tt>date_field</tt>, <tt>aggregate</tt>.</p>\n</dd>\n<dt><tt>after</tt></dt>\n<dd><p>Aggregate information after a given date or time, filtering the queryset\nusing <tt>gte</tt>.</p>\n<p>Positional arguments: <tt>dt</tt> a <tt>datetime.date</tt> or <tt>datetime.datetime</tt>\nobject to be used for filtering the queryset since.</p>\n<p>Keyword arguments: <tt>date_field</tt>, <tt>aggregate</tt>.</p>\n</dd>\n<dt><tt>after_now</tt></dt>\n<dd><p>Aggregate information after now.</p>\n<p>Positional arguments: <tt>dt</tt> a <tt>datetime.date</tt> or <tt>datetime.datetime</tt>\nobject to be used for filtering the queryset since (using <tt>gte</tt>).</p>\n<p>Keyword arguments: <tt>date_field</tt>, <tt>aggregate</tt>.</p>\n</dd>\n<dt><tt>pivot</tt></dt>\n<dd><p>Used by <tt>since</tt>, <tt>after</tt>, and <tt>until_now</tt> but potentially useful if\nyou would like to specify your own operator instead of the defaults.</p>\n<p>Positional arguments: <tt>dt</tt> a <tt>datetime.date</tt> or <tt>datetime.datetime</tt>\nobject to be used for filtering the queryset since (using <tt>lte</tt>).</p>\n<p>Keyword arguments: <tt>operator</tt>, <tt>date_field</tt>, <tt>aggregate</tt>.</p>\n<p>Raises <tt>InvalidOperator</tt> if the operator provided is not one of <tt>'lt'</tt>,\n<tt>'lte'</tt>, <tt>gt</tt> or <tt>gte</tt>.</p>\n</dd>\n</dl>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>If you\u2019d like to test <tt><span class=\"pre\">django-qsstats-magic</span></tt> against your local configuration, add\n<tt>qsstats</tt> to your <tt>INSTALLED_APPS</tt> and run <tt>./manage.py test qsstats</tt>.\nThe test suite assumes that <tt>django.contrib.auth</tt> is installed.</p>\n<p>For testing against different python, DB and django versions install tox\n(pip install tox) and run \u2018tox\u2019 from the source checkout:</p>\n<pre>$ tox\n</pre>\n<p>Db user \u2018qsstats_test\u2019 with password \u2018qsstats_test\u2019 and a DB \u2018qsstats_test\u2019\nshould exist.</p>\n</div>\n<div id=\"difference-from-django-qsstats\">\n<h2>Difference from django-qsstats</h2>\n<ol>\n<li>Faster time_series method using 1 sql query (currently works for MySQL and\nPostgreSQL, with a fallback to the old method for other DB backends).</li>\n<li>Single <tt>aggregate</tt> parameter instead of <tt>aggregate_field</tt> and\n<tt>aggregate_class</tt>. Default value is always <tt><span class=\"pre\">Count('id')</span></tt> and can\u2019t be\nspecified in settings.py. <tt>QUERYSETSTATS_DEFAULT_OPERATOR</tt> option is also\nunsupported now.</li>\n<li>Support for minute and hour aggregates.</li>\n<li><tt>start_date</tt> and <tt>end_date</tt> arguments are renamed to <tt>start</tt> and\n<tt>end</tt> because of 3.</li>\n<li>Internals are changed.</li>\n</ol>\n<p>I don\u2019t know if original author (Matt Croydon) would like my changes so\nI renamed a project for now. If the changes will be merged then\ndjango-qsstats-magic will become obsolete.</p>\n</div>\n\n          </div>"}, "last_serial": 5572230, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "b248de2c36af2ed61fee2a6ccc80b72b", "sha256": "b59f8a5296805e910e196dbd1dbf04c398b85d3297a226152559ca6d8b848bdf"}, "downloads": -1, "filename": "django-qsstats-magic-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b248de2c36af2ed61fee2a6ccc80b72b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3576, "upload_time": "2010-07-25T13:19:02", "upload_time_iso_8601": "2010-07-25T13:19:02.314755Z", "url": "https://files.pythonhosted.org/packages/4d/50/28bdec5dc08eddfd9da496fcd4d4188537f84a9260064aaaeae4a94fffee/django-qsstats-magic-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "91903b2e909d571d322910698a88ec05", "sha256": "123ff90082a07dadd0a9c574e9362980ed019570985fd3daf70a487dce2d94c4"}, "downloads": -1, "filename": "django-qsstats-magic-0.5.1.tar.gz", "has_sig": false, "md5_digest": "91903b2e909d571d322910698a88ec05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3570, "upload_time": "2010-07-29T20:19:23", "upload_time_iso_8601": "2010-07-29T20:19:23.146060Z", "url": "https://files.pythonhosted.org/packages/c0/0b/5b38adf95f9c1f411289b65a0c31f052f064d00158e96c7cffb4121361c9/django-qsstats-magic-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "4912996eeab81850c0ea98bcca9080ee", "sha256": "54b9ae05709b66e37dd93495801e443c87a85fa4b4b2fac0e3c5a4db6039da93"}, "downloads": -1, "filename": "django-qsstats-magic-0.5.2.tar.gz", "has_sig": false, "md5_digest": "4912996eeab81850c0ea98bcca9080ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3588, "upload_time": "2010-10-30T03:13:55", "upload_time_iso_8601": "2010-10-30T03:13:55.863012Z", "url": "https://files.pythonhosted.org/packages/b3/81/1fdb735970c54179b570be912ee3fd55e99770308c1d3223d995e4222fec/django-qsstats-magic-0.5.2.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "dae6b06e76270ec03adc174426e0f1ba", "sha256": "fcb18b68dccdc9fb0b4e7bdb96b7bdc82d6d16db4545fe179b006cecec94ff3f"}, "downloads": -1, "filename": "django-qsstats-magic-0.6.tar.gz", "has_sig": false, "md5_digest": "dae6b06e76270ec03adc174426e0f1ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6421, "upload_time": "2011-06-24T22:25:20", "upload_time_iso_8601": "2011-06-24T22:25:20.613773Z", "url": "https://files.pythonhosted.org/packages/25/1c/1974216b9ea24d941c5a918115bf7b923d7df59f16f434fc3be163f5ae35/django-qsstats-magic-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "205190e473710e9d566ce38b5d16385c", "sha256": "8d05488303b450ba644e98ba0a6e86b374a16ddc557be201cb96de3ab8a52800"}, "downloads": -1, "filename": "django-qsstats-magic-0.6.1.tar.gz", "has_sig": false, "md5_digest": "205190e473710e9d566ce38b5d16385c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7830, "upload_time": "2011-06-25T02:52:02", "upload_time_iso_8601": "2011-06-25T02:52:02.452162Z", "url": "https://files.pythonhosted.org/packages/40/62/f3beac1f2181acfc47d91c57391ee0ee80e374c8f131de09192f68dd8b47/django-qsstats-magic-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "ad108072df47c9f13401c60f24920f1c", "sha256": "97ac130422f849f21c468e3f52ea234758569d4d4c1df398e614afb458ce9e84"}, "downloads": -1, "filename": "django-qsstats-magic-0.6.2.tar.gz", "has_sig": false, "md5_digest": "ad108072df47c9f13401c60f24920f1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8044, "upload_time": "2011-09-08T16:03:43", "upload_time_iso_8601": "2011-09-08T16:03:43.337202Z", "url": "https://files.pythonhosted.org/packages/ac/c4/adf897eb297558c5fab2927994677c39a9389f6172b0926a29115562297a/django-qsstats-magic-0.6.2.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "bf4b7a7be8fb8623d48fb800129141c4", "sha256": "977a83e96a2cc15804410564d8d487102ad4c93c3bce37c8fb00cea99c388b67"}, "downloads": -1, "filename": "django-qsstats-magic-0.7.tar.gz", "has_sig": false, "md5_digest": "bf4b7a7be8fb8623d48fb800129141c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8721, "upload_time": "2012-05-11T23:31:41", "upload_time_iso_8601": "2012-05-11T23:31:41.471997Z", "url": "https://files.pythonhosted.org/packages/45/19/c735b0a07cc65dd8d5b5e63dcf89e3b35a61f98a479aec7c74e450247000/django-qsstats-magic-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "6bd9d44e00f642d7c6bd06ed7443a0e0", "sha256": "9dbe7b54303950fe54dab6e70518d33585e42b4d9835175eba1b03b4271543f9"}, "downloads": -1, "filename": "django-qsstats-magic-0.7.1.tar.gz", "has_sig": false, "md5_digest": "6bd9d44e00f642d7c6bd06ed7443a0e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8803, "upload_time": "2012-06-07T06:58:02", "upload_time_iso_8601": "2012-06-07T06:58:02.207793Z", "url": "https://files.pythonhosted.org/packages/64/db/6b6eb5524da5dfb0b783ece54e89f43cd7bd9c862fcb90f3683f2d179ce0/django-qsstats-magic-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "3f7d642d58ae5020f18317ea7b6aa054", "sha256": "eb83731ea890bcbcd7e8edcb634b70f271e0f7aa3eb9b9bf83a7ccc6e69f1565"}, "downloads": -1, "filename": "django-qsstats-magic-0.7.2.tar.gz", "has_sig": false, "md5_digest": "3f7d642d58ae5020f18317ea7b6aa054", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8957, "upload_time": "2013-04-06T10:23:11", "upload_time_iso_8601": "2013-04-06T10:23:11.584949Z", "url": "https://files.pythonhosted.org/packages/7d/ea/2e9f552ea8bda30827cab8c9223ba1e275fcd6a314a3a3a2a332547925c7/django-qsstats-magic-0.7.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "7d4dcced6571f444f9b4fece1b531fdd", "sha256": "b26cbd320b6303778d95ed333d3f18bc24dacd9d97a27e20973d038b5b565805"}, "downloads": -1, "filename": "django-qsstats-magic-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7d4dcced6571f444f9b4fece1b531fdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9090, "upload_time": "2017-08-08T11:31:51", "upload_time_iso_8601": "2017-08-08T11:31:51.424399Z", "url": "https://files.pythonhosted.org/packages/24/d7/e1059a73ed4958e0f55536e8c9701ceeff8780d6818edacdfe23eccfc213/django-qsstats-magic-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1f7fe194ada818250bc5f696c09ff742", "sha256": "73268ab20805c9f2e92b8cf54c36adfe03661d90eb5d58da69a5cb4d932c2757"}, "downloads": -1, "filename": "django-qsstats-magic-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1f7fe194ada818250bc5f696c09ff742", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8596, "upload_time": "2019-07-23T12:39:14", "upload_time_iso_8601": "2019-07-23T12:39:14.561800Z", "url": "https://files.pythonhosted.org/packages/b1/ba/4578950dd3033f23a334634ea52329a1b1287c87b9f02943181a546bb2ea/django-qsstats-magic-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1f7fe194ada818250bc5f696c09ff742", "sha256": "73268ab20805c9f2e92b8cf54c36adfe03661d90eb5d58da69a5cb4d932c2757"}, "downloads": -1, "filename": "django-qsstats-magic-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1f7fe194ada818250bc5f696c09ff742", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8596, "upload_time": "2019-07-23T12:39:14", "upload_time_iso_8601": "2019-07-23T12:39:14.561800Z", "url": "https://files.pythonhosted.org/packages/b1/ba/4578950dd3033f23a334634ea52329a1b1287c87b9f02943181a546bb2ea/django-qsstats-magic-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:30 2020"}