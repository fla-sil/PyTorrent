{"info": {"author": "Artur Barseghyan", "author_email": "artur.barseghyan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Security :: Cryptography"], "description": "===\nska\n===\nLets you easily sign data, using symmetric-key algorithm encryption. Allows\nyou to validate signed data and identify possible validation errors. Uses\nsha-(1, 224, 256, 385 and 512)/hmac for signature encryption. Allows to use\ncustom hash algorithms. Comes with shortcut functions for signing (and\nvalidating) dictionaries and URLs.\n\n.. image:: https://img.shields.io/pypi/v/ska.svg\n   :target: https://pypi.python.org/pypi/ska\n   :alt: PyPI Version\n\n.. image:: https://img.shields.io/travis/barseghyanartur/ska/master.svg\n   :target: http://travis-ci.org/barseghyanartur/ska\n   :alt: Build Status\n\n.. image:: https://img.shields.io/badge/license-GPL--2.0--only%20OR%20LGPL--2.1--or--later-blue.svg\n   :target: https://github.com/barseghyanartur/ska/#License\n   :alt: GPL-2.0-only OR LGPL-2.1-or-later\n\nKey concepts\n============\nHosts, that communicate with each other, share the Secret Key, which is used\nto sign data (requests). Secret key is never sent around.\n\nOne of the cases is signing of HTTP requests. Each (HTTP) request is signed\non the sender side using the shared Secret Key and as an outcome produces the\ntriple (``signature``, ``auth_user``, ``valid_until``) which are used to sign\nthe requests.\n\n- ``signature`` (str): Signature generated.\n- ``auth_user`` (str): User making the request. Can be anything.\n- ``valid_until`` (float|str): Signature expiration time (Unix timestamp).\n\nOn the recipient side, (HTTP request) data is validated using the shared\nSecret Key. It's being checked whether signature is valid and not expired.\n\n.. code-block:: text\n\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           Data              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   Host 1    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\u2502   Host 2    \u2502\n    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502                             \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n    \u2502 secret key  \u2502                             \u2502 secret key  \u2502\n    \u2502 'my-secret' \u2502<\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 'my-secret' \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           Data              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nFeatures\n========\nCore `ska` module\n-----------------\n- Sign dictionaries.\n- Validate signed dictionaries.\n- Sign URLs. Append and sign additional URL data.\n- Validate URLs.\n- Use one of the built-in algorythms (HMAC SHA-1, HMAC SHA-224, HMAC SHA-256,\n  HMAC SHA-384 or HMAC SHA-512) or define a custom one.\n\nDjango `ska` module (`ska.contrib.django.ska`)\n----------------------------------------------\n- Model decorators for signing absolute URLs. View (including class-based\n  views) decorators for protecting views to authorised parties only (no\n  authentication required).\n- Authentication backend for Django based on the signatures (tokens) generated\n  using `ska`, which allows you to get a password-less login to Django web\n  site. Multiple Secret Keys (per provider) supported. Comes with handy\n  callbacks (possible to customise per provider) for various states of\n  authentication.\n- Template tags for signing URLs from within templates.\n- `django-constance` integration (for password-less authentication).\n- `Django REST Framework integration`_ (for protecting ViewSets, obtaining\n  JWT tokens for authentication).\n\nPrerequisites\n=============\nPresent\n-------\n- Core ``ska`` module requires Python 2.7, 3.5, 3.6 or 3.7.\n- Django ``ska`` module (``ska.contrib.django.ska``) requires the mentioned\n  above plus Django 1.8, 1.9, 1.10, 1.11, 2.0 or 2.1. Additionally, certain\n  versions of `django-constance` and `djangorestframework` are required.\n  Specific version requirement primarily depends on the used Django version.\n  Check the `example requirements\n  <https://github.com/barseghyanartur/ska/tree/master/examples/requirements>`_\n  to find out which versions of `django-constance` and `djangorestframework`\n  have been tested with specific Django versions.\n\nPast\n----\n.. note::\n\n    In future releases (any time) compatibility with no-longer-supported\n    versions might/will be wiped out.\n\n- Dropping support of Python 3.4 has been announced in version 1.6.8. As of\n  1.6.8 everything still worked.\n- Dropping support of Django 1.5, 1.6 and 1.7 has been announced in version\n  1.6. As of 1.6 everything is still backwards compatible with mentioned\n  versions.\n- Dropping support of Python 2.6 and 3.3 has been announced in version 1.6.\n  As of 1.6 everything is still backwards compatible (as much as it's possible\n  within this package) with mentioned versions.\n\nInstallation\n============\nLatest stable version from PyPI:\n\n.. code-block:: sh\n\n    pip install ska\n\nor latest stable version from BitBucket:\n\n.. code-block:: sh\n\n    pip install https://bitbucket.org/barseghyanartur/ska/get/stable.tar.gz\n\nor latest stable version from GitHub.\n\n.. code-block:: sh\n\n    pip install https://github.com/barseghyanartur/ska/archive/stable.tar.gz\n\nUsage examples\n==============\nFor integration with Django, see the `Django integration`_ section.\n\nBasic usage\n-----------\nPure Python usage.\n\nSender side\n~~~~~~~~~~~\nSigning URLs is as simple as follows.\n\nRequired imports.\n\n.. code-block:: python\n\n    from ska import sign_url\n\nProducing a signed URL.\n\n.. code-block:: python\n\n    signed_url = sign_url(\n        auth_user='user',\n        secret_key='your-secret_key',\n        url='http://e.com/api/'\n    )\n\n.. code-block:: text\n\n    GET http://e.com/api/?valid_until=1378045287.0&auth_user=user&signature=YlZpLFsjUKBalL4x5trhkeEgqE8%3D\n\nDefault lifetime of a signature is 10 minutes (600 seconds). If you want it\nto be different, provide a ``lifetime`` argument to ``sign_url`` function.\n\nDefault name of the (GET) param holding the generated signature value\nis ``signature``. If you want it to be different, provide a ``signature_param``\nargument to ``sign_url`` function.\n\nDefault name of the (GET) param holding the ``auth_user`` value is\n``auth_user``. If you want it to be different, provide a ``auth_user_param``\nargument to ``sign_url`` function.\n\nDefault name of the (GET) param holding the ``valid_until`` value is\n`valid_until`. If you want it to be different, provide a ``valid_until_param``\nargument to ``sign_url`` function.\n\nNote, that by default a suffix '?' is added after the given ``url`` and\ngenerated signature params. If you want that suffix to be custom, provide a\n``suffix`` argument to the ``sign_url`` function. If you want it to be gone,\nset its' value to empty string.\n\nWith all customisations, it would look as follows:\n\n.. code-block:: python\n\n    from ska import HMACSHA512Signature  # Use HMAC SHA-512 algorithm\n\n    signed_url = sign_url(\n        auth_user='user',\n        secret_key='your-secret_key',\n        lifetime=120,\n        url='http://e.com/api/',\n        signature_param='signature',\n        auth_user_param='auth_user',\n        valid_until_param='valid_until',\n        signature_cls=HMACSHA512Signature\n    )\n\nIt's also possible to add additional data to the signature by providing a\n``extra`` argument (dict). Note, that additional data is signed as well.\nIf request is somehow tampered (values vary from originally provided ones),\nsignature becomes invalid.\n\n.. code-block:: python\n\n    sign_url(\n        auth_user='user',\n        secret_key='your-secret_key',\n        url='http://e.com/api/',\n        extra={\n            'email': 'doe@example.com',\n            'last_name': 'Doe',\n            'first_name': 'Joe'\n        }\n    )\n\nYou may now proceed with the signed URL request. If you use the famous\n``requests`` library, it would be as follows.\n\n.. code-block:: python\n\n    import requests\n    requests.get(signed_url)\n\nIf you want to use POST method instead, you would likely want to get a\ndictionary back, in order to append it to the POST data later.\n\nRequired imports.\n\n.. code-block:: python\n\n    from ska import signature_to_dict\n\nProducing a dictionary containing the signature data, ready to be put into\nthe request (for example POST) data. All customisations mentioned above for\nthe ``sign_url`` function, also apply to the ``signature_to_dict``:\n\n.. code-block:: python\n\n    signature_dict = signature_to_dict(\n        auth_user='user',\n        secret_key='your-secret_key'\n    )\n\n.. code-block:: text\n\n    {\n        'signature': 'YlZpLFsjUKBalL4x5trhkeEgqE8=',\n        'auth_user': 'user',\n        'valid_until': '1378045287.0'\n    }\n\nAdding of additional data to the signature works in the same way:\n\n.. code-block:: python\n\n    signature_dict = signature_to_dict(\n        auth_user='user',\n        secret_key='your-secret_key',\n        extra={\n            'email': 'john.doe@mail.example.com',\n            'first_name': 'John',\n            'last_name': 'Doe'\n        }\n    )\n\n.. code-block:: text\n\n    {\n        'auth_user': 'user',\n        'email': 'john.doe@mail.example.com',\n        'extra': 'email,first_name,last_name',\n        'first_name': 'John',\n        'last_name': 'Doe',\n        'signature': 'cnSoU/LnJ/ZhfLtDLzab3a3gkug=',\n        'valid_until': 1387616469.0\n    }\n\nIf you for some reason prefer a lower level implementation, read the same\nsection in the `Advanced usage (low-level)`_ chapter.\n\nRecipient side\n~~~~~~~~~~~~~~\nValidating the signed request data is as simple as follows.\n\nRequired imports.\n\n.. code-block:: python\n\n    from ska import validate_signed_request_data\n\nValidating the signed request data. Note, that ``data`` value is expected to\nbe a dictionary; ``request.GET`` is given as an example. It will most likely\nvary from what's used in your framework (unless you use Django).\n\n.. code-block:: python\n\n    validation_result = validate_signed_request_data(\n        data=request.GET,  # Note, that ``request.GET`` is given as example.\n        secret_key='your-secret_key'\n    )\n\nThe ``validate_signed_request_data`` produces a\n``ska.SignatureValidationResult`` object, which holds the following data.\n\n- ``result`` (bool): True if data is valid. False otherwise.\n- ``reason`` (list): List of strings, indicating validation errors. Empty list\n  in case if ``result`` is True.\n\nDefault name of the (GET) param holding the signature value is `signature`.\nIf you want it to be different, provide a ``signature_param`` argument to\n``validate_signed_request_data`` function.\n\nDefault name of the (GET) param holding the ``auth_user`` value is\n``auth_user``. If you want it to be different, provide a ``auth_user_param``\nargument to ``validate_signed_request_data`` function.\n\nDefault name of the (GET) param holding the ``valid_until`` value is\n``valid_until``. If you want it to be different, provide a\n``valid_until_param`` argument to ``validate_signed_request_data`` function.\n\nWith all customisations, it would look as follows. Note, that\n``request.GET`` is given as example.\n\n.. code-block:: python\n\n    from ska import HMACSHA256Signature  # Use HMAC SHA-256 algorithm\n\n    validation_result = validate_signed_request_data(\n        data=request.GET,\n        secret_key='your-secret_key',\n        signature_param='signature',\n        auth_user_param='auth_user',\n        valid_until_param='valid_until',\n        signature_cls=HMACSHA256Signature\n    )\n\nIf you for some reason prefer a lower level implementation, read the same\nsection in the `Advanced usage (low-level)`_ chapter.\n\nCommand line usage\n------------------\nIt's possible to generate a signed URL from command line using the\n``ska.generate_signed_url`` module.\n\n:Arguments:\n\n.. code-block:: text\n\n    -h, --help            show this help message and exit\n\n    -au AUTH_USER, --auth-user AUTH_USER\n                          `auth_user` value\n\n    -sk SECRET_KEY, --secret-key SECRET_KEY\n                          `secret_key` value\n\n    -vu VALID_UNTIL, --valid-until VALID_UNTIL\n                          `valid_until` value\n\n    -l LIFETIME, --lifetime LIFETIME\n                          `lifetime` value\n\n    -u URL, --url URL     URL to sign\n\n    -sp SIGNATURE_PARAM, --signature-param SIGNATURE_PARAM\n                          (GET) param holding the `signature` value\n\n    -aup AUTH_USER_PARAM, --auth-user-param AUTH_USER_PARAM\n                          (GET) param holding the `auth_user` value\n\n    -vup VALID_UNTIL_PARAM, --valid-until-param VALID_UNTIL_PARAM\n                          (GET) param holding the `auth_user` value\n\n:Example:\n\n.. code-block:: sh\n\n    ska-sign-url -au user -sk your-secret-key --url http://example.com\n\nAdvanced usage (low-level)\n--------------------------\nSender side\n~~~~~~~~~~~\n\nRequired imports.\n\n.. code-block:: python\n\n    from ska import Signature, RequestHelper\n\nGenerate a signature.\n\n.. code-block:: python\n\n    signature = Signature.generate_signature(\n        auth_user='user',\n        secret_key='your-secret-key'\n    )\n\nDefault lifetime of a signature is 10 minutes (600 seconds). If you want it to\nbe different, provide a ``lifetime`` argument to ``generate_signature``\nmethod.\n\n.. code-block:: python\n\n    signature = Signature.generate_signature(\n        auth_user='user',\n        secret_key='your-secret-key',\n        lifetime=120  # Signatre lifetime set to 120 seconds.\n    )\n\nAdding of additional data to the signature works in the same way as in\n``sign_url``.\n\n.. code-block:: python\n\n    signature = Signature.generate_signature(\n        auth_user='user',\n        secret_key='your-secret-key',\n        extra={\n            'email': 'doe@example.com',\n            'last_name': 'Doe',\n            'first_name': 'Joe'\n        }\n    )\n\nFor HMAC SHA-384 algorithm it would look as follows.\n\n.. code-block:: python\n\n    from ska import HMACSHA384Signature\n\n    signature = HMACSHA384Signature.generate_signature(\n        auth_user='user',\n        secret_key='your-secret-key'\n    )\n\nYour endpoint operates with certain param names and you need to wrap generated\nsignature params into the URL. In order to have the job done in an easy way,\ncreate a request helper. Feed names of the (GET) params to the request helper\nand let it make a signed endpoint URL for you.\n\n.. code-block:: python\n\n    request_helper = RequestHelper(\n        signature_param='signature',\n        auth_user_param='auth_user',\n        valid_until_param='valid_until'\n    )\n\nAppend signature params to the endpoint URL.\n\n.. code-block:: python\n\n    signed_url = request_helper.signature_to_url(\n        signature=signature,\n        endpoint_url='http://e.com/api/'\n    )\n\n.. code-block:: text\n\n    GET http://e.com/api/?valid_until=1378045287.0&auth_user=user&signature=YlZpLFsjUKBalL4x5trhkeEgqE8%3D\n\nMake a request.\n\n.. code-block:: python\n\n    import requests\n    r = requests.get(signed_url)\n\n\nFor HMAC SHA-384 algorithm it would look as follows.\n\n.. code-block:: python\n\n    from ska import HMACSHA384Signature\n\n    request_helper = RequestHelper(\n        signature_param='signature',\n        auth_user_param='auth_user',\n        valid_until_param='valid_until',\n        signature_cls=HMACSHA384Signature\n    )\n\n    signed_url = request_helper.signature_to_url(\n        signature=signature,\n        endpoint_url='http://e.com/api/'\n    )\n\nRecipient side\n~~~~~~~~~~~~~~\nRequired imports.\n\n.. code-block:: python\n\n    from ska import RequestHelper\n\nCreate a request helper. Your endpoint operates with certain param names. In\norder to have the job done in an easy way, we feed those params to the\nrequest helper and let it extract data from signed request for us.\n\n.. code-block:: python\n\n    request_helper = RequestHelper(\n        signature_param='signature',\n        auth_user_param='auth_user',\n        valid_until_param='valid_until'\n    )\n\nValidate the request data. Note, that ``request.GET`` is given just as an\nexample.\n\n.. code-block:: python\n\n    validation_result = request_helper.validate_request_data(\n        data=request.GET,\n        secret_key='your-secret-key'\n    )\n\nYour implementation further depends on you, but may look as follows.\n\n.. code-block:: python\n\n    if validation_result.result:\n        # Validated, proceed further\n        # ...\n    else:\n        # Validation not passed.\n        raise Http404(validation_result.reason)\n\nYou can also just validate the signature by calling ``validate_signature``\nmethod of the ``ska.Signature``.\n\n.. code-block:: python\n\n    Signature.validate_signature(\n        signature='EBS6ipiqRLa6TY5vxIvZU30FpnM=',\n        auth_user='user',\n        secret_key='your-secret-key',\n        valid_until='1377997396.0'\n    )\n\nDjango integration\n------------------\n``ska`` comes with Django model- and view-decorators for producing signed URLs\nand and validating the endpoints, as well as with authentication backend,\nwhich allows password-less login into Django web site using `ska` generated\nsignature tokens. There's also a template tag for signing URLs.\n\nDemo\n~~~~\nIn order to be able to quickly evaluate the ``ska``, a demo app (with a quick\ninstaller) has been created (works on Ubuntu/Debian, may work on other Linux\nsystems as well, although not guaranteed). Follow the instructions below for\nhaving the demo running within a minute.\n\nGrab the latest ``ska_example_app_installer.sh`` and execute it:\n\n.. code-block:: sh\n\n    wget -O - https://raw.github.com/barseghyanartur/ska/stable/examples/ska_example_app_installer.sh | bash\n\nOpen your browser and test the app.\n\nFoo listing (ska protected views):\n\n- URL: http://127.0.0.1:8001/foo/\n\nAuthentication page (ska authentication backend):\n\n- URL: http://127.0.0.1:8001/foo/authenticate/\n\nDjango admin interface:\n\n- URL: http://127.0.0.1:8001/admin/\n- Admin username: test_admin\n- Admin password: test\n\nConfiguration\n~~~~~~~~~~~~~\nSecret key (str) must be defined in `settings` module of your project.\n\n.. code-block:: python\n\n    SKA_SECRET_KEY = 'my-secret-key'\n\nThe following variables can be overridden in ``settings`` module of your\nproject.\n\n- ``SKA_UNAUTHORISED_REQUEST_ERROR_MESSAGE`` (str): Plain text error message.\n  Defaults to \"Unauthorised request. {0}\".\n- ``SKA_UNAUTHORISED_REQUEST_ERROR_TEMPLATE`` (str): Path to 401 template that\n  should be rendered in case of 401\n  responses. Defaults to empty string (not provided).\n- ``SKA_AUTH_USER`` (str): The ``auth_user`` argument for ``ska.sign_url``\n  function. Defaults to \"ska-auth-user\".\n\nSee the working `example project\n<https://github.com/barseghyanartur/ska/tree/stable/example>`_.\n\nMultiple secret keys\n~~~~~~~~~~~~~~~~~~~~\nImagine, you have a site to which you want to offer a password-less login for\nvarious clients/senders and you don't want them all to have one shared secret\nkey, but rather have their own one. Moreover, you specifically want to execute\nvery custom callbacks not only for each separate client/sender, but also for\ndifferent sort of users authenticating.\n\n.. code-block:: text\n\n                              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                              \u2502 Site providing \u2502\n                              \u2502 authentication \u2502\n                              \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n                              \u2502 custom secret  \u2502\n                              \u2502    keys per    \u2502\n                              \u2502     client     \u2502\n                              \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n                              \u2502 Site 1: 'sk-1' \u2502\n                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\u2502 Site 2: 'sk-2' \u2502<\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                 \u2502            \u2502 Site 3: 'sk-3' \u2502            \u2502\n                 \u2502      \u250c\u2500\u2500\u2500\u2500>\u2502 Site 4: 'sk-4' \u2502<\u2500\u2500\u2500\u2500\u2510      \u2502\n                 \u2502      \u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502      \u2502\n                 \u2502      \u2502                            \u2502      \u2502\n                 \u2502      \u2502                            \u2502      \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510  \u250c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510  \u250c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502    Site 1    \u2502  \u2502    Site 2    \u2502  \u2502    Site 3    \u2502  \u2502    Site 4    \u2502\n    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n    \u2502  secret key  \u2502  \u2502  secret key  \u2502  \u2502  secret key  \u2502  \u2502  secret key  \u2502\n    \u2502    'sk-1'    \u2502  \u2502    'sk-2'    \u2502  \u2502    'sk-3'    \u2502  \u2502    'sk-4'    \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nIn order to make the stated above possible, the concept of providers is\nintroduced. You can define a secret key, callbacks or redirect URL. See an\nexample below. Note, that keys of the ``SKA_PROVIDERS`` (\"client_1\",\n\"client_2\", etc.) are the provider keys.\n\n.. code-block:: python\n\n    SKA_PROVIDERS = {\n        # ********************************************************\n        # ******************** Basic gradation *******************\n        # ********************************************************\n        # Site 1\n        'client_1': {\n            'SECRET_KEY': 'sk-1',\n        },\n\n        # Site 2\n        'client_2': {\n            'SECRET_KEY': 'sk-2',\n        },\n\n        # Site 3\n        'client_3': {\n            'SECRET_KEY': 'sk-3',\n        },\n\n        # Site 4\n        'client_4': {\n            'SECRET_KEY': 'sk-4',\n        },\n\n        # ********************************************************\n        # ******* You make gradation as complex as you wish ******\n        # ********************************************************\n        # Client 1, group users\n        'client_1.users': {\n            'SECRET_KEY': 'client-1-users-secret-key',\n        },\n\n        # Client 1, group power_users\n        'client_1.power_users': {\n            'SECRET_KEY': 'client-1-power-users-secret-key',\n            'USER_CREATE_CALLBACK': 'foo.ska_callbacks.client1_power_users_create',\n        },\n\n        # Client 1, group admins\n        'client_1.admins': {\n            'SECRET_KEY': 'client-1-admins-secret-key',\n            'USER_CREATE_CALLBACK': 'foo.ska_callbacks.client1_admins_create',\n            'REDIRECT_AFTER_LOGIN': '/admin/'\n        },\n    }\n\nSee the `Callbacks`_ section for the list of callbacks. Note, that callbacks\ndefined in the ``SKA_PROVIDERS`` are overrides. If a certain callback isn't\ndefined in the ``SKA_PROVIDERS``, authentication backend falls back to the\nrespective default callback function.\n\nObviously, server would have to have the full list of providers defined. On\nthe client side you would only have to store the general secret key and of\ncourse the provider UID(s).\n\nWhen making a signed URL on the sender side, you should be providing the\n``provider`` key in the ``extra`` argument. See the example below for how you\nwould do it for ``client_1.power_users``.\n\n.. code-block:: python\n\n    from ska import sign_url\n    from ska.defaults import DEFAULT_PROVIDER_PARAM\n\n    server_ska_login_url = 'https://server-url.com/ska/login/'\n\n    signed_remote_ska_login_url = sign_url(\n        auth_user='test_ska_user',\n        # Using provider-specific secret key. This value shall be equal to\n        # the value of SKA_PROVIDERS['client_1.power_users']['SECRET_KEY'],\n        # defined in your projects' Django settings module.\n        secret_key='client-1-power-users-secret-key',\n        url=server_ska_login_url,\n        extra={\n            'email': 'test_ska_user@mail.example.com',\n            'first_name': 'John',\n            'last_name': 'Doe',\n            # Using provider specific string. This value shall be equal to\n            # the key string \"client_1.power_users\" of SKA_PROVIDERS,\n            # defined in your projcts' Django settings module.\n            DEFAULT_PROVIDER_PARAM: 'client_1.power_users',\n        }\n    )\n\nDjango model method decorator ``sign_url``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis is most likely be used in module ``models`` (models.py).\n\nImagine, you have a some objects listing and you want to protect the URLs to\nbe viewed by authorised parties only. You would then use\n``get_signed_absolute_url`` method when rendering the listing (HTML).\n\n.. code-block:: python\n\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from django.core.urlresolvers import reverse\n\n    from ska.contrib.django.ska.decorators import sign_url\n\n\n    class FooItem(models.Model):\n\n        title = models.CharField(_(\"Title\"), max_length=100)\n        slug = models.SlugField(unique=True, verbose_name=_(\"Slug\"))\n        body = models.TextField(_(\"Body\"))\n\n        # Unsigned absolute URL, which goes to the foo item detail page.\n        def get_absolute_url(self):\n            return reverse('foo.detail', kwargs={'slug': self.slug})\n\n        # Signed absolute URL, which goes to the foo item detail page.\n        @sign_url()\n        def get_signed_absolute_url(self):\n            return reverse('foo.detail', kwargs={'slug': self.slug})\n\nNote, that ``sign_url`` decorator accepts the following optional arguments.\n\n- ``auth_user`` (str): Username of the user making the request.\n- ``secret_key``: The shared secret key. If set, overrides\n  the ``SKA_SECRET_KEY`` variable set in the `settings` module of your\n  project.\n- ``valid_until`` (float or str ): Unix timestamp. If not given, generated\n  automatically (now + lifetime).\n- ``lifetime`` (int): Signature lifetime in seconds.\n- ``suffix`` (str): Suffix to add after the ``endpoint_url`` and before the\n  appended signature params.\n- ``signature_param`` (str): Name of the GET param name which would hold the\n  generated signature value.\n- `auth_user_param` (str): Name of the GET param name which would hold\n  the ``auth_user`` value.\n- ``valid_until_param`` (str): Name of the GET param name which would hold\n  the ``valid_until`` value.\n\nDjango view decorator ``validate_signed_request``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nTo be used to protect views (file views.py). Should be applied to\nviews (endpoints) that require signed requests. If checks are not successful,\na ``ska.contrib.django.ska.http.HttpResponseUnauthorized`` is returned, which\nis a subclass of Django's ``django.http.HttpResponse``. You can provide your\nown template for 401 error. Simply point the\n``SKA_UNAUTHORISED_REQUEST_ERROR_TEMPLATE`` in `settings` module to the right\ntemplate. See ``ska/contrib/django/ska/templates/ska/401.html`` as a template\nexample.\n\n.. code-block:: python\n\n    from ska.contrib.django.ska.decorators import validate_signed_request\n\n    # Your view that shall be protected\n    @validate_signed_request()\n    def detail(request, slug, template_name='foo/detail.html'):\n        # Your code\n\nNote, that ``validate_signed_request`` decorator accepts the following optional\narguments.\n\n- ``secret_key`` (str) : The shared secret key. If set, overrides\n  the ``SKA_SECRET_KEY`` variable  set in the ``settings`` module of your\n  project.\n- ``signature_param`` (str): Name of the (for example GET or POST) param name\n  which holds the ``signature`` value.\n- ``auth_user_param`` (str): Name of the (for example GET or POST) param name\n  which holds the ``auth_user`` value.\n- ``valid_until_param`` (str): Name of the (foe example GET or POST) param\n  name which holds the ``valid_until`` value.\n\nIf you're using class based views, use the ``m_validate_signed_request``\ndecorator instead of ``validate_signed_request``.\n\nTemplate tags\n~~~~~~~~~~~~~\nThere are two template tags modules: ``ska_tags`` and ``ska_constance_tags``.\nThey are functionally identical, although ``ska_constance_tags`` is tied to\n``django-constance``.\n\nFor standard settings configurations, template tags shall be loaded as follows:\n\n.. code-block:: html\n\n    {% load ska_tags %}\n\nFor ``django-constance`` based settings configurations, template tags shall be\nloaded as follows:\n\n.. code-block:: html\n\n    {% load ska_constance_tags %}\n\nsign_url\n++++++++\nThe ``sign_url`` template tag accepts template context and the following\nparams:\n\n- url\n- auth_user: If not given, request.user.get_username() is used.\n- secret_key: If not given, the secret key from settings is used.\n- valid_until: If not given, calculated from ``lifetime``.\n- lifetime: Defaults to ``ska.defaults.SIGNATURE_LIFETIME``.\n- suffix: Defaults to ``ska.defaults.DEFAULT_URL_SUFFIX``.\n- signature_param: Defaults to ``ska.defaultsDEFAULT_SIGNATURE_PARAM``.\n- auth_user_param: Defaults to ``ska.defaults.DEFAULT_AUTH_USER_PARAM``.\n- valid_until_param: Defaults to ``ska.defaults.DEFAULT_VALID_UNTIL_PARAM``.\n- signature_cls: Defaults to ``ska.signatures.Signature``.\n\nUsage example:\n\n.. code-block:: html\n\n    {% load ska_tags %}\n\n    {% for item in items%}\n\n        {% sign_url item.get_absolute_url as item_signed_absolute_url %}\n        <a href=\"{{ item_signed_absolute_url }}\">{{ item }}</a>\n\n    {% endfor %}\n\nprovider_sign_url\n+++++++++++++++++\nThe ``provider_sign_url`` template tag accepts template context and the\nfollowing params:\n\n- url\n- provider: Provider name.\n- auth_user: If not given, request.user.get_username() is used.\n- valid_until: If not given, calculated from ``lifetime``.\n- lifetime: Defaults to ``ska.defaults.SIGNATURE_LIFETIME``.\n- suffix: Defaults to ``ska.defaults.DEFAULT_URL_SUFFIX``.\n- signature_param: Defaults to ``ska.defaultsDEFAULT_SIGNATURE_PARAM``.\n- auth_user_param: Defaults to ``ska.defaults.DEFAULT_AUTH_USER_PARAM``.\n- valid_until_param: Defaults to ``ska.defaults.DEFAULT_VALID_UNTIL_PARAM``.\n- signature_cls: Defaults to ``ska.signatures.Signature``.\n- fail_silently: Defaults to False.\n\nUsage example:\n\n.. code-block:: html\n\n    {% load ska_tags %}\n\n    {% for item in items%}\n\n        {% provider_sign_url url=item.get_absolute_url provider='client_1.users' as item_signed_absolute_url %}\n        <a href=\"{{ item_signed_absolute_url }}\">{{ item }}</a>\n\n    {% endfor %}\n\nAuthentication backends\n~~~~~~~~~~~~~~~~~~~~~~~\nAllows you to get a password-less login to Django web site.\n\nAt the moment there are two backends implemented:\n\n- `SkaAuthenticationBackend`_: Uses standard Django settings.\n- `SkaAuthenticationConstanceBackend`_: Relies on dynamic settings\n  functionality provided by `django-constance`.\n\nBy default, number of logins using the same token is not limited. If you wish\nthat single tokens become invalid after first use, set the following variables\nto True in your projects' Django settings module.\n\n.. code-block:: python\n\n    SKA_DB_STORE_SIGNATURES = True\n    SKA_DB_PERFORM_SIGNATURE_CHECK = True\n\nSkaAuthenticationBackend\n++++++++++++++++++++++++\n``SkaAuthenticationBackend`` uses standard Django settings.\n\nRecipient side\n^^^^^^^^^^^^^^\nRecipient is the host (Django site), to which the sender tries to get\nauthenticated (log in). On the recipient side the following shall be present.\n\nsettings.py\n***********\n.. code-block:: python\n\n    AUTHENTICATION_BACKENDS = (\n        'ska.contrib.django.ska.backends.SkaAuthenticationBackend',\n        'django.contrib.auth.backends.ModelBackend',\n    )\n\n    INSTALLED_APPS = (\n        # ...\n        'ska.contrib.django.ska',\n        # ...\n    )\n\n    SKA_SECRET_KEY = 'secret-key'\n    SKA_UNAUTHORISED_REQUEST_ERROR_TEMPLATE = 'ska/401.html'\n    SKA_REDIRECT_AFTER_LOGIN = '/foo/logged-in/'\n\nurls.py\n*******\n.. code-block:: python\n\n    urlpatterns = [\n        url(r'^ska/', include('ska.contrib.django.ska.urls')),\n        url(r'^admin/', include(admin.site.urls)),\n    ]\n\nCallbacks\n*********\nThere are several callbacks implemented for authentication backend.\n\n- ``USER_VALIDATE_CALLBACK`` (string): Validate request callback. Created to\n  allow adding custom logic to the incoming authentication requests. The main\n  purpose is to provide a flexible way of raising exceptions if the incoming\n  authentication request shall be blocked (for instance, email or username is\n  in black-list or right the opposite - not in the white list). The only aim of\n  the `USER_VALIDATE_CALLBACK` is to raise a ``django.core.PermissionDenied``\n  exception if request data is invalid. In that case authentication flow will\n  halt. All other exceptions would simply be ignored (but logged) and if no\n  exception raised, the normal flow would be continued.\n- ``USER_GET_CALLBACK`` (string): Fired if user was successfully fetched from\n  database (existing user).\n- ``USER_CREATE_CALLBACK`` (string): Fired right after user has been\n  created (user didn't exist).\n- ``USER_INFO_CALLBACK`` (string): Fired upon successful authentication.\n\nExample of a callback function (let's say, it resides in module\n``my_app.ska_callbacks``):\n\n.. code-block:: python\n\n    def my_callback(user, request, signed_request_data)\n        # Your code\n\n...where:\n\n- ``user`` is ``django.contrib.auth.models.User`` instance.\n- ``request`` is ``django.http.HttpRequest`` instance.\n- ``signed_request_data`` is dictionary with signed request data.\n\nFor example, if you need to assign user to some local Django group, you could\nspecify the group name on the client side (add it to the ``extra`` dictionary)\nand based on that, add the user to the group in the callback.\n\nThe callback is a path qualifier of the callback function. Considering the\nexample above, it would be ``my_app.ska_callbacks.my_callback``.\n\nPrefix names of each callback variable with `SKA_` in your projects' settings\nmodule.\n\nExample:\n\n.. code-block:: python\n\n    SKA_USER_GET_CALLBACK = 'my_app.ska_callbacks.my_get_callback'\n    SKA_USER_CREATE_CALLBACK = 'my_app.ska_callbacks.my_create_callback'\n\nSender side\n^^^^^^^^^^^\nSender is the host (another Django web site) from which users authenticate to\nthe Recipient using signed URLs.\n\nOn the sender side, the only thing necessary to be present is the ``ska``\nmodule for Django and of course the same ``SECRET_KEY`` as on the server side.\nFurther, the server ``ska`` login URL (in our case \"/ska/login/\") shall be\nsigned using ``ska`` (for example, using ``sign_url`` function). The\n``auth_user`` param would be used as a Django username. See the example below.\n\n.. code-block:: python\n\n    from ska import sign_url\n    from ska.contrib.django.ska.settings import SECRET_KEY\n\n    server_ska_login_url = 'https://server-url.com/ska/login/'\n\n    signed_url = sign_url(\n        auth_user='test_ska_user_0',\n        secret_key=SECRET_KEY,\n        url=server_ska_login_url,\n        extra={\n            'email': 'john.doe@mail.example.com',\n            'first_name': 'John',\n            'last_name': 'Doe',\n        }\n    )\n\nNote, that you ``extra`` dictionary is optional! If ``email``, ``first_name``\nand ``last_name`` keys are present, upon successful validation, the data\nwould be saved into users' profile.\n\nPut this code, for instance, in your view and then make the generated URL\navailable in template context and render it as a URL so that user can click\non it for authenticating to the server.\n\n.. code-block:: python\n\n    def auth_to_server(request, template_name='auth_to_server.html'):\n        # Some code + obtaining the `signed_url` (code shown above)\n        context = {'signed_url': signed_url}\n\n        return render(request, template_name, context)\n\nSkaAuthenticationConstanceBackend\n+++++++++++++++++++++++++++++++++\nRelies on dynamic settings functionality provided by\n`django-constance <https://django-constance.readthedocs.io>`_.\n\n*Only differences with `SkaAuthenticationBackend` are mentioned.*\n\n.. note::\n\n    Additional requirements shall be installed. See the `constance.txt\n    <https://github.com/barseghyanartur/ska/blob/master/examples/requirements/constance.txt>`_\n    file for additional requirements (``django-constance``,\n    ``django-json-widget``, ``django-picklefield``, ``jsonfield2`` and\n    ``redis``).\n\nsettings.py\n^^^^^^^^^^^\n\n.. code-block:: python\n\n    AUTHENTICATION_BACKENDS = (\n        'ska.contrib.django.ska.backends.SkaAuthenticationConstanceBackend',\n        'django.contrib.auth.backends.ModelBackend',\n    )\n\n    INSTALLED_APPS = (\n        # ...\n        'constance',  # django-constance\n        'ska.contrib.django.ska',\n        'django_json_widget',  # For nice admin JSON widget\n        # ...\n    )\n\n    CONSTANCE_CONFIG = {\n        'SKA_PROVIDERS': (\n            {},  # The default value\n            'JSON data',  # Help text in admin\n            'JSONField_config',  # Field config\n        )\n    }\n\n    CONSTANCE_ADDITIONAL_FIELDS = {\n        'JSONField_config': [\n            # `jsonfield2` package might be used for storing the JSON field,\n            # however, at the moment of writing it has a bug which makes\n            # the JSON invalid after the first save. To avoid that, it has\n            # been patched and resides in examples/simple/jsonfield2_addons/\n            # module.\n            'jsonfield2_addons.forms.JSONField',\n            {\n                'widget': 'django_json_widget.widgets.JSONEditorWidget',\n            }\n        ],\n    }\n\n    CONSTANCE_BACKEND = 'constance.backends.redisd.RedisBackend'\n\n    CONSTANCE_REDIS_CONNECTION = {\n        'host': 'localhost',\n        'port': 6379,\n        'db': 0,\n    }\n\n.. note::\n\n    In very tiny bits, although not required, the\n    `jsonfield2 <https://pypi.org/project/jsonfield2/>`_ and\n    `django-json-widget <https://pypi.org/project/django-json-widget/>`_\n    packages are used for editing of the ``SKA_PROVIDERS`` setting in Django\n    admin.\n\n.. note::\n\n    In the example shown above, the ``RedisBackend`` of ``django-constance``\n    is used. You could also use ``DatabaseBackend``. Study the\n    `documentation <https://django-constance.readthedocs.io/en/latest/backends.html>`_\n    for more.\n\n.. note::\n\n    If your `SKA_PROVIDERS` settings are stored in the constance as ``str``\n    instead of ``dict``, set the setting\n    ``SKA_CONSTANCE_SETTINGS_PARSE_FROM_JSON`` to ``True``.\n\nWith ``DatabaseBackend`` it would look as follows:\n\n.. code-block:: python\n\n    CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'\n\n    INSTALLED_APPS = (\n        # ...\n        'constance.backends.database',\n        # ...\n    )\n\n**Quick demo of the dynamic backend**\n\n- Clone this project:\n\n.. code-block:: sh\n\n    git clone git@github.com:barseghyanartur/ska.git\n\n- Install/migrate:\n\n.. code-block:: sh\n\n    ./scripts/install.sh\n    pip install -r examples/requirements/django_2_1.txt\n    ./scripts/migrate.sh --settings=settings.constance_settings\n\n- Run:\n\n.. code-block:: sh\n\n    ./scripts/runserver.sh --settings=settings.constance_settings\n\n- Go to `http://localhost:8000/admin/constance/config/\n  <http://localhost:8000/admin/constance/config/>`_.\n\n- Paste the following code:\n\n.. code-block:: javascript\n\n    {\n       \"client_1.users\":{\n          \"SECRET_KEY\":\"client-1-users-secret-key\"\n       },\n       \"client_1.power_users\":{\n          \"SECRET_KEY\":\"client-1-power-users-secret-key\",\n          \"USER_CREATE_CALLBACK\":\"foo.ska_callbacks.client1_power_users_create\"\n       },\n       \"client_1.admins\":{\n          \"SECRET_KEY\":\"client-1-admins-secret-key\",\n          \"USER_CREATE_CALLBACK\":\"foo.ska_callbacks.client1_admins_create\",\n          \"USER_GET_CALLBACK\":\"foo.ska_callbacks.client1_admins_get\",\n          \"USER_INFO_CALLBACK\":\"foo.ska_callbacks.client1_admins_info_constance\",\n          \"REDIRECT_AFTER_LOGIN\":\"/admin/auth/user/\"\n       }\n    }\n\n- Open `http://localhost:8000/foo/authenticate/\n  <http://localhost:8000/foo/authenticate/>`_ in another browser and navigate\n  to the ``Log in - client_1.admins`` link in the ``Success`` table column of\n  the ``By provider`` section. Upon clicking, you should be logged in.\n  You have used the dynamic settings.\n\nurls.py\n^^^^^^^\n``django-constance`` specific views and urls are used. See\n`ska.contrib.django.ska.views.constance_views\n<https://github.com/barseghyanartur/ska/blob/master/src/ska/contrib/django/ska/views/constance_views.py>`_\nand `ska.contrib.django.ska.urls.constance_urls\n<https://github.com/barseghyanartur/ska/blob/master/src/ska/contrib/django/ska/urls/constance_urls.py>`_\nfor the reference.\n\n.. code-block:: python\n\n    urlpatterns = [\n        url(r'^ska/', include('ska.contrib.django.ska.urls.constance_urls')),\n        url(r'^admin/', include(admin.site.urls)),\n    ]\n\nCustom authentication backend\n+++++++++++++++++++++++++++++\nTo implement alternative authentication backend, see the following example:\n\n.. code-block:: python\n\n    from constance import config\n\n    from ska.contrib.django.backends import BaseSkaAuthenticationBackend\n\n    class SkaAuthenticationConstanceBackend(BaseSkaAuthenticationBackend):\n        \"\"\"Authentication backend.\"\"\"\n\n        def get_settings(self):\n            \"\"\"\n\n            :return:\n            \"\"\"\n            return config.SKA_PROVIDERS\n\nThat's it. The only thing the ``get_settings`` method shall return is ``dict``\nwith providers data (see the `Multiple secret keys`_ for the reference;\nreturn value of the ``get_settings` is ``SKA_PROVIDERS`` dict).\n\nPurging of old signature data\n+++++++++++++++++++++++++++++\nIf you have lots of visitors and the ``SKA_DB_STORE_SIGNATURES`` set to True,\nyour database grows. If you wish to get rid of old signature token data, you\nmay want to execute the following command using a cron job.\n\n.. code-block:: sh\n\n    ./manage.py ska_purge_stored_signature_data\n\nSecurity notes\n++++++++++++++\nFrom point of security, you should be serving the following pages via HTTP\nsecure connection:\n\n- The server login page (/ska/login/).\n- The client page containing the authentication links.\n\nDjango REST Framework integration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPermission classes\n++++++++++++++++++\nFor protecting views without actually being authenticated into the system,\nspecific permission classes are implemented (for both plan settings and\nprovider settings, as well as both plain- and provider-settings work in\ncombination with `django-constance` package).\n\nThe following permission classes are implemented:\n\n- SignedRequestRequired\n- ProviderSignedRequestRequired\n- ConstanceSignedRequestRequired\n- ConstanceProviderSignedRequestRequired\n\n**ProviderSignedRequestRequired example**\n\n.. code-block:: python\n\n    from rest_framework.viewsets import ModelViewSet\n\n    from ska.contrib.django.ska.integration.drf.permissions import (\n        ProviderSignedRequestRequired\n    )\n\n    from .models import FooItem\n    from .serializers import FooItemSerializer\n\n    class FooItemViewSet(ModelViewSet):\n        \"\"\"FooItem model viewset.\"\"\"\n\n        permission_classes = (ProviderSignedRequestRequired,)\n        queryset = FooItem.objects.all()\n        serializer_class = FooItemSerializer\n\n**Signing requests**\n\nRequests are signed the same way. Sample code:\n\n.. code-block:: python\n\n    # Given that we have `auth_user`, `auth_user_email`, `provider_name`\n    # (and the rest), the code would look as follows:\n\n    from ska import sign_url\n    from ska.defaults import DEFAULT_PROVIDER_PARAM\n\n    extra = {\n        'email': auth_user_email,\n        'first_name': first_name,\n        'last_name': last_name,\n    }\n\n    if provider_name:\n        extra.update({DEFAULT_PROVIDER_PARAM: provider_name})\n\n    signed_url = sign_url(\n        auth_user=auth_user,\n        secret_key=secret_key,\n        url=url,\n        extra=extra\n    )\n\nJWT tokens for authentication\n+++++++++++++++++++++++++++++\nFor obtaining JWT tokens for authentication. Also works with\n`django-constance`.\n\n**settings example**\n\n.. code-block:: python\n\n    REST_FRAMEWORK = {\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n            'rest_framework_jwt.authentication.JSONWebTokenAuthentication',\n            'rest_framework.authentication.SessionAuthentication',\n            'rest_framework.authentication.BasicAuthentication',\n        ),\n    }\n\n**urls example**\n\n.. code-block:: python\n\n    urlpatterns = [\n        # ...\n        url(\n            r'^ska-rest/',\n            include('ska.contrib.django.ska.integration.drf.urls.jwt_token')\n        ),\n    ]\n\n**Sample request**\n\n.. code-block:: text\n\n    http://localhost:8008/ska-rest/obtain-jwt-token/\n        ?signature=P92KWDDe0U84Alvu0tvmYoi8e8s%3D\n        &auth_user=test_ska_user\n        &valid_until=1548195246.0\n        &extra=email%2Cfirst_name%2Clast_name\n        &email=test_ska_user%40mail.example.com\n        &first_name=John\n        &last_name=Doe\n\n**Sample response**\n\n.. code-block:: text\n\n    HTTP 200 OK\n    Allow: GET, HEAD, OPTIONS\n    Content-Type: application/json\n    Vary: Accept\n\n.. code-block:: javascript\n\n    {\n        \"token\": \"eyJ0eXAiO.eyJ1c2VyX2lkIjo.m_saOvyKBO3\"\n    }\n\nTesting\n=======\nSimply type:\n\n.. code-block:: sh\n\n    ./runtests.py\n\nOr use tox:\n\n.. code-block:: sh\n\n    tox\n\nOr use tox to check specific env:\n\n.. code-block:: sh\n\n    tox -e py35\n\nOr run Django tests:\n\n.. code-block:: sh\n\n    python examples/simple/manage.py test ska --settings=settings.testing\n\nWriting documentation\n=====================\nKeep the following hierarchy.\n\n.. code-block:: text\n\n    =====\n    title\n    =====\n\n    header\n    ======\n\n    sub-header\n    ----------\n\n    sub-sub-header\n    ~~~~~~~~~~~~~~\n\n    sub-sub-sub-header\n    ++++++++++++++++++\n\n    sub-sub-sub-sub-header\n    ^^^^^^^^^^^^^^^^^^^^^^\n\n    sub-sub-sub-sub-sub-header\n    **************************\n\nLicense\n=======\nGPL-2.0-only OR LGPL-2.1-or-later\n\nSupport\n=======\nFor any issues contact me at the e-mail given in the `Author`_ section.\n\nAuthor\n======\nArtur Barseghyan <artur.barseghyan@gmail.com>\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/barseghyanartur/ska", "keywords": "sign data", "license": "GPL-2.0-only OR LGPL-2.1-or-later", "maintainer": "", "maintainer_email": "", "name": "ska", "package_url": "https://pypi.org/project/ska/", "platform": "", "project_url": "https://pypi.org/project/ska/", "project_urls": {"Homepage": "https://github.com/barseghyanartur/ska"}, "release_url": "https://pypi.org/project/ska/1.7.5/", "requires_dist": null, "requires_python": "", "summary": "Sign- and validate- data (dictionaries, strings) using symmetric-key algorithm.", "version": "1.7.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Lets you easily sign data, using symmetric-key algorithm encryption. Allows\nyou to validate signed data and identify possible validation errors. Uses\nsha-(1, 224, 256, 385 and 512)/hmac for signature encryption. Allows to use\ncustom hash algorithms. Comes with shortcut functions for signing (and\nvalidating) dictionaries and URLs.</p>\n<a href=\"https://pypi.python.org/pypi/ska\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6500298b9796fdd2fa61aa0a531e1019971aec2f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736b612e737667\"></a>\n<a href=\"http://travis-ci.org/barseghyanartur/ska\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/815083b029b4e0089d9498c1f3c0395eacdf1e33/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6261727365676879616e61727475722f736b612f6d61737465722e737667\"></a>\n<a href=\"https://github.com/barseghyanartur/ska/#License\" rel=\"nofollow\"><img alt=\"GPL-2.0-only OR LGPL-2.1-or-later\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1684db4c3f51e18482ec17d469e976a9ce8d37f5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c2d2d322e302d2d6f6e6c792532304f522532304c47504c2d2d322e312d2d6f722d2d6c617465722d626c75652e737667\"></a>\n<div id=\"key-concepts\">\n<h2>Key concepts</h2>\n<p>Hosts, that communicate with each other, share the Secret Key, which is used\nto sign data (requests). Secret key is never sent around.</p>\n<p>One of the cases is signing of HTTP requests. Each (HTTP) request is signed\non the sender side using the shared Secret Key and as an outcome produces the\ntriple (<tt>signature</tt>, <tt>auth_user</tt>, <tt>valid_until</tt>) which are used to sign\nthe requests.</p>\n<ul>\n<li><tt>signature</tt> (str): Signature generated.</li>\n<li><tt>auth_user</tt> (str): User making the request. Can be anything.</li>\n<li><tt>valid_until</tt> (float|str): Signature expiration time (Unix timestamp).</li>\n</ul>\n<p>On the recipient side, (HTTP request) data is validated using the shared\nSecret Key. It\u2019s being checked whether signature is valid and not expired.</p>\n<pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           Data              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Host 1    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502   Host 2    \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502                             \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n\u2502 secret key  \u2502                             \u2502 secret key  \u2502\n\u2502 'my-secret' \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 'my-secret' \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           Data              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<div id=\"core-ska-module\">\n<h3>Core <cite>ska</cite> module</h3>\n<ul>\n<li>Sign dictionaries.</li>\n<li>Validate signed dictionaries.</li>\n<li>Sign URLs. Append and sign additional URL data.</li>\n<li>Validate URLs.</li>\n<li>Use one of the built-in algorythms (HMAC SHA-1, HMAC SHA-224, HMAC SHA-256,\nHMAC SHA-384 or HMAC SHA-512) or define a custom one.</li>\n</ul>\n</div>\n<div id=\"django-ska-module-ska-contrib-django-ska\">\n<h3>Django <cite>ska</cite> module (<cite>ska.contrib.django.ska</cite>)</h3>\n<ul>\n<li>Model decorators for signing absolute URLs. View (including class-based\nviews) decorators for protecting views to authorised parties only (no\nauthentication required).</li>\n<li>Authentication backend for Django based on the signatures (tokens) generated\nusing <cite>ska</cite>, which allows you to get a password-less login to Django web\nsite. Multiple Secret Keys (per provider) supported. Comes with handy\ncallbacks (possible to customise per provider) for various states of\nauthentication.</li>\n<li>Template tags for signing URLs from within templates.</li>\n<li><cite>django-constance</cite> integration (for password-less authentication).</li>\n<li><a href=\"#django-rest-framework-integration\" rel=\"nofollow\">Django REST Framework integration</a> (for protecting ViewSets, obtaining\nJWT tokens for authentication).</li>\n</ul>\n</div>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<div id=\"present\">\n<h3>Present</h3>\n<ul>\n<li>Core <tt>ska</tt> module requires Python 2.7, 3.5, 3.6 or 3.7.</li>\n<li>Django <tt>ska</tt> module (<tt>ska.contrib.django.ska</tt>) requires the mentioned\nabove plus Django 1.8, 1.9, 1.10, 1.11, 2.0 or 2.1. Additionally, certain\nversions of <cite>django-constance</cite> and <cite>djangorestframework</cite> are required.\nSpecific version requirement primarily depends on the used Django version.\nCheck the <a href=\"https://github.com/barseghyanartur/ska/tree/master/examples/requirements\" rel=\"nofollow\">example requirements</a>\nto find out which versions of <cite>django-constance</cite> and <cite>djangorestframework</cite>\nhave been tested with specific Django versions.</li>\n</ul>\n</div>\n<div id=\"past\">\n<h3>Past</h3>\n<div>\n<p>Note</p>\n<p>In future releases (any time) compatibility with no-longer-supported\nversions might/will be wiped out.</p>\n</div>\n<ul>\n<li>Dropping support of Python 3.4 has been announced in version 1.6.8. As of\n1.6.8 everything still worked.</li>\n<li>Dropping support of Django 1.5, 1.6 and 1.7 has been announced in version\n1.6. As of 1.6 everything is still backwards compatible with mentioned\nversions.</li>\n<li>Dropping support of Python 2.6 and 3.3 has been announced in version 1.6.\nAs of 1.6 everything is still backwards compatible (as much as it\u2019s possible\nwithin this package) with mentioned versions.</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Latest stable version from PyPI:</p>\n<pre>pip install ska\n</pre>\n<p>or latest stable version from BitBucket:</p>\n<pre>pip install https://bitbucket.org/barseghyanartur/ska/get/stable.tar.gz\n</pre>\n<p>or latest stable version from GitHub.</p>\n<pre>pip install https://github.com/barseghyanartur/ska/archive/stable.tar.gz\n</pre>\n</div>\n<div id=\"usage-examples\">\n<h2>Usage examples</h2>\n<p>For integration with Django, see the <a href=\"#django-integration\" rel=\"nofollow\">Django integration</a> section.</p>\n<div id=\"basic-usage\">\n<h3>Basic usage</h3>\n<p>Pure Python usage.</p>\n<div id=\"sender-side\">\n<h4>Sender side</h4>\n<p>Signing URLs is as simple as follows.</p>\n<p>Required imports.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">sign_url</span>\n</pre>\n<p>Producing a signed URL.</p>\n<pre><span class=\"n\">signed_url</span> <span class=\"o\">=</span> <span class=\"n\">sign_url</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret_key'</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://e.com/api/'</span>\n<span class=\"p\">)</span>\n</pre>\n<pre>GET http://e.com/api/?valid_until=1378045287.0&amp;auth_user=user&amp;signature=YlZpLFsjUKBalL4x5trhkeEgqE8%3D\n</pre>\n<p>Default lifetime of a signature is 10 minutes (600 seconds). If you want it\nto be different, provide a <tt>lifetime</tt> argument to <tt>sign_url</tt> function.</p>\n<p>Default name of the (GET) param holding the generated signature value\nis <tt>signature</tt>. If you want it to be different, provide a <tt>signature_param</tt>\nargument to <tt>sign_url</tt> function.</p>\n<p>Default name of the (GET) param holding the <tt>auth_user</tt> value is\n<tt>auth_user</tt>. If you want it to be different, provide a <tt>auth_user_param</tt>\nargument to <tt>sign_url</tt> function.</p>\n<p>Default name of the (GET) param holding the <tt>valid_until</tt> value is\n<cite>valid_until</cite>. If you want it to be different, provide a <tt>valid_until_param</tt>\nargument to <tt>sign_url</tt> function.</p>\n<p>Note, that by default a suffix \u2018?\u2019 is added after the given <tt>url</tt> and\ngenerated signature params. If you want that suffix to be custom, provide a\n<tt>suffix</tt> argument to the <tt>sign_url</tt> function. If you want it to be gone,\nset its\u2019 value to empty string.</p>\n<p>With all customisations, it would look as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">HMACSHA512Signature</span>  <span class=\"c1\"># Use HMAC SHA-512 algorithm</span>\n\n<span class=\"n\">signed_url</span> <span class=\"o\">=</span> <span class=\"n\">sign_url</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret_key'</span><span class=\"p\">,</span>\n    <span class=\"n\">lifetime</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://e.com/api/'</span><span class=\"p\">,</span>\n    <span class=\"n\">signature_param</span><span class=\"o\">=</span><span class=\"s1\">'signature'</span><span class=\"p\">,</span>\n    <span class=\"n\">auth_user_param</span><span class=\"o\">=</span><span class=\"s1\">'auth_user'</span><span class=\"p\">,</span>\n    <span class=\"n\">valid_until_param</span><span class=\"o\">=</span><span class=\"s1\">'valid_until'</span><span class=\"p\">,</span>\n    <span class=\"n\">signature_cls</span><span class=\"o\">=</span><span class=\"n\">HMACSHA512Signature</span>\n<span class=\"p\">)</span>\n</pre>\n<p>It\u2019s also possible to add additional data to the signature by providing a\n<tt>extra</tt> argument (dict). Note, that additional data is signed as well.\nIf request is somehow tampered (values vary from originally provided ones),\nsignature becomes invalid.</p>\n<pre><span class=\"n\">sign_url</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret_key'</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://e.com/api/'</span><span class=\"p\">,</span>\n    <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'doe@example.com'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Doe'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Joe'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You may now proceed with the signed URL request. If you use the famous\n<tt>requests</tt> library, it would be as follows.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">signed_url</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to use POST method instead, you would likely want to get a\ndictionary back, in order to append it to the POST data later.</p>\n<p>Required imports.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">signature_to_dict</span>\n</pre>\n<p>Producing a dictionary containing the signature data, ready to be put into\nthe request (for example POST) data. All customisations mentioned above for\nthe <tt>sign_url</tt> function, also apply to the <tt>signature_to_dict</tt>:</p>\n<pre><span class=\"n\">signature_dict</span> <span class=\"o\">=</span> <span class=\"n\">signature_to_dict</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret_key'</span>\n<span class=\"p\">)</span>\n</pre>\n<pre>{\n    'signature': 'YlZpLFsjUKBalL4x5trhkeEgqE8=',\n    'auth_user': 'user',\n    'valid_until': '1378045287.0'\n}\n</pre>\n<p>Adding of additional data to the signature works in the same way:</p>\n<pre><span class=\"n\">signature_dict</span> <span class=\"o\">=</span> <span class=\"n\">signature_to_dict</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret_key'</span><span class=\"p\">,</span>\n    <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'john.doe@mail.example.com'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Doe'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<pre>{\n    'auth_user': 'user',\n    'email': 'john.doe@mail.example.com',\n    'extra': 'email,first_name,last_name',\n    'first_name': 'John',\n    'last_name': 'Doe',\n    'signature': 'cnSoU/LnJ/ZhfLtDLzab3a3gkug=',\n    'valid_until': 1387616469.0\n}\n</pre>\n<p>If you for some reason prefer a lower level implementation, read the same\nsection in the <a href=\"#advanced-usage-low-level\" rel=\"nofollow\">Advanced usage (low-level)</a> chapter.</p>\n</div>\n<div id=\"recipient-side\">\n<h4>Recipient side</h4>\n<p>Validating the signed request data is as simple as follows.</p>\n<p>Required imports.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">validate_signed_request_data</span>\n</pre>\n<p>Validating the signed request data. Note, that <tt>data</tt> value is expected to\nbe a dictionary; <tt>request.GET</tt> is given as an example. It will most likely\nvary from what\u2019s used in your framework (unless you use Django).</p>\n<pre><span class=\"n\">validation_result</span> <span class=\"o\">=</span> <span class=\"n\">validate_signed_request_data</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">,</span>  <span class=\"c1\"># Note, that ``request.GET`` is given as example.</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret_key'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The <tt>validate_signed_request_data</tt> produces a\n<tt>ska.SignatureValidationResult</tt> object, which holds the following data.</p>\n<ul>\n<li><tt>result</tt> (bool): True if data is valid. False otherwise.</li>\n<li><tt>reason</tt> (list): List of strings, indicating validation errors. Empty list\nin case if <tt>result</tt> is True.</li>\n</ul>\n<p>Default name of the (GET) param holding the signature value is <cite>signature</cite>.\nIf you want it to be different, provide a <tt>signature_param</tt> argument to\n<tt>validate_signed_request_data</tt> function.</p>\n<p>Default name of the (GET) param holding the <tt>auth_user</tt> value is\n<tt>auth_user</tt>. If you want it to be different, provide a <tt>auth_user_param</tt>\nargument to <tt>validate_signed_request_data</tt> function.</p>\n<p>Default name of the (GET) param holding the <tt>valid_until</tt> value is\n<tt>valid_until</tt>. If you want it to be different, provide a\n<tt>valid_until_param</tt> argument to <tt>validate_signed_request_data</tt> function.</p>\n<p>With all customisations, it would look as follows. Note, that\n<tt>request.GET</tt> is given as example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">HMACSHA256Signature</span>  <span class=\"c1\"># Use HMAC SHA-256 algorithm</span>\n\n<span class=\"n\">validation_result</span> <span class=\"o\">=</span> <span class=\"n\">validate_signed_request_data</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret_key'</span><span class=\"p\">,</span>\n    <span class=\"n\">signature_param</span><span class=\"o\">=</span><span class=\"s1\">'signature'</span><span class=\"p\">,</span>\n    <span class=\"n\">auth_user_param</span><span class=\"o\">=</span><span class=\"s1\">'auth_user'</span><span class=\"p\">,</span>\n    <span class=\"n\">valid_until_param</span><span class=\"o\">=</span><span class=\"s1\">'valid_until'</span><span class=\"p\">,</span>\n    <span class=\"n\">signature_cls</span><span class=\"o\">=</span><span class=\"n\">HMACSHA256Signature</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If you for some reason prefer a lower level implementation, read the same\nsection in the <a href=\"#advanced-usage-low-level\" rel=\"nofollow\">Advanced usage (low-level)</a> chapter.</p>\n</div>\n</div>\n<div id=\"command-line-usage\">\n<h3>Command line usage</h3>\n<p>It\u2019s possible to generate a signed URL from command line using the\n<tt>ska.generate_signed_url</tt> module.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Arguments:</th><td></td>\n</tr>\n</tbody>\n</table>\n<pre>-h, --help            show this help message and exit\n\n-au AUTH_USER, --auth-user AUTH_USER\n                      `auth_user` value\n\n-sk SECRET_KEY, --secret-key SECRET_KEY\n                      `secret_key` value\n\n-vu VALID_UNTIL, --valid-until VALID_UNTIL\n                      `valid_until` value\n\n-l LIFETIME, --lifetime LIFETIME\n                      `lifetime` value\n\n-u URL, --url URL     URL to sign\n\n-sp SIGNATURE_PARAM, --signature-param SIGNATURE_PARAM\n                      (GET) param holding the `signature` value\n\n-aup AUTH_USER_PARAM, --auth-user-param AUTH_USER_PARAM\n                      (GET) param holding the `auth_user` value\n\n-vup VALID_UNTIL_PARAM, --valid-until-param VALID_UNTIL_PARAM\n                      (GET) param holding the `auth_user` value\n</pre>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Example:</th><td></td>\n</tr>\n</tbody>\n</table>\n<pre>ska-sign-url -au user -sk your-secret-key --url http://example.com\n</pre>\n</div>\n<div id=\"advanced-usage-low-level\">\n<h3>Advanced usage (low-level)</h3>\n<div id=\"id1\">\n<h4>Sender side</h4>\n<p>Required imports.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">Signature</span><span class=\"p\">,</span> <span class=\"n\">RequestHelper</span>\n</pre>\n<p>Generate a signature.</p>\n<pre><span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">Signature</span><span class=\"o\">.</span><span class=\"n\">generate_signature</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret-key'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Default lifetime of a signature is 10 minutes (600 seconds). If you want it to\nbe different, provide a <tt>lifetime</tt> argument to <tt>generate_signature</tt>\nmethod.</p>\n<pre><span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">Signature</span><span class=\"o\">.</span><span class=\"n\">generate_signature</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret-key'</span><span class=\"p\">,</span>\n    <span class=\"n\">lifetime</span><span class=\"o\">=</span><span class=\"mi\">120</span>  <span class=\"c1\"># Signatre lifetime set to 120 seconds.</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Adding of additional data to the signature works in the same way as in\n<tt>sign_url</tt>.</p>\n<pre><span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">Signature</span><span class=\"o\">.</span><span class=\"n\">generate_signature</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret-key'</span><span class=\"p\">,</span>\n    <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'doe@example.com'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Doe'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Joe'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>For HMAC SHA-384 algorithm it would look as follows.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">HMACSHA384Signature</span>\n\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">HMACSHA384Signature</span><span class=\"o\">.</span><span class=\"n\">generate_signature</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret-key'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Your endpoint operates with certain param names and you need to wrap generated\nsignature params into the URL. In order to have the job done in an easy way,\ncreate a request helper. Feed names of the (GET) params to the request helper\nand let it make a signed endpoint URL for you.</p>\n<pre><span class=\"n\">request_helper</span> <span class=\"o\">=</span> <span class=\"n\">RequestHelper</span><span class=\"p\">(</span>\n    <span class=\"n\">signature_param</span><span class=\"o\">=</span><span class=\"s1\">'signature'</span><span class=\"p\">,</span>\n    <span class=\"n\">auth_user_param</span><span class=\"o\">=</span><span class=\"s1\">'auth_user'</span><span class=\"p\">,</span>\n    <span class=\"n\">valid_until_param</span><span class=\"o\">=</span><span class=\"s1\">'valid_until'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Append signature params to the endpoint URL.</p>\n<pre><span class=\"n\">signed_url</span> <span class=\"o\">=</span> <span class=\"n\">request_helper</span><span class=\"o\">.</span><span class=\"n\">signature_to_url</span><span class=\"p\">(</span>\n    <span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"n\">signature</span><span class=\"p\">,</span>\n    <span class=\"n\">endpoint_url</span><span class=\"o\">=</span><span class=\"s1\">'http://e.com/api/'</span>\n<span class=\"p\">)</span>\n</pre>\n<pre>GET http://e.com/api/?valid_until=1378045287.0&amp;auth_user=user&amp;signature=YlZpLFsjUKBalL4x5trhkeEgqE8%3D\n</pre>\n<p>Make a request.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">signed_url</span><span class=\"p\">)</span>\n</pre>\n<p>For HMAC SHA-384 algorithm it would look as follows.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">HMACSHA384Signature</span>\n\n<span class=\"n\">request_helper</span> <span class=\"o\">=</span> <span class=\"n\">RequestHelper</span><span class=\"p\">(</span>\n    <span class=\"n\">signature_param</span><span class=\"o\">=</span><span class=\"s1\">'signature'</span><span class=\"p\">,</span>\n    <span class=\"n\">auth_user_param</span><span class=\"o\">=</span><span class=\"s1\">'auth_user'</span><span class=\"p\">,</span>\n    <span class=\"n\">valid_until_param</span><span class=\"o\">=</span><span class=\"s1\">'valid_until'</span><span class=\"p\">,</span>\n    <span class=\"n\">signature_cls</span><span class=\"o\">=</span><span class=\"n\">HMACSHA384Signature</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">signed_url</span> <span class=\"o\">=</span> <span class=\"n\">request_helper</span><span class=\"o\">.</span><span class=\"n\">signature_to_url</span><span class=\"p\">(</span>\n    <span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"n\">signature</span><span class=\"p\">,</span>\n    <span class=\"n\">endpoint_url</span><span class=\"o\">=</span><span class=\"s1\">'http://e.com/api/'</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id2\">\n<h4>Recipient side</h4>\n<p>Required imports.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">RequestHelper</span>\n</pre>\n<p>Create a request helper. Your endpoint operates with certain param names. In\norder to have the job done in an easy way, we feed those params to the\nrequest helper and let it extract data from signed request for us.</p>\n<pre><span class=\"n\">request_helper</span> <span class=\"o\">=</span> <span class=\"n\">RequestHelper</span><span class=\"p\">(</span>\n    <span class=\"n\">signature_param</span><span class=\"o\">=</span><span class=\"s1\">'signature'</span><span class=\"p\">,</span>\n    <span class=\"n\">auth_user_param</span><span class=\"o\">=</span><span class=\"s1\">'auth_user'</span><span class=\"p\">,</span>\n    <span class=\"n\">valid_until_param</span><span class=\"o\">=</span><span class=\"s1\">'valid_until'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Validate the request data. Note, that <tt>request.GET</tt> is given just as an\nexample.</p>\n<pre><span class=\"n\">validation_result</span> <span class=\"o\">=</span> <span class=\"n\">request_helper</span><span class=\"o\">.</span><span class=\"n\">validate_request_data</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret-key'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Your implementation further depends on you, but may look as follows.</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">validation_result</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Validated, proceed further</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Validation not passed.</span>\n    <span class=\"k\">raise</span> <span class=\"n\">Http404</span><span class=\"p\">(</span><span class=\"n\">validation_result</span><span class=\"o\">.</span><span class=\"n\">reason</span><span class=\"p\">)</span>\n</pre>\n<p>You can also just validate the signature by calling <tt>validate_signature</tt>\nmethod of the <tt>ska.Signature</tt>.</p>\n<pre><span class=\"n\">Signature</span><span class=\"o\">.</span><span class=\"n\">validate_signature</span><span class=\"p\">(</span>\n    <span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"s1\">'EBS6ipiqRLa6TY5vxIvZU30FpnM='</span><span class=\"p\">,</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'your-secret-key'</span><span class=\"p\">,</span>\n    <span class=\"n\">valid_until</span><span class=\"o\">=</span><span class=\"s1\">'1377997396.0'</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"django-integration\">\n<h3>Django integration</h3>\n<p><tt>ska</tt> comes with Django model- and view-decorators for producing signed URLs\nand and validating the endpoints, as well as with authentication backend,\nwhich allows password-less login into Django web site using <cite>ska</cite> generated\nsignature tokens. There\u2019s also a template tag for signing URLs.</p>\n<div id=\"demo\">\n<h4>Demo</h4>\n<p>In order to be able to quickly evaluate the <tt>ska</tt>, a demo app (with a quick\ninstaller) has been created (works on Ubuntu/Debian, may work on other Linux\nsystems as well, although not guaranteed). Follow the instructions below for\nhaving the demo running within a minute.</p>\n<p>Grab the latest <tt>ska_example_app_installer.sh</tt> and execute it:</p>\n<pre>wget -O - https://raw.github.com/barseghyanartur/ska/stable/examples/ska_example_app_installer.sh <span class=\"p\">|</span> bash\n</pre>\n<p>Open your browser and test the app.</p>\n<p>Foo listing (ska protected views):</p>\n<ul>\n<li>URL: <a href=\"http://127.0.0.1:8001/foo/\" rel=\"nofollow\">http://127.0.0.1:8001/foo/</a></li>\n</ul>\n<p>Authentication page (ska authentication backend):</p>\n<ul>\n<li>URL: <a href=\"http://127.0.0.1:8001/foo/authenticate/\" rel=\"nofollow\">http://127.0.0.1:8001/foo/authenticate/</a></li>\n</ul>\n<p>Django admin interface:</p>\n<ul>\n<li>URL: <a href=\"http://127.0.0.1:8001/admin/\" rel=\"nofollow\">http://127.0.0.1:8001/admin/</a></li>\n<li>Admin username: test_admin</li>\n<li>Admin password: test</li>\n</ul>\n</div>\n<div id=\"configuration\">\n<h4>Configuration</h4>\n<p>Secret key (str) must be defined in <cite>settings</cite> module of your project.</p>\n<pre><span class=\"n\">SKA_SECRET_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'my-secret-key'</span>\n</pre>\n<p>The following variables can be overridden in <tt>settings</tt> module of your\nproject.</p>\n<ul>\n<li><tt>SKA_UNAUTHORISED_REQUEST_ERROR_MESSAGE</tt> (str): Plain text error message.\nDefaults to \u201cUnauthorised request. {0}\u201d.</li>\n<li><tt>SKA_UNAUTHORISED_REQUEST_ERROR_TEMPLATE</tt> (str): Path to 401 template that\nshould be rendered in case of 401\nresponses. Defaults to empty string (not provided).</li>\n<li><tt>SKA_AUTH_USER</tt> (str): The <tt>auth_user</tt> argument for <tt>ska.sign_url</tt>\nfunction. Defaults to \u201cska-auth-user\u201d.</li>\n</ul>\n<p>See the working <a href=\"https://github.com/barseghyanartur/ska/tree/stable/example\" rel=\"nofollow\">example project</a>.</p>\n</div>\n<div id=\"multiple-secret-keys\">\n<h4>Multiple secret keys</h4>\n<p>Imagine, you have a site to which you want to offer a password-less login for\nvarious clients/senders and you don\u2019t want them all to have one shared secret\nkey, but rather have their own one. Moreover, you specifically want to execute\nvery custom callbacks not only for each separate client/sender, but also for\ndifferent sort of users authenticating.</p>\n<pre>                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                          \u2502 Site providing \u2502\n                          \u2502 authentication \u2502\n                          \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n                          \u2502 custom secret  \u2502\n                          \u2502    keys per    \u2502\n                          \u2502     client     \u2502\n                          \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n                          \u2502 Site 1: 'sk-1' \u2502\n             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502 Site 2: 'sk-2' \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502            \u2502 Site 3: 'sk-3' \u2502            \u2502\n             \u2502      \u250c\u2500\u2500\u2500\u2500&gt;\u2502 Site 4: 'sk-4' \u2502&lt;\u2500\u2500\u2500\u2500\u2510      \u2502\n             \u2502      \u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502      \u2502\n             \u2502      \u2502                            \u2502      \u2502\n             \u2502      \u2502                            \u2502      \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510  \u250c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510  \u250c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Site 1    \u2502  \u2502    Site 2    \u2502  \u2502    Site 3    \u2502  \u2502    Site 4    \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n\u2502  secret key  \u2502  \u2502  secret key  \u2502  \u2502  secret key  \u2502  \u2502  secret key  \u2502\n\u2502    'sk-1'    \u2502  \u2502    'sk-2'    \u2502  \u2502    'sk-3'    \u2502  \u2502    'sk-4'    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre>\n<p>In order to make the stated above possible, the concept of providers is\nintroduced. You can define a secret key, callbacks or redirect URL. See an\nexample below. Note, that keys of the <tt>SKA_PROVIDERS</tt> (\u201cclient_1\u201d,\n\u201cclient_2\u201d, etc.) are the provider keys.</p>\n<pre><span class=\"n\">SKA_PROVIDERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># ********************************************************</span>\n    <span class=\"c1\"># ******************** Basic gradation *******************</span>\n    <span class=\"c1\"># ********************************************************</span>\n    <span class=\"c1\"># Site 1</span>\n    <span class=\"s1\">'client_1'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'SECRET_KEY'</span><span class=\"p\">:</span> <span class=\"s1\">'sk-1'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\"># Site 2</span>\n    <span class=\"s1\">'client_2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'SECRET_KEY'</span><span class=\"p\">:</span> <span class=\"s1\">'sk-2'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\"># Site 3</span>\n    <span class=\"s1\">'client_3'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'SECRET_KEY'</span><span class=\"p\">:</span> <span class=\"s1\">'sk-3'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\"># Site 4</span>\n    <span class=\"s1\">'client_4'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'SECRET_KEY'</span><span class=\"p\">:</span> <span class=\"s1\">'sk-4'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\"># ********************************************************</span>\n    <span class=\"c1\"># ******* You make gradation as complex as you wish ******</span>\n    <span class=\"c1\"># ********************************************************</span>\n    <span class=\"c1\"># Client 1, group users</span>\n    <span class=\"s1\">'client_1.users'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'SECRET_KEY'</span><span class=\"p\">:</span> <span class=\"s1\">'client-1-users-secret-key'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\"># Client 1, group power_users</span>\n    <span class=\"s1\">'client_1.power_users'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'SECRET_KEY'</span><span class=\"p\">:</span> <span class=\"s1\">'client-1-power-users-secret-key'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'USER_CREATE_CALLBACK'</span><span class=\"p\">:</span> <span class=\"s1\">'foo.ska_callbacks.client1_power_users_create'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\"># Client 1, group admins</span>\n    <span class=\"s1\">'client_1.admins'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'SECRET_KEY'</span><span class=\"p\">:</span> <span class=\"s1\">'client-1-admins-secret-key'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'USER_CREATE_CALLBACK'</span><span class=\"p\">:</span> <span class=\"s1\">'foo.ska_callbacks.client1_admins_create'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'REDIRECT_AFTER_LOGIN'</span><span class=\"p\">:</span> <span class=\"s1\">'/admin/'</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>See the <a href=\"#callbacks\" rel=\"nofollow\">Callbacks</a> section for the list of callbacks. Note, that callbacks\ndefined in the <tt>SKA_PROVIDERS</tt> are overrides. If a certain callback isn\u2019t\ndefined in the <tt>SKA_PROVIDERS</tt>, authentication backend falls back to the\nrespective default callback function.</p>\n<p>Obviously, server would have to have the full list of providers defined. On\nthe client side you would only have to store the general secret key and of\ncourse the provider UID(s).</p>\n<p>When making a signed URL on the sender side, you should be providing the\n<tt>provider</tt> key in the <tt>extra</tt> argument. See the example below for how you\nwould do it for <tt>client_1.power_users</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">sign_url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ska.defaults</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_PROVIDER_PARAM</span>\n\n<span class=\"n\">server_ska_login_url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://server-url.com/ska/login/'</span>\n\n<span class=\"n\">signed_remote_ska_login_url</span> <span class=\"o\">=</span> <span class=\"n\">sign_url</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'test_ska_user'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Using provider-specific secret key. This value shall be equal to</span>\n    <span class=\"c1\"># the value of SKA_PROVIDERS['client_1.power_users']['SECRET_KEY'],</span>\n    <span class=\"c1\"># defined in your projects' Django settings module.</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'client-1-power-users-secret-key'</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">server_ska_login_url</span><span class=\"p\">,</span>\n    <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'test_ska_user@mail.example.com'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Doe'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Using provider specific string. This value shall be equal to</span>\n        <span class=\"c1\"># the key string \"client_1.power_users\" of SKA_PROVIDERS,</span>\n        <span class=\"c1\"># defined in your projcts' Django settings module.</span>\n        <span class=\"n\">DEFAULT_PROVIDER_PARAM</span><span class=\"p\">:</span> <span class=\"s1\">'client_1.power_users'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"django-model-method-decorator-sign-url\">\n<h4>Django model method decorator <tt>sign_url</tt></h4>\n<p>This is most likely be used in module <tt>models</tt> (models.py).</p>\n<p>Imagine, you have a some objects listing and you want to protect the URLs to\nbe viewed by authorised parties only. You would then use\n<tt>get_signed_absolute_url</tt> method when rendering the listing (HTML).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.urlresolvers</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ska.contrib.django.ska.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">sign_url</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FooItem</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Title\"</span><span class=\"p\">),</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">SlugField</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Slug\"</span><span class=\"p\">))</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Body\"</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Unsigned absolute URL, which goes to the foo item detail page.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_absolute_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s1\">'foo.detail'</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'slug'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">slug</span><span class=\"p\">})</span>\n\n    <span class=\"c1\"># Signed absolute URL, which goes to the foo item detail page.</span>\n    <span class=\"nd\">@sign_url</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_signed_absolute_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s1\">'foo.detail'</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'slug'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">slug</span><span class=\"p\">})</span>\n</pre>\n<p>Note, that <tt>sign_url</tt> decorator accepts the following optional arguments.</p>\n<ul>\n<li><tt>auth_user</tt> (str): Username of the user making the request.</li>\n<li><tt>secret_key</tt>: The shared secret key. If set, overrides\nthe <tt>SKA_SECRET_KEY</tt> variable set in the <cite>settings</cite> module of your\nproject.</li>\n<li><tt>valid_until</tt> (float or str ): Unix timestamp. If not given, generated\nautomatically (now + lifetime).</li>\n<li><tt>lifetime</tt> (int): Signature lifetime in seconds.</li>\n<li><tt>suffix</tt> (str): Suffix to add after the <tt>endpoint_url</tt> and before the\nappended signature params.</li>\n<li><tt>signature_param</tt> (str): Name of the GET param name which would hold the\ngenerated signature value.</li>\n<li><cite>auth_user_param</cite> (str): Name of the GET param name which would hold\nthe <tt>auth_user</tt> value.</li>\n<li><tt>valid_until_param</tt> (str): Name of the GET param name which would hold\nthe <tt>valid_until</tt> value.</li>\n</ul>\n</div>\n<div id=\"django-view-decorator-validate-signed-request\">\n<h4>Django view decorator <tt>validate_signed_request</tt></h4>\n<p>To be used to protect views (file views.py). Should be applied to\nviews (endpoints) that require signed requests. If checks are not successful,\na <tt>ska.contrib.django.ska.http.HttpResponseUnauthorized</tt> is returned, which\nis a subclass of Django\u2019s <tt>django.http.HttpResponse</tt>. You can provide your\nown template for 401 error. Simply point the\n<tt>SKA_UNAUTHORISED_REQUEST_ERROR_TEMPLATE</tt> in <cite>settings</cite> module to the right\ntemplate. See <tt>ska/contrib/django/ska/templates/ska/401.html</tt> as a template\nexample.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska.contrib.django.ska.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">validate_signed_request</span>\n\n<span class=\"c1\"># Your view that shall be protected</span>\n<span class=\"nd\">@validate_signed_request</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">slug</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"o\">=</span><span class=\"s1\">'foo/detail.html'</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Your code</span>\n</pre>\n<p>Note, that <tt>validate_signed_request</tt> decorator accepts the following optional\narguments.</p>\n<ul>\n<li><tt>secret_key</tt> (str) : The shared secret key. If set, overrides\nthe <tt>SKA_SECRET_KEY</tt> variable  set in the <tt>settings</tt> module of your\nproject.</li>\n<li><tt>signature_param</tt> (str): Name of the (for example GET or POST) param name\nwhich holds the <tt>signature</tt> value.</li>\n<li><tt>auth_user_param</tt> (str): Name of the (for example GET or POST) param name\nwhich holds the <tt>auth_user</tt> value.</li>\n<li><tt>valid_until_param</tt> (str): Name of the (foe example GET or POST) param\nname which holds the <tt>valid_until</tt> value.</li>\n</ul>\n<p>If you\u2019re using class based views, use the <tt>m_validate_signed_request</tt>\ndecorator instead of <tt>validate_signed_request</tt>.</p>\n</div>\n<div id=\"template-tags\">\n<h4>Template tags</h4>\n<p>There are two template tags modules: <tt>ska_tags</tt> and <tt>ska_constance_tags</tt>.\nThey are functionally identical, although <tt>ska_constance_tags</tt> is tied to\n<tt><span class=\"pre\">django-constance</span></tt>.</p>\n<p>For standard settings configurations, template tags shall be loaded as follows:</p>\n<pre>{% load ska_tags %}\n</pre>\n<p>For <tt><span class=\"pre\">django-constance</span></tt> based settings configurations, template tags shall be\nloaded as follows:</p>\n<pre>{% load ska_constance_tags %}\n</pre>\n<div id=\"sign-url\">\n<h5>sign_url</h5>\n<p>The <tt>sign_url</tt> template tag accepts template context and the following\nparams:</p>\n<ul>\n<li>url</li>\n<li>auth_user: If not given, request.user.get_username() is used.</li>\n<li>secret_key: If not given, the secret key from settings is used.</li>\n<li>valid_until: If not given, calculated from <tt>lifetime</tt>.</li>\n<li>lifetime: Defaults to <tt>ska.defaults.SIGNATURE_LIFETIME</tt>.</li>\n<li>suffix: Defaults to <tt>ska.defaults.DEFAULT_URL_SUFFIX</tt>.</li>\n<li>signature_param: Defaults to <tt>ska.defaultsDEFAULT_SIGNATURE_PARAM</tt>.</li>\n<li>auth_user_param: Defaults to <tt>ska.defaults.DEFAULT_AUTH_USER_PARAM</tt>.</li>\n<li>valid_until_param: Defaults to <tt>ska.defaults.DEFAULT_VALID_UNTIL_PARAM</tt>.</li>\n<li>signature_cls: Defaults to <tt>ska.signatures.Signature</tt>.</li>\n</ul>\n<p>Usage example:</p>\n<pre>{% load ska_tags %}\n\n{% for item in items%}\n\n    {% sign_url item.get_absolute_url as item_signed_absolute_url %}\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{{ item_signed_absolute_url }}\"</span><span class=\"p\">&gt;</span>{{ item }}<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n\n{% endfor %}\n</pre>\n</div>\n<div id=\"provider-sign-url\">\n<h5>provider_sign_url</h5>\n<p>The <tt>provider_sign_url</tt> template tag accepts template context and the\nfollowing params:</p>\n<ul>\n<li>url</li>\n<li>provider: Provider name.</li>\n<li>auth_user: If not given, request.user.get_username() is used.</li>\n<li>valid_until: If not given, calculated from <tt>lifetime</tt>.</li>\n<li>lifetime: Defaults to <tt>ska.defaults.SIGNATURE_LIFETIME</tt>.</li>\n<li>suffix: Defaults to <tt>ska.defaults.DEFAULT_URL_SUFFIX</tt>.</li>\n<li>signature_param: Defaults to <tt>ska.defaultsDEFAULT_SIGNATURE_PARAM</tt>.</li>\n<li>auth_user_param: Defaults to <tt>ska.defaults.DEFAULT_AUTH_USER_PARAM</tt>.</li>\n<li>valid_until_param: Defaults to <tt>ska.defaults.DEFAULT_VALID_UNTIL_PARAM</tt>.</li>\n<li>signature_cls: Defaults to <tt>ska.signatures.Signature</tt>.</li>\n<li>fail_silently: Defaults to False.</li>\n</ul>\n<p>Usage example:</p>\n<pre>{% load ska_tags %}\n\n{% for item in items%}\n\n    {% provider_sign_url url=item.get_absolute_url provider='client_1.users' as item_signed_absolute_url %}\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{{ item_signed_absolute_url }}\"</span><span class=\"p\">&gt;</span>{{ item }}<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n\n{% endfor %}\n</pre>\n</div>\n</div>\n<div id=\"authentication-backends\">\n<h4>Authentication backends</h4>\n<p>Allows you to get a password-less login to Django web site.</p>\n<p>At the moment there are two backends implemented:</p>\n<ul>\n<li><a href=\"#skaauthenticationbackend\" rel=\"nofollow\">SkaAuthenticationBackend</a>: Uses standard Django settings.</li>\n<li><a href=\"#skaauthenticationconstancebackend\" rel=\"nofollow\">SkaAuthenticationConstanceBackend</a>: Relies on dynamic settings\nfunctionality provided by <cite>django-constance</cite>.</li>\n</ul>\n<p>By default, number of logins using the same token is not limited. If you wish\nthat single tokens become invalid after first use, set the following variables\nto True in your projects\u2019 Django settings module.</p>\n<pre><span class=\"n\">SKA_DB_STORE_SIGNATURES</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">SKA_DB_PERFORM_SIGNATURE_CHECK</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<div id=\"skaauthenticationbackend\">\n<h5>SkaAuthenticationBackend</h5>\n<p><tt>SkaAuthenticationBackend</tt> uses standard Django settings.</p>\n<div id=\"id3\">\n<h6>Recipient side</h6>\n<p>Recipient is the host (Django site), to which the sender tries to get\nauthenticated (log in). On the recipient side the following shall be present.</p>\n<div id=\"settings-py\">\n&lt;h7&gt;settings.py&lt;/h7&gt;\n<pre><span class=\"n\">AUTHENTICATION_BACKENDS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'ska.contrib.django.ska.backends.SkaAuthenticationBackend'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.auth.backends.ModelBackend'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'ska.contrib.django.ska'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">SKA_SECRET_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'secret-key'</span>\n<span class=\"n\">SKA_UNAUTHORISED_REQUEST_ERROR_TEMPLATE</span> <span class=\"o\">=</span> <span class=\"s1\">'ska/401.html'</span>\n<span class=\"n\">SKA_REDIRECT_AFTER_LOGIN</span> <span class=\"o\">=</span> <span class=\"s1\">'/foo/logged-in/'</span>\n</pre>\n</div>\n<div id=\"urls-py\">\n&lt;h7&gt;urls.py&lt;/h7&gt;\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^ska/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'ska.contrib.django.ska.urls'</span><span class=\"p\">)),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^admin/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"callbacks\">\n&lt;h7&gt;Callbacks&lt;/h7&gt;\n<p>There are several callbacks implemented for authentication backend.</p>\n<ul>\n<li><tt>USER_VALIDATE_CALLBACK</tt> (string): Validate request callback. Created to\nallow adding custom logic to the incoming authentication requests. The main\npurpose is to provide a flexible way of raising exceptions if the incoming\nauthentication request shall be blocked (for instance, email or username is\nin black-list or right the opposite - not in the white list). The only aim of\nthe <cite>USER_VALIDATE_CALLBACK</cite> is to raise a <tt>django.core.PermissionDenied</tt>\nexception if request data is invalid. In that case authentication flow will\nhalt. All other exceptions would simply be ignored (but logged) and if no\nexception raised, the normal flow would be continued.</li>\n<li><tt>USER_GET_CALLBACK</tt> (string): Fired if user was successfully fetched from\ndatabase (existing user).</li>\n<li><tt>USER_CREATE_CALLBACK</tt> (string): Fired right after user has been\ncreated (user didn\u2019t exist).</li>\n<li><tt>USER_INFO_CALLBACK</tt> (string): Fired upon successful authentication.</li>\n</ul>\n<p>Example of a callback function (let\u2019s say, it resides in module\n<tt>my_app.ska_callbacks</tt>):</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">my_callback</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">signed_request_data</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Your code</span>\n</pre>\n<p>\u2026where:</p>\n<ul>\n<li><tt>user</tt> is <tt>django.contrib.auth.models.User</tt> instance.</li>\n<li><tt>request</tt> is <tt>django.http.HttpRequest</tt> instance.</li>\n<li><tt>signed_request_data</tt> is dictionary with signed request data.</li>\n</ul>\n<p>For example, if you need to assign user to some local Django group, you could\nspecify the group name on the client side (add it to the <tt>extra</tt> dictionary)\nand based on that, add the user to the group in the callback.</p>\n<p>The callback is a path qualifier of the callback function. Considering the\nexample above, it would be <tt>my_app.ska_callbacks.my_callback</tt>.</p>\n<p>Prefix names of each callback variable with <cite>SKA_</cite> in your projects\u2019 settings\nmodule.</p>\n<p>Example:</p>\n<pre><span class=\"n\">SKA_USER_GET_CALLBACK</span> <span class=\"o\">=</span> <span class=\"s1\">'my_app.ska_callbacks.my_get_callback'</span>\n<span class=\"n\">SKA_USER_CREATE_CALLBACK</span> <span class=\"o\">=</span> <span class=\"s1\">'my_app.ska_callbacks.my_create_callback'</span>\n</pre>\n</div>\n</div>\n<div id=\"id4\">\n<h6>Sender side</h6>\n<p>Sender is the host (another Django web site) from which users authenticate to\nthe Recipient using signed URLs.</p>\n<p>On the sender side, the only thing necessary to be present is the <tt>ska</tt>\nmodule for Django and of course the same <tt>SECRET_KEY</tt> as on the server side.\nFurther, the server <tt>ska</tt> login URL (in our case \u201c/ska/login/\u201d) shall be\nsigned using <tt>ska</tt> (for example, using <tt>sign_url</tt> function). The\n<tt>auth_user</tt> param would be used as a Django username. See the example below.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">sign_url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ska.contrib.django.ska.settings</span> <span class=\"kn\">import</span> <span class=\"n\">SECRET_KEY</span>\n\n<span class=\"n\">server_ska_login_url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://server-url.com/ska/login/'</span>\n\n<span class=\"n\">signed_url</span> <span class=\"o\">=</span> <span class=\"n\">sign_url</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"s1\">'test_ska_user_0'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"n\">SECRET_KEY</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">server_ska_login_url</span><span class=\"p\">,</span>\n    <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'john.doe@mail.example.com'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Doe'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Note, that you <tt>extra</tt> dictionary is optional! If <tt>email</tt>, <tt>first_name</tt>\nand <tt>last_name</tt> keys are present, upon successful validation, the data\nwould be saved into users\u2019 profile.</p>\n<p>Put this code, for instance, in your view and then make the generated URL\navailable in template context and render it as a URL so that user can click\non it for authenticating to the server.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">auth_to_server</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"o\">=</span><span class=\"s1\">'auth_to_server.html'</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Some code + obtaining the `signed_url` (code shown above)</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'signed_url'</span><span class=\"p\">:</span> <span class=\"n\">signed_url</span><span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"skaauthenticationconstancebackend\">\n<h5>SkaAuthenticationConstanceBackend</h5>\n<p>Relies on dynamic settings functionality provided by\n<a href=\"https://django-constance.readthedocs.io\" rel=\"nofollow\">django-constance</a>.</p>\n<p><em>Only differences with `SkaAuthenticationBackend` are mentioned.</em></p>\n<div>\n<p>Note</p>\n<p>Additional requirements shall be installed. See the <a href=\"https://github.com/barseghyanartur/ska/blob/master/examples/requirements/constance.txt\" rel=\"nofollow\">constance.txt</a>\nfile for additional requirements (<tt><span class=\"pre\">django-constance</span></tt>,\n<tt><span class=\"pre\">django-json-widget</span></tt>, <tt><span class=\"pre\">django-picklefield</span></tt>, <tt>jsonfield2</tt> and\n<tt>redis</tt>).</p>\n</div>\n<div id=\"id5\">\n<h6>settings.py</h6>\n<pre><span class=\"n\">AUTHENTICATION_BACKENDS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'ska.contrib.django.ska.backends.SkaAuthenticationConstanceBackend'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.auth.backends.ModelBackend'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'constance'</span><span class=\"p\">,</span>  <span class=\"c1\"># django-constance</span>\n    <span class=\"s1\">'ska.contrib.django.ska'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_json_widget'</span><span class=\"p\">,</span>  <span class=\"c1\"># For nice admin JSON widget</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">CONSTANCE_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'SKA_PROVIDERS'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"p\">{},</span>  <span class=\"c1\"># The default value</span>\n        <span class=\"s1\">'JSON data'</span><span class=\"p\">,</span>  <span class=\"c1\"># Help text in admin</span>\n        <span class=\"s1\">'JSONField_config'</span><span class=\"p\">,</span>  <span class=\"c1\"># Field config</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">CONSTANCE_ADDITIONAL_FIELDS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'JSONField_config'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"c1\"># `jsonfield2` package might be used for storing the JSON field,</span>\n        <span class=\"c1\"># however, at the moment of writing it has a bug which makes</span>\n        <span class=\"c1\"># the JSON invalid after the first save. To avoid that, it has</span>\n        <span class=\"c1\"># been patched and resides in examples/simple/jsonfield2_addons/</span>\n        <span class=\"c1\"># module.</span>\n        <span class=\"s1\">'jsonfield2_addons.forms.JSONField'</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">'widget'</span><span class=\"p\">:</span> <span class=\"s1\">'django_json_widget.widgets.JSONEditorWidget'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">CONSTANCE_BACKEND</span> <span class=\"o\">=</span> <span class=\"s1\">'constance.backends.redisd.RedisBackend'</span>\n\n<span class=\"n\">CONSTANCE_REDIS_CONNECTION</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">6379</span><span class=\"p\">,</span>\n    <span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<div>\n<p>Note</p>\n<p>In very tiny bits, although not required, the\n<a href=\"https://pypi.org/project/jsonfield2/\" rel=\"nofollow\">jsonfield2</a> and\n<a href=\"https://pypi.org/project/django-json-widget/\" rel=\"nofollow\">django-json-widget</a>\npackages are used for editing of the <tt>SKA_PROVIDERS</tt> setting in Django\nadmin.</p>\n</div>\n<div>\n<p>Note</p>\n<p>In the example shown above, the <tt>RedisBackend</tt> of <tt><span class=\"pre\">django-constance</span></tt>\nis used. You could also use <tt>DatabaseBackend</tt>. Study the\n<a href=\"https://django-constance.readthedocs.io/en/latest/backends.html\" rel=\"nofollow\">documentation</a>\nfor more.</p>\n</div>\n<div>\n<p>Note</p>\n<p>If your <cite>SKA_PROVIDERS</cite> settings are stored in the constance as <tt>str</tt>\ninstead of <tt>dict</tt>, set the setting\n<tt>SKA_CONSTANCE_SETTINGS_PARSE_FROM_JSON</tt> to <tt>True</tt>.</p>\n</div>\n<p>With <tt>DatabaseBackend</tt> it would look as follows:</p>\n<pre><span class=\"n\">CONSTANCE_BACKEND</span> <span class=\"o\">=</span> <span class=\"s1\">'constance.backends.database.DatabaseBackend'</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'constance.backends.database'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Quick demo of the dynamic backend</strong></p>\n<ul>\n<li>Clone this project:</li>\n</ul>\n<pre>git clone git@github.com:barseghyanartur/ska.git\n</pre>\n<ul>\n<li>Install/migrate:</li>\n</ul>\n<pre>./scripts/install.sh\npip install -r examples/requirements/django_2_1.txt\n./scripts/migrate.sh --settings<span class=\"o\">=</span>settings.constance_settings\n</pre>\n<ul>\n<li>Run:</li>\n</ul>\n<pre>./scripts/runserver.sh --settings<span class=\"o\">=</span>settings.constance_settings\n</pre>\n<ul>\n<li>Go to <a href=\"http://localhost:8000/admin/constance/config/\" rel=\"nofollow\">http://localhost:8000/admin/constance/config/</a>.</li>\n<li>Paste the following code:</li>\n</ul>\n<pre><span class=\"p\">{</span>\n   <span class=\"s2\">\"client_1.users\"</span><span class=\"o\">:</span><span class=\"p\">{</span>\n      <span class=\"s2\">\"SECRET_KEY\"</span><span class=\"o\">:</span><span class=\"s2\">\"client-1-users-secret-key\"</span>\n   <span class=\"p\">},</span>\n   <span class=\"s2\">\"client_1.power_users\"</span><span class=\"o\">:</span><span class=\"p\">{</span>\n      <span class=\"s2\">\"SECRET_KEY\"</span><span class=\"o\">:</span><span class=\"s2\">\"client-1-power-users-secret-key\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"USER_CREATE_CALLBACK\"</span><span class=\"o\">:</span><span class=\"s2\">\"foo.ska_callbacks.client1_power_users_create\"</span>\n   <span class=\"p\">},</span>\n   <span class=\"s2\">\"client_1.admins\"</span><span class=\"o\">:</span><span class=\"p\">{</span>\n      <span class=\"s2\">\"SECRET_KEY\"</span><span class=\"o\">:</span><span class=\"s2\">\"client-1-admins-secret-key\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"USER_CREATE_CALLBACK\"</span><span class=\"o\">:</span><span class=\"s2\">\"foo.ska_callbacks.client1_admins_create\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"USER_GET_CALLBACK\"</span><span class=\"o\">:</span><span class=\"s2\">\"foo.ska_callbacks.client1_admins_get\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"USER_INFO_CALLBACK\"</span><span class=\"o\">:</span><span class=\"s2\">\"foo.ska_callbacks.client1_admins_info_constance\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"REDIRECT_AFTER_LOGIN\"</span><span class=\"o\">:</span><span class=\"s2\">\"/admin/auth/user/\"</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<ul>\n<li>Open <a href=\"http://localhost:8000/foo/authenticate/\" rel=\"nofollow\">http://localhost:8000/foo/authenticate/</a> in another browser and navigate\nto the <tt>Log in - client_1.admins</tt> link in the <tt>Success</tt> table column of\nthe <tt>By provider</tt> section. Upon clicking, you should be logged in.\nYou have used the dynamic settings.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h6>urls.py</h6>\n<p><tt><span class=\"pre\">django-constance</span></tt> specific views and urls are used. See\n<a href=\"https://github.com/barseghyanartur/ska/blob/master/src/ska/contrib/django/ska/views/constance_views.py\" rel=\"nofollow\">ska.contrib.django.ska.views.constance_views</a>\nand <a href=\"https://github.com/barseghyanartur/ska/blob/master/src/ska/contrib/django/ska/urls/constance_urls.py\" rel=\"nofollow\">ska.contrib.django.ska.urls.constance_urls</a>\nfor the reference.</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^ska/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'ska.contrib.django.ska.urls.constance_urls'</span><span class=\"p\">)),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^admin/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n</div>\n<div id=\"custom-authentication-backend\">\n<h5>Custom authentication backend</h5>\n<p>To implement alternative authentication backend, see the following example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">constance</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ska.contrib.django.backends</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSkaAuthenticationBackend</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SkaAuthenticationConstanceBackend</span><span class=\"p\">(</span><span class=\"n\">BaseSkaAuthenticationBackend</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Authentication backend.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_settings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"\n\n        :return:\n        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">SKA_PROVIDERS</span>\n</pre>\n<p>That\u2019s it. The only thing the <tt>get_settings</tt> method shall return is <tt>dict</tt>\nwith providers data (see the <a href=\"#multiple-secret-keys\" rel=\"nofollow\">Multiple secret keys</a> for the reference;\nreturn value of the <tt>get_settings` is ``SKA_PROVIDERS</tt> dict).</p>\n</div>\n<div id=\"purging-of-old-signature-data\">\n<h5>Purging of old signature data</h5>\n<p>If you have lots of visitors and the <tt>SKA_DB_STORE_SIGNATURES</tt> set to True,\nyour database grows. If you wish to get rid of old signature token data, you\nmay want to execute the following command using a cron job.</p>\n<pre>./manage.py ska_purge_stored_signature_data\n</pre>\n</div>\n<div id=\"security-notes\">\n<h5>Security notes</h5>\n<p>From point of security, you should be serving the following pages via HTTP\nsecure connection:</p>\n<ul>\n<li>The server login page (/ska/login/).</li>\n<li>The client page containing the authentication links.</li>\n</ul>\n</div>\n</div>\n<div id=\"django-rest-framework-integration\">\n<h4>Django REST Framework integration</h4>\n<div id=\"permission-classes\">\n<h5>Permission classes</h5>\n<p>For protecting views without actually being authenticated into the system,\nspecific permission classes are implemented (for both plan settings and\nprovider settings, as well as both plain- and provider-settings work in\ncombination with <cite>django-constance</cite> package).</p>\n<p>The following permission classes are implemented:</p>\n<ul>\n<li>SignedRequestRequired</li>\n<li>ProviderSignedRequestRequired</li>\n<li>ConstanceSignedRequestRequired</li>\n<li>ConstanceProviderSignedRequestRequired</li>\n</ul>\n<p><strong>ProviderSignedRequestRequired example</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_framework.viewsets</span> <span class=\"kn\">import</span> <span class=\"n\">ModelViewSet</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ska.contrib.django.ska.integration.drf.permissions</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">ProviderSignedRequestRequired</span>\n<span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">FooItem</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">FooItemSerializer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FooItemViewSet</span><span class=\"p\">(</span><span class=\"n\">ModelViewSet</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"FooItem model viewset.\"\"\"</span>\n\n    <span class=\"n\">permission_classes</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ProviderSignedRequestRequired</span><span class=\"p\">,)</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">FooItem</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">FooItemSerializer</span>\n</pre>\n<p><strong>Signing requests</strong></p>\n<p>Requests are signed the same way. Sample code:</p>\n<pre><span class=\"c1\"># Given that we have `auth_user`, `auth_user_email`, `provider_name`</span>\n<span class=\"c1\"># (and the rest), the code would look as follows:</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ska</span> <span class=\"kn\">import</span> <span class=\"n\">sign_url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ska.defaults</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_PROVIDER_PARAM</span>\n\n<span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"n\">auth_user_email</span><span class=\"p\">,</span>\n    <span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"n\">first_name</span><span class=\"p\">,</span>\n    <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"n\">last_name</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">if</span> <span class=\"n\">provider_name</span><span class=\"p\">:</span>\n    <span class=\"n\">extra</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"n\">DEFAULT_PROVIDER_PARAM</span><span class=\"p\">:</span> <span class=\"n\">provider_name</span><span class=\"p\">})</span>\n\n<span class=\"n\">signed_url</span> <span class=\"o\">=</span> <span class=\"n\">sign_url</span><span class=\"p\">(</span>\n    <span class=\"n\">auth_user</span><span class=\"o\">=</span><span class=\"n\">auth_user</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"n\">secret_key</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">,</span>\n    <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"n\">extra</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"jwt-tokens-for-authentication\">\n<h5>JWT tokens for authentication</h5>\n<p>For obtaining JWT tokens for authentication. Also works with\n<cite>django-constance</cite>.</p>\n<p><strong>settings example</strong></p>\n<pre><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'rest_framework.authentication.SessionAuthentication'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'rest_framework.authentication.BasicAuthentication'</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>urls example</strong></p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span>\n        <span class=\"sa\">r</span><span class=\"s1\">'^ska-rest/'</span><span class=\"p\">,</span>\n        <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'ska.contrib.django.ska.integration.drf.urls.jwt_token'</span><span class=\"p\">)</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>Sample request</strong></p>\n<pre>http://localhost:8008/ska-rest/obtain-jwt-token/\n    ?signature=P92KWDDe0U84Alvu0tvmYoi8e8s%3D\n    &amp;auth_user=test_ska_user\n    &amp;valid_until=1548195246.0\n    &amp;extra=email%2Cfirst_name%2Clast_name\n    &amp;email=test_ska_user%40mail.example.com\n    &amp;first_name=John\n    &amp;last_name=Doe\n</pre>\n<p><strong>Sample response</strong></p>\n<pre>HTTP 200 OK\nAllow: GET, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n</pre>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"token\"</span><span class=\"o\">:</span> <span class=\"s2\">\"eyJ0eXAiO.eyJ1c2VyX2lkIjo.m_saOvyKBO3\"</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Simply type:</p>\n<pre>./runtests.py\n</pre>\n<p>Or use tox:</p>\n<pre>tox\n</pre>\n<p>Or use tox to check specific env:</p>\n<pre>tox -e py35\n</pre>\n<p>Or run Django tests:</p>\n<pre>python examples/simple/manage.py <span class=\"nb\">test</span> ska --settings<span class=\"o\">=</span>settings.testing\n</pre>\n</div>\n<div id=\"writing-documentation\">\n<h2>Writing documentation</h2>\n<p>Keep the following hierarchy.</p>\n<pre>=====\ntitle\n=====\n\nheader\n======\n\nsub-header\n----------\n\nsub-sub-header\n~~~~~~~~~~~~~~\n\nsub-sub-sub-header\n++++++++++++++++++\n\nsub-sub-sub-sub-header\n^^^^^^^^^^^^^^^^^^^^^^\n\nsub-sub-sub-sub-sub-header\n**************************\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>GPL-2.0-only OR LGPL-2.1-or-later</p>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>For any issues contact me at the e-mail given in the <a href=\"#author\" rel=\"nofollow\">Author</a> section.</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Artur Barseghyan &lt;<a href=\"mailto:artur.barseghyan%40gmail.com\">artur<span>.</span>barseghyan<span>@</span>gmail<span>.</span>com</a>&gt;</p>\n</div>\n\n          </div>"}, "last_serial": 5274241, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1b801ecc9a0ee1404b8c651a05300363", "sha256": "1686383629e6b39cf786e0045b5b7a628cf928a755a3bc2a1cad70b5edf9b834"}, "downloads": -1, "filename": "ska-0.1.tar.gz", "has_sig": false, "md5_digest": "1b801ecc9a0ee1404b8c651a05300363", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5703, "upload_time": "2013-09-01T14:23:50", "upload_time_iso_8601": "2013-09-01T14:23:50.953696Z", "url": "https://files.pythonhosted.org/packages/16/fc/37d42744a03a49d15d2a2d98a79a16689898a27d99628b57f3f5f3fab247/ska-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b01e99bd4c6131853120e0f182ace12d", "sha256": "1ef23fdebb692ff4fc3dbb148b165366735894fc76076fb7b1d02dba934b374e"}, "downloads": -1, "filename": "ska-0.2.tar.gz", "has_sig": false, "md5_digest": "b01e99bd4c6131853120e0f182ace12d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7739, "upload_time": "2013-09-02T22:13:12", "upload_time_iso_8601": "2013-09-02T22:13:12.339267Z", "url": "https://files.pythonhosted.org/packages/05/36/d10520149dd5b16fe8f2ff90fe8c8b02ca940cd5b7d593bf411e26e929a4/ska-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2ee37776ee427965ce58480d11836c24", "sha256": "fd0008bba41bf45dad9edcfb487ec66297edb48b700dd3ae13a9867a0f1fca8e"}, "downloads": -1, "filename": "ska-0.3.tar.gz", "has_sig": false, "md5_digest": "2ee37776ee427965ce58480d11836c24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8807, "upload_time": "2013-09-03T21:56:54", "upload_time_iso_8601": "2013-09-03T21:56:54.010568Z", "url": "https://files.pythonhosted.org/packages/f1/d1/87f12098e6360b84522dbf0900106b9acd9b2586a915192dc47db8c79bc9/ska-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "b744cd8e5da23856e2c35c5986b4a64d", "sha256": "103a53edbf29c2458c1a69122140dfec45bd1618949ea56b88710684b41a96ec"}, "downloads": -1, "filename": "ska-0.4.tar.gz", "has_sig": false, "md5_digest": "b744cd8e5da23856e2c35c5986b4a64d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9440, "upload_time": "2013-09-04T07:38:51", "upload_time_iso_8601": "2013-09-04T07:38:51.155035Z", "url": "https://files.pythonhosted.org/packages/35/25/a57b47e7c46106c0fb88f2784d1ec2a5523200de0136f62117fbe9ecac06/ska-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "ebb27311195c4f4132a29708828ff6e3", "sha256": "7432a91c563f9dfed75d94ef9034a14a2be46a1beb11fe3522f3abac97e7083a"}, "downloads": -1, "filename": "ska-0.5.tar.gz", "has_sig": false, "md5_digest": "ebb27311195c4f4132a29708828ff6e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9742, "upload_time": "2013-09-04T20:49:31", "upload_time_iso_8601": "2013-09-04T20:49:31.076320Z", "url": "https://files.pythonhosted.org/packages/9a/92/ce23f23a9678af5baa257b47d63545f092aead597d333acc8e1bb96d84d6/ska-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "32ad73ed585f08279e65a4839d3bcd4e", "sha256": "561ab7cae9640ca1f2365c7b482fb878da3f6fbfbf82f1bd7cb430060f17167c"}, "downloads": -1, "filename": "ska-0.6.tar.gz", "has_sig": false, "md5_digest": "32ad73ed585f08279e65a4839d3bcd4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9960, "upload_time": "2013-09-06T10:46:16", "upload_time_iso_8601": "2013-09-06T10:46:16.948746Z", "url": "https://files.pythonhosted.org/packages/09/f3/b1460e9cb3beb69b985365c8b7d167c8399588f05f5ad81ff9ee93af3144/ska-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "3615f0ab561617fc40315088af5d3d5d", "sha256": "d0b6f3159c078d5e69b985bc2cad188ede8043fb0981038256ca879b73dad494"}, "downloads": -1, "filename": "ska-0.7.tar.gz", "has_sig": false, "md5_digest": "3615f0ab561617fc40315088af5d3d5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10681, "upload_time": "2013-09-12T16:45:31", "upload_time_iso_8601": "2013-09-12T16:45:31.713867Z", "url": "https://files.pythonhosted.org/packages/97/f7/efe1481cd5ded92d34aa5111f5a0777c3dc9b51c66816f000af932399601/ska-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "8c71ed000a169f45143badac4abf5f32", "sha256": "d307429ac6a554cbe0ebc16991fdb57739bff66916459a4a100c45398ec886a2"}, "downloads": -1, "filename": "ska-0.8.tar.gz", "has_sig": false, "md5_digest": "8c71ed000a169f45143badac4abf5f32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37588, "upload_time": "2013-10-12T22:39:54", "upload_time_iso_8601": "2013-10-12T22:39:54.811704Z", "url": "https://files.pythonhosted.org/packages/05/b9/07aa70c1e123c4ebfa18239b1ee3230f4fbe213be1c716d96160498ddc7c/ska-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "9ab281e1905e8339f9237261e49c7c2c", "sha256": "33c8a0d4058c6d73a9b04b6349850a87d4ea910ee235a3c4b9559305c1f276f3"}, "downloads": -1, "filename": "ska-0.9.tar.gz", "has_sig": false, "md5_digest": "9ab281e1905e8339f9237261e49c7c2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38957, "upload_time": "2013-10-16T08:18:04", "upload_time_iso_8601": "2013-10-16T08:18:04.001525Z", "url": "https://files.pythonhosted.org/packages/bb/28/b18c06844de5314d9893dabbf04590951643260773d1a6373a029ca44c31/ska-0.9.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "1f84652d1c801fc34ddc6688bbdf5141", "sha256": "5367aebff69c6bf61b636b71f2c758e408804441f10d38c7d969254c346548aa"}, "downloads": -1, "filename": "ska-1.0.tar.gz", "has_sig": false, "md5_digest": "1f84652d1c801fc34ddc6688bbdf5141", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34375, "upload_time": "2013-12-13T11:01:51", "upload_time_iso_8601": "2013-12-13T11:01:51.106105Z", "url": "https://files.pythonhosted.org/packages/4d/18/a97cd8ead515efbf979e9c04c26f009a838ada592a03fee5df29ceb431f1/ska-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "3a9a326de1dcd28f0dfd4d321fba70cf", "sha256": "5abfc537b7faac209b95e9ab09cd31bfb1284e522e5b6009f30d56d7da2483a8"}, "downloads": -1, "filename": "ska-1.1.tar.gz", "has_sig": false, "md5_digest": "3a9a326de1dcd28f0dfd4d321fba70cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42086, "upload_time": "2013-12-14T00:37:10", "upload_time_iso_8601": "2013-12-14T00:37:10.200332Z", "url": "https://files.pythonhosted.org/packages/72/09/3e8e4a88bce18a1a7ae6dca74da9ae496ded38139da8384cf68ca6db64db/ska-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "f95b7bc31855cda3a99666ffd9eca7f4", "sha256": "4822e0c71397a9363648c54a9603af854c82ff10878c725e039fd39b73bd41d8"}, "downloads": -1, "filename": "ska-1.2.tar.gz", "has_sig": false, "md5_digest": "f95b7bc31855cda3a99666ffd9eca7f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47563, "upload_time": "2013-12-17T22:14:26", "upload_time_iso_8601": "2013-12-17T22:14:26.030062Z", "url": "https://files.pythonhosted.org/packages/79/61/eab781bd6c78809259a29b5c9117363a818ff08a8fbefcc9d573ab49261c/ska-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "fa14821a1eb9e3c720fb449967abcb64", "sha256": "e8f1e5429bc510d2f2f7c79395c798e78fe3421873c7068f98e7e28896b77f42"}, "downloads": -1, "filename": "ska-1.3.tar.gz", "has_sig": false, "md5_digest": "fa14821a1eb9e3c720fb449967abcb64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50874, "upload_time": "2013-12-21T02:48:14", "upload_time_iso_8601": "2013-12-21T02:48:14.278293Z", "url": "https://files.pythonhosted.org/packages/18/00/6aa26115d315490e7420e7b227501815fa0a0ca7c0750c0b6c4f5ea56106/ska-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "d99b91db73c502fddbeefae66e9a81c5", "sha256": "5fdc1d12132d41ab245f0b0006aa191f87b64dd539d0e441d14749fe54456c8c"}, "downloads": -1, "filename": "ska-1.4.tar.gz", "has_sig": false, "md5_digest": "d99b91db73c502fddbeefae66e9a81c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53403, "upload_time": "2013-12-21T14:05:05", "upload_time_iso_8601": "2013-12-21T14:05:05.460916Z", "url": "https://files.pythonhosted.org/packages/3a/0a/dd103b20ac64b7dc16f2518fa40cca710c1dc30ff461edb65e5215a45d77/ska-1.4.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "0c54b6e30aed7981abc8644c4b41b7ed", "sha256": "a7d1804def91c1fd68a6ec5e4c53e3cffeb2f7d2b3339a07db61904ad8907460"}, "downloads": -1, "filename": "ska-1.4.1.tar.gz", "has_sig": false, "md5_digest": "0c54b6e30aed7981abc8644c4b41b7ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62285, "upload_time": "2013-12-23T16:58:36", "upload_time_iso_8601": "2013-12-23T16:58:36.117615Z", "url": "https://files.pythonhosted.org/packages/23/9b/7d26b550c67acff1f1846c9feb77537ca8c31710c85958a520e5ed193e26/ska-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "6fc9fa2834abbf4b009b5e061d38e3b9", "sha256": "2d0df4805f5eaa22e8a895a88e342c8ae4044ba61a0a58588350f7733bcbbe9f"}, "downloads": -1, "filename": "ska-1.4.2.tar.gz", "has_sig": false, "md5_digest": "6fc9fa2834abbf4b009b5e061d38e3b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61769, "upload_time": "2013-12-25T11:12:51", "upload_time_iso_8601": "2013-12-25T11:12:51.880975Z", "url": "https://files.pythonhosted.org/packages/ff/44/9764f1c533d7c8a9f14d26298ee5aed40d4d3d8f1740c35699dc1c55cc21/ska-1.4.2.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "668997a061aefaa820185d683e8d9006", "sha256": "9a8c1ac91bd819d028301e9f42623f49b9912308068c23cb32aca0c2fd47f848"}, "downloads": -1, "filename": "ska-1.4.3.tar.gz", "has_sig": false, "md5_digest": "668997a061aefaa820185d683e8d9006", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57913, "upload_time": "2014-02-28T21:23:01", "upload_time_iso_8601": "2014-02-28T21:23:01.611427Z", "url": "https://files.pythonhosted.org/packages/df/95/a6d18c41d70ec1269b73ed03c6df3dd192e5e4d27131c9e3f15c36165d49/ska-1.4.3.tar.gz", "yanked": false}], "1.4.4": [{"comment_text": "", "digests": {"md5": "eee57dc9aeea2e785c5fa2545cf8d2cf", "sha256": "1bebb5c0e1edcf26805ae6996603293e1b0e3cb611a5d28966d042d512f97d03"}, "downloads": -1, "filename": "ska-1.4.4.tar.gz", "has_sig": false, "md5_digest": "eee57dc9aeea2e785c5fa2545cf8d2cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57368, "upload_time": "2014-05-06T14:43:10", "upload_time_iso_8601": "2014-05-06T14:43:10.815750Z", "url": "https://files.pythonhosted.org/packages/dc/73/0690f8983d143796de80f73007eee93fb9db563db8d56afbf92020dc48f8/ska-1.4.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "274bbce4bca854e096685da483f34526", "sha256": "5f381fb422ce27bf6d385d40920e8bf256e714881cea619f9d7dfaef62a29783"}, "downloads": -1, "filename": "ska-1.5.tar.gz", "has_sig": false, "md5_digest": "274bbce4bca854e096685da483f34526", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60169, "upload_time": "2014-06-04T16:33:19", "upload_time_iso_8601": "2014-06-04T16:33:19.387858Z", "url": "https://files.pythonhosted.org/packages/3c/74/35e527b487f18ec2036842e7aa436d56c2df178e16a508dcf93f6ab7d80a/ska-1.5.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "cb4b715c21e593baec6fb85dfd9a86df", "sha256": "ce42c7f90f97754664f5452d3308ea2237349d16889caf44eddde6bb880bb3fc"}, "downloads": -1, "filename": "ska-1.6-py2-none-any.whl", "has_sig": false, "md5_digest": "cb4b715c21e593baec6fb85dfd9a86df", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 64463, "upload_time": "2016-12-02T22:52:38", "upload_time_iso_8601": "2016-12-02T22:52:38.450296Z", "url": "https://files.pythonhosted.org/packages/fa/0c/185960ad6ccf8a2fb0413460b7183397c399593042b0fafc8470fb081d64/ska-1.6-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a05a000c8fc6bdbb969c3244a75a323", "sha256": "75b9eeaab47e82d2b36294d78c20a0e4c3d23d98ebcf7ab5fda71f8c45db15f5"}, "downloads": -1, "filename": "ska-1.6.tar.gz", "has_sig": false, "md5_digest": "4a05a000c8fc6bdbb969c3244a75a323", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66023, "upload_time": "2016-12-02T22:52:35", "upload_time_iso_8601": "2016-12-02T22:52:35.023671Z", "url": "https://files.pythonhosted.org/packages/93/c5/873b1b3166dc7aada246b411ae2d9f0f15b7419a4ad2dabb0ec483d4736b/ska-1.6.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "b4e704c15ba6a5691a9e2d2661554589", "sha256": "a09b7fae69fbb8cb8ff990aa1ad379e9f6179bd9956a0183a6925b41d67257a2"}, "downloads": -1, "filename": "ska-1.6.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b4e704c15ba6a5691a9e2d2661554589", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 64897, "upload_time": "2016-12-03T22:02:39", "upload_time_iso_8601": "2016-12-03T22:02:39.354590Z", "url": "https://files.pythonhosted.org/packages/0e/1d/26abecab592711486d6e6190d3e9558d025948cb8fa8a2e81aea43ec81a1/ska-1.6.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b613227b7a483692288b670ebdd35734", "sha256": "f5d3150392c994a8abf552cbc1953f47111785fd7165cb06dab8441347708db3"}, "downloads": -1, "filename": "ska-1.6.1.tar.gz", "has_sig": false, "md5_digest": "b613227b7a483692288b670ebdd35734", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66842, "upload_time": "2016-12-03T22:02:36", "upload_time_iso_8601": "2016-12-03T22:02:36.551819Z", "url": "https://files.pythonhosted.org/packages/a0/df/e23169db84041798395152732b812cb5a2ba61bff30cfdf04be3f9cbc656/ska-1.6.1.tar.gz", "yanked": false}], "1.6.10": [{"comment_text": "", "digests": {"md5": "ad31609e6e7a2695280e9d40cc120272", "sha256": "e50eddf3ce0970d4867241fdb42efefa68ae84f95c5ceceb5e1912a85515ef0d"}, "downloads": -1, "filename": "ska-1.6.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ad31609e6e7a2695280e9d40cc120272", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 74662, "upload_time": "2018-12-16T23:09:23", "upload_time_iso_8601": "2018-12-16T23:09:23.006639Z", "url": "https://files.pythonhosted.org/packages/23/81/1fa1ec6d488e1b07f676f363b98ffc94bd548bfdea1cdbf5bff51578ff2a/ska-1.6.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68b88807da4c2a7e1b516d959dcf7b19", "sha256": "cbc4d28e3daaacd92592b3eea1facb9eb7820281767dd97820449335b99231a9"}, "downloads": -1, "filename": "ska-1.6.10.tar.gz", "has_sig": false, "md5_digest": "68b88807da4c2a7e1b516d959dcf7b19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64781, "upload_time": "2018-12-16T23:09:20", "upload_time_iso_8601": "2018-12-16T23:09:20.444376Z", "url": "https://files.pythonhosted.org/packages/0f/da/75e305625e0443ceb9b5610016cbb781797708143df7d6005317d58125cd/ska-1.6.10.tar.gz", "yanked": false}], "1.6.11": [{"comment_text": "", "digests": {"md5": "74d7fba29e9541fe8d7c54584b8a7195", "sha256": "336b73a296411b5f89bd3cde74509d884b9f66be5753fba92553578d96e4dbf1"}, "downloads": -1, "filename": "ska-1.6.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "74d7fba29e9541fe8d7c54584b8a7195", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 83841, "upload_time": "2018-12-20T22:28:22", "upload_time_iso_8601": "2018-12-20T22:28:22.012600Z", "url": "https://files.pythonhosted.org/packages/5d/ec/8dd6b0dd5e916fbde5e9be9541e585b532d97e843c6534bfea9e0642c5d1/ska-1.6.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "308d9b6d1f762197c460ae90aef0573e", "sha256": "d221a3fc488528b9747ce53482707c95ddc7486a8823f087a67c062e010b4e4a"}, "downloads": -1, "filename": "ska-1.6.11.tar.gz", "has_sig": false, "md5_digest": "308d9b6d1f762197c460ae90aef0573e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71587, "upload_time": "2018-12-20T22:28:19", "upload_time_iso_8601": "2018-12-20T22:28:19.204775Z", "url": "https://files.pythonhosted.org/packages/43/3b/75a1bd068bc6f9191561141998565dd1e2f82f41ca4c3de16b3f6a0aa3d7/ska-1.6.11.tar.gz", "yanked": false}], "1.6.12": [{"comment_text": "", "digests": {"md5": "248fa530636e32cb66e12d1a521b5f17", "sha256": "f0c7e25715b1e6c71e8d25dfc0f01309b98c94f9f2e2f8dfc6ae0dbd6d42f53b"}, "downloads": -1, "filename": "ska-1.6.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "248fa530636e32cb66e12d1a521b5f17", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 84851, "upload_time": "2018-12-24T23:28:31", "upload_time_iso_8601": "2018-12-24T23:28:31.032091Z", "url": "https://files.pythonhosted.org/packages/b9/3b/4d66a65ff6a5a6e9034241dca53b2a83b99d42f94c495cfd43051b2a6404/ska-1.6.12-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed12cdb087def648a348c2b9b6ad00f3", "sha256": "3266f60ef05effaacac6998d5627d16acaa355e992294ffb9fac5d9f71563dd8"}, "downloads": -1, "filename": "ska-1.6.12.tar.gz", "has_sig": false, "md5_digest": "ed12cdb087def648a348c2b9b6ad00f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73037, "upload_time": "2018-12-24T23:28:28", "upload_time_iso_8601": "2018-12-24T23:28:28.437321Z", "url": "https://files.pythonhosted.org/packages/4c/2f/4b6eed1299e8582c77f2332015d9a1786f9a8a88ed2a3ff6a6adac222c29/ska-1.6.12.tar.gz", "yanked": false}], "1.6.2": [{"comment_text": "", "digests": {"md5": "efb0a6d14057b564003c1ba8878d59f0", "sha256": "b6ed3f425a02a7ae9e88100027dfce92e2bb467cdbc0cf2b6d0515d3e922789a"}, "downloads": -1, "filename": "ska-1.6.2-py2-none-any.whl", "has_sig": false, "md5_digest": "efb0a6d14057b564003c1ba8878d59f0", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 65002, "upload_time": "2016-12-03T22:37:34", "upload_time_iso_8601": "2016-12-03T22:37:34.978995Z", "url": "https://files.pythonhosted.org/packages/39/55/ea426e830dccf95635d720caeeb8ee29dce71db0140f77f9f79c9aa107da/ska-1.6.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edccd41045b50acee4d14447c912596c", "sha256": "222590eaa473719566536c6e08394f671a355066f6e4cd40ec48e0210fd7cc26"}, "downloads": -1, "filename": "ska-1.6.2.tar.gz", "has_sig": false, "md5_digest": "edccd41045b50acee4d14447c912596c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66933, "upload_time": "2016-12-03T22:37:32", "upload_time_iso_8601": "2016-12-03T22:37:32.166135Z", "url": "https://files.pythonhosted.org/packages/58/d3/85f62f775b812b7d230a0218900a64519195bc290622ca9f6af172a24887/ska-1.6.2.tar.gz", "yanked": false}], "1.6.3": [{"comment_text": "", "digests": {"md5": "cb3579174d05660f28509ad52fd30412", "sha256": "5543989388d60cfa52525542ad3bf1c8bd3cda028f252f3e5607e9483b8da251"}, "downloads": -1, "filename": "ska-1.6.3-py2-none-any.whl", "has_sig": false, "md5_digest": "cb3579174d05660f28509ad52fd30412", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 65027, "upload_time": "2016-12-04T21:37:10", "upload_time_iso_8601": "2016-12-04T21:37:10.050962Z", "url": "https://files.pythonhosted.org/packages/b2/22/7d7d5fc21e2dc0360ac4b5dd754949cd68cdbbd4998c6c85ce55ac45478c/ska-1.6.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9212682ff035d3ee055f8c20b6d8bc32", "sha256": "fed1b99bae9a1020f86f171c840341fdfbc8d6acd44c850280bd64f2be60ba94"}, "downloads": -1, "filename": "ska-1.6.3.tar.gz", "has_sig": false, "md5_digest": "9212682ff035d3ee055f8c20b6d8bc32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66976, "upload_time": "2016-12-04T21:37:06", "upload_time_iso_8601": "2016-12-04T21:37:06.622414Z", "url": "https://files.pythonhosted.org/packages/ca/45/bf1ab8ceae86267b97214de57d5b500b286a5403cf364b5999d8effffc18/ska-1.6.3.tar.gz", "yanked": false}], "1.6.4": [{"comment_text": "", "digests": {"md5": "0e65c8f1d2f87d3ceedb1aa1fb8b1d7f", "sha256": "1c766cf24b450479baaf125db92115d3d2b5cccbd3e3b7ada3f0e80c534a955a"}, "downloads": -1, "filename": "ska-1.6.4-py2-none-any.whl", "has_sig": false, "md5_digest": "0e65c8f1d2f87d3ceedb1aa1fb8b1d7f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 66766, "upload_time": "2016-12-06T00:26:39", "upload_time_iso_8601": "2016-12-06T00:26:39.328743Z", "url": "https://files.pythonhosted.org/packages/d5/5a/6ee06891a867803220b042fe1b0d608fcde2109e71f0c200ae85ec61a610/ska-1.6.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "610c1ae25e8feb4349ff9a3ae4c6e67a", "sha256": "747257885f83f5de0ca3d7649f5b4f2695e0620e664332689dbd76ae9966bbf7"}, "downloads": -1, "filename": "ska-1.6.4.tar.gz", "has_sig": false, "md5_digest": "610c1ae25e8feb4349ff9a3ae4c6e67a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68355, "upload_time": "2016-12-06T00:26:36", "upload_time_iso_8601": "2016-12-06T00:26:36.304396Z", "url": "https://files.pythonhosted.org/packages/79/3e/347fe3e7a80bf208903b19d8d5473bb1f702ca0a5159e90cf327eb48a93c/ska-1.6.4.tar.gz", "yanked": false}], "1.6.5": [{"comment_text": "", "digests": {"md5": "c2bf1df66c9d94735b6ec27bc4778a04", "sha256": "82e856af8f2b05a79b6182c54d8afd13f89b24d3f9b669e7bb577f1ea1ae63b9"}, "downloads": -1, "filename": "ska-1.6.5-py2-none-any.whl", "has_sig": false, "md5_digest": "c2bf1df66c9d94735b6ec27bc4778a04", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 66792, "upload_time": "2016-12-06T22:08:26", "upload_time_iso_8601": "2016-12-06T22:08:26.173835Z", "url": "https://files.pythonhosted.org/packages/d2/68/47b26d9179e0a0473de02c19721de32b6381a7447eee7828293c3490a69a/ska-1.6.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb7e1afaa8a143b2e924fee35cdc33cf", "sha256": "e2be503c9a5917f8509805067107b027f2f40261755389a186d98059d3a220cc"}, "downloads": -1, "filename": "ska-1.6.5.tar.gz", "has_sig": false, "md5_digest": "eb7e1afaa8a143b2e924fee35cdc33cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68361, "upload_time": "2016-12-06T22:08:23", "upload_time_iso_8601": "2016-12-06T22:08:23.687222Z", "url": "https://files.pythonhosted.org/packages/6b/4f/5bd464a340e2b811e6affdffef48c84e84a345a5a468ba218c1c1fc83eee/ska-1.6.5.tar.gz", "yanked": false}], "1.6.6": [{"comment_text": "", "digests": {"md5": "b7660a9d503c56b3f12109d027e56cd4", "sha256": "7d7eb9647e4bccd53c24d9aa6f04fd55617335c6824601d31c8e9f66f9e76315"}, "downloads": -1, "filename": "ska-1.6.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b7660a9d503c56b3f12109d027e56cd4", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 66821, "upload_time": "2017-02-09T21:57:10", "upload_time_iso_8601": "2017-02-09T21:57:10.314868Z", "url": "https://files.pythonhosted.org/packages/60/61/4714d35db5d1e07212c61c4c4f302b7a68bb94873dd69133b710b3bf1fb6/ska-1.6.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9b8be234675205a81669ea3a7aa943f", "sha256": "28e6fc4680e7d5581c76346b140439fb99efaffa21a25bf5c88613a3334aa846"}, "downloads": -1, "filename": "ska-1.6.6.tar.gz", "has_sig": false, "md5_digest": "c9b8be234675205a81669ea3a7aa943f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68355, "upload_time": "2017-02-09T21:57:06", "upload_time_iso_8601": "2017-02-09T21:57:06.813773Z", "url": "https://files.pythonhosted.org/packages/e7/b6/bbda0e92a14b48356abf70066bac5df7ebc192857685ea6c595ecc496ed7/ska-1.6.6.tar.gz", "yanked": false}], "1.6.7": [{"comment_text": "", "digests": {"md5": "da674ab6de14cc353beb6494ce41e17f", "sha256": "9e1ec143598c4804684055ba8192173e0aa0f0003ddd80f0fac31f9f13e5edc7"}, "downloads": -1, "filename": "ska-1.6.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "da674ab6de14cc353beb6494ce41e17f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 67006, "upload_time": "2017-02-09T21:58:00", "upload_time_iso_8601": "2017-02-09T21:58:00.693150Z", "url": "https://files.pythonhosted.org/packages/3c/9e/9b76d8baf038fd909868fe48bbddf35ba189f60ed8d08407cd87476d9f1f/ska-1.6.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44ef77a381ae35b494ef6a02677b72e3", "sha256": "e4350383d9481d4647fb2ed3ec9e5647bc4133bec4348ecd6dca667566a410e5"}, "downloads": -1, "filename": "ska-1.6.7.tar.gz", "has_sig": false, "md5_digest": "44ef77a381ae35b494ef6a02677b72e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68618, "upload_time": "2017-02-09T21:57:58", "upload_time_iso_8601": "2017-02-09T21:57:58.298456Z", "url": "https://files.pythonhosted.org/packages/8d/36/254fb8745ab085690851594074c1fe7675778b0d40042bd851a47025f2ad/ska-1.6.7.tar.gz", "yanked": false}], "1.6.8": [{"comment_text": "", "digests": {"md5": "880f739ff678637f3aaf6fc9573ffb77", "sha256": "a75384489d8fae7d4a6d65b170d2845b4f57e530b345562ebce5b2ab8bd919bb"}, "downloads": -1, "filename": "ska-1.6.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "880f739ff678637f3aaf6fc9573ffb77", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 74530, "upload_time": "2018-12-03T21:40:42", "upload_time_iso_8601": "2018-12-03T21:40:42.492927Z", "url": "https://files.pythonhosted.org/packages/2d/28/8d960eac1f583645e4aca5e6ca1df639faa42256a3ad097ea6de37561829/ska-1.6.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65a889451d49c95126b710895bbd5f7d", "sha256": "66d9327577ad4f3abfec4d22a7da4aee7c22237f973be20d6ff38fa7be6a9d74"}, "downloads": -1, "filename": "ska-1.6.8.tar.gz", "has_sig": false, "md5_digest": "65a889451d49c95126b710895bbd5f7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64965, "upload_time": "2018-12-03T21:40:40", "upload_time_iso_8601": "2018-12-03T21:40:40.537531Z", "url": "https://files.pythonhosted.org/packages/f4/8a/c0d641d0e57cc6b810a2951315a1fe91279d21fff50c33cc15fd07aa829a/ska-1.6.8.tar.gz", "yanked": false}], "1.6.9": [{"comment_text": "", "digests": {"md5": "46d8d1e60b2f7f066c959eadf328e36e", "sha256": "74ede6f55d8bfa711ee261fec23b5f2284cc35babb0ec4205a2f4e43c87f8cb4"}, "downloads": -1, "filename": "ska-1.6.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "46d8d1e60b2f7f066c959eadf328e36e", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 75518, "upload_time": "2018-12-07T21:31:49", "upload_time_iso_8601": "2018-12-07T21:31:49.807970Z", "url": "https://files.pythonhosted.org/packages/2a/0f/a5636a97669fe0295cb9ae8cbc9e62e3c551d2663567274685bbf5489ba3/ska-1.6.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffd9b00a4078a56500bf246014715e1e", "sha256": "cd89307db436ca222de951c5aa14b3c1e72d733421d12c00d321ba6606b27f28"}, "downloads": -1, "filename": "ska-1.6.9.tar.gz", "has_sig": false, "md5_digest": "ffd9b00a4078a56500bf246014715e1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65779, "upload_time": "2018-12-07T21:31:47", "upload_time_iso_8601": "2018-12-07T21:31:47.921440Z", "url": "https://files.pythonhosted.org/packages/8f/6d/f0615404608e5fd09b9d017c3a5d87abd333005b4e62ed7fd211b21e028d/ska-1.6.9.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "87da08922fcd16da9661c219b1c7f840", "sha256": "b91fad4769c158a445da44fbed932d34305702806afc48bcfa68ad0e4e4bf062"}, "downloads": -1, "filename": "ska-1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "87da08922fcd16da9661c219b1c7f840", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 91312, "upload_time": "2018-12-28T00:48:34", "upload_time_iso_8601": "2018-12-28T00:48:34.396082Z", "url": "https://files.pythonhosted.org/packages/f9/40/77555e54cbb8ed44291757827a26449fd4a775f98b94e52b28304f803683/ska-1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c44b22c0ed364ec3815f85de0126e7b", "sha256": "d452ef994d822755f2d3c7e21f357460d5c94f4f33bf037670c661b11c95b54f"}, "downloads": -1, "filename": "ska-1.7.tar.gz", "has_sig": false, "md5_digest": "1c44b22c0ed364ec3815f85de0126e7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 76821, "upload_time": "2018-12-28T00:48:31", "upload_time_iso_8601": "2018-12-28T00:48:31.377301Z", "url": "https://files.pythonhosted.org/packages/69/4d/0ff72190639ef1ea95dab08280e5ee8841881f0b9458e54a623b2da05bb5/ska-1.7.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "4fd3df2961de543ae4cd4b2fbf7b7d6e", "sha256": "88f62d8889c720c93c124c738be529b5c069e7e354cdfb1a679de4169b2a5118"}, "downloads": -1, "filename": "ska-1.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4fd3df2961de543ae4cd4b2fbf7b7d6e", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 96046, "upload_time": "2019-01-22T22:37:23", "upload_time_iso_8601": "2019-01-22T22:37:23.057987Z", "url": "https://files.pythonhosted.org/packages/56/67/df7b6721ba4047173172aac92f8eee59bdad717c93ee1c8a8db994077321/ska-1.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85e4d785f4f034ffbfce2b08133bfb0e", "sha256": "c01faead7dcaffadd9b69fdaebc8bae5033b651a91c897b61b4bc694cf16c310"}, "downloads": -1, "filename": "ska-1.7.1.tar.gz", "has_sig": false, "md5_digest": "85e4d785f4f034ffbfce2b08133bfb0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79823, "upload_time": "2019-01-22T22:37:19", "upload_time_iso_8601": "2019-01-22T22:37:19.840706Z", "url": "https://files.pythonhosted.org/packages/d7/a0/411e1a495802e3dd2d1e1d2fa27700e35bb964072df3e5a0454bcf65c691/ska-1.7.1.tar.gz", "yanked": false}], "1.7.2": [{"comment_text": "", "digests": {"md5": "f053946f5b6ade82f90833e5996a79b9", "sha256": "f78efd9e5bc28202e9bc504a55a4923c960a80c12beceacb7c91848f192dbbf1"}, "downloads": -1, "filename": "ska-1.7.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f053946f5b6ade82f90833e5996a79b9", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 98903, "upload_time": "2019-02-22T23:17:24", "upload_time_iso_8601": "2019-02-22T23:17:24.840933Z", "url": "https://files.pythonhosted.org/packages/47/ef/4b0bc00e71bfbe506b0322473a7bee1ff5efb3dd6e00cb986aba7daf5e74/ska-1.7.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e4e6296bf996e1284acdf2464f2899e", "sha256": "c62a8fdb7a589aee93ebc2fe810d6ff53e000f62b89697bdd81095e70ccb2677"}, "downloads": -1, "filename": "ska-1.7.2.tar.gz", "has_sig": false, "md5_digest": "5e4e6296bf996e1284acdf2464f2899e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81229, "upload_time": "2019-02-22T23:17:22", "upload_time_iso_8601": "2019-02-22T23:17:22.576317Z", "url": "https://files.pythonhosted.org/packages/73/32/74588637c0b47bcc2d3ffff7bb6917828a0e8d28464c376a5a6262bbef3d/ska-1.7.2.tar.gz", "yanked": false}], "1.7.3": [{"comment_text": "", "digests": {"md5": "25ac3204e72f7d0a12123fa13580aa92", "sha256": "15e42f36df39c0ad0e463f1df644a0d6b53f14b2e9bbcf4d95d74b49bfd7f271"}, "downloads": -1, "filename": "ska-1.7.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "25ac3204e72f7d0a12123fa13580aa92", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 98940, "upload_time": "2019-03-12T23:51:33", "upload_time_iso_8601": "2019-03-12T23:51:33.153856Z", "url": "https://files.pythonhosted.org/packages/9e/ef/e73399246f789baf386d3a30e580624ad678626325fae653489b99b24ca8/ska-1.7.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cd8b342d3701fe4718e1273af17e1f7", "sha256": "076d35cb398d3a840808eee1430c266862badb333a25d91d3f6b760634c99a5b"}, "downloads": -1, "filename": "ska-1.7.3.tar.gz", "has_sig": false, "md5_digest": "8cd8b342d3701fe4718e1273af17e1f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81325, "upload_time": "2019-03-12T23:51:30", "upload_time_iso_8601": "2019-03-12T23:51:30.830313Z", "url": "https://files.pythonhosted.org/packages/e1/cf/7dcd062916316fcbb36b2bd7c8459daa8c323dc8c3dc0768d06bb50a7d86/ska-1.7.3.tar.gz", "yanked": false}], "1.7.4": [{"comment_text": "", "digests": {"md5": "23bfb975726dca19552ed4208722169b", "sha256": "5bcca86e4e92e88c3e0fb65343e33108465cc3546f71f22c04a8e472fe886dc9"}, "downloads": -1, "filename": "ska-1.7.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "23bfb975726dca19552ed4208722169b", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 99147, "upload_time": "2019-05-12T21:27:45", "upload_time_iso_8601": "2019-05-12T21:27:45.913009Z", "url": "https://files.pythonhosted.org/packages/57/e5/bfd2d2fcbdd332621af7d385d98ae045a7b3860c1a6036bc1ec4f5403a7b/ska-1.7.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2aa78ebb1bd7b01a9bbfa95515e36616", "sha256": "e19442848fc08bdc5b43f1ad81f888970c7b7c76aba563a2d410dce3ab10807d"}, "downloads": -1, "filename": "ska-1.7.4.tar.gz", "has_sig": false, "md5_digest": "2aa78ebb1bd7b01a9bbfa95515e36616", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81658, "upload_time": "2019-05-12T21:27:43", "upload_time_iso_8601": "2019-05-12T21:27:43.004408Z", "url": "https://files.pythonhosted.org/packages/5c/ec/abf5e87eb88ef6a935f89eee1b4a90a763db623b17786ed9bd9ce300ac54/ska-1.7.4.tar.gz", "yanked": false}], "1.7.5": [{"comment_text": "", "digests": {"md5": "90557818e5c4bd7085a50be650be8b99", "sha256": "a7b6147f5742271c3c9310269c19110a4449f23c978db429992f8b2c53e978f8"}, "downloads": -1, "filename": "ska-1.7.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "90557818e5c4bd7085a50be650be8b99", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 99389, "upload_time": "2019-05-15T20:36:42", "upload_time_iso_8601": "2019-05-15T20:36:42.975736Z", "url": "https://files.pythonhosted.org/packages/3a/b4/0ecddfda78c93d6fdf697a9f639968f4f5f0ec2569d73aa6d26dbb58aed8/ska-1.7.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10bc6ee5bdb09a5bdae7dfe63506bb14", "sha256": "84a19d3bc8e1fcbe1be10f6020e69bc577bc4afe4b8713e5ce9ceff945bb3300"}, "downloads": -1, "filename": "ska-1.7.5.tar.gz", "has_sig": false, "md5_digest": "10bc6ee5bdb09a5bdae7dfe63506bb14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82232, "upload_time": "2019-05-15T20:36:39", "upload_time_iso_8601": "2019-05-15T20:36:39.519060Z", "url": "https://files.pythonhosted.org/packages/99/40/c89442a139af15850fa99a5c635465e553171493a50a6f35d8cdce0e0bd4/ska-1.7.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90557818e5c4bd7085a50be650be8b99", "sha256": "a7b6147f5742271c3c9310269c19110a4449f23c978db429992f8b2c53e978f8"}, "downloads": -1, "filename": "ska-1.7.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "90557818e5c4bd7085a50be650be8b99", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 99389, "upload_time": "2019-05-15T20:36:42", "upload_time_iso_8601": "2019-05-15T20:36:42.975736Z", "url": "https://files.pythonhosted.org/packages/3a/b4/0ecddfda78c93d6fdf697a9f639968f4f5f0ec2569d73aa6d26dbb58aed8/ska-1.7.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10bc6ee5bdb09a5bdae7dfe63506bb14", "sha256": "84a19d3bc8e1fcbe1be10f6020e69bc577bc4afe4b8713e5ce9ceff945bb3300"}, "downloads": -1, "filename": "ska-1.7.5.tar.gz", "has_sig": false, "md5_digest": "10bc6ee5bdb09a5bdae7dfe63506bb14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82232, "upload_time": "2019-05-15T20:36:39", "upload_time_iso_8601": "2019-05-15T20:36:39.519060Z", "url": "https://files.pythonhosted.org/packages/99/40/c89442a139af15850fa99a5c635465e553171493a50a6f35d8cdce0e0bd4/ska-1.7.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:12 2020"}