{"info": {"author": "Timoth Watts", "author_email": "tim@readevalprint.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: logo.jpeg\n   :target: logo.jpeg\n\nSneklang \n========================\n\n.. image:: https://travis-ci.org/readevalprint/sneklang.svg?branch=master\n   :target: https://travis-ci.org/readevalprint/sneklang\n   :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/readevalprint/sneklang/badge.svg?branch=master&1\n   :target: https://coveralls.io/r/readevalprint/sneklang?branch=master\n   :alt: Coverage Status\n\n.. image:: https://badge.fury.io/py/sneklang.svg\n   :target: https://badge.fury.io/py/sneklang\n   :alt: PyPI Version\n\nTry online\n----------\n\nhttps://sneklang.functup.com\n\nBasic Usage\n-----------\n\n``snek_eval`` returns a list of all the expressions in the provided code.\nGenerally you care about the last one. \n\n\nTo get very simple evaluating:\n\n.. code-block:: python\n\n    from sneklang import snek_eval\n\n    snek_eval(\"'Hi!' + ' world!'\")\n\nreturns ``[Hi! World!]``.\n\nExpressions can be as complex and convoluted as you want:\n\n.. code-block:: python\n\n    snek_eval(\"21 + 19 / 7 + (8 % 3) ** 9\")\n\nreturns ``[535.714285714]``.\n\nYou can add your own functions in as well.\n\n.. code-block:: python\n\n    snek_eval(\"square(11)\", scope={\"square\": lambda x: x*x})\n\nreturns ``[121]``.\n\n\nTry some dictionary or set comprehension.\n\n.. code-block:: python\n\n    >>> from sneklang import snek_eval\n    >>> snek_eval(\"{a:b for a,b in [('a', 1), ('b',2)]}\")\n    [{'a': 1, 'b': 2}]\n\n    >>> snek_eval(\"{a*a for a in [1,2,3]}\")\n    [{1, 4, 9}]\n\n\nYou can even define functions within the sand box at evaluation time.\n\n.. code-block:: python\n\n    >>> from sneklang import snek_eval\n    >>> snek_eval('''\n    ... def my_function(x): \n    ...     return x + 3\n    ... \n    ... my_function(5)\n    ... \n    ... ''')\n    [None, 8]\n\n\nAdvanced Usage\n--------------\n\n\n\n\nSome times you will want to run a dynamically defined sandboxed funtion in your app.\n\n.. code-block:: python\n\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... def my_function(x=2): \n    ...    return x ** 3\n    ... ''', scope=user_scope)\n    >>> user_func = user_scope['my_function']\n    >>> user_func()\n    8\n\n\nOr maybe create a decorator\n\n.. code-block:: python\n\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... def foo_decorator(func): \n    ...     def inner(s):\n    ...        return \"this is foo\", func(s)\n    ...     return inner\n    ...\n    ... @foo_decorator \n    ... def bar(s):\n    ...     return \"this is bar\", s\n    ... \n    ... output = bar(\"BAZ\")\n    ... ''', scope=user_scope)\n    >>> user_scope['output']\n    ('this is foo', ('this is bar', 'BAZ'))\n\n\n\nYou can also delete variables and catch exception\n\n.. code-block:: python\n\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... a = [1, 2, 3, 4, 5, 6, 7]\n    ... del a[3:5]\n    ... try:\n    ...     a[10]\n    ... except Exception as e:\n    ...     b = \"We got an error: \" + str(e)\n    ... ''', scope=user_scope)\n    >>> user_scope['a']\n    [1, 2, 3, 6, 7]\n    >>> user_scope['b']\n    'We got an error: list index out of range'\n\n\n.. code-block:: python\n\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... try:\n    ...    raise Exception(\"this is my last resort\")\n    ... except Exception as e:\n    ...     exc = e\n    ... ''', scope=user_scope)\n    >>> user_scope['exc']\n    SnekRuntimeError('this is my last resort')\n\n.. code-block:: python\n\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... try:\n    ...     try:\n    ...         1/0\n    ...     except Exception as e:\n    ...         raise Exception(\"oh no\") from e\n    ... except Exception as e:\n    ...     exc = e\n    ... ''', scope=user_scope)\n    >>> user_scope['exc']\n    SnekRuntimeError('oh no')\n\n\nAnd sometimes, users write crappy code... `MAX_CALL_DEPTH` is configurable, of course.\nHere you can see some extreamly ineffecient code to multiply a number by 2\n\n.. code-block:: python\n\n    >>> from sneklang import InvalidExpression, CallTooDeep\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... def multiply_by_2(x): \n    ...    return (2 + multiply_by_2(x-1)) if x > 0 else 0\n    ... ''', scope=user_scope)\n\n    >>> multiply_by_2 = user_scope['multiply_by_2']\n    >>> multiply_by_2(5)\n    10\n    >>> try:\n    ...     multiply_by_2(50)\n    ... except CallTooDeep as e:\n    ...     print(f'oh no! \"{e}\" On line:{e.lineno} col:{e.col}')\n    oh no! \"Sorry, stack is to large. The MAX_CALL_DEPTH is 32.\" On line:3 col:15\n\n\n\n    >>> try:\n    ...     snek_eval(\"int('foo is not a number')\")\n    ... except ValueError as e:\n    ...     print('oh no! {}'.format(e))\n    oh no! invalid literal for int() with base 10: 'foo is not a number'\n\n\n\nLimited Power\n~~~~~~~~~~~~~\n\nAlso note, the ``**`` operator has been locked down by default to have a\nmaximum input value of ``4000000``, which makes it somewhat harder to make\nexpressions which go on for ever.  You can change this limit by changing the\n``sneklang.POWER_MAX`` module level value to whatever is an appropriate value\nfor you (and the hardware that you're running on) or if you want to completely\nremove all limitations, you can set the ``s.operators[ast.Pow] = operator.pow``\nor make your own function.\n\nOn my computer, ``9**9**5`` evaluates almost instantly, but ``9**9**6`` takes\nover 30 seconds.  Since ``9**7`` is ``4782969``, and so over the ``POWER_MAX``\nlimit, it throws a ``NumberTooHigh`` exception for you. (Otherwise it would go\non for hours, or until the computer runs out of memory)\n\nStrings (and other Iterables) Safety\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are also limits on string length (100000 characters,\n``MAX_STRING_LENGTH``).  This can be changed if you wish.\n\nRelated to this, if you try to create a silly long string/bytes/list, by doing\n``'i want to break free'.split() * 9999999999`` for instance, it will block you.\n\nIf Expressions\n--------------\n\nYou can use python style ``if x then y else z`` type expressions:\n\n.. code-block:: python\n\n    >>> snek_eval(\"'equal' if x == y else 'not equal'\", scope={\"x\": 1, \"y\": 2})\n    ['not equal']\n\nwhich, of course, can be nested:\n\n.. code-block:: python\n\n    >>> snek_eval(\"'a' if 1 == 2 else 'b' if 2 == 3 else 'c'\")\n    ['c']\n\n\nFunctions\n---------\n\nYou can define functions which you'd like the expresssions to have access to:\n\n.. code-block:: python\n\n    >>> snek_eval(\"double(21)\", scope={\"double\": lambda x:x*2})\n    [42]\n\nYou can define \"real\" functions to pass in rather than lambdas, of course too,\nand even re-name them so that expressions can be shorter\n\n.. code-block:: python\n\n    >>> def square(x):\n    ...     return x ** 2\n    >>> snek_eval(\"s(10) + square(2)\", scope={\"s\": square, \"square\":square})\n    [104]\n\nIf you don't provide your own ``scope`` dict, then the the following defaults\nare provided in the ``DEFAULT_SCOPE`` dict:\n\n+----------------+--------------------------------------------------+\n| ``int(x)``     | Convert ``x`` to an ``int``.                     |\n+----------------+--------------------------------------------------+\n| ``float(x)``   | Convert ``x`` to a ``float``.                    |\n+----------------+--------------------------------------------------+\n| ``str(x)``     | Convert ``x`` to a ``str`` (``unicode`` in py2)  |\n+----------------+--------------------------------------------------+\n\n.. code-block:: python\n\n    >>> snek_eval(\"a + b\", scope={\"a\": 11, \"b\": 100})\n    [111]\n\n    >>> snek_eval(\"a + b\", scope={\"a\": \"Hi \", \"b\": \"world!\"})\n    ['Hi world!']\n\nYou can also hand the scope of variable enames over to a function, if you prefer:\n\n\n.. code-block:: python\n\n    >>> class case_insensitive_scope(dict):\n    ...    def __getitem__(self, key):\n    ...        return super().__getitem__(key.lower())\n    ...    def __setitem__(self, key, value):\n    ...        return super().__setitem__(key.lower(), value)\n\n    >>> snek_eval('''\n    ... FOOBAR\n    ... foobar\n    ... FooBar''', scope=case_insensitive_scope({'foobar': 42}))\n    [42, 42, 42]\n\n.. code-block:: python\n\n    >>> import sneklang\n    >>> import random\n    >>> my_scope = {}\n    >>> my_scope.update(\n    ...        square=(lambda x:x*x),\n    ...        randint=(lambda top: int(random.random() * top))\n    ...    )\n    >>> snek_eval('square(randint(int(\"1\")))', scope=my_scope)\n    [0]\n\n\n\nOther...\n--------\n\n\nObject attributes that start with ``_`` or ``func_`` are disallowed by default.\nIf you really need that (BE CAREFUL!), then modify the module global\n``sneklang.DISALLOW_PREFIXES``.\n\nA few builtin functions are listed in ``sneklang.DISALLOW_FUNCTIONS``.  ``type``, ``open``, etc.\nIf you need to give access to this kind of functionality to your expressions, then be very\ncareful.  You'd be better wrapping the functions in your own safe wrappers.\n\nThe initial idea came from J.F. Sebastian on Stack Overflow\n( http://stackoverflow.com/a/9558001/1973500 ) with modifications and many improvements,\nsee the head of the main file for contributors list.\n\nThen danthedeckie on Github with simpleeval(https://github.com/danthedeckie/simpleeval)\n\nI've filled it out a bit more to allow safe funtion definitions, and better scope management.\n\nPlease read the ``test_snek.py`` file for other potential gotchas or\ndetails.  I'm very happy to accept pull requests, suggestions, or other issues.\nEnjoy!\n\nDeveloping\n----------\n\nRun tests::\n\n    $ make test\n\nOr to set the tests running on every file change:\n\n    $ make autotest\n\n(requires ``entr``)", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/readevalprint/sneklang", "keywords": "sandbox,parse,ast", "license": "", "maintainer": "", "maintainer_email": "", "name": "sneklang", "package_url": "https://pypi.org/project/sneklang/", "platform": "", "project_url": "https://pypi.org/project/sneklang/", "project_urls": {"Homepage": "https://github.com/readevalprint/sneklang"}, "release_url": "https://pypi.org/project/sneklang/0.4.6/", "requires_dist": null, "requires_python": "", "summary": "Experimental minimal subset of Python for safe evaluation", "version": "0.4.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"logo.jpeg\" rel=\"nofollow\"><img alt=\"logo.jpeg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db6a29d5e8c44ca16481ac8838d33ffb83188242/6c6f676f2e6a706567\"></a>\n<div id=\"sneklang\">\n<h2>Sneklang</h2>\n<a href=\"https://travis-ci.org/readevalprint/sneklang\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67714f3bbefdb03faa4f53e64519fe3ebb9ef9ef/68747470733a2f2f7472617669732d63692e6f72672f726561646576616c7072696e742f736e656b6c616e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/readevalprint/sneklang?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5ccc39b5b83fadc462f5f331ac9158aa0621e91/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f726561646576616c7072696e742f736e656b6c616e672f62616467652e7376673f6272616e63683d6d61737465722631\"></a>\n<a href=\"https://badge.fury.io/py/sneklang\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3020037d162a743b026c782671bbbb55b3ba2b34/68747470733a2f2f62616467652e667572792e696f2f70792f736e656b6c616e672e737667\"></a>\n<div id=\"try-online\">\n<h3>Try online</h3>\n<p><a href=\"https://sneklang.functup.com\" rel=\"nofollow\">https://sneklang.functup.com</a></p>\n</div>\n<div id=\"basic-usage\">\n<h3>Basic Usage</h3>\n<p><tt>snek_eval</tt> returns a list of all the expressions in the provided code.\nGenerally you care about the last one.</p>\n<p>To get very simple evaluating:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sneklang</span> <span class=\"kn\">import</span> <span class=\"n\">snek_eval</span>\n\n<span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"'Hi!' + ' world!'\"</span><span class=\"p\">)</span>\n</pre>\n<p>returns <tt>[Hi! World!]</tt>.</p>\n<p>Expressions can be as complex and convoluted as you want:</p>\n<pre><span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"21 + 19 / 7 + (8 % 3) ** 9\"</span><span class=\"p\">)</span>\n</pre>\n<p>returns <tt>[535.714285714]</tt>.</p>\n<p>You can add your own functions in as well.</p>\n<pre><span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"square(11)\"</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"square\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">})</span>\n</pre>\n<p>returns <tt>[121]</tt>.</p>\n<p>Try some dictionary or set comprehension.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sneklang</span> <span class=\"kn\">import</span> <span class=\"n\">snek_eval</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"{a:b for a,b in [('a', 1), ('b',2)]}\"</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"{a*a for a in [1,2,3]}\"</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">}]</span>\n</pre>\n<p>You can even define functions within the sand box at evaluation time.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sneklang</span> <span class=\"kn\">import</span> <span class=\"n\">snek_eval</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s1\">'''\n... def my_function(x):\n...     return x + 3\n...\n... my_function(5)\n...\n... '''</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"advanced-usage\">\n<h3>Advanced Usage</h3>\n<p>Some times you will want to run a dynamically defined sandboxed funtion in your app.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s1\">'''\n... def my_function(x=2):\n...    return x ** 3\n... '''</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"n\">user_scope</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_func</span> <span class=\"o\">=</span> <span class=\"n\">user_scope</span><span class=\"p\">[</span><span class=\"s1\">'my_function'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_func</span><span class=\"p\">()</span>\n<span class=\"mi\">8</span>\n</pre>\n<p>Or maybe create a decorator</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s1\">'''\n... def foo_decorator(func):\n...     def inner(s):\n...        return \"this is foo\", func(s)\n...     return inner\n...\n... @foo_decorator\n... def bar(s):\n...     return \"this is bar\", s\n...\n... output = bar(\"BAZ\")\n... '''</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"n\">user_scope</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span><span class=\"p\">[</span><span class=\"s1\">'output'</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"s1\">'this is foo'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'this is bar'</span><span class=\"p\">,</span> <span class=\"s1\">'BAZ'</span><span class=\"p\">))</span>\n</pre>\n<p>You can also delete variables and catch exception</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s1\">'''\n... a = [1, 2, 3, 4, 5, 6, 7]\n... del a[3:5]\n... try:\n...     a[10]\n... except Exception as e:\n...     b = \"We got an error: \" + str(e)\n... '''</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"n\">user_scope</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span>\n<span class=\"s1\">'We got an error: list index out of range'</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s1\">'''\n... try:\n...    raise Exception(\"this is my last resort\")\n... except Exception as e:\n...     exc = e\n... '''</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"n\">user_scope</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span><span class=\"p\">[</span><span class=\"s1\">'exc'</span><span class=\"p\">]</span>\n<span class=\"n\">SnekRuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'this is my last resort'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s1\">'''\n... try:\n...     try:\n...         1/0\n...     except Exception as e:\n...         raise Exception(\"oh no\") from e\n... except Exception as e:\n...     exc = e\n... '''</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"n\">user_scope</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span><span class=\"p\">[</span><span class=\"s1\">'exc'</span><span class=\"p\">]</span>\n<span class=\"n\">SnekRuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'oh no'</span><span class=\"p\">)</span>\n</pre>\n<p>And sometimes, users write crappy code\u2026 <cite>MAX_CALL_DEPTH</cite> is configurable, of course.\nHere you can see some extreamly ineffecient code to multiply a number by 2</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sneklang</span> <span class=\"kn\">import</span> <span class=\"n\">InvalidExpression</span><span class=\"p\">,</span> <span class=\"n\">CallTooDeep</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user_scope</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s1\">'''\n... def multiply_by_2(x):\n...    return (2 + multiply_by_2(x-1)) if x &gt; 0 else 0\n... '''</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"n\">user_scope</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">multiply_by_2</span> <span class=\"o\">=</span> <span class=\"n\">user_scope</span><span class=\"p\">[</span><span class=\"s1\">'multiply_by_2'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">multiply_by_2</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">multiply_by_2</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">CallTooDeep</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'oh no! \"</span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"s1\">\" On line:</span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">lineno</span><span class=\"si\">}</span><span class=\"s1\"> col:</span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">oh</span> <span class=\"n\">no</span><span class=\"err\">!</span> <span class=\"s2\">\"Sorry, stack is to large. The MAX_CALL_DEPTH is 32.\"</span> <span class=\"n\">On</span> <span class=\"n\">line</span><span class=\"p\">:</span><span class=\"mi\">3</span> <span class=\"n\">col</span><span class=\"p\">:</span><span class=\"mi\">15</span>\n\n\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"int('foo is not a number')\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"ne\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'oh no! </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n<span class=\"n\">oh</span> <span class=\"n\">no</span><span class=\"err\">!</span> <span class=\"n\">invalid</span> <span class=\"n\">literal</span> <span class=\"k\">for</span> <span class=\"nb\">int</span><span class=\"p\">()</span> <span class=\"k\">with</span> <span class=\"n\">base</span> <span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"s1\">'foo is not a number'</span>\n</pre>\n<div id=\"limited-power\">\n<h4>Limited Power</h4>\n<p>Also note, the <tt>**</tt> operator has been locked down by default to have a\nmaximum input value of <tt>4000000</tt>, which makes it somewhat harder to make\nexpressions which go on for ever.  You can change this limit by changing the\n<tt>sneklang.POWER_MAX</tt> module level value to whatever is an appropriate value\nfor you (and the hardware that you\u2019re running on) or if you want to completely\nremove all limitations, you can set the <tt>s.operators[ast.Pow] = operator.pow</tt>\nor make your own function.</p>\n<p>On my computer, <tt><span class=\"pre\">9**9**5</span></tt> evaluates almost instantly, but <tt><span class=\"pre\">9**9**6</span></tt> takes\nover 30 seconds.  Since <tt><span class=\"pre\">9**7</span></tt> is <tt>4782969</tt>, and so over the <tt>POWER_MAX</tt>\nlimit, it throws a <tt>NumberTooHigh</tt> exception for you. (Otherwise it would go\non for hours, or until the computer runs out of memory)</p>\n</div>\n<div id=\"strings-and-other-iterables-safety\">\n<h4>Strings (and other Iterables) Safety</h4>\n<p>There are also limits on string length (100000 characters,\n<tt>MAX_STRING_LENGTH</tt>).  This can be changed if you wish.</p>\n<p>Related to this, if you try to create a silly long string/bytes/list, by doing\n<tt>'i want to break <span class=\"pre\">free'.split()</span> * 9999999999</tt> for instance, it will block you.</p>\n</div>\n</div>\n<div id=\"if-expressions\">\n<h3>If Expressions</h3>\n<p>You can use python style <tt>if x then y else z</tt> type expressions:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"'equal' if x == y else 'not equal'\"</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"p\">[</span><span class=\"s1\">'not equal'</span><span class=\"p\">]</span>\n</pre>\n<p>which, of course, can be nested:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"'a' if 1 == 2 else 'b' if 2 == 3 else 'c'\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"functions\">\n<h3>Functions</h3>\n<p>You can define functions which you\u2019d like the expresssions to have access to:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"double(21)\"</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"double\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">]</span>\n</pre>\n<p>You can define \u201creal\u201d functions to pass in rather than lambdas, of course too,\nand even re-name them so that expressions can be shorter</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">square</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"s(10) + square(2)\"</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"s\"</span><span class=\"p\">:</span> <span class=\"n\">square</span><span class=\"p\">,</span> <span class=\"s2\">\"square\"</span><span class=\"p\">:</span><span class=\"n\">square</span><span class=\"p\">})</span>\n<span class=\"p\">[</span><span class=\"mi\">104</span><span class=\"p\">]</span>\n</pre>\n<p>If you don\u2019t provide your own <tt>scope</tt> dict, then the the following defaults\nare provided in the <tt>DEFAULT_SCOPE</tt> dict:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><tt>int(x)</tt></td>\n<td>Convert <tt>x</tt> to an <tt>int</tt>.</td>\n</tr>\n<tr><td><tt>float(x)</tt></td>\n<td>Convert <tt>x</tt> to a <tt>float</tt>.</td>\n</tr>\n<tr><td><tt>str(x)</tt></td>\n<td>Convert <tt>x</tt> to a <tt>str</tt> (<tt>unicode</tt> in py2)</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"a + b\"</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">})</span>\n<span class=\"p\">[</span><span class=\"mi\">111</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s2\">\"a + b\"</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hi \"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world!\"</span><span class=\"p\">})</span>\n<span class=\"p\">[</span><span class=\"s1\">'Hi world!'</span><span class=\"p\">]</span>\n</pre>\n<p>You can also hand the scope of variable enames over to a function, if you prefer:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">case_insensitive_scope</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n<span class=\"o\">...</span>    <span class=\"k\">def</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s1\">'''\n... FOOBAR\n... foobar\n... FooBar'''</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"n\">case_insensitive_scope</span><span class=\"p\">({</span><span class=\"s1\">'foobar'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">}))</span>\n<span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">sneklang</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_scope</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_scope</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>        <span class=\"n\">square</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>        <span class=\"n\">randint</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">top</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">top</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>    <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snek_eval</span><span class=\"p\">(</span><span class=\"s1\">'square(randint(int(\"1\")))'</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"n\">my_scope</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"other\">\n<h3>Other\u2026</h3>\n<p>Object attributes that start with <tt>_</tt> or <tt>func_</tt> are disallowed by default.\nIf you really need that (BE CAREFUL!), then modify the module global\n<tt>sneklang.DISALLOW_PREFIXES</tt>.</p>\n<p>A few builtin functions are listed in <tt>sneklang.DISALLOW_FUNCTIONS</tt>.  <tt>type</tt>, <tt>open</tt>, etc.\nIf you need to give access to this kind of functionality to your expressions, then be very\ncareful.  You\u2019d be better wrapping the functions in your own safe wrappers.</p>\n<p>The initial idea came from J.F. Sebastian on Stack Overflow\n( <a href=\"http://stackoverflow.com/a/9558001/1973500\" rel=\"nofollow\">http://stackoverflow.com/a/9558001/1973500</a> ) with modifications and many improvements,\nsee the head of the main file for contributors list.</p>\n<p>Then danthedeckie on Github with simpleeval(<a href=\"https://github.com/danthedeckie/simpleeval\" rel=\"nofollow\">https://github.com/danthedeckie/simpleeval</a>)</p>\n<p>I\u2019ve filled it out a bit more to allow safe funtion definitions, and better scope management.</p>\n<p>Please read the <tt>test_snek.py</tt> file for other potential gotchas or\ndetails.  I\u2019m very happy to accept pull requests, suggestions, or other issues.\nEnjoy!</p>\n</div>\n<div id=\"developing\">\n<h3>Developing</h3>\n<p>Run tests:</p>\n<pre>$ make test\n</pre>\n<p>Or to set the tests running on every file change:</p>\n<blockquote>\n$ make autotest</blockquote>\n<p>(requires <tt>entr</tt>)</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6070939, "releases": {"0.4.6": [{"comment_text": "", "digests": {"md5": "60ca32f9ed1ddbb2b206f1e34c70f073", "sha256": "e6ec3302581bc75bcae593ace04f71add4dfb0a1b0e4433caf2c85cd5b180a32"}, "downloads": -1, "filename": "sneklang-0.4.6.tar.gz", "has_sig": false, "md5_digest": "60ca32f9ed1ddbb2b206f1e34c70f073", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17552, "upload_time": "2019-11-03T13:24:05", "upload_time_iso_8601": "2019-11-03T13:24:05.986531Z", "url": "https://files.pythonhosted.org/packages/12/f8/889e62e3abe2d6c9a97ebc07a598a85ea88fa2454647900ddfe7c3035ab9/sneklang-0.4.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "60ca32f9ed1ddbb2b206f1e34c70f073", "sha256": "e6ec3302581bc75bcae593ace04f71add4dfb0a1b0e4433caf2c85cd5b180a32"}, "downloads": -1, "filename": "sneklang-0.4.6.tar.gz", "has_sig": false, "md5_digest": "60ca32f9ed1ddbb2b206f1e34c70f073", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17552, "upload_time": "2019-11-03T13:24:05", "upload_time_iso_8601": "2019-11-03T13:24:05.986531Z", "url": "https://files.pythonhosted.org/packages/12/f8/889e62e3abe2d6c9a97ebc07a598a85ea88fa2454647900ddfe7c3035ab9/sneklang-0.4.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:30 2020"}