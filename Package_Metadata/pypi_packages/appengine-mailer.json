{"info": {"author": "Mat Clayton", "author_email": "mat@mixcloud.com", "bugtrack_url": null, "classifiers": [], "description": "appengine-mailer is an RFC2822-over-HTTP proxy for running in Google App Engine.\n\nappengine-mailer was written by Toby White <toby@timetric.com> (@tow21) for use on the Timetric (http://timetric.com) platform. It was heavily inspired by an earlier proof of concept by Mat Clayton (@matclayton)\n\nGoogle App Engine includes an API for sending emails, which lets you send up to 7000 emails a day for free; above that it costs $0.0001 per email. (Prices correct as of July 2010).\n\nappengine-mailer exposes this API behind a URL, so that a client can POST serialized email/mime-multipart messages, and have GAE send them on its behalf; in effect using GAE as a mail proxy. \n\nAnti-spam measures\n==================\n\nTo avoid spam, Google don't let you send arbitrary email messages. There are several important caveats:\n\n1. The From address must be the email of a registered developer on the GAE app. That is - any From address you want to use, you have to register as a developer on the app. This limits you to 50 possible From addresses. (There are some limitations on which addresses may be used - see Known Issues)\n\n2. Google don't allow you to set arbitrary headers. The list of headers you have control over can be seen at XXX\n\n3. Google don't give you full control over the multipart structure of the email. You can have:\n  * plain text emails\n  * plain text/HTML multipart/alternative emails\n  * and an arbitrary number of attachments, all of which will be appended to the end of the message.\n\n4. There's an upper limit on the number of To/Cc/Bcc addresses that may be used on a single message. It's not documented, but in practice seems to be about 100.\n\nAuthorization\n=============\n\nAuthorization is handled by means of a shared secret between client and server. Each request is sent, signed by the client's secret, and the signature is checked on the server. The server can keep several valid secrets concurrently, allowing key changes to occur seamlessly.\n\nDeploying the server\n====================\n\n* Change app.yaml to use an application name controlled by you.\n\n* You need to supply at least one secret key. The server will look for these in a file called GMAIL_SECRET_KEY, one key on each line.\n\n* Optionally, you can supply a default From address, to be used when the address on the email is unsuitable. The server will look for this in a file called GMAIL_DEFAULT_SENDER.\n\n* Having added these files, deploy to GAE.\n\nDeploying the client\n====================\n\nThe client can be used in three ways:\n\n* Direct from a Python program\n\n* From the command line, like the sendmail command\n\n* As an Exim transport.\n\nIn all cases, the client needs to know the URL of the server to talk to, and a secret to use for signing the message. Sometimes, this can be specified - if unspecified, it will always fall back to looking for the server URL first in the environment variable GMAIL_PROXY_URL, then in the file /etc/envdir/GMAIL_PROXY_URL. Similarly, it will look for the secret key first in the environment variable GMAIL_SECRET_KEY, then in the file /etc/envdir/GMAIL_SECRET_KEY.\n\nFinally, since the interface is simple HTTP, you can write a client speaking to the documented interface.\n\nPython client\n=============\n\nThe Python client only needs the module \"gmail.py\".\n\n# Using the standard Python email class\nfrom email.message import Message\nmsg = Message()\nmsg['From'] = \"Toby at work <toby@timetric.com>\"\nmsg['To'] = \"Toby at home <toby@eaddrinu.se>\"\nmsg['Subject'] = \"Testing\"\nmsg.set_payload(\"This is the body of the message\")\n\n# And passing them message through to gmail\nfrom gmail import GmailProxy, MessageSendingFailure\n# You need to specify the SECRET_KEY and APPENGINE_PROXY_URL\ngmail_proxy = GmailProxy(SECRET_KEY, EMAIL_APPENGINE_PROXY_URL, fail_silently=False)\ntry:\n    gmail_proxy.send_mail(msg)\nexcept MessageSendingFailure, e:\n    print \"Failed to send message!\\n%s\" % e\n\nDjango example\n==============\n\nAs of Django 1.2, there is support for swapping out the default email backend. Add the whole appengine-mailer directory as an app to your Django project, and then update your settings to include:\n\nEMAIL_BACKEND = 'appengine_mailer.django_email_backend.GmailBackend'\nEMAIL_APPENGINE_PROXY_URL = \"http://your_domain.appspot.com\"\n# The SECRET_KEY used will be your Django project's SECRET_KEY\n\nAlternatively, if your servers are configured to use Exim, you can configure Exim as below, and then use Django's unmodified email backend to send mail via GAE.\n\n\nCommand-line client\n===================\n\nThe file \"gmail.py\" can be used as a partial replacement for /usr/bin/mail. It has no dependencies beyond the Python stdlib (tested with 2.6, should work with earlier versions). For details of options it understands, call it with \"--help\".\n\nExim transport\n==============\n\nBecause gmail.py can be used instead of /usr/bin/mail, it can be dropped into place as a transport, so that all mail going through Exim will be routed via the GAE interface. (subject to Google's limited interface.) An example transport is shown in the file 50_exim4_config_gmail_pipe. If you're using a Debian system:\n\n* Move gmail.py to /usr/bin/gmail, and ensure that it's executable.\n* Configure Exim4 to send via a smarthost.\n* Replace /etc/exim4/conf.d/transport/30_exim4-config_remote_smtp_smarthost with 50_exim4_config_gmail_pipe.\n* Restart Exim. \n\nExim will not read environment variables, so this will only look in /etc/envdir/GMAIL_PROXY_URL and /etc/envdir/GMAIL_SECRET_KEY for the relevant settings.\n\nHTTP Interface\n==============\n\nYou can send messages via the HTTP interface. The server accepts POST on its root URL, and expects two parameters in the body of the POST request. One parameter is 'msg', and is the serialized email message; the other is 'signature', and is the signature of the message, according to the signing algorithm given in Python by:\n\n    base64.encodestring(hmac.new(SECRET_KEY, msg, hashlib.sha1).digest()).strip()\n\nThe server will respond with a 204 in case of success, a 400 for client error (missing parameters, or malformed signature) and a 500 otherwise. Clients should be prepared to deal with occasional server-side failures, due to GAE downtime; use of a local queue is recommended.\n\n\n------------\n\nKnown issues\n============\n\n* The From address needs to be authorized - that is, it needs to be associated with a Google account, and listed as an administrator of the GAE app. For google mail accounts (or for google Apps For Your Domain accounts). The check seems to be done by strict string comparison, not by using any nicknames or aliases. This means that you *can't* send email from:\n  * A google address with a +suffix on the username.\n  * An address which is a \"nickname\" of another address.\n  * An address which resolves to a google group.\n\n* Reply-To won't work for people reading the email in gmail: See  http://www.google.com/support/forum/p/gmail/thread?tid=74d00d5e2605242d&hl=en", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mixcloud/appengine-mailer", "keywords": null, "license": "MIT license, see LICENSE file", "maintainer": null, "maintainer_email": null, "name": "appengine-mailer", "package_url": "https://pypi.org/project/appengine-mailer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/appengine-mailer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mixcloud/appengine-mailer"}, "release_url": "https://pypi.org/project/appengine-mailer/0.1/", "requires_dist": null, "requires_python": null, "summary": "AppEngine Email Proxy", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            appengine-mailer is an RFC2822-over-HTTP proxy for running in Google App Engine.<br><br>appengine-mailer was written by Toby White &lt;toby@timetric.com&gt; (@tow21) for use on the Timetric (http://timetric.com) platform. It was heavily inspired by an earlier proof of concept by Mat Clayton (@matclayton)<br><br>Google App Engine includes an API for sending emails, which lets you send up to 7000 emails a day for free; above that it costs $0.0001 per email. (Prices correct as of July 2010).<br><br>appengine-mailer exposes this API behind a URL, so that a client can POST serialized email/mime-multipart messages, and have GAE send them on its behalf; in effect using GAE as a mail proxy. <br><br>Anti-spam measures<br>==================<br><br>To avoid spam, Google don't let you send arbitrary email messages. There are several important caveats:<br><br>1. The From address must be the email of a registered developer on the GAE app. That is - any From address you want to use, you have to register as a developer on the app. This limits you to 50 possible From addresses. (There are some limitations on which addresses may be used - see Known Issues)<br><br>2. Google don't allow you to set arbitrary headers. The list of headers you have control over can be seen at XXX<br><br>3. Google don't give you full control over the multipart structure of the email. You can have:<br>  * plain text emails<br>  * plain text/HTML multipart/alternative emails<br>  * and an arbitrary number of attachments, all of which will be appended to the end of the message.<br><br>4. There's an upper limit on the number of To/Cc/Bcc addresses that may be used on a single message. It's not documented, but in practice seems to be about 100.<br><br>Authorization<br>=============<br><br>Authorization is handled by means of a shared secret between client and server. Each request is sent, signed by the client's secret, and the signature is checked on the server. The server can keep several valid secrets concurrently, allowing key changes to occur seamlessly.<br><br>Deploying the server<br>====================<br><br>* Change app.yaml to use an application name controlled by you.<br><br>* You need to supply at least one secret key. The server will look for these in a file called GMAIL_SECRET_KEY, one key on each line.<br><br>* Optionally, you can supply a default From address, to be used when the address on the email is unsuitable. The server will look for this in a file called GMAIL_DEFAULT_SENDER.<br><br>* Having added these files, deploy to GAE.<br><br>Deploying the client<br>====================<br><br>The client can be used in three ways:<br><br>* Direct from a Python program<br><br>* From the command line, like the sendmail command<br><br>* As an Exim transport.<br><br>In all cases, the client needs to know the URL of the server to talk to, and a secret to use for signing the message. Sometimes, this can be specified - if unspecified, it will always fall back to looking for the server URL first in the environment variable GMAIL_PROXY_URL, then in the file /etc/envdir/GMAIL_PROXY_URL. Similarly, it will look for the secret key first in the environment variable GMAIL_SECRET_KEY, then in the file /etc/envdir/GMAIL_SECRET_KEY.<br><br>Finally, since the interface is simple HTTP, you can write a client speaking to the documented interface.<br><br>Python client<br>=============<br><br>The Python client only needs the module \"gmail.py\".<br><br># Using the standard Python email class<br>from email.message import Message<br>msg = Message()<br>msg['From'] = \"Toby at work &lt;toby@timetric.com&gt;\"<br>msg['To'] = \"Toby at home &lt;toby@eaddrinu.se&gt;\"<br>msg['Subject'] = \"Testing\"<br>msg.set_payload(\"This is the body of the message\")<br><br># And passing them message through to gmail<br>from gmail import GmailProxy, MessageSendingFailure<br># You need to specify the SECRET_KEY and APPENGINE_PROXY_URL<br>gmail_proxy = GmailProxy(SECRET_KEY, EMAIL_APPENGINE_PROXY_URL, fail_silently=False)<br>try:<br>    gmail_proxy.send_mail(msg)<br>except MessageSendingFailure, e:<br>    print \"Failed to send message!\\n%s\" % e<br><br>Django example<br>==============<br><br>As of Django 1.2, there is support for swapping out the default email backend. Add the whole appengine-mailer directory as an app to your Django project, and then update your settings to include:<br><br>EMAIL_BACKEND = 'appengine_mailer.django_email_backend.GmailBackend'<br>EMAIL_APPENGINE_PROXY_URL = \"http://your_domain.appspot.com\"<br># The SECRET_KEY used will be your Django project's SECRET_KEY<br><br>Alternatively, if your servers are configured to use Exim, you can configure Exim as below, and then use Django's unmodified email backend to send mail via GAE.<br><br><br>Command-line client<br>===================<br><br>The file \"gmail.py\" can be used as a partial replacement for /usr/bin/mail. It has no dependencies beyond the Python stdlib (tested with 2.6, should work with earlier versions). For details of options it understands, call it with \"--help\".<br><br>Exim transport<br>==============<br><br>Because gmail.py can be used instead of /usr/bin/mail, it can be dropped into place as a transport, so that all mail going through Exim will be routed via the GAE interface. (subject to Google's limited interface.) An example transport is shown in the file 50_exim4_config_gmail_pipe. If you're using a Debian system:<br><br>* Move gmail.py to /usr/bin/gmail, and ensure that it's executable.<br>* Configure Exim4 to send via a smarthost.<br>* Replace /etc/exim4/conf.d/transport/30_exim4-config_remote_smtp_smarthost with 50_exim4_config_gmail_pipe.<br>* Restart Exim. <br><br>Exim will not read environment variables, so this will only look in /etc/envdir/GMAIL_PROXY_URL and /etc/envdir/GMAIL_SECRET_KEY for the relevant settings.<br><br>HTTP Interface<br>==============<br><br>You can send messages via the HTTP interface. The server accepts POST on its root URL, and expects two parameters in the body of the POST request. One parameter is 'msg', and is the serialized email message; the other is 'signature', and is the signature of the message, according to the signing algorithm given in Python by:<br><br>    base64.encodestring(hmac.new(SECRET_KEY, msg, hashlib.sha1).digest()).strip()<br><br>The server will respond with a 204 in case of success, a 400 for client error (missing parameters, or malformed signature) and a 500 otherwise. Clients should be prepared to deal with occasional server-side failures, due to GAE downtime; use of a local queue is recommended.<br><br><br>------------<br><br>Known issues<br>============<br><br>* The From address needs to be authorized - that is, it needs to be associated with a Google account, and listed as an administrator of the GAE app. For google mail accounts (or for google Apps For Your Domain accounts). The check seems to be done by strict string comparison, not by using any nicknames or aliases. This means that you *can't* send email from:<br>  * A google address with a +suffix on the username.<br>  * An address which is a \"nickname\" of another address.<br>  * An address which resolves to a google group.<br><br>* Reply-To won't work for people reading the email in gmail: See  http://www.google.com/support/forum/p/gmail/thread?tid=74d00d5e2605242d&amp;hl=en\n          </div>"}, "last_serial": 786338, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "413283de2cbfd3d10e7fd5798b5c91f0", "sha256": "1ae3032c8048110b9d3f6bdb5e420e9f64c3acb47de6f6b46fb133c95d657d27"}, "downloads": -1, "filename": "appengine-mailer-0.1.tar.gz", "has_sig": false, "md5_digest": "413283de2cbfd3d10e7fd5798b5c91f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7190, "upload_time": "2012-11-22T23:18:42", "upload_time_iso_8601": "2012-11-22T23:18:42.818694Z", "url": "https://files.pythonhosted.org/packages/b6/9f/4a2471b09724f03ee4b7176ca7f5a3d79b7cab9d8c190319632e9a24cf72/appengine-mailer-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "413283de2cbfd3d10e7fd5798b5c91f0", "sha256": "1ae3032c8048110b9d3f6bdb5e420e9f64c3acb47de6f6b46fb133c95d657d27"}, "downloads": -1, "filename": "appengine-mailer-0.1.tar.gz", "has_sig": false, "md5_digest": "413283de2cbfd3d10e7fd5798b5c91f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7190, "upload_time": "2012-11-22T23:18:42", "upload_time_iso_8601": "2012-11-22T23:18:42.818694Z", "url": "https://files.pythonhosted.org/packages/b6/9f/4a2471b09724f03ee4b7176ca7f5a3d79b7cab9d8c190319632e9a24cf72/appengine-mailer-0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:40 2020"}