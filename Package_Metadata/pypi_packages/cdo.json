{"info": {"author": "Ralf Mueller", "author_email": "stark.dreamdetective@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# Cdo.{rb,py} - Use Ruby/Python to access the power of CDO\n\n[![Ruby Tests](https://travis-ci.org/Try2Code/cdo-bindings.svg?branch=master)](https://travis-ci.org/Try2Code/cdo-bindings)\n[![Python Tests](https://circleci.com/gh/Try2Code/cdo-bindings/tree/master.svg?style=shield)](https://circleci.com/gh/Try2Code/cdo-bindings)\n\nWelcome to the scripting interfaces of [CDO](https://code.zmaw.de/projects/cdo/wiki)!\nThis repository contains interfaces for [Ruby](http://www.ruby-lang.org) and [Python](https://www.python.org). If you are not sure, wether this is useful or not, please have a look at:\n[Why the .... should I use this???](https://code.zmaw.de/projects/cdo/wiki/Cdo%7Brbpy%7D#Why-the-)\n\n## Installation\n\nReleases are distributed via [pypi](https://pypi.org/project/cdo) and [rubygems](https://rubygems.org/gems/cdo):\n\n*  Ruby\n```\n    gem install cdo (--user-install)\n```\n*  Python\n```\n    pip install cdo (--user)\n```\n\n### Requirements\n\nCdo.{rb,py} requires a working CDO binary and Ruby 2.x or Python 2.7/3.x\n\nMulti-dimensional arrays (numpy for python, narray for ruby) require addtional\nnetcdf-io modules. These are [scipy](https://docs.scipy.org/doc/scipy/reference/io.html) or [python-netcdf4](https://pypi.python.org/pypi/netCDF4) for python and\n[ruby-netcdf](https://rubygems.org/gems/ruby-netcdf) for ruby. Because scipy has some difficulties with netcdf, I dropped the support of it with release 1.5.0.\n\nThx to Alexander Winkler there is also an IO option for XArray.\n\n## Usage\n\nYou can find a lot of examples in the unit tests for both languages. Here are the direct links to the [ruby tests](https://github.com/Try2Code/cdo-bindings/blob/master/ruby/test/test_cdo.rb) and the [python tests](https://github.com/Try2Code/cdo-bindings/blob/master/python/test/test_cdo.py).\n\nThe following describes the basic features for both languages\n\n### Run operators\n\nBefor calling operators, you have to create an object first:\n\n```ruby\n    cdo = Cdo.new   #ruby\n```\n```python\n    cdo = Cdo()     #python\n```\n\nPlease check the documentation for constructor paramaters. I try to have equal interfaces in both languages for all public methods.\n\n### Choose CDO binary\n\nBy default the cdo-bindings use the 'cdo' binary found in your $PATH variable. To change that, you can\n\n* load a module before calling your script(```module command``` or another package manager like ```conda``` or ```spack```)\n* use the CDO environment variable to set the path to be used\n* use the python/ruby method ```cdo.setCdo('/path/to/the/CDO/executable/you/want')```. By this technique you can create different objects for different CDO versions.\n\n### Debugging\n\nFor debugging purpose, both interfaces provide a \"debug\" attribute. If it is set to a boolian true, the complete commands and the return values will be printed during execution\n\n```ruby\n    cdo.debug = true    #ruby\n```\n```python\n    cdo.debug = True    #python\n```\n\nThe default is false of cause.\n\n#### File information\n```ruby\n    cdo.infov(input: ifile)        #ruby\n    cdo.showlevels(input: ifile)\n\n```\n```python\n    cdo.infov(input=ifile)         #python\n    cdo.showlevels(input=ifile)\n```\n\n#### Operators with user defined regular output files\n```ruby\n    cdo.timmin(input: ifile ,output: ofile)       #ruby\n```\n```python\n    cdo.timmin(input = ifile,output = ofile)      #python\n```\nBy default the return value of each call is the name of the output files (no matter if its a temporary file or not)\n\n#### Use temporary output files\nIf the output key is left out, one or more (depending on the operator) temporary files are generated and used as return value(s). In a regular script or a regularly closed interactive session, these files are removed at the end automatically.\n\n```ruby\n    tminFile = cdo.timmin(input: ifile)  #ruby\n```\n```python\n    tminFile = cdo.timmin(input = ifile) #python\n```\nHowever these tempfiles remain if the session/script is killed with SIGKILL or if the bindings are used via Jupyter notebooks. Those session are usually long lasting and the heavy usage if tempfiles can easily fill the system tempdir - your system will become unusable then.\nThe bindings offer two ways to cope with that\n* Set another directory for storing tempfiles with a constructor option and remove anything left in there when you experienced a crash or something like this\n```python\n   cdo = Cdo(tempdir=tempPath)      #python\n   cdo = Cdo.new(tempdir: tempPath) #ruby\n```\n* remove all tempfiles created by this or former usage of the cdo-bindings belonging to your current Unix-user with (taking into account user-defined ```tempdir``` from above\n```\n   cdo.cleanTempDir() #python\n   cdo.cleanTempDir   #ruby\n```\n   \n#### Operators with parameter\n```ruby\n    cdo.remap([gridfile,weightfile],input:   ifile, output: ofile)   #ruby\n```\n```python\n    cdo.remap([gridfile,weightfile],input => ifile, output => ofile) #python\n```\n\n#### logging\n```ruby\n    cdo = Cdo.new(logging: true, logFile: 'cdo_commands.log') #ruby\n```\n```python\n    cdo = Cdo(logging=True, logFile='cdo_commands.log')       #python\n```\n\n#### Set global CDO options\n```ruby\n    cdo.copy(input:  ifile, output:  ofile,options:  \"-f nc4\")     #ruby\n```\n```python\n    cdo.copy(input = ifile, output = ofile,options = \"-f nc4\")     #python\n```\n\n#### Set environment variables\n```ruby\n    cdo.splitname(input: ifile.join(' '),\n                  output: 'splitTag',\n                  env: {'CDO_FILE_SUFFIX' => '.nc'}) #or\n    cdo.env = {'CDO_FILE_SUFFIX' => '.nc'}\n```\n```python\n    cdo.splitname(input = ' '.join(ifiles),\n                  output =  'splitTag', \n                  env={\"CDO_FILE_SUFFIX\": \".nc\"})   #or\n    cdo.env = {'CDO_FILE_SUFFIX': '.nc'}\n```\n\n#### Return multi-dimension arrrays\n```ruby\n    t = cdo.fldmin(:input => ifile,:returnArray => true).var('T').get  #rb, version <  1.2.0\n    t = cdo.fldmin(:input => ifile,:returnCdf => true).var('T').get    #rb, version >= 1.2.0\n    t = cdo.fldmin(:input => ifile,:returnArray => 'T')                #rb, version >= 1.2.0\n```\n```python\n    t = cdo.fldmin(input = ifile,returnArray = True).variables['T'][:] #py, version <  1.2.0\n    t = cdo.fldmin(input = ifile,returnCdf = True).variables['T'][:]   #py, version >= 1.2.0\n    t = cdo.fldmin(input = ifile,returnArray = 'T')                    #py, version >= 1.2.0\n```\n\nOther options are so-called _masked arrays_ (use ```returnMaArray```) for ruby and python and XArray/XDataset for python-only: use ```returnXArray``` or ```returnXDataset``` for that.\n\n*) If you use scipy >= 0.14 as netcdf backend, you have to use following code\ninstead to avoid possible segmentation faults:\n```python\n    cdf = cdo.fldmin(input = ifile,returnCdf = True)\n    temperatures = cdf.variables['T'][:]\n```\nMore examples can be found in test/cdo-examples.rb and [on the\nhomepage](https://code.zmaw.de/projects/cdo/wiki/Cdo%7Brbpy%7D)\n\n### Avoid re-processing\n\nIf you do not want to re-compute files, you can set\n\n*  the instance attribute 'forceOutput' to false: this will effect all later\n   call of that instance **or**\n*  the operator option 'forceOutput' to false: this will only effect this\n   operator call of this instance\n\nFor more information, please have a look at the unit tests.\n\n## Support, Issues, Bugs, ...\n\nPlease use the forum or ticket system of CDOs official web page:\nhttp://code.zmaw.de/projects/cdo\n\n## Changelog\n* **1.5.0 (1.5.2 for python)** API change :\n  - **not usable with CDO-1.9.7**\n  - simplify the interface:\n    - remove returnCdf from constructor, only use it with operator calls\n    - remove methods setReturnArray/unsetReturnArray: I fear it's not used anyway, but 'returnArray' in each call\n    - remove the optional dependency to scipy since it offers less functionality than netCDF4 and just blows up the code\n    - new attributes: hasNetcdf, hasXArray for checking for the respective support\n    - fix for cdo-1.9.6: allow non-zero return code for diff operators\n  - the 1.5.2 relase for python is identical to 1.5.0 (was testing a new setup.py and version cannot be used twice in pipy)\n  - 1.5.1 had building problems with pip based on python2\n* **1.4.0** API change :\n  - the ```operators``` atribute is no longer a list, but a dict (python) or hash (ruby) holding the number of output streams as value\n  - finally fix #16 (missing tempfile generation for more than one output streams)\n  - fix #19 (thx @pgierz for the input)\n* **1.3.6**: \n  - bugfix for non-finding the CDO binary on some systems\n  - fix hasCdo (py)\n  - add hasCdo (rb)\n* **1.3.5**:\n  - read/write support for XArray datasets - thx to @pinplex!\n  - **drop ruby support for 1.9 and older**\n  - **remove module interface from the ruby version**\n* **1.3.3**:\n  - return arrays/lists of output files, which are created by split* operators\n    suggestion from Karl-Hermann Wieners :ocean:\n    **NOTE**: __this is done by simple globbing! Any other files with the appropriate name will be included in the list!__\n  - use [six](https://pypi.python.org/pypi/six) for python2 and 3 compatibility (thanks to @jvegasbsc)\n  - drop full support of CDO version older then 1.5.4: undocumented operators\n    in these version will not be callable\n  - new keyword for operators which write to stdout: autoSplit. When set, each\n    line will be split with the given value of the keyword to avoid the need\n    for manual splitting. Nested return arrays of (outer) size 1 are flattened.\n    See #11, thx to @beatorizu\n* **1.3.2**\n  - improvened stdout/stderr handling, thx to jvegasbsc\n* **1.3.1**\n  - fix environment handling per call (ruby version)\n* **1.3.0**\n  - require ruby-2.*\n  - support for upcomming CDO release 1.7.1\n  - improve loggin for ruby\n  - introduce logging for python\n  - unicode bugfix - thanks to Sebastian Illing (illing2005) [python-only]\n* **1.2.7**\n  - Added class interface for ruby version 2.x, mainly for thread safety\n* **1.2.6**\n  - bugfix for autocompletion in interactive usage [python-only]\n* **1.2.5**\n  - bugfix for environment handling (Thanks philipp) [python-only]\n  - add logging [ruby-only]\n* **1.2.4**\n  - support python3: Thanks to @jhamman\n  - bugfix for scipy: Thanks to @martinclaus\n  - docu fixes: Thanks to @guziy\n  - allow environment setting via call and object construction (see test_env in test_cdo.py)\n* **1.2.3**\n  - bugfix release: adjust library/feature check to latest cdo-1.6.2  release\n* **1.2.2**\n  - allow arrays in additions to strings for input argument\n  - add methods for checking the IO libraries of CDO and their versions\n  - optionally return None on error (suggestion from Alex Loew, python only)\n* **1.2.1**\n  - new return option: Masked Arrays\n    if the new keyword returnMaArray is given, its value is taken as variable\n    name and a masked array wrt to its FillValues is returned\n    contribution for python by Alex Loew\n  - error handling: return stderr in case of non-zero return value + raise exception\n    contribution for python from Estanislao Gonzalez\n  - autocompletion and built-in documentation through help() for interactive use\n    contribution from Estanislao Gonzalez [python]\n  - Added help operator for displaying help interactively [ruby]\n* **1.2.0** API change:\n  - Ruby now uses the same keys like the python interface, i.e. :input and :output\n    instead of :in and :out\n  - :returnArray will accept a variable name, for which the multidimesional\n    array is returned\n* **1.1.0** API change:\n  - new option :returnCdf : will return the netcdf file handle, which was formerly\n    done via :returnArray\n  - new options :force : if set to true the cdo call will be run even if the given\n    output file is presen, default: false\n\n---\n\n## [Thanks to all contributors!](https://github.com/Try2Code/cdo-bindings/graphs/contributors)\n\n## License\n\nCdo.{rb,py} makes use of the BSD-3-clause license", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://code.mpimet.mpg.de/projects/cdo/wiki/Cdo%7Brbpy%7D", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cdo", "package_url": "https://pypi.org/project/cdo/", "platform": "", "project_url": "https://pypi.org/project/cdo/", "project_urls": {"Homepage": "https://code.mpimet.mpg.de/projects/cdo/wiki/Cdo%7Brbpy%7D"}, "release_url": "https://pypi.org/project/cdo/1.5.3/", "requires_dist": null, "requires_python": ">=2.7.0", "summary": "python bindings to CDO", "version": "1.5.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Cdo.{rb,py} - Use Ruby/Python to access the power of CDO</h1>\n<p><a href=\"https://travis-ci.org/Try2Code/cdo-bindings\" rel=\"nofollow\"><img alt=\"Ruby Tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12822a8857e5969d5f6bba2ea28eccc2598b41f1/68747470733a2f2f7472617669732d63692e6f72672f54727932436f64652f63646f2d62696e64696e67732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://circleci.com/gh/Try2Code/cdo-bindings\" rel=\"nofollow\"><img alt=\"Python Tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1c12bac0d0eb56899932fc229d1fb2599193699/68747470733a2f2f636972636c6563692e636f6d2f67682f54727932436f64652f63646f2d62696e64696e67732f747265652f6d61737465722e7376673f7374796c653d736869656c64\"></a></p>\n<p>Welcome to the scripting interfaces of <a href=\"https://code.zmaw.de/projects/cdo/wiki\" rel=\"nofollow\">CDO</a>!\nThis repository contains interfaces for <a href=\"http://www.ruby-lang.org\" rel=\"nofollow\">Ruby</a> and <a href=\"https://www.python.org\" rel=\"nofollow\">Python</a>. If you are not sure, wether this is useful or not, please have a look at:\n<a href=\"https://code.zmaw.de/projects/cdo/wiki/Cdo%7Brbpy%7D#Why-the-\" rel=\"nofollow\">Why the .... should I use this???</a></p>\n<h2>Installation</h2>\n<p>Releases are distributed via <a href=\"https://pypi.org/project/cdo\" rel=\"nofollow\">pypi</a> and <a href=\"https://rubygems.org/gems/cdo\" rel=\"nofollow\">rubygems</a>:</p>\n<ul>\n<li>Ruby</li>\n</ul>\n<pre><code>    gem install cdo (--user-install)\n</code></pre>\n<ul>\n<li>Python</li>\n</ul>\n<pre><code>    pip install cdo (--user)\n</code></pre>\n<h3>Requirements</h3>\n<p>Cdo.{rb,py} requires a working CDO binary and Ruby 2.x or Python 2.7/3.x</p>\n<p>Multi-dimensional arrays (numpy for python, narray for ruby) require addtional\nnetcdf-io modules. These are <a href=\"https://docs.scipy.org/doc/scipy/reference/io.html\" rel=\"nofollow\">scipy</a> or <a href=\"https://pypi.python.org/pypi/netCDF4\" rel=\"nofollow\">python-netcdf4</a> for python and\n<a href=\"https://rubygems.org/gems/ruby-netcdf\" rel=\"nofollow\">ruby-netcdf</a> for ruby. Because scipy has some difficulties with netcdf, I dropped the support of it with release 1.5.0.</p>\n<p>Thx to Alexander Winkler there is also an IO option for XArray.</p>\n<h2>Usage</h2>\n<p>You can find a lot of examples in the unit tests for both languages. Here are the direct links to the <a href=\"https://github.com/Try2Code/cdo-bindings/blob/master/ruby/test/test_cdo.rb\" rel=\"nofollow\">ruby tests</a> and the <a href=\"https://github.com/Try2Code/cdo-bindings/blob/master/python/test/test_cdo.py\" rel=\"nofollow\">python tests</a>.</p>\n<p>The following describes the basic features for both languages</p>\n<h3>Run operators</h3>\n<p>Befor calling operators, you have to create an object first:</p>\n<pre>    <span class=\"n\">cdo</span> <span class=\"o\">=</span> <span class=\"no\">Cdo</span><span class=\"o\">.</span><span class=\"n\">new</span>   <span class=\"c1\">#ruby</span>\n</pre>\n<pre>    <span class=\"n\">cdo</span> <span class=\"o\">=</span> <span class=\"n\">Cdo</span><span class=\"p\">()</span>     <span class=\"c1\">#python</span>\n</pre>\n<p>Please check the documentation for constructor paramaters. I try to have equal interfaces in both languages for all public methods.</p>\n<h3>Choose CDO binary</h3>\n<p>By default the cdo-bindings use the 'cdo' binary found in your $PATH variable. To change that, you can</p>\n<ul>\n<li>load a module before calling your script(<code>module command</code> or another package manager like <code>conda</code> or <code>spack</code>)</li>\n<li>use the CDO environment variable to set the path to be used</li>\n<li>use the python/ruby method <code>cdo.setCdo('/path/to/the/CDO/executable/you/want')</code>. By this technique you can create different objects for different CDO versions.</li>\n</ul>\n<h3>Debugging</h3>\n<p>For debugging purpose, both interfaces provide a \"debug\" attribute. If it is set to a boolian true, the complete commands and the return values will be printed during execution</p>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>    <span class=\"c1\">#ruby</span>\n</pre>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>    <span class=\"c1\">#python</span>\n</pre>\n<p>The default is false of cause.</p>\n<h4>File information</h4>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">infov</span><span class=\"p\">(</span><span class=\"ss\">input</span><span class=\"p\">:</span> <span class=\"n\">ifile</span><span class=\"p\">)</span>        <span class=\"c1\">#ruby</span>\n    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">showlevels</span><span class=\"p\">(</span><span class=\"ss\">input</span><span class=\"p\">:</span> <span class=\"n\">ifile</span><span class=\"p\">)</span>\n</pre>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">infov</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">ifile</span><span class=\"p\">)</span>         <span class=\"c1\">#python</span>\n    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">showlevels</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">ifile</span><span class=\"p\">)</span>\n</pre>\n<h4>Operators with user defined regular output files</h4>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">timmin</span><span class=\"p\">(</span><span class=\"ss\">input</span><span class=\"p\">:</span> <span class=\"n\">ifile</span> <span class=\"p\">,</span><span class=\"ss\">output</span><span class=\"p\">:</span> <span class=\"n\">ofile</span><span class=\"p\">)</span>       <span class=\"c1\">#ruby</span>\n</pre>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">timmin</span><span class=\"p\">(</span><span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">ifile</span><span class=\"p\">,</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">ofile</span><span class=\"p\">)</span>      <span class=\"c1\">#python</span>\n</pre>\n<p>By default the return value of each call is the name of the output files (no matter if its a temporary file or not)</p>\n<h4>Use temporary output files</h4>\n<p>If the output key is left out, one or more (depending on the operator) temporary files are generated and used as return value(s). In a regular script or a regularly closed interactive session, these files are removed at the end automatically.</p>\n<pre>    <span class=\"n\">tminFile</span> <span class=\"o\">=</span> <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">timmin</span><span class=\"p\">(</span><span class=\"ss\">input</span><span class=\"p\">:</span> <span class=\"n\">ifile</span><span class=\"p\">)</span>  <span class=\"c1\">#ruby</span>\n</pre>\n<pre>    <span class=\"n\">tminFile</span> <span class=\"o\">=</span> <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">timmin</span><span class=\"p\">(</span><span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">ifile</span><span class=\"p\">)</span> <span class=\"c1\">#python</span>\n</pre>\n<p>However these tempfiles remain if the session/script is killed with SIGKILL or if the bindings are used via Jupyter notebooks. Those session are usually long lasting and the heavy usage if tempfiles can easily fill the system tempdir - your system will become unusable then.\nThe bindings offer two ways to cope with that</p>\n<ul>\n<li>Set another directory for storing tempfiles with a constructor option and remove anything left in there when you experienced a crash or something like this</li>\n</ul>\n<pre>   <span class=\"n\">cdo</span> <span class=\"o\">=</span> <span class=\"n\">Cdo</span><span class=\"p\">(</span><span class=\"n\">tempdir</span><span class=\"o\">=</span><span class=\"n\">tempPath</span><span class=\"p\">)</span>      <span class=\"c1\">#python</span>\n   <span class=\"n\">cdo</span> <span class=\"o\">=</span> <span class=\"n\">Cdo</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">tempdir</span><span class=\"p\">:</span> <span class=\"n\">tempPath</span><span class=\"p\">)</span> <span class=\"c1\">#ruby</span>\n</pre>\n<ul>\n<li>remove all tempfiles created by this or former usage of the cdo-bindings belonging to your current Unix-user with (taking into account user-defined <code>tempdir</code> from above</li>\n</ul>\n<pre><code>   cdo.cleanTempDir() #python\n   cdo.cleanTempDir   #ruby\n</code></pre>\n<h4>Operators with parameter</h4>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">remap</span><span class=\"p\">(</span><span class=\"o\">[</span><span class=\"n\">gridfile</span><span class=\"p\">,</span><span class=\"n\">weightfile</span><span class=\"o\">]</span><span class=\"p\">,</span><span class=\"ss\">input</span><span class=\"p\">:</span>   <span class=\"n\">ifile</span><span class=\"p\">,</span> <span class=\"ss\">output</span><span class=\"p\">:</span> <span class=\"n\">ofile</span><span class=\"p\">)</span>   <span class=\"c1\">#ruby</span>\n</pre>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">remap</span><span class=\"p\">([</span><span class=\"n\">gridfile</span><span class=\"p\">,</span><span class=\"n\">weightfile</span><span class=\"p\">],</span><span class=\"nb\">input</span> <span class=\"o\">=&gt;</span> <span class=\"n\">ifile</span><span class=\"p\">,</span> <span class=\"n\">output</span> <span class=\"o\">=&gt;</span> <span class=\"n\">ofile</span><span class=\"p\">)</span> <span class=\"c1\">#python</span>\n</pre>\n<h4>logging</h4>\n<pre>    <span class=\"n\">cdo</span> <span class=\"o\">=</span> <span class=\"no\">Cdo</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"ss\">logging</span><span class=\"p\">:</span> <span class=\"kp\">true</span><span class=\"p\">,</span> <span class=\"ss\">logFile</span><span class=\"p\">:</span> <span class=\"s1\">'cdo_commands.log'</span><span class=\"p\">)</span> <span class=\"c1\">#ruby</span>\n</pre>\n<pre>    <span class=\"n\">cdo</span> <span class=\"o\">=</span> <span class=\"n\">Cdo</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">logFile</span><span class=\"o\">=</span><span class=\"s1\">'cdo_commands.log'</span><span class=\"p\">)</span>       <span class=\"c1\">#python</span>\n</pre>\n<h4>Set global CDO options</h4>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"ss\">input</span><span class=\"p\">:</span>  <span class=\"n\">ifile</span><span class=\"p\">,</span> <span class=\"ss\">output</span><span class=\"p\">:</span>  <span class=\"n\">ofile</span><span class=\"p\">,</span><span class=\"ss\">options</span><span class=\"p\">:</span>  <span class=\"s2\">\"-f nc4\"</span><span class=\"p\">)</span>     <span class=\"c1\">#ruby</span>\n</pre>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">ifile</span><span class=\"p\">,</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">ofile</span><span class=\"p\">,</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"s2\">\"-f nc4\"</span><span class=\"p\">)</span>     <span class=\"c1\">#python</span>\n</pre>\n<h4>Set environment variables</h4>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">splitname</span><span class=\"p\">(</span><span class=\"ss\">input</span><span class=\"p\">:</span> <span class=\"n\">ifile</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">),</span>\n                  <span class=\"ss\">output</span><span class=\"p\">:</span> <span class=\"s1\">'splitTag'</span><span class=\"p\">,</span>\n                  <span class=\"ss\">env</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'CDO_FILE_SUFFIX'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'.nc'</span><span class=\"p\">})</span> <span class=\"c1\">#or</span>\n    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CDO_FILE_SUFFIX'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'.nc'</span><span class=\"p\">}</span>\n</pre>\n<pre>    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">splitname</span><span class=\"p\">(</span><span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ifiles</span><span class=\"p\">),</span>\n                  <span class=\"n\">output</span> <span class=\"o\">=</span>  <span class=\"s1\">'splitTag'</span><span class=\"p\">,</span> \n                  <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"CDO_FILE_SUFFIX\"</span><span class=\"p\">:</span> <span class=\"s2\">\".nc\"</span><span class=\"p\">})</span>   <span class=\"c1\">#or</span>\n    <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CDO_FILE_SUFFIX'</span><span class=\"p\">:</span> <span class=\"s1\">'.nc'</span><span class=\"p\">}</span>\n</pre>\n<h4>Return multi-dimension arrrays</h4>\n<pre>    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">fldmin</span><span class=\"p\">(</span><span class=\"ss\">:input</span> <span class=\"o\">=&gt;</span> <span class=\"n\">ifile</span><span class=\"p\">,</span><span class=\"ss\">:returnArray</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s1\">'T'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span>  <span class=\"c1\">#rb, version &lt;  1.2.0</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">fldmin</span><span class=\"p\">(</span><span class=\"ss\">:input</span> <span class=\"o\">=&gt;</span> <span class=\"n\">ifile</span><span class=\"p\">,</span><span class=\"ss\">:returnCdf</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s1\">'T'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span>    <span class=\"c1\">#rb, version &gt;= 1.2.0</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">fldmin</span><span class=\"p\">(</span><span class=\"ss\">:input</span> <span class=\"o\">=&gt;</span> <span class=\"n\">ifile</span><span class=\"p\">,</span><span class=\"ss\">:returnArray</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'T'</span><span class=\"p\">)</span>                <span class=\"c1\">#rb, version &gt;= 1.2.0</span>\n</pre>\n<pre>    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">fldmin</span><span class=\"p\">(</span><span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">ifile</span><span class=\"p\">,</span><span class=\"n\">returnArray</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s1\">'T'</span><span class=\"p\">][:]</span> <span class=\"c1\">#py, version &lt;  1.2.0</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">fldmin</span><span class=\"p\">(</span><span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">ifile</span><span class=\"p\">,</span><span class=\"n\">returnCdf</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s1\">'T'</span><span class=\"p\">][:]</span>   <span class=\"c1\">#py, version &gt;= 1.2.0</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">fldmin</span><span class=\"p\">(</span><span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">ifile</span><span class=\"p\">,</span><span class=\"n\">returnArray</span> <span class=\"o\">=</span> <span class=\"s1\">'T'</span><span class=\"p\">)</span>                    <span class=\"c1\">#py, version &gt;= 1.2.0</span>\n</pre>\n<p>Other options are so-called <em>masked arrays</em> (use <code>returnMaArray</code>) for ruby and python and XArray/XDataset for python-only: use <code>returnXArray</code> or <code>returnXDataset</code> for that.</p>\n<p>*) If you use scipy &gt;= 0.14 as netcdf backend, you have to use following code\ninstead to avoid possible segmentation faults:</p>\n<pre>    <span class=\"n\">cdf</span> <span class=\"o\">=</span> <span class=\"n\">cdo</span><span class=\"o\">.</span><span class=\"n\">fldmin</span><span class=\"p\">(</span><span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">ifile</span><span class=\"p\">,</span><span class=\"n\">returnCdf</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">temperatures</span> <span class=\"o\">=</span> <span class=\"n\">cdf</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s1\">'T'</span><span class=\"p\">][:]</span>\n</pre>\n<p>More examples can be found in test/cdo-examples.rb and <a href=\"https://code.zmaw.de/projects/cdo/wiki/Cdo%7Brbpy%7D\" rel=\"nofollow\">on the\nhomepage</a></p>\n<h3>Avoid re-processing</h3>\n<p>If you do not want to re-compute files, you can set</p>\n<ul>\n<li>the instance attribute 'forceOutput' to false: this will effect all later\ncall of that instance <strong>or</strong></li>\n<li>the operator option 'forceOutput' to false: this will only effect this\noperator call of this instance</li>\n</ul>\n<p>For more information, please have a look at the unit tests.</p>\n<h2>Support, Issues, Bugs, ...</h2>\n<p>Please use the forum or ticket system of CDOs official web page:\n<a href=\"http://code.zmaw.de/projects/cdo\" rel=\"nofollow\">http://code.zmaw.de/projects/cdo</a></p>\n<h2>Changelog</h2>\n<ul>\n<li><strong>1.5.0 (1.5.2 for python)</strong> API change :\n<ul>\n<li><strong>not usable with CDO-1.9.7</strong></li>\n<li>simplify the interface:\n<ul>\n<li>remove returnCdf from constructor, only use it with operator calls</li>\n<li>remove methods setReturnArray/unsetReturnArray: I fear it's not used anyway, but 'returnArray' in each call</li>\n<li>remove the optional dependency to scipy since it offers less functionality than netCDF4 and just blows up the code</li>\n<li>new attributes: hasNetcdf, hasXArray for checking for the respective support</li>\n<li>fix for cdo-1.9.6: allow non-zero return code for diff operators</li>\n</ul>\n</li>\n<li>the 1.5.2 relase for python is identical to 1.5.0 (was testing a new setup.py and version cannot be used twice in pipy)</li>\n<li>1.5.1 had building problems with pip based on python2</li>\n</ul>\n</li>\n<li><strong>1.4.0</strong> API change :\n<ul>\n<li>the <code>operators</code> atribute is no longer a list, but a dict (python) or hash (ruby) holding the number of output streams as value</li>\n<li>finally fix #16 (missing tempfile generation for more than one output streams)</li>\n<li>fix #19 (thx @pgierz for the input)</li>\n</ul>\n</li>\n<li><strong>1.3.6</strong>:\n<ul>\n<li>bugfix for non-finding the CDO binary on some systems</li>\n<li>fix hasCdo (py)</li>\n<li>add hasCdo (rb)</li>\n</ul>\n</li>\n<li><strong>1.3.5</strong>:\n<ul>\n<li>read/write support for XArray datasets - thx to @pinplex!</li>\n<li><strong>drop ruby support for 1.9 and older</strong></li>\n<li><strong>remove module interface from the ruby version</strong></li>\n</ul>\n</li>\n<li><strong>1.3.3</strong>:\n<ul>\n<li>return arrays/lists of output files, which are created by split* operators\nsuggestion from Karl-Hermann Wieners :ocean:\n<strong>NOTE</strong>: <strong>this is done by simple globbing! Any other files with the appropriate name will be included in the list!</strong></li>\n<li>use <a href=\"https://pypi.python.org/pypi/six\" rel=\"nofollow\">six</a> for python2 and 3 compatibility (thanks to @jvegasbsc)</li>\n<li>drop full support of CDO version older then 1.5.4: undocumented operators\nin these version will not be callable</li>\n<li>new keyword for operators which write to stdout: autoSplit. When set, each\nline will be split with the given value of the keyword to avoid the need\nfor manual splitting. Nested return arrays of (outer) size 1 are flattened.\nSee #11, thx to @beatorizu</li>\n</ul>\n</li>\n<li><strong>1.3.2</strong>\n<ul>\n<li>improvened stdout/stderr handling, thx to jvegasbsc</li>\n</ul>\n</li>\n<li><strong>1.3.1</strong>\n<ul>\n<li>fix environment handling per call (ruby version)</li>\n</ul>\n</li>\n<li><strong>1.3.0</strong>\n<ul>\n<li>require ruby-2.*</li>\n<li>support for upcomming CDO release 1.7.1</li>\n<li>improve loggin for ruby</li>\n<li>introduce logging for python</li>\n<li>unicode bugfix - thanks to Sebastian Illing (illing2005) [python-only]</li>\n</ul>\n</li>\n<li><strong>1.2.7</strong>\n<ul>\n<li>Added class interface for ruby version 2.x, mainly for thread safety</li>\n</ul>\n</li>\n<li><strong>1.2.6</strong>\n<ul>\n<li>bugfix for autocompletion in interactive usage [python-only]</li>\n</ul>\n</li>\n<li><strong>1.2.5</strong>\n<ul>\n<li>bugfix for environment handling (Thanks philipp) [python-only]</li>\n<li>add logging [ruby-only]</li>\n</ul>\n</li>\n<li><strong>1.2.4</strong>\n<ul>\n<li>support python3: Thanks to @jhamman</li>\n<li>bugfix for scipy: Thanks to @martinclaus</li>\n<li>docu fixes: Thanks to @guziy</li>\n<li>allow environment setting via call and object construction (see test_env in test_cdo.py)</li>\n</ul>\n</li>\n<li><strong>1.2.3</strong>\n<ul>\n<li>bugfix release: adjust library/feature check to latest cdo-1.6.2  release</li>\n</ul>\n</li>\n<li><strong>1.2.2</strong>\n<ul>\n<li>allow arrays in additions to strings for input argument</li>\n<li>add methods for checking the IO libraries of CDO and their versions</li>\n<li>optionally return None on error (suggestion from Alex Loew, python only)</li>\n</ul>\n</li>\n<li><strong>1.2.1</strong>\n<ul>\n<li>new return option: Masked Arrays\nif the new keyword returnMaArray is given, its value is taken as variable\nname and a masked array wrt to its FillValues is returned\ncontribution for python by Alex Loew</li>\n<li>error handling: return stderr in case of non-zero return value + raise exception\ncontribution for python from Estanislao Gonzalez</li>\n<li>autocompletion and built-in documentation through help() for interactive use\ncontribution from Estanislao Gonzalez [python]</li>\n<li>Added help operator for displaying help interactively [ruby]</li>\n</ul>\n</li>\n<li><strong>1.2.0</strong> API change:\n<ul>\n<li>Ruby now uses the same keys like the python interface, i.e. :input and :output\ninstead of :in and :out</li>\n<li>:returnArray will accept a variable name, for which the multidimesional\narray is returned</li>\n</ul>\n</li>\n<li><strong>1.1.0</strong> API change:\n<ul>\n<li>new option :returnCdf : will return the netcdf file handle, which was formerly\ndone via :returnArray</li>\n<li>new options :force : if set to true the cdo call will be run even if the given\noutput file is presen, default: false</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2><a href=\"https://github.com/Try2Code/cdo-bindings/graphs/contributors\" rel=\"nofollow\">Thanks to all contributors!</a></h2>\n<h2>License</h2>\n<p>Cdo.{rb,py} makes use of the BSD-3-clause license</p>\n\n          </div>"}, "last_serial": 5396455, "releases": {"1.0.10": [{"comment_text": "", "digests": {"md5": "3b7ad566698a780a0dbd79f3a5942d19", "sha256": "edd907ad10ec15191b6bf83f621a1646479d5741ac04ddeafdc038626f7a7f42"}, "downloads": -1, "filename": "cdo-1.0.10.tar.gz", "has_sig": false, "md5_digest": "3b7ad566698a780a0dbd79f3a5942d19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5634, "upload_time": "2012-08-03T14:45:17", "upload_time_iso_8601": "2012-08-03T14:45:17.939696Z", "url": "https://files.pythonhosted.org/packages/4a/ed/cecb177c8f9b1def85d325e56fa07f44895c6ec81c094cdaf9475b12aff2/cdo-1.0.10.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "4c2cdef789f939b645bda31b820a6b82", "sha256": "a150e2a884eabfc259057d894799774621af5c56c3e0b80e82c5814c923edb92"}, "downloads": -1, "filename": "cdo-1.0.4-py2.7.egg", "has_sig": false, "md5_digest": "4c2cdef789f939b645bda31b820a6b82", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 7500, "upload_time": "2012-01-18T15:46:18", "upload_time_iso_8601": "2012-01-18T15:46:18.288168Z", "url": "https://files.pythonhosted.org/packages/1b/a4/a316ffd650dca7744e552535f55f8ebdf4881b4bfe791271af6a906e271f/cdo-1.0.4-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b62860dd0371a36b71a6185cf9a57ae", "sha256": "41db460a340eae3daef22977485bffb3f691ff4e710b6a8a6a8ac91648872798"}, "downloads": -1, "filename": "cdo-1.0.4.tar.gz", "has_sig": false, "md5_digest": "4b62860dd0371a36b71a6185cf9a57ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4928, "upload_time": "2012-01-18T15:37:54", "upload_time_iso_8601": "2012-01-18T15:37:54.240636Z", "url": "https://files.pythonhosted.org/packages/b7/1a/7bd5cbccb0189f5ffd54aadfff0fd3d1c5be98832e8a77daaa51b2b989d3/cdo-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "d34f4e592b6822d74163ef47a650e0a1", "sha256": "7e04eda1801a55e053fe16cb0848ceac6a8a6e40dff2242489806053e42395fc"}, "downloads": -1, "filename": "cdo-1.0.5.tar.gz", "has_sig": false, "md5_digest": "d34f4e592b6822d74163ef47a650e0a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5044, "upload_time": "2012-01-24T14:34:13", "upload_time_iso_8601": "2012-01-24T14:34:13.468566Z", "url": "https://files.pythonhosted.org/packages/64/7d/0b0d37f70b74b5fa62a689e6184d525ba77c443cc70930f08fa0a2066f41/cdo-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "b151d999e59f9571367c57aae6cd3bbb", "sha256": "b934b48ce0342ae1f872765877ed4e733a1132c216e84724629ef2fbdb646b59"}, "downloads": -1, "filename": "cdo-1.0.6.tar.gz", "has_sig": false, "md5_digest": "b151d999e59f9571367c57aae6cd3bbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5247, "upload_time": "2012-01-31T21:01:30", "upload_time_iso_8601": "2012-01-31T21:01:30.284810Z", "url": "https://files.pythonhosted.org/packages/64/4b/feba3fba0f96152d59eba727502c0ecd2d14b8b14306e95f41fd8ef02a8c/cdo-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "c6bdbe249325b4fd651a40ceb8f1b748", "sha256": "8f03259e759dde5c40627d3855d3d00ed63a82369af36c8adc06418230f5474e"}, "downloads": -1, "filename": "cdo-1.0.7.tar.gz", "has_sig": false, "md5_digest": "c6bdbe249325b4fd651a40ceb8f1b748", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5292, "upload_time": "2012-03-22T09:19:33", "upload_time_iso_8601": "2012-03-22T09:19:33.697895Z", "url": "https://files.pythonhosted.org/packages/37/c1/4f2d4af89b9e0dadb2428d393a73ac759e89376784b7b988faa63c328ade/cdo-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "5519cc00f3994b3b0c7d21dbc34a7d23", "sha256": "e73d8d627a04be4bc409dc45155ecc87bb4a1d50f70f628eb8f6ede1cda04bc2"}, "downloads": -1, "filename": "cdo-1.0.8.tar.gz", "has_sig": false, "md5_digest": "5519cc00f3994b3b0c7d21dbc34a7d23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5375, "upload_time": "2012-04-11T16:00:46", "upload_time_iso_8601": "2012-04-11T16:00:46.755210Z", "url": "https://files.pythonhosted.org/packages/fc/23/9998c323cc941f52e34359c1cd21502e39aa763f73516ffe0a2b6218ff7c/cdo-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "c6221e14268851567057c54520fe8416", "sha256": "c1906745a48b1178b3a712872f3902e0b9c7e90474ff0ad8e2098b352ee263e5"}, "downloads": -1, "filename": "cdo-1.0.9.tar.gz", "has_sig": false, "md5_digest": "c6221e14268851567057c54520fe8416", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5570, "upload_time": "2012-04-23T10:59:47", "upload_time_iso_8601": "2012-04-23T10:59:47.777182Z", "url": "https://files.pythonhosted.org/packages/1e/6b/4c53a8747bd47b829e3d0715282c510de62dc4bc94f56966a2c5a805c800/cdo-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d9a052a1f3ff41b89da2a7f48f427993", "sha256": "d4f3fca1d1029c530187da66c5479a88cad6991ce65821b38089778c72f09a3b"}, "downloads": -1, "filename": "cdo-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d9a052a1f3ff41b89da2a7f48f427993", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6232, "upload_time": "2012-11-15T08:27:33", "upload_time_iso_8601": "2012-11-15T08:27:33.760541Z", "url": "https://files.pythonhosted.org/packages/7a/9c/972dc0c4e9e46b4f1d7a85e227c451efda3b8d4fc6f716f73dc718f97e54/cdo-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "ccf701a6f3f36b4d05d4f078630b3513", "sha256": "b497c9c129d5511567db9f071fe4007d4e5ec82193b57b8e80e6ebcee7365ae9"}, "downloads": -1, "filename": "cdo-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ccf701a6f3f36b4d05d4f078630b3513", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6620, "upload_time": "2012-11-21T15:31:00", "upload_time_iso_8601": "2012-11-21T15:31:00.169734Z", "url": "https://files.pythonhosted.org/packages/26/8c/17389ec054ec83169b596b2498f328b0b848980a83a5b92fd736bc300e2f/cdo-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "125847e3a05dba812bed1f04327bb518", "sha256": "d3e81d4069242b9ccf99f2864fa2a9c7207d4e41a6e56f28a35f3c189f7ae2a2"}, "downloads": -1, "filename": "cdo-1.2.1.tar.gz", "has_sig": false, "md5_digest": "125847e3a05dba812bed1f04327bb518", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7790, "upload_time": "2012-12-05T07:26:28", "upload_time_iso_8601": "2012-12-05T07:26:28.145429Z", "url": "https://files.pythonhosted.org/packages/29/98/949f8db784f0f1cd488901275d5e1e1018c4ed1e99632a9954dcd8bd630a/cdo-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "c6f4f548d5c71d103747255060e51c40", "sha256": "830994c1e67437e18431ec88a48963c6111296eab2baeb3bfa9744f8dca626da"}, "downloads": -1, "filename": "cdo-1.2.2.tar.gz", "has_sig": false, "md5_digest": "c6f4f548d5c71d103747255060e51c40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8721, "upload_time": "2013-09-12T14:14:47", "upload_time_iso_8601": "2013-09-12T14:14:47.876595Z", "url": "https://files.pythonhosted.org/packages/8d/49/9c71de8b04efedcc00a076303851963473195da5785728936a242740ebb2/cdo-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "fe4b010e9c29a3e7df560bf830e474a7", "sha256": "4d035f3647a17bf6ee7092a07c298c3a1b7e8864242c7cb03b3d546dd381c3ed"}, "downloads": -1, "filename": "cdo-1.2.3.tar.gz", "has_sig": false, "md5_digest": "fe4b010e9c29a3e7df560bf830e474a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8781, "upload_time": "2013-09-23T11:51:32", "upload_time_iso_8601": "2013-09-23T11:51:32.882052Z", "url": "https://files.pythonhosted.org/packages/36/59/ced9fb0b261cbcc88f37672c2d90712e4c8a41aec20a29749b5c0e0f4bfd/cdo-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "6b9c6b5394182d0252019611b32ed822", "sha256": "ed8d7f38a3cdca235b49cfed22740b307a28a3470eab2df39135459ff308b62b"}, "downloads": -1, "filename": "cdo-1.2.4.tar.gz", "has_sig": false, "md5_digest": "6b9c6b5394182d0252019611b32ed822", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10543, "upload_time": "2014-12-03T09:31:58", "upload_time_iso_8601": "2014-12-03T09:31:58.275957Z", "url": "https://files.pythonhosted.org/packages/a8/b1/342e59b0c00a285f3078a466952500772a1bef0a4f617dad4e1bcd84dda7/cdo-1.2.4.tar.gz", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "fbf112706c21d4a60baaeeda098bc53d", "sha256": "fa8c42aa9df61ec7c8162993cfce400a53c2d0b477633db0d71b49d306b05f8b"}, "downloads": -1, "filename": "cdo-1.2.5.tar.gz", "has_sig": false, "md5_digest": "fbf112706c21d4a60baaeeda098bc53d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10563, "upload_time": "2015-02-27T12:43:41", "upload_time_iso_8601": "2015-02-27T12:43:41.434323Z", "url": "https://files.pythonhosted.org/packages/a5/a2/6cc9cb0369039eefbccf1b01e5a8da4c967666d36e7ccbdbb00583ccbea1/cdo-1.2.5.tar.gz", "yanked": false}], "1.2.6": [{"comment_text": "", "digests": {"md5": "6650d64c09d9e6971ae29e164d6f3bc5", "sha256": "b7e8d62286ae82c6718aad163734961f43bb38a52c40107aa072cb68324b1308"}, "downloads": -1, "filename": "cdo-1.2.6.tar.gz", "has_sig": false, "md5_digest": "6650d64c09d9e6971ae29e164d6f3bc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10801, "upload_time": "2015-05-05T11:22:50", "upload_time_iso_8601": "2015-05-05T11:22:50.568541Z", "url": "https://files.pythonhosted.org/packages/bd/0f/140fa8e3e8d5936ae301638e17311da4e87a88df8411b31e0696d3d9c7c4/cdo-1.2.6.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "08d0bf10cbc7451b73a68441ed477a9d", "sha256": "69368cdf07adf2e138ad799f947375ccdde7b19f62a162afa585b246a2ebc87e"}, "downloads": -1, "filename": "cdo-1.3.0.tar.gz", "has_sig": false, "md5_digest": "08d0bf10cbc7451b73a68441ed477a9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11625, "upload_time": "2016-01-22T10:26:04", "upload_time_iso_8601": "2016-01-22T10:26:04.065118Z", "url": "https://files.pythonhosted.org/packages/8f/65/430f7adb5233057da44c3114b361469c5f7c29c53200bf12426fea8d6adc/cdo-1.3.0.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "4b3686ec1b9b891f166c1c466c6db745", "sha256": "9f78879d90d14134f2320565016d0d371b7dfe7ec71110fd313868ec1db34aee"}, "downloads": -1, "filename": "cdo-1.3.2.tar.gz", "has_sig": false, "md5_digest": "4b3686ec1b9b891f166c1c466c6db745", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11949, "upload_time": "2016-10-24T15:10:49", "upload_time_iso_8601": "2016-10-24T15:10:49.066147Z", "url": "https://files.pythonhosted.org/packages/d6/13/908e7c1451e1f5fb68405f341cdcb3196a16952ebfe1f172cb788f864aa9/cdo-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "c75a4a405c13ac64ed6227411cfdff75", "sha256": "33653e582a8e62df2da9c8be2832618a85e20dc59ef92db53540a1740f0b387e"}, "downloads": -1, "filename": "cdo-1.3.3.tar.gz", "has_sig": false, "md5_digest": "c75a4a405c13ac64ed6227411cfdff75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11840, "upload_time": "2017-02-24T13:04:00", "upload_time_iso_8601": "2017-02-24T13:04:00.040937Z", "url": "https://files.pythonhosted.org/packages/fe/38/7be06aed28d2d29cda1fbedc5a472a16e348d19e318858cede111c1d9f52/cdo-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "dd9b63ef477d4cf3b13b0faa1fe0bb81", "sha256": "2f086a4141f8448947ebcd11532faad42a5836d57b63edf3e1f054ea6feab289"}, "downloads": -1, "filename": "cdo-1.3.4.tar.gz", "has_sig": false, "md5_digest": "dd9b63ef477d4cf3b13b0faa1fe0bb81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13500, "upload_time": "2017-09-06T10:02:06", "upload_time_iso_8601": "2017-09-06T10:02:06.852505Z", "url": "https://files.pythonhosted.org/packages/18/c7/b05f986a504a255036cd8510523370a8da92d11317745790f9fafd44fc51/cdo-1.3.4.tar.gz", "yanked": false}], "1.3.5": [{"comment_text": "", "digests": {"md5": "6891297e115543ae86c80ccba17eb6f2", "sha256": "b1225773f29c0e52354c66cf0d1026ce78cb6fa9872fdb2748c0f209218df316"}, "downloads": -1, "filename": "cdo-1.3.5.tar.gz", "has_sig": false, "md5_digest": "6891297e115543ae86c80ccba17eb6f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13567, "upload_time": "2017-10-02T10:16:06", "upload_time_iso_8601": "2017-10-02T10:16:06.071105Z", "url": "https://files.pythonhosted.org/packages/47/c0/58f613347bc32209fac02203830088dbae64eabb8506e7edb35a60da8cf7/cdo-1.3.5.tar.gz", "yanked": false}], "1.3.6": [{"comment_text": "", "digests": {"md5": "b12f3875fc3546a2f6f0ad8961ba1cb7", "sha256": "b167efbbac7d0a6cbf74f5d211255705c73245f7c2590b6d9eb634347d8b2c1f"}, "downloads": -1, "filename": "cdo-1.3.6.tar.gz", "has_sig": false, "md5_digest": "b12f3875fc3546a2f6f0ad8961ba1cb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13324, "upload_time": "2018-04-03T08:00:08", "upload_time_iso_8601": "2018-04-03T08:00:08.540263Z", "url": "https://files.pythonhosted.org/packages/7a/8f/cefe61a75ae16c8b0d2eaf1c04b3c49a70912c9b46c09f4d11b2f4f65048/cdo-1.3.6.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "1bdc8619e2a195ca843d336d9eaca0db", "sha256": "dae7cdba3c52d36a4cdcd9e91183416f05f1478a02960048777b1860c2601d27"}, "downloads": -1, "filename": "cdo-1.4.0.tar.gz", "has_sig": false, "md5_digest": "1bdc8619e2a195ca843d336d9eaca0db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15233, "upload_time": "2018-09-19T23:48:26", "upload_time_iso_8601": "2018-09-19T23:48:26.472479Z", "url": "https://files.pythonhosted.org/packages/61/fa/1a72053c3091a0b8c09abf76b5ae707c34c9a2ae16e630f32c0a002513ed/cdo-1.4.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "9172e17f27a69892155b876e44a1207e", "sha256": "cf1feacf21cafa7af3373e40c75a83c412cc3c8d57b67a138484bcbbb0d98f6c"}, "downloads": -1, "filename": "cdo-1.5.1.tar.gz", "has_sig": false, "md5_digest": "9172e17f27a69892155b876e44a1207e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 21057, "upload_time": "2019-02-14T10:32:50", "upload_time_iso_8601": "2019-02-14T10:32:50.717100Z", "url": "https://files.pythonhosted.org/packages/28/45/1e19bc107fe16810deeab3c8ce9c8b09c78e16d40e5518177b162d239a98/cdo-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "df540b2567e3b07ecd4ca60ccea79907", "sha256": "eb4a6dbae6656f7a6f7822f0429aedd410e799df9a0ec37e9c55256d5808be56"}, "downloads": -1, "filename": "cdo-1.5.2.tar.gz", "has_sig": false, "md5_digest": "df540b2567e3b07ecd4ca60ccea79907", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 21091, "upload_time": "2019-02-18T09:53:16", "upload_time_iso_8601": "2019-02-18T09:53:16.777065Z", "url": "https://files.pythonhosted.org/packages/09/39/c90f39df98681be7d658d6f54c8a70264367d83bfd37a92f0fef65934787/cdo-1.5.2.tar.gz", "yanked": false}], "1.5.3": [{"comment_text": "", "digests": {"md5": "4314a3e565fd51ae2cb2f42c698415ad", "sha256": "b35b872046c3bd98e9d325882197df6f4c4b92c0602bb2ce4bb3af645b0cdb4f"}, "downloads": -1, "filename": "cdo-1.5.3.tar.gz", "has_sig": false, "md5_digest": "4314a3e565fd51ae2cb2f42c698415ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 22030, "upload_time": "2019-06-13T15:37:03", "upload_time_iso_8601": "2019-06-13T15:37:03.881189Z", "url": "https://files.pythonhosted.org/packages/3b/79/dfdcdb73525a3fef451473b9ccee49987aa68936bb103cd1bbea5fc0bb67/cdo-1.5.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4314a3e565fd51ae2cb2f42c698415ad", "sha256": "b35b872046c3bd98e9d325882197df6f4c4b92c0602bb2ce4bb3af645b0cdb4f"}, "downloads": -1, "filename": "cdo-1.5.3.tar.gz", "has_sig": false, "md5_digest": "4314a3e565fd51ae2cb2f42c698415ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 22030, "upload_time": "2019-06-13T15:37:03", "upload_time_iso_8601": "2019-06-13T15:37:03.881189Z", "url": "https://files.pythonhosted.org/packages/3b/79/dfdcdb73525a3fef451473b9ccee49987aa68936bb103cd1bbea5fc0bb67/cdo-1.5.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:55 2020"}