{"info": {"author": "Richard Delaney", "author_email": "richdel1991@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Pocket Library for Python\n-------------------------\n\nThis came from my wanting to have something to do the following:\n\n- Auto-magically tag articles which are above a certain length with the tag long. This would mean that when I have some time to read a lengthy article, I can simply call up that tag and read from those articles.\n- I also want to (and can but haven't been bothered yet) to be able to auto tag articles based on words in the title. For example \"Ubuntu 2013\" would be auto-tagged with the tags \"Linux\" and \"nerd\".\n- The end goal is to make an automatically tagging system with some form of intelligence perhaps using something like bayesian filtering. Right now, I am doing a lot of data grabbing from this and will work on the more intelligent side when I get a proper opportunity.\n\nIn order to use the pocket API, you have to register a new pocket app. Do this by following the relevant links in the [developer docs](http://getpocket.com/developer/docs/overview).\n\nUsing this consumer key you will get an access token for the user by running the following:\n\npython auth.py --key=\\<consumer-key\\>\n\nFollow the instructions and the program will finish.\nCheck your .creds file in the root directory of the project to make sure that it exists and has a consumer key and access token.\n\nThere are three seperate files that are exposed in pocketpy\n\n- auth.py -> this handles Oauth to get access token for the user. In order to make any API calls you need to have both a consumer key and an access token.\n- pocket.py -> This contains any logic to do with making the actual requests, it has the retrieve, modify and add functions. \n- tags.py -> This is a seperate logic file which handles the higher level case of using the modify function to add tags to items.\n\nIn the bin/ directory of this project, there is a number of scripts to do things like automatically grabbing the items in a users pocket and saving them. It also handles the article tagging.\n\nI run this on a remote machine as a cron job, which runs every two hours and auto tags some of my list for me. in example/ there is an example bash script for how you might run it.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/PocketPy", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "PocketPy", "package_url": "https://pypi.org/project/PocketPy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/PocketPy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/PocketPy"}, "release_url": "https://pypi.org/project/PocketPy/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "A python wrapper and some scripts for communication with pocket api", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This came from my wanting to have something to do the following:</p>\n<ul>\n<li>Auto-magically tag articles which are above a certain length with the tag long. This would mean that when I have some time to read a lengthy article, I can simply call up that tag and read from those articles.</li>\n<li>I also want to (and can but haven\u2019t been bothered yet) to be able to auto tag articles based on words in the title. For example \u201cUbuntu 2013\u201d would be auto-tagged with the tags \u201cLinux\u201d and \u201cnerd\u201d.</li>\n<li>The end goal is to make an automatically tagging system with some form of intelligence perhaps using something like bayesian filtering. Right now, I am doing a lot of data grabbing from this and will work on the more intelligent side when I get a proper opportunity.</li>\n</ul>\n<p>In order to use the pocket API, you have to register a new pocket app. Do this by following the relevant links in the [developer docs](<a href=\"http://getpocket.com/developer/docs/overview\" rel=\"nofollow\">http://getpocket.com/developer/docs/overview</a>).</p>\n<p>Using this consumer key you will get an access token for the user by running the following:</p>\n<p>python auth.py \u2013key=&lt;consumer-key&gt;</p>\n<p>Follow the instructions and the program will finish.\nCheck your .creds file in the root directory of the project to make sure that it exists and has a consumer key and access token.</p>\n<p>There are three seperate files that are exposed in pocketpy</p>\n<ul>\n<li>auth.py -&gt; this handles Oauth to get access token for the user. In order to make any API calls you need to have both a consumer key and an access token.</li>\n<li>pocket.py -&gt; This contains any logic to do with making the actual requests, it has the retrieve, modify and add functions.</li>\n<li>tags.py -&gt; This is a seperate logic file which handles the higher level case of using the modify function to add tags to items.</li>\n</ul>\n<p>In the bin/ directory of this project, there is a number of scripts to do things like automatically grabbing the items in a users pocket and saving them. It also handles the article tagging.</p>\n<p>I run this on a remote machine as a cron job, which runs every two hours and auto tags some of my list for me. in example/ there is an example bash script for how you might run it.</p>\n\n          </div>"}, "last_serial": 784930, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "039365dc4fc182bee99a666f4ee942eb", "sha256": "e72349678a06d43b02a70867bf846c23f1e54d553e1b28d717aa590a3640ebf6"}, "downloads": -1, "filename": "PocketPy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "039365dc4fc182bee99a666f4ee942eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4475, "upload_time": "2013-01-22T19:19:36", "upload_time_iso_8601": "2013-01-22T19:19:36.460501Z", "url": "https://files.pythonhosted.org/packages/63/e2/f1c1a669b9b140de085dd5aa1f225afe92721a8c550668de15aa91555285/PocketPy-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ff8f56e3854c71a528423d3f68c1fbc9", "sha256": "edfdfd45d7f673af755484fb49e2aec3cda9c766b62f7eb6db2a4ee2579bb89f"}, "downloads": -1, "filename": "PocketPy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ff8f56e3854c71a528423d3f68c1fbc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4575, "upload_time": "2013-01-27T16:56:51", "upload_time_iso_8601": "2013-01-27T16:56:51.389572Z", "url": "https://files.pythonhosted.org/packages/9d/55/ad2cce8d51a55514fe75cfcfd69a1164bae750aee5c77071072c8636b2ba/PocketPy-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ff8f56e3854c71a528423d3f68c1fbc9", "sha256": "edfdfd45d7f673af755484fb49e2aec3cda9c766b62f7eb6db2a4ee2579bb89f"}, "downloads": -1, "filename": "PocketPy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ff8f56e3854c71a528423d3f68c1fbc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4575, "upload_time": "2013-01-27T16:56:51", "upload_time_iso_8601": "2013-01-27T16:56:51.389572Z", "url": "https://files.pythonhosted.org/packages/9d/55/ad2cce8d51a55514fe75cfcfd69a1164bae750aee5c77071072c8636b2ba/PocketPy-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:10 2020"}