{"info": {"author": "Daniel Huynh", "author_email": "daniel.quoc.huynh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# fast-neptune\n> Quickly track your Jupyter Notebook experiments with NeptuneML\n\n\n`fast-neptune` is a library that helps you quickly record all the information you need to launch your experiments, when you are using Jupyter Notebooks. Reproducibility has become a crucial issue in Machine Learning, not only for research, but also for real world applications, where we want to have robust results, and track every set of parameters tested, along with their results.\n\n`fast-neptune` spirit is highly inspired from [nbdev](http://nbdev.fast.ai/) in the user experience, so it is recommended to have a look first at it.\n\nFurthermore, `fast-neptune` is built upon the solution [neptune-ml](https://neptune.ai/) which allows users to quickly record on a public or private repository. Following the [quick introduction](https://docs.neptune.ai/python-api/introduction.html) is a plus to understand `fast-neptune`, but as we will see it's quite intuitive.\n\n## Install\n\n`fast-neptune` is available on pypi so you can simply run :\n\n`pip install fast-neptune`\n\n## How to use\n\n`fast-neptune` has implemend several features to help you when you run ML experiments.\nThese include :\n<ul>\n    <li>metadata about the machine where the code is run, including OS, and OS version</li>\n    <li>requirements of the notebook where the experiments are run</li>\n    <li>parameters used during the experience, which means the names of the values of the variables you want to track</li>\n    <li>code you used during the run that you want to record</li>\n</ul>\n\nNote that code and parameters are not mandatorily tracked, while the two former are, though the whole purpose of this library is to facilitate the tracking of parameters and code.\n\n### Metadata \n\nMetadata is tracked about the requirements used and information about the Python version and OS used.\n\nThey are added automatically when an experiment is created, through the functions [`get_metadata`](/core#get_metadata) and [`create_requirements`](/core#create_requirements).\n\n### Property\n\nProperties refer to variables you want to record. \n\nTo record properties, simply add `#property` to each cell containing the variables you want to record.\n\nNote : if one variable in a property is a file encapsulated in a `Path` object, it is automatically tracked, and this file will be sent to NeptuneML. You can disable this option when creating the experiment.\n\n### Code\n\nCode cells can also be tracked.\n\nTo do so, simply add `#code` to each cell you want to record. You have the possibility to specify under what name the cell code will be registered. By default, all cells with `#code` will be added chronogically to the file \"main.py\", but if you can put them in specific files by adding the name of the module you want them to be put in.\n\nExample : add `#code dataloading.py` to the cells that take care of the data loading.\n\n## Example with fastai vision to train a MNIST classifier\n\nTo understand more how all of this fit in, we will follow a simple example, using fastai library.\n\nFirst we will log in using NeptuneML\n\n```python\n# Neptune login\nfrom neptune.sessions import Session\nimport getpass\n\n# First we get the token\napi_token = getpass.getpass(\"Please enter your NeptuneML API token : \")\nsession = Session(api_token=api_token)\n\n# Then we enter user name and project\nuser_name = \"danywin\"\nproject_name = \"fast-neptune\"\n\nproject = session.get_project(project_qualified_name=f'{user_name}/{project_name}')\n```\n\n    Please enter your NeptuneML API token : \n\n\n    WARNING: Instantiating Session without specifying a backend is deprecated and will be removed in future versions. For current behaviour use `neptune.init(...)` or `Session.with_default_backend(...)\n    WARNING: It is not secure to place API token in your source code. You should treat it as a password to your account. It is strongly recommended to use NEPTUNE_API_TOKEN environment variable instead. Remember not to upload source file with API token to any public repository.\n\n\nNow we will start using `fast-neptune`.\n\nFirst we will record the code used to load the data and learner. To do so, we simply add `#code` to the cell used to load the data.\n\n```python\nfrom fast_neptune.core import *\n```\n\n```python\n#code dataloading.py\nfrom fastai.vision import *\n\npath = untar_data(URLs.MNIST_SAMPLE)\ndata = ImageDataBunch.from_folder(path)\nlearn = cnn_learner(data, models.resnet18, metrics=accuracy)\n```\n\nThen we want to keep track of the number of epochs during training, and the learning rate we used. To do so we add `#property` to the cell we want to track.\n\n```python\n#property\nn_epoch = 1\nlr = 1e-2\n```\n\nFinally we use [`fast_experiment`](/core#fast_experiment) to create our experiment. Note that you must pass it the name of the notebook you are using for your experiments, and the global variables you are currently using to record each variable in the properties cells.\n\nHere we will create an experiment, then record the validation accuracy.\n\n```python\n#code\nnb_name = \"index.ipynb\"\nglobs = globals()\n\nwith fast_experiment(project,nb_name,globs) as exp:\n    learn.fit_one_cycle(n_epoch,lr)\n    pred,y = learn.get_preds()\n\n    score = accuracy(pred,y).item()\n    exp.send_metric(\"valid_accuracy\",score)\n```\n\n    https://ui.neptune.ai/danywin/fast-neptune/e/FAS1-18\n\n\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: left;\">\n      <th>epoch</th>\n      <th>train_loss</th>\n      <th>valid_loss</th>\n      <th>accuracy</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0.052504</td>\n      <td>0.014153</td>\n      <td>0.994603</td>\n      <td>00:04</td>\n    </tr>\n  </tbody>\n</table>\n\n\n\n\n\n\nNow if we go on the link provided by NeptuneML we can have a closer look at this experiment :\n\nHere we can see the parameters that were registered, including epoch, learning rate, OS, and Python version.\n\n![Parameters](imgs\\parameters.PNG)\n\nIn the source code tab, we can have a look at the bits of code we registered, here the dataloading.\n![Code](imgs\\code.PNG)\n\nIn the artifacts we also have the modules used in this notebook with their version : \n\n![Requirements](imgs\\requirements.PNG)\n\nFinally, we logged the validation accuracy, which can be found in the Logs tab : \n\n![Parameters](imgs\\valid_score.PNG)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DanyWind/fast_neptune", "keywords": "netpuneml experiments", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "fast-neptune", "package_url": "https://pypi.org/project/fast-neptune/", "platform": "", "project_url": "https://pypi.org/project/fast-neptune/", "project_urls": {"Homepage": "https://github.com/DanyWind/fast_neptune"}, "release_url": "https://pypi.org/project/fast-neptune/0.0.3/", "requires_dist": ["psutil", "neptune-client", "nbdev", "pipreqs"], "requires_python": ">=3.6", "summary": "NeptuneML wrapper to quickly record data about experiments", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>fast-neptune</h1>\n<blockquote>\n<p>Quickly track your Jupyter Notebook experiments with NeptuneML</p>\n</blockquote>\n<p><code>fast-neptune</code> is a library that helps you quickly record all the information you need to launch your experiments, when you are using Jupyter Notebooks. Reproducibility has become a crucial issue in Machine Learning, not only for research, but also for real world applications, where we want to have robust results, and track every set of parameters tested, along with their results.</p>\n<p><code>fast-neptune</code> spirit is highly inspired from <a href=\"http://nbdev.fast.ai/\" rel=\"nofollow\">nbdev</a> in the user experience, so it is recommended to have a look first at it.</p>\n<p>Furthermore, <code>fast-neptune</code> is built upon the solution <a href=\"https://neptune.ai/\" rel=\"nofollow\">neptune-ml</a> which allows users to quickly record on a public or private repository. Following the <a href=\"https://docs.neptune.ai/python-api/introduction.html\" rel=\"nofollow\">quick introduction</a> is a plus to understand <code>fast-neptune</code>, but as we will see it's quite intuitive.</p>\n<h2>Install</h2>\n<p><code>fast-neptune</code> is available on pypi so you can simply run :</p>\n<p><code>pip install fast-neptune</code></p>\n<h2>How to use</h2>\n<p><code>fast-neptune</code> has implemend several features to help you when you run ML experiments.\nThese include :</p>\n<ul>\n    <li>metadata about the machine where the code is run, including OS, and OS version</li>\n    <li>requirements of the notebook where the experiments are run</li>\n    <li>parameters used during the experience, which means the names of the values of the variables you want to track</li>\n    <li>code you used during the run that you want to record</li>\n</ul>\n<p>Note that code and parameters are not mandatorily tracked, while the two former are, though the whole purpose of this library is to facilitate the tracking of parameters and code.</p>\n<h3>Metadata</h3>\n<p>Metadata is tracked about the requirements used and information about the Python version and OS used.</p>\n<p>They are added automatically when an experiment is created, through the functions <a href=\"/core#get_metadata\" rel=\"nofollow\"><code>get_metadata</code></a> and <a href=\"/core#create_requirements\" rel=\"nofollow\"><code>create_requirements</code></a>.</p>\n<h3>Property</h3>\n<p>Properties refer to variables you want to record.</p>\n<p>To record properties, simply add <code>#property</code> to each cell containing the variables you want to record.</p>\n<p>Note : if one variable in a property is a file encapsulated in a <code>Path</code> object, it is automatically tracked, and this file will be sent to NeptuneML. You can disable this option when creating the experiment.</p>\n<h3>Code</h3>\n<p>Code cells can also be tracked.</p>\n<p>To do so, simply add <code>#code</code> to each cell you want to record. You have the possibility to specify under what name the cell code will be registered. By default, all cells with <code>#code</code> will be added chronogically to the file \"main.py\", but if you can put them in specific files by adding the name of the module you want them to be put in.</p>\n<p>Example : add <code>#code dataloading.py</code> to the cells that take care of the data loading.</p>\n<h2>Example with fastai vision to train a MNIST classifier</h2>\n<p>To understand more how all of this fit in, we will follow a simple example, using fastai library.</p>\n<p>First we will log in using NeptuneML</p>\n<pre><span class=\"c1\"># Neptune login</span>\n<span class=\"kn\">from</span> <span class=\"nn\">neptune.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n<span class=\"kn\">import</span> <span class=\"nn\">getpass</span>\n\n<span class=\"c1\"># First we get the token</span>\n<span class=\"n\">api_token</span> <span class=\"o\">=</span> <span class=\"n\">getpass</span><span class=\"o\">.</span><span class=\"n\">getpass</span><span class=\"p\">(</span><span class=\"s2\">\"Please enter your NeptuneML API token : \"</span><span class=\"p\">)</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">api_token</span><span class=\"o\">=</span><span class=\"n\">api_token</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Then we enter user name and project</span>\n<span class=\"n\">user_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"danywin\"</span>\n<span class=\"n\">project_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"fast-neptune\"</span>\n\n<span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get_project</span><span class=\"p\">(</span><span class=\"n\">project_qualified_name</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">user_name</span><span class=\"si\">}</span><span class=\"s1\">/</span><span class=\"si\">{</span><span class=\"n\">project_name</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>Please enter your NeptuneML API token : \n\n\nWARNING: Instantiating Session without specifying a backend is deprecated and will be removed in future versions. For current behaviour use `neptune.init(...)` or `Session.with_default_backend(...)\nWARNING: It is not secure to place API token in your source code. You should treat it as a password to your account. It is strongly recommended to use NEPTUNE_API_TOKEN environment variable instead. Remember not to upload source file with API token to any public repository.\n</code></pre>\n<p>Now we will start using <code>fast-neptune</code>.</p>\n<p>First we will record the code used to load the data and learner. To do so, we simply add <code>#code</code> to the cell used to load the data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fast_neptune.core</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<pre><span class=\"c1\">#code dataloading.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fastai.vision</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">untar_data</span><span class=\"p\">(</span><span class=\"n\">URLs</span><span class=\"o\">.</span><span class=\"n\">MNIST_SAMPLE</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ImageDataBunch</span><span class=\"o\">.</span><span class=\"n\">from_folder</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"n\">learn</span> <span class=\"o\">=</span> <span class=\"n\">cnn_learner</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">resnet18</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"n\">accuracy</span><span class=\"p\">)</span>\n</pre>\n<p>Then we want to keep track of the number of epochs during training, and the learning rate we used. To do so we add <code>#property</code> to the cell we want to track.</p>\n<pre><span class=\"c1\">#property</span>\n<span class=\"n\">n_epoch</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"mf\">1e-2</span>\n</pre>\n<p>Finally we use <a href=\"/core#fast_experiment\" rel=\"nofollow\"><code>fast_experiment</code></a> to create our experiment. Note that you must pass it the name of the notebook you are using for your experiments, and the global variables you are currently using to record each variable in the properties cells.</p>\n<p>Here we will create an experiment, then record the validation accuracy.</p>\n<pre><span class=\"c1\">#code</span>\n<span class=\"n\">nb_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"index.ipynb\"</span>\n<span class=\"n\">globs</span> <span class=\"o\">=</span> <span class=\"nb\">globals</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">fast_experiment</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"p\">,</span><span class=\"n\">nb_name</span><span class=\"p\">,</span><span class=\"n\">globs</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exp</span><span class=\"p\">:</span>\n    <span class=\"n\">learn</span><span class=\"o\">.</span><span class=\"n\">fit_one_cycle</span><span class=\"p\">(</span><span class=\"n\">n_epoch</span><span class=\"p\">,</span><span class=\"n\">lr</span><span class=\"p\">)</span>\n    <span class=\"n\">pred</span><span class=\"p\">,</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">learn</span><span class=\"o\">.</span><span class=\"n\">get_preds</span><span class=\"p\">()</span>\n\n    <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">accuracy</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span>\n    <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">send_metric</span><span class=\"p\">(</span><span class=\"s2\">\"valid_accuracy\"</span><span class=\"p\">,</span><span class=\"n\">score</span><span class=\"p\">)</span>\n</pre>\n<pre><code>https://ui.neptune.ai/danywin/fast-neptune/e/FAS1-18\n</code></pre>\n<table>\n  <thead>\n    <tr>\n      <th>epoch</th>\n      <th>train_loss</th>\n      <th>valid_loss</th>\n      <th>accuracy</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0.052504</td>\n      <td>0.014153</td>\n      <td>0.994603</td>\n      <td>00:04</td>\n    </tr>\n  </tbody>\n</table>\n<p>Now if we go on the link provided by NeptuneML we can have a closer look at this experiment :</p>\n<p>Here we can see the parameters that were registered, including epoch, learning rate, OS, and Python version.</p>\n<p><img alt=\"Parameters\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8148d0ff7efe6201e4f4607646413c3358ed2378/696d6773253543706172616d65746572732e504e47\"></p>\n<p>In the source code tab, we can have a look at the bits of code we registered, here the dataloading.\n<img alt=\"Code\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59344eb89950a16f6dab75645e9a4e89d0992f21/696d6773253543636f64652e504e47\"></p>\n<p>In the artifacts we also have the modules used in this notebook with their version :</p>\n<p><img alt=\"Requirements\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53f0fdb89cbdf733f500d14eb4e2b0a6653b980c/696d6773253543726571756972656d656e74732e504e47\"></p>\n<p>Finally, we logged the validation accuracy, which can be found in the Logs tab :</p>\n<p><img alt=\"Parameters\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/881037f84e35064ddf6b69b07962a2e3fa02c2a5/696d677325354376616c69645f73636f72652e504e47\"></p>\n\n          </div>"}, "last_serial": 6532488, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "761443c2272f3f5e5974d02d02abfa30", "sha256": "2be88c0f82673a03aad90a657569d03b16b0f3cb2c98171fc7e61852d72d9ef2"}, "downloads": -1, "filename": "fast_neptune-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "761443c2272f3f5e5974d02d02abfa30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5340, "upload_time": "2020-01-24T07:46:24", "upload_time_iso_8601": "2020-01-24T07:46:24.210943Z", "url": "https://files.pythonhosted.org/packages/2f/7d/71ce6b9734c0f03db24d1a9557296917a71af201e2eb762a2f8a3fe8cb03/fast_neptune-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67918d14b26d029e0a5139de5fd3b154", "sha256": "67159a46e3d5bdc20de2b397d7c649eca5d8ff7fb3adbe36c27ff28a3fb46ad5"}, "downloads": -1, "filename": "fast_neptune-0.0.1.tar.gz", "has_sig": false, "md5_digest": "67918d14b26d029e0a5139de5fd3b154", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10518, "upload_time": "2020-01-24T07:46:26", "upload_time_iso_8601": "2020-01-24T07:46:26.541806Z", "url": "https://files.pythonhosted.org/packages/08/66/04f29eee2b6379ef72a7bef8b21f7211118d8ec2a3f44d8311d832496338/fast_neptune-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5e259edaadc54ebcea43a494bea3cc19", "sha256": "c7c9ece14fa543573af600492dfa069aeea9be164375055af943642099ddd0d8"}, "downloads": -1, "filename": "fast_neptune-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5e259edaadc54ebcea43a494bea3cc19", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5826, "upload_time": "2020-01-28T12:22:44", "upload_time_iso_8601": "2020-01-28T12:22:44.331687Z", "url": "https://files.pythonhosted.org/packages/d7/45/e3397c00bf6a6cf2f570b8959d1f3775ba2c21d558340d4ff24861a318a9/fast_neptune-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a00d790641622b642d7ff10b9f306c24", "sha256": "e0d17f738d349642bfe4cf364cdca35b037fc72e0c39c22d5dd2c5a57ee1b30d"}, "downloads": -1, "filename": "fast_neptune-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a00d790641622b642d7ff10b9f306c24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11274, "upload_time": "2020-01-28T12:22:45", "upload_time_iso_8601": "2020-01-28T12:22:45.910018Z", "url": "https://files.pythonhosted.org/packages/7c/a4/20a1cef03b33f18fff0f5eee02f938c89d47cf75c41f284f9feeaa9eb386/fast_neptune-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d0d223c83667a4e30b0f540a2daa3a02", "sha256": "54010a01992d70eb8be95c670663086d126152d86fda065da239424b5a0a3610"}, "downloads": -1, "filename": "fast_neptune-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d0d223c83667a4e30b0f540a2daa3a02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7807, "upload_time": "2020-01-28T14:30:36", "upload_time_iso_8601": "2020-01-28T14:30:36.469534Z", "url": "https://files.pythonhosted.org/packages/22/14/05b52a9d5dbed82b91ab8a6e89ca21007e5f8895baf4a36cd04a481444ff/fast_neptune-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ace3b3777767a406499392d02d877823", "sha256": "02689282079b598e2674b17e23516488dd0ea74d4b32ec8635186482112ca543"}, "downloads": -1, "filename": "fast_neptune-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ace3b3777767a406499392d02d877823", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13348, "upload_time": "2020-01-28T14:30:38", "upload_time_iso_8601": "2020-01-28T14:30:38.075109Z", "url": "https://files.pythonhosted.org/packages/c6/cf/b38c77f0c202afd6d180d4ee73a70ac018b71803dc9c81b919a1a86598e8/fast_neptune-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d0d223c83667a4e30b0f540a2daa3a02", "sha256": "54010a01992d70eb8be95c670663086d126152d86fda065da239424b5a0a3610"}, "downloads": -1, "filename": "fast_neptune-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d0d223c83667a4e30b0f540a2daa3a02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7807, "upload_time": "2020-01-28T14:30:36", "upload_time_iso_8601": "2020-01-28T14:30:36.469534Z", "url": "https://files.pythonhosted.org/packages/22/14/05b52a9d5dbed82b91ab8a6e89ca21007e5f8895baf4a36cd04a481444ff/fast_neptune-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ace3b3777767a406499392d02d877823", "sha256": "02689282079b598e2674b17e23516488dd0ea74d4b32ec8635186482112ca543"}, "downloads": -1, "filename": "fast_neptune-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ace3b3777767a406499392d02d877823", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13348, "upload_time": "2020-01-28T14:30:38", "upload_time_iso_8601": "2020-01-28T14:30:38.075109Z", "url": "https://files.pythonhosted.org/packages/c6/cf/b38c77f0c202afd6d180d4ee73a70ac018b71803dc9c81b919a1a86598e8/fast_neptune-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:29 2020"}