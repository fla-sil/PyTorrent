{"info": {"author": "The ComPWA team", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "[![PyPI](https://badge.fury.io/py/expertsystem.svg)](https://pypi.org/project/expertsystem)\n[![Travis CI](https://travis-ci.com/ComPWA/expertsystem.svg?branch=master)](https://travis-ci.com/ComPWA/expertsystem)\n[![Test coverage](https://codecov.io/gh/ComPWA/expertsystem/branch/master/graph/badge.svg)](https://codecov.io/gh/ComPWA/expertsystem)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/db355758fb0e4654818b85997f03e3b8)](https://www.codacy.com/gh/ComPWA/expertsystem)\n[![Documentation build status](https://readthedocs.org/projects/expertsystem/badge/?version=latest)](https://pwa.readthedocs.io/projects/expertsystem/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# PWA Expert System\n\nThe goal is to build state transition graphs, going from an initial state to a\nfinal state\n\nA state transition graph consists of nodes and edges/lines (in correspondence\nto Feynman graphs):\n\n- The connection lines we call particle lines, which are basically a list of\n  quantum numbers (QN) that define the particle state (That list can be empty\n  at first).\n- The nodes are of type InteractionNode, that contain all information for the\n  transition of this specific step. An interaction node has M ingoing lines and\n  N outgoing lines (M, N = Integer & M > 0, N > 0) .\n\n## Concept of building graphs\n\n### Step 1\nBuilding of all possible topologies. A topology is a graph, in which the edges\nand nodes are empty (no QN information). See the topology sub-modules.\n\n### Step 2\nFilling the toplogy graphs with QN information. This means initializing the\ntopology graphs with the initial and final state quantum numbers and\npropagating these through the complete graph. Here also the combinatorics of\nthe initial and final state should be taken into account.\n\n### Step 3\nDuplicate the graphs and insert concrete particles for the edges (inserting the\nmass variable).\n\n### Step 4\nOutput to XML model file.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ComPWA/expertsystem", "keywords": "", "license": "GPLv3 or later", "maintainer": "", "maintainer_email": "compwa-admin@ep1.rub.de", "name": "expertsystem", "package_url": "https://pypi.org/project/expertsystem/", "platform": "", "project_url": "https://pypi.org/project/expertsystem/", "project_urls": {"Homepage": "https://github.com/ComPWA/expertsystem"}, "release_url": "https://pypi.org/project/expertsystem/0.0a1/", "requires_dist": null, "requires_python": ">=3.3", "summary": "", "version": "0.0a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/expertsystem\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f8a8e327f016699c9b79fb91fb1615731f43107d/68747470733a2f2f62616467652e667572792e696f2f70792f65787065727473797374656d2e737667\"></a>\n<a href=\"https://travis-ci.com/ComPWA/expertsystem\" rel=\"nofollow\"><img alt=\"Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d57a8ca2746ebaade5a23d1558cde3b9983f76b/68747470733a2f2f7472617669732d63692e636f6d2f436f6d5057412f65787065727473797374656d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/ComPWA/expertsystem\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e60b505295ec74f3d8f8b931ab9a14404261a70/68747470733a2f2f636f6465636f762e696f2f67682f436f6d5057412f65787065727473797374656d2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://www.codacy.com/gh/ComPWA/expertsystem\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e43f3edc1afe0899826892083d2fa6279697653/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6462333535373538666230653436353438313862383539393766303365336238\"></a>\n<a href=\"https://pwa.readthedocs.io/projects/expertsystem/\" rel=\"nofollow\"><img alt=\"Documentation build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3672a021cb5136de475723a4fc2bf02e844d92ff/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f65787065727473797374656d2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<h1>PWA Expert System</h1>\n<p>The goal is to build state transition graphs, going from an initial state to a\nfinal state</p>\n<p>A state transition graph consists of nodes and edges/lines (in correspondence\nto Feynman graphs):</p>\n<ul>\n<li>The connection lines we call particle lines, which are basically a list of\nquantum numbers (QN) that define the particle state (That list can be empty\nat first).</li>\n<li>The nodes are of type InteractionNode, that contain all information for the\ntransition of this specific step. An interaction node has M ingoing lines and\nN outgoing lines (M, N = Integer &amp; M &gt; 0, N &gt; 0) .</li>\n</ul>\n<h2>Concept of building graphs</h2>\n<h3>Step 1</h3>\n<p>Building of all possible topologies. A topology is a graph, in which the edges\nand nodes are empty (no QN information). See the topology sub-modules.</p>\n<h3>Step 2</h3>\n<p>Filling the toplogy graphs with QN information. This means initializing the\ntopology graphs with the initial and final state quantum numbers and\npropagating these through the complete graph. Here also the combinatorics of\nthe initial and final state should be taken into account.</p>\n<h3>Step 3</h3>\n<p>Duplicate the graphs and insert concrete particles for the edges (inserting the\nmass variable).</p>\n<h3>Step 4</h3>\n<p>Output to XML model file.</p>\n\n          </div>"}, "last_serial": 7162479, "releases": {"0.0a1": [{"comment_text": "", "digests": {"md5": "bbe5c258fcbf0aecf0a45ea5ed1c77a7", "sha256": "05647ecd12ba496d4ec9e70d8a0ce0fc923bc0011542967fcb473c9bcbdf5ba2"}, "downloads": -1, "filename": "expertsystem-0.0a1.tar.gz", "has_sig": false, "md5_digest": "bbe5c258fcbf0aecf0a45ea5ed1c77a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 48784, "upload_time": "2020-05-04T09:28:09", "upload_time_iso_8601": "2020-05-04T09:28:09.386700Z", "url": "https://files.pythonhosted.org/packages/4e/3c/621a6e0ad19d3707b371c9bd8e561b97be69225d97ce99f8dfaa79e0d21f/expertsystem-0.0a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bbe5c258fcbf0aecf0a45ea5ed1c77a7", "sha256": "05647ecd12ba496d4ec9e70d8a0ce0fc923bc0011542967fcb473c9bcbdf5ba2"}, "downloads": -1, "filename": "expertsystem-0.0a1.tar.gz", "has_sig": false, "md5_digest": "bbe5c258fcbf0aecf0a45ea5ed1c77a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 48784, "upload_time": "2020-05-04T09:28:09", "upload_time_iso_8601": "2020-05-04T09:28:09.386700Z", "url": "https://files.pythonhosted.org/packages/4e/3c/621a6e0ad19d3707b371c9bd8e561b97be69225d97ce99f8dfaa79e0d21f/expertsystem-0.0a1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:39 2020"}