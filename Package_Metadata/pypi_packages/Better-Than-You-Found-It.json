{"info": {"author": "Andy Hayden", "author_email": "andyhayden1@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Version Control"], "description": "pep8radius\r\n----------\r\n\r\n`PEP8 <http://legacy.python.org/dev/peps/pep-0008/>`__ clean only the\r\nparts of the files touched since the last commit, a previous commit or\r\n(the merge-base of) a branch.\r\n\r\n|Current PyPi Version| |MIT licensed| |Travis CI Status| |Coverage\r\nStatus| |PyPi Monthly Downloads|\r\n\r\nFixing the entire project of PEP8 infractions (\"PEP8 storms\") can lead\r\nto merge conflicts, add noise to merges / pull requests and break (git)\r\nblame. pep8radius solves this problem by fixing only those PEP8\r\ninfractions incontained on the lines of the project which you've been\r\nworking, leaving these sections \"better than you found it\" whilst\r\nkeeping your commits focused on the areas of the codebase you were\r\nactually working on.\r\n\r\nInstallation\r\n------------\r\n\r\nFrom pip:\r\n\r\n.. code:: sh\r\n\r\n    $ pip install pep8radius\r\n\r\nUsage\r\n-----\r\n\r\n.. figure:: https://cloud.githubusercontent.com/assets/1931852/4259885/18a7e75e-3b1a-11e4-9413-d92f9b170b70.gif\r\n   :alt: Usage gif of pep8radius\r\n   :width: 650px\r\n\r\n   Usage gif of pep8radius\r\n\r\n-  Move to project directory\r\n-  Make some changes to the project\r\n-  Run ``pep8radius --diff       # view a diff of proposed fixed``\r\n-  Run ``pep8radius --in-place   # apply the fixes``\r\n-  Commit your changes\r\n\r\nAgainst a branch you can use the same syntax as with git diff:\r\n\r\n.. code:: sh\r\n\r\n    $ pep8radius master   # branch name to compare against (compares against merge-base)\r\n    $ pep8radius c12166f  # commit hash\r\n\r\n    $ pep8radius master --in-place  # these work with other options too\r\n\r\nYou can also fix docstrings\r\n(`PEP257 <http://legacy.python.org/dev/peps/pep-0257/>`__) using the\r\n`docformatter <https://pypi.python.org/pypi/docformatter>`__ option:\r\n\r\n.. code:: sh\r\n\r\n    $ pep8radius --docformatter --diff\r\n\r\n*Note: can also use ``btyfi`` alias for ``pep8radius``.*\r\n\r\n--------------\r\n\r\nIt can be nice to pipe the diff to\r\n`cdiff <https://pypi.python.org/pypi/cdiff>`__ (which makes diffs pretty\r\nand has lots of options):\r\n\r\n.. code:: sh\r\n\r\n    $ pep8radius --diff --no-color | cdiff\r\n    $ pep8radius --diff --no-color | cdiff --side-by-side\r\n\r\nYou can get strange results if you don't use no-color.\r\nI actually use the following git alias (which allows ``git rad`` and\r\n``git rad -i``):\r\n\r\n.. code:: sh\r\n\r\n    [alias]\r\n        rad = !pep8radius master --diff --no-color $@ | cdiff --side-by-side\r\n\r\nwhich outputs the corrections as follows:\r\n\r\n.. figure:: https://cloud.githubusercontent.com/assets/1931852/4259933/f0589480-3b1c-11e4-89cf-565c28da700a.png\r\n   :alt: git rad\r\n   :width: 650px\r\n\r\n   git rad\r\n\r\n--------------\r\n\r\nYou can pipe in a diff directly, to fix the lines modified in it with\r\n``--from-diff`` (this is somewhat experimental, please report failing\r\ndiffs!).\r\nFor example:\r\n\r\n.. code:: sh\r\n\r\n    $ git diff master | pep8radius --diff --from-diff=-\r\n\r\nRequirements\r\n------------\r\n\r\npep8radius uses `autopep8 <https://pypi.python.org/pypi/autopep8>`__,\r\nand in turn `pep8 <https://pypi.python.org/pypi/pep8>`__. The\r\ndocformatter option, to fix docstrings, uses\r\n`docformatter <https://pypi.python.org/pypi/docformatter>`__.\r\n\r\nVCS Support\r\n-----------\r\n\r\n`Git <http://git-scm.com/>`__, `Mecurial\r\n(hg) <http://mercurial.selenic.com/>`__, (tentatively)\r\n`Bazaar <http://bazaar.canonical.com/en/>`__. Please request support for\r\nother version control systems on\r\n`github <https://github.com/hayd/pep8radius/issues/5>`__.\r\n\r\nOptions\r\n-------\r\n\r\n.. code:: sh\r\n\r\n    $ pep8radius --help\r\n\r\n    usage: pep8radius [-h] [--version] [-d] [-i] [--no-color] [-v]\r\n                      [--from-diff DIFF] [-p n] [-a] [--experimental]\r\n                      [--exclude globs] [--list-fixes] [--ignore errors]\r\n                      [--select errors] [--max-line-length n] [--indent-size n]\r\n                      [-f] [--no-blank] [--pre-summary-newline] [--force-wrap]\r\n                      [--global-config GLOBAL_CONFIG] [--ignore-local-config]\r\n                      [rev]\r\n\r\n    PEP8 clean only the parts of the files which you have touched since the last\r\n    commit, a previous commit or (the merge-base of) a branch.\r\n\r\n    positional arguments:\r\n      rev                   commit or name of branch to compare against\r\n\r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      --version             print version number and exit\r\n      -d, --diff            print the diff of fixed source vs original\r\n      -i, --in-place        make the fixes in place; modify the files\r\n      --no-color            do not print diffs in color (default is to use color)\r\n      -v, --verbose         print verbose messages; multiple -v result in more\r\n                            verbose messages (one less -v is passed to autopep8)\r\n      --from-diff DIFF      Experimental: rather than calling out to version\r\n                            control, just pass in a diff; the modified lines will\r\n                            be fixed\r\n\r\n    pep8:\r\n      Pep8 options to pass to autopep8.\r\n\r\n      -p n, --pep8-passes n\r\n                            maximum number of additional pep8 passes (default:\r\n                            infinite)\r\n      -a, --aggressive      enable non-whitespace changes; multiple -a result in\r\n                            more aggressive changes\r\n      --experimental        enable experimental fixes\r\n      --exclude globs       exclude file/directory names that match these comma-\r\n                            separated globs\r\n      --list-fixes          list codes for fixes and exit; used by --ignore and\r\n                            --select\r\n      --ignore errors       do not fix these errors/warnings (default: E24)\r\n      --select errors       fix only these errors/warnings (e.g. E4,W)\r\n      --max-line-length n   set maximum allowed line length (default: 79)\r\n      --indent-size n       number of spaces per indent level (default 4)\r\n\r\n    docformatter:\r\n      Fix docstrings for PEP257.\r\n\r\n      -f, --docformatter    Use docformatter\r\n      --no-blank            Do not add blank line after description\r\n      --pre-summary-newline\r\n                            add a newline before the summary of a multi-line\r\n                            docstring\r\n      --force-wrap          force descriptions to be wrapped even if it may result\r\n                            in a mess\r\n\r\n    config:\r\n      Change default options based on global or local (project) config files.\r\n\r\n      --global-config filename\r\n                            path to global pep8 config file; if this file does not\r\n                            exist then this is ignored (default: ~/.config/pep8)\r\n      --ignore-local-config\r\n                            don't look for and apply local config files; if not\r\n                            passed, defaults are updated with any config files in\r\n                            the project's root dir\r\n\r\n    Run before you commit, against a previous commit or branch before merging.\r\n\r\n*For more information about these options see\r\n`autopep8 <https://pypi.python.org/pypi/autopep8>`__.*\r\n\r\nAs a module\r\n-----------\r\n\r\nPep8radius also exports lightweight wrappers around autopep8 so that you\r\ncan fix line ranges of your code with ``fix_code`` or ``fix_file``.\r\n\r\nHere's the example \"bad code\" from `autopep8's\r\nREADME <https://github.com/hhatto/autopep8/blob/master/README.rst#usage>`__:\r\n\r\n.. code:: py\r\n\r\n    import math, sys;\r\n\r\n    def example1():\r\n        ####This is a long comment. This should be wrapped to fit within 72 characters.\r\n        some_tuple=(   1,2, 3,'a'  );\r\n        some_variable={'long':'Long code lines should be wrapped within 79 characters.',\r\n        'other':[math.pi, 100,200,300,9876543210,'This is a long string that goes on'],\r\n        'more':{'inner':'This whole logical line should be wrapped.',some_tuple:[1,\r\n        20,300,40000,500000000,60000000000000000]}}\r\n        return (some_tuple, some_variable)\r\n    def example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\r\n    class Example3(   object ):\r\n        def __init__    ( self, bar ):\r\n         #Comments should have a space after the hash.\r\n         if bar : bar+=1;  bar=bar* bar   ; return bar\r\n         else:\r\n                        some_string = \"\"\"\r\n                   Indentation in multiline strings should not be touched.\r\n    Only actual code should be reindented.\r\n    \"\"\"\r\n                        return (sys.path, some_string)\r\n\r\nYou can pep8 fix just the line ranges 1-1 (the imports) and 12-21 (the\r\n``Example3``\\ class) with\r\n``pep8radius.fix_code(code, [(1, 1), (12, 21)])`` (where code is a\r\nstring of the above), which returns the code fixed within those ranges:\r\n\r\n.. code:: py\r\n\r\n    import math\r\n    import sys\r\n\r\n    def example1():\r\n        ####This is a long comment. This should be wrapped to fit within 72 characters.\r\n        some_tuple=(   1,2, 3,'a'  );\r\n        some_variable={'long':'Long code lines should be wrapped within 79 characters.',\r\n        'other':[math.pi, 100,200,300,9876543210,'This is a long string that goes on'],\r\n        'more':{'inner':'This whole logical line should be wrapped.',some_tuple:[1,\r\n        20,300,40000,500000000,60000000000000000]}}\r\n        return (some_tuple, some_variable)\r\n    def example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\r\n\r\n\r\n    class Example3(object):\r\n\r\n        def __init__(self, bar):\r\n            # Comments should have a space after the hash.\r\n            if bar:\r\n                bar += 1\r\n                bar = bar * bar\r\n                return bar\r\n            else:\r\n                some_string = \"\"\"\r\n                           Indentation in multiline strings should not be touched.\r\n    Only actual code should be reindented.\r\n    \"\"\"\r\n                return (sys.path, some_string)\r\n\r\nYou can use ``fix_file`` to do this directly on a file, which gives you\r\nthe option of doing this in place.\r\n\r\n.. code:: py\r\n\r\n    pep8radius.fix_code('code.py', [(1, 1), (12, 21)], in_place=True)\r\n\r\nYou can also pass the same arguments to pep8radius script itself using\r\nthe ``parse_args``. For example ignoring long lines (E501) and use the\r\noptions from your global config files:\r\n\r\n.. code:: py\r\n\r\n    args = pep8radius.parse_args(['--ignore=E501', '--ignore-local-config'],\r\n                                 apply_config=True)\r\n    pep8radius.fix_code(code, [(1, 1), (12, 21)], options=args)\r\n\r\n.. |Current PyPi Version| image:: http://img.shields.io/pypi/v/pep8radius.png\r\n   :target: https://pypi.python.org/pypi/pep8radius\r\n.. |MIT licensed| image:: http://img.shields.io/badge/license-MIT-brightgreen.png\r\n   :target: http://choosealicense.com/licenses/mit/\r\n.. |Travis CI Status| image:: http://img.shields.io/travis/hayd/pep8radius.png\r\n   :target: https://travis-ci.org/hayd/pep8radius/builds\r\n.. |Coverage Status| image:: http://img.shields.io/coveralls/hayd/pep8radius.png\r\n   :target: https://coveralls.io/r/hayd/pep8radius\r\n.. |PyPi Monthly Downloads| image:: http://img.shields.io/pypi/dm/pep8radius.png\r\n   :target: https://pypi.python.org/pypi/pep8radius", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hayd/pep8radius", "keywords": "automation,pep8,format,autopep8,git,hg,mercurial,bzr", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "Better-Than-You-Found-It", "package_url": "https://pypi.org/project/Better-Than-You-Found-It/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Better-Than-You-Found-It/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/hayd/pep8radius"}, "release_url": "https://pypi.org/project/Better-Than-You-Found-It/0.9.1/", "requires_dist": null, "requires_python": null, "summary": "PEP8 clean only the parts of the files which you have touched since the last commit, a previous commit or (the merge-base of) a branch.", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pep8radius\">\n<h2>pep8radius</h2>\n<p><a href=\"http://legacy.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP8</a> clean only the\nparts of the files touched since the last commit, a previous commit or\n(the merge-base of) a branch.</p>\n<p><a href=\"https://pypi.python.org/pypi/pep8radius\" rel=\"nofollow\"><img alt=\"Current PyPi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d3d70835f4def7e364d6ff2aef3305cb678e13c/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f706570387261646975732e706e67\"></a> <a href=\"http://choosealicense.com/licenses/mit/\" rel=\"nofollow\"><img alt=\"MIT licensed\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3d820ad1e7dd8d7a887c12d653e5d1770b31b50/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e706e67\"></a> <a href=\"https://travis-ci.org/hayd/pep8radius/builds\" rel=\"nofollow\"><img alt=\"Travis CI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ce851f976966473de81b4a2b4f1cf7901ac530d/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f686179642f706570387261646975732e706e67\"></a> <a href=\"https://coveralls.io/r/hayd/pep8radius\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18d3702afcdda6119d0846eac7ca6a47cb0a8919/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f686179642f706570387261646975732e706e67\"></a> <a href=\"https://pypi.python.org/pypi/pep8radius\" rel=\"nofollow\"><img alt=\"PyPi Monthly Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5b3e2d1d635d6c0c1ee65b26741e67ee5cf551a/687474703a2f2f696d672e736869656c64732e696f2f707970692f646d2f706570387261646975732e706e67\"></a></p>\n<p>Fixing the entire project of PEP8 infractions (\u201cPEP8 storms\u201d) can lead\nto merge conflicts, add noise to merges / pull requests and break (git)\nblame. pep8radius solves this problem by fixing only those PEP8\ninfractions incontained on the lines of the project which you\u2019ve been\nworking, leaving these sections \u201cbetter than you found it\u201d whilst\nkeeping your commits focused on the areas of the codebase you were\nactually working on.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From pip:</p>\n<pre>$ pip install pep8radius\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div>\n<img alt=\"Usage gif of pep8radius\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee611f69d668eb4a4e196001c6f1ed89a1450ec7/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f313933313835322f343235393838352f31386137653735652d336231612d313165342d393431332d6439326639623137306237302e676966\" width=\"650px\">\n<p>Usage gif of pep8radius</p>\n</div>\n<ul>\n<li>Move to project directory</li>\n<li>Make some changes to the project</li>\n<li>Run <tt>pep8radius <span class=\"pre\">--diff</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # view a diff of proposed fixed</tt></li>\n<li>Run <tt>pep8radius <span class=\"pre\">--in-place</span>\u00a0\u00a0 # apply the fixes</tt></li>\n<li>Commit your changes</li>\n</ul>\n<p>Against a branch you can use the same syntax as with git diff:</p>\n<pre>$ pep8radius master   <span class=\"c1\"># branch name to compare against (compares against merge-base)\n</span>$ pep8radius c12166f  <span class=\"c1\"># commit hash\n</span>\n$ pep8radius master --in-place  <span class=\"c1\"># these work with other options too</span>\n</pre>\n<p>You can also fix docstrings\n(<a href=\"http://legacy.python.org/dev/peps/pep-0257/\" rel=\"nofollow\">PEP257</a>) using the\n<a href=\"https://pypi.python.org/pypi/docformatter\" rel=\"nofollow\">docformatter</a> option:</p>\n<pre>$ pep8radius --docformatter --diff\n</pre>\n<p><em>Note: can also use ``btyfi`` alias for ``pep8radius``.</em></p>\n<hr class=\"docutils\">\n<p>It can be nice to pipe the diff to\n<a href=\"https://pypi.python.org/pypi/cdiff\" rel=\"nofollow\">cdiff</a> (which makes diffs pretty\nand has lots of options):</p>\n<pre>$ pep8radius --diff --no-color <span class=\"p\">|</span> cdiff\n$ pep8radius --diff --no-color <span class=\"p\">|</span> cdiff --side-by-side\n</pre>\n<p>You can get strange results if you don\u2019t use no-color.\nI actually use the following git alias (which allows <tt>git rad</tt> and\n<tt>git rad <span class=\"pre\">-i</span></tt>):</p>\n<pre><span class=\"o\">[</span>alias<span class=\"o\">]</span>\n    <span class=\"nv\">rad</span> <span class=\"o\">=</span> !pep8radius master --diff --no-color <span class=\"nv\">$@</span> <span class=\"p\">|</span> cdiff --side-by-side\n</pre>\n<p>which outputs the corrections as follows:</p>\n<div>\n<img alt=\"git rad\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0fee4121f16766063e7b81ad715567131f121056/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f313933313835322f343235393933332f66303538393438302d336231632d313165342d383963662d3536356332386461373030612e706e67\" width=\"650px\">\n<p>git rad</p>\n</div>\n<hr class=\"docutils\">\n<p>You can pipe in a diff directly, to fix the lines modified in it with\n<tt><span class=\"pre\">--from-diff</span></tt> (this is somewhat experimental, please report failing\ndiffs!).\nFor example:</p>\n<pre>$ git diff master <span class=\"p\">|</span> pep8radius --diff --from-diff<span class=\"o\">=</span>-\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>pep8radius uses <a href=\"https://pypi.python.org/pypi/autopep8\" rel=\"nofollow\">autopep8</a>,\nand in turn <a href=\"https://pypi.python.org/pypi/pep8\" rel=\"nofollow\">pep8</a>. The\ndocformatter option, to fix docstrings, uses\n<a href=\"https://pypi.python.org/pypi/docformatter\" rel=\"nofollow\">docformatter</a>.</p>\n</div>\n<div id=\"vcs-support\">\n<h2>VCS Support</h2>\n<p><a href=\"http://git-scm.com/\" rel=\"nofollow\">Git</a>, <a href=\"http://mercurial.selenic.com/\" rel=\"nofollow\">Mecurial\n(hg)</a>, (tentatively)\n<a href=\"http://bazaar.canonical.com/en/\" rel=\"nofollow\">Bazaar</a>. Please request support for\nother version control systems on\n<a href=\"https://github.com/hayd/pep8radius/issues/5\" rel=\"nofollow\">github</a>.</p>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<pre>$ pep8radius --help\n\nusage: pep8radius <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--version<span class=\"o\">]</span> <span class=\"o\">[</span>-d<span class=\"o\">]</span> <span class=\"o\">[</span>-i<span class=\"o\">]</span> <span class=\"o\">[</span>--no-color<span class=\"o\">]</span> <span class=\"o\">[</span>-v<span class=\"o\">]</span>\n                  <span class=\"o\">[</span>--from-diff DIFF<span class=\"o\">]</span> <span class=\"o\">[</span>-p n<span class=\"o\">]</span> <span class=\"o\">[</span>-a<span class=\"o\">]</span> <span class=\"o\">[</span>--experimental<span class=\"o\">]</span>\n                  <span class=\"o\">[</span>--exclude globs<span class=\"o\">]</span> <span class=\"o\">[</span>--list-fixes<span class=\"o\">]</span> <span class=\"o\">[</span>--ignore errors<span class=\"o\">]</span>\n                  <span class=\"o\">[</span>--select errors<span class=\"o\">]</span> <span class=\"o\">[</span>--max-line-length n<span class=\"o\">]</span> <span class=\"o\">[</span>--indent-size n<span class=\"o\">]</span>\n                  <span class=\"o\">[</span>-f<span class=\"o\">]</span> <span class=\"o\">[</span>--no-blank<span class=\"o\">]</span> <span class=\"o\">[</span>--pre-summary-newline<span class=\"o\">]</span> <span class=\"o\">[</span>--force-wrap<span class=\"o\">]</span>\n                  <span class=\"o\">[</span>--global-config GLOBAL_CONFIG<span class=\"o\">]</span> <span class=\"o\">[</span>--ignore-local-config<span class=\"o\">]</span>\n                  <span class=\"o\">[</span>rev<span class=\"o\">]</span>\n\nPEP8 clean only the parts of the files which you have touched since the last\ncommit, a previous commit or <span class=\"o\">(</span>the merge-base of<span class=\"o\">)</span> a branch.\n\npositional arguments:\n  rev                   commit or name of branch to compare against\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --version             print version number and <span class=\"nb\">exit</span>\n  -d, --diff            print the diff of fixed <span class=\"nb\">source</span> vs original\n  -i, --in-place        make the fixes in place<span class=\"p\">;</span> modify the files\n  --no-color            <span class=\"k\">do</span> not print diffs in color <span class=\"o\">(</span>default is to use color<span class=\"o\">)</span>\n  -v, --verbose         print verbose messages<span class=\"p\">;</span> multiple -v result in more\n                        verbose messages <span class=\"o\">(</span>one less -v is passed to autopep8<span class=\"o\">)</span>\n  --from-diff DIFF      Experimental: rather than calling out to version\n                        control, just pass in a diff<span class=\"p\">;</span> the modified lines will\n                        be fixed\n\npep8:\n  Pep8 options to pass to autopep8.\n\n  -p n, --pep8-passes n\n                        maximum number of additional pep8 passes <span class=\"o\">(</span>default:\n                        infinite<span class=\"o\">)</span>\n  -a, --aggressive      <span class=\"nb\">enable</span> non-whitespace changes<span class=\"p\">;</span> multiple -a result in\n                        more aggressive changes\n  --experimental        <span class=\"nb\">enable</span> experimental fixes\n  --exclude globs       exclude file/directory names that match these comma-\n                        separated globs\n  --list-fixes          list codes <span class=\"k\">for</span> fixes and exit<span class=\"p\">;</span> used by --ignore and\n                        --select\n  --ignore errors       <span class=\"k\">do</span> not fix these errors/warnings <span class=\"o\">(</span>default: E24<span class=\"o\">)</span>\n  --select errors       fix only these errors/warnings <span class=\"o\">(</span>e.g. E4,W<span class=\"o\">)</span>\n  --max-line-length n   <span class=\"nb\">set</span> maximum allowed line length <span class=\"o\">(</span>default: <span class=\"m\">79</span><span class=\"o\">)</span>\n  --indent-size n       number of spaces per indent level <span class=\"o\">(</span>default <span class=\"m\">4</span><span class=\"o\">)</span>\n\ndocformatter:\n  Fix docstrings <span class=\"k\">for</span> PEP257.\n\n  -f, --docformatter    Use docformatter\n  --no-blank            Do not add blank line after description\n  --pre-summary-newline\n                        add a newline before the summary of a multi-line\n                        docstring\n  --force-wrap          force descriptions to be wrapped even <span class=\"k\">if</span> it may result\n                        in a mess\n\nconfig:\n  Change default options based on global or <span class=\"nb\">local</span> <span class=\"o\">(</span>project<span class=\"o\">)</span> config files.\n\n  --global-config filename\n                        path to global pep8 config file<span class=\"p\">;</span> <span class=\"k\">if</span> this file does not\n                        exist <span class=\"k\">then</span> this is ignored <span class=\"o\">(</span>default: ~/.config/pep8<span class=\"o\">)</span>\n  --ignore-local-config\n                        don<span class=\"s1\">'t look for and apply local config files; if not\n                        passed, defaults are updated with any config files in\n                        the project'</span>s root dir\n\nRun before you commit, against a previous commit or branch before merging.\n</pre>\n<p><em>For more information about these options see\n`autopep8 &lt;https://pypi.python.org/pypi/autopep8&gt;`__.</em></p>\n</div>\n<div id=\"as-a-module\">\n<h2>As a module</h2>\n<p>Pep8radius also exports lightweight wrappers around autopep8 so that you\ncan fix line ranges of your code with <tt>fix_code</tt> or <tt>fix_file</tt>.</p>\n<p>Here\u2019s the example \u201cbad code\u201d from <a href=\"https://github.com/hhatto/autopep8/blob/master/README.rst#usage\" rel=\"nofollow\">autopep8\u2019s\nREADME</a>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">math</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"p\">;</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example1</span><span class=\"p\">():</span>\n    <span class=\"c1\">####This is a long comment. This should be wrapped to fit within 72 characters.</span>\n    <span class=\"n\">some_tuple</span><span class=\"o\">=</span><span class=\"p\">(</span>   <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"s1\">'a'</span>  <span class=\"p\">);</span>\n    <span class=\"n\">some_variable</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'long'</span><span class=\"p\">:</span><span class=\"s1\">'Long code lines should be wrapped within 79 characters.'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'other'</span><span class=\"p\">:[</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"mi\">300</span><span class=\"p\">,</span><span class=\"mi\">9876543210</span><span class=\"p\">,</span><span class=\"s1\">'This is a long string that goes on'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'more'</span><span class=\"p\">:{</span><span class=\"s1\">'inner'</span><span class=\"p\">:</span><span class=\"s1\">'This whole logical line should be wrapped.'</span><span class=\"p\">,</span><span class=\"n\">some_tuple</span><span class=\"p\">:[</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">300</span><span class=\"p\">,</span><span class=\"mi\">40000</span><span class=\"p\">,</span><span class=\"mi\">500000000</span><span class=\"p\">,</span><span class=\"mi\">60000000000000000</span><span class=\"p\">]}}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">some_tuple</span><span class=\"p\">,</span> <span class=\"n\">some_variable</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example2</span><span class=\"p\">():</span> <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'has_key() is deprecated'</span><span class=\"p\">:</span><span class=\"kc\">True</span><span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">has_key</span><span class=\"p\">({</span><span class=\"s1\">'f'</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">has_key</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">));</span>\n<span class=\"k\">class</span> <span class=\"nc\">Example3</span><span class=\"p\">(</span>   <span class=\"nb\">object</span> <span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span>    <span class=\"p\">(</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bar</span> <span class=\"p\">):</span>\n     <span class=\"c1\">#Comments should have a space after the hash.</span>\n     <span class=\"k\">if</span> <span class=\"n\">bar</span> <span class=\"p\">:</span> <span class=\"n\">bar</span><span class=\"o\">+=</span><span class=\"mi\">1</span><span class=\"p\">;</span>  <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"n\">bar</span><span class=\"o\">*</span> <span class=\"n\">bar</span>   <span class=\"p\">;</span> <span class=\"k\">return</span> <span class=\"n\">bar</span>\n     <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">some_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n               Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"</span>\n                    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">some_string</span><span class=\"p\">)</span>\n</pre>\n<p>You can pep8 fix just the line ranges 1-1 (the imports) and 12-21 (the\n<tt>Example3</tt>class) with\n<tt>pep8radius.fix_code(code, [(1, 1), (12, <span class=\"pre\">21)])</span></tt> (where code is a\nstring of the above), which returns the code fixed within those ranges:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example1</span><span class=\"p\">():</span>\n    <span class=\"c1\">####This is a long comment. This should be wrapped to fit within 72 characters.</span>\n    <span class=\"n\">some_tuple</span><span class=\"o\">=</span><span class=\"p\">(</span>   <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"s1\">'a'</span>  <span class=\"p\">);</span>\n    <span class=\"n\">some_variable</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'long'</span><span class=\"p\">:</span><span class=\"s1\">'Long code lines should be wrapped within 79 characters.'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'other'</span><span class=\"p\">:[</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"mi\">300</span><span class=\"p\">,</span><span class=\"mi\">9876543210</span><span class=\"p\">,</span><span class=\"s1\">'This is a long string that goes on'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'more'</span><span class=\"p\">:{</span><span class=\"s1\">'inner'</span><span class=\"p\">:</span><span class=\"s1\">'This whole logical line should be wrapped.'</span><span class=\"p\">,</span><span class=\"n\">some_tuple</span><span class=\"p\">:[</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">300</span><span class=\"p\">,</span><span class=\"mi\">40000</span><span class=\"p\">,</span><span class=\"mi\">500000000</span><span class=\"p\">,</span><span class=\"mi\">60000000000000000</span><span class=\"p\">]}}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">some_tuple</span><span class=\"p\">,</span> <span class=\"n\">some_variable</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example2</span><span class=\"p\">():</span> <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'has_key() is deprecated'</span><span class=\"p\">:</span><span class=\"kc\">True</span><span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">has_key</span><span class=\"p\">({</span><span class=\"s1\">'f'</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">has_key</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">));</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Example3</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Comments should have a space after the hash.</span>\n        <span class=\"k\">if</span> <span class=\"n\">bar</span><span class=\"p\">:</span>\n            <span class=\"n\">bar</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">bar</span> <span class=\"o\">*</span> <span class=\"n\">bar</span>\n            <span class=\"k\">return</span> <span class=\"n\">bar</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">some_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">some_string</span><span class=\"p\">)</span>\n</pre>\n<p>You can use <tt>fix_file</tt> to do this directly on a file, which gives you\nthe option of doing this in place.</p>\n<pre><span class=\"n\">pep8radius</span><span class=\"o\">.</span><span class=\"n\">fix_code</span><span class=\"p\">(</span><span class=\"s1\">'code.py'</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)],</span> <span class=\"n\">in_place</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>You can also pass the same arguments to pep8radius script itself using\nthe <tt>parse_args</tt>. For example ignoring long lines (E501) and use the\noptions from your global config files:</p>\n<pre><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">pep8radius</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--ignore=E501'</span><span class=\"p\">,</span> <span class=\"s1\">'--ignore-local-config'</span><span class=\"p\">],</span>\n                             <span class=\"n\">apply_config</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">pep8radius</span><span class=\"o\">.</span><span class=\"n\">fix_code</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)],</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1249037, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "e667961bf70baeeae61d00ee2560b4f2", "sha256": "9454ad99a6c70be768fcada044224c38d13c05692121e32f1f0a76403da6112f"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.3.tar.gz", "has_sig": false, "md5_digest": "e667961bf70baeeae61d00ee2560b4f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3802, "upload_time": "2014-03-26T06:05:06", "upload_time_iso_8601": "2014-03-26T06:05:06.437977Z", "url": "https://files.pythonhosted.org/packages/ca/2b/09e7605328c2f1cf0a5378c64b48b125b6a339cdc673ba182fab3ddfcdf4/Better-Than-You-Found-It-0.3.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "3f937ed354782ba8ed3664e6f02307f9", "sha256": "409308bf1db482ad99fcbae29ac792444425207d88c1e80548d6992ae827c1fe"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.3.3.tar.gz", "has_sig": false, "md5_digest": "3f937ed354782ba8ed3664e6f02307f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5147, "upload_time": "2014-03-27T09:14:00", "upload_time_iso_8601": "2014-03-27T09:14:00.196825Z", "url": "https://files.pythonhosted.org/packages/31/05/c64cec7511c32ffab4a9fccb53b58850d1c3d13367935bf8b8091722454b/Better-Than-You-Found-It-0.3.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "9aefe48cfa51c40496cf139d17667bac", "sha256": "23919c10ddf46b4c762d7402c7b3c716ab8627fd201d819fd03578c9531bd3eb"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.4.tar.gz", "has_sig": false, "md5_digest": "9aefe48cfa51c40496cf139d17667bac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5577, "upload_time": "2014-03-27T19:16:05", "upload_time_iso_8601": "2014-03-27T19:16:05.297655Z", "url": "https://files.pythonhosted.org/packages/5a/1c/cf14e1cc992178f0b4de55b50b0072ea2b651d81616cc06ae6fbb6231445/Better-Than-You-Found-It-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "349130677344d1a72d8e772832d31ff4", "sha256": "f9f638c071b5adacafd1eb59c536edd7eb1633bfcba9b20607c01ff6c17ba1d8"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.5.tar.gz", "has_sig": false, "md5_digest": "349130677344d1a72d8e772832d31ff4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7514, "upload_time": "2014-04-02T07:48:34", "upload_time_iso_8601": "2014-04-02T07:48:34.420994Z", "url": "https://files.pythonhosted.org/packages/83/9a/06b1b2699eeb7c63a26de611d7ef17222187aad58f92db7c40fa32d363d4/Better-Than-You-Found-It-0.5.tar.gz", "yanked": false}], "0.5a": [{"comment_text": "", "digests": {"md5": "7e3e35ea49754b6e4893c5390135bd48", "sha256": "bb7db174ec90e7585f11e1fe5b4d0780674d407ac85a9574d4f0d04692d549d0"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.5a.tar.gz", "has_sig": false, "md5_digest": "7e3e35ea49754b6e4893c5390135bd48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7510, "upload_time": "2014-04-02T07:48:09", "upload_time_iso_8601": "2014-04-02T07:48:09.872474Z", "url": "https://files.pythonhosted.org/packages/1f/20/4884b87a2f6d010899590a9a6bd22b3665442fbf4f46b529fee1de131228/Better-Than-You-Found-It-0.5a.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "3c9ebe584a0d9ca690500f4bdb66cd51", "sha256": "9146d09c23de2b7099294c483356303f99910152d06a2f0ed3b8b96aa30373ce"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.6.tar.gz", "has_sig": false, "md5_digest": "3c9ebe584a0d9ca690500f4bdb66cd51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9470, "upload_time": "2014-04-05T02:40:05", "upload_time_iso_8601": "2014-04-05T02:40:05.394486Z", "url": "https://files.pythonhosted.org/packages/5c/94/f3eaabad4de99f51b512bfbf06f0b78e6a0177b54c2c34be6e09638e7a58/Better-Than-You-Found-It-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "57087eedd10db2e5d5ca9fefb3b99181", "sha256": "8b15bb9c98e6bea985b992df56aedf59169d1b8cdffab989a4e9571ee489b730"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.7.tar.gz", "has_sig": false, "md5_digest": "57087eedd10db2e5d5ca9fefb3b99181", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13156, "upload_time": "2014-04-20T20:22:40", "upload_time_iso_8601": "2014-04-20T20:22:40.073786Z", "url": "https://files.pythonhosted.org/packages/60/a9/7e320841ff834384f052a4a9c9fe588b3457b1f11b4012c808f47892eb47/Better-Than-You-Found-It-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "9e44b24cc264b5ab60260b74096350ee", "sha256": "6d36455ce9b47cc832919961d01b8a921cdbbeffe36543b38fdfc9d49e1115bb"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.8.tar.gz", "has_sig": false, "md5_digest": "9e44b24cc264b5ab60260b74096350ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13726, "upload_time": "2014-05-28T05:37:06", "upload_time_iso_8601": "2014-05-28T05:37:06.190229Z", "url": "https://files.pythonhosted.org/packages/41/0a/3b02628116736f67bd87d49b7f3a27bf4034c6db03b0200c634e7955fc60/Better-Than-You-Found-It-0.8.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "f3ecaabff8f558281f983075b8ca4dac", "sha256": "3d1d44063aff5ac10f085caf41ee5e63b3c4006fa039db23f898bd1849792f9a"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.8.1.tar.gz", "has_sig": false, "md5_digest": "f3ecaabff8f558281f983075b8ca4dac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13940, "upload_time": "2014-06-01T02:49:35", "upload_time_iso_8601": "2014-06-01T02:49:35.349565Z", "url": "https://files.pythonhosted.org/packages/c8/f5/af4bda3eb69b67cf6d36097a9b49cbd53e6edadb5fb20af709d4d99b9c9b/Better-Than-You-Found-It-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "9bae43dbc6af7063fe12e7b989596b94", "sha256": "60042eff5225e5039c4bb92c44e646679246f0293865163bcf20f0575cf48c87"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.8.2.tar.gz", "has_sig": false, "md5_digest": "9bae43dbc6af7063fe12e7b989596b94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16685, "upload_time": "2014-09-14T07:30:19", "upload_time_iso_8601": "2014-09-14T07:30:19.919733Z", "url": "https://files.pythonhosted.org/packages/82/9c/a26208770ff19d3a749f2432cc8fad1606db25972867d016a2409c2695e4/Better-Than-You-Found-It-0.8.2.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "2a016bb9944701b1e33dafab5ab85960", "sha256": "7433bbb7176801c2266e04aea0cc85e37b8474c5781e94b917516234cf0192d4"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.9.0.tar.gz", "has_sig": false, "md5_digest": "2a016bb9944701b1e33dafab5ab85960", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20645, "upload_time": "2014-09-19T23:06:15", "upload_time_iso_8601": "2014-09-19T23:06:15.573922Z", "url": "https://files.pythonhosted.org/packages/d8/6e/be8d99cb37897c39eb81b26b75493886baff357e1fcb6d2847536194af7c/Better-Than-You-Found-It-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "5d798e9284a819165f1ca10d96700174", "sha256": "6f0113fc630d52900d71ebaafce95440d34b9551b951524893cb402f32e65308"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.9.1.tar.gz", "has_sig": false, "md5_digest": "5d798e9284a819165f1ca10d96700174", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24902, "upload_time": "2014-10-06T04:41:36", "upload_time_iso_8601": "2014-10-06T04:41:36.726130Z", "url": "https://files.pythonhosted.org/packages/8c/a5/a34c54cb3f8de3c1bdb792acc67c5ca6781c7c0fe20878e8a2aafd6df485/Better-Than-You-Found-It-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d798e9284a819165f1ca10d96700174", "sha256": "6f0113fc630d52900d71ebaafce95440d34b9551b951524893cb402f32e65308"}, "downloads": -1, "filename": "Better-Than-You-Found-It-0.9.1.tar.gz", "has_sig": false, "md5_digest": "5d798e9284a819165f1ca10d96700174", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24902, "upload_time": "2014-10-06T04:41:36", "upload_time_iso_8601": "2014-10-06T04:41:36.726130Z", "url": "https://files.pythonhosted.org/packages/8c/a5/a34c54cb3f8de3c1bdb792acc67c5ca6781c7c0fe20878e8a2aafd6df485/Better-Than-You-Found-It-0.9.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:42 2020"}