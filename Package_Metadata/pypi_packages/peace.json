{"info": {"author": "Gary Monson", "author_email": "gary.monson@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Peace\n=====\n\nA REST client - inspired by restmod for javascript.\n\nTest status\n-----------\n\n|Codeship Status for garymonson/peace|\n\nQuick start for contributing\n----------------------------\n\n::\n\n    virtualenv -p `which python3` virtualenv\n    source virtualenv/bin/activate\n    pip install -r requirements.txt\n    pip install -r dev_requirements.txt\n    nosetests\n\nUsage\n-----\n\n::\n\n    from peace import PeaceMaker\n\n    def set_authorization_header(request):\n        request.headers['Authorization'] = authorization_value\n        return request\n\n    maker = PeaceMaker('http://api.example.com')\n    Employee = maker.make(\n        'Employee',\n        '/employees'\n        has: {\n            'user': maker.make('Company'),\n        },\n        intercept: set_authorization_header,\n    )\n\n    employees = Employee.search(last_name='Smith')\n    bob = Employee.get('100')\n    bob.last_name = 'Smith-Jones'\n    bob.save()\n    bob.refresh()\n    company = bob.company\n    print(company.name) # prints name\n\nPeace requires the REST API to conform to a particular structure. A JSON\nresponse should look something like this:\n\n::\n\n    {\n      \"data\": {\n        \"id\": 100,\n        \"first_name\": \"Bob\",\n        \"last_name\": \"Smith\",\n      },\n      \"links\": {\n        \"self\": {\"href\": \"/employees/100\"},\n        \"company\": {\n          \"href\": \"/companies/5\",\n          \"data\": {\n            \"name\": \"Big Corp\",\n          },\n        },\n      },\n    }\n\nLinks can be followed (e.g. bob.company). Initially, the data returned\nin the original request will be immediately available, but if you try to\naccess other fields that a direct load is required to make available,\n(i.e. were not in the original response), then a load of the linked\nobject will be done first (e.g. GET /companies/5).\n\n.. |Codeship Status for garymonson/peace| image:: https://codeship.com/projects/3308e5a0-b522-0133-3191-1af10c27659b/status?branch=master\n   :target: https://codeship.com/projects/134053", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/garymonson/peace", "keywords": "rest client", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "peace", "package_url": "https://pypi.org/project/peace/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/peace/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/garymonson/peace"}, "release_url": "https://pypi.org/project/peace/0.0.8/", "requires_dist": null, "requires_python": null, "summary": "REST client", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A REST client - inspired by restmod for javascript.</p>\n<div id=\"test-status\">\n<h2>Test status</h2>\n<p><a href=\"https://codeship.com/projects/134053\" rel=\"nofollow\"><img alt=\"Codeship Status for garymonson/peace\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f83c0ac6e49b5f3a430156ff798f03d3952bbc68/68747470733a2f2f636f6465736869702e636f6d2f70726f6a656374732f33333038653561302d623532322d303133332d333139312d3161663130633237363539622f7374617475733f6272616e63683d6d6173746572\"></a></p>\n</div>\n<div id=\"quick-start-for-contributing\">\n<h2>Quick start for contributing</h2>\n<pre>virtualenv -p `which python3` virtualenv\nsource virtualenv/bin/activate\npip install -r requirements.txt\npip install -r dev_requirements.txt\nnosetests\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>from peace import PeaceMaker\n\ndef set_authorization_header(request):\n    request.headers['Authorization'] = authorization_value\n    return request\n\nmaker = PeaceMaker('http://api.example.com')\nEmployee = maker.make(\n    'Employee',\n    '/employees'\n    has: {\n        'user': maker.make('Company'),\n    },\n    intercept: set_authorization_header,\n)\n\nemployees = Employee.search(last_name='Smith')\nbob = Employee.get('100')\nbob.last_name = 'Smith-Jones'\nbob.save()\nbob.refresh()\ncompany = bob.company\nprint(company.name) # prints name\n</pre>\n<p>Peace requires the REST API to conform to a particular structure. A JSON\nresponse should look something like this:</p>\n<pre>{\n  \"data\": {\n    \"id\": 100,\n    \"first_name\": \"Bob\",\n    \"last_name\": \"Smith\",\n  },\n  \"links\": {\n    \"self\": {\"href\": \"/employees/100\"},\n    \"company\": {\n      \"href\": \"/companies/5\",\n      \"data\": {\n        \"name\": \"Big Corp\",\n      },\n    },\n  },\n}\n</pre>\n<p>Links can be followed (e.g. bob.company). Initially, the data returned\nin the original request will be immediately available, but if you try to\naccess other fields that a direct load is required to make available,\n(i.e. were not in the original response), then a load of the linked\nobject will be done first (e.g. GET /companies/5).</p>\n</div>\n\n          </div>"}, "last_serial": 2219929, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "c077f33a2a91d00875c1b59d0ae1aaba", "sha256": "a87574a3e450d4caf1b26968e1de342ecf7a5db6ae280fbdac1ccabff03ae981"}, "downloads": -1, "filename": "peace-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c077f33a2a91d00875c1b59d0ae1aaba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5333, "upload_time": "2015-11-24T23:42:45", "upload_time_iso_8601": "2015-11-24T23:42:45.507099Z", "url": "https://files.pythonhosted.org/packages/36/a6/8356c34bdf7a6453d748e58f3441b9d050ed01b353877de1cd5cebd1738f/peace-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "19c155d9e5bf23d0a2397764f14ec9c0", "sha256": "b9bc62508edfeeaf65fbbc4221a5fdebdb1c0da7c1b27e6a5aefe57275987155"}, "downloads": -1, "filename": "peace-0.0.4.tar.gz", "has_sig": false, "md5_digest": "19c155d9e5bf23d0a2397764f14ec9c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5618, "upload_time": "2015-12-31T05:39:32", "upload_time_iso_8601": "2015-12-31T05:39:32.163589Z", "url": "https://files.pythonhosted.org/packages/57/15/23af3301574844231b1a8561ada5b8c881ae19091c4b9c36e2aa80e7ecc1/peace-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "aca15871c7112c7b5ed377a8fea9bd9a", "sha256": "6c8c2d3d9f32b6cf8b3892e549445098676136ce8675cf0a9c3750d924914b48"}, "downloads": -1, "filename": "peace-0.0.5.tar.gz", "has_sig": false, "md5_digest": "aca15871c7112c7b5ed377a8fea9bd9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5632, "upload_time": "2016-01-03T23:45:18", "upload_time_iso_8601": "2016-01-03T23:45:18.876814Z", "url": "https://files.pythonhosted.org/packages/85/1d/76b299c0139c1a7e1790e9d709e9bc706be95924dfd7cfc0477ba143080e/peace-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "e887dbfa28c12dd059983d1ab7b0101d", "sha256": "eaebd32b5b00523e465fc3af930fa0a5ea476d45b21c2738a75df48c49c8280f"}, "downloads": -1, "filename": "peace-0.0.6.tar.gz", "has_sig": false, "md5_digest": "e887dbfa28c12dd059983d1ab7b0101d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5939, "upload_time": "2016-02-27T21:30:04", "upload_time_iso_8601": "2016-02-27T21:30:04.870224Z", "url": "https://files.pythonhosted.org/packages/3d/f8/07cb5e899d912051cf30b54331208b85eb4ee8a395bb7d8240ce81748d6a/peace-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "e8964cb4425c59ed67307b83561345b3", "sha256": "daf7171ca4dc969ca2d0447a609b25fa5add7f7d24e5d2b18824dc7c7c86a23c"}, "downloads": -1, "filename": "peace-0.0.7.tar.gz", "has_sig": false, "md5_digest": "e8964cb4425c59ed67307b83561345b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6391, "upload_time": "2016-02-28T00:18:19", "upload_time_iso_8601": "2016-02-28T00:18:19.690292Z", "url": "https://files.pythonhosted.org/packages/42/d3/c5c2d4d0061bb47fdadb7420e0fa731033ec530274883acdac583f9361e2/peace-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "6c316aa0e659edd6905e545b63acca5e", "sha256": "8f47b4695f85bba7c35064bcbf4024129f0a710a627eb8bee783782cc66032f1"}, "downloads": -1, "filename": "peace-0.0.8.tar.gz", "has_sig": false, "md5_digest": "6c316aa0e659edd6905e545b63acca5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6982, "upload_time": "2016-07-14T01:59:23", "upload_time_iso_8601": "2016-07-14T01:59:23.477669Z", "url": "https://files.pythonhosted.org/packages/cd/d4/5dddad716e662a57b3660905fc24fe17b0d967a23d950e4d923677f5a1ea/peace-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c316aa0e659edd6905e545b63acca5e", "sha256": "8f47b4695f85bba7c35064bcbf4024129f0a710a627eb8bee783782cc66032f1"}, "downloads": -1, "filename": "peace-0.0.8.tar.gz", "has_sig": false, "md5_digest": "6c316aa0e659edd6905e545b63acca5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6982, "upload_time": "2016-07-14T01:59:23", "upload_time_iso_8601": "2016-07-14T01:59:23.477669Z", "url": "https://files.pythonhosted.org/packages/cd/d4/5dddad716e662a57b3660905fc24fe17b0d967a23d950e4d923677f5a1ea/peace-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:00 2020"}