{"info": {"author": "Samuele Santi", "author_email": "samuele@samuelesanti.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "Contracts\n#########\n\n\nTravis:\n\n.. image:: https://img.shields.io/travis/rshk/contracts.svg\n    :target: https://travis-ci.org/rshk/contracts\n\n\nCircleCI:\n\n.. image:: https://img.shields.io/circleci/project/rshk/contracts.svg\n    :target: https://circleci.com/gh/rshk/contracts\n\n\nBase library for defining lean \"contract\" models for Python.\n\n\nAbstract\n========\n\nThis is an implementation of \"models\" similar to those you see in most\nORMs / forms definition systems, but with the main goal of keeping\nthings as simple as possible.\n\nNo metaclasses or descriptors are involved; no hackish code messing up\nwith standard Python objects functionality either.\n\nThe idea is to have a \"layered\" library, providing the bare bones\nneeded to define your own schemas, along with some nice helpers for\ncommon cases.\n\n\nUse cases\n=========\n\n- API clients\n- ORMs\n- Forms\n\n\n\nExample model definition\n========================\n\n.. code:: python\n\n    from contracts.core import Contract, BaseField\n\n    # Use BaseField to define your field types, eg. StringField and\n    # IntegerField.\n\n    class MyModel(BaseObject):\n        first_name = StringField()\n        last_name = StringField()\n        age = IntegerField()\n\nThen, create some library to make use of the schema somehow \ud83d\ude0a.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rshk/contracts", "keywords": null, "license": "Apache 2.0 License", "maintainer": null, "maintainer_email": null, "name": "lean-contracts", "package_url": "https://pypi.org/project/lean-contracts/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lean-contracts/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/rshk/contracts"}, "release_url": "https://pypi.org/project/lean-contracts/0.1a0/", "requires_dist": null, "requires_python": null, "summary": "Lean schema-enforcing objects", "version": "0.1a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Travis:</p>\n<a href=\"https://travis-ci.org/rshk/contracts\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/rshk/contracts.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ff662c61dcb7117aa795d073eeca980ef04da01/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7273686b2f636f6e7472616374732e737667\"></a>\n<p>CircleCI:</p>\n<a href=\"https://circleci.com/gh/rshk/contracts\" rel=\"nofollow\"><img alt=\"https://img.shields.io/circleci/project/rshk/contracts.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c463efb1efa6da6922d7c71c3595d539e3605364/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f7273686b2f636f6e7472616374732e737667\"></a>\n<p>Base library for defining lean \u201ccontract\u201d models for Python.</p>\n<div id=\"abstract\">\n<h2>Abstract</h2>\n<p>This is an implementation of \u201cmodels\u201d similar to those you see in most\nORMs / forms definition systems, but with the main goal of keeping\nthings as simple as possible.</p>\n<p>No metaclasses or descriptors are involved; no hackish code messing up\nwith standard Python objects functionality either.</p>\n<p>The idea is to have a \u201clayered\u201d library, providing the bare bones\nneeded to define your own schemas, along with some nice helpers for\ncommon cases.</p>\n</div>\n<div id=\"use-cases\">\n<h2>Use cases</h2>\n<ul>\n<li>API clients</li>\n<li>ORMs</li>\n<li>Forms</li>\n</ul>\n</div>\n<div id=\"example-model-definition\">\n<h2>Example model definition</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">contracts.core</span> <span class=\"kn\">import</span> <span class=\"n\">Contract</span><span class=\"p\">,</span> <span class=\"n\">BaseField</span>\n\n<span class=\"c1\"># Use BaseField to define your field types, eg. StringField and</span>\n<span class=\"c1\"># IntegerField.</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">BaseObject</span><span class=\"p\">):</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">()</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">()</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n</pre>\n<p>Then, create some library to make use of the schema somehow \ud83d\ude0a.</p>\n</div>\n\n          </div>"}, "last_serial": 1859301, "releases": {"0.1a0": []}, "urls": [], "timestamp": "Fri May  8 00:47:20 2020"}