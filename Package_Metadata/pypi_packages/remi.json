{"info": {"author": "Davide Rosa", "author_email": "dddomodossola@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.com/dddomodossola/remi.svg?branch=master)](https://travis-ci.com/dddomodossola/remi)\n\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/dddomodossola/remi/development/remi/res/logo.png\" width=\"430\">\n</p>\n\n<h2 align=\"center\" style=\"font-weight:bolder\">\n    GUI library for your Python applications\n</h2>\n\n<p align=\"center\" style=\"white-space:pre\">\nRemi is a GUI library for Python applications that gets rendered in web browsers. \nThis allows you to access your interface locally and remotely.\n</p>\n\nDo you need support?\n<p align=\"center\">\n<a href=\"https://www.reddit.com/r/RemiGUI\" style=\"font-size:25px\">Reddit - (subreddit RemiGUI)</a>\n</p>\n\n\nThere is also a **drag n drop GUI Editor**. Look at the [Editor](https://github.com/dddomodossola/remi/tree/master/editor) subfolder to download your copy.\n<p align=\"center\">\n** <a href=\"https://remiguieditor.daviderosa.repl.co/\">Live Play Graphical GUI Editor</a> **\n- For a comfortable use download it\n</p>\n\nChangelog\n===\n*2019 December 26*\n\nSince now remi is adopting class properties to setup css style and html attributes to make the applicable properties explicit.\nThis means that for example, to change a widget background you can now do:\n\n```python\n    mywidget.css_background_color = 'green'\n```\n\nThe old method to setup style and attributes is still accepted:\n\n```python\n    mywidget.style['background-color'] = 'green'\n```\n\n\n*2019 November 21*\n\nWidget class has no more **append** method. This means it cannot be used as a Container.\nUse the new class Container as a generic container instead.\nThis allows higher code consistency.\n\n\n*2019 April 1*\n\nEvent listener registration can now be done by the **do** instruction instead of **connect** (that stays available for compatibility reasons).\ni.e. \n```python\nmybutton.onclick.do(myevent_listener)\n```\n\n*Older changes*\n\nThe current branch includes improvements about resource files handling. \nApp constructor accepts **static_file_path** parameter. Its value have to be a dictionary, where elements represents named resources paths.\n\ni.e.\n```python\nsuper(MyApp, self).__init__(*args, static_file_path = {'my_resources':'./files/resources/', 'my_other_res':'./other/'})\n```\nTo address a specific resource, the user have to specify the resource folder key, prepending it to the filename in the format **'/key:'**\ni.e.\n```python\nmy_widget.attributes['background-image'] = \"url('/my_resources:image.png')\"\n```\nSubfolders are accepted, and so:\n```python\nmy_widget.attributes['background-image'] = \"url('/my_resources:subfolder/other_subfolder/image.png')\"\n```\n\nThe event TextInput.onenter is no longer supported.\n\nThe events TextInput.onkeydown and TextInput.onkeyup are now different, and require a different listener format. There is an additional parameter keycode.\n\nThe TextInput.onchange event now occurs also in case of Enter key pressed, if TextInput is single_line.\n\n\nGetting Started\n===\nFor a **stable** version:\n```\npip install remi\n```\n\nFor the most updated **experimental** version [Download](https://github.com/dddomodossola/remi/archive/master.zip) or check out Remi from git and install\n\n```\npython setup.py install\n```\nor install directly using pip\n\n```\npip install git+https://github.com/dddomodossola/remi.git\n```\n\nThen start the test script (download it from github https://github.com/dddomodossola/remi/blob/master/examples/widgets_overview_app.py):\n```\npython widgets_overview_app.py\n```\n\n\nRemi\n===\nPlatform independent Python GUI library. In less than 100 Kbytes of source code, perfect for your diet.\n\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/dddomodossola/remi/development/remi/res/screenshot.png\" title=\"Widgets overview\">\n</p>\n\nRemi enables developers to create platform independent GUI with Python. The entire GUI is rendered in your browser. **No HTML** is required, Remi automatically translates your Python code into HTML. When your app starts, it starts a web server that will be accessible on your network.\n\nA basic application appears like this:\n\n```py\nimport remi.gui as gui\nfrom remi import start, App\n\nclass MyApp(App):\n    def __init__(self, *args):\n        super(MyApp, self).__init__(*args)\n\n    def main(self):\n        container = gui.VBox(width=120, height=100)\n        self.lbl = gui.Label('Hello world!')\n        self.bt = gui.Button('Press me!')\n\n        # setting the listener for the onclick event of the button\n        self.bt.onclick.do(self.on_button_pressed)\n\n        # appending a widget to another, the first argument is a string key\n        container.append(self.lbl)\n        container.append(self.bt)\n\n        # returning the root widget\n        return container\n\n    # listener function\n    def on_button_pressed(self, widget):\n        self.lbl.set_text('Button pressed!')\n        self.bt.set_text('Hi!')\n\n# starts the web server\nstart(MyApp)\n```\n\nIn order to see the user interface, open your preferred browser and type \"http://127.0.0.1:8081\".\nYou can change the URL address by specific **kwargs at `start` function call. This will be discussed later.\n\nTested on Android, Linux, Windows.\nUseful on Raspberry Pi for Python script development. It allows interacting with your Raspberry Pi remotely from your mobile device.\n\n\nFAQ\n===\n- **Why another GUI lib?**\nKivy, PyQT, and PyGObject all require native code for the host operating system, which means installing or compiling large dependencies. Remi needs only a web browser to show your GUI.\n\n- **Do I need to know HTML?**\nNO, It is not required, you have to code only in Python.\n\n- **Is it open source?**\nFor sure! Remi is released under the Apache License. See the ``LICENSE`` file for more details.\n\n- **Do I need some kind of web server?**\nNo, it's included.\n\n\nBrief tutorial\n===\nImport Remi library and some other useful stuff.\n\n```py\nimport remi.gui as gui\nfrom remi import start, App\n```\n\nSubclass the `App` class and declare a `main` function that will be the entry point of the application. Inside the main function you have to <code>return</code> the root widget.\n\n```py\nclass MyApp(App):\n    def __init__(self, *args):\n        super(MyApp, self).__init__(*args)\n\n    def main(self):\n        lbl = gui.Label(\"Hello world!\", width=100, height=30)\n\n        # return of the root widget\n        return lbl\n```\n\nOutside the main class, start the application by calling the function `start` and passing the name of the class you declared previously as the parameter:\n\n```py\n# starts the webserver\nstart(MyApp)\n```\n\nRun the script. If it's all OK the GUI will be opened automatically in your browser, otherwise, you have to type in the address bar \"http://127.0.0.1:8081\".\n\nYou can customize optional parameters in the `start` call like:\n\n```py\nstart(MyApp, address='127.0.0.1', port=8081, multiple_instance=False, enable_file_cache=True, update_interval=0.1, start_browser=True)\n```\n\nParameters:\n- address: network interface IP\n- port: listen port\n- multiple_instance: boolean, if True multiple clients that connect to your script has different App instances (identified by unique cookie session identifier)\n- enable_file_cache: boolean, if True enable resource caching\n- update_interval: GUI update interval in seconds. If zero, the update happens at each change. If zero, the App.idle method is not called.\n- start_browser: boolean that defines if the browser should be opened automatically at startup\n- standalone: boolean, indicates where to run the application as a standard Desktop application with its own window. If False, the interface is shown in a browser webpage.\n\nAdditional Parameters:\n- username: for a basic HTTP authentication\n- password: for a basic HTTP authentication\n- certfile: SSL certificate filename\n- keyfile: SSL key file\n- ssl_version: authentication version (i.e. ssl.PROTOCOL_TLSv1_2). If None disables SSL encryption\n\nAll widgets constructors accept two standards**kwargs that are:\n- width: can be expressed as int (and is interpreted as a pixel) or as str (and you can specify the measuring unit like '10%')\n- height: can be expressed as int (and is interpreted as a pixel) or as str (and you can specify the measuring unit like '10%')\n\n\nEvents and callbacks\n===\nWidgets expose a set of events that happen during user interaction.\nSuch events are a convenient way to define the application behavior.\nEach widget has its own callbacks, depending on the type of user interaction it allows.\nThe specific callbacks for the widgets will be illustrated later.\n\nIn order to register a function as an event listener you have to call a function like eventname.do (i.e. onclick.do) passing as parameters the callback that will manage the event.\nFollows an example:\n\n```py\nimport remi.gui as gui\nfrom remi import start, App\n\nclass MyApp(App):\n    def __init__(self, *args):\n        super(MyApp, self).__init__(*args)\n\n    def main(self):\n        container = gui.VBox(width=120, height=100)\n        self.lbl = gui.Label('Hello world!')\n        self.bt = gui.Button('Press me!')\n\n        # setting the listener for the onclick event of the button\n        self.bt.onclick.do(self.on_button_pressed)\n\n        # appending a widget to another, the first argument is a string key\n        container.append(self.lbl)\n        container.append(self.bt)\n\n        # returning the root widget\n        return container\n\n    # listener function\n    def on_button_pressed(self, widget):\n        self.lbl.set_text('Button pressed!')\n        self.bt.set_text('Hi!')\n\n# starts the web server\nstart(MyApp)\n```\n\nIn the shown example *self.bt.onclick.do(self.on_button_pressed)* registers the self's *on_button_pressed* function as a listener for the event *onclick* exposed by the Button widget.\nSimple, easy.\n\nListener's callbacks will receive the emitter's instance firstly, then all other parameters provided by the specific event.\n\n\nBesides the standard event registration (as aforementioned), it is possible to pass user parameters to listener functions. This can be achieves appending parameters to the *do* function call.\n\n```py\nimport remi.gui as gui\nfrom remi import start, App\n\nclass MyApp(App):\n    def __init__(self, *args):\n        super(MyApp, self).__init__(*args)\n\n    def main(self):\n        container = gui.VBox(width=120, height=100)\n        self.lbl = gui.Label('Hello world!')\n        self.bt = gui.Button('Hello name!')\n        self.bt2 = gui.Button('Hello name surname!')\n\n        # setting the listener for the onclick event of the buttons\n        self.bt.onclick.do(self.on_button_pressed, \"Name\")\n        self.bt2.onclick.do(self.on_button_pressed, \"Name\", \"Surname\")\n\n        # appending a widget to another\n        container.append(self.lbl)\n        container.append(self.bt)\n        container.append(self.bt2)\n\n        # returning the root widget\n        return container\n\n    # listener function\n    def on_button_pressed(self, widget, name='', surname=''):\n        self.lbl.set_text('Button pressed!')\n        widget.set_text('Hello ' + name + ' ' + surname)\n\n# starts the web server\nstart(MyApp)\n```\n\nThis allows great flexibility, getting different behaviors with the same event listener definition.\n\n\nHTML Attribute accessibility\n===\nSometimes it is required to access Widget's HTML representation in order to manipulate HTML attributes.\nThe library allows accessing this information easily.\n\nA simple example: It is the case where you would like to add a hover text to a widget. This can be achieved by the *title* attribute of an HTML tag.\nIn order to do this:\n\n```py\n    widget_instance.attributes['title'] = 'Your title content'\n```\n\nA special case of HTML attribute is the *style*.\nThe style attributes can be altered in this way:\n\n```py\n    widget_instance.style['color'] = 'red'\n```\n\nThe assignment of a new attribute automatically creates it.\n\nFor a reference list of HTML attributes, you can refer to https://www.w3schools.com/tags/ref_attributes.asp\n\nFor a reference list of style attributes, you can refer to https://www.w3schools.com/cssref/default.asp\n\nTake care about internally used attributes. These are:\n- **class**: It is used to store the Widget class name for styling purpose\n- **id**: It is used to store the instance id of the widget for callback management\n\n\nRemote access\n===\nIf you are using your REMI app remotely, with a DNS and behind a firewall, you can specify special parameters in the `start` call:\n- **port**: HTTP server port. Don't forget to NAT this port on your router;\n\n```py\nstart(MyApp, address='0.0.0.0', port=8081)\n```\n\n\nStandalone Execution\n===\nI suggest using the browser as a standard interface window.\n\nHowever, you can avoid using the browser.\nThis can be simply obtained joining REMI and [PyWebView](https://github.com/r0x0r/pywebview).\nHere is an example about this [standalone_app.py](https://github.com/dddomodossola/remi/blob/development/examples/standalone_app.py).\n\n**Be aware that PyWebView uses qt, gtk and so on to create the window. An outdated version of these libraries can cause UI problems. If you experience UI issues, update these libraries, or better avoid standalone execution.**\n\n\nAuthentication\n===\nIn order to limit remote access to your interface, you can define a username and password. It consists of a simple authentication process.\nJust define the parameters **username** and **password** in the start call:\n```py\nstart(MyApp, username='myusername', password='mypassword')\n```\n\n\nStyling\n===\nIn order to define a new style for your app, you have to do the following.\nCreate a *res* folder and pass it to your App class constructor:\n```python\nclass MyApp(App):\n    def __init__(self, *args):\n        res_path = os.path.join(os.path.dirname(__file__), 'res')\n        super(MyApp, self).__init__(*args, static_file_path={'res':res_path})\n```\n\nCopy the standard style.css file from the remi folder and paste it inside your *res* folder. Edit it in order to customize.\nThis way the standard *style.css* file gets overridden by the one you created.\n\n\nCompatibility\n===\nRemi is made to be compatible from Python2.7 to Python3.X. Please notify compatibility issues.\n\n\nSecurity\n===\nRemi should be intended as a standard desktop GUI framework.\nThe library itself doesn't implement security strategies, and so it is advised to not expose its access to unsafe public networks.\n\nWhen loading data from external sources, consider protecting the application from potential javascript injection before displaying the content directly.\n\n\nSupporting the project\n===\n*Are you able to support the Remi project?*\n\nAre you aware that remi is on Patreon?\nThat's a brilliant way to support this project.\n\n**[SUPPORT Remi now](https://patreon.com/remigui)**\n\nAlso, a small amount is really welcome.\n\n\nContributors\n===\nThank you for collaborating with us to make Remi better!\n\nThe real power of opensource is contributors. Please feel free to participate in this project, and consider to add yourself to the following list.\nYes, I know that GitHub already provides a list of contributors, but I feel that I must mention who helps.\n\n[Davide Rosa](https://github.com/dddomodossola)\n\n[John Stowers](https://github.com/nzjrs)\n\n[Claudio Cannat\u00c3\u00a0](https://github.com/cyberpro4)\n\n[Sam Pfeiffer](https://github.com/awesomebytes)\n\n[Ken Thompson](https://github.com/KenT2)\n\n[Paarth Tandon](https://github.com/Paarthri)\n\n[Ally Weir](https://github.com/allyjweir)\n\n[Timothy Cyrus](https://github.com/tcyrus)\n\n[John Hunter Bowen](https://github.com/jhb188)\n\n[Martin Spasov](https://github.com/SuburbanFilth)\n\n[Wellington Castello](https://github.com/wcastello)\n\n[PURPORC](https://github.com/PURPORC)\n\n[ttufts](https://github.com/ttufts)\n\n[Chris Braun](https://github.com/cryzed)\n\n[Alan Yorinks](https://github.com/MrYsLab)\n\n[Bernhard E. Reiter](https://github.com/bernhardreiter)\n\n[saewoonam](https://github.com/saewoonam)\n\n\nProjects using Remi\n===\n[PySimpleGUI](https://github.com/PySimpleGUI/PySimpleGUI): Launched in 2018 Actively developed and supported. Supports tkinter, Qt, WxPython, Remi (in browser). Create custom layout GUI's simply. Python 2.7 & 3 Support. 100+ Demo programs & Cookbook for rapid start. Extensive documentation.\n\n[App Template For REMI](https://github.com/cheak1974/remi-app-template): A really well written template for multiview applications.\n\n[Web based dynamic reconfigure for ROS robots](https://github.com/awesomebytes/web_dyn_reconf)\n\n[razmq](https://github.com/MrYsLab/razmq)\n\n[Espresso-ARM](http://hallee.github.io/espresso-arm/)\n\n[PiPresents](https://github.com/KenT2/pipresents-gapless)\n\n[The Python Banyan Framework](https://github.com/MrYsLab/python_banyan)\n\n[LightShowPi show manager](https://bitbucket.org/chrispizzi75/lightshowpishowmanager)\n\n[rElectrum](https://github.com/emanuelelaface/rElectrum): A powerful promising Electrum wallet manager for safe transactions.\n\nOther Implementations\n===\nListed here are other implementations of this library:\n- [**cremi**](https://github.com/cyberpro4/cremi): (WIP) developed for your C++ projects by [Claudio Cannat\u00c3\u00a0](https://github.com/cyberpro4).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/dddomodossola/remi/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dddomodossola/remi", "keywords": "gui-library,remi,platform-independent,ui,gui", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "remi", "package_url": "https://pypi.org/project/remi/", "platform": "", "project_url": "https://pypi.org/project/remi/", "project_urls": {"Download": "https://github.com/dddomodossola/remi/archive/master.zip", "Homepage": "https://github.com/dddomodossola/remi"}, "release_url": "https://pypi.org/project/remi/2020.3.10/", "requires_dist": null, "requires_python": "", "summary": "Python REMote Interface library", "version": "2020.3.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/dddomodossola/remi\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f5981c38d72e1ba254cd6eb2d49b673a95a665f/68747470733a2f2f7472617669732d63692e636f6d2f6464646f6d6f646f73736f6c612f72656d692e7376673f6272616e63683d6d6173746572\"></a></p>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f61a2d00202f0bf5b72dd4851185eb5d4a732f6/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6464646f6d6f646f73736f6c612f72656d692f646576656c6f706d656e742f72656d692f7265732f6c6f676f2e706e67\" width=\"430\">\n</p>\n<h2>\n    GUI library for your Python applications\n</h2>\n<p align=\"center\">\nRemi is a GUI library for Python applications that gets rendered in web browsers. \nThis allows you to access your interface locally and remotely.\n</p>\n<p>Do you need support?</p>\n<p align=\"center\">\n<a href=\"https://www.reddit.com/r/RemiGUI\" rel=\"nofollow\">Reddit - (subreddit RemiGUI)</a>\n</p>\n<p>There is also a <strong>drag n drop GUI Editor</strong>. Look at the <a href=\"https://github.com/dddomodossola/remi/tree/master/editor\" rel=\"nofollow\">Editor</a> subfolder to download your copy.</p>\n<p align=\"center\">\n** <a href=\"https://remiguieditor.daviderosa.repl.co/\" rel=\"nofollow\">Live Play Graphical GUI Editor</a> **\n- For a comfortable use download it\n</p>\n<h1>Changelog</h1>\n<p><em>2019 December 26</em></p>\n<p>Since now remi is adopting class properties to setup css style and html attributes to make the applicable properties explicit.\nThis means that for example, to change a widget background you can now do:</p>\n<pre>    <span class=\"n\">mywidget</span><span class=\"o\">.</span><span class=\"n\">css_background_color</span> <span class=\"o\">=</span> <span class=\"s1\">'green'</span>\n</pre>\n<p>The old method to setup style and attributes is still accepted:</p>\n<pre>    <span class=\"n\">mywidget</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"p\">[</span><span class=\"s1\">'background-color'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'green'</span>\n</pre>\n<p><em>2019 November 21</em></p>\n<p>Widget class has no more <strong>append</strong> method. This means it cannot be used as a Container.\nUse the new class Container as a generic container instead.\nThis allows higher code consistency.</p>\n<p><em>2019 April 1</em></p>\n<p>Event listener registration can now be done by the <strong>do</strong> instruction instead of <strong>connect</strong> (that stays available for compatibility reasons).\ni.e.</p>\n<pre><span class=\"n\">mybutton</span><span class=\"o\">.</span><span class=\"n\">onclick</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"p\">(</span><span class=\"n\">myevent_listener</span><span class=\"p\">)</span>\n</pre>\n<p><em>Older changes</em></p>\n<p>The current branch includes improvements about resource files handling.\nApp constructor accepts <strong>static_file_path</strong> parameter. Its value have to be a dictionary, where elements represents named resources paths.</p>\n<p>i.e.</p>\n<pre><span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">static_file_path</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'my_resources'</span><span class=\"p\">:</span><span class=\"s1\">'./files/resources/'</span><span class=\"p\">,</span> <span class=\"s1\">'my_other_res'</span><span class=\"p\">:</span><span class=\"s1\">'./other/'</span><span class=\"p\">})</span>\n</pre>\n<p>To address a specific resource, the user have to specify the resource folder key, prepending it to the filename in the format <strong>'/key:'</strong>\ni.e.</p>\n<pre><span class=\"n\">my_widget</span><span class=\"o\">.</span><span class=\"n\">attributes</span><span class=\"p\">[</span><span class=\"s1\">'background-image'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"url('/my_resources:image.png')\"</span>\n</pre>\n<p>Subfolders are accepted, and so:</p>\n<pre><span class=\"n\">my_widget</span><span class=\"o\">.</span><span class=\"n\">attributes</span><span class=\"p\">[</span><span class=\"s1\">'background-image'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"url('/my_resources:subfolder/other_subfolder/image.png')\"</span>\n</pre>\n<p>The event TextInput.onenter is no longer supported.</p>\n<p>The events TextInput.onkeydown and TextInput.onkeyup are now different, and require a different listener format. There is an additional parameter keycode.</p>\n<p>The TextInput.onchange event now occurs also in case of Enter key pressed, if TextInput is single_line.</p>\n<h1>Getting Started</h1>\n<p>For a <strong>stable</strong> version:</p>\n<pre><code>pip install remi\n</code></pre>\n<p>For the most updated <strong>experimental</strong> version <a href=\"https://github.com/dddomodossola/remi/archive/master.zip\" rel=\"nofollow\">Download</a> or check out Remi from git and install</p>\n<pre><code>python setup.py install\n</code></pre>\n<p>or install directly using pip</p>\n<pre><code>pip install git+https://github.com/dddomodossola/remi.git\n</code></pre>\n<p>Then start the test script (download it from github <a href=\"https://github.com/dddomodossola/remi/blob/master/examples/widgets_overview_app.py\" rel=\"nofollow\">https://github.com/dddomodossola/remi/blob/master/examples/widgets_overview_app.py</a>):</p>\n<pre><code>python widgets_overview_app.py\n</code></pre>\n<h1>Remi</h1>\n<p>Platform independent Python GUI library. In less than 100 Kbytes of source code, perfect for your diet.</p>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6cb4f6f39fda1eda9403e48ef129702fc73c03b0/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6464646f6d6f646f73736f6c612f72656d692f646576656c6f706d656e742f72656d692f7265732f73637265656e73686f742e706e67\">\n</p>\n<p>Remi enables developers to create platform independent GUI with Python. The entire GUI is rendered in your browser. <strong>No HTML</strong> is required, Remi automatically translates your Python code into HTML. When your app starts, it starts a web server that will be accessible on your network.</p>\n<p>A basic application appears like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">remi.gui</span> <span class=\"k\">as</span> <span class=\"nn\">gui</span>\n<span class=\"kn\">from</span> <span class=\"nn\">remi</span> <span class=\"kn\">import</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">App</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyApp</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">VBox</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lbl</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s1\">'Hello world!'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Button</span><span class=\"p\">(</span><span class=\"s1\">'Press me!'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># setting the listener for the onclick event of the button</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">onclick</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_button_pressed</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># appending a widget to another, the first argument is a string key</span>\n        <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lbl</span><span class=\"p\">)</span>\n        <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># returning the root widget</span>\n        <span class=\"k\">return</span> <span class=\"n\">container</span>\n\n    <span class=\"c1\"># listener function</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_button_pressed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">widget</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">set_text</span><span class=\"p\">(</span><span class=\"s1\">'Button pressed!'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">set_text</span><span class=\"p\">(</span><span class=\"s1\">'Hi!'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># starts the web server</span>\n<span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">)</span>\n</pre>\n<p>In order to see the user interface, open your preferred browser and type \"<a href=\"http://127.0.0.1:8081\" rel=\"nofollow\">http://127.0.0.1:8081</a>\".\nYou can change the URL address by specific **kwargs at <code>start</code> function call. This will be discussed later.</p>\n<p>Tested on Android, Linux, Windows.\nUseful on Raspberry Pi for Python script development. It allows interacting with your Raspberry Pi remotely from your mobile device.</p>\n<h1>FAQ</h1>\n<ul>\n<li>\n<p><strong>Why another GUI lib?</strong>\nKivy, PyQT, and PyGObject all require native code for the host operating system, which means installing or compiling large dependencies. Remi needs only a web browser to show your GUI.</p>\n</li>\n<li>\n<p><strong>Do I need to know HTML?</strong>\nNO, It is not required, you have to code only in Python.</p>\n</li>\n<li>\n<p><strong>Is it open source?</strong>\nFor sure! Remi is released under the Apache License. See the <code>LICENSE</code> file for more details.</p>\n</li>\n<li>\n<p><strong>Do I need some kind of web server?</strong>\nNo, it's included.</p>\n</li>\n</ul>\n<h1>Brief tutorial</h1>\n<p>Import Remi library and some other useful stuff.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">remi.gui</span> <span class=\"k\">as</span> <span class=\"nn\">gui</span>\n<span class=\"kn\">from</span> <span class=\"nn\">remi</span> <span class=\"kn\">import</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">App</span>\n</pre>\n<p>Subclass the <code>App</code> class and declare a <code>main</code> function that will be the entry point of the application. Inside the main function you have to <code>return</code> the root widget.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyApp</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">lbl</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">\"Hello world!\"</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># return of the root widget</span>\n        <span class=\"k\">return</span> <span class=\"n\">lbl</span>\n</pre>\n<p>Outside the main class, start the application by calling the function <code>start</code> and passing the name of the class you declared previously as the parameter:</p>\n<pre><span class=\"c1\"># starts the webserver</span>\n<span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">)</span>\n</pre>\n<p>Run the script. If it's all OK the GUI will be opened automatically in your browser, otherwise, you have to type in the address bar \"<a href=\"http://127.0.0.1:8081\" rel=\"nofollow\">http://127.0.0.1:8081</a>\".</p>\n<p>You can customize optional parameters in the <code>start</code> call like:</p>\n<pre><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8081</span><span class=\"p\">,</span> <span class=\"n\">multiple_instance</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">enable_file_cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">update_interval</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">start_browser</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:</p>\n<ul>\n<li>address: network interface IP</li>\n<li>port: listen port</li>\n<li>multiple_instance: boolean, if True multiple clients that connect to your script has different App instances (identified by unique cookie session identifier)</li>\n<li>enable_file_cache: boolean, if True enable resource caching</li>\n<li>update_interval: GUI update interval in seconds. If zero, the update happens at each change. If zero, the App.idle method is not called.</li>\n<li>start_browser: boolean that defines if the browser should be opened automatically at startup</li>\n<li>standalone: boolean, indicates where to run the application as a standard Desktop application with its own window. If False, the interface is shown in a browser webpage.</li>\n</ul>\n<p>Additional Parameters:</p>\n<ul>\n<li>username: for a basic HTTP authentication</li>\n<li>password: for a basic HTTP authentication</li>\n<li>certfile: SSL certificate filename</li>\n<li>keyfile: SSL key file</li>\n<li>ssl_version: authentication version (i.e. ssl.PROTOCOL_TLSv1_2). If None disables SSL encryption</li>\n</ul>\n<p>All widgets constructors accept two standards**kwargs that are:</p>\n<ul>\n<li>width: can be expressed as int (and is interpreted as a pixel) or as str (and you can specify the measuring unit like '10%')</li>\n<li>height: can be expressed as int (and is interpreted as a pixel) or as str (and you can specify the measuring unit like '10%')</li>\n</ul>\n<h1>Events and callbacks</h1>\n<p>Widgets expose a set of events that happen during user interaction.\nSuch events are a convenient way to define the application behavior.\nEach widget has its own callbacks, depending on the type of user interaction it allows.\nThe specific callbacks for the widgets will be illustrated later.</p>\n<p>In order to register a function as an event listener you have to call a function like eventname.do (i.e. onclick.do) passing as parameters the callback that will manage the event.\nFollows an example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">remi.gui</span> <span class=\"k\">as</span> <span class=\"nn\">gui</span>\n<span class=\"kn\">from</span> <span class=\"nn\">remi</span> <span class=\"kn\">import</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">App</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyApp</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">VBox</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lbl</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s1\">'Hello world!'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Button</span><span class=\"p\">(</span><span class=\"s1\">'Press me!'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># setting the listener for the onclick event of the button</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">onclick</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_button_pressed</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># appending a widget to another, the first argument is a string key</span>\n        <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lbl</span><span class=\"p\">)</span>\n        <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># returning the root widget</span>\n        <span class=\"k\">return</span> <span class=\"n\">container</span>\n\n    <span class=\"c1\"># listener function</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_button_pressed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">widget</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">set_text</span><span class=\"p\">(</span><span class=\"s1\">'Button pressed!'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">set_text</span><span class=\"p\">(</span><span class=\"s1\">'Hi!'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># starts the web server</span>\n<span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">)</span>\n</pre>\n<p>In the shown example <em>self.bt.onclick.do(self.on_button_pressed)</em> registers the self's <em>on_button_pressed</em> function as a listener for the event <em>onclick</em> exposed by the Button widget.\nSimple, easy.</p>\n<p>Listener's callbacks will receive the emitter's instance firstly, then all other parameters provided by the specific event.</p>\n<p>Besides the standard event registration (as aforementioned), it is possible to pass user parameters to listener functions. This can be achieves appending parameters to the <em>do</em> function call.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">remi.gui</span> <span class=\"k\">as</span> <span class=\"nn\">gui</span>\n<span class=\"kn\">from</span> <span class=\"nn\">remi</span> <span class=\"kn\">import</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">App</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyApp</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">VBox</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lbl</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s1\">'Hello world!'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Button</span><span class=\"p\">(</span><span class=\"s1\">'Hello name!'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt2</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Button</span><span class=\"p\">(</span><span class=\"s1\">'Hello name surname!'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># setting the listener for the onclick event of the buttons</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">onclick</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_button_pressed</span><span class=\"p\">,</span> <span class=\"s2\">\"Name\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt2</span><span class=\"o\">.</span><span class=\"n\">onclick</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_button_pressed</span><span class=\"p\">,</span> <span class=\"s2\">\"Name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Surname\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># appending a widget to another</span>\n        <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lbl</span><span class=\"p\">)</span>\n        <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt</span><span class=\"p\">)</span>\n        <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bt2</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># returning the root widget</span>\n        <span class=\"k\">return</span> <span class=\"n\">container</span>\n\n    <span class=\"c1\"># listener function</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_button_pressed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">widget</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">surname</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">set_text</span><span class=\"p\">(</span><span class=\"s1\">'Button pressed!'</span><span class=\"p\">)</span>\n        <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">set_text</span><span class=\"p\">(</span><span class=\"s1\">'Hello '</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">surname</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># starts the web server</span>\n<span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">)</span>\n</pre>\n<p>This allows great flexibility, getting different behaviors with the same event listener definition.</p>\n<h1>HTML Attribute accessibility</h1>\n<p>Sometimes it is required to access Widget's HTML representation in order to manipulate HTML attributes.\nThe library allows accessing this information easily.</p>\n<p>A simple example: It is the case where you would like to add a hover text to a widget. This can be achieved by the <em>title</em> attribute of an HTML tag.\nIn order to do this:</p>\n<pre>    <span class=\"n\">widget_instance</span><span class=\"o\">.</span><span class=\"n\">attributes</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Your title content'</span>\n</pre>\n<p>A special case of HTML attribute is the <em>style</em>.\nThe style attributes can be altered in this way:</p>\n<pre>    <span class=\"n\">widget_instance</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"p\">[</span><span class=\"s1\">'color'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'red'</span>\n</pre>\n<p>The assignment of a new attribute automatically creates it.</p>\n<p>For a reference list of HTML attributes, you can refer to <a href=\"https://www.w3schools.com/tags/ref_attributes.asp\" rel=\"nofollow\">https://www.w3schools.com/tags/ref_attributes.asp</a></p>\n<p>For a reference list of style attributes, you can refer to <a href=\"https://www.w3schools.com/cssref/default.asp\" rel=\"nofollow\">https://www.w3schools.com/cssref/default.asp</a></p>\n<p>Take care about internally used attributes. These are:</p>\n<ul>\n<li><strong>class</strong>: It is used to store the Widget class name for styling purpose</li>\n<li><strong>id</strong>: It is used to store the instance id of the widget for callback management</li>\n</ul>\n<h1>Remote access</h1>\n<p>If you are using your REMI app remotely, with a DNS and behind a firewall, you can specify special parameters in the <code>start</code> call:</p>\n<ul>\n<li><strong>port</strong>: HTTP server port. Don't forget to NAT this port on your router;</li>\n</ul>\n<pre><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'0.0.0.0'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8081</span><span class=\"p\">)</span>\n</pre>\n<h1>Standalone Execution</h1>\n<p>I suggest using the browser as a standard interface window.</p>\n<p>However, you can avoid using the browser.\nThis can be simply obtained joining REMI and <a href=\"https://github.com/r0x0r/pywebview\" rel=\"nofollow\">PyWebView</a>.\nHere is an example about this <a href=\"https://github.com/dddomodossola/remi/blob/development/examples/standalone_app.py\" rel=\"nofollow\">standalone_app.py</a>.</p>\n<p><strong>Be aware that PyWebView uses qt, gtk and so on to create the window. An outdated version of these libraries can cause UI problems. If you experience UI issues, update these libraries, or better avoid standalone execution.</strong></p>\n<h1>Authentication</h1>\n<p>In order to limit remote access to your interface, you can define a username and password. It consists of a simple authentication process.\nJust define the parameters <strong>username</strong> and <strong>password</strong> in the start call:</p>\n<pre><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'myusername'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'mypassword'</span><span class=\"p\">)</span>\n</pre>\n<h1>Styling</h1>\n<p>In order to define a new style for your app, you have to do the following.\nCreate a <em>res</em> folder and pass it to your App class constructor:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyApp</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"n\">res_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">),</span> <span class=\"s1\">'res'</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyApp</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">static_file_path</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'res'</span><span class=\"p\">:</span><span class=\"n\">res_path</span><span class=\"p\">})</span>\n</pre>\n<p>Copy the standard style.css file from the remi folder and paste it inside your <em>res</em> folder. Edit it in order to customize.\nThis way the standard <em>style.css</em> file gets overridden by the one you created.</p>\n<h1>Compatibility</h1>\n<p>Remi is made to be compatible from Python2.7 to Python3.X. Please notify compatibility issues.</p>\n<h1>Security</h1>\n<p>Remi should be intended as a standard desktop GUI framework.\nThe library itself doesn't implement security strategies, and so it is advised to not expose its access to unsafe public networks.</p>\n<p>When loading data from external sources, consider protecting the application from potential javascript injection before displaying the content directly.</p>\n<h1>Supporting the project</h1>\n<p><em>Are you able to support the Remi project?</em></p>\n<p>Are you aware that remi is on Patreon?\nThat's a brilliant way to support this project.</p>\n<p><strong><a href=\"https://patreon.com/remigui\" rel=\"nofollow\">SUPPORT Remi now</a></strong></p>\n<p>Also, a small amount is really welcome.</p>\n<h1>Contributors</h1>\n<p>Thank you for collaborating with us to make Remi better!</p>\n<p>The real power of opensource is contributors. Please feel free to participate in this project, and consider to add yourself to the following list.\nYes, I know that GitHub already provides a list of contributors, but I feel that I must mention who helps.</p>\n<p><a href=\"https://github.com/dddomodossola\" rel=\"nofollow\">Davide Rosa</a></p>\n<p><a href=\"https://github.com/nzjrs\" rel=\"nofollow\">John Stowers</a></p>\n<p><a href=\"https://github.com/cyberpro4\" rel=\"nofollow\">Claudio Cannat\u00c3\u00a0</a></p>\n<p><a href=\"https://github.com/awesomebytes\" rel=\"nofollow\">Sam Pfeiffer</a></p>\n<p><a href=\"https://github.com/KenT2\" rel=\"nofollow\">Ken Thompson</a></p>\n<p><a href=\"https://github.com/Paarthri\" rel=\"nofollow\">Paarth Tandon</a></p>\n<p><a href=\"https://github.com/allyjweir\" rel=\"nofollow\">Ally Weir</a></p>\n<p><a href=\"https://github.com/tcyrus\" rel=\"nofollow\">Timothy Cyrus</a></p>\n<p><a href=\"https://github.com/jhb188\" rel=\"nofollow\">John Hunter Bowen</a></p>\n<p><a href=\"https://github.com/SuburbanFilth\" rel=\"nofollow\">Martin Spasov</a></p>\n<p><a href=\"https://github.com/wcastello\" rel=\"nofollow\">Wellington Castello</a></p>\n<p><a href=\"https://github.com/PURPORC\" rel=\"nofollow\">PURPORC</a></p>\n<p><a href=\"https://github.com/ttufts\" rel=\"nofollow\">ttufts</a></p>\n<p><a href=\"https://github.com/cryzed\" rel=\"nofollow\">Chris Braun</a></p>\n<p><a href=\"https://github.com/MrYsLab\" rel=\"nofollow\">Alan Yorinks</a></p>\n<p><a href=\"https://github.com/bernhardreiter\" rel=\"nofollow\">Bernhard E. Reiter</a></p>\n<p><a href=\"https://github.com/saewoonam\" rel=\"nofollow\">saewoonam</a></p>\n<h1>Projects using Remi</h1>\n<p><a href=\"https://github.com/PySimpleGUI/PySimpleGUI\" rel=\"nofollow\">PySimpleGUI</a>: Launched in 2018 Actively developed and supported. Supports tkinter, Qt, WxPython, Remi (in browser). Create custom layout GUI's simply. Python 2.7 &amp; 3 Support. 100+ Demo programs &amp; Cookbook for rapid start. Extensive documentation.</p>\n<p><a href=\"https://github.com/cheak1974/remi-app-template\" rel=\"nofollow\">App Template For REMI</a>: A really well written template for multiview applications.</p>\n<p><a href=\"https://github.com/awesomebytes/web_dyn_reconf\" rel=\"nofollow\">Web based dynamic reconfigure for ROS robots</a></p>\n<p><a href=\"https://github.com/MrYsLab/razmq\" rel=\"nofollow\">razmq</a></p>\n<p><a href=\"http://hallee.github.io/espresso-arm/\" rel=\"nofollow\">Espresso-ARM</a></p>\n<p><a href=\"https://github.com/KenT2/pipresents-gapless\" rel=\"nofollow\">PiPresents</a></p>\n<p><a href=\"https://github.com/MrYsLab/python_banyan\" rel=\"nofollow\">The Python Banyan Framework</a></p>\n<p><a href=\"https://bitbucket.org/chrispizzi75/lightshowpishowmanager\" rel=\"nofollow\">LightShowPi show manager</a></p>\n<p><a href=\"https://github.com/emanuelelaface/rElectrum\" rel=\"nofollow\">rElectrum</a>: A powerful promising Electrum wallet manager for safe transactions.</p>\n<h1>Other Implementations</h1>\n<p>Listed here are other implementations of this library:</p>\n<ul>\n<li><a href=\"https://github.com/cyberpro4/cremi\" rel=\"nofollow\"><strong>cremi</strong></a>: (WIP) developed for your C++ projects by <a href=\"https://github.com/cyberpro4\" rel=\"nofollow\">Claudio Cannat\u00c3\u00a0</a>.</li>\n</ul>\n\n          </div>"}, "last_serial": 6785431, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b877c697322d9aa7fbf50e66c5debc7d", "sha256": "e7fd720e3e8c2b85604372528cf17eb6c7a0ee19a4d992b1a14fc2b8149e7e1d"}, "downloads": -1, "filename": "remi-0.1.zip", "has_sig": false, "md5_digest": "b877c697322d9aa7fbf50e66c5debc7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 331401, "upload_time": "2017-03-02T21:34:54", "upload_time_iso_8601": "2017-03-02T21:34:54.612853Z", "url": "https://files.pythonhosted.org/packages/56/d7/2674b6f89d94362739b3b0928cf99c1d21a3a8e3a5d83c9766c4097d58f4/remi-0.1.zip", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "75c0a52f2511749e2658211d11693557", "sha256": "eb9a9cfad77f9a4fd149471159b3c655b4bd4b4175a354bdcc89096f4124d9e4"}, "downloads": -1, "filename": "remi-1.0.zip", "has_sig": false, "md5_digest": "75c0a52f2511749e2658211d11693557", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 206593, "upload_time": "2017-05-29T12:25:12", "upload_time_iso_8601": "2017-05-29T12:25:12.958431Z", "url": "https://files.pythonhosted.org/packages/a6/c5/eb584f8cc2ea3843c2253efaf439e643811a23c8015f73c2ad1eb8381ad8/remi-1.0.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "debf2d0081b52a453f48d6cae8b89d1f", "sha256": "9f5720010bab9c200c184671fa1a8f4fcc0c854d32ed17d5d08aecc9cd6d0078"}, "downloads": -1, "filename": "remi-1.1.tar.gz", "has_sig": false, "md5_digest": "debf2d0081b52a453f48d6cae8b89d1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 201490, "upload_time": "2018-04-16T13:15:15", "upload_time_iso_8601": "2018-04-16T13:15:15.128284Z", "url": "https://files.pythonhosted.org/packages/1f/92/cd9e1c19958bf4614e1ee7b64c690545c8b2e1feb9debc11295abe528988/remi-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "201ba8d32c3a113f6595be4fd2fa4541", "sha256": "97d1011a7cf30c080893f2530e1c7e10e548a9aaa9b25971dc79b07264ea344a"}, "downloads": -1, "filename": "remi-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "201ba8d32c3a113f6595be4fd2fa4541", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 217040, "upload_time": "2018-06-26T08:02:28", "upload_time_iso_8601": "2018-06-26T08:02:28.023301Z", "url": "https://files.pythonhosted.org/packages/68/f0/c0278090a0f0feabf991ea0b61d0e9777f98414b7cb8ac758dca5cc0e248/remi-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b74b046584cf86c120a4fd9ef1f9dfad", "sha256": "3bf77568a8b29d90523463c4cd37aa0e49acb081534ca4241801b030e4489191"}, "downloads": -1, "filename": "remi-1.2.tar.gz", "has_sig": false, "md5_digest": "b74b046584cf86c120a4fd9ef1f9dfad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 222894, "upload_time": "2018-06-26T08:02:34", "upload_time_iso_8601": "2018-06-26T08:02:34.984046Z", "url": "https://files.pythonhosted.org/packages/fc/14/c5245644065d9168923491f3812c6f2f13ba694d91551ce621f53fd48874/remi-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "072230c8eec7cf564862f4009a64b347", "sha256": "77923e9163c64334254f0401a0e744e27f5bda8348765d38badc194b2580f53c"}, "downloads": -1, "filename": "remi-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "072230c8eec7cf564862f4009a64b347", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 217515, "upload_time": "2018-07-17T09:48:56", "upload_time_iso_8601": "2018-07-17T09:48:56.618724Z", "url": "https://files.pythonhosted.org/packages/3a/a5/df3cc4974f00666dab15c2f36ba8f05927417aca9aa6177b3792b04c952f/remi-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2b138be297328dacfe28c51ab8237bb", "sha256": "71ea104783b607d0dffbb7c47733a879173334297f154cf33a56b81c3bfe163d"}, "downloads": -1, "filename": "remi-1.2.1.tar.gz", "has_sig": false, "md5_digest": "a2b138be297328dacfe28c51ab8237bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 223371, "upload_time": "2018-07-17T09:48:58", "upload_time_iso_8601": "2018-07-17T09:48:58.405299Z", "url": "https://files.pythonhosted.org/packages/e5/25/10a60b638a2004b04833d61cdf899587140cd6d4a151948154b6c50ce486/remi-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "f7460120b3305fb68d5cf5a595c67a14", "sha256": "ae1bebcd0f4c84e012d57ff02492fbaafa40c1fef59b03c32f7026cbd6d5fd12"}, "downloads": -1, "filename": "remi-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f7460120b3305fb68d5cf5a595c67a14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 217884, "upload_time": "2018-09-11T10:00:15", "upload_time_iso_8601": "2018-09-11T10:00:15.094632Z", "url": "https://files.pythonhosted.org/packages/84/8e/3b1db819f25ca14c71fc2efebce32f5ee43265c911c72f9b2db4e231e221/remi-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e25503760abffba057cdca78420e48cc", "sha256": "6d6b610faab9beba95121d0755b4c36f8a40f474a0e701293fff9f33a0a0fe68"}, "downloads": -1, "filename": "remi-1.2.2.tar.gz", "has_sig": false, "md5_digest": "e25503760abffba057cdca78420e48cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 223629, "upload_time": "2018-09-11T10:00:23", "upload_time_iso_8601": "2018-09-11T10:00:23.600156Z", "url": "https://files.pythonhosted.org/packages/aa/62/628b8d6badab2cf3e1411839da2840615f567378c30a31710360867a7823/remi-1.2.2.tar.gz", "yanked": false}], "2018.11": [{"comment_text": "", "digests": {"md5": "8f84994d6c857a8d241d96c9ba4d45fd", "sha256": "962c215b055323de2c593709c5aa1f911d4129e02566deb96c642e08d0f491a3"}, "downloads": -1, "filename": "remi-2018.11-py3-none-any.whl", "has_sig": false, "md5_digest": "8f84994d6c857a8d241d96c9ba4d45fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 338529, "upload_time": "2018-11-26T16:32:51", "upload_time_iso_8601": "2018-11-26T16:32:51.672215Z", "url": "https://files.pythonhosted.org/packages/2d/96/66b8ca5b94005efe65f2ce0963c850533db7e9dd9b129c628fe0d6eef53e/remi-2018.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0577a611714d1bdb6decdd6435d8a265", "sha256": "bacaae5620e0d041358b70eb70b7d3d22218b2b0329e13d9057573013b2041dd"}, "downloads": -1, "filename": "remi-2018.11.tar.gz", "has_sig": false, "md5_digest": "0577a611714d1bdb6decdd6435d8a265", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 331577, "upload_time": "2018-11-26T16:32:56", "upload_time_iso_8601": "2018-11-26T16:32:56.734353Z", "url": "https://files.pythonhosted.org/packages/22/dd/d6754fd4c83e0d395f935806c8995c6a983fbd2a72b302d919c28afeb74a/remi-2018.11.tar.gz", "yanked": false}], "2018.11.27": [{"comment_text": "", "digests": {"md5": "73c12d8a62e3bd30b2291adbac6e1ea5", "sha256": "13528190d11371fe866e407449d35910a9c91bcd5dea3926e25b876dbe4f8e6b"}, "downloads": -1, "filename": "remi-2018.11.27-py3-none-any.whl", "has_sig": false, "md5_digest": "73c12d8a62e3bd30b2291adbac6e1ea5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 338572, "upload_time": "2018-11-27T11:28:43", "upload_time_iso_8601": "2018-11-27T11:28:43.357170Z", "url": "https://files.pythonhosted.org/packages/9e/7a/7c564e0fec2c5cc9e91174d9fc04b5632a25fd764eb0ef3b5bc5938754a5/remi-2018.11.27-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d047439453f314f71e773d80d3c22d3a", "sha256": "7bbd30e2271b9935c36dbfa8b9d16feee7a04720464940b1cc14c206d839dc57"}, "downloads": -1, "filename": "remi-2018.11.27.tar.gz", "has_sig": false, "md5_digest": "d047439453f314f71e773d80d3c22d3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 331627, "upload_time": "2018-11-27T11:28:49", "upload_time_iso_8601": "2018-11-27T11:28:49.200401Z", "url": "https://files.pythonhosted.org/packages/08/ae/0caf1ce19335e2d97d1767d3dbcfc3c556f3f5c2a08aba52235bf482fba4/remi-2018.11.27.tar.gz", "yanked": false}], "2018.12": [{"comment_text": "", "digests": {"md5": "84ac2e637ba127bcb219d50d58b9fb8a", "sha256": "9f772482721927daf4c29d5fb66e4892f4cb3a6b19e8a13b67a3cec46e484163"}, "downloads": -1, "filename": "remi-2018.12-py3-none-any.whl", "has_sig": false, "md5_digest": "84ac2e637ba127bcb219d50d58b9fb8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 338567, "upload_time": "2018-12-13T15:53:23", "upload_time_iso_8601": "2018-12-13T15:53:23.302397Z", "url": "https://files.pythonhosted.org/packages/db/18/8c26a975e1d3c484d11098ce71e41041d201311fc5991dc11b17e5944f5b/remi-2018.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72880692cf1fceccd527f7069b11cd38", "sha256": "19ae8c05e38577160cda987108f74f0e11e2f74478e0e5689504c460580ef1fd"}, "downloads": -1, "filename": "remi-2018.12.tar.gz", "has_sig": false, "md5_digest": "72880692cf1fceccd527f7069b11cd38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 331576, "upload_time": "2018-12-13T15:53:30", "upload_time_iso_8601": "2018-12-13T15:53:30.950928Z", "url": "https://files.pythonhosted.org/packages/b5/f2/952ebccb35b065853eee772deac370a18878601ac62b6fb7852781f69c3c/remi-2018.12.tar.gz", "yanked": false}], "2019.11": [{"comment_text": "", "digests": {"md5": "a84cbfdd8a474d97550026655491ff4c", "sha256": "b7c293d3c01c074c58f5cfcd6c3217c90d3ddd179191c58c690810b6b86db9eb"}, "downloads": -1, "filename": "remi-2019.11-py3-none-any.whl", "has_sig": false, "md5_digest": "a84cbfdd8a474d97550026655491ff4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 383529, "upload_time": "2019-11-28T08:24:30", "upload_time_iso_8601": "2019-11-28T08:24:30.530690Z", "url": "https://files.pythonhosted.org/packages/7e/4c/9ffc4cba76fe51123d46af67ef216069090e7d23ec4bab67199c9ef07bf2/remi-2019.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06a51311b4567f05d9fcbc10f8f574f8", "sha256": "c0a1e98dba02f5287cdac989cd04a859b6d2353b21e6f1a667138ee97cb78eca"}, "downloads": -1, "filename": "remi-2019.11.tar.gz", "has_sig": false, "md5_digest": "06a51311b4567f05d9fcbc10f8f574f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 372886, "upload_time": "2019-11-28T08:24:37", "upload_time_iso_8601": "2019-11-28T08:24:37.048102Z", "url": "https://files.pythonhosted.org/packages/18/df/115bfc2b84e95011a835885ace682fcd5720d6a631c0c84afcb3039c42b2/remi-2019.11.tar.gz", "yanked": false}], "2019.4": [{"comment_text": "", "digests": {"md5": "fcd589f553d4c0b76c4e005082257a55", "sha256": "cd8eb2b972869bb5c2b5c0611fbddaa204a5356bef58169208ace7813186c4c4"}, "downloads": -1, "filename": "remi-2019.4-py3-none-any.whl", "has_sig": false, "md5_digest": "fcd589f553d4c0b76c4e005082257a55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 338836, "upload_time": "2019-04-01T09:48:59", "upload_time_iso_8601": "2019-04-01T09:48:59.932959Z", "url": "https://files.pythonhosted.org/packages/ed/66/83e6911ee5d0206dcb672c5cd6dda28f53d58c76e8586bc6a3ef647ec7d5/remi-2019.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9710ff98e91026100b68577337284c0a", "sha256": "ad87fafbefd5a8f3c34086a877828cceca3fc5be93703707baacc069dc39edd9"}, "downloads": -1, "filename": "remi-2019.4.tar.gz", "has_sig": false, "md5_digest": "9710ff98e91026100b68577337284c0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 331987, "upload_time": "2019-04-01T09:49:10", "upload_time_iso_8601": "2019-04-01T09:49:10.086418Z", "url": "https://files.pythonhosted.org/packages/c5/7d/e260383f67e180853bc87973a239fef543bf9598a8bf0fbd4256b9a9786b/remi-2019.4.tar.gz", "yanked": false}], "2019.9": [{"comment_text": "", "digests": {"md5": "0c2ed9baa6685031ea0708cc2beef6a7", "sha256": "cb539f9ebd9da415e14508fbdf3f8a61ba6da47e6af43cd01bbb3da6b3d38517"}, "downloads": -1, "filename": "remi-2019.9-py3-none-any.whl", "has_sig": false, "md5_digest": "0c2ed9baa6685031ea0708cc2beef6a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 340603, "upload_time": "2019-09-17T10:05:17", "upload_time_iso_8601": "2019-09-17T10:05:17.768420Z", "url": "https://files.pythonhosted.org/packages/3c/a8/96d796e1c3ee7c1e9d569c2891fb910a572d5323671d2c68d125aee6e0b6/remi-2019.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4c880d7059df488768ef92d26b66ed8", "sha256": "db822b6f5e920432d0b1c0163d1c0951b5901d624c3d24ef147457519d7721d9"}, "downloads": -1, "filename": "remi-2019.9.tar.gz", "has_sig": false, "md5_digest": "f4c880d7059df488768ef92d26b66ed8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 333798, "upload_time": "2019-09-17T10:05:24", "upload_time_iso_8601": "2019-09-17T10:05:24.179215Z", "url": "https://files.pythonhosted.org/packages/b9/9e/7ea910a1a2d427c1c1e82f2b9f726acf3c738785e73d33094cd7cb42662c/remi-2019.9.tar.gz", "yanked": false}], "2020.1": [{"comment_text": "", "digests": {"md5": "cd1e99b483989f556c35e418d6e99ff6", "sha256": "9b9113835992db72a245444b1d1cd1efc4f74bec2338de56e66cace98a6675e9"}, "downloads": -1, "filename": "remi-2020.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cd1e99b483989f556c35e418d6e99ff6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 502858, "upload_time": "2020-01-08T08:39:50", "upload_time_iso_8601": "2020-01-08T08:39:50.794978Z", "url": "https://files.pythonhosted.org/packages/4c/c0/1065dd6f69033d10de8f9af4c03189af13ebd68bbfdd640f99b19bd0e120/remi-2020.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a73c7989a33598bc876edab673725355", "sha256": "32a509234c1b12f738d1229ca06cabeaf4bfcc54b506224acde2a8cb66929f2a"}, "downloads": -1, "filename": "remi-2020.1.tar.gz", "has_sig": false, "md5_digest": "a73c7989a33598bc876edab673725355", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 492627, "upload_time": "2020-01-08T08:39:58", "upload_time_iso_8601": "2020-01-08T08:39:58.429531Z", "url": "https://files.pythonhosted.org/packages/b4/dc/bf6a641312264088dd4f34e941ec9f88a3dc2fd08a559a0336b2bc099738/remi-2020.1.tar.gz", "yanked": false}], "2020.1.16": [{"comment_text": "", "digests": {"md5": "e9724bc175090a9a04b3e8201d80fb19", "sha256": "c50b79181a642336893c93ae767589e6cdd6cf142018f1993fb682bdffc42bdc"}, "downloads": -1, "filename": "remi-2020.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "e9724bc175090a9a04b3e8201d80fb19", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 502949, "upload_time": "2020-01-16T11:45:49", "upload_time_iso_8601": "2020-01-16T11:45:49.697023Z", "url": "https://files.pythonhosted.org/packages/2f/20/aeffdf3baac8c9149eb5f06cf762977bc8a719c250fbdfce37342829dae1/remi-2020.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c1033675b90f9f5af51ac4d9b0f3118", "sha256": "0a846809b3a6d10b6afd65cf6e74bfb855ffc165c74df80e29433174c4972a59"}, "downloads": -1, "filename": "remi-2020.1.16.tar.gz", "has_sig": false, "md5_digest": "4c1033675b90f9f5af51ac4d9b0f3118", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 492570, "upload_time": "2020-01-16T11:45:57", "upload_time_iso_8601": "2020-01-16T11:45:57.689793Z", "url": "https://files.pythonhosted.org/packages/de/5d/74c96d42800ad56a852359f88f2790bc34de9c49e548ef5cd2e6f089ab59/remi-2020.1.16.tar.gz", "yanked": false}], "2020.2.24": [{"comment_text": "", "digests": {"md5": "0aec1f11bfc854194beac0742544e124", "sha256": "7aef65632f1b831d2aeaa506ece1e5840c46f19cd9a4b4c094c69781ab9554ed"}, "downloads": -1, "filename": "remi-2020.2.24-py3-none-any.whl", "has_sig": false, "md5_digest": "0aec1f11bfc854194beac0742544e124", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 503298, "upload_time": "2020-02-24T08:20:39", "upload_time_iso_8601": "2020-02-24T08:20:39.382902Z", "url": "https://files.pythonhosted.org/packages/8e/3d/3aa0741a09d79dc4f643037fa24bb9b13f7c3d82872708d92be6d8af2fb8/remi-2020.2.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eca79a8c84ebc0efafa3e62e7359080", "sha256": "1e0278f2a304b227466cff10216486c560b06215a9e8c95b20700bd960812250"}, "downloads": -1, "filename": "remi-2020.2.24.tar.gz", "has_sig": false, "md5_digest": "6eca79a8c84ebc0efafa3e62e7359080", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 493043, "upload_time": "2020-02-24T08:20:48", "upload_time_iso_8601": "2020-02-24T08:20:48.993605Z", "url": "https://files.pythonhosted.org/packages/66/4f/71ed9c0dc0e87a534d39ae25f2711c8b1b6fb2bdcc8bae51af1ff2b157a2/remi-2020.2.24.tar.gz", "yanked": false}], "2020.2.5": [{"comment_text": "", "digests": {"md5": "b277e7f67d4a95091d2a3190f1a1cae6", "sha256": "bc6cfc53bc3f54ada9c295e140bc90f0d80070af31582e456fa024f5d0279dae"}, "downloads": -1, "filename": "remi-2020.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b277e7f67d4a95091d2a3190f1a1cae6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 503225, "upload_time": "2020-02-05T10:00:08", "upload_time_iso_8601": "2020-02-05T10:00:08.307152Z", "url": "https://files.pythonhosted.org/packages/46/ea/54d45d34ddf75b05eda1ac1fdb9dbd34e78c971526ac0edb8ae40e9e020d/remi-2020.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e8109d9d44e8e9ccfdc0492bff37244", "sha256": "ac87de6e82b95383cef652367fd7a49d4c4eccfac7d58fd4aceea10934202c75"}, "downloads": -1, "filename": "remi-2020.2.5.tar.gz", "has_sig": false, "md5_digest": "8e8109d9d44e8e9ccfdc0492bff37244", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 492985, "upload_time": "2020-02-05T10:00:16", "upload_time_iso_8601": "2020-02-05T10:00:16.463439Z", "url": "https://files.pythonhosted.org/packages/3d/f0/ac5ff9fa4883cc6f0136763473b40709e91c3efbe6443210911a969e6169/remi-2020.2.5.tar.gz", "yanked": false}], "2020.3.10": [{"comment_text": "", "digests": {"md5": "9084eee658443233d5dc8c0c1d42451d", "sha256": "73e833090298b446dcb4269ce9ab8078a080db235b4d33674a481c88cb4af1cc"}, "downloads": -1, "filename": "remi-2020.3.10-py3-none-any.whl", "has_sig": false, "md5_digest": "9084eee658443233d5dc8c0c1d42451d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 505067, "upload_time": "2020-03-10T14:33:48", "upload_time_iso_8601": "2020-03-10T14:33:48.692725Z", "url": "https://files.pythonhosted.org/packages/08/6f/0b3e2087c813e2810c9c4ceaf941034d37bc3679faffad5a04d6fe0bcfd2/remi-2020.3.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78c47817388224e4327a99cf90e521bd", "sha256": "4cb8eee398502f547b1ea5cf19304ce46bdc537a29b79066fda3e5d05130fdc4"}, "downloads": -1, "filename": "remi-2020.3.10.tar.gz", "has_sig": false, "md5_digest": "78c47817388224e4327a99cf90e521bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 494821, "upload_time": "2020-03-10T14:33:55", "upload_time_iso_8601": "2020-03-10T14:33:55.920023Z", "url": "https://files.pythonhosted.org/packages/0d/18/4aea7a0319f5c923406d5af5096930dde18854b33a07a43836a6f932805b/remi-2020.3.10.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9084eee658443233d5dc8c0c1d42451d", "sha256": "73e833090298b446dcb4269ce9ab8078a080db235b4d33674a481c88cb4af1cc"}, "downloads": -1, "filename": "remi-2020.3.10-py3-none-any.whl", "has_sig": false, "md5_digest": "9084eee658443233d5dc8c0c1d42451d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 505067, "upload_time": "2020-03-10T14:33:48", "upload_time_iso_8601": "2020-03-10T14:33:48.692725Z", "url": "https://files.pythonhosted.org/packages/08/6f/0b3e2087c813e2810c9c4ceaf941034d37bc3679faffad5a04d6fe0bcfd2/remi-2020.3.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78c47817388224e4327a99cf90e521bd", "sha256": "4cb8eee398502f547b1ea5cf19304ce46bdc537a29b79066fda3e5d05130fdc4"}, "downloads": -1, "filename": "remi-2020.3.10.tar.gz", "has_sig": false, "md5_digest": "78c47817388224e4327a99cf90e521bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 494821, "upload_time": "2020-03-10T14:33:55", "upload_time_iso_8601": "2020-03-10T14:33:55.920023Z", "url": "https://files.pythonhosted.org/packages/0d/18/4aea7a0319f5c923406d5af5096930dde18854b33a07a43836a6f932805b/remi-2020.3.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:55 2020"}