{"info": {"author": "Tom\u00e1\u0161 Gaven\u010diak", "author_email": "gavento@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Game Gym\n[![MIT Licence](https://img.shields.io/github/license/gavento/gamegym.svg)](https://github.com/gavento/gamegym/blob/master/LICENCE)\n[![Build Status](https://travis-ci.org/gavento/gamegym.svg?branch=master)](https://travis-ci.org/gavento/gamegym)\n[![PyPI version](https://badge.fury.io/py/gamegym.svg)](https://pypi.org/project/gamegym/)\n[![codecov](https://codecov.io/gh/gavento/gamegym/branch/master/graph/badge.svg)](https://codecov.io/gh/gavento/gamegym)\n[![Coverage Status](https://coveralls.io/repos/github/gavento/gamegym/badge.svg?branch=master)](https://coveralls.io/github/gavento/gamegym?branch=master)\n\nA game theory framework providing a collection of games, common API and a several game-theoretic algorithms.\n\n**The goal of the project** is to provide tools for buildng complex games (e.g. board games, with partial information or simultaneous moves), computation of approximate strateges and creating artificial intelligence for such games, and to be a base for robust value learning experiments.\n\n*Under active development, looking for ideas and contributors!*\n\n## Overview\n\nAlgorithms:\n\n* Outcome sampling MCCFR Nash equilibrium computation\n* Exact best response and exploitability\n* Approximate best response and exploitablity\n* Sparse SGD value learning (with values linear in known features)\n* Plotting strategy development (see plots for [Matching Pennies](https://gavento.ucw.cz/view/plot_mccfr_trace_pennies_PCA_all.html), [Rock-Paper-Scissors](https://gavento.ucw.cz/view/plot_mccfr_trace_rps_PCA_all.html), [Goofspiel(4)](https://gavento.ucw.cz/view/plot_mccfr_trace_goof4_PCA_all.html))\n\nGames:\n\n* General matrix games (normal form games), Rock-paper-scissors, Matching pennies, Prisoner's dilemma, ...\n* Goofspiel (GOPS)\n* One-card poker, Dice-poker\n\n## Game interface\n\n*For an exploration of API in Rust, see [GTCogs](https://github.com/gavento/gtcogs).*\n\nTo implement game you define one class derived from `gamegym.Game` with the following interface:\n\n```python\nclass MyRockPaperScissor(PartialInformationGame):\n    ACTIONS = (\"rock\", \"paper\", \"scissors\")\n    def __init__(self):\n        # Set thenumber of players and all game actions\n        super().__init__(2, self.ACTIONS)\n\n    def initial_state(self) -> StateInfo:\n        # Return node information, here player 0 is active and has all actions.\n        # Note that in this simple game we do not use any game state.\n        return StateInfo.new_player(state=None, player=0, actions=self.ACTIONS)\n\n    def update_state(self, situation: Situation, action) -> StateInfo:\n        # Return the node information after playing `action` in `situation`.\n        if len(situation.history) == 0:\n            return StateInfo.new_player(state=None, player=1, actions=self.ACTIONS)\n        p1payoff = 1.0 # TODO: compute from `situation`, e.g. from `situation.history`\n        return StateInfo.new_terminal(state=None, payoff=(x, -x))\n\n# Create game instance\ngame = MyRockPaperScissor()\n# Initial situation\ns1 = game.start()\n# Play some actions\ns2 = game.play(s1, \"rock\")\ns3 = s2.play(\"paper\") # alias for game.play(s2, \"paper\")\n# See game result\nassert s3.is_terminal()\nassert s3.payoff == (-1.0, 1.0)\n```\n\nThe available base classes are `PerfectInformationGame` and `PartialInformationGame`\n(with specialised subclasses `ObservationSequenceGame`, `SimultaneousGame` and\n`MatrixGame` - which would be a better fit for Rock-Paper-Scissors).\n\nThe main auxiliary structs common to all games are `StateInfo` that contains the information\nabout the game node itself, and `Situation` which additionally contains game history,\naccumulated payoffs, the game itself etc.\n\n*Game state* is any structure the game uses to keep track of the actual game state, e.g. cards in all hands, game board state, map, ... This is not generally visible to players in partial information game, any *observations* are passed with `observations=(p0_obs, p1_obs, public_obs)` to `StateInfo`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gavento/gamegym", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gamegym", "package_url": "https://pypi.org/project/gamegym/", "platform": "", "project_url": "https://pypi.org/project/gamegym/", "project_urls": {"Homepage": "https://github.com/gavento/gamegym"}, "release_url": "https://pypi.org/project/gamegym/0.2.0/", "requires_dist": ["numpy (>=1.15)", "attrs (>=18.0)", "tqdm (>=4.28)", "codecov ; extra == 'dev'", "coverage (>=4.0) ; extra == 'dev'", "coveralls ; extra == 'dev'", "flake8 (>=3.0) ; extra == 'dev'", "pylint (>=2.0) ; extra == 'dev'", "pytest-benchmark (>=3.0) ; extra == 'dev'", "pytest (>=4.0) ; extra == 'dev'", "tox-travis ; extra == 'dev'", "tox ; extra == 'dev'", "yapf ; extra == 'dev'"], "requires_python": "", "summary": "Game theory framework, algorithms and game implementations", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Game Gym</h1>\n<p><a href=\"https://github.com/gavento/gamegym/blob/master/LICENCE\" rel=\"nofollow\"><img alt=\"MIT Licence\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db85c6d11e3b5228321f0a5d3f215ff50d004903/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f676176656e746f2f67616d6567796d2e737667\"></a>\n<a href=\"https://travis-ci.org/gavento/gamegym\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f954140be9ee541f9153369c9659e5d4b71408a9/68747470733a2f2f7472617669732d63692e6f72672f676176656e746f2f67616d6567796d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/gamegym/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/405a1f017da762fbb3e23ca49b56069b5a615c96/68747470733a2f2f62616467652e667572792e696f2f70792f67616d6567796d2e737667\"></a>\n<a href=\"https://codecov.io/gh/gavento/gamegym\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46c32e3f85cf525efce0ed402e08ed59b66c6f8e/68747470733a2f2f636f6465636f762e696f2f67682f676176656e746f2f67616d6567796d2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://coveralls.io/github/gavento/gamegym?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b175a207a68d537f99ad85ea3e7f4ad3a5ddfd88/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f676176656e746f2f67616d6567796d2f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>A game theory framework providing a collection of games, common API and a several game-theoretic algorithms.</p>\n<p><strong>The goal of the project</strong> is to provide tools for buildng complex games (e.g. board games, with partial information or simultaneous moves), computation of approximate strateges and creating artificial intelligence for such games, and to be a base for robust value learning experiments.</p>\n<p><em>Under active development, looking for ideas and contributors!</em></p>\n<h2>Overview</h2>\n<p>Algorithms:</p>\n<ul>\n<li>Outcome sampling MCCFR Nash equilibrium computation</li>\n<li>Exact best response and exploitability</li>\n<li>Approximate best response and exploitablity</li>\n<li>Sparse SGD value learning (with values linear in known features)</li>\n<li>Plotting strategy development (see plots for <a href=\"https://gavento.ucw.cz/view/plot_mccfr_trace_pennies_PCA_all.html\" rel=\"nofollow\">Matching Pennies</a>, <a href=\"https://gavento.ucw.cz/view/plot_mccfr_trace_rps_PCA_all.html\" rel=\"nofollow\">Rock-Paper-Scissors</a>, <a href=\"https://gavento.ucw.cz/view/plot_mccfr_trace_goof4_PCA_all.html\" rel=\"nofollow\">Goofspiel(4)</a>)</li>\n</ul>\n<p>Games:</p>\n<ul>\n<li>General matrix games (normal form games), Rock-paper-scissors, Matching pennies, Prisoner's dilemma, ...</li>\n<li>Goofspiel (GOPS)</li>\n<li>One-card poker, Dice-poker</li>\n</ul>\n<h2>Game interface</h2>\n<p><em>For an exploration of API in Rust, see <a href=\"https://github.com/gavento/gtcogs\" rel=\"nofollow\">GTCogs</a>.</em></p>\n<p>To implement game you define one class derived from <code>gamegym.Game</code> with the following interface:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyRockPaperScissor</span><span class=\"p\">(</span><span class=\"n\">PartialInformationGame</span><span class=\"p\">):</span>\n    <span class=\"n\">ACTIONS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"rock\"</span><span class=\"p\">,</span> <span class=\"s2\">\"paper\"</span><span class=\"p\">,</span> <span class=\"s2\">\"scissors\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Set thenumber of players and all game actions</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ACTIONS</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">initial_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">StateInfo</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Return node information, here player 0 is active and has all actions.</span>\n        <span class=\"c1\"># Note that in this simple game we do not use any game state.</span>\n        <span class=\"k\">return</span> <span class=\"n\">StateInfo</span><span class=\"o\">.</span><span class=\"n\">new_player</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ACTIONS</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">situation</span><span class=\"p\">:</span> <span class=\"n\">Situation</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">StateInfo</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Return the node information after playing `action` in `situation`.</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">situation</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">StateInfo</span><span class=\"o\">.</span><span class=\"n\">new_player</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ACTIONS</span><span class=\"p\">)</span>\n        <span class=\"n\">p1payoff</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"c1\"># TODO: compute from `situation`, e.g. from `situation.history`</span>\n        <span class=\"k\">return</span> <span class=\"n\">StateInfo</span><span class=\"o\">.</span><span class=\"n\">new_terminal</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">payoff</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Create game instance</span>\n<span class=\"n\">game</span> <span class=\"o\">=</span> <span class=\"n\">MyRockPaperScissor</span><span class=\"p\">()</span>\n<span class=\"c1\"># Initial situation</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># Play some actions</span>\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"s2\">\"rock\"</span><span class=\"p\">)</span>\n<span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"s2\">\"paper\"</span><span class=\"p\">)</span> <span class=\"c1\"># alias for game.play(s2, \"paper\")</span>\n<span class=\"c1\"># See game result</span>\n<span class=\"k\">assert</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"n\">is_terminal</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"n\">payoff</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n</pre>\n<p>The available base classes are <code>PerfectInformationGame</code> and <code>PartialInformationGame</code>\n(with specialised subclasses <code>ObservationSequenceGame</code>, <code>SimultaneousGame</code> and\n<code>MatrixGame</code> - which would be a better fit for Rock-Paper-Scissors).</p>\n<p>The main auxiliary structs common to all games are <code>StateInfo</code> that contains the information\nabout the game node itself, and <code>Situation</code> which additionally contains game history,\naccumulated payoffs, the game itself etc.</p>\n<p><em>Game state</em> is any structure the game uses to keep track of the actual game state, e.g. cards in all hands, game board state, map, ... This is not generally visible to players in partial information game, any <em>observations</em> are passed with <code>observations=(p0_obs, p1_obs, public_obs)</code> to <code>StateInfo</code>.</p>\n\n          </div>"}, "last_serial": 4749922, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e0dfb7a71544e5b6da4bffafdcdff4d8", "sha256": "3162377d671e68461014988f2835f9a250a9590897a861d39f4995ed9f14b181"}, "downloads": -1, "filename": "gamegym-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e0dfb7a71544e5b6da4bffafdcdff4d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10404, "upload_time": "2018-10-13T11:34:20", "upload_time_iso_8601": "2018-10-13T11:34:20.865713Z", "url": "https://files.pythonhosted.org/packages/c5/b7/c3884fb169cfaabc72083eb75ca4efcaed55b50c87eec09e4edb558ba388/gamegym-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d45a1e842e4434733e04d38fed57a840", "sha256": "9cbc9761a7c7878699bef5acccbaae07af802bf8ed53fa766df8e1173cfa7aaa"}, "downloads": -1, "filename": "gamegym-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d45a1e842e4434733e04d38fed57a840", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8126, "upload_time": "2018-10-13T11:34:22", "upload_time_iso_8601": "2018-10-13T11:34:22.273665Z", "url": "https://files.pythonhosted.org/packages/26/40/8bebc81f0f690844206ab716e5bbfde7be3d8ea9052bf0d6073b27b0aa11/gamegym-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d332c13589cf38bb0b0306167fc7a12c", "sha256": "ca8dd9be1cb5d25ca4d9c617eba3714e932233187b565d6194151d94aa102f41"}, "downloads": -1, "filename": "gamegym-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d332c13589cf38bb0b0306167fc7a12c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10592, "upload_time": "2018-10-13T12:24:27", "upload_time_iso_8601": "2018-10-13T12:24:27.036295Z", "url": "https://files.pythonhosted.org/packages/8f/48/2921ca272cc288c68b87f0e6984ba834825660a2245ff638f733a818b114/gamegym-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e35715111c907a85818462eebef19ab0", "sha256": "14c5c41d045ea9dfa87e18dc5d840aa3531ad5d9b5ad8c0f230a87d422043c69"}, "downloads": -1, "filename": "gamegym-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e35715111c907a85818462eebef19ab0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8588, "upload_time": "2018-10-13T12:24:28", "upload_time_iso_8601": "2018-10-13T12:24:28.468124Z", "url": "https://files.pythonhosted.org/packages/0f/ac/90b7fa67c8e5dfc0fb819d12b2350225a3233e620dd965fc0b6f612e2036/gamegym-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "4e46aaa2298f773772514781f34377ee", "sha256": "d0e0b8309a2ea8534c2a8b9f624b77b9cc61a9e846525a2838e284e7fdb38672"}, "downloads": -1, "filename": "gamegym-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4e46aaa2298f773772514781f34377ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9465, "upload_time": "2018-12-16T10:09:32", "upload_time_iso_8601": "2018-12-16T10:09:32.142232Z", "url": "https://files.pythonhosted.org/packages/94/f8/ebc445726414cccf4d181ac923fcdbc839e510d16a6c4de9de3605a2843e/gamegym-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd23adeeeb6c052dc276a1867b33e368", "sha256": "8da8ad9f546c35c642a23076a4b072d999798a73bcaf6a2541a3544261540f5f"}, "downloads": -1, "filename": "gamegym-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dd23adeeeb6c052dc276a1867b33e368", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7250, "upload_time": "2018-12-16T10:09:33", "upload_time_iso_8601": "2018-12-16T10:09:33.861514Z", "url": "https://files.pythonhosted.org/packages/44/d3/dfc112fb287e1302e12730baf2b21b0f4f5f473046795f3b63bc46904bea/gamegym-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6e2b837c3d5ff89e6178400f6e03d3ad", "sha256": "3d3fa354eb790a67aefd2b30d57aec7e44d6b6e74989cd53ecaeb339a453c922"}, "downloads": -1, "filename": "gamegym-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6e2b837c3d5ff89e6178400f6e03d3ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9648, "upload_time": "2018-12-16T16:24:54", "upload_time_iso_8601": "2018-12-16T16:24:54.552686Z", "url": "https://files.pythonhosted.org/packages/22/44/c3a76b23409d66aba5b14b2e74941d22ad04615900003fa56ae70a0a7cfb/gamegym-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdbc3c0361eacc86a1fc4fc6c0d3e133", "sha256": "34f2ab844ad76ca84e7391df6c8d2833206e33db3d0afbfb2ddea763dd20d893"}, "downloads": -1, "filename": "gamegym-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bdbc3c0361eacc86a1fc4fc6c0d3e133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7521, "upload_time": "2018-12-16T16:24:56", "upload_time_iso_8601": "2018-12-16T16:24:56.429402Z", "url": "https://files.pythonhosted.org/packages/ba/27/668566eb3e57a7d8fb1092f9ecd7307b18df750daa18396a188556d7a724/gamegym-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "45516f146cd22b4107e60a311da98195", "sha256": "027974c6da14ed480ca917f9740fdc1fad93961a5c07024bc10f12086fd0496c"}, "downloads": -1, "filename": "gamegym-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "45516f146cd22b4107e60a311da98195", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 45056, "upload_time": "2019-01-20T19:41:03", "upload_time_iso_8601": "2019-01-20T19:41:03.682189Z", "url": "https://files.pythonhosted.org/packages/8c/81/bfc37fa27a6615ff9ac8467fe76cb124326b40b0d19fc08d75d699bb7648/gamegym-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e209cabff5e6fb4619eef9fafd04f670", "sha256": "fdc5f7fa9802845f8d565d1e0ef271b646f7548a5c8c806b3cc69c68a556fe4b"}, "downloads": -1, "filename": "gamegym-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e209cabff5e6fb4619eef9fafd04f670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33236, "upload_time": "2019-01-20T19:41:05", "upload_time_iso_8601": "2019-01-20T19:41:05.915571Z", "url": "https://files.pythonhosted.org/packages/40/fa/17b0ce2415b1f6091e5130dfed6e8a60ac12e2a0c0fb81adcac2e67a50b4/gamegym-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d78659622a7d0cd4f5928648624713f1", "sha256": "ec9490d03db6c356d7fc4e32a98b41fb7d1cdc142383924ca6957594775478f7"}, "downloads": -1, "filename": "gamegym-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d78659622a7d0cd4f5928648624713f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38231, "upload_time": "2019-01-28T12:07:14", "upload_time_iso_8601": "2019-01-28T12:07:14.118652Z", "url": "https://files.pythonhosted.org/packages/3f/c3/7a4844008bf23c770fa97e1e3547a05d976f585c66de44a88d619024f9e3/gamegym-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66c83bafc12860a8e77d0af68be1048a", "sha256": "06079252e34d0b0a2f58551b6cd3130edb3c46b837837f346f8d1fa77b3cb075"}, "downloads": -1, "filename": "gamegym-0.2.0.tar.gz", "has_sig": false, "md5_digest": "66c83bafc12860a8e77d0af68be1048a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29423, "upload_time": "2019-01-28T12:07:15", "upload_time_iso_8601": "2019-01-28T12:07:15.354034Z", "url": "https://files.pythonhosted.org/packages/62/be/f89649596f05565066a48febf0f1f00e907d9aa9521b5c0b8fe7c6fc03ba/gamegym-0.2.0.tar.gz", "yanked": false}], "0.2.0rc0": [{"comment_text": "", "digests": {"md5": "ca402a23c06ed96a088f912af640b24d", "sha256": "bbccf371d97d7b6a04b61ea96c605fd81a06b0dcf318cfa3b2dd9f95adf90368"}, "downloads": -1, "filename": "gamegym-0.2.0rc0-py3-none-any.whl", "has_sig": false, "md5_digest": "ca402a23c06ed96a088f912af640b24d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38259, "upload_time": "2019-01-28T11:54:08", "upload_time_iso_8601": "2019-01-28T11:54:08.969763Z", "url": "https://files.pythonhosted.org/packages/89/3d/f02a488d8c250d0a5e03f9592948be7d167e7fdec03a0ec2b67ae626d5fc/gamegym-0.2.0rc0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ee6c4c612e15532817d70fda4c0297c", "sha256": "94ed609048d4e5391f113bfdb0f8238a21d2b1d77be721bed6ea9f301d856b71"}, "downloads": -1, "filename": "gamegym-0.2.0rc0.tar.gz", "has_sig": false, "md5_digest": "7ee6c4c612e15532817d70fda4c0297c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29411, "upload_time": "2019-01-28T11:54:10", "upload_time_iso_8601": "2019-01-28T11:54:10.084665Z", "url": "https://files.pythonhosted.org/packages/c8/29/3fb03af850478236f5b4776c077fc7239adf5f1e3039c332d7a7b6042655/gamegym-0.2.0rc0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d78659622a7d0cd4f5928648624713f1", "sha256": "ec9490d03db6c356d7fc4e32a98b41fb7d1cdc142383924ca6957594775478f7"}, "downloads": -1, "filename": "gamegym-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d78659622a7d0cd4f5928648624713f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38231, "upload_time": "2019-01-28T12:07:14", "upload_time_iso_8601": "2019-01-28T12:07:14.118652Z", "url": "https://files.pythonhosted.org/packages/3f/c3/7a4844008bf23c770fa97e1e3547a05d976f585c66de44a88d619024f9e3/gamegym-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66c83bafc12860a8e77d0af68be1048a", "sha256": "06079252e34d0b0a2f58551b6cd3130edb3c46b837837f346f8d1fa77b3cb075"}, "downloads": -1, "filename": "gamegym-0.2.0.tar.gz", "has_sig": false, "md5_digest": "66c83bafc12860a8e77d0af68be1048a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29423, "upload_time": "2019-01-28T12:07:15", "upload_time_iso_8601": "2019-01-28T12:07:15.354034Z", "url": "https://files.pythonhosted.org/packages/62/be/f89649596f05565066a48febf0f1f00e907d9aa9521b5c0b8fe7c6fc03ba/gamegym-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:14 2020"}