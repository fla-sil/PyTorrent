{"info": {"author": "tburns", "author_email": "tyler.tj.burns@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# runandcliscaffold\nLightweight library for use of defining functions and parameters that can be called from CLI or from other functions\n\nClasses can now be defined in a simpler format that focus on business logic while enabling content for CLI running OR being called as a script\n\nFor example, a class definition:\n\n    from runandcliscaffold import RunAndCliScaffold\n\n    class fakeImplementation(RunAndCliScaffold):\n        def __init__(self):\n            super().__init__(\"TESTING\")\n\n        def hello(self, args):\n            ret = f\"{args.greeting}, {args.name}!\"\n            print(ret)\n            return ret\n\n        def goodbye(self, args):\n            ret = f\"{args.greeting}, {args.name}!\"\n            print(ret)\n            return ret\n\n        def _defineFunctionsWithArgs(self):\n            return {self.hello: [{\"short\": \"n\", \"long\": \"name\", \"default\": \"Tj\", \"type\": str,\n                                 \"help\": \"test1: beginning of data collection time period\"},\n                                {\"short\": \"g\", \"long\": \"greeting\", \"default\": \"Hello\", \"type\": str, \"required\": False,\n                                 \"help\": \"greeting to use\"}\n                            ],\n                    self.goodbye: [{\"short\": \"n\", \"long\": \"name\", \"default\": \"Tj\", \"type\": str,\n                               \"help\": \"test1: beginning of data collection time period\"},\n                              {\"short\": \"g\", \"long\": \"greeting\", \"default\": \"Goodbye\", \"type\": str, \"required\": False,\n                               \"help\": \"greeting to use\"}\n                              ],\n            }\n\n\ncan be called through command line:\n\n    python myscript.py hello -n Mark -g Wassup\nand returns:\n\n    Wassup, Mark!\n\nthe equivelant call from script:\n\n    testclass = fakeImplementation()\n    ret = testclass.run(['hello', '--g', 'Wassup', '--n', 'Mark'])\n\nalso returns the value:\n\n    Wassup, Mark \n\nWhile enabling an app to be run out as CLI, this also has usage as a test mechanism or as a self contained unit for consumption of other scripts.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tylertjburns/runandcliscaffold", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "runandcliscaffold", "package_url": "https://pypi.org/project/runandcliscaffold/", "platform": "", "project_url": "https://pypi.org/project/runandcliscaffold/", "project_urls": {"Homepage": "https://github.com/tylertjburns/runandcliscaffold"}, "release_url": "https://pypi.org/project/runandcliscaffold/0.2/", "requires_dist": null, "requires_python": ">3.5", "summary": "Lightweight library for use of defining functions and parameters that can be called from CLI or from other functions", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>runandcliscaffold</h1>\n<p>Lightweight library for use of defining functions and parameters that can be called from CLI or from other functions</p>\n<p>Classes can now be defined in a simpler format that focus on business logic while enabling content for CLI running OR being called as a script</p>\n<p>For example, a class definition:</p>\n<pre><code>from runandcliscaffold import RunAndCliScaffold\n\nclass fakeImplementation(RunAndCliScaffold):\n    def __init__(self):\n        super().__init__(\"TESTING\")\n\n    def hello(self, args):\n        ret = f\"{args.greeting}, {args.name}!\"\n        print(ret)\n        return ret\n\n    def goodbye(self, args):\n        ret = f\"{args.greeting}, {args.name}!\"\n        print(ret)\n        return ret\n\n    def _defineFunctionsWithArgs(self):\n        return {self.hello: [{\"short\": \"n\", \"long\": \"name\", \"default\": \"Tj\", \"type\": str,\n                             \"help\": \"test1: beginning of data collection time period\"},\n                            {\"short\": \"g\", \"long\": \"greeting\", \"default\": \"Hello\", \"type\": str, \"required\": False,\n                             \"help\": \"greeting to use\"}\n                        ],\n                self.goodbye: [{\"short\": \"n\", \"long\": \"name\", \"default\": \"Tj\", \"type\": str,\n                           \"help\": \"test1: beginning of data collection time period\"},\n                          {\"short\": \"g\", \"long\": \"greeting\", \"default\": \"Goodbye\", \"type\": str, \"required\": False,\n                           \"help\": \"greeting to use\"}\n                          ],\n        }\n</code></pre>\n<p>can be called through command line:</p>\n<pre><code>python myscript.py hello -n Mark -g Wassup\n</code></pre>\n<p>and returns:</p>\n<pre><code>Wassup, Mark!\n</code></pre>\n<p>the equivelant call from script:</p>\n<pre><code>testclass = fakeImplementation()\nret = testclass.run(['hello', '--g', 'Wassup', '--n', 'Mark'])\n</code></pre>\n<p>also returns the value:</p>\n<pre><code>Wassup, Mark \n</code></pre>\n<p>While enabling an app to be run out as CLI, this also has usage as a test mechanism or as a self contained unit for consumption of other scripts.</p>\n\n          </div>"}, "last_serial": 6671469, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "09f996b703d9afdcc2c3e2dbc90ed98e", "sha256": "6d2fe330ab02b7f8e262d38b21f70e77d9f475b5b8b0216857566401c4a0ac17"}, "downloads": -1, "filename": "runandcliscaffold-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "09f996b703d9afdcc2c3e2dbc90ed98e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 3438, "upload_time": "2020-02-17T21:30:12", "upload_time_iso_8601": "2020-02-17T21:30:12.034998Z", "url": "https://files.pythonhosted.org/packages/e5/88/61fda691da89d6e59dd1e71bae7ec47d8c2213f039832a8510368a4a2d88/runandcliscaffold-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "606f8878a0b676f7de3b7cd888ac6f12", "sha256": "5feba1e801deb32417d03e6943ab7db5ce3c77e2b14256d43d97920c4e211e5a"}, "downloads": -1, "filename": "runandcliscaffold-0.1.tar.gz", "has_sig": false, "md5_digest": "606f8878a0b676f7de3b7cd888ac6f12", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 2039, "upload_time": "2020-02-17T21:30:14", "upload_time_iso_8601": "2020-02-17T21:30:14.257472Z", "url": "https://files.pythonhosted.org/packages/db/38/c98b5844cf767fcea2ecf415e19592dff392915ff77ede430bccfc2b9a46/runandcliscaffold-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "526b73f5dbc1e9f06cec3bb464b939d3", "sha256": "64e0d83d07482d9cb7325ba50f17165bda87651db058476b84db5078ee785742"}, "downloads": -1, "filename": "runandcliscaffold-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "526b73f5dbc1e9f06cec3bb464b939d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 4086, "upload_time": "2020-02-20T23:28:43", "upload_time_iso_8601": "2020-02-20T23:28:43.198086Z", "url": "https://files.pythonhosted.org/packages/96/5f/d7f923693e0115889a6f611dd74dec35f0a13db773a9423073b9a34d8bfe/runandcliscaffold-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a24bc55617708f1d1c9a7fc9b70490e", "sha256": "22220e9ceb6f8212cb5376977a151573ff8e2cfc1bd81636e507ebd768554f6f"}, "downloads": -1, "filename": "runandcliscaffold-0.2.tar.gz", "has_sig": false, "md5_digest": "2a24bc55617708f1d1c9a7fc9b70490e", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 2845, "upload_time": "2020-02-20T23:28:44", "upload_time_iso_8601": "2020-02-20T23:28:44.647215Z", "url": "https://files.pythonhosted.org/packages/db/b0/b0718fac56616386221871ce5c2f537c26e99be250def41919a1a484070d/runandcliscaffold-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "526b73f5dbc1e9f06cec3bb464b939d3", "sha256": "64e0d83d07482d9cb7325ba50f17165bda87651db058476b84db5078ee785742"}, "downloads": -1, "filename": "runandcliscaffold-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "526b73f5dbc1e9f06cec3bb464b939d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 4086, "upload_time": "2020-02-20T23:28:43", "upload_time_iso_8601": "2020-02-20T23:28:43.198086Z", "url": "https://files.pythonhosted.org/packages/96/5f/d7f923693e0115889a6f611dd74dec35f0a13db773a9423073b9a34d8bfe/runandcliscaffold-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a24bc55617708f1d1c9a7fc9b70490e", "sha256": "22220e9ceb6f8212cb5376977a151573ff8e2cfc1bd81636e507ebd768554f6f"}, "downloads": -1, "filename": "runandcliscaffold-0.2.tar.gz", "has_sig": false, "md5_digest": "2a24bc55617708f1d1c9a7fc9b70490e", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 2845, "upload_time": "2020-02-20T23:28:44", "upload_time_iso_8601": "2020-02-20T23:28:44.647215Z", "url": "https://files.pythonhosted.org/packages/db/b0/b0718fac56616386221871ce5c2f537c26e99be250def41919a1a484070d/runandcliscaffold-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:04 2020"}