{"info": {"author": "Marian Steinbach", "author_email": "marian@sendung.de", "bugtrack_url": null, "classifiers": [], "description": "dwd-weather\n===========\n\nPython client to access DWD weather data (Germany)\n\nInstall\n~~~~~~~\n\n::\n\n    pip install dwdweather\n\nQuick reference (Python module)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from dwdweather import DwdWeather\n    from datetime import datetime\n\n    # create client\n    dw = DwdWeather()\n\n    # Find closest station to position\n    closest = dw.nearest_station(lon=7, lat=51)\n\n    # The hour you're interested in.\n    # The example is 2014-03-22 12:00 (UTC).\n    query_hour = datetime(2014, 3, 22, 12)\n\n    result = dw.query(station_id=closest[\"station_id\"], hour=query_hour)\n    print result\n\n``DwdWeather.query()`` returns a dict with the following keys:\n\n-  ``station_id``: Station identifier, as int.\n-  ``datetime``: The hour as int, e.g. ``2013011212``.\n-  ``precipitation_fallen``: Whether or not there has been precipitation\n   within the hour, as int. 0 for no, 1 for yes.\n-  ``precipitation_form``: TODO\n-  ``precipitation_height``: Height of hourly precipitation in mm, as\n   float.\n-  ``precipitation_quality_level``: Data quality level, as int.\n-  ``soiltemp_1_depth``: first soil temperature measurement, depth in\n   meters, as float.\n-  ``soiltemp_1_temperature``: first soil temperature measurement,\n   temperature in degrees centigrade, as float.\n-  ``soiltemp_2_depth``: second soil temperature measurement, depth in\n   meters, as float.\n-  ``soiltemp_2_temperature``: second soil temperature measurement,\n   temperature in degrees centigrade, as float.\n-  ``soiltemp_3_depth``: third soil temperature measurement, depth in\n   meters, as float.\n-  ``soiltemp_3_temperature``: third soil temperature measurement,\n   temperature in degrees centigrade, as float.\n-  ``soiltemp_4_depth``: fourth soil temperature measurement, depth in\n   meters, as float.\n-  ``soiltemp_4_temperature``: fourth soil temperature measurement,\n   temperature in degrees centigrade, as float.\n-  ``soiltemp_5_depth``: fifth soil temperature measurement, depth in\n   meters, as float.\n-  ``soiltemp_5_temperature``: fifth soil temperature measurement,\n   temperature in degrees centigrade, as float.\n-  ``soiltemp_quality_level``: soil temperature quality level, as int.\n-  ``solar_quality_level``: quality level of solar data, as int.\n-  ``solar_duration``: sunshine duration in minutes, as int.\n-  ``solar_sky``: TODO\n-  ``solar_global``: TODO\n-  ``solar_atmosphere``: TODO\n-  ``solar_zenith``: TODO\n-  ``sun_duration``: Duration of sunshine per hour in minutes, as float.\n-  ``sun_quality_level``: quality level of sunshine data, as int.\n-  ``sun_structure_version``: version number, as int.\n-  ``temphum_humidity``: relative air humidity in percent, as float.\n-  ``temphum_quality_level``: data quality level of air temperature and\n   humidity data, as int.\n-  ``temphum_structure_version``: version number, as int.\n-  ``temphum_temperature``: air temperature in degrees centigrade, as\n   float.\n-  ``wind_direction``: wind direction in degrees, as int (0 - 360).\n-  ``wind_quality_level``: wind data quality level, as int.\n-  ``wind_speed``: wind speed in meters per second, as float.\n-  ``wind_structure_version``: version number, as int.\n\nCommand line utility:\n~~~~~~~~~~~~~~~~~~~~~\n\nGet closest station (first argument is longitude, second is latitude):\n\n::\n\n    $ dwdweather station 7.0 51.0\n\nGet all stations:\n\n::\n\n    $ dwdweather stations\n\nExport stations as CSV:\n\n::\n\n    $ dwdweather stations -t csv -f stations.csv\n\nExport stations as GeoJSON:\n\n::\n\n    $ dwdweather stations -t geojson -f stations.geojson\n\nGet weather at station for certain hour (UTC):\n\n::\n\n    $ dwdweather weather 2667 2014060122\n\nSome notes\n~~~~~~~~~~\n\n-  Data is cached in a local sqlite3 database for fast queries.\n-  The Stations cache is filled upon first request to\n   ``DwdWeather.stations()`` or ``DwdWeather.nearest_station()``\n-  The Stations cache will not be refreshed automatically. Use\n   ``DwdWeather.import_stations()`` to do this.\n-  The Measures cache is filled upon first access to measures using\n   ``DwdWeather.query()`` and updated whenever a query cannot be\n   fullfilled from the cache.\n-  The cache by default resides in ``~/.dwd-weather`` directory. This\n   can be influenced using the ``cachepath`` argument of\n   ``DwdWeather()``.\n-  The amount of data can be ~60 MB per station for full historic extend\n   and this will of course grow in the future.\n-  If weather data is queried and the query can't be fullfilled from the\n   cache, data is loaded from the server at every query. Even if the\n   data has been updated a second before. If the server doesn't have\n   data for the requested time (e.g. since it's not yet available), this\n   causes superfluous network traffic and wait time. Certainly space for\n   improvement here.\n\nStatus\n~~~~~~\n\nThis piece of software is in a very early stage. No test cases yet. Only\nused unter Python 2.7.5. Use at your own risk.\n\nLicense (Code)\n~~~~~~~~~~~~~~\n\nLicensed under the MTI license. See file LICENSE for details.\n\nData license\n~~~~~~~~~~~~\n\nThe DWD has information about their re-use policy in\n`German <http://www.dwd.de/bvbw/appmanager/bvbw/dwdwwwDesktop?_nfpb=true&_windowLabel=dwdwww_main_book&T26001030691160718267804gsbDocumentPath=Content%2FOeffentlichkeit%2FWV%2FWVDS%2FDatenanforderungen%2FDatenbezug%2Fteaser__grundversorgung.html&switchLang=de&_pageLabel=_dwdwww_spezielle_nutzer_metdienstleister_datenbezug>`__\nand\n`English <http://www.dwd.de/bvbw/appmanager/bvbw/dwdwwwDesktop?_nfpb=true&_windowLabel=dwdwww_main_book&T26001030691160718267804gsbDocumentPath=Content%2FOeffentlichkeit%2FWV%2FWVDS%2FDatenanforderungen%2FDatenbezug%2Fteaser__grundversorgung.html&switchLang=en&_pageLabel=_dwdwww_spezielle_nutzer_metdienstleister_datenbezug>`__.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/marians/dwd-weather", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "dwdweather", "package_url": "https://pypi.org/project/dwdweather/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dwdweather/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/marians/dwd-weather"}, "release_url": "https://pypi.org/project/dwdweather/0.7/", "requires_dist": null, "requires_python": null, "summary": "Inofficial DWD weather data client (Deutscher Wetterdienst)", "version": "0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python client to access DWD weather data (Germany)</p>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install dwdweather\n</pre>\n</div>\n<div id=\"quick-reference-python-module\">\n<h2>Quick reference (Python module)</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dwdweather</span> <span class=\"kn\">import</span> <span class=\"n\">DwdWeather</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"c1\"># create client</span>\n<span class=\"n\">dw</span> <span class=\"o\">=</span> <span class=\"n\">DwdWeather</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Find closest station to position</span>\n<span class=\"n\">closest</span> <span class=\"o\">=</span> <span class=\"n\">dw</span><span class=\"o\">.</span><span class=\"n\">nearest_station</span><span class=\"p\">(</span><span class=\"n\">lon</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"mi\">51</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The hour you're interested in.</span>\n<span class=\"c1\"># The example is 2014-03-22 12:00 (UTC).</span>\n<span class=\"n\">query_hour</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2014</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">dw</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">station_id</span><span class=\"o\">=</span><span class=\"n\">closest</span><span class=\"p\">[</span><span class=\"s2\">\"station_id\"</span><span class=\"p\">],</span> <span class=\"n\">hour</span><span class=\"o\">=</span><span class=\"n\">query_hour</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">result</span>\n</pre>\n<p><tt>DwdWeather.query()</tt> returns a dict with the following keys:</p>\n<ul>\n<li><tt>station_id</tt>: Station identifier, as int.</li>\n<li><tt>datetime</tt>: The hour as int, e.g. <tt>2013011212</tt>.</li>\n<li><tt>precipitation_fallen</tt>: Whether or not there has been precipitation\nwithin the hour, as int. 0 for no, 1 for yes.</li>\n<li><tt>precipitation_form</tt>: TODO</li>\n<li><tt>precipitation_height</tt>: Height of hourly precipitation in mm, as\nfloat.</li>\n<li><tt>precipitation_quality_level</tt>: Data quality level, as int.</li>\n<li><tt>soiltemp_1_depth</tt>: first soil temperature measurement, depth in\nmeters, as float.</li>\n<li><tt>soiltemp_1_temperature</tt>: first soil temperature measurement,\ntemperature in degrees centigrade, as float.</li>\n<li><tt>soiltemp_2_depth</tt>: second soil temperature measurement, depth in\nmeters, as float.</li>\n<li><tt>soiltemp_2_temperature</tt>: second soil temperature measurement,\ntemperature in degrees centigrade, as float.</li>\n<li><tt>soiltemp_3_depth</tt>: third soil temperature measurement, depth in\nmeters, as float.</li>\n<li><tt>soiltemp_3_temperature</tt>: third soil temperature measurement,\ntemperature in degrees centigrade, as float.</li>\n<li><tt>soiltemp_4_depth</tt>: fourth soil temperature measurement, depth in\nmeters, as float.</li>\n<li><tt>soiltemp_4_temperature</tt>: fourth soil temperature measurement,\ntemperature in degrees centigrade, as float.</li>\n<li><tt>soiltemp_5_depth</tt>: fifth soil temperature measurement, depth in\nmeters, as float.</li>\n<li><tt>soiltemp_5_temperature</tt>: fifth soil temperature measurement,\ntemperature in degrees centigrade, as float.</li>\n<li><tt>soiltemp_quality_level</tt>: soil temperature quality level, as int.</li>\n<li><tt>solar_quality_level</tt>: quality level of solar data, as int.</li>\n<li><tt>solar_duration</tt>: sunshine duration in minutes, as int.</li>\n<li><tt>solar_sky</tt>: TODO</li>\n<li><tt>solar_global</tt>: TODO</li>\n<li><tt>solar_atmosphere</tt>: TODO</li>\n<li><tt>solar_zenith</tt>: TODO</li>\n<li><tt>sun_duration</tt>: Duration of sunshine per hour in minutes, as float.</li>\n<li><tt>sun_quality_level</tt>: quality level of sunshine data, as int.</li>\n<li><tt>sun_structure_version</tt>: version number, as int.</li>\n<li><tt>temphum_humidity</tt>: relative air humidity in percent, as float.</li>\n<li><tt>temphum_quality_level</tt>: data quality level of air temperature and\nhumidity data, as int.</li>\n<li><tt>temphum_structure_version</tt>: version number, as int.</li>\n<li><tt>temphum_temperature</tt>: air temperature in degrees centigrade, as\nfloat.</li>\n<li><tt>wind_direction</tt>: wind direction in degrees, as int (0 - 360).</li>\n<li><tt>wind_quality_level</tt>: wind data quality level, as int.</li>\n<li><tt>wind_speed</tt>: wind speed in meters per second, as float.</li>\n<li><tt>wind_structure_version</tt>: version number, as int.</li>\n</ul>\n</div>\n<div id=\"command-line-utility\">\n<h2>Command line utility:</h2>\n<p>Get closest station (first argument is longitude, second is latitude):</p>\n<pre>$ dwdweather station 7.0 51.0\n</pre>\n<p>Get all stations:</p>\n<pre>$ dwdweather stations\n</pre>\n<p>Export stations as CSV:</p>\n<pre>$ dwdweather stations -t csv -f stations.csv\n</pre>\n<p>Export stations as GeoJSON:</p>\n<pre>$ dwdweather stations -t geojson -f stations.geojson\n</pre>\n<p>Get weather at station for certain hour (UTC):</p>\n<pre>$ dwdweather weather 2667 2014060122\n</pre>\n</div>\n<div id=\"some-notes\">\n<h2>Some notes</h2>\n<ul>\n<li>Data is cached in a local sqlite3 database for fast queries.</li>\n<li>The Stations cache is filled upon first request to\n<tt>DwdWeather.stations()</tt> or <tt>DwdWeather.nearest_station()</tt></li>\n<li>The Stations cache will not be refreshed automatically. Use\n<tt>DwdWeather.import_stations()</tt> to do this.</li>\n<li>The Measures cache is filled upon first access to measures using\n<tt>DwdWeather.query()</tt> and updated whenever a query cannot be\nfullfilled from the cache.</li>\n<li>The cache by default resides in <tt><span class=\"pre\">~/.dwd-weather</span></tt> directory. This\ncan be influenced using the <tt>cachepath</tt> argument of\n<tt>DwdWeather()</tt>.</li>\n<li>The amount of data can be ~60 MB per station for full historic extend\nand this will of course grow in the future.</li>\n<li>If weather data is queried and the query can\u2019t be fullfilled from the\ncache, data is loaded from the server at every query. Even if the\ndata has been updated a second before. If the server doesn\u2019t have\ndata for the requested time (e.g. since it\u2019s not yet available), this\ncauses superfluous network traffic and wait time. Certainly space for\nimprovement here.</li>\n</ul>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>This piece of software is in a very early stage. No test cases yet. Only\nused unter Python 2.7.5. Use at your own risk.</p>\n</div>\n<div id=\"license-code\">\n<h2>License (Code)</h2>\n<p>Licensed under the MTI license. See file LICENSE for details.</p>\n</div>\n<div id=\"data-license\">\n<h2>Data license</h2>\n<p>The DWD has information about their re-use policy in\n<a href=\"http://www.dwd.de/bvbw/appmanager/bvbw/dwdwwwDesktop?_nfpb=true&amp;_windowLabel=dwdwww_main_book&amp;T26001030691160718267804gsbDocumentPath=Content%2FOeffentlichkeit%2FWV%2FWVDS%2FDatenanforderungen%2FDatenbezug%2Fteaser__grundversorgung.html&amp;switchLang=de&amp;_pageLabel=_dwdwww_spezielle_nutzer_metdienstleister_datenbezug\" rel=\"nofollow\">German</a>\nand\n<a href=\"http://www.dwd.de/bvbw/appmanager/bvbw/dwdwwwDesktop?_nfpb=true&amp;_windowLabel=dwdwww_main_book&amp;T26001030691160718267804gsbDocumentPath=Content%2FOeffentlichkeit%2FWV%2FWVDS%2FDatenanforderungen%2FDatenbezug%2Fteaser__grundversorgung.html&amp;switchLang=en&amp;_pageLabel=_dwdwww_spezielle_nutzer_metdienstleister_datenbezug\" rel=\"nofollow\">English</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1172285, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c9dd6e6a1d06e23e7ecb0100796d7e0f", "sha256": "ac5ad45d06c38ac2c6ab4d14441ddf4f7c96c8f9fd130b40e2e9a30ed26c83fb"}, "downloads": -1, "filename": "dwdweather-0.1.tar.gz", "has_sig": false, "md5_digest": "c9dd6e6a1d06e23e7ecb0100796d7e0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7029, "upload_time": "2014-07-17T10:53:50", "upload_time_iso_8601": "2014-07-17T10:53:50.669891Z", "url": "https://files.pythonhosted.org/packages/5e/93/44c89cbfea197b23c3bf4b68aaefcf1678faf2d719304afaab1802306c01/dwdweather-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "640e3a04a3b6fde635bb0c53413194b1", "sha256": "79b9225cf936c27e67e66fb669cafff77bf86d1f623d5865ac20b545431f7d59"}, "downloads": -1, "filename": "dwdweather-0.2.tar.gz", "has_sig": false, "md5_digest": "640e3a04a3b6fde635bb0c53413194b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7018, "upload_time": "2014-07-17T10:56:22", "upload_time_iso_8601": "2014-07-17T10:56:22.790767Z", "url": "https://files.pythonhosted.org/packages/2c/2d/06c49791839b22b323e83dec72da15aecceb7d9cc56baa05a0b159bdcdea/dwdweather-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "e4852ee82d8b29134712f28b36165586", "sha256": "33bab5fe2dee16c9aa222584a21637bf20335ddd38aa7cc54315c936581d35f1"}, "downloads": -1, "filename": "dwdweather-0.3.tar.gz", "has_sig": false, "md5_digest": "e4852ee82d8b29134712f28b36165586", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6471, "upload_time": "2014-07-18T08:41:45", "upload_time_iso_8601": "2014-07-18T08:41:45.191299Z", "url": "https://files.pythonhosted.org/packages/ae/a7/7f166d2da6d08e0f636aa5c732b826397165193942c89a71baa1779ce654/dwdweather-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "117676be0b25c58abad8ca9c264c513e", "sha256": "9843ff4e476fde00eea717530dd88fdb1a6ddfc95410f64baa995f3cfd85e7bb"}, "downloads": -1, "filename": "dwdweather-0.4.tar.gz", "has_sig": false, "md5_digest": "117676be0b25c58abad8ca9c264c513e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7076, "upload_time": "2014-07-18T14:39:55", "upload_time_iso_8601": "2014-07-18T14:39:55.285606Z", "url": "https://files.pythonhosted.org/packages/13/9b/52b558756baac9f9aa8bc59e45a0ffb5ec9dd4146da9462b6c4445631536/dwdweather-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "713345164548ad7ac29f32ed87814c02", "sha256": "3aaea9c47f726686033914892a4de534da0668e53b4244e3a8637fab35153690"}, "downloads": -1, "filename": "dwdweather-0.5.tar.gz", "has_sig": false, "md5_digest": "713345164548ad7ac29f32ed87814c02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10819, "upload_time": "2014-07-23T16:13:43", "upload_time_iso_8601": "2014-07-23T16:13:43.215573Z", "url": "https://files.pythonhosted.org/packages/42/f5/15b659b332750c941585746f04b115195a34440a4d56b04bd655d9407809/dwdweather-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "24a9cb9f77a4720b278d8373f21c43ec", "sha256": "25e04f5ce98d411d01e332b696cb1175a78674cd0d656e857191344b6f7fa8f4"}, "downloads": -1, "filename": "dwdweather-0.6.tar.gz", "has_sig": false, "md5_digest": "24a9cb9f77a4720b278d8373f21c43ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7119, "upload_time": "2014-07-25T14:28:16", "upload_time_iso_8601": "2014-07-25T14:28:16.475738Z", "url": "https://files.pythonhosted.org/packages/4e/ad/3b9b4631661629721130085b05c8cb2b2d10f00a852b2aa9500711eacb83/dwdweather-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "2afb65f3fd7a99510ccb4dd15769d391", "sha256": "5fb93c59fbae9ae89d7527919a55a8dd885dfbf77098e17aacd539b0d4de88ff"}, "downloads": -1, "filename": "dwdweather-0.7.tar.gz", "has_sig": false, "md5_digest": "2afb65f3fd7a99510ccb4dd15769d391", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10833, "upload_time": "2014-07-28T21:03:49", "upload_time_iso_8601": "2014-07-28T21:03:49.910529Z", "url": "https://files.pythonhosted.org/packages/ee/4f/4bd3ceff7b6158133d6e7cbfd68f27e4d72fd2f80c83d032944e16bbbb2f/dwdweather-0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2afb65f3fd7a99510ccb4dd15769d391", "sha256": "5fb93c59fbae9ae89d7527919a55a8dd885dfbf77098e17aacd539b0d4de88ff"}, "downloads": -1, "filename": "dwdweather-0.7.tar.gz", "has_sig": false, "md5_digest": "2afb65f3fd7a99510ccb4dd15769d391", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10833, "upload_time": "2014-07-28T21:03:49", "upload_time_iso_8601": "2014-07-28T21:03:49.910529Z", "url": "https://files.pythonhosted.org/packages/ee/4f/4bd3ceff7b6158133d6e7cbfd68f27e4d72fd2f80c83d032944e16bbbb2f/dwdweather-0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:51 2020"}