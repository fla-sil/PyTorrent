{"info": {"author": "Thinknum", "author_email": "customersuccess@thinknum.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# Thinknum\nAs companies move their business operations to the Internet, new data trails are being created that can provide unique insights on these companies. Thinknum Alternative Data indexes all of these data trails in one platform, providing investors with critical data points that others miss.\n\n## Installation\n```\npip install thinknum\n```\n\n## Query\n\nImport library.\n\n```\nfrom thinknum import Query\n```\n\nTo authenticate, you must first obtain a client_id and client_secret from your assigned Thinknum account manager. Your client_secret must not be shared or exposed via publicly accessible resources (such as browser client-side scripting).\n\n```python\nq = Query(\n    client_id='Your client id',\n    client_secret='Your client secret'\n)\n```\n\nIf you need to use a proxy, you can configure it with the proxies argument.\n\n```python\nproxies = {\n  \"http\": \"http://10.10.1.10:3128\",\n  \"https\": \"http://10.10.1.10:1080\",\n}\n\nq = Query(\n    client_id='Your client id',\n    client_secret='Your client secret',\n    proxies=proxies\n)\n```\n\nRequests can ignore verifying the SSL certficate if you set verify to False. By default, verify is set to True.\n\n```python\nq = Query(\n    client_id='Your client id',\n    client_secret='Your client secret',\n    verify=False\n)\n```\n\nYou will get a list of datasets, each of which has the dataset id and its display_name.\n```python\nq.get_dataset_list()\n```\n\nYou will get dataset's metadata.\n```python\nq.get_dataset_metadata(dataset_id='job_listings')\n```\n\nIt's possible to limit the dataset list to a specific ticker by specific a \"ticker\" query parameter. For example, getting all datasets available for Apple Inc:\n\n```python\nq.get_ticker_dataset_list(query='nasdaq:aapl')\n```\n\nYou can search for tickers.\n```python\nq.get_ticker_list(query=\"tesla\")\n```\n\nYou can also search for tickers of particular dataset\n```python\nq.get_ticker_list(query=\"tesla\", dataset_id='job_listings')\n```\n\nYou can retrieve data for specific dataset and tickers with various filters. For example:\n\n```python\nq.add_ticker('nasdaq:lulu') # Add ticker\nq.add_filter(\n    column='as_of_date',\n    type='>=',\n    value=[\"2020-01-05\"]\n)  # Add filter\nq.add_sort(\n    column='as_of_date',\n    order='asc'\n)   # Add Sort\nq.get_data(dataset_id='job_listings')    # Retrieve data\n```\n\nYou can also specify `start` and `limit`. The default values are `1` and `100000`.\n```\nq.get_data(dataset_id='job_listings', start=1, limit=1000)\n```\n\nSometimes you only need get aggregated results for a dataset. In such cases you can retrieve them through the `addGroup` and `addAggregation` functions.\n\n```python\nq.add_ticker('nasdaq:lulu') # Add ticker\nq.add_group(column='as_of_date') # Add group\nq.add_aggregation(\n    column='dataset__entity__entity_ticker__ticker__ticker',\n    type='count'\n)   # Add aggregation\nq.add_sort(\n    column='as_of_date',\n    order='asc'\n)   # Add sort\nq.get_data(dataset_id='job_listings')\n```\n\nThere a few functions that you can apply to queries to gather even more insight into the data. You can retrieve a listing of the available functions in a dataset with the `getDatasetMetadata` function. For example, there is `nearby` function for `store` dataset.\n\n```\nq.add_ticker('nasdaq:lulu')\nq.add_function(\n    function='nearby',\n    parameters={\n        \"dataset_type\": \"dataset\",\n        \"dataset\": \"store\",\n        \"tickers\":[\"nyse:ua\"],\n        \"entities\": [],\n        \"distance\": 5,\n        \"is_include_closed\": False\n    }\n)\nq.get_data(dataset_id='store')\n```\n\nAlso, you can apply `nearest` function to `store` dataset like the following code.\n```\nq.add_ticker('nasdaq:lulu')\nq.add_function(\n    function='nearest',\n    parameters={\n        \"dataset_type\": \"dataset\",\n        \"dataset\": \"store\",\n        \"tickers\":[\"nyse:ua\"],\n        \"entities\": [],\n        \"ranks\": [1],\n        \"is_include_closed\": False\n    }\n)\nq.get_data(dataset_id='store')\n```\n\n## History\n\nImport library.\n\n```\nfrom thinknum import History\n```\n\nLike the `Query` library, you must authenticate to utilize `History` library.\n\n```python\nh = History(\n    client_id='Your client id',\n    client_secret='Your client secret'\n)\n```\n\nIf you need to use a proxy, you can configure it with the proxies argument.\n\n```python\nproxies = {\n  \"http\": \"http://10.10.1.10:3128\",\n  \"https\": \"http://10.10.1.10:1080\",\n}\n\nh = History(\n    client_id='Your client id',\n    client_secret='Your client secret',\n    proxies=proxies\n)\n```\n\nRequests can ignore verifying the SSL certficate if you set verify to False. By default, verify is set to True.\n\n```python\nh = History(\n    client_id='Your client id',\n    client_secret='Your client secret',\n    verify=False\n)\n```\n\nTo retrieve a list of available history for a dataset:\n\n```python\nh.get_history_list(dataset_id='store')\n```\n\nYou can view the metadata for the historical file:\n\n```python\nh.get_history_metadata(\n    dataset_id='store',\n    history_date='2020-03-09'\n)\n```\n\nTo download a CSV of the historical data:\n\n```python\nh.download(\n    dataset_id='store',\n    history_date='2020-03-09'\n)\n```\n\nYou can specify download path:\n\n```python\nh.download(\n    dataset_id='store',\n    history_date='2020-03-09', \n    download_path='/Users/sangwonseo/Downloads'\n)\n```\n\n## For more details about Library or API\nPlease visit https://docs.thinknum.com/docs\n\n## If you are interested in Thinknum\nPlease request demo at https://www.thinknum.com/demo/\n\n## If you have any questions\nPlease email at customersuccess@thinknum.com\n\nLicense\n----\n\nMIT", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/thinknum/thinknum-client", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.thinknum.com/demo/", "keywords": "Thinknum,Alternative data,Data", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "thinknum", "package_url": "https://pypi.org/project/thinknum/", "platform": "", "project_url": "https://pypi.org/project/thinknum/", "project_urls": {"Download": "https://github.com/thinknum/thinknum-client", "Homepage": "https://www.thinknum.com/demo/"}, "release_url": "https://pypi.org/project/thinknum/1.77/", "requires_dist": null, "requires_python": "", "summary": "", "version": "1.77", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Thinknum</h1>\n<p>As companies move their business operations to the Internet, new data trails are being created that can provide unique insights on these companies. Thinknum Alternative Data indexes all of these data trails in one platform, providing investors with critical data points that others miss.</p>\n<h2>Installation</h2>\n<pre><code>pip install thinknum\n</code></pre>\n<h2>Query</h2>\n<p>Import library.</p>\n<pre><code>from thinknum import Query\n</code></pre>\n<p>To authenticate, you must first obtain a client_id and client_secret from your assigned Thinknum account manager. Your client_secret must not be shared or exposed via publicly accessible resources (such as browser client-side scripting).</p>\n<pre><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'Your client id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'Your client secret'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If you need to use a proxy, you can configure it with the proxies argument.</p>\n<pre><span class=\"n\">proxies</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"http\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://10.10.1.10:3128\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"https\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://10.10.1.10:1080\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'Your client id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'Your client secret'</span><span class=\"p\">,</span>\n    <span class=\"n\">proxies</span><span class=\"o\">=</span><span class=\"n\">proxies</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Requests can ignore verifying the SSL certficate if you set verify to False. By default, verify is set to True.</p>\n<pre><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'Your client id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'Your client secret'</span><span class=\"p\">,</span>\n    <span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You will get a list of datasets, each of which has the dataset id and its display_name.</p>\n<pre><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get_dataset_list</span><span class=\"p\">()</span>\n</pre>\n<p>You will get dataset's metadata.</p>\n<pre><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get_dataset_metadata</span><span class=\"p\">(</span><span class=\"n\">dataset_id</span><span class=\"o\">=</span><span class=\"s1\">'job_listings'</span><span class=\"p\">)</span>\n</pre>\n<p>It's possible to limit the dataset list to a specific ticker by specific a \"ticker\" query parameter. For example, getting all datasets available for Apple Inc:</p>\n<pre><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get_ticker_dataset_list</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'nasdaq:aapl'</span><span class=\"p\">)</span>\n</pre>\n<p>You can search for tickers.</p>\n<pre><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get_ticker_list</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">\"tesla\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can also search for tickers of particular dataset</p>\n<pre><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get_ticker_list</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">\"tesla\"</span><span class=\"p\">,</span> <span class=\"n\">dataset_id</span><span class=\"o\">=</span><span class=\"s1\">'job_listings'</span><span class=\"p\">)</span>\n</pre>\n<p>You can retrieve data for specific dataset and tickers with various filters. For example:</p>\n<pre><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">add_ticker</span><span class=\"p\">(</span><span class=\"s1\">'nasdaq:lulu'</span><span class=\"p\">)</span> <span class=\"c1\"># Add ticker</span>\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">add_filter</span><span class=\"p\">(</span>\n    <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s1\">'as_of_date'</span><span class=\"p\">,</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'&gt;='</span><span class=\"p\">,</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"2020-01-05\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>  <span class=\"c1\"># Add filter</span>\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">add_sort</span><span class=\"p\">(</span>\n    <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s1\">'as_of_date'</span><span class=\"p\">,</span>\n    <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"s1\">'asc'</span>\n<span class=\"p\">)</span>   <span class=\"c1\"># Add Sort</span>\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">dataset_id</span><span class=\"o\">=</span><span class=\"s1\">'job_listings'</span><span class=\"p\">)</span>    <span class=\"c1\"># Retrieve data</span>\n</pre>\n<p>You can also specify <code>start</code> and <code>limit</code>. The default values are <code>1</code> and <code>100000</code>.</p>\n<pre><code>q.get_data(dataset_id='job_listings', start=1, limit=1000)\n</code></pre>\n<p>Sometimes you only need get aggregated results for a dataset. In such cases you can retrieve them through the <code>addGroup</code> and <code>addAggregation</code> functions.</p>\n<pre><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">add_ticker</span><span class=\"p\">(</span><span class=\"s1\">'nasdaq:lulu'</span><span class=\"p\">)</span> <span class=\"c1\"># Add ticker</span>\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">add_group</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s1\">'as_of_date'</span><span class=\"p\">)</span> <span class=\"c1\"># Add group</span>\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">add_aggregation</span><span class=\"p\">(</span>\n    <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s1\">'dataset__entity__entity_ticker__ticker__ticker'</span><span class=\"p\">,</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'count'</span>\n<span class=\"p\">)</span>   <span class=\"c1\"># Add aggregation</span>\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">add_sort</span><span class=\"p\">(</span>\n    <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s1\">'as_of_date'</span><span class=\"p\">,</span>\n    <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"s1\">'asc'</span>\n<span class=\"p\">)</span>   <span class=\"c1\"># Add sort</span>\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">dataset_id</span><span class=\"o\">=</span><span class=\"s1\">'job_listings'</span><span class=\"p\">)</span>\n</pre>\n<p>There a few functions that you can apply to queries to gather even more insight into the data. You can retrieve a listing of the available functions in a dataset with the <code>getDatasetMetadata</code> function. For example, there is <code>nearby</code> function for <code>store</code> dataset.</p>\n<pre><code>q.add_ticker('nasdaq:lulu')\nq.add_function(\n    function='nearby',\n    parameters={\n        \"dataset_type\": \"dataset\",\n        \"dataset\": \"store\",\n        \"tickers\":[\"nyse:ua\"],\n        \"entities\": [],\n        \"distance\": 5,\n        \"is_include_closed\": False\n    }\n)\nq.get_data(dataset_id='store')\n</code></pre>\n<p>Also, you can apply <code>nearest</code> function to <code>store</code> dataset like the following code.</p>\n<pre><code>q.add_ticker('nasdaq:lulu')\nq.add_function(\n    function='nearest',\n    parameters={\n        \"dataset_type\": \"dataset\",\n        \"dataset\": \"store\",\n        \"tickers\":[\"nyse:ua\"],\n        \"entities\": [],\n        \"ranks\": [1],\n        \"is_include_closed\": False\n    }\n)\nq.get_data(dataset_id='store')\n</code></pre>\n<h2>History</h2>\n<p>Import library.</p>\n<pre><code>from thinknum import History\n</code></pre>\n<p>Like the <code>Query</code> library, you must authenticate to utilize <code>History</code> library.</p>\n<pre><span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">History</span><span class=\"p\">(</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'Your client id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'Your client secret'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If you need to use a proxy, you can configure it with the proxies argument.</p>\n<pre><span class=\"n\">proxies</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"http\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://10.10.1.10:3128\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"https\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://10.10.1.10:1080\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">History</span><span class=\"p\">(</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'Your client id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'Your client secret'</span><span class=\"p\">,</span>\n    <span class=\"n\">proxies</span><span class=\"o\">=</span><span class=\"n\">proxies</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Requests can ignore verifying the SSL certficate if you set verify to False. By default, verify is set to True.</p>\n<pre><span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">History</span><span class=\"p\">(</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'Your client id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'Your client secret'</span><span class=\"p\">,</span>\n    <span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To retrieve a list of available history for a dataset:</p>\n<pre><span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">get_history_list</span><span class=\"p\">(</span><span class=\"n\">dataset_id</span><span class=\"o\">=</span><span class=\"s1\">'store'</span><span class=\"p\">)</span>\n</pre>\n<p>You can view the metadata for the historical file:</p>\n<pre><span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">get_history_metadata</span><span class=\"p\">(</span>\n    <span class=\"n\">dataset_id</span><span class=\"o\">=</span><span class=\"s1\">'store'</span><span class=\"p\">,</span>\n    <span class=\"n\">history_date</span><span class=\"o\">=</span><span class=\"s1\">'2020-03-09'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To download a CSV of the historical data:</p>\n<pre><span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span>\n    <span class=\"n\">dataset_id</span><span class=\"o\">=</span><span class=\"s1\">'store'</span><span class=\"p\">,</span>\n    <span class=\"n\">history_date</span><span class=\"o\">=</span><span class=\"s1\">'2020-03-09'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can specify download path:</p>\n<pre><span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span>\n    <span class=\"n\">dataset_id</span><span class=\"o\">=</span><span class=\"s1\">'store'</span><span class=\"p\">,</span>\n    <span class=\"n\">history_date</span><span class=\"o\">=</span><span class=\"s1\">'2020-03-09'</span><span class=\"p\">,</span> \n    <span class=\"n\">download_path</span><span class=\"o\">=</span><span class=\"s1\">'/Users/sangwonseo/Downloads'</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>For more details about Library or API</h2>\n<p>Please visit <a href=\"https://docs.thinknum.com/docs\" rel=\"nofollow\">https://docs.thinknum.com/docs</a></p>\n<h2>If you are interested in Thinknum</h2>\n<p>Please request demo at <a href=\"https://www.thinknum.com/demo/\" rel=\"nofollow\">https://www.thinknum.com/demo/</a></p>\n<h2>If you have any questions</h2>\n<p>Please email at <a href=\"mailto:customersuccess@thinknum.com\">customersuccess@thinknum.com</a></p>\n<h2>License</h2>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 7077150, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "62b86a319b1ad848cfb951c29074c9ec", "sha256": "77254655b453aa2fe92911118b548a84734e23cb07374eb148b0a1b1b4c71cf1"}, "downloads": -1, "filename": "thinknum-1.0.tar.gz", "has_sig": false, "md5_digest": "62b86a319b1ad848cfb951c29074c9ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5238, "upload_time": "2020-03-13T22:03:02", "upload_time_iso_8601": "2020-03-13T22:03:02.496313Z", "url": "https://files.pythonhosted.org/packages/13/4d/20a170001d61e2aa4e862e2dbf9bd46efec0d98081a51e6e5c46e64cbda9/thinknum-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "ac231049d3944e815eabd1ec4f854320", "sha256": "4a372322110204a28831ee4ec3ff97dc5d55c1f7ade2ea3603ee8e473b95b04f"}, "downloads": -1, "filename": "thinknum-1.1.tar.gz", "has_sig": false, "md5_digest": "ac231049d3944e815eabd1ec4f854320", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5272, "upload_time": "2020-03-27T15:54:23", "upload_time_iso_8601": "2020-03-27T15:54:23.022957Z", "url": "https://files.pythonhosted.org/packages/d8/ba/c40331ea9852f02bca88bd74824549b5df4ddf9f8a9937918409cb2e922d/thinknum-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "a83b06e1c1a8182dfe8576c787d5c82d", "sha256": "c5c3964ef7f6386a8d3be347515941d6f7f55118e97d4764dd3c018400d54a62"}, "downloads": -1, "filename": "thinknum-1.2.tar.gz", "has_sig": false, "md5_digest": "a83b06e1c1a8182dfe8576c787d5c82d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5447, "upload_time": "2020-04-08T22:23:02", "upload_time_iso_8601": "2020-04-08T22:23:02.795646Z", "url": "https://files.pythonhosted.org/packages/c3/a0/f2468fe8ff1ab2da1a0460c146792ccd80e9c98c8a1889ef4cd2f15911d4/thinknum-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "067b610dee316f780a9e949ca8dcca10", "sha256": "fb29cd85892b82f3fd15f84ed0309f6166b9b8abd7986aec9089fde1716280ee"}, "downloads": -1, "filename": "thinknum-1.3.tar.gz", "has_sig": false, "md5_digest": "067b610dee316f780a9e949ca8dcca10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5605, "upload_time": "2020-04-09T19:04:55", "upload_time_iso_8601": "2020-04-09T19:04:55.055441Z", "url": "https://files.pythonhosted.org/packages/f1/b5/2e4d51400c3b6a285d0415198abd626fb8dfb03528d454eaccfc722d4b60/thinknum-1.3.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "ee1d3e17da447f46d4a1c977bd9cda02", "sha256": "56e56119a76813d65f7e5f6f69344f1e22906c32f779e2e91bf206fccde3bceb"}, "downloads": -1, "filename": "thinknum-1.5.tar.gz", "has_sig": false, "md5_digest": "ee1d3e17da447f46d4a1c977bd9cda02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5608, "upload_time": "2020-04-09T19:14:01", "upload_time_iso_8601": "2020-04-09T19:14:01.870891Z", "url": "https://files.pythonhosted.org/packages/67/2d/7563fa2afdd6e241d6606eaa1654e5195f2935322374cff0daa76130ec5a/thinknum-1.5.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "c3051d5263bc6f99e0255dca2f222c8c", "sha256": "6a9316b099a6dd4e6de0fc5a5a12617db343d82db557ffdd9c4492d8d632f6bf"}, "downloads": -1, "filename": "thinknum-1.7.tar.gz", "has_sig": false, "md5_digest": "c3051d5263bc6f99e0255dca2f222c8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5727, "upload_time": "2020-04-13T18:42:51", "upload_time_iso_8601": "2020-04-13T18:42:51.373436Z", "url": "https://files.pythonhosted.org/packages/1e/4e/bf71a67c14ac14d54e2960173fb2cc2b39f0e1343fac4cf4aa474cf51b7b/thinknum-1.7.tar.gz", "yanked": false}], "1.71": [{"comment_text": "", "digests": {"md5": "5d874be8e3c0594a9da67eac7507d991", "sha256": "a6c45a752a860a63496afffa82ea2ff453b8d7bd0f1dd1c9d84594d1ef083d13"}, "downloads": -1, "filename": "thinknum-1.71.tar.gz", "has_sig": false, "md5_digest": "5d874be8e3c0594a9da67eac7507d991", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5760, "upload_time": "2020-04-21T21:12:46", "upload_time_iso_8601": "2020-04-21T21:12:46.345926Z", "url": "https://files.pythonhosted.org/packages/b9/1e/904480b35d0a35699f5a86edbcce30a6a5ae834f2d90fb58e4389b8307c7/thinknum-1.71.tar.gz", "yanked": false}], "1.75": [{"comment_text": "", "digests": {"md5": "0203058b79ffaf6c92589f6569850b01", "sha256": "6df997818003c31333afcc78c4161938dcd14b8dbf4c743c28c901558d83b979"}, "downloads": -1, "filename": "thinknum-1.75.tar.gz", "has_sig": false, "md5_digest": "0203058b79ffaf6c92589f6569850b01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5744, "upload_time": "2020-04-21T21:33:56", "upload_time_iso_8601": "2020-04-21T21:33:56.289639Z", "url": "https://files.pythonhosted.org/packages/30/6c/6d1bd62f6b296f142cc0ab5e8880293bbcc429c762fa747abf6dff02f644/thinknum-1.75.tar.gz", "yanked": false}], "1.77": [{"comment_text": "", "digests": {"md5": "703496de2f393f565229342cf48a9391", "sha256": "c8f87b508b43a4c64e7416ff33eb870af42958ab115200ab70dc8cde6854075d"}, "downloads": -1, "filename": "thinknum-1.77.tar.gz", "has_sig": false, "md5_digest": "703496de2f393f565229342cf48a9391", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5838, "upload_time": "2020-04-22T14:58:44", "upload_time_iso_8601": "2020-04-22T14:58:44.158578Z", "url": "https://files.pythonhosted.org/packages/54/50/9efc40ee83d6f036c26eee48c7bbcd4776e0fcae036785fcb7149e15f942/thinknum-1.77.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "703496de2f393f565229342cf48a9391", "sha256": "c8f87b508b43a4c64e7416ff33eb870af42958ab115200ab70dc8cde6854075d"}, "downloads": -1, "filename": "thinknum-1.77.tar.gz", "has_sig": false, "md5_digest": "703496de2f393f565229342cf48a9391", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5838, "upload_time": "2020-04-22T14:58:44", "upload_time_iso_8601": "2020-04-22T14:58:44.158578Z", "url": "https://files.pythonhosted.org/packages/54/50/9efc40ee83d6f036c26eee48c7bbcd4776e0fcae036785fcb7149e15f942/thinknum-1.77.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:55 2020"}