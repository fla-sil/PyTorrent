{"info": {"author": "Tim Heap", "author_email": "tim@timheap.me", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "django-elasticfilter\n====================\n\nCreate Django forms that perform ElasticSearch queries and filters.\n\nInstalling\n----------\n\nInstall using pip::\n\n    pip install django-elasticfilter\n\nUsing\n-----\n\nThe filter forms are standard Django forms, with some small extensions.\nThey inherit from `elasticfilter.filterform.FilterForm`.\nFields to search and filter on are declared as fields on the form,\nwhich should inherit from `elasticfilter.fields.BaseField`:\n\n.. code:: python\n\n    from elasticfilter.filterform import FilterForm\n    from elasticfilter.fields import Query, Filter\n\n    class MyFilterForm(FilterForm):\n\n        class FilterFormMeta:\n            s = S().get_es(**ES_SETTINGS)\\\n                .indexes('my-index')\\\n                .doctypes('my-doctype')\n\n        match = Query(required=False, fields=['_all', '_partial'])\n        type = Filter(field='type')\n\n\nCustom queries and filters\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe provided ``Query`` and ``Filter`` classes are very basic.\nWriting custom ``Query`` and ``Filter`` classes is quite simple.\nFor example, to filter results based upon the ``ContentType`` of the model:\n\n.. code:: python\n\n    from django import forms\n    from django.db.models import get_models\n    from elasticfilter.filterform import FilterForm\n    from elasticfilter.fields import Filter\n\n    class ContentTypeFilter(Filter, forms.ChoiceField):\n        required = False\n\n        def __init__(self, models=None, **kwargs):\n            if models is None:\n                models = get_models()\n\n            self.choice_map = dict((model._meta.model_name, model)\n                                   for model in models)\n\n            choices = [(key, model.get_verbose_name())\n                       for key, model in self.choice_map.items()]\n            kwargs.setdefault('choices', choices)\n            super(ContentTypeFilter, self).__init__(**kwargs)\n\n        def search(self, s, name, data):\n            value = data.get(name, None)\n            if not value:\n                return s\n\n            field = self.field or name\n            content_type = ContentType.objects.get_for_model(self.choice_map[value])\n            return s.filter(F(**{field: content_type.pk}))\n\n    class MyFilterForm(FilterForm):\n        content_type = ContentTypeFilter()", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/tim_heap/django-elasticfilter/", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "django-elasticfilter", "package_url": "https://pypi.org/project/django-elasticfilter/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-elasticfilter/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/tim_heap/django-elasticfilter/"}, "release_url": "https://pypi.org/project/django-elasticfilter/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Create forms that run Elasticsearch queries", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Create Django forms that perform ElasticSearch queries and filters.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install using pip:</p>\n<pre>pip install django-elasticfilter\n</pre>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<p>The filter forms are standard Django forms, with some small extensions.\nThey inherit from <cite>elasticfilter.filterform.FilterForm</cite>.\nFields to search and filter on are declared as fields on the form,\nwhich should inherit from <cite>elasticfilter.fields.BaseField</cite>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticfilter.filterform</span> <span class=\"kn\">import</span> <span class=\"n\">FilterForm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">elasticfilter.fields</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Filter</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFilterForm</span><span class=\"p\">(</span><span class=\"n\">FilterForm</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">FilterFormMeta</span><span class=\"p\">:</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">S</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_es</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">ES_SETTINGS</span><span class=\"p\">)</span>\\\n            <span class=\"o\">.</span><span class=\"n\">indexes</span><span class=\"p\">(</span><span class=\"s1\">'my-index'</span><span class=\"p\">)</span>\\\n            <span class=\"o\">.</span><span class=\"n\">doctypes</span><span class=\"p\">(</span><span class=\"s1\">'my-doctype'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'_all'</span><span class=\"p\">,</span> <span class=\"s1\">'_partial'</span><span class=\"p\">])</span>\n    <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"n\">Filter</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"o\">=</span><span class=\"s1\">'type'</span><span class=\"p\">)</span>\n</pre>\n<div id=\"custom-queries-and-filters\">\n<h3>Custom queries and filters</h3>\n<p>The provided <tt>Query</tt> and <tt>Filter</tt> classes are very basic.\nWriting custom <tt>Query</tt> and <tt>Filter</tt> classes is quite simple.\nFor example, to filter results based upon the <tt>ContentType</tt> of the model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">get_models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">elasticfilter.filterform</span> <span class=\"kn\">import</span> <span class=\"n\">FilterForm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">elasticfilter.fields</span> <span class=\"kn\">import</span> <span class=\"n\">Filter</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ContentTypeFilter</span><span class=\"p\">(</span><span class=\"n\">Filter</span><span class=\"p\">,</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ChoiceField</span><span class=\"p\">):</span>\n    <span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">models</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"n\">get_models</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">choice_map</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">((</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">model_name</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">)</span>\n                               <span class=\"k\">for</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"n\">models</span><span class=\"p\">)</span>\n\n        <span class=\"n\">choices</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get_verbose_name</span><span class=\"p\">())</span>\n                   <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">choice_map</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()]</span>\n        <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s1\">'choices'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ContentTypeFilter</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">s</span>\n\n        <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span> <span class=\"ow\">or</span> <span class=\"n\">name</span>\n        <span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"n\">ContentType</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_for_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">choice_map</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"p\">{</span><span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">content_type</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">}))</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFilterForm</span><span class=\"p\">(</span><span class=\"n\">FilterForm</span><span class=\"p\">):</span>\n    <span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"n\">ContentTypeFilter</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1213535, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3c06b1052ac402690aa22d0b84a2de43", "sha256": "5580ade79cf24bc88bd3d4dd65a84faf387fa0d9243349e9c936c5aebc351050"}, "downloads": -1, "filename": "django-elasticfilter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3c06b1052ac402690aa22d0b84a2de43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3210, "upload_time": "2014-09-04T23:25:31", "upload_time_iso_8601": "2014-09-04T23:25:31.343164Z", "url": "https://files.pythonhosted.org/packages/2f/ff/15321bbf5d6a64f4586fb653813b00abd861a1cffc4306a11d33f7dc3b8d/django-elasticfilter-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c06b1052ac402690aa22d0b84a2de43", "sha256": "5580ade79cf24bc88bd3d4dd65a84faf387fa0d9243349e9c936c5aebc351050"}, "downloads": -1, "filename": "django-elasticfilter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3c06b1052ac402690aa22d0b84a2de43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3210, "upload_time": "2014-09-04T23:25:31", "upload_time_iso_8601": "2014-09-04T23:25:31.343164Z", "url": "https://files.pythonhosted.org/packages/2f/ff/15321bbf5d6a64f4586fb653813b00abd861a1cffc4306a11d33f7dc3b8d/django-elasticfilter-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:25 2020"}