{"info": {"author": "A. Svensson", "author_email": "opensimplex@lmas.se", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics"], "description": "OpenSimplex Noise\n================================================================================\n\n![build-status](https://github.com/lmas/opensimplex/workflows/Tests/badge.svg?branch=master)\n\n        OpenSimplex noise is an n-dimensional gradient noise function that was\n        developed in order to overcome the patent-related issues surrounding\n        Simplex noise, while continuing to also avoid the visually-significant\n        directional artifacts characteristic of Perlin noise.\n\nThis is merely a python port of Kurt Spencer's original code (released\nto the public domain) and neatly wrapped up in a package.\n\nSTATUS\n================================================================================\n\nLibrary is stable, it has pretty good test coverage but haven't gotten\nmuch optimizations.\n\n**Tested with Python 3.6, 3.7, 3.8 on Linux, MacOS and\nWindows**\n\nI like to think that the lack of recent commits is a sign of stable and\nfeature complete code ;)\n\nUSAGE\n================================================================================\n\n**Initialization:**\n\n        >>> from opensimplex import OpenSimplex\n        >>> tmp = OpenSimplex()\n        >>> print (tmp.noise2d(x=10, y=10))\n        0.732051569572\n\nOptionally, the class accepts a seed value:\n\n        >>> tmp = OpenSimplex(seed=1)\n        >>> print (tmp.noise2d(x=10, y=10))\n        -0.4790979022623557\n\nThe seed must be a valid python number. It's used internally to\ngenerate some permutation arrays, which is used for the noise\ngeneration.\n\nIf it isn't provided the class will **default to use 0 as the seed**.\n\n**Available class methods:**\n\n*OpenSimplex.noise2d(x, y)*\n\n> Generate 2D OpenSimplex noise from X,Y coordinates.\n\n*OpenSimplex.noise3d(x, y, z)*\n\n> Generate 3D OpenSimplex noise from X,Y,Z coordinates.\n\n*OpenSimplex.noise4d(x, y, z, w)*\n\n> Generate 4D OpenSimplex noise from X,Y,Z,W coordinates.\n\n**Running tests and benchmarks:**\n\nFirst make a virtualenv and install the dev. requirements:\n\n        virtualenv venv\n        source venv/bin/activate\n        pip install -r requirements.txt\n\nand then simply run the tests:\n\n        make test\n\nor the basic benchmark:\n\n        make benchmark\n\nFAQ\n================================================================================\n\n- Is this relevantly different enough to avoid any real trouble with the\noriginal patent?\n\n    > If you read the [patent\n    > claims](http://www.google.com/patents/US6867776):\n    >\n    > Claim #1 talks about the hardware-implementation-optimized\n    > gradient generator. Most software implementations of Simplex Noise\n    > don't use this anyway, and OpenSimplex Noise certainly doesn't.\n    >\n    > Claim #2(&3&4) talk about using (x',y',z')=(x+s,y+s,z+s) where\n    > s=(x+y+z)/3 to transform the input (render space) coordinate onto\n    > a simplical grid, with the intention to make all of the\n    > \"scissor-simplices\" approximately regular. OpenSimplex Noise (in\n    > 3D) uses s=-(x+y+z)/6 to transform the input point to a point on\n    > the Simplectic honeycomb lattice so that the simplices bounding\n    > the (hyper)cubes at (0,0,..,0) and (1,1,...,1) work out to be\n    > regular. It then mathematically works out that s=(x+y+z)/3 is\n    > needed for the inverse transform, but that's performing a\n    > different (and opposite) function.\n    >\n    > Claim #5(&6) are specific to the scissor-simplex lattice. Simplex\n    > Noise divides the (squashed) n-dimensional (hyper)cube into n!\n    > simplices based on ordered edge traversals, whereas OpenSimplex\n    > Noise divides the (stretched) n-dimensional (hyper)cube into n\n    > polytopes (simplices, rectified simplices, birectified simplices,\n    > etc.) based on the separation (hyper)planes at integer values of\n    > (x'+y'+z'+...).\n    >\n    > Another interesting point is that, if you read all of the claims,\n    > none of them appear to apply to the 2D analogue of Simplex noise\n    > so long as it uses a gradient generator separate from the one\n    > described in claim #1. The skew function in Claim #2 only\n    > applies to 3D, and #5 explicitly refers to n>=3.\n    >\n    > And none of the patent claims speak about using surflets /\n    > \"spherically symmetric kernels\" to generate the \"images with\n    > texture that do not have visible grid artifacts,\" which is\n    > probably the biggest similarity between the two algorithms.\n    >\n    > - **Kurt**, on [Reddit](https://www.reddit.com/r/proceduralgeneration/comments/2gu3e7/like_perlins_simplex_noise_but_dont_like_the/ckmqz2y)\n\nCREDITS\n================================================================================\n\n- Kurt Spencer - Original work\n- A Svensson - Python port and package author\n- CreamyCookie - Cleanup and optimizations\n- Owen Raccuglia - Test cases\n- /u/redblobgames - Fixed conversion for Java's long type, see [Reddit](https://old.reddit.com/r/proceduralgeneration/comments/327zkm/repeated_patterns_in_opensimplex_python_port/cq8tth7/)\n- PetyaVasya - Found bug with using c_long on Windows systems, see [Issue #7](https://github.com/lmas/opensimplex/issues/7)\n\nLICENSE\n================================================================================\n\nWhile the original work was released to the public domain by Kurt, this\npackage is using the MIT license. Please see the file LICENSE for\ndetails.\n\nExpected Output\n================================================================================\n\n2D noise (with default seed):\n\n![image](images/noise2d.png){width=\"100px\" height=\"100px\"}\n\n3D noise:\n\n![image](images/noise3d.png){width=\"100px\" height=\"100px\"}\n\n4D noise:\n\n![image](images/noise4d.png){width=\"100px\" height=\"100px\"}", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/lmas/opensimplex/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lmas/opensimplex", "keywords": "opensimplex simplex noise 2D 3D 4D", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "opensimplex", "package_url": "https://pypi.org/project/opensimplex/", "platform": "", "project_url": "https://pypi.org/project/opensimplex/", "project_urls": {"Download": "https://github.com/lmas/opensimplex/releases", "Homepage": "https://github.com/lmas/opensimplex"}, "release_url": "https://pypi.org/project/opensimplex/0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "OpenSimplex n-dimensional gradient noise function.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OpenSimplex Noise</h1>\n<p><img alt=\"build-status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d274c2b23fe9440355e756acc1c37b3aa41abf9f/68747470733a2f2f6769746875622e636f6d2f6c6d61732f6f70656e73696d706c65782f776f726b666c6f77732f54657374732f62616467652e7376673f6272616e63683d6d6173746572\"></p>\n<pre><code>    OpenSimplex noise is an n-dimensional gradient noise function that was\n    developed in order to overcome the patent-related issues surrounding\n    Simplex noise, while continuing to also avoid the visually-significant\n    directional artifacts characteristic of Perlin noise.\n</code></pre>\n<p>This is merely a python port of Kurt Spencer's original code (released\nto the public domain) and neatly wrapped up in a package.</p>\n<h1>STATUS</h1>\n<p>Library is stable, it has pretty good test coverage but haven't gotten\nmuch optimizations.</p>\n<p><strong>Tested with Python 3.6, 3.7, 3.8 on Linux, MacOS and\nWindows</strong></p>\n<p>I like to think that the lack of recent commits is a sign of stable and\nfeature complete code ;)</p>\n<h1>USAGE</h1>\n<p><strong>Initialization:</strong></p>\n<pre><code>    &gt;&gt;&gt; from opensimplex import OpenSimplex\n    &gt;&gt;&gt; tmp = OpenSimplex()\n    &gt;&gt;&gt; print (tmp.noise2d(x=10, y=10))\n    0.732051569572\n</code></pre>\n<p>Optionally, the class accepts a seed value:</p>\n<pre><code>    &gt;&gt;&gt; tmp = OpenSimplex(seed=1)\n    &gt;&gt;&gt; print (tmp.noise2d(x=10, y=10))\n    -0.4790979022623557\n</code></pre>\n<p>The seed must be a valid python number. It's used internally to\ngenerate some permutation arrays, which is used for the noise\ngeneration.</p>\n<p>If it isn't provided the class will <strong>default to use 0 as the seed</strong>.</p>\n<p><strong>Available class methods:</strong></p>\n<p><em>OpenSimplex.noise2d(x, y)</em></p>\n<blockquote>\n<p>Generate 2D OpenSimplex noise from X,Y coordinates.</p>\n</blockquote>\n<p><em>OpenSimplex.noise3d(x, y, z)</em></p>\n<blockquote>\n<p>Generate 3D OpenSimplex noise from X,Y,Z coordinates.</p>\n</blockquote>\n<p><em>OpenSimplex.noise4d(x, y, z, w)</em></p>\n<blockquote>\n<p>Generate 4D OpenSimplex noise from X,Y,Z,W coordinates.</p>\n</blockquote>\n<p><strong>Running tests and benchmarks:</strong></p>\n<p>First make a virtualenv and install the dev. requirements:</p>\n<pre><code>    virtualenv venv\n    source venv/bin/activate\n    pip install -r requirements.txt\n</code></pre>\n<p>and then simply run the tests:</p>\n<pre><code>    make test\n</code></pre>\n<p>or the basic benchmark:</p>\n<pre><code>    make benchmark\n</code></pre>\n<h1>FAQ</h1>\n<ul>\n<li>\n<p>Is this relevantly different enough to avoid any real trouble with the\noriginal patent?</p>\n<blockquote>\n<p>If you read the <a href=\"http://www.google.com/patents/US6867776\" rel=\"nofollow\">patent\nclaims</a>:</p>\n<p>Claim #1 talks about the hardware-implementation-optimized\ngradient generator. Most software implementations of Simplex Noise\ndon't use this anyway, and OpenSimplex Noise certainly doesn't.</p>\n<p>Claim #2(&amp;3&amp;4) talk about using (x',y',z')=(x+s,y+s,z+s) where\ns=(x+y+z)/3 to transform the input (render space) coordinate onto\na simplical grid, with the intention to make all of the\n\"scissor-simplices\" approximately regular. OpenSimplex Noise (in\n3D) uses s=-(x+y+z)/6 to transform the input point to a point on\nthe Simplectic honeycomb lattice so that the simplices bounding\nthe (hyper)cubes at (0,0,..,0) and (1,1,...,1) work out to be\nregular. It then mathematically works out that s=(x+y+z)/3 is\nneeded for the inverse transform, but that's performing a\ndifferent (and opposite) function.</p>\n<p>Claim #5(&amp;6) are specific to the scissor-simplex lattice. Simplex\nNoise divides the (squashed) n-dimensional (hyper)cube into n!\nsimplices based on ordered edge traversals, whereas OpenSimplex\nNoise divides the (stretched) n-dimensional (hyper)cube into n\npolytopes (simplices, rectified simplices, birectified simplices,\netc.) based on the separation (hyper)planes at integer values of\n(x'+y'+z'+...).</p>\n<p>Another interesting point is that, if you read all of the claims,\nnone of them appear to apply to the 2D analogue of Simplex noise\nso long as it uses a gradient generator separate from the one\ndescribed in claim #1. The skew function in Claim #2 only\napplies to 3D, and #5 explicitly refers to n&gt;=3.</p>\n<p>And none of the patent claims speak about using surflets /\n\"spherically symmetric kernels\" to generate the \"images with\ntexture that do not have visible grid artifacts,\" which is\nprobably the biggest similarity between the two algorithms.</p>\n<ul>\n<li><strong>Kurt</strong>, on <a href=\"https://www.reddit.com/r/proceduralgeneration/comments/2gu3e7/like_perlins_simplex_noise_but_dont_like_the/ckmqz2y\" rel=\"nofollow\">Reddit</a></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h1>CREDITS</h1>\n<ul>\n<li>Kurt Spencer - Original work</li>\n<li>A Svensson - Python port and package author</li>\n<li>CreamyCookie - Cleanup and optimizations</li>\n<li>Owen Raccuglia - Test cases</li>\n<li>/u/redblobgames - Fixed conversion for Java's long type, see <a href=\"https://old.reddit.com/r/proceduralgeneration/comments/327zkm/repeated_patterns_in_opensimplex_python_port/cq8tth7/\" rel=\"nofollow\">Reddit</a></li>\n<li>PetyaVasya - Found bug with using c_long on Windows systems, see <a href=\"https://github.com/lmas/opensimplex/issues/7\" rel=\"nofollow\">Issue #7</a></li>\n</ul>\n<h1>LICENSE</h1>\n<p>While the original work was released to the public domain by Kurt, this\npackage is using the MIT license. Please see the file LICENSE for\ndetails.</p>\n<h1>Expected Output</h1>\n<p>2D noise (with default seed):</p>\n<p><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e6753ea35e31b6b2e0d0bfe664da58751618f9a/696d616765732f6e6f69736532642e706e67\">{width=\"100px\" height=\"100px\"}</p>\n<p>3D noise:</p>\n<p><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87381b297416a1b2fbda0158bedfa96c78b10a0d/696d616765732f6e6f69736533642e706e67\">{width=\"100px\" height=\"100px\"}</p>\n<p>4D noise:</p>\n<p><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a77de2268b9807366314728522f3e949c70c5f19/696d616765732f6e6f69736534642e706e67\">{width=\"100px\" height=\"100px\"}</p>\n\n          </div>"}, "last_serial": 7159191, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f6481cfd7a8bf391ba5693042f75636f", "sha256": "8db362782f8aaa574e32fec2fd38b69b961cac7d10431093e28d97289ff796bd"}, "downloads": -1, "filename": "opensimplex-0.1.tar.gz", "has_sig": false, "md5_digest": "f6481cfd7a8bf391ba5693042f75636f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12800, "upload_time": "2015-04-19T17:07:27", "upload_time_iso_8601": "2015-04-19T17:07:27.202332Z", "url": "https://files.pythonhosted.org/packages/72/f5/f32ae00a0644c51966e950348eb18641333741b42d6211331847bb6de9e9/opensimplex-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "06987b8b88c2d1d8b3f5dc45ae6051a0", "sha256": "53f12be10faecd6158b406b7af3a66f992435c3b86fca6041f5a14c7979e172b"}, "downloads": -1, "filename": "opensimplex-0.2.tar.gz", "has_sig": false, "md5_digest": "06987b8b88c2d1d8b3f5dc45ae6051a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13350, "upload_time": "2016-06-20T20:22:21", "upload_time_iso_8601": "2016-06-20T20:22:21.940627Z", "url": "https://files.pythonhosted.org/packages/b9/28/25649c7258dd530aaf9a5c8a4bffeb08e6293ed3d4b671d44b985e8c28fa/opensimplex-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "320662aaa9bfd09973d6fafe1b98764c", "sha256": "59b8896c6d9dbb9cfe3c316ef7d6f4946f9787005d82fe7c06a2f3af7a9da641"}, "downloads": -1, "filename": "opensimplex-0.3.tar.gz", "has_sig": false, "md5_digest": "320662aaa9bfd09973d6fafe1b98764c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16159, "upload_time": "2020-05-03T19:22:31", "upload_time_iso_8601": "2020-05-03T19:22:31.506280Z", "url": "https://files.pythonhosted.org/packages/60/b4/ca7d6b64166341a951a980628d1cf471947ac00b1eabfbc2008edb4cae32/opensimplex-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "320662aaa9bfd09973d6fafe1b98764c", "sha256": "59b8896c6d9dbb9cfe3c316ef7d6f4946f9787005d82fe7c06a2f3af7a9da641"}, "downloads": -1, "filename": "opensimplex-0.3.tar.gz", "has_sig": false, "md5_digest": "320662aaa9bfd09973d6fafe1b98764c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16159, "upload_time": "2020-05-03T19:22:31", "upload_time_iso_8601": "2020-05-03T19:22:31.506280Z", "url": "https://files.pythonhosted.org/packages/60/b4/ca7d6b64166341a951a980628d1cf471947ac00b1eabfbc2008edb4cae32/opensimplex-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:33 2020"}