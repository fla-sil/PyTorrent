{"info": {"author": "Giorgi Kakulashvili", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Django MongoEngine\n\nThis package, unlike [Django-MongoEngine](https://github.com/MongoEngine/django-mongoengine) or [Djongo](https://github.com/nesdis/djongo/), doesn't aim on changing SQL role in Django. Writing backend for NoSQL database is not trivial. Here MongoDB is used as helper database, to increase performance.\n\n\n## Installation\n\nTo install the package by `pip` run following command\n\n```sh\n# From Github\n$ pip install git+https://github.com/giorgi94/djmongoengine.git\n```\n\n\n## Usage\n\nTo start using the package, add `djmongoengine` to `INSTALLED_APPS` and define `MONGODB_DATABASES`\n\n\n```python\n# settings.py\n\nINSTALLED_APPS = [\n    ...\n    djmongoengine\n    ...\n]\n\nMONGODB_DATABASES = {\n    \"default\": {\n        \"name\": \"dbname\",\n        \"host\": '127.0.0.1',\n        \"port\": 27017,\n        \"tz_aware\": True,\n        # \"username\": \"user\",\n        # \"password\": \"pass\"\n    },\n}\n\n\n```\n\nPackage provides mixin for document schema and connector\n\n```python\n# models.py\n\nclass DocumentMixin:\n    @classmethod\n    def UpdateOne(cls, instance):\n        # updates document in MongoDB, which corresponeds to django instance\n\n    @classmethod\n    def from_instance(cls, instance):\n        # create mongoengine document based on django instance\n\n```\n\nWe assume that django `instance.id` is stored in `ID`, since `id` returns `_id` from mongodb. In the `example`, we provide basic example to define mongoengine schema, based on django models\n\n```python\n# myapp/models.py\n\nclass Category(models.Model):\n    title = models.CharField(max_length=50, unique=True)\n    alias = models.CharField(max_length=50)\n\n# myapp/mongo.py\n\nclass Category(EmbeddedDocument):\n\n    ID = fields.IntField()\n\n    title = fields.StringField()\n    alias = fields.StringField()\n\n    @classmethod\n    def from_instance(cls, instance):\n\n        return cls(ID=instance.id, title=instance.title, alias=instance.alias)\n\n```\n\nIn `signals.py` and `receivers.py` are defined functions and signals to sync changes in django to mongodb.\n\n## GraphQL\n\nGraphQL is not directly connected with the package, but documentation for `graphene` is not beginner friendly. There are [graphene-django](https://github.com/graphql-python/graphene-django) and [flask-graphql](https://github.com/graphql-python/flask-graphql), but it doesn't allow to explore full potential of `graphql` and `mongodb`, so we use [graphene-mongo](https://github.com/graphql-python/graphene-mongo) for more diversity. Query is defined in\n\n```python\n# myapp/query.py\n\n\nclass Query(graphene.ObjectType):\n    articles = graphene.List(ArticleQuery, find=FindInput())\n\n    def resolve_articles(self, info, **kwargs):\n        find = kwargs.get(\"find\")\n\n        normilize_find(find)\n\n        if find is not None:\n            return Article.objects(**find)\n        return Article.objects()\n\n\nschema = graphene.Schema(query=Query)\n\n# myapp/views.py\n\nfrom .query import schema\n\n\ndef graphql_view(request):\n    ...\n\n    result = schema.execute(query)\n\n    if result.errors:\n        return JsonResponse({\"errors\": str(result.errors)})\n\n    return JsonResponse({\"query\": result.data})\n\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/giorgi94/djmongoengine", "keywords": "django,mongodb,graphql", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "djmongoengine", "package_url": "https://pypi.org/project/djmongoengine/", "platform": "OS Independent", "project_url": "https://pypi.org/project/djmongoengine/", "project_urls": {"Homepage": "https://github.com/giorgi94/djmongoengine"}, "release_url": "https://pypi.org/project/djmongoengine/1.0/", "requires_dist": ["Django (>=2.0)", "Pillow (>=5.3.0)", "mongoengine (>=0.18.2)", "pymongo (>=3.9.0)"], "requires_python": "", "summary": "Application to enhance performance by mongodb engine", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django MongoEngine</h1>\n<p>This package, unlike <a href=\"https://github.com/MongoEngine/django-mongoengine\" rel=\"nofollow\">Django-MongoEngine</a> or <a href=\"https://github.com/nesdis/djongo/\" rel=\"nofollow\">Djongo</a>, doesn't aim on changing SQL role in Django. Writing backend for NoSQL database is not trivial. Here MongoDB is used as helper database, to increase performance.</p>\n<h2>Installation</h2>\n<p>To install the package by <code>pip</code> run following command</p>\n<pre><span class=\"c1\"># From Github</span>\n$ pip install git+https://github.com/giorgi94/djmongoengine.git\n</pre>\n<h2>Usage</h2>\n<p>To start using the package, add <code>djmongoengine</code> to <code>INSTALLED_APPS</code> and define <code>MONGODB_DATABASES</code></p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">djmongoengine</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">MONGODB_DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dbname\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"port\"</span><span class=\"p\">:</span> <span class=\"mi\">27017</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"tz_aware\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"c1\"># \"username\": \"user\",</span>\n        <span class=\"c1\"># \"password\": \"pass\"</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Package provides mixin for document schema and connector</p>\n<pre><span class=\"c1\"># models.py</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DocumentMixin</span><span class=\"p\">:</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">UpdateOne</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n        <span class=\"c1\"># updates document in MongoDB, which corresponeds to django instance</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_instance</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n        <span class=\"c1\"># create mongoengine document based on django instance</span>\n</pre>\n<p>We assume that django <code>instance.id</code> is stored in <code>ID</code>, since <code>id</code> returns <code>_id</code> from mongodb. In the <code>example</code>, we provide basic example to define mongoengine schema, based on django models</p>\n<pre><span class=\"c1\"># myapp/models.py</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Category</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">alias</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># myapp/mongo.py</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Category</span><span class=\"p\">(</span><span class=\"n\">EmbeddedDocument</span><span class=\"p\">):</span>\n\n    <span class=\"n\">ID</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">IntField</span><span class=\"p\">()</span>\n\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">StringField</span><span class=\"p\">()</span>\n    <span class=\"n\">alias</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">StringField</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_instance</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">ID</span><span class=\"o\">=</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">)</span>\n</pre>\n<p>In <code>signals.py</code> and <code>receivers.py</code> are defined functions and signals to sync changes in django to mongodb.</p>\n<h2>GraphQL</h2>\n<p>GraphQL is not directly connected with the package, but documentation for <code>graphene</code> is not beginner friendly. There are <a href=\"https://github.com/graphql-python/graphene-django\" rel=\"nofollow\">graphene-django</a> and <a href=\"https://github.com/graphql-python/flask-graphql\" rel=\"nofollow\">flask-graphql</a>, but it doesn't allow to explore full potential of <code>graphql</code> and <code>mongodb</code>, so we use <a href=\"https://github.com/graphql-python/graphene-mongo\" rel=\"nofollow\">graphene-mongo</a> for more diversity. Query is defined in</p>\n<pre><span class=\"c1\"># myapp/query.py</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">ArticleQuery</span><span class=\"p\">,</span> <span class=\"n\">find</span><span class=\"o\">=</span><span class=\"n\">FindInput</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_articles</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">find</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"find\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">normilize_find</span><span class=\"p\">(</span><span class=\"n\">find</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">find</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">find</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># myapp/views.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.query</span> <span class=\"kn\">import</span> <span class=\"n\">schema</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">graphql_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">({</span><span class=\"s2\">\"errors\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">)})</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">({</span><span class=\"s2\">\"query\"</span><span class=\"p\">:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">})</span>\n</pre>\n\n          </div>"}, "last_serial": 6095252, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "15a9ada6fb29ba4495bd8290869006c6", "sha256": "c5bf2f35a02da8a8ee0c5c15af839f62241f28f55c5048a86ed8b40744a31e9e"}, "downloads": -1, "filename": "djmongoengine-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "15a9ada6fb29ba4495bd8290869006c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4152, "upload_time": "2019-11-07T18:58:10", "upload_time_iso_8601": "2019-11-07T18:58:10.840340Z", "url": "https://files.pythonhosted.org/packages/1f/f7/2bce53b8730b771e63a744ff10cdd093b8605866a9957ed9b8c2aa58b4b4/djmongoengine-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d891bfd9e6439bfb00de31d92f846ae5", "sha256": "0945761b1df765142b5f5c8b9bde0b5415ef2c041a94db53a8ffd6861ceec828"}, "downloads": -1, "filename": "djmongoengine-1.0.tar.gz", "has_sig": false, "md5_digest": "d891bfd9e6439bfb00de31d92f846ae5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3595, "upload_time": "2019-11-07T18:58:13", "upload_time_iso_8601": "2019-11-07T18:58:13.410381Z", "url": "https://files.pythonhosted.org/packages/d6/9d/5aa54ed6db1f3bfd7aa2fe1e7992b9662aba7f55a8de6b85ec47ac4f6085/djmongoengine-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15a9ada6fb29ba4495bd8290869006c6", "sha256": "c5bf2f35a02da8a8ee0c5c15af839f62241f28f55c5048a86ed8b40744a31e9e"}, "downloads": -1, "filename": "djmongoengine-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "15a9ada6fb29ba4495bd8290869006c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4152, "upload_time": "2019-11-07T18:58:10", "upload_time_iso_8601": "2019-11-07T18:58:10.840340Z", "url": "https://files.pythonhosted.org/packages/1f/f7/2bce53b8730b771e63a744ff10cdd093b8605866a9957ed9b8c2aa58b4b4/djmongoengine-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d891bfd9e6439bfb00de31d92f846ae5", "sha256": "0945761b1df765142b5f5c8b9bde0b5415ef2c041a94db53a8ffd6861ceec828"}, "downloads": -1, "filename": "djmongoengine-1.0.tar.gz", "has_sig": false, "md5_digest": "d891bfd9e6439bfb00de31d92f846ae5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3595, "upload_time": "2019-11-07T18:58:13", "upload_time_iso_8601": "2019-11-07T18:58:13.410381Z", "url": "https://files.pythonhosted.org/packages/d6/9d/5aa54ed6db1f3bfd7aa2fe1e7992b9662aba7f55a8de6b85ec47ac4f6085/djmongoengine-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:31 2020"}