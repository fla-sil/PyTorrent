{"info": {"author": "Garrett Pennington", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries", "Topic :: Utilities"], "description": "Django Ping\n===========\n\nDjango Ping is utility that provides a lightweight endpoint for availability and uptime monitoring services. It \nalso provides hooks for testing stack components and reporting them via JSON.\n\nInstallation\n------------\n\nUse pip to download and install::\n\n    pip install django-ping\n\nAdd Django Ping to url conf::\n\n        url(r'^ping/', include('ping.urls')),\n\nBasic Configuration\n-------------------\n\nHitting the endpoint returns a simple status 200 response.\nYou can customize the message by adding to your Django settings::\n\n    PING_DEFAULT_RESPONSE = \"All systems go!\"\n    PING_DEFAULT_MIMETYPE = 'text/html'\n\nHitting the url::\n\n    /ping\n    \ndisplays::\n\n    All systems go!\n\nAdvanced Configuration\n----------------------\n\nEnable Status Checks\n~~~~~~~~~~~~~~~~~~~~\n\nAdding a ``checks=true`` parameter to the url tells Django Ping to run\na series of status checks and reports the results.\n\nFor example::\n\n    /ping?checks=true\n    \ndisplays::\n\n    Your site is up!\n    db_sessions True\n    db_site True\n\nBy default, Django Ping tests that your Database is responding\nby using supplying two tests.  You can supply your own tests\nto make sure everything is responding as expected. If you don't\nuse database sessions or the contrib.sites app, you can removed\nremove the ones you don't need.\n\nTo customize, include a tuple in your Django settings::\n\n    PING_CHECKS = (\n        'ping.checks.check_database_sessions',\n        #'ping.checks.check_database_sites',\n        'my_app.module.check_function',\n        'my_other_app.some_module.some_function'\n    )\n\n\nSpecifying a ``fmt`` parameter to ``json`` returns more detailed and serialized data.\nFor example::\n\n    /ping?fmt=json\n    \ndisplays::\n\n    {\n        \"db_sessions\": true,\n        \"db_site\": true\n    }\n\nCustom Status Checks\n~~~~~~~~~~~~~~~~~~~~\n\nChecks should accept the request object and return\ntwo values. The name/key to be displayed\nand the value of the check. The value should be anything\nthat can be serialized.::\n\n    def check_sample(request):\n        #...do some things...\n        return 'foo', True\n        #or\n        return 'bar', float(123.456)\n        #or even\n        return 'baz', ['one', 'two', 'three', {'a':1, 'b':2, 'c':3}]\n\nThen, add that to the ``PING_CHECKS`` tuple to display::\n\n    {\n        'foo', true\n    }\n\n\nIncluded Status Checks\n~~~~~~~~~~~~~~~~~~~~~~\n\nDjango Ping includes a few checks to test various components\nlive.\n\n**check_database_sessions** - Hits your database and attempts to retrieve a single session.\n\n**check_database_sites** - Hits your database and attempts to retrieve a single site instance.\n\n**check_cache_set** - Attempts to cache a value using the current cache backend defined.\n\n**check_cache_get** - Attempts to retrieve a cached value using the current cache backend defined.\n\n\nAuthentication\n~~~~~~~~~~~~~~\n\nYou can require HTTP Basic authentication to access the ping endpoint,\nset ``PING_BASIC_AUTH`` to ``True`` in your Django settings.\n\nProvide in the request the username/password of a valid User.\n\n\nWhat's Next?\n------------\n\nGo sign up for a monitoring service or role your own.\n\nhttps://www.pingdom.com/\n\nhttp://www.panopta.com/\n\nhttp://binarycanary.com/\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-ping", "package_url": "https://pypi.org/project/django-ping/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-ping/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/django-ping/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Django Monitoring and Availability Utility", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django Ping is utility that provides a lightweight endpoint for availability and uptime monitoring services. It\nalso provides hooks for testing stack components and reporting them via JSON.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use pip to download and install:</p>\n<pre>pip install django-ping\n</pre>\n<p>Add Django Ping to url conf:</p>\n<pre>url(r'^ping/', include('ping.urls')),\n</pre>\n</div>\n<div id=\"basic-configuration\">\n<h2>Basic Configuration</h2>\n<p>Hitting the endpoint returns a simple status 200 response.\nYou can customize the message by adding to your Django settings:</p>\n<pre>PING_DEFAULT_RESPONSE = \"All systems go!\"\nPING_DEFAULT_MIMETYPE = 'text/html'\n</pre>\n<p>Hitting the url:</p>\n<pre>/ping\n</pre>\n<p>displays:</p>\n<pre>All systems go!\n</pre>\n</div>\n<div id=\"advanced-configuration\">\n<h2>Advanced Configuration</h2>\n<div id=\"enable-status-checks\">\n<h3>Enable Status Checks</h3>\n<p>Adding a <tt>checks=true</tt> parameter to the url tells Django Ping to run\na series of status checks and reports the results.</p>\n<p>For example:</p>\n<pre>/ping?checks=true\n</pre>\n<p>displays:</p>\n<pre>Your site is up!\ndb_sessions True\ndb_site True\n</pre>\n<p>By default, Django Ping tests that your Database is responding\nby using supplying two tests.  You can supply your own tests\nto make sure everything is responding as expected. If you don\u2019t\nuse database sessions or the contrib.sites app, you can removed\nremove the ones you don\u2019t need.</p>\n<p>To customize, include a tuple in your Django settings:</p>\n<pre>PING_CHECKS = (\n    'ping.checks.check_database_sessions',\n    #'ping.checks.check_database_sites',\n    'my_app.module.check_function',\n    'my_other_app.some_module.some_function'\n)\n</pre>\n<p>Specifying a <tt>fmt</tt> parameter to <tt>json</tt> returns more detailed and serialized data.\nFor example:</p>\n<pre>/ping?fmt=json\n</pre>\n<p>displays:</p>\n<pre>{\n    \"db_sessions\": true,\n    \"db_site\": true\n}\n</pre>\n</div>\n<div id=\"custom-status-checks\">\n<h3>Custom Status Checks</h3>\n<p>Checks should accept the request object and return\ntwo values. The name/key to be displayed\nand the value of the check. The value should be anything\nthat can be serialized.:</p>\n<pre>def check_sample(request):\n    #...do some things...\n    return 'foo', True\n    #or\n    return 'bar', float(123.456)\n    #or even\n    return 'baz', ['one', 'two', 'three', {'a':1, 'b':2, 'c':3}]\n</pre>\n<p>Then, add that to the <tt>PING_CHECKS</tt> tuple to display:</p>\n<pre>{\n    'foo', true\n}\n</pre>\n</div>\n<div id=\"included-status-checks\">\n<h3>Included Status Checks</h3>\n<p>Django Ping includes a few checks to test various components\nlive.</p>\n<p><strong>check_database_sessions</strong> - Hits your database and attempts to retrieve a single session.</p>\n<p><strong>check_database_sites</strong> - Hits your database and attempts to retrieve a single site instance.</p>\n<p><strong>check_cache_set</strong> - Attempts to cache a value using the current cache backend defined.</p>\n<p><strong>check_cache_get</strong> - Attempts to retrieve a cached value using the current cache backend defined.</p>\n</div>\n<div id=\"authentication\">\n<h3>Authentication</h3>\n<p>You can require HTTP Basic authentication to access the ping endpoint,\nset <tt>PING_BASIC_AUTH</tt> to <tt>True</tt> in your Django settings.</p>\n<p>Provide in the request the username/password of a valid User.</p>\n</div>\n</div>\n<div id=\"what-s-next\">\n<h2>What\u2019s Next?</h2>\n<p>Go sign up for a monitoring service or role your own.</p>\n<p><a href=\"https://www.pingdom.com/\" rel=\"nofollow\">https://www.pingdom.com/</a></p>\n<p><a href=\"http://www.panopta.com/\" rel=\"nofollow\">http://www.panopta.com/</a></p>\n<p><a href=\"http://binarycanary.com/\" rel=\"nofollow\">http://binarycanary.com/</a></p>\n</div>\n\n          </div>"}, "last_serial": 790292, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "674e7b85c7c251e98d140b350fd025f4", "sha256": "f03ea8b817900f1f86f3e285aec4d10f0cf258cfd5cdfab688aecb64a0681ed7"}, "downloads": -1, "filename": "django-ping-0.1.0.tar.gz", "has_sig": false, "md5_digest": "674e7b85c7c251e98d140b350fd025f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3121, "upload_time": "2012-12-10T21:56:02", "upload_time_iso_8601": "2012-12-10T21:56:02.012308Z", "url": "https://files.pythonhosted.org/packages/17/27/9333ccdca8585e76e41a945aa96988d5db10462da31f1d900726cce9798b/django-ping-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2aeccadcdaee2c1a02cae1548b300cd1", "sha256": "fe9ebef9379428f60e2ecbd8af3139a040c93964d2243c79dae8868104bc0fbc"}, "downloads": -1, "filename": "django-ping-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2aeccadcdaee2c1a02cae1548b300cd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4247, "upload_time": "2012-12-13T04:26:16", "upload_time_iso_8601": "2012-12-13T04:26:16.751757Z", "url": "https://files.pythonhosted.org/packages/f5/65/a4777bf6539363397b9929fe4f44dca705177fa3e3b14c84b1613191fb01/django-ping-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2aeccadcdaee2c1a02cae1548b300cd1", "sha256": "fe9ebef9379428f60e2ecbd8af3139a040c93964d2243c79dae8868104bc0fbc"}, "downloads": -1, "filename": "django-ping-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2aeccadcdaee2c1a02cae1548b300cd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4247, "upload_time": "2012-12-13T04:26:16", "upload_time_iso_8601": "2012-12-13T04:26:16.751757Z", "url": "https://files.pythonhosted.org/packages/f5/65/a4777bf6539363397b9929fe4f44dca705177fa3e3b14c84b1613191fb01/django-ping-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:01 2020"}