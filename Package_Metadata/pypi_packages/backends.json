{"info": {"author": "Wessel Bruinsma", "author_email": "wessel.p.bruinsma@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# [LAB](http://github.com/wesselb/lab)\n\n[![Build](https://travis-ci.org/wesselb/lab.svg?branch=master)](https://travis-ci.org/wesselb/lab)\n[![Coverage Status](https://coveralls.io/repos/github/wesselb/lab/badge.svg?branch=master&service=github)](https://coveralls.io/github/wesselb/lab?branch=master)\n[![Latest Docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://wesselb.github.io/lab)\n\nA generic interface for linear algebra backends: code it once, run it on any \nbackend\n\n_Note:_ LAB requires Python 3.6 or higher and TensorFlow 2 if TensorFlow is \nused.\n\n* [Installation](#installation)\n* [Basic Usage](#basic-usage)\n* [List of Types](#list-of-types)\n    - [General](#general)\n    - [NumPy](#numpy)\n    - [TensorFlow](#tensorflow)\n    - [PyTorch](#pytorch)\n* [List of Methods](#list-of-methods)\n    - [Constants](#constants)\n    - [Generic](#generic)\n    - [Linear Algebra](#linear-algebra)\n    - [Random](#random)\n    - [Shaping](#shaping)\n\n## Installation\nBefore installing the package, please ensure that `gcc` and `gfortran` are \navailable.\nOn OS X, these are both installed with `brew install gcc`;\nusers of Anaconda may want to instead consider `conda install gcc`.\nOn Linux, `gcc` is most likely already available, and `gfortran` can be \ninstalled with `apt-get install gfortran`.\nThen simply\n\n```\npip install backends\n```\n\n## Basic Usage\n\nThe basic use case for the package is to write code that automatically \ndetermines the backend to use depending on the types of its arguments.\n\nExample:\n\n```python\nimport lab as B\nimport lab.autograd    # Load the AutoGrad extension.\nimport lab.torch       # Load the PyTorch extension.\nimport lab.tensorflow  # Load the TensorFlow extension.\n\n\ndef objective(matrix):\n    outer_product = B.matmul(matrix, matrix, tr_b=True)\n    return B.mean(outer_product)\n```\n\nThe AutoGrad, PyTorch, and TensorFlow extensions are not loaded automatically to\nnot enforce a dependency on all three frameworks.\nAn extension can alternatively be loaded via `import lab.autograd as B`.\n\nRun it with NumPy and AutoGrad:\n\n```python\n>>> import autograd.numpy as np\n\n>>> objective(B.randn(np.float64, 2, 2))\n0.15772589216756833\n\n>>> grad(objective)(B.randn(np.float64, 2, 2))\narray([[ 0.23519042, -1.06282928],\n       [ 0.23519042, -1.06282928]])\n```\n\nRun it with TensorFlow:\n```python\n>>> import tensorflow as tf\n\n>>> objective(B.randn(tf.float64, 2, 2))\n<tf.Tensor 'Mean:0' shape=() dtype=float64>\n```\n\nRun it with PyTorch:\n```python\n>>> import torch\n\n>>> objective(B.randn(torch.float64, 2, 2))\ntensor(1.9557, dtype=torch.float64)\n```\n\n## List of Types\nThis section lists all available types, which can be used to check types of \nobjects or extend functions.\n\nExample:\n\n```python\n>>> import lab as B\n\n>>> from plum import List, Tuple\n\n>>> import numpy as np\n\n>>> isinstance([1., np.array([1., 2.])], List(B.NPNumeric))\nTrue\n\n>>> isinstance([1., np.array([1., 2.])], List(B.TFNumeric))\nFalse\n\n>>> import tensorflow as tf\n\n>>> import lab.tensorflow\n\n>>> isinstance((tf.constant(1.), tf.ones(5)), Tuple(B.TFNumeric))\nTrue\n```\n\n### General\n\n```\nInt          # Integers\nFloat        # Floating-point numbers\nBool         # Booleans\nNumber       # Numbers\nNumeric      # Numerical objects, including booleans\nDType        # Data type\nFramework    # Anything accepted by supported frameworks\n```\n\n### NumPy\n\n```\nNPNumeric\nNPDType\n \nNP           # Anything NumPy\n```\n\n### AutoGrad\n\n```\nAGNumeric\nAGDType\n \nAG           # Anything AutoGrad\n```\n\n### TensorFlow\n\n```\nTFNumeric\nTFDType\n \nTF           # Anything TensorFlow\n```\n\n\n### PyTorch\n\n```\nTorchNumeric\nTorchDType\n \nTorch        # Anything PyTorch\n```\n\n\n## List of Methods\nThis section lists all available constants and methods.\n\n*\n    Arguments *must* be given as arguments and keyword arguments *must* be \n    given as keyword arguments.\n    For example, `sum(tensor, axis=1)` is valid, but `sum(tensor, 1)` is not.\n    \n* The names of arguments are indicative of their function:\n    - `a`, `b`, and `c` indicate general tensors.\n    -\n        `dtype` indicates a data type. E.g, `np.float32` or `tf.float64`; and\n        `rand(np.float32)` creates a NumPy random number, whereas\n        `rand(tf.float64)` creates a TensorFlow random number.\n        Data types are always given as the first argument.\n    -\n        `shape` indicates a shape.\n        The dimensions of a shape are always given as separate arguments to \n        the function.\n        E.g., `reshape(tensor, 2, 2)` is valid, but `reshape(tensor, (2, 2))`\n        is not.\n    -\n        `axis` indicates an axis over which the function may perform its action.\n        An axis is always given as a keyword argument.\n    -\n        `ref` indicates a *reference tensor* from which properties, like its\n        shape and data type, will be used. E.g., `zeros(tensor)` creates a \n        tensor full of zeros of the same shape and data type as `tensor`.\n    \nSee the documentation for more detailed descriptions of each function. \n\n### Special Variables\n```\ndefault_dtype  # Default data type.\nepsilon        # Magnitude of diagonal to regularise matrices with.\n```\n\n### Constants\n```\nnan\npi\nlog_2_pi\n```\n\n### Generic\n```\nisnan(a)\n\nzeros(dtype, *shape)\nzeros(*shape)\nzeros(ref)\n\nones(dtype, *shape)\nones(*shape)\nones(ref)\n\none(dtype)\none(ref)\n\nzero(dtype)\nzero(ref)\n\neye(dtype, *shape)\neye(*shape)\neye(ref)\n\nlinspace(dtype, a, b, num)\nlinspace(a, b, num)\n\nrange(dtype, start, stop, step)\nrange(dtype, stop)\nrange(dtype, start, stop)\nrange(start, stop, step)\nrange(start, stop)\nrange(stop)\n\ncast(dtype, a)\n\nidentity(a)\nnegative(a)\nabs(a)\nsign(a)\nsqrt(a)\nexp(a)\nlog(a)\nsin(a)\ncos(a)\ntan(a)\ntanh(a)\nerf(a)\nsigmoid(a)\nsoftplus(a)\nrelu(a)\n\nadd(a, b)\nsubtract(a, b)\nmultiply(a, b)\ndivide(a, b)\npower(a, b)\nminimum(a, b)\nmaximum(a, b)\nleaky_relu(a, alpha)\n\nmin(a, axis=None)\nmax(a, axis=None)\nsum(a, axis=None)\nmean(a, axis=None)\nstd(a, axis=None)\nlogsumexp(a, axis=None)\n\nall(a, axis=None)\nany(a, axis=None)\n\nlt(a, b)\nle(a, b)\ngt(a, b)\nge(a, b)\n\nbvn_cdf(a, b, c)\n\nscan(f, xs, *init_state)\n\nsort(a, axis=-1, descending=False)\nargsort(a, axis=-1, descending=False)\n\nto_numpy(a)\n```\n\n### Linear Algebra\n```\ntranspose(a, perm=None) (alias: t, T)\nmatmul(a, b, tr_a=False, tr_b=False) (alias: mm, dot)\ntrace(a, axis1=0, axis2=1)\nkron(a, b)\nsvd(a, compute_uv=True)\nsolve(a, b)\ninv(a)\ndet(a) \nlogdet(a) \ncholesky(a) (alias: chol)\n\ncholesky_solve(a, b)  (alias: cholsolve)\ntriangular_solve(a, b, lower_a=True) (alias: trisolve)\ntoeplitz_solve(a, b, c) (alias: toepsolve)\ntoeplitz_solve(a, c)\n\nouter(a, b)\nreg(a, diag=None, clip=True)\n\npw_dists2(a, b)\npw_dists2(a)\npw_dists(a, b)\npw_dists(a)\n\new_dists2(a, b)\new_dists2(a)\new_dists(a, b)\new_dists(a)\n\npw_sums2(a, b)\npw_sums2(a)\npw_sums(a, b)\npw_sums(a)\n\new_sums2(a, b)\new_sums2(a)\new_sums(a, b)\new_sums(a)\n```\n### Random\n```\nset_random_seed(seed) \n\nrand(dtype, *shape)\nrand(*shape)\nrand(ref)\n\nrandn(dtype, *shape)\nrandn(*shape)\nrandn(ref)\n\nchoice(a, n)\nchoice(a)\n```\n\n### Shaping\n```\nshape(a)\nrank(a)\nlength(a) (alias: size)\nisscalar(a)\nexpand_dims(a, axis=0)\nsqueeze(a)\nuprank(a)\n\ndiag(a)\nflatten(a)\nvec_to_tril(a)\ntril_to_vec(a)\nstack(*elements, axis=0)\nunstack(a, axis=0)\nreshape(a, *shape)\nconcat(*elements, axis=0)\nconcat2d(*rows)\ntile(a, *repeats)\ntake(a, indices, axis=0)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wesselb/lab", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "backends", "package_url": "https://pypi.org/project/backends/", "platform": "", "project_url": "https://pypi.org/project/backends/", "project_urls": {"Homepage": "https://github.com/wesselb/lab"}, "release_url": "https://pypi.org/project/backends/0.3.7/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A generic interface for linear algebra backends", "version": "0.3.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"http://github.com/wesselb/lab\" rel=\"nofollow\">LAB</a></h1>\n<p><a href=\"https://travis-ci.org/wesselb/lab\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5378538cc6d9278f1ef5fde2f66a98bf9c5b5189/68747470733a2f2f7472617669732d63692e6f72672f77657373656c622f6c61622e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/wesselb/lab?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ec1a9092250c7dc38da8799a8c57e59ae8f6e19/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f77657373656c622f6c61622f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<a href=\"https://wesselb.github.io/lab\" rel=\"nofollow\"><img alt=\"Latest Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35e0b9e630dbc347bd4718399aa51fb3bb2bb889/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667\"></a></p>\n<p>A generic interface for linear algebra backends: code it once, run it on any\nbackend</p>\n<p><em>Note:</em> LAB requires Python 3.6 or higher and TensorFlow 2 if TensorFlow is\nused.</p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#basic-usage\" rel=\"nofollow\">Basic Usage</a></li>\n<li><a href=\"#list-of-types\" rel=\"nofollow\">List of Types</a>\n<ul>\n<li><a href=\"#general\" rel=\"nofollow\">General</a></li>\n<li><a href=\"#numpy\" rel=\"nofollow\">NumPy</a></li>\n<li><a href=\"#tensorflow\" rel=\"nofollow\">TensorFlow</a></li>\n<li><a href=\"#pytorch\" rel=\"nofollow\">PyTorch</a></li>\n</ul>\n</li>\n<li><a href=\"#list-of-methods\" rel=\"nofollow\">List of Methods</a>\n<ul>\n<li><a href=\"#constants\" rel=\"nofollow\">Constants</a></li>\n<li><a href=\"#generic\" rel=\"nofollow\">Generic</a></li>\n<li><a href=\"#linear-algebra\" rel=\"nofollow\">Linear Algebra</a></li>\n<li><a href=\"#random\" rel=\"nofollow\">Random</a></li>\n<li><a href=\"#shaping\" rel=\"nofollow\">Shaping</a></li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Before installing the package, please ensure that <code>gcc</code> and <code>gfortran</code> are\navailable.\nOn OS X, these are both installed with <code>brew install gcc</code>;\nusers of Anaconda may want to instead consider <code>conda install gcc</code>.\nOn Linux, <code>gcc</code> is most likely already available, and <code>gfortran</code> can be\ninstalled with <code>apt-get install gfortran</code>.\nThen simply</p>\n<pre><code>pip install backends\n</code></pre>\n<h2>Basic Usage</h2>\n<p>The basic use case for the package is to write code that automatically\ndetermines the backend to use depending on the types of its arguments.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">lab</span> <span class=\"k\">as</span> <span class=\"nn\">B</span>\n<span class=\"kn\">import</span> <span class=\"nn\">lab.autograd</span>    <span class=\"c1\"># Load the AutoGrad extension.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">lab.torch</span>       <span class=\"c1\"># Load the PyTorch extension.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">lab.tensorflow</span>  <span class=\"c1\"># Load the TensorFlow extension.</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">objective</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">):</span>\n    <span class=\"n\">outer_product</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">matmul</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">tr_b</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">outer_product</span><span class=\"p\">)</span>\n</pre>\n<p>The AutoGrad, PyTorch, and TensorFlow extensions are not loaded automatically to\nnot enforce a dependency on all three frameworks.\nAn extension can alternatively be loaded via <code>import lab.autograd as B</code>.</p>\n<p>Run it with NumPy and AutoGrad:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">autograd.numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">objective</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"mf\">0.15772589216756833</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">grad</span><span class=\"p\">(</span><span class=\"n\">objective</span><span class=\"p\">)(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">0.23519042</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.06282928</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">0.23519042</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.06282928</span><span class=\"p\">]])</span>\n</pre>\n<p>Run it with TensorFlow:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">objective</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Tensor</span> <span class=\"s1\">'Mean:0'</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">()</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Run it with PyTorch:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">objective</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">tensor</span><span class=\"p\">(</span><span class=\"mf\">1.9557</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n</pre>\n<h2>List of Types</h2>\n<p>This section lists all available types, which can be used to check types of\nobjects or extend functions.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">lab</span> <span class=\"k\">as</span> <span class=\"nn\">B</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">([</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">])],</span> <span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">NPNumeric</span><span class=\"p\">))</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">([</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">])],</span> <span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">TFNumeric</span><span class=\"p\">))</span>\n<span class=\"kc\">False</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">lab.tensorflow</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">((</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">),</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)),</span> <span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">TFNumeric</span><span class=\"p\">))</span>\n<span class=\"kc\">True</span>\n</pre>\n<h3>General</h3>\n<pre><code>Int          # Integers\nFloat        # Floating-point numbers\nBool         # Booleans\nNumber       # Numbers\nNumeric      # Numerical objects, including booleans\nDType        # Data type\nFramework    # Anything accepted by supported frameworks\n</code></pre>\n<h3>NumPy</h3>\n<pre><code>NPNumeric\nNPDType\n \nNP           # Anything NumPy\n</code></pre>\n<h3>AutoGrad</h3>\n<pre><code>AGNumeric\nAGDType\n \nAG           # Anything AutoGrad\n</code></pre>\n<h3>TensorFlow</h3>\n<pre><code>TFNumeric\nTFDType\n \nTF           # Anything TensorFlow\n</code></pre>\n<h3>PyTorch</h3>\n<pre><code>TorchNumeric\nTorchDType\n \nTorch        # Anything PyTorch\n</code></pre>\n<h2>List of Methods</h2>\n<p>This section lists all available constants and methods.</p>\n<ul>\n<li>\n<p>Arguments <em>must</em> be given as arguments and keyword arguments <em>must</em> be\ngiven as keyword arguments.\nFor example, <code>sum(tensor, axis=1)</code> is valid, but <code>sum(tensor, 1)</code> is not.</p>\n</li>\n<li>\n<p>The names of arguments are indicative of their function:</p>\n<ul>\n<li><code>a</code>, <code>b</code>, and <code>c</code> indicate general tensors.</li>\n<li><code>dtype</code> indicates a data type. E.g, <code>np.float32</code> or <code>tf.float64</code>; and\n<code>rand(np.float32)</code> creates a NumPy random number, whereas\n<code>rand(tf.float64)</code> creates a TensorFlow random number.\nData types are always given as the first argument.</li>\n<li><code>shape</code> indicates a shape.\nThe dimensions of a shape are always given as separate arguments to\nthe function.\nE.g., <code>reshape(tensor, 2, 2)</code> is valid, but <code>reshape(tensor, (2, 2))</code>\nis not.</li>\n<li><code>axis</code> indicates an axis over which the function may perform its action.\nAn axis is always given as a keyword argument.</li>\n<li><code>ref</code> indicates a <em>reference tensor</em> from which properties, like its\nshape and data type, will be used. E.g., <code>zeros(tensor)</code> creates a\ntensor full of zeros of the same shape and data type as <code>tensor</code>.</li>\n</ul>\n</li>\n</ul>\n<p>See the documentation for more detailed descriptions of each function.</p>\n<h3>Special Variables</h3>\n<pre><code>default_dtype  # Default data type.\nepsilon        # Magnitude of diagonal to regularise matrices with.\n</code></pre>\n<h3>Constants</h3>\n<pre><code>nan\npi\nlog_2_pi\n</code></pre>\n<h3>Generic</h3>\n<pre><code>isnan(a)\n\nzeros(dtype, *shape)\nzeros(*shape)\nzeros(ref)\n\nones(dtype, *shape)\nones(*shape)\nones(ref)\n\none(dtype)\none(ref)\n\nzero(dtype)\nzero(ref)\n\neye(dtype, *shape)\neye(*shape)\neye(ref)\n\nlinspace(dtype, a, b, num)\nlinspace(a, b, num)\n\nrange(dtype, start, stop, step)\nrange(dtype, stop)\nrange(dtype, start, stop)\nrange(start, stop, step)\nrange(start, stop)\nrange(stop)\n\ncast(dtype, a)\n\nidentity(a)\nnegative(a)\nabs(a)\nsign(a)\nsqrt(a)\nexp(a)\nlog(a)\nsin(a)\ncos(a)\ntan(a)\ntanh(a)\nerf(a)\nsigmoid(a)\nsoftplus(a)\nrelu(a)\n\nadd(a, b)\nsubtract(a, b)\nmultiply(a, b)\ndivide(a, b)\npower(a, b)\nminimum(a, b)\nmaximum(a, b)\nleaky_relu(a, alpha)\n\nmin(a, axis=None)\nmax(a, axis=None)\nsum(a, axis=None)\nmean(a, axis=None)\nstd(a, axis=None)\nlogsumexp(a, axis=None)\n\nall(a, axis=None)\nany(a, axis=None)\n\nlt(a, b)\nle(a, b)\ngt(a, b)\nge(a, b)\n\nbvn_cdf(a, b, c)\n\nscan(f, xs, *init_state)\n\nsort(a, axis=-1, descending=False)\nargsort(a, axis=-1, descending=False)\n\nto_numpy(a)\n</code></pre>\n<h3>Linear Algebra</h3>\n<pre><code>transpose(a, perm=None) (alias: t, T)\nmatmul(a, b, tr_a=False, tr_b=False) (alias: mm, dot)\ntrace(a, axis1=0, axis2=1)\nkron(a, b)\nsvd(a, compute_uv=True)\nsolve(a, b)\ninv(a)\ndet(a) \nlogdet(a) \ncholesky(a) (alias: chol)\n\ncholesky_solve(a, b)  (alias: cholsolve)\ntriangular_solve(a, b, lower_a=True) (alias: trisolve)\ntoeplitz_solve(a, b, c) (alias: toepsolve)\ntoeplitz_solve(a, c)\n\nouter(a, b)\nreg(a, diag=None, clip=True)\n\npw_dists2(a, b)\npw_dists2(a)\npw_dists(a, b)\npw_dists(a)\n\new_dists2(a, b)\new_dists2(a)\new_dists(a, b)\new_dists(a)\n\npw_sums2(a, b)\npw_sums2(a)\npw_sums(a, b)\npw_sums(a)\n\new_sums2(a, b)\new_sums2(a)\new_sums(a, b)\new_sums(a)\n</code></pre>\n<h3>Random</h3>\n<pre><code>set_random_seed(seed) \n\nrand(dtype, *shape)\nrand(*shape)\nrand(ref)\n\nrandn(dtype, *shape)\nrandn(*shape)\nrandn(ref)\n\nchoice(a, n)\nchoice(a)\n</code></pre>\n<h3>Shaping</h3>\n<pre><code>shape(a)\nrank(a)\nlength(a) (alias: size)\nisscalar(a)\nexpand_dims(a, axis=0)\nsqueeze(a)\nuprank(a)\n\ndiag(a)\nflatten(a)\nvec_to_tril(a)\ntril_to_vec(a)\nstack(*elements, axis=0)\nunstack(a, axis=0)\nreshape(a, *shape)\nconcat(*elements, axis=0)\nconcat2d(*rows)\ntile(a, *repeats)\ntake(a, indices, axis=0)\n</code></pre>\n\n          </div>"}, "last_serial": 6479004, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f5638a7a3225f8ed7f68b14bbd62b274", "sha256": "cc1e039bf586cb12f511a13b2bb8152bd998a195183b6f6edd3e1bc4d72a2da2"}, "downloads": -1, "filename": "backends-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f5638a7a3225f8ed7f68b14bbd62b274", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42798, "upload_time": "2019-06-13T15:04:31", "upload_time_iso_8601": "2019-06-13T15:04:31.501769Z", "url": "https://files.pythonhosted.org/packages/2a/d0/6ea113f6956e96aacceb521a989e7cc4d4b4c6b984892d9a949d1649dca9/backends-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f8e0ad0853dbe1bf3a06e674e843fea8", "sha256": "5a37ff907f0b4dd2e57440d294b3f1314ba13c4d833468b80775ce069cd93ef3"}, "downloads": -1, "filename": "backends-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f8e0ad0853dbe1bf3a06e674e843fea8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42693, "upload_time": "2019-06-13T17:22:35", "upload_time_iso_8601": "2019-06-13T17:22:35.521155Z", "url": "https://files.pythonhosted.org/packages/1b/09/04d1cfd631a003699b88f03d17390ca70914868007d2ab44f950f0992027/backends-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b6e50c4ba549439a80a55cc24d1d0995", "sha256": "a625d1cc199526a435cdb2ff1bc59f8404434c84ad1940de0fe3971c4a871f30"}, "downloads": -1, "filename": "backends-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b6e50c4ba549439a80a55cc24d1d0995", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42803, "upload_time": "2019-06-13T17:57:17", "upload_time_iso_8601": "2019-06-13T17:57:17.982883Z", "url": "https://files.pythonhosted.org/packages/ed/17/6c664de9742340a98313b4e521a6bf9a1999d08435b4a5188383f60e60f9/backends-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ef0aa7f812e6d97cf2941977f0e7d705", "sha256": "7b9bb4e6a4f43d7f83b0f52553c816ccab68dc7ff6dae2dd15aa1cc7234518c6"}, "downloads": -1, "filename": "backends-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ef0aa7f812e6d97cf2941977f0e7d705", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43822, "upload_time": "2019-07-09T22:37:30", "upload_time_iso_8601": "2019-07-09T22:37:30.013086Z", "url": "https://files.pythonhosted.org/packages/0b/16/294001ee3d99495916eeff191b592a9c806624c7581ad4aaca7f026f0e97/backends-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "60fd1abe77d1afd84bbfb553624b321e", "sha256": "3121147cab6db243646f8b09bfba1d6cb1192922f349cfabe1a044ce218347aa"}, "downloads": -1, "filename": "backends-0.3.0.tar.gz", "has_sig": false, "md5_digest": "60fd1abe77d1afd84bbfb553624b321e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45838, "upload_time": "2019-10-29T17:31:46", "upload_time_iso_8601": "2019-10-29T17:31:46.030933Z", "url": "https://files.pythonhosted.org/packages/da/f1/610907b46e206cb4f57ead0255e310905da7ee4c3469a1e9157977f1cd0d/backends-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "562a4c70b2ee2ad97060adcfb346354f", "sha256": "ee20abfde34a4a3f48eada76352a1c1ff2e0f67cfc740191f3985a0d825c3974"}, "downloads": -1, "filename": "backends-0.3.1.tar.gz", "has_sig": false, "md5_digest": "562a4c70b2ee2ad97060adcfb346354f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45916, "upload_time": "2019-10-29T21:46:54", "upload_time_iso_8601": "2019-10-29T21:46:54.974328Z", "url": "https://files.pythonhosted.org/packages/ae/88/5940d2fd516f2f2fdc451165916989b68de09c7ec65edcda9163087ac0ff/backends-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "48783d42d8cab9e018389cc5d7b788d7", "sha256": "d432bba08d79f0eddbc2520c9f7fd9e581f9a2d05ec70930c9639af5e7cab122"}, "downloads": -1, "filename": "backends-0.3.2.tar.gz", "has_sig": false, "md5_digest": "48783d42d8cab9e018389cc5d7b788d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 46202, "upload_time": "2019-11-01T15:47:01", "upload_time_iso_8601": "2019-11-01T15:47:01.482788Z", "url": "https://files.pythonhosted.org/packages/6b/a5/a673d18022b177cd9ca2d8a8b2b27d73c696170e01d139a5c76af88a2c1a/backends-0.3.2.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "01ed64417040a5ee41868218fb30c4c5", "sha256": "af46f2481b138d12a213649b3d064423a4639baaab5650fd28bcfb6652d72a77"}, "downloads": -1, "filename": "backends-0.3.4.tar.gz", "has_sig": false, "md5_digest": "01ed64417040a5ee41868218fb30c4c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 46158, "upload_time": "2019-11-06T00:30:49", "upload_time_iso_8601": "2019-11-06T00:30:49.819250Z", "url": "https://files.pythonhosted.org/packages/6c/35/ee94b44559575d320f829eb8a619023506127c0304854022c252154f8d20/backends-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "ba39f37dfd2a58e6ac4cd7e0e2b12d34", "sha256": "b548d9d483da6ba5ac2d83e241704255b5d33078a3e16cd7d27842eb7a4e0660"}, "downloads": -1, "filename": "backends-0.3.5.tar.gz", "has_sig": false, "md5_digest": "ba39f37dfd2a58e6ac4cd7e0e2b12d34", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 46273, "upload_time": "2019-11-09T16:01:44", "upload_time_iso_8601": "2019-11-09T16:01:44.721927Z", "url": "https://files.pythonhosted.org/packages/9c/29/fc23ad44a5a2249615b14b79cdb39c4bb49559be39775dbe163d5eec801c/backends-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "5b1f8bda1b92f63855873bb1aa6de724", "sha256": "610452177cf84b3856e6d4f1dd5171ea0b118e56948f9f616f7d12872ace1e2f"}, "downloads": -1, "filename": "backends-0.3.6.tar.gz", "has_sig": false, "md5_digest": "5b1f8bda1b92f63855873bb1aa6de724", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 45498, "upload_time": "2019-12-26T13:13:46", "upload_time_iso_8601": "2019-12-26T13:13:46.966367Z", "url": "https://files.pythonhosted.org/packages/5c/d9/3c4ea9579aa2c44f769eb8ebad807b1b100623738bc370efdb69d5757775/backends-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "b0f1957a79447c9b50c5219508c202e0", "sha256": "a6b0e55fb41d7525da2aad550ca7982caa290fc01aa6be09d9bbc368e7d4fb70"}, "downloads": -1, "filename": "backends-0.3.7.tar.gz", "has_sig": false, "md5_digest": "b0f1957a79447c9b50c5219508c202e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 45923, "upload_time": "2020-01-18T18:02:26", "upload_time_iso_8601": "2020-01-18T18:02:26.818870Z", "url": "https://files.pythonhosted.org/packages/9c/d6/9b60cf9d301c1140a0a4b64f5513ad464804f98b54520d0057fc4830fdf8/backends-0.3.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b0f1957a79447c9b50c5219508c202e0", "sha256": "a6b0e55fb41d7525da2aad550ca7982caa290fc01aa6be09d9bbc368e7d4fb70"}, "downloads": -1, "filename": "backends-0.3.7.tar.gz", "has_sig": false, "md5_digest": "b0f1957a79447c9b50c5219508c202e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 45923, "upload_time": "2020-01-18T18:02:26", "upload_time_iso_8601": "2020-01-18T18:02:26.818870Z", "url": "https://files.pythonhosted.org/packages/9c/d6/9b60cf9d301c1140a0a4b64f5513ad464804f98b54520d0057fc4830fdf8/backends-0.3.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:08 2020"}