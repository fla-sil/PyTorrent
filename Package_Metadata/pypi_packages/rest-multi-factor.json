{"info": {"author": "Jo\u00ebl Maatkamp", "author_email": "joel.maatkamp@kentivo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django :: 1.11", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP", "Topic :: Security"], "description": "# REST multi factor\n*A multi factor implementation for the django rest framework*\n\n## Overview\nA package that allows for a flexible multi factor implementation.\n\n### Requirements\n* Python (3.5, 3.6, 3.7)\n* Django (1.11 or 2.2+)\n* Django rest framework (3.10+)\n\n### installation\nInstall using pip\n\n```bash\n$ pip install rest-multi-factor\n```\n\nOr if you wan't to include QR-codes for the registration responses of \ndevices like TOTP (for google authenticator) use\n\n```bash\n$ pip install rest-multi-factor[qr]\n```\n\nAdd `\"rest_multi_factor\"` to `INSTALLED_APPS` in you're django settings.\nFor the different multi factor types like TOTP (for google authenticator)\nyou also need to add the plugin name.\n\n```python\nINSTALLED_APPS = [\n    # ...\n    \"rest_multi_factor\",\n    \"rest_multi_factor.plugins.totp\",\n]\n```\n\nIt is advised to add `django-rest-knox` as you're token manager. Please\nread the 'security concerns' section below *before* implementation.\n\n### Resource description\n\n### Terminology\n\n| name         | meaning                                     |\n| ------------ | ------------------------------------------- |\n| device       | a method of multi factor (e.g. TOTP, email) |\n| challenge    | the relation of a device and token          |\n| verification | checking if a OTP value belongs to a token  |\n| registration | registering a device to a user              |\n\n\n#### Overview\n| Method |             Resource            |                 Description                |\n|:-------|:--------------------------------|:-------------------------------------------|\n|  GET   | /multi-factor/                  | Overview of the current users devices      |\n|  GET   | /multi-factor/:index/           | Specifics of a registered device           |\n|  POST  | /multi-factor/:index/           | Validate the current token                 |\n|  POST  | /multi-factor/:index/dispatch/  | Dispatch a challenge (send the value)      |\n|  GET   | /multi-factor/register/         | Get a overview of the available devices    |\n|  POST  | /multi-factor/register/:index/  | Register a new device for the current user |\n\n\n### Security concerns\nWith default configuration are a few security concerns that you might\nwant to solve within you're application:\n\n#### REST framework's authtoken Vs. knox\nWhile by default the rest_framework's authtoken app is configured, do\nwe advice to use knox. This is because knox hashes the tokens before\nthey are stored in the database.\n\nTo resolve this issue you can set the following configurations:\n\n```python\nREST_MULTI_FACTOR = {\n    \"AUTH_TOKEN_MODEL\": \"knox.AuthToken\",\n}\n```\n\nand install knox as described here: \nhttp://james1345.github.io/django-rest-knox/installation/#installing-knox\n\nPlease note: Because django has no (public) swappable relation \nmechanism is it advices to do this before you make the migrations. \nOtherwise you have to remove the migrations, change the settings and\nre-make the migrations.\n\n#### MultiFactorRegistrationViewSet permissions\nBy default will the registration use the  `IsVerifiedOrNoDevice`. This\nwill allow a user that has no registered devices to register a device\nfor himself before he can continue.  If you don't need this behaviour it is \nstrongly advised to override the view like this: \n\n```python\n\"\"\"Viewsets within foobar/viewsets.py\"\"\"\n\nfrom rest_multi_factor.viewsets import MultiFactorRegistrationViewSet\nfrom rest_multi_factor.permissions import IsVerified\n\nclass RegistrationViewSet(MultiFactorRegistrationViewSet):\n    \"\"\"Private registration viewset.\"\"\"\n\n    permission_classes = (IsVerified,)\n```\n\nThan you can update you're urls.py like this:\n\n```python\n\"\"\"Urls within project/urls.py\"\"\"\n\nfrom django.conf.urls import url, include\n\nfrom rest_multi_factor.routers import MultiFactorVerifierRouter\nfrom rest_multi_factor.routers import MultiFactorRegisterRouter\nfrom rest_multi_factor.viewsets import MultiFactorVerifierViewSet\n\nfrom foobar.viewsets import RegistrationViewSet\n\nverifier_router = MultiFactorVerifierRouter()\nverifier_router.register(\"\", MultiFactorVerifierViewSet, \"multi-factor\")\n\nregister_router = MultiFactorRegisterRouter()\nregister_router.register(\n\"register\", RegistrationViewSet, \"multi-factor-register\"\n)\n\n\nurlpatterns = [\n    url(r\"^multi-factor/\", include(verifier_router.urls)),\n    url(r\"^multi-factor/\", include(register_router.urls)),\n]\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/KENTIVO/rest-multi-factor", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rest-multi-factor", "package_url": "https://pypi.org/project/rest-multi-factor/", "platform": "", "project_url": "https://pypi.org/project/rest-multi-factor/", "project_urls": {"Homepage": "https://github.com/KENTIVO/rest-multi-factor"}, "release_url": "https://pypi.org/project/rest-multi-factor/1.1b1/", "requires_dist": ["django", "djangorestframework", "cryptography", "qrcode ; extra == 'qr'", "pillow ; extra == 'qr'", "factory-boy ; extra == 'test'"], "requires_python": "", "summary": "Multi factor for django rest framework", "version": "1.1b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>REST multi factor</h1>\n<p><em>A multi factor implementation for the django rest framework</em></p>\n<h2>Overview</h2>\n<p>A package that allows for a flexible multi factor implementation.</p>\n<h3>Requirements</h3>\n<ul>\n<li>Python (3.5, 3.6, 3.7)</li>\n<li>Django (1.11 or 2.2+)</li>\n<li>Django rest framework (3.10+)</li>\n</ul>\n<h3>installation</h3>\n<p>Install using pip</p>\n<pre>$ pip install rest-multi-factor\n</pre>\n<p>Or if you wan't to include QR-codes for the registration responses of\ndevices like TOTP (for google authenticator) use</p>\n<pre>$ pip install rest-multi-factor<span class=\"o\">[</span>qr<span class=\"o\">]</span>\n</pre>\n<p>Add <code>\"rest_multi_factor\"</code> to <code>INSTALLED_APPS</code> in you're django settings.\nFor the different multi factor types like TOTP (for google authenticator)\nyou also need to add the plugin name.</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s2\">\"rest_multi_factor\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"rest_multi_factor.plugins.totp\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>It is advised to add <code>django-rest-knox</code> as you're token manager. Please\nread the 'security concerns' section below <em>before</em> implementation.</p>\n<h3>Resource description</h3>\n<h3>Terminology</h3>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>device</td>\n<td>a method of multi factor (e.g. TOTP, email)</td>\n</tr>\n<tr>\n<td>challenge</td>\n<td>the relation of a device and token</td>\n</tr>\n<tr>\n<td>verification</td>\n<td>checking if a OTP value belongs to a token</td>\n</tr>\n<tr>\n<td>registration</td>\n<td>registering a device to a user</td>\n</tr></tbody></table>\n<h4>Overview</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Method</th>\n<th align=\"left\">Resource</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">GET</td>\n<td align=\"left\">/multi-factor/</td>\n<td align=\"left\">Overview of the current users devices</td>\n</tr>\n<tr>\n<td align=\"left\">GET</td>\n<td align=\"left\">/multi-factor/:index/</td>\n<td align=\"left\">Specifics of a registered device</td>\n</tr>\n<tr>\n<td align=\"left\">POST</td>\n<td align=\"left\">/multi-factor/:index/</td>\n<td align=\"left\">Validate the current token</td>\n</tr>\n<tr>\n<td align=\"left\">POST</td>\n<td align=\"left\">/multi-factor/:index/dispatch/</td>\n<td align=\"left\">Dispatch a challenge (send the value)</td>\n</tr>\n<tr>\n<td align=\"left\">GET</td>\n<td align=\"left\">/multi-factor/register/</td>\n<td align=\"left\">Get a overview of the available devices</td>\n</tr>\n<tr>\n<td align=\"left\">POST</td>\n<td align=\"left\">/multi-factor/register/:index/</td>\n<td align=\"left\">Register a new device for the current user</td>\n</tr></tbody></table>\n<h3>Security concerns</h3>\n<p>With default configuration are a few security concerns that you might\nwant to solve within you're application:</p>\n<h4>REST framework's authtoken Vs. knox</h4>\n<p>While by default the rest_framework's authtoken app is configured, do\nwe advice to use knox. This is because knox hashes the tokens before\nthey are stored in the database.</p>\n<p>To resolve this issue you can set the following configurations:</p>\n<pre><span class=\"n\">REST_MULTI_FACTOR</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"AUTH_TOKEN_MODEL\"</span><span class=\"p\">:</span> <span class=\"s2\">\"knox.AuthToken\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>and install knox as described here:\n<a href=\"http://james1345.github.io/django-rest-knox/installation/#installing-knox\" rel=\"nofollow\">http://james1345.github.io/django-rest-knox/installation/#installing-knox</a></p>\n<p>Please note: Because django has no (public) swappable relation\nmechanism is it advices to do this before you make the migrations.\nOtherwise you have to remove the migrations, change the settings and\nre-make the migrations.</p>\n<h4>MultiFactorRegistrationViewSet permissions</h4>\n<p>By default will the registration use the  <code>IsVerifiedOrNoDevice</code>. This\nwill allow a user that has no registered devices to register a device\nfor himself before he can continue.  If you don't need this behaviour it is\nstrongly advised to override the view like this:</p>\n<pre><span class=\"sd\">\"\"\"Viewsets within foobar/viewsets.py\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">rest_multi_factor.viewsets</span> <span class=\"kn\">import</span> <span class=\"n\">MultiFactorRegistrationViewSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_multi_factor.permissions</span> <span class=\"kn\">import</span> <span class=\"n\">IsVerified</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RegistrationViewSet</span><span class=\"p\">(</span><span class=\"n\">MultiFactorRegistrationViewSet</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Private registration viewset.\"\"\"</span>\n\n    <span class=\"n\">permission_classes</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">IsVerified</span><span class=\"p\">,)</span>\n</pre>\n<p>Than you can update you're urls.py like this:</p>\n<pre><span class=\"sd\">\"\"\"Urls within project/urls.py\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">rest_multi_factor.routers</span> <span class=\"kn\">import</span> <span class=\"n\">MultiFactorVerifierRouter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_multi_factor.routers</span> <span class=\"kn\">import</span> <span class=\"n\">MultiFactorRegisterRouter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_multi_factor.viewsets</span> <span class=\"kn\">import</span> <span class=\"n\">MultiFactorVerifierViewSet</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">foobar.viewsets</span> <span class=\"kn\">import</span> <span class=\"n\">RegistrationViewSet</span>\n\n<span class=\"n\">verifier_router</span> <span class=\"o\">=</span> <span class=\"n\">MultiFactorVerifierRouter</span><span class=\"p\">()</span>\n<span class=\"n\">verifier_router</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">MultiFactorVerifierViewSet</span><span class=\"p\">,</span> <span class=\"s2\">\"multi-factor\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">register_router</span> <span class=\"o\">=</span> <span class=\"n\">MultiFactorRegisterRouter</span><span class=\"p\">()</span>\n<span class=\"n\">register_router</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span>\n<span class=\"s2\">\"register\"</span><span class=\"p\">,</span> <span class=\"n\">RegistrationViewSet</span><span class=\"p\">,</span> <span class=\"s2\">\"multi-factor-register\"</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^multi-factor/\"</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">verifier_router</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">)),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^multi-factor/\"</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">register_router</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n\n          </div>"}, "last_serial": 5782763, "releases": {"1.0b0": [{"comment_text": "", "digests": {"md5": "a1d463923ecd507dbedcd05113887af9", "sha256": "ffd8c3cb0184c3423e163b41b2509e57a59e763d348988e365e929f197d389b8"}, "downloads": -1, "filename": "rest_multi_factor-1.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "a1d463923ecd507dbedcd05113887af9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39419, "upload_time": "2019-08-26T09:10:30", "upload_time_iso_8601": "2019-08-26T09:10:30.833726Z", "url": "https://files.pythonhosted.org/packages/fa/3c/532a46c1a3509937e27086d86cb7ba463077fdc0e17d28e8afb4c035d42e/rest_multi_factor-1.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3944a4fed2cbc1124363d068191a492e", "sha256": "2888ec29e76a630e9cb8f0e14590f2e1b6e335ab044c13550dad02f5fd470848"}, "downloads": -1, "filename": "rest-multi-factor-1.0b0.tar.gz", "has_sig": false, "md5_digest": "3944a4fed2cbc1124363d068191a492e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25775, "upload_time": "2019-08-26T09:10:33", "upload_time_iso_8601": "2019-08-26T09:10:33.236484Z", "url": "https://files.pythonhosted.org/packages/07/cb/f9d5ecb7a3380635e628b4d12eb6ab33f78540a65ca7e08c2ca0b84a39b8/rest-multi-factor-1.0b0.tar.gz", "yanked": false}], "1.1b1": [{"comment_text": "", "digests": {"md5": "b5a7e95fd7867d8eb0f05909f7eb44e4", "sha256": "ffbaa9274e329de9f77b478b42ab2d51368d105c4bcbadcc42f811c755f77f59"}, "downloads": -1, "filename": "rest_multi_factor-1.1b1-py3-none-any.whl", "has_sig": false, "md5_digest": "b5a7e95fd7867d8eb0f05909f7eb44e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44987, "upload_time": "2019-09-04T18:00:54", "upload_time_iso_8601": "2019-09-04T18:00:54.353604Z", "url": "https://files.pythonhosted.org/packages/a8/a5/3897ee754daa60c78a9d9a452e9a366c6b3bbac5d87586e95a38931c2387/rest_multi_factor-1.1b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "beae399ff30d68674a405b7a40b2a7a4", "sha256": "405b33342cab6c2f6a7a2fb760f4ab89c7d53398faf32d6a6fa11adfbe052e3c"}, "downloads": -1, "filename": "rest-multi-factor-1.1b1.tar.gz", "has_sig": false, "md5_digest": "beae399ff30d68674a405b7a40b2a7a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27793, "upload_time": "2019-09-04T18:00:56", "upload_time_iso_8601": "2019-09-04T18:00:56.387235Z", "url": "https://files.pythonhosted.org/packages/46/07/541dff50abc9ec6811ac6aa578056e7e8428d9e8949b1c5b8f92a910f280/rest-multi-factor-1.1b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b5a7e95fd7867d8eb0f05909f7eb44e4", "sha256": "ffbaa9274e329de9f77b478b42ab2d51368d105c4bcbadcc42f811c755f77f59"}, "downloads": -1, "filename": "rest_multi_factor-1.1b1-py3-none-any.whl", "has_sig": false, "md5_digest": "b5a7e95fd7867d8eb0f05909f7eb44e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44987, "upload_time": "2019-09-04T18:00:54", "upload_time_iso_8601": "2019-09-04T18:00:54.353604Z", "url": "https://files.pythonhosted.org/packages/a8/a5/3897ee754daa60c78a9d9a452e9a366c6b3bbac5d87586e95a38931c2387/rest_multi_factor-1.1b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "beae399ff30d68674a405b7a40b2a7a4", "sha256": "405b33342cab6c2f6a7a2fb760f4ab89c7d53398faf32d6a6fa11adfbe052e3c"}, "downloads": -1, "filename": "rest-multi-factor-1.1b1.tar.gz", "has_sig": false, "md5_digest": "beae399ff30d68674a405b7a40b2a7a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27793, "upload_time": "2019-09-04T18:00:56", "upload_time_iso_8601": "2019-09-04T18:00:56.387235Z", "url": "https://files.pythonhosted.org/packages/46/07/541dff50abc9ec6811ac6aa578056e7e8428d9e8949b1c5b8f92a910f280/rest-multi-factor-1.1b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:35 2020"}