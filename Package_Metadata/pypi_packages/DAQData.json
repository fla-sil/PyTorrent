{"info": {"author": "Sumeet Kumar Sinha", "author_email": "sumeet.kumar507@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering"], "description": "DAQData\n=========\n\n### Usage\n\nRead and plot slow and fast data binary files from centrifuge experiments conducted at Center of Geotechnical Modeling at University of California Davis\n\n### Features\n* Reads slow and fast data binary files.\n* List downs all the sensors,channels,configuration list, sampling rate...\n* Extract all data or a subset of a data within a time frame as a pandas DataFrame object\n* Plot data directly from the binary file.\n* supports reading and plotting large data files.\n\n## Installation\nThis package is availably via pypi:\n```\npip install DAQData\n```\n\n## Read meta data from the binary file\n```python\nimport DAQData as DQ;\n\n# Centrifuge CGM (UC Davis) data file. Can be slow as well as fast data \nData_File = \"./Binary_Data_Files/07122019@121326@154548@64.4rpm.bin\";\n\n# By default the, 'Extract_Data' parameter is set to be True. If the files are\n# very large and only meta data needs to be checked, the data extraction can be\n# stooped by setting 'Extract_Data' parameter false. This would increase the\n# execution speed but will not read any data \nData_DAQ = DQ.DAQ(Data_File,Extract_Data=True);\n\n# To print all the meta data \nprint(Data_DAQ)\n\n\n# Extracting meta data\nFileName                      = Data_DAQ.FileName; # gets the filename\nSampling_Rate                 = Data_DAQ.Sampling_Rate; # gets Sampling_Rate\nNumber_of_Channels            = Data_DAQ.Number_of_Channels; # gets number of channels\nNumber_of_Hardware_Channels   = Data_DAQ.Number_of_Hardware_Channels; # gets number of hardware channels\nNumber_of_Sensors             = Data_DAQ.Number_of_Sensors # gets number of Xdcr_Serial Numbers (also referred as sensors)\nChannel_List                  = Data_DAQ.Channel_List; # gets the channel list\nHardware_Channel_List         = Data_DAQ.Hardware_Channel_List; # get the hardware channel list\nSensor_List                   = Data_DAQ.Sensor_List; # gets the sensor list \nNumber_of_Samples             = Data_DAQ.Number_of_Samples; # gets the total number of samples per sensor \nData_Length                   = Data_DAQ.Data_Length; # gets the total data length in the binary file. Number_of_Samples*Number_of_sensors\nChannel_Dictionary            = Data_DAQ.Channel_Dictionary; # returns a dictionary of channel name to the column number in the Channel List  \nExcelConfig                   = Data_DAQ.ExcelConfig; # return excel configuration file as a csv string \n\n```\n### Extract data on demand\n\n```python\nimport DAQData as DQ;\n\nData_File = \"./Binary_Data_Files/07122019@121326@154548@64.4rpm.bin\";\nData_DAQ  = DQ.DAQ(Data_File,Extract_Data=True);\n\n\n# If the 'Extract_Data' parameter is True, the whole data is already read and extracted and can be easily retrieved as\nSensor_Data         = Data_DAQ.Sensor_Data;\t# 2-D pandas DataFrame with column names (headers) as Channel Names \nprint(Sensor_Data.head(2)); # shows first 2 rows of the data set\n# print(Sensor_Data.shape); # gets the size of the dataset (rows,columns)\n# print(Sensor_Data['ICP1-0']) # will retrieve the data for channel no  'ICP1-0'\n# print(Sensor_Data.columns) # will show all the header names in the data. It is the same as the Channel List. \n\n# The column names can be renamed to sensor names or any other meaningful names as shown below\nSensor_Data.columns = [\"TIME (s)\",\"EAST (g)\",\"WEST (g)\",\"P1_ACC_H2 (g)\",\"P2_ACC_H2 (g)\",\"P1_G1 (lbf)\",\"P1_G2 (lbf)\",\"P1_G3 (lbf)\",\"P1_G4 (lbf)\",\"P1_G5 (lbf)\",\"P1_G6 (lbf)\",\"P1_G7 (lbf)\",\"P1_G8 (lbf)\",\"P2_ACC-V1 (g)\",\"P2_ACC_H1 (g)\",\"4th RING (g)\",\"SOUTH (g)\",\"P1_ACC_H1 (g)\",\"P1_ACC_V1 (g)\",\"NORTH (g)\",\"P2_G1 (lbf)\",\"P2_G2 (lbf)\",\"P2_G3 (lbf)\",\"P2_G4 (lbf)\",\"P2_G5 (lbf)\",\"P2_G6 (lbf)\",\"P2_G7 (lbf)\",\"P2_G8 (lbf)\",\"P1_G9 (lbf)\",\"P2_G9 (lbf)\",\"dummy3\",\"Dummy_2\",\"PPT_5 (kPa)\",\"PPT_3 (kPa)\",\"PPT_9 (kPa)\",\"PPT_1 (kPa)\",\"PPT_8 (kPa)\",\"PPT_6 (kPa)\",\"PPT_2 (kPa)\",\"PPT_7 (kPa)\",\"PPT_5442\",\"PPT_4 (kPa)\",\"PPT_10 (kPa)\",\"PPT_10_Proxy (kPa)\",\"Dummy-127926\",\"ACC_6 (g)\",\"ACC_1 (g)\",\"ACC_3 (g)\",\"ACC_5 (g)\",\"ACC_2 (g)\",\"ACC_7 (g)\",\"ACC_4 (g)\",\"dummy21320\",\"dummy-108849\",\"PT 9F008\",\"P2_LP (mm)\",\"P2_MEM (g)\",\"SM2 (mm)\",\"P1_MEM (g)\",\"P1_LP (mm)\",\"SM1 (mm)\",\"PPT_22 (kPa)\",\"PPT_14 (kPa)\",\"PPT_16 (kPa)\",\"PPT_15 (kPa)\",\"PPT_21 (kPa)\",\"MS5407_115\",\"PPT_18 (kPa)\",\"PPT_20 (kPa)\",\"PPT_19 (kPa)\",\"PPT_12 (kPa)\",\"PPT_1 (kPa)\",\"PPT_11 (kPa)\",\"PPT_17 (kPa)\",\"CPT (lbf)\",\"EXT (lbf)\",\"PLT (lbf)\",\"ACT (mm)\"]; # here as an example the channel names 'ICP1-0' is renamed to 'EAST (g)'\nprint(Sensor_Data.head(2)); # shows first 2 columns of the data with new column names\n# print(Sensor_Data['EAST (g)']) # will retrieve the data corresponding to column name  'EAST (g)'. Will give the same result (print(Sensor_Data['ICP1-0'])) has the headers or column names not renames \n\n# If the 'Extract_Data' parameter was initially set to False, the data can be extracted on demand by defining the start and end time\n# ..... Time_Data, Sesnor_Data = Data_DAQ.Extract(Start_Time=0, End_Time=10)\n# To extract the whole data, set the start time to be 0 and end time to be Number_of_Samples/Sampling_Rate\n\nData_DAQ  = DQ.DAQ(Data_File,Extract_Data=False);\nSensor_Data = Data_DAQ.Extract(Start_Time=0,End_Time=Number_of_Samples/Sampling_Rate);\n\n# print(Sensor_Data.shape) # would return the same length of data as above \n```\n### Plot data \n\n```python\nimport DAQData as DQ;\n\nData_File = \"./Binary_Data_Files/07122019@121326@154548@64.4rpm.bin\";\nData_DAQ  = DQ.DAQ(Data_File,Extract_Data=True);\n\nSensor_Data = Data_DAQ.Sensor_Data;\n\n# get the time data \nTime_Data   = Sensor_Data['TIME']; \n# if the headers were changed as in the previous above examples \n# it can be extracted as Time_Data   = Sensor_Data['TIME (s)']; \n\n# get the sensor data of interest\n# extract the data from the Sensor_Data DataFrame\nInput_Acceleration    = Sensor_Data['ICP1-0'];\n# if the headers were changed as in the previous above examples \n# it can be extracted as Time_Data   = Sensor_Data['EAST (g)']; \n\n# extract the sensor name\nSensor_Name   = Data_DAQ.Sensor_List[Data_DAQ.get_Channel_Index(Channel_Name='ICP1-0')];\n\nimport matplotlib.pyplot as plt;\n\nplt.figure(figsize=(8,3));\nplt.plot(Time_Data,Input_Acceleration,'k',label=Sensor_Name);\nplt.legend(loc='best')\nplt.grid(axis='both', which='major', ls='-')\nplt.grid(axis='both', which='minor', ls='--', alpha=0.4)\nplt.minorticks_on()\nplt.xlabel('Time [s]')\nplt.ylabel('Acc [g]')\nplt.ylim([-10,10])\nplt.tight_layout();\nplt.show();\n```\n![example3](https://raw.githubusercontent.com/SumeetSinha/DAQData/master/Input_Motion.png)\n\n----\n\nSend your comments, bugs, issues and features to add to [Sumeet Kumar Sinha](http://www.sumeetksinha.com) at sumeet.kumar507@gmail.com. \nPlease feel free to create issues on https://github.com/SumeetSinha/DAQData/issues\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SumeetSinha/DAQData", "keywords": "Centrifuge,Center of Geotechnical MOdeling,CGM,UC Davis,Binary Data", "license": "", "maintainer": "", "maintainer_email": "", "name": "DAQData", "package_url": "https://pypi.org/project/DAQData/", "platform": "", "project_url": "https://pypi.org/project/DAQData/", "project_urls": {"Homepage": "https://github.com/SumeetSinha/DAQData"}, "release_url": "https://pypi.org/project/DAQData/2.5/", "requires_dist": ["matplotlib", "pandas"], "requires_python": ">=2", "summary": "Read and plot slow and fast data binary files from centrifuge experiments conducted at Center of Geotechnical Modeling at University of California Davis", "version": "2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DAQData</h1>\n<h3>Usage</h3>\n<p>Read and plot slow and fast data binary files from centrifuge experiments conducted at Center of Geotechnical Modeling at University of California Davis</p>\n<h3>Features</h3>\n<ul>\n<li>Reads slow and fast data binary files.</li>\n<li>List downs all the sensors,channels,configuration list, sampling rate...</li>\n<li>Extract all data or a subset of a data within a time frame as a pandas DataFrame object</li>\n<li>Plot data directly from the binary file.</li>\n<li>supports reading and plotting large data files.</li>\n</ul>\n<h2>Installation</h2>\n<p>This package is availably via pypi:</p>\n<pre><code>pip install DAQData\n</code></pre>\n<h2>Read meta data from the binary file</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">DAQData</span> <span class=\"k\">as</span> <span class=\"nn\">DQ</span><span class=\"p\">;</span>\n\n<span class=\"c1\"># Centrifuge CGM (UC Davis) data file. Can be slow as well as fast data </span>\n<span class=\"n\">Data_File</span> <span class=\"o\">=</span> <span class=\"s2\">\"./Binary_Data_Files/07122019@121326@154548@64.4rpm.bin\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\"># By default the, 'Extract_Data' parameter is set to be True. If the files are</span>\n<span class=\"c1\"># very large and only meta data needs to be checked, the data extraction can be</span>\n<span class=\"c1\"># stooped by setting 'Extract_Data' parameter false. This would increase the</span>\n<span class=\"c1\"># execution speed but will not read any data </span>\n<span class=\"n\">Data_DAQ</span> <span class=\"o\">=</span> <span class=\"n\">DQ</span><span class=\"o\">.</span><span class=\"n\">DAQ</span><span class=\"p\">(</span><span class=\"n\">Data_File</span><span class=\"p\">,</span><span class=\"n\">Extract_Data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">);</span>\n\n<span class=\"c1\"># To print all the meta data </span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Data_DAQ</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Extracting meta data</span>\n<span class=\"n\">FileName</span>                      <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">FileName</span><span class=\"p\">;</span> <span class=\"c1\"># gets the filename</span>\n<span class=\"n\">Sampling_Rate</span>                 <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Sampling_Rate</span><span class=\"p\">;</span> <span class=\"c1\"># gets Sampling_Rate</span>\n<span class=\"n\">Number_of_Channels</span>            <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Number_of_Channels</span><span class=\"p\">;</span> <span class=\"c1\"># gets number of channels</span>\n<span class=\"n\">Number_of_Hardware_Channels</span>   <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Number_of_Hardware_Channels</span><span class=\"p\">;</span> <span class=\"c1\"># gets number of hardware channels</span>\n<span class=\"n\">Number_of_Sensors</span>             <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Number_of_Sensors</span> <span class=\"c1\"># gets number of Xdcr_Serial Numbers (also referred as sensors)</span>\n<span class=\"n\">Channel_List</span>                  <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Channel_List</span><span class=\"p\">;</span> <span class=\"c1\"># gets the channel list</span>\n<span class=\"n\">Hardware_Channel_List</span>         <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Hardware_Channel_List</span><span class=\"p\">;</span> <span class=\"c1\"># get the hardware channel list</span>\n<span class=\"n\">Sensor_List</span>                   <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Sensor_List</span><span class=\"p\">;</span> <span class=\"c1\"># gets the sensor list </span>\n<span class=\"n\">Number_of_Samples</span>             <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Number_of_Samples</span><span class=\"p\">;</span> <span class=\"c1\"># gets the total number of samples per sensor </span>\n<span class=\"n\">Data_Length</span>                   <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Data_Length</span><span class=\"p\">;</span> <span class=\"c1\"># gets the total data length in the binary file. Number_of_Samples*Number_of_sensors</span>\n<span class=\"n\">Channel_Dictionary</span>            <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Channel_Dictionary</span><span class=\"p\">;</span> <span class=\"c1\"># returns a dictionary of channel name to the column number in the Channel List  </span>\n<span class=\"n\">ExcelConfig</span>                   <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">ExcelConfig</span><span class=\"p\">;</span> <span class=\"c1\"># return excel configuration file as a csv string </span>\n</pre>\n<h3>Extract data on demand</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">DAQData</span> <span class=\"k\">as</span> <span class=\"nn\">DQ</span><span class=\"p\">;</span>\n\n<span class=\"n\">Data_File</span> <span class=\"o\">=</span> <span class=\"s2\">\"./Binary_Data_Files/07122019@121326@154548@64.4rpm.bin\"</span><span class=\"p\">;</span>\n<span class=\"n\">Data_DAQ</span>  <span class=\"o\">=</span> <span class=\"n\">DQ</span><span class=\"o\">.</span><span class=\"n\">DAQ</span><span class=\"p\">(</span><span class=\"n\">Data_File</span><span class=\"p\">,</span><span class=\"n\">Extract_Data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">);</span>\n\n\n<span class=\"c1\"># If the 'Extract_Data' parameter is True, the whole data is already read and extracted and can be easily retrieved as</span>\n<span class=\"n\">Sensor_Data</span>         <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Sensor_Data</span><span class=\"p\">;</span>\t<span class=\"c1\"># 2-D pandas DataFrame with column names (headers) as Channel Names </span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Sensor_Data</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span> <span class=\"c1\"># shows first 2 rows of the data set</span>\n<span class=\"c1\"># print(Sensor_Data.shape); # gets the size of the dataset (rows,columns)</span>\n<span class=\"c1\"># print(Sensor_Data['ICP1-0']) # will retrieve the data for channel no  'ICP1-0'</span>\n<span class=\"c1\"># print(Sensor_Data.columns) # will show all the header names in the data. It is the same as the Channel List. </span>\n\n<span class=\"c1\"># The column names can be renamed to sensor names or any other meaningful names as shown below</span>\n<span class=\"n\">Sensor_Data</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"TIME (s)\"</span><span class=\"p\">,</span><span class=\"s2\">\"EAST (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"WEST (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_ACC_H2 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_ACC_H2 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_G1 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_G2 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_G3 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_G4 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_G5 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_G6 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_G7 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_G8 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_ACC-V1 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_ACC_H1 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"4th RING (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"SOUTH (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_ACC_H1 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_ACC_V1 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"NORTH (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_G1 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_G2 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_G3 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_G4 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_G5 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_G6 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_G7 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_G8 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_G9 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_G9 (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"dummy3\"</span><span class=\"p\">,</span><span class=\"s2\">\"Dummy_2\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_5 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_3 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_9 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_1 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_8 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_6 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_2 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_7 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_5442\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_4 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_10 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_10_Proxy (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"Dummy-127926\"</span><span class=\"p\">,</span><span class=\"s2\">\"ACC_6 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"ACC_1 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"ACC_3 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"ACC_5 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"ACC_2 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"ACC_7 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"ACC_4 (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"dummy21320\"</span><span class=\"p\">,</span><span class=\"s2\">\"dummy-108849\"</span><span class=\"p\">,</span><span class=\"s2\">\"PT 9F008\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_LP (mm)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P2_MEM (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"SM2 (mm)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_MEM (g)\"</span><span class=\"p\">,</span><span class=\"s2\">\"P1_LP (mm)\"</span><span class=\"p\">,</span><span class=\"s2\">\"SM1 (mm)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_22 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_14 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_16 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_15 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_21 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"MS5407_115\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_18 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_20 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_19 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_12 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_1 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_11 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PPT_17 (kPa)\"</span><span class=\"p\">,</span><span class=\"s2\">\"CPT (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"EXT (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"PLT (lbf)\"</span><span class=\"p\">,</span><span class=\"s2\">\"ACT (mm)\"</span><span class=\"p\">];</span> <span class=\"c1\"># here as an example the channel names 'ICP1-0' is renamed to 'EAST (g)'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Sensor_Data</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span> <span class=\"c1\"># shows first 2 columns of the data with new column names</span>\n<span class=\"c1\"># print(Sensor_Data['EAST (g)']) # will retrieve the data corresponding to column name  'EAST (g)'. Will give the same result (print(Sensor_Data['ICP1-0'])) has the headers or column names not renames </span>\n\n<span class=\"c1\"># If the 'Extract_Data' parameter was initially set to False, the data can be extracted on demand by defining the start and end time</span>\n<span class=\"c1\"># ..... Time_Data, Sesnor_Data = Data_DAQ.Extract(Start_Time=0, End_Time=10)</span>\n<span class=\"c1\"># To extract the whole data, set the start time to be 0 and end time to be Number_of_Samples/Sampling_Rate</span>\n\n<span class=\"n\">Data_DAQ</span>  <span class=\"o\">=</span> <span class=\"n\">DQ</span><span class=\"o\">.</span><span class=\"n\">DAQ</span><span class=\"p\">(</span><span class=\"n\">Data_File</span><span class=\"p\">,</span><span class=\"n\">Extract_Data</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">);</span>\n<span class=\"n\">Sensor_Data</span> <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Extract</span><span class=\"p\">(</span><span class=\"n\">Start_Time</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">End_Time</span><span class=\"o\">=</span><span class=\"n\">Number_of_Samples</span><span class=\"o\">/</span><span class=\"n\">Sampling_Rate</span><span class=\"p\">);</span>\n\n<span class=\"c1\"># print(Sensor_Data.shape) # would return the same length of data as above </span>\n</pre>\n<h3>Plot data</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">DAQData</span> <span class=\"k\">as</span> <span class=\"nn\">DQ</span><span class=\"p\">;</span>\n\n<span class=\"n\">Data_File</span> <span class=\"o\">=</span> <span class=\"s2\">\"./Binary_Data_Files/07122019@121326@154548@64.4rpm.bin\"</span><span class=\"p\">;</span>\n<span class=\"n\">Data_DAQ</span>  <span class=\"o\">=</span> <span class=\"n\">DQ</span><span class=\"o\">.</span><span class=\"n\">DAQ</span><span class=\"p\">(</span><span class=\"n\">Data_File</span><span class=\"p\">,</span><span class=\"n\">Extract_Data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">);</span>\n\n<span class=\"n\">Sensor_Data</span> <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Sensor_Data</span><span class=\"p\">;</span>\n\n<span class=\"c1\"># get the time data </span>\n<span class=\"n\">Time_Data</span>   <span class=\"o\">=</span> <span class=\"n\">Sensor_Data</span><span class=\"p\">[</span><span class=\"s1\">'TIME'</span><span class=\"p\">];</span> \n<span class=\"c1\"># if the headers were changed as in the previous above examples </span>\n<span class=\"c1\"># it can be extracted as Time_Data   = Sensor_Data['TIME (s)']; </span>\n\n<span class=\"c1\"># get the sensor data of interest</span>\n<span class=\"c1\"># extract the data from the Sensor_Data DataFrame</span>\n<span class=\"n\">Input_Acceleration</span>    <span class=\"o\">=</span> <span class=\"n\">Sensor_Data</span><span class=\"p\">[</span><span class=\"s1\">'ICP1-0'</span><span class=\"p\">];</span>\n<span class=\"c1\"># if the headers were changed as in the previous above examples </span>\n<span class=\"c1\"># it can be extracted as Time_Data   = Sensor_Data['EAST (g)']; </span>\n\n<span class=\"c1\"># extract the sensor name</span>\n<span class=\"n\">Sensor_Name</span>   <span class=\"o\">=</span> <span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">Sensor_List</span><span class=\"p\">[</span><span class=\"n\">Data_DAQ</span><span class=\"o\">.</span><span class=\"n\">get_Channel_Index</span><span class=\"p\">(</span><span class=\"n\">Channel_Name</span><span class=\"o\">=</span><span class=\"s1\">'ICP1-0'</span><span class=\"p\">)];</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span><span class=\"p\">;</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">));</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">Time_Data</span><span class=\"p\">,</span><span class=\"n\">Input_Acceleration</span><span class=\"p\">,</span><span class=\"s1\">'k'</span><span class=\"p\">,</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">Sensor_Name</span><span class=\"p\">);</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">'best'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">'both'</span><span class=\"p\">,</span> <span class=\"n\">which</span><span class=\"o\">=</span><span class=\"s1\">'major'</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'-'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">'both'</span><span class=\"p\">,</span> <span class=\"n\">which</span><span class=\"o\">=</span><span class=\"s1\">'minor'</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">minorticks_on</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">'Time [s]'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Acc [g]'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylim</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">tight_layout</span><span class=\"p\">();</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">();</span>\n</pre>\n<p><img alt=\"example3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e773b339d7bb8866616e54dfa589d5b3917ba13a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f53756d65657453696e68612f444151446174612f6d61737465722f496e7075745f4d6f74696f6e2e706e67\"></p>\n<hr>\n<p>Send your comments, bugs, issues and features to add to <a href=\"http://www.sumeetksinha.com\" rel=\"nofollow\">Sumeet Kumar Sinha</a> at <a href=\"mailto:sumeet.kumar507@gmail.com\">sumeet.kumar507@gmail.com</a>.\nPlease feel free to create issues on <a href=\"https://github.com/SumeetSinha/DAQData/issues\" rel=\"nofollow\">https://github.com/SumeetSinha/DAQData/issues</a></p>\n\n          </div>"}, "last_serial": 6265415, "releases": {"2.1": [{"comment_text": "", "digests": {"md5": "fdc09f6e673c549877bf5f39e3593977", "sha256": "ddcbaac9816fbc98ddfbcee5ea5eba2ea5325b62de819e5592a742e64c2d4e75"}, "downloads": -1, "filename": "DAQData-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fdc09f6e673c549877bf5f39e3593977", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2", "size": 18621, "upload_time": "2019-10-05T00:18:55", "upload_time_iso_8601": "2019-10-05T00:18:55.795929Z", "url": "https://files.pythonhosted.org/packages/5c/18/5736d65318ca2a6485a5753e623bd512f52ca760e8184a54d3005535cbba/DAQData-2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be97a40571c1f6d2dbf5f0e8e813540d", "sha256": "db289757f5653c39f0d0db7296e60836eea649217dd1ca7be9fa318a6e087fd3"}, "downloads": -1, "filename": "DAQData-2.1.tar.gz", "has_sig": false, "md5_digest": "be97a40571c1f6d2dbf5f0e8e813540d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 7719, "upload_time": "2019-10-05T00:18:58", "upload_time_iso_8601": "2019-10-05T00:18:58.228114Z", "url": "https://files.pythonhosted.org/packages/39/b3/4c7d51921e580850a9407c18f0e7e9f5307e5f9384d2979063065a1d633a/DAQData-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "858544e442f4ab9e6e8e5d7b2c7f27f9", "sha256": "29b72d3cc65ea44f5556d131c4c4d2180eba820f785670f6c8736db2aa79a0e8"}, "downloads": -1, "filename": "DAQData-2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "858544e442f4ab9e6e8e5d7b2c7f27f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2", "size": 19201, "upload_time": "2019-10-19T20:31:23", "upload_time_iso_8601": "2019-10-19T20:31:23.411750Z", "url": "https://files.pythonhosted.org/packages/a1/cd/24ba34b812d259fcbe3c2f750403b7c003abc07a43778af01ffdfd0ba9b0/DAQData-2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8129083d4354c33943b735f4f79ace2", "sha256": "88e2dded41fe8df11bf776c40e43b37c4c6fa5a519a46822375a56997cb7a72f"}, "downloads": -1, "filename": "DAQData-2.2.tar.gz", "has_sig": false, "md5_digest": "d8129083d4354c33943b735f4f79ace2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 9076, "upload_time": "2019-10-19T20:31:25", "upload_time_iso_8601": "2019-10-19T20:31:25.335107Z", "url": "https://files.pythonhosted.org/packages/ef/f9/a979827be5b2ed76b2108a73f4ae9278b0f57fc2af2884f36bcc35ef0c0b/DAQData-2.2.tar.gz", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "73af9b93aef9606cd87f05730dc6b446", "sha256": "8700462403eff9a5ea4029105d8a2baa620904c1a8a97c290c79381d1146f8bf"}, "downloads": -1, "filename": "DAQData-2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "73af9b93aef9606cd87f05730dc6b446", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2", "size": 19198, "upload_time": "2019-11-02T02:28:20", "upload_time_iso_8601": "2019-11-02T02:28:20.802124Z", "url": "https://files.pythonhosted.org/packages/ca/ee/a2a32ba03e7d7179b75fa4d4bf7e68e34c2b0ece96b790d7d4aa2376b6d2/DAQData-2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53cfa04d32a3a9f8f2b901e00f724714", "sha256": "a9f64b48dbbd3bb79c7087a9c43e308072452da8ad9ffcc5c6ebf3c3a7004ed9"}, "downloads": -1, "filename": "DAQData-2.3.tar.gz", "has_sig": false, "md5_digest": "53cfa04d32a3a9f8f2b901e00f724714", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 9074, "upload_time": "2019-11-02T02:28:22", "upload_time_iso_8601": "2019-11-02T02:28:22.651664Z", "url": "https://files.pythonhosted.org/packages/d1/03/077cc382fdf532fa830b1b5caca384a0f634865e96e230603b8cf66fd3bc/DAQData-2.3.tar.gz", "yanked": false}], "2.4": [{"comment_text": "", "digests": {"md5": "3e6bfdf4e73d020969390003787fb166", "sha256": "7fef915679279a770f0c3c9e4d6113c3e97674d6b33c19650b08a120ac5626f6"}, "downloads": -1, "filename": "DAQData-2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3e6bfdf4e73d020969390003787fb166", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2", "size": 19253, "upload_time": "2019-12-09T08:54:27", "upload_time_iso_8601": "2019-12-09T08:54:27.566877Z", "url": "https://files.pythonhosted.org/packages/16/2e/f740da81d506adc0ddd1f012ef2df9a53f8fb959042bfbf0130c12683c91/DAQData-2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c574a5b9f823c51146f87cb3888dc05b", "sha256": "99aa09a1489bf1a893f00362f7c3e04ebf3af500499d5273495c6602185e4f7c"}, "downloads": -1, "filename": "DAQData-2.4.tar.gz", "has_sig": false, "md5_digest": "c574a5b9f823c51146f87cb3888dc05b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 9128, "upload_time": "2019-12-09T08:54:30", "upload_time_iso_8601": "2019-12-09T08:54:30.413489Z", "url": "https://files.pythonhosted.org/packages/8d/00/ddb4d0e05b086d69e7c0dd8d34ae684d86d106ce2fc3c7e5a54b87a62884/DAQData-2.4.tar.gz", "yanked": false}], "2.5": [{"comment_text": "", "digests": {"md5": "aa0fe57ffa3f6e700d3a09b42c98d9d6", "sha256": "894628397a2fc63075907fee46e9ded2ae49431fe10a610e83d36e811e42bbf3"}, "downloads": -1, "filename": "DAQData-2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "aa0fe57ffa3f6e700d3a09b42c98d9d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2", "size": 19245, "upload_time": "2019-12-09T09:05:01", "upload_time_iso_8601": "2019-12-09T09:05:01.490076Z", "url": "https://files.pythonhosted.org/packages/23/15/0698b6a1925e0c91f75f0229c5d3eb05fc282fd259b7cf7e43c7a20cd546/DAQData-2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c3618b99eda64c958651eaec6d0f93c", "sha256": "1b0a8f1df17b46ae92f6775580ae031aab61765810f83ffcb700a3ef159d49ad"}, "downloads": -1, "filename": "DAQData-2.5.tar.gz", "has_sig": false, "md5_digest": "2c3618b99eda64c958651eaec6d0f93c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 9112, "upload_time": "2019-12-09T09:05:03", "upload_time_iso_8601": "2019-12-09T09:05:03.143425Z", "url": "https://files.pythonhosted.org/packages/7f/ea/d6c366c011bce1caba1db0448c99cf5b155f88d2c5c0372d0fbd94ad00e9/DAQData-2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa0fe57ffa3f6e700d3a09b42c98d9d6", "sha256": "894628397a2fc63075907fee46e9ded2ae49431fe10a610e83d36e811e42bbf3"}, "downloads": -1, "filename": "DAQData-2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "aa0fe57ffa3f6e700d3a09b42c98d9d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2", "size": 19245, "upload_time": "2019-12-09T09:05:01", "upload_time_iso_8601": "2019-12-09T09:05:01.490076Z", "url": "https://files.pythonhosted.org/packages/23/15/0698b6a1925e0c91f75f0229c5d3eb05fc282fd259b7cf7e43c7a20cd546/DAQData-2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c3618b99eda64c958651eaec6d0f93c", "sha256": "1b0a8f1df17b46ae92f6775580ae031aab61765810f83ffcb700a3ef159d49ad"}, "downloads": -1, "filename": "DAQData-2.5.tar.gz", "has_sig": false, "md5_digest": "2c3618b99eda64c958651eaec6d0f93c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 9112, "upload_time": "2019-12-09T09:05:03", "upload_time_iso_8601": "2019-12-09T09:05:03.143425Z", "url": "https://files.pythonhosted.org/packages/7f/ea/d6c366c011bce1caba1db0448c99cf5b155f88d2c5c0372d0fbd94ad00e9/DAQData-2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:41 2020"}