{"info": {"author": "Jakub Wlodek", "author_email": "jwlodek.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "<div align=\"center\">\n    <img src=\"docs/assets/py_cui_logo_new.svg\" alt=\"PyCUI\" width=300px>\n</div>\n\n<div align=\"center\">\n    <p><strong><br/>A library for creating CUI/TUI interfaces with pre-built widgets in python.</strong></p>\n    <p>Easily build text-based user interfaces on both Linux and Windows.</p>\n    <a href=\"#\">\n        <img src=\"https://github.com/jwlodek/py_cui/workflows/tests/badge.svg?branch=master\" alt=\"Automated Test+Build Status\">\n    </a>\n    <a href=\"https://pepy.tech/project/py-cui\">\n        <img src=\"https://pepy.tech/badge/py-cui\" alt=\"Download Counter\">\n    </a>\n    <a href=\"https://badge.fury.io/py/py-cui\">\n        <img src=\"https://badge.fury.io/py/py-cui.svg\" alt=\"PyPI Version\">\n    </a>\n    <a href=\"#\">\n        <img src=\"https://img.shields.io/github/license/jwlodek/py_cui.svg\" alt=\"License\">\n    </a>\n</div>\n\n---\n\n# py_cui\n\n`py_cui` is a python library meant to simplify writing command line user interfaces in python. It relies on the `curses` module, which is traditionally a unix-specific python module, however, you may use the [windows-curses](https://github.com/zephyrproject-rtos/windows-curses) module to run `py_cui` on windows.\n\nThe main advantage `py_cui` has over typical text-based user interface builders is that it relies on widgets and a grid layout manager like most traditional graphical user interfaces. You may define a grid size, and then drop predefined widgets onto it into specific grid locations. Widgets can also be stretched accross multiple grid rows and columns. If you've ever made a Tkinter GUI, you will feel right at home.\n\nIf you would like to contribute, feel free to make an issue or pull request after reading through the `CONTRIBUTING.md` file.\n\n## Installation\n\nYou may install `py_cui` via pip (use `pip3` if python 2 and 3 are installed side by side)\n```\npip install py-cui\n```\nMake sure to run as root/sudo as required. Note that the library is titled `py_cui`, but the name of the pypi package is `py-cui`, though in most cases, installing with \n```\npip install py_cui\n```\nshould work OK.\n\nIf you would like to use `py_cui` directly from source, clone this repository with:\n```\ngit clone https://github.com/jwlodek/py_cui\n```\nThen build/install with `pip`:\n```\ncd py_cui\npip install .\n```\nIf you would like to try it out without installing, first make sure that `curses` is installed (`windows-curses` if on windows), and then copy one of the example files into the top directory. You may then simply run it with `python3`.\n\n## Examples\n\nBelow are some screenshots/gifs of programs written with py_cui. Additional (simpler) examples are available in the `examples/` directory of this repository.\n\n**py_cui_2048 - A command line version of the classic 2048 game**\n\n[py_cui_2048](https://github.com/jwlodek/py_cui_2048) is a demo of using `py_cui` to build simple CUI games and applications. The entire game was made in under 400 lines of code.\n<p align=\"center\">\n    <img src=\"docs/assets/py2048-demo.gif\">\n</p>\n\n**unipkg - A command line utility that will allow for managing all installed package managers on your system through one cli interface**\n\n[unipkg](https://github.com/jwlodek/unipkg) is currently an in-progress project, check back in the future to see a screenshot, and more information.\n\n**pyautogit - A command line interface for managing git repositories**\n\n[pyautogit](https://github.com/jwlodek/pyautogit) is the first larger scale project written in `py_cui`. Feel free to use it as a guide to programming with `py_cui`.\n<p align=\"center\">\n    <img src=\"docs/assets/pyautogit-demo.gif\">\n</p>\n\n## Writing a PyCUI\n\nBasic usage of `py_cui` starts with creating a PyCUI object, and specifiying it's grid size. Keep in mind that grid cell height and width will be measured in terminal characters, not pixels, so there is a lower limit on legal grid size, and heights will be smaller values than widths. Create this object with:\n```\nroot = py_cui.PyCUI(7, 9)\n```\nThe above line will create a UI with 7 rows and 9 columns. Then, add widgets with the different add commands:\n```\nlabel = root.add_label('Label Text', 0, 0)\nbutton = root.add_button('Button Text', 1, 2, column_span=2, command=my_function)\n...\n```\n\nFinally, start the CUI with\n```\nroot.start()\n```\n\n`py_cui` has support for custom key bindings for both the overview mode and focused mode, popup windows and prompts, color rendering rules, and several useful widgets. For more details on writing `py_cui` based interfaces, be sure to check on the examples and the documentation [here](https://jwlodek.github.io/py_cui-docs).\n\n## Using a PyCUI\n\nThere are some basic rules that apply to all `py_cui` based interfaces. There are three key operating modes - overview mode, focus mode, and popup mode. \n\n**Overview Mode**\n\nOverview mode is the main control view of the interface. In this mode you use the arrow keys to move between widgets, and you may select widgets with the `Enter` key. By default, you may also press buttons in this mode, unless `auto_focus_buttons` is set to false when the CUI was created.\n\n**Focus Mode**\n\nWhen in focus mode, you enter into a particular widget (For example a text box.). Each widget has some predefined basic controls, such as arrow keys to scroll in a `ScrollMenu`. You may also add keybindings to functions for each particular widget. These keybindings will only apply to a widget if it is in focus mode. Enter focus mode by navigating to a widget in overview mode and hitting the `Enter` key. Return to overview mode from focus mode by pressing `Escape`.\n\n**Popup Mode**\n\nPopup mode simply displays a popup over the rest of the UI. Each popup type behaves slightly differently. For example, you may exit an info popup mode by pressing `Space`, `Enter`, or `Escape`, while a loading popup will remain onscreen until whatever operation is being run is terminated.\n\n## Unit Tests\n\n`py_cui` unit tests are written for `pytest`. Make sure `pytest` is installed, and simply run\n```\npytest\n```\nin the root directory to run all unit tests.\n\n## Powered by py_cui\n\nBelow is a table of python projects developed with the help of `py_cui`. If you've made something, feel free to make a pull request to add it!\n\nProject | Description\n--------|-------------\n[pyautogit](https://github.com/jwlodek/pyautogit) | A command line UI for interfacing with git features for multiple repositories.\n[py_cui_2048](https://github.com/jwlodek/py_cui_2048) | A CUI version of the classic 2048 game.\n[unipkg](https://github.com/jwlodek/unipkg) | A CUI interface for managing all installed package managers on your system. (In-Progress)\n[tinypub](https://github.com/HakierGrzonzo/tinyPub) | A console-based ebook reader.\n[hue-tui](https://github.com/channel-42/hue-tui) | A CUI controlling for Philips Hue lights.\n\n## License\n\nBSD 3-Clause License\n\nCopyright (c) 2019-2020, Jakub Wlodek\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jwlodek/py_cui", "keywords": "cui cli commandline user-interface ui", "license": "BSD (3-clause)", "maintainer": "", "maintainer_email": "", "name": "py-cui", "package_url": "https://pypi.org/project/py-cui/", "platform": "", "project_url": "https://pypi.org/project/py-cui/", "project_urls": {"Homepage": "https://github.com/jwlodek/py_cui"}, "release_url": "https://pypi.org/project/py-cui/0.1.0/", "requires_dist": ["windows-curses ; platform_system == \"Windows\""], "requires_python": ">=3.2", "summary": "A widget and grid based framework for building command line user interfaces in python.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n    <img alt=\"PyCUI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9064797d3d9a349097968de28bd61c638ed84f40/646f63732f6173736574732f70795f6375695f6c6f676f5f6e65772e737667\" width=\"300px\">\n</div>\n<div>\n    <p><strong><br>A library for creating CUI/TUI interfaces with pre-built widgets in python.</strong></p>\n    <p>Easily build text-based user interfaces on both Linux and Windows.</p>\n    <a href=\"#\" rel=\"nofollow\">\n        <img alt=\"Automated Test+Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d929c3e2e62d6a398d86cfced77f5e47e4bd787d/68747470733a2f2f6769746875622e636f6d2f6a776c6f64656b2f70795f6375692f776f726b666c6f77732f74657374732f62616467652e7376673f6272616e63683d6d6173746572\">\n    </a>\n    <a href=\"https://pepy.tech/project/py-cui\" rel=\"nofollow\">\n        <img alt=\"Download Counter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3cd2fa5ce32cdf9c0ff40b53dad2c52f1a078987/68747470733a2f2f706570792e746563682f62616467652f70792d637569\">\n    </a>\n    <a href=\"https://badge.fury.io/py/py-cui\" rel=\"nofollow\">\n        <img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58d9f7f24dc085ac8b2587640e1d2d770589a9d8/68747470733a2f2f62616467652e667572792e696f2f70792f70792d6375692e737667\">\n    </a>\n    <a href=\"#\" rel=\"nofollow\">\n        <img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea94e0039ad3dc91105be4f526fd22cd24d197e5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a776c6f64656b2f70795f6375692e737667\">\n    </a>\n</div>\n<hr>\n<h1>py_cui</h1>\n<p><code>py_cui</code> is a python library meant to simplify writing command line user interfaces in python. It relies on the <code>curses</code> module, which is traditionally a unix-specific python module, however, you may use the <a href=\"https://github.com/zephyrproject-rtos/windows-curses\" rel=\"nofollow\">windows-curses</a> module to run <code>py_cui</code> on windows.</p>\n<p>The main advantage <code>py_cui</code> has over typical text-based user interface builders is that it relies on widgets and a grid layout manager like most traditional graphical user interfaces. You may define a grid size, and then drop predefined widgets onto it into specific grid locations. Widgets can also be stretched accross multiple grid rows and columns. If you've ever made a Tkinter GUI, you will feel right at home.</p>\n<p>If you would like to contribute, feel free to make an issue or pull request after reading through the <code>CONTRIBUTING.md</code> file.</p>\n<h2>Installation</h2>\n<p>You may install <code>py_cui</code> via pip (use <code>pip3</code> if python 2 and 3 are installed side by side)</p>\n<pre><code>pip install py-cui\n</code></pre>\n<p>Make sure to run as root/sudo as required. Note that the library is titled <code>py_cui</code>, but the name of the pypi package is <code>py-cui</code>, though in most cases, installing with</p>\n<pre><code>pip install py_cui\n</code></pre>\n<p>should work OK.</p>\n<p>If you would like to use <code>py_cui</code> directly from source, clone this repository with:</p>\n<pre><code>git clone https://github.com/jwlodek/py_cui\n</code></pre>\n<p>Then build/install with <code>pip</code>:</p>\n<pre><code>cd py_cui\npip install .\n</code></pre>\n<p>If you would like to try it out without installing, first make sure that <code>curses</code> is installed (<code>windows-curses</code> if on windows), and then copy one of the example files into the top directory. You may then simply run it with <code>python3</code>.</p>\n<h2>Examples</h2>\n<p>Below are some screenshots/gifs of programs written with py_cui. Additional (simpler) examples are available in the <code>examples/</code> directory of this repository.</p>\n<p><strong>py_cui_2048 - A command line version of the classic 2048 game</strong></p>\n<p><a href=\"https://github.com/jwlodek/py_cui_2048\" rel=\"nofollow\">py_cui_2048</a> is a demo of using <code>py_cui</code> to build simple CUI games and applications. The entire game was made in under 400 lines of code.</p>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39f6594f854e45a9a4d1b9d133a6ff26211f7299/646f63732f6173736574732f7079323034382d64656d6f2e676966\">\n</p>\n<p><strong>unipkg - A command line utility that will allow for managing all installed package managers on your system through one cli interface</strong></p>\n<p><a href=\"https://github.com/jwlodek/unipkg\" rel=\"nofollow\">unipkg</a> is currently an in-progress project, check back in the future to see a screenshot, and more information.</p>\n<p><strong>pyautogit - A command line interface for managing git repositories</strong></p>\n<p><a href=\"https://github.com/jwlodek/pyautogit\" rel=\"nofollow\">pyautogit</a> is the first larger scale project written in <code>py_cui</code>. Feel free to use it as a guide to programming with <code>py_cui</code>.</p>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/56420930f927129aaa55749b79dd4ebd6e4c58ab/646f63732f6173736574732f70796175746f6769742d64656d6f2e676966\">\n</p>\n<h2>Writing a PyCUI</h2>\n<p>Basic usage of <code>py_cui</code> starts with creating a PyCUI object, and specifiying it's grid size. Keep in mind that grid cell height and width will be measured in terminal characters, not pixels, so there is a lower limit on legal grid size, and heights will be smaller values than widths. Create this object with:</p>\n<pre><code>root = py_cui.PyCUI(7, 9)\n</code></pre>\n<p>The above line will create a UI with 7 rows and 9 columns. Then, add widgets with the different add commands:</p>\n<pre><code>label = root.add_label('Label Text', 0, 0)\nbutton = root.add_button('Button Text', 1, 2, column_span=2, command=my_function)\n...\n</code></pre>\n<p>Finally, start the CUI with</p>\n<pre><code>root.start()\n</code></pre>\n<p><code>py_cui</code> has support for custom key bindings for both the overview mode and focused mode, popup windows and prompts, color rendering rules, and several useful widgets. For more details on writing <code>py_cui</code> based interfaces, be sure to check on the examples and the documentation <a href=\"https://jwlodek.github.io/py_cui-docs\" rel=\"nofollow\">here</a>.</p>\n<h2>Using a PyCUI</h2>\n<p>There are some basic rules that apply to all <code>py_cui</code> based interfaces. There are three key operating modes - overview mode, focus mode, and popup mode.</p>\n<p><strong>Overview Mode</strong></p>\n<p>Overview mode is the main control view of the interface. In this mode you use the arrow keys to move between widgets, and you may select widgets with the <code>Enter</code> key. By default, you may also press buttons in this mode, unless <code>auto_focus_buttons</code> is set to false when the CUI was created.</p>\n<p><strong>Focus Mode</strong></p>\n<p>When in focus mode, you enter into a particular widget (For example a text box.). Each widget has some predefined basic controls, such as arrow keys to scroll in a <code>ScrollMenu</code>. You may also add keybindings to functions for each particular widget. These keybindings will only apply to a widget if it is in focus mode. Enter focus mode by navigating to a widget in overview mode and hitting the <code>Enter</code> key. Return to overview mode from focus mode by pressing <code>Escape</code>.</p>\n<p><strong>Popup Mode</strong></p>\n<p>Popup mode simply displays a popup over the rest of the UI. Each popup type behaves slightly differently. For example, you may exit an info popup mode by pressing <code>Space</code>, <code>Enter</code>, or <code>Escape</code>, while a loading popup will remain onscreen until whatever operation is being run is terminated.</p>\n<h2>Unit Tests</h2>\n<p><code>py_cui</code> unit tests are written for <code>pytest</code>. Make sure <code>pytest</code> is installed, and simply run</p>\n<pre><code>pytest\n</code></pre>\n<p>in the root directory to run all unit tests.</p>\n<h2>Powered by py_cui</h2>\n<p>Below is a table of python projects developed with the help of <code>py_cui</code>. If you've made something, feel free to make a pull request to add it!</p>\n<table>\n<thead>\n<tr>\n<th>Project</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/jwlodek/pyautogit\" rel=\"nofollow\">pyautogit</a></td>\n<td>A command line UI for interfacing with git features for multiple repositories.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jwlodek/py_cui_2048\" rel=\"nofollow\">py_cui_2048</a></td>\n<td>A CUI version of the classic 2048 game.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jwlodek/unipkg\" rel=\"nofollow\">unipkg</a></td>\n<td>A CUI interface for managing all installed package managers on your system. (In-Progress)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/HakierGrzonzo/tinyPub\" rel=\"nofollow\">tinypub</a></td>\n<td>A console-based ebook reader.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/channel-42/hue-tui\" rel=\"nofollow\">hue-tui</a></td>\n<td>A CUI controlling for Philips Hue lights.</td>\n</tr></tbody></table>\n<h2>License</h2>\n<p>BSD 3-Clause License</p>\n<p>Copyright (c) 2019-2020, Jakub Wlodek</p>\n\n          </div>"}, "last_serial": 7049852, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "923950d0c5025ab5adf0bd97dd8ce57a", "sha256": "ddd51878acd3789105b205ba304ed9e8671c7495a88d74856b464317c8bca916"}, "downloads": -1, "filename": "py_cui-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "923950d0c5025ab5adf0bd97dd8ce57a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 32912, "upload_time": "2020-01-27T18:27:34", "upload_time_iso_8601": "2020-01-27T18:27:34.426626Z", "url": "https://files.pythonhosted.org/packages/6f/2c/2b54d25c8b95df763988d015e39dadd19bec299c816fcc1fd0f0e0ef1991/py_cui-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b16f0d050b23f5b6672dba21ca478c59", "sha256": "dab0ebb1002fd1b8437d6d390136ff3b8905c0ddef79e0199bf22f2b9acd4c65"}, "downloads": -1, "filename": "py_cui-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b16f0d050b23f5b6672dba21ca478c59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 26718, "upload_time": "2020-01-27T18:27:36", "upload_time_iso_8601": "2020-01-27T18:27:36.887151Z", "url": "https://files.pythonhosted.org/packages/dd/d9/2b4b89141858f02018e889bf2731a0154646fcdc8c3becdad6f92cbbe451/py_cui-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bbfcfcc777706fb524c2f99ccbb84628", "sha256": "a146526b2f06d516a44f4e9b346443586f11e53df1f29cb8a3ced6d2523b70a2"}, "downloads": -1, "filename": "py_cui-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bbfcfcc777706fb524c2f99ccbb84628", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 33890, "upload_time": "2020-02-20T04:18:07", "upload_time_iso_8601": "2020-02-20T04:18:07.278548Z", "url": "https://files.pythonhosted.org/packages/cf/de/5003e381652191b23c10e82fb0f2ef853e7bd83d2d19381a475c0292cf73/py_cui-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32d8db45ea8444ddd0525e7df0a32905", "sha256": "4f67a1158df310f63e91b62a23b7e8eaf84afa08a559e3cb46eeeb676f3c3881"}, "downloads": -1, "filename": "py_cui-0.0.2.tar.gz", "has_sig": false, "md5_digest": "32d8db45ea8444ddd0525e7df0a32905", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 31645, "upload_time": "2020-02-20T04:18:08", "upload_time_iso_8601": "2020-02-20T04:18:08.580083Z", "url": "https://files.pythonhosted.org/packages/11/8d/58b1014820200cf948c09710cb3f6630925d9d986417301b8c8268aa1f91/py_cui-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c193ae7bc7ff96f43dc7d8ec6dfb7ba9", "sha256": "e81bcf08c7d0e104dc1278434ba57d51336b4a3c9b24aaf7f60bafed79fffb8a"}, "downloads": -1, "filename": "py_cui-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c193ae7bc7ff96f43dc7d8ec6dfb7ba9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 33453, "upload_time": "2020-03-10T15:54:13", "upload_time_iso_8601": "2020-03-10T15:54:13.351828Z", "url": "https://files.pythonhosted.org/packages/ce/db/b65c700610b44247b4efdb148f51ce5d2cbde71a4db615b07dff1808ddcd/py_cui-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "793ec03e0c352fb42f61fc553cefdcda", "sha256": "6b4a50c509889c9659249ca1fa3bc3f5234d6f27afff3bcfa58fb4351d0f2724"}, "downloads": -1, "filename": "py_cui-0.0.3.tar.gz", "has_sig": false, "md5_digest": "793ec03e0c352fb42f61fc553cefdcda", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 31218, "upload_time": "2020-03-10T15:54:14", "upload_time_iso_8601": "2020-03-10T15:54:14.679263Z", "url": "https://files.pythonhosted.org/packages/cb/58/d2a3ab41cd31b14e35b886d809a415ee963f6e36002ce275c67f130c5ce0/py_cui-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "49c4bcca5df6b23d2ed4269772561552", "sha256": "2f0b9552e16c9b4d94d1e50726f68ead31eaa4b56b872e6eae12a20321430ef3"}, "downloads": -1, "filename": "py_cui-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "49c4bcca5df6b23d2ed4269772561552", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 41680, "upload_time": "2020-04-18T19:50:30", "upload_time_iso_8601": "2020-04-18T19:50:30.677332Z", "url": "https://files.pythonhosted.org/packages/ce/cc/1d336cb0d432a83934d4350f4426a1fc9ee97992b91da95a1c5c156be453/py_cui-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cfc8e94cffc3999aa52f1027b21ebdd", "sha256": "54360ecb3b272120f568fa888cc5b3aad313581b3dbca65e60b37199eaf34f8f"}, "downloads": -1, "filename": "py_cui-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5cfc8e94cffc3999aa52f1027b21ebdd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 38533, "upload_time": "2020-04-18T19:50:31", "upload_time_iso_8601": "2020-04-18T19:50:31.834913Z", "url": "https://files.pythonhosted.org/packages/b6/f6/f3030ad37ae01f0046dae7c05bd2ee0684d20799f5de1d19ff0e8873dbed/py_cui-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49c4bcca5df6b23d2ed4269772561552", "sha256": "2f0b9552e16c9b4d94d1e50726f68ead31eaa4b56b872e6eae12a20321430ef3"}, "downloads": -1, "filename": "py_cui-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "49c4bcca5df6b23d2ed4269772561552", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 41680, "upload_time": "2020-04-18T19:50:30", "upload_time_iso_8601": "2020-04-18T19:50:30.677332Z", "url": "https://files.pythonhosted.org/packages/ce/cc/1d336cb0d432a83934d4350f4426a1fc9ee97992b91da95a1c5c156be453/py_cui-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cfc8e94cffc3999aa52f1027b21ebdd", "sha256": "54360ecb3b272120f568fa888cc5b3aad313581b3dbca65e60b37199eaf34f8f"}, "downloads": -1, "filename": "py_cui-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5cfc8e94cffc3999aa52f1027b21ebdd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 38533, "upload_time": "2020-04-18T19:50:31", "upload_time_iso_8601": "2020-04-18T19:50:31.834913Z", "url": "https://files.pythonhosted.org/packages/b6/f6/f3030ad37ae01f0046dae7c05bd2ee0684d20799f5de1d19ff0e8873dbed/py_cui-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:35 2020"}