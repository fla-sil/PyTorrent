{"info": {"author": "Fl\u00e1vio Caetano", "author_email": "flavio@vieiracaetano.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: GNU General Public License (GPL)", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "pelican_admin\n=============\n*pelican_admin* was developed to assist you manage your `Pelican <https://github.com/getpelican/pelican>`_ blog.\n\nThis is a beta release and will have upcoming new features.\n\n.. contents::\n\nUsage\n-----\n\nInsert **pelican_admin** to the end of your INSTALLED_APPS in settings.py::\n\n    INSTALLED_APPS = (\n        ...\n        'pelican_admin',\n        ...\n    )\n\t\nNow, you must tell *pelican_admin* what's the path to you pelican blog. In your settings.py you must add::\n\n\tPELICAN_PATH = '/path/to/your/blog'\n\tPELICAN_SETTINGS = 'your_pelican_settings.py # The default value is 'pelicanconf.py'\n\tPELICAN_BIN = 'pelican' # Path to pelican executable. Default value is '/usr/local/bin/pelican'\n    \nDon't forget to sync your db with::\n\n\tpython manage.py syncdb\n\t\nOr, if you're using `south <http://pypi.python.org/pypi/South/>`_::\n\n\tpython manage.py migrate pelican_admin\n\n*pelican_admin* is already set to run `Pelican <https://github.com/getpelican/pelican>`_'s service for you. It'll be running in the autoreload mode in the background.\n\t\nIf you're using `django-admin-tools <https://bitbucket.org/izi/django-admin-tools/wiki/Home>`_ there's a module available where you can manage your pelican service via admin interface. Add *pelican_admin* to your urls.py::\n\n\timport pelican_admin\n\t\n\turl_patterns = patterns('',\t\n    \turl(r'^admin/', include(admin.site.urls)),\n\t    url(r'^admin_tools/', include('admin_tools.urls')),\n\t   \t...\n\t)\n\t\n\turlpatterns += pelican_admin.pelican_urls()\n\t\nAnd finally, add *pelican_admin*'s module to your dashboard.py::\n\n\tfrom pelican_admin.modules import PelicanAdmin\n\t\n\tclass CustomIndexDashboard(Dashboard):\n\n    \tdef init_with_context(self, context):\n\t\t\t...\n\t        self.children.append(PelicanAdmin())\n\t        \nThis module is super useful not only to check `Pelican <https://github.com/getpelican/pelican>`_'s service status, but also to reload it if any change you made doesn't load.\n\nIf you experience any troubles in this step and your `django-admin-tools <https://bitbucket.org/izi/django-admin-tools/wiki/Home>`_ interface is scrambled, you may have too many modules in your dashboard. I never found out why, but my experience with  `django-admin-tools <https://bitbucket.org/izi/django-admin-tools/wiki/Home>`_ never allowed lots of modules, so just try removing some things you don't use.\n\t        \nThe Looks\n---------\nThis is how *pelican_admin*'s module for `django-admin-tools <https://bitbucket.org/izi/django-admin-tools/wiki/Home>`_ looks like when enabled:\n\n.. image:: https://raw.github.com/fjcaetano/pelican_admin/master/ss1.png\n\n.. image:: https://raw.github.com/fjcaetano/pelican_admin/master/ss2.png\n\n.. image:: https://raw.github.com/fjcaetano/pelican_admin/master/ss3.png\n\n\nNew Features\n------------\n- **Metadata management**: Now you can manage your posts' metadatas via interface since, now, they're attributes of your posts.\n- **Category model**: Though `category` is just another post metadata, it was made to be an model to ease filtering, insertion, etc.\n- **View Draft button**: In the blog post edit page there's a new button called `View Draft` to help you visualise the post you're writing in your blog. It simply set the `status` metadata as *draft* in that post.\n- **Better post management**: Blog posts had a very bad management earlier. Now the model list page has filters, more fields being displayed, search, date hierarchy, etc.\n\nBugfixes\n--------\n- **Encoding issues**: Some people were experiencing encoding issues when *pelican_admin* attempted to write special characters. Some of it were solved, but if you find any mode problems, please, let me know.\n- **Slow build**: Due to poor programming, *pelican_admin* was taking a very long time to run it's \\__init__.py\n\nKnown Issues\n------------\n*pelican_admin* is running `Pelican <https://github.com/getpelican/pelican>`_'s service in background as a subprocess, but I wasn't able to kill it when python dies. Currently there's a method registered in `atexit` therefore, if python dies normally, the background service is killed with no trouble, but if python crashes, the method registered isn't called and `Pelican <https://github.com/getpelican/pelican>`_'s service may still be running in background.\n\nOther than that, when you're running Django in \"development mode\" (`manage.py runserver`), every time you update a `Setting` in *pelican_admin*, Django is reloading. I'm still to find out why.\n\nIf `pelican <https://github.com/getpelican/pelican>`_ raises an Exception from within it's Generators, *pelican_admin* thinks it's still running since the subprocess doesn't die, even though it's running in the background. When an Exception like that occurs, `pelican <https://github.com/getpelican/pelican>`_'s process simply halts.\n\nOld Features\n------------\n- **Settings management**: change your pelican settings through Django admin and have it automatically working.\n- **Posting management**: CRUD for blog postings via interface.\n- **Service management**: Manage your pelican service through the admin interface\n- **Internationalization**: *pelican_admin* is localizable. Currently only pt_BR and en_US are officially supported.\n\nRequirements\n------------\n* `Django 1.4+ <http://pypi.python.org/pypi/Django/1.4>`_\n* `psutil 0.6.1+ <http://code.google.com/p/psutil/>`_\n* `pelican 3.0+ <https://github.com/getpelican/pelican>`_\n\nInstallation\n------------\nI'll just assume you're already familiarised with pelican and move on.\n\nInstall using pip:\n\n    pip install pelican_admin\n    \nOr you can clone the project and install it via:\n\n    python setup.py install\n    \nMigration From Older Versions\n-----------------------------\nWhen you migrate, whether installing from pip or cloning the repository, do not forget to sync the app. You can either do it through Django or using south, though south is better because you won't lose any data.\n\nCheck This Out\n--------------\n1. `GitHub Repository <https://github.com/fjcaetano/pelican_admin>`_\n2. `PyPi package <http://pypi.python.org/pypi/pelican_admin/0.3>`_\n3. `Owner's website <http://flaviocaetano.com>`_\n4. `Owner's Blog <http://blog.flaviocaetano.com>`_\n\n\nContact\n=======\nIf you have any comments, ideas questions, feedback, etcetera, email me and we'll be in touch. I'm `flavio@vieiracaetano.com <flavio@vieiracaetano.com>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fjcaetano/pelican_admin", "keywords": null, "license": "GPL - see LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "pelican_admin", "package_url": "https://pypi.org/project/pelican_admin/", "platform": "any", "project_url": "https://pypi.org/project/pelican_admin/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/fjcaetano/pelican_admin"}, "release_url": "https://pypi.org/project/pelican_admin/0.3/", "requires_dist": null, "requires_python": null, "summary": "Django admin app for Pelican blogs.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pelican-admin\">\n<h2><a href=\"#id10\" rel=\"nofollow\">pelican_admin</a></h2>\n<p><em>pelican_admin</em> was developed to assist you manage your <a href=\"https://github.com/getpelican/pelican\" rel=\"nofollow\">Pelican</a> blog.</p>\n<p>This is a beta release and will have upcoming new features.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#pelican-admin\" id=\"id10\" rel=\"nofollow\">pelican_admin</a><ul>\n<li><a href=\"#usage\" id=\"id11\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#the-looks\" id=\"id12\" rel=\"nofollow\">The Looks</a></li>\n<li><a href=\"#new-features\" id=\"id13\" rel=\"nofollow\">New Features</a></li>\n<li><a href=\"#bugfixes\" id=\"id14\" rel=\"nofollow\">Bugfixes</a></li>\n<li><a href=\"#known-issues\" id=\"id15\" rel=\"nofollow\">Known Issues</a></li>\n<li><a href=\"#old-features\" id=\"id16\" rel=\"nofollow\">Old Features</a></li>\n<li><a href=\"#requirements\" id=\"id17\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" id=\"id18\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#migration-from-older-versions\" id=\"id19\" rel=\"nofollow\">Migration From Older Versions</a></li>\n<li><a href=\"#check-this-out\" id=\"id20\" rel=\"nofollow\">Check This Out</a></li>\n</ul>\n</li>\n<li><a href=\"#contact\" id=\"id21\" rel=\"nofollow\">Contact</a></li>\n</ul>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Usage</a></h3>\n<p>Insert <strong>pelican_admin</strong> to the end of your INSTALLED_APPS in settings.py:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'pelican_admin',\n    ...\n)\n</pre>\n<p>Now, you must tell <em>pelican_admin</em> what\u2019s the path to you pelican blog. In your settings.py you must add:</p>\n<pre>PELICAN_PATH = '/path/to/your/blog'\nPELICAN_SETTINGS = 'your_pelican_settings.py # The default value is 'pelicanconf.py'\nPELICAN_BIN = 'pelican' # Path to pelican executable. Default value is '/usr/local/bin/pelican'\n</pre>\n<p>Don\u2019t forget to sync your db with:</p>\n<pre>python manage.py syncdb\n</pre>\n<p>Or, if you\u2019re using <a href=\"http://pypi.python.org/pypi/South/\" rel=\"nofollow\">south</a>:</p>\n<pre>python manage.py migrate pelican_admin\n</pre>\n<p><em>pelican_admin</em> is already set to run <a href=\"https://github.com/getpelican/pelican\" rel=\"nofollow\">Pelican</a>\u2019s service for you. It\u2019ll be running in the autoreload mode in the background.</p>\n<p>If you\u2019re using <a href=\"https://bitbucket.org/izi/django-admin-tools/wiki/Home\" rel=\"nofollow\">django-admin-tools</a> there\u2019s a module available where you can manage your pelican service via admin interface. Add <em>pelican_admin</em> to your urls.py:</p>\n<pre>import pelican_admin\n\nurl_patterns = patterns('',\nurl(r'^admin/', include(admin.site.urls)),\n    url(r'^admin_tools/', include('admin_tools.urls')),\n        ...\n)\n\nurlpatterns += pelican_admin.pelican_urls()\n</pre>\n<p>And finally, add <em>pelican_admin</em>\u2019s module to your dashboard.py:</p>\n<pre>from pelican_admin.modules import PelicanAdmin\n\nclass CustomIndexDashboard(Dashboard):\n\ndef init_with_context(self, context):\n                ...\n        self.children.append(PelicanAdmin())\n</pre>\n<p>This module is super useful not only to check <a href=\"https://github.com/getpelican/pelican\" rel=\"nofollow\">Pelican</a>\u2019s service status, but also to reload it if any change you made doesn\u2019t load.</p>\n<p>If you experience any troubles in this step and your <a href=\"https://bitbucket.org/izi/django-admin-tools/wiki/Home\" rel=\"nofollow\">django-admin-tools</a> interface is scrambled, you may have too many modules in your dashboard. I never found out why, but my experience with  <a href=\"https://bitbucket.org/izi/django-admin-tools/wiki/Home\" rel=\"nofollow\">django-admin-tools</a> never allowed lots of modules, so just try removing some things you don\u2019t use.</p>\n</div>\n<div id=\"the-looks\">\n<h3><a href=\"#id12\" rel=\"nofollow\">The Looks</a></h3>\n<p>This is how <em>pelican_admin</em>\u2019s module for <a href=\"https://bitbucket.org/izi/django-admin-tools/wiki/Home\" rel=\"nofollow\">django-admin-tools</a> looks like when enabled:</p>\n<img alt=\"https://raw.github.com/fjcaetano/pelican_admin/master/ss1.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e670b7c12ae0ae2fd768e315769bab68b0775469/68747470733a2f2f7261772e6769746875622e636f6d2f666a63616574616e6f2f70656c6963616e5f61646d696e2f6d61737465722f7373312e706e67\">\n<img alt=\"https://raw.github.com/fjcaetano/pelican_admin/master/ss2.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c10485182439a47d13095c2d20b38e10286824fc/68747470733a2f2f7261772e6769746875622e636f6d2f666a63616574616e6f2f70656c6963616e5f61646d696e2f6d61737465722f7373322e706e67\">\n<img alt=\"https://raw.github.com/fjcaetano/pelican_admin/master/ss3.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7d14718817d50b5986d00252c037895ba2f67d7/68747470733a2f2f7261772e6769746875622e636f6d2f666a63616574616e6f2f70656c6963616e5f61646d696e2f6d61737465722f7373332e706e67\">\n</div>\n<div id=\"new-features\">\n<h3><a href=\"#id13\" rel=\"nofollow\">New Features</a></h3>\n<ul>\n<li><strong>Metadata management</strong>: Now you can manage your posts\u2019 metadatas via interface since, now, they\u2019re attributes of your posts.</li>\n<li><strong>Category model</strong>: Though <cite>category</cite> is just another post metadata, it was made to be an model to ease filtering, insertion, etc.</li>\n<li><strong>View Draft button</strong>: In the blog post edit page there\u2019s a new button called <cite>View Draft</cite> to help you visualise the post you\u2019re writing in your blog. It simply set the <cite>status</cite> metadata as <em>draft</em> in that post.</li>\n<li><strong>Better post management</strong>: Blog posts had a very bad management earlier. Now the model list page has filters, more fields being displayed, search, date hierarchy, etc.</li>\n</ul>\n</div>\n<div id=\"bugfixes\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Bugfixes</a></h3>\n<ul>\n<li><strong>Encoding issues</strong>: Some people were experiencing encoding issues when <em>pelican_admin</em> attempted to write special characters. Some of it were solved, but if you find any mode problems, please, let me know.</li>\n<li><strong>Slow build</strong>: Due to poor programming, <em>pelican_admin</em> was taking a very long time to run it\u2019s __init__.py</li>\n</ul>\n</div>\n<div id=\"known-issues\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Known Issues</a></h3>\n<p><em>pelican_admin</em> is running <a href=\"https://github.com/getpelican/pelican\" rel=\"nofollow\">Pelican</a>\u2019s service in background as a subprocess, but I wasn\u2019t able to kill it when python dies. Currently there\u2019s a method registered in <cite>atexit</cite> therefore, if python dies normally, the background service is killed with no trouble, but if python crashes, the method registered isn\u2019t called and <a href=\"https://github.com/getpelican/pelican\" rel=\"nofollow\">Pelican</a>\u2019s service may still be running in background.</p>\n<p>Other than that, when you\u2019re running Django in \u201cdevelopment mode\u201d (<cite>manage.py runserver</cite>), every time you update a <cite>Setting</cite> in <em>pelican_admin</em>, Django is reloading. I\u2019m still to find out why.</p>\n<p>If <a href=\"https://github.com/getpelican/pelican\" rel=\"nofollow\">pelican</a> raises an Exception from within it\u2019s Generators, <em>pelican_admin</em> thinks it\u2019s still running since the subprocess doesn\u2019t die, even though it\u2019s running in the background. When an Exception like that occurs, <a href=\"https://github.com/getpelican/pelican\" rel=\"nofollow\">pelican</a>\u2019s process simply halts.</p>\n</div>\n<div id=\"old-features\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Old Features</a></h3>\n<ul>\n<li><strong>Settings management</strong>: change your pelican settings through Django admin and have it automatically working.</li>\n<li><strong>Posting management</strong>: CRUD for blog postings via interface.</li>\n<li><strong>Service management</strong>: Manage your pelican service through the admin interface</li>\n<li><strong>Internationalization</strong>: <em>pelican_admin</em> is localizable. Currently only pt_BR and en_US are officially supported.</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Requirements</a></h3>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/Django/1.4\" rel=\"nofollow\">Django 1.4+</a></li>\n<li><a href=\"http://code.google.com/p/psutil/\" rel=\"nofollow\">psutil 0.6.1+</a></li>\n<li><a href=\"https://github.com/getpelican/pelican\" rel=\"nofollow\">pelican 3.0+</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id18\" rel=\"nofollow\">Installation</a></h3>\n<p>I\u2019ll just assume you\u2019re already familiarised with pelican and move on.</p>\n<p>Install using pip:</p>\n<blockquote>\npip install pelican_admin</blockquote>\n<p>Or you can clone the project and install it via:</p>\n<blockquote>\npython setup.py install</blockquote>\n</div>\n<div id=\"migration-from-older-versions\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Migration From Older Versions</a></h3>\n<p>When you migrate, whether installing from pip or cloning the repository, do not forget to sync the app. You can either do it through Django or using south, though south is better because you won\u2019t lose any data.</p>\n</div>\n<div id=\"check-this-out\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Check This Out</a></h3>\n<ol>\n<li><a href=\"https://github.com/fjcaetano/pelican_admin\" rel=\"nofollow\">GitHub Repository</a></li>\n<li><a href=\"http://pypi.python.org/pypi/pelican_admin/0.3\" rel=\"nofollow\">PyPi package</a></li>\n<li><a href=\"http://flaviocaetano.com\" rel=\"nofollow\">Owner\u2019s website</a></li>\n<li><a href=\"http://blog.flaviocaetano.com\" rel=\"nofollow\">Owner\u2019s Blog</a></li>\n</ol>\n</div>\n</div>\n<div id=\"contact\">\n<h2><a href=\"#id21\" rel=\"nofollow\">Contact</a></h2>\n<p>If you have any comments, ideas questions, feedback, etcetera, email me and we\u2019ll be in touch. I\u2019m <a href=\"mailto:flavio%40vieiracaetano.com\">flavio<span>@</span>vieiracaetano<span>.</span>com</a></p>\n</div>\n\n          </div>"}, "last_serial": 758888, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b4045e00a7bdd20621f78054404acf9d", "sha256": "97f99ed9df9065f992e413563f9f295073fd4e0cee2db1000652f102f4f795d6"}, "downloads": -1, "filename": "pelican_admin-0.1.tar.gz", "has_sig": false, "md5_digest": "b4045e00a7bdd20621f78054404acf9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6539, "upload_time": "2012-11-26T02:24:32", "upload_time_iso_8601": "2012-11-26T02:24:32.808553Z", "url": "https://files.pythonhosted.org/packages/6d/b3/60fe50faf79ff20b75fccc37b1721ed6ebf1f6f7aa7fa7b9b9e97f7aea7c/pelican_admin-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e43388cb33e6bfa313536247402c3415", "sha256": "e58d57c305978d9a1ccbc6c4259631ecd0483e5cf07bd72a3ffc93004688965a"}, "downloads": -1, "filename": "pelican_admin-0.2.tar.gz", "has_sig": false, "md5_digest": "e43388cb33e6bfa313536247402c3415", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58341, "upload_time": "2012-11-29T18:03:06", "upload_time_iso_8601": "2012-11-29T18:03:06.476927Z", "url": "https://files.pythonhosted.org/packages/8b/20/ffcc78c2a38d93c1446d03e279e69a28a11fb88b7cba503464ab316a0c6e/pelican_admin-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "9f133eefa2f39fe5c2727f5e817db6c0", "sha256": "09381f15359e20fc558713dd4a55f4429a8ae535e874fd8d2ee06b14fce493c9"}, "downloads": -1, "filename": "pelican_admin-0.3.tar.gz", "has_sig": false, "md5_digest": "9f133eefa2f39fe5c2727f5e817db6c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63102, "upload_time": "2012-12-12T21:24:07", "upload_time_iso_8601": "2012-12-12T21:24:07.078762Z", "url": "https://files.pythonhosted.org/packages/4d/73/b1ee92b52639d2b7120d397ef6213ba4baa01bead27f731893d9091eacb2/pelican_admin-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f133eefa2f39fe5c2727f5e817db6c0", "sha256": "09381f15359e20fc558713dd4a55f4429a8ae535e874fd8d2ee06b14fce493c9"}, "downloads": -1, "filename": "pelican_admin-0.3.tar.gz", "has_sig": false, "md5_digest": "9f133eefa2f39fe5c2727f5e817db6c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63102, "upload_time": "2012-12-12T21:24:07", "upload_time_iso_8601": "2012-12-12T21:24:07.078762Z", "url": "https://files.pythonhosted.org/packages/4d/73/b1ee92b52639d2b7120d397ef6213ba4baa01bead27f731893d9091eacb2/pelican_admin-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:42 2020"}