{"info": {"author": "Icerm", "author_email": "haohan@v.systems", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![version](https://img.shields.io/badge/version-2020.1-ff69b4.svg)](/vsyspy/version.py)\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](/LICENSE)\n[![downloads](https://img.shields.io/github/downloads/Icermli/vsyspy/total.svg)](https://github.com/Icermli/vsyspy/releases)\n[![issues](https://img.shields.io/github/issues/Icermli/vsyspy.svg)](https://github.com/Icermli/vsyspy/issues)\n\n# VSYSPY\nA python wrapper for vsys api.\n\n## Install\n\n### Install source code\n1. clone the repo under you workspace\n```shell script\ngit clone https://github.com/Icermli/vsyspy.git\n```\n2. install packages in vsyspy/requirement.txt by \n```shell script\ncd vsyspy\npip install .\n```\nOr, for developers, you may want to install the package with a symlink,\n```shell script\npip install -e .\n```\n3. Then you can ```import vsyspy``` in your workspace\n\n### Install via PyPi\n```shell script\npip install vsyspy\n```\n\n## Usage\n\n### chain object\n1. For testnet:\n```python\nimport vsyspy as vpy\nts_chain = vpy.testnet_chain()\n```\n2. For default chain:\n```python\nimport vsyspy as vpy\nmain_chain = vpy.default_chain()\n```\n\n3. For custom api node:\n```python\nimport vsyspy as vpy\ncustom_wrapper = vpy.create_api_wrapper('http://<full node ip>:9922', api_key='')\nts_chain = vpy.testnet_chain(custom_wrapper)\n```\n\n4. For completely custom chain:\n```python\nimport vsyspy as vpy\ncustom_wrapper = vpy.create_api_wrapper('http://<full node ip>:9922', api_key='')\nt_chain = vpy.Chain(chain_name='testnet', chain_id='T', address_version=5, api_wrapper=custom_wrapper)\ncustom_wrapper2 = vpy.create_api_wrapper('http://<full node ip>:9922', api_key='')\nm_chain = vpy.Chain(chain_name='mainnet', chain_id='M', address_version=5, api_wrapper=custom_wrapper2)\ncustom_wrapper3 = vpy.create_api_wrapper('http://<full node ip>:9922', api_key='')\nc_chain = vpy.Chain(chain_name='mychain', chain_id='C', address_version=1, api_wrapper=custom_wrapper3)\n```\n\n### chain api list\n1. look up current block height of the chain:\n```python\nts_chain.height()\n```\n2. look up the last block info of the chain:\n```python\nts_chain.lastblock()\n```\n3. look up a block info at n in the chain:\n```python\nts_chain.block(n)\n```\n4. Get a transaction info by transacion id in the chain:\n```python\nts_chain.tx(tx_id)\n```\n5. Validate an address of the chain:\n```python\nts_chain.validate_address(addr)\n```\n\n### address object\n1. constructed by seed\n```python\nfrom vsyspy import Account\nmy_address = Account(chain=ts_chain, seed='<your seed>', nonce=0)\n```\n2. constructed by private key\n```python\nfrom vsyspy import Account\nmy_address = Account(chain=ts_chain, private_key='<your base58 private key>')\n```\n3. constructed by public key\n```python\nfrom vsyspy import Account\nrecipient = Account(chain=ts_chain, public_key='<base58 public key>')\n```\n4. constructed by wallet address\n```python\nfrom vsyspy import Account\nrecipient = Account(chain=ts_chain, address='<base58 wallet address>')\n```\n \n### address api list\n1. Get balance\n```python\n# get balance\nbalance = my_address.balance()\nprint(\"The balance is {}\".format(balance))\n# get balance after 16 confirmations \nbalance = my_address.balance(confirmations = 16)\nprint(\"The balance is {}\".format(balance))\n```\n2. Send payment transaction\n```python\n# send payment (100000000 = 1 VSYS)\nmy_address.send_payment(recipient, amount=100000000)\n```\n3. Send and cancel lease transaction\n```python\n# send lease (100000000 = 1 VSYS)\nresponse = my_address.lease(recipient, amount=100000000)\ntx_id = response[\"id\"]\n# cancel lease\nmy_address.lease_cancel(tx_id)\n```\n\n### contract object\n1. contructed by base58 string\n```python\nfrom vsyspy import Contract\nmy_contract = Contract('<contract-base58-string>')\n```\nor\n```python\nmy_contract = Contract()\nmy_contract.from_base58_string('<contract-base58-string>')\n```\n\n2. contructed from scratch\n```python\nfrom vsyspy import Contract\nmy_contract = Contract()\nmy_contract.language_code = <language_code>\nmy_contract.language_version = <language_version>\nmy_contract.trigger = <trigger>\nmy_contract.descriptor = <descriptor_without_split>\nmy_contract.state_variable = <state_variable>\nmy_contract.state_map = <state_map>\nmy_contract.textual = <textual>\n```\n\n3. default contract (token contract without split)\n```python\nimport vsyspy as vpy\nmy_contract = vpy.default_contract()\n```\n    \n### contract api list\n1. Get json\n```python\nmy_contract.json\n```\n\n2. Get bytes\n```python\nmy_contract.bytes\n```\n\n3. Get base58 string\n```python\nmy_contract.base58_string\n```\n\n4. Register contract\n```python\nfrom vsyspy import DataEntry, Contract\nfrom vsyspy.contract import Type\n# register contract of max 1000000000000 and unit 1000000\ncontract = Contract('<contract-base58-string>')\nmaximum = DataEntry(1000000000000, Type.amount)\nunit = DataEntry(1000000, Type.amount)\nshort_txt = DataEntry('', Type.short_text)\ninit_data_stack = [maximum, unit, short_txt]\nresponse = my_address.register_contract(contract, init_data_stack)\ncontract_id = response[\"contractId\"]\n```\n5. Execute contract\n```python\n# execute issue function of 1000000000 tokens\namount = DataEntry(1000000000, Type.amount)\nissue_data_stack = [amount]\nmy_address.execute_contract(contract_id, 1, issue_data_stack)\n```", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/Icermli/vsyspy/archive/version@2020.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Icermli/vsyspy", "keywords": "api wrapper", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "vsyspy", "package_url": "https://pypi.org/project/vsyspy/", "platform": "", "project_url": "https://pypi.org/project/vsyspy/", "project_urls": {"Download": "https://github.com/Icermli/vsyspy/archive/version@2020.3.tar.gz", "Homepage": "https://github.com/Icermli/vsyspy"}, "release_url": "https://pypi.org/project/vsyspy/2020.3/", "requires_dist": null, "requires_python": ">=3.0", "summary": "A Python api wrapper for VSYS network.", "version": "2020.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>[![version](<a href=\"https://img.shields.io/badge/version-2020.1-ff69b4.svg)%5D(/vsyspy/version.py\" rel=\"nofollow\">https://img.shields.io/badge/version-2020.1-ff69b4.svg)](/vsyspy/version.py</a>)\n[![license](<a href=\"https://img.shields.io/badge/license-MIT-blue.svg)%5D(/LICENSE\" rel=\"nofollow\">https://img.shields.io/badge/license-MIT-blue.svg)](/LICENSE</a>)\n[![downloads](<a href=\"https://img.shields.io/github/downloads/Icermli/vsyspy/total.svg)%5D(https://github.com/Icermli/vsyspy/releases\" rel=\"nofollow\">https://img.shields.io/github/downloads/Icermli/vsyspy/total.svg)](https://github.com/Icermli/vsyspy/releases</a>)\n[![issues](<a href=\"https://img.shields.io/github/issues/Icermli/vsyspy.svg)%5D(https://github.com/Icermli/vsyspy/issues\" rel=\"nofollow\">https://img.shields.io/github/issues/Icermli/vsyspy.svg)](https://github.com/Icermli/vsyspy/issues</a>)</p>\n<p># VSYSPY\nA python wrapper for vsys api.</p>\n<p>## Install</p>\n<p>### Install source code\n1. clone the repo under you workspace\n<tt>`shell script\ngit clone <span class=\"pre\">https://github.com/Icermli/vsyspy.git</span>\n`</tt>\n2. install packages in vsyspy/requirement.txt by\n<tt>`shell script\ncd vsyspy\npip install .\n`</tt>\nOr, for developers, you may want to install the package with a symlink,\n<tt>`shell script\npip install <span class=\"pre\">-e</span> .\n`</tt>\n3. Then you can <tt>`import vsyspy`</tt> in your workspace</p>\n<p>### Install via PyPi\n<tt>`shell script\npip install vsyspy\n`</tt></p>\n<p>## Usage</p>\n<p>### chain object\n1. For testnet:\n<tt>`python\nimport vsyspy as vpy\nts_chain = vpy.testnet_chain()\n`</tt>\n2. For default chain:\n<tt>`python\nimport vsyspy as vpy\nmain_chain = vpy.default_chain()\n`</tt></p>\n<p>3. For custom api node:\n<tt>`python\nimport vsyspy as vpy\ncustom_wrapper = <span class=\"pre\">vpy.create_api_wrapper('http://&lt;full</span> node <span class=\"pre\">ip&gt;:9922',</span> <span class=\"pre\">api_key='')</span>\nts_chain = vpy.testnet_chain(custom_wrapper)\n`</tt></p>\n<p>4. For completely custom chain:\n<tt>`python\nimport vsyspy as vpy\ncustom_wrapper = <span class=\"pre\">vpy.create_api_wrapper('http://&lt;full</span> node <span class=\"pre\">ip&gt;:9922',</span> <span class=\"pre\">api_key='')</span>\nt_chain = <span class=\"pre\">vpy.Chain(chain_name='testnet',</span> <span class=\"pre\">chain_id='T',</span> address_version=5, api_wrapper=custom_wrapper)\ncustom_wrapper2 = <span class=\"pre\">vpy.create_api_wrapper('http://&lt;full</span> node <span class=\"pre\">ip&gt;:9922',</span> <span class=\"pre\">api_key='')</span>\nm_chain = <span class=\"pre\">vpy.Chain(chain_name='mainnet',</span> <span class=\"pre\">chain_id='M',</span> address_version=5, api_wrapper=custom_wrapper2)\ncustom_wrapper3 = <span class=\"pre\">vpy.create_api_wrapper('http://&lt;full</span> node <span class=\"pre\">ip&gt;:9922',</span> <span class=\"pre\">api_key='')</span>\nc_chain = <span class=\"pre\">vpy.Chain(chain_name='mychain',</span> <span class=\"pre\">chain_id='C',</span> address_version=1, api_wrapper=custom_wrapper3)\n`</tt></p>\n<p>### chain api list\n1. look up current block height of the chain:\n<tt>`python\nts_chain.height()\n`</tt>\n2. look up the last block info of the chain:\n<tt>`python\nts_chain.lastblock()\n`</tt>\n3. look up a block info at n in the chain:\n<tt>`python\nts_chain.block(n)\n`</tt>\n4. Get a transaction info by transacion id in the chain:\n<tt>`python\nts_chain.tx(tx_id)\n`</tt>\n5. Validate an address of the chain:\n<tt>`python\nts_chain.validate_address(addr)\n`</tt></p>\n<p>### address object\n1. constructed by seed\n<tt>`python\nfrom vsyspy import Account\nmy_address = Account(chain=ts_chain, <span class=\"pre\">seed='&lt;your</span> <span class=\"pre\">seed&gt;',</span> nonce=0)\n`</tt>\n2. constructed by private key\n<tt>`python\nfrom vsyspy import Account\nmy_address = Account(chain=ts_chain, <span class=\"pre\">private_key='&lt;your</span> base58 private <span class=\"pre\">key&gt;')</span>\n`</tt>\n3. constructed by public key\n<tt>`python\nfrom vsyspy import Account\nrecipient = Account(chain=ts_chain, <span class=\"pre\">public_key='&lt;base58</span> public <span class=\"pre\">key&gt;')</span>\n`</tt>\n4. constructed by wallet address\n<tt>`python\nfrom vsyspy import Account\nrecipient = Account(chain=ts_chain, <span class=\"pre\">address='&lt;base58</span> wallet <span class=\"pre\">address&gt;')</span>\n`</tt></p>\n<p>### address api list\n1. Get balance\n<tt>`python\n# get balance\nbalance = my_address.balance()\n<span class=\"pre\">print(\"The</span> balance is <span class=\"pre\">{}\".format(balance))</span>\n# get balance after 16 confirmations\nbalance = my_address.balance(confirmations = 16)\n<span class=\"pre\">print(\"The</span> balance is <span class=\"pre\">{}\".format(balance))</span>\n`</tt>\n2. Send payment transaction\n<tt>`python\n# send payment (100000000 = 1 VSYS)\nmy_address.send_payment(recipient, amount=100000000)\n`</tt>\n3. Send and cancel lease transaction\n<tt>`python\n# send lease (100000000 = 1 VSYS)\nresponse = my_address.lease(recipient, amount=100000000)\ntx_id = <span class=\"pre\">response[\"id\"]</span>\n# cancel lease\nmy_address.lease_cancel(tx_id)\n`</tt></p>\n<p>### contract object\n1. contructed by base58 string\n<tt>`python\nfrom vsyspy import Contract\nmy_contract = <span class=\"pre\">Contract('&lt;contract-base58-string&gt;')</span>\n`</tt>\nor\n<tt>`python\nmy_contract = Contract()\n<span class=\"pre\">my_contract.from_base58_string('&lt;contract-base58-string&gt;')</span>\n`</tt></p>\n<p>2. contructed from scratch\n<tt>`python\nfrom vsyspy import Contract\nmy_contract = Contract()\nmy_contract.language_code = &lt;language_code&gt;\nmy_contract.language_version = &lt;language_version&gt;\nmy_contract.trigger = &lt;trigger&gt;\nmy_contract.descriptor = &lt;descriptor_without_split&gt;\nmy_contract.state_variable = &lt;state_variable&gt;\nmy_contract.state_map = &lt;state_map&gt;\nmy_contract.textual = &lt;textual&gt;\n`</tt></p>\n<p>3. default contract (token contract without split)\n<tt>`python\nimport vsyspy as vpy\nmy_contract = vpy.default_contract()\n`</tt></p>\n<p>### contract api list\n1. Get json\n<tt>`python\nmy_contract.json\n`</tt></p>\n<p>2. Get bytes\n<tt>`python\nmy_contract.bytes\n`</tt></p>\n<p>3. Get base58 string\n<tt>`python\nmy_contract.base58_string\n`</tt></p>\n<p>4. Register contract\n<tt>`python\nfrom vsyspy import DataEntry, Contract\nfrom vsyspy.contract import Type\n# register contract of max 1000000000000 and unit 1000000\ncontract = <span class=\"pre\">Contract('&lt;contract-base58-string&gt;')</span>\nmaximum = DataEntry(1000000000000, Type.amount)\nunit = DataEntry(1000000, Type.amount)\nshort_txt = <span class=\"pre\">DataEntry('',</span> Type.short_text)\ninit_data_stack = [maximum, unit, short_txt]\nresponse = my_address.register_contract(contract, init_data_stack)\ncontract_id = <span class=\"pre\">response[\"contractId\"]</span>\n`</tt>\n5. Execute contract\n<tt>`python\n# execute issue function of 1000000000 tokens\namount = DataEntry(1000000000, Type.amount)\nissue_data_stack = [amount]\nmy_address.execute_contract(contract_id, 1, issue_data_stack)\n`</tt></p>\n\n          </div>"}, "last_serial": 6926046, "releases": {"2019.12": [{"comment_text": "", "digests": {"md5": "bcfe1ed2b04f28c3da97b74e4afb7ef0", "sha256": "44be1e46535147d8745d8dd1ffb268bf91c6e99ec72029f3a51c9c717955dcf4"}, "downloads": -1, "filename": "vsyspy-2019.12.tar.gz", "has_sig": false, "md5_digest": "bcfe1ed2b04f28c3da97b74e4afb7ef0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 25658, "upload_time": "2019-12-19T09:02:31", "upload_time_iso_8601": "2019-12-19T09:02:31.155576Z", "url": "https://files.pythonhosted.org/packages/77/c8/f8ab987c663f9db9cfa620159a77fb993a61de01166b637da8a6de81aae9/vsyspy-2019.12.tar.gz", "yanked": false}], "2020.1": [{"comment_text": "", "digests": {"md5": "d0ff0208a85ce7ad43fd1e3b8a26c262", "sha256": "e7b388e45fe904ba4d842f485a2444d290218b2a212fe84163c92339a9dcde67"}, "downloads": -1, "filename": "vsyspy-2020.1.tar.gz", "has_sig": false, "md5_digest": "d0ff0208a85ce7ad43fd1e3b8a26c262", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 29370, "upload_time": "2019-12-23T06:21:06", "upload_time_iso_8601": "2019-12-23T06:21:06.576166Z", "url": "https://files.pythonhosted.org/packages/4e/b7/d2e352cc50e2d63b806030c36d3090336857c4f8730c08c8d3842587cb79/vsyspy-2020.1.tar.gz", "yanked": false}], "2020.3": [{"comment_text": "", "digests": {"md5": "700fecac4691081e3d6d32752cfe4456", "sha256": "5919ba9692a337ea6c3088f042da7e67ce19b8504317eafb815f5e98ff17cc3a"}, "downloads": -1, "filename": "vsyspy-2020.3.tar.gz", "has_sig": false, "md5_digest": "700fecac4691081e3d6d32752cfe4456", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 29126, "upload_time": "2020-04-01T08:24:03", "upload_time_iso_8601": "2020-04-01T08:24:03.136332Z", "url": "https://files.pythonhosted.org/packages/f2/05/0286ed0899f14e2f32e229cd5e28455be784d55a551bd9096e93781f146d/vsyspy-2020.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "700fecac4691081e3d6d32752cfe4456", "sha256": "5919ba9692a337ea6c3088f042da7e67ce19b8504317eafb815f5e98ff17cc3a"}, "downloads": -1, "filename": "vsyspy-2020.3.tar.gz", "has_sig": false, "md5_digest": "700fecac4691081e3d6d32752cfe4456", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 29126, "upload_time": "2020-04-01T08:24:03", "upload_time_iso_8601": "2020-04-01T08:24:03.136332Z", "url": "https://files.pythonhosted.org/packages/f2/05/0286ed0899f14e2f32e229cd5e28455be784d55a551bd9096e93781f146d/vsyspy-2020.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:33:47 2020"}