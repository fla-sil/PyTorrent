{"info": {"author": "Arthur Loder", "author_email": "art@artloder.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Topic :: Utilities"], "description": "icanhasfile is a Python module that helps you locate and operate on files using\nglob searches.\n\ninstallashun\n------------\n\nRun the following command to install icanhasfile:\n\n.. code-block:: bash\n\n $ pip install --pre icanhasfile\n\nusage\n-----\n\nTo get the help dialog, run one of the following commands:\n\n.. code-block:: bash\n\n $ icanhasfile --help\n $ icanhasfile -h\n $ icanhasfile -?\n\nThe general command syntax is below. For a list of options, see the help\ndialog. In the first form, you provide an explicit path to search; in the\nsecond, the search is executed in the current directory.\n\n.. code-block:: bash\n\n $ icanhasfile [options] <path> <filepattern>\n $ icanhasfile [options] <filepattern>\n\n\nexamplez\n--------\nAs an example, let's say we have the following directory structure:\n\n.. code-block:: bash\n\n +-- pom.xml\n +-- LICENSE.txt\n |\n +-- dir1/\n |   |\n |   \\-- pom.xml\n |\n +-- dir2/\n |   |\n |   +-- assembly.xml\n |   +-- pom.xml\n |   \\-- version.txt\n |\n +-- dir3/\n     |\n     \\-- context.xml\n\nIf you are searching for *pom.xml* and want to give the absolute path to the\ntop-level directory, issue the command below. You will be prompted to choose\nfrom three matching files:\n\n.. code-block:: bash\n\n $ icanhasfile /path/to/top-level/dir pom.xml\n [0] pom.xml\n [1] dir1/pom.xml\n [2] dir2/pom.xml\n Choose a number (q to quit):\n\nIf you are already in the top-level directory and are searching for *pom.xml*,\nissue the command below. You will be prompted to choose from three matching\nfiles:\n\n.. code-block:: bash\n\n $ icanhasfile pom.xml\n [0] pom.xml\n [1] dir1/pom.xml\n [2] dir2/pom.xml\n Choose a number (q to quit):\n\nIf you are already in the top-level directory and are searching for *all* xml\nfiles, issue the command below. You will be prompted to choose from five\nmatching files:\n\n.. code-block:: bash\n\n $ icanhasfile '*.xml'\n [0] pom.xml\n [1] dir1/pom.xml\n [2] dir2/assembly.xml\n [3] dir2/pom.xml\n [4] dir3/context.xml\n Choose a number (q to quit):\n\nBy default, the selected file will be opened using your $EDITOR. However, you\ncan also provide a **--command** option to use a different command on your\npath. In the example below, we will just *cat* out the file. Also, as it is\nrun in the icanhasfile source directory and there is only a single matching\nfile, the file is cat'd without asking the user to choose from multiple\nmatching files:\n\n.. code-block:: bash\n\n $ icanhasfile.py --command cat . MANIFEST.in\n include LICENSE.txt\n include README.rst", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://artloder.com/code/icanhasfile/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "icanhasfile", "package_url": "https://pypi.org/project/icanhasfile/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/icanhasfile/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://artloder.com/code/icanhasfile/"}, "release_url": "https://pypi.org/project/icanhasfile/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "COMPUTR, U HAS FILE. I CAN HAS IT?", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>icanhasfile is a Python module that helps you locate and operate on files using\nglob searches.</p>\n<div id=\"installashun\">\n<h2>installashun</h2>\n<p>Run the following command to install icanhasfile:</p>\n<pre>$ pip install --pre icanhasfile\n</pre>\n</div>\n<div id=\"usage\">\n<h2>usage</h2>\n<p>To get the help dialog, run one of the following commands:</p>\n<pre>$ icanhasfile --help\n$ icanhasfile -h\n$ icanhasfile -?\n</pre>\n<p>The general command syntax is below. For a list of options, see the help\ndialog. In the first form, you provide an explicit path to search; in the\nsecond, the search is executed in the current directory.</p>\n<pre>$ icanhasfile <span class=\"o\">[</span>options<span class=\"o\">]</span> &lt;path&gt; &lt;filepattern&gt;\n$ icanhasfile <span class=\"o\">[</span>options<span class=\"o\">]</span> &lt;filepattern&gt;\n</pre>\n</div>\n<div id=\"examplez\">\n<h2>examplez</h2>\n<p>As an example, let\u2019s say we have the following directory structure:</p>\n<pre>+-- pom.xml\n+-- LICENSE.txt\n<span class=\"p\">|</span>\n+-- dir1/\n<span class=\"p\">|</span>   <span class=\"p\">|</span>\n<span class=\"p\">|</span>   <span class=\"se\">\\-</span>- pom.xml\n<span class=\"p\">|</span>\n+-- dir2/\n<span class=\"p\">|</span>   <span class=\"p\">|</span>\n<span class=\"p\">|</span>   +-- assembly.xml\n<span class=\"p\">|</span>   +-- pom.xml\n<span class=\"p\">|</span>   <span class=\"se\">\\-</span>- version.txt\n<span class=\"p\">|</span>\n+-- dir3/\n    <span class=\"p\">|</span>\n    <span class=\"se\">\\-</span>- context.xml\n</pre>\n<p>If you are searching for <em>pom.xml</em> and want to give the absolute path to the\ntop-level directory, issue the command below. You will be prompted to choose\nfrom three matching files:</p>\n<pre>$ icanhasfile /path/to/top-level/dir pom.xml\n<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span> pom.xml\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span> dir1/pom.xml\n<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span> dir2/pom.xml\nChoose a number <span class=\"o\">(</span>q to quit<span class=\"o\">)</span>:\n</pre>\n<p>If you are already in the top-level directory and are searching for <em>pom.xml</em>,\nissue the command below. You will be prompted to choose from three matching\nfiles:</p>\n<pre>$ icanhasfile pom.xml\n<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span> pom.xml\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span> dir1/pom.xml\n<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span> dir2/pom.xml\nChoose a number <span class=\"o\">(</span>q to quit<span class=\"o\">)</span>:\n</pre>\n<p>If you are already in the top-level directory and are searching for <em>all</em> xml\nfiles, issue the command below. You will be prompted to choose from five\nmatching files:</p>\n<pre>$ icanhasfile <span class=\"s1\">'*.xml'</span>\n<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span> pom.xml\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span> dir1/pom.xml\n<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span> dir2/assembly.xml\n<span class=\"o\">[</span><span class=\"m\">3</span><span class=\"o\">]</span> dir2/pom.xml\n<span class=\"o\">[</span><span class=\"m\">4</span><span class=\"o\">]</span> dir3/context.xml\nChoose a number <span class=\"o\">(</span>q to quit<span class=\"o\">)</span>:\n</pre>\n<p>By default, the selected file will be opened using your $EDITOR. However, you\ncan also provide a <strong>\u2013command</strong> option to use a different command on your\npath. In the example below, we will just <em>cat</em> out the file. Also, as it is\nrun in the icanhasfile source directory and there is only a single matching\nfile, the file is cat\u2019d without asking the user to choose from multiple\nmatching files:</p>\n<pre>$ icanhasfile.py --command cat . MANIFEST.in\ninclude LICENSE.txt\ninclude README.rst\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1681868, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4ca365cdc6dc26d3cf7417fc8b871527", "sha256": "65053e816d7955287bdb90b5fc524607367089ca45ef70d7fbf4106a2faa9ad2"}, "downloads": -1, "filename": "icanhasfile-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4ca365cdc6dc26d3cf7417fc8b871527", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4803, "upload_time": "2015-08-18T06:55:27", "upload_time_iso_8601": "2015-08-18T06:55:27.015226Z", "url": "https://files.pythonhosted.org/packages/be/50/d0dc621b40a9995bae376ced71e116700cc27bfdb5ac4157f23c205cfb56/icanhasfile-0.1.0.tar.gz", "yanked": false}], "0.1.0.dev": [{"comment_text": "", "digests": {"md5": "0617dcf081008ac34ddfd9b0a79ab65e", "sha256": "e64e93a5184c7bd7940a95d6558d2135cc742ea91535542eb6c21988660d8eb1"}, "downloads": -1, "filename": "icanhasfile-0.1.0.dev.tar.gz", "has_sig": false, "md5_digest": "0617dcf081008ac34ddfd9b0a79ab65e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4619, "upload_time": "2014-07-24T03:04:49", "upload_time_iso_8601": "2014-07-24T03:04:49.062471Z", "url": "https://files.pythonhosted.org/packages/5c/ef/21c16817b95192946d7b506eaadbd78d0cc180ddd72d49b129ed8664d7c8/icanhasfile-0.1.0.dev.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ca365cdc6dc26d3cf7417fc8b871527", "sha256": "65053e816d7955287bdb90b5fc524607367089ca45ef70d7fbf4106a2faa9ad2"}, "downloads": -1, "filename": "icanhasfile-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4ca365cdc6dc26d3cf7417fc8b871527", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4803, "upload_time": "2015-08-18T06:55:27", "upload_time_iso_8601": "2015-08-18T06:55:27.015226Z", "url": "https://files.pythonhosted.org/packages/be/50/d0dc621b40a9995bae376ced71e116700cc27bfdb5ac4157f23c205cfb56/icanhasfile-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:08 2020"}