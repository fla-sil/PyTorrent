{"info": {"author": "Kilian Pfeiffer", "author_email": "kilian.pfeiffer@rwth-aachen.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# TypeConf\n\n## A static configuration parser for python using templates\n\nPython is as a dynamic programming language inherently prone to runtime errors. This  is especially problematic for long-running programms. A wrong configuration then can lead to the loss of precious computation.\n\nSounds familiar?\n\nTypeConf builds a configuration parser from templates, that can be hierarchical nested to define your individual configuration. This template can be easily parsed then at the beginning of your code and checked for your individual requirements.\n\nFurthermore, TypeConf helps maintain up-to-date configurations by quickly revealing broken configurations and making easy to support old configurations despite changes.\n\n# Installation \n## From PyPi\npip install typeconf\n## From source\npip install git+https://github.com/kilsenp/TypeConf.git\n\n# Demo\n\n```yaml\n# templates/parent.yaml\nattr_int:\n    dtype: int\n    required: False\n    help: \"This is an int\"\n    default: 0\n    type: \"datatype\"\nattr_child:\n    dtype: child\n    required: False\n    help: \"This a type constructed from another yaml\"\n    type: \"datatype\"        \n```\n\n\n\n```yaml\n# templates/child.yaml\nattr_bool:\n    dtype: bool\n    required: True\n    help: \"This is a bool\"\n    type: \"datatype\"\n```\n\n\n\nTypeConf will be automatically be able to solve the dependencies when building the type.\n\n```python\n# main.py\nfrom typeconf import TypeFactory\nfactory = TypeFactory()\nfactory.register_search_directory('templates')\ntemplate = factory.build_template('parent')\n\n```\n\nWe can now pass a config file to be parsed.\n\n```yaml\n# config.yaml\nattr_child:\n    attr_bool: True\n```\n\n```python\ntemplate.fill_from_file('config.yaml')\n```\n\nThis values can also be overwritten by command line arguments, addressing subconfigs through dot separated names.\n\n```python\nfrom argparse import ArgumentParser\nparser = ArgumentParser()\nparser.add_argument('task')\n# python main.py test attr_child.attr_bool=False\nargs, unknown_args = parser.parse_known_args()\n# args.task = test\ntemplate.fill_from_cl(unknown_args)\n```\n\nFinally we create the config that can be used throughout the rest of the code.\n\n```python\nconfig = template.to_config()  # Actual parsing happens here\n# {\n#    attr_int: 0,\n#    attr_child: {\n#       attr_bool: False  #overwritten by cli\n#    }\n# }\n```\n\n# Features\n\n- Static configuration parsing before program is started\n- Easy verification of existing configurations, if they still work with the current pipeline\n- Easy extension of existing configurations by adding default values to templates\n- Automatically make types within a subfolder choosable\n- Comment individual configuration values\n- Overwrite values using the command line or from code\n- Data type testing, ensure the correct datatype:\n  - int\n  - float\n  - str\n  - bool\n\n## TODO\n\n- [x] clean split between types, attributes, special types\n- [ ] Consistent naming\n- [ ] Allow more combinations e.g. choice of + datatype\n- [ ] better error messages\n- [ ] config from python file\n- [ ] unit tests\n- [ ] @config_file('path_to_cfg')\n- [ ] eval and type are not exclusive. make additional attribute\n- [ ] Better name parser instead of type?\n- [ ] Pretty print with comments\n- [x] Command line interface\n- [ ] Conditional requirements. If a is set b also has to be set. Better if b is a part of a? Leads to duplicates\n- [ ] Generation of a seed.\n- [ ] Pip Package\n- [ ] Github Services\n- [ ] Copy From to ensure same training as validation, or make it as default?\n- [ ] ensure two values are equal, but then why even set two?\n- [ ] Config updates, pass multiple configs\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kilsenp/TypeConf", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "typeconf", "package_url": "https://pypi.org/project/typeconf/", "platform": "", "project_url": "https://pypi.org/project/typeconf/", "project_urls": {"Homepage": "https://github.com/kilsenp/TypeConf"}, "release_url": "https://pypi.org/project/typeconf/0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A static configuration parser for python using templates", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TypeConf</h1>\n<h2>A static configuration parser for python using templates</h2>\n<p>Python is as a dynamic programming language inherently prone to runtime errors. This  is especially problematic for long-running programms. A wrong configuration then can lead to the loss of precious computation.</p>\n<p>Sounds familiar?</p>\n<p>TypeConf builds a configuration parser from templates, that can be hierarchical nested to define your individual configuration. This template can be easily parsed then at the beginning of your code and checked for your individual requirements.</p>\n<p>Furthermore, TypeConf helps maintain up-to-date configurations by quickly revealing broken configurations and making easy to support old configurations despite changes.</p>\n<h1>Installation</h1>\n<h2>From PyPi</h2>\n<p>pip install typeconf</p>\n<h2>From source</h2>\n<p>pip install git+<a href=\"https://github.com/kilsenp/TypeConf.git\" rel=\"nofollow\">https://github.com/kilsenp/TypeConf.git</a></p>\n<h1>Demo</h1>\n<pre><span class=\"c1\"># templates/parent.yaml</span>\n<span class=\"nt\">attr_int</span><span class=\"p\">:</span>\n    <span class=\"nt\">dtype</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">int</span>\n    <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">False</span>\n    <span class=\"nt\">help</span><span class=\"p\">:</span> <span class=\"s\">\"This</span><span class=\"nv\"> </span><span class=\"s\">is</span><span class=\"nv\"> </span><span class=\"s\">an</span><span class=\"nv\"> </span><span class=\"s\">int\"</span>\n    <span class=\"nt\">default</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"s\">\"datatype\"</span>\n<span class=\"nt\">attr_child</span><span class=\"p\">:</span>\n    <span class=\"nt\">dtype</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">child</span>\n    <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">False</span>\n    <span class=\"nt\">help</span><span class=\"p\">:</span> <span class=\"s\">\"This</span><span class=\"nv\"> </span><span class=\"s\">a</span><span class=\"nv\"> </span><span class=\"s\">type</span><span class=\"nv\"> </span><span class=\"s\">constructed</span><span class=\"nv\"> </span><span class=\"s\">from</span><span class=\"nv\"> </span><span class=\"s\">another</span><span class=\"nv\"> </span><span class=\"s\">yaml\"</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"s\">\"datatype\"</span>        \n</pre>\n<pre><span class=\"c1\"># templates/child.yaml</span>\n<span class=\"nt\">attr_bool</span><span class=\"p\">:</span>\n    <span class=\"nt\">dtype</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">bool</span>\n    <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n    <span class=\"nt\">help</span><span class=\"p\">:</span> <span class=\"s\">\"This</span><span class=\"nv\"> </span><span class=\"s\">is</span><span class=\"nv\"> </span><span class=\"s\">a</span><span class=\"nv\"> </span><span class=\"s\">bool\"</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"s\">\"datatype\"</span>\n</pre>\n<p>TypeConf will be automatically be able to solve the dependencies when building the type.</p>\n<pre><span class=\"c1\"># main.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typeconf</span> <span class=\"kn\">import</span> <span class=\"n\">TypeFactory</span>\n<span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">TypeFactory</span><span class=\"p\">()</span>\n<span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">register_search_directory</span><span class=\"p\">(</span><span class=\"s1\">'templates'</span><span class=\"p\">)</span>\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">build_template</span><span class=\"p\">(</span><span class=\"s1\">'parent'</span><span class=\"p\">)</span>\n</pre>\n<p>We can now pass a config file to be parsed.</p>\n<pre><span class=\"c1\"># config.yaml</span>\n<span class=\"nt\">attr_child</span><span class=\"p\">:</span>\n    <span class=\"nt\">attr_bool</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n</pre>\n<pre><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">fill_from_file</span><span class=\"p\">(</span><span class=\"s1\">'config.yaml'</span><span class=\"p\">)</span>\n</pre>\n<p>This values can also be overwritten by command line arguments, addressing subconfigs through dot separated names.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">argparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'task'</span><span class=\"p\">)</span>\n<span class=\"c1\"># python main.py test attr_child.attr_bool=False</span>\n<span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">unknown_args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_known_args</span><span class=\"p\">()</span>\n<span class=\"c1\"># args.task = test</span>\n<span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">fill_from_cl</span><span class=\"p\">(</span><span class=\"n\">unknown_args</span><span class=\"p\">)</span>\n</pre>\n<p>Finally we create the config that can be used throughout the rest of the code.</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">to_config</span><span class=\"p\">()</span>  <span class=\"c1\"># Actual parsing happens here</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#    attr_int: 0,</span>\n<span class=\"c1\">#    attr_child: {</span>\n<span class=\"c1\">#       attr_bool: False  #overwritten by cli</span>\n<span class=\"c1\">#    }</span>\n<span class=\"c1\"># }</span>\n</pre>\n<h1>Features</h1>\n<ul>\n<li>Static configuration parsing before program is started</li>\n<li>Easy verification of existing configurations, if they still work with the current pipeline</li>\n<li>Easy extension of existing configurations by adding default values to templates</li>\n<li>Automatically make types within a subfolder choosable</li>\n<li>Comment individual configuration values</li>\n<li>Overwrite values using the command line or from code</li>\n<li>Data type testing, ensure the correct datatype:\n<ul>\n<li>int</li>\n<li>float</li>\n<li>str</li>\n<li>bool</li>\n</ul>\n</li>\n</ul>\n<h2>TODO</h2>\n<ul>\n<li>[x] clean split between types, attributes, special types</li>\n<li>[ ] Consistent naming</li>\n<li>[ ] Allow more combinations e.g. choice of + datatype</li>\n<li>[ ] better error messages</li>\n<li>[ ] config from python file</li>\n<li>[ ] unit tests</li>\n<li>[ ] @config_file('path_to_cfg')</li>\n<li>[ ] eval and type are not exclusive. make additional attribute</li>\n<li>[ ] Better name parser instead of type?</li>\n<li>[ ] Pretty print with comments</li>\n<li>[x] Command line interface</li>\n<li>[ ] Conditional requirements. If a is set b also has to be set. Better if b is a part of a? Leads to duplicates</li>\n<li>[ ] Generation of a seed.</li>\n<li>[ ] Pip Package</li>\n<li>[ ] Github Services</li>\n<li>[ ] Copy From to ensure same training as validation, or make it as default?</li>\n<li>[ ] ensure two values are equal, but then why even set two?</li>\n<li>[ ] Config updates, pass multiple configs</li>\n</ul>\n\n          </div>"}, "last_serial": 6224795, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c72e727baacf94eeb48eb8905fe183be", "sha256": "39e165d0612afbb9218c63c873676d4971bb8fa82a808f6490930ab7fba756e2"}, "downloads": -1, "filename": "typeconf-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c72e727baacf94eeb48eb8905fe183be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12069, "upload_time": "2019-12-01T16:05:37", "upload_time_iso_8601": "2019-12-01T16:05:37.403713Z", "url": "https://files.pythonhosted.org/packages/e8/03/ee5e44e55235297b6f367f006b87698dd765902ccb83fa8e8a5c52f4742e/typeconf-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8a165d465106896ec0472cff3bf1bdb", "sha256": "e9d5e7328102b6ccefdad6893166466c813fa37d496d46738d400e87b82043c5"}, "downloads": -1, "filename": "typeconf-0.1.tar.gz", "has_sig": false, "md5_digest": "f8a165d465106896ec0472cff3bf1bdb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10262, "upload_time": "2019-12-01T16:05:39", "upload_time_iso_8601": "2019-12-01T16:05:39.594499Z", "url": "https://files.pythonhosted.org/packages/fc/4d/32bc0c3b79a7edf9c05a53099d59bc23cc2bb5d6fbd0d7a60d0b837d708c/typeconf-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c72e727baacf94eeb48eb8905fe183be", "sha256": "39e165d0612afbb9218c63c873676d4971bb8fa82a808f6490930ab7fba756e2"}, "downloads": -1, "filename": "typeconf-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c72e727baacf94eeb48eb8905fe183be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12069, "upload_time": "2019-12-01T16:05:37", "upload_time_iso_8601": "2019-12-01T16:05:37.403713Z", "url": "https://files.pythonhosted.org/packages/e8/03/ee5e44e55235297b6f367f006b87698dd765902ccb83fa8e8a5c52f4742e/typeconf-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8a165d465106896ec0472cff3bf1bdb", "sha256": "e9d5e7328102b6ccefdad6893166466c813fa37d496d46738d400e87b82043c5"}, "downloads": -1, "filename": "typeconf-0.1.tar.gz", "has_sig": false, "md5_digest": "f8a165d465106896ec0472cff3bf1bdb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10262, "upload_time": "2019-12-01T16:05:39", "upload_time_iso_8601": "2019-12-01T16:05:39.594499Z", "url": "https://files.pythonhosted.org/packages/fc/4d/32bc0c3b79a7edf9c05a53099d59bc23cc2bb5d6fbd0d7a60d0b837d708c/typeconf-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:56 2020"}