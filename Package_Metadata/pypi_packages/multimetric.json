{"info": {"author": "Konrad Weihmann", "author_email": "kweihmann@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Quality Assurance"], "description": "multimetric\n===========\n\n|Build status| |PyPI version| |Python version| |Downloads| |Language\ngrade: Python|\n\nCalculate code metrics in various languages\n\nPurpose\n-------\n\nThis tool tries to calculate the following metrics for many, many\nprogramming languages\n\n-  Comment to Code percentage\n-  Cyclomatic complexity according to McCabe\n-  Difficulty according to Halstead\n-  Effort according to Halstead\n-  Fan-Out\n-  Lines of code\n-  Maintainability index\n-  Metric according to pylint\n-  Metric according to TIOBE\n-  Number of delivered bugs according to Halstead\n-  Time required to program according to Halstead\n-  Volume according to Halstead\n\nThis tool was heavily inspired by\n`metrics <https://github.com/markfink/metrics>`__\n\nRequirements\n------------\n\n-  python3\n-  `chardet <https://pypi.org/project/chardet/>`__\n-  `Pygments <http://pygments.org/>`__\n\nInstallation\n------------\n\nPyPi\n~~~~\n\nsimply run\n\n.. code:: sh\n\n   pip3 install multimetric\n\nFrom source\n~~~~~~~~~~~\n\n-  git clone this repository\n-  cd to <clone folder>\n-  Install the needed requirements by running\n   ``pip3 install -r requirements.txt``\n-  run ``python3 setup.py build``\n\nUsage\n-----\n\n.. code:: shell\n\n   usage: multimetric [-h] [--warn_compiler WARN_COMPILER]\n                      [--warn_duplication WARN_DUPLICATION]\n                      [--warn_functional WARN_FUNCTIONAL]\n                      [--warn_standard WARN_STANDARD]\n                      [--warn_security WARN_SECURITY] [--coverage COVERAGE]\n                      [--bugpredict {old,new}]\n                      [--maintindex {sei,classic,microsoft}]\n                      files [files ...]\n\n   Calculate code metrics in various languages\n\n   positional arguments:\n     files                 Files to parse\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --warn_compiler WARN_COMPILER\n                           File(s) holding information about compiler warnings\n     --warn_duplication WARN_DUPLICATION\n                           File(s) holding information about code duplications\n     --warn_functional WARN_FUNCTIONAL\n                           File(s) holding information about static code analysis findings\n     --warn_standard WARN_STANDARD\n                           File(s) holding information about language standard violations\n     --warn_security WARN_SECURITY\n                           File(s) File(s) holding information about found security issue\n     --coverage COVERAGE   File(s) with compiler warningsFile(s) holding information about testing coverage\n     --bugpredict {old,new}\n                           Method how to calculate the bug prediction\n     --maintindex {sei,classic,microsoft}\n                           Method how to calculate the maintainability index\n\n   Currently you could import files of the following types for --warn_* or --coverage\n\n   Following information can be read\n\n       <file> = full path to file\n       <content> = either a string\n       <severity> = optional severity\n\n       Note: you could also add a single line, then <content>\n           has to be a number reflecting to total number of findings\n\n   File formats\n\n   csv: CSV file of following line format\n        <file>,<content>,<severity>\n\n   json: JSON file\n        <file>: {\n            \"content\": <content>,\n            \"severity\": <severity>\n        }\n\nBy default tool guesses the content type by the filename, if that\ndoesn\u2019t work for you please see below\n\nOutput\n------\n\nOutput will be written to stdout as json.\n\nOutput structure\n~~~~~~~~~~~~~~~~\n\n-  ``files`` contains a list of each file passed by CLI\n-  ``overall`` contains the calculated values for all passed files\n-  ``stats`` contains the statistically calculated values over all files\n   passed `see Statistical additions <#statistics>`__\n\nItem structure\n^^^^^^^^^^^^^^\n\n+---------------+------------------------------------+-----+----------+\n| item          | description                        | ran | recommen |\n|               |                                    | ge  | dation   |\n+===============+====================================+=====+==========+\n| comment_ratio | Comment to Code percentage         | 0.. | > 30.0   |\n|               |                                    | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| cyclomatic_co | Cyclomatic complexity according to | 0.. | < 10     |\n| mplexity      | McCabe                             | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| fanout_extern | Number imports from out of tree    | 0.. |          |\n| al            | modules                            | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| fanout_intern | Number imports from same source    | 0.. |          |\n| al            | tree modules                       | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| halstead_bugp | Number of delivered bugs according | 0.. | < 0.05   |\n| rop           | to Halstead                        | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| halstead_diff | Difficulty according to Halstead   | 0.. |          |\n| iculty        |                                    | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| halstead_effo | Effort according to Halstead       | 0.. |          |\n| rt            |                                    | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| halstead_time | Time required to program according | 0.. |          |\n| required      | to Halstead                        | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| halstead_volu | Volume according to Halstead       | 0.. |          |\n| me            |                                    | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| lang          | list of identified programming     | lis |          |\n|               | languages                          | t   |          |\n+---------------+------------------------------------+-----+----------+\n| loc           | Lines of code                      | 1.. |          |\n|               |                                    | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| maintainabili | Maintainability index              | 0.. | > 80.0   |\n| ty_index      |                                    | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| operands_sum  | Number of used operands            | 1.. |          |\n|               |                                    | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| operands_uniq | Number of unique used operands     | 1.. |          |\n|               |                                    | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| operators_sum | Number of used operators           | 1.. |          |\n|               |                                    | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| operators_uni | Number of unique used operators    | 1.. |          |\n| q             |                                    | (in |          |\n|               |                                    | f)  |          |\n+---------------+------------------------------------+-----+----------+\n| pylint        | General quality score according to | 0.. | > 80.0   |\n|               | pylint                             | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| tiobe_compile | Compiler warnings score according  | 0.. | > 90.0   |\n| r             | to TIOBE                           | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| tiobe_complex | Complexity according to TIOBE      | 0.. | > 80.0   |\n| ity           |                                    | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| tiobe_coverag | Coverage according to TIOBE        | 0.. | > 80.0   |\n| e             |                                    | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| tiobe_duplica | Code duplications score according  | 0.. | > 80.0   |\n| tion          | to TIOBE                           | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| tiobe_fanout  | Fan-Out score according to TIOBE   | 0.. | > 80.0   |\n|               |                                    | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| tiobe_functio | Functional defect score according  | 0.. | > 90.0   |\n| nal           | to TIOBE                           | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| tiobe_securit | Security score according to TIOBE  | 0.. | > 90.0   |\n| y             |                                    | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| tiobe_standar | Language standard score according  | 0.. | > 80.0   |\n| d             | to TIOBE                           | 100 |          |\n+---------------+------------------------------------+-----+----------+\n| tiobe         | General quality score according to | 0.. | > 80.0   |\n|               | TIOBE                              | 100 |          |\n+---------------+------------------------------------+-----+----------+\n\nStatistics\n^^^^^^^^^^\n\nThe item ``stats`` contains in addition to the above mentioned the\nfollowing items, which by themselves contain all the items mentioned at\n`Item structure <#item-structure>`__\n\n-  ``max`` = the maximum value of all items of the metric\n-  ``mean`` = statistical mean over all items of the metric\n-  ``median`` = statistical median over all items of the metric\n-  ``min`` = the minimum value of all items of the metric\n-  ``sd`` = standard deviation over all items of the metric\n\nFurther reading\n---------------\n\n-  `Pygments <http://pygments.org/>`__\n\nBugs & Contribution\n-------------------\n\nFeel free to create issues or pull requests\n\n.. |Build status| image:: https://github.com/priv-kweihmann/multimetric/workflows/Build/badge.svg\n.. |PyPI version| image:: https://badge.fury.io/py/multimetric.svg\n   :target: https://badge.fury.io/py/multimetric\n.. |Python version| image:: https://img.shields.io/pypi/pyversions/multimetric\n   :target: https://img.shields.io/pypi/pyversions/multimetric\n.. |Downloads| image:: https://img.shields.io/pypi/dm/multimetric\n   :target: https://img.shields.io/pypi/dm/multimetric\n.. |Language grade: Python| image:: https://img.shields.io/lgtm/grade/python/g/priv-kweihmann/multimetric.svg?logo=lgtm&logoWidth=18\n   :target: https://lgtm.com/projects/g/priv-kweihmann/multimetric/context:python", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/priv-kweihmann/multimetric", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "multimetric", "package_url": "https://pypi.org/project/multimetric/", "platform": "", "project_url": "https://pypi.org/project/multimetric/", "project_urls": {"Homepage": "https://github.com/priv-kweihmann/multimetric"}, "release_url": "https://pypi.org/project/multimetric/1.1.4/", "requires_dist": null, "requires_python": "", "summary": "Calculate code metrics in various languages", "version": "1.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b7769787a095b825123a5c8c60de62b44cc2560/68747470733a2f2f6769746875622e636f6d2f707269762d6b776569686d616e6e2f6d756c74696d65747269632f776f726b666c6f77732f4275696c642f62616467652e737667\"> <a href=\"https://badge.fury.io/py/multimetric\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a3aa03c8c2d8fe45fdde261be3d37e8cad7b7b1/68747470733a2f2f62616467652e667572792e696f2f70792f6d756c74696d65747269632e737667\"></a> <a href=\"https://img.shields.io/pypi/pyversions/multimetric\" rel=\"nofollow\"><img alt=\"Python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7e256d2f5322af8794fdeb1b508845eb3d9f1d4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d756c74696d6574726963\"></a> <a href=\"https://img.shields.io/pypi/dm/multimetric\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6cba1f5ac79435750e664c28cc2da56a4bc3e994/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d756c74696d6574726963\"></a> <a href=\"https://lgtm.com/projects/g/priv-kweihmann/multimetric/context:python\" rel=\"nofollow\"><img alt=\"Language grade: Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8a61c88bae9dc8f5820c247e11301f508805f38/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f707269762d6b776569686d616e6e2f6d756c74696d65747269632e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a></p>\n<p>Calculate code metrics in various languages</p>\n<div id=\"purpose\">\n<h2>Purpose</h2>\n<p>This tool tries to calculate the following metrics for many, many\nprogramming languages</p>\n<ul>\n<li>Comment to Code percentage</li>\n<li>Cyclomatic complexity according to McCabe</li>\n<li>Difficulty according to Halstead</li>\n<li>Effort according to Halstead</li>\n<li>Fan-Out</li>\n<li>Lines of code</li>\n<li>Maintainability index</li>\n<li>Metric according to pylint</li>\n<li>Metric according to TIOBE</li>\n<li>Number of delivered bugs according to Halstead</li>\n<li>Time required to program according to Halstead</li>\n<li>Volume according to Halstead</li>\n</ul>\n<p>This tool was heavily inspired by\n<a href=\"https://github.com/markfink/metrics\" rel=\"nofollow\">metrics</a></p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>python3</li>\n<li><a href=\"https://pypi.org/project/chardet/\" rel=\"nofollow\">chardet</a></li>\n<li><a href=\"http://pygments.org/\" rel=\"nofollow\">Pygments</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"pypi\">\n<h3>PyPi</h3>\n<p>simply run</p>\n<pre>pip3 install multimetric\n</pre>\n</div>\n<div id=\"from-source\">\n<h3>From source</h3>\n<ul>\n<li>git clone this repository</li>\n<li>cd to &lt;clone folder&gt;</li>\n<li>Install the needed requirements by running\n<tt>pip3 install <span class=\"pre\">-r</span> requirements.txt</tt></li>\n<li>run <tt>python3 setup.py build</tt></li>\n</ul>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>usage: multimetric <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--warn_compiler WARN_COMPILER<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--warn_duplication WARN_DUPLICATION<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--warn_functional WARN_FUNCTIONAL<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--warn_standard WARN_STANDARD<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--warn_security WARN_SECURITY<span class=\"o\">]</span> <span class=\"o\">[</span>--coverage COVERAGE<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--bugpredict <span class=\"o\">{</span>old,new<span class=\"o\">}]</span>\n                   <span class=\"o\">[</span>--maintindex <span class=\"o\">{</span>sei,classic,microsoft<span class=\"o\">}]</span>\n                   files <span class=\"o\">[</span>files ...<span class=\"o\">]</span>\n\nCalculate code metrics in various languages\n\npositional arguments:\n  files                 Files to parse\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --warn_compiler WARN_COMPILER\n                        File<span class=\"o\">(</span>s<span class=\"o\">)</span> holding information about compiler warnings\n  --warn_duplication WARN_DUPLICATION\n                        File<span class=\"o\">(</span>s<span class=\"o\">)</span> holding information about code duplications\n  --warn_functional WARN_FUNCTIONAL\n                        File<span class=\"o\">(</span>s<span class=\"o\">)</span> holding information about static code analysis findings\n  --warn_standard WARN_STANDARD\n                        File<span class=\"o\">(</span>s<span class=\"o\">)</span> holding information about language standard violations\n  --warn_security WARN_SECURITY\n                        File<span class=\"o\">(</span>s<span class=\"o\">)</span> File<span class=\"o\">(</span>s<span class=\"o\">)</span> holding information about found security issue\n  --coverage COVERAGE   File<span class=\"o\">(</span>s<span class=\"o\">)</span> with compiler warningsFile<span class=\"o\">(</span>s<span class=\"o\">)</span> holding information about testing coverage\n  --bugpredict <span class=\"o\">{</span>old,new<span class=\"o\">}</span>\n                        Method how to calculate the bug prediction\n  --maintindex <span class=\"o\">{</span>sei,classic,microsoft<span class=\"o\">}</span>\n                        Method how to calculate the maintainability index\n\nCurrently you could import files of the following types <span class=\"k\">for</span> --warn_* or --coverage\n\nFollowing information can be <span class=\"nb\">read</span>\n\n    &lt;file&gt; <span class=\"o\">=</span> full path to file\n    &lt;content&gt; <span class=\"o\">=</span> either a string\n    &lt;severity&gt; <span class=\"o\">=</span> optional severity\n\n    Note: you could also add a single line, <span class=\"k\">then</span> &lt;content&gt;\n        has to be a number reflecting to total number of findings\n\nFile formats\n\ncsv: CSV file of following line format\n     &lt;file&gt;,&lt;content&gt;,&lt;severity&gt;\n\njson: JSON file\n     &lt;file&gt;: <span class=\"o\">{</span>\n         <span class=\"s2\">\"content\"</span>: &lt;content&gt;,\n         <span class=\"s2\">\"severity\"</span>: &lt;severity&gt;\n     <span class=\"o\">}</span>\n</pre>\n<p>By default tool guesses the content type by the filename, if that\ndoesn\u2019t work for you please see below</p>\n</div>\n<div id=\"output\">\n<h2>Output</h2>\n<p>Output will be written to stdout as json.</p>\n<div id=\"output-structure\">\n<h3>Output structure</h3>\n<ul>\n<li><tt>files</tt> contains a list of each file passed by CLI</li>\n<li><tt>overall</tt> contains the calculated values for all passed files</li>\n<li><tt>stats</tt> contains the statistically calculated values over all files\npassed <a href=\"#statistics\" rel=\"nofollow\">see Statistical additions</a></li>\n</ul>\n<div id=\"item-structure\">\n<h4>Item structure</h4>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>item</th>\n<th>description</th>\n<th>ran\nge</th>\n<th>recommen\ndation</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>comment_ratio</td>\n<td>Comment to Code percentage</td>\n<td>0..\n100</td>\n<td>&gt; 30.0</td>\n</tr>\n<tr><td>cyclomatic_co\nmplexity</td>\n<td>Cyclomatic complexity according to\nMcCabe</td>\n<td>0..\n(in\nf)</td>\n<td>&lt; 10</td>\n</tr>\n<tr><td>fanout_extern\nal</td>\n<td>Number imports from out of tree\nmodules</td>\n<td>0..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>fanout_intern\nal</td>\n<td>Number imports from same source\ntree modules</td>\n<td>0..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>halstead_bugp\nrop</td>\n<td>Number of delivered bugs according\nto Halstead</td>\n<td>0..\n(in\nf)</td>\n<td>&lt; 0.05</td>\n</tr>\n<tr><td>halstead_diff\niculty</td>\n<td>Difficulty according to Halstead</td>\n<td>0..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>halstead_effo\nrt</td>\n<td>Effort according to Halstead</td>\n<td>0..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>halstead_time\nrequired</td>\n<td>Time required to program according\nto Halstead</td>\n<td>0..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>halstead_volu\nme</td>\n<td>Volume according to Halstead</td>\n<td>0..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>lang</td>\n<td>list of identified programming\nlanguages</td>\n<td>lis\nt</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>loc</td>\n<td>Lines of code</td>\n<td>1..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>maintainabili\nty_index</td>\n<td>Maintainability index</td>\n<td>0..\n100</td>\n<td>&gt; 80.0</td>\n</tr>\n<tr><td>operands_sum</td>\n<td>Number of used operands</td>\n<td>1..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>operands_uniq</td>\n<td>Number of unique used operands</td>\n<td>1..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>operators_sum</td>\n<td>Number of used operators</td>\n<td>1..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>operators_uni\nq</td>\n<td>Number of unique used operators</td>\n<td>1..\n(in\nf)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>pylint</td>\n<td>General quality score according to\npylint</td>\n<td>0..\n100</td>\n<td>&gt; 80.0</td>\n</tr>\n<tr><td>tiobe_compile\nr</td>\n<td>Compiler warnings score according\nto TIOBE</td>\n<td>0..\n100</td>\n<td>&gt; 90.0</td>\n</tr>\n<tr><td>tiobe_complex\nity</td>\n<td>Complexity according to TIOBE</td>\n<td>0..\n100</td>\n<td>&gt; 80.0</td>\n</tr>\n<tr><td>tiobe_coverag\ne</td>\n<td>Coverage according to TIOBE</td>\n<td>0..\n100</td>\n<td>&gt; 80.0</td>\n</tr>\n<tr><td>tiobe_duplica\ntion</td>\n<td>Code duplications score according\nto TIOBE</td>\n<td>0..\n100</td>\n<td>&gt; 80.0</td>\n</tr>\n<tr><td>tiobe_fanout</td>\n<td>Fan-Out score according to TIOBE</td>\n<td>0..\n100</td>\n<td>&gt; 80.0</td>\n</tr>\n<tr><td>tiobe_functio\nnal</td>\n<td>Functional defect score according\nto TIOBE</td>\n<td>0..\n100</td>\n<td>&gt; 90.0</td>\n</tr>\n<tr><td>tiobe_securit\ny</td>\n<td>Security score according to TIOBE</td>\n<td>0..\n100</td>\n<td>&gt; 90.0</td>\n</tr>\n<tr><td>tiobe_standar\nd</td>\n<td>Language standard score according\nto TIOBE</td>\n<td>0..\n100</td>\n<td>&gt; 80.0</td>\n</tr>\n<tr><td>tiobe</td>\n<td>General quality score according to\nTIOBE</td>\n<td>0..\n100</td>\n<td>&gt; 80.0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"statistics\">\n<h4>Statistics</h4>\n<p>The item <tt>stats</tt> contains in addition to the above mentioned the\nfollowing items, which by themselves contain all the items mentioned at\n<a href=\"#item-structure\" rel=\"nofollow\">Item structure</a></p>\n<ul>\n<li><tt>max</tt> = the maximum value of all items of the metric</li>\n<li><tt>mean</tt> = statistical mean over all items of the metric</li>\n<li><tt>median</tt> = statistical median over all items of the metric</li>\n<li><tt>min</tt> = the minimum value of all items of the metric</li>\n<li><tt>sd</tt> = standard deviation over all items of the metric</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"further-reading\">\n<h2>Further reading</h2>\n<ul>\n<li><a href=\"http://pygments.org/\" rel=\"nofollow\">Pygments</a></li>\n</ul>\n</div>\n<div id=\"bugs-contribution\">\n<h2>Bugs &amp; Contribution</h2>\n<p>Feel free to create issues or pull requests</p>\n</div>\n\n          </div>"}, "last_serial": 7182385, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2586e3ba5d57db6453b103eaf7e35b42", "sha256": "87705e88b911a2fd7cc83fd577cb1a0cff9a9a58f74380bb06b1e09fba3b8336"}, "downloads": -1, "filename": "multimetric-1.0.0-py3.7.egg", "has_sig": false, "md5_digest": "2586e3ba5d57db6453b103eaf7e35b42", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 17304, "upload_time": "2019-12-21T15:12:58", "upload_time_iso_8601": "2019-12-21T15:12:58.890635Z", "url": "https://files.pythonhosted.org/packages/68/51/b9c39572b4ec277db03d4f47bb79fc82e1f5932e1a43290d5eb0fd39c6b4/multimetric-1.0.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "eac975acd199dd89d84e78a87e124d35", "sha256": "4766c48ac0283938ceec2db5bc1243b4950ce72d968fc95bf33e2919c312e218"}, "downloads": -1, "filename": "multimetric-1.0.0.tar.gz", "has_sig": false, "md5_digest": "eac975acd199dd89d84e78a87e124d35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5424, "upload_time": "2019-12-21T15:13:01", "upload_time_iso_8601": "2019-12-21T15:13:01.214375Z", "url": "https://files.pythonhosted.org/packages/e8/53/9d528a9bfcf3b589d9c8e808ad10c3bd6227c83582ab32bab394104219ce/multimetric-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "94d4d2821f42ec1af8413eec88793864", "sha256": "0182b09306e572f2ad83de5258da57fbdfdd3b1b504cbec5d21ee4980a5571b7"}, "downloads": -1, "filename": "multimetric-1.0.1.tar.gz", "has_sig": false, "md5_digest": "94d4d2821f42ec1af8413eec88793864", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6851, "upload_time": "2019-12-21T15:14:37", "upload_time_iso_8601": "2019-12-21T15:14:37.349947Z", "url": "https://files.pythonhosted.org/packages/51/cd/dde620c59b393096b3a9a43a077ff9639053b356eaf761c1fb716ea2709d/multimetric-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "801c72eebfa276878897f7567e473899", "sha256": "5a73e0ee42931f5a24597e0d4b0938f01af2fd8f7a69bf1e0ec6f8463f9fbf95"}, "downloads": -1, "filename": "multimetric-1.0.2.tar.gz", "has_sig": false, "md5_digest": "801c72eebfa276878897f7567e473899", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6923, "upload_time": "2019-12-23T05:39:15", "upload_time_iso_8601": "2019-12-23T05:39:15.384530Z", "url": "https://files.pythonhosted.org/packages/70/cf/e8ed469a5f6decd5b8b2156002b6501e0ee66073966236b200517851bb5d/multimetric-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "03d82f4a013a71f10e63502d53d62a6c", "sha256": "d1339a72569211b12b3322ae4c3ffc530d01e2241f1f903bfff7a7d3d74639ff"}, "downloads": -1, "filename": "multimetric-1.0.3.tar.gz", "has_sig": false, "md5_digest": "03d82f4a013a71f10e63502d53d62a6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7053, "upload_time": "2019-12-23T05:47:26", "upload_time_iso_8601": "2019-12-23T05:47:26.195732Z", "url": "https://files.pythonhosted.org/packages/71/b2/ff621667b0bcaf02ff523e1fd772c3e8d2f7b27fd7e25c440306da44125b/multimetric-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "6b4980fadf29e19defcf654f7ded426e", "sha256": "19b66da3f450c142a86f274b7cc4a5599d586bfe39e666dddd79f2674e48bff6"}, "downloads": -1, "filename": "multimetric-1.0.4.tar.gz", "has_sig": false, "md5_digest": "6b4980fadf29e19defcf654f7ded426e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7052, "upload_time": "2019-12-23T05:51:20", "upload_time_iso_8601": "2019-12-23T05:51:20.491783Z", "url": "https://files.pythonhosted.org/packages/1d/20/4c700c02c70b6f498ad253b34a398d651044340172ed0ab92d9c39e54646/multimetric-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "c9c92210cc35e17b5627781d8fbfa7ba", "sha256": "375a6774c637c786ca265dc14a373b870e1e01d631f3b13a731b8a3141724168"}, "downloads": -1, "filename": "multimetric-1.0.5-py3.7.egg", "has_sig": false, "md5_digest": "c9c92210cc35e17b5627781d8fbfa7ba", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 20371, "upload_time": "2019-12-30T16:18:04", "upload_time_iso_8601": "2019-12-30T16:18:04.934873Z", "url": "https://files.pythonhosted.org/packages/5c/f6/086f5ce1e49d7458d03fab2877d7ac232424dae10785d86b17e1e5caff05/multimetric-1.0.5-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e93f6543d93b4a9bfb150ad26a81ce4d", "sha256": "5cdf305299b00adefde13b988079f53ede1468aa23c3c590f3f871a412981b94"}, "downloads": -1, "filename": "multimetric-1.0.5.tar.gz", "has_sig": false, "md5_digest": "e93f6543d93b4a9bfb150ad26a81ce4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7074, "upload_time": "2019-12-23T15:21:05", "upload_time_iso_8601": "2019-12-23T15:21:05.516524Z", "url": "https://files.pythonhosted.org/packages/77/de/743d803b964fb92a4d7a849a1b5eedf40acbb11988d90ddc0f2146b6e445/multimetric-1.0.5.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "2dab79cc03b7123188ace5fa26104657", "sha256": "830149b619ae055985f08e2ceda649f9e5c816f949f5907f7f58eb7a420b933b"}, "downloads": -1, "filename": "multimetric-1.1.0.tar.gz", "has_sig": false, "md5_digest": "2dab79cc03b7123188ace5fa26104657", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13814, "upload_time": "2019-12-30T16:23:13", "upload_time_iso_8601": "2019-12-30T16:23:13.365684Z", "url": "https://files.pythonhosted.org/packages/5f/00/8c66b9385670ae6f72a435ca41e7251cef08cf4fb8a49e1ea6d259b28acd/multimetric-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "86f9ac976228179dc605ba6826121b6b", "sha256": "37468f5feeb26473d897867ea3546e829f408eec1d029cb01b03b4bc25f7c35d"}, "downloads": -1, "filename": "multimetric-1.1.1.tar.gz", "has_sig": false, "md5_digest": "86f9ac976228179dc605ba6826121b6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13904, "upload_time": "2020-01-01T12:37:06", "upload_time_iso_8601": "2020-01-01T12:37:06.742778Z", "url": "https://files.pythonhosted.org/packages/f8/5a/d8298cd4552fd936c44ef58d5928df44a63e452f42a40a17deaf8f61341c/multimetric-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "b8f43f6ff8464623a5409061e7604750", "sha256": "49a12cedfd725112dd6d6008290199bf5a8c49ee97e17f554012c48dadacce68"}, "downloads": -1, "filename": "multimetric-1.1.2.tar.gz", "has_sig": false, "md5_digest": "b8f43f6ff8464623a5409061e7604750", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14727, "upload_time": "2020-02-07T18:33:55", "upload_time_iso_8601": "2020-02-07T18:33:55.790789Z", "url": "https://files.pythonhosted.org/packages/f7/dd/e7a5132347c819e4164ebd9f949e7cad5275758246aee1d5fe1ff743ad6a/multimetric-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "4349b37c7f417f014a2aea44488cd1d8", "sha256": "f744d0af0036892b45df67bc0513d0b9a1d57a2f30eff3cd7593e124b458312d"}, "downloads": -1, "filename": "multimetric-1.1.3-py3.7.egg", "has_sig": false, "md5_digest": "4349b37c7f417f014a2aea44488cd1d8", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 44914, "upload_time": "2020-05-06T18:41:04", "upload_time_iso_8601": "2020-05-06T18:41:04.787737Z", "url": "https://files.pythonhosted.org/packages/aa/96/2bb1d5281f7642100fdb938f4a05112f97df85c771f37cd619427e288d3f/multimetric-1.1.3-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f235eaab041a9b2e6a222afbe01bc473", "sha256": "c82aac3f0be2fc2703bfbe87f2618e996748a360631044e0dfcfde3142a975ca"}, "downloads": -1, "filename": "multimetric-1.1.3.tar.gz", "has_sig": false, "md5_digest": "f235eaab041a9b2e6a222afbe01bc473", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15048, "upload_time": "2020-02-09T19:12:35", "upload_time_iso_8601": "2020-02-09T19:12:35.599537Z", "url": "https://files.pythonhosted.org/packages/25/2b/8aaad12a46c58102cf7cb0861031cc2cf4e620fc9fd941616713a434f4e0/multimetric-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "0eaec5bd95b173f1fabb214552d43d9a", "sha256": "31b9323bf470847df7e89d815027607803d818221281e09ffe0924fc4f061b8b"}, "downloads": -1, "filename": "multimetric-1.1.4.tar.gz", "has_sig": false, "md5_digest": "0eaec5bd95b173f1fabb214552d43d9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16175, "upload_time": "2020-05-06T18:49:17", "upload_time_iso_8601": "2020-05-06T18:49:17.248951Z", "url": "https://files.pythonhosted.org/packages/9e/e7/9fc0f3251780bb89c8197250521eee419ec0318bb665ac63fe335b1bd2b0/multimetric-1.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0eaec5bd95b173f1fabb214552d43d9a", "sha256": "31b9323bf470847df7e89d815027607803d818221281e09ffe0924fc4f061b8b"}, "downloads": -1, "filename": "multimetric-1.1.4.tar.gz", "has_sig": false, "md5_digest": "0eaec5bd95b173f1fabb214552d43d9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16175, "upload_time": "2020-05-06T18:49:17", "upload_time_iso_8601": "2020-05-06T18:49:17.248951Z", "url": "https://files.pythonhosted.org/packages/9e/e7/9fc0f3251780bb89c8197250521eee419ec0318bb665ac63fe335b1bd2b0/multimetric-1.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:23 2020"}