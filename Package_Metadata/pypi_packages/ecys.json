{"info": {"author": "Dmitry Kotukhov", "author_email": "djerys@ya.ru", "bugtrack_url": null, "classifiers": [], "description": "Ecys\n====\n**Ecys is a simple realization of Entity Components System**\n\nEcys is an MIT licensed Entity Component System (ECS).\nThe design is based on *anax* realization of ECS.\n\n1) Compatibility\n----------------\nEsyc is a Python 3 library only. Specifically, all currently supported versions of Python 3.\n\n\n2) Installation\n---------------\nYou can install ecys using *pip*::\n\n    pip install ecys\n\n\n3) Structure\n-------------\n* World\n\nA World is your main working object to interact with ecys.\nAfter creating a World object, you'll use that object to crate Entities\nfrom your Component objects. A World is assigned all of your System\ninstances. A World allows you to update all your Systems using call per frame.\nYou can create or delete Entities, add or remove Systems while your\napplication is running.\n\n\n* Entity\n\nEntity is a simple container for Components. You can add or remove\nComponents from your Entity.\n\n\n* Components\n\nYou should define your Component classes. They should not contain\nany logic. Components might have initialization code, but no\nupdating state logic. You can use *ecys.Component* to indicate your\nclass as Component, but it's not obligatory.\n\nExample of simple Velocity component::\n\n    from dataclasses import dataclass\n\n    @dataclass\n    class Velocity(ecys.Component):\n        x: float\n        y: float\n\n\n* Systems\n\nSystems are where all processing logic is executed. All Systems must\ninherit from the *ecys.System* class, and have a method called *update*.\nYou should add your System to the World instance to using.\nYou can define your System classes with *ecys.requires* or\n*ecys.excludes* decorators. An *entities* property returns\ntuple of Entities with (or without) Components specified in decorator\nparameters. If you have not defined a decorator an *entities* returns\nall entities in your World.\n\nA simple MovementSystem::\n\n    @ecys.requires(Position, Velocity)\n    class MovementSystem(ecys.System):\n\n        def update(self):\n            for entity in self.entities:\n                position = entity.get_component(Position)\n                velocity = entity.get_component(Velocity)\n                position.x += velocity.x\n                position.y += velocity.y\n\n\n4) Basic usage\n--------------\nThe first step after importing ecys is to create a World instance::\n\n    world = ecys.World()\n\n\nCreate some System instances and add to the World. You can specify\nan optional updating priority (higher number = faster). By default\npriority is 0::\n\n    movement_system = MovementSystem()\n    render_system = RenderSystem()\n    world.add_system(movement_system, 1)\n    world.add_system(render_system)\n    # . . .\n    world.add_system(AnotherOneSystem())\n\n\nCreate Entities::\n\n    player = world.create_entity(Position(0, 0), Velocity(1, 2))\n    # . . .\n    player.add_component(AnotherOneComponent(*args))\n\n\nExecuting all Systems is done with a single call to *world.update*. This\nwill call the update methods on all added Systems, in order of their priority::\n\n    world.update()\n\n\nYou can pass any args you need to *world.update*, but you must also make sure to receive\nthem properly in the *update* methods of your Systems. For example, if you pass a delta time\nargument as *world.update(delta_time)*, your Systems's *update* methods should all receive it as:\n*def process(self, delta_time):*", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Djerys/ecys", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ecys", "package_url": "https://pypi.org/project/ecys/", "platform": "", "project_url": "https://pypi.org/project/ecys/", "project_urls": {"Homepage": "https://github.com/Djerys/ecys"}, "release_url": "https://pypi.org/project/ecys/2.1.0/", "requires_dist": null, "requires_python": "", "summary": "A simple realization of Entity Component System", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Ecys is a simple realization of Entity Components System</strong></p>\n<p>Ecys is an MIT licensed Entity Component System (ECS).\nThe design is based on <em>anax</em> realization of ECS.</p>\n<div id=\"compatibility\">\n<h2>1) Compatibility</h2>\n<p>Esyc is a Python 3 library only. Specifically, all currently supported versions of Python 3.</p>\n</div>\n<div id=\"installation\">\n<h2>2) Installation</h2>\n<p>You can install ecys using <em>pip</em>:</p>\n<pre>pip install ecys\n</pre>\n</div>\n<div id=\"structure\">\n<h2>3) Structure</h2>\n<ul>\n<li>World</li>\n</ul>\n<p>A World is your main working object to interact with ecys.\nAfter creating a World object, you\u2019ll use that object to crate Entities\nfrom your Component objects. A World is assigned all of your System\ninstances. A World allows you to update all your Systems using call per frame.\nYou can create or delete Entities, add or remove Systems while your\napplication is running.</p>\n<ul>\n<li>Entity</li>\n</ul>\n<p>Entity is a simple container for Components. You can add or remove\nComponents from your Entity.</p>\n<ul>\n<li>Components</li>\n</ul>\n<p>You should define your Component classes. They should not contain\nany logic. Components might have initialization code, but no\nupdating state logic. You can use <em>ecys.Component</em> to indicate your\nclass as Component, but it\u2019s not obligatory.</p>\n<p>Example of simple Velocity component:</p>\n<pre>from dataclasses import dataclass\n\n@dataclass\nclass Velocity(ecys.Component):\n    x: float\n    y: float\n</pre>\n<ul>\n<li>Systems</li>\n</ul>\n<p>Systems are where all processing logic is executed. All Systems must\ninherit from the <em>ecys.System</em> class, and have a method called <em>update</em>.\nYou should add your System to the World instance to using.\nYou can define your System classes with <em>ecys.requires</em> or\n<em>ecys.excludes</em> decorators. An <em>entities</em> property returns\ntuple of Entities with (or without) Components specified in decorator\nparameters. If you have not defined a decorator an <em>entities</em> returns\nall entities in your World.</p>\n<p>A simple MovementSystem:</p>\n<pre>@ecys.requires(Position, Velocity)\nclass MovementSystem(ecys.System):\n\n    def update(self):\n        for entity in self.entities:\n            position = entity.get_component(Position)\n            velocity = entity.get_component(Velocity)\n            position.x += velocity.x\n            position.y += velocity.y\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h2>4) Basic usage</h2>\n<p>The first step after importing ecys is to create a World instance:</p>\n<pre>world = ecys.World()\n</pre>\n<p>Create some System instances and add to the World. You can specify\nan optional updating priority (higher number = faster). By default\npriority is 0:</p>\n<pre>movement_system = MovementSystem()\nrender_system = RenderSystem()\nworld.add_system(movement_system, 1)\nworld.add_system(render_system)\n# . . .\nworld.add_system(AnotherOneSystem())\n</pre>\n<p>Create Entities:</p>\n<pre>player = world.create_entity(Position(0, 0), Velocity(1, 2))\n# . . .\nplayer.add_component(AnotherOneComponent(*args))\n</pre>\n<p>Executing all Systems is done with a single call to <em>world.update</em>. This\nwill call the update methods on all added Systems, in order of their priority:</p>\n<pre>world.update()\n</pre>\n<p>You can pass any args you need to <em>world.update</em>, but you must also make sure to receive\nthem properly in the <em>update</em> methods of your Systems. For example, if you pass a delta time\nargument as <em>world.update(delta_time)</em>, your Systems\u2019s <em>update</em> methods should all receive it as:\n<em>def process(self, delta_time):</em></p>\n</div>\n\n          </div>"}, "last_serial": 6993453, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "433f627ec280e15e26b3b89d52267afb", "sha256": "ea2904ab5a2b9098eac57ff0e1212ad49d98fef14528a95cb9ca1da4044d3b41"}, "downloads": -1, "filename": "ecys-1.0.0.tar.gz", "has_sig": false, "md5_digest": "433f627ec280e15e26b3b89d52267afb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2464, "upload_time": "2020-04-08T13:57:03", "upload_time_iso_8601": "2020-04-08T13:57:03.580788Z", "url": "https://files.pythonhosted.org/packages/19/a3/72dbd6fa1de37ea4b88504260a2ac492596a6db5e18d6b400d8439331559/ecys-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "83f3c48dcfd930e61edc7c7238091ae7", "sha256": "769ccbde4b3ea94101373bc39275a2bd1ee5e0a7fc41542819c99654b564cb7c"}, "downloads": -1, "filename": "ecys-1.1.0.tar.gz", "has_sig": false, "md5_digest": "83f3c48dcfd930e61edc7c7238091ae7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4866, "upload_time": "2020-04-08T16:18:49", "upload_time_iso_8601": "2020-04-08T16:18:49.827356Z", "url": "https://files.pythonhosted.org/packages/3b/b3/66893e7a5bd03e577a87281ed58657be6f6a19edab90134886c1e5ec4e16/ecys-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "b7f3e02bd371a0b6fb2ecf857f7bbe47", "sha256": "ed1e649949d21f1b84718d7e3304f2fa9a8a2b9344d366710ba418e34d71215c"}, "downloads": -1, "filename": "ecys-1.2.0.tar.gz", "has_sig": false, "md5_digest": "b7f3e02bd371a0b6fb2ecf857f7bbe47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4933, "upload_time": "2020-04-10T09:47:19", "upload_time_iso_8601": "2020-04-10T09:47:19.994069Z", "url": "https://files.pythonhosted.org/packages/1d/86/12ad83d7c1bbddad79e8fafa2c6edddc6eb44095b8784bdd513ed1b72a5f/ecys-1.2.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "0bb5af791e0129b0d02cbc184355eaea", "sha256": "fe782b9d289ccca6505722522df6df6404ce7fb7816c64e62db919cbdef1bc73"}, "downloads": -1, "filename": "ecys-2.0.0.tar.gz", "has_sig": false, "md5_digest": "0bb5af791e0129b0d02cbc184355eaea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4959, "upload_time": "2020-04-10T10:15:51", "upload_time_iso_8601": "2020-04-10T10:15:51.496233Z", "url": "https://files.pythonhosted.org/packages/22/09/8526b1bb09fd6c44d9a7d57a3426ed848f9ab65a0e29ef5b6eede9d645b6/ecys-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "e1035c02113b02c62194808451a8c7df", "sha256": "bba7396d40088481af5da8cdb9e3604cfd6021c39f96d30391995cb52ae1e865"}, "downloads": -1, "filename": "ecys-2.1.0.tar.gz", "has_sig": false, "md5_digest": "e1035c02113b02c62194808451a8c7df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4963, "upload_time": "2020-04-10T13:59:07", "upload_time_iso_8601": "2020-04-10T13:59:07.825525Z", "url": "https://files.pythonhosted.org/packages/56/ad/52091e1a52f0d3046cf6247ecd05607fa0762a8231e8a53d521dbe0a5ac1/ecys-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1035c02113b02c62194808451a8c7df", "sha256": "bba7396d40088481af5da8cdb9e3604cfd6021c39f96d30391995cb52ae1e865"}, "downloads": -1, "filename": "ecys-2.1.0.tar.gz", "has_sig": false, "md5_digest": "e1035c02113b02c62194808451a8c7df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4963, "upload_time": "2020-04-10T13:59:07", "upload_time_iso_8601": "2020-04-10T13:59:07.825525Z", "url": "https://files.pythonhosted.org/packages/56/ad/52091e1a52f0d3046cf6247ecd05607fa0762a8231e8a53d521dbe0a5ac1/ecys-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:55 2020"}