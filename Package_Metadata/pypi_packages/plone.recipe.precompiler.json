{"info": {"author": "Steve McMahon", "author_email": "steve@dcn.org", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "========================\nplone.recipe.precompiler\n========================\n\nBuildout recipe to precompiles Python and locale files in an egg list.\n\nWhy precompilation?\n===================\n\nPython ordinarily compiles .py files into .pyc or .pyo byte code files\non demand. Likewise, applications like Plone often compile .po locale\nfiles into .mo representations when needed.\n\nHowever, if you are running a Python application as a daemon and wish\nto prevent write access to code directories, you want to do these\ncompilations at buildout-time, not run-time. That's where this recipe\ncomes in. Passed an egg list, it will pick up all the eggs in the\nbuildout working set for the list and find and compile .py and .mo\nfiles in place.\n\n.mo file compilation is optional, and must be turned on.\n\nUsage\n=====\n\nPlease note that usage changed with release 0.5. If you need the old\noptions, use 0.4\n\nCommon usage::\n\n    [buildout]\n    parts =\n        ...\n        precompile\n    eggs = ...\n\n\n    [precompile]\n    recipe = plone.recipe.precompiler\n    eggs = ${buildout:eggs}\n    compile-mo-files = true\n\n\nThis recipe may return harmless warnings regarding the inability to compile skin\nlayer scripts, which typically have \"return\" outside of a function. While these\nwarnings are harmless, you may suppress them by tuning the skip list.\n\n\nOptions\n-------\n\n    recipe = plone.recipe.precompiler\n\n    eggs = required: list of eggs\n\n    compile-mo-files = true/false; default is false\n\n    extra-paths = optional list of additional paths\n        that would not be found from eggs\n        in multiple\n        indented lines\n\n    quiet = true/false; if true, common errors are only shown when buildout's\n        verbose flag is set.\n\nNotes\n=====\n\nThis recipe was created for use in Plone installers, but is hopefully useful in\nmany buildout contexts.\n\nChange history\n==============\n\nChangelog for plone.recipe.precompiler.\n\n0.7.1 (2018-11-11)\n------------------\n\nBug fixes:\n\n- Rerelease to fix Python 3 issue in 0.7\n  [esteele]\n\n\n0.7 (2018-11-07)\n\nBug fixes:\n\n- Fix reversion in 0.6, displaying too many .po compile errors.\n\n0.6 (2012-12-17)\n----------------\n\n- Use python_gettext rather than msgfmt to compile .po files. Removes\n  dependence on gettext.\n  (smcmahon)\n\n0.5\n---\n\n- Suck up error messages and filter them to hide .po compile errors\n  and .py \"return outside function\" errors when quiet option is true (default).\n  (smcmahon)\n\n- Make the extra-paths work with the new working set method for finding eggs.\n  (smcmahon)\n\n- Removed BBB code. The new way of finding eggs introduced by chaoflow is much\n  better than my original.\n  (smcmahon)\n\n- removed the functionality to automatically extract products directories from\n  parts with the zope2instance recipe. This resulted in buildouts that always\n  installed ALL parts. If you need the products dir, you must declare it explicitly\n  like so: dirs = ${instance:products}\n  (do3cc - 2012-07-12)\n\n\n0.4 (2010-08-12)\n----------------\n\n- support for walking eggs dependencies, without skip/rx, manually tested.\n  (chaoflow - 2010-08-12)\n\n- support for compiling mo files in those egg dirs, manually tested.\n  (chaoflow - 2010-08-12)\n\n- kept old syntax and code, just don't specify eggs (untested)\n\n0.3\n---\n\n- support to recursively compile list of dirs, with subdir blacklist and file\n  blacklist regex.\n  (Steve McMahon)\n\n\n\nContributors\n============\n\n- Steve McMahon <steve@dcn.org>\n- Florian Friesdorf <flo@chaoflow.net>", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/plone/plone.recipe.precompiler", "keywords": "buildout", "license": "GPL v 2", "maintainer": "", "maintainer_email": "", "name": "plone.recipe.precompiler", "package_url": "https://pypi.org/project/plone.recipe.precompiler/", "platform": "", "project_url": "https://pypi.org/project/plone.recipe.precompiler/", "project_urls": {"Homepage": "https://github.com/plone/plone.recipe.precompiler"}, "release_url": "https://pypi.org/project/plone.recipe.precompiler/0.7.1/", "requires_dist": null, "requires_python": "", "summary": "zc.buildout recipe to precompile python and po files.", "version": "0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Buildout recipe to precompiles Python and locale files in an egg list.</p>\n<div id=\"why-precompilation\">\n<h2>Why precompilation?</h2>\n<p>Python ordinarily compiles .py files into .pyc or .pyo byte code files\non demand. Likewise, applications like Plone often compile .po locale\nfiles into .mo representations when needed.</p>\n<p>However, if you are running a Python application as a daemon and wish\nto prevent write access to code directories, you want to do these\ncompilations at buildout-time, not run-time. That\u2019s where this recipe\ncomes in. Passed an egg list, it will pick up all the eggs in the\nbuildout working set for the list and find and compile .py and .mo\nfiles in place.</p>\n<p>.mo file compilation is optional, and must be turned on.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Please note that usage changed with release 0.5. If you need the old\noptions, use 0.4</p>\n<p>Common usage:</p>\n<pre>[buildout]\nparts =\n    ...\n    precompile\neggs = ...\n\n\n[precompile]\nrecipe = plone.recipe.precompiler\neggs = ${buildout:eggs}\ncompile-mo-files = true\n</pre>\n<p>This recipe may return harmless warnings regarding the inability to compile skin\nlayer scripts, which typically have \u201creturn\u201d outside of a function. While these\nwarnings are harmless, you may suppress them by tuning the skip list.</p>\n<div id=\"options\">\n<h3>Options</h3>\n<blockquote>\n<p>recipe = plone.recipe.precompiler</p>\n<p>eggs = required: list of eggs</p>\n<p>compile-mo-files = true/false; default is false</p>\n<dl>\n<dt>extra-paths = optional list of additional paths</dt>\n<dd>that would not be found from eggs\nin multiple\nindented lines</dd>\n<dt>quiet = true/false; if true, common errors are only shown when buildout\u2019s</dt>\n<dd>verbose flag is set.</dd>\n</dl>\n</blockquote>\n</div>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<p>This recipe was created for use in Plone installers, but is hopefully useful in\nmany buildout contexts.</p>\n</div>\n<div id=\"change-history\">\n<h2>Change history</h2>\n<p>Changelog for plone.recipe.precompiler.</p>\n<div id=\"id1\">\n<h3>0.7.1 (2018-11-11)</h3>\n<p>Bug fixes:</p>\n<ul>\n<li>Rerelease to fix Python 3 issue in 0.7\n[esteele]</li>\n</ul>\n<p>0.7 (2018-11-07)</p>\n<p>Bug fixes:</p>\n<ul>\n<li>Fix reversion in 0.6, displaying too many .po compile errors.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.6 (2012-12-17)</h3>\n<ul>\n<li>Use python_gettext rather than msgfmt to compile .po files. Removes\ndependence on gettext.\n(smcmahon)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.5</h3>\n<ul>\n<li>Suck up error messages and filter them to hide .po compile errors\nand .py \u201creturn outside function\u201d errors when quiet option is true (default).\n(smcmahon)</li>\n<li>Make the extra-paths work with the new working set method for finding eggs.\n(smcmahon)</li>\n<li>Removed BBB code. The new way of finding eggs introduced by chaoflow is much\nbetter than my original.\n(smcmahon)</li>\n<li>removed the functionality to automatically extract products directories from\nparts with the zope2instance recipe. This resulted in buildouts that always\ninstalled ALL parts. If you need the products dir, you must declare it explicitly\nlike so: dirs = ${instance:products}\n(do3cc - 2012-07-12)</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.4 (2010-08-12)</h3>\n<ul>\n<li>support for walking eggs dependencies, without skip/rx, manually tested.\n(chaoflow - 2010-08-12)</li>\n<li>support for compiling mo files in those egg dirs, manually tested.\n(chaoflow - 2010-08-12)</li>\n<li>kept old syntax and code, just don\u2019t specify eggs (untested)</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.3</h3>\n<ul>\n<li>support to recursively compile list of dirs, with subdir blacklist and file\nblacklist regex.\n(Steve McMahon)</li>\n</ul>\n</div>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>Steve McMahon &lt;<a href=\"mailto:steve%40dcn.org\">steve<span>@</span>dcn<span>.</span>org</a>&gt;</li>\n<li>Florian Friesdorf &lt;<a href=\"mailto:flo%40chaoflow.net\">flo<span>@</span>chaoflow<span>.</span>net</a>&gt;</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4473242, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "b18275444046ca3ed7f19fe0c718b539", "sha256": "bfcfaef3b93ece4b823d137175cf4ee0fdd7d2d3defee9f37d5f639e324cdea6"}, "downloads": -1, "filename": "plone.recipe.precompiler-0.3.tar.gz", "has_sig": false, "md5_digest": "b18275444046ca3ed7f19fe0c718b539", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3648, "upload_time": "2008-01-09T02:10:20", "upload_time_iso_8601": "2008-01-09T02:10:20Z", "url": "https://files.pythonhosted.org/packages/f3/19/7e08ac729ba436dd66c69c1fe9dc1ae1cb051342930209ac50b0bb8a1587/plone.recipe.precompiler-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "c40c7d7dbc0b245473eebeccc6289336", "sha256": "ee3dcd617bd42fbde5ce42561e539d8a71f4a02e100b441980e519bdfc6f8760"}, "downloads": -1, "filename": "plone.recipe.precompiler-0.4.tar.gz", "has_sig": false, "md5_digest": "c40c7d7dbc0b245473eebeccc6289336", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5317, "upload_time": "2010-08-12T20:00:23", "upload_time_iso_8601": "2010-08-12T20:00:23.178979Z", "url": "https://files.pythonhosted.org/packages/1f/c5/d8a02e03230e8d37b8bb833aada565a0c1c63b845a3be644c02fd4347271/plone.recipe.precompiler-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "e5bc720017ebfadfd93cfd3159964246", "sha256": "fe9f34c504154640953c561f32f8084524a19b78c6230790dedb33616d57f08b"}, "downloads": -1, "filename": "plone.recipe.precompiler-0.5.zip", "has_sig": false, "md5_digest": "e5bc720017ebfadfd93cfd3159964246", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11096, "upload_time": "2012-11-30T01:14:15", "upload_time_iso_8601": "2012-11-30T01:14:15.821283Z", "url": "https://files.pythonhosted.org/packages/e1/1b/1c5608afd91211efbbc1ebf1a2097cbead411d580c24d16e768d13af56d3/plone.recipe.precompiler-0.5.zip", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "10ded1097f769064a2893e3624418cd6", "sha256": "19d6d30a7711bb21e5accb4cd7467caa3df1e3fed8a3bcf9cab7b7bc9f2b2260"}, "downloads": -1, "filename": "plone.recipe.precompiler-0.6.zip", "has_sig": false, "md5_digest": "10ded1097f769064a2893e3624418cd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11870, "upload_time": "2012-12-17T20:47:27", "upload_time_iso_8601": "2012-12-17T20:47:27.917710Z", "url": "https://files.pythonhosted.org/packages/bb/dc/adec418f4dc1a08b18031dbdacdd01aca424567a8db52cf80b9cdb170b49/plone.recipe.precompiler-0.6.zip", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "0f8142eaf35874836943ad1ce506535a", "sha256": "971e838a2d0a8e28fac86c51d82a61db056638130801d2def0e8ccf3f60b763b"}, "downloads": -1, "filename": "plone.recipe.precompiler-0.7.zip", "has_sig": false, "md5_digest": "0f8142eaf35874836943ad1ce506535a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10250, "upload_time": "2018-11-07T08:06:17", "upload_time_iso_8601": "2018-11-07T08:06:17.102348Z", "url": "https://files.pythonhosted.org/packages/3f/61/3534b3292704ed5e20f8a34563dc4f4935280e9eb114ac6a0b32309aeef1/plone.recipe.precompiler-0.7.zip", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "b0da1ed9a8a9500299f7ce5017ce1300", "sha256": "1be2951d14b8b11764f729043a8ca8d69f8080e53e80ee69d4616d5bceb39b7b"}, "downloads": -1, "filename": "plone.recipe.precompiler-0.7.1.zip", "has_sig": false, "md5_digest": "b0da1ed9a8a9500299f7ce5017ce1300", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12369, "upload_time": "2018-11-11T02:37:25", "upload_time_iso_8601": "2018-11-11T02:37:25.023880Z", "url": "https://files.pythonhosted.org/packages/3b/71/f1d33696bc7a94cad43af7ecafb7d3f6ddcc598b4186e95b0af011b48ab2/plone.recipe.precompiler-0.7.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b0da1ed9a8a9500299f7ce5017ce1300", "sha256": "1be2951d14b8b11764f729043a8ca8d69f8080e53e80ee69d4616d5bceb39b7b"}, "downloads": -1, "filename": "plone.recipe.precompiler-0.7.1.zip", "has_sig": false, "md5_digest": "b0da1ed9a8a9500299f7ce5017ce1300", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12369, "upload_time": "2018-11-11T02:37:25", "upload_time_iso_8601": "2018-11-11T02:37:25.023880Z", "url": "https://files.pythonhosted.org/packages/3b/71/f1d33696bc7a94cad43af7ecafb7d3f6ddcc598b4186e95b0af011b48ab2/plone.recipe.precompiler-0.7.1.zip", "yanked": false}], "timestamp": "Fri May  8 02:52:52 2020"}