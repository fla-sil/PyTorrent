{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "\n\n\n<h1 align=\"center\">WPWatcher</h1>\n\n<p align=\"center\">\n  Automating <a href=\"https://wpscan.org/\" title=\"homepage\" target=\"_blank\">WPScan</a> to scan and report vulnerable Wordpress sites\n  <br>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/tristanlatr/WPWatcher/actions\" target=\"_blank\"><img src=\"https://github.com/tristanlatr/WPWatcher/workflows/test/badge.svg\"></a>\n  <a href=\"https://codecov.io/gh/tristanlatr/WPWatcher\" target=\"_blank\"><img src=\"https://codecov.io/gh/tristanlatr/WPWatcher/branch/master/graph/badge.svg\"></a>\n  <a href=\"https://pypi.org/project/WPWatcher/\" target=\"_blank\"><img src=\"https://badge.fury.io/py/wpwatcher.svg\"></a>\n  <a href=\"https://codeclimate.com/github/tristanlatr/WPWatcher\" target=\"_blank\"><img src=\"https://codeclimate.com/github/tristanlatr/WPWatcher/badges/gpa.svg\"></a>\n\n</p>\n\n## Features\n  - Scan multiple sites with WPScan\n  - Define reporting emails addresses for every configured site individually and globally\n  - Parse WPScan output and divide the results in \"Warnings\", \"Alerts\", \"Fixed\" items, \"Informations\" and eventually \"Errors\"\n  - Mail notification and verbosity can be configred, additionnaly WPScan output can be attached to emails. \n  - Scan sites continuously at defined interval and handled VulnDB API limit.  \n  - Local log file can be configured and also lists all the findings \n  - Define false positives strings for every configured site individually and globally\n  - Define WPScan arguments for every configured site individually and globally\n  - Speed up scans using several asynchronous workers\n  - Optionnal follow URL redirection if WPScan fails and propose to ignore main redirect \n  - Save raw WPScan results into files\n  - Parse the results differently whether wpscan argument `--format` is `json` or `cli`\n  - Optionnal prescan sites without API token, then use token on site having issues (i.e. outdated Wordpress, plugin version) only to save calls ;-)\n\n## Prerequisites \n  - [WPScan](http://wpscan.org/) (itself requires Ruby and some libraries).   \n  - Python 3 (standard libraries)\n  - Tested on Linux and MacOS\n\n<!-- #### Compatibility\nTested with WPScan 3.7.11 on :\n- MacOS (WPScan install wil `HomeBrew`)\n- Linux (WPScan installed with `RubyGems`)  \n- Raspbian (WPScan installed with `RubyGems`)   -->\n\n## Install\n#### With PyPi (stable)\n    pip3 install wpwatcher\n\n#####  Update\n```bash\npip3 install wpwatcher --upgrade\n```\n\n#### Manually (devel)\n```bash\ngit clone https://github.com/tristanlatr/WPWatcher.git\ncd WPWatcher && python3 setup.py install\n```\n\n`wpwatcher` should be in your `PATH` but you can always run the python script directly \n\n    python3 ./wpwatcher/cli.py --url exemple3.com -v\n\n<!-- \nBefore version 0.5.7 \n\n    python3 ./wpwatcher.py --url exemple3.com -v\n -->\n\n#### With docker\n\n<details><summary><b>See docker installation steps</b></summary>\n<p>\n\n- Clone the repository\n- Install docker image \n\nWith the user UID, `wpwatcher` will then run as this user. The following will use the current logged user UID. Won't work if you build the image as root.\n```bash\ndocker image build \\\n    --build-arg USER_ID=$(id -u ${USER}) \\\n    -t wpwatcher .\n```\n- Create and map a WPWatcher folder containing your `wpwatcher.conf` file to the docker runner.\n`wpwatcher` command would look like :  \n```bash\ndocker run -it -v '/path/to/wpwatcher.conf/folder/:/wpwatcher/.wpwatcher/' wpwatcher [...]\n```\n\nOr install without UID mapping, it will use [docker volumes](https://stackoverflow.com/questions/18496940/how-to-deal-with-persistent-storage-e-g-databases-in-docker?answertab=votes#tab-top) in order to write files and save reports\n```bash\ndocker image build -t wpwatcher .\n```\n\n- `wpwatcher` command would look like :  \n```\ndocker run -it -v 'wpwatcher_data:/wpwatcher/.wpwatcher/' wpwatcher\n```\n<!-- - Then, as root, check `docker volume inspect wpwatcher_data` to see Mountpoint, other WPWatcher files and create your config file if you want\n```bash\ndocker run -it wpwatcher --template_conf > /var/lib/docker/volumes/wpwatcher_data/_data/wpwatcher.conf\nvim /var/lib/docker/volumes/wpwatcher_data/_data/wpwatcher.conf\n``` -->\n\nTry it out (No persistent storage)\n```bash\ndocker run -it wpwatcher --url exemple1.com\n```\n\nCreate an alias with volume mapping your good to go\n```\nalias wpwatcher=\"docker run -it -v 'volume-name-or-path-to-folder:/wpwatcher/.wpwatcher/' wpwatcher\"\n```\n</p>\n</details>\n\n#### Try it out\nSimple usage, scan 2 sites with default config\n\n    wpwatcher --url exemple.com exemple1.com\n\nLoad sites from text file , pass WPScan arguments , follow redirection if WPScan failed , use 5 asynchronous workers , email custom recepients if any alert or warning with full WPScan result attached. Scan all sites without API token first and use token on sites with outdated plugins or WordPress version only. If you reach your API limit, it will wait and continue 24h later.\n\n```bash\nwpwatcher --urls sites.txt \\\n        --wpscan_args \"--rua --force --stealthy --api-token <TOKEN>\" \\\n        --follow_redirect --workers 5 \\\n        --send --attach \\\n        --email_to collaborator1@office.ca collaborator2@office.ca \\\n        --prescan_without_api_token --api_limit_wait\n```\n\n#### Notes on script behaviours\n- The script will automatically try to delete all temp `wpscan` files in `/tmp/wpscan` before starting scans\n- You might want to use `--ff` (fail fast) when you're setting up and configuring the script. Abort scans when WPScan fails, useful to troubleshoot.\n- All messages are printed to `stdout`.\n- WPWatcher store a database of reports and compare reports one scan after another to notice for fixed issues and implement `resend_emails_after` config . Default location is `~/.wpwatcher/wp_reports.json`.  Set `wp_reports=null` in the config to disable the storage of the Json file, the database will still be stored in memory when using `--daemon`.\n\n### Return non zero status code if :\n- One or more WPScan command failed\n- Unable to send one or more email report\n- Other errors\n\n## Configuration\n\nThe script **must read a configuration file to setup mail server settings and other otions**. Setup mail server settings and turn on `send_email_report` in the config file or use `--send` if you want to receive reports.  \nSee *Full configuration options* section below to see list of configurables values with CLI arguments and shortcuts. \n\nSelect config file with `--conf File path`. You can specify multiple files. Will overwrites the keys with each successive file. If not specified, it will try to load config from files `~/.wpwatcher/wpwatcher.conf` , `~/wpwatcher.conf` and `./wpwatcher.conf`, in this order.\n\nCreate and edit a new config file from template.   (  `--template_conf` argument print a default config file  )\n\n```bash\nwpwatcher --template_conf > ./wpwatcher.conf\nvim ./wpwatcher.conf\n```\nOther arguments will simply overwrite config values.\n\nSee complete list of options in the section *Full configuration options* bellow or use `wpwatcher --help` to see options configurable with CLI.\n\n### Notes about WPScan API token\n\nYou need a WPScan API token in order to show vulnerability data and be alerted of vulnerable WordPress or plugin. If you have large number of sites to scan, you'll probably can't scan all your sites because of the limited amount of daily API request. Turn on `api_limit_wait` to wait 24h and contuinue scans when API limit si reached.  \nIf no API token is provided to WPScan, scans will still trigger WARNING emails with outdated plugin or WordPress version.\n<!-- You can get a free API token with 50 daily requests. Scanning a site generates a undefined number of requests, it depends on the WPScan config and the number of WordPress plugins. WPScan will fail if you have reached yout API limit.  -->\n<!-- ### Scanning a large number of sites\nTips: \n- You can configure `wp_sites` from a text file (one URL per line) using `--urls File path` argument (overwrite sites from config files).\n- Speed up the scans with multiple asynchronous workers `--workers Number` option   -->\nPlease make sure you respect the [WPScan license](https://github.com/wpscanteam/wpscan/blob/master/LICENSE).\n\n#### Setup continuous scanning service, daemon mode\n\n<details><summary><b>See details and how to</b></summary>\n<p>\n\nConfigure :\n- `daemon_loop_sleep`: i.e. `12h` \n- `resend_emails_after` i.e.`5d` and \n- `api_limit_wait=Yes`. \n\nRecommended to use `--daemon` argument and not the config file value, otherwise `wpwatcher` will start by default in daemon mode.  \nLaunch WPWatcher in daemon mode:\n\n    wpwatcher --daemon [--urls ./my_sites.txt] ...\n\nLet's say you have 20 WordPress sites to scan but your API limit is reached after 8 sites, the program will sleep 24h and continue until all sites are scanned (2 days later). Then will sleep the configured time and start again.\n\nTip: `wpwatcher` and `wpscan` might not be in your execution environement `PATH`. If you run into file not found error, try to configure the full paths to executables and config files.\n\nNote: By default a different database file will be used when using daemon mode `~/.wpwatcher/wp_reports.daemon.json`\n\nSetup WPWatcher as a service.\n-  With `systemctl`\n\n    Create and configure the service file `/lib/systemd/system/wpwatcher.service`\n    ```bash\n    systemctl edit --full --force wpwatcher.service\n    ```\n    Adjust `ExecStart` and `User` in the following template service file:  \n    ```\n    [Unit]\n    Description=WPWatcher\n    After=network.target\n    StartLimitIntervalSec=0\n\n    [Service]\n    Type=simple\n    Restart=always\n    RestartSec=1\n    ExecStart=/usr/local/bin/wpwatcher --daemon \n    User=user\n\n    [Install]\n    WantedBy=multi-user.target\n    ```\n\n    Enable the service to start on boot\n    ```\n    systemctl daemon-reload\n    systemctl enable wpwatcher.service\n    ```\n\n    The service can be started/stopped with the following commands:\n    ```\n    systemctl start wpwatcher.service\n    systemctl stop wpwatcher.service\n    ```  \n\n    Follow logs\n    ```\n    journalctl -u wpwatcher -f\n    ```\n    [More infos on systemctl](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/sect-managing_services_with_systemd-unit_files) \n\n\n- For other systems, please refer to the appropriate [documentation](https://blog.frd.mn/how-to-set-up-proper-startstop-services-ubuntu-debian-mac-windows/)\n\n</p>\n</details>\n\n#### Or schedule scans with cron\nCaution: **do not configure crontab execution and continuous scanning at the same time** .   \n<details><summary><b>See contab usage</b></summary>\n<p>\n\n- Crontab usage:\n\n```\n0 0 * * * wpwatcher --quiet\n```\n\nTo print only ERRORS and WPScan ALERTS, use `--quiet` or set `quiet=Yes` in your config.  \nYou'll receive email alerts with cron `MAILTO` feature. Add `>/dev/null` to ignore.  \n\n- Crontab with multiple config files usage:\n    - `wpwatcher.conf`: contains all configurations except `wp_wites`\n    - `site1.txt`: contains first X urls\n    - `site2.txt`: contain the rest  ...  \n\n    In your crontab, configure script to run at your convenience. For exemple, with two lists :\n```\n# Will run at 00:00 on Monday:\n0 0 * * 1 wpwatcher --conf wpwatcher.conf --urls site1.txt --quiet\n# Will run at 00:00 on Tuesday:\n0 0 * * 2 wpwatcher --conf wpwatcher.conf --urls sites2.txt --quiet\n```\nWarning, this kind of setup can lead into having two `wpwatcher` executions at the same time. This might result into failure and/or database corruption because of conccurent accesses to reports database file.\n</p>\n</details>\n\n### Simple configuration with mail report\n\nSimple configuration file without SMTP authentication \n\n```ini\n[wpwatcher]\nwpscan_path=wpscan\nwp_sites=   [ {\"url\":\"exemple.com\"},\n              {\"url\":\"exemple2.com\"}  ]\nwpscan_args=[   \"--format\", \"json\",\n                \"--no-banner\",\n                \"--random-user-agent\", \n                \"--disable-tls-checks\",\n                \"--api-token\", \"YOUR_API_TOKEN\" ]\nsend_email_report=Yes\nemail_to=[\"me@exemple.com\"]\nsmtp_server=mailserver.exemple.com:25\nfrom_email=WordPressWatcher@exemple.com\n```\nYou can store the API Token in the WPScan default config file at `~/.wpscan/scan.yml` and not supply it via the wpscan CLI argument in the WPWatcher config file. See [WPSacn readme](https://github.com/wpscanteam/wpscan#save-api-token-in-a-file).\n\n### Full configuration options\n\n<details><summary><b>See all configuration options with explanatory comments.</b></summary>\n<p>\n\n#### WPScan path\nPath to wpscan executable. \nWith RVM could be `/usr/local/rvm/gems/default/wrappers/wpscan`.  \nPath is parsed with shlex.  \nIf missing, assume `wpscan` is in your `PATH`.  \n\n```ini\nwpscan_path=wpscan\n```\n#### WPScan arguments\nGlobal WPScan arguments.  \nMust be a valid Json string.  \n<!-- Set `\"--format\",\"json\"` to use Json parsing feature.  \nThe list of warnings, alerts and infos might differ when using json  \n    Email outpout will be more concice.   \n    But not all informations are logged.   \nUsing `\"--format\", \"cli\"` will parse full WPScan output with [!] etc  \n    Logs all informations   -->\n\nSee `wpscan --help` for more informations about WPScan options  \n```ini\nwpscan_args=[   \"--format\", \"cli\",\n                \"--no-banner\",\n                \"--random-user-agent\", \n                \"--disable-tls-checks\",\n                \"--detection-mode\", \"aggressive\",\n                \"--enumerate\", \"t,p,tt,cb,dbe,u,m\"]\n```\nOverwrite with `--wpargs \"WPScan arguments\"`. If you run into option parsing error, start the arguments string with a space or use equals sign `--wpargs=\"[...]\"` to avoid [argparse bug](https://stackoverflow.com/questions/16174992/cant-get-argparse-to-read-quoted-string-with-dashes-in-it?noredirect=1&lq=1).\n#### False positive strings\nYou can use this to ignore some warnings or alerts.  \nFalse positives will still be processed as infos: Use with care.   \nMust be a valid Json string\n```ini\nfalse_positive_strings=[\"You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up\"]\n```\n#### Monitored sites\nList of dictionnary having a url, custom email report recepients, false positives and specific wpscan arguments.\nEach dictrionnary must contain at least a `\"url\"` key.\nMust be a valid Json string.\nMust be supplied with config file or argument.\n```ini\nwp_sites=   [\n        {   \n            \"url\":\"exemple.com\",\n            \"email_to\":[\"site_owner@domain.com\"],\n            \"false_positive_strings\":[\"Vulnerability 123\"],\n            \"wpscan_args\":[\"--stealthy\"]\n        },\n        {   \n            \"url\":\"exemple2.com\",\n            \"email_to\":[\"site_owner2@domain.com\"],\n            \"false_positive_strings\":[\"Vulnerability 456\"]\n        },\n        {   \n            \"url\":\"exemple3.com\",\n            \"email_to\":[\"site_owner3@domain.com\"]\n        }\n    ]\n```\nOverwrite with arguments: `--url URL [URL...]` or `--urls File path`. Custom email report recepients, false positives and specific wpscan arguments are not supported with CLI arguments\n\n#### Notifications\n\n- Whether to send emails for alerting of the WPScan result (ALERT or other).  \nIf missing, default to No\n```ini\nsend_email_report=No\n```\nOverwrite with arguments: `--send`\n- Whether to report warnings and track the warnings fixes.\nWill send WARNING notifications and will include warnings in ALERT reports.  \nIf missing, default to Yes\n```ini\nsend_warnings=Yes\n```\n- Wheter to include Informations in the reports. Send INFO notifications if no warnings or alerts are found.  \nIf missing, default to No\n```ini\nsend_infos=No\n```\nOverwrite with arguments: `--infos`\n- Send ERROR notifications if wpscan failed.  \nIf missing, default to No\n```ini\nsend_errors=No\n```\nOverwrite with arguments: `--errors`\n- Attach text output file with raw WPScan output when sending a report  \n```ini\nattach_wpscan_output=No\n```\nOverwrite with arguments: `--attach`\n- Global email report recepients, will always receive email reports for all sites.  \nMust be a valid Json string\n```ini\nemail_to=[\"securityalerts@domain.com\"]\n```\nOverwrite with arguments: `--email_to Email [Email...]`\n- Minimum time inverval between sending two report with the same status.  Examples of valid strings: `8h`, `2d8h5m20s`, `2m4s`\nIf missing, default to `0s`\n```ini\nresend_emails_after=3d\n```\nOverwrite with arguments: `--resend Time string`\n- Send any error email to those addresses and not to other recepients (`email_to` options).  \nApplicable only if `send_errors=Yes`.  \nMust be a valid Json string\n```ini\nemail_errors_to=[\"admins@domain.com\"]\n```\n\n#### Mail server\n- Send email reports as\n```ini\nfrom_email=WordPressWatcher@domain.com\n```\n- SMTP Email server and port\n```ini\nsmtp_server=mailserver.de:25\n```\n- SMTP Use authentication. If missing, default to No\n```ini\nsmtp_auth=No\n```\n- SMTP Username\n```ini\nsmtp_user=office\n```\n- SMTP Password\n```ini\nsmtp_pass=p@assw0rd\n```\n- SMTP Use SSL\n```ini\nsmtp_ssl=Yes\n```\n#### Sleep when API limit reached\nWait 24h when API limit has been reached.  \nDefault behaviour will consider the API limit as a WPScan failure and continue the scans (if not fail_fast) leading into making lot's of failed commands\n```ini\napi_limit_wait=No\n```\nOverwrite with arguments: `--wait`\n#### Daemon settings\n- Daemon mode: loops forever. \nIf missing, default to No\n```ini\ndaemon=No\n```\nOverwrite with arguments: `--daemon`\n- Sleep time between two scans.  \nIf missing, default to `0s`\n```ini\ndaemon_loop_sleep=12h\n```\nOverwrite with argument: `--loop Time string`\n#### Output\n- Quiet\nPrint only errors and WPScan ALERTS\n```ini\nquiet=No\n```\nOverwrite with arguments: `--quiet`\n- Verbose terminal output and logging.  \nPrint WPScan raw output and parsed WPScan results.\n```ini\nverbose=No\n```\nOverwrite with arguments: `--verbose`\n- Local log file\n```ini\nlog_file=/home/user/.wpwatcher/wpwatcher.log\n```\nOverwrite with argument: `--log File path`\n- Save WPScan results to files as they are scanned\n```ini\nwpscan_output_folder=/home/user/Documents/WPScanResults/\n```\nOverwrite with argument: `--wpout Folder path`\n#### Misc\n- Raise exceptions with stack trace or exit when WPScan failed.  \nDefault behaviour is to log error, continue scans and return non zero status code when all scans are over\n```ini\nfail_fast=No\n```\nOverwrite with arguments: `--ff`\n- Reports database file.  \nIf missing, will figure out a place based on your environment to store the database. Use `null` keyword to disable the storage of the Json database file.\n```ini\nwp_reports=/home/user/.wpwatcher/wp_reports.json\n```\nOverwrite with arguments: `--reports File path`\n- Number of asynchronous workers. Speed up the scans.  \nIf missing, default to `1`, synchronous iterating. \n```ini\nasynch_workers=5\n```\nOverwrite with arguments: `--workers Number`\n- Follow redirection when WPScan failed and propose to use `--ignore-main-redirect`.  \nIf missing, default to `No` \n```ini\nfollow_redirect=Yes\n```\nOverwrite with arguments: `--follow`\n\nPrescan sites without API token, then use API token only on site with outdated pugin version or WordPress version only to save API calls\n\n```ini\nprescan_without_api_token=Yes\n```\nOverwrite with argument `--prescan`\n\nScan timeout. Default to `5m`\n```ini\nscan_timeout=10m\n```\n\n</p>\n</details>\n\nSee options configurable with CLI, run `wpwatcher --help`\n\n## Email reports\n\nOne report is generated per site and the reports are sent individually when finished scanning a website.\n\nEmail notification can have 5 status: \n- `ALERT`: You have a vulnerable Wordpress, theme or plugin\n- `WARNING`: You have an oudated Wordpress, theme or plugin\n- `FIXED`: All issues are fixed or ignored (warnings included if `send_warnings=Yes`) \n- `INFO`: WPScan did not find any issues with your site\n- `ERROR`: WPScan failed\n\n![WPWatcher Report List](/screens/wpwatcher-report-list.png \"WPWatcher Report\")\n\nTip: set `\"--format\",\"json\"` in  `wpscan_args` config option to use the json parsing feature and have more concise email text. \n\nAlerts, Warnings and Infos might differ whether you're using cli or json format.\n\n![WPWatcher Report](/screens/wpwatcher-report.png \"WPWatcher Report\")\n\n## Output\n\nLog file and stdout outputs are easily grepable with the following log levels and keywords:\n  - `CRITICAL`: Only used for `WPScan ALERT`\n  - `ERROR`:  WPScan failed, send report failed or other errors\n  - `WARNING`: Only used for `WPScan WARNING`\n  - `INFO`: Used for info output , `WPScan INFO` and `FIXED` issues\n  - `DEBUG`: Used for debug outup and raw WPScan output. \n\nIn addition to log messages, the readable report, and raw WPScan output can be printed with `--verbose`.\n<details><summary><b>See output sample</b></summary>\n<p>\n\n```log\n% wpwatcher --url www.exemple.com www.exemple2.com \nINFO - WPWatcher -  Automating WPscan to scan and report vulnerable Wordpress sites\nINFO - Load config file(s) : ['/Users/user/Documents/WPWatcher/wpwatcher.conf']\nINFO - Deleted temp WPScan files in /tmp/wpscan/\nINFO - Load wp_reports database: /Users/user/.wpwatcher/wp_reports.json\nINFO - Starting scans on 2 configured sites\nINFO - Scanning site http://www.exemple.com\nINFO - ** WPScan INFO http://www.exemple.com ** [+] URL: http://www.exemple.com/ [167.71.91.231] [+] Effective URL: https://www.exemple.com/ [+] Started: Tue Apr 28 19:30:39 2020\nINFO - ** WPScan INFO http://www.exemple.com ** Interesting Finding(s):\nINFO - ** WPScan INFO http://www.exemple.com ** [+] Headers | Interesting Entry: server: nginx | Found By: Headers (Passive Detection) | Confidence: 100%\nINFO - ** WPScan INFO http://www.exemple.com ** [+] XML-RPC seems to be enabled: https://www.exemple.com/xmlrpc.php | Found By: Link Tag (Passive Detection) | Confidence: 100% | Confirmed By: Direct Access (Aggressive Detection), 100% confidence | References: |  - http://codex.wordpress.org/XML-RPC_Pingback_API |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access\nINFO - ** WPScan INFO http://www.exemple.com ** [+] This site seems to be a multisite | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | Reference: http://codex.wordpress.org/Glossary#Multisite\nINFO - ** WPScan INFO http://www.exemple.com ** [+] This site has 'Must Use Plugins': http://www.exemple.com/wp-content/mu-plugins/ | Found By: Direct Access (Aggressive Detection) | Confidence: 80% | Reference: http://codex.wordpress.org/Must_Use_Plugins\nINFO - ** WPScan INFO http://www.exemple.com ** [+] WordPress version 4.9.13 identified (Latest, released on 2019-12-12). | Found By: Rss Generator (Passive Detection) |  - https://www.exemple.com/feed/, <generator>https://wordpress.org/?v=4.9.13</generator> |  - https://www.exemple.com/comments/feed/, <generator>https://wordpress.org/?v=4.9.13</generator>\nINFO - ** WPScan INFO http://www.exemple.com ** [+] WordPress theme in use: bb-theme-child | Location: http://www.exemple.com/wp-content/themes/bb-theme-child/ | Style URL: https://www.exemple.com/wp-content/themes/bb-theme-child/style.css?ver=4.9.13 | Style Name: Beaver Builder Child Theme | Style URI: http://www.wpbeaverbuilder.com | Description: An example child theme that can be used as a starting point for custom development.... | Author: The Beaver Builder Team | Author URI: http://www.fastlinemedia.com | Found By: Css Style In Homepage (Passive Detection) | Confirmed By: Css Style In 404 Page (Passive Detection) | Version: 1.0 (80% confidence) | Found By: Style (Passive Detection) |  - https://www.exemple.com/wp-content/themes/bb-theme-child/style.css?ver=4.9.13, Match: 'Version: 1.0'\nINFO - ** WPScan INFO http://www.exemple.com ** [+] Enumerating All Plugins (via Passive Methods) [+] Checking Plugin Versions (via Passive and Aggressive Methods)\nINFO - ** WPScan INFO http://www.exemple.com ** [i] Plugin(s) Identified:\nINFO - ** WPScan INFO http://www.exemple.com ** [+] bb-plugin | Location: http://www.exemple.com/wp-content/plugins/bb-plugin/ | Found By: Urls In Homepage (Passive Detection) | Confirmed By: Urls In 404 Page (Passive Detection) | The version could not be determined.\nINFO - ** WPScan INFO http://www.exemple.com ** [+] bbpowerpack | Location: http://www.exemple.com/wp-content/plugins/bbpowerpack/ | Found By: Urls In Homepage (Passive Detection) | Confirmed By: Urls In 404 Page (Passive Detection) | The version could not be determined.\nINFO - ** WPScan INFO http://www.exemple.com ** [+] Enumerating Config Backups (via Passive and Aggressive Methods)\nINFO - ** WPScan INFO http://www.exemple.com ** Checking Config Backups -: |================================================================================================================================================================================|\nINFO - ** WPScan INFO http://www.exemple.com ** [i] No Config Backups Found.\nINFO - ** WPScan INFO http://www.exemple.com ** [+] Finished: Tue Apr 28 19:30:47 2020 [+] Requests Done: 71 [+] Cached Requests: 4 [+] Data Sent: 19.451 KB [+] Data Received: 3.523 MB [+] Memory used: 247.629 MB [+] Elapsed time: 00:00:07\nINFO - ** WPScan INFO http://www.exemple.com ** [False positive] [!] No WPVulnDB API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up\nWARNING - ** WPScan WARNING http://www.exemple.com ** [+] stream | Location: http://www.exemple.com/wp-content/plugins/stream/ | Last Updated: 2020-03-19T21:55:00.000Z | [!] The version is out of date, the latest version is 3.4.3 | Found By: Comment (Passive Detection) | Version: 3.2.3 (100% confidence) | Found By: Comment (Passive Detection) |  - https://www.exemple.com/, Match: 'Stream WordPress user activity plugin v3.2.3' | Confirmed By: Readme - Stable Tag (Aggressive Detection) |  - http://www.exemple.com/wp-content/plugins/stream/readme.txt\nINFO - Not sending WPWatcher WARNING email report for site http://www.exemple.com. To receive emails, setup mail server settings in the config and enable send_email_report or use --send.\nINFO - Progress - [===============               ] 50% - 1 / 2\nINFO - Scanning site http://www.exemple2.com\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] URL: http://www.exemple2.com/ [104.31.71.16] [+] Effective URL: https://www.exemple2.com/ [+] Started: Tue Apr 28 19:30:51 2020\nINFO - ** WPScan INFO http://www.exemple2.com ** Interesting Finding(s):\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] Headers | Interesting Entries: |  - cf-cache-status: DYNAMIC |  - expect-ct: max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\" |  - server: cloudflare |  - cf-ray: 58b492d1ec18ca67-YUL |  - cf-request-id: 0264ba172d0000ca67e8275200000001 | Found By: Headers (Passive Detection) | Confidence: 100%\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] This site seems to be a multisite | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | Reference: http://codex.wordpress.org/Glossary#Multisite\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] WordPress theme in use: julesr-aeets | Location: http://www.exemple2.com/wordpress/wp-content/themes/julesr-aeets/ | Style URL: http://www.exemple2.com/wordpress/wp-content/themes/julesr-aeets/style.css | Found By: Urls In Homepage (Passive Detection) | Confirmed By: Urls In 404 Page (Passive Detection) | The version could not be determined.\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] Enumerating All Plugins (via Passive Methods)\nINFO - ** WPScan INFO http://www.exemple2.com ** [i] No plugins Found.\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] Enumerating Config Backups (via Passive and Aggressive Methods)\nINFO - ** WPScan INFO http://www.exemple2.com ** Checking Config Backups -: |================================================================================================================================================================================|\nINFO - ** WPScan INFO http://www.exemple2.com ** [i] No Config Backups Found.\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] Finished: Tue Apr 28 19:30:58 2020 [+] Requests Done: 55 [+] Cached Requests: 4 [+] Data Sent: 19.047 KB [+] Data Received: 156.492 KB [+] Memory used: 214.516 MB [+] Elapsed time: 00:00:06\nINFO - ** WPScan INFO http://www.exemple2.com ** [False positive] [!] No WPVulnDB API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up\nWARNING - ** WPScan WARNING http://www.exemple2.com ** [+] WordPress version 5.1.1 identified (Insecure, released on 2019-03-13). | Found By: Meta Generator (Passive Detection) |  - https://www.exemple2.com/, Match: 'WordPress 5.1.1' | Confirmed By: Most Common Wp Includes Query Parameter In Homepage (Passive Detection) |  - https://www.exemple2.com/wordpress/wp-includes/css/dist/block-library/style.min.css?ver=5.1.1\nINFO - Not sending WPWatcher WARNING email report for site http://www.exemple2.com. To receive emails, setup mail server settings in the config and enable send_email_report or use --send.\nINFO - Progress - [==============================] 100% - 2 / 2\nINFO - Results summary\nSite                            Status   Last scan            Last email           Issues   Problematic component(s)\nhttp://www.exemple.com     WARNING  2020-04-28T19-30-32  None                 1        [+] stream\nhttp://www.exemple2.com                WARNING  2020-04-28T19-30-47  None                 1        [+] WordPress version 5.1.1 identified (Insecure, released on 2019-03-13).\nINFO - Updated 2 reports in database: /Users/user/.wpwatcher/wp_reports.json\nINFO - Scans finished successfully.\n```\n</p>\n</details>\n\n## Json database summary generator\n\nDo not use on a json file currently used by a `wpwatcher` execution.  \n\nLoad default database\n\n    wpwatcher --wprs\n\nLoad specific file\n\n    wpwatcher --wprs ~/.wpwatcher/wp_reports.json\n\n<details><summary><b>See screenshot</b></summary>\n<p>\n\n![WPWatcher Report summary](/screens/reports-summary-wprs.png \"WPWatcher Reports summary\")\n\n</p>\n</details>\n\n## Library usage\n\n<details><summary><b>See guidelines and exemple</b></summary>\n<p>\n\n- Init config dict from file with `WPWatcherConfig().build_config()` method  \n- Customize the config if you want, you can overwrite any config values  \n- Create a `WPWatcher` object with your desired configuration  \n- Call `run_scans_and_notify()` method. Return a `tuple (exit code, reports)`. \n\n\n```python\nfrom wpwatcher.config import WPWatcherConfig\nfrom wpwatcher.core import WPWatcher\nconfig, files = WPWatcherConfig(files=['./demo.conf']).build_config() # leave None to find default config file\nconfig.update({ 'send_infos':   True,\n                'wp_sites':     [   {'url':'exemple1.com'},\n                                    {'url':'exemple2.com'}  ],\n                'wpscam_args': ['--stealthy']\n            })\nw=WPWatcher(config)\nexit_code, reports = w.run_scans_and_notify()\nfor r in reports:\n    print(\"%s\\t\\t%s\"%( r['site'], r['status'] ))\n```\n</p>\n</details>\n\n## Changelog\nSee [Releases](https://github.com/tristanlatr/WPWatcher/releases)\n\n## Questions ?\nIf you have any questions, please create a new issue.\n\n## Contribute\nIf you like the project and think you could help with making it better, there are many ways you can do it:\n\n- Create new issue for new feature proposal or a bug\n- Implement existing issues\n- Help with improving the documentation\n- Spread a word about the project to your collegues, friends, blogs or any other channels\n- Any other things you could imagine\n- Any contribution would be of great help\n\n## Running tests\n```\npython3 -m unittest tests.quick_test\n```\n\n## Authors\n- Florian Roth (Original author of [WPWatcher v0.2](https://github.com/Neo23x0/WPWatcher))\n- Tristan Land\u00e8s\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tristanlatr/WPWatcher", "keywords": "", "license": "Apache License 2.0", "maintainer": "Florian Roth, Tristan Land\u00e8s", "maintainer_email": "", "name": "wpwatcher", "package_url": "https://pypi.org/project/wpwatcher/", "platform": "", "project_url": "https://pypi.org/project/wpwatcher/", "project_urls": {"Homepage": "https://github.com/tristanlatr/WPWatcher"}, "release_url": "https://pypi.org/project/wpwatcher/2.0.4/", "requires_dist": null, "requires_python": "", "summary": "WordPress Watcher is a Python wrapper for WPScan that manages scans on multiple sites and reports by email.", "version": "2.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>WPWatcher</h1>\n<p align=\"center\">\n  Automating <a href=\"https://wpscan.org/\" rel=\"nofollow\" title=\"homepage\">WPScan</a> to scan and report vulnerable Wordpress sites\n  <br>\n</p>\n<p align=\"center\">\n  <a href=\"https://github.com/tristanlatr/WPWatcher/actions\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/892200091ec019faa0fd655a81c61209f8a23928/68747470733a2f2f6769746875622e636f6d2f7472697374616e6c6174722f5750576174636865722f776f726b666c6f77732f746573742f62616467652e737667\"></a>\n  <a href=\"https://codecov.io/gh/tristanlatr/WPWatcher\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b35427c4216a7bcbc64f2ba1720bc89348b4c28b/68747470733a2f2f636f6465636f762e696f2f67682f7472697374616e6c6174722f5750576174636865722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n  <a href=\"https://pypi.org/project/WPWatcher/\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc7b0a67a96277a85975fe1ff9602f4e34b9c0fa/68747470733a2f2f62616467652e667572792e696f2f70792f7770776174636865722e737667\"></a>\n  <a href=\"https://codeclimate.com/github/tristanlatr/WPWatcher\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/094f17134e7c6dd396eec9cff0450118bf9c6ca7/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f7472697374616e6c6174722f5750576174636865722f6261646765732f6770612e737667\"></a>\n</p>\n<h2>Features</h2>\n<ul>\n<li>Scan multiple sites with WPScan</li>\n<li>Define reporting emails addresses for every configured site individually and globally</li>\n<li>Parse WPScan output and divide the results in \"Warnings\", \"Alerts\", \"Fixed\" items, \"Informations\" and eventually \"Errors\"</li>\n<li>Mail notification and verbosity can be configred, additionnaly WPScan output can be attached to emails.</li>\n<li>Scan sites continuously at defined interval and handled VulnDB API limit.</li>\n<li>Local log file can be configured and also lists all the findings</li>\n<li>Define false positives strings for every configured site individually and globally</li>\n<li>Define WPScan arguments for every configured site individually and globally</li>\n<li>Speed up scans using several asynchronous workers</li>\n<li>Optionnal follow URL redirection if WPScan fails and propose to ignore main redirect</li>\n<li>Save raw WPScan results into files</li>\n<li>Parse the results differently whether wpscan argument <code>--format</code> is <code>json</code> or <code>cli</code></li>\n<li>Optionnal prescan sites without API token, then use token on site having issues (i.e. outdated Wordpress, plugin version) only to save calls ;-)</li>\n</ul>\n<h2>Prerequisites</h2>\n<ul>\n<li><a href=\"http://wpscan.org/\" rel=\"nofollow\">WPScan</a> (itself requires Ruby and some libraries).</li>\n<li>Python 3 (standard libraries)</li>\n<li>Tested on Linux and MacOS</li>\n</ul>\n\n<h2>Install</h2>\n<h4>With PyPi (stable)</h4>\n<pre><code>pip3 install wpwatcher\n</code></pre>\n<h5>Update</h5>\n<pre>pip3 install wpwatcher --upgrade\n</pre>\n<h4>Manually (devel)</h4>\n<pre>git clone https://github.com/tristanlatr/WPWatcher.git\n<span class=\"nb\">cd</span> WPWatcher <span class=\"o\">&amp;&amp;</span> python3 setup.py install\n</pre>\n<p><code>wpwatcher</code> should be in your <code>PATH</code> but you can always run the python script directly</p>\n<pre><code>python3 ./wpwatcher/cli.py --url exemple3.com -v\n</code></pre>\n\n<h4>With docker</h4>\n<details><summary><b>See docker installation steps</b></summary>\n<p>\n</p><ul>\n<li>Clone the repository</li>\n<li>Install docker image</li>\n</ul>\n<p>With the user UID, <code>wpwatcher</code> will then run as this user. The following will use the current logged user UID. Won't work if you build the image as root.</p>\n<pre>docker image build <span class=\"se\">\\</span>\n    --build-arg <span class=\"nv\">USER_ID</span><span class=\"o\">=</span><span class=\"k\">$(</span>id -u <span class=\"si\">${</span><span class=\"nv\">USER</span><span class=\"si\">}</span><span class=\"k\">)</span> <span class=\"se\">\\</span>\n    -t wpwatcher .\n</pre>\n<ul>\n<li>Create and map a WPWatcher folder containing your <code>wpwatcher.conf</code> file to the docker runner.\n<code>wpwatcher</code> command would look like :</li>\n</ul>\n<pre>docker run -it -v <span class=\"s1\">'/path/to/wpwatcher.conf/folder/:/wpwatcher/.wpwatcher/'</span> wpwatcher <span class=\"o\">[</span>...<span class=\"o\">]</span>\n</pre>\n<p>Or install without UID mapping, it will use <a href=\"https://stackoverflow.com/questions/18496940/how-to-deal-with-persistent-storage-e-g-databases-in-docker?answertab=votes#tab-top\" rel=\"nofollow\">docker volumes</a> in order to write files and save reports</p>\n<pre>docker image build -t wpwatcher .\n</pre>\n<ul>\n<li><code>wpwatcher</code> command would look like :</li>\n</ul>\n<pre><code>docker run -it -v 'wpwatcher_data:/wpwatcher/.wpwatcher/' wpwatcher\n</code></pre>\n\n<p>Try it out (No persistent storage)</p>\n<pre>docker run -it wpwatcher --url exemple1.com\n</pre>\n<p>Create an alias with volume mapping your good to go</p>\n<pre><code>alias wpwatcher=\"docker run -it -v 'volume-name-or-path-to-folder:/wpwatcher/.wpwatcher/' wpwatcher\"\n</code></pre>\n<p></p>\n</details>\n<h4>Try it out</h4>\n<p>Simple usage, scan 2 sites with default config</p>\n<pre><code>wpwatcher --url exemple.com exemple1.com\n</code></pre>\n<p>Load sites from text file , pass WPScan arguments , follow redirection if WPScan failed , use 5 asynchronous workers , email custom recepients if any alert or warning with full WPScan result attached. Scan all sites without API token first and use token on sites with outdated plugins or WordPress version only. If you reach your API limit, it will wait and continue 24h later.</p>\n<pre>wpwatcher --urls sites.txt <span class=\"se\">\\</span>\n        --wpscan_args <span class=\"s2\">\"--rua --force --stealthy --api-token &lt;TOKEN&gt;\"</span> <span class=\"se\">\\</span>\n        --follow_redirect --workers <span class=\"m\">5</span> <span class=\"se\">\\</span>\n        --send --attach <span class=\"se\">\\</span>\n        --email_to collaborator1@office.ca collaborator2@office.ca <span class=\"se\">\\</span>\n        --prescan_without_api_token --api_limit_wait\n</pre>\n<h4>Notes on script behaviours</h4>\n<ul>\n<li>The script will automatically try to delete all temp <code>wpscan</code> files in <code>/tmp/wpscan</code> before starting scans</li>\n<li>You might want to use <code>--ff</code> (fail fast) when you're setting up and configuring the script. Abort scans when WPScan fails, useful to troubleshoot.</li>\n<li>All messages are printed to <code>stdout</code>.</li>\n<li>WPWatcher store a database of reports and compare reports one scan after another to notice for fixed issues and implement <code>resend_emails_after</code> config . Default location is <code>~/.wpwatcher/wp_reports.json</code>.  Set <code>wp_reports=null</code> in the config to disable the storage of the Json file, the database will still be stored in memory when using <code>--daemon</code>.</li>\n</ul>\n<h3>Return non zero status code if :</h3>\n<ul>\n<li>One or more WPScan command failed</li>\n<li>Unable to send one or more email report</li>\n<li>Other errors</li>\n</ul>\n<h2>Configuration</h2>\n<p>The script <strong>must read a configuration file to setup mail server settings and other otions</strong>. Setup mail server settings and turn on <code>send_email_report</code> in the config file or use <code>--send</code> if you want to receive reports.<br>\nSee <em>Full configuration options</em> section below to see list of configurables values with CLI arguments and shortcuts.</p>\n<p>Select config file with <code>--conf File path</code>. You can specify multiple files. Will overwrites the keys with each successive file. If not specified, it will try to load config from files <code>~/.wpwatcher/wpwatcher.conf</code> , <code>~/wpwatcher.conf</code> and <code>./wpwatcher.conf</code>, in this order.</p>\n<p>Create and edit a new config file from template.   (  <code>--template_conf</code> argument print a default config file  )</p>\n<pre>wpwatcher --template_conf &gt; ./wpwatcher.conf\nvim ./wpwatcher.conf\n</pre>\n<p>Other arguments will simply overwrite config values.</p>\n<p>See complete list of options in the section <em>Full configuration options</em> bellow or use <code>wpwatcher --help</code> to see options configurable with CLI.</p>\n<h3>Notes about WPScan API token</h3>\n<p>You need a WPScan API token in order to show vulnerability data and be alerted of vulnerable WordPress or plugin. If you have large number of sites to scan, you'll probably can't scan all your sites because of the limited amount of daily API request. Turn on <code>api_limit_wait</code> to wait 24h and contuinue scans when API limit si reached.<br>\nIf no API token is provided to WPScan, scans will still trigger WARNING emails with outdated plugin or WordPress version.</p>\n\n\n<p>Please make sure you respect the <a href=\"https://github.com/wpscanteam/wpscan/blob/master/LICENSE\" rel=\"nofollow\">WPScan license</a>.</p>\n<h4>Setup continuous scanning service, daemon mode</h4>\n<details><summary><b>See details and how to</b></summary>\n<p>\n</p><p>Configure :</p>\n<ul>\n<li><code>daemon_loop_sleep</code>: i.e. <code>12h</code></li>\n<li><code>resend_emails_after</code> i.e.<code>5d</code> and</li>\n<li><code>api_limit_wait=Yes</code>.</li>\n</ul>\n<p>Recommended to use <code>--daemon</code> argument and not the config file value, otherwise <code>wpwatcher</code> will start by default in daemon mode.<br>\nLaunch WPWatcher in daemon mode:</p>\n<pre><code>wpwatcher --daemon [--urls ./my_sites.txt] ...\n</code></pre>\n<p>Let's say you have 20 WordPress sites to scan but your API limit is reached after 8 sites, the program will sleep 24h and continue until all sites are scanned (2 days later). Then will sleep the configured time and start again.</p>\n<p>Tip: <code>wpwatcher</code> and <code>wpscan</code> might not be in your execution environement <code>PATH</code>. If you run into file not found error, try to configure the full paths to executables and config files.</p>\n<p>Note: By default a different database file will be used when using daemon mode <code>~/.wpwatcher/wp_reports.daemon.json</code></p>\n<p>Setup WPWatcher as a service.</p>\n<ul>\n<li>\n<p>With <code>systemctl</code></p>\n<p>Create and configure the service file <code>/lib/systemd/system/wpwatcher.service</code></p>\n<pre>systemctl edit --full --force wpwatcher.service\n</pre>\n<p>Adjust <code>ExecStart</code> and <code>User</code> in the following template service file:</p>\n<pre><code>[Unit]\nDescription=WPWatcher\nAfter=network.target\nStartLimitIntervalSec=0\n\n[Service]\nType=simple\nRestart=always\nRestartSec=1\nExecStart=/usr/local/bin/wpwatcher --daemon \nUser=user\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>Enable the service to start on boot</p>\n<pre><code>systemctl daemon-reload\nsystemctl enable wpwatcher.service\n</code></pre>\n<p>The service can be started/stopped with the following commands:</p>\n<pre><code>systemctl start wpwatcher.service\nsystemctl stop wpwatcher.service\n</code></pre>\n<p>Follow logs</p>\n<pre><code>journalctl -u wpwatcher -f\n</code></pre>\n<p><a href=\"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/sect-managing_services_with_systemd-unit_files\" rel=\"nofollow\">More infos on systemctl</a></p>\n</li>\n<li>\n<p>For other systems, please refer to the appropriate <a href=\"https://blog.frd.mn/how-to-set-up-proper-startstop-services-ubuntu-debian-mac-windows/\" rel=\"nofollow\">documentation</a></p>\n</li>\n</ul>\n<p></p>\n</details>\n<h4>Or schedule scans with cron</h4>\n<p>Caution: <strong>do not configure crontab execution and continuous scanning at the same time</strong> .</p>\n<details><summary><b>See contab usage</b></summary>\n<p>\n</p><ul>\n<li>Crontab usage:</li>\n</ul>\n<pre><code>0 0 * * * wpwatcher --quiet\n</code></pre>\n<p>To print only ERRORS and WPScan ALERTS, use <code>--quiet</code> or set <code>quiet=Yes</code> in your config.<br>\nYou'll receive email alerts with cron <code>MAILTO</code> feature. Add <code>&gt;/dev/null</code> to ignore.</p>\n<ul>\n<li>\n<p>Crontab with multiple config files usage:</p>\n<ul>\n<li><code>wpwatcher.conf</code>: contains all configurations except <code>wp_wites</code></li>\n<li><code>site1.txt</code>: contains first X urls</li>\n<li><code>site2.txt</code>: contain the rest  ...</li>\n</ul>\n<p>In your crontab, configure script to run at your convenience. For exemple, with two lists :</p>\n</li>\n</ul>\n<pre><code># Will run at 00:00 on Monday:\n0 0 * * 1 wpwatcher --conf wpwatcher.conf --urls site1.txt --quiet\n# Will run at 00:00 on Tuesday:\n0 0 * * 2 wpwatcher --conf wpwatcher.conf --urls sites2.txt --quiet\n</code></pre>\n<p>Warning, this kind of setup can lead into having two <code>wpwatcher</code> executions at the same time. This might result into failure and/or database corruption because of conccurent accesses to reports database file.</p>\n<p></p>\n</details>\n<h3>Simple configuration with mail report</h3>\n<p>Simple configuration file without SMTP authentication</p>\n<pre><span class=\"k\">[wpwatcher]</span>\n<span class=\"na\">wpscan_path</span><span class=\"o\">=</span><span class=\"s\">wpscan</span>\n<span class=\"na\">wp_sites</span><span class=\"o\">=</span>   <span class=\"s\">[ {\"url\":\"exemple.com\"},</span>\n<span class=\"s\">              {\"url\":\"exemple2.com\"}  ]</span>\n<span class=\"na\">wpscan_args</span><span class=\"o\">=</span><span class=\"s\">[   \"--format\", \"json\",</span>\n<span class=\"s\">                \"--no-banner\",</span>\n<span class=\"s\">                \"--random-user-agent\", </span>\n<span class=\"s\">                \"--disable-tls-checks\",</span>\n<span class=\"s\">                \"--api-token\", \"YOUR_API_TOKEN\" ]</span>\n<span class=\"na\">send_email_report</span><span class=\"o\">=</span><span class=\"s\">Yes</span>\n<span class=\"na\">email_to</span><span class=\"o\">=</span><span class=\"s\">[\"me@exemple.com\"]</span>\n<span class=\"na\">smtp_server</span><span class=\"o\">=</span><span class=\"s\">mailserver.exemple.com:25</span>\n<span class=\"na\">from_email</span><span class=\"o\">=</span><span class=\"s\">WordPressWatcher@exemple.com</span>\n</pre>\n<p>You can store the API Token in the WPScan default config file at <code>~/.wpscan/scan.yml</code> and not supply it via the wpscan CLI argument in the WPWatcher config file. See <a href=\"https://github.com/wpscanteam/wpscan#save-api-token-in-a-file\" rel=\"nofollow\">WPSacn readme</a>.</p>\n<h3>Full configuration options</h3>\n<details><summary><b>See all configuration options with explanatory comments.</b></summary>\n<p>\n</p><h4>WPScan path</h4>\n<p>Path to wpscan executable.\nWith RVM could be <code>/usr/local/rvm/gems/default/wrappers/wpscan</code>.<br>\nPath is parsed with shlex.<br>\nIf missing, assume <code>wpscan</code> is in your <code>PATH</code>.</p>\n<pre><span class=\"na\">wpscan_path</span><span class=\"o\">=</span><span class=\"s\">wpscan</span>\n</pre>\n<h4>WPScan arguments</h4>\n<p>Global WPScan arguments.<br>\nMust be a valid Json string.</p>\n\n<p>See <code>wpscan --help</code> for more informations about WPScan options</p>\n<pre><span class=\"na\">wpscan_args</span><span class=\"o\">=</span><span class=\"s\">[   \"--format\", \"cli\",</span>\n<span class=\"s\">                \"--no-banner\",</span>\n<span class=\"s\">                \"--random-user-agent\", </span>\n<span class=\"s\">                \"--disable-tls-checks\",</span>\n<span class=\"s\">                \"--detection-mode\", \"aggressive\",</span>\n<span class=\"s\">                \"--enumerate\", \"t,p,tt,cb,dbe,u,m\"]</span>\n</pre>\n<p>Overwrite with <code>--wpargs \"WPScan arguments\"</code>. If you run into option parsing error, start the arguments string with a space or use equals sign <code>--wpargs=\"[...]\"</code> to avoid <a href=\"https://stackoverflow.com/questions/16174992/cant-get-argparse-to-read-quoted-string-with-dashes-in-it?noredirect=1&amp;lq=1\" rel=\"nofollow\">argparse bug</a>.</p>\n<h4>False positive strings</h4>\n<p>You can use this to ignore some warnings or alerts.<br>\nFalse positives will still be processed as infos: Use with care.<br>\nMust be a valid Json string</p>\n<pre><span class=\"na\">false_positive_strings</span><span class=\"o\">=</span><span class=\"s\">[\"You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up\"]</span>\n</pre>\n<h4>Monitored sites</h4>\n<p>List of dictionnary having a url, custom email report recepients, false positives and specific wpscan arguments.\nEach dictrionnary must contain at least a <code>\"url\"</code> key.\nMust be a valid Json string.\nMust be supplied with config file or argument.</p>\n<pre><span class=\"na\">wp_sites</span><span class=\"o\">=</span>   <span class=\"s\">[</span>\n<span class=\"s\">        {   </span>\n<span class=\"s\">            \"url\":\"exemple.com\",</span>\n<span class=\"s\">            \"email_to\":[\"site_owner@domain.com\"],</span>\n<span class=\"s\">            \"false_positive_strings\":[\"Vulnerability 123\"],</span>\n<span class=\"s\">            \"wpscan_args\":[\"--stealthy\"]</span>\n<span class=\"s\">        },</span>\n<span class=\"s\">        {   </span>\n<span class=\"s\">            \"url\":\"exemple2.com\",</span>\n<span class=\"s\">            \"email_to\":[\"site_owner2@domain.com\"],</span>\n<span class=\"s\">            \"false_positive_strings\":[\"Vulnerability 456\"]</span>\n<span class=\"s\">        },</span>\n<span class=\"s\">        {   </span>\n<span class=\"s\">            \"url\":\"exemple3.com\",</span>\n<span class=\"s\">            \"email_to\":[\"site_owner3@domain.com\"]</span>\n<span class=\"s\">        }</span>\n<span class=\"s\">    ]</span>\n</pre>\n<p>Overwrite with arguments: <code>--url URL [URL...]</code> or <code>--urls File path</code>. Custom email report recepients, false positives and specific wpscan arguments are not supported with CLI arguments</p>\n<h4>Notifications</h4>\n<ul>\n<li>Whether to send emails for alerting of the WPScan result (ALERT or other).<br>\nIf missing, default to No</li>\n</ul>\n<pre><span class=\"na\">send_email_report</span><span class=\"o\">=</span><span class=\"s\">No</span>\n</pre>\n<p>Overwrite with arguments: <code>--send</code></p>\n<ul>\n<li>Whether to report warnings and track the warnings fixes.\nWill send WARNING notifications and will include warnings in ALERT reports.<br>\nIf missing, default to Yes</li>\n</ul>\n<pre><span class=\"na\">send_warnings</span><span class=\"o\">=</span><span class=\"s\">Yes</span>\n</pre>\n<ul>\n<li>Wheter to include Informations in the reports. Send INFO notifications if no warnings or alerts are found.<br>\nIf missing, default to No</li>\n</ul>\n<pre><span class=\"na\">send_infos</span><span class=\"o\">=</span><span class=\"s\">No</span>\n</pre>\n<p>Overwrite with arguments: <code>--infos</code></p>\n<ul>\n<li>Send ERROR notifications if wpscan failed.<br>\nIf missing, default to No</li>\n</ul>\n<pre><span class=\"na\">send_errors</span><span class=\"o\">=</span><span class=\"s\">No</span>\n</pre>\n<p>Overwrite with arguments: <code>--errors</code></p>\n<ul>\n<li>Attach text output file with raw WPScan output when sending a report</li>\n</ul>\n<pre><span class=\"na\">attach_wpscan_output</span><span class=\"o\">=</span><span class=\"s\">No</span>\n</pre>\n<p>Overwrite with arguments: <code>--attach</code></p>\n<ul>\n<li>Global email report recepients, will always receive email reports for all sites.<br>\nMust be a valid Json string</li>\n</ul>\n<pre><span class=\"na\">email_to</span><span class=\"o\">=</span><span class=\"s\">[\"securityalerts@domain.com\"]</span>\n</pre>\n<p>Overwrite with arguments: <code>--email_to Email [Email...]</code></p>\n<ul>\n<li>Minimum time inverval between sending two report with the same status.  Examples of valid strings: <code>8h</code>, <code>2d8h5m20s</code>, <code>2m4s</code>\nIf missing, default to <code>0s</code></li>\n</ul>\n<pre><span class=\"na\">resend_emails_after</span><span class=\"o\">=</span><span class=\"s\">3d</span>\n</pre>\n<p>Overwrite with arguments: <code>--resend Time string</code></p>\n<ul>\n<li>Send any error email to those addresses and not to other recepients (<code>email_to</code> options).<br>\nApplicable only if <code>send_errors=Yes</code>.<br>\nMust be a valid Json string</li>\n</ul>\n<pre><span class=\"na\">email_errors_to</span><span class=\"o\">=</span><span class=\"s\">[\"admins@domain.com\"]</span>\n</pre>\n<h4>Mail server</h4>\n<ul>\n<li>Send email reports as</li>\n</ul>\n<pre><span class=\"na\">from_email</span><span class=\"o\">=</span><span class=\"s\">WordPressWatcher@domain.com</span>\n</pre>\n<ul>\n<li>SMTP Email server and port</li>\n</ul>\n<pre><span class=\"na\">smtp_server</span><span class=\"o\">=</span><span class=\"s\">mailserver.de:25</span>\n</pre>\n<ul>\n<li>SMTP Use authentication. If missing, default to No</li>\n</ul>\n<pre><span class=\"na\">smtp_auth</span><span class=\"o\">=</span><span class=\"s\">No</span>\n</pre>\n<ul>\n<li>SMTP Username</li>\n</ul>\n<pre><span class=\"na\">smtp_user</span><span class=\"o\">=</span><span class=\"s\">office</span>\n</pre>\n<ul>\n<li>SMTP Password</li>\n</ul>\n<pre><span class=\"na\">smtp_pass</span><span class=\"o\">=</span><span class=\"s\">p@assw0rd</span>\n</pre>\n<ul>\n<li>SMTP Use SSL</li>\n</ul>\n<pre><span class=\"na\">smtp_ssl</span><span class=\"o\">=</span><span class=\"s\">Yes</span>\n</pre>\n<h4>Sleep when API limit reached</h4>\n<p>Wait 24h when API limit has been reached.<br>\nDefault behaviour will consider the API limit as a WPScan failure and continue the scans (if not fail_fast) leading into making lot's of failed commands</p>\n<pre><span class=\"na\">api_limit_wait</span><span class=\"o\">=</span><span class=\"s\">No</span>\n</pre>\n<p>Overwrite with arguments: <code>--wait</code></p>\n<h4>Daemon settings</h4>\n<ul>\n<li>Daemon mode: loops forever.\nIf missing, default to No</li>\n</ul>\n<pre><span class=\"na\">daemon</span><span class=\"o\">=</span><span class=\"s\">No</span>\n</pre>\n<p>Overwrite with arguments: <code>--daemon</code></p>\n<ul>\n<li>Sleep time between two scans.<br>\nIf missing, default to <code>0s</code></li>\n</ul>\n<pre><span class=\"na\">daemon_loop_sleep</span><span class=\"o\">=</span><span class=\"s\">12h</span>\n</pre>\n<p>Overwrite with argument: <code>--loop Time string</code></p>\n<h4>Output</h4>\n<ul>\n<li>Quiet\nPrint only errors and WPScan ALERTS</li>\n</ul>\n<pre><span class=\"na\">quiet</span><span class=\"o\">=</span><span class=\"s\">No</span>\n</pre>\n<p>Overwrite with arguments: <code>--quiet</code></p>\n<ul>\n<li>Verbose terminal output and logging.<br>\nPrint WPScan raw output and parsed WPScan results.</li>\n</ul>\n<pre><span class=\"na\">verbose</span><span class=\"o\">=</span><span class=\"s\">No</span>\n</pre>\n<p>Overwrite with arguments: <code>--verbose</code></p>\n<ul>\n<li>Local log file</li>\n</ul>\n<pre><span class=\"na\">log_file</span><span class=\"o\">=</span><span class=\"s\">/home/user/.wpwatcher/wpwatcher.log</span>\n</pre>\n<p>Overwrite with argument: <code>--log File path</code></p>\n<ul>\n<li>Save WPScan results to files as they are scanned</li>\n</ul>\n<pre><span class=\"na\">wpscan_output_folder</span><span class=\"o\">=</span><span class=\"s\">/home/user/Documents/WPScanResults/</span>\n</pre>\n<p>Overwrite with argument: <code>--wpout Folder path</code></p>\n<h4>Misc</h4>\n<ul>\n<li>Raise exceptions with stack trace or exit when WPScan failed.<br>\nDefault behaviour is to log error, continue scans and return non zero status code when all scans are over</li>\n</ul>\n<pre><span class=\"na\">fail_fast</span><span class=\"o\">=</span><span class=\"s\">No</span>\n</pre>\n<p>Overwrite with arguments: <code>--ff</code></p>\n<ul>\n<li>Reports database file.<br>\nIf missing, will figure out a place based on your environment to store the database. Use <code>null</code> keyword to disable the storage of the Json database file.</li>\n</ul>\n<pre><span class=\"na\">wp_reports</span><span class=\"o\">=</span><span class=\"s\">/home/user/.wpwatcher/wp_reports.json</span>\n</pre>\n<p>Overwrite with arguments: <code>--reports File path</code></p>\n<ul>\n<li>Number of asynchronous workers. Speed up the scans.<br>\nIf missing, default to <code>1</code>, synchronous iterating.</li>\n</ul>\n<pre><span class=\"na\">asynch_workers</span><span class=\"o\">=</span><span class=\"s\">5</span>\n</pre>\n<p>Overwrite with arguments: <code>--workers Number</code></p>\n<ul>\n<li>Follow redirection when WPScan failed and propose to use <code>--ignore-main-redirect</code>.<br>\nIf missing, default to <code>No</code></li>\n</ul>\n<pre><span class=\"na\">follow_redirect</span><span class=\"o\">=</span><span class=\"s\">Yes</span>\n</pre>\n<p>Overwrite with arguments: <code>--follow</code></p>\n<p>Prescan sites without API token, then use API token only on site with outdated pugin version or WordPress version only to save API calls</p>\n<pre><span class=\"na\">prescan_without_api_token</span><span class=\"o\">=</span><span class=\"s\">Yes</span>\n</pre>\n<p>Overwrite with argument <code>--prescan</code></p>\n<p>Scan timeout. Default to <code>5m</code></p>\n<pre><span class=\"na\">scan_timeout</span><span class=\"o\">=</span><span class=\"s\">10m</span>\n</pre>\n<p></p>\n</details>\n<p>See options configurable with CLI, run <code>wpwatcher --help</code></p>\n<h2>Email reports</h2>\n<p>One report is generated per site and the reports are sent individually when finished scanning a website.</p>\n<p>Email notification can have 5 status:</p>\n<ul>\n<li><code>ALERT</code>: You have a vulnerable Wordpress, theme or plugin</li>\n<li><code>WARNING</code>: You have an oudated Wordpress, theme or plugin</li>\n<li><code>FIXED</code>: All issues are fixed or ignored (warnings included if <code>send_warnings=Yes</code>)</li>\n<li><code>INFO</code>: WPScan did not find any issues with your site</li>\n<li><code>ERROR</code>: WPScan failed</li>\n</ul>\n<p><img alt=\"WPWatcher Report List\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2fd2fbe13ab109052253be6d20ea945809439c55/2f73637265656e732f7770776174636865722d7265706f72742d6c6973742e706e67\"></p>\n<p>Tip: set <code>\"--format\",\"json\"</code> in  <code>wpscan_args</code> config option to use the json parsing feature and have more concise email text.</p>\n<p>Alerts, Warnings and Infos might differ whether you're using cli or json format.</p>\n<p><img alt=\"WPWatcher Report\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1eef474ac9574e74c28b8f4581923006e17d3b68/2f73637265656e732f7770776174636865722d7265706f72742e706e67\"></p>\n<h2>Output</h2>\n<p>Log file and stdout outputs are easily grepable with the following log levels and keywords:</p>\n<ul>\n<li><code>CRITICAL</code>: Only used for <code>WPScan ALERT</code></li>\n<li><code>ERROR</code>:  WPScan failed, send report failed or other errors</li>\n<li><code>WARNING</code>: Only used for <code>WPScan WARNING</code></li>\n<li><code>INFO</code>: Used for info output , <code>WPScan INFO</code> and <code>FIXED</code> issues</li>\n<li><code>DEBUG</code>: Used for debug outup and raw WPScan output.</li>\n</ul>\n<p>In addition to log messages, the readable report, and raw WPScan output can be printed with <code>--verbose</code>.</p>\n<details><summary><b>See output sample</b></summary>\n<p>\n</p><pre>% wpwatcher --url www.exemple.com www.exemple2.com \nINFO - WPWatcher -  Automating WPscan to scan and report vulnerable Wordpress sites\nINFO - Load config file(s) : ['/Users/user/Documents/WPWatcher/wpwatcher.conf']\nINFO - Deleted temp WPScan files in /tmp/wpscan/\nINFO - Load wp_reports database: /Users/user/.wpwatcher/wp_reports.json\nINFO - Starting scans on 2 configured sites\nINFO - Scanning site http://www.exemple.com\nINFO - ** WPScan INFO http://www.exemple.com ** [+] URL: http://www.exemple.com/ [167.71.91.231] [+] Effective URL: https://www.exemple.com/ [+] Started: Tue Apr 28 19:30:39 2020\nINFO - ** WPScan INFO http://www.exemple.com ** Interesting Finding(s):\nINFO - ** WPScan INFO http://www.exemple.com ** [+] Headers | Interesting Entry: server: nginx | Found By: Headers (Passive Detection) | Confidence: 100%\nINFO - ** WPScan INFO http://www.exemple.com ** [+] XML-RPC seems to be enabled: https://www.exemple.com/xmlrpc.php | Found By: Link Tag (Passive Detection) | Confidence: 100% | Confirmed By: Direct Access (Aggressive Detection), 100% confidence | References: |  - http://codex.wordpress.org/XML-RPC_Pingback_API |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access\nINFO - ** WPScan INFO http://www.exemple.com ** [+] This site seems to be a multisite | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | Reference: http://codex.wordpress.org/Glossary#Multisite\nINFO - ** WPScan INFO http://www.exemple.com ** [+] This site has 'Must Use Plugins': http://www.exemple.com/wp-content/mu-plugins/ | Found By: Direct Access (Aggressive Detection) | Confidence: 80% | Reference: http://codex.wordpress.org/Must_Use_Plugins\nINFO - ** WPScan INFO http://www.exemple.com ** [+] WordPress version 4.9.13 identified (Latest, released on 2019-12-12). | Found By: Rss Generator (Passive Detection) |  - https://www.exemple.com/feed/, &lt;generator&gt;https://wordpress.org/?v=4.9.13&lt;/generator&gt; |  - https://www.exemple.com/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=4.9.13&lt;/generator&gt;\nINFO - ** WPScan INFO http://www.exemple.com ** [+] WordPress theme in use: bb-theme-child | Location: http://www.exemple.com/wp-content/themes/bb-theme-child/ | Style URL: https://www.exemple.com/wp-content/themes/bb-theme-child/style.css?ver=4.9.13 | Style Name: Beaver Builder Child Theme | Style URI: http://www.wpbeaverbuilder.com | Description: An example child theme that can be used as a starting point for custom development.... | Author: The Beaver Builder Team | Author URI: http://www.fastlinemedia.com | Found By: Css Style In Homepage (Passive Detection) | Confirmed By: Css Style In 404 Page (Passive Detection) | Version: 1.0 (80% confidence) | Found By: Style (Passive Detection) |  - https://www.exemple.com/wp-content/themes/bb-theme-child/style.css?ver=4.9.13, Match: 'Version: 1.0'\nINFO - ** WPScan INFO http://www.exemple.com ** [+] Enumerating All Plugins (via Passive Methods) [+] Checking Plugin Versions (via Passive and Aggressive Methods)\nINFO - ** WPScan INFO http://www.exemple.com ** [i] Plugin(s) Identified:\nINFO - ** WPScan INFO http://www.exemple.com ** [+] bb-plugin | Location: http://www.exemple.com/wp-content/plugins/bb-plugin/ | Found By: Urls In Homepage (Passive Detection) | Confirmed By: Urls In 404 Page (Passive Detection) | The version could not be determined.\nINFO - ** WPScan INFO http://www.exemple.com ** [+] bbpowerpack | Location: http://www.exemple.com/wp-content/plugins/bbpowerpack/ | Found By: Urls In Homepage (Passive Detection) | Confirmed By: Urls In 404 Page (Passive Detection) | The version could not be determined.\nINFO - ** WPScan INFO http://www.exemple.com ** [+] Enumerating Config Backups (via Passive and Aggressive Methods)\nINFO - ** WPScan INFO http://www.exemple.com ** Checking Config Backups -: |================================================================================================================================================================================|\nINFO - ** WPScan INFO http://www.exemple.com ** [i] No Config Backups Found.\nINFO - ** WPScan INFO http://www.exemple.com ** [+] Finished: Tue Apr 28 19:30:47 2020 [+] Requests Done: 71 [+] Cached Requests: 4 [+] Data Sent: 19.451 KB [+] Data Received: 3.523 MB [+] Memory used: 247.629 MB [+] Elapsed time: 00:00:07\nINFO - ** WPScan INFO http://www.exemple.com ** [False positive] [!] No WPVulnDB API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up\nWARNING - ** WPScan WARNING http://www.exemple.com ** [+] stream | Location: http://www.exemple.com/wp-content/plugins/stream/ | Last Updated: 2020-03-19T21:55:00.000Z | [!] The version is out of date, the latest version is 3.4.3 | Found By: Comment (Passive Detection) | Version: 3.2.3 (100% confidence) | Found By: Comment (Passive Detection) |  - https://www.exemple.com/, Match: 'Stream WordPress user activity plugin v3.2.3' | Confirmed By: Readme - Stable Tag (Aggressive Detection) |  - http://www.exemple.com/wp-content/plugins/stream/readme.txt\nINFO - Not sending WPWatcher WARNING email report for site http://www.exemple.com. To receive emails, setup mail server settings in the config and enable send_email_report or use --send.\nINFO - Progress - [===============               ] 50% - 1 / 2\nINFO - Scanning site http://www.exemple2.com\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] URL: http://www.exemple2.com/ [104.31.71.16] [+] Effective URL: https://www.exemple2.com/ [+] Started: Tue Apr 28 19:30:51 2020\nINFO - ** WPScan INFO http://www.exemple2.com ** Interesting Finding(s):\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] Headers | Interesting Entries: |  - cf-cache-status: DYNAMIC |  - expect-ct: max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\" |  - server: cloudflare |  - cf-ray: 58b492d1ec18ca67-YUL |  - cf-request-id: 0264ba172d0000ca67e8275200000001 | Found By: Headers (Passive Detection) | Confidence: 100%\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] This site seems to be a multisite | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | Reference: http://codex.wordpress.org/Glossary#Multisite\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] WordPress theme in use: julesr-aeets | Location: http://www.exemple2.com/wordpress/wp-content/themes/julesr-aeets/ | Style URL: http://www.exemple2.com/wordpress/wp-content/themes/julesr-aeets/style.css | Found By: Urls In Homepage (Passive Detection) | Confirmed By: Urls In 404 Page (Passive Detection) | The version could not be determined.\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] Enumerating All Plugins (via Passive Methods)\nINFO - ** WPScan INFO http://www.exemple2.com ** [i] No plugins Found.\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] Enumerating Config Backups (via Passive and Aggressive Methods)\nINFO - ** WPScan INFO http://www.exemple2.com ** Checking Config Backups -: |================================================================================================================================================================================|\nINFO - ** WPScan INFO http://www.exemple2.com ** [i] No Config Backups Found.\nINFO - ** WPScan INFO http://www.exemple2.com ** [+] Finished: Tue Apr 28 19:30:58 2020 [+] Requests Done: 55 [+] Cached Requests: 4 [+] Data Sent: 19.047 KB [+] Data Received: 156.492 KB [+] Memory used: 214.516 MB [+] Elapsed time: 00:00:06\nINFO - ** WPScan INFO http://www.exemple2.com ** [False positive] [!] No WPVulnDB API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up\nWARNING - ** WPScan WARNING http://www.exemple2.com ** [+] WordPress version 5.1.1 identified (Insecure, released on 2019-03-13). | Found By: Meta Generator (Passive Detection) |  - https://www.exemple2.com/, Match: 'WordPress 5.1.1' | Confirmed By: Most Common Wp Includes Query Parameter In Homepage (Passive Detection) |  - https://www.exemple2.com/wordpress/wp-includes/css/dist/block-library/style.min.css?ver=5.1.1\nINFO - Not sending WPWatcher WARNING email report for site http://www.exemple2.com. To receive emails, setup mail server settings in the config and enable send_email_report or use --send.\nINFO - Progress - [==============================] 100% - 2 / 2\nINFO - Results summary\nSite                            Status   Last scan            Last email           Issues   Problematic component(s)\nhttp://www.exemple.com     WARNING  2020-04-28T19-30-32  None                 1        [+] stream\nhttp://www.exemple2.com                WARNING  2020-04-28T19-30-47  None                 1        [+] WordPress version 5.1.1 identified (Insecure, released on 2019-03-13).\nINFO - Updated 2 reports in database: /Users/user/.wpwatcher/wp_reports.json\nINFO - Scans finished successfully.\n</pre>\n<p></p>\n</details>\n<h2>Json database summary generator</h2>\n<p>Do not use on a json file currently used by a <code>wpwatcher</code> execution.</p>\n<p>Load default database</p>\n<pre><code>wpwatcher --wprs\n</code></pre>\n<p>Load specific file</p>\n<pre><code>wpwatcher --wprs ~/.wpwatcher/wp_reports.json\n</code></pre>\n<details><summary><b>See screenshot</b></summary>\n<p>\n</p><p><img alt=\"WPWatcher Report summary\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39182094fc1f2862d9d1d2bfb3f15f1c2d271cf7/2f73637265656e732f7265706f7274732d73756d6d6172792d777072732e706e67\"></p>\n<p></p>\n</details>\n<h2>Library usage</h2>\n<details><summary><b>See guidelines and exemple</b></summary>\n<p>\n</p><ul>\n<li>Init config dict from file with <code>WPWatcherConfig().build_config()</code> method</li>\n<li>Customize the config if you want, you can overwrite any config values</li>\n<li>Create a <code>WPWatcher</code> object with your desired configuration</li>\n<li>Call <code>run_scans_and_notify()</code> method. Return a <code>tuple (exit code, reports)</code>.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wpwatcher.config</span> <span class=\"kn\">import</span> <span class=\"n\">WPWatcherConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wpwatcher.core</span> <span class=\"kn\">import</span> <span class=\"n\">WPWatcher</span>\n<span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">WPWatcherConfig</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'./demo.conf'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">build_config</span><span class=\"p\">()</span> <span class=\"c1\"># leave None to find default config file</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span> <span class=\"s1\">'send_infos'</span><span class=\"p\">:</span>   <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"s1\">'wp_sites'</span><span class=\"p\">:</span>     <span class=\"p\">[</span>   <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"s1\">'exemple1.com'</span><span class=\"p\">},</span>\n                                    <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"s1\">'exemple2.com'</span><span class=\"p\">}</span>  <span class=\"p\">],</span>\n                <span class=\"s1\">'wpscam_args'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'--stealthy'</span><span class=\"p\">]</span>\n            <span class=\"p\">})</span>\n<span class=\"n\">w</span><span class=\"o\">=</span><span class=\"n\">WPWatcher</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"n\">exit_code</span><span class=\"p\">,</span> <span class=\"n\">reports</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">run_scans_and_notify</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">reports</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"se\">\\t\\t</span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"o\">%</span><span class=\"p\">(</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'site'</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'status'</span><span class=\"p\">]</span> <span class=\"p\">))</span>\n</pre>\n<p></p>\n</details>\n<h2>Changelog</h2>\n<p>See <a href=\"https://github.com/tristanlatr/WPWatcher/releases\" rel=\"nofollow\">Releases</a></p>\n<h2>Questions ?</h2>\n<p>If you have any questions, please create a new issue.</p>\n<h2>Contribute</h2>\n<p>If you like the project and think you could help with making it better, there are many ways you can do it:</p>\n<ul>\n<li>Create new issue for new feature proposal or a bug</li>\n<li>Implement existing issues</li>\n<li>Help with improving the documentation</li>\n<li>Spread a word about the project to your collegues, friends, blogs or any other channels</li>\n<li>Any other things you could imagine</li>\n<li>Any contribution would be of great help</li>\n</ul>\n<h2>Running tests</h2>\n<pre><code>python3 -m unittest tests.quick_test\n</code></pre>\n<h2>Authors</h2>\n<ul>\n<li>Florian Roth (Original author of <a href=\"https://github.com/Neo23x0/WPWatcher\" rel=\"nofollow\">WPWatcher v0.2</a>)</li>\n<li>Tristan Land\u00e8s</li>\n</ul>\n\n          </div>"}, "last_serial": 7124601, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "bde0df729f1f6eb0d811b4a79fe91934", "sha256": "bd89df6d46288b5602b3cc46ed16c1ca33d2741c714507dba4c1ae239107ef93"}, "downloads": -1, "filename": "wpwatcher-0.0.0-py3.7.egg", "has_sig": false, "md5_digest": "bde0df729f1f6eb0d811b4a79fe91934", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 55450, "upload_time": "2020-04-12T15:03:47", "upload_time_iso_8601": "2020-04-12T15:03:47.609187Z", "url": "https://files.pythonhosted.org/packages/8a/90/08013c6c8032a332167f39a4cf1c361cb08964c17865c8a88886324afacd/wpwatcher-0.0.0-py3.7.egg", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "bb5c612df2a3740c2ff15bc89d71b061", "sha256": "cbffc7336fade80848ed07ff98eadb600df1416ad34f6f3abbe3d89e21d029ea"}, "downloads": -1, "filename": "wpwatcher-0.4.1-py3.7.egg", "has_sig": false, "md5_digest": "bb5c612df2a3740c2ff15bc89d71b061", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 25022, "upload_time": "2020-03-31T18:12:50", "upload_time_iso_8601": "2020-03-31T18:12:50.865925Z", "url": "https://files.pythonhosted.org/packages/e0/7d/ecd66dce33d2e876932ce8474a733bc98739453b25c317510f22b4ff3dbf/wpwatcher-0.4.1-py3.7.egg", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "ff251d0d383e782be96624ddeec722b0", "sha256": "f169b34eb9ddf9dbef08dbf2a681da8b4cfa94fb5e9b5c803ebdf5a4d481e53e"}, "downloads": -1, "filename": "wpwatcher-0.4.2-py3.7.egg", "has_sig": false, "md5_digest": "ff251d0d383e782be96624ddeec722b0", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 25001, "upload_time": "2020-03-31T18:12:54", "upload_time_iso_8601": "2020-03-31T18:12:54.007997Z", "url": "https://files.pythonhosted.org/packages/e4/7e/c17e5a2a08fa80d6fecd96571fa8df8342f8b46dc70a5a32a2d0d25536c6/wpwatcher-0.4.2-py3.7.egg", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "fb808305ecab562af7eda2d189b1194a", "sha256": "c11aba9115b0449617a38df992a4ebd962ba0d92d422773a84d69f5080c4e960"}, "downloads": -1, "filename": "wpwatcher-0.5.1-py3.7.egg", "has_sig": false, "md5_digest": "fb808305ecab562af7eda2d189b1194a", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 29670, "upload_time": "2020-03-31T18:12:56", "upload_time_iso_8601": "2020-03-31T18:12:56.237725Z", "url": "https://files.pythonhosted.org/packages/f5/d4/3496ecc1fa18a98f1714b77ab0492fdc1297f207b6943dad012d2bc63b12/wpwatcher-0.5.1-py3.7.egg", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "c227bbf94efc5ac1b53b948a98622dff", "sha256": "a4677cf19d266f22b7b36e2cbb5ecdbad49e8516c4d59a615a9645c7b1507fe8"}, "downloads": -1, "filename": "wpwatcher-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c227bbf94efc5ac1b53b948a98622dff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33639, "upload_time": "2020-04-03T14:12:25", "upload_time_iso_8601": "2020-04-03T14:12:25.814565Z", "url": "https://files.pythonhosted.org/packages/b7/09/1b64cc00498b50b670a9a9ae181ae094f5311003925c23f94413ee9dca92/wpwatcher-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a063dfc89287e45d9139c58250671f5d", "sha256": "15ed9214ecab7cff86a6e466b5c998acf23ba42d79f9b8ba1cde45364d6d11f9"}, "downloads": -1, "filename": "wpwatcher-0.5.2.tar.gz", "has_sig": false, "md5_digest": "a063dfc89287e45d9139c58250671f5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32014, "upload_time": "2020-04-03T14:12:27", "upload_time_iso_8601": "2020-04-03T14:12:27.790395Z", "url": "https://files.pythonhosted.org/packages/a8/64/cdfd97afb5d603992b1616e0e3fe4ad4e35cbb621613982f5c2bdb53f071/wpwatcher-0.5.2.tar.gz", "yanked": false}], "0.5.2.dev0": [{"comment_text": "", "digests": {"md5": "a5a52e81379b4b3957c6d1d6345f9363", "sha256": "9e7a393b63f61d9b9c7d5d0f6ca651bb89c7727faf2fcf5a22fd67186c501d3a"}, "downloads": -1, "filename": "wpwatcher-0.5.2.dev0-py3.7.egg", "has_sig": false, "md5_digest": "a5a52e81379b4b3957c6d1d6345f9363", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 29720, "upload_time": "2020-03-31T18:12:58", "upload_time_iso_8601": "2020-03-31T18:12:58.769599Z", "url": "https://files.pythonhosted.org/packages/ca/9f/79cb8e6d0f59661b801e41ce9f73ef8786a67354f10dcaebfe6fd7ab9563/wpwatcher-0.5.2.dev0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "64dd209e199b141ffd4bc1c7457f298b", "sha256": "db36e4aeab8dd37269f62d8b1c609be9051b855617a9e746834293b0e66bc293"}, "downloads": -1, "filename": "wpwatcher-0.5.2.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "64dd209e199b141ffd4bc1c7457f298b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29140, "upload_time": "2020-03-31T18:12:47", "upload_time_iso_8601": "2020-03-31T18:12:47.660481Z", "url": "https://files.pythonhosted.org/packages/6d/82/fe29b14add675adf793e2154581ea09386207e917003857bfb884cf3e05b/wpwatcher-0.5.2.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c1f63dc12874eb296696263e433b26c", "sha256": "148c78f98a6f6380086e4f796dde93070474a11c20e4029fc90ed6ca894db3d7"}, "downloads": -1, "filename": "wpwatcher-0.5.2.dev0.tar.gz", "has_sig": false, "md5_digest": "7c1f63dc12874eb296696263e433b26c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25726, "upload_time": "2020-03-31T18:13:00", "upload_time_iso_8601": "2020-03-31T18:13:00.801735Z", "url": "https://files.pythonhosted.org/packages/bc/ad/b088207572d99194609864b7fb17cff0ab669d216654eccce6c6978dafac/wpwatcher-0.5.2.dev0.tar.gz", "yanked": false}], "0.5.2.dev1": [{"comment_text": "", "digests": {"md5": "fffae566653eccf772188316a27f328a", "sha256": "7d69e0b9a760a070d353304f93587240b672b1b518872a9d90a582aa60679be6"}, "downloads": -1, "filename": "wpwatcher-0.5.2.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "fffae566653eccf772188316a27f328a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29778, "upload_time": "2020-03-31T20:59:47", "upload_time_iso_8601": "2020-03-31T20:59:47.086510Z", "url": "https://files.pythonhosted.org/packages/4f/f1/0db18925255bc135988249d725a577ca2c593a7a9c90419ca695db91d09c/wpwatcher-0.5.2.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "323f45af65bfc29045dae08eb83af07b", "sha256": "96829def7b0947256af31aae709d0f6a42938c3110d7381ecf3e77e62ded610d"}, "downloads": -1, "filename": "wpwatcher-0.5.2.dev1.tar.gz", "has_sig": false, "md5_digest": "323f45af65bfc29045dae08eb83af07b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26592, "upload_time": "2020-03-31T20:59:49", "upload_time_iso_8601": "2020-03-31T20:59:49.545815Z", "url": "https://files.pythonhosted.org/packages/a7/3f/6c4a8cc58303ecc9b3e89c6e648f2af9d4375629ed651181389680f235a5/wpwatcher-0.5.2.dev1.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "396c5674ed9f4b9e1b45d15e792f9e09", "sha256": "4a041569b2a98c501cbf604437cecb5fa6aa983dfc1bb1c4f922d2171d6f9dbb"}, "downloads": -1, "filename": "wpwatcher-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "396c5674ed9f4b9e1b45d15e792f9e09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33878, "upload_time": "2020-04-03T18:45:35", "upload_time_iso_8601": "2020-04-03T18:45:35.189517Z", "url": "https://files.pythonhosted.org/packages/0a/82/e89df9b3eb017d1f38f4618610c2d53dc003e565c5914b7796dfd5dab392/wpwatcher-0.5.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07cb15578f5d51d69cb5bb17bc2b4c0c", "sha256": "d9618177ccc9eb130a638d1c4408a39c91818ddde790f1179ea5739a67a69b3b"}, "downloads": -1, "filename": "wpwatcher-0.5.3.tar.gz", "has_sig": false, "md5_digest": "07cb15578f5d51d69cb5bb17bc2b4c0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32593, "upload_time": "2020-04-03T18:45:36", "upload_time_iso_8601": "2020-04-03T18:45:36.642046Z", "url": "https://files.pythonhosted.org/packages/09/b6/5db82561d9af4ee5cc9d8f8c3b210035fd6aae33fbb72fd8c47d5474df85/wpwatcher-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "23c7156dd1d911f335a3e7ef98d43a9e", "sha256": "cc7ad6f02676bbab1691edf8ef5805ac1741429c49c3144e2c0f842b4a683b9c"}, "downloads": -1, "filename": "wpwatcher-0.5.4-py3.7.egg", "has_sig": false, "md5_digest": "23c7156dd1d911f335a3e7ef98d43a9e", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 35083, "upload_time": "2020-04-08T22:00:58", "upload_time_iso_8601": "2020-04-08T22:00:58.333502Z", "url": "https://files.pythonhosted.org/packages/8f/26/7102f11fef1ebecd7ad76ab6b0e69b51131babac3641444b906b11404b7d/wpwatcher-0.5.4-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed654c6b864b6ca2b44934ec9952e302", "sha256": "e6dc0023eab240d7525f46c298a6ce87a44a9f44941acb01a77e9256dc592e4c"}, "downloads": -1, "filename": "wpwatcher-0.5.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ed654c6b864b6ca2b44934ec9952e302", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34064, "upload_time": "2020-04-04T18:56:05", "upload_time_iso_8601": "2020-04-04T18:56:05.278702Z", "url": "https://files.pythonhosted.org/packages/dd/79/73c52b682045a5f3a49b30f90fb70b60429e54e10dd2dfe1315b2375f1fe/wpwatcher-0.5.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cf5a20b8b3719a298399177535c7e6c", "sha256": "a4ce3667b099853dc93e36e401df150a88d30fd3621209817373d4aec43072c8"}, "downloads": -1, "filename": "wpwatcher-0.5.4.tar.gz", "has_sig": false, "md5_digest": "7cf5a20b8b3719a298399177535c7e6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32834, "upload_time": "2020-04-04T18:56:06", "upload_time_iso_8601": "2020-04-04T18:56:06.766101Z", "url": "https://files.pythonhosted.org/packages/97/f9/1785d24ad0d497e008bb0129ff42a860e701207d8d4d41a9cf4db4c6070a/wpwatcher-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "74998aacb553ff481dd77547d8c6674f", "sha256": "24da0b833e2cbfc1e4c0d2ff4109c101a0872afd9b86f1a7255b7cdb1b5609a3"}, "downloads": -1, "filename": "wpwatcher-0.5.5-py3-none-any.whl", "has_sig": false, "md5_digest": "74998aacb553ff481dd77547d8c6674f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36432, "upload_time": "2020-04-08T22:00:56", "upload_time_iso_8601": "2020-04-08T22:00:56.734394Z", "url": "https://files.pythonhosted.org/packages/61/55/c60a2a7b903277759a5d0cada7de177c3bcdb919146a5acdd753330a7976/wpwatcher-0.5.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a7a2e26a472f16ce9f92558a620bc56", "sha256": "447f2b12f3fc730faf9fc2aeada78e2c7573ef92e4492c3101d18a0ba0f77c81"}, "downloads": -1, "filename": "wpwatcher-0.5.5.tar.gz", "has_sig": false, "md5_digest": "7a7a2e26a472f16ce9f92558a620bc56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35942, "upload_time": "2020-04-08T22:01:02", "upload_time_iso_8601": "2020-04-08T22:01:02.717013Z", "url": "https://files.pythonhosted.org/packages/95/2b/98a7e737f260aa807d850ca736b12383ad7b4bb9a9f7ba63df63fac169df/wpwatcher-0.5.5.tar.gz", "yanked": false}], "0.5.5.dev0": [{"comment_text": "", "digests": {"md5": "fe8285be695f46aff74d6bd636d839fa", "sha256": "2261ffb08b0abb41f10ce1833fec66fa0f05f7f42499f1ac02879507d9eb2c1c"}, "downloads": -1, "filename": "wpwatcher-0.5.5.dev0-py3.7.egg", "has_sig": false, "md5_digest": "fe8285be695f46aff74d6bd636d839fa", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 36794, "upload_time": "2020-04-08T22:00:59", "upload_time_iso_8601": "2020-04-08T22:00:59.930062Z", "url": "https://files.pythonhosted.org/packages/07/d8/c173fe4915bab0af12ddc673c5af0f45548ec6e73d882df2de91d40e5d27/wpwatcher-0.5.5.dev0-py3.7.egg", "yanked": false}], "0.5.5.dev1": [{"comment_text": "", "digests": {"md5": "e3c13013ffbf2bce1e7f74d73ab6da56", "sha256": "9e41ea42a71d014fa2b7e111b501768d1641437f0df6a0a12fe80fea6cfc6f9e"}, "downloads": -1, "filename": "wpwatcher-0.5.5.dev1-py3.7.egg", "has_sig": false, "md5_digest": "e3c13013ffbf2bce1e7f74d73ab6da56", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 36794, "upload_time": "2020-04-08T22:01:01", "upload_time_iso_8601": "2020-04-08T22:01:01.405823Z", "url": "https://files.pythonhosted.org/packages/43/df/3f1910b3c1a70e568a532421715f8d2f7492c31365440e22c0d492d70061/wpwatcher-0.5.5.dev1-py3.7.egg", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "49c34f47ce677912b354829c21f8057d", "sha256": "184f24a8c91b59a1910cbec33f9105c03fa23d070aadb6dec2ee2ec0ff92a6ef"}, "downloads": -1, "filename": "wpwatcher-0.5.6-py3.7.egg", "has_sig": false, "md5_digest": "49c34f47ce677912b354829c21f8057d", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 37300, "upload_time": "2020-04-09T04:05:00", "upload_time_iso_8601": "2020-04-09T04:05:00.263369Z", "url": "https://files.pythonhosted.org/packages/ef/d0/c39f02bd18a7509aa48f6a4a617030d516df06f3403a6f99c71d2d57408c/wpwatcher-0.5.6-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf006f8ca8c9afc4674bd1f50be549c1", "sha256": "38f6ca19109207f9790de802b69d4e81808b70fa46075733a1ab843122b8af04"}, "downloads": -1, "filename": "wpwatcher-0.5.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cf006f8ca8c9afc4674bd1f50be549c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37026, "upload_time": "2020-04-09T04:04:59", "upload_time_iso_8601": "2020-04-09T04:04:59.040570Z", "url": "https://files.pythonhosted.org/packages/de/d1/67356567518906e78b5ab323bf5d134f1e2abda35cf61d6a6ba0cb8d19cd/wpwatcher-0.5.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f76221714977f0c9ee309ba742708b3d", "sha256": "f89bd1fe78b85e50fc25401af4ebf4b85292cd35d3b673b12b801a1eb257b2b3"}, "downloads": -1, "filename": "wpwatcher-0.5.6.tar.gz", "has_sig": false, "md5_digest": "f76221714977f0c9ee309ba742708b3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40262, "upload_time": "2020-04-09T04:05:01", "upload_time_iso_8601": "2020-04-09T04:05:01.478685Z", "url": "https://files.pythonhosted.org/packages/32/7b/2a89b951aa19e9ae12a4073e1266d611bc5960b4ac2f2dacdc830b7b7a27/wpwatcher-0.5.6.tar.gz", "yanked": false}], "0.5.7": [{"comment_text": "", "digests": {"md5": "1a65beb75121c7c2a52f918f1cea6861", "sha256": "1478800ebb16f0c9521ee0d4b7e5072fa4c4c03aaf283a4b19102f580aad0c8e"}, "downloads": -1, "filename": "wpwatcher-0.5.7-py3.7.egg", "has_sig": false, "md5_digest": "1a65beb75121c7c2a52f918f1cea6861", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 56449, "upload_time": "2020-04-13T05:19:02", "upload_time_iso_8601": "2020-04-13T05:19:02.305445Z", "url": "https://files.pythonhosted.org/packages/46/d0/3b4c24a2f7abbca641c173781a909e378d20bffe026a1a33db44cd99522a/wpwatcher-0.5.7-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c2d4eca6fb437c0f86e3673c8d8c74a", "sha256": "896cd829826e655a55467ee28b334336a5c3f4abab4ca87cde7ae73f514d8440"}, "downloads": -1, "filename": "wpwatcher-0.5.7-py3-none-any.whl", "has_sig": false, "md5_digest": "2c2d4eca6fb437c0f86e3673c8d8c74a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36684, "upload_time": "2020-04-12T15:03:45", "upload_time_iso_8601": "2020-04-12T15:03:45.931729Z", "url": "https://files.pythonhosted.org/packages/3f/76/c428a50e662f60f5f6e9ec227e1580d1a13d8c46fb1aa3d959f7e1c96152/wpwatcher-0.5.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ebf198047da2b3e64c0f96536e43056", "sha256": "f1a774ca9ab38c118b000a909cae4d4879f73ea5ea206c05f106b03220e61d28"}, "downloads": -1, "filename": "wpwatcher-0.5.7.tar.gz", "has_sig": false, "md5_digest": "5ebf198047da2b3e64c0f96536e43056", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47315, "upload_time": "2020-04-12T15:03:51", "upload_time_iso_8601": "2020-04-12T15:03:51.478911Z", "url": "https://files.pythonhosted.org/packages/1d/c5/d6dcda1f6257b069eec042e48e7ffdec857fcc47f662a82f4d54fb93716b/wpwatcher-0.5.7.tar.gz", "yanked": false}], "0.5.7.dev1": [{"comment_text": "", "digests": {"md5": "e9c967d2ffdb14633ac682a3818f999b", "sha256": "ba965fa80d103488a728416873a3974a29cb8a242809580d21f5fcec10eed30e"}, "downloads": -1, "filename": "wpwatcher-0.5.7.dev1-py3.7.egg", "has_sig": false, "md5_digest": "e9c967d2ffdb14633ac682a3818f999b", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 55480, "upload_time": "2020-04-12T15:03:48", "upload_time_iso_8601": "2020-04-12T15:03:48.998902Z", "url": "https://files.pythonhosted.org/packages/d5/a5/1193d04dff5e26b4fa747043b880afc8446647c36534b78069121cc6659c/wpwatcher-0.5.7.dev1-py3.7.egg", "yanked": false}], "0.5.7.dev2": [{"comment_text": "", "digests": {"md5": "6016f5cad5e24167ad5dc54eb12ff95a", "sha256": "43f2500b7df489b624d6d15a3141fdbdfcbcfc5398d10edc9afdd08d45cd1d85"}, "downloads": -1, "filename": "wpwatcher-0.5.7.dev2-py3.7.egg", "has_sig": false, "md5_digest": "6016f5cad5e24167ad5dc54eb12ff95a", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 56596, "upload_time": "2020-04-12T15:03:50", "upload_time_iso_8601": "2020-04-12T15:03:50.221062Z", "url": "https://files.pythonhosted.org/packages/e0/36/749cb04d4a17412280c65660d896e36209fdbadd0eee649d42a0f14ac622/wpwatcher-0.5.7.dev2-py3.7.egg", "yanked": false}], "0.5.7b0": [{"comment_text": "", "digests": {"md5": "4fc2972957870adec141ce3d6fa1badb", "sha256": "9a721429b52b5d18606dc0b1ce588f23b8f2901220f67e2236c2c3b589833f3a"}, "downloads": -1, "filename": "wpwatcher-0.5.7b0-py3-none-any.whl", "has_sig": false, "md5_digest": "4fc2972957870adec141ce3d6fa1badb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36747, "upload_time": "2020-04-13T05:19:00", "upload_time_iso_8601": "2020-04-13T05:19:00.602800Z", "url": "https://files.pythonhosted.org/packages/0b/05/b315e841684ed32a11c50e37692146e3b5c222114a9cbe17886059349c92/wpwatcher-0.5.7b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e866b2ecb5c0d8025900c17d0156ae0", "sha256": "95099b317546f4bc42ba5d6afe8edb09938851687e6d6e36a53d0e33070cf21f"}, "downloads": -1, "filename": "wpwatcher-0.5.7b0.tar.gz", "has_sig": false, "md5_digest": "0e866b2ecb5c0d8025900c17d0156ae0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47637, "upload_time": "2020-04-13T05:19:03", "upload_time_iso_8601": "2020-04-13T05:19:03.827503Z", "url": "https://files.pythonhosted.org/packages/2b/71/0669169f78b7537b8e5b1e49a0530a06648275c96d2740ecea2f9db0c9ae/wpwatcher-0.5.7b0.tar.gz", "yanked": false}], "0.5.8": [{"comment_text": "", "digests": {"md5": "e54176804a2537d0fe9c340cf8f91f28", "sha256": "9d32aaf6e94ebe3f2a75afdee7bf101dcab37d90063e03ae4e1a1bc21ae60bcd"}, "downloads": -1, "filename": "wpwatcher-0.5.8-py3.7.egg", "has_sig": false, "md5_digest": "e54176804a2537d0fe9c340cf8f91f28", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 56596, "upload_time": "2020-04-13T07:10:31", "upload_time_iso_8601": "2020-04-13T07:10:31.765888Z", "url": "https://files.pythonhosted.org/packages/c9/30/d7894b98a0a3f9192d535192a4d67a40e68fef328380c8815fa1e4a70ed4/wpwatcher-0.5.8-py3.7.egg", "yanked": false}], "0.5.9": [{"comment_text": "", "digests": {"md5": "c10f788345eb9172e0ee4c7b446938f1", "sha256": "548b8a98ebb543b940b9b8448a09a8c5bcacc748e451baa660660c3d28b9d50f"}, "downloads": -1, "filename": "wpwatcher-0.5.9-py3.7.egg", "has_sig": false, "md5_digest": "c10f788345eb9172e0ee4c7b446938f1", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 56693, "upload_time": "2020-04-13T07:10:33", "upload_time_iso_8601": "2020-04-13T07:10:33.283219Z", "url": "https://files.pythonhosted.org/packages/ae/68/5565599444664edf517ed51ff7c542978515645dd992317bcd81d3c7b45c/wpwatcher-0.5.9-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "79e744e2596ee3007f74bef5b3c5097a", "sha256": "e2c7c104b9080b692a8af8af0a3aa010064318ce2c2f9f6bbc331821bfe58ce7"}, "downloads": -1, "filename": "wpwatcher-0.5.9-py3-none-any.whl", "has_sig": false, "md5_digest": "79e744e2596ee3007f74bef5b3c5097a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36837, "upload_time": "2020-04-13T07:10:30", "upload_time_iso_8601": "2020-04-13T07:10:30.548108Z", "url": "https://files.pythonhosted.org/packages/01/18/a7f336afe6d9bac2502e83c87267a676291d3d15c55de08045512b5b2e9d/wpwatcher-0.5.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ad404e97d44d120c9501849350d8a76", "sha256": "6c2ef3f6c1d1ad5c8aaf6a7ef05df73eb02632b482a8430ab86c38b548a6bf32"}, "downloads": -1, "filename": "wpwatcher-0.5.9.tar.gz", "has_sig": false, "md5_digest": "4ad404e97d44d120c9501849350d8a76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47796, "upload_time": "2020-04-13T07:10:34", "upload_time_iso_8601": "2020-04-13T07:10:34.789728Z", "url": "https://files.pythonhosted.org/packages/b7/55/c56efcb17b21bbb1263e9a8497409df930d7831daa8b97aba10ffea3a792/wpwatcher-0.5.9.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "9704831fa358339f7c74abd6ed61ab6e", "sha256": "0e4355b7882170edcee738bbb77ba99b253cd82246ad991331b1e78182482027"}, "downloads": -1, "filename": "wpwatcher-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9704831fa358339f7c74abd6ed61ab6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36819, "upload_time": "2020-04-13T16:35:09", "upload_time_iso_8601": "2020-04-13T16:35:09.251109Z", "url": "https://files.pythonhosted.org/packages/25/d8/d2e45fff10c5f5e63d4f8303c4bec449f1be5c5684e7a2149dfb40236f5c/wpwatcher-1.0-py3-none-any.whl", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "05359e5b0ad4c006735b0f6f7fa99881", "sha256": "17e11c0a3b885ab5b8c56c8f7ec9edb0cf21dc8ab77a38eb5f4893777dd37b13"}, "downloads": -1, "filename": "wpwatcher-2.0-py3.7.egg", "has_sig": false, "md5_digest": "05359e5b0ad4c006735b0f6f7fa99881", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 56776, "upload_time": "2020-04-16T04:03:01", "upload_time_iso_8601": "2020-04-16T04:03:01.279095Z", "url": "https://files.pythonhosted.org/packages/54/33/52419340f6477291d91323312c67e416dba54a5773ce128243537fc811eb/wpwatcher-2.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "46fa608aa55f90c8f0904a38d2240c92", "sha256": "8f2953040fea4792a43a8cdadbddd3cdadb28dddaadced026e4b8046be1841cf"}, "downloads": -1, "filename": "wpwatcher-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "46fa608aa55f90c8f0904a38d2240c92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36814, "upload_time": "2020-04-13T16:38:12", "upload_time_iso_8601": "2020-04-13T16:38:12.136685Z", "url": "https://files.pythonhosted.org/packages/06/30/d9ff174e8326c077ddcf4bd127c7f267625e3b15d5e8a24cb364c684b638/wpwatcher-2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c85d2d0a294560a0d334188a81010f5", "sha256": "5be367ec3bc3635be7ac76d856cd8e0d083532fe52c1ff1dd31aca07aab8bee8"}, "downloads": -1, "filename": "wpwatcher-2.0.tar.gz", "has_sig": false, "md5_digest": "6c85d2d0a294560a0d334188a81010f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47743, "upload_time": "2020-04-13T16:38:13", "upload_time_iso_8601": "2020-04-13T16:38:13.523475Z", "url": "https://files.pythonhosted.org/packages/53/00/9d8fb9a8b4b76d1e164a06263c0bfd01e83a185b79c71c9e59102b757b53/wpwatcher-2.0.tar.gz", "yanked": false}], "2.0.1.dev0": [{"comment_text": "", "digests": {"md5": "84959a3bb5fc109050d2d50333df36f8", "sha256": "865f7d892eb91a4289472ba88a1a81b654deb3e9c15de4061eb9da72f65cb308"}, "downloads": -1, "filename": "wpwatcher-2.0.1.dev0-py3.7.egg", "has_sig": false, "md5_digest": "84959a3bb5fc109050d2d50333df36f8", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 57775, "upload_time": "2020-04-16T04:03:03", "upload_time_iso_8601": "2020-04-16T04:03:03.918826Z", "url": "https://files.pythonhosted.org/packages/1e/f9/ff96842b267a1875e8dd2754e2f81db8ad17244891e3a2af0df210319e5a/wpwatcher-2.0.1.dev0-py3.7.egg", "yanked": false}], "2.0.1.dev1": [{"comment_text": "", "digests": {"md5": "70d7addc510f0f7caea3d5a52d05cecf", "sha256": "bf65bb3ec452ea3c4a600f41b5140054c78f64868c84b3333710425bd23b2d99"}, "downloads": -1, "filename": "wpwatcher-2.0.1.dev1-py3.7.egg", "has_sig": false, "md5_digest": "70d7addc510f0f7caea3d5a52d05cecf", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 57683, "upload_time": "2020-04-16T04:45:51", "upload_time_iso_8601": "2020-04-16T04:45:51.695957Z", "url": "https://files.pythonhosted.org/packages/63/d3/450484514f14838764acc19b3fb9fa2bf9d0a27306bd3d1730e5ffa201f7/wpwatcher-2.0.1.dev1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "01ce769501a1b1ebf9361ef03a711c9a", "sha256": "ef52a746c2547396479dc4f046adf096acb59e5d4f0d65b4fea5943a782e83f1"}, "downloads": -1, "filename": "wpwatcher-2.0.1.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "01ce769501a1b1ebf9361ef03a711c9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37341, "upload_time": "2020-04-16T04:02:59", "upload_time_iso_8601": "2020-04-16T04:02:59.668402Z", "url": "https://files.pythonhosted.org/packages/c4/b1/a566ef5f08d84a0de96528d69404c40cb7ebbc406c3d33ce261c915575cc/wpwatcher-2.0.1.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbd0fb09730c0fda7c3029484ba2f310", "sha256": "bfc39672a40ed0a190317cd31e782b584964391b55a0e0480bbc803f59f7567c"}, "downloads": -1, "filename": "wpwatcher-2.0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "bbd0fb09730c0fda7c3029484ba2f310", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48158, "upload_time": "2020-04-16T04:03:05", "upload_time_iso_8601": "2020-04-16T04:03:05.181590Z", "url": "https://files.pythonhosted.org/packages/be/de/5a2cd5ce733c3fa2076e95a39370c24e88ff3d8e354b08a8ed05f58eca44/wpwatcher-2.0.1.dev1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "2f1f92bd72dd495b4d65d9a97cc84a61", "sha256": "554678dfbb435edf024672eb6f6a3d44bb985c9d48277fd7b550d080d8aa732e"}, "downloads": -1, "filename": "wpwatcher-2.0.2-py3.7.egg", "has_sig": false, "md5_digest": "2f1f92bd72dd495b4d65d9a97cc84a61", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 57985, "upload_time": "2020-04-20T19:22:24", "upload_time_iso_8601": "2020-04-20T19:22:24.230794Z", "url": "https://files.pythonhosted.org/packages/59/ad/a037b131b17a7d2eba5ccb2f11decc8df2420755b89db08636b516e0a9cc/wpwatcher-2.0.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a944941c1f98f97edd490f66c94dca0a", "sha256": "e35dff489c4a054143f59362fcb856187534db517eb598bfc03b77dbbe12cdf0"}, "downloads": -1, "filename": "wpwatcher-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a944941c1f98f97edd490f66c94dca0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37241, "upload_time": "2020-04-16T04:45:50", "upload_time_iso_8601": "2020-04-16T04:45:50.189016Z", "url": "https://files.pythonhosted.org/packages/b1/9a/76dc253ee2cdae3a3913553a00f96bca82eb5436dcc9515c4ed6cd908251/wpwatcher-2.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab71a29360972bf43d7e2140858bb796", "sha256": "55603d1bc05977f1c15653e736ee47fd2074f0633e7ce89f482c59380a58d313"}, "downloads": -1, "filename": "wpwatcher-2.0.2.tar.gz", "has_sig": false, "md5_digest": "ab71a29360972bf43d7e2140858bb796", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48100, "upload_time": "2020-04-16T04:45:53", "upload_time_iso_8601": "2020-04-16T04:45:53.010838Z", "url": "https://files.pythonhosted.org/packages/5c/a4/4a2ca0211203526468bff59de19a640214139ec0815e0b53b97699c8a5db/wpwatcher-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "a51d1b1346b8d01e447bfaeddc5be1bf", "sha256": "4a44e3535eebb35d79ae22fd99a3f6d5f4ac0b7edb0c8e952734b666d99c5669"}, "downloads": -1, "filename": "wpwatcher-2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a51d1b1346b8d01e447bfaeddc5be1bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38456, "upload_time": "2020-04-20T19:22:22", "upload_time_iso_8601": "2020-04-20T19:22:22.317497Z", "url": "https://files.pythonhosted.org/packages/76/0e/757bcaf6ef5f17d6bfe773a8b49e60bfb4589a41ed959978871be690a6ef/wpwatcher-2.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3bd815d5acbfed4a81c572c7762d4709", "sha256": "f9664165d63de500a06f0c5b98bf42693514b3c504810ef39fc31f76a12af875"}, "downloads": -1, "filename": "wpwatcher-2.0.3.tar.gz", "has_sig": false, "md5_digest": "3bd815d5acbfed4a81c572c7762d4709", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49432, "upload_time": "2020-04-20T19:22:28", "upload_time_iso_8601": "2020-04-20T19:22:28.658183Z", "url": "https://files.pythonhosted.org/packages/fa/cf/1010a2736854607a4fb5bd9431b222f2fbe31b9c9425d8121f64f97980d1/wpwatcher-2.0.3.tar.gz", "yanked": false}], "2.0.3.dev0": [{"comment_text": "", "digests": {"md5": "4ed5ddd0efa50312743d7724593fff58", "sha256": "e07911a0b7fa61662b4c1810c057c80b75e1f75538c8f05af05893745dbf4197"}, "downloads": -1, "filename": "wpwatcher-2.0.3.dev0-py3.7.egg", "has_sig": false, "md5_digest": "4ed5ddd0efa50312743d7724593fff58", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 58007, "upload_time": "2020-04-20T19:22:25", "upload_time_iso_8601": "2020-04-20T19:22:25.597139Z", "url": "https://files.pythonhosted.org/packages/f9/8a/f5c5bb5e03797d8a42ad74b5ee753e1bb57d1f845743210b40de90c7cd86/wpwatcher-2.0.3.dev0-py3.7.egg", "yanked": false}], "2.0.3.dev1": [{"comment_text": "", "digests": {"md5": "f2ae541139e8bfe3ebd1776c89ef5b2b", "sha256": "f469a7b095442f478439721bb6cfcfb5f058bd8e3d216c6ed78669b0f2a0fac8"}, "downloads": -1, "filename": "wpwatcher-2.0.3.dev1-py3.7.egg", "has_sig": false, "md5_digest": "f2ae541139e8bfe3ebd1776c89ef5b2b", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 59983, "upload_time": "2020-04-20T19:22:27", "upload_time_iso_8601": "2020-04-20T19:22:27.210069Z", "url": "https://files.pythonhosted.org/packages/c7/4b/03d7e42cc8ba4e8e5e79ca87a42559064b9988f1b9c000e64b7b32f4163f/wpwatcher-2.0.3.dev1-py3.7.egg", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "c2aad1cf27bccb3be2afce16bdbd897b", "sha256": "06205e9cc083e49ab21f5962a5ba7fa4917f121f48f30c891ddaf9e78c525193"}, "downloads": -1, "filename": "wpwatcher-2.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c2aad1cf27bccb3be2afce16bdbd897b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42491, "upload_time": "2020-04-29T00:31:24", "upload_time_iso_8601": "2020-04-29T00:31:24.501574Z", "url": "https://files.pythonhosted.org/packages/8c/18/7feae787b1754e7466f8fca310b223dd30f9e83cb57dc6b83d17524fee32/wpwatcher-2.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d53a029b238e3d0e1b83b0dd00ec6712", "sha256": "d79ae0557b0fad3d2f833d7dde4fbc1d6eb1a5f7d60abbc91c7674f1d4221c6f"}, "downloads": -1, "filename": "wpwatcher-2.0.4.tar.gz", "has_sig": false, "md5_digest": "d53a029b238e3d0e1b83b0dd00ec6712", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50831, "upload_time": "2020-04-29T00:31:25", "upload_time_iso_8601": "2020-04-29T00:31:25.998791Z", "url": "https://files.pythonhosted.org/packages/10/55/825221ec0756171e9b3f184cdf36f93a466b49cf59de88fb33a6bee9c479/wpwatcher-2.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c2aad1cf27bccb3be2afce16bdbd897b", "sha256": "06205e9cc083e49ab21f5962a5ba7fa4917f121f48f30c891ddaf9e78c525193"}, "downloads": -1, "filename": "wpwatcher-2.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c2aad1cf27bccb3be2afce16bdbd897b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42491, "upload_time": "2020-04-29T00:31:24", "upload_time_iso_8601": "2020-04-29T00:31:24.501574Z", "url": "https://files.pythonhosted.org/packages/8c/18/7feae787b1754e7466f8fca310b223dd30f9e83cb57dc6b83d17524fee32/wpwatcher-2.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d53a029b238e3d0e1b83b0dd00ec6712", "sha256": "d79ae0557b0fad3d2f833d7dde4fbc1d6eb1a5f7d60abbc91c7674f1d4221c6f"}, "downloads": -1, "filename": "wpwatcher-2.0.4.tar.gz", "has_sig": false, "md5_digest": "d53a029b238e3d0e1b83b0dd00ec6712", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50831, "upload_time": "2020-04-29T00:31:25", "upload_time_iso_8601": "2020-04-29T00:31:25.998791Z", "url": "https://files.pythonhosted.org/packages/10/55/825221ec0756171e9b3f184cdf36f93a466b49cf59de88fb33a6bee9c479/wpwatcher-2.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:26 2020"}