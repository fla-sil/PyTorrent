{"info": {"author": "Michael Williamson", "author_email": "mike@zwobble.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "spur.py: Run commands and manipulate files locally or over SSH using the same interface\n=======================================================================================\n\nTo run echo locally:\n\n.. code-block:: python\n\n    import spur\n\n    shell = spur.LocalShell()\n    result = shell.run([\"echo\", \"-n\", \"hello\"])\n    print(result.output) # prints hello\n\nExecuting the same command over SSH uses the same interface -- the only\ndifference is how the shell is created:\n\n.. code-block:: python\n\n    import spur\n\n    shell = spur.SshShell(hostname=\"localhost\", username=\"bob\", password=\"password1\")\n    with shell:\n        result = shell.run([\"echo\", \"-n\", \"hello\"])\n    print(result.output) # prints hello\n\nInstallation\n------------\n\n``$ pip install spur``\n\nShell constructors\n------------------\n\nLocalShell\n~~~~~~~~~~\n\nTakes no arguments:\n\n.. code-block:: sh\n\n    spur.LocalShell()\n\nSshShell\n~~~~~~~~\n\nRequires a hostname. Also requires some combination of a username,\npassword and private key, as necessary to authenticate:\n\n.. code-block:: python\n\n    # Use a password\n    spur.SshShell(\n        hostname=\"localhost\",\n        username=\"bob\",\n        password=\"password1\"\n    )\n    # Use a private key\n    spur.SshShell(\n        hostname=\"localhost\",\n        username=\"bob\",\n        private_key_file=\"path/to/private.key\"\n    )\n    # Use a port other than 22\n    spur.SshShell(\n        hostname=\"localhost\",\n        port=50022,\n        username=\"bob\",\n        password=\"password1\"\n    )\n\nOptional arguments:\n\n* ``connect_timeout`` -- a timeout in seconds for establishing an SSH\n  connection. Defaults to 60 (one minute).\n\n* ``missing_host_key`` -- by default, an error is raised when a host\n  key is missing. One of the following values can be used to change the\n  behaviour when a host key is missing:\n   \n  - ``spur.ssh.MissingHostKey.raise_error`` -- raise an error\n  - ``spur.ssh.MissingHostKey.warn`` -- accept the host key and log a\n    warning\n  - ``spur.ssh.MissingHostKey.accept`` -- accept the host key\n\n* ``shell_type`` -- the type of shell used by the host. Defaults to\n  ``spur.ssh.ShellTypes.sh``, which should be appropriate for most Linux\n  distributions. If the host uses a different shell, such as simpler shells\n  often found on embedded systems, try changing ``shell_type`` to a more\n  appropriate value, such as ``spur.ssh.ShellTypes.minimal``. The following\n  shell types are currently supported:\n  \n  - ``spur.ssh.ShellTypes.sh`` -- the Bourne shell. Supports all features.\n  \n  - ``spur.ssh.ShellTypes.minimal`` -- a minimal shell. Several features\n    are unsupported:\n    \n    - Non-existent commands will not raise ``spur.NoSuchCommandError``.\n    \n    - The following arguments to ``spawn`` and ``run`` are unsupported unless\n      set to their default values:\n      ``cwd``, ``update_env``, and ``store_pid``.\n\n* ``look_for_private_keys`` -- by default, Spur will search for discoverable\n  private key files in ``~/.ssh/``.\n  Set to ``False`` to disable this behaviour.\n  \n* ``load_system_host_keys`` -- by default, Spur will attempt to read host keys\n  from the user's known hosts file, as used by OpenSSH, and no exception will\n  be raised if the file can't be read.\n  Set to ``False`` to disable this behaviour.\n\n* ``sock`` -- an open socket or socket-like object to use for communication to\n  the target host. For instance:\n\n  .. code-block:: python\n\n      sock=paramiko.proxy.ProxyCommand(\n          \"ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\"\n          \"bob@proxy.example.com nc -q0 target.example.com 22\"\n      )\n\n  Examples of socket-like objects include:\n\n  * |paramiko.Channel|_\n  * |paramiko.proxy.ProxyCommand|_\n    (`unsupported in Python 3 <https://github.com/paramiko/paramiko/issues/673>`_ as of writing)\n\n.. |paramiko.Channel| replace:: ``paramiko.Channel``\n.. _paramiko.Channel: http://docs.paramiko.org/en/latest/api/channel.html\n\n.. |paramiko.proxy.ProxyCommand| replace:: ``paramiko.proxy.ProxyCommand``\n.. _paramiko.proxy.ProxyCommand: http://docs.paramiko.org/en/latest/api/proxy.html\n\nShell interface\n---------------\n\nrun(command, cwd, update\\_env, store\\_pid, allow\\_error, stdout, stderr, encoding)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRun a command and wait for it to complete. The command is expected to be\na list of strings. Returns an instance of ``ExecutionResult``.\n\n.. code-block:: python\n\n    result = shell.run([\"echo\", \"-n\", \"hello\"])\n    print(result.output) # prints hello\n\nNote that arguments are passed without any shell expansion. For\ninstance, ``shell.run([\"echo\", \"$PATH\"])`` will print the literal string\n``$PATH`` rather than the value of the environment variable ``$PATH``.\n\nRaises ``spur.NoSuchCommandError`` if trying to execute a non-existent\ncommand.\n\nOptional arguments:\n\n* ``cwd`` -- change the current directory to this value before\n  executing the command.\n* ``update_env`` -- a ``dict`` containing environment variables to be\n  set before running the command. If there's an existing environment\n  variable with the same name, it will be overwritten. Otherwise, it is\n  unchanged.\n* ``store_pid`` -- if set to ``True`` when calling ``spawn``, store the\n  process id of the spawned process as the attribute ``pid`` on the\n  returned process object. Has no effect when calling ``run``.\n* ``allow_error`` -- ``False`` by default. If ``False``, an exception\n  is raised if the return code of the command is anything but 0. If\n  ``True``, a result is returned irrespective of return code.\n* ``stdout`` -- if not ``None``, anything the command prints to\n  standard output during its execution will also be written to\n  ``stdout`` using ``stdout.write``.\n* ``stderr`` -- if not ``None``, anything the command prints to\n  standard error during its execution will also be written to\n  ``stderr`` using ``stderr.write``.\n* ``encoding`` -- if set, this is used to decode any output.\n  By default, any output is treated as raw bytes.\n  If set, the raw bytes are decoded before writing to\n  the passed ``stdout`` and ``stderr`` arguments (if set)\n  and before setting the output attributes on the result.\n\n``shell.run(*args, **kwargs)`` should behave similarly to\n``shell.spawn(*args, **kwargs).wait_for_result()``\n\nspawn(command, cwd, update\\_env, store\\_pid, allow\\_error, stdout, stderr, encoding)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBehaves the same as ``run`` except that ``spawn`` immediately returns an\nobject representing the running process.\n\nRaises ``spur.NoSuchCommandError`` if trying to execute a non-existent\ncommand.\n\nopen(path, mode=\"r\")\n~~~~~~~~~~~~~~~~~~~~\n\nOpen the file at ``path``. Returns a file-like object.\n\nBy default, files are opened in text mode.\nAppending `\"b\"` to the mode will open the file in binary mode.\n\nFor instance, to copy a binary file over SSH,\nassuming you already have an instance of ``SshShell``:\n\n.. code-block:: python\n\n    with ssh_shell.open(\"/path/to/remote\", \"rb\") as remote_file:\n        with open(\"/path/to/local\", \"wb\") as local_file:\n            shutil.copyfileobj(remote_file, local_file)\n\nProcess interface\n-----------------\n\nReturned by calls to ``shell.spawn``. Has the following attributes:\n\n* ``pid`` -- the process ID of the process. Only available if\n  ``store_pid`` was set to ``True`` when calling ``spawn``.\n\nHas the following methods:\n\n* ``is_running()`` -- return ``True`` if the process is still running,\n  ``False`` otherwise.\n* ``stdin_write(value)`` -- write ``value`` to the standard input of\n  the process.\n* ``wait_for_result()`` -- wait for the process to exit, and then\n  return an instance of ``ExecutionResult``. Will raise\n  ``RunProcessError`` if the return code is not zero and\n  ``shell.spawn`` was not called with ``allow_error=True``.\n* ``send_signal(signal)`` -- sends the process the signal ``signal``.\n  Only available if ``store_pid`` was set to ``True`` when calling\n  ``spawn``.\n\nClasses\n-------\n\nExecutionResult\n~~~~~~~~~~~~~~~\n\n``ExecutionResult`` has the following properties:\n\n* ``return_code`` -- the return code of the command\n* ``output`` -- a string containing the result of capturing stdout\n* ``stderr_output`` -- a string containing the result of capturing\n  stdout\n\nIt also has the following methods:\n\n* ``to_error()`` -- return the corresponding RunProcessError. This is\n  useful if you want to conditionally raise RunProcessError, for\n  instance:\n\n.. code-block:: python\n\n    result = shell.run([\"some-command\"], allow_error=True)\n    if result.return_code > 4:\n        raise result.to_error()\n\nRunProcessError\n~~~~~~~~~~~~~~~\n\nA subclass of ``RuntimeError`` with the same properties as\n``ExecutionResult``:\n\n* ``return_code`` -- the return code of the command\n* ``output`` -- a string containing the result of capturing stdout\n* ``stderr_output`` -- a string containing the result of capturing\n  stdout\n\nNoSuchCommandError\n~~~~~~~~~~~~~~~~~~\n\n``NoSuchCommandError`` has the following properties:\n\n* ``command`` -- the command that could not be found\n\nAPI stability\n-------------\n\nUsing the the terminology from `Semantic\nVersioning <http://semver.org/spec/v1.0.0.html>`_, if the version of\nspur is X.Y.Z, then X is the major version, Y is the minor version, and\nZ is the patch version.\n\nWhile the major version is 0, incrementing the patch version indicates a\nbackwards compatible change. For instance, if you're using 0.3.1, then\nit should be safe to upgrade to 0.3.2.\n\nIncrementing the minor version indicates a change in the API. This means\nthat any code using previous minor versions of spur may need updating\nbefore it can use the current minor version.\n\nUndocumented features\n~~~~~~~~~~~~~~~~~~~~~\n\nSome features are undocumented, and should be considered experimental.\nUse them at your own risk. They may not behave correctly, and their\nbehaviour and interface may change at any time.\n\nTroubleshooting\n---------------\n\nI get the error \"Connection refused\" when trying to connect to a virtual machine using a forwarded port on ``localhost``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTry using ``\"127.0.0.1\"`` instead of ``\"localhost\"`` as the hostname.\n\nI get the error \"Connection refused\" when trying to execute commands over SSH\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTry connecting to the machine using SSH on the command line with the\nsame settings. For instance, if you're using the code:\n\n.. code-block:: python\n\n    shell = spur.SshShell(\n            hostname=\"remote\",\n            port=2222,\n            username=\"bob\",\n            private_key_file=\"/home/bob/.ssh/id_rsa\"\n        )\n    with shell:\n        result = shell.run([\"echo\", \"hello\"])\n\nTry running:\n\n.. code-block:: sh\n\n    ssh bob@remote -p 2222 -i /home/bob/.ssh/id_rsa\n\nIf the ``ssh`` command succeeds, make sure that the arguments to\n``ssh.SshShell`` and the ``ssh`` command are the same. If any of the\narguments to ``ssh.SshShell`` are dynamically generated, try hard-coding\nthem to make sure they're set to the values you expect.\n\nI can't spawn or run commands over SSH\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you're having trouble spawning or running commands over SSH, try passing\n``shell_type=spur.ssh.ShellTypes.minimal`` as an argument to ``spur.SshShell``.\nFor instance:\n\n.. code-block:: python\n\n    import spur\n    import spur.ssh\n\n    spur.SshShell(\n        hostname=\"localhost\",\n        username=\"bob\",\n        password=\"password1\",\n        shell_type=spur.ssh.ShellTypes.minimal,\n    )\n\nThis makes minimal assumptions about the features that the host shell supports,\nand is especially well-suited to minimal shells found on embedded systems. If\nthe host shell is more fully-featured but only works with\n``spur.ssh.ShellTypes.minimal``, feel free to submit an issue.\n\nWhy don't shell features such as variables and redirection work?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCommands are run directly rather than through a shell.\nIf you want to use any shell features such as variables and redirection,\nthen you'll need to run those commands within an appropriate shell.\nFor instance:\n\n.. code-block:: python\n\n    shell.run([\"sh\", \"-c\", \"echo $PATH\"])\n    shell.run([\"sh\", \"-c\", \"ls | grep bananas\"])", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mwilliamson/spur.py", "keywords": "shell subprocess process", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "spur.local", "package_url": "https://pypi.org/project/spur.local/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/spur.local/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/mwilliamson/spur.py"}, "release_url": "https://pypi.org/project/spur.local/0.3.19/", "requires_dist": null, "requires_python": null, "summary": "Run commands and manipulate files locally", "version": "0.3.19", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>To run echo locally:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">spur</span>\n\n<span class=\"n\">shell</span> <span class=\"o\">=</span> <span class=\"n\">spur</span><span class=\"o\">.</span><span class=\"n\">LocalShell</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">\"echo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-n\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">)</span> <span class=\"c1\"># prints hello</span>\n</pre>\n<p>Executing the same command over SSH uses the same interface \u2013 the only\ndifference is how the shell is created:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">spur</span>\n\n<span class=\"n\">shell</span> <span class=\"o\">=</span> <span class=\"n\">spur</span><span class=\"o\">.</span><span class=\"n\">SshShell</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"bob\"</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"password1\"</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">shell</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">\"echo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-n\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">)</span> <span class=\"c1\"># prints hello</span>\n</pre>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>$ pip install spur</tt></p>\n</div>\n<div id=\"shell-constructors\">\n<h2>Shell constructors</h2>\n<div id=\"localshell\">\n<h3>LocalShell</h3>\n<p>Takes no arguments:</p>\n<pre>spur.LocalShell<span class=\"o\">()</span>\n</pre>\n</div>\n<div id=\"sshshell\">\n<h3>SshShell</h3>\n<p>Requires a hostname. Also requires some combination of a username,\npassword and private key, as necessary to authenticate:</p>\n<pre><span class=\"c1\"># Use a password</span>\n<span class=\"n\">spur</span><span class=\"o\">.</span><span class=\"n\">SshShell</span><span class=\"p\">(</span>\n    <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n    <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"bob\"</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"password1\"</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Use a private key</span>\n<span class=\"n\">spur</span><span class=\"o\">.</span><span class=\"n\">SshShell</span><span class=\"p\">(</span>\n    <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n    <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"bob\"</span><span class=\"p\">,</span>\n    <span class=\"n\">private_key_file</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/private.key\"</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Use a port other than 22</span>\n<span class=\"n\">spur</span><span class=\"o\">.</span><span class=\"n\">SshShell</span><span class=\"p\">(</span>\n    <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">50022</span><span class=\"p\">,</span>\n    <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"bob\"</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"password1\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Optional arguments:</p>\n<ul>\n<li><p><tt>connect_timeout</tt> \u2013 a timeout in seconds for establishing an SSH\nconnection. Defaults to 60 (one minute).</p>\n</li>\n<li><p><tt>missing_host_key</tt> \u2013 by default, an error is raised when a host\nkey is missing. One of the following values can be used to change the\nbehaviour when a host key is missing:</p>\n<ul>\n<li><tt>spur.ssh.MissingHostKey.raise_error</tt> \u2013 raise an error</li>\n<li><tt>spur.ssh.MissingHostKey.warn</tt> \u2013 accept the host key and log a\nwarning</li>\n<li><tt>spur.ssh.MissingHostKey.accept</tt> \u2013 accept the host key</li>\n</ul>\n</li>\n<li><p><tt>shell_type</tt> \u2013 the type of shell used by the host. Defaults to\n<tt>spur.ssh.ShellTypes.sh</tt>, which should be appropriate for most Linux\ndistributions. If the host uses a different shell, such as simpler shells\noften found on embedded systems, try changing <tt>shell_type</tt> to a more\nappropriate value, such as <tt>spur.ssh.ShellTypes.minimal</tt>. The following\nshell types are currently supported:</p>\n<ul>\n<li><tt>spur.ssh.ShellTypes.sh</tt> \u2013 the Bourne shell. Supports all features.</li>\n<li><tt>spur.ssh.ShellTypes.minimal</tt> \u2013 a minimal shell. Several features\nare unsupported:<ul>\n<li>Non-existent commands will not raise <tt>spur.NoSuchCommandError</tt>.</li>\n<li>The following arguments to <tt>spawn</tt> and <tt>run</tt> are unsupported unless\nset to their default values:\n<tt>cwd</tt>, <tt>update_env</tt>, and <tt>store_pid</tt>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><tt>look_for_private_keys</tt> \u2013 by default, Spur will search for discoverable\nprivate key files in <tt><span class=\"pre\">~/.ssh/</span></tt>.\nSet to <tt>False</tt> to disable this behaviour.</p>\n</li>\n<li><p><tt>load_system_host_keys</tt> \u2013 by default, Spur will attempt to read host keys\nfrom the user\u2019s known hosts file, as used by OpenSSH, and no exception will\nbe raised if the file can\u2019t be read.\nSet to <tt>False</tt> to disable this behaviour.</p>\n</li>\n<li><p><tt>sock</tt> \u2013 an open socket or socket-like object to use for communication to\nthe target host. For instance:</p>\n<pre><span class=\"n\">sock</span><span class=\"o\">=</span><span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">ProxyCommand</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\"</span>\n    <span class=\"s2\">\"bob@proxy.example.com nc -q0 target.example.com 22\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Examples of socket-like objects include:</p>\n<ul>\n<li><a href=\"http://docs.paramiko.org/en/latest/api/channel.html\" rel=\"nofollow\"><tt>paramiko.Channel</tt></a></li>\n<li><a href=\"http://docs.paramiko.org/en/latest/api/proxy.html\" rel=\"nofollow\"><tt>paramiko.proxy.ProxyCommand</tt></a>\n(<a href=\"https://github.com/paramiko/paramiko/issues/673\" rel=\"nofollow\">unsupported in Python 3</a> as of writing)</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"shell-interface\">\n<h2>Shell interface</h2>\n<div id=\"run-command-cwd-update-env-store-pid-allow-error-stdout-stderr-encoding\">\n<h3>run(command, cwd, update_env, store_pid, allow_error, stdout, stderr, encoding)</h3>\n<p>Run a command and wait for it to complete. The command is expected to be\na list of strings. Returns an instance of <tt>ExecutionResult</tt>.</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">\"echo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-n\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">)</span> <span class=\"c1\"># prints hello</span>\n</pre>\n<p>Note that arguments are passed without any shell expansion. For\ninstance, <tt><span class=\"pre\">shell.run([\"echo\",</span> <span class=\"pre\">\"$PATH\"])</span></tt> will print the literal string\n<tt>$PATH</tt> rather than the value of the environment variable <tt>$PATH</tt>.</p>\n<p>Raises <tt>spur.NoSuchCommandError</tt> if trying to execute a non-existent\ncommand.</p>\n<p>Optional arguments:</p>\n<ul>\n<li><tt>cwd</tt> \u2013 change the current directory to this value before\nexecuting the command.</li>\n<li><tt>update_env</tt> \u2013 a <tt>dict</tt> containing environment variables to be\nset before running the command. If there\u2019s an existing environment\nvariable with the same name, it will be overwritten. Otherwise, it is\nunchanged.</li>\n<li><tt>store_pid</tt> \u2013 if set to <tt>True</tt> when calling <tt>spawn</tt>, store the\nprocess id of the spawned process as the attribute <tt>pid</tt> on the\nreturned process object. Has no effect when calling <tt>run</tt>.</li>\n<li><tt>allow_error</tt> \u2013 <tt>False</tt> by default. If <tt>False</tt>, an exception\nis raised if the return code of the command is anything but 0. If\n<tt>True</tt>, a result is returned irrespective of return code.</li>\n<li><tt>stdout</tt> \u2013 if not <tt>None</tt>, anything the command prints to\nstandard output during its execution will also be written to\n<tt>stdout</tt> using <tt>stdout.write</tt>.</li>\n<li><tt>stderr</tt> \u2013 if not <tt>None</tt>, anything the command prints to\nstandard error during its execution will also be written to\n<tt>stderr</tt> using <tt>stderr.write</tt>.</li>\n<li><tt>encoding</tt> \u2013 if set, this is used to decode any output.\nBy default, any output is treated as raw bytes.\nIf set, the raw bytes are decoded before writing to\nthe passed <tt>stdout</tt> and <tt>stderr</tt> arguments (if set)\nand before setting the output attributes on the result.</li>\n</ul>\n<p><tt><span class=\"pre\">shell.run(*args,</span> **kwargs)</tt> should behave similarly to\n<tt><span class=\"pre\">shell.spawn(*args,</span> <span class=\"pre\">**kwargs).wait_for_result()</span></tt></p>\n</div>\n<div id=\"spawn-command-cwd-update-env-store-pid-allow-error-stdout-stderr-encoding\">\n<h3>spawn(command, cwd, update_env, store_pid, allow_error, stdout, stderr, encoding)</h3>\n<p>Behaves the same as <tt>run</tt> except that <tt>spawn</tt> immediately returns an\nobject representing the running process.</p>\n<p>Raises <tt>spur.NoSuchCommandError</tt> if trying to execute a non-existent\ncommand.</p>\n</div>\n<div id=\"open-path-mode-r\">\n<h3>open(path, mode=\u201dr\u201d)</h3>\n<p>Open the file at <tt>path</tt>. Returns a file-like object.</p>\n<p>By default, files are opened in text mode.\nAppending <cite>\u201cb\u201d</cite> to the mode will open the file in binary mode.</p>\n<p>For instance, to copy a binary file over SSH,\nassuming you already have an instance of <tt>SshShell</tt>:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">ssh_shell</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/remote\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">remote_file</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/local\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">local_file</span><span class=\"p\">:</span>\n        <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">copyfileobj</span><span class=\"p\">(</span><span class=\"n\">remote_file</span><span class=\"p\">,</span> <span class=\"n\">local_file</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"process-interface\">\n<h2>Process interface</h2>\n<p>Returned by calls to <tt>shell.spawn</tt>. Has the following attributes:</p>\n<ul>\n<li><tt>pid</tt> \u2013 the process ID of the process. Only available if\n<tt>store_pid</tt> was set to <tt>True</tt> when calling <tt>spawn</tt>.</li>\n</ul>\n<p>Has the following methods:</p>\n<ul>\n<li><tt>is_running()</tt> \u2013 return <tt>True</tt> if the process is still running,\n<tt>False</tt> otherwise.</li>\n<li><tt>stdin_write(value)</tt> \u2013 write <tt>value</tt> to the standard input of\nthe process.</li>\n<li><tt>wait_for_result()</tt> \u2013 wait for the process to exit, and then\nreturn an instance of <tt>ExecutionResult</tt>. Will raise\n<tt>RunProcessError</tt> if the return code is not zero and\n<tt>shell.spawn</tt> was not called with <tt>allow_error=True</tt>.</li>\n<li><tt>send_signal(signal)</tt> \u2013 sends the process the signal <tt>signal</tt>.\nOnly available if <tt>store_pid</tt> was set to <tt>True</tt> when calling\n<tt>spawn</tt>.</li>\n</ul>\n</div>\n<div id=\"classes\">\n<h2>Classes</h2>\n<div id=\"executionresult\">\n<h3>ExecutionResult</h3>\n<p><tt>ExecutionResult</tt> has the following properties:</p>\n<ul>\n<li><tt>return_code</tt> \u2013 the return code of the command</li>\n<li><tt>output</tt> \u2013 a string containing the result of capturing stdout</li>\n<li><tt>stderr_output</tt> \u2013 a string containing the result of capturing\nstdout</li>\n</ul>\n<p>It also has the following methods:</p>\n<ul>\n<li><tt>to_error()</tt> \u2013 return the corresponding RunProcessError. This is\nuseful if you want to conditionally raise RunProcessError, for\ninstance:</li>\n</ul>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">\"some-command\"</span><span class=\"p\">],</span> <span class=\"n\">allow_error</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">return_code</span> <span class=\"o\">&gt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">to_error</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"runprocesserror\">\n<h3>RunProcessError</h3>\n<p>A subclass of <tt>RuntimeError</tt> with the same properties as\n<tt>ExecutionResult</tt>:</p>\n<ul>\n<li><tt>return_code</tt> \u2013 the return code of the command</li>\n<li><tt>output</tt> \u2013 a string containing the result of capturing stdout</li>\n<li><tt>stderr_output</tt> \u2013 a string containing the result of capturing\nstdout</li>\n</ul>\n</div>\n<div id=\"nosuchcommanderror\">\n<h3>NoSuchCommandError</h3>\n<p><tt>NoSuchCommandError</tt> has the following properties:</p>\n<ul>\n<li><tt>command</tt> \u2013 the command that could not be found</li>\n</ul>\n</div>\n</div>\n<div id=\"api-stability\">\n<h2>API stability</h2>\n<p>Using the the terminology from <a href=\"http://semver.org/spec/v1.0.0.html\" rel=\"nofollow\">Semantic\nVersioning</a>, if the version of\nspur is X.Y.Z, then X is the major version, Y is the minor version, and\nZ is the patch version.</p>\n<p>While the major version is 0, incrementing the patch version indicates a\nbackwards compatible change. For instance, if you\u2019re using 0.3.1, then\nit should be safe to upgrade to 0.3.2.</p>\n<p>Incrementing the minor version indicates a change in the API. This means\nthat any code using previous minor versions of spur may need updating\nbefore it can use the current minor version.</p>\n<div id=\"undocumented-features\">\n<h3>Undocumented features</h3>\n<p>Some features are undocumented, and should be considered experimental.\nUse them at your own risk. They may not behave correctly, and their\nbehaviour and interface may change at any time.</p>\n</div>\n</div>\n<div id=\"troubleshooting\">\n<h2>Troubleshooting</h2>\n<div id=\"i-get-the-error-connection-refused-when-trying-to-connect-to-a-virtual-machine-using-a-forwarded-port-on-localhost\">\n<h3>I get the error \u201cConnection refused\u201d when trying to connect to a virtual machine using a forwarded port on <tt>localhost</tt></h3>\n<p>Try using <tt>\"127.0.0.1\"</tt> instead of <tt>\"localhost\"</tt> as the hostname.</p>\n</div>\n<div id=\"i-get-the-error-connection-refused-when-trying-to-execute-commands-over-ssh\">\n<h3>I get the error \u201cConnection refused\u201d when trying to execute commands over SSH</h3>\n<p>Try connecting to the machine using SSH on the command line with the\nsame settings. For instance, if you\u2019re using the code:</p>\n<pre><span class=\"n\">shell</span> <span class=\"o\">=</span> <span class=\"n\">spur</span><span class=\"o\">.</span><span class=\"n\">SshShell</span><span class=\"p\">(</span>\n        <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s2\">\"remote\"</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">2222</span><span class=\"p\">,</span>\n        <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"bob\"</span><span class=\"p\">,</span>\n        <span class=\"n\">private_key_file</span><span class=\"o\">=</span><span class=\"s2\">\"/home/bob/.ssh/id_rsa\"</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">shell</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">\"echo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">])</span>\n</pre>\n<p>Try running:</p>\n<pre>ssh bob@remote -p <span class=\"m\">2222</span> -i /home/bob/.ssh/id_rsa\n</pre>\n<p>If the <tt>ssh</tt> command succeeds, make sure that the arguments to\n<tt>ssh.SshShell</tt> and the <tt>ssh</tt> command are the same. If any of the\narguments to <tt>ssh.SshShell</tt> are dynamically generated, try hard-coding\nthem to make sure they\u2019re set to the values you expect.</p>\n</div>\n<div id=\"i-can-t-spawn-or-run-commands-over-ssh\">\n<h3>I can\u2019t spawn or run commands over SSH</h3>\n<p>If you\u2019re having trouble spawning or running commands over SSH, try passing\n<tt>shell_type=spur.ssh.ShellTypes.minimal</tt> as an argument to <tt>spur.SshShell</tt>.\nFor instance:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">spur</span>\n<span class=\"kn\">import</span> <span class=\"nn\">spur.ssh</span>\n\n<span class=\"n\">spur</span><span class=\"o\">.</span><span class=\"n\">SshShell</span><span class=\"p\">(</span>\n    <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n    <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"bob\"</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"password1\"</span><span class=\"p\">,</span>\n    <span class=\"n\">shell_type</span><span class=\"o\">=</span><span class=\"n\">spur</span><span class=\"o\">.</span><span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">ShellTypes</span><span class=\"o\">.</span><span class=\"n\">minimal</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This makes minimal assumptions about the features that the host shell supports,\nand is especially well-suited to minimal shells found on embedded systems. If\nthe host shell is more fully-featured but only works with\n<tt>spur.ssh.ShellTypes.minimal</tt>, feel free to submit an issue.</p>\n</div>\n<div id=\"why-don-t-shell-features-such-as-variables-and-redirection-work\">\n<h3>Why don\u2019t shell features such as variables and redirection work?</h3>\n<p>Commands are run directly rather than through a shell.\nIf you want to use any shell features such as variables and redirection,\nthen you\u2019ll need to run those commands within an appropriate shell.\nFor instance:</p>\n<pre><span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">\"sh\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"echo $PATH\"</span><span class=\"p\">])</span>\n<span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">\"sh\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ls | grep bananas\"</span><span class=\"p\">])</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2424912, "releases": {"0.3.11": [{"comment_text": "", "digests": {"md5": "207b64ae12f091d485a6041f12b808fc", "sha256": "2aa7689c66198ac274e5c4531c4b6d60d11cf6d9140a8610404a05654df1c56f"}, "downloads": -1, "filename": "spur.local-0.3.11.tar.gz", "has_sig": false, "md5_digest": "207b64ae12f091d485a6041f12b808fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10415, "upload_time": "2014-05-22T10:49:08", "upload_time_iso_8601": "2014-05-22T10:49:08.183621Z", "url": "https://files.pythonhosted.org/packages/99/8f/296482ef8807764c0697f5355a3abeab04dcf58720fa2eb6018503ff9d40/spur.local-0.3.11.tar.gz", "yanked": false}], "0.3.19": [{"comment_text": "", "digests": {"md5": "650065fa160ea3855ed530349b4b608e", "sha256": "6350d7b825d1edc954683abe868cffd08eed8b30f4acdf5307ece5e943e49fa8"}, "downloads": -1, "filename": "spur.local-0.3.19.tar.gz", "has_sig": false, "md5_digest": "650065fa160ea3855ed530349b4b608e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12193, "upload_time": "2016-10-26T20:49:24", "upload_time_iso_8601": "2016-10-26T20:49:24.639392Z", "url": "https://files.pythonhosted.org/packages/5d/68/776c33b78ecb26493ce4c39a74a7329a8c42bca17a5659d148a2e50543fd/spur.local-0.3.19.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "35dafeffe320642b1f41923ff8fd2aae", "sha256": "c08a65a3f28a14ad8cafbc9346bc409f80bcde87fb3e301796a4c2c0202e1d90"}, "downloads": -1, "filename": "spur.local-0.3.5.tar.gz", "has_sig": false, "md5_digest": "35dafeffe320642b1f41923ff8fd2aae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9202, "upload_time": "2013-03-27T22:13:13", "upload_time_iso_8601": "2013-03-27T22:13:13.693335Z", "url": "https://files.pythonhosted.org/packages/89/4c/7115db19c4cc3fe4b031c6d6283ab7e755c0c8025909f997daa37369268b/spur.local-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "e760f38c37af0448e20d1f917a40d651", "sha256": "ae7fd0a09721a03cc8aa65b93b80ee8da1851efe7ba51add1cf46cdc1d8178c2"}, "downloads": -1, "filename": "spur.local-0.3.6.tar.gz", "has_sig": false, "md5_digest": "e760f38c37af0448e20d1f917a40d651", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9309, "upload_time": "2013-10-11T18:11:50", "upload_time_iso_8601": "2013-10-11T18:11:50.416381Z", "url": "https://files.pythonhosted.org/packages/d5/3d/b761c4e28a6d53ec8543dd279099f32d7d49f984d74d58f1cb3c7db73a9b/spur.local-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "18ee48c7087ecc10275bff0b3b293681", "sha256": "3b2d625d816e2a1bc9d8e657e6a0dc158c95837fd8ab4081d04d063ff401fa89"}, "downloads": -1, "filename": "spur.local-0.3.7.tar.gz", "has_sig": false, "md5_digest": "18ee48c7087ecc10275bff0b3b293681", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9269, "upload_time": "2013-10-11T18:42:18", "upload_time_iso_8601": "2013-10-11T18:42:18.822328Z", "url": "https://files.pythonhosted.org/packages/23/77/7d84789811f5906c808080bde32e808f6bd247a5db7dadbbde3acc249759/spur.local-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "084b7dd8f205185b2d17f5b4ecf2cce1", "sha256": "1aaa15471a1efeee2b35d87825e7d53b35999b58b1a242af62780bf12f02c16f"}, "downloads": -1, "filename": "spur.local-0.3.8.tar.gz", "has_sig": false, "md5_digest": "084b7dd8f205185b2d17f5b4ecf2cce1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9488, "upload_time": "2014-03-18T19:45:42", "upload_time_iso_8601": "2014-03-18T19:45:42.316790Z", "url": "https://files.pythonhosted.org/packages/30/85/062399b5936f8053cf26a57dcd39ebe8f0a1fcd887a9e1f94078e9505e6e/spur.local-0.3.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "650065fa160ea3855ed530349b4b608e", "sha256": "6350d7b825d1edc954683abe868cffd08eed8b30f4acdf5307ece5e943e49fa8"}, "downloads": -1, "filename": "spur.local-0.3.19.tar.gz", "has_sig": false, "md5_digest": "650065fa160ea3855ed530349b4b608e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12193, "upload_time": "2016-10-26T20:49:24", "upload_time_iso_8601": "2016-10-26T20:49:24.639392Z", "url": "https://files.pythonhosted.org/packages/5d/68/776c33b78ecb26493ce4c39a74a7329a8c42bca17a5659d148a2e50543fd/spur.local-0.3.19.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:12 2020"}