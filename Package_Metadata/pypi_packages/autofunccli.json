{"info": {"author": "Nicolas Cuadros", "author_email": "cuadros.nicolas@orange.fr", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Python Command Function\n\n## Description\n\nThis project aims to build an easy to use package allowing to use a python function directly as a command line script using the argparse module.\n\nWhen building a software, deep learning algorithm or even simple script; most of the time you will end up with one function that do all the job. But when you want to try or use it quickly you will have to use the python in command line or just edit your script each time you want to change your parameters. The best actual way for now is to use the argparse module to wrap your function with a command line interface but you will have to update it each type you change your function.\n\nThe point is that function is already what you want to call, and has already all the informations that you put in the argparse, so why not automate it ?\n\nAnd this what this project is about using the function signature directly to produce an argparser.\n\n## Installation\n\n### Via PyPI\n\nThe project is available on PyPI and you can install using pip :\n```bash\npip install autofunccli\n```\n### Using Github\n\nIf you want to have the example and run the tests you can clone the repository from Github.\n\n```bash\ngit clone https://github.com/CuadrosNicolas/Python-Command-Function\ncd pythonFunctionCommand\n```\n\nTo run the test :\n\n```bash\nchmod +x ./setup.sh && setup.sh\n```\n\nOnce you have done that you are ready to build your command function.\n\nYou first need to import the class from the package\n\n```python\nfrom autofunccli import cmdfunc\n```\nThen you just have to use it to wrap your function and build a command function.\n\n## How to use\n\n### Basic usage\n```python\n#examples/basic.py\nfrom autofunccli import cmdfunc\n#define a simple plus function\ndef plus(a,b):\n\treturn a+b\n#Use it as a main\n#.main test if __name__ == '__main__'\n# if it's the case, parse the command line input\nout = cmdfunc(plus).main(__name__)\nif(out != None):\n\tprint(out)\n```\nThen you can try by running the script\n```bash\npython3 basic.py -h\n```\nWhich will output :\n```console\nusage: basic.py [-h] a b\n\npositional arguments:\n  a           : <str>\n  b           : <str>\n\noptional arguments:\n  -h, --help  show this help message and exit\n\n[RETURN]\n```\nIf you try it by running the script with the right arguments like if you want to add 1 and 2\n```bash\npython3 basic.py 1 2\n```\nYou will end up with :\n```console\n12\n```\nBut wait that's not 1+2 ! And it's normal, you have to specify that the arguments are integer to use them as integer. So let's modify the signature and add type annotation\n\n```python\ndef  plus(a:int,b:int)->int:\n\treturn a+b\n```\nIf you run it again :\n```console\n3\n```\nNow it's the right output !\nautofunccli uses the type annotation for parsing the raw input allowing a great flexibility in time if you change your signature.\n\nAccepted type are the following :\n```python\n#Accepted types for function argument\nacceptedTypes = [\n\tbool,\n\tint,\n\tfloat,\n\tstr,\n\tList,\n\tTuple\n]\n#Accepted types for generic type argument\nacceptedTypeArgs = [\n\tbool,\n\tint,\n\tfloat,\n\tstr\n]\n```\nList,Tuple, Bool and Enum are special cases that you will know more about in the next section.\n\n### Default Values\nWhen using default value for arguments, they becomes optional argument for your command.\n```python\n#examples/default.py\nfrom autofunccli import cmdfunc\n\ndef  f(must:int,optional:int=0):\n\treturn must+optional\n\nout = cmdfunc(f).main(__name__)\nif(out != None):\n\tprint(out)\n```\n### List arguments and choices\nTo use List and Tuple you have to import the typing package\n```python\nfrom typing import List,Tuple\n```\n#### List\nIf you want to use list as arguments like using the nargs='+' in command argparse you have to specify your function argument as a List[T] type like in this example :\n```python\n#examples/list.py\nfrom autofunccli import cmdfunc\nfrom typing import List\nfrom functools import reduce\n\ndef  sum(l:List[int])->int:\n\treturn reduce(lambda  prev,act:prev+act,l)\n\nout = cmdfunc(sum).main(__name__)\nif(out != None):\n\tprint(out)\n```\nWill create a command like this :\n```console\nusage: list.py [-h] l [l ...]\n\npositional arguments:\n  l           : <List[int]>\n\noptional arguments:\n  -h, --help  show this help message and exit\n\n[RETURN] : <int>\n```\nThe list type argument must be in the acceptedTypeArgs array.\n\n#### Tuple\nTuple can be seen as a special case of array with a finite number of element.\nIn our cases if we want to have a function taking an array of 3 numbers for example to build a color, we need to proceed like this :\n```python\n#examples/tuple.py\nfrom autofunccli import cmdfunc\nfrom typing import Tuple\n\ndef color(c:Tuple[int,int,int])->str:\n\treturn \"RGB({},{},{})\".format(c[0],c[1],c[2])\n\nout = cmdfunc(color).main(__name__)\nif(out != None):\n\tprint(out)\n```\nWill create a command like this :\n```console\nusage: tuple.py [-h] c c c\n\npositional arguments:\n  c           : <int,int,int>\n\noptional arguments:\n  -h, --help  show this help message and exit\n\n[RETURN] : <str>\n```\nThis command needs to have a exactly 3 integers as parameters.\nNotice that you can also have different type in the Tuple type arguments.\nThe Tuple type arguments must be in the acceptedTypeArgs array.\n\n#### Boolean\n\nBoolean type can be use to produce the equivalent of the \"action='store_true'\" or \"action='store_false'\" arguments when adding argument to an arg parser.\nWhen using a boolean type, it will automatically be an optional argument with the default False value and using the action store_true, if you specify True as a default value, the parser use the store_false action.\nFor example the following function :\n```python\n#examples/bool.py\nfrom autofunccli import cmdfunc\n\ndef  isItTrue(b:bool):\n\tif(b): return  'yes'\n\telse: return  'no'\n\nout = cmdfunc(isItTrue).main(__name__)\nif(out != None):\n\tprint(out)\n```\nProduce this result :\n```console\nusage: bool.py [-h] [-b]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -b, --b     : <bool>(False)\n\n[RETURN] : <str>\n```\n#### Choices\nChoices imply that the user can only use a set of value as argument.\nIn our case you have to first create a class deriving from the Enum type.\nAnd use it as a type for your argument.\nThe only restriction is to have the same type for each values of the Enum.\nAnd the type be in the acceptedTypeArgs array.\n```python\n#you have to import the Enum class first\n#examples/choices.py\nfrom autofunccli import cmdfunc\n\n#you have to import the Enum class first\nfrom enum import Enum\nclass LEFT_OR_RIGHT(Enum):\n\tLEFT  =  'LEFT'\n\tRIGHT  =  'RIGHT'\ndef  whereAreYouGoing(d:LEFT_OR_RIGHT)->str:\n\tif(d==LEFT_OR_RIGHT.LEFT):\n\t\treturn  'GOING LEFT !'\n\telif(d==LEFT_OR_RIGHT.RIGHT):\n\t\treturn  'GOING RIGHT'\n\nout = cmdfunc(whereAreYouGoing).main(__name__)\nif(out != None):\n\tprint(out)\n```\nProduce the following command :\n```console\nusage: choices.py [-h] {LEFT,RIGHT}\n\npositional arguments:\n  {LEFT,RIGHT}\n\noptional arguments:\n  -h, --help    show this help message and exit\n\n[RETURN] : <str>\n```\n### Merging multiple function to build command line utility\n\nIf you to build a command line utility that works like git for example. You need to use the cmdfusion class that allows to wrap multiple function and call them as one autofunccli.\n\nFor example:\n```python\n#examples/multifunction.py\nfrom autofunccli import cmdfusion\n\ncmd = cmdfusion(\"Test with multiple function.\")\n@cmd.add\ndef plus(a:int,b:int)->int:\n\t\"\"\"\n\tplus operation\n\t:param a: first number\n\t:param b: second number\n\t:return: a+b\n\t\"\"\"\n\treturn a+b\n@cmd.add\ndef minus(a:int,b:int)->int:\n\t\"\"\"\n\tminus operation\n\t:param a: first number\n\t:param b: second number\n\t:return: a-b\n\t\"\"\"\n\treturn a-b\n\nout = cmd.main(__name__)\nif(out != None):\n\tprint(out)\n```\nOutput this help :\n```console\nusage: multifunction.py [-h] {plus,minus}\n\nTest with multiple function.\n\npositional arguments:\n  {plus,minus}\n\noptional arguments:\n  -h, --help    show this help message and exit\n\ndescription:\n        plus            plus operation\n        minus           minus operation\n```\nIn this way, the first argument allow to choose one specific command, for each one of them you can use the '-h' to print the chosen one's help.\n\n### Document your command function\nIf you want to add information about your command or arguments you can use doc string that way :\n\n```python\n#examples/doc.py\nfrom autofunccli import cmdfunc\nfrom typing import List\nfrom functools import reduce\n\ndef  sum(l:List[int],n:bool)->int:\n\t\"\"\"\n\tSum a list of integer.\n\t:param l: List of integer.\n\t:param n: if present, multiply the result by -1\n\t:return: The sum of the list\n\t\"\"\"\n\to =  reduce(lambda  prev,act:prev+act,l)\n\tif(n):o*=-1\n\treturn o\n\nout = cmdfunc(sum).main(__name__)\nif(out != None):\n\tprint(out)\n```\nProduce the following command :\n\n```console\nusage: doc.py [-h] [-n] l [l ...]\n\nSum a list of integer.\n\npositional arguments:\n  l           List of integer. : <List[int]>\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -n, --n     if present, multiply the result by -1 : <bool>(False)\n\n[RETURN] The sum of the list: <int>\n```\n\n## Author\n\nCuadros Nicolas\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CuadrosNicolas/Python-Command-Function", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "autofunccli", "package_url": "https://pypi.org/project/autofunccli/", "platform": "", "project_url": "https://pypi.org/project/autofunccli/", "project_urls": {"Homepage": "https://github.com/CuadrosNicolas/Python-Command-Function"}, "release_url": "https://pypi.org/project/autofunccli/1.0.6/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Transform your function into a command line utility.", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Command Function</h1>\n<h2>Description</h2>\n<p>This project aims to build an easy to use package allowing to use a python function directly as a command line script using the argparse module.</p>\n<p>When building a software, deep learning algorithm or even simple script; most of the time you will end up with one function that do all the job. But when you want to try or use it quickly you will have to use the python in command line or just edit your script each time you want to change your parameters. The best actual way for now is to use the argparse module to wrap your function with a command line interface but you will have to update it each type you change your function.</p>\n<p>The point is that function is already what you want to call, and has already all the informations that you put in the argparse, so why not automate it ?</p>\n<p>And this what this project is about using the function signature directly to produce an argparser.</p>\n<h2>Installation</h2>\n<h3>Via PyPI</h3>\n<p>The project is available on PyPI and you can install using pip :</p>\n<pre>pip install autofunccli\n</pre>\n<h3>Using Github</h3>\n<p>If you want to have the example and run the tests you can clone the repository from Github.</p>\n<pre>git clone https://github.com/CuadrosNicolas/Python-Command-Function\n<span class=\"nb\">cd</span> pythonFunctionCommand\n</pre>\n<p>To run the test :</p>\n<pre>chmod +x ./setup.sh <span class=\"o\">&amp;&amp;</span> setup.sh\n</pre>\n<p>Once you have done that you are ready to build your command function.</p>\n<p>You first need to import the class from the package</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autofunccli</span> <span class=\"kn\">import</span> <span class=\"n\">cmdfunc</span>\n</pre>\n<p>Then you just have to use it to wrap your function and build a command function.</p>\n<h2>How to use</h2>\n<h3>Basic usage</h3>\n<pre><span class=\"c1\">#examples/basic.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autofunccli</span> <span class=\"kn\">import</span> <span class=\"n\">cmdfunc</span>\n<span class=\"c1\">#define a simple plus function</span>\n<span class=\"k\">def</span> <span class=\"nf\">plus</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n<span class=\"c1\">#Use it as a main</span>\n<span class=\"c1\">#.main test if __name__ == '__main__'</span>\n<span class=\"c1\"># if it's the case, parse the command line input</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">cmdfunc</span><span class=\"p\">(</span><span class=\"n\">plus</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can try by running the script</p>\n<pre>python3 basic.py -h\n</pre>\n<p>Which will output :</p>\n<pre><span class=\"go\">usage: basic.py [-h] a b</span>\n\n<span class=\"go\">positional arguments:</span>\n<span class=\"go\">  a           : &lt;str&gt;</span>\n<span class=\"go\">  b           : &lt;str&gt;</span>\n\n<span class=\"go\">optional arguments:</span>\n<span class=\"go\">  -h, --help  show this help message and exit</span>\n\n<span class=\"go\">[RETURN]</span>\n</pre>\n<p>If you try it by running the script with the right arguments like if you want to add 1 and 2</p>\n<pre>python3 basic.py <span class=\"m\">1</span> <span class=\"m\">2</span>\n</pre>\n<p>You will end up with :</p>\n<pre><span class=\"go\">12</span>\n</pre>\n<p>But wait that's not 1+2 ! And it's normal, you have to specify that the arguments are integer to use them as integer. So let's modify the signature and add type annotation</p>\n<pre><span class=\"k\">def</span>  <span class=\"nf\">plus</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"nb\">int</span><span class=\"p\">:</span>\n\t<span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n</pre>\n<p>If you run it again :</p>\n<pre><span class=\"go\">3</span>\n</pre>\n<p>Now it's the right output !\nautofunccli uses the type annotation for parsing the raw input allowing a great flexibility in time if you change your signature.</p>\n<p>Accepted type are the following :</p>\n<pre><span class=\"c1\">#Accepted types for function argument</span>\n<span class=\"n\">acceptedTypes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"nb\">bool</span><span class=\"p\">,</span>\n\t<span class=\"nb\">int</span><span class=\"p\">,</span>\n\t<span class=\"nb\">float</span><span class=\"p\">,</span>\n\t<span class=\"nb\">str</span><span class=\"p\">,</span>\n\t<span class=\"n\">List</span><span class=\"p\">,</span>\n\t<span class=\"n\">Tuple</span>\n<span class=\"p\">]</span>\n<span class=\"c1\">#Accepted types for generic type argument</span>\n<span class=\"n\">acceptedTypeArgs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"nb\">bool</span><span class=\"p\">,</span>\n\t<span class=\"nb\">int</span><span class=\"p\">,</span>\n\t<span class=\"nb\">float</span><span class=\"p\">,</span>\n\t<span class=\"nb\">str</span>\n<span class=\"p\">]</span>\n</pre>\n<p>List,Tuple, Bool and Enum are special cases that you will know more about in the next section.</p>\n<h3>Default Values</h3>\n<p>When using default value for arguments, they becomes optional argument for your command.</p>\n<pre><span class=\"c1\">#examples/default.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autofunccli</span> <span class=\"kn\">import</span> <span class=\"n\">cmdfunc</span>\n\n<span class=\"k\">def</span>  <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">must</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"n\">optional</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"n\">must</span><span class=\"o\">+</span><span class=\"n\">optional</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">cmdfunc</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<h3>List arguments and choices</h3>\n<p>To use List and Tuple you have to import the typing package</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span><span class=\"n\">Tuple</span>\n</pre>\n<h4>List</h4>\n<p>If you want to use list as arguments like using the nargs='+' in command argparse you have to specify your function argument as a List[T] type like in this example :</p>\n<pre><span class=\"c1\">#examples/list.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autofunccli</span> <span class=\"kn\">import</span> <span class=\"n\">cmdfunc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">reduce</span>\n\n<span class=\"k\">def</span>  <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">:</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span><span class=\"o\">-&gt;</span><span class=\"nb\">int</span><span class=\"p\">:</span>\n\t<span class=\"k\">return</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span>  <span class=\"n\">prev</span><span class=\"p\">,</span><span class=\"n\">act</span><span class=\"p\">:</span><span class=\"n\">prev</span><span class=\"o\">+</span><span class=\"n\">act</span><span class=\"p\">,</span><span class=\"n\">l</span><span class=\"p\">)</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">cmdfunc</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Will create a command like this :</p>\n<pre><span class=\"go\">usage: list.py [-h] l [l ...]</span>\n\n<span class=\"go\">positional arguments:</span>\n<span class=\"go\">  l           : &lt;List[int]&gt;</span>\n\n<span class=\"go\">optional arguments:</span>\n<span class=\"go\">  -h, --help  show this help message and exit</span>\n\n<span class=\"go\">[RETURN] : &lt;int&gt;</span>\n</pre>\n<p>The list type argument must be in the acceptedTypeArgs array.</p>\n<h4>Tuple</h4>\n<p>Tuple can be seen as a special case of array with a finite number of element.\nIn our cases if we want to have a function taking an array of 3 numbers for example to build a color, we need to proceed like this :</p>\n<pre><span class=\"c1\">#examples/tuple.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autofunccli</span> <span class=\"kn\">import</span> <span class=\"n\">cmdfunc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Tuple</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">color</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">])</span><span class=\"o\">-&gt;</span><span class=\"nb\">str</span><span class=\"p\">:</span>\n\t<span class=\"k\">return</span> <span class=\"s2\">\"RGB(</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}</span><span class=\"s2\">)\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">cmdfunc</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Will create a command like this :</p>\n<pre><span class=\"go\">usage: tuple.py [-h] c c c</span>\n\n<span class=\"go\">positional arguments:</span>\n<span class=\"go\">  c           : &lt;int,int,int&gt;</span>\n\n<span class=\"go\">optional arguments:</span>\n<span class=\"go\">  -h, --help  show this help message and exit</span>\n\n<span class=\"go\">[RETURN] : &lt;str&gt;</span>\n</pre>\n<p>This command needs to have a exactly 3 integers as parameters.\nNotice that you can also have different type in the Tuple type arguments.\nThe Tuple type arguments must be in the acceptedTypeArgs array.</p>\n<h4>Boolean</h4>\n<p>Boolean type can be use to produce the equivalent of the \"action='store_true'\" or \"action='store_false'\" arguments when adding argument to an arg parser.\nWhen using a boolean type, it will automatically be an optional argument with the default False value and using the action store_true, if you specify True as a default value, the parser use the store_false action.\nFor example the following function :</p>\n<pre><span class=\"c1\">#examples/bool.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autofunccli</span> <span class=\"kn\">import</span> <span class=\"n\">cmdfunc</span>\n\n<span class=\"k\">def</span>  <span class=\"nf\">isItTrue</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nb\">bool</span><span class=\"p\">):</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">):</span> <span class=\"k\">return</span>  <span class=\"s1\">'yes'</span>\n\t<span class=\"k\">else</span><span class=\"p\">:</span> <span class=\"k\">return</span>  <span class=\"s1\">'no'</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">cmdfunc</span><span class=\"p\">(</span><span class=\"n\">isItTrue</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Produce this result :</p>\n<pre><span class=\"go\">usage: bool.py [-h] [-b]</span>\n\n<span class=\"go\">optional arguments:</span>\n<span class=\"go\">  -h, --help  show this help message and exit</span>\n<span class=\"go\">  -b, --b     : &lt;bool&gt;(False)</span>\n\n<span class=\"go\">[RETURN] : &lt;str&gt;</span>\n</pre>\n<h4>Choices</h4>\n<p>Choices imply that the user can only use a set of value as argument.\nIn our case you have to first create a class deriving from the Enum type.\nAnd use it as a type for your argument.\nThe only restriction is to have the same type for each values of the Enum.\nAnd the type be in the acceptedTypeArgs array.</p>\n<pre><span class=\"c1\">#you have to import the Enum class first</span>\n<span class=\"c1\">#examples/choices.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autofunccli</span> <span class=\"kn\">import</span> <span class=\"n\">cmdfunc</span>\n\n<span class=\"c1\">#you have to import the Enum class first</span>\n<span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n<span class=\"k\">class</span> <span class=\"nc\">LEFT_OR_RIGHT</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n\t<span class=\"n\">LEFT</span>  <span class=\"o\">=</span>  <span class=\"s1\">'LEFT'</span>\n\t<span class=\"n\">RIGHT</span>  <span class=\"o\">=</span>  <span class=\"s1\">'RIGHT'</span>\n<span class=\"k\">def</span>  <span class=\"nf\">whereAreYouGoing</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">:</span><span class=\"n\">LEFT_OR_RIGHT</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"nb\">str</span><span class=\"p\">:</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">==</span><span class=\"n\">LEFT_OR_RIGHT</span><span class=\"o\">.</span><span class=\"n\">LEFT</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">return</span>  <span class=\"s1\">'GOING LEFT !'</span>\n\t<span class=\"k\">elif</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">==</span><span class=\"n\">LEFT_OR_RIGHT</span><span class=\"o\">.</span><span class=\"n\">RIGHT</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">return</span>  <span class=\"s1\">'GOING RIGHT'</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">cmdfunc</span><span class=\"p\">(</span><span class=\"n\">whereAreYouGoing</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Produce the following command :</p>\n<pre><span class=\"go\">usage: choices.py [-h] {LEFT,RIGHT}</span>\n\n<span class=\"go\">positional arguments:</span>\n<span class=\"go\">  {LEFT,RIGHT}</span>\n\n<span class=\"go\">optional arguments:</span>\n<span class=\"go\">  -h, --help    show this help message and exit</span>\n\n<span class=\"go\">[RETURN] : &lt;str&gt;</span>\n</pre>\n<h3>Merging multiple function to build command line utility</h3>\n<p>If you to build a command line utility that works like git for example. You need to use the cmdfusion class that allows to wrap multiple function and call them as one autofunccli.</p>\n<p>For example:</p>\n<pre><span class=\"c1\">#examples/multifunction.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autofunccli</span> <span class=\"kn\">import</span> <span class=\"n\">cmdfusion</span>\n\n<span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">cmdfusion</span><span class=\"p\">(</span><span class=\"s2\">\"Test with multiple function.\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">add</span>\n<span class=\"k\">def</span> <span class=\"nf\">plus</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"nb\">int</span><span class=\"p\">:</span>\n\t<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">\tplus operation</span>\n<span class=\"sd\">\t:param a: first number</span>\n<span class=\"sd\">\t:param b: second number</span>\n<span class=\"sd\">\t:return: a+b</span>\n<span class=\"sd\">\t\"\"\"</span>\n\t<span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n<span class=\"nd\">@cmd</span><span class=\"o\">.</span><span class=\"n\">add</span>\n<span class=\"k\">def</span> <span class=\"nf\">minus</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"nb\">int</span><span class=\"p\">:</span>\n\t<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">\tminus operation</span>\n<span class=\"sd\">\t:param a: first number</span>\n<span class=\"sd\">\t:param b: second number</span>\n<span class=\"sd\">\t:return: a-b</span>\n<span class=\"sd\">\t\"\"\"</span>\n\t<span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">b</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Output this help :</p>\n<pre><span class=\"go\">usage: multifunction.py [-h] {plus,minus}</span>\n\n<span class=\"go\">Test with multiple function.</span>\n\n<span class=\"go\">positional arguments:</span>\n<span class=\"go\">  {plus,minus}</span>\n\n<span class=\"go\">optional arguments:</span>\n<span class=\"go\">  -h, --help    show this help message and exit</span>\n\n<span class=\"go\">description:</span>\n<span class=\"go\">        plus            plus operation</span>\n<span class=\"go\">        minus           minus operation</span>\n</pre>\n<p>In this way, the first argument allow to choose one specific command, for each one of them you can use the '-h' to print the chosen one's help.</p>\n<h3>Document your command function</h3>\n<p>If you want to add information about your command or arguments you can use doc string that way :</p>\n<pre><span class=\"c1\">#examples/doc.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autofunccli</span> <span class=\"kn\">import</span> <span class=\"n\">cmdfunc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">reduce</span>\n\n<span class=\"k\">def</span>  <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">:</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span><span class=\"n\">n</span><span class=\"p\">:</span><span class=\"nb\">bool</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"nb\">int</span><span class=\"p\">:</span>\n\t<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">\tSum a list of integer.</span>\n<span class=\"sd\">\t:param l: List of integer.</span>\n<span class=\"sd\">\t:param n: if present, multiply the result by -1</span>\n<span class=\"sd\">\t:return: The sum of the list</span>\n<span class=\"sd\">\t\"\"\"</span>\n\t<span class=\"n\">o</span> <span class=\"o\">=</span>  <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span>  <span class=\"n\">prev</span><span class=\"p\">,</span><span class=\"n\">act</span><span class=\"p\">:</span><span class=\"n\">prev</span><span class=\"o\">+</span><span class=\"n\">act</span><span class=\"p\">,</span><span class=\"n\">l</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span><span class=\"n\">o</span><span class=\"o\">*=-</span><span class=\"mi\">1</span>\n\t<span class=\"k\">return</span> <span class=\"n\">o</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">cmdfunc</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Produce the following command :</p>\n<pre><span class=\"go\">usage: doc.py [-h] [-n] l [l ...]</span>\n\n<span class=\"go\">Sum a list of integer.</span>\n\n<span class=\"go\">positional arguments:</span>\n<span class=\"go\">  l           List of integer. : &lt;List[int]&gt;</span>\n\n<span class=\"go\">optional arguments:</span>\n<span class=\"go\">  -h, --help  show this help message and exit</span>\n<span class=\"go\">  -n, --n     if present, multiply the result by -1 : &lt;bool&gt;(False)</span>\n\n<span class=\"go\">[RETURN] The sum of the list: &lt;int&gt;</span>\n</pre>\n<h2>Author</h2>\n<p>Cuadros Nicolas</p>\n\n          </div>"}, "last_serial": 7167890, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "9ed63aff5d69d416c72299ccab315ad4", "sha256": "e74756dc4f51cfe2741546e247c9e34246a8ea71dba6334849d7082212f811a0"}, "downloads": -1, "filename": "autofunccli-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9ed63aff5d69d416c72299ccab315ad4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4886, "upload_time": "2019-11-07T14:40:00", "upload_time_iso_8601": "2019-11-07T14:40:00.883600Z", "url": "https://files.pythonhosted.org/packages/60/3a/f258b42546e037a211ab3e9684bcf719fea2e4ddf3f43bfdc2c1db659926/autofunccli-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7776abca41d1624b980197fdf42602f8", "sha256": "f61d88667ceef14cadde3437225a08fe8ede210799687c23697db56453cd4c6a"}, "downloads": -1, "filename": "autofunccli-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7776abca41d1624b980197fdf42602f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4924, "upload_time": "2019-11-07T14:40:03", "upload_time_iso_8601": "2019-11-07T14:40:03.057233Z", "url": "https://files.pythonhosted.org/packages/d9/b8/cfe12b997e4308bd34a388dacf2c91d3e54da6b38754e3c9b2c426dda456/autofunccli-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "9fdb644cc7108b3a4b2e20d398ac6fe2", "sha256": "04c0ba45af12d020b22f025674bdca47ace752bfe55d49bf20365749c0dc1699"}, "downloads": -1, "filename": "autofunccli-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9fdb644cc7108b3a4b2e20d398ac6fe2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10221, "upload_time": "2019-11-07T14:46:00", "upload_time_iso_8601": "2019-11-07T14:46:00.636316Z", "url": "https://files.pythonhosted.org/packages/bf/29/e92165ba065c17ad0f9fe92a7a679ac33aea3dbda4f37a442fded85e5849/autofunccli-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7ac9efaad5d3537f5e618316eb3026d", "sha256": "6c30bc757486313dc5e9f6cab37edf1928c47a5ec0fa9d5a2eeea49551d65088"}, "downloads": -1, "filename": "autofunccli-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b7ac9efaad5d3537f5e618316eb3026d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10434, "upload_time": "2019-11-07T14:46:02", "upload_time_iso_8601": "2019-11-07T14:46:02.194178Z", "url": "https://files.pythonhosted.org/packages/ad/61/1090a0a436bb902b6638a51192091d3dd8f35be5174809e97d39d98eee64/autofunccli-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "faf7efd01f9b67159fb3fa89fa375e10", "sha256": "22db671f06a6613aa011d44291b1138a2dc035d7bd210112c01d66db803d7881"}, "downloads": -1, "filename": "autofunccli-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "faf7efd01f9b67159fb3fa89fa375e10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10223, "upload_time": "2019-11-07T14:47:57", "upload_time_iso_8601": "2019-11-07T14:47:57.708244Z", "url": "https://files.pythonhosted.org/packages/58/83/14239b1dd19737bb2c6015bf4adea09886ade3b95af60455eb211b82cf3b/autofunccli-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e40372c9ff02a927d35e8d2be5f39d53", "sha256": "4ca9e20949dbffe6e6ca84e6928035ececdbe1fb188827f38c8ffd7a9f3adde1"}, "downloads": -1, "filename": "autofunccli-1.0.2.tar.gz", "has_sig": false, "md5_digest": "e40372c9ff02a927d35e8d2be5f39d53", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10436, "upload_time": "2019-11-07T14:47:59", "upload_time_iso_8601": "2019-11-07T14:47:59.435466Z", "url": "https://files.pythonhosted.org/packages/7e/a2/c250ed391be79e3b1af99145b110c30166a0a70a5fac6bda0e3ba7292ba4/autofunccli-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "b4b681fa50f26a2454415fb8a50d037a", "sha256": "a9abec3d127c46f30a1ac28bd3b1cac11328928605e6f9e22793f3186e1dfa90"}, "downloads": -1, "filename": "autofunccli-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b4b681fa50f26a2454415fb8a50d037a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10224, "upload_time": "2019-11-07T14:50:06", "upload_time_iso_8601": "2019-11-07T14:50:06.335219Z", "url": "https://files.pythonhosted.org/packages/c2/7c/451be799624f1a74fb3d46e44097ba5df103380ff6589310573d9dae9f14/autofunccli-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c38e9278ca2c5473a5679b45e673745a", "sha256": "1803704b832145e29afb8de9231dd51293457540a0071bf0ca48b911517327c4"}, "downloads": -1, "filename": "autofunccli-1.0.3.tar.gz", "has_sig": false, "md5_digest": "c38e9278ca2c5473a5679b45e673745a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10441, "upload_time": "2019-11-07T14:50:08", "upload_time_iso_8601": "2019-11-07T14:50:08.009285Z", "url": "https://files.pythonhosted.org/packages/eb/2a/c3496019b498223c331d696a69f7eea4b4c7b7b234a1567710e58b635651/autofunccli-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "ed5f63b775df1a34dad6bb25bbc6cfca", "sha256": "3b135d9b02bbffbb7f5d3d1207bb0696234f0e4c9388b08c563ddefdc39e8d75"}, "downloads": -1, "filename": "autofunccli-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ed5f63b775df1a34dad6bb25bbc6cfca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10226, "upload_time": "2019-11-07T14:51:10", "upload_time_iso_8601": "2019-11-07T14:51:10.654842Z", "url": "https://files.pythonhosted.org/packages/6a/78/09392e310b7f79be23fcc09141fecb67b8fc2b90f1921c22cad2c1c0bec0/autofunccli-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a74713f7659785d2e4bf2f68a773d14b", "sha256": "64ad7ff8b4f4363000dfba8b273a97f5f9418178219bf675d93015f94c193dd8"}, "downloads": -1, "filename": "autofunccli-1.0.4.tar.gz", "has_sig": false, "md5_digest": "a74713f7659785d2e4bf2f68a773d14b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10442, "upload_time": "2019-11-07T14:51:12", "upload_time_iso_8601": "2019-11-07T14:51:12.438210Z", "url": "https://files.pythonhosted.org/packages/4a/1f/df9cf06aa22850fbfb03d8db3609c9323e22fc0d52125bbd462d34a230ef/autofunccli-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "0249bb5d0516ad924b4bf8908550b81c", "sha256": "5fb7b955cce8c191af6e3432f52e51533acaf7ba3d1373902c4cacc7dd0086ff"}, "downloads": -1, "filename": "autofunccli-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "0249bb5d0516ad924b4bf8908550b81c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10221, "upload_time": "2019-11-07T14:58:21", "upload_time_iso_8601": "2019-11-07T14:58:21.074641Z", "url": "https://files.pythonhosted.org/packages/f1/a4/7308234a2188f594b4f7138a4ef1ffcb8e94c409b6d46585b260079d9069/autofunccli-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37b472d887825921a4d366c14aabe91d", "sha256": "78c4f79fba054eecc4aaec4bf03a6935c042e728b3c396914c65b2297f6f883d"}, "downloads": -1, "filename": "autofunccli-1.0.5.tar.gz", "has_sig": false, "md5_digest": "37b472d887825921a4d366c14aabe91d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10458, "upload_time": "2019-11-07T14:58:22", "upload_time_iso_8601": "2019-11-07T14:58:22.746011Z", "url": "https://files.pythonhosted.org/packages/fd/94/f85b35e272cc1e2bd4fb2b5ad8b1487a3b9ab6310576be80898f5de55db5/autofunccli-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "e603aef46363e4dd19719556fc875076", "sha256": "687d559adc3571f5bf9114885b7156c0582830b30e4971b1a6fab6d2cebd53d0"}, "downloads": -1, "filename": "autofunccli-1.0.6-py3.6.egg", "has_sig": false, "md5_digest": "e603aef46363e4dd19719556fc875076", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 18135, "upload_time": "2020-05-04T21:34:06", "upload_time_iso_8601": "2020-05-04T21:34:06.294720Z", "url": "https://files.pythonhosted.org/packages/cf/8f/1a57e56e8021499c2e01108954f55d39e9fabc622d270c82d44b47c33b85/autofunccli-1.0.6-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "93ef0e12c5bbef91a7ca418998135f88", "sha256": "bd0d7aecf280cea61e9c6dad0a4793ca599d191f911d1edcdeaa8796fb30aac7"}, "downloads": -1, "filename": "autofunccli-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "93ef0e12c5bbef91a7ca418998135f88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10219, "upload_time": "2019-11-07T15:00:22", "upload_time_iso_8601": "2019-11-07T15:00:22.351169Z", "url": "https://files.pythonhosted.org/packages/37/2a/705626b557067184b63cc0f0ba5129326fb38f51fd8f3f2e3a46d272d769/autofunccli-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa66875609d40647d4c01754e3fd4ce7", "sha256": "0420b7062d1a2bdabae80a4e6ce446f952db9fa7318982dd28fe3ba640237a0e"}, "downloads": -1, "filename": "autofunccli-1.0.6.tar.gz", "has_sig": false, "md5_digest": "aa66875609d40647d4c01754e3fd4ce7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10445, "upload_time": "2019-11-07T15:00:24", "upload_time_iso_8601": "2019-11-07T15:00:24.438782Z", "url": "https://files.pythonhosted.org/packages/db/71/e33fa1843c5743b331bc8048f04b0327e75b2c5cc4ed2174d9c3ff35093e/autofunccli-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e603aef46363e4dd19719556fc875076", "sha256": "687d559adc3571f5bf9114885b7156c0582830b30e4971b1a6fab6d2cebd53d0"}, "downloads": -1, "filename": "autofunccli-1.0.6-py3.6.egg", "has_sig": false, "md5_digest": "e603aef46363e4dd19719556fc875076", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 18135, "upload_time": "2020-05-04T21:34:06", "upload_time_iso_8601": "2020-05-04T21:34:06.294720Z", "url": "https://files.pythonhosted.org/packages/cf/8f/1a57e56e8021499c2e01108954f55d39e9fabc622d270c82d44b47c33b85/autofunccli-1.0.6-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "93ef0e12c5bbef91a7ca418998135f88", "sha256": "bd0d7aecf280cea61e9c6dad0a4793ca599d191f911d1edcdeaa8796fb30aac7"}, "downloads": -1, "filename": "autofunccli-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "93ef0e12c5bbef91a7ca418998135f88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10219, "upload_time": "2019-11-07T15:00:22", "upload_time_iso_8601": "2019-11-07T15:00:22.351169Z", "url": "https://files.pythonhosted.org/packages/37/2a/705626b557067184b63cc0f0ba5129326fb38f51fd8f3f2e3a46d272d769/autofunccli-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa66875609d40647d4c01754e3fd4ce7", "sha256": "0420b7062d1a2bdabae80a4e6ce446f952db9fa7318982dd28fe3ba640237a0e"}, "downloads": -1, "filename": "autofunccli-1.0.6.tar.gz", "has_sig": false, "md5_digest": "aa66875609d40647d4c01754e3fd4ce7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10445, "upload_time": "2019-11-07T15:00:24", "upload_time_iso_8601": "2019-11-07T15:00:24.438782Z", "url": "https://files.pythonhosted.org/packages/db/71/e33fa1843c5743b331bc8048f04b0327e75b2c5cc4ed2174d9c3ff35093e/autofunccli-1.0.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:17 2020"}