{"info": {"author": "Oliver Scott", "author_email": "oliver.scott.17@ucl.ac.uk", "bugtrack_url": null, "classifiers": [], "description": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/img/scaffoldgraph.jpg?raw=true\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH          | STG         |\n|--------------------------------------|-------------|-------------|-------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -           | -           |\n| Computes HierS Networks              | X           | -           | -           | -           |\n| Computes Scaffold Trees              | X           | X           | X           | X           |\n| Command Line Interface               | X           | X           | -           | X           |\n| Graphical Interface                  | -           | -           | X           | -           |\n| Accessible Library                   | X           | -           | -           | -           |\n| Results can be computed in parallel  | X           | X           | -           | -           |\n| Benchmark for 150,000 molecules `*`  | 15m 25s     | 27m 6s      | -           | -           |\n| Limit on input molecules             | N/A `**`    | 10,000,000  | 200,000`***`| 10,000,000  |\n\n\n`*` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`**` Limited by available memory\n\n`***` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently only supports Python 3\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\npip install scaffoldgraph\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analagous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'cutstom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nPending...", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/UCLCheminformatics/scaffoldgraph/archive/1.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/UCLCheminformatics/scaffoldgraph", "keywords": "rdkit,networkx,cheminformatics,scaffolds", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ScaffoldGraph", "package_url": "https://pypi.org/project/ScaffoldGraph/", "platform": "", "project_url": "https://pypi.org/project/ScaffoldGraph/", "project_urls": {"Download": "https://github.com/UCLCheminformatics/scaffoldgraph/archive/1.0.1.tar.gz", "Homepage": "https://github.com/UCLCheminformatics/scaffoldgraph"}, "release_url": "https://pypi.org/project/ScaffoldGraph/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "ScaffoldGraph is an open-source cheminformatics library, built using RDKit and NetworkX for generating scaffold networks and scaffold trees.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://anaconda.org/UCLCheminformatics/scaffoldgraph\" rel=\"nofollow\"><img alt=\"Conda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1b66c9fc3456c5067d05489b8f73077ab71bf49/68747470733a2f2f616e61636f6e64612e6f72672f75636c6368656d696e666f726d61746963732f73636166666f6c6467726170682f6261646765732f696e7374616c6c65722f636f6e64612e737667\"></a>\n<a href=\"https://github.com/UCLCheminformatics/ScaffoldGraph/releases\" rel=\"nofollow\"><img alt=\"Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42e447f6bd84e261dbbf7973dc858afd03cb962d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73636166666f6c6467726170682e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://travis-ci.org/UCLCheminformatics/ScaffoldGraph\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6bbb10a78ca374d54d35cfe51d1049287b9cc9a0/68747470733a2f2f7472617669732d63692e6f72672f55434c4368656d696e666f726d61746963732f53636166666f6c6447726170682e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/uclcheminformatics/scaffoldgraph#contributing\" rel=\"nofollow\"><img alt=\"Contributing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/793ef3fadef48113e66f3c652ebc9b591bcb1745/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<h1>\u232c ScaffoldGraph  \u232c</h1>\n<p><strong>ScaffoldGraph</strong> is an open-source cheminformatics library, built using <a href=\"https://www.rdkit.org/\" rel=\"nofollow\">RDKit</a> and\n<a href=\"https://networkx.github.io/\" rel=\"nofollow\">NetworkX</a>, for the generation and analysis of scaffold networks and scaffold trees.</p>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35bc0fe0bdfa47c0c3240103a4201bad7ae982a8/68747470733a2f2f6769746875622e636f6d2f55434c4368656d696e666f726d61746963732f53636166666f6c6447726170682f626c6f622f6d61737465722f696d672f73636166666f6c6467726170682e6a70673f7261773d74727565\" width=\"80%\">\n</p>\n<p><a href=\"https://github.com/UCLCheminformatics/ScaffoldGraph#features\" rel=\"nofollow\">Features</a> |\n<a href=\"https://github.com/UCLCheminformatics/ScaffoldGraph#installation\" rel=\"nofollow\">Installation</a> |\n<a href=\"https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start\" rel=\"nofollow\">Quick-start</a> |\n<a href=\"https://github.com/UCLCheminformatics/ScaffoldGraph#contributing\" rel=\"nofollow\">Contributing</a> |\n<a href=\"https://github.com/UCLCheminformatics/ScaffoldGraph#references\" rel=\"nofollow\">References</a> |\n<a href=\"https://github.com/UCLCheminformatics/ScaffoldGraph#citation\" rel=\"nofollow\">Citation</a></p>\n<h2>Features</h2>\n<ul>\n<li><strong>Scaffold Network generation</strong> (Varin, 2011)\n<ul>\n<li>Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\nfor a set of input molecules. The output is a directed acyclic graph of molecular scaffolds</li>\n</ul>\n</li>\n<li><strong>HierS Network Generation</strong> (Wilkens, 2005)\n<ul>\n<li>Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\nwithout dissecting fused ring-systems</li>\n</ul>\n</li>\n<li><strong>Scaffold Tree generation</strong> (Schuffenhauer, 2007)\n<ul>\n<li>Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\nThe output is a tree of molecular scaffolds</li>\n</ul>\n</li>\n<li><strong>Murcko Fragment generation</strong> (Bemis, 1996)\n<ul>\n<li>Generate a set of murcko fragments for a molecule through the iterative removal of available rings.</li>\n</ul>\n</li>\n<li><strong>Compound Set Enrichment</strong> (Varin, 2010, 2011)\n<ul>\n<li>Identify active chemical series from primary screening data</li>\n</ul>\n</li>\n</ul>\n<h3>Comparison to existing software</h3>\n<ul>\n<li>Scaffold Network Generator (SNG) (Matlock 2013)</li>\n<li>Scaffold Hunter (SH) (Wetzel, 2009)</li>\n<li>Scaffold Tree Generator (STG) (SH CLI predecessor)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>SG</th>\n<th>SNG</th>\n<th>SH</th>\n<th>STG</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computes Scaffold Networks</td>\n<td>X</td>\n<td>X</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Computes HierS Networks</td>\n<td>X</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Computes Scaffold Trees</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n</tr>\n<tr>\n<td>Command Line Interface</td>\n<td>X</td>\n<td>X</td>\n<td>-</td>\n<td>X</td>\n</tr>\n<tr>\n<td>Graphical Interface</td>\n<td>-</td>\n<td>-</td>\n<td>X</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Accessible Library</td>\n<td>X</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Results can be computed in parallel</td>\n<td>X</td>\n<td>X</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Benchmark for 150,000 molecules <code>*</code></td>\n<td>15m 25s</td>\n<td>27m 6s</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Limit on input molecules</td>\n<td>N/A <code>**</code></td>\n<td>10,000,000</td>\n<td>200,000<code>***</code></td>\n<td>10,000,000</td>\n</tr></tbody></table>\n<p><code>*</code> Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find\nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.</p>\n<p><code>**</code> Limited by available memory</p>\n<p><code>***</code> Graphical interface has an upper limit of 2,000 scaffolds</p>\n<hr>\n<h2>Installation</h2>\n<ul>\n<li>ScaffoldGraph currently only supports Python 3</li>\n</ul>\n<h3>Install with conda (recommended)</h3>\n<pre><code>conda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n</code></pre>\n<h3>Install with pip</h3>\n<pre><code>pip install scaffoldgraph\n</code></pre>\n<p><strong>Warning</strong>: rdkit cannot be installed with pip, so must be installed through <a href=\"'https://www.rdkit.org/docs/Install.html'\" rel=\"nofollow\">other means</a></p>\n<hr>\n<h2>Quick Start</h2>\n<h3>CLI usage</h3>\n<p>The ScaffoldGraph CLI is almost analagous to SNG consisting of a two step process (Generate --&gt; Aggregate).</p>\n<p>ScaffoldGraph can be invoked from the command-line using the following command:</p>\n<pre><span class=\"gp\">$</span> scaffoldgraph &lt;command&gt; &lt;input-file&gt; &lt;options&gt;\n</pre>\n<p>Where \"command\" is one of: tree, network, hiers, aggregate or select.</p>\n<ul>\n<li>\n<h4>Generating Scaffold Networks/Trees</h4>\n<p>The first step of the process is to generate an intermediate scaffold graph. The generation commands\nare: network, hiers and tree</p>\n<p>For example, if a user would like to generate a network from two files:</p>\n<pre><span class=\"gp\">$</span> ls\n<span class=\"go\">file_1.sdf  file_2.sdf</span>\n</pre>\n<p>They would first use the commands:</p>\n<pre><span class=\"gp\">$</span> scaffoldgraph network file_1.sdf file_1.tmp\n<span class=\"gp\">$</span> scaffoldgraph network file_2.sdf file_2.tmp\n</pre>\n<p>Further options:</p>\n<pre><code>--max-rings, -m : ignore molecules with # rings &gt; N (default: 10)\n</code></pre>\n</li>\n<li>\n<h4>Aggregating Scaffold Graphs</h4>\n<p>The second step of the process is aggregating the temporary files into a combined graph representation.</p>\n<pre><span class=\"gp\">$</span> scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n</pre>\n<p>The final network is now available in 'file.tsv'. Output formats are explained below.</p>\n<p>Further options:</p>\n<pre><code>--map-mols, -m  &lt;file&gt;   : generate a file mapping molecule IDs to scaffold IDs \n--map-annotations &lt;file&gt; : generate a file mapping scaffold IDs to annotations\n--sdf                    : write the output as an SDF file\n</code></pre>\n</li>\n<li>\n<h4>Selecting Subsets</h4>\n<p>ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\ni.e. selecting only scaffolds for molecules of interest.</p>\n<p>This command can only be performed on an aggregated graph (Not SDF).</p>\n<pre><span class=\"gp\">$</span> scaffoldgraph <span class=\"k\">select</span> &lt;graph input-file&gt; &lt;input molecules&gt; &lt;output-file&gt; &lt;options&gt;\n</pre>\n<p>Options:</p>\n<pre><code>&lt;graph input-file&gt;   : A TSV graph constructed using the aggregate command\n&lt;input molecules&gt;    : Input query file (SDF, SMILES)\n&lt;output-file&gt;        : Write results to specified file\n--sdf                : Write the output as an SDF file\n</code></pre>\n</li>\n<li>\n<h4>Input Formats</h4>\n<p>ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\nusing <a href=\"http://openbabel.org/wiki/Main_Page\" rel=\"nofollow\">OpenBabel</a>.</p>\n<ul>\n<li>\n<h5>Smiles Format:</h5>\n</li>\n</ul>\n<p>ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\nidentifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.</p>\n<p>Example SMILES file:</p>\n<pre>CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\nCC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\nCN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\nN=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n...\n</pre>\n<ul>\n<li>\n<h5>SDF Format:</h5>\n</li>\n</ul>\n<p>ScaffoldGraph expects an <a href=\"https://en.wikipedia.org/wiki/Chemical_table_file\" rel=\"nofollow\">SDF</a> file, where the molecule\nidentifier is specified in the title line. If the title line is blank, then a hash of the molecule\nwill be used as an identifier.</p>\n<p>Note: selecting subsets of a graph will not be possible if a name is not supplied</p>\n</li>\n<li>\n<h4>Output Formats</h4>\n<ul>\n<li>\n<h5>TSV Format (default)</h5>\n</li>\n</ul>\n<p>The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:</p>\n<ol>\n<li>Number of rings (hierarchy)</li>\n<li>Scaffold SMILES</li>\n<li>Sub-scaffold SMILES</li>\n<li>Molecule ID(s) (top-level scaffolds (Murcko))</li>\n</ol>\n<p>The aggregate command produces a tsv containing 4 columns</p>\n<ol>\n<li>Scaffold ID</li>\n<li>Number of rings (hierarchy)</li>\n<li>Scaffold SMILES</li>\n<li>Sub-scaffold IDs</li>\n</ol>\n<ul>\n<li>\n<h5>SDF Format</h5>\n</li>\n</ul>\n<p>An SDF file can be produced by the aggregate and select commands. This SDF is\nformatted according to the SDF specification with added property fields:</p>\n<ol>\n<li>TITLE field = scaffold ID</li>\n<li>SUBSCAFFOLDS field = list of sub-scaffold IDs</li>\n<li>HIERARCHY field = number of rings</li>\n<li>SMILES field = scaffold canonical SMILES</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3>Library usage</h3>\n<p>ScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">scaffoldgraph</span> <span class=\"k\">as</span> <span class=\"nn\">sg</span>\n\n<span class=\"c1\"># construct a scaffold network from an SDF file</span>\n<span class=\"n\">network</span> <span class=\"o\">=</span> <span class=\"n\">sg</span><span class=\"o\">.</span><span class=\"n\">ScaffoldNetwork</span><span class=\"o\">.</span><span class=\"n\">from_sdf</span><span class=\"p\">(</span><span class=\"s1\">'my_sdf_file.sdf'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># construct a scaffold tree from a SMILES file</span>\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">sg</span><span class=\"o\">.</span><span class=\"n\">ScaffoldTree</span><span class=\"o\">.</span><span class=\"n\">from_smiles</span><span class=\"p\">(</span><span class=\"s1\">'my_smiles_file.smi'</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h2>Advanced Usage</h2>\n<ul>\n<li>\n<p><strong>Multi-processing</strong></p>\n<p>It is simple to construct a graph from multiple input source in parallel,\nusing the concurrent.futures module and the sg.utils.aggregate function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">ProcessPoolExecutor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">import</span> <span class=\"nn\">scaffoldgraph</span> <span class=\"k\">as</span> <span class=\"nn\">sg</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n    \n<span class=\"n\">directory</span> <span class=\"o\">=</span> <span class=\"s1\">'./data'</span>\n<span class=\"n\">sdf_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">'.sdf'</span><span class=\"p\">)]</span>\n    \n<span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">sg</span><span class=\"o\">.</span><span class=\"n\">ScaffoldNetwork</span><span class=\"o\">.</span><span class=\"n\">from_sdf</span><span class=\"p\">,</span> <span class=\"n\">ring_cutoff</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n      \n<span class=\"n\">graphs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">with</span> <span class=\"n\">ProcessPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n    <span class=\"n\">futures</span> <span class=\"o\">=</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">sdf_files</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">future</span> <span class=\"ow\">in</span> <span class=\"n\">futures</span><span class=\"p\">:</span>\n        <span class=\"n\">graphs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">)</span>\n      \n<span class=\"n\">network</span> <span class=\"o\">=</span> <span class=\"n\">sg</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">aggregate</span><span class=\"p\">(</span><span class=\"n\">graphs</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p><strong>Creating custom scaffold prioritisation rules</strong></p>\n<p>If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\nRules can be defined by subclassing one of four rule classes:</p>\n<p>BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule</p>\n<p>When subclassing a name property must be defined and either a condition, get_property or filter function.\nExamples are shown below:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">scaffoldgraph</span> <span class=\"k\">as</span> <span class=\"nn\">sg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scaffoldgraph.prioritization</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n  \n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Scaffold filter rule (must implement name and condition)</span>\n<span class=\"sd\">The filter will retain all scaffolds which return a True condition</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomRule01</span><span class=\"p\">(</span><span class=\"n\">ScaffoldFilterRule</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Do not remove rings with &gt;= 12 atoms if there are smaller rings to remove\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">condition</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">):</span>\n        <span class=\"n\">removed_ring</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">rings</span><span class=\"p\">[</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">removed_ring_idx</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">removed_ring</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">&lt;</span> <span class=\"mi\">12</span>\n          \n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'custom rule 01'</span>\n        \n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Scaffold min/max filter rule (must implement name and get_property)</span>\n<span class=\"sd\">The filter will retain all scaffolds with the min/max property value</span>\n<span class=\"sd\">\"\"\"</span>\n  \n<span class=\"k\">class</span> <span class=\"nc\">CustomRule02</span><span class=\"p\">(</span><span class=\"n\">ScaffoldMinFilterRule</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Smaller rings are removed first\"\"\"</span>\n  \n    <span class=\"k\">def</span> <span class=\"nf\">get_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">rings</span><span class=\"p\">[</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">removed_ring_idx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">size</span>\n          \n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'custom rule 02'</span>\n      \n    \n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Scaffold base filter rule (must implement name and filter)</span>\n<span class=\"sd\">The filter method must return a list of filtered parent scaffolds</span>\n<span class=\"sd\">This rule is used when a more complex rule is required, this example</span>\n<span class=\"sd\">defines a tiebreaker rule. Only one scaffold must be left at the end</span>\n<span class=\"sd\">of all filter rules in a rule set</span>\n<span class=\"sd\">\"\"\"</span>\n  \n<span class=\"k\">class</span> <span class=\"nc\">CustomRule03</span><span class=\"p\">(</span><span class=\"n\">BaseScaffoldFilterRule</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Tie-breaker rule (alphabetical)\"\"\"</span>\n  \n    <span class=\"k\">def</span> <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"n\">parents</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">smiles</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n  \n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'cutstom rule 03'</span>  \n</pre>\n<p>Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:</p>\n<pre><span class=\"n\">ruleset</span> <span class=\"o\">=</span> <span class=\"n\">ScaffoldRuleSet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'custom rules'</span><span class=\"p\">)</span>\n<span class=\"n\">ruleset</span><span class=\"o\">.</span><span class=\"n\">add_rule</span><span class=\"p\">(</span><span class=\"n\">CustomRule01</span><span class=\"p\">())</span>\n<span class=\"n\">ruleset</span><span class=\"o\">.</span><span class=\"n\">add_rule</span><span class=\"p\">(</span><span class=\"n\">CustomRule02</span><span class=\"p\">())</span>\n<span class=\"n\">ruleset</span><span class=\"o\">.</span><span class=\"n\">add_rule</span><span class=\"p\">(</span><span class=\"n\">CustomRule03</span><span class=\"p\">())</span>\n \n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">sg</span><span class=\"o\">.</span><span class=\"n\">ScaffoldTree</span><span class=\"o\">.</span><span class=\"n\">from_sdf</span><span class=\"p\">(</span><span class=\"s1\">'my_sdf_file.sdf'</span><span class=\"p\">,</span> <span class=\"n\">prioritization_rules</span><span class=\"o\">=</span><span class=\"n\">ruleset</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<hr>\n<h2>Contributing</h2>\n<p>Contributions to ScaffoldGraph will most likely fall into the following categories:</p>\n<ol>\n<li>Implementing a new Feature:\n<ul>\n<li>New Features that fit into the scope of this package will be accepted. If you are unsure about the\nidea/design/implementation, feel free to post an issue.</li>\n</ul>\n</li>\n<li>Fixing a Bug:\n<ul>\n<li>Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\nRequest please provide a clear description of the encountered bug. If unsure feel free to post an issue</li>\n</ul>\n</li>\n</ol>\n<p>Please send Pull Requests to:\n<a href=\"http://github.com/UCLCheminformatics/ScaffoldGraph\" rel=\"nofollow\">http://github.com/UCLCheminformatics/ScaffoldGraph</a></p>\n<h3>Testing</h3>\n<p>ScaffoldGraphs testing is located under <code>test/</code>. Run all tests using:</p>\n<pre><code>$ python setup.py test\n</code></pre>\n<p>or run an individual test: <code>pytest --no-cov tests/core</code></p>\n<p>When contributing new features please include appropriate test files</p>\n<h3>Continuous Integration</h3>\n<p>ScaffoldGraph uses Travis CI for continuous integration</p>\n<hr>\n<h2>References</h2>\n<ul>\n<li>Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.</li>\n<li>Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656</li>\n<li>Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.</li>\n<li>Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.</li>\n<li>Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.</li>\n<li>Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.</li>\n<li>Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.</li>\n</ul>\n<hr>\n<h2>Citation</h2>\n<p>Pending...</p>\n\n          </div>"}, "last_serial": 6849758, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f9815d3f4310930cc182da167618ab09", "sha256": "7d64f1db61997f04ac4607701cdf1b1db978085cb56b1ec87cbda1a7b58ed11a"}, "downloads": -1, "filename": "ScaffoldGraph-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f9815d3f4310930cc182da167618ab09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35336, "upload_time": "2019-12-16T14:19:56", "upload_time_iso_8601": "2019-12-16T14:19:56.348212Z", "url": "https://files.pythonhosted.org/packages/0c/aa/8cc903a44ada4e3eb23abc8ac5116078a8f98604b82439ece750c919e96e/ScaffoldGraph-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "9304c541052dedb8a8ab9defed3a42b4", "sha256": "cdeb123b2e0fb9ef084ff888643f78322cf299b22dc5c28fac9002dc17a1dfc8"}, "downloads": -1, "filename": "ScaffoldGraph-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9304c541052dedb8a8ab9defed3a42b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38119, "upload_time": "2020-03-20T13:14:49", "upload_time_iso_8601": "2020-03-20T13:14:49.498560Z", "url": "https://files.pythonhosted.org/packages/52/7e/e7ca1417e5b0a7e84f2d774ee16b412e248d372f1bdfdd1b0a11a29b6b5c/ScaffoldGraph-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9304c541052dedb8a8ab9defed3a42b4", "sha256": "cdeb123b2e0fb9ef084ff888643f78322cf299b22dc5c28fac9002dc17a1dfc8"}, "downloads": -1, "filename": "ScaffoldGraph-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9304c541052dedb8a8ab9defed3a42b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38119, "upload_time": "2020-03-20T13:14:49", "upload_time_iso_8601": "2020-03-20T13:14:49.498560Z", "url": "https://files.pythonhosted.org/packages/52/7e/e7ca1417e5b0a7e84f2d774ee16b412e248d372f1bdfdd1b0a11a29b6b5c/ScaffoldGraph-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:13 2020"}