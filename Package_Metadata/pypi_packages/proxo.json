{"info": {"author": "Kriszti\u00e1n Sz\u0171cs", "author_email": "szucs.krisztian@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "|Build Status|\n\nProxo\n=====\n\nExtend protobuf message with custom methods properties and additional\nattributes\n\nTL;DR\n-----\n\n.. code:: python\n\n\n    from proxo import MessageProxy, encode, decode\n\n    class Person(MessageProxy):\n        proto = addressbook_pb2.Person  # it can be more complex, like pattern matching, see below\n\n        @property\n        def firstname(self):\n            return self.name.split(' ')[0]\n\n\n    p = Person(name='Test Me')\n    assert p.firstname == 'Test'\n    assert decode(encode(p)) == p\n\nUsage\n-----\n\nGiven the addressbook protobuf definition\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: protobuf\n\n\n    package tutorial;\n\n    message Person {\n      required string name = 1;\n      required int32 id = 2;\n      optional string email = 3;\n\n      enum PhoneType {\n        MOBILE = 0;\n        HOME = 1;\n        WORK = 2;\n      }\n\n      message PhoneNumber {\n        required string number = 1;\n        optional PhoneType type = 2 [default = HOME];\n      }\n\n      repeated PhoneNumber phone = 4;\n    }\n\n    message AddressBook {\n      repeated Person person = 1;\n    }\n\nThe traditional way\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n\n    import addressbook_pb2\n\n    person = addressbook_pb2.Person()\n    person.id = 1234\n    person.name = \"John Doe\"\n    person.email = \"jdoe@example.com\"\n    phone = person.phone.add()\n    phone.number = \"555-4321\"\n    phone.type = addressbook_pb2.Person.HOME\n\nvia Proxo.dict\\_to\\_protobuf\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n\n    from proxo import dict_to_protobuf, protobuf_to_dict\n\n    data = {'id': 124,\n            'name': 'John Doe',\n            'email': 'jdoe@example.com',\n            'phone': {'number': '555-4321',\n                      'type': 'HOME'}}\n\n    proto = dict_to_protobuf(data, addressbook_pb2.Person)\n\n    assert person == proto\n\n    # converting back\n    mapping = protobuf_to_dict(proto)\n    mapping['phone']['number']\n    mapping.phone.number  # using dot notation\n\n    assert mapping == data\n\nvia extending Proxo.MessageProxy\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n\n    from proxo import MessageProxy, encode, decode\n\n    # note that non defined types will be automatically proxied too\n\n    class Person(MessageProxy):\n        proto = addressbook_pb2.Person  # it can be more complex, like pattern matching, see below\n\n        @property\n        def firstname(self):\n            return self.name.split(' ')[0]\n\n        def call(self):\n            try:\n                print('calling {}'.format(self.firstname))\n                do_voip_call(self.phone.number)\n            except:\n                print('failed calling {} on his/her {} number'.format(self.firstname,\n                                                                      self.phone.type.lower))\n\n    obj = Person(id=124, name='John Doe', phone={'number': '555-4321',\n                                                 'type': 'HOME'})\n    obj.phone.type = 'MOBILE'\n    assert obj.firsname == 'John'\n\n    proto = encode(obj)\n    john = decode(proto)\n\n    # lets bother him\n    john.call()\n\nMore Complicated Example\n------------------------\n\n.. code:: python\n\n\n\n    import operator\n\n    from uuid import uuid4\n    from functools import partial\n    from proxo import MessageProxy\n\n\n    class Scalar(MessageProxy):\n        proto = mesos_pb2.Value.Scalar\n\n\n    class Resource(MessageProxy):\n        proto = mesos_pb2.Resource  # can be class\n\n\n    class ScalarResource(Resource):\n        proto = mesos_pb2.Resource(type=mesos_pb2.Value.SCALAR)  # or partially set instance\n\n        def __init__(self, value=None, **kwargs):\n            super(Resource, self).__init__(**kwargs)\n            if value is not None:\n                self.scalar = Scalar(value=value)\n\n        def __cmp__(self, other):\n            first, second = float(self), float(other)\n            if first < second:\n                return -1\n            elif first > second:\n                return 1\n            else:\n                return 0\n\n        def __repr__(self):\n            return \"<{}: {}>\".format(self.__class__.__name__, self.scalar.value)\n\n        def __float__(self):\n            return float(self.scalar.value)\n\n        @classmethod\n        def _op(cls, op, first, second):\n            value = op(float(first), float(second))\n            return cls(value=value)\n\n        def __add__(self, other):\n            return self._op(operator.add, self, other)\n\n        def __radd__(self, other):\n            return self._op(operator.add, other, self)\n\n        def __sub__(self, other):\n            return self._op(operator.sub, self, other)\n\n        def __rsub__(self, other):\n            return self._op(operator.sub, other, self)\n\n        def __mul__(self, other):\n            return self._op(operator.mul, self, other)\n\n        def __rmul__(self, other):\n            return self._op(operator.mul, other, self)\n\n        def __truediv__(self, other):\n            return self._op(operator.truediv, self, other)\n\n        def __rtruediv__(self, other):\n            return self._op(operator.truediv, other, self)\n\n        def __iadd__(self, other):\n            self.scalar.value = float(self._op(operator.add, self, other))\n            return self\n\n        def __isub__(self, other):\n            self.scalar.value = float(self._op(operator.sub, self, other))\n            return self\n\n\n    class Cpus(ScalarResource):\n        proto = mesos_pb2.Resource(name='cpus', type=mesos_pb2.Value.SCALAR)\n\n\n    class Mem(ScalarResource):\n        proto = mesos_pb2.Resource(name='mem', type=mesos_pb2.Value.SCALAR)\n\n\n    class Disk(ScalarResource):\n        proto = mesos_pb2.Resource(name='disk', type=mesos_pb2.Value.SCALAR)\n\n.. |Build Status| image:: http://drone.lensa.com:8000/api/badges/kszucs/proxo/status.svg\n   :target: http://drone.lensa.com:8000/kszucs/proxo", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/kszucs/proxo", "keywords": "protobuf dict object wrapper proxy", "license": "Apache License, Version 2.0", "maintainer": null, "maintainer_email": null, "name": "proxo", "package_url": "https://pypi.org/project/proxo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/proxo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/kszucs/proxo"}, "release_url": "https://pypi.org/project/proxo/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Object proxies (wrappers) for protobuf messages", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://drone.lensa.com:8000/kszucs/proxo\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d807949271e50faa2d3a7782e8bd71902628b2b5/687474703a2f2f64726f6e652e6c656e73612e636f6d3a383030302f6170692f6261646765732f6b737a7563732f70726f786f2f7374617475732e737667\"></a></p>\n<div id=\"proxo\">\n<h2>Proxo</h2>\n<p>Extend protobuf message with custom methods properties and additional\nattributes</p>\n<div id=\"tl-dr\">\n<h3>TL;DR</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">proxo</span> <span class=\"kn\">import</span> <span class=\"n\">MessageProxy</span><span class=\"p\">,</span> <span class=\"n\">encode</span><span class=\"p\">,</span> <span class=\"n\">decode</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">MessageProxy</span><span class=\"p\">):</span>\n    <span class=\"n\">proto</span> <span class=\"o\">=</span> <span class=\"n\">addressbook_pb2</span><span class=\"o\">.</span><span class=\"n\">Person</span>  <span class=\"c1\"># it can be more complex, like pattern matching, see below</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">firstname</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Test Me'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">firstname</span> <span class=\"o\">==</span> <span class=\"s1\">'Test'</span>\n<span class=\"k\">assert</span> <span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"n\">p</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"given-the-addressbook-protobuf-definition\">\n<h4>Given the addressbook protobuf definition</h4>\n<pre><span class=\"kn\">package</span> <span class=\"nn\">tutorial</span><span class=\"p\">;</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">Person</span> <span class=\"p\">{</span>\n  <span class=\"k\">required</span> <span class=\"kt\">string</span> <span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">required</span> <span class=\"kt\">int32</span> <span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"k\">optional</span> <span class=\"kt\">string</span> <span class=\"na\">email</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">enum</span> <span class=\"n\">PhoneType</span> <span class=\"p\">{</span>\n    <span class=\"na\">MOBILE</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"na\">HOME</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"na\">WORK</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">message</span> <span class=\"nc\">PhoneNumber</span> <span class=\"p\">{</span>\n    <span class=\"k\">required</span> <span class=\"kt\">string</span> <span class=\"na\">number</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">optional</span> <span class=\"n\">PhoneType</span> <span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"p\">[</span><span class=\"k\">default</span> <span class=\"o\">=</span> <span class=\"n\">HOME</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">repeated</span> <span class=\"n\">PhoneNumber</span> <span class=\"na\">phone</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">AddressBook</span> <span class=\"p\">{</span>\n  <span class=\"k\">repeated</span> <span class=\"n\">Person</span> <span class=\"na\">person</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"the-traditional-way\">\n<h4>The traditional way</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">addressbook_pb2</span>\n\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">addressbook_pb2</span><span class=\"o\">.</span><span class=\"n\">Person</span><span class=\"p\">()</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1234</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"John Doe\"</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s2\">\"jdoe@example.com\"</span>\n<span class=\"n\">phone</span> <span class=\"o\">=</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">phone</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">()</span>\n<span class=\"n\">phone</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"s2\">\"555-4321\"</span>\n<span class=\"n\">phone</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">addressbook_pb2</span><span class=\"o\">.</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">HOME</span>\n</pre>\n</div>\n<div id=\"via-proxo-dict-to-protobuf\">\n<h4>via Proxo.dict_to_protobuf</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">proxo</span> <span class=\"kn\">import</span> <span class=\"n\">dict_to_protobuf</span><span class=\"p\">,</span> <span class=\"n\">protobuf_to_dict</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">124</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'jdoe@example.com'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'phone'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'number'</span><span class=\"p\">:</span> <span class=\"s1\">'555-4321'</span><span class=\"p\">,</span>\n                  <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'HOME'</span><span class=\"p\">}}</span>\n\n<span class=\"n\">proto</span> <span class=\"o\">=</span> <span class=\"n\">dict_to_protobuf</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">addressbook_pb2</span><span class=\"o\">.</span><span class=\"n\">Person</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">person</span> <span class=\"o\">==</span> <span class=\"n\">proto</span>\n\n<span class=\"c1\"># converting back</span>\n<span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"n\">protobuf_to_dict</span><span class=\"p\">(</span><span class=\"n\">proto</span><span class=\"p\">)</span>\n<span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"s1\">'phone'</span><span class=\"p\">][</span><span class=\"s1\">'number'</span><span class=\"p\">]</span>\n<span class=\"n\">mapping</span><span class=\"o\">.</span><span class=\"n\">phone</span><span class=\"o\">.</span><span class=\"n\">number</span>  <span class=\"c1\"># using dot notation</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">mapping</span> <span class=\"o\">==</span> <span class=\"n\">data</span>\n</pre>\n</div>\n<div id=\"via-extending-proxo-messageproxy\">\n<h4>via extending Proxo.MessageProxy</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">proxo</span> <span class=\"kn\">import</span> <span class=\"n\">MessageProxy</span><span class=\"p\">,</span> <span class=\"n\">encode</span><span class=\"p\">,</span> <span class=\"n\">decode</span>\n\n<span class=\"c1\"># note that non defined types will be automatically proxied too</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">MessageProxy</span><span class=\"p\">):</span>\n    <span class=\"n\">proto</span> <span class=\"o\">=</span> <span class=\"n\">addressbook_pb2</span><span class=\"o\">.</span><span class=\"n\">Person</span>  <span class=\"c1\"># it can be more complex, like pattern matching, see below</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">firstname</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'calling </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">firstname</span><span class=\"p\">))</span>\n            <span class=\"n\">do_voip_call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">phone</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'failed calling </span><span class=\"si\">{}</span><span class=\"s1\"> on his/her </span><span class=\"si\">{}</span><span class=\"s1\"> number'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">firstname</span><span class=\"p\">,</span>\n                                                                  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">phone</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">))</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"n\">phone</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'number'</span><span class=\"p\">:</span> <span class=\"s1\">'555-4321'</span><span class=\"p\">,</span>\n                                             <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'HOME'</span><span class=\"p\">})</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">phone</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'MOBILE'</span>\n<span class=\"k\">assert</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">firsname</span> <span class=\"o\">==</span> <span class=\"s1\">'John'</span>\n\n<span class=\"n\">proto</span> <span class=\"o\">=</span> <span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n<span class=\"n\">john</span> <span class=\"o\">=</span> <span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">proto</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># lets bother him</span>\n<span class=\"n\">john</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"more-complicated-example\">\n<h3>More Complicated Example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">operator</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">uuid</span> <span class=\"kn\">import</span> <span class=\"n\">uuid4</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">proxo</span> <span class=\"kn\">import</span> <span class=\"n\">MessageProxy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Scalar</span><span class=\"p\">(</span><span class=\"n\">MessageProxy</span><span class=\"p\">):</span>\n    <span class=\"n\">proto</span> <span class=\"o\">=</span> <span class=\"n\">mesos_pb2</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">Scalar</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Resource</span><span class=\"p\">(</span><span class=\"n\">MessageProxy</span><span class=\"p\">):</span>\n    <span class=\"n\">proto</span> <span class=\"o\">=</span> <span class=\"n\">mesos_pb2</span><span class=\"o\">.</span><span class=\"n\">Resource</span>  <span class=\"c1\"># can be class</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ScalarResource</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">proto</span> <span class=\"o\">=</span> <span class=\"n\">mesos_pb2</span><span class=\"o\">.</span><span class=\"n\">Resource</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">mesos_pb2</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">SCALAR</span><span class=\"p\">)</span>  <span class=\"c1\"># or partially set instance</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scalar</span> <span class=\"o\">=</span> <span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__cmp__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">first</span> <span class=\"o\">&lt;</span> <span class=\"n\">second</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"k\">elif</span> <span class=\"n\">first</span> <span class=\"o\">&gt;</span> <span class=\"n\">second</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"&lt;</span><span class=\"si\">{}</span><span class=\"s2\">: </span><span class=\"si\">{}</span><span class=\"s2\">&gt;\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__float__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_op</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__radd__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__sub__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__rsub__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__mul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__rmul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__truediv__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">truediv</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__rtruediv__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">truediv</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__iadd__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__isub__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cpus</span><span class=\"p\">(</span><span class=\"n\">ScalarResource</span><span class=\"p\">):</span>\n    <span class=\"n\">proto</span> <span class=\"o\">=</span> <span class=\"n\">mesos_pb2</span><span class=\"o\">.</span><span class=\"n\">Resource</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'cpus'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">mesos_pb2</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">SCALAR</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Mem</span><span class=\"p\">(</span><span class=\"n\">ScalarResource</span><span class=\"p\">):</span>\n    <span class=\"n\">proto</span> <span class=\"o\">=</span> <span class=\"n\">mesos_pb2</span><span class=\"o\">.</span><span class=\"n\">Resource</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'mem'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">mesos_pb2</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">SCALAR</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Disk</span><span class=\"p\">(</span><span class=\"n\">ScalarResource</span><span class=\"p\">):</span>\n    <span class=\"n\">proto</span> <span class=\"o\">=</span> <span class=\"n\">mesos_pb2</span><span class=\"o\">.</span><span class=\"n\">Resource</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'disk'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">mesos_pb2</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">SCALAR</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2448488, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "8cbbd6665be62136a26c1127241c21a3", "sha256": "10f42447526b3098e40e100b82206a5e1e451550ac07d157f7ca11e625994315"}, "downloads": -1, "filename": "proxo-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8cbbd6665be62136a26c1127241c21a3", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 7743, "upload_time": "2016-11-08T07:38:10", "upload_time_iso_8601": "2016-11-08T07:38:10.902633Z", "url": "https://files.pythonhosted.org/packages/c4/c0/0fa608b5ff7d71d4b0455d079fe44599e0feaf711232a98a0648cb2e9d69/proxo-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "def6fe7e2c2f9e48ba493196002aefaf", "sha256": "bc8f41669c29eb03d0b36d73c9786f4dd7e21e7699ca39ecaf1f7f06550d5da7"}, "downloads": -1, "filename": "proxo-1.0.2.tar.gz", "has_sig": false, "md5_digest": "def6fe7e2c2f9e48ba493196002aefaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5334, "upload_time": "2016-11-08T07:38:07", "upload_time_iso_8601": "2016-11-08T07:38:07.872891Z", "url": "https://files.pythonhosted.org/packages/0b/8e/76b635b583e3660602ffe68e29d6a3e0cf5a53678b57c29f827f96981088/proxo-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8cbbd6665be62136a26c1127241c21a3", "sha256": "10f42447526b3098e40e100b82206a5e1e451550ac07d157f7ca11e625994315"}, "downloads": -1, "filename": "proxo-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8cbbd6665be62136a26c1127241c21a3", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 7743, "upload_time": "2016-11-08T07:38:10", "upload_time_iso_8601": "2016-11-08T07:38:10.902633Z", "url": "https://files.pythonhosted.org/packages/c4/c0/0fa608b5ff7d71d4b0455d079fe44599e0feaf711232a98a0648cb2e9d69/proxo-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "def6fe7e2c2f9e48ba493196002aefaf", "sha256": "bc8f41669c29eb03d0b36d73c9786f4dd7e21e7699ca39ecaf1f7f06550d5da7"}, "downloads": -1, "filename": "proxo-1.0.2.tar.gz", "has_sig": false, "md5_digest": "def6fe7e2c2f9e48ba493196002aefaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5334, "upload_time": "2016-11-08T07:38:07", "upload_time_iso_8601": "2016-11-08T07:38:07.872891Z", "url": "https://files.pythonhosted.org/packages/0b/8e/76b635b583e3660602ffe68e29d6a3e0cf5a53678b57c29f827f96981088/proxo-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:21 2020"}