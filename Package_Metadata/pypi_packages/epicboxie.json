{"info": {"author": "Pavel Shishmarev", "author_email": "pashawnn@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# Epicboxie\n\nForked from [StepicOrg/epicbox](https://github.com/StepicOrg/) for some improvements.\n\nThis fork allows to expose container ports with host machine and to work with sandbox interactively.\n\n`epicboxie.run_interactive` is a context manager that runs sandbox:\n\n```python\nimport time\nimport requests\nimport epicboxie\n\nepicboxie.configure(\n    profiles=[\n        epicboxie.Profile('python', 'python:3.6.5-alpine')\n    ]\n)\n\nwith open('server.py', 'rb') as f:\n    contents = f.read()\nfiles = [{'name': 'main.py', 'content': contents}]\nlimits = {'cputime': 1, 'memory': 64}\nports = {8000: 8000}\n\nwith epicboxie.run_interactive('python', 'python3 main.py', files=files, limits=limits, ports=ports) as run:\n    time.sleep(2)\n    print(requests.get('http://localhost:8000').status_code)\n\nresult = run.results\n```\n\nThe `ports` parameter is also added to old `run` function.\n\nInteraction with standard I/O is done with `run.docker_interaction.read_sock()` and `run.docker_interaction.write_sock()`:\n\n```python\nimport time\nimport requests\nimport epicboxie\n\nepicboxie.configure(\n    profiles=[\n        epicboxie.Profile('python', 'python:3.6.5-alpine')\n    ]\n)\nfiles = [{'name': 'main.py', 'content': b'print(input(\"Input data: \")[::-1])'}]\nlimits = {'cputime': 1, 'memory': 64}\nports = {8000: 8000}\n\nwith epicboxie.run_interactive('python', 'python3 main.py', files=files, limits=limits, ports=ports) as run:\n    time.sleep(0.5)\n    prompt = run.docker_interaction.read_sock()[0].decode('utf8')  # read_sock returns tuple (stdout, stderr)\n    run.docker_interaction.write_sock(input(prompt).encode())\n    time.sleep(0.5)\n    print(run.docker_interaction.read_sock()[0].decode('utf8'))\n\nresult = run.results\n```\n\nIf you need to use old-style automatic interaction (pass whole stdin and wait for termination) when using `run_interactive`, you can use `run.docker_interaction.interact(stdin, timeout, close=True)`\n\n# Original README.md:\n# epicbox\n[![Build Status](https://travis-ci.org/PashaWNN/epicbox.svg?branch=master)](https://travis-ci.org/PashaWNN/epicbox)\n\nA Python library to run untrusted code in secure, isolated [Docker](https://www.docker.com/)\nbased sandboxes. It is used to automatically grade programming assignments\non [Stepik.org](https://stepik.org/).\n\nIt allows to spawn a process inside one-time Docker container, send data\nto stdin, and obtain its exit code and stdout/stderr output.  It's very similar\nto what the [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess)\nmodule does but additionally you can specify a custom environment for the process\n(a Docker [image](https://docs.docker.com/v17.09/engine/userguide/storagedriver/imagesandcontainers/))\nand limit the CPU, memory, disk, and network usage for the running process.\n\n## Usage\nRun a simple Python script in a one-time Docker container using the\n[`python:3.6.5-alpine`](https://hub.docker.com/_/python/) image:\n```python\nimport epicboxie\n\nepicboxie.configure(\n    profiles=[\n        epicboxie.Profile('python', 'python:3.6.5-alpine')\n    ]\n)\nfiles = [{'name': 'main.py', 'content': b'print(42)'}]\nlimits = {'cputime': 1, 'memory': 64}\nresult = epicbox.run('python', 'python3 main.py', files=files, limits=limits)\n\n```\nThe `result` value is:\n```python\n{'exit_code': 0,\n 'stdout': b'42\\n',\n 'stderr': b'',\n 'duration': 0.143358,\n 'timeout': False,\n 'oom_killed': False}\n```\n\n### Available Limit Options\n\nThe available limit options and default values:\n\n```\nDEFAULT_LIMITS = {\n    # CPU time in seconds, None for unlimited\n    'cputime': 1,\n    # Real time in seconds, None for unlimited\n    'realtime': 5,\n    # Memory in megabytes, None for unlimited\n    'memory': 64,\n\n    # limit the max processes the sandbox can have\n    # -1 or None for unlimited(default)\n    'processes': -1,\n}\n```\n\n### Advanced usage\nA more advanced usage example of `epicbox` is to compile a C++ program and then\nrun it multiple times on different input data.  In this example `epicbox` will\nrun containers on a dedicated [Docker Swarm](https://docs.docker.com/swarm/overview/)\ncluster instead of locally installed Docker engine:\n```python\nimport epicboxie\n\nPROFILES = {\n    'gcc_compile': {\n        'docker_image': 'stepik/epicboxie-gcc:6.3.0',\n        'user': 'root',\n    },\n    'gcc_run': {\n        'docker_image': 'stepik/epicboxie-gcc:6.3.0',\n        # It's safer to run untrusted code as a non-root user (even in a container)\n        'user': 'sandbox',\n        'read_only': True,\n        'network_disabled': False,\n    },\n}\nepicboxie.configure(profiles=PROFILES, docker_url='tcp://1.2.3.4:2375')\n\nuntrusted_code = b\"\"\"\n// C++ program\n#include <iostream>\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << a + b << std::endl;\n}\n\"\"\"\n# A working directory allows to preserve files created in a one-time container\n# and access them from another one. Internally it is a temporary Docker volume.\nwith epicboxie.working_directory() as workdir:\n    epicboxie.run('gcc_compile', 'g++ -pipe -O2 -static -o main main.cpp',\n                files=[{'name': 'main.cpp', 'content': untrusted_code}],\n                workdir=workdir)\n    epicboxie.run('gcc_run', './main', stdin='2 2',\n                limits={'cputime': 1, 'memory': 64},\n                workdir=workdir)\n    # {'exit_code': 0, 'stdout': b'4\\n', 'stderr': b'', 'duration': 0.095318, 'timeout': False, 'oom_killed': False}\n    epicboxie.run('gcc_run', './main', stdin='14 5',\n                limits={'cputime': 1, 'memory': 64},\n                workdir=workdir)\n    # {'exit_code': 0, 'stdout': b'19\\n', 'stderr': b'', 'duration': 0.10285, 'timeout': False, 'oom_killed': False}\n```\n\n## Installation\n`epicbox` can be installed by running `pip install epicbox`. It's tested on Python 3.4+ and\nDocker 1.12+.\n\nYou can also check the [epicbox-images](https://github.com/StepicOrg/epicbox-images)\nrepository that contains Docker images used to automatically grade programming\nassignments on [Stepik.org](https://stepik.org/).\n\n## Contributing\nContributions are welcome, and they are greatly appreciated!\nMore details can be found in [CONTRIBUTING](CONTRIBUTING.rst).\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pashawnn/epicbox", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "epicboxie", "package_url": "https://pypi.org/project/epicboxie/", "platform": "", "project_url": "https://pypi.org/project/epicboxie/", "project_urls": {"Homepage": "https://github.com/pashawnn/epicbox"}, "release_url": "https://pypi.org/project/epicboxie/1.1.1.dev4/", "requires_dist": ["docker (>=2)", "python-dateutil (~=2.4)", "requests (~=2.14)", "structlog (>=15.3)"], "requires_python": "", "summary": "EpicBox fork. Original package developers is StepicOrg.", "version": "1.1.1.dev4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Epicboxie</h1>\n<p>Forked from <a href=\"https://github.com/StepicOrg/\" rel=\"nofollow\">StepicOrg/epicbox</a> for some improvements.</p>\n<p>This fork allows to expose container ports with host machine and to work with sandbox interactively.</p>\n<p><code>epicboxie.run_interactive</code> is a context manager that runs sandbox:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">epicboxie</span>\n\n<span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n    <span class=\"n\">profiles</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">Profile</span><span class=\"p\">(</span><span class=\"s1\">'python'</span><span class=\"p\">,</span> <span class=\"s1\">'python:3.6.5-alpine'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'server.py'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'main.py'</span><span class=\"p\">,</span> <span class=\"s1\">'content'</span><span class=\"p\">:</span> <span class=\"n\">contents</span><span class=\"p\">}]</span>\n<span class=\"n\">limits</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'cputime'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'memory'</span><span class=\"p\">:</span> <span class=\"mi\">64</span><span class=\"p\">}</span>\n<span class=\"n\">ports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">8000</span><span class=\"p\">:</span> <span class=\"mi\">8000</span><span class=\"p\">}</span>\n\n<span class=\"k\">with</span> <span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">run_interactive</span><span class=\"p\">(</span><span class=\"s1\">'python'</span><span class=\"p\">,</span> <span class=\"s1\">'python3 main.py'</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">limits</span><span class=\"o\">=</span><span class=\"n\">limits</span><span class=\"p\">,</span> <span class=\"n\">ports</span><span class=\"o\">=</span><span class=\"n\">ports</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">run</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8000'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">results</span>\n</pre>\n<p>The <code>ports</code> parameter is also added to old <code>run</code> function.</p>\n<p>Interaction with standard I/O is done with <code>run.docker_interaction.read_sock()</code> and <code>run.docker_interaction.write_sock()</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">epicboxie</span>\n\n<span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n    <span class=\"n\">profiles</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">Profile</span><span class=\"p\">(</span><span class=\"s1\">'python'</span><span class=\"p\">,</span> <span class=\"s1\">'python:3.6.5-alpine'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'main.py'</span><span class=\"p\">,</span> <span class=\"s1\">'content'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'print(input(\"Input data: \")[::-1])'</span><span class=\"p\">}]</span>\n<span class=\"n\">limits</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'cputime'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'memory'</span><span class=\"p\">:</span> <span class=\"mi\">64</span><span class=\"p\">}</span>\n<span class=\"n\">ports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">8000</span><span class=\"p\">:</span> <span class=\"mi\">8000</span><span class=\"p\">}</span>\n\n<span class=\"k\">with</span> <span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">run_interactive</span><span class=\"p\">(</span><span class=\"s1\">'python'</span><span class=\"p\">,</span> <span class=\"s1\">'python3 main.py'</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">limits</span><span class=\"o\">=</span><span class=\"n\">limits</span><span class=\"p\">,</span> <span class=\"n\">ports</span><span class=\"o\">=</span><span class=\"n\">ports</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">run</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n    <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">docker_interaction</span><span class=\"o\">.</span><span class=\"n\">read_sock</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf8'</span><span class=\"p\">)</span>  <span class=\"c1\"># read_sock returns tuple (stdout, stderr)</span>\n    <span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">docker_interaction</span><span class=\"o\">.</span><span class=\"n\">write_sock</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">docker_interaction</span><span class=\"o\">.</span><span class=\"n\">read_sock</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf8'</span><span class=\"p\">))</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">results</span>\n</pre>\n<p>If you need to use old-style automatic interaction (pass whole stdin and wait for termination) when using <code>run_interactive</code>, you can use <code>run.docker_interaction.interact(stdin, timeout, close=True)</code></p>\n<h1>Original README.md:</h1>\n<h1>epicbox</h1>\n<p><a href=\"https://travis-ci.org/PashaWNN/epicbox\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/544fb0c4d790f0aeee292a7725dfd111cd11b76f/68747470733a2f2f7472617669732d63692e6f72672f5061736861574e4e2f65706963626f782e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>A Python library to run untrusted code in secure, isolated <a href=\"https://www.docker.com/\" rel=\"nofollow\">Docker</a>\nbased sandboxes. It is used to automatically grade programming assignments\non <a href=\"https://stepik.org/\" rel=\"nofollow\">Stepik.org</a>.</p>\n<p>It allows to spawn a process inside one-time Docker container, send data\nto stdin, and obtain its exit code and stdout/stderr output.  It's very similar\nto what the <a href=\"https://docs.python.org/3/library/subprocess.html#module-subprocess\" rel=\"nofollow\"><code>subprocess</code></a>\nmodule does but additionally you can specify a custom environment for the process\n(a Docker <a href=\"https://docs.docker.com/v17.09/engine/userguide/storagedriver/imagesandcontainers/\" rel=\"nofollow\">image</a>)\nand limit the CPU, memory, disk, and network usage for the running process.</p>\n<h2>Usage</h2>\n<p>Run a simple Python script in a one-time Docker container using the\n<a href=\"https://hub.docker.com/_/python/\" rel=\"nofollow\"><code>python:3.6.5-alpine</code></a> image:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">epicboxie</span>\n\n<span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n    <span class=\"n\">profiles</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">Profile</span><span class=\"p\">(</span><span class=\"s1\">'python'</span><span class=\"p\">,</span> <span class=\"s1\">'python:3.6.5-alpine'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'main.py'</span><span class=\"p\">,</span> <span class=\"s1\">'content'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'print(42)'</span><span class=\"p\">}]</span>\n<span class=\"n\">limits</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'cputime'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'memory'</span><span class=\"p\">:</span> <span class=\"mi\">64</span><span class=\"p\">}</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">epicbox</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'python'</span><span class=\"p\">,</span> <span class=\"s1\">'python3 main.py'</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">limits</span><span class=\"o\">=</span><span class=\"n\">limits</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>result</code> value is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'exit_code'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'stdout'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'42</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n <span class=\"s1\">'stderr'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n <span class=\"s1\">'duration'</span><span class=\"p\">:</span> <span class=\"mf\">0.143358</span><span class=\"p\">,</span>\n <span class=\"s1\">'timeout'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'oom_killed'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}</span>\n</pre>\n<h3>Available Limit Options</h3>\n<p>The available limit options and default values:</p>\n<pre><code>DEFAULT_LIMITS = {\n    # CPU time in seconds, None for unlimited\n    'cputime': 1,\n    # Real time in seconds, None for unlimited\n    'realtime': 5,\n    # Memory in megabytes, None for unlimited\n    'memory': 64,\n\n    # limit the max processes the sandbox can have\n    # -1 or None for unlimited(default)\n    'processes': -1,\n}\n</code></pre>\n<h3>Advanced usage</h3>\n<p>A more advanced usage example of <code>epicbox</code> is to compile a C++ program and then\nrun it multiple times on different input data.  In this example <code>epicbox</code> will\nrun containers on a dedicated <a href=\"https://docs.docker.com/swarm/overview/\" rel=\"nofollow\">Docker Swarm</a>\ncluster instead of locally installed Docker engine:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">epicboxie</span>\n\n<span class=\"n\">PROFILES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'gcc_compile'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'docker_image'</span><span class=\"p\">:</span> <span class=\"s1\">'stepik/epicboxie-gcc:6.3.0'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'root'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'gcc_run'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'docker_image'</span><span class=\"p\">:</span> <span class=\"s1\">'stepik/epicboxie-gcc:6.3.0'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># It's safer to run untrusted code as a non-root user (even in a container)</span>\n        <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'sandbox'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'read_only'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s1\">'network_disabled'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n<span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">profiles</span><span class=\"o\">=</span><span class=\"n\">PROFILES</span><span class=\"p\">,</span> <span class=\"n\">docker_url</span><span class=\"o\">=</span><span class=\"s1\">'tcp://1.2.3.4:2375'</span><span class=\"p\">)</span>\n\n<span class=\"n\">untrusted_code</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">// C++ program</span>\n<span class=\"s2\">#include &lt;iostream&gt;</span>\n\n<span class=\"s2\">int main() {</span>\n<span class=\"s2\">    int a, b;</span>\n<span class=\"s2\">    std::cin &gt;&gt; a &gt;&gt; b;</span>\n<span class=\"s2\">    std::cout &lt;&lt; a + b &lt;&lt; std::endl;</span>\n<span class=\"s2\">}</span>\n<span class=\"s2\">\"\"\"</span>\n<span class=\"c1\"># A working directory allows to preserve files created in a one-time container</span>\n<span class=\"c1\"># and access them from another one. Internally it is a temporary Docker volume.</span>\n<span class=\"k\">with</span> <span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">workdir</span><span class=\"p\">:</span>\n    <span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'gcc_compile'</span><span class=\"p\">,</span> <span class=\"s1\">'g++ -pipe -O2 -static -o main main.cpp'</span><span class=\"p\">,</span>\n                <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'main.cpp'</span><span class=\"p\">,</span> <span class=\"s1\">'content'</span><span class=\"p\">:</span> <span class=\"n\">untrusted_code</span><span class=\"p\">}],</span>\n                <span class=\"n\">workdir</span><span class=\"o\">=</span><span class=\"n\">workdir</span><span class=\"p\">)</span>\n    <span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'gcc_run'</span><span class=\"p\">,</span> <span class=\"s1\">'./main'</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"s1\">'2 2'</span><span class=\"p\">,</span>\n                <span class=\"n\">limits</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'cputime'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'memory'</span><span class=\"p\">:</span> <span class=\"mi\">64</span><span class=\"p\">},</span>\n                <span class=\"n\">workdir</span><span class=\"o\">=</span><span class=\"n\">workdir</span><span class=\"p\">)</span>\n    <span class=\"c1\"># {'exit_code': 0, 'stdout': b'4\\n', 'stderr': b'', 'duration': 0.095318, 'timeout': False, 'oom_killed': False}</span>\n    <span class=\"n\">epicboxie</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'gcc_run'</span><span class=\"p\">,</span> <span class=\"s1\">'./main'</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"s1\">'14 5'</span><span class=\"p\">,</span>\n                <span class=\"n\">limits</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'cputime'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'memory'</span><span class=\"p\">:</span> <span class=\"mi\">64</span><span class=\"p\">},</span>\n                <span class=\"n\">workdir</span><span class=\"o\">=</span><span class=\"n\">workdir</span><span class=\"p\">)</span>\n    <span class=\"c1\"># {'exit_code': 0, 'stdout': b'19\\n', 'stderr': b'', 'duration': 0.10285, 'timeout': False, 'oom_killed': False}</span>\n</pre>\n<h2>Installation</h2>\n<p><code>epicbox</code> can be installed by running <code>pip install epicbox</code>. It's tested on Python 3.4+ and\nDocker 1.12+.</p>\n<p>You can also check the <a href=\"https://github.com/StepicOrg/epicbox-images\" rel=\"nofollow\">epicbox-images</a>\nrepository that contains Docker images used to automatically grade programming\nassignments on <a href=\"https://stepik.org/\" rel=\"nofollow\">Stepik.org</a>.</p>\n<h2>Contributing</h2>\n<p>Contributions are welcome, and they are greatly appreciated!\nMore details can be found in <a href=\"CONTRIBUTING.rst\" rel=\"nofollow\">CONTRIBUTING</a>.</p>\n\n          </div>"}, "last_serial": 6696569, "releases": {"1.1.1.dev4": [{"comment_text": "", "digests": {"md5": "082794db2f4b2c6599c25451173043ec", "sha256": "8924c58c20c5dd4b63497d7c74f48c637dcdf12c65d14d64be30be15c09b3d78"}, "downloads": -1, "filename": "epicboxie-1.1.1.dev4-py3-none-any.whl", "has_sig": false, "md5_digest": "082794db2f4b2c6599c25451173043ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19814, "upload_time": "2020-02-25T13:43:04", "upload_time_iso_8601": "2020-02-25T13:43:04.207100Z", "url": "https://files.pythonhosted.org/packages/59/40/65d4bf85be72446db67a80d56ae964e77351dd041b5c6708f73e2cf6a6e1/epicboxie-1.1.1.dev4-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "082794db2f4b2c6599c25451173043ec", "sha256": "8924c58c20c5dd4b63497d7c74f48c637dcdf12c65d14d64be30be15c09b3d78"}, "downloads": -1, "filename": "epicboxie-1.1.1.dev4-py3-none-any.whl", "has_sig": false, "md5_digest": "082794db2f4b2c6599c25451173043ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19814, "upload_time": "2020-02-25T13:43:04", "upload_time_iso_8601": "2020-02-25T13:43:04.207100Z", "url": "https://files.pythonhosted.org/packages/59/40/65d4bf85be72446db67a80d56ae964e77351dd041b5c6708f73e2cf6a6e1/epicboxie-1.1.1.dev4-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:46:01 2020"}