{"info": {"author": "Manuel Holtgrewe", "author_email": "manuel.holtgrewe@bihealth.de", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "======\nCLSify\n======\n\nClassification of *Candidatus Liberibacter solanacearum* following IPPC (International Plant Protection Convention) standard `DP 21: Candidatus Liberibacter solanacearum <https://www.ippc.int/en/publications/84157>`_.\n\n-----------\nQuick Facts\n-----------\n\n- License: MIT\n- Programming Language Python\n\n------------------------------\nInput / Output - What it Does!\n------------------------------\n\nThis program takes as the input Sanger sequences from the 16S, 16S-23S, and 50S primers from the IPPC standard DP21.\nIt then aligns them to the GenBank reference sequences ``EU812559`` and ``EU834131`` (as specified in DP21).\nBased on the alignments and the document DP21, sequence identity is computed and haplotyping is performed, yielding:\n\n- sequence identity to ``EU822559`` for identifying the species *C. Liberibacter solanacearum*, and\n- haplotyping of the read based on variation from the reference sequence.\n\nSample names can be inferred from the read names or from a separate mapping TSV file.\n\n-----------\nQuick Start\n-----------\n\nThis is gonna be really quick!\n\nInstallation\n============\n\nWe recommend using `Bioconda <https://bioconda.github.io>`_.\n\nFirst `install Bioconda <https://bioconda.github.io/user/install.html#getting-started>`_.\nThen:\n\n.. code-block:: bash\n\n    # conda install -y clsify\n\nAnd -- tadaa -- you're ready to go!\n\nRunning\n=======\n\nYou can have one FASTA (or FASTQ) file with all of your reads or one file for each.\nIf you have a single sequence per FASTA (or FASTQ) file then you can use the file name instead of the sequence name.\n\n.. code-block:: bash\n\n    # clsify -o result.tsv INPUT.fasta\n    ## OR\n    # clsify [--use-file-name] -o result.tsv INPUT1.fasta INPUT2.fasta [...]\n    ## e.g.,\n    # clsify [--use-file-name] -o result.tsv INPUT*.fasta\n\n\n=======\nHistory\n=======\n\n------\nv0.1.1\n------\n\n- Zapping gremlins in haplotype table.\n- Change formatting of README.\n\n------\nv0.1.0\n------\n\nInitial release.\n\n- Everything is new!", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/holtgrewe/clsify", "keywords": "clsify", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "clsify", "package_url": "https://pypi.org/project/clsify/", "platform": "", "project_url": "https://pypi.org/project/clsify/", "project_urls": {"Homepage": "https://github.com/holtgrewe/clsify"}, "release_url": "https://pypi.org/project/clsify/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Classify C. Liberibacter solanacearum haplotypes", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"clsify\">\n<h2>CLSify</h2>\n<p>Classification of <em>Candidatus Liberibacter solanacearum</em> following IPPC (International Plant Protection Convention) standard <a href=\"https://www.ippc.int/en/publications/84157\" rel=\"nofollow\">DP 21: Candidatus Liberibacter solanacearum</a>.</p>\n<div id=\"quick-facts\">\n<h3>Quick Facts</h3>\n<ul>\n<li>License: MIT</li>\n<li>Programming Language Python</li>\n</ul>\n</div>\n<div id=\"input-output-what-it-does\">\n<h3>Input / Output - What it Does!</h3>\n<p>This program takes as the input Sanger sequences from the 16S, 16S-23S, and 50S primers from the IPPC standard DP21.\nIt then aligns them to the GenBank reference sequences <tt>EU812559</tt> and <tt>EU834131</tt> (as specified in DP21).\nBased on the alignments and the document DP21, sequence identity is computed and haplotyping is performed, yielding:</p>\n<ul>\n<li>sequence identity to <tt>EU822559</tt> for identifying the species <em>C. Liberibacter solanacearum</em>, and</li>\n<li>haplotyping of the read based on variation from the reference sequence.</li>\n</ul>\n<p>Sample names can be inferred from the read names or from a separate mapping TSV file.</p>\n</div>\n<div id=\"quick-start\">\n<h3>Quick Start</h3>\n<p>This is gonna be really quick!</p>\n<div id=\"installation\">\n<h4>Installation</h4>\n<p>We recommend using <a href=\"https://bioconda.github.io\" rel=\"nofollow\">Bioconda</a>.</p>\n<p>First <a href=\"https://bioconda.github.io/user/install.html#getting-started\" rel=\"nofollow\">install Bioconda</a>.\nThen:</p>\n<pre><span class=\"c1\"># conda install -y clsify</span>\n</pre>\n<p>And \u2013 tadaa \u2013 you\u2019re ready to go!</p>\n</div>\n<div id=\"running\">\n<h4>Running</h4>\n<p>You can have one FASTA (or FASTQ) file with all of your reads or one file for each.\nIf you have a single sequence per FASTA (or FASTQ) file then you can use the file name instead of the sequence name.</p>\n<pre><span class=\"c1\"># clsify -o result.tsv INPUT.fasta\n## OR\n# clsify [--use-file-name] -o result.tsv INPUT1.fasta INPUT2.fasta [...]\n## e.g.,\n# clsify [--use-file-name] -o result.tsv INPUT*.fasta</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"v0-1-1\">\n<h3>v0.1.1</h3>\n<ul>\n<li>Zapping gremlins in haplotype table.</li>\n<li>Change formatting of README.</li>\n</ul>\n</div>\n<div id=\"v0-1-0\">\n<h3>v0.1.0</h3>\n<p>Initial release.</p>\n<ul>\n<li>Everything is new!</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6029610, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "80cea2ed70031201cef7cdb73582eeaf", "sha256": "1920d7f6a7b0c7fe9b3e2e3b8ba9130f666b9e7268d92ef4034a352e379b5591"}, "downloads": -1, "filename": "clsify-0.1.0.tar.gz", "has_sig": false, "md5_digest": "80cea2ed70031201cef7cdb73582eeaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1347715, "upload_time": "2019-10-25T11:56:53", "upload_time_iso_8601": "2019-10-25T11:56:53.416107Z", "url": "https://files.pythonhosted.org/packages/7c/60/95fb0c690db9244d9d435cd3ef14f42c9c916b7470de1833e6e83c79bad0/clsify-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7adc342cdf04dc5e82c10140f1c1f93e", "sha256": "33d02e9d95e3bcc2480c27fa10f5a61c47049252a8787d8c98e95c8194e026e3"}, "downloads": -1, "filename": "clsify-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7adc342cdf04dc5e82c10140f1c1f93e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1347910, "upload_time": "2019-10-25T13:32:02", "upload_time_iso_8601": "2019-10-25T13:32:02.519808Z", "url": "https://files.pythonhosted.org/packages/76/71/a171dfd9de25a91091f73d09c303f0c3e274cf12037af764d53b87d34a51/clsify-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7adc342cdf04dc5e82c10140f1c1f93e", "sha256": "33d02e9d95e3bcc2480c27fa10f5a61c47049252a8787d8c98e95c8194e026e3"}, "downloads": -1, "filename": "clsify-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7adc342cdf04dc5e82c10140f1c1f93e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1347910, "upload_time": "2019-10-25T13:32:02", "upload_time_iso_8601": "2019-10-25T13:32:02.519808Z", "url": "https://files.pythonhosted.org/packages/76/71/a171dfd9de25a91091f73d09c303f0c3e274cf12037af764d53b87d34a51/clsify-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:41 2020"}