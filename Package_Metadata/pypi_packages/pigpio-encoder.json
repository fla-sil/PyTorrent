{"info": {"author": "vash", "author_email": "vash.3d@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "# Pigpio Encoder\n\nVersion: 0.2.2  \n### Requires Python 3\n\n#### Python module for the KY040 rotary encoder.\nThis module has been developed for quickly interface a rotary encoder with Raspberry Pi.\nIt's based on the [pigpio library](http://abyz.me.uk/rpi/pigpio/python.html) (cause it proved to be faster than rpi.GPIO or gpiozero libraries) so you need to install pigpio library and run pigpio daemon before starting your script.\n\n## Features\n- Easy to setup callback functions for the Rotary Encoder and the Switch.\n- The Rotary Encoder has customizable min and max values (default 0-100).\n- The Rotary Encoder increase/decrease value is customizable (default 1).\n- The Switch can be activated or not.\n- The Switch can have two different functions for short press or long press.\n- Both Rotary and Switch have a customizable debounce value (default 300ms)\n\n## Installation\n- Install the pigpio library *(check [pigpio documentation](http://abyz.me.uk/rpi/pigpio/download.html) for alternative installation method)*\n - `sudo apt-get update`\n - `sudo apt-get install pigpio python-pigpio python3-pigpio`\n- Install the pigpio_encoder library\n - `pip install pigpio_encoder` (consider add --user option)\n- start pigpio daemon\n - `sudo pigpiod`\n\n## How to use\n- import the module\n    ```python\n    from pigpio_encoder import pigpio_encoder\n    ```\n- create a callback function for the Rotary Encoder.\n    > You must pass a positional argument to retrieve the counter value.\n\n    ```python\n    def rotary_callback(counter):\n        # some action with counter...\n    ```\n- create callbacks functions for the Switch\n    > If you intend to use the switch you must create at least the \"short press\" callback. The \"long press\" callback is necessary if you want to use that feature.\n\n    ```python\n    def sw_short_callback():\n        # some action...\n    ```\n    ```python\n    def sw_long_callback():\n        # some action...\n      ```\n- create the rotary object\n    > here you setup the pin number as keyword argument. If you don't pass the switch parameter the switch won't be activated. You must use BCM numbering.\n\n    ```python\n    my_rotary = pigpio_encoder.Rotary(clk=pin, dt=pin, sw=pin)\n    ```\n- setup the rotary encoder\n    > here you can setup min and max values for the encoder, the increase/decrease value, a debouce value (default 300ms) and the callback function.\n\n    ```python\n    my_rotary.setup_rotary(min=min_value, max=max__value, scale=scale_value, debounce=debounce_value, rotary_callback=rotary_callback)\n    ```\n- setup the switch\n    > if you have specified the switch pin when creating the encoder object, here you can setup the debounce value, the long press option and the callbacks.\n\n    ```python\n    my_rotary.setup_switch(debounce=debounce_value, long_press=True, sw_short_callback=sw_short_callback, sw_long_callback=sw_long_callback)\n    ```\n\n- start the listener\n    ```python\n    my_rotary.watch()\n    ```\n\n___\n#### Basic example using default values\n```python\nfrom pigpio_encoder import pigpio_encoder\n\ndef rotary_callback(counter):\n    print(\"Counter value: \", counter)\n\ndef sw_short():\n    print(\"Switch pressed\")\n\nmy_rotary = pigpio_encoder.Rotary(clk=27, dt=22, sw=17)\nmy_rotary.setup_rotary(rotary_callback=rotary_callback)\nmy_rotary.setup_switch(sw_short_callback=sw_short)\n\nmy_rotary.watch()\n\n```\n___\n\n#### Example using all the Features\n```python\nfrom pigpio_encoder import pigpio_encoder\n\ndef rotary_callback(counter):\n    print(\"Counter value: \", counter)\n\ndef sw_short():\n    print(\"Switch short press\")\n\ndef sw_long():\n    print(\"Switch long press\")\n\nmy_rotary = pigpio_encoder.Rotary(clk=27, dt=22, sw=17)\nmy_rotary.setup_rotary(min=10, max=300, scale=5, debounce=200, rotary_callback=rotary_callback)\nmy_rotary.setup_switch(debounce=200, long_press=True, sw_short_callback=sw_short, sw_long_callback=sw_long)\n\nmy_rotary.watch()\n\n```\n\n___\n\n## Thanks to...\n- [joan2937](https://github.com/joan2937) for the awesome [pigpio library](https://github.com/joan2937/pigpio)\n- [Raphael Yancey](https://github.com/raphaelyancey) for inspiring me this library with his [similar project](https://github.com/raphaelyancey/pyKY040)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/vash3d/pigpio_encoder/archive/0.2.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vash3d/pigpio_encoder", "keywords": "rotary encoder switch ky040 gpio raspberry", "license": "GNU GPLv3", "maintainer": "", "maintainer_email": "", "name": "pigpio-encoder", "package_url": "https://pypi.org/project/pigpio-encoder/", "platform": "", "project_url": "https://pypi.org/project/pigpio-encoder/", "project_urls": {"Download": "https://github.com/vash3d/pigpio_encoder/archive/0.2.2.tar.gz", "Homepage": "https://github.com/vash3d/pigpio_encoder"}, "release_url": "https://pypi.org/project/pigpio-encoder/0.2.2/", "requires_dist": null, "requires_python": "", "summary": "Python module for for quickly interface a KY040 rotary encoder with Raspberry Pi.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pigpio Encoder</h1>\n<p>Version: 0.2.2</p>\n<h3>Requires Python 3</h3>\n<h4>Python module for the KY040 rotary encoder.</h4>\n<p>This module has been developed for quickly interface a rotary encoder with Raspberry Pi.\nIt's based on the <a href=\"http://abyz.me.uk/rpi/pigpio/python.html\" rel=\"nofollow\">pigpio library</a> (cause it proved to be faster than rpi.GPIO or gpiozero libraries) so you need to install pigpio library and run pigpio daemon before starting your script.</p>\n<h2>Features</h2>\n<ul>\n<li>Easy to setup callback functions for the Rotary Encoder and the Switch.</li>\n<li>The Rotary Encoder has customizable min and max values (default 0-100).</li>\n<li>The Rotary Encoder increase/decrease value is customizable (default 1).</li>\n<li>The Switch can be activated or not.</li>\n<li>The Switch can have two different functions for short press or long press.</li>\n<li>Both Rotary and Switch have a customizable debounce value (default 300ms)</li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>Install the pigpio library <em>(check <a href=\"http://abyz.me.uk/rpi/pigpio/download.html\" rel=\"nofollow\">pigpio documentation</a> for alternative installation method)</em></li>\n<li><code>sudo apt-get update</code></li>\n<li><code>sudo apt-get install pigpio python-pigpio python3-pigpio</code></li>\n<li>Install the pigpio_encoder library</li>\n<li><code>pip install pigpio_encoder</code> (consider add --user option)</li>\n<li>start pigpio daemon</li>\n<li><code>sudo pigpiod</code></li>\n</ul>\n<h2>How to use</h2>\n<ul>\n<li>\n<p>import the module</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pigpio_encoder</span> <span class=\"kn\">import</span> <span class=\"n\">pigpio_encoder</span>\n</pre>\n</li>\n<li>\n<p>create a callback function for the Rotary Encoder.</p>\n<blockquote>\n<p>You must pass a positional argument to retrieve the counter value.</p>\n</blockquote>\n<pre><span class=\"k\">def</span> <span class=\"nf\">rotary_callback</span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"p\">):</span>\n    <span class=\"c1\"># some action with counter...</span>\n</pre>\n</li>\n<li>\n<p>create callbacks functions for the Switch</p>\n<blockquote>\n<p>If you intend to use the switch you must create at least the \"short press\" callback. The \"long press\" callback is necessary if you want to use that feature.</p>\n</blockquote>\n<pre><span class=\"k\">def</span> <span class=\"nf\">sw_short_callback</span><span class=\"p\">():</span>\n    <span class=\"c1\"># some action...</span>\n</pre>\n<pre><span class=\"k\">def</span> <span class=\"nf\">sw_long_callback</span><span class=\"p\">():</span>\n    <span class=\"c1\"># some action...</span>\n  <span class=\"err\">```</span>\n</pre>\n</li>\n<li>\n<p>create the rotary object</p>\n<blockquote>\n<p>here you setup the pin number as keyword argument. If you don't pass the switch parameter the switch won't be activated. You must use BCM numbering.</p>\n</blockquote>\n<pre><span class=\"n\">my_rotary</span> <span class=\"o\">=</span> <span class=\"n\">pigpio_encoder</span><span class=\"o\">.</span><span class=\"n\">Rotary</span><span class=\"p\">(</span><span class=\"n\">clk</span><span class=\"o\">=</span><span class=\"n\">pin</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"n\">pin</span><span class=\"p\">,</span> <span class=\"n\">sw</span><span class=\"o\">=</span><span class=\"n\">pin</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>setup the rotary encoder</p>\n<blockquote>\n<p>here you can setup min and max values for the encoder, the increase/decrease value, a debouce value (default 300ms) and the callback function.</p>\n</blockquote>\n<pre><span class=\"n\">my_rotary</span><span class=\"o\">.</span><span class=\"n\">setup_rotary</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"n\">min_value</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"n\">max__value</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"n\">scale_value</span><span class=\"p\">,</span> <span class=\"n\">debounce</span><span class=\"o\">=</span><span class=\"n\">debounce_value</span><span class=\"p\">,</span> <span class=\"n\">rotary_callback</span><span class=\"o\">=</span><span class=\"n\">rotary_callback</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>setup the switch</p>\n<blockquote>\n<p>if you have specified the switch pin when creating the encoder object, here you can setup the debounce value, the long press option and the callbacks.</p>\n</blockquote>\n<pre><span class=\"n\">my_rotary</span><span class=\"o\">.</span><span class=\"n\">setup_switch</span><span class=\"p\">(</span><span class=\"n\">debounce</span><span class=\"o\">=</span><span class=\"n\">debounce_value</span><span class=\"p\">,</span> <span class=\"n\">long_press</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">sw_short_callback</span><span class=\"o\">=</span><span class=\"n\">sw_short_callback</span><span class=\"p\">,</span> <span class=\"n\">sw_long_callback</span><span class=\"o\">=</span><span class=\"n\">sw_long_callback</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>start the listener</p>\n<pre><span class=\"n\">my_rotary</span><span class=\"o\">.</span><span class=\"n\">watch</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ul>\n<hr>\n<h4>Basic example using default values</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pigpio_encoder</span> <span class=\"kn\">import</span> <span class=\"n\">pigpio_encoder</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">rotary_callback</span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Counter value: \"</span><span class=\"p\">,</span> <span class=\"n\">counter</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sw_short</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Switch pressed\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_rotary</span> <span class=\"o\">=</span> <span class=\"n\">pigpio_encoder</span><span class=\"o\">.</span><span class=\"n\">Rotary</span><span class=\"p\">(</span><span class=\"n\">clk</span><span class=\"o\">=</span><span class=\"mi\">27</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">sw</span><span class=\"o\">=</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"n\">my_rotary</span><span class=\"o\">.</span><span class=\"n\">setup_rotary</span><span class=\"p\">(</span><span class=\"n\">rotary_callback</span><span class=\"o\">=</span><span class=\"n\">rotary_callback</span><span class=\"p\">)</span>\n<span class=\"n\">my_rotary</span><span class=\"o\">.</span><span class=\"n\">setup_switch</span><span class=\"p\">(</span><span class=\"n\">sw_short_callback</span><span class=\"o\">=</span><span class=\"n\">sw_short</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_rotary</span><span class=\"o\">.</span><span class=\"n\">watch</span><span class=\"p\">()</span>\n</pre>\n<hr>\n<h4>Example using all the Features</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pigpio_encoder</span> <span class=\"kn\">import</span> <span class=\"n\">pigpio_encoder</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">rotary_callback</span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Counter value: \"</span><span class=\"p\">,</span> <span class=\"n\">counter</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sw_short</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Switch short press\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sw_long</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Switch long press\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_rotary</span> <span class=\"o\">=</span> <span class=\"n\">pigpio_encoder</span><span class=\"o\">.</span><span class=\"n\">Rotary</span><span class=\"p\">(</span><span class=\"n\">clk</span><span class=\"o\">=</span><span class=\"mi\">27</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">sw</span><span class=\"o\">=</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"n\">my_rotary</span><span class=\"o\">.</span><span class=\"n\">setup_rotary</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">debounce</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">rotary_callback</span><span class=\"o\">=</span><span class=\"n\">rotary_callback</span><span class=\"p\">)</span>\n<span class=\"n\">my_rotary</span><span class=\"o\">.</span><span class=\"n\">setup_switch</span><span class=\"p\">(</span><span class=\"n\">debounce</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">long_press</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">sw_short_callback</span><span class=\"o\">=</span><span class=\"n\">sw_short</span><span class=\"p\">,</span> <span class=\"n\">sw_long_callback</span><span class=\"o\">=</span><span class=\"n\">sw_long</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_rotary</span><span class=\"o\">.</span><span class=\"n\">watch</span><span class=\"p\">()</span>\n</pre>\n<hr>\n<h2>Thanks to...</h2>\n<ul>\n<li><a href=\"https://github.com/joan2937\" rel=\"nofollow\">joan2937</a> for the awesome <a href=\"https://github.com/joan2937/pigpio\" rel=\"nofollow\">pigpio library</a></li>\n<li><a href=\"https://github.com/raphaelyancey\" rel=\"nofollow\">Raphael Yancey</a> for inspiring me this library with his <a href=\"https://github.com/raphaelyancey/pyKY040\" rel=\"nofollow\">similar project</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6556342, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f5e53afd3120e436edb457353c11b2c6", "sha256": "ceab25a5f7dbbf6f00466d312cabb2fd506e3622c2e903c007583b448277a9b9"}, "downloads": -1, "filename": "pigpio_encoder-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f5e53afd3120e436edb457353c11b2c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16157, "upload_time": "2019-01-04T14:41:45", "upload_time_iso_8601": "2019-01-04T14:41:45.708245Z", "url": "https://files.pythonhosted.org/packages/1d/37/8aea4be0e90c06abc1a1472f2eb627a75e842e9151bd9090378e88aabd8e/pigpio_encoder-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54f7a81468bbf0fca32902cd859cc5cf", "sha256": "4e32878232e33f91a3c8369ad1d8911f8e998f9f42987ffe782f4589d9542016"}, "downloads": -1, "filename": "pigpio_encoder-0.1.0.tar.gz", "has_sig": false, "md5_digest": "54f7a81468bbf0fca32902cd859cc5cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3919, "upload_time": "2019-01-04T14:41:47", "upload_time_iso_8601": "2019-01-04T14:41:47.897951Z", "url": "https://files.pythonhosted.org/packages/92/b6/e472b8c1db26d952fe64e69f2a59224eb7c300bc0a65a1590966eea45660/pigpio_encoder-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d532d40eb8c47c4375e369f338bbc384", "sha256": "b70532ee6f89bb88038bce5a5c8a3c04e256aa1a20f0cf824bec4d0d64e2bd2b"}, "downloads": -1, "filename": "pigpio_encoder-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d532d40eb8c47c4375e369f338bbc384", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16259, "upload_time": "2019-01-31T00:19:12", "upload_time_iso_8601": "2019-01-31T00:19:12.819329Z", "url": "https://files.pythonhosted.org/packages/9a/1a/894ed0243715e27e2a818f3f797ee6257f5bf58e8b963e5cc551d1b6597a/pigpio_encoder-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8d45d7373d93f33f362b3e74654836f", "sha256": "ac161ad192bd9931b23d3a20a530bc5b3a7272df8c3a5a8ded8c12d3e11181f0"}, "downloads": -1, "filename": "pigpio_encoder-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e8d45d7373d93f33f362b3e74654836f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4003, "upload_time": "2019-01-31T00:19:14", "upload_time_iso_8601": "2019-01-31T00:19:14.075326Z", "url": "https://files.pythonhosted.org/packages/8b/af/eb7b9566c18137972b8f3625a709a49bc71b79eded1b17ed2c7c8f1d1737/pigpio_encoder-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "0e637654016391ecd7321eea3d48a4d4", "sha256": "74208e7ee111f6fcc2fe0b6963024d40f1862ebfdeb236b548b1e70722077c24"}, "downloads": -1, "filename": "pigpio_encoder-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0e637654016391ecd7321eea3d48a4d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16253, "upload_time": "2019-02-05T01:56:32", "upload_time_iso_8601": "2019-02-05T01:56:32.107842Z", "url": "https://files.pythonhosted.org/packages/81/a5/fd126e9ae6ad9c179810f37e0d587096dadfc8b4e8f8300835ebab85685d/pigpio_encoder-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cea9382690ece47fde8b1d7ab48c96cb", "sha256": "f5c50cc98146fa57bdab5a0b756833d6c9db2bcea8123b916b0c2baadfdc6f12"}, "downloads": -1, "filename": "pigpio_encoder-0.2.1.tar.gz", "has_sig": false, "md5_digest": "cea9382690ece47fde8b1d7ab48c96cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3989, "upload_time": "2019-02-05T01:56:33", "upload_time_iso_8601": "2019-02-05T01:56:33.714605Z", "url": "https://files.pythonhosted.org/packages/b2/3e/c2388c1967296df703ecbbc9805a3a620ec72ad2f88f1c545aef5c00cd04/pigpio_encoder-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "49684982e509ad64bd051811de8ff0f6", "sha256": "fe5ff74fddca4299d28e6edcd5bf81023d45745a91c62ce315184386d8d8d546"}, "downloads": -1, "filename": "pigpio_encoder-0.2.2.tar.gz", "has_sig": false, "md5_digest": "49684982e509ad64bd051811de8ff0f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4031, "upload_time": "2020-02-02T00:44:32", "upload_time_iso_8601": "2020-02-02T00:44:32.270847Z", "url": "https://files.pythonhosted.org/packages/df/92/98ee547d2438148fe9905d9bef06d528ec31156c332b40c7b0c5be45b3fb/pigpio_encoder-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49684982e509ad64bd051811de8ff0f6", "sha256": "fe5ff74fddca4299d28e6edcd5bf81023d45745a91c62ce315184386d8d8d546"}, "downloads": -1, "filename": "pigpio_encoder-0.2.2.tar.gz", "has_sig": false, "md5_digest": "49684982e509ad64bd051811de8ff0f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4031, "upload_time": "2020-02-02T00:44:32", "upload_time_iso_8601": "2020-02-02T00:44:32.270847Z", "url": "https://files.pythonhosted.org/packages/df/92/98ee547d2438148fe9905d9bef06d528ec31156c332b40c7b0c5be45b3fb/pigpio_encoder-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:51 2020"}