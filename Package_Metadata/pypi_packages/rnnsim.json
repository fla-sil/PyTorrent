{"info": {"author": "Mandar Gogate", "author_email": "contact@mandargogate.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Overview\n\nRandom Neural Network Simulator implemented in Python.\n\n[![PyPI Version](https://img.shields.io/pypi/v/rnnsim.svg)](https://pypi.org/project/rnnsim)\n[![PyPI License](https://img.shields.io/pypi/l/rnnsim.svg)](https://pypi.org/project/rnnsim)\n\n# Setup\n\n## Requirements\n\n* Python 3.6+\n* NumPy\n* Sklearn \n\n## Installation\n\nInstall this library directly into an activated virtual environment:\n\n```bash\n$ pip install rnnsim\n```\n\nor add it to your [Poetry](https://poetry.eustace.io/) project:\n\n```bash\n$ poetry add rnnsim\n```\n\n# Usage\n\nAfter installation, the package can either be used as:\n\n```python\n\nfrom rnnsim.model import SequentialRNN\n\nsequential_model = SequentialRNN([2, 2, 1])\nsequential_model.compile()\nsequential_model.fit(train_data=(X_train, y_train), epochs=50, metrics=\"acc\")\nprint(sequential_model.score((X_test, y_test)))\n```\n\nor \n\n```python\nfrom rnnsim.RNN import RNN\n\n# define model connections\nconn_plus = {\n    1: [3, 4], 2: [3, 4],\n    3: [5], 4: [5], 5: []}\nconn_minus = {\n    1: [3, 4], 2: [3, 4],\n    3: [5], 4: [5], 5: []}\nmodel = RNN(n_total=5, input_neurons=2, output_neurons=1, conn_plus=conn_plus, conn_minus=conn_minus)\nmodel.fit(epochs=N_Iterations, train_data=(X, Y))\n```\n\n\nReferences\n\n1. E. Gelenbe, Random neural networks with negative and positive signals and product\nform solution,\" Neural Computation, vol. 1, no. 4, pp. 502-511, 1989.\n2. E. Gelenbe, Stability of the random neural network model,\" Neural Computation, vol.\n2, no. 2, pp. 239-247, 1990.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.org/project/rnnsim", "keywords": "", "license": "MIT", "maintainer": "Mandar Gogate", "maintainer_email": "contact@mandargogate.com", "name": "rnnsim", "package_url": "https://pypi.org/project/rnnsim/", "platform": "", "project_url": "https://pypi.org/project/rnnsim/", "project_urls": {"Documentation": "https://rnnsim.readthedocs.io", "Homepage": "https://pypi.org/project/rnnsim", "Repository": "https://github.com/MandarGogate/RNNSim"}, "release_url": "https://pypi.org/project/rnnsim/0.1/", "requires_dist": ["numpy (>=1.16.1,<2.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "Random Neural Network Simulator implemented in Python.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Overview</h1>\n<p>Random Neural Network Simulator implemented in Python.</p>\n<p><a href=\"https://pypi.org/project/rnnsim\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4fd3d9535d006e9aa9ee75a4deafe6bff0636708/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f726e6e73696d2e737667\"></a>\n<a href=\"https://pypi.org/project/rnnsim\" rel=\"nofollow\"><img alt=\"PyPI License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/beee039693f8a3a286d1eeea3515786ad390cfe2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f726e6e73696d2e737667\"></a></p>\n<h1>Setup</h1>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6+</li>\n<li>NumPy</li>\n<li>Sklearn</li>\n</ul>\n<h2>Installation</h2>\n<p>Install this library directly into an activated virtual environment:</p>\n<pre>$ pip install rnnsim\n</pre>\n<p>or add it to your <a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">Poetry</a> project:</p>\n<pre>$ poetry add rnnsim\n</pre>\n<h1>Usage</h1>\n<p>After installation, the package can either be used as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rnnsim.model</span> <span class=\"kn\">import</span> <span class=\"n\">SequentialRNN</span>\n\n<span class=\"n\">sequential_model</span> <span class=\"o\">=</span> <span class=\"n\">SequentialRNN</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">sequential_model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">()</span>\n<span class=\"n\">sequential_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">train_data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">),</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"s2\">\"acc\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sequential_model</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">((</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)))</span>\n</pre>\n<p>or</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rnnsim.RNN</span> <span class=\"kn\">import</span> <span class=\"n\">RNN</span>\n\n<span class=\"c1\"># define model connections</span>\n<span class=\"n\">conn_plus</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n<span class=\"n\">conn_minus</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">RNN</span><span class=\"p\">(</span><span class=\"n\">n_total</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">input_neurons</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">output_neurons</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">conn_plus</span><span class=\"o\">=</span><span class=\"n\">conn_plus</span><span class=\"p\">,</span> <span class=\"n\">conn_minus</span><span class=\"o\">=</span><span class=\"n\">conn_minus</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"n\">N_Iterations</span><span class=\"p\">,</span> <span class=\"n\">train_data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">))</span>\n</pre>\n<p>References</p>\n<ol>\n<li>E. Gelenbe, Random neural networks with negative and positive signals and product\nform solution,\" Neural Computation, vol. 1, no. 4, pp. 502-511, 1989.</li>\n<li>E. Gelenbe, Stability of the random neural network model,\" Neural Computation, vol.\n2, no. 2, pp. 239-247, 1990.</li>\n</ol>\n\n          </div>"}, "last_serial": 5827594, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "baa73e3aefc9b214893cecee308e0ea6", "sha256": "7cf0cc53cd4c89d28f0ec6e18df5d5b08b466994ddf1e22adc8db91b73c632a2"}, "downloads": -1, "filename": "rnnsim-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "baa73e3aefc9b214893cecee308e0ea6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7735, "upload_time": "2019-09-13T20:17:55", "upload_time_iso_8601": "2019-09-13T20:17:55.394049Z", "url": "https://files.pythonhosted.org/packages/89/51/484fd628ae76350f555648c1d27e4b329f55f93815e28f44530d008276cb/rnnsim-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04566ea8b6bfd2c7312ee8b425b932c7", "sha256": "a39263686c8c72e1129536af121f9d7b3fb98f6de7adc7446e605271b051e817"}, "downloads": -1, "filename": "rnnsim-0.1.tar.gz", "has_sig": false, "md5_digest": "04566ea8b6bfd2c7312ee8b425b932c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7161, "upload_time": "2019-09-13T20:17:57", "upload_time_iso_8601": "2019-09-13T20:17:57.910143Z", "url": "https://files.pythonhosted.org/packages/d7/c1/6ccd1bdde27b2e63ee4f5167ac00f2297bb37c63f479980ff6603a416d9e/rnnsim-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "baa73e3aefc9b214893cecee308e0ea6", "sha256": "7cf0cc53cd4c89d28f0ec6e18df5d5b08b466994ddf1e22adc8db91b73c632a2"}, "downloads": -1, "filename": "rnnsim-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "baa73e3aefc9b214893cecee308e0ea6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7735, "upload_time": "2019-09-13T20:17:55", "upload_time_iso_8601": "2019-09-13T20:17:55.394049Z", "url": "https://files.pythonhosted.org/packages/89/51/484fd628ae76350f555648c1d27e4b329f55f93815e28f44530d008276cb/rnnsim-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04566ea8b6bfd2c7312ee8b425b932c7", "sha256": "a39263686c8c72e1129536af121f9d7b3fb98f6de7adc7446e605271b051e817"}, "downloads": -1, "filename": "rnnsim-0.1.tar.gz", "has_sig": false, "md5_digest": "04566ea8b6bfd2c7312ee8b425b932c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7161, "upload_time": "2019-09-13T20:17:57", "upload_time_iso_8601": "2019-09-13T20:17:57.910143Z", "url": "https://files.pythonhosted.org/packages/d7/c1/6ccd1bdde27b2e63ee4f5167ac00f2297bb37c63f479980ff6603a416d9e/rnnsim-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:08 2020"}