{"info": {"author": "Shipeng Feng", "author_email": "fsp261@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "Django gRPC Framework\n=====================\n\n.. image:: https://img.shields.io/pypi/v/djangogrpcframework.svg\n   :target: https://img.shields.io/pypi/v/djangogrpcframework.svg\n\n.. image:: https://readthedocs.org/projects/djangogrpcframework/badge/?version=latest\n   :target: https://readthedocs.org/projects/djangogrpcframework/badge/?version=latest\n\n.. image:: https://travis-ci.org/fengsp/django-grpc-framework.svg?branch=master\n   :target: https://travis-ci.org/fengsp/django-grpc-framework.svg?branch=master\n\n.. image:: https://img.shields.io/pypi/pyversions/djangogrpcframework\n   :target: https://img.shields.io/pypi/pyversions/djangogrpcframework\n\n.. image:: https://img.shields.io/pypi/l/djangogrpcframework\n   :target: https://img.shields.io/pypi/l/djangogrpcframework\n\nDjango gRPC framework is a toolkit for building gRPC services, inspired by\ndjangorestframework.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n    \n    $ pip install djangogrpcframework\n\nAdd ``django_grpc_framework`` to ``INSTALLED_APPS`` setting::\n\n    INSTALLED_APPS = [\n        ...\n        'django_grpc_framework',\n    ]\n\n\nDemo\n----\n\nHere is a quick example of using gRPC framework to build a simple\nmodel-backed service for accessing users, startup a new project:\n\n.. code-block:: bash\n    \n    $ django-admin startproject demo\n    $ python manage.py migrate\n\nNow define protos in ``demo.proto``::\n\n    syntax = \"proto3\";\n\n    package demo;\n\n    import \"google/protobuf/empty.proto\";\n\n    message User { \n        int32 id = 1;\n        string username = 2;\n        string email = 3;\n    }   \n\n    service UserController {\n        rpc List(google.protobuf.Empty) returns (stream User) {}\n        rpc Create(User) returns (User) {}\n        rpc Retrieve(User) returns (User) {}\n        rpc Update(User) returns (User) {}\n        rpc Destroy(User) returns (google.protobuf.Empty) {}\n    }\n\nGenerate gRPC code::\n\n    python -m grpc_tools.protoc --proto_path=./ --python_out=./ --grpc_python_out=./ ./demo.proto\n\nNow edit the ``demo/urls.py`` module:\n\n.. code-block:: python\n\n    from django.contrib.auth.models import User\n    from rest_framework import serializers\n    from django_grpc_framework import generics\n    import demo_pb2\n    import demo_pb2_grpc\n\n\n    class UserSerializer(serializers.ModelSerializer):\n        class Meta:\n            model = User\n            fields = ['id', 'username', 'email']\n\n\n    class UserService(generics.ModelService):\n        queryset = User.objects.all()\n        serializer_class = UserSerializer\n        protobuf_class = demo_pb2.User\n\n\n    urlpatterns = []\n    def grpc_handlers(server):\n        demo_pb2_grpc.add_UserControllerServicer_to_server(UserService.as_servicer(), server)\n\nThat's it, we're done!\n\n.. code-block:: bash\n    \n    $ python manage.py grpcrunserver --dev\n\nYou can now run a gRPC client to access the service:\n\n.. code-block:: python\n\n    from google.protobuf import empty_pb2\n\n    with grpc.insecure_channel('localhost:50051') as channel:\n        stub = demo_pb2_grpc.UserControllerStub(channel)\n        for user in stub.List(empty_pb2.Empty()):\n            print(user, end='')\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fengsp/django-grpc-framework", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "djangogrpcframework", "package_url": "https://pypi.org/project/djangogrpcframework/", "platform": "", "project_url": "https://pypi.org/project/djangogrpcframework/", "project_urls": {"Homepage": "https://github.com/fengsp/django-grpc-framework"}, "release_url": "https://pypi.org/project/djangogrpcframework/0.1/", "requires_dist": null, "requires_python": "", "summary": "gRPC for Django.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://img.shields.io/pypi/v/djangogrpcframework.svg\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/djangogrpcframework.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54352c72150bc2ad64910d0d7bf90974085a53a2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f677270636672616d65776f726b2e737667\"></a>\n<a href=\"https://readthedocs.org/projects/djangogrpcframework/badge/?version=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/djangogrpcframework/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f23654a08da2583673d45e39984840c094bf36e3/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646a616e676f677270636672616d65776f726b2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/fengsp/django-grpc-framework.svg?branch=master\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/fengsp/django-grpc-framework.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddf815ff4c19ad4903e065492fa686277f1a90b6/68747470733a2f2f7472617669732d63692e6f72672f66656e6773702f646a616e676f2d677270632d6672616d65776f726b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://img.shields.io/pypi/pyversions/djangogrpcframework\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/djangogrpcframework\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1896eb1fa68def44247974a9c1db50d30340ab95/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f677270636672616d65776f726b\"></a>\n<a href=\"https://img.shields.io/pypi/l/djangogrpcframework\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/djangogrpcframework\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3bb1aa589b3d844abfc51110f9d31928ada01fba/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f646a616e676f677270636672616d65776f726b\"></a>\n<p>Django gRPC framework is a toolkit for building gRPC services, inspired by\ndjangorestframework.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install djangogrpcframework\n</pre>\n<p>Add <tt>django_grpc_framework</tt> to <tt>INSTALLED_APPS</tt> setting:</p>\n<pre>INSTALLED_APPS = [\n    ...\n    'django_grpc_framework',\n]\n</pre>\n</div>\n<div id=\"demo\">\n<h2>Demo</h2>\n<p>Here is a quick example of using gRPC framework to build a simple\nmodel-backed service for accessing users, startup a new project:</p>\n<pre>$ django-admin startproject demo\n$ python manage.py migrate\n</pre>\n<p>Now define protos in <tt>demo.proto</tt>:</p>\n<pre>syntax = \"proto3\";\n\npackage demo;\n\nimport \"google/protobuf/empty.proto\";\n\nmessage User {\n    int32 id = 1;\n    string username = 2;\n    string email = 3;\n}\n\nservice UserController {\n    rpc List(google.protobuf.Empty) returns (stream User) {}\n    rpc Create(User) returns (User) {}\n    rpc Retrieve(User) returns (User) {}\n    rpc Update(User) returns (User) {}\n    rpc Destroy(User) returns (google.protobuf.Empty) {}\n}\n</pre>\n<p>Generate gRPC code:</p>\n<pre>python -m grpc_tools.protoc --proto_path=./ --python_out=./ --grpc_python_out=./ ./demo.proto\n</pre>\n<p>Now edit the <tt>demo/urls.py</tt> module:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework</span> <span class=\"kn\">import</span> <span class=\"n\">serializers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_grpc_framework</span> <span class=\"kn\">import</span> <span class=\"n\">generics</span>\n<span class=\"kn\">import</span> <span class=\"nn\">demo_pb2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">demo_pb2_grpc</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'email'</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserService</span><span class=\"p\">(</span><span class=\"n\">generics</span><span class=\"o\">.</span><span class=\"n\">ModelService</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n    <span class=\"n\">protobuf_class</span> <span class=\"o\">=</span> <span class=\"n\">demo_pb2</span><span class=\"o\">.</span><span class=\"n\">User</span>\n\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">def</span> <span class=\"nf\">grpc_handlers</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">):</span>\n    <span class=\"n\">demo_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">add_UserControllerServicer_to_server</span><span class=\"p\">(</span><span class=\"n\">UserService</span><span class=\"o\">.</span><span class=\"n\">as_servicer</span><span class=\"p\">(),</span> <span class=\"n\">server</span><span class=\"p\">)</span>\n</pre>\n<p>That\u2019s it, we\u2019re done!</p>\n<pre>$ python manage.py grpcrunserver --dev\n</pre>\n<p>You can now run a gRPC client to access the service:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">google.protobuf</span> <span class=\"kn\">import</span> <span class=\"n\">empty_pb2</span>\n\n<span class=\"k\">with</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">insecure_channel</span><span class=\"p\">(</span><span class=\"s1\">'localhost:50051'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n    <span class=\"n\">stub</span> <span class=\"o\">=</span> <span class=\"n\">demo_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">UserControllerStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">stub</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">empty_pb2</span><span class=\"o\">.</span><span class=\"n\">Empty</span><span class=\"p\">()):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7169678, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "57c9413677b6e577ba2c301abb24d258", "sha256": "e75c56913ad1de14045a118cd96d6449175d5e66491939c5ad91d7b27d12956e"}, "downloads": -1, "filename": "djangogrpcframework-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "57c9413677b6e577ba2c301abb24d258", "packagetype": "bdist_wheel", "python_version": "3.8", "requires_python": null, "size": 7855, "upload_time": "2020-05-02T14:56:28", "upload_time_iso_8601": "2020-05-02T14:56:28.940083Z", "url": "https://files.pythonhosted.org/packages/c7/a3/a2232b0bc3a19766b2980984b642172907f54b32eca2afe87465ee07a7dd/djangogrpcframework-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d36a83be581559567c818d5ef68f2a2", "sha256": "1cf513e4142017baa4eb367e01d4cf547ebef717a7c98181064d15855c6e85f5"}, "downloads": -1, "filename": "djangogrpcframework-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6d36a83be581559567c818d5ef68f2a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2748, "upload_time": "2020-05-02T14:53:51", "upload_time_iso_8601": "2020-05-02T14:53:51.654826Z", "url": "https://files.pythonhosted.org/packages/b4/7f/bc7a7f700450122d3570909260b0b4cf4d6765021063b10a4eb6db31362b/djangogrpcframework-0.0.1.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "6da48e9a79a87ca313ad97fc6f994eda", "sha256": "11d58f74dbd2a5d9797b77fb850e6f8a02a7a5c3248614ea16dee8b3f040de1b"}, "downloads": -1, "filename": "djangogrpcframework-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6da48e9a79a87ca313ad97fc6f994eda", "packagetype": "bdist_wheel", "python_version": "3.8", "requires_python": null, "size": 15529, "upload_time": "2020-05-05T05:53:27", "upload_time_iso_8601": "2020-05-05T05:53:27.861171Z", "url": "https://files.pythonhosted.org/packages/93/26/81f86038a3d24878217168a5c897b05b0bf573df680fcc679f14a04f2bb9/djangogrpcframework-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15f9f4d0d1766b3c277aced6f480051a", "sha256": "5a11af014ab0e9d840e8e84ab3b2df3c140f74d757c10af1a2b24e516a338842"}, "downloads": -1, "filename": "djangogrpcframework-0.1.tar.gz", "has_sig": false, "md5_digest": "15f9f4d0d1766b3c277aced6f480051a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10456, "upload_time": "2020-05-05T05:53:22", "upload_time_iso_8601": "2020-05-05T05:53:22.954462Z", "url": "https://files.pythonhosted.org/packages/99/8a/bd703adb86764269336d0c9b4c1b777e38da9fd17397bb85f9f5a9326dcc/djangogrpcframework-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6da48e9a79a87ca313ad97fc6f994eda", "sha256": "11d58f74dbd2a5d9797b77fb850e6f8a02a7a5c3248614ea16dee8b3f040de1b"}, "downloads": -1, "filename": "djangogrpcframework-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6da48e9a79a87ca313ad97fc6f994eda", "packagetype": "bdist_wheel", "python_version": "3.8", "requires_python": null, "size": 15529, "upload_time": "2020-05-05T05:53:27", "upload_time_iso_8601": "2020-05-05T05:53:27.861171Z", "url": "https://files.pythonhosted.org/packages/93/26/81f86038a3d24878217168a5c897b05b0bf573df680fcc679f14a04f2bb9/djangogrpcframework-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15f9f4d0d1766b3c277aced6f480051a", "sha256": "5a11af014ab0e9d840e8e84ab3b2df3c140f74d757c10af1a2b24e516a338842"}, "downloads": -1, "filename": "djangogrpcframework-0.1.tar.gz", "has_sig": false, "md5_digest": "15f9f4d0d1766b3c277aced6f480051a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10456, "upload_time": "2020-05-05T05:53:22", "upload_time_iso_8601": "2020-05-05T05:53:22.954462Z", "url": "https://files.pythonhosted.org/packages/99/8a/bd703adb86764269336d0c9b4c1b777e38da9fd17397bb85f9f5a9326dcc/djangogrpcframework-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:47 2020"}