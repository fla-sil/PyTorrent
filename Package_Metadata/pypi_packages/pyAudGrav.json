{"info": {"author": "Patrick Tumulty", "author_email": "ptumulty1@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pyAudGrav\n\npyAudGrav is a compositional tool, implemented in python, that allows a user to algorithmically edit and rearrange audio clips, both in time and space, using gravity. Gravity, in this case, is metaphor used to describe the relationship between sound objects.\n\n![Simple Example (gConst = 2)](/DOCUMENTATION/images/stimmen_shift.png)\n*Note: This is a subtle shift example that is meant to illustrate the direction that audio events move in relationship to other events.*\n\nAfter the audio file is read, the program will edit out each audio event and treat it as an independent sound object. An `AudioEvent()` in this case, is defined as a section of audio that is preceded and followed by the noise floor of the original sound file. To approximate the behavior of gravity for these audio events we use Newton's universal law of gravity. The law describes that the force due to gravity is equal to the product between two masses divided by their distance squared and multiplied by a gravitational constant. \n\n![Newtons Law of Gravity](/DOCUMENTATION/images/NewtonsLaw2.png)\n\nAudio events, based on their mass and distance from other events, will excerpt an attractive force on other audio events. For our purposes, mass is equated as the RMS value of each event and the distance is the time, in seconds squared, in between each events peak index. When actually calculating gravity, we would multiply the equation by the gravitational constant, 9.81 meters per seconds squared, but since audio has no gravitational constant this parameter is exposed to the user to affect the magnitude of shifting. The end result is a new audio file with events that have shifted in time and space (stereo panning) based on mass and distances. \n\n\n\n\n## Installation\n\nTo install use... \n\n`pip install pyAudGrav` \n\nor\n\n`pip install git+https://github.com/patrickTumulty/pyAudGrav`\n\n## Getting Started \n\nThe package install comes with several example audio files that can be quickly loaded via the following functions. NOTE: `pyAudGrav` currently only supports the importing of MONO files. After the initial analysis the new file can be exported to MONO or STEREO.  \n\n```python\nload_example1() # example1_stimmen.wav\nload_example2() # example2_tones.wav\nload_example3() # example3_potsPans.wav\nload_example4() # example4_pingPong.wav\nload_example5() # example5_hey.wav\n```\nThese files can also be downloaded directly from the github repository [/DOCUMENTATION/IncludedExamples]. To use one of these examples you can use the \nfollowing code. \n\n```python\nimport pyAudGrav \nimport matplotlib.pyplot as plt\n\nio = pyAudGrav.load_example1()                                 # pre packaged audio example\n\nanalyzer = pyAudGrav.AudioAnalysis(io.data, io.sample_rate)    # create an analyzer object \n\nenv = analyzer.get_end_peak(analyzer.data)                     # generate envelope \n\nanalyzer.calc_shift(analyzer.data, env, gConst=4)              # calculate gravity shifting\n\nrStruct = pyAudGrav.AudioReconstruct(len(analyzer.data), \n                                    analyzer.audio_events)     # create reconstruction object\n\nnew_signal = rStruct.reconstruct_stereo()                      # reconstruct stereo signal\n\nio.writeWav(\"Example1_before.wav)                   # original\nio.writeWav(\"Example1_after.wav\", new_signal)       # new audio file \n\n# == Plot New Signal == \n\nplt.title(\"Reconstructed Signal Over Original Signal\")\nplt.xlabel(\"Time (samples)\")\nplt.ylabel(\"Amplitude\")\nplt.plot([i + rStruct.correction for i in range(len(analyzer.data))],\n         [item for item in analyzer.data],\n         'grey')\nplt.plot(new_signal, 'r')\nplt.plot([obj.peakIdx + obj.offset + rStruct.correction for obj in analyzer.audio_events], \n         [obj.panOffset * 0.01 for obj in analyzer.audio_events], \n         '.b')\nplt.show()\n\n```\n\nTo use your own audio file simply swap...  \n\n`io = pyAudGrav.load_example1()` with `io = pyAudGrav.AudioIO(\"/filePath\")`\n\npyAudGrav has a built in function called `loop_gravity()` that allows the user to iterate over the same data set multiple times. This approach yields interesting and different results to that of the example above. The syntax for achieving this is similar to the previous example with a couple differences. In this example `loop_gravity()` is used in place of `calc_shift()`. In addition `loop_gravity()` will return the final iteration of the looped data. This means that there is no need to create a reconstruction object as is seen in the previous example. Note that `loop_gravity()` will deconstruct and reconstruct the data as a mono data array until the final iteration where it will become stereo. \n\n```python\nimport pyAudGrav\nimport matplotlib.pyplot as plt\n\nio = pyAudGrav.load_example1()\n\nanalyzer = pyAudGrav.AudioAnalysis(io.data, io.sample_rate)\n\nenv = analyzer.get_env_peak(analyzer.data)\n\nnew_signal = analyzer.loop_gravity(analyzer.data, env, numLoops=4, gConst=4, plot=False)\n\nio.writeWav(\"Example1_after.wav\", r)\n\nplt.plot([i + analyzer.rStruct.correction for i in range(len(analyzer.data))],\n         [item for item in analyzer.data],\n         'grey')\nplt.plot(new_signal,\n         'red')\nplt.plot([item.peakIdx + item.offset + analyzer.rStruct.correction for item in analyzer.audio_events],\n         [item.panOffset * 0.01 for item in analyzer.audio_events],\n         '.blue')\nplt.show()\n\n```\n\n![Simple Gravity Example](/DOCUMENTATION/images/stimmen_gravity.gif)\n\nThe code above illustrates the minimum code required to create a new audio file. Examination of the `calc_shift()` and `loop_gravity()` functions will reveal some of the other parameters available to fine tune the pyAudGrav algorithm. For best results the user is encouraged to experiment with these parameters.\n\n**For a more in depth overview and explanation of pyAudGrav and its classes, please refer to the DOCUMENTATION folder above.**", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/patrickTumulty/audGrav", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyAudGrav", "package_url": "https://pypi.org/project/pyAudGrav/", "platform": "", "project_url": "https://pypi.org/project/pyAudGrav/", "project_urls": {"Homepage": "https://github.com/patrickTumulty/audGrav"}, "release_url": "https://pypi.org/project/pyAudGrav/0.1.5/", "requires_dist": null, "requires_python": ">=3.7.3", "summary": "Algorithmically edit and rearrange audio clips, both in time and space, using the equation of gravity.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyAudGrav</h1>\n<p>pyAudGrav is a compositional tool, implemented in python, that allows a user to algorithmically edit and rearrange audio clips, both in time and space, using gravity. Gravity, in this case, is metaphor used to describe the relationship between sound objects.</p>\n<p><img alt=\"Simple Example (gConst = 2)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b6d6aa4fc025e11ab6da21520856680b74ee3eb/2f444f43554d454e544154494f4e2f696d616765732f7374696d6d656e5f73686966742e706e67\">\n<em>Note: This is a subtle shift example that is meant to illustrate the direction that audio events move in relationship to other events.</em></p>\n<p>After the audio file is read, the program will edit out each audio event and treat it as an independent sound object. An <code>AudioEvent()</code> in this case, is defined as a section of audio that is preceded and followed by the noise floor of the original sound file. To approximate the behavior of gravity for these audio events we use Newton's universal law of gravity. The law describes that the force due to gravity is equal to the product between two masses divided by their distance squared and multiplied by a gravitational constant.</p>\n<p><img alt=\"Newtons Law of Gravity\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0221fc0b0997d972436777256c2a7005f346640f/2f444f43554d454e544154494f4e2f696d616765732f4e6577746f6e734c6177322e706e67\"></p>\n<p>Audio events, based on their mass and distance from other events, will excerpt an attractive force on other audio events. For our purposes, mass is equated as the RMS value of each event and the distance is the time, in seconds squared, in between each events peak index. When actually calculating gravity, we would multiply the equation by the gravitational constant, 9.81 meters per seconds squared, but since audio has no gravitational constant this parameter is exposed to the user to affect the magnitude of shifting. The end result is a new audio file with events that have shifted in time and space (stereo panning) based on mass and distances.</p>\n<h2>Installation</h2>\n<p>To install use...</p>\n<p><code>pip install pyAudGrav</code></p>\n<p>or</p>\n<p><code>pip install git+https://github.com/patrickTumulty/pyAudGrav</code></p>\n<h2>Getting Started</h2>\n<p>The package install comes with several example audio files that can be quickly loaded via the following functions. NOTE: <code>pyAudGrav</code> currently only supports the importing of MONO files. After the initial analysis the new file can be exported to MONO or STEREO.</p>\n<pre><span class=\"n\">load_example1</span><span class=\"p\">()</span> <span class=\"c1\"># example1_stimmen.wav</span>\n<span class=\"n\">load_example2</span><span class=\"p\">()</span> <span class=\"c1\"># example2_tones.wav</span>\n<span class=\"n\">load_example3</span><span class=\"p\">()</span> <span class=\"c1\"># example3_potsPans.wav</span>\n<span class=\"n\">load_example4</span><span class=\"p\">()</span> <span class=\"c1\"># example4_pingPong.wav</span>\n<span class=\"n\">load_example5</span><span class=\"p\">()</span> <span class=\"c1\"># example5_hey.wav</span>\n</pre>\n<p>These files can also be downloaded directly from the github repository [/DOCUMENTATION/IncludedExamples]. To use one of these examples you can use the\nfollowing code.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyAudGrav</span> \n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">io</span> <span class=\"o\">=</span> <span class=\"n\">pyAudGrav</span><span class=\"o\">.</span><span class=\"n\">load_example1</span><span class=\"p\">()</span>                                 <span class=\"c1\"># pre packaged audio example</span>\n\n<span class=\"n\">analyzer</span> <span class=\"o\">=</span> <span class=\"n\">pyAudGrav</span><span class=\"o\">.</span><span class=\"n\">AudioAnalysis</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">sample_rate</span><span class=\"p\">)</span>    <span class=\"c1\"># create an analyzer object </span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">get_end_peak</span><span class=\"p\">(</span><span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>                     <span class=\"c1\"># generate envelope </span>\n\n<span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">calc_shift</span><span class=\"p\">(</span><span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">gConst</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>              <span class=\"c1\"># calculate gravity shifting</span>\n\n<span class=\"n\">rStruct</span> <span class=\"o\">=</span> <span class=\"n\">pyAudGrav</span><span class=\"o\">.</span><span class=\"n\">AudioReconstruct</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">),</span> \n                                    <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">audio_events</span><span class=\"p\">)</span>     <span class=\"c1\"># create reconstruction object</span>\n\n<span class=\"n\">new_signal</span> <span class=\"o\">=</span> <span class=\"n\">rStruct</span><span class=\"o\">.</span><span class=\"n\">reconstruct_stereo</span><span class=\"p\">()</span>                      <span class=\"c1\"># reconstruct stereo signal</span>\n\n<span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">writeWav</span><span class=\"p\">(</span><span class=\"s2\">\"Example1_before.wav)                   # original</span>\n<span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">writeWav</span><span class=\"p\">(</span><span class=\"s2\">\"Example1_after.wav\"</span><span class=\"p\">,</span> <span class=\"n\">new_signal</span><span class=\"p\">)</span>       <span class=\"c1\"># new audio file </span>\n\n<span class=\"c1\"># == Plot New Signal == </span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s2\">\"Reconstructed Signal Over Original Signal\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s2\">\"Time (samples)\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s2\">\"Amplitude\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">rStruct</span><span class=\"o\">.</span><span class=\"n\">correction</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">))],</span>\n         <span class=\"p\">[</span><span class=\"n\">item</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">],</span>\n         <span class=\"s1\">'grey'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">new_signal</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">peakIdx</span> <span class=\"o\">+</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">offset</span> <span class=\"o\">+</span> <span class=\"n\">rStruct</span><span class=\"o\">.</span><span class=\"n\">correction</span> <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">audio_events</span><span class=\"p\">],</span> \n         <span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">panOffset</span> <span class=\"o\">*</span> <span class=\"mf\">0.01</span> <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">audio_events</span><span class=\"p\">],</span> \n         <span class=\"s1\">'.b'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>To use your own audio file simply swap...</p>\n<p><code>io = pyAudGrav.load_example1()</code> with <code>io = pyAudGrav.AudioIO(\"/filePath\")</code></p>\n<p>pyAudGrav has a built in function called <code>loop_gravity()</code> that allows the user to iterate over the same data set multiple times. This approach yields interesting and different results to that of the example above. The syntax for achieving this is similar to the previous example with a couple differences. In this example <code>loop_gravity()</code> is used in place of <code>calc_shift()</code>. In addition <code>loop_gravity()</code> will return the final iteration of the looped data. This means that there is no need to create a reconstruction object as is seen in the previous example. Note that <code>loop_gravity()</code> will deconstruct and reconstruct the data as a mono data array until the final iteration where it will become stereo.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyAudGrav</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">io</span> <span class=\"o\">=</span> <span class=\"n\">pyAudGrav</span><span class=\"o\">.</span><span class=\"n\">load_example1</span><span class=\"p\">()</span>\n\n<span class=\"n\">analyzer</span> <span class=\"o\">=</span> <span class=\"n\">pyAudGrav</span><span class=\"o\">.</span><span class=\"n\">AudioAnalysis</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">sample_rate</span><span class=\"p\">)</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">get_env_peak</span><span class=\"p\">(</span><span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">new_signal</span> <span class=\"o\">=</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">loop_gravity</span><span class=\"p\">(</span><span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">numLoops</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">gConst</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">writeWav</span><span class=\"p\">(</span><span class=\"s2\">\"Example1_after.wav\"</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">rStruct</span><span class=\"o\">.</span><span class=\"n\">correction</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">))],</span>\n         <span class=\"p\">[</span><span class=\"n\">item</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">],</span>\n         <span class=\"s1\">'grey'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">new_signal</span><span class=\"p\">,</span>\n         <span class=\"s1\">'red'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">peakIdx</span> <span class=\"o\">+</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">offset</span> <span class=\"o\">+</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">rStruct</span><span class=\"o\">.</span><span class=\"n\">correction</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">audio_events</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">panOffset</span> <span class=\"o\">*</span> <span class=\"mf\">0.01</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">audio_events</span><span class=\"p\">],</span>\n         <span class=\"s1\">'.blue'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"Simple Gravity Example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/780c49bab617fb6a8edb804ee704de4c72958fc2/2f444f43554d454e544154494f4e2f696d616765732f7374696d6d656e5f677261766974792e676966\"></p>\n<p>The code above illustrates the minimum code required to create a new audio file. Examination of the <code>calc_shift()</code> and <code>loop_gravity()</code> functions will reveal some of the other parameters available to fine tune the pyAudGrav algorithm. For best results the user is encouraged to experiment with these parameters.</p>\n<p><strong>For a more in depth overview and explanation of pyAudGrav and its classes, please refer to the DOCUMENTATION folder above.</strong></p>\n\n          </div>"}, "last_serial": 6280957, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "a95b2d152016df40991de2672a177187", "sha256": "c827c404a0e563bc4313e096d5fdcec85c21d674df75b026b543ba1ed0dfb686"}, "downloads": -1, "filename": "pyAudGrav-0.1.5.tar.gz", "has_sig": false, "md5_digest": "a95b2d152016df40991de2672a177187", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.3", "size": 1700520, "upload_time": "2019-12-11T20:54:00", "upload_time_iso_8601": "2019-12-11T20:54:00.155891Z", "url": "https://files.pythonhosted.org/packages/2c/e4/00f0cf27a0af956fc6a5b570fee30ee69d50477f904f028b833866b6d35f/pyAudGrav-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a95b2d152016df40991de2672a177187", "sha256": "c827c404a0e563bc4313e096d5fdcec85c21d674df75b026b543ba1ed0dfb686"}, "downloads": -1, "filename": "pyAudGrav-0.1.5.tar.gz", "has_sig": false, "md5_digest": "a95b2d152016df40991de2672a177187", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.3", "size": 1700520, "upload_time": "2019-12-11T20:54:00", "upload_time_iso_8601": "2019-12-11T20:54:00.155891Z", "url": "https://files.pythonhosted.org/packages/2c/e4/00f0cf27a0af956fc6a5b570fee30ee69d50477f904f028b833866b6d35f/pyAudGrav-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:38 2020"}