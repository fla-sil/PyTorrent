{"info": {"author": "Robert Thille", "author_email": "rthille@ciena.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Twisted", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Communications", "Topic :: System :: Distributed Computing"], "description": "\nAfkak is a [Twisted](https://twistedmatrix.com/)-native [Apache Kafka](https://kafka.apache.org/) client library.\nIt provides support for:\n\n* Producing messages, with automatic batching and optional compression.\n* Consuming messages, with group coordination and automatic commit.\n\nLearn more in the **[documentation](https://afkak.readthedocs.io/en/latest/)**, download [from PyPI](https://pypi.org/projects/afkak), or review the [contribution guidelines](./CONTRIBUTING.md).\nPlease report any issues [on GitHub](https://github.com/ciena/afkak/issues).\n\n# Status\n\nAfkak supports these Pythons:\n\n- CPython 2.7\n- CPython 3.5, 3.6, and 3.7 (in Afkak 3.0.0 and later)\n- PyPy and PyPy3 6.0+\n\nWe aim to support Kafka 1.1.<var>x</var> and later.\nIntegration tests are run against these Kafka broker versions:\n\n- 0.9.0.1\n- 1.1.1\n\nTesting against 2.0.0 is planned (see [#45](https://github.com/ciena/afkak/issues/45)).\n\nNewer broker releases will generally function, but not all Afkak features will work on older brokers.\nIn particular, the coordinated consumer won\u2019t work before Kafka 0.9.0.1.\nWe don\u2019t recommend deploying such old releases anyway, as they have serious bugs.\n\n# Usage\n\n### High level\n\nNote: This code is not meant to be runnable. See [producer\\_example](./examples/producer_example)\nand [consumer\\_example](./examples/consumer_example) for runnable example code.\n\n```python\nfrom afkak.client import KafkaClient\nfrom afkak.consumer import Consumer\nfrom afkak.producer import Producer\nfrom afkak.common import (OFFSET_EARLIEST, PRODUCER_ACK_ALL_REPLICAS,\n    PRODUCER_ACK_LOCAL_WRITE)\n\nkClient = KafkaClient(\"localhost:9092\")\n\n# To send messages\nproducer = Producer(kClient)\nd1 = producer.send_messages(\"my-topic\", msgs=[b\"some message\"])\nd2 = producer.send_messages(\"my-topic\", msgs=[b\"takes a list\", b\"of messages\"])\n# To get confirmations/errors on the sends, add callbacks to the returned deferreds\nd1.addCallbacks(handleResponses, handleErrors)\n\n# To wait for acknowledgements\n# PRODUCER_ACK_LOCAL_WRITE : server will wait till the data is written to\n#                         a local log before sending response\n# [ the default ]\n# PRODUCER_ACK_ALL_REPLICAS : server will block until the message is committed\n#                            by all in sync replicas before sending a response\nproducer = Producer(kClient,\n                    req_acks=Producer.PRODUCER_ACK_LOCAL_WRITE,\n                    ack_timeout=2000)\n\nresponseD = producer.send_messages(\"my-topic\", msgs=[b\"message\"])\n\n# Using twisted's @inlineCallbacks:\nresponses = yield responseD\nif response:\n    print(response[0].error)\n    print(response[0].offset)\n\n# To send messages in batch: You can use a producer with any of the\n# partitioners for doing this. The following producer will collect\n# messages in batch and send them to Kafka after 20 messages are\n# collected or every 60 seconds (whichever comes first). You can\n# also batch by number of bytes.\n# Notes:\n# * If the producer dies before the messages are sent, the caller would\n# * not have had the callbacks called on the send_messages() returned\n# * deferreds, and so can retry.\n# * Calling producer.stop() before the messages are sent will\n# errback() the deferred(s) returned from the send_messages call(s)\nproducer = Producer(kClient, batch_send=True,\n                    batch_send_every_n=20,\n                    batch_send_every_t=60)\nresponseD1 = producer.send_messages(\"my-topic\", msgs=[b\"message\"])\nresponseD2 = producer.send_messages(\"my-topic\", msgs=[b\"message 2\"])\n\n# To consume messages\n# define a function which takes a list of messages to process and\n# possibly returns a deferred which fires when the processing is\n# complete.\ndef processor_func(consumer, messages):\n    #  Store_Messages_In_Database may return a deferred\n    result = store_messages_in_database(messages)\n    # record last processed message\n    consumer.commit()\n    return result\n\nthe_partition = 3  # Consume only from partition 3.\nconsumer = Consumer(kClient, \"my-topic\", the_partition, processor_func)\nd = consumer.start(OFFSET_EARLIEST)  # Start reading at earliest message\n# The deferred returned by consumer.start() will fire when an error\n# occurs that can't handled by the consumer, or when consumer.stop()\n# is called\nyield d\n\nconsumer.stop()\nkClient.close()\n```\n\n#### Keyed messages\n```python\nfrom afkak.client import KafkaClient\nfrom afkak.producer import Producer\nfrom afkak.partitioner import HashedPartitioner, RoundRobinPartitioner\n\nkafka = KafkaClient(\"localhost:9092\")\n\n# Use the HashedPartitioner so that the producer will use the optional key\n# argument on send_messages()\nproducer = Producer(kafka, partitioner_class=HashedPartitioner)\nproducer.send_messages(\"my-topic\", \"key1\", [b\"some message\"])\nproducer.send_messages(\"my-topic\", \"key2\", [b\"this method\"])\n\n\n```\n\n### Low level\n\n```python\nfrom afkak.client import KafkaClient\nkafka = KafkaClient(\"localhost:9092\")\nreq = ProduceRequest(topic=\"my-topic\", partition=1,\n    messages=[KafkaProtocol.encode_message(b\"some message\")])\nresps = afkak.send_produce_request(payloads=[req], fail_on_error=True)\nkafka.close()\n\nresps[0].topic      # b\"my-topic\"\nresps[0].partition  # 1\nresps[0].error      # 0 (hopefully)\nresps[0].offset     # offset of the first message sent in this request\n```\n\n# Install\n\nAfkak releases are [available on PyPI][afkak-pypi].\n\nBecause the Afkak dependencies [Twisted][twisted] and [python-snappy][python-snappy] have binary extension modules you will need to install the Python development headers for the interpreter you wish to use:\n\n[afkak-pypi]: https://pypi.python.org/pypi/afkak\n[twisted]: https://pypi.python.org/pypi/Twisted\n[python-snappy]: https://pypi.python.org/pypi/python-snappy\n\n<table>\n<tr>\n<td>Debian/Ubuntu:\n<td><code>sudo apt-get install build-essential python-dev python3-dev pypy-dev pypy3-dev libsnappy-dev</code>\n<tr>\n<td>OS X\n<td><code>brew install python pypy snappy</code></br>\n<code>pip install virtualenv</code></td>\n</table>\n\nThen Afkak can be [installed with pip as usual][pip-install]:\n\n[pip-install]: https://packaging.python.org/en/latest/installing/\n\n# License\n\nCopyright 2013, 2014, 2015 David Arthur under Apache License, v2.0. See `LICENSE`\n\nCopyright 2014, 2015 Cyan, Inc. under Apache License, v2.0. See `LICENSE`\n\nCopyright 2015, 2016, 2017, 2018, 2019 Ciena Corporation under Apache License, v2.0. See `LICENSE`\n\nThis project began as a port of the [kafka-python][kafka-python] library to Twisted.\n\n[kafka-python]: https://github.com/mumrah/kafka-python\n\nSee [AUTHORS.md](./AUTHORS.md) for the full contributor list.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ciena/afkak", "keywords": "Kafka client,distributed messaging,txkafka", "license": "Apache License 2.0", "maintainer": "Tom Most", "maintainer_email": "twm@freecog.net", "name": "afkak", "package_url": "https://pypi.org/project/afkak/", "platform": "", "project_url": "https://pypi.org/project/afkak/", "project_urls": {"Documentation": "https://afkak.readthedocs.io/en/latest/", "Homepage": "https://github.com/ciena/afkak", "Issues": "https://github.com/ciena/afkak/issues", "Source": "https://github.com/ciena/afkak"}, "release_url": "https://pypi.org/project/afkak/19.10.0/", "requires_dist": ["attrs (>=19.2.0)", "six", "Twisted (>=18.7.0)", "pyhash ; extra == 'fastmurmur2'", "python-snappy (>=0.5) ; extra == 'snappy'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "summary": "Twisted Python client for Apache Kafka", "version": "19.10.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Afkak is a <a href=\"https://twistedmatrix.com/\" rel=\"nofollow\">Twisted</a>-native <a href=\"https://kafka.apache.org/\" rel=\"nofollow\">Apache Kafka</a> client library.\nIt provides support for:</p>\n<ul>\n<li>Producing messages, with automatic batching and optional compression.</li>\n<li>Consuming messages, with group coordination and automatic commit.</li>\n</ul>\n<p>Learn more in the <strong><a href=\"https://afkak.readthedocs.io/en/latest/\" rel=\"nofollow\">documentation</a></strong>, download <a href=\"https://pypi.org/projects/afkak\" rel=\"nofollow\">from PyPI</a>, or review the <a href=\"./CONTRIBUTING.md\" rel=\"nofollow\">contribution guidelines</a>.\nPlease report any issues <a href=\"https://github.com/ciena/afkak/issues\" rel=\"nofollow\">on GitHub</a>.</p>\n<h1>Status</h1>\n<p>Afkak supports these Pythons:</p>\n<ul>\n<li>CPython 2.7</li>\n<li>CPython 3.5, 3.6, and 3.7 (in Afkak 3.0.0 and later)</li>\n<li>PyPy and PyPy3 6.0+</li>\n</ul>\n<p>We aim to support Kafka 1.1.<var>x</var> and later.\nIntegration tests are run against these Kafka broker versions:</p>\n<ul>\n<li>0.9.0.1</li>\n<li>1.1.1</li>\n</ul>\n<p>Testing against 2.0.0 is planned (see <a href=\"https://github.com/ciena/afkak/issues/45\" rel=\"nofollow\">#45</a>).</p>\n<p>Newer broker releases will generally function, but not all Afkak features will work on older brokers.\nIn particular, the coordinated consumer won\u2019t work before Kafka 0.9.0.1.\nWe don\u2019t recommend deploying such old releases anyway, as they have serious bugs.</p>\n<h1>Usage</h1>\n<h3>High level</h3>\n<p>Note: This code is not meant to be runnable. See <a href=\"./examples/producer_example\" rel=\"nofollow\">producer_example</a>\nand <a href=\"./examples/consumer_example\" rel=\"nofollow\">consumer_example</a> for runnable example code.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">afkak.client</span> <span class=\"kn\">import</span> <span class=\"n\">KafkaClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">afkak.consumer</span> <span class=\"kn\">import</span> <span class=\"n\">Consumer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">afkak.producer</span> <span class=\"kn\">import</span> <span class=\"n\">Producer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">afkak.common</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">OFFSET_EARLIEST</span><span class=\"p\">,</span> <span class=\"n\">PRODUCER_ACK_ALL_REPLICAS</span><span class=\"p\">,</span>\n    <span class=\"n\">PRODUCER_ACK_LOCAL_WRITE</span><span class=\"p\">)</span>\n\n<span class=\"n\">kClient</span> <span class=\"o\">=</span> <span class=\"n\">KafkaClient</span><span class=\"p\">(</span><span class=\"s2\">\"localhost:9092\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To send messages</span>\n<span class=\"n\">producer</span> <span class=\"o\">=</span> <span class=\"n\">Producer</span><span class=\"p\">(</span><span class=\"n\">kClient</span><span class=\"p\">)</span>\n<span class=\"n\">d1</span> <span class=\"o\">=</span> <span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"s2\">\"my-topic\"</span><span class=\"p\">,</span> <span class=\"n\">msgs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"some message\"</span><span class=\"p\">])</span>\n<span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"s2\">\"my-topic\"</span><span class=\"p\">,</span> <span class=\"n\">msgs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"takes a list\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"of messages\"</span><span class=\"p\">])</span>\n<span class=\"c1\"># To get confirmations/errors on the sends, add callbacks to the returned deferreds</span>\n<span class=\"n\">d1</span><span class=\"o\">.</span><span class=\"n\">addCallbacks</span><span class=\"p\">(</span><span class=\"n\">handleResponses</span><span class=\"p\">,</span> <span class=\"n\">handleErrors</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To wait for acknowledgements</span>\n<span class=\"c1\"># PRODUCER_ACK_LOCAL_WRITE : server will wait till the data is written to</span>\n<span class=\"c1\">#                         a local log before sending response</span>\n<span class=\"c1\"># [ the default ]</span>\n<span class=\"c1\"># PRODUCER_ACK_ALL_REPLICAS : server will block until the message is committed</span>\n<span class=\"c1\">#                            by all in sync replicas before sending a response</span>\n<span class=\"n\">producer</span> <span class=\"o\">=</span> <span class=\"n\">Producer</span><span class=\"p\">(</span><span class=\"n\">kClient</span><span class=\"p\">,</span>\n                    <span class=\"n\">req_acks</span><span class=\"o\">=</span><span class=\"n\">Producer</span><span class=\"o\">.</span><span class=\"n\">PRODUCER_ACK_LOCAL_WRITE</span><span class=\"p\">,</span>\n                    <span class=\"n\">ack_timeout</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">)</span>\n\n<span class=\"n\">responseD</span> <span class=\"o\">=</span> <span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"s2\">\"my-topic\"</span><span class=\"p\">,</span> <span class=\"n\">msgs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"message\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Using twisted's @inlineCallbacks:</span>\n<span class=\"n\">responses</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">responseD</span>\n<span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To send messages in batch: You can use a producer with any of the</span>\n<span class=\"c1\"># partitioners for doing this. The following producer will collect</span>\n<span class=\"c1\"># messages in batch and send them to Kafka after 20 messages are</span>\n<span class=\"c1\"># collected or every 60 seconds (whichever comes first). You can</span>\n<span class=\"c1\"># also batch by number of bytes.</span>\n<span class=\"c1\"># Notes:</span>\n<span class=\"c1\"># * If the producer dies before the messages are sent, the caller would</span>\n<span class=\"c1\"># * not have had the callbacks called on the send_messages() returned</span>\n<span class=\"c1\"># * deferreds, and so can retry.</span>\n<span class=\"c1\"># * Calling producer.stop() before the messages are sent will</span>\n<span class=\"c1\"># errback() the deferred(s) returned from the send_messages call(s)</span>\n<span class=\"n\">producer</span> <span class=\"o\">=</span> <span class=\"n\">Producer</span><span class=\"p\">(</span><span class=\"n\">kClient</span><span class=\"p\">,</span> <span class=\"n\">batch_send</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">batch_send_every_n</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n                    <span class=\"n\">batch_send_every_t</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"n\">responseD1</span> <span class=\"o\">=</span> <span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"s2\">\"my-topic\"</span><span class=\"p\">,</span> <span class=\"n\">msgs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"message\"</span><span class=\"p\">])</span>\n<span class=\"n\">responseD2</span> <span class=\"o\">=</span> <span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"s2\">\"my-topic\"</span><span class=\"p\">,</span> <span class=\"n\">msgs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"message 2\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># To consume messages</span>\n<span class=\"c1\"># define a function which takes a list of messages to process and</span>\n<span class=\"c1\"># possibly returns a deferred which fires when the processing is</span>\n<span class=\"c1\"># complete.</span>\n<span class=\"k\">def</span> <span class=\"nf\">processor_func</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">,</span> <span class=\"n\">messages</span><span class=\"p\">):</span>\n    <span class=\"c1\">#  Store_Messages_In_Database may return a deferred</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">store_messages_in_database</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">)</span>\n    <span class=\"c1\"># record last processed message</span>\n    <span class=\"n\">consumer</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">the_partition</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>  <span class=\"c1\"># Consume only from partition 3.</span>\n<span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"n\">Consumer</span><span class=\"p\">(</span><span class=\"n\">kClient</span><span class=\"p\">,</span> <span class=\"s2\">\"my-topic\"</span><span class=\"p\">,</span> <span class=\"n\">the_partition</span><span class=\"p\">,</span> <span class=\"n\">processor_func</span><span class=\"p\">)</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">consumer</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">OFFSET_EARLIEST</span><span class=\"p\">)</span>  <span class=\"c1\"># Start reading at earliest message</span>\n<span class=\"c1\"># The deferred returned by consumer.start() will fire when an error</span>\n<span class=\"c1\"># occurs that can't handled by the consumer, or when consumer.stop()</span>\n<span class=\"c1\"># is called</span>\n<span class=\"k\">yield</span> <span class=\"n\">d</span>\n\n<span class=\"n\">consumer</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n<span class=\"n\">kClient</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h4>Keyed messages</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">afkak.client</span> <span class=\"kn\">import</span> <span class=\"n\">KafkaClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">afkak.producer</span> <span class=\"kn\">import</span> <span class=\"n\">Producer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">afkak.partitioner</span> <span class=\"kn\">import</span> <span class=\"n\">HashedPartitioner</span><span class=\"p\">,</span> <span class=\"n\">RoundRobinPartitioner</span>\n\n<span class=\"n\">kafka</span> <span class=\"o\">=</span> <span class=\"n\">KafkaClient</span><span class=\"p\">(</span><span class=\"s2\">\"localhost:9092\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Use the HashedPartitioner so that the producer will use the optional key</span>\n<span class=\"c1\"># argument on send_messages()</span>\n<span class=\"n\">producer</span> <span class=\"o\">=</span> <span class=\"n\">Producer</span><span class=\"p\">(</span><span class=\"n\">kafka</span><span class=\"p\">,</span> <span class=\"n\">partitioner_class</span><span class=\"o\">=</span><span class=\"n\">HashedPartitioner</span><span class=\"p\">)</span>\n<span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"s2\">\"my-topic\"</span><span class=\"p\">,</span> <span class=\"s2\">\"key1\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"some message\"</span><span class=\"p\">])</span>\n<span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"s2\">\"my-topic\"</span><span class=\"p\">,</span> <span class=\"s2\">\"key2\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"this method\"</span><span class=\"p\">])</span>\n</pre>\n<h3>Low level</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">afkak.client</span> <span class=\"kn\">import</span> <span class=\"n\">KafkaClient</span>\n<span class=\"n\">kafka</span> <span class=\"o\">=</span> <span class=\"n\">KafkaClient</span><span class=\"p\">(</span><span class=\"s2\">\"localhost:9092\"</span><span class=\"p\">)</span>\n<span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">ProduceRequest</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"s2\">\"my-topic\"</span><span class=\"p\">,</span> <span class=\"n\">partition</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">KafkaProtocol</span><span class=\"o\">.</span><span class=\"n\">encode_message</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"some message\"</span><span class=\"p\">)])</span>\n<span class=\"n\">resps</span> <span class=\"o\">=</span> <span class=\"n\">afkak</span><span class=\"o\">.</span><span class=\"n\">send_produce_request</span><span class=\"p\">(</span><span class=\"n\">payloads</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">req</span><span class=\"p\">],</span> <span class=\"n\">fail_on_error</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">kafka</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">resps</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">topic</span>      <span class=\"c1\"># b\"my-topic\"</span>\n<span class=\"n\">resps</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">partition</span>  <span class=\"c1\"># 1</span>\n<span class=\"n\">resps</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">error</span>      <span class=\"c1\"># 0 (hopefully)</span>\n<span class=\"n\">resps</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">offset</span>     <span class=\"c1\"># offset of the first message sent in this request</span>\n</pre>\n<h1>Install</h1>\n<p>Afkak releases are <a href=\"https://pypi.python.org/pypi/afkak\" rel=\"nofollow\">available on PyPI</a>.</p>\n<p>Because the Afkak dependencies <a href=\"https://pypi.python.org/pypi/Twisted\" rel=\"nofollow\">Twisted</a> and <a href=\"https://pypi.python.org/pypi/python-snappy\" rel=\"nofollow\">python-snappy</a> have binary extension modules you will need to install the Python development headers for the interpreter you wish to use:</p>\n<table>\n<tr>\n<td>Debian/Ubuntu:\n</td><td><code>sudo apt-get install build-essential python-dev python3-dev pypy-dev pypy3-dev libsnappy-dev</code>\n</td></tr><tr>\n<td>OS X\n</td><td><code>brew install python pypy snappy</code><br>\n<code>pip install virtualenv</code></td>\n</tr></table>\n<p>Then Afkak can be <a href=\"https://packaging.python.org/en/latest/installing/\" rel=\"nofollow\">installed with pip as usual</a>:</p>\n<h1>License</h1>\n<p>Copyright 2013, 2014, 2015 David Arthur under Apache License, v2.0. See <code>LICENSE</code></p>\n<p>Copyright 2014, 2015 Cyan, Inc. under Apache License, v2.0. See <code>LICENSE</code></p>\n<p>Copyright 2015, 2016, 2017, 2018, 2019 Ciena Corporation under Apache License, v2.0. See <code>LICENSE</code></p>\n<p>This project began as a port of the <a href=\"https://github.com/mumrah/kafka-python\" rel=\"nofollow\">kafka-python</a> library to Twisted.</p>\n<p>See <a href=\"./AUTHORS.md\" rel=\"nofollow\">AUTHORS.md</a> for the full contributor list.</p>\n\n          </div>"}, "last_serial": 6020346, "releases": {"19.10.0": [{"comment_text": "", "digests": {"md5": "14c29f3c2fdab29061c3105cbe93a68f", "sha256": "bcf324332ebdf92517fa6ca0af862b401f6a00072f553f5a02c90d409e558ded"}, "downloads": -1, "filename": "afkak-19.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "14c29f3c2fdab29061c3105cbe93a68f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 172388, "upload_time": "2019-10-23T20:07:46", "upload_time_iso_8601": "2019-10-23T20:07:46.506427Z", "url": "https://files.pythonhosted.org/packages/c3/09/983a69bc064a3a48ae81ea81c2b5b9254f79e2f43b3fd493a9067d7ea441/afkak-19.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92f9cc0df408c07a1707dce0d475b54c", "sha256": "c740ed51f8490f7a3b66df4dedc5e340bdbbef228ccbe53a24bf022c0ce92d52"}, "downloads": -1, "filename": "afkak-19.10.0.tar.gz", "has_sig": false, "md5_digest": "92f9cc0df408c07a1707dce0d475b54c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 155940, "upload_time": "2019-10-23T20:07:50", "upload_time_iso_8601": "2019-10-23T20:07:50.770160Z", "url": "https://files.pythonhosted.org/packages/7a/ee/361c795c6f230d3c5d63c4793e11269f993637a3b2b519ac9950cef57811/afkak-19.10.0.tar.gz", "yanked": false}], "19.6.0a1": [{"comment_text": "", "digests": {"md5": "d5da045931b9d25ca5e75c3fb0bdbfff", "sha256": "8542ec676f28813bc0b2d83a46e70fb964eb26fa58c3b70c0e4320c73d787145"}, "downloads": -1, "filename": "afkak-19.6.0a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d5da045931b9d25ca5e75c3fb0bdbfff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 172112, "upload_time": "2019-06-18T21:51:10", "upload_time_iso_8601": "2019-06-18T21:51:10.894039Z", "url": "https://files.pythonhosted.org/packages/d6/4b/afbe2b10085cddfddafda9e2a06b6971f1b6f44ac8acea42aa95406141f3/afkak-19.6.0a1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "031756cb4592c44fb6d262f5f7a76d6c", "sha256": "e313bc38af2e4b7fcdf88b6a35f890f913825a6c68a25c2ef29606e1669e6d5d"}, "downloads": -1, "filename": "afkak-19.6.0a1.tar.gz", "has_sig": false, "md5_digest": "031756cb4592c44fb6d262f5f7a76d6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 151048, "upload_time": "2019-06-18T21:51:12", "upload_time_iso_8601": "2019-06-18T21:51:12.884304Z", "url": "https://files.pythonhosted.org/packages/d0/c7/6344bc203fb28e8d875a328aaf4d1de76d97b70985bc9489685fa328a8d3/afkak-19.6.0a1.tar.gz", "yanked": false}], "19.8.0": [{"comment_text": "", "digests": {"md5": "9af1128aaa6ae8bbed401978ab90e12c", "sha256": "339f2a1b0ca22ae861c5fbc4ff8d77a94d5699414409c10f58bd068a2ac20638"}, "downloads": -1, "filename": "afkak-19.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9af1128aaa6ae8bbed401978ab90e12c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 172716, "upload_time": "2019-08-31T01:22:05", "upload_time_iso_8601": "2019-08-31T01:22:05.805172Z", "url": "https://files.pythonhosted.org/packages/b3/f6/bc22321fb925b57b529df50631d8d57e8f85875bf51a41936bfcda77defe/afkak-19.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ca64a3ff283a3ae8e964a37401a9230", "sha256": "e8866051d0f1c9b78335d29f41b5340725c76de0bce29de3cd2ce8db73298e83"}, "downloads": -1, "filename": "afkak-19.8.0.tar.gz", "has_sig": false, "md5_digest": "2ca64a3ff283a3ae8e964a37401a9230", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 152291, "upload_time": "2019-08-31T01:22:07", "upload_time_iso_8601": "2019-08-31T01:22:07.875414Z", "url": "https://files.pythonhosted.org/packages/3b/1d/ee14341ec5aac06e6d9b3d7c593706708ce34817fab17a1878c1a2357435/afkak-19.8.0.tar.gz", "yanked": false}], "19.8.0b1": [{"comment_text": "", "digests": {"md5": "be25151b8022111528eed020b4e52345", "sha256": "387c339dd1b264c890e2ba3aa807b631236f2341f04a5290fb5d8cbbf57952a6"}, "downloads": -1, "filename": "afkak-19.8.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "be25151b8022111528eed020b4e52345", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 171837, "upload_time": "2019-08-08T22:05:13", "upload_time_iso_8601": "2019-08-08T22:05:13.593228Z", "url": "https://files.pythonhosted.org/packages/7a/45/e6216049c3619934772f1f1d3cd85830aef6a05f877553f0cf7f96c2022d/afkak-19.8.0b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04c7f19f5a319c276333237b85748239", "sha256": "abe99b3df8017d191240f983eaeb1e90e503646b2269caaa76e09844d3a543b6"}, "downloads": -1, "filename": "afkak-19.8.0b1.tar.gz", "has_sig": false, "md5_digest": "04c7f19f5a319c276333237b85748239", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 154640, "upload_time": "2019-08-08T22:05:15", "upload_time_iso_8601": "2019-08-08T22:05:15.653948Z", "url": "https://files.pythonhosted.org/packages/05/20/ee6202592c492c8c77576faa38a95426b5a0bf871afb9c146a29a5244479/afkak-19.8.0b1.tar.gz", "yanked": false}], "19.8.0b2": [{"comment_text": "", "digests": {"md5": "73e39533ecc6dc6b4929a1e7d8f857d8", "sha256": "b6390a2ef2f776f6b6cc3fe118ca7743482fad72cfb291b20d95269968749dd0"}, "downloads": -1, "filename": "afkak-19.8.0b2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "73e39533ecc6dc6b4929a1e7d8f857d8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 171993, "upload_time": "2019-08-22T02:29:43", "upload_time_iso_8601": "2019-08-22T02:29:43.061958Z", "url": "https://files.pythonhosted.org/packages/5f/80/f1adb7c155744ff0e904c3c7ec948e0a8a704eb931c24a4f2742e6096457/afkak-19.8.0b2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be0c267f427c4dc4e9aadb5a32e33a2f", "sha256": "4ad7617e330319293f85f1b55ba2bbdf8519eb19a834f63511b9a728268caa94"}, "downloads": -1, "filename": "afkak-19.8.0b2.tar.gz", "has_sig": false, "md5_digest": "be0c267f427c4dc4e9aadb5a32e33a2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 152403, "upload_time": "2019-08-22T02:29:47", "upload_time_iso_8601": "2019-08-22T02:29:47.253746Z", "url": "https://files.pythonhosted.org/packages/56/dd/d47213d5af62ebb8c43ce46bf70f3a3b7ed3fa5e35bb00d1dfc9c9e4cbab/afkak-19.8.0b2.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "984afa7c6529b94c9aa36d97484286f7", "sha256": "3ecd7a35ec583ca198e00d26758e81e2bb03ba430637e0cdeafbf0b4311ac880"}, "downloads": -1, "filename": "afkak-2.4.0-py2-none-any.whl", "has_sig": false, "md5_digest": "984afa7c6529b94c9aa36d97484286f7", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 109605, "upload_time": "2016-11-15T21:20:43", "upload_time_iso_8601": "2016-11-15T21:20:43.073901Z", "url": "https://files.pythonhosted.org/packages/ff/df/66db00b45ac8455524d677c5d55a9f6b850230c3382e6f39a822458466b2/afkak-2.4.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "761de31e8dfc92ba63b03453df8202d0", "sha256": "3ef9997856c45a124804d69f45b965aa6de61cce4c9233c07dd852830c892416"}, "downloads": -1, "filename": "afkak-2.4.0.tar.gz", "has_sig": false, "md5_digest": "761de31e8dfc92ba63b03453df8202d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94444, "upload_time": "2016-11-15T21:20:45", "upload_time_iso_8601": "2016-11-15T21:20:45.938759Z", "url": "https://files.pythonhosted.org/packages/aa/6f/02b4de214f3320a35df2ec1882499997a4ea194806be8a051157577aaa99/afkak-2.4.0.tar.gz", "yanked": false}], "2.9.0": [{"comment_text": "", "digests": {"md5": "56d164d8dc62c003f102a2b996957a20", "sha256": "aa15efa3de11fd47caa7f0927c4d69fb6cbee4c5b389e745899b959d77b5d996"}, "downloads": -1, "filename": "afkak-2.9.0-py2-none-any.whl", "has_sig": false, "md5_digest": "56d164d8dc62c003f102a2b996957a20", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 119956, "upload_time": "2019-01-05T22:11:08", "upload_time_iso_8601": "2019-01-05T22:11:08.057419Z", "url": "https://files.pythonhosted.org/packages/4d/be/76c7d4918227ca98326fae97ca852ff414776e3cca4513889d4e67c72fc5/afkak-2.9.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cb7fbb1c0e3868bd2d5ba59e9b1de56", "sha256": "a6a550bde89f13a2716099f918bb97690ec8373e9c5f1aa1a36abbbe61248b99"}, "downloads": -1, "filename": "afkak-2.9.0.tar.gz", "has_sig": false, "md5_digest": "4cb7fbb1c0e3868bd2d5ba59e9b1de56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107839, "upload_time": "2019-01-05T22:11:14", "upload_time_iso_8601": "2019-01-05T22:11:14.497574Z", "url": "https://files.pythonhosted.org/packages/4b/aa/a897572c043c3e1c63866be1dd2ecb81db8663374033dd285e76ba4e5f90/afkak-2.9.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "fc5228e723af4645407eb522e5998886", "sha256": "750d6599e24f05be97c9348005cf80360a7c97883288dbec4a9a395b35b5dc4f"}, "downloads": -1, "filename": "afkak-3.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fc5228e723af4645407eb522e5998886", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 142765, "upload_time": "2019-01-19T01:06:32", "upload_time_iso_8601": "2019-01-19T01:06:32.433792Z", "url": "https://files.pythonhosted.org/packages/8f/cc/8056c995028c2391d58ea8bda6587563a1849087389580531f8aa40537d5/afkak-3.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d811c82f9fadc45c057a95d4b5a65c24", "sha256": "9d30f4ad6dd2d8b5ed5ef7885a6d3b5d45fc493246346493ec8aa8de346f5e62"}, "downloads": -1, "filename": "afkak-3.0.0.tar.gz", "has_sig": false, "md5_digest": "d811c82f9fadc45c057a95d4b5a65c24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 129725, "upload_time": "2019-01-19T01:06:36", "upload_time_iso_8601": "2019-01-19T01:06:36.791695Z", "url": "https://files.pythonhosted.org/packages/f8/f4/02b3e3f4a137601741c1730d899e94ed85b1194127307154cfbdae4b6c68/afkak-3.0.0.tar.gz", "yanked": false}], "3.0.0.dev20181106": [{"comment_text": "", "digests": {"md5": "28e74072629af4e6dacf06e55f4c30d5", "sha256": "33de5deb67398c61f35cc69afba1027d36367ec4f953f6e11760e0cfbc4c285d"}, "downloads": -1, "filename": "afkak-3.0.0.dev20181106-py2-none-any.whl", "has_sig": false, "md5_digest": "28e74072629af4e6dacf06e55f4c30d5", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 128720, "upload_time": "2019-01-05T22:11:10", "upload_time_iso_8601": "2019-01-05T22:11:10.272026Z", "url": "https://files.pythonhosted.org/packages/1b/fe/09d5156168beae79f8e18e7f2ec15a203e0dc46a90eef2af0d318fb831ce/afkak-3.0.0.dev20181106-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3bab10ec029c81b4f91cf28412bad9fa", "sha256": "2ef304d7b5f58640d82b9560415c8b85f3535d03415eec78dea703762c33b8cb"}, "downloads": -1, "filename": "afkak-3.0.0.dev20181106.tar.gz", "has_sig": false, "md5_digest": "3bab10ec029c81b4f91cf28412bad9fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115481, "upload_time": "2019-01-05T22:11:16", "upload_time_iso_8601": "2019-01-05T22:11:16.274111Z", "url": "https://files.pythonhosted.org/packages/48/b5/a683756e1686e1ed422eab4f7f0858dfc4185fdb913f088f8d9faa9e79c6/afkak-3.0.0.dev20181106.tar.gz", "yanked": false}], "3.0.0.dev20181218": [{"comment_text": "", "digests": {"md5": "2e5eefc8e31b30f77443e34c40c46da8", "sha256": "7655a3d6ea7c5b29afc368ff6064cea2b20d9950be77c51230dd3c577d183892"}, "downloads": -1, "filename": "afkak-3.0.0.dev20181218-py2-none-any.whl", "has_sig": false, "md5_digest": "2e5eefc8e31b30f77443e34c40c46da8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 128716, "upload_time": "2019-01-05T22:11:12", "upload_time_iso_8601": "2019-01-05T22:11:12.436982Z", "url": "https://files.pythonhosted.org/packages/b7/49/3a1dca8a382bb4c021bf84e605f1b9fd55896dbfc7e1aebdc8d1a06e20a3/afkak-3.0.0.dev20181218-py2-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "14c29f3c2fdab29061c3105cbe93a68f", "sha256": "bcf324332ebdf92517fa6ca0af862b401f6a00072f553f5a02c90d409e558ded"}, "downloads": -1, "filename": "afkak-19.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "14c29f3c2fdab29061c3105cbe93a68f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 172388, "upload_time": "2019-10-23T20:07:46", "upload_time_iso_8601": "2019-10-23T20:07:46.506427Z", "url": "https://files.pythonhosted.org/packages/c3/09/983a69bc064a3a48ae81ea81c2b5b9254f79e2f43b3fd493a9067d7ea441/afkak-19.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92f9cc0df408c07a1707dce0d475b54c", "sha256": "c740ed51f8490f7a3b66df4dedc5e340bdbbef228ccbe53a24bf022c0ce92d52"}, "downloads": -1, "filename": "afkak-19.10.0.tar.gz", "has_sig": false, "md5_digest": "92f9cc0df408c07a1707dce0d475b54c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 155940, "upload_time": "2019-10-23T20:07:50", "upload_time_iso_8601": "2019-10-23T20:07:50.770160Z", "url": "https://files.pythonhosted.org/packages/7a/ee/361c795c6f230d3c5d63c4793e11269f993637a3b2b519ac9950cef57811/afkak-19.10.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:44 2020"}