{"info": {"author": "Steven Buss", "author_email": "steven.buss@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": ".. image:: https://travis-ci.org/sbuss/bitmerchant.svg?branch=master\n    :target: https://travis-ci.org/sbuss/bitmerchant\n\n.. image:: http://codecov.io/github/sbuss/bitmerchant/coverage.svg?branch=master\n    :target: http://codecov.io/github/sbuss/bitmerchant?branch=master\n\nBitmerchant\n===========\n\nBitmerchant is a work-in-progress python library for common bitcoin/altcoin\nmerchant uses.\n\nBitmerchant currently supports:\n\n.. _BIP32: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n\n#. Easy to use BIP32_ wallet for linking user payments with their accounts.\n\nThese features are planned (or in development where marked):\n\n#. Regular and M-of-N transactions (under development)\n#. A system that monitors the blockchain and sends out a signal when a\n   payment is received at an address you're tracking.\n#. Automatic forwarding transactions\n\n--------------\n\nIf you find this library useful, please consider a small donation.  Donations\nwill be used to reward developers for bugfixes.\n\n+--------------------------------------+--------------------------------------+\n| BTC                                  | Doge                                 |\n+======================================+======================================+\n| 19jSqVd8bpevi3qacBedkAdDqEXtGAn5t7   | DQ4b7RJfoniVwFsnrMJr6vi6n6UFeubdiv   |\n+--------------------------------------+--------------------------------------+\n| |Donate BTC|                         | |Donate DOGE|                        |\n+--------------------------------------+--------------------------------------+\n\nNOTICE\n======\n\n** **BUG NOTICE** **\n\nVersions of ``bitmerchant`` prior to ``0.1.8`` contained a caching bug that may\nhave resulted in calls to ``bip32.Wallet.get_child`` to return incorrect results.\nThe steps to reproduce the bug are unlikely and do not match the typical\nusage patterns of ``bitmerchant``.\n\n**At this time, no users are known to have been affected by this bug.**\n\nIf you have been affected by this bug and need help recovering any lost or\nmisplaced coins, please contact me directly at\nsteven.buss+bitmerchant@gmail.com.\n\nThe affected versions of ``bitmerchant`` have been removed from pypi. They\nhave not been untagged in git.\n\nThe two possible failure scenarios are: misplaced coins and stolen coins\n\nMisplaced Coins\n---------------\n\nThis is still unlikely, but slightly more likely than having your coins stolen.\n\nIn order to have misplaced coins as a result of the bug, all of the below\npoints must be true:\n\n#. Your master private key must be available for your code to load, rather than in a secure offline backup\n#. You call ``get_child`` directly, rather than ``create_new_address_for_user``\n#. You call ``get_child(n, is_prime=False)`` and ``get_child(n, is_prime=True)``\n    #. in the same python process\n    #. on the same wallet object\n    #. you display the public address of the second ``get_child`` call (in whichever order)\n\nIn this case, the bug would have resulted in the first ``get_child``'s address\nbeing shown. You can easily recover these misplaced coins by updating to\n``bitmerchant>=0.1.8``, regenerating the address you accidentally sent coins\nto, and moving them to a corrected destination. The \"deterministic\" part of\n\"hierarchical deterministic wallets\" really works to your advantage here.\n\nStolen Coins\n------------\n\nFirst, it is extremely unlikely that your code met all of the requirements\nto be affected by this bug. If you can answer \"yes\" to every one of the points\nbelow, then you should upgrade to ``bitmerchant>=0.1.8``, generate a new master\nprivate key, and move all coins to the new wallet as soon as possible.\n\nIn order to have coins stolen as a result of the bug, all of the below points\nmust be true:\n\n#. You expose your master public key to the public\n#. Your master private key must be available for your code to load, rather than in a secure offline backup\n#. You call ``get_child`` directly, rather than ``create_new_address_for_user``\n#. You call ``get_child(n, is_prime=False)`` and ``get_child(n, is_prime=True)``\n    #. in that order\n    #. in the same python process\n    #. on the same wallet object\n    #. with the intention of only giving the prime child to the user\n#. You give the public and private keys of child wallets to users\n\nInstallation\n============\n\nbitmerchant is on pypi_, so just use pip:\n\n.. _pypi: https://pypi.python.org/pypi/bitmerchant\n\n.. code-block:: bash\n\n    pip install bitmerchant\n\nThen to verify it's working:\n\n.. code-block:: python\n\n    from bitmerchant.wallet import Wallet\n\n    w = Wallet.from_master_secret(\"correct horse battery staple\")\n    assert w.to_address() == \"1AJ7EDxyRwyGNcL4scXfUU7XqYkmVcwHqe\"\n\nBIP32 wallets\n=============\n\nBIP32_ wallets are hierarchical deterministic wallets. They allow you to\ngenerate bitcoin/altcoin addresses without exposing your private key to a\npotentially insecure server.\n\nTo link a user with a new bitcoin address, you just need to provide the user's\nID to the ``create_new_address_for_user`` method:\n\nTL;DR\n-----\n\n.. code-block:: python\n\n    ## DO THIS ON AN OFFLINE MACHINE, NOT YOUR WEBSERVER\n    from bitmerchant.wallet import Wallet\n\n    # Create a wallet, and a primary child wallet for your app\n    my_wallet = Wallet.new_random_wallet()\n    print(my_wallet.serialize_b58(private=True))  # Write this down or print it out and keep in a secure location\n    project_0_wallet = my_wallet.get_child(0, is_prime=True)\n    project_0_public = project_0_wallet.public_copy()\n    print(project_0_public.serialize_b58(private=False))  # Put this in your app's settings file\n\n\n    ## THINGS BELOW ARE PUBLIC FOR YOUR WEBSERVER\n\n    # In your app's settings file, declare your public wallet:\n    WALLET_PUBKEY = \"<public output from above>\"\n\n    # Create a payment address for a user as needed:\n    from bitmerchant.wallet import Wallet\n    from myapp.settings import WALLET_PUBKEY\n\n    def get_payment_address_for_user(user):\n        user_id = user.id\n        assert isinstance(user_id, (int, long))\n        wallet = Wallet.deserialize(WALLET_PUBKEY)\n        wallet_for_user = wallet.create_new_address_for_user(user.id)\n        return wallet_for_user.to_address()\n\n.. _security:\n\nSecurity warning\n----------------\n\n\nBIP32 wallets have a vulnerability/bug that allows an attacker to recover the\nmaster private key when given a master public key and a publicly-derived\nprivate child. In other words:\n\n.. code-block:: python\n\n    from bitmerchant.wallet import Wallet\n\n    w = Wallet.new_random_wallet()\n    child = w.get_child(0, is_prime=False)  # public derivation of a private child\n    w_pub = w.public_copy()\n    master_public_key = w_pub.serialize_b58(private=False)\n    private_child_key = child.serialize_b58(private=True)\n\nGiven ``master_public_key`` and ``private_child_key``, the steps to recover the\nsecret master private key (``w``) are as simple as a subtraction on the\nelliptic curve. This has been implemented as ``Wallet.crack_private_key``,\nbecause if it's possible to do this, then anyone should be able to do it so the\nattack is well known:\n\n.. code-block:: python\n\n    public_master = Wallet.deserialize(master_public_key)\n    private_child = Wallet.deserialize(private_child_key)\n    private_master = public_master.crack_private_key(private_child)\n    assert private_master == w  # :(\n\nThis attack can be mitigated by these simple steps:\n\n#. NEVER give out your root master public key.\n#. When uploading a master public key to a webserver, always use a prime child\n   of your master root.\n#. Never give out a private child key unless the user you're giving it to\n   already has control of the parent private key (eg, for user-owned wallets).\n\nWhy \"always use a prime child of your master root\" in step 2? Because prime\nchildren use private derivation, which means they cannot be used to recover the\nparent private key (no easier than brute force, anyway).\n\nCreate a new wallet\n-------------------\n\nIf you haven't created a wallet yet, do so like this:\n\n**IMPORTANT** You must back up your wallet's private key, otherwise you won't\nbe able to retrieve the coins sent to your public addresses.\n\n.. code-block:: python\n\n    from bitmerchant.wallet import Wallet\n\n    my_wallet = Wallet.new_random_wallet()\n\n    # Then back up your private key\n\n    private_key = my_wallet.serialize()\n    print(private_key)\n    # Make sure that you can load your wallet successfully from this key\n    wallet_test = Wallet.deserialize(private_key)\n    assert my_wallet == wallet_test\n    # If that assertion fails then open a ticket!\n    # NOW WRITE DOWN THE PRIVATE KEY AND STORE IT IN A SECURE LOCATION\n\nNote that it's a good idea to supply some extra entropy to `new_random_wallet`\nin case your PRNG is compromised. You can accomplish this easily by banging on\nthe keyboard. Here's an example, yours should be *much* longer:\n\n.. code-block:: python\n\n    from bitmerchant.wallet import Wallet\n\n    wallet1 = Wallet.new_random_wallet('asdfasdfasdf')\n    wallet2 = Wallet.new_random_wallet('asdfasdfasdf')\n    assert(wallet1.get_private_key_hex() != wallet2.get_private_key_hex())\n\n    # They're completely different\n\nBIP32 wallets (or hierarchical deterministic wallets) allow you to create child\nwallets which can only generate public keys and don't expose a private key to\nan insecure server. You should create a new prime child wallet for every\nwebsite you run (or a new wallet entirely), and perhaps a new prime child for\neach user (though that requires pre-generating a bunch of prime children\noffline, since you need the private key). Try to use prime children where\npossible (see `security`_).\n\nIt's a good idea to create at least *one* prime child wallet for use on your\nwebsite. The thinking being that if your website's wallet gets compromised\nsomehow, you haven't completely lost control because your master wallet is\nsecured on an offline machine. You can use your master wallet to move any funds\nin compromised child wallets to new child wallets and you'll be ok.\n\nLet's generate a new child wallet for your first website!\n\n.. code-block:: python\n\n    # Lets assume you're loading a wallet from your safe private key backup\n    my_wallet = Wallet.deserialize(private_key)\n\n    # Create a new, public-only prime child wallet. Since you have the master\n    # private key, you can recreate this child at any time in the future and don't\n    # need to securely store its private key.\n    # Remember to generate this as a prime child! See the security notice above.\n    child = my_wallet.get_child(0, is_prime=True, as_private=False)\n\n    # And lets export this child key\n    public_key = child.serialize_b58(private=False)\n    print(public_key)\n\nYou can store your public key in your app's source code, as long as you never\nreveal any private keys. See the `security`_ notice above.\n\nBe aware that if someone gets a hold of your public key then they can generate\nall of your subsequent child addresses, which means they'll know exactly how\nmany coins you have. The attacker cannot spend any coins, however, unless they\nare able to recover the private key (see `security`_).\n\nGenerating new public addresses\n-------------------------------\n\nBIP32 wallets allow you to generate public addresses without revealing your\nprivate key. Just pass in the user ID that needs a wallet:\n\n.. code-block:: python\n\n    from bitmerchant.wallet import Wallet\n    from myapp.settings import WALLET_PUBKEY  # Created above\n\n    master_wallet = Wallet.deserialize(WALLET_PUBKEY)\n    user_wallet = master_wallet.create_new_address_for_user(user_id)\n    payment_address = user_wallet.to_address()\n\nThis assumes that ``user_id`` is a unique positive integer and does not change\nfor the life of the user (and is less than 2,147,483,648). Now any payments\nreceived at ``payment_address`` should be credited to the user identified by\n``user_id``.\n\nStaying secure\n==============\n\nPublic Keys\n-----------\n\nPublic keys are mostly safe to keep on a public webserver. However, even though\na public key does not allow an attacker to spend any of your coins, you should\nstill try to protect the public key from hackers or curious eyes.  Knowing the\npublic key allows an attacker to generate all possible child wallets and know\nexactly how many coins you have. This isn't terrible, but nobody likes having\ntheir books opened up like this.\n\nAs mentioned earlier, knowledge of a master public key and a non-prime private\nchild of that key is enough to be able to recover the master private key. Never\nreveal private keys to users unless they already own the master private parent.\n\nYour master public key can be used to generate a virtually unlimited number of\nchild public keys. Your users won't pay to your master public key, but instead\nyou'll use your master public key to generate a new wallet for each user.\n\nPrivate Keys\n------------\n\nYou must have the private key to spend any of your coins. If your private key\nis stolen then the hacker also has control of all of your coins. With a BIP32\nWallet, generating a new master wallet is one of the only times that you need\nto be paranoid (and you're not being paranoid if they really *are* out to get\nyou). Paranoia here is good because if anyone gets control of your master\nwallet they can spend all funds in all child wallets.\n\nYou should create your wallet on a computer that is not connected to the\ninternet. Ideally, this computer will *never* be connected to the internet\nafter you generate your private key. The safest way to do this is to run Ubuntu\non a livecd, install python and bitmerchant, and generate a new wallet.\n\nOnce you generate a new wallet you should write down the private key on a piece\nof paper (or print it out ...but can you *really* trust your printer?) and\nstore it in a secure location.\n\n.. code-block:: bash\n\n    sudo apt-get install python\n    sudo apt-get install pip\n\n    pip install bitmerchant\n    pip install ipython\n\n    # Then launch the ipython shell\n    ipython\n\nOnce inside your ipython shell, generate a new wallet:\n\n.. code-block:: python\n\n    from bitmerchant.wallet import Wallet\n\n    my_wallet = Wallet.new_random_wallet()\n\n    # Then back up your private key\n\n    private_key = my_wallet.serialize()\n    print(private_key)\n    # Write down this private key.\n    # Double check it.\n    # Then shut down the computer without connecting to the internet.\n\nMaster private key\n------------------\n\nYour master private key allows you to spend coins sent to any of your public\naddresses. Guard this with your life, and never put it on a computer that's\nconnected to the internet.\n\nMaster private keys must NEVER be put on the internet. They must NEVER be\nlocated on a computer that is even *connected* to the internet. The only key\nthat should be online is your PUBLIC key. Your private key should be written\ndown (yes, on paper) and stored in a safe location, or on a computer that is\nnever connected to the internet.\n\nSecurity wise, this is the most important part of generating secure public\npayment addresses. A master private key is the only way to retrieve the funds\npaid to a public address. You can use your master private key to generate the\nprivate keys of any child wallets, and then transfer those to a networked\ncomputer as necessary, if you want slightly smaller surface area for attacks.\n\nForthcoming versions of bitmerchant will allow you to generate transactions\noffline that you can safely transfer to a networked computer, allowing you to\nspend your child funds without ever putting a private key on a networked\nmachine.\n\nDevelopment\n===========\n\nI'd love for you to contribute to bitmerchant! If you can't write code, then\nplease open a ticket for feature requests or bugs you find!\n\nIf you can code and you'd like to submit a pull request, please be sure to\ninclude tests. This library is quite well tested and I intend to keep coverage\nabove 95% indefinitely.\n\nRewards may be given out to developers depending on the severity of bugs\nfound/patched. The donation addresses mentioned at the top of this document\nwill be used to fund rewards.\n\nTesting\n-------\n\nI use tox & travis-ci to test against all python versions >= 2.5. Locally,\nyou can use the `make test` target, which will only test against python-2.7.\nYou can, of course, call tox directly:\n\n.. code-block:: bash\n\n    make setup\n    tox\n    tox -e py34\n    tox -- tests.test_bip32:TestWallet\n\nNote that the full test suite on py-{2.5..3.4} takes about 5 minutes to run.\npypy and pypy3 are considerably slower at about 25 minutes, due to unoptimized\ncrypto operations.\n\nPackaging\n---------\n\nSee PACKAGING_\n\n.. _PACKAGING: https://raw.github.com/sbuss/bitmerchant/master/PACKAGING.md\n\n.. |Donate BTC| image:: https://raw.github.com/sbuss/bitmerchant/master/media/donation_btc_qr_code.gif\n.. |Donate DOGE| image:: https://raw.github.com/sbuss/bitmerchant/master/media/donation_doge_qr_code.gif", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/sbuss/bitmerchant/tarball/v0.1.8", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sbuss/bitmerchant", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "bitmerchant", "package_url": "https://pypi.org/project/bitmerchant/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bitmerchant/", "project_urls": {"Download": "https://github.com/sbuss/bitmerchant/tarball/v0.1.8", "Homepage": "https://github.com/sbuss/bitmerchant"}, "release_url": "https://pypi.org/project/bitmerchant/0.1.8/", "requires_dist": ["base58 (>=0.2.1)", "ecdsa (>=0.10)", "six (>=1.5.2)", "cachetools (>=1.1.1)"], "requires_python": null, "summary": "Bitcoin/altcoin merchant tools", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/sbuss/bitmerchant\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/sbuss/bitmerchant.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cdcc128669179223c73ce43c04eddd7f57ddade1/68747470733a2f2f7472617669732d63692e6f72672f73627573732f6269746d65726368616e742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://codecov.io/github/sbuss/bitmerchant?branch=master\" rel=\"nofollow\"><img alt=\"http://codecov.io/github/sbuss/bitmerchant/coverage.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/441053c536edacb95e463e9c23c9c3e13c5f0141/687474703a2f2f636f6465636f762e696f2f6769746875622f73627573732f6269746d65726368616e742f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"bitmerchant\">\n<h2>Bitmerchant</h2>\n<p>Bitmerchant is a work-in-progress python library for common bitcoin/altcoin\nmerchant uses.</p>\n<p>Bitmerchant currently supports:</p>\n<ol>\n<li>Easy to use <a href=\"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\" rel=\"nofollow\">BIP32</a> wallet for linking user payments with their accounts.</li>\n</ol>\n<p>These features are planned (or in development where marked):</p>\n<ol>\n<li>Regular and M-of-N transactions (under development)</li>\n<li>A system that monitors the blockchain and sends out a signal when a\npayment is received at an address you\u2019re tracking.</li>\n<li>Automatic forwarding transactions</li>\n</ol>\n<hr class=\"docutils\">\n<p>If you find this library useful, please consider a small donation.  Donations\nwill be used to reward developers for bugfixes.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>BTC</th>\n<th>Doge</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>19jSqVd8bpevi3qacBedkAdDqEXtGAn5t7</td>\n<td>DQ4b7RJfoniVwFsnrMJr6vi6n6UFeubdiv</td>\n</tr>\n<tr><td><img alt=\"Donate BTC\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1be09490670ac3c1e914455d651f3ae6752ce561/68747470733a2f2f7261772e6769746875622e636f6d2f73627573732f6269746d65726368616e742f6d61737465722f6d656469612f646f6e6174696f6e5f6274635f71725f636f64652e676966\"></td>\n<td><img alt=\"Donate DOGE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6fbd88de32d1ea13f72a45c0f0580f2df7382fe/68747470733a2f2f7261772e6769746875622e636f6d2f73627573732f6269746d65726368616e742f6d61737465722f6d656469612f646f6e6174696f6e5f646f67655f71725f636f64652e676966\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"notice\">\n<h2>NOTICE</h2>\n<p>** <strong>BUG NOTICE</strong> **</p>\n<p>Versions of <tt>bitmerchant</tt> prior to <tt>0.1.8</tt> contained a caching bug that may\nhave resulted in calls to <tt>bip32.Wallet.get_child</tt> to return incorrect results.\nThe steps to reproduce the bug are unlikely and do not match the typical\nusage patterns of <tt>bitmerchant</tt>.</p>\n<p><strong>At this time, no users are known to have been affected by this bug.</strong></p>\n<p>If you have been affected by this bug and need help recovering any lost or\nmisplaced coins, please contact me directly at\n<a href=\"mailto:steven.buss+bitmerchant%40gmail.com\">steven<span>.</span>buss+bitmerchant<span>@</span>gmail<span>.</span>com</a>.</p>\n<p>The affected versions of <tt>bitmerchant</tt> have been removed from pypi. They\nhave not been untagged in git.</p>\n<p>The two possible failure scenarios are: misplaced coins and stolen coins</p>\n<div id=\"misplaced-coins\">\n<h3>Misplaced Coins</h3>\n<p>This is still unlikely, but slightly more likely than having your coins stolen.</p>\n<p>In order to have misplaced coins as a result of the bug, all of the below\npoints must be true:</p>\n<ol>\n<li>Your master private key must be available for your code to load, rather than in a secure offline backup</li>\n<li>You call <tt>get_child</tt> directly, rather than <tt>create_new_address_for_user</tt></li>\n<li><dl>\n<dt>You call <tt>get_child(n, is_prime=False)</tt> and <tt>get_child(n, is_prime=True)</tt></dt>\n<dd><ol>\n<li>in the same python process</li>\n<li>on the same wallet object</li>\n<li>you display the public address of the second <tt>get_child</tt> call (in whichever order)</li>\n</ol>\n</dd>\n</dl>\n</li>\n</ol>\n<p>In this case, the bug would have resulted in the first <tt>get_child</tt>\u2019s address\nbeing shown. You can easily recover these misplaced coins by updating to\n<tt><span class=\"pre\">bitmerchant&gt;=0.1.8</span></tt>, regenerating the address you accidentally sent coins\nto, and moving them to a corrected destination. The \u201cdeterministic\u201d part of\n\u201chierarchical deterministic wallets\u201d really works to your advantage here.</p>\n</div>\n<div id=\"stolen-coins\">\n<h3>Stolen Coins</h3>\n<p>First, it is extremely unlikely that your code met all of the requirements\nto be affected by this bug. If you can answer \u201cyes\u201d to every one of the points\nbelow, then you should upgrade to <tt><span class=\"pre\">bitmerchant&gt;=0.1.8</span></tt>, generate a new master\nprivate key, and move all coins to the new wallet as soon as possible.</p>\n<p>In order to have coins stolen as a result of the bug, all of the below points\nmust be true:</p>\n<ol>\n<li>You expose your master public key to the public</li>\n<li>Your master private key must be available for your code to load, rather than in a secure offline backup</li>\n<li>You call <tt>get_child</tt> directly, rather than <tt>create_new_address_for_user</tt></li>\n<li><dl>\n<dt>You call <tt>get_child(n, is_prime=False)</tt> and <tt>get_child(n, is_prime=True)</tt></dt>\n<dd><ol>\n<li>in that order</li>\n<li>in the same python process</li>\n<li>on the same wallet object</li>\n<li>with the intention of only giving the prime child to the user</li>\n</ol>\n</dd>\n</dl>\n</li>\n<li>You give the public and private keys of child wallets to users</li>\n</ol>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>bitmerchant is on <a href=\"https://pypi.python.org/pypi/bitmerchant\" rel=\"nofollow\">pypi</a>, so just use pip:</p>\n<pre>pip install bitmerchant\n</pre>\n<p>Then to verify it\u2019s working:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitmerchant.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">from_master_secret</span><span class=\"p\">(</span><span class=\"s2\">\"correct horse battery staple\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">to_address</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"1AJ7EDxyRwyGNcL4scXfUU7XqYkmVcwHqe\"</span>\n</pre>\n</div>\n<div id=\"bip32-wallets\">\n<h2>BIP32 wallets</h2>\n<p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\" rel=\"nofollow\">BIP32</a> wallets are hierarchical deterministic wallets. They allow you to\ngenerate bitcoin/altcoin addresses without exposing your private key to a\npotentially insecure server.</p>\n<p>To link a user with a new bitcoin address, you just need to provide the user\u2019s\nID to the <tt>create_new_address_for_user</tt> method:</p>\n<div id=\"tl-dr\">\n<h3>TL;DR</h3>\n<pre><span class=\"c1\">## DO THIS ON AN OFFLINE MACHINE, NOT YOUR WEBSERVER</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bitmerchant.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n\n<span class=\"c1\"># Create a wallet, and a primary child wallet for your app</span>\n<span class=\"n\">my_wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">new_random_wallet</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_wallet</span><span class=\"o\">.</span><span class=\"n\">serialize_b58</span><span class=\"p\">(</span><span class=\"n\">private</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>  <span class=\"c1\"># Write this down or print it out and keep in a secure location</span>\n<span class=\"n\">project_0_wallet</span> <span class=\"o\">=</span> <span class=\"n\">my_wallet</span><span class=\"o\">.</span><span class=\"n\">get_child</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">is_prime</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">project_0_public</span> <span class=\"o\">=</span> <span class=\"n\">project_0_wallet</span><span class=\"o\">.</span><span class=\"n\">public_copy</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">project_0_public</span><span class=\"o\">.</span><span class=\"n\">serialize_b58</span><span class=\"p\">(</span><span class=\"n\">private</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>  <span class=\"c1\"># Put this in your app's settings file</span>\n\n\n<span class=\"c1\">## THINGS BELOW ARE PUBLIC FOR YOUR WEBSERVER</span>\n\n<span class=\"c1\"># In your app's settings file, declare your public wallet:</span>\n<span class=\"n\">WALLET_PUBKEY</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;public output from above&gt;\"</span>\n\n<span class=\"c1\"># Create a payment address for a user as needed:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bitmerchant.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.settings</span> <span class=\"kn\">import</span> <span class=\"n\">WALLET_PUBKEY</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_payment_address_for_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">long</span><span class=\"p\">))</span>\n    <span class=\"n\">wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">WALLET_PUBKEY</span><span class=\"p\">)</span>\n    <span class=\"n\">wallet_for_user</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">create_new_address_for_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">wallet_for_user</span><span class=\"o\">.</span><span class=\"n\">to_address</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"security-warning\">\n<span id=\"security\"></span><h3>Security warning</h3>\n<p>BIP32 wallets have a vulnerability/bug that allows an attacker to recover the\nmaster private key when given a master public key and a publicly-derived\nprivate child. In other words:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitmerchant.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">new_random_wallet</span><span class=\"p\">()</span>\n<span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">get_child</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">is_prime</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># public derivation of a private child</span>\n<span class=\"n\">w_pub</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">public_copy</span><span class=\"p\">()</span>\n<span class=\"n\">master_public_key</span> <span class=\"o\">=</span> <span class=\"n\">w_pub</span><span class=\"o\">.</span><span class=\"n\">serialize_b58</span><span class=\"p\">(</span><span class=\"n\">private</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">private_child_key</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">serialize_b58</span><span class=\"p\">(</span><span class=\"n\">private</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Given <tt>master_public_key</tt> and <tt>private_child_key</tt>, the steps to recover the\nsecret master private key (<tt>w</tt>) are as simple as a subtraction on the\nelliptic curve. This has been implemented as <tt>Wallet.crack_private_key</tt>,\nbecause if it\u2019s possible to do this, then anyone should be able to do it so the\nattack is well known:</p>\n<pre><span class=\"n\">public_master</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">master_public_key</span><span class=\"p\">)</span>\n<span class=\"n\">private_child</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">private_child_key</span><span class=\"p\">)</span>\n<span class=\"n\">private_master</span> <span class=\"o\">=</span> <span class=\"n\">public_master</span><span class=\"o\">.</span><span class=\"n\">crack_private_key</span><span class=\"p\">(</span><span class=\"n\">private_child</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">private_master</span> <span class=\"o\">==</span> <span class=\"n\">w</span>  <span class=\"c1\"># :(</span>\n</pre>\n<p>This attack can be mitigated by these simple steps:</p>\n<ol>\n<li>NEVER give out your root master public key.</li>\n<li>When uploading a master public key to a webserver, always use a prime child\nof your master root.</li>\n<li>Never give out a private child key unless the user you\u2019re giving it to\nalready has control of the parent private key (eg, for user-owned wallets).</li>\n</ol>\n<p>Why \u201calways use a prime child of your master root\u201d in step 2? Because prime\nchildren use private derivation, which means they cannot be used to recover the\nparent private key (no easier than brute force, anyway).</p>\n</div>\n<div id=\"create-a-new-wallet\">\n<h3>Create a new wallet</h3>\n<p>If you haven\u2019t created a wallet yet, do so like this:</p>\n<p><strong>IMPORTANT</strong> You must back up your wallet\u2019s private key, otherwise you won\u2019t\nbe able to retrieve the coins sent to your public addresses.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitmerchant.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n\n<span class=\"n\">my_wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">new_random_wallet</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Then back up your private key</span>\n\n<span class=\"n\">private_key</span> <span class=\"o\">=</span> <span class=\"n\">my_wallet</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n<span class=\"c1\"># Make sure that you can load your wallet successfully from this key</span>\n<span class=\"n\">wallet_test</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">my_wallet</span> <span class=\"o\">==</span> <span class=\"n\">wallet_test</span>\n<span class=\"c1\"># If that assertion fails then open a ticket!</span>\n<span class=\"c1\"># NOW WRITE DOWN THE PRIVATE KEY AND STORE IT IN A SECURE LOCATION</span>\n</pre>\n<p>Note that it\u2019s a good idea to supply some extra entropy to <cite>new_random_wallet</cite>\nin case your PRNG is compromised. You can accomplish this easily by banging on\nthe keyboard. Here\u2019s an example, yours should be <em>much</em> longer:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitmerchant.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n\n<span class=\"n\">wallet1</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">new_random_wallet</span><span class=\"p\">(</span><span class=\"s1\">'asdfasdfasdf'</span><span class=\"p\">)</span>\n<span class=\"n\">wallet2</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">new_random_wallet</span><span class=\"p\">(</span><span class=\"s1\">'asdfasdfasdf'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">wallet1</span><span class=\"o\">.</span><span class=\"n\">get_private_key_hex</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">wallet2</span><span class=\"o\">.</span><span class=\"n\">get_private_key_hex</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># They're completely different</span>\n</pre>\n<p>BIP32 wallets (or hierarchical deterministic wallets) allow you to create child\nwallets which can only generate public keys and don\u2019t expose a private key to\nan insecure server. You should create a new prime child wallet for every\nwebsite you run (or a new wallet entirely), and perhaps a new prime child for\neach user (though that requires pre-generating a bunch of prime children\noffline, since you need the private key). Try to use prime children where\npossible (see <a href=\"#security\" rel=\"nofollow\">security</a>).</p>\n<p>It\u2019s a good idea to create at least <em>one</em> prime child wallet for use on your\nwebsite. The thinking being that if your website\u2019s wallet gets compromised\nsomehow, you haven\u2019t completely lost control because your master wallet is\nsecured on an offline machine. You can use your master wallet to move any funds\nin compromised child wallets to new child wallets and you\u2019ll be ok.</p>\n<p>Let\u2019s generate a new child wallet for your first website!</p>\n<pre><span class=\"c1\"># Lets assume you're loading a wallet from your safe private key backup</span>\n<span class=\"n\">my_wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a new, public-only prime child wallet. Since you have the master</span>\n<span class=\"c1\"># private key, you can recreate this child at any time in the future and don't</span>\n<span class=\"c1\"># need to securely store its private key.</span>\n<span class=\"c1\"># Remember to generate this as a prime child! See the security notice above.</span>\n<span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">my_wallet</span><span class=\"o\">.</span><span class=\"n\">get_child</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">is_prime</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">as_private</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># And lets export this child key</span>\n<span class=\"n\">public_key</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">serialize_b58</span><span class=\"p\">(</span><span class=\"n\">private</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">)</span>\n</pre>\n<p>You can store your public key in your app\u2019s source code, as long as you never\nreveal any private keys. See the <a href=\"#security\" rel=\"nofollow\">security</a> notice above.</p>\n<p>Be aware that if someone gets a hold of your public key then they can generate\nall of your subsequent child addresses, which means they\u2019ll know exactly how\nmany coins you have. The attacker cannot spend any coins, however, unless they\nare able to recover the private key (see <a href=\"#security\" rel=\"nofollow\">security</a>).</p>\n</div>\n<div id=\"generating-new-public-addresses\">\n<h3>Generating new public addresses</h3>\n<p>BIP32 wallets allow you to generate public addresses without revealing your\nprivate key. Just pass in the user ID that needs a wallet:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitmerchant.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.settings</span> <span class=\"kn\">import</span> <span class=\"n\">WALLET_PUBKEY</span>  <span class=\"c1\"># Created above</span>\n\n<span class=\"n\">master_wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">WALLET_PUBKEY</span><span class=\"p\">)</span>\n<span class=\"n\">user_wallet</span> <span class=\"o\">=</span> <span class=\"n\">master_wallet</span><span class=\"o\">.</span><span class=\"n\">create_new_address_for_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n<span class=\"n\">payment_address</span> <span class=\"o\">=</span> <span class=\"n\">user_wallet</span><span class=\"o\">.</span><span class=\"n\">to_address</span><span class=\"p\">()</span>\n</pre>\n<p>This assumes that <tt>user_id</tt> is a unique positive integer and does not change\nfor the life of the user (and is less than 2,147,483,648). Now any payments\nreceived at <tt>payment_address</tt> should be credited to the user identified by\n<tt>user_id</tt>.</p>\n</div>\n</div>\n<div id=\"staying-secure\">\n<h2>Staying secure</h2>\n<div id=\"public-keys\">\n<h3>Public Keys</h3>\n<p>Public keys are mostly safe to keep on a public webserver. However, even though\na public key does not allow an attacker to spend any of your coins, you should\nstill try to protect the public key from hackers or curious eyes.  Knowing the\npublic key allows an attacker to generate all possible child wallets and know\nexactly how many coins you have. This isn\u2019t terrible, but nobody likes having\ntheir books opened up like this.</p>\n<p>As mentioned earlier, knowledge of a master public key and a non-prime private\nchild of that key is enough to be able to recover the master private key. Never\nreveal private keys to users unless they already own the master private parent.</p>\n<p>Your master public key can be used to generate a virtually unlimited number of\nchild public keys. Your users won\u2019t pay to your master public key, but instead\nyou\u2019ll use your master public key to generate a new wallet for each user.</p>\n</div>\n<div id=\"private-keys\">\n<h3>Private Keys</h3>\n<p>You must have the private key to spend any of your coins. If your private key\nis stolen then the hacker also has control of all of your coins. With a BIP32\nWallet, generating a new master wallet is one of the only times that you need\nto be paranoid (and you\u2019re not being paranoid if they really <em>are</em> out to get\nyou). Paranoia here is good because if anyone gets control of your master\nwallet they can spend all funds in all child wallets.</p>\n<p>You should create your wallet on a computer that is not connected to the\ninternet. Ideally, this computer will <em>never</em> be connected to the internet\nafter you generate your private key. The safest way to do this is to run Ubuntu\non a livecd, install python and bitmerchant, and generate a new wallet.</p>\n<p>Once you generate a new wallet you should write down the private key on a piece\nof paper (or print it out \u2026but can you <em>really</em> trust your printer?) and\nstore it in a secure location.</p>\n<pre>sudo apt-get install python\nsudo apt-get install pip\n\npip install bitmerchant\npip install ipython\n\n<span class=\"c1\"># Then launch the ipython shell\n</span>ipython\n</pre>\n<p>Once inside your ipython shell, generate a new wallet:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitmerchant.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n\n<span class=\"n\">my_wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"o\">.</span><span class=\"n\">new_random_wallet</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Then back up your private key</span>\n\n<span class=\"n\">private_key</span> <span class=\"o\">=</span> <span class=\"n\">my_wallet</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n<span class=\"c1\"># Write down this private key.</span>\n<span class=\"c1\"># Double check it.</span>\n<span class=\"c1\"># Then shut down the computer without connecting to the internet.</span>\n</pre>\n</div>\n<div id=\"master-private-key\">\n<h3>Master private key</h3>\n<p>Your master private key allows you to spend coins sent to any of your public\naddresses. Guard this with your life, and never put it on a computer that\u2019s\nconnected to the internet.</p>\n<p>Master private keys must NEVER be put on the internet. They must NEVER be\nlocated on a computer that is even <em>connected</em> to the internet. The only key\nthat should be online is your PUBLIC key. Your private key should be written\ndown (yes, on paper) and stored in a safe location, or on a computer that is\nnever connected to the internet.</p>\n<p>Security wise, this is the most important part of generating secure public\npayment addresses. A master private key is the only way to retrieve the funds\npaid to a public address. You can use your master private key to generate the\nprivate keys of any child wallets, and then transfer those to a networked\ncomputer as necessary, if you want slightly smaller surface area for attacks.</p>\n<p>Forthcoming versions of bitmerchant will allow you to generate transactions\noffline that you can safely transfer to a networked computer, allowing you to\nspend your child funds without ever putting a private key on a networked\nmachine.</p>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>I\u2019d love for you to contribute to bitmerchant! If you can\u2019t write code, then\nplease open a ticket for feature requests or bugs you find!</p>\n<p>If you can code and you\u2019d like to submit a pull request, please be sure to\ninclude tests. This library is quite well tested and I intend to keep coverage\nabove 95% indefinitely.</p>\n<p>Rewards may be given out to developers depending on the severity of bugs\nfound/patched. The donation addresses mentioned at the top of this document\nwill be used to fund rewards.</p>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>I use tox &amp; travis-ci to test against all python versions &gt;= 2.5. Locally,\nyou can use the <cite>make test</cite> target, which will only test against python-2.7.\nYou can, of course, call tox directly:</p>\n<pre>make setup\ntox\ntox -e py34\ntox -- tests.test_bip32:TestWallet\n</pre>\n<p>Note that the full test suite on py-{2.5..3.4} takes about 5 minutes to run.\npypy and pypy3 are considerably slower at about 25 minutes, due to unoptimized\ncrypto operations.</p>\n</div>\n<div id=\"packaging\">\n<h3>Packaging</h3>\n<p>See <a href=\"https://raw.github.com/sbuss/bitmerchant/master/PACKAGING.md\" rel=\"nofollow\">PACKAGING</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1716730, "releases": {"0.1.8": [{"comment_text": "", "digests": {"md5": "c2d0cb4a158fd0de1d8e61314d7ece0f", "sha256": "01f5584625e7988ce4d8a32527e1160eaa00265042e6db1f29b04398dafd88e0"}, "downloads": -1, "filename": "bitmerchant-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c2d0cb4a158fd0de1d8e61314d7ece0f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28574, "upload_time": "2015-09-10T06:25:06", "upload_time_iso_8601": "2015-09-10T06:25:06.969137Z", "url": "https://files.pythonhosted.org/packages/f0/fd/840712bffaa449023e9665d46c38541de509ae5b25ab865d75877437d3c7/bitmerchant-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70d175987b137f2728d57ecb277e4786", "sha256": "fba4c2091084ed0b4f9faac0ebbba8d255c5ccd3a18e7f877ce13aab71649ddc"}, "downloads": -1, "filename": "bitmerchant-0.1.8.tar.gz", "has_sig": false, "md5_digest": "70d175987b137f2728d57ecb277e4786", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23420, "upload_time": "2015-09-10T06:25:13", "upload_time_iso_8601": "2015-09-10T06:25:13.617768Z", "url": "https://files.pythonhosted.org/packages/a0/3c/3cc4b1f447cf0ea27c21a0e2e55adaf0064a8cd4b3294fb3c27ca27f6dd3/bitmerchant-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c2d0cb4a158fd0de1d8e61314d7ece0f", "sha256": "01f5584625e7988ce4d8a32527e1160eaa00265042e6db1f29b04398dafd88e0"}, "downloads": -1, "filename": "bitmerchant-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c2d0cb4a158fd0de1d8e61314d7ece0f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28574, "upload_time": "2015-09-10T06:25:06", "upload_time_iso_8601": "2015-09-10T06:25:06.969137Z", "url": "https://files.pythonhosted.org/packages/f0/fd/840712bffaa449023e9665d46c38541de509ae5b25ab865d75877437d3c7/bitmerchant-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70d175987b137f2728d57ecb277e4786", "sha256": "fba4c2091084ed0b4f9faac0ebbba8d255c5ccd3a18e7f877ce13aab71649ddc"}, "downloads": -1, "filename": "bitmerchant-0.1.8.tar.gz", "has_sig": false, "md5_digest": "70d175987b137f2728d57ecb277e4786", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23420, "upload_time": "2015-09-10T06:25:13", "upload_time_iso_8601": "2015-09-10T06:25:13.617768Z", "url": "https://files.pythonhosted.org/packages/a0/3c/3cc4b1f447cf0ea27c21a0e2e55adaf0064a8cd4b3294fb3c27ca27f6dd3/bitmerchant-0.1.8.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:16 2020"}