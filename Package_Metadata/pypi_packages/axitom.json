{"info": {"author": "PolymerGuy", "author_email": "sindre.n.olufsen@ntnu.no", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n<!-- PROJECT SHIELDS -->\n\n[![CircleCI](https://circleci.com/gh/PolymerGuy/AXITOM.svg?style=svg)](https://circleci.com/gh/PolymerGuy/AXITOM)\n[![codecov](https://codecov.io/gh/PolymerGuy/AXITOM/branch/master/graph/badge.svg)](https://codecov.io/gh/PolymerGuy/AXITOM)\n[![MIT License][license-shield]][license-url]\n[![Documentation Status](https://readthedocs.org/projects/axitom/badge/?version=latest)](https://axitom.readthedocs.io/en/latest/?badge=latest)\n[![PyPI version](https://badge.fury.io/py/axitom.svg)](https://badge.fury.io/py/axitom)\n\n<!-- PROJECT LOGO -->\n<br />\n<p align=\"center\">\n<img src=\"./docs/logo.png\" alt=\"Logo\" width=\"500\" height=\"500\">\n</p>\n\n\n<h3 align=\"center\">AXITOM</h3>\n\n<p align=\"center\">\nTomographic reconstruction of axisymmetric fields acquired by a cone beam\n<br />\n<a href=\"https://axitom.readthedocs.io/en/latest/\"><strong>Explore the docs </strong></a>\n<br />\n</p>\n\n<!-- ABOUT THE PROJECT -->\nAbout The Project\n-----------------\nThis python package provides tools for axis-symmetric cone-beam computed tomography. A Feldkamp David Kress algorithm performs the reconstruction\nwhich have been adapted such that is exploits the axis-symmetric nature of the tomogram.\n\nThis toolkit has a highly specialised usage, and there are plenty of more general and excellent frameworks for tomographic reconstruction, such as:\n * [TomoPy](https://github.com/tomopy/tomopy) (General computed tomography, cone and parallel beam geometry)\n * [PyAbel](https://github.com/PyAbel/PyAbel) (Computed tomography based on the inverse Abel transform, parallel beam geometry)\n\n This project aims at providing a simple, accessible toolkit for forward-projection and reconstruction of \n axis-symmetric tomograms based on a conical beam geometry.\n\n\n### Built With\nThis project is heavily based on the following packages:\n* [Numpy](https://numpy.org/)\n* [Scipy](https://www.scipy.org/)\n* [Scikit-image](https://scikit-image.org/)\n* [Matplotlib](https://matplotlib.org/)\n\n\n\n<!-- GETTING STARTED -->\nGetting Started\n---------------\nTo get a local copy up and running follow these steps.\n\n### Install via package manager:\n\nThe toolkit is available via PIP, and the instructions below shows how a virtual environment can be created\nand the toolkit installed.\n\nPrerequisites:\n\n    This toolkit is tested on Python 3.6\n    We recommend the use of virtualenv\n\nInstalling:\n\n    $ virtualenv -p python3.6 env\n    $ source ./env/bin/activate #On Linux and Mac OS\n    $ env\\Scripts\\activate.bat #On Windows\n    $ pip install axitom\n\nNow the toolkit is installed and ready for use.\n\nRun the tests:\n\n    $ nosetests axitom\n\nIf you want to check out the examples, then download the files in the examples folder and run the examples.\n\n\n### Clone the repo:\n\nThese instructions will get you a copy of the project up and running on your \nlocal machine for development and testing purposes.\n\nPrerequisites:\n\n    This toolkit is tested on Python 3.6\n    We recommend the use of virtualenv\n\n\nClone this repo to your preferred location\n\n    $ git init\n    $ git clone https://github.com/PolymerGuy/axitom.git\n\nWe recommend that you always use virtual environments, either by virtualenv or by Conda env\n\n    $ virtualenv -p python3.6 env\n    $ source ./env/bin/activate #On Linux and Mac OS\n    $ env\\Scripts\\activate.bat #On Windows\n    $ pip install -r requirements.txt\n\nYou can now run an example::\n\n    $ python <path_to_axitom>/examples/comparison_to_Nikon.py\n\n### Run the tests\nThe tests should always be launched to check your installation.\nThese tests are integration and unit tests.\n\nIf you cloned the repo, you have to call pytest from within the folder\n\n    $ pytest\n\n\nExample\n-------\nLet us now go through the necessary steps for doing a reconstruction of a tomogram based on a single image.\nFirst, we need to import the tools\n\n    import axitom as tom\n    from scipy.ndimage.filters import median_filter\n\nThe example data can be downloaded from the AXITOM/tests/example_data/ folder. The dataset was collected during tensile testing of a polymer specimen.\nAssuming that the example data from the repo is located in root folder, we can make a config object\nfrom the .xtekct file\n\n    config = tom.config_from_xtekct(\"radiogram.xtekct\")\n\nWe now import the projection\n\n     projection = tom.read_image(r\"radiogram.tif\", flat_corrected=True)\n\nAs we will use a single projection only in this reconstruction, we will reduce the noise content of the projection by\nemploying a median filter. Using such a filter works fine since the density gradients within the specimen are relatively small.\nYou may here choose any filter of your liking.\n\n\n     projection = median_filter(projection, size=21)\n\nNow, the axis of rotation has to be determined. The axis of rotation is found by first binarizing of the image into object and background,\nand subsequently determining the centre of gravity of the object\n\n     _, center_offset = tom.object_center_of_rotation(projection, background_internsity=0.9)\n\nThe config object has to be updated with the correct values\n\n     config = config.with_param(center_of_rot=center_offset)\n\nWe are now ready to initiate the reconstruction\n\n     tomo = tom.fdk(projection, config)\n\n\nThe results can then be visualized\n\n    import matplotlib.pyplot as plt\n    plt.title(\"Radial slice\")\n    plt.imshow(tomo.transpose(), cmap=plt.cm.magma)\n\n\n<img src=\"./docs/results.png\" alt=\"Results\" width=\"300\"/>\n\n<!-- CONTRIBUTING -->\nContributing\n------------\n\nContributions are what makes the open-source community such a fantastic place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.\n\n1. Fork the Project\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature`)\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n\n<!-- LICENSE -->\nLicense\n-------\n\nDistributed under the MIT License. See `LICENSE` for more information.\n\n<!-- CONTACT -->\nContact\n-------\n\nSindre Nordmark Olufsen (PolymerGuy) - sindre.n.olufsen@ntnu.no\n\n\n<!-- ACKNOWLEDGEMENTS -->\nAcknowledgements\n----------------\nWe are in great debt to the open-source community and all the contributors the projects on which this toolkit is based.\n\n<!-- MARKDOWN LINKS & IMAGES -->\n[license-shield]: https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\n[license-url]: https://choosealicense.com/licenses/mit\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PolymerGuy/AXITOM", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "axitom", "package_url": "https://pypi.org/project/axitom/", "platform": "", "project_url": "https://pypi.org/project/axitom/", "project_urls": {"Homepage": "https://github.com/PolymerGuy/AXITOM"}, "release_url": "https://pypi.org/project/axitom/0.1.3/", "requires_dist": ["imageio", "matplotlib", "natsort", "nose", "numpy", "scikit-image", "scipy"], "requires_python": "", "summary": "Tools for axis-symmetric cone-beam computed tomography", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>&lt;!\u2013 PROJECT SHIELDS \u2013&gt;</p>\n<p>[![CircleCI](<a href=\"https://circleci.com/gh/PolymerGuy/AXITOM.svg?style=svg)%5D(https://circleci.com/gh/PolymerGuy/AXITOM\" rel=\"nofollow\">https://circleci.com/gh/PolymerGuy/AXITOM.svg?style=svg)](https://circleci.com/gh/PolymerGuy/AXITOM</a>)\n[![codecov](<a href=\"https://codecov.io/gh/PolymerGuy/AXITOM/branch/master/graph/badge.svg)%5D(https://codecov.io/gh/PolymerGuy/AXITOM\" rel=\"nofollow\">https://codecov.io/gh/PolymerGuy/AXITOM/branch/master/graph/badge.svg)](https://codecov.io/gh/PolymerGuy/AXITOM</a>)\n[![MIT License][license-shield]][license-url]\n[![Documentation Status](<a href=\"https://readthedocs.org/projects/axitom/badge/?version=latest)%5D(https://axitom.readthedocs.io/en/latest/\" rel=\"nofollow\">https://readthedocs.org/projects/axitom/badge/?version=latest)](https://axitom.readthedocs.io/en/latest/</a>?badge=latest)\n[![PyPI version](<a href=\"https://badge.fury.io/py/axitom.svg)%5D(https://badge.fury.io/py/axitom\" rel=\"nofollow\">https://badge.fury.io/py/axitom.svg)](https://badge.fury.io/py/axitom</a>)</p>\n<p>&lt;!\u2013 PROJECT LOGO \u2013&gt;\n&lt;br /&gt;\n&lt;p align=\u201dcenter\u201d&gt;\n&lt;img src=\u201d./docs/logo.png\u201d alt=\u201dLogo\u201d width=\u201d500\u201d height=\u201d500\u201d&gt;\n&lt;/p&gt;</p>\n<p>&lt;h3 align=\u201dcenter\u201d&gt;AXITOM&lt;/h3&gt;</p>\n<p>&lt;p align=\u201dcenter\u201d&gt;\nTomographic reconstruction of axisymmetric fields acquired by a cone beam\n&lt;br /&gt;\n&lt;a href=\u201d<a href=\"https://axitom.readthedocs.io/en/latest/\" rel=\"nofollow\">https://axitom.readthedocs.io/en/latest/</a>\u201d&gt;&lt;strong&gt;Explore the docs &lt;/strong&gt;&lt;/a&gt;\n&lt;br /&gt;\n&lt;/p&gt;</p>\n<p>&lt;!\u2013 ABOUT THE PROJECT \u2013&gt;\nAbout The Project\n\u2014\u2014\u2014\u2014\u2014\u2013\nThis python package provides tools for axis-symmetric cone-beam computed tomography. A Feldkamp David Kress algorithm performs the reconstruction\nwhich have been adapted such that is exploits the axis-symmetric nature of the tomogram.</p>\n<dl>\n<dt>This toolkit has a highly specialised usage, and there are plenty of more general and excellent frameworks for tomographic reconstruction, such as:</dt>\n<dd><ul>\n<li>[TomoPy](<a href=\"https://github.com/tomopy/tomopy\" rel=\"nofollow\">https://github.com/tomopy/tomopy</a>) (General computed tomography, cone and parallel beam geometry)</li>\n<li>[PyAbel](<a href=\"https://github.com/PyAbel/PyAbel\" rel=\"nofollow\">https://github.com/PyAbel/PyAbel</a>) (Computed tomography based on the inverse Abel transform, parallel beam geometry)</li>\n</ul>\n<p>This project aims at providing a simple, accessible toolkit for forward-projection and reconstruction of\naxis-symmetric tomograms based on a conical beam geometry.</p>\n</dd>\n</dl>\n<p>### Built With\nThis project is heavily based on the following packages:\n* [Numpy](<a href=\"https://numpy.org/\" rel=\"nofollow\">https://numpy.org/</a>)\n* [Scipy](<a href=\"https://www.scipy.org/\" rel=\"nofollow\">https://www.scipy.org/</a>)\n* [Scikit-image](<a href=\"https://scikit-image.org/\" rel=\"nofollow\">https://scikit-image.org/</a>)\n* [Matplotlib](<a href=\"https://matplotlib.org/\" rel=\"nofollow\">https://matplotlib.org/</a>)</p>\n<p>&lt;!\u2013 GETTING STARTED \u2013&gt;\nGetting Started\n\u2014\u2014\u2014\u2014\u2014\nTo get a local copy up and running follow these steps.</p>\n<p>### Install via package manager:</p>\n<p>The toolkit is available via PIP, and the instructions below shows how a virtual environment can be created\nand the toolkit installed.</p>\n<p>Prerequisites:</p>\n<blockquote>\nThis toolkit is tested on Python 3.6\nWe recommend the use of virtualenv</blockquote>\n<p>Installing:</p>\n<blockquote>\n$ virtualenv -p python3.6 env\n$ source ./env/bin/activate #On Linux and Mac OS\n$ envScriptsactivate.bat #On Windows\n$ pip install axitom</blockquote>\n<p>Now the toolkit is installed and ready for use.</p>\n<p>Run the tests:</p>\n<blockquote>\n$ nosetests axitom</blockquote>\n<p>If you want to check out the examples, then download the files in the examples folder and run the examples.</p>\n<p>### Clone the repo:</p>\n<p>These instructions will get you a copy of the project up and running on your\nlocal machine for development and testing purposes.</p>\n<p>Prerequisites:</p>\n<blockquote>\nThis toolkit is tested on Python 3.6\nWe recommend the use of virtualenv</blockquote>\n<p>Clone this repo to your preferred location</p>\n<blockquote>\n$ git init\n$ git clone <a href=\"https://github.com/PolymerGuy/axitom.git\" rel=\"nofollow\">https://github.com/PolymerGuy/axitom.git</a></blockquote>\n<p>We recommend that you always use virtual environments, either by virtualenv or by Conda env</p>\n<blockquote>\n$ virtualenv -p python3.6 env\n$ source ./env/bin/activate #On Linux and Mac OS\n$ envScriptsactivate.bat #On Windows\n$ pip install -r requirements.txt</blockquote>\n<p>You can now run an example:</p>\n<pre>$ python &lt;path_to_axitom&gt;/examples/comparison_to_Nikon.py\n</pre>\n<p>### Run the tests\nThe tests should always be launched to check your installation.\nThese tests are integration and unit tests.</p>\n<p>If you cloned the repo, you have to call pytest from within the folder</p>\n<blockquote>\n$ pytest</blockquote>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Let us now go through the necessary steps for doing a reconstruction of a tomogram based on a single image.\nFirst, we need to import the tools</p>\n<blockquote>\nimport axitom as tom\nfrom scipy.ndimage.filters import median_filter</blockquote>\n<p>The example data can be downloaded from the AXITOM/tests/example_data/ folder. The dataset was collected during tensile testing of a polymer specimen.\nAssuming that the example data from the repo is located in root folder, we can make a config object\nfrom the .xtekct file</p>\n<blockquote>\nconfig = tom.config_from_xtekct(\u201cradiogram.xtekct\u201d)</blockquote>\n<p>We now import the projection</p>\n<blockquote>\nprojection = tom.read_image(r\u201dradiogram.tif\u201d, flat_corrected=True)</blockquote>\n<p>As we will use a single projection only in this reconstruction, we will reduce the noise content of the projection by\nemploying a median filter. Using such a filter works fine since the density gradients within the specimen are relatively small.\nYou may here choose any filter of your liking.</p>\n<blockquote>\nprojection = median_filter(projection, size=21)</blockquote>\n<p>Now, the axis of rotation has to be determined. The axis of rotation is found by first binarizing of the image into object and background,\nand subsequently determining the centre of gravity of the object</p>\n<blockquote>\n_, center_offset = tom.object_center_of_rotation(projection, background_internsity=0.9)</blockquote>\n<p>The config object has to be updated with the correct values</p>\n<blockquote>\nconfig = config.with_param(center_of_rot=center_offset)</blockquote>\n<p>We are now ready to initiate the reconstruction</p>\n<blockquote>\ntomo = tom.fdk(projection, config)</blockquote>\n<p>The results can then be visualized</p>\n<blockquote>\nimport matplotlib.pyplot as plt\nplt.title(\u201cRadial slice\u201d)\nplt.imshow(tomo.transpose(), cmap=plt.cm.magma)</blockquote>\n<p>&lt;img src=\u201d./docs/results.png\u201d alt=\u201dResults\u201d width=\u201d300\u201d/&gt;</p>\n<p>&lt;!\u2013 CONTRIBUTING \u2013&gt;\nContributing\n\u2014\u2014\u2014\u2014</p>\n<p>Contributions are what makes the open-source community such a fantastic place to learn, inspire, and create. Any contributions you make are <strong>greatly appreciated</strong>.</p>\n<ol>\n<li>Fork the Project</li>\n<li>Create your Feature Branch (<cite>git checkout -b feature/AmazingFeature</cite>)</li>\n<li>Commit your Changes (<cite>git commit -m \u2018Add some AmazingFeature</cite>)</li>\n<li>Push to the Branch (<cite>git push origin feature/AmazingFeature</cite>)</li>\n<li>Open a Pull Request</li>\n</ol>\n<p>&lt;!\u2013 LICENSE \u2013&gt;\nLicense\n\u2014\u2014-</p>\n<p>Distributed under the MIT License. See <cite>LICENSE</cite> for more information.</p>\n<p>&lt;!\u2013 CONTACT \u2013&gt;\nContact\n\u2014\u2014-</p>\n<p>Sindre Nordmark Olufsen (PolymerGuy) - <a href=\"mailto:sindre.n.olufsen%40ntnu.no\">sindre<span>.</span>n<span>.</span>olufsen<span>@</span>ntnu<span>.</span>no</a></p>\n<p>&lt;!\u2013 ACKNOWLEDGEMENTS \u2013&gt;\nAcknowledgements\n\u2014\u2014\u2014\u2014\u2014-\nWe are in great debt to the open-source community and all the contributors the projects on which this toolkit is based.</p>\n<p>&lt;!\u2013 MARKDOWN LINKS &amp; IMAGES \u2013&gt;\n[license-shield]: <a href=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" rel=\"nofollow\">https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square</a>\n[license-url]: <a href=\"https://choosealicense.com/licenses/mit\" rel=\"nofollow\">https://choosealicense.com/licenses/mit</a></p>\n</div>\n\n          </div>"}, "last_serial": 5899336, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ea5a8e6808419fb56f1e351c6df4ebb1", "sha256": "d1759c215189f3aca320e29eecaa1c3d0a7fdc2ccd68b761597bbccc731ae83f"}, "downloads": -1, "filename": "axitom-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ea5a8e6808419fb56f1e351c6df4ebb1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16952, "upload_time": "2019-08-19T12:15:11", "upload_time_iso_8601": "2019-08-19T12:15:11.066778Z", "url": "https://files.pythonhosted.org/packages/c7/76/2e4e6db0d837035b7e5bbf4c6d4ea5204adca2c21bfb182063114524249f/axitom-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6b904a0824b447a88077ecc669a18b8a", "sha256": "fbf58d573e62bf92c915dc56a257fe6b94b7543a601e5cc682cb4e7b6db4507c"}, "downloads": -1, "filename": "axitom-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6b904a0824b447a88077ecc669a18b8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10562741, "upload_time": "2019-08-19T12:44:39", "upload_time_iso_8601": "2019-08-19T12:44:39.729519Z", "url": "https://files.pythonhosted.org/packages/bf/83/78e67d4c4920091b65c40fe4de2f8f578e6594319ffebf97ab9b55428b1e/axitom-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4555d30d2c0850a9a8439f015bca32a", "sha256": "8f9bb18b0df5daf723589e35caf5efe8799224df89528894527999bf46339b6c"}, "downloads": -1, "filename": "axitom-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f4555d30d2c0850a9a8439f015bca32a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10563237, "upload_time": "2019-08-19T12:44:53", "upload_time_iso_8601": "2019-08-19T12:44:53.022992Z", "url": "https://files.pythonhosted.org/packages/2b/2f/caa91a886b0167c1615e1ad3dc3a983b86ced6aff0b7e86f308c4b887845/axitom-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3f8e977962ce19ea4f14201022617f27", "sha256": "e32605a856a513f27df476c2bb79400a7c72b38d85abe5b7c6f974e071cc6ddc"}, "downloads": -1, "filename": "axitom-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3f8e977962ce19ea4f14201022617f27", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10562730, "upload_time": "2019-08-19T12:55:27", "upload_time_iso_8601": "2019-08-19T12:55:27.320762Z", "url": "https://files.pythonhosted.org/packages/b7/76/07293ff6004d1e2290d019e7f227612e74ea04b6a00c400c9fbf07967ce2/axitom-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04404eaa9760c020a656e52fb3ecd1ab", "sha256": "0bd829a9318c2419157401ae220337d925060b8132e63aca178a4b32bedb0e2a"}, "downloads": -1, "filename": "axitom-0.1.2.tar.gz", "has_sig": false, "md5_digest": "04404eaa9760c020a656e52fb3ecd1ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10563205, "upload_time": "2019-08-19T12:55:41", "upload_time_iso_8601": "2019-08-19T12:55:41.590318Z", "url": "https://files.pythonhosted.org/packages/cc/4e/d3db2c4f1dc6dd3df4be4ab7035de30858d387c3d520b9a07f8ca1674aff/axitom-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "5523d01c55e93acdae30bc6425e980cf", "sha256": "cbdfc9208896cc3a2d0c33b504240c8a9fae65363d69a962c21fbca257eb5f28"}, "downloads": -1, "filename": "axitom-0.1.3-py2-none-any.whl", "has_sig": false, "md5_digest": "5523d01c55e93acdae30bc6425e980cf", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19022031, "upload_time": "2019-09-28T08:48:01", "upload_time_iso_8601": "2019-09-28T08:48:01.773499Z", "url": "https://files.pythonhosted.org/packages/91/6c/6ea3d51b0d200e9fc3a0fa257e3af3c10f522314db69cc7c8e73cbdf88e4/axitom-0.1.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5957a2a5be5e6f238d0aa9aa596f939c", "sha256": "1bd9549d1e720f68fe414f2dd9105ad244589d3980f0f6da22b1f08f9cce9a6b"}, "downloads": -1, "filename": "axitom-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5957a2a5be5e6f238d0aa9aa596f939c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19018033, "upload_time": "2019-09-28T08:48:09", "upload_time_iso_8601": "2019-09-28T08:48:09.020710Z", "url": "https://files.pythonhosted.org/packages/8d/82/8ab261d228489880fd4f8a35deeba4377af7e8e6498f997459f184ec48ed/axitom-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5523d01c55e93acdae30bc6425e980cf", "sha256": "cbdfc9208896cc3a2d0c33b504240c8a9fae65363d69a962c21fbca257eb5f28"}, "downloads": -1, "filename": "axitom-0.1.3-py2-none-any.whl", "has_sig": false, "md5_digest": "5523d01c55e93acdae30bc6425e980cf", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19022031, "upload_time": "2019-09-28T08:48:01", "upload_time_iso_8601": "2019-09-28T08:48:01.773499Z", "url": "https://files.pythonhosted.org/packages/91/6c/6ea3d51b0d200e9fc3a0fa257e3af3c10f522314db69cc7c8e73cbdf88e4/axitom-0.1.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5957a2a5be5e6f238d0aa9aa596f939c", "sha256": "1bd9549d1e720f68fe414f2dd9105ad244589d3980f0f6da22b1f08f9cce9a6b"}, "downloads": -1, "filename": "axitom-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5957a2a5be5e6f238d0aa9aa596f939c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19018033, "upload_time": "2019-09-28T08:48:09", "upload_time_iso_8601": "2019-09-28T08:48:09.020710Z", "url": "https://files.pythonhosted.org/packages/8d/82/8ab261d228489880fd4f8a35deeba4377af7e8e6498f997459f184ec48ed/axitom-0.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:30 2020"}