{"info": {"author": "David Winterbottom", "author_email": "david.winterbottom@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: Unix", "Programming Language :: Python"], "description": "====================================\nAvalara integration for django-oscar\n====================================\n\nThis package provides integration between Avalara_ and Oscar_.  Avalara is a\nservice that provides accurate sales tax calculations in the US.\n\n.. _Avalara: http://avalara.com\n.. _Oscar: http://oscarcommerce.com\n\nUseful documentation:\n\n* `Avalara docs <http://developer.avalara.com/api-docs/>`_\n\nStatus:\n\n.. image:: https://secure.travis-ci.org/tangentlabs/django-oscar-avalara.png?branch=master\n    :target: http://travis-ci.org/#!/tangentlabs/django-oscar-avalara\n\nInstallation\n============\n\nInstall from PyPI::\n\n    $ pip install django-oscar-avalara\n\nor Github::\n\n    $ pip install git+https://github.com/tangentlabs/django-oscar-avalara.git\n\nthen add ``'avalara'`` to ``INSTALLED_APPS``.\n\nSpecify the following settings:\n\n* ``AVALARA_ACCOUNT_NUMBER``\n* ``AVALARA_LICENSE_KEY`` \n* ``AVALARA_COMPANY_CODE`` \n\nYou should have been provided with these details when you signed up with Avalara.\n\nWhen not in production, set ``AVALARA_TEST_MODE = True`` to make requests\nto the Avalara development server.\n\nThis package uses a named logger ``'avalara'`` so it is normally useful to\ndefine handlers to this logger.\n\nUsage\n=====\n\nTo integrate Avalara into checkout, you need to override two methods from the\ncheckout view class ``PaymentDetailsView``.\n\nFirst override ``build_submission`` to apply taxes to the basket and shipping\nmethod:\n\n.. code:: python\n\n    from oscar.apps.checkout import views\n    from django.contrib import messages\n    from django.template import loader\n\n    import avalara\n\n    class PaymentDetailsView(views.PaymentDetailsView):\n\n        ...\n\n        def build_submission(self, **kwargs):\n            submission = super(PaymentDetailsView, self).build_submission(**kwargs)\n\n            # Fetch and apply taxes to submission dict\n            try:\n                avalara.apply_taxes_to_submission(submission)\n            except avalara.InvalidAddress, e:\n                msg = loader.render_to_string(\n                    'avalara/messages/invalid_address.html',\n                    {'error': e.message})\n                messages.error(self.request, msg, extra_tags=\"safe noicon\")\n\n            return submission\n\nHere we are passing the submission dict to ``apply_taxes_to_submission`` which\nwill look up the appropriate taxes and apply them in place to the basket and\nshipping method instances.\n\nWe also watch out for ``InvalidAddress`` exceptions which will be raised if\nAvalara is unable to find a tax jurisdiction for the passed shipping address.\n\nFinally, override ``handle_successful_order`` to submit the placed order to\nAvalara:\n\n.. code:: python\n\n    from oscar.apps.checkout import views\n    from django.contrib import messages\n    from django.template import loader\n\n    import avalara\n\n    class PaymentDetailsView(views.PaymentDetailsView):\n\n        ...\n\n        def handle_successful_order(self, order):\n            response = super(PaymentDetailsView, self).handle_successful_order(\n                order)\n\n            # Submit tax information to Avalara\n            try:\n                avalara.submit(order)\n            except Exception:\n                # Tax can be re-submitted later so we swallow all possible\n                # exceptions and log them.\n                logger.error(\"Unable to submit tax information for order %s\",\n                             order.number, exc_info=True)\n\n            return response\n\nHere we pass the order instance to ``submit`` which will submit the tax\ninformation to Avalara for reporting.  We also catch and log any exception as\nwe don't want order placement to show an error screen.  If there is a problem\ntalking to Avalara, we can manually resubmit the order later on.\n\nContributing\n============\n\nClone the repo, create a virtualenv and run::\n\n    make install\n\nto install all dependencies.  Run the tests with::\n\n    ./runtests.py\n\nThere is a sandbox site that you can browse and use to test the Avalara\nintegration.  Create it using::\n\n    make sandbox\n\nand browse it after::\n\n    cd sandbox\n    ./manage.py runserver\n\nNote that you will need to have test credentials for Avalara in a private\n``integration.py`` module.\n\nChangelog\n=========\n\n0.2.1\n-----\n\nFix a few issues with submitting orders.\n\n0.2\n---\n\nSupport Oscar 1.0 and solve a cache key issue.\n\n0.1.1\n-----\n\nPatch release to limit support to ``django-oscar>=0.6,<1.0``.\n\n0.1\n---\n\nInitial version - supports ``django-oscar>=0.6``.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/django-oscar/django-oscar-avalara", "keywords": "Taxes,Avalara", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-oscar-avalara", "package_url": "https://pypi.org/project/django-oscar-avalara/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-oscar-avalara/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/django-oscar/django-oscar-avalara"}, "release_url": "https://pypi.org/project/django-oscar-avalara/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Avalara integration for django-oscar", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides integration between <a href=\"http://avalara.com\" rel=\"nofollow\">Avalara</a> and <a href=\"http://oscarcommerce.com\" rel=\"nofollow\">Oscar</a>.  Avalara is a\nservice that provides accurate sales tax calculations in the US.</p>\n<p>Useful documentation:</p>\n<ul>\n<li><a href=\"http://developer.avalara.com/api-docs/\" rel=\"nofollow\">Avalara docs</a></li>\n</ul>\n<p>Status:</p>\n<a href=\"http://travis-ci.org/#!/tangentlabs/django-oscar-avalara\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/tangentlabs/django-oscar-avalara.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5355714d94dfdfe4f1f9dbd8c6ecb7637923f420/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f74616e67656e746c6162732f646a616e676f2d6f736361722d6176616c6172612e706e673f6272616e63683d6d6173746572\"></a>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from PyPI:</p>\n<pre>$ pip install django-oscar-avalara\n</pre>\n<p>or Github:</p>\n<pre>$ pip install git+https://github.com/tangentlabs/django-oscar-avalara.git\n</pre>\n<p>then add <tt>'avalara'</tt> to <tt>INSTALLED_APPS</tt>.</p>\n<p>Specify the following settings:</p>\n<ul>\n<li><tt>AVALARA_ACCOUNT_NUMBER</tt></li>\n<li><tt>AVALARA_LICENSE_KEY</tt></li>\n<li><tt>AVALARA_COMPANY_CODE</tt></li>\n</ul>\n<p>You should have been provided with these details when you signed up with Avalara.</p>\n<p>When not in production, set <tt>AVALARA_TEST_MODE = True</tt> to make requests\nto the Avalara development server.</p>\n<p>This package uses a named logger <tt>'avalara'</tt> so it is normally useful to\ndefine handlers to this logger.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To integrate Avalara into checkout, you need to override two methods from the\ncheckout view class <tt>PaymentDetailsView</tt>.</p>\n<p>First override <tt>build_submission</tt> to apply taxes to the basket and shipping\nmethod:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oscar.apps.checkout</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">messages</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">avalara</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PaymentDetailsView</span><span class=\"p\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">PaymentDetailsView</span><span class=\"p\">):</span>\n\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">build_submission</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">submission</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">PaymentDetailsView</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">build_submission</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Fetch and apply taxes to submission dict</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">avalara</span><span class=\"o\">.</span><span class=\"n\">apply_taxes_to_submission</span><span class=\"p\">(</span><span class=\"n\">submission</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">avalara</span><span class=\"o\">.</span><span class=\"n\">InvalidAddress</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">render_to_string</span><span class=\"p\">(</span>\n                <span class=\"s1\">'avalara/messages/invalid_address.html'</span><span class=\"p\">,</span>\n                <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">})</span>\n            <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">extra_tags</span><span class=\"o\">=</span><span class=\"s2\">\"safe noicon\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">submission</span>\n</pre>\n<p>Here we are passing the submission dict to <tt>apply_taxes_to_submission</tt> which\nwill look up the appropriate taxes and apply them in place to the basket and\nshipping method instances.</p>\n<p>We also watch out for <tt>InvalidAddress</tt> exceptions which will be raised if\nAvalara is unable to find a tax jurisdiction for the passed shipping address.</p>\n<p>Finally, override <tt>handle_successful_order</tt> to submit the placed order to\nAvalara:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oscar.apps.checkout</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">messages</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">avalara</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PaymentDetailsView</span><span class=\"p\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">PaymentDetailsView</span><span class=\"p\">):</span>\n\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_successful_order</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">PaymentDetailsView</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">handle_successful_order</span><span class=\"p\">(</span>\n            <span class=\"n\">order</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Submit tax information to Avalara</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">avalara</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Tax can be re-submitted later so we swallow all possible</span>\n            <span class=\"c1\"># exceptions and log them.</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to submit tax information for order </span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                         <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<p>Here we pass the order instance to <tt>submit</tt> which will submit the tax\ninformation to Avalara for reporting.  We also catch and log any exception as\nwe don\u2019t want order placement to show an error screen.  If there is a problem\ntalking to Avalara, we can manually resubmit the order later on.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Clone the repo, create a virtualenv and run:</p>\n<pre>make install\n</pre>\n<p>to install all dependencies.  Run the tests with:</p>\n<pre>./runtests.py\n</pre>\n<p>There is a sandbox site that you can browse and use to test the Avalara\nintegration.  Create it using:</p>\n<pre>make sandbox\n</pre>\n<p>and browse it after:</p>\n<pre>cd sandbox\n./manage.py runserver\n</pre>\n<p>Note that you will need to have test credentials for Avalara in a private\n<tt>integration.py</tt> module.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.2.1</h3>\n<p>Fix a few issues with submitting orders.</p>\n</div>\n<div id=\"id2\">\n<h3>0.2</h3>\n<p>Support Oscar 1.0 and solve a cache key issue.</p>\n</div>\n<div id=\"id3\">\n<h3>0.1.1</h3>\n<p>Patch release to limit support to <tt><span class=\"pre\">django-oscar&gt;=0.6,&lt;1.0</span></tt>.</p>\n</div>\n<div id=\"id4\">\n<h3>0.1</h3>\n<p>Initial version - supports <tt><span class=\"pre\">django-oscar&gt;=0.6</span></tt>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1359387, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "60027c6e30ba66a5f9819d61eacff31c", "sha256": "47daffd8fdfb32edb139b334bee72c1b9e3e0d11786571c2c9a2aba452a9c29d"}, "downloads": -1, "filename": "django-oscar-avalara-0.1.tar.gz", "has_sig": false, "md5_digest": "60027c6e30ba66a5f9819d61eacff31c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8280, "upload_time": "2014-09-26T14:48:28", "upload_time_iso_8601": "2014-09-26T14:48:28.849558Z", "url": "https://files.pythonhosted.org/packages/7c/eb/e6e4af7ea0a3a7dec2e7c759a476cb93cef93ae92ea3a51d9a8e517320b8/django-oscar-avalara-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "dc80a0070ad7d69ba17b1bcc734f4c39", "sha256": "4a3870cc18da056277f4da70b011d74be36f6ccac116a06c7e83488532f305de"}, "downloads": -1, "filename": "django-oscar-avalara-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dc80a0070ad7d69ba17b1bcc734f4c39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8327, "upload_time": "2014-12-10T21:22:33", "upload_time_iso_8601": "2014-12-10T21:22:33.812376Z", "url": "https://files.pythonhosted.org/packages/ed/c7/947f043f23c09572190d469f73145eb7fb5b38b6e5a258bbe9f4f286be0f/django-oscar-avalara-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5e1a15fdd27c8e7399942e84299e93ef", "sha256": "25b6b47122d198131aa23550f8061d10d6235f3d1b77c3c92606268e85f46a2e"}, "downloads": -1, "filename": "django-oscar-avalara-0.2.tar.gz", "has_sig": false, "md5_digest": "5e1a15fdd27c8e7399942e84299e93ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8385, "upload_time": "2014-12-10T22:23:36", "upload_time_iso_8601": "2014-12-10T22:23:36.835292Z", "url": "https://files.pythonhosted.org/packages/b4/f9/9840729eb341e0208857a6c5fbfdb2d5420224a1988222443ac50f8a8f7a/django-oscar-avalara-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "a011c22582a7dc1c97d49ff48b00d583", "sha256": "10d71081ce4c8ca4697a1eac6059f95747c8ae1da24db724ffa29f4e99f10a85"}, "downloads": -1, "filename": "django-oscar-avalara-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a011c22582a7dc1c97d49ff48b00d583", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8526, "upload_time": "2014-12-23T22:34:43", "upload_time_iso_8601": "2014-12-23T22:34:43.430058Z", "url": "https://files.pythonhosted.org/packages/92/b5/45b3b7bd363e8d5b8df958a340d4f2c7c6df123804bc7bef409957bc4d6e/django-oscar-avalara-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a011c22582a7dc1c97d49ff48b00d583", "sha256": "10d71081ce4c8ca4697a1eac6059f95747c8ae1da24db724ffa29f4e99f10a85"}, "downloads": -1, "filename": "django-oscar-avalara-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a011c22582a7dc1c97d49ff48b00d583", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8526, "upload_time": "2014-12-23T22:34:43", "upload_time_iso_8601": "2014-12-23T22:34:43.430058Z", "url": "https://files.pythonhosted.org/packages/92/b5/45b3b7bd363e8d5b8df958a340d4f2c7c6df123804bc7bef409957bc4d6e/django-oscar-avalara-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:25 2020"}