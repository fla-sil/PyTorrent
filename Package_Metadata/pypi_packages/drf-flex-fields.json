{"info": {"author": "Robert Singer", "author_email": "robertgsinger@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Django REST - FlexFields\n\n[![Package version](https://badge.fury.io/py/drf-flex-fields.svg)](https://pypi.python.org/pypi/drf-flex-fields)\n[![Python versions](https://img.shields.io/pypi/status/drf-flex-fields.svg)](https://img.shields.io/pypi/status/django-lifecycle.svg/)\n\nFlexible, dynamic fields and nested models for Django REST Framework serializers.\n\n# Overview\n\nFlexFields (DRF-FF) for [Django REST Framework](https://django-rest-framework.org) is a package designed to provide a common baseline of functionality for dynamically setting fields and nested models within DRF serializers. This package is designed for simplicity, with minimal magic and entanglement with DRF's foundational classes.\n\nKey benefits:\n* Easily set up fields that be expanded to their fully serialized counterparts via query parameters (`users/?expand=organization,friends`)\n* Select a subset of fields by either:\n  * specifying which ones should be included (`users/?fields=id,first_name`)\n  * specifying which ones should be excluded (`users/?omit=id,first_name`)\n* Use dot notation to dynamically modify fields at arbitrary depths (`users/?expand=organization.owner.roles`)\n* Flexible API - options can also be passed directly to a serializer: `UserSerializer(obj, expand=['organization'])`\n\n# Quick Start\n\n```python\nfrom rest_flex_fields import FlexFieldsModelSerializer\n\nclass StateSerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = Country\n        fields = ('id', 'name')\n\nclass CountrySerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = Country\n        fields = ('id', 'name', 'population', 'states')\n        expandable_fields = {\n          'states': (StateSerializer, {'many': True})\n        }\n\nclass PersonSerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = Person\n        fields = ('id', 'name', 'country', 'occupation')\n        expandable_fields = {'country': CountrySerializer}\n```\n\n```\nGET /people/142/\n```\n```json\n{\n  \"id\": 142,\n  \"name\": \"Jim Halpert\",\n  \"country\": 1\n}\n```\n\n```\nGET /people/142/?expand=country.states\n```\n```json\n{\n  \"id\": 142,\n  \"name\": \"Jim Halpert\",\n  \"country\": {\n    \"id\": 1,\n    \"name\": \"United States\",\n    \"states\": [\n      {\n        \"id\": 23,\n        \"name\": \"Ohio\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Pennsylvania\"\n      }\n    ]\n  }\n}\n```\n# Table of Contents:\n\n- [Setup](#setup)\n- [Usage](#usage)\n  * [Dynamic field expansion](#dynamic-field-expansion)\n  * [Deferred fields](#deferred-fields)\n  * [Deep, nested Expansion](#deep-nested-expansion)\n  * [Field expansion on \"list\" views](#list-views)\n  * [Expanding a \"many\" relationship](#expanding-many)\n  * [Dynamically setting fields (sparse fields)](#dynamically-setting-fields)\n  * [Reference serializer as a string (lazy evaluation)](#lazy-ref)\n  * [Increase re-usability of serializers](#increased-reuse)\n- [Serializer Options - Overview](#serializer-options)\n- [Advanced](#advanced)\n  * [Serializer introspection](#serializer-introspection)\n  * [Use \"~all\" to expand all available fields](#use-all)\n  * [Combining sparse and expanded fields](#combining-sparse-and-expanded)\n  * [Query optimization (experimental)](#query-optimization-experimental)\n- [Change Log](#changelog)\n- [Testing](#testing)\n- [License](#license)\n\n# Setup\n\nFirst install:\n```\npip install drf-flex-fields\n```\n\nThen have your serializers subclass `FlexFieldsModelSerializer`:\n```python\nfrom rest_flex_fields import FlexFieldsModelSerializer\n\nclass StateSerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = Country\n        fields = ('id', 'name')\n\nclass CountrySerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = Country\n        fields = ('id', 'name', 'population', 'states')\n        expandable_fields = {\n          'states': (StateSerializer, {'many': True})\n        }\n```\n\nAlternatively, you can add the `FlexFieldsSerializerMixin` mixin to a model serializer.\n\n# Usage\n\n## Dynamic Field Expansion\n\nTo define expandable fields, add an `expandable_fields` dictionary to your serializer's `Meta` class. Key the dictionary with the name of the field that you want to dynamically expand, and set its value to either the expanded serializer or a tuple where the first element is the serializer and the second is a dictionary of options that will be used to instantiate the serializer.\n\n```python\nclass CountrySerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = Country\n        fields = ['name', 'population']\n\n\nclass PersonSerializer(FlexFieldsModelSerializer):\n    country = serializers.PrimaryKeyRelatedField(read_only=True)\n\n    class Meta:\n        model = Person\n        fields = ['id', 'name', 'country', 'occupation']\n\n        expandable_fields = {\n            'country': CountrySerializer\n        }\n```\n\nIf the default serialized response is the following:\n```json\n{\n  \"id\" : 13322,\n  \"name\" : \"John Doe\",\n  \"country\" : 12,\n  \"occupation\" : \"Programmer\",\n}\n```\nWhen you do a `GET /person/13322?expand=country`, the response will change to:\n\n```json\n{\n  \"id\" : 13322,\n  \"name\" : \"John Doe\",\n  \"country\" : {\n    \"name\" : \"United States\",\n    \"population\": 330000000\n  },\n  \"occupation\" : \"Programmer\",\n}\n```\n\n## Deferred Fields\nAlternatively, you could treat ```country``` as a \"deferred\" field by not defining it among the default fields. To make a field deferred, only define it within the serializer's ```expandable_fields```.\n\n## Deep, Nested Expansion\nLet's say you add ```StateSerializer``` as a serializer nested inside the country serializer above:\n\n```python\nclass StateSerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = State\n        fields = ['name', 'population']\n\n\nclass CountrySerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = Country\n        fields = ['name', 'population']\n\n        expandable_fields = {\n            'states': (StateSerializer, {'many': True})\n        }\n\nclass PersonSerializer(FlexFieldsModelSerializer):\n    country = serializers.PrimaryKeyRelatedField(read_only=True)\n\n    class Meta:\n        model = Person\n        fields = ['id', 'name', 'country', 'occupation']\n\n        expandable_fields = {\n            'country': CountrySerializer\n        }\n```\n\nYour default serialized response might be the following for `person` and `country`, respectively:\n```json\n{\n  \"id\" : 13322,\n  \"name\" : \"John Doe\",\n  \"country\" : 12,\n  \"occupation\" : \"Programmer\",\n}\n\n{\n  \"id\" : 12,\n  \"name\" : \"United States\",\n  \"states\" : \"http://www.api.com/countries/12/states\"\n}\n```\nBut if you do a ```GET /person/13322?expand=country.states```, it would be:\n```json\n{\n  \"id\" : 13322,\n  \"name\" : \"John Doe\",\n  \"occupation\" : \"Programmer\",\n  \"country\" : {\n    \"id\" : 12,\n    \"name\" : \"United States\",\n    \"states\" : [\n      {\n        \"name\" : \"Ohio\",\n        \"population\": 11000000\n      }\n    ]\n  }\n}\n```\nPlease be kind to your database, as this could incur many additional queries. Though, you can mitigate this impact through judicious use of ```prefetch_related``` and ```select_related``` when defining the queryset for your viewset.\n\n## Field Expansion on \"List\" Views <a id=\"list-views\"></a>\n\nIf you request many objects, expanding fields could lead to many additional database queries. Subclass `FlexFieldsModelViewSet` if you want to prevent expanding fields by default when calling a ViewSet's `list` method. Place those fields that you would like to expand in a `permit_list_expands` property on the ViewSet:\n\n```python\nfrom drf_flex_fields import is_expanded\n\nclass PersonViewSet(FlexFieldsModelViewSet):\n    permit_list_expands = ['employer']\n    serializer_class = PersonSerializer\n\n    def get_queryset(self):\n        queryset = models.Person.objects.all()\n        if is_expanded(self.request, 'employer'):\n            queryset = queryset.select_related('employer')\n        return queryset\n```\n\nNotice how this example is using the `is_expanded` utility method as well as `select_related` and `prefetch_related` to efficiently query the database if the field is expanded.\n\n## Expanding a \"Many\" Relationship <a id=\"expanding-many\"></a>\nSet `many` to `True` in the serializer options to make sure \"to many\" fields are expanded correctly.\n\n```python\nclass StateSerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = State\n        fields = ['name', 'population']\n\n\nclass CountrySerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = Country\n        fields = ['name', 'population']\n\n        expandable_fields = {\n            'states': (StateSerializer, {'many': True})\n        }\n```\n\nA request to ```GET /countries?expand=states``` will return:\n```python\n{\n    \"id\" : 12,\n    \"name\" : \"United States\",\n    \"states\" : [\n      {\n        \"name\" : \"Alabama\",\n        \"population\": 11000000\n      },\n      //... more states ... //\n      {\n        \"name\" : \"Ohio\",\n        \"population\": 11000000\n      }\n    ]\n}\n```\n\n## Dynamically Setting Fields (Sparse Fields) <a id=\"dynamically-setting-fields\"></a>\n\nYou can use either the `fields` or `omit` keywords to declare only the fields you want to include or to specify fields that should be excluded.\n\nConsider this as a default serialized response:\n```json\n{\n  \"id\" : 13322,\n  \"name\" : \"John Doe\",\n  \"country\" : {\n    \"name\" : \"United States\",\n    \"population\": 330000000\n  },\n  \"occupation\" : \"Programmer\",\n  \"hobbies\" : [\"rock climbing\", \"sipping coffee\"]\n}\n```\nTo whittle down the fields via URL parameters, simply add `?fields=id,name,country` to your requests to get back:\n```json\n{\n  \"id\" : 13322,\n  \"name\" : \"John Doe\",\n  \"country\" : {\n    \"name\" : \"United States\",\n    \"population: 330000000\n  }\n}\n```\nOr, for more specificity, you can use dot-notation,  ```?fields=id,name,country.name```:\n```json\n{\n  \"id\" : 13322,\n  \"name\" : \"John Doe\",\n  \"country\" : {\n    \"name\" : \"United States\",\n  }\n}\n```\nOr, if you want to leave out the nested country object, do ```?omit=country```:\n```json\n{\n  \"id\" : 13322,\n  \"name\" : \"John Doe\",\n  \"occupation\" : \"Programmer\",\n  \"hobbies\" : [\"rock climbing\", \"sipping coffee\"]\n}\n```\n\n## Reference serializer as a string (lazy evaluation) <a id=\"lazy-ref\"></a>\n\nTo avoid circular import problems, it's possible to lazily evaluate a string reference to you serializer class using this syntax:\n\n```python\nexpandable_fields = {\n    'record_set': ('<app_name>.RelatedSerializer', {'many': True})\n}\n```\n\nSubstitute the name of your Django app where the serializer is found for `<app_name>`.\n\n## Increased re-usability of serializers <a id=\"increased-reuse\"></a>\n\nThe `omit` and `fields` options can be passed directly to serializers. Rather than defining a separate, slimmer version of a regular serializer, you can re-use the same serializer and declare which fields you want.\n\n```python\nfrom rest_flex_fields import FlexFieldsModelSerializer\n\nclass CountrySerializer(FlexFieldsModelSerializer):\n    class Meta:\n        model = Country\n        fields = ['id', 'name', 'population', 'capital', 'square_miles']\n\nclass PersonSerializer(FlexFieldsModelSerializer):\n    country = CountrySerializer(fields=['id', 'name'])\n\n    class Meta:\n        model = Person\n        fields = ['id', 'name', 'country']\n\n\nserializer = PersonSerializer(person)\nprint(serializer.data)\n\n>>>{\n  \"id\": 13322,\n  \"name\": \"John Doe\",\n  \"country\": {\n    \"id\": 1,\n    \"name\": \"United States\",\n  }\n}\n```\n\n# Serializer Options\n\nDynamic field options can be passed in the following ways:\n- from the request's query parameters; separate multiple values with a commma\n- as keyword arguments directly to the serializer class when its constructed\n- from a dictionary placed as the second element in a tuple when defining `expandable_fields`\n\nApproach #1\n```\nGET /people?expand=friends.hobbies,employer&omit=age\n```\n\nApproach #2\n```python\nserializer = PersonSerializer(\n  person, \n  expand=[\"friends.hobbies\", \"employer\"],\n  omit=\"friends.age\"\n)\n```\n\nApproach #3\n```python\n\nclass PersonSerializer(FlexFieldsModelSerializer):\n  // Your field definitions\n\n  class Meta:\n    model = Person\n    fields = [\"age\", \"hobbies\", \"name\"]\n    expandable_fields = {\n      'friends': (\n        'serializer.FriendSerializer',\n        {'many': True, \"expand\": [\"hobbies\"], \"omit\": \"friends.age\"}\n      )\n    }\n```\n\n| Option        | Description   |\n| ------------- |:-------------:| \n| expand        | Fields to expand; must be configured in the serializer's `expandable_fields` |\n| fields        | Fields that should be included; all others will be excluded      | \n| omit          | Fields that should be excluded; all others will be included      | \n\n# Advanced\n\n## Serializer Introspection\n\nWhen using an instance of `FlexFieldsModelSerializer`, you can examine the property `expanded_fields` to discover which fields, if any, have been dynamically expanded.\n\n## Use \"~all\" to Expand All Available Fields <a id=\"use-all\"></a>\n\nYou can set ```expand=~all``` to automatically expand all fields that are available for expansion. This will take effect only for the top-level serializer; if you need to also expand fields that are present on deeply nested models, then you will need to explicitly pass their values using dot notation.\n\n## Combining Sparse Fields and Field Expansion  <a id=\"combining-sparse-and-expanded\"></a>\n\n You may be wondering how things work if you use both the `expand` and `fields` option, and there is overlap. For example, your serialized person model may look like the following by default:\n\n```json\n{\n  \"id\": 13322,\n  \"name\": \"John Doe\",\n  \"country\": {\n    \"name\": \"United States\",\n  }\n}\n```\n\nHowever, you make the following request `HTTP GET /person/13322?include=id,name&expand=country`. You will get the following back:\n\n```json\n{\n  \"id\": 13322,\n  \"name\": \"John Doe\"\n}\n```\n\nThe ```include``` field takes precedence over ```expand```. That is, if a field is not among the set that is explicitly alllowed, it cannot be expanded. If such a conflict occurs, you will not pay for the extra database queries - the expanded field will be silently abandoned.\n\n## Query optimization (experimental)\n\nAn experimental filter backend is available to help you automatically reduce the number of SQL queries and their transfer size. *This feature has not been tested thorougly and any help testing and reporting bugs is greatly appreciated.* You can add FlexFieldFilterBackend to `DEFAULT_FILTER_BACKENDS` in the settings:\n```python\n# settings.py\n\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': (\n        'rest_flex_fields.filter_backends.FlexFieldsFilterBackend',\n        # ...        \n    ),\n    # ...\n}\n```\n\nIt will automatically call `select_related` and `prefetch_related` on the current QuerySet by determining which fields are needed from many-to-many and foreign key-related models. For sparse fields requests (`?omit=fieldX,fieldY` or `?fields=fieldX,fieldY`), the backend will automatically call `only(*field_names)` using only the fields needed for serialization. \n\n**WARNING:** The optimization currently works only for one nesting level.\n\n# Changelog <a id=\"changelog\"></a>\n\n## 0.8.0 (April 2020)\n* Adds support for `expand`, `omit` and `fields` query parameters for non-GET requests.\n  - The common use case is creating/updating a model instance and returning a serialized response with expanded fields\n  - Thanks @kotepillar for raising the issue (#25) and @Crocmagnon for the idea of delaying field modification to `to_representation()`.\n\n## 0.7.5 (February 2020)\n* Simplifies declaration of `expandable_fields`\n  - If using a tuple, the second element - to define the serializer settings - is now optional.\n  - Instead of a tuple, you can now just use the serializer class or a string to lazily reference that class.\n  - Updates documentation.\n\n## 0.7.0 (February 2020)\n* Adds support for different ways of passing arrays in query strings. Thanks @sentyaev!\n* Fixes attribute error when map is supplied to split levels utility function. Thanks @hemache!\n\n## 0.6.1 (September 2019)\n* Adds experimental support for automatically SQL query optimization via a `FlexFieldsFilterBackend`. Thanks ADR-007!\n* Adds CircleCI config file. Thanks mikeIFTS! \n* Moves declaration of `expandable_fields` to `Meta` class on serialzer for consistency with DRF (will continue to support declaration as class property)\n* Python 2 is no longer supported. If you need Python 2 support, you can continue to use older versions of this package.\n\n## 0.5.0 (April 2019)\n* Added support for `omit` keyword for field exclusion. Code clean up and improved test coverage.\n\n## 0.3.4 (May 2018)\n* Handle case where `request` is `None` when accessing request object from serializer. Thanks @jsatt!\n\n## 0.3.3 (April 2018)\n* Exposes `FlexFieldsSerializerMixin` in addition to `FlexFieldsModelSerializer`. Thanks @jsatt!\n\n# Testing\n\nTests are found in a simplified DRF project in the ```/tests``` folder. Install the project requirements and do ```./manage.py test``` to run them.\n\n# License\n\nSee [License](LICENSE.md).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rsinger86/drf-flex-fields", "keywords": "django rest api dynamic fields", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "drf-flex-fields", "package_url": "https://pypi.org/project/drf-flex-fields/", "platform": "", "project_url": "https://pypi.org/project/drf-flex-fields/", "project_urls": {"Homepage": "https://github.com/rsinger86/drf-flex-fields"}, "release_url": "https://pypi.org/project/drf-flex-fields/0.8.0/", "requires_dist": null, "requires_python": "", "summary": "Flexible, dynamic fields and nested resources for Django REST Framework serializers.", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django REST - FlexFields</h1>\n<p><a href=\"https://pypi.python.org/pypi/drf-flex-fields\" rel=\"nofollow\"><img alt=\"Package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/050b5685e89ba2ee463367050b16c79ecae55051/68747470733a2f2f62616467652e667572792e696f2f70792f6472662d666c65782d6669656c64732e737667\"></a>\n<a href=\"https://img.shields.io/pypi/status/django-lifecycle.svg/\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7542a2d7c61ffe313886f4c239ce5da321253519/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f6472662d666c65782d6669656c64732e737667\"></a></p>\n<p>Flexible, dynamic fields and nested models for Django REST Framework serializers.</p>\n<h1>Overview</h1>\n<p>FlexFields (DRF-FF) for <a href=\"https://django-rest-framework.org\" rel=\"nofollow\">Django REST Framework</a> is a package designed to provide a common baseline of functionality for dynamically setting fields and nested models within DRF serializers. This package is designed for simplicity, with minimal magic and entanglement with DRF's foundational classes.</p>\n<p>Key benefits:</p>\n<ul>\n<li>Easily set up fields that be expanded to their fully serialized counterparts via query parameters (<code>users/?expand=organization,friends</code>)</li>\n<li>Select a subset of fields by either:\n<ul>\n<li>specifying which ones should be included (<code>users/?fields=id,first_name</code>)</li>\n<li>specifying which ones should be excluded (<code>users/?omit=id,first_name</code>)</li>\n</ul>\n</li>\n<li>Use dot notation to dynamically modify fields at arbitrary depths (<code>users/?expand=organization.owner.roles</code>)</li>\n<li>Flexible API - options can also be passed directly to a serializer: <code>UserSerializer(obj, expand=['organization'])</code></li>\n</ul>\n<h1>Quick Start</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_flex_fields</span> <span class=\"kn\">import</span> <span class=\"n\">FlexFieldsModelSerializer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">StateSerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Country</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CountrySerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Country</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'population'</span><span class=\"p\">,</span> <span class=\"s1\">'states'</span><span class=\"p\">)</span>\n        <span class=\"n\">expandable_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n          <span class=\"s1\">'states'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">StateSerializer</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'many'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n        <span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonSerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'country'</span><span class=\"p\">,</span> <span class=\"s1\">'occupation'</span><span class=\"p\">)</span>\n        <span class=\"n\">expandable_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'country'</span><span class=\"p\">:</span> <span class=\"n\">CountrySerializer</span><span class=\"p\">}</span>\n</pre>\n<pre><code>GET /people/142/\n</code></pre>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">142</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jim Halpert\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"country\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><code>GET /people/142/?expand=country.states\n</code></pre>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">142</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jim Halpert\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"country\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"United States\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"states\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">23</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ohio\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Pennsylvania\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h1>Table of Contents:</h1>\n<ul>\n<li><a href=\"#setup\" rel=\"nofollow\">Setup</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#dynamic-field-expansion\" rel=\"nofollow\">Dynamic field expansion</a></li>\n<li><a href=\"#deferred-fields\" rel=\"nofollow\">Deferred fields</a></li>\n<li><a href=\"#deep-nested-expansion\" rel=\"nofollow\">Deep, nested Expansion</a></li>\n<li><a href=\"#list-views\" rel=\"nofollow\">Field expansion on \"list\" views</a></li>\n<li><a href=\"#expanding-many\" rel=\"nofollow\">Expanding a \"many\" relationship</a></li>\n<li><a href=\"#dynamically-setting-fields\" rel=\"nofollow\">Dynamically setting fields (sparse fields)</a></li>\n<li><a href=\"#lazy-ref\" rel=\"nofollow\">Reference serializer as a string (lazy evaluation)</a></li>\n<li><a href=\"#increased-reuse\" rel=\"nofollow\">Increase re-usability of serializers</a></li>\n</ul>\n</li>\n<li><a href=\"#serializer-options\" rel=\"nofollow\">Serializer Options - Overview</a></li>\n<li><a href=\"#advanced\" rel=\"nofollow\">Advanced</a>\n<ul>\n<li><a href=\"#serializer-introspection\" rel=\"nofollow\">Serializer introspection</a></li>\n<li><a href=\"#use-all\" rel=\"nofollow\">Use \"~all\" to expand all available fields</a></li>\n<li><a href=\"#combining-sparse-and-expanded\" rel=\"nofollow\">Combining sparse and expanded fields</a></li>\n<li><a href=\"#query-optimization-experimental\" rel=\"nofollow\">Query optimization (experimental)</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" rel=\"nofollow\">Change Log</a></li>\n<li><a href=\"#testing\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h1>Setup</h1>\n<p>First install:</p>\n<pre><code>pip install drf-flex-fields\n</code></pre>\n<p>Then have your serializers subclass <code>FlexFieldsModelSerializer</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_flex_fields</span> <span class=\"kn\">import</span> <span class=\"n\">FlexFieldsModelSerializer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">StateSerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Country</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CountrySerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Country</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'population'</span><span class=\"p\">,</span> <span class=\"s1\">'states'</span><span class=\"p\">)</span>\n        <span class=\"n\">expandable_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n          <span class=\"s1\">'states'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">StateSerializer</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'many'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n        <span class=\"p\">}</span>\n</pre>\n<p>Alternatively, you can add the <code>FlexFieldsSerializerMixin</code> mixin to a model serializer.</p>\n<h1>Usage</h1>\n<h2>Dynamic Field Expansion</h2>\n<p>To define expandable fields, add an <code>expandable_fields</code> dictionary to your serializer's <code>Meta</code> class. Key the dictionary with the name of the field that you want to dynamically expand, and set its value to either the expanded serializer or a tuple where the first element is the serializer and the second is a dictionary of options that will be used to instantiate the serializer.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CountrySerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Country</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'population'</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonSerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">PrimaryKeyRelatedField</span><span class=\"p\">(</span><span class=\"n\">read_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'country'</span><span class=\"p\">,</span> <span class=\"s1\">'occupation'</span><span class=\"p\">]</span>\n\n        <span class=\"n\">expandable_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'country'</span><span class=\"p\">:</span> <span class=\"n\">CountrySerializer</span>\n        <span class=\"p\">}</span>\n</pre>\n<p>If the default serialized response is the following:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"country\"</span> <span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"occupation\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Programmer\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>When you do a <code>GET /person/13322?expand=country</code>, the response will change to:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"country\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"United States\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">330000000</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"occupation\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Programmer\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Deferred Fields</h2>\n<p>Alternatively, you could treat <code>country</code> as a \"deferred\" field by not defining it among the default fields. To make a field deferred, only define it within the serializer's <code>expandable_fields</code>.</p>\n<h2>Deep, Nested Expansion</h2>\n<p>Let's say you add <code>StateSerializer</code> as a serializer nested inside the country serializer above:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">StateSerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">State</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'population'</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CountrySerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Country</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'population'</span><span class=\"p\">]</span>\n\n        <span class=\"n\">expandable_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'states'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">StateSerializer</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'many'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n        <span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonSerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">PrimaryKeyRelatedField</span><span class=\"p\">(</span><span class=\"n\">read_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'country'</span><span class=\"p\">,</span> <span class=\"s1\">'occupation'</span><span class=\"p\">]</span>\n\n        <span class=\"n\">expandable_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'country'</span><span class=\"p\">:</span> <span class=\"n\">CountrySerializer</span>\n        <span class=\"p\">}</span>\n</pre>\n<p>Your default serialized response might be the following for <code>person</code> and <code>country</code>, respectively:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"country\"</span> <span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"occupation\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Programmer\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"United States\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"states\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"http://www.api.com/countries/12/states\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>But if you do a <code>GET /person/13322?expand=country.states</code>, it would be:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"occupation\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Programmer\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"country\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"United States\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"states\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Ohio\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">11000000</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Please be kind to your database, as this could incur many additional queries. Though, you can mitigate this impact through judicious use of <code>prefetch_related</code> and <code>select_related</code> when defining the queryset for your viewset.</p>\n<h2>Field Expansion on \"List\" Views <a id=\"list-views\"></a></h2>\n<p>If you request many objects, expanding fields could lead to many additional database queries. Subclass <code>FlexFieldsModelViewSet</code> if you want to prevent expanding fields by default when calling a ViewSet's <code>list</code> method. Place those fields that you would like to expand in a <code>permit_list_expands</code> property on the ViewSet:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">drf_flex_fields</span> <span class=\"kn\">import</span> <span class=\"n\">is_expanded</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonViewSet</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelViewSet</span><span class=\"p\">):</span>\n    <span class=\"n\">permit_list_expands</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'employer'</span><span class=\"p\">]</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">PersonSerializer</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_expanded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s1\">'employer'</span><span class=\"p\">):</span>\n            <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s1\">'employer'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">queryset</span>\n</pre>\n<p>Notice how this example is using the <code>is_expanded</code> utility method as well as <code>select_related</code> and <code>prefetch_related</code> to efficiently query the database if the field is expanded.</p>\n<h2>Expanding a \"Many\" Relationship <a id=\"expanding-many\"></a></h2>\n<p>Set <code>many</code> to <code>True</code> in the serializer options to make sure \"to many\" fields are expanded correctly.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">StateSerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">State</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'population'</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CountrySerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Country</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'population'</span><span class=\"p\">]</span>\n\n        <span class=\"n\">expandable_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'states'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">StateSerializer</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'many'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n        <span class=\"p\">}</span>\n</pre>\n<p>A request to <code>GET /countries?expand=states</code> will return:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"United States\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"states\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Alabama\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">11000000</span>\n      <span class=\"p\">},</span>\n      <span class=\"o\">//...</span> <span class=\"n\">more</span> <span class=\"n\">states</span> <span class=\"o\">...</span> <span class=\"o\">//</span>\n      <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Ohio\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">11000000</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Dynamically Setting Fields (Sparse Fields) <a id=\"dynamically-setting-fields\"></a></h2>\n<p>You can use either the <code>fields</code> or <code>omit</code> keywords to declare only the fields you want to include or to specify fields that should be excluded.</p>\n<p>Consider this as a default serialized response:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"country\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"United States\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">330000000</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"occupation\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Programmer\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"hobbies\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"rock climbing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sipping coffee\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>To whittle down the fields via URL parameters, simply add <code>?fields=id,name,country</code> to your requests to get back:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"country\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"United States\"</span><span class=\"p\">,</span>\n    <span class=\"err\">\"population:</span> <span class=\"err\">330000000</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Or, for more specificity, you can use dot-notation,  <code>?fields=id,name,country.name</code>:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"country\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"United States\"</span><span class=\"p\">,</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Or, if you want to leave out the nested country object, do <code>?omit=country</code>:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span> <span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"occupation\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Programmer\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"hobbies\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"rock climbing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sipping coffee\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Reference serializer as a string (lazy evaluation) <a id=\"lazy-ref\"></a></h2>\n<p>To avoid circular import problems, it's possible to lazily evaluate a string reference to you serializer class using this syntax:</p>\n<pre><span class=\"n\">expandable_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'record_set'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'&lt;app_name&gt;.RelatedSerializer'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'many'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Substitute the name of your Django app where the serializer is found for <code>&lt;app_name&gt;</code>.</p>\n<h2>Increased re-usability of serializers <a id=\"increased-reuse\"></a></h2>\n<p>The <code>omit</code> and <code>fields</code> options can be passed directly to serializers. Rather than defining a separate, slimmer version of a regular serializer, you can re-use the same serializer and declare which fields you want.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_flex_fields</span> <span class=\"kn\">import</span> <span class=\"n\">FlexFieldsModelSerializer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CountrySerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Country</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'population'</span><span class=\"p\">,</span> <span class=\"s1\">'capital'</span><span class=\"p\">,</span> <span class=\"s1\">'square_miles'</span><span class=\"p\">]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonSerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"n\">CountrySerializer</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">])</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'country'</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">PersonSerializer</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">{</span>\n  <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"country\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"United States\"</span><span class=\"p\">,</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h1>Serializer Options</h1>\n<p>Dynamic field options can be passed in the following ways:</p>\n<ul>\n<li>from the request's query parameters; separate multiple values with a commma</li>\n<li>as keyword arguments directly to the serializer class when its constructed</li>\n<li>from a dictionary placed as the second element in a tuple when defining <code>expandable_fields</code></li>\n</ul>\n<p>Approach #1</p>\n<pre><code>GET /people?expand=friends.hobbies,employer&amp;omit=age\n</code></pre>\n<p>Approach #2</p>\n<pre><span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">PersonSerializer</span><span class=\"p\">(</span>\n  <span class=\"n\">person</span><span class=\"p\">,</span> \n  <span class=\"n\">expand</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"friends.hobbies\"</span><span class=\"p\">,</span> <span class=\"s2\">\"employer\"</span><span class=\"p\">],</span>\n  <span class=\"n\">omit</span><span class=\"o\">=</span><span class=\"s2\">\"friends.age\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Approach #3</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PersonSerializer</span><span class=\"p\">(</span><span class=\"n\">FlexFieldsModelSerializer</span><span class=\"p\">):</span>\n  <span class=\"o\">//</span> <span class=\"n\">Your</span> <span class=\"n\">field</span> <span class=\"n\">definitions</span>\n\n  <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"age\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hobbies\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">]</span>\n    <span class=\"n\">expandable_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'friends'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'serializer.FriendSerializer'</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span><span class=\"s1\">'many'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">\"expand\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"hobbies\"</span><span class=\"p\">],</span> <span class=\"s2\">\"omit\"</span><span class=\"p\">:</span> <span class=\"s2\">\"friends.age\"</span><span class=\"p\">}</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>expand</td>\n<td align=\"center\">Fields to expand; must be configured in the serializer's <code>expandable_fields</code></td>\n</tr>\n<tr>\n<td>fields</td>\n<td align=\"center\">Fields that should be included; all others will be excluded</td>\n</tr>\n<tr>\n<td>omit</td>\n<td align=\"center\">Fields that should be excluded; all others will be included</td>\n</tr></tbody></table>\n<h1>Advanced</h1>\n<h2>Serializer Introspection</h2>\n<p>When using an instance of <code>FlexFieldsModelSerializer</code>, you can examine the property <code>expanded_fields</code> to discover which fields, if any, have been dynamically expanded.</p>\n<h2>Use \"~all\" to Expand All Available Fields <a id=\"use-all\"></a></h2>\n<p>You can set <code>expand=~all</code> to automatically expand all fields that are available for expansion. This will take effect only for the top-level serializer; if you need to also expand fields that are present on deeply nested models, then you will need to explicitly pass their values using dot notation.</p>\n<h2>Combining Sparse Fields and Field Expansion  <a id=\"combining-sparse-and-expanded\"></a></h2>\n<p>You may be wondering how things work if you use both the <code>expand</code> and <code>fields</code> option, and there is overlap. For example, your serialized person model may look like the following by default:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"country\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"United States\"</span><span class=\"p\">,</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>However, you make the following request <code>HTTP GET /person/13322?include=id,name&amp;expand=country</code>. You will get the following back:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">13322</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The <code>include</code> field takes precedence over <code>expand</code>. That is, if a field is not among the set that is explicitly alllowed, it cannot be expanded. If such a conflict occurs, you will not pay for the extra database queries - the expanded field will be silently abandoned.</p>\n<h2>Query optimization (experimental)</h2>\n<p>An experimental filter backend is available to help you automatically reduce the number of SQL queries and their transfer size. <em>This feature has not been tested thorougly and any help testing and reporting bugs is greatly appreciated.</em> You can add FlexFieldFilterBackend to <code>DEFAULT_FILTER_BACKENDS</code> in the settings:</p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DEFAULT_FILTER_BACKENDS'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'rest_flex_fields.filter_backends.FlexFieldsFilterBackend'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># ...        </span>\n    <span class=\"p\">),</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">}</span>\n</pre>\n<p>It will automatically call <code>select_related</code> and <code>prefetch_related</code> on the current QuerySet by determining which fields are needed from many-to-many and foreign key-related models. For sparse fields requests (<code>?omit=fieldX,fieldY</code> or <code>?fields=fieldX,fieldY</code>), the backend will automatically call <code>only(*field_names)</code> using only the fields needed for serialization.</p>\n<p><strong>WARNING:</strong> The optimization currently works only for one nesting level.</p>\n<h1>Changelog <a id=\"changelog\"></a></h1>\n<h2>0.8.0 (April 2020)</h2>\n<ul>\n<li>Adds support for <code>expand</code>, <code>omit</code> and <code>fields</code> query parameters for non-GET requests.\n<ul>\n<li>The common use case is creating/updating a model instance and returning a serialized response with expanded fields</li>\n<li>Thanks @kotepillar for raising the issue (#25) and @Crocmagnon for the idea of delaying field modification to <code>to_representation()</code>.</li>\n</ul>\n</li>\n</ul>\n<h2>0.7.5 (February 2020)</h2>\n<ul>\n<li>Simplifies declaration of <code>expandable_fields</code>\n<ul>\n<li>If using a tuple, the second element - to define the serializer settings - is now optional.</li>\n<li>Instead of a tuple, you can now just use the serializer class or a string to lazily reference that class.</li>\n<li>Updates documentation.</li>\n</ul>\n</li>\n</ul>\n<h2>0.7.0 (February 2020)</h2>\n<ul>\n<li>Adds support for different ways of passing arrays in query strings. Thanks @sentyaev!</li>\n<li>Fixes attribute error when map is supplied to split levels utility function. Thanks @hemache!</li>\n</ul>\n<h2>0.6.1 (September 2019)</h2>\n<ul>\n<li>Adds experimental support for automatically SQL query optimization via a <code>FlexFieldsFilterBackend</code>. Thanks ADR-007!</li>\n<li>Adds CircleCI config file. Thanks mikeIFTS!</li>\n<li>Moves declaration of <code>expandable_fields</code> to <code>Meta</code> class on serialzer for consistency with DRF (will continue to support declaration as class property)</li>\n<li>Python 2 is no longer supported. If you need Python 2 support, you can continue to use older versions of this package.</li>\n</ul>\n<h2>0.5.0 (April 2019)</h2>\n<ul>\n<li>Added support for <code>omit</code> keyword for field exclusion. Code clean up and improved test coverage.</li>\n</ul>\n<h2>0.3.4 (May 2018)</h2>\n<ul>\n<li>Handle case where <code>request</code> is <code>None</code> when accessing request object from serializer. Thanks @jsatt!</li>\n</ul>\n<h2>0.3.3 (April 2018)</h2>\n<ul>\n<li>Exposes <code>FlexFieldsSerializerMixin</code> in addition to <code>FlexFieldsModelSerializer</code>. Thanks @jsatt!</li>\n</ul>\n<h1>Testing</h1>\n<p>Tests are found in a simplified DRF project in the <code>/tests</code> folder. Install the project requirements and do <code>./manage.py test</code> to run them.</p>\n<h1>License</h1>\n<p>See <a href=\"LICENSE.md\" rel=\"nofollow\">License</a>.</p>\n\n          </div>"}, "last_serial": 7105801, "releases": {"0.1.8": [{"comment_text": "", "digests": {"md5": "e0cf080331471bf5cf2769fdf44d3857", "sha256": "11eafc216a64ececa49c0312c8f5f6db88aff1750ce44c83614a34e86dad74aa"}, "downloads": -1, "filename": "drf-flex-fields-0.1.8.tar.gz", "has_sig": false, "md5_digest": "e0cf080331471bf5cf2769fdf44d3857", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6691, "upload_time": "2016-12-31T21:21:06", "upload_time_iso_8601": "2016-12-31T21:21:06.629060Z", "url": "https://files.pythonhosted.org/packages/ff/29/9a5d700de7811885761c5745774dfa4f812fb671d4f4b0c27d3db5f5af19/drf-flex-fields-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "e182e5ef1cb9680e07cb7041b79d8289", "sha256": "b715205af967c5368a3478651211420b95c2ca44c2e4b2ff6296e36a35608cd7"}, "downloads": -1, "filename": "drf-flex-fields-0.1.9.tar.gz", "has_sig": false, "md5_digest": "e182e5ef1cb9680e07cb7041b79d8289", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7249, "upload_time": "2017-03-12T05:08:07", "upload_time_iso_8601": "2017-03-12T05:08:07.170978Z", "url": "https://files.pythonhosted.org/packages/26/c8/879c510f808c45b5230a4626d55379cb67886c80f92cddf92cf4c15d53a6/drf-flex-fields-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4180340d3770c1e9d0e30f3b98eccc8a", "sha256": "cc3c1633f29c8fa8073e59204157477eede83ef50aa2359489e408960bf53627"}, "downloads": -1, "filename": "drf-flex-fields-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4180340d3770c1e9d0e30f3b98eccc8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7262, "upload_time": "2017-03-14T00:14:28", "upload_time_iso_8601": "2017-03-14T00:14:28.213531Z", "url": "https://files.pythonhosted.org/packages/62/92/ec57d062d33be6c1d9b57495156bd54421f2dea7712aa0c2a7392b8b7db4/drf-flex-fields-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "eb23df65e9177b8b53eb4b0f8848d564", "sha256": "38d4295b8d956d7d68f9d55d8a79f0d7715826aa13b2d18b9a766aab6e33902b"}, "downloads": -1, "filename": "drf-flex-fields-0.2.1.tar.gz", "has_sig": false, "md5_digest": "eb23df65e9177b8b53eb4b0f8848d564", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7274, "upload_time": "2017-03-15T13:07:43", "upload_time_iso_8601": "2017-03-15T13:07:43.510420Z", "url": "https://files.pythonhosted.org/packages/5b/8e/daccc72f49e8dc5dfca8487ebe8062ea09b1f17b735d6e818531f70f5f8b/drf-flex-fields-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "7cfde6dfdeca8a1ec700c624c9d2503f", "sha256": "a61f3f45712386b5363d1907817777fd65ee83915b2c8864a37ef6f53c9ba16a"}, "downloads": -1, "filename": "drf-flex-fields-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7cfde6dfdeca8a1ec700c624c9d2503f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7691, "upload_time": "2017-03-19T15:08:55", "upload_time_iso_8601": "2017-03-19T15:08:55.680140Z", "url": "https://files.pythonhosted.org/packages/23/25/36273894ae77540db7567b175c4ce06fe52c9d66fc0d958dff2720ca3c39/drf-flex-fields-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "9ac2dccfbbc29887c700868e4d7c3c7b", "sha256": "d8f8cb7c0888386f68ba8ac08411164eb49ba0d5d132d6ac4a26894574502ba5"}, "downloads": -1, "filename": "drf-flex-fields-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9ac2dccfbbc29887c700868e4d7c3c7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7707, "upload_time": "2018-02-12T01:56:56", "upload_time_iso_8601": "2018-02-12T01:56:56.353531Z", "url": "https://files.pythonhosted.org/packages/13/50/42fc42d641c44c23d7b1821ce5ab0bdb5fa9ebaca1255c7c677e699c5b53/drf-flex-fields-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "5af2c781de2f8cea756268c34990348f", "sha256": "f8bce88cdc977ec04c6a97ca1a2b2192e48b503e1546810772b5d488e737e364"}, "downloads": -1, "filename": "drf-flex-fields-0.3.1.tar.gz", "has_sig": false, "md5_digest": "5af2c781de2f8cea756268c34990348f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7693, "upload_time": "2018-02-12T02:14:42", "upload_time_iso_8601": "2018-02-12T02:14:42.704187Z", "url": "https://files.pythonhosted.org/packages/2b/cd/a72e73f64d59e7c4128201d9b3f30b730b32592850ee6f1723d6c16c9e36/drf-flex-fields-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "80ad605b6b33700a1ce42c3b224fec3d", "sha256": "9e1ad3e1dddbcfa8e8caea8b0074342eb52f9a283db94080c12ca324a028f5c4"}, "downloads": -1, "filename": "drf-flex-fields-0.3.2.tar.gz", "has_sig": false, "md5_digest": "80ad605b6b33700a1ce42c3b224fec3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7804, "upload_time": "2018-02-12T02:21:28", "upload_time_iso_8601": "2018-02-12T02:21:28.405797Z", "url": "https://files.pythonhosted.org/packages/a1/b6/e83e07ad7f034988959155eca0e87680d1e17ca9ed95831508ceda05fc42/drf-flex-fields-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "4ce5f9e31ed614e5942f956d24047519", "sha256": "d7f752888bd22d17df342a46212c8b37dcfbfdecd20eaabe2b55585f6cb807c4"}, "downloads": -1, "filename": "drf-flex-fields-0.3.3.tar.gz", "has_sig": false, "md5_digest": "4ce5f9e31ed614e5942f956d24047519", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8153, "upload_time": "2018-04-30T01:36:00", "upload_time_iso_8601": "2018-04-30T01:36:00.326003Z", "url": "https://files.pythonhosted.org/packages/d3/33/1e0f3012d3b6d009e23af80f32dd4610c99e39ddc869a37d7e18051ebde0/drf-flex-fields-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "4c5e5c288f0fe58b8b7bd3d20a484947", "sha256": "0dbadc5c52db07838fb8ed58a62882951f3772817ea765052a5f4819c08de7a8"}, "downloads": -1, "filename": "drf-flex-fields-0.3.4.tar.gz", "has_sig": false, "md5_digest": "4c5e5c288f0fe58b8b7bd3d20a484947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8218, "upload_time": "2018-05-04T12:11:39", "upload_time_iso_8601": "2018-05-04T12:11:39.568927Z", "url": "https://files.pythonhosted.org/packages/53/5f/b4492e9ffbf54c46d346669300d55b6b2aa249cb2d03139b0e9b7cd61f98/drf-flex-fields-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "2e78b6458aab17244e98a4033e01614d", "sha256": "445ce1c24b6f881e246dbb437b3cc4ab4ed29ee51e6bb00fd9d4ed64ea609041"}, "downloads": -1, "filename": "drf-flex-fields-0.3.5.tar.gz", "has_sig": false, "md5_digest": "2e78b6458aab17244e98a4033e01614d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13156, "upload_time": "2018-12-08T21:00:21", "upload_time_iso_8601": "2018-12-08T21:00:21.700969Z", "url": "https://files.pythonhosted.org/packages/59/07/21d321e4549da7f322d608796043ba63b0b392d0fb1992e858ec59f24703/drf-flex-fields-0.3.5.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "a4b83b5ca6773b55027dc6dd767fca91", "sha256": "e3e19fb5711b38cd5cfc5428e24687502e72544f42b3bbe2438feb1f5d7991aa"}, "downloads": -1, "filename": "drf-flex-fields-0.5.0.tar.gz", "has_sig": false, "md5_digest": "a4b83b5ca6773b55027dc6dd767fca91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14658, "upload_time": "2019-04-28T13:52:48", "upload_time_iso_8601": "2019-04-28T13:52:48.650783Z", "url": "https://files.pythonhosted.org/packages/ab/5a/e5af74064842253d005ee54104ab1bd1f49147c75650ddf6a27e7b13a863/drf-flex-fields-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "e992a1d3f7819ba4fa3cd5eb1dc80ab5", "sha256": "9f5289b1ccd5d772630ae672dc707ba4bf7602e8019c8af38578385e86412bcd"}, "downloads": -1, "filename": "drf-flex-fields-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e992a1d3f7819ba4fa3cd5eb1dc80ab5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18821, "upload_time": "2019-09-07T17:58:25", "upload_time_iso_8601": "2019-09-07T17:58:25.592568Z", "url": "https://files.pythonhosted.org/packages/19/2b/0a0c622f5dd5ab68ba450989eb03911c1b09c3be78e83d98d5350b54015d/drf-flex-fields-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "ecc0d1e2c1cc0bb1af9bc29024f22354", "sha256": "6a27d3efe3cdf9334e2cf0fab2c1fd18baa4c79e789228aef5b296152904929f"}, "downloads": -1, "filename": "drf-flex-fields-0.6.1.tar.gz", "has_sig": false, "md5_digest": "ecc0d1e2c1cc0bb1af9bc29024f22354", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19141, "upload_time": "2019-09-07T18:12:45", "upload_time_iso_8601": "2019-09-07T18:12:45.037742Z", "url": "https://files.pythonhosted.org/packages/07/31/9df7b00cd2e650da25909f4106eaae0cb8f2e12fa7f4f5d137aedefba6f4/drf-flex-fields-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "f8c4a3b673c49173375768ba7e20194b", "sha256": "57677460615863df8f1a713cfc47f257d7c2d316544a0ae4c575202bb60b32b4"}, "downloads": -1, "filename": "drf-flex-fields-0.7.0.tar.gz", "has_sig": false, "md5_digest": "f8c4a3b673c49173375768ba7e20194b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19713, "upload_time": "2020-02-08T21:24:16", "upload_time_iso_8601": "2020-02-08T21:24:16.202341Z", "url": "https://files.pythonhosted.org/packages/20/a3/c005e72fa375b3603a07f8fd0e2c7fba280c9c5e319553f09a671dd85e08/drf-flex-fields-0.7.0.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "1f2d8b1f5a4a1992660f7c6089fa3405", "sha256": "727d7b68adde4c20c8beb1d317baf250239a92e244a5dd977cde486246a399ef"}, "downloads": -1, "filename": "drf-flex-fields-0.7.5.tar.gz", "has_sig": false, "md5_digest": "1f2d8b1f5a4a1992660f7c6089fa3405", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20540, "upload_time": "2020-02-09T18:24:23", "upload_time_iso_8601": "2020-02-09T18:24:23.980695Z", "url": "https://files.pythonhosted.org/packages/34/05/bd8218b2e6d0e32207a8ff634aaf9de9d26e533fdacd170c2f7ec1e5186f/drf-flex-fields-0.7.5.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "d52aceb11da165d07927c449040520a3", "sha256": "52379f7a3b894e245ac6d40ab0579bc9953449b7ddae6f61b2ccab5b1ae65031"}, "downloads": -1, "filename": "drf-flex-fields-0.8.0.tar.gz", "has_sig": false, "md5_digest": "d52aceb11da165d07927c449040520a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20846, "upload_time": "2020-04-26T16:34:22", "upload_time_iso_8601": "2020-04-26T16:34:22.752923Z", "url": "https://files.pythonhosted.org/packages/b1/36/98b7dacd353e532c9d6897558fc43b85a33f9002f7c562a87549d0786435/drf-flex-fields-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d52aceb11da165d07927c449040520a3", "sha256": "52379f7a3b894e245ac6d40ab0579bc9953449b7ddae6f61b2ccab5b1ae65031"}, "downloads": -1, "filename": "drf-flex-fields-0.8.0.tar.gz", "has_sig": false, "md5_digest": "d52aceb11da165d07927c449040520a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20846, "upload_time": "2020-04-26T16:34:22", "upload_time_iso_8601": "2020-04-26T16:34:22.752923Z", "url": "https://files.pythonhosted.org/packages/b1/36/98b7dacd353e532c9d6897558fc43b85a33f9002f7c562a87549d0786435/drf-flex-fields-0.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:45 2020"}