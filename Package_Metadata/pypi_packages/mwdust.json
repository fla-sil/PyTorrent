{"info": {"author": "Jo Bovy", "author_email": "bovy@astro.utoronto.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: C", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Astronomy", "Topic :: Scientific/Engineering :: Physics"], "description": "mwdust\n======\n\n**Dust in 3D in the Milky Way**\n\n\n\n\nInstallation\n-------------\n\nPlease define an environment variable ``DUST_DIR`` before installing\nthe code; this is a directory that will contain the dust data.\n\nStandard python setup.py build/install\n\nEither\n\n``sudo python setup.py install``\n\nor \n\n``python setup.py install --prefix=/some/directory/``\n\nThe installation automatically downloads the relevant dust data. You\nmight have to define an environment variable ``SUDO_USER`` if not\ninstalling with sudo and you might have to use the ``-E`` option when\nyou are installing with sudo to transfer your environment variables to\nsudo.\n\nDust Data\n---------\n\nThe code can automatically download all of the necessary data. By\ndefault, only the most commonly-used dust maps are downloaded; to\ndownload all maps, use the ``--all-downloads`` installation option\n(you can just re-run the installation with this option to add this\nlater).  The installation option ``--no-downloads`` turns all\ndownloads off.\n\nThe data are put in subdirectories of a directory ``DUST_DIR``, with\nroughly the following lay-out::\n\n    $DUST_DIR/\n       combined15/\n          dust-map-3d.h5\n       combined19/\n          combine19.h5\n       green15/\n          dust-map-3d.h5\n       green17/\n          bayestar2017.h5\n       green19/\n          bayestar2019.h5\n       maps/\n          SFD_dust_4096_ngp.fits\n\t  SFD_dust_4096_sgp.fits\n       marshall06/\n          ReadMe\n\t  table1.dat\n       sale14/\n          Amap.dat\n          ReadMe\n\nThe data for the Drimmel et al. (2003) map is installed in the code\ndirectory, because it is not very large.\n\nUsage\n------\n\nAll of the maps can be initialized similar to::\n\n    import mwdust\n    drimmel= mwdust.Drimmel03(filter='2MASS H')\n    combined= mwdust.Combined15(filter='2MASS H')\n    combined19= mwdust.Combined19(filter='2MASS H')\n    sfd= mwdust.SFD(filter='2MASS H')\n\nwhich sets up the Drimmel et al. (2003) map, the combined Bovy et\nal. (2016) map, an updated version of the combined map using the Green\net al. (2019) Bayestar19 map, and the SFD map for the *H*-band\nfilter. The maps can be evaluate for a given Galactic longitude *l*,\nGalactic latitude *b*, and an array (or scalar) of distances *D*::\n\n\t drimmel(60.,0.,3.) # inputs are (l,b,D)\n\t array([ 0.38813341])\n\t combined(30.,3.,numpy.array([1.,2.,3.,10.]))\n\t array([ 0.22304147,  0.55687252,  0.86694602,  1.18779507])\n\t # SFD is just the constant SFD extinction\n\t sfd(30.,3.,numpy.array([1.,2.,3.]))\n\t array([ 1.19977335,  1.19977335,  1.19977335])\n\nand they can be plotted as a function of distance at a given (l,b)::\n\n    combined.plot(55.,0.5) # inputs are (l,b)\n\n(plot not shown). Maps that are derived from the\n``HierarchicalHealpixMap.py`` class (currently all Green-type maps and\nthe combined maps) can also be plotted on the sky using a Mollweide\nprojection at a given distance using::\n\n    combined.plot_mollweide(5.) # input is distance in kpc\n\nSupported bandpasses\n---------------------\n\nCurrently only a few filters are supported; if no filter is supplied,\n*E(B-V)* is returned on the SFD scale if the object is initialized\nwith ``sf10=True`` (which tells the code to use re-scalings from\n`Schlafly & Finkbeiner 2011\n<http://adsabs.harvard.edu/abs/2011ApJ...737..103S>`__). ``sf10=True``\nis the default initialization for every map, so be careful in\ninterpreting the raw *E(B-V)* that come out of the code. *Only use*\n``sf10=False`` *when you have an extinction map in true E(B-V)*, **not**\n*SFD E(B-V)*. No map currently included in this package is in this\nsituation, so using ``sf10=False`` is never recommended.\n\nTo check what bandpasses are supported on the ``sf10=True`` scale do\n(these are all the bandpasses from Table 6 in `Schlafly & Finkbeiner\n2011 <http://adsabs.harvard.edu/abs/2011ApJ...737..103S>`__)::\n\n   from mwdust.util import extCurves  \n   extCurves.avebvsf.keys()\n\nwhich gives::\n\n      ['Stromgren u',\n       'Stromgren v',\n       'ACS clear',\n       'CTIO R',\n       'CTIO V',\n       'CTIO U',\n       'CTIO I',\n       ...]\n\nTo check the bandpasses that are supported on the old SFD scale (``sf10=False``), do::\n\n   numpy.array(extCurves.avebv.keys())[True-numpy.isnan(extCurves.avebv.values())]\n\nwhich gives::\n\n      array(['CTIO R', 'CTIO V', 'CTIO U', 'CTIO I', 'CTIO B', 'DSS-II i',\n       'DSS-II g', 'WISE-1', 'WISE-2', 'DSS-II r', 'UKIRT H', 'UKIRT J',\n       'UKIRT K', 'IRAC-1', 'IRAC-2', 'IRAC-3', 'IRAC-4', '2MASS H',\n       'SDSS r', 'SDSS u', 'SDSS z', 'SDSS g', 'SDSS i', '2MASS Ks',\n       '2MASS J'], \n      dtype='|S14'\n\nAcknowledgements\n-----------------\n\nWhen making use of this code in a publication, please cite `Bovy et\nal. (2015a) <http://arxiv.org/abs/1509.06751>`__. Also cite the relevant papers for the dust\nmap that you use:\n\n* **mwdust.SFD**: `Schlegel et al. (1998) <http://adsabs.harvard.edu/abs/1998ApJ...500..525S>`__\n\n* **mwdust.Drimmel03**: `Drimmel et al. (2003) <http://adsabs.harvard.edu/abs/2003A%26A...409..205D>`__\n\n* **mwdust.Marshall06**: `Marshall et al. (2006) <http://adsabs.harvard.edu/abs/2006A%26A...453..635M>`__\n\n* **mwdust.Sale14**: `Sale et al. (2014) <http://adsabs.harvard.edu/abs/2014MNRAS.443.2907S>`__\n\n* **mwdust.Green15**: `Green et al. (2015) <https://ui.adsabs.harvard.edu/abs/2015ApJ...810...25G>`__\n\n* **mwdust.Green17**: `Green et al. (2018) <https://ui.adsabs.harvard.edu/abs/2018MNRAS.478..651G>`__ (added by `@jan-rybizki <https://github.com/jan-rybizki>`__)\n\n* **mwdust.Green19**: `Green et al. (2019) <https://ui.adsabs.harvard.edu/abs/2019arXiv190502734G>`__ (added by `@jan-rybizki <https://github.com/jan-rybizki>`__)\n\n* **mwdust.Combined15**: Combination of `Marshall et al. (2006) <http://adsabs.harvard.edu/abs/2006A%26A...453..635M>`__ (**mwdust.Marshall06**), `Green et al. (2015) <http://adsabs.harvard.edu/abs/2015arXiv150701005G>`__ (**mwdust.Green15**), and `Drimmel et al. (2003) <http://adsabs.harvard.edu/abs/2003A%26A...409..205D>`__ (**mwdust.Green15**); see `Bovy et al. (2015a) <http://adsabs.harvard.edu/abs/2015arXiv150906751B>`__\n\n* **mwdust.Combined19**: Similar to **mwdust.Combined15**, but using **mwdust.Green19** instead of **mwdust.Green15**; see `Bovy et al. (2015a) <http://adsabs.harvard.edu/abs/2015arXiv150906751B>`__ for details on the combination (added by `@jan-rybizki <https://github.com/jan-rybizki>`__)\n\n* **mwdust.Zero**: `Bovy et al. (2015b) <http://adsabs.harvard.edu/abs/2015arXiv150905796B>`__ :smirk:", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jobovy/mwdust", "keywords": "", "license": "New BSD", "maintainer": "", "maintainer_email": "", "name": "mwdust", "package_url": "https://pypi.org/project/mwdust/", "platform": "", "project_url": "https://pypi.org/project/mwdust/", "project_urls": {"Homepage": "https://github.com/jobovy/mwdust"}, "release_url": "https://pypi.org/project/mwdust/1.1/", "requires_dist": null, "requires_python": "", "summary": "Dust in the Milky Way", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Dust in 3D in the Milky Way</strong></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Please define an environment variable <tt>DUST_DIR</tt> before installing\nthe code; this is a directory that will contain the dust data.</p>\n<p>Standard python setup.py build/install</p>\n<p>Either</p>\n<p><tt>sudo python setup.py install</tt></p>\n<p>or</p>\n<p><tt>python setup.py install <span class=\"pre\">--prefix=/some/directory/</span></tt></p>\n<p>The installation automatically downloads the relevant dust data. You\nmight have to define an environment variable <tt>SUDO_USER</tt> if not\ninstalling with sudo and you might have to use the <tt><span class=\"pre\">-E</span></tt> option when\nyou are installing with sudo to transfer your environment variables to\nsudo.</p>\n</div>\n<div id=\"dust-data\">\n<h2>Dust Data</h2>\n<p>The code can automatically download all of the necessary data. By\ndefault, only the most commonly-used dust maps are downloaded; to\ndownload all maps, use the <tt><span class=\"pre\">--all-downloads</span></tt> installation option\n(you can just re-run the installation with this option to add this\nlater).  The installation option <tt><span class=\"pre\">--no-downloads</span></tt> turns all\ndownloads off.</p>\n<p>The data are put in subdirectories of a directory <tt>DUST_DIR</tt>, with\nroughly the following lay-out:</p>\n<pre>$DUST_DIR/\n   combined15/\n      dust-map-3d.h5\n   combined19/\n      combine19.h5\n   green15/\n      dust-map-3d.h5\n   green17/\n      bayestar2017.h5\n   green19/\n      bayestar2019.h5\n   maps/\n      SFD_dust_4096_ngp.fits\n      SFD_dust_4096_sgp.fits\n   marshall06/\n      ReadMe\n      table1.dat\n   sale14/\n      Amap.dat\n      ReadMe\n</pre>\n<p>The data for the Drimmel et al. (2003) map is installed in the code\ndirectory, because it is not very large.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>All of the maps can be initialized similar to:</p>\n<pre>import mwdust\ndrimmel= mwdust.Drimmel03(filter='2MASS H')\ncombined= mwdust.Combined15(filter='2MASS H')\ncombined19= mwdust.Combined19(filter='2MASS H')\nsfd= mwdust.SFD(filter='2MASS H')\n</pre>\n<p>which sets up the Drimmel et al. (2003) map, the combined Bovy et\nal. (2016) map, an updated version of the combined map using the Green\net al. (2019) Bayestar19 map, and the SFD map for the <em>H</em>-band\nfilter. The maps can be evaluate for a given Galactic longitude <em>l</em>,\nGalactic latitude <em>b</em>, and an array (or scalar) of distances <em>D</em>:</p>\n<pre>drimmel(60.,0.,3.) # inputs are (l,b,D)\narray([ 0.38813341])\ncombined(30.,3.,numpy.array([1.,2.,3.,10.]))\narray([ 0.22304147,  0.55687252,  0.86694602,  1.18779507])\n# SFD is just the constant SFD extinction\nsfd(30.,3.,numpy.array([1.,2.,3.]))\narray([ 1.19977335,  1.19977335,  1.19977335])\n</pre>\n<p>and they can be plotted as a function of distance at a given (l,b):</p>\n<pre>combined.plot(55.,0.5) # inputs are (l,b)\n</pre>\n<p>(plot not shown). Maps that are derived from the\n<tt>HierarchicalHealpixMap.py</tt> class (currently all Green-type maps and\nthe combined maps) can also be plotted on the sky using a Mollweide\nprojection at a given distance using:</p>\n<pre>combined.plot_mollweide(5.) # input is distance in kpc\n</pre>\n</div>\n<div id=\"supported-bandpasses\">\n<h2>Supported bandpasses</h2>\n<p>Currently only a few filters are supported; if no filter is supplied,\n<em>E(B-V)</em> is returned on the SFD scale if the object is initialized\nwith <tt>sf10=True</tt> (which tells the code to use re-scalings from\n<a href=\"http://adsabs.harvard.edu/abs/2011ApJ...737..103S\" rel=\"nofollow\">Schlafly &amp; Finkbeiner 2011</a>). <tt>sf10=True</tt>\nis the default initialization for every map, so be careful in\ninterpreting the raw <em>E(B-V)</em> that come out of the code. <em>Only use</em>\n<tt>sf10=False</tt> <em>when you have an extinction map in true E(B-V)</em>, <strong>not</strong>\n<em>SFD E(B-V)</em>. No map currently included in this package is in this\nsituation, so using <tt>sf10=False</tt> is never recommended.</p>\n<p>To check what bandpasses are supported on the <tt>sf10=True</tt> scale do\n(these are all the bandpasses from Table 6 in <a href=\"http://adsabs.harvard.edu/abs/2011ApJ...737..103S\" rel=\"nofollow\">Schlafly &amp; Finkbeiner\n2011</a>):</p>\n<pre>from mwdust.util import extCurves\nextCurves.avebvsf.keys()\n</pre>\n<p>which gives:</p>\n<pre>['Stromgren u',\n 'Stromgren v',\n 'ACS clear',\n 'CTIO R',\n 'CTIO V',\n 'CTIO U',\n 'CTIO I',\n ...]\n</pre>\n<p>To check the bandpasses that are supported on the old SFD scale (<tt>sf10=False</tt>), do:</p>\n<pre>numpy.array(extCurves.avebv.keys())[True-numpy.isnan(extCurves.avebv.values())]\n</pre>\n<p>which gives:</p>\n<pre>array(['CTIO R', 'CTIO V', 'CTIO U', 'CTIO I', 'CTIO B', 'DSS-II i',\n 'DSS-II g', 'WISE-1', 'WISE-2', 'DSS-II r', 'UKIRT H', 'UKIRT J',\n 'UKIRT K', 'IRAC-1', 'IRAC-2', 'IRAC-3', 'IRAC-4', '2MASS H',\n 'SDSS r', 'SDSS u', 'SDSS z', 'SDSS g', 'SDSS i', '2MASS Ks',\n '2MASS J'],\ndtype='|S14'\n</pre>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>When making use of this code in a publication, please cite <a href=\"http://arxiv.org/abs/1509.06751\" rel=\"nofollow\">Bovy et\nal. (2015a)</a>. Also cite the relevant papers for the dust\nmap that you use:</p>\n<ul>\n<li><strong>mwdust.SFD</strong>: <a href=\"http://adsabs.harvard.edu/abs/1998ApJ...500..525S\" rel=\"nofollow\">Schlegel et al. (1998)</a></li>\n<li><strong>mwdust.Drimmel03</strong>: <a href=\"http://adsabs.harvard.edu/abs/2003A%26A...409..205D\" rel=\"nofollow\">Drimmel et al. (2003)</a></li>\n<li><strong>mwdust.Marshall06</strong>: <a href=\"http://adsabs.harvard.edu/abs/2006A%26A...453..635M\" rel=\"nofollow\">Marshall et al. (2006)</a></li>\n<li><strong>mwdust.Sale14</strong>: <a href=\"http://adsabs.harvard.edu/abs/2014MNRAS.443.2907S\" rel=\"nofollow\">Sale et al. (2014)</a></li>\n<li><strong>mwdust.Green15</strong>: <a href=\"https://ui.adsabs.harvard.edu/abs/2015ApJ...810...25G\" rel=\"nofollow\">Green et al. (2015)</a></li>\n<li><strong>mwdust.Green17</strong>: <a href=\"https://ui.adsabs.harvard.edu/abs/2018MNRAS.478..651G\" rel=\"nofollow\">Green et al. (2018)</a> (added by <a href=\"https://github.com/jan-rybizki\" rel=\"nofollow\">@jan-rybizki</a>)</li>\n<li><strong>mwdust.Green19</strong>: <a href=\"https://ui.adsabs.harvard.edu/abs/2019arXiv190502734G\" rel=\"nofollow\">Green et al. (2019)</a> (added by <a href=\"https://github.com/jan-rybizki\" rel=\"nofollow\">@jan-rybizki</a>)</li>\n<li><strong>mwdust.Combined15</strong>: Combination of <a href=\"http://adsabs.harvard.edu/abs/2006A%26A...453..635M\" rel=\"nofollow\">Marshall et al. (2006)</a> (<strong>mwdust.Marshall06</strong>), <a href=\"http://adsabs.harvard.edu/abs/2015arXiv150701005G\" rel=\"nofollow\">Green et al. (2015)</a> (<strong>mwdust.Green15</strong>), and <a href=\"http://adsabs.harvard.edu/abs/2003A%26A...409..205D\" rel=\"nofollow\">Drimmel et al. (2003)</a> (<strong>mwdust.Green15</strong>); see <a href=\"http://adsabs.harvard.edu/abs/2015arXiv150906751B\" rel=\"nofollow\">Bovy et al. (2015a)</a></li>\n<li><strong>mwdust.Combined19</strong>: Similar to <strong>mwdust.Combined15</strong>, but using <strong>mwdust.Green19</strong> instead of <strong>mwdust.Green15</strong>; see <a href=\"http://adsabs.harvard.edu/abs/2015arXiv150906751B\" rel=\"nofollow\">Bovy et al. (2015a)</a> for details on the combination (added by <a href=\"https://github.com/jan-rybizki\" rel=\"nofollow\">@jan-rybizki</a>)</li>\n<li><strong>mwdust.Zero</strong>: <a href=\"http://adsabs.harvard.edu/abs/2015arXiv150905796B\" rel=\"nofollow\">Bovy et al. (2015b)</a> :smirk:</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6276684, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "e2966e65de3d81610ce97d2f073674ed", "sha256": "c63502519029666eb45b160138dc112b40f6d277a49a0a3d095ec0744f6da4f2"}, "downloads": -1, "filename": "mwdust-1.0.tar.gz", "has_sig": false, "md5_digest": "e2966e65de3d81610ce97d2f073674ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27174505, "upload_time": "2015-12-29T03:55:50", "upload_time_iso_8601": "2015-12-29T03:55:50.942060Z", "url": "https://files.pythonhosted.org/packages/bb/21/d320bfe348ec994103d0485e4bfdcc38792a6fd8a2feed76d680aa6aa0c0/mwdust-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "5c5815f4ff49e14cf3857db70c3c27c9", "sha256": "53cc692b1f04c97a69be0a9e09dbe6aec3a04fbfe832af1bc0484cdbc3aa0986"}, "downloads": -1, "filename": "mwdust-1.1.tar.gz", "has_sig": false, "md5_digest": "5c5815f4ff49e14cf3857db70c3c27c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56699, "upload_time": "2019-12-11T02:34:07", "upload_time_iso_8601": "2019-12-11T02:34:07.772094Z", "url": "https://files.pythonhosted.org/packages/74/4b/d8ebf6199ebe3dbdc21aa40c319b7c8322bcb43361d73f5cd718b54e54cd/mwdust-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c5815f4ff49e14cf3857db70c3c27c9", "sha256": "53cc692b1f04c97a69be0a9e09dbe6aec3a04fbfe832af1bc0484cdbc3aa0986"}, "downloads": -1, "filename": "mwdust-1.1.tar.gz", "has_sig": false, "md5_digest": "5c5815f4ff49e14cf3857db70c3c27c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56699, "upload_time": "2019-12-11T02:34:07", "upload_time_iso_8601": "2019-12-11T02:34:07.772094Z", "url": "https://files.pythonhosted.org/packages/74/4b/d8ebf6199ebe3dbdc21aa40c319b7c8322bcb43361d73f5cd718b54e54cd/mwdust-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:58 2020"}