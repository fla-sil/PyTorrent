{"info": {"author": "Takumi Sueda", "author_email": "puhitaku@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: User Interfaces"], "description": "NAAM\n====\n\n*No Argparse Any More.*\n\nDon\u2019t google argparse just take some NAAM\n-----------------------------------------\n\n-  I forget how to use argparse every time I make utilities\n-  10+ lines for just parsing arguments? No way!\n-  There should be a super pythonic way to parse arguments!!!!\n-  `I love Kizuna Ai. <https://www.youtube.com/watch?v=COXCojRKbk8>`__\n\nInstall\n-------\n\n``pip install naam``\n\nHow to use it\n-------------\n\nJust decorate your main function like ``@naam.bind_args`` and execute\nit!\n\nExample\n-------\n\nHere\u2019s a code (placed in examples/optional.py):\n\n.. code:: python\n\n    from naam import bind_args\n\n\n    @bind_args\n    def hello(first_name, last_name=None):\n        msg = 'Hello world! My name is %s.'\n        if last_name is None:\n            print(msg % first_name)\n        else:\n            print(msg % '{} {}'.format(first_name, last_name))\n\n\n    hello()\n\nWith empty arguments, this outputs:\n\n::\n\n    Usage: optional.py [-l LAST_NAME | --last_name LAST_NAME] FIRST_NAME\n\nWith arguments, this outputs like:\n\n::\n\n    $ python optional.py Miku\n    Hello world! My name is Miku.\n\n    $ python optional.py Miku --last_name Hatsune\n    Hello world! My name is Miku Hatsune.\n\n    $ python optional.py Miku -l Hatsune\n    Hello world! My name is Miku Hatsune.\n\nPrerequisites\n-------------\n\nNo dependencies. Works on Python 3.x (Built on Python 3.6.2).\n\nFeatures I crave\n----------------\n\n-  Type casting for type-annotated args", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/puhitaku/naam", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "naam", "package_url": "https://pypi.org/project/naam/", "platform": "", "project_url": "https://pypi.org/project/naam/", "project_urls": {"Homepage": "https://github.com/puhitaku/naam"}, "release_url": "https://pypi.org/project/naam/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Truly pythonic argument parser.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>No Argparse Any More.</em></p>\n<div id=\"dont-google-argparse-just-take-some-naam\">\n<h2>Don\u2019t google argparse just take some NAAM</h2>\n<ul>\n<li>I forget how to use argparse every time I make utilities</li>\n<li>10+ lines for just parsing arguments? No way!</li>\n<li>There should be a super pythonic way to parse arguments!!!!</li>\n<li><a href=\"https://www.youtube.com/watch?v=COXCojRKbk8\" rel=\"nofollow\">I love Kizuna Ai.</a></li>\n</ul>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p><tt>pip install naam</tt></p>\n</div>\n<div id=\"how-to-use-it\">\n<h2>How to use it</h2>\n<p>Just decorate your main function like <tt>@naam.bind_args</tt> and execute\nit!</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Here\u2019s a code (placed in examples/optional.py):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">naam</span> <span class=\"kn\">import</span> <span class=\"n\">bind_args</span>\n\n\n<span class=\"nd\">@bind_args</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello world! My name is </span><span class=\"si\">%s</span><span class=\"s1\">.'</span>\n    <span class=\"k\">if</span> <span class=\"n\">last_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span> <span class=\"o\">%</span> <span class=\"n\">first_name</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span> <span class=\"o\">%</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">hello</span><span class=\"p\">()</span>\n</pre>\n<p>With empty arguments, this outputs:</p>\n<pre>Usage: optional.py [-l LAST_NAME | --last_name LAST_NAME] FIRST_NAME\n</pre>\n<p>With arguments, this outputs like:</p>\n<pre>$ python optional.py Miku\nHello world! My name is Miku.\n\n$ python optional.py Miku --last_name Hatsune\nHello world! My name is Miku Hatsune.\n\n$ python optional.py Miku -l Hatsune\nHello world! My name is Miku Hatsune.\n</pre>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>No dependencies. Works on Python 3.x (Built on Python 3.6.2).</p>\n</div>\n<div id=\"features-i-crave\">\n<h2>Features I crave</h2>\n<ul>\n<li>Type casting for type-annotated args</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3380464, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0ee6558787bc8cef5cf84dd8da7b25ee", "sha256": "8ee38099d94f8d519ddd39b194205f0e312a8b3db1dffe1a3f0f72ab5d432159"}, "downloads": -1, "filename": "naam-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0ee6558787bc8cef5cf84dd8da7b25ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3891, "upload_time": "2017-12-01T15:48:18", "upload_time_iso_8601": "2017-12-01T15:48:18.601674Z", "url": "https://files.pythonhosted.org/packages/f1/e9/6d845a1aa7e6bb5dc00d36b911f5304cd6d45784af3ee36fd9a12b70dc02/naam-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45a8bb8bd1e6d1948fca7bb6cdc2ce93", "sha256": "8b448729f90ec0aa5d5da8173dcda5e9355dc2ac3eda40c3f4a3e09583bf80cb"}, "downloads": -1, "filename": "naam-0.1.0.tar.gz", "has_sig": false, "md5_digest": "45a8bb8bd1e6d1948fca7bb6cdc2ce93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2626, "upload_time": "2017-12-01T15:48:10", "upload_time_iso_8601": "2017-12-01T15:48:10.753674Z", "url": "https://files.pythonhosted.org/packages/d2/92/503e1636b41b93a748402f16d8e90afd764639edd8ff1d146d1d946ee050/naam-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d52f27104e8d9da6ae27b4e89cd011bd", "sha256": "3716131aa89210a2ea8933f1325515bba837b912d07ccc8d63a905e658f8572a"}, "downloads": -1, "filename": "naam-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d52f27104e8d9da6ae27b4e89cd011bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4612, "upload_time": "2017-12-01T15:51:23", "upload_time_iso_8601": "2017-12-01T15:51:23.035880Z", "url": "https://files.pythonhosted.org/packages/ef/e3/ec4deaad7f83ec46bcc248444abeb09bd9c14e8526fd03d306ade86ab64d/naam-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "582f5d59048a2d74203c949805eb0890", "sha256": "0b728514e85537d09c64920169ea3735fdcac16f0c54e27984115943bca5ca15"}, "downloads": -1, "filename": "naam-0.1.1.tar.gz", "has_sig": false, "md5_digest": "582f5d59048a2d74203c949805eb0890", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3130, "upload_time": "2017-12-01T15:50:50", "upload_time_iso_8601": "2017-12-01T15:50:50.508066Z", "url": "https://files.pythonhosted.org/packages/29/65/a018e9741b738779cf2e38858a104a98624e0751b7913f5069e1a1939375/naam-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d52f27104e8d9da6ae27b4e89cd011bd", "sha256": "3716131aa89210a2ea8933f1325515bba837b912d07ccc8d63a905e658f8572a"}, "downloads": -1, "filename": "naam-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d52f27104e8d9da6ae27b4e89cd011bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4612, "upload_time": "2017-12-01T15:51:23", "upload_time_iso_8601": "2017-12-01T15:51:23.035880Z", "url": "https://files.pythonhosted.org/packages/ef/e3/ec4deaad7f83ec46bcc248444abeb09bd9c14e8526fd03d306ade86ab64d/naam-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "582f5d59048a2d74203c949805eb0890", "sha256": "0b728514e85537d09c64920169ea3735fdcac16f0c54e27984115943bca5ca15"}, "downloads": -1, "filename": "naam-0.1.1.tar.gz", "has_sig": false, "md5_digest": "582f5d59048a2d74203c949805eb0890", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3130, "upload_time": "2017-12-01T15:50:50", "upload_time_iso_8601": "2017-12-01T15:50:50.508066Z", "url": "https://files.pythonhosted.org/packages/29/65/a018e9741b738779cf2e38858a104a98624e0751b7913f5069e1a1939375/naam-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:54 2020"}