{"info": {"author": "Wibowo Arindrarto", "author_email": "bow@bow.web.id", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: POSIX", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "``crimson``\n===========\n\n|pypi| |ci| |cov| |qual|\n\n.. |pypi| image:: https://img.shields.io/pypi/v/crimson?labelColor=4d4d4d&color=007c5b&style=flat\n    :target: https://pypi.org/project/crimson/\n\n.. |ci| image:: https://img.shields.io/travis/bow/crimson?labelColor=4d4d4d&color=007c5b&style=flat\n    :target: https://travis-ci.org/bow/crimson\n\n.. |cov| image:: https://img.shields.io/codeclimate/coverage/bow/crimson?labelColor=4d4d4d&color=007c5b&style=flat\n    :target: https://codeclimate.com/github/bow/crimson\n\n.. |qual| image:: https://img.shields.io/codeclimate/maintainability/bow/crimson?labelColor=4d4d4d&color=007c5b&style=flat\n    :target: https://codeclimate.com/github/bow/crimson\n\n\n``crimson`` converts non-standard bioinformatics tool outputs to JSON or YAML.\n\nCurrently it accepts outputs of the following programs:\n\n* `FastQC <http://www.bioinformatics.babraham.ac.uk/projects/fastqc/>`_ (``fastqc``)\n* `FusionCatcher <https://github.com/ndaniel/fusioncatcher>`_ (``fusioncatcher``)\n* `samtools <http://www.htslib.org/doc/samtools.html>`_ flagstat (``flagstat``)\n* `Picard <https://broadinstitute.github.io/picard/>`_ metrics tools (``picard``)\n* `STAR <https://github.com/alexdobin/STAR>`_ log file (``star``)\n* `STAR-Fusion <https://github.com/STAR-Fusion/STAR-Fusion>`_ hits table (``star-fusion``)\n* `Variant Effect Predictor <http://www.ensembl.org/info/docs/tools/vep/index.html>`_ plain text output (``vep``)\n\nFrom those, you can convert the respective output files into JSON (the default) or YAML. You can also use ``crimson``\nin your scripts by importing the parser functions themselves.\n\nInstallation\n------------\n\n``crimson`` is available via the Python Package Index and you can install it via ``pip``:\n\n.. code-block:: bash\n\n    $ pip install crimson\n\nIt is tested on the following Python versions:\n\n* 3.8\n* 3.7\n* 3.6\n\nand against the following bioinformatics tools:\n\n* FastQC (version 0.10.1)\n* FusionCatcher (version 0.99.5a)\n* samtools (version 0.19.1, 1.1)\n* Picard (version 1.124)\n* STAR (version 2.3.0)\n* STAR-Fusion (version 0.6.0, 1.6.0)\n* VEP (version 77)\n\nUsage\n-----\n\nCommand-line\n~~~~~~~~~~~~\n\nThe general command is ``crimson {program_name}`` and by default the output is written to ``stdout``. For example,\nto use the ``picard`` parser, you would execute:\n\n.. code-block:: bash\n\n    $ crimson picard /path/to/a/picard.metrics\n\nYou can also specify a file name directly to write to a file. The following command will write the output to a file\nnamed ``converted.json``:\n\n.. code-block:: bash\n\n    $ crimson picard /path/to/a/picard.metrics converted.json\n\nSome parsers may also accept additional input format. The FastQC parser, for example, also works if you give it a\npath to the FastQC output directory:\n\n.. code-block:: bash\n\n    $ crimson fastqc /path/to/a/fastqc/dir\n\nor path to a zipped result:\n\n.. code-block:: bash\n\n    $ crimson fastqc /path/to/a/fastqc_result.zip\n\nWhen in doubt, use the ``--help`` flag:\n\n.. code-block:: bash\n\n    $ crimson --help            # for the general help\n    $ crimson fastqc --help     # for parser-specific (FastQC) help\n\nPython Module\n~~~~~~~~~~~~~\n\nThe function to import is located at ``crimson.{program_name}.parser``. So to use the ``picard`` parser in your script,\nyou can do this:\n\n.. code-block:: python\n\n    from crimson import picard\n\n    # You can supply the file name as string ...\n    parsed = picard.parse(\"/path/to/a/picard.metrics\")\n\n    # ... or a file handle directly\n    with open(\"/path/to/a/picard.metrics\") as src:\n        parsed = picard.parse(src)\n\nWhy?\n----\n\n* Not enough tools use standard output formats.\n* Writing and re-writing the same parsers across different scripts is not a productive way to spend the day.\n\n\nContributing\n============\n\nIf you are interested, ``crimson`` accepts the following types contribution:\n\n* Documentation additions (if anything seems unclear, feel free to open an issue)\n* Bug reports\n* Support for tools' outputs which can be converted to JSON or YAML.\n\nFor any of these, feel free to open an issue in the\n`issue tracker <https://github.com/bow/crimson/issues>`_ or submitt a pull request.\n\nLocal Development\n-----------------\n\nSetting up a local development requires any of the supported Python version. It is ideal if you have support Python 2.x\nand 3.x versions installed, as that will allow you to run the full tests suite against all versions using ``tox``.\n\nIn any case, the following steps can be your guide for setting up your local development environment:\n\n.. code-block:: bash\n\n    # Clone the repository and cd into it\n    $ git clone {repo-url}\n    $ cd crimson\n\n    # Create your virtualenv, using pyenv for example (recommended, https://github.com/pyenv/pyenv)\n    $ pyenv virtualenv 3.7.0 crimson-dev\n    # or using virtualenvwrapper (https://virtualenvwrapper.readthedocs.io/en/latest/)\n    $ mkvirtualenv -p /usr/bin/python3.7 crimson-dev\n\n    # From within the root directory and with an active virtualenv, install the dependencies and package itself\n    $ pip install -e .[dev]\n\n\nLicense\n=======\n\n``crimson`` is BSD-licensed. Refer to the ``LICENSE`` file for the full license.\n\n\nChangelog\n=========\n\nThis format is based on\n`Keep a Changelog <https://keepachangelog.com/en/1.0.0/>`_ and this project\nadheres to `Semantic Versioning <https://semver.org/spec/v2.0.0.html>`_.\n\n\nUnreleased\n----------\n\n\n[0.5.1] - 2020-02027\n--------------------\n\nChanged\n~~~~~~~\n* Relaxed Click and YAML requirements. Now crimon requires only minimum\n  versions of these dependencies instead of exact ones.\n\n\n[0.5.0] - 2020-02-04\n--------------------\n\nAdded\n~~~~~\n* Support for parsing output of STAR-Fusion v1.6.0 under the same\n  ``star-fusion`` parser. Thank you @Redmar-van-den-Berg!\n\nRemoved\n~~~~~~~\n* Support for Python 2.7, 3.3, 3.4, and 3.5\n\n\n[0.4.0] - 2018-07-25\n--------------------\n\nAdded\n~~~~~\n* Support for parsing zipped FastQC result.\n\nChanged\n~~~~~~~\n* Improved detection of zipped FastQC input.\n* Set configurable file-size limits for flagstat, Picard, and FastQC.\n\n\n[0.3.0] - 2016-05-19\n--------------------\n\nAdded\n~~~~~\n* Support for parsing FusionCatcher final fusion genes file.\n\n\n[0.2.0] - 2016-04-13\n--------------------\n\nAdded\n~~~~~\n* Support for parsing STAR-Fusion hits table output.\n* Support for parsing STAR alignment log output.\n* Support for parsing VEP plain text output.\n\n\n[0.1.1] - 2016-02-02\n--------------------\n\nChanged\n~~~~~~~\n* Test and build dependencies.\n\n\n[0.1.0] - 2015-07-27\n--------------------\n\nAdded\n~~~~~\n* First release.\n* Support for parsing FastQC, samtools flagstat, and Picard.\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bow.web.id", "keywords": "crimson bioinformatics json yaml samtools picard fastqc", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "crimson", "package_url": "https://pypi.org/project/crimson/", "platform": "", "project_url": "https://pypi.org/project/crimson/", "project_urls": {"Homepage": "http://bow.web.id"}, "release_url": "https://pypi.org/project/crimson/0.5.1/", "requires_dist": ["click (<8.0,>=7.0)", "PyYAML (<6.0,>=5.2)", "bandit (==1.6.2) ; extra == 'dev'", "flake8 (==3.7.9) ; extra == 'dev'", "isort (==4.3.21) ; extra == 'dev'", "mypy (==0.761) ; extra == 'dev'", "mypy-extensions (==0.4.3) ; extra == 'dev'", "pytest (==5.3.2) ; extra == 'dev'", "pytest-cov (==2.8.1) ; extra == 'dev'", "pytest-sugar (==0.9.2) ; extra == 'dev'", "radon (==4.0.0) ; extra == 'dev'", "termcolor (==1.1.0) ; extra == 'dev'", "tox (==3.14.3) ; extra == 'dev'", "twine (==3.1.1) ; extra == 'dev'", "wheel (==0.33.6) ; extra == 'dev'"], "requires_python": "", "summary": "Bioinformatics tool outputs converter to JSON or YAML.", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"crimson\">\n<h2><tt>crimson</tt></h2>\n<p><a href=\"https://pypi.org/project/crimson/\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5cc7f1127c3a8287dead5804327464653a0d5610/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6372696d736f6e3f6c6162656c436f6c6f723d34643464346426636f6c6f723d303037633562267374796c653d666c6174\"></a> <a href=\"https://travis-ci.org/bow/crimson\" rel=\"nofollow\"><img alt=\"ci\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4cf2acc6c0ae854a72b2281b9f8e5708f4ea703/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f626f772f6372696d736f6e3f6c6162656c436f6c6f723d34643464346426636f6c6f723d303037633562267374796c653d666c6174\"></a> <a href=\"https://codeclimate.com/github/bow/crimson\" rel=\"nofollow\"><img alt=\"cov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b52a7aea0a49de75954a4e51e7f7822df5518320/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f636f7665726167652f626f772f6372696d736f6e3f6c6162656c436f6c6f723d34643464346426636f6c6f723d303037633562267374796c653d666c6174\"></a> <a href=\"https://codeclimate.com/github/bow/crimson\" rel=\"nofollow\"><img alt=\"qual\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3438446a71eed59c8c536be117e255fca8f1b5f/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f6d61696e7461696e6162696c6974792f626f772f6372696d736f6e3f6c6162656c436f6c6f723d34643464346426636f6c6f723d303037633562267374796c653d666c6174\"></a></p>\n<p><tt>crimson</tt> converts non-standard bioinformatics tool outputs to JSON or YAML.</p>\n<p>Currently it accepts outputs of the following programs:</p>\n<ul>\n<li><a href=\"http://www.bioinformatics.babraham.ac.uk/projects/fastqc/\" rel=\"nofollow\">FastQC</a> (<tt>fastqc</tt>)</li>\n<li><a href=\"https://github.com/ndaniel/fusioncatcher\" rel=\"nofollow\">FusionCatcher</a> (<tt>fusioncatcher</tt>)</li>\n<li><a href=\"http://www.htslib.org/doc/samtools.html\" rel=\"nofollow\">samtools</a> flagstat (<tt>flagstat</tt>)</li>\n<li><a href=\"https://broadinstitute.github.io/picard/\" rel=\"nofollow\">Picard</a> metrics tools (<tt>picard</tt>)</li>\n<li><a href=\"https://github.com/alexdobin/STAR\" rel=\"nofollow\">STAR</a> log file (<tt>star</tt>)</li>\n<li><a href=\"https://github.com/STAR-Fusion/STAR-Fusion\" rel=\"nofollow\">STAR-Fusion</a> hits table (<tt><span class=\"pre\">star-fusion</span></tt>)</li>\n<li><a href=\"http://www.ensembl.org/info/docs/tools/vep/index.html\" rel=\"nofollow\">Variant Effect Predictor</a> plain text output (<tt>vep</tt>)</li>\n</ul>\n<p>From those, you can convert the respective output files into JSON (the default) or YAML. You can also use <tt>crimson</tt>\nin your scripts by importing the parser functions themselves.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p><tt>crimson</tt> is available via the Python Package Index and you can install it via <tt>pip</tt>:</p>\n<pre>$ pip install crimson\n</pre>\n<p>It is tested on the following Python versions:</p>\n<ul>\n<li>3.8</li>\n<li>3.7</li>\n<li>3.6</li>\n</ul>\n<p>and against the following bioinformatics tools:</p>\n<ul>\n<li>FastQC (version 0.10.1)</li>\n<li>FusionCatcher (version 0.99.5a)</li>\n<li>samtools (version 0.19.1, 1.1)</li>\n<li>Picard (version 1.124)</li>\n<li>STAR (version 2.3.0)</li>\n<li>STAR-Fusion (version 0.6.0, 1.6.0)</li>\n<li>VEP (version 77)</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"command-line\">\n<h4>Command-line</h4>\n<p>The general command is <tt>crimson {program_name}</tt> and by default the output is written to <tt>stdout</tt>. For example,\nto use the <tt>picard</tt> parser, you would execute:</p>\n<pre>$ crimson picard /path/to/a/picard.metrics\n</pre>\n<p>You can also specify a file name directly to write to a file. The following command will write the output to a file\nnamed <tt>converted.json</tt>:</p>\n<pre>$ crimson picard /path/to/a/picard.metrics converted.json\n</pre>\n<p>Some parsers may also accept additional input format. The FastQC parser, for example, also works if you give it a\npath to the FastQC output directory:</p>\n<pre>$ crimson fastqc /path/to/a/fastqc/dir\n</pre>\n<p>or path to a zipped result:</p>\n<pre>$ crimson fastqc /path/to/a/fastqc_result.zip\n</pre>\n<p>When in doubt, use the <tt><span class=\"pre\">--help</span></tt> flag:</p>\n<pre>$ crimson --help            <span class=\"c1\"># for the general help\n</span>$ crimson fastqc --help     <span class=\"c1\"># for parser-specific (FastQC) help</span>\n</pre>\n</div>\n<div id=\"python-module\">\n<h4>Python Module</h4>\n<p>The function to import is located at <tt><span class=\"pre\">crimson.{program_name}.parser</span></tt>. So to use the <tt>picard</tt> parser in your script,\nyou can do this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">crimson</span> <span class=\"kn\">import</span> <span class=\"n\">picard</span>\n\n<span class=\"c1\"># You can supply the file name as string ...</span>\n<span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">picard</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/a/picard.metrics\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... or a file handle directly</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/a/picard.metrics\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">src</span><span class=\"p\">:</span>\n    <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">picard</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"why\">\n<h3>Why?</h3>\n<ul>\n<li>Not enough tools use standard output formats.</li>\n<li>Writing and re-writing the same parsers across different scripts is not a productive way to spend the day.</li>\n</ul>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>If you are interested, <tt>crimson</tt> accepts the following types contribution:</p>\n<ul>\n<li>Documentation additions (if anything seems unclear, feel free to open an issue)</li>\n<li>Bug reports</li>\n<li>Support for tools\u2019 outputs which can be converted to JSON or YAML.</li>\n</ul>\n<p>For any of these, feel free to open an issue in the\n<a href=\"https://github.com/bow/crimson/issues\" rel=\"nofollow\">issue tracker</a> or submitt a pull request.</p>\n<div id=\"local-development\">\n<h3>Local Development</h3>\n<p>Setting up a local development requires any of the supported Python version. It is ideal if you have support Python 2.x\nand 3.x versions installed, as that will allow you to run the full tests suite against all versions using <tt>tox</tt>.</p>\n<p>In any case, the following steps can be your guide for setting up your local development environment:</p>\n<pre><span class=\"c1\"># Clone the repository and cd into it\n</span>$ git clone <span class=\"o\">{</span>repo-url<span class=\"o\">}</span>\n$ <span class=\"nb\">cd</span> crimson\n\n<span class=\"c1\"># Create your virtualenv, using pyenv for example (recommended, https://github.com/pyenv/pyenv)\n</span>$ pyenv virtualenv <span class=\"m\">3</span>.7.0 crimson-dev\n<span class=\"c1\"># or using virtualenvwrapper (https://virtualenvwrapper.readthedocs.io/en/latest/)\n</span>$ mkvirtualenv -p /usr/bin/python3.7 crimson-dev\n\n<span class=\"c1\"># From within the root directory and with an active virtualenv, install the dependencies and package itself\n</span>$ pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><tt>crimson</tt> is BSD-licensed. Refer to the <tt>LICENSE</tt> file for the full license.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>This format is based on\n<a href=\"https://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a> and this project\nadheres to <a href=\"https://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<div id=\"unreleased\">\n<h3>Unreleased</h3>\n</div>\n<div id=\"id1\">\n<h3>[0.5.1] - 2020-02027</h3>\n<h3 id=\"changed\"><span class=\"section-subtitle\">Changed</span></h3>\n<ul>\n<li>Relaxed Click and YAML requirements. Now crimon requires only minimum\nversions of these dependencies instead of exact ones.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>[0.5.0] - 2020-02-04</h3>\n<div id=\"added\">\n<h4>Added</h4>\n<ul>\n<li>Support for parsing output of STAR-Fusion v1.6.0 under the same\n<tt><span class=\"pre\">star-fusion</span></tt> parser. Thank you @Redmar-van-den-Berg!</li>\n</ul>\n</div>\n<div id=\"removed\">\n<h4>Removed</h4>\n<ul>\n<li>Support for Python 2.7, 3.3, 3.4, and 3.5</li>\n</ul>\n</div>\n</div>\n<div id=\"id3\">\n<h3>[0.4.0] - 2018-07-25</h3>\n<div id=\"id4\">\n<h4>Added</h4>\n<ul>\n<li>Support for parsing zipped FastQC result.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h4>Changed</h4>\n<ul>\n<li>Improved detection of zipped FastQC input.</li>\n<li>Set configurable file-size limits for flagstat, Picard, and FastQC.</li>\n</ul>\n</div>\n</div>\n<div id=\"id6\">\n<h3>[0.3.0] - 2016-05-19</h3>\n<h3 id=\"id7\"><span class=\"section-subtitle\">Added</span></h3>\n<ul>\n<li>Support for parsing FusionCatcher final fusion genes file.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>[0.2.0] - 2016-04-13</h3>\n<h3 id=\"id9\"><span class=\"section-subtitle\">Added</span></h3>\n<ul>\n<li>Support for parsing STAR-Fusion hits table output.</li>\n<li>Support for parsing STAR alignment log output.</li>\n<li>Support for parsing VEP plain text output.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>[0.1.1] - 2016-02-02</h3>\n<h3 id=\"id11\"><span class=\"section-subtitle\">Changed</span></h3>\n<ul>\n<li>Test and build dependencies.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>[0.1.0] - 2015-07-27</h3>\n<h3 id=\"id13\"><span class=\"section-subtitle\">Added</span></h3>\n<ul>\n<li>First release.</li>\n<li>Support for parsing FastQC, samtools flagstat, and Picard.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6709460, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "436c4137d822980f5ed95f3a30c4f951", "sha256": "3ead40da4905fd0195ebb950a83d5ab65cc810bcd6b27f1848d68702361bda70"}, "downloads": -1, "filename": "Crimson-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "436c4137d822980f5ed95f3a30c4f951", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12766, "upload_time": "2015-07-27T15:52:37", "upload_time_iso_8601": "2015-07-27T15:52:37.053947Z", "url": "https://files.pythonhosted.org/packages/e2/02/102ff58946cf26dd7355467ae835ebcc5a53b40b7b072fb5f683a90e17ca/Crimson-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9061bf25ee8e0011d855ac6197b3eca6", "sha256": "9cccb71ae4c5bd20eb2d593ca0b66b58be37cb6e6545ddc555783ce0201e05f3"}, "downloads": -1, "filename": "Crimson-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9061bf25ee8e0011d855ac6197b3eca6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9466, "upload_time": "2015-07-27T15:52:40", "upload_time_iso_8601": "2015-07-27T15:52:40.932901Z", "url": "https://files.pythonhosted.org/packages/2f/55/29c8d5a3772e00755e027d56f763348a57b0e0d11904ed19ba04603efaa9/Crimson-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "52d760c05ecf0ae86afcdd8b5a8164ae", "sha256": "fe198c66314a29ac3ef69ae4015b5d1ae46a2c27bebf0e6aa3c85d549e94f64d"}, "downloads": -1, "filename": "Crimson-0.1.1.tar.gz", "has_sig": false, "md5_digest": "52d760c05ecf0ae86afcdd8b5a8164ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10406, "upload_time": "2016-02-02T22:23:12", "upload_time_iso_8601": "2016-02-02T22:23:12.103897Z", "url": "https://files.pythonhosted.org/packages/8d/60/7702440ff0b666f4ee4b501d54b9215afe66e15310e84298281c52b42f7a/Crimson-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "924f0798392484e1279d4d061f447b94", "sha256": "4a168831e6c0d44bb8a4dfdde3adb73c571df0ed1dce6c7854a4e2003eb792af"}, "downloads": -1, "filename": "Crimson-0.2.0.tar.gz", "has_sig": false, "md5_digest": "924f0798392484e1279d4d061f447b94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14532, "upload_time": "2016-04-13T16:15:56", "upload_time_iso_8601": "2016-04-13T16:15:56.576015Z", "url": "https://files.pythonhosted.org/packages/d0/10/0707757587a83d7eafb7c60201d948b0ce19228db1addd3156a45ec22503/Crimson-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2087a80794c3d579058bbe4a93a6d39a", "sha256": "7f78aca574cc9be93ca61baa91873867b40254441b77dddf86099b9071623a9b"}, "downloads": -1, "filename": "Crimson-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2087a80794c3d579058bbe4a93a6d39a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15437, "upload_time": "2016-05-20T09:31:44", "upload_time_iso_8601": "2016-05-20T09:31:44.005540Z", "url": "https://files.pythonhosted.org/packages/bf/8e/cdddc397f92fc1199195f01446bd3407dcb6f6ab8983f32a5e8798348809/Crimson-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "eb7678566a82064ddc776c65325e83bd", "sha256": "160d47d6ae50d746a92f72abeddb1cce12ad021c57679c7d23f3f7c526e27458"}, "downloads": -1, "filename": "Crimson-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eb7678566a82064ddc776c65325e83bd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17685, "upload_time": "2018-07-25T07:56:34", "upload_time_iso_8601": "2018-07-25T07:56:34.801755Z", "url": "https://files.pythonhosted.org/packages/80/8e/e353757be4d09105397be250b54850d1d0451502bed6d7842fa62f5607c5/Crimson-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56ac7710dce4df38939ff48722c9a0d1", "sha256": "924f0dc2598b294e873ecd204952ae42f21d43b15eda026229126174acff3648"}, "downloads": -1, "filename": "Crimson-0.4.0.tar.gz", "has_sig": false, "md5_digest": "56ac7710dce4df38939ff48722c9a0d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 354160, "upload_time": "2018-07-25T07:56:36", "upload_time_iso_8601": "2018-07-25T07:56:36.482534Z", "url": "https://files.pythonhosted.org/packages/de/62/443853007ed6724191e7461c1832b23aa64a621ee3bcbb86355d65e4255f/Crimson-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "38460cacb4cc18c709238749716982b4", "sha256": "85aab3c05823ec35e3a4d1c7cacf121b7d24538cbbceda286a69b31662882b69"}, "downloads": -1, "filename": "crimson-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "38460cacb4cc18c709238749716982b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21757, "upload_time": "2020-02-04T21:50:08", "upload_time_iso_8601": "2020-02-04T21:50:08.831036Z", "url": "https://files.pythonhosted.org/packages/c0/37/9dd878f6ef56332668af0ddec86986d5e787eeaebc1d4028fb6ca3f2fbf2/crimson-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16c031b2e35990d1299d1d493d78e8c8", "sha256": "b656244c2b249174f6d457f382318a44c3d4dd0eacd4a201f9b4670bd795c3a4"}, "downloads": -1, "filename": "crimson-0.5.0.tar.gz", "has_sig": false, "md5_digest": "16c031b2e35990d1299d1d493d78e8c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36726, "upload_time": "2020-02-04T21:50:11", "upload_time_iso_8601": "2020-02-04T21:50:11.106854Z", "url": "https://files.pythonhosted.org/packages/da/bf/5359094265e0195d73da1462b9e80b13bc5a3d956ecfff1e0ed9778adabc/crimson-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "23f4e0eabf14a62b91272798239ffe13", "sha256": "27f5788a91b14ac6b54318b7ff6d3731d7cd4474dfe26716112a6df8e2d73b6e"}, "downloads": -1, "filename": "crimson-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "23f4e0eabf14a62b91272798239ffe13", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21840, "upload_time": "2020-02-27T07:37:57", "upload_time_iso_8601": "2020-02-27T07:37:57.194568Z", "url": "https://files.pythonhosted.org/packages/fa/d1/ca523a4d08886b7bcda5b202a288d9df4ba2e13a3bed17d0ef5cdffb7fd1/crimson-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66920eeef70c7cc4a4fc7bf2cf4012cf", "sha256": "8c25b291e087de87e9c9399a51f58815263cca1f556a3eb2abb7a87d8ca50ed5"}, "downloads": -1, "filename": "crimson-0.5.1.tar.gz", "has_sig": false, "md5_digest": "66920eeef70c7cc4a4fc7bf2cf4012cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36917, "upload_time": "2020-02-27T07:37:59", "upload_time_iso_8601": "2020-02-27T07:37:59.204944Z", "url": "https://files.pythonhosted.org/packages/64/c2/5af31949b590fda8d4233c5e99e3e755440e8553b57a9b656bb2b97627ed/crimson-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23f4e0eabf14a62b91272798239ffe13", "sha256": "27f5788a91b14ac6b54318b7ff6d3731d7cd4474dfe26716112a6df8e2d73b6e"}, "downloads": -1, "filename": "crimson-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "23f4e0eabf14a62b91272798239ffe13", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21840, "upload_time": "2020-02-27T07:37:57", "upload_time_iso_8601": "2020-02-27T07:37:57.194568Z", "url": "https://files.pythonhosted.org/packages/fa/d1/ca523a4d08886b7bcda5b202a288d9df4ba2e13a3bed17d0ef5cdffb7fd1/crimson-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66920eeef70c7cc4a4fc7bf2cf4012cf", "sha256": "8c25b291e087de87e9c9399a51f58815263cca1f556a3eb2abb7a87d8ca50ed5"}, "downloads": -1, "filename": "crimson-0.5.1.tar.gz", "has_sig": false, "md5_digest": "66920eeef70c7cc4a4fc7bf2cf4012cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36917, "upload_time": "2020-02-27T07:37:59", "upload_time_iso_8601": "2020-02-27T07:37:59.204944Z", "url": "https://files.pythonhosted.org/packages/64/c2/5af31949b590fda8d4233c5e99e3e755440e8553b57a9b656bb2b97627ed/crimson-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:18 2020"}