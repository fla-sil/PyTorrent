{"info": {"author": "Jun Toda", "author_email": "lomf@hotmail.co.jp", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# cpie\nClustering-based Promising Individual Enclosre(CPIE) in Python.  \n\nCPIE is an evolutionary computation algorithm which aims to search best parameters minimizing black-box function, especially UV-function.  \nUV-function has U-valley, which occupies large search space but  contains only local optima, and V-valley, which occupies small search space but contains global optima.  \ne.g. Double-sphere: f(x) = min((x-2)^2 + 0.1, 10*(x+2)^2)  \n\n# Installation\n```\n$ pip install cpie\n```\nCPIE depends on numpy, so please install numpy if needed.\n\n# Example of usage\nFirst, you can import CPIE module as below.  \n```python\n    from cpie import CPie\n```\n\nThen, you need to prepare objective function to be minimized.  \n```python\n    def sphere(x):\n        return sum(xi*xi for xi in x)\n\n    def objective_func(x):\n        return min(sphere(x-2)+0.1, 10*sphere(x+2))\n```\n\nYou can minimize objective function like below.  \n```python\n    dimension = 2\n    bounds_min = [-10.0] * dimension\n    bounds_max = [ 10.0] * dimension\n    cpie = CPie(bounds_min, bounds_max, Ns=7*dimension)\n    for i in range(2000):\n        solution = cpie.sample()\n        f_value = objective_func(solution)\n        cpie.update(f_value)\n        cpie.print()\n```\n\"bounds_min\" and \"bounds_max\" means search space.  \nCPIE starts optimization with Ns solutions sampled unimormally in the search space.  \n\nAfter optimization loop, you can get optimized solution.\n```python\n    print(\"global best x\", cpie.best.x)\n    print(\"global best f\", cpie.best.f)\n```\n\nCPIE is niching algorithm, so you can also get best solutions from each mode.  \n```python\n    bests = cpie.get_bests()\n    for i, b in enumerate(bests):\n        print(\"mode\", i, \" f\", b.f)\n```\n\nexample_main.py shows full example code.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tdj-lomf/cpie", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cpie", "package_url": "https://pypi.org/project/cpie/", "platform": "", "project_url": "https://pypi.org/project/cpie/", "project_urls": {"Homepage": "https://github.com/tdj-lomf/cpie"}, "release_url": "https://pypi.org/project/cpie/1.0.0/", "requires_dist": ["numpy"], "requires_python": ">=3.6", "summary": "An evolutionary computation algorithm named CPIE in Python.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cpie</h1>\n<p>Clustering-based Promising Individual Enclosre(CPIE) in Python.</p>\n<p>CPIE is an evolutionary computation algorithm which aims to search best parameters minimizing black-box function, especially UV-function.<br>\nUV-function has U-valley, which occupies large search space but  contains only local optima, and V-valley, which occupies small search space but contains global optima.<br>\ne.g. Double-sphere: f(x) = min((x-2)^2 + 0.1, 10*(x+2)^2)</p>\n<h1>Installation</h1>\n<pre><code>$ pip install cpie\n</code></pre>\n<p>CPIE depends on numpy, so please install numpy if needed.</p>\n<h1>Example of usage</h1>\n<p>First, you can import CPIE module as below.</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">cpie</span> <span class=\"kn\">import</span> <span class=\"n\">CPie</span>\n</pre>\n<p>Then, you need to prepare objective function to be minimized.</p>\n<pre>    <span class=\"k\">def</span> <span class=\"nf\">sphere</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"o\">*</span><span class=\"n\">xi</span> <span class=\"k\">for</span> <span class=\"n\">xi</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">objective_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">sphere</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</pre>\n<p>You can minimize objective function like below.</p>\n<pre>    <span class=\"n\">dimension</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">bounds_min</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">10.0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">dimension</span>\n    <span class=\"n\">bounds_max</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"mf\">10.0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">dimension</span>\n    <span class=\"n\">cpie</span> <span class=\"o\">=</span> <span class=\"n\">CPie</span><span class=\"p\">(</span><span class=\"n\">bounds_min</span><span class=\"p\">,</span> <span class=\"n\">bounds_max</span><span class=\"p\">,</span> <span class=\"n\">Ns</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"o\">*</span><span class=\"n\">dimension</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">):</span>\n        <span class=\"n\">solution</span> <span class=\"o\">=</span> <span class=\"n\">cpie</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">()</span>\n        <span class=\"n\">f_value</span> <span class=\"o\">=</span> <span class=\"n\">objective_func</span><span class=\"p\">(</span><span class=\"n\">solution</span><span class=\"p\">)</span>\n        <span class=\"n\">cpie</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">f_value</span><span class=\"p\">)</span>\n        <span class=\"n\">cpie</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">()</span>\n</pre>\n<p>\"bounds_min\" and \"bounds_max\" means search space.<br>\nCPIE starts optimization with Ns solutions sampled unimormally in the search space.</p>\n<p>After optimization loop, you can get optimized solution.</p>\n<pre>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"global best x\"</span><span class=\"p\">,</span> <span class=\"n\">cpie</span><span class=\"o\">.</span><span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"global best f\"</span><span class=\"p\">,</span> <span class=\"n\">cpie</span><span class=\"o\">.</span><span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>CPIE is niching algorithm, so you can also get best solutions from each mode.</p>\n<pre>    <span class=\"n\">bests</span> <span class=\"o\">=</span> <span class=\"n\">cpie</span><span class=\"o\">.</span><span class=\"n\">get_bests</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">bests</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"mode\"</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s2\">\" f\"</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>example_main.py shows full example code.</p>\n\n          </div>"}, "last_serial": 6762185, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "afcc8ca71902e998c64e67e84ee8f33b", "sha256": "033aae641b146781e36ebc9c3e0123910be074d13d1b53090b32844eabef112a"}, "downloads": -1, "filename": "cpie-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "afcc8ca71902e998c64e67e84ee8f33b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10618, "upload_time": "2020-03-06T14:12:02", "upload_time_iso_8601": "2020-03-06T14:12:02.532753Z", "url": "https://files.pythonhosted.org/packages/4d/e1/85075e05055c5fb2f648571474fc06b1e1ae91d96c990260a1edc678562f/cpie-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc3401b0b21fd9b5c31fc511b3b1dfc7", "sha256": "7ba85f1822e60ce16384fa1fd727b472e5e169e0639111951020c12ea327300a"}, "downloads": -1, "filename": "cpie-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fc3401b0b21fd9b5c31fc511b3b1dfc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8095, "upload_time": "2020-03-06T14:12:04", "upload_time_iso_8601": "2020-03-06T14:12:04.658784Z", "url": "https://files.pythonhosted.org/packages/d4/3b/6f715fcbdd16d01779cb07c768814babc67b333bf44cf363fb55d59dd6b5/cpie-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "afcc8ca71902e998c64e67e84ee8f33b", "sha256": "033aae641b146781e36ebc9c3e0123910be074d13d1b53090b32844eabef112a"}, "downloads": -1, "filename": "cpie-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "afcc8ca71902e998c64e67e84ee8f33b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10618, "upload_time": "2020-03-06T14:12:02", "upload_time_iso_8601": "2020-03-06T14:12:02.532753Z", "url": "https://files.pythonhosted.org/packages/4d/e1/85075e05055c5fb2f648571474fc06b1e1ae91d96c990260a1edc678562f/cpie-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc3401b0b21fd9b5c31fc511b3b1dfc7", "sha256": "7ba85f1822e60ce16384fa1fd727b472e5e169e0639111951020c12ea327300a"}, "downloads": -1, "filename": "cpie-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fc3401b0b21fd9b5c31fc511b3b1dfc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8095, "upload_time": "2020-03-06T14:12:04", "upload_time_iso_8601": "2020-03-06T14:12:04.658784Z", "url": "https://files.pythonhosted.org/packages/d4/3b/6f715fcbdd16d01779cb07c768814babc67b333bf44cf363fb55d59dd6b5/cpie-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:39 2020"}