{"info": {"author": "Evan Leis", "author_email": "engineergod@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "cartridge-payments\n==================\n\n**NOTE:** *Requires cartridge 0.8.2 or higher*\n*The shop/checkout.html template has 3 blocks that are required. nav-buttons, before-form, and after-form.*\n\nCartridge multiple payment options module.\n\nFeatures\n-------------------------\n\nThis package lets you specify an optional Primary Payment Processor (in the normal cartridge way) and any number of extra processors. (ones that link out like Paypal Standard or Google Wallet ).\n\nOn the payment page the regular form shows up, if enabled, as well as buttons to submit form data out to the secondary payment providers.\n\nInstallation\n-------------------------\n\nInstall the package by running the following command in your virtual environment:\n    \n    pip install cartridge-payments\n    \nAdd the following minimum settings to your settings file:\n\n    INSTALLED_APPS = (\n\t    # ...\n\t    \"payments.multipayments\",\n\t    # ...\n\t)\n\t\n\tTEMPLATE_CONTEXT_PROCESSORS = (\n\t    # ...\n\t    \"payments.multipayments.context_processors.settings\",\n\t    # ...\n\t)\n    \n    # USE or EXTEND the custom callback-uuid form\n\tSHOP_CHECKOUT_FORM_CLASS = 'payments.multipayments.forms.base.CallbackUUIDOrderForm'\n\t\n\t# Add the callback_uuid field to orders. This field is helpful for identifying\n\t# orders being checked out.\n\tEXTRA_MODEL_FIELDS = (\n        # ...\n\t    (\n\t        \"cartridge.shop.models.Order.callback_uuid\",\n\t        \"django.db.models.CharField\",\n\t        (),\n\t        {\"blank\" : False, \"max_length\" : 36},\n\t    ),\n        # ...\n\t)\n\n\n    # WHEN TRUE, Users will be able to submit payment using the regular paradigm\n\t# as well as the secondary payment processors.  WHEN FALSE the regular paradigm\n\t# will be hidden / disabled.\n\tPRIMARY_PAYMENT_PROCESSOR_IN_USE = True\n\t\n\t# These processors are forms to submit to remote URLs for processing.\n\tSECONDARY_PAYMENT_PROCESSORS = (\n\t    ('payment-key1', {\n\t        'name' : 'Button Name 1',\n\t        'form' : 'dot.separarted.form.Class1'\n\t    }),\n\t    ('payment-key2', {\n\t        'name' : 'Button Name 2',\n\t        'form' : 'dot.separarted.form.Class2'\n\t    })\n\t)\n\t\nPayPal Configuration\n-------------------------\n\nOne built-in processor is for PayPal.\nPayPal IPN is not implemented by default, but is supported by specifying the `PAYPAL_IPN_URL` setting.\n\nAdd PayPal as a secondary payment processor.\n\n\tSECONDARY_PAYMENT_PROCESSORS = (\n        # ...\n\t    ('paypal', {\n\t        'name' : 'Pay With Pay-Pal',\n\t        'form' : 'payments.multipayments.forms.paypal.PaypalSubmissionForm'\n\t    }),\n        # ...\n    )\n        \nConfigure PayPal\n    \n    # Currency type.\n    PAYPAL_CURRENCY = \"USD\"\n    \n    # Business account email. Sandbox emails look like this.\n\tPAYPAL_BUSINESS = 'seller_XXXXXXXX_biz@example.com' \n    \n    # Use this to enable https on return URLs.  This is strongly recommended! (Except for sandbox)\n\tPAYPAL_RETURN_WITH_HTTPS = True \n    \n\t# Function that returns args for `reverse`. \n    # URL is sent to PayPal as the for returning to a 'complete' landing page.\n\tPAYPAL_RETURN_URL = lambda cart, uuid, order_form: ('shop_complete', None, None)\n    \n\t# Function that returns args for `reverse`. \n    # URL is sent to PayPal as the URL to callback to for PayPal IPN.\n\t# Set to None if you do not wish to use IPN.\n\tPAYPAL_IPN_URL = lambda cart, uuid, order_form: ('my_paypal_ipn', None, {'uuid' : uuid})\n        \n\t# URL the secondary-payment-form is submitted to\n    # Dev example\n\tPAYPAL_SUBMIT_URL = 'https://www.sandbox.paypal.com/cgi-bin/webscr'\n    # Prod example\n    PAYPAL_SUBMIT_URL = 'https://www.paypal.com/cgi-bin/webscr'\n\nGoogle Wallet Configuration\n-------------------------\n\nAnother built-in processor is for Google Wallet.\nGoogle wallets callbacks are not implemented but are supported because `callback_uuid`'s are\nsent to Google Wallet as `merchant-private-data`. \n\nAdd Google Wallet as a secondary payment processor.\n\n    SECONDARY_PAYMENT_PROCESSORS = (\n        # ...\n\t    ('google', {\n            'name' : 'Pay With Google Wallet',\n\t        'form' : 'payments.multipayments.forms.google.GoogleSubmissionForm'\n\t    }),\n        # ...\n    )\n        \nConfigure Google Wallet\n    \n    # URL the secondary-payment-form is submitted to\n    # Dev example\n    GOOGLE_CHECKOUT_SUBMIT_URL = \\\n\t    'https://sandbox.google.com/checkout/api/checkout/v2/checkoutForm/Merchant/<my-merchant-id>'\n    # Prod example\n    GOOGLE_CHECKOUT_SUBMIT_URL = \\\n\t    'https://checkout.google.com/api/checkout/v2/checkout/Merchant/<my-merchant-id>'", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/explodes/cartridge-payments", "keywords": null, "license": "Apache Software License", "maintainer": null, "maintainer_email": null, "name": "cartridge-payments", "package_url": "https://pypi.org/project/cartridge-payments/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cartridge-payments/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/explodes/cartridge-payments"}, "release_url": "https://pypi.org/project/cartridge-payments/0.97.0/", "requires_dist": null, "requires_python": null, "summary": "Cartridge multiple payment options module.", "version": "0.97.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            cartridge-payments<br>==================<br><br>**NOTE:** *Requires cartridge 0.8.2 or higher*<br>*The shop/checkout.html template has 3 blocks that are required. nav-buttons, before-form, and after-form.*<br><br>Cartridge multiple payment options module.<br><br>Features<br>-------------------------<br><br>This package lets you specify an optional Primary Payment Processor (in the normal cartridge way) and any number of extra processors. (ones that link out like Paypal Standard or Google Wallet ).<br><br>On the payment page the regular form shows up, if enabled, as well as buttons to submit form data out to the secondary payment providers.<br><br>Installation<br>-------------------------<br><br>Install the package by running the following command in your virtual environment:<br>    <br>    pip install cartridge-payments<br>    <br>Add the following minimum settings to your settings file:<br><br>    INSTALLED_APPS = (<br>\t    # ...<br>\t    \"payments.multipayments\",<br>\t    # ...<br>\t)<br>\t<br>\tTEMPLATE_CONTEXT_PROCESSORS = (<br>\t    # ...<br>\t    \"payments.multipayments.context_processors.settings\",<br>\t    # ...<br>\t)<br>    <br>    # USE or EXTEND the custom callback-uuid form<br>\tSHOP_CHECKOUT_FORM_CLASS = 'payments.multipayments.forms.base.CallbackUUIDOrderForm'<br>\t<br>\t# Add the callback_uuid field to orders. This field is helpful for identifying<br>\t# orders being checked out.<br>\tEXTRA_MODEL_FIELDS = (<br>        # ...<br>\t    (<br>\t        \"cartridge.shop.models.Order.callback_uuid\",<br>\t        \"django.db.models.CharField\",<br>\t        (),<br>\t        {\"blank\" : False, \"max_length\" : 36},<br>\t    ),<br>        # ...<br>\t)<br><br><br>    # WHEN TRUE, Users will be able to submit payment using the regular paradigm<br>\t# as well as the secondary payment processors.  WHEN FALSE the regular paradigm<br>\t# will be hidden / disabled.<br>\tPRIMARY_PAYMENT_PROCESSOR_IN_USE = True<br>\t<br>\t# These processors are forms to submit to remote URLs for processing.<br>\tSECONDARY_PAYMENT_PROCESSORS = (<br>\t    ('payment-key1', {<br>\t        'name' : 'Button Name 1',<br>\t        'form' : 'dot.separarted.form.Class1'<br>\t    }),<br>\t    ('payment-key2', {<br>\t        'name' : 'Button Name 2',<br>\t        'form' : 'dot.separarted.form.Class2'<br>\t    })<br>\t)<br>\t<br>PayPal Configuration<br>-------------------------<br><br>One built-in processor is for PayPal.<br>PayPal IPN is not implemented by default, but is supported by specifying the `PAYPAL_IPN_URL` setting.<br><br>Add PayPal as a secondary payment processor.<br><br>\tSECONDARY_PAYMENT_PROCESSORS = (<br>        # ...<br>\t    ('paypal', {<br>\t        'name' : 'Pay With Pay-Pal',<br>\t        'form' : 'payments.multipayments.forms.paypal.PaypalSubmissionForm'<br>\t    }),<br>        # ...<br>    )<br>        <br>Configure PayPal<br>    <br>    # Currency type.<br>    PAYPAL_CURRENCY = \"USD\"<br>    <br>    # Business account email. Sandbox emails look like this.<br>\tPAYPAL_BUSINESS = 'seller_XXXXXXXX_biz@example.com' <br>    <br>    # Use this to enable https on return URLs.  This is strongly recommended! (Except for sandbox)<br>\tPAYPAL_RETURN_WITH_HTTPS = True <br>    <br>\t# Function that returns args for `reverse`. <br>    # URL is sent to PayPal as the for returning to a 'complete' landing page.<br>\tPAYPAL_RETURN_URL = lambda cart, uuid, order_form: ('shop_complete', None, None)<br>    <br>\t# Function that returns args for `reverse`. <br>    # URL is sent to PayPal as the URL to callback to for PayPal IPN.<br>\t# Set to None if you do not wish to use IPN.<br>\tPAYPAL_IPN_URL = lambda cart, uuid, order_form: ('my_paypal_ipn', None, {'uuid' : uuid})<br>        <br>\t# URL the secondary-payment-form is submitted to<br>    # Dev example<br>\tPAYPAL_SUBMIT_URL = 'https://www.sandbox.paypal.com/cgi-bin/webscr'<br>    # Prod example<br>    PAYPAL_SUBMIT_URL = 'https://www.paypal.com/cgi-bin/webscr'<br><br>Google Wallet Configuration<br>-------------------------<br><br>Another built-in processor is for Google Wallet.<br>Google wallets callbacks are not implemented but are supported because `callback_uuid`'s are<br>sent to Google Wallet as `merchant-private-data`. <br><br>Add Google Wallet as a secondary payment processor.<br><br>    SECONDARY_PAYMENT_PROCESSORS = (<br>        # ...<br>\t    ('google', {<br>            'name' : 'Pay With Google Wallet',<br>\t        'form' : 'payments.multipayments.forms.google.GoogleSubmissionForm'<br>\t    }),<br>        # ...<br>    )<br>        <br>Configure Google Wallet<br>    <br>    # URL the secondary-payment-form is submitted to<br>    # Dev example<br>    GOOGLE_CHECKOUT_SUBMIT_URL = \\<br>\t    'https://sandbox.google.com/checkout/api/checkout/v2/checkoutForm/Merchant/&lt;my-merchant-id&gt;'<br>    # Prod example<br>    GOOGLE_CHECKOUT_SUBMIT_URL = \\<br>\t    'https://checkout.google.com/api/checkout/v2/checkout/Merchant/&lt;my-merchant-id&gt;'\n          </div>"}, "last_serial": 830525, "releases": {"0.97.0": [{"comment_text": "", "digests": {"md5": "0af13899192dcf7c73d248a2d87ad8ac", "sha256": "a975e45ffc6a071ea216a62b7eefbd132255b0dcfba4f296467fc0e5ec1cc1e9"}, "downloads": -1, "filename": "cartridge-payments-0.97.0.tar.gz", "has_sig": false, "md5_digest": "0af13899192dcf7c73d248a2d87ad8ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8707, "upload_time": "2013-08-01T22:38:57", "upload_time_iso_8601": "2013-08-01T22:38:57.221491Z", "url": "https://files.pythonhosted.org/packages/1d/0b/79d1d9b85e98f220e43665fcc80fcb6f7fa6d296a6ef714f797600c33d66/cartridge-payments-0.97.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0af13899192dcf7c73d248a2d87ad8ac", "sha256": "a975e45ffc6a071ea216a62b7eefbd132255b0dcfba4f296467fc0e5ec1cc1e9"}, "downloads": -1, "filename": "cartridge-payments-0.97.0.tar.gz", "has_sig": false, "md5_digest": "0af13899192dcf7c73d248a2d87ad8ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8707, "upload_time": "2013-08-01T22:38:57", "upload_time_iso_8601": "2013-08-01T22:38:57.221491Z", "url": "https://files.pythonhosted.org/packages/1d/0b/79d1d9b85e98f220e43665fcc80fcb6f7fa6d296a6ef714f797600c33d66/cartridge-payments-0.97.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:22 2020"}