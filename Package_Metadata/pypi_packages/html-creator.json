{"info": {"author": "iTecX", "author_email": "matteovh@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# html-creator\nPython library to dynamically generate html in an etree-like structure\n\n# Docs\n***\n`Document(title='')`: Your HTML document. \n## Args\n- title: The title of your document. This is optional and can be specified later\n## Methods\n- Using `str()` on this object will return the formatted html content of the Document.\n## Properties\n- `Document.children`: The direct children of the document\n- `Document.head`: The head tag of the document (automatically generated)\n- `Document.body`: The body tag of the document (automatically generated)\n***\n`Element(tag='p',attrs={},content='')`: A single HTML element/tag\n## Args\n- tag: The tag name, like div, p, or h1\n- attrs: The attributes of the element, in a dict\n- content: Text content of your tag\n## Methods\n- Using `str()` on this object will return the formatted html tag, including formatted html versions of all child tags\n- Using `len(Element object)` will return the number of children\n- Using `Element[index]` will return the element at that index\n- Using `Element.append(new Element object instance)` or `Element.add_child(new Element object instance)` adds a child Element to the Element\n## Properties\n- `tag`, `attrs`, `content`: See Args\n- `children`: The direct children on the Element\n***\n`CSS(Dict={})`: A utility class for generating CSS\n## Args\n- Dict: Specifies a starting dictionary (Must be in form `{selector: {property: value,property: value,property: value}, selector2: {property: value,property: value,property: value}}`)\n## Methods\n- `del CSS[selector]` and `CSS[selector]`, respectively, delete and get the specified selector in the CSS object\n- `add_sel(selector)`: Adds a selector to add properties to\n- `add_property(selector, property, value)`: Adds property `property` with value `value` to selector `selector`\n- `del_property(selector, property)`: Deletes property `property` from selector `selector`\n- `str(CSS object)`: Returns a formatted CSS string\n## Properties\n- `dict`: The dictionary used by the CSS object. Can be edited directly, but could cause issues\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/iTecAI/html-creator", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "html-creator", "package_url": "https://pypi.org/project/html-creator/", "platform": "", "project_url": "https://pypi.org/project/html-creator/", "project_urls": {"Homepage": "https://github.com/iTecAI/html-creator"}, "release_url": "https://pypi.org/project/html-creator/1.1/", "requires_dist": null, "requires_python": "", "summary": "Dynamic HTML code generation", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>html-creator</h1>\n<p>Python library to dynamically generate html in an etree-like structure</p>\n<h1>Docs</h1>\n<hr>\n<p><code>Document(title='')</code>: Your HTML document.</p>\n<h2>Args</h2>\n<ul>\n<li>title: The title of your document. This is optional and can be specified later</li>\n</ul>\n<h2>Methods</h2>\n<ul>\n<li>Using <code>str()</code> on this object will return the formatted html content of the Document.</li>\n</ul>\n<h2>Properties</h2>\n<ul>\n<li><code>Document.children</code>: The direct children of the document</li>\n<li><code>Document.head</code>: The head tag of the document (automatically generated)</li>\n<li><code>Document.body</code>: The body tag of the document (automatically generated)</li>\n</ul>\n<hr>\n<p><code>Element(tag='p',attrs={},content='')</code>: A single HTML element/tag</p>\n<h2>Args</h2>\n<ul>\n<li>tag: The tag name, like div, p, or h1</li>\n<li>attrs: The attributes of the element, in a dict</li>\n<li>content: Text content of your tag</li>\n</ul>\n<h2>Methods</h2>\n<ul>\n<li>Using <code>str()</code> on this object will return the formatted html tag, including formatted html versions of all child tags</li>\n<li>Using <code>len(Element object)</code> will return the number of children</li>\n<li>Using <code>Element[index]</code> will return the element at that index</li>\n<li>Using <code>Element.append(new Element object instance)</code> or <code>Element.add_child(new Element object instance)</code> adds a child Element to the Element</li>\n</ul>\n<h2>Properties</h2>\n<ul>\n<li><code>tag</code>, <code>attrs</code>, <code>content</code>: See Args</li>\n<li><code>children</code>: The direct children on the Element</li>\n</ul>\n<hr>\n<p><code>CSS(Dict={})</code>: A utility class for generating CSS</p>\n<h2>Args</h2>\n<ul>\n<li>Dict: Specifies a starting dictionary (Must be in form <code>{selector: {property: value,property: value,property: value}, selector2: {property: value,property: value,property: value}}</code>)</li>\n</ul>\n<h2>Methods</h2>\n<ul>\n<li><code>del CSS[selector]</code> and <code>CSS[selector]</code>, respectively, delete and get the specified selector in the CSS object</li>\n<li><code>add_sel(selector)</code>: Adds a selector to add properties to</li>\n<li><code>add_property(selector, property, value)</code>: Adds property <code>property</code> with value <code>value</code> to selector <code>selector</code></li>\n<li><code>del_property(selector, property)</code>: Deletes property <code>property</code> from selector <code>selector</code></li>\n<li><code>str(CSS object)</code>: Returns a formatted CSS string</li>\n</ul>\n<h2>Properties</h2>\n<ul>\n<li><code>dict</code>: The dictionary used by the CSS object. Can be edited directly, but could cause issues</li>\n</ul>\n\n          </div>"}, "last_serial": 5264443, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "2b91e77b787ed32cb0f12a6ba157e711", "sha256": "c1b60fe36667cbaf7604abbf14a77f7ae7b32978db11d68ef7ac5001484d842a"}, "downloads": -1, "filename": "html_creator-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2b91e77b787ed32cb0f12a6ba157e711", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3938, "upload_time": "2019-05-13T17:32:15", "upload_time_iso_8601": "2019-05-13T17:32:15.747114Z", "url": "https://files.pythonhosted.org/packages/90/22/c7241bf07175a7debc1694fe726b1b90346f6bb100121aad9b810e9d2cd5/html_creator-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fd391c26fd60a4a65e36ef271e32091", "sha256": "af3fad4f85c8cd012f3c10a37f187700db3205cb9eb94cb0c8538e08a83a6231"}, "downloads": -1, "filename": "html_creator-1.0.tar.gz", "has_sig": false, "md5_digest": "1fd391c26fd60a4a65e36ef271e32091", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2722, "upload_time": "2019-05-13T17:32:17", "upload_time_iso_8601": "2019-05-13T17:32:17.788590Z", "url": "https://files.pythonhosted.org/packages/d0/17/bede0fe9465deed975ee13b056bc467e10dfd906904e8306acc06211697b/html_creator-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "6d81b54e9d572a860904638fc799fefc", "sha256": "d9630944441ec0497f7e6de8478abcfe11d90fb6e9f936acdb4807af23c5ba60"}, "downloads": -1, "filename": "html_creator-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6d81b54e9d572a860904638fc799fefc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3932, "upload_time": "2019-05-13T21:03:50", "upload_time_iso_8601": "2019-05-13T21:03:50.348239Z", "url": "https://files.pythonhosted.org/packages/5f/4c/6c4cd7d6d25457d27b0e8c0cdddebb373a975d23e2bd585b43c10810ceb4/html_creator-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ecd1eefcde8df9898030f64bf18a29d", "sha256": "bcff0dd39714fa4dc93986a773984b8fb3de2383e2e18d030810d1200cfa93cb"}, "downloads": -1, "filename": "html_creator-1.1.tar.gz", "has_sig": false, "md5_digest": "8ecd1eefcde8df9898030f64bf18a29d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2720, "upload_time": "2019-05-13T21:03:51", "upload_time_iso_8601": "2019-05-13T21:03:51.568270Z", "url": "https://files.pythonhosted.org/packages/55/94/549886c8c527b4ae5d844eb13c07c75e274e2d9d6bdc047350c3fd822f61/html_creator-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d81b54e9d572a860904638fc799fefc", "sha256": "d9630944441ec0497f7e6de8478abcfe11d90fb6e9f936acdb4807af23c5ba60"}, "downloads": -1, "filename": "html_creator-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6d81b54e9d572a860904638fc799fefc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3932, "upload_time": "2019-05-13T21:03:50", "upload_time_iso_8601": "2019-05-13T21:03:50.348239Z", "url": "https://files.pythonhosted.org/packages/5f/4c/6c4cd7d6d25457d27b0e8c0cdddebb373a975d23e2bd585b43c10810ceb4/html_creator-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ecd1eefcde8df9898030f64bf18a29d", "sha256": "bcff0dd39714fa4dc93986a773984b8fb3de2383e2e18d030810d1200cfa93cb"}, "downloads": -1, "filename": "html_creator-1.1.tar.gz", "has_sig": false, "md5_digest": "8ecd1eefcde8df9898030f64bf18a29d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2720, "upload_time": "2019-05-13T21:03:51", "upload_time_iso_8601": "2019-05-13T21:03:51.568270Z", "url": "https://files.pythonhosted.org/packages/55/94/549886c8c527b4ae5d844eb13c07c75e274e2d9d6bdc047350c3fd822f61/html_creator-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:17 2020"}