{"info": {"author": "Thomas Aglassinger", "author_email": "roskakori@users.sourceforge.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Text Processing"], "description": "ebcdic\n======\n\n``ebcdic`` is a Python package adding additional EBCDIC codecs for data\nexchange with legacy system. It works with Python 2.7 and Python 3.4+.\n\n`EBCDIC <https://en.wikipedia.org/wiki/EBCDIC>`_ is short for Extended Binary\nCoded Decimal Interchange Code and is a family of character encodings that is\nmainly used on mainframe computers. There is no real point in using it unless\nyou have to exchange data with legacy systems that still only support EBCDIC\nas character encoding.\n\n\nInstallation\n------------\n\nThe ``ebcdic`` package is available from https://pypi.python.org/pypi/ebcdic\nand can be installed using pip::\n\n  pip install ebcdic\n\n\nExample usage\n-------------\n\nTo encode ``'hello world'`` on EBCDIC systems in German speaking countries,\nuse::\n\n  >>> import ebcdic\n  >>> 'hello world'.encode('cp1141')\n  b'\\x88\\x85\\x93\\x93\\x96@\\xa6\\x96\\x99\\x93\\x84O'\n\n\nSupported codecs\n----------------\n\nThe ``ebcdic`` package includes EBCDIC codecs for the following regions:\n\n* cp290 - Japan (Katakana)\n* cp420 - Arabic bilingual\n* cp424 - Israel (Hebrew)\n* cp833 - Korea Extended (single byte)\n* cp838 - Thailand\n* cp870 - Eastern Europe (Poland, Hungary, Czech, Slovakia, Slovenia,\n  Croatian, Serbia, Bulgarian); represents Latin-2\n* cp1097 - Iran (Farsi)\n* cp1140 - Australia, Brazil, Canada, New Zealand, Portugal, South Africa,\n  USA\n* cp1141 - Austria, Germany, Switzerland\n* cp1142 - Denmark, Norway\n* cp1143 - Finland, Sweden\n* cp1144 - Italy\n* cp1145 - Latin America, Spain\n* cp1146 - Great Britain, Ireland, North Ireland\n* cp1147 - France\n* cp1148 - International\n* cp1148ms - International, Microsoft interpretation; similar to cp1148\n  except that 0x15 is mapped to 0x85 (\"next line\") instead if 0x0a\n  (\"linefeed\")\n* cp1149 - Iceland\n\nIt also includes legacy codecs:\n\n* cp037 - Australia, Brazil, Canada, New Zealand, Portugal, South Africa;\n  similar to cp1140 but without Euro sign\n* cp273 - Austria, Germany, Switzerland; similar to cp1141 but without Euro\n  sign\n* cp277 - Denmark, Norway; similar to cp1142 but without Euro sign\n* cp278 - Finland, Sweden; similar to cp1143 but without Euro sign\n* cp280 - Italy; similar to cp1141 but without Euro sign\n* cp284 - Latin America, Spain; similar to cp1145 but without Euro sign\n* cp285 - Great Britain, Ireland, North Ireland; similar to cp1146 but\n  without Euro sign\n* cp297 - France; similar to cp1147 but without Euro sign\n* cp500 - International; similar to cp1148 but without Euro sign\n* cp500ms - International, Microsoft interpretation; identical to\n  codecs.cp500 similar to ebcdic.cp500 except that 0x15 is mapped to 0x85\n  (\"next line\") instead if 0x0a (\"linefeed\")\n* cp871 - Iceland; similar to cp1149 but without Euro sign\n* cp875 - Greece;  similar to cp9067 but without Euro sign and a few\n  other characters\n* cp1025 - Cyrillic\n* cp1047 - Open Systems (MVS C compiler)\n* cp1112 - Estonia, Latvia, Lithuania (Baltic)\n* cp1122 - Estonia;  similar to cp1157 but without Euro sign\n* cp1123 - Ukraine; similar to cp1158 but without Euro sign\n\nCodecs in the standard library overrule some of these codecs. At the time of\nthis writing this concerns cp037, cp273 (since 3.4), cp500 and cp1140.\n\nTo see get a list of EBCDIC codecs that are already provided by different\nsources, use ``ebcdic.ignored_codec_names()``. For example, with Python 3.6\nthe result is::\n\n  >>> ebcdic.ignored_codec_names()\n  ['cp037', 'cp1140', 'cp273', 'cp424', 'cp500', 'cp875']\n\n\nUnsupported codecs\n------------------\n\nAccording to a\n`comprehensive list of code pages <https://www.aivosto.com/articles/charsets-codepages.html>`_,\nthere are additional codecs this package does not support yet. Possible\nreasons and solutions are:\n\n1. It's a double byte codec, e.g. cp834 (Korea). Technically ``CodecMapper``\n   can easily support them by increasing the mapping size from 256 to 65536.\n   Due lack of test date and access to Asian mainframes this was deemed too\n   experimental for now.\n2. The codec contains combining characters, e.g. cp1132 (Lao) which allows\n   to represent more than 256 characters combining several characters.\n3. Java does not include a mapping for the respective code page, e.g.\n   cp410/880 (Cyrillic). You can add such a codec based on the information\n   found at the link above and submit an enhancement request for the Java\n   standard library. Once it is released, simply add the new codec to\n   the ``build.xml`` as described below.\n4. I missed a codec. Simply open an issue on Github at\n   https://github.com/roskakori/CodecMapper/issues and it will be added with\n   the next version.\n\n\nSource code\n-----------\n\nThese codecs have been generated using CodecMapper, available from\nhttps://github.com/roskakori/CodecMapper. Read the README in order to\nto build the ebcdic package from source.\n\nTo add another 8 bit EBCDIC codec just extend the ant target ``ebcdic`` in\n``build.xml`` using a line like::\n\n   <arg value=\"cpXXX\" />\n\nReplace ``XXX`` by the number of the 8 bit code page you want to include.\n\nThen run::\n\n  ant test\n\nto build and test the distribution.\n\nThe ``ebcdic/setup.py`` automatically includes the new encoding in the package\nand ``ebcdic/__init__.py`` registers it during ``import ebcdic``, so no\nfurther steps are needed.\n\n\nChanges\n-------\n\nVersion 1.1.1, 2019-08-09\n\n* Moved license information from README to LICENSE (#5). This required the\n  distribution to change from sdist to wheel because apparently it is a\n  major challenge to include a text file in a platform independent way (#11).\n\n  Sadly this breaks compatibility with Python 2.6, 3.1, 3.2 and 3.3. If you\n  still need ``ebcdic`` with one of these Python versions, use\n  ``ebcdic-1.0.0``.\n\n  This took several attempts and intermediate releases that where broken in\n  different ways on different platforms. To prevent people from accidentally\n  installing one of these broken releases they have been removed from PyPI.\n  If you still want to take a look at them, use the\n  `respective tags <https://github.com/roskakori/CodecMapper/releases>`_.\n\nVersion 1.0.0, 2019-06-06\n\n* Changed development status to \"Production/Stable\".\n* Added international code pages cp500ms and cp1148ms which are the Microsoft\n  interpretations of the respective IBM code pages. The only difference is\n  that 0x1f is mapped to 0x85 (\"next line\") instead of 0x0a (\"new line\").\n  Note that codecs.cp500 included with the Python standard library also uses\n  the Microsoft interpretation (#4).\n* Added Arabian bilingual code page 420.\n* Added Baltic code page 1112.\n* Added Cyrillic code page 1025.\n* Added Eastern Europe code page 870.\n* Added Estonian code pages 1122 and 1157.\n* Added Greek code page 875.\n* Added Farsi Bilingual code page 1097.\n* Added Hebrew code page 424 and 803.\n* Added Korean code page 833.\n* Added Meahreb/French code page 425.\n* Added Japanese (Katakana) code page 290.\n* Added Thailand code page 838.\n* Added Turkish code page 322.\n* Added Ukraine code page 1123.\n* Added Python 3.5 to 3.8 as supported version.\n* Improved PEP8 conformance of generated codecs.\n\n\nVersion 0.7, 2014-11-17\n\n* Clarified which codecs are already part of the standard library and that\n  these codecs overrule the ``ebcdic`` package. Also added a function\n  ``ebcdic.ignored_codec_names()`` that returns the name of the EBCDIC codecs\n  provided by other means. To obtain access to ``ebcdic`` codecs overruled by\n  the standard library, use ``ebcdic.lookup()``.\n* Cleaned up (PEP8, __all__, typos, ...).\n\n\nVersion 0.6, 2014-11-15\n\n* Added support for Python 2.6+ and 3.1+ (#1).\n* Included a modified version of ``gencodec.py`` that still builds maps\n  instead of tables so the generated codecs work with Python versions earlier\n  than 3.3. It also does a `from __future__ import unicode_literals` so the\n  codecs even work with Python 2.6+ using the same source code. As a side\n  effect, this simplifies building the codecs because it removes the the need\n  for a local copy of the cpython source code.\n\n\nVersion 0.5, 2014-11-13\n\n* Initial public release\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.python.org/pypi/ebcdic", "keywords": "codec text unicode ebcdic", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "ebcdic", "package_url": "https://pypi.org/project/ebcdic/", "platform": "", "project_url": "https://pypi.org/project/ebcdic/", "project_urls": {"Homepage": "https://pypi.python.org/pypi/ebcdic"}, "release_url": "https://pypi.org/project/ebcdic/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Additional EBCDIC codecs", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>ebcdic</tt> is a Python package adding additional EBCDIC codecs for data\nexchange with legacy system. It works with Python 2.7 and Python 3.4+.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/EBCDIC\" rel=\"nofollow\">EBCDIC</a> is short for Extended Binary\nCoded Decimal Interchange Code and is a family of character encodings that is\nmainly used on mainframe computers. There is no real point in using it unless\nyou have to exchange data with legacy systems that still only support EBCDIC\nas character encoding.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The <tt>ebcdic</tt> package is available from <a href=\"https://pypi.python.org/pypi/ebcdic\" rel=\"nofollow\">https://pypi.python.org/pypi/ebcdic</a>\nand can be installed using pip:</p>\n<pre>pip install ebcdic\n</pre>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<p>To encode <tt>'hello world'</tt> on EBCDIC systems in German speaking countries,\nuse:</p>\n<pre>&gt;&gt;&gt; import ebcdic\n&gt;&gt;&gt; 'hello world'.encode('cp1141')\nb'\\x88\\x85\\x93\\x93\\x96@\\xa6\\x96\\x99\\x93\\x84O'\n</pre>\n</div>\n<div id=\"supported-codecs\">\n<h2>Supported codecs</h2>\n<p>The <tt>ebcdic</tt> package includes EBCDIC codecs for the following regions:</p>\n<ul>\n<li>cp290 - Japan (Katakana)</li>\n<li>cp420 - Arabic bilingual</li>\n<li>cp424 - Israel (Hebrew)</li>\n<li>cp833 - Korea Extended (single byte)</li>\n<li>cp838 - Thailand</li>\n<li>cp870 - Eastern Europe (Poland, Hungary, Czech, Slovakia, Slovenia,\nCroatian, Serbia, Bulgarian); represents Latin-2</li>\n<li>cp1097 - Iran (Farsi)</li>\n<li>cp1140 - Australia, Brazil, Canada, New Zealand, Portugal, South Africa,\nUSA</li>\n<li>cp1141 - Austria, Germany, Switzerland</li>\n<li>cp1142 - Denmark, Norway</li>\n<li>cp1143 - Finland, Sweden</li>\n<li>cp1144 - Italy</li>\n<li>cp1145 - Latin America, Spain</li>\n<li>cp1146 - Great Britain, Ireland, North Ireland</li>\n<li>cp1147 - France</li>\n<li>cp1148 - International</li>\n<li>cp1148ms - International, Microsoft interpretation; similar to cp1148\nexcept that 0x15 is mapped to 0x85 (\u201cnext line\u201d) instead if 0x0a\n(\u201clinefeed\u201d)</li>\n<li>cp1149 - Iceland</li>\n</ul>\n<p>It also includes legacy codecs:</p>\n<ul>\n<li>cp037 - Australia, Brazil, Canada, New Zealand, Portugal, South Africa;\nsimilar to cp1140 but without Euro sign</li>\n<li>cp273 - Austria, Germany, Switzerland; similar to cp1141 but without Euro\nsign</li>\n<li>cp277 - Denmark, Norway; similar to cp1142 but without Euro sign</li>\n<li>cp278 - Finland, Sweden; similar to cp1143 but without Euro sign</li>\n<li>cp280 - Italy; similar to cp1141 but without Euro sign</li>\n<li>cp284 - Latin America, Spain; similar to cp1145 but without Euro sign</li>\n<li>cp285 - Great Britain, Ireland, North Ireland; similar to cp1146 but\nwithout Euro sign</li>\n<li>cp297 - France; similar to cp1147 but without Euro sign</li>\n<li>cp500 - International; similar to cp1148 but without Euro sign</li>\n<li>cp500ms - International, Microsoft interpretation; identical to\ncodecs.cp500 similar to ebcdic.cp500 except that 0x15 is mapped to 0x85\n(\u201cnext line\u201d) instead if 0x0a (\u201clinefeed\u201d)</li>\n<li>cp871 - Iceland; similar to cp1149 but without Euro sign</li>\n<li>cp875 - Greece;  similar to cp9067 but without Euro sign and a few\nother characters</li>\n<li>cp1025 - Cyrillic</li>\n<li>cp1047 - Open Systems (MVS C compiler)</li>\n<li>cp1112 - Estonia, Latvia, Lithuania (Baltic)</li>\n<li>cp1122 - Estonia;  similar to cp1157 but without Euro sign</li>\n<li>cp1123 - Ukraine; similar to cp1158 but without Euro sign</li>\n</ul>\n<p>Codecs in the standard library overrule some of these codecs. At the time of\nthis writing this concerns cp037, cp273 (since 3.4), cp500 and cp1140.</p>\n<p>To see get a list of EBCDIC codecs that are already provided by different\nsources, use <tt>ebcdic.ignored_codec_names()</tt>. For example, with Python 3.6\nthe result is:</p>\n<pre>&gt;&gt;&gt; ebcdic.ignored_codec_names()\n['cp037', 'cp1140', 'cp273', 'cp424', 'cp500', 'cp875']\n</pre>\n</div>\n<div id=\"unsupported-codecs\">\n<h2>Unsupported codecs</h2>\n<p>According to a\n<a href=\"https://www.aivosto.com/articles/charsets-codepages.html\" rel=\"nofollow\">comprehensive list of code pages</a>,\nthere are additional codecs this package does not support yet. Possible\nreasons and solutions are:</p>\n<ol>\n<li>It\u2019s a double byte codec, e.g. cp834 (Korea). Technically <tt>CodecMapper</tt>\ncan easily support them by increasing the mapping size from 256 to 65536.\nDue lack of test date and access to Asian mainframes this was deemed too\nexperimental for now.</li>\n<li>The codec contains combining characters, e.g. cp1132 (Lao) which allows\nto represent more than 256 characters combining several characters.</li>\n<li>Java does not include a mapping for the respective code page, e.g.\ncp410/880 (Cyrillic). You can add such a codec based on the information\nfound at the link above and submit an enhancement request for the Java\nstandard library. Once it is released, simply add the new codec to\nthe <tt>build.xml</tt> as described below.</li>\n<li>I missed a codec. Simply open an issue on Github at\n<a href=\"https://github.com/roskakori/CodecMapper/issues\" rel=\"nofollow\">https://github.com/roskakori/CodecMapper/issues</a> and it will be added with\nthe next version.</li>\n</ol>\n</div>\n<div id=\"source-code\">\n<h2>Source code</h2>\n<p>These codecs have been generated using CodecMapper, available from\n<a href=\"https://github.com/roskakori/CodecMapper\" rel=\"nofollow\">https://github.com/roskakori/CodecMapper</a>. Read the README in order to\nto build the ebcdic package from source.</p>\n<p>To add another 8 bit EBCDIC codec just extend the ant target <tt>ebcdic</tt> in\n<tt>build.xml</tt> using a line like:</p>\n<pre>&lt;arg value=\"cpXXX\" /&gt;\n</pre>\n<p>Replace <tt>XXX</tt> by the number of the 8 bit code page you want to include.</p>\n<p>Then run:</p>\n<pre>ant test\n</pre>\n<p>to build and test the distribution.</p>\n<p>The <tt>ebcdic/setup.py</tt> automatically includes the new encoding in the package\nand <tt>ebcdic/__init__.py</tt> registers it during <tt>import ebcdic</tt>, so no\nfurther steps are needed.</p>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<p>Version 1.1.1, 2019-08-09</p>\n<ul>\n<li><p>Moved license information from README to LICENSE (#5). This required the\ndistribution to change from sdist to wheel because apparently it is a\nmajor challenge to include a text file in a platform independent way (#11).</p>\n<p>Sadly this breaks compatibility with Python 2.6, 3.1, 3.2 and 3.3. If you\nstill need <tt>ebcdic</tt> with one of these Python versions, use\n<tt><span class=\"pre\">ebcdic-1.0.0</span></tt>.</p>\n<p>This took several attempts and intermediate releases that where broken in\ndifferent ways on different platforms. To prevent people from accidentally\ninstalling one of these broken releases they have been removed from PyPI.\nIf you still want to take a look at them, use the\n<a href=\"https://github.com/roskakori/CodecMapper/releases\" rel=\"nofollow\">respective tags</a>.</p>\n</li>\n</ul>\n<p>Version 1.0.0, 2019-06-06</p>\n<ul>\n<li>Changed development status to \u201cProduction/Stable\u201d.</li>\n<li>Added international code pages cp500ms and cp1148ms which are the Microsoft\ninterpretations of the respective IBM code pages. The only difference is\nthat 0x1f is mapped to 0x85 (\u201cnext line\u201d) instead of 0x0a (\u201cnew line\u201d).\nNote that codecs.cp500 included with the Python standard library also uses\nthe Microsoft interpretation (#4).</li>\n<li>Added Arabian bilingual code page 420.</li>\n<li>Added Baltic code page 1112.</li>\n<li>Added Cyrillic code page 1025.</li>\n<li>Added Eastern Europe code page 870.</li>\n<li>Added Estonian code pages 1122 and 1157.</li>\n<li>Added Greek code page 875.</li>\n<li>Added Farsi Bilingual code page 1097.</li>\n<li>Added Hebrew code page 424 and 803.</li>\n<li>Added Korean code page 833.</li>\n<li>Added Meahreb/French code page 425.</li>\n<li>Added Japanese (Katakana) code page 290.</li>\n<li>Added Thailand code page 838.</li>\n<li>Added Turkish code page 322.</li>\n<li>Added Ukraine code page 1123.</li>\n<li>Added Python 3.5 to 3.8 as supported version.</li>\n<li>Improved PEP8 conformance of generated codecs.</li>\n</ul>\n<p>Version 0.7, 2014-11-17</p>\n<ul>\n<li>Clarified which codecs are already part of the standard library and that\nthese codecs overrule the <tt>ebcdic</tt> package. Also added a function\n<tt>ebcdic.ignored_codec_names()</tt> that returns the name of the EBCDIC codecs\nprovided by other means. To obtain access to <tt>ebcdic</tt> codecs overruled by\nthe standard library, use <tt>ebcdic.lookup()</tt>.</li>\n<li>Cleaned up (PEP8, __all__, typos, \u2026).</li>\n</ul>\n<p>Version 0.6, 2014-11-15</p>\n<ul>\n<li>Added support for Python 2.6+ and 3.1+ (#1).</li>\n<li>Included a modified version of <tt>gencodec.py</tt> that still builds maps\ninstead of tables so the generated codecs work with Python versions earlier\nthan 3.3. It also does a <cite>from __future__ import unicode_literals</cite> so the\ncodecs even work with Python 2.6+ using the same source code. As a side\neffect, this simplifies building the codecs because it removes the the need\nfor a local copy of the cpython source code.</li>\n</ul>\n<p>Version 0.5, 2014-11-13</p>\n<ul>\n<li>Initial public release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5652880, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "cdc734b16f368e1203c864ed00c1317c", "sha256": "57a3e15e6764231df6561d5eb97cdb02523febb01a61e7c1649cc32a0142fe8b"}, "downloads": -1, "filename": "ebcdic-0.5.0.zip", "has_sig": false, "md5_digest": "cdc734b16f368e1203c864ed00c1317c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77280, "upload_time": "2014-11-13T22:30:37", "upload_time_iso_8601": "2014-11-13T22:30:37.590231Z", "url": "https://files.pythonhosted.org/packages/21/50/90f9b57e05608aa50f80fe6e564095ebfa43b432ad946bea51ad486abfda/ebcdic-0.5.0.zip", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "0a686a56f617730bb001abc2e9545714", "sha256": "0e68f5005b5a23a9ee78b68b4c21518fefd9f46ebb7ce6430bfabcf11d882dbc"}, "downloads": -1, "filename": "ebcdic-0.6.0.zip", "has_sig": false, "md5_digest": "0a686a56f617730bb001abc2e9545714", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78788, "upload_time": "2014-11-15T12:07:37", "upload_time_iso_8601": "2014-11-15T12:07:37.764128Z", "url": "https://files.pythonhosted.org/packages/80/09/27c2683e80a1691a917b3929ffb4caad795c1360f81aeb5e44d90cfa0162/ebcdic-0.6.0.zip", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "e23ec651e19b0e9aecbbe560a80b7382", "sha256": "55af4888aaf82872c98a9f16f8f28da94d0d54d05e8359c38249325451e2c75b"}, "downloads": -1, "filename": "ebcdic-0.7.0.zip", "has_sig": false, "md5_digest": "e23ec651e19b0e9aecbbe560a80b7382", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84309, "upload_time": "2014-11-16T23:45:04", "upload_time_iso_8601": "2014-11-16T23:45:04.725012Z", "url": "https://files.pythonhosted.org/packages/cf/f5/3fb30da58ce7b075c26de07b0ffa0ff9d4af5551800f6512b9841af91db3/ebcdic-0.7.0.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2f0ec1cf78957de78266c6a5db53b989", "sha256": "375db9c650c84af5dc51ef80e0bc2db2d7c40c5421b12335f78bba8f5acf289e"}, "downloads": -1, "filename": "ebcdic-1.0.0.zip", "has_sig": false, "md5_digest": "2f0ec1cf78957de78266c6a5db53b989", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137119, "upload_time": "2019-06-05T22:55:18", "upload_time_iso_8601": "2019-06-05T22:55:18.053188Z", "url": "https://files.pythonhosted.org/packages/f0/a9/a3e2aa891c44388cd07cbd7e7983ed7b82d8d2ba5984a0c02e1a44856f28/ebcdic-1.0.0.zip", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "68ae042f2c36ab2a4f9c664a657a6478", "sha256": "33b4cb729bc2d0bf46cc1847b0e5946897cb8d3f53520c5b9aa5fa98d7e735f1"}, "downloads": -1, "filename": "ebcdic-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "68ae042f2c36ab2a4f9c664a657a6478", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 128537, "upload_time": "2019-08-09T00:54:35", "upload_time_iso_8601": "2019-08-09T00:54:35.544455Z", "url": "https://files.pythonhosted.org/packages/0d/2f/633031205333bee5f9f93761af8268746aa75f38754823aabb8570eb245b/ebcdic-1.1.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "68ae042f2c36ab2a4f9c664a657a6478", "sha256": "33b4cb729bc2d0bf46cc1847b0e5946897cb8d3f53520c5b9aa5fa98d7e735f1"}, "downloads": -1, "filename": "ebcdic-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "68ae042f2c36ab2a4f9c664a657a6478", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 128537, "upload_time": "2019-08-09T00:54:35", "upload_time_iso_8601": "2019-08-09T00:54:35.544455Z", "url": "https://files.pythonhosted.org/packages/0d/2f/633031205333bee5f9f93761af8268746aa75f38754823aabb8570eb245b/ebcdic-1.1.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:48:10 2020"}