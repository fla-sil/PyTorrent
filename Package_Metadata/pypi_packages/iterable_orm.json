{"info": {"author": "Said Ali", "author_email": "said.ali@msn.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "Iterable_orm\n============\n\n.. image:: https://img.shields.io/pypi/v/iterable_orm.svg\n    :target: https://pypi.python.org/pypi/iterable_orm\n    :alt: Latest PyPI version\n\n.. image:: https://travis-ci.org/Said007/iterable_orm.svg?branch=master\n   :target: https://travis-ci.org/Said007/iterable_orm\n   :alt: Latest Travis CI build status\n\n\nIterable_orm allows you to filter, exclude and sort data using similer API provided by Django ORM. The data needs to be a list of objects or dictionary. Python 2 & 3 is supported.\n\nIterable_orm gives you the following API\n\nfilter - Returns a new list of objects or dictionaries that match the given lookup parameters\n\nexclude - Returns a new list of objects or dictionaries that do not match the given lookup parameters\n\nget - Returns a single object or dictionary if there's two matches returns an exception \n\norder_by - Returns a list ordered objects or dictionaries\n\nfirst - Returns the first object or dictionary of filtered or exlcude data\n\nlast - Returns the first object or dictionary of filtered or exlcude data\n\ncount - Returns a lenth of filtered or exlcude or dictionaries\n\n*Please note that Iterable_orm does not support Q like objects offered by Django ORM, but offers a way around by passing anonymous function to filter or exclude function e.g manager.filter(age=lambda x: x >= 20 and x <= 30)*\n\n\nBasic Usage\n-----------\n\nPass a list of objects or dictionary to Queryset\n\n.. code:: python\n\n    from iterable_orm import QuerySet\n    Accounts = [ A list of account objects that have attrubtes such as name, email, age, gender ect ]\n    manager = Queryset(Accounts)\n\n\nFiltering and Excluding\n-----------------------\n\nYou can filter and exclude data by value or lookups, such as gt, gte, lt, lte, startswith, istartswith, endswith, contains, icontains, value_in, value_not_in, value_range, date_range(expects a datetime object) or anonymous function.\n\niterable_orm also allows you to filter related objects using the standard double-underscore notation to separate related fields, e.g manager.filter(parent__name='John'), this filters by parent.child == 'John'.\n\nAll filtering and exlcuding are lazy so you can construct as many filtering as you like and its only evaluated on iterating, calling count, first, last and order_by. \n\nBelow are code examples of filtering and excluding, \n\n.. code:: python\n\n    from iterable_orm import QuerySet\n    Accounts = [A list of account objects that have attrubtes such as name, email, age, gender ect ]\n    manager = Queryset(Accounts)\n\n    # Filter accounts with age greater than 25 and exclude if gender is male\n    data = manager.filter(age__gt=20).exclude(gender='male')\n    \n    # Filter using lamda  \n    data = manager.filter(age=lambda x: x >= 20 and x <= 30).exclude(gender='male')\n\n    # Filter accounts with the name starting with letter 's' and gender is female\n    data = manager.filter(name__istartswith='s').exclude(gender='female')\n    \n   # Filter accounts who have registred from 2014 till 2016 of current date and who are a female\n    data = manager.filter(registered__date_range=(datetime.today().replace(year=2014), datetime.today().replace(year=2016))).exclude(gender='female')\n\n   # Filter accounts who have registred from 01-01-2015 till 2016 and who are a female if date is string object\n    data = manager.filter(registered__date_range=('01-01-2015', '01-01-2016')).exclude(gender='female')\n\n\nFiltering\n---------\n\nYou can filter data by value or lookups, such as gt, gte ect.\n\nBelow are code examples of filtering, \n\n.. code:: python\n\n    from iterable_orm import QuerySet\n    Accounts = [A list of account objects that have attrubtes such as name, email, age, gender ect ]\n    manager = Queryset(Accounts)\n\n    # Filter accounts with age greater that 25 \n    data = manager.filter(age__gt=20)\n\n    # Filter accounts with age less that 25 and who are a male\n    data = manager.filter(age__lt=20, gender='male')\n\n    # Get number of accounts with age 20 and who are a female\n    data = manager.filter(age__gt=20, gender='female').count()\n    \n    # Filter accounts with name starting with letter 's'\n    data = manager.filter(name__istartswith='s')\n    \n   # Filter accounts who have registred from 01-01-2015 till 2016\n    data = manager.filter(registered__date_range=('01-01-2015', '01-01-2016')) \n    \n   # Filter accounts who have friends who are a male\n    data = manager.filter(friends__gender='male')\n    \n   # Filter accounts with date range\n    data = manager.filter(registered__value_range=('2015-11-15', '2015-11-16')\n\n   # chain filter e.g\n    data = manager.filter(name__istartswith='s').filter(gender='male')\n\n\nExcluding\n---------\n\nYou can Exclude data by value or lookups such as gt, gte ect.\nBelow are code examples of exlcude function:\n\n.. code:: python\n\n    from iterable_orm import QuerySet\n    Accounts = [A list of account objects that have attrubtes such as name, email, age, gender ect ]\n    manager = Queryset(Accounts)\n\n    # Exclude accounts with age greater that 25\n    data = manager.exclude(age__gt=20)\n\n    # Exclude accounts with age less then 25 and who are a male\n    data = manager.exclude(age__lt=20, gender='male')\n\n    # Exclude accounts with name starting with letter 's'\n    data = manager.filter(name__istartswith='s')\n    \n   # Exclude accounts who have registred from 01-01-2015 till 2016\n    data = manager.exclude(registered__date_range=('01-01-2015', '01-01-2016'))\n    \n   # Exclude accounts who have friends who are a male\n    data = manager.filter(friends__gender='male')\n\n   # Chain exclude e.g.\n    data = manager.exclude(name__istartswith='s').exclude(gender='male')\n\n\nOrdering\n--------\n\nYou can order data by any value of object or dictionary :\n\n.. code:: python\n\n    from iterable_orm import QuerySet\n    Accounts = [A list of account objects that have attrubtes such as name, email, age, gender ect ]\n    manager = Queryset(Accounts)\n\n    # Order by name \n    data = manager.order_by('name)\n\n    # Order name by descending\n    data = manager.order_by('-name)\n    \n    # Ordering by related lookup of friends name\n    data = manager.order_by('friends__name')\n    \n    # Ordering by related lookup of friends name descending\n    data = manager.order_by('-friends__name')\n\n\nUnit Test\n---------\n\nUnit test inlcudes full example usage of the API\n\nTo tun unit test run:\n\n.. code:: python\n\n    python test.py\n\n\nInstallation\n============\n\nInstall the latest release with:\n\n::\n\n    pip install iterable_orm\n\n\nCompatibility\n-------------\n\nPython 2.7, 3.0 to 3.5", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Said007/iterable_orm", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "iterable_orm", "package_url": "https://pypi.org/project/iterable_orm/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/iterable_orm/", "project_urls": {"Homepage": "https://github.com/Said007/iterable_orm"}, "release_url": "https://pypi.org/project/iterable_orm/0.4/", "requires_dist": null, "requires_python": "", "summary": "Query API similar to Django for Python objects and dictionaries", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"iterable-orm\">\n<h2>Iterable_orm</h2>\n<a href=\"https://pypi.python.org/pypi/iterable_orm\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f35dee37d019654102e25235562b9e760e094dd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6974657261626c655f6f726d2e737667\"></a>\n<a href=\"https://travis-ci.org/Said007/iterable_orm\" rel=\"nofollow\"><img alt=\"Latest Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4189471aab3cb06cc020af01cbfe503965003f1e/68747470733a2f2f7472617669732d63692e6f72672f536169643030372f6974657261626c655f6f726d2e7376673f6272616e63683d6d6173746572\"></a>\n<p>Iterable_orm allows you to filter, exclude and sort data using similer API provided by Django ORM. The data needs to be a list of objects or dictionary. Python 2 &amp; 3 is supported.</p>\n<p>Iterable_orm gives you the following API</p>\n<p>filter - Returns a new list of objects or dictionaries that match the given lookup parameters</p>\n<p>exclude - Returns a new list of objects or dictionaries that do not match the given lookup parameters</p>\n<p>get - Returns a single object or dictionary if there\u2019s two matches returns an exception</p>\n<p>order_by - Returns a list ordered objects or dictionaries</p>\n<p>first - Returns the first object or dictionary of filtered or exlcude data</p>\n<p>last - Returns the first object or dictionary of filtered or exlcude data</p>\n<p>count - Returns a lenth of filtered or exlcude or dictionaries</p>\n<p><em>Please note that Iterable_orm does not support Q like objects offered by Django ORM, but offers a way around by passing anonymous function to filter or exclude function e.g manager.filter(age=lambda x: x &gt;= 20 and x &lt;= 30)</em></p>\n<div id=\"basic-usage\">\n<h3>Basic Usage</h3>\n<p>Pass a list of objects or dictionary to Queryset</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">iterable_orm</span> <span class=\"kn\">import</span> <span class=\"n\">QuerySet</span>\n<span class=\"n\">Accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">A</span> <span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">account</span> <span class=\"n\">objects</span> <span class=\"n\">that</span> <span class=\"n\">have</span> <span class=\"n\">attrubtes</span> <span class=\"n\">such</span> <span class=\"k\">as</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span> <span class=\"n\">ect</span> <span class=\"p\">]</span>\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">Queryset</span><span class=\"p\">(</span><span class=\"n\">Accounts</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"filtering-and-excluding\">\n<h3>Filtering and Excluding</h3>\n<p>You can filter and exclude data by value or lookups, such as gt, gte, lt, lte, startswith, istartswith, endswith, contains, icontains, value_in, value_not_in, value_range, date_range(expects a datetime object) or anonymous function.</p>\n<p>iterable_orm also allows you to filter related objects using the standard double-underscore notation to separate related fields, e.g manager.filter(parent__name=\u2019John\u2019), this filters by parent.child == \u2018John\u2019.</p>\n<p>All filtering and exlcuding are lazy so you can construct as many filtering as you like and its only evaluated on iterating, calling count, first, last and order_by.</p>\n<p>Below are code examples of filtering and excluding,</p>\n<pre> <span class=\"kn\">from</span> <span class=\"nn\">iterable_orm</span> <span class=\"kn\">import</span> <span class=\"n\">QuerySet</span>\n <span class=\"n\">Accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">A</span> <span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">account</span> <span class=\"n\">objects</span> <span class=\"n\">that</span> <span class=\"n\">have</span> <span class=\"n\">attrubtes</span> <span class=\"n\">such</span> <span class=\"k\">as</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span> <span class=\"n\">ect</span> <span class=\"p\">]</span>\n <span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">Queryset</span><span class=\"p\">(</span><span class=\"n\">Accounts</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># Filter accounts with age greater than 25 and exclude if gender is male</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">age__gt</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'male'</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># Filter using lamda</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">age</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">20</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'male'</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># Filter accounts with the name starting with letter 's' and gender is female</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__istartswith</span><span class=\"o\">=</span><span class=\"s1\">'s'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'female'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Filter accounts who have registred from 2014 till 2016 of current date and who are a female</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">registered__date_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">2014</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">2016</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'female'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Filter accounts who have registred from 01-01-2015 till 2016 and who are a female if date is string object</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">registered__date_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'01-01-2015'</span><span class=\"p\">,</span> <span class=\"s1\">'01-01-2016'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'female'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"filtering\">\n<h3>Filtering</h3>\n<p>You can filter data by value or lookups, such as gt, gte ect.</p>\n<p>Below are code examples of filtering,</p>\n<pre> <span class=\"kn\">from</span> <span class=\"nn\">iterable_orm</span> <span class=\"kn\">import</span> <span class=\"n\">QuerySet</span>\n <span class=\"n\">Accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">A</span> <span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">account</span> <span class=\"n\">objects</span> <span class=\"n\">that</span> <span class=\"n\">have</span> <span class=\"n\">attrubtes</span> <span class=\"n\">such</span> <span class=\"k\">as</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span> <span class=\"n\">ect</span> <span class=\"p\">]</span>\n <span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">Queryset</span><span class=\"p\">(</span><span class=\"n\">Accounts</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># Filter accounts with age greater that 25</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">age__gt</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># Filter accounts with age less that 25 and who are a male</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">age__lt</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'male'</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># Get number of accounts with age 20 and who are a female</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">age__gt</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'female'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n <span class=\"c1\"># Filter accounts with name starting with letter 's'</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__istartswith</span><span class=\"o\">=</span><span class=\"s1\">'s'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Filter accounts who have registred from 01-01-2015 till 2016</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">registered__date_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'01-01-2015'</span><span class=\"p\">,</span> <span class=\"s1\">'01-01-2016'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Filter accounts who have friends who are a male</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">friends__gender</span><span class=\"o\">=</span><span class=\"s1\">'male'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Filter accounts with date range</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">registered__value_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'2015-11-15'</span><span class=\"p\">,</span> <span class=\"s1\">'2015-11-16'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># chain filter e.g</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__istartswith</span><span class=\"o\">=</span><span class=\"s1\">'s'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'male'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"excluding\">\n<h3>Excluding</h3>\n<p>You can Exclude data by value or lookups such as gt, gte ect.\nBelow are code examples of exlcude function:</p>\n<pre> <span class=\"kn\">from</span> <span class=\"nn\">iterable_orm</span> <span class=\"kn\">import</span> <span class=\"n\">QuerySet</span>\n <span class=\"n\">Accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">A</span> <span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">account</span> <span class=\"n\">objects</span> <span class=\"n\">that</span> <span class=\"n\">have</span> <span class=\"n\">attrubtes</span> <span class=\"n\">such</span> <span class=\"k\">as</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span> <span class=\"n\">ect</span> <span class=\"p\">]</span>\n <span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">Queryset</span><span class=\"p\">(</span><span class=\"n\">Accounts</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># Exclude accounts with age greater that 25</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">age__gt</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># Exclude accounts with age less then 25 and who are a male</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">age__lt</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'male'</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># Exclude accounts with name starting with letter 's'</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__istartswith</span><span class=\"o\">=</span><span class=\"s1\">'s'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Exclude accounts who have registred from 01-01-2015 till 2016</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">registered__date_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'01-01-2015'</span><span class=\"p\">,</span> <span class=\"s1\">'01-01-2016'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Exclude accounts who have friends who are a male</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">friends__gender</span><span class=\"o\">=</span><span class=\"s1\">'male'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Chain exclude e.g.</span>\n <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">name__istartswith</span><span class=\"o\">=</span><span class=\"s1\">'s'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'male'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"ordering\">\n<h3>Ordering</h3>\n<p>You can order data by any value of object or dictionary :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">iterable_orm</span> <span class=\"kn\">import</span> <span class=\"n\">QuerySet</span>\n<span class=\"n\">Accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">A</span> <span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">account</span> <span class=\"n\">objects</span> <span class=\"n\">that</span> <span class=\"n\">have</span> <span class=\"n\">attrubtes</span> <span class=\"n\">such</span> <span class=\"k\">as</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">gender</span> <span class=\"n\">ect</span> <span class=\"p\">]</span>\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">Queryset</span><span class=\"p\">(</span><span class=\"n\">Accounts</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Order by name</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'name)</span>\n\n<span class=\"c1\"># Order name by descending</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-name)</span>\n\n<span class=\"c1\"># Ordering by related lookup of friends name</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'friends__name'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Ordering by related lookup of friends name descending</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-friends__name'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"unit-test\">\n<h3>Unit Test</h3>\n<p>Unit test inlcudes full example usage of the API</p>\n<p>To tun unit test run:</p>\n<pre><span class=\"n\">python</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the latest release with:</p>\n<pre>pip install iterable_orm\n</pre>\n<div id=\"compatibility\">\n<h3>Compatibility</h3>\n<p>Python 2.7, 3.0 to 3.5</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2427217, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d955b3fbe2a3c2b12216bc29195c8927", "sha256": "6c2ef6f43bcda01c56ad3d58deca3760c1f2f96c1c037abd6a8ef9b83a2842b7"}, "downloads": -1, "filename": "iterable_orm-0.1.tar.gz", "has_sig": false, "md5_digest": "d955b3fbe2a3c2b12216bc29195c8927", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6592, "upload_time": "2016-05-24T22:25:38", "upload_time_iso_8601": "2016-05-24T22:25:38.141423Z", "url": "https://files.pythonhosted.org/packages/85/f5/d0329ab167dac376171bfdd1b1087e1a467a9671e43c5d827e10b24b90b6/iterable_orm-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "19b8b91c4841624e162f78750c9e38aa", "sha256": "a1abe5c38fa03504e863ea4391624e7941cc140b6842a8117c5d155d07d93074"}, "downloads": -1, "filename": "iterable_orm-0.2.tar.gz", "has_sig": false, "md5_digest": "19b8b91c4841624e162f78750c9e38aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6594, "upload_time": "2016-05-24T22:36:15", "upload_time_iso_8601": "2016-05-24T22:36:15.544311Z", "url": "https://files.pythonhosted.org/packages/93/de/fff0bc530159875bac0836e6412f7a52466c59dc7b12a14ab179504b949e/iterable_orm-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "16a9d9a0537b7875edd2f09038b052bc", "sha256": "4e5031ae638dad9cc30658984700fbd2af07847b1f9adc8f79d59c0682a62872"}, "downloads": -1, "filename": "iterable_orm-0.3.tar.gz", "has_sig": false, "md5_digest": "16a9d9a0537b7875edd2f09038b052bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6666, "upload_time": "2016-05-26T09:10:52", "upload_time_iso_8601": "2016-05-26T09:10:52.302374Z", "url": "https://files.pythonhosted.org/packages/03/ea/2b16110af6600a48197def8723aab99983731bc44c64600554e8603a1aba/iterable_orm-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "e923402177fc3420ea5c597409dc9c7f", "sha256": "32c28f9a4b1526c9e1b4cb23c65a85428fde5ba117eac7fc8394ec5d0a9b411f"}, "downloads": -1, "filename": "iterable_orm-0.4.tar.gz", "has_sig": false, "md5_digest": "e923402177fc3420ea5c597409dc9c7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6683, "upload_time": "2016-10-27T21:26:01", "upload_time_iso_8601": "2016-10-27T21:26:01.241569Z", "url": "https://files.pythonhosted.org/packages/88/da/828f2170c170b5bd3f338fa2bf49dc8a962039970c5ed583a0207cd6bfdb/iterable_orm-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e923402177fc3420ea5c597409dc9c7f", "sha256": "32c28f9a4b1526c9e1b4cb23c65a85428fde5ba117eac7fc8394ec5d0a9b411f"}, "downloads": -1, "filename": "iterable_orm-0.4.tar.gz", "has_sig": false, "md5_digest": "e923402177fc3420ea5c597409dc9c7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6683, "upload_time": "2016-10-27T21:26:01", "upload_time_iso_8601": "2016-10-27T21:26:01.241569Z", "url": "https://files.pythonhosted.org/packages/88/da/828f2170c170b5bd3f338fa2bf49dc8a962039970c5ed583a0207cd6bfdb/iterable_orm-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:49 2020"}