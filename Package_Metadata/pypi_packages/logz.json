{"info": {"author": "Han Zhichao", "author_email": "superhin@126.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7"], "description": "# logz\neasy use for log with extra infos\n\n## Features\n\n- very easy to use\n- log file name change from date\n- DayRottingLogger\n- safe extra fields\n- log multi vars and not just str\n- multiline log and indent for json\n- debug as default level\n\n## Install\n```\n$ pip install logz\n```\n\n## Use\n### Simple Use\n\n```python\nfrom logz import log\nlog.debug('debug msg')\nlog.info('info msg')\nlog.warning('warning msg')\nlog.error('error msg')\nlog.critical('critical mst')\ntry:\n    assert 0\nexcept AttributeError as ex:\n    log.exception(ex)\n```\noutput:\n```\n2019-12-12 22:39:43,584 DEBUG debug msg\n2019-12-12 22:39:43,584 INFO info msg\n2019-12-12 22:39:43,584 WARNING warning msg\n2019-12-12 22:39:43,585 ERROR error msg\n2019-12-12 22:39:43,585 CRITICAL critical mst\nTraceback (most recent call last):\n  File \"/Users/apple/Documents/Projects/logz/logz/__init__.py\", line 199, in <module>\n    assert 0\nAssertionError\n```\n\n### log multi vars one time\n```\na = 'hello'\nb = 1\nc = [2]\nd = {'name': 'kevin'}\nlog.info(a,b,c,d)\n```\noutput:\n```\n2019-12-12 22:40:20,221 INFO hello 1 [2] {'name': 'kevin'}\n```\n\n> Note: Change args form supporting %s format to supporting multi vars\nif you want to use something like:\n```\nimport logging\nlogging.info('name=%s,age=%d', 'kevin',18)\n```\nyou neet use like below:\n```\nform logz import log\nlog.info('name=%s,age=%d' % ('kevin',18))\n```\noutput:\n```\n2019-12-12 22:41:58,024 INFO name=kevin,age=18\n```\n\n### log to file\n```\nlog.file='logs/project.log'\n```\n> Note: logs directory must be exists\n\nBy default it's a rotting file and maxBytes=10240 and backUps=5\n\n### log to a file with name changes with date\n```\nlog.file='logs/%Y-%m-%d.log'\n```\nAnd it's a day rotting file\n\n### change log level\n```\nlog.level = 'info'\nlog.level = 20\nlog.debug('not show')\nlog.info('show info')\n```\noutput:\n```\n2019-12-12 22:43:24,479 INFO show info\n```\n\n> level string is not case sensitive\n\n### change log format\n```\nlog.format = '%(asctime)s %(levelname)s %(name)s %(message)s'\n```\n\n### with extra fields\n```\nlog.format = '%(asctime)s %(levelname)s %(user)s %(message)s'\nlog.info('hello with no user')\nlog.info('hello with kevin', extra={'user': 'kevin'})\n```\noutput:\n```\n2019-12-12 22:45:18,604 INFO None hello with no user\n2019-12-12 22:45:18,604 INFO kevin hello with kevin\n```\n\n### multiline and indent for dict\n```\nlog.info({'foo': 'bar'}, indent=2)\n```\n\noutput:\n```\n2019-12-09 19:30:16,419 DEBUG log None ->\n{\n  \"foo\": \"bar\"\n}\n```\n\n## todo\n- log file to config maxBytes or else\n- log to html\n- log to email\n- log to db\n- log diff\n- log assert\n- log print\n- log to server using websocket\n- more decorators such as @explain @exception @timeit @email\n- support verbosity", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hanzhichao/logz", "keywords": "logz,extra,log", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "logz", "package_url": "https://pypi.org/project/logz/", "platform": "", "project_url": "https://pypi.org/project/logz/", "project_urls": {"Homepage": "https://github.com/hanzhichao/logz"}, "release_url": "https://pypi.org/project/logz/0.13/", "requires_dist": null, "requires_python": "", "summary": "easy log use for extra infos", "version": "0.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>logz</h1>\n<p>easy use for log with extra infos</p>\n<h2>Features</h2>\n<ul>\n<li>very easy to use</li>\n<li>log file name change from date</li>\n<li>DayRottingLogger</li>\n<li>safe extra fields</li>\n<li>log multi vars and not just str</li>\n<li>multiline log and indent for json</li>\n<li>debug as default level</li>\n</ul>\n<h2>Install</h2>\n<pre><code>$ pip install logz\n</code></pre>\n<h2>Use</h2>\n<h3>Simple Use</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">logz</span> <span class=\"kn\">import</span> <span class=\"n\">log</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'debug msg'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'info msg'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'warning msg'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'error msg'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s1\">'critical mst'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"mi\">0</span>\n<span class=\"k\">except</span> <span class=\"ne\">AttributeError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n</pre>\n<p>output:</p>\n<pre><code>2019-12-12 22:39:43,584 DEBUG debug msg\n2019-12-12 22:39:43,584 INFO info msg\n2019-12-12 22:39:43,584 WARNING warning msg\n2019-12-12 22:39:43,585 ERROR error msg\n2019-12-12 22:39:43,585 CRITICAL critical mst\nTraceback (most recent call last):\n  File \"/Users/apple/Documents/Projects/logz/logz/__init__.py\", line 199, in &lt;module&gt;\n    assert 0\nAssertionError\n</code></pre>\n<h3>log multi vars one time</h3>\n<pre><code>a = 'hello'\nb = 1\nc = [2]\nd = {'name': 'kevin'}\nlog.info(a,b,c,d)\n</code></pre>\n<p>output:</p>\n<pre><code>2019-12-12 22:40:20,221 INFO hello 1 [2] {'name': 'kevin'}\n</code></pre>\n<blockquote>\n<p>Note: Change args form supporting %s format to supporting multi vars\nif you want to use something like:</p>\n</blockquote>\n<pre><code>import logging\nlogging.info('name=%s,age=%d', 'kevin',18)\n</code></pre>\n<p>you neet use like below:</p>\n<pre><code>form logz import log\nlog.info('name=%s,age=%d' % ('kevin',18))\n</code></pre>\n<p>output:</p>\n<pre><code>2019-12-12 22:41:58,024 INFO name=kevin,age=18\n</code></pre>\n<h3>log to file</h3>\n<pre><code>log.file='logs/project.log'\n</code></pre>\n<blockquote>\n<p>Note: logs directory must be exists</p>\n</blockquote>\n<p>By default it's a rotting file and maxBytes=10240 and backUps=5</p>\n<h3>log to a file with name changes with date</h3>\n<pre><code>log.file='logs/%Y-%m-%d.log'\n</code></pre>\n<p>And it's a day rotting file</p>\n<h3>change log level</h3>\n<pre><code>log.level = 'info'\nlog.level = 20\nlog.debug('not show')\nlog.info('show info')\n</code></pre>\n<p>output:</p>\n<pre><code>2019-12-12 22:43:24,479 INFO show info\n</code></pre>\n<blockquote>\n<p>level string is not case sensitive</p>\n</blockquote>\n<h3>change log format</h3>\n<pre><code>log.format = '%(asctime)s %(levelname)s %(name)s %(message)s'\n</code></pre>\n<h3>with extra fields</h3>\n<pre><code>log.format = '%(asctime)s %(levelname)s %(user)s %(message)s'\nlog.info('hello with no user')\nlog.info('hello with kevin', extra={'user': 'kevin'})\n</code></pre>\n<p>output:</p>\n<pre><code>2019-12-12 22:45:18,604 INFO None hello with no user\n2019-12-12 22:45:18,604 INFO kevin hello with kevin\n</code></pre>\n<h3>multiline and indent for dict</h3>\n<pre><code>log.info({'foo': 'bar'}, indent=2)\n</code></pre>\n<p>output:</p>\n<pre><code>2019-12-09 19:30:16,419 DEBUG log None -&gt;\n{\n  \"foo\": \"bar\"\n}\n</code></pre>\n<h2>todo</h2>\n<ul>\n<li>log file to config maxBytes or else</li>\n<li>log to html</li>\n<li>log to email</li>\n<li>log to db</li>\n<li>log diff</li>\n<li>log assert</li>\n<li>log print</li>\n<li>log to server using websocket</li>\n<li>more decorators such as @explain @exception @timeit @email</li>\n<li>support verbosity</li>\n</ul>\n\n          </div>"}, "last_serial": 6286950, "releases": {"0.11": [{"comment_text": "", "digests": {"md5": "8fddcc58b82b00e44a30ff4473c66729", "sha256": "3b2e8099455804cb87168330aea37d4787f1584f2d9f74903a87e42abb1b8eb1"}, "downloads": -1, "filename": "logz-0.11.tar.gz", "has_sig": false, "md5_digest": "8fddcc58b82b00e44a30ff4473c66729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3940, "upload_time": "2019-12-09T12:20:48", "upload_time_iso_8601": "2019-12-09T12:20:48.328476Z", "url": "https://files.pythonhosted.org/packages/3a/a6/46831aca3d9e7cedaf3575d30b28aba904517538c333bd7fef042c34fe8f/logz-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "a4fa67d2968f504c59f21c3daffd2e67", "sha256": "06fbf574882e9488f972264fbd1d93674d109ab2f182bd2b3a5481bc98fe65ce"}, "downloads": -1, "filename": "logz-0.12.tar.gz", "has_sig": false, "md5_digest": "a4fa67d2968f504c59f21c3daffd2e67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3936, "upload_time": "2019-12-09T12:23:07", "upload_time_iso_8601": "2019-12-09T12:23:07.332503Z", "url": "https://files.pythonhosted.org/packages/ef/89/f603af6e7f9a8ac43a1b37e6ed2232009c413ba110c8fa7f0c4db7abdbfa/logz-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "6dacf802ccefe7a1f863224ade649e37", "sha256": "f3c22a40299407dd90cbd92ec427b9558a893b98cc4e63638b567fff9938f096"}, "downloads": -1, "filename": "logz-0.13.tar.gz", "has_sig": false, "md5_digest": "6dacf802ccefe7a1f863224ade649e37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5131, "upload_time": "2019-12-12T14:53:36", "upload_time_iso_8601": "2019-12-12T14:53:36.537635Z", "url": "https://files.pythonhosted.org/packages/13/d6/37d1ea04d0ed06f83b7a4c8c7f97296286eab021ffa67737ff7fdbd7e0ac/logz-0.13.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6dacf802ccefe7a1f863224ade649e37", "sha256": "f3c22a40299407dd90cbd92ec427b9558a893b98cc4e63638b567fff9938f096"}, "downloads": -1, "filename": "logz-0.13.tar.gz", "has_sig": false, "md5_digest": "6dacf802ccefe7a1f863224ade649e37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5131, "upload_time": "2019-12-12T14:53:36", "upload_time_iso_8601": "2019-12-12T14:53:36.537635Z", "url": "https://files.pythonhosted.org/packages/13/d6/37d1ea04d0ed06f83b7a4c8c7f97296286eab021ffa67737ff7fdbd7e0ac/logz-0.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:02 2020"}