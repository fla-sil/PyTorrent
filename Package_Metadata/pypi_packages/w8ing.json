{"info": {"author": "Imran Mumtaz", "author_email": "iomumtaz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Utilities"], "description": "```\n\u2588\u2588\u2557    \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \n\u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \n\u2588\u2588\u2551 \u2588\u2557 \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2588\u2557\n\u2588\u2588\u2551\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\n\u255a\u2588\u2588\u2588\u2554\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\n \u255a\u2550\u2550\u255d\u255a\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \n```\n\n[![Build Status](https://travis-ci.com/ImXron/w8ing.svg?branch=master)](https://travis-ci.com/ImXron/w8ing)\n[![codecov](https://codecov.io/gh/ImXron/w8ing/branch/master/graph/badge.svg)](https://codecov.io/gh/ImXron/w8ing)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n![License: MIT](https://img.shields.io/badge/License-MIT-purple.svg)\n[![image](https://img.shields.io/pypi/v/w8ing.svg)](https://python.org/pypi/w8ing)\n[![image](https://img.shields.io/pypi/pyversions/w8ing.svg)](https://python.org/pypi/w8ing)\n___\n\n**_W8ing_** is (as the great Kenneth Reitz would say) waiting and or polling **_for humans_**.\n\nGet it? The **_8_** replaces the **_ait_** in **_waiting_** :wink: :woman_shrugging:.\n\nLet **_W8ing_** help you nuke all your hard calls to `time.sleep()` and make your tests less flakey :metal:.\n___\n\n## Install\nInstall via pip (highly recommend installing within a [Pipenv](https://github.com/pypa/pipenv)):\n```\npip3 install w8ing\n```\n\n## Usages\n\nWait **_until_** some condition is true:\n```python\nfrom w8ing import wait\n\n# This example uses an imaginary function that doesn't immediately give us the value we want.\nresult = wait.until(lambda: get_cat_treats(8) == 8)\n\n# By default, this wait will return whether or not the condition was true or not.\nresult\nTrue\n```\n\nWait **_until_** an http request is valid:\n```python\nimport requests\nfrom w8ing import wait\n\n# You can even specify the timeout and retry delay.\nresponse = wait.until(lambda: requests.get(\"http://www.google.com\"), retry_time=1, timeout=15)\n\n# By default a successful response (codes 2XX) object is truthy.\nresponse\n<Response [200]>\n```\n\nWait **_until_** a serial device becomes available and catch any associated exceptions (for you hardware people):\n\n```python\nimport serial\nfrom w8ing import wait\n\n# If successful, you'll get a pyserial object back, otherwise you'll get None!\nserial_port = wait.until(\n    lambda: serial.Serial('/dev/ttyUSB0'), catch_exceptions=(SerialException,), retry_time=1, timeout=30\n)\n\n# If it doesn't open you can make a nice assert so your co-workers love you.\nassert serial_port, \"Unable to open serial port! Did you even plug it in??\"\n\n# Otherwise, continue!\nserial_port.read(10).decode()\n\"boots and cats\"\n```\n\nYou can also call another function each loop!\n```python\nfrom w8ing import wait\n\ncat_treats = []\n\n# The call_each_try function gets called each time the condition gets evaluated, \nresult = wait.until(lambda: len(cat_treats) > 8, call_each_try=lambda: cat_treats.append(\"treat\"), retry_time=0.5)\n\nresult\nTrue\n\n# The cat will be pleased, very pleased.\n```\n\n### But wait, there's more!\n\nWhat if you need to **_ensure_** that some condition remains true?? Got you covered fam:\n\n```python\nfrom w8ing import wait\n\ncat_nip = [\"cat nip\"] * 10\n\n# Set retry delay to 0 so we can evaluate the condition as fast as possible! \nresult = wait.ensure(lambda: len(cat_nip) > 5, call_each_try=lambda: cat_nip.pop(), retry_time=0, timeout=2)\n\nresult\nTrue\n\n# The cat will get extra intoxicated by this high quality cat nip, good job.\n```\n**Note:** Due to computing power and other operating system processes, it is possible that the **condition** could\n flicker to false and back to true before being able to catch it! \n\n## Contribute\nFeel free to open an issue and once you get a green light, submit a PR!\n\nAll PRs will receive respectful and constructive feedback.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/w8ing", "keywords": "waiting,polling,synchronization,wait until,test tools", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "w8ing", "package_url": "https://pypi.org/project/w8ing/", "platform": "", "project_url": "https://pypi.org/project/w8ing/", "project_urls": {"Homepage": "https://github.com/ImXron/w8ing", "Source": "https://github.com/ImXron/w8ing", "Tracker": "https://github.com/ImXron/w8ing/issues"}, "release_url": "https://pypi.org/project/w8ing/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Waiting, for humans.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre><code>\u2588\u2588\u2557    \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \n\u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \n\u2588\u2588\u2551 \u2588\u2557 \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2588\u2557\n\u2588\u2588\u2551\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\n\u255a\u2588\u2588\u2588\u2554\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\n \u255a\u2550\u2550\u255d\u255a\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \n</code></pre>\n<p><a href=\"https://travis-ci.com/ImXron/w8ing\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b48e8a089fec378b87b16dea000243245c58f631/68747470733a2f2f7472617669732d63692e636f6d2f496d58726f6e2f7738696e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/ImXron/w8ing\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/392a7ca84799f38569dba8df83fe59eaaf3ae6ac/68747470733a2f2f636f6465636f762e696f2f67682f496d58726f6e2f7738696e672f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a49f461fc8c1f6b9d30d1ab91e98210f92db2e6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d707572706c652e737667\">\n<a href=\"https://python.org/pypi/w8ing\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a7a9d57d306e205f00f122bb6f2b77a8275c03a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7738696e672e737667\"></a>\n<a href=\"https://python.org/pypi/w8ing\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c847823911b3381736e0a8bba0295d3867e881fc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7738696e672e737667\"></a></p>\n<hr>\n<p><strong><em>W8ing</em></strong> is (as the great Kenneth Reitz would say) waiting and or polling <strong><em>for humans</em></strong>.</p>\n<p>Get it? The <strong><em>8</em></strong> replaces the <strong><em>ait</em></strong> in <strong><em>waiting</em></strong> :wink: :woman_shrugging:.</p>\n<p>Let <strong><em>W8ing</em></strong> help you nuke all your hard calls to <code>time.sleep()</code> and make your tests less flakey :metal:.</p>\n<hr>\n<h2>Install</h2>\n<p>Install via pip (highly recommend installing within a <a href=\"https://github.com/pypa/pipenv\" rel=\"nofollow\">Pipenv</a>):</p>\n<pre><code>pip3 install w8ing\n</code></pre>\n<h2>Usages</h2>\n<p>Wait <strong><em>until</em></strong> some condition is true:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">w8ing</span> <span class=\"kn\">import</span> <span class=\"n\">wait</span>\n\n<span class=\"c1\"># This example uses an imaginary function that doesn't immediately give us the value we want.</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wait</span><span class=\"o\">.</span><span class=\"n\">until</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">get_cat_treats</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># By default, this wait will return whether or not the condition was true or not.</span>\n<span class=\"n\">result</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Wait <strong><em>until</em></strong> an http request is valid:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">w8ing</span> <span class=\"kn\">import</span> <span class=\"n\">wait</span>\n\n<span class=\"c1\"># You can even specify the timeout and retry delay.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">wait</span><span class=\"o\">.</span><span class=\"n\">until</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://www.google.com\"</span><span class=\"p\">),</span> <span class=\"n\">retry_time</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># By default a successful response (codes 2XX) object is truthy.</span>\n<span class=\"n\">response</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Response</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Wait <strong><em>until</em></strong> a serial device becomes available and catch any associated exceptions (for you hardware people):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">serial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">w8ing</span> <span class=\"kn\">import</span> <span class=\"n\">wait</span>\n\n<span class=\"c1\"># If successful, you'll get a pyserial object back, otherwise you'll get None!</span>\n<span class=\"n\">serial_port</span> <span class=\"o\">=</span> <span class=\"n\">wait</span><span class=\"o\">.</span><span class=\"n\">until</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">serial</span><span class=\"o\">.</span><span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"s1\">'/dev/ttyUSB0'</span><span class=\"p\">),</span> <span class=\"n\">catch_exceptions</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">SerialException</span><span class=\"p\">,),</span> <span class=\"n\">retry_time</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">30</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># If it doesn't open you can make a nice assert so your co-workers love you.</span>\n<span class=\"k\">assert</span> <span class=\"n\">serial_port</span><span class=\"p\">,</span> <span class=\"s2\">\"Unable to open serial port! Did you even plug it in??\"</span>\n\n<span class=\"c1\"># Otherwise, continue!</span>\n<span class=\"n\">serial_port</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n<span class=\"s2\">\"boots and cats\"</span>\n</pre>\n<p>You can also call another function each loop!</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">w8ing</span> <span class=\"kn\">import</span> <span class=\"n\">wait</span>\n\n<span class=\"n\">cat_treats</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># The call_each_try function gets called each time the condition gets evaluated, </span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wait</span><span class=\"o\">.</span><span class=\"n\">until</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cat_treats</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">call_each_try</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">cat_treats</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"treat\"</span><span class=\"p\">),</span> <span class=\"n\">retry_time</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span>\n<span class=\"kc\">True</span>\n\n<span class=\"c1\"># The cat will be pleased, very pleased.</span>\n</pre>\n<h3>But wait, there's more!</h3>\n<p>What if you need to <strong><em>ensure</em></strong> that some condition remains true?? Got you covered fam:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">w8ing</span> <span class=\"kn\">import</span> <span class=\"n\">wait</span>\n\n<span class=\"n\">cat_nip</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"cat nip\"</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># Set retry delay to 0 so we can evaluate the condition as fast as possible! </span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wait</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cat_nip</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">call_each_try</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">cat_nip</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(),</span> <span class=\"n\">retry_time</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span>\n<span class=\"kc\">True</span>\n\n<span class=\"c1\"># The cat will get extra intoxicated by this high quality cat nip, good job.</span>\n</pre>\n<p><strong>Note:</strong> Due to computing power and other operating system processes, it is possible that the <strong>condition</strong> could\nflicker to false and back to true before being able to catch it!</p>\n<h2>Contribute</h2>\n<p>Feel free to open an issue and once you get a green light, submit a PR!</p>\n<p>All PRs will receive respectful and constructive feedback.</p>\n\n          </div>"}, "last_serial": 7002238, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "43f7c72d527dca6e1a52ebc0d89f093c", "sha256": "4e9be7448fff4bc50f6f894d009bd03fdbc6db95bd2e65a4bed26a3af5d61d32"}, "downloads": -1, "filename": "w8ing-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "43f7c72d527dca6e1a52ebc0d89f093c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8574, "upload_time": "2019-11-03T23:58:58", "upload_time_iso_8601": "2019-11-03T23:58:58.514235Z", "url": "https://files.pythonhosted.org/packages/73/c5/141f2a023dd61364dd59c5c23b7906d63b8e14eddaaff2b3365b019c8706/w8ing-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edacf36d9819c666a10ade8e6f0ce01f", "sha256": "51af74b487ae3bd1dd2629f0f15407d5776a9b67a9c7cdff6f1fc246d452ea61"}, "downloads": -1, "filename": "w8ing-1.0.0.tar.gz", "has_sig": false, "md5_digest": "edacf36d9819c666a10ade8e6f0ce01f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5198, "upload_time": "2019-11-03T23:59:00", "upload_time_iso_8601": "2019-11-03T23:59:00.966026Z", "url": "https://files.pythonhosted.org/packages/ca/d1/cf393e781296d493e2faaa35c0b2ba28eab9580525cc1210252d79bf76ea/w8ing-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8ac959f6c51db339f7c005dfc7f4afa1", "sha256": "3daf662697a63d23fe0aae9c9c5bf29ce1e2814888debdddf3efea05883d5374"}, "downloads": -1, "filename": "w8ing-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8ac959f6c51db339f7c005dfc7f4afa1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8652, "upload_time": "2020-04-11T23:37:39", "upload_time_iso_8601": "2020-04-11T23:37:39.069497Z", "url": "https://files.pythonhosted.org/packages/31/9a/c3547a12ebb5d18b9f850d0c7b9d0143d3da95396ed02142300fda5f4e40/w8ing-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef8c192c26e236f22a0a29fb56f21ba4", "sha256": "2f2a8a2ab063d5e7ddf3b026ea38f45840ff14af0bb8752c4b581017820d845a"}, "downloads": -1, "filename": "w8ing-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ef8c192c26e236f22a0a29fb56f21ba4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5252, "upload_time": "2020-04-11T23:37:40", "upload_time_iso_8601": "2020-04-11T23:37:40.353229Z", "url": "https://files.pythonhosted.org/packages/4e/82/a3e320544d37f59c9a8d0a532d9f6ca0ffebb6ccf4d30f470e11128edb05/w8ing-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "01f5b4dd13b8797825e199da9cf39b0f", "sha256": "e1622744148fb0cecda16e91787548c0a1000e02d8daef492ea1deef1f5817e2"}, "downloads": -1, "filename": "w8ing-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "01f5b4dd13b8797825e199da9cf39b0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8655, "upload_time": "2020-04-12T00:17:06", "upload_time_iso_8601": "2020-04-12T00:17:06.198479Z", "url": "https://files.pythonhosted.org/packages/cf/08/c0449f394798b9e12bc3868b9af5685c576e62b1b4680a3cb161117ddc0f/w8ing-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "396a680e62020eed80a2219e33923015", "sha256": "f0906f323ab4b188388ccc5eded0d30df863ca11478556eaf35fe926586b4c15"}, "downloads": -1, "filename": "w8ing-1.0.2.tar.gz", "has_sig": false, "md5_digest": "396a680e62020eed80a2219e33923015", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5263, "upload_time": "2020-04-12T00:17:07", "upload_time_iso_8601": "2020-04-12T00:17:07.229702Z", "url": "https://files.pythonhosted.org/packages/5b/7b/a732f2d37e24ed679cb6f7f7b9193bc787bf100786b4ee685a467c424f26/w8ing-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "01f5b4dd13b8797825e199da9cf39b0f", "sha256": "e1622744148fb0cecda16e91787548c0a1000e02d8daef492ea1deef1f5817e2"}, "downloads": -1, "filename": "w8ing-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "01f5b4dd13b8797825e199da9cf39b0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8655, "upload_time": "2020-04-12T00:17:06", "upload_time_iso_8601": "2020-04-12T00:17:06.198479Z", "url": "https://files.pythonhosted.org/packages/cf/08/c0449f394798b9e12bc3868b9af5685c576e62b1b4680a3cb161117ddc0f/w8ing-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "396a680e62020eed80a2219e33923015", "sha256": "f0906f323ab4b188388ccc5eded0d30df863ca11478556eaf35fe926586b4c15"}, "downloads": -1, "filename": "w8ing-1.0.2.tar.gz", "has_sig": false, "md5_digest": "396a680e62020eed80a2219e33923015", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5263, "upload_time": "2020-04-12T00:17:07", "upload_time_iso_8601": "2020-04-12T00:17:07.229702Z", "url": "https://files.pythonhosted.org/packages/5b/7b/a732f2d37e24ed679cb6f7f7b9193bc787bf100786b4ee685a467c424f26/w8ing-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:33:23 2020"}