{"info": {"author": "Vineet Bansal", "author_email": "vineetb@princeton.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![PyPI version](https://badge.fury.io/py/ffmetadata-py.svg)](https://badge.fury.io/py/ffmetadata-py)\n\n# ffmetadata-py\nPython wrapper for Fragile Families Metadata API\n\nThis Python package provides convenient wrappers to interface with the [Fragile Families Metadata API](https://github.com/fragilefamilieschallenge/metadata_app). By downloading and importing the `ff` module, users can query the metadata variables. No other software installation is necessary.\n\nRequirements\n------------\n\nThe `ff` module has been tested on Python 3.6, and should work on most Python 3.x installations.\n\nInstallation\n------------\n\nThe easiest way to install and use the module is to do a `pip install`\n\n```\npip install ffmetadata-py\n```\n\nThis step will also install any dependencies if needed (currently, the `requests` and `simplejson` libraries).\n\nAlternatively, you can clone this Github repository and place the `ff` folder and it's contents at a location accessible by your Python 3 installation (most commonly the `site-packages` folder for your Python installation). In this scenario, make sure that you have recent versions of the `requests` and `simplejson` libraries installed.\n\nGetting Started\n---------------\n\nTo get started, import the ff module using `import ff`. Follow the examples below on how to use the library.\n\nExamples\n--------\n\n### Getting attributes of a variable\n\n#### Get *all* attributes of a variable\nGiven the variable name, this function call returns a dictionary of all attribute name/value pairs.\n```\n>>> ff.select('ce3datey')\n{'data_source': 'constructed', 'data_type': 'Continuous', ...\n```\n\n#### Get a single attribute of a variable\nTo get a single attribute value, call the `select` function with the second argument as the attribute you're interested in. Most attributes return `str` values, but a handful have `int` return values.\n```\n>>> ff.select('ce3datey', 'data_source')\n'constructed'\n```\n\n#### Get multiple attributes of a variable\nTo get multiple attribute values, call the `select` function with the second argument as a list of string attribute names. A dictionary with name/value pairs is returned.\n```\n>>> ff.select('ce3datey', ['name', 'data_source'])\n{'data_source': 'constructed', 'name': 'ce3datey'}\n```\n\n### Searching for variables\nQuerying variables is done using the `search` function. In the simplest case, this function expects a dictionary with keys *name*, *op* and *val*. In all cases, a list of variable names is returned. Some examples follow.\n\n#### Find variable(s) where name='ce3datey'\n```\n>>> ff.search({'name': 'name', 'op': 'eq', 'val': 'ce3datey'})\n['ce3datey']\n```\n\n#### Find variable(s) where data_source='constructed' AND name ends with 'e'\nMultiple search criteria can be specified by passing in a list of dictionaries. These are combined with an `AND` clause.\n```\n>>> ff.search([{'name': 'data_source', 'op': 'eq', 'val': 'constructed'}, {'name': 'name', 'op': 'like', 'val': '%e'}])\n['cf1age', 'cf1ethrace', ...\n```\n\n#### Find variable(s) where data_source='constructed' OR name starts with 'c' OR name ends with 'd'\nTo specify an `OR` clause for multiple search combination, replace the search criteria with a dictionary keyed by `OR`, with values as a list of dictionaries.\n```\n>>> ff.search({'or': [{'name': 'data_source', 'op': 'eq', 'val': 'constructed'}, {'name': 'name', 'op': 'like', 'val': 'c%'}, {'name': 'name', 'op': 'like', 'val': '%d'}]})\n['cf1intmon', 'cf1intyr', ...\n```\n\n#### Find variable(s) where data_source='constructed' OR (name ends with 'f' AND data_source='questionnaire')\nMore complicated search queries can b constructed, by combining several AND/OR clauses. In such cases, at any point where you want to specify a sub-query, pass in a dictionary keyed by either an `AND` or `OR`, with the values being valid search criteria themselves - either dictionaries of name/op/val keys, or sub-queries (defined recursively).\n```\n>>> ff.search({'or': [{'name': 'data_source', 'op': 'eq', 'val': 'constructed'}, {'and': [{'name': 'name', 'op': 'like', 'val': '%f'}, {'name': 'data_source', 'op': 'eq', 'val': 'questionnaire'}]}]})\n['cf1intmon', 'cf1intyr', ...\n```\n\nFor more complicated search queries, you may find the interactive [Advanced Search](http://metadata.fragilefamilies.princeton.edu/search) page on the project website useful.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fragilefamilieschallenge/ffmetadata-py", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ffmetadata-py", "package_url": "https://pypi.org/project/ffmetadata-py/", "platform": "", "project_url": "https://pypi.org/project/ffmetadata-py/", "project_urls": {"Homepage": "https://github.com/fragilefamilieschallenge/ffmetadata-py"}, "release_url": "https://pypi.org/project/ffmetadata-py/1.1.0/", "requires_dist": ["simplejson", "requests"], "requires_python": "", "summary": "Python wrapper for The Fragile Families Metadata API", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/ffmetadata-py\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89edee2d759213b7df2b26082c019c0dc758cf7b/68747470733a2f2f62616467652e667572792e696f2f70792f66666d657461646174612d70792e737667\"></a></p>\n<h1>ffmetadata-py</h1>\n<p>Python wrapper for Fragile Families Metadata API</p>\n<p>This Python package provides convenient wrappers to interface with the <a href=\"https://github.com/fragilefamilieschallenge/metadata_app\" rel=\"nofollow\">Fragile Families Metadata API</a>. By downloading and importing the <code>ff</code> module, users can query the metadata variables. No other software installation is necessary.</p>\n<h2>Requirements</h2>\n<p>The <code>ff</code> module has been tested on Python 3.6, and should work on most Python 3.x installations.</p>\n<h2>Installation</h2>\n<p>The easiest way to install and use the module is to do a <code>pip install</code></p>\n<pre><code>pip install ffmetadata-py\n</code></pre>\n<p>This step will also install any dependencies if needed (currently, the <code>requests</code> and <code>simplejson</code> libraries).</p>\n<p>Alternatively, you can clone this Github repository and place the <code>ff</code> folder and it's contents at a location accessible by your Python 3 installation (most commonly the <code>site-packages</code> folder for your Python installation). In this scenario, make sure that you have recent versions of the <code>requests</code> and <code>simplejson</code> libraries installed.</p>\n<h2>Getting Started</h2>\n<p>To get started, import the ff module using <code>import ff</code>. Follow the examples below on how to use the library.</p>\n<h2>Examples</h2>\n<h3>Getting attributes of a variable</h3>\n<h4>Get <em>all</em> attributes of a variable</h4>\n<p>Given the variable name, this function call returns a dictionary of all attribute name/value pairs.</p>\n<pre><code>&gt;&gt;&gt; ff.select('ce3datey')\n{'data_source': 'constructed', 'data_type': 'Continuous', ...\n</code></pre>\n<h4>Get a single attribute of a variable</h4>\n<p>To get a single attribute value, call the <code>select</code> function with the second argument as the attribute you're interested in. Most attributes return <code>str</code> values, but a handful have <code>int</code> return values.</p>\n<pre><code>&gt;&gt;&gt; ff.select('ce3datey', 'data_source')\n'constructed'\n</code></pre>\n<h4>Get multiple attributes of a variable</h4>\n<p>To get multiple attribute values, call the <code>select</code> function with the second argument as a list of string attribute names. A dictionary with name/value pairs is returned.</p>\n<pre><code>&gt;&gt;&gt; ff.select('ce3datey', ['name', 'data_source'])\n{'data_source': 'constructed', 'name': 'ce3datey'}\n</code></pre>\n<h3>Searching for variables</h3>\n<p>Querying variables is done using the <code>search</code> function. In the simplest case, this function expects a dictionary with keys <em>name</em>, <em>op</em> and <em>val</em>. In all cases, a list of variable names is returned. Some examples follow.</p>\n<h4>Find variable(s) where name='ce3datey'</h4>\n<pre><code>&gt;&gt;&gt; ff.search({'name': 'name', 'op': 'eq', 'val': 'ce3datey'})\n['ce3datey']\n</code></pre>\n<h4>Find variable(s) where data_source='constructed' AND name ends with 'e'</h4>\n<p>Multiple search criteria can be specified by passing in a list of dictionaries. These are combined with an <code>AND</code> clause.</p>\n<pre><code>&gt;&gt;&gt; ff.search([{'name': 'data_source', 'op': 'eq', 'val': 'constructed'}, {'name': 'name', 'op': 'like', 'val': '%e'}])\n['cf1age', 'cf1ethrace', ...\n</code></pre>\n<h4>Find variable(s) where data_source='constructed' OR name starts with 'c' OR name ends with 'd'</h4>\n<p>To specify an <code>OR</code> clause for multiple search combination, replace the search criteria with a dictionary keyed by <code>OR</code>, with values as a list of dictionaries.</p>\n<pre><code>&gt;&gt;&gt; ff.search({'or': [{'name': 'data_source', 'op': 'eq', 'val': 'constructed'}, {'name': 'name', 'op': 'like', 'val': 'c%'}, {'name': 'name', 'op': 'like', 'val': '%d'}]})\n['cf1intmon', 'cf1intyr', ...\n</code></pre>\n<h4>Find variable(s) where data_source='constructed' OR (name ends with 'f' AND data_source='questionnaire')</h4>\n<p>More complicated search queries can b constructed, by combining several AND/OR clauses. In such cases, at any point where you want to specify a sub-query, pass in a dictionary keyed by either an <code>AND</code> or <code>OR</code>, with the values being valid search criteria themselves - either dictionaries of name/op/val keys, or sub-queries (defined recursively).</p>\n<pre><code>&gt;&gt;&gt; ff.search({'or': [{'name': 'data_source', 'op': 'eq', 'val': 'constructed'}, {'and': [{'name': 'name', 'op': 'like', 'val': '%f'}, {'name': 'data_source', 'op': 'eq', 'val': 'questionnaire'}]}]})\n['cf1intmon', 'cf1intyr', ...\n</code></pre>\n<p>For more complicated search queries, you may find the interactive <a href=\"http://metadata.fragilefamilies.princeton.edu/search\" rel=\"nofollow\">Advanced Search</a> page on the project website useful.</p>\n\n          </div>"}, "last_serial": 4522261, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "acb8592485c18c232f27f0f3fd21f28f", "sha256": "f5c2ca07fcc4f6b97297f4294f1f719b3ff9addff0e183cc0863ff13074770fa"}, "downloads": -1, "filename": "ffmetadata_py-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "acb8592485c18c232f27f0f3fd21f28f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4500, "upload_time": "2018-11-24T02:40:26", "upload_time_iso_8601": "2018-11-24T02:40:26.812311Z", "url": "https://files.pythonhosted.org/packages/2b/e6/bf9217cfa6e7a30a1adb668e86e41843aa5c0974be1b381ebba2cd218d90/ffmetadata_py-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dfafcaa5e5f9444e583143d4b2ff7a1", "sha256": "3adc947bc94c5ffe13ae9a93542298726b736305a860503c5d2e6a53637ba14a"}, "downloads": -1, "filename": "ffmetadata-py-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7dfafcaa5e5f9444e583143d4b2ff7a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4120, "upload_time": "2018-11-24T02:40:28", "upload_time_iso_8601": "2018-11-24T02:40:28.659779Z", "url": "https://files.pythonhosted.org/packages/eb/22/7e6b8181ca71ebf05d7bb5f917b25a4e8fe13e57b2814d8e664bb91a3445/ffmetadata-py-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "acb8592485c18c232f27f0f3fd21f28f", "sha256": "f5c2ca07fcc4f6b97297f4294f1f719b3ff9addff0e183cc0863ff13074770fa"}, "downloads": -1, "filename": "ffmetadata_py-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "acb8592485c18c232f27f0f3fd21f28f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4500, "upload_time": "2018-11-24T02:40:26", "upload_time_iso_8601": "2018-11-24T02:40:26.812311Z", "url": "https://files.pythonhosted.org/packages/2b/e6/bf9217cfa6e7a30a1adb668e86e41843aa5c0974be1b381ebba2cd218d90/ffmetadata_py-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dfafcaa5e5f9444e583143d4b2ff7a1", "sha256": "3adc947bc94c5ffe13ae9a93542298726b736305a860503c5d2e6a53637ba14a"}, "downloads": -1, "filename": "ffmetadata-py-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7dfafcaa5e5f9444e583143d4b2ff7a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4120, "upload_time": "2018-11-24T02:40:28", "upload_time_iso_8601": "2018-11-24T02:40:28.659779Z", "url": "https://files.pythonhosted.org/packages/eb/22/7e6b8181ca71ebf05d7bb5f917b25a4e8fe13e57b2814d8e664bb91a3445/ffmetadata-py-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:48 2020"}