{"info": {"author": "CodeLV", "author_email": "frmdstryr@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/codelv/atom-db.svg?branch=master)](https://travis-ci.org/codelv/atom-db)\n[![codecov](https://codecov.io/gh/codelv/atom-db/branch/master/graph/badge.svg)](https://codecov.io/gh/codelv/atom-db)\n\natom-db is a database abstraction layer for the\n[atom](https://github.com/nucleic/atom) framework. This package provides api's for\nseamlessly saving and restoring atom objects from json based document databases\nand SQL databases supported by sqlalchemy.\n\n\nThe main reason for building this is to make it easier have database integration\nwith [enaml](https://github.com/nucleic/enaml) applications so a separate\nframework is not needed to define database models.\n\nThis was originally a part of [enaml-web](https://github.com/codelv/enaml-web)\nbut has been pulled out to a separate package.\n\n\n### Overview\n\n- Supports MySQL and Postgres\n- Uses django like queries or raw sqlalchemy queries\n- Works with alembic database migrations\n- Supports MongoDB using motor\n\nIt's still in development....\n\n\n### Structure\n\nThe design is based somewhat on django.\n\nThere is a \"manager\" called `Model.objects` to do queries on the database table\ncreated for each subclass.\n\nSerialization and deserialization is done with `Model.serializer`.\n\n> Note: As of 0.3.11 serialization can be customizer per member by tagging the\nmember with a `flatten` or `unflatten` which should be a async callable which\naccepts the value and scope.\n\nEach `Model` has async `save`, `delete`, and `restore` methods to interact with\nthe database. This can be customized if needed using\n`__restorestate__` and `__getstate__`.\n\n\n# MySQL and Postgres support\n\nYou can use atom-db to save and restore atom subclasses to MySQL and Postgres.\n\nJust define models using atom members, but subclass the SQLModel and atom-db\nwill convert the builtin atom members of your model to sqlalchemy table columns\nand create a `sqlalchemy.Table` for your model.\n\n\n### Customizing table creation\n\nTo customize how table columns are created you can tag members with information\nneeded for sqlalchemy columns, ex `Str().tag(length=40)` will make a `sa.String(40)`.\nSee https://docs.sqlalchemy.org/en/latest/core/type_basics.html. Tagging any\nmember with `store=False` will make the member be excluded from the db.\n\natomdb will attempt to determine the proper column type, but if you need more\ncontrol, you can tag the member to specify the column type with\n`type=sa.<type>` or specify the full column definition with\n`column=sa.Column(...)`.\n\nIf you have a custom member, you can define a `def get_column(self, model)`\nor `def get_column_type(self, model)` method to create the table column for the\ngiven model.\n\n\n##### Primary keys\n\nYou can tag a member with `primary_key=True` to make it the pk. If no member\nis tagged with `primary_key` it will create and use `_id` as the primary key.\nThe`_id` member will be always alias to the actual primary key. Use the `__pk__`\nattribute of the class to get the name of the primary key member.\n\n##### Table metadata\n\nLike in Django a nested `Meta` class  can be added to specify the `db_name`\nand `unique_together` constraints. If no `db_name` is specified on a Meta class,\nthe table name defaults the what is set in the `__model__` member. This defaults\nto the qualname of the class, eg `myapp.SomeModel`.\n\n\n```python\n\nclass SomeModel(SQLModel):\n    # ...\n\n    class Meta:\n        db_table = 'custom_table_name'\n\n```\n\n##### Table creation / dropping\n\nOnce your tables are defined as atom models, create and drop tables using\n `create_table` and `drop_table` of `Model.objects` respectively For example:\n\n```python\n\nfrom atomdb.sql import SQLModel, SQLModelManager\n\n# Call create_tables to create sqlalchemy tables. This does NOT write them to\n# the db but ensures that all ForeignKey relations are created\nmgr = SQLModelManager.instance()\nmgr.create_tables()\n\n# Now actually drop/create for each of your models\n\n# Drop the table for this model (will raise sqlalchemy's error if it doesn't exist)\nawait User.objects.drop_table()\n\n# Create the user table\nawait User.objects.create_table()\n\n\n```\n\nThe `mgr.create_tables()` method will create the sqlalchemy tables for each\nimported SQLModel subclass (anything in the manager's `registry` dict). This\nshould be called after all of your models are imported so sqlalchemy can\nproperly setup any foreign key relations.\n\nThe manager also has a `metadata` member which holds the `sqlalchemy.MetaData`\nneeded for migrations.\n\nOnce the tables are created, they are accessible via `Model.objects.table`.\n\n> Note: The sqlachemy table is also assigned to the `__table__` attribute of\neach model class, however this will not be defined until the manager has\ncreated it.\n\n\n#### Database setup\n\nBefore accessing the DB you must assign a \"database engine\" to the manager's\n`database` member.\n\n```python\nimport os\nimport re\nfrom aiomysql.sa import create_engine\nfrom atomdb.sql import SQLModelManager\n\nDATABASE_URL = os.environ.get('MYSQL_URL')\n\n# Parse the DB url\nm = re.match(r'mysql://(.+):(.*)@(.+):(\\d+)/(.+)', DATABASE_URL)\nuser, pwd, host, port, db = m.groups()\n\n# Create the engine\nengine = await create_engine(\n    db=db, user=user, password=pwd, host=host, port=port)\n\n# Assign it to the manager\nmgr = SQLModelManager.instance()\nmgr.database = engine\n\n\n```\n\nThis engine will then be used by the manager to execute queries.  You can\nretrieve the database engine from any Model by using `Model.objects.engine`.\n\n\n#### Django style queries\n\nOnly very basic ORM style queries are implemented for common use cases. These\nare `get`, `get_or_create`, `filter`, and `all`. These all accept\n\"django style\" queries using `<name>=<value>` or `<name>__<op>=<value>`.\n\nFor example:\n\n```python\n\njohn, created = await User.objects.get_or_create(\n        name=\"John Doe\", email=\"jon@example.com\", age=21, active=True)\nassert created\n\njane, created = await User.objects.get_or_create(\n        name=\"Jane Doe\", email=\"jane@example.com\", age=48, active=False,\n        rating=10.0)\nassert created\n\n# Startswith\nu = await User.objects.get(name__startswith=\"John\")\nassert u.name == john.name\n\n# In query\nusers = await User.objects.filter(name__in=[john.name, jane.name])\nassert len(users) == 2\n\n# Is query\nusers = await User.objects.filter(active__is=False)\nassert len(users) == 1 and users[0].active == False\n\n```\n\nSee [sqlachemy's ColumnElement](https://docs.sqlalchemy.org/en/latest/core/sqlelement.html?highlight=column#sqlalchemy.sql.expression.ColumnElement)\nfor which queries can be used in this way.  Also the tests check that these\nactually work as intended.\n\n#### Advanced / raw sqlalchemy queries\n\nFor more advanced queries using joins, etc.. you must build the query with\nsqlalchemy then execute it. The `sa.Table` for an atom model can be retrieved\nusing `Model.objects.table` on which you can use select, where, etc... to build\nup whatever query you need.\n\nThen use `fetchall`, `fetchone`, `fetchmany`, or `execute` to do these queries.\n\nThese methods do NOT return an object but the row from the database so they\nmust manually be restored.\n\nWhen joining you'll usually want to pass `use_labels=True`.  For example:\n\n```python\n\nq = Job.objects.table.join(JobRole.objects.table).select(use_labels=True)\n\nfor row in await Job.objects.fetchall(q):\n    # Restore each manually, it handles pulling out the fields that are it's own\n    job = await Job.restore(row)\n    role = await JobRole.restore(row)\n\n```\n\nDepending on the relationships, you may need to then post-process these so they\ncan be accessed in a more pythonic way. This is trade off between complexity\nand ease of use.\n\n\n### Connections and Transactions\n\nA connection can be retrieved using `Model.objects.connection()` and used\nlike normal aiomysql / aiopg connection. A transaction is done in the same way\nas defined in the docs for those libraries eg.\n\n```python\n\nasync with Job.objects.connection() as conn:\n    trans = await conn.begin()\n    try:\n        # Do your queries here and pass the `connection` to each\n        job, created = await Job.objects.get_or_create(connection=conn, **state)\n    except:\n        await trans.rollback()\n        raise\n    else:\n        await trans.commit()\n\n```\n\nWhen using a transaction you need to pass the active connection to\neach call or it will use a different connection outside of the transaction!\n\nThe connection argument is removed from the filters/state. If your model happens\nto have a member named `connection` you can rename the connection argument by\nwith `Model.object.connection_kwarg = 'connection_'` or whatever name you like.\n\n### Migrations\n\nMigrations work using [alembic](https://alembic.sqlalchemy.org/en/latest/autogenerate.html). The metadata needed\nto autogenerate migrations can be retrieved from `SQLModelManager.instance().metadata` so add the following\nin your alembic's env.py:\n\n```python\n# Import your db models first\nfrom myapp.models import *\n\nfrom atomdb.sql import SQLModelManager\nmanager = SQLModelManager.instance()\nmanager.create_tables()  # Create sa tables\ntarget_metadata = manager.metadata\n\n```\n\nThe rest is handled by alembic.\n\n\n# NoSQL support\n\nYou can also use atom-db to save and restore atom subclasses to MongoDB.\n\nThe NoSQL version is very basic as mongo is much more relaxed. No restriction\nis imposed on what type of manager is used, leaving that to whichever database\nlibrary is preferred but it's tested (and currently used) with [motor](https://motor.readthedocs.io/en/stable/)\nand [tornado](https://www.tornadoweb.org/en/stable/index.html).\n\nJust define models using atom members, but subclass the `NoSQLModel`.\n\n```python\n\nfrom atom.api import Unicode, Int, Instance, List\nfrom atomdb.nosql import NoSQLModel, NoSQLModelManager\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\n# Set DB\nclient = AsyncIOMotorClient()\nmgr = NoSQLModelManager.instance()\nmgr.database = client.test_db\n\n\nclass Group(NoSQLModel):\n    name = Unicode()\n\nclass User(NoSQLModel):\n    name = Unicode()\n    age = Int()\n    groups = List(Group)\n\n\n```\n\nThen we can create an instance and save it. It will perform an upsert or replace\nthe existing entry.\n\n```python\n\nadmins = Group(name=\"Admins\")\nawait admins.save()\n\n# It will save admins using it's ObjectID\nbob = User(name=\"Bob\", age=32, groups=[admins])\nawait bob.save()\n\ntom = User(name=\"Tom\", age=34, groups=[admins])\nawait tom.save()\n\n```\n\nTo fetch from the DB each model has a `ModelManager` called `objects` that will\nsimply return the collection for the model type. For example.\n\n```python\n\n# Fetch from db, you can use any MongoDB queries here\nstate = await User.objects.find_one({'name': \"James\"})\nif state:\n    james = await User.restore(state)\n\n# etc...\n```\n\nRestoring is async because it will automatically fetch any related objects\n(ex the groups in this case). It saves objects using the ObjectID when present.\n\nAnd finally you can either delete using queries on the manager directly or\ncall on the object.\n\n```python\nawait tom.delete()\nassert not await User.objects.find_one({'name': \"Tom\"})\n\n```\n\nYou can exclude members from being saved to the DB by tagging them\nwith `.tag(store=False)`.\n\n\n## Contributing\n\nThis is currently used in a few projects but not considered mature by\nany means.\n\nPull requests and feature requests are welcome!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/codelv/atom-db", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "atom-db", "package_url": "https://pypi.org/project/atom-db/", "platform": "", "project_url": "https://pypi.org/project/atom-db/", "project_urls": {"Homepage": "https://github.com/codelv/atom-db"}, "release_url": "https://pypi.org/project/atom-db/0.3.11/", "requires_dist": ["atom"], "requires_python": "", "summary": "Database abstraction layer for atom objects", "version": "0.3.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/codelv/atom-db\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b5512cb0b58d35200eebd333d9c1fb522234480/68747470733a2f2f7472617669732d63692e6f72672f636f64656c762f61746f6d2d64622e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/codelv/atom-db\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5803e76756c77df55e4040a2fd23d2531a156d48/68747470733a2f2f636f6465636f762e696f2f67682f636f64656c762f61746f6d2d64622f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>atom-db is a database abstraction layer for the\n<a href=\"https://github.com/nucleic/atom\" rel=\"nofollow\">atom</a> framework. This package provides api's for\nseamlessly saving and restoring atom objects from json based document databases\nand SQL databases supported by sqlalchemy.</p>\n<p>The main reason for building this is to make it easier have database integration\nwith <a href=\"https://github.com/nucleic/enaml\" rel=\"nofollow\">enaml</a> applications so a separate\nframework is not needed to define database models.</p>\n<p>This was originally a part of <a href=\"https://github.com/codelv/enaml-web\" rel=\"nofollow\">enaml-web</a>\nbut has been pulled out to a separate package.</p>\n<h3>Overview</h3>\n<ul>\n<li>Supports MySQL and Postgres</li>\n<li>Uses django like queries or raw sqlalchemy queries</li>\n<li>Works with alembic database migrations</li>\n<li>Supports MongoDB using motor</li>\n</ul>\n<p>It's still in development....</p>\n<h3>Structure</h3>\n<p>The design is based somewhat on django.</p>\n<p>There is a \"manager\" called <code>Model.objects</code> to do queries on the database table\ncreated for each subclass.</p>\n<p>Serialization and deserialization is done with <code>Model.serializer</code>.</p>\n<blockquote>\n<p>Note: As of 0.3.11 serialization can be customizer per member by tagging the\nmember with a <code>flatten</code> or <code>unflatten</code> which should be a async callable which\naccepts the value and scope.</p>\n</blockquote>\n<p>Each <code>Model</code> has async <code>save</code>, <code>delete</code>, and <code>restore</code> methods to interact with\nthe database. This can be customized if needed using\n<code>__restorestate__</code> and <code>__getstate__</code>.</p>\n<h1>MySQL and Postgres support</h1>\n<p>You can use atom-db to save and restore atom subclasses to MySQL and Postgres.</p>\n<p>Just define models using atom members, but subclass the SQLModel and atom-db\nwill convert the builtin atom members of your model to sqlalchemy table columns\nand create a <code>sqlalchemy.Table</code> for your model.</p>\n<h3>Customizing table creation</h3>\n<p>To customize how table columns are created you can tag members with information\nneeded for sqlalchemy columns, ex <code>Str().tag(length=40)</code> will make a <code>sa.String(40)</code>.\nSee <a href=\"https://docs.sqlalchemy.org/en/latest/core/type_basics.html\" rel=\"nofollow\">https://docs.sqlalchemy.org/en/latest/core/type_basics.html</a>. Tagging any\nmember with <code>store=False</code> will make the member be excluded from the db.</p>\n<p>atomdb will attempt to determine the proper column type, but if you need more\ncontrol, you can tag the member to specify the column type with\n<code>type=sa.&lt;type&gt;</code> or specify the full column definition with\n<code>column=sa.Column(...)</code>.</p>\n<p>If you have a custom member, you can define a <code>def get_column(self, model)</code>\nor <code>def get_column_type(self, model)</code> method to create the table column for the\ngiven model.</p>\n<h5>Primary keys</h5>\n<p>You can tag a member with <code>primary_key=True</code> to make it the pk. If no member\nis tagged with <code>primary_key</code> it will create and use <code>_id</code> as the primary key.\nThe<code>_id</code> member will be always alias to the actual primary key. Use the <code>__pk__</code>\nattribute of the class to get the name of the primary key member.</p>\n<h5>Table metadata</h5>\n<p>Like in Django a nested <code>Meta</code> class  can be added to specify the <code>db_name</code>\nand <code>unique_together</code> constraints. If no <code>db_name</code> is specified on a Meta class,\nthe table name defaults the what is set in the <code>__model__</code> member. This defaults\nto the qualname of the class, eg <code>myapp.SomeModel</code>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SomeModel</span><span class=\"p\">(</span><span class=\"n\">SQLModel</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">db_table</span> <span class=\"o\">=</span> <span class=\"s1\">'custom_table_name'</span>\n</pre>\n<h5>Table creation / dropping</h5>\n<p>Once your tables are defined as atom models, create and drop tables using\n<code>create_table</code> and <code>drop_table</code> of <code>Model.objects</code> respectively For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">atomdb.sql</span> <span class=\"kn\">import</span> <span class=\"n\">SQLModel</span><span class=\"p\">,</span> <span class=\"n\">SQLModelManager</span>\n\n<span class=\"c1\"># Call create_tables to create sqlalchemy tables. This does NOT write them to</span>\n<span class=\"c1\"># the db but ensures that all ForeignKey relations are created</span>\n<span class=\"n\">mgr</span> <span class=\"o\">=</span> <span class=\"n\">SQLModelManager</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span>\n<span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">create_tables</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Now actually drop/create for each of your models</span>\n\n<span class=\"c1\"># Drop the table for this model (will raise sqlalchemy's error if it doesn't exist)</span>\n<span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">drop_table</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create the user table</span>\n<span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create_table</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>mgr.create_tables()</code> method will create the sqlalchemy tables for each\nimported SQLModel subclass (anything in the manager's <code>registry</code> dict). This\nshould be called after all of your models are imported so sqlalchemy can\nproperly setup any foreign key relations.</p>\n<p>The manager also has a <code>metadata</code> member which holds the <code>sqlalchemy.MetaData</code>\nneeded for migrations.</p>\n<p>Once the tables are created, they are accessible via <code>Model.objects.table</code>.</p>\n<blockquote>\n<p>Note: The sqlachemy table is also assigned to the <code>__table__</code> attribute of\neach model class, however this will not be defined until the manager has\ncreated it.</p>\n</blockquote>\n<h4>Database setup</h4>\n<p>Before accessing the DB you must assign a \"database engine\" to the manager's\n<code>database</code> member.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomysql.sa</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">atomdb.sql</span> <span class=\"kn\">import</span> <span class=\"n\">SQLModelManager</span>\n\n<span class=\"n\">DATABASE_URL</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'MYSQL_URL'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Parse the DB url</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'mysql://(.+):(.*)@(.+):(\\d+)/(.+)'</span><span class=\"p\">,</span> <span class=\"n\">DATABASE_URL</span><span class=\"p\">)</span>\n<span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">pwd</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create the engine</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span>\n    <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">pwd</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Assign it to the manager</span>\n<span class=\"n\">mgr</span> <span class=\"o\">=</span> <span class=\"n\">SQLModelManager</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span>\n<span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">database</span> <span class=\"o\">=</span> <span class=\"n\">engine</span>\n</pre>\n<p>This engine will then be used by the manager to execute queries.  You can\nretrieve the database engine from any Model by using <code>Model.objects.engine</code>.</p>\n<h4>Django style queries</h4>\n<p>Only very basic ORM style queries are implemented for common use cases. These\nare <code>get</code>, <code>get_or_create</code>, <code>filter</code>, and <code>all</code>. These all accept\n\"django style\" queries using <code>&lt;name&gt;=&lt;value&gt;</code> or <code>&lt;name&gt;__&lt;op&gt;=&lt;value&gt;</code>.</p>\n<p>For example:</p>\n<pre><span class=\"n\">john</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s2\">\"jon@example.com\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">created</span>\n\n<span class=\"n\">jane</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Jane Doe\"</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s2\">\"jane@example.com\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">rating</span><span class=\"o\">=</span><span class=\"mf\">10.0</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">created</span>\n\n<span class=\"c1\"># Startswith</span>\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name__startswith</span><span class=\"o\">=</span><span class=\"s2\">\"John\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">john</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<span class=\"c1\"># In query</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__in</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">john</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">jane</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># Is query</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">active__is</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">users</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">active</span> <span class=\"o\">==</span> <span class=\"kc\">False</span>\n</pre>\n<p>See <a href=\"https://docs.sqlalchemy.org/en/latest/core/sqlelement.html?highlight=column#sqlalchemy.sql.expression.ColumnElement\" rel=\"nofollow\">sqlachemy's ColumnElement</a>\nfor which queries can be used in this way.  Also the tests check that these\nactually work as intended.</p>\n<h4>Advanced / raw sqlalchemy queries</h4>\n<p>For more advanced queries using joins, etc.. you must build the query with\nsqlalchemy then execute it. The <code>sa.Table</code> for an atom model can be retrieved\nusing <code>Model.objects.table</code> on which you can use select, where, etc... to build\nup whatever query you need.</p>\n<p>Then use <code>fetchall</code>, <code>fetchone</code>, <code>fetchmany</code>, or <code>execute</code> to do these queries.</p>\n<p>These methods do NOT return an object but the row from the database so they\nmust manually be restored.</p>\n<p>When joining you'll usually want to pass <code>use_labels=True</code>.  For example:</p>\n<pre><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">JobRole</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">use_labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"k\">await</span> <span class=\"n\">Job</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Restore each manually, it handles pulling out the fields that are it's own</span>\n    <span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Job</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n    <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">JobRole</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n</pre>\n<p>Depending on the relationships, you may need to then post-process these so they\ncan be accessed in a more pythonic way. This is trade off between complexity\nand ease of use.</p>\n<h3>Connections and Transactions</h3>\n<p>A connection can be retrieved using <code>Model.objects.connection()</code> and used\nlike normal aiomysql / aiopg connection. A transaction is done in the same way\nas defined in the docs for those libraries eg.</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">Job</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">trans</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Do your queries here and pass the `connection` to each</span>\n        <span class=\"n\">job</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Job</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">rollback</span><span class=\"p\">()</span>\n        <span class=\"k\">raise</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<p>When using a transaction you need to pass the active connection to\neach call or it will use a different connection outside of the transaction!</p>\n<p>The connection argument is removed from the filters/state. If your model happens\nto have a member named <code>connection</code> you can rename the connection argument by\nwith <code>Model.object.connection_kwarg = 'connection_'</code> or whatever name you like.</p>\n<h3>Migrations</h3>\n<p>Migrations work using <a href=\"https://alembic.sqlalchemy.org/en/latest/autogenerate.html\" rel=\"nofollow\">alembic</a>. The metadata needed\nto autogenerate migrations can be retrieved from <code>SQLModelManager.instance().metadata</code> so add the following\nin your alembic's env.py:</p>\n<pre><span class=\"c1\"># Import your db models first</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">atomdb.sql</span> <span class=\"kn\">import</span> <span class=\"n\">SQLModelManager</span>\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">SQLModelManager</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">create_tables</span><span class=\"p\">()</span>  <span class=\"c1\"># Create sa tables</span>\n<span class=\"n\">target_metadata</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">metadata</span>\n</pre>\n<p>The rest is handled by alembic.</p>\n<h1>NoSQL support</h1>\n<p>You can also use atom-db to save and restore atom subclasses to MongoDB.</p>\n<p>The NoSQL version is very basic as mongo is much more relaxed. No restriction\nis imposed on what type of manager is used, leaving that to whichever database\nlibrary is preferred but it's tested (and currently used) with <a href=\"https://motor.readthedocs.io/en/stable/\" rel=\"nofollow\">motor</a>\nand <a href=\"https://www.tornadoweb.org/en/stable/index.html\" rel=\"nofollow\">tornado</a>.</p>\n<p>Just define models using atom members, but subclass the <code>NoSQLModel</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">atom.api</span> <span class=\"kn\">import</span> <span class=\"n\">Unicode</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">Instance</span><span class=\"p\">,</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"nn\">atomdb.nosql</span> <span class=\"kn\">import</span> <span class=\"n\">NoSQLModel</span><span class=\"p\">,</span> <span class=\"n\">NoSQLModelManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">motor.motor_asyncio</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncIOMotorClient</span>\n\n<span class=\"c1\"># Set DB</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncIOMotorClient</span><span class=\"p\">()</span>\n<span class=\"n\">mgr</span> <span class=\"o\">=</span> <span class=\"n\">NoSQLModelManager</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span>\n<span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">database</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">test_db</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Group</span><span class=\"p\">(</span><span class=\"n\">NoSQLModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Unicode</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">NoSQLModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Unicode</span><span class=\"p\">()</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">Int</span><span class=\"p\">()</span>\n    <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">Group</span><span class=\"p\">)</span>\n</pre>\n<p>Then we can create an instance and save it. It will perform an upsert or replace\nthe existing entry.</p>\n<pre><span class=\"n\">admins</span> <span class=\"o\">=</span> <span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Admins\"</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">admins</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># It will save admins using it's ObjectID</span>\n<span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">admins</span><span class=\"p\">])</span>\n<span class=\"k\">await</span> <span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"n\">tom</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Tom\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">admins</span><span class=\"p\">])</span>\n<span class=\"k\">await</span> <span class=\"n\">tom</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>To fetch from the DB each model has a <code>ModelManager</code> called <code>objects</code> that will\nsimply return the collection for the model type. For example.</p>\n<pre><span class=\"c1\"># Fetch from db, you can use any MongoDB queries here</span>\n<span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s2\">\"James\"</span><span class=\"p\">})</span>\n<span class=\"k\">if</span> <span class=\"n\">state</span><span class=\"p\">:</span>\n    <span class=\"n\">james</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># etc...</span>\n</pre>\n<p>Restoring is async because it will automatically fetch any related objects\n(ex the groups in this case). It saves objects using the ObjectID when present.</p>\n<p>And finally you can either delete using queries on the manager directly or\ncall on the object.</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">tom</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s2\">\"Tom\"</span><span class=\"p\">})</span>\n</pre>\n<p>You can exclude members from being saved to the DB by tagging them\nwith <code>.tag(store=False)</code>.</p>\n<h2>Contributing</h2>\n<p>This is currently used in a few projects but not considered mature by\nany means.</p>\n<p>Pull requests and feature requests are welcome!</p>\n\n          </div>"}, "last_serial": 7120716, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f962d85468ec0ac8c65c56f7888dfd6f", "sha256": "ea9e9cc8ebd67e7ada603103c7712f1ac26b58ca4717ae3561ec5c7bd9c794c8"}, "downloads": -1, "filename": "atom_db-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f962d85468ec0ac8c65c56f7888dfd6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15137, "upload_time": "2019-03-19T17:40:51", "upload_time_iso_8601": "2019-03-19T17:40:51.454825Z", "url": "https://files.pythonhosted.org/packages/36/00/d432688fcfdc8b16373d6e8b1256c7c783a5e2d97e8326c7266395dd27f1/atom_db-0.1.0-py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "8eb5dfc4b635ae7b93c93a304c618246", "sha256": "c4ab0b2307124a1f4e4fb8a8607ceb19237c7bf90cb482bce4d4f87e7f78bb7e"}, "downloads": -1, "filename": "atom_db-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8eb5dfc4b635ae7b93c93a304c618246", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19183, "upload_time": "2019-09-10T19:30:22", "upload_time_iso_8601": "2019-09-10T19:30:22.431537Z", "url": "https://files.pythonhosted.org/packages/78/6e/ce1a46ea0495ce6f0a41cd72f5888b277c644b284f20e0b72ebeea96d657/atom_db-0.2.3-py3-none-any.whl", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "9717147ec571de03be4d4e904b2d2734", "sha256": "8313d9794415e8a82295ac3d61e9c36ba8ff041373af5f84dd89f840bd67002a"}, "downloads": -1, "filename": "atom_db-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9717147ec571de03be4d4e904b2d2734", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19381, "upload_time": "2019-09-30T18:39:31", "upload_time_iso_8601": "2019-09-30T18:39:31.806859Z", "url": "https://files.pythonhosted.org/packages/51/ee/e8e9fd24ecddf70f1065566e793ee4ef184ed5ff13ed29d80bac1ff14667/atom_db-0.2.4-py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "478618535e2833e18e66644b1a6c6dd1", "sha256": "18bf10e3a55b9f3b530eb1e4086d992ebe25132af1a83062d69f5dc968122896"}, "downloads": -1, "filename": "atom_db-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "478618535e2833e18e66644b1a6c6dd1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19916, "upload_time": "2019-10-11T16:15:50", "upload_time_iso_8601": "2019-10-11T16:15:50.126160Z", "url": "https://files.pythonhosted.org/packages/dc/06/4a580bd72358cba8725d58ac77fd9166b6829908b4349a7d268e26b112ca/atom_db-0.3.0-py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "e010fd1e040a44efa68cfa23073a0c56", "sha256": "0407baf6cc8918ececce69fdd969bf1298f74fabd06f41d46fb296f85c2aa210"}, "downloads": -1, "filename": "atom_db-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e010fd1e040a44efa68cfa23073a0c56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19975, "upload_time": "2019-10-11T20:23:40", "upload_time_iso_8601": "2019-10-11T20:23:40.770046Z", "url": "https://files.pythonhosted.org/packages/dc/92/786d2d437e6b6a3dad8c9c8fe294374fb61fbbf69d8341f53e742d4ebaaf/atom_db-0.3.1-py3-none-any.whl", "yanked": false}], "0.3.10": [{"comment_text": "", "digests": {"md5": "bcc2ddb494b8bd6168463434b52a06db", "sha256": "73861cd617d9f981ab208813d173cf0e461c46dcbb6626cfd2bcf5e54ca801dc"}, "downloads": -1, "filename": "atom_db-0.3.10-py3-none-any.whl", "has_sig": false, "md5_digest": "bcc2ddb494b8bd6168463434b52a06db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21948, "upload_time": "2020-04-14T22:26:17", "upload_time_iso_8601": "2020-04-14T22:26:17.048100Z", "url": "https://files.pythonhosted.org/packages/14/3a/4f8bfd29c30188c74beb40de2f4bd623778525078ce99884b418ed5d44ab/atom_db-0.3.10-py3-none-any.whl", "yanked": false}], "0.3.11": [{"comment_text": "", "digests": {"md5": "be1aa4f34a91e6ecec2a4b08d14c435f", "sha256": "f361b35c8deee1b9872c3c44b5ba8f83891964a79096af64cd6bfc2115c645a1"}, "downloads": -1, "filename": "atom_db-0.3.11-py3-none-any.whl", "has_sig": false, "md5_digest": "be1aa4f34a91e6ecec2a4b08d14c435f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22037, "upload_time": "2020-04-28T14:18:18", "upload_time_iso_8601": "2020-04-28T14:18:18.508062Z", "url": "https://files.pythonhosted.org/packages/09/04/ce5cbe7ced2af59865771bec5d07dac2c60e8afa03bafe9121f844251a14/atom_db-0.3.11-py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "826a6fca8725a94dadedec06f4dc33f0", "sha256": "30c1c65c13db6fedc83a5359b5b42131697662b2d8f1d6883cacdf922164a2b0"}, "downloads": -1, "filename": "atom_db-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "826a6fca8725a94dadedec06f4dc33f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21457, "upload_time": "2019-10-18T21:28:18", "upload_time_iso_8601": "2019-10-18T21:28:18.000953Z", "url": "https://files.pythonhosted.org/packages/d6/10/dd0af2eecd45b1e84a3a0a5bf4f95fc501dde3677cb51ffca559daf1895e/atom_db-0.3.2-py3-none-any.whl", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "6f971e8a3e4940d416a1e537b98ca238", "sha256": "345a2fbfdcfa451ea817856313a73e326fe3e72edc28858abf10c52cb0d712c1"}, "downloads": -1, "filename": "atom_db-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6f971e8a3e4940d416a1e537b98ca238", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21442, "upload_time": "2019-11-04T17:53:42", "upload_time_iso_8601": "2019-11-04T17:53:42.967683Z", "url": "https://files.pythonhosted.org/packages/06/94/02d8a75f8d1b7a144baab6f20147ee9b997553d7743203c6af6f782bfac8/atom_db-0.3.3-py3-none-any.whl", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "4bc56850c958aaaa2283e8948d2f5749", "sha256": "6380fceb192025467ef7ecd0e21fdf9eb61230defe87b78fb1073cd9ae7558d5"}, "downloads": -1, "filename": "atom_db-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4bc56850c958aaaa2283e8948d2f5749", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21466, "upload_time": "2019-11-19T18:18:06", "upload_time_iso_8601": "2019-11-19T18:18:06.925667Z", "url": "https://files.pythonhosted.org/packages/a5/0c/d2cef4bfa35863bd129576a1bf521a73d3144bbf0237616da284ad22356f/atom_db-0.3.4-py3-none-any.whl", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "5ff02f75c381103c058516ade451575e", "sha256": "b86b2b3f1ca0fc0c19a4e754f5f1914d68054040ce54a22b5755609ae12f6106"}, "downloads": -1, "filename": "atom_db-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "5ff02f75c381103c058516ade451575e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21482, "upload_time": "2020-03-11T14:15:17", "upload_time_iso_8601": "2020-03-11T14:15:17.006790Z", "url": "https://files.pythonhosted.org/packages/04/f8/7f722b414e8efd523e79e6628fe8231a181c8f9b65c60430dbd7d5b3697a/atom_db-0.3.5-py3-none-any.whl", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "0f9d0858a4fb41cbfe2358f245cd9dec", "sha256": "8e3bb2d2b43f19e972ba460c6d14281853f33a698a08c643b97c95f50fffe3b8"}, "downloads": -1, "filename": "atom_db-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "0f9d0858a4fb41cbfe2358f245cd9dec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21528, "upload_time": "2020-04-07T00:21:45", "upload_time_iso_8601": "2020-04-07T00:21:45.516236Z", "url": "https://files.pythonhosted.org/packages/90/ed/e6774884afbc10350718b2ad52cfb9dfdf6016c3c8427454b4ac3b8f0b52/atom_db-0.3.6-py3-none-any.whl", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "d8d06188c57befe8117d7f537e1ab621", "sha256": "a0c2dd59ea95845fc4fc59d81ab40603d13bc1d5d479e12d1f4635c2468b7c7d"}, "downloads": -1, "filename": "atom_db-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d8d06188c57befe8117d7f537e1ab621", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21863, "upload_time": "2020-04-07T12:50:20", "upload_time_iso_8601": "2020-04-07T12:50:20.669721Z", "url": "https://files.pythonhosted.org/packages/de/d4/286e027181960b53b921a3b2cb3b66d2a304e31c31c8ca6a945fbcc0b3b7/atom_db-0.3.7-py3-none-any.whl", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "168bee4d4d65f4727d65643b7dbeff9e", "sha256": "f12b706cd2fb89d6189632f2505d70fd56567aaa1c520e3f4d1d4ec5200b3d14"}, "downloads": -1, "filename": "atom_db-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "168bee4d4d65f4727d65643b7dbeff9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21883, "upload_time": "2020-04-08T23:01:26", "upload_time_iso_8601": "2020-04-08T23:01:26.569843Z", "url": "https://files.pythonhosted.org/packages/c0/9a/7181dd682ea2af0ecb56d1742fe46d1b72d7b86db7e688d64389b0752bb4/atom_db-0.3.8-py3-none-any.whl", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "6e1403e6d24969e600fc429bd0137d68", "sha256": "35a373df1f74fd2b1ad2a87618df1efe1f5b283fb132e423321f03924ed3f297"}, "downloads": -1, "filename": "atom_db-0.3.9-py3-none-any.whl", "has_sig": false, "md5_digest": "6e1403e6d24969e600fc429bd0137d68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21909, "upload_time": "2020-04-14T19:46:19", "upload_time_iso_8601": "2020-04-14T19:46:19.668675Z", "url": "https://files.pythonhosted.org/packages/29/b1/edffde567d4751a186e015f6b1e8186ebf9f5cf1a8692154af871cc8719d/atom_db-0.3.9-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be1aa4f34a91e6ecec2a4b08d14c435f", "sha256": "f361b35c8deee1b9872c3c44b5ba8f83891964a79096af64cd6bfc2115c645a1"}, "downloads": -1, "filename": "atom_db-0.3.11-py3-none-any.whl", "has_sig": false, "md5_digest": "be1aa4f34a91e6ecec2a4b08d14c435f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22037, "upload_time": "2020-04-28T14:18:18", "upload_time_iso_8601": "2020-04-28T14:18:18.508062Z", "url": "https://files.pythonhosted.org/packages/09/04/ce5cbe7ced2af59865771bec5d07dac2c60e8afa03bafe9121f844251a14/atom_db-0.3.11-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:16:33 2020"}