{"info": {"author": "Will Drevo", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Games/Entertainment"], "description": "Treys\n=====\n\nA pure Python poker hand evaluation library\n\n::\n\n   [ 3 \u2764 ] , [ 3 \u2660 ]\n\nInstallation\n------------\n\n::\n\n   $ pip install treys\n\nImplementation notes\n--------------------\n\nTreys is a Python 3 port of\n`Deuces <https://github.com/worldveil/deuces>`__. Most of work is taken\nfrom `msaindon\u2019s <https://github.com/msaindon/deuces>`__ fork.\n\nTreys (originally Deuces) was written by `Will\nDrevo <http://willdrevo.com/>`__ for the MIT Pokerbots Competition. It\nis lightweight and fast. All lookups are done with bit arithmetic and\ndictionary lookups. That said, Treys won\u2019t beat a C implemenation (~250k\neval/s) but it is useful for situations where Python is required or\nwhere bots are allocated reasonable thinking time (human time scale).\n\nTreys handles 5, 6, and 7 card hand lookups. The 6 and 7 card lookups\nare done by combinatorially evaluating the 5 card choices.\n\nUsage\n-----\n\nTreys is easy to set up and use.\n\n.. code:: python\n\n   >>> from treys import Card\n   >>> card = Card.new('Qh')\n\nCard objects are represented as integers to keep Treys performant and\nlightweight.\n\nNow let\u2019s create the board and an example Texas Hold\u2019em hand:\n\n.. code:: python\n\n   >>> board = [\n   >>>     Card.new('Ah'),\n   >>>     Card.new('Kd'),\n   >>>     Card.new('Jc')\n   >>> ]\n   >>> hand = [\n   >>>    Card.new('Qs'),\n   >>>    Card.new('Th')\n   >>> ]\n\nPretty print card integers to the terminal:\n\n::\n\n   >>> Card.print_pretty_cards(board + hand)\n     [ A \u2764 ] , [ K \u2666 ] , [ J \u2663 ] , [ Q \u2660 ] , [ T \u2764 ] \n\nIf you have `termcolor <http://pypi.python.org/pypi/termcolor>`__\ninstalled, they will be colored as well.\n\nOtherwise move straight to evaluating your hand strength:\n\n.. code:: python\n\n   >>> from treys import Evaluator\n   >>> evaluator = Evaluator()\n   >>> print(evaluator.evaluate(board, hand))\n   1600\n\nHand strength is valued on a scale of 1 to 7462, where 1 is a Royal\nFlush and 7462 is unsuited 7-5-4-3-2, as there are only 7642 distinctly\nranked hands in poker. Once again, refer to my blog post for a more\nmathematically complete explanation of why this is so.\n\nIf you want to deal out cards randomly from a deck, you can also do that\nwith Treys:\n\n.. code:: python\n\n   >>> from treys import Deck\n   >>> deck = Deck()\n   >>> board = deck.draw(5)\n   >>> player1_hand = deck.draw(2)\n   >>> player2_hand = deck.draw(2)\n\nand print them:\n\n::\n\n   >>> Card.print_pretty_cards(board)\n     [ 4 \u2663 ] , [ A \u2660 ] , [ 5 \u2666 ] , [ K \u2663 ] , [ 2 \u2660 ]\n   >>> Card.print_pretty_cards(player1_hand)\n     [ 6 \u2663 ] , [ 7 \u2764 ] \n   >>> Card.print_pretty_cards(player2_hand)\n     [ A \u2663 ] , [ 3 \u2764 ] \n\nLet\u2019s evaluate both hands strength, and then bin them into classes, one\nfor each hand type (High Card, Pair, etc)\n\n.. code:: python\n\n   >>> p1_score = evaluator.evaluate(board, player1_hand)\n   >>> p2_score = evaluator.evaluate(board, player2_hand)\n   >>> p1_class = evaluator.get_rank_class(p1_score)\n   >>> p2_class = evaluator.get_rank_class(p2_score)\n\nor get a human-friendly string to describe the score,\n\n::\n\n   >>> print(\"Player 1 hand rank = %d (%s)\\n\" % (p1_score, evaluator.class_to_string(p1_class)))\n   Player 1 hand rank = 6330 (High Card)\n\n   >>> print(\"Player 2 hand rank = %d (%s)\\n\" % (p2_score, evaluator.class_to_string(p2_class)))\n   Player 2 hand rank = 1609 (Straight)\n\nor, coolest of all, get a blow-by-blow analysis of the stages of the\ngame with relation to hand strength:\n\n::\n\n   >>> hands = [player1_hand, player2_hand]\n   >>> evaluator.hand_summary(board, hands)\n\n   ========== FLOP ==========\n   Player 1 hand = High Card, percentage rank among all hands = 0.893192\n   Player 2 hand = Pair, percentage rank among all hands = 0.474672\n   Player 2 hand is currently winning.\n\n   ========== TURN ==========\n   Player 1 hand = High Card, percentage rank among all hands = 0.848298\n   Player 2 hand = Pair, percentage rank among all hands = 0.452292\n   Player 2 hand is currently winning.\n\n   ========== RIVER ==========\n   Player 1 hand = High Card, percentage rank among all hands = 0.848298\n   Player 2 hand = Straight, percentage rank among all hands = 0.215626\n\n   ========== HAND OVER ==========\n   Player 2 is the winner with a Straight\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ihendley/treys", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "treys", "package_url": "https://pypi.org/project/treys/", "platform": "", "project_url": "https://pypi.org/project/treys/", "project_urls": {"Homepage": "https://github.com/ihendley/treys"}, "release_url": "https://pypi.org/project/treys/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "treys is a pure Python poker hand evaluation library", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A pure Python poker hand evaluation library</p>\n<pre>[ 3 \u2764 ] , [ 3 \u2660 ]\n</pre>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install treys\n</pre>\n</div>\n<div id=\"implementation-notes\">\n<h2>Implementation notes</h2>\n<p>Treys is a Python 3 port of\n<a href=\"https://github.com/worldveil/deuces\" rel=\"nofollow\">Deuces</a>. Most of work is taken\nfrom <a href=\"https://github.com/msaindon/deuces\" rel=\"nofollow\">msaindon\u2019s</a> fork.</p>\n<p>Treys (originally Deuces) was written by <a href=\"http://willdrevo.com/\" rel=\"nofollow\">Will\nDrevo</a> for the MIT Pokerbots Competition. It\nis lightweight and fast. All lookups are done with bit arithmetic and\ndictionary lookups. That said, Treys won\u2019t beat a C implemenation (~250k\neval/s) but it is useful for situations where Python is required or\nwhere bots are allocated reasonable thinking time (human time scale).</p>\n<p>Treys handles 5, 6, and 7 card hand lookups. The 6 and 7 card lookups\nare done by combinatorially evaluating the 5 card choices.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Treys is easy to set up and use.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">treys</span> <span class=\"kn\">import</span> <span class=\"n\">Card</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">card</span> <span class=\"o\">=</span> <span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'Qh'</span><span class=\"p\">)</span>\n</pre>\n<p>Card objects are represented as integers to keep Treys performant and\nlightweight.</p>\n<p>Now let\u2019s create the board and an example Texas Hold\u2019em hand:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'Ah'</span><span class=\"p\">),</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'Kd'</span><span class=\"p\">),</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'Jc'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hand</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">&gt;&gt;&gt;</span>    <span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'Qs'</span><span class=\"p\">),</span>\n<span class=\"o\">&gt;&gt;&gt;</span>    <span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'Th'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">]</span>\n</pre>\n<p>Pretty print card integers to the terminal:</p>\n<pre>&gt;&gt;&gt; Card.print_pretty_cards(board + hand)\n  [ A \u2764 ] , [ K \u2666 ] , [ J \u2663 ] , [ Q \u2660 ] , [ T \u2764 ]\n</pre>\n<p>If you have <a href=\"http://pypi.python.org/pypi/termcolor\" rel=\"nofollow\">termcolor</a>\ninstalled, they will be colored as well.</p>\n<p>Otherwise move straight to evaluating your hand strength:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">treys</span> <span class=\"kn\">import</span> <span class=\"n\">Evaluator</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">evaluator</span> <span class=\"o\">=</span> <span class=\"n\">Evaluator</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">hand</span><span class=\"p\">))</span>\n<span class=\"mi\">1600</span>\n</pre>\n<p>Hand strength is valued on a scale of 1 to 7462, where 1 is a Royal\nFlush and 7462 is unsuited 7-5-4-3-2, as there are only 7642 distinctly\nranked hands in poker. Once again, refer to my blog post for a more\nmathematically complete explanation of why this is so.</p>\n<p>If you want to deal out cards randomly from a deck, you can also do that\nwith Treys:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">treys</span> <span class=\"kn\">import</span> <span class=\"n\">Deck</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">deck</span> <span class=\"o\">=</span> <span class=\"n\">Deck</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">player1_hand</span> <span class=\"o\">=</span> <span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">player2_hand</span> <span class=\"o\">=</span> <span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>and print them:</p>\n<pre>&gt;&gt;&gt; Card.print_pretty_cards(board)\n  [ 4 \u2663 ] , [ A \u2660 ] , [ 5 \u2666 ] , [ K \u2663 ] , [ 2 \u2660 ]\n&gt;&gt;&gt; Card.print_pretty_cards(player1_hand)\n  [ 6 \u2663 ] , [ 7 \u2764 ]\n&gt;&gt;&gt; Card.print_pretty_cards(player2_hand)\n  [ A \u2663 ] , [ 3 \u2764 ]\n</pre>\n<p>Let\u2019s evaluate both hands strength, and then bin them into classes, one\nfor each hand type (High Card, Pair, etc)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1_score</span> <span class=\"o\">=</span> <span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player1_hand</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p2_score</span> <span class=\"o\">=</span> <span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player2_hand</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1_class</span> <span class=\"o\">=</span> <span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">get_rank_class</span><span class=\"p\">(</span><span class=\"n\">p1_score</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p2_class</span> <span class=\"o\">=</span> <span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">get_rank_class</span><span class=\"p\">(</span><span class=\"n\">p2_score</span><span class=\"p\">)</span>\n</pre>\n<p>or get a human-friendly string to describe the score,</p>\n<pre>&gt;&gt;&gt; print(\"Player 1 hand rank = %d (%s)\\n\" % (p1_score, evaluator.class_to_string(p1_class)))\nPlayer 1 hand rank = 6330 (High Card)\n\n&gt;&gt;&gt; print(\"Player 2 hand rank = %d (%s)\\n\" % (p2_score, evaluator.class_to_string(p2_class)))\nPlayer 2 hand rank = 1609 (Straight)\n</pre>\n<p>or, coolest of all, get a blow-by-blow analysis of the stages of the\ngame with relation to hand strength:</p>\n<pre>&gt;&gt;&gt; hands = [player1_hand, player2_hand]\n&gt;&gt;&gt; evaluator.hand_summary(board, hands)\n\n========== FLOP ==========\nPlayer 1 hand = High Card, percentage rank among all hands = 0.893192\nPlayer 2 hand = Pair, percentage rank among all hands = 0.474672\nPlayer 2 hand is currently winning.\n\n========== TURN ==========\nPlayer 1 hand = High Card, percentage rank among all hands = 0.848298\nPlayer 2 hand = Pair, percentage rank among all hands = 0.452292\nPlayer 2 hand is currently winning.\n\n========== RIVER ==========\nPlayer 1 hand = High Card, percentage rank among all hands = 0.848298\nPlayer 2 hand = Straight, percentage rank among all hands = 0.215626\n\n========== HAND OVER ==========\nPlayer 2 is the winner with a Straight\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4190800, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3829a8c5455c539af7102724e5a5df32", "sha256": "e193c2a2daf37a56be44bc36aec5b44018765f8d4b5d8221f551007aed66452d"}, "downloads": -1, "filename": "treys-0.1.tar.gz", "has_sig": false, "md5_digest": "3829a8c5455c539af7102724e5a5df32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10167, "upload_time": "2017-12-11T10:11:22", "upload_time_iso_8601": "2017-12-11T10:11:22.905907Z", "url": "https://files.pythonhosted.org/packages/98/3f/3ea770807fe37a9627d2bdca87c6c8254cac3d6694ed9d70e8597938efa3/treys-0.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ccbe05f2fc6b664d133d5a80b1fcd99a", "sha256": "5e37886499b039a8fc536b7dcedbcee6fbf057bb83576cea7e214810e0eb7145"}, "downloads": -1, "filename": "treys-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ccbe05f2fc6b664d133d5a80b1fcd99a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10786, "upload_time": "2018-08-21T02:53:25", "upload_time_iso_8601": "2018-08-21T02:53:25.959732Z", "url": "https://files.pythonhosted.org/packages/6d/bd/62a04aa40980ff9f63eda8addcbeb75752064953111d5dbc2ed1ec386989/treys-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d871bc5aafc640a62ca41e675bafe2de", "sha256": "98a3511546cb00a7852a5114ba0754159dfa191a7b8a03fa52564933fbff7d25"}, "downloads": -1, "filename": "treys-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d871bc5aafc640a62ca41e675bafe2de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10524, "upload_time": "2018-08-21T02:53:27", "upload_time_iso_8601": "2018-08-21T02:53:27.117858Z", "url": "https://files.pythonhosted.org/packages/8e/b9/b537686078c938e0c5d59c707d002d3ffa843f0cf1a7578a2872b56cb2cd/treys-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ccbe05f2fc6b664d133d5a80b1fcd99a", "sha256": "5e37886499b039a8fc536b7dcedbcee6fbf057bb83576cea7e214810e0eb7145"}, "downloads": -1, "filename": "treys-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ccbe05f2fc6b664d133d5a80b1fcd99a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10786, "upload_time": "2018-08-21T02:53:25", "upload_time_iso_8601": "2018-08-21T02:53:25.959732Z", "url": "https://files.pythonhosted.org/packages/6d/bd/62a04aa40980ff9f63eda8addcbeb75752064953111d5dbc2ed1ec386989/treys-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d871bc5aafc640a62ca41e675bafe2de", "sha256": "98a3511546cb00a7852a5114ba0754159dfa191a7b8a03fa52564933fbff7d25"}, "downloads": -1, "filename": "treys-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d871bc5aafc640a62ca41e675bafe2de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10524, "upload_time": "2018-08-21T02:53:27", "upload_time_iso_8601": "2018-08-21T02:53:27.117858Z", "url": "https://files.pythonhosted.org/packages/8e/b9/b537686078c938e0c5d59c707d002d3ffa843f0cf1a7578a2872b56cb2cd/treys-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:22 2020"}