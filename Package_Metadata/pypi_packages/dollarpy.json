{"info": {"author": "Simon Waloschek", "author_email": "simon.waloschek@posteo.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "dollarpy\r\n========\r\n\r\n*dollarpy* is a python implementation of the `$P Point-Cloud\r\nRecognizer <http://depts.washington.edu/aimgroup/proj/dollar/pdollar.html>`__.\r\n\r\n|License|\r\n\r\n|Python Compatibility| |PyPI Version| |Format|\r\n\r\n|Build Status| |Coverage Status|\r\n\r\nFrom the website:\r\n\r\n    The $P Point-Cloud Recognizer is a 2-D gesture recognizer designed\r\n    for rapid prototyping of gesture-based user interfaces. In machine\r\n    learning terms, $P is an instance-based nearest-neighbor classifier\r\n    with a Euclidean scoring function, i.e., a geometric template\r\n    matcher.\r\n\r\n    $P is the latest in the dollar family of recognizers that includes\r\n    $1 for unistrokes and $N for multistrokes. Although about half of\r\n    $P\u2019s code is from $1, unlike both $1 and $N, $P does not represent\r\n    gestures as ordered series of points (i.e., strokes), but as\r\n    unordered point-clouds. By representing gestures as point-clouds, $P\r\n    can handle both unistrokes and multistrokes equivalently and without\r\n    the combinatoric overhead of $N. When comparing two point-clouds, $P\r\n    solves the classic assignment problem between two bipartite graphs\r\n    using an approximation of the Hungarian algorithm.\r\n\r\nVatavu, R. D., Anthony, L., & Wobbrock, J. O., `\"Gestures as Point\r\nClouds: A $P Recognizer for User Interface\r\nPrototypes\" <http://faculty.washington.edu/wobbrock/pubs/icmi-12.pdf>`__,\r\nin: *Proceedings of the 14th ACM International Conference on Multimodal\r\nInteraction (ICMI)*, Santa Monica, LA, USA, 2012, pp. 273-280.\r\n\r\nInstallation\r\n------------\r\n\r\n*dollarpy* can be installed using pip:\r\n\r\n::\r\n\r\n    pip install dollarpy\r\n\r\nUsage\r\n-----\r\n\r\n*dollarpy* is used in 3 steps:\r\n\r\n.. code:: python\r\n\r\n    from dollarpy import Recognizer, Template, Point\r\n\r\n    # Define 'Template' gestures, each consisting of a name and a list of 'Point' elements.\r\n    # These 'Point' elements have 'x' and 'y' coordinates and optionally the stroke index a point belongs to.\r\n    tmpl_1 = Template('X', [\r\n        Point(0, 0, 1),\r\n        Point(1, 1, 1),\r\n        Point(0, 1, 2),\r\n        Point(1, 0, 2)])\r\n    tmpl_2 = Template('line', [\r\n        Point(0, 0),\r\n        Point(1, 0)])\r\n\r\n    # Create a 'Recognizer' object and pass the created 'Template' objects as a list.\r\n    recognizer = Recognizer([tmpl_1, tmpl_2])\r\n\r\n    # Call 'recognize(...)' to match a list of 'Point' elements to the previously defined templates.\r\n    result = recognizer.recognize([\r\n        Point( 31, 141, 1),\r\n        Point(109, 222, 1),\r\n        Point( 22, 219, 2),\r\n        Point(113, 146, 2)])\r\n    print(result)  # Output: ('X', 0.733770116545184)\r\n\r\n.. |License| image:: https://img.shields.io/pypi/l/dollarpy.svg\r\n   :target: https://www.gnu.org/licenses/lgpl.html\r\n.. |Python Compatibility| image:: https://img.shields.io/pypi/pyversions/dollarpy.svg\r\n   :target: https://pypi.python.org/pypi/dollarpy/\r\n.. |PyPI Version| image:: https://img.shields.io/pypi/v/dollarpy.svg\r\n   :target: https://pypi.python.org/pypi/dollarpy/\r\n.. |Format| image:: https://img.shields.io/pypi/format/dollarpy.svg\r\n   :target: https://pypi.python.org/pypi/dollarpy/\r\n.. |Build Status| image:: https://img.shields.io/travis/sonovice/dollarpy.svg\r\n   :target: https://travis-ci.org/sonovice/dollarpy\r\n.. |Coverage Status| image:: https://img.shields.io/codecov/c/github/sonovice/dollarpy.svg\r\n   :target: https://codecov.io/gh/sonovice/dollarpy", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sonovice/dollarpy", "keywords": "gesture", "license": "LGPLv3+", "maintainer": "", "maintainer_email": "", "name": "dollarpy", "package_url": "https://pypi.org/project/dollarpy/", "platform": "", "project_url": "https://pypi.org/project/dollarpy/", "project_urls": {"Homepage": "https://github.com/sonovice/dollarpy"}, "release_url": "https://pypi.org/project/dollarpy/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "A python imlementation of the $P Point-Cloud Recognizer", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>dollarpy</em> is a python implementation of the <a href=\"http://depts.washington.edu/aimgroup/proj/dollar/pdollar.html\" rel=\"nofollow\">$P Point-Cloud\nRecognizer</a>.</p>\n<p><a href=\"https://www.gnu.org/licenses/lgpl.html\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/829e249a61dc682300ba27cb5395315f3a60b1c1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f646f6c6c617270792e737667\"></a></p>\n<p><a href=\"https://pypi.python.org/pypi/dollarpy/\" rel=\"nofollow\"><img alt=\"Python Compatibility\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0bd388b30c4a181899cb0806f612198b96506d8e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646f6c6c617270792e737667\"></a> <a href=\"https://pypi.python.org/pypi/dollarpy/\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21bf0452c51e76981f7d53c87e3ae2edffe2eb9b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646f6c6c617270792e737667\"></a> <a href=\"https://pypi.python.org/pypi/dollarpy/\" rel=\"nofollow\"><img alt=\"Format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68b7d4d1c8870e5c5e99d43cdb9186ce87e25113/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f646f6c6c617270792e737667\"></a></p>\n<p><a href=\"https://travis-ci.org/sonovice/dollarpy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d4bca768826fdad2743837f91f7f807e303b23a1/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f736f6e6f766963652f646f6c6c617270792e737667\"></a> <a href=\"https://codecov.io/gh/sonovice/dollarpy\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73f05733a9b62f6f94334f621866d94b82ace6cf/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f736f6e6f766963652f646f6c6c617270792e737667\"></a></p>\n<p>From the website:</p>\n<blockquote>\n<p>The $P Point-Cloud Recognizer is a 2-D gesture recognizer designed\nfor rapid prototyping of gesture-based user interfaces. In machine\nlearning terms, $P is an instance-based nearest-neighbor classifier\nwith a Euclidean scoring function, i.e., a geometric template\nmatcher.</p>\n<p>$P is the latest in the dollar family of recognizers that includes\n$1 for unistrokes and $N for multistrokes. Although about half of\n$P\u2019s code is from $1, unlike both $1 and $N, $P does not represent\ngestures as ordered series of points (i.e., strokes), but as\nunordered point-clouds. By representing gestures as point-clouds, $P\ncan handle both unistrokes and multistrokes equivalently and without\nthe combinatoric overhead of $N. When comparing two point-clouds, $P\nsolves the classic assignment problem between two bipartite graphs\nusing an approximation of the Hungarian algorithm.</p>\n</blockquote>\n<p>Vatavu, R. D., Anthony, L., &amp; Wobbrock, J. O., <a href=\"http://faculty.washington.edu/wobbrock/pubs/icmi-12.pdf\" rel=\"nofollow\">\u201cGestures as Point\nClouds: A $P Recognizer for User Interface\nPrototypes\u201d</a>,\nin: <em>Proceedings of the 14th ACM International Conference on Multimodal\nInteraction (ICMI)</em>, Santa Monica, LA, USA, 2012, pp. 273-280.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><em>dollarpy</em> can be installed using pip:</p>\n<pre>pip install dollarpy\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><em>dollarpy</em> is used in 3 steps:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dollarpy</span> <span class=\"kn\">import</span> <span class=\"n\">Recognizer</span><span class=\"p\">,</span> <span class=\"n\">Template</span><span class=\"p\">,</span> <span class=\"n\">Point</span>\n\n<span class=\"c1\"># Define 'Template' gestures, each consisting of a name and a list of 'Point' elements.</span>\n<span class=\"c1\"># These 'Point' elements have 'x' and 'y' coordinates and optionally the stroke index a point belongs to.</span>\n<span class=\"n\">tmpl_1</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n<span class=\"n\">tmpl_2</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s1\">'line'</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)])</span>\n\n<span class=\"c1\"># Create a 'Recognizer' object and pass the created 'Template' objects as a list.</span>\n<span class=\"n\">recognizer</span> <span class=\"o\">=</span> <span class=\"n\">Recognizer</span><span class=\"p\">([</span><span class=\"n\">tmpl_1</span><span class=\"p\">,</span> <span class=\"n\">tmpl_2</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Call 'recognize(...)' to match a list of 'Point' elements to the previously defined templates.</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">recognizer</span><span class=\"o\">.</span><span class=\"n\">recognize</span><span class=\"p\">([</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">141</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"mi\">222</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">219</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n    <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">113</span><span class=\"p\">,</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>  <span class=\"c1\"># Output: ('X', 0.733770116545184)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2378667, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b0d2a7f251f43381324212f96a567c46", "sha256": "92a517bc6ad0acf49847b75a468711e52a481f5bed28cb87fba97997b9f0db43"}, "downloads": -1, "filename": "dollarpy-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b0d2a7f251f43381324212f96a567c46", "packagetype": "bdist_wheel", "python_version": "any", "requires_python": null, "size": 6435, "upload_time": "2016-09-29T07:21:18", "upload_time_iso_8601": "2016-09-29T07:21:18.377229Z", "url": "https://files.pythonhosted.org/packages/b5/d3/b7183a7dca7b313e2e0e01de4cb388be042a8fe682a360e8d86f5799c259/dollarpy-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f53b546f72b12b82271eb5be555441ba", "sha256": "04332cf136d85a3e484fb9e137bb83cfee80966bfd63d4a8f71b4468f2a88cca"}, "downloads": -1, "filename": "dollarpy-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f53b546f72b12b82271eb5be555441ba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3724, "upload_time": "2016-10-03T21:53:12", "upload_time_iso_8601": "2016-10-03T21:53:12.656349Z", "url": "https://files.pythonhosted.org/packages/5b/8d/2762164f51a524c35ce648493c1216e43669214ab529c66855ed097a8dc1/dollarpy-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc88d1a392076f533a930d456c0ba0da", "sha256": "f0df2333279f17bbb579f8c25bfd0105074fc3003a58881953576708513e0ca6"}, "downloads": -1, "filename": "dollarpy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fc88d1a392076f533a930d456c0ba0da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4121, "upload_time": "2016-10-03T21:53:16", "upload_time_iso_8601": "2016-10-03T21:53:16.438849Z", "url": "https://files.pythonhosted.org/packages/9f/58/a0f8aea15c3d6aa277de148c5b67f5dbbbf77886148b2421c5e519ed4ad3/dollarpy-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f53b546f72b12b82271eb5be555441ba", "sha256": "04332cf136d85a3e484fb9e137bb83cfee80966bfd63d4a8f71b4468f2a88cca"}, "downloads": -1, "filename": "dollarpy-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f53b546f72b12b82271eb5be555441ba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3724, "upload_time": "2016-10-03T21:53:12", "upload_time_iso_8601": "2016-10-03T21:53:12.656349Z", "url": "https://files.pythonhosted.org/packages/5b/8d/2762164f51a524c35ce648493c1216e43669214ab529c66855ed097a8dc1/dollarpy-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc88d1a392076f533a930d456c0ba0da", "sha256": "f0df2333279f17bbb579f8c25bfd0105074fc3003a58881953576708513e0ca6"}, "downloads": -1, "filename": "dollarpy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fc88d1a392076f533a930d456c0ba0da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4121, "upload_time": "2016-10-03T21:53:16", "upload_time_iso_8601": "2016-10-03T21:53:16.438849Z", "url": "https://files.pythonhosted.org/packages/9f/58/a0f8aea15c3d6aa277de148c5b67f5dbbbf77886148b2421c5e519ed4ad3/dollarpy-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:30 2020"}