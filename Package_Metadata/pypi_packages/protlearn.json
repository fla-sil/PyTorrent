{"info": {"author": "Thomas Dorfer", "author_email": "thomas.a.dorfer@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "[![Travis (.org)](https://img.shields.io/travis/tadorfer/ProtLearn)](https://travis-ci.org/tadorfer/ProtLearn)\n[![PyPI](https://img.shields.io/pypi/v/ProtLearn)](https://pypi.org/project/protlearn/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/ProtLearn)](https://img.shields.io/pypi/pyversions/ProtLearn)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson.mit-license.org/)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/protlearn)](https://pypistats.org/packages/protlearn)\n\n# protlearn\n\nprotlearn is a Python package for the preprocessing, feature engineering, and\nvisualization of amino acid sequences (i.e. proteins and peptides). Its \nfunctions are particularly suited for the preparation of classification and \nregression tasks.\n\n## Installation\n\n### Dependencies\n\n- NumPy \n- Pandas \n- scikit-learn\n- seaborn\n- matplotlib\n\n### User Installation\n\n```\n$ pip install protlearn\n```\n\n## Documentation\n\n* [Preprocessing](#preprocessing)\n    - [txt_to_df](#txt_to_df)\n    - [integer_encode](#integer_encode)\n* [Feature Engineering](#feature-engineering)\n    - [length](#length)\n    - [composition](#composition)\n    - [aaindex1](#aaindex1)\n    - [aaindex2](#aaindex2)\n    - [aaindex3](#aaindex3)\n    - [ngram_composition](#ngram_composition)\n    - [position_enrichment](#position_enrichment)\n* [Visualization](#visualization)  \n    - [viz_length](#viz_length)\n    - [viz_composition](#viz_composition)\n    - [viz_ngram](#viz_ngram)\n\n\n### Preprocessing\n\n#### `txt_to_df`\n\nThis function converts sequences from a raw `.txt file` into a Python-friendly \nPandas DataFrame with the column name 'Sequence'. For classification tasks, it\nprovides the option of including an additional class column with the name \n'Label' by passing an integer value (denoting the class) to the function \nargument `label`. \n\n<br>\n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df\n\ndf = txt_to_df(test_seq.txt)\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/text_to_df.png\" height=\"260\" width=\"460\">\n</p>\n\nFor more information --> `help(txt_to_df`)\n\n<br>\n\n#### `integer_encode`\n\nThis function converts amino acid sequences into corresponding integer values \nbetween 1-20. Zero, in this case, is reserved for the optional `padding` of \nthese sequences at the end to make them conform to a universal length (i.e. the \nlength of the longest sequence in the dataset).\n\nThe following amino acid order is used for conversion (1-20):\n\nA C D E F G H I K L M N P Q R S T V W Y\n\n<br>\n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df, integer_encode\n\ndf = txt_to_df(test_seq.txt)\nenc = integer_encode(df, padding=True)\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/integer_encode.png\" height=\"220\" width=\"560\">\n</p>\n\nIf `padding=True`, a numpy array of shape (n_samples, longest_sequence) will be\nreturned. Otherwise, a numpy array of shape (n_samples, ) containing each \ninteger-encoded sequence as separate numpy arrays will be returned.\n\nFor more information --> `help(integer_encode)`\n\n<br>\n\n### Feature engineering\n\n**Note**: For the following functions, except `length`, features can be \ncomputed for the entire amino acid sequences (default), or only for a desired\nfraction of the sequences. The keyword arguments `start` and `stop` can be used\nto define this fraction. For instance, if you have a sequence 'ACDIKLR', and you\nare only interested in amino acid positions 3-5, because this region is claimed\nto be important, then by simply defining `start=3` and `end=5`, the following \nfeatures will only be computed for 'DIK'.\n\n#### `length`\n\nThis function returns an n-dimensional array containing the length of all\nsequences. The `method` can also be set to 'ohe', short for one-hot-encoding,\nwhich leads to the generation of an array with n rows and the number of columns\ncorresponding to the number of unique sequence lengths.\n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df, length\n\ndf = txt_to_df(test_seq.txt)\nlengths = length(df)\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/length.png\" height=\"300\" width=\"460\">\n</p>\n\nThis illustration shows that, if `method='ohe'`, the columns correspond to the \nunique lengths of the sequences (in order). In this case, there is no sequence \nwith length 8, so the columns correspond to sequence lengths 6, 7, and 9. \n\nFor more information --> `help(length)`\n\n<br>\n\n#### `composition`\n\nThis function returns an array of shape (n_samples, n_unique_amino_acids) \ncontaining the absolute frequencies of each amino acid that the sequence is \ncomprised of. If `method='relative'`, the absolute count of each amino acid is\ndivided by the sequence length and returned as a fraction, whose number of \ndecimals can be chosen with the argument `round_fraction`. \n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df, composition\n\ndf = txt_to_df(test_seq.txt)\ncomp = composition(df, method='absolute')\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/composition.png\" height=\"250\" width=\"590\">\n</p>\n\nThis illustration shows the absolute frequency of amino acids of each input\nsequence. If a particular amino acid is not present in all of the input \nsequences, its column will not be returned to avoid all-zero columns. Therefore,\nthe number of columns of the returned dataframe is not always 20, but can vary.\n\nFor more information --> `help(composition)`\n\n<br>\n\n#### `aaindex1`\n\nThis function computes the physicochemical properties of each amino acid in the\nsequence and returns the mean of each index per sequence. Currently, ver.9.2 \n(release Feb, 2017) contains 566 indices. However, due to 13 of these indices\ncontaining NaNs, the returned dataframe will have a column size of 553-566, \ndepending on the number of amino acids in the sequence whose index is NaN, in\nwhich case this index column will be removed. More information on the AAindex1 \ncan be found on [GenomeNet Database Resources](https://www.genome.jp/aaindex/).\n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df, aaindex1\n\ndf = txt_to_df(test_seq.txt)\naand1 = aaindex1(df, standardize='none')\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/aaindex1.png\" height=\"250\" width=\"760\">\n</p>\n\nThis illustration shows how AAIndex1 is computed, using 'ARN' as a sample \nsequence. It is highly recommended to `standardize` the data if the resulting\ndataframe is intended to serve as input to a classifier/regressor.\n\nFor more information --> `help(aaindex1)`\n\n<br>\n\n#### `aaindex2`\n\nThis function computes the substitution matrices of each amino acid pair of a \nsequence and returns the mean of all substitution scores per sequence. \nCurrently, ver.9.2 (release Feb, 2017) contains 94 indices. However, due to two\nof these indices containing NaNs, the column size of the returned dataframe can\nvary between 92-94, depending on whether any of the sequences contains an amino\nacid pair whose index is NaN, in which case the entire column will be removed.\nFurthermore, some of the square and rectangular matrices originally include gaps \nand various metrics for cysteines (disulfide-bonded and free), which are removed\nfor all computations (only the standard 20 amino acids are used here). More \ninformation on the AAindex2 can be found on [GenomeNet Database Resources](https://www.genome.jp/aaindex/).\n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df, aaindex2\n\ndf = txt_to_df(test_seq.txt)\naaind2 = aaindex2(df, standardize='none')\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/aaindex2.png\" height=\"420\" width=\"760\">\n</p>\n\nThis illustration shows how AAIndex2 is computed, using 'ARN' as a sample \nsequence. It also shows that this index contains both lower triangular as well \nas square matrices. It is highly recommended to `standardize` the data if the\nresulting dataframe is intended to serve as input to a classifier/regressor.\n\nFor more information --> `help(aaindex2)`\n\n<br>\n\n#### `aaindex3`\n\nThis function computes the pairwise contact potentials between all amino acid\npairs in a sequence and returns the mean of all contact potentials per sequence.\nCurrently, ver.9.2 (release Feb, 2017) contains 47 indices. However, due to four\nof these indices containing NaNs, the column size of the returned dataframe can\nvary between 43-47, depending on whether any of the sequences contains an amino\nacid pair whose index is NaN, in which case the entire column will be removed.\nMore information on the AAindex3 can be found on [GenomeNet Database Resources](https://www.genome.jp/aaindex/).\n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df, aaindex3\n\ndf = txt_to_df(test_seq.txt)\naaind3 = aaindex3(df, standardize='none')\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/aaindex3.png\" height=\"420\" width=\"760\">\n</p>\n\nThis illustration shows how AAIndex3 is computed, using 'ARN' as a sample \nsequence. As with AAIndex2, is also contains both lower triangular as well as\nsquare matrices. It is highly recommended to `standardize` the data if the\nresulting dataframe is intended to serve as input to a classifier/regressor.\n\nFor more information --> `help(aaindex3)`\n\n<br>\n\n#### `ngram_composition`\n\nThis function computes the di-, tri-, or quadpeptide composition of any given\namino acid sequence. \n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df, ngram_composition\n\ndf = txt_to_df(test_seq.txt)\nngram = ngram_composition(df)\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/ngram.png\" height=\"350\" width=\"450\">\n</p>\n\nThis illustration shows the di-, tri-, and quadpeptide composition of the \nsequence 'ALLLFTY'. As can be observed, not all possible combinations (20^ngram)\nare returned, but only those whose values are non-zero.\n\nFor more information --> `help(ngram_composition)`\n\n<br>\n\n#### `position_enrichment`\n\nThis function computes a binary feature vector or matrix indicative of whether \nchosen amino acids are present at the given positions (1) or not (0).\n\n<b>Example</b>\n\n```python\nfrom protlearn import txt_to_df, position_enrichment\n\ndf = txt_to_df(test_seq.txt)\npos = position_enrichment(df, [1, 4], ['A', 'M'])\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/pos.png\" height=\"230\" width=\"450\">\n</p>\n\nThis illustration shows the presence of position/amino acid groups 1A (amino \nacid 'A' at position 1) and 4M (amino acid 'M' at position 4).\n\n**Note:** This function uses conventional, non-Pythonic indexing, starting at 1,\nrather than 0. \n\nFor more information --> `help(position_enrichment)`\n\n<br>\n\n### Visualization\n\nThe following bar plots use a `coolwarm` color palette, meaning that there is a\ngradient from higher bars (red) to lower bars (blue).\n\n#### `viz_length`\n\nThis function returns a bar plot displaying the frequency of sequence lengths\nin descending order.\n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df, viz_length\n\ndf = txt_to_df(test_seq.txt)\nviz_length(df)\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/viz_len.png\" height=\"240\" width=\"580\">\n</p>\n\nThis illustration shows the frequency of all lengths of sequences found in \n`test_seq.txt`. The data used for this plot can also be retrieved by passing the\nargument `get_data=True`. In this case, the function should be called as \nfollows: `lengths = viz_length(df, get_data=True)`.\n\nFor more information --> `help(viz_length)`\n\n<br>\n\n#### `viz_composition`\n\nThis function returns a bar plot displaying the frequency of amino acids\npresent in the dataset (in descending order).\n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df, viz_composition\n\ndf = txt_to_df(test_seq.txt)\nviz_composition(df)\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/viz_comp.png\" height=\"250\" width=\"620\">\n</p>\n\nThis illustration shows the frequency of all amino acids of sequences found in \n`test_seq.txt`. The data used for this plot can also be retrieved by passing the\nargument `get_data=True`. In this case, the function should be called as \nfollows: `comp = viz_composition(df, get_data=True)`.\n\nFor more information --> `help(viz_composition)`\n\n<br>\n\n#### `viz_ngram`\n\nThis function returns a bar plot displaying the frequency of the selected ngram\ncomposition (di-, tri-, or quadpeptide) of the sequence data (in descending \norder).\n\n<b>Example:</b>\n\n```python\nfrom protlearn import txt_to_df, viz_ngram\n\ndf = txt_to_df(test_seq.txt)\nviz_ngram(df, ngram=2, top=20)\n```\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/tadorfer/protlearn/master/dems/viz_ng.png\" height=\"250\" width=\"630\">\n</p>\n\nThis illustration shows the frequency of the top 20% (`top=20`) of dipeptide \ncombinations (`ngram=2`) of sequences found in `test_seq.txt`. The data used for\nthis plot can also be retrieved by passing the argument `get_data=True`. In this\ncase, the function should be called as follows: \n`ng = viz_ngram(df, get_data=True)`.\n\nFor more information --> `help(viz_ngram)`\n\n<br>\n\n## Authors\n\nThis package is maintained by [Thomas Dorfer](https://github.com/tadorfer)\n\n## License\n\nThis package is licensed under the [MIT License](https://github.com/tadorfer/ProtLearn/blob/master/LICENSE).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/tadorfer/ProtLearn/archive/v1.8.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tadorfer/ProtLearn", "keywords": "amino acids,proteins,peptides,preprocessing,feature engineering,visualization", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "protlearn", "package_url": "https://pypi.org/project/protlearn/", "platform": "", "project_url": "https://pypi.org/project/protlearn/", "project_urls": {"Download": "https://github.com/tadorfer/ProtLearn/archive/v1.8.tar.gz", "Homepage": "https://github.com/tadorfer/ProtLearn"}, "release_url": "https://pypi.org/project/protlearn/1.8/", "requires_dist": null, "requires_python": "", "summary": "Preprocessing, feature engineering, and visualization of protein and peptide sequences", "version": "1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/tadorfer/ProtLearn\" rel=\"nofollow\"><img alt=\"Travis (.org)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb7d98512b4eecc5375125e16aa55811bb2bf567/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7461646f726665722f50726f744c6561726e\"></a>\n<a href=\"https://pypi.org/project/protlearn/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4833eceaf568b5051cff6240a69a4f9737922cbe/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f50726f744c6561726e\"></a>\n<a href=\"https://img.shields.io/pypi/pyversions/ProtLearn\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b29d2f2e4667298bf8fc940c6c7d7385ed89eb5d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f50726f744c6561726e\"></a>\n<a href=\"https://lbesson.mit-license.org/\" rel=\"nofollow\"><img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a>\n<a href=\"https://pypistats.org/packages/protlearn\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/824f3342c7ed0cd592b43cd7c97dba9cb585f029/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f70726f746c6561726e\"></a></p>\n<h1>protlearn</h1>\n<p>protlearn is a Python package for the preprocessing, feature engineering, and\nvisualization of amino acid sequences (i.e. proteins and peptides). Its\nfunctions are particularly suited for the preparation of classification and\nregression tasks.</p>\n<h2>Installation</h2>\n<h3>Dependencies</h3>\n<ul>\n<li>NumPy</li>\n<li>Pandas</li>\n<li>scikit-learn</li>\n<li>seaborn</li>\n<li>matplotlib</li>\n</ul>\n<h3>User Installation</h3>\n<pre><code>$ pip install protlearn\n</code></pre>\n<h2>Documentation</h2>\n<ul>\n<li><a href=\"#preprocessing\" rel=\"nofollow\">Preprocessing</a>\n<ul>\n<li><a href=\"#txt_to_df\" rel=\"nofollow\">txt_to_df</a></li>\n<li><a href=\"#integer_encode\" rel=\"nofollow\">integer_encode</a></li>\n</ul>\n</li>\n<li><a href=\"#feature-engineering\" rel=\"nofollow\">Feature Engineering</a>\n<ul>\n<li><a href=\"#length\" rel=\"nofollow\">length</a></li>\n<li><a href=\"#composition\" rel=\"nofollow\">composition</a></li>\n<li><a href=\"#aaindex1\" rel=\"nofollow\">aaindex1</a></li>\n<li><a href=\"#aaindex2\" rel=\"nofollow\">aaindex2</a></li>\n<li><a href=\"#aaindex3\" rel=\"nofollow\">aaindex3</a></li>\n<li><a href=\"#ngram_composition\" rel=\"nofollow\">ngram_composition</a></li>\n<li><a href=\"#position_enrichment\" rel=\"nofollow\">position_enrichment</a></li>\n</ul>\n</li>\n<li><a href=\"#visualization\" rel=\"nofollow\">Visualization</a>\n<ul>\n<li><a href=\"#viz_length\" rel=\"nofollow\">viz_length</a></li>\n<li><a href=\"#viz_composition\" rel=\"nofollow\">viz_composition</a></li>\n<li><a href=\"#viz_ngram\" rel=\"nofollow\">viz_ngram</a></li>\n</ul>\n</li>\n</ul>\n<h3>Preprocessing</h3>\n<h4><code>txt_to_df</code></h4>\n<p>This function converts sequences from a raw <code>.txt file</code> into a Python-friendly\nPandas DataFrame with the column name 'Sequence'. For classification tasks, it\nprovides the option of including an additional class column with the name\n'Label' by passing an integer value (denoting the class) to the function\nargument <code>label</code>.</p>\n<br>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"260\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90ca2dbb864c7f608c89bcf9c9d185d1215abe7b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f746578745f746f5f64662e706e67\" width=\"460\">\n</p>\n<p>For more information --&gt; <code>help(txt_to_df</code>)</p>\n<br>\n<h4><code>integer_encode</code></h4>\n<p>This function converts amino acid sequences into corresponding integer values\nbetween 1-20. Zero, in this case, is reserved for the optional <code>padding</code> of\nthese sequences at the end to make them conform to a universal length (i.e. the\nlength of the longest sequence in the dataset).</p>\n<p>The following amino acid order is used for conversion (1-20):</p>\n<p>A C D E F G H I K L M N P Q R S T V W Y</p>\n<br>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">integer_encode</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"n\">integer_encode</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"220\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/642ee2382bef5142c15947c87ce256b4d068eb3f/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f696e74656765725f656e636f64652e706e67\" width=\"560\">\n</p>\n<p>If <code>padding=True</code>, a numpy array of shape (n_samples, longest_sequence) will be\nreturned. Otherwise, a numpy array of shape (n_samples, ) containing each\ninteger-encoded sequence as separate numpy arrays will be returned.</p>\n<p>For more information --&gt; <code>help(integer_encode)</code></p>\n<br>\n<h3>Feature engineering</h3>\n<p><strong>Note</strong>: For the following functions, except <code>length</code>, features can be\ncomputed for the entire amino acid sequences (default), or only for a desired\nfraction of the sequences. The keyword arguments <code>start</code> and <code>stop</code> can be used\nto define this fraction. For instance, if you have a sequence 'ACDIKLR', and you\nare only interested in amino acid positions 3-5, because this region is claimed\nto be important, then by simply defining <code>start=3</code> and <code>end=5</code>, the following\nfeatures will only be computed for 'DIK'.</p>\n<h4><code>length</code></h4>\n<p>This function returns an n-dimensional array containing the length of all\nsequences. The <code>method</code> can also be set to 'ohe', short for one-hot-encoding,\nwhich leads to the generation of an array with n rows and the number of columns\ncorresponding to the number of unique sequence lengths.</p>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">length</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">lengths</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"300\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4d5e18025e98b9cf543df739f6fe3e38e2c17db/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f6c656e6774682e706e67\" width=\"460\">\n</p>\n<p>This illustration shows that, if <code>method='ohe'</code>, the columns correspond to the\nunique lengths of the sequences (in order). In this case, there is no sequence\nwith length 8, so the columns correspond to sequence lengths 6, 7, and 9.</p>\n<p>For more information --&gt; <code>help(length)</code></p>\n<br>\n<h4><code>composition</code></h4>\n<p>This function returns an array of shape (n_samples, n_unique_amino_acids)\ncontaining the absolute frequencies of each amino acid that the sequence is\ncomprised of. If <code>method='relative'</code>, the absolute count of each amino acid is\ndivided by the sequence length and returned as a fraction, whose number of\ndecimals can be chosen with the argument <code>round_fraction</code>.</p>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">composition</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">comp</span> <span class=\"o\">=</span> <span class=\"n\">composition</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'absolute'</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"250\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa504349bfb1d38022a54b7f079c4d0ab9048dd1/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f636f6d706f736974696f6e2e706e67\" width=\"590\">\n</p>\n<p>This illustration shows the absolute frequency of amino acids of each input\nsequence. If a particular amino acid is not present in all of the input\nsequences, its column will not be returned to avoid all-zero columns. Therefore,\nthe number of columns of the returned dataframe is not always 20, but can vary.</p>\n<p>For more information --&gt; <code>help(composition)</code></p>\n<br>\n<h4><code>aaindex1</code></h4>\n<p>This function computes the physicochemical properties of each amino acid in the\nsequence and returns the mean of each index per sequence. Currently, ver.9.2\n(release Feb, 2017) contains 566 indices. However, due to 13 of these indices\ncontaining NaNs, the returned dataframe will have a column size of 553-566,\ndepending on the number of amino acids in the sequence whose index is NaN, in\nwhich case this index column will be removed. More information on the AAindex1\ncan be found on <a href=\"https://www.genome.jp/aaindex/\" rel=\"nofollow\">GenomeNet Database Resources</a>.</p>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">aaindex1</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">aand1</span> <span class=\"o\">=</span> <span class=\"n\">aaindex1</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">standardize</span><span class=\"o\">=</span><span class=\"s1\">'none'</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"250\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4278d4efb75d741e293db52081e8bb865684b916/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f6161696e646578312e706e67\" width=\"760\">\n</p>\n<p>This illustration shows how AAIndex1 is computed, using 'ARN' as a sample\nsequence. It is highly recommended to <code>standardize</code> the data if the resulting\ndataframe is intended to serve as input to a classifier/regressor.</p>\n<p>For more information --&gt; <code>help(aaindex1)</code></p>\n<br>\n<h4><code>aaindex2</code></h4>\n<p>This function computes the substitution matrices of each amino acid pair of a\nsequence and returns the mean of all substitution scores per sequence.\nCurrently, ver.9.2 (release Feb, 2017) contains 94 indices. However, due to two\nof these indices containing NaNs, the column size of the returned dataframe can\nvary between 92-94, depending on whether any of the sequences contains an amino\nacid pair whose index is NaN, in which case the entire column will be removed.\nFurthermore, some of the square and rectangular matrices originally include gaps\nand various metrics for cysteines (disulfide-bonded and free), which are removed\nfor all computations (only the standard 20 amino acids are used here). More\ninformation on the AAindex2 can be found on <a href=\"https://www.genome.jp/aaindex/\" rel=\"nofollow\">GenomeNet Database Resources</a>.</p>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">aaindex2</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">aaind2</span> <span class=\"o\">=</span> <span class=\"n\">aaindex2</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">standardize</span><span class=\"o\">=</span><span class=\"s1\">'none'</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"420\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e05dd68d4aefce0d3ef35e316ff36f4cdaf29d9b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f6161696e646578322e706e67\" width=\"760\">\n</p>\n<p>This illustration shows how AAIndex2 is computed, using 'ARN' as a sample\nsequence. It also shows that this index contains both lower triangular as well\nas square matrices. It is highly recommended to <code>standardize</code> the data if the\nresulting dataframe is intended to serve as input to a classifier/regressor.</p>\n<p>For more information --&gt; <code>help(aaindex2)</code></p>\n<br>\n<h4><code>aaindex3</code></h4>\n<p>This function computes the pairwise contact potentials between all amino acid\npairs in a sequence and returns the mean of all contact potentials per sequence.\nCurrently, ver.9.2 (release Feb, 2017) contains 47 indices. However, due to four\nof these indices containing NaNs, the column size of the returned dataframe can\nvary between 43-47, depending on whether any of the sequences contains an amino\nacid pair whose index is NaN, in which case the entire column will be removed.\nMore information on the AAindex3 can be found on <a href=\"https://www.genome.jp/aaindex/\" rel=\"nofollow\">GenomeNet Database Resources</a>.</p>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">aaindex3</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">aaind3</span> <span class=\"o\">=</span> <span class=\"n\">aaindex3</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">standardize</span><span class=\"o\">=</span><span class=\"s1\">'none'</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"420\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/82fe238baa4b3a1af584f84f07ae0303ec86a147/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f6161696e646578332e706e67\" width=\"760\">\n</p>\n<p>This illustration shows how AAIndex3 is computed, using 'ARN' as a sample\nsequence. As with AAIndex2, is also contains both lower triangular as well as\nsquare matrices. It is highly recommended to <code>standardize</code> the data if the\nresulting dataframe is intended to serve as input to a classifier/regressor.</p>\n<p>For more information --&gt; <code>help(aaindex3)</code></p>\n<br>\n<h4><code>ngram_composition</code></h4>\n<p>This function computes the di-, tri-, or quadpeptide composition of any given\namino acid sequence.</p>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">ngram_composition</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">ngram</span> <span class=\"o\">=</span> <span class=\"n\">ngram_composition</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"350\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/901bf561812ecda505a5e79a982f82d44f867e34/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f6e6772616d2e706e67\" width=\"450\">\n</p>\n<p>This illustration shows the di-, tri-, and quadpeptide composition of the\nsequence 'ALLLFTY'. As can be observed, not all possible combinations (20^ngram)\nare returned, but only those whose values are non-zero.</p>\n<p>For more information --&gt; <code>help(ngram_composition)</code></p>\n<br>\n<h4><code>position_enrichment</code></h4>\n<p>This function computes a binary feature vector or matrix indicative of whether\nchosen amino acids are present at the given positions (1) or not (0).</p>\n<p><b>Example</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">position_enrichment</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">position_enrichment</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'M'</span><span class=\"p\">])</span>\n</pre>\n<p align=\"center\">\n  <img height=\"230\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/879199c26bb49660d45022f9f4e63015f468e1af/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f706f732e706e67\" width=\"450\">\n</p>\n<p>This illustration shows the presence of position/amino acid groups 1A (amino\nacid 'A' at position 1) and 4M (amino acid 'M' at position 4).</p>\n<p><strong>Note:</strong> This function uses conventional, non-Pythonic indexing, starting at 1,\nrather than 0.</p>\n<p>For more information --&gt; <code>help(position_enrichment)</code></p>\n<br>\n<h3>Visualization</h3>\n<p>The following bar plots use a <code>coolwarm</code> color palette, meaning that there is a\ngradient from higher bars (red) to lower bars (blue).</p>\n<h4><code>viz_length</code></h4>\n<p>This function returns a bar plot displaying the frequency of sequence lengths\nin descending order.</p>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">viz_length</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">viz_length</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"240\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8cee137e78dfe50437e2be9cd7783d20cbbc68fe/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f76697a5f6c656e2e706e67\" width=\"580\">\n</p>\n<p>This illustration shows the frequency of all lengths of sequences found in\n<code>test_seq.txt</code>. The data used for this plot can also be retrieved by passing the\nargument <code>get_data=True</code>. In this case, the function should be called as\nfollows: <code>lengths = viz_length(df, get_data=True)</code>.</p>\n<p>For more information --&gt; <code>help(viz_length)</code></p>\n<br>\n<h4><code>viz_composition</code></h4>\n<p>This function returns a bar plot displaying the frequency of amino acids\npresent in the dataset (in descending order).</p>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">viz_composition</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">viz_composition</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"250\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab974ff190616150a1270ce489ed928b62fb0088/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f76697a5f636f6d702e706e67\" width=\"620\">\n</p>\n<p>This illustration shows the frequency of all amino acids of sequences found in\n<code>test_seq.txt</code>. The data used for this plot can also be retrieved by passing the\nargument <code>get_data=True</code>. In this case, the function should be called as\nfollows: <code>comp = viz_composition(df, get_data=True)</code>.</p>\n<p>For more information --&gt; <code>help(viz_composition)</code></p>\n<br>\n<h4><code>viz_ngram</code></h4>\n<p>This function returns a bar plot displaying the frequency of the selected ngram\ncomposition (di-, tri-, or quadpeptide) of the sequence data (in descending\norder).</p>\n<p><b>Example:</b></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">protlearn</span> <span class=\"kn\">import</span> <span class=\"n\">txt_to_df</span><span class=\"p\">,</span> <span class=\"n\">viz_ngram</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">txt_to_df</span><span class=\"p\">(</span><span class=\"n\">test_seq</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"n\">viz_ngram</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">ngram</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img height=\"250\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35d6e7e9bb828cb9037fb8807b93a21f33a8167b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7461646f726665722f70726f746c6561726e2f6d61737465722f64656d732f76697a5f6e672e706e67\" width=\"630\">\n</p>\n<p>This illustration shows the frequency of the top 20% (<code>top=20</code>) of dipeptide\ncombinations (<code>ngram=2</code>) of sequences found in <code>test_seq.txt</code>. The data used for\nthis plot can also be retrieved by passing the argument <code>get_data=True</code>. In this\ncase, the function should be called as follows:\n<code>ng = viz_ngram(df, get_data=True)</code>.</p>\n<p>For more information --&gt; <code>help(viz_ngram)</code></p>\n<br>\n<h2>Authors</h2>\n<p>This package is maintained by <a href=\"https://github.com/tadorfer\" rel=\"nofollow\">Thomas Dorfer</a></p>\n<h2>License</h2>\n<p>This package is licensed under the <a href=\"https://github.com/tadorfer/ProtLearn/blob/master/LICENSE\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 7143076, "releases": {"1.3": [{"comment_text": "", "digests": {"md5": "88ab71f92f83526f3baf161e1d905e69", "sha256": "724e0507d662a33eedf094a8a1036d4b7a8292de502cff94c185ebae23dee5e2"}, "downloads": -1, "filename": "protlearn-1.3.tar.gz", "has_sig": false, "md5_digest": "88ab71f92f83526f3baf161e1d905e69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101852, "upload_time": "2020-03-17T15:56:45", "upload_time_iso_8601": "2020-03-17T15:56:45.792989Z", "url": "https://files.pythonhosted.org/packages/30/6e/002fafe327d54e3e3238e106022ea6cd35c7bd6de5fce1334a478da093cc/protlearn-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "056b97d1293363077a650463981a2abf", "sha256": "824eebd955ec1c8c7f16e32f62464ee6fa0c204449a478c1bd53c8d730f4b6c5"}, "downloads": -1, "filename": "protlearn-1.4.tar.gz", "has_sig": false, "md5_digest": "056b97d1293363077a650463981a2abf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104897, "upload_time": "2020-03-20T07:08:49", "upload_time_iso_8601": "2020-03-20T07:08:49.979058Z", "url": "https://files.pythonhosted.org/packages/89/65/b0174c717e4dea1d25eccf563fec979b94d053664ac2116dfd4f2126b175/protlearn-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "c839e1e0d0429e10cd650daea330d52b", "sha256": "e755b8c348ac6d8a3a296ef73b16ed0af1bec2fb630ed699ce887e9f0fa0621b"}, "downloads": -1, "filename": "protlearn-1.5.tar.gz", "has_sig": false, "md5_digest": "c839e1e0d0429e10cd650daea330d52b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104906, "upload_time": "2020-03-20T08:06:33", "upload_time_iso_8601": "2020-03-20T08:06:33.497946Z", "url": "https://files.pythonhosted.org/packages/2c/70/339e7f6318b5c9eac840c7f550cc41b69324396cb272cf628f9a5cbc233a/protlearn-1.5.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "318136096bb591a5d75dc7d572f36769", "sha256": "c006747bea0fe2ab7924ec59917f37e1fb70eb47e1f7c00caa1b2768fd6a330f"}, "downloads": -1, "filename": "protlearn-1.6.tar.gz", "has_sig": false, "md5_digest": "318136096bb591a5d75dc7d572f36769", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105519, "upload_time": "2020-04-25T07:53:12", "upload_time_iso_8601": "2020-04-25T07:53:12.735713Z", "url": "https://files.pythonhosted.org/packages/e2/1c/4760548c2ecdd557d827276828ddda1df1d58fe649ad95cc914a6e4ca149/protlearn-1.6.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "ad91162a19fb8541f6d74a40ea86561b", "sha256": "805ae1422d56bbe53d6b65d3ca43e3b284bcdba05eaca9e3a602b0949b8573ce"}, "downloads": -1, "filename": "protlearn-1.7.tar.gz", "has_sig": false, "md5_digest": "ad91162a19fb8541f6d74a40ea86561b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105521, "upload_time": "2020-04-25T08:28:41", "upload_time_iso_8601": "2020-04-25T08:28:41.975643Z", "url": "https://files.pythonhosted.org/packages/ff/44/4ef77ccb488ec9f314b7ce402e5343555c704bf7cef04027cb2f1cc1bcad/protlearn-1.7.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "75ba2966abf5bd56341aed35e439be05", "sha256": "5cbe4344d9adc9fd27c3856048ddcf59c31cd9c23a1580abda8a0bda8715ac12"}, "downloads": -1, "filename": "protlearn-1.8.tar.gz", "has_sig": false, "md5_digest": "75ba2966abf5bd56341aed35e439be05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106430, "upload_time": "2020-05-01T07:11:31", "upload_time_iso_8601": "2020-05-01T07:11:31.508598Z", "url": "https://files.pythonhosted.org/packages/b9/65/c7316d13a19cdfba8686991da42eea32009732b0d2f9584dba1ab40efd57/protlearn-1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "75ba2966abf5bd56341aed35e439be05", "sha256": "5cbe4344d9adc9fd27c3856048ddcf59c31cd9c23a1580abda8a0bda8715ac12"}, "downloads": -1, "filename": "protlearn-1.8.tar.gz", "has_sig": false, "md5_digest": "75ba2966abf5bd56341aed35e439be05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106430, "upload_time": "2020-05-01T07:11:31", "upload_time_iso_8601": "2020-05-01T07:11:31.508598Z", "url": "https://files.pythonhosted.org/packages/b9/65/c7316d13a19cdfba8686991da42eea32009732b0d2f9584dba1ab40efd57/protlearn-1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:37 2020"}