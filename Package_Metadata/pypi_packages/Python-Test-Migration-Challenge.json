{"info": {"author": "Alhad Bhadekar", "author_email": "alhad.bhadekar@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Instructions\n\n## Python Test Migrate Challenge\nA Python package to migrate cloud data\n\n## GitHub Link\nhttps://github.com/alhadbhadekar/python-test-migrate-challenge\n## Installation\nUse the package manager [pip] (https://pip.pypa.io/en/stable/) to install Python-Test-Migration-Challenge\n\n## Command to Install\n```bash\npip install Python-Test-Migration-Challenge\n```\n\n## Project Structure\n<pre>\nPython_Test_Migration (Root folder)\\\nProvider\\\n|__Provider Classes serving for object Creation, backend structing\\\nService\\\n|__Service Layer for business logic incorporation, calling backend Provider classes only through Service Layer, contains list of functions\\\nTier_one\\\n|__Customer facing code to access Service Layer fucntions for writing Migration logics\\\nPersistence\\\n|__Modules to help store Classes in filesystems\\\ntest\\\n|__Provider\\\n   |__Unit Test cases for Provider Layer\\\n|__Service\\\n   |__Unit Test cases for Service Layer\n</pre> \n\n\n\n\n\n\n\n## Usage\n\n#### Example 1: Tier one Layer to do migration\n\n```python\n#!/usr/bin/python\nfrom Python_Test_Migration.service.app_service import *\nfrom Python_Test_Migration.provider.constant import IP_ADDRESS\nfrom Python_Test_Migration.persistence.make_dill import dump_classes\nfrom Python_Test_Migration.persistence.un_dill import load_classes\nimport os\n\n\n# Loading persistent classes\nif os.stat(\"python_test_migration\").st_size != 0:\n    load_classes()\n\n# List of sources\nsources = []\n\n\n# Creates credentials object for source 1\nipaddress1 = IP_ADDRESS('1.1.1.1')\ncredentials1 = credentials_create('test', 'password', ipaddress1)\n\n# Creates credentials object for source 2\nipaddress2 = IP_ADDRESS('2.2.2.2')\ncredentials2 = credentials_create('test2', 'password', ipaddress2)\n\n# Create Source Mount points for target source 1\nmountpoint1 = mountpoint_create('C:\\\\', 25)\nmountpoint2 = mountpoint_create('D:\\\\', 25)\nmountpoint3 = mountpoint_create('E:\\\\', 25)\n\n\n# Create Source Mount points for target source 2\nmountpoint4 = mountpoint_create('C:\\\\', 25)\nmountpoint5 = mountpoint_create('N:\\\\', 25)\n\n\n# Create Mountpoint list for source1\nmountpoint_list1 = mountpoints_list(mountpoint1, mountpoint2, mountpoint3)\n\n# Create Mountpoint list for source2\nmountpoint_list2 = mountpoints_list(mountpoint4, mountpoint5)\n\n\n# Create Workload for source 1\nsource1 = workload_create(credentials1, mountpoint_list1)\nsources.append(source1)\n# Create Workload for source 2\nsource2 = workload_create(credentials2, mountpoint_list2)\nsources.append(source2)\n\n\n# Create Target VM\ncloud_type = 'aws'\nipaddress_cloud = IP_ADDRESS('3.3.3.3')\ncreds_cloud = Credentials('mukul', '234234', ipaddress_cloud.get_ipaddress())\ncloud_workload = Workload(creds_cloud)\n\ntargetVM = migrationTarget_Create(cloud_type,\n                                  creds_cloud,\n                                  cloud_workload)\nif targetVM.cloudtype == 'Not Supported':\n    sys.exit()\n\n\n# Run Migration\n# Check for constrains i.e. no source has same IP address and and ip address remains same during workload\n# Above checks are being added to Service Layer Migration function\n\n# Created selected mount types\nselected_mountpoint = mountpoint_create('C:\\\\', 25)\nselected_mountpoint_list = [selected_mountpoint.get_mountPoint_instances()]\n\n\nrun_migration = migration(selected_mountpoint_list,\n                          source1, targetVM,\n                          ipaddress1, sources, mountpoint_list1)\n\nprint(run_migration)\n# Saving classes to filesystem\ndump_classes()\n```\n#### Example 1: Service Layers functions available to call Provider Classes\n\n```python\n#!/usr/bin/python\nimport sys\nsys.path.append(\"..\")\nfrom provider.python_test_migration \\\n    import Credentials, MountPoint, Workload, MigrationTarget, Migration\n\n\ndef credentials_create(username, password, ipaddress):\n    \"\"\"Service Layer to Create Credentials\"\"\"\n    credentials = Credentials(username, password, ipaddress.get_ipaddress())\n    return credentials\n\n\ndef credentials_get(credentials):\n    \"\"\"Service Layer to get credentials\"\"\"\n    return credentials.get_Credentials()\n\n\ndef mountpoint_create(name, size):\n    \"\"\"Service Layer to create mountpoint\"\"\"\n    mountpoint = MountPoint(name, size)\n    return mountpoint\n\n\ndef mountpoint_get(mountpoint):\n    \"\"\"Service Layer to get Mountpoint details\"\"\"\n    return mountpoint.get_mountPoint_instances()\n\n\ndef mountpoints_list(*args):\n    \"\"\"Service Layer to get mountpoint list\"\"\"\n    mountpoints_list = []\n    for instance in args:\n        mountpoints_list.append(instance.get_mountPoint_instances())\n    return mountpoints_list\n\n\ndef workload_create(creds, MountPoint):\n    \"\"\"Service Layer to create workload\"\"\"\n    source = Workload(creds, MountPoint)\n    return source\n\n\ndef workload_get(workload):\n    \"\"\"Service Layer to get workload details\"\"\"\n    workload = workload.get_workload()\n    return workload\n\n\ndef constrains(source, ipaddress):\n    \"\"\"Service Layer to check constrains\"\"\"\n    return source.constrains(ipaddress.get_ipaddress())\n\n\ndef check_duplicate_ip(sources):\n    \"\"\"Service Layer to check sources from duplicate IP addresses\"\"\"\n    sources_ips = []\n    for instance in sources:\n        sources_ips.append(instance.get_workload()['domain'])\n    return sources[0].checksourceip(sources_ips)\n\n\ndef migrationTarget_Create(cloud_type, creds_cloud, cloud_workload):\n    \"\"\"Service Layer to create Migration target\"\"\"\n    targetVM = MigrationTarget(cloud_type, creds_cloud, cloud_workload)\n    return targetVM\n\n\ndef migrationTarget_get(targerVM):\n    \"\"\"Service Layer to get Migration Target details\"\"\"\n    return targerVM.get_Migration_Target()\n\n\ndef check_Mounts(selected_mountpoint_list, mountpoint_list1):\n    \"\"\"Service Layer to check mounts if selected mount is present in provided mountpoints or no\"\"\"\n    selected_mountpoint = []\n    mountpoints_provided = []\n    for item in selected_mountpoint_list:\n        selected_mountpoint.append(item['mount_name'])\n    for item in mountpoint_list1:\n        mountpoints_provided.append(item['mount_name'])\n\n    for i in selected_mountpoint:\n        for j in mountpoints_provided:\n            if i == j:\n                return {\n                    'key': 'success',\n                    'message': 'Selected Mount type present in MountTypes provided'\n                }\n            else:\n                return {\n                    'key': 'error',\n                    'message': 'Selected Mount type not present in MountTypes provided'\n                }\n\n\ndef migration(selected_mountpoint, source,\n              targetVM, ipaddress,\n              sources, mountpoint_list1):\n    \"\"\"Service Layer to run migrations\"\"\"\n    check_ipchanged = constrains(source, ipaddress)\n    if check_ipchanged['key'] == 'error':\n        return {\n            'key': 'error',\n            'message': check_ipchanged['message'],\n            'migration_State': 'error'\n        }\n\n    check_mul_ips = check_duplicate_ip(sources)\n    if check_mul_ips['key'] == 'error':\n        return {\n            'key': 'error',\n            'message': check_mul_ips['message'],\n            'migration_State': 'error'\n        }\n\n    check_mount = check_Mounts(selected_mountpoint, mountpoint_list1)\n    if check_mount['key'] == 'error':\n        return {\n            'key': 'error',\n            'message': check_mount['message'],\n            'migration_State': 'error'\n        }\n\n    run_migration = Migration(selected_mountpoint, source, targetVM)\n    status = run_migration.run(source, targetVM)\n    return status\n```\n\n#### Example 3: Provider Layer Classes\n\n```python\n#!/usr/bin/python\nimport time\nimport copy\n\nclass Credentials:\n    \"\"\"Class to create Credentials Objects\"\"\"\n\n    def __init__(self, username=None, password=None, domain=None):\n        \"\"\"Init method for initializing variables\"\"\"\n        self.username = username\n        self.password = password\n        self.domain = domain\n\n    def get_Credentials(self):\n        \"\"\"Method to get credentials\"\"\"\n        return {'username': self.username,\n                'password': self.password,\n                'domain': self.domain}\n\n\nclass MountPoint:\n    \"\"\"Class to create MountPoint Object\"\"\"\n\n    def __init__(self, mount_point_name=None, size=None):\n        \"\"\"Init method to initialize MountPoint object\"\"\"\n        self.mount_point_name = mount_point_name\n        self.size = size\n\n    def get_mountPoint_instances(self):\n        \"\"\"Method to get MountPoint instances with size\"\"\"\n        return {\n            'mount_name': self.mount_point_name,\n            'size': self.size\n        }\n\n\nclass Workload(object):\n    \"\"\"Class to create workload Object\"\"\"\n\n    def __init__(self, credentials=None, mountpoint=None):\n        \"\"\"Init method to initialize Workload Object\"\"\"\n        self.Credentials = credentials\n        self.storage = []\n        if mountpoint is not None:\n            for instance in mountpoint:\n                self.storage.append(instance)\n\n    def constrains(self, ipaddress=None):\n        \"\"\"Method to identify if there is an IP address changed over Workload\"\"\"\n        username = self.Credentials.username\n        password = self.Credentials.password\n        domain = self.Credentials.domain\n        storage = self.storage\n        if domain != ipaddress:\n            return {'key': 'error',\n                    'message': 'IP address changed'}\n\n        if username is None or password is None or domain is None:\n            return {'key': 'error',\n                    'message': 'Either IP address or password or domain is None'}\n        return {'key': 'success',\n                'message': 'Constrains passed'}\n\n    def checksourceip(self, source_ips):\n        \"\"\"Method to check if there are multiple sources with same IP address\"\"\"\n\n        if len(source_ips) != len(set(source_ips)):\n            return {'key': 'error',\n                    'message': 'Duplicate IP Addresses exist'}\n        return {'key': 'success',\n                'message': 'All Sources have separate IP\\'s'}\n\n    def get_credentials(self):\n        \"\"\"Method to get credentials\"\"\"\n        return {\n            'username': self.Credentials.username,\n            'password': self.Credentials.password\n        }\n\n    def get_workload(self):\n        \"\"\"Method to get workload details\"\"\"\n        return {\n            'username': self.Credentials.username,\n            'password': self.Credentials.password,\n            'domain': self.Credentials.domain,\n            'mount_point': self.storage\n        }\n\n\nclass MigrationTarget(object):\n    \"\"\"Class to create MigrationTarget object\"\"\"\n\n    def __init__(self, cloudtype=None, credentials=None, workload=None):\n        \"\"\"Init method to initialize MigrationTarget object\"\"\"\n        self.cloudtype = cloudtype\n        self.Credentials = credentials\n        self.Workload = workload\n\n        if self.cloudtype != 'aws':\n            if self.cloudtype != 'azure':\n                if self.cloudtype != 'vsphere':\n                    if self.cloudtype != 'vcloud':\n                        self.cloudtype = 'Not Supported'\n\n    def get_Migration_Target(self):\n        \"\"\"Method to get MigrationTarget Details\"\"\"\n        storage = self.Workload.storage\n        return {\n            'cloud_type': self.cloudtype, \\\n            'username': self.Credentials.username, \\\n            'password': self.Credentials.password, \\\n            'domain': self.Credentials.domain, \\\n            'mountpoint': storage}\n\n\nclass Migration(object):\n    \"\"\"Class to create Migration object\"\"\"\n\n    def __init__(self, mountpoint=None, sourceWorkload=None, targetMigrationTarget=None):\n        \"\"\"Init method for initializing Migration object\"\"\"\n        self.mountpoint = mountpoint\n        self.sourceWorkload = sourceWorkload\n        self.targetMigrationTarget = targetMigrationTarget\n        self.migration_State = 'not_started'\n\n    def run(self, sourceWorkload=None, targetMigrationTarget=None):\n        \"\"\"run method to start migration\"\"\"\n        time.sleep(1)\n\n        selected_mountpoints = []\n        #print(len(self.mountpoint))\n        for i in range(0, len(self.mountpoint)):\n            selected_mountpoints.append(self.mountpoint[i]['mount_name'])\n\n        # Checking if C:\\\\ is allowed to migrate\n        for directory in selected_mountpoints:\n            if 'C:\\\\' == directory:\n                allowed = True\n                break\n            else:\n                allowed = False\n\n        migration_State = 'not_started'\n\n        if allowed:\n            try:\n                migration_State = 'running'\n\n                # Copying source to TargetVM for migration\n                targetMigrationTarget = copy.copy(sourceWorkload)\n\n                # Logic to make sure target only has selected mountpoints\n                credentials = Credentials(targetMigrationTarget.get_credentials()['username'],\n                                          targetMigrationTarget.get_credentials()['password'])\n\n                targetMigrationTarget = Workload(credentials, self.mountpoint)\n                migration_State = 'success'\n                return {'key': 'success',\n                        'message': 'Migration successfully completed',\n                        'migration_State': migration_State}\n            except:\n                migration_State = 'error'\n                return {'key': 'error',\n                        'message': 'Error happened during migration',\n                        'migration_State': migration_State}\n\n        else:\n            migration_State = 'error'\n            return {'key': 'error',\n                    'message': 'C:\\\\ not allowed.',\n                    'migration_State': migration_State}\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alhadbhadekar/python-test-migrate-challenge", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Python-Test-Migration-Challenge", "package_url": "https://pypi.org/project/Python-Test-Migration-Challenge/", "platform": "", "project_url": "https://pypi.org/project/Python-Test-Migration-Challenge/", "project_urls": {"Homepage": "https://github.com/alhadbhadekar/python-test-migrate-challenge"}, "release_url": "https://pypi.org/project/Python-Test-Migration-Challenge/1.0.2/", "requires_dist": ["dill"], "requires_python": "", "summary": "A Python package to do cloud migration Coding challenge", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Instructions</h1>\n<h2>Python Test Migrate Challenge</h2>\n<p>A Python package to migrate cloud data</p>\n<h2>GitHub Link</h2>\n<p><a href=\"https://github.com/alhadbhadekar/python-test-migrate-challenge\" rel=\"nofollow\">https://github.com/alhadbhadekar/python-test-migrate-challenge</a></p>\n<h2>Installation</h2>\n<p>Use the package manager [pip] (<a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">https://pip.pypa.io/en/stable/</a>) to install Python-Test-Migration-Challenge</p>\n<h2>Command to Install</h2>\n<pre>pip install Python-Test-Migration-Challenge\n</pre>\n<h2>Project Structure</h2>\n<pre>Python_Test_Migration (Root folder)\\\nProvider\\\n|__Provider Classes serving for object Creation, backend structing\\\nService\\\n|__Service Layer for business logic incorporation, calling backend Provider classes only through Service Layer, contains list of functions\\\nTier_one\\\n|__Customer facing code to access Service Layer fucntions for writing Migration logics\\\nPersistence\\\n|__Modules to help store Classes in filesystems\\\ntest\\\n|__Provider\\\n   |__Unit Test cases for Provider Layer\\\n|__Service\\\n   |__Unit Test cases for Service Layer\n</pre> \n<h2>Usage</h2>\n<h4>Example 1: Tier one Layer to do migration</h4>\n<pre><span class=\"ch\">#!/usr/bin/python</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Python_Test_Migration.service.app_service</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Python_Test_Migration.provider.constant</span> <span class=\"kn\">import</span> <span class=\"n\">IP_ADDRESS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Python_Test_Migration.persistence.make_dill</span> <span class=\"kn\">import</span> <span class=\"n\">dump_classes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Python_Test_Migration.persistence.un_dill</span> <span class=\"kn\">import</span> <span class=\"n\">load_classes</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n\n<span class=\"c1\"># Loading persistent classes</span>\n<span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">(</span><span class=\"s2\">\"python_test_migration\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">st_size</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">load_classes</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># List of sources</span>\n<span class=\"n\">sources</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n\n<span class=\"c1\"># Creates credentials object for source 1</span>\n<span class=\"n\">ipaddress1</span> <span class=\"o\">=</span> <span class=\"n\">IP_ADDRESS</span><span class=\"p\">(</span><span class=\"s1\">'1.1.1.1'</span><span class=\"p\">)</span>\n<span class=\"n\">credentials1</span> <span class=\"o\">=</span> <span class=\"n\">credentials_create</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">ipaddress1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Creates credentials object for source 2</span>\n<span class=\"n\">ipaddress2</span> <span class=\"o\">=</span> <span class=\"n\">IP_ADDRESS</span><span class=\"p\">(</span><span class=\"s1\">'2.2.2.2'</span><span class=\"p\">)</span>\n<span class=\"n\">credentials2</span> <span class=\"o\">=</span> <span class=\"n\">credentials_create</span><span class=\"p\">(</span><span class=\"s1\">'test2'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">ipaddress2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create Source Mount points for target source 1</span>\n<span class=\"n\">mountpoint1</span> <span class=\"o\">=</span> <span class=\"n\">mountpoint_create</span><span class=\"p\">(</span><span class=\"s1\">'C:</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"n\">mountpoint2</span> <span class=\"o\">=</span> <span class=\"n\">mountpoint_create</span><span class=\"p\">(</span><span class=\"s1\">'D:</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"n\">mountpoint3</span> <span class=\"o\">=</span> <span class=\"n\">mountpoint_create</span><span class=\"p\">(</span><span class=\"s1\">'E:</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Create Source Mount points for target source 2</span>\n<span class=\"n\">mountpoint4</span> <span class=\"o\">=</span> <span class=\"n\">mountpoint_create</span><span class=\"p\">(</span><span class=\"s1\">'C:</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"n\">mountpoint5</span> <span class=\"o\">=</span> <span class=\"n\">mountpoint_create</span><span class=\"p\">(</span><span class=\"s1\">'N:</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Create Mountpoint list for source1</span>\n<span class=\"n\">mountpoint_list1</span> <span class=\"o\">=</span> <span class=\"n\">mountpoints_list</span><span class=\"p\">(</span><span class=\"n\">mountpoint1</span><span class=\"p\">,</span> <span class=\"n\">mountpoint2</span><span class=\"p\">,</span> <span class=\"n\">mountpoint3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create Mountpoint list for source2</span>\n<span class=\"n\">mountpoint_list2</span> <span class=\"o\">=</span> <span class=\"n\">mountpoints_list</span><span class=\"p\">(</span><span class=\"n\">mountpoint4</span><span class=\"p\">,</span> <span class=\"n\">mountpoint5</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Create Workload for source 1</span>\n<span class=\"n\">source1</span> <span class=\"o\">=</span> <span class=\"n\">workload_create</span><span class=\"p\">(</span><span class=\"n\">credentials1</span><span class=\"p\">,</span> <span class=\"n\">mountpoint_list1</span><span class=\"p\">)</span>\n<span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">source1</span><span class=\"p\">)</span>\n<span class=\"c1\"># Create Workload for source 2</span>\n<span class=\"n\">source2</span> <span class=\"o\">=</span> <span class=\"n\">workload_create</span><span class=\"p\">(</span><span class=\"n\">credentials2</span><span class=\"p\">,</span> <span class=\"n\">mountpoint_list2</span><span class=\"p\">)</span>\n<span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">source2</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Create Target VM</span>\n<span class=\"n\">cloud_type</span> <span class=\"o\">=</span> <span class=\"s1\">'aws'</span>\n<span class=\"n\">ipaddress_cloud</span> <span class=\"o\">=</span> <span class=\"n\">IP_ADDRESS</span><span class=\"p\">(</span><span class=\"s1\">'3.3.3.3'</span><span class=\"p\">)</span>\n<span class=\"n\">creds_cloud</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"s1\">'mukul'</span><span class=\"p\">,</span> <span class=\"s1\">'234234'</span><span class=\"p\">,</span> <span class=\"n\">ipaddress_cloud</span><span class=\"o\">.</span><span class=\"n\">get_ipaddress</span><span class=\"p\">())</span>\n<span class=\"n\">cloud_workload</span> <span class=\"o\">=</span> <span class=\"n\">Workload</span><span class=\"p\">(</span><span class=\"n\">creds_cloud</span><span class=\"p\">)</span>\n\n<span class=\"n\">targetVM</span> <span class=\"o\">=</span> <span class=\"n\">migrationTarget_Create</span><span class=\"p\">(</span><span class=\"n\">cloud_type</span><span class=\"p\">,</span>\n                                  <span class=\"n\">creds_cloud</span><span class=\"p\">,</span>\n                                  <span class=\"n\">cloud_workload</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">targetVM</span><span class=\"o\">.</span><span class=\"n\">cloudtype</span> <span class=\"o\">==</span> <span class=\"s1\">'Not Supported'</span><span class=\"p\">:</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Run Migration</span>\n<span class=\"c1\"># Check for constrains i.e. no source has same IP address and and ip address remains same during workload</span>\n<span class=\"c1\"># Above checks are being added to Service Layer Migration function</span>\n\n<span class=\"c1\"># Created selected mount types</span>\n<span class=\"n\">selected_mountpoint</span> <span class=\"o\">=</span> <span class=\"n\">mountpoint_create</span><span class=\"p\">(</span><span class=\"s1\">'C:</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"n\">selected_mountpoint_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">selected_mountpoint</span><span class=\"o\">.</span><span class=\"n\">get_mountPoint_instances</span><span class=\"p\">()]</span>\n\n\n<span class=\"n\">run_migration</span> <span class=\"o\">=</span> <span class=\"n\">migration</span><span class=\"p\">(</span><span class=\"n\">selected_mountpoint_list</span><span class=\"p\">,</span>\n                          <span class=\"n\">source1</span><span class=\"p\">,</span> <span class=\"n\">targetVM</span><span class=\"p\">,</span>\n                          <span class=\"n\">ipaddress1</span><span class=\"p\">,</span> <span class=\"n\">sources</span><span class=\"p\">,</span> <span class=\"n\">mountpoint_list1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">run_migration</span><span class=\"p\">)</span>\n<span class=\"c1\"># Saving classes to filesystem</span>\n<span class=\"n\">dump_classes</span><span class=\"p\">()</span>\n</pre>\n<h4>Example 1: Service Layers functions available to call Provider Classes</h4>\n<pre><span class=\"ch\">#!/usr/bin/python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"..\"</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">provider.python_test_migration</span> \\\n    <span class=\"kn\">import</span> <span class=\"nn\">Credentials</span><span class=\"o\">,</span> <span class=\"nn\">MountPoint</span><span class=\"o\">,</span> <span class=\"nn\">Workload</span><span class=\"o\">,</span> <span class=\"nn\">MigrationTarget</span><span class=\"o\">,</span> <span class=\"nn\">Migration</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">credentials_create</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">ipaddress</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to Create Credentials\"\"\"</span>\n    <span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">ipaddress</span><span class=\"o\">.</span><span class=\"n\">get_ipaddress</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">credentials</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">credentials_get</span><span class=\"p\">(</span><span class=\"n\">credentials</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to get credentials\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">credentials</span><span class=\"o\">.</span><span class=\"n\">get_Credentials</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">mountpoint_create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to create mountpoint\"\"\"</span>\n    <span class=\"n\">mountpoint</span> <span class=\"o\">=</span> <span class=\"n\">MountPoint</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">mountpoint</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">mountpoint_get</span><span class=\"p\">(</span><span class=\"n\">mountpoint</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to get Mountpoint details\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">mountpoint</span><span class=\"o\">.</span><span class=\"n\">get_mountPoint_instances</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">mountpoints_list</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to get mountpoint list\"\"\"</span>\n    <span class=\"n\">mountpoints_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">instance</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n        <span class=\"n\">mountpoints_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">get_mountPoint_instances</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">mountpoints_list</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">workload_create</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"p\">,</span> <span class=\"n\">MountPoint</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to create workload\"\"\"</span>\n    <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">Workload</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"p\">,</span> <span class=\"n\">MountPoint</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">source</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">workload_get</span><span class=\"p\">(</span><span class=\"n\">workload</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to get workload details\"\"\"</span>\n    <span class=\"n\">workload</span> <span class=\"o\">=</span> <span class=\"n\">workload</span><span class=\"o\">.</span><span class=\"n\">get_workload</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">workload</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">constrains</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">ipaddress</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to check constrains\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">constrains</span><span class=\"p\">(</span><span class=\"n\">ipaddress</span><span class=\"o\">.</span><span class=\"n\">get_ipaddress</span><span class=\"p\">())</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">check_duplicate_ip</span><span class=\"p\">(</span><span class=\"n\">sources</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to check sources from duplicate IP addresses\"\"\"</span>\n    <span class=\"n\">sources_ips</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">instance</span> <span class=\"ow\">in</span> <span class=\"n\">sources</span><span class=\"p\">:</span>\n        <span class=\"n\">sources_ips</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">get_workload</span><span class=\"p\">()[</span><span class=\"s1\">'domain'</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">sources</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">checksourceip</span><span class=\"p\">(</span><span class=\"n\">sources_ips</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">migrationTarget_Create</span><span class=\"p\">(</span><span class=\"n\">cloud_type</span><span class=\"p\">,</span> <span class=\"n\">creds_cloud</span><span class=\"p\">,</span> <span class=\"n\">cloud_workload</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to create Migration target\"\"\"</span>\n    <span class=\"n\">targetVM</span> <span class=\"o\">=</span> <span class=\"n\">MigrationTarget</span><span class=\"p\">(</span><span class=\"n\">cloud_type</span><span class=\"p\">,</span> <span class=\"n\">creds_cloud</span><span class=\"p\">,</span> <span class=\"n\">cloud_workload</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">targetVM</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">migrationTarget_get</span><span class=\"p\">(</span><span class=\"n\">targerVM</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to get Migration Target details\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">targerVM</span><span class=\"o\">.</span><span class=\"n\">get_Migration_Target</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">check_Mounts</span><span class=\"p\">(</span><span class=\"n\">selected_mountpoint_list</span><span class=\"p\">,</span> <span class=\"n\">mountpoint_list1</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to check mounts if selected mount is present in provided mountpoints or no\"\"\"</span>\n    <span class=\"n\">selected_mountpoint</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">mountpoints_provided</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">selected_mountpoint_list</span><span class=\"p\">:</span>\n        <span class=\"n\">selected_mountpoint</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">'mount_name'</span><span class=\"p\">])</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">mountpoint_list1</span><span class=\"p\">:</span>\n        <span class=\"n\">mountpoints_provided</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">'mount_name'</span><span class=\"p\">])</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">selected_mountpoint</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">mountpoints_provided</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Selected Mount type present in MountTypes provided'</span>\n                <span class=\"p\">}</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Selected Mount type not present in MountTypes provided'</span>\n                <span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">migration</span><span class=\"p\">(</span><span class=\"n\">selected_mountpoint</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span>\n              <span class=\"n\">targetVM</span><span class=\"p\">,</span> <span class=\"n\">ipaddress</span><span class=\"p\">,</span>\n              <span class=\"n\">sources</span><span class=\"p\">,</span> <span class=\"n\">mountpoint_list1</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Service Layer to run migrations\"\"\"</span>\n    <span class=\"n\">check_ipchanged</span> <span class=\"o\">=</span> <span class=\"n\">constrains</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">ipaddress</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">check_ipchanged</span><span class=\"p\">[</span><span class=\"s1\">'key'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'error'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"n\">check_ipchanged</span><span class=\"p\">[</span><span class=\"s1\">'message'</span><span class=\"p\">],</span>\n            <span class=\"s1\">'migration_State'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"n\">check_mul_ips</span> <span class=\"o\">=</span> <span class=\"n\">check_duplicate_ip</span><span class=\"p\">(</span><span class=\"n\">sources</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">check_mul_ips</span><span class=\"p\">[</span><span class=\"s1\">'key'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'error'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"n\">check_mul_ips</span><span class=\"p\">[</span><span class=\"s1\">'message'</span><span class=\"p\">],</span>\n            <span class=\"s1\">'migration_State'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"n\">check_mount</span> <span class=\"o\">=</span> <span class=\"n\">check_Mounts</span><span class=\"p\">(</span><span class=\"n\">selected_mountpoint</span><span class=\"p\">,</span> <span class=\"n\">mountpoint_list1</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">check_mount</span><span class=\"p\">[</span><span class=\"s1\">'key'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'error'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"n\">check_mount</span><span class=\"p\">[</span><span class=\"s1\">'message'</span><span class=\"p\">],</span>\n            <span class=\"s1\">'migration_State'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"n\">run_migration</span> <span class=\"o\">=</span> <span class=\"n\">Migration</span><span class=\"p\">(</span><span class=\"n\">selected_mountpoint</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">targetVM</span><span class=\"p\">)</span>\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">run_migration</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">targetVM</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">status</span>\n</pre>\n<h4>Example 3: Provider Layer Classes</h4>\n<pre><span class=\"ch\">#!/usr/bin/python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Credentials</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Class to create Credentials Objects\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Init method for initializing variables\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">username</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">password</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">domain</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_Credentials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Method to get credentials\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span>\n                <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"p\">,</span>\n                <span class=\"s1\">'domain'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MountPoint</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Class to create MountPoint Object\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mount_point_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Init method to initialize MountPoint object\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mount_point_name</span> <span class=\"o\">=</span> <span class=\"n\">mount_point_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_mountPoint_instances</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Method to get MountPoint instances with size\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'mount_name'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mount_point_name</span><span class=\"p\">,</span>\n            <span class=\"s1\">'size'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span>\n        <span class=\"p\">}</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Workload</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Class to create workload Object\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mountpoint</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Init method to initialize Workload Object\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">mountpoint</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">instance</span> <span class=\"ow\">in</span> <span class=\"n\">mountpoint</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">constrains</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ipaddress</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Method to identify if there is an IP address changed over Workload\"\"\"</span>\n        <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">username</span>\n        <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">password</span>\n        <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">domain</span>\n        <span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">storage</span>\n        <span class=\"k\">if</span> <span class=\"n\">domain</span> <span class=\"o\">!=</span> <span class=\"n\">ipaddress</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'IP address changed'</span><span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">username</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">password</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">domain</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Either IP address or password or domain is None'</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Constrains passed'</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">checksourceip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">source_ips</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Method to check if there are multiple sources with same IP address\"\"\"</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">source_ips</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">source_ips</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Duplicate IP Addresses exist'</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'All Sources have separate IP</span><span class=\"se\">\\'</span><span class=\"s1\">s'</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_credentials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Method to get credentials\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span>\n            <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">password</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_workload</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Method to get workload details\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span>\n            <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"p\">,</span>\n            <span class=\"s1\">'domain'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">,</span>\n            <span class=\"s1\">'mount_point'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">storage</span>\n        <span class=\"p\">}</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MigrationTarget</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Class to create MigrationTarget object\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cloudtype</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">workload</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Init method to initialize MigrationTarget object\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cloudtype</span> <span class=\"o\">=</span> <span class=\"n\">cloudtype</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Workload</span> <span class=\"o\">=</span> <span class=\"n\">workload</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cloudtype</span> <span class=\"o\">!=</span> <span class=\"s1\">'aws'</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cloudtype</span> <span class=\"o\">!=</span> <span class=\"s1\">'azure'</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cloudtype</span> <span class=\"o\">!=</span> <span class=\"s1\">'vsphere'</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cloudtype</span> <span class=\"o\">!=</span> <span class=\"s1\">'vcloud'</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cloudtype</span> <span class=\"o\">=</span> <span class=\"s1\">'Not Supported'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_Migration_Target</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Method to get MigrationTarget Details\"\"\"</span>\n        <span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Workload</span><span class=\"o\">.</span><span class=\"n\">storage</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'cloud_type'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cloudtype</span><span class=\"p\">,</span> \\\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span> \\\n            <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"p\">,</span> \\\n            <span class=\"s1\">'domain'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Credentials</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">,</span> \\\n            <span class=\"s1\">'mountpoint'</span><span class=\"p\">:</span> <span class=\"n\">storage</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Class to create Migration object\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mountpoint</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sourceWorkload</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">targetMigrationTarget</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Init method for initializing Migration object\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mountpoint</span> <span class=\"o\">=</span> <span class=\"n\">mountpoint</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sourceWorkload</span> <span class=\"o\">=</span> <span class=\"n\">sourceWorkload</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">targetMigrationTarget</span> <span class=\"o\">=</span> <span class=\"n\">targetMigrationTarget</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">migration_State</span> <span class=\"o\">=</span> <span class=\"s1\">'not_started'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sourceWorkload</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">targetMigrationTarget</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"run method to start migration\"\"\"</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">selected_mountpoints</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\">#print(len(self.mountpoint))</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mountpoint</span><span class=\"p\">)):</span>\n            <span class=\"n\">selected_mountpoints</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mountpoint</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"s1\">'mount_name'</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># Checking if C:\\\\ is allowed to migrate</span>\n        <span class=\"k\">for</span> <span class=\"n\">directory</span> <span class=\"ow\">in</span> <span class=\"n\">selected_mountpoints</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s1\">'C:</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span> <span class=\"o\">==</span> <span class=\"n\">directory</span><span class=\"p\">:</span>\n                <span class=\"n\">allowed</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">allowed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">migration_State</span> <span class=\"o\">=</span> <span class=\"s1\">'not_started'</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">allowed</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">migration_State</span> <span class=\"o\">=</span> <span class=\"s1\">'running'</span>\n\n                <span class=\"c1\"># Copying source to TargetVM for migration</span>\n                <span class=\"n\">targetMigrationTarget</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">sourceWorkload</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># Logic to make sure target only has selected mountpoints</span>\n                <span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">targetMigrationTarget</span><span class=\"o\">.</span><span class=\"n\">get_credentials</span><span class=\"p\">()[</span><span class=\"s1\">'username'</span><span class=\"p\">],</span>\n                                          <span class=\"n\">targetMigrationTarget</span><span class=\"o\">.</span><span class=\"n\">get_credentials</span><span class=\"p\">()[</span><span class=\"s1\">'password'</span><span class=\"p\">])</span>\n\n                <span class=\"n\">targetMigrationTarget</span> <span class=\"o\">=</span> <span class=\"n\">Workload</span><span class=\"p\">(</span><span class=\"n\">credentials</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mountpoint</span><span class=\"p\">)</span>\n                <span class=\"n\">migration_State</span> <span class=\"o\">=</span> <span class=\"s1\">'success'</span>\n                <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Migration successfully completed'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'migration_State'</span><span class=\"p\">:</span> <span class=\"n\">migration_State</span><span class=\"p\">}</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">migration_State</span> <span class=\"o\">=</span> <span class=\"s1\">'error'</span>\n                <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Error happened during migration'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'migration_State'</span><span class=\"p\">:</span> <span class=\"n\">migration_State</span><span class=\"p\">}</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">migration_State</span> <span class=\"o\">=</span> <span class=\"s1\">'error'</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'error'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'C:</span><span class=\"se\">\\\\</span><span class=\"s1\"> not allowed.'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'migration_State'</span><span class=\"p\">:</span> <span class=\"n\">migration_State</span><span class=\"p\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6719496, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "08b7df481038614234f7bb70064f9a59", "sha256": "ff9a49cfa018dc9f8eca8e9fa24b444d22169bc04f4b0bd37054e2165ef43808"}, "downloads": -1, "filename": "Python_Test_Migration_Challenge-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "08b7df481038614234f7bb70064f9a59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13029, "upload_time": "2020-02-28T17:27:53", "upload_time_iso_8601": "2020-02-28T17:27:53.076609Z", "url": "https://files.pythonhosted.org/packages/bc/55/60f090fb4b88eaca782a59b2b394e453fe1cb459548e5dae4e85a55f25a7/Python_Test_Migration_Challenge-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3c0cf1c1eea59fa772a3a446f9531bf", "sha256": "b8118afa55a77a4c77f27a8c34b0e31849ccac4b2261db8299c23b89e8e16f14"}, "downloads": -1, "filename": "Python-Test-Migration-Challenge-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f3c0cf1c1eea59fa772a3a446f9531bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8083, "upload_time": "2020-02-28T17:27:55", "upload_time_iso_8601": "2020-02-28T17:27:55.248377Z", "url": "https://files.pythonhosted.org/packages/5c/a9/0ca128fadd0d1ffe7762ffa1b83180cc3bf3fb27c7b0d1c9af94ab9222b1/Python-Test-Migration-Challenge-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d6ec1e85370037f92005f7b6488eb808", "sha256": "1859ff54e8303731e13135daff7edc77149407e6e9e2459c6b48a6ae72171297"}, "downloads": -1, "filename": "Python_Test_Migration_Challenge-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6ec1e85370037f92005f7b6488eb808", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16188, "upload_time": "2020-02-28T18:19:01", "upload_time_iso_8601": "2020-02-28T18:19:01.562783Z", "url": "https://files.pythonhosted.org/packages/de/c7/3b5dceff8483b688c39c06fac328558586c33a1d41a1513d360dd2ce0670/Python_Test_Migration_Challenge-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b58b70be9c9d8354be3d800eb701b8d9", "sha256": "54b12b4d907d763e9bbe18595301e57348b202c9da3bb196c81f40aae43e59b8"}, "downloads": -1, "filename": "Python-Test-Migration-Challenge-1.0.2.tar.gz", "has_sig": false, "md5_digest": "b58b70be9c9d8354be3d800eb701b8d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13112, "upload_time": "2020-02-28T18:19:03", "upload_time_iso_8601": "2020-02-28T18:19:03.387512Z", "url": "https://files.pythonhosted.org/packages/85/e4/91e7f2617f5ff98f6af18dd6bd872109f957fd71c556afa931f0d2e51458/Python-Test-Migration-Challenge-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6ec1e85370037f92005f7b6488eb808", "sha256": "1859ff54e8303731e13135daff7edc77149407e6e9e2459c6b48a6ae72171297"}, "downloads": -1, "filename": "Python_Test_Migration_Challenge-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6ec1e85370037f92005f7b6488eb808", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16188, "upload_time": "2020-02-28T18:19:01", "upload_time_iso_8601": "2020-02-28T18:19:01.562783Z", "url": "https://files.pythonhosted.org/packages/de/c7/3b5dceff8483b688c39c06fac328558586c33a1d41a1513d360dd2ce0670/Python_Test_Migration_Challenge-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b58b70be9c9d8354be3d800eb701b8d9", "sha256": "54b12b4d907d763e9bbe18595301e57348b202c9da3bb196c81f40aae43e59b8"}, "downloads": -1, "filename": "Python-Test-Migration-Challenge-1.0.2.tar.gz", "has_sig": false, "md5_digest": "b58b70be9c9d8354be3d800eb701b8d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13112, "upload_time": "2020-02-28T18:19:03", "upload_time_iso_8601": "2020-02-28T18:19:03.387512Z", "url": "https://files.pythonhosted.org/packages/85/e4/91e7f2617f5ff98f6af18dd6bd872109f957fd71c556afa931f0d2e51458/Python-Test-Migration-Challenge-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:00 2020"}