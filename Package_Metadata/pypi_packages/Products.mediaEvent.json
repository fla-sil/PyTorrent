{"info": {"author": "David Jonas", "author_email": "david@intk.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)"], "description": ".. contents::\n\n.. Note!\n   -----\n   Update the following URLs to point to your:\n\n   - code repository\n   - bug tracker\n   - questions/comments feedback mail\n   (do not set a real mail, to avoid spams)\n\n   Or remove it if not used.\n\n- Code repository: http://svn.somewhere.com/...\n- Questions and comments to somemailing_list\n- Report bugs at http://bug.somewhere.com/..\n\n\nChange history\n**************\n\nChangelog\n=========\n\n0.1 (xxxx-xx-xx)\n----------------\n\n- Created recipe with ZopeSkel\n  [David Jonas]\n\nDetailed Documentation\n**********************\n\nIntroduction\n============\n\nThis is a full-blown functional test. The emphasis here is on testing what\nthe user may input and see, and the system is largely tested as a black box.\nWe use PloneTestCase to set up this test as well, so we have a full Plone site\nto play with. We *can* inspect the state of the portal, e.g. using \nself.portal and self.folder, but it is often frowned upon since you are not\ntreating the system as a black box. Also, if you, for example, log in or set\nroles using calls like self.setRoles(), these are not reflected in the test\nbrowser, which runs as a separate session.\n\nBeing a doctest, we can tell a story here.\n\nFirst, we must perform some setup. We use the testbrowser that is shipped\nwith Five, as this provides proper Zope 2 integration. Most of the \ndocumentation, though, is in the underlying zope.testbrower package.\n\n    >>> from Products.Five.testbrowser import Browser\n    >>> browser = Browser()\n    >>> portal_url = self.portal.absolute_url()\n\nThe following is useful when writing and debugging testbrowser tests. It lets\nus see all error messages in the error_log.\n\n    >>> self.portal.error_log._ignored_exceptions = ()\n\nWith that in place, we can go to the portal front page and log in. We will\ndo this using the default user from PloneTestCase:\n\n    >>> from Products.PloneTestCase.setup import portal_owner, default_password\n\nBecause add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  \n\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = portal_owner\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n\nHere, we set the value of the fields on the login form and then simulate a\nsubmit click.  We then ensure that we get the friendly logged-in message:\n\n    >>> \"You are now logged in\" in browser.contents\n    True\n\nFinally, let's return to the front page of our site before continuing\n\n    >>> browser.open(portal_url)\n\n-*- extra stuff goes here -*-\nThe Media Event content type\n===============================\n\nIn this section we are tesing the Media Event content type by performing\nbasic operations like adding, updadating and deleting Media Event content\nitems.\n\nAdding a new Media Event content item\n--------------------------------\n\nWe use the 'Add new' menu to add a new content item.\n\n    >>> browser.getLink('Add new').click()\n\nThen we select the type of item we want to add. In this case we select\n'Media Event' and click the 'Add' button to get to the add form.\n\n    >>> browser.getControl('Media Event').click()\n    >>> browser.getControl(name='form.button.Add').click()\n    >>> 'Media Event' in browser.contents\n    True\n\nNow we fill the form and submit it.\n\n    >>> browser.getControl(name='title').value = 'Media Event Sample'\n    >>> browser.getControl('Save').click()\n    >>> 'Changes saved' in browser.contents\n    True\n\nAnd we are done! We added a new 'Media Event' content item to the portal.\n\nUpdating an existing Media Event content item\n---------------------------------------\n\nLet's click on the 'edit' tab and update the object attribute values.\n\n    >>> browser.getLink('Edit').click()\n    >>> browser.getControl(name='title').value = 'New Media Event Sample'\n    >>> browser.getControl('Save').click()\n\nWe check that the changes were applied.\n\n    >>> 'Changes saved' in browser.contents\n    True\n    >>> 'New Media Event Sample' in browser.contents\n    True\n\nRemoving a/an Media Event content item\n--------------------------------\n\nIf we go to the home page, we can see a tab with the 'New Media Event\nSample' title in the global navigation tabs.\n\n    >>> browser.open(portal_url)\n    >>> 'New Media Event Sample' in browser.contents\n    True\n\nNow we are going to delete the 'New Media Event Sample' object. First we\ngo to the contents tab and select the 'New Media Event Sample' for\ndeletion.\n\n    >>> browser.getLink('Contents').click()\n    >>> browser.getControl('New Media Event Sample').click()\n\nWe click on the 'Delete' button.\n\n    >>> browser.getControl('Delete').click()\n    >>> 'Item(s) deleted' in browser.contents\n    True\n\nSo, if we go back to the home page, there is no longer a 'New Media Event\nSample' tab.\n\n    >>> browser.open(portal_url)\n    >>> 'New Media Event Sample' in browser.contents\n    False\n\nAdding a new Media Event content item as contributor\n------------------------------------------------\n\nNot only site managers are allowed to add Media Event content items, but\nalso site contributors.\n\nLet's logout and then login as 'contributor', a portal member that has the\ncontributor role assigned.\n\n    >>> browser.getLink('Log out').click()\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = 'contributor'\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n    >>> browser.open(portal_url)\n\nWe use the 'Add new' menu to add a new content item.\n\n    >>> browser.getLink('Add new').click()\n\nWe select 'Media Event' and click the 'Add' button to get to the add form.\n\n    >>> browser.getControl('Media Event').click()\n    >>> browser.getControl(name='form.button.Add').click()\n    >>> 'Media Event' in browser.contents\n    True\n\nNow we fill the form and submit it.\n\n    >>> browser.getControl(name='title').value = 'Media Event Sample'\n    >>> browser.getControl('Save').click()\n    >>> 'Changes saved' in browser.contents\n    True\n\nDone! We added a new Media Event content item logged in as contributor.\n\nFinally, let's login back as manager.\n\n    >>> browser.getLink('Log out').click()\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = portal_owner\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n    >>> browser.open(portal_url)\n\n\n\n\nContributors\n************\n\nDavid Jonas, Author\n\n\nDownload\n********", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/", "keywords": "folderish type event", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "Products.mediaEvent", "package_url": "https://pypi.org/project/Products.mediaEvent/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Products.mediaEvent/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective/"}, "release_url": "https://pypi.org/project/Products.mediaEvent/0.12/", "requires_dist": null, "requires_python": null, "summary": "Event type with folderish behaviour to store mrelated media", "version": "0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. contents::<br><br>.. Note!<br>   -----<br>   Update the following URLs to point to your:<br><br>   - code repository<br>   - bug tracker<br>   - questions/comments feedback mail<br>   (do not set a real mail, to avoid spams)<br><br>   Or remove it if not used.<br><br>- Code repository: http://svn.somewhere.com/...<br>- Questions and comments to somemailing_list<br>- Report bugs at http://bug.somewhere.com/..<br><br><br>Change history<br>**************<br><br>Changelog<br>=========<br><br>0.1 (xxxx-xx-xx)<br>----------------<br><br>- Created recipe with ZopeSkel<br>  [David Jonas]<br><br>Detailed Documentation<br>**********************<br><br>Introduction<br>============<br><br>This is a full-blown functional test. The emphasis here is on testing what<br>the user may input and see, and the system is largely tested as a black box.<br>We use PloneTestCase to set up this test as well, so we have a full Plone site<br>to play with. We *can* inspect the state of the portal, e.g. using <br>self.portal and self.folder, but it is often frowned upon since you are not<br>treating the system as a black box. Also, if you, for example, log in or set<br>roles using calls like self.setRoles(), these are not reflected in the test<br>browser, which runs as a separate session.<br><br>Being a doctest, we can tell a story here.<br><br>First, we must perform some setup. We use the testbrowser that is shipped<br>with Five, as this provides proper Zope 2 integration. Most of the <br>documentation, though, is in the underlying zope.testbrower package.<br><br>    &gt;&gt;&gt; from Products.Five.testbrowser import Browser<br>    &gt;&gt;&gt; browser = Browser()<br>    &gt;&gt;&gt; portal_url = self.portal.absolute_url()<br><br>The following is useful when writing and debugging testbrowser tests. It lets<br>us see all error messages in the error_log.<br><br>    &gt;&gt;&gt; self.portal.error_log._ignored_exceptions = ()<br><br>With that in place, we can go to the portal front page and log in. We will<br>do this using the default user from PloneTestCase:<br><br>    &gt;&gt;&gt; from Products.PloneTestCase.setup import portal_owner, default_password<br><br>Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  <br><br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br><br>Here, we set the value of the fields on the login form and then simulate a<br>submit click.  We then ensure that we get the friendly logged-in message:<br><br>    &gt;&gt;&gt; \"You are now logged in\" in browser.contents<br>    True<br><br>Finally, let's return to the front page of our site before continuing<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br><br>-*- extra stuff goes here -*-<br>The Media Event content type<br>===============================<br><br>In this section we are tesing the Media Event content type by performing<br>basic operations like adding, updadating and deleting Media Event content<br>items.<br><br>Adding a new Media Event content item<br>--------------------------------<br><br>We use the 'Add new' menu to add a new content item.<br><br>    &gt;&gt;&gt; browser.getLink('Add new').click()<br><br>Then we select the type of item we want to add. In this case we select<br>'Media Event' and click the 'Add' button to get to the add form.<br><br>    &gt;&gt;&gt; browser.getControl('Media Event').click()<br>    &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>    &gt;&gt;&gt; 'Media Event' in browser.contents<br>    True<br><br>Now we fill the form and submit it.<br><br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'Media Event Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br><br>And we are done! We added a new 'Media Event' content item to the portal.<br><br>Updating an existing Media Event content item<br>---------------------------------------<br><br>Let's click on the 'edit' tab and update the object attribute values.<br><br>    &gt;&gt;&gt; browser.getLink('Edit').click()<br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'New Media Event Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br><br>We check that the changes were applied.<br><br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br>    &gt;&gt;&gt; 'New Media Event Sample' in browser.contents<br>    True<br><br>Removing a/an Media Event content item<br>--------------------------------<br><br>If we go to the home page, we can see a tab with the 'New Media Event<br>Sample' title in the global navigation tabs.<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br>    &gt;&gt;&gt; 'New Media Event Sample' in browser.contents<br>    True<br><br>Now we are going to delete the 'New Media Event Sample' object. First we<br>go to the contents tab and select the 'New Media Event Sample' for<br>deletion.<br><br>    &gt;&gt;&gt; browser.getLink('Contents').click()<br>    &gt;&gt;&gt; browser.getControl('New Media Event Sample').click()<br><br>We click on the 'Delete' button.<br><br>    &gt;&gt;&gt; browser.getControl('Delete').click()<br>    &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>    True<br><br>So, if we go back to the home page, there is no longer a 'New Media Event<br>Sample' tab.<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br>    &gt;&gt;&gt; 'New Media Event Sample' in browser.contents<br>    False<br><br>Adding a new Media Event content item as contributor<br>------------------------------------------------<br><br>Not only site managers are allowed to add Media Event content items, but<br>also site contributors.<br><br>Let's logout and then login as 'contributor', a portal member that has the<br>contributor role assigned.<br><br>    &gt;&gt;&gt; browser.getLink('Log out').click()<br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br>    &gt;&gt;&gt; browser.open(portal_url)<br><br>We use the 'Add new' menu to add a new content item.<br><br>    &gt;&gt;&gt; browser.getLink('Add new').click()<br><br>We select 'Media Event' and click the 'Add' button to get to the add form.<br><br>    &gt;&gt;&gt; browser.getControl('Media Event').click()<br>    &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>    &gt;&gt;&gt; 'Media Event' in browser.contents<br>    True<br><br>Now we fill the form and submit it.<br><br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'Media Event Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br><br>Done! We added a new Media Event content item logged in as contributor.<br><br>Finally, let's login back as manager.<br><br>    &gt;&gt;&gt; browser.getLink('Log out').click()<br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br>    &gt;&gt;&gt; browser.open(portal_url)<br><br><br><br><br>Contributors<br>************<br><br>David Jonas, Author<br><br><br>Download<br>********\n          </div>"}, "last_serial": 943227, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "feb114a214f3d449c9e6763d5c6ee5c9", "sha256": "72b2bcf329942cdc9eb6e912b99f02cecc4607409066793879a3c0bbd8c1166f"}, "downloads": -1, "filename": "Products.mediaEvent-0.1.tar.gz", "has_sig": false, "md5_digest": "feb114a214f3d449c9e6763d5c6ee5c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19765, "upload_time": "2012-09-18T17:30:30", "upload_time_iso_8601": "2012-09-18T17:30:30.967182Z", "url": "https://files.pythonhosted.org/packages/4f/44/3ae6fa30f488b18c367716cbacde0dd7e308bbaa5487b65f8c9ba3ccdde4/Products.mediaEvent-0.1.tar.gz", "yanked": false}], "0.10": [{"comment_text": "", "digests": {"md5": "b428fc9d2ae4ddc4ef432770c0c0cfe2", "sha256": "ebacfd5a8d9c6714fe319f839e78f4c0dab67d871d3e9e5ce7ca189a872f07c8"}, "downloads": -1, "filename": "Products.mediaEvent-0.10.tar.gz", "has_sig": false, "md5_digest": "b428fc9d2ae4ddc4ef432770c0c0cfe2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20527, "upload_time": "2013-12-12T22:10:50", "upload_time_iso_8601": "2013-12-12T22:10:50.151652Z", "url": "https://files.pythonhosted.org/packages/25/fb/0223c44e9e7459d7f1bdd04a57f139f976f2941cbcd7ab7ce616eb120b1b/Products.mediaEvent-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "2f4e6b44df0f6b257dfa01553c90c21b", "sha256": "17182f75d09fe83726103b70842e266366d8057b29a605d6e8c886f8bee747f5"}, "downloads": -1, "filename": "Products.mediaEvent-0.11.tar.gz", "has_sig": false, "md5_digest": "2f4e6b44df0f6b257dfa01553c90c21b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20520, "upload_time": "2013-12-12T22:25:04", "upload_time_iso_8601": "2013-12-12T22:25:04.648520Z", "url": "https://files.pythonhosted.org/packages/9f/fb/071eb3deb2c25cae9bd4cc176ec7aa6212de83c91d77ad07fd1c2ea044e7/Products.mediaEvent-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "c99146a11e2bd9d47023784ff5f8ff94", "sha256": "ef9f7320f0f2c4802f5723ab0a38d85de4a877e4fb21bcb265be4c6a7da9c7a1"}, "downloads": -1, "filename": "Products.mediaEvent-0.12.tar.gz", "has_sig": false, "md5_digest": "c99146a11e2bd9d47023784ff5f8ff94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20531, "upload_time": "2013-12-12T22:28:30", "upload_time_iso_8601": "2013-12-12T22:28:30.549304Z", "url": "https://files.pythonhosted.org/packages/32/1d/ed8e400f201216a37a13301192420de52ddc6b25b9f92e46032fabc9a18a/Products.mediaEvent-0.12.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5eb8cab9c79685fc606b5f64865c82c4", "sha256": "e6c1e2663e38f28115251ec58bac4209344e996529706a14ef2579a8d368ae9a"}, "downloads": -1, "filename": "Products.mediaEvent-0.2.tar.gz", "has_sig": false, "md5_digest": "5eb8cab9c79685fc606b5f64865c82c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19953, "upload_time": "2012-12-10T17:09:38", "upload_time_iso_8601": "2012-12-10T17:09:38.603832Z", "url": "https://files.pythonhosted.org/packages/75/d8/38d9a7f151f3dfc7a4b9a24fd5188a5e428270ea8513717317937f51923e/Products.mediaEvent-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "adccdaa1cf9937fbf499738b8ed0213d", "sha256": "5ccfe23c6053c7c13cf7eb2955dece914e285195e2630d63fdf4dd0cfb807a7e"}, "downloads": -1, "filename": "Products.mediaEvent-0.3.tar.gz", "has_sig": false, "md5_digest": "adccdaa1cf9937fbf499738b8ed0213d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20005, "upload_time": "2013-01-08T17:29:08", "upload_time_iso_8601": "2013-01-08T17:29:08.906400Z", "url": "https://files.pythonhosted.org/packages/ea/d9/c508f9a0a2e81bd8187c15d4bb4561bdabcd550afa536c8bcdcedd1e3f28/Products.mediaEvent-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "0684f468ff5f37d9fb7392220c24d9b9", "sha256": "b73a63eaa34fe35ac7975db99f3d0d32ffa721128fdf18b96fbab11e14292b3e"}, "downloads": -1, "filename": "Products.mediaEvent-0.4.tar.gz", "has_sig": false, "md5_digest": "0684f468ff5f37d9fb7392220c24d9b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20057, "upload_time": "2013-01-09T17:47:19", "upload_time_iso_8601": "2013-01-09T17:47:19.910093Z", "url": "https://files.pythonhosted.org/packages/82/b0/8b5b95a540de3de55ac9843e4a813c1bb36c976abb2a7c11a2c739ce06bd/Products.mediaEvent-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "9e24fc54f50566facce413a7017462d7", "sha256": "34144c8b54c38b87436690339f85b9f5b8fabb7c2f7bcb9f32dcbbf622ad0eab"}, "downloads": -1, "filename": "Products.mediaEvent-0.5.tar.gz", "has_sig": false, "md5_digest": "9e24fc54f50566facce413a7017462d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20097, "upload_time": "2013-01-14T15:37:11", "upload_time_iso_8601": "2013-01-14T15:37:11.418720Z", "url": "https://files.pythonhosted.org/packages/38/b8/bf01aeff53305971eb3f8010108b069a0f752263b59e9905bd4dbbca5aa0/Products.mediaEvent-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "24e2764acd8dfe162d3f3789849b0b96", "sha256": "1873715d2a6ead2dfe7a09c9f7ca8c709a43983f63f5f333637069b6ebdd8fd4"}, "downloads": -1, "filename": "Products.mediaEvent-0.6.tar.gz", "has_sig": false, "md5_digest": "24e2764acd8dfe162d3f3789849b0b96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20135, "upload_time": "2013-01-16T13:49:29", "upload_time_iso_8601": "2013-01-16T13:49:29.088723Z", "url": "https://files.pythonhosted.org/packages/fc/7e/98aa9b139b1259c6ca4f12bf1f4dfffaaff9578eb80427844e5670f265e9/Products.mediaEvent-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "568ab634affa92cb78bb5775148cf420", "sha256": "f1e03271abf60c005d31def87a9e48f6b8e7892e85f3892e48292717dfb66847"}, "downloads": -1, "filename": "Products.mediaEvent-0.7.tar.gz", "has_sig": false, "md5_digest": "568ab634affa92cb78bb5775148cf420", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20241, "upload_time": "2013-01-30T16:06:02", "upload_time_iso_8601": "2013-01-30T16:06:02.119944Z", "url": "https://files.pythonhosted.org/packages/b8/12/91d45a06643e33ce52a0f89f782093f28c57caac66cceaf93a824655336a/Products.mediaEvent-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "eb14d841038708613bb1f8d9dd94eb6d", "sha256": "329c68ce0b9afc01d4beafd5b8ba7272ac12f84a8b30e00767883704d3a38b81"}, "downloads": -1, "filename": "Products.mediaEvent-0.8.tar.gz", "has_sig": false, "md5_digest": "eb14d841038708613bb1f8d9dd94eb6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20523, "upload_time": "2013-12-12T11:38:50", "upload_time_iso_8601": "2013-12-12T11:38:50.348767Z", "url": "https://files.pythonhosted.org/packages/5e/b3/30ad9df045c7990d2996c4ed6c3e3c59719d6612f7eff096f64302b2b651/Products.mediaEvent-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "15609157e6e639fa909bb12234cd4ed6", "sha256": "97a366673529b04276a8d08528bd71f9cbd979efd8e9efa544de120e587b094b"}, "downloads": -1, "filename": "Products.mediaEvent-0.9.tar.gz", "has_sig": false, "md5_digest": "15609157e6e639fa909bb12234cd4ed6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20545, "upload_time": "2013-12-12T21:55:37", "upload_time_iso_8601": "2013-12-12T21:55:37.798396Z", "url": "https://files.pythonhosted.org/packages/cf/3d/08cc865d42ad2206968a7d3cf510a22ff61c99b356281c154093d114753c/Products.mediaEvent-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c99146a11e2bd9d47023784ff5f8ff94", "sha256": "ef9f7320f0f2c4802f5723ab0a38d85de4a877e4fb21bcb265be4c6a7da9c7a1"}, "downloads": -1, "filename": "Products.mediaEvent-0.12.tar.gz", "has_sig": false, "md5_digest": "c99146a11e2bd9d47023784ff5f8ff94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20531, "upload_time": "2013-12-12T22:28:30", "upload_time_iso_8601": "2013-12-12T22:28:30.549304Z", "url": "https://files.pythonhosted.org/packages/32/1d/ed8e400f201216a37a13301192420de52ddc6b25b9f92e46032fabc9a18a/Products.mediaEvent-0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:10 2020"}