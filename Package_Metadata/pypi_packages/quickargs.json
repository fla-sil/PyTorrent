{"info": {"author": "krasch", "author_email": "code@krasch.io", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "quickargs\n---------\n\nTakes a YAML config file and builds a parser for command line arguments\naround it. This allows you to easily override default settings by\npassing command line arguments to your program. Supports nested\narguments and auto-enforces parameter types.\n\nThis config file...\n^^^^^^^^^^^^^^^^^^^\n\n.. code:: yaml\n\n    input_dir: data\n    logging:\n        file: output.log\n        level: 4\n\n... together with this main.py ...\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import yaml\n    import quickargs\n\n    with open(\"config.yaml\") as f:\n        config = yaml.load(f, Loader=quickargs.YAMLArgsLoader)\n\n... will give you this command line interface\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    usage: main.py [-h] [--input_dir INPUT_DIR] [--logging.file LOGGING.FILE]\n                   [--logging.level LOGGING.LEVEL]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --input_dir INPUT_DIR\n                            default: data\n      --logging.file LOGGING.FILE\n                            default: output.log\n      --logging.level LOGGING.LEVEL\n                            default: 4\n\nOverride settings using the command line\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``python main.py --logging.file=other_log.txt``\n\nYou get your merged yaml + command line parameters in a convenient dictionary\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    # exact same output format as normal yaml.load would produce\n    {'input_dir': 'data', 'logging': {'file': 'other_log.txt', 'level': 4}}\n\nThe types used in the yaml file are automatically enforced\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSetting the log-level to a string instead of an int: ``python main.py --logging.level=WARNING``\n                                                                                               \n\n::\n\n    usage: main.py [-h] [--input_dir INPUT_DIR] [--logging.file LOGGING.FILE]\n                   [--logging.level LOGGING.LEVEL]\n    main.py: error: argument --logging.level: invalid int value: 'WARNING'\n\nSetting the log-level to the correct type: ``python main.py --logging.level=0``\n                                                                               \n\n::\n\n    {'input_dir': 'data', 'logging': {'file': 'output.log', 'level': 0}}\n\nInstallation\n------------\n\n::\n\n    pip install quickargs\n\nUsage\n-----\n\nLoad the yaml config and parse command line arguments\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nmain.py\n       \n\n.. code:: python\n\n    import yaml\n    import quickargs\n\n    with open(\"config.yaml\") as f:\n        config = yaml.load(f, Loader=quickargs.YAMLArgsLoader)\n\nDeeply nested arguments are no problem\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconfig.yaml\n           \n\n.. code:: yaml\n\n    key1:\n      key2:\n        key3:\n          key4: value\n\nOverride nested argument using dot notation: ``python main.py --key1.key2.key3.key4=other_value``\n                                                                                                 \n\n::\n\n    {'key1': {'key2': {'key3': {'key4': 'other_value'}}}}\n\nOf course it is fine to just call your program without any command line arguments\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nHappy with the default values in config file: ``python main.py``\n                                                                \n\n::\n\n    {'key1': {'key2': {'key3': {'key4': 'value'}}}}\n\nMost yaml types, including sequences are supported\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconfig.yaml\n           \n\n.. code:: yaml\n\n    thresholds: [0.2, 0.4, 0.6, 0.8, 1.0]\n\nOverride the thresholds: ``python main.py --thresholds='[0.0, 0.5, 1.0]'``\n                                                                          \n\n(take care to use ' ' around your command line arguments if they include\nspaces)\n\n::\n\n    {'thresholds': [0.0, 0.5, 1.0]}\n\nHowever, types within sequences are not enforced\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconfig.yaml\n           \n\n.. code:: yaml\n\n    thresholds: [0.2, 0.4, 0.6, 0.8, 1.0]\n\nList of strings instead of list of floats does not give an error: ``python main.py --thresholds=[a,b,c]``\n                                                                                                         \n\n::\n\n    {'thresholds': ['a', 'b', 'c']}\n\nYou can even pass references to functions or classes (your own or builtins)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconfig.yaml\n           \n\n.. code:: yaml\n\n    function_to_call: !!python/name:yaml.dump\n\nOverride with reference to built-in zip function: ``python main.py --function_to_call=zip``\n                                                                                           \n\n::\n\n    {'function_to_call': <built-in function zip>}\n\nExample with all supported types\n--------------------------------\n\nconfig.yaml\n           \n\n.. code:: yaml\n\n    an_int: 3\n    a_float: 3.0\n    a_bool: True\n    a_complex_number: 37-880j\n\n    a_date: 2016-12-11\n\n    sequences:\n      a_list: [a, b, c]\n      # for tuples you need to use square [] brackeds in the yaml and on the command line\n      # they will still be proper tuples in the result\n      a_tuple: !!python/tuple [a, b]\n\n    python:\n      a_function: !!python/name:yaml.load\n      a_class: !!python/name:yaml.loader.Loader\n      a_module: !!python/module:contextlib\n      # can be overwritten with any type\n      a_none: !!python/none\n\nOverride every single parameter in the config file\n                                                  \n\n::\n\n    python main.py --an_int=4 --a_float=2.0 --a_bool=False --a_complex_number=42-111j --a_date=2017-01-01 \\\n                   --sequences.a_list=[c,b,c] --sequences.a_tuple=[b,a] --python.a_function=zip \\\n                   --python.a_class=yaml.parser.Parser --python.a_module=yaml --python.a_none=1234\n\n::\n\n    {'a_bool': False,\n     'a_complex_number': '42-111j',\n     'a_date': datetime.date(2017, 1, 1),\n     'a_float': 2.0,\n     'an_int': 4,\n     'python': {'a_class': <class 'yaml.parser.Parser'>,\n                'a_function': <built-in function zip>,\n                'a_module': <module 'yaml' from ...>,\n                'a_none': None},\n     'sequences': {'a_list': ['c', 'b', 'c'], 'a_tuple': ('b', 'a')}}\n\nCurrently not supported\n-----------------------\n\nTypes\n^^^^^\n\nFollowing types are not supported at all:\n\n-  !!python/dict (because it looks just like the rest of the yaml file)\n-  !!pairs\n\nFollowing types are not enforced / objects will not be instantiated:\n\n-  !!python/object\n-  !!python/object/new\n-  !!python/object/apply\n\nMulti-document loading\n^^^^^^^^^^^^^^^^^^^^^^\n\nIf the YAML file contains multiple documents, only the first document\nwill be considered. The ``yaml.load_all`` functionality is not\nsupported.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/krasch/quickargs", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "quickargs", "package_url": "https://pypi.org/project/quickargs/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/quickargs/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/krasch/quickargs"}, "release_url": "https://pypi.org/project/quickargs/0.1/", "requires_dist": null, "requires_python": null, "summary": "YAML config file -> command line interface", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"quickargs\">\n<h2>quickargs</h2>\n<p>Takes a YAML config file and builds a parser for command line arguments\naround it. This allows you to easily override default settings by\npassing command line arguments to your program. Supports nested\narguments and auto-enforces parameter types.</p>\n<div id=\"this-config-file\">\n<h3>This config file\u2026</h3>\n<pre><span class=\"nt\">input_dir</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">data</span>\n<span class=\"nt\">logging</span><span class=\"p\">:</span>\n    <span class=\"nt\">file</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">output.log</span>\n    <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">4</span>\n</pre>\n</div>\n<div id=\"together-with-this-main-py\">\n<h3>\u2026 together with this main.py \u2026</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n<span class=\"kn\">import</span> <span class=\"nn\">quickargs</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"config.yaml\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">Loader</span><span class=\"o\">=</span><span class=\"n\">quickargs</span><span class=\"o\">.</span><span class=\"n\">YAMLArgsLoader</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"will-give-you-this-command-line-interface\">\n<h3>\u2026 will give you this command line interface</h3>\n<pre>usage: main.py [-h] [--input_dir INPUT_DIR] [--logging.file LOGGING.FILE]\n               [--logging.level LOGGING.LEVEL]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --input_dir INPUT_DIR\n                        default: data\n  --logging.file LOGGING.FILE\n                        default: output.log\n  --logging.level LOGGING.LEVEL\n                        default: 4\n</pre>\n</div>\n<div id=\"override-settings-using-the-command-line\">\n<h3>Override settings using the command line</h3>\n<p><tt>python main.py <span class=\"pre\">--logging.file=other_log.txt</span></tt></p>\n</div>\n<div id=\"you-get-your-merged-yaml-command-line-parameters-in-a-convenient-dictionary\">\n<h3>You get your merged yaml + command line parameters in a convenient dictionary</h3>\n<pre># exact same output format as normal yaml.load would produce\n{'input_dir': 'data', 'logging': {'file': 'other_log.txt', 'level': 4}}\n</pre>\n</div>\n<div id=\"the-types-used-in-the-yaml-file-are-automatically-enforced\">\n<h3>The types used in the yaml file are automatically enforced</h3>\n<p>Setting the log-level to a string instead of an int: <tt>python main.py <span class=\"pre\">--logging.level=WARNING</span></tt></p>\n<pre>usage: main.py [-h] [--input_dir INPUT_DIR] [--logging.file LOGGING.FILE]\n               [--logging.level LOGGING.LEVEL]\nmain.py: error: argument --logging.level: invalid int value: 'WARNING'\n</pre>\n<p>Setting the log-level to the correct type: <tt>python main.py <span class=\"pre\">--logging.level=0</span></tt></p>\n<pre>{'input_dir': 'data', 'logging': {'file': 'output.log', 'level': 0}}\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install quickargs\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"load-the-yaml-config-and-parse-command-line-arguments\">\n<h3>Load the yaml config and parse command line arguments</h3>\n<p>main.py</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n<span class=\"kn\">import</span> <span class=\"nn\">quickargs</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"config.yaml\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">Loader</span><span class=\"o\">=</span><span class=\"n\">quickargs</span><span class=\"o\">.</span><span class=\"n\">YAMLArgsLoader</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"deeply-nested-arguments-are-no-problem\">\n<h3>Deeply nested arguments are no problem</h3>\n<p>config.yaml</p>\n<pre><span class=\"nt\">key1</span><span class=\"p\">:</span>\n  <span class=\"nt\">key2</span><span class=\"p\">:</span>\n    <span class=\"nt\">key3</span><span class=\"p\">:</span>\n      <span class=\"nt\">key4</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">value</span>\n</pre>\n<p>Override nested argument using dot notation: <tt>python main.py <span class=\"pre\">--key1.key2.key3.key4=other_value</span></tt></p>\n<pre>{'key1': {'key2': {'key3': {'key4': 'other_value'}}}}\n</pre>\n</div>\n<div id=\"of-course-it-is-fine-to-just-call-your-program-without-any-command-line-arguments\">\n<h3>Of course it is fine to just call your program without any command line arguments</h3>\n<p>Happy with the default values in config file: <tt>python main.py</tt></p>\n<pre>{'key1': {'key2': {'key3': {'key4': 'value'}}}}\n</pre>\n</div>\n<div id=\"most-yaml-types-including-sequences-are-supported\">\n<h3>Most yaml types, including sequences are supported</h3>\n<p>config.yaml</p>\n<pre><span class=\"nt\">thresholds</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">0.2</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">0.4</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">0.6</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">0.8</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">1.0</span><span class=\"p-Indicator\">]</span>\n</pre>\n<p>Override the thresholds: <tt>python main.py <span class=\"pre\">--thresholds='[0.0,</span> 0.5, 1.0]'</tt></p>\n<p>(take care to use \u2018 \u2018 around your command line arguments if they include\nspaces)</p>\n<pre>{'thresholds': [0.0, 0.5, 1.0]}\n</pre>\n</div>\n<div id=\"however-types-within-sequences-are-not-enforced\">\n<h3>However, types within sequences are not enforced</h3>\n<p>config.yaml</p>\n<pre><span class=\"nt\">thresholds</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">0.2</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">0.4</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">0.6</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">0.8</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">1.0</span><span class=\"p-Indicator\">]</span>\n</pre>\n<p>List of strings instead of list of floats does not give an error: <tt>python main.py <span class=\"pre\">--thresholds=[a,b,c]</span></tt></p>\n<pre>{'thresholds': ['a', 'b', 'c']}\n</pre>\n</div>\n<div id=\"you-can-even-pass-references-to-functions-or-classes-your-own-or-builtins\">\n<h3>You can even pass references to functions or classes (your own or builtins)</h3>\n<p>config.yaml</p>\n<pre><span class=\"nt\">function_to_call</span><span class=\"p\">:</span> <span class=\"kt\">!!python/name:yaml.dump</span>\n</pre>\n<p>Override with reference to built-in zip function: <tt>python main.py <span class=\"pre\">--function_to_call=zip</span></tt></p>\n<pre>{'function_to_call': &lt;built-in function zip&gt;}\n</pre>\n</div>\n</div>\n<div id=\"example-with-all-supported-types\">\n<h2>Example with all supported types</h2>\n<p>config.yaml</p>\n<pre><span class=\"nt\">an_int</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">3</span>\n<span class=\"nt\">a_float</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">3.0</span>\n<span class=\"nt\">a_bool</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">True</span>\n<span class=\"nt\">a_complex_number</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">37-880j</span>\n\n<span class=\"nt\">a_date</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">2016-12-11</span>\n\n<span class=\"nt\">sequences</span><span class=\"p\">:</span>\n  <span class=\"nt\">a_list</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">a</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">b</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">c</span><span class=\"p-Indicator\">]</span>\n  <span class=\"c1\"># for tuples you need to use square [] brackeds in the yaml and on the command line</span>\n  <span class=\"c1\"># they will still be proper tuples in the result</span>\n  <span class=\"nt\">a_tuple</span><span class=\"p\">:</span> <span class=\"kt\">!!python/tuple</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">a</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">b</span><span class=\"p-Indicator\">]</span>\n\n<span class=\"nt\">python</span><span class=\"p\">:</span>\n  <span class=\"nt\">a_function</span><span class=\"p\">:</span> <span class=\"kt\">!!python/name:yaml.load</span>\n  <span class=\"nt\">a_class</span><span class=\"p\">:</span> <span class=\"kt\">!!python/name:yaml.loader.Loader</span>\n  <span class=\"nt\">a_module</span><span class=\"p\">:</span> <span class=\"kt\">!!python/module:contextlib</span>\n  <span class=\"c1\"># can be overwritten with any type</span>\n  <span class=\"nt\">a_none</span><span class=\"p\">:</span> <span class=\"kt\">!!python/none</span>\n</pre>\n<p>Override every single parameter in the config file</p>\n<pre>python main.py --an_int=4 --a_float=2.0 --a_bool=False --a_complex_number=42-111j --a_date=2017-01-01 \\\n               --sequences.a_list=[c,b,c] --sequences.a_tuple=[b,a] --python.a_function=zip \\\n               --python.a_class=yaml.parser.Parser --python.a_module=yaml --python.a_none=1234\n</pre>\n<pre>{'a_bool': False,\n 'a_complex_number': '42-111j',\n 'a_date': datetime.date(2017, 1, 1),\n 'a_float': 2.0,\n 'an_int': 4,\n 'python': {'a_class': &lt;class 'yaml.parser.Parser'&gt;,\n            'a_function': &lt;built-in function zip&gt;,\n            'a_module': &lt;module 'yaml' from ...&gt;,\n            'a_none': None},\n 'sequences': {'a_list': ['c', 'b', 'c'], 'a_tuple': ('b', 'a')}}\n</pre>\n</div>\n<div id=\"currently-not-supported\">\n<h2>Currently not supported</h2>\n<div id=\"types\">\n<h3>Types</h3>\n<p>Following types are not supported at all:</p>\n<ul>\n<li>!!python/dict (because it looks just like the rest of the yaml file)</li>\n<li>!!pairs</li>\n</ul>\n<p>Following types are not enforced / objects will not be instantiated:</p>\n<ul>\n<li>!!python/object</li>\n<li>!!python/object/new</li>\n<li>!!python/object/apply</li>\n</ul>\n</div>\n<div id=\"multi-document-loading\">\n<h3>Multi-document loading</h3>\n<p>If the YAML file contains multiple documents, only the first document\nwill be considered. The <tt>yaml.load_all</tt> functionality is not\nsupported.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2524717, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "779fc8da9008b2c99763ddca74a8da08", "sha256": "82c22e2a04de34ce67f33d5a9b2740a8a3507c1ff1b6129e053ed1e8c434068a"}, "downloads": -1, "filename": "quickargs-0.1.linux-x86_64.tar.gz", "has_sig": true, "md5_digest": "779fc8da9008b2c99763ddca74a8da08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17341, "upload_time": "2016-12-17T13:03:37", "upload_time_iso_8601": "2016-12-17T13:03:37.823949Z", "url": "https://files.pythonhosted.org/packages/99/a3/498615f3ffd7eea0fba85de5f086ee76d928fbcc7a52dce6976b8a16a679/quickargs-0.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "f922dff4bb4a85252217efcd2833fccb", "sha256": "bf04897d1c474f670ec598a0c738db72ba54fe9c8720f196f411fa7c67902102"}, "downloads": -1, "filename": "quickargs-0.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "f922dff4bb4a85252217efcd2833fccb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12744, "upload_time": "2016-12-17T13:03:33", "upload_time_iso_8601": "2016-12-17T13:03:33.421439Z", "url": "https://files.pythonhosted.org/packages/18/20/ac9ba7a1332a34bb44ae45219820037bddc6689cc9fee56c9b768362280a/quickargs-0.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "779fc8da9008b2c99763ddca74a8da08", "sha256": "82c22e2a04de34ce67f33d5a9b2740a8a3507c1ff1b6129e053ed1e8c434068a"}, "downloads": -1, "filename": "quickargs-0.1.linux-x86_64.tar.gz", "has_sig": true, "md5_digest": "779fc8da9008b2c99763ddca74a8da08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17341, "upload_time": "2016-12-17T13:03:37", "upload_time_iso_8601": "2016-12-17T13:03:37.823949Z", "url": "https://files.pythonhosted.org/packages/99/a3/498615f3ffd7eea0fba85de5f086ee76d928fbcc7a52dce6976b8a16a679/quickargs-0.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "f922dff4bb4a85252217efcd2833fccb", "sha256": "bf04897d1c474f670ec598a0c738db72ba54fe9c8720f196f411fa7c67902102"}, "downloads": -1, "filename": "quickargs-0.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "f922dff4bb4a85252217efcd2833fccb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12744, "upload_time": "2016-12-17T13:03:33", "upload_time_iso_8601": "2016-12-17T13:03:33.421439Z", "url": "https://files.pythonhosted.org/packages/18/20/ac9ba7a1332a34bb44ae45219820037bddc6689cc9fee56c9b768362280a/quickargs-0.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:08:33 2020"}