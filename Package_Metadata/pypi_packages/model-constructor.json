{"info": {"author": "Andrei Yasyrev", "author_email": "a.yasyrev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# model_constructor\n> Constructor to create pytorch model.\n\n\n_\n\n## Install\n\n`pip install model-constructor`\n\nOr instll from repo:\n\n`pip install git+https://github.com/ayasyrev/model_constructor.git`\n\n## How to use\n\nIt can be used two ways.  \nClassic - create model from function with parameters.   \nAnd by creating constructor object, then modify it and then create model.\n\n\n# Class Net\n\nFirst import constructor class, then create model constructor oject.\n\n```\nfrom model_constructor.net import *\n```\n\n```\nmodel = Net()\n```\n\n```\nmodel\n```\n\n\n\n\n     constr Net\n\n\n\nNow we have model consructor, defoult setting as xresnet18. And we can get model after call it.\n\n```\nmodel.c_in\n```\n\n\n\n\n    3\n\n\n\n```\nmodel.c_out\n```\n\n\n\n\n    1000\n\n\n\n```\nmodel.stem_sizes\n```\n\n\n\n\n    [3, 32, 32, 64]\n\n\n\n```\nmodel.layers\n```\n\n\n\n\n    [2, 2, 2, 2]\n\n\n\n```\nmodel.expansion\n```\n\n\n\n\n    1\n\n\n\n```\nmodel()\n```\n\n\n\n\n    Sequential(\n      model Net\n      (stem): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (stem_pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      )\n      (body): Sequential(\n        (l_0): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvLayer(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvLayer(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvLayer(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvLayer(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n        )\n        (l_1): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvLayer(\n                (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvLayer(\n                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n            (idconv): ConvLayer(\n              (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvLayer(\n                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvLayer(\n                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n        )\n        (l_2): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvLayer(\n                (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvLayer(\n                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n            (idconv): ConvLayer(\n              (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvLayer(\n                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvLayer(\n                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n        )\n        (l_3): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvLayer(\n                (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvLayer(\n                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n            (idconv): ConvLayer(\n              (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvLayer(\n                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvLayer(\n                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n        )\n      )\n      (head): Sequential(\n        (pool): AdaptiveAvgPool2d(output_size=1)\n        (flat): Flatten()\n        (fc): Linear(in_features=512, out_features=1000, bias=True)\n      )\n    )\n\n\n\nIf you want to change model, just change constructor parameters.  \nLets create xresnet50.\n\n```\nmodel.expansion = 4\nmodel.layers = [3,4,6,3]\n```\n\nNow we can look at model body and if we call constructor - we have pytorch model!\n\n```\nmodel.body\n```\n\n\n\n\n    Sequential(\n      (l_0): Sequential(\n        (bl_0): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_1): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_2): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n      )\n      (l_1): Sequential(\n        (bl_0): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n          (idconv): ConvLayer(\n            (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_1): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_2): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_3): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n      )\n      (l_2): Sequential(\n        (bl_0): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n          (idconv): ConvLayer(\n            (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_1): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_2): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_3): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_4): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_5): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n      )\n      (l_3): Sequential(\n        (bl_0): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n          (idconv): ConvLayer(\n            (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_1): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_2): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvLayer(\n              (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvLayer(\n              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvLayer(\n              (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n      )\n    )\n\n\n\n```\nmodel.block_szs\n```\n\n\n\n\n    [16, 64, 128, 256, 512]\n\n\n\n## More modification.\n\nMain purpose of this module - fast and easy modify model.\nAnd here is the link to more modification to beat Imagenette leaderboard with add MaxBlurPool and modification to ResBlock https://github.com/ayasyrev/imagenette_experiments/blob/master/ResnetTrick_create_model_fit.ipynb  \n\nBut now lets create model as mxresnet50 from fastai forums tread https://forums.fast.ai/t/how-we-beat-the-5-epoch-imagewoof-leaderboard-score-some-new-techniques-to-consider  \n\n\nLets create mxresnet constructor.\n\n```\nmxresnet = Net()\n```\n\nThen lets modify stem.\n\n```\nmxresnet.stem_sizes = [3,32,64,64]\n```\n\nNow lets change activation function to Mish.\nHere is link to forum disscussion https://forums.fast.ai/t/meet-mish-new-activation-function-possible-successor-to-relu\n\n```\nclass Mish(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n    def forward(self, x):  \n        return x *( torch.tanh(F.softplus(x))) \n```\n\n```\nmxresnet.expansion = 4\nmxresnet.layers = [3,4,6,3]\nmxresnet.act_fn = Mish()\nmxresnet.name = 'mxresnet50'\n```\n\nNow we have mxresnet50 constructor.  \nWe can inspect some parts of it.  \nAnd after call it we got model.\n\n```\nmxresnet\n```\n\n\n\n\n     constr mxresnet50\n\n\n\n```\nmxresnet.stem.conv_1\n```\n\n\n\n\n    ConvLayer(\n      (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (act_fn): Mish()\n    )\n\n\n\n```\nmxresnet.body.l_0.bl_0\n```\n\n\n\n\n    ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): Mish()\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): Mish()\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (idconv): ConvLayer(\n        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (act_fn): Mish()\n    )\n\n\n\nNow lets change Resblock. NewResBlock (stiil not own name yet) is in lib from version 0.1.0\n\n```\nmxresnet.block = NewResBlock\n```\n\nThat all. Let see what we have.\n\n```\nmxresnet.body.l_1.bl_0\n```\n\n\n\n\n    NewResBlock(\n      (reduce): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): Mish()\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): Mish()\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (idconv): ConvLayer(\n        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (merge): Mish()\n    )\n\n\n\n# Classic way\n\nUsual way to get model - call constructor with parametrs.\n\n```\nfrom model_constructor.constructor import *\n```\n\nDefault is resnet18.\n\n```\nmodel = Net()\n```\n\nYou cant modify model after call constructor, so define model with parameters.   \nFor example, resnet34:\n\n```\nresnet34 = Net(block=BasicBlock, blocks=[3, 4, 6, 3])\n```\n\n## Predefined Resnet models - 18, 34, 50.\n\n```\nfrom model_constructor.resnet import *\n```\n\n```\nmodel = resnet34(num_classes=10)\n```\n\n```\nmodel = resnet50(num_classes=10)\n```\n\n## Predefined Xresnet from fastai 1.\n\nThis ie simplified version from fastai v1. I did refactoring for better understand and experiment with models. For example, it's very simple to change activation funtions, different stems, batchnorm and activation order etc. In v2 much powerfull realisation.\n\n```\nfrom model_constructor.xresnet import *\n```\n\n```\nmodel = xresnet50()\n```\n\n## Some examples.\n\nWe can experiment with models by changing some parts of model. Here only base functionality, but it can be easily extanded.\n\nHere is some examples:\n\n\n### Custom stem\n\nStem with 3 conv layers\n\n```\nmodel = Net(stem=partial(Stem, stem_sizes=[32, 32]))\n```\n\n```\nmodel.stem\n```\n\n\n\n\n    Stem(\n      sizes: [3, 32, 32, 64]\n      (conv_0): ConvLayer(\n        (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (act_fn): ReLU(inplace=True)\n      )\n      (conv_1): ConvLayer(\n        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (act_fn): ReLU(inplace=True)\n      )\n      (conv_2): ConvLayer(\n        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (act_fn): ReLU(inplace=True)\n      )\n      (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    )\n\n\n\n```\nmodel = Net(stem_sizes=[32, 64])\n```\n\n```\nmodel.stem\n```\n\n\n\n\n    Stem(\n      sizes: [3, 32, 64, 64]\n      (conv_0): ConvLayer(\n        (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (act_fn): ReLU(inplace=True)\n      )\n      (conv_1): ConvLayer(\n        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (act_fn): ReLU(inplace=True)\n      )\n      (conv_2): ConvLayer(\n        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (act_fn): ReLU(inplace=True)\n      )\n      (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    )\n\n\n\n### Activation function before Normalization\n\n```\nmodel = Net(bn_1st=False)\n```\n\n```\nmodel.stem\n```\n\n\n\n\n    Stem(\n      sizes: [3, 64]\n      (conv_0): ConvLayer(\n        (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (act_fn): ReLU(inplace=True)\n        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    )\n\n\n\n\n### Change activation function\n\n```\nnew_act_fn = nn.LeakyReLU(inplace=True)\n```\n\n```\nmodel = Net(act_fn=new_act_fn)\n```\n\n```\nmodel.stem\n```\n\n\n\n\n    Stem(\n      sizes: [3, 64]\n      (conv_0): ConvLayer(\n        (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (act_fn): LeakyReLU(negative_slope=0.01, inplace=True)\n      )\n      (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    )\n\n\n\n```\nmodel.body.layer_0.block_0\n```\n\n\n\n\n    BasicBlock(\n      (conv): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): LeakyReLU(negative_slope=0.01, inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (merge): Noop()\n      (act_conn): LeakyReLU(negative_slope=0.01, inplace=True)\n    )\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ayasyrev/model_constructor", "keywords": "dl,pytorch,model", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "model-constructor", "package_url": "https://pypi.org/project/model-constructor/", "platform": "", "project_url": "https://pypi.org/project/model-constructor/", "project_urls": {"Homepage": "https://github.com/ayasyrev/model_constructor"}, "release_url": "https://pypi.org/project/model-constructor/0.1.1/", "requires_dist": ["fastcore", "torch"], "requires_python": ">=3.6", "summary": "Constructor for pytorch models.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>model_constructor</h1>\n<blockquote>\n<p>Constructor to create pytorch model.</p>\n</blockquote>\n<p>_</p>\n<h2>Install</h2>\n<p><code>pip install model-constructor</code></p>\n<p>Or instll from repo:</p>\n<p><code>pip install git+https://github.com/ayasyrev/model_constructor.git</code></p>\n<h2>How to use</h2>\n<p>It can be used two ways.<br>\nClassic - create model from function with parameters.<br>\nAnd by creating constructor object, then modify it and then create model.</p>\n<h1>Class Net</h1>\n<p>First import constructor class, then create model constructor oject.</p>\n<pre><code>from model_constructor.net import *\n</code></pre>\n<pre><code>model = Net()\n</code></pre>\n<pre><code>model\n</code></pre>\n<pre><code> constr Net\n</code></pre>\n<p>Now we have model consructor, defoult setting as xresnet18. And we can get model after call it.</p>\n<pre><code>model.c_in\n</code></pre>\n<pre><code>3\n</code></pre>\n<pre><code>model.c_out\n</code></pre>\n<pre><code>1000\n</code></pre>\n<pre><code>model.stem_sizes\n</code></pre>\n<pre><code>[3, 32, 32, 64]\n</code></pre>\n<pre><code>model.layers\n</code></pre>\n<pre><code>[2, 2, 2, 2]\n</code></pre>\n<pre><code>model.expansion\n</code></pre>\n<pre><code>1\n</code></pre>\n<pre><code>model()\n</code></pre>\n<pre><code>Sequential(\n  model Net\n  (stem): Sequential(\n    (conv_0): ConvLayer(\n      (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (act_fn): ReLU(inplace=True)\n    )\n    (conv_1): ConvLayer(\n      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (act_fn): ReLU(inplace=True)\n    )\n    (conv_2): ConvLayer(\n      (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (act_fn): ReLU(inplace=True)\n    )\n    (stem_pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n  )\n  (body): Sequential(\n    (l_0): Sequential(\n      (bl_0): ResBlock(\n        (convs): Sequential(\n          (conv_0): ConvLayer(\n            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (act_fn): ReLU(inplace=True)\n          )\n          (conv_1): ConvLayer(\n            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (act_fn): ReLU(inplace=True)\n      )\n      (bl_1): ResBlock(\n        (convs): Sequential(\n          (conv_0): ConvLayer(\n            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (act_fn): ReLU(inplace=True)\n          )\n          (conv_1): ConvLayer(\n            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (act_fn): ReLU(inplace=True)\n      )\n    )\n    (l_1): Sequential(\n      (bl_0): ResBlock(\n        (convs): Sequential(\n          (conv_0): ConvLayer(\n            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (act_fn): ReLU(inplace=True)\n          )\n          (conv_1): ConvLayer(\n            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n        (idconv): ConvLayer(\n          (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (act_fn): ReLU(inplace=True)\n      )\n      (bl_1): ResBlock(\n        (convs): Sequential(\n          (conv_0): ConvLayer(\n            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (act_fn): ReLU(inplace=True)\n          )\n          (conv_1): ConvLayer(\n            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (act_fn): ReLU(inplace=True)\n      )\n    )\n    (l_2): Sequential(\n      (bl_0): ResBlock(\n        (convs): Sequential(\n          (conv_0): ConvLayer(\n            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (act_fn): ReLU(inplace=True)\n          )\n          (conv_1): ConvLayer(\n            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n        (idconv): ConvLayer(\n          (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (act_fn): ReLU(inplace=True)\n      )\n      (bl_1): ResBlock(\n        (convs): Sequential(\n          (conv_0): ConvLayer(\n            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (act_fn): ReLU(inplace=True)\n          )\n          (conv_1): ConvLayer(\n            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (act_fn): ReLU(inplace=True)\n      )\n    )\n    (l_3): Sequential(\n      (bl_0): ResBlock(\n        (convs): Sequential(\n          (conv_0): ConvLayer(\n            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (act_fn): ReLU(inplace=True)\n          )\n          (conv_1): ConvLayer(\n            (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n        (idconv): ConvLayer(\n          (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (act_fn): ReLU(inplace=True)\n      )\n      (bl_1): ResBlock(\n        (convs): Sequential(\n          (conv_0): ConvLayer(\n            (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (act_fn): ReLU(inplace=True)\n          )\n          (conv_1): ConvLayer(\n            (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (act_fn): ReLU(inplace=True)\n      )\n    )\n  )\n  (head): Sequential(\n    (pool): AdaptiveAvgPool2d(output_size=1)\n    (flat): Flatten()\n    (fc): Linear(in_features=512, out_features=1000, bias=True)\n  )\n)\n</code></pre>\n<p>If you want to change model, just change constructor parameters.<br>\nLets create xresnet50.</p>\n<pre><code>model.expansion = 4\nmodel.layers = [3,4,6,3]\n</code></pre>\n<p>Now we can look at model body and if we call constructor - we have pytorch model!</p>\n<pre><code>model.body\n</code></pre>\n<pre><code>Sequential(\n  (l_0): Sequential(\n    (bl_0): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_1): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_2): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n  )\n  (l_1): Sequential(\n    (bl_0): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      (idconv): ConvLayer(\n        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_1): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_2): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_3): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n  )\n  (l_2): Sequential(\n    (bl_0): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      (idconv): ConvLayer(\n        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_1): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_2): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_3): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_4): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_5): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n  )\n  (l_3): Sequential(\n    (bl_0): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      (idconv): ConvLayer(\n        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_1): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n    (bl_2): ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvLayer(\n          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvLayer(\n          (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvLayer(\n          (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): ReLU(inplace=True)\n    )\n  )\n)\n</code></pre>\n<pre><code>model.block_szs\n</code></pre>\n<pre><code>[16, 64, 128, 256, 512]\n</code></pre>\n<h2>More modification.</h2>\n<p>Main purpose of this module - fast and easy modify model.\nAnd here is the link to more modification to beat Imagenette leaderboard with add MaxBlurPool and modification to ResBlock <a href=\"https://github.com/ayasyrev/imagenette_experiments/blob/master/ResnetTrick_create_model_fit.ipynb\" rel=\"nofollow\">https://github.com/ayasyrev/imagenette_experiments/blob/master/ResnetTrick_create_model_fit.ipynb</a></p>\n<p>But now lets create model as mxresnet50 from fastai forums tread <a href=\"https://forums.fast.ai/t/how-we-beat-the-5-epoch-imagewoof-leaderboard-score-some-new-techniques-to-consider\" rel=\"nofollow\">https://forums.fast.ai/t/how-we-beat-the-5-epoch-imagewoof-leaderboard-score-some-new-techniques-to-consider</a></p>\n<p>Lets create mxresnet constructor.</p>\n<pre><code>mxresnet = Net()\n</code></pre>\n<p>Then lets modify stem.</p>\n<pre><code>mxresnet.stem_sizes = [3,32,64,64]\n</code></pre>\n<p>Now lets change activation function to Mish.\nHere is link to forum disscussion <a href=\"https://forums.fast.ai/t/meet-mish-new-activation-function-possible-successor-to-relu\" rel=\"nofollow\">https://forums.fast.ai/t/meet-mish-new-activation-function-possible-successor-to-relu</a></p>\n<pre><code>class Mish(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n    def forward(self, x):  \n        return x *( torch.tanh(F.softplus(x))) \n</code></pre>\n<pre><code>mxresnet.expansion = 4\nmxresnet.layers = [3,4,6,3]\nmxresnet.act_fn = Mish()\nmxresnet.name = 'mxresnet50'\n</code></pre>\n<p>Now we have mxresnet50 constructor.<br>\nWe can inspect some parts of it.<br>\nAnd after call it we got model.</p>\n<pre><code>mxresnet\n</code></pre>\n<pre><code> constr mxresnet50\n</code></pre>\n<pre><code>mxresnet.stem.conv_1\n</code></pre>\n<pre><code>ConvLayer(\n  (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n  (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (act_fn): Mish()\n)\n</code></pre>\n<pre><code>mxresnet.body.l_0.bl_0\n</code></pre>\n<pre><code>ResBlock(\n  (convs): Sequential(\n    (conv_0): ConvLayer(\n      (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (act_fn): Mish()\n    )\n    (conv_1): ConvLayer(\n      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (act_fn): Mish()\n    )\n    (conv_2): ConvLayer(\n      (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (idconv): ConvLayer(\n    (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n    (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (act_fn): Mish()\n)\n</code></pre>\n<p>Now lets change Resblock. NewResBlock (stiil not own name yet) is in lib from version 0.1.0</p>\n<pre><code>mxresnet.block = NewResBlock\n</code></pre>\n<p>That all. Let see what we have.</p>\n<pre><code>mxresnet.body.l_1.bl_0\n</code></pre>\n<pre><code>NewResBlock(\n  (reduce): AvgPool2d(kernel_size=2, stride=2, padding=0)\n  (convs): Sequential(\n    (conv_0): ConvLayer(\n      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (act_fn): Mish()\n    )\n    (conv_1): ConvLayer(\n      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (act_fn): Mish()\n    )\n    (conv_2): ConvLayer(\n      (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (idconv): ConvLayer(\n    (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n    (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (merge): Mish()\n)\n</code></pre>\n<h1>Classic way</h1>\n<p>Usual way to get model - call constructor with parametrs.</p>\n<pre><code>from model_constructor.constructor import *\n</code></pre>\n<p>Default is resnet18.</p>\n<pre><code>model = Net()\n</code></pre>\n<p>You cant modify model after call constructor, so define model with parameters.<br>\nFor example, resnet34:</p>\n<pre><code>resnet34 = Net(block=BasicBlock, blocks=[3, 4, 6, 3])\n</code></pre>\n<h2>Predefined Resnet models - 18, 34, 50.</h2>\n<pre><code>from model_constructor.resnet import *\n</code></pre>\n<pre><code>model = resnet34(num_classes=10)\n</code></pre>\n<pre><code>model = resnet50(num_classes=10)\n</code></pre>\n<h2>Predefined Xresnet from fastai 1.</h2>\n<p>This ie simplified version from fastai v1. I did refactoring for better understand and experiment with models. For example, it's very simple to change activation funtions, different stems, batchnorm and activation order etc. In v2 much powerfull realisation.</p>\n<pre><code>from model_constructor.xresnet import *\n</code></pre>\n<pre><code>model = xresnet50()\n</code></pre>\n<h2>Some examples.</h2>\n<p>We can experiment with models by changing some parts of model. Here only base functionality, but it can be easily extanded.</p>\n<p>Here is some examples:</p>\n<h3>Custom stem</h3>\n<p>Stem with 3 conv layers</p>\n<pre><code>model = Net(stem=partial(Stem, stem_sizes=[32, 32]))\n</code></pre>\n<pre><code>model.stem\n</code></pre>\n<pre><code>Stem(\n  sizes: [3, 32, 32, 64]\n  (conv_0): ConvLayer(\n    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (act_fn): ReLU(inplace=True)\n  )\n  (conv_1): ConvLayer(\n    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (act_fn): ReLU(inplace=True)\n  )\n  (conv_2): ConvLayer(\n    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (act_fn): ReLU(inplace=True)\n  )\n  (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n)\n</code></pre>\n<pre><code>model = Net(stem_sizes=[32, 64])\n</code></pre>\n<pre><code>model.stem\n</code></pre>\n<pre><code>Stem(\n  sizes: [3, 32, 64, 64]\n  (conv_0): ConvLayer(\n    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (act_fn): ReLU(inplace=True)\n  )\n  (conv_1): ConvLayer(\n    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (act_fn): ReLU(inplace=True)\n  )\n  (conv_2): ConvLayer(\n    (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (act_fn): ReLU(inplace=True)\n  )\n  (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n)\n</code></pre>\n<h3>Activation function before Normalization</h3>\n<pre><code>model = Net(bn_1st=False)\n</code></pre>\n<pre><code>model.stem\n</code></pre>\n<pre><code>Stem(\n  sizes: [3, 64]\n  (conv_0): ConvLayer(\n    (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n    (act_fn): ReLU(inplace=True)\n    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n)\n</code></pre>\n<h3>Change activation function</h3>\n<pre><code>new_act_fn = nn.LeakyReLU(inplace=True)\n</code></pre>\n<pre><code>model = Net(act_fn=new_act_fn)\n</code></pre>\n<pre><code>model.stem\n</code></pre>\n<pre><code>Stem(\n  sizes: [3, 64]\n  (conv_0): ConvLayer(\n    (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (act_fn): LeakyReLU(negative_slope=0.01, inplace=True)\n  )\n  (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n)\n</code></pre>\n<pre><code>model.body.layer_0.block_0\n</code></pre>\n<pre><code>BasicBlock(\n  (conv): Sequential(\n    (conv_0): ConvLayer(\n      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (act_fn): LeakyReLU(negative_slope=0.01, inplace=True)\n    )\n    (conv_1): ConvLayer(\n      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (merge): Noop()\n  (act_conn): LeakyReLU(negative_slope=0.01, inplace=True)\n)\n</code></pre>\n\n          </div>"}, "last_serial": 6755852, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "330ab3cc4bbfbdec8ac15f4e3c97dd97", "sha256": "44c19bf3c97dfbe4dbd91a1751548eb559f30df97409d77a048215a78ae05923"}, "downloads": -1, "filename": "model_constructor-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "330ab3cc4bbfbdec8ac15f4e3c97dd97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10497, "upload_time": "2020-01-12T16:19:29", "upload_time_iso_8601": "2020-01-12T16:19:29.720047Z", "url": "https://files.pythonhosted.org/packages/ae/ac/c3978ac8a25599f645a9b8e131d1a1afa9df800eb41c6524829bd59bf376/model_constructor-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b96ea258abb1a237800bfe1752dfc21", "sha256": "a6213b6d97fe272e26930eea0504bd6df3f20ba17ecf91cacaac4e6d7329502a"}, "downloads": -1, "filename": "model_constructor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9b96ea258abb1a237800bfe1752dfc21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9278, "upload_time": "2020-01-12T16:19:32", "upload_time_iso_8601": "2020-01-12T16:19:32.507497Z", "url": "https://files.pythonhosted.org/packages/0f/bd/763472d56a95c92e2dcacb9df6e2b638e2b87ae53850eb032e028668b0b0/model_constructor-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "25a611313af92dafaf08077860c44c3b", "sha256": "6e7e9e4d64a449a728e5016141847af643b578d32b0b0561b37fe2d89cbd76dd"}, "downloads": -1, "filename": "model_constructor-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "25a611313af92dafaf08077860c44c3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11987, "upload_time": "2020-01-16T11:43:14", "upload_time_iso_8601": "2020-01-16T11:43:14.968359Z", "url": "https://files.pythonhosted.org/packages/77/f2/805cf0caa761ea82849432822211c834ff59e564e1241d0d7cd91403553c/model_constructor-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85aa7e2de5daf577324708dd752a1d28", "sha256": "2240d7bece96fe30b69b4e39629c6a6a2fff83bafc3d13bbee2399e6b4f3b27b"}, "downloads": -1, "filename": "model_constructor-0.0.2.tar.gz", "has_sig": false, "md5_digest": "85aa7e2de5daf577324708dd752a1d28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6706, "upload_time": "2020-01-16T11:43:16", "upload_time_iso_8601": "2020-01-16T11:43:16.585098Z", "url": "https://files.pythonhosted.org/packages/54/2d/6745e059a66251efd39a9c2d2bfacf6e57c889f49f8cc9f0e95201a72487/model_constructor-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "17df58637e49dd26afe4065a47c80540", "sha256": "91a8a6d3ad49f588d845b1de126c9e69dae33d7ddc8559aa488dc21c3e686ab1"}, "downloads": -1, "filename": "model_constructor-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "17df58637e49dd26afe4065a47c80540", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13371, "upload_time": "2020-01-20T14:20:29", "upload_time_iso_8601": "2020-01-20T14:20:29.512057Z", "url": "https://files.pythonhosted.org/packages/d6/57/7536378a91e95a3ee6fe0ca5f51c4b2fcea4536be1bf6a424c548bfd84c5/model_constructor-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86a8e16eeeb8bfa4bbe3ff4a77fec847", "sha256": "636e9b4b6493d7b552274dd1d34c20eb82d60a7f35faef37a69e2c4d7124944c"}, "downloads": -1, "filename": "model_constructor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "86a8e16eeeb8bfa4bbe3ff4a77fec847", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7700, "upload_time": "2020-01-20T14:20:31", "upload_time_iso_8601": "2020-01-20T14:20:31.133221Z", "url": "https://files.pythonhosted.org/packages/92/73/999fae447231618529a43a722edc324ca07d7eb81bef82acd613e999985e/model_constructor-0.0.3.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "139e51c6419156c4e056bb6f41a14315", "sha256": "5a0323dc713b99469a7da25c09b98179374cf5dd243269a975535f4a1517794a"}, "downloads": -1, "filename": "model_constructor-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "139e51c6419156c4e056bb6f41a14315", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21650, "upload_time": "2020-03-05T15:40:40", "upload_time_iso_8601": "2020-03-05T15:40:40.531159Z", "url": "https://files.pythonhosted.org/packages/7b/82/a4ae92e9b56e5cea438cb967b63a20e54760f9758ff134514dbb307cf834/model_constructor-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "146f8b982c5da52a1edafcace29e87aa", "sha256": "655da100c1f997d57f60aacdacd935408927d9d0a6ec9df008087610e2000213"}, "downloads": -1, "filename": "model_constructor-0.1.1.tar.gz", "has_sig": false, "md5_digest": "146f8b982c5da52a1edafcace29e87aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17345, "upload_time": "2020-03-05T15:40:41", "upload_time_iso_8601": "2020-03-05T15:40:41.980562Z", "url": "https://files.pythonhosted.org/packages/49/14/97410e9366b59a5bf972dddbaafa108f2205a19f2a1273d37b3ec4f0c71a/model_constructor-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "139e51c6419156c4e056bb6f41a14315", "sha256": "5a0323dc713b99469a7da25c09b98179374cf5dd243269a975535f4a1517794a"}, "downloads": -1, "filename": "model_constructor-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "139e51c6419156c4e056bb6f41a14315", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21650, "upload_time": "2020-03-05T15:40:40", "upload_time_iso_8601": "2020-03-05T15:40:40.531159Z", "url": "https://files.pythonhosted.org/packages/7b/82/a4ae92e9b56e5cea438cb967b63a20e54760f9758ff134514dbb307cf834/model_constructor-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "146f8b982c5da52a1edafcace29e87aa", "sha256": "655da100c1f997d57f60aacdacd935408927d9d0a6ec9df008087610e2000213"}, "downloads": -1, "filename": "model_constructor-0.1.1.tar.gz", "has_sig": false, "md5_digest": "146f8b982c5da52a1edafcace29e87aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17345, "upload_time": "2020-03-05T15:40:41", "upload_time_iso_8601": "2020-03-05T15:40:41.980562Z", "url": "https://files.pythonhosted.org/packages/49/14/97410e9366b59a5bf972dddbaafa108f2205a19f2a1273d37b3ec4f0c71a/model_constructor-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:56 2020"}