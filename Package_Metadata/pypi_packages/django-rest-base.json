{"info": {"author": "Lucid (@devluci)", "author_email": "contact@lucid.dev", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP"], "description": "# Django REST base\n\n**Customized features and environment for building a Django REST framework app.**\n\n\n\n# Requirements\n\n- Python 3.8\n- Django 3.0\n- djangorestframework (Django REST framework)\n\nOptional packages required for additional features.\n\n- PyJWT `TokenAuthentication`\n- channels `NullURLRouter`, `NullConsumer`\n- sentry-sdk `sentry_report` (when [Sentry](https://sentry.io/) reports enabled)\n- numpy `rest_base.utils.random`\n\n\n\n# Installation\n\n```shell script\npip install django-rest-base\n```\n\n#### `settings.py`\n```python\nINSTALLED_APPS = [\n    ...,\n    'rest_base',\n]\n```\n\n\n\n# Features\n\n## Error\n#### `settings.py`\n```python\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'rest_base.errors.exception_handler',\n}\n```\n\n#### `errors.py`\n```python\nfrom rest_base.errors import Error\n\nMyAppError = Error('my_app')  # class\n\nMyError = MyAppError('My', 'Error')  # class\nMyErrorInstance = MyError(detail='caution: this is instance!')  # instance (when *args and code not provided)\n```\n\n#### `views.py`\n```python\nfrom my_app.errors import MyError, MyErrorInstance\n\ndef my_view(request):\n    raise MyError(detail='Something went wrong :(')\n\ndef another_view1(request):\n    raise MyError  # raise without parameters is also permitted\n\ndef another_view2(request):\n    raise MyErrorInstance()  # __call__ should be used to raise instance\n```\n\n`rest_base.errors.exception_handler` is similar with REST framework's default handler, but provides advanced error format.\n\nIn Django REST base environment, every exception from views inherits `rest_base.errors.Error`. Even original REST framework's exceptions and unhandled exceptions will be converted to `Error`.\n\nThose `Error`s will generate `Response` which has following error format.\n```json\n{\n  \"error\": {\n    \"code\": \"My::Error\",\n    \"detail\": \"Something went wrong :(\",\n    \"traceback\": \"(traceback)\"\n  }\n}\n```\n\n`detail` and `traceback` are optional, and `traceback` will be included automatically when Django's DEBUG mode is enabled.\n\n\n\n## View\n#### `urls.py`\n```python\nfrom django.urls import re_path\n\nfrom rest_base.urls import method_branch\nfrom . import views\n\nurlpatterns = [\n    re_path(r'^my_endpoint/?$', method_branch(GET=views.my_view, POST=views.another_view)),\n]\n```\n\n`rest_base.urls.method_branch` branch the requests by it's method\u2014`GET`, `POST`, `PUT`, `DELETE`.\nIt also supports `@rest_framework.decorators.authentication_classes` and `@rest_framework.decorators.permission_classes` for each view.\n\n\n\n## Model\n#### `models.py`\n```python\nfrom rest_base.models import BaseModel, BaseUser, BaseToken, semaphore\n\n@semaphore(block=True)\nclass MyModel(BaseModel):\n    field = ...\n\nclass MyUser(BaseUser):\n    field = ...\n\nclass MyToken(BaseToken):\n    field = ...\n```\n\nBy replacing the original Django `models.Model` with `rest_base.models.BaseModel`, several customized features can be used.\n- `created`, `last_modified` fields\n- `objects.update_or_create` updates instance only if original attributes and `defaults` are not same.\n- `bulk_manager`\n    - Supports deadlock free following methods. (PostgreSQL ONLY)\n    - `update`, `bulk_update`, `delete`\n- `PredefinedDefault` (See [Fields](#fields) for more)\n- `related_name` must be provided when field's type is `ForeignKey`, `OneToOneField` or `ManyToManyField`.\n\nYou can use customized `BaseUser` and JWT based `BaseToken` by inherit it.\nSee [Authentication](#authentication) for more information about JWT authentication.\n\n## Fields\n#### `models.py`\n```python\nfrom django.db import models\n\nfrom rest_base.fields import UniqueRandomPositiveInt32\nfrom rest_base.models import BaseModel\n\nclass MyModel(BaseModel):\n    unique_field = models.IntegerField(unique=True, default=UniqueRandomPositiveInt32)\n```\n\nIf your model inherits `rest_base.models.BaseModel`, you can set the default value as\n- `UniqueRandomPositiveInt32`\n- `UniqueRandomPositiveInt52`\n- `UniqueRandomPositiveInt64`\n- `UniqueRandomChar` (unique random url-safe characters)\n\nThen default value will be replaced with unique random value in the run-time.\n\n\n\n## Admin\n#### `admin.py`\n```python\nfrom django.contrib import admin\n\nfrom rest_base.admin import model_admin\nfrom .models import *\n\nadmin.site.register(*model_admin(MyModel))\n```\n\nYou can easily register you models to Django admin page by using `rest_base.admin.model_admin`.\nIt registers all of the model's fields and supports link to `ForeignKey`, `OneToOneField` and `ManyToManyField` on Django admin.\n\n\n\n## Authentication\n```shell script\npip install django-rest-base[jwt]\n```\n\n#### `models.py`\n```python\nfrom rest_base.models import BaseToken\n\nclass Token(BaseToken):\n    pass\n```\n\n#### `settings.py`\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_base.authentication.CsrfExemptSessionAuthentication',\n        'rest_base.authentication.TokenAuthentication',\n    ),\n}\n\nREST_BASE = {\n    'AUTHENTICATION_MODEL': 'my_app.models.Token',\n}\n```\n\n#### `views.py`\n```python\nfrom rest_framework.decorators import permission_classes\nfrom rest_framework.permissions import IsAuthenticated\n\n\n@permission_classes((IsAuthenticated,))\ndef my_view(request):\n    ...\n```\n\nEach `Token` which inherits `BaseToken` has `public_key` and `secret_key`.\nYou can make bearer using following format.\n```json\n// Header\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\",\n  \"public_key\": \"public_key\",\n  \"nonce\": 31\n}\n// Payload\n{\n  \"query\": {\n    \"key\": \"value\"\n  }\n}\n```\n\nThen set the HTTP Authorization header to\n```\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsInB1YmxpY19rZXkiOiJwdWJsaWNfa2V5Iiwibm9uY2UiOjMxfQ.eyJxdWVyeSI6eyJrZXkiOiJ2YWx1ZSJ9fQ.q1849tjsSspbtyBYHxsmS98FLUIG2W97aj_gaCxWGlg\n```\n\nRemember that nonce must be a positive int32 value which increases for each request.\n\n\n\n## Sentry\n```shell script\npip install django-rest-base[sentry]\n```\n\n#### `settings.py`\n```python\nREST_BASE = {\n    'SENTRY_HOST': 'https://<key>@sentry.io/<project>',\n    'SENTRY_VERBOSE': False,  # report handled exceptions, default False\n}\n```\n\nIf `sentry-sdk` installed, `SENTRY_HOST` defined and `rest_base.errors.exception_handler` configured correctly,\nevery unhandled exception from view will be reported to the Sentry.\n\nHandled exceptions also reported if you set `SENTRY_VERBOSE` to `True`.\n\n\n\n## Channels\n```shell script\npip install django-rest-base[channels]\n```\n\n#### `routing.py`\n```python\nfrom django.urls import path\nfrom rest_base.channels.routing import NullURLRouter\n\nwebsocket_urlpatterns = [\n    path('app/', NullURLRouter(my_app.routing.websocket_urlpatterns)),\n]\n```\n\n\n\n## Etc\n- By default, startapp command will use template in `rest_base/conf/app_template` which contains additional code for Django REST base\n- .env can be loaded by\n```python\nfrom rest_base.utils import dotenv\n\ndotenv.load('path/to/.env')\n```\n- You can dump/load predefined model instances by using\n```shell script\npython manage.py dump my_app.Model\npython manage.py load my_app.Model\n```\n\n\n\n# License\n\n[MIT](./LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/devluci/django-rest-base", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-rest-base", "package_url": "https://pypi.org/project/django-rest-base/", "platform": "", "project_url": "https://pypi.org/project/django-rest-base/", "project_urls": {"Homepage": "https://github.com/devluci/django-rest-base"}, "release_url": "https://pypi.org/project/django-rest-base/0.1.8/", "requires_dist": ["Django (==3.*)", "djangorestframework (>=3.10)", "channels (==2.3.1) ; extra == 'channels'", "PyJWT ; extra == 'jwt'", "numpy ; extra == 'random'", "sentry-sdk ; extra == 'sentry'"], "requires_python": ">=3.8", "summary": "Customized features and environment for building a Django REST framework app.", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django REST base</h1>\n<p><strong>Customized features and environment for building a Django REST framework app.</strong></p>\n<h1>Requirements</h1>\n<ul>\n<li>Python 3.8</li>\n<li>Django 3.0</li>\n<li>djangorestframework (Django REST framework)</li>\n</ul>\n<p>Optional packages required for additional features.</p>\n<ul>\n<li>PyJWT <code>TokenAuthentication</code></li>\n<li>channels <code>NullURLRouter</code>, <code>NullConsumer</code></li>\n<li>sentry-sdk <code>sentry_report</code> (when <a href=\"https://sentry.io/\" rel=\"nofollow\">Sentry</a> reports enabled)</li>\n<li>numpy <code>rest_base.utils.random</code></li>\n</ul>\n<h1>Installation</h1>\n<pre>pip install django-rest-base\n</pre>\n<h4><code>settings.py</code></h4>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s1\">'rest_base'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<h1>Features</h1>\n<h2>Error</h2>\n<h4><code>settings.py</code></h4>\n<pre><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'EXCEPTION_HANDLER'</span><span class=\"p\">:</span> <span class=\"s1\">'rest_base.errors.exception_handler'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h4><code>errors.py</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_base.errors</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span>\n\n<span class=\"n\">MyAppError</span> <span class=\"o\">=</span> <span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"s1\">'my_app'</span><span class=\"p\">)</span>  <span class=\"c1\"># class</span>\n\n<span class=\"n\">MyError</span> <span class=\"o\">=</span> <span class=\"n\">MyAppError</span><span class=\"p\">(</span><span class=\"s1\">'My'</span><span class=\"p\">,</span> <span class=\"s1\">'Error'</span><span class=\"p\">)</span>  <span class=\"c1\"># class</span>\n<span class=\"n\">MyErrorInstance</span> <span class=\"o\">=</span> <span class=\"n\">MyError</span><span class=\"p\">(</span><span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"s1\">'caution: this is instance!'</span><span class=\"p\">)</span>  <span class=\"c1\"># instance (when *args and code not provided)</span>\n</pre>\n<h4><code>views.py</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my_app.errors</span> <span class=\"kn\">import</span> <span class=\"n\">MyError</span><span class=\"p\">,</span> <span class=\"n\">MyErrorInstance</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"n\">MyError</span><span class=\"p\">(</span><span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"s1\">'Something went wrong :('</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">another_view1</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"n\">MyError</span>  <span class=\"c1\"># raise without parameters is also permitted</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">another_view2</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"n\">MyErrorInstance</span><span class=\"p\">()</span>  <span class=\"c1\"># __call__ should be used to raise instance</span>\n</pre>\n<p><code>rest_base.errors.exception_handler</code> is similar with REST framework's default handler, but provides advanced error format.</p>\n<p>In Django REST base environment, every exception from views inherits <code>rest_base.errors.Error</code>. Even original REST framework's exceptions and unhandled exceptions will be converted to <code>Error</code>.</p>\n<p>Those <code>Error</code>s will generate <code>Response</code> which has following error format.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"error\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"My::Error\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"detail\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Something went wrong :(\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"traceback\"</span><span class=\"p\">:</span> <span class=\"s2\">\"(traceback)\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><code>detail</code> and <code>traceback</code> are optional, and <code>traceback</code> will be included automatically when Django's DEBUG mode is enabled.</p>\n<h2>View</h2>\n<h4><code>urls.py</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">re_path</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">rest_base.urls</span> <span class=\"kn\">import</span> <span class=\"n\">method_branch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">re_path</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^my_endpoint/?$'</span><span class=\"p\">,</span> <span class=\"n\">method_branch</span><span class=\"p\">(</span><span class=\"n\">GET</span><span class=\"o\">=</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">my_view</span><span class=\"p\">,</span> <span class=\"n\">POST</span><span class=\"o\">=</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">another_view</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<p><code>rest_base.urls.method_branch</code> branch the requests by it's method\u2014<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>.\nIt also supports <code>@rest_framework.decorators.authentication_classes</code> and <code>@rest_framework.decorators.permission_classes</code> for each view.</p>\n<h2>Model</h2>\n<h4><code>models.py</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_base.models</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">BaseUser</span><span class=\"p\">,</span> <span class=\"n\">BaseToken</span><span class=\"p\">,</span> <span class=\"n\">semaphore</span>\n\n<span class=\"nd\">@semaphore</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyUser</span><span class=\"p\">(</span><span class=\"n\">BaseUser</span><span class=\"p\">):</span>\n    <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyToken</span><span class=\"p\">(</span><span class=\"n\">BaseToken</span><span class=\"p\">):</span>\n    <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n</pre>\n<p>By replacing the original Django <code>models.Model</code> with <code>rest_base.models.BaseModel</code>, several customized features can be used.</p>\n<ul>\n<li><code>created</code>, <code>last_modified</code> fields</li>\n<li><code>objects.update_or_create</code> updates instance only if original attributes and <code>defaults</code> are not same.</li>\n<li><code>bulk_manager</code>\n<ul>\n<li>Supports deadlock free following methods. (PostgreSQL ONLY)</li>\n<li><code>update</code>, <code>bulk_update</code>, <code>delete</code></li>\n</ul>\n</li>\n<li><code>PredefinedDefault</code> (See <a href=\"#fields\" rel=\"nofollow\">Fields</a> for more)</li>\n<li><code>related_name</code> must be provided when field's type is <code>ForeignKey</code>, <code>OneToOneField</code> or <code>ManyToManyField</code>.</li>\n</ul>\n<p>You can use customized <code>BaseUser</code> and JWT based <code>BaseToken</code> by inherit it.\nSee <a href=\"#authentication\" rel=\"nofollow\">Authentication</a> for more information about JWT authentication.</p>\n<h2>Fields</h2>\n<h4><code>models.py</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">rest_base.fields</span> <span class=\"kn\">import</span> <span class=\"n\">UniqueRandomPositiveInt32</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_base.models</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">unique_field</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">UniqueRandomPositiveInt32</span><span class=\"p\">)</span>\n</pre>\n<p>If your model inherits <code>rest_base.models.BaseModel</code>, you can set the default value as</p>\n<ul>\n<li><code>UniqueRandomPositiveInt32</code></li>\n<li><code>UniqueRandomPositiveInt52</code></li>\n<li><code>UniqueRandomPositiveInt64</code></li>\n<li><code>UniqueRandomChar</code> (unique random url-safe characters)</li>\n</ul>\n<p>Then default value will be replaced with unique random value in the run-time.</p>\n<h2>Admin</h2>\n<h4><code>admin.py</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">rest_base.admin</span> <span class=\"kn\">import</span> <span class=\"n\">model_admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">model_admin</span><span class=\"p\">(</span><span class=\"n\">MyModel</span><span class=\"p\">))</span>\n</pre>\n<p>You can easily register you models to Django admin page by using <code>rest_base.admin.model_admin</code>.\nIt registers all of the model's fields and supports link to <code>ForeignKey</code>, <code>OneToOneField</code> and <code>ManyToManyField</code> on Django admin.</p>\n<h2>Authentication</h2>\n<pre>pip install django-rest-base<span class=\"o\">[</span>jwt<span class=\"o\">]</span>\n</pre>\n<h4><code>models.py</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_base.models</span> <span class=\"kn\">import</span> <span class=\"n\">BaseToken</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Token</span><span class=\"p\">(</span><span class=\"n\">BaseToken</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h4><code>settings.py</code></h4>\n<pre><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'rest_base.authentication.CsrfExemptSessionAuthentication'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'rest_base.authentication.TokenAuthentication'</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">REST_BASE</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'AUTHENTICATION_MODEL'</span><span class=\"p\">:</span> <span class=\"s1\">'my_app.models.Token'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h4><code>views.py</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_framework.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">permission_classes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.permissions</span> <span class=\"kn\">import</span> <span class=\"n\">IsAuthenticated</span>\n\n\n<span class=\"nd\">@permission_classes</span><span class=\"p\">((</span><span class=\"n\">IsAuthenticated</span><span class=\"p\">,))</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Each <code>Token</code> which inherits <code>BaseToken</code> has <code>public_key</code> and <code>secret_key</code>.\nYou can make bearer using following format.</p>\n<pre><span class=\"err\">//</span> <span class=\"err\">Header</span>\n<span class=\"p\">{</span>\n  <span class=\"nt\">\"alg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"HS256\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"typ\"</span><span class=\"p\">:</span> <span class=\"s2\">\"JWT\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"public_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"public_key\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"nonce\"</span><span class=\"p\">:</span> <span class=\"mi\">31</span>\n<span class=\"p\">}</span>\n<span class=\"err\">//</span> <span class=\"err\">Payload</span>\n<span class=\"p\">{</span>\n  <span class=\"nt\">\"query\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Then set the HTTP Authorization header to</p>\n<pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsInB1YmxpY19rZXkiOiJwdWJsaWNfa2V5Iiwibm9uY2UiOjMxfQ.eyJxdWVyeSI6eyJrZXkiOiJ2YWx1ZSJ9fQ.q1849tjsSspbtyBYHxsmS98FLUIG2W97aj_gaCxWGlg\n</code></pre>\n<p>Remember that nonce must be a positive int32 value which increases for each request.</p>\n<h2>Sentry</h2>\n<pre>pip install django-rest-base<span class=\"o\">[</span>sentry<span class=\"o\">]</span>\n</pre>\n<h4><code>settings.py</code></h4>\n<pre><span class=\"n\">REST_BASE</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'SENTRY_HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'https://&lt;key&gt;@sentry.io/&lt;project&gt;'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'SENTRY_VERBOSE'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>  <span class=\"c1\"># report handled exceptions, default False</span>\n<span class=\"p\">}</span>\n</pre>\n<p>If <code>sentry-sdk</code> installed, <code>SENTRY_HOST</code> defined and <code>rest_base.errors.exception_handler</code> configured correctly,\nevery unhandled exception from view will be reported to the Sentry.</p>\n<p>Handled exceptions also reported if you set <code>SENTRY_VERBOSE</code> to <code>True</code>.</p>\n<h2>Channels</h2>\n<pre>pip install django-rest-base<span class=\"o\">[</span>channels<span class=\"o\">]</span>\n</pre>\n<h4><code>routing.py</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_base.channels.routing</span> <span class=\"kn\">import</span> <span class=\"n\">NullURLRouter</span>\n\n<span class=\"n\">websocket_urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'app/'</span><span class=\"p\">,</span> <span class=\"n\">NullURLRouter</span><span class=\"p\">(</span><span class=\"n\">my_app</span><span class=\"o\">.</span><span class=\"n\">routing</span><span class=\"o\">.</span><span class=\"n\">websocket_urlpatterns</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>Etc</h2>\n<ul>\n<li>By default, startapp command will use template in <code>rest_base/conf/app_template</code> which contains additional code for Django REST base</li>\n<li>.env can be loaded by</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_base.utils</span> <span class=\"kn\">import</span> <span class=\"n\">dotenv</span>\n\n<span class=\"n\">dotenv</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'path/to/.env'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>You can dump/load predefined model instances by using</li>\n</ul>\n<pre>python manage.py dump my_app.Model\npython manage.py load my_app.Model\n</pre>\n<h1>License</h1>\n<p><a href=\"./LICENSE\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 6212180, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c37e5d8427fc105790394d6868af75cc", "sha256": "c55f96339f427d76dafbd0b6027b035013e1751472dd59e6ddff75cea010e46c"}, "downloads": -1, "filename": "django-rest-base-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c37e5d8427fc105790394d6868af75cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 15300, "upload_time": "2019-11-08T10:33:44", "upload_time_iso_8601": "2019-11-08T10:33:44.329343Z", "url": "https://files.pythonhosted.org/packages/fa/41/8e2fdc8fce411abf3e7afb4c6ec977dbc82f0bc3dfbb138019697c3b7188/django-rest-base-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "83631bdf14750380843a0a4f48874d06", "sha256": "712a5713c1447c71ffa9cbe7a9ce91c31fd9f6a51fb5575b35bac53cd78c79ce"}, "downloads": -1, "filename": "django-rest-base-0.1.1.tar.gz", "has_sig": false, "md5_digest": "83631bdf14750380843a0a4f48874d06", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 19820, "upload_time": "2019-11-10T16:34:15", "upload_time_iso_8601": "2019-11-10T16:34:15.367507Z", "url": "https://files.pythonhosted.org/packages/c8/92/0826aab886005215947dc5fde6611912dd7971dd5f15e4e7d0d4b3ea247e/django-rest-base-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0b5fa4c5f013a44900dec834a8e56138", "sha256": "76368db6a68d6bb99c23f142dfd9650a27cdb8209c1b105761da6baf6a211c02"}, "downloads": -1, "filename": "django-rest-base-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0b5fa4c5f013a44900dec834a8e56138", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 19848, "upload_time": "2019-11-10T17:02:58", "upload_time_iso_8601": "2019-11-10T17:02:58.295249Z", "url": "https://files.pythonhosted.org/packages/4b/f0/7c1aa0d712047743330279ee6e55fe34cda23c7f43f06dd67cd2ca8c2690/django-rest-base-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d6fb41aa727d01b03a23a3b2be190a5e", "sha256": "11fb96cf14c2e2f60bfd263b2641f556db7b4cf10949e5905564648573f59736"}, "downloads": -1, "filename": "django-rest-base-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d6fb41aa727d01b03a23a3b2be190a5e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 19919, "upload_time": "2019-11-12T06:27:59", "upload_time_iso_8601": "2019-11-12T06:27:59.705593Z", "url": "https://files.pythonhosted.org/packages/88/5c/5875722893bc83200a511a8c192c5e463a54bc32c7378693102e4f0ab783/django-rest-base-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d5d32dda4c48f04b0279c99e18e97888", "sha256": "dc624b0acf21e08342b02000d763a6ef476814414c72d9a984022d7d9bc31913"}, "downloads": -1, "filename": "django-rest-base-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d5d32dda4c48f04b0279c99e18e97888", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 19926, "upload_time": "2019-11-12T07:19:56", "upload_time_iso_8601": "2019-11-12T07:19:56.326778Z", "url": "https://files.pythonhosted.org/packages/10/32/f3c0a833be47bfbbc8523f457d5f1267a24302a766796a902504dfa1a0a3/django-rest-base-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "088d61336c4d223f982da40d723910b4", "sha256": "802b744cc9e0d6456ae523ee02bf291bacafc12f48039bf0bec039c567a6b56d"}, "downloads": -1, "filename": "django-rest-base-0.1.5.tar.gz", "has_sig": false, "md5_digest": "088d61336c4d223f982da40d723910b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 19889, "upload_time": "2019-11-12T10:52:13", "upload_time_iso_8601": "2019-11-12T10:52:13.953421Z", "url": "https://files.pythonhosted.org/packages/98/d2/4619d2154c76442c70715149342acfeb3f0bf2445f283fcbb33bd348ec91/django-rest-base-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "1bb1aba3cd96f98c4f77499147c6b497", "sha256": "9be5a5348d12d8b26568ffc350445716d8101a20a1fb764272fc8a2cb31924fa"}, "downloads": -1, "filename": "django-rest-base-0.1.6.tar.gz", "has_sig": false, "md5_digest": "1bb1aba3cd96f98c4f77499147c6b497", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 19876, "upload_time": "2019-11-13T16:54:05", "upload_time_iso_8601": "2019-11-13T16:54:05.617585Z", "url": "https://files.pythonhosted.org/packages/de/97/8156d9db5da2f1e9271e6f082b5c337f5e3c7a5396fc263d28e8de16db99/django-rest-base-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "2ae302bd91ced3fb14ee29973f29a33c", "sha256": "16d7bd961bf709edfa6361312b0f4ce7dc24b3d0ebeb2ef9e577b09de6703c69"}, "downloads": -1, "filename": "django_rest_base-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "2ae302bd91ced3fb14ee29973f29a33c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 25760, "upload_time": "2019-11-18T07:54:34", "upload_time_iso_8601": "2019-11-18T07:54:34.652356Z", "url": "https://files.pythonhosted.org/packages/91/65/7222810ca0068891e15decb79d490bdff2be8a118329dd989b97529c0c25/django_rest_base-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d11e8f34f772c283290a774558749f3", "sha256": "c8b2dabab3bd0d8985ea58fd4336567cd7184e19dfaac3323216d8360d5961cc"}, "downloads": -1, "filename": "django-rest-base-0.1.7.tar.gz", "has_sig": false, "md5_digest": "8d11e8f34f772c283290a774558749f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 19945, "upload_time": "2019-11-18T07:54:35", "upload_time_iso_8601": "2019-11-18T07:54:35.866434Z", "url": "https://files.pythonhosted.org/packages/ec/67/f9ec1868c08b831ebc6808bf347abd1a3c43d94ff0f0b9f3e688994fde64/django-rest-base-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "b1da6a1ea7b8630ce184232233221ca5", "sha256": "4f27e3f977e51f85d053e800e048a1ff34f8dd726c0c92087ef08b9aada8ec13"}, "downloads": -1, "filename": "django_rest_base-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b1da6a1ea7b8630ce184232233221ca5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 27331, "upload_time": "2019-11-28T04:48:59", "upload_time_iso_8601": "2019-11-28T04:48:59.047782Z", "url": "https://files.pythonhosted.org/packages/c9/29/607089f5d9ac1f4cce68685c11d3dcb9ea420efedd25e9e74f946563b029/django_rest_base-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4983028fb151a0f46d8fad74edb52350", "sha256": "849038c9cf4de2b4c5bac03503a2206594a39c678a6a620f74f3fabd683e6d3a"}, "downloads": -1, "filename": "django-rest-base-0.1.8.tar.gz", "has_sig": false, "md5_digest": "4983028fb151a0f46d8fad74edb52350", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 21148, "upload_time": "2019-11-28T04:49:00", "upload_time_iso_8601": "2019-11-28T04:49:00.664541Z", "url": "https://files.pythonhosted.org/packages/e4/97/353f8ab12dd2f4c19e163a6b605b6602be98bfa6e56811afc7f9c5e30bbe/django-rest-base-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1da6a1ea7b8630ce184232233221ca5", "sha256": "4f27e3f977e51f85d053e800e048a1ff34f8dd726c0c92087ef08b9aada8ec13"}, "downloads": -1, "filename": "django_rest_base-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b1da6a1ea7b8630ce184232233221ca5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 27331, "upload_time": "2019-11-28T04:48:59", "upload_time_iso_8601": "2019-11-28T04:48:59.047782Z", "url": "https://files.pythonhosted.org/packages/c9/29/607089f5d9ac1f4cce68685c11d3dcb9ea420efedd25e9e74f946563b029/django_rest_base-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4983028fb151a0f46d8fad74edb52350", "sha256": "849038c9cf4de2b4c5bac03503a2206594a39c678a6a620f74f3fabd683e6d3a"}, "downloads": -1, "filename": "django-rest-base-0.1.8.tar.gz", "has_sig": false, "md5_digest": "4983028fb151a0f46d8fad74edb52350", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 21148, "upload_time": "2019-11-28T04:49:00", "upload_time_iso_8601": "2019-11-28T04:49:00.664541Z", "url": "https://files.pythonhosted.org/packages/e4/97/353f8ab12dd2f4c19e163a6b605b6602be98bfa6e56811afc7f9c5e30bbe/django-rest-base-0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:11 2020"}