{"info": {"author": "Steve Howard", "author_email": "dev@gostevehoward.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: C++", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# Confidence sequences and uniform boundaries\n\nThis library supports calculation of uniform boundaries, confidence sequences,\nand always-valid p-values. These constructs are useful in sequential A/B\ntesting, best-arm identification, and other sequential statistical\nprocedures. The library is written in C++ with Python and R interfaces. The main\nreference is\n\nHoward, S. R., Ramdas, A., McAuliffe, J., and Sekhon, J. (2018), [Uniform,\nnonparametric, non-asymptotic confidence\nsequences](https://arxiv.org/abs/1810.08240), preprint, arXiv:1810.08240.\n\nAdditionally, the library includes some functions for quantile confidence\nsequences and A/B testing based on\n\nHoward, S. R. and Ramdas, A. (2019), [Sequential estimation of quantiles with\napplications to A/B-testing and best-arm\nidentification](https://arxiv.org/abs/1906.09712), preprint, arXiv:1906.09712.\n\nThis library is in early-stage development and should not be considered\nstable. I have tested it only on Python 3.7.0 and R 3.6.1 on macOS Mojave. The\nimplementation is in C++ and a compiler with C++14 support is required to build\nthe package, as well as the Boost C++ headers.\n\nIn the Python package, functions are split across modules by topic, as detailed\nbelow. In the R package, all functions mentioned below are exported in a single\nnamespace.\n\n## Installing the python package\n\nRun `pip3 install confseq` at the command line.\n\n## Installing the R package\n\nRun the following in the R console:\n\n```R\ninstall.packages('devtools')\ndevtools::install_github('gostevehoward/confseq/r_package')\n```\n\n## Demos\n\n### Estimating average treatment effect in a randomized trial\n\n`demo/ate_demo.py` illustrates how to compute a confidence sequence for average\ntreatment effect in a randomized trial with bounded potential outcomes, along\nwith an always-valid p-value sequence. The method is based on Corollary 2 of the\npaper and uses the gamma-exponential mixture boundary. This demo requires\n`numpy` and `pandas`.\n\n### Quantile confidence sequences\n\n`demo/quantiles.py` illustrates how to use some of the included boundaries to\nconstruct confidence sequences for quantiles based on a stream of\ni.i.d. samples. The file includes a function to estimate a single, fixed\nquantile, as well as a function to estimate all quantiles simultaneously, with\nerror control uniform over quantiles and time.\n\n## Uniform boundaries\n\nThe `confseq.boundaries` Python module implements several uniform boundaries\nfrom the confidence sequences paper.\n\n* There are four mixture boundaries. These are implemented by the functions\n  `<TYPE>_log_mixture()` and `<TYPE>_mixture_bound()`, where `<TYPE>` is one of\n  `normal` (Propositions 4 and 5), `gamma_exponential` (Proposition 8),\n  `gamma_poisson` (Proposition 9), or `beta_binomial` (Propositions 6 and 7).\n    * `<TYPE>_log_mixture(s, v, ...)` returns the logarithm of the mixture\n      supermartingale when called with S\\_t, the martingale, and V\\_t, the\n      intrinsic time process. The reciprocal of the exponential of this value is\n      an always-valid p-value. These functions are denoted log(m(s,v)) in the\n      paper.\n    * `<TYPE>_mixture_bound(v, alpha, ...)` returns the uniform boundary with\n      crossing probability at most alpha, evaluated at intrinsic time v.\n\n    Each function takes another required argument `v_opt` and an optional\n    argument `alpha_opt=0.05`. These arguments are used to set the tuning\n    parameter for each mixture, denoted by rho or r in the paper, optimizing the\n    uniform boundary with crossing probability `alpha_opt` for intrinsic time\n    `v_opt`. Such tuning is discussed in section 3.5 of the paper.\n\n    The gamma-exponential and gamma-Poisson mixtures also require a scale\n    parameter `c`. The beta-binomial mixture requires range parameters `g` and\n    `h`. Finally, the `normal_*` and `beta_binomial_*` functions accept an\n    optional boolean parameter `is_one_sided` which is `True` by default. If\n    `False`, the two-sided variants of these mixtures are used (Propositions 4\n    and 6).\n* The polynomial stitching boundary (see Theorem 1 and the subsequent example)\n  is implemented by `poly_stitching_bound`. Besides `v` and `alpha`, this\n  function requires the tuning parameter `v_min` as well as optional parameters\n  `c`, `s`, and `eta`, all documented in the paper.\n* This module also includes a `bernoulli_confidence_interval` function which\n  computes confidence sequences for the mean of any distribution with bounded\n  support by making use of the sub-Bernoulli condition. Observations must be\n  scaled so that the support is within the unit interval [0, 1].\n\nAll functions accept NumPy arrays in Python or vectors in R and perform\nvectorized operations.\n\n## Quantile bounds\n\nThe `confseq.quantiles` Python module implements two quantile-uniform confidence\nsequences from the quantile paper.\n\n* `empirical_process_lil_bound` is based on Theorem 2, and can be used to\n  construct iterated-logarithm-rate confidence sequences for quantiles in which\n  the confidence radius (in quantile space) is constant for all quantiles. This\n  can also be used run the sequential Kolmogorov-Smirnov test described in\n  section 7.2.\n* `double_stitching_bound` is based on Theorem 3, and can be used to construct\n  confidence sequences for quantiles in which the confidence radius (in quantile\n  space) varies, getting smaller for extreme quantiles close to zero and one.\n\nFinally, `quantile_ab_p_value` implements the two-sided sequential test of the\nhypothesis that two populations have equal values for some quantile, based on\nTheorem 5. The theorem covers tests of null hypothesis other than equality, as\nwell as one-sided tests, but these are not yet implemented.\n\n## C++ library\n\nThe underlying implementation is in a single-file, header-only C++ library in\n`src/confseq/uniform_boundaries.h`. The top of the file defines a simplified\ninterface mirroring the Python interface described above. Below that is an\nobject-oriented interface useful for more involved work. The\n`confseq.boundaries` Python module is a wrapper generated by\n[pybind11](https://github.com/pybind/pybind11). The R package uses\n[Rcpp](http://www.rcpp.org).\n\n## Unit tests\n\nRun `make -C /path/to/confseq/tests runtests` to run the C++ unit tests.\n\n## Citing this software\n\nHoward, S. R., and Ramdas, A. (2019-), ConfSeq: software for confidence\nsequences and uniform boundaries, https://github.com/gostevehoward/confseq\n[Online; accessed 2019-08-08].\n\n```bibtex\n@Misc{,\n  author = {Steven R. Howard and Aaditya Ramdas},\n  title = {{ConfSeq}: software for confidence sequences and uniform boundaries},\n  year = {2019--},\n  url = \"https://github.com/gostevehoward/confseq\",\n  note = {[Online; accessed <today>]}\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gostevehoward/confseq", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "confseq", "package_url": "https://pypi.org/project/confseq/", "platform": "", "project_url": "https://pypi.org/project/confseq/", "project_urls": {"Homepage": "https://github.com/gostevehoward/confseq"}, "release_url": "https://pypi.org/project/confseq/0.0.5/", "requires_dist": ["pybind11 (>=2.3)", "numpy"], "requires_python": "", "summary": "Confidence sequences and uniform boundaries", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Confidence sequences and uniform boundaries</h1>\n<p>This library supports calculation of uniform boundaries, confidence sequences,\nand always-valid p-values. These constructs are useful in sequential A/B\ntesting, best-arm identification, and other sequential statistical\nprocedures. The library is written in C++ with Python and R interfaces. The main\nreference is</p>\n<p>Howard, S. R., Ramdas, A., McAuliffe, J., and Sekhon, J. (2018), <a href=\"https://arxiv.org/abs/1810.08240\" rel=\"nofollow\">Uniform,\nnonparametric, non-asymptotic confidence\nsequences</a>, preprint, arXiv:1810.08240.</p>\n<p>Additionally, the library includes some functions for quantile confidence\nsequences and A/B testing based on</p>\n<p>Howard, S. R. and Ramdas, A. (2019), <a href=\"https://arxiv.org/abs/1906.09712\" rel=\"nofollow\">Sequential estimation of quantiles with\napplications to A/B-testing and best-arm\nidentification</a>, preprint, arXiv:1906.09712.</p>\n<p>This library is in early-stage development and should not be considered\nstable. I have tested it only on Python 3.7.0 and R 3.6.1 on macOS Mojave. The\nimplementation is in C++ and a compiler with C++14 support is required to build\nthe package, as well as the Boost C++ headers.</p>\n<p>In the Python package, functions are split across modules by topic, as detailed\nbelow. In the R package, all functions mentioned below are exported in a single\nnamespace.</p>\n<h2>Installing the python package</h2>\n<p>Run <code>pip3 install confseq</code> at the command line.</p>\n<h2>Installing the R package</h2>\n<p>Run the following in the R console:</p>\n<pre><span class=\"nf\">install.packages</span><span class=\"p\">(</span><span class=\"s\">'devtools'</span><span class=\"p\">)</span>\n<span class=\"n\">devtools</span><span class=\"o\">::</span><span class=\"nf\">install_github</span><span class=\"p\">(</span><span class=\"s\">'gostevehoward/confseq/r_package'</span><span class=\"p\">)</span>\n</pre>\n<h2>Demos</h2>\n<h3>Estimating average treatment effect in a randomized trial</h3>\n<p><code>demo/ate_demo.py</code> illustrates how to compute a confidence sequence for average\ntreatment effect in a randomized trial with bounded potential outcomes, along\nwith an always-valid p-value sequence. The method is based on Corollary 2 of the\npaper and uses the gamma-exponential mixture boundary. This demo requires\n<code>numpy</code> and <code>pandas</code>.</p>\n<h3>Quantile confidence sequences</h3>\n<p><code>demo/quantiles.py</code> illustrates how to use some of the included boundaries to\nconstruct confidence sequences for quantiles based on a stream of\ni.i.d. samples. The file includes a function to estimate a single, fixed\nquantile, as well as a function to estimate all quantiles simultaneously, with\nerror control uniform over quantiles and time.</p>\n<h2>Uniform boundaries</h2>\n<p>The <code>confseq.boundaries</code> Python module implements several uniform boundaries\nfrom the confidence sequences paper.</p>\n<ul>\n<li>\n<p>There are four mixture boundaries. These are implemented by the functions\n<code>&lt;TYPE&gt;_log_mixture()</code> and <code>&lt;TYPE&gt;_mixture_bound()</code>, where <code>&lt;TYPE&gt;</code> is one of\n<code>normal</code> (Propositions 4 and 5), <code>gamma_exponential</code> (Proposition 8),\n<code>gamma_poisson</code> (Proposition 9), or <code>beta_binomial</code> (Propositions 6 and 7).</p>\n<ul>\n<li><code>&lt;TYPE&gt;_log_mixture(s, v, ...)</code> returns the logarithm of the mixture\nsupermartingale when called with S_t, the martingale, and V_t, the\nintrinsic time process. The reciprocal of the exponential of this value is\nan always-valid p-value. These functions are denoted log(m(s,v)) in the\npaper.</li>\n<li><code>&lt;TYPE&gt;_mixture_bound(v, alpha, ...)</code> returns the uniform boundary with\ncrossing probability at most alpha, evaluated at intrinsic time v.</li>\n</ul>\n<p>Each function takes another required argument <code>v_opt</code> and an optional\nargument <code>alpha_opt=0.05</code>. These arguments are used to set the tuning\nparameter for each mixture, denoted by rho or r in the paper, optimizing the\nuniform boundary with crossing probability <code>alpha_opt</code> for intrinsic time\n<code>v_opt</code>. Such tuning is discussed in section 3.5 of the paper.</p>\n<p>The gamma-exponential and gamma-Poisson mixtures also require a scale\nparameter <code>c</code>. The beta-binomial mixture requires range parameters <code>g</code> and\n<code>h</code>. Finally, the <code>normal_*</code> and <code>beta_binomial_*</code> functions accept an\noptional boolean parameter <code>is_one_sided</code> which is <code>True</code> by default. If\n<code>False</code>, the two-sided variants of these mixtures are used (Propositions 4\nand 6).</p>\n</li>\n<li>\n<p>The polynomial stitching boundary (see Theorem 1 and the subsequent example)\nis implemented by <code>poly_stitching_bound</code>. Besides <code>v</code> and <code>alpha</code>, this\nfunction requires the tuning parameter <code>v_min</code> as well as optional parameters\n<code>c</code>, <code>s</code>, and <code>eta</code>, all documented in the paper.</p>\n</li>\n<li>\n<p>This module also includes a <code>bernoulli_confidence_interval</code> function which\ncomputes confidence sequences for the mean of any distribution with bounded\nsupport by making use of the sub-Bernoulli condition. Observations must be\nscaled so that the support is within the unit interval [0, 1].</p>\n</li>\n</ul>\n<p>All functions accept NumPy arrays in Python or vectors in R and perform\nvectorized operations.</p>\n<h2>Quantile bounds</h2>\n<p>The <code>confseq.quantiles</code> Python module implements two quantile-uniform confidence\nsequences from the quantile paper.</p>\n<ul>\n<li><code>empirical_process_lil_bound</code> is based on Theorem 2, and can be used to\nconstruct iterated-logarithm-rate confidence sequences for quantiles in which\nthe confidence radius (in quantile space) is constant for all quantiles. This\ncan also be used run the sequential Kolmogorov-Smirnov test described in\nsection 7.2.</li>\n<li><code>double_stitching_bound</code> is based on Theorem 3, and can be used to construct\nconfidence sequences for quantiles in which the confidence radius (in quantile\nspace) varies, getting smaller for extreme quantiles close to zero and one.</li>\n</ul>\n<p>Finally, <code>quantile_ab_p_value</code> implements the two-sided sequential test of the\nhypothesis that two populations have equal values for some quantile, based on\nTheorem 5. The theorem covers tests of null hypothesis other than equality, as\nwell as one-sided tests, but these are not yet implemented.</p>\n<h2>C++ library</h2>\n<p>The underlying implementation is in a single-file, header-only C++ library in\n<code>src/confseq/uniform_boundaries.h</code>. The top of the file defines a simplified\ninterface mirroring the Python interface described above. Below that is an\nobject-oriented interface useful for more involved work. The\n<code>confseq.boundaries</code> Python module is a wrapper generated by\n<a href=\"https://github.com/pybind/pybind11\" rel=\"nofollow\">pybind11</a>. The R package uses\n<a href=\"http://www.rcpp.org\" rel=\"nofollow\">Rcpp</a>.</p>\n<h2>Unit tests</h2>\n<p>Run <code>make -C /path/to/confseq/tests runtests</code> to run the C++ unit tests.</p>\n<h2>Citing this software</h2>\n<p>Howard, S. R., and Ramdas, A. (2019-), ConfSeq: software for confidence\nsequences and uniform boundaries, <a href=\"https://github.com/gostevehoward/confseq\" rel=\"nofollow\">https://github.com/gostevehoward/confseq</a>\n[Online; accessed 2019-08-08].</p>\n<pre><span class=\"nc\">@Misc</span><span class=\"p\">{</span><span class=\"err\">,</span>\n  <span class=\"nl\">author</span> <span class=\"err\">=</span> <span class=\"err\">{Steven</span> <span class=\"err\">R.</span> <span class=\"err\">Howard</span> <span class=\"err\">and</span> <span class=\"err\">Aaditya</span> <span class=\"err\">Ramdas</span><span class=\"p\">}</span><span class=\"c\">,</span>\n  <span class=\"c\">title = {{ConfSeq}: software for confidence sequences and uniform boundaries},</span>\n  <span class=\"c\">year = {2019--},</span>\n  <span class=\"c\">url = \"https://github.com/gostevehoward/confseq\",</span>\n  <span class=\"c\">note = {[Online; accessed &lt;today&gt;]}</span>\n<span class=\"c\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6196847, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "af24ae7fefb8255abd2b0a58d2240ec2", "sha256": "af0247af0658abb3f5f1f9bccd06fe34af2025d38fe2e504dfce142edb2606c1"}, "downloads": -1, "filename": "confseq-0.0.1-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "af24ae7fefb8255abd2b0a58d2240ec2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 133882, "upload_time": "2019-07-30T21:21:00", "upload_time_iso_8601": "2019-07-30T21:21:00.834218Z", "url": "https://files.pythonhosted.org/packages/68/b7/69e3ab7074d591cf11ce9dd3e46191bd24bd1251d44444da182594b4b8f8/confseq-0.0.1-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f5dc1cbc05fb8cd86b67526fcd63383", "sha256": "40523440be70b99882c981366995a4a462e711691528455f80719133a802d1f9"}, "downloads": -1, "filename": "confseq-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0f5dc1cbc05fb8cd86b67526fcd63383", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4955, "upload_time": "2019-07-30T21:21:03", "upload_time_iso_8601": "2019-07-30T21:21:03.131585Z", "url": "https://files.pythonhosted.org/packages/32/48/eefb9297c5156e5401ce90c1073510c3f6a7177e3927d531684927c48276/confseq-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b49461923e48129ce16287edda58688b", "sha256": "4c6702dca6d0c97f6cb0f40d4c69824cf7e1fa30ba6bec8f9895e0edf591cefa"}, "downloads": -1, "filename": "confseq-0.0.2-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "b49461923e48129ce16287edda58688b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 164104, "upload_time": "2019-08-03T03:07:50", "upload_time_iso_8601": "2019-08-03T03:07:50.813034Z", "url": "https://files.pythonhosted.org/packages/a8/2f/15a701b8adcf9f7904e18ef49f0209fd15b86d1cc58fc53e6d3d6d6e833c/confseq-0.0.2-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47884d7366536d6646cd7254bcf168b1", "sha256": "2c3cef97dca4ecb716963a95ddf76706725a61e76d336d4e1282ba3a86b954a6"}, "downloads": -1, "filename": "confseq-0.0.2.tar.gz", "has_sig": false, "md5_digest": "47884d7366536d6646cd7254bcf168b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5086, "upload_time": "2019-08-03T03:07:52", "upload_time_iso_8601": "2019-08-03T03:07:52.625252Z", "url": "https://files.pythonhosted.org/packages/42/79/aaa37e70e7a1348a803c4bbf9451a380e9a19a5767a5029ea010c7046c37/confseq-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4674f9b080a5872263e2d9ecd285bf0c", "sha256": "8c2cfdf0701861e692ecc72e909b3d021716afa881db956fbdfbb77a8010e9f3"}, "downloads": -1, "filename": "confseq-0.0.3-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "4674f9b080a5872263e2d9ecd285bf0c", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 315931, "upload_time": "2019-08-03T03:15:24", "upload_time_iso_8601": "2019-08-03T03:15:24.711402Z", "url": "https://files.pythonhosted.org/packages/68/89/be269184353705643dfffe643aed78642ae685e71b77b2e701b3a7c822ae/confseq-0.0.3-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4d7ffd3c5b7000ad3ec8b67b43f11b3", "sha256": "e4300b7b1a6fd66a3e49cd7d82c34d51ac1c4562cfd3f8d3fab05bfd55fc230b"}, "downloads": -1, "filename": "confseq-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c4d7ffd3c5b7000ad3ec8b67b43f11b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6452, "upload_time": "2019-08-03T03:15:28", "upload_time_iso_8601": "2019-08-03T03:15:28.610497Z", "url": "https://files.pythonhosted.org/packages/ff/cb/653cf5f485c57c890d4529fe7d4eea1e3b6689b04d6dc45868a1477586e0/confseq-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "8891f899b94e82f09b4632921b27d837", "sha256": "6cdb20797f1708b07e562d377ba26fba6c4dad5d0961a18b82bd34905444219d"}, "downloads": -1, "filename": "confseq-0.0.4-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "8891f899b94e82f09b4632921b27d837", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 328531, "upload_time": "2019-08-03T21:44:59", "upload_time_iso_8601": "2019-08-03T21:44:59.529041Z", "url": "https://files.pythonhosted.org/packages/ae/4a/0595f7ec3f2c04ac9a8144803d4bf672698c2e618c8bdbf7f7a405464946/confseq-0.0.4-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83cb1858fd37d94a98d6dd951d9055f9", "sha256": "182fe4e6858cf1ad7430069fc55dd1be96602ba9748521b73b271ab50927d5f6"}, "downloads": -1, "filename": "confseq-0.0.4.tar.gz", "has_sig": false, "md5_digest": "83cb1858fd37d94a98d6dd951d9055f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6814, "upload_time": "2019-08-03T21:45:01", "upload_time_iso_8601": "2019-08-03T21:45:01.580576Z", "url": "https://files.pythonhosted.org/packages/87/27/e5b20c31676186fb6fa1c21214050571ac7416f99a6956f4c625675a9156/confseq-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "2d225254b757d1352181e6c85fb25489", "sha256": "ea0c25c4df2c99cdccc09a41e58c5f185fbf9d4e0e2fe85de7e2cf4b9a3f03d3"}, "downloads": -1, "filename": "confseq-0.0.5-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "2d225254b757d1352181e6c85fb25489", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 314445, "upload_time": "2019-11-25T21:14:04", "upload_time_iso_8601": "2019-11-25T21:14:04.051396Z", "url": "https://files.pythonhosted.org/packages/10/62/6900e06c22678ad6069dfe0d3b7900cbfa82aa33ba199f870baa47d13f33/confseq-0.0.5-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adbca333a439436b645c0ff1be750c63", "sha256": "5a59b4ece45350db8f5f6321265c4660ed984bdf9e361771ea41b9667fded0e7"}, "downloads": -1, "filename": "confseq-0.0.5.tar.gz", "has_sig": false, "md5_digest": "adbca333a439436b645c0ff1be750c63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8014, "upload_time": "2019-11-25T21:14:05", "upload_time_iso_8601": "2019-11-25T21:14:05.816796Z", "url": "https://files.pythonhosted.org/packages/d3/55/d6f6c39a5794f2b53b188a8bbdd493534af5fa7cdd5ba8d0fc121817ccc0/confseq-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d225254b757d1352181e6c85fb25489", "sha256": "ea0c25c4df2c99cdccc09a41e58c5f185fbf9d4e0e2fe85de7e2cf4b9a3f03d3"}, "downloads": -1, "filename": "confseq-0.0.5-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "2d225254b757d1352181e6c85fb25489", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 314445, "upload_time": "2019-11-25T21:14:04", "upload_time_iso_8601": "2019-11-25T21:14:04.051396Z", "url": "https://files.pythonhosted.org/packages/10/62/6900e06c22678ad6069dfe0d3b7900cbfa82aa33ba199f870baa47d13f33/confseq-0.0.5-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adbca333a439436b645c0ff1be750c63", "sha256": "5a59b4ece45350db8f5f6321265c4660ed984bdf9e361771ea41b9667fded0e7"}, "downloads": -1, "filename": "confseq-0.0.5.tar.gz", "has_sig": false, "md5_digest": "adbca333a439436b645c0ff1be750c63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8014, "upload_time": "2019-11-25T21:14:05", "upload_time_iso_8601": "2019-11-25T21:14:05.816796Z", "url": "https://files.pythonhosted.org/packages/d3/55/d6f6c39a5794f2b53b188a8bbdd493534af5fa7cdd5ba8d0fc121817ccc0/confseq-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:47 2020"}