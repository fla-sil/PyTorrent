{"info": {"author": "Tenzir", "author_email": "engineering@tenzir.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator", "Topic :: Security", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Software Distribution"], "description": "PyVAST - VAST Python CLI Wrapper\n================================\n\nWith `pyvast` we provide a very minimal python wrapper around the VAST command\nline interface. The wrapper features fluent method chaining and works\nasynchronously.\n\nAll VAST commands can be used with the wrapper. However, the wrapper does not\nimplement any commands itself. It simply passes all received arguments to the\n`vast` binary. It is hence very easy to make mistakes in form of typos, given\nthis minimalistic implementation. Please refer to the\n[vast documentation](https://docs.tenzir.com/) for details about valid `vast`\ncommands.\n\n## Installation\n\nUse `pip` to install the package.\n\n```sh\nvirtualenv --system-site-packages venv\nsource venv/bin/activate\npip install pyvast\n```\n\n## Usage\n\nCommands are simply chained via `.`-notation. Parameters can be passed as python\nkeyword arguments. The following examples provide an overview of VAST commands\nand the analogous `pyvast` commands.\n\n- Query for an IP address and return 10 results in JSON\n  ```sh\n  # CLI call\n  vast export --max-event=10 json ':addr == 192.168.1.104'\n  ```\n  ```py\n  # python wrapper\n  proc = await vast.export(max_events=10).json(\"192.167.1.102\").exec()\n  stdout, stderr = await proc.communicate()\n  print(stdout)\n  ```\n- Import a Zeek log file\n  ```sh\n  # CLI call\n  vast import zeek --read=/path/to/file\n  ```\n  ```py\n  # python wrapper\n  proc = await vast.import_().zeek(read=\"/path/to/file\").exec()\n  stdout, stderr = await proc.communicate()\n  print(stdout)\n  ```\n\n#### Full Example\n\nThe following example shows a minimalistic working example with all required\nimport statements.\n\n```py\n#!/usr/bin/env python3\n\nimport asyncio\nfrom pyvast import VAST\n\nasync def example():\n  vast = VAST(binary=\"/opt/tenzir/bin/vast\")\n  await vast.test_connection()\n\n  proc = await vast.export(max_events=10).json(\"192.168.1.103\").exec()\n  stdout, stderr = await proc.communicate()\n  print(stdout)\n\nasyncio.run(example())\n```\n\nSee also the `example` folder for a demo using `pyarrow` for data export and a\ndemo for continuous queries.\n\n## Testing\n\nThe tests are written with the python\n[unittest](https://docs.python.org/3/library/unittest.html) library and its\nasynchronous analogon [aiounittest](https://pypi.org/project/aiounittest/).\nInstall the `requirements.txt` first to run the tests.\n\n```sh\npip install --user -r requirements.txt\npython -m unittest discover .\n```\n\n## Development\n\nUse the `setup.py` for local installation of a development setup.\n\n```sh\nvirtualenv --system-site-packages venv # create a virtual env\nsource venv/bin/activate\npython setup.py develop # or python setup.py install\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tenzir/vast", "keywords": "vast,pyvast,open source,network telemetry", "license": "BSD 3-clause", "maintainer": "", "maintainer_email": "", "name": "pyvast", "package_url": "https://pypi.org/project/pyvast/", "platform": "", "project_url": "https://pypi.org/project/pyvast/", "project_urls": {"Homepage": "https://github.com/tenzir/vast"}, "release_url": "https://pypi.org/project/pyvast/2020.4.24/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Python CLI wrapper for VAST - Visibility Across Space and Time", "version": "2020.4.24", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyVAST - VAST Python CLI Wrapper</h1>\n<p>With <code>pyvast</code> we provide a very minimal python wrapper around the VAST command\nline interface. The wrapper features fluent method chaining and works\nasynchronously.</p>\n<p>All VAST commands can be used with the wrapper. However, the wrapper does not\nimplement any commands itself. It simply passes all received arguments to the\n<code>vast</code> binary. It is hence very easy to make mistakes in form of typos, given\nthis minimalistic implementation. Please refer to the\n<a href=\"https://docs.tenzir.com/\" rel=\"nofollow\">vast documentation</a> for details about valid <code>vast</code>\ncommands.</p>\n<h2>Installation</h2>\n<p>Use <code>pip</code> to install the package.</p>\n<pre>virtualenv --system-site-packages venv\n<span class=\"nb\">source</span> venv/bin/activate\npip install pyvast\n</pre>\n<h2>Usage</h2>\n<p>Commands are simply chained via <code>.</code>-notation. Parameters can be passed as python\nkeyword arguments. The following examples provide an overview of VAST commands\nand the analogous <code>pyvast</code> commands.</p>\n<ul>\n<li>Query for an IP address and return 10 results in JSON\n<pre><span class=\"c1\"># CLI call</span>\nvast <span class=\"nb\">export</span> --max-event<span class=\"o\">=</span><span class=\"m\">10</span> json <span class=\"s1\">':addr == 192.168.1.104'</span>\n</pre>\n<pre><span class=\"c1\"># python wrapper</span>\n<span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">max_events</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"s2\">\"192.167.1.102\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exec</span><span class=\"p\">()</span>\n<span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">communicate</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>Import a Zeek log file\n<pre><span class=\"c1\"># CLI call</span>\nvast import zeek --read<span class=\"o\">=</span>/path/to/file\n</pre>\n<pre><span class=\"c1\"># python wrapper</span>\n<span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">import_</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">zeek</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/file\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exec</span><span class=\"p\">()</span>\n<span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">communicate</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h4>Full Example</h4>\n<p>The following example shows a minimalistic working example with all required\nimport statements.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyvast</span> <span class=\"kn\">import</span> <span class=\"n\">VAST</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n  <span class=\"n\">vast</span> <span class=\"o\">=</span> <span class=\"n\">VAST</span><span class=\"p\">(</span><span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"s2\">\"/opt/tenzir/bin/vast\"</span><span class=\"p\">)</span>\n  <span class=\"k\">await</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">test_connection</span><span class=\"p\">()</span>\n\n  <span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">max_events</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"s2\">\"192.168.1.103\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exec</span><span class=\"p\">()</span>\n  <span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">communicate</span><span class=\"p\">()</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"p\">())</span>\n</pre>\n<p>See also the <code>example</code> folder for a demo using <code>pyarrow</code> for data export and a\ndemo for continuous queries.</p>\n<h2>Testing</h2>\n<p>The tests are written with the python\n<a href=\"https://docs.python.org/3/library/unittest.html\" rel=\"nofollow\">unittest</a> library and its\nasynchronous analogon <a href=\"https://pypi.org/project/aiounittest/\" rel=\"nofollow\">aiounittest</a>.\nInstall the <code>requirements.txt</code> first to run the tests.</p>\n<pre>pip install --user -r requirements.txt\npython -m unittest discover .\n</pre>\n<h2>Development</h2>\n<p>Use the <code>setup.py</code> for local installation of a development setup.</p>\n<pre>virtualenv --system-site-packages venv <span class=\"c1\"># create a virtual env</span>\n<span class=\"nb\">source</span> venv/bin/activate\npython setup.py develop <span class=\"c1\"># or python setup.py install</span>\n</pre>\n\n          </div>"}, "last_serial": 7131638, "releases": {"2020.3.26": [{"comment_text": "", "digests": {"md5": "22993dedcb88369a1a45981161addc23", "sha256": "83741388070dc62d3984d21f7dbeea5b51aa7a7e28b0ddd7012c4190fa899cbf"}, "downloads": -1, "filename": "pyvast-2020.3.26-py3-none-any.whl", "has_sig": false, "md5_digest": "22993dedcb88369a1a45981161addc23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4370, "upload_time": "2020-04-06T08:33:14", "upload_time_iso_8601": "2020-04-06T08:33:14.746588Z", "url": "https://files.pythonhosted.org/packages/07/96/88377742ad7b1384189f0bc81d14effe6e8cbc9420d7dd685f70ff90eec9/pyvast-2020.3.26-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb697cf187d351166d0eb484289c740f", "sha256": "05e3c1e76fee07bfe629dd924603855d7fa270302916954e1403c7faa48e3084"}, "downloads": -1, "filename": "pyvast-2020.3.26.tar.gz", "has_sig": false, "md5_digest": "cb697cf187d351166d0eb484289c740f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4132, "upload_time": "2020-04-06T08:33:16", "upload_time_iso_8601": "2020-04-06T08:33:16.900351Z", "url": "https://files.pythonhosted.org/packages/06/93/408d7a063a49083388be5b5f28231a2aae832d8e9508b1030d6210f7e783/pyvast-2020.3.26.tar.gz", "yanked": false}], "2020.4.24": [{"comment_text": "", "digests": {"md5": "878fe645a5be46e34df2088666c7f702", "sha256": "f59cbd80450a0c047d548b392d86c9fe26ca80795846bb840d29fd3360fac4f2"}, "downloads": -1, "filename": "pyvast-2020.4.24-py3-none-any.whl", "has_sig": false, "md5_digest": "878fe645a5be46e34df2088666c7f702", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4442, "upload_time": "2020-04-29T19:50:37", "upload_time_iso_8601": "2020-04-29T19:50:37.785783Z", "url": "https://files.pythonhosted.org/packages/74/29/1b85a2db75e5df8d108be59121d706c99234e231355a7acf6ac25bd117ef/pyvast-2020.4.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "780ef48a4687409d9e9f3e3c4ad1a0f3", "sha256": "0bc6c0555d6eabf692ebb42a40437c12a9b159d0849ca3e0fc9c557c94f5406d"}, "downloads": -1, "filename": "pyvast-2020.4.24.tar.gz", "has_sig": false, "md5_digest": "780ef48a4687409d9e9f3e3c4ad1a0f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4219, "upload_time": "2020-04-29T19:50:38", "upload_time_iso_8601": "2020-04-29T19:50:38.509149Z", "url": "https://files.pythonhosted.org/packages/2f/8e/fce80035d24d73617b74534b0d4f00b564123f2b976c4a3698b68be3e85e/pyvast-2020.4.24.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "878fe645a5be46e34df2088666c7f702", "sha256": "f59cbd80450a0c047d548b392d86c9fe26ca80795846bb840d29fd3360fac4f2"}, "downloads": -1, "filename": "pyvast-2020.4.24-py3-none-any.whl", "has_sig": false, "md5_digest": "878fe645a5be46e34df2088666c7f702", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4442, "upload_time": "2020-04-29T19:50:37", "upload_time_iso_8601": "2020-04-29T19:50:37.785783Z", "url": "https://files.pythonhosted.org/packages/74/29/1b85a2db75e5df8d108be59121d706c99234e231355a7acf6ac25bd117ef/pyvast-2020.4.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "780ef48a4687409d9e9f3e3c4ad1a0f3", "sha256": "0bc6c0555d6eabf692ebb42a40437c12a9b159d0849ca3e0fc9c557c94f5406d"}, "downloads": -1, "filename": "pyvast-2020.4.24.tar.gz", "has_sig": false, "md5_digest": "780ef48a4687409d9e9f3e3c4ad1a0f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4219, "upload_time": "2020-04-29T19:50:38", "upload_time_iso_8601": "2020-04-29T19:50:38.509149Z", "url": "https://files.pythonhosted.org/packages/2f/8e/fce80035d24d73617b74534b0d4f00b564123f2b976c4a3698b68be3e85e/pyvast-2020.4.24.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:12 2020"}