{"info": {"author": "Chris Lawlor", "author_email": "lawlor.chris@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3"], "description": "===============================\nRecommendr\n===============================\n\n.. image:: https://badge.fury.io/py/recommendr.png\n    :target: http://badge.fury.io/py/recommendr\n    \n.. image:: https://travis-ci.org/chrislawlor/recommendr.png?branch=master\n        :target: https://travis-ci.org/chrislawlor/recommendr\n\n.. image:: https://pypip.in/d/recommendr/badge.png\n        :target: https://crate.io/packages/recommendr?version=latest\n\n\nMovie recommendation engine.\n\n* Free software: BSD license\n* Documentation: http://recommendr.rtfd.org.\n\nFeatures\n--------\n\n* A Redis backend for storing movie and rating data.\n\n* A simple user-based recommendations algorithm with swappable distance\n  functions.\n\n* Item-based recommendation algorithm in work.\n\n* A demo command-line client.\n\n\nTry it Out\n----------\n\n* Clone the repo::\n\n\tgit clone git@github.com:chrislawlor/recommendr.git\n\n* Create a python virtual environment with virtualenvwrapper::\n\n\tmkvirtualenv recommendr\n\n* Install requirements::\n\n\tpip install -r requirements.txt\n\n* Install recommendr::\n\n\tpython setup.py install\n\n* First, import some MovieLens data into Redis::\n\n\tpython data/import_data.py\n\n* Run the demo program::\n\n\tpython demo.py\n\n\nThe demo program will ask you for ratings until you have rated 5 movies, then\nit will give some recommendations. Recommendations should improve the more\ntimes you run the demo program.\n\n\n*NOTE*: If your Redis instance is somewhere other than ``locahost:6379``, set\nthe ``REDIS_HOST`` and ``REDIS_PORT`` environment variables. If you wish to use\na Redis DB other than 1, set ``REDIS_DB``.\n\n\nKey Code Points\n---------------\n\n``recommendr.db``: Implements a Redis DB backend suitable for storing movie\nand rating information\n\n::\n\t\n\trecommendr.get_user_based_recommendations(reviewer_id, num=20, similarity=sim_distance)\n\nreturns the top recommendations for a given user. It defaults to using\nEuclidean distance for the similiarity function, optionally pass\n``recommendr.similarity.sim_pearson`` to use the Pearson Coefficient.\n\n\nTest Suite\n----------\n\nI haz one:\n\n::\n\t\n\tpython setup.py test\n\n\n\n\nHistory\n-------\n\n0.0.1a (2013-08-27)\n++++++++++++++++++\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chrislawlor/recommendr", "keywords": "recommendr", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "recommendr", "package_url": "https://pypi.org/project/recommendr/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/recommendr/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/chrislawlor/recommendr"}, "release_url": "https://pypi.org/project/recommendr/0.0.1a/", "requires_dist": null, "requires_python": null, "summary": "Movie recommendation engine.", "version": "0.0.1a", "yanked": false, "html_description": "<div class=\"project-description\">\n            ===============================<br>Recommendr<br>===============================<br><br>.. image:: https://badge.fury.io/py/recommendr.png<br>    :target: http://badge.fury.io/py/recommendr<br>    <br>.. image:: https://travis-ci.org/chrislawlor/recommendr.png?branch=master<br>        :target: https://travis-ci.org/chrislawlor/recommendr<br><br>.. image:: https://pypip.in/d/recommendr/badge.png<br>        :target: https://crate.io/packages/recommendr?version=latest<br><br><br>Movie recommendation engine.<br><br>* Free software: BSD license<br>* Documentation: http://recommendr.rtfd.org.<br><br>Features<br>--------<br><br>* A Redis backend for storing movie and rating data.<br><br>* A simple user-based recommendations algorithm with swappable distance<br>  functions.<br><br>* Item-based recommendation algorithm in work.<br><br>* A demo command-line client.<br><br><br>Try it Out<br>----------<br><br>* Clone the repo::<br><br>\tgit clone git@github.com:chrislawlor/recommendr.git<br><br>* Create a python virtual environment with virtualenvwrapper::<br><br>\tmkvirtualenv recommendr<br><br>* Install requirements::<br><br>\tpip install -r requirements.txt<br><br>* Install recommendr::<br><br>\tpython setup.py install<br><br>* First, import some MovieLens data into Redis::<br><br>\tpython data/import_data.py<br><br>* Run the demo program::<br><br>\tpython demo.py<br><br><br>The demo program will ask you for ratings until you have rated 5 movies, then<br>it will give some recommendations. Recommendations should improve the more<br>times you run the demo program.<br><br><br>*NOTE*: If your Redis instance is somewhere other than ``locahost:6379``, set<br>the ``REDIS_HOST`` and ``REDIS_PORT`` environment variables. If you wish to use<br>a Redis DB other than 1, set ``REDIS_DB``.<br><br><br>Key Code Points<br>---------------<br><br>``recommendr.db``: Implements a Redis DB backend suitable for storing movie<br>and rating information<br><br>::<br>\t<br>\trecommendr.get_user_based_recommendations(reviewer_id, num=20, similarity=sim_distance)<br><br>returns the top recommendations for a given user. It defaults to using<br>Euclidean distance for the similiarity function, optionally pass<br>``recommendr.similarity.sim_pearson`` to use the Pearson Coefficient.<br><br><br>Test Suite<br>----------<br><br>I haz one:<br><br>::<br>\t<br>\tpython setup.py test<br><br><br><br><br>History<br>-------<br><br>0.0.1a (2013-08-27)<br>++++++++++++++++++<br><br>* First release on PyPI.\n          </div>"}, "last_serial": 850570, "releases": {"0.0.1a": []}, "urls": [], "timestamp": "Fri May  8 03:06:10 2020"}