{"info": {"author": "Marcelo V. Rozanti", "author_email": "mvrozanti@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Topic :: Artistic Software"], "description": "# colp \n[![Python versions](https://img.shields.io/pypi/pyversions/colp.svg)](https://pypi.org/project/colp/)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-65F2F5.svg)](https://github.com/mvrozanti/colp#Contributing)\n[![Build Status](https://travis-ci.com/mvrozanti/colp.svg?token=Hrxne9dbhCC141HWAM1p&branch=master)](https://travis-ci.com/mvrozanti/colp)\n[![Coverage Status](https://coveralls.io/repos/github/mvrozanti/colp/badge.svg?branch=master)](https://coveralls.io/github/mvrozanti/colp?branch=master)\n[![PyPI](https://img.shields.io/pypi/v/colp.svg)](https://pypi.org/project/colp/)\n\nThe color processor \n\n\n![](https://i.imgur.com/WIAAZlR.png)\n\n\n### Objective\n\nThis tool is inspired on various processing tools such as awk, sed and imagemagick. There is no processing library for single color operations, be it interactively or not. \n`colp` attempts to solve that. It supports a number of color models (specified later in this README). The goal is to have the ability to script and automate any algorithmic color transformation.\n\n### Installation\n\n`pip install colp`\n\n### Example Usage\n\n#### Interactively operate on colors\n\n```\n$ colp 'a=RGB(1,1,1)' # optionally load a color to memory\n\n\u250c\u2500\u2510\u250c\u2500\u2510\u252c  \u252c\u2500\u2510\n\u2502  \u2502 \u2502\u2502  \u2502\u2500\u2518\n\u2514\u2500\u2518\u2518\u2500\u2518\u2506\u2500\u2518\u2506   the color processor\n\n> a = a.redder()                  # single channel increment\n> a\nRGB(2, 1, 1)\n> a = a + 1                       # all channels increment\n> a\nRGB(3, 2, 2)\n> lightgoldenrodyellow            # X11/HTML constants\nRGB(250, 250, 210)\n> -a                              # inversion \nRGB(252, 253, 253)\n> red.rotate(180) == -red == cyan # rotate hue in HSV space\nTrue\n> skyblue ; skyblue.brighter()    # brighter in HSV space\nRGB(135, 206, 235)\nRGB(136, 208, 237)\n\n> a_set_of_colors = [RGB(25,25,112), HSV(186,23,90), plum, orchid, fuchsia, HEX('#800080')]\n> sorted(a_set_of_colors)\n[RGB(25, 25, 112), HEX('#800080'), RGB(218, 112, 214), RGB(221, 160, 221), HSV(186, 23, 90), HEX('#ff00ff')]\n>\n> cursor = RGB(0,0,0)             # define your own custom functions\n> def pop_and_turn(x):\n>       if x: # equivalent to RGB(0,0,0) == 0\n>             x = x.redder() * 255\n>       return x.rotate(30)\n> \n> for i in range(10):\n>       cursor = pop_and_turn(cursor)\n>       print(cursor)\n>\nRGB(255, 0, 127)\nRGB(255, 0, 0)\nRGB(255, 127, 0)\nRGB(255, 255, 0)\nRGB(127, 255, 0)\nRGB(0, 255, 0)\nRGB(0, 255, 127)\nRGB(0, 255, 255)\nRGB(0, 127, 255)\nRGB(0, 0, 255)\n> red.interpolate(blue, 10)       # interpolate between colors\n[HEX('#ff0000'), HEX('#e50019'), HEX('#cc0033'), HEX('#b2004c'), HEX('#990066'), HEX('#7f007f'), HEX('#660099'), HEX('#4c00b2'), HEX('#3300cc'), HEX('#1900e5'), HEX('#0000ff')]\n```\n\n#### Or pipe commands in\n\n```\n$ echo \"HEX('#ff0000').rotate(15.).to(RGB)\" | colp\n\nRGB(255, 63, 0)\n\n```\n\n#### Usage from Python script\n\n```\nfrom colp import *\nprint(RGB(1,2,3).to(HEX))\n\n```\n\noutputs:\n\n```\nHEX('#010203')\n```\n\n### Class Hierarchy\n```\nColor\n\u251c\u2500\u2500 RGB\n\u2502   \u251c\u2500\u2500 HEX\n\u2502   \u2514\u2500\u2500 CMYK\n\u251c\u2500\u2500 YIQ\n\u2502   \u251c\u2500\u2500 YUV \n\u2502   \u251c\u2500\u2500 YPbPr\n\u2502   \u251c\u2500\u2500 YDbDr\n\u2502   \u2514\u2500\u2500 YCbCr\n\u2502       \u2514\u2500\u2500 xvYCC\n\u251c\u2500\u2500 CIE\n\u2502   \u251c\u2500\u2500 CIELAB\n\u2502   \u251c\u2500\u2500 CIELCh\n\u2502   \u251c\u2500\u2500 CIEUVW\n\u2502   \u2514\u2500\u2500 CIEXYZ\n\u2514\u2500\u2500 HSV = HSD = HSB = HSI\n    \u2514\u2500\u2500 HSL\n```\n\n\n### Formal Parameters\n\n```\nusage: colp [-h] [-n] [-v] [-c] [-s] [-l SCRIPT_FILE] [VAR [VAR ...]]\n\nColor Processor\n\npositional arguments:\n  VAR                   arbitrary python code execution\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n, --no-banner       don't show banner on interactive mode\n  -v, --visualizer      visualize current color processed\n  -c, --css-mode        css-compliant output\n  -s, --scripting-mode  colp script output, which can be reinterpreted by colp\n  -l SCRIPT_FILE, --load-script SCRIPT_FILE\n                        load script from file or stdin\n```\n\n### Basic Color Operators\n|    |    |    |     |\n|----|----|----|-----|\n|`-` |`+` |`*` |`/`  |\n|`//`|`~` |`^` |`\\|` |\n|`&` |`**`|`%` |`>>` | \n|`<<`|`<` |`>` |`<=` |\n|`>=`|`==`|`is`|`not`|\n\n### Named Constants (140)\n- [HTML 4.01 specification](https://en.wikipedia.org/wiki/Web_colors#HTML_color_names)\n- [X11 color names](https://en.wikipedia.org/wiki/Web_colors#)\n\n### Good Resources\n- [HSV Color Specification](https://stat.ethz.ch/R-manual/R-devel/library/grDevices/html/hsv.html)\n- [Color Models vs Color Spaces](https://programmingdesignsystems.com/color/color-models-and-color-spaces/index.html)\n- [rapidtables.com color converter (including formulas)](https://www.rapidtables.com/convert/color/index.html)\n- [colormath-basics](http://www.laurenscorijn.com/articles/colormath-basics)\n\n\n### Supported Color Models\n\n|                      |                      |\n|----------------------|----------------------|\n|  \u2713  RGB/RGBA/HEX:    | \u2713 HSV=HSB=HSI=HSD:   |\n|<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/RGB_Cube_Show_lowgamma_cutout_a.png/1280px-RGB_Cube_Show_lowgamma_cutout_a.png\" alt=\"drawing\" width=\"300\"/>|<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/HSV_color_solid_cylinder_saturation_gray.png/1280px-HSV_color_solid_cylinder_saturation_gray.png\" alt=\"drawing\" width=\"300\"/>|\n| HSL:                 | CMY[K]:              |\n|<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/HSL_color_solid_cylinder_saturation_gray.png/1280px-HSL_color_solid_cylinder_saturation_gray.png\" alt=\"drawing\" width=\"300\"/>|<img src=\"https://i.imgur.com//Bwi2zUi.png\" alt=\"drawing\" width=\"300\"/>|\n| [CIE]LAB:            | YCbCr:               |\n| <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/06/CIELAB_color_space_top_view.png\" alt=\"drawing\" width=\"300\"/>|<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/YCbCr-CbCr_Scaled_Y50.png/1024px-YCbCr-CbCr_Scaled_Y50.png\" alt=\"drawing\" width=\"300\"/>|\n| YIQ:                 | YUV:                 |\n|<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/YIQ_IQ_plane.svg/1024px-YIQ_IQ_plane.svg.png\" alt=\"drawing\" width=\"300\"/>|<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/YUV_UV_plane.svg/1024px-YUV_UV_plane.svg.png\" alt=\"drawing\" width=\"300\"/>|\n\n### Contributing\n\nThere are many other useful colorspaces to convert to and only some are listed in this README.\nTo cover a new colorspace, just add a class that extends `Color` or, even better, a `Color` subclass.\nThere's also definitely some room for automating CSS-file editing.\n\nPull requests are welcomed!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mvrozanti/colp", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "colp", "package_url": "https://pypi.org/project/colp/", "platform": "", "project_url": "https://pypi.org/project/colp/", "project_urls": {"Homepage": "https://github.com/mvrozanti/colp"}, "release_url": "https://pypi.org/project/colp/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Color Processor", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>colp</h1>\n<p><a href=\"https://pypi.org/project/colp/\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5387944dfa93f3787a4df3ee0196e0385c4cc7e3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636f6c702e737667\"></a>\n<a href=\"https://github.com/mvrozanti/colp#Contributing\" rel=\"nofollow\"><img alt=\"PRs welcome\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39d35821790a20af407cd7508ef4290a919c4f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d3635463246352e737667\"></a>\n<a href=\"https://travis-ci.com/mvrozanti/colp\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8553bbb0821e87970ed231e97f35a70333d9a5ee/68747470733a2f2f7472617669732d63692e636f6d2f6d76726f7a616e74692f636f6c702e7376673f746f6b656e3d4872786e653964626843433134314857414d3170266272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/mvrozanti/colp?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/887b0f7d64f2a147a291580a927233d0d89021ab/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d76726f7a616e74692f636f6c702f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/colp/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b13c0220a404e504da167305fe72a081db3cebeb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6c702e737667\"></a></p>\n<p>The color processor</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61819297b34e3268dd404257dde59b1e803fd9e9/68747470733a2f2f692e696d6775722e636f6d2f574941415a6c522e706e67\"></p>\n<h3>Objective</h3>\n<p>This tool is inspired on various processing tools such as awk, sed and imagemagick. There is no processing library for single color operations, be it interactively or not.\n<code>colp</code> attempts to solve that. It supports a number of color models (specified later in this README). The goal is to have the ability to script and automate any algorithmic color transformation.</p>\n<h3>Installation</h3>\n<p><code>pip install colp</code></p>\n<h3>Example Usage</h3>\n<h4>Interactively operate on colors</h4>\n<pre><code>$ colp 'a=RGB(1,1,1)' # optionally load a color to memory\n\n\u250c\u2500\u2510\u250c\u2500\u2510\u252c  \u252c\u2500\u2510\n\u2502  \u2502 \u2502\u2502  \u2502\u2500\u2518\n\u2514\u2500\u2518\u2518\u2500\u2518\u2506\u2500\u2518\u2506   the color processor\n\n&gt; a = a.redder()                  # single channel increment\n&gt; a\nRGB(2, 1, 1)\n&gt; a = a + 1                       # all channels increment\n&gt; a\nRGB(3, 2, 2)\n&gt; lightgoldenrodyellow            # X11/HTML constants\nRGB(250, 250, 210)\n&gt; -a                              # inversion \nRGB(252, 253, 253)\n&gt; red.rotate(180) == -red == cyan # rotate hue in HSV space\nTrue\n&gt; skyblue ; skyblue.brighter()    # brighter in HSV space\nRGB(135, 206, 235)\nRGB(136, 208, 237)\n\n&gt; a_set_of_colors = [RGB(25,25,112), HSV(186,23,90), plum, orchid, fuchsia, HEX('#800080')]\n&gt; sorted(a_set_of_colors)\n[RGB(25, 25, 112), HEX('#800080'), RGB(218, 112, 214), RGB(221, 160, 221), HSV(186, 23, 90), HEX('#ff00ff')]\n&gt;\n&gt; cursor = RGB(0,0,0)             # define your own custom functions\n&gt; def pop_and_turn(x):\n&gt;       if x: # equivalent to RGB(0,0,0) == 0\n&gt;             x = x.redder() * 255\n&gt;       return x.rotate(30)\n&gt; \n&gt; for i in range(10):\n&gt;       cursor = pop_and_turn(cursor)\n&gt;       print(cursor)\n&gt;\nRGB(255, 0, 127)\nRGB(255, 0, 0)\nRGB(255, 127, 0)\nRGB(255, 255, 0)\nRGB(127, 255, 0)\nRGB(0, 255, 0)\nRGB(0, 255, 127)\nRGB(0, 255, 255)\nRGB(0, 127, 255)\nRGB(0, 0, 255)\n&gt; red.interpolate(blue, 10)       # interpolate between colors\n[HEX('#ff0000'), HEX('#e50019'), HEX('#cc0033'), HEX('#b2004c'), HEX('#990066'), HEX('#7f007f'), HEX('#660099'), HEX('#4c00b2'), HEX('#3300cc'), HEX('#1900e5'), HEX('#0000ff')]\n</code></pre>\n<h4>Or pipe commands in</h4>\n<pre><code>$ echo \"HEX('#ff0000').rotate(15.).to(RGB)\" | colp\n\nRGB(255, 63, 0)\n\n</code></pre>\n<h4>Usage from Python script</h4>\n<pre><code>from colp import *\nprint(RGB(1,2,3).to(HEX))\n\n</code></pre>\n<p>outputs:</p>\n<pre><code>HEX('#010203')\n</code></pre>\n<h3>Class Hierarchy</h3>\n<pre><code>Color\n\u251c\u2500\u2500 RGB\n\u2502   \u251c\u2500\u2500 HEX\n\u2502   \u2514\u2500\u2500 CMYK\n\u251c\u2500\u2500 YIQ\n\u2502   \u251c\u2500\u2500 YUV \n\u2502   \u251c\u2500\u2500 YPbPr\n\u2502   \u251c\u2500\u2500 YDbDr\n\u2502   \u2514\u2500\u2500 YCbCr\n\u2502       \u2514\u2500\u2500 xvYCC\n\u251c\u2500\u2500 CIE\n\u2502   \u251c\u2500\u2500 CIELAB\n\u2502   \u251c\u2500\u2500 CIELCh\n\u2502   \u251c\u2500\u2500 CIEUVW\n\u2502   \u2514\u2500\u2500 CIEXYZ\n\u2514\u2500\u2500 HSV = HSD = HSB = HSI\n    \u2514\u2500\u2500 HSL\n</code></pre>\n<h3>Formal Parameters</h3>\n<pre><code>usage: colp [-h] [-n] [-v] [-c] [-s] [-l SCRIPT_FILE] [VAR [VAR ...]]\n\nColor Processor\n\npositional arguments:\n  VAR                   arbitrary python code execution\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n, --no-banner       don't show banner on interactive mode\n  -v, --visualizer      visualize current color processed\n  -c, --css-mode        css-compliant output\n  -s, --scripting-mode  colp script output, which can be reinterpreted by colp\n  -l SCRIPT_FILE, --load-script SCRIPT_FILE\n                        load script from file or stdin\n</code></pre>\n<h3>Basic Color Operators</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-</code></td>\n<td><code>+</code></td>\n<td><code>*</code></td>\n<td><code>/</code></td>\n</tr>\n<tr>\n<td><code>//</code></td>\n<td><code>~</code></td>\n<td><code>^</code></td>\n<td><code>|</code></td>\n</tr>\n<tr>\n<td><code>&amp;</code></td>\n<td><code>**</code></td>\n<td><code>%</code></td>\n<td><code>&gt;&gt;</code></td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td><code>&lt;</code></td>\n<td><code>&gt;</code></td>\n<td><code>&lt;=</code></td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td><code>==</code></td>\n<td><code>is</code></td>\n<td><code>not</code></td>\n</tr></tbody></table>\n<h3>Named Constants (140)</h3>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Web_colors#HTML_color_names\" rel=\"nofollow\">HTML 4.01 specification</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Web_colors#\" rel=\"nofollow\">X11 color names</a></li>\n</ul>\n<h3>Good Resources</h3>\n<ul>\n<li><a href=\"https://stat.ethz.ch/R-manual/R-devel/library/grDevices/html/hsv.html\" rel=\"nofollow\">HSV Color Specification</a></li>\n<li><a href=\"https://programmingdesignsystems.com/color/color-models-and-color-spaces/index.html\" rel=\"nofollow\">Color Models vs Color Spaces</a></li>\n<li><a href=\"https://www.rapidtables.com/convert/color/index.html\" rel=\"nofollow\">rapidtables.com color converter (including formulas)</a></li>\n<li><a href=\"http://www.laurenscorijn.com/articles/colormath-basics\" rel=\"nofollow\">colormath-basics</a></li>\n</ul>\n<h3>Supported Color Models</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\u2713  RGB/RGBA/HEX:</td>\n<td>\u2713 HSV=HSB=HSI=HSD:</td>\n</tr>\n<tr>\n<td><img alt=\"drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe56261aed85de690ce13075ddc0983c8b6f23eb/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f302f30352f5247425f437562655f53686f775f6c6f7767616d6d615f6375746f75745f612e706e672f3132383070782d5247425f437562655f53686f775f6c6f7767616d6d615f6375746f75745f612e706e67\" width=\"300\"></td>\n<td><img alt=\"drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9716fc5f78e751b98756a365819a22df4777a31b/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f332f33332f4853565f636f6c6f725f736f6c69645f63796c696e6465725f73617475726174696f6e5f677261792e706e672f3132383070782d4853565f636f6c6f725f736f6c69645f63796c696e6465725f73617475726174696f6e5f677261792e706e67\" width=\"300\"></td>\n</tr>\n<tr>\n<td>HSL:</td>\n<td>CMY[K]:</td>\n</tr>\n<tr>\n<td><img alt=\"drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c90356b8e212f3e1f54ea7117103c131e22bdc2/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f362f36622f48534c5f636f6c6f725f736f6c69645f63796c696e6465725f73617475726174696f6e5f677261792e706e672f3132383070782d48534c5f636f6c6f725f736f6c69645f63796c696e6465725f73617475726174696f6e5f677261792e706e67\" width=\"300\"></td>\n<td><img alt=\"drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3cf7ea2ab9d62b64578de2618f04472b4fa0d843/68747470733a2f2f692e696d6775722e636f6d2f2f427769327a55692e706e67\" width=\"300\"></td>\n</tr>\n<tr>\n<td>[CIE]LAB:</td>\n<td>YCbCr:</td>\n</tr>\n<tr>\n<td><img alt=\"drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50d7f761a11163cf91e1951b734deaa3f809a71f/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30362f4349454c41425f636f6c6f725f73706163655f746f705f766965772e706e67\" width=\"300\"></td>\n<td><img alt=\"drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a8ed97ca0e02a197459018fc371a4f5bd2a1d4e/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f332f33342f59436243722d436243725f5363616c65645f5935302e706e672f3130323470782d59436243722d436243725f5363616c65645f5935302e706e67\" width=\"300\"></td>\n</tr>\n<tr>\n<td>YIQ:</td>\n<td>YUV:</td>\n</tr>\n<tr>\n<td><img alt=\"drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e23e345a0376c3795ad190d5874b25cb85b7d52a/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f382f38322f5949515f49515f706c616e652e7376672f3130323470782d5949515f49515f706c616e652e7376672e706e67\" width=\"300\"></td>\n<td><img alt=\"drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1b5ab84132f74566f544d0ae95089063977b8a22/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f662f66392f5955565f55565f706c616e652e7376672f3130323470782d5955565f55565f706c616e652e7376672e706e67\" width=\"300\"></td>\n</tr></tbody></table>\n<h3>Contributing</h3>\n<p>There are many other useful colorspaces to convert to and only some are listed in this README.\nTo cover a new colorspace, just add a class that extends <code>Color</code> or, even better, a <code>Color</code> subclass.\nThere's also definitely some room for automating CSS-file editing.</p>\n<p>Pull requests are welcomed!</p>\n\n          </div>"}, "last_serial": 5495920, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2446f67b2bf99b6dc1722369986152f9", "sha256": "62e712c580257a07083b31c82b28738e7cefbb44d73af281128c82123f3469f5"}, "downloads": -1, "filename": "colp-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2446f67b2bf99b6dc1722369986152f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14418, "upload_time": "2019-07-04T02:14:46", "upload_time_iso_8601": "2019-07-04T02:14:46.144054Z", "url": "https://files.pythonhosted.org/packages/76/14/790389d4b5ea0e25842a494c42f71b10f688ed101e8719be072989c34f3a/colp-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "4aca5552fbc241a2190926cb7b5396f9", "sha256": "9ed4759d8969bc0e68a502bce4a1895c32b2935a5b27575a54de57e2465b06a9"}, "downloads": -1, "filename": "colp-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4aca5552fbc241a2190926cb7b5396f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15462, "upload_time": "2019-07-07T00:37:37", "upload_time_iso_8601": "2019-07-07T00:37:37.804404Z", "url": "https://files.pythonhosted.org/packages/59/98/1503a25bcc9fc13cca59cd6ebc593651e74f251b680a47da82ba37e54c83/colp-0.0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4aca5552fbc241a2190926cb7b5396f9", "sha256": "9ed4759d8969bc0e68a502bce4a1895c32b2935a5b27575a54de57e2465b06a9"}, "downloads": -1, "filename": "colp-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4aca5552fbc241a2190926cb7b5396f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15462, "upload_time": "2019-07-07T00:37:37", "upload_time_iso_8601": "2019-07-07T00:37:37.804404Z", "url": "https://files.pythonhosted.org/packages/59/98/1503a25bcc9fc13cca59cd6ebc593651e74f251b680a47da82ba37e54c83/colp-0.0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:44:31 2020"}