{"info": {"author": "Eric Crosson", "author_email": "eric.s.crosson@utexas.edu", "bugtrack_url": null, "classifiers": [], "description": "Stump\n=====\n\n.. image:: https://travis-ci.org/EricCrosson/stump.svg?branch=master\n   :target: https://travis-ci.org/EricCrosson/stump\n   :alt: Travis-CI Build Status\n.. image:: https://img.shields.io/pypi/v/stump.svg\n   :target: https://github.com/EricCrosson/stump\n   :alt: Current Version\n.. image:: https://img.shields.io/pypi/l/stump.svg\n   :target: https://github.com/EricCrosson/stump\n   :alt: License\n\n-  `What is stump?`_\n\n-  `Installation`_\n\n-  `Usage`_\n\n   -  `API`_\n\n   -  `Examples`_\n\n-  `License`_\n\n.. role:: python(code)\n   :language: python\n\nWhat is stump?\n--------------\n\n**Stump:**\n\n*n.* the lower end of a tree or plant left after the main part is\nremoved\n\n**Log:**\n\n*n.* a portion or length of the trunk or of a large limb of a felled\ntree\n\n:python:`stump` is a **logging utility for Python** that uses the `standard\nlogging module`_ under the covers. However, a stump is a different part of a\ntree than a log and as such should be utilized differently. :Python:`stump`\noffers various `method decorators`_ that really cover all the bases of logging\nfor debugging. :Python:`stump`\u2019s method decorators are flexible and concise, act\nas additional documentation, don\u2019t clutter the main code of the method body and\naccept a natural format string that is easy to form and read.\n\nInstallation\n------------\n\nInstall from `pip`_\n\n.. code-block:: bash\n\n   pip install stump\n\nAlternatively, clone this repo and install from your local copy\n\n.. code-block:: bash\n\n   git clone https://github.com/EricCrosson/stump\n   cd stump\n   python setup.py install\n\n\nUsage\n-----\n\nOnce installed simply :python:`import stump` and pass a logger to\n:python:`stump.configure`, as demonstrated in the `Examples`_ section.\n\nThe different :python:`stump` decorators all inherit the same functionality,\nwith minor behavioral differences. Each decorator accepts a logging string as\nthe first argument. This string may contain the values of the decorated method's\nparameters. For example, to log the values of parameters passed to\n:python:`accelerate` the following format string could be used\n\n.. code-block:: python\n\n       @stump.put('Object is {weight} lbs with {gravity} m/s^2 acceleration')\n       def accelerate(weight, gravity):\n           work()\n\n\nIf invoked by :python:`accelerate(42, 9.8)` the logs generated would be\n\n.. code-block:: text\n\n       INFO:accelerate:Object is 42 lbs with 9.8 m/s^2 acceleration...\n       INFO:accelerate:Object is 42 lbs with 9.8 m/s^2 acceleration...done\n\nAPI\n~~~\n\nThe standard decorator, :python:`stump.put`, prints a message upon entering and\nexiting a method. The below table describes the public api exposed by :python:`stump`.\n\n:python:`stump.put`\n        Print a message upon entering and exiting the method\n\n:python:`stump.pre`\n        Print a message only upon entering the method\n\n:python:`stump.post`\n        Print a message only upon exiting the method\n\n:python:`stump.date`\n        Like :python:`stump.put`, but include a date- and time- stamp\n\n:python:`stump.ret`\n        Like :python:`stump.put`, but include the method's return value\n\n\nExamples\n~~~~~~~~\n\nImport the :python:`stump` library and configure the :python:`stump` logger\n\n.. code-block:: python\n\n      #!/usr/bin/env python\n      import stump\n\n      # configure a logger for stump\n      import sys\n      import logging\n      logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\n      logger = logging.getLogger()\n\n      stump.configure(logger)\n\nAnd decorate some methods. :Python:`stump` allows you to interpolate a string\nrepresentation of the parameter values to decorated methods by simply\nwrapping the parameter name in curly braces.\n\n.. code-block:: python\n\n      @stump.post('Using nitrous')\n      def use_nitrous():\n          raise NoNitrousException('You never installed nitrous!')\n\n      @stump.ret('\"Calculating\" boost for car {car}')\n      def car_boost(car):\n          try:\n              use_nitrous()\n          except:\n              return random.random() * 100\n\n      @stump.pre()\n      def ready():\n          light = 'red'\n\n      @stump.pre()\n      def set():\n          light = 'yellow'\n\n      @stump.post()\n      def go():\n          light = 'green'\n\n      @stump.date('Racing {car}', print_return=True)\n      def race(car):\n          luck = car_boost(car)\n          return random.randint(1, round(luck))\n\n      ready()\n      set()\n      go()\n      race('wacky')\n\nThis example logs the following events\n\n.. code:: text\n\n      INFO:root:ready...\n      INFO:root:set...\n      INFO:root:go...done\n      INFO:root:race:2016-02-14 23:33:37:Racing wacky...\n      INFO:root:car_boost:\"Calculating\" boost for car wacky...\n      INFO:root:use_nitrous:Using nitrous...\n      INFO:root:use_nitrous:Using nitrous...threw exception NoNitrousException with message You never installed nitrous!\n      INFO:root:car_boost:\"Calculating\" boost for car wacky...done (returning 56.138089977332776)\n      INFO:root:race:2016-02-14 23:33:37:Racing wacky...done (returning 2)\n\nLicense\n-------\n\nThis code is released under the MIT license.\n\n.. _What is stump?: #what-is-stump\n.. _Installation: #installation\n.. _Usage: #usage\n.. _License: #license\n.. _API: #api\n.. _Examples: #examples\n.. _standard logging module: https://docs.python.org/3/library/logging.html\n.. _method decorators: https://www.python.org/dev/peps/pep-0318/\n.. _pip: https://pypi.python.org/pypi/pip", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/EricCrosson/stump", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "stump", "package_url": "https://pypi.org/project/stump/", "platform": "", "project_url": "https://pypi.org/project/stump/", "project_urls": {"Homepage": "http://github.com/EricCrosson/stump"}, "release_url": "https://pypi.org/project/stump/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Logs program flow with decorators", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/EricCrosson/stump\" rel=\"nofollow\"><img alt=\"Travis-CI Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d6d5250b64053c3b8a31e571d71b7a95040330d/68747470733a2f2f7472617669732d63692e6f72672f4572696343726f73736f6e2f7374756d702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/EricCrosson/stump\" rel=\"nofollow\"><img alt=\"Current Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49268ff51201b42af581d27e842e03f6bef19ff1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7374756d702e737667\"></a>\n<a href=\"https://github.com/EricCrosson/stump\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf17d3b54da94221c4350ce5c8a313e0feb9f3e6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7374756d702e737667\"></a>\n<ul>\n<li><a href=\"#what-is-stump\" rel=\"nofollow\">What is stump?</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#api\" rel=\"nofollow\">API</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n</ul>\n</li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<div id=\"what-is-stump\">\n<h2>What is stump?</h2>\n<p><strong>Stump:</strong></p>\n<p><em>n.</em> the lower end of a tree or plant left after the main part is\nremoved</p>\n<p><strong>Log:</strong></p>\n<p><em>n.</em> a portion or length of the trunk or of a large limb of a felled\ntree</p>\n<p><code class=\"python\"><span class=\"n\">stump</span></code> is a <strong>logging utility for Python</strong> that uses the <a href=\"https://docs.python.org/3/library/logging.html\" rel=\"nofollow\">standard\nlogging module</a> under the covers. However, a stump is a different part of a\ntree than a log and as such should be utilized differently. <code class=\"python\"><span class=\"n\">stump</span></code>\noffers various <a href=\"https://www.python.org/dev/peps/pep-0318/\" rel=\"nofollow\">method decorators</a> that really cover all the bases of logging\nfor debugging. <code class=\"python\"><span class=\"n\">stump</span></code>\u2019s method decorators are flexible and concise, act\nas additional documentation, don\u2019t clutter the main code of the method body and\naccept a natural format string that is easy to form and read.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from <a href=\"https://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a></p>\n<pre>pip install stump\n</pre>\n<p>Alternatively, clone this repo and install from your local copy</p>\n<pre>git clone https://github.com/EricCrosson/stump\n<span class=\"nb\">cd</span> stump\npython setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Once installed simply <code class=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">stump</span></code> and pass a logger to\n<code class=\"python\"><span class=\"n\">stump</span><span class=\"o\">.</span><span class=\"n\">configure</span></code>, as demonstrated in the <a href=\"#examples\" rel=\"nofollow\">Examples</a> section.</p>\n<p>The different <code class=\"python\"><span class=\"n\">stump</span></code> decorators all inherit the same functionality,\nwith minor behavioral differences. Each decorator accepts a logging string as\nthe first argument. This string may contain the values of the decorated method\u2019s\nparameters. For example, to log the values of parameters passed to\n<code class=\"python\"><span class=\"n\">accelerate</span></code> the following format string could be used</p>\n<pre><span class=\"nd\">@stump</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'Object is </span><span class=\"si\">{weight}</span><span class=\"s1\"> lbs with </span><span class=\"si\">{gravity}</span><span class=\"s1\"> m/s^2 acceleration'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">accelerate</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">gravity</span><span class=\"p\">):</span>\n    <span class=\"n\">work</span><span class=\"p\">()</span>\n</pre>\n<p>If invoked by <code class=\"python\"><span class=\"n\">accelerate</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mf\">9.8</span><span class=\"p\">)</span></code> the logs generated would be</p>\n<pre>INFO:accelerate:Object is 42 lbs with 9.8 m/s^2 acceleration...\nINFO:accelerate:Object is 42 lbs with 9.8 m/s^2 acceleration...done\n</pre>\n<div id=\"api\">\n<h3>API</h3>\n<p>The standard decorator, <code class=\"python\"><span class=\"n\">stump</span><span class=\"o\">.</span><span class=\"n\">put</span></code>, prints a message upon entering and\nexiting a method. The below table describes the public api exposed by <code class=\"python\"><span class=\"n\">stump</span></code>.</p>\n<dl>\n<dt><code class=\"python\"><span class=\"n\">stump</span><span class=\"o\">.</span><span class=\"n\">put</span></code></dt>\n<dd>Print a message upon entering and exiting the method</dd>\n<dt><code class=\"python\"><span class=\"n\">stump</span><span class=\"o\">.</span><span class=\"n\">pre</span></code></dt>\n<dd>Print a message only upon entering the method</dd>\n<dt><code class=\"python\"><span class=\"n\">stump</span><span class=\"o\">.</span><span class=\"n\">post</span></code></dt>\n<dd>Print a message only upon exiting the method</dd>\n<dt><code class=\"python\"><span class=\"n\">stump</span><span class=\"o\">.</span><span class=\"n\">date</span></code></dt>\n<dd>Like <code class=\"python\"><span class=\"n\">stump</span><span class=\"o\">.</span><span class=\"n\">put</span></code>, but include a date- and time- stamp</dd>\n<dt><code class=\"python\"><span class=\"n\">stump</span><span class=\"o\">.</span><span class=\"n\">ret</span></code></dt>\n<dd>Like <code class=\"python\"><span class=\"n\">stump</span><span class=\"o\">.</span><span class=\"n\">put</span></code>, but include the method\u2019s return value</dd>\n</dl>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Import the <code class=\"python\"><span class=\"n\">stump</span></code> library and configure the <code class=\"python\"><span class=\"n\">stump</span></code> logger</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">stump</span>\n\n<span class=\"c1\"># configure a logger for stump</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n\n<span class=\"n\">stump</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">logger</span><span class=\"p\">)</span>\n</pre>\n<p>And decorate some methods. <code class=\"python\"><span class=\"n\">stump</span></code> allows you to interpolate a string\nrepresentation of the parameter values to decorated methods by simply\nwrapping the parameter name in curly braces.</p>\n<pre><span class=\"nd\">@stump</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'Using nitrous'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">use_nitrous</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"n\">NoNitrousException</span><span class=\"p\">(</span><span class=\"s1\">'You never installed nitrous!'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@stump</span><span class=\"o\">.</span><span class=\"n\">ret</span><span class=\"p\">(</span><span class=\"s1\">'\"Calculating\" boost for car </span><span class=\"si\">{car}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">car_boost</span><span class=\"p\">(</span><span class=\"n\">car</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">use_nitrous</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">100</span>\n\n<span class=\"nd\">@stump</span><span class=\"o\">.</span><span class=\"n\">pre</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">():</span>\n    <span class=\"n\">light</span> <span class=\"o\">=</span> <span class=\"s1\">'red'</span>\n\n<span class=\"nd\">@stump</span><span class=\"o\">.</span><span class=\"n\">pre</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">set</span><span class=\"p\">():</span>\n    <span class=\"n\">light</span> <span class=\"o\">=</span> <span class=\"s1\">'yellow'</span>\n\n<span class=\"nd\">@stump</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">():</span>\n    <span class=\"n\">light</span> <span class=\"o\">=</span> <span class=\"s1\">'green'</span>\n\n<span class=\"nd\">@stump</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"s1\">'Racing </span><span class=\"si\">{car}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">print_return</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">race</span><span class=\"p\">(</span><span class=\"n\">car</span><span class=\"p\">):</span>\n    <span class=\"n\">luck</span> <span class=\"o\">=</span> <span class=\"n\">car_boost</span><span class=\"p\">(</span><span class=\"n\">car</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">luck</span><span class=\"p\">))</span>\n\n<span class=\"n\">ready</span><span class=\"p\">()</span>\n<span class=\"nb\">set</span><span class=\"p\">()</span>\n<span class=\"n\">go</span><span class=\"p\">()</span>\n<span class=\"n\">race</span><span class=\"p\">(</span><span class=\"s1\">'wacky'</span><span class=\"p\">)</span>\n</pre>\n<p>This example logs the following events</p>\n<pre>INFO:root:ready...\nINFO:root:set...\nINFO:root:go...done\nINFO:root:race:2016-02-14 23:33:37:Racing wacky...\nINFO:root:car_boost:\"Calculating\" boost for car wacky...\nINFO:root:use_nitrous:Using nitrous...\nINFO:root:use_nitrous:Using nitrous...threw exception NoNitrousException with message You never installed nitrous!\nINFO:root:car_boost:\"Calculating\" boost for car wacky...done (returning 56.138089977332776)\nINFO:root:race:2016-02-14 23:33:37:Racing wacky...done (returning 2)\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This code is released under the MIT license.</p>\n</div>\n\n          </div>"}, "last_serial": 4474541, "releases": {"0.11": [{"comment_text": "", "digests": {"md5": "8c395e16e1efb6ff37efc22578d77c52", "sha256": "68a675d3f94a2774f868f41d0039b14b36474f10a485b3e73bfcebbe10f0c441"}, "downloads": -1, "filename": "stump-0.11.tar.gz", "has_sig": false, "md5_digest": "8c395e16e1efb6ff37efc22578d77c52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3872, "upload_time": "2016-02-15T00:04:39", "upload_time_iso_8601": "2016-02-15T00:04:39.046885Z", "url": "https://files.pythonhosted.org/packages/2a/71/496ec5e1fc7dce2b6ff34815442621bc21ff115aff22aeb500f33f7acb22/stump-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "d307fa68a3e7a3da272a0925b4106d42", "sha256": "5e0cffe4bc7f44b6bc25724b2c21e30974e1cbaf152a56f2ef371f7310702ee0"}, "downloads": -1, "filename": "stump-0.12.tar.gz", "has_sig": false, "md5_digest": "d307fa68a3e7a3da272a0925b4106d42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4866, "upload_time": "2016-02-15T03:17:58", "upload_time_iso_8601": "2016-02-15T03:17:58.083481Z", "url": "https://files.pythonhosted.org/packages/07/40/92f17ecd6e2b8e68e6a7e8172e2387e0474b2221e20690a7514d24c99e36/stump-0.12.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "0ff60b61de76a16ae46f271a4c8be3ee", "sha256": "60dcbe38e69b08efe90aea22b69398a1f20417940b4ef9dffa47a7a3c9c02151"}, "downloads": -1, "filename": "stump-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0ff60b61de76a16ae46f271a4c8be3ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5365, "upload_time": "2018-11-11T15:15:26", "upload_time_iso_8601": "2018-11-11T15:15:26.972894Z", "url": "https://files.pythonhosted.org/packages/33/67/c2f0ca1976f7c37f7452e9e1c93a0ea8d80aa5f7bd70515236692a7389e4/stump-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ff60b61de76a16ae46f271a4c8be3ee", "sha256": "60dcbe38e69b08efe90aea22b69398a1f20417940b4ef9dffa47a7a3c9c02151"}, "downloads": -1, "filename": "stump-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0ff60b61de76a16ae46f271a4c8be3ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5365, "upload_time": "2018-11-11T15:15:26", "upload_time_iso_8601": "2018-11-11T15:15:26.972894Z", "url": "https://files.pythonhosted.org/packages/33/67/c2f0ca1976f7c37f7452e9e1c93a0ea8d80aa5f7bd70515236692a7389e4/stump-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:56 2020"}