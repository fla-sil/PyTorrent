{"info": {"author": "Kevin Fortier", "author_email": "kevin.r.fortier@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "\n.. image:: https://github.com/kforti/D4Data/blob/master/logo.png\n\n======\nD4Data\n======\n\n.. image:: https://img.shields.io/pypi/v/d4data.svg\n        :target: https://pypi.python.org/pypi/d4data\n\nData Engineered with python\n\n\nProof of concept project for python data engineering. Envisioned use cases:\n    - Data access and sharing with data defined as code.\n    - Data catologing and discovery.\n    - Data transfer and partitioning for distributed computing.\n    - Go from remote data sources to model training with simple and expressive python.\n\nInstallation\n------------\n.. code-block:: bash\n\n    pip install d4data\n\nExample API:\n------------\nDefine data as code\n\n.. code-block:: python\n\n    from d4data.storage_clients import FTPStorageClient\n    from d4data.sources import CSVDataSource\n\n    class NIHChromosomeSNPS38(CSVDataSource):\n        def __init__(self, chromosome, output_path):\n            # define data that is specific to your data source\n            self.chromosome = chromosome\n\n            # give your data source a name, file name, local paths to save to and uri\n            self.name = \"NIH_Chromose_{}_SNPS38\".format(self.chromosome)\n            self.file_name = \"bed_chr_{}.bed.gz\".format(self.chromosome)\n            self.uri = \"https://ftp.ncbi.nlm.nih.gov/snp/organisms/human_9606_b151_GRCh38p7/BED/\" + self.file_name\n            self.local_paths = [os.path.join(output_path, self.file_name)]\n\n            # assign a storage client\n            self.client = FTPStorageClient()\n\n\n- Download data programmatically\n\n.. code-block:: python\n\n    data = NIHChromosomeSNPS38(chromosome=1, local_path=\"./datasources\")\n\n    # calls client.download(uri=self.uri)\n    data.to_disk()\n\n- Process data\n\n.. code-block:: python\n\n    dataset = data.to_dataset()\n    for i in range(len(dataset)):\n        some_func(dataset[i])\n\n- Compose DataSources dynamically with a DataStrategy:\n\n.. code-block:: python\n\n    from d4data.storage_clients import HTTPStorageClient\n    from d4data.core import DataStrategy, CompositeDataSource\n\n    # Define the DataSource\n    class HaploRegSource(CSVDataSource):\n        def __init__(self, population, local_path):\n            self.name = \"LD_{}\".format(population.upper())\n            self.file_name = self.name + \".tsv.gz\"\n            self.uri = \"https://pubs.broadinstitute.org/mammals/haploreg/data/\" + self.file_name\n            self.local_paths = [os.path.join(local_path, self.file_name)]\n\n            self.client = HTTPStorageClient()\n\n    # Define the DataStrategy\n    # Data Strategies contain logic for building data sources from some higher level data about the data, e.g list of s3 urls.\n    # Data Strategies can also contain a partition strategy where logic for partitioning data sources can be implemented- you may want to partition based on compute resources available.\n    class HaploRegStrategy(DataStrategy):\n        def __init__(self, populations, local_path):\n            self.populations = populations\n            self.local_path = local_path\n\n            self._sources = {\n                \"haplo_reg\": HaploRegSource\n            }\n\n        def create_sources(self):\n            comp_source = CompositeDataSource()\n            source = self._sources[\"haplo_reg\"]\n            for population in self.populations:\n                ds = source(population, self.local_path)\n                comp_source.add(ds)\n            return comp_source\n\n    pops = [\"afr\", \"eur\", \"amr]\n    haplo_strategy = HaploRegStrategy(pops, local_path=\"./data_sources\")\n    comp_source = haplo_strategy.create_sources()\n    for source in comp_source:\n        # Download sources to in-memory file system\n        d = s.to_memfs()\n\n- Prefect Integration: TODO\n\n- Pytorch Integration: TODO\n\n* Free software: Apache Software License 2.0\n* Documentation: https://d4data.readthedocs.io.\n\n\nFeatures\n--------\n\n* TODO\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kforti/d4data", "keywords": "d4data", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "d4data", "package_url": "https://pypi.org/project/d4data/", "platform": "", "project_url": "https://pypi.org/project/d4data/", "project_urls": {"Homepage": "https://github.com/kforti/d4data"}, "release_url": "https://pypi.org/project/d4data/0.1.3/", "requires_dist": ["requests (==2.22.0)", "torch", "prefect", "google-cloud-storage"], "requires_python": ">=3.5", "summary": "Python Boilerplate contains all the boilerplate you need to create a Python package.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://github.com/kforti/D4Data/blob/master/logo.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04c5772cc1c65839745f1395c396cff37ed21cc9/68747470733a2f2f6769746875622e636f6d2f6b666f7274692f4434446174612f626c6f622f6d61737465722f6c6f676f2e706e67\">\n<div id=\"d4data\">\n<h2>D4Data</h2>\n<a href=\"https://pypi.python.org/pypi/d4data\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/d4data.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6bffd6938da5756d81185be1135aba50d062436c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6434646174612e737667\"></a>\n<p>Data Engineered with python</p>\n<dl>\n<dt>Proof of concept project for python data engineering. Envisioned use cases:</dt>\n<dd><ul>\n<li>Data access and sharing with data defined as code.</li>\n<li>Data catologing and discovery.</li>\n<li>Data transfer and partitioning for distributed computing.</li>\n<li>Go from remote data sources to model training with simple and expressive python.</li>\n</ul>\n</dd>\n</dl>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install d4data\n</pre>\n</div>\n<div id=\"example-api\">\n<h3>Example API:</h3>\n<p>Define data as code</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">d4data.storage_clients</span> <span class=\"kn\">import</span> <span class=\"n\">FTPStorageClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">d4data.sources</span> <span class=\"kn\">import</span> <span class=\"n\">CSVDataSource</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NIHChromosomeSNPS38</span><span class=\"p\">(</span><span class=\"n\">CSVDataSource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">chromosome</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">):</span>\n        <span class=\"c1\"># define data that is specific to your data source</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">chromosome</span> <span class=\"o\">=</span> <span class=\"n\">chromosome</span>\n\n        <span class=\"c1\"># give your data source a name, file name, local paths to save to and uri</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"NIH_Chromose_</span><span class=\"si\">{}</span><span class=\"s2\">_SNPS38\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">chromosome</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"bed_chr_</span><span class=\"si\">{}</span><span class=\"s2\">.bed.gz\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">chromosome</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://ftp.ncbi.nlm.nih.gov/snp/organisms/human_9606_b151_GRCh38p7/BED/\"</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span><span class=\"p\">)]</span>\n\n        <span class=\"c1\"># assign a storage client</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">FTPStorageClient</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Download data programmatically</li>\n</ul>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">NIHChromosomeSNPS38</span><span class=\"p\">(</span><span class=\"n\">chromosome</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">local_path</span><span class=\"o\">=</span><span class=\"s2\">\"./datasources\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># calls client.download(uri=self.uri)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">to_disk</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Process data</li>\n</ul>\n<pre><span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">to_dataset</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)):</span>\n    <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li>Compose DataSources dynamically with a DataStrategy:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">d4data.storage_clients</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPStorageClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">d4data.core</span> <span class=\"kn\">import</span> <span class=\"n\">DataStrategy</span><span class=\"p\">,</span> <span class=\"n\">CompositeDataSource</span>\n\n<span class=\"c1\"># Define the DataSource</span>\n<span class=\"k\">class</span> <span class=\"nc\">HaploRegSource</span><span class=\"p\">(</span><span class=\"n\">CSVDataSource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">population</span><span class=\"p\">,</span> <span class=\"n\">local_path</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"LD_</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">\".tsv.gz\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://pubs.broadinstitute.org/mammals/haploreg/data/\"</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">local_path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span><span class=\"p\">)]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">HTTPStorageClient</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Define the DataStrategy</span>\n<span class=\"c1\"># Data Strategies contain logic for building data sources from some higher level data about the data, e.g list of s3 urls.</span>\n<span class=\"c1\"># Data Strategies can also contain a partition strategy where logic for partitioning data sources can be implemented- you may want to partition based on compute resources available.</span>\n<span class=\"k\">class</span> <span class=\"nc\">HaploRegStrategy</span><span class=\"p\">(</span><span class=\"n\">DataStrategy</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">populations</span><span class=\"p\">,</span> <span class=\"n\">local_path</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">populations</span> <span class=\"o\">=</span> <span class=\"n\">populations</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path</span> <span class=\"o\">=</span> <span class=\"n\">local_path</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sources</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"haplo_reg\"</span><span class=\"p\">:</span> <span class=\"n\">HaploRegSource</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_sources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">comp_source</span> <span class=\"o\">=</span> <span class=\"n\">CompositeDataSource</span><span class=\"p\">()</span>\n        <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sources</span><span class=\"p\">[</span><span class=\"s2\">\"haplo_reg\"</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">population</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">populations</span><span class=\"p\">:</span>\n            <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">source</span><span class=\"p\">(</span><span class=\"n\">population</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path</span><span class=\"p\">)</span>\n            <span class=\"n\">comp_source</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">comp_source</span>\n\n<span class=\"n\">pops</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"afr\"</span><span class=\"p\">,</span> <span class=\"s2\">\"eur\"</span><span class=\"p\">,</span> <span class=\"s2\">\"amr]</span>\n<span class=\"n\">haplo_strategy</span> <span class=\"o\">=</span> <span class=\"n\">HaploRegStrategy</span><span class=\"p\">(</span><span class=\"n\">pops</span><span class=\"p\">,</span> <span class=\"n\">local_path</span><span class=\"o\">=</span><span class=\"s2\">\"./data_sources\"</span><span class=\"p\">)</span>\n<span class=\"n\">comp_source</span> <span class=\"o\">=</span> <span class=\"n\">haplo_strategy</span><span class=\"o\">.</span><span class=\"n\">create_sources</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">source</span> <span class=\"ow\">in</span> <span class=\"n\">comp_source</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Download sources to in-memory file system</span>\n    <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">to_memfs</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Prefect Integration: TODO</li>\n<li>Pytorch Integration: TODO</li>\n</ul>\n<ul>\n<li>Free software: Apache Software License 2.0</li>\n<li>Documentation: <a href=\"https://d4data.readthedocs.io\" rel=\"nofollow\">https://d4data.readthedocs.io</a>.</li>\n</ul>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>TODO</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6713360, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "06e4d8268e95aaf796f5b573a4ee94ae", "sha256": "2c94fde4c79382b1e25f3ffeea16563d81959e8f8bddf5a65d1b3bf6a48014fa"}, "downloads": -1, "filename": "d4data-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "06e4d8268e95aaf796f5b573a4ee94ae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8205, "upload_time": "2020-02-27T20:43:47", "upload_time_iso_8601": "2020-02-27T20:43:47.071324Z", "url": "https://files.pythonhosted.org/packages/40/e8/24034d94eeda8f1f8603711ee71e9e3b06b63430d5b9f330b6f0b52a797d/d4data-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74b6714020b22c069630c3f46da629e4", "sha256": "d36a06d15244781d7d0efd00ce229c7096b1f324c325b92d52e70c3ed831ba3c"}, "downloads": -1, "filename": "d4data-0.1.0.tar.gz", "has_sig": false, "md5_digest": "74b6714020b22c069630c3f46da629e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11277, "upload_time": "2020-02-27T20:43:49", "upload_time_iso_8601": "2020-02-27T20:43:49.539197Z", "url": "https://files.pythonhosted.org/packages/ab/76/1dbcff0f953a48180673f45a7f21891844b0ce8efa2bb84217b0a1929736/d4data-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b1f10587ff87da824ed463368af18819", "sha256": "3a555df135014f691b843059641ab44cd062570bc0d82fb7c9fabe66e91b8aab"}, "downloads": -1, "filename": "d4data-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b1f10587ff87da824ed463368af18819", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8204, "upload_time": "2020-02-27T20:53:09", "upload_time_iso_8601": "2020-02-27T20:53:09.119119Z", "url": "https://files.pythonhosted.org/packages/88/52/bd02da828543530333650e0f6f93795955ba7e69d5ffedcc8e13cc9e8c78/d4data-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce05425c85f29fdef2ea6ff103ffa44e", "sha256": "b78a3fec68d13d18fdcf8d413fc5085b6971d4df8238af4775c53786d7916588"}, "downloads": -1, "filename": "d4data-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ce05425c85f29fdef2ea6ff103ffa44e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11278, "upload_time": "2020-02-27T20:53:11", "upload_time_iso_8601": "2020-02-27T20:53:11.012157Z", "url": "https://files.pythonhosted.org/packages/44/9a/e2f496d664308fa5057b5ce0c2b619adfc0b1cbc5f285e799070b8474a39/d4data-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6333611934bee1b7913fa072fcad3d07", "sha256": "a53eb9997edabb13d26667b1a586e67ced933358e6cf218ce29cb521c7c4040e"}, "downloads": -1, "filename": "d4data-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6333611934bee1b7913fa072fcad3d07", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8219, "upload_time": "2020-02-27T20:58:36", "upload_time_iso_8601": "2020-02-27T20:58:36.177506Z", "url": "https://files.pythonhosted.org/packages/39/7f/556395a66756154ba095d3618a8abbb4b5b7a811f26f2ed3728b2ad5cb27/d4data-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e38521350982a50bffb311b77dc953db", "sha256": "f4928308fe444176da537aad0cf54639e3211d017446c6d4a61c55bd3d2dd65e"}, "downloads": -1, "filename": "d4data-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e38521350982a50bffb311b77dc953db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11305, "upload_time": "2020-02-27T20:58:37", "upload_time_iso_8601": "2020-02-27T20:58:37.478631Z", "url": "https://files.pythonhosted.org/packages/97/7b/701c4a840dbea3c643f85066698daf05e25d2ace1ff38c714515be087a47/d4data-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c5b15c965e150ab3eb2e13c18411bd35", "sha256": "c0b2702032b0deff94d180ed9f54b65e2e93bb969c1cbbccfe28e9c122fda812"}, "downloads": -1, "filename": "d4data-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c5b15c965e150ab3eb2e13c18411bd35", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8230, "upload_time": "2020-02-27T21:05:34", "upload_time_iso_8601": "2020-02-27T21:05:34.606212Z", "url": "https://files.pythonhosted.org/packages/e6/af/883e58ff9ba8e8c849e35df4f4ff20e15053f99a2b26b299adf9bcf01eca/d4data-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf999d8e3fb044c577adb99f460571da", "sha256": "09d7edb7119aef43ae2bfc4bf078978bd916afcb9886eaee6e6ddff0140ff995"}, "downloads": -1, "filename": "d4data-0.1.3.tar.gz", "has_sig": false, "md5_digest": "cf999d8e3fb044c577adb99f460571da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11314, "upload_time": "2020-02-27T21:05:35", "upload_time_iso_8601": "2020-02-27T21:05:35.895163Z", "url": "https://files.pythonhosted.org/packages/44/be/272b0f4adfd56bd56cec82617808c392091da77c3a200f185bfd8462ef8d/d4data-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c5b15c965e150ab3eb2e13c18411bd35", "sha256": "c0b2702032b0deff94d180ed9f54b65e2e93bb969c1cbbccfe28e9c122fda812"}, "downloads": -1, "filename": "d4data-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c5b15c965e150ab3eb2e13c18411bd35", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8230, "upload_time": "2020-02-27T21:05:34", "upload_time_iso_8601": "2020-02-27T21:05:34.606212Z", "url": "https://files.pythonhosted.org/packages/e6/af/883e58ff9ba8e8c849e35df4f4ff20e15053f99a2b26b299adf9bcf01eca/d4data-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf999d8e3fb044c577adb99f460571da", "sha256": "09d7edb7119aef43ae2bfc4bf078978bd916afcb9886eaee6e6ddff0140ff995"}, "downloads": -1, "filename": "d4data-0.1.3.tar.gz", "has_sig": false, "md5_digest": "cf999d8e3fb044c577adb99f460571da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11314, "upload_time": "2020-02-27T21:05:35", "upload_time_iso_8601": "2020-02-27T21:05:35.895163Z", "url": "https://files.pythonhosted.org/packages/44/be/272b0f4adfd56bd56cec82617808c392091da77c3a200f185bfd8462ef8d/d4data-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:58 2020"}