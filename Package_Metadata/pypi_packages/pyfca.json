{"info": {"author": "Roland Puntaier", "author_email": "roland.puntaier@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "pyfca\n=====\n\nhttps://github.com/pyfca/pyfca\n\nPython Formal Concept Analysis (`FCA`_).\n\nThe purpose is to collect algoritms for FCA.\n\nAlgorithms\n----------\n\nSo far:\n\nlattice construction:\n\n- AddIntent\n\nimplications basis:\n\n- Koenig\n\nlattice drawing:\n\n- create lattice diagram and output in \n\n  - svg\n  - tkinter\n\nPlan\n----\n\n- Create a basic lattice data structure:\n\n- Merge existing sources available online.\n\n  Lattice construction:\n\n  - FCbO\n  - InClose2\n  - ...\n\n  Implications basis:\n\n  - Closure\n  - LinClosure\n  - Wild's Closure\n  - ...\n\n\n.. _`FCA`: https://en.wikipedia.org/wiki/Formal_concept_analysis\n\n\n\nUsage\n-----\n\nIt can be used to create a concept lattice and to draw it either using tkinter() or svg().\n\n.. code::\n\n    import pyfca\n    fca = pyfca.Lattice([{1,2},{2},{1,3}])\n    diagram = pyfca.LatticeDiagram(fca,4*297,4*210)\n    diagram.svg().saveas('tmp.svg')\n    import cairosvg\n    cairosvg.svg2png(url=\"file:///<path to tmp.svg>\", write_to='tmp.png')\n\n\n\nThe ``AddIntent`` algorithm is from the paper:\n\n    AddIntent: A New Incremental Algorithm for Constructing Concept Lattices\n\n\nThe lattice drawing algorithm is from:\n\n    `Galicia <http://www.iro.umontreal.ca/~galicia/>`_\n\n\n\n\nImplications\n------------\n\nThis uses the python int as a bit field to store the FCA context.\n\nSee this `blog`_ for more.\n\n\n.. _`blog`: http://rolandpuntaier.blogspot.com/2015/07/implications.html\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyfca/pyfca", "keywords": "Documentation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyfca", "package_url": "https://pypi.org/project/pyfca/", "platform": "", "project_url": "https://pypi.org/project/pyfca/", "project_urls": {"Homepage": "https://github.com/pyfca/pyfca"}, "release_url": "https://pypi.org/project/pyfca/0.3.2/", "requires_dist": ["svgwrite", "pytest-coverage; extra == 'develop'"], "requires_python": "", "summary": "pyfca - python formal concept analysis", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/pyfca/pyfca\" rel=\"nofollow\">https://github.com/pyfca/pyfca</a></p>\n<p>Python Formal Concept Analysis (<a href=\"https://en.wikipedia.org/wiki/Formal_concept_analysis\" rel=\"nofollow\">FCA</a>).</p>\n<p>The purpose is to collect algoritms for FCA.</p>\n<div id=\"algorithms\">\n<h2>Algorithms</h2>\n<p>So far:</p>\n<p>lattice construction:</p>\n<ul>\n<li>AddIntent</li>\n</ul>\n<p>implications basis:</p>\n<ul>\n<li>Koenig</li>\n</ul>\n<p>lattice drawing:</p>\n<ul>\n<li>create lattice diagram and output in<ul>\n<li>svg</li>\n<li>tkinter</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"plan\">\n<h2>Plan</h2>\n<ul>\n<li><p>Create a basic lattice data structure:</p>\n</li>\n<li><p>Merge existing sources available online.</p>\n<p>Lattice construction:</p>\n<ul>\n<li>FCbO</li>\n<li>InClose2</li>\n<li>\u2026</li>\n</ul>\n<p>Implications basis:</p>\n<ul>\n<li>Closure</li>\n<li>LinClosure</li>\n<li>Wild\u2019s Closure</li>\n<li>\u2026</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>It can be used to create a concept lattice and to draw it either using tkinter() or svg().</p>\n<pre>import pyfca\nfca = pyfca.Lattice([{1,2},{2},{1,3}])\ndiagram = pyfca.LatticeDiagram(fca,4*297,4*210)\ndiagram.svg().saveas('tmp.svg')\nimport cairosvg\ncairosvg.svg2png(url=\"file:///&lt;path to tmp.svg&gt;\", write_to='tmp.png')\n</pre>\n<p>The <tt>AddIntent</tt> algorithm is from the paper:</p>\n<blockquote>\nAddIntent: A New Incremental Algorithm for Constructing Concept Lattices</blockquote>\n<p>The lattice drawing algorithm is from:</p>\n<blockquote>\n<a href=\"http://www.iro.umontreal.ca/~galicia/\" rel=\"nofollow\">Galicia</a></blockquote>\n</div>\n<div id=\"implications\">\n<h2>Implications</h2>\n<p>This uses the python int as a bit field to store the FCA context.</p>\n<p>See this <a href=\"http://rolandpuntaier.blogspot.com/2015/07/implications.html\" rel=\"nofollow\">blog</a> for more.</p>\n</div>\n\n          </div>"}, "last_serial": 4425355, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "e110f9d10c7b966fe40285a04288d521", "sha256": "d118507e1ac0e9206c0869fd14ce478268034e79527788b6362e93f171c0b7f8"}, "downloads": -1, "filename": "pyfca-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e110f9d10c7b966fe40285a04288d521", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32843, "upload_time": "2018-04-30T19:34:54", "upload_time_iso_8601": "2018-04-30T19:34:54.877378Z", "url": "https://files.pythonhosted.org/packages/5e/41/f5fd582858fb3f117565a45f366e9fb4155f525379e3c2183340797696a2/pyfca-0.3-py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "179f8ce70f5b9b928e2a571cc882cacd", "sha256": "824d07e1f51e7e475ab8e35cd5dfc546e10a8f75fcc5f80b65e21c5e4f8bb421"}, "downloads": -1, "filename": "pyfca-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "179f8ce70f5b9b928e2a571cc882cacd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13934, "upload_time": "2018-04-30T19:42:08", "upload_time_iso_8601": "2018-04-30T19:42:08.064905Z", "url": "https://files.pythonhosted.org/packages/79/21/e3deae327122db12aeb01fe9a2052e3637031c334ccfa42757aa98cff5c9/pyfca-0.3.1-py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "f2bbed6cecc467073e77aff8c5e13c56", "sha256": "d630a5da5892e76b7c342c6021de19f1576df52affcd7a451ec743bbfc3240c9"}, "downloads": -1, "filename": "pyfca-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f2bbed6cecc467073e77aff8c5e13c56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12358, "upload_time": "2018-10-28T21:44:47", "upload_time_iso_8601": "2018-10-28T21:44:47.981942Z", "url": "https://files.pythonhosted.org/packages/2a/e0/9f06dd95db2941ba7bd50e3bd193dee8384e6daab5206cb29cfc5e3f4fb1/pyfca-0.3.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f2bbed6cecc467073e77aff8c5e13c56", "sha256": "d630a5da5892e76b7c342c6021de19f1576df52affcd7a451ec743bbfc3240c9"}, "downloads": -1, "filename": "pyfca-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f2bbed6cecc467073e77aff8c5e13c56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12358, "upload_time": "2018-10-28T21:44:47", "upload_time_iso_8601": "2018-10-28T21:44:47.981942Z", "url": "https://files.pythonhosted.org/packages/2a/e0/9f06dd95db2941ba7bd50e3bd193dee8384e6daab5206cb29cfc5e3f4fb1/pyfca-0.3.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:05:56 2020"}