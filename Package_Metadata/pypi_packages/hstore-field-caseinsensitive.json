{"info": {"author": "Eric Russell", "author_email": "eric-r@pobox.com", "bugtrack_url": null, "classifiers": [], "description": "# hstore-field\n\nhstore-field is a library which integrates the \n[`hstore`](http://www.postgresql.org/docs/9.0/interactive/hstore.html)\nextension of PostgreSQL into Django, assuming one is using Django 1.3+, \nPostgreSQL 9.0+, and Psycopg 2.3+.\n\nhstore-field draws some inspiration from \n[jordanm/django-hstore](http://github.com/jordanm/django-hstore) and \n[niwibe/django-orm-extensions](https://github.com/niwibe/django-orm-extensions), \nbut it uses a completely different mechanism for extending Django, which has the \nfollowing advantages:\n\n 1. Does not require a custom database backend (at the cost of not supporting \n    indexes on hstore fields)\n 1. Does not require a custom QuerySet class, making it fully compatible with \n    GeoDjango or any other extension that does subclass QuerySet\n 1. Supports range lookup types in queries (i.e., `__lt`, `__gt`, etc...)\n 1. Mostly compatible with South (see limitations below for specifics)\n\n## Limitations\n\n- Because we're not using a custom database backend, hstore-field does not \n  support indexes on hstore fields.\n- Only numbers, strings, and dates may be stored in an hstore dictionary. \n  Hstore-field will convert numbers and dates to strings for you when you write \n  to the field, but it *will not convert them back* into their original types when \n  the hstore dictionary is retrieved from the database. You can make a custom\n  class serialize to hstore by giving it a `to_hstore` method, which must return \n  a string.\n- Hstore-field will automatically try to install configure hstore on any \n  database you connect to, using the `connection_created` signal. If you connect \n  to multiple databases, this could present a problem.\n- Adding an HStoreField with `null=False` to an existing model using South is \n  problematic, because South cannot emit the correct SQL for the default. One\n  workaround is to add the column by putting the SQL directly in the migration\n    \n  ```python\n    def forwards(self, orm):\n        db.execute('ALTER TABLE \"[table]\" ADD COLUMN \"[column]\" hstore NOT NULL DEFAULT hstore(array[]::varchar[]);')\n  ```\n  \n  Another alternative is to add the field with `null=True`, populate the field, \n  then set `null=False`. This is actually considered good practice in general, \n  because default values can cause unexpected problems.\n\n## Running the tests\n\n```\n$ python manage.py test test_hstore_field \n```\n    \n  For this to work\n  1. hstore must be installed in your PostgreSQL contrib folder\n  1. If you are running PostgreSQL 9.0, the directory containing `pg_config` \n     must be on your `PATH`\n\n## Usage\n\nModel definition is straightforward:\n\n```python\nfrom django.db import models\nfrom hstore_field import fields\n\nclass Item (models.Model):\n    name = models.CharField(max_length=64)\n    data = fields.HStoreField()\n```\n\nYou then treat the `data` field as a dictionary of string pairs:\n\n```python\ninstance = Item.objects.create(name='something', data={'a': '1', 'b': '2'})\nassert instance.data['a'] == '1'\n\nempty = Item.objects.create(name='empty')\nassert empty.data == {}\n\nempty.data['a'] = '1'\nempty.save()\nassert Item.objects.get(name='something').data['a'] == '1'\n```\n\nYou can issue queries against hstore keys using the `HQ` class (similar to the `Q` class)\n\n```python\nfrom hstore_field.query import HQ\n\n# return only objects whose dictionary contains a given key...\nItem.objects.filter(HQ(data__contains='a'))\n\n# ...or that contain all keys in a given list (or tuple)\nItem.objects.filter(HQ(data__contains=['a', 'b']))\n```\n\nYou can also query against hstore values:\n\n```python\n# find by exact value\nItem.objects.filter(HQ(data__a='1'])) # equivalent to Item.objects.filter(HQ(data__a__exact='1']))\n\n# subset by list of values\nItem.objects.filter(HQ(data__a__in=['1', '2']))\n\n# subset by range query using integer\nItem.objects.filter(HQ(data__a__lt=1))\n\n# subset by range query using float\nItem.objects.filter(HQ(data__a__gt=1.1))\n\n# subset by range query as timestamp\nItem.objects.filter(HQ(data__a__lte=datetime.datetime(2012, 1, 1, 0, 15)))\n\n# subset by range query as date\nItem.objects.filter(HQ(data__a__gte=datetime.date(2012, 1, 1)))\n\n# subset by range query as time\nItem.objects.filter(HQ(data__a__lte=datetime.time(7, 15)))\n```\n\nNote that, when issuing a range query against an hstore key using a non-string \ntype, any non-null values for that key that cannot be cast to the appropriate \ntype will cause the query to fail.  \n\n`HQ` objects may be combined using `&`, `|`, and `~`, just like `Q` objects. But\nthey may only be combined with other `HQ` objects, and not with any `Q` objects. \nTo combine an `HQ` object with a `Q` object, you must first wrap the `HQ` object \nin a `Q` object. For example:\n\n```python\nItem.objects.filter(HQ(data__a__lt=10) & HQ(data__b__lt=20))     # YES!\n\nItem.objects.filter(Q(HQ(data__a__lt=10)) & Q(data__name=\"foo\")) # YES!\n\nItem.objects.filter(HQ(data__a__lt=10) & Q(data__name=\"foo\"))    # NO!\n```\n\nRange queries are not especially fast, because they require a table scan and for \nevery record's hstore->key to be cast from string to another type. However, \nit is much faster than shipping the entire table to the application layer as\nDjango model objects and filtering them there (3-6 times faster in limited testing).\n\nSupport for indexing hstore values as numbers and/or dates is planned for a \nfuture release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "git@github.com:anantasty/hstore-field.git", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "hstore-field-caseinsensitive", "package_url": "https://pypi.org/project/hstore-field-caseinsensitive/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hstore-field-caseinsensitive/", "project_urls": {"Download": "UNKNOWN", "Homepage": "git@github.com:anantasty/hstore-field.git"}, "release_url": "https://pypi.org/project/hstore-field-caseinsensitive/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Support for PostgreSQL's hstore for Django.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            # hstore-field<br><br>hstore-field is a library which integrates the <br>[`hstore`](http://www.postgresql.org/docs/9.0/interactive/hstore.html)<br>extension of PostgreSQL into Django, assuming one is using Django 1.3+, <br>PostgreSQL 9.0+, and Psycopg 2.3+.<br><br>hstore-field draws some inspiration from <br>[jordanm/django-hstore](http://github.com/jordanm/django-hstore) and <br>[niwibe/django-orm-extensions](https://github.com/niwibe/django-orm-extensions), <br>but it uses a completely different mechanism for extending Django, which has the <br>following advantages:<br><br> 1. Does not require a custom database backend (at the cost of not supporting <br>    indexes on hstore fields)<br> 1. Does not require a custom QuerySet class, making it fully compatible with <br>    GeoDjango or any other extension that does subclass QuerySet<br> 1. Supports range lookup types in queries (i.e., `__lt`, `__gt`, etc...)<br> 1. Mostly compatible with South (see limitations below for specifics)<br><br>## Limitations<br><br>- Because we're not using a custom database backend, hstore-field does not <br>  support indexes on hstore fields.<br>- Only numbers, strings, and dates may be stored in an hstore dictionary. <br>  Hstore-field will convert numbers and dates to strings for you when you write <br>  to the field, but it *will not convert them back* into their original types when <br>  the hstore dictionary is retrieved from the database. You can make a custom<br>  class serialize to hstore by giving it a `to_hstore` method, which must return <br>  a string.<br>- Hstore-field will automatically try to install configure hstore on any <br>  database you connect to, using the `connection_created` signal. If you connect <br>  to multiple databases, this could present a problem.<br>- Adding an HStoreField with `null=False` to an existing model using South is <br>  problematic, because South cannot emit the correct SQL for the default. One<br>  workaround is to add the column by putting the SQL directly in the migration<br>    <br>  ```python<br>    def forwards(self, orm):<br>        db.execute('ALTER TABLE \"[table]\" ADD COLUMN \"[column]\" hstore NOT NULL DEFAULT hstore(array[]::varchar[]);')<br>  ```<br>  <br>  Another alternative is to add the field with `null=True`, populate the field, <br>  then set `null=False`. This is actually considered good practice in general, <br>  because default values can cause unexpected problems.<br><br>## Running the tests<br><br>```<br>$ python manage.py test test_hstore_field <br>```<br>    <br>  For this to work<br>  1. hstore must be installed in your PostgreSQL contrib folder<br>  1. If you are running PostgreSQL 9.0, the directory containing `pg_config` <br>     must be on your `PATH`<br><br>## Usage<br><br>Model definition is straightforward:<br><br>```python<br>from django.db import models<br>from hstore_field import fields<br><br>class Item (models.Model):<br>    name = models.CharField(max_length=64)<br>    data = fields.HStoreField()<br>```<br><br>You then treat the `data` field as a dictionary of string pairs:<br><br>```python<br>instance = Item.objects.create(name='something', data={'a': '1', 'b': '2'})<br>assert instance.data['a'] == '1'<br><br>empty = Item.objects.create(name='empty')<br>assert empty.data == {}<br><br>empty.data['a'] = '1'<br>empty.save()<br>assert Item.objects.get(name='something').data['a'] == '1'<br>```<br><br>You can issue queries against hstore keys using the `HQ` class (similar to the `Q` class)<br><br>```python<br>from hstore_field.query import HQ<br><br># return only objects whose dictionary contains a given key...<br>Item.objects.filter(HQ(data__contains='a'))<br><br># ...or that contain all keys in a given list (or tuple)<br>Item.objects.filter(HQ(data__contains=['a', 'b']))<br>```<br><br>You can also query against hstore values:<br><br>```python<br># find by exact value<br>Item.objects.filter(HQ(data__a='1'])) # equivalent to Item.objects.filter(HQ(data__a__exact='1']))<br><br># subset by list of values<br>Item.objects.filter(HQ(data__a__in=['1', '2']))<br><br># subset by range query using integer<br>Item.objects.filter(HQ(data__a__lt=1))<br><br># subset by range query using float<br>Item.objects.filter(HQ(data__a__gt=1.1))<br><br># subset by range query as timestamp<br>Item.objects.filter(HQ(data__a__lte=datetime.datetime(2012, 1, 1, 0, 15)))<br><br># subset by range query as date<br>Item.objects.filter(HQ(data__a__gte=datetime.date(2012, 1, 1)))<br><br># subset by range query as time<br>Item.objects.filter(HQ(data__a__lte=datetime.time(7, 15)))<br>```<br><br>Note that, when issuing a range query against an hstore key using a non-string <br>type, any non-null values for that key that cannot be cast to the appropriate <br>type will cause the query to fail.  <br><br>`HQ` objects may be combined using `&amp;`, `|`, and `~`, just like `Q` objects. But<br>they may only be combined with other `HQ` objects, and not with any `Q` objects. <br>To combine an `HQ` object with a `Q` object, you must first wrap the `HQ` object <br>in a `Q` object. For example:<br><br>```python<br>Item.objects.filter(HQ(data__a__lt=10) &amp; HQ(data__b__lt=20))     # YES!<br><br>Item.objects.filter(Q(HQ(data__a__lt=10)) &amp; Q(data__name=\"foo\")) # YES!<br><br>Item.objects.filter(HQ(data__a__lt=10) &amp; Q(data__name=\"foo\"))    # NO!<br>```<br><br>Range queries are not especially fast, because they require a table scan and for <br>every record's hstore-&gt;key to be cast from string to another type. However, <br>it is much faster than shipping the entire table to the application layer as<br>Django model objects and filtering them there (3-6 times faster in limited testing).<br><br>Support for indexing hstore values as numbers and/or dates is planned for a <br>future release.\n          </div>"}, "last_serial": 758827, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "0aacaad5cc70feb6c04672eaeb955c76", "sha256": "140299246b7e38dbc459d8890c584b11642084e44250b6128c146800f2801c0c"}, "downloads": -1, "filename": "hstore-field-caseinsensitive-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0aacaad5cc70feb6c04672eaeb955c76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8557, "upload_time": "2013-06-06T20:03:54", "upload_time_iso_8601": "2013-06-06T20:03:54.663523Z", "url": "https://files.pythonhosted.org/packages/36/9c/93056e0a4ebfe7cc7d437a20bd20ebbeb5edb3cd5e718f948162d735cc43/hstore-field-caseinsensitive-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0aacaad5cc70feb6c04672eaeb955c76", "sha256": "140299246b7e38dbc459d8890c584b11642084e44250b6128c146800f2801c0c"}, "downloads": -1, "filename": "hstore-field-caseinsensitive-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0aacaad5cc70feb6c04672eaeb955c76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8557, "upload_time": "2013-06-06T20:03:54", "upload_time_iso_8601": "2013-06-06T20:03:54.663523Z", "url": "https://files.pythonhosted.org/packages/36/9c/93056e0a4ebfe7cc7d437a20bd20ebbeb5edb3cd5e718f948162d735cc43/hstore-field-caseinsensitive-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:21 2020"}