{"info": {"author": "Ronie Martinez", "author_email": "ronmarti18@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Testing"], "description": "# Human Framework: Test Automation Framework for Humans\u2122\n\n> NOTICE: Human Framework is still in the **Proof-of-Concept** stage\n\n> CONTRIBUTE! I am releasing Human Framework under GPLv3 which makes it open source and free.\n> \n> Contribute by:\n> 1. Localization of training data (translation)\n> 2. Adding more intents and actions\n> 3. Reporting bugs\n> 4. Suggesting new features\n\n> NOTICE: I am working on a [Rasa NLU](https://rasa.com/docs/rasa/nlu/about/) support\n\nHuman Framework is a test automation framework designed for testers without software programming background by allowing them to write test steps or instructions in their own language like English.\n\nHuman Framework uses Natural Language Understanding (NLU) for intent classification and entity extraction to be able to perform specific actions. \nIt currently depend on [Microsoft LUIS (Language Understanding)](https://www.luis.ai/).\n\nBelow is an example of test instructions that Human Framework can understand.\nTo get an idea of what specific sentences are supported, check the the content of `trials` and `tests` folder.\n\n```\nOpen chrome browser https://devpost.com\nPage title should be \"Devpost - The home for hackathons\"\nPage should contain link \"About\"\nClick link \"About\"\nPage title should be \"About us \u00b7 Devpost\"\nClose browser\n```\n\nLUIS (and other NLU tools) makes it possible to write test cases on any human language. \nCurrent version of Human Framework only supports English. \n\nHuman Framework was inspired by [Robot Framework](https://robotframework.org/) but leans towards \nNatural Language Processing (NLP) for writing test cases.\n\n**\"Human Framework is the Siri or Alexa of automation testing.\" (minus the voice, but it is possible in the future)**\n\n## How it works\n\n![Architecture](images/architecture.png)\n\nThe architecture of Human Framework can be simplified into 2 steps- Intent Classification and Action Execution:\n\n1. Human Framework reads the test case files and then uses an Intent Classifier (e.g. LUIS.ai) to identify intents and entities.\nFor example, the sentence \"**open chrome browser**\" will be identified with the intent \"**web.open_browser**\" and entity \"**chrome**\" as the browser type.\n2. Human Framework then executes the action specific for the classified intent. \nFor example, the intent \"**web.open_browser**\" will use [Selenium](https://www.seleniumhq.org/) to automate opening a chrome browser.\n\n## Usage / Installation\n\n### Create an Azure account\n\n1. Go to [Azure portal](https://portal.azure.com) and create an account.\n2. On the Azure portal dashboard, click `Create a resource`, look for `Cognitive Services` and click `Create`\n\n    ![Create a resource](images/create-a-resource.PNG)\n\n    ![Search cognitive services](images/search-cognitive-services.PNG)\n\n    ![Create cognitive service](images/create-cognitive-services.PNG)\n\n3. Fill up form and click `Create` button\n\n    ![Create cognitive service form](images/form-cognitive-services.PNG)\n\n### Create a LUIS.ai account\n\n1. Download the Human Framework training data from https://raw.githubusercontent.com/roniemartinez/HumanFramework/master/train/en.json and save it with `.json` extension\n2. Go to [LUIS.ai](https://luis.ai) and create an account\n3. Click `Import new app`\n\n    ![Import new app](images/import-new-app.PNG)\n\n4. Click `Choose app file (JSON format) ...` and select the downloaded Human Framework training data\n\n    ![Choose app file](images/choose-app-file.PNG)\n\n5. Optionally, type your desired app name\n\n    ![Done import new app](images/done-import-new-app.PNG)\n\n6. Click `Done`\n7. Click on the application you created.\n8. On the application dashboard, click `Train` to train your LUIS.ai app\n\n### Connecting Azure account to LUIS.ai and publishing\n\n1. Click `MANAGE` > `Azure Resources` > `Add prediction resource`\n\n    ![Manage LUIS.ai](images/manage-luis.PNG)\n\n2. Fill form\n\n    ![Assign a resource to your app](images/assign-a-resource-to-your-app.PNG)\n\n3. Click `Publish`, select `Production` and then click the `Publish` button\n\n    ![Publish LUIS.ai app](images/publish-app.PNG)\n\n4. Go back to `Azure Resources`. If you published your application to `Staging` environment, use `Change query parameters` to switch between environments.\n\n    ![Copy Endpoint](images/copy-endpoint.PNG)\n\n5. Copy the endpoint assigned resource in #2\n\n**NOTE: After copying the endpoint, enter it to a browser's address bar to make sure that it is accessible., Otherwise, repeat the steps or use the `Starter_Key` which will only give you 1000 API calls**\n\n### Installing Human Framework\n\nHuman Framework is written in Python 3. Start by downloading/installing Python from [python.org](https://python.org). \n\nTo install Human Framework, enter the following command into the terminal/cmd:\n\n#### Directly from Github\n```bash\npip install -e git+git@github.com:roniemartinez/HumanFramework.git#egg=humanframework\n```\n\n#### From PyPI\n```bash\npip install humanframework\n```\n\n### Setting up Human Framework\n\nUse the copied endpoint from LUIS.ai and setup Human Framework. Paste the endpoint enclosed in double quotes.\n\n```bash\nhuman config --luis-endpoint \"<endpoint>\"\n```\n\n### Installing Drivers\n\nHuman Framework depends on [Selenium](https://www.seleniumhq.org/) for testing web applications. Download your desired \n[webdriver](https://www.seleniumhq.org/about/platforms.jsp) and extract them to your local working directory.\n\n### Writing tests\n\nWrite a text file (test_*.txt) containing your tests and save it to local working directory where you placed the Selenium Drivers.\nFor example, if we have a file named `test_web.txt`:\n\n```text\nopen chrome https://python.org\npage title should be \"Welcome to Python.org\"\nclose browser\n```\n\n### Running tests\n\nTo run the tests in `test_web.txt`, enter the following on the terminal/cmd:\n\n```bash\nhuman --test test_web.txt\n```\n\n### Test autodiscovery\n\nFiles inside the `trials` folder that starts with the text `test_` are automatically executed.\n\n```text\ntrials\n|- test_simple.txt\n|- test_simple_2.txt\n|- ...\n```\n\nWith this structure, you can simply type `human` to run the test cases.\n\n## The future of Human Framework\n\n- **Integrated Editor** - While testing was greatly simplified because Human Framework will just execute sentences, \nusing the terminal to install Python and several libraries is still more developer-centric.\nTo remove this technical requirement, another major goal of the Human Framework project is to release a \none-click installer which should include new features like an integrated IDE/Editor. \nThis will greatly increase tester's productivity.\n- **Language Support** - Not all testers use the English language. Supporting most languages will benefit more testers around the world. \n- **NLU Options** - While LUIS.ai is very simple to use and accurate compared to other Intent Classifiers, it is not cheap.\nTo support more testers, a free option like [Rasa NLU](https://rasa.com/docs/rasa/nlu/about/) can be used as an alternative.\n\n## Limitations\n\nI only implemented a few intents and actions for the proof-of-concept stage.\nTo know what are the possible tests that you can do with Human Framework, check the contents of `trials` and `tests` folders.\n\n## Author\n\n- [Ronie Martinez](mailto:ronmarti18@gmail.com)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/roniemartinez/HumanFramework/tarball/0.6.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/roniemartinez/HumanFramework", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "humanframework", "package_url": "https://pypi.org/project/humanframework/", "platform": "", "project_url": "https://pypi.org/project/humanframework/", "project_urls": {"Download": "https://github.com/roniemartinez/HumanFramework/tarball/0.6.2", "Homepage": "https://github.com/roniemartinez/HumanFramework"}, "release_url": "https://pypi.org/project/humanframework/0.6.2/", "requires_dist": ["diskcache (==4.0.0)", "Jinja2 (==2.10.1)", "python-dotenv (==0.10.3)", "requests (==2.22.0)", "selenium (==3.141.0)"], "requires_python": "", "summary": "Human Framework: Test Automation Framework for Humans\u2122", "version": "0.6.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Human Framework: Test Automation Framework for Humans\u2122</h1>\n<blockquote>\n<p>NOTICE: Human Framework is still in the <strong>Proof-of-Concept</strong> stage</p>\n</blockquote>\n<blockquote>\n<p>CONTRIBUTE! I am releasing Human Framework under GPLv3 which makes it open source and free.</p>\n<p>Contribute by:</p>\n<ol>\n<li>Localization of training data (translation)</li>\n<li>Adding more intents and actions</li>\n<li>Reporting bugs</li>\n<li>Suggesting new features</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>NOTICE: I am working on a <a href=\"https://rasa.com/docs/rasa/nlu/about/\" rel=\"nofollow\">Rasa NLU</a> support</p>\n</blockquote>\n<p>Human Framework is a test automation framework designed for testers without software programming background by allowing them to write test steps or instructions in their own language like English.</p>\n<p>Human Framework uses Natural Language Understanding (NLU) for intent classification and entity extraction to be able to perform specific actions.\nIt currently depend on <a href=\"https://www.luis.ai/\" rel=\"nofollow\">Microsoft LUIS (Language Understanding)</a>.</p>\n<p>Below is an example of test instructions that Human Framework can understand.\nTo get an idea of what specific sentences are supported, check the the content of <code>trials</code> and <code>tests</code> folder.</p>\n<pre><code>Open chrome browser https://devpost.com\nPage title should be \"Devpost - The home for hackathons\"\nPage should contain link \"About\"\nClick link \"About\"\nPage title should be \"About us \u00b7 Devpost\"\nClose browser\n</code></pre>\n<p>LUIS (and other NLU tools) makes it possible to write test cases on any human language.\nCurrent version of Human Framework only supports English.</p>\n<p>Human Framework was inspired by <a href=\"https://robotframework.org/\" rel=\"nofollow\">Robot Framework</a> but leans towards\nNatural Language Processing (NLP) for writing test cases.</p>\n<p><strong>\"Human Framework is the Siri or Alexa of automation testing.\" (minus the voice, but it is possible in the future)</strong></p>\n<h2>How it works</h2>\n<p><img alt=\"Architecture\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3dbfd7eb272963ff67d0091a8367c868b3cea01a/696d616765732f6172636869746563747572652e706e67\"></p>\n<p>The architecture of Human Framework can be simplified into 2 steps- Intent Classification and Action Execution:</p>\n<ol>\n<li>Human Framework reads the test case files and then uses an Intent Classifier (e.g. LUIS.ai) to identify intents and entities.\nFor example, the sentence \"<strong>open chrome browser</strong>\" will be identified with the intent \"<strong>web.open_browser</strong>\" and entity \"<strong>chrome</strong>\" as the browser type.</li>\n<li>Human Framework then executes the action specific for the classified intent.\nFor example, the intent \"<strong>web.open_browser</strong>\" will use <a href=\"https://www.seleniumhq.org/\" rel=\"nofollow\">Selenium</a> to automate opening a chrome browser.</li>\n</ol>\n<h2>Usage / Installation</h2>\n<h3>Create an Azure account</h3>\n<ol>\n<li>\n<p>Go to <a href=\"https://portal.azure.com\" rel=\"nofollow\">Azure portal</a> and create an account.</p>\n</li>\n<li>\n<p>On the Azure portal dashboard, click <code>Create a resource</code>, look for <code>Cognitive Services</code> and click <code>Create</code></p>\n<p><img alt=\"Create a resource\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7dde48f22b73b9c2f5a4f216fc4039a7dd115147/696d616765732f6372656174652d612d7265736f757263652e504e47\"></p>\n<p><img alt=\"Search cognitive services\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/155591e64a9214666ed5d27ccadb2978eefae5dd/696d616765732f7365617263682d636f676e69746976652d73657276696365732e504e47\"></p>\n<p><img alt=\"Create cognitive service\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef843eb20ce83e36b7d394f8cb8e4a07e00c7f88/696d616765732f6372656174652d636f676e69746976652d73657276696365732e504e47\"></p>\n</li>\n<li>\n<p>Fill up form and click <code>Create</code> button</p>\n<p><img alt=\"Create cognitive service form\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f6ba3cd39ae67558741c2e2736fa48f9736a277f/696d616765732f666f726d2d636f676e69746976652d73657276696365732e504e47\"></p>\n</li>\n</ol>\n<h3>Create a LUIS.ai account</h3>\n<ol>\n<li>\n<p>Download the Human Framework training data from <a href=\"https://raw.githubusercontent.com/roniemartinez/HumanFramework/master/train/en.json\" rel=\"nofollow\">https://raw.githubusercontent.com/roniemartinez/HumanFramework/master/train/en.json</a> and save it with <code>.json</code> extension</p>\n</li>\n<li>\n<p>Go to <a href=\"https://luis.ai\" rel=\"nofollow\">LUIS.ai</a> and create an account</p>\n</li>\n<li>\n<p>Click <code>Import new app</code></p>\n<p><img alt=\"Import new app\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85cd5e653280cc1ce0e5a383dbe917cccb2f935c/696d616765732f696d706f72742d6e65772d6170702e504e47\"></p>\n</li>\n<li>\n<p>Click <code>Choose app file (JSON format) ...</code> and select the downloaded Human Framework training data</p>\n<p><img alt=\"Choose app file\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/353fec9e5c1c4ab2ae86c50dfafa0b56a8efd24e/696d616765732f63686f6f73652d6170702d66696c652e504e47\"></p>\n</li>\n<li>\n<p>Optionally, type your desired app name</p>\n<p><img alt=\"Done import new app\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f56c76fedb7c2179db9db75252bbbbce88fa5611/696d616765732f646f6e652d696d706f72742d6e65772d6170702e504e47\"></p>\n</li>\n<li>\n<p>Click <code>Done</code></p>\n</li>\n<li>\n<p>Click on the application you created.</p>\n</li>\n<li>\n<p>On the application dashboard, click <code>Train</code> to train your LUIS.ai app</p>\n</li>\n</ol>\n<h3>Connecting Azure account to LUIS.ai and publishing</h3>\n<ol>\n<li>\n<p>Click <code>MANAGE</code> &gt; <code>Azure Resources</code> &gt; <code>Add prediction resource</code></p>\n<p><img alt=\"Manage LUIS.ai\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09206171fb4b56ba27d602057423040c09e2cd1e/696d616765732f6d616e6167652d6c7569732e504e47\"></p>\n</li>\n<li>\n<p>Fill form</p>\n<p><img alt=\"Assign a resource to your app\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6da03cd25b0af88641bb64f768434371776e66f9/696d616765732f61737369676e2d612d7265736f757263652d746f2d796f75722d6170702e504e47\"></p>\n</li>\n<li>\n<p>Click <code>Publish</code>, select <code>Production</code> and then click the <code>Publish</code> button</p>\n<p><img alt=\"Publish LUIS.ai app\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f80c77b14d239bfd3f9a04450dfe0ce5094e1b0a/696d616765732f7075626c6973682d6170702e504e47\"></p>\n</li>\n<li>\n<p>Go back to <code>Azure Resources</code>. If you published your application to <code>Staging</code> environment, use <code>Change query parameters</code> to switch between environments.</p>\n<p><img alt=\"Copy Endpoint\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5f35c568f4599ac03fba8ab0ec549f5a837aa5d9/696d616765732f636f70792d656e64706f696e742e504e47\"></p>\n</li>\n<li>\n<p>Copy the endpoint assigned resource in #2</p>\n</li>\n</ol>\n<p><strong>NOTE: After copying the endpoint, enter it to a browser's address bar to make sure that it is accessible., Otherwise, repeat the steps or use the <code>Starter_Key</code> which will only give you 1000 API calls</strong></p>\n<h3>Installing Human Framework</h3>\n<p>Human Framework is written in Python 3. Start by downloading/installing Python from <a href=\"https://python.org\" rel=\"nofollow\">python.org</a>.</p>\n<p>To install Human Framework, enter the following command into the terminal/cmd:</p>\n<h4>Directly from Github</h4>\n<pre>pip install -e git+git@github.com:roniemartinez/HumanFramework.git#egg<span class=\"o\">=</span>humanframework\n</pre>\n<h4>From PyPI</h4>\n<pre>pip install humanframework\n</pre>\n<h3>Setting up Human Framework</h3>\n<p>Use the copied endpoint from LUIS.ai and setup Human Framework. Paste the endpoint enclosed in double quotes.</p>\n<pre>human config --luis-endpoint <span class=\"s2\">\"&lt;endpoint&gt;\"</span>\n</pre>\n<h3>Installing Drivers</h3>\n<p>Human Framework depends on <a href=\"https://www.seleniumhq.org/\" rel=\"nofollow\">Selenium</a> for testing web applications. Download your desired\n<a href=\"https://www.seleniumhq.org/about/platforms.jsp\" rel=\"nofollow\">webdriver</a> and extract them to your local working directory.</p>\n<h3>Writing tests</h3>\n<p>Write a text file (test_*.txt) containing your tests and save it to local working directory where you placed the Selenium Drivers.\nFor example, if we have a file named <code>test_web.txt</code>:</p>\n<pre>open chrome https://python.org\npage title should be \"Welcome to Python.org\"\nclose browser\n</pre>\n<h3>Running tests</h3>\n<p>To run the tests in <code>test_web.txt</code>, enter the following on the terminal/cmd:</p>\n<pre>human --test test_web.txt\n</pre>\n<h3>Test autodiscovery</h3>\n<p>Files inside the <code>trials</code> folder that starts with the text <code>test_</code> are automatically executed.</p>\n<pre>trials\n|- test_simple.txt\n|- test_simple_2.txt\n|- ...\n</pre>\n<p>With this structure, you can simply type <code>human</code> to run the test cases.</p>\n<h2>The future of Human Framework</h2>\n<ul>\n<li><strong>Integrated Editor</strong> - While testing was greatly simplified because Human Framework will just execute sentences,\nusing the terminal to install Python and several libraries is still more developer-centric.\nTo remove this technical requirement, another major goal of the Human Framework project is to release a\none-click installer which should include new features like an integrated IDE/Editor.\nThis will greatly increase tester's productivity.</li>\n<li><strong>Language Support</strong> - Not all testers use the English language. Supporting most languages will benefit more testers around the world.</li>\n<li><strong>NLU Options</strong> - While LUIS.ai is very simple to use and accurate compared to other Intent Classifiers, it is not cheap.\nTo support more testers, a free option like <a href=\"https://rasa.com/docs/rasa/nlu/about/\" rel=\"nofollow\">Rasa NLU</a> can be used as an alternative.</li>\n</ul>\n<h2>Limitations</h2>\n<p>I only implemented a few intents and actions for the proof-of-concept stage.\nTo know what are the possible tests that you can do with Human Framework, check the contents of <code>trials</code> and <code>tests</code> folders.</p>\n<h2>Author</h2>\n<ul>\n<li><a href=\"mailto:ronmarti18@gmail.com\">Ronie Martinez</a></li>\n</ul>\n\n          </div>"}, "last_serial": 5800412, "releases": {"0.6.0": [{"comment_text": "", "digests": {"md5": "a67393df6b6ab16662856367bef2ddab", "sha256": "7a4cd33a0ef522e57fa118063998b10ae836be4a6a20c1c5dbf5b60c82e7da99"}, "downloads": -1, "filename": "humanframework-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a67393df6b6ab16662856367bef2ddab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25726, "upload_time": "2019-09-08T01:48:28", "upload_time_iso_8601": "2019-09-08T01:48:28.949904Z", "url": "https://files.pythonhosted.org/packages/e5/6c/7aea88f2f43f0588b6b1163f45df6c89f59134933539509db64532fe99b4/humanframework-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4356e412ed926b42a59c39d6037a11f7", "sha256": "a458606b0ecab7a332e0dde82905c807233e5126bca89e54bd8751877a2c2884"}, "downloads": -1, "filename": "humanframework-0.6.0.tar.gz", "has_sig": false, "md5_digest": "4356e412ed926b42a59c39d6037a11f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13901, "upload_time": "2019-09-08T01:48:31", "upload_time_iso_8601": "2019-09-08T01:48:31.486750Z", "url": "https://files.pythonhosted.org/packages/16/70/260ac4a84824992fb3a3860d9d504f878d778f57d5842334e07c85ddd31e/humanframework-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "666fbe35f863f18c8c9e077e11d9ac0b", "sha256": "f2817b1cf3c7faa20c0c032a8b5b12204c71d8c6882b57a5c3ba9684cc2a18f6"}, "downloads": -1, "filename": "humanframework-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "666fbe35f863f18c8c9e077e11d9ac0b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25816, "upload_time": "2019-09-08T12:29:00", "upload_time_iso_8601": "2019-09-08T12:29:00.617828Z", "url": "https://files.pythonhosted.org/packages/c5/49/698bd8f6756cbdb1e28ecbc8cc95f690695135ee69130a3ed440baf7f171/humanframework-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32bbf21a5c0b8bc2c4dccb3ee8c2aab1", "sha256": "ea5199b13349f5e60a39d943568d38f8b027553eca28bd6758fb1ad091f6418a"}, "downloads": -1, "filename": "humanframework-0.6.1.tar.gz", "has_sig": false, "md5_digest": "32bbf21a5c0b8bc2c4dccb3ee8c2aab1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14103, "upload_time": "2019-09-08T12:29:01", "upload_time_iso_8601": "2019-09-08T12:29:01.802276Z", "url": "https://files.pythonhosted.org/packages/73/b0/29c757c81cf83913d554a86405b4d27ce9a4d7ffdcc4abce9546b207e594/humanframework-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "4c44f314a95b19ff42eb01425daa4ffb", "sha256": "26db4d4d1044e86762029d99d1da957141ceeccf5e1b7904ca74808c7e27508e"}, "downloads": -1, "filename": "humanframework-0.6.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4c44f314a95b19ff42eb01425daa4ffb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25870, "upload_time": "2019-09-08T20:21:14", "upload_time_iso_8601": "2019-09-08T20:21:14.105494Z", "url": "https://files.pythonhosted.org/packages/21/39/395db646c713c4df3c1d13e2f87e94aafebb447451cd2f76cee241881a5d/humanframework-0.6.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c32d6e7dbd517c58f284fd8aacf1ecc", "sha256": "6c5847926acb58d0f401413899b394641ca02b83025dcc44adf96f2fe77fa220"}, "downloads": -1, "filename": "humanframework-0.6.2.tar.gz", "has_sig": false, "md5_digest": "2c32d6e7dbd517c58f284fd8aacf1ecc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14229, "upload_time": "2019-09-08T20:21:15", "upload_time_iso_8601": "2019-09-08T20:21:15.602892Z", "url": "https://files.pythonhosted.org/packages/c0/44/dc82dc8b82c9e620c2a09c5538fbbfe5aba23aa85bb66ebc2caf6e4f8d31/humanframework-0.6.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4c44f314a95b19ff42eb01425daa4ffb", "sha256": "26db4d4d1044e86762029d99d1da957141ceeccf5e1b7904ca74808c7e27508e"}, "downloads": -1, "filename": "humanframework-0.6.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4c44f314a95b19ff42eb01425daa4ffb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25870, "upload_time": "2019-09-08T20:21:14", "upload_time_iso_8601": "2019-09-08T20:21:14.105494Z", "url": "https://files.pythonhosted.org/packages/21/39/395db646c713c4df3c1d13e2f87e94aafebb447451cd2f76cee241881a5d/humanframework-0.6.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c32d6e7dbd517c58f284fd8aacf1ecc", "sha256": "6c5847926acb58d0f401413899b394641ca02b83025dcc44adf96f2fe77fa220"}, "downloads": -1, "filename": "humanframework-0.6.2.tar.gz", "has_sig": false, "md5_digest": "2c32d6e7dbd517c58f284fd8aacf1ecc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14229, "upload_time": "2019-09-08T20:21:15", "upload_time_iso_8601": "2019-09-08T20:21:15.602892Z", "url": "https://files.pythonhosted.org/packages/c0/44/dc82dc8b82c9e620c2a09c5538fbbfe5aba23aa85bb66ebc2caf6e4f8d31/humanframework-0.6.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:53 2020"}