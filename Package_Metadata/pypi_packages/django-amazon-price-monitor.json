{"info": {"author": "Alexander Herrmann, Martin Mrose", "author_email": "django-amazon-price-monitor@googlegroups.com", "bugtrack_url": null, "classifiers": [], "description": "|Build Status| |codecov.io| |Code issues| |Requirements Status| |Stories in Ready| |Landscape|\n\n.. contents:: Table of Contents\n\ndjango-amazon-price-monitor\n===========================\n\nMonitors prices of Amazon products via Product Advertising API.\n\nBasic structure\n---------------\n\nThis is a reusable Django app that can be plugged into your project. It\nconsists basically of this parts:\n\n-  Models\n-  Frontend components\n-  Angular Frontend API\n-  Amazon API component\n\nModels\n~~~~~~\n\n-  Product\n\n   -  representation of an Amazon product\n\n-  Price\n\n   -  representation of a price of an Amazon product at a specific time\n\n-  Subscription\n\n   -  subscribe to a product at a specific price with an email\n      notification\n\nFrontend components\n~~~~~~~~~~~~~~~~~~~\n\nThe frontend displays all subscribed products with additional\ninformation and some graphs for price history.\n\nThe features are the following:\n\n-  list products\n-  show product details\n-  show product price graphs\n-  add subscriptions\n-  adjust subscription price value\n-  delete subscriptions\n\nAngular Frontend API\n~~~~~~~~~~~~~~~~~~~~\n\nSimply the API consumed by AngularJS, based on Django REST Framework.\n\nAmazon API component\n~~~~~~~~~~~~~~~~~~~~\n\nFetches product information from Amazon Product Advertising API through\nseveral tasks powered by Celery and weaves the data into the models.\n\nLicense\n-------\n\nThis software is licensed with the MIT license. So feel free to do with\nit whatever you like.\n\nSetup\n-----\n\nPrerequisites\n~~~~~~~~~~~~~\n\n+--------+-----+------------+-----+\n| Python | 3.3 | 3.4        | 3.5 |\n+========+=====+============+=====+\n| Django | 1.8 | 1.8 or 1.9 | 1.9 |\n+--------+-----+------------+-----+\n\nFor additional used packages see `setup.py <https://github.com/ponyriders/django-amazon-price-monitor/blob/master/setup.py#L23>`__.\n\nIncluded angular libraries\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  angular-django-rest-resource (`commit:\n   81d752b363668d674201c09d7a2ce6f418a44f13 <https://github.com/blacklocus/angular-django-rest-resource/tree/81d752b363668d674201c09d7a2ce6f418a44f13>`__)\n\nBasic setup\n~~~~~~~~~~~\n\nAdd the following apps to *INSTALLED\\_APPS*:\n\n::\n\n    INSTALLED_APPS = (\n        ...\n        'price_monitor',\n        'price_monitor.product_advertising_api',\n        'rest_framework',\n    )\n\nThen migrate:\n\n::\n\n    python manage.py migrate\n\nAdjust the settings appropiately, `see next chapter <#settings>`__.\n\nInclude the url configuration.\n\nSetup celery - you'll need the beat and a worker.\n\nSettings\n~~~~~~~~\n\n*The values of the following displayed settings are their default\nvalues. If the value is '...' then there is no default value.*\n\nMust have settings\n^^^^^^^^^^^^^^^^^^\n\nThe following settings are absolutely necessary to the price monitor\nrunning, please set them:\n\nCelery\n''''''\n\nYou need to have a broker and a result backend set.\n\n::\n\n    BROKER_URL = ...\n    CELERY_RESULT_BACKEND = ...\n\n    # some additional settings\n    CELERY_ACCEPT_CONTENT = ['pickle', 'json']\n    CELERY_CHORD_PROPAGATES = True\n\nRest-Framework\n''''''''''''''\n\nWe use Rest-Framework for Angular frontend:\n\n::\n\n    REST_FRAMEWORK = {\n        'PAGINATE_BY': 50,\n        'PAGINATE_BY_PARAM': 'page_size',\n        'MAX_PAGINATE_BY': 100,\n    }\n\nSite URL\n''''''''\nSpecify the base URL under which your site will be available. Defaults to: *http://localhost:8000*\nNecessary for creating links to the site within the notification emails.\n\n::\n\n    # base url to the site\n    PRICE_MONITOR_BASE_URL = 'https://....'\n\nAWS and Product Advertising API credentials\n'''''''''''''''''''''''''''''''''''''''''''\n\n::\n\n    # your Amazon Web Services access key id\n    PRICE_MONITOR_AWS_ACCESS_KEY_ID = '...'\n\n    # your Amazon Web Services secret access key\n    PRICE_MONITOR_AWS_SECRET_ACCESS_KEY = '...'\n\n    # the region endpoint you want to use.\n    # Typically the country you'll run the price monitor in.\n    # possible values: CA, CN, DE, ES, FR, IT, JP, UK, US\n    PRICE_MONITOR_AMAZON_PRODUCT_API_REGION = '...'\n\n    # the assoc tag of the Amazon Product Advertising API\n    PRICE_MONITOR_AMAZON_PRODUCT_API_ASSOC_TAG = '...'\n\nAmazon associates\n'''''''''''''''''\nAs the links to Amazon will be affiliate links with your Amazon associate tag (see above), you have to set your name for the disclaimer\n(see `https://partnernet.amazon.de/gp/associates/agreement <https://partnernet.amazon.de/gp/associates/agreement>`__).\n\n::\n\n    # name of you/your site\n    PRICE_MONITOR_AMAZON_ASSOCIATE_NAME = 'name/sitename'\n    # Amazon site being used, choose from on of the following\n        'Amazon.co.uk'\n        'Local.Amazon.co.uk'\n        'Amazon.de'\n        'de.BuyVIP.com'\n        'Amazon.fr'\n        'Amazon.it'\n        'it.BuyVIP.com'\n        'Amazon.es'\n        'es.BuyVIP.com'\n    PRICE_MONITOR_AMAZON_ASSOCIATE_SITE = '<ONE FROM ABOVE>'\n\n\nImages protocol and domain\n''''''''''''''''''''''''''\n\n::\n\n    # if to use the HTTPS URLs for Amazon images.\n    # if you're running the monitor on SSL, set this to True\n    # INFO:\n    #  Product images are served directly from Amazon.\n    #  This is a restriction when using the Amazon Product Advertising API\n    PRICE_MONITOR_IMAGES_USE_SSL = True\n\n    # domain to use for image serving.\n    # typically analog to the api region following the URL pattern\n    #  https://images-<REGION>.ssl-images-amazon.com\n    PRICE_MONITOR_AMAZON_SSL_IMAGE_DOMAIN = 'https://images-eu.ssl-images-amazon.com'\n\nOptional settings\n^^^^^^^^^^^^^^^^^\n\nThe following settings can be adjusted but come with reasonable default\nvalues.\n\nProduct synchronization\n'''''''''''''''''''''''\n\n::\n\n    # time after which products shall be refreshed\n    # Amazon only allows caching up to 24 hours, so the maximum value is 1440!\n    PRICE_MONITOR_AMAZON_PRODUCT_REFRESH_THRESHOLD_MINUTES = 720  # 12 hours\n\nNotifications\n'''''''''''''\n\nTo be able to send out the notification emails, set up a proper email\nbackend (see `Django\ndocumentation <https://docs.djangoproject.com/en/1.5/topics/email/#topic-email-backends>`__).\n\n::\n\n    # time after which to notify the user again about a price limit hit (in minutes)\n    PRICE_MONITOR_SUBSCRIPTION_RENOTIFICATION_MINUTES = 10080  # 7 days\n\n    # sender address of the notification email\n    PRICE_MONITOR_EMAIL_SENDER = 'noreply@localhost'\n\n    # currency name to use on notifications\n    PRICE_MONITOR_DEFAULT_CURRENCY = 'EUR'\n\n    # subject and body of the notification emails\n    gettext = lambda x: x\n    PRICE_MONITOR_I18N_EMAIL_NOTIFICATION_SUBJECT = gettext(\n        'Price limit for %(product)s reached'\n    )\n    PRICE_MONITOR_I18N_EMAIL_NOTIFICATION_BODY = gettext(\n        'The price limit of %(price_limit)0.2f %(currency)s has been reached for the '\n        'article \"%(product_title)s\" - the current price is %(price)0.2f %(currency)s.'\n        '\\n\\nPlease support our platform by using this '\n        'link for buying: %(link)s\\n\\n\\nRegards,\\nThe Team'\n    )\n\n    # name of the site in notifications\n    PRICE_MONITOR_SITENAME = 'Price Monitor'\n\nCaching\n'''''''\n\n::\n\n    # key of cache (according to project config) to use for graphs\n    # None disables caching.\n    PRICE_MONITOR_GRAPH_CACHE_NAME = None\n\n    # prefix for cache key used for graphs\n    PRICE_MONITOR_GRAPH_CACHE_KEY_PREFIX = 'graph_'\n\nCelery settings\n~~~~~~~~~~~~~~~\n\nTo be able to run the required Celery tasks, Celery itself has to be set\nup. Please see the `Celery\nDocumentation <http://docs.celeryproject.org/en/latest/index.html>`__\nabout how to setup the whole thing. You'll need a broker and a result\nbackend configured.\n\nDevelopment setup with Docker\n-----------------------------\nThe package comes with an easy to use Docker setup - you just need ``docker`` and ``docker-compose``.\nThe setup is nearly similar to the one of `treasury <https://github.com/dArignac/treasury>`__ ( a project by `darignac <https://github.com/dArignac>`__), you\ncan read the `documentation <http://treasury.readthedocs.org/en/latest/installation/docker.html>`__ there to get a better insight.\n\nStructure\n~~~~~~~~~\nThere are 5 containers:\n\n====== =======================================================================\ndb     Postgres database\n------ -----------------------------------------------------------------------\nredis  Celery broker\n------ -----------------------------------------------------------------------\nweb    a django project containing the ``django-amazon-price-monitor`` package\n------ -----------------------------------------------------------------------\ncelery the celery for the django project\n------ -----------------------------------------------------------------------\ndata   container for mounted volumes\n====== =======================================================================\n\nThe ``web`` and ``celery`` containers are using a docker image being set up under ``docker/web``.\n\nImage: base\n^^^^^^^^^^^\nBasic image with all necessary system packages and pre-installed ``lxml`` and ``psycopg2``.\nThe image can be found on `Docker Hub <https://hub.docker.com/r/pricemonitor/base/>`__.\n\nImage: web\n^^^^^^^^^^\nIt comes with a Django project with login/logout view, that can be found under ``docker/web/project``.\nThe image derives from ``pricemonitor/base`` from above.\n\nThe directory structure within the container is the following (base dir: ``/srv/``):\n::\n\n\troot:/srv tree\n\t\u251c\u2500\u2500 logs\t\t[log files]\n\t\u251c\u2500\u2500 media\t\t[media files]\n\t\u251c\u2500\u2500 project\t\t[the django project]\n\t\u251c\u2500\u2500 static\t\t[static files]\n\t\u2514\u2500\u2500 pricemonitor\t[the pricemonitor package]\n\nStarts via the start script ``docker/web/web_run.sh`` that does migrations and the starts the ``runserver``.\n\nImage: celery\n^^^^^^^^^^^^^\nBasically the same as ``web``, but starts the Celery worker with beat.\n\nIf you want to develop anything involving tasks, see the `Usage <_docker-usage-override-settings>`__ section below.\n\nImage: data\n^^^^^^^^^^^\nThe ``data`` container mounts several paths:\n\n+--------------------------+----------------------------------+----------------------------------------------------+\n| Folder in container      | Folder on host                   | Information                                        |\n+==========================+==================================+====================================================+\n| /var/lib/postgresql/data | <PROJECTROOT>/docker/postgres    | * Postgres data directory                          |\n|                          |                                  | * Keeps the DB data even if container is removed   |\n+--------------------------+----------------------------------+----------------------------------------------------+\n| /srv/logs                | <PROJECTROOT>/docker/logs        | Django logs (see project settings)                 |\n+--------------------------+----------------------------------+----------------------------------------------------+\n| /srv/media               | <PROJECTROOT>/docker/media       | Django media files                                 |\n+--------------------------+----------------------------------+----------------------------------------------------+\n| /srv/project             | <PROJECTROOT>/docker/web/project | * the Django project                               |\n|                          |                                  | * is copied on Dockerfile to get it up and running |\n|                          |                                  | * then mounted over (the copy is overwritten)      |\n+--------------------------+----------------------------------+----------------------------------------------------+\n| /srv/pricemonitor        | <PROJECTROOT>                    | * the ``django-amazon-price-monitor`` lib          |\n|                          |                                  | * is copied on Dockerfile to get it up and running |\n|                          |                                  | * then mounted over (the copy is overwritten)      |\n+--------------------------+----------------------------------+----------------------------------------------------+\n\nUsage\n~~~~~\n\n.. _docker-usage-override-settings:\n\nOverride settings\n^^^^^^^^^^^^^^^^^\nTo override some settings as well as to set up the **required AWS settings** you can create a ``docker-compose.override.yml`` and fill with the specific values\n(also see `docker-compose documentation <https://docs.docker.com/compose/extends/>`__).\n\nPlease see or adjust the ``docker\\web\\project\\settings.py`` for all settings that are read from the environment. They can be overwritten.\n\nA sample ``docker-compose.override.yml`` file could look like this:\n::\n\n\tversion: '2'\n\tservices:\n\t  celery:\n\t\tcommand: /bin/true\n\t\tenvironment:\n\t\t  PRICE_MONITOR_AWS_ACCESS_KEY_ID: XXX\n\t\t  PRICE_MONITOR_AWS_SECRET_ACCESS_KEY: XXX\n\t\t  PRICE_MONITOR_AMAZON_PRODUCT_API_REGION: DE\n\t\t  PRICE_MONITOR_AMAZON_PRODUCT_API_ASSOC_TAG: XXX\n\t\t  PRICE_MONITOR_AMAZON_PRODUCT_REFRESH_THRESHOLD_MINUTES: 5\n\t\t  PRICE_MONITOR_SUBSCRIPTION_RENOTIFICATION_MINUTES: 60\n\nIt will avoid the automatic startup of celery (``command: /bin/true``) and set the required settings for AWS (in fact they are only needed in the celery\ncontainer). You can then manually start the container and execute celery which is quite useful if you develop anything that includes changes in the tasks and\nthus requires the celery to be restarted (execute from the ``docker`` folder!):\n::\n\n\talex@tyrion:~/projects/github/django-amazon-price-monitor/docker$ docker-compose run celery bash\n\tStarting docker_data_1\n\n\n\t# check environment variables\n\n\troot@9d64bbd23e98:/srv/project# env\n\tHOSTNAME=9d64bbd23e98\n\tEMAIL_BACKEND=django.core.mail.backends.filebased.EmailBackend\n\tPOSTGRES_DB=pm_db\n\tTERM=xterm\n\tPYTHONUNBUFFERED=1\n\tPRICE_MONITOR_SUBSCRIPTION_RENOTIFICATION_MINUTES=60\n\tPOSTGRES_PASSWORD=6i2vmzq5C6BuSf5k33A6tmMSHwKKv0Pu\n\tPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\tSECRET_KEY=Vceev7yWMtEQzHaTZX52\n\tPWD=/srv/project\n\tBROKER_URL=redis://redis/1\n\tC_FORCE_ROOT='True'\n\tPRICE_MONITOR_AWS_SECRET_ACCESS_KEY=XXX\n\tPOSTGRES_USER=pm_user\n\tSHLVL=1\n\tHOME=/root\n\tPRICE_MONITOR_AMAZON_PRODUCT_REFRESH_THRESHOLD_MINUTES=5\n\tPRICE_MONITOR_AMAZON_PRODUCT_API_REGION=DE\n\tPRICE_MONITOR_AMAZON_PRODUCT_API_ASSOC_TAG=XXX\n\tDEBUG='True'\n\tPRICE_MONITOR_AWS_ACCESS_KEY_ID=XXX\n\t_=/usr/bin/env\n\n\n\t# start celery (worker and beat) (can also execute /srv/celery_run.sh)\n\n\troot@9d64bbd23e98:/srv/project# celery --beat -A glue worker\n\n\t -------------- celery@9d64bbd23e98 v3.1.23 (Cipater)\n\t---- **** -----\n\t--- * ***  * -- Linux-3.16.0-4-amd64-x86_64-with-debian-8.0\n\t-- * - **** ---\n\t- ** ---------- [config]\n\t- ** ---------- .> app:         glue:0x7fc6b5269e10\n\t- ** ---------- .> transport:   redis://redis:6379/1\n\t- ** ---------- .> results:     disabled://\n\t- *** --- * --- .> concurrency: 8 (prefork)\n\t-- ******* ----\n\t--- ***** ----- [queues]\n\t -------------- .> celery           exchange=celery(direct) key=celery\n\n\t[2016-03-20 10:02:26,776: WARNING/MainProcess] celery@9d64bbd23e98 ready.\n\n\nStart/Stop/Build\n^^^^^^^^^^^^^^^^\nUse the make file to execute the most common tasks. It will execute ``docker-compose`` with the project name ``pm`` resulting in the container's name pattern\n``pm_*``.\n::\n\n\tdocker-build-base: - builds the base docker image\n\tdocker-build-web:  - builds the web docker image\n\tdocker-up:         - uses docker-compose to bring the containers up\n\tdocker-stop:       - uses docker-compose to stop the containers\n\tdocker-ps:         - runs docker-compose ps\n\nA fixture with a Django user ``admin`` and the password ``password`` is loaded automatically.\n\nTemplates\n---------\nAs the fronted is done by Angular, there is only a single template with very limited possibilities to adjust, ``price_monitor/angular_index_view.html``. You\ncan extends the template and adjust the following blocks.\n\nfooter\n~~~~~~\nIs rendered on the very bottom of the page. You have to use Bootstrap compatible markup, e.g.:\n::\n\n\t{% block footer %}\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">Additonal footer</div>\n\t\t</div>\n\t{% endblock %}\n\nManagement Commands\n-------------------\n\nprice\\_monitor\\_batch\\_create\\_products\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA management command to batch create a number of products by providing\ntheir ASIN:\n\n::\n\n    python manage.py price_monitor_batch_create_products <ASIN1> <ASIN2> <ASIN3>\n\nprice\\_monitor\\_recreate\\_product\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRecreates a product with the given asin. If product already exists, it\nis deleted. *Only use in development!*\n\n::\n\n    python manage.py price_monitor_recreate_product <ASIN>\n\nprice\\_monitor\\_search\n~~~~~~~~~~~~~~~~~~~~~~\n\nSearches for products at Amazon (not within the database) with the given\nASINs and prints out their details.\n\n::\n\n    python manage.py price_monitor_search <ASIN1> <ASIN2> ...\n\nLoggers\n-------\n\nprice\\_monitor\n~~~~~~~~~~~~~~\n\nThe app uses the logger \"price\\_monitor\" to log all error and info\nmessages that are not included within a dedicated other logger. Please\nsee the `Django logging\ndocumentation <https://docs.djangoproject.com/en/1.6/topics/logging/>`__\nfor how to setup loggers.\n\nprice\\_monitor.product\\_advertising\\_api\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLogger for everything related to the ProductAdvertisingAPI wrapper class\nthat accesses the Amazon Product Advertising API through bottlenose.\n\nprice\\_monitor.utils\n~~~~~~~~~~~~~~~~~~~~\n\nLogger for the utils module.\n\nTests\n-----\n\nCoverage\n~~~~~~~~\n\n|codecov-graph|\n\nInternals\n---------\n\nModel graph\n~~~~~~~~~~~\n\n.. figure:: https://github.com/ponyriders/django-amazon-price-monitor/raw/master/models.png\n   :alt: Model Graph\n\nProduct advertising api synchronization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTask workflow\n^^^^^^^^^^^^^\n\n.. figure:: https://raw.githubusercontent.com/ponyriders/django-amazon-price-monitor/master/docs/price_monitor.product_advertising_api.tasks.png\n    :alt: Image of Product advertising api synchronization workflow\n\nImage of Product advertising api synchronization workflow\n\n.. |Build Status| image:: https://travis-ci.org/ponyriders/django-amazon-price-monitor.svg?branch=master\n    :target: https://travis-ci.org/ponyriders/django-amazon-price-monitor\n.. |codecov.io| image:: http://codecov.io/github/ponyriders/django-amazon-price-monitor/coverage.svg?branch=master\n    :target: http://codecov.io/github/ponyriders/django-amazon-price-monitor?branch=master\n.. |codecov-graph| image:: http://codecov.io/github/ponyriders/django-amazon-price-monitor/branch.svg?branch=master\n.. |Requirements Status| image:: https://requires.io/github/ponyriders/django-amazon-price-monitor/requirements.svg?branch=master\n    :target: https://requires.io/github/ponyriders/django-amazon-price-monitor/requirements/?branch=master\n.. |Stories in Ready| image:: https://badge.waffle.io/ponyriders/django-amazon-price-monitor.png?label=ready&title=Ready\n    :target: https://waffle.io/ponyriders/django-amazon-price-monitor\n.. |Code issues| image:: https://www.quantifiedcode.com/api/v1/project/67cad011c255435388ef61f3b8e018a1/badge.svg\n    :target: https://www.quantifiedcode.com/app/project/67cad011c255435388ef61f3b8e018a1\n.. |Landscape| image:: https://landscape.io/github/ponyriders/django-amazon-price-monitor/master/landscape.svg?style=flat\n    :target: https://landscape.io/github/ponyriders/django-amazon-price-monitor/master\n    :alt: Code Health\n\n\nChange Log\n==========\n\n`0.7 <https://pypi.python.org/pypi/django-amazon-price-monitor/0.7>`__\n----------------------------------------------------------------------\n**Features:**\n\n- footer can now be extended through template block *footer*\n- product addition in frontend improved `#79 <https://github.com/ponyriders/django-amazon-price-monitor/issues/79>`__ (`PR#104 <https://github.com/ponyriders/django-amazon-price-monitor/pull/104>`__)\n- removed ``urlpatterns`` to please Django 1.10 deprecation\n- added docker setup for development (`PR#101 <https://github.com/ponyriders/django-amazon-price-monitor/pull/101>`__)\n- list products with audience rating 18+ in notification mail if region is Germany and product is also 18+ `#92 <https://github.com/ponyriders/django-amazon-price-monitor/issues/92>`__ (`PR#93 <https://github.com/ponyriders/django-amazon-price-monitor/pull/93>`__)\n\n**Bugfixes:**\n\n- now catching parsing errors of returned XML from Amazon API `#96 <https://github.com/ponyriders/django-amazon-price-monitor/issues/96>`__\n- fixed date range of displayed prices in price graph `#90 <https://github.com/ponyriders/django-amazon-price-monitor/issues/90>`__\n- fixed display of old prices of price graph `#97 <https://github.com/ponyriders/django-amazon-price-monitor/issues/97>`__\n- updated to latest ``python-dateutil`` version, somehow refs `#95 <https://github.com/ponyriders/django-amazon-price-monitor/issues/95>`__\n\n`0.6.1 <https://pypi.python.org/pypi/django-amazon-price-monitor/0.6.1>`__\n--------------------------------------------------------------------------\n**Bugfixes:**\n\n- StartupTask fails with exception `#94 <https://github.com/ponyriders/django-amazon-price-monitor/issues/94>`__\n- Tests fail if today is the last day of November `#95 <https://github.com/ponyriders/django-amazon-price-monitor/issues/95>`__\n\n`0.6 <https://pypi.python.org/pypi/django-amazon-price-monitor/0.6>`__\n----------------------------------------------------------------------\n**Features:**\n\n- djangorestframework 3.2 compatibility `#86 <https://github.com/ponyriders/django-amazon-price-monitor/issues/86>`__ (`PR#88 <https://github.com/ponyriders/django-amazon-price-monitor/pull/88>`__)\n\n**Bugfixes:**\n\n- FindProductsToSynchronizeTask is rescheduled twice or more `#89 <https://github.com/ponyriders/django-amazon-price-monitor/issues/89>`__ (`PR#91 <https://github.com/ponyriders/django-amazon-price-monitor/pull/91>`__)\n- Unable to parse 2015-02 to a datetime `#57 <https://github.com/ponyriders/django-amazon-price-monitor/issues/57>`__\n- lots of codestyle\n- minor bugfixes\n\n`0.5 <https://pypi.python.org/pypi/django-amazon-price-monitor/0.5>`__\n----------------------------------------------------------------------\n**Features:**\n\n- Add link to PM frontend in notification email `#76 <https://github.com/ponyriders/django-amazon-price-monitor/issues/76>`__\n- Django 1.9 support (see `pull request #80 <https://github.com/ponyriders/django-amazon-price-monitor/pull/80>`__)\n\n**Bugfixes:**\n\n- FindProductsToSynchronizeTask is not always rescheduled `#61 <https://github.com/ponyriders/django-amazon-price-monitor/issues/61>`__\n- Font files not included in package `#75 <https://github.com/ponyriders/django-amazon-price-monitor/issues/75>`__\n- Identify as Amazon associate `#77 <https://github.com/ponyriders/django-amazon-price-monitor/issues/77>`__\n\n**Pull requests:**\n\n- Ensured that FindProductsToSynchronizeTask will be scheduled `#78 <https://github.com/ponyriders/django-amazon-price-monitor/pull/78>`__ (`dArignac <https://github.com/dArignac>`__)\n- Django 1.9 support `#80 <https://github.com/ponyriders/django-amazon-price-monitor/pull/80>`__ (`dArignac <https://github.com/dArignac>`__)\n\n`0.4 <https://pypi.python.org/pypi/django-amazon-price-monitor/0.4>`__\n----------------------------------------------------------------------\n**Features:**\n\n- Deprecate old frontend `#73 <https://github.com/ponyriders/django-amazon-price-monitor/issues/73>`__\n- Make angular the default frontend `#70 <https://github.com/ponyriders/django-amazon-price-monitor/issues/70>`__\n\n**Bugfixes:**\n\n- Products with the same price over graph timespae have an empty graph `#67 <https://github.com/ponyriders/django-amazon-price-monitor/issues/67>`__\n- Notification of music albums `#33 <https://github.com/ponyriders/django-amazon-price-monitor/issues/33>`__\n- Add artist for audio products `#71 <https://github.com/ponyriders/django-amazon-price-monitor/pull/71>`__\n\n**Pull requests:**\n\n- Remove old frontend `#74 <https://github.com/ponyriders/django-amazon-price-monitor/pull/74>`__ (`dArignac <https://github.com/dArignac>`__)\n- Fix for empty graphs is packaged now #67 `#72 <https://github.com/ponyriders/django-amazon-price-monitor/pull/72>`__ (`mmrose <https://github.com/mmrose>`__)\n\n`0.3b2 <https://pypi.python.org/pypi/django-amazon-price-monitor/0.3b2>`__\n--------------------------------------------------------------------------\n**Features:**\n\n- Prepare for automatic releases `#68 <https://github.com/ponyriders/django-amazon-price-monitor/issues/68>`__\n- Increase performance of Amazon calls `#41 <https://github.com/ponyriders/django-amazon-price-monitor/issues/41>`__\n- Django 1.8 compatibility `#32 <https://github.com/ponyriders/django-amazon-price-monitor/issues/32>`__\n- Data reduction and clean up `#27 <https://github.com/ponyriders/django-amazon-price-monitor/issues/27>`__\n- Limit graphs `#26 <https://github.com/ponyriders/django-amazon-price-monitor/issues/26>`__\n- Show highest and lowest price ever `#25 <https://github.com/ponyriders/django-amazon-price-monitor/issues/25>`__\n- Implement a full-usable frontend`#8 <https://github.com/ponyriders/django-amazon-price-monitor/issues/8>`__\n- Add more tests `#2 <https://github.com/ponyriders/django-amazon-price-monitor/issues/2>`__\n\n**Bugfixes:**\n\n- Graphs empty for some products `#65 <https://github.com/ponyriders/django-amazon-price-monitor/issues/65>`__\n- Don't show other peoples price limits `#63 <https://github.com/ponyriders/django-amazon-price-monitor/issues/63>`__\n- Graphs do not render correct values `#60 <https://github.com/ponyriders/django-amazon-price-monitor/issues/60>`__\n- 'NoneType' object has no attribute 'url' `#59 <https://github.com/ponyriders/django-amazon-price-monitor/issues/59>`__\n- Rename SynchronizeSingleProductTask `#56 <https://github.com/ponyriders/django-amazon-price-monitor/issues/56>`__\n- Sync on product creation not working `#55 <https://github.com/ponyriders/django-amazon-price-monitor/issues/55>`__\n- Clear old products and prices `#47 <https://github.com/ponyriders/django-amazon-price-monitor/issues/47>`__\n- Deleting a product subscription does not remove it from list view `#42 <https://github.com/ponyriders/django-amazon-price-monitor/issues/42>`__\n- Endless synchronization queue `#38 <https://github.com/ponyriders/django-amazon-price-monitor/issues/38>`__\n- Mark unavailable products `#14 <https://github.com/ponyriders/django-amazon-price-monitor/issues/14>`__\n\n**Closed issues:**\n\n- Unpin beautifulsoup4==4.3.2 `#50 <https://github.com/ponyriders/django-amazon-price-monitor/issues/50>`__\n\n**Pull requests:**\n\n- fixed access of unavilable image urls #59 `#66 <https://github.com/ponyriders/django-amazon-price-monitor/pull/66>`__ (`dArignac <https://github.com/dArignac>`__)\n- 63 subscriptions of other users `#64 <https://github.com/ponyriders/django-amazon-price-monitor/pull/64>`__ (`mmrose <https://github.com/mmrose>`__)\n- Mark unavailable products `#62 <https://github.com/ponyriders/django-amazon-price-monitor/pull/62>`__ (`mmrose <https://github.com/mmrose>`__)\n- Sync on product creation not working `#58 <https://github.com/ponyriders/django-amazon-price-monitor/pull/58>`__ (`dArignac <https://github.com/dArignac>`__)\n- Products are now requeried after deletion in list view #42 `#54 <https://github.com/ponyriders/django-amazon-price-monitor/pull/54>`__ (`mmrose <https://github.com/mmrose>`__)\n- Show highest and lowest price (#25) `#53 <https://github.com/ponyriders/django-amazon-price-monitor/pull/53>`__ (`mmrose <https://github.com/mmrose>`__)\n- Now the new FKs are also set during sync #25 `#52 <https://github.com/ponyriders/django-amazon-price-monitor/pull/52>`__ (`mmrose <https://github.com/mmrose>`__)\n- Adding datamigration for new min, max and current price FKs #25 `#51 <https://github.com/ponyriders/django-amazon-price-monitor/pull/51>`__ (`mmrose <https://github.com/mmrose>`__)\n- Performance improvements on product API view `#49 <https://github.com/ponyriders/django-amazon-price-monitor/pull/49>`__ (`mmrose <https://github.com/mmrose>`__)\n- Remove unused data`#48 <https://github.com/ponyriders/django-amazon-price-monitor/pull/48>`__ (`dArignac <https://github.com/dArignac>`__)\n- Amazon query performance increase `#46 <https://github.com/ponyriders/django-amazon-price-monitor/pull/46>`__ (`dArignac <https://github.com/dArignac>`__)\n- Django 1.8 compatibility `#45 <https://github.com/ponyriders/django-amazon-price-monitor/pull/45>`__ (`dArignac <https://github.com/dArignac>`__)\n- Bugfix: Endless queue `#40 <https://github.com/ponyriders/django-amazon-price-monitor/pull/40>`__ (`dArignac <https://github.com/dArignac>`__)\n- waffle.io Badge `#37 <https://github.com/ponyriders/django-amazon-price-monitor/pull/37>`__ (`waffle-iron <https://github.com/waffle-iron>`__)\n\nPre-Releases\n------------\n- unfortunately everything before was not packaged and released nor tracked.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ponyriders/django-amazon-price-monitor", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-amazon-price-monitor", "package_url": "https://pypi.org/project/django-amazon-price-monitor/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-amazon-price-monitor/", "project_urls": {"Homepage": "https://github.com/ponyriders/django-amazon-price-monitor"}, "release_url": "https://pypi.org/project/django-amazon-price-monitor/0.7/", "requires_dist": ["Django (>=1.8,<1.10)", "beautifulsoup4", "bottlenose (>=0.6.2)", "celery (>=3)", "python-dateutil (>=2.5.1)", "djangorestframework (>=3.3)", "pygal (>=2.0.7)", "lxml", "CairoSVG", "tinycss", "cssselect"], "requires_python": "", "summary": "Monitors prices of Amazon products via Product Advertising API", "version": "0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/ponyriders/django-amazon-price-monitor\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eefc18a63e7304315b2e8df1df659be9f3e7986b/68747470733a2f2f7472617669732d63692e6f72672f706f6e797269646572732f646a616e676f2d616d617a6f6e2d70726963652d6d6f6e69746f722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://codecov.io/github/ponyriders/django-amazon-price-monitor?branch=master\" rel=\"nofollow\"><img alt=\"codecov.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b31ec3b48cc44f96ba1b5476f104a3918cb78433/687474703a2f2f636f6465636f762e696f2f6769746875622f706f6e797269646572732f646a616e676f2d616d617a6f6e2d70726963652d6d6f6e69746f722f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://www.quantifiedcode.com/app/project/67cad011c255435388ef61f3b8e018a1\" rel=\"nofollow\"><img alt=\"Code issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8da6af3453b9831e3bf9f88717d6ea7ccb73b346/68747470733a2f2f7777772e7175616e746966696564636f64652e636f6d2f6170692f76312f70726f6a6563742f36376361643031316332353534333533383865663631663362386530313861312f62616467652e737667\"></a> <a href=\"https://requires.io/github/ponyriders/django-amazon-price-monitor/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Requirements Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78567747e26405f98e533354c6eb37ade957ba44/68747470733a2f2f72657175697265732e696f2f6769746875622f706f6e797269646572732f646a616e676f2d616d617a6f6e2d70726963652d6d6f6e69746f722f726571756972656d656e74732e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://waffle.io/ponyriders/django-amazon-price-monitor\" rel=\"nofollow\"><img alt=\"Stories in Ready\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aedb4844068587e24b4cdcd7b6e598f4df9cde7f/68747470733a2f2f62616467652e776166666c652e696f2f706f6e797269646572732f646a616e676f2d616d617a6f6e2d70726963652d6d6f6e69746f722e706e673f6c6162656c3d7265616479267469746c653d5265616479\"></a> <a href=\"https://landscape.io/github/ponyriders/django-amazon-price-monitor/master\" rel=\"nofollow\"><img alt=\"Code Health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9004c86180c2c3ba40e6ab1d4a04bc85c5253b0/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f706f6e797269646572732f646a616e676f2d616d617a6f6e2d70726963652d6d6f6e69746f722f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a></p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#django-amazon-price-monitor\" id=\"id6\" rel=\"nofollow\">django-amazon-price-monitor</a><ul>\n<li><a href=\"#basic-structure\" id=\"id7\" rel=\"nofollow\">Basic structure</a><ul>\n<li><a href=\"#models\" id=\"id8\" rel=\"nofollow\">Models</a></li>\n<li><a href=\"#frontend-components\" id=\"id9\" rel=\"nofollow\">Frontend components</a></li>\n<li><a href=\"#angular-frontend-api\" id=\"id10\" rel=\"nofollow\">Angular Frontend API</a></li>\n<li><a href=\"#amazon-api-component\" id=\"id11\" rel=\"nofollow\">Amazon API component</a></li>\n</ul>\n</li>\n<li><a href=\"#license\" id=\"id12\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#setup\" id=\"id13\" rel=\"nofollow\">Setup</a><ul>\n<li><a href=\"#prerequisites\" id=\"id14\" rel=\"nofollow\">Prerequisites</a></li>\n<li><a href=\"#included-angular-libraries\" id=\"id15\" rel=\"nofollow\">Included angular libraries</a></li>\n<li><a href=\"#basic-setup\" id=\"id16\" rel=\"nofollow\">Basic setup</a></li>\n<li><a href=\"#settings\" id=\"id17\" rel=\"nofollow\">Settings</a><ul>\n<li><a href=\"#must-have-settings\" id=\"id18\" rel=\"nofollow\">Must have settings</a><ul>\n<li><a href=\"#celery\" id=\"id19\" rel=\"nofollow\">Celery</a></li>\n<li><a href=\"#rest-framework\" id=\"id20\" rel=\"nofollow\">Rest-Framework</a></li>\n<li><a href=\"#site-url\" id=\"id21\" rel=\"nofollow\">Site URL</a></li>\n<li><a href=\"#aws-and-product-advertising-api-credentials\" id=\"id22\" rel=\"nofollow\">AWS and Product Advertising API credentials</a></li>\n<li><a href=\"#amazon-associates\" id=\"id23\" rel=\"nofollow\">Amazon associates</a></li>\n<li><a href=\"#images-protocol-and-domain\" id=\"id24\" rel=\"nofollow\">Images protocol and domain</a></li>\n</ul>\n</li>\n<li><a href=\"#optional-settings\" id=\"id25\" rel=\"nofollow\">Optional settings</a><ul>\n<li><a href=\"#product-synchronization\" id=\"id26\" rel=\"nofollow\">Product synchronization</a></li>\n<li><a href=\"#notifications\" id=\"id27\" rel=\"nofollow\">Notifications</a></li>\n<li><a href=\"#caching\" id=\"id28\" rel=\"nofollow\">Caching</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#celery-settings\" id=\"id29\" rel=\"nofollow\">Celery settings</a></li>\n</ul>\n</li>\n<li><a href=\"#development-setup-with-docker\" id=\"id30\" rel=\"nofollow\">Development setup with Docker</a><ul>\n<li><a href=\"#structure\" id=\"id31\" rel=\"nofollow\">Structure</a><ul>\n<li><a href=\"#image-base\" id=\"id32\" rel=\"nofollow\">Image: base</a></li>\n<li><a href=\"#image-web\" id=\"id33\" rel=\"nofollow\">Image: web</a></li>\n<li><a href=\"#image-celery\" id=\"id34\" rel=\"nofollow\">Image: celery</a></li>\n<li><a href=\"#image-data\" id=\"id35\" rel=\"nofollow\">Image: data</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" id=\"id36\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#override-settings\" id=\"id37\" rel=\"nofollow\">Override settings</a></li>\n<li><a href=\"#start-stop-build\" id=\"id38\" rel=\"nofollow\">Start/Stop/Build</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#templates\" id=\"id39\" rel=\"nofollow\">Templates</a><ul>\n<li><a href=\"#footer\" id=\"id40\" rel=\"nofollow\">footer</a></li>\n</ul>\n</li>\n<li><a href=\"#management-commands\" id=\"id41\" rel=\"nofollow\">Management Commands</a><ul>\n<li><a href=\"#price-monitor-batch-create-products\" id=\"id42\" rel=\"nofollow\">price_monitor_batch_create_products</a></li>\n<li><a href=\"#price-monitor-recreate-product\" id=\"id43\" rel=\"nofollow\">price_monitor_recreate_product</a></li>\n<li><a href=\"#price-monitor-search\" id=\"id44\" rel=\"nofollow\">price_monitor_search</a></li>\n</ul>\n</li>\n<li><a href=\"#loggers\" id=\"id45\" rel=\"nofollow\">Loggers</a><ul>\n<li><a href=\"#price-monitor\" id=\"id46\" rel=\"nofollow\">price_monitor</a></li>\n<li><a href=\"#price-monitor-product-advertising-api\" id=\"id47\" rel=\"nofollow\">price_monitor.product_advertising_api</a></li>\n<li><a href=\"#price-monitor-utils\" id=\"id48\" rel=\"nofollow\">price_monitor.utils</a></li>\n</ul>\n</li>\n<li><a href=\"#tests\" id=\"id49\" rel=\"nofollow\">Tests</a></li>\n<li><a href=\"#internals\" id=\"id50\" rel=\"nofollow\">Internals</a><ul>\n<li><a href=\"#model-graph\" id=\"id51\" rel=\"nofollow\">Model graph</a></li>\n<li><a href=\"#product-advertising-api-synchronization\" id=\"id52\" rel=\"nofollow\">Product advertising api synchronization</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#change-log\" id=\"id53\" rel=\"nofollow\">Change Log</a><ul>\n<li><a href=\"#id1\" id=\"id54\" rel=\"nofollow\">0.7</a></li>\n<li><a href=\"#id2\" id=\"id55\" rel=\"nofollow\">0.6.1</a></li>\n<li><a href=\"#id3\" id=\"id56\" rel=\"nofollow\">0.6</a></li>\n<li><a href=\"#id4\" id=\"id57\" rel=\"nofollow\">0.5</a></li>\n<li><a href=\"#id5\" id=\"id58\" rel=\"nofollow\">0.4</a></li>\n<li><a href=\"#b2\" id=\"id59\" rel=\"nofollow\">0.3b2</a></li>\n<li><a href=\"#pre-releases\" id=\"id60\" rel=\"nofollow\">Pre-Releases</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"django-amazon-price-monitor\">\n<h2><a href=\"#id6\" rel=\"nofollow\">django-amazon-price-monitor</a></h2>\n<p>Monitors prices of Amazon products via Product Advertising API.</p>\n<div id=\"basic-structure\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Basic structure</a></h3>\n<p>This is a reusable Django app that can be plugged into your project. It\nconsists basically of this parts:</p>\n<ul>\n<li>Models</li>\n<li>Frontend components</li>\n<li>Angular Frontend API</li>\n<li>Amazon API component</li>\n</ul>\n<div id=\"models\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Models</a></h4>\n<ul>\n<li>Product<ul>\n<li>representation of an Amazon product</li>\n</ul>\n</li>\n<li>Price<ul>\n<li>representation of a price of an Amazon product at a specific time</li>\n</ul>\n</li>\n<li>Subscription<ul>\n<li>subscribe to a product at a specific price with an email\nnotification</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"frontend-components\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Frontend components</a></h4>\n<p>The frontend displays all subscribed products with additional\ninformation and some graphs for price history.</p>\n<p>The features are the following:</p>\n<ul>\n<li>list products</li>\n<li>show product details</li>\n<li>show product price graphs</li>\n<li>add subscriptions</li>\n<li>adjust subscription price value</li>\n<li>delete subscriptions</li>\n</ul>\n</div>\n<div id=\"angular-frontend-api\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Angular Frontend API</a></h4>\n<p>Simply the API consumed by AngularJS, based on Django REST Framework.</p>\n</div>\n<div id=\"amazon-api-component\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Amazon API component</a></h4>\n<p>Fetches product information from Amazon Product Advertising API through\nseveral tasks powered by Celery and weaves the data into the models.</p>\n</div>\n</div>\n<div id=\"license\">\n<h3><a href=\"#id12\" rel=\"nofollow\">License</a></h3>\n<p>This software is licensed with the MIT license. So feel free to do with\nit whatever you like.</p>\n</div>\n<div id=\"setup\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Setup</a></h3>\n<div id=\"prerequisites\">\n<h4><a href=\"#id14\" rel=\"nofollow\">Prerequisites</a></h4>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>3.3</th>\n<th>3.4</th>\n<th>3.5</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Django</td>\n<td>1.8</td>\n<td>1.8 or 1.9</td>\n<td>1.9</td>\n</tr>\n</tbody>\n</table>\n<p>For additional used packages see <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/blob/master/setup.py#L23\" rel=\"nofollow\">setup.py</a>.</p>\n</div>\n<div id=\"included-angular-libraries\">\n<h4><a href=\"#id15\" rel=\"nofollow\">Included angular libraries</a></h4>\n<ul>\n<li>angular-django-rest-resource (<a href=\"https://github.com/blacklocus/angular-django-rest-resource/tree/81d752b363668d674201c09d7a2ce6f418a44f13\" rel=\"nofollow\">commit:\n81d752b363668d674201c09d7a2ce6f418a44f13</a>)</li>\n</ul>\n</div>\n<div id=\"basic-setup\">\n<h4><a href=\"#id16\" rel=\"nofollow\">Basic setup</a></h4>\n<p>Add the following apps to <em>INSTALLED_APPS</em>:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'price_monitor',\n    'price_monitor.product_advertising_api',\n    'rest_framework',\n)\n</pre>\n<p>Then migrate:</p>\n<pre>python manage.py migrate\n</pre>\n<p>Adjust the settings appropiately, <a href=\"#settings\" rel=\"nofollow\">see next chapter</a>.</p>\n<p>Include the url configuration.</p>\n<p>Setup celery - you\u2019ll need the beat and a worker.</p>\n</div>\n<div id=\"settings\">\n<h4><a href=\"#id17\" rel=\"nofollow\">Settings</a></h4>\n<p><em>The values of the following displayed settings are their default\nvalues. If the value is \u2018\u2026\u2019 then there is no default value.</em></p>\n<div id=\"must-have-settings\">\n<h5><a href=\"#id18\" rel=\"nofollow\">Must have settings</a></h5>\n<p>The following settings are absolutely necessary to the price monitor\nrunning, please set them:</p>\n<div id=\"celery\">\n<h6><a href=\"#id19\" rel=\"nofollow\">Celery</a></h6>\n<p>You need to have a broker and a result backend set.</p>\n<pre>BROKER_URL = ...\nCELERY_RESULT_BACKEND = ...\n\n# some additional settings\nCELERY_ACCEPT_CONTENT = ['pickle', 'json']\nCELERY_CHORD_PROPAGATES = True\n</pre>\n</div>\n<div id=\"rest-framework\">\n<h6><a href=\"#id20\" rel=\"nofollow\">Rest-Framework</a></h6>\n<p>We use Rest-Framework for Angular frontend:</p>\n<pre>REST_FRAMEWORK = {\n    'PAGINATE_BY': 50,\n    'PAGINATE_BY_PARAM': 'page_size',\n    'MAX_PAGINATE_BY': 100,\n}\n</pre>\n</div>\n<div id=\"site-url\">\n<h6><a href=\"#id21\" rel=\"nofollow\">Site URL</a></h6>\n<p>Specify the base URL under which your site will be available. Defaults to: <em>http://localhost:8000</em>\nNecessary for creating links to the site within the notification emails.</p>\n<pre># base url to the site\nPRICE_MONITOR_BASE_URL = 'https://....'\n</pre>\n</div>\n<div id=\"aws-and-product-advertising-api-credentials\">\n<h6><a href=\"#id22\" rel=\"nofollow\">AWS and Product Advertising API credentials</a></h6>\n<pre># your Amazon Web Services access key id\nPRICE_MONITOR_AWS_ACCESS_KEY_ID = '...'\n\n# your Amazon Web Services secret access key\nPRICE_MONITOR_AWS_SECRET_ACCESS_KEY = '...'\n\n# the region endpoint you want to use.\n# Typically the country you'll run the price monitor in.\n# possible values: CA, CN, DE, ES, FR, IT, JP, UK, US\nPRICE_MONITOR_AMAZON_PRODUCT_API_REGION = '...'\n\n# the assoc tag of the Amazon Product Advertising API\nPRICE_MONITOR_AMAZON_PRODUCT_API_ASSOC_TAG = '...'\n</pre>\n</div>\n<div id=\"amazon-associates\">\n<h6><a href=\"#id23\" rel=\"nofollow\">Amazon associates</a></h6>\n<p>As the links to Amazon will be affiliate links with your Amazon associate tag (see above), you have to set your name for the disclaimer\n(see <a href=\"https://partnernet.amazon.de/gp/associates/agreement\" rel=\"nofollow\">https://partnernet.amazon.de/gp/associates/agreement</a>).</p>\n<pre># name of you/your site\nPRICE_MONITOR_AMAZON_ASSOCIATE_NAME = 'name/sitename'\n# Amazon site being used, choose from on of the following\n    'Amazon.co.uk'\n    'Local.Amazon.co.uk'\n    'Amazon.de'\n    'de.BuyVIP.com'\n    'Amazon.fr'\n    'Amazon.it'\n    'it.BuyVIP.com'\n    'Amazon.es'\n    'es.BuyVIP.com'\nPRICE_MONITOR_AMAZON_ASSOCIATE_SITE = '&lt;ONE FROM ABOVE&gt;'\n</pre>\n</div>\n<div id=\"images-protocol-and-domain\">\n<h6><a href=\"#id24\" rel=\"nofollow\">Images protocol and domain</a></h6>\n<pre># if to use the HTTPS URLs for Amazon images.\n# if you're running the monitor on SSL, set this to True\n# INFO:\n#  Product images are served directly from Amazon.\n#  This is a restriction when using the Amazon Product Advertising API\nPRICE_MONITOR_IMAGES_USE_SSL = True\n\n# domain to use for image serving.\n# typically analog to the api region following the URL pattern\n#  https://images-&lt;REGION&gt;.ssl-images-amazon.com\nPRICE_MONITOR_AMAZON_SSL_IMAGE_DOMAIN = 'https://images-eu.ssl-images-amazon.com'\n</pre>\n</div>\n</div>\n<div id=\"optional-settings\">\n<h5><a href=\"#id25\" rel=\"nofollow\">Optional settings</a></h5>\n<p>The following settings can be adjusted but come with reasonable default\nvalues.</p>\n<div id=\"product-synchronization\">\n<h6><a href=\"#id26\" rel=\"nofollow\">Product synchronization</a></h6>\n<pre># time after which products shall be refreshed\n# Amazon only allows caching up to 24 hours, so the maximum value is 1440!\nPRICE_MONITOR_AMAZON_PRODUCT_REFRESH_THRESHOLD_MINUTES = 720  # 12 hours\n</pre>\n</div>\n<div id=\"notifications\">\n<h6><a href=\"#id27\" rel=\"nofollow\">Notifications</a></h6>\n<p>To be able to send out the notification emails, set up a proper email\nbackend (see <a href=\"https://docs.djangoproject.com/en/1.5/topics/email/#topic-email-backends\" rel=\"nofollow\">Django\ndocumentation</a>).</p>\n<pre># time after which to notify the user again about a price limit hit (in minutes)\nPRICE_MONITOR_SUBSCRIPTION_RENOTIFICATION_MINUTES = 10080  # 7 days\n\n# sender address of the notification email\nPRICE_MONITOR_EMAIL_SENDER = 'noreply@localhost'\n\n# currency name to use on notifications\nPRICE_MONITOR_DEFAULT_CURRENCY = 'EUR'\n\n# subject and body of the notification emails\ngettext = lambda x: x\nPRICE_MONITOR_I18N_EMAIL_NOTIFICATION_SUBJECT = gettext(\n    'Price limit for %(product)s reached'\n)\nPRICE_MONITOR_I18N_EMAIL_NOTIFICATION_BODY = gettext(\n    'The price limit of %(price_limit)0.2f %(currency)s has been reached for the '\n    'article \"%(product_title)s\" - the current price is %(price)0.2f %(currency)s.'\n    '\\n\\nPlease support our platform by using this '\n    'link for buying: %(link)s\\n\\n\\nRegards,\\nThe Team'\n)\n\n# name of the site in notifications\nPRICE_MONITOR_SITENAME = 'Price Monitor'\n</pre>\n</div>\n<div id=\"caching\">\n<h6><a href=\"#id28\" rel=\"nofollow\">Caching</a></h6>\n<pre># key of cache (according to project config) to use for graphs\n# None disables caching.\nPRICE_MONITOR_GRAPH_CACHE_NAME = None\n\n# prefix for cache key used for graphs\nPRICE_MONITOR_GRAPH_CACHE_KEY_PREFIX = 'graph_'\n</pre>\n</div>\n</div>\n</div>\n<div id=\"celery-settings\">\n<h4><a href=\"#id29\" rel=\"nofollow\">Celery settings</a></h4>\n<p>To be able to run the required Celery tasks, Celery itself has to be set\nup. Please see the <a href=\"http://docs.celeryproject.org/en/latest/index.html\" rel=\"nofollow\">Celery\nDocumentation</a>\nabout how to setup the whole thing. You\u2019ll need a broker and a result\nbackend configured.</p>\n</div>\n</div>\n<div id=\"development-setup-with-docker\">\n<h3><a href=\"#id30\" rel=\"nofollow\">Development setup with Docker</a></h3>\n<p>The package comes with an easy to use Docker setup - you just need <tt>docker</tt> and <tt><span class=\"pre\">docker-compose</span></tt>.\nThe setup is nearly similar to the one of <a href=\"https://github.com/dArignac/treasury\" rel=\"nofollow\">treasury</a> ( a project by <a href=\"https://github.com/dArignac\" rel=\"nofollow\">darignac</a>), you\ncan read the <a href=\"http://treasury.readthedocs.org/en/latest/installation/docker.html\" rel=\"nofollow\">documentation</a> there to get a better insight.</p>\n<div id=\"structure\">\n<h4><a href=\"#id31\" rel=\"nofollow\">Structure</a></h4>\n<p>There are 5 containers:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>db</td>\n<td>Postgres database</td>\n</tr>\n<tr><td>redis</td>\n<td>Celery broker</td>\n</tr>\n<tr><td>web</td>\n<td>a django project containing the <tt><span class=\"pre\">django-amazon-price-monitor</span></tt> package</td>\n</tr>\n<tr><td>celery</td>\n<td>the celery for the django project</td>\n</tr>\n<tr><td>data</td>\n<td>container for mounted volumes</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt>web</tt> and <tt>celery</tt> containers are using a docker image being set up under <tt>docker/web</tt>.</p>\n<div id=\"image-base\">\n<h5><a href=\"#id32\" rel=\"nofollow\">Image: base</a></h5>\n<p>Basic image with all necessary system packages and pre-installed <tt>lxml</tt> and <tt>psycopg2</tt>.\nThe image can be found on <a href=\"https://hub.docker.com/r/pricemonitor/base/\" rel=\"nofollow\">Docker Hub</a>.</p>\n</div>\n<div id=\"image-web\">\n<h5><a href=\"#id33\" rel=\"nofollow\">Image: web</a></h5>\n<p>It comes with a Django project with login/logout view, that can be found under <tt>docker/web/project</tt>.\nThe image derives from <tt>pricemonitor/base</tt> from above.</p>\n<p>The directory structure within the container is the following (base dir: <tt>/srv/</tt>):</p>\n<pre>root:/srv tree\n\u251c\u2500\u2500 logs                [log files]\n\u251c\u2500\u2500 media               [media files]\n\u251c\u2500\u2500 project             [the django project]\n\u251c\u2500\u2500 static              [static files]\n\u2514\u2500\u2500 pricemonitor        [the pricemonitor package]\n</pre>\n<p>Starts via the start script <tt>docker/web/web_run.sh</tt> that does migrations and the starts the <tt>runserver</tt>.</p>\n</div>\n<div id=\"image-celery\">\n<h5><a href=\"#id34\" rel=\"nofollow\">Image: celery</a></h5>\n<p>Basically the same as <tt>web</tt>, but starts the Celery worker with beat.</p>\n<p>If you want to develop anything involving tasks, see the <a href=\"_docker-usage-override-settings\" rel=\"nofollow\">Usage</a> section below.</p>\n</div>\n<div id=\"image-data\">\n<h5><a href=\"#id35\" rel=\"nofollow\">Image: data</a></h5>\n<p>The <tt>data</tt> container mounts several paths:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Folder in container</th>\n<th>Folder on host</th>\n<th>Information</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>/var/lib/postgresql/data</td>\n<td>&lt;PROJECTROOT&gt;/docker/postgres</td>\n<td><ul>\n<li>Postgres data directory</li>\n<li>Keeps the DB data even if container is removed</li>\n</ul>\n</td>\n</tr>\n<tr><td>/srv/logs</td>\n<td>&lt;PROJECTROOT&gt;/docker/logs</td>\n<td>Django logs (see project settings)</td>\n</tr>\n<tr><td>/srv/media</td>\n<td>&lt;PROJECTROOT&gt;/docker/media</td>\n<td>Django media files</td>\n</tr>\n<tr><td>/srv/project</td>\n<td>&lt;PROJECTROOT&gt;/docker/web/project</td>\n<td><ul>\n<li>the Django project</li>\n<li>is copied on Dockerfile to get it up and running</li>\n<li>then mounted over (the copy is overwritten)</li>\n</ul>\n</td>\n</tr>\n<tr><td>/srv/pricemonitor</td>\n<td>&lt;PROJECTROOT&gt;</td>\n<td><ul>\n<li>the <tt><span class=\"pre\">django-amazon-price-monitor</span></tt> lib</li>\n<li>is copied on Dockerfile to get it up and running</li>\n<li>then mounted over (the copy is overwritten)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"usage\">\n<h4><a href=\"#id36\" rel=\"nofollow\">Usage</a></h4>\n<div id=\"override-settings\">\n<span id=\"docker-usage-override-settings\"></span><h5><a href=\"#id37\" rel=\"nofollow\">Override settings</a></h5>\n<p>To override some settings as well as to set up the <strong>required AWS settings</strong> you can create a <tt><span class=\"pre\">docker-compose.override.yml</span></tt> and fill with the specific values\n(also see <a href=\"https://docs.docker.com/compose/extends/\" rel=\"nofollow\">docker-compose documentation</a>).</p>\n<p>Please see or adjust the <tt>docker\\web\\project\\settings.py</tt> for all settings that are read from the environment. They can be overwritten.</p>\n<p>A sample <tt><span class=\"pre\">docker-compose.override.yml</span></tt> file could look like this:</p>\n<pre>version: '2'\nservices:\n  celery:\n        command: /bin/true\n        environment:\n          PRICE_MONITOR_AWS_ACCESS_KEY_ID: XXX\n          PRICE_MONITOR_AWS_SECRET_ACCESS_KEY: XXX\n          PRICE_MONITOR_AMAZON_PRODUCT_API_REGION: DE\n          PRICE_MONITOR_AMAZON_PRODUCT_API_ASSOC_TAG: XXX\n          PRICE_MONITOR_AMAZON_PRODUCT_REFRESH_THRESHOLD_MINUTES: 5\n          PRICE_MONITOR_SUBSCRIPTION_RENOTIFICATION_MINUTES: 60\n</pre>\n<p>It will avoid the automatic startup of celery (<tt>command: /bin/true</tt>) and set the required settings for AWS (in fact they are only needed in the celery\ncontainer). You can then manually start the container and execute celery which is quite useful if you develop anything that includes changes in the tasks and\nthus requires the celery to be restarted (execute from the <tt>docker</tt> folder!):</p>\n<pre>alex@tyrion:~/projects/github/django-amazon-price-monitor/docker$ docker-compose run celery bash\nStarting docker_data_1\n\n\n# check environment variables\n\nroot@9d64bbd23e98:/srv/project# env\nHOSTNAME=9d64bbd23e98\nEMAIL_BACKEND=django.core.mail.backends.filebased.EmailBackend\nPOSTGRES_DB=pm_db\nTERM=xterm\nPYTHONUNBUFFERED=1\nPRICE_MONITOR_SUBSCRIPTION_RENOTIFICATION_MINUTES=60\nPOSTGRES_PASSWORD=6i2vmzq5C6BuSf5k33A6tmMSHwKKv0Pu\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nSECRET_KEY=Vceev7yWMtEQzHaTZX52\nPWD=/srv/project\nBROKER_URL=redis://redis/1\nC_FORCE_ROOT='True'\nPRICE_MONITOR_AWS_SECRET_ACCESS_KEY=XXX\nPOSTGRES_USER=pm_user\nSHLVL=1\nHOME=/root\nPRICE_MONITOR_AMAZON_PRODUCT_REFRESH_THRESHOLD_MINUTES=5\nPRICE_MONITOR_AMAZON_PRODUCT_API_REGION=DE\nPRICE_MONITOR_AMAZON_PRODUCT_API_ASSOC_TAG=XXX\nDEBUG='True'\nPRICE_MONITOR_AWS_ACCESS_KEY_ID=XXX\n_=/usr/bin/env\n\n\n# start celery (worker and beat) (can also execute /srv/celery_run.sh)\n\nroot@9d64bbd23e98:/srv/project# celery --beat -A glue worker\n\n -------------- celery@9d64bbd23e98 v3.1.23 (Cipater)\n---- **** -----\n--- * ***  * -- Linux-3.16.0-4-amd64-x86_64-with-debian-8.0\n-- * - **** ---\n- ** ---------- [config]\n- ** ---------- .&gt; app:         glue:0x7fc6b5269e10\n- ** ---------- .&gt; transport:   redis://redis:6379/1\n- ** ---------- .&gt; results:     disabled://\n- *** --- * --- .&gt; concurrency: 8 (prefork)\n-- ******* ----\n--- ***** ----- [queues]\n -------------- .&gt; celery           exchange=celery(direct) key=celery\n\n[2016-03-20 10:02:26,776: WARNING/MainProcess] celery@9d64bbd23e98 ready.\n</pre>\n</div>\n<div id=\"start-stop-build\">\n<h5><a href=\"#id38\" rel=\"nofollow\">Start/Stop/Build</a></h5>\n<p>Use the make file to execute the most common tasks. It will execute <tt><span class=\"pre\">docker-compose</span></tt> with the project name <tt>pm</tt> resulting in the container\u2019s name pattern\n<tt>pm_*</tt>.</p>\n<pre>docker-build-base: - builds the base docker image\ndocker-build-web:  - builds the web docker image\ndocker-up:         - uses docker-compose to bring the containers up\ndocker-stop:       - uses docker-compose to stop the containers\ndocker-ps:         - runs docker-compose ps\n</pre>\n<p>A fixture with a Django user <tt>admin</tt> and the password <tt>password</tt> is loaded automatically.</p>\n</div>\n</div>\n</div>\n<div id=\"templates\">\n<h3><a href=\"#id39\" rel=\"nofollow\">Templates</a></h3>\n<p>As the fronted is done by Angular, there is only a single template with very limited possibilities to adjust, <tt>price_monitor/angular_index_view.html</tt>. You\ncan extends the template and adjust the following blocks.</p>\n<div id=\"footer\">\n<h4><a href=\"#id40\" rel=\"nofollow\">footer</a></h4>\n<p>Is rendered on the very bottom of the page. You have to use Bootstrap compatible markup, e.g.:</p>\n<pre>{% block footer %}\n        &lt;div class=\"row\"&gt;\n                &lt;div class=\"col-md-12\"&gt;Additonal footer&lt;/div&gt;\n        &lt;/div&gt;\n{% endblock %}\n</pre>\n</div>\n</div>\n<div id=\"management-commands\">\n<h3><a href=\"#id41\" rel=\"nofollow\">Management Commands</a></h3>\n<div id=\"price-monitor-batch-create-products\">\n<h4><a href=\"#id42\" rel=\"nofollow\">price_monitor_batch_create_products</a></h4>\n<p>A management command to batch create a number of products by providing\ntheir ASIN:</p>\n<pre>python manage.py price_monitor_batch_create_products &lt;ASIN1&gt; &lt;ASIN2&gt; &lt;ASIN3&gt;\n</pre>\n</div>\n<div id=\"price-monitor-recreate-product\">\n<h4><a href=\"#id43\" rel=\"nofollow\">price_monitor_recreate_product</a></h4>\n<p>Recreates a product with the given asin. If product already exists, it\nis deleted. <em>Only use in development!</em></p>\n<pre>python manage.py price_monitor_recreate_product &lt;ASIN&gt;\n</pre>\n</div>\n<div id=\"price-monitor-search\">\n<h4><a href=\"#id44\" rel=\"nofollow\">price_monitor_search</a></h4>\n<p>Searches for products at Amazon (not within the database) with the given\nASINs and prints out their details.</p>\n<pre>python manage.py price_monitor_search &lt;ASIN1&gt; &lt;ASIN2&gt; ...\n</pre>\n</div>\n</div>\n<div id=\"loggers\">\n<h3><a href=\"#id45\" rel=\"nofollow\">Loggers</a></h3>\n<div id=\"price-monitor\">\n<h4><a href=\"#id46\" rel=\"nofollow\">price_monitor</a></h4>\n<p>The app uses the logger \u201cprice_monitor\u201d to log all error and info\nmessages that are not included within a dedicated other logger. Please\nsee the <a href=\"https://docs.djangoproject.com/en/1.6/topics/logging/\" rel=\"nofollow\">Django logging\ndocumentation</a>\nfor how to setup loggers.</p>\n</div>\n<div id=\"price-monitor-product-advertising-api\">\n<h4><a href=\"#id47\" rel=\"nofollow\">price_monitor.product_advertising_api</a></h4>\n<p>Logger for everything related to the ProductAdvertisingAPI wrapper class\nthat accesses the Amazon Product Advertising API through bottlenose.</p>\n</div>\n<div id=\"price-monitor-utils\">\n<h4><a href=\"#id48\" rel=\"nofollow\">price_monitor.utils</a></h4>\n<p>Logger for the utils module.</p>\n</div>\n</div>\n<div id=\"tests\">\n<h3><a href=\"#id49\" rel=\"nofollow\">Tests</a></h3>\n<h3 id=\"coverage\"><span class=\"section-subtitle\">Coverage</span></h3>\n<p><img alt=\"codecov-graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0356386ad1fb63624f0d4dfe3162c94b302bea19/687474703a2f2f636f6465636f762e696f2f6769746875622f706f6e797269646572732f646a616e676f2d616d617a6f6e2d70726963652d6d6f6e69746f722f6272616e63682e7376673f6272616e63683d6d6173746572\"></p>\n</div>\n<div id=\"internals\">\n<h3><a href=\"#id50\" rel=\"nofollow\">Internals</a></h3>\n<div id=\"model-graph\">\n<h4><a href=\"#id51\" rel=\"nofollow\">Model graph</a></h4>\n<div>\n<img alt=\"Model Graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d8c5a36bd9aa993f493129887ea5c95c9dc2f7b/68747470733a2f2f6769746875622e636f6d2f706f6e797269646572732f646a616e676f2d616d617a6f6e2d70726963652d6d6f6e69746f722f7261772f6d61737465722f6d6f64656c732e706e67\">\n</div>\n</div>\n<div id=\"product-advertising-api-synchronization\">\n<h4><a href=\"#id52\" rel=\"nofollow\">Product advertising api synchronization</a></h4>\n<h4 id=\"task-workflow\"><span class=\"section-subtitle\">Task workflow</span></h4>\n<div>\n<img alt=\"Image of Product advertising api synchronization workflow\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4ec39056d9017393b943a816411e31c3f30edec/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706f6e797269646572732f646a616e676f2d616d617a6f6e2d70726963652d6d6f6e69746f722f6d61737465722f646f63732f70726963655f6d6f6e69746f722e70726f647563745f6164766572746973696e675f6170692e7461736b732e706e67\">\n</div>\n<p>Image of Product advertising api synchronization workflow</p>\n</div>\n</div>\n</div>\n<div id=\"change-log\">\n<h2><a href=\"#id53\" rel=\"nofollow\">Change Log</a></h2>\n<div id=\"id1\">\n<h3><a href=\"https://pypi.python.org/pypi/django-amazon-price-monitor/0.7\" rel=\"nofollow\">0.7</a></h3>\n<p><strong>Features:</strong></p>\n<ul>\n<li>footer can now be extended through template block <em>footer</em></li>\n<li>product addition in frontend improved <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/79\" rel=\"nofollow\">#79</a> (<a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/104\" rel=\"nofollow\">PR#104</a>)</li>\n<li>removed <tt>urlpatterns</tt> to please Django 1.10 deprecation</li>\n<li>added docker setup for development (<a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/101\" rel=\"nofollow\">PR#101</a>)</li>\n<li>list products with audience rating 18+ in notification mail if region is Germany and product is also 18+ <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/92\" rel=\"nofollow\">#92</a> (<a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/93\" rel=\"nofollow\">PR#93</a>)</li>\n</ul>\n<p><strong>Bugfixes:</strong></p>\n<ul>\n<li>now catching parsing errors of returned XML from Amazon API <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/96\" rel=\"nofollow\">#96</a></li>\n<li>fixed date range of displayed prices in price graph <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/90\" rel=\"nofollow\">#90</a></li>\n<li>fixed display of old prices of price graph <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/97\" rel=\"nofollow\">#97</a></li>\n<li>updated to latest <tt><span class=\"pre\">python-dateutil</span></tt> version, somehow refs <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/95\" rel=\"nofollow\">#95</a></li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"https://pypi.python.org/pypi/django-amazon-price-monitor/0.6.1\" rel=\"nofollow\">0.6.1</a></h3>\n<p><strong>Bugfixes:</strong></p>\n<ul>\n<li>StartupTask fails with exception <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/94\" rel=\"nofollow\">#94</a></li>\n<li>Tests fail if today is the last day of November <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/95\" rel=\"nofollow\">#95</a></li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"https://pypi.python.org/pypi/django-amazon-price-monitor/0.6\" rel=\"nofollow\">0.6</a></h3>\n<p><strong>Features:</strong></p>\n<ul>\n<li>djangorestframework 3.2 compatibility <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/86\" rel=\"nofollow\">#86</a> (<a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/88\" rel=\"nofollow\">PR#88</a>)</li>\n</ul>\n<p><strong>Bugfixes:</strong></p>\n<ul>\n<li>FindProductsToSynchronizeTask is rescheduled twice or more <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/89\" rel=\"nofollow\">#89</a> (<a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/91\" rel=\"nofollow\">PR#91</a>)</li>\n<li>Unable to parse 2015-02 to a datetime <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/57\" rel=\"nofollow\">#57</a></li>\n<li>lots of codestyle</li>\n<li>minor bugfixes</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"https://pypi.python.org/pypi/django-amazon-price-monitor/0.5\" rel=\"nofollow\">0.5</a></h3>\n<p><strong>Features:</strong></p>\n<ul>\n<li>Add link to PM frontend in notification email <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/76\" rel=\"nofollow\">#76</a></li>\n<li>Django 1.9 support (see <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/80\" rel=\"nofollow\">pull request #80</a>)</li>\n</ul>\n<p><strong>Bugfixes:</strong></p>\n<ul>\n<li>FindProductsToSynchronizeTask is not always rescheduled <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/61\" rel=\"nofollow\">#61</a></li>\n<li>Font files not included in package <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/75\" rel=\"nofollow\">#75</a></li>\n<li>Identify as Amazon associate <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/77\" rel=\"nofollow\">#77</a></li>\n</ul>\n<p><strong>Pull requests:</strong></p>\n<ul>\n<li>Ensured that FindProductsToSynchronizeTask will be scheduled <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/78\" rel=\"nofollow\">#78</a> (<a href=\"https://github.com/dArignac\" rel=\"nofollow\">dArignac</a>)</li>\n<li>Django 1.9 support <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/80\" rel=\"nofollow\">#80</a> (<a href=\"https://github.com/dArignac\" rel=\"nofollow\">dArignac</a>)</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"https://pypi.python.org/pypi/django-amazon-price-monitor/0.4\" rel=\"nofollow\">0.4</a></h3>\n<p><strong>Features:</strong></p>\n<ul>\n<li>Deprecate old frontend <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/73\" rel=\"nofollow\">#73</a></li>\n<li>Make angular the default frontend <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/70\" rel=\"nofollow\">#70</a></li>\n</ul>\n<p><strong>Bugfixes:</strong></p>\n<ul>\n<li>Products with the same price over graph timespae have an empty graph <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/67\" rel=\"nofollow\">#67</a></li>\n<li>Notification of music albums <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/33\" rel=\"nofollow\">#33</a></li>\n<li>Add artist for audio products <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/71\" rel=\"nofollow\">#71</a></li>\n</ul>\n<p><strong>Pull requests:</strong></p>\n<ul>\n<li>Remove old frontend <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/74\" rel=\"nofollow\">#74</a> (<a href=\"https://github.com/dArignac\" rel=\"nofollow\">dArignac</a>)</li>\n<li>Fix for empty graphs is packaged now #67 <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/72\" rel=\"nofollow\">#72</a> (<a href=\"https://github.com/mmrose\" rel=\"nofollow\">mmrose</a>)</li>\n</ul>\n</div>\n<div id=\"b2\">\n<h3><a href=\"https://pypi.python.org/pypi/django-amazon-price-monitor/0.3b2\" rel=\"nofollow\">0.3b2</a></h3>\n<p><strong>Features:</strong></p>\n<ul>\n<li>Prepare for automatic releases <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/68\" rel=\"nofollow\">#68</a></li>\n<li>Increase performance of Amazon calls <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/41\" rel=\"nofollow\">#41</a></li>\n<li>Django 1.8 compatibility <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/32\" rel=\"nofollow\">#32</a></li>\n<li>Data reduction and clean up <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/27\" rel=\"nofollow\">#27</a></li>\n<li>Limit graphs <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/26\" rel=\"nofollow\">#26</a></li>\n<li>Show highest and lowest price ever <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/25\" rel=\"nofollow\">#25</a></li>\n<li>Implement a full-usable frontend`#8 &lt;<a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/8\" rel=\"nofollow\">https://github.com/ponyriders/django-amazon-price-monitor/issues/8</a>&gt;`__</li>\n<li>Add more tests <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/2\" rel=\"nofollow\">#2</a></li>\n</ul>\n<p><strong>Bugfixes:</strong></p>\n<ul>\n<li>Graphs empty for some products <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/65\" rel=\"nofollow\">#65</a></li>\n<li>Don\u2019t show other peoples price limits <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/63\" rel=\"nofollow\">#63</a></li>\n<li>Graphs do not render correct values <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/60\" rel=\"nofollow\">#60</a></li>\n<li>\u2018NoneType\u2019 object has no attribute \u2018url\u2019 <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/59\" rel=\"nofollow\">#59</a></li>\n<li>Rename SynchronizeSingleProductTask <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/56\" rel=\"nofollow\">#56</a></li>\n<li>Sync on product creation not working <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/55\" rel=\"nofollow\">#55</a></li>\n<li>Clear old products and prices <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/47\" rel=\"nofollow\">#47</a></li>\n<li>Deleting a product subscription does not remove it from list view <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/42\" rel=\"nofollow\">#42</a></li>\n<li>Endless synchronization queue <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/38\" rel=\"nofollow\">#38</a></li>\n<li>Mark unavailable products <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/14\" rel=\"nofollow\">#14</a></li>\n</ul>\n<p><strong>Closed issues:</strong></p>\n<ul>\n<li>Unpin beautifulsoup4==4.3.2 <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/issues/50\" rel=\"nofollow\">#50</a></li>\n</ul>\n<p><strong>Pull requests:</strong></p>\n<ul>\n<li>fixed access of unavilable image urls #59 <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/66\" rel=\"nofollow\">#66</a> (<a href=\"https://github.com/dArignac\" rel=\"nofollow\">dArignac</a>)</li>\n<li>63 subscriptions of other users <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/64\" rel=\"nofollow\">#64</a> (<a href=\"https://github.com/mmrose\" rel=\"nofollow\">mmrose</a>)</li>\n<li>Mark unavailable products <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/62\" rel=\"nofollow\">#62</a> (<a href=\"https://github.com/mmrose\" rel=\"nofollow\">mmrose</a>)</li>\n<li>Sync on product creation not working <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/58\" rel=\"nofollow\">#58</a> (<a href=\"https://github.com/dArignac\" rel=\"nofollow\">dArignac</a>)</li>\n<li>Products are now requeried after deletion in list view #42 <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/54\" rel=\"nofollow\">#54</a> (<a href=\"https://github.com/mmrose\" rel=\"nofollow\">mmrose</a>)</li>\n<li>Show highest and lowest price (#25) <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/53\" rel=\"nofollow\">#53</a> (<a href=\"https://github.com/mmrose\" rel=\"nofollow\">mmrose</a>)</li>\n<li>Now the new FKs are also set during sync #25 <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/52\" rel=\"nofollow\">#52</a> (<a href=\"https://github.com/mmrose\" rel=\"nofollow\">mmrose</a>)</li>\n<li>Adding datamigration for new min, max and current price FKs #25 <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/51\" rel=\"nofollow\">#51</a> (<a href=\"https://github.com/mmrose\" rel=\"nofollow\">mmrose</a>)</li>\n<li>Performance improvements on product API view <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/49\" rel=\"nofollow\">#49</a> (<a href=\"https://github.com/mmrose\" rel=\"nofollow\">mmrose</a>)</li>\n<li>Remove unused data`#48 &lt;<a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/48\" rel=\"nofollow\">https://github.com/ponyriders/django-amazon-price-monitor/pull/48</a>&gt;`__ (<a href=\"https://github.com/dArignac\" rel=\"nofollow\">dArignac</a>)</li>\n<li>Amazon query performance increase <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/46\" rel=\"nofollow\">#46</a> (<a href=\"https://github.com/dArignac\" rel=\"nofollow\">dArignac</a>)</li>\n<li>Django 1.8 compatibility <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/45\" rel=\"nofollow\">#45</a> (<a href=\"https://github.com/dArignac\" rel=\"nofollow\">dArignac</a>)</li>\n<li>Bugfix: Endless queue <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/40\" rel=\"nofollow\">#40</a> (<a href=\"https://github.com/dArignac\" rel=\"nofollow\">dArignac</a>)</li>\n<li>waffle.io Badge <a href=\"https://github.com/ponyriders/django-amazon-price-monitor/pull/37\" rel=\"nofollow\">#37</a> (<a href=\"https://github.com/waffle-iron\" rel=\"nofollow\">waffle-iron</a>)</li>\n</ul>\n</div>\n<div id=\"pre-releases\">\n<h3><a href=\"#id60\" rel=\"nofollow\">Pre-Releases</a></h3>\n<ul>\n<li>unfortunately everything before was not packaged and released nor tracked.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2045141, "releases": {"0.3b1": [], "0.3b2": [{"comment_text": "", "digests": {"md5": "1431dd557d9e420d81e655e1fa04abd4", "sha256": "4e468e548f12b8f8f96021e8b5115dc5a1a2172dd9a13b893f8aed7d458af12c"}, "downloads": -1, "filename": "django_amazon_price_monitor-0.3b2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1431dd557d9e420d81e655e1fa04abd4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 235528, "upload_time": "2015-09-27T06:54:23", "upload_time_iso_8601": "2015-09-27T06:54:23.414159Z", "url": "https://files.pythonhosted.org/packages/dc/c8/5e9ee6b34176d97e483afa9a8d0caa6886dc9b777925485e6419404811bd/django_amazon_price_monitor-0.3b2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48ca3d7e4d8c074831d22d0bcdb9751a", "sha256": "3fe4e76dc0752203cd00babd9b303e6c0f3efdc55ca35add65543afd510b6c3d"}, "downloads": -1, "filename": "django-amazon-price-monitor-0.3b2.tar.gz", "has_sig": false, "md5_digest": "48ca3d7e4d8c074831d22d0bcdb9751a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 206598, "upload_time": "2015-09-27T06:54:29", "upload_time_iso_8601": "2015-09-27T06:54:29.590342Z", "url": "https://files.pythonhosted.org/packages/82/ad/07d6215cb34640de98628600399a27ba6898b99d41083e5e45ce8bc8248d/django-amazon-price-monitor-0.3b2.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "85f39b72a9d58e32c57b09a02372bfec", "sha256": "a34881f9c54466cffbe47e8ff5565cd99fdb79553444c277ccb9b096d0bef3dd"}, "downloads": -1, "filename": "django_amazon_price_monitor-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "85f39b72a9d58e32c57b09a02372bfec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 197560, "upload_time": "2015-10-26T20:09:47", "upload_time_iso_8601": "2015-10-26T20:09:47.079260Z", "url": "https://files.pythonhosted.org/packages/65/91/04f9f805050104622caf939d08aace3ae85c08c81635c717477696840101/django_amazon_price_monitor-0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01e6f43a11360c736967ab27f3d38f95", "sha256": "cca30f5c6cb89b6fc02ecff5470f6a73a837fd6b42ffbb52f072e29766f57a35"}, "downloads": -1, "filename": "django-amazon-price-monitor-0.4.tar.gz", "has_sig": false, "md5_digest": "01e6f43a11360c736967ab27f3d38f95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 172480, "upload_time": "2015-10-26T20:09:50", "upload_time_iso_8601": "2015-10-26T20:09:50.854073Z", "url": "https://files.pythonhosted.org/packages/2e/4f/d6954aa3a16100d3a9ce36a5948afb4ae9d9b66d39f52e59fe88670bd0e8/django-amazon-price-monitor-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "e03903ffe504ca6d4fbdb7dadc0d47f9", "sha256": "898e8a67fc636d6a37a4886275cf60cb45f88012e1304babb060fad6012f0f1e"}, "downloads": -1, "filename": "django_amazon_price_monitor-0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e03903ffe504ca6d4fbdb7dadc0d47f9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 267102, "upload_time": "2015-12-14T16:46:25", "upload_time_iso_8601": "2015-12-14T16:46:25.060736Z", "url": "https://files.pythonhosted.org/packages/a1/26/372e34c5037fa90f1ea1002c7cace311189600af76fe23588377c00ed79b/django_amazon_price_monitor-0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f3ddb117874d751938fa7da1885e540", "sha256": "0703dc2f6ef94fc7ed9b604a87a46dfed5d73eb1286f2c1560fd320f71c0506d"}, "downloads": -1, "filename": "django-amazon-price-monitor-0.5.tar.gz", "has_sig": false, "md5_digest": "2f3ddb117874d751938fa7da1885e540", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 245816, "upload_time": "2015-12-14T16:46:32", "upload_time_iso_8601": "2015-12-14T16:46:32.650155Z", "url": "https://files.pythonhosted.org/packages/9a/93/e2ad98e0d0ec238ed6b9d707ed8442f6520fa835bd2da897f52c46da3064/django-amazon-price-monitor-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "dd546a2613933ac7b183521f0145404f", "sha256": "9969425faa0724889bdcc122304eb40e1b8cc0aaecd512cf742f435a0dade6ed"}, "downloads": -1, "filename": "django_amazon_price_monitor-0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dd546a2613933ac7b183521f0145404f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 268066, "upload_time": "2016-01-07T20:00:37", "upload_time_iso_8601": "2016-01-07T20:00:37.509634Z", "url": "https://files.pythonhosted.org/packages/67/a0/b3b77781bb8970efe16a4b8a0501c954170aeee8d8da0c32158b3ab4cae2/django_amazon_price_monitor-0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc5137cfcab2365bbed948f6e1c77cfc", "sha256": "e1ee2c6e43ce6221d0492c3941c1f700bed2499aa51fd6786bb2a0402fe49b3d"}, "downloads": -1, "filename": "django-amazon-price-monitor-0.6.tar.gz", "has_sig": false, "md5_digest": "fc5137cfcab2365bbed948f6e1c77cfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 246518, "upload_time": "2016-01-07T20:00:50", "upload_time_iso_8601": "2016-01-07T20:00:50.340271Z", "url": "https://files.pythonhosted.org/packages/a9/97/4f13c31d5bf3bd4dc0588f1dd757ced261640e7d13c88d8e38b74c4dd196/django-amazon-price-monitor-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "417ceccf43cd9d2911fc6d5f424a375b", "sha256": "64ac848bb6c0dac85327bfa3bfc60467c006324f0a6b03503f211b89a501649c"}, "downloads": -1, "filename": "django_amazon_price_monitor-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "417ceccf43cd9d2911fc6d5f424a375b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 268394, "upload_time": "2016-01-31T08:42:50", "upload_time_iso_8601": "2016-01-31T08:42:50.549639Z", "url": "https://files.pythonhosted.org/packages/72/d5/134910b9a7c3f8bf07011c08ed7bebe03187e4f52310456535d0573b80e8/django_amazon_price_monitor-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dc11d4508195ddc12fd7c16730b09b8", "sha256": "9fd9f534b6f99cfadff4743b1a5add1e50df3ea338a8e8348dd3f8be1f7942b3"}, "downloads": -1, "filename": "django-amazon-price-monitor-0.6.1.tar.gz", "has_sig": false, "md5_digest": "1dc11d4508195ddc12fd7c16730b09b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 247103, "upload_time": "2016-01-31T08:42:57", "upload_time_iso_8601": "2016-01-31T08:42:57.260604Z", "url": "https://files.pythonhosted.org/packages/b2/e8/f7c63e27acc3eab173329e54c38d33e783f05af9024dd106f1a5488edbcc/django-amazon-price-monitor-0.6.1.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "a7448ac2c115a6d595f58e55c3256f01", "sha256": "6ceae40b81684d7d35e64d570ecdd23b5e88e61c3c75034fe437bf1d352317fb"}, "downloads": -1, "filename": "django_amazon_price_monitor-0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a7448ac2c115a6d595f58e55c3256f01", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 276872, "upload_time": "2016-04-04T17:39:07", "upload_time_iso_8601": "2016-04-04T17:39:07.530124Z", "url": "https://files.pythonhosted.org/packages/47/46/008a347bdd7da079fa3e9ced76fef3b2c76e86394de39479fda014dce391/django_amazon_price_monitor-0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df84ea4c7e4e0ec70a0edd2d9776dbdc", "sha256": "762fab17b5da4b04f43f175ebfb4a0370c7168a84d7f9ba157ce1459ea2f71ad"}, "downloads": -1, "filename": "django-amazon-price-monitor-0.7.tar.gz", "has_sig": false, "md5_digest": "df84ea4c7e4e0ec70a0edd2d9776dbdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255862, "upload_time": "2016-04-04T17:39:24", "upload_time_iso_8601": "2016-04-04T17:39:24.610081Z", "url": "https://files.pythonhosted.org/packages/ff/58/783d767341c56ec8db82d2df94f09896acc58cf7d93f7bab178a9e20f699/django-amazon-price-monitor-0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a7448ac2c115a6d595f58e55c3256f01", "sha256": "6ceae40b81684d7d35e64d570ecdd23b5e88e61c3c75034fe437bf1d352317fb"}, "downloads": -1, "filename": "django_amazon_price_monitor-0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a7448ac2c115a6d595f58e55c3256f01", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 276872, "upload_time": "2016-04-04T17:39:07", "upload_time_iso_8601": "2016-04-04T17:39:07.530124Z", "url": "https://files.pythonhosted.org/packages/47/46/008a347bdd7da079fa3e9ced76fef3b2c76e86394de39479fda014dce391/django_amazon_price_monitor-0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df84ea4c7e4e0ec70a0edd2d9776dbdc", "sha256": "762fab17b5da4b04f43f175ebfb4a0370c7168a84d7f9ba157ce1459ea2f71ad"}, "downloads": -1, "filename": "django-amazon-price-monitor-0.7.tar.gz", "has_sig": false, "md5_digest": "df84ea4c7e4e0ec70a0edd2d9776dbdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255862, "upload_time": "2016-04-04T17:39:24", "upload_time_iso_8601": "2016-04-04T17:39:24.610081Z", "url": "https://files.pythonhosted.org/packages/ff/58/783d767341c56ec8db82d2df94f09896acc58cf7d93f7bab178a9e20f699/django-amazon-price-monitor-0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:42 2020"}