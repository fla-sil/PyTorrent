{"info": {"author": "Satireven", "author_email": "satireven@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# PyEvalJS\n\nPyEvalJS is a python wrapper for [Microsoft Chakra](https://github.com/Microsoft/ChakraCore) engine, it act as a bridge between the Python and JavaScript objects, and with this module you can easily run JavaScript Code in Python without having to install nodejs.\n\n## Installation\n\n    pip install PyEvalJS\n\n## Usage\n\n### Execute a script\n\n```python\n>>> from PyEvalJS import Runtime\n>>> runtime = Runtime()\n>>> runtime.eval(\"'red yellow blue'.split(' ')\")\n['red', 'yellow', 'blue']\n```\n\n### Call a function\n\n```python\n>>> from PyEvalJS import Runtime\n>>> runtime = Runtime()\n>>> runtime.compile(\"\"\"\n...     function add(x, y) {\n...         return x + y;\n...     }\n... \"\"\")\n>>> runtime.call(\"add\",1,2)\n3\n```\n\nor just put args into the script\n\n```python\n>>> from PyEvalJS import Runtime\n>>> runtime = Runtime()\n>>> runtime.eval(\"\"\"\n...     function add2(num) {\n...         return num+2;\n...     } add2(8);\"\"\")\n10\n```\n\nor by passing parameters\n\n```python\n>>> from PyEvalJS import Runtime\n>>> runtime = Runtime()\n>>> runtime.set_variable(\"a\",8)\nTrue\n>>> runtime.eval(\"\"\"\n...     function add2(num) {\n...         return num+2;\n...     } add2(a);\"\"\")\n10\n```\n\n### Passing parameters\n\n```python\n>>> from PyEvalJS import Runtime\n>>> runtime = Runtime()\n>>> runtime.set_variable(\"name\", ['Jim','Bob','Tour'])\nTrue\n>>> runtime.get_variable(\"name\")\n['Jim', 'Bob', 'Tour']\n```\n\n### Use a JavaScript module\n\n```python\n>>> from PyEvalJS import Runtime\n>>> runtime = Runtime()\n>>> runtime.require(\"./js/crypto-js.js\")  #import CryptoJS\n>>> runtime.compile(\"\"\"\n...     function encryptByDESModeCBC(key,message) {\n...         var keyHex = CryptoJS.enc.Utf8.parse(key);\n...         var ivHex = CryptoJS.enc.Utf8.parse(key);\n...         encrypted = CryptoJS.DES.encrypt(message, keyHex, {\n...                 iv:ivHex,\n...                 mode: CryptoJS.mode.CBC,\n...                 padding:CryptoJS.pad.Pkcs7\n...             }\n...         );\n...         return encrypted.ciphertext.toString();\n...     }\"\"\")\n>>> runtime.call(\"encryptByDESModeCBC\",'1234','this is a test')\n'94b7b0cc2b71165ea067868f595fc03a'\n```\n\n### Call the same function for each item in the list\n\n```python\n>>> from PyEvalJS import Runtime\n>>> runtime = Runtime()\n>>> runtime.compile(\"\"\"\n...     function add2(num) {\n...         return num+2;\n... }\"\"\")\n>>> runtime.call_for_each(\"add2\",[1,2,4,6,5])\n[3, 4, 6, 8, 7]\n\n```\n\n## Supports\n\n- Python2 >= 2.7\n- Python3 >= 3.4\n\n## Platform\n\n- macOS x64\n- Linux x64\n- Windows x86/x64 (tested on Windows 10 x64, Python 3.7)\n\n## Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## Licence\n\nCode released under [the MIT license](https://github.com/Satireven/PyEvalJS/blob/master/LICENSE)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Satireven/PyEvalJS", "keywords": "Python JavaScript js-engine Chakra ChakraCore V8", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PyEvalJS", "package_url": "https://pypi.org/project/PyEvalJS/", "platform": "", "project_url": "https://pypi.org/project/PyEvalJS/", "project_urls": {"Homepage": "https://github.com/Satireven/PyEvalJS"}, "release_url": "https://pypi.org/project/PyEvalJS/1.0.0/", "requires_dist": null, "requires_python": ">2.6, !=3.0.*, !=3.1.*, !=3.2.*", "summary": "Run JavaScript Code in Python through the Microsoft Chakra engine", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyEvalJS</h1>\n<p>PyEvalJS is a python wrapper for <a href=\"https://github.com/Microsoft/ChakraCore\" rel=\"nofollow\">Microsoft Chakra</a> engine, it act as a bridge between the Python and JavaScript objects, and with this module you can easily run JavaScript Code in Python without having to install nodejs.</p>\n<h2>Installation</h2>\n<pre><code>pip install PyEvalJS\n</code></pre>\n<h2>Usage</h2>\n<h3>Execute a script</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PyEvalJS</span> <span class=\"kn\">import</span> <span class=\"n\">Runtime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">Runtime</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"s2\">\"'red yellow blue'.split(' ')\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"s1\">'yellow'</span><span class=\"p\">,</span> <span class=\"s1\">'blue'</span><span class=\"p\">]</span>\n</pre>\n<h3>Call a function</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PyEvalJS</span> <span class=\"kn\">import</span> <span class=\"n\">Runtime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">Runtime</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">...     function add(x, y) {</span>\n<span class=\"s2\">...         return x + y;</span>\n<span class=\"s2\">...     }</span>\n<span class=\"s2\">... \"\"\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s2\">\"add\"</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n</pre>\n<p>or just put args into the script</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PyEvalJS</span> <span class=\"kn\">import</span> <span class=\"n\">Runtime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">Runtime</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">...     function add2(num) {</span>\n<span class=\"s2\">...         return num+2;</span>\n<span class=\"s2\">...     } add2(8);\"\"\"</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span>\n</pre>\n<p>or by passing parameters</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PyEvalJS</span> <span class=\"kn\">import</span> <span class=\"n\">Runtime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">Runtime</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">set_variable</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">...     function add2(num) {</span>\n<span class=\"s2\">...         return num+2;</span>\n<span class=\"s2\">...     } add2(a);\"\"\"</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span>\n</pre>\n<h3>Passing parameters</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PyEvalJS</span> <span class=\"kn\">import</span> <span class=\"n\">Runtime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">Runtime</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">set_variable</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'Jim'</span><span class=\"p\">,</span><span class=\"s1\">'Bob'</span><span class=\"p\">,</span><span class=\"s1\">'Tour'</span><span class=\"p\">])</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">get_variable</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'Jim'</span><span class=\"p\">,</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'Tour'</span><span class=\"p\">]</span>\n</pre>\n<h3>Use a JavaScript module</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PyEvalJS</span> <span class=\"kn\">import</span> <span class=\"n\">Runtime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">Runtime</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"s2\">\"./js/crypto-js.js\"</span><span class=\"p\">)</span>  <span class=\"c1\">#import CryptoJS</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">...     function encryptByDESModeCBC(key,message) {</span>\n<span class=\"s2\">...         var keyHex = CryptoJS.enc.Utf8.parse(key);</span>\n<span class=\"s2\">...         var ivHex = CryptoJS.enc.Utf8.parse(key);</span>\n<span class=\"s2\">...         encrypted = CryptoJS.DES.encrypt(message, keyHex, {</span>\n<span class=\"s2\">...                 iv:ivHex,</span>\n<span class=\"s2\">...                 mode: CryptoJS.mode.CBC,</span>\n<span class=\"s2\">...                 padding:CryptoJS.pad.Pkcs7</span>\n<span class=\"s2\">...             }</span>\n<span class=\"s2\">...         );</span>\n<span class=\"s2\">...         return encrypted.ciphertext.toString();</span>\n<span class=\"s2\">...     }\"\"\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s2\">\"encryptByDESModeCBC\"</span><span class=\"p\">,</span><span class=\"s1\">'1234'</span><span class=\"p\">,</span><span class=\"s1\">'this is a test'</span><span class=\"p\">)</span>\n<span class=\"s1\">'94b7b0cc2b71165ea067868f595fc03a'</span>\n</pre>\n<h3>Call the same function for each item in the list</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PyEvalJS</span> <span class=\"kn\">import</span> <span class=\"n\">Runtime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">Runtime</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">...     function add2(num) {</span>\n<span class=\"s2\">...         return num+2;</span>\n<span class=\"s2\">... }\"\"\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">call_for_each</span><span class=\"p\">(</span><span class=\"s2\">\"add2\"</span><span class=\"p\">,[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n</pre>\n<h2>Supports</h2>\n<ul>\n<li>Python2 &gt;= 2.7</li>\n<li>Python3 &gt;= 3.4</li>\n</ul>\n<h2>Platform</h2>\n<ul>\n<li>macOS x64</li>\n<li>Linux x64</li>\n<li>Windows x86/x64 (tested on Windows 10 x64, Python 3.7)</li>\n</ul>\n<h2>Contributing</h2>\n<ol>\n<li>Fork it!</li>\n<li>Create your feature branch: <code>git checkout -b my-new-feature</code></li>\n<li>Commit your changes: <code>git commit -am 'Add some feature'</code></li>\n<li>Push to the branch: <code>git push origin my-new-feature</code></li>\n<li>Submit a pull request :D</li>\n</ol>\n<h2>Licence</h2>\n<p>Code released under <a href=\"https://github.com/Satireven/PyEvalJS/blob/master/LICENSE\" rel=\"nofollow\">the MIT license</a></p>\n\n          </div>"}, "last_serial": 6480820, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "36da9179e04525b91806a8f149388078", "sha256": "e6fa329b9c73f264a4e734955cb970b0e22f675fcfb562fd48d988e2071c5851"}, "downloads": -1, "filename": "PyEvalJS-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36da9179e04525b91806a8f149388078", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 38671453, "upload_time": "2020-01-19T05:32:13", "upload_time_iso_8601": "2020-01-19T05:32:13.002827Z", "url": "https://files.pythonhosted.org/packages/f3/fb/575b2141d85990ad81a57dd8bdac9cca43fff01adccfaadc0d13dd6a7b89/PyEvalJS-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed814f786288ea39d2b89fbef919da41", "sha256": "c2928bbb1e9705cf7cae00d8f8bd82b720c0fd796bb5cf42f2a1e92d34114cff"}, "downloads": -1, "filename": "PyEvalJS-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ed814f786288ea39d2b89fbef919da41", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 38484844, "upload_time": "2020-01-19T05:33:12", "upload_time_iso_8601": "2020-01-19T05:33:12.957011Z", "url": "https://files.pythonhosted.org/packages/2c/70/b3c76ad794e9aa2366100f673b06e5ce0c94e37b9f41c45bc28658ce636b/PyEvalJS-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36da9179e04525b91806a8f149388078", "sha256": "e6fa329b9c73f264a4e734955cb970b0e22f675fcfb562fd48d988e2071c5851"}, "downloads": -1, "filename": "PyEvalJS-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36da9179e04525b91806a8f149388078", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 38671453, "upload_time": "2020-01-19T05:32:13", "upload_time_iso_8601": "2020-01-19T05:32:13.002827Z", "url": "https://files.pythonhosted.org/packages/f3/fb/575b2141d85990ad81a57dd8bdac9cca43fff01adccfaadc0d13dd6a7b89/PyEvalJS-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed814f786288ea39d2b89fbef919da41", "sha256": "c2928bbb1e9705cf7cae00d8f8bd82b720c0fd796bb5cf42f2a1e92d34114cff"}, "downloads": -1, "filename": "PyEvalJS-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ed814f786288ea39d2b89fbef919da41", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 38484844, "upload_time": "2020-01-19T05:33:12", "upload_time_iso_8601": "2020-01-19T05:33:12.957011Z", "url": "https://files.pythonhosted.org/packages/2c/70/b3c76ad794e9aa2366100f673b06e5ce0c94e37b9f41c45bc28658ce636b/PyEvalJS-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:14 2020"}