{"info": {"author": "ixi audio", "author_email": "info@ixi-audio.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta"], "description": "SC allows to easily control Supercollider\r\n(http://en.wikipedia.org/wiki/SuperCollider) sound server (scsynth) from Python.\r\n\r\nIt wraps scsynth / scosc libraries by Patrick Stinson\r\n(http://trac2.assembla.com/pkaudio).They allow Python to talk to scsynth via\r\nOpenSoundControl (http://en.wikipedia.org/wiki/Open_Sound_Control). SC\r\nprovides with a simpler API to use those libraries. However advance users might\r\nwant to bypass SC and use those libraries directly.\r\n\r\nUsing SC, Supercollider Synthdefs can be loaded into the scsynth server\r\ntherefore can be totally controlled from python.\r\n\r\nNew synthdefs can be instantiated in real time new conections can be\r\ncreated and modified. SC can also be used from interactive Python to do live coding\r\n(http://en.wikipedia.org/wiki/Live_coding).\r\n\r\nFor example a simple synthdef that sends a sine wave to the sound card would\r\nlook like this in Supercollider's sclang :\r\n\r\n(\r\nSynthDef(\\sine, { |amp = 0.5, freq = 440|\r\n\tvar data = SinOsc.ar(freq, 0, amp);\r\n\tOut.ar(0, data ! 2);\r\n}).store;\r\n)\r\n\r\nCompiling this produces a file called sine.scsyndef that can be later loaded \r\nand controlled from Python using the SC module as easy as this:\r\n\r\nsine = sc.Synth( \"sine\" )\r\nsine.freq = 444\r\nsine.amp = 0.9\r\n... and so on ...", "description_content_type": null, "docs_url": null, "download_url": "http://www.ixi-software.net/content/download/sc/sc-0.3.1.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "www.ixi-audio.net/backyard", "keywords": "scsynth supercollider scosc", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "SC", "package_url": "https://pypi.org/project/SC/", "platform": "crossplatform", "project_url": "https://pypi.org/project/SC/", "project_urls": {"Download": "http://www.ixi-software.net/content/download/sc/sc-0.3.1.zip", "Homepage": "www.ixi-audio.net/backyard"}, "release_url": "https://pypi.org/project/SC/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "Easily control SuperCollider sound server from python", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            SC allows to easily control Supercollider\n<br>(http://en.wikipedia.org/wiki/SuperCollider) sound server (scsynth) from Python.\n<br>\n<br>It wraps scsynth / scosc libraries by Patrick Stinson\n<br>(http://trac2.assembla.com/pkaudio).They allow Python to talk to scsynth via\n<br>OpenSoundControl (http://en.wikipedia.org/wiki/Open_Sound_Control). SC\n<br>provides with a simpler API to use those libraries. However advance users might\n<br>want to bypass SC and use those libraries directly.\n<br>\n<br>Using SC, Supercollider Synthdefs can be loaded into the scsynth server\n<br>therefore can be totally controlled from python.\n<br>\n<br>New synthdefs can be instantiated in real time new conections can be\n<br>created and modified. SC can also be used from interactive Python to do live coding\n<br>(http://en.wikipedia.org/wiki/Live_coding).\n<br>\n<br>For example a simple synthdef that sends a sine wave to the sound card would\n<br>look like this in Supercollider's sclang :\n<br>\n<br>(\n<br>SynthDef(\\sine, { |amp = 0.5, freq = 440|\n<br>\tvar data = SinOsc.ar(freq, 0, amp);\n<br>\tOut.ar(0, data ! 2);\n<br>}).store;\n<br>)\n<br>\n<br>Compiling this produces a file called sine.scsyndef that can be later loaded \n<br>and controlled from Python using the SC module as easy as this:\n<br>\n<br>sine = sc.Synth( \"sine\" )\n<br>sine.freq = 444\n<br>sine.amp = 0.9\n<br>... and so on ...\n          </div>"}, "last_serial": 802674, "releases": {"0.1": [], "0.2": [], "0.3.1": []}, "urls": [], "timestamp": "Fri May  8 02:58:15 2020"}