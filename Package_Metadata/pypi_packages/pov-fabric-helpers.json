{"info": {"author": "Marius Gedminas", "author_email": "marius@pov.lt", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License"], "description": "Fabric Helpers\n==============\n\nThis is a collection of helpers we use in Fabric_ scripts.  They're primarily\nintended to manage Ubuntu servers (12.04 LTS or 14.04 LTS).\n\n.. _Fabric: http://www.fabfile.org/\n\n.. contents::\n\n\nHelpers (aka why would I want this?)\n------------------------------------\n\nAPT packages:\n\n- ``ensure_apt_not_outdated()`` - runs ``apt-get update`` at most once a day\n- ``install_packages(\"vim screen build-essential\")``\n- ``install_missing_packages(\"vim screen build-essential\")``\n- ``if not package_installed('git'): ...``\n- ``if not package_available('pov-admin-helpers'): ...``\n\nUser accounts:\n\n- ``ensure_user(\"myusername\")``\n\nSSH:\n\n- ``ensure_known_host(\"example.com ssh-rsa AAA....\")``\n\nLocales:\n\n- ``ensure_locales(\"en\", \"lt\")``\n\nFiles and directories:\n\n- ``ensure_directory(\"/srv/data\", mode=0o700)``\n- ``upload_file('crontab', '/etc/cron.d/mycrontab')``\n- ``generate_file('crontab.in', '/etc/cron.d/mycrontab', context, use_jinja=True)``\n- ``download_file('/home/user/.ssh/authorized_keys', 'https://example.com/ssh.pubkey')``\n\nGIT:\n\n- ``git_clone(\"git@github.com:ProgrammersOfVilnius/project.git\", \"/opt/project\")``\n- ``git_update(\"/opt/project\")``\n\nPostgreSQL:\n\n- ``ensure_postgresql_user(\"username\")``\n- ``ensure_postgresql_db(\"dbname\", \"owner\")``\n\nApache:\n\n- ``ensure_ssl_key(...)``\n- ``install_apache_website('apache.conf.in', 'example.com', context, use_jinja=True, modules='ssl rewrite proxy_http')```\n\nPostfix:\n\n- ``install_postfix_virtual_table('virtual', '/etc/postfix/virtual.example.com')```\n- ``make_postfix_public()``\n\nKeeping a changelog in /root/Changelog (requires\n/usr/sbin/new-changelog-entry from pov-admin-tools_)\n\n- ``changelog(\"# Installing stuff\")``\n- ``changelog_append(\"# more stuff\")``\n- ``changelog_banner(\"Installing stuff\")``\n- ``run_and_changelog(\"apt-get install stuff\")``\n\nplus many other helpers have ``changelog`` and/or ``changelog_append``\narguments to invoke these implicitly.\n\n.. _pov-admin-tools: https://github.com/ProgrammersOfVilnius/pov-admin-tools\n\n\nInstance management API\n-----------------------\n\nAll of my fabfiles can manage several *instances* of a particular service.\nExternally this looks like ::\n\n  fab instance1 task1 task2 instance2 task3\n\nwhich executes Fabric tasks ``task1`` and ``task2`` on instance ``instance1``\nand then executes ``task3`` on ``instance2``.\n\nAn instance defines various parameters, such as\n\n- what server hosts it\n- where on the filesystem it lives\n- what Unix user IDs are used\n- what database is used for this instance\n- etc.\n\nTo facilitate this ``pov_fabric`` provides three things:\n\n1. An ``Instance`` class that should be subclassed to provide your own instances\n\n   .. code:: python\n\n    from pov_fabric import Instance as BaseInstance\n\n    class Instance(BaseInstance):\n        def __init__(self, name, host, home='/opt/sentry', user='sentry',\n                     dbname='sentry'):\n            super(Instance, self).Instance.__init__(name, host)\n            self.home = home\n            self.user = user\n            self.dbname = dbname\n\n   and since that's a bit repetitive there's a helper\n\n   .. code:: python\n\n    from pov_fabric import Instance as BaseInstance\n\n    Instance = BaseInstance.with_params(\n        home='/opt/sentry',\n        user='sentry',\n        dbname='sentry',\n    )\n\n   which is equivalent to the original manual subclassing.\n\n   (BTW you can also add parameters with no sensible default this way, e.g.\n   ``BaseInstance.with_params(user=BaseInstance.REQUIRED)``.)\n\n2. An ``Instance.define()`` class method that defines new instances and\n   creates tasks for selecting them\n\n   .. code:: python\n\n    Instance.define(\n        name='testing',\n        host='root@vagrantbox',\n    )\n    Instance.define(\n        name='production',\n        host='server1.pov.lt',\n    )\n    Instance.define(\n        name='staging',\n        host='server1.pov.lt',\n        home='/opt/sentry-staging',\n        user='sentry-staging',\n        dbname='sentry-staging',\n    )\n\n   (BTW you can also define aliases with ``Instance.define_alias('prod',\n   'production')``.)\n\n3. A ``get_instance()`` function that returns the currently selected instance\n   (or aborts with an error if the user didn't select one)\n\n   .. code:: python\n\n    from pov_fabric import get_instance\n\n    @task\n    def look_around():\n        instance = get_instance()\n        with settings(host_string=instance.host):\n            run('hostname')\n\n\nPreviously I used a slightly different command style ::\n\n    fab task1:instance1 task2:instance1 task3:instance2\n\nand this can still be supported if you write your tasks like this\n\n.. code:: python\n\n    @task\n    def look_around(instance=None):\n        instance = get_instance(instance)\n        with settings(host_string=instance.host):\n            run('hostname')\n\nBe careful if you mix styles, e.g. ::\n\n    fab instance1 task1 task2:instance2 task3\n\nwill run ``task1`` and ``task3`` on ``instance1`` and it will run ``task2`` on\n``instance2``.\n\n\nUsage\n-----\n\nGet the latest release from PyPI::\n\n    pip install pov-fabric-helpers\n\nand then import the helpers you want in your ``fabfile.py``\n\n.. code:: python\n\n    from fabric.api import ...\n    from pov_fabric import ...\n\n\nUsage as a git submodule\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can add this repository as a git submodule\n\n.. code:: bash\n\n  cd ~/src/project\n  git submodule add https://github.com/ProgrammersOfVilnius/pov-fabric-helpers\n\nand in your ``fabfile.py`` add\n\n.. code:: python\n\n  sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'pov-fabric-helpers'))\n  if not os.path.exists(os.path.join(sys.path[0], 'pov_fabric.py')):\n      sys.exit(\"Please run 'git submodule update --init'.\")\n  from pov_fabric import ...\n\n\nTesting Fabfiles with Vagrant\n-----------------------------\n\nI don't know about you, but I was never able to write a fabfile.py that worked\non the first try.  Vagrant_ was very useful for testing fabfiles without\ndestroying real servers in the process.  Here's how:\n\n- Create a ``Vagrantfile`` somewhere with\n\n  .. code:: ruby\n\n    Vagrant.configure(\"2\") do |config|\n      config.vm.box = \"ubuntu/precise64\"  # Ubuntu 12.04\n      config.vm.provider :virtualbox do |vb|\n        vb.customize [\"modifyvm\", :id, \"--memory\", \"1024\"]\n      end\n    end\n\n- Run ``vagrant up``\n\n- Run ``vagrant ssh-config`` and copy the snippet to your ``~/.ssh/config``,\n  but change the name to ``vagrantbox``, e.g. ::\n\n    Host vagrantbox\n      HostName 127.0.0.1\n      User vagrant\n      Port 2222\n      UserKnownHostsFile /dev/null\n      StrictHostKeyChecking no\n      PasswordAuthentication no\n      IdentityFile ~/.vagrant.d/insecure_private_key\n      IdentitiesOnly yes\n      LogLevel FATAL\n\n- Test that ``ssh vagrantbox`` works\n\n- In your ``fabfile.py`` create a testing instance\n\n  .. code:: python\n\n    Instance.define(\n        name='testing',\n        host='vagrant@vagrantbox',\n        ...\n    )\n\n- Test with ``fab testing install`` etc.\n\n.. _Vagrant: https://www.vagrantup.com/\n\n\nChangelog\n=========\n\n\n0.3 (2016-09-11)\n----------------\n\n- ``register_host_key()`` now takes ``fingerprints`` so you can specify both\n  MD5 and SHA256 fingerprints.\n\n  Use either ``register_host_key(key, fingerprint=md5_fprint)`` or\n  ``register_host_key(key, fingerprints=[md5_fprint, sha256_fprint])``.\n\n- Low-level helper ``ssh_key_fingerprint()`` now takes ``force_md5`` so you\n  can insist on MD5 instead of whatever OpenSSH gives you by default (which is\n  SHA256 for modern OpenSSH).\n\n\n0.2 (2015-08-06)\n----------------\n\n- New helpers:\n\n  - ``git_update()``, ``register_host_key()``,\n  - ``ensure_locales()``,\n  - ``changelog_banner()``, ``run_and_changelog()``,\n    ``has_new_changelog_message()``,\n  - ``install_missing_packages()``, ``package_available()``,\n  - ``upload_file()``, ``generate_file()``, ``ensure_directory()``,\n    ``download_file()``,\n  - ``install_postfix_virtual_table()``,\n  - ``install_apache_website()``,\n  - ``ensure_ssl_key()``.\n\n- New optional arguments for existing helpers:\n\n  - ``git_clone()`` now takes ``branch`` and ``changelog``.\n  - ``ensure_user()`` now takes ``shell``, ``home``, ``create_home``, and\n    ``changelog``.\n  - ``install_packages()`` now takes ``changelog``.\n  - ``changelog()`` now takes ``context``.\n  - ``changelog_append()`` now takes ``context`` and ``optional``.\n  - ``changelog_banner()`` now takes ``context`` and ``optional``.\n\n- Increased safety:\n\n  - all helpers check their arguments for unsafe shell metacharacters.\n  - changelog() and friends quote the arguments correctly.\n\n- Improved instance API:\n\n  - allow ``str.format(**instance)`` (by making Instance a subclass of\n    ``dict``).\n  - allow instance aliases defined via ``Instance.define_alias(alias, name)``\n    static method.\n\n- Bugfixes:\n\n  - ``ensure_postgresql_db()`` now works correctly on Ubuntu 14.04.\n  - ``run_as_root`` now correctly handles ``env.host_string`` with no\n    username part.\n\n- New low-level helpers you're probably not interested in, unless you're\n  writing your own helpers:\n\n  - ``aslist()``, ``assert_shell_safe()``,\n  - ``ssh_key_fingerprint()``,\n  - ``render_jinja2()``, ``render_sinterp()``,\n  - ``parse_git_repo()``,\n  - ``generate_ssl_config()``, ``generate_ssl_key()``, ``generate_ssl_csr()``,\n  - ``get_postfix_setting()``, ``parse_postfix_setting()``,\n    ``add_postfix_virtual_map()``, ``add_postfix_setting()``,\n  - ``run_as_root()``.\n\n\n0.1 (2014-11-19)\n----------------\n\n- First public release.\n\n- Helpers:\n\n  - ``ensure_apt_not_outdated()``, ``package_installed()``,\n    ``install_packages()``,\n  - ``ensure_known_host()``, ``ensure_user()``,\n  - ``git_clone()``,\n  - ``ensure_postgresql_user()``, ``ensure_postgresql_db()``,\n  - ``changelog()``, ``changelog_append()``.\n\n- Instance API:\n\n  - ``class Instance``, ``Instance.with_params()``,\n    ``Instance.REQUIRED``, ``Instance.define()``.\n  - ``instance._asdict()``.\n  - ``get_instance()``.\n\n- Low-level helpers you're probably not interested in, unless you're\n  writing your own helpers:\n\n  - ``asbool()``,\n  - ``postgresql_user_exists()``, ``postgresql_db_exists()``.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ProgrammersOfVilnius/pov-fabric-helpers/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pov-fabric-helpers", "package_url": "https://pypi.org/project/pov-fabric-helpers/", "platform": "", "project_url": "https://pypi.org/project/pov-fabric-helpers/", "project_urls": {"Homepage": "https://github.com/ProgrammersOfVilnius/pov-fabric-helpers/"}, "release_url": "https://pypi.org/project/pov-fabric-helpers/0.3/", "requires_dist": ["Fabric"], "requires_python": "", "summary": "Fabric helpers we use at PoV", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"fabric-helpers\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Fabric Helpers</a></h2>\n<p>This is a collection of helpers we use in <a href=\"http://www.fabfile.org/\" rel=\"nofollow\">Fabric</a> scripts.  They\u2019re primarily\nintended to manage Ubuntu servers (12.04 LTS or 14.04 LTS).</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#fabric-helpers\" id=\"id4\" rel=\"nofollow\">Fabric Helpers</a><ul>\n<li><a href=\"#helpers-aka-why-would-i-want-this\" id=\"id5\" rel=\"nofollow\">Helpers (aka why would I want this?)</a></li>\n<li><a href=\"#instance-management-api\" id=\"id6\" rel=\"nofollow\">Instance management API</a></li>\n<li><a href=\"#usage\" id=\"id7\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#usage-as-a-git-submodule\" id=\"id8\" rel=\"nofollow\">Usage as a git submodule</a></li>\n</ul>\n</li>\n<li><a href=\"#testing-fabfiles-with-vagrant\" id=\"id9\" rel=\"nofollow\">Testing Fabfiles with Vagrant</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id10\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id11\" rel=\"nofollow\">0.3 (2016-09-11)</a></li>\n<li><a href=\"#id2\" id=\"id12\" rel=\"nofollow\">0.2 (2015-08-06)</a></li>\n<li><a href=\"#id3\" id=\"id13\" rel=\"nofollow\">0.1 (2014-11-19)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"helpers-aka-why-would-i-want-this\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Helpers (aka why would I want this?)</a></h3>\n<p>APT packages:</p>\n<ul>\n<li><tt>ensure_apt_not_outdated()</tt> - runs <tt><span class=\"pre\">apt-get</span> update</tt> at most once a day</li>\n<li><tt><span class=\"pre\">install_packages(\"vim</span> screen <span class=\"pre\">build-essential\")</span></tt></li>\n<li><tt><span class=\"pre\">install_missing_packages(\"vim</span> screen <span class=\"pre\">build-essential\")</span></tt></li>\n<li><tt>if not <span class=\"pre\">package_installed('git'):</span> ...</tt></li>\n<li><tt>if not <span class=\"pre\">package_available('pov-admin-helpers'):</span> ...</tt></li>\n</ul>\n<p>User accounts:</p>\n<ul>\n<li><tt><span class=\"pre\">ensure_user(\"myusername\")</span></tt></li>\n</ul>\n<p>SSH:</p>\n<ul>\n<li><tt><span class=\"pre\">ensure_known_host(\"example.com</span> <span class=\"pre\">ssh-rsa</span> <span class=\"pre\">AAA....\")</span></tt></li>\n</ul>\n<p>Locales:</p>\n<ul>\n<li><tt><span class=\"pre\">ensure_locales(\"en\",</span> \"lt\")</tt></li>\n</ul>\n<p>Files and directories:</p>\n<ul>\n<li><tt><span class=\"pre\">ensure_directory(\"/srv/data\",</span> mode=0o700)</tt></li>\n<li><tt><span class=\"pre\">upload_file('crontab',</span> '/etc/cron.d/mycrontab')</tt></li>\n<li><tt><span class=\"pre\">generate_file('crontab.in',</span> '/etc/cron.d/mycrontab', context, use_jinja=True)</tt></li>\n<li><tt><span class=\"pre\">download_file('/home/user/.ssh/authorized_keys',</span> <span class=\"pre\">'https://example.com/ssh.pubkey')</span></tt></li>\n</ul>\n<p>GIT:</p>\n<ul>\n<li><tt><span class=\"pre\">git_clone(\"git@github.com:ProgrammersOfVilnius/project.git\",</span> \"/opt/project\")</tt></li>\n<li><tt><span class=\"pre\">git_update(\"/opt/project\")</span></tt></li>\n</ul>\n<p>PostgreSQL:</p>\n<ul>\n<li><tt><span class=\"pre\">ensure_postgresql_user(\"username\")</span></tt></li>\n<li><tt><span class=\"pre\">ensure_postgresql_db(\"dbname\",</span> \"owner\")</tt></li>\n</ul>\n<p>Apache:</p>\n<ul>\n<li><tt><span class=\"pre\">ensure_ssl_key(...)</span></tt></li>\n<li><tt><span class=\"pre\">install_apache_website('apache.conf.in',</span> 'example.com', context, use_jinja=True, <span class=\"pre\">modules='ssl</span> rewrite <span class=\"pre\">proxy_http')`</span></tt></li>\n</ul>\n<p>Postfix:</p>\n<ul>\n<li><tt><span class=\"pre\">install_postfix_virtual_table('virtual',</span> <span class=\"pre\">'/etc/postfix/virtual.example.com')`</span></tt></li>\n<li><tt>make_postfix_public()</tt></li>\n</ul>\n<p>Keeping a changelog in /root/Changelog (requires\n/usr/sbin/new-changelog-entry from <a href=\"https://github.com/ProgrammersOfVilnius/pov-admin-tools\" rel=\"nofollow\">pov-admin-tools</a>)</p>\n<ul>\n<li><tt><span class=\"pre\">changelog(\"#</span> Installing stuff\")</tt></li>\n<li><tt><span class=\"pre\">changelog_append(\"#</span> more stuff\")</tt></li>\n<li><tt><span class=\"pre\">changelog_banner(\"Installing</span> stuff\")</tt></li>\n<li><tt><span class=\"pre\">run_and_changelog(\"apt-get</span> install stuff\")</tt></li>\n</ul>\n<p>plus many other helpers have <tt>changelog</tt> and/or <tt>changelog_append</tt>\narguments to invoke these implicitly.</p>\n</div>\n<div id=\"instance-management-api\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Instance management API</a></h3>\n<p>All of my fabfiles can manage several <em>instances</em> of a particular service.\nExternally this looks like</p>\n<pre>fab instance1 task1 task2 instance2 task3\n</pre>\n<p>which executes Fabric tasks <tt>task1</tt> and <tt>task2</tt> on instance <tt>instance1</tt>\nand then executes <tt>task3</tt> on <tt>instance2</tt>.</p>\n<p>An instance defines various parameters, such as</p>\n<ul>\n<li>what server hosts it</li>\n<li>where on the filesystem it lives</li>\n<li>what Unix user IDs are used</li>\n<li>what database is used for this instance</li>\n<li>etc.</li>\n</ul>\n<p>To facilitate this <tt>pov_fabric</tt> provides three things:</p>\n<ol>\n<li><p>An <tt>Instance</tt> class that should be subclassed to provide your own instances</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pov_fabric</span> <span class=\"kn\">import</span> <span class=\"n\">Instance</span> <span class=\"k\">as</span> <span class=\"n\">BaseInstance</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Instance</span><span class=\"p\">(</span><span class=\"n\">BaseInstance</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">home</span><span class=\"o\">=</span><span class=\"s1\">'/opt/sentry'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'sentry'</span><span class=\"p\">,</span>\n                 <span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"s1\">'sentry'</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Instance</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">Instance</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">home</span> <span class=\"o\">=</span> <span class=\"n\">home</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">user</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbname</span> <span class=\"o\">=</span> <span class=\"n\">dbname</span>\n</pre>\n<p>and since that\u2019s a bit repetitive there\u2019s a helper</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pov_fabric</span> <span class=\"kn\">import</span> <span class=\"n\">Instance</span> <span class=\"k\">as</span> <span class=\"n\">BaseInstance</span>\n\n<span class=\"n\">Instance</span> <span class=\"o\">=</span> <span class=\"n\">BaseInstance</span><span class=\"o\">.</span><span class=\"n\">with_params</span><span class=\"p\">(</span>\n    <span class=\"n\">home</span><span class=\"o\">=</span><span class=\"s1\">'/opt/sentry'</span><span class=\"p\">,</span>\n    <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'sentry'</span><span class=\"p\">,</span>\n    <span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"s1\">'sentry'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>which is equivalent to the original manual subclassing.</p>\n<p>(BTW you can also add parameters with no sensible default this way, e.g.\n<tt>BaseInstance.with_params(user=BaseInstance.REQUIRED)</tt>.)</p>\n</li>\n<li><p>An <tt>Instance.define()</tt> class method that defines new instances and\ncreates tasks for selecting them</p>\n<pre><span class=\"n\">Instance</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'testing'</span><span class=\"p\">,</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'root@vagrantbox'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">Instance</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'production'</span><span class=\"p\">,</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'server1.pov.lt'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">Instance</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'staging'</span><span class=\"p\">,</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'server1.pov.lt'</span><span class=\"p\">,</span>\n    <span class=\"n\">home</span><span class=\"o\">=</span><span class=\"s1\">'/opt/sentry-staging'</span><span class=\"p\">,</span>\n    <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'sentry-staging'</span><span class=\"p\">,</span>\n    <span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"s1\">'sentry-staging'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>(BTW you can also define aliases with <tt><span class=\"pre\">Instance.define_alias('prod',</span>\n'production')</tt>.)</p>\n</li>\n<li><p>A <tt>get_instance()</tt> function that returns the currently selected instance\n(or aborts with an error if the user didn\u2019t select one)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pov_fabric</span> <span class=\"kn\">import</span> <span class=\"n\">get_instance</span>\n\n<span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">look_around</span><span class=\"p\">():</span>\n    <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">get_instance</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">settings</span><span class=\"p\">(</span><span class=\"n\">host_string</span><span class=\"o\">=</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"p\">):</span>\n        <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'hostname'</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<p>Previously I used a slightly different command style</p>\n<pre>fab task1:instance1 task2:instance1 task3:instance2\n</pre>\n<p>and this can still be supported if you write your tasks like this</p>\n<pre><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">look_around</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">get_instance</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">settings</span><span class=\"p\">(</span><span class=\"n\">host_string</span><span class=\"o\">=</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"p\">):</span>\n        <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'hostname'</span><span class=\"p\">)</span>\n</pre>\n<p>Be careful if you mix styles, e.g.</p>\n<pre>fab instance1 task1 task2:instance2 task3\n</pre>\n<p>will run <tt>task1</tt> and <tt>task3</tt> on <tt>instance1</tt> and it will run <tt>task2</tt> on\n<tt>instance2</tt>.</p>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Usage</a></h3>\n<p>Get the latest release from PyPI:</p>\n<pre>pip install pov-fabric-helpers\n</pre>\n<p>and then import the helpers you want in your <tt>fabfile.py</tt></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fabric.api</span> <span class=\"kn\">import</span> <span class=\"o\">...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pov_fabric</span> <span class=\"kn\">import</span> <span class=\"o\">...</span>\n</pre>\n<div id=\"usage-as-a-git-submodule\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Usage as a git submodule</a></h4>\n<p>You can add this repository as a git submodule</p>\n<pre><span class=\"nb\">cd</span> ~/src/project\ngit submodule add https://github.com/ProgrammersOfVilnius/pov-fabric-helpers\n</pre>\n<p>and in your <tt>fabfile.py</tt> add</p>\n<pre><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">),</span> <span class=\"s1\">'pov-fabric-helpers'</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s1\">'pov_fabric.py'</span><span class=\"p\">)):</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s2\">\"Please run 'git submodule update --init'.\"</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pov_fabric</span> <span class=\"kn\">import</span> <span class=\"o\">...</span>\n</pre>\n</div>\n</div>\n<div id=\"testing-fabfiles-with-vagrant\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Testing Fabfiles with Vagrant</a></h3>\n<p>I don\u2019t know about you, but I was never able to write a fabfile.py that worked\non the first try.  <a href=\"https://www.vagrantup.com/\" rel=\"nofollow\">Vagrant</a> was very useful for testing fabfiles without\ndestroying real servers in the process.  Here\u2019s how:</p>\n<ul>\n<li><p>Create a <tt>Vagrantfile</tt> somewhere with</p>\n<pre><span class=\"no\">Vagrant</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"s2\">\"2\"</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">config</span><span class=\"o\">|</span>\n  <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">box</span> <span class=\"o\">=</span> <span class=\"s2\">\"ubuntu/precise64\"</span>  <span class=\"c1\"># Ubuntu 12.04</span>\n  <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">provider</span> <span class=\"ss\">:virtualbox</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">vb</span><span class=\"o\">|</span>\n    <span class=\"n\">vb</span><span class=\"o\">.</span><span class=\"n\">customize</span> <span class=\"o\">[</span><span class=\"s2\">\"modifyvm\"</span><span class=\"p\">,</span> <span class=\"ss\">:id</span><span class=\"p\">,</span> <span class=\"s2\">\"--memory\"</span><span class=\"p\">,</span> <span class=\"s2\">\"1024\"</span><span class=\"o\">]</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre>\n</li>\n<li><p>Run <tt>vagrant up</tt></p>\n</li>\n<li><p>Run <tt>vagrant <span class=\"pre\">ssh-config</span></tt> and copy the snippet to your <tt><span class=\"pre\">~/.ssh/config</span></tt>,\nbut change the name to <tt>vagrantbox</tt>, e.g.</p>\n<pre>Host vagrantbox\n  HostName 127.0.0.1\n  User vagrant\n  Port 2222\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile ~/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n</pre>\n</li>\n<li><p>Test that <tt>ssh vagrantbox</tt> works</p>\n</li>\n<li><p>In your <tt>fabfile.py</tt> create a testing instance</p>\n<pre><span class=\"n\">Instance</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'testing'</span><span class=\"p\">,</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'vagrant@vagrantbox'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Test with <tt>fab testing install</tt> etc.</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id11\" rel=\"nofollow\">0.3 (2016-09-11)</a></h3>\n<ul>\n<li><p><tt>register_host_key()</tt> now takes <tt>fingerprints</tt> so you can specify both\nMD5 and SHA256 fingerprints.</p>\n<p>Use either <tt>register_host_key(key, fingerprint=md5_fprint)</tt> or\n<tt>register_host_key(key, <span class=\"pre\">fingerprints=[md5_fprint,</span> sha256_fprint])</tt>.</p>\n</li>\n<li><p>Low-level helper <tt>ssh_key_fingerprint()</tt> now takes <tt>force_md5</tt> so you\ncan insist on MD5 instead of whatever OpenSSH gives you by default (which is\nSHA256 for modern OpenSSH).</p>\n</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id12\" rel=\"nofollow\">0.2 (2015-08-06)</a></h3>\n<ul>\n<li>New helpers:<ul>\n<li><tt>git_update()</tt>, <tt>register_host_key()</tt>,</li>\n<li><tt>ensure_locales()</tt>,</li>\n<li><tt>changelog_banner()</tt>, <tt>run_and_changelog()</tt>,\n<tt>has_new_changelog_message()</tt>,</li>\n<li><tt>install_missing_packages()</tt>, <tt>package_available()</tt>,</li>\n<li><tt>upload_file()</tt>, <tt>generate_file()</tt>, <tt>ensure_directory()</tt>,\n<tt>download_file()</tt>,</li>\n<li><tt>install_postfix_virtual_table()</tt>,</li>\n<li><tt>install_apache_website()</tt>,</li>\n<li><tt>ensure_ssl_key()</tt>.</li>\n</ul>\n</li>\n<li>New optional arguments for existing helpers:<ul>\n<li><tt>git_clone()</tt> now takes <tt>branch</tt> and <tt>changelog</tt>.</li>\n<li><tt>ensure_user()</tt> now takes <tt>shell</tt>, <tt>home</tt>, <tt>create_home</tt>, and\n<tt>changelog</tt>.</li>\n<li><tt>install_packages()</tt> now takes <tt>changelog</tt>.</li>\n<li><tt>changelog()</tt> now takes <tt>context</tt>.</li>\n<li><tt>changelog_append()</tt> now takes <tt>context</tt> and <tt>optional</tt>.</li>\n<li><tt>changelog_banner()</tt> now takes <tt>context</tt> and <tt>optional</tt>.</li>\n</ul>\n</li>\n<li>Increased safety:<ul>\n<li>all helpers check their arguments for unsafe shell metacharacters.</li>\n<li>changelog() and friends quote the arguments correctly.</li>\n</ul>\n</li>\n<li>Improved instance API:<ul>\n<li>allow <tt><span class=\"pre\">str.format(**instance)</span></tt> (by making Instance a subclass of\n<tt>dict</tt>).</li>\n<li>allow instance aliases defined via <tt>Instance.define_alias(alias, name)</tt>\nstatic method.</li>\n</ul>\n</li>\n<li>Bugfixes:<ul>\n<li><tt>ensure_postgresql_db()</tt> now works correctly on Ubuntu 14.04.</li>\n<li><tt>run_as_root</tt> now correctly handles <tt>env.host_string</tt> with no\nusername part.</li>\n</ul>\n</li>\n<li>New low-level helpers you\u2019re probably not interested in, unless you\u2019re\nwriting your own helpers:<ul>\n<li><tt>aslist()</tt>, <tt>assert_shell_safe()</tt>,</li>\n<li><tt>ssh_key_fingerprint()</tt>,</li>\n<li><tt>render_jinja2()</tt>, <tt>render_sinterp()</tt>,</li>\n<li><tt>parse_git_repo()</tt>,</li>\n<li><tt>generate_ssl_config()</tt>, <tt>generate_ssl_key()</tt>, <tt>generate_ssl_csr()</tt>,</li>\n<li><tt>get_postfix_setting()</tt>, <tt>parse_postfix_setting()</tt>,\n<tt>add_postfix_virtual_map()</tt>, <tt>add_postfix_setting()</tt>,</li>\n<li><tt>run_as_root()</tt>.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id13\" rel=\"nofollow\">0.1 (2014-11-19)</a></h3>\n<ul>\n<li>First public release.</li>\n<li>Helpers:<ul>\n<li><tt>ensure_apt_not_outdated()</tt>, <tt>package_installed()</tt>,\n<tt>install_packages()</tt>,</li>\n<li><tt>ensure_known_host()</tt>, <tt>ensure_user()</tt>,</li>\n<li><tt>git_clone()</tt>,</li>\n<li><tt>ensure_postgresql_user()</tt>, <tt>ensure_postgresql_db()</tt>,</li>\n<li><tt>changelog()</tt>, <tt>changelog_append()</tt>.</li>\n</ul>\n</li>\n<li>Instance API:<ul>\n<li><tt>class Instance</tt>, <tt>Instance.with_params()</tt>,\n<tt>Instance.REQUIRED</tt>, <tt>Instance.define()</tt>.</li>\n<li><tt>instance._asdict()</tt>.</li>\n<li><tt>get_instance()</tt>.</li>\n</ul>\n</li>\n<li>Low-level helpers you\u2019re probably not interested in, unless you\u2019re\nwriting your own helpers:<ul>\n<li><tt>asbool()</tt>,</li>\n<li><tt>postgresql_user_exists()</tt>, <tt>postgresql_db_exists()</tt>.</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2335892, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3cdaea535498fc52af09cedbe847ef29", "sha256": "696f4cb7d949ce209582ad7d47e102039c70fb606d7237de96210f695062b0f3"}, "downloads": -1, "filename": "pov-fabric-helpers-0.1.tar.gz", "has_sig": false, "md5_digest": "3cdaea535498fc52af09cedbe847ef29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7258, "upload_time": "2014-11-19T06:55:12", "upload_time_iso_8601": "2014-11-19T06:55:12.748684Z", "url": "https://files.pythonhosted.org/packages/75/8e/1c66099dff740951d4df000bd5807a8dc3dbf6959517ea36918d898bd148/pov-fabric-helpers-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ac4ec50029d62c3fb2d03c1461c013b8", "sha256": "55ec2e44c8b77b862d5e695a4c1960b6f482a22777aedd7af5ebb6a4accd1b3d"}, "downloads": -1, "filename": "pov-fabric-helpers-0.2.tar.gz", "has_sig": false, "md5_digest": "ac4ec50029d62c3fb2d03c1461c013b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21465, "upload_time": "2015-08-06T09:19:41", "upload_time_iso_8601": "2015-08-06T09:19:41.855322Z", "url": "https://files.pythonhosted.org/packages/d8/67/5b2222edc4837e7c54b5246293cfa9b5a23c7d1f1b5e8f542b7fab5011ba/pov-fabric-helpers-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "b274375b58b8f187eae9845b8633f6a3", "sha256": "9b21ec409f7d718a68d5d75a968ecff981a513e4f9c0b3772a7a8944359af3ca"}, "downloads": -1, "filename": "pov_fabric_helpers-0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "b274375b58b8f187eae9845b8633f6a3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 22022, "upload_time": "2016-09-11T07:18:22", "upload_time_iso_8601": "2016-09-11T07:18:22.695720Z", "url": "https://files.pythonhosted.org/packages/a0/85/671478cf55f81c86ec0eb1c1f969c0b00e2b39e872ddbf2d719696921a77/pov_fabric_helpers-0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71adee9f8d325b7c6a61b5905b1992c2", "sha256": "133a5c763ab0f2f34e3338578675f92a0c44f5eb074692dab7929751065fe7e8"}, "downloads": -1, "filename": "pov-fabric-helpers-0.3.tar.gz", "has_sig": false, "md5_digest": "71adee9f8d325b7c6a61b5905b1992c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23357, "upload_time": "2016-09-11T07:18:25", "upload_time_iso_8601": "2016-09-11T07:18:25.244988Z", "url": "https://files.pythonhosted.org/packages/b5/79/11e01dcfc8f280106832565ef7bc8c99e08db9ae0a68cad183d569ad43e4/pov-fabric-helpers-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b274375b58b8f187eae9845b8633f6a3", "sha256": "9b21ec409f7d718a68d5d75a968ecff981a513e4f9c0b3772a7a8944359af3ca"}, "downloads": -1, "filename": "pov_fabric_helpers-0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "b274375b58b8f187eae9845b8633f6a3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 22022, "upload_time": "2016-09-11T07:18:22", "upload_time_iso_8601": "2016-09-11T07:18:22.695720Z", "url": "https://files.pythonhosted.org/packages/a0/85/671478cf55f81c86ec0eb1c1f969c0b00e2b39e872ddbf2d719696921a77/pov_fabric_helpers-0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71adee9f8d325b7c6a61b5905b1992c2", "sha256": "133a5c763ab0f2f34e3338578675f92a0c44f5eb074692dab7929751065fe7e8"}, "downloads": -1, "filename": "pov-fabric-helpers-0.3.tar.gz", "has_sig": false, "md5_digest": "71adee9f8d325b7c6a61b5905b1992c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23357, "upload_time": "2016-09-11T07:18:25", "upload_time_iso_8601": "2016-09-11T07:18:25.244988Z", "url": "https://files.pythonhosted.org/packages/b5/79/11e01dcfc8f280106832565ef7bc8c99e08db9ae0a68cad183d569ad43e4/pov-fabric-helpers-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:46 2020"}