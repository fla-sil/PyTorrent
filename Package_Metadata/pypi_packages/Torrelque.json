{"info": {"author": "saaj", "author_email": "mail@saaj.me", "bugtrack_url": null, "classifiers": ["Framework :: AsyncIO", "Intended Audience :: Developers", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries"], "description": ".. image:: https://badge.fury.io/py/Torrelque.png\n  :target: https://pypi.python.org/pypi/Torrelque\n\n*********\nTorrelque\n*********\nTorrelque is a Python package that provides an asynchronous reliable Redis-backed queues.\n\nWithout further ado it's easy to say that the package is an implementation of the queue\ndescribed in this blog post [1]_ with some required changes and improvements. And here's a\ngreat overview presentation, Redis as a Reliable Work Queue [2]_, from the same engineers.\n\nPrior to version 0.2 Torrelque was Tornado-specific. Since version 5 Tornado runs on\n`asyncio` event loop by default, hence Torrelque can still be used with it.\n\nInstall\n=======\n.. sourcecode:: bash\n\n    pip install Torrelque\n\nUse\n===\n.. sourcecode:: python\n\n    #!/usr/bin/env python3.7\n\n\n    import random\n    import logging\n    import asyncio\n\n    import aredis\n    from torrelque import Torrelque\n\n\n    logger = logging.getLogger(__name__)\n\n\n    async def produce():\n        redis = aredis.StrictRedis(decode_responses=True)\n        queue = Torrelque(redis)\n        while True:\n            for _ in range(5):\n                task = {'value': random.randint(0, 99)}\n                logger.debug('Produced task %s', task)\n                await queue.enqueue(task)\n            await asyncio.sleep(10)\n\n\n    async def process(task_data):\n        logger.debug('Consmed task %s', task_data)\n        await asyncio.sleep(1)\n\n    async def consume():\n        redis = aredis.StrictRedis(decode_responses=True)\n        queue = Torrelque(redis)\n        while True:\n            task_id, task_data = await queue.dequeue()\n            if not task_id:\n                continue\n            try:\n                await process(task_data)\n                await queue.release(task_id)\n            except Exception:\n                logger.exception('Job processing has failed')\n                await queue.requeue(task_id, delay = 30)\n\n\n    async def main():\n        for _ in range(4):\n            asyncio.create_task(consume())\n\n        await produce()\n\n\n    if __name__ == '__main__':\n        logging.basicConfig(level = logging.DEBUG, format = '%(asctime)s %(message)s')\n        asyncio.run(main())\n\n\n\nPrior art\n=========\nThere's related, synchronous task queue package called *saferedisqueue* [3]_.\n\n\n.. [1] http://blog.bronto.com/engineering/reliable-queueing-in-redis-part-1/\n.. [2] https://www.percona.com/news-and-events/percona-university-smart-data-raleigh/using-redis-reliable-work-queue\n.. [3] https://pypi.org/project/saferedisqueue/\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://heptapod.host/saajns/torrelque", "keywords": "python redis asynchronous reliable-queue work-queue", "license": "LGPL-3.0-only", "maintainer": "", "maintainer_email": "", "name": "Torrelque", "package_url": "https://pypi.org/project/Torrelque/", "platform": "Any", "project_url": "https://pypi.org/project/Torrelque/", "project_urls": {"Homepage": "https://heptapod.host/saajns/torrelque"}, "release_url": "https://pypi.org/project/Torrelque/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Asynchronous Redis-based reliable queue package", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/Torrelque\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/Torrelque.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/971d63651cebdff0ef3fa2caf846f79cbafa5199/68747470733a2f2f62616467652e667572792e696f2f70792f546f7272656c7175652e706e67\"></a>\n<div id=\"torrelque\">\n<h2>Torrelque</h2>\n<p>Torrelque is a Python package that provides an asynchronous reliable Redis-backed queues.</p>\n<p>Without further ado it\u2019s easy to say that the package is an implementation of the queue\ndescribed in this blog post <a href=\"#id4\" id=\"id1\" rel=\"nofollow\">[1]</a> with some required changes and improvements. And here\u2019s a\ngreat overview presentation, Redis as a Reliable Work Queue <a href=\"#id5\" id=\"id2\" rel=\"nofollow\">[2]</a>, from the same engineers.</p>\n<p>Prior to version 0.2 Torrelque was Tornado-specific. Since version 5 Tornado runs on\n<cite>asyncio</cite> event loop by default, hence Torrelque can still be used with it.</p>\n<div id=\"install\">\n<h3>Install</h3>\n<pre>pip install Torrelque\n</pre>\n</div>\n<div id=\"use\">\n<h3>Use</h3>\n<pre><span class=\"ch\">#!/usr/bin/env python3.7</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">aredis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torrelque</span> <span class=\"kn\">import</span> <span class=\"n\">Torrelque</span>\n\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">produce</span><span class=\"p\">():</span>\n    <span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">aredis</span><span class=\"o\">.</span><span class=\"n\">StrictRedis</span><span class=\"p\">(</span><span class=\"n\">decode_responses</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">Torrelque</span><span class=\"p\">(</span><span class=\"n\">redis</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n            <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">)}</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'Produced task </span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">enqueue</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">task_data</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'Consmed task </span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">task_data</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">consume</span><span class=\"p\">():</span>\n    <span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">aredis</span><span class=\"o\">.</span><span class=\"n\">StrictRedis</span><span class=\"p\">(</span><span class=\"n\">decode_responses</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">Torrelque</span><span class=\"p\">(</span><span class=\"n\">redis</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">task_id</span><span class=\"p\">,</span> <span class=\"n\">task_data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">dequeue</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">task_id</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">task_data</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">(</span><span class=\"n\">task_id</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"s1\">'Job processing has failed'</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">requeue</span><span class=\"p\">(</span><span class=\"n\">task_id</span><span class=\"p\">,</span> <span class=\"n\">delay</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n        <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">consume</span><span class=\"p\">())</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">produce</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"prior-art\">\n<h3>Prior art</h3>\n<p>There\u2019s related, synchronous task queue package called <em>saferedisqueue</em> <a href=\"#id6\" id=\"id3\" rel=\"nofollow\">[3]</a>.</p>\n<table id=\"id4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td><a href=\"http://blog.bronto.com/engineering/reliable-queueing-in-redis-part-1/\" rel=\"nofollow\">http://blog.bronto.com/engineering/reliable-queueing-in-redis-part-1/</a></td></tr>\n</tbody>\n</table>\n<table id=\"id5\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td><a href=\"https://www.percona.com/news-and-events/percona-university-smart-data-raleigh/using-redis-reliable-work-queue\" rel=\"nofollow\">https://www.percona.com/news-and-events/percona-university-smart-data-raleigh/using-redis-reliable-work-queue</a></td></tr>\n</tbody>\n</table>\n<table id=\"id6\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[3]</a></td><td><a href=\"https://pypi.org/project/saferedisqueue/\" rel=\"nofollow\">https://pypi.org/project/saferedisqueue/</a></td></tr>\n</tbody>\n</table>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7112801, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "e8cee684573ee7be440a3d84e57f8372", "sha256": "0acebdf8c6b35f62ee82cd3333feec37e385c0a8cd646cfb105ffd92d4415fa7"}, "downloads": -1, "filename": "Torrelque-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e8cee684573ee7be440a3d84e57f8372", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5964, "upload_time": "2016-01-18T18:52:39", "upload_time_iso_8601": "2016-01-18T18:52:39.809345Z", "url": "https://files.pythonhosted.org/packages/af/16/be9dafa1e902596bb04bab26a6297f0dabb67a66ae2cb8e92ad201e57ff2/Torrelque-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9c76983fc8293543c11d40fcb4322cac", "sha256": "2bd22fa69b07a1b7b92df871e01db4383b2ff2a337542f075e8cc92d2335fdb9"}, "downloads": -1, "filename": "Torrelque-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9c76983fc8293543c11d40fcb4322cac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6047, "upload_time": "2020-04-27T15:57:29", "upload_time_iso_8601": "2020-04-27T15:57:29.563035Z", "url": "https://files.pythonhosted.org/packages/4b/1b/2002d68aeb5f9792c741079bd17d3e733b622e0bab40c0d8da5960ef93ee/Torrelque-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c76983fc8293543c11d40fcb4322cac", "sha256": "2bd22fa69b07a1b7b92df871e01db4383b2ff2a337542f075e8cc92d2335fdb9"}, "downloads": -1, "filename": "Torrelque-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9c76983fc8293543c11d40fcb4322cac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6047, "upload_time": "2020-04-27T15:57:29", "upload_time_iso_8601": "2020-04-27T15:57:29.563035Z", "url": "https://files.pythonhosted.org/packages/4b/1b/2002d68aeb5f9792c741079bd17d3e733b622e0bab40c0d8da5960ef93ee/Torrelque-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:43 2020"}