{"info": {"author": "Scott Gigante, Yale University", "author_email": "scott.gigante@yale.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Framework :: Jupyter", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Visualization"], "description": "# M-PHATE\n\n[![Latest PyPi version](https://img.shields.io/pypi/v/m-phate.svg)](https://pypi.org/project/m-phate/)\n[![Travis CI Build](https://api.travis-ci.com/scottgigante/m-phate.svg?branch=master)](https://travis-ci.com/scottgigante/m-phate)\n[![Coverage Status](https://coveralls.io/repos/github/scottgigante/m-phate/badge.svg?branch=master)](https://coveralls.io/github/scottgigante/m-phate?branch=master)\n[![arXiv Preprint](http://img.shields.io/badge/cs.LG-arXiv%3A1908.02831-B31B1B.svg)](https://arxiv.org/abs/1908.02831)\n[![Twitter](https://img.shields.io/twitter/follow/scottgigante.svg?style=social&label=Follow)](https://twitter.com/scottgigante)\n[![GitHub stars](https://img.shields.io/github/stars/scottgigante/M-PHATE.svg?style=social&label=Stars)](https://github.com/scottgigante/M-PHATE/)\n\n![Demonstration M-PHATE plot](https://github.com/scottgigante/m-phate/raw/master/img/demonstration.png)\n\nMultislice PHATE (M-PHATE) is a dimensionality reduction algorithm for the visualization of time-evolving data. To learn more about M-PHATE, you can read our preprint on arXiv in which we apply it to the evolution of neural networks over the course of training. Above we show a demonstration of M-PHATE applied to a 3-layer MLP over 300 epochs of training, colored by epoch (left), hidden layer (center) and the digit label that most strongly activates each hidden unit (right). Below, you see the same network with dropout applied in training embedded in 3D, also colored by most active unit.\n\n### Table of Contents\n\n* [How it works](#How-it-works)\n* [Installation](#Installation)\n* [Usage](#Usage)\n  * [Basic Usage Example](#Basic-usage-example)\n  * [Network Training](#Network-training)\n  * [Example Notebooks](#Example-notebooks)\n* [Parameter Tuning](#Parameter-tuning)\n* [Figure Reproduction](#Figure-reproduction)\n* [Help](#Help)\n\n![3D rotating gif](https://github.com/scottgigante/m-phate/blob/master/img/dropout3d.gif)\n\n## How it works\n\nMultislice PHATE (M-PHATE) combines a novel multislice kernel construction with the [PHATE visualization](https://github.com/KrishnaswamyLab/PHATE). Our kernel captures the dynamics of an evolving graph structure, that when when visualized, gives unique intuition about the evolution of a system; in our preprint, we show this applied to a neural network over the course of training and re-training. We compare M-PHATE to other dimensionality reduction techniques, showing that the combined construction of the multislice kernel and the use of PHATE provide significant improvements to visualization. In two vignettes, we demonstrate the use M-PHATE on established training tasks and learning methods in continual learning, and in regularization techniques commonly used to improve generalization performance.\n\nThe multislice kernel used in M-PHATE consists of building graphs over time slices of data (e.g. epochs in neural network training) and then connecting these slices by connecting each point to itself over time, weighted by its similarity. The result is a highly sparse, structured kernel which provides insight into the evolving structure of the data.\n\nFor more details, check out our [NeurIPS publication](https://arxiv.org/abs/1908.02831), read the [tweetorial](https://twitter.com/scottgigante/status/1159831780926427136) or have a look at our [poster](https://github.com/scottgigante/m-phate/blob/master/img/poster.pdf).\n\n![Example of multislice graph](https://github.com/scottgigante/m-phate/blob/master/img/multislice_graph.png)\n\n![Example of multislice kernel](https://github.com/scottgigante/m-phate/blob/master/img/multislice_kernel.png)\n\n## Installation\n\n### Install from `pypi`\n\n```\npip install --user m-phate\n```\n\n### Install from source\n\n```\npip install --user git+https://github.com/scottgigante/m-phate.git\n```\n\n## Usage\n\n### Basic usage example\n\nBelow we apply M-PHATE to simulated data of 50 points undergoing random motion.\n\n```\nimport numpy as np\nimport m_phate\nimport scprep\n\n# create fake data\nn_time_steps = 100\nn_points = 50\nn_dim = 25\nnp.random.seed(42)\ndata = np.cumsum(np.random.normal(0, 1, (n_time_steps, n_points, n_dim)), axis=0)\n\n# embedding\nm_phate_op = m_phate.M_PHATE()\nm_phate_data = m_phate_op.fit_transform(data)\n\n# plot\ntime = np.repeat(np.arange(n_time_steps), n_points)\nscprep.plot.scatter2d(m_phate_data, c=time, ticks=False, label_prefix=\"M-PHATE\")\n```\n\n![Example embedding](https://github.com/scottgigante/m-phate/blob/master/img/example.png)\n\n### Network training\n\nTo apply M-PHATE to neural networks, we provide helper classes to store the samples from the network during training. In order to use these, you must install [`tensorflow`](https://www.tensorflow.org/install) and [`keras`](https://keras.io/#installation).\n\n```\nimport numpy as np\n\nimport keras\nimport scprep\n\nimport m_phate\nimport m_phate.train\nimport m_phate.data\n\n# load data\nx_train, x_test, y_train, y_test = m_phate.data.load_mnist()\n\n# select trace examples\ntrace_idx = [np.random.choice(np.argwhere(y_test[:, i] == 1).flatten(),\n                              10, replace=False)\n             for i in range(10)]\ntrace_data = x_test[np.concatenate(trace_idx)]\n\n# build neural network\nlrelu = keras.layers.LeakyReLU(alpha=0.1)\ninputs = keras.layers.Input(\n    shape=(x_train.shape[1],), dtype='float32', name='inputs')\nh1 = keras.layers.Dense(128, activation=lrelu, name='h1')(inputs)\nh2 = keras.layers.Dense(64, activation=lrelu, name='h2')(h1)\nh3 = keras.layers.Dense(128, activation=lrelu, name='h3')(h2)\noutputs = keras.layers.Dense(10, activation='softmax', name='output_all')(h3)\n\n# build trace model helper\nmodel_trace = keras.models.Model(inputs=inputs, outputs=[h1, h2, h3])\ntrace = m_phate.train.TraceHistory(trace_data, model_trace)\n\n# compile network\nmodel = keras.models.Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy',\n              metrics=['categorical_accuracy', 'categorical_crossentropy'])\n\n# train network\nmodel.fit(x_train, y_train, batch_size=128, epochs=200,\n          verbose=1, callbacks=[trace],\n          validation_data=(x_test,\n                           y_test))\n\n# extract trace data\ntrace_data = np.array(trace.trace)\nepoch = np.repeat(np.arange(trace_data.shape[0]), trace_data.shape[1])\n\n# apply M-PHATE\nm_phate_op = m_phate.M_PHATE()\nm_phate_data = m_phate_op.fit_transform(trace_data)\n\n# plot the result\nscprep.plot.scatter2d(m_phate_data, c=epoch, ticks=False,\n                      label_prefix=\"M-PHATE\")\n```\n\n### Example notebooks\n\nFor detailed examples, see our sample notebooks in `keras` and `tensorflow` in [`examples`](https://github.com/scottgigante/m-phate/tree/master/examples):\n\n* Keras\n  * [Classifier](https://nbviewer.jupyter.org/github/scottgigante/m-phate/blob/master/examples/classification_keras.ipynb)\n  * [Autoencoder](https://nbviewer.jupyter.org/github/scottgigante/m-phate/blob/master/examples/autoencoder_keras.ipynb)\n* Tensorflow\n  * [Classifier](https://nbviewer.jupyter.org/github/scottgigante/m-phate/blob/master/examples/classification_tensorflow.ipynb)\n  * [Autoencoder](https://nbviewer.jupyter.org/github/scottgigante/m-phate/blob/master/examples/autoencoder_tensorflow.ipynb)\n\n## Parameter tuning\n\nThe key to tuning the parameters of M-PHATE is essentially balancing the tradeoff between interslice connectivity and intraslice connectivity. This is primarily achieved with `interslice_knn` and `intraslice_knn`. You can see an example of the effects of parameter tuning in [this notebook](https://nbviewer.jupyter.org/github/scottgigante/m-phate/blob/master/examples/parameter_tuning.ipynb).\n\n## Figure reproduction\n\nWe provide scripts to reproduce all of the empirical figures in the preprint. \n\nTo run them:\n\n```\ngit clone https://github.com/scottgigante/m-phate\ncd m-phate\npip install --user .\n\n# change this if you want to store the data elsewhere\nDATA_DIR=~/data/checkpoints/m_phate\n\n# choose between cifar and mnist\nDATASET=\"mnist\"\nEXTRA_ARGS=\"--dataset ${DATASET}\"\n\n# remove to use validation data\nEXTRA_ARGS=\"${EXTRA_ARGS} --sample-train-data\"\n\nchmod +x scripts/generalization/generalization_train.sh\nchmod +x scripts/task_switching/classifier_mnist_task_switch_train.sh\n\n./scripts/generalization/generalization_train.sh \"${DATA_DIR}\" \"${EXTRA_ARGS}\"\n./scripts/task_switching/classifier_mnist_task_switch_train.sh \"${DATA_DIR}\" \"${EXTRA_ARGS}\"\n\npython scripts/demonstration_plot.py \"${DATA_DIR}\" \"${DATASET}\"\npython scripts/comparison_plot.py \"${DATA_DIR}\" \"${DATASET}\"\npython scripts/generalization_plot.py \"${DATA_DIR}\" \"${DATASET}\"\npython scripts/task_switch_plot.py \"${DATA_DIR}\" \"${DATASET}\"\n```\n\n## TODO\n\n* Provide support for PyTorch\n* Notebook examples for:\n  * Classification, pytorch\n  * Autoencoder, pytorch\n* Build readthedocs page\n\n## Help\n\nIf you have any questions, please feel free to [open an issue](https://github.com/scottgigante/m-phate/issues).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/scottgigante/m-phate/archive/v0.1.6.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scottgigante/m-phate", "keywords": "big-data,computational-biology", "license": "GNU General Public License Version 3", "maintainer": "", "maintainer_email": "", "name": "m-phate", "package_url": "https://pypi.org/project/m-phate/", "platform": "", "project_url": "https://pypi.org/project/m-phate/", "project_urls": {"Download": "https://github.com/scottgigante/m-phate/archive/v0.1.6.tar.gz", "Homepage": "https://github.com/scottgigante/m-phate"}, "release_url": "https://pypi.org/project/m-phate/0.1.6/", "requires_dist": ["numpy (>=1.16.0)", "scipy (>=1.1.0)", "scikit-learn (>=0.19.1)", "pandas (>=0.25)", "joblib", "scprep (>=1.0)", "phate (>=1.0.0)", "graphtools (>=1.5)", "tasklogger (>=1.0)", "matplotlib (>=3.0)", "sphinx (<=1.8.5) ; extra == 'doc'", "sphinxcontrib-napoleon ; extra == 'doc'", "autodocsumm ; extra == 'doc'", "ipykernel ; extra == 'doc'", "nbsphinx ; extra == 'doc'", "nose2 ; extra == 'test'", "coverage ; extra == 'test'", "coveralls ; extra == 'test'", "keras (>=2.2) ; extra == 'test'", "tensorflow (<2.0,>=1.13) ; extra == 'test'", "parameterized ; extra == 'test'"], "requires_python": "", "summary": "m-phate", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>M-PHATE</h1>\n<p><a href=\"https://pypi.org/project/m-phate/\" rel=\"nofollow\"><img alt=\"Latest PyPi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac9b45c90e8d3bffeaec56cb245c469047630799/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d2d70686174652e737667\"></a>\n<a href=\"https://travis-ci.com/scottgigante/m-phate\" rel=\"nofollow\"><img alt=\"Travis CI Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e1e5945dedbc1dbfbb1ddb344e335a9392a7807/68747470733a2f2f6170692e7472617669732d63692e636f6d2f73636f7474676967616e74652f6d2d70686174652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/scottgigante/m-phate?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1087c0ef671152d73cb8b85019a28b6449d5c78/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f73636f7474676967616e74652f6d2d70686174652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://arxiv.org/abs/1908.02831\" rel=\"nofollow\"><img alt=\"arXiv Preprint\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/509cb1d8c3f916cbf22dc658e26810e24fb0b2bc/687474703a2f2f696d672e736869656c64732e696f2f62616467652f63732e4c472d6172586976253341313930382e30323833312d4233314231422e737667\"></a>\n<a href=\"https://twitter.com/scottgigante\" rel=\"nofollow\"><img alt=\"Twitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4769533624c7349021842e3258973ccd82cf7e46/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f73636f7474676967616e74652e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77\"></a>\n<a href=\"https://github.com/scottgigante/M-PHATE/\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13290c36e0ce5058c88d987061e1ca8fbbec327f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f73636f7474676967616e74652f4d2d50484154452e7376673f7374796c653d736f6369616c266c6162656c3d5374617273\"></a></p>\n<p><img alt=\"Demonstration M-PHATE plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6fea88e965b2fd72159df27d4ec591213a1ec254/68747470733a2f2f6769746875622e636f6d2f73636f7474676967616e74652f6d2d70686174652f7261772f6d61737465722f696d672f64656d6f6e7374726174696f6e2e706e67\"></p>\n<p>Multislice PHATE (M-PHATE) is a dimensionality reduction algorithm for the visualization of time-evolving data. To learn more about M-PHATE, you can read our preprint on arXiv in which we apply it to the evolution of neural networks over the course of training. Above we show a demonstration of M-PHATE applied to a 3-layer MLP over 300 epochs of training, colored by epoch (left), hidden layer (center) and the digit label that most strongly activates each hidden unit (right). Below, you see the same network with dropout applied in training embedded in 3D, also colored by most active unit.</p>\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#How-it-works\" rel=\"nofollow\">How it works</a></li>\n<li><a href=\"#Installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#Usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#Basic-usage-example\" rel=\"nofollow\">Basic Usage Example</a></li>\n<li><a href=\"#Network-training\" rel=\"nofollow\">Network Training</a></li>\n<li><a href=\"#Example-notebooks\" rel=\"nofollow\">Example Notebooks</a></li>\n</ul>\n</li>\n<li><a href=\"#Parameter-tuning\" rel=\"nofollow\">Parameter Tuning</a></li>\n<li><a href=\"#Figure-reproduction\" rel=\"nofollow\">Figure Reproduction</a></li>\n<li><a href=\"#Help\" rel=\"nofollow\">Help</a></li>\n</ul>\n<p><img alt=\"3D rotating gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2cea33e0953d9cbbe81e07455df52b5f7ed0f63/68747470733a2f2f6769746875622e636f6d2f73636f7474676967616e74652f6d2d70686174652f626c6f622f6d61737465722f696d672f64726f706f757433642e676966\"></p>\n<h2>How it works</h2>\n<p>Multislice PHATE (M-PHATE) combines a novel multislice kernel construction with the <a href=\"https://github.com/KrishnaswamyLab/PHATE\" rel=\"nofollow\">PHATE visualization</a>. Our kernel captures the dynamics of an evolving graph structure, that when when visualized, gives unique intuition about the evolution of a system; in our preprint, we show this applied to a neural network over the course of training and re-training. We compare M-PHATE to other dimensionality reduction techniques, showing that the combined construction of the multislice kernel and the use of PHATE provide significant improvements to visualization. In two vignettes, we demonstrate the use M-PHATE on established training tasks and learning methods in continual learning, and in regularization techniques commonly used to improve generalization performance.</p>\n<p>The multislice kernel used in M-PHATE consists of building graphs over time slices of data (e.g. epochs in neural network training) and then connecting these slices by connecting each point to itself over time, weighted by its similarity. The result is a highly sparse, structured kernel which provides insight into the evolving structure of the data.</p>\n<p>For more details, check out our <a href=\"https://arxiv.org/abs/1908.02831\" rel=\"nofollow\">NeurIPS publication</a>, read the <a href=\"https://twitter.com/scottgigante/status/1159831780926427136\" rel=\"nofollow\">tweetorial</a> or have a look at our <a href=\"https://github.com/scottgigante/m-phate/blob/master/img/poster.pdf\" rel=\"nofollow\">poster</a>.</p>\n<p><img alt=\"Example of multislice graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d76203ca53701c6b32da88ec7c29564c0cf1ebc/68747470733a2f2f6769746875622e636f6d2f73636f7474676967616e74652f6d2d70686174652f626c6f622f6d61737465722f696d672f6d756c7469736c6963655f67726170682e706e67\"></p>\n<p><img alt=\"Example of multislice kernel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/136ae174795aa93536f802bd769a528dab74efa3/68747470733a2f2f6769746875622e636f6d2f73636f7474676967616e74652f6d2d70686174652f626c6f622f6d61737465722f696d672f6d756c7469736c6963655f6b65726e656c2e706e67\"></p>\n<h2>Installation</h2>\n<h3>Install from <code>pypi</code></h3>\n<pre><code>pip install --user m-phate\n</code></pre>\n<h3>Install from source</h3>\n<pre><code>pip install --user git+https://github.com/scottgigante/m-phate.git\n</code></pre>\n<h2>Usage</h2>\n<h3>Basic usage example</h3>\n<p>Below we apply M-PHATE to simulated data of 50 points undergoing random motion.</p>\n<pre><code>import numpy as np\nimport m_phate\nimport scprep\n\n# create fake data\nn_time_steps = 100\nn_points = 50\nn_dim = 25\nnp.random.seed(42)\ndata = np.cumsum(np.random.normal(0, 1, (n_time_steps, n_points, n_dim)), axis=0)\n\n# embedding\nm_phate_op = m_phate.M_PHATE()\nm_phate_data = m_phate_op.fit_transform(data)\n\n# plot\ntime = np.repeat(np.arange(n_time_steps), n_points)\nscprep.plot.scatter2d(m_phate_data, c=time, ticks=False, label_prefix=\"M-PHATE\")\n</code></pre>\n<p><img alt=\"Example embedding\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6be279fcb37cc14cf4a630e9598943220c2593c8/68747470733a2f2f6769746875622e636f6d2f73636f7474676967616e74652f6d2d70686174652f626c6f622f6d61737465722f696d672f6578616d706c652e706e67\"></p>\n<h3>Network training</h3>\n<p>To apply M-PHATE to neural networks, we provide helper classes to store the samples from the network during training. In order to use these, you must install <a href=\"https://www.tensorflow.org/install\" rel=\"nofollow\"><code>tensorflow</code></a> and <a href=\"https://keras.io/#installation\" rel=\"nofollow\"><code>keras</code></a>.</p>\n<pre><code>import numpy as np\n\nimport keras\nimport scprep\n\nimport m_phate\nimport m_phate.train\nimport m_phate.data\n\n# load data\nx_train, x_test, y_train, y_test = m_phate.data.load_mnist()\n\n# select trace examples\ntrace_idx = [np.random.choice(np.argwhere(y_test[:, i] == 1).flatten(),\n                              10, replace=False)\n             for i in range(10)]\ntrace_data = x_test[np.concatenate(trace_idx)]\n\n# build neural network\nlrelu = keras.layers.LeakyReLU(alpha=0.1)\ninputs = keras.layers.Input(\n    shape=(x_train.shape[1],), dtype='float32', name='inputs')\nh1 = keras.layers.Dense(128, activation=lrelu, name='h1')(inputs)\nh2 = keras.layers.Dense(64, activation=lrelu, name='h2')(h1)\nh3 = keras.layers.Dense(128, activation=lrelu, name='h3')(h2)\noutputs = keras.layers.Dense(10, activation='softmax', name='output_all')(h3)\n\n# build trace model helper\nmodel_trace = keras.models.Model(inputs=inputs, outputs=[h1, h2, h3])\ntrace = m_phate.train.TraceHistory(trace_data, model_trace)\n\n# compile network\nmodel = keras.models.Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy',\n              metrics=['categorical_accuracy', 'categorical_crossentropy'])\n\n# train network\nmodel.fit(x_train, y_train, batch_size=128, epochs=200,\n          verbose=1, callbacks=[trace],\n          validation_data=(x_test,\n                           y_test))\n\n# extract trace data\ntrace_data = np.array(trace.trace)\nepoch = np.repeat(np.arange(trace_data.shape[0]), trace_data.shape[1])\n\n# apply M-PHATE\nm_phate_op = m_phate.M_PHATE()\nm_phate_data = m_phate_op.fit_transform(trace_data)\n\n# plot the result\nscprep.plot.scatter2d(m_phate_data, c=epoch, ticks=False,\n                      label_prefix=\"M-PHATE\")\n</code></pre>\n<h3>Example notebooks</h3>\n<p>For detailed examples, see our sample notebooks in <code>keras</code> and <code>tensorflow</code> in <a href=\"https://github.com/scottgigante/m-phate/tree/master/examples\" rel=\"nofollow\"><code>examples</code></a>:</p>\n<ul>\n<li>Keras\n<ul>\n<li><a href=\"https://nbviewer.jupyter.org/github/scottgigante/m-phate/blob/master/examples/classification_keras.ipynb\" rel=\"nofollow\">Classifier</a></li>\n<li><a href=\"https://nbviewer.jupyter.org/github/scottgigante/m-phate/blob/master/examples/autoencoder_keras.ipynb\" rel=\"nofollow\">Autoencoder</a></li>\n</ul>\n</li>\n<li>Tensorflow\n<ul>\n<li><a href=\"https://nbviewer.jupyter.org/github/scottgigante/m-phate/blob/master/examples/classification_tensorflow.ipynb\" rel=\"nofollow\">Classifier</a></li>\n<li><a href=\"https://nbviewer.jupyter.org/github/scottgigante/m-phate/blob/master/examples/autoencoder_tensorflow.ipynb\" rel=\"nofollow\">Autoencoder</a></li>\n</ul>\n</li>\n</ul>\n<h2>Parameter tuning</h2>\n<p>The key to tuning the parameters of M-PHATE is essentially balancing the tradeoff between interslice connectivity and intraslice connectivity. This is primarily achieved with <code>interslice_knn</code> and <code>intraslice_knn</code>. You can see an example of the effects of parameter tuning in <a href=\"https://nbviewer.jupyter.org/github/scottgigante/m-phate/blob/master/examples/parameter_tuning.ipynb\" rel=\"nofollow\">this notebook</a>.</p>\n<h2>Figure reproduction</h2>\n<p>We provide scripts to reproduce all of the empirical figures in the preprint.</p>\n<p>To run them:</p>\n<pre><code>git clone https://github.com/scottgigante/m-phate\ncd m-phate\npip install --user .\n\n# change this if you want to store the data elsewhere\nDATA_DIR=~/data/checkpoints/m_phate\n\n# choose between cifar and mnist\nDATASET=\"mnist\"\nEXTRA_ARGS=\"--dataset ${DATASET}\"\n\n# remove to use validation data\nEXTRA_ARGS=\"${EXTRA_ARGS} --sample-train-data\"\n\nchmod +x scripts/generalization/generalization_train.sh\nchmod +x scripts/task_switching/classifier_mnist_task_switch_train.sh\n\n./scripts/generalization/generalization_train.sh \"${DATA_DIR}\" \"${EXTRA_ARGS}\"\n./scripts/task_switching/classifier_mnist_task_switch_train.sh \"${DATA_DIR}\" \"${EXTRA_ARGS}\"\n\npython scripts/demonstration_plot.py \"${DATA_DIR}\" \"${DATASET}\"\npython scripts/comparison_plot.py \"${DATA_DIR}\" \"${DATASET}\"\npython scripts/generalization_plot.py \"${DATA_DIR}\" \"${DATASET}\"\npython scripts/task_switch_plot.py \"${DATA_DIR}\" \"${DATASET}\"\n</code></pre>\n<h2>TODO</h2>\n<ul>\n<li>Provide support for PyTorch</li>\n<li>Notebook examples for:\n<ul>\n<li>Classification, pytorch</li>\n<li>Autoencoder, pytorch</li>\n</ul>\n</li>\n<li>Build readthedocs page</li>\n</ul>\n<h2>Help</h2>\n<p>If you have any questions, please feel free to <a href=\"https://github.com/scottgigante/m-phate/issues\" rel=\"nofollow\">open an issue</a>.</p>\n\n          </div>"}, "last_serial": 6786755, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5e8e1f219a7c9f670d7c522099e4e807", "sha256": "791c2f72ad442507576d7b978591b97e57c3b1ae30dbb4996032ae58e9e256d0"}, "downloads": -1, "filename": "m_phate-0.1.0-py3.5.egg", "has_sig": false, "md5_digest": "5e8e1f219a7c9f670d7c522099e4e807", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 20536, "upload_time": "2019-08-07T23:35:39", "upload_time_iso_8601": "2019-08-07T23:35:39.256080Z", "url": "https://files.pythonhosted.org/packages/53/f4/56f3246b36a044b04daf127517a58dbc9a6ae7506ee35d91e7e8bf50bbf3/m_phate-0.1.0-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "eede5970a2082ae117601b61b6b5eca6", "sha256": "e0530ac1be2340f6604d153965f16341a9099a664596d9f7b7c6393730d422ad"}, "downloads": -1, "filename": "m_phate-0.1.0-py3.6.egg", "has_sig": false, "md5_digest": "eede5970a2082ae117601b61b6b5eca6", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 20363, "upload_time": "2019-08-07T23:35:39", "upload_time_iso_8601": "2019-08-07T23:35:39.219897Z", "url": "https://files.pythonhosted.org/packages/39/97/79efeef45e2c9ed8909f2f1f58fcc1c7495fe94d521a3c4a9afa172cfbe9/m_phate-0.1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1d2adfff5aede832496e89fb8d633b4", "sha256": "77118aa1bd27ba92db4deb0eccd3694b73f0cb9dc3974ee069a0aa92dfedd961"}, "downloads": -1, "filename": "m_phate-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "b1d2adfff5aede832496e89fb8d633b4", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 20395, "upload_time": "2019-08-07T23:35:39", "upload_time_iso_8601": "2019-08-07T23:35:39.526594Z", "url": "https://files.pythonhosted.org/packages/d9/99/4d0ad4bca46723838d442f596ca97d0d82649464ac80e12cdfa1f952eadb/m_phate-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "269c1416e2dbfcddb855e0ca9c1630eb", "sha256": "68dd6d84eba43b5c1acc6114630efeae84853e4576dce0502b5c05e476b6d15c"}, "downloads": -1, "filename": "m_phate-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "269c1416e2dbfcddb855e0ca9c1630eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23551, "upload_time": "2019-08-07T23:35:36", "upload_time_iso_8601": "2019-08-07T23:35:36.954263Z", "url": "https://files.pythonhosted.org/packages/29/9a/2fdc414e4aa136088385bf59ac7c5a66b726e32b336db89078fe2f00fefc/m_phate-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e11b508291a489ccf262bfe22d39f529", "sha256": "b5c7f1e47dc6507a502d89a39091fe9c910f3a06a287cabd31b41a68eac01698"}, "downloads": -1, "filename": "m_phate-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e11b508291a489ccf262bfe22d39f529", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15104, "upload_time": "2019-08-07T23:35:40", "upload_time_iso_8601": "2019-08-07T23:35:40.486811Z", "url": "https://files.pythonhosted.org/packages/e3/a6/b5dfd332ea0a5cfc90a89b58164ffe2704a98ff18ee0a61b3543b511604d/m_phate-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "32032f38e6851618a54ddd533a8a1c3e", "sha256": "987876d69baa7ea74419becf20f0e3ba183ea449b7b22fc9e590e1015ed9c962"}, "downloads": -1, "filename": "m_phate-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "32032f38e6851618a54ddd533a8a1c3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23837, "upload_time": "2019-10-08T19:16:54", "upload_time_iso_8601": "2019-10-08T19:16:54.082783Z", "url": "https://files.pythonhosted.org/packages/4b/e1/7553d1bc87fcf08560461449aa3aa4a7d85f2675df7e58af5e060ce3513e/m_phate-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad782190f8c70ad7c41d62dbb88fcd2e", "sha256": "f0a93441e35207e7dd2525e8122d9be4d894c650d32ab8512d04f5f17e4723e7"}, "downloads": -1, "filename": "m_phate-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ad782190f8c70ad7c41d62dbb88fcd2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15629, "upload_time": "2019-10-08T19:16:55", "upload_time_iso_8601": "2019-10-08T19:16:55.681234Z", "url": "https://files.pythonhosted.org/packages/42/18/d00bd32290d6a1ab3a16d58f9d691faa0e52391614c7d71ffe9c97732d9c/m_phate-0.1.1.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "611e967dfb9470b6fcd465520a3c8874", "sha256": "69ae1edbe998e4e96e907cb6e0c5f0c07d41004db132b9aaacb4d0e2d2d7a221"}, "downloads": -1, "filename": "m_phate-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "611e967dfb9470b6fcd465520a3c8874", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24107, "upload_time": "2019-12-08T05:53:35", "upload_time_iso_8601": "2019-12-08T05:53:35.393207Z", "url": "https://files.pythonhosted.org/packages/6d/e1/53e7367bdb102a97de999f8d7423d0380705bb54f4a387a206889e76a4f8/m_phate-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "132f0717bdb6797cdf81e75f52a51ab2", "sha256": "9fa55659258eda476f81ad28c4c4704d759b376d603f448e6a22ed2f0aed8cc2"}, "downloads": -1, "filename": "m_phate-0.1.4.tar.gz", "has_sig": false, "md5_digest": "132f0717bdb6797cdf81e75f52a51ab2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16019, "upload_time": "2019-12-08T05:53:36", "upload_time_iso_8601": "2019-12-08T05:53:36.810988Z", "url": "https://files.pythonhosted.org/packages/b0/65/d6165f47f995aa19cd38631776e1813031dfedf757be72a3a2b4d5220a64/m_phate-0.1.4.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "48f942c699490e49ece4b84d7e650de5", "sha256": "a2f36861a5b9b6d7ac572d1604f6128ede8fe821725c1ca395f35ada70e2b718"}, "downloads": -1, "filename": "m_phate-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "48f942c699490e49ece4b84d7e650de5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24179, "upload_time": "2020-03-10T18:09:14", "upload_time_iso_8601": "2020-03-10T18:09:14.019670Z", "url": "https://files.pythonhosted.org/packages/6c/d0/c643743f98cd8d72981235849a429200f2c0d00e4f4fdd1a014185387305/m_phate-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ef3c1a0aba4c343c6559b793c6058ea", "sha256": "e222a86b2ee5d943b7006f36d57cb1d010b21b9b4c69d4f41de2b675750c244c"}, "downloads": -1, "filename": "m_phate-0.1.6.tar.gz", "has_sig": false, "md5_digest": "5ef3c1a0aba4c343c6559b793c6058ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16095, "upload_time": "2020-03-10T18:09:15", "upload_time_iso_8601": "2020-03-10T18:09:15.736494Z", "url": "https://files.pythonhosted.org/packages/12/7a/ff8b4885586372cd4f623a8caefb0c8c9ffd08cbad2670866e948746454b/m_phate-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48f942c699490e49ece4b84d7e650de5", "sha256": "a2f36861a5b9b6d7ac572d1604f6128ede8fe821725c1ca395f35ada70e2b718"}, "downloads": -1, "filename": "m_phate-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "48f942c699490e49ece4b84d7e650de5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24179, "upload_time": "2020-03-10T18:09:14", "upload_time_iso_8601": "2020-03-10T18:09:14.019670Z", "url": "https://files.pythonhosted.org/packages/6c/d0/c643743f98cd8d72981235849a429200f2c0d00e4f4fdd1a014185387305/m_phate-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ef3c1a0aba4c343c6559b793c6058ea", "sha256": "e222a86b2ee5d943b7006f36d57cb1d010b21b9b4c69d4f41de2b675750c244c"}, "downloads": -1, "filename": "m_phate-0.1.6.tar.gz", "has_sig": false, "md5_digest": "5ef3c1a0aba4c343c6559b793c6058ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16095, "upload_time": "2020-03-10T18:09:15", "upload_time_iso_8601": "2020-03-10T18:09:15.736494Z", "url": "https://files.pythonhosted.org/packages/12/7a/ff8b4885586372cd4f623a8caefb0c8c9ffd08cbad2670866e948746454b/m_phate-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:16 2020"}