{"info": {"author": "Matthew Fox", "author_email": "matt@tansen.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Telecommunications Industry", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Cython", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Security", "Topic :: System :: Networking"], "description": "==============\nNetfilterQueue\n==============\n\nNetfilterQueue provides access to packets matched by an iptables rule in\nLinux. Packets so matched can be accepted, dropped, altered, or given a mark.\n\nLibnetfilter_queue (the netfilter library, not this module) is part of the\n`Netfilter project <http://netfilter.org/projects/libnetfilter_queue/>`_.\n\nExample\n=======\n\nThe following script prints a short description of each packet before accepting\nit. ::\n\n    from netfilterqueue import NetfilterQueue\n    \n    def print_and_accept(pkt):\n        print(pkt)\n        pkt.accept()\n    \n    nfqueue = NetfilterQueue()\n    nfqueue.bind(1, print_and_accept)\n    try:\n        nfqueue.run()\n    except KeyboardInterrupt:\n        print('')\n    \n    nfqueue.unbind()\n\nYou can also make your own socket so that it can be used with gevent, for example. ::\n\n    from netfilterqueue import NetfilterQueue\n    import socket\n\n    def print_and_accept(pkt):\n        print(pkt)\n        pkt.accept()\n\n    nfqueue = NetfilterQueue()\n    nfqueue.bind(1, print_and_accept)\n    s = socket.fromfd(nfqueue.get_fd(), socket.AF_UNIX, socket.SOCK_STREAM)\n    try:\n        nfqueue.run_socket(s)\n    except KeyboardInterrupt:\n        print('')\n\n    s.close()\n    nfqueue.unbind()\n\nTo send packets destined for your LAN to the script, type something like::\n\n    iptables -I INPUT -d 192.168.0.0/24 -j NFQUEUE --queue-num 1\n\nInstallation\n============\n\nNetfilterQueue is a C extention module that links against libnetfilter_queue. \nBefore installing, ensure you have:\n\n1. A C compiler\n\n2. Python development files\n\n3. Libnetfilter_queue development files and associated dependencies\n\nOn Debian or Ubuntu, install these files with::\n\n    apt-get install build-essential python-dev libnetfilter-queue-dev\n\nFrom PyPI\n---------\n\nTo install from PyPI by pip::\n\n    pip install NetfilterQueue\n\nFrom source\n-----------\n\nTo install from source::\n\n    git clone git@github.com:kti/python-netfilterqueue.git\n    cd python-netfilterqueue\n    python setup.py install\n\nIf Cython is installed, Distutils will use it to regenerate the .c source from the .pyx. It will then compile the .c into a .so.\n\nAPI\n===\n\n``NetfilterQueue.COPY_NONE``\n\n``NetfilterQueue.COPY_META``\n\n``NetfilterQueue.COPY_PACKET``\n    These constants specify how much of the packet should be given to the\n    script- nothing, metadata, or the whole packet.\n\nNetfilterQueue objects\n----------------------\n\nA NetfilterQueue object represents a single queue. Configure your queue with\na call to ``bind``, then start receiving packets with a call to ``run``.\n\n``QueueHandler.bind(queue_num, callback[, max_len[, mode[, range, [sock_len]]]])``\n    Create and bind to the queue. ``queue_num`` must match the number in your\n    iptables rule. ``callback`` is a function or method that takes one\n    argument, a Packet object (see below). ``max_len`` sets the largest number\n    of packets that can be in the queue; new packets are dropped if the size of\n    the queue reaches this number. ``mode`` determines how much of the packet\n    data is provided to your script. Use the constants above. ``range`` defines\n    how many bytes of the packet you want to get. For example, if you only want\n    the source and destination IPs of a IPv4 packet, ``range`` could be 20.\n    ``sock_len`` sets the receive socket buffer size.\n\n``QueueHandler.unbind()``\n    Remove the queue. Packets matched by your iptables rule will be dropped.\n\n``QueueHandler.get_fd()``\n    Get the file descriptor of the queue handler.\n\n``QueueHandler.run([block])``\n    Send packets to your callback. By default, this method blocks. Set\n    block=False to let your thread continue. You can get the file descriptor\n    of the socket with the ``get_fd`` method.\n\n``QueueHandler.run_socket(socket)``\n    Send packets to your callback, but use the supplied socket instead of\n    recv, so that, for example, gevent can monkeypatch it. You can make a\n    socket with ``socket.fromfd(nfqueue.get_fd(), socket.AF_UNIX, socket.SOCK_STREAM)``\n    and optionally make it non-blocking with ``socket.setblocking(False)``.\n\nPacket objects\n--------------\n\nObjects of this type are passed to your callback.\n\n``Packet.get_payload()``\n    Return the packet's payload as a string (Python 2) or bytes (Python 3).\n\n``Packet.set_payload(payload)``\n    Set the packet payload. ``payload`` is a bytes.\n\n``Packet.get_payload_len()``\n    Return the size of the payload.\n\n``Packet.set_mark(mark)``\n    Give the packet a kernel mark. ``mark`` is a 32-bit number.\n\n``Packet.get_mark()``\n    Get the mark already on the packet.\n\n``Packet.get_hw()``\n    Return the hardware address as a Python string.\n\n``Packet.accept()``\n    Accept the packet.\n\n``Packet.drop()``\n    Drop the packet.\n   \n``Packet.repeat()``\n    Iterate the same cycle once more.\n \nCallback objects\n----------------\n\nYour callback can be function or a method and must accept one argument, a\nPacket object. You must call either Packet.accept() or Packet.drop() before\nreturning.\n\n``callback(packet)`` or ``callback(self, packet)``\n    Handle a single packet from the queue. You must call either\n    ``packet.accept()`` or ``packet.drop()``.\n\nUsage\n=====\n\nTo send packets to the queue::\n\n    iptables -I <table or chain> <match specification> -j NFQUEUE --queue-num <queue number>\n    \nFor example::\n\n    iptables -I INPUT -d 192.168.0.0/24 -j NFQUEUE --queue-num 1\n    \nThe only special part of the rule is the target. Rules can have any match and \ncan be added to any table or chain.\n\nValid queue numbers are integers from 0 to 65,535 inclusive.\n\nTo view libnetfilter_queue stats, refer to /proc/net/netfilter/nfnetlink_queue::\n\n    cat /proc/net/netfilter/nfnetlink_queue\n    1  31621     0 2  4016     0     0        2  1\n\nThe fields are:\n\n1. Queue ID\n\n2. Bound process ID\n\n3. Number of currently queued packets\n\n4. Copy mode\n\n5. Copy size\n\n6. Number of packets dropped due to reaching max queue size\n\n7. Number of packets dropped due to netlink socket failure\n\n8. Total number of packets sent to queue\n\n9. Something for libnetfilter_queue's internal use\n\nLimitations\n===========\n\n* Compiled with a 4096-byte buffer for packets, so it probably won't work on\n  loopback or Ethernet with jumbo packets. If this is a problem, either lower\n  MTU on your loopback, disable jumbo packets, or get Cython,\n  change ``DEF BufferSize = 4096`` in ``netfilterqueue.pyx``, and rebuild.\n* Full libnetfilter_queue API is not yet implemented:\n\n    * Omits methods for getting information about the interface a packet has\n      arrived on or is leaving on\n    * Probably other stuff is omitted too\n    \nSource\n======\n\nhttps://github.com/kti/python-netfilterqueue\n\nLicense\n=======\n\nCopyright (c) 2011, Kerkhoff Technologies, Inc.\n\n`MIT licensed <https://github.com/kti/python-netfilterqueue/blob/master/LICENSE.txt>`_", "description_content_type": null, "docs_url": null, "download_url": "http://pypi.python.org/packages/source/N/NetfilterQueue/NetfilterQueue-0.8.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kti/python-netfilterqueue", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "NetfilterQueue", "package_url": "https://pypi.org/project/NetfilterQueue/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/NetfilterQueue/", "project_urls": {"Download": "http://pypi.python.org/packages/source/N/NetfilterQueue/NetfilterQueue-0.8.1.tar.gz", "Homepage": "https://github.com/kti/python-netfilterqueue"}, "release_url": "https://pypi.org/project/NetfilterQueue/0.8.1/", "requires_dist": null, "requires_python": null, "summary": "Python bindings for libnetfilter_queue", "version": "0.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>NetfilterQueue provides access to packets matched by an iptables rule in\nLinux. Packets so matched can be accepted, dropped, altered, or given a mark.</p>\n<p>Libnetfilter_queue (the netfilter library, not this module) is part of the\n<a href=\"http://netfilter.org/projects/libnetfilter_queue/\" rel=\"nofollow\">Netfilter project</a>.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>The following script prints a short description of each packet before accepting\nit.</p>\n<pre>from netfilterqueue import NetfilterQueue\n\ndef print_and_accept(pkt):\n    print(pkt)\n    pkt.accept()\n\nnfqueue = NetfilterQueue()\nnfqueue.bind(1, print_and_accept)\ntry:\n    nfqueue.run()\nexcept KeyboardInterrupt:\n    print('')\n\nnfqueue.unbind()\n</pre>\n<p>You can also make your own socket so that it can be used with gevent, for example.</p>\n<pre>from netfilterqueue import NetfilterQueue\nimport socket\n\ndef print_and_accept(pkt):\n    print(pkt)\n    pkt.accept()\n\nnfqueue = NetfilterQueue()\nnfqueue.bind(1, print_and_accept)\ns = socket.fromfd(nfqueue.get_fd(), socket.AF_UNIX, socket.SOCK_STREAM)\ntry:\n    nfqueue.run_socket(s)\nexcept KeyboardInterrupt:\n    print('')\n\ns.close()\nnfqueue.unbind()\n</pre>\n<p>To send packets destined for your LAN to the script, type something like:</p>\n<pre>iptables -I INPUT -d 192.168.0.0/24 -j NFQUEUE --queue-num 1\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>NetfilterQueue is a C extention module that links against libnetfilter_queue.\nBefore installing, ensure you have:</p>\n<ol>\n<li>A C compiler</li>\n<li>Python development files</li>\n<li>Libnetfilter_queue development files and associated dependencies</li>\n</ol>\n<p>On Debian or Ubuntu, install these files with:</p>\n<pre>apt-get install build-essential python-dev libnetfilter-queue-dev\n</pre>\n<div id=\"from-pypi\">\n<h3>From PyPI</h3>\n<p>To install from PyPI by pip:</p>\n<pre>pip install NetfilterQueue\n</pre>\n</div>\n<div id=\"from-source\">\n<h3>From source</h3>\n<p>To install from source:</p>\n<pre>git clone git@github.com:kti/python-netfilterqueue.git\ncd python-netfilterqueue\npython setup.py install\n</pre>\n<p>If Cython is installed, Distutils will use it to regenerate the .c source from the .pyx. It will then compile the .c into a .so.</p>\n</div>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p><tt>NetfilterQueue.COPY_NONE</tt></p>\n<p><tt>NetfilterQueue.COPY_META</tt></p>\n<dl>\n<dt><tt>NetfilterQueue.COPY_PACKET</tt></dt>\n<dd>These constants specify how much of the packet should be given to the\nscript- nothing, metadata, or the whole packet.</dd>\n</dl>\n<div id=\"netfilterqueue-objects\">\n<h3>NetfilterQueue objects</h3>\n<p>A NetfilterQueue object represents a single queue. Configure your queue with\na call to <tt>bind</tt>, then start receiving packets with a call to <tt>run</tt>.</p>\n<dl>\n<dt><tt>QueueHandler.bind(queue_num, callback[, max_len[, mode[, range, <span class=\"pre\">[sock_len]]]])</span></tt></dt>\n<dd>Create and bind to the queue. <tt>queue_num</tt> must match the number in your\niptables rule. <tt>callback</tt> is a function or method that takes one\nargument, a Packet object (see below). <tt>max_len</tt> sets the largest number\nof packets that can be in the queue; new packets are dropped if the size of\nthe queue reaches this number. <tt>mode</tt> determines how much of the packet\ndata is provided to your script. Use the constants above. <tt>range</tt> defines\nhow many bytes of the packet you want to get. For example, if you only want\nthe source and destination IPs of a IPv4 packet, <tt>range</tt> could be 20.\n<tt>sock_len</tt> sets the receive socket buffer size.</dd>\n<dt><tt>QueueHandler.unbind()</tt></dt>\n<dd>Remove the queue. Packets matched by your iptables rule will be dropped.</dd>\n<dt><tt>QueueHandler.get_fd()</tt></dt>\n<dd>Get the file descriptor of the queue handler.</dd>\n<dt><tt><span class=\"pre\">QueueHandler.run([block])</span></tt></dt>\n<dd>Send packets to your callback. By default, this method blocks. Set\nblock=False to let your thread continue. You can get the file descriptor\nof the socket with the <tt>get_fd</tt> method.</dd>\n<dt><tt>QueueHandler.run_socket(socket)</tt></dt>\n<dd>Send packets to your callback, but use the supplied socket instead of\nrecv, so that, for example, gevent can monkeypatch it. You can make a\nsocket with <tt><span class=\"pre\">socket.fromfd(nfqueue.get_fd(),</span> socket.AF_UNIX, socket.SOCK_STREAM)</tt>\nand optionally make it non-blocking with <tt>socket.setblocking(False)</tt>.</dd>\n</dl>\n</div>\n<div id=\"packet-objects\">\n<h3>Packet objects</h3>\n<p>Objects of this type are passed to your callback.</p>\n<dl>\n<dt><tt>Packet.get_payload()</tt></dt>\n<dd>Return the packet\u2019s payload as a string (Python 2) or bytes (Python 3).</dd>\n<dt><tt>Packet.set_payload(payload)</tt></dt>\n<dd>Set the packet payload. <tt>payload</tt> is a bytes.</dd>\n<dt><tt>Packet.get_payload_len()</tt></dt>\n<dd>Return the size of the payload.</dd>\n<dt><tt>Packet.set_mark(mark)</tt></dt>\n<dd>Give the packet a kernel mark. <tt>mark</tt> is a 32-bit number.</dd>\n<dt><tt>Packet.get_mark()</tt></dt>\n<dd>Get the mark already on the packet.</dd>\n<dt><tt>Packet.get_hw()</tt></dt>\n<dd>Return the hardware address as a Python string.</dd>\n<dt><tt>Packet.accept()</tt></dt>\n<dd>Accept the packet.</dd>\n<dt><tt>Packet.drop()</tt></dt>\n<dd>Drop the packet.</dd>\n<dt><tt>Packet.repeat()</tt></dt>\n<dd>Iterate the same cycle once more.</dd>\n</dl>\n</div>\n<div id=\"callback-objects\">\n<h3>Callback objects</h3>\n<p>Your callback can be function or a method and must accept one argument, a\nPacket object. You must call either Packet.accept() or Packet.drop() before\nreturning.</p>\n<dl>\n<dt><tt>callback(packet)</tt> or <tt>callback(self, packet)</tt></dt>\n<dd>Handle a single packet from the queue. You must call either\n<tt>packet.accept()</tt> or <tt>packet.drop()</tt>.</dd>\n</dl>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To send packets to the queue:</p>\n<pre>iptables -I &lt;table or chain&gt; &lt;match specification&gt; -j NFQUEUE --queue-num &lt;queue number&gt;\n</pre>\n<p>For example:</p>\n<pre>iptables -I INPUT -d 192.168.0.0/24 -j NFQUEUE --queue-num 1\n</pre>\n<p>The only special part of the rule is the target. Rules can have any match and\ncan be added to any table or chain.</p>\n<p>Valid queue numbers are integers from 0 to 65,535 inclusive.</p>\n<p>To view libnetfilter_queue stats, refer to /proc/net/netfilter/nfnetlink_queue:</p>\n<pre>cat /proc/net/netfilter/nfnetlink_queue\n1  31621     0 2  4016     0     0        2  1\n</pre>\n<p>The fields are:</p>\n<ol>\n<li>Queue ID</li>\n<li>Bound process ID</li>\n<li>Number of currently queued packets</li>\n<li>Copy mode</li>\n<li>Copy size</li>\n<li>Number of packets dropped due to reaching max queue size</li>\n<li>Number of packets dropped due to netlink socket failure</li>\n<li>Total number of packets sent to queue</li>\n<li>Something for libnetfilter_queue\u2019s internal use</li>\n</ol>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<ul>\n<li><p>Compiled with a 4096-byte buffer for packets, so it probably won\u2019t work on\nloopback or Ethernet with jumbo packets. If this is a problem, either lower\nMTU on your loopback, disable jumbo packets, or get Cython,\nchange <tt>DEF BufferSize = 4096</tt> in <tt>netfilterqueue.pyx</tt>, and rebuild.</p>\n</li>\n<li><p>Full libnetfilter_queue API is not yet implemented:</p>\n<blockquote>\n<ul>\n<li>Omits methods for getting information about the interface a packet has\narrived on or is leaving on</li>\n<li>Probably other stuff is omitted too</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"source\">\n<h2>Source</h2>\n<p><a href=\"https://github.com/kti/python-netfilterqueue\" rel=\"nofollow\">https://github.com/kti/python-netfilterqueue</a></p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2011, Kerkhoff Technologies, Inc.</p>\n<p><a href=\"https://github.com/kti/python-netfilterqueue/blob/master/LICENSE.txt\" rel=\"nofollow\">MIT licensed</a></p>\n</div>\n\n          </div>"}, "last_serial": 2608532, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e749a0f7df5e947d4241e9785866765c", "sha256": "ad797bd4dd083b59b05dd96720c20d22b296a09418bd1fa7840e0b27c35468d4"}, "downloads": -1, "filename": "NetfilterQueue-0.1.tar.gz", "has_sig": false, "md5_digest": "e749a0f7df5e947d4241e9785866765c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37969, "upload_time": "2011-05-13T17:44:01", "upload_time_iso_8601": "2011-05-13T17:44:01.909222Z", "url": "https://files.pythonhosted.org/packages/2e/dd/fa1099d27644b053567922cc41d4e67cca5e39938ff0f6ac65ef373719aa/NetfilterQueue-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5a5c634a896668bbd4e4eb2923a5481e", "sha256": "c72f90b93a95adb8273bbd6b70c69709de4a6647caa4c5df0d0e71fa19e3745b"}, "downloads": -1, "filename": "NetfilterQueue-0.2.tar.gz", "has_sig": false, "md5_digest": "5a5c634a896668bbd4e4eb2923a5481e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39330, "upload_time": "2011-05-13T18:50:03", "upload_time_iso_8601": "2011-05-13T18:50:03.746171Z", "url": "https://files.pythonhosted.org/packages/4b/32/d6baddf0718bfb5fab708992781c6f979aa871672e7f6e8ce53f88d9edea/NetfilterQueue-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4bc4cab885a0326fad3f6d8e2c5c3b09", "sha256": "06d0980c245b2bef4bd15bf6a8f4520e42be44309ccd81166854e9c3f15259b7"}, "downloads": -1, "filename": "NetfilterQueue-0.3.tar.gz", "has_sig": false, "md5_digest": "4bc4cab885a0326fad3f6d8e2c5c3b09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39862, "upload_time": "2011-10-14T23:57:46", "upload_time_iso_8601": "2011-10-14T23:57:46.732065Z", "url": "https://files.pythonhosted.org/packages/8d/f5/bc84583edb9733e00f9efbf05c3c448cfdd1afcf00e84cae0e7f3f15acf9/NetfilterQueue-0.3.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "7aa401680fc1ad25312eb50f465fa05f", "sha256": "f24c592a0d2e8b2233ee365528fc1f90f7e3d80cb35c09195e3aafe3d451eac5"}, "downloads": -1, "filename": "NetfilterQueue-0.7.tar.gz", "has_sig": false, "md5_digest": "7aa401680fc1ad25312eb50f465fa05f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55215, "upload_time": "2016-06-29T05:48:05", "upload_time_iso_8601": "2016-06-29T05:48:05.299928Z", "url": "https://files.pythonhosted.org/packages/7b/c3/204d47c1c47a7fd6ac1e4e341bdc6021f8142e6c7b6e488436592a6d2488/NetfilterQueue-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "8e78db992ad3a73dd86fef05293fff65", "sha256": "1c0316d062dd18678473d2cd661d89fbc5d708354a9e5ce03dcec14829a86560"}, "downloads": -1, "filename": "NetfilterQueue-0.8.tar.gz", "has_sig": false, "md5_digest": "8e78db992ad3a73dd86fef05293fff65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58503, "upload_time": "2016-12-15T09:35:48", "upload_time_iso_8601": "2016-12-15T09:35:48.126819Z", "url": "https://files.pythonhosted.org/packages/94/5b/83d10952c1312fe056f8f2f524a4a59fdc9d56b84a67cae1ed779e2da50b/NetfilterQueue-0.8.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "ea2c262d6a571cb5ecdaed1bbb0da2b4", "sha256": "beda851dfb8f3199f716e246c4cfd2c8492f7cdce32a03613c7eeab152e0a4a6"}, "downloads": -1, "filename": "NetfilterQueue-0.8.1.tar.gz", "has_sig": false, "md5_digest": "ea2c262d6a571cb5ecdaed1bbb0da2b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58616, "upload_time": "2017-01-31T07:42:22", "upload_time_iso_8601": "2017-01-31T07:42:22.210141Z", "url": "https://files.pythonhosted.org/packages/39/c4/8f73f70442aa4094b3c37876c96cddad2c3e74c058f6cd9cb017d37ffac0/NetfilterQueue-0.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea2c262d6a571cb5ecdaed1bbb0da2b4", "sha256": "beda851dfb8f3199f716e246c4cfd2c8492f7cdce32a03613c7eeab152e0a4a6"}, "downloads": -1, "filename": "NetfilterQueue-0.8.1.tar.gz", "has_sig": false, "md5_digest": "ea2c262d6a571cb5ecdaed1bbb0da2b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58616, "upload_time": "2017-01-31T07:42:22", "upload_time_iso_8601": "2017-01-31T07:42:22.210141Z", "url": "https://files.pythonhosted.org/packages/39/c4/8f73f70442aa4094b3c37876c96cddad2c3e74c058f6cd9cb017d37ffac0/NetfilterQueue-0.8.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:59 2020"}