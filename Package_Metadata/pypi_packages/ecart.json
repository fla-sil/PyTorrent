{"info": {"author": "Nimesh Kiran Verma, Rohit khatana", "author_email": "nimesh.aug11@gmail.com, rohitkhatana.khatana@gmail.com", "bugtrack_url": null, "classifiers": [], "description": ".. figure:: https://raw.githubusercontent.com/nimeshkverma/E-Cart/master/images/ecart.png\r\n   :alt: \r\n\r\nE-Cart is a framework agnostic, redis backed, cart system, built in\r\nPython. It is not a POS, or a full fledged ecommerce system.\r\n\r\nInstallation\r\n------------\r\n\r\n::\r\n\r\n    pip install ecart\r\n\r\nRequirements\r\n------------\r\n\r\n.. figure:: https://raw.githubusercontent.com/nimeshkverma/E-Cart/master/images/redis_logo.png\r\n   :alt: \r\n\r\nAs E-Cart harnesses the power of Redis.You should have running `Redis\r\nServer <http://redis.io/topics/quickstart>`__. and installed\r\n**redis-py** `redis-py <https://pypi.python.org/pypi/redis>`__ package.\r\n\r\nBasic Usage\r\n-----------\r\n\r\n1. Import the ``Cart`` class from the ``ecart`` package:\r\n\r\n   ``from ecart.ecart import Cart``\r\n\r\n2. Create a new shopping cart:\r\n\r\n   ``cart_obj = Cart(user_id, redis_connection, ttl)``\r\n\r\n   ``user_id`` : This a required parameter which acts as a unique\r\n   identifier for the cart. If you don't want a user to have more than\r\n   one cart at a time, it's generally best to set this to the user's id.\r\n\r\n   ``redis_connection``: This too is a required field and is used to\r\n   communicate with the Redis database. This is basically a redis\r\n   connection object obtained by calling the ``redis.Redis()`` function\r\n   of the `redis\r\n   package <https://redis-py.readthedocs.io/en/latest/>`__. An sample\r\n   function to create such object is available at\r\n   `redis\\_connection.py <https://github.com/nimeshkverma/ecart/blob/master/redis_connection.py>`__\r\n\r\n   ``ttl``: This field used to set the expiry time of the user cart in\r\n   the Redis in seconds. This is an optional field with a default value\r\n   of 604800.\r\n\r\n3. To add an item to the cart:\r\n\r\n   ``cart_obj.add(product_id, unit_cost, quantity)``\r\n\r\n   This function take ``product_id``, ``unit_cost`` and ``quantity`` and\r\n   other details (``**kwargs``) if you like. Once executed this function\r\n   add the given product and its details into the user cart in redis db.\r\n\r\n4. To Retrieve the items:\r\n\r\n``cart_obj.get()``\r\n\r\n::\r\n\r\n    This function returns the complete cart of the user, basically a dictionary of product_id to product_details dictionary.\r\n\r\nFunctions Exposed\r\n-----------------\r\n\r\nFollowing are the complete details of the methods exposed by\r\n``cart_obj`` object:\r\n\r\n-  **add**\r\n\r\n   ``add(product_id, unit_cost, quantity, **extra_details)``\r\n\r\n   This function is the life blood of E-Cart. Below are the details of\r\n   the arguments for the *add* function:\r\n\r\n   -  ``product_id``: (*required*) to store the ID of the model you're\r\n      adding\r\n   -  ``quantity``: (*required*) which will let you use the\r\n      ``Cart#quantity`` and ``Cart#total`` methods without any extra\r\n      configuration.\r\n   -  ``unit_cost``: (*required*) which will help you to calculate total\r\n      value of cart.\r\n   -  ``extra_details``:(*optional*) if you want to store any extra\r\n      information about the cart item just pass the details as\r\n      \\*\\*kwargs, ecart will take care of it.\r\n\r\n-  **remove**\r\n\r\n   ``remove(product_id)``\r\n\r\n   As you would have guessed, removes an item of the input\r\n   ``product_id``\r\n\r\n-  **contains**\r\n\r\n   ``contains(product_id)``\r\n\r\n   Returns a Boolean indicating whether an item of the given\r\n   ``product_id`` is in the cart or not.\r\n\r\n-  **get\\_product**\r\n\r\n   ``get_product(product_id)``\r\n\r\n   For the input ``product_id``, this function will return the ``Item``\r\n   dictionary with ``unit_cost``, ``quantity`` etc details.\r\n\r\n-  **get**\r\n\r\n   ``get()``\r\n\r\n   This function returns the complete cart of the user, basically a\r\n   dictionary of product\\_id to product\\_details dictionary.\r\n\r\n-  **total\\_cost**\r\n\r\n   ``total_cost()``\r\n\r\n   This will return the sum all of the ``cost`` return values of all of\r\n   the items in the cart. For this to work, the ``:unit_cost`` and\r\n   ``:quantity`` fields need to be set for all items.\r\n\r\n-  **count**\r\n\r\n   ``count()``\r\n\r\n   This will return the total number of items in the cart. Faster than\r\n   ``cart.items.size`` because it doesn't load all of the item data from\r\n   redis.\r\n\r\n-  **quantity**\r\n\r\n   ``quantity()``\r\n\r\n   This will return the total quantity of all the items. The quantity\r\n   field is set in the config block, by default it's ``:quantity``\r\n\r\n-  **get\\_ttl**\r\n\r\n   ``get_ttl()``\r\n\r\n   This will return the number of seconds until the cart expires.\r\n\r\n-  **set\\_ttl**\r\n\r\n   ``set_ttl(ttl_value)``\r\n\r\n   This will set the ttl of the user cart in redis to ``ttl_value``.\r\n   ``ttl_value`` must be integer and is in seconds\r\n\r\n-  **destroy**\r\n\r\n   ``destroy()``\r\n\r\n   This will delete the cart, and all the line\\_items out of it.\r\n\r\n-  **copy**\r\n\r\n   ``copy(new_id)``\r\n\r\n   This method will copy the current cart to the new unique\\_id. Will be\r\n   useful for copying guest user's cart to logged-in user's cart or\r\n   simply creating a copy of the cart.\r\n\r\nExample\r\n-------\r\n\r\nLets walk through an example below:\r\n\r\n.. code:: python\r\n\r\n    from ecart.ecart import Cart\r\n    cart = Cart(user_id, reddis_connection) # ttl is optional default is 604800\r\n    cart.add(product_id, unit_cost, quantity) # quantity defaults to 1, also you can pass optional dict(extra info)\r\n    cart.total\r\n    cart.quantity\r\n\r\nHow to Contribute\r\n-----------------\r\n\r\n1. Fork it\r\n2. Create your feature branch (``git checkout -b my-new-feature``)\r\n3. Commit your changes (``git commit -am 'Add some feature'``)\r\n4. Push to the branch (``git push origin my-new-feature``)\r\n5. Create new Pull Request", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/nimeshkverma/E-cart/tarball/1.0.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nimeshkverma/E-cart", "keywords": "ecart,cart,redis,E-commerce,webservices", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "ecart", "package_url": "https://pypi.org/project/ecart/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ecart/", "project_urls": {"Download": "https://github.com/nimeshkverma/E-cart/tarball/1.0.2", "Homepage": "https://github.com/nimeshkverma/E-cart"}, "release_url": "https://pypi.org/project/ecart/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Framework agnostic, redis backed, cart system, Python library", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e1bd19c91f226d05bf42d815787051fd60b167c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6e696d6573686b7665726d612f452d436172742f6d61737465722f696d616765732f65636172742e706e67\">\n</div>\n<p>E-Cart is a framework agnostic, redis backed, cart system, built in\nPython. It is not a POS, or a full fledged ecommerce system.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install ecart\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<div>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee957e1bb15b8db5fc6b347d45554881926c71b7/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6e696d6573686b7665726d612f452d436172742f6d61737465722f696d616765732f72656469735f6c6f676f2e706e67\">\n</div>\n<p>As E-Cart harnesses the power of Redis.You should have running <a href=\"http://redis.io/topics/quickstart\" rel=\"nofollow\">Redis\nServer</a>. and installed\n<strong>redis-py</strong> <a href=\"https://pypi.python.org/pypi/redis\" rel=\"nofollow\">redis-py</a> package.</p>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<ol>\n<li><p>Import the <tt>Cart</tt> class from the <tt>ecart</tt> package:</p>\n<p><tt>from ecart.ecart import Cart</tt></p>\n</li>\n<li><p>Create a new shopping cart:</p>\n<p><tt>cart_obj = Cart(user_id, redis_connection, ttl)</tt></p>\n<p><tt>user_id</tt> : This a required parameter which acts as a unique\nidentifier for the cart. If you don\u2019t want a user to have more than\none cart at a time, it\u2019s generally best to set this to the user\u2019s id.</p>\n<p><tt>redis_connection</tt>: This too is a required field and is used to\ncommunicate with the Redis database. This is basically a redis\nconnection object obtained by calling the <tt>redis.Redis()</tt> function\nof the <a href=\"https://redis-py.readthedocs.io/en/latest/\" rel=\"nofollow\">redis\npackage</a>. An sample\nfunction to create such object is available at\n<a href=\"https://github.com/nimeshkverma/ecart/blob/master/redis_connection.py\" rel=\"nofollow\">redis_connection.py</a></p>\n<p><tt>ttl</tt>: This field used to set the expiry time of the user cart in\nthe Redis in seconds. This is an optional field with a default value\nof 604800.</p>\n</li>\n<li><p>To add an item to the cart:</p>\n<p><tt>cart_obj.add(product_id, unit_cost, quantity)</tt></p>\n<p>This function take <tt>product_id</tt>, <tt>unit_cost</tt> and <tt>quantity</tt> and\nother details (<tt>**kwargs</tt>) if you like. Once executed this function\nadd the given product and its details into the user cart in redis db.</p>\n</li>\n<li><p>To Retrieve the items:</p>\n</li>\n</ol>\n<p><tt>cart_obj.get()</tt></p>\n<pre>This function returns the complete cart of the user, basically a dictionary of product_id to product_details dictionary.\n</pre>\n</div>\n<div id=\"functions-exposed\">\n<h2>Functions Exposed</h2>\n<p>Following are the complete details of the methods exposed by\n<tt>cart_obj</tt> object:</p>\n<ul>\n<li><p><strong>add</strong></p>\n<p><tt>add(product_id, unit_cost, quantity, **extra_details)</tt></p>\n<p>This function is the life blood of E-Cart. Below are the details of\nthe arguments for the <em>add</em> function:</p>\n<ul>\n<li><tt>product_id</tt>: (<em>required</em>) to store the ID of the model you\u2019re\nadding</li>\n<li><tt>quantity</tt>: (<em>required</em>) which will let you use the\n<tt>Cart#quantity</tt> and <tt>Cart#total</tt> methods without any extra\nconfiguration.</li>\n<li><tt>unit_cost</tt>: (<em>required</em>) which will help you to calculate total\nvalue of cart.</li>\n<li><tt>extra_details</tt>:(<em>optional</em>) if you want to store any extra\ninformation about the cart item just pass the details as\n**kwargs, ecart will take care of it.</li>\n</ul>\n</li>\n<li><p><strong>remove</strong></p>\n<p><tt>remove(product_id)</tt></p>\n<p>As you would have guessed, removes an item of the input\n<tt>product_id</tt></p>\n</li>\n<li><p><strong>contains</strong></p>\n<p><tt>contains(product_id)</tt></p>\n<p>Returns a Boolean indicating whether an item of the given\n<tt>product_id</tt> is in the cart or not.</p>\n</li>\n<li><p><strong>get_product</strong></p>\n<p><tt>get_product(product_id)</tt></p>\n<p>For the input <tt>product_id</tt>, this function will return the <tt>Item</tt>\ndictionary with <tt>unit_cost</tt>, <tt>quantity</tt> etc details.</p>\n</li>\n<li><p><strong>get</strong></p>\n<p><tt>get()</tt></p>\n<p>This function returns the complete cart of the user, basically a\ndictionary of product_id to product_details dictionary.</p>\n</li>\n<li><p><strong>total_cost</strong></p>\n<p><tt>total_cost()</tt></p>\n<p>This will return the sum all of the <tt>cost</tt> return values of all of\nthe items in the cart. For this to work, the <tt>:unit_cost</tt> and\n<tt>:quantity</tt> fields need to be set for all items.</p>\n</li>\n<li><p><strong>count</strong></p>\n<p><tt>count()</tt></p>\n<p>This will return the total number of items in the cart. Faster than\n<tt>cart.items.size</tt> because it doesn\u2019t load all of the item data from\nredis.</p>\n</li>\n<li><p><strong>quantity</strong></p>\n<p><tt>quantity()</tt></p>\n<p>This will return the total quantity of all the items. The quantity\nfield is set in the config block, by default it\u2019s <tt>:quantity</tt></p>\n</li>\n<li><p><strong>get_ttl</strong></p>\n<p><tt>get_ttl()</tt></p>\n<p>This will return the number of seconds until the cart expires.</p>\n</li>\n<li><p><strong>set_ttl</strong></p>\n<p><tt>set_ttl(ttl_value)</tt></p>\n<p>This will set the ttl of the user cart in redis to <tt>ttl_value</tt>.\n<tt>ttl_value</tt> must be integer and is in seconds</p>\n</li>\n<li><p><strong>destroy</strong></p>\n<p><tt>destroy()</tt></p>\n<p>This will delete the cart, and all the line_items out of it.</p>\n</li>\n<li><p><strong>copy</strong></p>\n<p><tt>copy(new_id)</tt></p>\n<p>This method will copy the current cart to the new unique_id. Will be\nuseful for copying guest user\u2019s cart to logged-in user\u2019s cart or\nsimply creating a copy of the cart.</p>\n</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Lets walk through an example below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecart.ecart</span> <span class=\"kn\">import</span> <span class=\"n\">Cart</span>\n<span class=\"n\">cart</span> <span class=\"o\">=</span> <span class=\"n\">Cart</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">reddis_connection</span><span class=\"p\">)</span> <span class=\"c1\"># ttl is optional default is 604800</span>\n<span class=\"n\">cart</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">product_id</span><span class=\"p\">,</span> <span class=\"n\">unit_cost</span><span class=\"p\">,</span> <span class=\"n\">quantity</span><span class=\"p\">)</span> <span class=\"c1\"># quantity defaults to 1, also you can pass optional dict(extra info)</span>\n<span class=\"n\">cart</span><span class=\"o\">.</span><span class=\"n\">total</span>\n<span class=\"n\">cart</span><span class=\"o\">.</span><span class=\"n\">quantity</span>\n</pre>\n</div>\n<div id=\"how-to-contribute\">\n<h2>How to Contribute</h2>\n<ol>\n<li>Fork it</li>\n<li>Create your feature branch (<tt>git checkout <span class=\"pre\">-b</span> <span class=\"pre\">my-new-feature</span></tt>)</li>\n<li>Commit your changes (<tt>git commit <span class=\"pre\">-am</span> 'Add some feature'</tt>)</li>\n<li>Push to the branch (<tt>git push origin <span class=\"pre\">my-new-feature</span></tt>)</li>\n<li>Create new Pull Request</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 2261965, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f8d0961c43e4046fc94b4c27de01a337", "sha256": "a5032ad14e016aaea38a5e7c28a78ba2980ef9a8231a2259f966dee3578009b1"}, "downloads": -1, "filename": "ecart-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f8d0961c43e4046fc94b4c27de01a337", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2777, "upload_time": "2016-05-07T21:28:41", "upload_time_iso_8601": "2016-05-07T21:28:41.296538Z", "url": "https://files.pythonhosted.org/packages/b1/7e/feab2ea75f6d9a3d620f7a721ec3a6bb500d7fa2f95378907d755a0982bc/ecart-1.0.0.tar.gz", "yanked": false}], "1.0.1": [], "1.0.2": [{"comment_text": "", "digests": {"md5": "d611c20d4a38e76865abcf91a680c161", "sha256": "8b1678dba1d8507f51b32bcc9b54572e66a46f2486aae4e8f64a30b863158ad3"}, "downloads": -1, "filename": "ecart-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d611c20d4a38e76865abcf91a680c161", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4873, "upload_time": "2016-05-09T14:42:35", "upload_time_iso_8601": "2016-05-09T14:42:35.015480Z", "url": "https://files.pythonhosted.org/packages/4c/d2/f0f8b97f153cbcf35539aa13e925e30cd35cfb3fa60597cd69f471cbf717/ecart-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d611c20d4a38e76865abcf91a680c161", "sha256": "8b1678dba1d8507f51b32bcc9b54572e66a46f2486aae4e8f64a30b863158ad3"}, "downloads": -1, "filename": "ecart-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d611c20d4a38e76865abcf91a680c161", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4873, "upload_time": "2016-05-09T14:42:35", "upload_time_iso_8601": "2016-05-09T14:42:35.015480Z", "url": "https://files.pythonhosted.org/packages/4c/d2/f0f8b97f153cbcf35539aa13e925e30cd35cfb3fa60597cd69f471cbf717/ecart-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:04 2020"}