{"info": {"author": "Hideyuki Takei", "author_email": "hide@krkrpro.com", "bugtrack_url": null, "classifiers": [], "description": "# gs2d: Generic Serial-bus Servo Driver library for Python\n\n> karakuri products\u793e\u88fd\u30b7\u30ea\u30a2\u30eb\u30b5\u30fc\u30dc\u30c9\u30e9\u30a4\u30d0 kr-sac001 \u7528\u306e Python \u30e9\u30a4\u30d6\u30e9\u30ea\n\n---\n\n## \u6a5f\u80fd\n\n- [karakuri products\u793e\u88fd\u30b7\u30ea\u30a2\u30eb\u30b5\u30fc\u30dc\u30c9\u30e9\u30a4\u30d0 kr-sac001](https://github.com/karakuri-products) \u306b\u63a5\u7d9a\u3055\u308c\u305f\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u3092 Python \u3067\u7c21\u5358\u306b\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3067\u304d\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n- \u69d8\u3005\u306a\u30d6\u30e9\u30f3\u30c9\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u3092\u307b\u307c\u540c\u3058\u95a2\u6570\u3067\u5236\u5fa1\u304c\u53ef\u80fd\u3067\u3059\u3002\n- Read\u7cfb\u30b3\u30de\u30f3\u30c9\u306fBlocking\u30b9\u30bf\u30a4\u30eb\u3001callback\u30b9\u30bf\u30a4\u30eb\u3001async\u30b9\u30bf\u30a4\u30eb\u3067\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002\n\n## \u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\n\n- \u73fe\u5728\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\n    - FUTABA RS40x\n\n- \u3082\u3046\u3059\u3050\u5bfe\u5fdc\u3059\u308b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\n    - Dynamixel X\n\n- \u5bfe\u5fdc\u3057\u305f\u3044\u306a\u3001\u3068\u601d\u3063\u3066\u3044\u308b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\n    - KONDO KRS300x\n    - KONDO KRS400x\n    - JR programmable\n    - Vstone Vs-xxx\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\n```\npip install gs2d\n```\n\n## \u5229\u7528\u4f8b\n\n### \u30d5\u30bf\u30d0\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bfID:1\u3092\u3061\u3087\u3063\u3068\u305a\u3064\u52d5\u304b\u3059\n\n```\nfrom gs2d import SerialInterface, Futaba\n\n# Initialize\nsi = SerialInterface()\nfutaba = Futaba(si)\n\n# Enable torque\nfutaba.set_torque_enable(True, sid=1)\n\nfor i in range(11):\n  angle = i * 20 - 100\n  print('Angle:', angle, 'deg')\n  futaba.set_target_position(angle, sid=1)\n  time.sleep(0.5)\n\n# Disable torque\nfutaba.set_torque_enable(False, sid=1)\n\n# Close\nfutaba.close()\nsi.close()\n```\n\n### \u30d5\u30bf\u30d0\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bfID:1\u306e\u96fb\u5727\u3092\u53d6\u5f97\u3059\u308b (Blocking\u7248)\n\n```\nfrom gs2d import SerialInterface, Futaba\n\n# \u521d\u671f\u5316\nsi = SerialInterface()\nfutaba = Futaba(si)\n\n# \u96fb\u5727\u53d6\u5f97\nv = futaba.get_voltage(sid=1)\nprint('Voltage: %.2f(V)' % v)\n\n# \u30af\u30ed\u30fc\u30ba\nfutaba.close()\nsi.close()\n```\n\n### \u30d5\u30bf\u30d0\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bfID:1\u306e\u96fb\u5727\u3092\u53d6\u5f97\u3059\u308b (\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7248)\n\n```\nfrom gs2d import SerialInterface, Futaba\n\ndef voltage_callback(voltage):\n    \"\"\"\u96fb\u5727\u53d6\u5f97\u3067\u304d\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\"\"\"\n    print('Voltage: %.2f(V)' % voltage)\n\n    # \u30af\u30ed\u30fc\u30ba\n    futaba.close()\n    si.close()\n\n# \u521d\u671f\u5316\nsi = SerialInterface()\nfutaba = Futaba(si)\n\n# \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3064\u304d\u3067\u96fb\u5727\u53d6\u5f97\nfutaba.get_voltage(sid=1, callback=voltage_callback)\n```\n\n### \u30d5\u30bf\u30d0\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bfID:1\u306e\u96fb\u5727\u3092\u53d6\u5f97\u3059\u308b (Async\u7248)\n\n```\nimport asyncio\nfrom gs2d import SerialInterface, Futaba\n\nasync def main(loop):\n    # Initialize SerialInterface & servo object\n    si = SerialInterface()\n    futaba = Futaba(si)\n\n    # Get voltage\n    voltage = await futaba.get_voltage_async(sid=1)\n    print('Voltage: %.2f(V)' % voltage)\n\n    # Close SerialInterface & servo object\n    futaba.close()\n    si.close()\n\n\n# Initialize event loop\nlp = asyncio.get_event_loop()\nlp.run_until_complete(main(lp))\nlp.close()\n```\n\n\n\n## API\n\n### Torque Enable (get/set)\n\n#### get_torque_enable\n\n```\nget_torque_enable(sid, callback=None)\n```\n\n- Parameters\n  - sid: Servo ID\n  - callback: TBD\n- Response\n  - None\n\n```\nget_torque_enable_async(sid, loop=None)\n```\n\n- Parameters\n  - sid: Servo ID\n  - loop: TBD\n- Response\n  - True (Torque ON)/False (Torque OFF)\n\n#### set_torque_enable\n\n\n\n\n\n## License\nGeneric Serial-bus Servo Driver library uses Apache License 2.0.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/karakuri-products/gs2d-python", "keywords": "", "license": "Apache License Version 2.0", "maintainer": "", "maintainer_email": "", "name": "gs2d", "package_url": "https://pypi.org/project/gs2d/", "platform": "", "project_url": "https://pypi.org/project/gs2d/", "project_urls": {"Homepage": "https://github.com/karakuri-products/gs2d-python"}, "release_url": "https://pypi.org/project/gs2d/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "gs2d: The Library for Generic Serial-bus Servo Driver kr-sac001 for Python", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>gs2d: Generic Serial-bus Servo Driver library for Python</h1>\n<blockquote>\n<p>karakuri products\u793e\u88fd\u30b7\u30ea\u30a2\u30eb\u30b5\u30fc\u30dc\u30c9\u30e9\u30a4\u30d0 kr-sac001 \u7528\u306e Python \u30e9\u30a4\u30d6\u30e9\u30ea</p>\n</blockquote>\n<hr>\n<h2>\u6a5f\u80fd</h2>\n<ul>\n<li><a href=\"https://github.com/karakuri-products\" rel=\"nofollow\">karakuri products\u793e\u88fd\u30b7\u30ea\u30a2\u30eb\u30b5\u30fc\u30dc\u30c9\u30e9\u30a4\u30d0 kr-sac001</a> \u306b\u63a5\u7d9a\u3055\u308c\u305f\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u3092 Python \u3067\u7c21\u5358\u306b\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3067\u304d\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002</li>\n<li>\u69d8\u3005\u306a\u30d6\u30e9\u30f3\u30c9\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u3092\u307b\u307c\u540c\u3058\u95a2\u6570\u3067\u5236\u5fa1\u304c\u53ef\u80fd\u3067\u3059\u3002</li>\n<li>Read\u7cfb\u30b3\u30de\u30f3\u30c9\u306fBlocking\u30b9\u30bf\u30a4\u30eb\u3001callback\u30b9\u30bf\u30a4\u30eb\u3001async\u30b9\u30bf\u30a4\u30eb\u3067\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002</li>\n</ul>\n<h2>\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf</h2>\n<ul>\n<li>\n<p>\u73fe\u5728\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf</p>\n<ul>\n<li>FUTABA RS40x</li>\n</ul>\n</li>\n<li>\n<p>\u3082\u3046\u3059\u3050\u5bfe\u5fdc\u3059\u308b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf</p>\n<ul>\n<li>Dynamixel X</li>\n</ul>\n</li>\n<li>\n<p>\u5bfe\u5fdc\u3057\u305f\u3044\u306a\u3001\u3068\u601d\u3063\u3066\u3044\u308b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf</p>\n<ul>\n<li>KONDO KRS300x</li>\n<li>KONDO KRS400x</li>\n<li>JR programmable</li>\n<li>Vstone Vs-xxx</li>\n</ul>\n</li>\n</ul>\n<h2>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5</h2>\n<pre><code>pip install gs2d\n</code></pre>\n<h2>\u5229\u7528\u4f8b</h2>\n<h3>\u30d5\u30bf\u30d0\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bfID:1\u3092\u3061\u3087\u3063\u3068\u305a\u3064\u52d5\u304b\u3059</h3>\n<pre><code>from gs2d import SerialInterface, Futaba\n\n# Initialize\nsi = SerialInterface()\nfutaba = Futaba(si)\n\n# Enable torque\nfutaba.set_torque_enable(True, sid=1)\n\nfor i in range(11):\n  angle = i * 20 - 100\n  print('Angle:', angle, 'deg')\n  futaba.set_target_position(angle, sid=1)\n  time.sleep(0.5)\n\n# Disable torque\nfutaba.set_torque_enable(False, sid=1)\n\n# Close\nfutaba.close()\nsi.close()\n</code></pre>\n<h3>\u30d5\u30bf\u30d0\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bfID:1\u306e\u96fb\u5727\u3092\u53d6\u5f97\u3059\u308b (Blocking\u7248)</h3>\n<pre><code>from gs2d import SerialInterface, Futaba\n\n# \u521d\u671f\u5316\nsi = SerialInterface()\nfutaba = Futaba(si)\n\n# \u96fb\u5727\u53d6\u5f97\nv = futaba.get_voltage(sid=1)\nprint('Voltage: %.2f(V)' % v)\n\n# \u30af\u30ed\u30fc\u30ba\nfutaba.close()\nsi.close()\n</code></pre>\n<h3>\u30d5\u30bf\u30d0\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bfID:1\u306e\u96fb\u5727\u3092\u53d6\u5f97\u3059\u308b (\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7248)</h3>\n<pre><code>from gs2d import SerialInterface, Futaba\n\ndef voltage_callback(voltage):\n    \"\"\"\u96fb\u5727\u53d6\u5f97\u3067\u304d\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\"\"\"\n    print('Voltage: %.2f(V)' % voltage)\n\n    # \u30af\u30ed\u30fc\u30ba\n    futaba.close()\n    si.close()\n\n# \u521d\u671f\u5316\nsi = SerialInterface()\nfutaba = Futaba(si)\n\n# \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3064\u304d\u3067\u96fb\u5727\u53d6\u5f97\nfutaba.get_voltage(sid=1, callback=voltage_callback)\n</code></pre>\n<h3>\u30d5\u30bf\u30d0\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bfID:1\u306e\u96fb\u5727\u3092\u53d6\u5f97\u3059\u308b (Async\u7248)</h3>\n<pre><code>import asyncio\nfrom gs2d import SerialInterface, Futaba\n\nasync def main(loop):\n    # Initialize SerialInterface &amp; servo object\n    si = SerialInterface()\n    futaba = Futaba(si)\n\n    # Get voltage\n    voltage = await futaba.get_voltage_async(sid=1)\n    print('Voltage: %.2f(V)' % voltage)\n\n    # Close SerialInterface &amp; servo object\n    futaba.close()\n    si.close()\n\n\n# Initialize event loop\nlp = asyncio.get_event_loop()\nlp.run_until_complete(main(lp))\nlp.close()\n</code></pre>\n<h2>API</h2>\n<h3>Torque Enable (get/set)</h3>\n<h4>get_torque_enable</h4>\n<pre><code>get_torque_enable(sid, callback=None)\n</code></pre>\n<ul>\n<li>Parameters\n<ul>\n<li>sid: Servo ID</li>\n<li>callback: TBD</li>\n</ul>\n</li>\n<li>Response\n<ul>\n<li>None</li>\n</ul>\n</li>\n</ul>\n<pre><code>get_torque_enable_async(sid, loop=None)\n</code></pre>\n<ul>\n<li>Parameters\n<ul>\n<li>sid: Servo ID</li>\n<li>loop: TBD</li>\n</ul>\n</li>\n<li>Response\n<ul>\n<li>True (Torque ON)/False (Torque OFF)</li>\n</ul>\n</li>\n</ul>\n<h4>set_torque_enable</h4>\n<h2>License</h2>\n<p>Generic Serial-bus Servo Driver library uses Apache License 2.0.</p>\n\n          </div>"}, "last_serial": 7125407, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d802ea0e62e38af3131f13f6b47fb269", "sha256": "a47d90fdd609edf6cc0b667b10dcad54079e6999fb614eef43cac0ca86586201"}, "downloads": -1, "filename": "gs2d-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d802ea0e62e38af3131f13f6b47fb269", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17800, "upload_time": "2020-04-29T02:32:40", "upload_time_iso_8601": "2020-04-29T02:32:40.613545Z", "url": "https://files.pythonhosted.org/packages/5c/10/253a254d3c092322955112cca9c767b6fffefe831c38685f5fe525038b5e/gs2d-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "779c153099986454e26176f9e760fbd4", "sha256": "75db030556ee3ac8604c4f706be5beabbc6469ed6af9d343106eb8d82e186413"}, "downloads": -1, "filename": "gs2d-0.0.2.tar.gz", "has_sig": false, "md5_digest": "779c153099986454e26176f9e760fbd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19721, "upload_time": "2020-04-29T02:51:04", "upload_time_iso_8601": "2020-04-29T02:51:04.289831Z", "url": "https://files.pythonhosted.org/packages/81/3d/c4b95fa7dd6485f66119801c9791ad0d36603e9d72e586dee4b56d1bc66d/gs2d-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "779c153099986454e26176f9e760fbd4", "sha256": "75db030556ee3ac8604c4f706be5beabbc6469ed6af9d343106eb8d82e186413"}, "downloads": -1, "filename": "gs2d-0.0.2.tar.gz", "has_sig": false, "md5_digest": "779c153099986454e26176f9e760fbd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19721, "upload_time": "2020-04-29T02:51:04", "upload_time_iso_8601": "2020-04-29T02:51:04.289831Z", "url": "https://files.pythonhosted.org/packages/81/3d/c4b95fa7dd6485f66119801c9791ad0d36603e9d72e586dee4b56d1bc66d/gs2d-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:45 2020"}