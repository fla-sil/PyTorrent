{"info": {"author": "Flore <flore.love@gmail.com>, Neraste <neraste.herr10@gmail.com>", "author_email": "", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# Dakara Feeder\n\n[![Travis CI Build Status](https://travis-ci.com/DakaraProject/dakara-feeder.svg?branch=develop)](https://travis-ci.com/DakaraProject/dakara-feeder)\n[![Appveyor CI Build status](https://ci.appveyor.com/api/projects/status/7vxx2dyu8y25v6of?svg=true)](https://ci.appveyor.com/project/neraste/dakara-feeder/branch/develop)\n[![Codecov coverage analysis](https://codecov.io/gh/DakaraProject/dakara-feeder/branch/develop/graph/badge.svg)](https://codecov.io/gh/DakaraProject/dakara-feeder)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![PyPI version](https://badge.fury.io/py/dakarafeeder.svg)](https://pypi.python.org/pypi/dakarafeeder/)\n[![PyPI Python versions](https://img.shields.io/pypi/pyversions/dakarafeeder.svg)](https://pypi.python.org/pypi/dakarafeeder/)\n\nAllows to feed the database of the Dakara server remotely.\n\n## Installation\n\nThis repo is tied with the Dakara server, so you should setup it first:\n\n* [Dakara server](https://github.com/DakaraProject/dakara-server/).\n\nOther important parts of the project include:\n\n* [Dakara VLC player](https://github.com/DakaraProject/dakara-player-vlc/).\n\n### System requirements\n\n* Python3, to make everything up and running (supported versions: 3.5 and 3.6);\n* [ffmpeg](https://www.ffmpeg.org/), to extract lyrics and extract metadata from files (preferred way);\n* [MediaInfo](https://mediaarea.net/fr/MediaInfo/), to extract metadata from files (slower, alternative way, may not work on Windows).\n\nLinux and Windows are supported.\n\n### Virtual environment\n\nIt is strongly recommended to use the Dakara feeder within a virtual environment.\n\n### Install\n\nInstall the package with:\n\n```sh\npip install dakarafeeder\n```\n\nIf you have downloaded the repo, you can install the package directly with:\n\n```sh\npython setup.py install\n```\n\n## Usage\n\n### Commands\n\nThe package provides the `dakara-feed` command which will find songs in the configured directory, parse them and send their data to a running instance of the Dakara server:\n\n```sh\ndakara-feed\n# or\npython -m dakara_feed\n```\n\nOne instance of the Dakara server should be running.\nFor more help:\n\n```sh\ndakara-feed -h\n# or\npython -m dakara_feed -h\n```\n\nBefore calling the function, you should create a config file with:\n\n```sh\ndakara-feed create-config\n# or\npython -m dakara_feed create-config\n```\n\nand complete it with your values. The file is stored in your user space: `~/.config/dakara` on Linux or `$APPDATA\\Dakara` on Windows.\n\nThe data extracted from songs are very limited in this package by default, as data can be stored in various ways in song files. You are encouraged to make your own parser, see next subsection.\n\n### Making a custom parser\n\nTo override the extraction of data from song files, you should create a class derived from `dakara_feeder.song.BaseSong`. Please refer to the documentation of this class to learn which methods to override, and what attributes and helpers are at your disposal.\n\nHere is a basic example. It considers that the song video file is formatted in the way \"title - main artist.ext\":\n\n```python\n# my_song.py\nfrom dakara_feeder.song import BaseSong\n\nclass Song(BaseSong):\n    def get_title(self):\n        return self.video_path.stem.split(\" - \")[0]\n\n    def get_artists(self):\n        return [{\"name\": self.video_path.stem.split(\" - \")[1]}]\n```\n\nThe file must be in the same directory you are calling `dakara-feed`, or in any directory reachable by Python.\nTo register your customized `Song` class, you simply enable it in the config file:\n\n```yaml\n# Custom song class to use\n# If you want to extract additional data when parsing files (video, subtitle or\n# other), you can write your own Song class, derived from\n# `dakara_feeder.song.BaseSong`. See documentation of BaseSong for more details\n# on how to proceed.\n# Indicate the module name of the class to use.\n# Default is BaseSong, which is pretty basic.\ncustom_song_class: my_song.Song\n```\n\nNow, `dakara-feed` will use your customized `Song` class instead of the default one.\n\n## Developpment\n\n### Install dependencies\n\nPlease ensure you have a recent enough version of `setuptools`:\n\n```sh\npip install --upgrade \"setuptools>=40.0\"\n```\n\nInstall the dependencies with:\n\n```sh\npip install -e \".[tests]\"\n```\n\nThis installs the normal dependencies of the package plus the dependencies for tests.\n\n### Run tests\n\nRun tests simply with:\n\n```sh\npython setup.py test\n```\n\nTo check coverage, use the `coverage` command:\n\n```sh\ncoverage run setup.py test\ncoverage report -m\n```\n\n### Hooks\n\nGit hooks are included in the `hooks` directory.\n\nUse the following command to use this hook folder for the project:\n\n```\ngit config core.hooksPath hooks\n```\n\nIf you're using git < 2.9 you can make a symlink instead:\n\n```\nln -s -f ../../hooks/pre-commit .git/hooks/pre-commit\n```\n\n### Code style\n\nThe code follows the [PEP8](https://www.python.org/dev/peps/pep-0008/) style guide (88 chars per line).\nQuality of code is checked with [Flake8](https://pypi.org/project/flake8/).\nStyle is enforced using [Black](https://github.com/ambv/black).\nYou need to call Black before committing changes.\nYou may want to configure your editor to call it automatically.\nAdditionnal checking can be manually performed with [Pylint](https://www.pylint.org/).\n\nMIT License\n\nCopyright (c) 2019 Dakara Project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DakaraProject/dakara-feeder", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dakarafeeder", "package_url": "https://pypi.org/project/dakarafeeder/", "platform": "", "project_url": "https://pypi.org/project/dakarafeeder/", "project_urls": {"Bug tracker": "https://github.com/DakaraProject/dakara-feeder/issues", "Homepage": "https://github.com/DakaraProject/dakara-feeder"}, "release_url": "https://pypi.org/project/dakarafeeder/1.5.1/", "requires_dist": ["importlib-metadata (<0.24,>=0.23)", "dakarabase (<1.3.0,>=1.2.0)", "pymediainfo (<5.0,>=4.0)", "pysubs2 (<0.3.0,>=0.2.4)", "coverage ; extra == 'tests'", "codecov ; extra == 'tests'", "flake8 ; extra == 'tests'", "black ; (python_version >= \"3.6\") and extra == 'tests'"], "requires_python": "", "summary": "External database feeder for the Dakara Project", "version": "1.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Dakara Feeder</h1>\n<p><a href=\"https://travis-ci.com/DakaraProject/dakara-feeder\" rel=\"nofollow\"><img alt=\"Travis CI Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26831d839416585430d1735415580bf85898e883/68747470733a2f2f7472617669732d63692e636f6d2f44616b61726150726f6a6563742f64616b6172612d6665656465722e7376673f6272616e63683d646576656c6f70\"></a>\n<a href=\"https://ci.appveyor.com/project/neraste/dakara-feeder/branch/develop\" rel=\"nofollow\"><img alt=\"Appveyor CI Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9de5f8b772bdb47220e0e88d355f60f7c1125e59/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f37767878326479753879323576366f663f7376673d74727565\"></a>\n<a href=\"https://codecov.io/gh/DakaraProject/dakara-feeder\" rel=\"nofollow\"><img alt=\"Codecov coverage analysis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b24b8dac77c49244e85fd9fb132c2d97ecfba7d6/68747470733a2f2f636f6465636f762e696f2f67682f44616b61726150726f6a6563742f64616b6172612d6665656465722f6272616e63682f646576656c6f702f67726170682f62616467652e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/dakarafeeder/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1527826dbe3e3573b3f50a4f25e2bd229a8cbd4a/68747470733a2f2f62616467652e667572792e696f2f70792f64616b6172616665656465722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/dakarafeeder/\" rel=\"nofollow\"><img alt=\"PyPI Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7789c222389584f589e24c14130e752401690679/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f64616b6172616665656465722e737667\"></a></p>\n<p>Allows to feed the database of the Dakara server remotely.</p>\n<h2>Installation</h2>\n<p>This repo is tied with the Dakara server, so you should setup it first:</p>\n<ul>\n<li><a href=\"https://github.com/DakaraProject/dakara-server/\" rel=\"nofollow\">Dakara server</a>.</li>\n</ul>\n<p>Other important parts of the project include:</p>\n<ul>\n<li><a href=\"https://github.com/DakaraProject/dakara-player-vlc/\" rel=\"nofollow\">Dakara VLC player</a>.</li>\n</ul>\n<h3>System requirements</h3>\n<ul>\n<li>Python3, to make everything up and running (supported versions: 3.5 and 3.6);</li>\n<li><a href=\"https://www.ffmpeg.org/\" rel=\"nofollow\">ffmpeg</a>, to extract lyrics and extract metadata from files (preferred way);</li>\n<li><a href=\"https://mediaarea.net/fr/MediaInfo/\" rel=\"nofollow\">MediaInfo</a>, to extract metadata from files (slower, alternative way, may not work on Windows).</li>\n</ul>\n<p>Linux and Windows are supported.</p>\n<h3>Virtual environment</h3>\n<p>It is strongly recommended to use the Dakara feeder within a virtual environment.</p>\n<h3>Install</h3>\n<p>Install the package with:</p>\n<pre>pip install dakarafeeder\n</pre>\n<p>If you have downloaded the repo, you can install the package directly with:</p>\n<pre>python setup.py install\n</pre>\n<h2>Usage</h2>\n<h3>Commands</h3>\n<p>The package provides the <code>dakara-feed</code> command which will find songs in the configured directory, parse them and send their data to a running instance of the Dakara server:</p>\n<pre>dakara-feed\n<span class=\"c1\"># or</span>\npython -m dakara_feed\n</pre>\n<p>One instance of the Dakara server should be running.\nFor more help:</p>\n<pre>dakara-feed -h\n<span class=\"c1\"># or</span>\npython -m dakara_feed -h\n</pre>\n<p>Before calling the function, you should create a config file with:</p>\n<pre>dakara-feed create-config\n<span class=\"c1\"># or</span>\npython -m dakara_feed create-config\n</pre>\n<p>and complete it with your values. The file is stored in your user space: <code>~/.config/dakara</code> on Linux or <code>$APPDATA\\Dakara</code> on Windows.</p>\n<p>The data extracted from songs are very limited in this package by default, as data can be stored in various ways in song files. You are encouraged to make your own parser, see next subsection.</p>\n<h3>Making a custom parser</h3>\n<p>To override the extraction of data from song files, you should create a class derived from <code>dakara_feeder.song.BaseSong</code>. Please refer to the documentation of this class to learn which methods to override, and what attributes and helpers are at your disposal.</p>\n<p>Here is a basic example. It considers that the song video file is formatted in the way \"title - main artist.ext\":</p>\n<pre><span class=\"c1\"># my_song.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dakara_feeder.song</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSong</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Song</span><span class=\"p\">(</span><span class=\"n\">BaseSong</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">video_path</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\" - \"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_artists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">video_path</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\" - \"</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]}]</span>\n</pre>\n<p>The file must be in the same directory you are calling <code>dakara-feed</code>, or in any directory reachable by Python.\nTo register your customized <code>Song</code> class, you simply enable it in the config file:</p>\n<pre><span class=\"c1\"># Custom song class to use</span>\n<span class=\"c1\"># If you want to extract additional data when parsing files (video, subtitle or</span>\n<span class=\"c1\"># other), you can write your own Song class, derived from</span>\n<span class=\"c1\"># `dakara_feeder.song.BaseSong`. See documentation of BaseSong for more details</span>\n<span class=\"c1\"># on how to proceed.</span>\n<span class=\"c1\"># Indicate the module name of the class to use.</span>\n<span class=\"c1\"># Default is BaseSong, which is pretty basic.</span>\n<span class=\"nt\">custom_song_class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_song.Song</span>\n</pre>\n<p>Now, <code>dakara-feed</code> will use your customized <code>Song</code> class instead of the default one.</p>\n<h2>Developpment</h2>\n<h3>Install dependencies</h3>\n<p>Please ensure you have a recent enough version of <code>setuptools</code>:</p>\n<pre>pip install --upgrade <span class=\"s2\">\"setuptools&gt;=40.0\"</span>\n</pre>\n<p>Install the dependencies with:</p>\n<pre>pip install -e <span class=\"s2\">\".[tests]\"</span>\n</pre>\n<p>This installs the normal dependencies of the package plus the dependencies for tests.</p>\n<h3>Run tests</h3>\n<p>Run tests simply with:</p>\n<pre>python setup.py <span class=\"nb\">test</span>\n</pre>\n<p>To check coverage, use the <code>coverage</code> command:</p>\n<pre>coverage run setup.py <span class=\"nb\">test</span>\ncoverage report -m\n</pre>\n<h3>Hooks</h3>\n<p>Git hooks are included in the <code>hooks</code> directory.</p>\n<p>Use the following command to use this hook folder for the project:</p>\n<pre><code>git config core.hooksPath hooks\n</code></pre>\n<p>If you're using git &lt; 2.9 you can make a symlink instead:</p>\n<pre><code>ln -s -f ../../hooks/pre-commit .git/hooks/pre-commit\n</code></pre>\n<h3>Code style</h3>\n<p>The code follows the <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP8</a> style guide (88 chars per line).\nQuality of code is checked with <a href=\"https://pypi.org/project/flake8/\" rel=\"nofollow\">Flake8</a>.\nStyle is enforced using <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">Black</a>.\nYou need to call Black before committing changes.\nYou may want to configure your editor to call it automatically.\nAdditionnal checking can be manually performed with <a href=\"https://www.pylint.org/\" rel=\"nofollow\">Pylint</a>.</p>\n<p>MIT License</p>\n<p>Copyright (c) 2019 Dakara Project</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n          </div>"}, "last_serial": 6254841, "releases": {"1.5.0": [{"comment_text": "", "digests": {"md5": "af1a2b98d8434d9e5901a9f977b96f3d", "sha256": "cff3562cf1818d67541404441ebffdda3a3ec353e1ee0893aed3e8f52381540a"}, "downloads": -1, "filename": "dakarafeeder-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "af1a2b98d8434d9e5901a9f977b96f3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22118, "upload_time": "2019-12-05T15:37:03", "upload_time_iso_8601": "2019-12-05T15:37:03.044038Z", "url": "https://files.pythonhosted.org/packages/a1/9d/54cb02f65b141e621b209f24b4f48f21871d66799c077913b76d4a3818d9/dakarafeeder-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "271639d20eefe5d8eb0652f9b43c2be5", "sha256": "3636a66b11d5525ebc8a15cc16634f907a0293982aed4532681763e50fbb783c"}, "downloads": -1, "filename": "dakarafeeder-1.5.0.tar.gz", "has_sig": false, "md5_digest": "271639d20eefe5d8eb0652f9b43c2be5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32954, "upload_time": "2019-12-05T15:37:05", "upload_time_iso_8601": "2019-12-05T15:37:05.847899Z", "url": "https://files.pythonhosted.org/packages/cb/88/331608918fd63357ff2f3324accac0b65422325f7ffea64f431d9f0c713e/dakarafeeder-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "a3fa8c790c865690c10b2a819c3b787d", "sha256": "e547fd4657ac22175f9b04704d28ee8bff06208b2d59a135ece2bb40dfe87b96"}, "downloads": -1, "filename": "dakarafeeder-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a3fa8c790c865690c10b2a819c3b787d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22265, "upload_time": "2019-12-06T16:00:27", "upload_time_iso_8601": "2019-12-06T16:00:27.540415Z", "url": "https://files.pythonhosted.org/packages/8c/d6/cd5f3c83220bbcd815d2bcd72d89d9d317f8771db8c69ef77eeaa464edde/dakarafeeder-1.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c509c0e033e9307fb6a5d4ded3ec6c06", "sha256": "d8d98a69c8bf4aea43c9ded410682fe396f0c3b5a006aedf375eb2a783e00b80"}, "downloads": -1, "filename": "dakarafeeder-1.5.1.tar.gz", "has_sig": false, "md5_digest": "c509c0e033e9307fb6a5d4ded3ec6c06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33496, "upload_time": "2019-12-06T16:00:29", "upload_time_iso_8601": "2019-12-06T16:00:29.619819Z", "url": "https://files.pythonhosted.org/packages/63/d1/fd87ff3428b97062a79173b85bfee4400f905b9caa9b3b409ed01584faf7/dakarafeeder-1.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3fa8c790c865690c10b2a819c3b787d", "sha256": "e547fd4657ac22175f9b04704d28ee8bff06208b2d59a135ece2bb40dfe87b96"}, "downloads": -1, "filename": "dakarafeeder-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a3fa8c790c865690c10b2a819c3b787d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22265, "upload_time": "2019-12-06T16:00:27", "upload_time_iso_8601": "2019-12-06T16:00:27.540415Z", "url": "https://files.pythonhosted.org/packages/8c/d6/cd5f3c83220bbcd815d2bcd72d89d9d317f8771db8c69ef77eeaa464edde/dakarafeeder-1.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c509c0e033e9307fb6a5d4ded3ec6c06", "sha256": "d8d98a69c8bf4aea43c9ded410682fe396f0c3b5a006aedf375eb2a783e00b80"}, "downloads": -1, "filename": "dakarafeeder-1.5.1.tar.gz", "has_sig": false, "md5_digest": "c509c0e033e9307fb6a5d4ded3ec6c06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33496, "upload_time": "2019-12-06T16:00:29", "upload_time_iso_8601": "2019-12-06T16:00:29.619819Z", "url": "https://files.pythonhosted.org/packages/63/d1/fd87ff3428b97062a79173b85bfee4400f905b9caa9b3b409ed01584faf7/dakarafeeder-1.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:46 2020"}