{"info": {"author": "Bilgehan NAL", "author_email": "bilgehannal@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# bios\n\n  - 'bios' is a python library which helps you for operations of I/O.\n  - You can read determined type of files and assign the content of the files to the best suitable data type for these contents.\n  - If it is required, developer should handle the exception handling issues.\n\n### Install and Import\n\n> pip install bios\n\n    import bios\n\n### Supported Files\n - JSON Files\n\t - Can be assigned to data types of string, list or dict.\n - YAML Files\n\t - Can be assigned to data types of string, list or dict.\n - CSV Files\n\t - Can be assigned to data types of string or list.\n - Other Files\n\t- Can be assigned to data type of string.\n\n### Operations and Using\n\n#### Reading\nYou can read the file using read function of bios. If you will not give any file type, system can determined the file types showing in the below and assign the content of the files to suitable data_types.\n\n    content1 = bios.read('file.txt')\n    content2 = bios.read('file.json')\n    content3 = bios.read('file.yaml')\n    content4 = bios.read('file.csv')\n    content4 = bios.read('file.csv', delimiter=';')\n    content5 = bios.read('file.yml')\n    content6 = bios.read('file')\n\n\t# Type of content1 and contend6 is string\n\t# Type of content2, content3 and content5 is dict or list\n\t# Tyoe of content4 is list\n\n- ##### Standart File\n\nYou can read the content of a file and assign it into a string.\n\n    content = bios.read('file.txt', file_type='standart')\n\n- ##### JSON File\n\nYou can read the content of a JSON file and assign it into a dict or list object.\n\n    content = bios.read('file.json', file_type='json')\n\nType of the content could be 'list' or 'dict'\n- ##### YAML File\n\nYou can read the content of a YAML file and assign it into a dict or list object.\n\n    content = bios.read('file.yaml', file_type='yaml')\n    content = bios.read('file.yaml', file_type='yml')\n\nType of the content could be 'list' or 'dict'\n- ##### CSV File\n\nYou can read the content of a CSV file and assign it into a list. Default delimiter is comma ' , '.\n\n    content = bios.read('file.json', file_type='csv')\n\tcontent = bios.read('file.json', file_type='csv', delimiter=';')\n\nType of the content could be 'list'\n\n#### Writing\nYou can write your 'data' object to a file. If you will not give a specific file a file type, file type is determined according to the file name.\n\n    bios.write('file.txt', data1)\n    bios.write('file.json', data2)\n    bios.write('file.yaml', data3)\n    bios.write('file.csv', data4)\n    bios.write('file.csv', data4, delimiter=';')\n    bios.write('file.yml', data5)\n    bios.write('file', data5)\n\t\n\t# data1 and data5 must be a string\n\t# data2, data3 and data5 must be a dict or list object\n\t# data4 must be a list object\n\t\n- ##### Standart File\n\nYou can write a string object to any file giving a file type as 'standart'\n\n     bios.write('file.txt', data, file_type='standart')\n\n- ##### JSON File\n\nYou can write a list or dict object to any file giving a file type as 'json'\n\n     bios.write('file.json', data, file_type='json')\n     \n- ##### YAML File\n\nYou can write a list or dict object to any file giving a file type as 'yaml' or 'yml'\n\n     bios.write('file.yml', data, file_type='yaml')\n     \n- ##### CSV File\n\nYou can write a list object to any file giving a file type as 'standart'\n\n     bios.write('file.csv', data, file_type='csv')\n     bios.write('file.csv', data, file_type='csv', delimiter=';')\n\nYou can use the parameter of 'delimiter' for separating the contents from each other.\n     \n#### Appending\nYou can append or add a content to an existing file. This function is available for only text files or csv files.\n\n    bios.append('file.txt', data)\n    bios.append('file.txt', data, line=2)\n    bios.append('file.txt', data, delimiter=';')\n    bios.append('file.csv', data, line=2, delimiter=';')\n    \nLine is assumed that starting from the value of 1\n\n- ##### Standart File\n\nYou can append a string object to a existing or nonexistent file. If you don't give a line parameter, bios would append the content after the end of the file.\n\n     bios.append('file.txt', data, file_type='standart')\n     bios.append('file.txt', data, file_type='standart', line=2)\n\n- ##### CSV File\n\nYou can append a list object to a existing or nonexistent file. If you don't give a line parameter, bios would append the content after the end of the file.\n\n     bios.append('file.csv', data, file_type='csv')\n     bios.append('file.csv', data, file_type='csv', line=2)\n\n###  Example\n\n    import bios\n    content = bios.read('files/my_file.csv')\n    second_row = content[1]\n    for single_column in second_row:\n\t    print(single_column)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/bilgehannal/bios/archive/v_01.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bilgehannal/bios", "keywords": "io,read,write,file", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bios", "package_url": "https://pypi.org/project/bios/", "platform": "", "project_url": "https://pypi.org/project/bios/", "project_urls": {"Download": "https://github.com/bilgehannal/bios/archive/v_01.tar.gz", "Homepage": "https://github.com/bilgehannal/bios"}, "release_url": "https://pypi.org/project/bios/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "bios is a library which helps you to read and write data to determined type of files.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bios</h1>\n<ul>\n<li>'bios' is a python library which helps you for operations of I/O.</li>\n<li>You can read determined type of files and assign the content of the files to the best suitable data type for these contents.</li>\n<li>If it is required, developer should handle the exception handling issues.</li>\n</ul>\n<h3>Install and Import</h3>\n<blockquote>\n<p>pip install bios</p>\n</blockquote>\n<pre><code>import bios\n</code></pre>\n<h3>Supported Files</h3>\n<ul>\n<li>JSON Files\n<ul>\n<li>Can be assigned to data types of string, list or dict.</li>\n</ul>\n</li>\n<li>YAML Files\n<ul>\n<li>Can be assigned to data types of string, list or dict.</li>\n</ul>\n</li>\n<li>CSV Files\n<ul>\n<li>Can be assigned to data types of string or list.</li>\n</ul>\n</li>\n<li>Other Files\n<ul>\n<li>Can be assigned to data type of string.</li>\n</ul>\n</li>\n</ul>\n<h3>Operations and Using</h3>\n<h4>Reading</h4>\n<p>You can read the file using read function of bios. If you will not give any file type, system can determined the file types showing in the below and assign the content of the files to suitable data_types.</p>\n<pre><code>content1 = bios.read('file.txt')\ncontent2 = bios.read('file.json')\ncontent3 = bios.read('file.yaml')\ncontent4 = bios.read('file.csv')\ncontent4 = bios.read('file.csv', delimiter=';')\ncontent5 = bios.read('file.yml')\ncontent6 = bios.read('file')\n\n# Type of content1 and contend6 is string\n# Type of content2, content3 and content5 is dict or list\n# Tyoe of content4 is list\n</code></pre>\n<ul>\n<li>\n<h5>Standart File</h5>\n</li>\n</ul>\n<p>You can read the content of a file and assign it into a string.</p>\n<pre><code>content = bios.read('file.txt', file_type='standart')\n</code></pre>\n<ul>\n<li>\n<h5>JSON File</h5>\n</li>\n</ul>\n<p>You can read the content of a JSON file and assign it into a dict or list object.</p>\n<pre><code>content = bios.read('file.json', file_type='json')\n</code></pre>\n<p>Type of the content could be 'list' or 'dict'</p>\n<ul>\n<li>\n<h5>YAML File</h5>\n</li>\n</ul>\n<p>You can read the content of a YAML file and assign it into a dict or list object.</p>\n<pre><code>content = bios.read('file.yaml', file_type='yaml')\ncontent = bios.read('file.yaml', file_type='yml')\n</code></pre>\n<p>Type of the content could be 'list' or 'dict'</p>\n<ul>\n<li>\n<h5>CSV File</h5>\n</li>\n</ul>\n<p>You can read the content of a CSV file and assign it into a list. Default delimiter is comma ' , '.</p>\n<pre><code>content = bios.read('file.json', file_type='csv')\ncontent = bios.read('file.json', file_type='csv', delimiter=';')\n</code></pre>\n<p>Type of the content could be 'list'</p>\n<h4>Writing</h4>\n<p>You can write your 'data' object to a file. If you will not give a specific file a file type, file type is determined according to the file name.</p>\n<pre><code>bios.write('file.txt', data1)\nbios.write('file.json', data2)\nbios.write('file.yaml', data3)\nbios.write('file.csv', data4)\nbios.write('file.csv', data4, delimiter=';')\nbios.write('file.yml', data5)\nbios.write('file', data5)\n\n# data1 and data5 must be a string\n# data2, data3 and data5 must be a dict or list object\n# data4 must be a list object\n</code></pre>\n<ul>\n<li>\n<h5>Standart File</h5>\n</li>\n</ul>\n<p>You can write a string object to any file giving a file type as 'standart'</p>\n<pre><code> bios.write('file.txt', data, file_type='standart')\n</code></pre>\n<ul>\n<li>\n<h5>JSON File</h5>\n</li>\n</ul>\n<p>You can write a list or dict object to any file giving a file type as 'json'</p>\n<pre><code> bios.write('file.json', data, file_type='json')\n</code></pre>\n<ul>\n<li>\n<h5>YAML File</h5>\n</li>\n</ul>\n<p>You can write a list or dict object to any file giving a file type as 'yaml' or 'yml'</p>\n<pre><code> bios.write('file.yml', data, file_type='yaml')\n</code></pre>\n<ul>\n<li>\n<h5>CSV File</h5>\n</li>\n</ul>\n<p>You can write a list object to any file giving a file type as 'standart'</p>\n<pre><code> bios.write('file.csv', data, file_type='csv')\n bios.write('file.csv', data, file_type='csv', delimiter=';')\n</code></pre>\n<p>You can use the parameter of 'delimiter' for separating the contents from each other.</p>\n<h4>Appending</h4>\n<p>You can append or add a content to an existing file. This function is available for only text files or csv files.</p>\n<pre><code>bios.append('file.txt', data)\nbios.append('file.txt', data, line=2)\nbios.append('file.txt', data, delimiter=';')\nbios.append('file.csv', data, line=2, delimiter=';')\n</code></pre>\n<p>Line is assumed that starting from the value of 1</p>\n<ul>\n<li>\n<h5>Standart File</h5>\n</li>\n</ul>\n<p>You can append a string object to a existing or nonexistent file. If you don't give a line parameter, bios would append the content after the end of the file.</p>\n<pre><code> bios.append('file.txt', data, file_type='standart')\n bios.append('file.txt', data, file_type='standart', line=2)\n</code></pre>\n<ul>\n<li>\n<h5>CSV File</h5>\n</li>\n</ul>\n<p>You can append a list object to a existing or nonexistent file. If you don't give a line parameter, bios would append the content after the end of the file.</p>\n<pre><code> bios.append('file.csv', data, file_type='csv')\n bios.append('file.csv', data, file_type='csv', line=2)\n</code></pre>\n<h3>Example</h3>\n<pre><code>import bios\ncontent = bios.read('files/my_file.csv')\nsecond_row = content[1]\nfor single_column in second_row:\n    print(single_column)\n</code></pre>\n\n          </div>"}, "last_serial": 5437815, "releases": {"0.0.7": [{"comment_text": "", "digests": {"md5": "6a67442cb4dd4ac0e9191811de8b8432", "sha256": "3e868523c3ec3178c956b885ffb0a9d7874ed1675f7721946ee5bbb46f909931"}, "downloads": -1, "filename": "bios-0.0.7.tar.gz", "has_sig": false, "md5_digest": "6a67442cb4dd4ac0e9191811de8b8432", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2416, "upload_time": "2019-06-15T07:16:06", "upload_time_iso_8601": "2019-06-15T07:16:06.718516Z", "url": "https://files.pythonhosted.org/packages/36/cb/8364162872ebbed65816df831cae28a46746b65e88884798c76d95bacd98/bios-0.0.7.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "697b2384f8e0d8b2b72819d7c23e6331", "sha256": "55756766c690a59c23e0264fcf08b308dd9f27dbe8d2ff60d612c5d6dad9ac94"}, "downloads": -1, "filename": "bios-0.0.9.tar.gz", "has_sig": false, "md5_digest": "697b2384f8e0d8b2b72819d7c23e6331", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2913, "upload_time": "2019-06-23T13:01:43", "upload_time_iso_8601": "2019-06-23T13:01:43.275455Z", "url": "https://files.pythonhosted.org/packages/39/db/0ff1da89e0a57aa014f33104e0e3b1ff3bc6f53a329f229dbe8ec1666ee5/bios-0.0.9.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f2668fd4f99ad590fc1a2c4a080ab1ed", "sha256": "bccfc24011b6a631a6edeef1069551a4ecaaff7b3ed50a6221a68075850500e9"}, "downloads": -1, "filename": "bios-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f2668fd4f99ad590fc1a2c4a080ab1ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4709, "upload_time": "2019-06-23T16:59:13", "upload_time_iso_8601": "2019-06-23T16:59:13.670203Z", "url": "https://files.pythonhosted.org/packages/b9/a0/368aac80c0ce24e014854621550bb802b82eb4e9c33d945866117ddc944e/bios-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f2668fd4f99ad590fc1a2c4a080ab1ed", "sha256": "bccfc24011b6a631a6edeef1069551a4ecaaff7b3ed50a6221a68075850500e9"}, "downloads": -1, "filename": "bios-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f2668fd4f99ad590fc1a2c4a080ab1ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4709, "upload_time": "2019-06-23T16:59:13", "upload_time_iso_8601": "2019-06-23T16:59:13.670203Z", "url": "https://files.pythonhosted.org/packages/b9/a0/368aac80c0ce24e014854621550bb802b82eb4e9c33d945866117ddc944e/bios-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:23 2020"}