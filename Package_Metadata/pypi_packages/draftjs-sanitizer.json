{"info": {"author": "NyanKiyoshi", "author_email": "hello@vanille.bid", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "<div align='center'>\n  <h1>DraftJS Sanitizer</h1>\n  <p>Sanitizes a DraftJS JSON format from a dict to allow saving. Allows safe dumping into a string in order to prevent injection of quotes and HTML entities.</p>\n  <p>\n    <a href='https://travis-ci.org/NyanKiyoshi/draftjs-sanitizer/'>\n      <img src='https://travis-ci.org/NyanKiyoshi/draftjs-sanitizer.svg?branch=master' alt='Build Status' />\n    </a>\n    <a href='https://codecov.io/gh/NyanKiyoshi/draftjs-sanitizer'>\n      <img src='https://codecov.io/gh/NyanKiyoshi/draftjs-sanitizer/branch/master/graph/badge.svg' alt='Coverage Status' />\n    </a>\n    <a href='https://pypi.python.org/pypi/draftjs-sanitizer'>\n      <img src='https://img.shields.io/pypi/v/draftjs-sanitizer.svg' alt='Version' />\n    </a>\n  </p>\n  <p>\n    <a href='https://pypi.python.org/pypi/draftjs-sanitizer'>\n      <img src='https://img.shields.io/pypi/pyversions/draftjs-sanitizer.svg' alt='Supported versions' />\n    </a>\n    <a href='https://pypi.python.org/pypi/draftjs-sanitizer'>\n      <img src='https://img.shields.io/pypi/implementation/draftjs-sanitizer.svg' alt='Supported implementations' />\n    </a>\n  </p>\n</div>\n\n## Installation\n```\npip install draftjs-sanitizer\n```\n\n## Usage\n\n### Remove known exploits\nThis removes any URLs that could be used for XSS attacks by linking raw javascript code.\n\n```python\nfrom draftjs_sanitizer import clean_draft_js\n\n\nclean_draft_js({\n    \"blocks\": [\n        {\n            \"key\": \"an6ci\",\n            \"data\": {},\n            \"text\": \"Get Saleor today!\",\n            \"type\": \"unstyled\",\n            \"depth\": 0,\n            \"entityRanges\": [\n                {\n                    \"key\": 0,\n                    \"length\": 17,\n                    \"offset\": 0\n                }\n            ],\n            \"inlineStyleRanges\": []\n        }\n    ],\n    \"entityMap\": {\n        \"0\": {\n            \"data\": {\n                \"url\": \"javascript:alert('Oopsie!');\"\n            },\n            \"type\": \"LINK\",\n            \"mutability\": \"MUTABLE\"\n        }\n    }\n})\n```\n\n### Dump JSON for HTML Usage\nThis allows to run it as a filter in order to prevent any injection or bypass when putting the JSON into HTML code.\n\n```python\nfrom draftjs_sanitizer import to_string\n\ndumped_json = to_string({\"block\": \"</div><script>alert('Oopsie!');</script>\"})\n```\n\n#### Example 1: attribute bypass\n```html\n<div data-draft-js-json='{\"block\": \"'<script>alert('Oopsie!');</script>\"}'></div>\n```\n\n#### Example 2: bypass inner HTML\n```html\n<div>\n    {\"block\": \"</div><script>alert('Oopsie!');</script>\"}\n</div>\n```\n\n## Supported Checks\n\n| Type | Entities | Description |\n| ---- | -------- | ----------- |\n| Javascript URL | `IMAGE`, `LINK` | Prevent injecting javascript through the `javascript` protocol into a URL. |\n| Invalid URL | `IMAGE`, `LINK` | Removes any invalid URL from the JSON content. |\n| Dangerous Characters | `any` | Removes any sensible character for HTML incorporation: `\"`, `'`, `<`, `>`.\n\n\n## Development\n```\n./setup.py develop\npip install -r requirements_dev.txt\n```\n\nYou can easily extend the behaviors through:\n- `draftjs_sanitizer.encoder.DraftJSSafeEncoder`\n- `draftjs_sanitizer.sanitizer.DraftJSSanitizer`\n\n## Dependencies\n- `urllib3` for RFC 3986 parsing and validation of URLs.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NyanKiyoshi/draftjs-sanitizer/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "draftjs-sanitizer", "package_url": "https://pypi.org/project/draftjs-sanitizer/", "platform": "", "project_url": "https://pypi.org/project/draftjs-sanitizer/", "project_urls": {"Homepage": "https://github.com/NyanKiyoshi/draftjs-sanitizer/"}, "release_url": "https://pypi.org/project/draftjs-sanitizer/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Convert basic HTML into DraftJS JSON format.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n  <h1>DraftJS Sanitizer</h1>\n  <p>Sanitizes a DraftJS JSON format from a dict to allow saving. Allows safe dumping into a string in order to prevent injection of quotes and HTML entities.</p>\n  <p>\n    <a href=\"https://travis-ci.org/NyanKiyoshi/draftjs-sanitizer/\" rel=\"nofollow\">\n      <img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6857e9707765fae58efdeddcaddee79a80c14b12/68747470733a2f2f7472617669732d63692e6f72672f4e79616e4b69796f7368692f64726166746a732d73616e6974697a65722e7376673f6272616e63683d6d6173746572\">\n    </a>\n    <a href=\"https://codecov.io/gh/NyanKiyoshi/draftjs-sanitizer\" rel=\"nofollow\">\n      <img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c897ead8293ac0ddb3378632d575fc523a5adb06/68747470733a2f2f636f6465636f762e696f2f67682f4e79616e4b69796f7368692f64726166746a732d73616e6974697a65722f6272616e63682f6d61737465722f67726170682f62616467652e737667\">\n    </a>\n    <a href=\"https://pypi.python.org/pypi/draftjs-sanitizer\" rel=\"nofollow\">\n      <img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36249b6e5a64958026ab4fe2c82fedb9d19b5422/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f64726166746a732d73616e6974697a65722e737667\">\n    </a>\n  </p>\n  <p>\n    <a href=\"https://pypi.python.org/pypi/draftjs-sanitizer\" rel=\"nofollow\">\n      <img alt=\"Supported versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1743fa292f655d309cc2458c9273dd55b6ce8743/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f64726166746a732d73616e6974697a65722e737667\">\n    </a>\n    <a href=\"https://pypi.python.org/pypi/draftjs-sanitizer\" rel=\"nofollow\">\n      <img alt=\"Supported implementations\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0236f4950ee781a70a8c96460490b588593acae8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f64726166746a732d73616e6974697a65722e737667\">\n    </a>\n  </p>\n</div>\n<h2>Installation</h2>\n<pre><code>pip install draftjs-sanitizer\n</code></pre>\n<h2>Usage</h2>\n<h3>Remove known exploits</h3>\n<p>This removes any URLs that could be used for XSS attacks by linking raw javascript code.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">draftjs_sanitizer</span> <span class=\"kn\">import</span> <span class=\"n\">clean_draft_js</span>\n\n\n<span class=\"n\">clean_draft_js</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"blocks\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"an6ci\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n            <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Get Saleor today!\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"unstyled\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"depth\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"entityRanges\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"length\"</span><span class=\"p\">:</span> <span class=\"mi\">17</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"offset\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n            <span class=\"s2\">\"inlineStyleRanges\"</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">\"entityMap\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"0\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"javascript:alert('Oopsie!');\"</span>\n            <span class=\"p\">},</span>\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"LINK\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"mutability\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MUTABLE\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>Dump JSON for HTML Usage</h3>\n<p>This allows to run it as a filter in order to prevent any injection or bypass when putting the JSON into HTML code.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">draftjs_sanitizer</span> <span class=\"kn\">import</span> <span class=\"n\">to_string</span>\n\n<span class=\"n\">dumped_json</span> <span class=\"o\">=</span> <span class=\"n\">to_string</span><span class=\"p\">({</span><span class=\"s2\">\"block\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;/div&gt;&lt;script&gt;alert('Oopsie!');&lt;/script&gt;\"</span><span class=\"p\">})</span>\n</pre>\n<h4>Example 1: attribute bypass</h4>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">data-draft-js-json</span><span class=\"o\">=</span><span class=\"s\">'{\"block\": \"'</span><span class=\"err\">&lt;</span><span class=\"na\">script</span><span class=\"p\">&gt;</span>alert('Oopsie!');<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\"}'&gt;<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<h4>Example 2: bypass inner HTML</h4>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    {\"block\": \"<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span><span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">'Oopsie!'</span><span class=\"p\">);&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\"}\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<h2>Supported Checks</h2>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Entities</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Javascript URL</td>\n<td><code>IMAGE</code>, <code>LINK</code></td>\n<td>Prevent injecting javascript through the <code>javascript</code> protocol into a URL.</td>\n</tr>\n<tr>\n<td>Invalid URL</td>\n<td><code>IMAGE</code>, <code>LINK</code></td>\n<td>Removes any invalid URL from the JSON content.</td>\n</tr>\n<tr>\n<td>Dangerous Characters</td>\n<td><code>any</code></td>\n<td>Removes any sensible character for HTML incorporation: <code>\"</code>, <code>'</code>, <code>&lt;</code>, <code>&gt;</code>.</td>\n</tr></tbody></table>\n<h2>Development</h2>\n<pre><code>./setup.py develop\npip install -r requirements_dev.txt\n</code></pre>\n<p>You can easily extend the behaviors through:</p>\n<ul>\n<li><code>draftjs_sanitizer.encoder.DraftJSSafeEncoder</code></li>\n<li><code>draftjs_sanitizer.sanitizer.DraftJSSanitizer</code></li>\n</ul>\n<h2>Dependencies</h2>\n<ul>\n<li><code>urllib3</code> for RFC 3986 parsing and validation of URLs.</li>\n</ul>\n\n          </div>"}, "last_serial": 5551216, "releases": {"0.0.0.dev2": [{"comment_text": "", "digests": {"md5": "670565a39b825f8d319fc1f2d55af72a", "sha256": "0a4ce50f855057a6e4d59f51de9389dd1926a9b27f54837582f294d0be616cf9"}, "downloads": -1, "filename": "draftjs-sanitizer-0.0.0.dev2.tar.gz", "has_sig": false, "md5_digest": "670565a39b825f8d319fc1f2d55af72a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6149, "upload_time": "2019-07-18T12:46:38", "upload_time_iso_8601": "2019-07-18T12:46:38.609242Z", "url": "https://files.pythonhosted.org/packages/bb/75/601c9d71f3fa92e5538501572f48daccd17a6924449bd3bd31b30b24ba3d/draftjs-sanitizer-0.0.0.dev2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e27053ef0d7645b07f175c22ce317a7b", "sha256": "4603a9296153cd06d5a1d76a45a1ff0295363516af983d8dde28cafc5cd67583"}, "downloads": -1, "filename": "draftjs-sanitizer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e27053ef0d7645b07f175c22ce317a7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6149, "upload_time": "2019-07-18T13:21:30", "upload_time_iso_8601": "2019-07-18T13:21:30.597215Z", "url": "https://files.pythonhosted.org/packages/58/6c/ba91295b18cf371cab6e7f93f2117eea802ab8e1e491f78ab1361575d07a/draftjs-sanitizer-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e27053ef0d7645b07f175c22ce317a7b", "sha256": "4603a9296153cd06d5a1d76a45a1ff0295363516af983d8dde28cafc5cd67583"}, "downloads": -1, "filename": "draftjs-sanitizer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e27053ef0d7645b07f175c22ce317a7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6149, "upload_time": "2019-07-18T13:21:30", "upload_time_iso_8601": "2019-07-18T13:21:30.597215Z", "url": "https://files.pythonhosted.org/packages/58/6c/ba91295b18cf371cab6e7f93f2117eea802ab8e1e491f78ab1361575d07a/draftjs-sanitizer-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:55 2020"}