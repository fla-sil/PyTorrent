{"info": {"author": "The dynod project", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# pytest-multilog\nA pytest plugin to persist logs from parallel test processes (and other helpers)\n\n## Usage\nTo use the multilog feature, a test class just needs to inherit from the **`TestHelper`** class:\n\n```python\nfrom pytest_multilog import TestHelper\n\nclass TestCustom(TestHelper):\n    def test_custom(self):\n        # Custom test implementation\n        ...\n```\n\nThe **`TestHelper`** class declares a **`logs`** fixture which will be automatically used by its children classes.\n\n## Behavior and attributes\n\n### Root folder\nThe **`TestHelper`** class provider a **`root_folder`** property, matching with the **pytest** root folder.\n\n### Output folder\nThe **`TestHelper`** class provider a **`output_folder`** property, where all files will be written. It's set to **`output_folder / \"out\" / \"tests\"`**\n\n### Test name\nEach test is associated to a name (provided in **`TestHelper.test_name`**), computed from the file name, the class name and the method name.\n\nE.g. for the snippet above, if stored in a **`test_custom.py`** file, the test name will be: **test_custom_TestCustom_test_custom**.\n\n### Current worker\nIn multi-process environment (**pytest** was invoked with **-n X** argument), the current worker name is provided in **`TestHelper.worker`** attribute.\nIt's set to **\"master\"** in single-process environment.\n\n### Test folder\nTest logs will be written in a **pytest.log** file, stored in each test folder (provided in **`TestHelper.test_folder`** attribute):\n* While the test is running, it's set to **`TestHelper.output_root / \"__running__\" / TestHelper.worker / TestHelper.test_name`**\n* Once the test is terminated, the folder is moved directly under the output root one.\n\nIt means that during the test execution, it's possible to check which test is running on which worker \n(easing troubleshooting situations where a given worker is blocked)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dynod/pytest-multilog", "keywords": "", "license": "Mozilla Public License Version 2.0", "maintainer": "The dynod project", "maintainer_email": "", "name": "pytest-multilog", "package_url": "https://pypi.org/project/pytest-multilog/", "platform": "", "project_url": "https://pypi.org/project/pytest-multilog/", "project_urls": {"Homepage": "https://github.com/dynod/pytest-multilog"}, "release_url": "https://pypi.org/project/pytest-multilog/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Multi-process logs handling and other helpers for pytest", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pytest-multilog</h1>\n<p>A pytest plugin to persist logs from parallel test processes (and other helpers)</p>\n<h2>Usage</h2>\n<p>To use the multilog feature, a test class just needs to inherit from the <strong><code>TestHelper</code></strong> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_multilog</span> <span class=\"kn\">import</span> <span class=\"n\">TestHelper</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TestCustom</span><span class=\"p\">(</span><span class=\"n\">TestHelper</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_custom</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Custom test implementation</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>The <strong><code>TestHelper</code></strong> class declares a <strong><code>logs</code></strong> fixture which will be automatically used by its children classes.</p>\n<h2>Behavior and attributes</h2>\n<h3>Root folder</h3>\n<p>The <strong><code>TestHelper</code></strong> class provider a <strong><code>root_folder</code></strong> property, matching with the <strong>pytest</strong> root folder.</p>\n<h3>Output folder</h3>\n<p>The <strong><code>TestHelper</code></strong> class provider a <strong><code>output_folder</code></strong> property, where all files will be written. It's set to <strong><code>output_folder / \"out\" / \"tests\"</code></strong></p>\n<h3>Test name</h3>\n<p>Each test is associated to a name (provided in <strong><code>TestHelper.test_name</code></strong>), computed from the file name, the class name and the method name.</p>\n<p>E.g. for the snippet above, if stored in a <strong><code>test_custom.py</code></strong> file, the test name will be: <strong>test_custom_TestCustom_test_custom</strong>.</p>\n<h3>Current worker</h3>\n<p>In multi-process environment (<strong>pytest</strong> was invoked with <strong>-n X</strong> argument), the current worker name is provided in <strong><code>TestHelper.worker</code></strong> attribute.\nIt's set to <strong>\"master\"</strong> in single-process environment.</p>\n<h3>Test folder</h3>\n<p>Test logs will be written in a <strong>pytest.log</strong> file, stored in each test folder (provided in <strong><code>TestHelper.test_folder</code></strong> attribute):</p>\n<ul>\n<li>While the test is running, it's set to <strong><code>TestHelper.output_root / \"__running__\" / TestHelper.worker / TestHelper.test_name</code></strong></li>\n<li>Once the test is terminated, the folder is moved directly under the output root one.</li>\n</ul>\n<p>It means that during the test execution, it's possible to check which test is running on which worker\n(easing troubleshooting situations where a given worker is blocked)</p>\n\n          </div>"}, "last_serial": 7155696, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "80011bca4e9eee7f55fc2e2690b0c281", "sha256": "cedd53afc9cdb5a3faaee64279f47eed9bf9b4efeeaf7c45f367815931853142"}, "downloads": -1, "filename": "pytest-multilog-1.0.tar.gz", "has_sig": false, "md5_digest": "80011bca4e9eee7f55fc2e2690b0c281", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3347, "upload_time": "2020-04-26T16:10:36", "upload_time_iso_8601": "2020-04-26T16:10:36.359698Z", "url": "https://files.pythonhosted.org/packages/90/f1/797c35aec08dc3a34e854c888d097e29dc7cc6a60d257c6aafdd2c9cee8f/pytest-multilog-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "31fe1fb15dc9f13d976d2a3fff12f96b", "sha256": "ab60628fc0d13289cc070fa7aa0a244931963866cf3d458d15602a439179d831"}, "downloads": -1, "filename": "pytest-multilog-1.0.1.tar.gz", "has_sig": false, "md5_digest": "31fe1fb15dc9f13d976d2a3fff12f96b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3343, "upload_time": "2020-05-03T09:23:38", "upload_time_iso_8601": "2020-05-03T09:23:38.725272Z", "url": "https://files.pythonhosted.org/packages/03/b1/0fdc234ceff75669154bf0dc635d000053364e5fb7d62c771baa5b345214/pytest-multilog-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "31fe1fb15dc9f13d976d2a3fff12f96b", "sha256": "ab60628fc0d13289cc070fa7aa0a244931963866cf3d458d15602a439179d831"}, "downloads": -1, "filename": "pytest-multilog-1.0.1.tar.gz", "has_sig": false, "md5_digest": "31fe1fb15dc9f13d976d2a3fff12f96b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3343, "upload_time": "2020-05-03T09:23:38", "upload_time_iso_8601": "2020-05-03T09:23:38.725272Z", "url": "https://files.pythonhosted.org/packages/03/b1/0fdc234ceff75669154bf0dc635d000053364e5fb7d62c771baa5b345214/pytest-multilog-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:57 2020"}