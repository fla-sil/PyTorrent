{"info": {"author": "Jadenpaul M. Albay", "author_email": "Janderion369@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Complex Number Encryptor\n\nThis package is capable of encoding messages into lists of numbers using algebra and complex numbers\n\n## Complex_Number_Encryptor.ComplexNumber\nAn example of how to use this is as follows:\n```python\nfrom Complex_Number_Encryptor.ComplexNumber import Encoder\nmsg = \"Hello World\"\nEncryption_factors = [(1+1j), (2+2j), (3+3j)]\nEncoded_Message = Encoder(msg, Encryption_factors, d=1).enc()\nprint(Encoded_Message)\n```\nThe Encoder object requires two things, the first being the string of the message, and the second being the tuple of\nthree numbers which are the encryption factors.\nThere is a third factor 'd', which is also an encryption factor, but is at default 1. A list of complex numbers would be\nprinted and could be reversed in the Decoder object with the same encryption factors.\n\n```python\nfrom Complex_Number_Encryptor.ComplexNumber import Decoder\nInput_list = [the, list, recieved, from, the, encoder]\nEncryption_factors = [(1+1j), (2+2j), (3+3j)]\nDecoded_Message = Decoder(Input_list, Encryption_factors, d=1).dec()\nprint(Decoded_Message)\n```\nThis would print out the original message.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Janderion47/Complex-Number-Encryptor", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Complex-Number-Encryptor-Janderion", "package_url": "https://pypi.org/project/Complex-Number-Encryptor-Janderion/", "platform": "", "project_url": "https://pypi.org/project/Complex-Number-Encryptor-Janderion/", "project_urls": {"Homepage": "https://github.com/Janderion47/Complex-Number-Encryptor"}, "release_url": "https://pypi.org/project/Complex-Number-Encryptor-Janderion/1.0.0/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Package that can encrypt messages using various math equations", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Complex Number Encryptor</h1>\n<p>This package is capable of encoding messages into lists of numbers using algebra and complex numbers</p>\n<h2>Complex_Number_Encryptor.ComplexNumber</h2>\n<p>An example of how to use this is as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">Complex_Number_Encryptor.ComplexNumber</span> <span class=\"kn\">import</span> <span class=\"n\">Encoder</span>\n<span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello World\"</span>\n<span class=\"n\">Encryption_factors</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"n\">j</span><span class=\"p\">)]</span>\n<span class=\"n\">Encoded_Message</span> <span class=\"o\">=</span> <span class=\"n\">Encoder</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">Encryption_factors</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">enc</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Encoded_Message</span><span class=\"p\">)</span>\n</pre>\n<p>The Encoder object requires two things, the first being the string of the message, and the second being the tuple of\nthree numbers which are the encryption factors.\nThere is a third factor 'd', which is also an encryption factor, but is at default 1. A list of complex numbers would be\nprinted and could be reversed in the Decoder object with the same encryption factors.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">Complex_Number_Encryptor.ComplexNumber</span> <span class=\"kn\">import</span> <span class=\"n\">Decoder</span>\n<span class=\"n\">Input_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">the</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">recieved</span><span class=\"p\">,</span> <span class=\"n\">from</span><span class=\"p\">,</span> <span class=\"n\">the</span><span class=\"p\">,</span> <span class=\"n\">encoder</span><span class=\"p\">]</span>\n<span class=\"n\">Encryption_factors</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"n\">j</span><span class=\"p\">)]</span>\n<span class=\"n\">Decoded_Message</span> <span class=\"o\">=</span> <span class=\"n\">Decoder</span><span class=\"p\">(</span><span class=\"n\">Input_list</span><span class=\"p\">,</span> <span class=\"n\">Encryption_factors</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dec</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Decoded_Message</span><span class=\"p\">)</span>\n</pre>\n<p>This would print out the original message.</p>\n\n          </div>"}, "last_serial": 6884110, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "af085df899d3ae95b24ce333f59d1728", "sha256": "4cbcb1dd4a63453e7c55b84aab8aa77bfa450f54a1cf4e7b6006782a2a6c193f"}, "downloads": -1, "filename": "Complex_Number_Encryptor_Janderion-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "af085df899d3ae95b24ce333f59d1728", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 15160, "upload_time": "2020-03-25T19:36:59", "upload_time_iso_8601": "2020-03-25T19:36:59.785840Z", "url": "https://files.pythonhosted.org/packages/81/4a/4b9fee0eda38bf04cde72937057510dc63e64695ef10f840455c56fe00eb/Complex_Number_Encryptor_Janderion-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a8e790449470a203616f05043d0ff0f", "sha256": "419d7d15ea35af94e1d3ce7b2c02cc3b200e58b1927a2566813dbb7b110b2e51"}, "downloads": -1, "filename": "Complex-Number_Encryptor-Janderion-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2a8e790449470a203616f05043d0ff0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2414, "upload_time": "2020-03-25T19:37:02", "upload_time_iso_8601": "2020-03-25T19:37:02.316480Z", "url": "https://files.pythonhosted.org/packages/8c/d2/d2a192c370225a1a9b7c2e1923930c64ba167ec905f460865386d184539d/Complex-Number_Encryptor-Janderion-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "af085df899d3ae95b24ce333f59d1728", "sha256": "4cbcb1dd4a63453e7c55b84aab8aa77bfa450f54a1cf4e7b6006782a2a6c193f"}, "downloads": -1, "filename": "Complex_Number_Encryptor_Janderion-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "af085df899d3ae95b24ce333f59d1728", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 15160, "upload_time": "2020-03-25T19:36:59", "upload_time_iso_8601": "2020-03-25T19:36:59.785840Z", "url": "https://files.pythonhosted.org/packages/81/4a/4b9fee0eda38bf04cde72937057510dc63e64695ef10f840455c56fe00eb/Complex_Number_Encryptor_Janderion-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a8e790449470a203616f05043d0ff0f", "sha256": "419d7d15ea35af94e1d3ce7b2c02cc3b200e58b1927a2566813dbb7b110b2e51"}, "downloads": -1, "filename": "Complex-Number_Encryptor-Janderion-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2a8e790449470a203616f05043d0ff0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2414, "upload_time": "2020-03-25T19:37:02", "upload_time_iso_8601": "2020-03-25T19:37:02.316480Z", "url": "https://files.pythonhosted.org/packages/8c/d2/d2a192c370225a1a9b7c2e1923930c64ba167ec905f460865386d184539d/Complex-Number_Encryptor-Janderion-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:13 2020"}