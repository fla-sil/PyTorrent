{"info": {"author": "D. Ryan Hild", "author_email": "d.ryan.hild@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development"], "description": "empirical README\n==================\n\nGetting Started\n---------------\n\nCheck out the examples directory; initial development will focus on getting\nthese working first.\n\n\nGetting the latest version\n--------------------------\n\nIf the pypi releases are not up-to-date enough for your tastes, or if you'd\nlike to see how the development is moving along, visit\nhttps://bitbucket.org/dhild/empirical\n\n\nEmpirical Interpolation\n-----------------------\n\nThe empirical interpolation module included has the capability to handle\nmultiple dimensions in both variables and parameters.\n\n\nWhy does this project exist?\n----------------------------\n\nThe focus of this project is to create a reduced basis solver for collocation\nproblems. Initially, the collocation problems will be formulated using the\nmethod of fundamental solutions, but ideally the framework will allow for easy\nextension to other collocation formulations as well.\n\nThere is an existing solver for a variety of methods using MATLAB codes, called\nmpspack. (See the 'Thanks' section for details). The mfs code base is basically\na port of this code to Python.\n\nSince mpspack is available under the GPLv3, there should be no legal issues\nwith creating a Python version. It should be a benefit to the mathematical\nworld to make code like this more widely available. Unfortunately, since\nthis project has no official affiliation with mpspack, or its creators Alex\nBarnett and Timo Betcke, it will make it harder to keep up with any updates\nor additions to their library. At the time of inception for this library, I\nused the 1.31 version of mpspack.\n\nThe biggest reason to port mpspack to Python is the fact that Python is\nfree, and MATLAB is expensive. For my Master's thesis, I need to use their\ncode, but I also need to run it a huge number of times. While my school does\nhave MATLAB, I did not find it simple to get MATLAB to run in parallel. This\nproblem seems to stem from the fact that each running process must have it's\nown license; my school does not have an unlimited number of such licenses,\nand even if they did, I have had lots of trouble getting it to work.\n\nThe speed impacts are not anticipated to be significant; numpy benchmarks do\nnot typically have much difference from similar MATLAB code.\n\n\nThanks\n======\n\nmpspack\n-------\nSpecial thanks to Alex Barnett and Timo Betcke, for their MPSPACK software.\n\nOriginally, much of the code base is based upon their project, which they have\ndistributed MATLAB codes for under the GPLv3. They have a fantastic design and\na well documented, maintained, and complete package, at\nhttps://code.google.com/p/mpspack/\n\n\nlegendre-gauss-lobatto algorithm\n--------------------------------\nCredit for the LGL algorithm goes to Greg von Winckel. Originally implemented in\nMATLAB, I found the algorithm at\nhttp://www.mathworks.com/matlabcentral/fileexchange/4775-legende-gauss-lobatto-nodes-and-weights\n\n\nChangelog\n=========\n\n0.2\n---------\n\n* Improved the empirical interpolation interface.\n  - It no longer tries to perform interpolations, but leaves that to the\n    calling function.\n  - More and improved examples are added, copying a reference text, see\n    Aanonsen, \"Empirical Interpolation with Application to Reduced Basis\n    Approximations\", Chapter 3. 2009, Norwegian University of Science and\n    Technology.\n\n* Quadrature points:\n  - Added a linear quadrature function.\n  - Added a function for genericly transforming quadrature from [-1, 1] to some\n    other range [a, b].\n  - Added a common selection method for quadratures.\n\n* Added a couple of mesh classes for convenience. Currently only 1- and 2-\n  dimensional classes are implemented, but if they prove useful then a generic\n  version may be called for.\n\n* Removed some of the interpolation code. It has been deemed relatively\n  unnecessary.\n\n* Various asthetics:\n  - Added pylint configuration file, and improved from some of the suggestions.\n  - Made various improvements to the testing functions.\n\n0.1\n--------\n\nWhat works:\n\n* Basic support for empirical interpolation method is implemented. The API may\n  change significantly in future releases.\n\n* Method of fundamental solutions, along with basic domain/segment codes.\n\n* Quadrature generators all pass some basic tests (code is thanks to mpspack\n  and lglnodes.m):\n  - Periodic trapezoid\n  - Trapezoid\n  - Gaussian\n  - Clenshaw-Curtis\n  - Legendre-Gauss-Lobatto\n\n* Interpolation codes have been written, using the following algorithms:\n  - Newton interpolating polynomial (nested form)\n  - Lagrange interpolating polynomial (uses slow method for cardinal\n    polynomials, probably numerically unstable for large number of nodes)\n  - Lagrange bivariate (also uses a slow method for cardinal polynomials, does\n    not yet interface well with the EI class)\n\n* Example scripts for empirical interpolation and, method of fundamental\n  solutions.\n\n* A variety of unit tests have been implemented.\n\n* A few of the different classes (Domain, Segment, Scattering) can plot some of\n  their features using matplotlib.\n\n* Restructured package layout (and changed name from emfs to empirical).\n\n\n0.0\n--------\n\n*  Initial version\n\nWhat works:\n\n* The examples/tut_scatt.py script is a port of the mpspack script of the same\n  name. While it is slightly different in some ways, it does successfully\n  calculate a plane wave scattering problem, and display the resultant fields.\n\n* All of the unit tests written so far run successfully. However, there is only\n  60% coverage with these, and even that is not a thorough coverage of all the\n  methods called.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/empirical/", "keywords": null, "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "empirical", "package_url": "https://pypi.org/project/empirical/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/empirical/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/empirical/"}, "release_url": "https://pypi.org/project/empirical/0.2/", "requires_dist": null, "requires_python": null, "summary": "Emperical Method of Fundamental Solutions solver for Python.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            empirical README<br>==================<br><br>Getting Started<br>---------------<br><br>Check out the examples directory; initial development will focus on getting<br>these working first.<br><br><br>Getting the latest version<br>--------------------------<br><br>If the pypi releases are not up-to-date enough for your tastes, or if you'd<br>like to see how the development is moving along, visit<br>https://bitbucket.org/dhild/empirical<br><br><br>Empirical Interpolation<br>-----------------------<br><br>The empirical interpolation module included has the capability to handle<br>multiple dimensions in both variables and parameters.<br><br><br>Why does this project exist?<br>----------------------------<br><br>The focus of this project is to create a reduced basis solver for collocation<br>problems. Initially, the collocation problems will be formulated using the<br>method of fundamental solutions, but ideally the framework will allow for easy<br>extension to other collocation formulations as well.<br><br>There is an existing solver for a variety of methods using MATLAB codes, called<br>mpspack. (See the 'Thanks' section for details). The mfs code base is basically<br>a port of this code to Python.<br><br>Since mpspack is available under the GPLv3, there should be no legal issues<br>with creating a Python version. It should be a benefit to the mathematical<br>world to make code like this more widely available. Unfortunately, since<br>this project has no official affiliation with mpspack, or its creators Alex<br>Barnett and Timo Betcke, it will make it harder to keep up with any updates<br>or additions to their library. At the time of inception for this library, I<br>used the 1.31 version of mpspack.<br><br>The biggest reason to port mpspack to Python is the fact that Python is<br>free, and MATLAB is expensive. For my Master's thesis, I need to use their<br>code, but I also need to run it a huge number of times. While my school does<br>have MATLAB, I did not find it simple to get MATLAB to run in parallel. This<br>problem seems to stem from the fact that each running process must have it's<br>own license; my school does not have an unlimited number of such licenses,<br>and even if they did, I have had lots of trouble getting it to work.<br><br>The speed impacts are not anticipated to be significant; numpy benchmarks do<br>not typically have much difference from similar MATLAB code.<br><br><br>Thanks<br>======<br><br>mpspack<br>-------<br>Special thanks to Alex Barnett and Timo Betcke, for their MPSPACK software.<br><br>Originally, much of the code base is based upon their project, which they have<br>distributed MATLAB codes for under the GPLv3. They have a fantastic design and<br>a well documented, maintained, and complete package, at<br>https://code.google.com/p/mpspack/<br><br><br>legendre-gauss-lobatto algorithm<br>--------------------------------<br>Credit for the LGL algorithm goes to Greg von Winckel. Originally implemented in<br>MATLAB, I found the algorithm at<br>http://www.mathworks.com/matlabcentral/fileexchange/4775-legende-gauss-lobatto-nodes-and-weights<br><br><br>Changelog<br>=========<br><br>0.2<br>---------<br><br>* Improved the empirical interpolation interface.<br>  - It no longer tries to perform interpolations, but leaves that to the<br>    calling function.<br>  - More and improved examples are added, copying a reference text, see<br>    Aanonsen, \"Empirical Interpolation with Application to Reduced Basis<br>    Approximations\", Chapter 3. 2009, Norwegian University of Science and<br>    Technology.<br><br>* Quadrature points:<br>  - Added a linear quadrature function.<br>  - Added a function for genericly transforming quadrature from [-1, 1] to some<br>    other range [a, b].<br>  - Added a common selection method for quadratures.<br><br>* Added a couple of mesh classes for convenience. Currently only 1- and 2-<br>  dimensional classes are implemented, but if they prove useful then a generic<br>  version may be called for.<br><br>* Removed some of the interpolation code. It has been deemed relatively<br>  unnecessary.<br><br>* Various asthetics:<br>  - Added pylint configuration file, and improved from some of the suggestions.<br>  - Made various improvements to the testing functions.<br><br>0.1<br>--------<br><br>What works:<br><br>* Basic support for empirical interpolation method is implemented. The API may<br>  change significantly in future releases.<br><br>* Method of fundamental solutions, along with basic domain/segment codes.<br><br>* Quadrature generators all pass some basic tests (code is thanks to mpspack<br>  and lglnodes.m):<br>  - Periodic trapezoid<br>  - Trapezoid<br>  - Gaussian<br>  - Clenshaw-Curtis<br>  - Legendre-Gauss-Lobatto<br><br>* Interpolation codes have been written, using the following algorithms:<br>  - Newton interpolating polynomial (nested form)<br>  - Lagrange interpolating polynomial (uses slow method for cardinal<br>    polynomials, probably numerically unstable for large number of nodes)<br>  - Lagrange bivariate (also uses a slow method for cardinal polynomials, does<br>    not yet interface well with the EI class)<br><br>* Example scripts for empirical interpolation and, method of fundamental<br>  solutions.<br><br>* A variety of unit tests have been implemented.<br><br>* A few of the different classes (Domain, Segment, Scattering) can plot some of<br>  their features using matplotlib.<br><br>* Restructured package layout (and changed name from emfs to empirical).<br><br><br>0.0<br>--------<br><br>*  Initial version<br><br>What works:<br><br>* The examples/tut_scatt.py script is a port of the mpspack script of the same<br>  name. While it is slightly different in some ways, it does successfully<br>  calculate a plane wave scattering problem, and display the resultant fields.<br><br>* All of the unit tests written so far run successfully. However, there is only<br>  60% coverage with these, and even that is not a thorough coverage of all the<br>  methods called.\n          </div>"}, "last_serial": 791637, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "85b2e4744066be934deb88e8a981e4b9", "sha256": "a386f6dbe3d8e70d96dc79463a95b5745ac44704404be086211827ce09821f67"}, "downloads": -1, "filename": "empirical-0.1.tar.gz", "has_sig": false, "md5_digest": "85b2e4744066be934deb88e8a981e4b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54928, "upload_time": "2013-04-28T01:30:12", "upload_time_iso_8601": "2013-04-28T01:30:12.762525Z", "url": "https://files.pythonhosted.org/packages/40/07/5cdd8507e0ecb79818cc6414ee708053e6dc115fc5a073f2f4f5ad31fe93/empirical-0.1.tar.gz", "yanked": false}], "0.1dev": [], "0.2": [{"comment_text": "", "digests": {"md5": "0209d6c6031060ec00b359ff0e4a80b8", "sha256": "817a59cb2a792a721be29c338652683672425f96daaf1cf340e19bc0400d2447"}, "downloads": -1, "filename": "empirical-0.2.tar.gz", "has_sig": false, "md5_digest": "0209d6c6031060ec00b359ff0e4a80b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59247, "upload_time": "2013-05-31T11:33:22", "upload_time_iso_8601": "2013-05-31T11:33:22.126796Z", "url": "https://files.pythonhosted.org/packages/46/de/064452f299aebcfb1df9703635faa034e022418c6c758c42830a5a305dcc/empirical-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0209d6c6031060ec00b359ff0e4a80b8", "sha256": "817a59cb2a792a721be29c338652683672425f96daaf1cf340e19bc0400d2447"}, "downloads": -1, "filename": "empirical-0.2.tar.gz", "has_sig": false, "md5_digest": "0209d6c6031060ec00b359ff0e4a80b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59247, "upload_time": "2013-05-31T11:33:22", "upload_time_iso_8601": "2013-05-31T11:33:22.126796Z", "url": "https://files.pythonhosted.org/packages/46/de/064452f299aebcfb1df9703635faa034e022418c6c758c42830a5a305dcc/empirical-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:32 2020"}