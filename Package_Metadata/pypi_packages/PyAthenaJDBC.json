{"info": {"author": "laughingman7743", "author_email": "laughingman7743@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Java", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Database :: Front-Ends"], "description": ".. image:: https://img.shields.io/pypi/pyversions/PyAthenaJDBC.svg\n    :target: https://pypi.org/project/PyAthenaJDBC/\n\n.. image:: https://travis-ci.com/laughingman7743/PyAthenaJDBC.svg?branch=master\n    :target: https://travis-ci.com/laughingman7743/PyAthenaJDBC\n\n.. image:: https://codecov.io/gh/laughingman7743/PyAthenaJDBC/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/laughingman7743/PyAthenaJDBC\n\n.. image:: https://img.shields.io/pypi/l/PyAthenaJDBC.svg\n    :target: https://github.com/laughingman7743/PyAthenaJDBC/blob/master/LICENSE\n\n.. image:: https://pepy.tech/badge/pyathenajdbc/month\n    :target: https://pepy.tech/project/pyathenajdbc/month\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\nPyAthenaJDBC\n============\n\nPyAthenaJDBC is a Python `DB API 2.0 (PEP 249)`_ compliant wrapper for `Amazon Athena JDBC driver`_.\n\n.. _`DB API 2.0 (PEP 249)`: https://www.python.org/dev/peps/pep-0249/\n.. _`Amazon Athena JDBC driver`: https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html\n\nRequirements\n------------\n\n* Python\n\n  - CPython 2,7, 3,4, 3.5, 3.6, 3.7\n\n* Java\n\n  - Java >= 8 (JDBC 4.2)\n\nJDBC driver compatibility\n-------------------------\n\n+---------------+---------------------+-------------------------------------------------------------------------------+\n| Version       | JDBC driver version | Vendor                                                                        |\n+===============+=====================+===============================================================================+\n| < 2.0.0       | == 1.1.0            | AWS (Early released JDBC driver. It is incompatible with Simba's JDBC driver) |\n+---------------+---------------------+-------------------------------------------------------------------------------+\n| >= 2.0.0      | >= 2.0.5            | Simba                                                                         |\n+---------------+---------------------+-------------------------------------------------------------------------------+\n\nInstallation\n------------\n\n.. code:: bash\n\n    $ pip install PyAthenaJDBC\n\nExtra packages:\n\n+---------------+------------------------------------------+-----------------+\n| Package       | Install command                          | Version         |\n+===============+==========================================+=================+\n| Pandas        | ``pip install PyAthenaJDBC[Pandas]``     | >=0.19.0        |\n+---------------+------------------------------------------+-----------------+\n| SQLAlchemy    | ``pip install PyAthenaJDBC[SQLAlchemy]`` | >=1.0.0, <2.0.0 |\n+---------------+------------------------------------------+-----------------+\n\nUsage\n-----\n\nBasic usage\n~~~~~~~~~~~\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n    try:\n        with conn.cursor() as cursor:\n            cursor.execute(\"\"\"\n            SELECT * FROM one_row\n            \"\"\")\n            print(cursor.description)\n            print(cursor.fetchall())\n    finally:\n        conn.close()\n\nCursor iteration\n~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n    try:\n        with conn.cursor() as cursor:\n            cursor.execute(\"\"\"\n            SELECT * FROM many_rows LIMIT 10\n            \"\"\")\n            for row in cursor:\n                print(row)\n    finally:\n        conn.close()\n\nQuery with parameter\n~~~~~~~~~~~~~~~~~~~~\n\nSupported `DB API paramstyle`_ is only ``PyFormat``.\n``PyFormat`` only supports `named placeholders`_ with old ``%`` operator style and parameters specify dictionary format.\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n    try:\n        with conn.cursor() as cursor:\n            cursor.execute(\"\"\"\n            SELECT col_string FROM one_row_complex\n            WHERE col_string = %(param)s\n            \"\"\", {'param': 'a string'})\n            print(cursor.fetchall())\n    finally:\n        conn.close()\n\nif ``%`` character is contained in your query, it must be escaped with ``%%`` like the following:\n\n.. code:: sql\n\n    SELECT col_string FROM one_row_complex\n    WHERE col_string = %(param)s OR col_string LIKE 'a%%'\n\n.. _`DB API paramstyle`: https://www.python.org/dev/peps/pep-0249/#paramstyle\n.. _`named placeholders`: https://pyformat.info/#named_placeholders\n\nJVM options\n~~~~~~~~~~~\n\nIn the connect method or connection object, you can specify JVM options with a string array.\n\nYou can increase the JVM heap size like the following:\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2',\n                   jvm_options=['-Xms1024m', '-Xmx4096m'])\n    try:\n        with conn.cursor() as cursor:\n            cursor.execute(\"\"\"\n            SELECT * FROM many_rows\n            \"\"\")\n            print(cursor.fetchall())\n    finally:\n        conn.close()\n\nJDBC 4.1\n~~~~~~~~\n\nIf you want to use JDBC 4.1, download the corresponding JDBC driver\nand specify the path of the downloaded JDBC driver as the argument ``driver_path`` of the connect method or connection object.\n\n* The `AthenaJDBC41-2.0.7.jar`_ is compatible with JDBC 4.1 and requires JDK 7.0 or later.\n\n.. _`AthenaJDBC41-2.0.7.jar`: https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/AthenaJDBC41_2.0.7.jar\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2',\n                   driver_path='/path/to/AthenaJDBC41_2.0.7.jar')\n\nJDBC driver configuration options\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe connect method or connection object pass keyword arguments as options to the JDBC driver.\nIf you want to change the behavior of the JDBC driver,\nspecify the option as a keyword argument in the connect method or connection object.\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2',\n                   LogPath='/path/to/pyathenajdbc/log/',\n                   LogLevel='6')\n\nFor details of the JDBC driver options refer to the official documentation.\n\n* `JDBC Driver Installation and Configuration Guide`_.\n\n.. _`JDBC Driver Installation and Configuration Guide`: https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/docs/Simba+Athena+JDBC+Driver+Install+and+Configuration+Guide.pdf\n\nNOTE: Option names and values are case-sensitive. The option value is specified as a character string.\n\nSpecify the Query Results\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to specify where athena stores the ``txt``/``cxv`` and ``txt.metadata``/``csv.metadata`` files containing the result of each query, you can specify it as follows:\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2',\n                   LogPath='/path/to/pyathenajdbc/log/',\n                   LogLevel='6',\n                   S3OutputLocation='s3://YOUR_S3_BUCKET/path/to/query_results/')\n\nFor details see the Athena Documentation:\n\n* `Athena Documentation on Query Results`_.\n\n.. _`Athena Documentation on Query Results`: https://docs.aws.amazon.com/athena/latest/ug/querying.html#default-location-query-results\n\n\nSQLAlchemy\n~~~~~~~~~~\n\nInstall SQLAlchemy with ``pip install SQLAlchemy>=1.0.0`` or ``pip install PyAthenaJDBC[SQLAlchemy]``.\nSupported SQLAlchemy is 1.0.0 or higher and less than 2.0.0.\n\n.. code:: python\n\n    import contextlib\n    from urllib.parse import quote_plus  # PY2: from urllib import quote_plus\n    from sqlalchemy.engine import create_engine\n    from sqlalchemy.sql.expression import select\n    from sqlalchemy.sql.functions import func\n    from sqlalchemy.sql.schema import Table, MetaData\n\n    conn_str = 'awsathena+jdbc://{access_key}:{secret_key}@athena.{region_name}.amazonaws.com:443/'\\\n               '{schema_name}?s3_staging_dir={s3_staging_dir}'\n    engine = create_engine(conn_str.format(\n        access_key=quote_plus('YOUR_ACCESS_KEY'),\n        secret_key=quote_plus('YOUR_SECRET_ACCESS_KEY'),\n        region_name='us-west-2',\n        schema_name='default',\n        s3_staging_dir=quote_plus('s3://YOUR_S3_BUCKET/path/to/')))\n    try:\n        with contextlib.closing(engine.connect()) as conn:\n            many_rows = Table('many_rows', MetaData(bind=engine), autoload=True)\n            print(select([func.count('*')], from_obj=many_rows).scalar())\n    finally:\n        engine.dispose()\n\nThe connection string has the following format:\n\n.. code:: text\n\n    awsathena+jdbc://{access_key}:{secret_key}@athena.{region_name}.amazonaws.com:443/{schema_name}?s3_staging_dir={s3_staging_dir}&driver_path={driver_path}&...\n\nIf you do not specify ``access_key`` and ``secret_key`` using instance profile or boto3 configuration file:\n\n.. code:: text\n\n    awsathena+jdbc://:@athena.{region_name}.amazonaws.com:443/{schema_name}?s3_staging_dir={s3_staging_dir}&driver_path={driver_path}&...\n\nNOTE: ``s3_staging_dir`` requires quote. If ``access_key``, ``secret_key`` and other parameter contain special characters, quote is also required.\n\nPandas\n~~~~~~\n\nAs DataFrame\n^^^^^^^^^^^^\n\nYou can use the `pandas.read_sql`_ to handle the query results as a `DataFrame object`_.\n\n.. code:: python\n\n    from pyathenajdbc import connect\n    import pandas as pd\n\n    conn = connect(access_key='YOUR_ACCESS_KEY_ID',\n                   secret_key='YOUR_SECRET_ACCESS_KEY',\n                   s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2',\n                   jvm_path='/path/to/jvm')  # optional, as used by JPype\n    df = pd.read_sql(\"SELECT * FROM many_rows LIMIT 10\", conn)\n\nThe ``pyathena.util`` package also has helper methods.\n\n.. code:: python\n\n    import contextlib\n    from pyathenajdbc import connect\n    from pyathenajdbc.util import as_pandas\n\n    with contextlib.closing(\n            connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/'\n                    region_name='us-west-2'))) as conn:\n        with conn.cursor() as cursor:\n            cursor.execute(\"\"\"\n            SELECT * FROM many_rows\n            \"\"\")\n            df = as_pandas(cursor)\n    print(df.describe())\n\n.. _`pandas.read_sql`: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html\n.. _`DataFrame object`: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html\n\nTo SQL\n^^^^^^\n\nYou can use `pandas.DataFrame.to_sql`_ to write records stored in DataFrame to Amazon Athena.\n`pandas.DataFrame.to_sql`_ uses `SQLAlchemy`_, so you need to install it.\n\n.. code:: python\n\n    import pandas as pd\n    from urllib.parse import quote_plus\n    from sqlalchemy import create_engine\n    conn_str = 'awsathena+jdbc://:@athena.{region_name}.amazonaws.com:443/'\\\n               '{schema_name}?s3_staging_dir={s3_staging_dir}&s3_dir={s3_dir}&compression=snappy'\n    engine = create_engine(conn_str.format(\n        region_name='us-west-2',\n        schema_name='YOUR_SCHEMA',\n        s3_staging_dir=quote_plus('s3://YOUR_S3_BUCKET/path/to/'),\n        s3_dir=quote_plus('s3://YOUR_S3_BUCKET/path/to/')))\n    df = pd.DataFrame({'a': [1, 2, 3, 4, 5]})\n    df.to_sql('YOUR_TABLE', engine, schema=\"YOUR_SCHEMA\", index=False, if_exists='replace', method='multi')\n\nThe location of the Amazon S3 table is specified by the ``s3_dir`` parameter in the connection string.\nIf ``s3_dir`` is not specified, ``s3_staging_dir`` parameter will be used. The following rules apply.\n\n.. code:: text\n\n    s3://{s3_dir or s3_staging_dir}/{schema}/{table}/\n\nThe data format only supports Parquet. The compression format is specified by the ``compression`` parameter in the connection string.\n\n.. _`pandas.DataFrame.to_sql`: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html\n\nCredential\n----------\n\nSupport `AWS CLI credentials`_, `Properties file credentials`_ and `AWS credentials provider chain`_.\n\n.. _`AWS CLI credentials`: http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html\n.. _`Properties file credentials`: http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/PropertiesFileCredentialsProvider.html\n.. _`AWS credentials provider chain`: http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\n\nCredential files\n~~~~~~~~~~~~~~~~\n\n~/.aws/credentials\n\n.. code:: cfg\n\n    [default]\n    aws_access_key_id=YOUR_ACCESS_KEY_ID\n    aws_secret_access_key=YOUR_SECRET_ACCESS_KEY\n\n~/.aws/config\n\n.. code:: cfg\n\n    [default]\n    region=us-west-2\n    output=json\n\nEnvironment variables\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    $ export AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID\n    $ export AWS_SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY\n    $ export AWS_DEFAULT_REGION=us-west-2\n\nAdditional environment variable:\n\n.. code:: bash\n\n    $ export AWS_ATHENA_S3_STAGING_DIR=s3://YOUR_S3_BUCKET/path/to/\n    $ export AWS_ATHENA_WORK_GROUP=YOUR_WORK_GROUP\n\nProperties file credentials\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a property file of the following format.\n\n/path/to/AWSCredentials.properties\n\n.. code:: properties\n\n    accessKeyId:YOUR_ACCESS_KEY_ID\n    secretKey:YOUR_SECRET_ACCESS_KEY\n\nSpecify the property file path with ``credential_file`` of the connect method or connection object.\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(credential_file='/path/to/AWSCredentials.properties',\n                   s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n\nPyAthenaJDBC uses the property file to authenticate Amazon Athena.\n\nAWS credentials provider chain\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSee `AWS credentials provider chain`_\n\n    AWS credentials provider chain that looks for credentials in this order:\n\n        * Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY (RECOMMENDED since they are recognized by all the AWS SDKs and CLI except for .NET), or AWS_ACCESS_KEY and AWS_SECRET_KEY (only recognized by Java SDK)\n        * Java System Properties - aws.accessKeyId and aws.secretKey\n        * Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI\n        * Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\" environment variable is set and security manager has permission to access the variable,\n        * Instance profile credentials delivered through the Amazon EC2 metadata service\n\nIn the connect method or connection object, you can connect by specifying at least ``s3_staging_dir`` and ``region_name``.\nIt is not necessary to specify ``access_key`` and ``secret_key``.\n\n.. code:: python\n\n    from pyathenajdbc import connect\n\n    conn = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n\n\nTesting\n-------\n\nDepends on the following environment variables:\n\n.. code:: bash\n\n    $ export AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID\n    $ export AWS_SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY\n    $ export AWS_DEFAULT_REGION=us-west-2\n    $ export AWS_ATHENA_S3_STAGING_DIR=s3://YOUR_S3_BUCKET/path/to/\n\nAnd you need to create a workgroup named ``test-pyathena-jdbc``.\n\nRun test\n~~~~~~~~\n\n.. code:: bash\n\n    $ pip install pipenv\n    $ pipenv install --dev\n    $ pipenv run scripts/test_data/upload_test_data.sh\n    $ pipenv run pytest\n    $ pipenv run scripts/test_data/delete_test_data.sh\n\nRun test multiple Python versions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    $ pip install pipenv\n    $ pipenv install --dev\n    $ pipenv run scripts/test_data/upload_test_data.sh\n    $ pyenv local 3.7.2 3.6.8 3.5.7 3.4.10 2.7.16\n    $ pipenv run tox\n    $ pipenv run scripts/test_data/delete_test_data.sh\n\nCode formatting\n---------------\n\nThe code formatting uses `black`_ and `isort`_.\n\nAppy format\n~~~~~~~~~~~\n\n.. code:: bash\n\n    $ make fmt\n\nCheck format\n~~~~~~~~~~~~\n\n.. code:: bash\n\n    $ make chk\n\n.. _`black`: https://github.com/psf/black\n.. _`isort`: https://github.com/timothycrosley/isort\n\nLicense\n-------\n\nThe license of all Python code except JDBC driver is `MIT license`_.\n\n.. _`MIT license`: LICENSE\n\nJDBC driver\n~~~~~~~~~~~\n\nFor the license of JDBC driver, please check the following link.\n\n* `JDBC driver release notes`_\n* `JDBC driver license`_\n* `JDBC driver notices`_\n* `JDBC driver third-party licenses`_\n\n.. _`JDBC driver release notes`: https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/docs/release-notes.txt\n.. _`JDBC driver License`: https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/docs/LICENSE.txt\n.. _`JDBC driver notices`: https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/docs/NOTICES.txt\n.. _`JDBC driver third-party licenses`: https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/docs/third-party-licenses.txt\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/laughingman7743/PyAthenaJDBC/", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "PyAthenaJDBC", "package_url": "https://pypi.org/project/PyAthenaJDBC/", "platform": "", "project_url": "https://pypi.org/project/PyAthenaJDBC/", "project_urls": {"Homepage": "https://github.com/laughingman7743/PyAthenaJDBC/"}, "release_url": "https://pypi.org/project/PyAthenaJDBC/2.0.8/", "requires_dist": ["future", "jpype1 (<=0.7.1,>=0.6.0)", "botocore (>=1.0.0)", "pandas (>=0.19.0) ; extra == 'pandas'", "SQLAlchemy (<2.0.0,>=1.0.0) ; extra == 'sqlalchemy'"], "requires_python": "", "summary": "Python DB API 2.0 (PEP 249) compliant wrapper for Amazon Athena JDBC driver", "version": "2.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/PyAthenaJDBC/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/PyAthenaJDBC.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0110f9263992bc80987ee8ab70eba6c49165071/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f5079417468656e614a4442432e737667\"></a>\n<a href=\"https://travis-ci.com/laughingman7743/PyAthenaJDBC\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/laughingman7743/PyAthenaJDBC.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8479401522f5a94b847334a9c6fc35afd6483a11/68747470733a2f2f7472617669732d63692e636f6d2f6c61756768696e676d616e373734332f5079417468656e614a4442432e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/laughingman7743/PyAthenaJDBC\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/laughingman7743/PyAthenaJDBC/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3378530c9aeb7f0de1490dde709780de78f32cb2/68747470733a2f2f636f6465636f762e696f2f67682f6c61756768696e676d616e373734332f5079417468656e614a4442432f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://github.com/laughingman7743/PyAthenaJDBC/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/PyAthenaJDBC.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40f53294abf77112fae946ed9a60c5c77b606bc6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f5079417468656e614a4442432e737667\"></a>\n<a href=\"https://pepy.tech/project/pyathenajdbc/month\" rel=\"nofollow\"><img alt=\"https://pepy.tech/badge/pyathenajdbc/month\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05236e576e03c250bfddc84a94a624d7b93b0ef1/68747470733a2f2f706570792e746563682f62616467652f7079617468656e616a6462632f6d6f6e7468\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<div id=\"pyathenajdbc\">\n<h2>PyAthenaJDBC</h2>\n<p>PyAthenaJDBC is a Python <a href=\"https://www.python.org/dev/peps/pep-0249/\" rel=\"nofollow\">DB API 2.0 (PEP 249)</a> compliant wrapper for <a href=\"https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html\" rel=\"nofollow\">Amazon Athena JDBC driver</a>.</p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>Python<ul>\n<li>CPython 2,7, 3,4, 3.5, 3.6, 3.7</li>\n</ul>\n</li>\n<li>Java<ul>\n<li>Java &gt;= 8 (JDBC 4.2)</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"jdbc-driver-compatibility\">\n<h3>JDBC driver compatibility</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Version</th>\n<th>JDBC driver version</th>\n<th>Vendor</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>&lt; 2.0.0</td>\n<td>== 1.1.0</td>\n<td>AWS (Early released JDBC driver. It is incompatible with Simba\u2019s JDBC driver)</td>\n</tr>\n<tr><td>&gt;= 2.0.0</td>\n<td>&gt;= 2.0.5</td>\n<td>Simba</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>$ pip install PyAthenaJDBC\n</pre>\n<p>Extra packages:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Package</th>\n<th>Install command</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Pandas</td>\n<td><tt>pip install PyAthenaJDBC[Pandas]</tt></td>\n<td>&gt;=0.19.0</td>\n</tr>\n<tr><td>SQLAlchemy</td>\n<td><tt>pip install PyAthenaJDBC[SQLAlchemy]</tt></td>\n<td>&gt;=1.0.0, &lt;2.0.0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"basic-usage\">\n<h4>Basic usage</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n        SELECT * FROM one_row\n        \"\"\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">())</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"cursor-iteration\">\n<h4>Cursor iteration</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n        SELECT * FROM many_rows LIMIT 10\n        \"\"\"</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"query-with-parameter\">\n<h4>Query with parameter</h4>\n<p>Supported <a href=\"https://www.python.org/dev/peps/pep-0249/#paramstyle\" rel=\"nofollow\">DB API paramstyle</a> is only <tt>PyFormat</tt>.\n<tt>PyFormat</tt> only supports <a href=\"https://pyformat.info/#named_placeholders\" rel=\"nofollow\">named placeholders</a> with old <tt>%</tt> operator style and parameters specify dictionary format.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n        SELECT col_string FROM one_row_complex\n        WHERE col_string = </span><span class=\"si\">%(param)s</span><span class=\"s2\">\n        \"\"\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'param'</span><span class=\"p\">:</span> <span class=\"s1\">'a string'</span><span class=\"p\">})</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">())</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>if <tt>%</tt> character is contained in your query, it must be escaped with <tt>%%</tt> like the following:</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">col_string</span> <span class=\"k\">FROM</span> <span class=\"n\">one_row_complex</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">col_string</span> <span class=\"o\">=</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">)</span><span class=\"n\">s</span> <span class=\"k\">OR</span> <span class=\"n\">col_string</span> <span class=\"k\">LIKE</span> <span class=\"s1\">'a%%'</span>\n</pre>\n</div>\n<div id=\"jvm-options\">\n<h4>JVM options</h4>\n<p>In the connect method or connection object, you can specify JVM options with a string array.</p>\n<p>You can increase the JVM heap size like the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n               <span class=\"n\">jvm_options</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'-Xms1024m'</span><span class=\"p\">,</span> <span class=\"s1\">'-Xmx4096m'</span><span class=\"p\">])</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n        SELECT * FROM many_rows\n        \"\"\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">())</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"jdbc-4-1\">\n<h4>JDBC 4.1</h4>\n<p>If you want to use JDBC 4.1, download the corresponding JDBC driver\nand specify the path of the downloaded JDBC driver as the argument <tt>driver_path</tt> of the connect method or connection object.</p>\n<ul>\n<li>The <a href=\"https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/AthenaJDBC41_2.0.7.jar\" rel=\"nofollow\">AthenaJDBC41-2.0.7.jar</a> is compatible with JDBC 4.1 and requires JDK 7.0 or later.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n               <span class=\"n\">driver_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/AthenaJDBC41_2.0.7.jar'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"jdbc-driver-configuration-options\">\n<h4>JDBC driver configuration options</h4>\n<p>The connect method or connection object pass keyword arguments as options to the JDBC driver.\nIf you want to change the behavior of the JDBC driver,\nspecify the option as a keyword argument in the connect method or connection object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n               <span class=\"n\">LogPath</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/pyathenajdbc/log/'</span><span class=\"p\">,</span>\n               <span class=\"n\">LogLevel</span><span class=\"o\">=</span><span class=\"s1\">'6'</span><span class=\"p\">)</span>\n</pre>\n<p>For details of the JDBC driver options refer to the official documentation.</p>\n<ul>\n<li><a href=\"https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/docs/Simba+Athena+JDBC+Driver+Install+and+Configuration+Guide.pdf\" rel=\"nofollow\">JDBC Driver Installation and Configuration Guide</a>.</li>\n</ul>\n<p>NOTE: Option names and values are case-sensitive. The option value is specified as a character string.</p>\n</div>\n<div id=\"specify-the-query-results\">\n<h4>Specify the Query Results</h4>\n<p>If you want to specify where athena stores the <tt>txt</tt>/<tt>cxv</tt> and <tt>txt.metadata</tt>/<tt>csv.metadata</tt> files containing the result of each query, you can specify it as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n               <span class=\"n\">LogPath</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/pyathenajdbc/log/'</span><span class=\"p\">,</span>\n               <span class=\"n\">LogLevel</span><span class=\"o\">=</span><span class=\"s1\">'6'</span><span class=\"p\">,</span>\n               <span class=\"n\">S3OutputLocation</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/query_results/'</span><span class=\"p\">)</span>\n</pre>\n<p>For details see the Athena Documentation:</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html#default-location-query-results\" rel=\"nofollow\">Athena Documentation on Query Results</a>.</li>\n</ul>\n</div>\n<div id=\"sqlalchemy\">\n<h4>SQLAlchemy</h4>\n<p>Install SQLAlchemy with <tt>pip install <span class=\"pre\">SQLAlchemy&gt;=1.0.0</span></tt> or <tt>pip install PyAthenaJDBC[SQLAlchemy]</tt>.\nSupported SQLAlchemy is 1.0.0 or higher and less than 2.0.0.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">contextlib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">quote_plus</span>  <span class=\"c1\"># PY2: from urllib import quote_plus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.engine</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.sql.expression</span> <span class=\"kn\">import</span> <span class=\"n\">select</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.sql.functions</span> <span class=\"kn\">import</span> <span class=\"n\">func</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.sql.schema</span> <span class=\"kn\">import</span> <span class=\"n\">Table</span><span class=\"p\">,</span> <span class=\"n\">MetaData</span>\n\n<span class=\"n\">conn_str</span> <span class=\"o\">=</span> <span class=\"s1\">'awsathena+jdbc://</span><span class=\"si\">{access_key}</span><span class=\"s1\">:</span><span class=\"si\">{secret_key}</span><span class=\"s1\">@athena.</span><span class=\"si\">{region_name}</span><span class=\"s1\">.amazonaws.com:443/'</span>\\\n           <span class=\"s1\">'</span><span class=\"si\">{schema_name}</span><span class=\"s1\">?s3_staging_dir=</span><span class=\"si\">{s3_staging_dir}</span><span class=\"s1\">'</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"n\">conn_str</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n    <span class=\"n\">access_key</span><span class=\"o\">=</span><span class=\"n\">quote_plus</span><span class=\"p\">(</span><span class=\"s1\">'YOUR_ACCESS_KEY'</span><span class=\"p\">),</span>\n    <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"n\">quote_plus</span><span class=\"p\">(</span><span class=\"s1\">'YOUR_SECRET_ACCESS_KEY'</span><span class=\"p\">),</span>\n    <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n    <span class=\"n\">schema_name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">,</span>\n    <span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"n\">quote_plus</span><span class=\"p\">(</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">)))</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">contextlib</span><span class=\"o\">.</span><span class=\"n\">closing</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">())</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"n\">many_rows</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'many_rows'</span><span class=\"p\">,</span> <span class=\"n\">MetaData</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"n\">engine</span><span class=\"p\">),</span> <span class=\"n\">autoload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)],</span> <span class=\"n\">from_obj</span><span class=\"o\">=</span><span class=\"n\">many_rows</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">())</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">dispose</span><span class=\"p\">()</span>\n</pre>\n<p>The connection string has the following format:</p>\n<pre>awsathena+jdbc://{access_key}:{secret_key}@athena.{region_name}.amazonaws.com:443/{schema_name}?s3_staging_dir={s3_staging_dir}&amp;driver_path={driver_path}&amp;...\n</pre>\n<p>If you do not specify <tt>access_key</tt> and <tt>secret_key</tt> using instance profile or boto3 configuration file:</p>\n<pre>awsathena+jdbc://:@athena.{region_name}.amazonaws.com:443/{schema_name}?s3_staging_dir={s3_staging_dir}&amp;driver_path={driver_path}&amp;...\n</pre>\n<p>NOTE: <tt>s3_staging_dir</tt> requires quote. If <tt>access_key</tt>, <tt>secret_key</tt> and other parameter contain special characters, quote is also required.</p>\n</div>\n<div id=\"pandas\">\n<h4>Pandas</h4>\n<div id=\"as-dataframe\">\n<h5>As DataFrame</h5>\n<p>You can use the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html\" rel=\"nofollow\">pandas.read_sql</a> to handle the query results as a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html\" rel=\"nofollow\">DataFrame object</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">access_key</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_ACCESS_KEY_ID'</span><span class=\"p\">,</span>\n               <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_SECRET_ACCESS_KEY'</span><span class=\"p\">,</span>\n               <span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n               <span class=\"n\">jvm_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/jvm'</span><span class=\"p\">)</span>  <span class=\"c1\"># optional, as used by JPype</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT * FROM many_rows LIMIT 10\"</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>pyathena.util</tt> package also has helper methods.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">contextlib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc.util</span> <span class=\"kn\">import</span> <span class=\"n\">as_pandas</span>\n\n<span class=\"k\">with</span> <span class=\"n\">contextlib</span><span class=\"o\">.</span><span class=\"n\">closing</span><span class=\"p\">(</span>\n        <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span>\n                <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)))</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n        SELECT * FROM many_rows\n        \"\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">as_pandas</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"to-sql\">\n<h5>To SQL</h5>\n<p>You can use <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html\" rel=\"nofollow\">pandas.DataFrame.to_sql</a> to write records stored in DataFrame to Amazon Athena.\n<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html\" rel=\"nofollow\">pandas.DataFrame.to_sql</a> uses <a href=\"#sqlalchemy\" rel=\"nofollow\">SQLAlchemy</a>, so you need to install it.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">quote_plus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"n\">conn_str</span> <span class=\"o\">=</span> <span class=\"s1\">'awsathena+jdbc://:@athena.</span><span class=\"si\">{region_name}</span><span class=\"s1\">.amazonaws.com:443/'</span>\\\n           <span class=\"s1\">'</span><span class=\"si\">{schema_name}</span><span class=\"s1\">?s3_staging_dir=</span><span class=\"si\">{s3_staging_dir}</span><span class=\"s1\">&amp;s3_dir=</span><span class=\"si\">{s3_dir}</span><span class=\"s1\">&amp;compression=snappy'</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"n\">conn_str</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n    <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">,</span>\n    <span class=\"n\">schema_name</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_SCHEMA'</span><span class=\"p\">,</span>\n    <span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"n\">quote_plus</span><span class=\"p\">(</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">),</span>\n    <span class=\"n\">s3_dir</span><span class=\"o\">=</span><span class=\"n\">quote_plus</span><span class=\"p\">(</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">)))</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]})</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_sql</span><span class=\"p\">(</span><span class=\"s1\">'YOUR_TABLE'</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"s2\">\"YOUR_SCHEMA\"</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">if_exists</span><span class=\"o\">=</span><span class=\"s1\">'replace'</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'multi'</span><span class=\"p\">)</span>\n</pre>\n<p>The location of the Amazon S3 table is specified by the <tt>s3_dir</tt> parameter in the connection string.\nIf <tt>s3_dir</tt> is not specified, <tt>s3_staging_dir</tt> parameter will be used. The following rules apply.</p>\n<pre>s3://{s3_dir or s3_staging_dir}/{schema}/{table}/\n</pre>\n<p>The data format only supports Parquet. The compression format is specified by the <tt>compression</tt> parameter in the connection string.</p>\n</div>\n</div>\n</div>\n<div id=\"credential\">\n<h3>Credential</h3>\n<p>Support <a href=\"http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html\" rel=\"nofollow\">AWS CLI credentials</a>, <a href=\"http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/PropertiesFileCredentialsProvider.html\" rel=\"nofollow\">Properties file credentials</a> and <a href=\"http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\" rel=\"nofollow\">AWS credentials provider chain</a>.</p>\n<div id=\"credential-files\">\n<h4>Credential files</h4>\n<p>~/.aws/credentials</p>\n<pre><span class=\"k\">[default]</span>\n<span class=\"na\">aws_access_key_id</span><span class=\"o\">=</span><span class=\"s\">YOUR_ACCESS_KEY_ID</span>\n<span class=\"na\">aws_secret_access_key</span><span class=\"o\">=</span><span class=\"s\">YOUR_SECRET_ACCESS_KEY</span>\n</pre>\n<p>~/.aws/config</p>\n<pre><span class=\"k\">[default]</span>\n<span class=\"na\">region</span><span class=\"o\">=</span><span class=\"s\">us-west-2</span>\n<span class=\"na\">output</span><span class=\"o\">=</span><span class=\"s\">json</span>\n</pre>\n</div>\n<div id=\"environment-variables\">\n<h4>Environment variables</h4>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_ACCESS_KEY_ID</span><span class=\"o\">=</span>YOUR_ACCESS_KEY_ID\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_SECRET_ACCESS_KEY</span><span class=\"o\">=</span>YOUR_SECRET_ACCESS_KEY\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_DEFAULT_REGION</span><span class=\"o\">=</span>us-west-2\n</pre>\n<p>Additional environment variable:</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_ATHENA_S3_STAGING_DIR</span><span class=\"o\">=</span>s3://YOUR_S3_BUCKET/path/to/\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_ATHENA_WORK_GROUP</span><span class=\"o\">=</span>YOUR_WORK_GROUP\n</pre>\n</div>\n<div id=\"id1\">\n<h4>Properties file credentials</h4>\n<p>Create a property file of the following format.</p>\n<p>/path/to/AWSCredentials.properties</p>\n<pre><span class=\"na\">accessKeyId</span><span class=\"o\">:</span><span class=\"s\">YOUR_ACCESS_KEY_ID</span>\n<span class=\"na\">secretKey</span><span class=\"o\">:</span><span class=\"s\">YOUR_SECRET_ACCESS_KEY</span>\n</pre>\n<p>Specify the property file path with <tt>credential_file</tt> of the connect method or connection object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">credential_file</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/AWSCredentials.properties'</span><span class=\"p\">,</span>\n               <span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)</span>\n</pre>\n<p>PyAthenaJDBC uses the property file to authenticate Amazon Athena.</p>\n</div>\n<div id=\"id2\">\n<h4>AWS credentials provider chain</h4>\n<p>See <a href=\"http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\" rel=\"nofollow\">AWS credentials provider chain</a></p>\n<blockquote>\n<p>AWS credentials provider chain that looks for credentials in this order:</p>\n<blockquote>\n<ul>\n<li>Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY (RECOMMENDED since they are recognized by all the AWS SDKs and CLI except for .NET), or AWS_ACCESS_KEY and AWS_SECRET_KEY (only recognized by Java SDK)</li>\n<li>Java System Properties - aws.accessKeyId and aws.secretKey</li>\n<li>Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI</li>\n<li>Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\u201d environment variable is set and security manager has permission to access the variable,</li>\n<li>Instance profile credentials delivered through the Amazon EC2 metadata service</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>In the connect method or connection object, you can connect by specifying at least <tt>s3_staging_dir</tt> and <tt>region_name</tt>.\nIt is not necessary to specify <tt>access_key</tt> and <tt>secret_key</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyathenajdbc</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">s3_staging_dir</span><span class=\"o\">=</span><span class=\"s1\">'s3://YOUR_S3_BUCKET/path/to/'</span><span class=\"p\">,</span>\n               <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-west-2'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>Depends on the following environment variables:</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_ACCESS_KEY_ID</span><span class=\"o\">=</span>YOUR_ACCESS_KEY_ID\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_SECRET_ACCESS_KEY</span><span class=\"o\">=</span>YOUR_SECRET_ACCESS_KEY\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_DEFAULT_REGION</span><span class=\"o\">=</span>us-west-2\n$ <span class=\"nb\">export</span> <span class=\"nv\">AWS_ATHENA_S3_STAGING_DIR</span><span class=\"o\">=</span>s3://YOUR_S3_BUCKET/path/to/\n</pre>\n<p>And you need to create a workgroup named <tt><span class=\"pre\">test-pyathena-jdbc</span></tt>.</p>\n<div id=\"run-test\">\n<h4>Run test</h4>\n<pre>$ pip install pipenv\n$ pipenv install --dev\n$ pipenv run scripts/test_data/upload_test_data.sh\n$ pipenv run pytest\n$ pipenv run scripts/test_data/delete_test_data.sh\n</pre>\n</div>\n<div id=\"run-test-multiple-python-versions\">\n<h4>Run test multiple Python versions</h4>\n<pre>$ pip install pipenv\n$ pipenv install --dev\n$ pipenv run scripts/test_data/upload_test_data.sh\n$ pyenv <span class=\"nb\">local</span> <span class=\"m\">3</span>.7.2 <span class=\"m\">3</span>.6.8 <span class=\"m\">3</span>.5.7 <span class=\"m\">3</span>.4.10 <span class=\"m\">2</span>.7.16\n$ pipenv run tox\n$ pipenv run scripts/test_data/delete_test_data.sh\n</pre>\n</div>\n</div>\n<div id=\"code-formatting\">\n<h3>Code formatting</h3>\n<p>The code formatting uses <a href=\"https://github.com/psf/black\" rel=\"nofollow\">black</a> and <a href=\"https://github.com/timothycrosley/isort\" rel=\"nofollow\">isort</a>.</p>\n<div id=\"appy-format\">\n<h4>Appy format</h4>\n<pre>$ make fmt\n</pre>\n</div>\n<div id=\"check-format\">\n<h4>Check format</h4>\n<pre>$ make chk\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>The license of all Python code except JDBC driver is <a href=\"LICENSE\" rel=\"nofollow\">MIT license</a>.</p>\n<div id=\"jdbc-driver\">\n<h4>JDBC driver</h4>\n<p>For the license of JDBC driver, please check the following link.</p>\n<ul>\n<li><a href=\"https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/docs/release-notes.txt\" rel=\"nofollow\">JDBC driver release notes</a></li>\n<li><a href=\"https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/docs/LICENSE.txt\" rel=\"nofollow\">JDBC driver license</a></li>\n<li><a href=\"https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/docs/NOTICES.txt\" rel=\"nofollow\">JDBC driver notices</a></li>\n<li><a href=\"https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.7/docs/third-party-licenses.txt\" rel=\"nofollow\">JDBC driver third-party licenses</a></li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7171210, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "911dc2f1b26adb862745a7eb1cf016e9", "sha256": "7459c4d57561502fbc1f2a4e9dc364d9f2c860d6a8276b30ac91b08af2622eec"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "911dc2f1b26adb862745a7eb1cf016e9", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8496383, "upload_time": "2017-01-04T13:57:42", "upload_time_iso_8601": "2017-01-04T13:57:42.301880Z", "url": "https://files.pythonhosted.org/packages/0e/d2/5cf11307d09586eb630415c67c24c90ac3e8bd3bfb77c70ce8d17120f73c/PyAthenaJDBC-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5535126830165bd84425a71a65fbf033", "sha256": "9c20a8d6dcadd64dcda6ee692c6eeff48cd5a1308ee8c39218275a3112525028"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5535126830165bd84425a71a65fbf033", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10112, "upload_time": "2017-01-04T13:50:04", "upload_time_iso_8601": "2017-01-04T13:50:04.560180Z", "url": "https://files.pythonhosted.org/packages/a2/38/1dd0a5daa37573e166478c8e46f6642404e5323f1a7a58be244d53352530/PyAthenaJDBC-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "873e7e1c15f28715a6e9a72d3cade8ed", "sha256": "27474bc2cdb0948b276f6b3c2bf8aef1afbcc4ba7ce40f95a13e32e090ccc771"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "873e7e1c15f28715a6e9a72d3cade8ed", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8496665, "upload_time": "2017-01-09T14:03:06", "upload_time_iso_8601": "2017-01-09T14:03:06.339623Z", "url": "https://files.pythonhosted.org/packages/87/e4/d49ba6e820b07dce83744a7787f61b24f819397dffc3be53560b3691d9e5/PyAthenaJDBC-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "431df1b44058ce1385f69acd2f6b118a", "sha256": "fac5c3cd8d15b423adc002dba25b263ddc1887b65fcb810d157b9b90f4967f84"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.2.tar.gz", "has_sig": false, "md5_digest": "431df1b44058ce1385f69acd2f6b118a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10483, "upload_time": "2017-01-09T13:23:52", "upload_time_iso_8601": "2017-01-09T13:23:52.197500Z", "url": "https://files.pythonhosted.org/packages/73/7f/aaf502c3b5fbcde8f58b86963d009292139541d092754075a63249bf18c6/PyAthenaJDBC-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "9adcec09c1d0d586041256b23d506b99", "sha256": "a955350aadeffac60bf060ed13912fcb3c3500f104a965852837a1c0668017e3"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9adcec09c1d0d586041256b23d506b99", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8496673, "upload_time": "2017-01-09T16:21:43", "upload_time_iso_8601": "2017-01-09T16:21:43.255964Z", "url": "https://files.pythonhosted.org/packages/cc/5e/940a5e079a592243f6509b921bc5f6a303cb27d540544e541c24af419934/PyAthenaJDBC-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14d66a4073d86be78655b156171849aa", "sha256": "0de344a03e2a76bfcf81993bac8a3d9882d18f89965b33b3cd2d00ea34178a2a"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.3.tar.gz", "has_sig": false, "md5_digest": "14d66a4073d86be78655b156171849aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10496, "upload_time": "2017-01-09T16:20:52", "upload_time_iso_8601": "2017-01-09T16:20:52.975804Z", "url": "https://files.pythonhosted.org/packages/6e/b3/49ed87ee52d2ead7e0670a8cd51842cac2cbcefff428fbe152356dd84c78/PyAthenaJDBC-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "a8029ab98b28c391495669533cae0b9a", "sha256": "4d9e835fa6baf565cdb04c8723930188c4580658a328c3b6399b360b866a3188"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a8029ab98b28c391495669533cae0b9a", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8496673, "upload_time": "2017-01-10T12:14:25", "upload_time_iso_8601": "2017-01-10T12:14:25.574367Z", "url": "https://files.pythonhosted.org/packages/5f/34/c39b8a336d5bae197b8e8c0e17baa3536944e7f029bf5d9df882cd6d0524/PyAthenaJDBC-1.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ccfb5e40b80ac1c0c731621e6c3e22db", "sha256": "df7b70aa2612fa694e65214555231e26bb676c8a8e1b838bbb4cb888fbbfab35"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.4.tar.gz", "has_sig": false, "md5_digest": "ccfb5e40b80ac1c0c731621e6c3e22db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10488, "upload_time": "2017-01-10T12:10:11", "upload_time_iso_8601": "2017-01-10T12:10:11.009762Z", "url": "https://files.pythonhosted.org/packages/70/ee/48c217a75aa25a5c10b5ed20df7d913c6f3aeb8a96a21a6e2a667fcfff0d/PyAthenaJDBC-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "cedfd3c9f91fa24c586cf5c15ee52ff1", "sha256": "96b15fe5ae029c3e7c0be8c25a7e1f5a12040c2c975c7f40f6e9afa80c9e5cd6"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cedfd3c9f91fa24c586cf5c15ee52ff1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8496741, "upload_time": "2017-01-11T14:45:24", "upload_time_iso_8601": "2017-01-11T14:45:24.876360Z", "url": "https://files.pythonhosted.org/packages/0e/2e/d9d2e088bf8d2a3061ea70524d3e30c9561a249f56ba38ff91ec24e9db72/PyAthenaJDBC-1.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c010fcc01df0a313c15687f144b8de45", "sha256": "56ddd83f816bf375ddd080fd974596a51968cb0d5fe53c94a66e5fe125d75583"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.5.tar.gz", "has_sig": false, "md5_digest": "c010fcc01df0a313c15687f144b8de45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10556, "upload_time": "2017-01-11T14:42:43", "upload_time_iso_8601": "2017-01-11T14:42:43.884139Z", "url": "https://files.pythonhosted.org/packages/6c/22/f6824fcfdd7def639d205ae1486c176e7345fc3a3065285645eb783c4470/PyAthenaJDBC-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "e198e53edfc2269ce0eabbb391f134d3", "sha256": "978b0592120d527819e2212cdfa5ef4b5c08b7ef698f1359a4f3defdc4308eea"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e198e53edfc2269ce0eabbb391f134d3", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8496867, "upload_time": "2017-01-15T06:49:14", "upload_time_iso_8601": "2017-01-15T06:49:14.792682Z", "url": "https://files.pythonhosted.org/packages/ae/2d/88027338dd70de6519ba956c146bdafe831f1df6b5a3097b60a33dcf70e2/PyAthenaJDBC-1.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9fe921d2333ab815a68b958178c6f2d9", "sha256": "b78245e86ec337fc08f75d0db8db45377073f99ae8037642ec5fc06f8cc7288a"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.6.tar.gz", "has_sig": false, "md5_digest": "9fe921d2333ab815a68b958178c6f2d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10680, "upload_time": "2017-01-15T06:48:07", "upload_time_iso_8601": "2017-01-15T06:48:07.889132Z", "url": "https://files.pythonhosted.org/packages/58/09/c9ce028b5f5a937ebff2dd3b55b151ff0b03da2afdd5a9eb5f4a6d8468ea/PyAthenaJDBC-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "8ebd56f4f8bfacbe71863b7a5d6a01a0", "sha256": "24bdbf9e35802c7a85bb349d6c4528cdc3f19720fcb29083fa7c4a1a9e6b59ad"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8ebd56f4f8bfacbe71863b7a5d6a01a0", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8497222, "upload_time": "2017-03-05T14:39:25", "upload_time_iso_8601": "2017-03-05T14:39:25.002991Z", "url": "https://files.pythonhosted.org/packages/b7/25/c8497652f19ba4c74b75046ccdcb0f342fc318aa40b36b4bf63505debe34/PyAthenaJDBC-1.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ca2d4a0fc51482ac9a2ed3e19c4c428", "sha256": "a0d3b20ffa6b6e74821014bbe3bfa6e9615355846469ae685687564265fbeda7"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.7.tar.gz", "has_sig": false, "md5_digest": "7ca2d4a0fc51482ac9a2ed3e19c4c428", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10836, "upload_time": "2017-03-05T14:35:30", "upload_time_iso_8601": "2017-03-05T14:35:30.373676Z", "url": "https://files.pythonhosted.org/packages/2e/32/81052c05969375fda936d0fcda4d99ef5eb0d652f4105b48267d2fdb6394/PyAthenaJDBC-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "f680717c8158372c773b0ddd1c6149ba", "sha256": "8a051f8d533f3410bab2a5564d3f894fb92e4271e0aced123a8ad1198f583077"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f680717c8158372c773b0ddd1c6149ba", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8497652, "upload_time": "2017-03-20T04:14:17", "upload_time_iso_8601": "2017-03-20T04:14:17.858796Z", "url": "https://files.pythonhosted.org/packages/da/01/75fdd69eef5858e91fad07c778444d56c25fc7b89f0d76a9b4c9b0415ae7/PyAthenaJDBC-1.0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9afd2ee13d0a4231dd4843231bdb840", "sha256": "2f2f82942b21f716c1834f363c334b90b89bfe423dce36c991e46ad055d332d3"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.8.tar.gz", "has_sig": false, "md5_digest": "b9afd2ee13d0a4231dd4843231bdb840", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11114, "upload_time": "2017-03-20T04:12:46", "upload_time_iso_8601": "2017-03-20T04:12:46.188990Z", "url": "https://files.pythonhosted.org/packages/6c/67/1538ae45e9d2ce99e2f8852db554a7b3e2a68a5bd4851568dac55c921a79/PyAthenaJDBC-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "2baf5aecfb9b3dbe66ca601dc69c60b6", "sha256": "f399b6648cb30d17b55e3921702f4e1245c302e550ccb6b7bb6fe4b467849600"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2baf5aecfb9b3dbe66ca601dc69c60b6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8497686, "upload_time": "2017-03-27T14:45:16", "upload_time_iso_8601": "2017-03-27T14:45:16.458182Z", "url": "https://files.pythonhosted.org/packages/95/ea/a8a218da3cc993acdc1bdfd5018f838f500e27528bb9d016aefc67692379/PyAthenaJDBC-1.0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "874eec34e11ec11883bb1022d9f027f4", "sha256": "96993a2fb48189eb15f201df8d599b9ce53a30c8959c620e651255e7d20d925c"}, "downloads": -1, "filename": "PyAthenaJDBC-1.0.9.tar.gz", "has_sig": false, "md5_digest": "874eec34e11ec11883bb1022d9f027f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11173, "upload_time": "2017-03-27T14:43:51", "upload_time_iso_8601": "2017-03-27T14:43:51.818650Z", "url": "https://files.pythonhosted.org/packages/6e/a8/35a5c2b59ec4bf703bab13202bb5073839128b984336677f5edb021a56f1/PyAthenaJDBC-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1c001b5623e658f2acd704e480f7bbfb", "sha256": "a5a2556869dbb9de99586cc69b110df55e80dc93bd79fb942fd2e0335ad5423f"}, "downloads": -1, "filename": "PyAthenaJDBC-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c001b5623e658f2acd704e480f7bbfb", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8502112, "upload_time": "2017-04-06T13:29:21", "upload_time_iso_8601": "2017-04-06T13:29:21.567576Z", "url": "https://files.pythonhosted.org/packages/0a/78/1944ba5963cc73514288f629c05767c09c6de7347a645afb3bb200b05a62/PyAthenaJDBC-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecfea211ebef9d43ab3571c814c31fac", "sha256": "8625c11c551bada9ad97e71bc570e3158c71316ff2894a5249d303c26e3a6c8d"}, "downloads": -1, "filename": "PyAthenaJDBC-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ecfea211ebef9d43ab3571c814c31fac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15357, "upload_time": "2017-04-06T13:27:30", "upload_time_iso_8601": "2017-04-06T13:27:30.743927Z", "url": "https://files.pythonhosted.org/packages/ab/f2/907d065c3150feed41b82c7381a9d0090a5d806c19ea9821c814a879d814/PyAthenaJDBC-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "476404a2b786ee0177ad057a700e8f09", "sha256": "2321ee16c17102793832f9ebc49dedbfadc81ad9c0557f7b77cdbf1bd227b0db"}, "downloads": -1, "filename": "PyAthenaJDBC-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "476404a2b786ee0177ad057a700e8f09", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 17856251, "upload_time": "2017-04-08T10:33:01", "upload_time_iso_8601": "2017-04-08T10:33:01.318229Z", "url": "https://files.pythonhosted.org/packages/89/6f/ef175144550d786f667d01378f51fac51b0a5ac7855dc15e1a298f1fa36d/PyAthenaJDBC-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d5a4701b364da24f3ade8fa437a411f", "sha256": "78252f6f953d62dcbcd77a1ae966823899262d2318558f6c2932624cc3be7795"}, "downloads": -1, "filename": "PyAthenaJDBC-1.1.1.tar.gz", "has_sig": false, "md5_digest": "5d5a4701b364da24f3ade8fa437a411f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15643, "upload_time": "2017-04-08T10:31:58", "upload_time_iso_8601": "2017-04-08T10:31:58.751537Z", "url": "https://files.pythonhosted.org/packages/30/18/476ec77cf3b03ed50e82506ff201752cb85dc71e3542d7d04b470aa66330/PyAthenaJDBC-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "dc62acbbb15b72b67c7a87fd32830849", "sha256": "22c91b64c53984534d29639aeea9bd67ac874e2e614de4c5dd1ce056c270c45b"}, "downloads": -1, "filename": "PyAthenaJDBC-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dc62acbbb15b72b67c7a87fd32830849", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9516677, "upload_time": "2017-06-10T07:12:39", "upload_time_iso_8601": "2017-06-10T07:12:39.521026Z", "url": "https://files.pythonhosted.org/packages/e7/bd/649f6534e3b55c1266c0110993d43dc47adc295480e9246042a15f3be698/PyAthenaJDBC-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79890ee3fed0a0d8919adbf8696c959c", "sha256": "09e7a1e138d7665cfcb9eb2f731b74734b5a704106dd4e8961c18764590a9e13"}, "downloads": -1, "filename": "PyAthenaJDBC-1.1.2.tar.gz", "has_sig": false, "md5_digest": "79890ee3fed0a0d8919adbf8696c959c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15526, "upload_time": "2017-06-10T07:11:42", "upload_time_iso_8601": "2017-06-10T07:11:42.356232Z", "url": "https://files.pythonhosted.org/packages/50/97/c2e393a4aee9179a7b18f409e0775a37dff6308274f0df8b7f4fab1ac451/PyAthenaJDBC-1.1.2.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "74561a1ddf46244bcca15cd94d2ef6fe", "sha256": "32430162c38861d7ac298b29b7099b0396d3bf5390e3b0e412ccb5fdb354f547"}, "downloads": -1, "filename": "PyAthenaJDBC-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "74561a1ddf46244bcca15cd94d2ef6fe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9517450, "upload_time": "2017-07-30T11:18:02", "upload_time_iso_8601": "2017-07-30T11:18:02.534846Z", "url": "https://files.pythonhosted.org/packages/b5/5a/000340e77ac14e2c47486b071996d483cf606d4bbd0a4e27325a1009d5bc/PyAthenaJDBC-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e15e7ac51aadf2aeb8459d41b9361eb4", "sha256": "e8f14086466a013db471b610dd32f0ac0659fd9c9a46e1bb1315412fcd067417"}, "downloads": -1, "filename": "PyAthenaJDBC-1.2.0.tar.gz", "has_sig": false, "md5_digest": "e15e7ac51aadf2aeb8459d41b9361eb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16207, "upload_time": "2017-07-30T11:17:44", "upload_time_iso_8601": "2017-07-30T11:17:44.107945Z", "url": "https://files.pythonhosted.org/packages/90/01/9bd7fba3340290b3dc7447a04e2301d6a29d280f138fdb86db37dc3cd447/PyAthenaJDBC-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "41a8538df1ac279de2a6e60c115c262e", "sha256": "c372efc032aeafbb9f4cf15013debd4bd77525c350c9479f1c3cfd2037b17ecc"}, "downloads": -1, "filename": "PyAthenaJDBC-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "41a8538df1ac279de2a6e60c115c262e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9517633, "upload_time": "2017-09-16T04:18:30", "upload_time_iso_8601": "2017-09-16T04:18:30.236085Z", "url": "https://files.pythonhosted.org/packages/0a/40/e609a22c00fb535d103cb78da881f52de2da9c6cc0bd2adbf33589a0bd68/PyAthenaJDBC-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23618e692e8148a06f1a9847a72e7425", "sha256": "6bb07f722b3a8bd55d002408e90322135fa0c6be29222ccf72908e7b24d5e375"}, "downloads": -1, "filename": "PyAthenaJDBC-1.3.0.tar.gz", "has_sig": false, "md5_digest": "23618e692e8148a06f1a9847a72e7425", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16302, "upload_time": "2017-09-16T04:18:01", "upload_time_iso_8601": "2017-09-16T04:18:01.188686Z", "url": "https://files.pythonhosted.org/packages/b8/02/27d01e92f27ad7636c6e229886aded1de61c04cf4e14f7d3088d85d8a2b4/PyAthenaJDBC-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "41d218a80529b76a4b3f5d4ed53fcc72", "sha256": "fcc67174334328fc677846b244a5a24773c55f1333b4c0f0482f72e03d732601"}, "downloads": -1, "filename": "PyAthenaJDBC-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "41d218a80529b76a4b3f5d4ed53fcc72", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9517679, "upload_time": "2018-02-11T02:52:05", "upload_time_iso_8601": "2018-02-11T02:52:05.178601Z", "url": "https://files.pythonhosted.org/packages/69/b4/ef0f6f35ed2f7794f396717bec8a57ced6a8e9b8209dc37e7be3684d25c5/PyAthenaJDBC-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b2fe87d0d2dbc02a679e5b27dca727f", "sha256": "a8da59b459a610f223fac9bbf85efc31c1f75c74ac1f27dcda5354e2907e0921"}, "downloads": -1, "filename": "PyAthenaJDBC-1.3.1.tar.gz", "has_sig": false, "md5_digest": "8b2fe87d0d2dbc02a679e5b27dca727f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16383, "upload_time": "2018-02-11T02:51:50", "upload_time_iso_8601": "2018-02-11T02:51:50.295100Z", "url": "https://files.pythonhosted.org/packages/35/42/e08906e7a341782bd4ef1880773171d51a6df987ad17482fa40ccbc1af8e/PyAthenaJDBC-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "c5f8c3e178574d8c542046f7660f79cd", "sha256": "b503d3b73b298b38b8e14ad1e83df9ceffe4f2df294522fab20b8c6c8bdee3c0"}, "downloads": -1, "filename": "PyAthenaJDBC-1.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c5f8c3e178574d8c542046f7660f79cd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9517710, "upload_time": "2018-02-14T12:49:11", "upload_time_iso_8601": "2018-02-14T12:49:11.506373Z", "url": "https://files.pythonhosted.org/packages/7a/c8/32582bf78c1079149fc1eef3fe8bbcd9fdd2f6b1ef304f874105f1f511b9/PyAthenaJDBC-1.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a197fe7950a4874229195e812b695063", "sha256": "49863d065cd774065a54ee2fe29cea141a52f61af7a73944ecdb37fb695c7ffd"}, "downloads": -1, "filename": "PyAthenaJDBC-1.3.2.tar.gz", "has_sig": false, "md5_digest": "a197fe7950a4874229195e812b695063", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16429, "upload_time": "2018-02-14T12:48:53", "upload_time_iso_8601": "2018-02-14T12:48:53.413913Z", "url": "https://files.pythonhosted.org/packages/1a/fd/c41903661b2a3dfb24f1712da7f6d55ce3258234a705136553275623f60a/PyAthenaJDBC-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "1eb5261324214f6176afe29e9f92c0c5", "sha256": "11be804192b6b09174dee46aa2316669b8c7a068bec79873ff1334c6e00ce108"}, "downloads": -1, "filename": "PyAthenaJDBC-1.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1eb5261324214f6176afe29e9f92c0c5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9517849, "upload_time": "2018-03-13T14:23:02", "upload_time_iso_8601": "2018-03-13T14:23:02.647245Z", "url": "https://files.pythonhosted.org/packages/96/33/701864446105d9cc847adfa545792f2a5889e0664d49951122d60e0eaeed/PyAthenaJDBC-1.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b6120b0f6ac53e7b54f69be6b41cb27", "sha256": "d236c146a91b9390e7ccd9e29e1395fde103e20e1feadabf6013a997461d7b98"}, "downloads": -1, "filename": "PyAthenaJDBC-1.3.3.tar.gz", "has_sig": false, "md5_digest": "7b6120b0f6ac53e7b54f69be6b41cb27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16527, "upload_time": "2018-03-13T14:21:50", "upload_time_iso_8601": "2018-03-13T14:21:50.974805Z", "url": "https://files.pythonhosted.org/packages/85/1a/022d8389c76112fae558c183ec7f63780ffbd6d682ccb8854fe7a36f5121/PyAthenaJDBC-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "ad134228d325f75e1cb30c48082676b8", "sha256": "adbd5fc75d4378252456a6c06aee02f9db50a6b68126b51704e8f1ff489931fe"}, "downloads": -1, "filename": "PyAthenaJDBC-1.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ad134228d325f75e1cb30c48082676b8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9517909, "upload_time": "2018-09-22T13:18:37", "upload_time_iso_8601": "2018-09-22T13:18:37.360250Z", "url": "https://files.pythonhosted.org/packages/b3/2b/847372db8a6d6c9623847476c152e6082dee15f488f21c60deebd6cbdaaa/PyAthenaJDBC-1.3.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d699772d5edfa065c86ee7c2472e9f6", "sha256": "0cff4b3f7a1200fda73eec4b1e34d14a815ba5c7c01d1c22882b3a47a6a84b8f"}, "downloads": -1, "filename": "PyAthenaJDBC-1.3.4.tar.gz", "has_sig": false, "md5_digest": "3d699772d5edfa065c86ee7c2472e9f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16602, "upload_time": "2018-09-22T13:18:19", "upload_time_iso_8601": "2018-09-22T13:18:19.641715Z", "url": "https://files.pythonhosted.org/packages/be/d1/71f05c69f4df77b31be604fb734cee1079a4fe22b19587659ccf79fe0eae/PyAthenaJDBC-1.3.4.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "bad80f0d645f62353a49a092ca93ac34", "sha256": "ecdfe3de7b2b456681ff762be38e1e02566fc4def1d724dd757eb1f3a5822d0e"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bad80f0d645f62353a49a092ca93ac34", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6758816, "upload_time": "2018-09-15T16:21:40", "upload_time_iso_8601": "2018-09-15T16:21:40.509548Z", "url": "https://files.pythonhosted.org/packages/85/d9/30d6af51091eb9714224444c707a11867588588f42e2d63c73bd1fd704c4/PyAthenaJDBC-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9498a6a833d182783e5ef883e687d57e", "sha256": "20004c9840820b5b255816caedb634a0db4a4b0bf6819e1e52ec4b8ee4144a4f"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.0.tar.gz", "has_sig": false, "md5_digest": "9498a6a833d182783e5ef883e687d57e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41686, "upload_time": "2018-09-15T16:21:26", "upload_time_iso_8601": "2018-09-15T16:21:26.839528Z", "url": "https://files.pythonhosted.org/packages/51/e6/ddf9603d0a191a7b970c83c90106c94eb181f752df9f97892fb8db289f8e/PyAthenaJDBC-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "435c7c121a795775cf996dad1a3a2d40", "sha256": "d5b2b4cb4f9a380c99f988eb4a0b26645bba7a068b66bfcb5bcc2fe1ceada870"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "435c7c121a795775cf996dad1a3a2d40", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6760600, "upload_time": "2018-12-01T14:55:53", "upload_time_iso_8601": "2018-12-01T14:55:53.360517Z", "url": "https://files.pythonhosted.org/packages/b8/45/017b913c925f812a3d7217b0783bf8e65a4cc9d2624134119d29067034e5/PyAthenaJDBC-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "184a9013df5ce7dfe01564740da0acfe", "sha256": "71ab728388e07a2206fe7f4ec8340dcd9f115d63080350e2ce478b2fe19849e3"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.1.tar.gz", "has_sig": false, "md5_digest": "184a9013df5ce7dfe01564740da0acfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42843, "upload_time": "2018-12-01T14:55:31", "upload_time_iso_8601": "2018-12-01T14:55:31.439319Z", "url": "https://files.pythonhosted.org/packages/65/71/e7b1b4a518fd7cbbfb55367a93a8d035faba68e3650f4d5351f54142bbba/PyAthenaJDBC-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "74d997a56fb5570c5584a3db157d36fa", "sha256": "edf2e9ab5dc8388ab4584fc4bcbf2507fa096a47fe1c13a8286b76532b1867c5"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "74d997a56fb5570c5584a3db157d36fa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6760790, "upload_time": "2019-02-09T14:57:22", "upload_time_iso_8601": "2019-02-09T14:57:22.366404Z", "url": "https://files.pythonhosted.org/packages/21/5b/c8e814ff12995958f49d059cbdb087c5bcd90506f20aad56182e873c98fa/PyAthenaJDBC-2.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "661eba958c8b1604fc383af3f496582c", "sha256": "ac7ed7903b0c44b81e909eb3c6c36668d22b2ecd4197f0358ea72de2f88a787f"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.2.tar.gz", "has_sig": false, "md5_digest": "661eba958c8b1604fc383af3f496582c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43108, "upload_time": "2019-02-09T14:57:07", "upload_time_iso_8601": "2019-02-09T14:57:07.166132Z", "url": "https://files.pythonhosted.org/packages/21/16/317674332be0f53770bc858c90c9fed6985fa51720479a4cbf172961e520/PyAthenaJDBC-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "7f28df5a2fb8dc26ea013856fe258d6e", "sha256": "21c1359ad8e8c678041b190c7832784fb7c0f8fa8a6786ddfa0a0e2cfa445938"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7f28df5a2fb8dc26ea013856fe258d6e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6793086, "upload_time": "2019-02-11T14:36:15", "upload_time_iso_8601": "2019-02-11T14:36:15.431856Z", "url": "https://files.pythonhosted.org/packages/a7/97/d354d03e28fba0fa1d000994a2303fa831eab6edda2d1007e8b4f9a68f5f/PyAthenaJDBC-2.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ef2ad9cb5aa820d65a72d44c50b3474", "sha256": "2e7080c15d2fe0c2e994a3004bdf8b3a190fbd966ffc8a6d69d050c2b975c1bf"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.3.tar.gz", "has_sig": false, "md5_digest": "8ef2ad9cb5aa820d65a72d44c50b3474", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43100, "upload_time": "2019-02-11T14:35:57", "upload_time_iso_8601": "2019-02-11T14:35:57.059188Z", "url": "https://files.pythonhosted.org/packages/bb/6c/512874df259427079dca29ea33bd7df28dca8cbccc8624bbe06d39fc0c08/PyAthenaJDBC-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "58aa3df492145190c1e63003bdd176c0", "sha256": "16fb452a554596bd026fb0849448db2655e82f4655c723b81813146b2ff68a3a"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "58aa3df492145190c1e63003bdd176c0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7116839, "upload_time": "2019-03-23T04:56:47", "upload_time_iso_8601": "2019-03-23T04:56:47.344662Z", "url": "https://files.pythonhosted.org/packages/0f/7b/ea395e7b9a1eb3090bb93d3be17378a149174523199ee92ce0f6d650394c/PyAthenaJDBC-2.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25efe27f6f3bbf18c1e1e27de2ddb3a9", "sha256": "0f1403d4bfe060a4d59ef7681b4d09955f761b8a8c2029d0d2d8f394be1c804b"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.4.tar.gz", "has_sig": false, "md5_digest": "25efe27f6f3bbf18c1e1e27de2ddb3a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46444, "upload_time": "2019-03-23T04:56:16", "upload_time_iso_8601": "2019-03-23T04:56:16.723605Z", "url": "https://files.pythonhosted.org/packages/83/7b/2b6a991c50228011000c64c5a3d73b7e620d64342b7f5e42298b60c9432f/PyAthenaJDBC-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "30ea87c3babdcafb2dac2968c9d77737", "sha256": "9404803f22fed8bce18a6171242140511ae7eb5fa716b7ca84bdf8bd4f04b3c5"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "30ea87c3babdcafb2dac2968c9d77737", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7108625, "upload_time": "2019-06-30T05:13:18", "upload_time_iso_8601": "2019-06-30T05:13:18.579798Z", "url": "https://files.pythonhosted.org/packages/e8/1f/75ac20157183fae641cd768ae0a4b412586aaa9705536257df5195753c45/PyAthenaJDBC-2.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3dbbf68795156cd4253fdb21df19cc3", "sha256": "40dd9f71b00c2fe5c0e33b569e6a8cbb7f04dfaff87a101ff92548d57cfd15d9"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.5.tar.gz", "has_sig": false, "md5_digest": "b3dbbf68795156cd4253fdb21df19cc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40344, "upload_time": "2019-06-30T05:13:06", "upload_time_iso_8601": "2019-06-30T05:13:06.738733Z", "url": "https://files.pythonhosted.org/packages/e8/e1/424b89cc3b6f17d1d8c82d04e1036f0db787aca3c75dfc9e98ecf4ce16cc/PyAthenaJDBC-2.0.5.tar.gz", "yanked": false}], "2.0.6": [{"comment_text": "", "digests": {"md5": "79c2a0d273407def93e2cbea560a2257", "sha256": "ff8531cd175377bf7413da906c02a7f36e022546b6fb863c1e87e12c8c19d5c5"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "79c2a0d273407def93e2cbea560a2257", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7681712, "upload_time": "2020-03-15T10:59:35", "upload_time_iso_8601": "2020-03-15T10:59:35.242739Z", "url": "https://files.pythonhosted.org/packages/a3/37/3b1b9efd2f2c731dd311290259bde3d210113ec4d4d47afdb2806b323870/PyAthenaJDBC-2.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69fabd7a88363814a3a5237482d7c949", "sha256": "a44a83854339ae24143a1c4500df2f2d21dc655c6eaa955a7a51d5a234d4bbe8"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.6.tar.gz", "has_sig": false, "md5_digest": "69fabd7a88363814a3a5237482d7c949", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39344, "upload_time": "2020-03-15T10:59:39", "upload_time_iso_8601": "2020-03-15T10:59:39.553723Z", "url": "https://files.pythonhosted.org/packages/28/da/10ecc95c3b3fbe8c67169d6a6a0855e263ec9477805182b9bdd2d54003e1/PyAthenaJDBC-2.0.6.tar.gz", "yanked": false}], "2.0.7": [{"comment_text": "", "digests": {"md5": "128c317d17ea29895ef5c3e8046c2718", "sha256": "99b471e49d18add4257990ce4256ff3dedddbe248cdcc1ead50994ead181e964"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "128c317d17ea29895ef5c3e8046c2718", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7683671, "upload_time": "2020-04-12T09:11:21", "upload_time_iso_8601": "2020-04-12T09:11:21.520845Z", "url": "https://files.pythonhosted.org/packages/cc/a6/75c4a791fcc0e14f94dd360e4b5259973bc55e7a116261f23c4d934c3f48/PyAthenaJDBC-2.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ad4cefd70cb40bdf9a25fbcb07a835c", "sha256": "77b9443bb1b419d82c68204b198b0f490bea418d1ca4a212dd10566306bdc350"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.7.tar.gz", "has_sig": false, "md5_digest": "8ad4cefd70cb40bdf9a25fbcb07a835c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41346, "upload_time": "2020-04-12T09:11:24", "upload_time_iso_8601": "2020-04-12T09:11:24.105859Z", "url": "https://files.pythonhosted.org/packages/0d/94/9c35cb3440695c2d3abeacacd3ede635291b0fc9aee54abb16ab8438543f/PyAthenaJDBC-2.0.7.tar.gz", "yanked": false}], "2.0.8": [{"comment_text": "", "digests": {"md5": "47bb04462b3a4bcda885e5db4d576ed7", "sha256": "eb43ffc531796b13e26287596b650977b7057a5ad718eae0ab60ce030707720a"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "47bb04462b3a4bcda885e5db4d576ed7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7688995, "upload_time": "2020-05-05T11:02:22", "upload_time_iso_8601": "2020-05-05T11:02:22.289144Z", "url": "https://files.pythonhosted.org/packages/62/24/3e03b483741237cdb516531b4b9e27533eab022bde0990193d9ab3c21022/PyAthenaJDBC-2.0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a9e63537a196422995154f4f66b46f6", "sha256": "460d0a4408f5044194d59602956d572d4ce98f804ebe535621da6112e05e127f"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.8.tar.gz", "has_sig": false, "md5_digest": "5a9e63537a196422995154f4f66b46f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47681, "upload_time": "2020-05-05T11:02:25", "upload_time_iso_8601": "2020-05-05T11:02:25.811591Z", "url": "https://files.pythonhosted.org/packages/48/8e/6bedc8443603f7e6198a0a750853aaeabd7f201c6f711847618a4671f55b/PyAthenaJDBC-2.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "47bb04462b3a4bcda885e5db4d576ed7", "sha256": "eb43ffc531796b13e26287596b650977b7057a5ad718eae0ab60ce030707720a"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "47bb04462b3a4bcda885e5db4d576ed7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7688995, "upload_time": "2020-05-05T11:02:22", "upload_time_iso_8601": "2020-05-05T11:02:22.289144Z", "url": "https://files.pythonhosted.org/packages/62/24/3e03b483741237cdb516531b4b9e27533eab022bde0990193d9ab3c21022/PyAthenaJDBC-2.0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a9e63537a196422995154f4f66b46f6", "sha256": "460d0a4408f5044194d59602956d572d4ce98f804ebe535621da6112e05e127f"}, "downloads": -1, "filename": "PyAthenaJDBC-2.0.8.tar.gz", "has_sig": false, "md5_digest": "5a9e63537a196422995154f4f66b46f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47681, "upload_time": "2020-05-05T11:02:25", "upload_time_iso_8601": "2020-05-05T11:02:25.811591Z", "url": "https://files.pythonhosted.org/packages/48/8e/6bedc8443603f7e6198a0a750853aaeabd7f201c6f711847618a4671f55b/PyAthenaJDBC-2.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:03 2020"}