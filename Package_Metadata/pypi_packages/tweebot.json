{"info": {"author": "K.C.Saff", "author_email": "kc@saff.net", "bugtrack_url": null, "classifiers": ["Intended Audience :: Other Audience", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "tweebot\n=======\n\n|Build Status|\n\nA twitter bot client, written in Python. This can be used as either a\ncommand-line tool, or as a library imported into your Python\napplications.\n\nRequirements\n============\n\n1. Python 3.3+\n2. A twitter account\n\nInstallation\n============\n\nTo install:\n\n::\n\n    make install\n\nDevelopment\n===========\n\nTo build the dev environment:\n\n::\n\n    make venv\n    . venv/bin/activate\n    python main.py\n\nConfiguration\n=============\n\nThe application will only try to tweet if you provide a key file, which\nis formatted like:\n\n::\n\n    CONSUMER_KEY: dsafsafafsd\n    CONSUMER_SECRET: iuhbfusdfiu44\n    ACCESS_KEY: vjhbv99889\n    ACCESS_SECRET: ivfjslfiguhg98\n\n*OR* the equivalent JSON.\n\nThe filename must be provided using the ``--keys`` command-line\nargument.\n\nCommand-line usage\n==================\n\nTweeting\n--------\n\nTo tweet a simple status update:\n\n::\n\n    tweebot --keys {twitter-key-file} tweet \"Hello world, this is my Tweebot status update!\" -vv\n\nYou can control verbosity with the number of ``v``\\ s.\n\nMore command-line options are possible, try ``--help`` to see them all.\n\nIf you use ``-`` for the tweet text, the application will use standard\ninput, which can be handy for piping info from your bots -- ie, use an\narbitrary application to pipe to tweebot which can tweet it out.\n\nFollowing\n---------\n\nTo automatically follow new followers, and unfollow unfollowers:\n\n::\n\n    tweebot --keys {twitter-key-file} follow --auto\n\nLibrary usage\n=============\n\nThere are two basic ways you can use this in a library: you can either\nimport the ``TwitterClient`` class and control that from your\napplication, or you can import tweebot's ``main`` function and provide\nit with a callback that will generate your status updates.\n\ntweebot.main\n------------\n\nIf you provide a callable to ``tweebot.main``, then tweebot will use it\nas a callback when the main function is called. The main method\nimplements all the command-line tweebot arguments, the difference is\nthat if the program is asked to tweet an empty status, it will instead\ntweet the results of your method, called with no arguments. If you tweet\na non-empty status, that string will be handed to your method, and the\nresult will be tweeted:\n\n::\n\n    mytweebot --keys {twitter-key-file} tweet -vv\n\nThus, this provides a simple way to define new twitter-bots: define a\nmethod of the form:\n\n::\n\n    def my_tweet_builder(status, directives):\n        new_status = do_something()\n        return new_status\n        # or\n        return new_status, new_directives\n\nThis can either ignore the status it's given, or use it in any way you\nwish. If you have multiple bots that modify the status when given, then\nyou could run them independently, or pipe them together in novel ways\nwithout recompiling -- your choice.\n\nDirect client use\n-----------------\n\nIf you want your application to be in control, you can simply import\n``tweebot.TwitterClient`` and use its methods directly. This includes\ndirect API access (via tweepy) to twitter, and few custom, convenience\nmethods.\n\n.. |Build Status| image:: https://travis-ci.org/kcsaff/tweebot.svg?branch=master\n   :target: https://travis-ci.org/kcsaff/tweebot", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kcsaff/tweebot", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "tweebot", "package_url": "https://pypi.org/project/tweebot/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tweebot/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kcsaff/tweebot"}, "release_url": "https://pypi.org/project/tweebot/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "A simple twitter-bot command-line tool and library", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"tweebot\">\n<h2>tweebot</h2>\n<p><a href=\"https://travis-ci.org/kcsaff/tweebot\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac52eda1e20e5cfbeae7c0c0f5de1177174b3777/68747470733a2f2f7472617669732d63692e6f72672f6b63736166662f74776565626f742e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>A twitter bot client, written in Python. This can be used as either a\ncommand-line tool, or as a library imported into your Python\napplications.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ol>\n<li>Python 3.3+</li>\n<li>A twitter account</li>\n</ol>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install:</p>\n<pre>make install\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>To build the dev environment:</p>\n<pre>make venv\n. venv/bin/activate\npython main.py\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>The application will only try to tweet if you provide a key file, which\nis formatted like:</p>\n<pre>CONSUMER_KEY: dsafsafafsd\nCONSUMER_SECRET: iuhbfusdfiu44\nACCESS_KEY: vjhbv99889\nACCESS_SECRET: ivfjslfiguhg98\n</pre>\n<p><em>OR</em> the equivalent JSON.</p>\n<p>The filename must be provided using the <tt><span class=\"pre\">--keys</span></tt> command-line\nargument.</p>\n</div>\n<div id=\"command-line-usage\">\n<h2>Command-line usage</h2>\n<div id=\"tweeting\">\n<h3>Tweeting</h3>\n<p>To tweet a simple status update:</p>\n<pre>tweebot --keys {twitter-key-file} tweet \"Hello world, this is my Tweebot status update!\" -vv\n</pre>\n<p>You can control verbosity with the number of <tt>v</tt>s.</p>\n<p>More command-line options are possible, try <tt><span class=\"pre\">--help</span></tt> to see them all.</p>\n<p>If you use <tt>-</tt> for the tweet text, the application will use standard\ninput, which can be handy for piping info from your bots \u2013 ie, use an\narbitrary application to pipe to tweebot which can tweet it out.</p>\n</div>\n<div id=\"following\">\n<h3>Following</h3>\n<p>To automatically follow new followers, and unfollow unfollowers:</p>\n<pre>tweebot --keys {twitter-key-file} follow --auto\n</pre>\n</div>\n</div>\n<div id=\"library-usage\">\n<h2>Library usage</h2>\n<p>There are two basic ways you can use this in a library: you can either\nimport the <tt>TwitterClient</tt> class and control that from your\napplication, or you can import tweebot\u2019s <tt>main</tt> function and provide\nit with a callback that will generate your status updates.</p>\n<div id=\"tweebot-main\">\n<h3>tweebot.main</h3>\n<p>If you provide a callable to <tt>tweebot.main</tt>, then tweebot will use it\nas a callback when the main function is called. The main method\nimplements all the command-line tweebot arguments, the difference is\nthat if the program is asked to tweet an empty status, it will instead\ntweet the results of your method, called with no arguments. If you tweet\na non-empty status, that string will be handed to your method, and the\nresult will be tweeted:</p>\n<pre>mytweebot --keys {twitter-key-file} tweet -vv\n</pre>\n<p>Thus, this provides a simple way to define new twitter-bots: define a\nmethod of the form:</p>\n<pre>def my_tweet_builder(status, directives):\n    new_status = do_something()\n    return new_status\n    # or\n    return new_status, new_directives\n</pre>\n<p>This can either ignore the status it\u2019s given, or use it in any way you\nwish. If you have multiple bots that modify the status when given, then\nyou could run them independently, or pipe them together in novel ways\nwithout recompiling \u2013 your choice.</p>\n</div>\n<div id=\"direct-client-use\">\n<h3>Direct client use</h3>\n<p>If you want your application to be in control, you can simply import\n<tt>tweebot.TwitterClient</tt> and use its methods directly. This includes\ndirect API access (via tweepy) to twitter, and few custom, convenience\nmethods.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2139541, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "5d64d9cfafba8bc4ed4a8988d68552b9", "sha256": "e8cd5db3c7de3b9b5e35d82d10204039c04b1f10b2b11d98c56d7142a07a83cd"}, "downloads": -1, "filename": "tweebot-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5d64d9cfafba8bc4ed4a8988d68552b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6329, "upload_time": "2016-05-29T06:13:12", "upload_time_iso_8601": "2016-05-29T06:13:12.780100Z", "url": "https://files.pythonhosted.org/packages/3d/a0/5c9c09435659ade139b8fd99b2808dd269b6287a5475481bc625d16a11c7/tweebot-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "dfbb04798aad612dbb2bbd180dfb96cb", "sha256": "2c06d7648bc93c98c14cfb9cdac756fc6c38d10d47608889e7ad7d105829cc8a"}, "downloads": -1, "filename": "tweebot-0.1.2.tar.gz", "has_sig": false, "md5_digest": "dfbb04798aad612dbb2bbd180dfb96cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5029, "upload_time": "2016-05-29T06:19:24", "upload_time_iso_8601": "2016-05-29T06:19:24.456716Z", "url": "https://files.pythonhosted.org/packages/e7/c1/154d1562c21d544a6567ea6ad7dd08662129365740383a085e8c273e3e02/tweebot-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d6850015adc39a391f37b6e923e24168", "sha256": "24ad28730ee744d25f9a60c2673ee00746f2f3c2fa08924fe0f62efbea5ddfd6"}, "downloads": -1, "filename": "tweebot-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d6850015adc39a391f37b6e923e24168", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7972, "upload_time": "2016-05-29T15:40:13", "upload_time_iso_8601": "2016-05-29T15:40:13.017270Z", "url": "https://files.pythonhosted.org/packages/50/7d/9f6ba3e0b43064fdce416e13c7d8ce80ac1f66d73e1a3a6c8ab04ca374b8/tweebot-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "6cf8cdaf9db97bf353f2d1013eb30b17", "sha256": "0cb906609c8d941577147c91fb5edf4a279b6eb15ed794d9302db199b8a1ccdf"}, "downloads": -1, "filename": "tweebot-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6cf8cdaf9db97bf353f2d1013eb30b17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7873, "upload_time": "2016-05-29T15:49:24", "upload_time_iso_8601": "2016-05-29T15:49:24.077146Z", "url": "https://files.pythonhosted.org/packages/76/df/0d1d1d6130da126dedd65a0b803ec891f01322b8308d544b900ba20a4fb7/tweebot-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6cf8cdaf9db97bf353f2d1013eb30b17", "sha256": "0cb906609c8d941577147c91fb5edf4a279b6eb15ed794d9302db199b8a1ccdf"}, "downloads": -1, "filename": "tweebot-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6cf8cdaf9db97bf353f2d1013eb30b17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7873, "upload_time": "2016-05-29T15:49:24", "upload_time_iso_8601": "2016-05-29T15:49:24.077146Z", "url": "https://files.pythonhosted.org/packages/76/df/0d1d1d6130da126dedd65a0b803ec891f01322b8308d544b900ba20a4fb7/tweebot-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:44:10 2020"}