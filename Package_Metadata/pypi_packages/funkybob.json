{"info": {"author": "Andrea Corbellini", "author_email": "corbellini.andrea@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Random name generator in Python\n\nfunkybob is a Python library for generating Docker-style random names,\nlike these:\n\n    ecstatic_ritchie, kind_beaver, sharp_heisenberg, angry_nightingale, ...\n\nfunkybob supports generating names preceeded by an arbirary number of\nadjectives, in order to increase the number of unique names that can\nbe generated:\n\n    Random names with no adjectives:\n        swirles, khorana, blackwell, ...\n\n    Random names preceeded by an adjective:\n        ecstatic_ritchie, kind_beaver, sharp_heisenberg, ...\n\n    Random names preceeded by two adjectives:\n        admiring_dazzling_noether, thirsty_wonderful_agnesi, silly_wizardly_feynman, ...\n\n    Random names preceeded by three adjectives:\n        cranky_goofy_hopeful_wright, competent_jolly_suspicious_kare, cocky_competent_gifted_yalow, ...\n\nWhen using more than one adjective, funkybob ensures that two names with the\nsame set of adjectives cannot occur, even if the order is different. So, for\nexample, if the name `inspiring_stupefied_payne` was generated, then you can\nbe sure that the name `stupefied_inspiring_payne` won't be generated later.\nThis makes names much more easier to distinguish and less likely to generate\nconfusion.\n\n\n## Generators\n\nfunkybob ships three different name generators:\n\n* **SimpleNameGenerator**: this provides a deterministic sequence of names --\n  no randomness involved. This will return duplicate names once all\n  combinations have been yielded. Useful if all you care about is performance.\n\n* **RandomNameGenerator**: returns randomly generated names. It may return\n  duplicate names at any point.\n\n* **UniqueRandomNameGenerator**: returns randomly generated names, but unlike\n  RandomNameGenerator, no duplicates are returned. Unlike the other two\n  generators, this one has a limited size and will stop yielding values once\n  all unique names have been returned.\n\nThis table sumarizes the features of all three generators:\n\n| Generator                 | Infinite | Random | Duplicates |\n|---------------------------|----------|--------|------------|\n| SimpleNameGenerator       | Yes      | No     | Yes        |\n| RandomNameGenerator       | Yes      | Yes    | Yes        |\n| UniqueRandomNameGenerator | No       | Yes    | No         |\n\n\n## Usage\n\nAll three generators are iterables, which means that you can simply use\n`iter()` and `next()` on them in order to retrieve names:\n\n```python\n>>> import funkybob\n>>> generator = funkybob.RandomNameGenerator()\n>>> it = iter(generator)\n>>> next(it)\n'practical_hoover'\n>>> next(it)\n'stupefied_ramanujan'\n>>> next(it)\n'zealous_aryabhata'\n```\n\nYou can pass the `members` and `separator` parameters to change the number of\nadjectives or the formatting of names:\n\n```python\n>>> # This will generate names with 3 members (2 adjectives + 1 last name),\n>>> # separated by a colon\n>>> generator = funkybob.RandomNameGenerator(members=3, separator=':')\n>>> it = iter(generator)\n>>> next(it)\n'friendly:hopeful:neumann'\n>>> next(it)\n'admiring:trusting:montalcini'\n>>> next(it)\n'practical:suspicious:blackwell'\n```\n\nGenerators have an `unique_count` attribute that you can use to check\nthe number of unique names that can be generated:\n\n```python\n>>> generator.unique_count\n740094\n```\n\n\n### UniqueRandomNameGenerator\n\nIn addition to all of the above, UniqueRandomNameGenerator privides a\n[sequence](https://docs.python.org/3/glossary.html#term-sequence)-like\ninterfance, which means, for example, that you can use indexing or the\n`len()` method (which is the same as accessing the `unique_count`\nattribute):\n\n```python\n>>> generator = funkybob.UniqueRandomNameGenerator()\n>>> generator[0]\n'xenodochial_yalow'\n>>> generator[1]\n'kind_mccarthy'\n>>> generator[2]\n'happy_hawking'\n>>> len(generator)\n16089\n```\n\nYou can increase the number of `members` in order to increase the size,\nat the expense of having longer names.\n\nUniqueRandomNameGenerator also supports an additional parameter: `seed`.\nThis can be used to initialize the pseudo-random generator. If you pass\nalways the same value, the same sequence of names will be generated. This\ncan be useful in tests when you need predictable names.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andreacorbellini/funkybob", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "funkybob", "package_url": "https://pypi.org/project/funkybob/", "platform": "", "project_url": "https://pypi.org/project/funkybob/", "project_urls": {"Homepage": "https://github.com/andreacorbellini/funkybob"}, "release_url": "https://pypi.org/project/funkybob/2018.5.1/", "requires_dist": null, "requires_python": "", "summary": "", "version": "2018.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Random name generator in Python</h1>\n<p>funkybob is a Python library for generating Docker-style random names,\nlike these:</p>\n<pre><code>ecstatic_ritchie, kind_beaver, sharp_heisenberg, angry_nightingale, ...\n</code></pre>\n<p>funkybob supports generating names preceeded by an arbirary number of\nadjectives, in order to increase the number of unique names that can\nbe generated:</p>\n<pre><code>Random names with no adjectives:\n    swirles, khorana, blackwell, ...\n\nRandom names preceeded by an adjective:\n    ecstatic_ritchie, kind_beaver, sharp_heisenberg, ...\n\nRandom names preceeded by two adjectives:\n    admiring_dazzling_noether, thirsty_wonderful_agnesi, silly_wizardly_feynman, ...\n\nRandom names preceeded by three adjectives:\n    cranky_goofy_hopeful_wright, competent_jolly_suspicious_kare, cocky_competent_gifted_yalow, ...\n</code></pre>\n<p>When using more than one adjective, funkybob ensures that two names with the\nsame set of adjectives cannot occur, even if the order is different. So, for\nexample, if the name <code>inspiring_stupefied_payne</code> was generated, then you can\nbe sure that the name <code>stupefied_inspiring_payne</code> won't be generated later.\nThis makes names much more easier to distinguish and less likely to generate\nconfusion.</p>\n<h2>Generators</h2>\n<p>funkybob ships three different name generators:</p>\n<ul>\n<li>\n<p><strong>SimpleNameGenerator</strong>: this provides a deterministic sequence of names --\nno randomness involved. This will return duplicate names once all\ncombinations have been yielded. Useful if all you care about is performance.</p>\n</li>\n<li>\n<p><strong>RandomNameGenerator</strong>: returns randomly generated names. It may return\nduplicate names at any point.</p>\n</li>\n<li>\n<p><strong>UniqueRandomNameGenerator</strong>: returns randomly generated names, but unlike\nRandomNameGenerator, no duplicates are returned. Unlike the other two\ngenerators, this one has a limited size and will stop yielding values once\nall unique names have been returned.</p>\n</li>\n</ul>\n<p>This table sumarizes the features of all three generators:</p>\n<table>\n<thead>\n<tr>\n<th>Generator</th>\n<th>Infinite</th>\n<th>Random</th>\n<th>Duplicates</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SimpleNameGenerator</td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>RandomNameGenerator</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>UniqueRandomNameGenerator</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr></tbody></table>\n<h2>Usage</h2>\n<p>All three generators are iterables, which means that you can simply use\n<code>iter()</code> and <code>next()</code> on them in order to retrieve names:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">funkybob</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"n\">funkybob</span><span class=\"o\">.</span><span class=\"n\">RandomNameGenerator</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n<span class=\"s1\">'practical_hoover'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n<span class=\"s1\">'stupefied_ramanujan'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n<span class=\"s1\">'zealous_aryabhata'</span>\n</pre>\n<p>You can pass the <code>members</code> and <code>separator</code> parameters to change the number of\nadjectives or the formatting of names:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># This will generate names with 3 members (2 adjectives + 1 last name),</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># separated by a colon</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"n\">funkybob</span><span class=\"o\">.</span><span class=\"n\">RandomNameGenerator</span><span class=\"p\">(</span><span class=\"n\">members</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">':'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n<span class=\"s1\">'friendly:hopeful:neumann'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n<span class=\"s1\">'admiring:trusting:montalcini'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n<span class=\"s1\">'practical:suspicious:blackwell'</span>\n</pre>\n<p>Generators have an <code>unique_count</code> attribute that you can use to check\nthe number of unique names that can be generated:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">unique_count</span>\n<span class=\"mi\">740094</span>\n</pre>\n<h3>UniqueRandomNameGenerator</h3>\n<p>In addition to all of the above, UniqueRandomNameGenerator privides a\n<a href=\"https://docs.python.org/3/glossary.html#term-sequence\" rel=\"nofollow\">sequence</a>-like\ninterfance, which means, for example, that you can use indexing or the\n<code>len()</code> method (which is the same as accessing the <code>unique_count</code>\nattribute):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"n\">funkybob</span><span class=\"o\">.</span><span class=\"n\">UniqueRandomNameGenerator</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">generator</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"s1\">'xenodochial_yalow'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">generator</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"s1\">'kind_mccarthy'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">generator</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"s1\">'happy_hawking'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">)</span>\n<span class=\"mi\">16089</span>\n</pre>\n<p>You can increase the number of <code>members</code> in order to increase the size,\nat the expense of having longer names.</p>\n<p>UniqueRandomNameGenerator also supports an additional parameter: <code>seed</code>.\nThis can be used to initialize the pseudo-random generator. If you pass\nalways the same value, the same sequence of names will be generated. This\ncan be useful in tests when you need predictable names.</p>\n\n          </div>"}, "last_serial": 3841730, "releases": {"2018.5.1": [{"comment_text": "", "digests": {"md5": "13f81b8729a35fe9bc44a5c33548f1d3", "sha256": "e61b741c1d6f63a97506c30c48b74a166fb1640f4192515b92fa102e7d252987"}, "downloads": -1, "filename": "funkybob-2018.5.1.tar.gz", "has_sig": false, "md5_digest": "13f81b8729a35fe9bc44a5c33548f1d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6713, "upload_time": "2018-05-07T18:05:53", "upload_time_iso_8601": "2018-05-07T18:05:53.824508Z", "url": "https://files.pythonhosted.org/packages/e1/7b/594bef6acaaeb80acd53cf7e3e81cf9dfb6b87515f6d1850623f8dc8440d/funkybob-2018.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "13f81b8729a35fe9bc44a5c33548f1d3", "sha256": "e61b741c1d6f63a97506c30c48b74a166fb1640f4192515b92fa102e7d252987"}, "downloads": -1, "filename": "funkybob-2018.5.1.tar.gz", "has_sig": false, "md5_digest": "13f81b8729a35fe9bc44a5c33548f1d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6713, "upload_time": "2018-05-07T18:05:53", "upload_time_iso_8601": "2018-05-07T18:05:53.824508Z", "url": "https://files.pythonhosted.org/packages/e1/7b/594bef6acaaeb80acd53cf7e3e81cf9dfb6b87515f6d1850623f8dc8440d/funkybob-2018.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:39 2020"}