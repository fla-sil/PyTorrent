{"info": {"author": "5Minds IT-Solutions GmbH & Co. KG", "author_email": "processengine@5minds.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# ProcessEngine mittels Python verwenden\n\nWenn es darum geht mit Python Prozess zu starten bzw. zu kontrollieren, *External Task* zu verarbeiten \nund Benutzer-Tasks auszuf\u00fchren, dann ist der `process_engine_client`-Client richtig. In dieser README \nwird die Verwendung der unterschiedliche Aspekte anhand von Beispielen gezeigt:\n\n- [Vorbereitung der Umgebung](#vorbereitung-der-umgebung)\n- [Prozess starten](#prozesss-starten)\n- [*External Task* verarbeiten](#external-task-verarbeiten)\n- TODO: *User Task* bearbeiten\n- TODO: *Event* aus der Prozessengine verarbeiten\n- TODO: Verweis auf API-Dokumentation hinzuf\u00fcgen\n\nDie Erweiterung der Client wird dagegen in [CONTRIBUTION.MD](CONTRIBUTION.MD) erkl\u00e4rt.\n\n## Vorbereitung der Umgebung\n\n### Installation des *BPMN-Studio*\n\nDie einfachster Version mit der Interaktion von Python und der ProzessEngine zu starten,\nist die Installation des *BPMN-Studio*, da es die Entwicklung von BPMN-Prozess unterst\u00fctzt\nund eine vorbereitete ProzessEngine mitbringt, die f\u00fcr die ersten Schritte ausreichend ist.\n\n### Prozess erstellen bzw. Beispiel verwenden\n\nUm den ersten Prozess nicht erstellen zu m\u00fcssen, ist der Prozess *[Hello World](samples/bpmn_models/hello_world.bpmn)* \nvorhanden, dieser muss in das *BPMN-Studio* geladen werden.\n\n![Prozess laden](docs/open_process.png)\n\n### Prozess auf die ProzessEngine ver\u00f6ffentlichen\n\nUm den Prozess verwenden zu k\u00f6nnen, ist es notwendig, dass\ndieser auf doe ProzessEngine ver\u00f6ffentlicht worden ist. Dazu ist es notwendig, den Prozess zu \u00f6ffenen (1) und anschlie\u00dfend auf die ProzessEngine zu ver\u00f6ffentlichen (2).\n\n![Prozess ver\u00f6ffentlichen](docs/deploy_process.png)\n\nNachdem der Prozess ver\u00f6ffenticht w\u00fcrde, kann er mittels Python gestartet werden.\n\n![Prozess ver\u00f6ffentlicht](docs/deployed_process.png)\n\n## Prozess starten\n\nUm einen Prozess zu startet ist die Prozess-Id (hier: `hello_world`) und das Start-Event (hier: `the_start_event`) notwendig und die URL (hier: `http://localhost:56000`) unter der die ProzessEngine zu erreichen ist. Nachdem die Informationen bekannt sind, kann der Prozess mit dem entsprechenden angepasseten Script mit Hilfe von Python gestartet werden.\n\n### Beispiel mit nicht blockierendem Client\n\n```python\nimport logging\n\nfrom process_engine_client.process_control import ProcessControlClient\n\nlogger = logging.getLogger(__name__)\n\ndef main(process_engine_url):\n    client = ProcessControlClient(process_engine_url)\n    result = client.start_process_instance('hello_world', 'the_start_event')\n\n    logger.info(f\"Started process instance with result {result}\")\n\nif __name__ == '__main__':\n    current_process_engine = 'http://localhost:56000'\n\n    format_template = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    level = logging.DEBUG\n    logging.basicConfig(level=level, format=format_template)\n\n    main(current_process_engine)\n```\n\n### Beispiel mit blockierendem Client\n\n```python\nimport logging\n\nfrom process_engine_client.process_control import ProcessControlClient\n\nlogger = logging.getLogger(__name__)\n\ndef main(process_engine_url):\n    client = ProcessControlClient(process_engine_url)\n    result = client.start_process_instance('hello_world', \n        'the_start_event',\n        'the_end_event', \n        start_callback=StartCallbackType.ON_ENDEVENT_REACHED\n    )\n\n    logger.info(f\"Started process instance with result {result}\")\n\nif __name__ == '__main__':\n    current_process_engine = 'http://localhost:56000'\n\n    format_template = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    level = logging.DEBUG\n    logging.basicConfig(level=level, format=format_template)\n\n    main(current_process_engine)\n```\n\n## *External Task* verarbeiten\n\nIm Beispiel-Prozess ist bereit eine ServiceTask als *External Task* konfiguriert. \n\nF\u00fcr die Verwendung des *External Task* muss ein Topic (hier: `SampleExternalTask`) festgelegt werden und die URL der ProzessEngine (hier: `http://localhost:56000`) bekannt sein.\nNachdem die Informationen bekannt sind, kann der *External Task* mit dem angepassten Script abgearbeitet werden.\n\n### Beispiel mit einem Parameter f\u00fcr den Worker *_worker*\n\n```python\nimport logging\n\nfrom process_engine_client.external_task import ExternalTaskClient\n\nlogger = logging.getLogger(__name__)\n\ndef _worker(payload):\n    logger.debug(\"so some work\")\n    logger.debug(payload)\n    logger.debug(\"some worker done.\")\n\n    return {'some': 'result'}\n\ndef main(process_engine_url):\n    client = ExternalTaskClient(process_engine_url)\n\n    client.subscribe_to_external_task_for_topic(\"SampleExternalTask\", _worker)\n\n    client.start()\n\nif __name__ == '__main__':\n    current_process_engine = 'http://localhost:56000'\n\n    format_template = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    level = logging.INFO #logging.DEBUG\n    logging.basicConfig(level=level, format=format_template)\n\n    main(current_process_engine)\n```\n\n### Beispiel mit einem weiteren Parameter f\u00fcr den Worker *_worker*\n\n```python\nimport logging\n\nfrom process_engine_client.external_task import ExternalTaskClient\n\nlogger = logging.getLogger(__name__)\n\ndef _worker(payload, task):\n    logger.debug(\"so some work\")\n    logger.info(f\"payload: {payload} for task {task}\")\n    logger.debug(\"some worker done.\")\n\n    return {'some': 'result'}\n\ndef main(process_engine_url):\n    client = ExternalTaskClient(process_engine_url)\n\n    client.subscribe_to_external_task_for_topic(\"SampleExternalTask\", _worker)\n\n    client.start()\n\nif __name__ == '__main__':\n    current_process_engine = 'http://localhost:56000'\n\n    format_template = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    level = logging.INFO #logging.DEBUG\n    logging.basicConfig(level=level, format=format_template)\n\n    main(current_process_engine)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/moellenbeck/process_engine_client", "keywords": "workflow-engine processengine client bpmn", "license": "", "maintainer": "", "maintainer_email": "", "name": "process-engine-client", "package_url": "https://pypi.org/project/process-engine-client/", "platform": "", "project_url": "https://pypi.org/project/process-engine-client/", "project_urls": {"Homepage": "https://github.com/moellenbeck/process_engine_client"}, "release_url": "https://pypi.org/project/process-engine-client/0.3/", "requires_dist": null, "requires_python": "", "summary": "A Client for an process-engine.io hosted workflow engine.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ProcessEngine mittels Python verwenden</h1>\n<p>Wenn es darum geht mit Python Prozess zu starten bzw. zu kontrollieren, <em>External Task</em> zu verarbeiten\nund Benutzer-Tasks auszuf\u00fchren, dann ist der <code>process_engine_client</code>-Client richtig. In dieser README\nwird die Verwendung der unterschiedliche Aspekte anhand von Beispielen gezeigt:</p>\n<ul>\n<li><a href=\"#vorbereitung-der-umgebung\" rel=\"nofollow\">Vorbereitung der Umgebung</a></li>\n<li><a href=\"#prozesss-starten\" rel=\"nofollow\">Prozess starten</a></li>\n<li><a href=\"#external-task-verarbeiten\" rel=\"nofollow\"><em>External Task</em> verarbeiten</a></li>\n<li>TODO: <em>User Task</em> bearbeiten</li>\n<li>TODO: <em>Event</em> aus der Prozessengine verarbeiten</li>\n<li>TODO: Verweis auf API-Dokumentation hinzuf\u00fcgen</li>\n</ul>\n<p>Die Erweiterung der Client wird dagegen in <a href=\"CONTRIBUTION.MD\" rel=\"nofollow\">CONTRIBUTION.MD</a> erkl\u00e4rt.</p>\n<h2>Vorbereitung der Umgebung</h2>\n<h3>Installation des <em>BPMN-Studio</em></h3>\n<p>Die einfachster Version mit der Interaktion von Python und der ProzessEngine zu starten,\nist die Installation des <em>BPMN-Studio</em>, da es die Entwicklung von BPMN-Prozess unterst\u00fctzt\nund eine vorbereitete ProzessEngine mitbringt, die f\u00fcr die ersten Schritte ausreichend ist.</p>\n<h3>Prozess erstellen bzw. Beispiel verwenden</h3>\n<p>Um den ersten Prozess nicht erstellen zu m\u00fcssen, ist der Prozess <em><a href=\"samples/bpmn_models/hello_world.bpmn\" rel=\"nofollow\">Hello World</a></em>\nvorhanden, dieser muss in das <em>BPMN-Studio</em> geladen werden.</p>\n<p><img alt=\"Prozess laden\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a0da309525ddece349169b67b7bf2af65b329a7/646f63732f6f70656e5f70726f636573732e706e67\"></p>\n<h3>Prozess auf die ProzessEngine ver\u00f6ffentlichen</h3>\n<p>Um den Prozess verwenden zu k\u00f6nnen, ist es notwendig, dass\ndieser auf doe ProzessEngine ver\u00f6ffentlicht worden ist. Dazu ist es notwendig, den Prozess zu \u00f6ffenen (1) und anschlie\u00dfend auf die ProzessEngine zu ver\u00f6ffentlichen (2).</p>\n<p><img alt=\"Prozess ver\u00f6ffentlichen\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86f08ad678ab57cb0adebd51f08faa324c1bb117/646f63732f6465706c6f795f70726f636573732e706e67\"></p>\n<p>Nachdem der Prozess ver\u00f6ffenticht w\u00fcrde, kann er mittels Python gestartet werden.</p>\n<p><img alt=\"Prozess ver\u00f6ffentlicht\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b96f561f4207ec5970855a9e35e69382ffcba009/646f63732f6465706c6f7965645f70726f636573732e706e67\"></p>\n<h2>Prozess starten</h2>\n<p>Um einen Prozess zu startet ist die Prozess-Id (hier: <code>hello_world</code>) und das Start-Event (hier: <code>the_start_event</code>) notwendig und die URL (hier: <code>http://localhost:56000</code>) unter der die ProzessEngine zu erreichen ist. Nachdem die Informationen bekannt sind, kann der Prozess mit dem entsprechenden angepasseten Script mit Hilfe von Python gestartet werden.</p>\n<h3>Beispiel mit nicht blockierendem Client</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">process_engine_client.process_control</span> <span class=\"kn\">import</span> <span class=\"n\">ProcessControlClient</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">process_engine_url</span><span class=\"p\">):</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ProcessControlClient</span><span class=\"p\">(</span><span class=\"n\">process_engine_url</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">start_process_instance</span><span class=\"p\">(</span><span class=\"s1\">'hello_world'</span><span class=\"p\">,</span> <span class=\"s1\">'the_start_event'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Started process instance with result </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">current_process_engine</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost:56000'</span>\n\n    <span class=\"n\">format_template</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(name)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span>\n    <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">format_template</span><span class=\"p\">)</span>\n\n    <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">current_process_engine</span><span class=\"p\">)</span>\n</pre>\n<h3>Beispiel mit blockierendem Client</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">process_engine_client.process_control</span> <span class=\"kn\">import</span> <span class=\"n\">ProcessControlClient</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">process_engine_url</span><span class=\"p\">):</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ProcessControlClient</span><span class=\"p\">(</span><span class=\"n\">process_engine_url</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">start_process_instance</span><span class=\"p\">(</span><span class=\"s1\">'hello_world'</span><span class=\"p\">,</span> \n        <span class=\"s1\">'the_start_event'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'the_end_event'</span><span class=\"p\">,</span> \n        <span class=\"n\">start_callback</span><span class=\"o\">=</span><span class=\"n\">StartCallbackType</span><span class=\"o\">.</span><span class=\"n\">ON_ENDEVENT_REACHED</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Started process instance with result </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">current_process_engine</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost:56000'</span>\n\n    <span class=\"n\">format_template</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(name)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span>\n    <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">format_template</span><span class=\"p\">)</span>\n\n    <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">current_process_engine</span><span class=\"p\">)</span>\n</pre>\n<h2><em>External Task</em> verarbeiten</h2>\n<p>Im Beispiel-Prozess ist bereit eine ServiceTask als <em>External Task</em> konfiguriert.</p>\n<p>F\u00fcr die Verwendung des <em>External Task</em> muss ein Topic (hier: <code>SampleExternalTask</code>) festgelegt werden und die URL der ProzessEngine (hier: <code>http://localhost:56000</code>) bekannt sein.\nNachdem die Informationen bekannt sind, kann der <em>External Task</em> mit dem angepassten Script abgearbeitet werden.</p>\n<h3>Beispiel mit einem Parameter f\u00fcr den Worker <em>_worker</em></h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">process_engine_client.external_task</span> <span class=\"kn\">import</span> <span class=\"n\">ExternalTaskClient</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_worker</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"so some work\"</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"some worker done.\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'some'</span><span class=\"p\">:</span> <span class=\"s1\">'result'</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">process_engine_url</span><span class=\"p\">):</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ExternalTaskClient</span><span class=\"p\">(</span><span class=\"n\">process_engine_url</span><span class=\"p\">)</span>\n\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe_to_external_task_for_topic</span><span class=\"p\">(</span><span class=\"s2\">\"SampleExternalTask\"</span><span class=\"p\">,</span> <span class=\"n\">_worker</span><span class=\"p\">)</span>\n\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">current_process_engine</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost:56000'</span>\n\n    <span class=\"n\">format_template</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(name)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span>\n    <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span> <span class=\"c1\">#logging.DEBUG</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">format_template</span><span class=\"p\">)</span>\n\n    <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">current_process_engine</span><span class=\"p\">)</span>\n</pre>\n<h3>Beispiel mit einem weiteren Parameter f\u00fcr den Worker <em>_worker</em></h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">process_engine_client.external_task</span> <span class=\"kn\">import</span> <span class=\"n\">ExternalTaskClient</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_worker</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"so some work\"</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"payload: </span><span class=\"si\">{</span><span class=\"n\">payload</span><span class=\"si\">}</span><span class=\"s2\"> for task </span><span class=\"si\">{</span><span class=\"n\">task</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"some worker done.\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'some'</span><span class=\"p\">:</span> <span class=\"s1\">'result'</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">process_engine_url</span><span class=\"p\">):</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ExternalTaskClient</span><span class=\"p\">(</span><span class=\"n\">process_engine_url</span><span class=\"p\">)</span>\n\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe_to_external_task_for_topic</span><span class=\"p\">(</span><span class=\"s2\">\"SampleExternalTask\"</span><span class=\"p\">,</span> <span class=\"n\">_worker</span><span class=\"p\">)</span>\n\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">current_process_engine</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost:56000'</span>\n\n    <span class=\"n\">format_template</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(name)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span>\n    <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span> <span class=\"c1\">#logging.DEBUG</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">format_template</span><span class=\"p\">)</span>\n\n    <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">current_process_engine</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6453498, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c77232831994739e9eb2946e4a095e0b", "sha256": "4293b8a376e66b7e0129dd846a1ce7ef83ccc909bfd76bd9507a51a4de0ba813"}, "downloads": -1, "filename": "process_engine_client-0.1.tar.gz", "has_sig": false, "md5_digest": "c77232831994739e9eb2946e4a095e0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7537, "upload_time": "2019-12-07T19:01:09", "upload_time_iso_8601": "2019-12-07T19:01:09.731184Z", "url": "https://files.pythonhosted.org/packages/2c/e4/afffd3a8de07247f21ec1fdfdce48f5532f286c6afd9bc504953c0b3415f/process_engine_client-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "cdc6ef4ea88efc1cdb8f1c050d7a75ff", "sha256": "55b6234a792f15da6daa5177a2fa67e25d3df6d67f7fb8096aa6ea6d5ab66803"}, "downloads": -1, "filename": "process_engine_client-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cdc6ef4ea88efc1cdb8f1c050d7a75ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14370, "upload_time": "2019-12-27T15:23:00", "upload_time_iso_8601": "2019-12-27T15:23:00.129869Z", "url": "https://files.pythonhosted.org/packages/52/7c/4b5889d34c453dd380b85a7bddaf2ec555b57d2412d48c5d699db2fc2c47/process_engine_client-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1168987446de7170f36fecc66445b887", "sha256": "f2c4c94a8263e99d4136bc60bdaf99753e1119f7a2b98b8d33ce21c60d12c55d"}, "downloads": -1, "filename": "process_engine_client-0.2.tar.gz", "has_sig": false, "md5_digest": "1168987446de7170f36fecc66445b887", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10842, "upload_time": "2019-12-27T15:23:01", "upload_time_iso_8601": "2019-12-27T15:23:01.802495Z", "url": "https://files.pythonhosted.org/packages/24/ff/5a8247d001ad2c532fa15ce49c015e71c17be966fff227b05035124e706e/process_engine_client-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "c5e727eb562408001d1d84c4660ff7d6", "sha256": "4a1ad591ac99edab5cd020dc3df74e3c8fd9ef3ae12f49bcb79bd4b1f105356c"}, "downloads": -1, "filename": "process_engine_client-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c5e727eb562408001d1d84c4660ff7d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14629, "upload_time": "2020-01-14T18:47:03", "upload_time_iso_8601": "2020-01-14T18:47:03.730133Z", "url": "https://files.pythonhosted.org/packages/1a/ec/d642291723c58e79842bfdf645020a70cd6962bee364917069c5cdc34517/process_engine_client-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23aef068e603bc0a6f4f26522aed5981", "sha256": "3c168005858f7f11f120ec918be47d21d3cf809cbd93118b44d6bc46ebaa16ac"}, "downloads": -1, "filename": "process_engine_client-0.3.tar.gz", "has_sig": false, "md5_digest": "23aef068e603bc0a6f4f26522aed5981", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11306, "upload_time": "2020-01-14T18:47:05", "upload_time_iso_8601": "2020-01-14T18:47:05.937861Z", "url": "https://files.pythonhosted.org/packages/5d/65/9816bd2df2c67f90b8e5cab9417a1f13f5dfc08917bea986635093e0113f/process_engine_client-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c5e727eb562408001d1d84c4660ff7d6", "sha256": "4a1ad591ac99edab5cd020dc3df74e3c8fd9ef3ae12f49bcb79bd4b1f105356c"}, "downloads": -1, "filename": "process_engine_client-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c5e727eb562408001d1d84c4660ff7d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14629, "upload_time": "2020-01-14T18:47:03", "upload_time_iso_8601": "2020-01-14T18:47:03.730133Z", "url": "https://files.pythonhosted.org/packages/1a/ec/d642291723c58e79842bfdf645020a70cd6962bee364917069c5cdc34517/process_engine_client-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23aef068e603bc0a6f4f26522aed5981", "sha256": "3c168005858f7f11f120ec918be47d21d3cf809cbd93118b44d6bc46ebaa16ac"}, "downloads": -1, "filename": "process_engine_client-0.3.tar.gz", "has_sig": false, "md5_digest": "23aef068e603bc0a6f4f26522aed5981", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11306, "upload_time": "2020-01-14T18:47:05", "upload_time_iso_8601": "2020-01-14T18:47:05.937861Z", "url": "https://files.pythonhosted.org/packages/5d/65/9816bd2df2c67f90b8e5cab9417a1f13f5dfc08917bea986635093e0113f/process_engine_client-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:55 2020"}