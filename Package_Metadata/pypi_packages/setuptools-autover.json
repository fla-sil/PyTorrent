{"info": {"author": "Janne R\u00f6nkk\u00f6", "author_email": "janne.ronkko@iki.fi", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: System :: Archiving :: Packaging"], "description": "==================\nsetuptools_autover\n==================\n\nAbout\n=====\n\nA package allowing generating PEP-440 compatible version numbers from version\ncontrol.\n\nCurrently only git is supported but it is possible to add support for other\nversion control systems.\n\nThe goal of the project is to provide reasonable defaults and an easy way to\ncustomize how version numbers are generated from version control system.\n\nThe code is currently considered stable and ready for production use. The API\nshould not change in such way that the change would break current usage.\n\nUsage\n=====\n\nsetup.py\n--------\n\n1. Add *setuptools_autover* to *setup_requires* argument\n2. Set *use_autover* argument\n    The value can be mapping, (a dict, for example) containing configuration or\n    any Python value that evaluates as True.\n\nUse with default settings\n\n.. code:: python\n\n    import setuptools\n\n    setup(\n        name='example-package',\n        use_autover=True,\n        setup_requires=['setuptools_autover'],\n    )\n\nUse with custom settings\n\n.. code:: python\n\n    import setuptools\n\n    setup(\n        name='example-package',\n        use_autover={\n          'root_version': '0.0',\n          'parse_tag': lambda tag: tag.lstrip('v'),\n          'create_version': lambda ver: '{}.post{}'.format(ver.latest_version, ver.distance),\n        },\n        setup_requires=['setuptools_autover'],\n    )\n\nNote that if the *setup* function is called for source tree not having version info available,\n*setuptools_autover.RevisionInfoNotFoundError* is raised.\n\nFrom Python Code\n----------------\n\n.. code:: python\n\n    from setuptools_autover import get_version\n\n    # Using default settings\n    version = get_version()\n\n    # Using custom settings\n    version = get_version(root_version='0.0')\n\nVersion Number Generation\n=========================\n\nIf setup.py is not run on code in a repository, version information is read from *PKG-INFO* to\nallow *sdist* to work.\n\nWhen running setup.py on code in a repository, *setuptools_autover.RevisionInfo* object is filled\nbased on current revision.\n\nIf latest tag is available, latest release version is read from it by using *parse_tag*\nfunction. Otherwise *root_version* is used as latest version and distance is the number\nof commits since the start of the commit history.\n\nThe version string is generated based on the above info using the *create_version* function.\n\nConfiguration\n=============\n\nThe *use_autover* argument can be used for configuring version generation behaviour\nby proving the configuration as mapping.\n\n**root_version**\n  If repository does not contain any tags, this string is used.\n\n  Default value: :code:`'0'`\n\n**read_revision_info**\n  Callable used for reading revision information from VCS (or other source).\n\n  The function should not take any arguments and should return instance of *setuptools_autover.RevisionInfo*\n  or None in case revision info is not available.\n\n  By default :code:`setuptools_autover.GitRevisionInfoReader` instance with default arguments is used.\n\n**parse_tag**\n  Function parsing version string from a tag.\n\n  The function takes one string argument (the tag) and returns version extracted from\n  the tag as string\n\n  Default value: :code:`lambda tag: tag`\n\n**create_version**\n  Function creating version string from *setuptools_autover.VersionInfo*.\n\n  The function takes one argument of type *setuptools_autover.VersionInfo*. \n\n  Default value: :code:`setuptools_autover.pep440.create_post_with_dev`\n\nConfiguration matching the default settings:\n\n.. code:: python\n\n    {\n        'root_version': '0',\n        'read_revision_info': setuptools_autover.GitRevisionInfoReader(),\n        'parse_tag': lambda tag: tag,\n        'create_version': setuptools_autover.pep440.create_post_with_dev,\n    }\n\nAPI\n===\n\nFunctions\n---------\n\n\n**setuptools_autover.config_to_get_version_kwargs(config)**\n  Return kwargs dictionary for *setuptools_autover.get_version* based on the given configuration.\n\n**setuptools_autover.get_version(root_version='0', parse_tag=lambda tag: tag, create_version=pep440.create_post_with_dev)**\n  The arguments are the same as the configurations passed for *use_autover* argument from *setup.py*\n\n  Return generated version\n\n**setuptools_autover.pep440.create_post_with_dev**\n  Create version that uses *post* and *dev* parts for version between releases.\n\n  The version is created using the following rules:\n\n  - :code:`distance == 0 and not dirty` \u21d2 :code:`{latest_version}`\n      Released version\n  - :code:`distance == 0 and dirty` \u21d2 :code:`{latest_version+dirty}`\n      Released version with modified source tree\n  - :code:`distance > 0 and not dirty` \u21d2 :code:`{latest_version}.post0.dev{distance}+{commit}`\n      Released version\n  - :code:`distance > 0 and dirty` \u21d2 :code:`{latest_version+dirty}.post0.dev{distance}+{commit}-dirty`\n      Released version with modified source tree\n\nClasses\n-------\n\nsetuptools_autover.GitRevisionInfoReader\n****************************************\n\nRead revision info from Git repository.\n\nConstructor arguments:\n\n**path**\n  Path to repository root. If *None*, current working directory is used.\n\n  Default value: :code:`None`\n\nMembers:\n\n**__call__(self)**\n  Return setuptools_autover.RevisionInfo generated from Git history of *HEAD*.\n\nExceptions\n----------\n\n**setuptools_autover.AutoverError**\n  Base class for exceptions thrown by *setuptools_autover*\n\n**setuptools_autover.InvalidConfigError**\n  The configuration dict is not valid.\n\n**setuptools_autover.RevisionInfoNotFoundError**\n  Version could not be generated because revision info was not found\n\nTypes\n-----\n\n**setuptools_autover.RevisionInfo**\n  Named tuple containing revision info:\n\n  - **latest_tag**: The most recent tag (None if there is no tags before the current revision)\n  - **distance**: Number of commits since the most recent tag (0 if current revision is tagged)\n  - **commit**: Commit identifier for current revision\n  - **dirty**: Is the source tree dirty (not exactly the same as the code in the current revision).\n    If there is no commits, the *lastest_tag* and *commit* should be :code:`None` and dirty should be\n    set to :code:`True`\n\n**setuptools_autover.VersionInfo**\n  Named tuple containing version info:\n\n  - **latest_version**: The most recent version (None if there is no released version before the current revision)\n  - **distance**: Number of commits since the most recent tag (0 if current revision is tagged)\n  - **commit**: Commit identifier for current revision\n  - **dirty**: Is the source tree dirty (not exactly the same as the code in the current revision)\n\n*RevisionInfo* is information returned by VCS readers and is turned into *VersionInfo* using the *parse_tag* function.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/janneronkko/setuptools_autover", "keywords": "setuptools development git version", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "setuptools-autover", "package_url": "https://pypi.org/project/setuptools-autover/", "platform": "", "project_url": "https://pypi.org/project/setuptools-autover/", "project_urls": {"Homepage": "https://github.com/janneronkko/setuptools_autover"}, "release_url": "https://pypi.org/project/setuptools-autover/1.0.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Automatic package version numbering from version control", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>A package allowing generating PEP-440 compatible version numbers from version\ncontrol.</p>\n<p>Currently only git is supported but it is possible to add support for other\nversion control systems.</p>\n<p>The goal of the project is to provide reasonable defaults and an easy way to\ncustomize how version numbers are generated from version control system.</p>\n<p>The code is currently considered stable and ready for production use. The API\nshould not change in such way that the change would break current usage.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"setup-py\">\n<h3>setup.py</h3>\n<ol>\n<li>Add <em>setuptools_autover</em> to <em>setup_requires</em> argument</li>\n<li><dl>\n<dt>Set <em>use_autover</em> argument</dt>\n<dd>The value can be mapping, (a dict, for example) containing configuration or\nany Python value that evaluates as True.</dd>\n</dl>\n</li>\n</ol>\n<p>Use with default settings</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">setuptools</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'example-package'</span><span class=\"p\">,</span>\n    <span class=\"n\">use_autover</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">setup_requires</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'setuptools_autover'</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Use with custom settings</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">setuptools</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'example-package'</span><span class=\"p\">,</span>\n    <span class=\"n\">use_autover</span><span class=\"o\">=</span><span class=\"p\">{</span>\n      <span class=\"s1\">'root_version'</span><span class=\"p\">:</span> <span class=\"s1\">'0.0'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'parse_tag'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s1\">'v'</span><span class=\"p\">),</span>\n      <span class=\"s1\">'create_version'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">ver</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.post</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ver</span><span class=\"o\">.</span><span class=\"n\">latest_version</span><span class=\"p\">,</span> <span class=\"n\">ver</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">),</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">setup_requires</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'setuptools_autover'</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Note that if the <em>setup</em> function is called for source tree not having version info available,\n<em>setuptools_autover.RevisionInfoNotFoundError</em> is raised.</p>\n</div>\n<div id=\"from-python-code\">\n<h3>From Python Code</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">setuptools_autover</span> <span class=\"kn\">import</span> <span class=\"n\">get_version</span>\n\n<span class=\"c1\"># Using default settings</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">get_version</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Using custom settings</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">get_version</span><span class=\"p\">(</span><span class=\"n\">root_version</span><span class=\"o\">=</span><span class=\"s1\">'0.0'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"version-number-generation\">\n<h2>Version Number Generation</h2>\n<p>If setup.py is not run on code in a repository, version information is read from <em>PKG-INFO</em> to\nallow <em>sdist</em> to work.</p>\n<p>When running setup.py on code in a repository, <em>setuptools_autover.RevisionInfo</em> object is filled\nbased on current revision.</p>\n<p>If latest tag is available, latest release version is read from it by using <em>parse_tag</em>\nfunction. Otherwise <em>root_version</em> is used as latest version and distance is the number\nof commits since the start of the commit history.</p>\n<p>The version string is generated based on the above info using the <em>create_version</em> function.</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>The <em>use_autover</em> argument can be used for configuring version generation behaviour\nby proving the configuration as mapping.</p>\n<dl>\n<dt><strong>root_version</strong></dt>\n<dd><p>If repository does not contain any tags, this string is used.</p>\n<p>Default value: <code>'0'</code></p>\n</dd>\n<dt><strong>read_revision_info</strong></dt>\n<dd><p>Callable used for reading revision information from VCS (or other source).</p>\n<p>The function should not take any arguments and should return instance of <em>setuptools_autover.RevisionInfo</em>\nor None in case revision info is not available.</p>\n<p>By default <code>setuptools_autover.GitRevisionInfoReader</code> instance with default arguments is used.</p>\n</dd>\n<dt><strong>parse_tag</strong></dt>\n<dd><p>Function parsing version string from a tag.</p>\n<p>The function takes one string argument (the tag) and returns version extracted from\nthe tag as string</p>\n<p>Default value: <code>lambda tag: tag</code></p>\n</dd>\n<dt><strong>create_version</strong></dt>\n<dd><p>Function creating version string from <em>setuptools_autover.VersionInfo</em>.</p>\n<p>The function takes one argument of type <em>setuptools_autover.VersionInfo</em>.</p>\n<p>Default value: <code>setuptools_autover.pep440.create_post_with_dev</code></p>\n</dd>\n</dl>\n<p>Configuration matching the default settings:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'root_version'</span><span class=\"p\">:</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'read_revision_info'</span><span class=\"p\">:</span> <span class=\"n\">setuptools_autover</span><span class=\"o\">.</span><span class=\"n\">GitRevisionInfoReader</span><span class=\"p\">(),</span>\n    <span class=\"s1\">'parse_tag'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"n\">tag</span><span class=\"p\">,</span>\n    <span class=\"s1\">'create_version'</span><span class=\"p\">:</span> <span class=\"n\">setuptools_autover</span><span class=\"o\">.</span><span class=\"n\">pep440</span><span class=\"o\">.</span><span class=\"n\">create_post_with_dev</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<div id=\"functions\">\n<h3>Functions</h3>\n<dl>\n<dt><strong>setuptools_autover.config_to_get_version_kwargs(config)</strong></dt>\n<dd>Return kwargs dictionary for <em>setuptools_autover.get_version</em> based on the given configuration.</dd>\n<dt><strong>setuptools_autover.get_version(root_version=\u20190\u2019, parse_tag=lambda tag: tag, create_version=pep440.create_post_with_dev)</strong></dt>\n<dd><p>The arguments are the same as the configurations passed for <em>use_autover</em> argument from <em>setup.py</em></p>\n<p>Return generated version</p>\n</dd>\n<dt><strong>setuptools_autover.pep440.create_post_with_dev</strong></dt>\n<dd><p>Create version that uses <em>post</em> and <em>dev</em> parts for version between releases.</p>\n<p>The version is created using the following rules:</p>\n<ul>\n<li><dl>\n<dt><code>distance == 0 and not dirty</code> \u21d2 <code>{latest_version}</code></dt>\n<dd>Released version</dd>\n</dl>\n</li>\n<li><dl>\n<dt><code>distance == 0 and dirty</code> \u21d2 <code>{latest_version+dirty}</code></dt>\n<dd>Released version with modified source tree</dd>\n</dl>\n</li>\n<li><dl>\n<dt><code>distance &gt; 0 and not dirty</code> \u21d2 <code>{latest_version}.post0.dev{distance}+{commit}</code></dt>\n<dd>Released version</dd>\n</dl>\n</li>\n<li><dl>\n<dt><code>distance &gt; 0 and dirty</code> \u21d2 <code>{latest_version+dirty}.post0.dev{distance}+{commit}-dirty</code></dt>\n<dd>Released version with modified source tree</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"classes\">\n<h3>Classes</h3>\n<h3 id=\"setuptools-autover-gitrevisioninforeader\"><span class=\"section-subtitle\">setuptools_autover.GitRevisionInfoReader</span></h3>\n<p>Read revision info from Git repository.</p>\n<p>Constructor arguments:</p>\n<dl>\n<dt><strong>path</strong></dt>\n<dd><p>Path to repository root. If <em>None</em>, current working directory is used.</p>\n<p>Default value: <code>None</code></p>\n</dd>\n</dl>\n<p>Members:</p>\n<dl>\n<dt><strong>__call__(self)</strong></dt>\n<dd>Return setuptools_autover.RevisionInfo generated from Git history of <em>HEAD</em>.</dd>\n</dl>\n</div>\n<div id=\"exceptions\">\n<h3>Exceptions</h3>\n<dl>\n<dt><strong>setuptools_autover.AutoverError</strong></dt>\n<dd>Base class for exceptions thrown by <em>setuptools_autover</em></dd>\n<dt><strong>setuptools_autover.InvalidConfigError</strong></dt>\n<dd>The configuration dict is not valid.</dd>\n<dt><strong>setuptools_autover.RevisionInfoNotFoundError</strong></dt>\n<dd>Version could not be generated because revision info was not found</dd>\n</dl>\n</div>\n<div id=\"types\">\n<h3>Types</h3>\n<dl>\n<dt><strong>setuptools_autover.RevisionInfo</strong></dt>\n<dd><p>Named tuple containing revision info:</p>\n<ul>\n<li><strong>latest_tag</strong>: The most recent tag (None if there is no tags before the current revision)</li>\n<li><strong>distance</strong>: Number of commits since the most recent tag (0 if current revision is tagged)</li>\n<li><strong>commit</strong>: Commit identifier for current revision</li>\n<li><strong>dirty</strong>: Is the source tree dirty (not exactly the same as the code in the current revision).\nIf there is no commits, the <em>lastest_tag</em> and <em>commit</em> should be <code>None</code> and dirty should be\nset to <code>True</code></li>\n</ul>\n</dd>\n<dt><strong>setuptools_autover.VersionInfo</strong></dt>\n<dd><p>Named tuple containing version info:</p>\n<ul>\n<li><strong>latest_version</strong>: The most recent version (None if there is no released version before the current revision)</li>\n<li><strong>distance</strong>: Number of commits since the most recent tag (0 if current revision is tagged)</li>\n<li><strong>commit</strong>: Commit identifier for current revision</li>\n<li><strong>dirty</strong>: Is the source tree dirty (not exactly the same as the code in the current revision)</li>\n</ul>\n</dd>\n</dl>\n<p><em>RevisionInfo</em> is information returned by VCS readers and is turned into <em>VersionInfo</em> using the <em>parse_tag</em> function.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6990584, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "fa8beed8ead0f8a1e9d13b87c9ba6834", "sha256": "1c880820bb2df491d3a884836b2e82687af7079c38da3331002522af883201eb"}, "downloads": -1, "filename": "setuptools_autover-0.1-py3-none-any.whl", "has_sig": true, "md5_digest": "fa8beed8ead0f8a1e9d13b87c9ba6834", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 6870, "upload_time": "2017-07-23T13:22:12", "upload_time_iso_8601": "2017-07-23T13:22:12.226007Z", "url": "https://files.pythonhosted.org/packages/02/60/2398e28b8ae47e8cfa1f891d3306c0c011cfe5fcab0078a6a7909e3ccd87/setuptools_autover-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b99a696c570dcf5abb68915f06b10ea7", "sha256": "f18db8213470af0ca95b9ee9c7749df23a6367b5839f3f67f8b83a37cee82880"}, "downloads": -1, "filename": "setuptools_autover-0.1.tar.gz", "has_sig": true, "md5_digest": "b99a696c570dcf5abb68915f06b10ea7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 5521, "upload_time": "2017-07-23T13:22:21", "upload_time_iso_8601": "2017-07-23T13:22:21.973551Z", "url": "https://files.pythonhosted.org/packages/a1/46/8a08fe3db2d22ac6b707afcadfd9e8ad18acde0d97116dfd48254cf63ec1/setuptools_autover-0.1.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "fafdc6faff3b1e6ad808d66c14362ad6", "sha256": "5c6cc5772c410577a358be11fa707a236342af9749946ddeda704536169c3be2"}, "downloads": -1, "filename": "setuptools_autover-1.0-py3.4.egg", "has_sig": false, "md5_digest": "fafdc6faff3b1e6ad808d66c14362ad6", "packagetype": "bdist_egg", "python_version": "3.4", "requires_python": ">=3.4", "size": 12248, "upload_time": "2018-06-17T10:25:43", "upload_time_iso_8601": "2018-06-17T10:25:43.528323Z", "url": "https://files.pythonhosted.org/packages/25/50/6cd07241fafd5f39222451db2fbc30f7b69630fe38b85c09559c983c4ae0/setuptools_autover-1.0-py3.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e7e7032dbb24c262ea0f5afdff000f8", "sha256": "6784b53dd104819c08cc2d2439d70666f67610a0a387e47e7ff89adbe37c7c3b"}, "downloads": -1, "filename": "setuptools_autover-1.0-py3.5.egg", "has_sig": false, "md5_digest": "3e7e7032dbb24c262ea0f5afdff000f8", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": ">=3.4", "size": 12215, "upload_time": "2018-06-17T10:25:45", "upload_time_iso_8601": "2018-06-17T10:25:45.025926Z", "url": "https://files.pythonhosted.org/packages/e3/20/1f3aa7a7701cf4ec56f4c4e2ee087d855deac67bc05b2cb70e25bb7b2677/setuptools_autover-1.0-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "526c21b3f9c99a604219ef5ff8155cf3", "sha256": "1b97ad749bfdbdf5dd309ce8b0414c412ff6d75b727f2e31f695631fdafb0468"}, "downloads": -1, "filename": "setuptools_autover-1.0-py3.6.egg", "has_sig": false, "md5_digest": "526c21b3f9c99a604219ef5ff8155cf3", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.4", "size": 12038, "upload_time": "2018-06-17T10:25:46", "upload_time_iso_8601": "2018-06-17T10:25:46.459536Z", "url": "https://files.pythonhosted.org/packages/0f/5f/ef2ddc29a4379da4bba15c5d77f3587bd5332f2266ac0473ae0deb455cbb/setuptools_autover-1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ec3bb30e7412f3fade7d810d0579067", "sha256": "f6f2a1018da0c10813aa571e7d867f047e11aaaa2394f126b75173ed56928111"}, "downloads": -1, "filename": "setuptools_autover-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8ec3bb30e7412f3fade7d810d0579067", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 5901, "upload_time": "2018-06-17T10:25:42", "upload_time_iso_8601": "2018-06-17T10:25:42.272611Z", "url": "https://files.pythonhosted.org/packages/5a/43/45c3930ac218e9e576ac868b3a95d3e54676bf33890479c5c0f9ce8cc7c3/setuptools_autover-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "575139b658694e4900d5544d60ccc266", "sha256": "478e50ebbd5056fa0defaa6089ff8c8084dcfbb9d07136ca1430133ff6f0b02a"}, "downloads": -1, "filename": "setuptools_autover-1.0.tar.gz", "has_sig": false, "md5_digest": "575139b658694e4900d5544d60ccc266", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 5508, "upload_time": "2018-06-17T10:25:47", "upload_time_iso_8601": "2018-06-17T10:25:47.802477Z", "url": "https://files.pythonhosted.org/packages/8f/8b/aa1e4f1cf3aaaeace4b64d288b0d9d995a362da8d36e7e8087dd181c1995/setuptools_autover-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8ecb8d51f1f4071c9990414326297fb7", "sha256": "5627631dd28a5b26d4bc7da4ca35770e0a03be43fba0a35374e7d25d45a92765"}, "downloads": -1, "filename": "setuptools_autover-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8ecb8d51f1f4071c9990414326297fb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8848, "upload_time": "2020-04-10T03:37:44", "upload_time_iso_8601": "2020-04-10T03:37:44.664517Z", "url": "https://files.pythonhosted.org/packages/b3/34/dd2d6a776b805e98176687ac8e2e556911d6d5f48715993229b3161929bc/setuptools_autover-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "8fcfe9f9e428dd0fd69fe2036e2a1173", "sha256": "74f99ef522381beed318b77cf9cc31e87a9c63240c02165a1a2033fac0bdec84"}, "downloads": -1, "filename": "setuptools_autover-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8fcfe9f9e428dd0fd69fe2036e2a1173", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8850, "upload_time": "2020-04-10T03:39:23", "upload_time_iso_8601": "2020-04-10T03:39:23.838148Z", "url": "https://files.pythonhosted.org/packages/cf/99/854779219a952c0fa831adc26308299577921bed44a2434ca38d0b6c1e66/setuptools_autover-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78331434ac8a4d2ca3d7ae281e7ede3f", "sha256": "8fc16cc5c54fa7766ddd53629d5aae1a02724078e1d3b653a9e523af53fefbe4"}, "downloads": -1, "filename": "setuptools_autover-1.0.2.tar.gz", "has_sig": false, "md5_digest": "78331434ac8a4d2ca3d7ae281e7ede3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8737, "upload_time": "2020-04-10T03:43:27", "upload_time_iso_8601": "2020-04-10T03:43:27.451585Z", "url": "https://files.pythonhosted.org/packages/38/ae/8068d02dec35641347b94d870a097449d428ad2701e602eb477f50bf4ee8/setuptools_autover-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8fcfe9f9e428dd0fd69fe2036e2a1173", "sha256": "74f99ef522381beed318b77cf9cc31e87a9c63240c02165a1a2033fac0bdec84"}, "downloads": -1, "filename": "setuptools_autover-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8fcfe9f9e428dd0fd69fe2036e2a1173", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8850, "upload_time": "2020-04-10T03:39:23", "upload_time_iso_8601": "2020-04-10T03:39:23.838148Z", "url": "https://files.pythonhosted.org/packages/cf/99/854779219a952c0fa831adc26308299577921bed44a2434ca38d0b6c1e66/setuptools_autover-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78331434ac8a4d2ca3d7ae281e7ede3f", "sha256": "8fc16cc5c54fa7766ddd53629d5aae1a02724078e1d3b653a9e523af53fefbe4"}, "downloads": -1, "filename": "setuptools_autover-1.0.2.tar.gz", "has_sig": false, "md5_digest": "78331434ac8a4d2ca3d7ae281e7ede3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8737, "upload_time": "2020-04-10T03:43:27", "upload_time_iso_8601": "2020-04-10T03:43:27.451585Z", "url": "https://files.pythonhosted.org/packages/38/ae/8068d02dec35641347b94d870a097449d428ad2701e602eb477f50bf4ee8/setuptools_autover-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:32 2020"}