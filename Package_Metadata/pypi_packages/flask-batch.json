{"info": {"author": "Daniel Grossmann-Kavanagh", "author_email": "me@danielgk.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Flask-Batch\n===========\n\n|Travis CI build status| |GitHub license| |Latest Version|\n\n*Batch multiple requests at the http layer.* Flask-Batch is inpsired by\n`how google cloud storage does\nbatching <https://cloud.google.com/storage/docs/json_api/v1/how-tos/batch>`__.\n\nIt adds a ``/batch`` route to your API which can execute batched HTTP\nrequests against your API server side. The client wraps several requests\nin a single request using the ``multipart/mixed`` content type.\n\n\nInstallation\n============\n\n.. code:: bash\n\n    pip install Flask-Batch\n\n    # to include the dependencies for the batching client\n    pip install Flask-Batch[client]\n\n\nGetting Started\n===============\n\nServer\n------\n\n.. code:: python\n\n    from flask import Flask\n    from flask_batch import add_batch_route\n\n    app = Flask(__name__)\n    add_batch_route(app)\n\n    # that's it!\n\nClient\n------\n\nThe client wraps a requests session.\n\n.. code:: python\n\n    from flask_batch.client import Batching\n    import json\n\n    alice_data = bob_data = {\"example\": \"json\"}\n\n    with Batching(\"http://localhost:5000/batch\") as s:\n        alice = s.patch(\"/people/alice/\", json=alice_data)\n        bob = s.patch(\"/people/bob/\", json=bob_data)\n\n    alice         # <Response [200]>\n    alice.json()  # {\"response\": \"json\"}\n\nWhy Batch?\n==========\n\nOften the round-trip-time from a client to a server is high. Batching\nrequests reduces the penalty of a high RTT, without the added complexity\nof request parallelization.\n\n.. figure:: sequence-diagram.svg\n   :alt: \n\nBatching Done Right\n===================\n\nOften API designers will create custom batch endpoints for specific\noperations. Creating custom API endpoints for performing bulk operations\nusually end up being clunky. Each one ends up unique. This means more\ncode to maintain, and more bugs.\n\nIt can be difficult to reason about bulk json API endpoints. For\nexample, what happens on error? Does the bulk operation fail? continue?\nroll back?\n\nBatching at the HTTP layer results in clear and expected behaviors that\nare easy to reason about. HTTP batching simply behaves the same way as\nall of the individual requests that are sent in the batch.\n\nStatus\n======\n\nThis project is in ``alpha``. I'm hoping to eventually get it approved\nas a flask extension.\n\n.. |Travis CI build status| image:: https://api.travis-ci.org/dtkav/flask-batch.svg?branch=master\n   :target: https://travis-ci.org/dtkav/flask-batch/\n.. |GitHub license| image:: https://img.shields.io/github/license/dtkav/flask-batch.svg\n   :target: https://github.com/dtkav/flask-batch/blob/master/LICENSE\n.. |Latest Version| image:: https://img.shields.io/pypi/v/flask-batch.svg\n   :target: https://pypi.python.org/pypi/flask-batch\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dtkav/flask-batch", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flask-batch", "package_url": "https://pypi.org/project/flask-batch/", "platform": "", "project_url": "https://pypi.org/project/flask-batch/", "project_urls": {"Homepage": "https://github.com/dtkav/flask-batch"}, "release_url": "https://pypi.org/project/flask-batch/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"flask-batch\">\n<h2>Flask-Batch</h2>\n<p><a href=\"https://travis-ci.org/dtkav/flask-batch/\" rel=\"nofollow\"><img alt=\"Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e41c3c5489904b4eb7597814986b63c064e073af/68747470733a2f2f6170692e7472617669732d63692e6f72672f64746b61762f666c61736b2d62617463682e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://github.com/dtkav/flask-batch/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5536cd4df2858fdc4a049f9f874100e06c0466a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f64746b61762f666c61736b2d62617463682e737667\"></a> <a href=\"https://pypi.python.org/pypi/flask-batch\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9963c542ec3333443b5a8b10c9f086daae24dc73/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c61736b2d62617463682e737667\"></a></p>\n<p><em>Batch multiple requests at the http layer.</em> Flask-Batch is inpsired by\n<a href=\"https://cloud.google.com/storage/docs/json_api/v1/how-tos/batch\" rel=\"nofollow\">how google cloud storage does\nbatching</a>.</p>\n<p>It adds a <tt>/batch</tt> route to your API which can execute batched HTTP\nrequests against your API server side. The client wraps several requests\nin a single request using the <tt>multipart/mixed</tt> content type.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install Flask-Batch\n\n<span class=\"c1\"># to include the dependencies for the batching client\n</span>pip install Flask-Batch<span class=\"o\">[</span>client<span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<div id=\"server\">\n<h3>Server</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_batch</span> <span class=\"kn\">import</span> <span class=\"n\">add_batch_route</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">add_batch_route</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># that's it!</span>\n</pre>\n</div>\n<div id=\"client\">\n<h3>Client</h3>\n<p>The client wraps a requests session.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_batch.client</span> <span class=\"kn\">import</span> <span class=\"n\">Batching</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">alice_data</span> <span class=\"o\">=</span> <span class=\"n\">bob_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"example\"</span><span class=\"p\">:</span> <span class=\"s2\">\"json\"</span><span class=\"p\">}</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Batching</span><span class=\"p\">(</span><span class=\"s2\">\"http://localhost:5000/batch\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n    <span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s2\">\"/people/alice/\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">alice_data</span><span class=\"p\">)</span>\n    <span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s2\">\"/people/bob/\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">bob_data</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span>         <span class=\"c1\"># &lt;Response [200]&gt;</span>\n<span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>  <span class=\"c1\"># {\"response\": \"json\"}</span>\n</pre>\n</div>\n</div>\n<div id=\"why-batch\">\n<h2>Why Batch?</h2>\n<p>Often the round-trip-time from a client to a server is high. Batching\nrequests reduces the penalty of a high RTT, without the added complexity\nof request parallelization.</p>\n<div>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae1f01d781a402f86dec63f5d24d0796a666b534/73657175656e63652d6469616772616d2e737667\">\n</div>\n</div>\n<div id=\"batching-done-right\">\n<h2>Batching Done Right</h2>\n<p>Often API designers will create custom batch endpoints for specific\noperations. Creating custom API endpoints for performing bulk operations\nusually end up being clunky. Each one ends up unique. This means more\ncode to maintain, and more bugs.</p>\n<p>It can be difficult to reason about bulk json API endpoints. For\nexample, what happens on error? Does the bulk operation fail? continue?\nroll back?</p>\n<p>Batching at the HTTP layer results in clear and expected behaviors that\nare easy to reason about. HTTP batching simply behaves the same way as\nall of the individual requests that are sent in the batch.</p>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>This project is in <tt>alpha</tt>. I\u2019m hoping to eventually get it approved\nas a flask extension.</p>\n</div>\n\n          </div>"}, "last_serial": 4236579, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "7e445cee1c7dd82e01ea74032c582983", "sha256": "a2f024695db6e82e95a790736c7251a897c0fef4876b8f0a4d6a13b79299e1c0"}, "downloads": -1, "filename": "flask-batch-0.0.0.tar.gz", "has_sig": false, "md5_digest": "7e445cee1c7dd82e01ea74032c582983", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4510, "upload_time": "2018-08-02T06:49:58", "upload_time_iso_8601": "2018-08-02T06:49:58.877091Z", "url": "https://files.pythonhosted.org/packages/e2/89/5a3562585bc75f9844913312a8c7d64f10e057d84e87cd9cc9e099d9beb7/flask-batch-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "714b29db68bff14e92bd7b6b2de11cea", "sha256": "885f05ceb8405b06a67cd833f1cc60bb854586ec8efdf788793e9e411f1367f0"}, "downloads": -1, "filename": "flask-batch-0.0.1.tar.gz", "has_sig": false, "md5_digest": "714b29db68bff14e92bd7b6b2de11cea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8789, "upload_time": "2018-08-14T03:38:02", "upload_time_iso_8601": "2018-08-14T03:38:02.404802Z", "url": "https://files.pythonhosted.org/packages/64/96/02b4ace2dfd98f9cb8767b34502265cb3ca7380b65084afc42e2d3d4af44/flask-batch-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "31dfdbce45d879c3dc2090bc25b546a4", "sha256": "c84b51bf8d874d4e1405140e8666a0602551efce0983115a3b1bcaffceefc00a"}, "downloads": -1, "filename": "Flask-Batch-0.0.2.tar.gz", "has_sig": false, "md5_digest": "31dfdbce45d879c3dc2090bc25b546a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7940, "upload_time": "2018-09-04T06:41:37", "upload_time_iso_8601": "2018-09-04T06:41:37.896243Z", "url": "https://files.pythonhosted.org/packages/6b/2a/af2c708fd8c115f4b4fb6ad2c85be7f908cfc464e0c56b6c7792b5d31a4d/Flask-Batch-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "31dfdbce45d879c3dc2090bc25b546a4", "sha256": "c84b51bf8d874d4e1405140e8666a0602551efce0983115a3b1bcaffceefc00a"}, "downloads": -1, "filename": "Flask-Batch-0.0.2.tar.gz", "has_sig": false, "md5_digest": "31dfdbce45d879c3dc2090bc25b546a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7940, "upload_time": "2018-09-04T06:41:37", "upload_time_iso_8601": "2018-09-04T06:41:37.896243Z", "url": "https://files.pythonhosted.org/packages/6b/2a/af2c708fd8c115f4b4fb6ad2c85be7f908cfc464e0c56b6c7792b5d31a4d/Flask-Batch-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:03:05 2020"}