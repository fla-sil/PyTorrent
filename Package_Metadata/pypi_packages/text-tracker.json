{"info": {"author": "Cooper Sanders", "author_email": "tromboneguy@coopersanders.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## Text Tracker\n### Background: Running Records\nResearch shows that one of the best ways to promote literacy in elementary aged\nstudents is to track their progress via the Running Records program, in which\nthe teacher scores the student's reading abilities in a live, in-person reading\ntest. This way, teachers can help students in the areas they need most.\nHowever, this process is extremely time consuming, so a small team of students\nat Clemson University is researching ways to automate the scoring process.\n### Following Along\nThe two primary challenges of the project are transcribing the student's words,\nand keeping track of where the student is in the testing book so that the\ntranscription may be accurately scored. The transcription part is handled by\nthird party services such as IBM's Watson, but we were unable to find\npre-existing algorithms that could accomplish the second part: following along\nwith the student.\n### Applications\nThis package includes tools to analyze text files and align two texts with each\nother so that they may be compared or scored. This addresses the problem of\nfollowing along with a student during a Running Records assessment.\nApplications may extend to any unlimited number of projects, such as plagiarism\ndetection, soft string matching, and more.\n### Usage\nThis package is available on PyPI and can be installed via\n\n`pip install text-tracker`\n\nand used via\n```python\nimport text_tracker\ntext_tracker.track([original_file], [spoken_file])\n```\nor\n```python\nfrom text_tracker import track\ntrack([original_file], [spoken_file])\n```\n\nView this project on GitHub:\n\n<https://github.com/supercooper6558/Text-Tracker>\n### Detailed Operation\nLet's say we have two text files with the following content.\n\nFile 1:\n```\nThe other day I went to the other store where the day was long\none day a bird met a hippo\n\n```\nFile 2:\n```\nThe other other day word I i went to the the word the other store the day was long\none day a bird a word bird met a hippo\n\n```\nNote that the last line of each file is an empty blank line. _This is\nimportant._\n\nTo use the package in python, open both files and pass them to the `track`\nfunction, such as follows:\n```python\nfrom text_tracker import track\nwith open('original.txt', 'r') as o:\n    with open('test.txt', 'r') as t:\n        indeces = track(o, t)\n```\n`indeces` would be a list of the following two index vectors:\n```python\n[0, 1, 1, 2, nan, 3, 3, 4, 5, 6, nan, 6, 6, 7, 8, 10, 11, 12, 13]\n[0, 1, 2, 3, 2, nan, 3, 4, 5, 6]\n```\nWhat's going on here? The files contain two texts that are being compared.\nCapitalization doesn't matter - the algorithm converts everything to lowercase\nbefore doing anything else. The files should contain no punctuation, unless\nyou want it considered part of a word. The only delimiters is the space\ncharacter, so if you have a comma at the end of a word, the program will treat\nthe comma character as part of the word and likely not find any matches for\nthat combination. Each line is evaluated separately, so it would be helpful to\nuse each line as a page in a book. Both files must have the same number of\nlines.\n\nThe output is a list of index vectors. For each \"page\" (or line), there is an\nassociated index vector, where each element maps a spoken word to a written\nword. If a word appears in the \"spoken\" file that does not appear in the\n\"written\" file, it will be associated with NaN.\n### Credits\nThis was developed by Cooper Sanders in 2020 and is MIT licensed. You can\ncontact me at\n\n<mailto:tromboneguy@coopersanders.com>\n\nclemson.edu domain email addresses can contact me at \n\n<mailto:cssande@clemson.edu>\n\nMy website:\n\n<https://coopersanders.com>\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/supercooper6558/Text-Tracker", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "text-tracker", "package_url": "https://pypi.org/project/text-tracker/", "platform": "", "project_url": "https://pypi.org/project/text-tracker/", "project_urls": {"Homepage": "https://github.com/supercooper6558/Text-Tracker"}, "release_url": "https://pypi.org/project/text-tracker/1.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Keep track of text locations!", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Text Tracker</h2>\n<h3>Background: Running Records</h3>\n<p>Research shows that one of the best ways to promote literacy in elementary aged\nstudents is to track their progress via the Running Records program, in which\nthe teacher scores the student's reading abilities in a live, in-person reading\ntest. This way, teachers can help students in the areas they need most.\nHowever, this process is extremely time consuming, so a small team of students\nat Clemson University is researching ways to automate the scoring process.</p>\n<h3>Following Along</h3>\n<p>The two primary challenges of the project are transcribing the student's words,\nand keeping track of where the student is in the testing book so that the\ntranscription may be accurately scored. The transcription part is handled by\nthird party services such as IBM's Watson, but we were unable to find\npre-existing algorithms that could accomplish the second part: following along\nwith the student.</p>\n<h3>Applications</h3>\n<p>This package includes tools to analyze text files and align two texts with each\nother so that they may be compared or scored. This addresses the problem of\nfollowing along with a student during a Running Records assessment.\nApplications may extend to any unlimited number of projects, such as plagiarism\ndetection, soft string matching, and more.</p>\n<h3>Usage</h3>\n<p>This package is available on PyPI and can be installed via</p>\n<p><code>pip install text-tracker</code></p>\n<p>and used via</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">text_tracker</span>\n<span class=\"n\">text_tracker</span><span class=\"o\">.</span><span class=\"n\">track</span><span class=\"p\">([</span><span class=\"n\">original_file</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">spoken_file</span><span class=\"p\">])</span>\n</pre>\n<p>or</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">text_tracker</span> <span class=\"kn\">import</span> <span class=\"n\">track</span>\n<span class=\"n\">track</span><span class=\"p\">([</span><span class=\"n\">original_file</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">spoken_file</span><span class=\"p\">])</span>\n</pre>\n<p>View this project on GitHub:</p>\n<p><a href=\"https://github.com/supercooper6558/Text-Tracker\" rel=\"nofollow\">https://github.com/supercooper6558/Text-Tracker</a></p>\n<h3>Detailed Operation</h3>\n<p>Let's say we have two text files with the following content.</p>\n<p>File 1:</p>\n<pre><code>The other day I went to the other store where the day was long\none day a bird met a hippo\n\n</code></pre>\n<p>File 2:</p>\n<pre><code>The other other day word I i went to the the word the other store the day was long\none day a bird a word bird met a hippo\n\n</code></pre>\n<p>Note that the last line of each file is an empty blank line. <em>This is\nimportant.</em></p>\n<p>To use the package in python, open both files and pass them to the <code>track</code>\nfunction, such as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">text_tracker</span> <span class=\"kn\">import</span> <span class=\"n\">track</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'original.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">o</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'test.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n        <span class=\"n\">indeces</span> <span class=\"o\">=</span> <span class=\"n\">track</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n</pre>\n<p><code>indeces</code> would be a list of the following two index vectors:</p>\n<pre><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</pre>\n<p>What's going on here? The files contain two texts that are being compared.\nCapitalization doesn't matter - the algorithm converts everything to lowercase\nbefore doing anything else. The files should contain no punctuation, unless\nyou want it considered part of a word. The only delimiters is the space\ncharacter, so if you have a comma at the end of a word, the program will treat\nthe comma character as part of the word and likely not find any matches for\nthat combination. Each line is evaluated separately, so it would be helpful to\nuse each line as a page in a book. Both files must have the same number of\nlines.</p>\n<p>The output is a list of index vectors. For each \"page\" (or line), there is an\nassociated index vector, where each element maps a spoken word to a written\nword. If a word appears in the \"spoken\" file that does not appear in the\n\"written\" file, it will be associated with NaN.</p>\n<h3>Credits</h3>\n<p>This was developed by Cooper Sanders in 2020 and is MIT licensed. You can\ncontact me at</p>\n<p><a href=\"mailto:tromboneguy@coopersanders.com\">mailto:tromboneguy@coopersanders.com</a></p>\n<p>clemson.edu domain email addresses can contact me at</p>\n<p><a href=\"mailto:cssande@clemson.edu\">mailto:cssande@clemson.edu</a></p>\n<p>My website:</p>\n<p><a href=\"https://coopersanders.com\" rel=\"nofollow\">https://coopersanders.com</a></p>\n\n          </div>"}, "last_serial": 7027656, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a3546d889cfcc99858981d2cf33e2e69", "sha256": "f6a289ea85a7efe3c3ceba0cc260dc9fb7066b888ac1c2718ea93fc00d346331"}, "downloads": -1, "filename": "text_tracker-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a3546d889cfcc99858981d2cf33e2e69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5412, "upload_time": "2020-04-15T17:08:44", "upload_time_iso_8601": "2020-04-15T17:08:44.066742Z", "url": "https://files.pythonhosted.org/packages/69/d1/9c39829134944720ad2153b421ca6be13e1304483067a8f3fc0d0066f0e0/text_tracker-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "143b0bed1aec0a8fdfdccaf4683b8539", "sha256": "bf7920e0f02039846acfd56ceba3469ad8db1fa00c0692847e4fdf55ff977d57"}, "downloads": -1, "filename": "text-tracker-1.0.0.tar.gz", "has_sig": false, "md5_digest": "143b0bed1aec0a8fdfdccaf4683b8539", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4641, "upload_time": "2020-04-15T17:08:46", "upload_time_iso_8601": "2020-04-15T17:08:46.284156Z", "url": "https://files.pythonhosted.org/packages/17/a0/0824277bae4d68f608696edeb4ca67e13ac45fc0a2d7d05da546d26e6334/text-tracker-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "17acecb1a3672e0cea13f51e56c30b25", "sha256": "e3d0af3526442e8c64bb426626fd1c441ac6e3d6e3e24edd79f7fff302b7a7fa"}, "downloads": -1, "filename": "text_tracker-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "17acecb1a3672e0cea13f51e56c30b25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5409, "upload_time": "2020-04-15T21:38:08", "upload_time_iso_8601": "2020-04-15T21:38:08.069692Z", "url": "https://files.pythonhosted.org/packages/d6/9d/331a134fbb2125e9858195c604a53140377a19b509d6e72aaa654d671a36/text_tracker-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72428c7a208ea2267b996b59ed3ba128", "sha256": "acb7e38618ac7ccc5df4d2a32305ece7c81fac00d6467fc4e91743f92770f8a6"}, "downloads": -1, "filename": "text-tracker-1.0.1.tar.gz", "has_sig": false, "md5_digest": "72428c7a208ea2267b996b59ed3ba128", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4639, "upload_time": "2020-04-15T21:38:09", "upload_time_iso_8601": "2020-04-15T21:38:09.701435Z", "url": "https://files.pythonhosted.org/packages/64/75/82b26079567626746b4354277380f98942881cd1a8d9a6d1d8b521dca2b4/text-tracker-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17acecb1a3672e0cea13f51e56c30b25", "sha256": "e3d0af3526442e8c64bb426626fd1c441ac6e3d6e3e24edd79f7fff302b7a7fa"}, "downloads": -1, "filename": "text_tracker-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "17acecb1a3672e0cea13f51e56c30b25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5409, "upload_time": "2020-04-15T21:38:08", "upload_time_iso_8601": "2020-04-15T21:38:08.069692Z", "url": "https://files.pythonhosted.org/packages/d6/9d/331a134fbb2125e9858195c604a53140377a19b509d6e72aaa654d671a36/text_tracker-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72428c7a208ea2267b996b59ed3ba128", "sha256": "acb7e38618ac7ccc5df4d2a32305ece7c81fac00d6467fc4e91743f92770f8a6"}, "downloads": -1, "filename": "text-tracker-1.0.1.tar.gz", "has_sig": false, "md5_digest": "72428c7a208ea2267b996b59ed3ba128", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4639, "upload_time": "2020-04-15T21:38:09", "upload_time_iso_8601": "2020-04-15T21:38:09.701435Z", "url": "https://files.pythonhosted.org/packages/64/75/82b26079567626746b4354277380f98942881cd1a8d9a6d1d8b521dca2b4/text-tracker-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:55 2020"}