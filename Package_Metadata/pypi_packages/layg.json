{"info": {"author": "Nathan Musoke, Layne Price", "author_email": "n.musoke@aucland.ac.nz, layne.c.price@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Astronomy", "Topic :: Scientific/Engineering :: Physics"], "description": "LearnAsYouGoEmulator\n====================\n\nPython implementation of the Learn As You Go algorithm described in `arxiv:1506:01079 <http://arxiv.org/abs/arXiv:1506.01079>`_ and `arxiv:2004.11929 <https://arxiv.org/abs/2004.11929>`_.\n\n.. image:: https://badge.fury.io/py/layg.svg\n    :target: https://badge.fury.io/py/layg\n\n.. image:: https://zenodo.org/badge/240627897.svg\n    :target: https://zenodo.org/badge/latestdoi/240627897\n\n.. image:: https://readthedocs.org/projects/learnasyougoemulator/badge/?version=latest\n    :target: https://learnasyougoemulator.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n\n.. image:: https://github.com/auckland-cosmo/LearnAsYouGoEmulator/workflows/pytest/badge.svg\n    :target: https://github.com/auckland-cosmo/LearnAsYouGoEmulator/actions?query=workflow%3Apytest\n\n.. image:: https://github.com/auckland-cosmo/LearnAsYouGoEmulator/workflows/doc/badge.svg\n    :target: https://github.com/auckland-cosmo/LearnAsYouGoEmulator/actions?query=workflow%3Adoc\n\n.. image:: https://github.com/auckland-cosmo/LearnAsYouGoEmulator/workflows/lints/badge.svg\n    :target: https://github.com/auckland-cosmo/LearnAsYouGoEmulator/actions?query=workflow%3Alints\n\n\nThe package defines a decorator that can be applied to functions to convert them to functions which learn outputs as they go and emulate the true function when expected errors are low.\nTwo emulators are included: the `k`-nearest neighbors Monte Carlo accelerator described there, and a simple neural network.\n\nThe basic usage of the emulator code is something like this::\n\n    @emulate(CholeskyNnEmulator)\n    def loglike(x):\n        \"\"\"\n        Your complex and expensive function here\n        \"\"\"\n        return -np.dot(x,x)\n\nThis decorates the function ``loglike`` so that it is an instance of the ``Learner`` class.\nIt can be used in the same way as the original function: just call it as ``loglike(x)``.\n\nThe ``__call__(x)`` method now hides some extra complexity: it uses the Learn As You Go emulation scheme.\nIt learns both the output of ``loglike(x)`` and the difference between the emulated and the true values of ``loglike(x)`` so that it can make a prediction of future the error residuals.\nWe then put a cutoff on the amount of error that one will allow for any local evaluation of the target function.\nAny call to the emulator that has a too-large error will be discarded and the actual function ``loglike(x)`` defined above will be evaluated instead.\n\nThe logic for generating training sets and returning a value from either the true function or the emulated function are contained in the ``Learner`` class.\nThe ``Learner`` class relies on an emulator class to do the actual emulation.\n\nYou can define you own emulator.\nDefine a class that inherits from ``BaseEmulator`` and define two methods on it: ``set_emul_func(self, x_train: np.ndarray, y_train: np.ndarray)`` and ``set_emul_error_func(self, x_train: np.ndarray, y_train: np.ndarray)`` that set functions for, respectively, ``self.emul_func`` and ``self.emul_error_func``.\nAn example of this definition is provided in `examples/example_custom_emulator.py`.\n\nSee readthedocs.org_ for more documentation.\n\n\nInstallation\n------------\n\n**pip**\n\nThe package is available on pypi.org_.\nInstall it with ::\n\n    pip install layg\n\n**anaconda**\n\nIf you use anaconda you can create an appropriate environment and install to your python path by running ::\n\n    conda env create --file environment.yml\n    pip install -e .\n\nfrom this directory.\n\n.. _pypi.org: https://pypi.org/project/layg/\n\n.. _readthedocs.org: https://learnasyougoemulator.readthedocs.io\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/auckland-cosmo/LearnAsYouGoEmulator", "keywords": "", "license": "Apache Licence (2.0)", "maintainer": "", "maintainer_email": "", "name": "layg", "package_url": "https://pypi.org/project/layg/", "platform": "", "project_url": "https://pypi.org/project/layg/", "project_urls": {"Homepage": "https://github.com/auckland-cosmo/LearnAsYouGoEmulator"}, "release_url": "https://pypi.org/project/layg/0.0.1/", "requires_dist": ["matplotlib", "numpy", "numpydoc", "torch", "scipy", "sphinx", "sphinx-rtd-theme", "emcee (<3,>=2)", "gif (==1.0.3)"], "requires_python": ">=3.5", "summary": "Learn-as-you-go emulator with error estimation", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python implementation of the Learn As You Go algorithm described in <a href=\"http://arxiv.org/abs/arXiv:1506.01079\" rel=\"nofollow\">arxiv:1506:01079</a> and <a href=\"https://arxiv.org/abs/2004.11929\" rel=\"nofollow\">arxiv:2004.11929</a>.</p>\n<a href=\"https://badge.fury.io/py/layg\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/layg.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0611627b5456a84630ae601a6d8b91c93d6425c2/68747470733a2f2f62616467652e667572792e696f2f70792f6c6179672e737667\"></a>\n<a href=\"https://zenodo.org/badge/latestdoi/240627897\" rel=\"nofollow\"><img alt=\"https://zenodo.org/badge/240627897.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a54a8c5434188b6fdd70f7e7d0c544e08371ec1d/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3234303632373839372e737667\"></a>\n<a href=\"https://learnasyougoemulator.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ae7bba6d29382376e467452f91c98a75abbb549/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c6561726e6173796f75676f656d756c61746f722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/auckland-cosmo/LearnAsYouGoEmulator/actions?query=workflow%3Apytest\" rel=\"nofollow\"><img alt=\"https://github.com/auckland-cosmo/LearnAsYouGoEmulator/workflows/pytest/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c68a07d6b536de7a6c6768ff9097ccc722bee7b7/68747470733a2f2f6769746875622e636f6d2f6175636b6c616e642d636f736d6f2f4c6561726e4173596f75476f456d756c61746f722f776f726b666c6f77732f7079746573742f62616467652e737667\"></a>\n<a href=\"https://github.com/auckland-cosmo/LearnAsYouGoEmulator/actions?query=workflow%3Adoc\" rel=\"nofollow\"><img alt=\"https://github.com/auckland-cosmo/LearnAsYouGoEmulator/workflows/doc/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c639186d1a52b282edc58ff29c84475c0542403/68747470733a2f2f6769746875622e636f6d2f6175636b6c616e642d636f736d6f2f4c6561726e4173596f75476f456d756c61746f722f776f726b666c6f77732f646f632f62616467652e737667\"></a>\n<a href=\"https://github.com/auckland-cosmo/LearnAsYouGoEmulator/actions?query=workflow%3Alints\" rel=\"nofollow\"><img alt=\"https://github.com/auckland-cosmo/LearnAsYouGoEmulator/workflows/lints/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87c658f1089f8bfe3580ba5f5393e2d8c26b3b24/68747470733a2f2f6769746875622e636f6d2f6175636b6c616e642d636f736d6f2f4c6561726e4173596f75476f456d756c61746f722f776f726b666c6f77732f6c696e74732f62616467652e737667\"></a>\n<p>The package defines a decorator that can be applied to functions to convert them to functions which learn outputs as they go and emulate the true function when expected errors are low.\nTwo emulators are included: the <cite>k</cite>-nearest neighbors Monte Carlo accelerator described there, and a simple neural network.</p>\n<p>The basic usage of the emulator code is something like this:</p>\n<pre>@emulate(CholeskyNnEmulator)\ndef loglike(x):\n    \"\"\"\n    Your complex and expensive function here\n    \"\"\"\n    return -np.dot(x,x)\n</pre>\n<p>This decorates the function <tt>loglike</tt> so that it is an instance of the <tt>Learner</tt> class.\nIt can be used in the same way as the original function: just call it as <tt>loglike(x)</tt>.</p>\n<p>The <tt>__call__(x)</tt> method now hides some extra complexity: it uses the Learn As You Go emulation scheme.\nIt learns both the output of <tt>loglike(x)</tt> and the difference between the emulated and the true values of <tt>loglike(x)</tt> so that it can make a prediction of future the error residuals.\nWe then put a cutoff on the amount of error that one will allow for any local evaluation of the target function.\nAny call to the emulator that has a too-large error will be discarded and the actual function <tt>loglike(x)</tt> defined above will be evaluated instead.</p>\n<p>The logic for generating training sets and returning a value from either the true function or the emulated function are contained in the <tt>Learner</tt> class.\nThe <tt>Learner</tt> class relies on an emulator class to do the actual emulation.</p>\n<p>You can define you own emulator.\nDefine a class that inherits from <tt>BaseEmulator</tt> and define two methods on it: <tt>set_emul_func(self, x_train: np.ndarray, y_train: np.ndarray)</tt> and <tt>set_emul_error_func(self, x_train: np.ndarray, y_train: np.ndarray)</tt> that set functions for, respectively, <tt>self.emul_func</tt> and <tt>self.emul_error_func</tt>.\nAn example of this definition is provided in <cite>examples/example_custom_emulator.py</cite>.</p>\n<p>See <a href=\"https://learnasyougoemulator.readthedocs.io\" rel=\"nofollow\">readthedocs.org</a> for more documentation.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><strong>pip</strong></p>\n<p>The package is available on <a href=\"https://pypi.org/project/layg/\" rel=\"nofollow\">pypi.org</a>.\nInstall it with</p>\n<pre>pip install layg\n</pre>\n<p><strong>anaconda</strong></p>\n<p>If you use anaconda you can create an appropriate environment and install to your python path by running</p>\n<pre>conda env create --file environment.yml\npip install -e .\n</pre>\n<p>from this directory.</p>\n</div>\n\n          </div>"}, "last_serial": 7124388, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "743e16112651febb4f33737bb409aebe", "sha256": "981edfecca839a4ba90c67dcc930e10e2d73d73bcca3483b479459c606ca8ad4"}, "downloads": -1, "filename": "layg-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "743e16112651febb4f33737bb409aebe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18237, "upload_time": "2020-04-28T23:44:42", "upload_time_iso_8601": "2020-04-28T23:44:42.328605Z", "url": "https://files.pythonhosted.org/packages/96/c9/272d56046d664282f400138f66bd85f4ac521057b6a4861b4abc576dfb81/layg-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be3e4b680a48e49ef77c9cc071ad542a", "sha256": "35d619450e14c17577c4e89ad5f2486674120b09d25bd8028b6efe2ae89a92c5"}, "downloads": -1, "filename": "layg-0.0.1.tar.gz", "has_sig": false, "md5_digest": "be3e4b680a48e49ef77c9cc071ad542a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13559, "upload_time": "2020-04-28T23:44:44", "upload_time_iso_8601": "2020-04-28T23:44:44.361736Z", "url": "https://files.pythonhosted.org/packages/3c/5f/0723da814d4b1de57ab95deb6c16602c0163eb68b733d1aedcf9e52d050f/layg-0.0.1.tar.gz", "yanked": false}], "0.0.1.dev0": [{"comment_text": "", "digests": {"md5": "5b68f7f47baba4cd6d343e86eb22f1fb", "sha256": "c1d377c8938c4a94ea5521aa91413e0132c675260a966654ad2b51dbbce3aad4"}, "downloads": -1, "filename": "layg-0.0.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "5b68f7f47baba4cd6d343e86eb22f1fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16565, "upload_time": "2020-04-24T04:31:00", "upload_time_iso_8601": "2020-04-24T04:31:00.822026Z", "url": "https://files.pythonhosted.org/packages/e9/71/97fb7b3bcc31013db18c999e66eebdc877d3cb253599b2eb986a448bb937/layg-0.0.1.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "745243d99080d7d308072143d226a3bd", "sha256": "8f46b2307fe0b060693114d06778c515ee7a79b9723b848d294acc4c1295ec05"}, "downloads": -1, "filename": "layg-0.0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "745243d99080d7d308072143d226a3bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11726, "upload_time": "2020-04-24T04:31:03", "upload_time_iso_8601": "2020-04-24T04:31:03.177532Z", "url": "https://files.pythonhosted.org/packages/14/68/dab66201ad41c8f2789fb9b9b3e2b77e79eaf1304478f0786b9ea1b70c5a/layg-0.0.1.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "743e16112651febb4f33737bb409aebe", "sha256": "981edfecca839a4ba90c67dcc930e10e2d73d73bcca3483b479459c606ca8ad4"}, "downloads": -1, "filename": "layg-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "743e16112651febb4f33737bb409aebe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18237, "upload_time": "2020-04-28T23:44:42", "upload_time_iso_8601": "2020-04-28T23:44:42.328605Z", "url": "https://files.pythonhosted.org/packages/96/c9/272d56046d664282f400138f66bd85f4ac521057b6a4861b4abc576dfb81/layg-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be3e4b680a48e49ef77c9cc071ad542a", "sha256": "35d619450e14c17577c4e89ad5f2486674120b09d25bd8028b6efe2ae89a92c5"}, "downloads": -1, "filename": "layg-0.0.1.tar.gz", "has_sig": false, "md5_digest": "be3e4b680a48e49ef77c9cc071ad542a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13559, "upload_time": "2020-04-28T23:44:44", "upload_time_iso_8601": "2020-04-28T23:44:44.361736Z", "url": "https://files.pythonhosted.org/packages/3c/5f/0723da814d4b1de57ab95deb6c16602c0163eb68b733d1aedcf9e52d050f/layg-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:39 2020"}