{"info": {"author": "John Faucett", "author_email": "jwaterfaucett@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## Settings Manager\n\nSettings Manager is designed to handle settings in python projects.\n\nIt makes the assumption you are working with environments and building applications.\n\nThe API consists of 2 functions `load()` to load the application settings and `settings()` to get access to a dict of the application settings.\n\n## Usage\n\nYou can put environment variables in your yaml config files and they will be loaded from the environment when the file is loaded. Calls to get environment variables like `os.getenv()` also work in python config files. Only json config files cannot contain environment variables.\n\nYou can also have `base` files i.e. `base.py` or `base.yml` or `base.json` and these will get loaded first. Then the current environment file, for isntance `test.py` will be loaded and override any variables which have the same name in `base.py`.\n\n**Deep Merging** : currently the library does not do deep merges i.e. if you have nested hashes in your config files, only top level keys will be merged, not at a fine-grained deep level.\n\nHere are some examples.\n\n```yaml\napp:\n  secret_key: ${SECRET_KEY}\n  google_client_id: ${GOOGLE_CLIENT_ID}\n```\n\n```python\nSECRET_KEY = os.getenv('SECRET_KEY')\nGOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')\n```\n\n### JSON Config Files\n\n\nImagine you are working on a project with the following structure:\n\n```\nmyapp/\n  app.py\nconfig/\n  settings/\n    test.json\n    dev.json\n    prod.json\n```\n\n```python\nfrom settings_manager.manager import SettingsManager\n\nsm = SettingsManager(\n        environment = 'test', \n        filetype = 'json'\n        settings_dir = '/path/to/project/root/config/settings'    \n)\n\nsm.load()\n\n# view settings dictionary\nsm.settings() # { 'secret-key' : 'h390h2g3', ... }\n```\n\n### YAML Config Files\n\n\nImagine you are working on a project with the following structure:\n\n```\nmyapp/\n  app.py\nconfig/\n  settings/\n    test.yaml\n    dev.yaml\n    prod.yaml\n```\n\nYour yaml files can have `.yml` or `.yaml` file extensions.\n\n```python\nfrom settings_manager.manager import SettingsManager\n\nsm = SettingsManager(\n        environment = 'test', \n        filetype = 'yaml'\n        settings_dir = '/path/to/project/root/config/settings'    \n)\n\nsm.load()\n\n# view settings dictionary\nsm.settings() # { 'secret-key' : 'h390h2g3', ... }\n```\n\n### Python Config Files\n\n\nImagine you are working on a project with the following structure:\n\n```\nmyapp/\n  app.py\nconfig/\n  settings/\n    test.py\n    dev.py\n    prod.py\n```\n\n```python\nfrom settings_manager.manager import SettingsManager\n\nsm = SettingsManager(\n        environment = 'test', \n        filetype = 'python'\n        settings_dir = '/path/to/project/root/config/settings'\n        python_settings_module = 'config.settings'    \n)\n\nsm.load()\n\n# view settings dictionary\nsm.settings() # { 'secret-key' : 'h390h2g3', ... }\n```\n\n## Todos:\n\n1. ~~Add deep merge ability~~", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DataDaoDe/py-settings-manager", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "settings-manager", "package_url": "https://pypi.org/project/settings-manager/", "platform": "", "project_url": "https://pypi.org/project/settings-manager/", "project_urls": {"Homepage": "https://github.com/DataDaoDe/py-settings-manager"}, "release_url": "https://pypi.org/project/settings-manager/0.1.3/", "requires_dist": null, "requires_python": ">= 3.6", "summary": "A settings manager for python applications", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Settings Manager</h2>\n<p>Settings Manager is designed to handle settings in python projects.</p>\n<p>It makes the assumption you are working with environments and building applications.</p>\n<p>The API consists of 2 functions <code>load()</code> to load the application settings and <code>settings()</code> to get access to a dict of the application settings.</p>\n<h2>Usage</h2>\n<p>You can put environment variables in your yaml config files and they will be loaded from the environment when the file is loaded. Calls to get environment variables like <code>os.getenv()</code> also work in python config files. Only json config files cannot contain environment variables.</p>\n<p>You can also have <code>base</code> files i.e. <code>base.py</code> or <code>base.yml</code> or <code>base.json</code> and these will get loaded first. Then the current environment file, for isntance <code>test.py</code> will be loaded and override any variables which have the same name in <code>base.py</code>.</p>\n<p><strong>Deep Merging</strong> : currently the library does not do deep merges i.e. if you have nested hashes in your config files, only top level keys will be merged, not at a fine-grained deep level.</p>\n<p>Here are some examples.</p>\n<pre><span class=\"nt\">app</span><span class=\"p\">:</span>\n  <span class=\"nt\">secret_key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">${SECRET_KEY}</span>\n  <span class=\"nt\">google_client_id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">${GOOGLE_CLIENT_ID}</span>\n</pre>\n<pre><span class=\"n\">SECRET_KEY</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'SECRET_KEY'</span><span class=\"p\">)</span>\n<span class=\"n\">GOOGLE_CLIENT_ID</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'GOOGLE_CLIENT_ID'</span><span class=\"p\">)</span>\n</pre>\n<h3>JSON Config Files</h3>\n<p>Imagine you are working on a project with the following structure:</p>\n<pre><code>myapp/\n  app.py\nconfig/\n  settings/\n    test.json\n    dev.json\n    prod.json\n</code></pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">settings_manager.manager</span> <span class=\"kn\">import</span> <span class=\"n\">SettingsManager</span>\n\n<span class=\"n\">sm</span> <span class=\"o\">=</span> <span class=\"n\">SettingsManager</span><span class=\"p\">(</span>\n        <span class=\"n\">environment</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> \n        <span class=\"n\">filetype</span> <span class=\"o\">=</span> <span class=\"s1\">'json'</span>\n        <span class=\"n\">settings_dir</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/project/root/config/settings'</span>    \n<span class=\"p\">)</span>\n\n<span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># view settings dictionary</span>\n<span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">()</span> <span class=\"c1\"># { 'secret-key' : 'h390h2g3', ... }</span>\n</pre>\n<h3>YAML Config Files</h3>\n<p>Imagine you are working on a project with the following structure:</p>\n<pre><code>myapp/\n  app.py\nconfig/\n  settings/\n    test.yaml\n    dev.yaml\n    prod.yaml\n</code></pre>\n<p>Your yaml files can have <code>.yml</code> or <code>.yaml</code> file extensions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">settings_manager.manager</span> <span class=\"kn\">import</span> <span class=\"n\">SettingsManager</span>\n\n<span class=\"n\">sm</span> <span class=\"o\">=</span> <span class=\"n\">SettingsManager</span><span class=\"p\">(</span>\n        <span class=\"n\">environment</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> \n        <span class=\"n\">filetype</span> <span class=\"o\">=</span> <span class=\"s1\">'yaml'</span>\n        <span class=\"n\">settings_dir</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/project/root/config/settings'</span>    \n<span class=\"p\">)</span>\n\n<span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># view settings dictionary</span>\n<span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">()</span> <span class=\"c1\"># { 'secret-key' : 'h390h2g3', ... }</span>\n</pre>\n<h3>Python Config Files</h3>\n<p>Imagine you are working on a project with the following structure:</p>\n<pre><code>myapp/\n  app.py\nconfig/\n  settings/\n    test.py\n    dev.py\n    prod.py\n</code></pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">settings_manager.manager</span> <span class=\"kn\">import</span> <span class=\"n\">SettingsManager</span>\n\n<span class=\"n\">sm</span> <span class=\"o\">=</span> <span class=\"n\">SettingsManager</span><span class=\"p\">(</span>\n        <span class=\"n\">environment</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> \n        <span class=\"n\">filetype</span> <span class=\"o\">=</span> <span class=\"s1\">'python'</span>\n        <span class=\"n\">settings_dir</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/project/root/config/settings'</span>\n        <span class=\"n\">python_settings_module</span> <span class=\"o\">=</span> <span class=\"s1\">'config.settings'</span>    \n<span class=\"p\">)</span>\n\n<span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># view settings dictionary</span>\n<span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">()</span> <span class=\"c1\"># { 'secret-key' : 'h390h2g3', ... }</span>\n</pre>\n<h2>Todos:</h2>\n<ol>\n<li><del>Add deep merge ability</del></li>\n</ol>\n\n          </div>"}, "last_serial": 7076117, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5b167af74518baa944b2aaf180ed89bf", "sha256": "c2b049925bb1b8323ce57013d283cd4ccca0d72d395ba5db2df00856eb375b27"}, "downloads": -1, "filename": "settings_manager-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5b167af74518baa944b2aaf180ed89bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 2643, "upload_time": "2020-03-03T12:51:49", "upload_time_iso_8601": "2020-03-03T12:51:49.516944Z", "url": "https://files.pythonhosted.org/packages/30/be/853f48ed92da0909e8ac96381dfbf03940b5ff29eb9bf5dc9d32de0d488b/settings_manager-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "94dc1cb0058a946b35fcc31abf6e8b60", "sha256": "c52b77fa6e8ba53363d3b81e9da516bd9bb8cec534f71c5c314f69c043c56572"}, "downloads": -1, "filename": "settings_manager-0.1.1.tar.gz", "has_sig": false, "md5_digest": "94dc1cb0058a946b35fcc31abf6e8b60", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 4383, "upload_time": "2020-03-09T10:10:02", "upload_time_iso_8601": "2020-03-09T10:10:02.009887Z", "url": "https://files.pythonhosted.org/packages/a3/7a/df84133422d96593f17d3781881fdbd828d799228bc9c1e109500ead08b9/settings_manager-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "aac610d61ab86a3a58bbebc3bc0e0abe", "sha256": "3752e6d1b4b3ff4baff5418edfc8fff9ef3519e2241b4fc69bf1f566c43f4466"}, "downloads": -1, "filename": "settings_manager-0.1.2.tar.gz", "has_sig": false, "md5_digest": "aac610d61ab86a3a58bbebc3bc0e0abe", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 4641, "upload_time": "2020-04-22T11:58:00", "upload_time_iso_8601": "2020-04-22T11:58:00.753171Z", "url": "https://files.pythonhosted.org/packages/7d/e9/17bdd9586494d5110df0307c93ff78417e92af42fbc7b02da665b18272e6/settings_manager-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "874899b452c1c8019476a7f45de82d18", "sha256": "804285de646bdd5d3318ad5222138be42fe12b3ccc8f93a324a395e9ebd413fe"}, "downloads": -1, "filename": "settings_manager-0.1.3.tar.gz", "has_sig": false, "md5_digest": "874899b452c1c8019476a7f45de82d18", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 4875, "upload_time": "2020-04-22T12:23:10", "upload_time_iso_8601": "2020-04-22T12:23:10.074131Z", "url": "https://files.pythonhosted.org/packages/9c/11/aac1db8165dc662868280ca20fcd48e9b9b97576bb0b6a506bf0b7d0324d/settings_manager-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "874899b452c1c8019476a7f45de82d18", "sha256": "804285de646bdd5d3318ad5222138be42fe12b3ccc8f93a324a395e9ebd413fe"}, "downloads": -1, "filename": "settings_manager-0.1.3.tar.gz", "has_sig": false, "md5_digest": "874899b452c1c8019476a7f45de82d18", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 4875, "upload_time": "2020-04-22T12:23:10", "upload_time_iso_8601": "2020-04-22T12:23:10.074131Z", "url": "https://files.pythonhosted.org/packages/9c/11/aac1db8165dc662868280ca20fcd48e9b9b97576bb0b6a506bf0b7d0324d/settings_manager-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:46 2020"}