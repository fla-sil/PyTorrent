{"info": {"author": "Jacob Rief", "author_email": "jacob.rief@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "cmsplugin-text-wrapper\n======================\n\nA Django CMS plugin which extends and replaces the shipped text plugin with\nsimple wrapper functionalities.\n\nDescription\n-----------\n\nThis plugin adds a simple wrapping functionality to the text plugin shipped with\ndjango-cms. By adding this plugin, an editor may optionally choose a predefined\nwrapper, which is rendered as template around the current content. This is\nespecially useful when working with predefined grids such as http://960.gs\n\nThis plugin is fully compatible with the default text plugin and offers all of\nthe current functionality. It shall therefore be used to replace the default\ntext plugin. It works together with both, the WYEditor as well as with the \nTinyMCE editor.\n\nDependencies\n------------\n\n* Django >= 1.3\n* django-cms >= 2.3\n* South >= 0.7\n\nInstallation\n------------\n\nadd the plugin to ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        ...\n        'cmsplugin_text_wrapper',  # alternative to 'cms.plugins.text'\n        ...\n    )\n\nand remove ``'cms.plugins.text'`` from ``INSTALLED_APPS`` if configured.\n\nThen run ``manage.py migrate cmsplugin_text_wrapper`` to update your database\ntable ``cmsplugin_text``. This adds a column named ``wrapper`` and keeps\neverything caompatible.\n\nIn case you set up a new instance of DjangoCMS, the migration scripts will\nlook for a table named ``cmsplugin_text`` and if it does not exists, create\nit.\n\nRestart your application. You may use all your text fields in exactly as before.\nThey then are marked for not using any wrapper and are rendered as before.\n\nUsage\n-----\n\nIn your ``settings.py`` add a tuple of tuples such as::\n\n\tCMS_TEXT_WRAPPERS = (\n\t    ('<wrapper name>', {\n\t        'render_template': '<template name>',\n\t        'extra_context': <a dictionary with extra context to render the template>\n\t    }),\n\t    ...\n\t)\n\n``<wrapper name>`` is a unique name to identify the wrapper. The second part of\neach wrappers tuple contains a directory with the following keys:\n\n``render_template`` is the name of the template to be used when rendering the\ncontent of this text plugin. This template can contain some optional html\ntags but must contain the following template variable::\n\n\t{{ body|safe }}\n\nwhich is replaced by the editors content.\n\nIf ``render_template`` is missing, the content of this text plugin is rendered\nin the same way, as the default text plugin renders its content.\n\n``extra_context`` is an optional dictionary containing any kind of data. The\ncontext used to render the template is populated with this extra context.\n\nThis plugin does not change the admin interface, except for a pull down box on\ntop of the text editor. Using the default value is perfectly legal, in this case\nthe text wrapper plugin behaves exactly as the default text plugin as shipped\nwith **django-cms**.\n\n\nThe 960 pixel grid system \n-------------------------\nOne of the most widespread grid system is named http://960.gs/\nThis plugin interacts nicely with this grid system, but does not depend on it. This documentation\nshows how to integrate this plugin with the 960.gs, but it might also work perfectly well with\nTwitter Bootstrap.\n\nThe problem with the shipped text plugin is that an editor can add text, images, etc. to a\nplaceholder, but he gains no control over the layout of the given container. Often this is desired\nbehavior to enforce a consistent layout, but sometimes it is annoying, since too many specialized\ntemplates have to be created.\n\nSay, an editor wants to use the 960 Grid System with 12 columns. Now for for each possible\ncombinations of rows and colums, a special template must be created. This can result in a template\nsuch as::\n\n    <div class=\"container_12\">\n        <div class=\"grid_9\">{% placeholder \"g1\" %}</div><div class=\"grid_3\">{% placeholder \"g2\" %}</div>\n        <div class=\"grid_6\">{% placeholder \"g3\" %}</div><div class=\"grid_6\">{% placeholder \"g4\" %}</div>\n        <div class=\"grid_4\">{% placeholder \"g5\" %}</div><div class=\"grid_4\">{% placeholder \"g6\" %}</div><div class=\"grid_4\">{% placeholder \"g7\" %}</div>\n    </div>\n\nHere each grid-div gets its own placeholder. If an editor needs many similar layouts such as the one\nshown above, it can be hard to maintain all possible combinations of rows and columns.\n\nThis **cmsplugin-text-wrapper** gives an editor of a CMS page a flexible and clean way to add as\nmany different rows, with as many different columns as he wishes. Each of these columns can have\ntheir own widths.\n\nIf this grid system is enforced, the editor gains control over certain parts of the layout without\nhaving to fiddle with div tags nor snippets.\n\nDownload the files ``reset.css``, ``text.css`` and ``960.css`` from http://github.com/nathansmith/960-Grid-System/zipball/master\nand add them to your stylesheets.\n\nIn your templates directory, create a template named ``container-12.html``::\n\n    ... other stuff goes here\n    <div class=\"container_12\">\n        {% placeholder \"Container Content\" %}\n    </div>\n    ... more stuff goes here\n\nand add it to your CMS_TEMPLATES tuple.\n\nIn your templates directory, create another template named ``grid.html``::\n\n    <div class=\"{{ grid_class }} {{extra_classes}}\">\n        {{ body|safe }}\n    </div>\n\nand add it in different configurations to your ``CMS_TEXT_WRAPPERS`` tuples::\n\n    CMS_TEXT_WRAPPERS = (\n        ('Grid 3', {\n            'render_template': 'grid.html',\n            'extra_context': {'grid_class': 'grid_3'}\n        }),\n        ('Grid 6', {\n            'render_template': 'grid.html',\n            'extra_context': {'grid_class': 'grid_6'}\n        }),\n        ('Grid 12', {\n            'render_template': 'grid.html',\n            'extra_context': {'grid_class': 'grid_12'}\n        }),\n        ... and more ...\n    )\n    CMS_TEXT_WRAPPER_CLASSES = ('alpha', 'omega',)\n\nNow, after choosing a plugin of type **Text** in the CMS admin backend, two additionals fields are\nadded. The first is a select box labeled **Wrap into** where the editor can choose one of the\ngrids. The second is a list of checkboxes, one for each wrapper classes.\n\n\nVersion history\n---------------\n* 0.5: final release which could replace **cmsplugin-text** seamlessly.\n* 0.6: added a MultipleSelectField to add extra classes to the wrapper.\n\n\nRelated plugins which works in a similar way as **cmsplugin-text-wrapper**:\n...........................................................................\n\n\ntext-plugin-ng\n--------------\nDownload from https://github.com/KristianOellegaard/cmsplugin-text-ng .\n\n**text-plugin-ng** is not intended to replace the default text plugin. It is\nan add on to the text plugin as shipped with Django CMS and is not compatible\nwith it. Therefore an editor gets a choice of two text plugin, the one shipped\nwith Django CMS and **cmsplugin-text-ng**. For each placeholder he then has to\nchoose from one of those two.\n\nAdditionally the editor has to maintain two extra tables with named templates.\n\ndjango-cms-columns\n------------------\nDownload from https://github.com/philomat/django-cms-columns\n\n**django-cms-columns** offers support for the grid systems [YAML](http://www.yaml.de/en/documentation/practice/subtemplates.html) \nand [Blueprint](http://www.blueprintcss.org/) in the form of built in templates.\n\nIt does not seem to be supported any more.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jrief/cmsplugin-text-wrapper", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "cmsplugin-text-wrapper", "package_url": "https://pypi.org/project/cmsplugin-text-wrapper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cmsplugin-text-wrapper/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jrief/cmsplugin-text-wrapper"}, "release_url": "https://pypi.org/project/cmsplugin-text-wrapper/0.6/", "requires_dist": null, "requires_python": null, "summary": "A django-cms plugin which extends and replaces the shipped text plugin with simple wrapper functionalities.", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Django CMS plugin which extends and replaces the shipped text plugin with\nsimple wrapper functionalities.</p>\n<div id=\"description\">\n<h2>Description</h2>\n<p>This plugin adds a simple wrapping functionality to the text plugin shipped with\ndjango-cms. By adding this plugin, an editor may optionally choose a predefined\nwrapper, which is rendered as template around the current content. This is\nespecially useful when working with predefined grids such as <a href=\"http://960.gs\" rel=\"nofollow\">http://960.gs</a></p>\n<p>This plugin is fully compatible with the default text plugin and offers all of\nthe current functionality. It shall therefore be used to replace the default\ntext plugin. It works together with both, the WYEditor as well as with the\nTinyMCE editor.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>Django &gt;= 1.3</li>\n<li>django-cms &gt;= 2.3</li>\n<li>South &gt;= 0.7</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>add the plugin to <tt>INSTALLED_APPS</tt>:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'cmsplugin_text_wrapper',  # alternative to 'cms.plugins.text'\n    ...\n)\n</pre>\n<p>and remove <tt>'cms.plugins.text'</tt> from <tt>INSTALLED_APPS</tt> if configured.</p>\n<p>Then run <tt>manage.py migrate cmsplugin_text_wrapper</tt> to update your database\ntable <tt>cmsplugin_text</tt>. This adds a column named <tt>wrapper</tt> and keeps\neverything caompatible.</p>\n<p>In case you set up a new instance of DjangoCMS, the migration scripts will\nlook for a table named <tt>cmsplugin_text</tt> and if it does not exists, create\nit.</p>\n<p>Restart your application. You may use all your text fields in exactly as before.\nThey then are marked for not using any wrapper and are rendered as before.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In your <tt>settings.py</tt> add a tuple of tuples such as:</p>\n<pre>CMS_TEXT_WRAPPERS = (\n    ('&lt;wrapper name&gt;', {\n        'render_template': '&lt;template name&gt;',\n        'extra_context': &lt;a dictionary with extra context to render the template&gt;\n    }),\n    ...\n)\n</pre>\n<p><tt>&lt;wrapper name&gt;</tt> is a unique name to identify the wrapper. The second part of\neach wrappers tuple contains a directory with the following keys:</p>\n<p><tt>render_template</tt> is the name of the template to be used when rendering the\ncontent of this text plugin. This template can contain some optional html\ntags but must contain the following template variable:</p>\n<pre>{{ body|safe }}\n</pre>\n<p>which is replaced by the editors content.</p>\n<p>If <tt>render_template</tt> is missing, the content of this text plugin is rendered\nin the same way, as the default text plugin renders its content.</p>\n<p><tt>extra_context</tt> is an optional dictionary containing any kind of data. The\ncontext used to render the template is populated with this extra context.</p>\n<p>This plugin does not change the admin interface, except for a pull down box on\ntop of the text editor. Using the default value is perfectly legal, in this case\nthe text wrapper plugin behaves exactly as the default text plugin as shipped\nwith <strong>django-cms</strong>.</p>\n</div>\n<div id=\"the-960-pixel-grid-system\">\n<h2>The 960 pixel grid system</h2>\n<p>One of the most widespread grid system is named <a href=\"http://960.gs/\" rel=\"nofollow\">http://960.gs/</a>\nThis plugin interacts nicely with this grid system, but does not depend on it. This documentation\nshows how to integrate this plugin with the 960.gs, but it might also work perfectly well with\nTwitter Bootstrap.</p>\n<p>The problem with the shipped text plugin is that an editor can add text, images, etc. to a\nplaceholder, but he gains no control over the layout of the given container. Often this is desired\nbehavior to enforce a consistent layout, but sometimes it is annoying, since too many specialized\ntemplates have to be created.</p>\n<p>Say, an editor wants to use the 960 Grid System with 12 columns. Now for for each possible\ncombinations of rows and colums, a special template must be created. This can result in a template\nsuch as:</p>\n<pre>&lt;div class=\"container_12\"&gt;\n    &lt;div class=\"grid_9\"&gt;{% placeholder \"g1\" %}&lt;/div&gt;&lt;div class=\"grid_3\"&gt;{% placeholder \"g2\" %}&lt;/div&gt;\n    &lt;div class=\"grid_6\"&gt;{% placeholder \"g3\" %}&lt;/div&gt;&lt;div class=\"grid_6\"&gt;{% placeholder \"g4\" %}&lt;/div&gt;\n    &lt;div class=\"grid_4\"&gt;{% placeholder \"g5\" %}&lt;/div&gt;&lt;div class=\"grid_4\"&gt;{% placeholder \"g6\" %}&lt;/div&gt;&lt;div class=\"grid_4\"&gt;{% placeholder \"g7\" %}&lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<p>Here each grid-div gets its own placeholder. If an editor needs many similar layouts such as the one\nshown above, it can be hard to maintain all possible combinations of rows and columns.</p>\n<p>This <strong>cmsplugin-text-wrapper</strong> gives an editor of a CMS page a flexible and clean way to add as\nmany different rows, with as many different columns as he wishes. Each of these columns can have\ntheir own widths.</p>\n<p>If this grid system is enforced, the editor gains control over certain parts of the layout without\nhaving to fiddle with div tags nor snippets.</p>\n<p>Download the files <tt>reset.css</tt>, <tt>text.css</tt> and <tt>960.css</tt> from <a href=\"http://github.com/nathansmith/960-Grid-System/zipball/master\" rel=\"nofollow\">http://github.com/nathansmith/960-Grid-System/zipball/master</a>\nand add them to your stylesheets.</p>\n<p>In your templates directory, create a template named <tt><span class=\"pre\">container-12.html</span></tt>:</p>\n<pre>... other stuff goes here\n&lt;div class=\"container_12\"&gt;\n    {% placeholder \"Container Content\" %}\n&lt;/div&gt;\n... more stuff goes here\n</pre>\n<p>and add it to your CMS_TEMPLATES tuple.</p>\n<p>In your templates directory, create another template named <tt>grid.html</tt>:</p>\n<pre>&lt;div class=\"{{ grid_class }} {{extra_classes}}\"&gt;\n    {{ body|safe }}\n&lt;/div&gt;\n</pre>\n<p>and add it in different configurations to your <tt>CMS_TEXT_WRAPPERS</tt> tuples:</p>\n<pre>CMS_TEXT_WRAPPERS = (\n    ('Grid 3', {\n        'render_template': 'grid.html',\n        'extra_context': {'grid_class': 'grid_3'}\n    }),\n    ('Grid 6', {\n        'render_template': 'grid.html',\n        'extra_context': {'grid_class': 'grid_6'}\n    }),\n    ('Grid 12', {\n        'render_template': 'grid.html',\n        'extra_context': {'grid_class': 'grid_12'}\n    }),\n    ... and more ...\n)\nCMS_TEXT_WRAPPER_CLASSES = ('alpha', 'omega',)\n</pre>\n<p>Now, after choosing a plugin of type <strong>Text</strong> in the CMS admin backend, two additionals fields are\nadded. The first is a select box labeled <strong>Wrap into</strong> where the editor can choose one of the\ngrids. The second is a list of checkboxes, one for each wrapper classes.</p>\n</div>\n<div id=\"version-history\">\n<h2>Version history</h2>\n<ul>\n<li>0.5: final release which could replace <strong>cmsplugin-text</strong> seamlessly.</li>\n<li>0.6: added a MultipleSelectField to add extra classes to the wrapper.</li>\n</ul>\n<div id=\"related-plugins-which-works-in-a-similar-way-as-cmsplugin-text-wrapper\">\n<h3>Related plugins which works in a similar way as <strong>cmsplugin-text-wrapper</strong>:</h3>\n</div>\n</div>\n<div id=\"text-plugin-ng\">\n<h2>text-plugin-ng</h2>\n<p>Download from <a href=\"https://github.com/KristianOellegaard/cmsplugin-text-ng\" rel=\"nofollow\">https://github.com/KristianOellegaard/cmsplugin-text-ng</a> .</p>\n<p><strong>text-plugin-ng</strong> is not intended to replace the default text plugin. It is\nan add on to the text plugin as shipped with Django CMS and is not compatible\nwith it. Therefore an editor gets a choice of two text plugin, the one shipped\nwith Django CMS and <strong>cmsplugin-text-ng</strong>. For each placeholder he then has to\nchoose from one of those two.</p>\n<p>Additionally the editor has to maintain two extra tables with named templates.</p>\n</div>\n<div id=\"django-cms-columns\">\n<h2>django-cms-columns</h2>\n<p>Download from <a href=\"https://github.com/philomat/django-cms-columns\" rel=\"nofollow\">https://github.com/philomat/django-cms-columns</a></p>\n<p><strong>django-cms-columns</strong> offers support for the grid systems [YAML](<a href=\"http://www.yaml.de/en/documentation/practice/subtemplates.html\" rel=\"nofollow\">http://www.yaml.de/en/documentation/practice/subtemplates.html</a>)\nand [Blueprint](<a href=\"http://www.blueprintcss.org/\" rel=\"nofollow\">http://www.blueprintcss.org/</a>) in the form of built in templates.</p>\n<p>It does not seem to be supported any more.</p>\n</div>\n\n          </div>"}, "last_serial": 825437, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "184b6072d4b3361092685f5eff0544d1", "sha256": "f4432c68031a5acb29c64d1a19c713f5f51c716ac0dbd406c1f67933c4fc9ff1"}, "downloads": -1, "filename": "cmsplugin-text-wrapper-0.1.tar.gz", "has_sig": false, "md5_digest": "184b6072d4b3361092685f5eff0544d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8096, "upload_time": "2012-11-16T08:49:35", "upload_time_iso_8601": "2012-11-16T08:49:35.463963Z", "url": "https://files.pythonhosted.org/packages/a2/3a/22a19e699aa092e6c92fb11c61ddca429a6308ef9894cfad2a256481209a/cmsplugin-text-wrapper-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "1c8f184802ec9d943fb828ebc81977cd", "sha256": "77f2cee7fb4176ac586f6d0f177ebab683620a568fae8c4989411343db2a833a"}, "downloads": -1, "filename": "cmsplugin-text-wrapper-0.2.tar.gz", "has_sig": false, "md5_digest": "1c8f184802ec9d943fb828ebc81977cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8260, "upload_time": "2012-11-16T11:32:32", "upload_time_iso_8601": "2012-11-16T11:32:32.565797Z", "url": "https://files.pythonhosted.org/packages/95/9f/c6a52fc55130b680af396df59b8c38642c764ed125d6365eff18537a81ee/cmsplugin-text-wrapper-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "88bc7eec0b1361839bc9887c22f13008", "sha256": "5ce74a8b7606d035983c87fda2cd43bf9a5798f52046905436b4085b55210631"}, "downloads": -1, "filename": "cmsplugin-text-wrapper-0.3.tar.gz", "has_sig": false, "md5_digest": "88bc7eec0b1361839bc9887c22f13008", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7368, "upload_time": "2012-11-27T11:35:54", "upload_time_iso_8601": "2012-11-27T11:35:54.060801Z", "url": "https://files.pythonhosted.org/packages/ee/71/a0ad65480860202e1a817c27db5f1a77e330853c9c77c3ad725c63da7ee3/cmsplugin-text-wrapper-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "bd4d38c42942768aafce2728934f2d22", "sha256": "2d2b33a9ce8516a81c1ca8ee6c7c587c2fd5ea82753beb5aeddcbbdcd80c1638"}, "downloads": -1, "filename": "cmsplugin-text-wrapper-0.4.tar.gz", "has_sig": false, "md5_digest": "bd4d38c42942768aafce2728934f2d22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7441, "upload_time": "2012-11-30T09:02:49", "upload_time_iso_8601": "2012-11-30T09:02:49.896970Z", "url": "https://files.pythonhosted.org/packages/5e/94/544f424ed6a61bd4a7f28d4384f71ddb4b1834b1e2b72c8cde494d190e75/cmsplugin-text-wrapper-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "85582cf02332d8a81a605aa13cef1ee5", "sha256": "5f173a9744d27d3750018f2bd956b87f8ede19006d57f72630d65a00fb138c64"}, "downloads": -1, "filename": "cmsplugin-text-wrapper-0.5.tar.gz", "has_sig": false, "md5_digest": "85582cf02332d8a81a605aa13cef1ee5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7411, "upload_time": "2012-12-06T11:42:36", "upload_time_iso_8601": "2012-12-06T11:42:36.845896Z", "url": "https://files.pythonhosted.org/packages/d0/08/4d9449e5e535e9d7dfb0325e28cd91ef130ca080753a439c46a78ff5796d/cmsplugin-text-wrapper-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "116fb74389c5b6dd4a2d4656a7e75c5e", "sha256": "5558f1bb3a35bd29f279c46ae93b2645972cf1a76062d5f101f8fdb9390e7718"}, "downloads": -1, "filename": "cmsplugin-text-wrapper-0.6.tar.gz", "has_sig": false, "md5_digest": "116fb74389c5b6dd4a2d4656a7e75c5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14523, "upload_time": "2013-07-26T08:48:18", "upload_time_iso_8601": "2013-07-26T08:48:18.567151Z", "url": "https://files.pythonhosted.org/packages/75/62/471ada3bab6195953a4fc6e2637d1ce92ec565b2eda566f40cd14f06c674/cmsplugin-text-wrapper-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "116fb74389c5b6dd4a2d4656a7e75c5e", "sha256": "5558f1bb3a35bd29f279c46ae93b2645972cf1a76062d5f101f8fdb9390e7718"}, "downloads": -1, "filename": "cmsplugin-text-wrapper-0.6.tar.gz", "has_sig": false, "md5_digest": "116fb74389c5b6dd4a2d4656a7e75c5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14523, "upload_time": "2013-07-26T08:48:18", "upload_time_iso_8601": "2013-07-26T08:48:18.567151Z", "url": "https://files.pythonhosted.org/packages/75/62/471ada3bab6195953a4fc6e2637d1ce92ec565b2eda566f40cd14f06c674/cmsplugin-text-wrapper-0.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:30 2020"}