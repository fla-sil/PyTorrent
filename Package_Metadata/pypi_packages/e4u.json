{"info": {"author": "Alisue", "author_email": "lambdalisue@hashnote.net", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "``e4u`` library is bundle library for `emoji4unicode <http://code.google.com/p/emoji4unicode/>`_\n\nit is for handling unicode emoji and carrier's emoji. the main feature is\n\n+\tConversion unicode emoji to carrier's emoji\n+\tConversion carrier's emoji to unicode emoji\n\nThe unicode emoji which this library can handle is described on http://www.unicode.org/~scherer/emoji4unicode/snapshot/full.html\n\nThis library referred to source code of emoji4unicode and `django-bpmobile <https://bitbucket.org/tokibito/django-bpmobile>`_\n\n\nInstall\n=================================================\n::\n\n\tsudo pip install e4u\n\nor::\n\n\tsudo pip install git+git://github.com/lambdalisue/e4u.git#egg=e4u\n\n\nRequired (Automatically installed)\n=================================================\n+ BeautifulSoup (for analysis carrier's Web site and emoji4unicode.xml)\n\n\nHow to use\n=================================================\nThis library use ``emoji4unicode.xml`` to create conversion table of emoji.\nSo you have to load it from filesystem or Internet. ``e4u.load()`` method\nload it from google code's trunk url and recommended. if you cannot connect\nto internet, use ``e4u.load(file=r\"some/path/emoji4unicode.xml\")`` insted. The\n``emoji4unicode.xml`` is found on http://code.google.com/p/emoji4unicode/source/browse/trunk/data/emoji4unicode.xml\n\nOnce you load ``emoji4unicode.xml``, you can translate emoji with ``e4u.translate()`` method.\nTo translate carrier's emoji to unicode emoji, use the method like ``contents = e4u.translate(contents, **e4u.DOCOMO_TRANSLATE_PROFILE)``\nTo translate unicode emoji to carrier's emoji, use the method like ``contents = e4u.translate(contents, reverse=True, **e4u.DOCOMO_TRANSLATE_PROFILE)``\n\nThe code below describe how to use the library.::\n\n\timport e4u\n\te4u.load()\n\tcarrier_contents = \"\\xF8\\x9F \\xF8\\xA0 \\xF8\\xA1\"\t\t# Sun, Cloud, Rain in DoCoMo emoji\n\tunicode_contents = u\"\\u2600 \\u2601 \\u2614\"\t\t\t# Sun, Cloud, Rain in Unicode emoji\n\t\n\t# DoCoMo => Unicode\n\tcontents = carrier_contents\n\texpected = unicode_contents\n\t# Translate emoji with DoCoMo profile (= {'carrier':'docomo', 'encoding':'cp932'})\n\tresult = e4u.translate(contents, **e4u.DOCOMO_TRANSLATE_PROFILE)\n\t\n\tassert isinstance(result, unicode)\t\t# return value is Unicode\n\tassert result == expected \n\t\n\t# Unicode => DoCoMo\n\tcontents = unicode_contents\n\texpected = carrier_contents\n\t# Translate emoji with DoCoMo profile with reverse=True\n\tresult = e4u.translate(contents, reverse=True, **e4u.DOCOMO_TRANSLATE_PROFILE)\n\t\n\tassert isinstance(result, unicode)\t\t# return value is Unicode\n\tassert result.encode('cp932', 'replace') == expected\n\nSupported carriers\n==================================================\nCurrently only DoCoMo, KDDI, SoftBank and Google is supported. the carrier name which you can pass to \nthe ``e4u.translate()`` method is\n\n+\ttext\t\t\t- to text\n+\tdocomo_img\t\t- to img tag using DoCoMo emoji\n+\tkddi_img\t\t- to img tag using KDDI emoji (recommended for PC or other device which doesn't support emoji)\n+\tsoftbank_img\t- to img tag using SoftBank emoji (not recommended, SoftBank may reject access from external so doesn't work)\n+\tgoogle\t\t\t- to GMail emoji. I have no idea how can I use it but in case.\n+\tdocomo\t\t\t- to DoCoMo emoji. SJIS format (decoded as unicode)\n+\tkddi\t\t\t- to KDDI emoji. SJIS format (decoded as unicode)\n+\tsoftbank\t\t- to SoftBank emoji. Unicode format\n\nMethods\n==================================================\n\n``e4u.load(filename=None, url=r\"http://emoji4unicode.googlecode.com/svn/trunk/data/emoji4unicode.xml\", loader_class=loader.Loader)``\n    to load emoji4unicode.xml and build internal conversion table. this method never affect twice. use ``e4u.reload()`` insted to reloading library.\n\n``e4u.reload(filename=None, url=r\"http://emoji4unicode.googlecode.com/svn/trunk/data/emoji4unicode.xml\", loader_class=loader.Loader)``\n    force to reload emoji4unicode.xml, use ``e4u.load()`` method insted for general use.\n\n``e4u.has_loaded()``\n    return True if the ``e4u.load()`` method has called. use ``e4u.load()`` method insted for general use. never do like below::\n\n        # stupid way\n        import e4u\n        if not e4u.has_loaded():\n            e4u.reload()\n        \n        # smarter\n        import e4u\n        e4u.load()\n\n``e4u.get(id)``\n    get emoji symbol instance for the id. the id is described on http://www.unicode.org/~scherer/emoji4unicode/snapshot/full.html\n    strip 'e-' from ID like '000' for 'e-000' and pass as unicode format.\n\n``e4u.translate(source, carrier, reverse=False, encoding=None)``\n    translate unicode emoji contained in source to carrier's emoji or reverse.\n\n``e4u.translate_char(source_char, carrier, reverse=False, encoding=None)``\n    translate unicode emoji char to carrier's emoji char. faster than ``e4u.translate()``\n    method but cannot handle text. use it for letter conversion.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/lambdalisue/e4u/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lambdalisue/e4u", "keywords": "emoji emoji4unicode mobile", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "e4u", "package_url": "https://pypi.org/project/e4u/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/e4u/", "project_urls": {"Download": "https://github.com/lambdalisue/e4u/tarball/master", "Homepage": "https://github.com/lambdalisue/e4u"}, "release_url": "https://pypi.org/project/e4u/0.2rc1/", "requires_dist": null, "requires_python": null, "summary": "Python's emoji conversion (unicode emoji <=> carrier's emoji) library (emoji4unicode project wrapper library)", "version": "0.2rc1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>e4u</tt> library is bundle library for <a href=\"http://code.google.com/p/emoji4unicode/\" rel=\"nofollow\">emoji4unicode</a></p>\n<p>it is for handling unicode emoji and carrier\u2019s emoji. the main feature is</p>\n<ul>\n<li>Conversion unicode emoji to carrier\u2019s emoji</li>\n<li>Conversion carrier\u2019s emoji to unicode emoji</li>\n</ul>\n<p>The unicode emoji which this library can handle is described on <a href=\"http://www.unicode.org/~scherer/emoji4unicode/snapshot/full.html\" rel=\"nofollow\">http://www.unicode.org/~scherer/emoji4unicode/snapshot/full.html</a></p>\n<p>This library referred to source code of emoji4unicode and <a href=\"https://bitbucket.org/tokibito/django-bpmobile\" rel=\"nofollow\">django-bpmobile</a></p>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>sudo pip install e4u\n</pre>\n<p>or:</p>\n<pre>sudo pip install git+git://github.com/lambdalisue/e4u.git#egg=e4u\n</pre>\n</div>\n<div id=\"required-automatically-installed\">\n<h2>Required (Automatically installed)</h2>\n<ul>\n<li>BeautifulSoup (for analysis carrier\u2019s Web site and emoji4unicode.xml)</li>\n</ul>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<p>This library use <tt>emoji4unicode.xml</tt> to create conversion table of emoji.\nSo you have to load it from filesystem or Internet. <tt>e4u.load()</tt> method\nload it from google code\u2019s trunk url and recommended. if you cannot connect\nto internet, use <tt>e4u.load(file=r\"some/path/emoji4unicode.xml\")</tt> insted. The\n<tt>emoji4unicode.xml</tt> is found on <a href=\"http://code.google.com/p/emoji4unicode/source/browse/trunk/data/emoji4unicode.xml\" rel=\"nofollow\">http://code.google.com/p/emoji4unicode/source/browse/trunk/data/emoji4unicode.xml</a></p>\n<p>Once you load <tt>emoji4unicode.xml</tt>, you can translate emoji with <tt>e4u.translate()</tt> method.\nTo translate carrier\u2019s emoji to unicode emoji, use the method like <tt>contents = e4u.translate(contents, **e4u.DOCOMO_TRANSLATE_PROFILE)</tt>\nTo translate unicode emoji to carrier\u2019s emoji, use the method like <tt>contents = e4u.translate(contents, reverse=True, **e4u.DOCOMO_TRANSLATE_PROFILE)</tt></p>\n<p>The code below describe how to use the library.:</p>\n<pre>import e4u\ne4u.load()\ncarrier_contents = \"\\xF8\\x9F \\xF8\\xA0 \\xF8\\xA1\"         # Sun, Cloud, Rain in DoCoMo emoji\nunicode_contents = u\"\\u2600 \\u2601 \\u2614\"                      # Sun, Cloud, Rain in Unicode emoji\n\n# DoCoMo =&gt; Unicode\ncontents = carrier_contents\nexpected = unicode_contents\n# Translate emoji with DoCoMo profile (= {'carrier':'docomo', 'encoding':'cp932'})\nresult = e4u.translate(contents, **e4u.DOCOMO_TRANSLATE_PROFILE)\n\nassert isinstance(result, unicode)              # return value is Unicode\nassert result == expected\n\n# Unicode =&gt; DoCoMo\ncontents = unicode_contents\nexpected = carrier_contents\n# Translate emoji with DoCoMo profile with reverse=True\nresult = e4u.translate(contents, reverse=True, **e4u.DOCOMO_TRANSLATE_PROFILE)\n\nassert isinstance(result, unicode)              # return value is Unicode\nassert result.encode('cp932', 'replace') == expected\n</pre>\n</div>\n<div id=\"supported-carriers\">\n<h2>Supported carriers</h2>\n<p>Currently only DoCoMo, KDDI, SoftBank and Google is supported. the carrier name which you can pass to\nthe <tt>e4u.translate()</tt> method is</p>\n<ul>\n<li>text                    - to text</li>\n<li>docomo_img              - to img tag using DoCoMo emoji</li>\n<li>kddi_img                - to img tag using KDDI emoji (recommended for PC or other device which doesn\u2019t support emoji)</li>\n<li>softbank_img    - to img tag using SoftBank emoji (not recommended, SoftBank may reject access from external so doesn\u2019t work)</li>\n<li>google                  - to GMail emoji. I have no idea how can I use it but in case.</li>\n<li>docomo                  - to DoCoMo emoji. SJIS format (decoded as unicode)</li>\n<li>kddi                    - to KDDI emoji. SJIS format (decoded as unicode)</li>\n<li>softbank                - to SoftBank emoji. Unicode format</li>\n</ul>\n</div>\n<div id=\"methods\">\n<h2>Methods</h2>\n<dl>\n<dt><tt>e4u.load(filename=None, <span class=\"pre\">url=r\"http://emoji4unicode.googlecode.com/svn/trunk/data/emoji4unicode.xml\",</span> loader_class=loader.Loader)</tt></dt>\n<dd>to load emoji4unicode.xml and build internal conversion table. this method never affect twice. use <tt>e4u.reload()</tt> insted to reloading library.</dd>\n<dt><tt>e4u.reload(filename=None, <span class=\"pre\">url=r\"http://emoji4unicode.googlecode.com/svn/trunk/data/emoji4unicode.xml\",</span> loader_class=loader.Loader)</tt></dt>\n<dd>force to reload emoji4unicode.xml, use <tt>e4u.load()</tt> method insted for general use.</dd>\n<dt><tt>e4u.has_loaded()</tt></dt>\n<dd><p>return True if the <tt>e4u.load()</tt> method has called. use <tt>e4u.load()</tt> method insted for general use. never do like below:</p>\n<pre># stupid way\nimport e4u\nif not e4u.has_loaded():\n    e4u.reload()\n\n# smarter\nimport e4u\ne4u.load()\n</pre>\n</dd>\n<dt><tt>e4u.get(id)</tt></dt>\n<dd>get emoji symbol instance for the id. the id is described on <a href=\"http://www.unicode.org/~scherer/emoji4unicode/snapshot/full.html\" rel=\"nofollow\">http://www.unicode.org/~scherer/emoji4unicode/snapshot/full.html</a>\nstrip \u2018e-\u2018 from ID like \u2018000\u2019 for \u2018e-000\u2019 and pass as unicode format.</dd>\n<dt><tt>e4u.translate(source, carrier, reverse=False, encoding=None)</tt></dt>\n<dd>translate unicode emoji contained in source to carrier\u2019s emoji or reverse.</dd>\n<dt><tt>e4u.translate_char(source_char, carrier, reverse=False, encoding=None)</tt></dt>\n<dd>translate unicode emoji char to carrier\u2019s emoji char. faster than <tt>e4u.translate()</tt>\nmethod but cannot handle text. use it for letter conversion.</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 3891999, "releases": {"0.1rc1": [], "0.1rc2": [{"comment_text": "built for Linux-2.6.38-8-generic-pae-i686-with-glibc2.4", "digests": {"md5": "07b00555ee6f55b73dd75dd829af303e", "sha256": "35b7b8cd4e947aaf712c771c6d6e0b95ceef96f1e0235f19d59c490e3e9e8824"}, "downloads": -1, "filename": "e4u-0.1rc2.linux-i686.tar.gz", "has_sig": false, "md5_digest": "07b00555ee6f55b73dd75dd829af303e", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 59683, "upload_time": "2011-06-11T06:36:30", "upload_time_iso_8601": "2011-06-11T06:36:30.469040Z", "url": "https://files.pythonhosted.org/packages/de/86/d85f1e27e09023e7d9137cff1a988213def38413e42202e190ec80e1a4fb/e4u-0.1rc2.linux-i686.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb5c4a4648167e5b6e19a85d3688ceb6", "sha256": "8a4537c4ecb9dc59d0ce0aa7b8d37af9a2b7e8aa858afad04e14e99e7359329b"}, "downloads": -1, "filename": "e4u-0.1rc2-py2.7.egg", "has_sig": false, "md5_digest": "fb5c4a4648167e5b6e19a85d3688ceb6", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 66571, "upload_time": "2011-06-11T06:36:40", "upload_time_iso_8601": "2011-06-11T06:36:40.356808Z", "url": "https://files.pythonhosted.org/packages/e8/7d/823c79f0f175d285c1f01c3b196d829854ce1c7944a181ece8f488def17a/e4u-0.1rc2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "312b27cf4af5ac4bcf55e08b8e05650b", "sha256": "b9f330e0d3e9c63ced14eca7e6c7f5edb9ab58e8e0e7496bedb8dbabbe783041"}, "downloads": -1, "filename": "e4u-0.1rc2.tar.gz", "has_sig": false, "md5_digest": "312b27cf4af5ac4bcf55e08b8e05650b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50320, "upload_time": "2011-06-11T06:36:21", "upload_time_iso_8601": "2011-06-11T06:36:21.929848Z", "url": "https://files.pythonhosted.org/packages/60/88/19a2ead69f15a34f783953bb5a4ad49fa7cdce9e178ad5e0a5c575f1cf4d/e4u-0.1rc2.tar.gz", "yanked": false}], "0.1rc3": [{"comment_text": "", "digests": {"md5": "c4c2994a23c540e74831347c268bcc78", "sha256": "2c45ac5d6396f5189c689c090fb92182f7452e87024772ea314adf5ce46a9c88"}, "downloads": -1, "filename": "e4u-0.1rc3-py2.7.egg", "has_sig": false, "md5_digest": "c4c2994a23c540e74831347c268bcc78", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 66561, "upload_time": "2011-06-11T07:44:27", "upload_time_iso_8601": "2011-06-11T07:44:27.621241Z", "url": "https://files.pythonhosted.org/packages/29/74/76d29828d0f1ef19592c8c4fe935e0837879ee50c2b76655212252c5b100/e4u-0.1rc3-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "36a2483a3b9cdb78ac6a599ff84c4970", "sha256": "ca2ebc355f8924bf6b9a36938727117e85ee99875fc8074e420ec5f794c29fcf"}, "downloads": -1, "filename": "e4u-0.1rc3.tar.gz", "has_sig": false, "md5_digest": "36a2483a3b9cdb78ac6a599ff84c4970", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50339, "upload_time": "2011-06-11T07:44:09", "upload_time_iso_8601": "2011-06-11T07:44:09.033054Z", "url": "https://files.pythonhosted.org/packages/61/d9/44cc75c8bc415b1a804407757cc1aec0b7af326eeb2c1d3fc0c82f69ebec/e4u-0.1rc3.tar.gz", "yanked": false}], "0.1rc4": [{"comment_text": "", "digests": {"md5": "1bfdcb96742c2a486499c953458c96cd", "sha256": "20fbb862a4b0bc3571058a8ae3177c595e3f6074608e8e367620482498070580"}, "downloads": -1, "filename": "e4u-0.1rc4.tar.gz", "has_sig": false, "md5_digest": "1bfdcb96742c2a486499c953458c96cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8469, "upload_time": "2013-06-13T07:14:14", "upload_time_iso_8601": "2013-06-13T07:14:14.679185Z", "url": "https://files.pythonhosted.org/packages/07/5b/6b73915cba922292ca3addd03e4dc018a7c0fe505794297ca118452c1941/e4u-0.1rc4.tar.gz", "yanked": false}], "0.1rc5": [{"comment_text": "", "digests": {"md5": "273e3fd0ff4c36250ae9f9bca3ec5f86", "sha256": "752d960b4fd2a37fba4fa15ba8838cf28ee8b1afdb53318e883295b8cc852e21"}, "downloads": -1, "filename": "e4u-0.1rc5.tar.gz", "has_sig": false, "md5_digest": "273e3fd0ff4c36250ae9f9bca3ec5f86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8675, "upload_time": "2018-05-23T16:31:25", "upload_time_iso_8601": "2018-05-23T16:31:25.838272Z", "url": "https://files.pythonhosted.org/packages/d5/79/639084d217067090089a1b7d6b23116c6339553a2ac2b319c91c6e30eb85/e4u-0.1rc5.tar.gz", "yanked": false}], "0.2rc1": [{"comment_text": "", "digests": {"md5": "9acc3ff9b40cef411e248c15d67d1427", "sha256": "0793204c89effd262388738e75b5fd3d77ae181b354f309f9d63cb98f57f426d"}, "downloads": -1, "filename": "e4u-0.2rc1.tar.gz", "has_sig": false, "md5_digest": "9acc3ff9b40cef411e248c15d67d1427", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50655, "upload_time": "2011-09-17T16:27:26", "upload_time_iso_8601": "2011-09-17T16:27:26.618722Z", "url": "https://files.pythonhosted.org/packages/fe/4e/53bb294db174bab26594d694ae8f353010f5bc74e5d9ca0f9af2b0444492/e4u-0.2rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9acc3ff9b40cef411e248c15d67d1427", "sha256": "0793204c89effd262388738e75b5fd3d77ae181b354f309f9d63cb98f57f426d"}, "downloads": -1, "filename": "e4u-0.2rc1.tar.gz", "has_sig": false, "md5_digest": "9acc3ff9b40cef411e248c15d67d1427", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50655, "upload_time": "2011-09-17T16:27:26", "upload_time_iso_8601": "2011-09-17T16:27:26.618722Z", "url": "https://files.pythonhosted.org/packages/fe/4e/53bb294db174bab26594d694ae8f353010f5bc74e5d9ca0f9af2b0444492/e4u-0.2rc1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:34 2020"}