{"info": {"author": "Bruno Rocha", "author_email": "rochacbruno@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "======\nManage\n======\n------------------------------------------------------------\nCommand Line Manager + Interactive Shell for Python Projects\n------------------------------------------------------------\n\n.. image:: https://img.shields.io/pypi/v/manage.svg\n        :target: https://pypi.python.org/pypi/manage\n\n.. image:: https://img.shields.io/travis/rochacbruno/manage.svg\n        :target: https://travis-ci.org/rochacbruno/manage\n\n.. image:: https://readthedocs.org/projects/manage/badge/?version=latest\n        :target: https://manage.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/rochacbruno/manage/shield.svg\n     :target: https://pyup.io/repos/github/rochacbruno/manage/\n     :alt: Updates\n\n\n* Free software: ISC license\n* Documentation: https://manage.readthedocs.io.\n\n\nFeatures\n========\n\nWith **manage** you add a **command line manager** to your Python project and\nalso it comes with an interactive shell with iPython support.\n\nAll you have to do is **init** your project directory (creating the manage.yml file)\n\n.. code-block:: console\n\n    $ pip install manage\n    $ cd /my_project_root_folder\n    $ manage init\n    creating manage.yml....\n\nThe file **manage.yml** describes how **manage** command should discover your app modules and custom commands and also it\ndefines which objects should be loaded in to the **shell**\n\n.. note::\n\n   Windows users may need to install proper version of PyYAML depending on the version of that thing you call an operating system,\n   installable available in: https://pypi.python.org/pypi/PyYAML\n   **or consider using Linux and don't worry about this as everything works well in Linux except games, photoshop and solitary game :)**\n\nThe Shell\n=========\n\nBy default the command :code:`manage shell` is included, it is a simple Python REPL console with some\nconfigurable options.\n\nYou can change the banner message to say anything you want, **e.g: \"Welcome to my shell!\"** and you can also\nspecify some objects to be automatically imported in to the shell context so when you enter in to the shell you\nalready have your project's common objects available.\n\nAlso you can specify a custom function to run or a string based code block to run, useful to init and configure the objects.\n\nConsoles\n\n:code:`manage shell` can start different consoles by passing the options\n\n- :code:`manage shell --ipython`  - This is the default (if ipython installed)\n- :code:`manage shell --ptpython`\n- :code:`manage shell --bpython`\n- :code:`manage shell --python` - This is the **default Python console** including support for autocomplete. (will be default when no other is installed)\n\nThe first thing you can do with **manage** is customizing the objects that will be automatically loaded in to shell,\nsaving you from importing and initializing a lot of stuff every time you need to play with your app via console.\n\nEdit **manage.yml** with:\n\n.. code-block:: yaml\n\n    project_name: My Awesome Project\n    help_text: |\n      This is the {project_name} interactive shell!\n    shell:\n      console: bpython\n      readline_enabled: false  # MacOS has no readline completion support\n      banner:\n        enabled: true\n        message: 'Welcome to {project_name} shell!'\n      auto_import:\n        display: true\n        objects:\n          my_system.config.settings:\n          my_system.my_module.MyClass:\n          my_system.my_module.OtherClass:\n            as: NiceClass\n          sys.path:\n            as: sp\n            init:\n              insert:\n                args:\n                  - 0\n                  - /path/to/be/added/automatically/to/sys/path\n      init_script: |\n        from my_system.config import settings\n        print(\"Initializing settings...\")\n        settings.configure()\n\n\nThen the above **manage.yaml** will give you a shell like this:\n\n.. code-block:: console\n\n    $ manage shell\n    Initializing settings...\n    Welcome to My Awesome Project shell!\n        Auto imported: ['sp', 'settings', 'MyClass', 'NiceCLass']\n    >>>  NiceClass. <tab> # autocomplete enabled\n\n\nWatch the demo:\n\n|asciicast|\n\n.. |asciicast| image:: https://asciinema.org/a/51042.png\n   :target: https://asciinema.org/a/51042\n\nCheck more examples in:\n\nhttps://github.com/rochacbruno/manage/tree/master/examples/\n\nThe famous **naval fate** example (used in docopt and click) is in:\n\nhttps://github.com/rochacbruno/manage/tree/master/examples/naval/\n\n\nCustom Commands\n===============\n\nSometimes you need to add custom commands in to your project\ne.g: A command to add users to your system::\n\n  $ manage create_user --name=Bruno --passwd=1234\n  Creating the user...\n\n**manage** has some different ways for you to define custom commands,\nyou can use **click commands** defined in your project modules,\nyou can also use **function_commands** defined anywhere in your project,\nand if really needed can define **inline_commands** inside the **manage.yml** file\n\n1. Using a custom click_commands module (single file)\n-----------------------------------------------------\n\nLets say you have a commands module in your application, you write your custom command there and **manage** will load it\n\n.. code-block:: python\n\n  # myproject/commands.py\n  import click\n  @click.command()\n  @click.option('--name')\n  @click.option('--passwd')\n  def create_user(name, passwd):\n      \"\"\"Create a new user\"\"\"\n      click.echo('Creating the user...')\n      mysystem.User.create(name, password)\n\n\nNow you go to your **manage.yml** or **.manage.yml** and specify your custom command module.\n\n.. code-block:: yaml\n\n  click_commands:\n    - module: commands\n\nNow you run **manage --help**\n\n.. code-block:: console\n\n  $ manage --help\n  ...\n  Commands:\n    create_user  Create a new user\n    debug        Shows the parsed manage file\n    init         Initialize a manage shell in current...\n    shell        Runs a Python shell with context\n\n\nUsing a click_commands package (multiple files)\n-----------------------------------------------\n\nIt is common to have different files to hold your commands so you may prefer having\na **commands/** package and some **python** modules inside it to hold commands.\n\n.. code-block:: python\n\n  # myproject/commands/user.py\n  import click\n  @click.command()\n  @click.option('--name')\n  @click.option('--passwd')\n  def create_user(name, passwd):\n      \"\"\"Create a new user\"\"\"\n      click.echo('Creating the user...')\n      mysystem.User.create(name, password)\n\n.. code-block:: python\n\n  # myproject/commands/system.py\n  import click\n  @click.command()\n  def clear_cache():\n      \"\"\"Clear the system cache\"\"\"\n      click.echo('The cache will be erased...')\n      mysystem.cache.clear()\n\nSo now you want to add all those commands to your **manage** editing your manage file with.\n\n.. code-block:: yaml\n\n  click_commands:\n    - module: commands\n\nNow you run **manage --help**  and you have commands from both modules\n\n.. code-block:: console\n\n  $ manage --help\n  ...\n  Commands:\n    create_user  Create a new user\n    clear_cache  Clear the system cache\n    debug        Shows the parsed manage file\n    init         Initialize a manage shell in current...\n    shell        Runs a Python shell with context\n\nCustom click_command names\n--------------------------\n\nSometimes the name of commands differ from the name of the function so you can\ncustomize it.\n\n.. code-block:: yaml\n\n  click_commands:\n    - module: commands.system\n      config:\n        clear_cache:\n          name: reset_cache\n          help_text: This resets the cache\n    - module: commands.user\n      config:\n        create_user:\n          name: new_user\n          help_text: This creates new user\n\nHaving different namespaces\n---------------------------\n\nIf customizing the name looks too much work for you, and you are only trying to handle naming conflicts\nyou can user namespaced commands.\n\n.. code-block:: yaml\n\n  namespaced: true\n  click_commands:\n    - module: commands\n\nNow you run **manage --help** and you can see all the commands in the same module will be namespaced by **modulename_**\n\n.. code-block:: console\n\n  $ manage --help\n  ...\n  Commands:\n    user_create_user    Create a new user\n    system_clear_cache  Clear the system cache\n    debug        Shows the parsed manage file\n    init         Initialize a manage shell in current...\n    shell        Runs a Python shell with context\n\nAnd you can even customize namespace for each module separately\n---------------------------------------------------------------\n\n.. note:: If **namespaced** is true all commands will be namespaced, set it to false in order to define separately\n\n\n.. code-block:: yaml\n\n  click_commands:\n    - module: commands.system\n      namespace: sys\n    - module: commands.user\n      namespace: user\n\nNow you run **manage --help** and you can see all the commands in the same module will be namespaced.\n\n.. code-block:: console\n\n  $ manage --help\n  ...\n  Commands:\n    user_create_user  Create a new user\n    sys_clear_cache  Clear the system cache\n    debug        Shows the parsed manage file\n    init         Initialize a manage shell in current...\n    shell        Runs a Python shell with context\n\n\n2. Defining your inline commands in manage file directly\n--------------------------------------------------------\n\nSometimes your command is so simple that you do not want (or can't) have a custom module,\nso you can put all your commands in yaml file directly.\n\n.. code-block:: yaml\n\n    inline_commands:\n      - name: clear_cache\n        help_text: Executes inline code to clear the cache\n        context:\n          - sys\n          - pprint\n        options:\n          --days:\n            default: 100\n        code: |\n          pprint.pprint({'clean_days': days, 'path': sys.path})\n\n\nNow running **manage --help**\n\n.. code-block:: console\n\n  $ manage --help\n  ...\n  Commands:\n    clear_cache  Executes inline code to clear the cache\n    debug        Shows the parsed manage file\n    init         Initialize a manage shell in current...\n    shell        Runs a Python shell with context\n\n\nAnd you can run using\n\n.. code-block:: console\n\n  $ manage clear_cache --days 15\n\n3. Using general functions as commands\n--------------------------------------\nAnd if you already has some defined function (any callable works).\n\n.. code-block:: python\n\n    # my_system.functions.py\n    def create_user(name, password):\n        print(\"Creating user %s\" % name)\n\n\n\n.. code-block:: yaml\n\n    function_commands:\n      - function: my_system.functions.create_user\n        name: new_user\n        help_text: Create new user\n        options:\n          --name:\n            required: true\n          --password:\n            required: true\n\n\nNow running **manage --help**\n\n.. code-block:: console\n\n  $ manage --help\n  ...\n  Commands:\n    new_user     Create new user\n    debug        Shows the parsed manage file\n    init         Initialize a manage shell in current...\n    shell        Runs a Python shell with context\n\n  $ manage new_user --name=Bruno --password=1234\n  Creating user Bruno\n\n\nFurther Explanations\n====================\n\n- You can say, **how this is useful?**, There's no need to get a separate package and configure everything in yaml, just use iPython to do it. Besides, IPython configuration has a lot more options and capabilities.\n- So I say: Nice! **If you don't like it, dont't use it!**\n\nCredits\n=======\n\n- This is inspired by **Django's manage.py command**\n- This is based on click_\n- This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _click: http://click.pocoo.org\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.12 (2016-08-15)\n-------------------\n* Readline is optional because of MacOS compat\n\n0.1.11 (2016-08-15)\n-------------------\n* Submodules import\n* multiple 'as' names\n\n0.1.10 (2016-07-04)\n-------------------\n* Bpython added\n\n0.1.9 (2016-07-03)\n------------------\n* Bpython added\n\n0.1.8 (2016-07-03)\n------------------\n* Python 3 dict fixes\n\n0.1.7 (2016-06-26)\n------------------\n* exec bug fix for py3\n\n0.1.6 (2016-06-26)\n------------------\n* exec bug fix\n\n0.1.5 (2016-06-25)\n------------------\n* added support to commands collector (see quokka cms)\n\n0.1.4 (2016-06-22)\n------------------\n* Fix missing deps\n\n0.1.3 (2016-06-19)\n------------------\n* Support to function_commands\n\n0.1.2 (2016-06-17)\n------------------\n* Support to inline_commands\n\n0.1.1 (2016-06-14)\n------------------\n* Support to custom and hidden manage_file\n\n0.1.0 (2016-06-09)\n------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rochacbruno/manage", "keywords": "manage", "license": "ISC license", "maintainer": "", "maintainer_email": "", "name": "manage", "package_url": "https://pypi.org/project/manage/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/manage/", "project_urls": {"Homepage": "https://github.com/rochacbruno/manage"}, "release_url": "https://pypi.org/project/manage/0.1.13/", "requires_dist": ["Click (>=6.0)", "PyYAML (>=3.11)", "import-string", "six"], "requires_python": "", "summary": "Command Line Manager + Interactive Shell for Python Projects", "version": "0.1.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            ======<br>Manage<br>======<br>------------------------------------------------------------<br>Command Line Manager + Interactive Shell for Python Projects<br>------------------------------------------------------------<br><br>.. image:: https://img.shields.io/pypi/v/manage.svg<br>        :target: https://pypi.python.org/pypi/manage<br><br>.. image:: https://img.shields.io/travis/rochacbruno/manage.svg<br>        :target: https://travis-ci.org/rochacbruno/manage<br><br>.. image:: https://readthedocs.org/projects/manage/badge/?version=latest<br>        :target: https://manage.readthedocs.io/en/latest/?badge=latest<br>        :alt: Documentation Status<br><br>.. image:: https://pyup.io/repos/github/rochacbruno/manage/shield.svg<br>     :target: https://pyup.io/repos/github/rochacbruno/manage/<br>     :alt: Updates<br><br><br>* Free software: ISC license<br>* Documentation: https://manage.readthedocs.io.<br><br><br>Features<br>========<br><br>With **manage** you add a **command line manager** to your Python project and<br>also it comes with an interactive shell with iPython support.<br><br>All you have to do is **init** your project directory (creating the manage.yml file)<br><br>.. code-block:: console<br><br>    $ pip install manage<br>    $ cd /my_project_root_folder<br>    $ manage init<br>    creating manage.yml....<br><br>The file **manage.yml** describes how **manage** command should discover your app modules and custom commands and also it<br>defines which objects should be loaded in to the **shell**<br><br>.. note::<br><br>   Windows users may need to install proper version of PyYAML depending on the version of that thing you call an operating system,<br>   installable available in: https://pypi.python.org/pypi/PyYAML<br>   **or consider using Linux and don't worry about this as everything works well in Linux except games, photoshop and solitary game :)**<br><br>The Shell<br>=========<br><br>By default the command :code:`manage shell` is included, it is a simple Python REPL console with some<br>configurable options.<br><br>You can change the banner message to say anything you want, **e.g: \"Welcome to my shell!\"** and you can also<br>specify some objects to be automatically imported in to the shell context so when you enter in to the shell you<br>already have your project's common objects available.<br><br>Also you can specify a custom function to run or a string based code block to run, useful to init and configure the objects.<br><br>Consoles<br><br>:code:`manage shell` can start different consoles by passing the options<br><br>- :code:`manage shell --ipython`  - This is the default (if ipython installed)<br>- :code:`manage shell --ptpython`<br>- :code:`manage shell --bpython`<br>- :code:`manage shell --python` - This is the **default Python console** including support for autocomplete. (will be default when no other is installed)<br><br>The first thing you can do with **manage** is customizing the objects that will be automatically loaded in to shell,<br>saving you from importing and initializing a lot of stuff every time you need to play with your app via console.<br><br>Edit **manage.yml** with:<br><br>.. code-block:: yaml<br><br>    project_name: My Awesome Project<br>    help_text: |<br>      This is the {project_name} interactive shell!<br>    shell:<br>      console: bpython<br>      readline_enabled: false  # MacOS has no readline completion support<br>      banner:<br>        enabled: true<br>        message: 'Welcome to {project_name} shell!'<br>      auto_import:<br>        display: true<br>        objects:<br>          my_system.config.settings:<br>          my_system.my_module.MyClass:<br>          my_system.my_module.OtherClass:<br>            as: NiceClass<br>          sys.path:<br>            as: sp<br>            init:<br>              insert:<br>                args:<br>                  - 0<br>                  - /path/to/be/added/automatically/to/sys/path<br>      init_script: |<br>        from my_system.config import settings<br>        print(\"Initializing settings...\")<br>        settings.configure()<br><br><br>Then the above **manage.yaml** will give you a shell like this:<br><br>.. code-block:: console<br><br>    $ manage shell<br>    Initializing settings...<br>    Welcome to My Awesome Project shell!<br>        Auto imported: ['sp', 'settings', 'MyClass', 'NiceCLass']<br>    &gt;&gt;&gt;  NiceClass. &lt;tab&gt; # autocomplete enabled<br><br><br>Watch the demo:<br><br>|asciicast|<br><br>.. |asciicast| image:: https://asciinema.org/a/51042.png<br>   :target: https://asciinema.org/a/51042<br><br>Check more examples in:<br><br>https://github.com/rochacbruno/manage/tree/master/examples/<br><br>The famous **naval fate** example (used in docopt and click) is in:<br><br>https://github.com/rochacbruno/manage/tree/master/examples/naval/<br><br><br>Custom Commands<br>===============<br><br>Sometimes you need to add custom commands in to your project<br>e.g: A command to add users to your system::<br><br>  $ manage create_user --name=Bruno --passwd=1234<br>  Creating the user...<br><br>**manage** has some different ways for you to define custom commands,<br>you can use **click commands** defined in your project modules,<br>you can also use **function_commands** defined anywhere in your project,<br>and if really needed can define **inline_commands** inside the **manage.yml** file<br><br>1. Using a custom click_commands module (single file)<br>-----------------------------------------------------<br><br>Lets say you have a commands module in your application, you write your custom command there and **manage** will load it<br><br>.. code-block:: python<br><br>  # myproject/commands.py<br>  import click<br>  @click.command()<br>  @click.option('--name')<br>  @click.option('--passwd')<br>  def create_user(name, passwd):<br>      \"\"\"Create a new user\"\"\"<br>      click.echo('Creating the user...')<br>      mysystem.User.create(name, password)<br><br><br>Now you go to your **manage.yml** or **.manage.yml** and specify your custom command module.<br><br>.. code-block:: yaml<br><br>  click_commands:<br>    - module: commands<br><br>Now you run **manage --help**<br><br>.. code-block:: console<br><br>  $ manage --help<br>  ...<br>  Commands:<br>    create_user  Create a new user<br>    debug        Shows the parsed manage file<br>    init         Initialize a manage shell in current...<br>    shell        Runs a Python shell with context<br><br><br>Using a click_commands package (multiple files)<br>-----------------------------------------------<br><br>It is common to have different files to hold your commands so you may prefer having<br>a **commands/** package and some **python** modules inside it to hold commands.<br><br>.. code-block:: python<br><br>  # myproject/commands/user.py<br>  import click<br>  @click.command()<br>  @click.option('--name')<br>  @click.option('--passwd')<br>  def create_user(name, passwd):<br>      \"\"\"Create a new user\"\"\"<br>      click.echo('Creating the user...')<br>      mysystem.User.create(name, password)<br><br>.. code-block:: python<br><br>  # myproject/commands/system.py<br>  import click<br>  @click.command()<br>  def clear_cache():<br>      \"\"\"Clear the system cache\"\"\"<br>      click.echo('The cache will be erased...')<br>      mysystem.cache.clear()<br><br>So now you want to add all those commands to your **manage** editing your manage file with.<br><br>.. code-block:: yaml<br><br>  click_commands:<br>    - module: commands<br><br>Now you run **manage --help**  and you have commands from both modules<br><br>.. code-block:: console<br><br>  $ manage --help<br>  ...<br>  Commands:<br>    create_user  Create a new user<br>    clear_cache  Clear the system cache<br>    debug        Shows the parsed manage file<br>    init         Initialize a manage shell in current...<br>    shell        Runs a Python shell with context<br><br>Custom click_command names<br>--------------------------<br><br>Sometimes the name of commands differ from the name of the function so you can<br>customize it.<br><br>.. code-block:: yaml<br><br>  click_commands:<br>    - module: commands.system<br>      config:<br>        clear_cache:<br>          name: reset_cache<br>          help_text: This resets the cache<br>    - module: commands.user<br>      config:<br>        create_user:<br>          name: new_user<br>          help_text: This creates new user<br><br>Having different namespaces<br>---------------------------<br><br>If customizing the name looks too much work for you, and you are only trying to handle naming conflicts<br>you can user namespaced commands.<br><br>.. code-block:: yaml<br><br>  namespaced: true<br>  click_commands:<br>    - module: commands<br><br>Now you run **manage --help** and you can see all the commands in the same module will be namespaced by **modulename_**<br><br>.. code-block:: console<br><br>  $ manage --help<br>  ...<br>  Commands:<br>    user_create_user    Create a new user<br>    system_clear_cache  Clear the system cache<br>    debug        Shows the parsed manage file<br>    init         Initialize a manage shell in current...<br>    shell        Runs a Python shell with context<br><br>And you can even customize namespace for each module separately<br>---------------------------------------------------------------<br><br>.. note:: If **namespaced** is true all commands will be namespaced, set it to false in order to define separately<br><br><br>.. code-block:: yaml<br><br>  click_commands:<br>    - module: commands.system<br>      namespace: sys<br>    - module: commands.user<br>      namespace: user<br><br>Now you run **manage --help** and you can see all the commands in the same module will be namespaced.<br><br>.. code-block:: console<br><br>  $ manage --help<br>  ...<br>  Commands:<br>    user_create_user  Create a new user<br>    sys_clear_cache  Clear the system cache<br>    debug        Shows the parsed manage file<br>    init         Initialize a manage shell in current...<br>    shell        Runs a Python shell with context<br><br><br>2. Defining your inline commands in manage file directly<br>--------------------------------------------------------<br><br>Sometimes your command is so simple that you do not want (or can't) have a custom module,<br>so you can put all your commands in yaml file directly.<br><br>.. code-block:: yaml<br><br>    inline_commands:<br>      - name: clear_cache<br>        help_text: Executes inline code to clear the cache<br>        context:<br>          - sys<br>          - pprint<br>        options:<br>          --days:<br>            default: 100<br>        code: |<br>          pprint.pprint({'clean_days': days, 'path': sys.path})<br><br><br>Now running **manage --help**<br><br>.. code-block:: console<br><br>  $ manage --help<br>  ...<br>  Commands:<br>    clear_cache  Executes inline code to clear the cache<br>    debug        Shows the parsed manage file<br>    init         Initialize a manage shell in current...<br>    shell        Runs a Python shell with context<br><br><br>And you can run using<br><br>.. code-block:: console<br><br>  $ manage clear_cache --days 15<br><br>3. Using general functions as commands<br>--------------------------------------<br>And if you already has some defined function (any callable works).<br><br>.. code-block:: python<br><br>    # my_system.functions.py<br>    def create_user(name, password):<br>        print(\"Creating user %s\" % name)<br><br><br><br>.. code-block:: yaml<br><br>    function_commands:<br>      - function: my_system.functions.create_user<br>        name: new_user<br>        help_text: Create new user<br>        options:<br>          --name:<br>            required: true<br>          --password:<br>            required: true<br><br><br>Now running **manage --help**<br><br>.. code-block:: console<br><br>  $ manage --help<br>  ...<br>  Commands:<br>    new_user     Create new user<br>    debug        Shows the parsed manage file<br>    init         Initialize a manage shell in current...<br>    shell        Runs a Python shell with context<br><br>  $ manage new_user --name=Bruno --password=1234<br>  Creating user Bruno<br><br><br>Further Explanations<br>====================<br><br>- You can say, **how this is useful?**, There's no need to get a separate package and configure everything in yaml, just use iPython to do it. Besides, IPython configuration has a lot more options and capabilities.<br>- So I say: Nice! **If you don't like it, dont't use it!**<br><br>Credits<br>=======<br><br>- This is inspired by **Django's manage.py command**<br>- This is based on click_<br>- This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.<br><br>.. _click: http://click.pocoo.org<br>.. _Cookiecutter: https://github.com/audreyr/cookiecutter<br>.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage<br><br><br>=======<br>History<br>=======<br><br>0.1.12 (2016-08-15)<br>-------------------<br>* Readline is optional because of MacOS compat<br><br>0.1.11 (2016-08-15)<br>-------------------<br>* Submodules import<br>* multiple 'as' names<br><br>0.1.10 (2016-07-04)<br>-------------------<br>* Bpython added<br><br>0.1.9 (2016-07-03)<br>------------------<br>* Bpython added<br><br>0.1.8 (2016-07-03)<br>------------------<br>* Python 3 dict fixes<br><br>0.1.7 (2016-06-26)<br>------------------<br>* exec bug fix for py3<br><br>0.1.6 (2016-06-26)<br>------------------<br>* exec bug fix<br><br>0.1.5 (2016-06-25)<br>------------------<br>* added support to commands collector (see quokka cms)<br><br>0.1.4 (2016-06-22)<br>------------------<br>* Fix missing deps<br><br>0.1.3 (2016-06-19)<br>------------------<br>* Support to function_commands<br><br>0.1.2 (2016-06-17)<br>------------------<br>* Support to inline_commands<br><br>0.1.1 (2016-06-14)<br>------------------<br>* Support to custom and hidden manage_file<br><br>0.1.0 (2016-06-09)<br>------------------<br><br>* First release on PyPI.\n          </div>"}, "last_serial": 6125967, "releases": {"0.0.0.0": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "3201269db43ca5450533d76df685915a", "sha256": "357827afdb54886292c9662b791c973881b03ce91fa6d9bd095786b9da3eed64"}, "downloads": -1, "filename": "manage-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3201269db43ca5450533d76df685915a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 4466, "upload_time": "2016-06-10T20:08:42", "upload_time_iso_8601": "2016-06-10T20:08:42.523933Z", "url": "https://files.pythonhosted.org/packages/9f/d0/1c93ea562657fdc0f5a99692a36b3c9a144234e68d63ab4aaccd5207b84e/manage-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73e65d22afa4834402b19116fd0e1894", "sha256": "9715bc2b1c981ada05285711624d8da6f554cf4f7e5bb0226405561ec1228a99"}, "downloads": -1, "filename": "manage-0.1.0.tar.gz", "has_sig": false, "md5_digest": "73e65d22afa4834402b19116fd0e1894", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20840, "upload_time": "2016-06-10T20:08:23", "upload_time_iso_8601": "2016-06-10T20:08:23.619761Z", "url": "https://files.pythonhosted.org/packages/42/59/6ab7ad47b45ef2d35626e59eba710682847a8addcc9b918ac432b39c5203/manage-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "96706f485f5a9a044d73b113a1522fdd", "sha256": "e2edb3e9fa4cd61b489f220b0826c982bf1c887dcd0217ea0ee5505e9508c10d"}, "downloads": -1, "filename": "manage-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "96706f485f5a9a044d73b113a1522fdd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9542, "upload_time": "2016-06-14T03:11:10", "upload_time_iso_8601": "2016-06-14T03:11:10.326467Z", "url": "https://files.pythonhosted.org/packages/60/85/a7334e5b2e51e492c17be9e0ebb31808fb2bd9ac9c802e820c9cdf078066/manage-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68b6afff077466c7db6c5eee4f94d107", "sha256": "0e0651f7df771b195a44b9ba9dbd68ce5820c17a376c8caaacb13cc98818ee3b"}, "downloads": -1, "filename": "manage-0.1.1.tar.gz", "has_sig": false, "md5_digest": "68b6afff077466c7db6c5eee4f94d107", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15625, "upload_time": "2016-06-14T03:11:27", "upload_time_iso_8601": "2016-06-14T03:11:27.537934Z", "url": "https://files.pythonhosted.org/packages/7f/41/ccab3e3a709267bf90cb461a131a16234c620b7650a051b9cb79eda6011e/manage-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "8de11ef15701f6b876bf2bafb37b22e3", "sha256": "4ec0abed4c3adb378be71514485aa83fc1d2a55290ca6ddfb4395b586ba80278"}, "downloads": -1, "filename": "manage-0.1.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8de11ef15701f6b876bf2bafb37b22e3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14983, "upload_time": "2016-08-10T20:27:42", "upload_time_iso_8601": "2016-08-10T20:27:42.568838Z", "url": "https://files.pythonhosted.org/packages/a4/09/c2d1c2bdf6b0e2974550af2dc56f2597f70ccdb3bb24d72f5a14e572ee33/manage-0.1.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "273cb0480e1cb5fe37b9e137ce540be3", "sha256": "04790b366f247b7e1e2f0c0925e76f301fb6c390f81f108ad01b7fe02a8c9c19"}, "downloads": -1, "filename": "manage-0.1.10.tar.gz", "has_sig": false, "md5_digest": "273cb0480e1cb5fe37b9e137ce540be3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23883, "upload_time": "2016-08-10T20:27:44", "upload_time_iso_8601": "2016-08-10T20:27:44.514851Z", "url": "https://files.pythonhosted.org/packages/33/f1/10094e6e65ae62b9a0a646bbcce5f19e6c4783ec563aa6542aea03d91a2a/manage-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "cace81de3d9e31a51082857b3c61924a", "sha256": "34ae43297e552011837fea1f174f46935dba690c1b384bb27e06279749090e67"}, "downloads": -1, "filename": "manage-0.1.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cace81de3d9e31a51082857b3c61924a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15192, "upload_time": "2016-08-16T01:38:46", "upload_time_iso_8601": "2016-08-16T01:38:46.103197Z", "url": "https://files.pythonhosted.org/packages/46/d4/fac47db09476e42bb7fc7e10ca3c98d6350b9f09d3de6ee0c7c1903eca66/manage-0.1.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62afb92e998e9c9cdc4605826a0fcd3e", "sha256": "17ab4a94047dc527f79237897c5784be7f92894637c7586b95bc0b9f857f199a"}, "downloads": -1, "filename": "manage-0.1.11.tar.gz", "has_sig": false, "md5_digest": "62afb92e998e9c9cdc4605826a0fcd3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24053, "upload_time": "2016-08-16T01:38:48", "upload_time_iso_8601": "2016-08-16T01:38:48.437399Z", "url": "https://files.pythonhosted.org/packages/a2/fc/115749dcaafbe9e31f0320f147720a5cfd2d8167cac06ca14cdb6f784e85/manage-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "dfb5f8a02d611b59ddfc9c567c86a14e", "sha256": "479d9993610576eb2afb1a8279063b4ae948d0f4207df2c3b8d856733d4876f9"}, "downloads": -1, "filename": "manage-0.1.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dfb5f8a02d611b59ddfc9c567c86a14e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15265, "upload_time": "2016-08-16T02:02:21", "upload_time_iso_8601": "2016-08-16T02:02:21.258879Z", "url": "https://files.pythonhosted.org/packages/17/0c/0b81e265bb7f95332aab5d4a812b82b865c9cc317d431f32861bc0f9ef01/manage-0.1.12-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14bb3b186469c843b5c2a3060f5b8367", "sha256": "0b80b8f255579e5e637c151d5aee09f99e5c5692b2e5d11adc6ec70ab1e96415"}, "downloads": -1, "filename": "manage-0.1.12.tar.gz", "has_sig": false, "md5_digest": "14bb3b186469c843b5c2a3060f5b8367", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24114, "upload_time": "2016-08-16T02:02:23", "upload_time_iso_8601": "2016-08-16T02:02:23.388116Z", "url": "https://files.pythonhosted.org/packages/7d/e9/35c69570e49a11bc5af2c295d6dbb33305327e68866039091bbe3b3094fd/manage-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "8a9b7e7aaf92713f56e55525306ad120", "sha256": "bc9d8c26ec3e2e03795925fdd84c7f3188ad6827cd23ee863253aee95d14ba5b"}, "downloads": -1, "filename": "manage-0.1.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8a9b7e7aaf92713f56e55525306ad120", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15853, "upload_time": "2016-09-15T06:13:36", "upload_time_iso_8601": "2016-09-15T06:13:36.429025Z", "url": "https://files.pythonhosted.org/packages/91/2e/8358692e8322de51933a8010bf2ce914f583cf54631c1d4154359df65cd7/manage-0.1.13-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7d49746b004db1c3335a984b8c21df2", "sha256": "3e25892017e582dc1324c3c6f9cd7cffdc5342e2dc0cd0f1581a34a58312ebdb"}, "downloads": -1, "filename": "manage-0.1.13.tar.gz", "has_sig": false, "md5_digest": "f7d49746b004db1c3335a984b8c21df2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24801, "upload_time": "2016-09-15T06:13:38", "upload_time_iso_8601": "2016-09-15T06:13:38.873157Z", "url": "https://files.pythonhosted.org/packages/c0/c0/accff6b53b4aabad18a3c4dff6c3c4f8db20a85776fe739df39fc0c4dbd6/manage-0.1.13.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "33e6ae59570df37806e6475322b653d1", "sha256": "39ff63731f1d90aee2a76588f311108b161789facebb8cbfe3a3b4237325405f"}, "downloads": -1, "filename": "manage-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "33e6ae59570df37806e6475322b653d1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14094, "upload_time": "2016-06-17T15:51:09", "upload_time_iso_8601": "2016-06-17T15:51:09.096572Z", "url": "https://files.pythonhosted.org/packages/e2/3b/55af9ef729ef0bd7e8ba0b4cf8fa4540b28b423e8c1024f8a1a4fed069e4/manage-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3625baf3800b8cc300fef29d7ecd91ff", "sha256": "6232fec7b32799a2fec33c48465d91cb99d83aa7c4f39f11ee330b259b859462"}, "downloads": -1, "filename": "manage-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3625baf3800b8cc300fef29d7ecd91ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19904, "upload_time": "2016-06-17T15:51:13", "upload_time_iso_8601": "2016-06-17T15:51:13.209525Z", "url": "https://files.pythonhosted.org/packages/12/be/0b7499c51b8fb0e825392748fd51c33af250b6e14d23cf495610d2391f98/manage-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "0ae746ba8605bfe1d41269d515bc21fb", "sha256": "1ef1f94e0315a9400e1cffb4d2a1924d03cdace5c0baa78c32c2844131fd86ec"}, "downloads": -1, "filename": "manage-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ae746ba8605bfe1d41269d515bc21fb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14182, "upload_time": "2016-06-19T23:54:42", "upload_time_iso_8601": "2016-06-19T23:54:42.106703Z", "url": "https://files.pythonhosted.org/packages/16/91/9947ff801c0e61b11873898ed5044a8218a27161bfe19ac845e695014e3a/manage-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45086a0dc8e8488aba4facc7485fcca3", "sha256": "397287496695f92ee2cca345d9ee8af7b4185cf635324af9a93f5b258cbae58f"}, "downloads": -1, "filename": "manage-0.1.3.tar.gz", "has_sig": false, "md5_digest": "45086a0dc8e8488aba4facc7485fcca3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19980, "upload_time": "2016-06-19T23:54:46", "upload_time_iso_8601": "2016-06-19T23:54:46.061914Z", "url": "https://files.pythonhosted.org/packages/c6/c3/fe78b0263be7149b91de47551a3496d13c95d533713124c9bee726de7633/manage-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "cb3169f94de057008071c9a552a7856f", "sha256": "bfbeda46a0a961a5051f2b533790627302acb7436b8f2fcadb29cab7acb8ad7b"}, "downloads": -1, "filename": "manage-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cb3169f94de057008071c9a552a7856f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15453, "upload_time": "2016-06-23T02:53:32", "upload_time_iso_8601": "2016-06-23T02:53:32.568888Z", "url": "https://files.pythonhosted.org/packages/79/d3/ae8d39062f21d3a2d853df522fb351964a0b2fe0dccb1472a6016042235c/manage-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a2f56aa1340d6c5dc7b5d7fe6afc2bf", "sha256": "d3835d4f61de2ac51055b422a64e8d8ae2abbd1fa64c1fcadc34f1e3ea31577c"}, "downloads": -1, "filename": "manage-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5a2f56aa1340d6c5dc7b5d7fe6afc2bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23521, "upload_time": "2016-06-23T02:53:36", "upload_time_iso_8601": "2016-06-23T02:53:36.549589Z", "url": "https://files.pythonhosted.org/packages/91/eb/15138c5d67645859466a55b387f7ffcc2eb0ff36f775988812657e26aae5/manage-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "91cfafc34a965500e1c2557d5adca0a6", "sha256": "8cdb3527167a143f162d90fac86b72db585dbeaae0dfb17890fefd1d45608bb7"}, "downloads": -1, "filename": "manage-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "91cfafc34a965500e1c2557d5adca0a6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15380, "upload_time": "2016-06-25T04:37:36", "upload_time_iso_8601": "2016-06-25T04:37:36.065784Z", "url": "https://files.pythonhosted.org/packages/ad/94/5518a507b6a54dd02fc008c205d38fb4b2d71dfd0994ca916652cd22b2de/manage-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22c511a8ebf958069836d06b63d79f1a", "sha256": "ea2518a5027b43fcb668d883d77dc156a5b51eaa4b37de772d5f4567df320e54"}, "downloads": -1, "filename": "manage-0.1.5.tar.gz", "has_sig": false, "md5_digest": "22c511a8ebf958069836d06b63d79f1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23592, "upload_time": "2016-06-25T04:37:39", "upload_time_iso_8601": "2016-06-25T04:37:39.983291Z", "url": "https://files.pythonhosted.org/packages/c7/2e/9c2fd74d74397531215f82e0d259a8a7e86d1e3f6c3e9b82abe1581d8849/manage-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "b9833978c20eb8c43f4a9bf75760d989", "sha256": "410001843412a981d9f04d498eae2aea1381c748ae824c02ff453c08b2f5a6e3"}, "downloads": -1, "filename": "manage-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b9833978c20eb8c43f4a9bf75760d989", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15381, "upload_time": "2016-06-27T01:22:02", "upload_time_iso_8601": "2016-06-27T01:22:02.875991Z", "url": "https://files.pythonhosted.org/packages/51/f5/9ae2e21f39122ea0b32225c679fd2476df7a41ec09190f4b67440307397b/manage-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f79bbe70654d4474f106167eabae426a", "sha256": "63b89233d44d16f8de5b9a64224100c068467db62f64b350d7c70da88ba1eacb"}, "downloads": -1, "filename": "manage-0.1.6.tar.gz", "has_sig": false, "md5_digest": "f79bbe70654d4474f106167eabae426a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23583, "upload_time": "2016-06-27T01:22:07", "upload_time_iso_8601": "2016-06-27T01:22:07.075139Z", "url": "https://files.pythonhosted.org/packages/db/86/de2bf664d7848835863646199c36595f694fc0ef331b6199a7252d3720bb/manage-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "ae5b618910f1bb8c308b917aa687e581", "sha256": "560891d9e98f181b8ab5e68b531f1e62cee3bb85a0917df2afdbdb84dee369ad"}, "downloads": -1, "filename": "manage-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ae5b618910f1bb8c308b917aa687e581", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15413, "upload_time": "2016-06-27T01:40:44", "upload_time_iso_8601": "2016-06-27T01:40:44.281503Z", "url": "https://files.pythonhosted.org/packages/d8/55/e499c8b86758a09deb391ca962b7da403129e4381d58ecdcdf4f7fb1e403/manage-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26b543eb95f1136a358d79d93a78b763", "sha256": "f7efb4da2dbbbb861f62371c5deb753cb22c41685c82afaa5dc812c2f0275d06"}, "downloads": -1, "filename": "manage-0.1.7.tar.gz", "has_sig": false, "md5_digest": "26b543eb95f1136a358d79d93a78b763", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23613, "upload_time": "2016-06-27T01:40:48", "upload_time_iso_8601": "2016-06-27T01:40:48.257333Z", "url": "https://files.pythonhosted.org/packages/53/79/e2e8518e55f61f798d652267ffe24f41a15c51f05d937ebd167c2ddccec0/manage-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "6bc140987eab53db75bb733df72143dc", "sha256": "d579893df1916d6eca7ab98ffd7b52a19e7817a4ddb6a82a812d998df6a185bd"}, "downloads": -1, "filename": "manage-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6bc140987eab53db75bb733df72143dc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14546, "upload_time": "2016-07-03T03:17:06", "upload_time_iso_8601": "2016-07-03T03:17:06.904892Z", "url": "https://files.pythonhosted.org/packages/5b/92/1b8f9b95094c3cab0465edaa466a509e96d63aa9496548dcc7221c31d94f/manage-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fc669932e86c97ff28af0c81a9fb492", "sha256": "b9df202d6fbe41fbf354b69e156be4acbd7e7c102f8d36f060aa9ffd040f1fdf"}, "downloads": -1, "filename": "manage-0.1.8.tar.gz", "has_sig": false, "md5_digest": "8fc669932e86c97ff28af0c81a9fb492", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23319, "upload_time": "2016-07-03T03:17:11", "upload_time_iso_8601": "2016-07-03T03:17:11.131564Z", "url": "https://files.pythonhosted.org/packages/b4/11/8d4fc9f4052336bd3fd09e5ace9a3198fd3d30e4248c453111d2bb5dd5c5/manage-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "0033bcd8398a12ea98070691b678079c", "sha256": "3dfe19a4a73b3524ab8f444a499308fc839335b10b50ab244455977907f57015"}, "downloads": -1, "filename": "manage-0.1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0033bcd8398a12ea98070691b678079c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14843, "upload_time": "2016-07-03T19:52:55", "upload_time_iso_8601": "2016-07-03T19:52:55.642712Z", "url": "https://files.pythonhosted.org/packages/05/c0/5b3a53d2500b0d509c1a68d543c264d565ca6c4380fc12c9992b58cec01b/manage-0.1.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "221575c43b81aa4c71d7485a88ef2548", "sha256": "2c72ff16fc4a1553a27288854fa29c8347a6f98badee2bcd9d8e9aaad0a7a8b5"}, "downloads": -1, "filename": "manage-0.1.9.tar.gz", "has_sig": false, "md5_digest": "221575c43b81aa4c71d7485a88ef2548", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23743, "upload_time": "2016-07-03T19:52:59", "upload_time_iso_8601": "2016-07-03T19:52:59.981961Z", "url": "https://files.pythonhosted.org/packages/86/73/bea0355edd813c2e0a42846bfaef745c334dc7d3ff1c0fd4229b2397f45c/manage-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a9b7e7aaf92713f56e55525306ad120", "sha256": "bc9d8c26ec3e2e03795925fdd84c7f3188ad6827cd23ee863253aee95d14ba5b"}, "downloads": -1, "filename": "manage-0.1.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8a9b7e7aaf92713f56e55525306ad120", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15853, "upload_time": "2016-09-15T06:13:36", "upload_time_iso_8601": "2016-09-15T06:13:36.429025Z", "url": "https://files.pythonhosted.org/packages/91/2e/8358692e8322de51933a8010bf2ce914f583cf54631c1d4154359df65cd7/manage-0.1.13-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7d49746b004db1c3335a984b8c21df2", "sha256": "3e25892017e582dc1324c3c6f9cd7cffdc5342e2dc0cd0f1581a34a58312ebdb"}, "downloads": -1, "filename": "manage-0.1.13.tar.gz", "has_sig": false, "md5_digest": "f7d49746b004db1c3335a984b8c21df2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24801, "upload_time": "2016-09-15T06:13:38", "upload_time_iso_8601": "2016-09-15T06:13:38.873157Z", "url": "https://files.pythonhosted.org/packages/c0/c0/accff6b53b4aabad18a3c4dff6c3c4f8db20a85776fe739df39fc0c4dbd6/manage-0.1.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:38 2020"}