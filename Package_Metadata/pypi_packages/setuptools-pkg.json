{"info": {"author": "Alexander Shorin", "author_email": "kxepal@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "setuptools_pkg\n==============\n\nPlugin for setuptools that provides `bdist_pkg` command for building FreeBSD\npackage artifact.\n\nHow to use?\n-----------\n\nSimply add ``setuptools-pkg`` to ``setup_requires`` in your `setup.py`:\n\n.. code-block:: python\n\n    setup(\n        name=\"myproject\",\n        version=\"1.0.0\",\n        ...\n        setup_requires=[\"setuptools-pkg\"]\n    )\n\nOnce it's done, the ``setup.py bdist_pkg`` command will be available to produce\n``dist/myproject-1.0.0.tgz`` artifact.\n\nIf you don't want or just cannot have build-time dependencies, same effect can\nbe reached by installing `setuptools-pkg` as regular Python package.\n\nIf you need to build (actually, you want) ``txz`` packages and you're using\nPython 2, you should specify ``lzma-2.7`` extra to have lzma support.\nFor Python 3 there is no need in this since it's available out-of-the box.\n\nAdvanced usage\n--------------\n\nOk, that was too easy. In real world, things are not as easy as we would like\nto have them.\n\nEach project has dependencies, unless it's lucky one. For packages we would\nlike to preserve that information, but suddenly, packages in FreeBSD may be\nnamed differently from PyPI or be of the different version because of included\npatches. That's said, we need the mapping between them. Let's pick this project\nas an example:\n\n.. code-block:: python\n\n    setup(\n        ...,\n        # Typically, our dependencies looks like this:\n        install_requires=[\n            'setuptools>=18.2',\n        ],\n        extras_require={\n            'lzma-2.7': [\n                'backports.lzma==0.0.6',\n            ],\n        },\n        # The `command_options` is the way to specify parameters for setuptools\n        # commands from the `setup()` call. Alternatively, you can do that in\n        # `setup.cfg`.\n        command_options={\n            # bdist_pkg is the name of command setuptools_pkg provides\n            'bdist_pkg': {\n                # The requirements mapping itself. The __file__ instructs\n                # setuptools from where these values came from. Required.\n                # The rest is our mapping.\n                'requirements_mapping': (__file__, {\n                    # The key of this mapping is an exact value of a requires\n                    # list.\n                    'setuptools>=18.2': {\n                        # The value is a FreeBSD pkg metadata: package name,\n                        # origin and version.\n                        'name': 'py27-setuptools',\n                        'origin': 'devel/py-setuptools',\n                        # In our example setuptools>=18.2 tells us to pick\n                        # any version of setuptools greater than 18.2 and we\n                        # explicitly picks package with strict version 20.0.\n                        #\n                        # Please note, that version field is required while\n                        # it's not in MANIFEST file.\n                        'version': '20.0'\n                    },\n                    # Mapping for extras is optional till the moment you\n                    # want to make a package with these extras on.\n                    'backports.lzma==0.0.6': {\n                        'name': 'py27-backports_lzma',\n                        'origin': 'devel/py-backports_lzma',\n                        'version': '0.0.6'\n                    }\n                }),\n                # bdist_pkg turns all the extras into options and through\n                # selected options you can choose which ones will be enabled \n                # for a package. By default all the options are in \"off\" state.\n                'selected_options': [\n                    'lzma-2.7',\n                ]\n            }\n        }\n    )\n\nCommon pitfalls here:\n\n1. Requirements mapping is not portable. In your pkg repository there could be\n   different versions and different package namings.\n2. Requirements mapping should be up to date.\n3. There is no checks that mapping items are correct. You should pay attention\n   to what you put there.\n4. Having `requirements.txt` instead of using ``install_requires`` in\n   `setup.py`  will make your life harder since, technically, your project\n   has no dependencies and we cannot help you there to keep it consistent.\n   You'll have to specify ``deps`` command property directly and `bdist_pkg`\n   could not ensure that you have there all the packages that project actually\n   uses.\n\nThat's could be found quite boring. However, if all your dependencies in pkg\nrepository are names same as on PyPI and has Python version prefix (like\n``py35-setuptools``), than requirements mapping is optional. You can just make\npackage with:\n\n.. code-block:: bash\n\n    python setup.py bdist_pkg --use-pypi-deps\n\nExpert usage\n------------\n\nIn expert mode you may configure package generation in the way you like.\nHere is the complete list of options you may specify for `bdist_pkg`:\n\n- ``abi`` and ``arch``: FreeBSD arch and ABI for which package is made. You must\n  specify them manually if you build package on non-FreeBSD system or if you\n  distribution is not pure.\n\n- ``categories``: A list (literally) of package categories.\n  By default uses ``description`` field of project metadata.\n\n- ``comment``: Comment is a one-line description of this package.\n  By default uses ``description`` field of project metadata.\n\n- ``deps``: Package dependencies. Sometimes package may depend on non Python\n  projects, like those who provides services or libraries against which\n  your projects dynamically links. The format of deps specification is\n  the same as in `+MANIFEST` file, except it's Python dict, not JSON or UCL.\n  For Python dependencies check the ``requirements_mapping`` below.\n\n- ``desc``: A longer description of the package.\n  By default uses ``long_description`` field of project metadata.\n\n- ``groups``: A list of groups to provide.\n\n- ``license``: Project license.\n  By default uses ``license`` field of project metadata.\n\n- ``maintainer``: The maintainer's mail address. Python distributions defines\n  both maintainer and author entities who rules the package. By default,\n  the maintainer one is picked if available with fallback to author in case\n  when it's not.\n\n- ``name``: Package name. Since FreeBSD packages often uses own naming policy,\n  the custom name can be used instead of real project one.\n\n- ``options``: Package options. By default, this list is filled from the extras.\n\n- ``selected_options``: List of options which are used for this package build.\n\n- ``origin``: By default the generic origin ``devel/py-{project_name}`` is set.\n\n- ``prefix``:  The path where the files contained in this package are installed\n  (usually ``/usr/local``).\n\n- ``provides``: A list of features/services packages provides.\n\n- ``requires``: A list of features/services packages paquires.\n\n- ``requirements_mapping``: Mapping between PyPI requirements and FreeBSD\n  packages. This mapping helps to ensure that all the dependencies specified\n  in ``install_requires`` and ``extras_require`` will be satisfied through\n  system packages. The result fills the ``deps`` option.\n\n- ``scripts``: `Package scripts <https://wiki.freebsd.org/pkgng#Scripts>`_.\n\n- ``users``: A list of users to provide.\n\n- ``version``: Package version. As like package name, can be different from\n  real project version, depending on local modifications, patches, epoch etc.\n\n- ``www``: Project URL.\n\n\nFAQ\n---\n\n- **How it's different from pytoport?**\n\n  The `pytoport`_ project generates *ports* from modules on *PyPI*.\n  It does great job on this, but ``bdist_pkg`` solves a different problem,\n  especially, when your project cannot be published on PyPI.\n\n- **How can I make a package for some arbitrary Python project?**\n\n  You have to patch it first to let him produce proper package with the deps,\n  metadata and else bits. But seriously, you better use ports all the time.\n\n- **If I should use ports to make packages, why this project exists?**\n\n  In my case we have a couple of in-house projects which we package directly\n  without using any ports or cooking Makefiles.\n\n.. _pytoport: https://github.com/freebsd/pytoport/\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kxepal/setuptools-pkg", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "setuptools-pkg", "package_url": "https://pypi.org/project/setuptools-pkg/", "platform": "", "project_url": "https://pypi.org/project/setuptools-pkg/", "project_urls": {"Homepage": "https://github.com/kxepal/setuptools-pkg"}, "release_url": "https://pypi.org/project/setuptools-pkg/0.9/", "requires_dist": null, "requires_python": "", "summary": "Plugin for setuptools to build FreeBSD pkg", "version": "0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Plugin for setuptools that provides <cite>bdist_pkg</cite> command for building FreeBSD\npackage artifact.</p>\n<div id=\"how-to-use\">\n<h2>How to use?</h2>\n<p>Simply add <tt><span class=\"pre\">setuptools-pkg</span></tt> to <tt>setup_requires</tt> in your <cite>setup.py</cite>:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"myproject\"</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">\"1.0.0\"</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">setup_requires</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"setuptools-pkg\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Once it\u2019s done, the <tt>setup.py bdist_pkg</tt> command will be available to produce\n<tt><span class=\"pre\">dist/myproject-1.0.0.tgz</span></tt> artifact.</p>\n<p>If you don\u2019t want or just cannot have build-time dependencies, same effect can\nbe reached by installing <cite>setuptools-pkg</cite> as regular Python package.</p>\n<p>If you need to build (actually, you want) <tt>txz</tt> packages and you\u2019re using\nPython 2, you should specify <tt><span class=\"pre\">lzma-2.7</span></tt> extra to have lzma support.\nFor Python 3 there is no need in this since it\u2019s available out-of-the box.</p>\n</div>\n<div id=\"advanced-usage\">\n<h2>Advanced usage</h2>\n<p>Ok, that was too easy. In real world, things are not as easy as we would like\nto have them.</p>\n<p>Each project has dependencies, unless it\u2019s lucky one. For packages we would\nlike to preserve that information, but suddenly, packages in FreeBSD may be\nnamed differently from PyPI or be of the different version because of included\npatches. That\u2019s said, we need the mapping between them. Let\u2019s pick this project\nas an example:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Typically, our dependencies looks like this:</span>\n    <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">'setuptools&gt;=18.2'</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">extras_require</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'lzma-2.7'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'backports.lzma==0.0.6'</span><span class=\"p\">,</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># The `command_options` is the way to specify parameters for setuptools</span>\n    <span class=\"c1\"># commands from the `setup()` call. Alternatively, you can do that in</span>\n    <span class=\"c1\"># `setup.cfg`.</span>\n    <span class=\"n\">command_options</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"c1\"># bdist_pkg is the name of command setuptools_pkg provides</span>\n        <span class=\"s1\">'bdist_pkg'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># The requirements mapping itself. The __file__ instructs</span>\n            <span class=\"c1\"># setuptools from where these values came from. Required.</span>\n            <span class=\"c1\"># The rest is our mapping.</span>\n            <span class=\"s1\">'requirements_mapping'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                <span class=\"c1\"># The key of this mapping is an exact value of a requires</span>\n                <span class=\"c1\"># list.</span>\n                <span class=\"s1\">'setuptools&gt;=18.2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"c1\"># The value is a FreeBSD pkg metadata: package name,</span>\n                    <span class=\"c1\"># origin and version.</span>\n                    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'py27-setuptools'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'origin'</span><span class=\"p\">:</span> <span class=\"s1\">'devel/py-setuptools'</span><span class=\"p\">,</span>\n                    <span class=\"c1\"># In our example setuptools&gt;=18.2 tells us to pick</span>\n                    <span class=\"c1\"># any version of setuptools greater than 18.2 and we</span>\n                    <span class=\"c1\"># explicitly picks package with strict version 20.0.</span>\n                    <span class=\"c1\">#</span>\n                    <span class=\"c1\"># Please note, that version field is required while</span>\n                    <span class=\"c1\"># it's not in MANIFEST file.</span>\n                    <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"s1\">'20.0'</span>\n                <span class=\"p\">},</span>\n                <span class=\"c1\"># Mapping for extras is optional till the moment you</span>\n                <span class=\"c1\"># want to make a package with these extras on.</span>\n                <span class=\"s1\">'backports.lzma==0.0.6'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'py27-backports_lzma'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'origin'</span><span class=\"p\">:</span> <span class=\"s1\">'devel/py-backports_lzma'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"s1\">'0.0.6'</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}),</span>\n            <span class=\"c1\"># bdist_pkg turns all the extras into options and through</span>\n            <span class=\"c1\"># selected options you can choose which ones will be enabled</span>\n            <span class=\"c1\"># for a package. By default all the options are in \"off\" state.</span>\n            <span class=\"s1\">'selected_options'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s1\">'lzma-2.7'</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Common pitfalls here:</p>\n<ol>\n<li>Requirements mapping is not portable. In your pkg repository there could be\ndifferent versions and different package namings.</li>\n<li>Requirements mapping should be up to date.</li>\n<li>There is no checks that mapping items are correct. You should pay attention\nto what you put there.</li>\n<li>Having <cite>requirements.txt</cite> instead of using <tt>install_requires</tt> in\n<cite>setup.py</cite>  will make your life harder since, technically, your project\nhas no dependencies and we cannot help you there to keep it consistent.\nYou\u2019ll have to specify <tt>deps</tt> command property directly and <cite>bdist_pkg</cite>\ncould not ensure that you have there all the packages that project actually\nuses.</li>\n</ol>\n<p>That\u2019s could be found quite boring. However, if all your dependencies in pkg\nrepository are names same as on PyPI and has Python version prefix (like\n<tt><span class=\"pre\">py35-setuptools</span></tt>), than requirements mapping is optional. You can just make\npackage with:</p>\n<pre>python setup.py bdist_pkg --use-pypi-deps\n</pre>\n</div>\n<div id=\"expert-usage\">\n<h2>Expert usage</h2>\n<p>In expert mode you may configure package generation in the way you like.\nHere is the complete list of options you may specify for <cite>bdist_pkg</cite>:</p>\n<ul>\n<li><tt>abi</tt> and <tt>arch</tt>: FreeBSD arch and ABI for which package is made. You must\nspecify them manually if you build package on non-FreeBSD system or if you\ndistribution is not pure.</li>\n<li><tt>categories</tt>: A list (literally) of package categories.\nBy default uses <tt>description</tt> field of project metadata.</li>\n<li><tt>comment</tt>: Comment is a one-line description of this package.\nBy default uses <tt>description</tt> field of project metadata.</li>\n<li><tt>deps</tt>: Package dependencies. Sometimes package may depend on non Python\nprojects, like those who provides services or libraries against which\nyour projects dynamically links. The format of deps specification is\nthe same as in <cite>+MANIFEST</cite> file, except it\u2019s Python dict, not JSON or UCL.\nFor Python dependencies check the <tt>requirements_mapping</tt> below.</li>\n<li><tt>desc</tt>: A longer description of the package.\nBy default uses <tt>long_description</tt> field of project metadata.</li>\n<li><tt>groups</tt>: A list of groups to provide.</li>\n<li><tt>license</tt>: Project license.\nBy default uses <tt>license</tt> field of project metadata.</li>\n<li><tt>maintainer</tt>: The maintainer\u2019s mail address. Python distributions defines\nboth maintainer and author entities who rules the package. By default,\nthe maintainer one is picked if available with fallback to author in case\nwhen it\u2019s not.</li>\n<li><tt>name</tt>: Package name. Since FreeBSD packages often uses own naming policy,\nthe custom name can be used instead of real project one.</li>\n<li><tt>options</tt>: Package options. By default, this list is filled from the extras.</li>\n<li><tt>selected_options</tt>: List of options which are used for this package build.</li>\n<li><tt>origin</tt>: By default the generic origin <tt><span class=\"pre\">devel/py-{project_name}</span></tt> is set.</li>\n<li><tt>prefix</tt>:  The path where the files contained in this package are installed\n(usually <tt>/usr/local</tt>).</li>\n<li><tt>provides</tt>: A list of features/services packages provides.</li>\n<li><tt>requires</tt>: A list of features/services packages paquires.</li>\n<li><tt>requirements_mapping</tt>: Mapping between PyPI requirements and FreeBSD\npackages. This mapping helps to ensure that all the dependencies specified\nin <tt>install_requires</tt> and <tt>extras_require</tt> will be satisfied through\nsystem packages. The result fills the <tt>deps</tt> option.</li>\n<li><tt>scripts</tt>: <a href=\"https://wiki.freebsd.org/pkgng#Scripts\" rel=\"nofollow\">Package scripts</a>.</li>\n<li><tt>users</tt>: A list of users to provide.</li>\n<li><tt>version</tt>: Package version. As like package name, can be different from\nreal project version, depending on local modifications, patches, epoch etc.</li>\n<li><tt>www</tt>: Project URL.</li>\n</ul>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<ul>\n<li><p><strong>How it\u2019s different from pytoport?</strong></p>\n<p>The <a href=\"https://github.com/freebsd/pytoport/\" rel=\"nofollow\">pytoport</a> project generates <em>ports</em> from modules on <em>PyPI</em>.\nIt does great job on this, but <tt>bdist_pkg</tt> solves a different problem,\nespecially, when your project cannot be published on PyPI.</p>\n</li>\n<li><p><strong>How can I make a package for some arbitrary Python project?</strong></p>\n<p>You have to patch it first to let him produce proper package with the deps,\nmetadata and else bits. But seriously, you better use ports all the time.</p>\n</li>\n<li><p><strong>If I should use ports to make packages, why this project exists?</strong></p>\n<p>In my case we have a couple of in-house projects which we package directly\nwithout using any ports or cooking Makefiles.</p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3016264, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "dfa93f2221aa3179297e9761e0b02e73", "sha256": "fe42e69c8e551a660db387c3d2ce9edbf7efecaaa906e7f119c9133e37a96e71"}, "downloads": -1, "filename": "setuptools-pkg-0.5.tar.gz", "has_sig": false, "md5_digest": "dfa93f2221aa3179297e9761e0b02e73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13724, "upload_time": "2016-07-21T18:08:15", "upload_time_iso_8601": "2016-07-21T18:08:15.189811Z", "url": "https://files.pythonhosted.org/packages/bd/69/c2c6b17111a50d6edc3a4a7e586a80120b3bb20394f027b8ba025d292465/setuptools-pkg-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "a75428eab2ab19f6d934c6bef6c5a5ce", "sha256": "f1fbc906f265f1e4ca5ec8de30c510c3c514c91aa7a1a370c4b82c880bd2c42c"}, "downloads": -1, "filename": "setuptools-pkg-0.6.tar.gz", "has_sig": false, "md5_digest": "a75428eab2ab19f6d934c6bef6c5a5ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14750, "upload_time": "2016-07-27T07:54:06", "upload_time_iso_8601": "2016-07-27T07:54:06.438852Z", "url": "https://files.pythonhosted.org/packages/21/1c/0f116f1be76597903d87bf84d330759b0acfe9d7a0f06f5cdaef8e749ed9/setuptools-pkg-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "4def4a1ed8018c39a9483261c1e4893c", "sha256": "75606b0ce5add5b99b13de219b95f1e14775607c3a6290aa9030a52a50b93c77"}, "downloads": -1, "filename": "setuptools_pkg-0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4def4a1ed8018c39a9483261c1e4893c", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 14996, "upload_time": "2017-06-16T15:48:09", "upload_time_iso_8601": "2017-06-16T15:48:09.358617Z", "url": "https://files.pythonhosted.org/packages/bc/ff/644cc8735c99dceb39fce07e1c092eb36723c4a964957209dc98f43105c2/setuptools_pkg-0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efa307d0cf4f42cea2c23a6bba0a4556", "sha256": "f741878d41b57e7816b2ec3168ef820f6bb27007b141a0a37bb1a639179fbb1d"}, "downloads": -1, "filename": "setuptools-pkg-0.7.tar.gz", "has_sig": false, "md5_digest": "efa307d0cf4f42cea2c23a6bba0a4556", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21445, "upload_time": "2017-06-16T15:48:07", "upload_time_iso_8601": "2017-06-16T15:48:07.749048Z", "url": "https://files.pythonhosted.org/packages/a5/4c/08130b93697da7db0905c714f36f05843d1f7e46c78666f2fcdbfe855fc3/setuptools-pkg-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "f9b5f882d71d73290c208b4d4c1fa1db", "sha256": "0115a5c390e1f4df72eeb205680094e4dfbe141cd63ba8f851581ff30617636e"}, "downloads": -1, "filename": "setuptools_pkg-0.8-py2-none-any.whl", "has_sig": false, "md5_digest": "f9b5f882d71d73290c208b4d4c1fa1db", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 15035, "upload_time": "2017-06-19T15:09:26", "upload_time_iso_8601": "2017-06-19T15:09:26.266954Z", "url": "https://files.pythonhosted.org/packages/3b/32/c8ee3066f72c5126839bf8738b3ed709fea3cc20184fc7f1cfcfd6181526/setuptools_pkg-0.8-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae18ac80cd1c203a317b2999dba92ffc", "sha256": "472858edf34aa9258796df2ec9dfc2f6f8ec8e34add7764ca87ca822979d11ea"}, "downloads": -1, "filename": "setuptools-pkg-0.8.tar.gz", "has_sig": false, "md5_digest": "ae18ac80cd1c203a317b2999dba92ffc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21495, "upload_time": "2017-06-19T15:09:23", "upload_time_iso_8601": "2017-06-19T15:09:23.349727Z", "url": "https://files.pythonhosted.org/packages/6b/25/4b6903dced28d7089721c44f3213db303c675eab4f3c664affda47ca9670/setuptools-pkg-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "297ee765f0dbe0a6e090806359bbb2df", "sha256": "51166e807c1d72757639b1b5a27f8459abf68383f0bbafcab17a7cac75423592"}, "downloads": -1, "filename": "setuptools_pkg-0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "297ee765f0dbe0a6e090806359bbb2df", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 15058, "upload_time": "2017-07-12T01:46:03", "upload_time_iso_8601": "2017-07-12T01:46:03.603208Z", "url": "https://files.pythonhosted.org/packages/25/ef/bdb1f2a41e3491ecc6e2090d367a488c85e85a1a8d50d2d716daf1c25e8c/setuptools_pkg-0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d28a47bb26b2df761faf4bfbd576115c", "sha256": "c3e657ec2e35f85aed741d0e9f567ce1d941c7d26362d92a5d3c735fd35aeb49"}, "downloads": -1, "filename": "setuptools_pkg-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "d28a47bb26b2df761faf4bfbd576115c", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 15055, "upload_time": "2017-07-12T01:44:50", "upload_time_iso_8601": "2017-07-12T01:44:50.241285Z", "url": "https://files.pythonhosted.org/packages/58/eb/a0fa9be58f5c8bcbf4a861f964d5455f87d191bc91837f96df3d69577305/setuptools_pkg-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9213931b926b459a4db0d866b015e0e", "sha256": "4075489f80f21d0b5311921e222764f260263594ec22369f30c010eb3a3e5668"}, "downloads": -1, "filename": "setuptools-pkg-0.9.tar.gz", "has_sig": false, "md5_digest": "e9213931b926b459a4db0d866b015e0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19366, "upload_time": "2017-07-12T01:44:48", "upload_time_iso_8601": "2017-07-12T01:44:48.638410Z", "url": "https://files.pythonhosted.org/packages/c3/dd/e5892f95b79dda545734f2d60b5d64a762c561ab752487b3e853b808eaaa/setuptools-pkg-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "297ee765f0dbe0a6e090806359bbb2df", "sha256": "51166e807c1d72757639b1b5a27f8459abf68383f0bbafcab17a7cac75423592"}, "downloads": -1, "filename": "setuptools_pkg-0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "297ee765f0dbe0a6e090806359bbb2df", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 15058, "upload_time": "2017-07-12T01:46:03", "upload_time_iso_8601": "2017-07-12T01:46:03.603208Z", "url": "https://files.pythonhosted.org/packages/25/ef/bdb1f2a41e3491ecc6e2090d367a488c85e85a1a8d50d2d716daf1c25e8c/setuptools_pkg-0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d28a47bb26b2df761faf4bfbd576115c", "sha256": "c3e657ec2e35f85aed741d0e9f567ce1d941c7d26362d92a5d3c735fd35aeb49"}, "downloads": -1, "filename": "setuptools_pkg-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "d28a47bb26b2df761faf4bfbd576115c", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 15055, "upload_time": "2017-07-12T01:44:50", "upload_time_iso_8601": "2017-07-12T01:44:50.241285Z", "url": "https://files.pythonhosted.org/packages/58/eb/a0fa9be58f5c8bcbf4a861f964d5455f87d191bc91837f96df3d69577305/setuptools_pkg-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9213931b926b459a4db0d866b015e0e", "sha256": "4075489f80f21d0b5311921e222764f260263594ec22369f30c010eb3a3e5668"}, "downloads": -1, "filename": "setuptools-pkg-0.9.tar.gz", "has_sig": false, "md5_digest": "e9213931b926b459a4db0d866b015e0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19366, "upload_time": "2017-07-12T01:44:48", "upload_time_iso_8601": "2017-07-12T01:44:48.638410Z", "url": "https://files.pythonhosted.org/packages/c3/dd/e5892f95b79dda545734f2d60b5d64a762c561ab752487b3e853b808eaaa/setuptools-pkg-0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:28 2020"}