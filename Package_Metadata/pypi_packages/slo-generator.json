{"info": {"author": "Google Inc.", "author_email": "brunoreboul@google.com,ocervello@google.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# SLO Generator\n\n`slo-generator` is a tool to compute and export **Service Level Objectives** ([SLOs](https://landing.google.com/sre/sre-book/chapters/service-level-objectives/)),\n**Error Budgets** and **Burn Rates**, using policies written in JSON or YAML format.\n\n## Description\n`slo-generator` will query metrics backend and compute the following metrics:\n\n* **Service Level Objective** defined as `SLO (%) = GOOD_EVENTS / VALID_EVENTS`\n* **Error Budget** defined as `ERROR_BUDGET = 100 - SLO (%)`\n* **Burn Rate** defined as `BURN_RATE = ERROR_BUDGET / ERROR_BUDGET_TARGET`\n\n## Local usage\n\n**Requirements**\n\n* Python 3\n* gcloud SDK installed\n\n**Installation**\n\n`slo-generator` is published on PyPI. To install it, run:\n\n```sh\npip3 install slo-generator\n```\n\n**Run the `slo-generator`**\n\n```\nslo-generator -f <SLO_CONFIG_PATH> -b <ERROR_BUDGET_POLICY> --export\n```\n  * `<SLO_CONFIG_PATH>` is the [SLO config](#slo-configuration) file or folder.\n    If a folder path is passed, the SLO configs filenames should match the pattern `slo_*.yaml` to be loaded.\n\n  * `<ERROR_BUDGET_POLICY>` is the [Error Budget Policy](#error-budget-policy) file.\n\n  * `--export` enables exporting data using the `exporters` defined in the SLO\n  configuration file.\n\nUse `slo-generator --help` to list all available arguments.\n\nTo enable debug logs, set the environment variable `DEBUG` to `1` before running the `slo-generator`:\n\n```\nexport DEBUG=1\n```\n\n## Configuration\n\nThe `slo-generator` requires two configuration files to run, the **SLO configuration** file and the **Error budget policy** file.\n\n#### SLO configuration\n\nThe **SLO configuration** (JSON or YAML) is composed of the following fields:\n\n* **SLO metadata**:\n  * `slo_name`: Name of this SLO.\n  * `slo_description`: Description of this SLO.\n  * `slo_target`: SLO target (between 0 and 1).\n  * `service_name`: Name of the monitored service.\n  * `feature_name`: Name of the monitored subsystem.\n\n\n* **SLI configuration**:\n  * `backend`: Specific documentation and examples are available for each supported backends:\n    * [Stackdriver Monitoring](docs/stackdriver.md#backend)\n    * [Stackdriver Service Monitoring](docs/stackdriver_service_monitoring.md#backend)\n    * [Prometheus](docs/prometheus.md#backend)\n    * [ElasticSearch](docs/elasticsearch.md#backend)\n\n\n- **Exporter configuration**:\n  * `exporters`: A list of exporters to export results to. Specific documentation is available for each supported exporters:\n      * [Cloud Pub/Sub](docs/pubsub.md#exporter) to stream SLO reports.\n      * [BigQuery](docs/bigquery.md#exporter) to export SLO reports to BigQuery for historical analysis and DataStudio reporting.\n      * [Stackdriver Monitoring](docs/stackdriver.md#exporter) to export the `error_budget_burn_rate` metric to Stackdriver Monitoring.\n      * [Prometheus](docs/prometheus.md#exporter) to export the `error_budget_burn_rate` metric to Prometheus.\n\n***Note:*** *you can use environment variables in your SLO configs by using `${}` syntax to avoid having sensitive data in version control. Environment variables will be replaced at run time.*\n\n==> An example SLO configuration file is available [here](samples/stackdriver/slo_gae_app_availability.yaml).\n\n#### Error Budget policy\n\nThe **Error Budget policy** (JSON or YAML) is a list of multiple error budgets, each one composed of the following fields:\n\n* `window`: Rolling time window for this error budget.\n* `alerting_burn_rate_threshold`: Target burnrate threshold over which alerting is needed.\n* `urgent_notification`: boolean whether violating this error budget should trigger a page.\n* `overburned_consequence_message`: message to show when the error budget is above the target.\n* `achieved_consequence_message`: message to show when the error budget is within the target.\n\n==> An example Error Budget policy is available [here](samples/error_budget_policy.yaml).\n\n\n## Extending the SLO generator\n\nThe `slo-generator` tool is designed to add more backends and exporters as it moves forward. Users, customers and Google folks should be able to easily add the metrics backend or the exporter of their choosing.\n\nTo prepare for development, you need to fork this repository and work on your own branch so that you can later submit your changes as a GitHub Pull Request.\n\nOnce you have forked the repo on GitHub, clone it locally and install the `slo-generator` in a Python virtual environment:\n```\ngit clone <FORK_URL>\ncd professional-services/tools/slo-generator\npython3 -m venv venv/\nsource venv/bin/activate\n```\n\nInstall `slo-generator` locally in development mode, so that you can start making changes to it:\n```\npython setup.py develop\n```\n\n**New backend**\n\nTo add a new backend, one must:\n\n* Add a new file `slo-generator/backends/<backend>.py`\n\n* Write a new Python class called `<Backend>` (CamlCase)\n\n* Add unit tests\n\n***Example with a fake Datadog backend:***\n\n* Add a new backend file:\n\n  ```sh\n  touch slo-generator/backends/datadog.py\n  ```\n\n* Fill the content of `datadog.py`:\n\n  ```python\n  from slo_generator.backends.base import MetricBackend\n\n  class Datadog(MetricBackend):\n    def __init__(self, **kwargs):\n      # instantiate your client here, or do nothing if your backend\n      # doesn't need it.\n      url = kwargs['url']\n      self.client = DatadogClient(url)\n\n    def query(self, *args, **kwargs):\n      # add code to query your backend here.\n      return self.client.query(*args, **kwargs)\n\n    @staticmethod\n    def count(timeseries):\n      # add code to count the number of events in the timeseries returned\n\n    def good_bad_ratio(self, *kwargs):\n      # this should return a tuple `(good_event_count, bad_event_count)`\n      # or a float `SLI value`.\n      good_event_query = kwargs['measurement']['filter_good']\n      bad_event_query = kwargs['measurement']['filter_bad']\n      good_timeseries = self.query(good_event_query)\n      bad_timeseries = self.query(bad_event_query)\n      good_count = Datadog.count(good_timeseries)\n      bad_count = Datadog.count(bad_timeseries)\n      return (good_count, bad_count)\n\n    def my_random_method():\n      # this should return a tuple `(good_event_count, bad_event_count)`\n      # or a float `SLI value`.\n      my_sli_value = self.compute_random_stuff()\n      return my_sli_value\n  ```\n* Write a sample SLO configs (`slo_test.yaml`):\n\n  ```yaml\n  service_name: test\n  feature_name: test\n  slo_name: datadog\n  slo_description: Test Datadog SLO\n  backend:\n    class: Datadog\n    method: good_bad_ratio\n    url: datadog.mycompany.com\n    measurement:\n      filter_good: avg:system.disk.free{*}.rollup(avg, {window})\n      filter_valid: avg:system.disk.used{*}.rollup(avg, {window})\n  ```\n\n* Run a test with the SLO generator:\n  ```sh\n  slo-generator -f slo_test.yaml -b samples/error_budget_target.yaml\n  ```\n\n* Create a directory `samples/<backend>` for your backend samples.\n\n* Add some YAML samples to show how to write SLO configs for your backend. Samples should be named `slo_<service_name>_<feature_name>_<function>.yaml`\n\n* Add a unit test: in the `tests/unit/test_compute.py`, simply add a method called `test_compute_<backend>`. Take the other backends an example when\nwriting the test.\n\nThe steps above are similar for adding a new exporter, but the exporter code will go to the `exporters/` directory and the unit test will be named `test_export_<exporter>`.\n\n## Usage in pipelines\n\nOnce the SLO measurement has been tested locally, it's a good idea to deploy a pipeline that will automatically compute SLO reports. This pipeline can be triggered on a schedule, or by specific events.\n\n### Cloud Functions\n`slo-generator` is frequently used as part of an SLO Reporting Pipeline made of:\n\n* A **Cloud Scheduler** triggering an event every X minutes.\n* A **PubSub topic**, triggered by the Cloud Scheduler event.\n* A **Cloud Function**, triggered by the PubSub topic, running `slo-generator`.\n* A **PubSub topic** to stream computation results.\n\n\nOther components can be added to make results available to other destinations:\n* A **Cloud Function** to export SLO reports (e.g: to BigQuery and Stackdriver Monitoring), running `slo-generator`.\n* A **Stackdriver Monitoring Policy** to alert on high budget Burn Rates.\n\nBelow is a diagram of what this pipeline looks like:\n\n![Architecture](https://raw.githubusercontent.com/terraform-google-modules/terraform-google-slo/master/diagram.png)\n\n**Benefits:**\n\n* **Frequent SLO / Error Budget / Burn rate reporting** (max 1 every minute) with Cloud Scheduler.\n\n* **Real-time visualization** by streaming results to DataStudio.\n\n* **Historical analytics** by analyzing SLO data in Bigquery.\n\n* **Real-time alerting** by setting up Stackdriver Monitoring alerts based on\nwanted SLOs.\n\nAn example of pipeline automation with Terraform can be found [here](https://github.com/terraform-google-modules/terraform-google-slo/tree/master/examples/simple_example).\n\n### Cloud Build\n`slo-generator` can also be triggered in a Cloud Build pipeline. This can be useful if we want to compute some SLOs as part of a release process (e.g: to calculate a metric on each `git` commit or push)\n\nTo do so, you need to build an image for the `slo-generator` and push it to `Google Container Registry` in your project.\n\nTo build / push the image, run:\n\n```sh\ngcloud builds submit --config=cloudbuild.yaml . -s _PROJECT_NAME=<YOUR_PROJECT_NAME>\n```\n\nOnce the image is built, you can call the SLO generator using the following snippet in your `cloudbuild.yaml`:\n\n```yaml\n---\nsteps:\n\n- name: gcr.io/${_PROJECT_NAME}/slo-generator\n  args:\n    - -f\n    - ${_SLO_CONFIG_FILE}\n    - -b\n    - ${_ERROR_BUDGET_POLICY_FILE}\n    - --export\n```\n\nThen, in another repo containing your SLO definitions, simply run the pipeline, substituting the needed variables:\n\n```sh\ngcloud builds submit . --config=cloudbuild.yaml --substitutions \\\n  _SLO_CONFIG_FILE=<YOUR_SLO_CONFIG_FILE> \\\n  _ERROR_BUDGET_POLICY_FILE=<_ERROR_BUDGET_POLICY_FILE> \\\n  _WORKSPACE=<ENV>\n```\n\nIf your repo is a Cloud Source Repository, you can also configure a trigger for\nCloud Build, so that the pipeline is run automatically when a commit is made:\n\n```hcl\nresource \"google_cloudbuild_trigger\" \"dev-trigger\" {\n  trigger_template {\n    branch_name = \"dev\"\n    repo_name   = \"my-repo\"\n  }\n\n  substitutions = {\n    _SLO_CONFIG_FILE = \"slo.json\"\n    _ERROR_BUDGET_POLICY_FILE = \"error_budget_policy.json\"\n    _WORKSPACE = \"dev\"\n  }\n\n  filename = \"cloudbuild.yaml\"\n}\n\nresource \"google_cloudbuild_trigger\" \"prod-trigger\" {\n  trigger_template {\n    branch_name = \"master\"\n    repo_name   = \"my-repo\"\n  }\n\n  substitutions = {\n    _SLO_CONFIG_FILE = \"slo.json\"\n    _ERROR_BUDGET_POLICY_FILE = \"error_budget_policy.json\"\n  }\n\n  filename = \"cloudbuild.yaml\"\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "slo sli generator gcp", "license": "", "maintainer": "", "maintainer_email": "", "name": "slo-generator", "package_url": "https://pypi.org/project/slo-generator/", "platform": "", "project_url": "https://pypi.org/project/slo-generator/", "project_urls": null, "release_url": "https://pypi.org/project/slo-generator/1.0.1/", "requires_dist": ["google-api-python-client", "oauth2client", "google-cloud-monitoring", "google-cloud-pubsub", "google-cloud-bigquery", "prometheus-http-client", "prometheus-client", "pyyaml", "opencensus", "elasticsearch", "pytz"], "requires_python": ">=3.4", "summary": "SLO generator", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SLO Generator</h1>\n<p><code>slo-generator</code> is a tool to compute and export <strong>Service Level Objectives</strong> (<a href=\"https://landing.google.com/sre/sre-book/chapters/service-level-objectives/\" rel=\"nofollow\">SLOs</a>),\n<strong>Error Budgets</strong> and <strong>Burn Rates</strong>, using policies written in JSON or YAML format.</p>\n<h2>Description</h2>\n<p><code>slo-generator</code> will query metrics backend and compute the following metrics:</p>\n<ul>\n<li><strong>Service Level Objective</strong> defined as <code>SLO (%) = GOOD_EVENTS / VALID_EVENTS</code></li>\n<li><strong>Error Budget</strong> defined as <code>ERROR_BUDGET = 100 - SLO (%)</code></li>\n<li><strong>Burn Rate</strong> defined as <code>BURN_RATE = ERROR_BUDGET / ERROR_BUDGET_TARGET</code></li>\n</ul>\n<h2>Local usage</h2>\n<p><strong>Requirements</strong></p>\n<ul>\n<li>Python 3</li>\n<li>gcloud SDK installed</li>\n</ul>\n<p><strong>Installation</strong></p>\n<p><code>slo-generator</code> is published on PyPI. To install it, run:</p>\n<pre>pip3 install slo-generator\n</pre>\n<p><strong>Run the <code>slo-generator</code></strong></p>\n<pre><code>slo-generator -f &lt;SLO_CONFIG_PATH&gt; -b &lt;ERROR_BUDGET_POLICY&gt; --export\n</code></pre>\n<ul>\n<li>\n<p><code>&lt;SLO_CONFIG_PATH&gt;</code> is the <a href=\"#slo-configuration\" rel=\"nofollow\">SLO config</a> file or folder.\nIf a folder path is passed, the SLO configs filenames should match the pattern <code>slo_*.yaml</code> to be loaded.</p>\n</li>\n<li>\n<p><code>&lt;ERROR_BUDGET_POLICY&gt;</code> is the <a href=\"#error-budget-policy\" rel=\"nofollow\">Error Budget Policy</a> file.</p>\n</li>\n<li>\n<p><code>--export</code> enables exporting data using the <code>exporters</code> defined in the SLO\nconfiguration file.</p>\n</li>\n</ul>\n<p>Use <code>slo-generator --help</code> to list all available arguments.</p>\n<p>To enable debug logs, set the environment variable <code>DEBUG</code> to <code>1</code> before running the <code>slo-generator</code>:</p>\n<pre><code>export DEBUG=1\n</code></pre>\n<h2>Configuration</h2>\n<p>The <code>slo-generator</code> requires two configuration files to run, the <strong>SLO configuration</strong> file and the <strong>Error budget policy</strong> file.</p>\n<h4>SLO configuration</h4>\n<p>The <strong>SLO configuration</strong> (JSON or YAML) is composed of the following fields:</p>\n<ul>\n<li>\n<p><strong>SLO metadata</strong>:</p>\n<ul>\n<li><code>slo_name</code>: Name of this SLO.</li>\n<li><code>slo_description</code>: Description of this SLO.</li>\n<li><code>slo_target</code>: SLO target (between 0 and 1).</li>\n<li><code>service_name</code>: Name of the monitored service.</li>\n<li><code>feature_name</code>: Name of the monitored subsystem.</li>\n</ul>\n</li>\n<li>\n<p><strong>SLI configuration</strong>:</p>\n<ul>\n<li><code>backend</code>: Specific documentation and examples are available for each supported backends:\n<ul>\n<li><a href=\"docs/stackdriver.md#backend\" rel=\"nofollow\">Stackdriver Monitoring</a></li>\n<li><a href=\"docs/stackdriver_service_monitoring.md#backend\" rel=\"nofollow\">Stackdriver Service Monitoring</a></li>\n<li><a href=\"docs/prometheus.md#backend\" rel=\"nofollow\">Prometheus</a></li>\n<li><a href=\"docs/elasticsearch.md#backend\" rel=\"nofollow\">ElasticSearch</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>Exporter configuration</strong>:\n<ul>\n<li><code>exporters</code>: A list of exporters to export results to. Specific documentation is available for each supported exporters:\n<ul>\n<li><a href=\"docs/pubsub.md#exporter\" rel=\"nofollow\">Cloud Pub/Sub</a> to stream SLO reports.</li>\n<li><a href=\"docs/bigquery.md#exporter\" rel=\"nofollow\">BigQuery</a> to export SLO reports to BigQuery for historical analysis and DataStudio reporting.</li>\n<li><a href=\"docs/stackdriver.md#exporter\" rel=\"nofollow\">Stackdriver Monitoring</a> to export the <code>error_budget_burn_rate</code> metric to Stackdriver Monitoring.</li>\n<li><a href=\"docs/prometheus.md#exporter\" rel=\"nofollow\">Prometheus</a> to export the <code>error_budget_burn_rate</code> metric to Prometheus.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><em><strong>Note:</strong></em> <em>you can use environment variables in your SLO configs by using <code>${}</code> syntax to avoid having sensitive data in version control. Environment variables will be replaced at run time.</em></p>\n<p>==&gt; An example SLO configuration file is available <a href=\"samples/stackdriver/slo_gae_app_availability.yaml\" rel=\"nofollow\">here</a>.</p>\n<h4>Error Budget policy</h4>\n<p>The <strong>Error Budget policy</strong> (JSON or YAML) is a list of multiple error budgets, each one composed of the following fields:</p>\n<ul>\n<li><code>window</code>: Rolling time window for this error budget.</li>\n<li><code>alerting_burn_rate_threshold</code>: Target burnrate threshold over which alerting is needed.</li>\n<li><code>urgent_notification</code>: boolean whether violating this error budget should trigger a page.</li>\n<li><code>overburned_consequence_message</code>: message to show when the error budget is above the target.</li>\n<li><code>achieved_consequence_message</code>: message to show when the error budget is within the target.</li>\n</ul>\n<p>==&gt; An example Error Budget policy is available <a href=\"samples/error_budget_policy.yaml\" rel=\"nofollow\">here</a>.</p>\n<h2>Extending the SLO generator</h2>\n<p>The <code>slo-generator</code> tool is designed to add more backends and exporters as it moves forward. Users, customers and Google folks should be able to easily add the metrics backend or the exporter of their choosing.</p>\n<p>To prepare for development, you need to fork this repository and work on your own branch so that you can later submit your changes as a GitHub Pull Request.</p>\n<p>Once you have forked the repo on GitHub, clone it locally and install the <code>slo-generator</code> in a Python virtual environment:</p>\n<pre><code>git clone &lt;FORK_URL&gt;\ncd professional-services/tools/slo-generator\npython3 -m venv venv/\nsource venv/bin/activate\n</code></pre>\n<p>Install <code>slo-generator</code> locally in development mode, so that you can start making changes to it:</p>\n<pre><code>python setup.py develop\n</code></pre>\n<p><strong>New backend</strong></p>\n<p>To add a new backend, one must:</p>\n<ul>\n<li>\n<p>Add a new file <code>slo-generator/backends/&lt;backend&gt;.py</code></p>\n</li>\n<li>\n<p>Write a new Python class called <code>&lt;Backend&gt;</code> (CamlCase)</p>\n</li>\n<li>\n<p>Add unit tests</p>\n</li>\n</ul>\n<p><em><strong>Example with a fake Datadog backend:</strong></em></p>\n<ul>\n<li>\n<p>Add a new backend file:</p>\n<pre>touch slo-generator/backends/datadog.py\n</pre>\n</li>\n<li>\n<p>Fill the content of <code>datadog.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">slo_generator.backends.base</span> <span class=\"kn\">import</span> <span class=\"n\">MetricBackend</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Datadog</span><span class=\"p\">(</span><span class=\"n\">MetricBackend</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># instantiate your client here, or do nothing if your backend</span>\n    <span class=\"c1\"># doesn't need it.</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'url'</span><span class=\"p\">]</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">DatadogClient</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># add code to query your backend here.</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n  <span class=\"nd\">@staticmethod</span>\n  <span class=\"k\">def</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">timeseries</span><span class=\"p\">):</span>\n    <span class=\"c1\"># add code to count the number of events in the timeseries returned</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">good_bad_ratio</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># this should return a tuple `(good_event_count, bad_event_count)`</span>\n    <span class=\"c1\"># or a float `SLI value`.</span>\n    <span class=\"n\">good_event_query</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'measurement'</span><span class=\"p\">][</span><span class=\"s1\">'filter_good'</span><span class=\"p\">]</span>\n    <span class=\"n\">bad_event_query</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'measurement'</span><span class=\"p\">][</span><span class=\"s1\">'filter_bad'</span><span class=\"p\">]</span>\n    <span class=\"n\">good_timeseries</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">good_event_query</span><span class=\"p\">)</span>\n    <span class=\"n\">bad_timeseries</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">bad_event_query</span><span class=\"p\">)</span>\n    <span class=\"n\">good_count</span> <span class=\"o\">=</span> <span class=\"n\">Datadog</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">good_timeseries</span><span class=\"p\">)</span>\n    <span class=\"n\">bad_count</span> <span class=\"o\">=</span> <span class=\"n\">Datadog</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">bad_timeseries</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">good_count</span><span class=\"p\">,</span> <span class=\"n\">bad_count</span><span class=\"p\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">my_random_method</span><span class=\"p\">():</span>\n    <span class=\"c1\"># this should return a tuple `(good_event_count, bad_event_count)`</span>\n    <span class=\"c1\"># or a float `SLI value`.</span>\n    <span class=\"n\">my_sli_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_random_stuff</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">my_sli_value</span>\n</pre>\n</li>\n<li>\n<p>Write a sample SLO configs (<code>slo_test.yaml</code>):</p>\n<pre><span class=\"nt\">service_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">test</span>\n<span class=\"nt\">feature_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">test</span>\n<span class=\"nt\">slo_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">datadog</span>\n<span class=\"nt\">slo_description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Test Datadog SLO</span>\n<span class=\"nt\">backend</span><span class=\"p\">:</span>\n  <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Datadog</span>\n  <span class=\"nt\">method</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">good_bad_ratio</span>\n  <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">datadog.mycompany.com</span>\n  <span class=\"nt\">measurement</span><span class=\"p\">:</span>\n    <span class=\"nt\">filter_good</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">avg:system.disk.free{*}.rollup(avg, {window})</span>\n    <span class=\"nt\">filter_valid</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">avg:system.disk.used{*}.rollup(avg, {window})</span>\n</pre>\n</li>\n<li>\n<p>Run a test with the SLO generator:</p>\n<pre>slo-generator -f slo_test.yaml -b samples/error_budget_target.yaml\n</pre>\n</li>\n<li>\n<p>Create a directory <code>samples/&lt;backend&gt;</code> for your backend samples.</p>\n</li>\n<li>\n<p>Add some YAML samples to show how to write SLO configs for your backend. Samples should be named <code>slo_&lt;service_name&gt;_&lt;feature_name&gt;_&lt;function&gt;.yaml</code></p>\n</li>\n<li>\n<p>Add a unit test: in the <code>tests/unit/test_compute.py</code>, simply add a method called <code>test_compute_&lt;backend&gt;</code>. Take the other backends an example when\nwriting the test.</p>\n</li>\n</ul>\n<p>The steps above are similar for adding a new exporter, but the exporter code will go to the <code>exporters/</code> directory and the unit test will be named <code>test_export_&lt;exporter&gt;</code>.</p>\n<h2>Usage in pipelines</h2>\n<p>Once the SLO measurement has been tested locally, it's a good idea to deploy a pipeline that will automatically compute SLO reports. This pipeline can be triggered on a schedule, or by specific events.</p>\n<h3>Cloud Functions</h3>\n<p><code>slo-generator</code> is frequently used as part of an SLO Reporting Pipeline made of:</p>\n<ul>\n<li>A <strong>Cloud Scheduler</strong> triggering an event every X minutes.</li>\n<li>A <strong>PubSub topic</strong>, triggered by the Cloud Scheduler event.</li>\n<li>A <strong>Cloud Function</strong>, triggered by the PubSub topic, running <code>slo-generator</code>.</li>\n<li>A <strong>PubSub topic</strong> to stream computation results.</li>\n</ul>\n<p>Other components can be added to make results available to other destinations:</p>\n<ul>\n<li>A <strong>Cloud Function</strong> to export SLO reports (e.g: to BigQuery and Stackdriver Monitoring), running <code>slo-generator</code>.</li>\n<li>A <strong>Stackdriver Monitoring Policy</strong> to alert on high budget Burn Rates.</li>\n</ul>\n<p>Below is a diagram of what this pipeline looks like:</p>\n<p><img alt=\"Architecture\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a09c0c90d79cd64cbf6906debd7b7eb938d93de3/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7465727261666f726d2d676f6f676c652d6d6f64756c65732f7465727261666f726d2d676f6f676c652d736c6f2f6d61737465722f6469616772616d2e706e67\"></p>\n<p><strong>Benefits:</strong></p>\n<ul>\n<li>\n<p><strong>Frequent SLO / Error Budget / Burn rate reporting</strong> (max 1 every minute) with Cloud Scheduler.</p>\n</li>\n<li>\n<p><strong>Real-time visualization</strong> by streaming results to DataStudio.</p>\n</li>\n<li>\n<p><strong>Historical analytics</strong> by analyzing SLO data in Bigquery.</p>\n</li>\n<li>\n<p><strong>Real-time alerting</strong> by setting up Stackdriver Monitoring alerts based on\nwanted SLOs.</p>\n</li>\n</ul>\n<p>An example of pipeline automation with Terraform can be found <a href=\"https://github.com/terraform-google-modules/terraform-google-slo/tree/master/examples/simple_example\" rel=\"nofollow\">here</a>.</p>\n<h3>Cloud Build</h3>\n<p><code>slo-generator</code> can also be triggered in a Cloud Build pipeline. This can be useful if we want to compute some SLOs as part of a release process (e.g: to calculate a metric on each <code>git</code> commit or push)</p>\n<p>To do so, you need to build an image for the <code>slo-generator</code> and push it to <code>Google Container Registry</code> in your project.</p>\n<p>To build / push the image, run:</p>\n<pre>gcloud builds submit --config<span class=\"o\">=</span>cloudbuild.yaml . -s <span class=\"nv\">_PROJECT_NAME</span><span class=\"o\">=</span>&lt;YOUR_PROJECT_NAME&gt;\n</pre>\n<p>Once the image is built, you can call the SLO generator using the following snippet in your <code>cloudbuild.yaml</code>:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">steps</span><span class=\"p\">:</span>\n\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">gcr.io/${_PROJECT_NAME}/slo-generator</span>\n  <span class=\"nt\">args</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">-f</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">${_SLO_CONFIG_FILE}</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">-b</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">${_ERROR_BUDGET_POLICY_FILE}</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">--export</span>\n</pre>\n<p>Then, in another repo containing your SLO definitions, simply run the pipeline, substituting the needed variables:</p>\n<pre>gcloud builds submit . --config<span class=\"o\">=</span>cloudbuild.yaml --substitutions <span class=\"se\">\\</span>\n  <span class=\"nv\">_SLO_CONFIG_FILE</span><span class=\"o\">=</span>&lt;YOUR_SLO_CONFIG_FILE&gt; <span class=\"se\">\\</span>\n  <span class=\"nv\">_ERROR_BUDGET_POLICY_FILE</span><span class=\"o\">=</span>&lt;_ERROR_BUDGET_POLICY_FILE&gt; <span class=\"se\">\\</span>\n  <span class=\"nv\">_WORKSPACE</span><span class=\"o\">=</span>&lt;ENV&gt;\n</pre>\n<p>If your repo is a Cloud Source Repository, you can also configure a trigger for\nCloud Build, so that the pipeline is run automatically when a commit is made:</p>\n<pre>resource \"google_cloudbuild_trigger\" \"dev-trigger\" {\n  trigger_template {\n    branch_name = \"dev\"\n    repo_name   = \"my-repo\"\n  }\n\n  substitutions = {\n    _SLO_CONFIG_FILE = \"slo.json\"\n    _ERROR_BUDGET_POLICY_FILE = \"error_budget_policy.json\"\n    _WORKSPACE = \"dev\"\n  }\n\n  filename = \"cloudbuild.yaml\"\n}\n\nresource \"google_cloudbuild_trigger\" \"prod-trigger\" {\n  trigger_template {\n    branch_name = \"master\"\n    repo_name   = \"my-repo\"\n  }\n\n  substitutions = {\n    _SLO_CONFIG_FILE = \"slo.json\"\n    _ERROR_BUDGET_POLICY_FILE = \"error_budget_policy.json\"\n  }\n\n  filename = \"cloudbuild.yaml\"\n}\n</pre>\n\n          </div>"}, "last_serial": 7180572, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "eaec6eec303c0cf9631875be60c79330", "sha256": "b365562c9f67babba693a5c9a85d3ab0c49a18b1ddcc35fa9259e56073662609"}, "downloads": -1, "filename": "slo_generator-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eaec6eec303c0cf9631875be60c79330", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 19823, "upload_time": "2019-08-30T09:40:23", "upload_time_iso_8601": "2019-08-30T09:40:23.951663Z", "url": "https://files.pythonhosted.org/packages/bc/60/6b9dc76affaf542adf1628ba28348d13d212f23cc8a99719ed5cb0cb5e68/slo_generator-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "977304471c05be0a547d7865a676b2a0", "sha256": "f2e94f6b44e377342520a6e8243e5d31dbb6a153780bc71a29a85f95cf8d142e"}, "downloads": -1, "filename": "slo-generator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "977304471c05be0a547d7865a676b2a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 14735, "upload_time": "2019-08-30T09:40:26", "upload_time_iso_8601": "2019-08-30T09:40:26.512616Z", "url": "https://files.pythonhosted.org/packages/1e/7f/bbdbfe2b79c864b197ee39206cf4f2d3f2e271c21b033a1a28a513cd8c7f/slo-generator-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5317ef560c32ae677961c833dc2e539f", "sha256": "a2c7bcd6db2f41deb35f6cdcc15496f3a61a6c0c38803309704dc83e93380d86"}, "downloads": -1, "filename": "slo_generator-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5317ef560c32ae677961c833dc2e539f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 19828, "upload_time": "2019-09-04T13:47:21", "upload_time_iso_8601": "2019-09-04T13:47:21.653291Z", "url": "https://files.pythonhosted.org/packages/cc/af/c4c729fbadeb781b9f02ee6c3f1dd7e83435d654919ef43ba3716c40868f/slo_generator-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2178585b9c499f32906b6a013327024", "sha256": "a6ed57bfb82a5da8d0165dabea13a43e31ff9f7c2ff331390b4f1bca7578032c"}, "downloads": -1, "filename": "slo-generator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f2178585b9c499f32906b6a013327024", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 14799, "upload_time": "2019-09-04T13:47:23", "upload_time_iso_8601": "2019-09-04T13:47:23.211271Z", "url": "https://files.pythonhosted.org/packages/15/15/eb1db9bfa3bc5db7572111d84e2c3202f451c65e3fca73ff36dab197377b/slo-generator-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "50957136a104e695508fc7858e37b052", "sha256": "80dddb2b82941db530d173fcc0d14401785fbe8d0df8049cac1ace464f7ae09c"}, "downloads": -1, "filename": "slo_generator-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "50957136a104e695508fc7858e37b052", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 20007, "upload_time": "2019-09-06T17:20:31", "upload_time_iso_8601": "2019-09-06T17:20:31.288086Z", "url": "https://files.pythonhosted.org/packages/a5/98/cfce6b02f5ed8cd50e9f4d53693d83ebba09c11a0f9f2e86cde05923e7d8/slo_generator-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f747a1dfbf1c5d1d20d6e0cfd3d332b", "sha256": "7782090e5cc3b1eb676d2374a4dd884688d7a3489d1219760a76456ca79779b7"}, "downloads": -1, "filename": "slo-generator-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8f747a1dfbf1c5d1d20d6e0cfd3d332b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 14921, "upload_time": "2019-09-06T17:20:33", "upload_time_iso_8601": "2019-09-06T17:20:33.063238Z", "url": "https://files.pythonhosted.org/packages/68/5d/32080c380960e6c1f1e47344ee4ff6860349d9dfb89824816bc4850bbd21/slo-generator-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8b4c4f6750ba3079f0e46298c8787197", "sha256": "4031c6a86754bee39be3351049c3b3ccdecc9d0d56795b1eedeb1ec709cd4a6d"}, "downloads": -1, "filename": "slo_generator-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8b4c4f6750ba3079f0e46298c8787197", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 20014, "upload_time": "2019-09-09T07:43:08", "upload_time_iso_8601": "2019-09-09T07:43:08.511624Z", "url": "https://files.pythonhosted.org/packages/95/c9/7d35ae8073d9ecea591b1637493484151b708f1fbdac9a4ece8b6a34fcf4/slo_generator-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "148848c8e45c767d5f9ecc7f17ee3e07", "sha256": "f1e765f5e4ccf9230b033de7c8f0bba741faa120c6e2a7adc30401dbadb63f95"}, "downloads": -1, "filename": "slo-generator-0.1.3.tar.gz", "has_sig": false, "md5_digest": "148848c8e45c767d5f9ecc7f17ee3e07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 14921, "upload_time": "2019-09-09T07:43:10", "upload_time_iso_8601": "2019-09-09T07:43:10.333406Z", "url": "https://files.pythonhosted.org/packages/c5/28/2809d4e8a01967314f9683d28e1ec149d10ccc73cc8357738e26db06e5e0/slo-generator-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "f26befa306df6c7a4d2fa87c42379a43", "sha256": "feb469b41e0be1175ffff7aa48ab581e2a460588be67a2d51b4e941da8a4964f"}, "downloads": -1, "filename": "slo_generator-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f26befa306df6c7a4d2fa87c42379a43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 20091, "upload_time": "2019-09-10T13:53:52", "upload_time_iso_8601": "2019-09-10T13:53:52.813130Z", "url": "https://files.pythonhosted.org/packages/d2/d3/9e174c07d5f47606544dc61003b4b7f4b6f1d7489fc67ff2cef8e5db524c/slo_generator-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64e47c33d16383d9cef0dbbab8263a87", "sha256": "f117b2c7c3e8e817d92d875ffe9345ca27a3210432f098870c5435e24501a23a"}, "downloads": -1, "filename": "slo-generator-0.1.4.tar.gz", "has_sig": false, "md5_digest": "64e47c33d16383d9cef0dbbab8263a87", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 15005, "upload_time": "2019-09-10T13:53:54", "upload_time_iso_8601": "2019-09-10T13:53:54.468778Z", "url": "https://files.pythonhosted.org/packages/26/eb/9a375a6e9f04855239b45b4d251376c261538490b0c1ba52fc833fe455b8/slo-generator-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "c2555d7f0b62d2642a8315fa94169759", "sha256": "5549ad3df54565dd1db50bfaa605f643ea5cbc7be310650bfd5a288ce7688923"}, "downloads": -1, "filename": "slo_generator-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c2555d7f0b62d2642a8315fa94169759", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 20429, "upload_time": "2019-09-22T11:09:23", "upload_time_iso_8601": "2019-09-22T11:09:23.134780Z", "url": "https://files.pythonhosted.org/packages/fb/bb/088ec365aeab07da4ea48d35a262da12edfbb3d0627c6ac9bb30028e9b08/slo_generator-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3ea7686ac4a9f09093ef79fcbee3366", "sha256": "2d46c30a6409561e96f251acc645f40b7c094efd3d89f10b37cfbf3cc80f2257"}, "downloads": -1, "filename": "slo-generator-0.1.5.tar.gz", "has_sig": false, "md5_digest": "a3ea7686ac4a9f09093ef79fcbee3366", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 15770, "upload_time": "2019-09-22T11:09:25", "upload_time_iso_8601": "2019-09-22T11:09:25.380932Z", "url": "https://files.pythonhosted.org/packages/b9/0b/e8b97a2fc6545ef577de85bda1ff25d72a99550c6b53db1331a38de7e9a4/slo-generator-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "1d7df627bb7d3b56e8f577e38160def6", "sha256": "b713fb8b7fc8991d0cb47c15e80ab451f73247a296183494c90961f74c7d96c0"}, "downloads": -1, "filename": "slo_generator-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1d7df627bb7d3b56e8f577e38160def6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 21939, "upload_time": "2019-10-02T11:19:32", "upload_time_iso_8601": "2019-10-02T11:19:32.671778Z", "url": "https://files.pythonhosted.org/packages/b5/e6/f7e0916737fc7396fd4aeea451dfe00f9c95e4ea7b79d7f311cbd128743f/slo_generator-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "867e34354a7e9c4fa4a0d77f8864060a", "sha256": "9c454f8d80a5f799e92cdb658cc306f380c175efb659997239a242053ce755b5"}, "downloads": -1, "filename": "slo-generator-0.1.6.tar.gz", "has_sig": false, "md5_digest": "867e34354a7e9c4fa4a0d77f8864060a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 15731, "upload_time": "2019-10-02T11:19:35", "upload_time_iso_8601": "2019-10-02T11:19:35.049447Z", "url": "https://files.pythonhosted.org/packages/12/3c/e7856f1cb2c8e375c2b527d805c2235442be126d2819782702f5d6c43ef4/slo-generator-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "b56cb0a14dc9ceeeabebb4e329e3571f", "sha256": "98b0e499634f924f8016a0d03466fb90dd9bae31ca5a6377a5d16adcd23c7b85"}, "downloads": -1, "filename": "slo_generator-0.1.7-py2-none-any.whl", "has_sig": false, "md5_digest": "b56cb0a14dc9ceeeabebb4e329e3571f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=3.0", "size": 21975, "upload_time": "2019-11-27T13:29:29", "upload_time_iso_8601": "2019-11-27T13:29:29.504229Z", "url": "https://files.pythonhosted.org/packages/50/54/12f3762a3f653c95d6bdb437c09562b535710160f25e995b2281b5180f55/slo_generator-0.1.7-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6238c717622ac7d20f1b62bf6020106c", "sha256": "b73f63ab2b51916760ca9b50ed1f261aef200f9d3855914f33c12a6dfa575d69"}, "downloads": -1, "filename": "slo-generator-0.1.7.tar.gz", "has_sig": false, "md5_digest": "6238c717622ac7d20f1b62bf6020106c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 13116, "upload_time": "2019-11-27T13:29:31", "upload_time_iso_8601": "2019-11-27T13:29:31.210967Z", "url": "https://files.pythonhosted.org/packages/2f/77/a37363f9396d6a90c7c9b95401d3495fc305a6741ae0788397fd2a56fbae/slo-generator-0.1.7.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3b880362dd3b66cfec65ba0572f63089", "sha256": "7d32e650db320de732a0fbc79cd350422bebc495339074a9cf7fb0d12ecc8d78"}, "downloads": -1, "filename": "slo_generator-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b880362dd3b66cfec65ba0572f63089", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 21793, "upload_time": "2020-01-28T09:56:02", "upload_time_iso_8601": "2020-01-28T09:56:02.822873Z", "url": "https://files.pythonhosted.org/packages/8e/b0/2591b5b6e94799dacc9b9c2e1cbe4ae57a804b91f3fdb8b3f38d40e05b1c/slo_generator-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "174129fdd3d58e6c019bd3ae7bf43fbc", "sha256": "b20f835177d9e88e9f95a69d95f3c87b51d3fd041e48ea72cce01069141dac91"}, "downloads": -1, "filename": "slo-generator-0.2.0.tar.gz", "has_sig": false, "md5_digest": "174129fdd3d58e6c019bd3ae7bf43fbc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 15861, "upload_time": "2020-01-28T09:56:04", "upload_time_iso_8601": "2020-01-28T09:56:04.257754Z", "url": "https://files.pythonhosted.org/packages/92/06/c68cb22ec6685db5b31cb8958c9e904165623598a1d8473f1d8858f52066/slo-generator-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7f17dd70d2d9a7bb1400fee189eea845", "sha256": "9b7356cd99a4f83c66225e42b1665a12892701edcf3ef79ea91cb18bb8120604"}, "downloads": -1, "filename": "slo_generator-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7f17dd70d2d9a7bb1400fee189eea845", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 27413, "upload_time": "2020-02-18T15:02:45", "upload_time_iso_8601": "2020-02-18T15:02:45.443373Z", "url": "https://files.pythonhosted.org/packages/5a/c4/a9b2618b1dfed400c5d96e4090fe84993f3c789f994ade7a748bc79ed56c/slo_generator-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ad9a826f0e575abf4fc28bae5cc9a19", "sha256": "b6a3a0b5fd068257a39f66d45783575b9be40fe5ce01ac23385b039b3e73c368"}, "downloads": -1, "filename": "slo-generator-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5ad9a826f0e575abf4fc28bae5cc9a19", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 21416, "upload_time": "2020-02-18T15:02:47", "upload_time_iso_8601": "2020-02-18T15:02:47.434090Z", "url": "https://files.pythonhosted.org/packages/7e/2a/6654adbbdd661a06b057737bc4789a01604d5ff87b65579063ca236cc355/slo-generator-0.2.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "7a78e676919897fb8dba18ac3bfbea72", "sha256": "d5eda223ee0baff7b75e54959d0ed412b1f64113abcd1c3f54ceb068926dfc92"}, "downloads": -1, "filename": "slo_generator-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "7a78e676919897fb8dba18ac3bfbea72", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=3.4", "size": 34288, "upload_time": "2020-04-01T12:46:43", "upload_time_iso_8601": "2020-04-01T12:46:43.467837Z", "url": "https://files.pythonhosted.org/packages/d3/f0/cda498ea2169945f53a4910781a4f34571faeb6c961fd3b5a89880b1f580/slo_generator-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab71f44c84116df262893e09737a15af", "sha256": "7e38bf54ea5d860bdc240a79f5c8d07900e8d764835500177144ff83c3a673a8"}, "downloads": -1, "filename": "slo-generator-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ab71f44c84116df262893e09737a15af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 23919, "upload_time": "2020-04-01T12:46:45", "upload_time_iso_8601": "2020-04-01T12:46:45.500487Z", "url": "https://files.pythonhosted.org/packages/d3/4c/6c1bea85a872237496633a0ccb2e239243f9ebcb61c2201a7426b0fcf415/slo-generator-1.0.0.tar.gz", "yanked": false}], "1.0.0a1": [{"comment_text": "", "digests": {"md5": "4d4871d50447eacb14bf10c6a7af4e73", "sha256": "152f22600567109ba4c1b4020dfc54b5f1c27121f9dd8b6095e3838210e4da12"}, "downloads": -1, "filename": "slo_generator-1.0.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "4d4871d50447eacb14bf10c6a7af4e73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 34155, "upload_time": "2020-02-18T15:06:59", "upload_time_iso_8601": "2020-02-18T15:06:59.148898Z", "url": "https://files.pythonhosted.org/packages/ab/10/e4d6873c7e71ec0b91bf00deeb6e47e1265dddf514453fc592107335fd71/slo_generator-1.0.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d7ff529212c949f1ca1813a1f36a023", "sha256": "f024ea57b66ea7c7671bc4e7dde972ba7e635a69b25e8a659d951400d826fb2a"}, "downloads": -1, "filename": "slo-generator-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "6d7ff529212c949f1ca1813a1f36a023", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 27667, "upload_time": "2020-02-18T15:07:01", "upload_time_iso_8601": "2020-02-18T15:07:01.665234Z", "url": "https://files.pythonhosted.org/packages/9f/72/be6ce972df35f05f13234645b9d0ca0f8e5cc4f152fc35c2bf2ddd166a6f/slo-generator-1.0.0a1.tar.gz", "yanked": false}], "1.0.0a3": [{"comment_text": "", "digests": {"md5": "ecbcba85d54d98011dff1ec720d01131", "sha256": "ec674e229022af41140eb8500eb46ae09e527cc4551a8c0d9a6123bed364f20a"}, "downloads": -1, "filename": "slo_generator-1.0.0a3-py3-none-any.whl", "has_sig": false, "md5_digest": "ecbcba85d54d98011dff1ec720d01131", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 34240, "upload_time": "2020-03-12T10:37:40", "upload_time_iso_8601": "2020-03-12T10:37:40.356556Z", "url": "https://files.pythonhosted.org/packages/e5/69/1cf41c0758cb4051a6ad5e2ac7b302d349315cb946f1fdaedf9c33ab755f/slo_generator-1.0.0a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1daeccfb73b1e35308191ddab5c68b09", "sha256": "b27c8572b86608d10f6f1c704170b40091d0682a053c205ef45557c07c53baa2"}, "downloads": -1, "filename": "slo-generator-1.0.0a3.tar.gz", "has_sig": false, "md5_digest": "1daeccfb73b1e35308191ddab5c68b09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 27788, "upload_time": "2020-03-12T10:37:41", "upload_time_iso_8601": "2020-03-12T10:37:41.606070Z", "url": "https://files.pythonhosted.org/packages/e7/a5/210340e1e19cddd8c5b6cbed4af6337f5eb730f589da59ef06edcff33cf2/slo-generator-1.0.0a3.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "aa15fdd8c01404886dd69c2d43a0b938", "sha256": "055f8ecd7117c5a48ff16c2dc6aeca7b72f13f54df23927d56208066b902c534"}, "downloads": -1, "filename": "slo_generator-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "aa15fdd8c01404886dd69c2d43a0b938", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=3.4", "size": 34408, "upload_time": "2020-05-06T14:12:09", "upload_time_iso_8601": "2020-05-06T14:12:09.028999Z", "url": "https://files.pythonhosted.org/packages/2b/18/b493d6c9e43c688fb32e0ed68a47c528031d05227c3e55eedd4803f35747/slo_generator-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "195bbaa84ca163f7f7fc99850ceb370b", "sha256": "bf0908d6a54cf221335e00d0d90d3507b7b6ea43cd32e053cd73f37102aae8fc"}, "downloads": -1, "filename": "slo-generator-1.0.1.tar.gz", "has_sig": false, "md5_digest": "195bbaa84ca163f7f7fc99850ceb370b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 23987, "upload_time": "2020-05-06T14:12:10", "upload_time_iso_8601": "2020-05-06T14:12:10.654790Z", "url": "https://files.pythonhosted.org/packages/3a/d9/c96cc928dd28953b13662b9b9ac2a619862059e69eb5599be0ce027db850/slo-generator-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa15fdd8c01404886dd69c2d43a0b938", "sha256": "055f8ecd7117c5a48ff16c2dc6aeca7b72f13f54df23927d56208066b902c534"}, "downloads": -1, "filename": "slo_generator-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "aa15fdd8c01404886dd69c2d43a0b938", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=3.4", "size": 34408, "upload_time": "2020-05-06T14:12:09", "upload_time_iso_8601": "2020-05-06T14:12:09.028999Z", "url": "https://files.pythonhosted.org/packages/2b/18/b493d6c9e43c688fb32e0ed68a47c528031d05227c3e55eedd4803f35747/slo_generator-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "195bbaa84ca163f7f7fc99850ceb370b", "sha256": "bf0908d6a54cf221335e00d0d90d3507b7b6ea43cd32e053cd73f37102aae8fc"}, "downloads": -1, "filename": "slo-generator-1.0.1.tar.gz", "has_sig": false, "md5_digest": "195bbaa84ca163f7f7fc99850ceb370b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 23987, "upload_time": "2020-05-06T14:12:10", "upload_time_iso_8601": "2020-05-06T14:12:10.654790Z", "url": "https://files.pythonhosted.org/packages/3a/d9/c96cc928dd28953b13662b9b9ac2a619862059e69eb5599be0ce027db850/slo-generator-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:18 2020"}