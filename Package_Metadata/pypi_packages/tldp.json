{"info": {"author": "Martin A. Brown", "author_email": "martin@linux-ip.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Documentation", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "tldp - tools for publishing from TLDP sources\n=============================================\n\n.. image:: https://api.travis-ci.org/martin-a-brown/python-tldp.svg\n    :target: https://github.com/tLDP/python-tldp\n\n.. image:: http://img.shields.io/badge/license-MIT-brightgreen.svg \n    :target: http://opensource.org/licenses/MIT\n    :alt: MIT license\n\nThis package was written for the Linux Documentation Project (TLDP) to help\nwith management and publication automation of source documents.  The primary\ninterface provided is a command-line tool caalled `ldptool`.  The canonical\nlocation of this software is:\n\n  https://github.com/tLDP/python-tldp/\n\nThe `ldptool` executable can:\n\n- crawl through any number of source collection directories\n- crawl through a single output collection\n- match the sources to the outputs (based on document stem name)\n- describe supported source formats (`--formats`)\n- describe the meaning of document status (`--statustypes`)\n- describe the collection by type and status (`--summary`)\n- list out individual document type and status (`--list`)\n- build the expected (non-configurable) set of outputs (`--build`)\n- build and publish the outputs (`--publish`)\n- produce runnable shell script to STDOUT (`--script`)\n\nThe tools in this package process source documents in the `TLDP document\nrepository <https://github.com/tLDP/LDP>`_ and generate the following set of\noutputs from each source document.\n\n- .pdf, PDF\n- .txt, text\n- -single.html, a one-page HTML document\n- .html, a multipage HTML document\n\n(We may add other output formats; an epub format is under consideration.)\n\nSupported input formats are:\n\n- Asciidoc\n- Linuxdoc\n- Docbook SGML 3.x (though deprecated, please no new submissions)\n- Docbook SGML 4.x\n- Docbook XML 4.x\n- Docbook XML 5.x (basic support, as of 2016-03-10)\n\n\nExample usages\n--------------\nIf your attempts to run the below commands don't work or generate errors, see\nalso `Minimal configuration`_.\n\nHere are some example usages against a live checkout of the LDP source\nrepository and a local cache of the output tree:\n\nTo see what work needs to be done, `ldptool --list`::\n\n  $ ldptool  --list\n  orphan    <unknown>            Bugzilla-Guide\n  new       DocBook XML 4.x      DocBook-Demystification-HOWTO\n  stale     DocBook XML 4.x      Linux-Dictionary\n  broken    DocBook SGML 3.x/4.x PHP-Nuke-HOWTO\n  stale     Linuxdoc             User-Group-HOWTO\n\nTo see publication status of each document:::\n\n  $ ldptool --list all | head -n 3\n  published Linuxdoc             3-Button-Mouse                                 \n  published Linuxdoc             3D-Modelling                                   \n  published Linuxdoc             4mb-Laptops                                    \n\nTo get more information about the newer or missing files in a specific\ndocument:::\n\n  $ ldptool --verbose --list Linux-Dictionary\n  stale     DocBook XML 4.x      Linux-Dictionary\n           doctype <class 'tldp.doctypes.docbook4xml.Docbook4XML'>\n        output dir /home/mabrown/tmp/en/Linux-Dictionary\n       source file /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/Linux-Dictionary.xml\n      newer source /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/Contributors.xml\n      newer source /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/D.xml\n      newer source /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/J.xml\n      newer source /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/O.xml\n      newer source /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/S.xml\n\nTo see what the entire source collection looks like, use `ldptool --summary`:::\n\n  $ ldptool --summary\n  By Status Type\n  --------------\n  source     503  3-Button-Mouse, 3D-Modelling, 4mb-Laptops, and 500 more ...\n  output     503  3-Button-Mouse, 3D-Modelling, 4mb-Laptops, and 500 more ...\n  published  503  3-Button-Mouse, 3D-Modelling, 4mb-Laptops, and 500 more ...\n  stale        0  \n  orphan       0  \n  broken       1  HOWTO-INDEX\n  new          0  \n\n  By Document Type\n  ----------------\n  Linuxdoc              226  3-Button-Mouse, 3D-Modelling, and 224 more ...\n  Docbook4XML           130  8021X-HOWTO, abs-guide, and 128 more ...\n  Docbook5XML             1  Assembly-HOWTO\n  DocbookSGML           146  ACP-Modem, and 145 more ...\n\nTo build and publish a single document:::\n\n  $ ldptool --publish DocBook-Demystification-HOWTO\n  $ ldptool --publish ~/vcs/LDP/LDP/howto/docbook/Valgrind-HOWTO.xml\n\nTo build and publish anything that is new or updated work:::\n\n  $ ldptool --publish\n  $ ldptool --publish work\n\nTo (re-)build and publish everything, regardless of state:::\n\n  $ ldptool --publish all\n\nTo generate a specific output (into a --builddir):::\n\n  $ ldptool --build DocBook-Demystification-HOWTO\n\nTo generate all outputs into a --builddir (should exist):::\n\n  $ ldptool --builddir ~/tmp/scratch-directory/ --build all\n\nTo build new/updated work, but pass over a trouble-maker:::\n\n  $ ldptool --build --skip HOWTO-INDEX\n\nTo loudly generate all outputs, except a trouble-maker:::\n\n  $ ldptool --build all --loglevel debug --skip HOWTO-INDEX\n\nTo print out a shell script for building a specific document:::\n\n  $ ldptool --script TransparentProxy\n  $ ldptool --script ~/vcs/LDP/LDP/howto/docbook/Assembly-HOWTO.xml\n\n\nLogging\n-------\nThe `ldptool` utility is largely written to be interactive or a supervised\nbatch process.  It uses STDERR as its logstream and sets the default loglevel\nat logging.ERROR.  At this log level, in `--script`, `--build` and `--publish`\nmode, it should report nothing to STDERR.  To increase progress verbosity,\nsetting the loglevel to info (`--loglevel info`) may help with understanding\nwhat work the tool is performing.  If you need to collect diagnostic\ninformation for troubleshooting or bug reports, `ldptool` supports `--loglevel\ndebug`.\n\n\nConfiguration\n-------------\nThe `ldptool` comes with support for reading its settings from the\ncommand-line, environment or a system and/or user-specified configuration\nfile.  If you want to generate a sample configuration file to edit and use\nlater, you can run:::\n\n  ldptool --dump-cfg > my-ldptool.cfg\n  ldptool --configfile my-ldptool.cfg --list\n  LDPTOOL_CONFIGFILE=/path/to/ldptool.cfg ldptool --list\n\n\nSource document identification\n------------------------------\nTLDP's source repository contains many separate directories containing\ndocuments (e.g. LDP/howto/docbook, LDP/howto/linuxdoc).  Each of these\ndirectories may contain documents; to `ldptool` each of these is a\n`--sourcedir`.\n\nA source document (in a `--sourcedir`) can be a file or a directory.  Here are\ntwo examples.  The Assembly-HOWTO.xml is an entire document stored as a single\nfile.  The directory BRIDGE-STP-HOWTO exists and contains its main document, a\nfile named BRIDGE-STP-HOWTO.sgml.  In the case of a source document that is a\ndirectory, the stem name of the primary document must match the name of the\ndirectory.::\n\n  Assembly-HOWTO.xml\n  BRIDGE-STP-HOWTO/\n  BRIDGE-STP-HOWTO/BRIDGE-STP-HOWTO.sgml\n  BRIDGE-STP-HOWTO/images\n  BRIDGE-STP-HOWTO/images/hardware-setup.eps\n  BRIDGE-STP-HOWTO/images/hardware-setup.png\n  BRIDGE-STP-HOWTO/images/old-hardware-setup.eps\n  BRIDGE-STP-HOWTO/images/old-hardware-setup.png\n\nEach document for a single run of `ldptool` can be uniquely identified by its\nstem name.  In the above, the stems are `Assembly-HOWTO` and\n`BRIDGE-STP-HOWTO`.  It is an error to have two documents with the same stem\nname and the second discovered document will be ignored.\n\nThere is a directory containing the output collection.  Each directory is named\nby the stem name of the source document and contains the output formats for\neach source document.  Here are the corresponding output directories for the\nabove two documents:::\n\n  Assembly-HOWTO/\n  Assembly-HOWTO/Assembly-HOWTO.html\n  Assembly-HOWTO/Assembly-HOWTO.pdf\n  Assembly-HOWTO/Assembly-HOWTO-single.html\n  Assembly-HOWTO/Assembly-HOWTO.txt\n  Assembly-HOWTO/index.html\n  Assembly-HOWTO/mips.html\n  Assembly-HOWTO/nasm.html\n    ... and more ...\n  \n  BRIDGE-STP-HOWTO/\n  BRIDGE-STP-HOWTO/BRIDGE-STP-HOWTO.html\n  BRIDGE-STP-HOWTO/BRIDGE-STP-HOWTO.pdf\n  BRIDGE-STP-HOWTO/BRIDGE-STP-HOWTO-single.html\n  BRIDGE-STP-HOWTO/BRIDGE-STP-HOWTO.txt\n  BRIDGE-STP-HOWTO/images\n  BRIDGE-STP-HOWTO/images/hardware-setup.eps\n  BRIDGE-STP-HOWTO/images/hardware-setup.png\n  BRIDGE-STP-HOWTO/images/old-hardware-setup.eps\n  BRIDGE-STP-HOWTO/images/old-hardware-setup.png\n  BRIDGE-STP-HOWTO/index.html\n    ... and more ...\n\n\nMinimal configuration\n---------------------\nThe most important configuration parameters that `ldptool` takes are the set\nof source directories (in which to find documents) and the output directory,\nin which to create the resulting outputs.  It will not be able to run unless\nit has at least one --sourcedir and an existing --pubdir directory.\n\nIf you have an LDP checkout in your home directory, here's an example which\nwould process all of the Linuxdoc HOWTO docs:::\n\n  mkdir LDP-output-tree\n  ldptool --sourcedir $HOME/LDP/LDP/howto/linuxdoc --pubdir LDP-output-tree\n\nIf you would like to create a sample configuration file for use later (or for\ncopying into the system location, `/etc/ldptool/ldptool.ini`, you can generate\nyour own config file as follows:::\n\n  ldptool > sample-ldptool.cfg \\\n          --sourcedir $HOME/LDP/LDP/faq/linuxdoc/ \\\n          --sourcedir $HOME/LDP/LDP/guide/linuxdoc/ \\\n          --sourcedir $HOME/LDP/LDP/howto/linuxdoc/ \\\n          --sourcedir $HOME/LDP/LDP/howto/docbook/ \\\n          --sourcedir $HOME/LDP/LDP/guide/docbook/ \\\n          --sourcedir $HOME/LDP/LDP/ref/docbook/ \\\n          --sourcedir $HOME/LDP/LDP/faq/docbook/ \\\n          --pubdir $HOME/LDP-output/ \\\n          --loglevel info \\\n          --dump-cfg\n\nThen, you can run the same configuration again with:::\n\n  ldptool --configfile sample-ldptool.cfg\n\nThe `ldptool` program tries to locate all of the tools it needs to process\ndocuments.  Each source format requires a certain set of tools, for example, to\nprocess DocBook 4.x XML, `ldptool` needs the executables xmllint, xstlproc,\nhtml2text, fop and dblatex.  It also requires the XSL files for generating FO,\nchunked HTML and single-page HTML.  All of the items are configurable on the\ncommand-line or in the configuration file, but here's a sample config file\nstanza:::\n\n  [ldptool-docbook4xml]\n  xslchunk = /usr/share/xml/docbook/stylesheet/ldp/html/tldp-sections.xsl\n  xslsingle = /usr/share/xml/docbook/stylesheet/ldp/html/tldp-one-page.xsl\n  fop = /usr/bin/fop\n  dblatex = /usr/bin/dblatex\n  xsltproc = /usr/bin/xsltproc\n  html2text = /usr/bin/html2text\n  xslprint = /usr/share/xml/docbook/stylesheet/ldp/fo/tldp-print.xsl\n  xmllint = /usr/bin/xmllint\n\nThe above stanza was generated by running `ldptool --dump-cfg` on an Ubuntu\n14.04 system which had all of the software dependencies installed.  If your\ndistribution does not supply ldp-docbook-xsl, for example, you would need to\nfetch those files, put them someplace in the filesystem and adjust your\nconfiguration file or command-line invocations accordingly.\n\n\nSoftware dependencies\n---------------------\nThere are a large number of packages listed here in the dependency set.  This\nis because the supporting software for processing Linuxdoc and the various\nDocBook formats is split across many upstream packages and repositories.\n\nThe generated python packages (see below) do not include the explicit\ndependencies to allow the package manager (e.g. apt, zypper, dnf) to install\nthe dependencies.  This would be a nice improvement.\n\nHere are the dependencies needed for this tool to run:\n\nUbuntu / Debian\n+++++++++++++++\n- linuxdoc-tools{,-text,-latex}\n- docbook{,-dsssl,-xsl,-utils}\n- htmldoc{,-common}\n- xsltproc\n- fop\n- sgml2x\n- opensp\n- openjade\n- ldp-docbook-xsl\n- ldp-docbook-dsssl\n- html2text\n- docbook5-xml\n- docbook-xsl-ns\n- jing\n- asciidoc\n- libxml2-utils\n\nOpenSUSE\n++++++++\n- htmldoc\n- openjade\n- sgmltool\n- html2text\n- docbook{,5}-xsl-stylesheets\n- docbook-dsssl-stylesheets\n- docbook-utils-minimal\n- docbook-utils\n- jing\n- asciidoc\n- libxml2-tools\n- libxslt-tools\n\nThere are a few additional data files that are needed, specifically, the TLDP\nXSL and DSSSL files that are used by the respective DocBook SGML (openjade) and\nDocBook XML (xsltproc) processing engines to generate the various outputs.\n\nOn Debian-based systems, there are packages available from the distributor\ncalled ldp-docbook-{xsl,dsssl}.  There aren't any such packages for RPM (yet).\n\n\nSupported Python versions\n-------------------------\nThis package was developed against Python-2.7.8 and Python-3.4.1 (on\nOpenSUSE).  It has been used on Python-2.7.6 (Ubuntu-14.04) and Python-3.4.2 and Python-2.7.9 (on Debian 8).\n\nContinuous Integration testing information and coverage can be reviewed at\n`this project's Travis CI page <https://travis-ci.org/martin-a-brown/python-tldp/>`_.\n\n\nInstallation\n------------\nThis is a pure-Python package, and you should be able to use your favorite\nPython tool to install it on your system.  The python-tldp package (`ldptool`)\nrequires a large number of other packages, most of which are outside of the\nPython ecosystem.  There's room for improvement here, but here are a few\ntidbits.\n\nBuild an RPM::\n\n  python setup.py sdist && rpmbuild -ta ./dist/python-tldp-${VERSION}.tar.gz\n\nThere's a generated file, `contrib/tldp.spec`, which makes a few changes to the\nsetuptools stock-generated specfile.  It adds the dependencies, marks the\nconfiguration file as %config(noreplace), adds a manpage and names the binary\npackage `python-tldp`.\n\nBuild a DEB::\n\nCheck to see if the package is available from upstream.  It may be included in\nthe Debian repositories already::\n\n  apt-cache search tldp\n\nThe quick and dirty way is as follows::\n\n  python setup.py --command-packages=stdeb.command bdist_deb\n\nBut, there is also a `debian` directory.  If you are working straight from the\ngit checkout, you should be able to generate an installable (unsigned) Debian\npackage with::\n\n  bash contrib/debian-release.sh -us -uc\n\nInstall using pip:\n\nUnknown.  Because the tool relies so heavily on system-installed non-Python\ntools, I have not bothered to try installing the package using pip.  It should\nwork equivalently as well as running the program straight from a checkout.\nIf you learn anything here or have suggestions, for me, please feel free to\nsend them along.\n\n\nLinks\n-----\n\n* `Canonical python-tldp repository <https://github.com/tLDP/python-tldp>`_\n* `Source tree on GitHub <https://github.com/tLDP/LDP>`_\n* `Output documentation tree (sample) <http://www.tldp.org/>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://en.tldp.org/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "tldp", "package_url": "https://pypi.org/project/tldp/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tldp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://en.tldp.org/"}, "release_url": "https://pypi.org/project/tldp/0.7.13/", "requires_dist": null, "requires_python": null, "summary": "automatic publishing tool for DocBook, Linuxdoc and Asciidoc", "version": "0.7.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            tldp - tools for publishing from TLDP sources<br>=============================================<br><br>.. image:: https://api.travis-ci.org/martin-a-brown/python-tldp.svg<br>    :target: https://github.com/tLDP/python-tldp<br><br>.. image:: http://img.shields.io/badge/license-MIT-brightgreen.svg <br>    :target: http://opensource.org/licenses/MIT<br>    :alt: MIT license<br><br>This package was written for the Linux Documentation Project (TLDP) to help<br>with management and publication automation of source documents.  The primary<br>interface provided is a command-line tool caalled `ldptool`.  The canonical<br>location of this software is:<br><br>  https://github.com/tLDP/python-tldp/<br><br>The `ldptool` executable can:<br><br>- crawl through any number of source collection directories<br>- crawl through a single output collection<br>- match the sources to the outputs (based on document stem name)<br>- describe supported source formats (`--formats`)<br>- describe the meaning of document status (`--statustypes`)<br>- describe the collection by type and status (`--summary`)<br>- list out individual document type and status (`--list`)<br>- build the expected (non-configurable) set of outputs (`--build`)<br>- build and publish the outputs (`--publish`)<br>- produce runnable shell script to STDOUT (`--script`)<br><br>The tools in this package process source documents in the `TLDP document<br>repository &lt;https://github.com/tLDP/LDP&gt;`_ and generate the following set of<br>outputs from each source document.<br><br>- .pdf, PDF<br>- .txt, text<br>- -single.html, a one-page HTML document<br>- .html, a multipage HTML document<br><br>(We may add other output formats; an epub format is under consideration.)<br><br>Supported input formats are:<br><br>- Asciidoc<br>- Linuxdoc<br>- Docbook SGML 3.x (though deprecated, please no new submissions)<br>- Docbook SGML 4.x<br>- Docbook XML 4.x<br>- Docbook XML 5.x (basic support, as of 2016-03-10)<br><br><br>Example usages<br>--------------<br>If your attempts to run the below commands don't work or generate errors, see<br>also `Minimal configuration`_.<br><br>Here are some example usages against a live checkout of the LDP source<br>repository and a local cache of the output tree:<br><br>To see what work needs to be done, `ldptool --list`::<br><br>  $ ldptool  --list<br>  orphan    &lt;unknown&gt;            Bugzilla-Guide<br>  new       DocBook XML 4.x      DocBook-Demystification-HOWTO<br>  stale     DocBook XML 4.x      Linux-Dictionary<br>  broken    DocBook SGML 3.x/4.x PHP-Nuke-HOWTO<br>  stale     Linuxdoc             User-Group-HOWTO<br><br>To see publication status of each document:::<br><br>  $ ldptool --list all | head -n 3<br>  published Linuxdoc             3-Button-Mouse                                 <br>  published Linuxdoc             3D-Modelling                                   <br>  published Linuxdoc             4mb-Laptops                                    <br><br>To get more information about the newer or missing files in a specific<br>document:::<br><br>  $ ldptool --verbose --list Linux-Dictionary<br>  stale     DocBook XML 4.x      Linux-Dictionary<br>           doctype &lt;class 'tldp.doctypes.docbook4xml.Docbook4XML'&gt;<br>        output dir /home/mabrown/tmp/en/Linux-Dictionary<br>       source file /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/Linux-Dictionary.xml<br>      newer source /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/Contributors.xml<br>      newer source /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/D.xml<br>      newer source /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/J.xml<br>      newer source /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/O.xml<br>      newer source /home/mabrown/vcs/LDP/LDP/guide/docbook/Linux-Dictionary/S.xml<br><br>To see what the entire source collection looks like, use `ldptool --summary`:::<br><br>  $ ldptool --summary<br>  By Status Type<br>  --------------<br>  source     503  3-Button-Mouse, 3D-Modelling, 4mb-Laptops, and 500 more ...<br>  output     503  3-Button-Mouse, 3D-Modelling, 4mb-Laptops, and 500 more ...<br>  published  503  3-Button-Mouse, 3D-Modelling, 4mb-Laptops, and 500 more ...<br>  stale        0  <br>  orphan       0  <br>  broken       1  HOWTO-INDEX<br>  new          0  <br><br>  By Document Type<br>  ----------------<br>  Linuxdoc              226  3-Button-Mouse, 3D-Modelling, and 224 more ...<br>  Docbook4XML           130  8021X-HOWTO, abs-guide, and 128 more ...<br>  Docbook5XML             1  Assembly-HOWTO<br>  DocbookSGML           146  ACP-Modem, and 145 more ...<br><br>To build and publish a single document:::<br><br>  $ ldptool --publish DocBook-Demystification-HOWTO<br>  $ ldptool --publish ~/vcs/LDP/LDP/howto/docbook/Valgrind-HOWTO.xml<br><br>To build and publish anything that is new or updated work:::<br><br>  $ ldptool --publish<br>  $ ldptool --publish work<br><br>To (re-)build and publish everything, regardless of state:::<br><br>  $ ldptool --publish all<br><br>To generate a specific output (into a --builddir):::<br><br>  $ ldptool --build DocBook-Demystification-HOWTO<br><br>To generate all outputs into a --builddir (should exist):::<br><br>  $ ldptool --builddir ~/tmp/scratch-directory/ --build all<br><br>To build new/updated work, but pass over a trouble-maker:::<br><br>  $ ldptool --build --skip HOWTO-INDEX<br><br>To loudly generate all outputs, except a trouble-maker:::<br><br>  $ ldptool --build all --loglevel debug --skip HOWTO-INDEX<br><br>To print out a shell script for building a specific document:::<br><br>  $ ldptool --script TransparentProxy<br>  $ ldptool --script ~/vcs/LDP/LDP/howto/docbook/Assembly-HOWTO.xml<br><br><br>Logging<br>-------<br>The `ldptool` utility is largely written to be interactive or a supervised<br>batch process.  It uses STDERR as its logstream and sets the default loglevel<br>at logging.ERROR.  At this log level, in `--script`, `--build` and `--publish`<br>mode, it should report nothing to STDERR.  To increase progress verbosity,<br>setting the loglevel to info (`--loglevel info`) may help with understanding<br>what work the tool is performing.  If you need to collect diagnostic<br>information for troubleshooting or bug reports, `ldptool` supports `--loglevel<br>debug`.<br><br><br>Configuration<br>-------------<br>The `ldptool` comes with support for reading its settings from the<br>command-line, environment or a system and/or user-specified configuration<br>file.  If you want to generate a sample configuration file to edit and use<br>later, you can run:::<br><br>  ldptool --dump-cfg &gt; my-ldptool.cfg<br>  ldptool --configfile my-ldptool.cfg --list<br>  LDPTOOL_CONFIGFILE=/path/to/ldptool.cfg ldptool --list<br><br><br>Source document identification<br>------------------------------<br>TLDP's source repository contains many separate directories containing<br>documents (e.g. LDP/howto/docbook, LDP/howto/linuxdoc).  Each of these<br>directories may contain documents; to `ldptool` each of these is a<br>`--sourcedir`.<br><br>A source document (in a `--sourcedir`) can be a file or a directory.  Here are<br>two examples.  The Assembly-HOWTO.xml is an entire document stored as a single<br>file.  The directory BRIDGE-STP-HOWTO exists and contains its main document, a<br>file named BRIDGE-STP-HOWTO.sgml.  In the case of a source document that is a<br>directory, the stem name of the primary document must match the name of the<br>directory.::<br><br>  Assembly-HOWTO.xml<br>  BRIDGE-STP-HOWTO/<br>  BRIDGE-STP-HOWTO/BRIDGE-STP-HOWTO.sgml<br>  BRIDGE-STP-HOWTO/images<br>  BRIDGE-STP-HOWTO/images/hardware-setup.eps<br>  BRIDGE-STP-HOWTO/images/hardware-setup.png<br>  BRIDGE-STP-HOWTO/images/old-hardware-setup.eps<br>  BRIDGE-STP-HOWTO/images/old-hardware-setup.png<br><br>Each document for a single run of `ldptool` can be uniquely identified by its<br>stem name.  In the above, the stems are `Assembly-HOWTO` and<br>`BRIDGE-STP-HOWTO`.  It is an error to have two documents with the same stem<br>name and the second discovered document will be ignored.<br><br>There is a directory containing the output collection.  Each directory is named<br>by the stem name of the source document and contains the output formats for<br>each source document.  Here are the corresponding output directories for the<br>above two documents:::<br><br>  Assembly-HOWTO/<br>  Assembly-HOWTO/Assembly-HOWTO.html<br>  Assembly-HOWTO/Assembly-HOWTO.pdf<br>  Assembly-HOWTO/Assembly-HOWTO-single.html<br>  Assembly-HOWTO/Assembly-HOWTO.txt<br>  Assembly-HOWTO/index.html<br>  Assembly-HOWTO/mips.html<br>  Assembly-HOWTO/nasm.html<br>    ... and more ...<br>  <br>  BRIDGE-STP-HOWTO/<br>  BRIDGE-STP-HOWTO/BRIDGE-STP-HOWTO.html<br>  BRIDGE-STP-HOWTO/BRIDGE-STP-HOWTO.pdf<br>  BRIDGE-STP-HOWTO/BRIDGE-STP-HOWTO-single.html<br>  BRIDGE-STP-HOWTO/BRIDGE-STP-HOWTO.txt<br>  BRIDGE-STP-HOWTO/images<br>  BRIDGE-STP-HOWTO/images/hardware-setup.eps<br>  BRIDGE-STP-HOWTO/images/hardware-setup.png<br>  BRIDGE-STP-HOWTO/images/old-hardware-setup.eps<br>  BRIDGE-STP-HOWTO/images/old-hardware-setup.png<br>  BRIDGE-STP-HOWTO/index.html<br>    ... and more ...<br><br><br>Minimal configuration<br>---------------------<br>The most important configuration parameters that `ldptool` takes are the set<br>of source directories (in which to find documents) and the output directory,<br>in which to create the resulting outputs.  It will not be able to run unless<br>it has at least one --sourcedir and an existing --pubdir directory.<br><br>If you have an LDP checkout in your home directory, here's an example which<br>would process all of the Linuxdoc HOWTO docs:::<br><br>  mkdir LDP-output-tree<br>  ldptool --sourcedir $HOME/LDP/LDP/howto/linuxdoc --pubdir LDP-output-tree<br><br>If you would like to create a sample configuration file for use later (or for<br>copying into the system location, `/etc/ldptool/ldptool.ini`, you can generate<br>your own config file as follows:::<br><br>  ldptool &gt; sample-ldptool.cfg \\<br>          --sourcedir $HOME/LDP/LDP/faq/linuxdoc/ \\<br>          --sourcedir $HOME/LDP/LDP/guide/linuxdoc/ \\<br>          --sourcedir $HOME/LDP/LDP/howto/linuxdoc/ \\<br>          --sourcedir $HOME/LDP/LDP/howto/docbook/ \\<br>          --sourcedir $HOME/LDP/LDP/guide/docbook/ \\<br>          --sourcedir $HOME/LDP/LDP/ref/docbook/ \\<br>          --sourcedir $HOME/LDP/LDP/faq/docbook/ \\<br>          --pubdir $HOME/LDP-output/ \\<br>          --loglevel info \\<br>          --dump-cfg<br><br>Then, you can run the same configuration again with:::<br><br>  ldptool --configfile sample-ldptool.cfg<br><br>The `ldptool` program tries to locate all of the tools it needs to process<br>documents.  Each source format requires a certain set of tools, for example, to<br>process DocBook 4.x XML, `ldptool` needs the executables xmllint, xstlproc,<br>html2text, fop and dblatex.  It also requires the XSL files for generating FO,<br>chunked HTML and single-page HTML.  All of the items are configurable on the<br>command-line or in the configuration file, but here's a sample config file<br>stanza:::<br><br>  [ldptool-docbook4xml]<br>  xslchunk = /usr/share/xml/docbook/stylesheet/ldp/html/tldp-sections.xsl<br>  xslsingle = /usr/share/xml/docbook/stylesheet/ldp/html/tldp-one-page.xsl<br>  fop = /usr/bin/fop<br>  dblatex = /usr/bin/dblatex<br>  xsltproc = /usr/bin/xsltproc<br>  html2text = /usr/bin/html2text<br>  xslprint = /usr/share/xml/docbook/stylesheet/ldp/fo/tldp-print.xsl<br>  xmllint = /usr/bin/xmllint<br><br>The above stanza was generated by running `ldptool --dump-cfg` on an Ubuntu<br>14.04 system which had all of the software dependencies installed.  If your<br>distribution does not supply ldp-docbook-xsl, for example, you would need to<br>fetch those files, put them someplace in the filesystem and adjust your<br>configuration file or command-line invocations accordingly.<br><br><br>Software dependencies<br>---------------------<br>There are a large number of packages listed here in the dependency set.  This<br>is because the supporting software for processing Linuxdoc and the various<br>DocBook formats is split across many upstream packages and repositories.<br><br>The generated python packages (see below) do not include the explicit<br>dependencies to allow the package manager (e.g. apt, zypper, dnf) to install<br>the dependencies.  This would be a nice improvement.<br><br>Here are the dependencies needed for this tool to run:<br><br>Ubuntu / Debian<br>+++++++++++++++<br>- linuxdoc-tools{,-text,-latex}<br>- docbook{,-dsssl,-xsl,-utils}<br>- htmldoc{,-common}<br>- xsltproc<br>- fop<br>- sgml2x<br>- opensp<br>- openjade<br>- ldp-docbook-xsl<br>- ldp-docbook-dsssl<br>- html2text<br>- docbook5-xml<br>- docbook-xsl-ns<br>- jing<br>- asciidoc<br>- libxml2-utils<br><br>OpenSUSE<br>++++++++<br>- htmldoc<br>- openjade<br>- sgmltool<br>- html2text<br>- docbook{,5}-xsl-stylesheets<br>- docbook-dsssl-stylesheets<br>- docbook-utils-minimal<br>- docbook-utils<br>- jing<br>- asciidoc<br>- libxml2-tools<br>- libxslt-tools<br><br>There are a few additional data files that are needed, specifically, the TLDP<br>XSL and DSSSL files that are used by the respective DocBook SGML (openjade) and<br>DocBook XML (xsltproc) processing engines to generate the various outputs.<br><br>On Debian-based systems, there are packages available from the distributor<br>called ldp-docbook-{xsl,dsssl}.  There aren't any such packages for RPM (yet).<br><br><br>Supported Python versions<br>-------------------------<br>This package was developed against Python-2.7.8 and Python-3.4.1 (on<br>OpenSUSE).  It has been used on Python-2.7.6 (Ubuntu-14.04) and Python-3.4.2 and Python-2.7.9 (on Debian 8).<br><br>Continuous Integration testing information and coverage can be reviewed at<br>`this project's Travis CI page &lt;https://travis-ci.org/martin-a-brown/python-tldp/&gt;`_.<br><br><br>Installation<br>------------<br>This is a pure-Python package, and you should be able to use your favorite<br>Python tool to install it on your system.  The python-tldp package (`ldptool`)<br>requires a large number of other packages, most of which are outside of the<br>Python ecosystem.  There's room for improvement here, but here are a few<br>tidbits.<br><br>Build an RPM::<br><br>  python setup.py sdist &amp;&amp; rpmbuild -ta ./dist/python-tldp-${VERSION}.tar.gz<br><br>There's a generated file, `contrib/tldp.spec`, which makes a few changes to the<br>setuptools stock-generated specfile.  It adds the dependencies, marks the<br>configuration file as %config(noreplace), adds a manpage and names the binary<br>package `python-tldp`.<br><br>Build a DEB::<br><br>Check to see if the package is available from upstream.  It may be included in<br>the Debian repositories already::<br><br>  apt-cache search tldp<br><br>The quick and dirty way is as follows::<br><br>  python setup.py --command-packages=stdeb.command bdist_deb<br><br>But, there is also a `debian` directory.  If you are working straight from the<br>git checkout, you should be able to generate an installable (unsigned) Debian<br>package with::<br><br>  bash contrib/debian-release.sh -us -uc<br><br>Install using pip:<br><br>Unknown.  Because the tool relies so heavily on system-installed non-Python<br>tools, I have not bothered to try installing the package using pip.  It should<br>work equivalently as well as running the program straight from a checkout.<br>If you learn anything here or have suggestions, for me, please feel free to<br>send them along.<br><br><br>Links<br>-----<br><br>* `Canonical python-tldp repository &lt;https://github.com/tLDP/python-tldp&gt;`_<br>* `Source tree on GitHub &lt;https://github.com/tLDP/LDP&gt;`_<br>* `Output documentation tree (sample) &lt;http://www.tldp.org/&gt;`_\n          </div>"}, "last_serial": 2114387, "releases": {"0.7.0": [{"comment_text": "", "digests": {"md5": "55da812cceae2d1659c67caf3eeaf6fb", "sha256": "024e853ebabd2eb8ad7dbe41ea0cffc4d50d74a6b427b97296f684794e3bd70c"}, "downloads": -1, "filename": "tldp-0.7.0.tar.gz", "has_sig": false, "md5_digest": "55da812cceae2d1659c67caf3eeaf6fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37212, "upload_time": "2016-03-30T05:26:00", "upload_time_iso_8601": "2016-03-30T05:26:00.181315Z", "url": "https://files.pythonhosted.org/packages/f4/20/637a0889416db708434573593861c8b0aeb9db77274acaf9f9d0655c5722/tldp-0.7.0.tar.gz", "yanked": false}], "0.7.12": [{"comment_text": "", "digests": {"md5": "6242e65308790ff9941b61872ba77ce3", "sha256": "8a99e38d2b960b550d09136b20a419a58099c07da242cc1749f7ae6f7b33e4b1"}, "downloads": -1, "filename": "tldp-0.7.12.tar.gz", "has_sig": false, "md5_digest": "6242e65308790ff9941b61872ba77ce3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50359, "upload_time": "2016-04-30T22:32:50", "upload_time_iso_8601": "2016-04-30T22:32:50.515643Z", "url": "https://files.pythonhosted.org/packages/39/4c/cdab2321f77713a82890005be84198d337932c6b4f811a40468457363a43/tldp-0.7.12.tar.gz", "yanked": false}], "0.7.13": [{"comment_text": "", "digests": {"md5": "66e4f10994d69d8e3d41f9c4389cd55b", "sha256": "3e805e8ef7de4a99db1855aad5bb37dca2b42a30590128e174bac25858e2fc33"}, "downloads": -1, "filename": "tldp-0.7.13.tar.gz", "has_sig": false, "md5_digest": "66e4f10994d69d8e3d41f9c4389cd55b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51390, "upload_time": "2016-05-13T16:31:08", "upload_time_iso_8601": "2016-05-13T16:31:08.749005Z", "url": "https://files.pythonhosted.org/packages/9e/0a/ab517ecaa2d55e052a20233c65925b7e8159c489b958464ae935d4f5f7f4/tldp-0.7.13.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "bb78f37f67f21016ea74c416c1ca116a", "sha256": "813e6bdec8893f1414078d69afbc5880849823f5088e4eeb9c74259a9e1c30fe"}, "downloads": -1, "filename": "tldp-0.7.2.tar.gz", "has_sig": false, "md5_digest": "bb78f37f67f21016ea74c416c1ca116a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37888, "upload_time": "2016-04-02T21:26:44", "upload_time_iso_8601": "2016-04-02T21:26:44.071667Z", "url": "https://files.pythonhosted.org/packages/e0/b5/62ec22ca11200c2fe54f252d1723798bbad4211db666c5483e9dc0b3d006/tldp-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "fa70d0d2d41c3ec8ca3977c82f4c52f8", "sha256": "b14e9d6ec8c37c0f17b1eeacf94107ca705fa1acfe0f230ce5ecf81e85d5ac5d"}, "downloads": -1, "filename": "tldp-0.7.3.tar.gz", "has_sig": false, "md5_digest": "fa70d0d2d41c3ec8ca3977c82f4c52f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37944, "upload_time": "2016-04-15T14:57:44", "upload_time_iso_8601": "2016-04-15T14:57:44.123742Z", "url": "https://files.pythonhosted.org/packages/75/6f/ad0cb747591109e86729652b52a953efa35d96ae513c4983246f06011939/tldp-0.7.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "66e4f10994d69d8e3d41f9c4389cd55b", "sha256": "3e805e8ef7de4a99db1855aad5bb37dca2b42a30590128e174bac25858e2fc33"}, "downloads": -1, "filename": "tldp-0.7.13.tar.gz", "has_sig": false, "md5_digest": "66e4f10994d69d8e3d41f9c4389cd55b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51390, "upload_time": "2016-05-13T16:31:08", "upload_time_iso_8601": "2016-05-13T16:31:08.749005Z", "url": "https://files.pythonhosted.org/packages/9e/0a/ab517ecaa2d55e052a20233c65925b7e8159c489b958464ae935d4f5f7f4/tldp-0.7.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:28 2020"}