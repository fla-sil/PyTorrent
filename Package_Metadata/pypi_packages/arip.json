{"info": {"author": "oriol mazariegos", "author_email": "mazeitor@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Image Recognition", "Topic :: Scientific/Engineering :: Medical Science Apps.", "Topic :: Software Development"], "description": "Antibiotic Resistance Image Process - ARIP\n==========================================\n\nThis software is aimed to quantify bacterial resistance to antibiotics\nby analysing pictures of phenotypic plates. Currently it supports 96\nwell plates where different bacteria are cultured with different\nconcentrations of antibiotics, but the application adapt to different\nplates size in rows and columns. Computer vision algorithms have been\nimplemented in order to detect different levels of bacterial growth. As\na result, the software generates a report providing quantitative\ninformation for each well of the plate. Pictures should be taken so that\nthe plate is square with the picture frame, the algorithm should be able\nto cope with a slight rotation of the plate.\n\n\nKey methods:\n------------\n\n-  Hough Circles method to detect circles in an image\n   `doc <http://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/hough_circle/hough_circle.html>`__\n-  Wells segmentation using threshold feature of opencv\n   `doc <http://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html#threshold>`__\n   combining binary and otsu threshold\n-  Quality detection using a grid model by rows and columns and\n   clustering them, robust to scale and sensible rotation.\n\nExecution:\n----------\n\nThere are two ways for executing the process: binary or library \\*\nBinary using arip.py file allocated in the project:\n\n.. code:: bash\n\n    python arip.py --image images/\\<platename\\>.png\n\n-  Library installing as described below:\n\n   .. code:: bash\n\n       import arip\n       arip.process({'image': 'images/sinteticplate.jpg'})\n\ninput:\n~~~~~~\n\nimages/<platename>.png with a plate and ninety six wells\n\noutput:\n~~~~~~~\n\n-  Image with extracted wells: images/<platename>/outputXXX.png\n-  Cropped image of extracted well:\n   images/<platename>/<row>\\ *<column>*\\ <resistance>\\_<density>.png\n-  Report in json format: images/<platename>/report.json\n-  Log: images/<platename>/log.txt\n\ndescription of schema: \\* row: well row index \\* column: well colmun\nindex \\* total: well area in pixels \\* resistance: absolute resistance\nfound in pixels \\* density: density of the resistance found\n\nreport example:\n\n::\n\n       \"7-J\":{  \n          \"density\":0.17,\n          \"column\":\"A\",\n          \"resistance\":122,\n          \"total\":706,\n          \"row\":\"4\"\n       }\n\noutput images example:\n\n::\n\n    4-A_122-0.23, is the well 4-A, with 122 pixels found as resistance with density of 17%\n\noutput log example:\n\n::\n\n    customizing scale well: found False, num wells 93, min radius value 18, max radius value 23\n    customizing scale well: found False, num wells 96, min radius value 18, max radius value 24\n    customizing grid matching: found False, num wells recognized 96\n    Succesfully processed plate, found 96 wells\n\nInstalling dependencies\n-----------------------\n\npip\n~~~\n\nsudo apt-get install python-pip ### opencv sudo apt-get install\nbuild-essential sudo apt-get install cmake git libgtk2.0-dev pkg-config\nlibavcodec-dev libavformat-dev libswscale-dev sudo apt-get install\npython-opencv ### scilab sudo apt-get install python-scipy\n\nInstalling arip\n---------------\n\nThere are two ways of installing pynteractive: \\* Cloning the project\n\n.. code:: bash\n\n    $ git clone https://github.com/mazeitor/antibiotic-resistance-process.git\n    $ cd antibiotic-resistance-process\n    $ python setup.py install  ### (as root)\n\n-  Via `Python package index <https://pypi.python.org/pypi/pip>`__\n   (pip), TODO\n\n   .. code:: bash\n\n       $ pip install arip\n\nTODO\n----\n\n-  Normalizing radius by neighborhood instead of general average\n-  Working with static grids or masks", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mazeitor/antibiotic-resistance-image-process", "keywords": "medical image processing antibiotic resistance phenotypic plate", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "arip", "package_url": "https://pypi.org/project/arip/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/arip/", "project_urls": {"Homepage": "https://github.com/mazeitor/antibiotic-resistance-image-process"}, "release_url": "https://pypi.org/project/arip/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "ARIP, software to quantify bacterial resistance to antibiotics by analysing picture of phenotypic plates", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This software is aimed to quantify bacterial resistance to antibiotics\nby analysing pictures of phenotypic plates. Currently it supports 96\nwell plates where different bacteria are cultured with different\nconcentrations of antibiotics, but the application adapt to different\nplates size in rows and columns. Computer vision algorithms have been\nimplemented in order to detect different levels of bacterial growth. As\na result, the software generates a report providing quantitative\ninformation for each well of the plate. Pictures should be taken so that\nthe plate is square with the picture frame, the algorithm should be able\nto cope with a slight rotation of the plate.</p>\n<div id=\"key-methods\">\n<h2>Key methods:</h2>\n<ul>\n<li>Hough Circles method to detect circles in an image\n<a href=\"http://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/hough_circle/hough_circle.html\" rel=\"nofollow\">doc</a></li>\n<li>Wells segmentation using threshold feature of opencv\n<a href=\"http://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html#threshold\" rel=\"nofollow\">doc</a>\ncombining binary and otsu threshold</li>\n<li>Quality detection using a grid model by rows and columns and\nclustering them, robust to scale and sensible rotation.</li>\n</ul>\n</div>\n<div id=\"execution\">\n<h2>Execution:</h2>\n<p>There are two ways for executing the process: binary or library *\nBinary using arip.py file allocated in the project:</p>\n<pre>python arip.py --image images/<span class=\"se\">\\&lt;</span>platename<span class=\"se\">\\&gt;</span>.png\n</pre>\n<ul>\n<li><p>Library installing as described below:</p>\n<pre>import arip\narip.process<span class=\"o\">({</span><span class=\"s1\">'image'</span>: <span class=\"s1\">'images/sinteticplate.jpg'</span><span class=\"o\">})</span>\n</pre>\n</li>\n</ul>\n<div id=\"input\">\n<h3>input:</h3>\n<p>images/&lt;platename&gt;.png with a plate and ninety six wells</p>\n</div>\n<div id=\"output\">\n<h3>output:</h3>\n<ul>\n<li>Image with extracted wells: images/&lt;platename&gt;/outputXXX.png</li>\n<li>Cropped image of extracted well:\nimages/&lt;platename&gt;/&lt;row&gt;<em>&lt;column&gt;</em>&lt;resistance&gt;_&lt;density&gt;.png</li>\n<li>Report in json format: images/&lt;platename&gt;/report.json</li>\n<li>Log: images/&lt;platename&gt;/log.txt</li>\n</ul>\n<p>description of schema: * row: well row index * column: well colmun\nindex * total: well area in pixels * resistance: absolute resistance\nfound in pixels * density: density of the resistance found</p>\n<p>report example:</p>\n<pre>\"7-J\":{\n   \"density\":0.17,\n   \"column\":\"A\",\n   \"resistance\":122,\n   \"total\":706,\n   \"row\":\"4\"\n}\n</pre>\n<p>output images example:</p>\n<pre>4-A_122-0.23, is the well 4-A, with 122 pixels found as resistance with density of 17%\n</pre>\n<p>output log example:</p>\n<pre>customizing scale well: found False, num wells 93, min radius value 18, max radius value 23\ncustomizing scale well: found False, num wells 96, min radius value 18, max radius value 24\ncustomizing grid matching: found False, num wells recognized 96\nSuccesfully processed plate, found 96 wells\n</pre>\n</div>\n</div>\n<div id=\"installing-dependencies\">\n<h2>Installing dependencies</h2>\n<h2 id=\"pip\"><span class=\"section-subtitle\">pip</span></h2>\n<p>sudo apt-get install python-pip ### opencv sudo apt-get install\nbuild-essential sudo apt-get install cmake git libgtk2.0-dev pkg-config\nlibavcodec-dev libavformat-dev libswscale-dev sudo apt-get install\npython-opencv ### scilab sudo apt-get install python-scipy</p>\n</div>\n<div id=\"installing-arip\">\n<h2>Installing arip</h2>\n<p>There are two ways of installing pynteractive: * Cloning the project</p>\n<pre>$ git clone https://github.com/mazeitor/antibiotic-resistance-process.git\n$ <span class=\"nb\">cd</span> antibiotic-resistance-process\n$ python setup.py install  <span class=\"c1\">### (as root)</span>\n</pre>\n<ul>\n<li><p>Via <a href=\"https://pypi.python.org/pypi/pip\" rel=\"nofollow\">Python package index</a>\n(pip), TODO</p>\n<pre>$ pip install arip\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Normalizing radius by neighborhood instead of general average</li>\n<li>Working with static grids or masks</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2641757, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6657d2b195b318ffae307c43944b8699", "sha256": "28f08235efc82feff880d4ed3ac39e3690f2f19c6fe1edcef7ceb45ff669385d"}, "downloads": -1, "filename": "arip-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6657d2b195b318ffae307c43944b8699", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10878, "upload_time": "2017-01-22T18:40:00", "upload_time_iso_8601": "2017-01-22T18:40:00.874887Z", "url": "https://files.pythonhosted.org/packages/c4/4d/b779c550b59a50a07cfbf4e8726267edfd5f8a2f69ec7d9b4cb8fcf37499/arip-1.0.0-py2.py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8a642239d826c28445672bddef9a7d15", "sha256": "b1b5e0fe1a3d1ab33956d2ff4f8e16371ad6b10a1c197651155ed143d91d4ea0"}, "downloads": -1, "filename": "arip-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "8a642239d826c28445672bddef9a7d15", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10674, "upload_time": "2017-02-14T18:09:04", "upload_time_iso_8601": "2017-02-14T18:09:04.575784Z", "url": "https://files.pythonhosted.org/packages/05/51/7c0a24e621f2d5dec76398cef154e29b24190a4d7d7ba0231159e9db973a/arip-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1b49c295cd472fa12f21ba754215503", "sha256": "0c02225fe354072c8b58030d2b71a7412e0b83d0f7c9c039ac248097c5278ca9"}, "downloads": -1, "filename": "arip-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e1b49c295cd472fa12f21ba754215503", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10677, "upload_time": "2017-02-14T18:09:07", "upload_time_iso_8601": "2017-02-14T18:09:07.614251Z", "url": "https://files.pythonhosted.org/packages/4c/e8/e272e7f0ad1a8e326136e3a28a72b804db9b7100f120f1002c697869a109/arip-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d186a039db3b108ee89e9f30607d5c33", "sha256": "066f24ad61996ea5c82fedc42ac4b846cd88c62227c48dee6788c46eb48d569a"}, "downloads": -1, "filename": "arip-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d186a039db3b108ee89e9f30607d5c33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9080, "upload_time": "2017-02-14T18:09:09", "upload_time_iso_8601": "2017-02-14T18:09:09.564785Z", "url": "https://files.pythonhosted.org/packages/8a/91/89ab693a6e07560f1071e5b77b5f320738ba03d6c7f785374bb7a8ed7205/arip-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "f19a2d031163e877c407b8c1442a5c2c", "sha256": "4ecbed5d3e14f3b670d99732b14dcdeee9e95d7fa428d0c1330f0261b43520ad"}, "downloads": -1, "filename": "arip-1.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "f19a2d031163e877c407b8c1442a5c2c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10556, "upload_time": "2017-02-14T18:14:34", "upload_time_iso_8601": "2017-02-14T18:14:34.151779Z", "url": "https://files.pythonhosted.org/packages/bc/98/9d99b09ab214d0976d0d93eea0e7ee0d88af236da42f8008726c0a4f86df/arip-1.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85662ee29920591329f91f0ff965c6dc", "sha256": "234e92d6f9a1c48364ad8dd78d3aa440cfd4a2c0a8329413afc3249a60e91ddc"}, "downloads": -1, "filename": "arip-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "85662ee29920591329f91f0ff965c6dc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10558, "upload_time": "2017-02-14T18:14:36", "upload_time_iso_8601": "2017-02-14T18:14:36.428756Z", "url": "https://files.pythonhosted.org/packages/32/d5/8fc30d6d05b7f606244cf3110eef761ffd327f11056e99db5bb996975950/arip-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ccdc0bcde543e0181b7c4fca3e1c3c0", "sha256": "ae61af26c77822f3a4028dab0cab79b49b964add5f2d79168a612048527aa8f8"}, "downloads": -1, "filename": "arip-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0ccdc0bcde543e0181b7c4fca3e1c3c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8991, "upload_time": "2017-02-14T18:14:38", "upload_time_iso_8601": "2017-02-14T18:14:38.126458Z", "url": "https://files.pythonhosted.org/packages/f2/58/90436bf147cbd2e57bad1514a9e8df31ada419b3e1550d5f8d1fd0b60585/arip-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f19a2d031163e877c407b8c1442a5c2c", "sha256": "4ecbed5d3e14f3b670d99732b14dcdeee9e95d7fa428d0c1330f0261b43520ad"}, "downloads": -1, "filename": "arip-1.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "f19a2d031163e877c407b8c1442a5c2c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10556, "upload_time": "2017-02-14T18:14:34", "upload_time_iso_8601": "2017-02-14T18:14:34.151779Z", "url": "https://files.pythonhosted.org/packages/bc/98/9d99b09ab214d0976d0d93eea0e7ee0d88af236da42f8008726c0a4f86df/arip-1.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85662ee29920591329f91f0ff965c6dc", "sha256": "234e92d6f9a1c48364ad8dd78d3aa440cfd4a2c0a8329413afc3249a60e91ddc"}, "downloads": -1, "filename": "arip-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "85662ee29920591329f91f0ff965c6dc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10558, "upload_time": "2017-02-14T18:14:36", "upload_time_iso_8601": "2017-02-14T18:14:36.428756Z", "url": "https://files.pythonhosted.org/packages/32/d5/8fc30d6d05b7f606244cf3110eef761ffd327f11056e99db5bb996975950/arip-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ccdc0bcde543e0181b7c4fca3e1c3c0", "sha256": "ae61af26c77822f3a4028dab0cab79b49b964add5f2d79168a612048527aa8f8"}, "downloads": -1, "filename": "arip-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0ccdc0bcde543e0181b7c4fca3e1c3c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8991, "upload_time": "2017-02-14T18:14:38", "upload_time_iso_8601": "2017-02-14T18:14:38.126458Z", "url": "https://files.pythonhosted.org/packages/f2/58/90436bf147cbd2e57bad1514a9e8df31ada419b3e1550d5f8d1fd0b60585/arip-1.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:15 2020"}