{"info": {"author": "David LaBissoniere", "author_email": "david@labisso.com", "bugtrack_url": null, "classifiers": [], "description": "********\nBlockade\n********\n\n.. image:: https://travis-ci.org/worstcase/blockade.png?branch=master\n        :target: https://travis-ci.org/worstcase/blockade\n\nBlockade is a utility for testing network failures and partitions in\ndistributed applications. Blockade uses `Docker <http://www.docker.io>`_\ncontainers to run application processes and manages the network from\nthe host system to create various failure scenarios.\n\nA common use is to run a distributed application such as a database\nor cluster and create network partitions, then observe the behavior of\nthe nodes. For example in a leader election system, you could partition\nthe leader away from the other nodes and ensure that the leader steps\ndown and that another node emerges as leader.\n\nCheck out the `full documentation <http://blockade.readthedocs.org>`_\nfor details.\n\nBlockade features:\n\n* A flexible YAML format to describe the containers in your application\n* Support for dependencies between containers, using named links\n* A CLI tool for managing and querying the status of your blockade\n* Creation of arbitrary partitions between containers\n* Giving a container a flaky network connection to others (drop packets)\n* Giving a container a slow network connection to others (latency)\n* While under partition or network failure control, containers can\n  freely communicate with the host system -- so you can still grab logs\n  and monitor the application.\n\nBlockade was originally developed by the Dell Cloud Manager\n(formerly Enstratius) team. Blockade was inspired by the excellent\n`Jepsen <http://aphyr.com/tags/jepsen>`_ series.\n\n\nRequirements\n============\n\n* docker (>= 1.4.0 due to docker-py)\n* iproute2 tools (``ip`` and ``tc`` specifically)\n\n\nConfiguration\n=============\n\nBlockade expects a ``blockade.yaml`` file in the current directory which\ndescribes the containers to launch, how they are linked, and various\nparameters for the blockade modes. Example:\n\n.. code-block:: yaml\n\n    containers:\n      c1:\n        image: my_docker_image\n        command: /bin/myapp\n        volumes:\n          \"/opt/myapp\": \"/opt/myapp_host\"\n        expose: [80]\n        environment:\n          \"IS_MASTER\": 1\n        ports:\n          81: 80\n\n      c2:\n        image: my_docker_image\n        command: /bin/myapp\n        volumes: [\"/data\"]\n        expose: [80]\n        links:\n          c1: master\n\n      c3:\n        image: my_docker_image\n        command: /bin/myapp\n        expose: [80]\n        links:\n          c1: master\n\n    network:\n      flaky: 30%\n      slow: 75ms 100ms distribution normal\n\n\nBlockade stores transient information in a local ``.blockade/`` directory.\nThis directory will be cleaned up automatically when you run the\n``blockade destroy`` command.\n\n\nUsage\n=====\n\nBlockade may be used from the command line manually. The commands are also\nintended to be easy to wrap and automate within tests, etc.\n\n\nCommands\n========\n\n``blockade up``\n\nStart the containers and link them together, if necessary.\n\n\n``blockade destroy``\n\nDestroys all containers and restore networks.\n\n\n``blockade status``\n\nPrint the status of the containers and blockade.\n\n\n``blockade flaky n1``\n\n``blockade flaky n1 n2``\n\nMake network flaky to one or more containers.\n\n\n``blockade slow n1``\n\nMake network slow to one or more containers.\n\n\n``blockade duplicate n1``\n\nToggle sporadic duplicate packets in the network of one or more containers.\n\n\n``blockade fast n1``\n\nRestore network speed and reliability to one or more containers.\n\n\n``blockade partition n1,n2``\n\n``blockade partition n1,n2 n3,n4``\n\nCreate one or more network partitions. Each partition is specified as a\ncomma-separated list. Containers may not exist in more than one partition.\nContainers not specified are grouped into an implicit partition. Each\npartition command replaces any previous partition or block rules.\n\n\n``blockade join``\n\nRemove all partitions between containers.\n\n``blockade random-partition``\n\nIntroduce one or many random partitions among the configured nodes.\n\n\nLicense\n=======\n\nBlockade is offered under the Apache License 2.0.\n\n\nDevelopment\n===========\n\nInstall test dependencies with ``pip install blockade[test]``.\n\nYou can run integration tests in a Vagrant VM using the included Vagrantfile.\nRun ``vagrant up`` and Docker will be installed in your VM and tests run.\nYou can rerun them with ``vagrant provision``, or SSH into the VM and run\nthem yourself, from ``/vagrant``.\n\nBlockade documentation is built with Sphinx and is found under ``docs/``.\nTo build:\n\n.. code-block:: bash\n\n    $ pip install -r requirements_docs.txt\n    $ cd docs/\n    $ make html\n\nHTML output will be under ``docs/_build/html/``.\n\nThe documentation is also `hosted online <http://blockade.readthedocs.org>`_.\n\n\nChangelog\n=========\n\n0.4.0 (2017-06-26)\n------------------\n- Added new chaos functionality. When used, blockade will randomly\n  select containers to impair with partitions, slow network, etc.\n  Contributed by John Bresnahan (@buzztroll) of Stardog Union.\n- Added an event trail that logs all blockade events that are run\n  against a blockade over its lifetime. This can be helpful in\n  correlating blockade events to application errors. Contributed by\n  John Bresnahan (@buzztroll) of Stardog Union.\n- Substantially improved overall performance by using a cached container\n  for all host commands.\n- #62: Fixed bug with using blockade commands against a restarted\n  container. Contributed by John Bresnahan (@buzztroll) of Stardog Union.\n- Updated Docker SDK and API version. Contributed by Vladimir Borodin\n  (dev1ant).\n\n\n0.3.1 (2016-12-09)\n------------------\n- #43: Restore support for loading from ``blockade.yml`` config file.\n- #26: Improved error messages when running blockade without access\n  to the Docker API.\n- #25: Improved error messages when determining container host network\n  device fails.\n- #40: Fixed ``kill`` command (broken in 0.3.0).\n- #1: Fixed support for configuring Docker API via ``DOCKER_HOST`` env.\n- #36: Truncate long blockade IDs to avoid iptables limits.\n- Switched to directly inspecting ``/sys`` for container network devices\n  instead of via ``ip``. This means containers no longer need to have ``ip``\n  installed.\n- Improved Blockade Python API by returning names of the containers a\n  command has operated on. Contributed by Gregor Uhlenheuer (@kongo2002).\n- Fixed ``Vagrantfile`` to also work on Windows. Contributed by Oresztesz\n  Margaritisz (@gitaroktato).\n- Documentation fix contributed by Konrad Klocek (@kklocek).\n- Added new ``version`` command that prints Blockade version and exits.\n- Added ``cap_add`` container config option, for specifying additional\n  root capabilities. Contributed by Maciej Zimnoch (@Zimnx).\n\n\n0.3.0 (2016-10-29)\n------------------\n- Reworks all network commands to run in Docker containers. This allows\n  Blockade to be run without root privileges, as long as the user can\n  access Docker.\n- Introduces a REST API and daemon mode that allows creation and\n  management of blockades remotely.\n- Adds ability to add a container to a running blockade, via ``add``\n  command.\n- Adds support for Docker user-defined networks to allow any-to-any\n  communication between containers, without links. Contributed by\n  Stas Kelvich (@kelvich).\n- Adds ability to configure DNS servers for containers in a blockade.\n  Contributed by Vladimir Borodin (@dev1ant).\n- Adds a generic ``--random`` flag for many commands to allow easier\n  randomized chaos testing. Contributed by Gregor Uhlenheuer (@kongo2002).\n- Introduces a new ``kill`` command for killing containers in a blockade.\n- Fixed links to Docker documentation. Contributed by @joepadmiraal.\n- Fixed links of named containers. Contributed by Gregor Uhlenheuer\n  (@kongo2002).\n\n\n0.2.0 (2015-12-23)\n------------------\n\n- #14: Support for docker >1.6, with the native driver. Eliminates the need\n  to use the deprecated LXC driver. Contributed by Gregor Uhlenheuer.\n- #12: Fix port publishing. **Breaking change**: the order of port publishing was\n  swapped to be ``{external: internal}``, to be consistent with the docker\n  command line. Contributed by aidanhs.\n- Introduces new ``duplicate`` command, which causes some packets to a container\n  to be duplicated. Contributed by Gregor Uhlenheuer.\n- Introduces new ``start``, ``stop``, and ``restart`` commands, which manage\n  specified containers via Docker. Contributed By Gregor Uhlenheuer.\n- Introduces new random partition behavior: ``blockade partition --random`` will\n  create zero or more random partitions. Contributed By Gregor Uhlenheuer.\n- Reworked the blockade ID generation to be more like docker-compose, instead\n  of using randomly-generated IDs. If ``--name`` is specified on the command\n  line, this is used as the blockade ID and is prefixed to container names.\n  Otherwise the blockade name is taken from the basename of the current\n  working directory.\n- Numerous other small fixes and features, many contributed by Gregor\n  Uhlenheuer. Thanks Gregor!\n\n\n0.1.2 (2015-1-28)\n-----------------\n\n- #6: Change ``ports`` config keyword to match docker usage. It now publishes a\n  container port to the host. The ``expose`` config keyword now offers the\n  previous behavior of ``ports``: it makes a port available from the container,\n  for linking to other containers. Thanks to Simon Bahuchet for the\n  contribution.\n- #9: Fix logs command for Python 3.\n- Updated dependencies.\n\n\n0.1.1 (2014-02-12)\n------------------\n\n- Support for Python 2.6 and Python 3.x\n\n\n0.1.0 (2014-02-11)\n------------------\n\n- Initial release of Blockade!", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/worstcase/blockade", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "blockade", "package_url": "https://pypi.org/project/blockade/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/blockade/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/worstcase/blockade"}, "release_url": "https://pypi.org/project/blockade/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "Blockade: network fault testing with Docker", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/worstcase/blockade\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/worstcase/blockade.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01c7d6fe57037fac0a1ad06fe17913eabefddaa2/68747470733a2f2f7472617669732d63692e6f72672f776f727374636173652f626c6f636b6164652e706e673f6272616e63683d6d6173746572\"></a>\n<p>Blockade is a utility for testing network failures and partitions in\ndistributed applications. Blockade uses <a href=\"http://www.docker.io\" rel=\"nofollow\">Docker</a>\ncontainers to run application processes and manages the network from\nthe host system to create various failure scenarios.</p>\n<p>A common use is to run a distributed application such as a database\nor cluster and create network partitions, then observe the behavior of\nthe nodes. For example in a leader election system, you could partition\nthe leader away from the other nodes and ensure that the leader steps\ndown and that another node emerges as leader.</p>\n<p>Check out the <a href=\"http://blockade.readthedocs.org\" rel=\"nofollow\">full documentation</a>\nfor details.</p>\n<p>Blockade features:</p>\n<ul>\n<li>A flexible YAML format to describe the containers in your application</li>\n<li>Support for dependencies between containers, using named links</li>\n<li>A CLI tool for managing and querying the status of your blockade</li>\n<li>Creation of arbitrary partitions between containers</li>\n<li>Giving a container a flaky network connection to others (drop packets)</li>\n<li>Giving a container a slow network connection to others (latency)</li>\n<li>While under partition or network failure control, containers can\nfreely communicate with the host system \u2013 so you can still grab logs\nand monitor the application.</li>\n</ul>\n<p>Blockade was originally developed by the Dell Cloud Manager\n(formerly Enstratius) team. Blockade was inspired by the excellent\n<a href=\"http://aphyr.com/tags/jepsen\" rel=\"nofollow\">Jepsen</a> series.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>docker (&gt;= 1.4.0 due to docker-py)</li>\n<li>iproute2 tools (<tt>ip</tt> and <tt>tc</tt> specifically)</li>\n</ul>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Blockade expects a <tt>blockade.yaml</tt> file in the current directory which\ndescribes the containers to launch, how they are linked, and various\nparameters for the blockade modes. Example:</p>\n<pre><span class=\"nt\">containers</span><span class=\"p\">:</span>\n  <span class=\"nt\">c1</span><span class=\"p\">:</span>\n    <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">my_docker_image</span>\n    <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/bin/myapp</span>\n    <span class=\"nt\">volumes</span><span class=\"p\">:</span>\n      <span class=\"s\">\"/opt/myapp\"</span><span class=\"p-Indicator\">:</span> <span class=\"s\">\"/opt/myapp_host\"</span>\n    <span class=\"nt\">expose</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">80</span><span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">environment</span><span class=\"p\">:</span>\n      <span class=\"s\">\"IS_MASTER\"</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">1</span>\n    <span class=\"nt\">ports</span><span class=\"p\">:</span>\n      <span class=\"nt\">81</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">80</span>\n\n  <span class=\"nt\">c2</span><span class=\"p\">:</span>\n    <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">my_docker_image</span>\n    <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/bin/myapp</span>\n    <span class=\"nt\">volumes</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"s\">\"/data\"</span><span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">expose</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">80</span><span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">links</span><span class=\"p\">:</span>\n      <span class=\"nt\">c1</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">master</span>\n\n  <span class=\"nt\">c3</span><span class=\"p\">:</span>\n    <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">my_docker_image</span>\n    <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/bin/myapp</span>\n    <span class=\"nt\">expose</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">80</span><span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">links</span><span class=\"p\">:</span>\n      <span class=\"nt\">c1</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">master</span>\n\n<span class=\"nt\">network</span><span class=\"p\">:</span>\n  <span class=\"nt\">flaky</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">30%</span>\n  <span class=\"nt\">slow</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">75ms 100ms distribution normal</span>\n</pre>\n<p>Blockade stores transient information in a local <tt>.blockade/</tt> directory.\nThis directory will be cleaned up automatically when you run the\n<tt>blockade destroy</tt> command.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Blockade may be used from the command line manually. The commands are also\nintended to be easy to wrap and automate within tests, etc.</p>\n</div>\n<div id=\"commands\">\n<h2>Commands</h2>\n<p><tt>blockade up</tt></p>\n<p>Start the containers and link them together, if necessary.</p>\n<p><tt>blockade destroy</tt></p>\n<p>Destroys all containers and restore networks.</p>\n<p><tt>blockade status</tt></p>\n<p>Print the status of the containers and blockade.</p>\n<p><tt>blockade flaky n1</tt></p>\n<p><tt>blockade flaky n1 n2</tt></p>\n<p>Make network flaky to one or more containers.</p>\n<p><tt>blockade slow n1</tt></p>\n<p>Make network slow to one or more containers.</p>\n<p><tt>blockade duplicate n1</tt></p>\n<p>Toggle sporadic duplicate packets in the network of one or more containers.</p>\n<p><tt>blockade fast n1</tt></p>\n<p>Restore network speed and reliability to one or more containers.</p>\n<p><tt>blockade partition n1,n2</tt></p>\n<p><tt>blockade partition n1,n2 n3,n4</tt></p>\n<p>Create one or more network partitions. Each partition is specified as a\ncomma-separated list. Containers may not exist in more than one partition.\nContainers not specified are grouped into an implicit partition. Each\npartition command replaces any previous partition or block rules.</p>\n<p><tt>blockade join</tt></p>\n<p>Remove all partitions between containers.</p>\n<p><tt>blockade <span class=\"pre\">random-partition</span></tt></p>\n<p>Introduce one or many random partitions among the configured nodes.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Blockade is offered under the Apache License 2.0.</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Install test dependencies with <tt>pip install blockade[test]</tt>.</p>\n<p>You can run integration tests in a Vagrant VM using the included Vagrantfile.\nRun <tt>vagrant up</tt> and Docker will be installed in your VM and tests run.\nYou can rerun them with <tt>vagrant provision</tt>, or SSH into the VM and run\nthem yourself, from <tt>/vagrant</tt>.</p>\n<p>Blockade documentation is built with Sphinx and is found under <tt>docs/</tt>.\nTo build:</p>\n<pre>$ pip install -r requirements_docs.txt\n$ <span class=\"nb\">cd</span> docs/\n$ make html\n</pre>\n<p>HTML output will be under <tt>docs/_build/html/</tt>.</p>\n<p>The documentation is also <a href=\"http://blockade.readthedocs.org\" rel=\"nofollow\">hosted online</a>.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.4.0 (2017-06-26)</h3>\n<ul>\n<li>Added new chaos functionality. When used, blockade will randomly\nselect containers to impair with partitions, slow network, etc.\nContributed by John Bresnahan (@buzztroll) of Stardog Union.</li>\n<li>Added an event trail that logs all blockade events that are run\nagainst a blockade over its lifetime. This can be helpful in\ncorrelating blockade events to application errors. Contributed by\nJohn Bresnahan (@buzztroll) of Stardog Union.</li>\n<li>Substantially improved overall performance by using a cached container\nfor all host commands.</li>\n<li>#62: Fixed bug with using blockade commands against a restarted\ncontainer. Contributed by John Bresnahan (@buzztroll) of Stardog Union.</li>\n<li>Updated Docker SDK and API version. Contributed by Vladimir Borodin\n(dev1ant).</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.3.1 (2016-12-09)</h3>\n<ul>\n<li>#43: Restore support for loading from <tt>blockade.yml</tt> config file.</li>\n<li>#26: Improved error messages when running blockade without access\nto the Docker API.</li>\n<li>#25: Improved error messages when determining container host network\ndevice fails.</li>\n<li>#40: Fixed <tt>kill</tt> command (broken in 0.3.0).</li>\n<li>#1: Fixed support for configuring Docker API via <tt>DOCKER_HOST</tt> env.</li>\n<li>#36: Truncate long blockade IDs to avoid iptables limits.</li>\n<li>Switched to directly inspecting <tt>/sys</tt> for container network devices\ninstead of via <tt>ip</tt>. This means containers no longer need to have <tt>ip</tt>\ninstalled.</li>\n<li>Improved Blockade Python API by returning names of the containers a\ncommand has operated on. Contributed by Gregor Uhlenheuer (@kongo2002).</li>\n<li>Fixed <tt>Vagrantfile</tt> to also work on Windows. Contributed by Oresztesz\nMargaritisz (@gitaroktato).</li>\n<li>Documentation fix contributed by Konrad Klocek (@kklocek).</li>\n<li>Added new <tt>version</tt> command that prints Blockade version and exits.</li>\n<li>Added <tt>cap_add</tt> container config option, for specifying additional\nroot capabilities. Contributed by Maciej Zimnoch (@Zimnx).</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.3.0 (2016-10-29)</h3>\n<ul>\n<li>Reworks all network commands to run in Docker containers. This allows\nBlockade to be run without root privileges, as long as the user can\naccess Docker.</li>\n<li>Introduces a REST API and daemon mode that allows creation and\nmanagement of blockades remotely.</li>\n<li>Adds ability to add a container to a running blockade, via <tt>add</tt>\ncommand.</li>\n<li>Adds support for Docker user-defined networks to allow any-to-any\ncommunication between containers, without links. Contributed by\nStas Kelvich (@kelvich).</li>\n<li>Adds ability to configure DNS servers for containers in a blockade.\nContributed by Vladimir Borodin (@dev1ant).</li>\n<li>Adds a generic <tt><span class=\"pre\">--random</span></tt> flag for many commands to allow easier\nrandomized chaos testing. Contributed by Gregor Uhlenheuer (@kongo2002).</li>\n<li>Introduces a new <tt>kill</tt> command for killing containers in a blockade.</li>\n<li>Fixed links to Docker documentation. Contributed by @joepadmiraal.</li>\n<li>Fixed links of named containers. Contributed by Gregor Uhlenheuer\n(@kongo2002).</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.2.0 (2015-12-23)</h3>\n<ul>\n<li>#14: Support for docker &gt;1.6, with the native driver. Eliminates the need\nto use the deprecated LXC driver. Contributed by Gregor Uhlenheuer.</li>\n<li>#12: Fix port publishing. <strong>Breaking change</strong>: the order of port publishing was\nswapped to be <tt>{external: internal}</tt>, to be consistent with the docker\ncommand line. Contributed by aidanhs.</li>\n<li>Introduces new <tt>duplicate</tt> command, which causes some packets to a container\nto be duplicated. Contributed by Gregor Uhlenheuer.</li>\n<li>Introduces new <tt>start</tt>, <tt>stop</tt>, and <tt>restart</tt> commands, which manage\nspecified containers via Docker. Contributed By Gregor Uhlenheuer.</li>\n<li>Introduces new random partition behavior: <tt>blockade partition <span class=\"pre\">--random</span></tt> will\ncreate zero or more random partitions. Contributed By Gregor Uhlenheuer.</li>\n<li>Reworked the blockade ID generation to be more like docker-compose, instead\nof using randomly-generated IDs. If <tt><span class=\"pre\">--name</span></tt> is specified on the command\nline, this is used as the blockade ID and is prefixed to container names.\nOtherwise the blockade name is taken from the basename of the current\nworking directory.</li>\n<li>Numerous other small fixes and features, many contributed by Gregor\nUhlenheuer. Thanks Gregor!</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.1.2 (2015-1-28)</h3>\n<ul>\n<li>#6: Change <tt>ports</tt> config keyword to match docker usage. It now publishes a\ncontainer port to the host. The <tt>expose</tt> config keyword now offers the\nprevious behavior of <tt>ports</tt>: it makes a port available from the container,\nfor linking to other containers. Thanks to Simon Bahuchet for the\ncontribution.</li>\n<li>#9: Fix logs command for Python 3.</li>\n<li>Updated dependencies.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.1.1 (2014-02-12)</h3>\n<ul>\n<li>Support for Python 2.6 and Python 3.x</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.1.0 (2014-02-11)</h3>\n<ul>\n<li>Initial release of Blockade!</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2981128, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "36ebb9cf7412046da9c57e95f751f845", "sha256": "dfa9a92fdd0926c71dd73b27d22bbdcea3e610a6a1acb95cf870697ab9ee36f5"}, "downloads": -1, "filename": "blockade-0.1.0.tar.gz", "has_sig": false, "md5_digest": "36ebb9cf7412046da9c57e95f751f845", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21648, "upload_time": "2014-02-11T19:15:49", "upload_time_iso_8601": "2014-02-11T19:15:49.588378Z", "url": "https://files.pythonhosted.org/packages/3a/af/4d2cb69821db28777ded50c3ae576c9e5b550b9a1fd57880edeec65792fe/blockade-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4cf5d03a60a8b52f4c4ed2dea739362c", "sha256": "74ebe2b93c9bafa0105136476d490736243393ac38a908802d9f104f307e6fe4"}, "downloads": -1, "filename": "blockade-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4cf5d03a60a8b52f4c4ed2dea739362c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22387, "upload_time": "2014-02-12T20:40:31", "upload_time_iso_8601": "2014-02-12T20:40:31.488296Z", "url": "https://files.pythonhosted.org/packages/78/b2/0901205db07856e150332a668dfa952b30237184742a5990de2688fc28e6/blockade-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e9fdf453fa75c7f629a101cb403eae59", "sha256": "21fa3413c314d133bda56fba4627637a022d81636509296fb060de299152d679"}, "downloads": -1, "filename": "blockade-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e9fdf453fa75c7f629a101cb403eae59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23200, "upload_time": "2015-01-28T17:20:38", "upload_time_iso_8601": "2015-01-28T17:20:38.249183Z", "url": "https://files.pythonhosted.org/packages/c5/a6/683a6f335f476ff35964a58fea85db81a8b79463a24789a5e722acb8b40b/blockade-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5af6ed76ab5e2ea77bcc71a3e606a58e", "sha256": "5b883adae0f9c3fb3522769f84c0e6e425f8fb299b7ca07ada396d2234ddc5b2"}, "downloads": -1, "filename": "blockade-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5af6ed76ab5e2ea77bcc71a3e606a58e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30353, "upload_time": "2015-12-23T19:07:21", "upload_time_iso_8601": "2015-12-23T19:07:21.581875Z", "url": "https://files.pythonhosted.org/packages/cc/fb/712aae161b78790aee68d980d8d9afa8fa7b8986a4c117c75eb685ac883b/blockade-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5bc95a45aad1af475a47eb0da9b33ddc", "sha256": "d88669d6aaa0418cb3e9b39c669100e7f546e1d1c2ba21691a96565582a61d14"}, "downloads": -1, "filename": "blockade-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5bc95a45aad1af475a47eb0da9b33ddc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36012, "upload_time": "2016-09-29T17:00:55", "upload_time_iso_8601": "2016-09-29T17:00:55.691587Z", "url": "https://files.pythonhosted.org/packages/86/be/ebfa9abd42e22209428c6b125292ce7804d6ead1ceabdfa084d7dba404d3/blockade-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "61fb76cfb3bb7f084c22e72f5aeb01e8", "sha256": "7aa64e638013baf30b01942641f8cef9e02f098392fb72c668f38f66cc69dc9d"}, "downloads": -1, "filename": "blockade-0.3.1.tar.gz", "has_sig": false, "md5_digest": "61fb76cfb3bb7f084c22e72f5aeb01e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40299, "upload_time": "2016-12-09T22:54:23", "upload_time_iso_8601": "2016-12-09T22:54:23.825330Z", "url": "https://files.pythonhosted.org/packages/37/61/c4135351fbee4e249f1eb8501224c98d9ad662aae8debafe0ae8030b9e1f/blockade-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "b39f66c951256c9d070dc6022ea912b4", "sha256": "8b30aa192c73655718750146ba5e34938d70b2890dea0f4ef0709943dfee7fdf"}, "downloads": -1, "filename": "blockade-0.4.0.tar.gz", "has_sig": false, "md5_digest": "b39f66c951256c9d070dc6022ea912b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53898, "upload_time": "2017-06-27T02:18:54", "upload_time_iso_8601": "2017-06-27T02:18:54.481759Z", "url": "https://files.pythonhosted.org/packages/1e/7b/01b82b073796af94789eab8962b56bc78de647dc68f94023867f05f57105/blockade-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b39f66c951256c9d070dc6022ea912b4", "sha256": "8b30aa192c73655718750146ba5e34938d70b2890dea0f4ef0709943dfee7fdf"}, "downloads": -1, "filename": "blockade-0.4.0.tar.gz", "has_sig": false, "md5_digest": "b39f66c951256c9d070dc6022ea912b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53898, "upload_time": "2017-06-27T02:18:54", "upload_time_iso_8601": "2017-06-27T02:18:54.481759Z", "url": "https://files.pythonhosted.org/packages/1e/7b/01b82b073796af94789eab8962b56bc78de647dc68f94023867f05f57105/blockade-0.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:03 2020"}