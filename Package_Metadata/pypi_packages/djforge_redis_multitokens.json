{"info": {"author": "ToReforge", "author_email": "it@toreforge.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "=========================\nDjforge Redis Multitokens\n=========================\n\n.. image:: https://img.shields.io/pypi/pyversions/djforge-redis-multitokens.svg\n  :alt: PyPi Status\n  :target: https://pypi.org/project/djforge_redis_multitokens/\n\n.. image:: https://travis-ci.org/ToReforge/djforge-redis-multitokens.svg?branch=master\n  :alt: Build Status\n  :target: https://travis-ci.org/ToReforge/djforge-redis-multitokens?branch=master\n\n.. image:: https://coveralls.io/repos/github/ToReforge/djforge-redis-multitokens/badge.svg?branch=master\n  :alt: Codecov\n  :target: https://coveralls.io/github/ToReforge/djforge-redis-multitokens?branch=master\n\n**Compatible with: Python: 2.7, 3.4, 3.5, 3.6  Django: 1.10, 1.11  DRF: 3.6**\n\nWhat Does djforge-redis-multitokens Do?\n=======================================\n\nThe djforge-redis-multitokens is a plugin for Django Rest Framework that allows you to create multiple tokens for each\nuser(one per device or browser) and store them in Redis. Here's why you may want to use this plugin:\n\n- Your users have multiple devices and a log out from one device(or browser) should not log the user out on other devices(or browsers)\n- Token retrieval, validation, and updates should be fast. This plugin uses Redis, can't touch this!\n- Security is important to you. This plugin encrypts users' tokens so even if an attacker gets access to all your tokens they would not be able to do anything with them.\n\n*Note: device in this document means a physical one or a browser.*\n\nHow to Install\n==============\n\nFirst, download the package and install it using pip:\n\n.. code-block:: bash\n\n    pip install git+https://github.com/ToReforge/djforge-redis-multitokens\n\nOr simple:\n\n.. code-block:: bash\n\n    pip install djforge-redis-multitokens\n\nThen, you'll need Django, Django REST Framework, and Redis. Finally, your Django app needs to be able to talk to Redis, so you'll need a library like ``django-redis`` or ``django-redis-cache``. Follow the instructions here(http://django-redis-cache.readthedocs.io/en/latest/intro_quick_start.html) to setup Django with Redis.\n\nHow to Use It\n=============\n\nCreate a Redis DB For Tokens\n----------------------------\n\nOnce you're done with the installation step, make a Redis db for your tokens in your Django settings file:\n\n.. code-block:: python\n\n   CACHES = {\n        # other Redis db definitions above\n\n        # tokens db definition\n        'tokens': {\n            'BACKEND': 'redis_cache.RedisCache',\n            'LOCATION': 'localhost:6379',\n            'OPTIONS': {\n                'DB': 2,\n            },\n            'TIMEOUT': None,\n        }\n    }\n\n\n**Note:**\n\n- In the above definition, we're setting \"tokens\" as the name for the Redis db that will contain tokens. You can change this name, more on that later.\n- ``TIMEOUT`` is used to expire tokens. ``TIMEOUT: 10000`` means that new tokens will be valid for 10000 before they expire and are removed from Redis.\n\nCustom Settings\n---------------\n\n.. code-block:: python\n\n    DJFORGE_REDIS_MULTITOKENS = {\n        'REDIS_DB_NAME': 'custom_redis_db_name_for_tokens',\n        'RESET_TOKEN_TTL_ON_USER_LOG_IN': True,\n        'OVERWRITE_NONE_TTL': True,\n    }\n\nPut the above in your Django settings module to customize the behavior of ``djforge-redis-multitokens``:\n\n- ``REDIS_DB_NAME``: set this to the same name you defined for your Redis db(\"tokens\" in the above defnition).\n- ``RESET_TOKEN_TTL_ON_USER_LOG_IN`` extends the life of tokens by ``TIMEOUT`` seconds(set in ``settings.CACHES``).\n- ``OVERWRITE_NONE_TTL`` will overwrite the previous ttl of ``None`` (``None`` means Redis will never expire your token) set on a token. Set this to `False` if you don't want your immortal tokens to become mortal.\n- In other words, if you set ``OVERWRITE_NONE_TTL`` to ``False``, the ttl of tokens with ttl ``None`` will not change. They will never expire.\n\nSetup Token Authentication\n--------------------------\n\nThere's complicated logic involved in token authentication, but ``Django REST framework(DRF)`` comes with a \"pluggable\" authentication module that supports token authentication so that ``djforge-redis-multitokens`` can change where tokens are stored.\nWe want our tokens to be stored in Redis, so we have to change the default authentication class:\n\n.. code-block:: python\n\n    REST_FRAMEWORK = {\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n            ' djforge_redis_multitokens.tokens_auth.CachedTokenAuthentication',\n        ),\n        # your other DRF configurations goes below\n    }\n\n**Note:**\nWith this setting, we ask DFR to use ``CachedTokenAuthentication`` to check if users have the right token whenever they log in. ``CachedTokenAuthentication`` is a subclass of DRF's ``TokenAuthentication`` which overrides how tokens are fetched from storage.\n\nCreate New Tokens\n-----------------\n\nUsually, you want to create a new token whenever a user logs in from a new device:\n\n.. code-block:: python\n\n    from  djforge_redis_multitokens.tokens_auth import MultiToken\n\n    # create new token in your login logic\n    def login_handler(request):\n        token, _ = MultiToken.create_token(request.user) # request object in DRF has a user attribute\n        # _ variable is a boolean that denotes whether this is the first token created for this user\n\n**Note:**\n\n- Before your login handler function is invoked, DRF checks to see if your user has a valid token. So, the above function is not invoked for users who have a valid token.\n- `MultiToken.create_token` takes an instance of ``settings.AUTH_USER_MODEL`` which Django calls the ``User`` model.\n- The ``_`` variable, if it is `False`, tells you that the user is logged in on another device(or browser).\n- The ``token`` object has two attributes: ``key`` and ``user``. DRF expects custom tokens to have these attributes. ``key`` is the string user receives as their token and ``user`` is an instance of the ``settings.AUTH_USER_MODEL`` model.\n\nExpiring Tokens\n---------------\n\nWhen a user logs out(usually by pressing the \"log out\" button on your user interface), you usually expire the token associated with that device:\n\n.. code-block:: python\n\n    from  djforge_redis_multitokens.tokens_auth import MultiToken\n\n    def logout_handler(request):\n        # DFR request object has an `auth` attribute which is of type MultiToken\n        MultiToken.expire_token(request.auth)\n\n\nSometimes, you want to expire all tokens of a user. For example, user changes his/her password and you want to force log out the user on all devices:\n\n.. code-block:: python\n\n    from  djforge_redis_multitokens.tokens_auth import MultiToken\n\n    # after user changes password\n    def password_changed_handler(user):\n        MultiToken.expire_all_tokens(user)\n\n\nGet User From Token\n-------------------\n\nWhen you have access to user's token, you can get the ``user`` associated with that token:\n\n.. code-block:: python\n\n    MultiToken.get_user_from_token(key)\n\n**Note:**\n\n- Then `key` here is a ``str`` object, so the ``get_user_from_token`` method expects the key as a string.\n- ``MultiToken.get_user_from_token`` returns a ``User`` which is defined by ``settings.AUTH_USER_MODEL``.\n\nImmortal Tokens\n---------------\n\nIf you want your tokens to never expire, you need to do 2 things:\n\n1) Set ``TIMEOUT`` to ``None`` in ``CACHES``:\n\n.. code-block:: python\n\n    CACHES = {\n\n        # other Redis db definitions above\n\n        # tokens db definition\n        'tokens': {\n            'BACKEND': 'redis_cache.RedisCache',\n            'LOCATION': 'localhost:6379',\n            'OPTIONS': {\n                'DB': 2,\n            },\n            'TIMEOUT': None,\n        }\n    }\n\n2) Set ``OVERWRITE_NONE_TTL`` to ``False`` in ``DJFORGE_REDIS_MULTITOKENS``:\n\n.. code-block:: python\n\n    DJFORGE_REDIS_MULTITOKENS = {\n        'REDIS_DB_NAME': 'custom_redis_db_name_for_tokens',\n        'RESET_TOKEN_TTL_ON_USER_LOG_IN': True,\n        'OVERWRITE_NONE_TTL': False,\n    }\n\nHow to Develop\n==============\n\n- Clone the repo, go to the root directory(where ``setup.py`` is)\n- ``pip install --editable .``\n- ``cd test_app/``\n- ``pip install -r requirements``\n- ``cd demo``\n- ``python manage.py migrate``\n- ``python manage.py test``\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ToReforge/djforge-redis-multitokens", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "djforge_redis_multitokens", "package_url": "https://pypi.org/project/djforge_redis_multitokens/", "platform": "", "project_url": "https://pypi.org/project/djforge_redis_multitokens/", "project_urls": {"Homepage": "https://github.com/ToReforge/djforge-redis-multitokens"}, "release_url": "https://pypi.org/project/djforge_redis_multitokens/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Django REST Framework user auth using multiple tokens stored in Redis", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/djforge_redis_multitokens/\" rel=\"nofollow\"><img alt=\"PyPi Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86afccb2b9604606b185a5b037748d62fdca72da/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a666f7267652d72656469732d6d756c7469746f6b656e732e737667\"></a>\n<a href=\"https://travis-ci.org/ToReforge/djforge-redis-multitokens?branch=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3039079474570403f24a1172dbe3efc89f708cec/68747470733a2f2f7472617669732d63692e6f72672f546f5265666f7267652f646a666f7267652d72656469732d6d756c7469746f6b656e732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/ToReforge/djforge-redis-multitokens?branch=master\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/210180e863ea06b44f81892ccbb55925ce5c9dde/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f546f5265666f7267652f646a666f7267652d72656469732d6d756c7469746f6b656e732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p><strong>Compatible with: Python: 2.7, 3.4, 3.5, 3.6  Django: 1.10, 1.11  DRF: 3.6</strong></p>\n<div id=\"what-does-djforge-redis-multitokens-do\">\n<h2>What Does djforge-redis-multitokens Do?</h2>\n<p>The djforge-redis-multitokens is a plugin for Django Rest Framework that allows you to create multiple tokens for each\nuser(one per device or browser) and store them in Redis. Here\u2019s why you may want to use this plugin:</p>\n<ul>\n<li>Your users have multiple devices and a log out from one device(or browser) should not log the user out on other devices(or browsers)</li>\n<li>Token retrieval, validation, and updates should be fast. This plugin uses Redis, can\u2019t touch this!</li>\n<li>Security is important to you. This plugin encrypts users\u2019 tokens so even if an attacker gets access to all your tokens they would not be able to do anything with them.</li>\n</ul>\n<p><em>Note: device in this document means a physical one or a browser.</em></p>\n</div>\n<div id=\"how-to-install\">\n<h2>How to Install</h2>\n<p>First, download the package and install it using pip:</p>\n<pre>pip install git+https://github.com/ToReforge/djforge-redis-multitokens\n</pre>\n<p>Or simple:</p>\n<pre>pip install djforge-redis-multitokens\n</pre>\n<p>Then, you\u2019ll need Django, Django REST Framework, and Redis. Finally, your Django app needs to be able to talk to Redis, so you\u2019ll need a library like <tt><span class=\"pre\">django-redis</span></tt> or <tt><span class=\"pre\">django-redis-cache</span></tt>. Follow the instructions here(<a href=\"http://django-redis-cache.readthedocs.io/en/latest/intro_quick_start.html\" rel=\"nofollow\">http://django-redis-cache.readthedocs.io/en/latest/intro_quick_start.html</a>) to setup Django with Redis.</p>\n</div>\n<div id=\"how-to-use-it\">\n<h2>How to Use It</h2>\n<div id=\"create-a-redis-db-for-tokens\">\n<h3>Create a Redis DB For Tokens</h3>\n<p>Once you\u2019re done with the installation step, make a Redis db for your tokens in your Django settings file:</p>\n<pre><span class=\"n\">CACHES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"c1\"># other Redis db definitions above</span>\n\n     <span class=\"c1\"># tokens db definition</span>\n     <span class=\"s1\">'tokens'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n         <span class=\"s1\">'BACKEND'</span><span class=\"p\">:</span> <span class=\"s1\">'redis_cache.RedisCache'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'LOCATION'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost:6379'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'OPTIONS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n             <span class=\"s1\">'DB'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n         <span class=\"p\">},</span>\n         <span class=\"s1\">'TIMEOUT'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n     <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n<p><strong>Note:</strong></p>\n<ul>\n<li>In the above definition, we\u2019re setting \u201ctokens\u201d as the name for the Redis db that will contain tokens. You can change this name, more on that later.</li>\n<li><tt>TIMEOUT</tt> is used to expire tokens. <tt>TIMEOUT: 10000</tt> means that new tokens will be valid for 10000 before they expire and are removed from Redis.</li>\n</ul>\n</div>\n<div id=\"custom-settings\">\n<h3>Custom Settings</h3>\n<pre><span class=\"n\">DJFORGE_REDIS_MULTITOKENS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'REDIS_DB_NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'custom_redis_db_name_for_tokens'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'RESET_TOKEN_TTL_ON_USER_LOG_IN'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'OVERWRITE_NONE_TTL'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Put the above in your Django settings module to customize the behavior of <tt><span class=\"pre\">djforge-redis-multitokens</span></tt>:</p>\n<ul>\n<li><tt>REDIS_DB_NAME</tt>: set this to the same name you defined for your Redis db(\u201ctokens\u201d in the above defnition).</li>\n<li><tt>RESET_TOKEN_TTL_ON_USER_LOG_IN</tt> extends the life of tokens by <tt>TIMEOUT</tt> seconds(set in <tt>settings.CACHES</tt>).</li>\n<li><tt>OVERWRITE_NONE_TTL</tt> will overwrite the previous ttl of <tt>None</tt> (<tt>None</tt> means Redis will never expire your token) set on a token. Set this to <cite>False</cite> if you don\u2019t want your immortal tokens to become mortal.</li>\n<li>In other words, if you set <tt>OVERWRITE_NONE_TTL</tt> to <tt>False</tt>, the ttl of tokens with ttl <tt>None</tt> will not change. They will never expire.</li>\n</ul>\n</div>\n<div id=\"setup-token-authentication\">\n<h3>Setup Token Authentication</h3>\n<p>There\u2019s complicated logic involved in token authentication, but <tt>Django REST framework(DRF)</tt> comes with a \u201cpluggable\u201d authentication module that supports token authentication so that <tt><span class=\"pre\">djforge-redis-multitokens</span></tt> can change where tokens are stored.\nWe want our tokens to be stored in Redis, so we have to change the default authentication class:</p>\n<pre><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">' djforge_redis_multitokens.tokens_auth.CachedTokenAuthentication'</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"c1\"># your other DRF configurations goes below</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Note:</strong>\nWith this setting, we ask DFR to use <tt>CachedTokenAuthentication</tt> to check if users have the right token whenever they log in. <tt>CachedTokenAuthentication</tt> is a subclass of DRF\u2019s <tt>TokenAuthentication</tt> which overrides how tokens are fetched from storage.</p>\n</div>\n<div id=\"create-new-tokens\">\n<h3>Create New Tokens</h3>\n<p>Usually, you want to create a new token whenever a user logs in from a new device:</p>\n<pre><span class=\"kn\">from</span>  <span class=\"nn\">djforge_redis_multitokens.tokens_auth</span> <span class=\"kn\">import</span> <span class=\"n\">MultiToken</span>\n\n<span class=\"c1\"># create new token in your login logic</span>\n<span class=\"k\">def</span> <span class=\"nf\">login_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">MultiToken</span><span class=\"o\">.</span><span class=\"n\">create_token</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"c1\"># request object in DRF has a user attribute</span>\n    <span class=\"c1\"># _ variable is a boolean that denotes whether this is the first token created for this user</span>\n</pre>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Before your login handler function is invoked, DRF checks to see if your user has a valid token. So, the above function is not invoked for users who have a valid token.</li>\n<li><cite>MultiToken.create_token</cite> takes an instance of <tt>settings.AUTH_USER_MODEL</tt> which Django calls the <tt>User</tt> model.</li>\n<li>The <tt>_</tt> variable, if it is <cite>False</cite>, tells you that the user is logged in on another device(or browser).</li>\n<li>The <tt>token</tt> object has two attributes: <tt>key</tt> and <tt>user</tt>. DRF expects custom tokens to have these attributes. <tt>key</tt> is the string user receives as their token and <tt>user</tt> is an instance of the <tt>settings.AUTH_USER_MODEL</tt> model.</li>\n</ul>\n</div>\n<div id=\"expiring-tokens\">\n<h3>Expiring Tokens</h3>\n<p>When a user logs out(usually by pressing the \u201clog out\u201d button on your user interface), you usually expire the token associated with that device:</p>\n<pre><span class=\"kn\">from</span>  <span class=\"nn\">djforge_redis_multitokens.tokens_auth</span> <span class=\"kn\">import</span> <span class=\"n\">MultiToken</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">logout_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># DFR request object has an `auth` attribute which is of type MultiToken</span>\n    <span class=\"n\">MultiToken</span><span class=\"o\">.</span><span class=\"n\">expire_token</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"p\">)</span>\n</pre>\n<p>Sometimes, you want to expire all tokens of a user. For example, user changes his/her password and you want to force log out the user on all devices:</p>\n<pre><span class=\"kn\">from</span>  <span class=\"nn\">djforge_redis_multitokens.tokens_auth</span> <span class=\"kn\">import</span> <span class=\"n\">MultiToken</span>\n\n<span class=\"c1\"># after user changes password</span>\n<span class=\"k\">def</span> <span class=\"nf\">password_changed_handler</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"n\">MultiToken</span><span class=\"o\">.</span><span class=\"n\">expire_all_tokens</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"get-user-from-token\">\n<h3>Get User From Token</h3>\n<p>When you have access to user\u2019s token, you can get the <tt>user</tt> associated with that token:</p>\n<pre><span class=\"n\">MultiToken</span><span class=\"o\">.</span><span class=\"n\">get_user_from_token</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Then <cite>key</cite> here is a <tt>str</tt> object, so the <tt>get_user_from_token</tt> method expects the key as a string.</li>\n<li><tt>MultiToken.get_user_from_token</tt> returns a <tt>User</tt> which is defined by <tt>settings.AUTH_USER_MODEL</tt>.</li>\n</ul>\n</div>\n<div id=\"immortal-tokens\">\n<h3>Immortal Tokens</h3>\n<p>If you want your tokens to never expire, you need to do 2 things:</p>\n<ol>\n<li>Set <tt>TIMEOUT</tt> to <tt>None</tt> in <tt>CACHES</tt>:</li>\n</ol>\n<pre><span class=\"n\">CACHES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\"># other Redis db definitions above</span>\n\n    <span class=\"c1\"># tokens db definition</span>\n    <span class=\"s1\">'tokens'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'BACKEND'</span><span class=\"p\">:</span> <span class=\"s1\">'redis_cache.RedisCache'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'LOCATION'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost:6379'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'OPTIONS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'DB'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">'TIMEOUT'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<ol>\n<li>Set <tt>OVERWRITE_NONE_TTL</tt> to <tt>False</tt> in <tt>DJFORGE_REDIS_MULTITOKENS</tt>:</li>\n</ol>\n<pre><span class=\"n\">DJFORGE_REDIS_MULTITOKENS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'REDIS_DB_NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'custom_redis_db_name_for_tokens'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'RESET_TOKEN_TTL_ON_USER_LOG_IN'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'OVERWRITE_NONE_TTL'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"how-to-develop\">\n<h2>How to Develop</h2>\n<ul>\n<li>Clone the repo, go to the root directory(where <tt>setup.py</tt> is)</li>\n<li><tt>pip install <span class=\"pre\">--editable</span> .</tt></li>\n<li><tt>cd test_app/</tt></li>\n<li><tt>pip install <span class=\"pre\">-r</span> requirements</tt></li>\n<li><tt>cd demo</tt></li>\n<li><tt>python manage.py migrate</tt></li>\n<li><tt>python manage.py test</tt></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3173401, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "3647c750ea75af4ef0fc2667cab58c5f", "sha256": "44bacd423280369182f971464c066c6d5b5d0b2c4c3edb80d5da11fa300e498c"}, "downloads": -1, "filename": "djforge_redis_multitokens-0.0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "3647c750ea75af4ef0fc2667cab58c5f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10839, "upload_time": "2017-09-14T07:20:26", "upload_time_iso_8601": "2017-09-14T07:20:26.756736Z", "url": "https://files.pythonhosted.org/packages/d0/4b/f10c312210d4282442bea1b4eb7e567ab4e5579f9e07b4e8ffc5a0d28b04/djforge_redis_multitokens-0.0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2631fd6395a30c3803a60e292387adc4", "sha256": "487415a215f4828cedc00f366b29089849a113bdc3d17f06100922df5f43fc1b"}, "downloads": -1, "filename": "djforge_redis_multitokens-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2631fd6395a30c3803a60e292387adc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2722, "upload_time": "2017-09-13T17:37:28", "upload_time_iso_8601": "2017-09-13T17:37:28.431608Z", "url": "https://files.pythonhosted.org/packages/98/4b/04061bb1a21384cb3ba1291b5a7f5e598bc4905ebb1bb26b7246f7c41b3c/djforge_redis_multitokens-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a2c8af69e34ac3fd8a5e7ada95d5984f", "sha256": "86ef2a6d0efd99d362bfe3d2526622cbb5ba5d2ddedf45b230597cba9e70f244"}, "downloads": -1, "filename": "djforge_redis_multitokens-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a2c8af69e34ac3fd8a5e7ada95d5984f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6074, "upload_time": "2017-09-14T10:03:36", "upload_time_iso_8601": "2017-09-14T10:03:36.394898Z", "url": "https://files.pythonhosted.org/packages/07/43/79d4093f8fd430f8fa00fafe2e4a99458f13b4fdd324968840da03a58e17/djforge_redis_multitokens-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a2c8af69e34ac3fd8a5e7ada95d5984f", "sha256": "86ef2a6d0efd99d362bfe3d2526622cbb5ba5d2ddedf45b230597cba9e70f244"}, "downloads": -1, "filename": "djforge_redis_multitokens-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a2c8af69e34ac3fd8a5e7ada95d5984f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6074, "upload_time": "2017-09-14T10:03:36", "upload_time_iso_8601": "2017-09-14T10:03:36.394898Z", "url": "https://files.pythonhosted.org/packages/07/43/79d4093f8fd430f8fa00fafe2e4a99458f13b4fdd324968840da03a58e17/djforge_redis_multitokens-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:35 2020"}