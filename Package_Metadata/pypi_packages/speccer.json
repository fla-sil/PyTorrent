{"info": {"author": "Juho Veps\u00c3\u00a4l\u00c3\u00a4inen", "author_email": "bebraw@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: Software Development :: Testing"], "description": "Speccer - Specification based test runner for Python\n====================================================\n\nSpeccer provides simple means to test individual modules. It uses a\nminimal, assert-free syntax. This syntax is compiled to actual code\nutilizing Python's unittest. Henceforth Speccer may be seen as an\nalternative to it in various situations.\n\nRun \"setup.py install\" to start rocking. See \"demo\" folder for an actual\nexample. Once you have installed the tool just invoke \"run\\_specs\" at\nthat directory. You should see some test results. Feel free to tweak the\nfiles to give it a proper go.\n\nBasic Specification Syntax\n--------------------------\n\nA module specification could look something like this:\n\nmyclass.spec: (tests myclass.py)\n\n::\n\n    set up\n        c = myclass.MyClass()\n\n    adds two and two\n        c.add(2,2) == 4\n\n    adds negatives\n        c.add(10, -10) == 0\n\n    fails adding int and string\n        c.add(10, 'foo') raises TypeError\n\nIt looks pretty much like any other test you may have seen before. The\nsyntax may be a bit lighter, though. As a test author you can focus on\nthe essential while writing the assertions. In addition it's a bit nicer\nto read this way.\n\nNote that it's possible to mix regular Python code within the tests.\nThis might not work in all cases, though, and should be reported.\n\n\"set up\" is a predefined test method that is run before each\nspecification. This way you can set up some objects that are available\nfor each test.\n\nEach specification contains a name and some actual code asserting\nsomething. I have listed available assertions below:\n\n-  ==, is equal\n-  !=, is not equal\n-  ~=, is almost equal\n-  !~=, is not almost equal\n-  >, bigger than\n-  >=, bigger than or equal\n-  <, smaller than\n-  <=, smaller than or equal\n-  x < y < z, multiple inequalities (mix with equality as you want)\n\nThese assertions map directly to ones available in Python's unittest\nmodule. If some of those seem weird to you, see\nhttp://docs.python.org/library/unittest.html .\n\nChangelog\n---------\n\n-  0.7.5 - Made it possible to define functions between test definitions\n   and made the runner more robust altogether. Now it's possible to\n   separate tests to another directory. In addition it's possible to run\n   tests simply by passing this directory to the runner (ie. run\\_specs\n   tests).\n\nLicense\n-------\n\nSpeccer is available under MIT license. See LICENSE for more details.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bebraw/speccer", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "speccer", "package_url": "https://pypi.org/project/speccer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/speccer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/bebraw/speccer"}, "release_url": "https://pypi.org/project/speccer/0.7.5/", "requires_dist": null, "requires_python": null, "summary": "Specification based test runner.", "version": "0.7.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Speccer provides simple means to test individual modules. It uses a\nminimal, assert-free syntax. This syntax is compiled to actual code\nutilizing Python\u2019s unittest. Henceforth Speccer may be seen as an\nalternative to it in various situations.</p>\n<p>Run \u201csetup.py install\u201d to start rocking. See \u201cdemo\u201d folder for an actual\nexample. Once you have installed the tool just invoke \u201crun_specs\u201d at\nthat directory. You should see some test results. Feel free to tweak the\nfiles to give it a proper go.</p>\n<div id=\"basic-specification-syntax\">\n<h2>Basic Specification Syntax</h2>\n<p>A module specification could look something like this:</p>\n<p>myclass.spec: (tests myclass.py)</p>\n<pre>set up\n    c = myclass.MyClass()\n\nadds two and two\n    c.add(2,2) == 4\n\nadds negatives\n    c.add(10, -10) == 0\n\nfails adding int and string\n    c.add(10, 'foo') raises TypeError\n</pre>\n<p>It looks pretty much like any other test you may have seen before. The\nsyntax may be a bit lighter, though. As a test author you can focus on\nthe essential while writing the assertions. In addition it\u2019s a bit nicer\nto read this way.</p>\n<p>Note that it\u2019s possible to mix regular Python code within the tests.\nThis might not work in all cases, though, and should be reported.</p>\n<p>\u201cset up\u201d is a predefined test method that is run before each\nspecification. This way you can set up some objects that are available\nfor each test.</p>\n<p>Each specification contains a name and some actual code asserting\nsomething. I have listed available assertions below:</p>\n<ul>\n<li>==, is equal</li>\n<li>!=, is not equal</li>\n<li>~=, is almost equal</li>\n<li>!~=, is not almost equal</li>\n<li>&gt;, bigger than</li>\n<li>&gt;=, bigger than or equal</li>\n<li>&lt;, smaller than</li>\n<li>&lt;=, smaller than or equal</li>\n<li>x &lt; y &lt; z, multiple inequalities (mix with equality as you want)</li>\n</ul>\n<p>These assertions map directly to ones available in Python\u2019s unittest\nmodule. If some of those seem weird to you, see\n<a href=\"http://docs.python.org/library/unittest.html\" rel=\"nofollow\">http://docs.python.org/library/unittest.html</a> .</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<ul>\n<li>0.7.5 - Made it possible to define functions between test definitions\nand made the runner more robust altogether. Now it\u2019s possible to\nseparate tests to another directory. In addition it\u2019s possible to run\ntests simply by passing this directory to the runner (ie. run_specs\ntests).</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Speccer is available under MIT license. See LICENSE for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 731502, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "975526c016199674277c6f00260e5122", "sha256": "51b96114b874f9893584720270dcd29782d43b1cee92c594e646669c5b57da1a"}, "downloads": -1, "filename": "speccer-0.5.0.tar.gz", "has_sig": false, "md5_digest": "975526c016199674277c6f00260e5122", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7237, "upload_time": "2011-11-11T10:32:53", "upload_time_iso_8601": "2011-11-11T10:32:53.000295Z", "url": "https://files.pythonhosted.org/packages/3f/44/793d0ed3fd274a70656f33bfb23700b5ec53e261a961f7768a1911923922/speccer-0.5.0.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "46f8f2b5bfd5da9d0736b58a49708caf", "sha256": "a1fbfa4b50200937423831e85a2901e31431cc6c6ca26bf90b5c2f901d22ad20"}, "downloads": -1, "filename": "speccer-0.5.2.tar.gz", "has_sig": false, "md5_digest": "46f8f2b5bfd5da9d0736b58a49708caf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7643, "upload_time": "2011-11-12T12:03:47", "upload_time_iso_8601": "2011-11-12T12:03:47.278887Z", "url": "https://files.pythonhosted.org/packages/1a/bd/3772ea4c481658496c28f634ebd8b7af2a38ddab98a4538234460d356959/speccer-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "a4168203ec8d0cd91b562898bc3839ce", "sha256": "22123297f9137b899eeb5cd94ac615fe1e7b2996ac02049626a1848b166751bf"}, "downloads": -1, "filename": "speccer-0.6.0.tar.gz", "has_sig": false, "md5_digest": "a4168203ec8d0cd91b562898bc3839ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9236, "upload_time": "2011-11-15T20:30:48", "upload_time_iso_8601": "2011-11-15T20:30:48.945872Z", "url": "https://files.pythonhosted.org/packages/75/38/9817cc37ad2de808453d10aa77cb4d7243a9f6914cbd0b74caec54edd354/speccer-0.6.0.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "d81d781480abc46452b964c5ec2d5bea", "sha256": "f91cbb7c3fb20b301824a6be3dae183e13903025f7562a828b93021cb6deb702"}, "downloads": -1, "filename": "speccer-0.7.5.tar.gz", "has_sig": false, "md5_digest": "d81d781480abc46452b964c5ec2d5bea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10947, "upload_time": "2011-11-19T16:05:01", "upload_time_iso_8601": "2011-11-19T16:05:01.428966Z", "url": "https://files.pythonhosted.org/packages/91/b9/a6b53a55c6cd0aa2b56c9f9d508d975e1584c8d3e41b81fc8a3f9f72058d/speccer-0.7.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d81d781480abc46452b964c5ec2d5bea", "sha256": "f91cbb7c3fb20b301824a6be3dae183e13903025f7562a828b93021cb6deb702"}, "downloads": -1, "filename": "speccer-0.7.5.tar.gz", "has_sig": false, "md5_digest": "d81d781480abc46452b964c5ec2d5bea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10947, "upload_time": "2011-11-19T16:05:01", "upload_time_iso_8601": "2011-11-19T16:05:01.428966Z", "url": "https://files.pythonhosted.org/packages/91/b9/a6b53a55c6cd0aa2b56c9f9d508d975e1584c8d3e41b81fc8a3f9f72058d/speccer-0.7.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:42 2020"}