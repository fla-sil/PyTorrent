{"info": {"author": "Aleksei Korzhenkov", "author_email": "oscypek@ya.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# ZGA - prokaryotic genome assembly and annotation pipeline\n\n[![version status](https://img.shields.io/pypi/v/zga.svg)](https://pypi.python.org/pypi/zga)\n\n## Installation\n\n\n### Installing dependencies\n\nZGA is written in Python and tested with Python 3.6 and Python 3.7. ZGA uses several software and libs including:\n\n* fastqc\n* ea-utils\n* bbmap (or seqprep)\n* spades\n* unicycler\n* CheckM\n* DFast\n* BioPython\n* blastn\n\nAll of them may be installed using **conda**:\n\nIt's highly recommended to create a new conda environment:\n\n`conda create -n newcoolenv python=3.7 fastqc ea-utils spades unicycler checkm-genome seqprep dfast bbmap blast biopython`\n\nand activate it\n\n`conda activate newcoolenv`\n\n\nOtherwise you may install dependencies to existing conda environment:\n\n`conda install python>=3.6 fastqc ea-utils spades unicycler checkm-genome seqprep dfast bbmap blast biopython`\n\n\nOf course, it's possible to use *another ways* even compile all tools from source code. In this case you should check if binaries are in your '$PATH' variable.\n\n\n### Get source from Github\n\nYou can get ZGA by cloning from the repository with `git clone https://github.com/laxeye/zga.git` or by downloading an archive.\n\n\n### Install from PyPi\n\nRun `pip install zga` it will check if You have Biopython and istall it if not. But all other dependencies You should install manually or using **conda**. CheckM is available on **PyPi**, but it's easier to install it using **conda**.\n\n\n### Operating systems requirements\n\nZGA was tested on Ubuntu 18.04. Most probably any modern 64-bit Linux distribuition is enough.\n\nYour feedback on other OS is welcome!\n\n\n## Usage\n\nYou should run `zga.py` if You cloned the source code or `zga` otherwise.\n\nRun 'zga.py -h' to get a help message.\n\nExamples:\n\nPerform all steps: read qc, read trimming and merging, assembly, CheckM assesment with default (bacterial) marker set, DFAST annotation and use 4 CPU threads where possible:\n\n`zga.py -1 R1.fastq.gz -2 R2.fastq.gz --threads 4 -o my_assembly`\n\nor use SPAdes and provide it with paired-end and nanopore reads of archaeal genome (CheckM will use archaeal markers)\n\n`zga.py -1 R1.fastq.gz -2 R2.fastq.gz --nanopore MiniION.fastq.gz -a spades --threads 4 --domain archaea -o my_assembly`\n\nor from Nanopore reads using only unicycler\n\n`zga.py --nanopore MiniION.fastq.gz -o nanopore_assembly`\n\nPerform genome assesment and annotation:\n\nWith 'Pectobacterium' CheckM marker set: \n\n`zga.py --step check -g pectobacterium_sp.fasta --checkm_rank genus --checkm_taxon Pectobacterium -o my_output_dir`\n\nLet CheckM to infer the right marker set: \n\n`zga.py --first-step check -g my_genome.fa --checkm_mode lineage -o my_output_dir`\n\n\n## Know issues and limitations\n\nDon't forget: ZGA is in the early testing...\n\nI hope to fix next issues **ASAP**:\n\n* It's not posible to provide multiple read libraries i.e. tow sets of PE reads or two nanopore runs. \n* It's not possible to install all dependencies with Python 3.8 via conda, please use 3.7 or 3.6.\n* There is no conda package\n\nLimitations of unicycler:\n\n* Unicycler doesn't use mate-pair reads.\n\nDon't hesitate to report bug or feature!\n\n\n## Cite\n\nIt's a great pleasure to know, that your software is useful. Please cite ZAG: \n\nKorzhenkov A. (2020). ZGA: prokaryotic genome assembly and annotation pipeline.\n\nAnd of course tools it's using:\n\nAndrews, S. (2010). FastQC: a quality control tool for high throughput sequence data.\n\nAronesty, E. (2015). ea-utils: Command-line tools for processing biological sequencing data. 2011. URL https://github. com/ExpressionAnalysis/ea-utils.\n\nBushnell, B., Rood, J., & Singer, E. (2017). BBMerge\u2013accurate paired shotgun read merging via overlap. PloS one, 12(10).\n\nBankevich, A., Nurk, S., Antipov, D., Gurevich, A. A., Dvorkin, M., Kulikov, A. S., ... & Pyshkin, A. V. (2012). SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing. Journal of computational biology, 19(5), 455-477.\n\nWick, R. R., Judd, L. M., Gorrie, C. L., & Holt, K. E. (2017). Unicycler: resolving bacterial genome assemblies from short and long sequencing reads. PLoS computational biology, 13(6), e1005595.\n\nParks, D. H., Imelfort, M., Skennerton, C. T., Hugenholtz, P., & Tyson, G. W. (2015). CheckM: assessing the quality of microbial genomes recovered from isolates, single cells, and metagenomes. Genome research, 25(7), 1043-1055.\n\nTanizawa, Y., Fujisawa, T., & Nakamura, Y. (2018). DFAST: a flexible prokaryotic genome annotation pipeline for faster genome publication. Bioinformatics, 34(6), 1037-1039.\n\nAltschul, S. F., Gish, W., Miller, W., Myers, E. W., & Lipman, D. J. (1990). Basic local alignment search tool. Journal of molecular biology, 215(3), 403-410.\n\nCock, P. J., Antao, T., Chang, J. T., Chapman, B. A., Cox, C. J., Dalke, A., ... & De Hoon, M. J. (2009). Biopython: freely available Python tools for computational molecular biology and bioinformatics. Bioinformatics, 25(11), 1422-1423.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/laxeye/zga", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "zga", "package_url": "https://pypi.org/project/zga/", "platform": "", "project_url": "https://pypi.org/project/zga/", "project_urls": {"Homepage": "https://github.com/laxeye/zga"}, "release_url": "https://pypi.org/project/zga/0.0.2/", "requires_dist": ["biopython"], "requires_python": ">=3.6", "summary": "Prokaryotic genome assembly and annotation pipeline", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ZGA - prokaryotic genome assembly and annotation pipeline</h1>\n<p><a href=\"https://pypi.python.org/pypi/zga\" rel=\"nofollow\"><img alt=\"version status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ba3afdef31bb74e6d5dd8c9e963544079db6e14/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7a67612e737667\"></a></p>\n<h2>Installation</h2>\n<h3>Installing dependencies</h3>\n<p>ZGA is written in Python and tested with Python 3.6 and Python 3.7. ZGA uses several software and libs including:</p>\n<ul>\n<li>fastqc</li>\n<li>ea-utils</li>\n<li>bbmap (or seqprep)</li>\n<li>spades</li>\n<li>unicycler</li>\n<li>CheckM</li>\n<li>DFast</li>\n<li>BioPython</li>\n<li>blastn</li>\n</ul>\n<p>All of them may be installed using <strong>conda</strong>:</p>\n<p>It's highly recommended to create a new conda environment:</p>\n<p><code>conda create -n newcoolenv python=3.7 fastqc ea-utils spades unicycler checkm-genome seqprep dfast bbmap blast biopython</code></p>\n<p>and activate it</p>\n<p><code>conda activate newcoolenv</code></p>\n<p>Otherwise you may install dependencies to existing conda environment:</p>\n<p><code>conda install python&gt;=3.6 fastqc ea-utils spades unicycler checkm-genome seqprep dfast bbmap blast biopython</code></p>\n<p>Of course, it's possible to use <em>another ways</em> even compile all tools from source code. In this case you should check if binaries are in your '$PATH' variable.</p>\n<h3>Get source from Github</h3>\n<p>You can get ZGA by cloning from the repository with <code>git clone https://github.com/laxeye/zga.git</code> or by downloading an archive.</p>\n<h3>Install from PyPi</h3>\n<p>Run <code>pip install zga</code> it will check if You have Biopython and istall it if not. But all other dependencies You should install manually or using <strong>conda</strong>. CheckM is available on <strong>PyPi</strong>, but it's easier to install it using <strong>conda</strong>.</p>\n<h3>Operating systems requirements</h3>\n<p>ZGA was tested on Ubuntu 18.04. Most probably any modern 64-bit Linux distribuition is enough.</p>\n<p>Your feedback on other OS is welcome!</p>\n<h2>Usage</h2>\n<p>You should run <code>zga.py</code> if You cloned the source code or <code>zga</code> otherwise.</p>\n<p>Run 'zga.py -h' to get a help message.</p>\n<p>Examples:</p>\n<p>Perform all steps: read qc, read trimming and merging, assembly, CheckM assesment with default (bacterial) marker set, DFAST annotation and use 4 CPU threads where possible:</p>\n<p><code>zga.py -1 R1.fastq.gz -2 R2.fastq.gz --threads 4 -o my_assembly</code></p>\n<p>or use SPAdes and provide it with paired-end and nanopore reads of archaeal genome (CheckM will use archaeal markers)</p>\n<p><code>zga.py -1 R1.fastq.gz -2 R2.fastq.gz --nanopore MiniION.fastq.gz -a spades --threads 4 --domain archaea -o my_assembly</code></p>\n<p>or from Nanopore reads using only unicycler</p>\n<p><code>zga.py --nanopore MiniION.fastq.gz -o nanopore_assembly</code></p>\n<p>Perform genome assesment and annotation:</p>\n<p>With 'Pectobacterium' CheckM marker set:</p>\n<p><code>zga.py --step check -g pectobacterium_sp.fasta --checkm_rank genus --checkm_taxon Pectobacterium -o my_output_dir</code></p>\n<p>Let CheckM to infer the right marker set:</p>\n<p><code>zga.py --first-step check -g my_genome.fa --checkm_mode lineage -o my_output_dir</code></p>\n<h2>Know issues and limitations</h2>\n<p>Don't forget: ZGA is in the early testing...</p>\n<p>I hope to fix next issues <strong>ASAP</strong>:</p>\n<ul>\n<li>It's not posible to provide multiple read libraries i.e. tow sets of PE reads or two nanopore runs.</li>\n<li>It's not possible to install all dependencies with Python 3.8 via conda, please use 3.7 or 3.6.</li>\n<li>There is no conda package</li>\n</ul>\n<p>Limitations of unicycler:</p>\n<ul>\n<li>Unicycler doesn't use mate-pair reads.</li>\n</ul>\n<p>Don't hesitate to report bug or feature!</p>\n<h2>Cite</h2>\n<p>It's a great pleasure to know, that your software is useful. Please cite ZAG:</p>\n<p>Korzhenkov A. (2020). ZGA: prokaryotic genome assembly and annotation pipeline.</p>\n<p>And of course tools it's using:</p>\n<p>Andrews, S. (2010). FastQC: a quality control tool for high throughput sequence data.</p>\n<p>Aronesty, E. (2015). ea-utils: Command-line tools for processing biological sequencing data. 2011. URL <a href=\"https://github\" rel=\"nofollow\">https://github</a>. com/ExpressionAnalysis/ea-utils.</p>\n<p>Bushnell, B., Rood, J., &amp; Singer, E. (2017). BBMerge\u2013accurate paired shotgun read merging via overlap. PloS one, 12(10).</p>\n<p>Bankevich, A., Nurk, S., Antipov, D., Gurevich, A. A., Dvorkin, M., Kulikov, A. S., ... &amp; Pyshkin, A. V. (2012). SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing. Journal of computational biology, 19(5), 455-477.</p>\n<p>Wick, R. R., Judd, L. M., Gorrie, C. L., &amp; Holt, K. E. (2017). Unicycler: resolving bacterial genome assemblies from short and long sequencing reads. PLoS computational biology, 13(6), e1005595.</p>\n<p>Parks, D. H., Imelfort, M., Skennerton, C. T., Hugenholtz, P., &amp; Tyson, G. W. (2015). CheckM: assessing the quality of microbial genomes recovered from isolates, single cells, and metagenomes. Genome research, 25(7), 1043-1055.</p>\n<p>Tanizawa, Y., Fujisawa, T., &amp; Nakamura, Y. (2018). DFAST: a flexible prokaryotic genome annotation pipeline for faster genome publication. Bioinformatics, 34(6), 1037-1039.</p>\n<p>Altschul, S. F., Gish, W., Miller, W., Myers, E. W., &amp; Lipman, D. J. (1990). Basic local alignment search tool. Journal of molecular biology, 215(3), 403-410.</p>\n<p>Cock, P. J., Antao, T., Chang, J. T., Chapman, B. A., Cox, C. J., Dalke, A., ... &amp; De Hoon, M. J. (2009). Biopython: freely available Python tools for computational molecular biology and bioinformatics. Bioinformatics, 25(11), 1422-1423.</p>\n\n          </div>"}, "last_serial": 7182454, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c9e537500d0a1a5b2785230a4cc9529b", "sha256": "ea277c9ed32eb7c2153fc48112286e2bd90acee550cb44b534d8fbb7b133ffe0"}, "downloads": -1, "filename": "zga-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c9e537500d0a1a5b2785230a4cc9529b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13128, "upload_time": "2020-05-01T17:03:20", "upload_time_iso_8601": "2020-05-01T17:03:20.991224Z", "url": "https://files.pythonhosted.org/packages/1e/93/e7ba222ac133b89bc1135c17b844d55e6213ff9529805e33bda9f33d6577/zga-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8d3cf5dfea9228386832723b4cabfca", "sha256": "6d01c91abe9e62528066afc707014dfa2bee04d275626b62442828d2fe05e094"}, "downloads": -1, "filename": "zga-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b8d3cf5dfea9228386832723b4cabfca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11456, "upload_time": "2020-05-01T17:03:23", "upload_time_iso_8601": "2020-05-01T17:03:23.798739Z", "url": "https://files.pythonhosted.org/packages/16/e6/a0cc801e007436a3f27b79107a1be2f9931e2b92ca882c2806d3ca79bf33/zga-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "14b289b76bd813f5766c80217e25b722", "sha256": "a7997d5889f74c0c224a772ca8bfd864a8fb06dfe12fae151b7941fdc5e308fd"}, "downloads": -1, "filename": "zga-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "14b289b76bd813f5766c80217e25b722", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13569, "upload_time": "2020-05-06T19:03:48", "upload_time_iso_8601": "2020-05-06T19:03:48.526248Z", "url": "https://files.pythonhosted.org/packages/4b/49/5bdac152ebee37b081ffab3e5bae9b6a0db3efdaffae2ed4dfc2ddbb71cc/zga-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a674bc16e2bf02da3dfd05c8e42402f", "sha256": "2ec66f2e3ed1493ede06cb05c69bc60ecc9f00820193c0c141c2a1c79405a0a0"}, "downloads": -1, "filename": "zga-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0a674bc16e2bf02da3dfd05c8e42402f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12300, "upload_time": "2020-05-06T19:03:49", "upload_time_iso_8601": "2020-05-06T19:03:49.725467Z", "url": "https://files.pythonhosted.org/packages/46/5d/89f9850369831c6f2ca5c1ea1bb372c3c8df39087d644eeb64eb0ddb2b51/zga-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "14b289b76bd813f5766c80217e25b722", "sha256": "a7997d5889f74c0c224a772ca8bfd864a8fb06dfe12fae151b7941fdc5e308fd"}, "downloads": -1, "filename": "zga-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "14b289b76bd813f5766c80217e25b722", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13569, "upload_time": "2020-05-06T19:03:48", "upload_time_iso_8601": "2020-05-06T19:03:48.526248Z", "url": "https://files.pythonhosted.org/packages/4b/49/5bdac152ebee37b081ffab3e5bae9b6a0db3efdaffae2ed4dfc2ddbb71cc/zga-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a674bc16e2bf02da3dfd05c8e42402f", "sha256": "2ec66f2e3ed1493ede06cb05c69bc60ecc9f00820193c0c141c2a1c79405a0a0"}, "downloads": -1, "filename": "zga-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0a674bc16e2bf02da3dfd05c8e42402f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12300, "upload_time": "2020-05-06T19:03:49", "upload_time_iso_8601": "2020-05-06T19:03:49.725467Z", "url": "https://files.pythonhosted.org/packages/46/5d/89f9850369831c6f2ca5c1ea1bb372c3c8df39087d644eeb64eb0ddb2b51/zga-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:06 2020"}