{"info": {"author": "V\u00e1clav \u010cadek", "author_email": "vaclavcadek@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "titanium\r\n========\r\n\r\nTitanium is light-weight evaluator for PMML models based on NumPy. With Titanium you are able to take predictive\r\nmodel stored in pmml file, load it and start using it for making new predictions. It has the same API as you may know\r\nwhen using widely known machine learning libraries like *Keras* or *scikit-learn* - e.g.:\r\n\r\n* **predict_proba(X)**\r\n* **predict_classes(X)**\r\n\r\nIt natively supports batch processing as input is expected to be 2D NumPy array. For list of supported models see bellow.\r\n\r\nThe concept behind the name is that Titanium as the element is light and extremely durable material. Moreover it's\r\nresistant to corrosion - which has a parallel as mathematics behind the neural network evaluation using matrix\r\noperations is above any particular implementations.\r\n\r\nInstallation\r\n------------\r\n\r\nTo install titanium, simply:\r\n\r\n.. code-block:: bash\r\n\r\n    $ pip install titanium\r\n\r\nExample\r\n-------\r\n\r\nExample on Iris data - for more examples see the examples folder.\r\n\r\n.. code-block:: python\r\n\r\n    from keras2pmml import keras2pmml\r\n    from sklearn.datasets import load_iris\r\n    import numpy as np\r\n    import theano\r\n    from sklearn.cross_validation import train_test_split\r\n    from sklearn.metrics import accuracy_score\r\n    from keras.utils import np_utils\r\n    from keras.models import Sequential\r\n    from keras.layers.core import Dense\r\n    from sklearn.preprocessing import StandardScaler\r\n\r\n    import titanium as ti\r\n    import os\r\n\r\n    iris = load_iris()\r\n    X = iris.data\r\n    y = iris.target\r\n\r\n    theano.config.floatX = 'float32'\r\n    X = X.astype(theano.config.floatX)\r\n    y = y.astype(np.int32)\r\n\r\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3)\r\n\r\n    y_train_ohe = np_utils.to_categorical(y_train)\r\n    y_test_ohe = np_utils.to_categorical(y_test)\r\n\r\n    std = StandardScaler()\r\n    X_train_scaled = std.fit_transform(X_train)\r\n    X_test_scaled = std.transform(X_test)\r\n    model = Sequential()\r\n    model.add(Dense(input_dim=X_train_scaled.shape[1], output_dim=20, activation='tanh'))\r\n    model.add(Dense(input_dim=20, output_dim=5, activation='tanh'))\r\n    model.add(Dense(input_dim=5, output_dim=y_test_ohe.shape[1], activation='sigmoid'))\r\n    model.compile(loss='categorical_crossentropy', optimizer='sgd')\r\n    model.fit(X_train_scaled, y_train_ohe, nb_epoch=100, batch_size=1, verbose=3, validation_data=None)\r\n\r\n    params = {\r\n        'copyright': 'V\u00e1clav \u010cadek',\r\n        'description': 'Simple Keras model for Iris dataset.',\r\n        'model_name': 'Iris Model'\r\n    }\r\n\r\n    keras2pmml(model, file='iris.pmml', **params)\r\n    pmml = ti.read_pmml('iris.pmml')\r\n    os.unlink('iris.pmml')\r\n\r\n    keras_preds = model.predict_classes(X_test_scaled)\r\n    titanium_preds = pmml.predict_classes(X_test_scaled)\r\n\r\n    print('Accuracy (Keras): {accuracy}'.format(accuracy=accuracy_score(y_test, keras_preds)))\r\n    print('Accuracy (Titanium): {accuracy}'.format(accuracy=accuracy_score(y_test, titanium_preds)))\r\n\r\n\r\n\r\nWhat is supported?\r\n------------------\r\n- Models\r\n    * keras.models.Sequential\r\n- Activation functions\r\n    * tanh\r\n    * sigmoid/logistic\r\n\r\nLicense\r\n-------\r\n\r\nThis software is licensed under MIT licence.\r\n\r\n- https://opensource.org/licenses/MIT", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vaclavcadek/keras2pmml", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "titanium", "package_url": "https://pypi.org/project/titanium/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/titanium/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/vaclavcadek/keras2pmml"}, "release_url": "https://pypi.org/project/titanium/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Titanium is light-weight evaluator for PMML models based on NumPy.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Titanium is light-weight evaluator for PMML models based on NumPy. With Titanium you are able to take predictive\nmodel stored in pmml file, load it and start using it for making new predictions. It has the same API as you may know\nwhen using widely known machine learning libraries like <em>Keras</em> or <em>scikit-learn</em> - e.g.:</p>\n<ul>\n<li><strong>predict_proba(X)</strong></li>\n<li><strong>predict_classes(X)</strong></li>\n</ul>\n<p>It natively supports batch processing as input is expected to be 2D NumPy array. For list of supported models see bellow.</p>\n<p>The concept behind the name is that Titanium as the element is light and extremely durable material. Moreover it\u2019s\nresistant to corrosion - which has a parallel as mathematics behind the neural network evaluation using matrix\noperations is above any particular implementations.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install titanium, simply:</p>\n<pre>$ pip install titanium\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Example on Iris data - for more examples see the examples folder.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keras2pmml</span> <span class=\"kn\">import</span> <span class=\"n\">keras2pmml</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_iris</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">theano</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.cross_validation</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">accuracy_score</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras.utils</span> <span class=\"kn\">import</span> <span class=\"n\">np_utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras.models</span> <span class=\"kn\">import</span> <span class=\"n\">Sequential</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras.layers.core</span> <span class=\"kn\">import</span> <span class=\"n\">Dense</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">StandardScaler</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">titanium</span> <span class=\"k\">as</span> <span class=\"nn\">ti</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">iris</span> <span class=\"o\">=</span> <span class=\"n\">load_iris</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">theano</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">floatX</span> <span class=\"o\">=</span> <span class=\"s1\">'float32'</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">theano</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">floatX</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=.</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">y_train_ohe</span> <span class=\"o\">=</span> <span class=\"n\">np_utils</span><span class=\"o\">.</span><span class=\"n\">to_categorical</span><span class=\"p\">(</span><span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"n\">y_test_ohe</span> <span class=\"o\">=</span> <span class=\"n\">np_utils</span><span class=\"o\">.</span><span class=\"n\">to_categorical</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n\n<span class=\"n\">std</span> <span class=\"o\">=</span> <span class=\"n\">StandardScaler</span><span class=\"p\">()</span>\n<span class=\"n\">X_train_scaled</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">)</span>\n<span class=\"n\">X_test_scaled</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Sequential</span><span class=\"p\">()</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"n\">input_dim</span><span class=\"o\">=</span><span class=\"n\">X_train_scaled</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">output_dim</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">'tanh'</span><span class=\"p\">))</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"n\">input_dim</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">output_dim</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">'tanh'</span><span class=\"p\">))</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"n\">input_dim</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">output_dim</span><span class=\"o\">=</span><span class=\"n\">y_test_ohe</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">'sigmoid'</span><span class=\"p\">))</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">'categorical_crossentropy'</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s1\">'sgd'</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train_scaled</span><span class=\"p\">,</span> <span class=\"n\">y_train_ohe</span><span class=\"p\">,</span> <span class=\"n\">nb_epoch</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">validation_data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'copyright'</span><span class=\"p\">:</span> <span class=\"s1\">'V\u00e1clav \u010cadek'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'Simple Keras model for Iris dataset.'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'model_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Iris Model'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">keras2pmml</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"s1\">'iris.pmml'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"n\">pmml</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">read_pmml</span><span class=\"p\">(</span><span class=\"s1\">'iris.pmml'</span><span class=\"p\">)</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">unlink</span><span class=\"p\">(</span><span class=\"s1\">'iris.pmml'</span><span class=\"p\">)</span>\n\n<span class=\"n\">keras_preds</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict_classes</span><span class=\"p\">(</span><span class=\"n\">X_test_scaled</span><span class=\"p\">)</span>\n<span class=\"n\">titanium_preds</span> <span class=\"o\">=</span> <span class=\"n\">pmml</span><span class=\"o\">.</span><span class=\"n\">predict_classes</span><span class=\"p\">(</span><span class=\"n\">X_test_scaled</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Accuracy (Keras): </span><span class=\"si\">{accuracy}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">accuracy</span><span class=\"o\">=</span><span class=\"n\">accuracy_score</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">keras_preds</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Accuracy (Titanium): </span><span class=\"si\">{accuracy}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">accuracy</span><span class=\"o\">=</span><span class=\"n\">accuracy_score</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">titanium_preds</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"what-is-supported\">\n<h2>What is supported?</h2>\n<ul>\n<li><dl>\n<dt>Models</dt>\n<dd><ul>\n<li>keras.models.Sequential</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Activation functions</dt>\n<dd><ul>\n<li>tanh</li>\n<li>sigmoid/logistic</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This software is licensed under MIT licence.</p>\n<ul>\n<li><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">https://opensource.org/licenses/MIT</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2251132, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c3b8a4f59a498701cfac52c0dc7bfffd", "sha256": "beea204ca4b6d0c4924c77cee258dba20d9a3b067eb5fe5a719a361dfabc6abb"}, "downloads": -1, "filename": "titanium-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c3b8a4f59a498701cfac52c0dc7bfffd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3298, "upload_time": "2016-07-27T12:02:35", "upload_time_iso_8601": "2016-07-27T12:02:35.145474Z", "url": "https://files.pythonhosted.org/packages/a7/9b/2b2c7f80b2bd7642af2d5e2d1770419fc4db7e6eccf2a874980a35cf8989/titanium-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c3b8a4f59a498701cfac52c0dc7bfffd", "sha256": "beea204ca4b6d0c4924c77cee258dba20d9a3b067eb5fe5a719a361dfabc6abb"}, "downloads": -1, "filename": "titanium-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c3b8a4f59a498701cfac52c0dc7bfffd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3298, "upload_time": "2016-07-27T12:02:35", "upload_time_iso_8601": "2016-07-27T12:02:35.145474Z", "url": "https://files.pythonhosted.org/packages/a7/9b/2b2c7f80b2bd7642af2d5e2d1770419fc4db7e6eccf2a874980a35cf8989/titanium-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:42 2020"}