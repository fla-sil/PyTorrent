{"info": {"author": "Niklas Rosenstein", "author_email": "rosensteinniklas@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# nr.parsing.date\n\nThis package provides a fast parser for fixed format date strings with \nsupport for timezone offsets. The goal of this package is to\n\n1. bring support for timezone offsets to Python 2.7\n2. be faster than `dateutil.parser.parse()`\n\nYou can control the regex backend with the `PYTHON_NR_DATE_REGEX_BACKEND`\nenvironment variable. The default is `re`. You can use this variable to\nmake it use the `regex` module instead.\n\nCurrently supported format options are:\n\n- `%Y` &ndash; 4 digit year\n- `%m` &ndash; 2 digit month\n- `%d` &ndash; 2 digit day\n- `%H` &ndash; 2 digit hour\n- `%M` &ndash; 2 digit minute\n- `%S` &ndash; 2 digit second\n- `%f` &ndash; arbitrary precision milliseconds\n- `%z` &ndash; timezone offset (`[+-]\\d\\d:?\\d\\d` offset or `Z` for UTC)\n\nThe date formats are extensible by using the `register_format_option()`\nfunction or creating a new `FormatOptionSet`.\n\n## API\n\n### `BaseFormatOption()`\n\nBase class for format options.\n\n### `FormatOption(char, dest, regex, parser, render)`\n\nUseful class for creating a new format options.\n\n### `TimezoneFormatOption()`\n\nSpecial format option implementation for matching timezone offset.\n\n### `FormatOptionSet()`\n\nRepresents a set of `BaseFormatOption` objects. Use the `create_date_format()`\nmethod to create a `DateFormat` object from this set and a format string.\n\n### `DateFormat(string, option_set=None)`\n\nCreates a new parser and formatter for dates from a template string. It is\nrecommendable to use `FormatOptionSet.create_date_format()` instead to make\nuse of caching.\n\n### `DateFormatSet(name, formats)`\n\nA collection of `DateFormat` objects that can be parsed successively until a\nfirst match is found. The `format()` method will use the first format in the\nset.\n\n### `root_option_set`\n\nA global `FormatOptionSet`.\n\n### `register_format_option()`\n\nAdd a new format option to the `root_option_set`. This is the same as calling\n`root_option_set.add()`.\n\n### `parse_date(string, fmt)`\n\nParses the date *string* using the specified *fmt* into a `datetime.datetime`\nobject.\n\n### `format_date(date, fmt)`\n\nFormats the *date* using the specified *fmt* into a string.\n\n### `create_format_set(name, formats)`\n\nCreates a new `DateFormatSet` with the specified *formats*.\n\n### `ISO_8601`\n\n### `JAVA_OFFSET_DATETIME`\n\n## Benchmarks\n\nTODO\n\n## Future\n\n* Vendor `dateutil.tz` module?\n\n## Changelog\n\n### v1.1.0 (2019-04-16)\n\n* Fix microsecond (`%f`) formatting\n* Fix parsing of timezone offset with colon (`%z`)\n* Use `pkgutil` instead of `pkg_resources` namespace packages\n\n### v1.0.0 (2019-04-06)\n\n* Initial release", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.niklasrosenstein.com/NiklasRosenstein/nr-python-libs", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nr.parsing.date", "package_url": "https://pypi.org/project/nr.parsing.date/", "platform": "", "project_url": "https://pypi.org/project/nr.parsing.date/", "project_urls": {"Homepage": "https://git.niklasrosenstein.com/NiklasRosenstein/nr-python-libs"}, "release_url": "https://pypi.org/project/nr.parsing.date/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "A simple and fast date parsing library. Uses dateutil for timezone offset support.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nr.parsing.date</h1>\n<p>This package provides a fast parser for fixed format date strings with\nsupport for timezone offsets. The goal of this package is to</p>\n<ol>\n<li>bring support for timezone offsets to Python 2.7</li>\n<li>be faster than <code>dateutil.parser.parse()</code></li>\n</ol>\n<p>You can control the regex backend with the <code>PYTHON_NR_DATE_REGEX_BACKEND</code>\nenvironment variable. The default is <code>re</code>. You can use this variable to\nmake it use the <code>regex</code> module instead.</p>\n<p>Currently supported format options are:</p>\n<ul>\n<li><code>%Y</code> \u2013 4 digit year</li>\n<li><code>%m</code> \u2013 2 digit month</li>\n<li><code>%d</code> \u2013 2 digit day</li>\n<li><code>%H</code> \u2013 2 digit hour</li>\n<li><code>%M</code> \u2013 2 digit minute</li>\n<li><code>%S</code> \u2013 2 digit second</li>\n<li><code>%f</code> \u2013 arbitrary precision milliseconds</li>\n<li><code>%z</code> \u2013 timezone offset (<code>[+-]\\d\\d:?\\d\\d</code> offset or <code>Z</code> for UTC)</li>\n</ul>\n<p>The date formats are extensible by using the <code>register_format_option()</code>\nfunction or creating a new <code>FormatOptionSet</code>.</p>\n<h2>API</h2>\n<h3><code>BaseFormatOption()</code></h3>\n<p>Base class for format options.</p>\n<h3><code>FormatOption(char, dest, regex, parser, render)</code></h3>\n<p>Useful class for creating a new format options.</p>\n<h3><code>TimezoneFormatOption()</code></h3>\n<p>Special format option implementation for matching timezone offset.</p>\n<h3><code>FormatOptionSet()</code></h3>\n<p>Represents a set of <code>BaseFormatOption</code> objects. Use the <code>create_date_format()</code>\nmethod to create a <code>DateFormat</code> object from this set and a format string.</p>\n<h3><code>DateFormat(string, option_set=None)</code></h3>\n<p>Creates a new parser and formatter for dates from a template string. It is\nrecommendable to use <code>FormatOptionSet.create_date_format()</code> instead to make\nuse of caching.</p>\n<h3><code>DateFormatSet(name, formats)</code></h3>\n<p>A collection of <code>DateFormat</code> objects that can be parsed successively until a\nfirst match is found. The <code>format()</code> method will use the first format in the\nset.</p>\n<h3><code>root_option_set</code></h3>\n<p>A global <code>FormatOptionSet</code>.</p>\n<h3><code>register_format_option()</code></h3>\n<p>Add a new format option to the <code>root_option_set</code>. This is the same as calling\n<code>root_option_set.add()</code>.</p>\n<h3><code>parse_date(string, fmt)</code></h3>\n<p>Parses the date <em>string</em> using the specified <em>fmt</em> into a <code>datetime.datetime</code>\nobject.</p>\n<h3><code>format_date(date, fmt)</code></h3>\n<p>Formats the <em>date</em> using the specified <em>fmt</em> into a string.</p>\n<h3><code>create_format_set(name, formats)</code></h3>\n<p>Creates a new <code>DateFormatSet</code> with the specified <em>formats</em>.</p>\n<h3><code>ISO_8601</code></h3>\n<h3><code>JAVA_OFFSET_DATETIME</code></h3>\n<h2>Benchmarks</h2>\n<p>TODO</p>\n<h2>Future</h2>\n<ul>\n<li>Vendor <code>dateutil.tz</code> module?</li>\n</ul>\n<h2>Changelog</h2>\n<h3>v1.1.0 (2019-04-16)</h3>\n<ul>\n<li>Fix microsecond (<code>%f</code>) formatting</li>\n<li>Fix parsing of timezone offset with colon (<code>%z</code>)</li>\n<li>Use <code>pkgutil</code> instead of <code>pkg_resources</code> namespace packages</li>\n</ul>\n<h3>v1.0.0 (2019-04-06)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n\n          </div>"}, "last_serial": 6844299, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5f9b3ea7d7119ea14e41c18764ec699a", "sha256": "5933d37b41bae9fa73cb9dd28d3b36385c83b3b655ddab38eeb7231f8dc5bb7a"}, "downloads": -1, "filename": "nr.parsing.date-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5f9b3ea7d7119ea14e41c18764ec699a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6026, "upload_time": "2020-02-24T22:09:24", "upload_time_iso_8601": "2020-02-24T22:09:24.429355Z", "url": "https://files.pythonhosted.org/packages/3a/a3/f50097fa3c2c480ee801c7fcd0d7e18ebee5fd96f032734277164742eab5/nr.parsing.date-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "7a85c9f80a2e53edbb9f2e66e5cb3d8d", "sha256": "eeb1be732c3ae4ae136350dc08f329b3b5ceea986128cddfe6d1b20a2fb3980c"}, "downloads": -1, "filename": "nr.parsing.date-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7a85c9f80a2e53edbb9f2e66e5cb3d8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8034, "upload_time": "2020-03-19T16:39:48", "upload_time_iso_8601": "2020-03-19T16:39:48.838781Z", "url": "https://files.pythonhosted.org/packages/f9/7a/da6a2acd973d4f559f04d0782f6d76985adcc2533683d5088fabe7827b06/nr.parsing.date-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7a85c9f80a2e53edbb9f2e66e5cb3d8d", "sha256": "eeb1be732c3ae4ae136350dc08f329b3b5ceea986128cddfe6d1b20a2fb3980c"}, "downloads": -1, "filename": "nr.parsing.date-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7a85c9f80a2e53edbb9f2e66e5cb3d8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8034, "upload_time": "2020-03-19T16:39:48", "upload_time_iso_8601": "2020-03-19T16:39:48.838781Z", "url": "https://files.pythonhosted.org/packages/f9/7a/da6a2acd973d4f559f04d0782f6d76985adcc2533683d5088fabe7827b06/nr.parsing.date-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:27 2020"}