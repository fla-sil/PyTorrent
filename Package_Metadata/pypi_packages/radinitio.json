{"info": {"author": "Angel G. Rivera-Colon <angelgr2@illinois.edu>, Nicolas Rochette <rochette@illinois.edu>, Julian Catchen <jcatchen@illinois.edu>", "author_email": "angelgr2@illinois.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# RADinitio\n\n**RADinitio** is a pipeline for the assessment of RADseq experiments via prospective and retrospective data simulation. Sequencing data is generated *de novo* for multiple individuals via a coalescent simulation under a user-defined demographic model using **msprime**. The genetic variants in each sample are simulated in a genomic context that can impact downstream generation of RAD loci and sequencing reads. The per-individual sequences then treated to an *in silico* RADseq library preparation. The components of the library are defined by the user, allowing for the exploration of parameters including restriction enzyme selection, insert size, sequencing coverage, and PCR duplicate distribution. **RADinitio** simulations can also be applied retrospectively by comparing and modelling sources of error in empirical datasets. The purpose of **RADinitio** is for researchers to fully explore possible variables in their data generation process to ensure that their protocol selection and library preparation is performed optimally, within the limitations of technical and experimental error.\n\n## Installation\n\n**RADinitio** can be installed from the Python Package Index (PyPI) using:\n\n```sh\npython3 -m pip install radinitio\n```\n\nMore information regarding this installation can be obtained at the **RADinitio** [PyPI Project page](https://pypi.org/project/radinitio/ \"PyPI Project page\").\n\nUsers can install **RADinitio** in their local Python directories using the `--user` flag:\n\n```sh\npython3 -m pip install radinitio --user\n```\n\nAlternatively, the software can be downloaded from the [Catchen Lab](http://catchenlab.life.illinois.edu/radinitio/ \"Catchen Lab\") website and installed using the following commands:\n\n```sh\npython3 -m pip install radinitio-version.tar.gz\n```\n\nOr for a local installation:\n\n```sh\npython3 -m pip install radinitio-version.tar.gz --user\n```\n\nFor more information regarding the `pip` installation, please visit the [pip user-guide](https://pip.pypa.io/en/stable/user_guide/ \"pip user-guide\").\n\nRunning the `pip` installation, from both PyPI or the the direct installation will take care of all dependencies, including **msprime** ([Kelleher, et al. 2016](http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004842/ \"Kelleher, et al. 2016\")), **scipy**, **numpy**.\n\n## Pipeline structure\n\n**RADinitio** is designed as a series of independent functions that simulate different aspects of the RADseq library preparation process. The pipeline can be broken down into three main steps:\n\n### Variant generation and processing\n\nVariants are generated with **msprime** from an user-defined demographic. Independent simulations are run for different chromosomes present in an user-provided reference genome. The simulated variants are then projected against the reference genome to obtain the reference alleles, which are then converted into alternative alleles using an user-defined model.\n\n### Extraction of RAD alleles\n\nThe reference genome is *in silico* digested to obtain a series of refence RAD loci. This can be done using a single or double enzyme digestion. The positions of the refernce loci in the genome then used to filter the simulated variants for all samples to include only variants present in RAD loci, improving downstream performance. For each sample, we extract the RAD alleles-the reference RAD loci are modified to include the corresponding genetic variants for each sample. This process can alter a cutsite's sequence, resulting in a dropped allele for that sample.\n\n### Simulate library enrichment and sequencing\n\nOnce extracted, the alleles for each sample are randomly sampled to obtain paired-end sequences for each allele template. The alleles are sampled with replacement, proportional to the desired sequencing coverage of the library. Each iteration of the sampling is treated as an independent sequence template that is truncated to a random lenth sampled from a simulated insert size distribution. A PCR duplicate distribution, generated from an user defined model, can be applied to the sampling process, resulting in the duplicate sampling of unique template sequences. This process can also introduce random error to the sequence, simulating the generation of PCR errors. Finally, paired end sequence are generated from the each of each template, each with its own unique sequencing error.\n\nThe corresponding functions for each stage can be run independently. We do provide a wrapper script, `radinitio`, that calls the top-level `radinitio.simulate()` function which runs the pipeline from start to finish. Advanced users can run the pipeline through the Python API, which allows for the generation of more complex demographic models, define finer details of the library preparation process, and running componments of the pipeline independently.\n\n## Command line interface\n\nThe simplest way to run **RADinitio** is to execute the module via the `radinitio` command line\nwrapper, which then calls the top-level `radinitio.simulate()` function, which runs all the stages of the\npipeline.\n\n### Usage & options\n\nThe program options are the following:\n\n```sh\nradinitio --genome path --chromosomes path --out-dir dir [pipeline-stage] [(demographic model options)] [(library options)]\n```\n\n#### Pipeline stages (these options are mutually exclusive):\n\n`--simulate-all` : Run all the **RADinitio** stages (simulate a population, make a library, and sequence) (Default)\n\n`--make-population` : Simulate and process variants. Produces genome-wide VCF.\n\n`--make-library-seq` : Simulate and sequence a RAD library. Requires exising `make-population` run.\n\n`--tally-rad-loci` : Calculate the number of kept RAD loci in the genome.\n\n#### Input/Output files\n\n`-g`, `--genome` : Path to reference genome (fasta file, may be gzipped). **Required**\n\n`-l`, `--chromosomes` : File containing the list of chromosomes (one per line) to simulate. **Required**\n\n`-o`, `--out-dir` : Path to an output directory where all files will be written. **Required**\n\n#### Demographic model (simple island model)\n\n`-p`, `--n-pops`: (*int*) Number of populations (demes) in the island model. (default = 2)\n\n`-n`, `--pop-eff-size` : (*float*) Effective population size of each simulated deme. (default = 5000)\n\n`-s`, `--n-seq-indv` : (*int*) Number of individuals sampled from each population. (default = 10)\n\n#### Library preparation/sequencing\n\n`-b`, `--library-type` : Library type (sdRAD or ddRAD). (default = 'sdRAD')\n\n`-e`, `--enz` : Restriction enzyme (SbfI, PstI, EcoRI, BamHI, etc.). (default = 'SbfI')\n\n`-d`, `--enz2` : Second restriction enzyme for double digest (MspI, MseI, AluI, etc.). (default = 'MspI')\n\n`-m`, `--insert-mean` : (*int*) Insert size mean in bp. (default = 350)\n\n`-t`, `--insert-stdev` : (*int*) Insert size standard deviation in bp. (default = 37)\n\n`-c`, `--pcr-cycles` : (*int*) Number of PCR cycles. (default = 0)\n\n`-v`, `--coverage` : (*int*) Sequencing coverage. (default = 20)\n\n`r`, `--read-length` : (*int*) Sequence read length. (default = 150)\n\n#### make-library-seq()-specific options:\n\n`--make-pop-sim-dir` : Directory containing a previous `radinitio.make_population` run. Cannot be the same as `out-dir`.\n\n#### Additional options\n\n`-V,` `--version` : Print program version.\n\n`-h`, `--help` : Display this help message.\n\n### Examples\n\n```sh\n# Simulating a sdRAD library (whole pipeline):\nradinitio --simulate-all \\\n    --genome ./genome/reference.fa.gz \\\n    --chromosomes ./genome/chrom.list \\\n    --out-dir ./simulations_sdRAD/ \\\n    --n-pops 4 --pop-eff-size 2500 --n-seq-indv 10 \\\n    --library-type sdRAD --enz SbfI --insert-mean 350 --insert-stdev 35 \\\n    --pcr-cycles 9 --coverage 20 --read-length 150\n\n# Simulating a ddRAD library (whole pipeline):\nradinitio --simulate-all \\\n    --genome ./genome/reference.fa.gz \\\n    --chromosomes ./genome/chrom.list \\\n    --out-dir ./simulations_ddRAD/ \\\n    --n-pops 4 --pop-eff-size 2500 --n-seq-indv 10 \\\n    --library-type ddRAD --enz PstI --enz2 MspI \\\n    --insert-mean 350 --insert-stdev 35 \\\n    --pcr-cycles 9 --coverage 20 --read-length 150\n\n# Make a tally of sdRAD loci\nradinitio --tally-rad-loci \\\n    --genome ./genome/reference.fa.gz \\\n    --chromosomes ./genome/chrom.list \\\n    --out-dir ./count_rad_loci/ \\\n    --library-type sdRAD --enz SbfI\n\n# Make a tally of ddRAD loci\nradinitio --tally-rad-loci \\\n    --genome ./genome/reference.fa.gz \\\n    --chromosomes ./genome/chrom.list \\\n    --out-dir ./count_ddrad_loci/ \\\n    --library-type ddRAD --enz NlaIII --enz2 MluCI \\\n    --insert-mean 320 --insert-stdev 25\n\n# Simulate a population only\nradinitio --make-population \\\n    --genome ./genome/reference.fa.gz \\\n    --chromosomes ./genome/chrom.list \\\n    --out-dir ./simulated_population/ \\\n    --n-pops 4 --pop-eff-size 2500 --n-seq-indv 10\n\n# Simulate library and sequencing\n# Use population from previous simulation\nradinitio --make-library-seq \\\n    --genome ./genome/reference.fa.gz \\\n    --chromosomes ./genome/chrom.list \\\n    --out-dir ./SbfI_library/ \\\n    --make-pop-sim-dir ./simulated_population/ \\\n    --library-type sdRAD --enz SbfI \\\n    --insert-mean 350 --insert-stdev 35 \\\n    --pcr-cycles 9 --coverage 20 --read-length 150\n```\n\n### Explanation of options\n\nDifferent pipeline stages of **RADinitio** can be run independently:\n\n* `--simulate-all` runs all the **RADinitio** stages. Start with a reference genome and specify chromosomes, simulate a population, prepare a library and sequence. This is the default in the wrapper.\n\n* `--make-population` just generates a genome-wide VCF with the variants for a simulated population. A single simulated population can be later sequencing using different library parameters.\n\n* `--make-library-seq` simulates library preparatation and sequencing, resulting in paired-end reads for the simulated inidivuals. It requires a population of individuals, likely the output of a previous `make-population` run.\n\n* `--tally-rad-loci` for a given library configuration - library type and enzyme(s) - calculate the number of RAD loci in the genome.\n\n`reference.fa.gz` is a genome fasta file. **RADinitio** can simulate using both compressed and uncompressed fasta files.\n\nThe `--out-dir` is the output directory for the simulations. Inside it series of subdirectories and files will be generated (described bellow).\n\n`chrom.list` is contains a list with all the chromosome ids to simulate. Only the chromosomes on the list will be used as input for the simulations. This is important when working with highly fragmented assemblies or those with many small unplaced scaffolds. The structure of `chrom.list` is the following:\n\n```sh\nchromosome_1\nchromosome_2\nchromosome_3\n...\n```\n\n`--n-pops`, `--n-seq-indv`, and `--pop-eff-size` contains the parameters of a simple **msprime** island demographic model. In this example, we are simulating 4 populations with an effective population size of 2,500 individuals each, from which we sample 10 individuals each. More complex demographic parameters can be generated using additional **RADinitio** functions. For more information regarding the demographic model parameters, please check the [**msprime** documentation](https://msprime.readthedocs.io/en/stable/ \"msprime documentation\").\n\nFor the *sdRAD* example above (`--library-type sdRAD`), `--enz` is the main restriction enzyme used for generating a single-digest RADseq library, as described by the protocols by [Baird, et al. 2008](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0003376 \"Baird, et al. 2008\") and [Etter, et al. 2011](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0018561 \"Etter, et al. 2011\"). In this example, the restriction enzyme *SbfI* is used, but other enzymes such as *EcoRI*, *PstI*, *BamHI*, among others, are available. The simulated library will have a mean insert size (`--insert-mean`) of 350bp, with a standard deviation (`--insert-stdev`) of +-35bp, and 2x150bp paired end reads (`--read-length`).\n\nThe *ddRAD* example (`--library-type ddRAD`) uses a double restriction enzyme combination, as described in the protocol by [Peterson, et al. 2012](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0037135 \"Peterson, et al. 2012\"), where `--enz` is the rare (main) cutter, *PstI* in this case, and `--enz2` is the common (or double) cutter enzyme (*MspI*). The simulated library will have a mean insert size (`--insert-mean`) of 350bp, with a standard deviation (`--insert-stdev`) of 35bp. This size distribution will create a range of insert sizes between 280bp and 420bp (insert mean +- 2 x insert st.deviation). The simulation will produce 2x150bp paired end reads (`--read-length`).\n\n`--pcr-cycles` defines a RAD library enriched using 9 cycles of PCR. The library has a 2:1 template molecules to sequenced reads ratio. More complex PCR parameters can be generated using additional **RADinitio** functions.\n\n`--coverage` defines the per-locus sequencing depth of the library, in this case 20X.\n\n`--make-pop-sim-dir` is the directory containing a previous `radinitio.make_population` simulation. This option is only used in `radinitio.make_library_seq` and defines the population sampled to simulate library preparation and sequencing. It **cannot** be the same as the output directory for the run.\n\n## RADinitio manual\n\nA complete version of the **RADinitio** manual including instructions for installation, documentation of command line variables, description of output files, and a tutorial to run the pipeline can be found at the [**RADinitio** website](http://catchenlab.life.illinois.edu/radinitio/ \"RADinitio website\").\n\n## Authors\n\nAngel G. Rivera-Colon <angelgr2@illinois.edu>\n\nNicolas Rochette <rochette@illinois.edu>\n\nJulian Catchen <jcatchen@illinois.edu>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://catchenlab.life.illinois.edu/radinitio", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "radinitio", "package_url": "https://pypi.org/project/radinitio/", "platform": "", "project_url": "https://pypi.org/project/radinitio/", "project_urls": {"Homepage": "http://catchenlab.life.illinois.edu/radinitio", "Manual": "http://catchenlab.life.illinois.edu/radinitio/manual/", "Source": "https://bitbucket.org/angelgr2/radinitio/src/default/"}, "release_url": "https://pypi.org/project/radinitio/1.1.1/", "requires_dist": ["scipy", "numpy", "msprime"], "requires_python": ">3.5", "summary": "A package for the simulation of RADseq data.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RADinitio</h1>\n<p><strong>RADinitio</strong> is a pipeline for the assessment of RADseq experiments via prospective and retrospective data simulation. Sequencing data is generated <em>de novo</em> for multiple individuals via a coalescent simulation under a user-defined demographic model using <strong>msprime</strong>. The genetic variants in each sample are simulated in a genomic context that can impact downstream generation of RAD loci and sequencing reads. The per-individual sequences then treated to an <em>in silico</em> RADseq library preparation. The components of the library are defined by the user, allowing for the exploration of parameters including restriction enzyme selection, insert size, sequencing coverage, and PCR duplicate distribution. <strong>RADinitio</strong> simulations can also be applied retrospectively by comparing and modelling sources of error in empirical datasets. The purpose of <strong>RADinitio</strong> is for researchers to fully explore possible variables in their data generation process to ensure that their protocol selection and library preparation is performed optimally, within the limitations of technical and experimental error.</p>\n<h2>Installation</h2>\n<p><strong>RADinitio</strong> can be installed from the Python Package Index (PyPI) using:</p>\n<pre>python3 -m pip install radinitio\n</pre>\n<p>More information regarding this installation can be obtained at the <strong>RADinitio</strong> <a href=\"https://pypi.org/project/radinitio/\" rel=\"nofollow\" title=\"PyPI Project page\">PyPI Project page</a>.</p>\n<p>Users can install <strong>RADinitio</strong> in their local Python directories using the <code>--user</code> flag:</p>\n<pre>python3 -m pip install radinitio --user\n</pre>\n<p>Alternatively, the software can be downloaded from the <a href=\"http://catchenlab.life.illinois.edu/radinitio/\" rel=\"nofollow\" title=\"Catchen Lab\">Catchen Lab</a> website and installed using the following commands:</p>\n<pre>python3 -m pip install radinitio-version.tar.gz\n</pre>\n<p>Or for a local installation:</p>\n<pre>python3 -m pip install radinitio-version.tar.gz --user\n</pre>\n<p>For more information regarding the <code>pip</code> installation, please visit the <a href=\"https://pip.pypa.io/en/stable/user_guide/\" rel=\"nofollow\" title=\"pip user-guide\">pip user-guide</a>.</p>\n<p>Running the <code>pip</code> installation, from both PyPI or the the direct installation will take care of all dependencies, including <strong>msprime</strong> (<a href=\"http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004842/\" rel=\"nofollow\" title=\"Kelleher, et al. 2016\">Kelleher, et al. 2016</a>), <strong>scipy</strong>, <strong>numpy</strong>.</p>\n<h2>Pipeline structure</h2>\n<p><strong>RADinitio</strong> is designed as a series of independent functions that simulate different aspects of the RADseq library preparation process. The pipeline can be broken down into three main steps:</p>\n<h3>Variant generation and processing</h3>\n<p>Variants are generated with <strong>msprime</strong> from an user-defined demographic. Independent simulations are run for different chromosomes present in an user-provided reference genome. The simulated variants are then projected against the reference genome to obtain the reference alleles, which are then converted into alternative alleles using an user-defined model.</p>\n<h3>Extraction of RAD alleles</h3>\n<p>The reference genome is <em>in silico</em> digested to obtain a series of refence RAD loci. This can be done using a single or double enzyme digestion. The positions of the refernce loci in the genome then used to filter the simulated variants for all samples to include only variants present in RAD loci, improving downstream performance. For each sample, we extract the RAD alleles-the reference RAD loci are modified to include the corresponding genetic variants for each sample. This process can alter a cutsite's sequence, resulting in a dropped allele for that sample.</p>\n<h3>Simulate library enrichment and sequencing</h3>\n<p>Once extracted, the alleles for each sample are randomly sampled to obtain paired-end sequences for each allele template. The alleles are sampled with replacement, proportional to the desired sequencing coverage of the library. Each iteration of the sampling is treated as an independent sequence template that is truncated to a random lenth sampled from a simulated insert size distribution. A PCR duplicate distribution, generated from an user defined model, can be applied to the sampling process, resulting in the duplicate sampling of unique template sequences. This process can also introduce random error to the sequence, simulating the generation of PCR errors. Finally, paired end sequence are generated from the each of each template, each with its own unique sequencing error.</p>\n<p>The corresponding functions for each stage can be run independently. We do provide a wrapper script, <code>radinitio</code>, that calls the top-level <code>radinitio.simulate()</code> function which runs the pipeline from start to finish. Advanced users can run the pipeline through the Python API, which allows for the generation of more complex demographic models, define finer details of the library preparation process, and running componments of the pipeline independently.</p>\n<h2>Command line interface</h2>\n<p>The simplest way to run <strong>RADinitio</strong> is to execute the module via the <code>radinitio</code> command line\nwrapper, which then calls the top-level <code>radinitio.simulate()</code> function, which runs all the stages of the\npipeline.</p>\n<h3>Usage &amp; options</h3>\n<p>The program options are the following:</p>\n<pre>radinitio --genome path --chromosomes path --out-dir dir <span class=\"o\">[</span>pipeline-stage<span class=\"o\">]</span> <span class=\"o\">[(</span>demographic model options<span class=\"o\">)]</span> <span class=\"o\">[(</span>library options<span class=\"o\">)]</span>\n</pre>\n<h4>Pipeline stages (these options are mutually exclusive):</h4>\n<p><code>--simulate-all</code> : Run all the <strong>RADinitio</strong> stages (simulate a population, make a library, and sequence) (Default)</p>\n<p><code>--make-population</code> : Simulate and process variants. Produces genome-wide VCF.</p>\n<p><code>--make-library-seq</code> : Simulate and sequence a RAD library. Requires exising <code>make-population</code> run.</p>\n<p><code>--tally-rad-loci</code> : Calculate the number of kept RAD loci in the genome.</p>\n<h4>Input/Output files</h4>\n<p><code>-g</code>, <code>--genome</code> : Path to reference genome (fasta file, may be gzipped). <strong>Required</strong></p>\n<p><code>-l</code>, <code>--chromosomes</code> : File containing the list of chromosomes (one per line) to simulate. <strong>Required</strong></p>\n<p><code>-o</code>, <code>--out-dir</code> : Path to an output directory where all files will be written. <strong>Required</strong></p>\n<h4>Demographic model (simple island model)</h4>\n<p><code>-p</code>, <code>--n-pops</code>: (<em>int</em>) Number of populations (demes) in the island model. (default = 2)</p>\n<p><code>-n</code>, <code>--pop-eff-size</code> : (<em>float</em>) Effective population size of each simulated deme. (default = 5000)</p>\n<p><code>-s</code>, <code>--n-seq-indv</code> : (<em>int</em>) Number of individuals sampled from each population. (default = 10)</p>\n<h4>Library preparation/sequencing</h4>\n<p><code>-b</code>, <code>--library-type</code> : Library type (sdRAD or ddRAD). (default = 'sdRAD')</p>\n<p><code>-e</code>, <code>--enz</code> : Restriction enzyme (SbfI, PstI, EcoRI, BamHI, etc.). (default = 'SbfI')</p>\n<p><code>-d</code>, <code>--enz2</code> : Second restriction enzyme for double digest (MspI, MseI, AluI, etc.). (default = 'MspI')</p>\n<p><code>-m</code>, <code>--insert-mean</code> : (<em>int</em>) Insert size mean in bp. (default = 350)</p>\n<p><code>-t</code>, <code>--insert-stdev</code> : (<em>int</em>) Insert size standard deviation in bp. (default = 37)</p>\n<p><code>-c</code>, <code>--pcr-cycles</code> : (<em>int</em>) Number of PCR cycles. (default = 0)</p>\n<p><code>-v</code>, <code>--coverage</code> : (<em>int</em>) Sequencing coverage. (default = 20)</p>\n<p><code>r</code>, <code>--read-length</code> : (<em>int</em>) Sequence read length. (default = 150)</p>\n<h4>make-library-seq()-specific options:</h4>\n<p><code>--make-pop-sim-dir</code> : Directory containing a previous <code>radinitio.make_population</code> run. Cannot be the same as <code>out-dir</code>.</p>\n<h4>Additional options</h4>\n<p><code>-V,</code> <code>--version</code> : Print program version.</p>\n<p><code>-h</code>, <code>--help</code> : Display this help message.</p>\n<h3>Examples</h3>\n<pre><span class=\"c1\"># Simulating a sdRAD library (whole pipeline):</span>\nradinitio --simulate-all <span class=\"se\">\\</span>\n    --genome ./genome/reference.fa.gz <span class=\"se\">\\</span>\n    --chromosomes ./genome/chrom.list <span class=\"se\">\\</span>\n    --out-dir ./simulations_sdRAD/ <span class=\"se\">\\</span>\n    --n-pops <span class=\"m\">4</span> --pop-eff-size <span class=\"m\">2500</span> --n-seq-indv <span class=\"m\">10</span> <span class=\"se\">\\</span>\n    --library-type sdRAD --enz SbfI --insert-mean <span class=\"m\">350</span> --insert-stdev <span class=\"m\">35</span> <span class=\"se\">\\</span>\n    --pcr-cycles <span class=\"m\">9</span> --coverage <span class=\"m\">20</span> --read-length <span class=\"m\">150</span>\n\n<span class=\"c1\"># Simulating a ddRAD library (whole pipeline):</span>\nradinitio --simulate-all <span class=\"se\">\\</span>\n    --genome ./genome/reference.fa.gz <span class=\"se\">\\</span>\n    --chromosomes ./genome/chrom.list <span class=\"se\">\\</span>\n    --out-dir ./simulations_ddRAD/ <span class=\"se\">\\</span>\n    --n-pops <span class=\"m\">4</span> --pop-eff-size <span class=\"m\">2500</span> --n-seq-indv <span class=\"m\">10</span> <span class=\"se\">\\</span>\n    --library-type ddRAD --enz PstI --enz2 MspI <span class=\"se\">\\</span>\n    --insert-mean <span class=\"m\">350</span> --insert-stdev <span class=\"m\">35</span> <span class=\"se\">\\</span>\n    --pcr-cycles <span class=\"m\">9</span> --coverage <span class=\"m\">20</span> --read-length <span class=\"m\">150</span>\n\n<span class=\"c1\"># Make a tally of sdRAD loci</span>\nradinitio --tally-rad-loci <span class=\"se\">\\</span>\n    --genome ./genome/reference.fa.gz <span class=\"se\">\\</span>\n    --chromosomes ./genome/chrom.list <span class=\"se\">\\</span>\n    --out-dir ./count_rad_loci/ <span class=\"se\">\\</span>\n    --library-type sdRAD --enz SbfI\n\n<span class=\"c1\"># Make a tally of ddRAD loci</span>\nradinitio --tally-rad-loci <span class=\"se\">\\</span>\n    --genome ./genome/reference.fa.gz <span class=\"se\">\\</span>\n    --chromosomes ./genome/chrom.list <span class=\"se\">\\</span>\n    --out-dir ./count_ddrad_loci/ <span class=\"se\">\\</span>\n    --library-type ddRAD --enz NlaIII --enz2 MluCI <span class=\"se\">\\</span>\n    --insert-mean <span class=\"m\">320</span> --insert-stdev <span class=\"m\">25</span>\n\n<span class=\"c1\"># Simulate a population only</span>\nradinitio --make-population <span class=\"se\">\\</span>\n    --genome ./genome/reference.fa.gz <span class=\"se\">\\</span>\n    --chromosomes ./genome/chrom.list <span class=\"se\">\\</span>\n    --out-dir ./simulated_population/ <span class=\"se\">\\</span>\n    --n-pops <span class=\"m\">4</span> --pop-eff-size <span class=\"m\">2500</span> --n-seq-indv <span class=\"m\">10</span>\n\n<span class=\"c1\"># Simulate library and sequencing</span>\n<span class=\"c1\"># Use population from previous simulation</span>\nradinitio --make-library-seq <span class=\"se\">\\</span>\n    --genome ./genome/reference.fa.gz <span class=\"se\">\\</span>\n    --chromosomes ./genome/chrom.list <span class=\"se\">\\</span>\n    --out-dir ./SbfI_library/ <span class=\"se\">\\</span>\n    --make-pop-sim-dir ./simulated_population/ <span class=\"se\">\\</span>\n    --library-type sdRAD --enz SbfI <span class=\"se\">\\</span>\n    --insert-mean <span class=\"m\">350</span> --insert-stdev <span class=\"m\">35</span> <span class=\"se\">\\</span>\n    --pcr-cycles <span class=\"m\">9</span> --coverage <span class=\"m\">20</span> --read-length <span class=\"m\">150</span>\n</pre>\n<h3>Explanation of options</h3>\n<p>Different pipeline stages of <strong>RADinitio</strong> can be run independently:</p>\n<ul>\n<li>\n<p><code>--simulate-all</code> runs all the <strong>RADinitio</strong> stages. Start with a reference genome and specify chromosomes, simulate a population, prepare a library and sequence. This is the default in the wrapper.</p>\n</li>\n<li>\n<p><code>--make-population</code> just generates a genome-wide VCF with the variants for a simulated population. A single simulated population can be later sequencing using different library parameters.</p>\n</li>\n<li>\n<p><code>--make-library-seq</code> simulates library preparatation and sequencing, resulting in paired-end reads for the simulated inidivuals. It requires a population of individuals, likely the output of a previous <code>make-population</code> run.</p>\n</li>\n<li>\n<p><code>--tally-rad-loci</code> for a given library configuration - library type and enzyme(s) - calculate the number of RAD loci in the genome.</p>\n</li>\n</ul>\n<p><code>reference.fa.gz</code> is a genome fasta file. <strong>RADinitio</strong> can simulate using both compressed and uncompressed fasta files.</p>\n<p>The <code>--out-dir</code> is the output directory for the simulations. Inside it series of subdirectories and files will be generated (described bellow).</p>\n<p><code>chrom.list</code> is contains a list with all the chromosome ids to simulate. Only the chromosomes on the list will be used as input for the simulations. This is important when working with highly fragmented assemblies or those with many small unplaced scaffolds. The structure of <code>chrom.list</code> is the following:</p>\n<pre>chromosome_1\nchromosome_2\nchromosome_3\n...\n</pre>\n<p><code>--n-pops</code>, <code>--n-seq-indv</code>, and <code>--pop-eff-size</code> contains the parameters of a simple <strong>msprime</strong> island demographic model. In this example, we are simulating 4 populations with an effective population size of 2,500 individuals each, from which we sample 10 individuals each. More complex demographic parameters can be generated using additional <strong>RADinitio</strong> functions. For more information regarding the demographic model parameters, please check the <a href=\"https://msprime.readthedocs.io/en/stable/\" rel=\"nofollow\" title=\"msprime documentation\"><strong>msprime</strong> documentation</a>.</p>\n<p>For the <em>sdRAD</em> example above (<code>--library-type sdRAD</code>), <code>--enz</code> is the main restriction enzyme used for generating a single-digest RADseq library, as described by the protocols by <a href=\"https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0003376\" rel=\"nofollow\" title=\"Baird, et al. 2008\">Baird, et al. 2008</a> and <a href=\"https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0018561\" rel=\"nofollow\" title=\"Etter, et al. 2011\">Etter, et al. 2011</a>. In this example, the restriction enzyme <em>SbfI</em> is used, but other enzymes such as <em>EcoRI</em>, <em>PstI</em>, <em>BamHI</em>, among others, are available. The simulated library will have a mean insert size (<code>--insert-mean</code>) of 350bp, with a standard deviation (<code>--insert-stdev</code>) of +-35bp, and 2x150bp paired end reads (<code>--read-length</code>).</p>\n<p>The <em>ddRAD</em> example (<code>--library-type ddRAD</code>) uses a double restriction enzyme combination, as described in the protocol by <a href=\"https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0037135\" rel=\"nofollow\" title=\"Peterson, et al. 2012\">Peterson, et al. 2012</a>, where <code>--enz</code> is the rare (main) cutter, <em>PstI</em> in this case, and <code>--enz2</code> is the common (or double) cutter enzyme (<em>MspI</em>). The simulated library will have a mean insert size (<code>--insert-mean</code>) of 350bp, with a standard deviation (<code>--insert-stdev</code>) of 35bp. This size distribution will create a range of insert sizes between 280bp and 420bp (insert mean +- 2 x insert st.deviation). The simulation will produce 2x150bp paired end reads (<code>--read-length</code>).</p>\n<p><code>--pcr-cycles</code> defines a RAD library enriched using 9 cycles of PCR. The library has a 2:1 template molecules to sequenced reads ratio. More complex PCR parameters can be generated using additional <strong>RADinitio</strong> functions.</p>\n<p><code>--coverage</code> defines the per-locus sequencing depth of the library, in this case 20X.</p>\n<p><code>--make-pop-sim-dir</code> is the directory containing a previous <code>radinitio.make_population</code> simulation. This option is only used in <code>radinitio.make_library_seq</code> and defines the population sampled to simulate library preparation and sequencing. It <strong>cannot</strong> be the same as the output directory for the run.</p>\n<h2>RADinitio manual</h2>\n<p>A complete version of the <strong>RADinitio</strong> manual including instructions for installation, documentation of command line variables, description of output files, and a tutorial to run the pipeline can be found at the <a href=\"http://catchenlab.life.illinois.edu/radinitio/\" rel=\"nofollow\" title=\"RADinitio website\"><strong>RADinitio</strong> website</a>.</p>\n<h2>Authors</h2>\n<p>Angel G. Rivera-Colon <a href=\"mailto:angelgr2@illinois.edu\">angelgr2@illinois.edu</a></p>\n<p>Nicolas Rochette <a href=\"mailto:rochette@illinois.edu\">rochette@illinois.edu</a></p>\n<p>Julian Catchen <a href=\"mailto:jcatchen@illinois.edu\">jcatchen@illinois.edu</a></p>\n\n          </div>"}, "last_serial": 5818428, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "87f7275728bad65c934690082bf3cd71", "sha256": "bf8976e9839ef7ad4495224418ba9a21e60656878bf306d8aa236d7cffca0a2e"}, "downloads": -1, "filename": "radinitio-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "87f7275728bad65c934690082bf3cd71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13964, "upload_time": "2018-12-07T19:31:40", "upload_time_iso_8601": "2018-12-07T19:31:40.753508Z", "url": "https://files.pythonhosted.org/packages/2d/01/026a58667e3311c77b777e1865c1a5648f99acab0fe632897ea93bbe86d8/radinitio-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad79b2baf47d871045a8b19ce49f660f", "sha256": "fa1d028d46e8b5a45a13a8613b83c0651584ef5d9606e67009605ebdd801a0c7"}, "downloads": -1, "filename": "radinitio-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ad79b2baf47d871045a8b19ce49f660f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1318, "upload_time": "2018-12-07T19:31:42", "upload_time_iso_8601": "2018-12-07T19:31:42.447434Z", "url": "https://files.pythonhosted.org/packages/a4/22/76c90d27c9fb17dfc8a54f379be49975aadb72ed96069705e7d3cfa6f2f4/radinitio-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "635f6c293c712f58df1ba3941c81c1eb", "sha256": "50924db225e2c83f8718d785dba2ea3239d311fbbb4d548f7457aa459fb1b106"}, "downloads": -1, "filename": "radinitio-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "635f6c293c712f58df1ba3941c81c1eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13990, "upload_time": "2018-12-07T21:12:57", "upload_time_iso_8601": "2018-12-07T21:12:57.697046Z", "url": "https://files.pythonhosted.org/packages/21/7f/5c6ba4ca6b2d081bb803dea3e1f4c38b33455bd3c2bc8d222c7cc48c6343/radinitio-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8bcc49f16adb1d0408de7bb89bdb993b", "sha256": "4298c0e25727f5f27913a2647212b887ed1c855dcbfc60c712f35314a81067a3"}, "downloads": -1, "filename": "radinitio-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8bcc49f16adb1d0408de7bb89bdb993b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1391, "upload_time": "2018-12-07T21:12:58", "upload_time_iso_8601": "2018-12-07T21:12:58.933352Z", "url": "https://files.pythonhosted.org/packages/ea/ac/87c7145103c13c9dba284b38a5353e51e8155782b28f035b8618af07604e/radinitio-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "0c39f2412b1b6816db8ce4fd4a9c8774", "sha256": "3f36f430b30d9d3fd5b5c4bb5a2cedd886002da6f159e1bc368cd1a7af4e7523"}, "downloads": -1, "filename": "radinitio-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0c39f2412b1b6816db8ce4fd4a9c8774", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14028, "upload_time": "2018-12-07T21:29:18", "upload_time_iso_8601": "2018-12-07T21:29:18.312862Z", "url": "https://files.pythonhosted.org/packages/f3/0e/6bfd83f7807b31afebaaa582bbf989aa9d96b33b51045b1123d4f48b6c6f/radinitio-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "713725ed90fcccd9d5f031594a8b4944", "sha256": "d13b8ed4215879ba06b48f8f9ef47a19b40a6327ea3557a0bb5af62a584a0901"}, "downloads": -1, "filename": "radinitio-0.0.3.tar.gz", "has_sig": false, "md5_digest": "713725ed90fcccd9d5f031594a8b4944", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1429, "upload_time": "2018-12-07T21:29:19", "upload_time_iso_8601": "2018-12-07T21:29:19.554715Z", "url": "https://files.pythonhosted.org/packages/75/ac/ebc46dd5b1f6e0e80ea18748685b40369d92248e09f90e7a8b043f7f8b6b/radinitio-0.0.3.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "07919e6db22c5b62bd1284701588ec3d", "sha256": "3a82be7cfa2d1dd547ce82e6e81efdc6488a6827e5a715fee61a94bb5015f660"}, "downloads": -1, "filename": "radinitio-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "07919e6db22c5b62bd1284701588ec3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36287, "upload_time": "2019-03-13T21:19:02", "upload_time_iso_8601": "2019-03-13T21:19:02.179438Z", "url": "https://files.pythonhosted.org/packages/55/a3/16d7b6db80b8c45bd110789b507f6a9b0ca5b1903dce802150951235a962/radinitio-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4db31917ad7c7f4c554d3a13719d846b", "sha256": "3627ad8b277e9fd0ee6bf121e63a371e507f47766cbc165cec697a90de4be8d8"}, "downloads": -1, "filename": "radinitio-0.9.0.tar.gz", "has_sig": false, "md5_digest": "4db31917ad7c7f4c554d3a13719d846b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29969, "upload_time": "2019-03-13T21:19:03", "upload_time_iso_8601": "2019-03-13T21:19:03.807855Z", "url": "https://files.pythonhosted.org/packages/50/ca/93988a927a7580c1645435fcbdd8665f55381bc7e4db30218e4d1fd2f8dc/radinitio-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "a39ad2c78abed96edb313c9024727f9b", "sha256": "608b2e16862c005b920fb457906f1e8d364ff18e4e216ea0001d8e7217b23726"}, "downloads": -1, "filename": "radinitio-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a39ad2c78abed96edb313c9024727f9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36845, "upload_time": "2019-03-14T01:23:22", "upload_time_iso_8601": "2019-03-14T01:23:22.824694Z", "url": "https://files.pythonhosted.org/packages/b3/00/f2baf3ffc656abe28edbe6f8b2632df470e4ad5db1711ccb03d3d31a5048/radinitio-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0537e32ea8bd8f31ea4441aa8251ef1", "sha256": "93eebd9373c6d0b25959585a824cc64cb864760f202c3e5932adcda0ef8cb14a"}, "downloads": -1, "filename": "radinitio-0.9.1.tar.gz", "has_sig": false, "md5_digest": "b0537e32ea8bd8f31ea4441aa8251ef1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30546, "upload_time": "2019-03-14T01:23:24", "upload_time_iso_8601": "2019-03-14T01:23:24.305769Z", "url": "https://files.pythonhosted.org/packages/15/be/797812a8c34c03f22ed8b7fe9bd17f353c7386edf10d0753e272be43e851/radinitio-0.9.1.tar.gz", "yanked": false}], "0.9.10": [{"comment_text": "", "digests": {"md5": "2e13f72137e1909bdcfe973b9d2c8c84", "sha256": "2a8ab55b553c2a4b5fda6682f430ae6b82d7d53d0f00f6a26d1d5696b4285ef6"}, "downloads": -1, "filename": "radinitio-0.9.10-py3-none-any.whl", "has_sig": false, "md5_digest": "2e13f72137e1909bdcfe973b9d2c8c84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44588, "upload_time": "2019-05-06T23:33:09", "upload_time_iso_8601": "2019-05-06T23:33:09.834127Z", "url": "https://files.pythonhosted.org/packages/ec/e2/dc776214cf471e36e775d31650bccf8e6ea3f1c382a6b72f0a19fdbb89ad/radinitio-0.9.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b98abba645548b13706a2adfec12dcf", "sha256": "88df10551609f2ba736eec149ad35857f519229e4cabf5edb0981310159dec84"}, "downloads": -1, "filename": "radinitio-0.9.10.tar.gz", "has_sig": false, "md5_digest": "3b98abba645548b13706a2adfec12dcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35293, "upload_time": "2019-05-06T23:33:11", "upload_time_iso_8601": "2019-05-06T23:33:11.323812Z", "url": "https://files.pythonhosted.org/packages/de/47/d3e00ffeae248e92dc6492a390ed701b56e06822d74752569eafbe5efd55/radinitio-0.9.10.tar.gz", "yanked": false}], "0.9.11": [{"comment_text": "", "digests": {"md5": "13ce43604c9bd4f8d17c4e6964cb9ae9", "sha256": "8aaf64e33f60232ab0a99bd4c664c73d211adac027fadb4863d9fb65ac3f8b5a"}, "downloads": -1, "filename": "radinitio-0.9.11-py3-none-any.whl", "has_sig": false, "md5_digest": "13ce43604c9bd4f8d17c4e6964cb9ae9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44472, "upload_time": "2019-05-08T18:45:10", "upload_time_iso_8601": "2019-05-08T18:45:10.129115Z", "url": "https://files.pythonhosted.org/packages/62/cb/39674c7ee528f0b402bb2148e87141e4b7a2a18162fc2ad71692aee7563b/radinitio-0.9.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4d5060d0ad3397cf8ef09141a135d4e", "sha256": "d4655b40f24ea9b0adf3c17935eb30a2ccd4d7efaa5442ff2f4e636543ee8f09"}, "downloads": -1, "filename": "radinitio-0.9.11.tar.gz", "has_sig": false, "md5_digest": "b4d5060d0ad3397cf8ef09141a135d4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35838, "upload_time": "2019-05-08T18:45:11", "upload_time_iso_8601": "2019-05-08T18:45:11.576902Z", "url": "https://files.pythonhosted.org/packages/95/0f/8ac2d200d457ba67eedfb8d2462473e716dc5dcccd0e56b15e68b0e38836/radinitio-0.9.11.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "ac5d742bee53dae206dcbb2be2ded895", "sha256": "08dda9076a484a9205760299e1dcc28019c064ef2ad595d72e821fa813faa2ba"}, "downloads": -1, "filename": "radinitio-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ac5d742bee53dae206dcbb2be2ded895", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36841, "upload_time": "2019-03-14T01:50:20", "upload_time_iso_8601": "2019-03-14T01:50:20.758977Z", "url": "https://files.pythonhosted.org/packages/e3/dc/b9628a62f64379b354685cd32c0f0216e2bb17c7c07299d0058745d92800/radinitio-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db3d784419836bcf3c5a2971a8475194", "sha256": "bbaae3a76945e5768e62a0618153d11261126ace3de2bd9fad9a691e0fb3e96a"}, "downloads": -1, "filename": "radinitio-0.9.2.tar.gz", "has_sig": false, "md5_digest": "db3d784419836bcf3c5a2971a8475194", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30545, "upload_time": "2019-03-14T01:50:21", "upload_time_iso_8601": "2019-03-14T01:50:21.940513Z", "url": "https://files.pythonhosted.org/packages/13/f7/a513cb147fb34639f04ab925f24699914fac0234d8e458dc42c57602bdb1/radinitio-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "496cd990a2f0c83df69b639582b0853d", "sha256": "6a7668244b0ac5442dd58aa6144cd4e5ed59e90b54b43b97796bfe7055b1b8dd"}, "downloads": -1, "filename": "radinitio-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "496cd990a2f0c83df69b639582b0853d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36924, "upload_time": "2019-03-14T02:29:32", "upload_time_iso_8601": "2019-03-14T02:29:32.362140Z", "url": "https://files.pythonhosted.org/packages/d2/7f/2e024e5cc0c4ef81a091101ca71aad5ebaaa0909eeab2d8c063b508455d2/radinitio-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43ea4de4cf17016156e5a6fe71f9f9eb", "sha256": "7b08e0b64dda4683e92d24a1da00bc692326b66a09b49489ebd2573dc41b8c5f"}, "downloads": -1, "filename": "radinitio-0.9.3.tar.gz", "has_sig": false, "md5_digest": "43ea4de4cf17016156e5a6fe71f9f9eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30629, "upload_time": "2019-03-14T02:29:33", "upload_time_iso_8601": "2019-03-14T02:29:33.777612Z", "url": "https://files.pythonhosted.org/packages/81/e2/1122db0a860d751650d97a27c0f285ef73ab7c8b672d53aaaf633904106a/radinitio-0.9.3.tar.gz", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "9ad81c932872bf8d03518afc2a796d0c", "sha256": "f763e5f0ab0d51acf6360b16e0f855370f2f3f5e515d086ab4388e90e7845c43"}, "downloads": -1, "filename": "radinitio-0.9.8-py3-none-any.whl", "has_sig": false, "md5_digest": "9ad81c932872bf8d03518afc2a796d0c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41441, "upload_time": "2019-05-03T22:05:11", "upload_time_iso_8601": "2019-05-03T22:05:11.776804Z", "url": "https://files.pythonhosted.org/packages/ca/18/ab120e08f649f82f0c6aca5434de51841f1699cfecd110b6ea5f9053474a/radinitio-0.9.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2329c60501331826a902cb75a6de6db9", "sha256": "c6951e16cd97b9c6795b7315236a9629e13f111f615f74520bae633ccc0d8991"}, "downloads": -1, "filename": "radinitio-0.9.8.tar.gz", "has_sig": false, "md5_digest": "2329c60501331826a902cb75a6de6db9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35404, "upload_time": "2019-05-03T22:05:12", "upload_time_iso_8601": "2019-05-03T22:05:12.988822Z", "url": "https://files.pythonhosted.org/packages/bd/1e/229d1d02066976f618c273fd008c7067973699f2351440d28cfdffd1330e/radinitio-0.9.8.tar.gz", "yanked": false}], "0.9.9": [{"comment_text": "", "digests": {"md5": "10db2877a9c86e8f4379d4f8a14ffdea", "sha256": "85d8fa82b42f1530e92ef3e82c7498c8830cff32081a211bf6256fecc6813fbd"}, "downloads": -1, "filename": "radinitio-0.9.9-py3-none-any.whl", "has_sig": false, "md5_digest": "10db2877a9c86e8f4379d4f8a14ffdea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41441, "upload_time": "2019-05-06T17:12:35", "upload_time_iso_8601": "2019-05-06T17:12:35.191682Z", "url": "https://files.pythonhosted.org/packages/7f/ce/2583bb9b3f6f2797e41ba87725cc9782f28da934add7e14270152fb08aae/radinitio-0.9.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a93e98be08f26c2f25bb1710d058507", "sha256": "aed89fcd9771932670a1894ec545acee02cafca3b27d5389a4356eeb4b107931"}, "downloads": -1, "filename": "radinitio-0.9.9.tar.gz", "has_sig": false, "md5_digest": "9a93e98be08f26c2f25bb1710d058507", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35425, "upload_time": "2019-05-06T17:12:37", "upload_time_iso_8601": "2019-05-06T17:12:37.242975Z", "url": "https://files.pythonhosted.org/packages/b6/4b/b707c28b32150a517ca2bd485e132c0ec949a00c75c0aa91d7c02fcdf0b9/radinitio-0.9.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "727650df685fb1bdcbf43fae44fbef24", "sha256": "c2f3d68bb8df8523026185c7da9a70701a43809dc8921c5496f432432acec91d"}, "downloads": -1, "filename": "radinitio-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "727650df685fb1bdcbf43fae44fbef24", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 45294, "upload_time": "2019-05-08T22:20:25", "upload_time_iso_8601": "2019-05-08T22:20:25.668602Z", "url": "https://files.pythonhosted.org/packages/e8/f9/5e6b5613213a7bba35e9e54e7ba30f4974314cb4561c65b367d688be4fa8/radinitio-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4daecbbf08a934a83c19bffd3aeebb47", "sha256": "d01f15973ec7451df553d248ee269ccfae4dbba672f3d7588dd225004c8e11da"}, "downloads": -1, "filename": "radinitio-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4daecbbf08a934a83c19bffd3aeebb47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37415, "upload_time": "2019-05-08T22:20:27", "upload_time_iso_8601": "2019-05-08T22:20:27.250167Z", "url": "https://files.pythonhosted.org/packages/e6/6c/59ed7d090308aa6e880825c2d135542606c4a6e1e98cac7051523b7bccef/radinitio-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "dc4d997b4947a9434191b6317d0f31ca", "sha256": "332c444230329b6026a46a331adb19009035d4119cdfb71f72191d90632f90a0"}, "downloads": -1, "filename": "radinitio-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dc4d997b4947a9434191b6317d0f31ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41763, "upload_time": "2019-05-13T20:06:24", "upload_time_iso_8601": "2019-05-13T20:06:24.818402Z", "url": "https://files.pythonhosted.org/packages/bb/d3/9b2928ef6095eed129669c5ca7bc0caae53b7d8aeacaa7f934486dcfdf32/radinitio-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcf0684413cb66abf78bc5663262792b", "sha256": "2ce4f2d2d925c4ef0e033594d9130c6999136d77b9aa3c00c9e369084b52bd83"}, "downloads": -1, "filename": "radinitio-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bcf0684413cb66abf78bc5663262792b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29184, "upload_time": "2019-05-13T20:06:26", "upload_time_iso_8601": "2019-05-13T20:06:26.225456Z", "url": "https://files.pythonhosted.org/packages/63/e0/6c2f45214ce49b6202075547a14ed4ad5adb501ba6bdf9372f84e5f06cec/radinitio-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e64888a2fa4dc843228127ef76a590e8", "sha256": "1773cec6da1a74e28f5fd3179c709f9fd73b13066882727cf9b93ae5fca6b06c"}, "downloads": -1, "filename": "radinitio-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e64888a2fa4dc843228127ef76a590e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 41836, "upload_time": "2019-05-13T20:56:10", "upload_time_iso_8601": "2019-05-13T20:56:10.566615Z", "url": "https://files.pythonhosted.org/packages/3a/b1/e75bfab4e539efd3b3a08221d19586d93d9461cc249c68efcda9c6f30deb/radinitio-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b18df1ffb5c7d508a8543937bdbdb61", "sha256": "94cc98a506047d2a5ccbf2b7be40afaeb37cfd7527719684daae874ab8708c57"}, "downloads": -1, "filename": "radinitio-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3b18df1ffb5c7d508a8543937bdbdb61", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 29671, "upload_time": "2019-05-13T20:56:12", "upload_time_iso_8601": "2019-05-13T20:56:12.004943Z", "url": "https://files.pythonhosted.org/packages/a1/44/0e679244d63f62dee5f583190bf773a97f4fb9adee685500f94b02450a32/radinitio-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "00d596ebaa5ddbb0644bd7ec8e3a1430", "sha256": "19bbcb04d487f6a6837e396166a312496da6ed15d780e7951cd337998ebb6d4c"}, "downloads": -1, "filename": "radinitio-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "00d596ebaa5ddbb0644bd7ec8e3a1430", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 42278, "upload_time": "2019-05-16T16:42:30", "upload_time_iso_8601": "2019-05-16T16:42:30.888867Z", "url": "https://files.pythonhosted.org/packages/1b/1e/11ff8e3de65ff34492d0f9c77304fe231e1da5a211778337751c92427568/radinitio-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f52ccc599fff495c1050d9b2b3ed899", "sha256": "33b818639391f8eecdfce26240ef8f16b522212c124b52798944ceef212e0cb2"}, "downloads": -1, "filename": "radinitio-1.0.3.tar.gz", "has_sig": false, "md5_digest": "0f52ccc599fff495c1050d9b2b3ed899", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 30087, "upload_time": "2019-05-16T16:42:32", "upload_time_iso_8601": "2019-05-16T16:42:32.086375Z", "url": "https://files.pythonhosted.org/packages/17/7e/7caa8764d05628c4f45c687506ce1a2545997bfa74e299b730cc99dab8d3/radinitio-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6a71c73ccf59cee2208b7c45dd7277c1", "sha256": "e9cbf9cf15fe20d0cd4e77d4cbab7fbc41194f04229f528167415eac92a7bace"}, "downloads": -1, "filename": "radinitio-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6a71c73ccf59cee2208b7c45dd7277c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 46115, "upload_time": "2019-08-06T16:39:58", "upload_time_iso_8601": "2019-08-06T16:39:58.195003Z", "url": "https://files.pythonhosted.org/packages/52/79/b3661c829119b7248c89b1636a6548f51bb60a6979cef07a53e2ae8cc2f9/radinitio-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3363d66f9fec51f78757459efdaee59f", "sha256": "46714b65d73fd2a07c6234a573f8ba4e912e672691485af7d7d4255e1af61259"}, "downloads": -1, "filename": "radinitio-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3363d66f9fec51f78757459efdaee59f", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 34959, "upload_time": "2019-08-06T16:39:59", "upload_time_iso_8601": "2019-08-06T16:39:59.900356Z", "url": "https://files.pythonhosted.org/packages/7d/02/46aea8bdd67ebc32c2b0fd3c4a520039438349fbb4342bd3ee4e96b7ac75/radinitio-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "485bfc259bbe3decd0550662167de879", "sha256": "c6d50418d5b7d9bd2703603b5b61c2853da5936804f4ec68e98190081a9130e2"}, "downloads": -1, "filename": "radinitio-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "485bfc259bbe3decd0550662167de879", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 46118, "upload_time": "2019-09-12T06:11:45", "upload_time_iso_8601": "2019-09-12T06:11:45.950685Z", "url": "https://files.pythonhosted.org/packages/0a/13/679347c22e3f621e9f1fe0048b27f4b3c5b1abbc6d6de8b7ebc117da221a/radinitio-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1a0f1cf3f682e5a2efc9404c7d33807", "sha256": "12e93e04d7ced08997d5326dd21e603353a2a9ce6325b613f97779b15c7f2cea"}, "downloads": -1, "filename": "radinitio-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f1a0f1cf3f682e5a2efc9404c7d33807", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 35006, "upload_time": "2019-09-12T06:11:47", "upload_time_iso_8601": "2019-09-12T06:11:47.710475Z", "url": "https://files.pythonhosted.org/packages/0e/59/926d84e94bd83486abae2af84d0fe21b87448f679e942460585b81a1e57e/radinitio-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "485bfc259bbe3decd0550662167de879", "sha256": "c6d50418d5b7d9bd2703603b5b61c2853da5936804f4ec68e98190081a9130e2"}, "downloads": -1, "filename": "radinitio-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "485bfc259bbe3decd0550662167de879", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 46118, "upload_time": "2019-09-12T06:11:45", "upload_time_iso_8601": "2019-09-12T06:11:45.950685Z", "url": "https://files.pythonhosted.org/packages/0a/13/679347c22e3f621e9f1fe0048b27f4b3c5b1abbc6d6de8b7ebc117da221a/radinitio-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1a0f1cf3f682e5a2efc9404c7d33807", "sha256": "12e93e04d7ced08997d5326dd21e603353a2a9ce6325b613f97779b15c7f2cea"}, "downloads": -1, "filename": "radinitio-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f1a0f1cf3f682e5a2efc9404c7d33807", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 35006, "upload_time": "2019-09-12T06:11:47", "upload_time_iso_8601": "2019-09-12T06:11:47.710475Z", "url": "https://files.pythonhosted.org/packages/0e/59/926d84e94bd83486abae2af84d0fe21b87448f679e942460585b81a1e57e/radinitio-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:00 2020"}