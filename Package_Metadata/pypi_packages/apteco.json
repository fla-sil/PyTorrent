{"info": {"author": "Apteco Ltd", "author_email": "support@apteco.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": "Quickstart\n==========\n\nRequirements\n------------\n\n* Python 3.6+\n* Access to an installation of the Apteco API\n\nThe Apteco API (which also goes under the name **Orbit API**)\nis part of the Apteco Orbit\u2122 installation.\nIf you have access to Apteco Orbit\u2122, you also have access to the Apteco API!\nIf you're not sure about this, contact whoever administers your Apteco software,\nor get in touch with Apteco support (support@apteco.com).\n\nInstallation\n------------\n\nYou can install the package the usual way from PyPI using ``pip``:\n\n.. code-block:: console\n\n   python -m pip install apteco\n\nLogging in\n----------\n\nYour login credentials are the same username and password\nyou would use to log in to Apteco Orbit\u2122:\n\n.. code-block:: python\n\n   from apteco.session import login\n\n   my_session = login(\"https://my-site.com/OrbitAPI\", \"my_data_view\", \"my_system\", \"jdoe\")\n\nYou will be asked to enter your password in the terminal, which won't be echoed.\nIf Python is unable to ask for your password in this way,\nit will provide a pop-up box instead.\nThis might appear in the background,\nso check your taskbar for a new window if nothing seems to be happening.\n\nIf you don't want to enter your password every time,\nthere's also a ``login_with_password()`` function which takes your password\nas a fifth argument:\n\n.. code-block:: python\n\n   from apteco.session import login_with_password\n\n   # password is in plain sight in the code!\n   my_session = login_with_password(\n       \"https://my-site.com/OrbitAPI\", \"my_data_view\", \"my_system\", \"jdoe\", \"password\"\n   )\n\nTables\n------\n\nTables are stored in a dictionary at the ``tables`` attribute on the session object.\nYou can retrieve a table using its name:\n\n.. code-block:: python\n\n    >>> bookings = my_session.tables[\"Bookings\"]\n\n``Table`` objects have properties for various metadata:\n\n.. code-block:: python\n\n    >>> print(\n    ...     f\"There are {bookings.total_records:,}\"\n    ...     f\" {bookings.plural_display_name.lower()}\"\n    ...     f\" in the system.\"\n    ... )\n    ...\n    There are 2,130,081 bookings in the system.\n\nVariables\n---------\n\nVariables are stored in a dictionary at the ``variables`` attribute\non the session object.\nYou can retrieve a variable using its name:\n\n.. code-block:: python\n\n    >>> cost = my_session.variables[\"boCost\"]\n\nEach table also has a ``variables`` dictionary containing just the variables\non that table:\n\n.. code-block:: python\n\n    >>> destination = bookings.variables[\"boDest\"]\n\n``Variable`` objects have attributes with various metadata:\n\n.. code-block:: python\n\n    >>> cost.description\n    'Cost'\n    >>> destination.type\n    'Selector'\n\nCreating selections\n-------------------\n\nYou can use the Python operators with ``Variable`` objects to build selections\nbased on criteria and return a count:\n\n.. code-block:: python\n\n    >>> sweden = bookings[\"boDest\"] == \"29\"\n    >>> sweden.count()\n    25207\n\nYou can specific multiple values using any *Iterable*:\n\n.. code-block:: python\n\n    >>> people = my_session.tables[\"People\"]\n    >>> high_earners = people[\"peIncome\"] == (f\"{i:02}\" for i in range(7, 12))\n    >>> high_earners.count()\n    7114\n\nYou can use other operators as well; for example, to exclude values:\n\n.. code-block:: python\n\n    >>> uk_only = households[\"hoRegion\"] != \"14\"  # 14 is Channel Islands\n    >>> uk_only.count()\n    741572\n\nOr to allow a range of values:\n\n.. code-block:: python\n\n    >>> low_profit = bookings[\"boProfit\"] <= 25\n    >>> low_profit.count()\n    211328\n\n.. code-block:: python\n\n    >>> second_half_of_alphabet = people[\"peSName\"] >= \"N\"\n    >>> second_half_of_alphabet.count()\n    410954\n\nDate and DateTime variables use the built-in ``datetime`` module:\n\n.. code-block:: python\n\n    >>> from datetime import date, datetime\n    >>> bookings_before_2019 = bookings[\"boDate\"] <= date(2018, 12, 31)\n    >>> bookings_before_2019.count()\n    972439\n\nYou can take advantage of functionality available in other Python packages:\n\n.. code-block:: python\n\n    >>> from dateutil.relativedelta import relativedelta\n    >>> under_30 = people[\"peDOB\"] >= date.today() - relativedelta(years=30)\n    >>> under_30.count()\n    207737\n\nCombining selections\n--------------------\n\nYou can use the ``&`` ``|`` operators to combine selection criteria:\n\n.. code-block:: python\n\n    >>> sweden = bookings[\"boDest\"] == \"29\"\n    >>> cost_at_least_2k = bookings[\"boCost\"] >= 2000\n    >>> expensive_sweden = sweden & cost_at_least_2k\n    >>> expensive_sweden.count()\n    632\n    >>> student = people[\"peOccu\"] == \"4\"\n    >>> under_21 = people[\"peDOB\"] >= date.today() - relativedelta(years=21)\n    >>> eligible_for_discount = student | under_21\n    >>> eligible_for_discount.count()\n    188364\n\nThe ``~`` operator negates a selection:\n\n.. code-block:: python\n\n    >>> pay_full_price = ~eligible_for_discount\n    >>> pay_full_price.count()\n    968189\n\nYou can join clauses from different tables and it will automatically handle\nthe required table changes:\n\n.. code-block:: python\n\n    >>> high_affordability = high_earners | cost_at_least_2k  # will resolve to people\n    >>> high_affordability.count()\n    56096\n    >>> high_affordability.table_name\n    'People'\n\nThe left-most clause determines the resolve table:\n\n.. code-block:: python\n\n    >>> female = people[\"peGender\"] == \"F\"\n    >>> usa = bookings[\"boDest\"] == \"38\"\n    >>> female.table_name\n    'People'\n    >>> usa.table_name\n    'Bookings'\n    >>> (female & usa).table_name\n    'People'\n    >>> (usa & female).table_name\n    'Bookings'\n\nYou can manually set the resolve table using the ``*`` operator:\n\n.. code-block:: python\n\n    >>> bookings_by_under_21s = bookings * under_21\n    >>> bookings_by_under_21s.count()\n    135100\n    >>> bookings_by_under_21s.table_name\n    'Bookings'\n\nCompound clauses follow Python operator precedence:\n\n.. code-block:: python\n\n    >>> student_or_young_female = student | female & under_21\n    >>> student_or_young_female.count()\n    166708\n    >>> student_or_female_must_be_young = (student | female) & under_21\n    >>> student_or_female_must_be_young.count()\n    49225\n\nBe especially careful where compound clauses involve table changes:\n\n.. code-block:: python\n\n    >>> women_to_sweden = female & sweden\n    >>> women_to_sweden.count()  # selection on People table\n    8674\n    >>> audience_1 = bookings * (female & sweden)\n    >>> audience_1.count()  # bookings by women who've been to sweden\n    23553\n    >>> audience_2 = (bookings * female) & sweden\n    >>> audience_2.count()  # bookings made by a woman, with destination of sweden\n    8687\n\nFor a more thorough introduction, check out the Tutorial.\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Apteco/py-apteco", "keywords": "Apteco,FastStats,Orbit,API,Marketing", "license": "Apache-2.0", "maintainer": "Apteco Ltd", "maintainer_email": "support@apteco.com", "name": "apteco", "package_url": "https://pypi.org/project/apteco/", "platform": "", "project_url": "https://pypi.org/project/apteco/", "project_urls": {"Homepage": "https://github.com/Apteco/py-apteco", "Repository": "https://github.com/Apteco/py-apteco"}, "release_url": "https://pypi.org/project/apteco/0.4.0/", "requires_dist": ["apteco-api (>=0.1.8,<0.2.0)", "pysimplegui (>=4.0,<5.0)"], "requires_python": ">=3.6,<4.0", "summary": "A Python package for interacting with Apteco Marketing Suite resources via the Apteco API.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6+</li>\n<li>Access to an installation of the Apteco API</li>\n</ul>\n<p>The Apteco API (which also goes under the name <strong>Orbit API</strong>)\nis part of the Apteco Orbit\u2122 installation.\nIf you have access to Apteco Orbit\u2122, you also have access to the Apteco API!\nIf you\u2019re not sure about this, contact whoever administers your Apteco software,\nor get in touch with Apteco support (<a href=\"mailto:support%40apteco.com\">support<span>@</span>apteco<span>.</span>com</a>).</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install the package the usual way from PyPI using <tt>pip</tt>:</p>\n<pre><span class=\"go\">python -m pip install apteco</span>\n</pre>\n</div>\n<div id=\"logging-in\">\n<h2>Logging in</h2>\n<p>Your login credentials are the same username and password\nyou would use to log in to Apteco Orbit\u2122:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">apteco.session</span> <span class=\"kn\">import</span> <span class=\"n\">login</span>\n\n<span class=\"n\">my_session</span> <span class=\"o\">=</span> <span class=\"n\">login</span><span class=\"p\">(</span><span class=\"s2\">\"https://my-site.com/OrbitAPI\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my_data_view\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my_system\"</span><span class=\"p\">,</span> <span class=\"s2\">\"jdoe\"</span><span class=\"p\">)</span>\n</pre>\n<p>You will be asked to enter your password in the terminal, which won\u2019t be echoed.\nIf Python is unable to ask for your password in this way,\nit will provide a pop-up box instead.\nThis might appear in the background,\nso check your taskbar for a new window if nothing seems to be happening.</p>\n<p>If you don\u2019t want to enter your password every time,\nthere\u2019s also a <tt>login_with_password()</tt> function which takes your password\nas a fifth argument:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">apteco.session</span> <span class=\"kn\">import</span> <span class=\"n\">login_with_password</span>\n\n<span class=\"c1\"># password is in plain sight in the code!</span>\n<span class=\"n\">my_session</span> <span class=\"o\">=</span> <span class=\"n\">login_with_password</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"https://my-site.com/OrbitAPI\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my_data_view\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my_system\"</span><span class=\"p\">,</span> <span class=\"s2\">\"jdoe\"</span><span class=\"p\">,</span> <span class=\"s2\">\"password\"</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"tables\">\n<h2>Tables</h2>\n<p>Tables are stored in a dictionary at the <tt>tables</tt> attribute on the session object.\nYou can retrieve a table using its name:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bookings</span> <span class=\"o\">=</span> <span class=\"n\">my_session</span><span class=\"o\">.</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"s2\">\"Bookings\"</span><span class=\"p\">]</span>\n</pre>\n<p><tt>Table</tt> objects have properties for various metadata:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"sa\">f</span><span class=\"s2\">\"There are </span><span class=\"si\">{</span><span class=\"n\">bookings</span><span class=\"o\">.</span><span class=\"n\">total_records</span><span class=\"si\">:</span><span class=\"s2\">,</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"o\">...</span>     <span class=\"sa\">f</span><span class=\"s2\">\" </span><span class=\"si\">{</span><span class=\"n\">bookings</span><span class=\"o\">.</span><span class=\"n\">plural_display_name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"o\">...</span>     <span class=\"sa\">f</span><span class=\"s2\">\" in the system.\"</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">There</span> <span class=\"n\">are</span> <span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">130</span><span class=\"p\">,</span><span class=\"mi\">081</span> <span class=\"n\">bookings</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">system</span><span class=\"o\">.</span>\n</pre>\n</div>\n<div id=\"variables\">\n<h2>Variables</h2>\n<p>Variables are stored in a dictionary at the <tt>variables</tt> attribute\non the session object.\nYou can retrieve a variable using its name:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cost</span> <span class=\"o\">=</span> <span class=\"n\">my_session</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s2\">\"boCost\"</span><span class=\"p\">]</span>\n</pre>\n<p>Each table also has a <tt>variables</tt> dictionary containing just the variables\non that table:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">destination</span> <span class=\"o\">=</span> <span class=\"n\">bookings</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s2\">\"boDest\"</span><span class=\"p\">]</span>\n</pre>\n<p><tt>Variable</tt> objects have attributes with various metadata:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cost</span><span class=\"o\">.</span><span class=\"n\">description</span>\n<span class=\"s1\">'Cost'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">destination</span><span class=\"o\">.</span><span class=\"n\">type</span>\n<span class=\"s1\">'Selector'</span>\n</pre>\n</div>\n<div id=\"creating-selections\">\n<h2>Creating selections</h2>\n<p>You can use the Python operators with <tt>Variable</tt> objects to build selections\nbased on criteria and return a count:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sweden</span> <span class=\"o\">=</span> <span class=\"n\">bookings</span><span class=\"p\">[</span><span class=\"s2\">\"boDest\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"29\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sweden</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">25207</span>\n</pre>\n<p>You can specific multiple values using any <em>Iterable</em>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"n\">my_session</span><span class=\"o\">.</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"s2\">\"People\"</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">high_earners</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"p\">[</span><span class=\"s2\">\"peIncome\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">:</span><span class=\"s2\">02</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">high_earners</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">7114</span>\n</pre>\n<p>You can use other operators as well; for example, to exclude values:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">uk_only</span> <span class=\"o\">=</span> <span class=\"n\">households</span><span class=\"p\">[</span><span class=\"s2\">\"hoRegion\"</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">\"14\"</span>  <span class=\"c1\"># 14 is Channel Islands</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">uk_only</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">741572</span>\n</pre>\n<p>Or to allow a range of values:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">low_profit</span> <span class=\"o\">=</span> <span class=\"n\">bookings</span><span class=\"p\">[</span><span class=\"s2\">\"boProfit\"</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">25</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">low_profit</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">211328</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">second_half_of_alphabet</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"p\">[</span><span class=\"s2\">\"peSName\"</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">\"N\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">second_half_of_alphabet</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">410954</span>\n</pre>\n<p>Date and DateTime variables use the built-in <tt>datetime</tt> module:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bookings_before_2019</span> <span class=\"o\">=</span> <span class=\"n\">bookings</span><span class=\"p\">[</span><span class=\"s2\">\"boDate\"</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bookings_before_2019</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">972439</span>\n</pre>\n<p>You can take advantage of functionality available in other Python packages:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dateutil.relativedelta</span> <span class=\"kn\">import</span> <span class=\"n\">relativedelta</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">under_30</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"p\">[</span><span class=\"s2\">\"peDOB\"</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">relativedelta</span><span class=\"p\">(</span><span class=\"n\">years</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">under_30</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">207737</span>\n</pre>\n</div>\n<div id=\"combining-selections\">\n<h2>Combining selections</h2>\n<p>You can use the <tt>&amp;</tt> <tt>|</tt> operators to combine selection criteria:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sweden</span> <span class=\"o\">=</span> <span class=\"n\">bookings</span><span class=\"p\">[</span><span class=\"s2\">\"boDest\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"29\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cost_at_least_2k</span> <span class=\"o\">=</span> <span class=\"n\">bookings</span><span class=\"p\">[</span><span class=\"s2\">\"boCost\"</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2000</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expensive_sweden</span> <span class=\"o\">=</span> <span class=\"n\">sweden</span> <span class=\"o\">&amp;</span> <span class=\"n\">cost_at_least_2k</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expensive_sweden</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">632</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"p\">[</span><span class=\"s2\">\"peOccu\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"4\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">under_21</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"p\">[</span><span class=\"s2\">\"peDOB\"</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">relativedelta</span><span class=\"p\">(</span><span class=\"n\">years</span><span class=\"o\">=</span><span class=\"mi\">21</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">eligible_for_discount</span> <span class=\"o\">=</span> <span class=\"n\">student</span> <span class=\"o\">|</span> <span class=\"n\">under_21</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">eligible_for_discount</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">188364</span>\n</pre>\n<p>The <tt>~</tt> operator negates a selection:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pay_full_price</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">eligible_for_discount</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pay_full_price</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">968189</span>\n</pre>\n<p>You can join clauses from different tables and it will automatically handle\nthe required table changes:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">high_affordability</span> <span class=\"o\">=</span> <span class=\"n\">high_earners</span> <span class=\"o\">|</span> <span class=\"n\">cost_at_least_2k</span>  <span class=\"c1\"># will resolve to people</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">high_affordability</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">56096</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">high_affordability</span><span class=\"o\">.</span><span class=\"n\">table_name</span>\n<span class=\"s1\">'People'</span>\n</pre>\n<p>The left-most clause determines the resolve table:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">female</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"p\">[</span><span class=\"s2\">\"peGender\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"F\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">usa</span> <span class=\"o\">=</span> <span class=\"n\">bookings</span><span class=\"p\">[</span><span class=\"s2\">\"boDest\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"38\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">female</span><span class=\"o\">.</span><span class=\"n\">table_name</span>\n<span class=\"s1\">'People'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">usa</span><span class=\"o\">.</span><span class=\"n\">table_name</span>\n<span class=\"s1\">'Bookings'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">female</span> <span class=\"o\">&amp;</span> <span class=\"n\">usa</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">table_name</span>\n<span class=\"s1\">'People'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">usa</span> <span class=\"o\">&amp;</span> <span class=\"n\">female</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">table_name</span>\n<span class=\"s1\">'Bookings'</span>\n</pre>\n<p>You can manually set the resolve table using the <tt>*</tt> operator:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bookings_by_under_21s</span> <span class=\"o\">=</span> <span class=\"n\">bookings</span> <span class=\"o\">*</span> <span class=\"n\">under_21</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bookings_by_under_21s</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">135100</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bookings_by_under_21s</span><span class=\"o\">.</span><span class=\"n\">table_name</span>\n<span class=\"s1\">'Bookings'</span>\n</pre>\n<p>Compound clauses follow Python operator precedence:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">student_or_young_female</span> <span class=\"o\">=</span> <span class=\"n\">student</span> <span class=\"o\">|</span> <span class=\"n\">female</span> <span class=\"o\">&amp;</span> <span class=\"n\">under_21</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">student_or_young_female</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">166708</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">student_or_female_must_be_young</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">student</span> <span class=\"o\">|</span> <span class=\"n\">female</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">under_21</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">student_or_female_must_be_young</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">49225</span>\n</pre>\n<p>Be especially careful where compound clauses involve table changes:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">women_to_sweden</span> <span class=\"o\">=</span> <span class=\"n\">female</span> <span class=\"o\">&amp;</span> <span class=\"n\">sweden</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">women_to_sweden</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>  <span class=\"c1\"># selection on People table</span>\n<span class=\"mi\">8674</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">audience_1</span> <span class=\"o\">=</span> <span class=\"n\">bookings</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">female</span> <span class=\"o\">&amp;</span> <span class=\"n\">sweden</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">audience_1</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>  <span class=\"c1\"># bookings by women who've been to sweden</span>\n<span class=\"mi\">23553</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">audience_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">bookings</span> <span class=\"o\">*</span> <span class=\"n\">female</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">sweden</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">audience_2</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>  <span class=\"c1\"># bookings made by a woman, with destination of sweden</span>\n<span class=\"mi\">8687</span>\n</pre>\n<p>For a more thorough introduction, check out the Tutorial.</p>\n</div>\n\n          </div>"}, "last_serial": 6968955, "releases": {"0.3.2": [{"comment_text": "", "digests": {"md5": "d37490625635fa07885f516fc1781e48", "sha256": "f555edcfe498d7f4c9a7486fef40ca1d9f7e8c35bb592cd061efc28354a34ba2"}, "downloads": -1, "filename": "apteco-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d37490625635fa07885f516fc1781e48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 24676, "upload_time": "2019-10-01T13:15:48", "upload_time_iso_8601": "2019-10-01T13:15:48.607963Z", "url": "https://files.pythonhosted.org/packages/c3/77/141dd004e72a26bddce34641b9835f6f3707d166447b80220f29c3cdf094/apteco-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42372e269559ebe60112bc32d82c5eb9", "sha256": "43bcd349ae3d943960654d9e29ba01f47f7967c99345129c3a49a357f955ae1d"}, "downloads": -1, "filename": "apteco-0.3.2.tar.gz", "has_sig": false, "md5_digest": "42372e269559ebe60112bc32d82c5eb9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 25537, "upload_time": "2019-10-01T13:15:50", "upload_time_iso_8601": "2019-10-01T13:15:50.647338Z", "url": "https://files.pythonhosted.org/packages/da/ea/ff1798adf8232bffbaaa47c7b2ecf3f6c70c7633cf9ecbfa10630e1cce55/apteco-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f33042343748ed42837f2570a17d43fd", "sha256": "f72b5654fa102a6c19fea4c3d3e46bba0a0ec1fdd6e45bd90c5b0671a0a0eb69"}, "downloads": -1, "filename": "apteco-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f33042343748ed42837f2570a17d43fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 28182, "upload_time": "2020-04-07T12:10:28", "upload_time_iso_8601": "2020-04-07T12:10:28.057882Z", "url": "https://files.pythonhosted.org/packages/c1/27/9db6a0faa5fdbc921f6df5c7dba13d04c1c8f072ace8a11adc231c76586d/apteco-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1781eb0a41b3260bf9a153a94f8ce102", "sha256": "031fb46f8718c871aa0c8f4174f60d91cac5281655d89d26a3b7ae74eb72da66"}, "downloads": -1, "filename": "apteco-0.4.0.tar.gz", "has_sig": false, "md5_digest": "1781eb0a41b3260bf9a153a94f8ce102", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 31271, "upload_time": "2020-04-07T12:10:29", "upload_time_iso_8601": "2020-04-07T12:10:29.871095Z", "url": "https://files.pythonhosted.org/packages/4b/45/5a7b96f1ac4be433248f0c38e306c429b965e3861bd6b8dc5622300e8469/apteco-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f33042343748ed42837f2570a17d43fd", "sha256": "f72b5654fa102a6c19fea4c3d3e46bba0a0ec1fdd6e45bd90c5b0671a0a0eb69"}, "downloads": -1, "filename": "apteco-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f33042343748ed42837f2570a17d43fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 28182, "upload_time": "2020-04-07T12:10:28", "upload_time_iso_8601": "2020-04-07T12:10:28.057882Z", "url": "https://files.pythonhosted.org/packages/c1/27/9db6a0faa5fdbc921f6df5c7dba13d04c1c8f072ace8a11adc231c76586d/apteco-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1781eb0a41b3260bf9a153a94f8ce102", "sha256": "031fb46f8718c871aa0c8f4174f60d91cac5281655d89d26a3b7ae74eb72da66"}, "downloads": -1, "filename": "apteco-0.4.0.tar.gz", "has_sig": false, "md5_digest": "1781eb0a41b3260bf9a153a94f8ce102", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 31271, "upload_time": "2020-04-07T12:10:29", "upload_time_iso_8601": "2020-04-07T12:10:29.871095Z", "url": "https://files.pythonhosted.org/packages/4b/45/5a7b96f1ac4be433248f0c38e306c429b965e3861bd6b8dc5622300e8469/apteco-0.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:32 2020"}