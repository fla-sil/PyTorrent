{"info": {"author": "Daniel Greenfeld", "author_email": "pydanny@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 7 - Inactive", "Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: JavaScript", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=================\r\ndjango-nosqladmin\r\n=================\r\n\r\nMany NoSQL databases, mostly the Document based ones, translate into Python as a list of dictionaries, right? So why do us developers try to staple document databases into Django's traditional style relational introspection and tools? It's like we're trying to add object impedance mismatch to something that avoids it in the first place.\r\n\r\nTaking lessons learned from django-mongonaut, django-nosql-admin is an introspection tool for NoSQL databases. Our original test case is MongoDB, but if this works we'll invite authorship of interfaces for other NoSQL databases.\r\n\r\nFundamentals\r\n============\r\n\r\n* Display the results of lists of dictionaries\r\n* mongoadmin.py features:\r\n\r\n    * Define a collection\r\n    * Only show ObjectId by default\r\n    * Can add search fields which attempt to search\r\n    * Can add list fields which try to display\r\n    * Define which collections are displayed.\r\n    \r\nSample mongoadmin.py file::\r\n\r\n    # mongoadmin.py\r\n    class ProfileAdmin(MongoAdmin):\r\n        \r\n        collection = 'Profile'\r\n        search_fields = ['username']\r\n        list_fields = ['username']\r\n    \r\n        def has_view_permission(self, request):\r\n            return True\r\n\r\n    class ArticleAdmin(MongoAdmin):\r\n\r\n        collection = 'Article'\r\n        search_fields = ['title',]\r\n        list_fields = ['title','create_date']\r\n\r\n            \r\n    admins = [ProfileAdmin(), ArticleAdmin()]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pydanny/django-nosqladmin", "keywords": "mongodb,django,nosql", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-nosqladmin", "package_url": "https://pypi.org/project/django-nosqladmin/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-nosqladmin/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/pydanny/django-nosqladmin"}, "release_url": "https://pypi.org/project/django-nosqladmin/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "An introspective interface for Django and Document Based NoSQL databases", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Many NoSQL databases, mostly the Document based ones, translate into Python as a list of dictionaries, right? So why do us developers try to staple document databases into Django\u2019s traditional style relational introspection and tools? It\u2019s like we\u2019re trying to add object impedance mismatch to something that avoids it in the first place.</p>\n<p>Taking lessons learned from django-mongonaut, django-nosql-admin is an introspection tool for NoSQL databases. Our original test case is MongoDB, but if this works we\u2019ll invite authorship of interfaces for other NoSQL databases.</p>\n<div id=\"fundamentals\">\n<h2>Fundamentals</h2>\n<ul>\n<li><p>Display the results of lists of dictionaries</p>\n</li>\n<li><p>mongoadmin.py features:</p>\n<blockquote>\n<ul>\n<li>Define a collection</li>\n<li>Only show ObjectId by default</li>\n<li>Can add search fields which attempt to search</li>\n<li>Can add list fields which try to display</li>\n<li>Define which collections are displayed.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>Sample mongoadmin.py file:</p>\n<pre># mongoadmin.py\nclass ProfileAdmin(MongoAdmin):\n\n    collection = 'Profile'\n    search_fields = ['username']\n    list_fields = ['username']\n\n    def has_view_permission(self, request):\n        return True\n\nclass ArticleAdmin(MongoAdmin):\n\n    collection = 'Article'\n    search_fields = ['title',]\n    list_fields = ['title','create_date']\n\n\nadmins = [ProfileAdmin(), ArticleAdmin()]\n</pre>\n</div>\n\n          </div>"}, "last_serial": 728242, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "fff78492b7ac014c94b8b7b6625b33f0", "sha256": "dd3d20429b7d540e75b3ee4623038106edaa332ba77ae1c2a4f2a31623979868"}, "downloads": -1, "filename": "django-nosqladmin-0.1.tar.gz", "has_sig": false, "md5_digest": "fff78492b7ac014c94b8b7b6625b33f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3592, "upload_time": "2012-03-15T07:31:24", "upload_time_iso_8601": "2012-03-15T07:31:24.126278Z", "url": "https://files.pythonhosted.org/packages/95/02/65d4d8b4552ddd24740581bfeb1a0a302cbc425f7f5575bed7f9ab67128d/django-nosqladmin-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2f0dc67ea309610ec73fc857c4060a05", "sha256": "6184f5e1f83827c611034650f115f68aad950b079a328d8ef88fa07b846e9f01"}, "downloads": -1, "filename": "django-nosqladmin-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2f0dc67ea309610ec73fc857c4060a05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3564, "upload_time": "2012-03-15T07:33:18", "upload_time_iso_8601": "2012-03-15T07:33:18.043670Z", "url": "https://files.pythonhosted.org/packages/1b/2a/905213f0680ed552d492ee3849c61890889be0751e2738010adecbbc08dd/django-nosqladmin-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f0dc67ea309610ec73fc857c4060a05", "sha256": "6184f5e1f83827c611034650f115f68aad950b079a328d8ef88fa07b846e9f01"}, "downloads": -1, "filename": "django-nosqladmin-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2f0dc67ea309610ec73fc857c4060a05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3564, "upload_time": "2012-03-15T07:33:18", "upload_time_iso_8601": "2012-03-15T07:33:18.043670Z", "url": "https://files.pythonhosted.org/packages/1b/2a/905213f0680ed552d492ee3849c61890889be0751e2738010adecbbc08dd/django-nosqladmin-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:39 2020"}