{"info": {"author": "Mayfield Robotics", "author_email": "dev+thr33p@mayfieldrobotics.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "======\nthr33p\n======\n\n.. image:: https://travis-ci.org/mayfieldrobotics/thr33p.svg\n   :target: https://travis-ci.org/mayfieldrobotics/thr33p\n\n\n.. image:: https://coveralls.io/repos/mayfieldrobotics/thr33p/badge.svg\n   :target: https://coveralls.io/r/mayfieldrobotics/thr33p\n\nAuthenticating HTTP proxy for S3. Similar to these:\n\n- `s3proxy <https://github.com/abustany/s3proxy>`_\n- `s3-proxy-auth <https://github.com/samkeen/s3-proxy-auth>`_\n- `ngx_aws_auth <https://github.com/anomalizer/ngx_aws_auth>`_\n\nwhich *might* be better for you.\n\nquickstart\n----------\n\nCreate your config(s):\n\n.. code:: bash\n\n   $ cat > ~/.thr33p/config.py <<EOF\n   import certifi\n   \n   http_pool_manager = {\n      'cert_reqs': 'CERT_REQUIRED',\n      'ca_certs': certifi.where(),\n   }\n    \n   buckets =  {\n      r'~.+-at-bernies': {\n         'creds': {\n            'access_key_id': 'EXAMPLE',\n            'secret_access_key': 'EXAMPLEKEY',\n         },\n      }\n   }\n   EOF\n   $ cat > ~/.thr33p/gunicorn.py <<EOF\n   import os\n   \n   workers = 1\n   \n   backlog = 1024\n   \n   worker_class = 'gevent'\n   \n   loglevel = 'info'\n   \n   proc_name = 'thr33p'\n   \n   def post_fork(server, worker):\n       import thr33p\n   \n       config_path = os.path.abspath(os.path.join(__file__, '..', 'config.py'))\n       thr33p.init(config_path)\n   \n   EOF\n\nand run it with `docker <https://registry.hub.docker.com/u/mayfieldrobotics/thr33p/>`_:\n\n.. code:: bash\n\n   $ sudo docker run -p 5000:8000 -v $HOME/.thr33p/:/etc/thr33p/ mayfieldrobotics/thr33p:latest --config=/etc/thr33p/gunicorn.py\n   $ curl http://127.0.0.1:5000/dead-1.jpeg --header \"Host:weekend-at-bernies.s3.amazonaws.com\" -vvv\n\nor ghetto dev style:\n\n.. code:: bash\n\n   $ mkvirtualenv thr33p\n   (thr33p)$ pip install thr33p\n   (thr33p)$ thr33p -d -p 5000 ~/.thr33p/config.py &\n   (thr33p)$ curl http://127.0.0.1:5000/dead-1.jpeg --header \"Host:weekend-at-bernies.s3.amazonaws.com\" -vvv\n\nconfig\n------\n\nJust a python file like e.g. this:\n\n.. code:: python\n\n   import os\n   \n   import certifi\n   \n   \n   # passed to `urllib3.PoolManager`\n   http_pool_manager = {\n      'cert_reqs': 'CERT_REQUIRED',\n      'ca_certs': certifi.where(),\n   }\n    \n   buckets =  {\n      # authenticates buckets matching literal \"wake-at-bernies\" using temporary iam-role creds\n      r'wake-at-bernies': {\n         'creds': None\n      }\n      \n      # authenticates buckets matching literal \"evening-at-bernies\" using env creds\n      r'evening-at-bernies': {\n         'creds': {\n            'access_key_id': os.environ['AWS_ACCESS_KEY_ID'],\n            'secret_access_key':os.environ['AWS_SECRET_ACCESS_KEY'],\n         }\n      }\n      \n      # authenticates buckets matching regex \".+-at-bernies\" using baked creds\n      r'~.+-at-bernies': {\n         'creds': {\n            'access_key_id': 'EXAMPLE',\n            'secret_access_key': 'EXAMPLEKEY',\n         },\n      }\n   }\n\ndev\n---\n\nGet it:\n\n.. code:: bash\n\n   $ git clone git@github.com:mayfieldrobotics/thr33p.git \n   $ cd thr33p\n   $ pip install -e .[tests]\n   \n   \ntest it:\n\n.. code:: bash\n\n   $ py.test tests/ --cov thr33p.py\n   \nand build docker images:\n\n.. code:: bash\n\n   $ sudo docker build -t {your-account}/thr33p .\n\nrelease\n-------\n\nAll is well:\n\n.. code:: bash\n\n   $ py.test tests/ --cov thr33p.py\n\nso update ``__version__`` in:\n\n- ``thr33p.py``\n\ntag it (travis will publish it to `pypi <https://pypi.python.org/pypi/thr33p/>`_):\n\n.. code:: bash\n\n   $ git commit -am \"release v{version}\"\n   $ git tag -a v{version} -m \"release v{version}\"\n   $ git push --tags\n\nand register the tag with `docker <https://registry.hub.docker.com/u/mayfieldrobotics/thr33p/>`_ so others can just:\n\n.. code:: bash\n\n   $ sudo docker pull mayfieldrobotics/thr33p:{version}", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mayfieldrobotics/thr33p", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "thr33p", "package_url": "https://pypi.org/project/thr33p/", "platform": "any", "project_url": "https://pypi.org/project/thr33p/", "project_urls": {"Homepage": "https://github.com/mayfieldrobotics/thr33p"}, "release_url": "https://pypi.org/project/thr33p/0.2.0/", "requires_dist": null, "requires_python": "", "summary": ".", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/mayfieldrobotics/thr33p\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/mayfieldrobotics/thr33p.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52cea08f587080afd0e6c8cd765b1b04074d85de/68747470733a2f2f7472617669732d63692e6f72672f6d61796669656c64726f626f746963732f7468723333702e737667\"></a>\n<a href=\"https://coveralls.io/r/mayfieldrobotics/thr33p\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/mayfieldrobotics/thr33p/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fec6f6304c323330115966be3d9578fd36edc250/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d61796669656c64726f626f746963732f7468723333702f62616467652e737667\"></a>\n<p>Authenticating HTTP proxy for S3. Similar to these:</p>\n<ul>\n<li><a href=\"https://github.com/abustany/s3proxy\" rel=\"nofollow\">s3proxy</a></li>\n<li><a href=\"https://github.com/samkeen/s3-proxy-auth\" rel=\"nofollow\">s3-proxy-auth</a></li>\n<li><a href=\"https://github.com/anomalizer/ngx_aws_auth\" rel=\"nofollow\">ngx_aws_auth</a></li>\n</ul>\n<p>which <em>might</em> be better for you.</p>\n<div id=\"quickstart\">\n<h2>quickstart</h2>\n<p>Create your config(s):</p>\n<pre>$ cat &gt; ~/.thr33p/config.py <span class=\"s\">&lt;&lt;EOF\nimport certifi\n\nhttp_pool_manager = {\n   'cert_reqs': 'CERT_REQUIRED',\n   'ca_certs': certifi.where(),\n}\n\nbuckets =  {\n   r'~.+-at-bernies': {\n      'creds': {\n         'access_key_id': 'EXAMPLE',\n         'secret_access_key': 'EXAMPLEKEY',\n      },\n   }\n}\nEOF</span>\n$ cat &gt; ~/.thr33p/gunicorn.py <span class=\"s\">&lt;&lt;EOF\nimport os\n\nworkers = 1\n\nbacklog = 1024\n\nworker_class = 'gevent'\n\nloglevel = 'info'\n\nproc_name = 'thr33p'\n\ndef post_fork(server, worker):\n    import thr33p\n\n    config_path = os.path.abspath(os.path.join(__file__, '..', 'config.py'))\n    thr33p.init(config_path)\n\nEOF</span>\n</pre>\n<p>and run it with <a href=\"https://registry.hub.docker.com/u/mayfieldrobotics/thr33p/\" rel=\"nofollow\">docker</a>:</p>\n<pre>$ sudo docker run -p <span class=\"m\">5000</span>:8000 -v <span class=\"nv\">$HOME</span>/.thr33p/:/etc/thr33p/ mayfieldrobotics/thr33p:latest --config<span class=\"o\">=</span>/etc/thr33p/gunicorn.py\n$ curl http://127.0.0.1:5000/dead-1.jpeg --header <span class=\"s2\">\"Host:weekend-at-bernies.s3.amazonaws.com\"</span> -vvv\n</pre>\n<p>or ghetto dev style:</p>\n<pre>$ mkvirtualenv thr33p\n<span class=\"o\">(</span>thr33p<span class=\"o\">)</span>$ pip install thr33p\n<span class=\"o\">(</span>thr33p<span class=\"o\">)</span>$ thr33p -d -p <span class=\"m\">5000</span> ~/.thr33p/config.py <span class=\"p\">&amp;</span>\n<span class=\"o\">(</span>thr33p<span class=\"o\">)</span>$ curl http://127.0.0.1:5000/dead-1.jpeg --header <span class=\"s2\">\"Host:weekend-at-bernies.s3.amazonaws.com\"</span> -vvv\n</pre>\n</div>\n<div id=\"config\">\n<h2>config</h2>\n<p>Just a python file like e.g. this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">certifi</span>\n\n\n<span class=\"c1\"># passed to `urllib3.PoolManager`</span>\n<span class=\"n\">http_pool_manager</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s1\">'cert_reqs'</span><span class=\"p\">:</span> <span class=\"s1\">'CERT_REQUIRED'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'ca_certs'</span><span class=\"p\">:</span> <span class=\"n\">certifi</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(),</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">buckets</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>\n   <span class=\"c1\"># authenticates buckets matching literal \"wake-at-bernies\" using temporary iam-role creds</span>\n   <span class=\"sa\">r</span><span class=\"s1\">'wake-at-bernies'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'creds'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"c1\"># authenticates buckets matching literal \"evening-at-bernies\" using env creds</span>\n   <span class=\"sa\">r</span><span class=\"s1\">'evening-at-bernies'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'creds'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n         <span class=\"s1\">'access_key_id'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'AWS_ACCESS_KEY_ID'</span><span class=\"p\">],</span>\n         <span class=\"s1\">'secret_access_key'</span><span class=\"p\">:</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'AWS_SECRET_ACCESS_KEY'</span><span class=\"p\">],</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"c1\"># authenticates buckets matching regex \".+-at-bernies\" using baked creds</span>\n   <span class=\"sa\">r</span><span class=\"s1\">'~.+-at-bernies'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'creds'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n         <span class=\"s1\">'access_key_id'</span><span class=\"p\">:</span> <span class=\"s1\">'EXAMPLE'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'secret_access_key'</span><span class=\"p\">:</span> <span class=\"s1\">'EXAMPLEKEY'</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"dev\">\n<h2>dev</h2>\n<p>Get it:</p>\n<pre>$ git clone git@github.com:mayfieldrobotics/thr33p.git\n$ <span class=\"nb\">cd</span> thr33p\n$ pip install -e .<span class=\"o\">[</span>tests<span class=\"o\">]</span>\n</pre>\n<p>test it:</p>\n<pre>$ py.test tests/ --cov thr33p.py\n</pre>\n<p>and build docker images:</p>\n<pre>$ sudo docker build -t <span class=\"o\">{</span>your-account<span class=\"o\">}</span>/thr33p .\n</pre>\n</div>\n<div id=\"release\">\n<h2>release</h2>\n<p>All is well:</p>\n<pre>$ py.test tests/ --cov thr33p.py\n</pre>\n<p>so update <tt>__version__</tt> in:</p>\n<ul>\n<li><tt>thr33p.py</tt></li>\n</ul>\n<p>tag it (travis will publish it to <a href=\"https://pypi.python.org/pypi/thr33p/\" rel=\"nofollow\">pypi</a>):</p>\n<pre>$ git commit -am <span class=\"s2\">\"release v{version}\"</span>\n$ git tag -a v<span class=\"o\">{</span>version<span class=\"o\">}</span> -m <span class=\"s2\">\"release v{version}\"</span>\n$ git push --tags\n</pre>\n<p>and register the tag with <a href=\"https://registry.hub.docker.com/u/mayfieldrobotics/thr33p/\" rel=\"nofollow\">docker</a> so others can just:</p>\n<pre>$ sudo docker pull mayfieldrobotics/thr33p:<span class=\"o\">{</span>version<span class=\"o\">}</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2111124, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "da23c1cf09a0561c3f8d805715bfe893", "sha256": "9220fb86371b5acbc2b284d53237dfc0498b9ca6348bf4b3ca23a1c3329ec03c"}, "downloads": -1, "filename": "thr33p-0.1.0.tar.gz", "has_sig": false, "md5_digest": "da23c1cf09a0561c3f8d805715bfe893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3239, "upload_time": "2015-03-27T18:40:29", "upload_time_iso_8601": "2015-03-27T18:40:29.712613Z", "url": "https://files.pythonhosted.org/packages/f5/e6/f27f20e5f43f979af1d33add7d53340e3afc24d7029ce4b1eb2668b699f7/thr33p-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d2d9ffc5e4f07204092b5545db2325ca", "sha256": "2970f150b30e5b51e6a71c6674affb0a3b05018e84605ef51a74a7988cb8c477"}, "downloads": -1, "filename": "thr33p-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d2d9ffc5e4f07204092b5545db2325ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3251, "upload_time": "2016-05-11T18:18:18", "upload_time_iso_8601": "2016-05-11T18:18:18.415458Z", "url": "https://files.pythonhosted.org/packages/40/de/f06bc4fbf999fe9e4da6fd41392a67137c694b1dd744cd963a164806b496/thr33p-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2d9ffc5e4f07204092b5545db2325ca", "sha256": "2970f150b30e5b51e6a71c6674affb0a3b05018e84605ef51a74a7988cb8c477"}, "downloads": -1, "filename": "thr33p-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d2d9ffc5e4f07204092b5545db2325ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3251, "upload_time": "2016-05-11T18:18:18", "upload_time_iso_8601": "2016-05-11T18:18:18.415458Z", "url": "https://files.pythonhosted.org/packages/40/de/f06bc4fbf999fe9e4da6fd41392a67137c694b1dd744cd963a164806b496/thr33p-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:48 2020"}