{"info": {"author": "Sam Kearney", "author_email": "sam.kearney@etcconnect.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "\n# Unity Test Parser\n\n[![Build Status](https://dev.azure.com/ETCLabs/unity-test-parser/_apis/build/status/ETCLabs.unity-test-parser?branchName=develop)](https://dev.azure.com/ETCLabs/unity-test-parser/_build/latest?definitionId=7&branchName=develop)\n\nA Python 3 module for parsing the console output of the\n[Unity Test Framework](https://github.com/ThrowTheSwitch/Unity). Unity (not to\nbe confused with the far more popular graphics framework) is a unit testing\nframework optimized for embedded C. This module is intended to solve a couple\nof problems related to using Unity and to unit testing embedded apps in\ngeneral:\n\n* Unity does not have a built-in method for generating XML or HTML output which\n  can be parsed by CI systems.\n* Unity tests are often run in a simulator or directly on target hardware,\n  where the exit code of the test process cannot be captured. In these cases,\n  parsing the output is often the only possible method for determining whether\n  the tests passed or failed.\n\nThis module can parse the output of basic Unity tests, of the form:\n```\npath/to/file.c:100:test_name:PASS\npath/to/file.c:101:other_test_name:FAIL: Expected 1 Was 2\n```\n\nIt can also parse the output of the Unity Fixture add-on, which groups tests\ninto test groups or \"fixtures\":\n```\nTEST(group, test_name)path/to/file.c:100::FAIL: Expected 1 Was 2\n```\n\n## Installation\n\nunity-test-parser can be installed with `pip`:\n\n```\npip install unity-test-parser\n```\n\n## Usage\n\n### Getting Started\n\nUse the `UnityTestResults` object to do the initial parsing of Unity test\noutput. Assuming your test output is in a file, you can do:\n\n```python\nimport unity_test_parser\n\nwith open(\"results_file.txt\", \"r\") as results_file:\n    # This will raise ValueError if the results are improperly formatted\n    results = unity_test_parser.TestResults(results_file.read())\n```\n\nYou can inspect the individual tests, each represented by a UnityTest object:\n\n```python\nfor test in results.test_iter():\n    print(\"Test: {} Result was: {}\".format(test.name(), test.result()))\n```\n\nTo convert the tests to JUnit XML:\n```python\nimport junit_xml\n\nwith open(\"test_results.xml\", \"w\") as out_file:\n    junit_xml.TestSuite.to_file(out_file, [results.to_junit()])\n```\n\n### Test Results Format\n\nCurrently two types of Unity output are supported for parsing: The output of\nUnity used on its own (`UNITY_BASIC`) and the output of the unity_fixture extra\ninvoked with the `-v` flag (`UNITY_FIXTURE_VERBOSE`). Use the second `__init__`\nargument to the `TestResults` object to specify which format is being parsed.\n`UNITY_BASIC` is the default. If the results are in an invalid format,\nValueError is raised.\n\n```python\nresults = unity_test_parser.TestResults(basic_results_file.read(), unity_test_parser.UNITY_BASIC)\n\nfixture_results = unity_test_parser.TestResults(fixture_results_file.read(),\n                                                unity_test_parser.UNITY_FIXTURE_VERBOSE)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ETCLabs/unity-test-parser", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "unity-test-parser", "package_url": "https://pypi.org/project/unity-test-parser/", "platform": "", "project_url": "https://pypi.org/project/unity-test-parser/", "project_urls": {"Homepage": "https://github.com/ETCLabs/unity-test-parser"}, "release_url": "https://pypi.org/project/unity-test-parser/0.1.1/", "requires_dist": ["junit-xml (>=1.8)"], "requires_python": ">=3", "summary": "Parse the output of the Unity Test Framework for C", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Unity Test Parser</h1>\n<p><a href=\"https://dev.azure.com/ETCLabs/unity-test-parser/_build/latest?definitionId=7&amp;branchName=develop\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76d86c53ce65c6cb047ca13e440f322041770a7f/68747470733a2f2f6465762e617a7572652e636f6d2f4554434c6162732f756e6974792d746573742d7061727365722f5f617069732f6275696c642f7374617475732f4554434c6162732e756e6974792d746573742d7061727365723f6272616e63684e616d653d646576656c6f70\"></a></p>\n<p>A Python 3 module for parsing the console output of the\n<a href=\"https://github.com/ThrowTheSwitch/Unity\" rel=\"nofollow\">Unity Test Framework</a>. Unity (not to\nbe confused with the far more popular graphics framework) is a unit testing\nframework optimized for embedded C. This module is intended to solve a couple\nof problems related to using Unity and to unit testing embedded apps in\ngeneral:</p>\n<ul>\n<li>Unity does not have a built-in method for generating XML or HTML output which\ncan be parsed by CI systems.</li>\n<li>Unity tests are often run in a simulator or directly on target hardware,\nwhere the exit code of the test process cannot be captured. In these cases,\nparsing the output is often the only possible method for determining whether\nthe tests passed or failed.</li>\n</ul>\n<p>This module can parse the output of basic Unity tests, of the form:</p>\n<pre><code>path/to/file.c:100:test_name:PASS\npath/to/file.c:101:other_test_name:FAIL: Expected 1 Was 2\n</code></pre>\n<p>It can also parse the output of the Unity Fixture add-on, which groups tests\ninto test groups or \"fixtures\":</p>\n<pre><code>TEST(group, test_name)path/to/file.c:100::FAIL: Expected 1 Was 2\n</code></pre>\n<h2>Installation</h2>\n<p>unity-test-parser can be installed with <code>pip</code>:</p>\n<pre><code>pip install unity-test-parser\n</code></pre>\n<h2>Usage</h2>\n<h3>Getting Started</h3>\n<p>Use the <code>UnityTestResults</code> object to do the initial parsing of Unity test\noutput. Assuming your test output is in a file, you can do:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unity_test_parser</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"results_file.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">results_file</span><span class=\"p\">:</span>\n    <span class=\"c1\"># This will raise ValueError if the results are improperly formatted</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">unity_test_parser</span><span class=\"o\">.</span><span class=\"n\">TestResults</span><span class=\"p\">(</span><span class=\"n\">results_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</pre>\n<p>You can inspect the individual tests, each represented by a UnityTest object:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">test</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">test_iter</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Test: </span><span class=\"si\">{}</span><span class=\"s2\"> Result was: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">(),</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()))</span>\n</pre>\n<p>To convert the tests to JUnit XML:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">junit_xml</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"test_results.xml\"</span><span class=\"p\">,</span> <span class=\"s2\">\"w\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">out_file</span><span class=\"p\">:</span>\n    <span class=\"n\">junit_xml</span><span class=\"o\">.</span><span class=\"n\">TestSuite</span><span class=\"o\">.</span><span class=\"n\">to_file</span><span class=\"p\">(</span><span class=\"n\">out_file</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">to_junit</span><span class=\"p\">()])</span>\n</pre>\n<h3>Test Results Format</h3>\n<p>Currently two types of Unity output are supported for parsing: The output of\nUnity used on its own (<code>UNITY_BASIC</code>) and the output of the unity_fixture extra\ninvoked with the <code>-v</code> flag (<code>UNITY_FIXTURE_VERBOSE</code>). Use the second <code>__init__</code>\nargument to the <code>TestResults</code> object to specify which format is being parsed.\n<code>UNITY_BASIC</code> is the default. If the results are in an invalid format,\nValueError is raised.</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">unity_test_parser</span><span class=\"o\">.</span><span class=\"n\">TestResults</span><span class=\"p\">(</span><span class=\"n\">basic_results_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">unity_test_parser</span><span class=\"o\">.</span><span class=\"n\">UNITY_BASIC</span><span class=\"p\">)</span>\n\n<span class=\"n\">fixture_results</span> <span class=\"o\">=</span> <span class=\"n\">unity_test_parser</span><span class=\"o\">.</span><span class=\"n\">TestResults</span><span class=\"p\">(</span><span class=\"n\">fixture_results_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span>\n                                                <span class=\"n\">unity_test_parser</span><span class=\"o\">.</span><span class=\"n\">UNITY_FIXTURE_VERBOSE</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6182435, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a1b8562d5ec51652118435d71af0f898", "sha256": "fa48dad029b826cef3e4f84a2e6a3edc2878768b741d45471523f799f5f21a50"}, "downloads": -1, "filename": "unity_test_parser-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a1b8562d5ec51652118435d71af0f898", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 10361, "upload_time": "2019-11-22T16:22:59", "upload_time_iso_8601": "2019-11-22T16:22:59.925189Z", "url": "https://files.pythonhosted.org/packages/90/c0/c386c6d1d11ba690c33313e8937291388bb820420dba204348220fb7c93d/unity_test_parser-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2627ceef997b5d9b856c8afc86cc77d5", "sha256": "e9e29e926e4a4f1bf07c620d527122f7b696a4e1bd77378c08f5ea110ee1b466"}, "downloads": -1, "filename": "unity-test-parser-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2627ceef997b5d9b856c8afc86cc77d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 10957, "upload_time": "2019-11-22T16:23:01", "upload_time_iso_8601": "2019-11-22T16:23:01.887318Z", "url": "https://files.pythonhosted.org/packages/e2/80/19fdff569ffae376f8492e433f51432239f3ab1e0f65ad20c1a690fed11c/unity-test-parser-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2e73e5bbe0ce64b45a7125a95d803bf5", "sha256": "fb5ac328f56eb35e475a53becb25b704a3ee3f4587b30ba847537e9b7154cd70"}, "downloads": -1, "filename": "unity_test_parser-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2e73e5bbe0ce64b45a7125a95d803bf5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 10366, "upload_time": "2019-11-22T17:00:34", "upload_time_iso_8601": "2019-11-22T17:00:34.217932Z", "url": "https://files.pythonhosted.org/packages/96/06/a399675894fea6084da260bbc7bf57b7347342c70b1042e1c45eb1b8ee80/unity_test_parser-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3bfcff3dd6d72a19ef7569710cff057d", "sha256": "6a04aa69418ff2b68298addd569b24ef0a07203b7a3a9376304c15eab6bcdabf"}, "downloads": -1, "filename": "unity-test-parser-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3bfcff3dd6d72a19ef7569710cff057d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 11349, "upload_time": "2019-11-22T17:00:35", "upload_time_iso_8601": "2019-11-22T17:00:35.601111Z", "url": "https://files.pythonhosted.org/packages/19/88/5b4734cfeab1b913394426bb28777f59536a973bbcd9cfb46133ec554b8d/unity-test-parser-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e73e5bbe0ce64b45a7125a95d803bf5", "sha256": "fb5ac328f56eb35e475a53becb25b704a3ee3f4587b30ba847537e9b7154cd70"}, "downloads": -1, "filename": "unity_test_parser-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2e73e5bbe0ce64b45a7125a95d803bf5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 10366, "upload_time": "2019-11-22T17:00:34", "upload_time_iso_8601": "2019-11-22T17:00:34.217932Z", "url": "https://files.pythonhosted.org/packages/96/06/a399675894fea6084da260bbc7bf57b7347342c70b1042e1c45eb1b8ee80/unity_test_parser-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3bfcff3dd6d72a19ef7569710cff057d", "sha256": "6a04aa69418ff2b68298addd569b24ef0a07203b7a3a9376304c15eab6bcdabf"}, "downloads": -1, "filename": "unity-test-parser-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3bfcff3dd6d72a19ef7569710cff057d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 11349, "upload_time": "2019-11-22T17:00:35", "upload_time_iso_8601": "2019-11-22T17:00:35.601111Z", "url": "https://files.pythonhosted.org/packages/19/88/5b4734cfeab1b913394426bb28777f59536a973bbcd9cfb46133ec554b8d/unity-test-parser-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:16 2020"}