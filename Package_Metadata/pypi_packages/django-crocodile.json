{"info": {"author": "Daniel Quinn", "author_email": "code@danielquinn.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# django-crocodile\n\nA simple CSS and Javascript aggregator for django\n\nIf you're looking for a simple way to aggregate all of your various style\nsheets into a single download, and do the same for your JavaScript files, this\nis a good start.  Here's how it works:\n\nThis is what you probably have on your site.  If you don't, then you probably\ndon't need an aggregator:\n\n``` xml\n{% block css %}\n  <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ STATIC_URL }}appname/css/somefile.css\" />\n  <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ MEDIA_URL }}path/to/something/else.css\" />\n  <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"https://www.somedomain.ca/path/to/remote/file.css\" />\n  <style>\n    .classname {\n      background-image: url(\"{{ STATIC_URL }}awesome.png\");\n    }\n  </style>\n{% endblock css %}\n\n{% block js %}\n  <script type=\"text/javascript\" src=\"{{ STATIC_URL }}appname/js/somefile.js\"></script>\n  <script type=\"text/javascript\" src=\"{{ MEDIA_URL }}path/to/something/else.js\"></script>\n  <script type=\"text/javascript\" src=\"https://www.somedomain.ca/path/to/remote/file.js\"></script>\n  <script>\n    alert(\"Keep being awesome!\");\n  </script>\n{% endblock js %}\n```\n\nThis isn't ideal, since you're left with multiple server hits, sometimes to\nremote servers.  In some of the more complex setups, your site could have 10 or\neven 20 CSS and/or JS files.  What's more, you probably have `{% block css %}`\nand `{% block js %}` subclassed elsewhere on your site, so this list of files\nis variable.\n\nCrocodile is setup with a simple template tag:\n\n``` xml\n{% aggregate_css %}\n  {% block css %}\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ STATIC_URL }}appname/css/somefile.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ MEDIA_URL }}path/to/something/else.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"https://www.somedomain.ca/path/to/remote/file.css\" />\n    <style>\n      .classname {\n        background-image: url(\"{{ STATIC_URL }}awesome.png\");\n      }\n    </style>\n  {% endblock css %}\n{% endaggregate_css %}\n\n{% aggregate_js %}\n  {% block js %}\n    <script type=\"text/javascript\" src=\"{{ STATIC_URL }}appname/js/somefile.js\"></script>\n    <script type=\"text/javascript\" src=\"{{ MEDIA_URL }}path/to/something/else.js\"></script>\n    <script type=\"text/javascript\" src=\"https://www.somedomain.ca/path/to/remote/file.js\"></script>\n    <script>\n      alert(\"Keep being awesome!\");\n    </script>\n  {% endblock js %}\n{% endaggregate_js %}\n```\n\nAnd the output looks something like this:\n\n``` xml\n<script src=\"YOUR_MEDIA_URL/cache/js/md5-sum-of-markup.js?release=YOUR_RELEASE_TAG\" />\n<script src=\"YOUR_MEDIA_URL/cache/css/md5-sum-of-markup.css?release=YOUR_RELEASE_TAG\" />\n```\n\nThe contents of `file.css` and `file.js` are the combined payloads of every\nfile listed between the `{% aggregate_* %} and {% endaggregate_* %}` tags.\nThis will even include remote files and literal blocks if you put them in\nthere.\n\n\n## But What if I Don't Want to Aggregate Everything?\n\nIt's entirely possible that you may not want all of these files to be loaded at\nonce, as in cases where you may want to force the remote loading of some files.\nTo do that, you just keep those definitions out of the aggregate block:\n\n``` xml\n{% aggregate_css %}\n  {% block css %}\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ STATIC_URL }}appname/css/somefile.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ MEDIA_URL }}path/to/something/else.css\" />\n    <style>\n      .classname {\n        background-image: url(\"{{ STATIC_URL }}awesome.png\");\n      }\n    </style>\n  {% endblock css %}\n{% endaggregate_css %}\n\n{% block my_special_case_css %}\n  <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"https://www.somedomain.ca/path/to/remote/file.css\" />\n{% endblock my_special_case_css %}\n```\n\nEverything outside of the aggregation block is left alone.\n\n\n## Setup & Installation\n\nTo install it into your project, just use `pip`.  Either using pypi:\n\n``` bash\n$ pip install django-crocodile\n```\n\nOr you can grab the development version through GitHub:\n\n``` bash\n$ pip install git+git://github.com/danielquinn/django-crocodile.git#egg=django-crocodile\n```\n\nOnce you've got it, you'll need to add it to your `INSTALLED_APPS` in your\n`settings.py` file.  Some additional values you might want to tinker with are:\n\n* `RELEASE`\n  * This is the release version of your project.  `django-crocodile` will\n    append this value in the form of `?release=RELEASE` so you don't have to\n    worry about users caching your old CSS values.\n* `CROCODILE_ENABLE`\n  * If this is set to `True`, aggregation will occur even when `DEBUG = True`.\n* `CROCODILE_ENABLE_COMPRESSION`\n  * CSS compression is enabled by default.  Setting this value to `False`\n    will disable it.\n\nAnd that's it, now go about wrapping your markup and see what happens!\n\n\n## TODO\n\n* A management script to blow away the cache files.  Just to make things a\n  little cleaner than forcing you to run `rm /path/to/media/root/cache/{css,js}/*`\n* Medium-aware CSS is still sketchy.  Basically it currently grabs all CSS\n  files that aren't set to `media=\"print\"` and dumps them into the aggregated\n  `.css` file.  If you have a printable .css file, it's best to keep it out of\n  your aggregation block for this reason.\n  * Other media types are just rolled into the aggregated file, so that may\n    cause some headaches.\n* Exploder-specific CSS tags (`<!-- if IE lt 8>`) are also ignored.  *Ew*.\n\n\n## But Why \"Crocodile\"?\n\nBecause it's an *aggregator*, which is like *alligator*... get it?  Shut up,\nI'm hilarious.\n\n\n## Disclaimers\n\nThis is all still pretty new, so use at your own risk.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/danielquinn/django-crocodile", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danielquinn/django-crocodile", "keywords": null, "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "django-crocodile", "package_url": "https://pypi.org/project/django-crocodile/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-crocodile/", "project_urls": {"Download": "https://github.com/danielquinn/django-crocodile", "Homepage": "https://github.com/danielquinn/django-crocodile"}, "release_url": "https://pypi.org/project/django-crocodile/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "A simple CSS and Javascript aggregator for Django", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # django-crocodile<br><br>A simple CSS and Javascript aggregator for django<br><br>If you're looking for a simple way to aggregate all of your various style<br>sheets into a single download, and do the same for your JavaScript files, this<br>is a good start.  Here's how it works:<br><br>This is what you probably have on your site.  If you don't, then you probably<br>don't need an aggregator:<br><br>``` xml<br>{% block css %}<br>  &lt;link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ STATIC_URL }}appname/css/somefile.css\" /&gt;<br>  &lt;link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ MEDIA_URL }}path/to/something/else.css\" /&gt;<br>  &lt;link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"https://www.somedomain.ca/path/to/remote/file.css\" /&gt;<br>  &lt;style&gt;<br>    .classname {<br>      background-image: url(\"{{ STATIC_URL }}awesome.png\");<br>    }<br>  &lt;/style&gt;<br>{% endblock css %}<br><br>{% block js %}<br>  &lt;script type=\"text/javascript\" src=\"{{ STATIC_URL }}appname/js/somefile.js\"&gt;&lt;/script&gt;<br>  &lt;script type=\"text/javascript\" src=\"{{ MEDIA_URL }}path/to/something/else.js\"&gt;&lt;/script&gt;<br>  &lt;script type=\"text/javascript\" src=\"https://www.somedomain.ca/path/to/remote/file.js\"&gt;&lt;/script&gt;<br>  &lt;script&gt;<br>    alert(\"Keep being awesome!\");<br>  &lt;/script&gt;<br>{% endblock js %}<br>```<br><br>This isn't ideal, since you're left with multiple server hits, sometimes to<br>remote servers.  In some of the more complex setups, your site could have 10 or<br>even 20 CSS and/or JS files.  What's more, you probably have `{% block css %}`<br>and `{% block js %}` subclassed elsewhere on your site, so this list of files<br>is variable.<br><br>Crocodile is setup with a simple template tag:<br><br>``` xml<br>{% aggregate_css %}<br>  {% block css %}<br>    &lt;link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ STATIC_URL }}appname/css/somefile.css\" /&gt;<br>    &lt;link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ MEDIA_URL }}path/to/something/else.css\" /&gt;<br>    &lt;link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"https://www.somedomain.ca/path/to/remote/file.css\" /&gt;<br>    &lt;style&gt;<br>      .classname {<br>        background-image: url(\"{{ STATIC_URL }}awesome.png\");<br>      }<br>    &lt;/style&gt;<br>  {% endblock css %}<br>{% endaggregate_css %}<br><br>{% aggregate_js %}<br>  {% block js %}<br>    &lt;script type=\"text/javascript\" src=\"{{ STATIC_URL }}appname/js/somefile.js\"&gt;&lt;/script&gt;<br>    &lt;script type=\"text/javascript\" src=\"{{ MEDIA_URL }}path/to/something/else.js\"&gt;&lt;/script&gt;<br>    &lt;script type=\"text/javascript\" src=\"https://www.somedomain.ca/path/to/remote/file.js\"&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>      alert(\"Keep being awesome!\");<br>    &lt;/script&gt;<br>  {% endblock js %}<br>{% endaggregate_js %}<br>```<br><br>And the output looks something like this:<br><br>``` xml<br>&lt;script src=\"YOUR_MEDIA_URL/cache/js/md5-sum-of-markup.js?release=YOUR_RELEASE_TAG\" /&gt;<br>&lt;script src=\"YOUR_MEDIA_URL/cache/css/md5-sum-of-markup.css?release=YOUR_RELEASE_TAG\" /&gt;<br>```<br><br>The contents of `file.css` and `file.js` are the combined payloads of every<br>file listed between the `{% aggregate_* %} and {% endaggregate_* %}` tags.<br>This will even include remote files and literal blocks if you put them in<br>there.<br><br><br>## But What if I Don't Want to Aggregate Everything?<br><br>It's entirely possible that you may not want all of these files to be loaded at<br>once, as in cases where you may want to force the remote loading of some files.<br>To do that, you just keep those definitions out of the aggregate block:<br><br>``` xml<br>{% aggregate_css %}<br>  {% block css %}<br>    &lt;link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ STATIC_URL }}appname/css/somefile.css\" /&gt;<br>    &lt;link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{{ MEDIA_URL }}path/to/something/else.css\" /&gt;<br>    &lt;style&gt;<br>      .classname {<br>        background-image: url(\"{{ STATIC_URL }}awesome.png\");<br>      }<br>    &lt;/style&gt;<br>  {% endblock css %}<br>{% endaggregate_css %}<br><br>{% block my_special_case_css %}<br>  &lt;link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"https://www.somedomain.ca/path/to/remote/file.css\" /&gt;<br>{% endblock my_special_case_css %}<br>```<br><br>Everything outside of the aggregation block is left alone.<br><br><br>## Setup &amp; Installation<br><br>To install it into your project, just use `pip`.  Either using pypi:<br><br>``` bash<br>$ pip install django-crocodile<br>```<br><br>Or you can grab the development version through GitHub:<br><br>``` bash<br>$ pip install git+git://github.com/danielquinn/django-crocodile.git#egg=django-crocodile<br>```<br><br>Once you've got it, you'll need to add it to your `INSTALLED_APPS` in your<br>`settings.py` file.  Some additional values you might want to tinker with are:<br><br>* `RELEASE`<br>  * This is the release version of your project.  `django-crocodile` will<br>    append this value in the form of `?release=RELEASE` so you don't have to<br>    worry about users caching your old CSS values.<br>* `CROCODILE_ENABLE`<br>  * If this is set to `True`, aggregation will occur even when `DEBUG = True`.<br>* `CROCODILE_ENABLE_COMPRESSION`<br>  * CSS compression is enabled by default.  Setting this value to `False`<br>    will disable it.<br><br>And that's it, now go about wrapping your markup and see what happens!<br><br><br>## TODO<br><br>* A management script to blow away the cache files.  Just to make things a<br>  little cleaner than forcing you to run `rm /path/to/media/root/cache/{css,js}/*`<br>* Medium-aware CSS is still sketchy.  Basically it currently grabs all CSS<br>  files that aren't set to `media=\"print\"` and dumps them into the aggregated<br>  `.css` file.  If you have a printable .css file, it's best to keep it out of<br>  your aggregation block for this reason.<br>  * Other media types are just rolled into the aggregated file, so that may<br>    cause some headaches.<br>* Exploder-specific CSS tags (`&lt;!-- if IE lt 8&gt;`) are also ignored.  *Ew*.<br><br><br>## But Why \"Crocodile\"?<br><br>Because it's an *aggregator*, which is like *alligator*... get it?  Shut up,<br>I'm hilarious.<br><br><br>## Disclaimers<br><br>This is all still pretty new, so use at your own risk.\n          </div>"}, "last_serial": 754665, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "25e19f2e4605f80893d5170f3ff76b0b", "sha256": "e9bbb28c1cf0bfd73b131c30c2962b3c4801e2c717a37c9cfd87e1442132f2f3"}, "downloads": -1, "filename": "django-crocodile-0.4.tar.gz", "has_sig": false, "md5_digest": "25e19f2e4605f80893d5170f3ff76b0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20437, "upload_time": "2013-06-02T11:21:49", "upload_time_iso_8601": "2013-06-02T11:21:49.141405Z", "url": "https://files.pythonhosted.org/packages/1e/eb/dbe55f6118e3e11116e37be9c65c2513250b29d72ea1b4008abe30a614b7/django-crocodile-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "bcb42f594b18c90627231e4cbb4b8f9a", "sha256": "a426b43515c90b1a42d0eabc6cc4e6eb0c7a2b607d5908d7a7afa0f26585442a"}, "downloads": -1, "filename": "django-crocodile-0.4.1.tar.gz", "has_sig": false, "md5_digest": "bcb42f594b18c90627231e4cbb4b8f9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23172, "upload_time": "2013-06-06T09:33:27", "upload_time_iso_8601": "2013-06-06T09:33:27.806313Z", "url": "https://files.pythonhosted.org/packages/0b/47/baf01af226760f94338d91257b53b903c71b283265c395cf4152d80a43cf/django-crocodile-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bcb42f594b18c90627231e4cbb4b8f9a", "sha256": "a426b43515c90b1a42d0eabc6cc4e6eb0c7a2b607d5908d7a7afa0f26585442a"}, "downloads": -1, "filename": "django-crocodile-0.4.1.tar.gz", "has_sig": false, "md5_digest": "bcb42f594b18c90627231e4cbb4b8f9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23172, "upload_time": "2013-06-06T09:33:27", "upload_time_iso_8601": "2013-06-06T09:33:27.806313Z", "url": "https://files.pythonhosted.org/packages/0b/47/baf01af226760f94338d91257b53b903c71b283265c395cf4152d80a43cf/django-crocodile-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:47 2020"}