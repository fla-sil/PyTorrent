{"info": {"author": "Jacob Oscarson", "author_email": "jacob@414soft.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "Funcy Kingston\n==============\n\nI use the excellent `Funcy <https://funcy.readthedocs.io/>`__ library\nfor Python a lot. This is my collection of extras that I have designed\nto work closely together with funcy. Funcy Kingston (Reference, see\n`here <https://youtu.be/U79o7qwul48>`__).\n\nKingston is auto-formatted using\n`yapf <https://github.com/google/yapf>`__.\n\nNice things\n-----------\n\ndig()\n~~~~~\n\nCSS selector like deep value grabbing from almost any object.\n\n.. code:: python\n\n   >>> from kingston import dig\n   >>> dig.xget((1, 2, 3), 1)\n   2\n   >>> dig.xget({'foo': 'bar'}, 'foo')\n   'bar'\n   >>> dig.dig({'foo': 1, 'bar': [1,2,3]}, 'bar.1')\n   2\n   >>> dig.dig({'foo': 1, 'bar': [1,{'baz':'jox'},3]}, 'bar.1.baz')\n   'jox'\n   >>>\n\nThe difference between ``dig.dig()`` and ``funcy.get_in()`` is that you\ncan use shell-like blob patterns to get several values keyed by similar\nnames:\n\n.. code:: python\n\n   >>> from kingston import dig\n   >>> res = dig.dig({'foo': 1, 'foop': 2}, 'f*')\n   >>> res\n   [foo=1:int, foop=2:int]\n   >>> # (textual representation of an indexable object)\n   >>> res[0]\n   foo=1:int\n   >>> res[1]\n   foop=2:int\n   >>>\n\nPattern matching using extended ``dict``'s\n------------------------------------------\n\n``match.Match`` objects are callable objects using a ``dict`` semantic\nthat also matches calls based on the type of the calling parameters:\n\n.. code:: python\n\n   >>> from kingston import match\n   >>> foo = match.Match({int: lambda x: x*100, str: lambda x: f'Hello {x}'})\n   >>> foo(10)\n   1000\n   >>> foo('bar')\n   'Hello bar'\n   >>>\n\n.. code:: python\n\n   >>> from kingston import match\n   >>> foo = match.Match({\n   ...     int: lambda x: x * 100,\n   ...     str: lambda x: f'Hello {x}',\n   ...     (int, int): lambda a, b: a + b\n   ... })\n   >>> foo(10)\n   1000\n   >>> foo('bar')\n   'Hello bar'\n   >>>\n   >>> foo(1, 2)\n   3\n   >>>\n\nYou can use ``typing.Any`` as a wildcard:\n\n.. code:: python\n\n   >>> from typing import Any\n   >>> from kingston import match\n   >>> foo = match.Match({\n   ...     int: lambda x: x * 100,\n   ...     str: (lambda x: f\"Hello {x}\"),\n   ...     (int, Any): (lambda num, x: num * x)\n   ... })\n   >>> foo(10)\n   1000\n   >>> foo('bar')\n   'Hello bar'\n   >>> foo(3, 'X')\n   'XXX'\n   >>> foo(10, 10)\n   100\n   >>>\n\nMatch by value(s)\n~~~~~~~~~~~~~~~~~\n\n``match.VMatch`` will use the *values* of the parameters to do the same\nas as ``match.Match``:\n\n.. code:: python\n\n   >>> from kingston import match\n   >>> foo = match.VMatch({'x': (lambda: 'An x!'), ('x', 'y'): (lambda x,y: 3*(x+y))})\n   >>> foo('x')\n   'An x!'\n   >>> foo('x', 'y')\n   'xyxyxy'\n   >>>\n\nSame as with the type matcher above, ``typing.Any`` works as a wildcard\nwith the value matcher as well:\n\n.. code:: python\n\n   >>> from kingston import match\n   >>> from typing import Any\n   >>> foo = match.VMatch({\n   ...     'x': lambda x: 'An X!',\n   ...     ('y', Any): lambda x, y: 3 * (x + y)\n   ... })\n   >>> foo('x')\n   'An X!'\n   >>> foo('y', 'x')\n   'yxyxyx'\n   >>>\n\nNarrowable collections\n----------------------\n\nUses indexes to narrow collections to fewer values. You can narrow by\ntype, a predicate function or value equality. The return value is always\na new ``Narrowable`` derived type from the initial value. Therefore, you\ncan chain several narrowing operations in the same expression.\n\nErrors raised by the narrowing predicates are considered misses.\n\nSome examples:\n\nNarrow by type\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n   >>> from kingston.primitives import narrowable\n   >>> narrowable((1,2,3,'foo', 'bar'))[int]\n   (1, 2, 3)\n   >>>\n\nNarrow by callable\n~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   >>> from kingston.primitives import narrowable\n   >>> narrowable((1, 2, 3))[lambda x: x > 1]\n   (2, 3)\n   >>>\n   >>> narrowable((1,2,3,'foo', 'bar'))[int]\n   (1, 2, 3)\n   >>> narrowable((1,2,3,'foo', 'bar'))[lambda x: x > 1]\n   (2, 3)\n   >>> # Note, swallows ValueError raised by 'foo' > 1 etc\n   >>>\n\nSupress empty iterable objects\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   >>> from kingston.primitives import narrowable\n   >>> narrowable([[1], [2], [], []])[lambda x: x[0]]\n   [[1], [2]]\n   >>>\n\nNarrow using exact match\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   >>> from kingston.primitives import narrowable\n   >>> narrowable((1, 2, 3, 'foo'))['foo']\n   ('foo',)\n   >>>\n\nNarrow using a regexp\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   >>> from kingston.primitives import narrowable\n   >>> import re\n   >>> narrowable(('foo', 'fom', 'jox', 8, 'fim'))[re.compile('fo.*').match]\n   ('foo', 'fom')\n   >>>\n\nCombine\n~~~~~~~\n\n.. code:: python\n\n   >>> from kingston.primitives import narrowable\n   >>> narrowable((1,2,3,'foo', 'bar'))[str]['foo']\n   ('foo',)\n   >>>\n\nGo deeper\n---------\n\n.. code:: python\n\n   >>> from kingston.primitives import narrowable\n   >>> narrowable((1, 2, 3, (41, 42, 43)))[tuple][0][lambda x: x > 41]\n   (42, 43)\n   >>>\n\nNo matches found\n~~~~~~~~~~~~~~~~\n\nIf no element matches, an empty version of the collection parameter will\nbe returned:\n\n.. code:: python\n\n   >>> from kingston.primitives import narrowable\n   >>> narrowable((1,2,3))[lambda x: x > 3]\n   ()\n   >>>\n\nProgrammatic class creation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nProgrammatic creation of arbitrary named classes in module definition,\nadd methods using a decorator notation:\n\n.. code:: python\n\n   >>> from kingston import lang\n   >>> mystuff = (('Foo', 1), ('Bar', 2))\n   >>> for name, num in mystuff: locals()[name] = lang.mkclass(name, **{'num': num})\n   >>> Foo\n   <class 'kingston.lang.Foo'>\n   >>> Foo.num\n   1\n   >>> \\\n   ... @Foo.classmethod\n   ... def myclassmethod(cls, x):\n   ...     return x + 1\n   >>> Foo.myclassmethod(1)\n   2\n   >>>\n   >>> \\\n   ... @Foo.staticmethod\n   ... def mystaticmethod(x, y):\n   ...     return x + y\n   >>> Foo.mystaticmethod(1, 2)\n   3\n   >>> \\\n   ... @Foo.method\n   ... def mymethod(self, x):\n   ...     self.y = self.num + x\n   ...     return self.y\n   >>> foo = Foo()\n   >>> foo.mymethod(1)\n   2\n   >>> foo.y\n   2\n   >>>\n\nkingston module with developer convenience tools\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``kingston.microscope`` module contains utilities that aid\ndevelopment. It has to ways to inspect live objects:\n\n#. Via 'AbneuYAML'\n\n   AbneuYAML is *\u201cAlmost, but not entirely unlike YAML\u201d*. Objects dumped\n   to \u2018AbneuYAML\u2019 should be easy to get a visual overview of for humans.\n\n   To dump any object:\n\n   .. code:: python\n\n      >>> from kingston import microscope\n      >>> class Cls: pass\n      ...\n      >>> c = Cls()\n      >>> c.foo, c.bar = 1, 2\n      >>> c.sub = Cls()\n      >>> c.sub.foo, c.sub.bar, c.sub.baz = 3, 4, [1, 2]\n      >>> encoded = microscope.abneuyaml(c)\n      >>> print(encoded) #doctest: +ELLIPSIS\n      <__main__.Cls object at 0x...>:Cls\n        foo=1:int\n        bar=2:int\n        sub=<__main__.Cls object at 0x...>:Cls\n          foo=3:int\n          bar=4:int\n          baz=[1, 2]:list\n      >>>\n\nA simple way of creating small DSL's using Python operator overloading.\n-----------------------------------------------------------------------\n\n.. code:: python\n\n   >>> from kingston import lang\n   >>> \\\n   ... class PipingExample(lang.Piping):\n   ...     def __add__(self, value) -> lang.Piping:\n   ...         self.queue(lambda a, b: a + b, value)\n   ...         return self\n   ...\n   >>> simplest_pipe = PipingExample(10)\n   >>> res = simplest_pipe + 10 + 20\n   >>> res()\n   40\n   >>>\n\nMostly, you'll want to use the pipe operator to define simple\ncomposition:\n\n.. code:: python\n\n   >>> from kingston import lang\n   >>> incr = lambda x: x + 1\n   >>> showr = \"It is {}!\".format\n   >>> (lang.ComposePiping(5) >> incr >> incr >> showr)()\n   'It is 7!'\n   >>>", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.414soft.com/kingston", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "kingston", "package_url": "https://pypi.org/project/kingston/", "platform": "", "project_url": "https://pypi.org/project/kingston/", "project_urls": {"Homepage": "https://www.414soft.com/kingston"}, "release_url": "https://pypi.org/project/kingston/0.6.4/", "requires_dist": null, "requires_python": "", "summary": "Some Python nicieties", "version": "0.6.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>I use the excellent <a href=\"https://funcy.readthedocs.io/\" rel=\"nofollow\">Funcy</a> library\nfor Python a lot. This is my collection of extras that I have designed\nto work closely together with funcy. Funcy Kingston (Reference, see\n<a href=\"https://youtu.be/U79o7qwul48\" rel=\"nofollow\">here</a>).</p>\n<p>Kingston is auto-formatted using\n<a href=\"https://github.com/google/yapf\" rel=\"nofollow\">yapf</a>.</p>\n<div id=\"nice-things\">\n<h2>Nice things</h2>\n<h2 id=\"dig\"><span class=\"section-subtitle\">dig()</span></h2>\n<p>CSS selector like deep value grabbing from almost any object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">dig</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dig</span><span class=\"o\">.</span><span class=\"n\">xget</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dig</span><span class=\"o\">.</span><span class=\"n\">xget</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">},</span> <span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"s1\">'bar'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dig</span><span class=\"o\">.</span><span class=\"n\">dig</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]},</span> <span class=\"s1\">'bar.1'</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dig</span><span class=\"o\">.</span><span class=\"n\">dig</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,{</span><span class=\"s1\">'baz'</span><span class=\"p\">:</span><span class=\"s1\">'jox'</span><span class=\"p\">},</span><span class=\"mi\">3</span><span class=\"p\">]},</span> <span class=\"s1\">'bar.1.baz'</span><span class=\"p\">)</span>\n<span class=\"s1\">'jox'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>The difference between <tt>dig.dig()</tt> and <tt>funcy.get_in()</tt> is that you\ncan use shell-like blob patterns to get several values keyed by similar\nnames:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">dig</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">dig</span><span class=\"o\">.</span><span class=\"n\">dig</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'foop'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"s1\">'f*'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">res</span>\n<span class=\"p\">[</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">foop</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># (textual representation of an indexable object)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"nb\">int</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">foop</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"nb\">int</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"pattern-matching-using-extended-dict-s\">\n<h2>Pattern matching using extended <tt>dict</tt>\u2019s</h2>\n<p><tt>match.Match</tt> objects are callable objects using a <tt>dict</tt> semantic\nthat also matches calls based on the type of the calling parameters:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">Match</span><span class=\"p\">({</span><span class=\"nb\">int</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s1\">'Hello </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mi\">1000</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"s1\">'Hello bar'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">Match</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"nb\">int</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"nb\">str</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s1\">'Hello </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mi\">1000</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"s1\">'Hello bar'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>You can use <tt>typing.Any</tt> as a wildcard:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">Match</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"nb\">int</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"nb\">str</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"Hello </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mi\">1000</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"s1\">'Hello bar'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">)</span>\n<span class=\"s1\">'XXX'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"mi\">100</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<div id=\"match-by-value-s\">\n<h3>Match by value(s)</h3>\n<p><tt>match.VMatch</tt> will use the <em>values</em> of the parameters to do the same\nas as <tt>match.Match</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">VMatch</span><span class=\"p\">({</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"s1\">'An x!'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">))})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"s1\">'An x!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">)</span>\n<span class=\"s1\">'xyxyxy'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>Same as with the type matcher above, <tt>typing.Any</tt> works as a wildcard\nwith the value matcher as well:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">VMatch</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">'An X!'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"p\">(</span><span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">):</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"s1\">'An X!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"s1\">'yxyxyx'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"narrowable-collections\">\n<h2>Narrowable collections</h2>\n<p>Uses indexes to narrow collections to fewer values. You can narrow by\ntype, a predicate function or value equality. The return value is always\na new <tt>Narrowable</tt> derived type from the initial value. Therefore, you\ncan chain several narrowing operations in the same expression.</p>\n<p>Errors raised by the narrowing predicates are considered misses.</p>\n<p>Some examples:</p>\n<div id=\"narrow-by-type\">\n<h3>Narrow by type</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston.primitives</span> <span class=\"kn\">import</span> <span class=\"n\">narrowable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">narrowable</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">))[</span><span class=\"nb\">int</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"narrow-by-callable\">\n<h3>Narrow by callable</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston.primitives</span> <span class=\"kn\">import</span> <span class=\"n\">narrowable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">narrowable</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))[</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">narrowable</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">))[</span><span class=\"nb\">int</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">narrowable</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">))[</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Note, swallows ValueError raised by 'foo' &gt; 1 etc</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"supress-empty-iterable-objects\">\n<h3>Supress empty iterable objects</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston.primitives</span> <span class=\"kn\">import</span> <span class=\"n\">narrowable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">narrowable</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"p\">[]])[</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n<span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"narrow-using-exact-match\">\n<h3>Narrow using exact match</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston.primitives</span> <span class=\"kn\">import</span> <span class=\"n\">narrowable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">narrowable</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">))[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"narrow-using-a-regexp\">\n<h3>Narrow using a regexp</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston.primitives</span> <span class=\"kn\">import</span> <span class=\"n\">narrowable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">narrowable</span><span class=\"p\">((</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'fom'</span><span class=\"p\">,</span> <span class=\"s1\">'jox'</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">'fim'</span><span class=\"p\">))[</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s1\">'fo.*'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'fom'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"combine\">\n<h3>Combine</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston.primitives</span> <span class=\"kn\">import</span> <span class=\"n\">narrowable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">narrowable</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">))[</span><span class=\"nb\">str</span><span class=\"p\">][</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"go-deeper\">\n<h2>Go deeper</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston.primitives</span> <span class=\"kn\">import</span> <span class=\"n\">narrowable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">narrowable</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">)))[</span><span class=\"nb\">tuple</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">41</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<div id=\"no-matches-found\">\n<h3>No matches found</h3>\n<p>If no element matches, an empty version of the collection parameter will\nbe returned:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston.primitives</span> <span class=\"kn\">import</span> <span class=\"n\">narrowable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">narrowable</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))[</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"programmatic-class-creation\">\n<h3>Programmatic class creation</h3>\n<p>Programmatic creation of arbitrary named classes in module definition,\nadd methods using a decorator notation:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">lang</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mystuff</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"s1\">'Foo'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'Bar'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">mystuff</span><span class=\"p\">:</span> <span class=\"nb\">locals</span><span class=\"p\">()[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">mkclass</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s1\">'num'</span><span class=\"p\">:</span> <span class=\"n\">num</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">kingston</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">Foo</span><span class=\"s1\">'&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">num</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \\\n<span class=\"o\">...</span> <span class=\"nd\">@Foo</span><span class=\"o\">.</span><span class=\"n\">classmethod</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">myclassmethod</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">myclassmethod</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \\\n<span class=\"o\">...</span> <span class=\"nd\">@Foo</span><span class=\"o\">.</span><span class=\"n\">staticmethod</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">mystaticmethod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">mystaticmethod</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \\\n<span class=\"o\">...</span> <span class=\"nd\">@Foo</span><span class=\"o\">.</span><span class=\"n\">method</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">mymethod</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"n\">x</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">mymethod</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">y</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"kingston-module-with-developer-convenience-tools\">\n<h3>kingston module with developer convenience tools</h3>\n<p>The <tt>kingston.microscope</tt> module contains utilities that aid\ndevelopment. It has to ways to inspect live objects:</p>\n<ol>\n<li><p>Via \u2018AbneuYAML\u2019</p>\n<p>AbneuYAML is <em>\u201cAlmost, but not entirely unlike YAML\u201d</em>. Objects dumped\nto \u2018AbneuYAML\u2019 should be easy to get a visual overview of for humans.</p>\n<p>To dump any object:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">microscope</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Cls</span><span class=\"p\">:</span> <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Cls</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">sub</span> <span class=\"o\">=</span> <span class=\"n\">Cls</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">baz</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">encoded</span> <span class=\"o\">=</span> <span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">abneuyaml</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span> <span class=\"c1\">#doctest: +ELLIPSIS</span>\n<span class=\"o\">&lt;</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">Cls</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mi\">0</span><span class=\"n\">x</span><span class=\"o\">...&gt;</span><span class=\"p\">:</span><span class=\"n\">Cls</span>\n  <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"nb\">int</span>\n  <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"nb\">int</span>\n  <span class=\"n\">sub</span><span class=\"o\">=&lt;</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">Cls</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mi\">0</span><span class=\"n\">x</span><span class=\"o\">...&gt;</span><span class=\"p\">:</span><span class=\"n\">Cls</span>\n    <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"nb\">int</span>\n    <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"nb\">int</span>\n    <span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]:</span><span class=\"nb\">list</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</li>\n</ol>\n</div>\n</div>\n<div id=\"a-simple-way-of-creating-small-dsl-s-using-python-operator-overloading\">\n<h2>A simple way of creating small DSL\u2019s using Python operator overloading.</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">lang</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \\\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">PipingExample</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">Piping</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">Piping</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"bp\">self</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">simplest_pipe</span> <span class=\"o\">=</span> <span class=\"n\">PipingExample</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">simplest_pipe</span> <span class=\"o\">+</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"mi\">20</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">res</span><span class=\"p\">()</span>\n<span class=\"mi\">40</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>Mostly, you\u2019ll want to use the pipe operator to define simple\ncomposition:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kingston</span> <span class=\"kn\">import</span> <span class=\"n\">lang</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">incr</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">showr</span> <span class=\"o\">=</span> <span class=\"s2\">\"It is </span><span class=\"si\">{}</span><span class=\"s2\">!\"</span><span class=\"o\">.</span><span class=\"n\">format</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">ComposePiping</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">incr</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">incr</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">showr</span><span class=\"p\">)()</span>\n<span class=\"s1\">'It is 7!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6928340, "releases": {"0.6.3": [{"comment_text": "", "digests": {"md5": "bf7de0b1aa147c207178447dd8cc4f28", "sha256": "a5c874688e38a4e115985c398bc481e0d9f217a99b7ef065ed97f40620b63184"}, "downloads": -1, "filename": "kingston-0.6.3.tar.gz", "has_sig": false, "md5_digest": "bf7de0b1aa147c207178447dd8cc4f28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15792, "upload_time": "2020-03-24T15:35:34", "upload_time_iso_8601": "2020-03-24T15:35:34.766817Z", "url": "https://files.pythonhosted.org/packages/28/f5/8bd6e394e268c21e4c6b315e877cc71880111f217e6c2b1a0271529aa53c/kingston-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "4637e5c54edd3c6075e758d690be162a", "sha256": "8b6a7e84b48d09849a2f9e92334240435a3d7b9d2ecfa71f8952fd3fe3a2dc27"}, "downloads": -1, "filename": "kingston-0.6.4.tar.gz", "has_sig": false, "md5_digest": "4637e5c54edd3c6075e758d690be162a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17563, "upload_time": "2020-04-01T15:11:50", "upload_time_iso_8601": "2020-04-01T15:11:50.221457Z", "url": "https://files.pythonhosted.org/packages/4e/81/f7cdf1010756fe1ad076bafe4bd52d1420f668d1473e70e8c533fc350086/kingston-0.6.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4637e5c54edd3c6075e758d690be162a", "sha256": "8b6a7e84b48d09849a2f9e92334240435a3d7b9d2ecfa71f8952fd3fe3a2dc27"}, "downloads": -1, "filename": "kingston-0.6.4.tar.gz", "has_sig": false, "md5_digest": "4637e5c54edd3c6075e758d690be162a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17563, "upload_time": "2020-04-01T15:11:50", "upload_time_iso_8601": "2020-04-01T15:11:50.221457Z", "url": "https://files.pythonhosted.org/packages/4e/81/f7cdf1010756fe1ad076bafe4bd52d1420f668d1473e70e8c533fc350086/kingston-0.6.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:42 2020"}