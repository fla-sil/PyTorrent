{"info": {"author": "Stuart D. Gathman", "author_email": "stuart@gathman.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: No Input/Output (Daemon)", "Intended Audience :: Developers", "License :: OSI Approved :: Python Software Foundation License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Communications :: Email :: Filters", "Topic :: Communications :: Email :: Mail Transport Agents", "Topic :: Internet :: Name Service (DNS)", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# SPF\n## Sender-Policy-Framework queries in Python.\n\n### Quick Start\n\nInstallation\n------------\nThis package requires either the dns (dnspython) or DNS (PyDNS/Py3DNS modules\nand either the ipaddr module or python3.3 and later.  It does not work with\nthe ipaddress module backport.  For dnspython, at least version 1.16.0 is\nrequired.  The authres module is required to process and generate RFC 7601\nAuthentication Results headers.  These can all be installed from pypi via pip.\nAdditionally, they are also available via many distribution packaging systems.\n\npyspf uses traditional python distutils, so dependencies are not installed\nautomatically.  pyspf can be installed from pypi via pip or manually:\n\nAfter unpacking the source distribution, install this in your site-\nspecific Python extension directory::\n\n\t% python setup.py build\n\t% su\n\t# python setup.py install\n\nThe minimum Python version required is python2.6.  The spf module in this\nversion has been tested with python3 versions through python3.8.\n\nTesting\n-------\nAfter this package is installed, cd into the test directory and\nexecute testspf.py::\n\n    % cd test\n    % python testspf.py\n    WARN: invalid-domain-long in rfc4408-tests.yml, 8.1/2, 5/10: fail preferred to temperror\n    WARN: txttimeout in rfc4408-tests.yml, 4.4/1: fail preferred to temperror\n    WARN: spfoverride in rfc4408-tests.yml, 4.5/5: pass preferred to fail\n    WARN: multitxt1 in rfc4408-tests.yml, 4.5/5: pass preferred to permerror\n    WARN: multispf2 in rfc4408-tests.yml, 4.5/6: permerror preferred to pass\n    ..\n    ----------------------------------------------------------------------\n    Ran 2 tests in 3.036s\n\n    OK\n\nThis runs the SPF council test-suite as of when this package was built.\nIt does not test the pyDNS installation, but uses an internal driver.\nThis avoids changing results due to DNS timeouts.\n\nIn addition, spf.py runs an internal self-test every time it is used from the\ncommand line.\n\nIf you're running on Mac OS X, and it looks like DNS.DiscoverNameServers()\nis failing, you'll need to edit your /etc/resolv.conf and specify a\ndomain name.  For some reason, OS X writes out resolv.conf with a single\n'domain' line, which isn't good at all.  Later versions of py3dns have been\nupdated to better support Max OS X.\n\n\nDescription\n===========\nSPF does email sender validation.  For more information about SPF,\nplease see http://www.openspf.net/\n\nOne incompatible change was introduced in version 1.7.  Prior to version 1.7,\nconnections from a local IP address (127...) would always return a Pass \nresult.  The special case was eliminated.  Programs calling pySPF should not\ndo SPF checks on locally submitted mail.\n\nThis SPF client is intended to be installed on the border MTA, checking\nif incoming SMTP clients are permitted to forward mail.  The SPF check\nshould be done during the MAIL FROM:<...> command.\n\nThere are two ways to use this package.  The first is from the command\nline::\n\n\t% python spf.py {ip-addr} {mail-from} {helo}\n\nFor instance, during an SMTP exchange from client 69.55.226.139::\n\n\tS: 220 mail.example.com ESMTP Postfix\n\tC: EHLO mx1.wayforward.net\n\tS: 250-mail.example.com\n\tS: ...\n\tS: 250 8BITMIME\n\tC: MAIL FROM:<terry@wayforward.net>\n\nThen the following command line would check if this is a valid sender::\n\n\t% ./spf.py 69.55.226.139 terry@wayforward.net mx1.wayforward.net ('pass', 250, 'sender SPF authorized')\n\nCommand line calls return RFC 4408/7208 result codes, i.e. 'pass', 'fail',\n'neutral', 'softfail, 'permerror', or 'temperror'.\n\nThe second way is via the module's APIs.\n\nThe legacy (pySPF 1.6) API:\n\t>>> import spf\n\t>>> spf.check(i='69.55.226.139',\n\t...           s='terry@wayforward.net',\n\t...           h='mx1.wayforward.net')\n\t('pass', 250, 'sender SPF authorized')\n\nThe first element in the tuple is one of 'pass', 'fail', 'netural', 'softfail',\n'unknown', or 'error'.  The second is the SMTP response status code: 550 for \n'fail', 450 for 'error' and 250 for all else.  The third is an explanation.\n\nNote: SPF results alone are never sufficient to decide that a message should be\naccepted.  Accept, reject, or defer decisions are a function of local reciever\npolicy.\n\nThe RFC 4408/7208 compliant API::\n\n        >>> import spf\n        >>> spf.check2(i='69.55.226.139',\n        ...           s='terry@wayforward.net',\n        ...           h='mx1.wayforward.net')\n        ('pass', 'sender SPF verified')\n\nThe first element in the tuple is one of 'pass', 'fail', 'neutral', 'softfail,\n'permerror', or 'temperror'.  The second is an explanation.\n\nThis package also provides two additional helper scripts; type99.py and \nspfquery.py.  The type99.py script will convert DNS TXT strings to a binary \nequivalent suitable for use in a BIND zone file.  The spfquery.py script is a\nPython reimplementination of Wayne Schlitt's spfquery command line tool.\n\nThe type99.py script is called from the command line as follows:\n\npython type99.py \"v=spf1 -all\" {Note: Use your desired SPF record instead.}\n\\# 12 0b763d73706631202d616c6c {This is the correct result for \"v=spf1 -all\"}\n\nor \n\npython type99 - {File name}\n\nThe input file format is a standard BIND Zone file.  The type99 script will add\na Type99 record for each TXT record found in the file.  Use of DNS type 99\n(type SPF) was removed from SPF in RFC 7208, so this script should be of\nhistorical interest only.\n\nThe spfquery.py script is called with a number of possible options.  Options can\neither use standard '-' prefix or be PERL style long options, '--'.  Supported\noptions are:\n\n\"--file\" or \"-file\" {filename}: Read the query (or queries) from the designated \n    file.  If {filename} is '0', then query inputs are read from STDIN.\n\n \"--ip\" or \"-ip\" {address}: Client IP address to use for SPF check.\n\n\n\"--sender\" or \"-sender\" {Mail From address}: Envelope sender from which mail was\n    received.\n\n\"--helo\" or \"-helo\" {client hostname}: HELO/EHLO name used by SMTP client.\n\n\"--local\" or \"-local\" {local policy SPF string}: Additional SPF mechanisms to be\n    checked on the basis of local policy.  Note that local policy matches are \n    not strictly SPF results.  Local policy processing is not defined in RFC \n    4408 or RFC 7208.  Result may vary among SPF implementations.\n\n\"--rcpt-to\" or \"rcpt-to\" {rcpt-to address - if available}: Receipt to address is\n    not used for actual SPF processing, but if available it can be useful for \n    logging, spf-received header construction, and providing useful rejection\n    messages when messages are rejected due to SPF.\n\n--default-explanation\" or \"-default-explanation\" {explanation string}: Default\n    Fail explanation string to be used.\n\n\"--sanitize\" or \"-sanitize\" and \"--debug\" or \"-debug\": These options are no-op\n    in the Python implementation, but are valid inputs to provide compatibliity\n    with input files developed to work with the original PERL and C spfquery\n    implementations.\n\nOverall per SPF check time limits can be controlled by passing querytime\nto the spf.check2 function or when initializing a spf.query object.\nIt is set to 20 seconds by default based on RFC 7208.  If querytime is set to\n0, then the overall time limit is disabled and the per DNS lookup limit is used\ninstead.  This defaults to 20 seconds and can be controlled via\nspf.MAX_PER_LOOKUP_TIME.  RFC 4408 says that the overall limit MAY be used and\nrecommends no less than 20 seconds if it is. RFC 7208 is stronger, so a\ndefault limit aligned to the RFC requirements is now used.\n\nLicense: Python Software Foundation License\n\nAuthor:\nTerence Way terry@wayforward.net\nhttp://www.wayforward.net/spf/\n\nMaintainers:\nStuart Gathman stuart@gathman.org\nScott Kitterman scott@kitterman.com\nhttp://cheeseshop.python.org/pypi/pyspf\n\nCode is currently hosted at https://github.com/sdgathman/pyspf/", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sdgathman/pyspf/", "keywords": "spf,email,forgery", "license": "Python Software Foundation License", "maintainer": "", "maintainer_email": "", "name": "pyspf", "package_url": "https://pypi.org/project/pyspf/", "platform": "", "project_url": "https://pypi.org/project/pyspf/", "project_urls": {"Homepage": "https://github.com/sdgathman/pyspf/"}, "release_url": "https://pypi.org/project/pyspf/2.0.14/", "requires_dist": null, "requires_python": "", "summary": "SPF (Sender Policy Framework) implemented in Python.", "version": "2.0.14", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># SPF\n## Sender-Policy-Framework queries in Python.</p>\n<p>### Quick Start</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>This package requires either the dns (dnspython) or DNS (PyDNS/Py3DNS modules\nand either the ipaddr module or python3.3 and later.  It does not work with\nthe ipaddress module backport.  For dnspython, at least version 1.16.0 is\nrequired.  The authres module is required to process and generate RFC 7601\nAuthentication Results headers.  These can all be installed from pypi via pip.\nAdditionally, they are also available via many distribution packaging systems.</p>\n<p>pyspf uses traditional python distutils, so dependencies are not installed\nautomatically.  pyspf can be installed from pypi via pip or manually:</p>\n<p>After unpacking the source distribution, install this in your site-\nspecific Python extension directory:</p>\n<pre>% python setup.py build\n% su\n# python setup.py install\n</pre>\n<p>The minimum Python version required is python2.6.  The spf module in this\nversion has been tested with python3 versions through python3.8.</p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>After this package is installed, cd into the test directory and\nexecute testspf.py:</p>\n<pre>% cd test\n% python testspf.py\nWARN: invalid-domain-long in rfc4408-tests.yml, 8.1/2, 5/10: fail preferred to temperror\nWARN: txttimeout in rfc4408-tests.yml, 4.4/1: fail preferred to temperror\nWARN: spfoverride in rfc4408-tests.yml, 4.5/5: pass preferred to fail\nWARN: multitxt1 in rfc4408-tests.yml, 4.5/5: pass preferred to permerror\nWARN: multispf2 in rfc4408-tests.yml, 4.5/6: permerror preferred to pass\n..\n----------------------------------------------------------------------\nRan 2 tests in 3.036s\n\nOK\n</pre>\n<p>This runs the SPF council test-suite as of when this package was built.\nIt does not test the pyDNS installation, but uses an internal driver.\nThis avoids changing results due to DNS timeouts.</p>\n<p>In addition, spf.py runs an internal self-test every time it is used from the\ncommand line.</p>\n<p>If you\u2019re running on Mac OS X, and it looks like DNS.DiscoverNameServers()\nis failing, you\u2019ll need to edit your /etc/resolv.conf and specify a\ndomain name.  For some reason, OS X writes out resolv.conf with a single\n\u2018domain\u2019 line, which isn\u2019t good at all.  Later versions of py3dns have been\nupdated to better support Max OS X.</p>\n<div id=\"description\">\n<h3>Description</h3>\n<p>SPF does email sender validation.  For more information about SPF,\nplease see <a href=\"http://www.openspf.net/\" rel=\"nofollow\">http://www.openspf.net/</a></p>\n<p>One incompatible change was introduced in version 1.7.  Prior to version 1.7,\nconnections from a local IP address (127\u2026) would always return a Pass\nresult.  The special case was eliminated.  Programs calling pySPF should not\ndo SPF checks on locally submitted mail.</p>\n<p>This SPF client is intended to be installed on the border MTA, checking\nif incoming SMTP clients are permitted to forward mail.  The SPF check\nshould be done during the MAIL FROM:&lt;\u2026&gt; command.</p>\n<p>There are two ways to use this package.  The first is from the command\nline:</p>\n<pre>% python spf.py {ip-addr} {mail-from} {helo}\n</pre>\n<p>For instance, during an SMTP exchange from client 69.55.226.139:</p>\n<pre>S: 220 mail.example.com ESMTP Postfix\nC: EHLO mx1.wayforward.net\nS: 250-mail.example.com\nS: ...\nS: 250 8BITMIME\nC: MAIL FROM:&lt;terry@wayforward.net&gt;\n</pre>\n<p>Then the following command line would check if this is a valid sender:</p>\n<pre>% ./spf.py 69.55.226.139 terry@wayforward.net mx1.wayforward.net ('pass', 250, 'sender SPF authorized')\n</pre>\n<p>Command line calls return RFC 4408/7208 result codes, i.e. \u2018pass\u2019, \u2018fail\u2019,\n\u2018neutral\u2019, \u2018softfail, \u2018permerror\u2019, or \u2018temperror\u2019.</p>\n<p>The second way is via the module\u2019s APIs.</p>\n<dl>\n<dt>The legacy (pySPF 1.6) API:</dt>\n<dd><pre>&gt;&gt;&gt; import spf\n&gt;&gt;&gt; spf.check(i='69.55.226.139',\n...           s='terry@wayforward.net',\n...           h='mx1.wayforward.net')\n('pass', 250, 'sender SPF authorized')\n</pre>\n</dd>\n</dl>\n<p>The first element in the tuple is one of \u2018pass\u2019, \u2018fail\u2019, \u2018netural\u2019, \u2018softfail\u2019,\n\u2018unknown\u2019, or \u2018error\u2019.  The second is the SMTP response status code: 550 for\n\u2018fail\u2019, 450 for \u2018error\u2019 and 250 for all else.  The third is an explanation.</p>\n<p>Note: SPF results alone are never sufficient to decide that a message should be\naccepted.  Accept, reject, or defer decisions are a function of local reciever\npolicy.</p>\n<p>The RFC 4408/7208 compliant API:</p>\n<pre>&gt;&gt;&gt; import spf\n&gt;&gt;&gt; spf.check2(i='69.55.226.139',\n...           s='terry@wayforward.net',\n...           h='mx1.wayforward.net')\n('pass', 'sender SPF verified')\n</pre>\n<p>The first element in the tuple is one of \u2018pass\u2019, \u2018fail\u2019, \u2018neutral\u2019, \u2018softfail,\n\u2018permerror\u2019, or \u2018temperror\u2019.  The second is an explanation.</p>\n<p>This package also provides two additional helper scripts; type99.py and\nspfquery.py.  The type99.py script will convert DNS TXT strings to a binary\nequivalent suitable for use in a BIND zone file.  The spfquery.py script is a\nPython reimplementination of Wayne Schlitt\u2019s spfquery command line tool.</p>\n<p>The type99.py script is called from the command line as follows:</p>\n<p>python type99.py \u201cv=spf1 -all\u201d {Note: Use your desired SPF record instead.}\n# 12 0b763d73706631202d616c6c {This is the correct result for \u201cv=spf1 -all\u201d}</p>\n<p>or</p>\n<p>python type99 - {File name}</p>\n<p>The input file format is a standard BIND Zone file.  The type99 script will add\na Type99 record for each TXT record found in the file.  Use of DNS type 99\n(type SPF) was removed from SPF in RFC 7208, so this script should be of\nhistorical interest only.</p>\n<p>The spfquery.py script is called with a number of possible options.  Options can\neither use standard \u2018-\u2018 prefix or be PERL style long options, \u2018\u2013\u2019.  Supported\noptions are:</p>\n<dl>\n<dt>\u201c\u2013file\u201d or \u201c-file\u201d {filename}: Read the query (or queries) from the designated</dt>\n<dd><blockquote>\nfile.  If {filename} is \u20180\u2019, then query inputs are read from STDIN.</blockquote>\n<p>\u201c\u2013ip\u201d or \u201c-ip\u201d {address}: Client IP address to use for SPF check.</p>\n</dd>\n<dt>\u201c\u2013sender\u201d or \u201c-sender\u201d {Mail From address}: Envelope sender from which mail was</dt>\n<dd>received.</dd>\n</dl>\n<p>\u201c\u2013helo\u201d or \u201c-helo\u201d {client hostname}: HELO/EHLO name used by SMTP client.</p>\n<dl>\n<dt>\u201c\u2013local\u201d or \u201c-local\u201d {local policy SPF string}: Additional SPF mechanisms to be</dt>\n<dd>checked on the basis of local policy.  Note that local policy matches are\nnot strictly SPF results.  Local policy processing is not defined in RFC\n4408 or RFC 7208.  Result may vary among SPF implementations.</dd>\n<dt>\u201c\u2013rcpt-to\u201d or \u201crcpt-to\u201d {rcpt-to address - if available}: Receipt to address is</dt>\n<dd>not used for actual SPF processing, but if available it can be useful for\nlogging, spf-received header construction, and providing useful rejection\nmessages when messages are rejected due to SPF.</dd>\n<dt>\u2013default-explanation\u201d or \u201c-default-explanation\u201d {explanation string}: Default</dt>\n<dd>Fail explanation string to be used.</dd>\n<dt>\u201c\u2013sanitize\u201d or \u201c-sanitize\u201d and \u201c\u2013debug\u201d or \u201c-debug\u201d: These options are no-op</dt>\n<dd>in the Python implementation, but are valid inputs to provide compatibliity\nwith input files developed to work with the original PERL and C spfquery\nimplementations.</dd>\n</dl>\n<p>Overall per SPF check time limits can be controlled by passing querytime\nto the spf.check2 function or when initializing a spf.query object.\nIt is set to 20 seconds by default based on RFC 7208.  If querytime is set to\n0, then the overall time limit is disabled and the per DNS lookup limit is used\ninstead.  This defaults to 20 seconds and can be controlled via\nspf.MAX_PER_LOOKUP_TIME.  RFC 4408 says that the overall limit MAY be used and\nrecommends no less than 20 seconds if it is. RFC 7208 is stronger, so a\ndefault limit aligned to the RFC requirements is now used.</p>\n<p>License: Python Software Foundation License</p>\n<p>Author:\nTerence Way <a href=\"mailto:terry%40wayforward.net\">terry<span>@</span>wayforward<span>.</span>net</a>\n<a href=\"http://www.wayforward.net/spf/\" rel=\"nofollow\">http://www.wayforward.net/spf/</a></p>\n<p>Maintainers:\nStuart Gathman <a href=\"mailto:stuart%40gathman.org\">stuart<span>@</span>gathman<span>.</span>org</a>\nScott Kitterman <a href=\"mailto:scott%40kitterman.com\">scott<span>@</span>kitterman<span>.</span>com</a>\n<a href=\"http://cheeseshop.python.org/pypi/pyspf\" rel=\"nofollow\">http://cheeseshop.python.org/pypi/pyspf</a></p>\n<p>Code is currently hosted at <a href=\"https://github.com/sdgathman/pyspf/\" rel=\"nofollow\">https://github.com/sdgathman/pyspf/</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6384152, "releases": {"1.2": [], "1.3": [], "1.5": [], "1.7": [], "2.0": [], "2.0.1": [{"comment_text": "", "digests": {"md5": "7fdb9ee23a1107ec176e7e85812b007b", "sha256": "7434c2321d50daaafcc7466e0c43daf6806603c540aa241d7b628ab0cb6a9395"}, "downloads": -1, "filename": "pyspf-2.0.1.tar.gz", "has_sig": false, "md5_digest": "7fdb9ee23a1107ec176e7e85812b007b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33008, "upload_time": "2006-11-24T01:41:58", "upload_time_iso_8601": "2006-11-24T01:41:58Z", "url": "https://files.pythonhosted.org/packages/dc/9a/bb81a163ed9417fd54462a10f1ffdaa9950a1d9d1a4428e4e8e83b4aa878/pyspf-2.0.1.tar.gz", "yanked": false}], "2.0.10": [{"comment_text": "", "digests": {"md5": "da958beeff04b8c64afd19cda3cc825a", "sha256": "0a3be1cc1915649ed8960a1b8add4110379c3c348e98e642a53f69d028709de8"}, "downloads": -1, "filename": "pyspf-2.0.10.tar.gz", "has_sig": false, "md5_digest": "da958beeff04b8c64afd19cda3cc825a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62890, "upload_time": "2014-09-02T19:44:42", "upload_time_iso_8601": "2014-09-02T19:44:42.341468Z", "url": "https://files.pythonhosted.org/packages/e9/eb/ed2c76346e390edf35c6653bdda6e22d6ea67d117b5e15d24c3e6fee1ce0/pyspf-2.0.10.tar.gz", "yanked": false}], "2.0.11": [{"comment_text": "", "digests": {"md5": "83add3a0d8732bcc28841ceb5da440ba", "sha256": "693e80df3d61d69daaa2590e0f2bc8167d5fa36ce373d43987984cb00ae23928"}, "downloads": -1, "filename": "pyspf-2.0.11.tar.gz", "has_sig": false, "md5_digest": "83add3a0d8732bcc28841ceb5da440ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63594, "upload_time": "2014-12-05T17:52:28", "upload_time_iso_8601": "2014-12-05T17:52:28.221218Z", "url": "https://files.pythonhosted.org/packages/02/90/4c33860df1020963a97e3ba79766e435a983000a5d3387e5502653de3f05/pyspf-2.0.11.tar.gz", "yanked": false}], "2.0.12": [{"comment_text": "forgot tabnanny", "digests": {"md5": "c83143ad79074bf8c80235748a8a698f", "sha256": "8aa21ba0e3aff8a4e8ad8f586c500a5d1f9c4c902c3f11bcc107465857cd41a2"}, "downloads": -1, "filename": "pyspf-2.0.12t.tar.gz", "has_sig": false, "md5_digest": "c83143ad79074bf8c80235748a8a698f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67189, "upload_time": "2015-08-05T13:53:46", "upload_time_iso_8601": "2015-08-05T13:53:46.244812Z", "url": "https://files.pythonhosted.org/packages/88/4d/440c273b6a136b58fad9f779847cc90179d627f8a2f2cd8b36313664cf1b/pyspf-2.0.12t.tar.gz", "yanked": false}], "2.0.13": [{"comment_text": "", "digests": {"md5": "ecac9ba64d91f8a2335df940051394f2", "sha256": "62dc1be39519e343202d480da7ef93d834b5a50cd4f217bef9335ed15292929b"}, "downloads": -1, "filename": "pyspf-2.0.13.tar.gz", "has_sig": false, "md5_digest": "ecac9ba64d91f8a2335df940051394f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65960, "upload_time": "2019-09-02T13:05:22", "upload_time_iso_8601": "2019-09-02T13:05:22.360221Z", "url": "https://files.pythonhosted.org/packages/7a/0c/1a10db5bf17e13c596d47b0a6903ac2837f78c2c8faf5918c748cb83e3f8/pyspf-2.0.13.tar.gz", "yanked": false}], "2.0.14": [{"comment_text": "", "digests": {"md5": "e22dbcd30e887c5056678f6a150fd5af", "sha256": "57a7ef01bda090173aafb6af0106251686ed73f03db4e911fcd34c57fc347186"}, "downloads": -1, "filename": "pyspf-2.0.14.tar.gz", "has_sig": false, "md5_digest": "e22dbcd30e887c5056678f6a150fd5af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69446, "upload_time": "2020-01-02T02:54:37", "upload_time_iso_8601": "2020-01-02T02:54:37.109874Z", "url": "https://files.pythonhosted.org/packages/d4/dc/5b3838ff90474e21fe0914920c53430f73402e07d6598ea228e61b74963e/pyspf-2.0.14.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "45a440f4714799be22855d368a01974b", "sha256": "d54cc20475c37283421e287e0560057878452f4bd2d2b75168b823ac68eb0baa"}, "downloads": -1, "filename": "pyspf-2.0.2-2.py24.noarch.rpm", "has_sig": false, "md5_digest": "45a440f4714799be22855d368a01974b", "packagetype": "bdist_rpm", "python_version": "2.4", "requires_python": null, "size": 71528, "upload_time": "2007-01-05T16:35:34", "upload_time_iso_8601": "2007-01-05T16:35:34Z", "url": "https://files.pythonhosted.org/packages/f0/af/6da9c6dcb323aee78ccf92f8fbf3fb355955a55635b04ca47229b0cbdc30/pyspf-2.0.2-2.py24.noarch.rpm", "yanked": false}, {"comment_text": "", "digests": {"md5": "479bcd91709d3b7d0ac663252fda5141", "sha256": "fa5cf8c2f0b713aeabf58347710d26832e7cf60a44565d6cbb7c18399d776429"}, "downloads": -1, "filename": "pyspf-2.0.2.tar.gz", "has_sig": false, "md5_digest": "479bcd91709d3b7d0ac663252fda5141", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33459, "upload_time": "2007-01-05T16:33:50", "upload_time_iso_8601": "2007-01-05T16:33:50Z", "url": "https://files.pythonhosted.org/packages/5f/88/854f44f7c3f0f39c6fd85cbd4f559ac502a23bc436bc60ce4179b3f7c83b/pyspf-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "edb452311287449bc0b3a4f8df567f2b", "sha256": "4f2e7f63cb9b77ec2acfa1ab922866984009bb78c9edd784fd7cd3513e6bd138"}, "downloads": -1, "filename": "pyspf-2.0.3.tar.gz", "has_sig": false, "md5_digest": "edb452311287449bc0b3a4f8df567f2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34379, "upload_time": "2007-02-06T20:41:02", "upload_time_iso_8601": "2007-02-06T20:41:02Z", "url": "https://files.pythonhosted.org/packages/56/82/9c77236814e8b8e0c3da93b7b69ba947b6b759353949cbce14060e9d70fe/pyspf-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "6a40662e4e4b36be0633983a586c390e", "sha256": "fedd19918a1b3496ca1f2f3692758f8cb7657774c759add349b4cb61f8d20ec8"}, "downloads": -1, "filename": "pyspf-2.0.4.tar.gz", "has_sig": false, "md5_digest": "6a40662e4e4b36be0633983a586c390e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36163, "upload_time": "2008-03-27T02:06:33", "upload_time_iso_8601": "2008-03-27T02:06:33Z", "url": "https://files.pythonhosted.org/packages/1e/9f/c98e76f5a859a724bc853f2766a1a41a282dc8c43d23145cd94fb0af7c80/pyspf-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "Support TCP fallback, timeout parameter", "digests": {"md5": "7e3f53362e3ad52ec8a496445085a34f", "sha256": "a9e143fefc6bafd9f6e39b1b62eaaafae8bf96bdc25961ff1d55d01b173bf0b0"}, "downloads": -1, "filename": "pyspf-2.0.5.tar.gz", "has_sig": false, "md5_digest": "7e3f53362e3ad52ec8a496445085a34f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38818, "upload_time": "2008-08-01T23:27:06", "upload_time_iso_8601": "2008-08-01T23:27:06Z", "url": "https://files.pythonhosted.org/packages/98/71/61d1b9cb1027dfa3dac4ce684c5b3a04e396b3fb757e834b3b007127716a/pyspf-2.0.5.tar.gz", "yanked": false}], "2.0.6": [{"comment_text": "", "digests": {"md5": "ea584631667093b3e20f2b55f4413bf6", "sha256": "ed20f35d8c1d60516b195ec08ce7c8479d450be28fd37baaab58dbf570ceb429"}, "downloads": -1, "filename": "pyspf-2.0.6.tar.gz", "has_sig": false, "md5_digest": "ea584631667093b3e20f2b55f4413bf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43448, "upload_time": "2011-10-27T20:31:30", "upload_time_iso_8601": "2011-10-27T20:31:30.894676Z", "url": "https://files.pythonhosted.org/packages/99/c7/4a11e7e59ca58722ae6436f60665861bf43521469526d733aad0959827f5/pyspf-2.0.6.tar.gz", "yanked": false}], "2.0.7": [{"comment_text": "", "digests": {"md5": "9afe006c84c485f860d9efaa628e96ee", "sha256": "d26355f2576ed345971b88bec7a97795112476d022d10b943d8580c3f78b44db"}, "downloads": -1, "filename": "pyspf-2.0.7.tar.gz", "has_sig": false, "md5_digest": "9afe006c84c485f860d9efaa628e96ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46283, "upload_time": "2012-02-04T18:31:09", "upload_time_iso_8601": "2012-02-04T18:31:09.080164Z", "url": "https://files.pythonhosted.org/packages/c1/4e/ec44948a68fded3ce42226c6935a92482e90109cf5ce670b1bd21e20829b/pyspf-2.0.7.tar.gz", "yanked": false}], "2.0.8": [{"comment_text": "", "digests": {"md5": "8ef1a5714939d6df5ab40006ac8930ac", "sha256": "b9ff846a7b6c883383451d1d4be526762f1d88de84e89d6de05f73f51c2c3dcf"}, "downloads": -1, "filename": "pyspf-2.0.8.tar.gz", "has_sig": false, "md5_digest": "8ef1a5714939d6df5ab40006ac8930ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48818, "upload_time": "2013-07-25T03:29:22", "upload_time_iso_8601": "2013-07-25T03:29:22.202975Z", "url": "https://files.pythonhosted.org/packages/f3/8c/7500281e092b5a2ba8aa49fc3d28f3cd35173743a487831b3eb4db7abc40/pyspf-2.0.8.tar.gz", "yanked": false}], "2.0.9": [{"comment_text": "", "digests": {"md5": "055b36fd9469ea77713cf064727a9c18", "sha256": "e4828f785c935d5d24dcab1e8abe13b57de965219c8e821222e763a27fd423e0"}, "downloads": -1, "filename": "pyspf-2.0.9.tar.gz", "has_sig": false, "md5_digest": "055b36fd9469ea77713cf064727a9c18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63537, "upload_time": "2014-05-01T04:04:46", "upload_time_iso_8601": "2014-05-01T04:04:46.259655Z", "url": "https://files.pythonhosted.org/packages/0f/be/8a8c3481ef57b3b24ae64a81476699ddbb6ff7fcb06e7b2ae097ea21ee8d/pyspf-2.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e22dbcd30e887c5056678f6a150fd5af", "sha256": "57a7ef01bda090173aafb6af0106251686ed73f03db4e911fcd34c57fc347186"}, "downloads": -1, "filename": "pyspf-2.0.14.tar.gz", "has_sig": false, "md5_digest": "e22dbcd30e887c5056678f6a150fd5af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69446, "upload_time": "2020-01-02T02:54:37", "upload_time_iso_8601": "2020-01-02T02:54:37.109874Z", "url": "https://files.pythonhosted.org/packages/d4/dc/5b3838ff90474e21fe0914920c53430f73402e07d6598ea228e61b74963e/pyspf-2.0.14.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:14 2020"}