{"info": {"author": "Mateusz Kobos", "author_email": "mateusz@mkobos.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP"], "description": "About\n=====\n\nThis project is a Python library which implements a generic concurrent tree-crawling algorithm. In practice, it can be used in tasks that require a couple of crawling threads to explore a tree-like structure e.g. when downloading documents from a hierarchical web site.\n\nAlthough the main application domain for this library is using it to crawl a web site with known tree-like structure, one of its main design goals was flexibility in adjusting it to different application areas. The library was consciously developed to be useful in the following 3 cases. These cases are listed here from the least to the most general (and from the one requiring the least implementation effort from the user of the library to the one requiring the most of it).\n\nMain use-cases of the library\n-----------------------------\n\n\n1. Crawling HTML web site with known and fixed tree-like structure. In this approach, the number of tree levels is fixed and each page on a certain tree level has basically the same structure (i.e. it is parsed by the same parser). On each level, the links to the pages of the lower level are not necessarily placed on one page, but can be distributed among many pages. See a sample testing web site ``concurrent_tree_crawler/test/data/original_site/issues_1.html`` for an example of such a site.\n2. Crawling some other HTML web site with a tree-like structure.\n3. Crawling some other tree-like structure.\n\nLibrary features\n================\n\n\n-  Generic features of the library:\n   \n   -  **Resistance to abnormal program termination** (e.g. due to computer shutdown). The information about the part of the tree that has been already visited is saved in a file and restored at the next program start. This way e.g. the leaf nodes that have been already explored are not explored again.\n   -  **Consistent dealing with navigation problems**. When a navigation problem occurs in a certain thread while exploring the tree (in case of a web site it might be e.g. a dead link or a malformed web page), the thread's browser is restarted and the node of the tree that caused the problem is marked as erroneous. For technical details, see the description of the ``AbstractTreeNavigator`` class.\n   -  **Daily schedule of program activity**. The user can enter a daily time interval during which the program will be actively crawling the tree; the program will sleep during the rest of the time.\n   -  **Logging program activity**. The user can choose between 3 levels of details of logging messages. The logging messages are printed to the standard output but their copy can be also saved in a file.\n   -  **Handling same node name problem**. Some children of the same parent might have the same name. In case of web crawling, this might happen when the name of the node is based on a name of a link pointing to a web page corresponding to this node, and the there are many links with the same name. This is not desirable, because we assume that every child of a certain parent has different name. This assumption simplifies e.g. web crawling task when for each node we create a directory or a file with the name which is the same as the node name (and of course there cannot be two files with the same name in a single directory). To solve this problem, whenever it seems that a certain tree node has two or more children of the same name, the consecutive children are renamed according to the pattern: ``NAME-repetition_1``, ``NAME-repetition_2`` and so on.\n\n-  Web site crawler-related features:\n   \n   -  **Throttling the download speed**. The user can set a maximal number of web pages to be visited by the crawler.\n   -  **Handling many linked web pages corresponding to a single tree node**. A part of the library (class ``HTMLMultipageNavigator``) explicitly handles situation when there are many pages corresponding to a single tree node. See a sample testing web site ``concurrent_tree_crawler/test/data/original_site/issues_1.html`` for an example of such a site.\n   -  **Handling the same web page -- different address problem**. Some web sites might be constructed so that the same web page might have a different address when viewed through browsers belonging to two different threads. It might be the case e.g. when each thread has to log in on the web site as a different user and the user name is appended to the address of each web page. As long as the user or the library can give the same name to those pages (see ``AbstractPageAnalyzer.get_links()`` function and ``PageLinks`` class for technical details), they are regarded by the library as the same page. This is usually pretty simple since the name of the link to the web page is the same even if the addresses differ.\n\n\nHow to use the library\n======================\n\nWe will show how to run an example script that uses the library. The script uses a couple of threads to download the data from a sample local web page into a temporary directory. There are two main ways to obtain the script and to execute it.\n\n\n1. Using the source from the repository. Steps:\n   \n   1. Download the source of the package from the repository (``git clone http://github.com/mkobos/tree_crawler``)\n   2. In the source's root directory, run the script ``concurrent_tree_crawler/bin/run_sample_download_crawler.py``\n\n2. Using the installed library. Steps:\n   \n   1. Install the ``concurrent_tree_crawler`` library in your system from the PyPi packages repository (e.g. by executing ``pip install --user concurrent_tree_crawler`` or ``easy_install --user concurrent_tree_crawler``)\n   2. Download the `concurrent_tree_crawler/bin/run_sample_download_crawler.py <http://raw.github.com/mkobos/tree_crawler/master/concurrent_tree_crawler/bin/run_sample_download_crawler.py>`_ and `concurrent_tree_crawler/bin/sample_download_crawler.py <http://raw.github.com/mkobos/tree_crawler/master/concurrent_tree_crawler/bin/sample_download_crawler.py>`_ scripts from the source repository, place them in a single directory and run the ``run_sample_download_crawler.py`` script (but before that, make the scripts executable if needed).\n\n\nFor a more detailed information about creating one's own crawler using this library see `http://github.com/mkobos/tree\\_crawler/wiki <http://github.com/mkobos/tree_crawler/wiki>`_.\n\nConcurrent tree crawling algorithm\n==================================\n\nWe use a set number of threads to concurrently explore a generic tree (we do not care at the moment whether it corresponds to a web site or not). The threads start their exploration of the nodes from the tree's root. Each thread tries to explore tree nodes which have not yet been explored by other threads (we use a modification of the breadth-search algorithm to minimize the number of situations when the threads get into each other's way).\n\nIn the case of web site crawling, it means that each thread has its own browser but tries not to open (and parse) web pages which have already been opened by other threads.\n\nFor a more detailed information about the generic algorithm see `http://github.com/mkobos/tree\\_crawler/wiki <http://github.com/mkobos/tree_crawler/wiki>`_.\n\nProject files and directory structure\n=====================================\n\n\n-  ``Makefile`` -- The makefile used for managing different tasks related to the source code.\n-  ``utils/run_tests.py`` script runs the unit tests (or alternatively: ``make test`` or ``./setup.py test``) . Unit tests related to a certain source file are placed inside a ``test`` directory which is placed in the same directory as the source file. This convention was introduced because we want the tests to be placed close to the source files but at the same time we want them not to pollute the source files directory.\n-  ``utils/make_documentation.sh`` script generates API documentation from the source (or alternatively: ``make docs-api``)\n-  ``concurrent_tree_crawler/bin/run_sample_download_crawler.py`` script runs a sample crawler that downloads files from a local web site into a temporary directory\n\nThe main directory contains also some configuration files for Eclipse and its PyDev plugin which are used to develop the project.", "description_content_type": null, "docs_url": "https://pythonhosted.org/concurrent_tree_crawler/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mkobos/tree_crawler", "keywords": "concurrent,tree,website,crawler", "license": "MIT-LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "concurrent_tree_crawler", "package_url": "https://pypi.org/project/concurrent_tree_crawler/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/concurrent_tree_crawler/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/mkobos/tree_crawler"}, "release_url": "https://pypi.org/project/concurrent_tree_crawler/0.8.8/", "requires_dist": null, "requires_python": null, "summary": "A generic concurrent tree crawling algorithm with a sample implementation for website crawling.", "version": "0.8.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>This project is a Python library which implements a generic concurrent tree-crawling algorithm. In practice, it can be used in tasks that require a couple of crawling threads to explore a tree-like structure e.g. when downloading documents from a hierarchical web site.</p>\n<p>Although the main application domain for this library is using it to crawl a web site with known tree-like structure, one of its main design goals was flexibility in adjusting it to different application areas. The library was consciously developed to be useful in the following 3 cases. These cases are listed here from the least to the most general (and from the one requiring the least implementation effort from the user of the library to the one requiring the most of it).</p>\n<div id=\"main-use-cases-of-the-library\">\n<h3>Main use-cases of the library</h3>\n<ol>\n<li>Crawling HTML web site with known and fixed tree-like structure. In this approach, the number of tree levels is fixed and each page on a certain tree level has basically the same structure (i.e. it is parsed by the same parser). On each level, the links to the pages of the lower level are not necessarily placed on one page, but can be distributed among many pages. See a sample testing web site <tt>concurrent_tree_crawler/test/data/original_site/issues_1.html</tt> for an example of such a site.</li>\n<li>Crawling some other HTML web site with a tree-like structure.</li>\n<li>Crawling some other tree-like structure.</li>\n</ol>\n</div>\n</div>\n<div id=\"library-features\">\n<h2>Library features</h2>\n<ul>\n<li>Generic features of the library:<ul>\n<li><strong>Resistance to abnormal program termination</strong> (e.g. due to computer shutdown). The information about the part of the tree that has been already visited is saved in a file and restored at the next program start. This way e.g. the leaf nodes that have been already explored are not explored again.</li>\n<li><strong>Consistent dealing with navigation problems</strong>. When a navigation problem occurs in a certain thread while exploring the tree (in case of a web site it might be e.g. a dead link or a malformed web page), the thread\u2019s browser is restarted and the node of the tree that caused the problem is marked as erroneous. For technical details, see the description of the <tt>AbstractTreeNavigator</tt> class.</li>\n<li><strong>Daily schedule of program activity</strong>. The user can enter a daily time interval during which the program will be actively crawling the tree; the program will sleep during the rest of the time.</li>\n<li><strong>Logging program activity</strong>. The user can choose between 3 levels of details of logging messages. The logging messages are printed to the standard output but their copy can be also saved in a file.</li>\n<li><strong>Handling same node name problem</strong>. Some children of the same parent might have the same name. In case of web crawling, this might happen when the name of the node is based on a name of a link pointing to a web page corresponding to this node, and the there are many links with the same name. This is not desirable, because we assume that every child of a certain parent has different name. This assumption simplifies e.g. web crawling task when for each node we create a directory or a file with the name which is the same as the node name (and of course there cannot be two files with the same name in a single directory). To solve this problem, whenever it seems that a certain tree node has two or more children of the same name, the consecutive children are renamed according to the pattern: <tt><span class=\"pre\">NAME-repetition_1</span></tt>, <tt><span class=\"pre\">NAME-repetition_2</span></tt> and so on.</li>\n</ul>\n</li>\n<li>Web site crawler-related features:<ul>\n<li><strong>Throttling the download speed</strong>. The user can set a maximal number of web pages to be visited by the crawler.</li>\n<li><strong>Handling many linked web pages corresponding to a single tree node</strong>. A part of the library (class <tt>HTMLMultipageNavigator</tt>) explicitly handles situation when there are many pages corresponding to a single tree node. See a sample testing web site <tt>concurrent_tree_crawler/test/data/original_site/issues_1.html</tt> for an example of such a site.</li>\n<li><strong>Handling the same web page \u2013 different address problem</strong>. Some web sites might be constructed so that the same web page might have a different address when viewed through browsers belonging to two different threads. It might be the case e.g. when each thread has to log in on the web site as a different user and the user name is appended to the address of each web page. As long as the user or the library can give the same name to those pages (see <tt>AbstractPageAnalyzer.get_links()</tt> function and <tt>PageLinks</tt> class for technical details), they are regarded by the library as the same page. This is usually pretty simple since the name of the link to the web page is the same even if the addresses differ.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"how-to-use-the-library\">\n<h2>How to use the library</h2>\n<p>We will show how to run an example script that uses the library. The script uses a couple of threads to download the data from a sample local web page into a temporary directory. There are two main ways to obtain the script and to execute it.</p>\n<ol>\n<li>Using the source from the repository. Steps:<ol>\n<li>Download the source of the package from the repository (<tt>git clone <span class=\"pre\">http://github.com/mkobos/tree_crawler</span></tt>)</li>\n<li>In the source\u2019s root directory, run the script <tt>concurrent_tree_crawler/bin/run_sample_download_crawler.py</tt></li>\n</ol>\n</li>\n<li>Using the installed library. Steps:<ol>\n<li>Install the <tt>concurrent_tree_crawler</tt> library in your system from the PyPi packages repository (e.g. by executing <tt>pip install <span class=\"pre\">--user</span> concurrent_tree_crawler</tt> or <tt>easy_install <span class=\"pre\">--user</span> concurrent_tree_crawler</tt>)</li>\n<li>Download the <a href=\"http://raw.github.com/mkobos/tree_crawler/master/concurrent_tree_crawler/bin/run_sample_download_crawler.py\" rel=\"nofollow\">concurrent_tree_crawler/bin/run_sample_download_crawler.py</a> and <a href=\"http://raw.github.com/mkobos/tree_crawler/master/concurrent_tree_crawler/bin/sample_download_crawler.py\" rel=\"nofollow\">concurrent_tree_crawler/bin/sample_download_crawler.py</a> scripts from the source repository, place them in a single directory and run the <tt>run_sample_download_crawler.py</tt> script (but before that, make the scripts executable if needed).</li>\n</ol>\n</li>\n</ol>\n<p>For a more detailed information about creating one\u2019s own crawler using this library see <a href=\"http://github.com/mkobos/tree_crawler/wiki\" rel=\"nofollow\">http://github.com/mkobos/tree_crawler/wiki</a>.</p>\n</div>\n<div id=\"concurrent-tree-crawling-algorithm\">\n<h2>Concurrent tree crawling algorithm</h2>\n<p>We use a set number of threads to concurrently explore a generic tree (we do not care at the moment whether it corresponds to a web site or not). The threads start their exploration of the nodes from the tree\u2019s root. Each thread tries to explore tree nodes which have not yet been explored by other threads (we use a modification of the breadth-search algorithm to minimize the number of situations when the threads get into each other\u2019s way).</p>\n<p>In the case of web site crawling, it means that each thread has its own browser but tries not to open (and parse) web pages which have already been opened by other threads.</p>\n<p>For a more detailed information about the generic algorithm see <a href=\"http://github.com/mkobos/tree_crawler/wiki\" rel=\"nofollow\">http://github.com/mkobos/tree_crawler/wiki</a>.</p>\n</div>\n<div id=\"project-files-and-directory-structure\">\n<h2>Project files and directory structure</h2>\n<ul>\n<li><tt>Makefile</tt> \u2013 The makefile used for managing different tasks related to the source code.</li>\n<li><tt>utils/run_tests.py</tt> script runs the unit tests (or alternatively: <tt>make test</tt> or <tt>./setup.py test</tt>) . Unit tests related to a certain source file are placed inside a <tt>test</tt> directory which is placed in the same directory as the source file. This convention was introduced because we want the tests to be placed close to the source files but at the same time we want them not to pollute the source files directory.</li>\n<li><tt>utils/make_documentation.sh</tt> script generates API documentation from the source (or alternatively: <tt>make <span class=\"pre\">docs-api</span></tt>)</li>\n<li><tt>concurrent_tree_crawler/bin/run_sample_download_crawler.py</tt> script runs a sample crawler that downloads files from a local web site into a temporary directory</li>\n</ul>\n<p>The main directory contains also some configuration files for Eclipse and its PyDev plugin which are used to develop the project.</p>\n</div>\n\n          </div>"}, "last_serial": 788353, "releases": {"0.8.1": [{"comment_text": "", "digests": {"md5": "972a73b65a5a4b884e8002ccff84426b", "sha256": "cfcee1be25bd4d226f456976315ea84d0783d6e34108da26ae1adeb7160f081a"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.1-py2.7.egg", "has_sig": false, "md5_digest": "972a73b65a5a4b884e8002ccff84426b", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 181311, "upload_time": "2011-09-25T22:03:25", "upload_time_iso_8601": "2011-09-25T22:03:25.006686Z", "url": "https://files.pythonhosted.org/packages/b1/f1/4d89973a0595a4905e0c425c27df931224c90e7b5888dc188b66bdf38fbc/concurrent_tree_crawler-0.8.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecee16073a4130b37aedae150b309dba", "sha256": "6fb3763ee4ee2c106dbdd4cd2b025baab4cc96e615f1864016d47bb28f28a173"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.1.tar.gz", "has_sig": false, "md5_digest": "ecee16073a4130b37aedae150b309dba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43113, "upload_time": "2011-09-25T22:01:32", "upload_time_iso_8601": "2011-09-25T22:01:32.360454Z", "url": "https://files.pythonhosted.org/packages/5d/67/0e781bbed40fb64f104217329d4ab5e0427c0f2ab358b38fb25c432823be/concurrent_tree_crawler-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "25712eb103f3043498376efcb33e96f6", "sha256": "aa73cbf575d146ee9934971e8860aeac5f214b894ab5aa7e824b4f2256562c53"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.2-py2.7.egg", "has_sig": false, "md5_digest": "25712eb103f3043498376efcb33e96f6", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 181311, "upload_time": "2011-09-25T22:32:23", "upload_time_iso_8601": "2011-09-25T22:32:23.093888Z", "url": "https://files.pythonhosted.org/packages/25/dd/0d7be4071b75abc02526b8067bf9104a381d74a2e319ee954eef5eba1d50/concurrent_tree_crawler-0.8.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "edba94c78cea635afc1dbaabc9d6eef6", "sha256": "4c99d4a544c003d9677b1c87045702b5f1fd89b47c0c8718705e0ec58dafcd1c"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.2.tar.gz", "has_sig": false, "md5_digest": "edba94c78cea635afc1dbaabc9d6eef6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43121, "upload_time": "2011-09-25T22:32:19", "upload_time_iso_8601": "2011-09-25T22:32:19.722217Z", "url": "https://files.pythonhosted.org/packages/d9/f1/182091e45c80a119940a42c9001c489c0bc0b5f4f25be9623a9ad8760aab/concurrent_tree_crawler-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "e359f66bcc7a0b4b7d6c1a8bc50ae354", "sha256": "0a2c3e6ebe2994161658786ce60e46a538474dda553b75dbe64807a75415f364"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.3-py2.7.egg", "has_sig": false, "md5_digest": "e359f66bcc7a0b4b7d6c1a8bc50ae354", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 181327, "upload_time": "2011-09-27T09:17:40", "upload_time_iso_8601": "2011-09-27T09:17:40.080149Z", "url": "https://files.pythonhosted.org/packages/82/94/b886337d7febaf2bc44b45e325ae88f173c477fd86b34e1906ef1af9a0c6/concurrent_tree_crawler-0.8.3-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c55e7b94e40045b87ed0414f57eac0c", "sha256": "e986e61fd271bdbb3e7eab829e9c35a9af35af791ec0169b4bc46cc0267ebfca"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.3.tar.gz", "has_sig": false, "md5_digest": "1c55e7b94e40045b87ed0414f57eac0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44090, "upload_time": "2011-09-27T09:17:37", "upload_time_iso_8601": "2011-09-27T09:17:37.770180Z", "url": "https://files.pythonhosted.org/packages/73/1a/c8913845d19efa24df5aab8da8ab4b42ca3f1a76eedb75f60360dd83576d/concurrent_tree_crawler-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "4a115b0ad498cad14b3c08f4c1c82994", "sha256": "14100b910e2d5a5283fd3025d47f1250ced5749f7b0978720c93dacbcc62baa1"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.4-py2.7.egg", "has_sig": false, "md5_digest": "4a115b0ad498cad14b3c08f4c1c82994", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 181559, "upload_time": "2011-09-27T12:30:46", "upload_time_iso_8601": "2011-09-27T12:30:46.532711Z", "url": "https://files.pythonhosted.org/packages/07/ff/ee7cf55b1d5cef1793710347a913b5ba5c553cad28673b32af9742e1d846/concurrent_tree_crawler-0.8.4-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c89942e71d08546e5fece965151eaebf", "sha256": "f781d1617c514d9236d83fc334fcdc8a067db0628f87b8d8a395f6998a2121a9"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.4.tar.gz", "has_sig": false, "md5_digest": "c89942e71d08546e5fece965151eaebf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44773, "upload_time": "2011-09-27T12:30:43", "upload_time_iso_8601": "2011-09-27T12:30:43.358463Z", "url": "https://files.pythonhosted.org/packages/49/70/d3c637ba9474771ba9df85294b2963337848824a041f42e4e042a7714be7/concurrent_tree_crawler-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "cf4730e79440c12317efbc3b284c7d39", "sha256": "9ebf3c217bf9ad261efa246240d076c2d225777c1ee1db993f7f6bffddd74b21"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.5-py2.7.egg", "has_sig": false, "md5_digest": "cf4730e79440c12317efbc3b284c7d39", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 181477, "upload_time": "2011-09-27T13:13:19", "upload_time_iso_8601": "2011-09-27T13:13:19.642664Z", "url": "https://files.pythonhosted.org/packages/d6/da/26b8c9de512182aed67828ad3c0ad6355799ee289d1342ee46f95b8af647/concurrent_tree_crawler-0.8.5-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "91a259a02981f6ebad2c244bf94f9b70", "sha256": "b87ed09ee5a0024978ced2e2eedfb0077aa9292fe286af252151aa6fc0da8321"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.5.tar.gz", "has_sig": false, "md5_digest": "91a259a02981f6ebad2c244bf94f9b70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44060, "upload_time": "2011-09-27T13:13:16", "upload_time_iso_8601": "2011-09-27T13:13:16.461925Z", "url": "https://files.pythonhosted.org/packages/7a/ff/b83295d38c104efa272516b44ae0c320de5d1d186a62da3b8173fdecd845/concurrent_tree_crawler-0.8.5.tar.gz", "yanked": false}], "0.8.5-1-g3b5b": [{"comment_text": "", "digests": {"md5": "eb8adc899c85d03968804e7b1ed3982e", "sha256": "f323689dfdd7b11e14582a88f4b8545b70f6423fe2015fff1289340c34c81392"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.5_1_g3b5b-py2.7.egg", "has_sig": false, "md5_digest": "eb8adc899c85d03968804e7b1ed3982e", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 181493, "upload_time": "2011-09-27T13:22:12", "upload_time_iso_8601": "2011-09-27T13:22:12.681355Z", "url": "https://files.pythonhosted.org/packages/9f/2f/e632d61211296c353de7f16e64ba40eaf84e28e2c24b6b255e7175b38865/concurrent_tree_crawler-0.8.5_1_g3b5b-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cec6fa095437abc217eb4bf5aaf25a13", "sha256": "b0e7aa083226c2df68dfaccd9990df061f00f5df24db727a37315e910be05a88"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.5-1-g3b5b.tar.gz", "has_sig": false, "md5_digest": "cec6fa095437abc217eb4bf5aaf25a13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44630, "upload_time": "2011-09-27T13:22:09", "upload_time_iso_8601": "2011-09-27T13:22:09.588687Z", "url": "https://files.pythonhosted.org/packages/bb/ad/75efb14205fd36d5a07781818251f66f0eefb24931fdc0c6b26923102b30/concurrent_tree_crawler-0.8.5-1-g3b5b.tar.gz", "yanked": false}], "0.8.7": [{"comment_text": "", "digests": {"md5": "b0dcc956916c6943c5f73689d857cfa6", "sha256": "3ad7c7a4a4ed6f1b5682078efc629a873113694e0ab60a588a506ac743430e12"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.7-py2.7.egg", "has_sig": false, "md5_digest": "b0dcc956916c6943c5f73689d857cfa6", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 181485, "upload_time": "2011-09-27T13:29:24", "upload_time_iso_8601": "2011-09-27T13:29:24.839133Z", "url": "https://files.pythonhosted.org/packages/9f/e6/86318b77e3d871f95810ee19da51d9fb08e453da54ab89cde05efaed6aa5/concurrent_tree_crawler-0.8.7-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "25740a984a4bc4559417c3a998dec853", "sha256": "134e76115d9e3aa494a6473eb05e889075e459e25ba2504864eaf6fa9586b82a"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.7.tar.gz", "has_sig": false, "md5_digest": "25740a984a4bc4559417c3a998dec853", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44286, "upload_time": "2011-09-27T13:29:21", "upload_time_iso_8601": "2011-09-27T13:29:21.744903Z", "url": "https://files.pythonhosted.org/packages/99/c3/32f2d2da1c1d7c347b7938b7a68e3a2c3df3b3672b53312229626b34ae84/concurrent_tree_crawler-0.8.7.tar.gz", "yanked": false}], "0.8.8": [{"comment_text": "", "digests": {"md5": "1ecea2d1d0b93e43d086bb2d2dd04c8c", "sha256": "4dcc94ab572e4b38cb2292e8f874d1f71974ef981687599bd0d249a31f7d09f6"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.8-py2.7.egg", "has_sig": false, "md5_digest": "1ecea2d1d0b93e43d086bb2d2dd04c8c", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 186235, "upload_time": "2011-09-28T20:11:12", "upload_time_iso_8601": "2011-09-28T20:11:12.340870Z", "url": "https://files.pythonhosted.org/packages/14/1f/8699a4993e9d71e8a604caad2eb5463831eba27fee3c13d7a4e8d216abae/concurrent_tree_crawler-0.8.8-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "10fc011f21c7f9892bcdb636fb7ac42d", "sha256": "a9b147a862049a50bff586a545774ca35b8bba42d8564798a41b9733ac426f57"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.8.tar.gz", "has_sig": false, "md5_digest": "10fc011f21c7f9892bcdb636fb7ac42d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47840, "upload_time": "2011-09-28T20:11:08", "upload_time_iso_8601": "2011-09-28T20:11:08.514308Z", "url": "https://files.pythonhosted.org/packages/44/70/11c963b90257c46c627d91cd1a5a78001b12360f3672b7907e5b5495e39e/concurrent_tree_crawler-0.8.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ecea2d1d0b93e43d086bb2d2dd04c8c", "sha256": "4dcc94ab572e4b38cb2292e8f874d1f71974ef981687599bd0d249a31f7d09f6"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.8-py2.7.egg", "has_sig": false, "md5_digest": "1ecea2d1d0b93e43d086bb2d2dd04c8c", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 186235, "upload_time": "2011-09-28T20:11:12", "upload_time_iso_8601": "2011-09-28T20:11:12.340870Z", "url": "https://files.pythonhosted.org/packages/14/1f/8699a4993e9d71e8a604caad2eb5463831eba27fee3c13d7a4e8d216abae/concurrent_tree_crawler-0.8.8-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "10fc011f21c7f9892bcdb636fb7ac42d", "sha256": "a9b147a862049a50bff586a545774ca35b8bba42d8564798a41b9733ac426f57"}, "downloads": -1, "filename": "concurrent_tree_crawler-0.8.8.tar.gz", "has_sig": false, "md5_digest": "10fc011f21c7f9892bcdb636fb7ac42d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47840, "upload_time": "2011-09-28T20:11:08", "upload_time_iso_8601": "2011-09-28T20:11:08.514308Z", "url": "https://files.pythonhosted.org/packages/44/70/11c963b90257c46c627d91cd1a5a78001b12360f3672b7907e5b5495e39e/concurrent_tree_crawler-0.8.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:03 2020"}