{"info": {"author": "Mark van Holsteijn", "author_email": "mark@binx.io", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# git release tag\nsemantic versioning support for components in git repositories.\n\nWith the advent of continuous integration and continuous delivery, every commit to the source code repository delivers \na new version of the software. The git source code repository system uses a 40 character long revision number, which\nvery accurately point at a specific version of the source code. However, these revision number are hard to read\nfor humans. This tool allows you to combine the best of both worlds: human readable version numbers while still being\nable to uniquely identify a specific commit of the source code.\n\n## How do I use this?\nFirst you initialize the release configuration as follows:\n\n```bash\ngit-release-tag initialize --initial-release 1.0.0 --tag-prefix v .\n>>INFO: commit changes to .release in .\n>>INFO: release 1.0.0 of . tagged by v1.0.0\n```\nThis will add a file  called `.release` to the repository. It contains both the release and tag of the component\nand place the tag. \n\nNow you can show the current version of the source code:\n\n```bash\ngit-release-tag show \n>> 1.0.0\n``` \nIf you have outstanding changes in your workspace, the version is appended with the first 8 digits of the git revision number and\n  `dirty`:\n```bash\ngit-release-tag show\n>> 1.0.0-81aca04e-dirty\n```\n\nIf you commit changes to the repository, the version just shows the commit indicating a new version of the component\n\n```bash\ngit-release-tag show\n>> 1.0.0-63a8d99\n```\n\n\n## bumping the version\nIf you want to release the latest commit as a new version, type:\n```bash\ngit-release-tag bump  --level patch \n>> INFO: commit changes to .release in .\n>> INFO: release 1.0.1 of . tagged by v1.0.1\n```\nIf there are no changes since the last version. bump with not change anything:\n```bash\ngit-release-tag bump  --level patch  \n>>INFO: . has no changes since 1.1.1.\n```\n\n## multiple components in a single repository\nIf you have multiple components in a single repository, initialize the repository as follows:\n\n```bash\ngit-release-tag initialize --initial-release 1.0.0 ui backend .\n>> INFO: commit changes to .release in ui\n>> INFO: release 1.0.0 of ui tagged by ui-1.0.0\n>> INFO: commit changes to .release in backend\n>> INFO: release 1.0.0 of backend tagged by backend-1.0.0\n>> INFO: commit changes to .release in .\n>> INFO: release 1.0.0 of . tagged by api-1.0.0\n```\n\nWhen you want to release a new version of the component, type:\n```bash\ngit-release-tag bump --recursive --level patch . \n>> INFO: commit changes to .release in ./ui\n>> INFO: release 1.0.1 of ./ui tagged by ui-1.0.1\n>> INFO: ./backend has no changes since 1.0.0.\n>> INFO: commit changes to .release in .\n>> INFO: release 1.0.1 of . tagged by api-1.0.1\n```\nAs you can see, the ui now has version 1.0.1, the backend version is unchanged and the application has bumped to 1.0.1\n too, because of the changes to the ui.\n\n## validating your configuration\nAs tags are not part of the commit, it sometimes happens that somebody forgets to push the tags along with the\ncommits. To validate the integrity of your release configuration, type:\n\n```bash\ngit-release-tag validate --recursive .\n>> INFO: ok\n```\nIt reports an error if the configuration:\n- references tags which are not in the repository.\n- use the same tag for different components.\n\n## including the current version in your application\nTo include the version of the release in the source code you can add a pre-tag-command to your configuration. This\nis a command that is executed before the changes are committed.\n\n```bash\ngit-release-tag initialize \\\n    --initial-release 1.0.0 \\\n    --tag-prefix v \\\n    --pre-tag-command 'sed -i \"\" -e \"s/version=.*/version=\\\"@@RELEASE@@\\\",/g\" setup.py' \\\n    .\n>> INFO: commit changes to .release, setup.py in .\n>> INFO: release 1.0.0 of . tagged by v1.0.0\n```\n\nThe content of setup.py now reflects the released version and is included in the commit:\n```bash\ngrep version= setup.py\n>> version=\"1.0.0\",\n```\n\n## installing the utility\nTo install the utility, type:\n\n```bash\npip install git-release-tag\n```\n \n## inspired by native git describe\nIf you use a single git repository for each deliverable that you produce in the build process, you may use\n`git-describe` instead. How does it work? Well you create a tag on a particular commit, and then type:\n\n```bash\ngit tag 1.0.0\ngit describe --tags --dirty\n>> 1.0.0\n```\nIf you add something to the repository, it will append the number of commits since the tag and first 8 digits of the\nrevision number:\n```bash\ngit describe --tags --dirty\n>> 1.0.0-1-g6123dd2\n```\nIf you have uncommited changes in the staging area, it will append `dirty` to it:\n```bash\ngit describe --tags --dirty\n>> 1.0.0-1-g6123dd2-dirty\n```\nIf you commit your changes and place a new tag it show a clean tag again. git-describe does not work for the situation\nwhere you have multiple artifacts in a single repository.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/binxio/git-release-tag", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "git-release-tag", "package_url": "https://pypi.org/project/git-release-tag/", "platform": "any", "project_url": "https://pypi.org/project/git-release-tag/", "project_urls": {"Homepage": "https://github.com/binxio/git-release-tag"}, "release_url": "https://pypi.org/project/git-release-tag/0.6.0/", "requires_dist": null, "requires_python": "", "summary": "semantic version tag support for components git repositories", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>git release tag</h1>\n<p>semantic versioning support for components in git repositories.</p>\n<p>With the advent of continuous integration and continuous delivery, every commit to the source code repository delivers\na new version of the software. The git source code repository system uses a 40 character long revision number, which\nvery accurately point at a specific version of the source code. However, these revision number are hard to read\nfor humans. This tool allows you to combine the best of both worlds: human readable version numbers while still being\nable to uniquely identify a specific commit of the source code.</p>\n<h2>How do I use this?</h2>\n<p>First you initialize the release configuration as follows:</p>\n<pre>git-release-tag initialize --initial-release <span class=\"m\">1</span>.0.0 --tag-prefix v .\n&gt;&gt;INFO: commit changes to .release in .\n&gt;&gt;INFO: release <span class=\"m\">1</span>.0.0 of . tagged by v1.0.0\n</pre>\n<p>This will add a file  called <code>.release</code> to the repository. It contains both the release and tag of the component\nand place the tag.</p>\n<p>Now you can show the current version of the source code:</p>\n<pre>git-release-tag show \n&gt;&gt; <span class=\"m\">1</span>.0.0\n</pre>\n<p>If you have outstanding changes in your workspace, the version is appended with the first 8 digits of the git revision number and\n<code>dirty</code>:</p>\n<pre>git-release-tag show\n&gt;&gt; <span class=\"m\">1</span>.0.0-81aca04e-dirty\n</pre>\n<p>If you commit changes to the repository, the version just shows the commit indicating a new version of the component</p>\n<pre>git-release-tag show\n&gt;&gt; <span class=\"m\">1</span>.0.0-63a8d99\n</pre>\n<h2>bumping the version</h2>\n<p>If you want to release the latest commit as a new version, type:</p>\n<pre>git-release-tag bump  --level patch \n&gt;&gt; INFO: commit changes to .release in .\n&gt;&gt; INFO: release <span class=\"m\">1</span>.0.1 of . tagged by v1.0.1\n</pre>\n<p>If there are no changes since the last version. bump with not change anything:</p>\n<pre>git-release-tag bump  --level patch  \n&gt;&gt;INFO: . has no changes since <span class=\"m\">1</span>.1.1.\n</pre>\n<h2>multiple components in a single repository</h2>\n<p>If you have multiple components in a single repository, initialize the repository as follows:</p>\n<pre>git-release-tag initialize --initial-release <span class=\"m\">1</span>.0.0 ui backend .\n&gt;&gt; INFO: commit changes to .release in ui\n&gt;&gt; INFO: release <span class=\"m\">1</span>.0.0 of ui tagged by ui-1.0.0\n&gt;&gt; INFO: commit changes to .release in backend\n&gt;&gt; INFO: release <span class=\"m\">1</span>.0.0 of backend tagged by backend-1.0.0\n&gt;&gt; INFO: commit changes to .release in .\n&gt;&gt; INFO: release <span class=\"m\">1</span>.0.0 of . tagged by api-1.0.0\n</pre>\n<p>When you want to release a new version of the component, type:</p>\n<pre>git-release-tag bump --recursive --level patch . \n&gt;&gt; INFO: commit changes to .release in ./ui\n&gt;&gt; INFO: release <span class=\"m\">1</span>.0.1 of ./ui tagged by ui-1.0.1\n&gt;&gt; INFO: ./backend has no changes since <span class=\"m\">1</span>.0.0.\n&gt;&gt; INFO: commit changes to .release in .\n&gt;&gt; INFO: release <span class=\"m\">1</span>.0.1 of . tagged by api-1.0.1\n</pre>\n<p>As you can see, the ui now has version 1.0.1, the backend version is unchanged and the application has bumped to 1.0.1\ntoo, because of the changes to the ui.</p>\n<h2>validating your configuration</h2>\n<p>As tags are not part of the commit, it sometimes happens that somebody forgets to push the tags along with the\ncommits. To validate the integrity of your release configuration, type:</p>\n<pre>git-release-tag validate --recursive .\n&gt;&gt; INFO: ok\n</pre>\n<p>It reports an error if the configuration:</p>\n<ul>\n<li>references tags which are not in the repository.</li>\n<li>use the same tag for different components.</li>\n</ul>\n<h2>including the current version in your application</h2>\n<p>To include the version of the release in the source code you can add a pre-tag-command to your configuration. This\nis a command that is executed before the changes are committed.</p>\n<pre>git-release-tag initialize <span class=\"se\">\\</span>\n    --initial-release <span class=\"m\">1</span>.0.0 <span class=\"se\">\\</span>\n    --tag-prefix v <span class=\"se\">\\</span>\n    --pre-tag-command <span class=\"s1\">'sed -i \"\" -e \"s/version=.*/version=\\\"@@RELEASE@@\\\",/g\" setup.py'</span> <span class=\"se\">\\</span>\n    .\n&gt;&gt; INFO: commit changes to .release, setup.py in .\n&gt;&gt; INFO: release <span class=\"m\">1</span>.0.0 of . tagged by v1.0.0\n</pre>\n<p>The content of setup.py now reflects the released version and is included in the commit:</p>\n<pre>grep <span class=\"nv\">version</span><span class=\"o\">=</span> setup.py\n&gt;&gt; <span class=\"nv\">version</span><span class=\"o\">=</span><span class=\"s2\">\"1.0.0\"</span>,\n</pre>\n<h2>installing the utility</h2>\n<p>To install the utility, type:</p>\n<pre>pip install git-release-tag\n</pre>\n<h2>inspired by native git describe</h2>\n<p>If you use a single git repository for each deliverable that you produce in the build process, you may use\n<code>git-describe</code> instead. How does it work? Well you create a tag on a particular commit, and then type:</p>\n<pre>git tag <span class=\"m\">1</span>.0.0\ngit describe --tags --dirty\n&gt;&gt; <span class=\"m\">1</span>.0.0\n</pre>\n<p>If you add something to the repository, it will append the number of commits since the tag and first 8 digits of the\nrevision number:</p>\n<pre>git describe --tags --dirty\n&gt;&gt; <span class=\"m\">1</span>.0.0-1-g6123dd2\n</pre>\n<p>If you have uncommited changes in the staging area, it will append <code>dirty</code> to it:</p>\n<pre>git describe --tags --dirty\n&gt;&gt; <span class=\"m\">1</span>.0.0-1-g6123dd2-dirty\n</pre>\n<p>If you commit your changes and place a new tag it show a clean tag again. git-describe does not work for the situation\nwhere you have multiple artifacts in a single repository.</p>\n\n          </div>"}, "last_serial": 6819717, "releases": {"0.5.1": [{"comment_text": "", "digests": {"md5": "1448db2a205cf953444934ce35b8d896", "sha256": "ab4184925a93c2a5e52713111a06b952a1964583d71364e5cbaa340f24b86936"}, "downloads": -1, "filename": "git-release-tag-0.5.1.tar.gz", "has_sig": false, "md5_digest": "1448db2a205cf953444934ce35b8d896", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10717, "upload_time": "2020-03-15T15:51:11", "upload_time_iso_8601": "2020-03-15T15:51:11.666377Z", "url": "https://files.pythonhosted.org/packages/0d/9f/892ec41501da7e1dc1f0747ec9657a87575cf99851155d339a91c081661b/git-release-tag-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "03dd122b6673e920308b7e82ca11b20b", "sha256": "f16f669ba059ab5c82e1ef0575a1726a5b441808ee072d98db8461b7daa35415"}, "downloads": -1, "filename": "git-release-tag-0.5.2.tar.gz", "has_sig": false, "md5_digest": "03dd122b6673e920308b7e82ca11b20b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10720, "upload_time": "2020-03-15T15:53:41", "upload_time_iso_8601": "2020-03-15T15:53:41.589763Z", "url": "https://files.pythonhosted.org/packages/c2/bd/fc315c8fe1accdcd2a913bfc54b9b27bae264721eec2c9fd8e2dacd9da08/git-release-tag-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "a8ec7b71ce0624cf418e68ce719db4f5", "sha256": "cf66b5cc993be116cbb4d3135581f71c539bc01bc8f64783839a14990e2d42f3"}, "downloads": -1, "filename": "git-release-tag-0.6.0.tar.gz", "has_sig": false, "md5_digest": "a8ec7b71ce0624cf418e68ce719db4f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10748, "upload_time": "2020-03-16T09:19:26", "upload_time_iso_8601": "2020-03-16T09:19:26.280286Z", "url": "https://files.pythonhosted.org/packages/5a/c0/4f723e7d349f99c3bc25c985d7da620916a65758916b4698ea4100d18a04/git-release-tag-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a8ec7b71ce0624cf418e68ce719db4f5", "sha256": "cf66b5cc993be116cbb4d3135581f71c539bc01bc8f64783839a14990e2d42f3"}, "downloads": -1, "filename": "git-release-tag-0.6.0.tar.gz", "has_sig": false, "md5_digest": "a8ec7b71ce0624cf418e68ce719db4f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10748, "upload_time": "2020-03-16T09:19:26", "upload_time_iso_8601": "2020-03-16T09:19:26.280286Z", "url": "https://files.pythonhosted.org/packages/5a/c0/4f723e7d349f99c3bc25c985d7da620916a65758916b4698ea4100d18a04/git-release-tag-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:48 2020"}