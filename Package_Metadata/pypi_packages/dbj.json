{"info": {"author": "Pedro Buteri Gonring", "author_email": "pedro@bigode.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Database", "Topic :: Utilities"], "description": "|Build Status| |Coverage| |Version| |Supported| |Downloads| |License|\n\ndbj\n===\n\ndbj is a simple embedded in memory json database.\n\nIt is easy to use, fast and has a simple query language.\n\nThe code is fully documented, tested and beginner friendly.\n\nOnly the standard library is used and it works on Python 2.7, Python 3.4+ and PyPy 2.7.\n\n\nUsage\n=====\n\n.. code-block:: python\n\n    >>> from dbj import dbj\n    >>> db = dbj('mydb.json')\n\n    >>> # Insert using an auto generated uuid1 key\n    >>> db.insert({'name': 'John', 'age': 18})\n    'a71d90ce0c7611e995faf23c91392d78'\n\n    >>> # Insert using a supplied key, in this case 'anab@example.org'\n    >>> user = {'name': 'Ana Beatriz', 'age': 10}\n    >>> db.insert(user, 'anab@example.org')\n    'anab@example.org'\n\n    >>> db.insert({'name': 'Bob', 'age': 30})\n    'cc6ddfe60c7611e995faf23c91392d78'\n\n    >>> db.get('a71d90ce0c7611e995faf23c91392d78')\n    {'name': 'John', 'age': 18}\n\n    >>> db.get('anab@example.org')\n    {'name': 'Ana Beatriz', 'age': 10}\n\n    >>> db.find('age >= 18')\n    ['a71d90ce0c7611e995faf23c91392d78', 'cc6ddfe60c7611e995faf23c91392d78']\n\n    >>> db.find('name == \"ana beatriz\"')\n    ['anab@example.org']\n\n    >>> r = db.find('name == \"John\" or name == \"Bob\" and age > 10')\n    >>> db.getmany(r)\n    [{'name': 'Bob', 'age': 30}, {'name': 'John', 'age': 18}]\n\n    >>> # Sort the result by age\n    >>> r = db.sort(r, 'age')\n    >>> db.getmany(r)\n    [{'name': 'John', 'age': 18}, {'name': 'Bob', 'age': 30}]\n\n    >>> # Sort can also be used from find directly\n    >>> r = db.find('age >= 10', sortby='age')\n    >>> db.getmany(r)\n    [{'name': 'Ana Beatriz', 'age': 10}, {'name': 'John', 'age': 18}, {'name': 'Bob', 'age': 30}]\n\n    >>> # One-liner:\n    >>> db.getmany(db.find('age >= 10', sortby='age'))\n    [{'name': 'Ana Beatriz', 'age': 10}, {'name': 'John', 'age': 18}, {'name': 'Bob', 'age': 30}]\n\n    >>> db.save()\n    True\n\n\nInstall\n=======\n\nInstall using pip::\n\n    $ pip install dbj\n\n\nExamples\n========\n\nCheck the `available commands`_ for a full list of supported methods.\n\nImport the module and create a new database:\n\n.. code-block:: python\n\n    >>> from dbj import dbj\n    >>> db = dbj('mydb.json')\n\nInsert a few documents with auto generated key:\n\n.. code-block:: python\n\n    >>> doc = {'name': 'John Doe', 'age': 18}\n    >>> db.insert(doc)\n    '7a5ebd420cb211e98a0ff23c91392d78'\n\n    >>> docs = [{'name': 'Beatriz', 'age': 30}, {'name': 'Ana', 'age': 10}]\n    >>> db.insertmany(docs)\n    2\n\nInsert with a supplied key:\n\n.. code-block:: python\n\n    >>> doc = {'name': 'john', 'age': 20, 'country': 'Brasil'}\n    >>> db.insert(doc, '1')\n    1\n\n    >>> db.insert({'name': 'Bob', 'age': 40}, '2')\n    2\n\n    >>> db.getallkeys()\n    ['7a5ebd420cb211e98a0ff23c91392d78', 'db21baf80cb211e98a0ff23c91392d78', 'db21edde0cb211e98a0ff23c91392d78', '1', '2']\n\nPop and delete:\n\n.. code-block:: python\n\n    >>> db.delete('1')\n    True\n\n    >>> db.poplast()\n    {'name': 'Bob', 'age': 40}\n\n    >>> db.size()\n    3\n\n    >>> db.getallkeys()\n    ['7a5ebd420cb211e98a0ff23c91392d78', 'db21baf80cb211e98a0ff23c91392d78', 'db21edde0cb211e98a0ff23c91392d78']\n\nUpdating an existing document:\n\n.. code-block:: python\n\n    >>> db.insert({'name': 'Ethan', 'age': 40}, '1000')\n    '1000'\n\n    >>> db.get('1000')\n    {'name': 'Ethan', 'age': 40}\n\n    >>> db.update('1000', {'age': 50})\n    True\n\n    >>> db.get('1000')\n    {'name': 'Ethan', 'age': 50}\n\n    >>> db.update('1000', {'name': 'Ethan Doe', 'gender': 'male'})\n    True\n\n    >>> db.pop('1000')\n    {'name': 'Ethan Doe', 'age': 50, 'gender': 'male'}\n\nRetrieving some documents:\n\n.. code-block:: python\n\n    >>> db.getall()\n    [{'name': 'John Doe', 'age': 18}, {'name': 'Beatriz', 'age': 30}, {'name': 'Ana', 'age': 10}]\n\n    >>> db.getfirst()\n    {'name': 'John Doe', 'age': 18}\n\n    >>> db.getlast()\n    {'name': 'Ana', 'age': 10}\n\n    >>> db.getrandom() # returns a random document\n    {'name': 'Ana', 'age': 10}\n\nCheck for existance:\n\n.. code-block:: python\n\n    >>> db.exists('7a5ebd420cb211e98a0ff23c91392d78')\n    True\n\nSearchin and sorting:\n\n.. code-block:: python\n\n    >>> r = db.sort(db.getallkeys(), 'name')\n    >>> db.getmany(r)\n    [{'name': 'Ana', 'age': 10}, {'name': 'Beatriz', 'age': 30}, {'name': 'John Doe', 'age': 18}]\n\n    >>> r = db.find('name ?= \"john\"')\n    >>> db.getmany(r)\n    [{'name': 'John Doe', 'age': 18}]\n\n    >>> query = 'name == \"john doe\" or name == \"ana\" and age >= 10'\n    >>> r = db.find(query)\n    >>> db.getmany(r)\n    [{'name': 'John Doe', 'age': 18}, {'name': 'Ana', 'age': 10}]\n\n    >>> r = db.find('age < 40', sortby='age')\n    >>> db.getmany(r)\n    [{'name': 'Ana', 'age': 10}, {'name': 'John Doe', 'age': 18}, {'name': 'Beatriz', 'age': 30}]\n\nSave the database to disk:\n\n.. code-block:: python\n\n    >>> db.save()\n    True\n\nEnable auto saving to disk after a insert, update or delete:\n\n.. code-block:: python\n\n    >>> db = dbj('mydb.json', autosave=True)\n\n\nAbout the simple query language\n===============================\n\nThe query for the find command uses the following pattern:\n\n*field operator value and/or field operator value...*\n\n**Spaces are mandatory** and used as a separator by the parser. For example,\nthe following query **will not work**::\n\n    name==\"John\" and age >=18\n\n**A valid example**::\n\n    name == \"John Doe\" and age >= 18\n\nStrings must be enclosed by quotes. Quoted text can be searched using double\nquotes as the string delimiter, like::\n\n    name == \"\"Bob \"B\" Lee\"\"\n\nPlease note that if value is a string, a search for text will be executed\n(using the string operatos below) and if value is a number, a number comparison\nsearch will be used.\n\nThe supported string operators are::\n\n    '==' -> Exact match. 'John' will not match 'John Doe' but will match 'john'\n    by default. If case sensitive is desired, just use find with sens=True. See\n    available commands below for the full find method signature.\n\n    '?=' -> Partial match. In this case, 'John' will match 'John Doe'.\n\n    '!=' -> Not equal operator.\n\nThe numbers comparison operators are::\n\n    '==', '!=', '<', '<=', '>', '>='\n\nThe supported logical operatos are::\n\n    and, or\n\n\nImportant changes\n=================\n\n0.1.4:\n------\n\n- The insert() method will raise a TypeError exception if the document dict is not json serializable.\n\n\nPerformance\n===========\n\nSince the entire database is an OrderedDict in memory, performance is pretty\ngood. On a cheap single core VM it can handle dozens of thousands operations\nper second.\n\nA simple benchmark is included to get a roughly estimative of operations per\nsecond. Here is the result on a $5 bucks Linode VM running on Pyhton 3::\n\n    $ python3 bench_dbj.py\n\n    --------------------------------\n\n    Inserting 100000 documents using auto generated uuid1 key...\n    Done! Time spent: 4.44s\n    Inserted: 100000\n    Rate: 22515 ops/s\n\n    --------------------------------\n\n    Clearing the database...\n    Done!\n\n    --------------------------------\n\n    Inserting 100000 documents using a supplied key...\n    Done! Time spent: 1.26s\n    Inserted: 100000\n    Rate: 79563 ops/s\n\n    --------------------------------\n\n    Retrieving 100000 documents one at a time...\n    Done! Time spent: 1.54s\n    Retrieved: 100000\n    Rate: 64754 ops/s\n\n    --------------------------------\n\n    Saving database to disk...\n    Done! Time spent: 1.06s\n\n    --------------------------------\n\n    Deleting 100000 documents one at a time...\n    Done! Time spent: 0.24s\n    Deleted: 100000\n    Rate: 419770 ops/s\n\n    --------------------------------\n\n    Removing file...\n    Done!\n\n    Peak memory usage: 60.41 MB\n\n\nAvailable commands\n==================\n\ninsert(document, key=None) -> Create a new document on database.\n    Args:\n        | document (dict): The document to be created.\n        | key (str, optional): The document unique key. Defaults to uuid1.\n    Returns:\n        The document key.\n\ninsertmany(documents) -> Insert multiple documents on database.\n    Args:\n        documents (list): List containing the documents to insert.\n    Returns:\n        Number of inserted documents.\n\nsave() -> Save database to disk.\n    Returns:\n        True if successful.\n\nclear() -> Remove all documents from database.\n    Returns:\n        True if successful.\n\nsize() -> Return the database size.\n    Returns:\n        Number of documents on database.\n\nexists(key) -> Check if a document exists on database.\n    Args:\n        key (str): The document key.\n    Returns:\n        True or False if it does not exist.\n\ndelete(key) -> Delete a document on database.\n    Args:\n        key (str): The document key.\n    Returns:\n        True or False if it does not exist.\n\ndeletemany(keys) -> Delete multiple documents on database.\n    Args:\n        keys (list): List containing the keys of the documents to delete.\n    Returns:\n        Number of deleted documents.\n\nupdate(key, values) -> Add/update values on a document.\n    Args:\n        | key (str): The document key.\n        | values (dict): The values to be added/updated.\n    Returns:\n        True or False if document does not exist.\n\nupdatemany(keys, values) -> Add/update values on multiple documents.\n    Args:\n        | keys (list): List containing the keys of the documents to update.\n        | values (dict): The values to be added/updated.\n    Returns:\n        Number of updated documents.\n\nget(key) -> Get a document on database.\n    Args:\n        key (str): The document key.\n    Returns:\n        The document or False if it does not exist.\n\ngetmany(keys) -> Get multiple documents from database.\n    Args:\n        keys (list): List containing the keys of the documents to retrieve.\n    Returns:\n        List of documents.\n\ngetall() -> Return a list containing all documents on database.\n    Returns:\n        List with all database documents.\n\ngetallkeys() -> Return a list containing all keys on database.\n    Returns:\n        List with all database keys.\n\ngetrandom() -> Get a random document on database.\n    Returns:\n        A document or False if database is empty.\n\ngetfirst(self) -> Get the first inserted document on database.\n    Returns:\n        The first inserted document or False if database is empty.\n\ngetlast() -> Get the last inserted document on database.\n    Returns:\n        The last inserted document or False if database is empty.\n\ngetfirstkey() -> Get the first key on database.\n    Returns:\n        The first key or False if database is empty.\n\ngetlastkey() -> Get the last key on database.\n    Returns:\n        The last key or False if database is empty.\n\npop(key) -> Get the document from database and remove it.\n    Args:\n        key (str): The document key.\n    Returns:\n        The document or False if it does not exist.\n\npopfirst() -> Get the first inserted document on database and remove it.\n    Returns:\n        The first inserted document or False if database is empty.\n\npoplast() -> Get the last inserted document on database and remove it.\n    Returns:\n        The last inserted document or False if database is empty.\n\nsort(keys, field, reverse=False) -> Sort the documents using the field provided.\n    Args:\n        | keys (list): List containing the keys of the documents to sort.\n        | field (str): Field to sort.\n        | reverse (bool, optional): Reverse search. Defaults to False.\n    Returns:\n        Sorted list with the documents keys.\n\nfindtext(field, text, exact=False, sens=False, inverse=False, asc=True) -> Simple text search on the provided field.\n    Args:\n        | field (str): The field to search.\n        | text (str): The value to be searched.\n        | exact (bool, optional): Exact text match. Defaults to False.\n        | sens (bool, optional): Case sensitive. Defaults to False.\n        | inverse (bool, optional): Inverse search, return the documents that do not match the search. Defaults to False.\n        | asc (bool, optional): Ascii conversion before matching, this matches text like 'cafe' and 'caf\u00e9'. Defaults to True.\n    Returns:\n        List with the keys of the documents that matched the search.\n\nfindnum(expression) -> Simple number comparison search on provided field.\n    Args:\n        | expression (str): The comparison expression to use, e.g., \"age >= 18\". The pattern is 'field operator number'.\n    Returns:\n        List with the keys of the documents that matched the search.\n\nfind(query, sens=False, asc=True, sortby=None, reverse=False) -> Simple query like search.\n    Args:\n        | query (str): The query to use.\n        | sens (bool, optional): Case sensitive. Defaults to False.\n        | asc (bool, optional): Ascii conversion before matching, this matches text like 'cafe' and 'caf\u00e9'. Defaults to True.\n        | sortby (string, optional): Sort using the provided field.\n        | reverse (bool, optional): Reverse sort. Defaults to False.\n    Returns:\n        List with the keys of the documents that matched the search.\n\n\n.. |Build Status| image:: https://travis-ci.org/pdrb/dbj.svg?branch=master\n    :target: https://travis-ci.org/pdrb/dbj\n\n.. |Coverage| image:: https://coveralls.io/repos/github/pdrb/dbj/badge.svg?branch=master\n    :target: https://coveralls.io/github/pdrb/dbj?branch=master\n\n.. |Version| image:: https://badge.fury.io/py/dbj.svg\n    :target: https://pypi.org/project/dbj/\n\n.. |Supported| image:: https://img.shields.io/pypi/pyversions/dbj.svg\n    :target: https://pypi.org/project/dbj/\n\n.. |Downloads| image:: https://pepy.tech/badge/dbj\n     :target: https://pepy.tech/project/dbj\n\n.. |License| image:: https://img.shields.io/pypi/l/dbj.svg\n    :target: https://github.com/pdrb/dbj/blob/master/LICENSE", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pdrb/dbj", "keywords": "simple json database", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dbj", "package_url": "https://pypi.org/project/dbj/", "platform": "", "project_url": "https://pypi.org/project/dbj/", "project_urls": {"Homepage": "https://github.com/pdrb/dbj"}, "release_url": "https://pypi.org/project/dbj/0.1.8/", "requires_dist": null, "requires_python": "", "summary": "Simple embedded in memory json database", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/pdrb/dbj\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de0f692a7b1868a2e96c0c98698cf96b6d33a734/68747470733a2f2f7472617669732d63692e6f72672f706472622f64626a2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/pdrb/dbj?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/724518cec1fe8f1c1e39d3793033a433ce2f0342/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f706472622f64626a2f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/dbj/\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d3d60b22cb0831ba30c4e54668acadb7330e17d/68747470733a2f2f62616467652e667572792e696f2f70792f64626a2e737667\"></a> <a href=\"https://pypi.org/project/dbj/\" rel=\"nofollow\"><img alt=\"Supported\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1d8b0ddd623a36c9f5b45e7aaeb806040b02bf9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f64626a2e737667\"></a> <a href=\"https://pepy.tech/project/dbj\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef3d0e30b9e79b71a8bb8fbc14c7cc21fe79748c/68747470733a2f2f706570792e746563682f62616467652f64626a\"></a> <a href=\"https://github.com/pdrb/dbj/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90e5f601cfabec7274361c0e8e12a9d6a8f5a526/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f64626a2e737667\"></a></p>\n<div id=\"dbj\">\n<h2>dbj</h2>\n<p>dbj is a simple embedded in memory json database.</p>\n<p>It is easy to use, fast and has a simple query language.</p>\n<p>The code is fully documented, tested and beginner friendly.</p>\n<p>Only the standard library is used and it works on Python 2.7, Python 3.4+ and PyPy 2.7.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dbj</span> <span class=\"kn\">import</span> <span class=\"n\">dbj</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">dbj</span><span class=\"p\">(</span><span class=\"s1\">'mydb.json'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Insert using an auto generated uuid1 key</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">})</span>\n<span class=\"s1\">'a71d90ce0c7611e995faf23c91392d78'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Insert using a supplied key, in this case 'anab@example.org'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana Beatriz'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"s1\">'anab@example.org'</span><span class=\"p\">)</span>\n<span class=\"s1\">'anab@example.org'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">})</span>\n<span class=\"s1\">'cc6ddfe60c7611e995faf23c91392d78'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'a71d90ce0c7611e995faf23c91392d78'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'anab@example.org'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana Beatriz'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'age &gt;= 18'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'a71d90ce0c7611e995faf23c91392d78'</span><span class=\"p\">,</span> <span class=\"s1\">'cc6ddfe60c7611e995faf23c91392d78'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'name == \"ana beatriz\"'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'anab@example.org'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'name == \"John\" or name == \"Bob\" and age &gt; 10'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getmany</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Sort the result by age</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getmany</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Sort can also be used from find directly</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'age &gt;= 10'</span><span class=\"p\">,</span> <span class=\"n\">sortby</span><span class=\"o\">=</span><span class=\"s1\">'age'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getmany</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana Beatriz'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># One-liner:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getmany</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'age &gt;= 10'</span><span class=\"p\">,</span> <span class=\"n\">sortby</span><span class=\"o\">=</span><span class=\"s1\">'age'</span><span class=\"p\">))</span>\n<span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana Beatriz'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Install using pip:</p>\n<pre>$ pip install dbj\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Check the <a href=\"#available-commands\" rel=\"nofollow\">available commands</a> for a full list of supported methods.</p>\n<p>Import the module and create a new database:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dbj</span> <span class=\"kn\">import</span> <span class=\"n\">dbj</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">dbj</span><span class=\"p\">(</span><span class=\"s1\">'mydb.json'</span><span class=\"p\">)</span>\n</pre>\n<p>Insert a few documents with auto generated key:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n<span class=\"s1\">'7a5ebd420cb211e98a0ff23c91392d78'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">docs</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Beatriz'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insertmany</span><span class=\"p\">(</span><span class=\"n\">docs</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n</pre>\n<p>Insert with a supplied key:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'john'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"s1\">'country'</span><span class=\"p\">:</span> <span class=\"s1\">'Brasil'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">},</span> <span class=\"s1\">'2'</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getallkeys</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'7a5ebd420cb211e98a0ff23c91392d78'</span><span class=\"p\">,</span> <span class=\"s1\">'db21baf80cb211e98a0ff23c91392d78'</span><span class=\"p\">,</span> <span class=\"s1\">'db21edde0cb211e98a0ff23c91392d78'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">]</span>\n</pre>\n<p>Pop and delete:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">poplast</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>\n<span class=\"mi\">3</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getallkeys</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'7a5ebd420cb211e98a0ff23c91392d78'</span><span class=\"p\">,</span> <span class=\"s1\">'db21baf80cb211e98a0ff23c91392d78'</span><span class=\"p\">,</span> <span class=\"s1\">'db21edde0cb211e98a0ff23c91392d78'</span><span class=\"p\">]</span>\n</pre>\n<p>Updating an existing document:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ethan'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">},</span> <span class=\"s1\">'1000'</span><span class=\"p\">)</span>\n<span class=\"s1\">'1000'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'1000'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ethan'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'1000'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">})</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'1000'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ethan'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'1000'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ethan Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'gender'</span><span class=\"p\">:</span> <span class=\"s1\">'male'</span><span class=\"p\">})</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'1000'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ethan Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s1\">'gender'</span><span class=\"p\">:</span> <span class=\"s1\">'male'</span><span class=\"p\">}</span>\n</pre>\n<p>Retrieving some documents:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getall</span><span class=\"p\">()</span>\n<span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Beatriz'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getfirst</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getlast</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getrandom</span><span class=\"p\">()</span> <span class=\"c1\"># returns a random document</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n</pre>\n<p>Check for existance:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"s1\">'7a5ebd420cb211e98a0ff23c91392d78'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Searchin and sorting:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getallkeys</span><span class=\"p\">(),</span> <span class=\"s1\">'name'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getmany</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Beatriz'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'name ?= \"john\"'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getmany</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'name == \"john doe\" or name == \"ana\" and age &gt;= 10'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getmany</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'age &lt; 40'</span><span class=\"p\">,</span> <span class=\"n\">sortby</span><span class=\"o\">=</span><span class=\"s1\">'age'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">getmany</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ana'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Beatriz'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}]</span>\n</pre>\n<p>Save the database to disk:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Enable auto saving to disk after a insert, update or delete:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">dbj</span><span class=\"p\">(</span><span class=\"s1\">'mydb.json'</span><span class=\"p\">,</span> <span class=\"n\">autosave</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"about-the-simple-query-language\">\n<h2>About the simple query language</h2>\n<p>The query for the find command uses the following pattern:</p>\n<p><em>field operator value and/or field operator value\u2026</em></p>\n<p><strong>Spaces are mandatory</strong> and used as a separator by the parser. For example,\nthe following query <strong>will not work</strong>:</p>\n<pre>name==\"John\" and age &gt;=18\n</pre>\n<p><strong>A valid example</strong>:</p>\n<pre>name == \"John Doe\" and age &gt;= 18\n</pre>\n<p>Strings must be enclosed by quotes. Quoted text can be searched using double\nquotes as the string delimiter, like:</p>\n<pre>name == \"\"Bob \"B\" Lee\"\"\n</pre>\n<p>Please note that if value is a string, a search for text will be executed\n(using the string operatos below) and if value is a number, a number comparison\nsearch will be used.</p>\n<p>The supported string operators are:</p>\n<pre>'==' -&gt; Exact match. 'John' will not match 'John Doe' but will match 'john'\nby default. If case sensitive is desired, just use find with sens=True. See\navailable commands below for the full find method signature.\n\n'?=' -&gt; Partial match. In this case, 'John' will match 'John Doe'.\n\n'!=' -&gt; Not equal operator.\n</pre>\n<p>The numbers comparison operators are:</p>\n<pre>'==', '!=', '&lt;', '&lt;=', '&gt;', '&gt;='\n</pre>\n<p>The supported logical operatos are:</p>\n<pre>and, or\n</pre>\n</div>\n<div id=\"important-changes\">\n<h2>Important changes</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.4:</span></h2>\n<ul>\n<li>The insert() method will raise a TypeError exception if the document dict is not json serializable.</li>\n</ul>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>Since the entire database is an OrderedDict in memory, performance is pretty\ngood. On a cheap single core VM it can handle dozens of thousands operations\nper second.</p>\n<p>A simple benchmark is included to get a roughly estimative of operations per\nsecond. Here is the result on a $5 bucks Linode VM running on Pyhton 3:</p>\n<pre>$ python3 bench_dbj.py\n\n--------------------------------\n\nInserting 100000 documents using auto generated uuid1 key...\nDone! Time spent: 4.44s\nInserted: 100000\nRate: 22515 ops/s\n\n--------------------------------\n\nClearing the database...\nDone!\n\n--------------------------------\n\nInserting 100000 documents using a supplied key...\nDone! Time spent: 1.26s\nInserted: 100000\nRate: 79563 ops/s\n\n--------------------------------\n\nRetrieving 100000 documents one at a time...\nDone! Time spent: 1.54s\nRetrieved: 100000\nRate: 64754 ops/s\n\n--------------------------------\n\nSaving database to disk...\nDone! Time spent: 1.06s\n\n--------------------------------\n\nDeleting 100000 documents one at a time...\nDone! Time spent: 0.24s\nDeleted: 100000\nRate: 419770 ops/s\n\n--------------------------------\n\nRemoving file...\nDone!\n\nPeak memory usage: 60.41 MB\n</pre>\n</div>\n<div id=\"available-commands\">\n<h2>Available commands</h2>\n<dl>\n<dt>insert(document, key=None) -&gt; Create a new document on database.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd><div>\n<div>document (dict): The document to be created.</div>\n<div>key (str, optional): The document unique key. Defaults to uuid1.</div>\n</div>\n</dd>\n<dt>Returns:</dt>\n<dd>The document key.</dd>\n</dl>\n</dd>\n<dt>insertmany(documents) -&gt; Insert multiple documents on database.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd>documents (list): List containing the documents to insert.</dd>\n<dt>Returns:</dt>\n<dd>Number of inserted documents.</dd>\n</dl>\n</dd>\n<dt>save() -&gt; Save database to disk.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>True if successful.</dd>\n</dl>\n</dd>\n<dt>clear() -&gt; Remove all documents from database.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>True if successful.</dd>\n</dl>\n</dd>\n<dt>size() -&gt; Return the database size.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>Number of documents on database.</dd>\n</dl>\n</dd>\n<dt>exists(key) -&gt; Check if a document exists on database.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd>key (str): The document key.</dd>\n<dt>Returns:</dt>\n<dd>True or False if it does not exist.</dd>\n</dl>\n</dd>\n<dt>delete(key) -&gt; Delete a document on database.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd>key (str): The document key.</dd>\n<dt>Returns:</dt>\n<dd>True or False if it does not exist.</dd>\n</dl>\n</dd>\n<dt>deletemany(keys) -&gt; Delete multiple documents on database.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd>keys (list): List containing the keys of the documents to delete.</dd>\n<dt>Returns:</dt>\n<dd>Number of deleted documents.</dd>\n</dl>\n</dd>\n<dt>update(key, values) -&gt; Add/update values on a document.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd><div>\n<div>key (str): The document key.</div>\n<div>values (dict): The values to be added/updated.</div>\n</div>\n</dd>\n<dt>Returns:</dt>\n<dd>True or False if document does not exist.</dd>\n</dl>\n</dd>\n<dt>updatemany(keys, values) -&gt; Add/update values on multiple documents.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd><div>\n<div>keys (list): List containing the keys of the documents to update.</div>\n<div>values (dict): The values to be added/updated.</div>\n</div>\n</dd>\n<dt>Returns:</dt>\n<dd>Number of updated documents.</dd>\n</dl>\n</dd>\n<dt>get(key) -&gt; Get a document on database.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd>key (str): The document key.</dd>\n<dt>Returns:</dt>\n<dd>The document or False if it does not exist.</dd>\n</dl>\n</dd>\n<dt>getmany(keys) -&gt; Get multiple documents from database.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd>keys (list): List containing the keys of the documents to retrieve.</dd>\n<dt>Returns:</dt>\n<dd>List of documents.</dd>\n</dl>\n</dd>\n<dt>getall() -&gt; Return a list containing all documents on database.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>List with all database documents.</dd>\n</dl>\n</dd>\n<dt>getallkeys() -&gt; Return a list containing all keys on database.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>List with all database keys.</dd>\n</dl>\n</dd>\n<dt>getrandom() -&gt; Get a random document on database.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>A document or False if database is empty.</dd>\n</dl>\n</dd>\n<dt>getfirst(self) -&gt; Get the first inserted document on database.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>The first inserted document or False if database is empty.</dd>\n</dl>\n</dd>\n<dt>getlast() -&gt; Get the last inserted document on database.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>The last inserted document or False if database is empty.</dd>\n</dl>\n</dd>\n<dt>getfirstkey() -&gt; Get the first key on database.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>The first key or False if database is empty.</dd>\n</dl>\n</dd>\n<dt>getlastkey() -&gt; Get the last key on database.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>The last key or False if database is empty.</dd>\n</dl>\n</dd>\n<dt>pop(key) -&gt; Get the document from database and remove it.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd>key (str): The document key.</dd>\n<dt>Returns:</dt>\n<dd>The document or False if it does not exist.</dd>\n</dl>\n</dd>\n<dt>popfirst() -&gt; Get the first inserted document on database and remove it.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>The first inserted document or False if database is empty.</dd>\n</dl>\n</dd>\n<dt>poplast() -&gt; Get the last inserted document on database and remove it.</dt>\n<dd><dl>\n<dt>Returns:</dt>\n<dd>The last inserted document or False if database is empty.</dd>\n</dl>\n</dd>\n<dt>sort(keys, field, reverse=False) -&gt; Sort the documents using the field provided.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd><div>\n<div>keys (list): List containing the keys of the documents to sort.</div>\n<div>field (str): Field to sort.</div>\n<div>reverse (bool, optional): Reverse search. Defaults to False.</div>\n</div>\n</dd>\n<dt>Returns:</dt>\n<dd>Sorted list with the documents keys.</dd>\n</dl>\n</dd>\n<dt>findtext(field, text, exact=False, sens=False, inverse=False, asc=True) -&gt; Simple text search on the provided field.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd><div>\n<div>field (str): The field to search.</div>\n<div>text (str): The value to be searched.</div>\n<div>exact (bool, optional): Exact text match. Defaults to False.</div>\n<div>sens (bool, optional): Case sensitive. Defaults to False.</div>\n<div>inverse (bool, optional): Inverse search, return the documents that do not match the search. Defaults to False.</div>\n<div>asc (bool, optional): Ascii conversion before matching, this matches text like \u2018cafe\u2019 and \u2018caf\u00e9\u2019. Defaults to True.</div>\n</div>\n</dd>\n<dt>Returns:</dt>\n<dd>List with the keys of the documents that matched the search.</dd>\n</dl>\n</dd>\n<dt>findnum(expression) -&gt; Simple number comparison search on provided field.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd><div>\n<div>expression (str): The comparison expression to use, e.g., \u201cage &gt;= 18\u201d. The pattern is \u2018field operator number\u2019.</div>\n</div>\n</dd>\n<dt>Returns:</dt>\n<dd>List with the keys of the documents that matched the search.</dd>\n</dl>\n</dd>\n<dt>find(query, sens=False, asc=True, sortby=None, reverse=False) -&gt; Simple query like search.</dt>\n<dd><dl>\n<dt>Args:</dt>\n<dd><div>\n<div>query (str): The query to use.</div>\n<div>sens (bool, optional): Case sensitive. Defaults to False.</div>\n<div>asc (bool, optional): Ascii conversion before matching, this matches text like \u2018cafe\u2019 and \u2018caf\u00e9\u2019. Defaults to True.</div>\n<div>sortby (string, optional): Sort using the provided field.</div>\n<div>reverse (bool, optional): Reverse sort. Defaults to False.</div>\n</div>\n</dd>\n<dt>Returns:</dt>\n<dd>List with the keys of the documents that matched the search.</dd>\n</dl>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 6788071, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3be461931efb6de815b9f9f7ea8f6d61", "sha256": "4cad30617f72d1f8e0a0db59eb9e180bbffedd417eab4efcf0a9adb8d681e7aa"}, "downloads": -1, "filename": "dbj-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3be461931efb6de815b9f9f7ea8f6d61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8502, "upload_time": "2018-12-31T06:27:56", "upload_time_iso_8601": "2018-12-31T06:27:56.165216Z", "url": "https://files.pythonhosted.org/packages/e9/79/5c9146ae22a8a7f13363c8d468af09db33e5546384caa3dd7f6c3862b94a/dbj-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "82472ba46052bef4fc8ff0454a0ee6a5", "sha256": "47ba3f796ed57808a9c4d9be563e5b1b5e7b076a393f2fa386e277eab992443c"}, "downloads": -1, "filename": "dbj-0.1.1.tar.gz", "has_sig": false, "md5_digest": "82472ba46052bef4fc8ff0454a0ee6a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8776, "upload_time": "2018-12-31T20:23:28", "upload_time_iso_8601": "2018-12-31T20:23:28.912962Z", "url": "https://files.pythonhosted.org/packages/3a/00/3c996a97f89d837ac4cb0d3b9ef1b955d54a6e2f1fe253abe70b9054c9cf/dbj-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4c5764d8260dce148f4b9a16e21bb002", "sha256": "7eaace1b3d91ea31de5badbb2d8259ebcfeb1ab66628c4566493aebed617996f"}, "downloads": -1, "filename": "dbj-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4c5764d8260dce148f4b9a16e21bb002", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10265, "upload_time": "2019-01-02T15:41:08", "upload_time_iso_8601": "2019-01-02T15:41:08.758349Z", "url": "https://files.pythonhosted.org/packages/37/dd/04f78733b4115afd3476810ca1cbf9c9f93ce7bf1144be34cbed633cd6d9/dbj-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "614edd0eefb473ff3c4ca7251dc7041c", "sha256": "c64fae956a7f9cd952ffac784430bbb3de77e649f0fbbda6f9964c1be534c490"}, "downloads": -1, "filename": "dbj-0.1.3.tar.gz", "has_sig": false, "md5_digest": "614edd0eefb473ff3c4ca7251dc7041c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10527, "upload_time": "2019-01-02T18:54:13", "upload_time_iso_8601": "2019-01-02T18:54:13.581938Z", "url": "https://files.pythonhosted.org/packages/26/30/627be822afba96dc2631d178b5be871d151890762e8f999bc93420464dd1/dbj-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "3d395ea993bf8bdc0d5410ac90e2bd7f", "sha256": "24eacb5a5af48978e3a47679d1de4f65a50e487787b2793d9fde00fb862b4164"}, "downloads": -1, "filename": "dbj-0.1.4.tar.gz", "has_sig": false, "md5_digest": "3d395ea993bf8bdc0d5410ac90e2bd7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10770, "upload_time": "2019-01-10T01:09:58", "upload_time_iso_8601": "2019-01-10T01:09:58.595605Z", "url": "https://files.pythonhosted.org/packages/f5/83/ebf2ca1d1bdb5f90f02ff7e57431239f43ca71d83ef5cc9bb6b34d1bfa88/dbj-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "575c29af1cf1cc62543086cfceb9e88b", "sha256": "0715b01f7c5cc433f02c66c56ddcaa7c1b4c490ca1f830412513964380013fbd"}, "downloads": -1, "filename": "dbj-0.1.5.tar.gz", "has_sig": false, "md5_digest": "575c29af1cf1cc62543086cfceb9e88b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10794, "upload_time": "2019-01-12T03:32:14", "upload_time_iso_8601": "2019-01-12T03:32:14.833608Z", "url": "https://files.pythonhosted.org/packages/7d/bb/e36e31bdd39e3f600ddab2d719b79d393c547a04e608bc397d48436fa9fd/dbj-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "890081573ad7aa0a10eee2304dd27769", "sha256": "cbf5f88a8e4368cf1bcecaafa45db528dd23995a4aaf7a8a5d5ad7bb97236f91"}, "downloads": -1, "filename": "dbj-0.1.6.tar.gz", "has_sig": false, "md5_digest": "890081573ad7aa0a10eee2304dd27769", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10804, "upload_time": "2019-08-31T14:43:37", "upload_time_iso_8601": "2019-08-31T14:43:37.531673Z", "url": "https://files.pythonhosted.org/packages/c2/33/256a98a8022675d335a66500d1a357a3671bc21616b453efbffc433e2125/dbj-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "41d1abe308f87b1d231e1f8a6b60fe2c", "sha256": "a8350b7d79bc0605a9b51587e912cc13bc28e853ab37767a0515f5cd7fc854d5"}, "downloads": -1, "filename": "dbj-0.1.7.tar.gz", "has_sig": false, "md5_digest": "41d1abe308f87b1d231e1f8a6b60fe2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10854, "upload_time": "2020-03-09T22:39:05", "upload_time_iso_8601": "2020-03-09T22:39:05.290113Z", "url": "https://files.pythonhosted.org/packages/2d/f3/f0b68df67e5c5c4103d2d3677854505a962fca5f9a419102a5130a47b6e7/dbj-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "049f79aacd0f669ebde3b5456d07ea0e", "sha256": "0c23321e954a31eb34704db563af822e1c0154476f3741e276d09182aa93e0c0"}, "downloads": -1, "filename": "dbj-0.1.8.tar.gz", "has_sig": false, "md5_digest": "049f79aacd0f669ebde3b5456d07ea0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11065, "upload_time": "2020-03-10T21:23:14", "upload_time_iso_8601": "2020-03-10T21:23:14.188465Z", "url": "https://files.pythonhosted.org/packages/b0/21/e4c8ba0a323b24c71a000a9bc720438576b2eebc8bde6b476b3659bf9b57/dbj-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "049f79aacd0f669ebde3b5456d07ea0e", "sha256": "0c23321e954a31eb34704db563af822e1c0154476f3741e276d09182aa93e0c0"}, "downloads": -1, "filename": "dbj-0.1.8.tar.gz", "has_sig": false, "md5_digest": "049f79aacd0f669ebde3b5456d07ea0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11065, "upload_time": "2020-03-10T21:23:14", "upload_time_iso_8601": "2020-03-10T21:23:14.188465Z", "url": "https://files.pythonhosted.org/packages/b0/21/e4c8ba0a323b24c71a000a9bc720438576b2eebc8bde6b476b3659bf9b57/dbj-0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:56 2020"}