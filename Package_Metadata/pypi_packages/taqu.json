{"info": {"author": "Janne Enberg", "author_email": "janne.enberg@lietu.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": ".. image:: https://travis-ci.org/lietu/taqu.svg?branch=master\n    :target: https://travis-ci.org/lietu/taqu\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. image:: https://codecov.io/gh/lietu/taqu/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/lietu/taqu\n\n.. image:: https://sonarcloud.io/api/project_badges/measure?project=lietu_taqu&metric=alert_status\n    :target: https://sonarcloud.io/dashboard?id=lietu_taqu\n\n.. image:: https://img.shields.io/github/issues/lietu/taqu\n    :target: https://github.com/lietu/taqu/issues\n    :alt: GitHub issues\n\n.. image:: https://img.shields.io/pypi/dm/taqu\n    :target: https://pypi.org/project/taqu/\n    :alt: PyPI - Downloads\n\n.. image:: https://img.shields.io/pypi/v/taqu\n    :target: https://pypi.org/project/taqu/\n    :alt: PyPI\n\n.. image:: https://img.shields.io/pypi/pyversions/taqu\n    :target: https://pypi.org/project/taqu/\n    :alt: PyPI - Python Version\n\n.. image:: https://img.shields.io/badge/License-BSD%203--Clause-blue.svg\n    :target: https://opensource.org/licenses/BSD-3-Clause\n\nPython Task Queue system built on Azure Service Bus queues and pydantic models.\n\n\nWhat is this?\n=============\n\nLots of systems benefit from having a queue for background tasks, that run independently of e.g. your APIs or other processes. This can help e.g. by enhancing your API performance, limiting the effects of traffic peaks, as well as scaling out with parallel processing of various things.\n\nThe defacto standard for Python is Celery + RabbitMQ, but hosting RabbitMQ is another liability and not always the most fun experience, and Celery doesn't support ``asyncio`` yet. Fully hosted solutions such as the Azure Service Bus help you get off the ground faster, with less things to worry about, and can allow you to save on costs as well.\n\nPrimarily intended for use with ``asyncio`` (from ``taqu.aio`` module), but works with non-async code just as well (using imports from the ``taqu`` module).\n\nSupports all the basic things you could need:\n\n - Fast insertion of tasks to queue\n - Async task processing\n - Easy to scale workers\n - Retry logic - if there's an uncaught exception the task will automatically be put back in the queue\n - Clean shutdown on Ctrl+C (waits until tasks finish processing)\n\n\nLicense\n-------\n\nLicensing is important. This project itself uses BSD 3-clause license, but e.g. Azure library for Storage Bus and other such libraries used by it may have their own licenses.\n\nFor more information check the `LICENSE <https://github.com/lietu/taqu/blob/master/LICENSE>`_ -file.\n\n\nGetting started\n===============\n\nIn the `Azure Portal <https://portal.azure.com>`_ set up a new Service Bus (any tier is fine), and then a queue in it. You probably want to enable partitioning, maybe also dead-lettering. Then you'll want to get the access credentials for your code. Ensure you've got the `Azure CLI <https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest#install>`_ installed and then run:\n\n.. code-block:: bash\n\n    az login  # Ensure you're logged in to Azure\n    az account list  # List subscriptions\n    az account set --subscription <subscriptionId>  # Set active subscription\n\n    az servicebus namespace authorization-rule keys list \\\n        --resource-group <rgName> \\\n        --namespace-name <namespace> \\\n        --name RootManageSharedAccessKey \\\n        --query primaryConnectionString \\\n        --output tsv\n\nAlso you'll need the Taqu library installed, e.g. for use with the Azure:\n\n.. code-block:: bash\n\n    pip install taqu[azure]\n\nThen, you can set up your worker, here's an example ``worker.py`` that you can just run with ``python worker.py``:\n\n.. code-block:: python\n\n    import asyncio\n\n    from taqu.aio import TaquAzureWorker\n    from pydantic import BaseModel\n\n    CONNECTION_STRING = \"...\"\n\n    worker = TaquAzureWorker(CONNECTION_STRING)\n\n\n    class CreateUser(BaseModel):\n        username: str\n\n    async def create_user(user: CreateUser):\n        print(user.username)\n\n    worker.register(create_user)\n    worker.run()\n\nWith the worker in place, you can create a client and send some tasks\n\n.. code-block:: python\n\n    from taqu import TaquAzureClient\n    from pydantic import BaseModel\n\n    CONNECTION_STRING = \"...\"\n\n    taqu = TaquAzureClient(CONNECTION_STRING)\n\n\n    class CreateUser(BaseModel):\n        username: str\n\n\n    taqu.add_task(CreateUser(username=\"my_new_username\"))\n\nYou can also check out the `examples <https://github.com/lietu/taqu/tree/master/examples>`_.\n\n\nContributing\n============\n\nThis project is run on GitHub using the issue tracking and pull requests here. If you want to contribute, feel free to `submit issues <https://github.com/lietu/taqu/issues>`_ (incl. feature requests) or PRs here.\n\nTo test changes locally ``python setup.py develop`` is a good way to run this, and you can ``python setup.py develop --uninstall`` afterwards (you might want to also use the ``--user`` flag).", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lietu/taqu", "keywords": "task queue azure service bus", "license": "", "maintainer": "", "maintainer_email": "", "name": "taqu", "package_url": "https://pypi.org/project/taqu/", "platform": "", "project_url": "https://pypi.org/project/taqu/", "project_urls": {"Bug Reports": "https://github.com/lietu/taqu/issues", "Homepage": "https://github.com/lietu/taqu", "Source": "https://github.com/lietu/taqu/"}, "release_url": "https://pypi.org/project/taqu/1.0.0/", "requires_dist": null, "requires_python": ">=3.5,<4", "summary": "Taqu Task Queue system", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/lietu/taqu\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/lietu/taqu.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f73234793f7542a134ef96b57cb7034ba82bdad/68747470733a2f2f7472617669732d63692e6f72672f6c696574752f746171752e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://codecov.io/gh/lietu/taqu\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/lietu/taqu/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f3bbf6fdba3bb2bafe9f2665110c52fc177137f/68747470733a2f2f636f6465636f762e696f2f67682f6c696574752f746171752f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://sonarcloud.io/dashboard?id=lietu_taqu\" rel=\"nofollow\"><img alt=\"https://sonarcloud.io/api/project_badges/measure?project=lietu_taqu&amp;metric=alert_status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/556dcf7569e8c0474f29cc72e4d26f0e5061971d/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6c696574755f74617175266d65747269633d616c6572745f737461747573\"></a>\n<a href=\"https://github.com/lietu/taqu/issues\" rel=\"nofollow\"><img alt=\"GitHub issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f689a900d4e95c146542fa259b31e923a6f20276/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6c696574752f74617175\"></a>\n<a href=\"https://pypi.org/project/taqu/\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d4707e1b987390ef2f90ef95288179f03b63f342/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f74617175\"></a>\n<a href=\"https://pypi.org/project/taqu/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aaca44bd30b7f5d4304f3ebf388423d62931a4f3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74617175\"></a>\n<a href=\"https://pypi.org/project/taqu/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55d513afcbc293474dd14c9d2de814efdcd67487/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74617175\"></a>\n<a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/License-BSD%203--Clause-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/110fcca60a43a8ea37b1a5bda616e639325f2f30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667\"></a>\n<p>Python Task Queue system built on Azure Service Bus queues and pydantic models.</p>\n<div id=\"what-is-this\">\n<h2>What is this?</h2>\n<p>Lots of systems benefit from having a queue for background tasks, that run independently of e.g. your APIs or other processes. This can help e.g. by enhancing your API performance, limiting the effects of traffic peaks, as well as scaling out with parallel processing of various things.</p>\n<p>The defacto standard for Python is Celery + RabbitMQ, but hosting RabbitMQ is another liability and not always the most fun experience, and Celery doesn\u2019t support <tt>asyncio</tt> yet. Fully hosted solutions such as the Azure Service Bus help you get off the ground faster, with less things to worry about, and can allow you to save on costs as well.</p>\n<p>Primarily intended for use with <tt>asyncio</tt> (from <tt>taqu.aio</tt> module), but works with non-async code just as well (using imports from the <tt>taqu</tt> module).</p>\n<p>Supports all the basic things you could need:</p>\n<blockquote>\n<ul>\n<li>Fast insertion of tasks to queue</li>\n<li>Async task processing</li>\n<li>Easy to scale workers</li>\n<li>Retry logic - if there\u2019s an uncaught exception the task will automatically be put back in the queue</li>\n<li>Clean shutdown on Ctrl+C (waits until tasks finish processing)</li>\n</ul>\n</blockquote>\n<div id=\"license\">\n<h3>License</h3>\n<p>Licensing is important. This project itself uses BSD 3-clause license, but e.g. Azure library for Storage Bus and other such libraries used by it may have their own licenses.</p>\n<p>For more information check the <a href=\"https://github.com/lietu/taqu/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> -file.</p>\n</div>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>In the <a href=\"https://portal.azure.com\" rel=\"nofollow\">Azure Portal</a> set up a new Service Bus (any tier is fine), and then a queue in it. You probably want to enable partitioning, maybe also dead-lettering. Then you\u2019ll want to get the access credentials for your code. Ensure you\u2019ve got the <a href=\"https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest#install\" rel=\"nofollow\">Azure CLI</a> installed and then run:</p>\n<pre>az login  <span class=\"c1\"># Ensure you're logged in to Azure\n</span>az account list  <span class=\"c1\"># List subscriptions\n</span>az account <span class=\"nb\">set</span> --subscription &lt;subscriptionId&gt;  <span class=\"c1\"># Set active subscription\n</span>\naz servicebus namespace authorization-rule keys list <span class=\"se\">\\\n</span>    --resource-group &lt;rgName&gt; <span class=\"se\">\\\n</span>    --namespace-name &lt;namespace&gt; <span class=\"se\">\\\n</span>    --name RootManageSharedAccessKey <span class=\"se\">\\\n</span>    --query primaryConnectionString <span class=\"se\">\\\n</span>    --output tsv\n</pre>\n<p>Also you\u2019ll need the Taqu library installed, e.g. for use with the Azure:</p>\n<pre>pip install taqu<span class=\"o\">[</span>azure<span class=\"o\">]</span>\n</pre>\n<p>Then, you can set up your worker, here\u2019s an example <tt>worker.py</tt> that you can just run with <tt>python worker.py</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">taqu.aio</span> <span class=\"kn\">import</span> <span class=\"n\">TaquAzureWorker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n\n<span class=\"n\">CONNECTION_STRING</span> <span class=\"o\">=</span> <span class=\"s2\">\"...\"</span>\n\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">TaquAzureWorker</span><span class=\"p\">(</span><span class=\"n\">CONNECTION_STRING</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CreateUser</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">CreateUser</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">)</span>\n\n<span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">create_user</span><span class=\"p\">)</span>\n<span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>With the worker in place, you can create a client and send some tasks</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">taqu</span> <span class=\"kn\">import</span> <span class=\"n\">TaquAzureClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n\n<span class=\"n\">CONNECTION_STRING</span> <span class=\"o\">=</span> <span class=\"s2\">\"...\"</span>\n\n<span class=\"n\">taqu</span> <span class=\"o\">=</span> <span class=\"n\">TaquAzureClient</span><span class=\"p\">(</span><span class=\"n\">CONNECTION_STRING</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CreateUser</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"n\">taqu</span><span class=\"o\">.</span><span class=\"n\">add_task</span><span class=\"p\">(</span><span class=\"n\">CreateUser</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"my_new_username\"</span><span class=\"p\">))</span>\n</pre>\n<p>You can also check out the <a href=\"https://github.com/lietu/taqu/tree/master/examples\" rel=\"nofollow\">examples</a>.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>This project is run on GitHub using the issue tracking and pull requests here. If you want to contribute, feel free to <a href=\"https://github.com/lietu/taqu/issues\" rel=\"nofollow\">submit issues</a> (incl. feature requests) or PRs here.</p>\n<p>To test changes locally <tt>python setup.py develop</tt> is a good way to run this, and you can <tt>python setup.py develop <span class=\"pre\">--uninstall</span></tt> afterwards (you might want to also use the <tt><span class=\"pre\">--user</span></tt> flag).</p>\n</div>\n\n          </div>"}, "last_serial": 6724373, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "25ee6c85d582104bae7bb54d5bc55da5", "sha256": "c998dc29fd7dcf00b802476d03b96c013790f6ba4344e36f506087661ed8c818"}, "downloads": -1, "filename": "taqu-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25ee6c85d582104bae7bb54d5bc55da5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4", "size": 8000, "upload_time": "2020-02-29T13:37:54", "upload_time_iso_8601": "2020-02-29T13:37:54.629669Z", "url": "https://files.pythonhosted.org/packages/b6/5b/79ac554ec61ddedd5c542bce22bdd490c056386a0d8978cb9a338309e4f3/taqu-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa758c45f9089bf9146a4f8c67a81ef6", "sha256": "7ee3fca3eadc1d5f003af8b11e815ddf9f9719edbeaaed17589d89d56574a141"}, "downloads": -1, "filename": "taqu-1.0.0.tar.gz", "has_sig": false, "md5_digest": "aa758c45f9089bf9146a4f8c67a81ef6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4", "size": 9309, "upload_time": "2020-02-29T13:30:04", "upload_time_iso_8601": "2020-02-29T13:30:04.160482Z", "url": "https://files.pythonhosted.org/packages/11/9c/a124b05e8ecc3bb8937df791529f81946d6dadf72e4a43cfdbc324a99407/taqu-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25ee6c85d582104bae7bb54d5bc55da5", "sha256": "c998dc29fd7dcf00b802476d03b96c013790f6ba4344e36f506087661ed8c818"}, "downloads": -1, "filename": "taqu-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25ee6c85d582104bae7bb54d5bc55da5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4", "size": 8000, "upload_time": "2020-02-29T13:37:54", "upload_time_iso_8601": "2020-02-29T13:37:54.629669Z", "url": "https://files.pythonhosted.org/packages/b6/5b/79ac554ec61ddedd5c542bce22bdd490c056386a0d8978cb9a338309e4f3/taqu-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa758c45f9089bf9146a4f8c67a81ef6", "sha256": "7ee3fca3eadc1d5f003af8b11e815ddf9f9719edbeaaed17589d89d56574a141"}, "downloads": -1, "filename": "taqu-1.0.0.tar.gz", "has_sig": false, "md5_digest": "aa758c45f9089bf9146a4f8c67a81ef6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4", "size": 9309, "upload_time": "2020-02-29T13:30:04", "upload_time_iso_8601": "2020-02-29T13:30:04.160482Z", "url": "https://files.pythonhosted.org/packages/11/9c/a124b05e8ecc3bb8937df791529f81946d6dadf72e4a43cfdbc324a99407/taqu-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:58 2020"}