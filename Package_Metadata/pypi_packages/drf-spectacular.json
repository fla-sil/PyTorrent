{"info": {"author": "T. Franzel", "author_email": "tfranzel@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Documentation", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Code Generators"], "description": "===============\ndrf-spectacular\n===============\n\n|build-status-image| |codecov| |pypi-version| |docs|\n\nSane and flexible `OpenAPI 3.0 <https://github.com/OAI/OpenAPI-Specification>`_ schema generation for `Django REST framework <https://www.django-rest-framework.org/>`_.\n\nThis project has 3 goals:\n    1. Extract as much schema information from DRF as possible.\n    2. Provide flexibility to make the schema usable in the real world (not only toy examples).\n    3. Generate a schema that works well with the most popular client generators.\n\nThe code is a heavily modified fork of the\n`DRF OpenAPI generator <https://github.com/encode/django-rest-framework/blob/master/rest_framework/schemas/openapi.py/>`_,\nwhich is/was lacking all of the below listed features.\n\nFeatures\n    - Serializers modelled as components. (arbitrary nesting and recursion supported)\n    - `@extend_schema <https://drf-spectacular.readthedocs.io/en/latest/drf_spectacular.html#drf_spectacular.utils.extend_schema>`_ decorator for customization of APIView, Viewsets, function-based views, and ``@action``\n        - additional parameters\n        - request/response serializer override (with status codes)\n        - polymorphic responses either manually with ``PolymorphicProxySerializer`` helper or via ``rest_polymorphic``'s PolymorphicSerializer)\n        - ... and more customization options\n    - Authentication support (DRF natives included, easily extendable)\n    - Custom serializer class support (easily extendable)\n    - ``MethodSerializerField()`` type via type hinting or ``@extend_schema_field``\n    - Tags extraction\n    - Description extraction from ``docstrings``\n    - Sane fallbacks where no Serializer is available (free-form objects)\n    - Sane ``operation_id`` naming (based on path)\n    - Easy to use hooks for extending the spectacular ``AutoSchema``\n    - Schema serving with ``SpectacularAPIView`` (Redoc and Swagger-UI views are also available)\n    - Included support for:\n        - `django-polymorphic <https://github.com/django-polymorphic/django-polymorphic>`_ / `django-rest-polymorphic <https://github.com/apirobot/django-rest-polymorphic>`_\n        - `SimpleJWT <https://github.com/SimpleJWT/django-rest-framework-simplejwt>`_\n        - `DjangoOAuthToolkit <https://github.com/jazzband/django-oauth-toolkit>`_\n        - `djangorestframework-jwt <https://github.com/jpadilla/django-rest-framework-jwt>`_ (tested fork `drf-jwt <https://github.com/Styria-Digital/django-rest-framework-jwt>`_)\n\nIncomplete features (in progress):\n    - optional input/output serializer component split\n\nLicense\n-------\n\nProvided by `T. Franzel <https://github.com/tfranzel>`_, Cashlink Technologies GmbH. `Licensed under 3-Clause BSD <https://github.com/tfranzel/drf-spectacular/blob/master/LICENSE>`_.\n\nRequirements\n------------\n\n-  Python >= 3.6\n-  Django (2.2, 3.0)\n-  Django REST Framework (3.10, 3.11)\n\nInstallation\n------------\n\nInstall using ``pip``\\ \u2026\n\n.. code:: bash\n\n    $ pip install drf-spectacular\n\nthen add drf-spectacular to installed apps in ``settings.py``\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        # ALL YOUR APPS\n        'drf_spectacular',\n    ]\n\n\nand finally register our spectacular AutoSchema with DRF\n\n.. code:: python\n\n    REST_FRAMEWORK = {\n        # YOUR SETTINGS\n        'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n    }\n\nTake it for a spin\n------------------\n\nGenerate your schema with the CLI:\n\n.. code:: bash\n\n    $ ./manage.py spectacular --file schema.yml\n    $ docker run -p 80:8080 -e SWAGGER_JSON=/schema.yml -v ${PWD}/schema.yml:/schema.yml swaggerapi/swagger-ui\n\nIf you also want to validate your schema add the `--validate` flag. Or serve your schema directly\nfrom your API. We also provide convenience wrappers for `swagger-ui` or `redoc`.\n\n.. code:: python\n\n    from drf_spectacular.views import SpectacularAPIView\n    urlpatterns = [\n        # YOUR PATTERNS\n        path('api/schema/', SpectacularAPIView.as_view(), name='schema'),\n        # Optional UI:\n        path('api/schema/swagger-ui/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),\n        path('api/schema/redoc/', SpectacularRedocView.as_view(url_name='schema'), name='redoc'),\n    ]\n\nUsage\n-----\n\n`drf-spectacular` works pretty well out of the box. You might also want to set some metadata for your API.\nJust create a ``SPECTACULAR_SETTINGS`` dictionary in your ``settings.py`` and override the defaults.\nHave a look at the `available settings <https://drf-spectacular.readthedocs.io/en/latest/settings.html>`_.\n\nThe toy examples do not cover your cases? No problem, you can heavily customize how your schema will be rendered.\n\nCustomization by using ``@extend_schema``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMost customization cases should be covered by the ``extend_schema`` decorator. We usually get\npretty far with specifying ``OpenApiParameter`` and splitting request/response serializers, but\nthe sky is the limit.\n\n.. code:: python\n\n    from drf_spectacular.utils import extend_schema, OpenApiParameter\n    from drf_spectacular.types import OpenApiTypes\n\n    class AlbumViewset(viewset.ModelViewset)\n        serializer_class = AlbumSerializer\n\n        @extend_schema(\n            request=AlbumCreationSerializer\n            responses={201: AlbumSerializer},\n        )\n        def create(self, request):\n            # your non-standard behaviour\n            return super().create(request)\n\n        @extend_schema(\n            # extra parameters added to the schema\n            parameters=[\n                OpenApiParameter(name='artist', description='Filter by artist', required=False, type=str),\n                OpenApiParameter(\n                    name='release',\n                    type=OpenApiTypes.DATE,\n                    location=OpenApiParameter.QUERY,\n                    description='Filter by release date',\n                ),\n            ],\n            # override default docstring extraction\n            description='More descriptive text',\n            # provide Authentication class that deviates from the views default\n            auth=None,\n            # change the auto-generated operation name\n            operation_id=None,\n            # or even completely override what AutoSchema would generate. Provide raw Open API spec as Dict.\n            operation=None,\n        )\n        def list(self, request):\n            # your non-standard behaviour\n            return super().list(request)\n\n        @extend_schema(\n            request=AlbumLikeSerializer\n            responses={204: None},\n        )\n        @action(detail=True, methods=['post'])\n        def set_password(self, request, pk=None):\n            # your action behaviour\n\n\n\nCustomization by overriding ``AutoSchema``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nStill not satisifed? You want more! We still got you covered. We prepared some convenient hooks for things that\nare probably up to taste. If you are careful, you can change pretty much anything.\n\nDon't forget to register your custom AutoSchema in the ``DEFAULT_SCHEMA_CLASS``.\n\n.. code:: python\n\n    from drf_spectacular.openapi import AutoSchema\n\n    class CustomAutoSchema(AutoSchema):\n        def get_operation_id(self, path, method):\n            return 'YOUR-ID'.replace('-', '_')\n\n\nExtras\n^^^^^^\n\ngot endpoints that yield list of differing objects? Enter ``PolymorphicProxySerializer``\n\n.. code:: python\n\n    @extend_schema(\n        responses=PolymorphicProxySerializer(\n            component_name='MetaPerson',\n            serializers=[SerializerA, SerializerB],\n            resource_type_field_name='type',\n        )\n    )\n    @api_view()\n    def poly_list(request):\n        return Response(list_of_multiple_object_types)\n\n\nTesting\n-------\n\nInstall testing requirements.\n\n.. code:: bash\n\n    $ pip install -r requirements.txt\n\nRun with runtests.\n\n.. code:: bash\n\n    $ ./runtests.py\n\nYou can also use the excellent `tox`_ testing tool to run the tests\nagainst all supported versions of Python and Django. Install tox\nglobally, and then simply run:\n\n.. code:: bash\n\n    $ tox\n\n.. _tox: http://tox.readthedocs.org/en/latest/\n\n.. |build-status-image| image:: https://secure.travis-ci.org/tfranzel/drf-spectacular.svg?branch=master\n   :target: https://travis-ci.org/tfranzel/drf-spectacular?branch=master\n.. |pypi-version| image:: https://img.shields.io/pypi/v/drf-spectacular.svg\n   :target: https://pypi.python.org/pypi/drf-spectacular\n.. |codecov| image:: https://codecov.io/gh/tfranzel/drf-spectacular/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/tfranzel/drf-spectacular\n.. |docs| image:: https://readthedocs.org/projects/drf-spectacular/badge/\n   :target: https://drf-spectacular.readthedocs.io/\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tfranzel/drf-spectacular", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "drf-spectacular", "package_url": "https://pypi.org/project/drf-spectacular/", "platform": "", "project_url": "https://pypi.org/project/drf-spectacular/", "project_urls": {"Documentation": "https://drf-spectacular.readthedocs.io", "Homepage": "https://github.com/tfranzel/drf-spectacular", "Source": "https://github.com/tfranzel/drf-spectacular"}, "release_url": "https://pypi.org/project/drf-spectacular/0.9.3/", "requires_dist": ["Django (>=2.2)", "PyYAML (>=5.1)", "djangorestframework (>=3.10)", "inflection (>=0.4.0)", "jsonschema (>=3.2.0)", "uritemplate (>=3.0.0)"], "requires_python": ">=3.6", "summary": "Sane and flexible OpenAPI 3 schema generation for Django REST framework", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/tfranzel/drf-spectacular?branch=master\" rel=\"nofollow\"><img alt=\"build-status-image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f97456ee479acf0a526a7a74c0f1c47fd177d656/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f746672616e7a656c2f6472662d73706563746163756c61722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/tfranzel/drf-spectacular\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45dd67f7f0724394119607ce7a4296d3915e53b4/68747470733a2f2f636f6465636f762e696f2f67682f746672616e7a656c2f6472662d73706563746163756c61722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/drf-spectacular\" rel=\"nofollow\"><img alt=\"pypi-version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37fe5ec23b020d4a13e5ea27ee02043e56e7a195/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6472662d73706563746163756c61722e737667\"></a> <a href=\"https://drf-spectacular.readthedocs.io/\" rel=\"nofollow\"><img alt=\"docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b0c1aacc4872cdf7416b81da2afaf81f606daa5/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6472662d73706563746163756c61722f62616467652f\"></a></p>\n<p>Sane and flexible <a href=\"https://github.com/OAI/OpenAPI-Specification\" rel=\"nofollow\">OpenAPI 3.0</a> schema generation for <a href=\"https://www.django-rest-framework.org/\" rel=\"nofollow\">Django REST framework</a>.</p>\n<dl>\n<dt>This project has 3 goals:</dt>\n<dd><ol>\n<li>Extract as much schema information from DRF as possible.</li>\n<li>Provide flexibility to make the schema usable in the real world (not only toy examples).</li>\n<li>Generate a schema that works well with the most popular client generators.</li>\n</ol>\n</dd>\n</dl>\n<p>The code is a heavily modified fork of the\n<a href=\"https://github.com/encode/django-rest-framework/blob/master/rest_framework/schemas/openapi.py/\" rel=\"nofollow\">DRF OpenAPI generator</a>,\nwhich is/was lacking all of the below listed features.</p>\n<dl>\n<dt>Features</dt>\n<dd><ul>\n<li>Serializers modelled as components. (arbitrary nesting and recursion supported)</li>\n<li><dl>\n<dt><a href=\"https://drf-spectacular.readthedocs.io/en/latest/drf_spectacular.html#drf_spectacular.utils.extend_schema\" rel=\"nofollow\">@extend_schema</a> decorator for customization of APIView, Viewsets, function-based views, and <tt>@action</tt></dt>\n<dd><ul>\n<li>additional parameters</li>\n<li>request/response serializer override (with status codes)</li>\n<li>polymorphic responses either manually with <tt>PolymorphicProxySerializer</tt> helper or via <tt>rest_polymorphic</tt>\u2019s PolymorphicSerializer)</li>\n<li>\u2026 and more customization options</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>Authentication support (DRF natives included, easily extendable)</li>\n<li>Custom serializer class support (easily extendable)</li>\n<li><tt>MethodSerializerField()</tt> type via type hinting or <tt>@extend_schema_field</tt></li>\n<li>Tags extraction</li>\n<li>Description extraction from <tt>docstrings</tt></li>\n<li>Sane fallbacks where no Serializer is available (free-form objects)</li>\n<li>Sane <tt>operation_id</tt> naming (based on path)</li>\n<li>Easy to use hooks for extending the spectacular <tt>AutoSchema</tt></li>\n<li>Schema serving with <tt>SpectacularAPIView</tt> (Redoc and Swagger-UI views are also available)</li>\n<li><dl>\n<dt>Included support for:</dt>\n<dd><ul>\n<li><a href=\"https://github.com/django-polymorphic/django-polymorphic\" rel=\"nofollow\">django-polymorphic</a> / <a href=\"https://github.com/apirobot/django-rest-polymorphic\" rel=\"nofollow\">django-rest-polymorphic</a></li>\n<li><a href=\"https://github.com/SimpleJWT/django-rest-framework-simplejwt\" rel=\"nofollow\">SimpleJWT</a></li>\n<li><a href=\"https://github.com/jazzband/django-oauth-toolkit\" rel=\"nofollow\">DjangoOAuthToolkit</a></li>\n<li><a href=\"https://github.com/jpadilla/django-rest-framework-jwt\" rel=\"nofollow\">djangorestframework-jwt</a> (tested fork <a href=\"https://github.com/Styria-Digital/django-rest-framework-jwt\" rel=\"nofollow\">drf-jwt</a>)</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt>Incomplete features (in progress):</dt>\n<dd><ul>\n<li>optional input/output serializer component split</li>\n</ul>\n</dd>\n</dl>\n<div id=\"license\">\n<h2>License</h2>\n<p>Provided by <a href=\"https://github.com/tfranzel\" rel=\"nofollow\">T. Franzel</a>, Cashlink Technologies GmbH. <a href=\"https://github.com/tfranzel/drf-spectacular/blob/master/LICENSE\" rel=\"nofollow\">Licensed under 3-Clause BSD</a>.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;= 3.6</li>\n<li>Django (2.2, 3.0)</li>\n<li>Django REST Framework (3.10, 3.11)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install using <tt>pip</tt>\u2026</p>\n<pre>$ pip install drf-spectacular\n</pre>\n<p>then add drf-spectacular to installed apps in <tt>settings.py</tt></p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ALL YOUR APPS</span>\n    <span class=\"s1\">'drf_spectacular'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>and finally register our spectacular AutoSchema with DRF</p>\n<pre><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># YOUR SETTINGS</span>\n    <span class=\"s1\">'DEFAULT_SCHEMA_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'drf_spectacular.openapi.AutoSchema'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"take-it-for-a-spin\">\n<h2>Take it for a spin</h2>\n<p>Generate your schema with the CLI:</p>\n<pre>$ ./manage.py spectacular --file schema.yml\n$ docker run -p <span class=\"m\">80</span>:8080 -e <span class=\"nv\">SWAGGER_JSON</span><span class=\"o\">=</span>/schema.yml -v <span class=\"si\">${</span><span class=\"nv\">PWD</span><span class=\"si\">}</span>/schema.yml:/schema.yml swaggerapi/swagger-ui\n</pre>\n<p>If you also want to validate your schema add the <cite>\u2013validate</cite> flag. Or serve your schema directly\nfrom your API. We also provide convenience wrappers for <cite>swagger-ui</cite> or <cite>redoc</cite>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">drf_spectacular.views</span> <span class=\"kn\">import</span> <span class=\"n\">SpectacularAPIView</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># YOUR PATTERNS</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'api/schema/'</span><span class=\"p\">,</span> <span class=\"n\">SpectacularAPIView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'schema'</span><span class=\"p\">),</span>\n    <span class=\"c1\"># Optional UI:</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'api/schema/swagger-ui/'</span><span class=\"p\">,</span> <span class=\"n\">SpectacularSwaggerView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">url_name</span><span class=\"o\">=</span><span class=\"s1\">'schema'</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'swagger-ui'</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'api/schema/redoc/'</span><span class=\"p\">,</span> <span class=\"n\">SpectacularRedocView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">url_name</span><span class=\"o\">=</span><span class=\"s1\">'schema'</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'redoc'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><cite>drf-spectacular</cite> works pretty well out of the box. You might also want to set some metadata for your API.\nJust create a <tt>SPECTACULAR_SETTINGS</tt> dictionary in your <tt>settings.py</tt> and override the defaults.\nHave a look at the <a href=\"https://drf-spectacular.readthedocs.io/en/latest/settings.html\" rel=\"nofollow\">available settings</a>.</p>\n<p>The toy examples do not cover your cases? No problem, you can heavily customize how your schema will be rendered.</p>\n<div id=\"customization-by-using-extend-schema\">\n<h3>Customization by using <tt>@extend_schema</tt></h3>\n<p>Most customization cases should be covered by the <tt>extend_schema</tt> decorator. We usually get\npretty far with specifying <tt>OpenApiParameter</tt> and splitting request/response serializers, but\nthe sky is the limit.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">drf_spectacular.utils</span> <span class=\"kn\">import</span> <span class=\"n\">extend_schema</span><span class=\"p\">,</span> <span class=\"n\">OpenApiParameter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">drf_spectacular.types</span> <span class=\"kn\">import</span> <span class=\"n\">OpenApiTypes</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AlbumViewset</span><span class=\"p\">(</span><span class=\"n\">viewset</span><span class=\"o\">.</span><span class=\"n\">ModelViewset</span><span class=\"p\">)</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">AlbumSerializer</span>\n\n    <span class=\"nd\">@extend_schema</span><span class=\"p\">(</span>\n        <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">AlbumCreationSerializer</span>\n        <span class=\"n\">responses</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">201</span><span class=\"p\">:</span> <span class=\"n\">AlbumSerializer</span><span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"c1\"># your non-standard behaviour</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@extend_schema</span><span class=\"p\">(</span>\n        <span class=\"c1\"># extra parameters added to the schema</span>\n        <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"n\">OpenApiParameter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'artist'</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Filter by artist'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">),</span>\n            <span class=\"n\">OpenApiParameter</span><span class=\"p\">(</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'release'</span><span class=\"p\">,</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">OpenApiTypes</span><span class=\"o\">.</span><span class=\"n\">DATE</span><span class=\"p\">,</span>\n                <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"n\">OpenApiParameter</span><span class=\"o\">.</span><span class=\"n\">QUERY</span><span class=\"p\">,</span>\n                <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Filter by release date'</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">],</span>\n        <span class=\"c1\"># override default docstring extraction</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'More descriptive text'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># provide Authentication class that deviates from the views default</span>\n        <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"c1\"># change the auto-generated operation name</span>\n        <span class=\"n\">operation_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"c1\"># or even completely override what AutoSchema would generate. Provide raw Open API spec as Dict.</span>\n        <span class=\"n\">operation</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"c1\"># your non-standard behaviour</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@extend_schema</span><span class=\"p\">(</span>\n        <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">AlbumLikeSerializer</span>\n        <span class=\"n\">responses</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">204</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n    <span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'post'</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_password</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># your action behaviour</span>\n</pre>\n</div>\n<div id=\"customization-by-overriding-autoschema\">\n<h3>Customization by overriding <tt>AutoSchema</tt></h3>\n<p>Still not satisifed? You want more! We still got you covered. We prepared some convenient hooks for things that\nare probably up to taste. If you are careful, you can change pretty much anything.</p>\n<p>Don\u2019t forget to register your custom AutoSchema in the <tt>DEFAULT_SCHEMA_CLASS</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">drf_spectacular.openapi</span> <span class=\"kn\">import</span> <span class=\"n\">AutoSchema</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomAutoSchema</span><span class=\"p\">(</span><span class=\"n\">AutoSchema</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_operation_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'YOUR-ID'</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'-'</span><span class=\"p\">,</span> <span class=\"s1\">'_'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"extras\">\n<h3>Extras</h3>\n<p>got endpoints that yield list of differing objects? Enter <tt>PolymorphicProxySerializer</tt></p>\n<pre><span class=\"nd\">@extend_schema</span><span class=\"p\">(</span>\n    <span class=\"n\">responses</span><span class=\"o\">=</span><span class=\"n\">PolymorphicProxySerializer</span><span class=\"p\">(</span>\n        <span class=\"n\">component_name</span><span class=\"o\">=</span><span class=\"s1\">'MetaPerson'</span><span class=\"p\">,</span>\n        <span class=\"n\">serializers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">SerializerA</span><span class=\"p\">,</span> <span class=\"n\">SerializerB</span><span class=\"p\">],</span>\n        <span class=\"n\">resource_type_field_name</span><span class=\"o\">=</span><span class=\"s1\">'type'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@api_view</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">poly_list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">list_of_multiple_object_types</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Install testing requirements.</p>\n<pre>$ pip install -r requirements.txt\n</pre>\n<p>Run with runtests.</p>\n<pre>$ ./runtests.py\n</pre>\n<p>You can also use the excellent <a href=\"http://tox.readthedocs.org/en/latest/\" rel=\"nofollow\">tox</a> testing tool to run the tests\nagainst all supported versions of Python and Django. Install tox\nglobally, and then simply run:</p>\n<pre>$ tox\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7186431, "releases": {"0.8.1": [{"comment_text": "", "digests": {"md5": "78f5cd8c551f2f0b5e233ea6949cda31", "sha256": "021aa3c78575f9359bb089571cf38e24ed7c6a660754eb920a2b976c9d100eb6"}, "downloads": -1, "filename": "drf_spectacular-0.8.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "78f5cd8c551f2f0b5e233ea6949cda31", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 30886, "upload_time": "2020-03-01T23:35:43", "upload_time_iso_8601": "2020-03-01T23:35:43.934745Z", "url": "https://files.pythonhosted.org/packages/32/98/82699d96a4cdb1404053ac5b4fa0433c6beb8f92022f7164cf7272c5742c/drf_spectacular-0.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0af3875a30122e90ad6af334c5e12e59", "sha256": "0047c250c26a094408ef885905676b874670e090ab86758230cd385cc7b84e87"}, "downloads": -1, "filename": "drf-spectacular-0.8.1.tar.gz", "has_sig": false, "md5_digest": "0af3875a30122e90ad6af334c5e12e59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15793, "upload_time": "2020-03-01T23:35:46", "upload_time_iso_8601": "2020-03-01T23:35:46.359050Z", "url": "https://files.pythonhosted.org/packages/a3/2a/a7cd21ec763d0ab6d98d598bcf0536f5554d55eba78d492c134003843749/drf-spectacular-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "dfbb883540d599da442c03f58250501a", "sha256": "58ea9267741bfa6513e079c5e85b636287f5624d006c5ba78556218e36cf402c"}, "downloads": -1, "filename": "drf_spectacular-0.8.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dfbb883540d599da442c03f58250501a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 33821, "upload_time": "2020-03-02T21:10:04", "upload_time_iso_8601": "2020-03-02T21:10:04.051864Z", "url": "https://files.pythonhosted.org/packages/7a/c3/0b5df7034a6fff67f85d68b30a625b1211be6f496f544196e8da16c52226/drf_spectacular-0.8.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcb3566fe695d01727f2016b8c093a45", "sha256": "f11856341d3867c3b6c0cc6baff01f108f709d92d000d73f186a9431fa889b1f"}, "downloads": -1, "filename": "drf-spectacular-0.8.2.tar.gz", "has_sig": false, "md5_digest": "bcb3566fe695d01727f2016b8c093a45", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16059, "upload_time": "2020-03-02T21:10:05", "upload_time_iso_8601": "2020-03-02T21:10:05.287662Z", "url": "https://files.pythonhosted.org/packages/c4/ef/a190592cd418331a8ca9d7af8b8c8e28d62417afbb8f2e7cc68aa0acf976/drf-spectacular-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "09e981e6f10893fa12aa46e91edba252", "sha256": "b7be2d86c45bb8e71fbe56e7be66cb47bc8f58fcc933d09a723ed8de14258ca0"}, "downloads": -1, "filename": "drf_spectacular-0.8.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "09e981e6f10893fa12aa46e91edba252", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 34096, "upload_time": "2020-03-02T23:53:50", "upload_time_iso_8601": "2020-03-02T23:53:50.216490Z", "url": "https://files.pythonhosted.org/packages/90/41/722079a3e1b0171e8b3ff9ca3bcbfd5e8272b617594cbb9e1de5c7feb5d0/drf_spectacular-0.8.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b624f7af7f223260dc2858dd53cafae", "sha256": "cdfa99909838c8eba6014fe071e3cf6686c07d4a94a4feb69067d74d7a0e10e7"}, "downloads": -1, "filename": "drf-spectacular-0.8.3.tar.gz", "has_sig": false, "md5_digest": "1b624f7af7f223260dc2858dd53cafae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16248, "upload_time": "2020-03-02T23:53:51", "upload_time_iso_8601": "2020-03-02T23:53:51.854316Z", "url": "https://files.pythonhosted.org/packages/3d/b6/bc698a18472a60a897856710ef263fc5cf3bd6e6007b3f092143a4950a2b/drf-spectacular-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "acbe8167277bc63e10a74a843505949e", "sha256": "82fef8e5cf585d2f8d0be109aa23ab728c0817c107a74ae76706d061ebed8d71"}, "downloads": -1, "filename": "drf_spectacular-0.8.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "acbe8167277bc63e10a74a843505949e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 36968, "upload_time": "2020-03-06T20:47:38", "upload_time_iso_8601": "2020-03-06T20:47:38.419096Z", "url": "https://files.pythonhosted.org/packages/75/be/e6e4edaca7d481e0217f709792324a774680cf94c6edc83e230c34df93cd/drf_spectacular-0.8.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8ab541300548f8ee9607bc394673e19", "sha256": "3386b663c0b25cc2ee361edebc60715baa93c4f95d7a408d4b1ca2b050115847"}, "downloads": -1, "filename": "drf-spectacular-0.8.4.tar.gz", "has_sig": false, "md5_digest": "d8ab541300548f8ee9607bc394673e19", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17334, "upload_time": "2020-03-06T20:47:39", "upload_time_iso_8601": "2020-03-06T20:47:39.989567Z", "url": "https://files.pythonhosted.org/packages/aa/94/59e48860b8bece46b849abfc9c1772c6a0fa2499437dcc4573c47bb5cf4c/drf-spectacular-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "d5210182e3208163b4ed2908bbfaf78b", "sha256": "0a9e6b6668777eafdd533ee4798725c1adc893c4e0cf4bb855b90513e58e57d6"}, "downloads": -1, "filename": "drf_spectacular-0.8.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d5210182e3208163b4ed2908bbfaf78b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 38752, "upload_time": "2020-03-08T13:49:27", "upload_time_iso_8601": "2020-03-08T13:49:27.502975Z", "url": "https://files.pythonhosted.org/packages/c8/d2/f2d99837019c2c09bd5fac3186c352fd5393b8ea1003a6bdc8462409265f/drf_spectacular-0.8.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "647983254a8bdf56283604ed8219247a", "sha256": "ac747ac68e5ffe72e5033689feeb2c8874be221f57a9310afb9bb5a7315c212f"}, "downloads": -1, "filename": "drf-spectacular-0.8.5.tar.gz", "has_sig": false, "md5_digest": "647983254a8bdf56283604ed8219247a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17961, "upload_time": "2020-03-08T13:49:28", "upload_time_iso_8601": "2020-03-08T13:49:28.701273Z", "url": "https://files.pythonhosted.org/packages/de/75/c55deaafbafe47fc28cbe2d1f7995fe647e7e5e3c3bfedb23f7e84eb75d9/drf-spectacular-0.8.5.tar.gz", "yanked": false}], "0.8.8": [{"comment_text": "", "digests": {"md5": "2aa0ccbeed754bff6b802ace67993f48", "sha256": "c0741afc222806a857e82a3f3bd41b4ecd80006a8dcf6a4df39d994f33c92ff0"}, "downloads": -1, "filename": "drf_spectacular-0.8.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2aa0ccbeed754bff6b802ace67993f48", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 85449, "upload_time": "2020-03-20T23:01:32", "upload_time_iso_8601": "2020-03-20T23:01:32.824418Z", "url": "https://files.pythonhosted.org/packages/01/3e/b7bfa04a78bce71b25d223f5833c63950517cbb63e43bb2c5e2bc8f25735/drf_spectacular-0.8.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29584d6782b70de0cd39a3e4aa79caa4", "sha256": "412aa75420ae7a74b59b551612aac58ea4fe664528c86251f2ae70827490a9d0"}, "downloads": -1, "filename": "drf-spectacular-0.8.8.tar.gz", "has_sig": false, "md5_digest": "29584d6782b70de0cd39a3e4aa79caa4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26065, "upload_time": "2020-03-20T23:01:34", "upload_time_iso_8601": "2020-03-20T23:01:34.667874Z", "url": "https://files.pythonhosted.org/packages/d2/93/11dac7b9bd7bf0c5d065e1df3b724d39d07181b6183689431dbbb229ba9c/drf-spectacular-0.8.8.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "ca2d06b10f4b3769844125fdd478d026", "sha256": "5968b27e1f9aec6d01c2f58bc31d9587c3cfd66ff77bae7049886dc1c4e2eb88"}, "downloads": -1, "filename": "drf_spectacular-0.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ca2d06b10f4b3769844125fdd478d026", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 29216, "upload_time": "2020-03-29T11:48:09", "upload_time_iso_8601": "2020-03-29T11:48:09.785601Z", "url": "https://files.pythonhosted.org/packages/2f/7c/f012d6b1f33723ab7a59cd8f73805eeb45c30f2fa245a23f347b3140d922/drf_spectacular-0.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18ce3ddf9043527621c396450f5601d9", "sha256": "5c8fddc61ab1cc2e4930aabbded5002dd4b8f0a3e6c8d07ccf43e5128d64af00"}, "downloads": -1, "filename": "drf-spectacular-0.9.0.tar.gz", "has_sig": false, "md5_digest": "18ce3ddf9043527621c396450f5601d9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28099, "upload_time": "2020-03-29T11:48:11", "upload_time_iso_8601": "2020-03-29T11:48:11.386867Z", "url": "https://files.pythonhosted.org/packages/cb/d1/eb12884d7836ee4bdb5b1ab3cb472385556706dd483056fd69525165ea68/drf-spectacular-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "5c29b0dcde7d06a76ae244ba7e4e717a", "sha256": "9c50ae4f17ef19be21bda5375d563a593f0697a750da27c05955fb039e2a1d53"}, "downloads": -1, "filename": "drf_spectacular-0.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5c29b0dcde7d06a76ae244ba7e4e717a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 33138, "upload_time": "2020-04-09T21:37:42", "upload_time_iso_8601": "2020-04-09T21:37:42.234626Z", "url": "https://files.pythonhosted.org/packages/63/bd/5a4834b5ca06d2636929da12bd7ddeb69253b06c67d1b0b068ac85646c62/drf_spectacular-0.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a5d26164012456f55f9cb151c7550bf", "sha256": "5b88f5fc707d728ad275a00646e2a667ed6b7670e8e27e3c8f514ccb9b21ae2d"}, "downloads": -1, "filename": "drf-spectacular-0.9.1.tar.gz", "has_sig": false, "md5_digest": "9a5d26164012456f55f9cb151c7550bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33560, "upload_time": "2020-04-09T21:37:43", "upload_time_iso_8601": "2020-04-09T21:37:43.570833Z", "url": "https://files.pythonhosted.org/packages/41/1d/a81518c64adf11f81a5d69d6abc722251749a079d93f1ac2251de8648a7b/drf-spectacular-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "d3f131f0b0cb2eb3e9f152bd6817fcc9", "sha256": "0294cbd1818003c18c917d2dbd8c9ea82217be35663d996647c726e1fdac667d"}, "downloads": -1, "filename": "drf_spectacular-0.9.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d3f131f0b0cb2eb3e9f152bd6817fcc9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 35759, "upload_time": "2020-04-27T13:18:19", "upload_time_iso_8601": "2020-04-27T13:18:19.641499Z", "url": "https://files.pythonhosted.org/packages/9c/d1/1ec56da59cb430c2be8c91994954c2cfd1e024609ee874f83be1ceeec151/drf_spectacular-0.9.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "985ae263ff81e13a96ea6773fc6f8770", "sha256": "ecf62a31a568981bc9291cc8f42e95a557df89a361220036c2c67964a8cad68c"}, "downloads": -1, "filename": "drf-spectacular-0.9.2.tar.gz", "has_sig": false, "md5_digest": "985ae263ff81e13a96ea6773fc6f8770", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36883, "upload_time": "2020-04-27T13:18:20", "upload_time_iso_8601": "2020-04-27T13:18:20.812168Z", "url": "https://files.pythonhosted.org/packages/42/d2/10ecac15bc67bf31f77c86b78f8c83bf09e3f0bf3bd48957c143771ec45e/drf-spectacular-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "73618ca23ccfbdb963e719d8aff0bedd", "sha256": "7c7bcda966f9be2a9298e73933272bb507aeb9832aaf57c24e7e5d6e204af4ad"}, "downloads": -1, "filename": "drf_spectacular-0.9.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "73618ca23ccfbdb963e719d8aff0bedd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 38993, "upload_time": "2020-05-07T08:25:33", "upload_time_iso_8601": "2020-05-07T08:25:33.268564Z", "url": "https://files.pythonhosted.org/packages/05/a3/d93819ac84dc9bd28fd6d7b0c4d0e24f3e5e51c8c84c9b8cfce44c65e1e9/drf_spectacular-0.9.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a2f8e6dee0e97b738a046d1d69d4f47", "sha256": "7563a45add8dd5adf613dac561a2a35939fc914599e05b82bfb972047e8765e6"}, "downloads": -1, "filename": "drf-spectacular-0.9.3.tar.gz", "has_sig": false, "md5_digest": "3a2f8e6dee0e97b738a046d1d69d4f47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 40062, "upload_time": "2020-05-07T08:25:34", "upload_time_iso_8601": "2020-05-07T08:25:34.538647Z", "url": "https://files.pythonhosted.org/packages/3c/b5/7bc031edff059d772824ae06300595fc30dbe815644121e95fae5b95b13d/drf-spectacular-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73618ca23ccfbdb963e719d8aff0bedd", "sha256": "7c7bcda966f9be2a9298e73933272bb507aeb9832aaf57c24e7e5d6e204af4ad"}, "downloads": -1, "filename": "drf_spectacular-0.9.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "73618ca23ccfbdb963e719d8aff0bedd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 38993, "upload_time": "2020-05-07T08:25:33", "upload_time_iso_8601": "2020-05-07T08:25:33.268564Z", "url": "https://files.pythonhosted.org/packages/05/a3/d93819ac84dc9bd28fd6d7b0c4d0e24f3e5e51c8c84c9b8cfce44c65e1e9/drf_spectacular-0.9.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a2f8e6dee0e97b738a046d1d69d4f47", "sha256": "7563a45add8dd5adf613dac561a2a35939fc914599e05b82bfb972047e8765e6"}, "downloads": -1, "filename": "drf-spectacular-0.9.3.tar.gz", "has_sig": false, "md5_digest": "3a2f8e6dee0e97b738a046d1d69d4f47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 40062, "upload_time": "2020-05-07T08:25:34", "upload_time_iso_8601": "2020-05-07T08:25:34.538647Z", "url": "https://files.pythonhosted.org/packages/3c/b5/7bc031edff059d772824ae06300595fc30dbe815644121e95fae5b95b13d/drf-spectacular-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:40 2020"}