{"info": {"author": "ServisBOT", "author_email": "info@servisbot.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# py-sb-sdk\n\n## Prerequisites \n* Python 3.7\n\n## SbAuth\nThe SbAuth class is used to encapsulate the signing of requests for specific resources. \nYou must export your AWS credentials to allow the SDK to sign requests:\n```\nexport AWS_ACCESS_KEY_ID=\"key_id\"\nexport AWS_SECRET_ACCESS_KEY=\"access_key\"\nexport AWS_SESSION_TOKEN=\"token\"\n```\n\nSbAuth will attempt to configure the AWS Region by looking checking the following values in this order:\n* `aws_region` passed to the constructor of SbAuth through the named argument `aws_region`.\n* `AWS_DEFAULT_REGION` in your environment variables \n* `AWS_REGION` in your environment variables\n* Checks to see if boto3 has found a region by checking the local aws config file, or possibly through an AWS client that is being used during the boto session.\nIf SbAuth can not set an AWS Region an Exception is thrown.\n\nTo initialize an SbAuth object you can do the following:\n```python\nfrom servisbotsdk import SbAuth\norg = \"flowit\"\nsb_auth = SbAuth(org, broca_url=\"https://broca.testdomain.test\")\n```\nIf you need to override the AWS region you can pass it as an argument to the constructor\n```python\nfrom servisbotsdk import SbAuth\norg = \"flowit\"\nsb_auth = SbAuth(org, broca_url=\"https://broca.testdomain.test\", aws_region=\"eu-west-1\")\n```\n\n## Intent\n### Describe\n#### Code Snippet\n```python\nfrom servisbotsdk import SbAuth, Intent\norg = \"flowit\"\nsb_auth = SbAuth(\n    org,\n    broca_url=\"https://broca.testdomain.test\",\n)\nintent = Intent(sb_auth)\ndescribe_resp = intent.describe(\"bot-name\", \"alias\")\n```\n#### Response\n```python\n{\n  'alias': 'alias',\n  'displayName': 'pricing',\n  'bot': 'bot-name',\n  'version': '$LATEST',\n  'utterances': [{\n    'text': 'What is the price of a large coffee',\n    'enabled': True\n  }],\n  'fulfilment': {\n    'actions': '[]'\n  },\n  'detection': {\n    'actions': '[]'\n  },\n  'scope': None,\n  'slots': []\n}\n```\n### List\n#### Code Snippet\n```python\nfrom servisbotsdk import SbAuth, Intent\norg = \"flowit\"\nsb_auth = SbAuth(\n    org,\n    broca_url=\"https://broca.testdomain.test\",\n)\nintent = Intent(sb_auth)\n\nresp = intent.list(\"DeanBIDF\", {\"limit\": 1})\n\nsecond_page = intent.list(\"bot-name\", {\"nextToken\": resp[\"nextToken\"], \"limit\": 1})\n```\n#### Response\n```python\n{\n  'intents': [{\n    'alias': 'sizing',\n    'displayName': 'sizing',\n    'bot': 'botname',\n    'version': '$LATEST',\n    'utterances': [{\n      'text': 'how much caffeine is in a large coffee',\n      'enabled': True\n    }, {\n      'text': 'why is a flat white so small',\n      'enabled': True\n    }, {\n      'text': 'why are medium coffees not large coffees',\n      'enabled': True\n    }],\n    'fulfilment': {\n      'actions': '[{\"type\":\"message\",\"value\":\"some value\"}]'\n    },\n    'detection': {\n      'actions': '[]'\n    },\n    'scope': None\n  }],\n  'nextToken': 'some-token'\n}\n```\n## Pagination\nSome resources allow you to iterate through the resource using a paginator. The arguments passed to the paginator will vary depending on the resource. An example of pagination be found below:\n```python\nfrom servisbotsdk import SbAuth, Intent\norg = \"flowit\"\nsb_auth = SbAuth(\n    org,\n    broca_url=\"https://broca.testdomain.test\",\n)\nintent = Intent(sb_auth)\nfor intents in intent.paginator(\"DeanBIDF\", {\"limit\": 1}):\n    for intent in intents:\n        print(intent)\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "servisbotsdk", "package_url": "https://pypi.org/project/servisbotsdk/", "platform": "", "project_url": "https://pypi.org/project/servisbotsdk/", "project_urls": null, "release_url": "https://pypi.org/project/servisbotsdk/0.1.1/", "requires_dist": ["boto3 (>=1.11.9,<2.0.0)", "requests (>=2.22.0,<3.0.0)", "requests_aws4auth (>=0.9,<0.10)"], "requires_python": ">=3.7,<4.0", "summary": "ServisBOT SDK for Data Science", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-sb-sdk</h1>\n<h2>Prerequisites</h2>\n<ul>\n<li>Python 3.7</li>\n</ul>\n<h2>SbAuth</h2>\n<p>The SbAuth class is used to encapsulate the signing of requests for specific resources.\nYou must export your AWS credentials to allow the SDK to sign requests:</p>\n<pre><code>export AWS_ACCESS_KEY_ID=\"key_id\"\nexport AWS_SECRET_ACCESS_KEY=\"access_key\"\nexport AWS_SESSION_TOKEN=\"token\"\n</code></pre>\n<p>SbAuth will attempt to configure the AWS Region by looking checking the following values in this order:</p>\n<ul>\n<li><code>aws_region</code> passed to the constructor of SbAuth through the named argument <code>aws_region</code>.</li>\n<li><code>AWS_DEFAULT_REGION</code> in your environment variables</li>\n<li><code>AWS_REGION</code> in your environment variables</li>\n<li>Checks to see if boto3 has found a region by checking the local aws config file, or possibly through an AWS client that is being used during the boto session.\nIf SbAuth can not set an AWS Region an Exception is thrown.</li>\n</ul>\n<p>To initialize an SbAuth object you can do the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">servisbotsdk</span> <span class=\"kn\">import</span> <span class=\"n\">SbAuth</span>\n<span class=\"n\">org</span> <span class=\"o\">=</span> <span class=\"s2\">\"flowit\"</span>\n<span class=\"n\">sb_auth</span> <span class=\"o\">=</span> <span class=\"n\">SbAuth</span><span class=\"p\">(</span><span class=\"n\">org</span><span class=\"p\">,</span> <span class=\"n\">broca_url</span><span class=\"o\">=</span><span class=\"s2\">\"https://broca.testdomain.test\"</span><span class=\"p\">)</span>\n</pre>\n<p>If you need to override the AWS region you can pass it as an argument to the constructor</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">servisbotsdk</span> <span class=\"kn\">import</span> <span class=\"n\">SbAuth</span>\n<span class=\"n\">org</span> <span class=\"o\">=</span> <span class=\"s2\">\"flowit\"</span>\n<span class=\"n\">sb_auth</span> <span class=\"o\">=</span> <span class=\"n\">SbAuth</span><span class=\"p\">(</span><span class=\"n\">org</span><span class=\"p\">,</span> <span class=\"n\">broca_url</span><span class=\"o\">=</span><span class=\"s2\">\"https://broca.testdomain.test\"</span><span class=\"p\">,</span> <span class=\"n\">aws_region</span><span class=\"o\">=</span><span class=\"s2\">\"eu-west-1\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Intent</h2>\n<h3>Describe</h3>\n<h4>Code Snippet</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">servisbotsdk</span> <span class=\"kn\">import</span> <span class=\"n\">SbAuth</span><span class=\"p\">,</span> <span class=\"n\">Intent</span>\n<span class=\"n\">org</span> <span class=\"o\">=</span> <span class=\"s2\">\"flowit\"</span>\n<span class=\"n\">sb_auth</span> <span class=\"o\">=</span> <span class=\"n\">SbAuth</span><span class=\"p\">(</span>\n    <span class=\"n\">org</span><span class=\"p\">,</span>\n    <span class=\"n\">broca_url</span><span class=\"o\">=</span><span class=\"s2\">\"https://broca.testdomain.test\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">intent</span> <span class=\"o\">=</span> <span class=\"n\">Intent</span><span class=\"p\">(</span><span class=\"n\">sb_auth</span><span class=\"p\">)</span>\n<span class=\"n\">describe_resp</span> <span class=\"o\">=</span> <span class=\"n\">intent</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"bot-name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"alias\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Response</h4>\n<pre><span class=\"p\">{</span>\n  <span class=\"s1\">'alias'</span><span class=\"p\">:</span> <span class=\"s1\">'alias'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'displayName'</span><span class=\"p\">:</span> <span class=\"s1\">'pricing'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'bot'</span><span class=\"p\">:</span> <span class=\"s1\">'bot-name'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"s1\">'$LATEST'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'utterances'</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'What is the price of a large coffee'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'enabled'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n  <span class=\"p\">}],</span>\n  <span class=\"s1\">'fulfilment'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'actions'</span><span class=\"p\">:</span> <span class=\"s1\">'[]'</span>\n  <span class=\"p\">},</span>\n  <span class=\"s1\">'detection'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'actions'</span><span class=\"p\">:</span> <span class=\"s1\">'[]'</span>\n  <span class=\"p\">},</span>\n  <span class=\"s1\">'scope'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"s1\">'slots'</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>List</h3>\n<h4>Code Snippet</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">servisbotsdk</span> <span class=\"kn\">import</span> <span class=\"n\">SbAuth</span><span class=\"p\">,</span> <span class=\"n\">Intent</span>\n<span class=\"n\">org</span> <span class=\"o\">=</span> <span class=\"s2\">\"flowit\"</span>\n<span class=\"n\">sb_auth</span> <span class=\"o\">=</span> <span class=\"n\">SbAuth</span><span class=\"p\">(</span>\n    <span class=\"n\">org</span><span class=\"p\">,</span>\n    <span class=\"n\">broca_url</span><span class=\"o\">=</span><span class=\"s2\">\"https://broca.testdomain.test\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">intent</span> <span class=\"o\">=</span> <span class=\"n\">Intent</span><span class=\"p\">(</span><span class=\"n\">sb_auth</span><span class=\"p\">)</span>\n\n<span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">intent</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"s2\">\"DeanBIDF\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"limit\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n\n<span class=\"n\">second_page</span> <span class=\"o\">=</span> <span class=\"n\">intent</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"s2\">\"bot-name\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"nextToken\"</span><span class=\"p\">:</span> <span class=\"n\">resp</span><span class=\"p\">[</span><span class=\"s2\">\"nextToken\"</span><span class=\"p\">],</span> <span class=\"s2\">\"limit\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n</pre>\n<h4>Response</h4>\n<pre><span class=\"p\">{</span>\n  <span class=\"s1\">'intents'</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"s1\">'alias'</span><span class=\"p\">:</span> <span class=\"s1\">'sizing'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'displayName'</span><span class=\"p\">:</span> <span class=\"s1\">'sizing'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'bot'</span><span class=\"p\">:</span> <span class=\"s1\">'botname'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"s1\">'$LATEST'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'utterances'</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n      <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'how much caffeine is in a large coffee'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'enabled'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'why is a flat white so small'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'enabled'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'why are medium coffees not large coffees'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'enabled'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"p\">}],</span>\n    <span class=\"s1\">'fulfilment'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'actions'</span><span class=\"p\">:</span> <span class=\"s1\">'[{\"type\":\"message\",\"value\":\"some value\"}]'</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'detection'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'actions'</span><span class=\"p\">:</span> <span class=\"s1\">'[]'</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'scope'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n  <span class=\"p\">}],</span>\n  <span class=\"s1\">'nextToken'</span><span class=\"p\">:</span> <span class=\"s1\">'some-token'</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Pagination</h2>\n<p>Some resources allow you to iterate through the resource using a paginator. The arguments passed to the paginator will vary depending on the resource. An example of pagination be found below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">servisbotsdk</span> <span class=\"kn\">import</span> <span class=\"n\">SbAuth</span><span class=\"p\">,</span> <span class=\"n\">Intent</span>\n<span class=\"n\">org</span> <span class=\"o\">=</span> <span class=\"s2\">\"flowit\"</span>\n<span class=\"n\">sb_auth</span> <span class=\"o\">=</span> <span class=\"n\">SbAuth</span><span class=\"p\">(</span>\n    <span class=\"n\">org</span><span class=\"p\">,</span>\n    <span class=\"n\">broca_url</span><span class=\"o\">=</span><span class=\"s2\">\"https://broca.testdomain.test\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">intent</span> <span class=\"o\">=</span> <span class=\"n\">Intent</span><span class=\"p\">(</span><span class=\"n\">sb_auth</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">intents</span> <span class=\"ow\">in</span> <span class=\"n\">intent</span><span class=\"o\">.</span><span class=\"n\">paginator</span><span class=\"p\">(</span><span class=\"s2\">\"DeanBIDF\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"limit\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}):</span>\n    <span class=\"k\">for</span> <span class=\"n\">intent</span> <span class=\"ow\">in</span> <span class=\"n\">intents</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">intent</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6575567, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6374ef9ca79e07c2ba274ad9f3124923", "sha256": "7feea0acab7ef1df0e64863ae13a94193b7534fdacedbd24983752ca3f759d61"}, "downloads": -1, "filename": "servisbotsdk-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6374ef9ca79e07c2ba274ad9f3124923", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 4147, "upload_time": "2020-02-05T09:55:08", "upload_time_iso_8601": "2020-02-05T09:55:08.603545Z", "url": "https://files.pythonhosted.org/packages/99/68/598d4a06cbd06edd08746ca54f0309c4c641db86f5f8eb8a239d3c8b4409/servisbotsdk-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d96873e30473b2bf6aca34a96222ab32", "sha256": "273181a93bac4525b9c9b3f3af02ca88041ead318f367cab57c61b23cd65d871"}, "downloads": -1, "filename": "servisbotsdk-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d96873e30473b2bf6aca34a96222ab32", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 2829, "upload_time": "2020-02-05T09:55:10", "upload_time_iso_8601": "2020-02-05T09:55:10.822356Z", "url": "https://files.pythonhosted.org/packages/9c/b0/eec521e690fd483a45d0c8d488b6ab1f5149c74fd518131c1a0e3c474a50/servisbotsdk-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "287062d17014e830776b24574a00ea18", "sha256": "1081ff6a238cf62e774ec1ed74be581c925d6695055e53f6003c9598fe694d8d"}, "downloads": -1, "filename": "servisbotsdk-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "287062d17014e830776b24574a00ea18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5363, "upload_time": "2020-02-05T12:05:13", "upload_time_iso_8601": "2020-02-05T12:05:13.649094Z", "url": "https://files.pythonhosted.org/packages/36/16/9bd8994c75247267b792ac180ec0d3724106f29b4a6c06493706488caa17/servisbotsdk-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e723cd0930591910662f75dcae32790", "sha256": "958be1ef20d82c906562a193fc8dbebabd2f6704b272d18b949485a060ce171f"}, "downloads": -1, "filename": "servisbotsdk-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2e723cd0930591910662f75dcae32790", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 4832, "upload_time": "2020-02-05T12:05:15", "upload_time_iso_8601": "2020-02-05T12:05:15.295575Z", "url": "https://files.pythonhosted.org/packages/b3/5c/818d76f6c63ef105dec45cc35996d0f228560cc68cd215ce4e52c2fdd2c6/servisbotsdk-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "287062d17014e830776b24574a00ea18", "sha256": "1081ff6a238cf62e774ec1ed74be581c925d6695055e53f6003c9598fe694d8d"}, "downloads": -1, "filename": "servisbotsdk-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "287062d17014e830776b24574a00ea18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5363, "upload_time": "2020-02-05T12:05:13", "upload_time_iso_8601": "2020-02-05T12:05:13.649094Z", "url": "https://files.pythonhosted.org/packages/36/16/9bd8994c75247267b792ac180ec0d3724106f29b4a6c06493706488caa17/servisbotsdk-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e723cd0930591910662f75dcae32790", "sha256": "958be1ef20d82c906562a193fc8dbebabd2f6704b272d18b949485a060ce171f"}, "downloads": -1, "filename": "servisbotsdk-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2e723cd0930591910662f75dcae32790", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 4832, "upload_time": "2020-02-05T12:05:15", "upload_time_iso_8601": "2020-02-05T12:05:15.295575Z", "url": "https://files.pythonhosted.org/packages/b3/5c/818d76f6c63ef105dec45cc35996d0f228560cc68cd215ce4e52c2fdd2c6/servisbotsdk-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:52 2020"}