{"info": {"author": "Feng Bao", "author_email": "fbao0110@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# DAK: Explaining the genetic causality for complex diseases by deep association kernel learning\n\nCausal loci contribute to complex diseases in various manners. The comprehensive identification of suspicious genes requires a general genome-wide association study (GWAS) model that can work with different types of genetic effects. Here, we introduce a deep association kernel learning (DAK) model to enable automatic causal genotype encoding for pathway-level GWAS. Therefore, DAK is able to detect common and rare variants with complicated genetic effects that existing approaches fail. \n\n![avatar](./method.png)\n\n## Package requirements\n\nDAK requires the following packages for installation:\n\n- Python >= 3.6\n- TensorFlow-GPU >= 1.4.1\n- (TensorFlow >= 1.4.1 if only use CPU) \n- Numpy >= 1.13.0\n- Scipy >= 1.0.0\n- Pandas >= 0.22.0\n- os\n- time\n\n\n## Usage\n\n### Data preparation\n1. Genotype data\n\n    SNP loci in the same set are stored in one document in the `n * m` format, where `n` is the number of samples and `m` is the number of SNPs in the set. Each locus is in the additive genetic coding format and the `DAK.one_hot_convert(geno)` function will automatically transform the sequence  to one-hot coding data.\n\n    A demonstration genotype format file can be found in `./demo_data/pathway_*.raw_geno.txt`\n\n2. Phenotype data\n\n    Phenotype information is in the `n*1` vector format with each row representing the disease status of one sample. 1: disease; 0: control.\n\n    Refer to  `./demo_data/pheno.txt` for example.\n\n3. Cofounding data\n\n    Cofounding of samples is in `n*k` matrix where `k` is the number of PCs/covariants.  \n\n4. Dividing to batches\n\n    Dividing all data into batch files for training and inference. Users can refer to `Step 5 in Demonstration` for detailed implementation.\n\n### DAK parameters\n\nThe parameters of DAK function is listed as follows:\n\n```python\ndak = DAK(sess,                                 #  tensorflow session that conducts learning task\n          batch_path_prefix=batch_path_prefix,  #  file path of genotype data in batches\n          label_path_prefix=label_path_prefix,  #  file path of label data in batches\n          cov_path_prefix=cov_path_prefix,      #  file path of covariant data in \n          p_val_path=p_val_path,                #  file path of p-values by DAK\n          batch_num=batch_num,                  #  the batch number of the data\n          batch_size=batch_size,                #  sample number in each batch file\n          pathway_num=pathway_num,              #  number of gene sets\n          max_path_len=max_path_len,            #  the maximal SNP number among all gene sets \n          );\n```\n\n### Demonstration\n\n1. Define the file path of phenotype.\n```python\n# set the path of label data and covariants (optinal)\nlabel_path = './demo_data/pheno.txt'\n# cov_path = '../application/LC_pathway/LC_pathway_cov.txt'\n```\n\n2. Define paths of outputs: p-value, genotype batches, label batches, one-hot coded genotype (for internal usage of DAK).\n```python\n# set the aim paths of result and\nresult_path = './demo_data/p.txt'\npathway_npy_path = './demo_data/pathway_onehot'\nbatch_npy_path = './demo_data/batch'\nbatch_label_path = './demo_data/label'\n# batch_cov_path = './demo_data/cov' # (optinal)\n```\n\n3. Set the details of analyzed data\n```python\npathway_num = 10 # number of gene sets\nindiv_num = 1000 #number of samples in total\nbatch_size = 50 # number of samples in each batch file\nmax_path_len = 20000 # maximal SNP numbers in all gene sets\n```\n\n4. One-hot coding for genotype\n```python\n# convert raw format SNP into one-hot coding\nraw_path = '../application/LC_pathway'\nfor path_iter in range(pathway_num):\n    geno = pd.read_csv('./demo_data/pathway_' + str(path_iter) + \n        '.raw_geno.txt', sep='\\t', header=None, index_col=None)\n    geno = geno.values\n    gene_one_hot = DAK.one_hot_convert(geno)\n    np.save(pathway_npy_path + '/pathway_' +\n            str(path_iter) + '.npy', gene_one_hot)\n    print('One hot conversion for pathway ' + str(path_iter))\n```\n\n5. Divide data into batches\n```python\n# convert pathway to training batches\nbatch_index = range(0, indiv_num, batch_size)\nlabel = pd.read_csv(label_path, sep='\\t', header=0, index_col=None)\nlabel = np.squeeze(label.values)\n\n# cov = pd.read_csv(cov_path, sep='\\t', header=0, index_col=None)\n# cov = cov.values.astype(np.float)\n# cov = stats.zscore(cov, axis=0)\n\n# divided to batches\nfor i in range(len(batch_index) - 1):\n    batch_seq = np.zeros(\n        [pathway_num, batch_size, max_path_len, 3], dtype=np.int8)\n    for path_iter in range(pathway_num):\n        path_data_buf = np.load(\n            pathway_npy_path + '/pathway_' + str(path_iter) + '.npy')\n        # [N,len,3]\n        path_data_buf_select = path_data_buf[batch_index[i]:batch_index[i + 1], :, :]\n        batch_seq[path_iter, :, :path_data_buf_select.shape[1],\n                  :] = path_data_buf_select\n\n    batch_seq = batch_seq.astype(np.int8)\n    np.save(batch_npy_path + '/batch_' + str(i) + '.npy', batch_seq)\n\n    batch_label = label[batch_index[i]:batch_index[i + 1]]\n    np.save(batch_label_path + '/batch_' + str(i) + '.npy', batch_label)\n\n    # batch_cov = cov[batch_index[i]:batch_index[i + 1], :]\n    # np.save(batch_cov_path + '/batch_' + str(i) + '.npy', batch_cov)\n\n    print('make batch %d' % i)\n```\n\n6. Model training and significance test\n```python\n# training DAK and test pathway\nDAK.train(batch_npy_path, batch_label_path, None, result_path,\n          batch_num=len(batch_index) - 1, batch_size=batch_size, pathway_num=pathway_num, max_path_len=max_path_len)\n```\nResults were store in path specified in `result_path`.\n\n# Example\n\n## Code\nSee `demo.py`.\n\n## Data\nIn `./demo_data/`:\n\n- Genotype: `./demo_data/pathway_*.raw_geno.txt`\n- Phenoytpe: `./demo_data/pheno.txt`\n\n## Copyright\nSoftware provided as is under MIT License.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fbaothu/DAK", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "DAK", "package_url": "https://pypi.org/project/DAK/", "platform": "", "project_url": "https://pypi.org/project/DAK/", "project_urls": {"Homepage": "https://github.com/fbaothu/DAK"}, "release_url": "https://pypi.org/project/DAK/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Explaining the genetic causality for complex diseases by deep association kernel learning", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DAK: Explaining the genetic causality for complex diseases by deep association kernel learning</h1>\n<p>Causal loci contribute to complex diseases in various manners. The comprehensive identification of suspicious genes requires a general genome-wide association study (GWAS) model that can work with different types of genetic effects. Here, we introduce a deep association kernel learning (DAK) model to enable automatic causal genotype encoding for pathway-level GWAS. Therefore, DAK is able to detect common and rare variants with complicated genetic effects that existing approaches fail.</p>\n<p><img alt=\"avatar\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c47b9d853dae596affe62b4e90b8f8399d520a1e/2e2f6d6574686f642e706e67\"></p>\n<h2>Package requirements</h2>\n<p>DAK requires the following packages for installation:</p>\n<ul>\n<li>Python &gt;= 3.6</li>\n<li>TensorFlow-GPU &gt;= 1.4.1</li>\n<li>(TensorFlow &gt;= 1.4.1 if only use CPU)</li>\n<li>Numpy &gt;= 1.13.0</li>\n<li>Scipy &gt;= 1.0.0</li>\n<li>Pandas &gt;= 0.22.0</li>\n<li>os</li>\n<li>time</li>\n</ul>\n<h2>Usage</h2>\n<h3>Data preparation</h3>\n<ol>\n<li>\n<p>Genotype data</p>\n<p>SNP loci in the same set are stored in one document in the <code>n * m</code> format, where <code>n</code> is the number of samples and <code>m</code> is the number of SNPs in the set. Each locus is in the additive genetic coding format and the <code>DAK.one_hot_convert(geno)</code> function will automatically transform the sequence  to one-hot coding data.</p>\n<p>A demonstration genotype format file can be found in <code>./demo_data/pathway_*.raw_geno.txt</code></p>\n</li>\n<li>\n<p>Phenotype data</p>\n<p>Phenotype information is in the <code>n*1</code> vector format with each row representing the disease status of one sample. 1: disease; 0: control.</p>\n<p>Refer to  <code>./demo_data/pheno.txt</code> for example.</p>\n</li>\n<li>\n<p>Cofounding data</p>\n<p>Cofounding of samples is in <code>n*k</code> matrix where <code>k</code> is the number of PCs/covariants.</p>\n</li>\n<li>\n<p>Dividing to batches</p>\n<p>Dividing all data into batch files for training and inference. Users can refer to <code>Step 5 in Demonstration</code> for detailed implementation.</p>\n</li>\n</ol>\n<h3>DAK parameters</h3>\n<p>The parameters of DAK function is listed as follows:</p>\n<pre><span class=\"n\">dak</span> <span class=\"o\">=</span> <span class=\"n\">DAK</span><span class=\"p\">(</span><span class=\"n\">sess</span><span class=\"p\">,</span>                                 <span class=\"c1\">#  tensorflow session that conducts learning task</span>\n          <span class=\"n\">batch_path_prefix</span><span class=\"o\">=</span><span class=\"n\">batch_path_prefix</span><span class=\"p\">,</span>  <span class=\"c1\">#  file path of genotype data in batches</span>\n          <span class=\"n\">label_path_prefix</span><span class=\"o\">=</span><span class=\"n\">label_path_prefix</span><span class=\"p\">,</span>  <span class=\"c1\">#  file path of label data in batches</span>\n          <span class=\"n\">cov_path_prefix</span><span class=\"o\">=</span><span class=\"n\">cov_path_prefix</span><span class=\"p\">,</span>      <span class=\"c1\">#  file path of covariant data in </span>\n          <span class=\"n\">p_val_path</span><span class=\"o\">=</span><span class=\"n\">p_val_path</span><span class=\"p\">,</span>                <span class=\"c1\">#  file path of p-values by DAK</span>\n          <span class=\"n\">batch_num</span><span class=\"o\">=</span><span class=\"n\">batch_num</span><span class=\"p\">,</span>                  <span class=\"c1\">#  the batch number of the data</span>\n          <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>                <span class=\"c1\">#  sample number in each batch file</span>\n          <span class=\"n\">pathway_num</span><span class=\"o\">=</span><span class=\"n\">pathway_num</span><span class=\"p\">,</span>              <span class=\"c1\">#  number of gene sets</span>\n          <span class=\"n\">max_path_len</span><span class=\"o\">=</span><span class=\"n\">max_path_len</span><span class=\"p\">,</span>            <span class=\"c1\">#  the maximal SNP number among all gene sets </span>\n          <span class=\"p\">);</span>\n</pre>\n<h3>Demonstration</h3>\n<ol>\n<li>Define the file path of phenotype.</li>\n</ol>\n<pre><span class=\"c1\"># set the path of label data and covariants (optinal)</span>\n<span class=\"n\">label_path</span> <span class=\"o\">=</span> <span class=\"s1\">'./demo_data/pheno.txt'</span>\n<span class=\"c1\"># cov_path = '../application/LC_pathway/LC_pathway_cov.txt'</span>\n</pre>\n<ol>\n<li>Define paths of outputs: p-value, genotype batches, label batches, one-hot coded genotype (for internal usage of DAK).</li>\n</ol>\n<pre><span class=\"c1\"># set the aim paths of result and</span>\n<span class=\"n\">result_path</span> <span class=\"o\">=</span> <span class=\"s1\">'./demo_data/p.txt'</span>\n<span class=\"n\">pathway_npy_path</span> <span class=\"o\">=</span> <span class=\"s1\">'./demo_data/pathway_onehot'</span>\n<span class=\"n\">batch_npy_path</span> <span class=\"o\">=</span> <span class=\"s1\">'./demo_data/batch'</span>\n<span class=\"n\">batch_label_path</span> <span class=\"o\">=</span> <span class=\"s1\">'./demo_data/label'</span>\n<span class=\"c1\"># batch_cov_path = './demo_data/cov' # (optinal)</span>\n</pre>\n<ol>\n<li>Set the details of analyzed data</li>\n</ol>\n<pre><span class=\"n\">pathway_num</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"c1\"># number of gene sets</span>\n<span class=\"n\">indiv_num</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span> <span class=\"c1\">#number of samples in total</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">50</span> <span class=\"c1\"># number of samples in each batch file</span>\n<span class=\"n\">max_path_len</span> <span class=\"o\">=</span> <span class=\"mi\">20000</span> <span class=\"c1\"># maximal SNP numbers in all gene sets</span>\n</pre>\n<ol>\n<li>One-hot coding for genotype</li>\n</ol>\n<pre><span class=\"c1\"># convert raw format SNP into one-hot coding</span>\n<span class=\"n\">raw_path</span> <span class=\"o\">=</span> <span class=\"s1\">'../application/LC_pathway'</span>\n<span class=\"k\">for</span> <span class=\"n\">path_iter</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">pathway_num</span><span class=\"p\">):</span>\n    <span class=\"n\">geno</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'./demo_data/pathway_'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">path_iter</span><span class=\"p\">)</span> <span class=\"o\">+</span> \n        <span class=\"s1\">'.raw_geno.txt'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">geno</span> <span class=\"o\">=</span> <span class=\"n\">geno</span><span class=\"o\">.</span><span class=\"n\">values</span>\n    <span class=\"n\">gene_one_hot</span> <span class=\"o\">=</span> <span class=\"n\">DAK</span><span class=\"o\">.</span><span class=\"n\">one_hot_convert</span><span class=\"p\">(</span><span class=\"n\">geno</span><span class=\"p\">)</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">pathway_npy_path</span> <span class=\"o\">+</span> <span class=\"s1\">'/pathway_'</span> <span class=\"o\">+</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">path_iter</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'.npy'</span><span class=\"p\">,</span> <span class=\"n\">gene_one_hot</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'One hot conversion for pathway '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">path_iter</span><span class=\"p\">))</span>\n</pre>\n<ol>\n<li>Divide data into batches</li>\n</ol>\n<pre><span class=\"c1\"># convert pathway to training batches</span>\n<span class=\"n\">batch_index</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">indiv_num</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"p\">)</span>\n<span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">label_path</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># cov = pd.read_csv(cov_path, sep='\\t', header=0, index_col=None)</span>\n<span class=\"c1\"># cov = cov.values.astype(np.float)</span>\n<span class=\"c1\"># cov = stats.zscore(cov, axis=0)</span>\n\n<span class=\"c1\"># divided to batches</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">batch_index</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">batch_seq</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">pathway_num</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">max_path_len</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int8</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">path_iter</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">pathway_num</span><span class=\"p\">):</span>\n        <span class=\"n\">path_data_buf</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span>\n            <span class=\"n\">pathway_npy_path</span> <span class=\"o\">+</span> <span class=\"s1\">'/pathway_'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">path_iter</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'.npy'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># [N,len,3]</span>\n        <span class=\"n\">path_data_buf_select</span> <span class=\"o\">=</span> <span class=\"n\">path_data_buf</span><span class=\"p\">[</span><span class=\"n\">batch_index</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span><span class=\"n\">batch_index</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span>\n        <span class=\"n\">batch_seq</span><span class=\"p\">[</span><span class=\"n\">path_iter</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:</span><span class=\"n\">path_data_buf_select</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n                  <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">path_data_buf_select</span>\n\n    <span class=\"n\">batch_seq</span> <span class=\"o\">=</span> <span class=\"n\">batch_seq</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int8</span><span class=\"p\">)</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">batch_npy_path</span> <span class=\"o\">+</span> <span class=\"s1\">'/batch_'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'.npy'</span><span class=\"p\">,</span> <span class=\"n\">batch_seq</span><span class=\"p\">)</span>\n\n    <span class=\"n\">batch_label</span> <span class=\"o\">=</span> <span class=\"n\">label</span><span class=\"p\">[</span><span class=\"n\">batch_index</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span><span class=\"n\">batch_index</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">batch_label_path</span> <span class=\"o\">+</span> <span class=\"s1\">'/batch_'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'.npy'</span><span class=\"p\">,</span> <span class=\"n\">batch_label</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># batch_cov = cov[batch_index[i]:batch_index[i + 1], :]</span>\n    <span class=\"c1\"># np.save(batch_cov_path + '/batch_' + str(i) + '.npy', batch_cov)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'make batch </span><span class=\"si\">%d</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Model training and significance test</li>\n</ol>\n<pre><span class=\"c1\"># training DAK and test pathway</span>\n<span class=\"n\">DAK</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">batch_npy_path</span><span class=\"p\">,</span> <span class=\"n\">batch_label_path</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">result_path</span><span class=\"p\">,</span>\n          <span class=\"n\">batch_num</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">batch_index</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">pathway_num</span><span class=\"o\">=</span><span class=\"n\">pathway_num</span><span class=\"p\">,</span> <span class=\"n\">max_path_len</span><span class=\"o\">=</span><span class=\"n\">max_path_len</span><span class=\"p\">)</span>\n</pre>\n<p>Results were store in path specified in <code>result_path</code>.</p>\n<h1>Example</h1>\n<h2>Code</h2>\n<p>See <code>demo.py</code>.</p>\n<h2>Data</h2>\n<p>In <code>./demo_data/</code>:</p>\n<ul>\n<li>Genotype: <code>./demo_data/pathway_*.raw_geno.txt</code></li>\n<li>Phenoytpe: <code>./demo_data/pheno.txt</code></li>\n</ul>\n<h2>Copyright</h2>\n<p>Software provided as is under MIT License.</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n\n          </div>"}, "last_serial": 7006995, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "55a5149905c1150f0edf45daefcb5663", "sha256": "d29a360dc3205a1eaf4d83393926894cebce36ae6dfd9e3dea2029bc4aa4d5b3"}, "downloads": -1, "filename": "DAK-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "55a5149905c1150f0edf45daefcb5663", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4603, "upload_time": "2020-04-13T00:47:30", "upload_time_iso_8601": "2020-04-13T00:47:30.211142Z", "url": "https://files.pythonhosted.org/packages/ac/a1/1abfc50070f6b2a3b730b531380e57de601476eb6013de63ee0043dc23d1/DAK-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b04432d27491f1363a3e22eadaddd241", "sha256": "27d4c12b01c276c4aaf1e3dddac74fdb4837f2c1a3413aa7a15338be10a5f76f"}, "downloads": -1, "filename": "DAK-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b04432d27491f1363a3e22eadaddd241", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4352, "upload_time": "2020-04-13T00:47:34", "upload_time_iso_8601": "2020-04-13T00:47:34.747005Z", "url": "https://files.pythonhosted.org/packages/90/32/91a0132f88afc9b4a7b9b9942560096482b055bbb3dd747bbc92f599a759/DAK-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55a5149905c1150f0edf45daefcb5663", "sha256": "d29a360dc3205a1eaf4d83393926894cebce36ae6dfd9e3dea2029bc4aa4d5b3"}, "downloads": -1, "filename": "DAK-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "55a5149905c1150f0edf45daefcb5663", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4603, "upload_time": "2020-04-13T00:47:30", "upload_time_iso_8601": "2020-04-13T00:47:30.211142Z", "url": "https://files.pythonhosted.org/packages/ac/a1/1abfc50070f6b2a3b730b531380e57de601476eb6013de63ee0043dc23d1/DAK-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b04432d27491f1363a3e22eadaddd241", "sha256": "27d4c12b01c276c4aaf1e3dddac74fdb4837f2c1a3413aa7a15338be10a5f76f"}, "downloads": -1, "filename": "DAK-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b04432d27491f1363a3e22eadaddd241", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4352, "upload_time": "2020-04-13T00:47:34", "upload_time_iso_8601": "2020-04-13T00:47:34.747005Z", "url": "https://files.pythonhosted.org/packages/90/32/91a0132f88afc9b4a7b9b9942560096482b055bbb3dd747bbc92f599a759/DAK-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:46 2020"}