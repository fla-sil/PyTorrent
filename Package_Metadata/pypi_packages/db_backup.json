{"info": {"author": "Stephen Moore", "author_email": "stephen@delfick.com", "bugtrack_url": null, "classifiers": [], "description": "Database Backup/Restore\n=======================\n\nThis holds the necessary code to use existing database dump tools with gpg to\ncreate a full backup of a disk in an encrypted format that can sit on disk more\nsafely than just a text dump of that database.\n\nThis library was originally created for\n`RatticWeb <https://github.com/tildaslash/RatticWeb>`_ which made the decision\nto not handle encryption within the application itself (encryption is difficult).\n\n.. image:: https://travis-ci.org/delfick/db_backup.png?branch=master\n    :target: https://travis-ci.org/delfick/db_backup\n\nUsage\n-----\n\nThere are two commands of importance in this library.\n\n    db_backup.commands.backup(database_settings, recipients, backup_dir, gpg_home=None)\n\n        This will dump the database as specified by ``database_settings``\n        and create a gpg encrypted file inside the specified ``backup_dir``\n        (using the ``gpg_home`` if specified, otherwise whatever the gpg binary\n        on your system wants to use) that can only be decrypted by\n        the specified ``recipients``.\n\n        ``database_settings`` is a dictionary of \n        ``{name, engine, port, host, user, password}`` where all values except\n        ``name`` and ``engine`` are optional.\n\n        ``engine`` is one of ``sqlite3``, ``psql`` or ``mysql`` or the names of\n        the equivalent backends in ``django.db.backends`` (i.e. django database\n        dictionary is fine)\n\n        ``recipients`` is a list of strings where each string is the uid for\n        a key in your gpg homedir.\n\n    db_backup.commands.restore(database_settings, restore_from, gpg_home=None)\n\n        This will take the gpg encrypted file at ``restore_from``, decrypt it\n        and feed the specified database with it.\n\n        ``database_settings`` and ``gpg_home`` behave like they do for the\n        backup command.\n\n        ``restore_from`` is just the filepath to the encrypted backup file.\n\nInstallation\n------------\n\nUse pip!:\n\n.. code-block:: bash\n\n    pip install db_backup\n\nOr if you're developing it:\n\n.. code-block:: bash\n\n    pip install -e .\n    pip install -e \".[tests]\"\n\nTests\n-----\n\nRun the helpful script:\n\n.. code-block:: bash\n\n    ./test.sh\n\nOr if you're outside a virtualenv and want to test with old pythons as well:\n\n.. code-block:: bash\n\n    tox\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://db-backup.readthedocs.org", "keywords": "database encrypted backup restore", "license": "WTFPL", "maintainer": null, "maintainer_email": null, "name": "db_backup", "package_url": "https://pypi.org/project/db_backup/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/db_backup/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://db-backup.readthedocs.org"}, "release_url": "https://pypi.org/project/db_backup/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "Code for creating encrypted backups of databases", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This holds the necessary code to use existing database dump tools with gpg to\ncreate a full backup of a disk in an encrypted format that can sit on disk more\nsafely than just a text dump of that database.</p>\n<p>This library was originally created for\n<a href=\"https://github.com/tildaslash/RatticWeb\" rel=\"nofollow\">RatticWeb</a> which made the decision\nto not handle encryption within the application itself (encryption is difficult).</p>\n<a href=\"https://travis-ci.org/delfick/db_backup\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/delfick/db_backup.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7dadb72c540e35e1af190880f65fcfb1ac5364d9/68747470733a2f2f7472617669732d63692e6f72672f64656c6669636b2f64625f6261636b75702e706e673f6272616e63683d6d6173746572\"></a>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>There are two commands of importance in this library.</p>\n<blockquote>\n<p>db_backup.commands.backup(database_settings, recipients, backup_dir, gpg_home=None)</p>\n<blockquote>\n<p>This will dump the database as specified by <tt>database_settings</tt>\nand create a gpg encrypted file inside the specified <tt>backup_dir</tt>\n(using the <tt>gpg_home</tt> if specified, otherwise whatever the gpg binary\non your system wants to use) that can only be decrypted by\nthe specified <tt>recipients</tt>.</p>\n<p><tt>database_settings</tt> is a dictionary of\n<tt>{name, engine, port, host, user, password}</tt> where all values except\n<tt>name</tt> and <tt>engine</tt> are optional.</p>\n<p><tt>engine</tt> is one of <tt>sqlite3</tt>, <tt>psql</tt> or <tt>mysql</tt> or the names of\nthe equivalent backends in <tt>django.db.backends</tt> (i.e. django database\ndictionary is fine)</p>\n<p><tt>recipients</tt> is a list of strings where each string is the uid for\na key in your gpg homedir.</p>\n</blockquote>\n<p>db_backup.commands.restore(database_settings, restore_from, gpg_home=None)</p>\n<blockquote>\n<p>This will take the gpg encrypted file at <tt>restore_from</tt>, decrypt it\nand feed the specified database with it.</p>\n<p><tt>database_settings</tt> and <tt>gpg_home</tt> behave like they do for the\nbackup command.</p>\n<p><tt>restore_from</tt> is just the filepath to the encrypted backup file.</p>\n</blockquote>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use pip!:</p>\n<pre>pip install db_backup\n</pre>\n<p>Or if you\u2019re developing it:</p>\n<pre>pip install -e .\npip install -e <span class=\"s2\">\".[tests]\"</span>\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Run the helpful script:</p>\n<pre>./test.sh\n</pre>\n<p>Or if you\u2019re outside a virtualenv and want to test with old pythons as well:</p>\n<pre>tox\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1052328, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "89db4eb5c35b2de697252b28f28ce11b", "sha256": "04359b14674816288f906d5a4cbfa67195baa5ad8420ea21a07ea149ea33f4f8"}, "downloads": -1, "filename": "db_backup-0.1.tar.gz", "has_sig": false, "md5_digest": "89db4eb5c35b2de697252b28f28ce11b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6542, "upload_time": "2014-03-10T11:10:04", "upload_time_iso_8601": "2014-03-10T11:10:04.858607Z", "url": "https://files.pythonhosted.org/packages/e4/d2/5a51fcf8bbab5174e7bea9f95a844aaa2db2addba41d58f787dfdc0f66cf/db_backup-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "05fb63e724ef3216d2ed14d4a125d8b2", "sha256": "486def7a258823662a42a44b44526ab00fa16ac8839ddcb08f7223ba83cc33c2"}, "downloads": -1, "filename": "db_backup-0.1.1.tar.gz", "has_sig": false, "md5_digest": "05fb63e724ef3216d2ed14d4a125d8b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6629, "upload_time": "2014-03-15T08:47:32", "upload_time_iso_8601": "2014-03-15T08:47:32.264078Z", "url": "https://files.pythonhosted.org/packages/f9/59/fc54b7c4981bdc17669812af978df64a4a39e066d72d3b3c36423632e8d3/db_backup-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ee4749eef73fb02f0125c62a4bf6834d", "sha256": "00f9cc4aaf1a9bfa95db53e5f9198602e8f11da420b366991f084b0ca54740c7"}, "downloads": -1, "filename": "db_backup-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ee4749eef73fb02f0125c62a4bf6834d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6775, "upload_time": "2014-03-27T08:59:55", "upload_time_iso_8601": "2014-03-27T08:59:55.720309Z", "url": "https://files.pythonhosted.org/packages/ab/af/f64179cd3d9eeafb08a636e960cda4739966cc3a41488767a1bbe5653553/db_backup-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1303f7380f3d720baf0f404ae7a4d7e5", "sha256": "f423c734d5e7b00cc875c36f3233b9ef01da6caea966dd8086776c7ff19a1253"}, "downloads": -1, "filename": "db_backup-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1303f7380f3d720baf0f404ae7a4d7e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7414, "upload_time": "2014-04-06T00:44:45", "upload_time_iso_8601": "2014-04-06T00:44:45.510051Z", "url": "https://files.pythonhosted.org/packages/99/b5/5d7ff6e66244e292d73f8c89a1d011931930f37ca4b32539eca3f2329f9f/db_backup-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1303f7380f3d720baf0f404ae7a4d7e5", "sha256": "f423c734d5e7b00cc875c36f3233b9ef01da6caea966dd8086776c7ff19a1253"}, "downloads": -1, "filename": "db_backup-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1303f7380f3d720baf0f404ae7a4d7e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7414, "upload_time": "2014-04-06T00:44:45", "upload_time_iso_8601": "2014-04-06T00:44:45.510051Z", "url": "https://files.pythonhosted.org/packages/99/b5/5d7ff6e66244e292d73f8c89a1d011931930f37ca4b32539eca3f2329f9f/db_backup-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:58 2020"}