{"info": {"author": "Cloud Custodian Project", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# c7n-mailer: Custodian Mailer\n\n[//]: # (         !!! IMPORTANT !!!                    )\n[//]: # (This file is moved during document generation.)\n[//]: # (Only edit the original document at ./tools/c7n_mailer/README.md)\n\nA mailer implementation for Custodian. Outbound mail delivery is still somewhat\norganization-specific, so this at the moment serves primarily as an example\nimplementation.\n\n> The Cloud Custodian Mailer can now be easily run in a Docker container. Click [here](https://hub.docker.com/r/cloudcustodian/mailer) for details.\n\n\n## Message Relay\n\nCustodian Mailer subscribes to an SQS queue, looks up users, and sends email\nvia SES and/or send notification to DataDog. Custodian lambda and instance policies can send to it. SQS queues\nshould be cross-account enabled for sending between accounts.\n\n\n## Tutorial\n\nOur goal in starting out with the Custodian mailer is to install the mailer,\nand run a policy that triggers an email to your inbox.\n\n1. [Install](#developer-install-os-x-el-capitan) the mailer on your laptop (if you are not running as a [Docker container](https://hub.docker.com/r/cloudcustodian/mailer)\n   - or use `pip install c7n-mailer`\n2. In your text editor, create a `mailer.yml` file to hold your mailer config.\n3. In the AWS console, create a new standard SQS queue (quick create is fine).\n   Copy the queue URL to `queue_url` in `mailer.yml`.\n4. In AWS, locate or create a role that has read access to the queue. Grab the\n   role ARN and set it as `role` in `mailer.yml`.\n\nThere are different notification endpoints options, you can combine both.\n\n### Email:\nMake sure your email address is verified in SES, and set it as\n`from_address` in `mailer.yml`. By default SES is in sandbox mode where you\nmust\n[verify](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html)\nevery individual recipient of emails. If need be, make an AWS support ticket to\nbe taken out of SES sandbox mode.\n\nYour `mailer.yml` should now look something like this:\n\n```yaml\nqueue_url: https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test\nrole: arn:aws:iam::123456790:role/c7n-mailer-test\nfrom_address: you@example.com\n```\n\nYou can also set `region` if you are in a region other than `us-east-1` as well as `lambda_tags` to give the mailer tags.\n\n```yaml\nregion: us-east-2\nlambda_tags:\n  owner: ops\n```\n\nNow let's make a Custodian policy to populate your mailer queue. Create a\n`test-policy.yml` file with this content (update `to` and `queue` to match your\nenvironment)\n\n```yaml\n  policies:\n  - name: c7n-mailer-test\n    resource: sqs\n    filters:\n      - \"tag:MailerTest\": absent\n    actions:\n      - type: notify\n        template: default\n        priority_header: '2'\n        subject: testing the c7n mailer\n        to:\n          - you@example.com\n        transport:\n          type: sqs\n          queue: https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test\n```\n\n### DataDog:\nThe standard way to do a DataDog integration is use the\nc7n integration with AWS CloudWatch and use the\n[DataDog integration with AWS](https://docs.datadoghq.com/integrations/amazon_web_services/)\nto collect CloudWatch metrics. The mailer/messenger integration is only\nfor the case you don't want or you can't use AWS CloudWatch.\n\nNote this integration requires the additional dependency of datadog python bindings:\n```\npip install datadog\n```\n\nYour `mailer.yml` should now look something like this:\n\n```yaml\nqueue_url: https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test\nrole: arn:aws:iam::123456790:role/c7n-mailer-test\ndatadog_api_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\ndatadog_application_key: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\n```\n\n(Also set `region` if you are in a region other than `us-east-1`.)\n\nNow let's make a Custodian policy to populate your mailer queue. Create a\n`test-policy.yml`:\n\n```yaml\npolicies:\n  - name: c7n-mailer-test\n    resource: ebs\n    filters:\n     - Attachments: []\n    actions:\n      - type: notify\n        to:\n          - datadog://?metric_name=datadog.metric.name&metric_value_tag=Size\n        transport:\n          type: sqs\n          queue: https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test\n```\n\nThere is a special `to` format that specifies datadog delivery, and includes the datadog configuration via url parameters.\n- metric_name: is the name of the metrics send to DataDog\n- metric_value_tag: by default the metric value send to DataDog is `1` but if you want to use one of the tags returned in the policy you can set it with the attribute `metric_value_tag`, for example in the `test-policy.yml` the value used is the size of the EBS volume. The value must be a number and it's transformed to a float value.\n\n### Slack:\n\nThe Custodian mailer supports Slack messaging as a separate notification mechanism for the SQS transport method. To enable Slack integration, you must specify a Slack token in the `slack_token` field under the `mailer.yml` file.\n\n```yaml\nqueue_url: https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test\nrole: arn:aws:iam::123456790:role/c7n-mailer-test\nslack_token: xoxo-token123\n```\n\nTo enable Slack messaging, several unique fields are evaluated in the policy, as shown in the below example:\n\n```\npolicies:\n  - name: c7n-mailer-test\n    resource: ebs\n    filters:\n     - Attachments: []\n    actions:\n      - type: notify\n        slack_template: slack\n        to:\n          - slack://owners\n          - slack://foo@bar.com\n          - slack://#custodian-test\n          - slack://webhook/#c7n-webhook-test\n          - slack://tag/resource_tag\n          - https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\n        transport:\n          type: sqs\n          queue: https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test\n```\n\nSlack messages support use of a unique template field specified by `slack_template`. This field is unique and usage will not break\nexisting functionality for messages also specifying an email template in the `template` field. This field is optional, however,\nand if not specified, the mailer will use the default value `slack_default`.\n\nSlack integration for the mailer supports several flavors of messaging, listed below. These are not mutually exclusive and any combination of the types can be used, but the preferred method is [incoming webhooks](https://api.slack.com/incoming-webhooks).\n\n| Requires&nbsp;`slack_token` | Key                                                                             | Type   | Notes                                                                                                                                                           |\n|:---------------------------:|:--------------------------------------------------------------------------------|:-------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|             No              | `https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX` | string | **(PREFERRED)** Send to an [incoming webhook](https://api.slack.com/incoming-webhooks) (the channel is defined in the webhook)                                  |\n|             Yes             | `slack://owners`                                                                | string | Send to the recipient list generated within email delivery logic                                                                                                |\n|             Yes             | `slack://foo@bar.com`                                                           | string | Send to the recipient specified by email address foo@bar.com                                                                                                    |\n|             Yes             | `slack://#custodian-test`                                                       | string | Send to the Slack channel indicated in string, i.e. #custodian-test                                                                                             |\n|             No              | `slack://webhook/#c7n-webhook-test`                                             | string | **(DEPRECATED)** Send to a Slack webhook; appended with the target channel. **IMPORTANT**: *This requires a `slack_webhook` value defined in the `mailer.yml`.* |\n|             Yes             | `slack://tag/resource-tag`                                                      | string | Send to target found in resource tag. Example of value in tag: https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX                    |\n\nSlack delivery can also be set via a resource's tag name. For example, using \"slack://tag/slack_channel\" will look for a tag name of 'slack_channel', and if matched on a resource will deliver the message to the value of that resource's tag:\n\n`slack_channel:https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX`\n\nDelivery via tag has been tested with webhooks but should support all delivery methods.\n\n### Splunk HTTP Event Collector (HEC)\n\nThe Custodian mailer supports delivery to the HTTP Event Collector (HEC) endpoint of a Splunk instance as a separate notification mechanism for the SQS transport method. To enable Splunk HEC integration, you must specify the URL to the HEC endpoint as well as a valid username and token:\n\n```yaml\nqueue_url: https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test\nrole: arn:aws:iam::123456790:role/c7n-mailer-test\nsplunk_hec_url: https://http-inputs-foo.splunkcloud.com/services/collector/event\nsplunk_hec_token: 268b3cc2-f32e-4a19-a1e8-aee08d86ca7f\n```\n\nTo send events for a policy to the Splunk HEC endpoint, add a ``to`` address notify action specifying the name of the Splunk index to send events to in the form ``splunkhec://indexName``:\n\n```\npolicies:\n  - name: c7n-mailer-test\n    resource: ebs\n    filters:\n     - Attachments: []\n    actions:\n      - type: notify\n        to:\n          - splunkhec://myIndexName\n        transport:\n          type: sqs\n          queue: https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test\n```\n\nThe ``splunkhec://indexName`` address type can be combined in the same notify action with other destination types (e.g. email, Slack, DataDog, etc).\n\n### Now run:\n\n```\nc7n-mailer --config mailer.yml --update-lambda && custodian run -c test-policy.yml -s .\n```\n\nNote: You can set the profile via environment variable e.g. `export AWS_DEFAULT_PROFILE=foo`\n\nYou should see output similar to the following:\n\n```\n(env) $ c7n-mailer --config mailer.yml --update-lambda && custodian run -c test-policy.yml -s .\nDEBUG:custodian.lambda:Created custodian lambda archive size: 3.01mb\n2017-01-12 07:55:16,227: custodian.policy:INFO Running policy c7n-mailer-test resource: sqs region:default c7n:0.8.22.0\n2017-01-12 07:55:16,229: custodian.policy:INFO policy: c7n-mailer-test resource:sqs has count:1 time:0.00\n2017-01-12 07:55:18,017: custodian.actions:INFO sent message:dead-beef policy:c7n-mailer-test template:default count:1\n2017-01-12 07:55:18,017: custodian.policy:INFO policy: c7n-mailer-test action: notify resources: 1 execution_time: 1.79\n(env) $\n```\n\nCheck the AWS console for a new Lambda named `cloud-custodian-mailer`. The\nmailer runs every five minutes, so wait a bit and then look for an email in\nyour inbox. If it doesn't appear, look in the lambda's logs for debugging\ninformation. If it does, congratulations! You are off and running with the\nCustodian mailer.\n\n\n## Usage & Configuration\n\nOnce [installed](#developer-install-os-x-el-capitan) you should have a\n`c7n-mailer` executable on your path:\naws\n```\n(env) $ c7n-mailer\nusage: c7n-mailer [-h] -c CONFIG\nc7n-mailer: error: argument -c/--config is required\n(env) $\n```\n\nFundamentally what `c7n-mailer` does is deploy a Lambda (using\n[Mu](http://cloudcustodian.io/docs/policy/mu.html)) based on\nconfiguration you specify in a YAML file.  Here is [the\nschema](./c7n_mailer/cli.py#L11-L41) to which the file must conform,\nand here is a description of the options:\n\n| Required? | Key             | Type             | Notes                                                                                                                                                                               |\n|:---------:|:----------------|:-----------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| &#x2705;  | `queue_url`     | string           | the queue to listen to for messages                                                                                                                                                 |\n|           | `from_address`  | string           | default from address                                                                                                                                                                |\n|           | `contact_tags`  | array of strings | tags that we should look at for address information                                                                                                                                 |\n\n#### Standard Lambda Function Config\n\n| Required? | Key                  | Type             |\n|:---------:|:---------------------|:-----------------|\n|           | `dead_letter_config` | object           |\n|           | `memory`             | integer          |\n|           | `region`             | string           |\n| &#x2705;  | `role`               | string           |\n|           | `runtime`            | string           |\n|           | `security_groups`    | array of strings |\n|           | `subnets`            | array of strings |\n|           | `timeout`            | integer          |\n\n#### Standard Azure Functions Config\n\n| Required? | Key                   | Type   | Notes                                                                                  |\n|:---------:|:----------------------|:-------|:---------------------------------------------------------------------------------------|\n|           | `function_properties` | object | Contains `appInsights`, `storageAccount` and `servicePlan` objects                     |\n|           | `appInsights`         | object | Contains `name`, `location` and `resourceGroupName` properties                       |\n|           | `storageAccount`      | object | Contains `name`, `location` and `resourceGroupName` properties                       |\n|           | `servicePlan`         | object | Contains `name`, `location`, `resourceGroupName`, `skuTier` and `skuName` properties |\n|           | `name`                | string |                                                                                        |\n|           | `location`            | string | Default: `west us 2`                                                                   |\n|           | `resourceGroupName`   | string | Default `cloud-custodian`                                                              |\n|           | `skuTier`             | string | Default: `Basic`                                                                       |\n|           | `skuName`             | string | Default: `B1`                                                                          |\n\n\n\n\n#### Mailer Infrastructure Config\n\n| Required? | Key                         | Type    | Notes                                                                                                                                                                                              |\n|:---------:|:----------------------------|:--------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|           | `cache_engine`              | string  | cache engine; either sqlite or redis                                                                                                                                                               |\n|           | `cross_accounts`            | object  | account to assume back into for sending to SNS topics                                                                                                                                              |\n|           | `debug`                     | boolean | debug on/off                                                                                                                                                                                       |\n|           | `ldap_bind_dn`              | string  | eg: ou=people,dc=example,dc=com                                                                                                                                                                    |\n|           | `ldap_bind_user`            | string  | eg: FOO\\\\BAR                                                                                                                                                                                       |\n|           | `ldap_bind_password`        | string  | ldap bind password                                                                                                                                                                                 |\n|           | `ldap_bind_password_in_kms` | boolean | defaults to true, most people (except capone) want to set this to false. If set to true, make sure `ldap_bind_password` contains your KMS encrypted ldap bind password as a base64-encoded string. |\n|           | `ldap_email_attribute`      | string  |                                                                                                                                                                                                    |\n|           | `ldap_email_key`            | string  | eg 'mail'                                                                                                                                                                                          |\n|           | `ldap_manager_attribute`    | string  | eg 'manager'                                                                                                                                                                                       |\n|           | `ldap_uid_attribute`        | string  |                                                                                                                                                                                                    |\n|           | `ldap_uid_regex`            | string  |                                                                                                                                                                                                    |\n|           | `ldap_uid_tags`             | string  |                                                                                                                                                                                                    |\n|           | `ldap_uri`                  | string  | eg 'ldaps://example.com:636'                                                                                                                                                                       |\n|           | `redis_host`                | string  | redis host if cache_engine == redis                                                                                                                                                                |\n|           | `redis_port`                | integer | redis port, default: 6369                                                                                                                                                                          |\n|           | `ses_region`                | string  | AWS region that handles SES API calls                                                                                                                                                              |\n\n#### SMTP Config\n\n| Required? | Key             | Type             | Notes                                                                                                                                                                               |\n|:---------:|:----------------|:-----------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|           | `smtp_server`   | string           | to configure your lambda role to talk to smtpd in your private vpc, see [here](https://docs.aws.amazon.com/lambda/latest/dg/vpc.html) |                                             |\n|           | `smtp_port`     | integer          | smtp port (default is 25)                                                                                                                                                           |\n|           | `smtp_ssl`      | boolean          | this defaults to True                                                                                                                                                               |\n|           | `smtp_username` | string           |                                                                                                                                                                                     |\n|           | `smtp_password` | secured string   |                                                                                                                                                                                     |\n\nIf `smtp_server` is unset, `c7n_mailer` will use AWS SES or Azure SendGrid.\n\n#### DataDog Config\n\n| Required? | Key                       | Type   | Notes                    |\n|:---------:|:--------------------------|:-------|:-------------------------|\n|           | `datadog_api_key`         | string | DataDog API key.         |\n|           | `datadog_application_key` | string | Datadog application key. |\n\nThese fields are not necessary if c7n_mailer is run in a instance/lambda/etc with the DataDog agent.\n\n#### Slack Config\n\n| Required? | Key           | Type   | Notes           |\n|:---------:|:--------------|:-------|:----------------|\n|           | `slack_token` | string | Slack API token |\n\n#### SendGrid Config\n\n| Required? | Key                | Type           | Notes              |\n|:---------:|:-------------------|:---------------|:-------------------|\n|           | `sendgrid_api_key` | secured string | SendGrid API token |\n\n\n#### Splunk HEC Config\n\nThe following configuration items are *all* optional. The ones marked \"Required for Splunk\" are only required if you're sending notifications to ``splunkhec://`` destinations.\n\n| Required for Splunk? | Key                     | Type             | Notes                                                                                                                              |\n|:--------------------:|:------------------------|:-----------------|:-----------------------------------------------------------------------------------------------------------------------------------|\n|       &#x2705;       | `splunk_hec_url`        | string           | URL to your Splunk HTTP Event Collector endpoint                                                                                   |\n|       &#x2705;       | `splunk_hec_token`      | string           | Splunk HEC authentication token for specified username                                                                             |\n|                      | `splunk_remove_paths`   | array of strings | List of [RFC6901](http://tools.ietf.org/html/rfc6901) JSON Pointers to remove from the event, if present, before sending to Splunk |\n|                      | `splunk_actions_list`   | boolean          | If true, add an `actions` list to the top-level message sent to Splunk, containing the names of all non-notify actions taken       |\n|                      | `splunk_max_attempts`   | integer          | Maximum number of times to try POSTing data to Splunk HEC (default 4)                                                              |\n|                      | `splunk_hec_max_length` | integer          | Maximum data length that Splunk HEC accepts; an error will be logged for any message sent over this length                         |\n\n#### SDK Config\n\n| Required? | Key           | Type   | Notes |\n|:---------:|:--------------|:-------|:------|\n|           | `http_proxy`  | string |       |\n|           | `https_proxy` | string |       |\n|           | `profile`     | string |       |\n\n\n#### Secured String\n\nIn order to ensure sensitive data is not stored plaintext in a policy, `c7n-mailer` supports secured\nstrings. You can treat it as a regular `string` or use `secured string` features.\n\n##### AWS\n\nYou can use KMS to encrypt your secrets and use encrypted secret in mailer policy.\nCustodian tries to decrypt the string using KMS, if it fails c7n treats it as a plaintext secret.\n\n```yaml\n    plaintext_secret: <raw_secret>\n    secured_string: <encrypted_secret>\n```\n\n##### Azure\n\nYou can store your secrets in Azure Key Vault secrets and reference them from the policy.\n\n```yaml\n    plaintext_secret: <raw_secret>\n    secured_string:\n        type: azure.keyvault\n        secret: https://your-vault.vault.azure.net/secrets/your-secret\n```\n\nNote: `secrets.get` permission on the KeyVault for the Service Principal is required.\n\n## Configuring a policy to send email\n\nOutbound email can be added to any policy by including the `notify` action.\n\n```yaml\n\npolicies:\n  - name: bad-apples\n    resource: asg\n    filters:\n     - \"tag:ASV\": absent\n    actions:\n      - type: notify\n        template: default\n        template_format: 'html'\n        priority_header: '1'\n        subject: fix your tags\n        to:\n          - resource-owner\n        owner_absent_contact:\n          - foo@example.com\n        transport:\n          type: sqs\n          queue: https://sqs.us-east-1.amazonaws.com/80101010101/cloud-custodian-message-relay\n```\n\nSo breaking it down, you add an action of type `notify`. You can specify a\ntemplate that's used to format the email; customizing templates is described\n[below](#writing-an-email-template).\n\nThe `to` list specifies the intended recipient for the email. You can specify\neither an email address, an SNS topic, a Datadog Metric, or a special value. The special values\nare either\n\n- `resource-owner`, in which case the email will be sent to the listed\n  `OwnerContact` tag on the resource that matched the policy, or\n- `event-owner` for push-based/realtime policies that will send to the user\n  that was responsible for the underlying event.\n- `priority_header` to indicate the importance of an email with [headers](https://www.chilkatsoft.com/p/p_471.asp). Different emails clients will display stars, exclamation points or flags depending on the value. Should be an string from 1 to 5.\n\nBoth of these special values are best effort, i.e., if no `OwnerContact` tag is\nspecified then `resource-owner` email will not be delivered, and in the case of\n`event-owner` an instance role or system account will not result in an email.\n\nThe optional `owner_absent_contact` list specifies email addresses to notify only if\nthe `resource-owner` special option was unable to find any matching owner contact\ntags.\n\nIn addition, you may choose to use a custom tag instead of the default `OwnerContact`.  In order to configure this, the mailer.yaml must be modified to include the contact_tags and the custom tag.  The `resource-owner` will now email the custom tag instead of `OwnerContact`. \n\n```yaml\ncontact_tags:\n  - \"custom_tag\"\n```\n\n\nFor reference purposes, the JSON Schema of the `notify` action:\n\n```json\n{\n  \"type\": \"object\",\n  \"required\": [\"type\", \"transport\", \"to\"],\n  \"properties\": {\n    \"type\": {\"enum\": [\"notify\"]},\n    \"to\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n    \"owner_absent_contact\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n    \"subject\": {\"type\": \"string\"},\n    \"priority_header\": {\"type\": \"string\"},\n    \"template\": {\"type\": \"string\"},\n    \"transport\": {\n      \"type\": \"object\",\n      \"required\": [\"type\", \"queue\"],\n      \"properties\": {\n        \"queue\": {\"type\": \"string\"},\n        \"region\": {\"type\": \"string\"},\n        \"type\": {\"enum\": [\"sqs\"]}\n      }\n    }\n  }\n}\n```\n\n## Using on Azure\n\nRequires:\n\n- `c7n_azure` package.  See [Installing Azure Plugin](https://cloudcustodian.io/docs/azure/gettingstarted.html#azure-install-cc)\n- SendGrid account. See [Using SendGrid with Azure](https://docs.microsoft.com/en-us/azure/sendgrid-dotnet-how-to-send-email)\n- [Azure Storage Queue](https://azure.microsoft.com/en-us/services/storage/queues/)\n\nThe mailer supports an Azure Storage Queue transport and SendGrid delivery on Azure.\nConfiguration for this scenario requires only minor changes from AWS deployments.\n\nYou will need to grant `Storage Queue Data Contributor` role on the Queue for the identity\nmailer is running under.\n\nThe notify action in your policy will reflect transport type `asq` with the URL\nto an Azure Storage Queue.  For example:\n\n```yaml\npolicies:\n  - name: azure-notify\n    resource: azure.resourcegroup\n    description: send a message to a mailer instance\n    actions:\n      - type: notify\n        template: default\n        priority_header: '2'\n        subject: Hello from C7N Mailer\n        to:\n          - you@youremail.com\n        transport:\n          type: asq\n          queue: https://storageaccount.queue.core.windows.net/queuename\n```\n\nIn your mailer configuration, you'll need to provide your SendGrid API key as well as\nprefix your queue URL with `asq://` to let mailer know what type of queue it is:\n\n```yaml\nqueue_url: asq://storageaccount.queue.core.windows.net/queuename\nfrom_address: you@youremail.com\nsendgrid_api_key: SENDGRID_API_KEY\n```\n\nThe mailer will transmit all messages found on the queue on each execution, and will retry\nsending 3 times in the event of a failure calling SendGrid.  After the retries the queue\nmessage will be discarded.\n\nIn addition, SendGrid delivery on Azure supports using resource tags to send emails. For example, in the `to` field:\n\n```yaml\nto:\n  - tag:OwnerEmail\n```\n\nThis will find the email address associated with the resource's `OwnerEmail` tag, and send an email to the specified address.\nIf no tag is found, or the associated email address is invalid, no email will be sent. \n\n#### Deploying Azure Functions\n\nThe `--update-lambda` CLI option will also deploy Azure Functions if you have an Azure\nmailer configuration.\n\n`c7n-mailer --config mailer.yml --update-lambda`\n\nwhere a simple `mailer.yml` using Consumption functions may look like:\n\n```yaml\nqueue_url: asq://storage.queue.core.windows.net/custodian\nfrom_address: foo@mail.com\nsendgrid_api_key: <key>\nfunction_properties:\n  servicePlan:\n    name: 'testmailer1'\n```\n\n## Writing an email template\n\nTemplates are authored in [jinja2](http://jinja.pocoo.org/docs/dev/templates/).\nDrop a file with the `.j2` extension into the a templates directory, and send a pull request to this\nrepo. You can then reference it in the `notify` action as the `template`\nvariable by file name minus extension. Templates ending with `.html.j2` are\nsent as HTML-formatted emails, all others are sent as plain text.\n\nYou can use `-t` or `--templates` cli argument to pass custom folder with your templates.\n\nThe following variables are available when rendering templates:\n\n| variable          | value                                                        |\n|:------------------|:-------------------------------------------------------------|\n| `recipient`       | email address                                                |\n| `resources`       | list of resources that matched the policy filters            |\n| `event`           | for CWE-push-based lambda policies, the event that triggered |\n| `action`          | `notify` action that generated this SQS message              |\n| `policy`          | policy that triggered this notify action                     |\n| `account`         | short name of the aws account                                |\n| `region`          | region the policy was executing in                           |\n| `execution_start` | The time policy started executing                            |\n\nThe following extra global functions are available:\n\n| signature                                                                    | behavior                                                                                          |\n|:-----------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------|\n| `format_struct(struct)`                                                      | pretty print a json structure                                                                     |\n| `resource_tag(resource, key)`                                                | retrieve a tag value from a resource or return an empty string, aliased as get_resource_tag_value |\n| `format_resource(resource, resource_type)`                                   | renders a one line summary of a resource                                                          |\n| `date_time_format(utc_str, tz_str='US/Eastern', format='%Y %b %d %H:%M %Z')` | customize rendering of an utc datetime string                                                     |\n| `search(expression, value)`                                                  | jmespath search value using expression                                                            |\n| `yaml_safe(value)`                                                           | yaml dumper                                                                                       |\n\nThe following extra jinja filters are available:\n\n| filter                                                                                         | behavior                                                                                                                                                                                      |\n|:-----------------------------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| <code>utc_string&#124;date_time_format(tz_str='US/Pacific', format='%Y %b %d %H:%M %Z')</code> | pretty [format](https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior) the date / time                                                                                   |\n| <code>30&#124;get_date_time_delta</code>                                                       | Convert a time [delta](https://docs.python.org/2/library/datetime.html#datetime.timedelta) like '30' days in the future, to a datetime string. You can also use negative values for the past. |\n\n\n## Developer Install (OS X El Capitan)\n\nClone the repository:\n```\n$ git clone https://github.com/cloud-custodian/cloud-custodian\n```\nInstall dependencies (with virtualenv):\n```\n$ virtualenv c7n_mailer\n$ source c7n_mailer/bin/activate\n$ cd tools/c7n_mailer\n$ pip install -r requirements.txt\n```\nInstall the extensions:\n```\npython setup.py develop\n```\n\n## Testing Templates and Recipients\n\nA ``c7n-mailer-replay`` entrypoint is provided to assist in testing email notifications\nand templates. This script operates on an actual SQS message from cloud-custodian itself,\nwhich you can either retrieve from the SQS queue or replicate locally. By default it expects\nthe message file to be base64-encoded, gzipped JSON, just like c7n sends to SQS. With the\n``-p`` | ``--plain`` argument, it will expect the message file to contain plain JSON.\n\n``c7n-mailer-replay`` has three main modes of operation:\n\n* With no additional arguments, it will render the template specified by the policy the\n  message is for, and actually send mail from the local machine as ``c7n-mailer`` would.\n  This only works with SES, not SMTP.\n* With the ``-T`` | ``--template-print`` argument, it will log the email addresses that would\n  receive mail, and print the rendered message body template to STDOUT.\n* With the ``-d`` | ``--dry-run`` argument, it will print the actual email body (including headers)\n  that would be sent, for each message that would be sent, to STDOUT.\n\n#### Testing Templates for Azure\n\nThe ``c7n-mailer-replay`` entrypoint can be used to test templates for Azure with either of the arguments:\n* ``-T`` | ``--template-print`` \n* ``-d`` | ``--dry-run`` \n\nRunning ``c7n-mailer-replay`` without either of these arguments will throw an error as it will attempt\nto authorize with AWS. \n\nThe following is an example for retrieving a sample message to test against templates:\n\n* Run a policy with the notify action, providing the name of the template to test, to populate the queue.\n\n* Using the azure cli, save the message locally: \n```\n$ az storage message get --queue-name <queuename> --account-name <storageaccountname> --query '[].content' > test_message.gz\n```\n* The example message can be provided to ``c7n-mailer-replay`` by running:\n\n```\n$ c7n-mailer-replay test_message.gz -T --config mailer.yml\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://cloudcustodian.io", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "c7n-mailer", "package_url": "https://pypi.org/project/c7n-mailer/", "platform": "", "project_url": "https://pypi.org/project/c7n-mailer/", "project_urls": {"Homepage": "https://cloudcustodian.io"}, "release_url": "https://pypi.org/project/c7n-mailer/0.6.0/", "requires_dist": ["attrs (==19.3.0)", "boto3 (==1.12.47)", "botocore (==1.15.47)", "certifi (==2020.4.5.1)", "chardet (==3.0.4)", "datadog (==0.34.1)", "decorator (==4.4.2)", "docutils (==0.15.2)", "idna (==2.9)", "importlib-metadata (==1.6.0)", "jinja2 (==2.11.2)", "jmespath (==0.9.5)", "jsonschema (==3.2.0)", "ldap3 (==2.7)", "markupsafe (==1.1.1)", "pyasn1 (==0.4.8)", "pyrsistent (==0.16.0)", "python-dateutil (==2.8.1)", "python-http-client (==3.2.7)", "pyyaml (==5.3.1)", "redis (==3.4.1)", "requests (==2.23.0)", "s3transfer (==0.3.3)", "sendgrid (==6.2.2)", "six (==1.14.0)", "urllib3 (==1.25.9)", "zipp (==3.1.0)"], "requires_python": ">=3.6,<4.0", "summary": "Cloud Custodian - Reference Mailer", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>c7n-mailer: Custodian Mailer</h1>\n<p>A mailer implementation for Custodian. Outbound mail delivery is still somewhat\norganization-specific, so this at the moment serves primarily as an example\nimplementation.</p>\n<blockquote>\n<p>The Cloud Custodian Mailer can now be easily run in a Docker container. Click <a href=\"https://hub.docker.com/r/cloudcustodian/mailer\" rel=\"nofollow\">here</a> for details.</p>\n</blockquote>\n<h2>Message Relay</h2>\n<p>Custodian Mailer subscribes to an SQS queue, looks up users, and sends email\nvia SES and/or send notification to DataDog. Custodian lambda and instance policies can send to it. SQS queues\nshould be cross-account enabled for sending between accounts.</p>\n<h2>Tutorial</h2>\n<p>Our goal in starting out with the Custodian mailer is to install the mailer,\nand run a policy that triggers an email to your inbox.</p>\n<ol>\n<li><a href=\"#developer-install-os-x-el-capitan\" rel=\"nofollow\">Install</a> the mailer on your laptop (if you are not running as a <a href=\"https://hub.docker.com/r/cloudcustodian/mailer\" rel=\"nofollow\">Docker container</a>\n<ul>\n<li>or use <code>pip install c7n-mailer</code></li>\n</ul>\n</li>\n<li>In your text editor, create a <code>mailer.yml</code> file to hold your mailer config.</li>\n<li>In the AWS console, create a new standard SQS queue (quick create is fine).\nCopy the queue URL to <code>queue_url</code> in <code>mailer.yml</code>.</li>\n<li>In AWS, locate or create a role that has read access to the queue. Grab the\nrole ARN and set it as <code>role</code> in <code>mailer.yml</code>.</li>\n</ol>\n<p>There are different notification endpoints options, you can combine both.</p>\n<h3>Email:</h3>\n<p>Make sure your email address is verified in SES, and set it as\n<code>from_address</code> in <code>mailer.yml</code>. By default SES is in sandbox mode where you\nmust\n<a href=\"http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html\" rel=\"nofollow\">verify</a>\nevery individual recipient of emails. If need be, make an AWS support ticket to\nbe taken out of SES sandbox mode.</p>\n<p>Your <code>mailer.yml</code> should now look something like this:</p>\n<pre><span class=\"nt\">queue_url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test</span>\n<span class=\"nt\">role</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">arn:aws:iam::123456790:role/c7n-mailer-test</span>\n<span class=\"nt\">from_address</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">you@example.com</span>\n</pre>\n<p>You can also set <code>region</code> if you are in a region other than <code>us-east-1</code> as well as <code>lambda_tags</code> to give the mailer tags.</p>\n<pre><span class=\"nt\">region</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">us-east-2</span>\n<span class=\"nt\">lambda_tags</span><span class=\"p\">:</span>\n  <span class=\"nt\">owner</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ops</span>\n</pre>\n<p>Now let's make a Custodian policy to populate your mailer queue. Create a\n<code>test-policy.yml</code> file with this content (update <code>to</code> and <code>queue</code> to match your\nenvironment)</p>\n<pre>  <span class=\"nt\">policies</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">c7n-mailer-test</span>\n    <span class=\"nt\">resource</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">sqs</span>\n    <span class=\"nt\">filters</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"tag:MailerTest\"</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">absent</span>\n    <span class=\"nt\">actions</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">notify</span>\n        <span class=\"nt\">template</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">default</span>\n        <span class=\"nt\">priority_header</span><span class=\"p\">:</span> <span class=\"s\">'2'</span>\n        <span class=\"nt\">subject</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">testing the c7n mailer</span>\n        <span class=\"nt\">to</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">you@example.com</span>\n        <span class=\"nt\">transport</span><span class=\"p\">:</span>\n          <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">sqs</span>\n          <span class=\"nt\">queue</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test</span>\n</pre>\n<h3>DataDog:</h3>\n<p>The standard way to do a DataDog integration is use the\nc7n integration with AWS CloudWatch and use the\n<a href=\"https://docs.datadoghq.com/integrations/amazon_web_services/\" rel=\"nofollow\">DataDog integration with AWS</a>\nto collect CloudWatch metrics. The mailer/messenger integration is only\nfor the case you don't want or you can't use AWS CloudWatch.</p>\n<p>Note this integration requires the additional dependency of datadog python bindings:</p>\n<pre><code>pip install datadog\n</code></pre>\n<p>Your <code>mailer.yml</code> should now look something like this:</p>\n<pre><span class=\"nt\">queue_url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test</span>\n<span class=\"nt\">role</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">arn:aws:iam::123456790:role/c7n-mailer-test</span>\n<span class=\"nt\">datadog_api_key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">XXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span>\n<span class=\"nt\">datadog_application_key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY</span>\n</pre>\n<p>(Also set <code>region</code> if you are in a region other than <code>us-east-1</code>.)</p>\n<p>Now let's make a Custodian policy to populate your mailer queue. Create a\n<code>test-policy.yml</code>:</p>\n<pre><span class=\"nt\">policies</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">c7n-mailer-test</span>\n    <span class=\"nt\">resource</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ebs</span>\n    <span class=\"nt\">filters</span><span class=\"p\">:</span>\n     <span class=\"p p-Indicator\">-</span> <span class=\"nt\">Attachments</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[]</span>\n    <span class=\"nt\">actions</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">notify</span>\n        <span class=\"nt\">to</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">datadog://?metric_name=datadog.metric.name&amp;metric_value_tag=Size</span>\n        <span class=\"nt\">transport</span><span class=\"p\">:</span>\n          <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">sqs</span>\n          <span class=\"nt\">queue</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test</span>\n</pre>\n<p>There is a special <code>to</code> format that specifies datadog delivery, and includes the datadog configuration via url parameters.</p>\n<ul>\n<li>metric_name: is the name of the metrics send to DataDog</li>\n<li>metric_value_tag: by default the metric value send to DataDog is <code>1</code> but if you want to use one of the tags returned in the policy you can set it with the attribute <code>metric_value_tag</code>, for example in the <code>test-policy.yml</code> the value used is the size of the EBS volume. The value must be a number and it's transformed to a float value.</li>\n</ul>\n<h3>Slack:</h3>\n<p>The Custodian mailer supports Slack messaging as a separate notification mechanism for the SQS transport method. To enable Slack integration, you must specify a Slack token in the <code>slack_token</code> field under the <code>mailer.yml</code> file.</p>\n<pre><span class=\"nt\">queue_url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test</span>\n<span class=\"nt\">role</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">arn:aws:iam::123456790:role/c7n-mailer-test</span>\n<span class=\"nt\">slack_token</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">xoxo-token123</span>\n</pre>\n<p>To enable Slack messaging, several unique fields are evaluated in the policy, as shown in the below example:</p>\n<pre><code>policies:\n  - name: c7n-mailer-test\n    resource: ebs\n    filters:\n     - Attachments: []\n    actions:\n      - type: notify\n        slack_template: slack\n        to:\n          - slack://owners\n          - slack://foo@bar.com\n          - slack://#custodian-test\n          - slack://webhook/#c7n-webhook-test\n          - slack://tag/resource_tag\n          - https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\n        transport:\n          type: sqs\n          queue: https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test\n</code></pre>\n<p>Slack messages support use of a unique template field specified by <code>slack_template</code>. This field is unique and usage will not break\nexisting functionality for messages also specifying an email template in the <code>template</code> field. This field is optional, however,\nand if not specified, the mailer will use the default value <code>slack_default</code>.</p>\n<p>Slack integration for the mailer supports several flavors of messaging, listed below. These are not mutually exclusive and any combination of the types can be used, but the preferred method is <a href=\"https://api.slack.com/incoming-webhooks\" rel=\"nofollow\">incoming webhooks</a>.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Requires\u00a0<code>slack_token</code></th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">No</td>\n<td align=\"left\"><code>https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"><strong>(PREFERRED)</strong> Send to an <a href=\"https://api.slack.com/incoming-webhooks\" rel=\"nofollow\">incoming webhook</a> (the channel is defined in the webhook)</td>\n</tr>\n<tr>\n<td align=\"center\">Yes</td>\n<td align=\"left\"><code>slack://owners</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Send to the recipient list generated within email delivery logic</td>\n</tr>\n<tr>\n<td align=\"center\">Yes</td>\n<td align=\"left\"><code>slack://foo@bar.com</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Send to the recipient specified by email address <a href=\"mailto:foo@bar.com\">foo@bar.com</a></td>\n</tr>\n<tr>\n<td align=\"center\">Yes</td>\n<td align=\"left\"><code>slack://#custodian-test</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Send to the Slack channel indicated in string, i.e. #custodian-test</td>\n</tr>\n<tr>\n<td align=\"center\">No</td>\n<td align=\"left\"><code>slack://webhook/#c7n-webhook-test</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"><strong>(DEPRECATED)</strong> Send to a Slack webhook; appended with the target channel. <strong>IMPORTANT</strong>: <em>This requires a <code>slack_webhook</code> value defined in the <code>mailer.yml</code>.</em></td>\n</tr>\n<tr>\n<td align=\"center\">Yes</td>\n<td align=\"left\"><code>slack://tag/resource-tag</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Send to target found in resource tag. Example of value in tag: <a href=\"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\" rel=\"nofollow\">https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX</a></td>\n</tr></tbody></table>\n<p>Slack delivery can also be set via a resource's tag name. For example, using \"slack://tag/slack_channel\" will look for a tag name of 'slack_channel', and if matched on a resource will deliver the message to the value of that resource's tag:</p>\n<p><code>slack_channel:https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX</code></p>\n<p>Delivery via tag has been tested with webhooks but should support all delivery methods.</p>\n<h3>Splunk HTTP Event Collector (HEC)</h3>\n<p>The Custodian mailer supports delivery to the HTTP Event Collector (HEC) endpoint of a Splunk instance as a separate notification mechanism for the SQS transport method. To enable Splunk HEC integration, you must specify the URL to the HEC endpoint as well as a valid username and token:</p>\n<pre><span class=\"nt\">queue_url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test</span>\n<span class=\"nt\">role</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">arn:aws:iam::123456790:role/c7n-mailer-test</span>\n<span class=\"nt\">splunk_hec_url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://http-inputs-foo.splunkcloud.com/services/collector/event</span>\n<span class=\"nt\">splunk_hec_token</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">268b3cc2-f32e-4a19-a1e8-aee08d86ca7f</span>\n</pre>\n<p>To send events for a policy to the Splunk HEC endpoint, add a <code>to</code> address notify action specifying the name of the Splunk index to send events to in the form <code>splunkhec://indexName</code>:</p>\n<pre><code>policies:\n  - name: c7n-mailer-test\n    resource: ebs\n    filters:\n     - Attachments: []\n    actions:\n      - type: notify\n        to:\n          - splunkhec://myIndexName\n        transport:\n          type: sqs\n          queue: https://sqs.us-east-1.amazonaws.com/1234567890/c7n-mailer-test\n</code></pre>\n<p>The <code>splunkhec://indexName</code> address type can be combined in the same notify action with other destination types (e.g. email, Slack, DataDog, etc).</p>\n<h3>Now run:</h3>\n<pre><code>c7n-mailer --config mailer.yml --update-lambda &amp;&amp; custodian run -c test-policy.yml -s .\n</code></pre>\n<p>Note: You can set the profile via environment variable e.g. <code>export AWS_DEFAULT_PROFILE=foo</code></p>\n<p>You should see output similar to the following:</p>\n<pre><code>(env) $ c7n-mailer --config mailer.yml --update-lambda &amp;&amp; custodian run -c test-policy.yml -s .\nDEBUG:custodian.lambda:Created custodian lambda archive size: 3.01mb\n2017-01-12 07:55:16,227: custodian.policy:INFO Running policy c7n-mailer-test resource: sqs region:default c7n:0.8.22.0\n2017-01-12 07:55:16,229: custodian.policy:INFO policy: c7n-mailer-test resource:sqs has count:1 time:0.00\n2017-01-12 07:55:18,017: custodian.actions:INFO sent message:dead-beef policy:c7n-mailer-test template:default count:1\n2017-01-12 07:55:18,017: custodian.policy:INFO policy: c7n-mailer-test action: notify resources: 1 execution_time: 1.79\n(env) $\n</code></pre>\n<p>Check the AWS console for a new Lambda named <code>cloud-custodian-mailer</code>. The\nmailer runs every five minutes, so wait a bit and then look for an email in\nyour inbox. If it doesn't appear, look in the lambda's logs for debugging\ninformation. If it does, congratulations! You are off and running with the\nCustodian mailer.</p>\n<h2>Usage &amp; Configuration</h2>\n<p>Once <a href=\"#developer-install-os-x-el-capitan\" rel=\"nofollow\">installed</a> you should have a\n<code>c7n-mailer</code> executable on your path:\naws</p>\n<pre><code>(env) $ c7n-mailer\nusage: c7n-mailer [-h] -c CONFIG\nc7n-mailer: error: argument -c/--config is required\n(env) $\n</code></pre>\n<p>Fundamentally what <code>c7n-mailer</code> does is deploy a Lambda (using\n<a href=\"http://cloudcustodian.io/docs/policy/mu.html\" rel=\"nofollow\">Mu</a>) based on\nconfiguration you specify in a YAML file.  Here is <a href=\"./c7n_mailer/cli.py#L11-L41\" rel=\"nofollow\">the\nschema</a> to which the file must conform,\nand here is a description of the options:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Required?</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">\u2705</td>\n<td align=\"left\"><code>queue_url</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">the queue to listen to for messages</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>from_address</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">default from address</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>contact_tags</code></td>\n<td align=\"left\">array of strings</td>\n<td align=\"left\">tags that we should look at for address information</td>\n</tr></tbody></table>\n<h4>Standard Lambda Function Config</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Required?</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>dead_letter_config</code></td>\n<td align=\"left\">object</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>memory</code></td>\n<td align=\"left\">integer</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>region</code></td>\n<td align=\"left\">string</td>\n</tr>\n<tr>\n<td align=\"center\">\u2705</td>\n<td align=\"left\"><code>role</code></td>\n<td align=\"left\">string</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>runtime</code></td>\n<td align=\"left\">string</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>security_groups</code></td>\n<td align=\"left\">array of strings</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>subnets</code></td>\n<td align=\"left\">array of strings</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>timeout</code></td>\n<td align=\"left\">integer</td>\n</tr></tbody></table>\n<h4>Standard Azure Functions Config</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Required?</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>function_properties</code></td>\n<td align=\"left\">object</td>\n<td align=\"left\">Contains <code>appInsights</code>, <code>storageAccount</code> and <code>servicePlan</code> objects</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>appInsights</code></td>\n<td align=\"left\">object</td>\n<td align=\"left\">Contains <code>name</code>, <code>location</code> and <code>resourceGroupName</code> properties</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>storageAccount</code></td>\n<td align=\"left\">object</td>\n<td align=\"left\">Contains <code>name</code>, <code>location</code> and <code>resourceGroupName</code> properties</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>servicePlan</code></td>\n<td align=\"left\">object</td>\n<td align=\"left\">Contains <code>name</code>, <code>location</code>, <code>resourceGroupName</code>, <code>skuTier</code> and <code>skuName</code> properties</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>name</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>location</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Default: <code>west us 2</code></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>resourceGroupName</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Default <code>cloud-custodian</code></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>skuTier</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Default: <code>Basic</code></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>skuName</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Default: <code>B1</code></td>\n</tr></tbody></table>\n<h4>Mailer Infrastructure Config</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Required?</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>cache_engine</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">cache engine; either sqlite or redis</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>cross_accounts</code></td>\n<td align=\"left\">object</td>\n<td align=\"left\">account to assume back into for sending to SNS topics</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>debug</code></td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">debug on/off</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_bind_dn</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">eg: ou=people,dc=example,dc=com</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_bind_user</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">eg: FOO\\BAR</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_bind_password</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">ldap bind password</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_bind_password_in_kms</code></td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">defaults to true, most people (except capone) want to set this to false. If set to true, make sure <code>ldap_bind_password</code> contains your KMS encrypted ldap bind password as a base64-encoded string.</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_email_attribute</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_email_key</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">eg 'mail'</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_manager_attribute</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">eg 'manager'</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_uid_attribute</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_uid_regex</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_uid_tags</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ldap_uri</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">eg 'ldaps://example.com:636'</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>redis_host</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">redis host if cache_engine == redis</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>redis_port</code></td>\n<td align=\"left\">integer</td>\n<td align=\"left\">redis port, default: 6369</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>ses_region</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">AWS region that handles SES API calls</td>\n</tr></tbody></table>\n<h4>SMTP Config</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Required?</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>smtp_server</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">to configure your lambda role to talk to smtpd in your private vpc, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/vpc.html\" rel=\"nofollow\">here</a></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>smtp_port</code></td>\n<td align=\"left\">integer</td>\n<td align=\"left\">smtp port (default is 25)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>smtp_ssl</code></td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">this defaults to True</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>smtp_username</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>smtp_password</code></td>\n<td align=\"left\">secured string</td>\n<td align=\"left\"></td>\n</tr></tbody></table>\n<p>If <code>smtp_server</code> is unset, <code>c7n_mailer</code> will use AWS SES or Azure SendGrid.</p>\n<h4>DataDog Config</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Required?</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>datadog_api_key</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">DataDog API key.</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>datadog_application_key</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Datadog application key.</td>\n</tr></tbody></table>\n<p>These fields are not necessary if c7n_mailer is run in a instance/lambda/etc with the DataDog agent.</p>\n<h4>Slack Config</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Required?</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>slack_token</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Slack API token</td>\n</tr></tbody></table>\n<h4>SendGrid Config</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Required?</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>sendgrid_api_key</code></td>\n<td align=\"left\">secured string</td>\n<td align=\"left\">SendGrid API token</td>\n</tr></tbody></table>\n<h4>Splunk HEC Config</h4>\n<p>The following configuration items are <em>all</em> optional. The ones marked \"Required for Splunk\" are only required if you're sending notifications to <code>splunkhec://</code> destinations.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Required for Splunk?</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">\u2705</td>\n<td align=\"left\"><code>splunk_hec_url</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">URL to your Splunk HTTP Event Collector endpoint</td>\n</tr>\n<tr>\n<td align=\"center\">\u2705</td>\n<td align=\"left\"><code>splunk_hec_token</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\">Splunk HEC authentication token for specified username</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>splunk_remove_paths</code></td>\n<td align=\"left\">array of strings</td>\n<td align=\"left\">List of <a href=\"http://tools.ietf.org/html/rfc6901\" rel=\"nofollow\">RFC6901</a> JSON Pointers to remove from the event, if present, before sending to Splunk</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>splunk_actions_list</code></td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">If true, add an <code>actions</code> list to the top-level message sent to Splunk, containing the names of all non-notify actions taken</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>splunk_max_attempts</code></td>\n<td align=\"left\">integer</td>\n<td align=\"left\">Maximum number of times to try POSTing data to Splunk HEC (default 4)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>splunk_hec_max_length</code></td>\n<td align=\"left\">integer</td>\n<td align=\"left\">Maximum data length that Splunk HEC accepts; an error will be logged for any message sent over this length</td>\n</tr></tbody></table>\n<h4>SDK Config</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Required?</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>http_proxy</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>https_proxy</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"><code>profile</code></td>\n<td align=\"left\">string</td>\n<td align=\"left\"></td>\n</tr></tbody></table>\n<h4>Secured String</h4>\n<p>In order to ensure sensitive data is not stored plaintext in a policy, <code>c7n-mailer</code> supports secured\nstrings. You can treat it as a regular <code>string</code> or use <code>secured string</code> features.</p>\n<h5>AWS</h5>\n<p>You can use KMS to encrypt your secrets and use encrypted secret in mailer policy.\nCustodian tries to decrypt the string using KMS, if it fails c7n treats it as a plaintext secret.</p>\n<pre>    <span class=\"nt\">plaintext_secret</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;raw_secret&gt;</span>\n    <span class=\"nt\">secured_string</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;encrypted_secret&gt;</span>\n</pre>\n<h5>Azure</h5>\n<p>You can store your secrets in Azure Key Vault secrets and reference them from the policy.</p>\n<pre>    <span class=\"nt\">plaintext_secret</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;raw_secret&gt;</span>\n    <span class=\"nt\">secured_string</span><span class=\"p\">:</span>\n        <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">azure.keyvault</span>\n        <span class=\"nt\">secret</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://your-vault.vault.azure.net/secrets/your-secret</span>\n</pre>\n<p>Note: <code>secrets.get</code> permission on the KeyVault for the Service Principal is required.</p>\n<h2>Configuring a policy to send email</h2>\n<p>Outbound email can be added to any policy by including the <code>notify</code> action.</p>\n<pre><span class=\"nt\">policies</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">bad-apples</span>\n    <span class=\"nt\">resource</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">asg</span>\n    <span class=\"nt\">filters</span><span class=\"p\">:</span>\n     <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"tag:ASV\"</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">absent</span>\n    <span class=\"nt\">actions</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">notify</span>\n        <span class=\"nt\">template</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">default</span>\n        <span class=\"nt\">template_format</span><span class=\"p\">:</span> <span class=\"s\">'html'</span>\n        <span class=\"nt\">priority_header</span><span class=\"p\">:</span> <span class=\"s\">'1'</span>\n        <span class=\"nt\">subject</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">fix your tags</span>\n        <span class=\"nt\">to</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">resource-owner</span>\n        <span class=\"nt\">owner_absent_contact</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">foo@example.com</span>\n        <span class=\"nt\">transport</span><span class=\"p\">:</span>\n          <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">sqs</span>\n          <span class=\"nt\">queue</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://sqs.us-east-1.amazonaws.com/80101010101/cloud-custodian-message-relay</span>\n</pre>\n<p>So breaking it down, you add an action of type <code>notify</code>. You can specify a\ntemplate that's used to format the email; customizing templates is described\n<a href=\"#writing-an-email-template\" rel=\"nofollow\">below</a>.</p>\n<p>The <code>to</code> list specifies the intended recipient for the email. You can specify\neither an email address, an SNS topic, a Datadog Metric, or a special value. The special values\nare either</p>\n<ul>\n<li><code>resource-owner</code>, in which case the email will be sent to the listed\n<code>OwnerContact</code> tag on the resource that matched the policy, or</li>\n<li><code>event-owner</code> for push-based/realtime policies that will send to the user\nthat was responsible for the underlying event.</li>\n<li><code>priority_header</code> to indicate the importance of an email with <a href=\"https://www.chilkatsoft.com/p/p_471.asp\" rel=\"nofollow\">headers</a>. Different emails clients will display stars, exclamation points or flags depending on the value. Should be an string from 1 to 5.</li>\n</ul>\n<p>Both of these special values are best effort, i.e., if no <code>OwnerContact</code> tag is\nspecified then <code>resource-owner</code> email will not be delivered, and in the case of\n<code>event-owner</code> an instance role or system account will not result in an email.</p>\n<p>The optional <code>owner_absent_contact</code> list specifies email addresses to notify only if\nthe <code>resource-owner</code> special option was unable to find any matching owner contact\ntags.</p>\n<p>In addition, you may choose to use a custom tag instead of the default <code>OwnerContact</code>.  In order to configure this, the mailer.yaml must be modified to include the contact_tags and the custom tag.  The <code>resource-owner</code> will now email the custom tag instead of <code>OwnerContact</code>.</p>\n<pre><span class=\"nt\">contact_tags</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"custom_tag\"</span>\n</pre>\n<p>For reference purposes, the JSON Schema of the <code>notify</code> action:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"required\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"transport\"</span><span class=\"p\">,</span> <span class=\"s2\">\"to\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"enum\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"notify\"</span><span class=\"p\">]},</span>\n    <span class=\"nt\">\"to\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"array\"</span><span class=\"p\">,</span> <span class=\"nt\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">}},</span>\n    <span class=\"nt\">\"owner_absent_contact\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"array\"</span><span class=\"p\">,</span> <span class=\"nt\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">}},</span>\n    <span class=\"nt\">\"subject\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n    <span class=\"nt\">\"priority_header\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n    <span class=\"nt\">\"template\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n    <span class=\"nt\">\"transport\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"required\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"queue\"</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"queue\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n        <span class=\"nt\">\"region\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n        <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"enum\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"sqs\"</span><span class=\"p\">]}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Using on Azure</h2>\n<p>Requires:</p>\n<ul>\n<li><code>c7n_azure</code> package.  See <a href=\"https://cloudcustodian.io/docs/azure/gettingstarted.html#azure-install-cc\" rel=\"nofollow\">Installing Azure Plugin</a></li>\n<li>SendGrid account. See <a href=\"https://docs.microsoft.com/en-us/azure/sendgrid-dotnet-how-to-send-email\" rel=\"nofollow\">Using SendGrid with Azure</a></li>\n<li><a href=\"https://azure.microsoft.com/en-us/services/storage/queues/\" rel=\"nofollow\">Azure Storage Queue</a></li>\n</ul>\n<p>The mailer supports an Azure Storage Queue transport and SendGrid delivery on Azure.\nConfiguration for this scenario requires only minor changes from AWS deployments.</p>\n<p>You will need to grant <code>Storage Queue Data Contributor</code> role on the Queue for the identity\nmailer is running under.</p>\n<p>The notify action in your policy will reflect transport type <code>asq</code> with the URL\nto an Azure Storage Queue.  For example:</p>\n<pre><span class=\"nt\">policies</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">azure-notify</span>\n    <span class=\"nt\">resource</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">azure.resourcegroup</span>\n    <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">send a message to a mailer instance</span>\n    <span class=\"nt\">actions</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">notify</span>\n        <span class=\"nt\">template</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">default</span>\n        <span class=\"nt\">priority_header</span><span class=\"p\">:</span> <span class=\"s\">'2'</span>\n        <span class=\"nt\">subject</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Hello from C7N Mailer</span>\n        <span class=\"nt\">to</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">you@youremail.com</span>\n        <span class=\"nt\">transport</span><span class=\"p\">:</span>\n          <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">asq</span>\n          <span class=\"nt\">queue</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://storageaccount.queue.core.windows.net/queuename</span>\n</pre>\n<p>In your mailer configuration, you'll need to provide your SendGrid API key as well as\nprefix your queue URL with <code>asq://</code> to let mailer know what type of queue it is:</p>\n<pre><span class=\"nt\">queue_url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">asq://storageaccount.queue.core.windows.net/queuename</span>\n<span class=\"nt\">from_address</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">you@youremail.com</span>\n<span class=\"nt\">sendgrid_api_key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">SENDGRID_API_KEY</span>\n</pre>\n<p>The mailer will transmit all messages found on the queue on each execution, and will retry\nsending 3 times in the event of a failure calling SendGrid.  After the retries the queue\nmessage will be discarded.</p>\n<p>In addition, SendGrid delivery on Azure supports using resource tags to send emails. For example, in the <code>to</code> field:</p>\n<pre><span class=\"nt\">to</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">tag:OwnerEmail</span>\n</pre>\n<p>This will find the email address associated with the resource's <code>OwnerEmail</code> tag, and send an email to the specified address.\nIf no tag is found, or the associated email address is invalid, no email will be sent.</p>\n<h4>Deploying Azure Functions</h4>\n<p>The <code>--update-lambda</code> CLI option will also deploy Azure Functions if you have an Azure\nmailer configuration.</p>\n<p><code>c7n-mailer --config mailer.yml --update-lambda</code></p>\n<p>where a simple <code>mailer.yml</code> using Consumption functions may look like:</p>\n<pre><span class=\"nt\">queue_url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">asq://storage.queue.core.windows.net/custodian</span>\n<span class=\"nt\">from_address</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">foo@mail.com</span>\n<span class=\"nt\">sendgrid_api_key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;key&gt;</span>\n<span class=\"nt\">function_properties</span><span class=\"p\">:</span>\n  <span class=\"nt\">servicePlan</span><span class=\"p\">:</span>\n    <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"s\">'testmailer1'</span>\n</pre>\n<h2>Writing an email template</h2>\n<p>Templates are authored in <a href=\"http://jinja.pocoo.org/docs/dev/templates/\" rel=\"nofollow\">jinja2</a>.\nDrop a file with the <code>.j2</code> extension into the a templates directory, and send a pull request to this\nrepo. You can then reference it in the <code>notify</code> action as the <code>template</code>\nvariable by file name minus extension. Templates ending with <code>.html.j2</code> are\nsent as HTML-formatted emails, all others are sent as plain text.</p>\n<p>You can use <code>-t</code> or <code>--templates</code> cli argument to pass custom folder with your templates.</p>\n<p>The following variables are available when rendering templates:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">variable</th>\n<th align=\"left\">value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>recipient</code></td>\n<td align=\"left\">email address</td>\n</tr>\n<tr>\n<td align=\"left\"><code>resources</code></td>\n<td align=\"left\">list of resources that matched the policy filters</td>\n</tr>\n<tr>\n<td align=\"left\"><code>event</code></td>\n<td align=\"left\">for CWE-push-based lambda policies, the event that triggered</td>\n</tr>\n<tr>\n<td align=\"left\"><code>action</code></td>\n<td align=\"left\"><code>notify</code> action that generated this SQS message</td>\n</tr>\n<tr>\n<td align=\"left\"><code>policy</code></td>\n<td align=\"left\">policy that triggered this notify action</td>\n</tr>\n<tr>\n<td align=\"left\"><code>account</code></td>\n<td align=\"left\">short name of the aws account</td>\n</tr>\n<tr>\n<td align=\"left\"><code>region</code></td>\n<td align=\"left\">region the policy was executing in</td>\n</tr>\n<tr>\n<td align=\"left\"><code>execution_start</code></td>\n<td align=\"left\">The time policy started executing</td>\n</tr></tbody></table>\n<p>The following extra global functions are available:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">signature</th>\n<th align=\"left\">behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>format_struct(struct)</code></td>\n<td align=\"left\">pretty print a json structure</td>\n</tr>\n<tr>\n<td align=\"left\"><code>resource_tag(resource, key)</code></td>\n<td align=\"left\">retrieve a tag value from a resource or return an empty string, aliased as get_resource_tag_value</td>\n</tr>\n<tr>\n<td align=\"left\"><code>format_resource(resource, resource_type)</code></td>\n<td align=\"left\">renders a one line summary of a resource</td>\n</tr>\n<tr>\n<td align=\"left\"><code>date_time_format(utc_str, tz_str='US/Eastern', format='%Y %b %d %H:%M %Z')</code></td>\n<td align=\"left\">customize rendering of an utc datetime string</td>\n</tr>\n<tr>\n<td align=\"left\"><code>search(expression, value)</code></td>\n<td align=\"left\">jmespath search value using expression</td>\n</tr>\n<tr>\n<td align=\"left\"><code>yaml_safe(value)</code></td>\n<td align=\"left\">yaml dumper</td>\n</tr></tbody></table>\n<p>The following extra jinja filters are available:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">filter</th>\n<th align=\"left\">behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>utc_string|date_time_format(tz_str='US/Pacific', format='%Y %b %d %H:%M %Z')</code></td>\n<td align=\"left\">pretty <a href=\"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\" rel=\"nofollow\">format</a> the date / time</td>\n</tr>\n<tr>\n<td align=\"left\"><code>30|get_date_time_delta</code></td>\n<td align=\"left\">Convert a time <a href=\"https://docs.python.org/2/library/datetime.html#datetime.timedelta\" rel=\"nofollow\">delta</a> like '30' days in the future, to a datetime string. You can also use negative values for the past.</td>\n</tr></tbody></table>\n<h2>Developer Install (OS X El Capitan)</h2>\n<p>Clone the repository:</p>\n<pre><code>$ git clone https://github.com/cloud-custodian/cloud-custodian\n</code></pre>\n<p>Install dependencies (with virtualenv):</p>\n<pre><code>$ virtualenv c7n_mailer\n$ source c7n_mailer/bin/activate\n$ cd tools/c7n_mailer\n$ pip install -r requirements.txt\n</code></pre>\n<p>Install the extensions:</p>\n<pre><code>python setup.py develop\n</code></pre>\n<h2>Testing Templates and Recipients</h2>\n<p>A <code>c7n-mailer-replay</code> entrypoint is provided to assist in testing email notifications\nand templates. This script operates on an actual SQS message from cloud-custodian itself,\nwhich you can either retrieve from the SQS queue or replicate locally. By default it expects\nthe message file to be base64-encoded, gzipped JSON, just like c7n sends to SQS. With the\n<code>-p</code> | <code>--plain</code> argument, it will expect the message file to contain plain JSON.</p>\n<p><code>c7n-mailer-replay</code> has three main modes of operation:</p>\n<ul>\n<li>With no additional arguments, it will render the template specified by the policy the\nmessage is for, and actually send mail from the local machine as <code>c7n-mailer</code> would.\nThis only works with SES, not SMTP.</li>\n<li>With the <code>-T</code> | <code>--template-print</code> argument, it will log the email addresses that would\nreceive mail, and print the rendered message body template to STDOUT.</li>\n<li>With the <code>-d</code> | <code>--dry-run</code> argument, it will print the actual email body (including headers)\nthat would be sent, for each message that would be sent, to STDOUT.</li>\n</ul>\n<h4>Testing Templates for Azure</h4>\n<p>The <code>c7n-mailer-replay</code> entrypoint can be used to test templates for Azure with either of the arguments:</p>\n<ul>\n<li><code>-T</code> | <code>--template-print</code></li>\n<li><code>-d</code> | <code>--dry-run</code></li>\n</ul>\n<p>Running <code>c7n-mailer-replay</code> without either of these arguments will throw an error as it will attempt\nto authorize with AWS.</p>\n<p>The following is an example for retrieving a sample message to test against templates:</p>\n<ul>\n<li>\n<p>Run a policy with the notify action, providing the name of the template to test, to populate the queue.</p>\n</li>\n<li>\n<p>Using the azure cli, save the message locally:</p>\n</li>\n</ul>\n<pre><code>$ az storage message get --queue-name &lt;queuename&gt; --account-name &lt;storageaccountname&gt; --query '[].content' &gt; test_message.gz\n</code></pre>\n<ul>\n<li>The example message can be provided to <code>c7n-mailer-replay</code> by running:</li>\n</ul>\n<pre><code>$ c7n-mailer-replay test_message.gz -T --config mailer.yml\n</code></pre>\n\n          </div>"}, "last_serial": 7121461, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "bf85288f18ce6e33599a1edd40b3c6a6", "sha256": "80e69b80892145281ccb5a5b282be78392d32c14cea90392983a067bea368be1"}, "downloads": -1, "filename": "c7n_mailer-0.1.tar.gz", "has_sig": false, "md5_digest": "bf85288f18ce6e33599a1edd40b3c6a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1304, "upload_time": "2017-05-16T07:48:47", "upload_time_iso_8601": "2017-05-16T07:48:47.887398Z", "url": "https://files.pythonhosted.org/packages/46/0e/7617b6e00525d2350787aca9981fe70b77a0769095ea9247779a224d7d9f/c7n_mailer-0.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0e0c8ccd75ef352f385fb6bd9016c667", "sha256": "a00ffb33b80d1112650419d7f0be8ebb6e75bb8a42a0d7a0fc02efe42bd79392"}, "downloads": -1, "filename": "c7n_mailer-0.3.tar.gz", "has_sig": false, "md5_digest": "0e0c8ccd75ef352f385fb6bd9016c667", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7509, "upload_time": "2018-02-14T13:05:31", "upload_time_iso_8601": "2018-02-14T13:05:31.019426Z", "url": "https://files.pythonhosted.org/packages/b6/11/2799ad89bcc3273569a4debb18380491bbe432adcf0be226ac22b6f40440/c7n_mailer-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "c49bbc3dd91ee6d66244b62bca0f670d", "sha256": "2954f73e7fa68c3ac130246ce40a89979f645605f23a6af00ab9298c06d5a541"}, "downloads": -1, "filename": "c7n_mailer-0.3.1.tar.gz", "has_sig": false, "md5_digest": "c49bbc3dd91ee6d66244b62bca0f670d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6688, "upload_time": "2018-03-15T13:04:09", "upload_time_iso_8601": "2018-03-15T13:04:09.832107Z", "url": "https://files.pythonhosted.org/packages/f7/aa/3f7d8bffed56c3858274ba0fcff4066ba206d7b60705506834b47b2d79fc/c7n_mailer-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "9c4ac0723e33180ec3631a34f4054171", "sha256": "5c87cdec0b5237dff292bf37d0fd4ce333504a427887f8274c9c4e1cf9d3f54f"}, "downloads": -1, "filename": "c7n_mailer-0.3.2.tar.gz", "has_sig": false, "md5_digest": "9c4ac0723e33180ec3631a34f4054171", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30831, "upload_time": "2018-08-12T18:20:12", "upload_time_iso_8601": "2018-08-12T18:20:12.093086Z", "url": "https://files.pythonhosted.org/packages/df/4c/ebfcf833723a27cd55471651b018e0a0bcef47c34e2563d908d5a19773c7/c7n_mailer-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "7ee30964921781abb67ea91a1bb38e12", "sha256": "662c3d408a083984a0517438d37922137b85658803bf1d554e09d8af38553352"}, "downloads": -1, "filename": "c7n_mailer-0.3.3.tar.gz", "has_sig": false, "md5_digest": "7ee30964921781abb67ea91a1bb38e12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37605, "upload_time": "2018-11-14T09:29:20", "upload_time_iso_8601": "2018-11-14T09:29:20.804639Z", "url": "https://files.pythonhosted.org/packages/bd/2f/84a5029d2f2ffacddbb5f28d8de3a1db0775165e62f9728832189331f0f1/c7n_mailer-0.3.3.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "00cadfc7a4d7eadfb8ce3b54d5cc2893", "sha256": "233a358ae7b101505c4713614235864660bfc447df724e0e5bc5fc953b3a2159"}, "downloads": -1, "filename": "c7n_mailer-0.4.1.tar.gz", "has_sig": false, "md5_digest": "00cadfc7a4d7eadfb8ce3b54d5cc2893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44598, "upload_time": "2019-01-31T20:47:55", "upload_time_iso_8601": "2019-01-31T20:47:55.835089Z", "url": "https://files.pythonhosted.org/packages/ed/51/3c71d71106ce5a54095b8b1604015e55589161ccc853b2c24993f1bf1e20/c7n_mailer-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "39a8756a597f6724077b0efeb46c26c4", "sha256": "cd39f08b7f0b57a767c9af9d34d46e8514e40cd17fe07f1992c6197f5a7f7961"}, "downloads": -1, "filename": "c7n_mailer-0.4.2.tar.gz", "has_sig": false, "md5_digest": "39a8756a597f6724077b0efeb46c26c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39556, "upload_time": "2019-03-04T14:49:26", "upload_time_iso_8601": "2019-03-04T14:49:26.209980Z", "url": "https://files.pythonhosted.org/packages/8f/e2/b3032bf738b8ffa124f4296d979c53b0cc5c342d062948fd4b3888c8c134/c7n_mailer-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "7c3b73be5161891eb606b2cc4b278650", "sha256": "680bd9731d37772ad1e3eb047138cda08f0b3602a1a89f164db621d5feec07d7"}, "downloads": -1, "filename": "c7n_mailer-0.5.0.tar.gz", "has_sig": false, "md5_digest": "7c3b73be5161891eb606b2cc4b278650", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44885, "upload_time": "2019-04-13T10:09:00", "upload_time_iso_8601": "2019-04-13T10:09:00.314400Z", "url": "https://files.pythonhosted.org/packages/63/59/ca0095ea4795be4bf331e8332ce57d0a54856feaa8ec3262b486cba081d6/c7n_mailer-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "c5e028c5dc741ba46369e35fcca20b81", "sha256": "386eabd99f34e8abe1af3f04feec066c227b608c3487af34a1b29efae87bff30"}, "downloads": -1, "filename": "c7n_mailer-0.5.1.tar.gz", "has_sig": false, "md5_digest": "c5e028c5dc741ba46369e35fcca20b81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57712, "upload_time": "2019-06-18T16:31:50", "upload_time_iso_8601": "2019-06-18T16:31:50.151743Z", "url": "https://files.pythonhosted.org/packages/8d/2f/9b51aaaaba4a87dedae68d146b3a1aa2cc999e1670e1fd1988b65d3972b7/c7n_mailer-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "233a05381d3d31686d33ff36783d08c7", "sha256": "5592ee1e501e4e1c48f6994d2cc73f762faa4d3c5dca16d19f636356c5c9aa1b"}, "downloads": -1, "filename": "c7n_mailer-0.5.2.tar.gz", "has_sig": false, "md5_digest": "233a05381d3d31686d33ff36783d08c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57707, "upload_time": "2019-06-19T19:40:11", "upload_time_iso_8601": "2019-06-19T19:40:11.460935Z", "url": "https://files.pythonhosted.org/packages/f4/dc/bdeacdfdbb148a93114daac74764f674f7c346fefeffbbaf2f840be10646/c7n_mailer-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "6a90422efa30305d951b68f634c163d4", "sha256": "2b23f0c2113acd20e01eafcb3955f036c941ad292515051d442a0af5088747d5"}, "downloads": -1, "filename": "c7n_mailer-0.5.3.tar.gz", "has_sig": false, "md5_digest": "6a90422efa30305d951b68f634c163d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57818, "upload_time": "2019-06-28T20:32:04", "upload_time_iso_8601": "2019-06-28T20:32:04.414977Z", "url": "https://files.pythonhosted.org/packages/02/95/e2d8289211312716bfcfbc6b6364fb570280041eabd4e7a49d3d9cdbcd51/c7n_mailer-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "554385ffdbcec90f0d68afebe3286362", "sha256": "0dd70bac25e4f50c03b57333810de0d3fa4a4cbfcc30fb7e955c4fd042421017"}, "downloads": -1, "filename": "c7n_mailer-0.5.4.tar.gz", "has_sig": false, "md5_digest": "554385ffdbcec90f0d68afebe3286362", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61068, "upload_time": "2019-09-23T22:44:17", "upload_time_iso_8601": "2019-09-23T22:44:17.710778Z", "url": "https://files.pythonhosted.org/packages/f4/ee/cb9800384bdefcf347b95935d547a4490bef7278450bdae08c2beb46f675/c7n_mailer-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "6023c66894ffe81897d52620480f3a74", "sha256": "0957227e9218fcbb3506e62165f447c97c8adb7063cfee266f19a0f39f87b2ab"}, "downloads": -1, "filename": "c7n_mailer-0.5.5.tar.gz", "has_sig": false, "md5_digest": "6023c66894ffe81897d52620480f3a74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61478, "upload_time": "2019-10-11T02:13:06", "upload_time_iso_8601": "2019-10-11T02:13:06.685734Z", "url": "https://files.pythonhosted.org/packages/54/6f/ffaf2a4db39324e5fca33df3d2484b2f22d057040887874ee2c9b188211b/c7n_mailer-0.5.5.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "64c2cc97d9b272e439d0ef4dfed416f5", "sha256": "16f55d4e701bbdc8af0a8f227552d0c162469619c8c68ee826f70dd3a4a88315"}, "downloads": -1, "filename": "c7n_mailer-0.5.6.tar.gz", "has_sig": false, "md5_digest": "64c2cc97d9b272e439d0ef4dfed416f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61573, "upload_time": "2019-11-11T14:15:55", "upload_time_iso_8601": "2019-11-11T14:15:55.770146Z", "url": "https://files.pythonhosted.org/packages/8f/b3/db781a9e94f06ccb3930cb93ee71775fa64f6eccd20a31e5d4da71a6d838/c7n_mailer-0.5.6.tar.gz", "yanked": false}], "0.5.7": [{"comment_text": "", "digests": {"md5": "7ad0dc81c7f896f4ff70a71be71ce9f5", "sha256": "97260d84bede9b06b554303d72f021b4bf80979a4df670310d6a645b9482f6a3"}, "downloads": -1, "filename": "c7n_mailer-0.5.7.tar.gz", "has_sig": false, "md5_digest": "7ad0dc81c7f896f4ff70a71be71ce9f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63368, "upload_time": "2020-01-09T02:24:00", "upload_time_iso_8601": "2020-01-09T02:24:00.533518Z", "url": "https://files.pythonhosted.org/packages/91/ab/c4038952c21958ea7a7c37ba23b2cb71076e9ead81e7cd9981bd660406f5/c7n_mailer-0.5.7.tar.gz", "yanked": false}], "0.5.8": [{"comment_text": "", "digests": {"md5": "42f53a2962328860bdb160f8088a7c18", "sha256": "d304d9ffe43c57efe36bf4628777da4eaf58bfbc32394323dcc221cf873b862d"}, "downloads": -1, "filename": "c7n_mailer-0.5.8.tar.gz", "has_sig": false, "md5_digest": "42f53a2962328860bdb160f8088a7c18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63655, "upload_time": "2020-01-27T12:49:28", "upload_time_iso_8601": "2020-01-27T12:49:28.906998Z", "url": "https://files.pythonhosted.org/packages/8e/0a/3413a17058f501ea347180288f7c5d84a4588f51b4e2904118b9c92b4ab1/c7n_mailer-0.5.8.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "eb1ed1f6d188ad6f9c3e3e1bf9c200bb", "sha256": "91508a911ec91202378b706017b1f5ee6bc1e5688ab3cc59377c17e977e97de6"}, "downloads": -1, "filename": "c7n_mailer-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb1ed1f6d188ad6f9c3e3e1bf9c200bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 57516, "upload_time": "2020-04-28T16:22:10", "upload_time_iso_8601": "2020-04-28T16:22:10.470430Z", "url": "https://files.pythonhosted.org/packages/22/96/768b83e1407b80f54bf5b2a15b565f99a09b319c444b6f45ea5646ebcd55/c7n_mailer-0.6.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eb1ed1f6d188ad6f9c3e3e1bf9c200bb", "sha256": "91508a911ec91202378b706017b1f5ee6bc1e5688ab3cc59377c17e977e97de6"}, "downloads": -1, "filename": "c7n_mailer-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb1ed1f6d188ad6f9c3e3e1bf9c200bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 57516, "upload_time": "2020-04-28T16:22:10", "upload_time_iso_8601": "2020-04-28T16:22:10.470430Z", "url": "https://files.pythonhosted.org/packages/22/96/768b83e1407b80f54bf5b2a15b565f99a09b319c444b6f45ea5646ebcd55/c7n_mailer-0.6.0-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:35:46 2020"}