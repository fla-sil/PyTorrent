{"info": {"author": "Simon Blanchard", "author_email": "bnomis@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: MacOS X", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Multimedia :: Graphics :: Capture :: Screen Capture", "Topic :: Security", "Topic :: System :: Monitoring", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "description": "grabber\n=======\n\nPeriodically grab a picture of your Mac's screen and optionally make a\nmovie of the grabs.\n\nBy default, runs the Mac's ``screencapture`` utility every 5 minutes and\nsaves the grab into ``/var/root/grabs/YYYY-MM-DD/grabNNNN.png``.\n\nMaking Movies\n-------------\n\nThe script uses ``ffmpeg`` to make movies. Specify the path to\n``ffmpeg`` using the --ffmpeg option to the script.\n\nTo make a movie of the previous day's grabs run:\n\n.. code:: shell\n\n    $ grabber [your-normal-grabber-options] --movie\n\nTo make a movie of a specific day's grabs run:\n\n.. code:: shell\n\n    $ grabber [your-normal-grabber-options] --movie-day YYYY-MM-DD\n\nWhen making a movie pass in the same options you used to create the\ngrabs. Just add --movie on the end of the options. This is so the script\nknows where the grabs were stored. Note: you may need to specify the\npath the ``ffmpeg``.\n\nThe movie is placed in to the same directory as the grabs, named\n``grab.mp4``.\n\nIf you wish to make a movie every day, you can use the supplied launchd\nfile ``launchd/com.yajogo.grabber.movie.plist``. Installing this\n(symlink to ``/Library/LaunchDaemons`` and ``launchctl load -w``) will\nlaunch grabber just after midnight every day to make the movie for the\nprevious day.\n\nUtilities\n---------\n\nSeveral utilities are provided with the script...\n\n-  ``enc.sh`` is a shell script that can be run in a directory\n   containing grabbed PNG files to produce a movie of the grabs.\n-  ``seq.py`` will uniformly re-name files in ascending order, suitable\n   for making movies. This really only useful for development.\n\nUsage\n-----\n\n.. code:: shell\n\n    usage: grabber [options]\n\n    grabber: periodically grabs a copy of the screen\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --version             show program's version number and exit\n      --dry-run             Do nothing but print what would be done. Default:\n                            False.\n      --log-file LOG_FILE   File to write logs to. Default:\n                            /var/root/logs/grabber.log.\n      -b BASE, --base BASE  Base file name. Default: grab.\n      -d OUTDIR, --directory OUTDIR\n                            Parent directory to store grabs to. Default:\n                            /var/root/grabs.\n      --fontpath FONTPATH   Path to font to use for time stamps. Default:\n                            /Users/simonb/src/grabber/fonts/SourceCodePro-\n                            Regular.otf.\n      -r REPEAT, --repeat REPEAT\n                            Repeat in minutes. Default: 5.\n      -f FRMTM, --from FRMTM\n                            From time. 24-hour format with a leading zero if\n                            needed. Default: 08:30.\n      -t TOTM, --to TOTM    To time. 24-hour format with a leading zero if needed.\n                            Default: 20:00.\n      --once                Run once. Default: False.\n      --movie               Make the movie for the previous day. Default: False.\n      --movie-day YYYY-MM-DD\n                            Make the movie for a specified day. Specified as YYYY-\n                            MM-DD.\n      --ffmpeg FFMPEG       Path to the ffmpeg command.\n\nFonts\n-----\n\nThe script, by default, uses the supplied `Source Code\nPro <https://github.com/adobe-fonts/source-code-pro>`__ font from Adobe\nto write a time stamp on the screen grab. You can change the font using\nthe --fontpath option. I suggest you use a mono-spaced font so the time\nstamp does not grow and shrink over time.\n\nInstall\n-------\n\nThe script needs to be run as root. So, before you install become root.\n\nThe script requires Pillow to time stamp the screen grabs, so you may as\nwell create a virtualenv first and then pip install.\n\nSuggested install steps are:\n\n1. Create a virtualenv\n2. ``pip install grabbber`` in the new virtualenv\n3. Edit the launchd file ``launchd/com.yajogo.grabber.plist`` to suit\n4. Run ``bin/install.py``. This will symlink\n   ``com.yajogo.grabber.plist`` in to ``/Library/LaunchDaemons`` and\n   load the file in to launchd.\n\nUninstall\n---------\n\nAs root.\n\nEither:\n\n-  run the ``bin/uninstall.py`` script.\n\nOr:\n\n-  manually unload from ``launchd`` and delete the symlink in\n   ``/Library/LaunchDaemons``.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bnomis/grabber", "keywords": "search,text,find", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "grabber", "package_url": "https://pypi.org/project/grabber/", "platform": "macosx", "project_url": "https://pypi.org/project/grabber/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/bnomis/grabber"}, "release_url": "https://pypi.org/project/grabber/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "grabber: periodically grabs a picture of your screen", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Periodically grab a picture of your Mac\u2019s screen and optionally make a\nmovie of the grabs.</p>\n<p>By default, runs the Mac\u2019s <tt>screencapture</tt> utility every 5 minutes and\nsaves the grab into <tt><span class=\"pre\">/var/root/grabs/YYYY-MM-DD/grabNNNN.png</span></tt>.</p>\n<div id=\"making-movies\">\n<h2>Making Movies</h2>\n<p>The script uses <tt>ffmpeg</tt> to make movies. Specify the path to\n<tt>ffmpeg</tt> using the \u2013ffmpeg option to the script.</p>\n<p>To make a movie of the previous day\u2019s grabs run:</p>\n<pre>$ grabber <span class=\"o\">[</span>your-normal-grabber-options<span class=\"o\">]</span> --movie\n</pre>\n<p>To make a movie of a specific day\u2019s grabs run:</p>\n<pre>$ grabber <span class=\"o\">[</span>your-normal-grabber-options<span class=\"o\">]</span> --movie-day YYYY-MM-DD\n</pre>\n<p>When making a movie pass in the same options you used to create the\ngrabs. Just add \u2013movie on the end of the options. This is so the script\nknows where the grabs were stored. Note: you may need to specify the\npath the <tt>ffmpeg</tt>.</p>\n<p>The movie is placed in to the same directory as the grabs, named\n<tt>grab.mp4</tt>.</p>\n<p>If you wish to make a movie every day, you can use the supplied launchd\nfile <tt>launchd/com.yajogo.grabber.movie.plist</tt>. Installing this\n(symlink to <tt>/Library/LaunchDaemons</tt> and <tt>launchctl load <span class=\"pre\">-w</span></tt>) will\nlaunch grabber just after midnight every day to make the movie for the\nprevious day.</p>\n</div>\n<div id=\"utilities\">\n<h2>Utilities</h2>\n<p>Several utilities are provided with the script\u2026</p>\n<ul>\n<li><tt>enc.sh</tt> is a shell script that can be run in a directory\ncontaining grabbed PNG files to produce a movie of the grabs.</li>\n<li><tt>seq.py</tt> will uniformly re-name files in ascending order, suitable\nfor making movies. This really only useful for development.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>usage: grabber <span class=\"o\">[</span>options<span class=\"o\">]</span>\n\ngrabber: periodically grabs a copy of the screen\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --version             show program<span class=\"err\">'</span>s version number and <span class=\"nb\">exit</span>\n  --dry-run             Do nothing but print what would be <span class=\"k\">done</span>. Default:\n                        False.\n  --log-file LOG_FILE   File to write logs to. Default:\n                        /var/root/logs/grabber.log.\n  -b BASE, --base BASE  Base file name. Default: grab.\n  -d OUTDIR, --directory OUTDIR\n                        Parent directory to store grabs to. Default:\n                        /var/root/grabs.\n  --fontpath FONTPATH   Path to font to use <span class=\"k\">for</span> <span class=\"nb\">time</span> stamps. Default:\n                        /Users/simonb/src/grabber/fonts/SourceCodePro-\n                        Regular.otf.\n  -r REPEAT, --repeat REPEAT\n                        Repeat in minutes. Default: <span class=\"m\">5</span>.\n  -f FRMTM, --from FRMTM\n                        From time. <span class=\"m\">24</span>-hour format with a leading zero <span class=\"k\">if</span>\n                        needed. Default: <span class=\"m\">08</span>:30.\n  -t TOTM, --to TOTM    To time. <span class=\"m\">24</span>-hour format with a leading zero <span class=\"k\">if</span> needed.\n                        Default: <span class=\"m\">20</span>:00.\n  --once                Run once. Default: False.\n  --movie               Make the movie <span class=\"k\">for</span> the previous day. Default: False.\n  --movie-day YYYY-MM-DD\n                        Make the movie <span class=\"k\">for</span> a specified day. Specified as YYYY-\n                        MM-DD.\n  --ffmpeg FFMPEG       Path to the ffmpeg command.\n</pre>\n</div>\n<div id=\"fonts\">\n<h2>Fonts</h2>\n<p>The script, by default, uses the supplied <a href=\"https://github.com/adobe-fonts/source-code-pro\" rel=\"nofollow\">Source Code\nPro</a> font from Adobe\nto write a time stamp on the screen grab. You can change the font using\nthe \u2013fontpath option. I suggest you use a mono-spaced font so the time\nstamp does not grow and shrink over time.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>The script needs to be run as root. So, before you install become root.</p>\n<p>The script requires Pillow to time stamp the screen grabs, so you may as\nwell create a virtualenv first and then pip install.</p>\n<p>Suggested install steps are:</p>\n<ol>\n<li>Create a virtualenv</li>\n<li><tt>pip install grabbber</tt> in the new virtualenv</li>\n<li>Edit the launchd file <tt>launchd/com.yajogo.grabber.plist</tt> to suit</li>\n<li>Run <tt>bin/install.py</tt>. This will symlink\n<tt>com.yajogo.grabber.plist</tt> in to <tt>/Library/LaunchDaemons</tt> and\nload the file in to launchd.</li>\n</ol>\n</div>\n<div id=\"uninstall\">\n<h2>Uninstall</h2>\n<p>As root.</p>\n<p>Either:</p>\n<ul>\n<li>run the <tt>bin/uninstall.py</tt> script.</li>\n</ul>\n<p>Or:</p>\n<ul>\n<li>manually unload from <tt>launchd</tt> and delete the symlink in\n<tt>/Library/LaunchDaemons</tt>.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1516145, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5b45e187bfab6e4e97896df5f2c761f3", "sha256": "3f887077d2ebe21e640b8edb1b1930da41e4c91f1b09a731b207584b4b4cb671"}, "downloads": -1, "filename": "grabber-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5b45e187bfab6e4e97896df5f2c761f3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9155, "upload_time": "2015-04-22T09:47:55", "upload_time_iso_8601": "2015-04-22T09:47:55.434677Z", "url": "https://files.pythonhosted.org/packages/70/bd/46b7a6251a145f6b598652a38f6c18792f9b0652ce2ee57a20a872467257/grabber-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0335fae1fbe9749986a915ed810871f", "sha256": "c47a89fc942f1f5cd9ec085a1d350cbd1695a95255d0df4c7ed3921e70a7e5bd"}, "downloads": -1, "filename": "grabber-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e0335fae1fbe9749986a915ed810871f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69231, "upload_time": "2015-04-22T09:48:00", "upload_time_iso_8601": "2015-04-22T09:48:00.598242Z", "url": "https://files.pythonhosted.org/packages/cf/61/d3b2aab34ed230eeb363e833e2cccfbb57b8fce0953ce29c97d66d68a514/grabber-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5b45e187bfab6e4e97896df5f2c761f3", "sha256": "3f887077d2ebe21e640b8edb1b1930da41e4c91f1b09a731b207584b4b4cb671"}, "downloads": -1, "filename": "grabber-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5b45e187bfab6e4e97896df5f2c761f3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9155, "upload_time": "2015-04-22T09:47:55", "upload_time_iso_8601": "2015-04-22T09:47:55.434677Z", "url": "https://files.pythonhosted.org/packages/70/bd/46b7a6251a145f6b598652a38f6c18792f9b0652ce2ee57a20a872467257/grabber-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0335fae1fbe9749986a915ed810871f", "sha256": "c47a89fc942f1f5cd9ec085a1d350cbd1695a95255d0df4c7ed3921e70a7e5bd"}, "downloads": -1, "filename": "grabber-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e0335fae1fbe9749986a915ed810871f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69231, "upload_time": "2015-04-22T09:48:00", "upload_time_iso_8601": "2015-04-22T09:48:00.598242Z", "url": "https://files.pythonhosted.org/packages/cf/61/d3b2aab34ed230eeb363e833e2cccfbb57b8fce0953ce29c97d66d68a514/grabber-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:02 2020"}