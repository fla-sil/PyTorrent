{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "boardgame aims to gather several simple boardgames like TicTacToe or Connect 4\n\nHome-page: UNKNOWN\nAuthor: Surya Ambrose\nAuthor-email: surya.ambrose@gmail.com\nLicense: MIT\nDescription: \n        boardgame aims to gather several simple boardgames like TicTacToe or Connect 4\n        \n        Each game is described by a State and a Model. A State represents the current\n        state of the game (obviously) but can also provide a value for that state. This\n        value is helpful for AI playing the game. A Model represents the rules of the\n        game and is used to describe which moves are possible from a given state, and\n        what would be their resulting states.\n        \n        Aside of those two elements is a Viewer, whose purpose is to display the\n        current state of the game and to handle human actions.\n        \n        Above all this, a Controller handles the state, the model, the player actions\n        returned by the viewer or the AI actions to run the game. This Controller is\n        generic and does not need to be overwritten for each game.\n        \nPlatform: UNKNOWN\nClassifier: Development Status :: 2 - Pre-Alpha\nClassifier: Environment :: Console\nClassifier: Intended Audience :: Developers\nClassifier: Intended Audience :: End Users/Desktop\nClassifier: License :: OSI Approved :: MIT License\nClassifier: Programming Language :: Python :: 2.7\nClassifier: Topic :: Games/Entertainment :: Board Games", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "boardgame", "package_url": "https://pypi.org/project/boardgame/", "platform": null, "project_url": "https://pypi.org/project/boardgame/", "project_urls": null, "release_url": "https://pypi.org/project/boardgame/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Gather several simple boardgames like TicTacToe or Connect 4", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            boardgame aims to gather several simple boardgames like TicTacToe or Connect 4<br><br>Home-page: UNKNOWN<br>Author: Surya Ambrose<br>Author-email: surya.ambrose@gmail.com<br>License: MIT<br>Description: <br>        boardgame aims to gather several simple boardgames like TicTacToe or Connect 4<br>        <br>        Each game is described by a State and a Model. A State represents the current<br>        state of the game (obviously) but can also provide a value for that state. This<br>        value is helpful for AI playing the game. A Model represents the rules of the<br>        game and is used to describe which moves are possible from a given state, and<br>        what would be their resulting states.<br>        <br>        Aside of those two elements is a Viewer, whose purpose is to display the<br>        current state of the game and to handle human actions.<br>        <br>        Above all this, a Controller handles the state, the model, the player actions<br>        returned by the viewer or the AI actions to run the game. This Controller is<br>        generic and does not need to be overwritten for each game.<br>        <br>Platform: UNKNOWN<br>Classifier: Development Status :: 2 - Pre-Alpha<br>Classifier: Environment :: Console<br>Classifier: Intended Audience :: Developers<br>Classifier: Intended Audience :: End Users/Desktop<br>Classifier: License :: OSI Approved :: MIT License<br>Classifier: Programming Language :: Python :: 2.7<br>Classifier: Topic :: Games/Entertainment :: Board Games\n          </div>"}, "last_serial": 2977493, "releases": {"0.1": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "63ae0838cd135e920cbac95143ea615b", "sha256": "c324cf329c8c59634a886475f0f12d21a8309378c76c52055da36a1ddb3c3f64"}, "downloads": -1, "filename": "boardgame-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "63ae0838cd135e920cbac95143ea615b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17025, "upload_time": "2017-06-25T14:46:31", "upload_time_iso_8601": "2017-06-25T14:46:31.700363Z", "url": "https://files.pythonhosted.org/packages/a3/db/bf5603d282ee5d1df451487482faf56adff819b2317888a5a3d0c20d98f4/boardgame-0.1.0-py2-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63ae0838cd135e920cbac95143ea615b", "sha256": "c324cf329c8c59634a886475f0f12d21a8309378c76c52055da36a1ddb3c3f64"}, "downloads": -1, "filename": "boardgame-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "63ae0838cd135e920cbac95143ea615b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17025, "upload_time": "2017-06-25T14:46:31", "upload_time_iso_8601": "2017-06-25T14:46:31.700363Z", "url": "https://files.pythonhosted.org/packages/a3/db/bf5603d282ee5d1df451487482faf56adff819b2317888a5a3d0c20d98f4/boardgame-0.1.0-py2-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:36:54 2020"}