{"info": {"author": "Alice Bevan-McGregor", "author_email": "alice@gothcandy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=======\nWebCore\n=======\n\n    \u00a9 2006-2016 Alice Bevan-McGregor and contributors.\n\n..\n\n    https://github.com/marrow/WebCore\n\n..\n\n    |latestversion| |ghtag| |downloads| |masterstatus| |mastercover| |masterreq| |ghwatch| |ghstar|\n\n\n1. `What is WebCore?`_\n\n2. `Installation`_\n\n   1. `Dependencies and Extras`_\n\n   2. `Development Version`_\n\n3. `Basic Concepts`_\n\n   1. `Application`_\n\n   2. `Context`_\n\n   3. `Controllers, Endpoints, Dispatch, Oh My!`_\n\n4. `Plugins and Namespaces`_\n\n5. `Version History`_\n\n6. `License`_\n\n\nWhat is WebCore?\n================\n\nWebCore is a nanoframework, a fraction of the size of competing \"microframeworks\", and culmination of more than ten\nyears of web development experience. It provides a clean API for standard points of extension while strongly\nencouraging model, view, controller separation. Being less than 400 source lines of code (SLoC; excluding comments and\ndocumentation) and containing more comments and lines of documentation than lines of code, WebCore is built to be\ninsanely easy to test, adapt, and use, allowing any developer familiar with programming (not just Python programming)\nto be able to read and understand the entirety of the framework in an evening.\n\nIt is substantially smaller and more efficient than monolithic frameworks such as Django or Pyramid::\n\n    from web.core import Application\n    \n    Application(\"Hi.\").serve('wsgiref')\n\nReally; that's it. (It can be made into one line if you're willing to make the import ugly using ``__import__``.) The\nApplication class represents a standard Python WSGI application, the rest is up to you to pick the components that\nbest fit your own needs.\n\n\nInstallation\n============\n\nInstalling ``WebCore`` is easy, just execute the following in a terminal::\n\n    pip install WebCore\n\n**Note:** We *strongly* recommend always using a container, virtualization, or sandboxing environment of some kind when\ndeveloping using Python; installing things system-wide is yucky (for a variety of reasons) nine times out of ten.  We\nprefer light-weight `virtualenv <https://virtualenv.pypa.io/en/latest/virtualenv.html>`__, others prefer solutions as\nrobust as `Vagrant <http://www.vagrantup.com>`__.\n\nIf you add ``WebCore`` to the ``install_requires`` argument of the call to ``setup()`` in your application's\n``setup.py`` file, WebCore will be automatically installed and made available when your own application or\nlibrary is installed.  We recommend using \"less than\" version numbers to ensure there are no unintentional\nside-effects when updating.  Use ``WebCore<2.1`` to get all bugfixes for the current release, and\n``WebCore<3.0`` to get bugfixes and feature updates while ensuring that large breaking changes are not installed.\n\nDependencies and Extras\n-----------------------\n\nWebCore only depends on the excellent `webob <http://webob.org>`__ package to provide request, response, and HTTP\nstatus code exception helpers and the `marrow.package <https://github.com/marrow/package>`__ utility package for plugin\nmanagement. All other dependencies will be application dependencies; choice of template engine,\ndatabase layer, session storage mechanism, and even dispatch method are left entirely up to the developer making use\nof the framework. Provided are a number of ``extras`` requirements, which you can define using a comma-separated list\nappended to the package name during installation from the command-line, or within your own package's\n``install_requires``. For example, to install a typical set of development tools at the same time as WebCore, run::\n\n    pip install WebCore[development]\n\nThe available extras are:\n\n- ``development`` -- this installs a recommended set of development-time packages, including\n  `pytest <http://pytest.org/>`__ and a suite of plugins for it, plus the \n  `backlash <https://github.com/TurboGears/backlash>`__ interactive debugger (needed by the optional\n  ``DebugExtension``), object dispatch, the comprehensive ``ptipython`` upgraded REPL, and the\n  `waitress <https://github.com/Pylons/waitress>`__ development web server.\n\n- ``production`` -- install recommended production-time packages; currently this only installs the ``flup`` FastCGI\n  server bridge.\n\nThe default choices for dispatch are allowed as extras:\n\n- ``object`` -- install object dispatch\n\n- ``route`` -- install route-based dispatch\n\n- ``traversal`` -- install traversal dispatch\n\nYou can also name a supported server bridge as an extra.  Currently available bridges with third-party dependencies include:\n\n- ``waitress``\n\n- ``tornado``\n\n- ``flup``\n\nDevelopment Version\n-------------------\n\n|developstatus| |developcover| |ghsince| |issuecount| |ghfork|\n\nDevelopment takes place on `GitHub <https://github.com/>`__ in the\n`WebCore <https://github.com/marrow/WebCore/>`__ project.  Issue tracking, documentation, and downloads\nare provided there. Development chat (both development of WebCore and chat for users using WebCore to develop their\nown solutions) is graciously provided by `Freenode <ircs://chat.freenode.net:6697/#webcore>`__ in the ``#webcore``\nchannel.\n\nInstalling the current development version requires `Git <http://git-scm.com/>`__, a distributed source code management\nsystem.  If you have Git you can run the following to download and *link* the development version into your Python\nruntime::\n\n    git clone https://github.com/marrow/WebCore.git\n    pip install -e WebCore\n\nYou can then upgrade to the latest version at any time::\n\n    (cd WebCore; git pull; pip install -e .)\n\nExtra dependenies can be declared the same as per web-based installation::\n\n    pip install -e WebCore[development]\n\nIf you would like to make changes and contribute them back to the project, fork the GitHub project, make your changes,\nand submit a pull request.  This process is beyond the scope of this documentation; for more information see\n`GitHub's documentation <http://help.github.com/>`__.\n\n\nBasic Concepts\n==============\n\nApplication\n-----------\n\nThe ``Application`` class is the primary entry point for the web framework. Its constructor currently takes up to\nthree arguments:\n\n- ``root`` -- the root object to use as the controller for ``/`` requests\n\n- ``extensions`` -- a list of extensions to use with your application\n\n- ``logging`` -- Python ``logging`` configuration\n\nThe \"root controller\" is used as the starting point for dispatch resolution of the endpoint for a request, see the\nControllers section below for details on what can be used here, but it's basically anything.\n\nBy defualt the ``BaseExtension``, providing basic request and response objects and baisc views, is always enabled for \nyour application, has no configuration, and does not need to be instantiated yourself. Other extensions should be\ninstantiated and passed in the ``extensions`` list.\n\nLogging configuration offers two choices: simple \"global logging level\" by defining ``logging`` as a dictionary\nonly containing a ``level`` key naming the level to set, or full ``logging.config.dictConfig`` configuration. Passing\nonly a level is equivalent to running ``logging.basicConfig``.\n\nThis configuration can entirely come from YAML, for example::\n\n    root: !!python/name:web.app.example.RootController\n    \n    extensions:\n        - !!python/object:web.ext.debug.DebugExtension\n        - !!python/object:web.ext.analytics.AnalyticsExtension\n        - !!python/object:web.ext.annotation:AnnotationExtension\n    \n    logging:\n        level: debug\n\nThis would make managing complex extension configuration easier. One way to invoke WebCore with a configuration like\nthis, while allowing for a distinction between production and development environments and use under ModWSGI would\nbe::\n\n    import yaml\n    from web.core import Application\n    \n    fname = 'development.yaml' if __debug__ else 'production.yaml'\n    with open(fname, 'r', encoding='utf-8') as fh:\n        config = yaml.load(fh)\n    \n    app = Application(**config)\n    \n    if __name__ == \"__main__\":\n        app.serve('wsgiref')\n\nNow, running ``python run.py`` (if saved as ``run.py``) would serve the ``development.yaml`` configuration, and\nrunning as ``python -O run.py`` (optimization enabled) or with ``PYTHONOPTIMIZE=1`` set in the environment will\nutilize the ``production.yaml`` file.\n\nWebCore is highly aware running with optimizations enabled, eliminating many of the expensive validation checks that\nare only really useful in development. For example, calling an endpoint with invalid arguments will ``404`` with a\nfriendly warning in development, but ``500`` in production as the ``TypeError`` is not preemptively checked and\ncaught; this is one of the most expensive validation checks. Feel free to browse the code looking for ``if __debug__``\nblocks to see what else changes in \"production mode\".\n\nThe order you define the extensions in does not matter; they declare dependencies and will be automatically\ndependency-ordered when collecting callbacks. Please see the ``extension.py`` example for additional information on\nwhat you can do with them.\n\n\nContext\n-------\n\nThe overall application has an ``ApplicationContext`` associated with it. This object is passed around to the various\nextension callbacks and acts as an attribute access dictionary.  (All of the typical dictionary methods will work,\nand the keys can be accessed as attributes instead, saving some typing.) During the processing of a request a subclass\nis constructed called ``RequestContext`` and in-request extension callbacks, and your controller endpoints, are given\na reference to this instance.\n\nThe attributes present in the base ``ApplicationContext`` are:\n\n- ``app`` -- a reference to the ``Application`` instance\n\n- ``root`` -- the original object passed when constructing the ``Application`` instance\n\n- ``extension`` -- the ``WebExtensions`` extension registry\n\n- ``dispatch`` -- the ``WebDispatchers`` dispatch protocol bridge and plugin registry\n\n- ``view`` -- the ``WebViews`` view handler registry\n\nExtensions would access these during ``start`` and ``stop`` events, for example to register new view handlers.\n\nThe attributes present in the ``RequestContext`` (added by WebCore itself or the ``BaseExtension`` during request\nprocessing) are:\n\n- ``environ`` -- the WSGI request environment as passed to WebCore's WSGI handler\n\n- ``request`` -- a ``webob.Request`` representing the current HTTP request\n\n- ``response`` -- a ``webob.Response`` object corresponding to the response WebCore will return\n\n- ``path`` -- a list of dispatch steps represented by tuples of ``(handler, script_name)``\n\nAdditional attributes may be added by other extensions.\n\n\nControllers, Endpoints, Dispatch, Oh My!\n----------------------------------------\n\nControllers and, more generally, *callable endpoints*, are functions or methods called to process a request and return\na value for view or raise an exception. Non-method callables are passed the context as a first argument; methods are\nassumed to have access via ``self`` as the context will have been passed as the only positional argument to the class\nconstructor. *Callable endpoints* are additionally passed any unprocessed path elements as positional parameters, and\na combination of query string arguments (``GET`` values) and form-encoded body elements (``POST`` values) as keyword\narguments, with arguments from the request body taking precedence and duplicated keys being passed as a list of\nvalues. They may return any value there is a view registered for, see the\n`docstring of the view manager <https://github.com/marrow/WebCore/blob/develop/web/core/view.py?ts=4>`__ for details.\n\n*Static endpoints*, on the other hand, are non-callable objects that can be handled by a view. The very first example\nat the top of this document relies on the fact that there is a view to handle strings, both static, and as returned by\na *callable endpoint* such as::\n\n    def hello(context):\n        return \"Hello world!\"\n\nTo allow for customization of the name, you would write this endpoint as::\n\n    def hello(context, name=\"world\"):\n        return \"Hello {}!\".format(name)\n\nAs noted in the Application section, when Python is run with optimizations enabled (``-O`` or ``PYTHONOPTIMIZE`` set)\nunknown arguments being passed (unknown query string arguments or form values) will result in a ``TypeError`` being\nraised and thus a ``500 Internal Server Error`` due to the uncaught exception. In development (without optimizations)\na ``404 Not Found`` error with a message indicating the mismatched values will be the result. You can use ``*args``\nand ``**kwargs`` to capture any otherwise undefined positional and keyword arguments, or use an extension to mutate\nthe incoming data and strip invalid arguments prior to the endpoint being called.\n\nThat \"hello world\" endpoint, however, may be called in one of several different ways, as no other restrictions have\nbeen put in place:\n\n- ``GET /`` -- Hello world! (Default used.)\n\n- ``GET /Alice`` -- Hello Alice! (Passed positionally.)\n\n- ``GET /?name=Bob`` -- Hello Bob! (Via query string assignment.)\n\n- ``POST /`` submitting a form with a ``name`` field and value of ``Eve`` -- Hello Eve! (Via form-encoded body\n  assignment.)\n\nOther HTTP verbs will work as well, but a form-encoded body is only expected and processed on ``POST`` requests.\n\nThe process of finding the endpoint to use to process a request is called *dispatch*. There are a number of forms of\ndispatch available, some should be immediately familiar.\n\n- **Object dispatch.** This is the default (providided by the \n  `web.dispatch.object <https://github.com/marrow/web.dispatch.object>`__ package) form of dispatch for WebCore, and\n  is also utilized by several other frameworks such as TurboGears. Essentially each path element is looked up as\n  an attribute of the previously looked up object treating a path such as ``/foo/bar/baz`` as an attempt to resolve\n  the Python reference ``root.foo.bar.baz``. This is quite flexible, allowing easy redirection of descent using\n  Python-standard protocols such as ``__getattr__`` methods, use of lazy evaluation descriptors, etc., etc.\n\n- **Registered routes.** This will likely be the approach most familiar to developers switching from PHP frameworks or\n  who have used any of the major macro- or micro-frameworks in Python such as Django, Flask, etc. You explicitly map \n  URLs, generally using a regular expression or regular expression short-hand, to specific callable endpoints. Often\n  this is a accomplished using a decorator. WebCore offers this form of dispatch throuhg the\n  `web.dispatch.route <https://github.com/marrow/web.dispatch.route>`__ package.\n\n- **Traversal.** This is similar to object dispatch, but descending through mapping keys. The previous example then\n  translates to ``root['foo']['bar']['baz']``, allowing managed descent through the ``__getitem__`` protocol. This\n  is one of the methods (the other being routes) provided by Pyramid. We offer this form of dispatch through the\n  `web.dispatch.traversal <https://github.com/marrow/web.dispatch.traversal>`__ package.\n\nThere may be other dispatchers available and the protocol allows for \"dispatch middleware\" to offer even more flexible\napproaches to endpoint lookup. The dispatch protocol itself is framework agnostic (these example dispatchers are in\nno way WebCore-specific) and\n`has its own documentation <https://github.com/marrow/protocols/blob/master/dispatch/README.md>`__.\n\n\nPlugins and Namespaces\n======================\n\nWebCore recommends registration of extensions and other plugins as Python-standard ``entry_points`` references.\nPlease see the `relevant setuptools documentation \n<https://pythonhosted.org/setuptools/setuptools.html#dynamic-discovery-of-services-and-plugins>`__ for details on this\nprocess. Additionally, WebCore marks package namespaces for shared use. The namespaces used, and their purposes, are:\n\n- ``web`` -- the top level shared namespace for WebCore and WebCore accessories\n\n- ``web.app`` -- a namespace for reusable application components and your own use\n\n- ``web.ext`` -- a namespace for WebCore extensions; your own can be placed here\n\n- ``web.server`` -- light-weight WSGI server adapters; your own WSGI server can define a dependency-free adapter\n  here, for example\n\nThe plugin namespaces follow a similar pattern:\n\n- ``web.app`` -- re-usable components you can attach to your own controller trees\n\n- ``web.extension`` -- extensions registered by name and \"provides\" tag\n\n- ``web.server`` -- similarly, server adapters registered by name\n\nWebCore also makes use of the ``web.dispatch`` namespace to look up dispatchers. Other WebCore-related packages and\nextensions may make use of other plugin namespaces. Have a gander at WebCore's ``setup.py`` file for an example of\nhow to register plugins this way, and copy the ``__init__.py`` file from the ``web`` package into the overlay in your\nown package (and declare such in your ``setup.py`` package metadata as the ``namespace_packages`` argument) to\nparticipate in the Python package namespaces.\n\n\nVersion History\n===============\n\nVersion 2.0\n-----------\n\n- A complete modernization rewrite of WebCore, from the ground up.\n- Features multiple extension interfaces to extend registered view handlers and provide a uniform callback mechanism.\n- Standard usage makes use of no superglobals or \"thread locals\", instead relying on a context object collaboratively\n  populated by extensions.\n- WebCore's former \"dialect\" system is now dispatch.\n\nVersion 2.0.1\n-------------\n\n- Thanks Pypi.\n\nVersion 2.0.2\n-------------\n\n- Corrected argument specification for ``transform`` extension callbacks, fixing ``AnnotationExtension`` usage as per\n  `#163 <https://github.com/marrow/WebCore/issues/163>`__.\n- Additional source-level documentation and expanded examples.\n- An excessively large number of additional WSGI server adapters; now supported are: waitress\n  `tornado <http://s.webcore.io/aIaN>`__, `fcgi <http://s.webcore.io/fhVY>`__,\n  `cherrypy <http://s.webcore.io/aIoF>`__, `appengine <http://s.webcore.io/aIic>`__, `paste <http://s.webcore.io/aIdT>`__,\n  `eventlet <http://s.webcore.io/aIaa>`__, `gevent <http://s.webcore.io/aIpU>`__, `diesel <http://s.webcore.io/aIg2>`_,\n  and `bjoern <http://s.webcore.io/aIne>`__. Each is available as an ``extras_require`` by the same name which will\n  pull in the required third-party dependency.\n\nVersion 2.0.3\n-------------\n\n- Argument processing moved out of ``web.core`` into extension ``mutate`` handlers. Features improved rich\n  unflattening of query string and form encoded body parameters.  Configurable behaviour. For details, see:\n  `web/ext/args.py <https://github.com/marrow/WebCore/blob/develop/web/ext/args.py>`__\n- `Extensively documented <https://github.com/marrow/WebCore/blob/develop/web/ext/acl.py>`__ access control list\n  extension validating endpoint security and return value permission using context-aware predicates.\n- The ability for extensions to define additional callbacks for collection.\n- The ``DatabaseExtension`` (formerly ``DBExtension``) has been moved into `its own repository\n  <https://github.com/marrow/web.db>`__.\n- Content negotiation endpoint return value serialization, with pluggable ``dumps`` registry.\n- Complete unit test coverage.\n\n\nLicense\n=======\n\nWebCore has been released under the MIT Open Source license.\n\nThe MIT License\n---------------\n\nCopyright \u00a9 2006-2016 Alice Bevan-McGregor and contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n.. |ghwatch| image:: https://img.shields.io/github/watchers/marrow/WebCore.svg?style=social&label=Watch\n    :target: https://github.com/marrow/WebCore/subscription\n    :alt: Subscribe to project activity on Github.\n\n.. |ghstar| image:: https://img.shields.io/github/stars/marrow/WebCore.svg?style=social&label=Star\n    :target: https://github.com/marrow/WebCore/subscription\n    :alt: Star this project on Github.\n\n.. |ghfork| image:: https://img.shields.io/github/forks/marrow/WebCore.svg?style=social&label=Fork\n    :target: https://github.com/marrow/WebCore/fork\n    :alt: Fork this project on Github.\n\n.. |masterstatus| image:: http://img.shields.io/travis/marrow/WebCore/master.svg?style=flat\n    :target: https://travis-ci.org/marrow/WebCore/branches\n    :alt: Release build status.\n\n.. |mastercover| image:: http://img.shields.io/codecov/c/github/marrow/WebCore/master.svg?style=flat\n    :target: https://codecov.io/github/marrow/WebCore?branch=master\n    :alt: Release test coverage.\n\n.. |masterreq| image:: https://img.shields.io/requires/github/marrow/WebCore.svg\n    :target: https://requires.io/github/marrow/WebCore/requirements/?branch=master\n    :alt: Status of release dependencies.\n\n.. |developstatus| image:: http://img.shields.io/travis/marrow/WebCore/develop.svg?style=flat\n    :target: https://travis-ci.org/marrow/WebCore/branches\n    :alt: Development build status.\n\n.. |developcover| image:: http://img.shields.io/codecov/c/github/marrow/WebCore/develop.svg?style=flat\n    :target: https://codecov.io/github/marrow/WebCore?branch=develop\n    :alt: Development test coverage.\n\n.. |developreq| image:: https://img.shields.io/requires/github/marrow/WebCore.svg\n    :target: https://requires.io/github/marrow/WebCore/requirements/?branch=develop\n    :alt: Status of development dependencies.\n\n.. |issuecount| image:: http://img.shields.io/github/issues-raw/marrow/WebCore.svg?style=flat\n    :target: https://github.com/marrow/WebCore/issues\n    :alt: Github Issues\n\n.. |ghsince| image:: https://img.shields.io/github/commits-since/marrow/WebCore/2.0.3.svg\n    :target: https://github.com/marrow/WebCore/commits/develop\n    :alt: Changes since last release.\n\n.. |ghtag| image:: https://img.shields.io/github/tag/marrow/WebCore.svg\n    :target: https://github.com/marrow/WebCore/tree/2.0.3\n    :alt: Latest Github tagged release.\n\n.. |latestversion| image:: http://img.shields.io/pypi/v/WebCore.svg?style=flat\n    :target: https://pypi.python.org/pypi/WebCore\n    :alt: Latest released version.\n\n.. |downloads| image:: http://img.shields.io/pypi/dw/WebCore.svg?style=flat\n    :target: https://pypi.python.org/pypi/WebCore\n    :alt: Downloads per week.\n\n.. |cake| image:: http://img.shields.io/badge/cake-lie-1b87fb.svg?style=flat\n\n", "description_content_type": null, "docs_url": "https://pythonhosted.org/WebCore/", "download_url": "https://github.com/marrow/WebCore/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marrow/WebCore/", "keywords": "marrow", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "WebCore", "package_url": "https://pypi.org/project/WebCore/", "platform": "", "project_url": "https://pypi.org/project/WebCore/", "project_urls": {"Download": "https://github.com/marrow/WebCore/releases", "Homepage": "https://github.com/marrow/WebCore/"}, "release_url": "https://pypi.org/project/WebCore/2.0.3/", "requires_dist": null, "requires_python": "", "summary": "A powerful web development nanoframework so small it's not even a microframework.", "version": "2.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n\u00a9 2006-2016 Alice Bevan-McGregor and contributors.</blockquote>\n<blockquote>\n<a href=\"https://github.com/marrow/WebCore\" rel=\"nofollow\">https://github.com/marrow/WebCore</a></blockquote>\n<blockquote>\n<a href=\"https://pypi.python.org/pypi/WebCore\" rel=\"nofollow\"><img alt=\"Latest released version.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa536a3ecfeb248ca248c5d7c2f8e831a5de1788/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f576562436f72652e7376673f7374796c653d666c6174\"></a> <a href=\"https://github.com/marrow/WebCore/tree/2.0.3\" rel=\"nofollow\"><img alt=\"Latest Github tagged release.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ebf1d0f94a2acdb5a94f5a1b361bcb95d119d5b4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f6d6172726f772f576562436f72652e737667\"></a> <a href=\"https://pypi.python.org/pypi/WebCore\" rel=\"nofollow\"><img alt=\"Downloads per week.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/807a43443681c7c222024b088f1e562fedfe6f4c/687474703a2f2f696d672e736869656c64732e696f2f707970692f64772f576562436f72652e7376673f7374796c653d666c6174\"></a> <a href=\"https://travis-ci.org/marrow/WebCore/branches\" rel=\"nofollow\"><img alt=\"Release build status.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c861144fb669ba64a66b584c9538944ec7733ef0/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6d6172726f772f576562436f72652f6d61737465722e7376673f7374796c653d666c6174\"></a> <a href=\"https://codecov.io/github/marrow/WebCore?branch=master\" rel=\"nofollow\"><img alt=\"Release test coverage.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a912da1b51dc75c4322bf907f7e831c47e8812bb/687474703a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d6172726f772f576562436f72652f6d61737465722e7376673f7374796c653d666c6174\"></a> <a href=\"https://requires.io/github/marrow/WebCore/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Status of release dependencies.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2e52f7a0d9719d091b98a72ddb48aeacc38915c/68747470733a2f2f696d672e736869656c64732e696f2f72657175697265732f6769746875622f6d6172726f772f576562436f72652e737667\"></a> <a href=\"https://github.com/marrow/WebCore/subscription\" rel=\"nofollow\"><img alt=\"Subscribe to project activity on Github.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38f013376514c3e66937bd4f1298518096f49e23/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f6d6172726f772f576562436f72652e7376673f7374796c653d736f6369616c266c6162656c3d5761746368\"></a> <a href=\"https://github.com/marrow/WebCore/subscription\" rel=\"nofollow\"><img alt=\"Star this project on Github.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81cc37df230735c57c84be9109698b9688a53765/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6d6172726f772f576562436f72652e7376673f7374796c653d736f6369616c266c6162656c3d53746172\"></a></blockquote>\n<ol>\n<li><a href=\"#what-is-webcore\" rel=\"nofollow\">What is WebCore?</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a><ol>\n<li><a href=\"#dependencies-and-extras\" rel=\"nofollow\">Dependencies and Extras</a></li>\n<li><a href=\"#development-version\" rel=\"nofollow\">Development Version</a></li>\n</ol>\n</li>\n<li><a href=\"#basic-concepts\" rel=\"nofollow\">Basic Concepts</a><ol>\n<li><a href=\"#application\" rel=\"nofollow\">Application</a></li>\n<li><a href=\"#context\" rel=\"nofollow\">Context</a></li>\n<li><a href=\"#controllers-endpoints-dispatch-oh-my\" rel=\"nofollow\">Controllers, Endpoints, Dispatch, Oh My!</a></li>\n</ol>\n</li>\n<li><a href=\"#plugins-and-namespaces\" rel=\"nofollow\">Plugins and Namespaces</a></li>\n<li><a href=\"#version-history\" rel=\"nofollow\">Version History</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ol>\n<div id=\"what-is-webcore\">\n<h2>What is WebCore?</h2>\n<p>WebCore is a nanoframework, a fraction of the size of competing \u201cmicroframeworks\u201d, and culmination of more than ten\nyears of web development experience. It provides a clean API for standard points of extension while strongly\nencouraging model, view, controller separation. Being less than 400 source lines of code (SLoC; excluding comments and\ndocumentation) and containing more comments and lines of documentation than lines of code, WebCore is built to be\ninsanely easy to test, adapt, and use, allowing any developer familiar with programming (not just Python programming)\nto be able to read and understand the entirety of the framework in an evening.</p>\n<p>It is substantially smaller and more efficient than monolithic frameworks such as Django or Pyramid:</p>\n<pre>from web.core import Application\n\nApplication(\"Hi.\").serve('wsgiref')\n</pre>\n<p>Really; that\u2019s it. (It can be made into one line if you\u2019re willing to make the import ugly using <tt>__import__</tt>.) The\nApplication class represents a standard Python WSGI application, the rest is up to you to pick the components that\nbest fit your own needs.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installing <tt>WebCore</tt> is easy, just execute the following in a terminal:</p>\n<pre>pip install WebCore\n</pre>\n<p><strong>Note:</strong> We <em>strongly</em> recommend always using a container, virtualization, or sandboxing environment of some kind when\ndeveloping using Python; installing things system-wide is yucky (for a variety of reasons) nine times out of ten.  We\nprefer light-weight <a href=\"https://virtualenv.pypa.io/en/latest/virtualenv.html\" rel=\"nofollow\">virtualenv</a>, others prefer solutions as\nrobust as <a href=\"http://www.vagrantup.com\" rel=\"nofollow\">Vagrant</a>.</p>\n<p>If you add <tt>WebCore</tt> to the <tt>install_requires</tt> argument of the call to <tt>setup()</tt> in your application\u2019s\n<tt>setup.py</tt> file, WebCore will be automatically installed and made available when your own application or\nlibrary is installed.  We recommend using \u201cless than\u201d version numbers to ensure there are no unintentional\nside-effects when updating.  Use <tt>WebCore&lt;2.1</tt> to get all bugfixes for the current release, and\n<tt>WebCore&lt;3.0</tt> to get bugfixes and feature updates while ensuring that large breaking changes are not installed.</p>\n<div id=\"dependencies-and-extras\">\n<h3>Dependencies and Extras</h3>\n<p>WebCore only depends on the excellent <a href=\"http://webob.org\" rel=\"nofollow\">webob</a> package to provide request, response, and HTTP\nstatus code exception helpers and the <a href=\"https://github.com/marrow/package\" rel=\"nofollow\">marrow.package</a> utility package for plugin\nmanagement. All other dependencies will be application dependencies; choice of template engine,\ndatabase layer, session storage mechanism, and even dispatch method are left entirely up to the developer making use\nof the framework. Provided are a number of <tt>extras</tt> requirements, which you can define using a comma-separated list\nappended to the package name during installation from the command-line, or within your own package\u2019s\n<tt>install_requires</tt>. For example, to install a typical set of development tools at the same time as WebCore, run:</p>\n<pre>pip install WebCore[development]\n</pre>\n<p>The available extras are:</p>\n<ul>\n<li><tt>development</tt> \u2013 this installs a recommended set of development-time packages, including\n<a href=\"http://pytest.org/\" rel=\"nofollow\">pytest</a> and a suite of plugins for it, plus the\n<a href=\"https://github.com/TurboGears/backlash\" rel=\"nofollow\">backlash</a> interactive debugger (needed by the optional\n<tt>DebugExtension</tt>), object dispatch, the comprehensive <tt>ptipython</tt> upgraded REPL, and the\n<a href=\"https://github.com/Pylons/waitress\" rel=\"nofollow\">waitress</a> development web server.</li>\n<li><tt>production</tt> \u2013 install recommended production-time packages; currently this only installs the <tt>flup</tt> FastCGI\nserver bridge.</li>\n</ul>\n<p>The default choices for dispatch are allowed as extras:</p>\n<ul>\n<li><tt>object</tt> \u2013 install object dispatch</li>\n<li><tt>route</tt> \u2013 install route-based dispatch</li>\n<li><tt>traversal</tt> \u2013 install traversal dispatch</li>\n</ul>\n<p>You can also name a supported server bridge as an extra.  Currently available bridges with third-party dependencies include:</p>\n<ul>\n<li><tt>waitress</tt></li>\n<li><tt>tornado</tt></li>\n<li><tt>flup</tt></li>\n</ul>\n</div>\n<div id=\"development-version\">\n<h3>Development Version</h3>\n<p><a href=\"https://travis-ci.org/marrow/WebCore/branches\" rel=\"nofollow\"><img alt=\"Development build status.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a28b90833e0b2049578dd71fe83d4997977e1be/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6d6172726f772f576562436f72652f646576656c6f702e7376673f7374796c653d666c6174\"></a> <a href=\"https://codecov.io/github/marrow/WebCore?branch=develop\" rel=\"nofollow\"><img alt=\"Development test coverage.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8aed578f481722151f163eed23cd9c35f76df70/687474703a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d6172726f772f576562436f72652f646576656c6f702e7376673f7374796c653d666c6174\"></a> <a href=\"https://github.com/marrow/WebCore/commits/develop\" rel=\"nofollow\"><img alt=\"Changes since last release.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca777e84b60fc9abba11fbc9e8cc32bb3b2e2771/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f6d6172726f772f576562436f72652f322e302e332e737667\"></a> <a href=\"https://github.com/marrow/WebCore/issues\" rel=\"nofollow\"><img alt=\"Github Issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11e600f6fde1e13931c6f16921c724e3331afa3d/687474703a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f6d6172726f772f576562436f72652e7376673f7374796c653d666c6174\"></a> <a href=\"https://github.com/marrow/WebCore/fork\" rel=\"nofollow\"><img alt=\"Fork this project on Github.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88d1e7441bacc2a44f6a11d8f5a3c2496c79033d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6d6172726f772f576562436f72652e7376673f7374796c653d736f6369616c266c6162656c3d466f726b\"></a></p>\n<p>Development takes place on <a href=\"https://github.com/\" rel=\"nofollow\">GitHub</a> in the\n<a href=\"https://github.com/marrow/WebCore/\" rel=\"nofollow\">WebCore</a> project.  Issue tracking, documentation, and downloads\nare provided there. Development chat (both development of WebCore and chat for users using WebCore to develop their\nown solutions) is graciously provided by <a>Freenode</a> in the <tt>#webcore</tt>\nchannel.</p>\n<p>Installing the current development version requires <a href=\"http://git-scm.com/\" rel=\"nofollow\">Git</a>, a distributed source code management\nsystem.  If you have Git you can run the following to download and <em>link</em> the development version into your Python\nruntime:</p>\n<pre>git clone https://github.com/marrow/WebCore.git\npip install -e WebCore\n</pre>\n<p>You can then upgrade to the latest version at any time:</p>\n<pre>(cd WebCore; git pull; pip install -e .)\n</pre>\n<p>Extra dependenies can be declared the same as per web-based installation:</p>\n<pre>pip install -e WebCore[development]\n</pre>\n<p>If you would like to make changes and contribute them back to the project, fork the GitHub project, make your changes,\nand submit a pull request.  This process is beyond the scope of this documentation; for more information see\n<a href=\"http://help.github.com/\" rel=\"nofollow\">GitHub\u2019s documentation</a>.</p>\n</div>\n</div>\n<div id=\"basic-concepts\">\n<h2>Basic Concepts</h2>\n<div id=\"application\">\n<h3>Application</h3>\n<p>The <tt>Application</tt> class is the primary entry point for the web framework. Its constructor currently takes up to\nthree arguments:</p>\n<ul>\n<li><tt>root</tt> \u2013 the root object to use as the controller for <tt>/</tt> requests</li>\n<li><tt>extensions</tt> \u2013 a list of extensions to use with your application</li>\n<li><tt>logging</tt> \u2013 Python <tt>logging</tt> configuration</li>\n</ul>\n<p>The \u201croot controller\u201d is used as the starting point for dispatch resolution of the endpoint for a request, see the\nControllers section below for details on what can be used here, but it\u2019s basically anything.</p>\n<p>By defualt the <tt>BaseExtension</tt>, providing basic request and response objects and baisc views, is always enabled for\nyour application, has no configuration, and does not need to be instantiated yourself. Other extensions should be\ninstantiated and passed in the <tt>extensions</tt> list.</p>\n<p>Logging configuration offers two choices: simple \u201cglobal logging level\u201d by defining <tt>logging</tt> as a dictionary\nonly containing a <tt>level</tt> key naming the level to set, or full <tt>logging.config.dictConfig</tt> configuration. Passing\nonly a level is equivalent to running <tt>logging.basicConfig</tt>.</p>\n<p>This configuration can entirely come from YAML, for example:</p>\n<pre>root: !!python/name:web.app.example.RootController\n\nextensions:\n    - !!python/object:web.ext.debug.DebugExtension\n    - !!python/object:web.ext.analytics.AnalyticsExtension\n    - !!python/object:web.ext.annotation:AnnotationExtension\n\nlogging:\n    level: debug\n</pre>\n<p>This would make managing complex extension configuration easier. One way to invoke WebCore with a configuration like\nthis, while allowing for a distinction between production and development environments and use under ModWSGI would\nbe:</p>\n<pre>import yaml\nfrom web.core import Application\n\nfname = 'development.yaml' if __debug__ else 'production.yaml'\nwith open(fname, 'r', encoding='utf-8') as fh:\n    config = yaml.load(fh)\n\napp = Application(**config)\n\nif __name__ == \"__main__\":\n    app.serve('wsgiref')\n</pre>\n<p>Now, running <tt>python run.py</tt> (if saved as <tt>run.py</tt>) would serve the <tt>development.yaml</tt> configuration, and\nrunning as <tt>python <span class=\"pre\">-O</span> run.py</tt> (optimization enabled) or with <tt>PYTHONOPTIMIZE=1</tt> set in the environment will\nutilize the <tt>production.yaml</tt> file.</p>\n<p>WebCore is highly aware running with optimizations enabled, eliminating many of the expensive validation checks that\nare only really useful in development. For example, calling an endpoint with invalid arguments will <tt>404</tt> with a\nfriendly warning in development, but <tt>500</tt> in production as the <tt>TypeError</tt> is not preemptively checked and\ncaught; this is one of the most expensive validation checks. Feel free to browse the code looking for <tt>if __debug__</tt>\nblocks to see what else changes in \u201cproduction mode\u201d.</p>\n<p>The order you define the extensions in does not matter; they declare dependencies and will be automatically\ndependency-ordered when collecting callbacks. Please see the <tt>extension.py</tt> example for additional information on\nwhat you can do with them.</p>\n</div>\n<div id=\"context\">\n<h3>Context</h3>\n<p>The overall application has an <tt>ApplicationContext</tt> associated with it. This object is passed around to the various\nextension callbacks and acts as an attribute access dictionary.  (All of the typical dictionary methods will work,\nand the keys can be accessed as attributes instead, saving some typing.) During the processing of a request a subclass\nis constructed called <tt>RequestContext</tt> and in-request extension callbacks, and your controller endpoints, are given\na reference to this instance.</p>\n<p>The attributes present in the base <tt>ApplicationContext</tt> are:</p>\n<ul>\n<li><tt>app</tt> \u2013 a reference to the <tt>Application</tt> instance</li>\n<li><tt>root</tt> \u2013 the original object passed when constructing the <tt>Application</tt> instance</li>\n<li><tt>extension</tt> \u2013 the <tt>WebExtensions</tt> extension registry</li>\n<li><tt>dispatch</tt> \u2013 the <tt>WebDispatchers</tt> dispatch protocol bridge and plugin registry</li>\n<li><tt>view</tt> \u2013 the <tt>WebViews</tt> view handler registry</li>\n</ul>\n<p>Extensions would access these during <tt>start</tt> and <tt>stop</tt> events, for example to register new view handlers.</p>\n<p>The attributes present in the <tt>RequestContext</tt> (added by WebCore itself or the <tt>BaseExtension</tt> during request\nprocessing) are:</p>\n<ul>\n<li><tt>environ</tt> \u2013 the WSGI request environment as passed to WebCore\u2019s WSGI handler</li>\n<li><tt>request</tt> \u2013 a <tt>webob.Request</tt> representing the current HTTP request</li>\n<li><tt>response</tt> \u2013 a <tt>webob.Response</tt> object corresponding to the response WebCore will return</li>\n<li><tt>path</tt> \u2013 a list of dispatch steps represented by tuples of <tt>(handler, script_name)</tt></li>\n</ul>\n<p>Additional attributes may be added by other extensions.</p>\n</div>\n<div id=\"controllers-endpoints-dispatch-oh-my\">\n<h3>Controllers, Endpoints, Dispatch, Oh My!</h3>\n<p>Controllers and, more generally, <em>callable endpoints</em>, are functions or methods called to process a request and return\na value for view or raise an exception. Non-method callables are passed the context as a first argument; methods are\nassumed to have access via <tt>self</tt> as the context will have been passed as the only positional argument to the class\nconstructor. <em>Callable endpoints</em> are additionally passed any unprocessed path elements as positional parameters, and\na combination of query string arguments (<tt>GET</tt> values) and form-encoded body elements (<tt>POST</tt> values) as keyword\narguments, with arguments from the request body taking precedence and duplicated keys being passed as a list of\nvalues. They may return any value there is a view registered for, see the\n<a href=\"https://github.com/marrow/WebCore/blob/develop/web/core/view.py?ts=4\" rel=\"nofollow\">docstring of the view manager</a> for details.</p>\n<p><em>Static endpoints</em>, on the other hand, are non-callable objects that can be handled by a view. The very first example\nat the top of this document relies on the fact that there is a view to handle strings, both static, and as returned by\na <em>callable endpoint</em> such as:</p>\n<pre>def hello(context):\n    return \"Hello world!\"\n</pre>\n<p>To allow for customization of the name, you would write this endpoint as:</p>\n<pre>def hello(context, name=\"world\"):\n    return \"Hello {}!\".format(name)\n</pre>\n<p>As noted in the Application section, when Python is run with optimizations enabled (<tt><span class=\"pre\">-O</span></tt> or <tt>PYTHONOPTIMIZE</tt> set)\nunknown arguments being passed (unknown query string arguments or form values) will result in a <tt>TypeError</tt> being\nraised and thus a <tt>500 Internal Server Error</tt> due to the uncaught exception. In development (without optimizations)\na <tt>404 Not Found</tt> error with a message indicating the mismatched values will be the result. You can use <tt>*args</tt>\nand <tt>**kwargs</tt> to capture any otherwise undefined positional and keyword arguments, or use an extension to mutate\nthe incoming data and strip invalid arguments prior to the endpoint being called.</p>\n<p>That \u201chello world\u201d endpoint, however, may be called in one of several different ways, as no other restrictions have\nbeen put in place:</p>\n<ul>\n<li><tt>GET /</tt> \u2013 Hello world! (Default used.)</li>\n<li><tt>GET /Alice</tt> \u2013 Hello Alice! (Passed positionally.)</li>\n<li><tt>GET <span class=\"pre\">/?name=Bob</span></tt> \u2013 Hello Bob! (Via query string assignment.)</li>\n<li><tt>POST /</tt> submitting a form with a <tt>name</tt> field and value of <tt>Eve</tt> \u2013 Hello Eve! (Via form-encoded body\nassignment.)</li>\n</ul>\n<p>Other HTTP verbs will work as well, but a form-encoded body is only expected and processed on <tt>POST</tt> requests.</p>\n<p>The process of finding the endpoint to use to process a request is called <em>dispatch</em>. There are a number of forms of\ndispatch available, some should be immediately familiar.</p>\n<ul>\n<li><strong>Object dispatch.</strong> This is the default (providided by the\n<a href=\"https://github.com/marrow/web.dispatch.object\" rel=\"nofollow\">web.dispatch.object</a> package) form of dispatch for WebCore, and\nis also utilized by several other frameworks such as TurboGears. Essentially each path element is looked up as\nan attribute of the previously looked up object treating a path such as <tt>/foo/bar/baz</tt> as an attempt to resolve\nthe Python reference <tt>root.foo.bar.baz</tt>. This is quite flexible, allowing easy redirection of descent using\nPython-standard protocols such as <tt>__getattr__</tt> methods, use of lazy evaluation descriptors, etc., etc.</li>\n<li><strong>Registered routes.</strong> This will likely be the approach most familiar to developers switching from PHP frameworks or\nwho have used any of the major macro- or micro-frameworks in Python such as Django, Flask, etc. You explicitly map\nURLs, generally using a regular expression or regular expression short-hand, to specific callable endpoints. Often\nthis is a accomplished using a decorator. WebCore offers this form of dispatch throuhg the\n<a href=\"https://github.com/marrow/web.dispatch.route\" rel=\"nofollow\">web.dispatch.route</a> package.</li>\n<li><strong>Traversal.</strong> This is similar to object dispatch, but descending through mapping keys. The previous example then\ntranslates to <tt><span class=\"pre\">root['foo']['bar']['baz']</span></tt>, allowing managed descent through the <tt>__getitem__</tt> protocol. This\nis one of the methods (the other being routes) provided by Pyramid. We offer this form of dispatch through the\n<a href=\"https://github.com/marrow/web.dispatch.traversal\" rel=\"nofollow\">web.dispatch.traversal</a> package.</li>\n</ul>\n<p>There may be other dispatchers available and the protocol allows for \u201cdispatch middleware\u201d to offer even more flexible\napproaches to endpoint lookup. The dispatch protocol itself is framework agnostic (these example dispatchers are in\nno way WebCore-specific) and\n<a href=\"https://github.com/marrow/protocols/blob/master/dispatch/README.md\" rel=\"nofollow\">has its own documentation</a>.</p>\n</div>\n</div>\n<div id=\"plugins-and-namespaces\">\n<h2>Plugins and Namespaces</h2>\n<p>WebCore recommends registration of extensions and other plugins as Python-standard <tt>entry_points</tt> references.\nPlease see the <a href=\"https://pythonhosted.org/setuptools/setuptools.html#dynamic-discovery-of-services-and-plugins\" rel=\"nofollow\">relevant setuptools documentation</a> for details on this\nprocess. Additionally, WebCore marks package namespaces for shared use. The namespaces used, and their purposes, are:</p>\n<ul>\n<li><tt>web</tt> \u2013 the top level shared namespace for WebCore and WebCore accessories</li>\n<li><tt>web.app</tt> \u2013 a namespace for reusable application components and your own use</li>\n<li><tt>web.ext</tt> \u2013 a namespace for WebCore extensions; your own can be placed here</li>\n<li><tt>web.server</tt> \u2013 light-weight WSGI server adapters; your own WSGI server can define a dependency-free adapter\nhere, for example</li>\n</ul>\n<p>The plugin namespaces follow a similar pattern:</p>\n<ul>\n<li><tt>web.app</tt> \u2013 re-usable components you can attach to your own controller trees</li>\n<li><tt>web.extension</tt> \u2013 extensions registered by name and \u201cprovides\u201d tag</li>\n<li><tt>web.server</tt> \u2013 similarly, server adapters registered by name</li>\n</ul>\n<p>WebCore also makes use of the <tt>web.dispatch</tt> namespace to look up dispatchers. Other WebCore-related packages and\nextensions may make use of other plugin namespaces. Have a gander at WebCore\u2019s <tt>setup.py</tt> file for an example of\nhow to register plugins this way, and copy the <tt>__init__.py</tt> file from the <tt>web</tt> package into the overlay in your\nown package (and declare such in your <tt>setup.py</tt> package metadata as the <tt>namespace_packages</tt> argument) to\nparticipate in the Python package namespaces.</p>\n</div>\n<div id=\"version-history\">\n<h2>Version History</h2>\n<div id=\"version-2-0\">\n<h3>Version 2.0</h3>\n<ul>\n<li>A complete modernization rewrite of WebCore, from the ground up.</li>\n<li>Features multiple extension interfaces to extend registered view handlers and provide a uniform callback mechanism.</li>\n<li>Standard usage makes use of no superglobals or \u201cthread locals\u201d, instead relying on a context object collaboratively\npopulated by extensions.</li>\n<li>WebCore\u2019s former \u201cdialect\u201d system is now dispatch.</li>\n</ul>\n</div>\n<div id=\"version-2-0-1\">\n<h3>Version 2.0.1</h3>\n<ul>\n<li>Thanks Pypi.</li>\n</ul>\n</div>\n<div id=\"version-2-0-2\">\n<h3>Version 2.0.2</h3>\n<ul>\n<li>Corrected argument specification for <tt>transform</tt> extension callbacks, fixing <tt>AnnotationExtension</tt> usage as per\n<a href=\"https://github.com/marrow/WebCore/issues/163\" rel=\"nofollow\">#163</a>.</li>\n<li>Additional source-level documentation and expanded examples.</li>\n<li>An excessively large number of additional WSGI server adapters; now supported are: waitress\n<a href=\"http://s.webcore.io/aIaN\" rel=\"nofollow\">tornado</a>, <a href=\"http://s.webcore.io/fhVY\" rel=\"nofollow\">fcgi</a>,\n<a href=\"http://s.webcore.io/aIoF\" rel=\"nofollow\">cherrypy</a>, <a href=\"http://s.webcore.io/aIic\" rel=\"nofollow\">appengine</a>, <a href=\"http://s.webcore.io/aIdT\" rel=\"nofollow\">paste</a>,\n<a href=\"http://s.webcore.io/aIaa\" rel=\"nofollow\">eventlet</a>, <a href=\"http://s.webcore.io/aIpU\" rel=\"nofollow\">gevent</a>, <a href=\"http://s.webcore.io/aIg2\" rel=\"nofollow\">diesel</a>,\nand <a href=\"http://s.webcore.io/aIne\" rel=\"nofollow\">bjoern</a>. Each is available as an <tt>extras_require</tt> by the same name which will\npull in the required third-party dependency.</li>\n</ul>\n</div>\n<div id=\"version-2-0-3\">\n<h3>Version 2.0.3</h3>\n<ul>\n<li>Argument processing moved out of <tt>web.core</tt> into extension <tt>mutate</tt> handlers. Features improved rich\nunflattening of query string and form encoded body parameters.  Configurable behaviour. For details, see:\n<a href=\"https://github.com/marrow/WebCore/blob/develop/web/ext/args.py\" rel=\"nofollow\">web/ext/args.py</a></li>\n<li><a href=\"https://github.com/marrow/WebCore/blob/develop/web/ext/acl.py\" rel=\"nofollow\">Extensively documented</a> access control list\nextension validating endpoint security and return value permission using context-aware predicates.</li>\n<li>The ability for extensions to define additional callbacks for collection.</li>\n<li>The <tt>DatabaseExtension</tt> (formerly <tt>DBExtension</tt>) has been moved into <a href=\"https://github.com/marrow/web.db\" rel=\"nofollow\">its own repository</a>.</li>\n<li>Content negotiation endpoint return value serialization, with pluggable <tt>dumps</tt> registry.</li>\n<li>Complete unit test coverage.</li>\n</ul>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>WebCore has been released under the MIT Open Source license.</p>\n<div id=\"the-mit-license\">\n<h3>The MIT License</h3>\n<p>Copyright \u00a9 2006-2016 Alice Bevan-McGregor and contributors.</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4911121, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "1d016a0f68b101c2f47539f99d256d7d", "sha256": "6f7af537c6cb5a923272a09ee73effec6883f6c85037337c30a4a6dec8733356"}, "downloads": -1, "filename": "WebCore-0.5-py2.6.egg", "has_sig": false, "md5_digest": "1d016a0f68b101c2f47539f99d256d7d", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 65712, "upload_time": "2009-11-23T03:28:15", "upload_time_iso_8601": "2009-11-23T03:28:15.174465Z", "url": "https://files.pythonhosted.org/packages/c9/59/50514767a3e4641fa929c7f7df2fb206b9987d785fac058b28f4f024c87f/WebCore-0.5-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e97ab57ab1bd27929f64bc3ec069e756", "sha256": "cc0714ae4812a6b1685b4c19c721ccbe2fc2b365d95befb21c7e67023deba052"}, "downloads": -1, "filename": "WebCore-0.5.tar.gz", "has_sig": false, "md5_digest": "e97ab57ab1bd27929f64bc3ec069e756", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22646, "upload_time": "2009-11-23T03:28:12", "upload_time_iso_8601": "2009-11-23T03:28:12.623760Z", "url": "https://files.pythonhosted.org/packages/35/35/6e8b9649cad90ec676f56eea8ebae5cee69c44be2f28b35a0fa68ed6779b/WebCore-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "f55148dc9f3175f405734f2bcb76b93a", "sha256": "96c8d7da27f97af79906156acfa6f8eea6a446be39a77103c9ad278a304ffcb3"}, "downloads": -1, "filename": "WebCore-0.5.1-py2.5.egg", "has_sig": false, "md5_digest": "f55148dc9f3175f405734f2bcb76b93a", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 65669, "upload_time": "2009-11-23T04:30:57", "upload_time_iso_8601": "2009-11-23T04:30:57.838780Z", "url": "https://files.pythonhosted.org/packages/58/11/594279710a0365fe83f7bfa24d5e7c179da01f4f8e8884a92217284c8b8c/WebCore-0.5.1-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "33b1c405a363fdf807f6ab846a1efa8c", "sha256": "5bbb1c23973da5c4700253f44c5f5d09b01a83b73ee32226e62b651f83ecc0e5"}, "downloads": -1, "filename": "WebCore-0.5.1-py2.6.egg", "has_sig": false, "md5_digest": "33b1c405a363fdf807f6ab846a1efa8c", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 65672, "upload_time": "2009-11-23T04:30:42", "upload_time_iso_8601": "2009-11-23T04:30:42.965477Z", "url": "https://files.pythonhosted.org/packages/29/3a/1fd967141e5d2190f1596896d8952f543a3602e606a49d024cd11f7a53dc/WebCore-0.5.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2800e5d7adb842e329fed485ee28a849", "sha256": "de10ffbf4c9277131b0b7975d81be35cda810efc3e383c4875494be6958da617"}, "downloads": -1, "filename": "WebCore-0.5.1.tar.gz", "has_sig": false, "md5_digest": "2800e5d7adb842e329fed485ee28a849", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22619, "upload_time": "2009-11-23T04:30:40", "upload_time_iso_8601": "2009-11-23T04:30:40.607847Z", "url": "https://files.pythonhosted.org/packages/52/d0/b761078fe955fd7272749d69ed72a3db551d7a406e2c4ec7aa05875fc701/WebCore-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "c4aee35f90a1ba6abb593e72b4729f6e", "sha256": "3a778bc0e8472283a1972f38546590fdd71cbe24a9b2252af9166a5d91096943"}, "downloads": -1, "filename": "WebCore-0.5.2-py2.5.egg", "has_sig": false, "md5_digest": "c4aee35f90a1ba6abb593e72b4729f6e", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 65672, "upload_time": "2009-11-26T12:08:41", "upload_time_iso_8601": "2009-11-26T12:08:41.137892Z", "url": "https://files.pythonhosted.org/packages/97/a5/5827236afd07aacbd5570b078ed0d699e59b5e11d38f8a4c9ef4df374374/WebCore-0.5.2-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc62e58086453fc7e40cf5d9f73ac350", "sha256": "2c0dd06d5302153a8e1e0a415c86586991cfcc7f2d1c235727985ca1e7056bdb"}, "downloads": -1, "filename": "WebCore-0.5.2-py2.6.egg", "has_sig": false, "md5_digest": "bc62e58086453fc7e40cf5d9f73ac350", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 65675, "upload_time": "2009-11-26T12:08:33", "upload_time_iso_8601": "2009-11-26T12:08:33.329115Z", "url": "https://files.pythonhosted.org/packages/b8/51/b5c7f4d1f4a378f722e56012c8701f08bc37b85de0c7d6d2f0ed7fd910d8/WebCore-0.5.2-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a05ded751a15e8740bb7ef21099d258", "sha256": "295e057c0596a14845baa111d01e359348ee96bb41f416ede242d4feb3e5f564"}, "downloads": -1, "filename": "WebCore-0.5.2.tar.gz", "has_sig": false, "md5_digest": "0a05ded751a15e8740bb7ef21099d258", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22515, "upload_time": "2009-11-26T12:08:31", "upload_time_iso_8601": "2009-11-26T12:08:31.361693Z", "url": "https://files.pythonhosted.org/packages/4e/c6/f4f7d42db2bbaf584a2972a540781208a717d4c7b8b02bc3b7da981322d4/WebCore-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "4ee047be984feb121bcbbf1832ff3287", "sha256": "9d126c5b0204651525a6fc2bc28a75cea5e57222ed8e61b10afe091f24d155dc"}, "downloads": -1, "filename": "WebCore-0.5.3-py2.5.egg", "has_sig": false, "md5_digest": "4ee047be984feb121bcbbf1832ff3287", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 65640, "upload_time": "2009-12-03T09:20:09", "upload_time_iso_8601": "2009-12-03T09:20:09.890545Z", "url": "https://files.pythonhosted.org/packages/95/79/c5835ac0e51454134174bb1fd00029e4a84c706786140eaf3a763f7d2d1a/WebCore-0.5.3-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b66e9fc09a4b4be62dc209bf7d1cc7df", "sha256": "1d76e01d7c6faca54156fd960d14a7b33536fbeb5c2bc970be6c11917517f324"}, "downloads": -1, "filename": "WebCore-0.5.3-py2.6.egg", "has_sig": false, "md5_digest": "b66e9fc09a4b4be62dc209bf7d1cc7df", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 65642, "upload_time": "2009-12-03T09:19:10", "upload_time_iso_8601": "2009-12-03T09:19:10.125108Z", "url": "https://files.pythonhosted.org/packages/c6/7f/a5fdca4e4d98b772542bb45ccc755ebfdb1e75dd12f4ce158a5929582a91/WebCore-0.5.3-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbed5168b878b475c2cc83eaf3bb2faa", "sha256": "0677911caae0929a6be0b85e291e2995321bf59306700c1dc42897160d7a9ebe"}, "downloads": -1, "filename": "WebCore-0.5.3.tar.gz", "has_sig": false, "md5_digest": "bbed5168b878b475c2cc83eaf3bb2faa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22565, "upload_time": "2009-12-03T09:19:07", "upload_time_iso_8601": "2009-12-03T09:19:07.745841Z", "url": "https://files.pythonhosted.org/packages/0e/19/d95e15b5a055721723a014ee4d15777c99397f819381c8f76ef3cfecd330/WebCore-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "17fdade00908b3a0bb0677c0d89be496", "sha256": "73836717230962975d3d6c5bf61731ff60b211523bf71ed1e33291bf3a842413"}, "downloads": -1, "filename": "WebCore-0.5.4-py2.6.egg", "has_sig": false, "md5_digest": "17fdade00908b3a0bb0677c0d89be496", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 63762, "upload_time": "2009-12-08T11:07:49", "upload_time_iso_8601": "2009-12-08T11:07:49.018673Z", "url": "https://files.pythonhosted.org/packages/45/e3/6db30b788ec7323ba6663e94e6b3146e0697ee1f97e19c0fda085716541b/WebCore-0.5.4-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a87b62236f81ca348a4e1eea1c0167cc", "sha256": "a58debf41ea496ed17c191cd6bfaf8d718b157dc609a5845b8cb3779904e7cc1"}, "downloads": -1, "filename": "WebCore-0.5.4.tar.gz", "has_sig": false, "md5_digest": "a87b62236f81ca348a4e1eea1c0167cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20956, "upload_time": "2009-12-08T11:07:46", "upload_time_iso_8601": "2009-12-08T11:07:46.970008Z", "url": "https://files.pythonhosted.org/packages/e6/fc/83571565308eebfd980d0b12282de03ee383767b3960242ffd7cc02f4e41/WebCore-0.5.4.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "e3662c535761c5a693383b84ae1e9ca2", "sha256": "2f68b760b00156039beaa439d4b88ae76111db33bff9452b3c2efdfc22b6dc25"}, "downloads": -1, "filename": "WebCore-0.6-py2.6.egg", "has_sig": false, "md5_digest": "e3662c535761c5a693383b84ae1e9ca2", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 64402, "upload_time": "2010-02-02T11:21:25", "upload_time_iso_8601": "2010-02-02T11:21:25.991584Z", "url": "https://files.pythonhosted.org/packages/41/f3/90821924adb441b2ff1f618022c2f783454e99cbb478fe97df6dd2c78154/WebCore-0.6-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d80f5b93d3a91e69c1589a99eacffdd", "sha256": "6e3475c4d6620fd675573d91e19b77ec6e4250bdabc7183a96db25a257835f7f"}, "downloads": -1, "filename": "WebCore-0.6.tar.gz", "has_sig": false, "md5_digest": "9d80f5b93d3a91e69c1589a99eacffdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21170, "upload_time": "2010-02-02T11:21:15", "upload_time_iso_8601": "2010-02-02T11:21:15.105856Z", "url": "https://files.pythonhosted.org/packages/d8/df/8155bc42257da239e61b73069430ac8458b02c9c4bb06d6514b1c94fc38e/WebCore-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "7d4575c02fa2f884ba3b78e4dfe2f364", "sha256": "bc9a1380405db15f5ca0f71251054ad70752f4cf004275ea20d67736a6a5d88e"}, "downloads": -1, "filename": "WebCore-0.6.1-py2.6.egg", "has_sig": false, "md5_digest": "7d4575c02fa2f884ba3b78e4dfe2f364", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 64452, "upload_time": "2010-02-10T05:01:35", "upload_time_iso_8601": "2010-02-10T05:01:35.259711Z", "url": "https://files.pythonhosted.org/packages/dd/df/2eb1bc6bf4222d613e40b1c07d8533be682180d8ea83cd55d696a5a568d3/WebCore-0.6.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2e3ba2092acfe0d02c3782b8868377b", "sha256": "97e1363638a3f5ecfea09afc007487dc242a25f822548737c37a63782ff3c256"}, "downloads": -1, "filename": "WebCore-0.6.1.tar.gz", "has_sig": false, "md5_digest": "c2e3ba2092acfe0d02c3782b8868377b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21168, "upload_time": "2010-02-10T05:01:32", "upload_time_iso_8601": "2010-02-10T05:01:32.756717Z", "url": "https://files.pythonhosted.org/packages/d9/52/819a95bfec288c6840277fe267d39f0aaa0319ef9d93f8bd7611e2a48607/WebCore-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "8f68403ba514b8d8d82e28bf4c8ec03c", "sha256": "b24ca58b3a39a4cabb59f1d470ee8cd74878de5682563b755ca5a4b94f7762b3"}, "downloads": -1, "filename": "WebCore-0.6.2-py2.6.egg", "has_sig": false, "md5_digest": "8f68403ba514b8d8d82e28bf4c8ec03c", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 65877, "upload_time": "2010-02-16T10:31:42", "upload_time_iso_8601": "2010-02-16T10:31:42.246592Z", "url": "https://files.pythonhosted.org/packages/09/e2/bc0b9382bcbc8cc5d0b96139c7697fc992e75cfe29a25ea80c4d3c4d895d/WebCore-0.6.2-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf1f227e45cc0fea16061bb4924ae08e", "sha256": "01b4eb7ba7513b7e985867efaf52693c6c8a1b560f92ba2be257bfbf6ee4f6e3"}, "downloads": -1, "filename": "WebCore-0.6.2.tar.gz", "has_sig": false, "md5_digest": "bf1f227e45cc0fea16061bb4924ae08e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21606, "upload_time": "2010-02-16T10:31:40", "upload_time_iso_8601": "2010-02-16T10:31:40.054266Z", "url": "https://files.pythonhosted.org/packages/32/6a/d59eeb0e52438f0d27a54cea91e3e178975bbaf53d74fedfb455ba7ab63b/WebCore-0.6.2.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "901ab208458e4d105a1b140ecd2ffb87", "sha256": "8477693eaf33d0c471991abbf0e5d9e18c8659c6df3e2abbd15698ff94be17cf"}, "downloads": -1, "filename": "WebCore-0.9.0-py2.6.egg", "has_sig": false, "md5_digest": "901ab208458e4d105a1b140ecd2ffb87", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 81797, "upload_time": "2010-03-02T20:49:54", "upload_time_iso_8601": "2010-03-02T20:49:54.206742Z", "url": "https://files.pythonhosted.org/packages/33/e3/5e025a57e80fdebbcba61949e4eb957da9d2d1a51b49954b46f4e918e1de/WebCore-0.9.0-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d55b5f368b69a8ed3ab8831ce7d16e0a", "sha256": "51154770946cb3d34272a285887bfb9848006f7c42aaf4d01611698a4e4e0c52"}, "downloads": -1, "filename": "WebCore-0.9.0.tar.gz", "has_sig": false, "md5_digest": "d55b5f368b69a8ed3ab8831ce7d16e0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22189, "upload_time": "2010-03-02T20:49:51", "upload_time_iso_8601": "2010-03-02T20:49:51.801421Z", "url": "https://files.pythonhosted.org/packages/42/38/f6797c9ff5d3abb147ddc2cd0253e6972e181967041db999a8bee659d2b7/WebCore-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "60fc50234a3d934495ebd2f3de1de2fa", "sha256": "41be2af0331b6675576ef29a8b731f0bcaf0c0cb5905e9bc7bfc3dcc2230afb2"}, "downloads": -1, "filename": "WebCore-1.0.0-py2.7.egg", "has_sig": false, "md5_digest": "60fc50234a3d934495ebd2f3de1de2fa", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 89027, "upload_time": "2010-08-25T03:19:21", "upload_time_iso_8601": "2010-08-25T03:19:21.373535Z", "url": "https://files.pythonhosted.org/packages/97/0b/6b7dd687a71b1589b79138ec7f9ee5c1860fb727f40c1445652dfc72e8dd/WebCore-1.0.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "55b1de73e2e8a58b57b3c913a782c9ac", "sha256": "da19f21c412685f35b81d4a9be47d999498131bc45847ef7d3596f78b543c0e1"}, "downloads": -1, "filename": "WebCore-1.0.0.tar.gz", "has_sig": false, "md5_digest": "55b1de73e2e8a58b57b3c913a782c9ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22937, "upload_time": "2010-08-25T03:19:18", "upload_time_iso_8601": "2010-08-25T03:19:18.761894Z", "url": "https://files.pythonhosted.org/packages/0b/56/2c89e01e1aa973d8e629a37ecb3c3c4583b587529bd2a249f6bda8ad4680/WebCore-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6e329b87e460d66985dcd65e7311a535", "sha256": "df77e1edb45f2259fdf07b72cf8959607f59e1558c6616e945e7eba08e5c7287"}, "downloads": -1, "filename": "WebCore-1.0.1-py2.6.egg", "has_sig": false, "md5_digest": "6e329b87e460d66985dcd65e7311a535", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 89760, "upload_time": "2010-12-14T08:37:58", "upload_time_iso_8601": "2010-12-14T08:37:58.899298Z", "url": "https://files.pythonhosted.org/packages/2a/47/6496a1ba86b4a5d1de21bd5c4375bfc397c60d90305f1cc6ffdecf878c5f/WebCore-1.0.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "77557758b202d7483b14ca74aa2f98ce", "sha256": "f8d73f4177f429395e34ee9c9dd6963c81c18f616f9f4519a1e8fe9e8bb5143d"}, "downloads": -1, "filename": "WebCore-1.0.1-py2.7.egg", "has_sig": false, "md5_digest": "77557758b202d7483b14ca74aa2f98ce", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 89336, "upload_time": "2010-12-14T08:36:43", "upload_time_iso_8601": "2010-12-14T08:36:43.517292Z", "url": "https://files.pythonhosted.org/packages/a7/69/d15d30b6b274f079e83dc783f6009767baf2c4253f61a52821e33c17ea04/WebCore-1.0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0eb68159b70b95d1457e102b89dab36c", "sha256": "6be183b120c73b3077aa8c3d9129d5a5437dd4e201bb0a1cdff8c09e9b75a30a"}, "downloads": -1, "filename": "WebCore-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0eb68159b70b95d1457e102b89dab36c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23069, "upload_time": "2010-12-14T08:36:41", "upload_time_iso_8601": "2010-12-14T08:36:41.353478Z", "url": "https://files.pythonhosted.org/packages/0b/d2/93939215dd8a6a17ac4d4cc313165aa3dc5afd5f8eef475ece3dfd763f19/WebCore-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "5fb5d94dd61cd80cd931eb2c16a37342", "sha256": "5c27f36d4c2263cedb0d44b11cba2d4d2c95c327d71b8542ca11019301674b2a"}, "downloads": -1, "filename": "WebCore-1.1.0-py2.6.egg", "has_sig": false, "md5_digest": "5fb5d94dd61cd80cd931eb2c16a37342", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 88030, "upload_time": "2011-12-21T15:56:47", "upload_time_iso_8601": "2011-12-21T15:56:47.611722Z", "url": "https://files.pythonhosted.org/packages/9a/72/ed03772959748ac97b929591e9eb2efae5fc8f934fa4deb57834007b3fc5/WebCore-1.1.0-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f3347afd6fb01547743ba6dff5f6efa", "sha256": "4883c7cfa59f43c6ad2a5ffe042989d13d739577bef26e3ec41361aefb5922fb"}, "downloads": -1, "filename": "WebCore-1.1.0-py2.7.egg", "has_sig": false, "md5_digest": "2f3347afd6fb01547743ba6dff5f6efa", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 87794, "upload_time": "2011-12-21T15:56:23", "upload_time_iso_8601": "2011-12-21T15:56:23.505265Z", "url": "https://files.pythonhosted.org/packages/0b/ca/e5bd3946f97e63bba315b793fe87a4b8276691c798797900a9234765e0dc/WebCore-1.1.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a62a37f09c64358899b11a221630310", "sha256": "688dc63c73af63f795860bfb30a3c748089dd89f83bbf333c44836ae9f1ccd18"}, "downloads": -1, "filename": "WebCore-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3a62a37f09c64358899b11a221630310", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25727, "upload_time": "2011-12-21T15:56:22", "upload_time_iso_8601": "2011-12-21T15:56:22.576284Z", "url": "https://files.pythonhosted.org/packages/c3/eb/2afc63125a2d631728b3810c85915adcf7fa1eeffd8730eb0d50af6707e6/WebCore-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "6c146fa2e64e2d3fcf709e4bcb8f4fdf", "sha256": "edc5f704bec6bab332521904e48a5d58eb2a3cdbf6a63a50ab15ce57f5783bc9"}, "downloads": -1, "filename": "WebCore-1.1.1-py2.6.egg", "has_sig": false, "md5_digest": "6c146fa2e64e2d3fcf709e4bcb8f4fdf", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 88953, "upload_time": "2012-07-08T23:19:46", "upload_time_iso_8601": "2012-07-08T23:19:46.122212Z", "url": "https://files.pythonhosted.org/packages/84/ae/71ea7c0c81297ba27ec6a3ea55e8055c27d6abff3875dfb990f0cdc854b5/WebCore-1.1.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "84e738eafb309597b31ef6750d3d3cb6", "sha256": "1ba09ad5779cbfdac2e7564ac0719e87901921547b87070224f3caa07d901959"}, "downloads": -1, "filename": "WebCore-1.1.1-py2.7.egg", "has_sig": false, "md5_digest": "84e738eafb309597b31ef6750d3d3cb6", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 88751, "upload_time": "2012-07-08T23:19:04", "upload_time_iso_8601": "2012-07-08T23:19:04.591796Z", "url": "https://files.pythonhosted.org/packages/8e/4d/06c70594dd2d124f16a8f581c168ff3beed5deaef705887b6aa27c613c86/WebCore-1.1.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9907329391ac552ae5542f258e8fcb0d", "sha256": "9d1c4fb5b782ee58904b189ea3589df188c130c7f9e42b0e41e3dea6a7cfcf2c"}, "downloads": -1, "filename": "WebCore-1.1.1.tar.gz", "has_sig": false, "md5_digest": "9907329391ac552ae5542f258e8fcb0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25839, "upload_time": "2012-07-08T23:19:02", "upload_time_iso_8601": "2012-07-08T23:19:02.728395Z", "url": "https://files.pythonhosted.org/packages/95/e2/b948d308138e047c345f3814f71710e2836fc9733fc81dd00f5af84d39cb/WebCore-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "3ff3ee983feea12e020e8ca2cf7a9850", "sha256": "337e017c2721a18f5ed308488da041d0e488d957c1d7184c713c9fac828ab8c3"}, "downloads": -1, "filename": "WebCore-1.1.2.tar.gz", "has_sig": false, "md5_digest": "3ff3ee983feea12e020e8ca2cf7a9850", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25651, "upload_time": "2012-10-11T22:03:39", "upload_time_iso_8601": "2012-10-11T22:03:39.043379Z", "url": "https://files.pythonhosted.org/packages/13/c9/16643e72de39b066cecb1a4f3f3a3a3588211301009920891fcb6cf49756/WebCore-1.1.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "7808a6ea8975f8af4d06a7d9c9ff113d", "sha256": "9e026372da5170e8d3ab890cd6ea7cd61797ce4dece5e81f76c90f1ba37fc54e"}, "downloads": -1, "filename": "WebCore-2.0.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "7808a6ea8975f8af4d06a7d9c9ff113d", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 43022, "upload_time": "2016-04-17T08:54:52", "upload_time_iso_8601": "2016-04-17T08:54:52.165397Z", "url": "https://files.pythonhosted.org/packages/f8/cd/a5a125e173917b6aad7f0ba8d5645087720a02d0b9f526464c9c8a50078e/WebCore-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1c420220a0f3979b188111aded6de1e", "sha256": "4afa33f9e925e97d79e81fa22bf520f88d975fe9b7cec6bdec0d50110231f3df"}, "downloads": -1, "filename": "WebCore-2.0.0.tar.gz", "has_sig": true, "md5_digest": "a1c420220a0f3979b188111aded6de1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36193, "upload_time": "2016-04-17T08:54:42", "upload_time_iso_8601": "2016-04-17T08:54:42.419356Z", "url": "https://files.pythonhosted.org/packages/13/1a/d46710086904fa545f9736c1adb7b31a97acc2a23740c516c86397a6e65a/WebCore-2.0.0.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "94084a6913796ccc524a584ffdfe1e5e", "sha256": "3ff4d81193f457ae136c5fb24172cbd135991d50f3f69478a942bc0557a4cc27"}, "downloads": -1, "filename": "WebCore-2.0.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "94084a6913796ccc524a584ffdfe1e5e", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 51123, "upload_time": "2016-04-25T18:09:43", "upload_time_iso_8601": "2016-04-25T18:09:43.320095Z", "url": "https://files.pythonhosted.org/packages/29/c0/4582498293cc078cd807da3651c7d5f0ed81a91c86e99240b420b0e75a82/WebCore-2.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a42c2c2a2bbe9d38b688ad4c1c6ef5c", "sha256": "b5ade2ad64956a11378e0b0e8c65a7076564f28fec92f551ecece7f895267f8e"}, "downloads": -1, "filename": "WebCore-2.0.2.tar.gz", "has_sig": true, "md5_digest": "3a42c2c2a2bbe9d38b688ad4c1c6ef5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67005, "upload_time": "2016-04-25T18:09:07", "upload_time_iso_8601": "2016-04-25T18:09:07.816950Z", "url": "https://files.pythonhosted.org/packages/d9/e3/d7f0f1e37c758bc442f2791e65b1c1ac3b556d48fe42ff5c4629b63e219d/WebCore-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "4d1f32c6478cc090de9022c346bd100a", "sha256": "e89510248d4c5ca4829656d27a0fb282d7511be70b5e555dae62b6df752153ab"}, "downloads": -1, "filename": "WebCore-2.0.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4d1f32c6478cc090de9022c346bd100a", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 113186, "upload_time": "2016-09-25T06:42:07", "upload_time_iso_8601": "2016-09-25T06:42:07.808783Z", "url": "https://files.pythonhosted.org/packages/7f/fb/bb35a14b76c9b1a0b94cbcbd313c3d80c17b49bcf2eae800f6a0ef523c62/WebCore-2.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d48dd0f10d2c80b7fe8e6962b66f85b", "sha256": "c7c4249b1b922b81da8f52a1ffa9d581a0ad6a65fc5156509ded7c71a3d4e84b"}, "downloads": -1, "filename": "WebCore-2.0.3.tar.gz", "has_sig": true, "md5_digest": "5d48dd0f10d2c80b7fe8e6962b66f85b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74855, "upload_time": "2016-09-25T06:42:04", "upload_time_iso_8601": "2016-09-25T06:42:04.426772Z", "url": "https://files.pythonhosted.org/packages/d2/67/4334e61a2d002db9a10917879438d53e35e9612492be3e8bfbd9dd88ad57/WebCore-2.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d1f32c6478cc090de9022c346bd100a", "sha256": "e89510248d4c5ca4829656d27a0fb282d7511be70b5e555dae62b6df752153ab"}, "downloads": -1, "filename": "WebCore-2.0.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4d1f32c6478cc090de9022c346bd100a", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 113186, "upload_time": "2016-09-25T06:42:07", "upload_time_iso_8601": "2016-09-25T06:42:07.808783Z", "url": "https://files.pythonhosted.org/packages/7f/fb/bb35a14b76c9b1a0b94cbcbd313c3d80c17b49bcf2eae800f6a0ef523c62/WebCore-2.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d48dd0f10d2c80b7fe8e6962b66f85b", "sha256": "c7c4249b1b922b81da8f52a1ffa9d581a0ad6a65fc5156509ded7c71a3d4e84b"}, "downloads": -1, "filename": "WebCore-2.0.3.tar.gz", "has_sig": true, "md5_digest": "5d48dd0f10d2c80b7fe8e6962b66f85b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74855, "upload_time": "2016-09-25T06:42:04", "upload_time_iso_8601": "2016-09-25T06:42:04.426772Z", "url": "https://files.pythonhosted.org/packages/d2/67/4334e61a2d002db9a10917879438d53e35e9612492be3e8bfbd9dd88ad57/WebCore-2.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:22 2020"}