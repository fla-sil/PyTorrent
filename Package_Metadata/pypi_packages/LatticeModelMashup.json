{"info": {"author": "Fergus Fettes", "author_email": "fergusfettes@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Topic :: Games/Entertainment :: Simulation"], "description": "![Simple rules](latticeModelMashup/img/top.gif)\n# Ultimate Lattice Model Monster Mashup\n\nThis app started off as an attempt to visualise different lattice models, and to see what happens when you mix a bunch of them together. It is currently very visually-oriented, though I intend to add some analytics later.\n\n## Getting started\nIt is built using Python 3 and Qt5, so you will need both of those. If you clone the package and run the setup.py everything should be installed, and you can then run `python3 __init__.py` from the main folder. You can also possibly run `pip3 install LatticeModelMashup` and then just type `latticeMash` into the terminal, though I haven't tested this yet.\n\nTo facilitate rapid testing, there are a few keyboard shortcuts:\n* **E** starts a dynamic run. The length is determined by the 'frames' in the bottom right.\n* **Esc** interrupts the current run, or closes the app if nothing is running. (Closing is pretty buggy.)\n* **Q** clears the screen and adds some noise, determined by the coverage.\n* **1** turns the stochastic noise engine on and off\n* **2** turns the Life engine on and off\n* **Z** steps forward one frame\n* **B** paints the background with a cellular automaton\n* **WASD** controlls the 'coverage' aka how much noise is added when you clear the scren and 'beta', which determines how noise the simulation is while running.\n* **XC** controls the maximum FPS it will operate at. The two FPS values given at the top are the current performance of the two main engines, and the actual FPS is always limited to the lowest of these three values.\n* **Alt** brings the focus out of a textbox, so you can use the keyboard shortcuts again after editing something.\n\nA note on the update rules: currently rules of the following sort are permitted,\n> a <= NB <= b\n\nwhere a and b are the maximum and minimum number of neighbours (NB) that a cell can have and survive. So if a=1 and b=8 a cell will always survive. Standard Conway rules say cells survive with 2 or 3 neighbors.\n\n> c <= P <= d\n\nwhere c and d are the number of cells that, when surrounding an empty cell, will give birth (P -- 'parents') to a new cell. In Conway P=3.\n\nSo the standard Conway rule is '2,3,3,3;'.\n\nLiberal parentage (c = 1,2) results in explosive growth. Unbounded parentage (d=6,7,8) results in violently oscillating populations when coupled with normal death rules.\n\nRules can also be chained, so for example 2,2,3,5;2,3,2,3;2,4,3,5;2,3,4,5; is a rad little combo that will result in a different update rule every frame in a cycle of four frames. Mix it with a good serving of noise at the start.\n\nTurning the Ising model off (**1**) will result in deterministic runs, symmetrical if there was no noise at the start. \n\nThe little area with the letters 'UB, LB, RB, WB, DB' is meant to be a sort of drawing of the screen-- the lines represent the edges. Anyway, here is where you control the boundary conditions. 1 means that boundary is fixed on, 0 fixed off and -1 means it is invisible (so the UB and DB wrap as do LB and RB, while WB ('wolfbound') just paints without interacting).\n\n## About the models\nThe app is currently based on the following models:\n- [x] **Ising Model** nice long-term behaviour when undisturbed by Conway, this model is rather overshadowed by the Life engine and tends only to act as a (very expensive) stochastic noise generator. Turn off conway (**2**) and turn up beta (**D**) and let it run for a while to see Ising at work.\n- [x] **Conway's GoL** actually the engine is what they call 'Life-like' and can accept almost arbitrary rulesets. The rules are entered into the green box on the left. Some suggestions are below.\n![Conway-style Life](latticeModelMashup/img/conway.gif)\n- [x] **Cellular Automata** Wolfram-style cellular automata can be painted on the screen (**B**), and a scroller is also available that will either wipe out all the cells or paint on full cells. Currently there is no meaningful interaction between the 2D automata and the other models, it is largely aesthetic. Lets see what becomes of it.\n![Advanced rules make more developed lifeforms](latticeModelMashup/img/advanced.gif)\n- [ ] Potts Model is actually in there, or it was, but has been depreceated. This is a nice version of Ising with more states, but currently the models only have 2 states so this is inactive. Might bring it back.\n\n\n## Features in Version 1\n- Ising model\n- Life-like automata with time-varying rules\n- 'Wolfram' 2D automata painter\n- Arbitrary boundary conditions on top, sides and scroller\n- Colors!\n- Basic recording function (makes gifs, very buggy)\n\n## Features coming in Version 2\n- Dynamic update of settings without having to restart\n- Fancy shader graphics\n- Faster engines, better integrated with one another\n- Analytic engine, so you can automatically characterise different update rules\n- Easy interaction, can paint different initial conditions onto the canvas\n- Good support for exporting videos/ gifs\n\n## Features planned:\n- The fanciest graphics\n- Automatic monsterfinder (looks for repeating patters with different update rules)\n- More models! Including:\n- [ ] **Prisoners Dilemma**\n- [ ] **Eden Model**\n\n![Here you can see the 'Wolfram' painter in the background](latticeModelMashup/img/bottom.gif)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fergusfettes/lattice", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "LatticeModelMashup", "package_url": "https://pypi.org/project/LatticeModelMashup/", "platform": "", "project_url": "https://pypi.org/project/LatticeModelMashup/", "project_urls": {"Homepage": "https://github.com/fergusfettes/lattice"}, "release_url": "https://pypi.org/project/LatticeModelMashup/0.98.3/", "requires_dist": ["imageio", "numpy", "pyqt5", "ffmpeg-python"], "requires_python": "", "summary": "An ungodly mixture of lattice models", "version": "0.98.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Simple rules\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7df6b86c93b55c43a0427b1471f4c68c633f6508/6c6174746963654d6f64656c4d61736875702f696d672f746f702e676966\"></p>\n<h1>Ultimate Lattice Model Monster Mashup</h1>\n<p>This app started off as an attempt to visualise different lattice models, and to see what happens when you mix a bunch of them together. It is currently very visually-oriented, though I intend to add some analytics later.</p>\n<h2>Getting started</h2>\n<p>It is built using Python 3 and Qt5, so you will need both of those. If you clone the package and run the setup.py everything should be installed, and you can then run <code>python3 __init__.py</code> from the main folder. You can also possibly run <code>pip3 install LatticeModelMashup</code> and then just type <code>latticeMash</code> into the terminal, though I haven't tested this yet.</p>\n<p>To facilitate rapid testing, there are a few keyboard shortcuts:</p>\n<ul>\n<li><strong>E</strong> starts a dynamic run. The length is determined by the 'frames' in the bottom right.</li>\n<li><strong>Esc</strong> interrupts the current run, or closes the app if nothing is running. (Closing is pretty buggy.)</li>\n<li><strong>Q</strong> clears the screen and adds some noise, determined by the coverage.</li>\n<li><strong>1</strong> turns the stochastic noise engine on and off</li>\n<li><strong>2</strong> turns the Life engine on and off</li>\n<li><strong>Z</strong> steps forward one frame</li>\n<li><strong>B</strong> paints the background with a cellular automaton</li>\n<li><strong>WASD</strong> controlls the 'coverage' aka how much noise is added when you clear the scren and 'beta', which determines how noise the simulation is while running.</li>\n<li><strong>XC</strong> controls the maximum FPS it will operate at. The two FPS values given at the top are the current performance of the two main engines, and the actual FPS is always limited to the lowest of these three values.</li>\n<li><strong>Alt</strong> brings the focus out of a textbox, so you can use the keyboard shortcuts again after editing something.</li>\n</ul>\n<p>A note on the update rules: currently rules of the following sort are permitted,</p>\n<blockquote>\n<p>a &lt;= NB &lt;= b</p>\n</blockquote>\n<p>where a and b are the maximum and minimum number of neighbours (NB) that a cell can have and survive. So if a=1 and b=8 a cell will always survive. Standard Conway rules say cells survive with 2 or 3 neighbors.</p>\n<blockquote>\n<p>c &lt;= P &lt;= d</p>\n</blockquote>\n<p>where c and d are the number of cells that, when surrounding an empty cell, will give birth (P -- 'parents') to a new cell. In Conway P=3.</p>\n<p>So the standard Conway rule is '2,3,3,3;'.</p>\n<p>Liberal parentage (c = 1,2) results in explosive growth. Unbounded parentage (d=6,7,8) results in violently oscillating populations when coupled with normal death rules.</p>\n<p>Rules can also be chained, so for example 2,2,3,5;2,3,2,3;2,4,3,5;2,3,4,5; is a rad little combo that will result in a different update rule every frame in a cycle of four frames. Mix it with a good serving of noise at the start.</p>\n<p>Turning the Ising model off (<strong>1</strong>) will result in deterministic runs, symmetrical if there was no noise at the start.</p>\n<p>The little area with the letters 'UB, LB, RB, WB, DB' is meant to be a sort of drawing of the screen-- the lines represent the edges. Anyway, here is where you control the boundary conditions. 1 means that boundary is fixed on, 0 fixed off and -1 means it is invisible (so the UB and DB wrap as do LB and RB, while WB ('wolfbound') just paints without interacting).</p>\n<h2>About the models</h2>\n<p>The app is currently based on the following models:</p>\n<ul>\n<li>[x] <strong>Ising Model</strong> nice long-term behaviour when undisturbed by Conway, this model is rather overshadowed by the Life engine and tends only to act as a (very expensive) stochastic noise generator. Turn off conway (<strong>2</strong>) and turn up beta (<strong>D</strong>) and let it run for a while to see Ising at work.</li>\n<li>[x] <strong>Conway's GoL</strong> actually the engine is what they call 'Life-like' and can accept almost arbitrary rulesets. The rules are entered into the green box on the left. Some suggestions are below.\n<img alt=\"Conway-style Life\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/94c4ad5409b4fcaebd367681f46e2d24c29c196e/6c6174746963654d6f64656c4d61736875702f696d672f636f6e7761792e676966\"></li>\n<li>[x] <strong>Cellular Automata</strong> Wolfram-style cellular automata can be painted on the screen (<strong>B</strong>), and a scroller is also available that will either wipe out all the cells or paint on full cells. Currently there is no meaningful interaction between the 2D automata and the other models, it is largely aesthetic. Lets see what becomes of it.\n<img alt=\"Advanced rules make more developed lifeforms\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e4f2497717cd1072c46bd9e557454e5a1cf0778/6c6174746963654d6f64656c4d61736875702f696d672f616476616e6365642e676966\"></li>\n<li>[ ] Potts Model is actually in there, or it was, but has been depreceated. This is a nice version of Ising with more states, but currently the models only have 2 states so this is inactive. Might bring it back.</li>\n</ul>\n<h2>Features in Version 1</h2>\n<ul>\n<li>Ising model</li>\n<li>Life-like automata with time-varying rules</li>\n<li>'Wolfram' 2D automata painter</li>\n<li>Arbitrary boundary conditions on top, sides and scroller</li>\n<li>Colors!</li>\n<li>Basic recording function (makes gifs, very buggy)</li>\n</ul>\n<h2>Features coming in Version 2</h2>\n<ul>\n<li>Dynamic update of settings without having to restart</li>\n<li>Fancy shader graphics</li>\n<li>Faster engines, better integrated with one another</li>\n<li>Analytic engine, so you can automatically characterise different update rules</li>\n<li>Easy interaction, can paint different initial conditions onto the canvas</li>\n<li>Good support for exporting videos/ gifs</li>\n</ul>\n<h2>Features planned:</h2>\n<ul>\n<li>The fanciest graphics</li>\n<li>Automatic monsterfinder (looks for repeating patters with different update rules)</li>\n<li>More models! Including:</li>\n<li>[ ] <strong>Prisoners Dilemma</strong></li>\n<li>[ ] <strong>Eden Model</strong></li>\n</ul>\n<p><img alt=\"Here you can see the 'Wolfram' painter in the background\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a5a98f88b0a85121a55a6f4d60f436288ce05ba/6c6174746963654d6f64656c4d61736875702f696d672f626f74746f6d2e676966\"></p>\n\n          </div>"}, "last_serial": 4651629, "releases": {"0.95": [{"comment_text": "", "digests": {"md5": "f6eaf5dac425b9a00a76b8ddb72c8a52", "sha256": "77529c84ef181a57c2fdc72ef4dccbadab3af08d7849c698b2bf20e8ab4acd95"}, "downloads": -1, "filename": "LatticeModelMashup-0.95-py3-none-any.whl", "has_sig": false, "md5_digest": "f6eaf5dac425b9a00a76b8ddb72c8a52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30993, "upload_time": "2018-12-31T09:14:03", "upload_time_iso_8601": "2018-12-31T09:14:03.046492Z", "url": "https://files.pythonhosted.org/packages/0c/df/72bca7b53808e949589ae871b463da75ef28c834ae2f3d42cb59c6bf5ae7/LatticeModelMashup-0.95-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1db4af1bf34a998fb839ac828afb42c6", "sha256": "9bf039c7726e648831099016d815942dd2f828b6a0043aab3c45914ae88d3dca"}, "downloads": -1, "filename": "LatticeModelMashup-0.95.tar.gz", "has_sig": false, "md5_digest": "1db4af1bf34a998fb839ac828afb42c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16137, "upload_time": "2018-12-31T09:14:05", "upload_time_iso_8601": "2018-12-31T09:14:05.528426Z", "url": "https://files.pythonhosted.org/packages/20/5b/574461df4ab3e028fa90cf282da05a8dfdfde93358036ec596f3b225ebdf/LatticeModelMashup-0.95.tar.gz", "yanked": false}], "0.98.1": [{"comment_text": "", "digests": {"md5": "820d54f3a3a120320e261a5bc84541f8", "sha256": "e4c51571f358f24a10f90b94e6272408bae82a628aad53175c18d073c6c3889f"}, "downloads": -1, "filename": "LatticeModelMashup-0.98.1-py3-none-any.whl", "has_sig": false, "md5_digest": "820d54f3a3a120320e261a5bc84541f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31389, "upload_time": "2018-12-31T11:04:56", "upload_time_iso_8601": "2018-12-31T11:04:56.164436Z", "url": "https://files.pythonhosted.org/packages/18/8b/7467f2705cd885b03c93f739803cbe0b4a2c1de9b48de6e67fbe70eb06da/LatticeModelMashup-0.98.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "271dc4bf42a2f2b0d6c6a78476e96c2d", "sha256": "8969973ea80c98983d4e9cda419b076be9c6f02dcccf691ed56e6f8de4653c6f"}, "downloads": -1, "filename": "LatticeModelMashup-0.98.1.tar.gz", "has_sig": false, "md5_digest": "271dc4bf42a2f2b0d6c6a78476e96c2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16345, "upload_time": "2018-12-31T11:04:57", "upload_time_iso_8601": "2018-12-31T11:04:57.946997Z", "url": "https://files.pythonhosted.org/packages/4c/e7/34de32973f8dc6ba88a19295ba74916b0010ca8f89c9a83170cb6d46f6d2/LatticeModelMashup-0.98.1.tar.gz", "yanked": false}], "0.98.2": [{"comment_text": "", "digests": {"md5": "414836af8164b1dd870a32ab4c073893", "sha256": "5c84b6532e1e113a8664f47511542c0786f5144815818a4daa12c3da503e925e"}, "downloads": -1, "filename": "LatticeModelMashup-0.98.2-py3-none-any.whl", "has_sig": false, "md5_digest": "414836af8164b1dd870a32ab4c073893", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31395, "upload_time": "2018-12-31T11:35:37", "upload_time_iso_8601": "2018-12-31T11:35:37.405262Z", "url": "https://files.pythonhosted.org/packages/13/7f/984fea073319a0f0c13d794b2fed47fa44a2b26e55ec571fd4ac9f954106/LatticeModelMashup-0.98.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a32ff88be6515fd32e4f5b7ed871501c", "sha256": "ee9a4e80abe269e96432df165f94cfbb5cb93122bdfd2e8f52291f54f75ef786"}, "downloads": -1, "filename": "LatticeModelMashup-0.98.2.tar.gz", "has_sig": false, "md5_digest": "a32ff88be6515fd32e4f5b7ed871501c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16348, "upload_time": "2018-12-31T11:35:39", "upload_time_iso_8601": "2018-12-31T11:35:39.285034Z", "url": "https://files.pythonhosted.org/packages/fd/e9/503446dc44406fd37128fec7fc1bd8ebb164626a568f8859ee6a2258dac3/LatticeModelMashup-0.98.2.tar.gz", "yanked": false}], "0.98.3": [{"comment_text": "", "digests": {"md5": "4333b21e9cce4ed77c9d7a36cf605c52", "sha256": "2bd55bd60281c46fdb1c34373b2ed5a3cfdb55b1e17ca7430624ec720ed3c799"}, "downloads": -1, "filename": "LatticeModelMashup-0.98.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4333b21e9cce4ed77c9d7a36cf605c52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31393, "upload_time": "2019-01-02T04:02:17", "upload_time_iso_8601": "2019-01-02T04:02:17.502221Z", "url": "https://files.pythonhosted.org/packages/33/58/45e2ed46170fd2f6afdea1c616748da5ea9e1e2a035d970d87684a6667c3/LatticeModelMashup-0.98.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b59082aed26f14989a3a988c255a883", "sha256": "0c9a6e47965ee1dd01604db5dc3d7918a2d4768fd55d23c1eed8d6c7300c2472"}, "downloads": -1, "filename": "LatticeModelMashup-0.98.3.tar.gz", "has_sig": false, "md5_digest": "3b59082aed26f14989a3a988c255a883", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16351, "upload_time": "2019-01-02T04:02:19", "upload_time_iso_8601": "2019-01-02T04:02:19.563347Z", "url": "https://files.pythonhosted.org/packages/c0/e1/1f9a2c777c3aa3fa66b659067269de73f27890daba80b001bdb15da2e072/LatticeModelMashup-0.98.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4333b21e9cce4ed77c9d7a36cf605c52", "sha256": "2bd55bd60281c46fdb1c34373b2ed5a3cfdb55b1e17ca7430624ec720ed3c799"}, "downloads": -1, "filename": "LatticeModelMashup-0.98.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4333b21e9cce4ed77c9d7a36cf605c52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31393, "upload_time": "2019-01-02T04:02:17", "upload_time_iso_8601": "2019-01-02T04:02:17.502221Z", "url": "https://files.pythonhosted.org/packages/33/58/45e2ed46170fd2f6afdea1c616748da5ea9e1e2a035d970d87684a6667c3/LatticeModelMashup-0.98.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b59082aed26f14989a3a988c255a883", "sha256": "0c9a6e47965ee1dd01604db5dc3d7918a2d4768fd55d23c1eed8d6c7300c2472"}, "downloads": -1, "filename": "LatticeModelMashup-0.98.3.tar.gz", "has_sig": false, "md5_digest": "3b59082aed26f14989a3a988c255a883", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16351, "upload_time": "2019-01-02T04:02:19", "upload_time_iso_8601": "2019-01-02T04:02:19.563347Z", "url": "https://files.pythonhosted.org/packages/c0/e1/1f9a2c777c3aa3fa66b659067269de73f27890daba80b001bdb15da2e072/LatticeModelMashup-0.98.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:44 2020"}