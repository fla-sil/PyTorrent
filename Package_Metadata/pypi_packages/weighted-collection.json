{"info": {"author": "Seth Alter", "author_email": "subalterngames@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development"], "description": "# Weighted Collection\n\nA WeightedCollection assigns probability weights per elements and returns elements randomly using those weights.\n\nFor example: if \"anakin\" has a weight of 1, \"constantine\" a weight of 1, and \"xenophon\" a  weight of 2, then \"xenophon\" will be randomly selected 50% of the time, \"anakin\" 25% of the time, and \"xenophon\" 25% of the time.\n\n## Usage\n\n```python\nfrom weighted_collection.weighted_collection import WeightedCollection\n\nw = WeightedCollection(obj_type=str)\n\nw.add(\"anakin\", 1)\nw.add(\"constantine\", 1)\nw.add(\"xenophon\", 2)\n\n# 25% of the time, this will return \"anakin\", \n# 25% of the time \"constantine\",\n# 50% of the time \"xenophon\".\nprint(w.get())\n```\n\n## Requirements\n\nPython 3.6+\n\n## Installation\n\n```python\npip3 install weighted-collection\n```\n\n## WeightedCollection API\n\n#### `WeightedCollection()`\n\nThe constructor.\n\n```python\nw = WeightedCollection() # Default constructor.\n```\n\n```python\nw = WeightedCollection(obj_type=str) # All elements in the collection must be strings.\n```\n\n```python\nw = WeightedCollection(random_seed=0)\n```\n\n```python\nw = WeightedCollection(obj_type=str, random_seed=0)\n```\n\n| Parameter     | Type      | Description                                              | Optional | Default  |\n| ------------- | --------- | -------------------------------------------------------- | -------- | -------- |\n| `obj_type`    | `Type[T]` | The type of objects that can be added to the collection. |          | `object` |\n| `random_seed` | `int`     | The random number generator seed.                        |          | 0        |\n\n***\n\n#### `add(obj, weight)`\n\nTry to add an object to the collection.\n\n- The object's type must be the class or a subclass of the `obj_type` parameter in the constructor.\n- The object must not already be in the  collection.\n- The weight must be > 0.\n\n_Return: True if the object was added._\n\n```python \nw = WeightedCollection(obj_type=str)\n\nw.add(\"anakin\", 1) # Adds element \"anakin\" with a weight of 1. Returns True.\n\nw.add(\"anakin\", 3) # Returns False (object is already in the collecction).\n\nw.add(33, 1) # Returns False (wrong type).\n\nw.add(\"constantine\", -2) # Returns False (weight must be > 0).\n```\n\n| Parameter | Type                                                         | Description                                                | Optional | Default |\n| --------- | ------------------------------------------------------------ | ---------------------------------------------------------- | -------- | ------- |\n| `obj`     | `T` (the value of the `obj_type` parameter in the constructor) | The object. Must not already be in the WeightedCollection. |          |         |\n| `weight`  | `int`                                                        | The probability weight. Must be > 0.                       |          |         |\n\n***\n\n#### `add_many(objs)`\n\nTry to add many objects to the collection. \n\n_Return: A dictionary of each object and whether it was added to the collection._\n\n```python\nw = WeightedCollection(obj_type=str)\n\nresult = w.add_many({\"anakin\": 1, \"constantine\": 1, 33: 0, \"xenophon\": -1})\n\nprint(result) # {\"anakin\": True, \"constantine\": True, 33: False, \"xenophon\": False}\n```\n\n| Parameter | Type                                                         | Description                                                  | Optional | Default |\n| --------- | ------------------------------------------------------------ | ------------------------------------------------------------ | -------- | ------- |\n| `objs`    | `Dict[T, int]`<br>(`T` is the value of the `obj_type` parameter in the constructor) | A dictionary of objects. A dictionary of objects. Key = the object. Value = the probability weight.<br><br>See `add(obj, weight)` for object and weight requirements. |          |         |\n\n***\n\n#### `remove(obj)`\n\nRemove an object from the collection.\n\n_Return: True if the object was removed._\n\n```python\nw = WeightedCollection(obj_type=str)\n\nw.add(\"anakin\", 1)\n\nw.remove(\"anakin\") # Returns True.\nw.remove(\"constantine\") # Returns False.\n```\n\n| Parameter | Type                                                         | Description                   | Optional | Default |\n| --------- | ------------------------------------------------------------ | ----------------------------- | -------- | ------- |\n| `obj`     | `T` (the value of the `obj_type` parameter in the constructor) | The object in the collection. |          |         |\n\n***\n\n#### `get()`\n\n_Return: A randomly selected object using the probability weights per object._\n\n```python\nw = WeightedCollection(obj_type=str)\n\nw.add(\"anakin\", 1)\nw.add(\"constantine\", 1)\nw.add(\"xenophon\", 2)\n\n# 25% of the time, this will return \"anakin\", \n# 25% of the time \"constantine\",\n# 50% of the time \"xenophon\".\nprint(w.get())\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/subalterngames/weighted_collection/archive/v1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/subalterngames/weighted_collection", "keywords": "collection,random", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "weighted-collection", "package_url": "https://pypi.org/project/weighted-collection/", "platform": "", "project_url": "https://pypi.org/project/weighted-collection/", "project_urls": {"Download": "https://github.com/subalterngames/weighted_collection/archive/v1.0.tar.gz", "Homepage": "https://github.com/subalterngames/weighted_collection"}, "release_url": "https://pypi.org/project/weighted-collection/1/", "requires_dist": null, "requires_python": "", "summary": "A WeightedCollection assigns probability weights per elements and returns elements randomly using those weights.", "version": "1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Weighted Collection</h1>\n<p>A WeightedCollection assigns probability weights per elements and returns elements randomly using those weights.</p>\n<p>For example: if \"anakin\" has a weight of 1, \"constantine\" a weight of 1, and \"xenophon\" a  weight of 2, then \"xenophon\" will be randomly selected 50% of the time, \"anakin\" 25% of the time, and \"xenophon\" 25% of the time.</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">weighted_collection.weighted_collection</span> <span class=\"kn\">import</span> <span class=\"n\">WeightedCollection</span>\n\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WeightedCollection</span><span class=\"p\">(</span><span class=\"n\">obj_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"anakin\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"constantine\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"xenophon\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 25% of the time, this will return \"anakin\", </span>\n<span class=\"c1\"># 25% of the time \"constantine\",</span>\n<span class=\"c1\"># 50% of the time \"xenophon\".</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n</pre>\n<h2>Requirements</h2>\n<p>Python 3.6+</p>\n<h2>Installation</h2>\n<pre><span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"n\">weighted</span><span class=\"o\">-</span><span class=\"n\">collection</span>\n</pre>\n<h2>WeightedCollection API</h2>\n<h4><code>WeightedCollection()</code></h4>\n<p>The constructor.</p>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WeightedCollection</span><span class=\"p\">()</span> <span class=\"c1\"># Default constructor.</span>\n</pre>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WeightedCollection</span><span class=\"p\">(</span><span class=\"n\">obj_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"c1\"># All elements in the collection must be strings.</span>\n</pre>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WeightedCollection</span><span class=\"p\">(</span><span class=\"n\">random_seed</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WeightedCollection</span><span class=\"p\">(</span><span class=\"n\">obj_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">random_seed</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Optional</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>obj_type</code></td>\n<td><code>Type[T]</code></td>\n<td>The type of objects that can be added to the collection.</td>\n<td></td>\n<td><code>object</code></td>\n</tr>\n<tr>\n<td><code>random_seed</code></td>\n<td><code>int</code></td>\n<td>The random number generator seed.</td>\n<td></td>\n<td>0</td>\n</tr></tbody></table>\n<hr>\n<h4><code>add(obj, weight)</code></h4>\n<p>Try to add an object to the collection.</p>\n<ul>\n<li>The object's type must be the class or a subclass of the <code>obj_type</code> parameter in the constructor.</li>\n<li>The object must not already be in the  collection.</li>\n<li>The weight must be &gt; 0.</li>\n</ul>\n<p><em>Return: True if the object was added.</em></p>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WeightedCollection</span><span class=\"p\">(</span><span class=\"n\">obj_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"anakin\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Adds element \"anakin\" with a weight of 1. Returns True.</span>\n\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"anakin\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\"># Returns False (object is already in the collecction).</span>\n\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Returns False (wrong type).</span>\n\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"constantine\"</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># Returns False (weight must be &gt; 0).</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Optional</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>obj</code></td>\n<td><code>T</code> (the value of the <code>obj_type</code> parameter in the constructor)</td>\n<td>The object. Must not already be in the WeightedCollection.</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>weight</code></td>\n<td><code>int</code></td>\n<td>The probability weight. Must be &gt; 0.</td>\n<td></td>\n<td></td>\n</tr></tbody></table>\n<hr>\n<h4><code>add_many(objs)</code></h4>\n<p>Try to add many objects to the collection.</p>\n<p><em>Return: A dictionary of each object and whether it was added to the collection.</em></p>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WeightedCollection</span><span class=\"p\">(</span><span class=\"n\">obj_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add_many</span><span class=\"p\">({</span><span class=\"s2\">\"anakin\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"constantine\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"xenophon\"</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\"># {\"anakin\": True, \"constantine\": True, 33: False, \"xenophon\": False}</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Optional</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>objs</code></td>\n<td><code>Dict[T, int]</code><br>(<code>T</code> is the value of the <code>obj_type</code> parameter in the constructor)</td>\n<td>A dictionary of objects. A dictionary of objects. Key = the object. Value = the probability weight.<br><br>See <code>add(obj, weight)</code> for object and weight requirements.</td>\n<td></td>\n<td></td>\n</tr></tbody></table>\n<hr>\n<h4><code>remove(obj)</code></h4>\n<p>Remove an object from the collection.</p>\n<p><em>Return: True if the object was removed.</em></p>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WeightedCollection</span><span class=\"p\">(</span><span class=\"n\">obj_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"anakin\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s2\">\"anakin\"</span><span class=\"p\">)</span> <span class=\"c1\"># Returns True.</span>\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s2\">\"constantine\"</span><span class=\"p\">)</span> <span class=\"c1\"># Returns False.</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Optional</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>obj</code></td>\n<td><code>T</code> (the value of the <code>obj_type</code> parameter in the constructor)</td>\n<td>The object in the collection.</td>\n<td></td>\n<td></td>\n</tr></tbody></table>\n<hr>\n<h4><code>get()</code></h4>\n<p><em>Return: A randomly selected object using the probability weights per object.</em></p>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WeightedCollection</span><span class=\"p\">(</span><span class=\"n\">obj_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"anakin\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"constantine\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"xenophon\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 25% of the time, this will return \"anakin\", </span>\n<span class=\"c1\"># 25% of the time \"constantine\",</span>\n<span class=\"c1\"># 50% of the time \"xenophon\".</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n</pre>\n\n          </div>"}, "last_serial": 7069389, "releases": {"1": [{"comment_text": "", "digests": {"md5": "bdd368f7849c0ddbb253c7d82eb09e72", "sha256": "51d3c9d98e0516848194febcaa89ba98af598a9532c04eed947daf434ab7384c"}, "downloads": -1, "filename": "weighted_collection-1.tar.gz", "has_sig": false, "md5_digest": "bdd368f7849c0ddbb253c7d82eb09e72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3577, "upload_time": "2020-04-21T16:57:48", "upload_time_iso_8601": "2020-04-21T16:57:48.954011Z", "url": "https://files.pythonhosted.org/packages/77/b5/1699f072746196ec08345de343892563cb287ab30351405ba2f42e014357/weighted_collection-1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdd368f7849c0ddbb253c7d82eb09e72", "sha256": "51d3c9d98e0516848194febcaa89ba98af598a9532c04eed947daf434ab7384c"}, "downloads": -1, "filename": "weighted_collection-1.tar.gz", "has_sig": false, "md5_digest": "bdd368f7849c0ddbb253c7d82eb09e72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3577, "upload_time": "2020-04-21T16:57:48", "upload_time_iso_8601": "2020-04-21T16:57:48.954011Z", "url": "https://files.pythonhosted.org/packages/77/b5/1699f072746196ec08345de343892563cb287ab30351405ba2f42e014357/weighted_collection-1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:23 2020"}