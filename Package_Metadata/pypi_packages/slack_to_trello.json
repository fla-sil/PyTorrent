{"info": {"author": "Todd Wolfson", "author_email": "todd@twolfson.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "slack-to-trello\n===============\n\n.. image:: https://travis-ci.org/underdogio/slack-to-trello.png?branch=master\n   :target: https://travis-ci.org/underdogio/slack-to-trello\n   :alt: Build Status\n\nPerform Trello actions via slash commands in Slack\n\nThe current iteration is a proof of concept; only 1 Slack team, 1 Trello user, and 1 Trello list is supported at the moment. In the future, we would like to support multiple teams and boards via an OAuth integration with Trello (to connect Slack users to Trello users) and some mechanism to select board (either from Slack or a mapping on the server).\n\nConvert\n\n.. image:: docs/slash-command.png\n   :alt: /trello slash command\n\ninto\n\n.. image:: docs/message.png\n   :alt: /trello response message\n\nGetting Started\n---------------\nTo get a copy of ``slack-to-trello`` running, please follow the steps below:\n\n.. code:: bash\n\n    # Clone our repository\n    git clone https://github.com/underdogio/slack-to-trello\n    cd slack-to-trello/\n\n    # Install our dependencies\n    pip install -r requirements.txt\n\n    # Install our module as a dependency of itself (meta)\n    python setup.py develop\n\n    # The remaining steps are for setting up our configuration\n    # We will be building `slack_to_trello/config/env`\n    # We start by copying `env.test`\n    cp slack_to_trello/config/env.test slack_to_trello/config/env\n\n    # Create 2 Slack integrations (1 for receiving slash commands, 1 for sending messages)\n    # First Slack integration: Slash Commands\n    #   Open your browser to Slash Commands\n    #   https://my.slack.com/services/new/slash-commands\n    #   Command: \"/trello\"\n    #   URL: \"https://my-server/slack/message\"\n    #     Please replace `my-server` with your server location\n    #     Don't forget to host it on HTTPS\n    #   Method: \"POST\"\n    #   Token: Provided by Slack\n    #   Autocomplete -> Description: \"Add a Trello card on the Engineering board\"\n    #   Autocomplete -> Help text: \"[card subject]\"\n    #   Descriptive Label: \"slack-to-trello\"\n    #   Click \"Save Integration\"\n\n    # Once saved, add the \"Token\" field as `SLACK_TOKEN` into `env`\n    #   `export SLACK_TOKEN=token_from_slack`\n\n    # Second Slack integration: Incoming WebHooks\n    #   These will be replies upon successful Trello card additions\n    #   Open your browser to Incoming WebHooks\n    #   https://my.slack.com/services/new/incoming-webhook\n    #   Post to Channel: Pick any channel -- we will always be overriding this\n    #   Webhook URL: Provided by Slack\n    #   Descriptive Label: \"slack-to-trello messages\"\n    #   Customize Name: \"slack-to-trello\"\n    #   Customize Icon: Pick any you like -- we recommend `:signal_strength:`\n    #   Click \"Save Settings\"\n\n    # Once saved, add the \"Webhook URL\" field as `SLACK_MESSAGE_URL` into `env`\n    #   `export SLACK_MESSAGE_URL=https://hooks.slack.com/services/path/to/reply`\n\n    # Set up our Trello integration\n    #   We recommend creating a bot user as all cards\n    #   will be marked as \"Created by\" the chosen user\n\n    # Collect our Trello API information\n    #   Open our browser to https://trello.com/app-key\n    #   Save \"Key\" as `TRELLO_API_KEY` in `env`\n    #   `export TRELLO_API_KEY=value_from_key`\n\n    # Generate a permanent Trello API token (this can be disabled later on)\n    #   Using the \"Key\" as \"TRELLO_API_KEY\" and \"Secret\" as \"TRELLO_API_SECRET\"\n    TRELLO_API_KEY=key_from_website TRELLO_API_SECRET=secret_from_website bin/generate-trello-tokens.py\n    #   You will be prompted to open a link\n    #   Follow the link and click \"Accept\"\n    #   Copy the standalone value from the page\n    #   Go back to the command line and enter \"y\"\n    #   You will be prompted for a PIN\n    #   Paste the value from the page\n    #   You will be given an `oauth_token` and `oauth_token_secret` value\n\n    # Save `oauth_token` as `TRELLO_TOKEN` in `env`\n    #   `export TRELLO_TOKEN=value_from_oauth_token`\n\n    # Find the board/list we want to add cards to\n    # List our boards and their ids via:\n    bin/list-trello-boards.py [TRELLO_API_KEY] [TRELLO_TOKEN]\n    # Find the board we want and record its id as `TRELLO_BOARD_ID` in `env`\n    #   `export TRELLO_BOARD_ID=target_board_id`\n\n    # Output the board lists and their ids via:\n    bin/list-trello-board-lists.py [TRELLO_API_KEY] [TRELLO_TOKEN] [TRELLO_BOARD_ID]\n    # Find the list we want and record its id as `TRELLO_LIST_ID` in `env`\n    #   `export TRELLO_LIST_ID=target_board_id`\n\n    # Start our server (default port is 5000)\n    ./run.sh\n    # An alternative port can be chosen via the `PORT` environment variable\n    # PORT=6000 ./run.sh\n\n    # You should now be able to send a `/trello` command in Slack\n\nDocumentation\n-------------\nTesting\n^^^^^^^\nOur tests are powered via ``nosetests`` but require specific environment variables to be set up before hand. To run our tests, follow the steps below:\n\n.. code:: bash\n\n    # Install our development dependencies\n    pip install -r requirements-dev.txt\n\n    # Run our tests\n    ./test.sh\n\nContributing\n------------\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Test via ``./test.sh``.\n\nLicense\n-------\nCopyright (c) 2015 Underdog.io\n\nLicensed under the MIT license.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/underdogio/slack-to-trello/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/underdogio/slack-to-trello", "keywords": "slack,trello", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "slack_to_trello", "package_url": "https://pypi.org/project/slack_to_trello/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/slack_to_trello/", "project_urls": {"Download": "https://github.com/underdogio/slack-to-trello/archive/master.zip", "Homepage": "https://github.com/underdogio/slack-to-trello"}, "release_url": "https://pypi.org/project/slack_to_trello/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Perform Trello actions via slash commands in Slack", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/underdogio/slack-to-trello\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd102690a0523311f179c5bbe78e91c80e9fddf2/68747470733a2f2f7472617669732d63692e6f72672f756e646572646f67696f2f736c61636b2d746f2d7472656c6c6f2e706e673f6272616e63683d6d6173746572\"></a>\n<p>Perform Trello actions via slash commands in Slack</p>\n<p>The current iteration is a proof of concept; only 1 Slack team, 1 Trello user, and 1 Trello list is supported at the moment. In the future, we would like to support multiple teams and boards via an OAuth integration with Trello (to connect Slack users to Trello users) and some mechanism to select board (either from Slack or a mapping on the server).</p>\n<p>Convert</p>\n<img alt=\"/trello slash command\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/067166ffca2da6f9e3b73c407646e98c02d71ec9/646f63732f736c6173682d636f6d6d616e642e706e67\">\n<p>into</p>\n<img alt=\"/trello response message\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e4b2cc63582b934872bd0f570f0b489b084a4e2/646f63732f6d6573736167652e706e67\">\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>To get a copy of <tt><span class=\"pre\">slack-to-trello</span></tt> running, please follow the steps below:</p>\n<pre><span class=\"c1\"># Clone our repository\n</span>git clone https://github.com/underdogio/slack-to-trello\n<span class=\"nb\">cd</span> slack-to-trello/\n\n<span class=\"c1\"># Install our dependencies\n</span>pip install -r requirements.txt\n\n<span class=\"c1\"># Install our module as a dependency of itself (meta)\n</span>python setup.py develop\n\n<span class=\"c1\"># The remaining steps are for setting up our configuration\n# We will be building `slack_to_trello/config/env`\n# We start by copying `env.test`\n</span>cp slack_to_trello/config/env.test slack_to_trello/config/env\n\n<span class=\"c1\"># Create 2 Slack integrations (1 for receiving slash commands, 1 for sending messages)\n# First Slack integration: Slash Commands\n#   Open your browser to Slash Commands\n#   https://my.slack.com/services/new/slash-commands\n#   Command: \"/trello\"\n#   URL: \"https://my-server/slack/message\"\n#     Please replace `my-server` with your server location\n#     Don't forget to host it on HTTPS\n#   Method: \"POST\"\n#   Token: Provided by Slack\n#   Autocomplete -&gt; Description: \"Add a Trello card on the Engineering board\"\n#   Autocomplete -&gt; Help text: \"[card subject]\"\n#   Descriptive Label: \"slack-to-trello\"\n#   Click \"Save Integration\"\n</span>\n<span class=\"c1\"># Once saved, add the \"Token\" field as `SLACK_TOKEN` into `env`\n#   `export SLACK_TOKEN=token_from_slack`\n</span>\n<span class=\"c1\"># Second Slack integration: Incoming WebHooks\n#   These will be replies upon successful Trello card additions\n#   Open your browser to Incoming WebHooks\n#   https://my.slack.com/services/new/incoming-webhook\n#   Post to Channel: Pick any channel -- we will always be overriding this\n#   Webhook URL: Provided by Slack\n#   Descriptive Label: \"slack-to-trello messages\"\n#   Customize Name: \"slack-to-trello\"\n#   Customize Icon: Pick any you like -- we recommend `:signal_strength:`\n#   Click \"Save Settings\"\n</span>\n<span class=\"c1\"># Once saved, add the \"Webhook URL\" field as `SLACK_MESSAGE_URL` into `env`\n#   `export SLACK_MESSAGE_URL=https://hooks.slack.com/services/path/to/reply`\n</span>\n<span class=\"c1\"># Set up our Trello integration\n#   We recommend creating a bot user as all cards\n#   will be marked as \"Created by\" the chosen user\n</span>\n<span class=\"c1\"># Collect our Trello API information\n#   Open our browser to https://trello.com/app-key\n#   Save \"Key\" as `TRELLO_API_KEY` in `env`\n#   `export TRELLO_API_KEY=value_from_key`\n</span>\n<span class=\"c1\"># Generate a permanent Trello API token (this can be disabled later on)\n#   Using the \"Key\" as \"TRELLO_API_KEY\" and \"Secret\" as \"TRELLO_API_SECRET\"\n</span><span class=\"nv\">TRELLO_API_KEY</span><span class=\"o\">=</span>key_from_website <span class=\"nv\">TRELLO_API_SECRET</span><span class=\"o\">=</span>secret_from_website bin/generate-trello-tokens.py\n<span class=\"c1\">#   You will be prompted to open a link\n#   Follow the link and click \"Accept\"\n#   Copy the standalone value from the page\n#   Go back to the command line and enter \"y\"\n#   You will be prompted for a PIN\n#   Paste the value from the page\n#   You will be given an `oauth_token` and `oauth_token_secret` value\n</span>\n<span class=\"c1\"># Save `oauth_token` as `TRELLO_TOKEN` in `env`\n#   `export TRELLO_TOKEN=value_from_oauth_token`\n</span>\n<span class=\"c1\"># Find the board/list we want to add cards to\n# List our boards and their ids via:\n</span>bin/list-trello-boards.py <span class=\"o\">[</span>TRELLO_API_KEY<span class=\"o\">]</span> <span class=\"o\">[</span>TRELLO_TOKEN<span class=\"o\">]</span>\n<span class=\"c1\"># Find the board we want and record its id as `TRELLO_BOARD_ID` in `env`\n#   `export TRELLO_BOARD_ID=target_board_id`\n</span>\n<span class=\"c1\"># Output the board lists and their ids via:\n</span>bin/list-trello-board-lists.py <span class=\"o\">[</span>TRELLO_API_KEY<span class=\"o\">]</span> <span class=\"o\">[</span>TRELLO_TOKEN<span class=\"o\">]</span> <span class=\"o\">[</span>TRELLO_BOARD_ID<span class=\"o\">]</span>\n<span class=\"c1\"># Find the list we want and record its id as `TRELLO_LIST_ID` in `env`\n#   `export TRELLO_LIST_ID=target_board_id`\n</span>\n<span class=\"c1\"># Start our server (default port is 5000)\n</span>./run.sh\n<span class=\"c1\"># An alternative port can be chosen via the `PORT` environment variable\n# PORT=6000 ./run.sh\n</span>\n<span class=\"c1\"># You should now be able to send a `/trello` command in Slack</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<h2 id=\"testing\"><span class=\"section-subtitle\">Testing</span></h2>\n<p>Our tests are powered via <tt>nosetests</tt> but require specific environment variables to be set up before hand. To run our tests, follow the steps below:</p>\n<pre><span class=\"c1\"># Install our development dependencies\n</span>pip install -r requirements-dev.txt\n\n<span class=\"c1\"># Run our tests\n</span>./test.sh\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>In lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Test via <tt>./test.sh</tt>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2015 Underdog.io</p>\n<p>Licensed under the MIT license.</p>\n</div>\n\n          </div>"}, "last_serial": 1682723, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "32ac78c23d92f0a3318d6d782ba25e60", "sha256": "d7c56d9791b538dea16dfe3d6917ca2a2cb16ecb3d839f898f43d53d3a45dd98"}, "downloads": -1, "filename": "slack_to_trello-1.0.0.tar.gz", "has_sig": false, "md5_digest": "32ac78c23d92f0a3318d6d782ba25e60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11800, "upload_time": "2015-08-18T17:04:43", "upload_time_iso_8601": "2015-08-18T17:04:43.553100Z", "url": "https://files.pythonhosted.org/packages/7d/cf/135ade6dae7c546cbd30f034f03235329fbcecb5cec5b5dbc20bc6e922af/slack_to_trello-1.0.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "eca665aaa600a5403130412c66ce7c57", "sha256": "8967d84d28c620fe7bbf5a15f8a2104b398ab399a6b3c0a36c7d65a45604942b"}, "downloads": -1, "filename": "slack_to_trello-1.0.0.zip", "has_sig": false, "md5_digest": "eca665aaa600a5403130412c66ce7c57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19708, "upload_time": "2015-08-18T17:04:47", "upload_time_iso_8601": "2015-08-18T17:04:47.191802Z", "url": "https://files.pythonhosted.org/packages/4b/c6/32a807403cce5efcd900c5914d563852945f8882e58835f631fc126eae56/slack_to_trello-1.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "32ac78c23d92f0a3318d6d782ba25e60", "sha256": "d7c56d9791b538dea16dfe3d6917ca2a2cb16ecb3d839f898f43d53d3a45dd98"}, "downloads": -1, "filename": "slack_to_trello-1.0.0.tar.gz", "has_sig": false, "md5_digest": "32ac78c23d92f0a3318d6d782ba25e60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11800, "upload_time": "2015-08-18T17:04:43", "upload_time_iso_8601": "2015-08-18T17:04:43.553100Z", "url": "https://files.pythonhosted.org/packages/7d/cf/135ade6dae7c546cbd30f034f03235329fbcecb5cec5b5dbc20bc6e922af/slack_to_trello-1.0.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "eca665aaa600a5403130412c66ce7c57", "sha256": "8967d84d28c620fe7bbf5a15f8a2104b398ab399a6b3c0a36c7d65a45604942b"}, "downloads": -1, "filename": "slack_to_trello-1.0.0.zip", "has_sig": false, "md5_digest": "eca665aaa600a5403130412c66ce7c57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19708, "upload_time": "2015-08-18T17:04:47", "upload_time_iso_8601": "2015-08-18T17:04:47.191802Z", "url": "https://files.pythonhosted.org/packages/4b/c6/32a807403cce5efcd900c5914d563852945f8882e58835f631fc126eae56/slack_to_trello-1.0.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:08:37 2020"}