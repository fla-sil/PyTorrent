{"info": {"author": "Aaron Dettmann", "author_email": "dettmann@kth.se", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering"], "description": ".. image:: https://img.shields.io/pypi/v/schemadict.svg?style=flat\n   :target: https://pypi.org/project/schemadict/\n   :alt: Latest PyPI version\n\n.. image:: https://readthedocs.org/projects/schemadict/badge/?version=latest\n    :target: https://schemadict.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/badge/license-Apache%202-blue.svg\n    :target: https://github.com/airinnova/schemadict/blob/master/LICENSE.txt\n    :alt: License\n\n.. image:: https://travis-ci.org/airinnova/schemadict.svg?branch=master\n    :target: https://travis-ci.org/airinnova/schemadict\n    :alt: Build status\n\n.. image:: https://codecov.io/gh/airinnova/schemadict/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/airinnova/schemadict\n    :alt: Coverage\n\n|\n\n.. image:: https://raw.githubusercontent.com/airinnova/schemadict/master/docs/source/_static/images/logo.png\n   :target: https://github.com/airinnova/schemadict/\n   :alt: logo\n\nA *schemadict* is a regular Python dictionary which specifies the type and format of values for some given key. To check if a test dictionary is conform with the expected schema, *schemadict* provides the `validate()` method. If the test dictionary is ill-defined, an error will be thrown, otherwise `None` is returned.\n\nExamples\n========\n\n**Basic usage**\n\n.. code:: python\n\n    >>> from schemadict import schemadict\n\n    >>> schema = schemadict({\n    ...     'name': {\n    ...         'type': str,\n    ...         'min_len': 3,\n    ...         'max_len': 12,\n    ...     },\n    ...     'age': {\n    ...         'type': int,\n    ...         '>=': 0,\n    ...         '<': 150,\n    ...     },\n    ... })\n    >>>\n    >>> testdict = {'name': 'Neil', 'age': 55}\n    >>> schema.validate(testdict)\n    >>>\n\n    >>> testdict = {'name': 'Neil', 'age': -12}\n    >>> schema.validate(testdict)\n    Traceback (most recent call last):\n        ...\n    ValueError: 'age' too small: expected >= 0, but was -12\n    >>>\n\n    >>> testdict = {'name': 'Neil', 'age': '55'}\n    >>> schema.validate(testdict)\n    Traceback (most recent call last):\n        ...\n    TypeError: unexpected type for 'age': expected <class 'int'>, but was <class 'str'>\n    >>>\n\n**Nested schemadict**\n\nIt is possible to check individual item in a list. For instance, in the following example we check if each item (of type ``str``) looks like a valid IPv4 address. How each item should look like can be specified with the ``item_schema`` keyword.\n\n.. code:: python\n\n    >>> schema = schemadict({\n    ...     'ip_addrs': {\n    ...         'type': list,\n    ...         'item_schema': {\n    ...             'type': str,\n    ...             'regex': r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$',\n    ...         },\n    ...     },\n    ... })\n    >>>\n    >>>\n    >>> schema.validate({'ip_addrs': ['127.0.0.1', '192.168.1.1']})  # Valid\n    >>> schema.validate({'ip_addrs': ['127.0.0.1', '192.168.1.1', '1234.5678']})  # Last item invalid\n    Traceback (most recent call last):\n        ...\n    ValueError: regex mismatch for 'ip_addrs': expected pattern '^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$', got '1234.5678'\n    >>>\n\nItems in a ``list`` (or ``tuple``) may themselves be dictionaries which can be described with *schemadicts*. In this case, we use the keyword ``item_schemadict`` as illustrated in the following example.\n\n.. code:: python\n\n    >>> schema_city = schemadict({\n    ...     'name': {\n    ...         'type': str\n    ...     },\n    ...     'population': {\n    ...         'type': int,\n    ...         '>=': 0,\n    ...     },\n    ... })\n    >>>\n    >>> schema_country = schemadict({\n    ...     'name': {'type': str},\n    ...     'cities': {\n    ...         'type': list,\n    ...         'item_type': dict,\n    ...         'item_schemadict': schema_city,\n    ...     },\n    ... })\n    >>>\n    >>> test_country = {\n    ...     'name': 'Neverland',\n    ...     'cities': [\n    ...         {'name': 'Faketown', 'population': 3},\n    ...         {'name': 'Evergreen', 'population': True},\n    ...     ],\n    ... }\n    >>>\n    >>> schema_country.validate(test_country)\n    Traceback (most recent call last):\n        ...\n    TypeError: unexpected type for 'population': expected <class 'int'>, but was <class 'bool'>\n    >>>\n\n**Custom validation functions**\n\nEach *type* (``int``, ``bool``, ``str``, etc.) defines its own set of validation keywords and corresponding test functions. The dictionary ``STANDARD_VALIDATORS`` provided by the ``schemadict`` module contains the default validation functions for the Python's built-in types. However, it is also possible to modify or extend this dictionary with custom validation functions.\n\n.. code:: python\n\n    >>> from schemadict import schemadict, STANDARD_VALIDATORS\n\n    >>> # Add a custom validation function\n    >>> def is_divisible(key, value, comp_value, _):\n    ...     if value % comp_value != 0:\n    ...             raise ValueError(f\"{key!r} is not divisible by {comp_value}\")\n    ...\n    ...\n    ...\n    >>>\n\n    >>> # Update the standard validator dictionary\n    >>> my_validators = STANDARD_VALIDATORS\n    >>> my_validators[int]['%'] = is_divisible\n\n    >>> # Register the updated validator dictionary in the new schemadict instance\n    >>> s = schemadict({'my_num': {'type': int, '%': 3}}, validators=my_validators)\n\n    >>> s.validate({'my_num': 33})\n    >>> s.validate({'my_num': 4})\n    Traceback (most recent call last):\n        ...\n    ValueError: 'my_num' is not divisible by 3\n    >>>\n\nIt is also possible to define *custom types* and *custom test functions* as shown in the following example.\n\n.. code:: python\n\n    >>> from schemadict import schemadict, STANDARD_VALIDATORS\n\n    >>> class MyOcean:\n    ...     has_dolphins = True\n    ...     has_plastic = False\n    ...\n    >>>\n\n    >>> def has_dolphins(key, value, comp_value, _):\n    ...     if getattr(value, 'has_dolphins') is not comp_value:\n    ...         raise ValueError(f\"{key!r} does not have dolphins\")\n    ...\n    >>>\n\n    >>> my_validators = STANDARD_VALIDATORS\n    >>> my_validators.update({MyOcean: {'has_dolphins': has_dolphins}})\n    >>>\n\n    >>> schema_ocean = schemadict(\n    ...     {'ocean': {'type': MyOcean, 'has_dolphins': True}},\n    ...     validators=my_validators,\n    ... )\n    >>>\n\n    >>> ocean1 = MyOcean()\n    >>> schema_ocean.validate({'ocean': ocean1})\n    >>>\n\n    >>> ocean2 = MyOcean()\n    >>> ocean2.has_dolphins = False\n    >>> schema_ocean.validate({'ocean': ocean2})\n    Traceback (most recent call last):\n        ...\n    ValueError: 'ocean' does not have dolphins\n\n\nFull documentation: https://schemadict.readthedocs.io/\n\nFeatures\n========\n\nWhat *schemadict* offers:\n\n* Built-in support for Python's primitive types\n* Specify *required* and *optional* keys\n* Validate *nested* schemas\n* Add custom validation functions to built-in types\n* Add custom validation functions to custom types\n* Support for Regex checks of strings\n\nFeatures currently in development\n\n* Metaschema validation\n* Lazy validation and summary of all errors\n* Allow schema variations: schmea 1 OR schema 2\n* Add support for validation of type `number.Number`\n\nInstallation\n============\n\n*Schemadict* is available on `PyPI <https://pypi.org/project/schemadict/>`_ and may simply be installed with\n\n.. code::\n\n    pip install schemadict\n\nIdea\n====\n\n*Schemadict* is loosely inspired by `JSON schema <https://json-schema.org/>`_ and `jsonschema <https://github.com/Julian/jsonschema>`_, a JSON schema validator for Python.\n\nLicense\n=======\n\n**License:** Apache-2.0\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/airinnova/schemadict/", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "schemadict", "package_url": "https://pypi.org/project/schemadict/", "platform": "", "project_url": "https://pypi.org/project/schemadict/", "project_urls": {"Homepage": "https://github.com/airinnova/schemadict/"}, "release_url": "https://pypi.org/project/schemadict/0.0.8/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "Validate Python dictionaries like JSON schema", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/schemadict/\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3351aef25e0ebfa8329b634379fafcfbf39daf1e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736368656d61646963742e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://schemadict.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ae8adcd2817d254d54f6a466ae54c862765e5de/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f736368656d61646963742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/airinnova/schemadict/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5f3fc97f8a56b0816bf00a50c634ed430032cfa2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d417061636865253230322d626c75652e737667\"></a>\n<a href=\"https://travis-ci.org/airinnova/schemadict\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1cff023172b31a639a367ba7990eb41873d2e243/68747470733a2f2f7472617669732d63692e6f72672f616972696e6e6f76612f736368656d61646963742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/airinnova/schemadict\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ded5b96f0c5c70a80f562c121e5795c549b90a1c/68747470733a2f2f636f6465636f762e696f2f67682f616972696e6e6f76612f736368656d61646963742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<div>\n<div><br></div>\n</div>\n<a href=\"https://github.com/airinnova/schemadict/\" rel=\"nofollow\"><img alt=\"logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/555a8370948c5bed6f165edf7e5e9dc9d45ea540/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616972696e6e6f76612f736368656d61646963742f6d61737465722f646f63732f736f757263652f5f7374617469632f696d616765732f6c6f676f2e706e67\"></a>\n<p>A <em>schemadict</em> is a regular Python dictionary which specifies the type and format of values for some given key. To check if a test dictionary is conform with the expected schema, <em>schemadict</em> provides the <cite>validate()</cite> method. If the test dictionary is ill-defined, an error will be thrown, otherwise <cite>None</cite> is returned.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p><strong>Basic usage</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">schemadict</span> <span class=\"kn\">import</span> <span class=\"n\">schemadict</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">schemadict</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'min_len'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'max_len'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'&gt;='</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'&lt;'</span><span class=\"p\">:</span> <span class=\"mi\">150</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">testdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Neil'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">55</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">testdict</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">testdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Neil'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">testdict</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"s1\">'age'</span> <span class=\"n\">too</span> <span class=\"n\">small</span><span class=\"p\">:</span> <span class=\"n\">expected</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">but</span> <span class=\"n\">was</span> <span class=\"o\">-</span><span class=\"mi\">12</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">testdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Neil'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"s1\">'55'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">testdict</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">unexpected</span> <span class=\"nb\">type</span> <span class=\"k\">for</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"n\">expected</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">int</span><span class=\"s1\">'&gt;, but was &lt;class '</span><span class=\"nb\">str</span><span class=\"s1\">'&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p><strong>Nested schemadict</strong></p>\n<p>It is possible to check individual item in a list. For instance, in the following example we check if each item (of type <tt>str</tt>) looks like a valid IPv4 address. How each item should look like can be specified with the <tt>item_schema</tt> keyword.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">schemadict</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'ip_addrs'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'item_schema'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>             <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>             <span class=\"s1\">'regex'</span><span class=\"p\">:</span> <span class=\"sa\">r</span><span class=\"s1\">'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">({</span><span class=\"s1\">'ip_addrs'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"s1\">'192.168.1.1'</span><span class=\"p\">]})</span>  <span class=\"c1\"># Valid</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">({</span><span class=\"s1\">'ip_addrs'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"s1\">'192.168.1.1'</span><span class=\"p\">,</span> <span class=\"s1\">'1234.5678'</span><span class=\"p\">]})</span>  <span class=\"c1\"># Last item invalid</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">regex</span> <span class=\"n\">mismatch</span> <span class=\"k\">for</span> <span class=\"s1\">'ip_addrs'</span><span class=\"p\">:</span> <span class=\"n\">expected</span> <span class=\"n\">pattern</span> <span class=\"s1\">'^</span><span class=\"se\">\\\\</span><span class=\"s1\">d{1,3}</span><span class=\"se\">\\\\</span><span class=\"s1\">.</span><span class=\"se\">\\\\</span><span class=\"s1\">d{1,3}</span><span class=\"se\">\\\\</span><span class=\"s1\">.</span><span class=\"se\">\\\\</span><span class=\"s1\">d{1,3}</span><span class=\"se\">\\\\</span><span class=\"s1\">.</span><span class=\"se\">\\\\</span><span class=\"s1\">d{1,3}$'</span><span class=\"p\">,</span> <span class=\"n\">got</span> <span class=\"s1\">'1234.5678'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>Items in a <tt>list</tt> (or <tt>tuple</tt>) may themselves be dictionaries which can be described with <em>schemadicts</em>. In this case, we use the keyword <tt>item_schemadict</tt> as illustrated in the following example.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema_city</span> <span class=\"o\">=</span> <span class=\"n\">schemadict</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"o\">...</span>     <span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'population'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'&gt;='</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema_country</span> <span class=\"o\">=</span> <span class=\"n\">schemadict</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'cities'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'item_type'</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'item_schemadict'</span><span class=\"p\">:</span> <span class=\"n\">schema_city</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">test_country</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Neverland'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'cities'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>         <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Faketown'</span><span class=\"p\">,</span> <span class=\"s1\">'population'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>         <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Evergreen'</span><span class=\"p\">,</span> <span class=\"s1\">'population'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">],</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema_country</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">test_country</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">unexpected</span> <span class=\"nb\">type</span> <span class=\"k\">for</span> <span class=\"s1\">'population'</span><span class=\"p\">:</span> <span class=\"n\">expected</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">int</span><span class=\"s1\">'&gt;, but was &lt;class '</span><span class=\"nb\">bool</span><span class=\"s1\">'&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p><strong>Custom validation functions</strong></p>\n<p>Each <em>type</em> (<tt>int</tt>, <tt>bool</tt>, <tt>str</tt>, etc.) defines its own set of validation keywords and corresponding test functions. The dictionary <tt>STANDARD_VALIDATORS</tt> provided by the <tt>schemadict</tt> module contains the default validation functions for the Python\u2019s built-in types. However, it is also possible to modify or extend this dictionary with custom validation functions.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">schemadict</span> <span class=\"kn\">import</span> <span class=\"n\">schemadict</span><span class=\"p\">,</span> <span class=\"n\">STANDARD_VALIDATORS</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Add a custom validation function</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">is_divisible</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">comp_value</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">%</span> <span class=\"n\">comp_value</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">!r}</span><span class=\"s2\"> is not divisible by </span><span class=\"si\">{</span><span class=\"n\">comp_value</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Update the standard validator dictionary</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_validators</span> <span class=\"o\">=</span> <span class=\"n\">STANDARD_VALIDATORS</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_validators</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">][</span><span class=\"s1\">'%'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">is_divisible</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Register the updated validator dictionary in the new schemadict instance</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">schemadict</span><span class=\"p\">({</span><span class=\"s1\">'my_num'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"s1\">'%'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}},</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"n\">my_validators</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">({</span><span class=\"s1\">'my_num'</span><span class=\"p\">:</span> <span class=\"mi\">33</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">({</span><span class=\"s1\">'my_num'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"s1\">'my_num'</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">divisible</span> <span class=\"n\">by</span> <span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>It is also possible to define <em>custom types</em> and <em>custom test functions</em> as shown in the following example.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">schemadict</span> <span class=\"kn\">import</span> <span class=\"n\">schemadict</span><span class=\"p\">,</span> <span class=\"n\">STANDARD_VALIDATORS</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyOcean</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">has_dolphins</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">...</span>     <span class=\"n\">has_plastic</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">has_dolphins</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">comp_value</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s1\">'has_dolphins'</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">comp_value</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">!r}</span><span class=\"s2\"> does not have dolphins\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_validators</span> <span class=\"o\">=</span> <span class=\"n\">STANDARD_VALIDATORS</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_validators</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"n\">MyOcean</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'has_dolphins'</span><span class=\"p\">:</span> <span class=\"n\">has_dolphins</span><span class=\"p\">}})</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema_ocean</span> <span class=\"o\">=</span> <span class=\"n\">schemadict</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s1\">'ocean'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"n\">MyOcean</span><span class=\"p\">,</span> <span class=\"s1\">'has_dolphins'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}},</span>\n<span class=\"o\">...</span>     <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"n\">my_validators</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ocean1</span> <span class=\"o\">=</span> <span class=\"n\">MyOcean</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema_ocean</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">({</span><span class=\"s1\">'ocean'</span><span class=\"p\">:</span> <span class=\"n\">ocean1</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ocean2</span> <span class=\"o\">=</span> <span class=\"n\">MyOcean</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ocean2</span><span class=\"o\">.</span><span class=\"n\">has_dolphins</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema_ocean</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">({</span><span class=\"s1\">'ocean'</span><span class=\"p\">:</span> <span class=\"n\">ocean2</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"s1\">'ocean'</span> <span class=\"n\">does</span> <span class=\"ow\">not</span> <span class=\"n\">have</span> <span class=\"n\">dolphins</span>\n</pre>\n<p>Full documentation: <a href=\"https://schemadict.readthedocs.io/\" rel=\"nofollow\">https://schemadict.readthedocs.io/</a></p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>What <em>schemadict</em> offers:</p>\n<ul>\n<li>Built-in support for Python\u2019s primitive types</li>\n<li>Specify <em>required</em> and <em>optional</em> keys</li>\n<li>Validate <em>nested</em> schemas</li>\n<li>Add custom validation functions to built-in types</li>\n<li>Add custom validation functions to custom types</li>\n<li>Support for Regex checks of strings</li>\n</ul>\n<p>Features currently in development</p>\n<ul>\n<li>Metaschema validation</li>\n<li>Lazy validation and summary of all errors</li>\n<li>Allow schema variations: schmea 1 OR schema 2</li>\n<li>Add support for validation of type <cite>number.Number</cite></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><em>Schemadict</em> is available on <a href=\"https://pypi.org/project/schemadict/\" rel=\"nofollow\">PyPI</a> and may simply be installed with</p>\n<pre>pip install schemadict\n</pre>\n</div>\n<div id=\"idea\">\n<h2>Idea</h2>\n<p><em>Schemadict</em> is loosely inspired by <a href=\"https://json-schema.org/\" rel=\"nofollow\">JSON schema</a> and <a href=\"https://github.com/Julian/jsonschema\" rel=\"nofollow\">jsonschema</a>, a JSON schema validator for Python.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><strong>License:</strong> Apache-2.0</p>\n</div>\n\n          </div>"}, "last_serial": 7009916, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "34a724a80a67282c4e46885edf0e44f4", "sha256": "d49ad59bbc2478d7d7f17b290cdf8000ccbac609c153cbdd2426830eb194e441"}, "downloads": -1, "filename": "schemadict-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "34a724a80a67282c4e46885edf0e44f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 1112, "upload_time": "2020-03-30T16:26:21", "upload_time_iso_8601": "2020-03-30T16:26:21.554162Z", "url": "https://files.pythonhosted.org/packages/92/f0/008ccee47d236cedb016652e6e9f029bf87d14a54ef4203486704598a2db/schemadict-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7bde5aa78625ac481f5ff1bf020c896", "sha256": "3aa1e3ed431e2f31e05af45d5654c94b271d543e610708319deaad94b92c523a"}, "downloads": -1, "filename": "schemadict-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d7bde5aa78625ac481f5ff1bf020c896", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 902, "upload_time": "2020-03-30T16:26:23", "upload_time_iso_8601": "2020-03-30T16:26:23.707389Z", "url": "https://files.pythonhosted.org/packages/02/18/391019ec2e7c18613e22c68274293fb62cf9347d7e1059df052c03181b9c/schemadict-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "714cf6680c0fabc98f7a457fc08b7677", "sha256": "3d1366e4bcdf456e4342dd3a2e1fbeb770919c85176a2bd56829f55342096b64"}, "downloads": -1, "filename": "schemadict-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "714cf6680c0fabc98f7a457fc08b7677", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 9576, "upload_time": "2020-03-30T19:22:03", "upload_time_iso_8601": "2020-03-30T19:22:03.730078Z", "url": "https://files.pythonhosted.org/packages/ef/5b/28a718526fdbf1949ff5ea4060fb9443f8b60c7acb248d2392b5c4b50fdd/schemadict-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c34f8f57e6916d0d8ecd11306fe79762", "sha256": "0eca7966aa2467d7ee6ac854e1101469690f64c454c1a2722816e53070f2ce2c"}, "downloads": -1, "filename": "schemadict-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c34f8f57e6916d0d8ecd11306fe79762", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 8917, "upload_time": "2020-03-30T19:22:05", "upload_time_iso_8601": "2020-03-30T19:22:05.394916Z", "url": "https://files.pythonhosted.org/packages/a8/e3/240ad625f2bf3d90859952b5c82669a9e314e280d4d37b3c7dcd0734ce2a/schemadict-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "13d599b8feee274a7329ade720e33186", "sha256": "ebf54874a038ecde3ac7b7c327cf4c43ea4b4db8870bf0c5727fac58809eb56f"}, "downloads": -1, "filename": "schemadict-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "13d599b8feee274a7329ade720e33186", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 10812, "upload_time": "2020-04-01T19:38:39", "upload_time_iso_8601": "2020-04-01T19:38:39.931522Z", "url": "https://files.pythonhosted.org/packages/3e/42/efac74e61507126aa5bef56d74f0ce09f36c2b43cab1ef981c2e8ac5fc9d/schemadict-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1755886bb3f6509e01ba7bd198264089", "sha256": "901e9464c6ca74c7ac2399bcd0194f43abacdbb008fffbdca060b3cd8ea95f66"}, "downloads": -1, "filename": "schemadict-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1755886bb3f6509e01ba7bd198264089", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 11583, "upload_time": "2020-04-01T19:38:44", "upload_time_iso_8601": "2020-04-01T19:38:44.434007Z", "url": "https://files.pythonhosted.org/packages/68/ba/f5b022c5e087ed43014b9a2f58f2da7fc578a2f3587b14d85d6ea41f57ca/schemadict-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "1467dbdd4bb09a925deb5f83ac37e055", "sha256": "b39171bb4f431699992c8c5b97294cbb4f6dbc525520de5e9162637e321197ba"}, "downloads": -1, "filename": "schemadict-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1467dbdd4bb09a925deb5f83ac37e055", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 9738, "upload_time": "2020-04-04T16:18:12", "upload_time_iso_8601": "2020-04-04T16:18:12.613961Z", "url": "https://files.pythonhosted.org/packages/f3/79/dd42eddca23e06d742dfa8956d459b00cfd62f1e4c66fc581e85d683fe8f/schemadict-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7015fb8ab8f8146757a02a5905210731", "sha256": "8dd97d14666b34accbfa5b072908b942ca4b34af3685a1815b7510550b310229"}, "downloads": -1, "filename": "schemadict-0.0.4.tar.gz", "has_sig": false, "md5_digest": "7015fb8ab8f8146757a02a5905210731", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9298, "upload_time": "2020-04-04T16:18:16", "upload_time_iso_8601": "2020-04-04T16:18:16.486516Z", "url": "https://files.pythonhosted.org/packages/27/d7/39c8866dece078ca0115200ddb2c28dbca4bf4bda41d1ce00b557f2da507/schemadict-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "dd54a6c051c217856ffdf176c3af8cf1", "sha256": "88b1a075f8fcb72e389c80e145040cb3d78b7356b0a1d7eeaa6eb5ab38838f5f"}, "downloads": -1, "filename": "schemadict-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "dd54a6c051c217856ffdf176c3af8cf1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 10084, "upload_time": "2020-04-10T18:09:47", "upload_time_iso_8601": "2020-04-10T18:09:47.747384Z", "url": "https://files.pythonhosted.org/packages/57/2d/6cf2ca7b7b6d39057c5d6eea394c357b4aa2da1bca8580a6e702d1417013/schemadict-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5347d133a1fffe59c9c42f131cb82109", "sha256": "57c08b38f1aa4f3baa8421f492f61aaac1afd58c97e8aa489523d37f5c408efe"}, "downloads": -1, "filename": "schemadict-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5347d133a1fffe59c9c42f131cb82109", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 10752, "upload_time": "2020-04-10T18:09:49", "upload_time_iso_8601": "2020-04-10T18:09:49.860932Z", "url": "https://files.pythonhosted.org/packages/cc/b7/af6c08e11fa5c9b88df110b4af9cbcf56b10d49b1265949cbba3017790bf/schemadict-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "433958b885743657fd760253f0aae00c", "sha256": "83d4d5bc0000d7f99cd441ab5b89817cf73021c2044e955ef5a25f9452b43dd7"}, "downloads": -1, "filename": "schemadict-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "433958b885743657fd760253f0aae00c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 10676, "upload_time": "2020-04-10T20:27:00", "upload_time_iso_8601": "2020-04-10T20:27:00.507625Z", "url": "https://files.pythonhosted.org/packages/27/f0/e68c3b75b5880cbce79b77304215752714fd502089b447a099d3ddd74e3d/schemadict-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33201aef8875feb0d1b473bfb3025d13", "sha256": "d16a896cffa5d197f7be7f06458e94cc16e067b195e96a6480734b18e800cb11"}, "downloads": -1, "filename": "schemadict-0.0.6.tar.gz", "has_sig": false, "md5_digest": "33201aef8875feb0d1b473bfb3025d13", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 12143, "upload_time": "2020-04-10T20:27:03", "upload_time_iso_8601": "2020-04-10T20:27:03.987482Z", "url": "https://files.pythonhosted.org/packages/66/df/5dcf7553dd2ec7a22c2451b92f6485e19c07e4b3a85fdc3d63245a907a8b/schemadict-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "ded0be3a303cfb1b8f0b36e3bd1f088e", "sha256": "034a59fe5073048fbf60a273aa9a8c160b35221c9b7088ac0e1d75e007752c2b"}, "downloads": -1, "filename": "schemadict-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ded0be3a303cfb1b8f0b36e3bd1f088e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 11488, "upload_time": "2020-04-11T15:53:34", "upload_time_iso_8601": "2020-04-11T15:53:34.088383Z", "url": "https://files.pythonhosted.org/packages/33/92/a8cf74c38072e1a6a8d3ad9f2c0f2135ed6a87a2550047372e0ee7a1e775/schemadict-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8129b34b982302f126c2accb2500cd5b", "sha256": "cd434689a3babc3f3f59d8c61b1167272d9f6964678282ae2fd06dc638109c8e"}, "downloads": -1, "filename": "schemadict-0.0.7.tar.gz", "has_sig": false, "md5_digest": "8129b34b982302f126c2accb2500cd5b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 13389, "upload_time": "2020-04-11T15:53:38", "upload_time_iso_8601": "2020-04-11T15:53:38.793634Z", "url": "https://files.pythonhosted.org/packages/37/44/ea38a6ee1d593a78a408665e56a248ba84ea52f14767c54179dbe34fa26f/schemadict-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "26efecb9f7027d76d2cbdf709ad57c57", "sha256": "efcb2057596859b571c92004135bdfb0ee546912821cc9e278f47e58c0ac9536"}, "downloads": -1, "filename": "schemadict-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "26efecb9f7027d76d2cbdf709ad57c57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 11564, "upload_time": "2020-04-13T13:31:55", "upload_time_iso_8601": "2020-04-13T13:31:55.033409Z", "url": "https://files.pythonhosted.org/packages/ad/b6/c729850177040164878af33778d066ac01f3d083f0117cd17576dc4357e9/schemadict-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3038eae4cdc61a754aad6ff954d1b476", "sha256": "795f67b9498d0f22e7cf297be3fb358423b426873317e782475fa499842eeb5c"}, "downloads": -1, "filename": "schemadict-0.0.8.tar.gz", "has_sig": false, "md5_digest": "3038eae4cdc61a754aad6ff954d1b476", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 13460, "upload_time": "2020-04-13T13:32:00", "upload_time_iso_8601": "2020-04-13T13:32:00.962857Z", "url": "https://files.pythonhosted.org/packages/54/bd/d31c2de1818015ad2ae44264490f2b0ac98237f805060f9d877e07501065/schemadict-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26efecb9f7027d76d2cbdf709ad57c57", "sha256": "efcb2057596859b571c92004135bdfb0ee546912821cc9e278f47e58c0ac9536"}, "downloads": -1, "filename": "schemadict-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "26efecb9f7027d76d2cbdf709ad57c57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 11564, "upload_time": "2020-04-13T13:31:55", "upload_time_iso_8601": "2020-04-13T13:31:55.033409Z", "url": "https://files.pythonhosted.org/packages/ad/b6/c729850177040164878af33778d066ac01f3d083f0117cd17576dc4357e9/schemadict-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3038eae4cdc61a754aad6ff954d1b476", "sha256": "795f67b9498d0f22e7cf297be3fb358423b426873317e782475fa499842eeb5c"}, "downloads": -1, "filename": "schemadict-0.0.8.tar.gz", "has_sig": false, "md5_digest": "3038eae4cdc61a754aad6ff954d1b476", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 13460, "upload_time": "2020-04-13T13:32:00", "upload_time_iso_8601": "2020-04-13T13:32:00.962857Z", "url": "https://files.pythonhosted.org/packages/54/bd/d31c2de1818015ad2ae44264490f2b0ac98237f805060f9d877e07501065/schemadict-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:52 2020"}