{"info": {"author": "Joshua Holbrook", "author_email": "josh.holbrook@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Other/Nonlisted Topic"], "description": "Pywalk\n======\n\nPywalk is a python module written for traversing trees built of\ndictionaries, lists and tuples in a breadth-first manner.\n\nThis module is still under development. If you're used to mature,\npolished python libraries you may want to avoid pywalk. Additionally, it\nhas only been tested against Python 2.7.1+ (what happens to be what's on\nmy computer) so it may not work as expected in Python 3.x. However, if\nyou're a more adventurous developer with an urge (or need) for\nmanipulating nested data structures, this just might be the library for\nyou!\n\nPywalk is a spiritual port of\n`js-traverse <https://github.com/substack/js-traverse>`_, in that it's\nmeant to solve similar problems.\n\nHow It Works:\n-------------\n\n``walk(tree)`` returns a decorator that applies a callback to each node\nin the tree, in a breadth-first manner. For example:\n\n::\n\n    tree = {'a': 1, 'b': [9, 9, 6, 7, 6]}\n\n    print(\"Tree before: \"+repr(tree))\n\n    @walk(tree)\n    def that_aint_my_zip_code(node):\n        if node.value == [9, 9, 6, 7, 6] :\n            node.set([9, 9, 7, 7, 5])\n\n    print(\"Tree after: \"+repr(tree))\n\nFor more, visit https://github.com/jesusabdullah/pywalk .", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jesusabdullah/pywalk", "keywords": "traverse,walk,tree", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pywalk", "package_url": "https://pypi.org/project/pywalk/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pywalk/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jesusabdullah/pywalk"}, "release_url": "https://pypi.org/project/pywalk/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Recursively walk through and manipulate dict/list/tuple trees", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pywalk is a python module written for traversing trees built of\ndictionaries, lists and tuples in a breadth-first manner.</p>\n<p>This module is still under development. If you\u2019re used to mature,\npolished python libraries you may want to avoid pywalk. Additionally, it\nhas only been tested against Python 2.7.1+ (what happens to be what\u2019s on\nmy computer) so it may not work as expected in Python 3.x. However, if\nyou\u2019re a more adventurous developer with an urge (or need) for\nmanipulating nested data structures, this just might be the library for\nyou!</p>\n<p>Pywalk is a spiritual port of\n<a href=\"https://github.com/substack/js-traverse\" rel=\"nofollow\">js-traverse</a>, in that it\u2019s\nmeant to solve similar problems.</p>\n<div id=\"how-it-works\">\n<h2>How It Works:</h2>\n<p><tt>walk(tree)</tt> returns a decorator that applies a callback to each node\nin the tree, in a breadth-first manner. For example:</p>\n<pre>tree = {'a': 1, 'b': [9, 9, 6, 7, 6]}\n\nprint(\"Tree before: \"+repr(tree))\n\n@walk(tree)\ndef that_aint_my_zip_code(node):\n    if node.value == [9, 9, 6, 7, 6] :\n        node.set([9, 9, 7, 7, 5])\n\nprint(\"Tree after: \"+repr(tree))\n</pre>\n<p>For more, visit <a href=\"https://github.com/jesusabdullah/pywalk\" rel=\"nofollow\">https://github.com/jesusabdullah/pywalk</a> .</p>\n</div>\n\n          </div>"}, "last_serial": 798251, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "45be196e82bba90dae0cce8f8a418b89", "sha256": "3aaf0763637989075ddf7fc5394d3b403e37d2590633c2968718ee70ada30605"}, "downloads": -1, "filename": "pywalk-0.0.1.tar.gz", "has_sig": false, "md5_digest": "45be196e82bba90dae0cce8f8a418b89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2530, "upload_time": "2011-05-24T11:12:03", "upload_time_iso_8601": "2011-05-24T11:12:03.282249Z", "url": "https://files.pythonhosted.org/packages/b5/17/4b20ac5a6803b514ceb6ad841d8e32977604f657e62fb430eb61e194ae2c/pywalk-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8690506204cd62302e652c79b62384b6", "sha256": "1f15e45d83bcb0dcbef452c3621f985aa7ddeacced07a411c34587af392736c1"}, "downloads": -1, "filename": "pywalk-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8690506204cd62302e652c79b62384b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3157, "upload_time": "2011-05-25T10:47:29", "upload_time_iso_8601": "2011-05-25T10:47:29.538677Z", "url": "https://files.pythonhosted.org/packages/94/f8/d25a4176f3c7ea43ddc6cdc724341016723ccc1d3e89c1894681edbf06fb/pywalk-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8690506204cd62302e652c79b62384b6", "sha256": "1f15e45d83bcb0dcbef452c3621f985aa7ddeacced07a411c34587af392736c1"}, "downloads": -1, "filename": "pywalk-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8690506204cd62302e652c79b62384b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3157, "upload_time": "2011-05-25T10:47:29", "upload_time_iso_8601": "2011-05-25T10:47:29.538677Z", "url": "https://files.pythonhosted.org/packages/94/f8/d25a4176f3c7ea43ddc6cdc724341016723ccc1d3e89c1894681edbf06fb/pywalk-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:44 2020"}