{"info": {"author": "Johan Hanssen Seferidis", "author_email": "manossef@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Topic :: Security"], "description": "REST Framework Roles\n====================\n\n[![rest-framework-roles](https://circleci.com/gh/Pithikos/rest-framework-roles.svg?style=svg)](https://circleci.com/gh/Pithikos/rest-framework-roles)\n\n\nRole-based permissions for Django and Django REST Framework (functions or classes).\n\n  - Data-driven declarative permissions for humans.\n  - Full decoupling from views and models & implementation agnostic.\n  - View redirection simply works.\n  - Easy gradual integration with existing projects.\n  - Easy optimization with decorators.\n\n\nInstall\n-------\n\nInstall\n\n    pip install rest-framework-roles\n\n\nsettings.py\n```python\nINSTALLED_APPS = {\n    ..\n    'rest_framework',\n    'rest_framework_roles',  # Must be after rest_framework\n}\n\nREST_FRAMEWORK_ROLES = {\n  'roles': 'myproject.roles.ROLES',\n}\n\nREST_FRAMEWORK = {\n  ..\n  'permission_classes': [],  # This ensures that by default noone is allowed access\n  ..\n}\n```\n\nroles.py\n```python\nfrom rest_framework_roles.roles import is_user, is_anon, is_admin\n\n\nROLES = {\n    'admin': is_admin,\n    'user': is_user,\n    'anon': is_anon,\n}\n```\n\n> You can create your own role checkers for custom roles. Each checker is a simple function that\ntakes `request` and `view` as arguments.\n\n\nREST Framework example\n-------------------------------\n\nPermissions can be set either with the decorators **@allowed**, **@disallowed** or **view_permissions**. Permissions\nare checked for all matching roles at runtime. In case of no matching role, REST Framework's `permission_classes` is\nused as fallback.\n\n> Note that views need to explictly be set any permissions either via decorators or *view_permissions*. Otherwise those\nviews will not go through the permission checking. This is intended behaviour since it allows easier gradual integration\nwhen other 3rd party libraries are used.\n\n\nviews.py\n```python\nfrom rest_framework.viewsets import ModelViewSet\nfrom rest_framework_roles.permissions import is_self\n\n\nclass UserViewSet(ModelViewSet):\n    serializer_class = UserSerializer\n    queryset = User.objects.all()\n\n    view_permissions = {\n        'retrieve': {'user': is_self, 'admin': True},\n        'create': {'anon': True},\n        'list': {'admin': True},\n    }\n\n    @allowed('admin', 'user')\n    @action(detail=False, methods=['get'])\n    def me(self, request):\n        self.kwargs['pk'] = request.user.pk\n        return self.retrieve(request)\n```\n\nThe permissions for each view are checked in order. All matching roles are checked, until permission\nis granted for that role.\n\nAs an example in *retrieve* an admin user matches both roles ('user' and 'admin'). However when\ntrying to retrieve another user's info, the first rule does not grant access so the checking will\ncontinue. On the second rule, permission is granted and the checking ends there.\n\n\nAdvanced example\n----------------\n\nSometimes you want to deal with more complex scenarios. Such refinement otherwise hairy\nwith `permission_classes`, becomes much simpler.\n\nIn the example below we have many more advanced scenarios including forbidding the user\nto update their email.\n\nviews.py\n```python\nfrom rest_framework_roles.permissions import is_self\nfrom rest_framework_roles import roles\n\n\ndef not_updating_email(request, view):\n    return 'email' not in request.data\n\n\nclass UserViewSet(ModelViewSet):\n    serializer_class = UserSerializer\n    queryset = User.objects.all()\n    view_permissions = {\n        'retrieve': {'user': is_self, 'admin': True},\n        'update': {\n          'user': (is_self, not_updating_email),  # User can update everything but their email\n          'admin': True,\n        },\n        'create': {'anon': True},W\n        'list': {'admin': True},\n        'me': {'user': True},\n    }\n\n    @action(detail=False, methods=['get', 'patch'])\n    def me(self, request):\n        self.kwargs['pk'] = request.user.pk\n        if request.method == 'GET':\n            return self.retrieve(request)\n        elif request.method == 'PATCH':\n            return self.partial_update(request)\n```\n\n\nAdvanced roles\n--------------\n\nBy default you get some role-checking functions for common roles like 'admin', 'user' and 'anon'.\nMany times though, you'll have much more roles and certain roles can be expensive to calculate.\n\nWe can easily mark the role-checking functions with a cost. The lower cost roles are checked\nfirst and then the expensive ones later. The cost is an arbitrary number so this refinement can\nbe as deep as you wish.\n\n\n```python\nfrom rest_framework_roles.decorators import role_checker\n\n\n@role_checker(cost=0)\ndef is_freebie_user(request, view):\n    return request.user.is_authenticated and request.user.plan == 'freebie'\n\n\n@role_checker(cost=0)\ndef is_payed_user(request, view):\n    return request.user.is_authenticated and not request.user.plan\n\n\n@role_checker(cost=50)\ndef is_creator(request, view):\n    obj = view.get_object()\n    if hasattr(obj, 'creator'):\n        return request.user == obj.creator\n    return False\n```\n\n> This is a bit similar to Django REST's `check_permissions` and `check_object_permissions` which in this case\nwould translate to a max of 2 different costs.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.org/project/rest-framework-roles/", "keywords": "permissions,roles", "license": "LICENSE", "maintainer": "", "maintainer_email": "", "name": "rest-framework-roles", "package_url": "https://pypi.org/project/rest-framework-roles/", "platform": "", "project_url": "https://pypi.org/project/rest-framework-roles/", "project_urls": {"Homepage": "https://pypi.org/project/rest-framework-roles/"}, "release_url": "https://pypi.org/project/rest-framework-roles/0.3.1/", "requires_dist": null, "requires_python": ">=3", "summary": "Role-based permissions for Django REST Framework and vanilla Django.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>REST Framework Roles</h1>\n<p><a href=\"https://circleci.com/gh/Pithikos/rest-framework-roles\" rel=\"nofollow\"><img alt=\"rest-framework-roles\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22e3cb2c5cb9e53a933737ba71f7731fac3a2794/68747470733a2f2f636972636c6563692e636f6d2f67682f50697468696b6f732f726573742d6672616d65776f726b2d726f6c65732e7376673f7374796c653d737667\"></a></p>\n<p>Role-based permissions for Django and Django REST Framework (functions or classes).</p>\n<ul>\n<li>Data-driven declarative permissions for humans.</li>\n<li>Full decoupling from views and models &amp; implementation agnostic.</li>\n<li>View redirection simply works.</li>\n<li>Easy gradual integration with existing projects.</li>\n<li>Easy optimization with decorators.</li>\n</ul>\n<h2>Install</h2>\n<p>Install</p>\n<pre><code>pip install rest-framework-roles\n</code></pre>\n<p>settings.py</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"o\">..</span>\n    <span class=\"s1\">'rest_framework'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'rest_framework_roles'</span><span class=\"p\">,</span>  <span class=\"c1\"># Must be after rest_framework</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">REST_FRAMEWORK_ROLES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'roles'</span><span class=\"p\">:</span> <span class=\"s1\">'myproject.roles.ROLES'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"o\">..</span>\n  <span class=\"s1\">'permission_classes'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>  <span class=\"c1\"># This ensures that by default noone is allowed access</span>\n  <span class=\"o\">..</span>\n<span class=\"p\">}</span>\n</pre>\n<p>roles.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_framework_roles.roles</span> <span class=\"kn\">import</span> <span class=\"n\">is_user</span><span class=\"p\">,</span> <span class=\"n\">is_anon</span><span class=\"p\">,</span> <span class=\"n\">is_admin</span>\n\n\n<span class=\"n\">ROLES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'admin'</span><span class=\"p\">:</span> <span class=\"n\">is_admin</span><span class=\"p\">,</span>\n    <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"n\">is_user</span><span class=\"p\">,</span>\n    <span class=\"s1\">'anon'</span><span class=\"p\">:</span> <span class=\"n\">is_anon</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<blockquote>\n<p>You can create your own role checkers for custom roles. Each checker is a simple function that\ntakes <code>request</code> and <code>view</code> as arguments.</p>\n</blockquote>\n<h2>REST Framework example</h2>\n<p>Permissions can be set either with the decorators <strong>@allowed</strong>, <strong>@disallowed</strong> or <strong>view_permissions</strong>. Permissions\nare checked for all matching roles at runtime. In case of no matching role, REST Framework's <code>permission_classes</code> is\nused as fallback.</p>\n<blockquote>\n<p>Note that views need to explictly be set any permissions either via decorators or <em>view_permissions</em>. Otherwise those\nviews will not go through the permission checking. This is intended behaviour since it allows easier gradual integration\nwhen other 3rd party libraries are used.</p>\n</blockquote>\n<p>views.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_framework.viewsets</span> <span class=\"kn\">import</span> <span class=\"n\">ModelViewSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework_roles.permissions</span> <span class=\"kn\">import</span> <span class=\"n\">is_self</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserViewSet</span><span class=\"p\">(</span><span class=\"n\">ModelViewSet</span><span class=\"p\">):</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n    <span class=\"n\">view_permissions</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'retrieve'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"n\">is_self</span><span class=\"p\">,</span> <span class=\"s1\">'admin'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n        <span class=\"s1\">'create'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'anon'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n        <span class=\"s1\">'list'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'admin'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@allowed</span><span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"s1\">'user'</span><span class=\"p\">)</span>\n    <span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'get'</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">me</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'pk'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">pk</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre>\n<p>The permissions for each view are checked in order. All matching roles are checked, until permission\nis granted for that role.</p>\n<p>As an example in <em>retrieve</em> an admin user matches both roles ('user' and 'admin'). However when\ntrying to retrieve another user's info, the first rule does not grant access so the checking will\ncontinue. On the second rule, permission is granted and the checking ends there.</p>\n<h2>Advanced example</h2>\n<p>Sometimes you want to deal with more complex scenarios. Such refinement otherwise hairy\nwith <code>permission_classes</code>, becomes much simpler.</p>\n<p>In the example below we have many more advanced scenarios including forbidding the user\nto update their email.</p>\n<p>views.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_framework_roles.permissions</span> <span class=\"kn\">import</span> <span class=\"n\">is_self</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework_roles</span> <span class=\"kn\">import</span> <span class=\"n\">roles</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">not_updating_email</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'email'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserViewSet</span><span class=\"p\">(</span><span class=\"n\">ModelViewSet</span><span class=\"p\">):</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">view_permissions</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'retrieve'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"n\">is_self</span><span class=\"p\">,</span> <span class=\"s1\">'admin'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n        <span class=\"s1\">'update'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">is_self</span><span class=\"p\">,</span> <span class=\"n\">not_updating_email</span><span class=\"p\">),</span>  <span class=\"c1\"># User can update everything but their email</span>\n          <span class=\"s1\">'admin'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">'create'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'anon'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span><span class=\"n\">W</span>\n        <span class=\"s1\">'list'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'admin'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n        <span class=\"s1\">'me'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"s1\">'patch'</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">me</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'pk'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">pk</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s1\">'GET'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s1\">'PATCH'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">partial_update</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre>\n<h2>Advanced roles</h2>\n<p>By default you get some role-checking functions for common roles like 'admin', 'user' and 'anon'.\nMany times though, you'll have much more roles and certain roles can be expensive to calculate.</p>\n<p>We can easily mark the role-checking functions with a cost. The lower cost roles are checked\nfirst and then the expensive ones later. The cost is an arbitrary number so this refinement can\nbe as deep as you wish.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_framework_roles.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">role_checker</span>\n\n\n<span class=\"nd\">@role_checker</span><span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_freebie_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span> <span class=\"ow\">and</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">plan</span> <span class=\"o\">==</span> <span class=\"s1\">'freebie'</span>\n\n\n<span class=\"nd\">@role_checker</span><span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_payed_user</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">plan</span>\n\n\n<span class=\"nd\">@role_checker</span><span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_creator</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">):</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"s1\">'creator'</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">==</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">creator</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n</pre>\n<blockquote>\n<p>This is a bit similar to Django REST's <code>check_permissions</code> and <code>check_object_permissions</code> which in this case\nwould translate to a max of 2 different costs.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 6872836, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "27d1cd56f8306afc88b092ae781f65fc", "sha256": "35035c2dd7a01b4b5e0f532f71e3403c13851ed303f8c2ad585dfd8a7e7cf878"}, "downloads": -1, "filename": "rest_framework_roles-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "27d1cd56f8306afc88b092ae781f65fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 11261, "upload_time": "2020-02-20T11:43:07", "upload_time_iso_8601": "2020-02-20T11:43:07.498625Z", "url": "https://files.pythonhosted.org/packages/74/b0/5f99f0d71ccf59a351dd75c9cacdb23b3c0876e6f86549bb65e35fa587b7/rest_framework_roles-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85e5527f5e62d68c9ed6a10806431996", "sha256": "8c28650e406ffb08d3858068bfe69c281b9dee210f830ddee0d20ae4b810ff5e"}, "downloads": -1, "filename": "rest_framework_roles-0.2.2.tar.gz", "has_sig": false, "md5_digest": "85e5527f5e62d68c9ed6a10806431996", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 10478, "upload_time": "2020-02-20T11:43:09", "upload_time_iso_8601": "2020-02-20T11:43:09.931699Z", "url": "https://files.pythonhosted.org/packages/83/fa/1d1cae8d561e1612612e7f938f07effe52f3a0f07448e6ef6e742d93c202/rest_framework_roles-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "893593f6d8e3cbb6156cce707ef9c1ba", "sha256": "ac39ac805ef294571ecc76473117b7cd493591fefad70cf15ab7f0052af5d303"}, "downloads": -1, "filename": "rest_framework_roles-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "893593f6d8e3cbb6156cce707ef9c1ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 11577, "upload_time": "2020-02-20T13:06:25", "upload_time_iso_8601": "2020-02-20T13:06:25.409107Z", "url": "https://files.pythonhosted.org/packages/23/84/eb8376180869c14f92fc06465a2a878b7f78d86db7f8990ba1b5a35ffcd3/rest_framework_roles-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6721c93cb985cda96bd0898a0acdd16", "sha256": "804c4cdb122b5a3bd6c064881e17986ea27ee8d6bb4dc86b8999393b5d56bd48"}, "downloads": -1, "filename": "rest_framework_roles-0.2.3.tar.gz", "has_sig": false, "md5_digest": "b6721c93cb985cda96bd0898a0acdd16", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 11183, "upload_time": "2020-02-20T13:06:26", "upload_time_iso_8601": "2020-02-20T13:06:26.725303Z", "url": "https://files.pythonhosted.org/packages/81/94/eb0eebad3913365181f61081dd5cca41ea7786f5fc39a6048ec78b9a57b1/rest_framework_roles-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "6d849347c5bed17aec67dbc4efa39b61", "sha256": "b6ca940f086800d0b52e67b57b676c29748d87c19e452af897b66bd5e59b4199"}, "downloads": -1, "filename": "rest_framework_roles-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6d849347c5bed17aec67dbc4efa39b61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 11859, "upload_time": "2020-02-21T12:51:20", "upload_time_iso_8601": "2020-02-21T12:51:20.766778Z", "url": "https://files.pythonhosted.org/packages/0a/a2/24a27b93dc938dd43ccb7d8c4e77075f24a85507b5cc3c84ccc294950f3a/rest_framework_roles-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "095c760b08b9ab8b2227971211e6a699", "sha256": "49f2329f094c5fa36f43e43cf8609d5b89f0ea8e89d3dd66bafcd195f74c92e1"}, "downloads": -1, "filename": "rest_framework_roles-0.2.4.tar.gz", "has_sig": false, "md5_digest": "095c760b08b9ab8b2227971211e6a699", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 11584, "upload_time": "2020-02-21T12:51:22", "upload_time_iso_8601": "2020-02-21T12:51:22.217513Z", "url": "https://files.pythonhosted.org/packages/e6/20/06cba7663ba6f03afb650018b1019ff506542534d3beaf370e63626bfe04/rest_framework_roles-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "41f65c130adb274fa90153e58a1da64f", "sha256": "cf7967239097095c9310d0bb08b850c21a66d08feeb9db40d7b383596150ca5f"}, "downloads": -1, "filename": "rest_framework_roles-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "41f65c130adb274fa90153e58a1da64f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 12410, "upload_time": "2020-02-28T12:06:02", "upload_time_iso_8601": "2020-02-28T12:06:02.807666Z", "url": "https://files.pythonhosted.org/packages/fb/94/8974c6d719452d5d685069f784adcbb11052c45edf753577700e9ab5a77a/rest_framework_roles-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e0e4bb9b04dea9014c08a3118bd3fe9", "sha256": "c0789570844f495e1cd6ee724f3eeea36802406b5578a745ec3abc30a5de0c93"}, "downloads": -1, "filename": "rest_framework_roles-0.3.0.tar.gz", "has_sig": false, "md5_digest": "6e0e4bb9b04dea9014c08a3118bd3fe9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 12027, "upload_time": "2020-02-28T12:06:04", "upload_time_iso_8601": "2020-02-28T12:06:04.535664Z", "url": "https://files.pythonhosted.org/packages/0b/37/3fcd4c8ef930e9ce4ca1f26a259f6d6c17a5a3ce1ae6bd0d30a740af2ece/rest_framework_roles-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b1e304db50b1c9eba34523443b4d2816", "sha256": "5d5dab5ab102ef4b1010bb3c2b0cd4cfdd56186ad7bef5d9ad91a6b5c2898339"}, "downloads": -1, "filename": "rest_framework_roles-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b1e304db50b1c9eba34523443b4d2816", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 12318, "upload_time": "2020-03-24T12:54:33", "upload_time_iso_8601": "2020-03-24T12:54:33.311545Z", "url": "https://files.pythonhosted.org/packages/67/e3/6d979d259d35f7b56759f653936a05554771a4e047ba4cdf3f0c54211baa/rest_framework_roles-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22cf88736ed85efb0993c107f43ab446", "sha256": "4a01ccf906a49552ba489b70a7d9fa5344e08bc6dbbcffdcf6963598fc5627ca"}, "downloads": -1, "filename": "rest_framework_roles-0.3.1.tar.gz", "has_sig": false, "md5_digest": "22cf88736ed85efb0993c107f43ab446", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 11858, "upload_time": "2020-03-24T12:54:34", "upload_time_iso_8601": "2020-03-24T12:54:34.595045Z", "url": "https://files.pythonhosted.org/packages/13/78/55ba5c4b9a17dadbfce3f5423b5399de8a1b1d194be7ae81a69d8ac56234/rest_framework_roles-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1e304db50b1c9eba34523443b4d2816", "sha256": "5d5dab5ab102ef4b1010bb3c2b0cd4cfdd56186ad7bef5d9ad91a6b5c2898339"}, "downloads": -1, "filename": "rest_framework_roles-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b1e304db50b1c9eba34523443b4d2816", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 12318, "upload_time": "2020-03-24T12:54:33", "upload_time_iso_8601": "2020-03-24T12:54:33.311545Z", "url": "https://files.pythonhosted.org/packages/67/e3/6d979d259d35f7b56759f653936a05554771a4e047ba4cdf3f0c54211baa/rest_framework_roles-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22cf88736ed85efb0993c107f43ab446", "sha256": "4a01ccf906a49552ba489b70a7d9fa5344e08bc6dbbcffdcf6963598fc5627ca"}, "downloads": -1, "filename": "rest_framework_roles-0.3.1.tar.gz", "has_sig": false, "md5_digest": "22cf88736ed85efb0993c107f43ab446", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 11858, "upload_time": "2020-03-24T12:54:34", "upload_time_iso_8601": "2020-03-24T12:54:34.595045Z", "url": "https://files.pythonhosted.org/packages/13/78/55ba5c4b9a17dadbfce3f5423b5399de8a1b1d194be7ae81a69d8ac56234/rest_framework_roles-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:39 2020"}