{"info": {"author": "Daniel Townsend", "author_email": "dan@dantownsend.co.uk", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython"], "description": "# asyncio_tools\n\nUseful utilities for working with asyncio.\n\n## gather\n\nProvides a convenient wrapper around `asyncio.gather`.\n\n```python\nfrom asyncio_tools import gather, CompoundException\n\n\nasync def good():\n    return 'OK'\n\n\nasync def bad():\n    raise ValueError()\n\n\nasync def main():\n    response = await gather(\n        good(),\n        bad(),\n        good()\n    )\n\n    # Check if a particular exception was raised.\n    ValueError in response.exception_types\n    # >>> True\n\n    # To get all exceptions:\n    print(response.exceptions)\n    # >>> [ValueError()]\n\n    # To get all instances of a particular exception:\n    response.exceptions_of_type(ValueError)\n    # >>> [ValueError()]\n\n    # To get the number of exceptions:\n    print(response.exception_count)\n    # >>> 1\n\n    # You can still access all of the results:\n    print(response.all)\n    # >>> ['OK', ValueError(), 'OK']\n\n    # And can access all successes (i.e. non-exceptions):\n    print(response.successes)\n    # >>> ['OK', 'OK']\n\n    # To get the number of successes:\n    print(response.success_count)\n    # >>> 2\n\n    try:\n        # To combines all of the exceptions into a single one, which merges the\n        # messages.\n        raise response.compound_exception()\n    except CompoundException as compound_exception:\n        print(\"Caught it\")\n\n        if ValueError in compound_exception.exception_types:\n            print(\"Caught a ValueError\")\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/piccolo-orm/asyncio_tools", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "asyncio-tools", "package_url": "https://pypi.org/project/asyncio-tools/", "platform": "", "project_url": "https://pypi.org/project/asyncio-tools/", "project_urls": {"Homepage": "https://github.com/piccolo-orm/asyncio_tools"}, "release_url": "https://pypi.org/project/asyncio-tools/0.1.1/", "requires_dist": null, "requires_python": ">=3.8.0", "summary": "Useful utilities for working with asyncio.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>asyncio_tools</h1>\n<p>Useful utilities for working with asyncio.</p>\n<h2>gather</h2>\n<p>Provides a convenient wrapper around <code>asyncio.gather</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">asyncio_tools</span> <span class=\"kn\">import</span> <span class=\"n\">gather</span><span class=\"p\">,</span> <span class=\"n\">CompoundException</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">good</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'OK'</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">bad</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">gather</span><span class=\"p\">(</span>\n        <span class=\"n\">good</span><span class=\"p\">(),</span>\n        <span class=\"n\">bad</span><span class=\"p\">(),</span>\n        <span class=\"n\">good</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Check if a particular exception was raised.</span>\n    <span class=\"ne\">ValueError</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">exception_types</span>\n    <span class=\"c1\"># &gt;&gt;&gt; True</span>\n\n    <span class=\"c1\"># To get all exceptions:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"p\">)</span>\n    <span class=\"c1\"># &gt;&gt;&gt; [ValueError()]</span>\n\n    <span class=\"c1\"># To get all instances of a particular exception:</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">exceptions_of_type</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">)</span>\n    <span class=\"c1\"># &gt;&gt;&gt; [ValueError()]</span>\n\n    <span class=\"c1\"># To get the number of exceptions:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">exception_count</span><span class=\"p\">)</span>\n    <span class=\"c1\"># &gt;&gt;&gt; 1</span>\n\n    <span class=\"c1\"># You can still access all of the results:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">)</span>\n    <span class=\"c1\"># &gt;&gt;&gt; ['OK', ValueError(), 'OK']</span>\n\n    <span class=\"c1\"># And can access all successes (i.e. non-exceptions):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">successes</span><span class=\"p\">)</span>\n    <span class=\"c1\"># &gt;&gt;&gt; ['OK', 'OK']</span>\n\n    <span class=\"c1\"># To get the number of successes:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">success_count</span><span class=\"p\">)</span>\n    <span class=\"c1\"># &gt;&gt;&gt; 2</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># To combines all of the exceptions into a single one, which merges the</span>\n        <span class=\"c1\"># messages.</span>\n        <span class=\"k\">raise</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">compound_exception</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">CompoundException</span> <span class=\"k\">as</span> <span class=\"n\">compound_exception</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Caught it\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ne\">ValueError</span> <span class=\"ow\">in</span> <span class=\"n\">compound_exception</span><span class=\"o\">.</span><span class=\"n\">exception_types</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Caught a ValueError\"</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6697091, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f9d48a3eb1e5393096a05e16387a24e2", "sha256": "4de8243b05fb1e32e0c59b6955e9f57cf7e31f0ca38a5e7da58f81edd0916d13"}, "downloads": -1, "filename": "asyncio_tools-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f9d48a3eb1e5393096a05e16387a24e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8.0", "size": 4113, "upload_time": "2020-02-25T15:16:33", "upload_time_iso_8601": "2020-02-25T15:16:33.214861Z", "url": "https://files.pythonhosted.org/packages/48/b0/0e123bde10c411c588b42760cf021dee2dfa2f5a4728d39204993d1b40a9/asyncio_tools-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbe64c532811e57ecf6f7632a21af010", "sha256": "4c3b232fb03d9ef114b26a76acbbf542ec5cf14316e93a1cfcf6708b121db2d9"}, "downloads": -1, "filename": "asyncio_tools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bbe64c532811e57ecf6f7632a21af010", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8.0", "size": 3210, "upload_time": "2020-02-25T15:16:35", "upload_time_iso_8601": "2020-02-25T15:16:35.466779Z", "url": "https://files.pythonhosted.org/packages/86/5d/263992473af8a22153dc2d26864ad057452b588005a70689e003072a61b0/asyncio_tools-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "bf53663eb381406df8468f181230cdb5", "sha256": "83ad6dfe99d603d68a17c273df12be72379dc3544edefdb2f2f2faa4933db12b"}, "downloads": -1, "filename": "asyncio_tools-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bf53663eb381406df8468f181230cdb5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8.0", "size": 4095, "upload_time": "2020-02-25T15:23:34", "upload_time_iso_8601": "2020-02-25T15:23:34.951086Z", "url": "https://files.pythonhosted.org/packages/74/0d/4cf02f2bc3e62a02dbe51dcf689d0afd22f9f844e351d3a49b8b45098b18/asyncio_tools-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e579b34c020078b722de6bfc4626768", "sha256": "24a90a572a81f362bc06e30aecd1fa0e2c6775ccbb4d79d32e32725f77a743c1"}, "downloads": -1, "filename": "asyncio_tools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9e579b34c020078b722de6bfc4626768", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8.0", "size": 3179, "upload_time": "2020-02-25T15:23:36", "upload_time_iso_8601": "2020-02-25T15:23:36.504175Z", "url": "https://files.pythonhosted.org/packages/85/2f/1846c55f04616a1ad14d18b73427b8e44db173d85ec0df37f75083208c1c/asyncio_tools-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bf53663eb381406df8468f181230cdb5", "sha256": "83ad6dfe99d603d68a17c273df12be72379dc3544edefdb2f2f2faa4933db12b"}, "downloads": -1, "filename": "asyncio_tools-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bf53663eb381406df8468f181230cdb5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8.0", "size": 4095, "upload_time": "2020-02-25T15:23:34", "upload_time_iso_8601": "2020-02-25T15:23:34.951086Z", "url": "https://files.pythonhosted.org/packages/74/0d/4cf02f2bc3e62a02dbe51dcf689d0afd22f9f844e351d3a49b8b45098b18/asyncio_tools-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e579b34c020078b722de6bfc4626768", "sha256": "24a90a572a81f362bc06e30aecd1fa0e2c6775ccbb4d79d32e32725f77a743c1"}, "downloads": -1, "filename": "asyncio_tools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9e579b34c020078b722de6bfc4626768", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8.0", "size": 3179, "upload_time": "2020-02-25T15:23:36", "upload_time_iso_8601": "2020-02-25T15:23:36.504175Z", "url": "https://files.pythonhosted.org/packages/85/2f/1846c55f04616a1ad14d18b73427b8e44db173d85ec0df37f75083208c1c/asyncio_tools-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:43 2020"}