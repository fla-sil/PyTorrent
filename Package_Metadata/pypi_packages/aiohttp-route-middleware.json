{"info": {"author": "Rob Blackbourn", "author_email": "rob.blackbourn@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP"], "description": "# aiohttp-routed-middleware\n\n## Overview\n\nAn extension for [aiohttp](https://github.com/aio-libs/aiohttp) which provides route local middleware while remainining compatible with the existing router.\n\nWith the built in router the technique for managing route local middleware is to make nested applications.\nHowever nested applications require a unique url prefix. so the following cannot be achieved:\n\n| Request           | Middleware                                            | Handler     |\n| ----------------- | ----------------------------------------------------- | ----------- |\n| GET /post/{id}    | authenticate, authorise(['post:read'])                | get_post    |\n| POST /post/{id}   | authenticate, authorise(['post:read:', 'post:write']) | create_post |\n| DELETE /post/{id} | authenticate, authorise(['post:read:', 'post:write']) | delete_post |\n\nThis router allows a chain of middleware terminated by a handler. For example:\n\n```python\npost_app = web.Application(router=UrlDispatcherEx())\npost_app.router.add_get('/{id}', authenticate, authorise(['post:read']), get_posts)\npost_app.router.add_post('/{id}', authenticate, authorise(['post:read', 'post:write']), get_posts)\npost_app.router.add_delete('/{id}', authenticate, authorise(['post:read', 'post:write']), get_posts)\n\napp = web.Application()\napp.add_subapp('/post', post_app)\n\n```\n\n## Usage\n\n### Basic\n\nA middleware function differs from a normal request handler, in that it gets given the next handler to call.\n\nThe following example shows how to add middleware to a route.\n\n```python\nfrom aiohttp import web\nfrom aiohttp_route_middleware import UrlDispatcherEx\n\napp = web.Application(router=UrlDispatcherEx())\napp.router.add_get('/', middleware1, middleware2, test)\n\nasync def test(request):\n    print(\"..entering handler\")\n    response = web.Response(text=f\"extra_stuff=[{', '.join(request.extra_stuff)}]\")\n    print(\"..exiting handler\")\n    return response\n\n@web.middleware\nasync def middleware1(request, handler):\n    print(\"entering middleware 1\")\n    request.extra_stuff = ['foo']\n    response = await handler(request)\n    print(\"exiting middleware 1\")\n    return response\n\n@web.middleware\nasync def middleware2(request, handler):\n    print(\".entering middleware 2\")\n    request.extra_stuff.append('bar')\n    response = await handler(request)\n    print(\".exiting middleware 2\")\n    return response\n\napp = web.Application(router=UrlDispatcherEx())\napp.router.add_get('/', middleware1, middleware2, test)\nweb.run_app(app)\n```\n\nThis would print out the following:\n\n```bash\nentering middleware 1\n.entering middleware 2\n..entering handler\n..exiting handler\n.exiting middleware 2\nexiting middleware 1\n```\n\n### Middleware failure\n\nA middleware function may choose not to call the next handler; for example if there was an authentication error.\n\n```python\nfrom aiohttp import web\nfrom aiohttp_route_middleware import UrlDispatcherEx\n\nasync def test(request):\n    return web.Response(text=\"Success\")\n\n@web.middleware\nasync def authenticate(request, handler):\n    return web.Response(body=\"unauthenticated\", status=401)\n\napp = web.Application(router=UrlDispatcherEx())\napp.router.add_get('/', authenticate, test)\nweb.run_app(app)\n```\n\n## Installation\n\nYou can install it using pip:\n\n```bash\npip install aiohttp-route-middleware\n```\n\n## Details\n\nThe extension provides a router `UrlDispatcherEx` which extends from the built in class `UrlDispatcher`. The class can be used in the following manner:\n\n```python\nfrom aiohttp_route_middleware import UrlDispatcherEx\n\n...\n\napp = web.Application(router=UrlDispatcherEx())\n```\n\nThe extension allows multiple handlers to be specified. The handlers are called in order until a handler returns a non `None` response, at which point the response is returned and execution stops. \n\nAn example of this might be a route to update a comment on a post, The sequence might be:\n1. Authenticate the user.\n2. Check the user is authorised to post a comment.\n3. Fetch the post.\n4. Post the comment.\n\n```python\napp.router.add_post('/comment?post_id=1234', authenticate, authorise, fetch_post, post_comment)\n```\n\nEach handler is written in the same manner as a normal handler, in that it takes a single request argument. The request argument may be modified or enriched by each handler.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rob-blackbourn/aiohttp-route-middleware/", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "aiohttp-route-middleware", "package_url": "https://pypi.org/project/aiohttp-route-middleware/", "platform": "", "project_url": "https://pypi.org/project/aiohttp-route-middleware/", "project_urls": {"Homepage": "https://github.com/rob-blackbourn/aiohttp-route-middleware/"}, "release_url": "https://pypi.org/project/aiohttp-route-middleware/0.0.2/", "requires_dist": ["aiohttp (>=3.0)"], "requires_python": "~=3.6", "summary": "Local middleware routing for aiohttp.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aiohttp-routed-middleware</h1>\n<h2>Overview</h2>\n<p>An extension for <a href=\"https://github.com/aio-libs/aiohttp\" rel=\"nofollow\">aiohttp</a> which provides route local middleware while remainining compatible with the existing router.</p>\n<p>With the built in router the technique for managing route local middleware is to make nested applications.\nHowever nested applications require a unique url prefix. so the following cannot be achieved:</p>\n<table>\n<thead>\n<tr>\n<th>Request</th>\n<th>Middleware</th>\n<th>Handler</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET /post/{id}</td>\n<td>authenticate, authorise(['post:read'])</td>\n<td>get_post</td>\n</tr>\n<tr>\n<td>POST /post/{id}</td>\n<td>authenticate, authorise(['post:read:', 'post:write'])</td>\n<td>create_post</td>\n</tr>\n<tr>\n<td>DELETE /post/{id}</td>\n<td>authenticate, authorise(['post:read:', 'post:write'])</td>\n<td>delete_post</td>\n</tr></tbody></table>\n<p>This router allows a chain of middleware terminated by a handler. For example:</p>\n<pre><span class=\"n\">post_app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"o\">=</span><span class=\"n\">UrlDispatcherEx</span><span class=\"p\">())</span>\n<span class=\"n\">post_app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s1\">'/</span><span class=\"si\">{id}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">authenticate</span><span class=\"p\">,</span> <span class=\"n\">authorise</span><span class=\"p\">([</span><span class=\"s1\">'post:read'</span><span class=\"p\">]),</span> <span class=\"n\">get_posts</span><span class=\"p\">)</span>\n<span class=\"n\">post_app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_post</span><span class=\"p\">(</span><span class=\"s1\">'/</span><span class=\"si\">{id}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">authenticate</span><span class=\"p\">,</span> <span class=\"n\">authorise</span><span class=\"p\">([</span><span class=\"s1\">'post:read'</span><span class=\"p\">,</span> <span class=\"s1\">'post:write'</span><span class=\"p\">]),</span> <span class=\"n\">get_posts</span><span class=\"p\">)</span>\n<span class=\"n\">post_app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_delete</span><span class=\"p\">(</span><span class=\"s1\">'/</span><span class=\"si\">{id}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">authenticate</span><span class=\"p\">,</span> <span class=\"n\">authorise</span><span class=\"p\">([</span><span class=\"s1\">'post:read'</span><span class=\"p\">,</span> <span class=\"s1\">'post:write'</span><span class=\"p\">]),</span> <span class=\"n\">get_posts</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_subapp</span><span class=\"p\">(</span><span class=\"s1\">'/post'</span><span class=\"p\">,</span> <span class=\"n\">post_app</span><span class=\"p\">)</span>\n</pre>\n<h2>Usage</h2>\n<h3>Basic</h3>\n<p>A middleware function differs from a normal request handler, in that it gets given the next handler to call.</p>\n<p>The following example shows how to add middleware to a route.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp_route_middleware</span> <span class=\"kn\">import</span> <span class=\"n\">UrlDispatcherEx</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"o\">=</span><span class=\"n\">UrlDispatcherEx</span><span class=\"p\">())</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">middleware1</span><span class=\"p\">,</span> <span class=\"n\">middleware2</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"..entering handler\"</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">\"extra_stuff=[</span><span class=\"si\">{</span><span class=\"s1\">', '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">extra_stuff</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">]\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"..exiting handler\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"nd\">@web</span><span class=\"o\">.</span><span class=\"n\">middleware</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">middleware1</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"entering middleware 1\"</span><span class=\"p\">)</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">extra_stuff</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"exiting middleware 1\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"nd\">@web</span><span class=\"o\">.</span><span class=\"n\">middleware</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">middleware2</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\".entering middleware 2\"</span><span class=\"p\">)</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">extra_stuff</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\".exiting middleware 2\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"o\">=</span><span class=\"n\">UrlDispatcherEx</span><span class=\"p\">())</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">middleware1</span><span class=\"p\">,</span> <span class=\"n\">middleware2</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">)</span>\n<span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>This would print out the following:</p>\n<pre>entering middleware <span class=\"m\">1</span>\n.entering middleware <span class=\"m\">2</span>\n..entering handler\n..exiting handler\n.exiting middleware <span class=\"m\">2</span>\nexiting middleware <span class=\"m\">1</span>\n</pre>\n<h3>Middleware failure</h3>\n<p>A middleware function may choose not to call the next handler; for example if there was an authentication error.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp_route_middleware</span> <span class=\"kn\">import</span> <span class=\"n\">UrlDispatcherEx</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Success\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@web</span><span class=\"o\">.</span><span class=\"n\">middleware</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">authenticate</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">\"unauthenticated\"</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">401</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"o\">=</span><span class=\"n\">UrlDispatcherEx</span><span class=\"p\">())</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">authenticate</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">)</span>\n<span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<h2>Installation</h2>\n<p>You can install it using pip:</p>\n<pre>pip install aiohttp-route-middleware\n</pre>\n<h2>Details</h2>\n<p>The extension provides a router <code>UrlDispatcherEx</code> which extends from the built in class <code>UrlDispatcher</code>. The class can be used in the following manner:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp_route_middleware</span> <span class=\"kn\">import</span> <span class=\"n\">UrlDispatcherEx</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"o\">=</span><span class=\"n\">UrlDispatcherEx</span><span class=\"p\">())</span>\n</pre>\n<p>The extension allows multiple handlers to be specified. The handlers are called in order until a handler returns a non <code>None</code> response, at which point the response is returned and execution stops.</p>\n<p>An example of this might be a route to update a comment on a post, The sequence might be:</p>\n<ol>\n<li>Authenticate the user.</li>\n<li>Check the user is authorised to post a comment.</li>\n<li>Fetch the post.</li>\n<li>Post the comment.</li>\n</ol>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_post</span><span class=\"p\">(</span><span class=\"s1\">'/comment?post_id=1234'</span><span class=\"p\">,</span> <span class=\"n\">authenticate</span><span class=\"p\">,</span> <span class=\"n\">authorise</span><span class=\"p\">,</span> <span class=\"n\">fetch_post</span><span class=\"p\">,</span> <span class=\"n\">post_comment</span><span class=\"p\">)</span>\n</pre>\n<p>Each handler is written in the same manner as a normal handler, in that it takes a single request argument. The request argument may be modified or enriched by each handler.</p>\n\n          </div>"}, "last_serial": 4293653, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "740cbf492615a33b2bad5cb97de1668d", "sha256": "d64e228da14c69ffacf6306d61e1f149db379b3c2c18633ba374ae6435241e32"}, "downloads": -1, "filename": "aiohttp_route_middleware-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "740cbf492615a33b2bad5cb97de1668d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 4015, "upload_time": "2018-09-20T17:53:40", "upload_time_iso_8601": "2018-09-20T17:53:40.944371Z", "url": "https://files.pythonhosted.org/packages/85/8b/1627b776a7c7a0a868224bfc38af431ad82a92a0435ef45eaa7f9e28d70a/aiohttp_route_middleware-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7df6982783075c6bd5751af84c334c6c", "sha256": "c112d0eccb1cc5091f163f16e99ebb7d5fa224b0b9eea81f9d69dd6f1b088153"}, "downloads": -1, "filename": "aiohttp_route_middleware-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7df6982783075c6bd5751af84c334c6c", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 7878, "upload_time": "2018-09-20T17:53:42", "upload_time_iso_8601": "2018-09-20T17:53:42.172743Z", "url": "https://files.pythonhosted.org/packages/ef/3f/e76710e7c80bb31cbbf1fcb2e7707a1ef9eec18600c408a8495f42727f19/aiohttp_route_middleware-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "740cbf492615a33b2bad5cb97de1668d", "sha256": "d64e228da14c69ffacf6306d61e1f149db379b3c2c18633ba374ae6435241e32"}, "downloads": -1, "filename": "aiohttp_route_middleware-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "740cbf492615a33b2bad5cb97de1668d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 4015, "upload_time": "2018-09-20T17:53:40", "upload_time_iso_8601": "2018-09-20T17:53:40.944371Z", "url": "https://files.pythonhosted.org/packages/85/8b/1627b776a7c7a0a868224bfc38af431ad82a92a0435ef45eaa7f9e28d70a/aiohttp_route_middleware-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7df6982783075c6bd5751af84c334c6c", "sha256": "c112d0eccb1cc5091f163f16e99ebb7d5fa224b0b9eea81f9d69dd6f1b088153"}, "downloads": -1, "filename": "aiohttp_route_middleware-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7df6982783075c6bd5751af84c334c6c", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 7878, "upload_time": "2018-09-20T17:53:42", "upload_time_iso_8601": "2018-09-20T17:53:42.172743Z", "url": "https://files.pythonhosted.org/packages/ef/3f/e76710e7c80bb31cbbf1fcb2e7707a1ef9eec18600c408a8495f42727f19/aiohttp_route_middleware-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:16 2020"}