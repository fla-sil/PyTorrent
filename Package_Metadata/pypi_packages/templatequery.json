{"info": {"author": "Paul Donchenko", "author_email": "pjdonch@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Template Query\n\nProvides an easy and readable way to create formattable template query strings with placeholders for psycopg2. Instead of wrapping arguments with `psycopg2.sql` classes (e.g. `Literal`, `Identifier`) the expected class can be written inside the query.\n\n**Quick Example:**\n\n```python\n>>> TemplateQuery('SELECT * FROM {table@Q} WHERE {@I} {@S} {value@L}').format(\n...    'column_name', '>=', table='public.my_table', value=100\n... ).as_string(conn)\n\n'SELECT * FROM \"public\".\"my_table\" WHERE \"column_name\" >= 100'\n```\n\n## Installation\n\nThis package requires [`psycopg2`](https://pypi.org/project/psycopg2/) and can be installed using `pip` to download it from [PyPI](https://pypi.org/project/templatequery/):\n\n```bash\n$ pip install templatequery\n```\n\nor using `setup.py` if you have downloaded the source package locally:\n\n```bash\n$ python setup.py build\n$ sudo python setup.py install\n```\n\n## Usage\n\nIn psycopg2, variables can be inserted into queries using `%s` placeholders and supplying arguments to `cursor.execute` but this does not allow for identifier arguments such as table or columns names. The alternative is to use [`psycopg2.sql.SQL.format`](https://www.psycopg.org/docs/sql.html#psycopg2.sql.SQL.format) but this requires arguments to be converted into `Composable` objects such as  `Literal` or `Identifier`. \n\nThe `TemplateQuery` class allows this conversion to be specified inside the query and applied to the formatting arguments automatically.\n\nNormally placeholders are written as `{}` for positional arguments and `{key_name}` for keyword arguments.  `TemplateQuery` allows for additional placeholders of the form `{key_name@X}`, where `key_name` is optional and `X` is one of the following formats which applies to the relevant argument a class from `psycopg2.sql`:\n\n* `S`  (wraps with `SQL`) raw query snippet with no escaping **!! beware of SQL injection !!**\n* `I` (wraps with `Identifier`) identifier representing names of database objects\n* `P` (wraps with `Placeholder`) %s style placeholder whose value can be added later\n\nAn additional form `Q` can be used to separate qualified names that are dot-separated, such as `\"schema.table\"`, into a `Composed` of individual `Identifier` objects joined by `SQL('.')` . Supplying a tuple of identifiers and using the `I` form will achieve the same result when using `psycopg2 >= 2.8`\n\n## Example Script\n\n```python\nfrom psycopg2 import connect\nfrom psycopg2.extras import execute_values\nfrom templatequery import TemplateQuery\nfrom random import randint\n\n# example database configuration\nconnection_details = dict(\n    host='localhost', dbname='test', user='postgres', password='password'\n)\n\n# example table containing items\nparams = dict(\n    table='public.item',\n    category='brand',\n    value='price_cents',\n)\n\n# queries\nquery_create = TemplateQuery(\n    \"DROP TABLE IF EXISTS {table@Q}; \"\n    \"CREATE TABLE {table@Q} (\"\n    \"id bigserial, \"\n    \"{category@I} varchar, \"\n    \"{value@I} bigint);\"\n)\n\nquery_insert = TemplateQuery(\n    \"INSERT INTO {table@Q} ({category@I}, {value@I}) \"\n    \"VALUES %s\"\n)\n\nquery_analyze = TemplateQuery(\n    \"SELECT \"\n    \"{category@I}, AVG({value@I}) {avg_value@I}\"\n    \"FROM {table@Q}\"\n    \"GROUP BY {category@I}\"\n    \"ORDER BY {avg_value@I}\"\n)\n\n# connect to postgreSQL using a psycopg2 connection\nwith connect(**connection_details) as conn:\n    cursor = conn.cursor()\n\n    # create table\n    cursor.execute(query_create.format(**params))\n\n    # insert data\n    # generate test data for columns (brand, price)\n    # where a higher value gives a character closer to A\n    data = []\n    for _ in range(1000):\n        score = randint(0, 5)\n        data.append(('FEDCBA'[score], (randint(1, 10000) * (score + 1))))\n\n    execute_values(cursor, query_insert.format(**params), data)\n\n    conn.commit()\n\n    # analyze average prices per category (brand)\n    cursor.execute(\n        query_analyze.format(\n            **params,\n            avg_value='avg_' + params['value']\n        )\n    )\n    result = cursor.fetchall()\n\n```\n\n```python\n>>> result\n[\n    ('F', Decimal('4975.8218390804597701')),\n    ('E', Decimal('10353.853658536585')),\n    ('D', Decimal('15447.445714285714')),\n    ('C', Decimal('21370.236024844720')),\n    ('B', Decimal('25997.774566473988')),\n    ('A', Decimal('31847.215686274510'))\n]\n```\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pjdon/templatequery", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "templatequery", "package_url": "https://pypi.org/project/templatequery/", "platform": "", "project_url": "https://pypi.org/project/templatequery/", "project_urls": {"Homepage": "https://github.com/pjdon/templatequery"}, "release_url": "https://pypi.org/project/templatequery/0.1.3/", "requires_dist": ["psycopg2 (>=2.7.5)"], "requires_python": ">=3.6", "summary": "Convenient formatting for psycopg2 SQL queries", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Template Query</h1>\n<p>Provides an easy and readable way to create formattable template query strings with placeholders for psycopg2. Instead of wrapping arguments with <code>psycopg2.sql</code> classes (e.g. <code>Literal</code>, <code>Identifier</code>) the expected class can be written inside the query.</p>\n<p><strong>Quick Example:</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">TemplateQuery</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM {table@Q} WHERE {@I} {@S} {value@L}'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>    <span class=\"s1\">'column_name'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;='</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">'public.my_table'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n\n<span class=\"s1\">'SELECT * FROM \"public\".\"my_table\" WHERE \"column_name\" &gt;= 100'</span>\n</pre>\n<h2>Installation</h2>\n<p>This package requires <a href=\"https://pypi.org/project/psycopg2/\" rel=\"nofollow\"><code>psycopg2</code></a> and can be installed using <code>pip</code> to download it from <a href=\"https://pypi.org/project/templatequery/\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install templatequery\n</pre>\n<p>or using <code>setup.py</code> if you have downloaded the source package locally:</p>\n<pre>$ python setup.py build\n$ sudo python setup.py install\n</pre>\n<h2>Usage</h2>\n<p>In psycopg2, variables can be inserted into queries using <code>%s</code> placeholders and supplying arguments to <code>cursor.execute</code> but this does not allow for identifier arguments such as table or columns names. The alternative is to use <a href=\"https://www.psycopg.org/docs/sql.html#psycopg2.sql.SQL.format\" rel=\"nofollow\"><code>psycopg2.sql.SQL.format</code></a> but this requires arguments to be converted into <code>Composable</code> objects such as  <code>Literal</code> or <code>Identifier</code>.</p>\n<p>The <code>TemplateQuery</code> class allows this conversion to be specified inside the query and applied to the formatting arguments automatically.</p>\n<p>Normally placeholders are written as <code>{}</code> for positional arguments and <code>{key_name}</code> for keyword arguments.  <code>TemplateQuery</code> allows for additional placeholders of the form <code>{key_name@X}</code>, where <code>key_name</code> is optional and <code>X</code> is one of the following formats which applies to the relevant argument a class from <code>psycopg2.sql</code>:</p>\n<ul>\n<li><code>S</code>  (wraps with <code>SQL</code>) raw query snippet with no escaping <strong>!! beware of SQL injection !!</strong></li>\n<li><code>I</code> (wraps with <code>Identifier</code>) identifier representing names of database objects</li>\n<li><code>P</code> (wraps with <code>Placeholder</code>) %s style placeholder whose value can be added later</li>\n</ul>\n<p>An additional form <code>Q</code> can be used to separate qualified names that are dot-separated, such as <code>\"schema.table\"</code>, into a <code>Composed</code> of individual <code>Identifier</code> objects joined by <code>SQL('.')</code> . Supplying a tuple of identifiers and using the <code>I</code> form will achieve the same result when using <code>psycopg2 &gt;= 2.8</code></p>\n<h2>Example Script</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">psycopg2</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">psycopg2.extras</span> <span class=\"kn\">import</span> <span class=\"n\">execute_values</span>\n<span class=\"kn\">from</span> <span class=\"nn\">templatequery</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateQuery</span>\n<span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">randint</span>\n\n<span class=\"c1\"># example database configuration</span>\n<span class=\"n\">connection_details</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'postgres'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># example table containing items</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">'public.item'</span><span class=\"p\">,</span>\n    <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s1\">'brand'</span><span class=\"p\">,</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">'price_cents'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># queries</span>\n<span class=\"n\">query_create</span> <span class=\"o\">=</span> <span class=\"n\">TemplateQuery</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"DROP TABLE IF EXISTS {table@Q}; \"</span>\n    <span class=\"s2\">\"CREATE TABLE {table@Q} (\"</span>\n    <span class=\"s2\">\"id bigserial, \"</span>\n    <span class=\"s2\">\"{category@I} varchar, \"</span>\n    <span class=\"s2\">\"{value@I} bigint);\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">query_insert</span> <span class=\"o\">=</span> <span class=\"n\">TemplateQuery</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"INSERT INTO {table@Q} ({category@I}, {value@I}) \"</span>\n    <span class=\"s2\">\"VALUES </span><span class=\"si\">%s</span><span class=\"s2\">\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">query_analyze</span> <span class=\"o\">=</span> <span class=\"n\">TemplateQuery</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"SELECT \"</span>\n    <span class=\"s2\">\"{category@I}, AVG({value@I}) {avg_value@I}\"</span>\n    <span class=\"s2\">\"FROM {table@Q}\"</span>\n    <span class=\"s2\">\"GROUP BY {category@I}\"</span>\n    <span class=\"s2\">\"ORDER BY {avg_value@I}\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># connect to postgreSQL using a psycopg2 connection</span>\n<span class=\"k\">with</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">connection_details</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># create table</span>\n    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query_create</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># insert data</span>\n    <span class=\"c1\"># generate test data for columns (brand, price)</span>\n    <span class=\"c1\"># where a higher value gives a character closer to A</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n        <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s1\">'FEDCBA'</span><span class=\"p\">[</span><span class=\"n\">score</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">score</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n\n    <span class=\"n\">execute_values</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">,</span> <span class=\"n\">query_insert</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">),</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># analyze average prices per category (brand)</span>\n    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n        <span class=\"n\">query_analyze</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">,</span>\n            <span class=\"n\">avg_value</span><span class=\"o\">=</span><span class=\"s1\">'avg_'</span> <span class=\"o\">+</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span>\n<span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s1\">'F'</span><span class=\"p\">,</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'4975.8218390804597701'</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'10353.853658536585'</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'15447.445714285714'</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'21370.236024844720'</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'25997.774566473988'</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'31847.215686274510'</span><span class=\"p\">))</span>\n<span class=\"p\">]</span>\n</pre>\n\n          </div>"}, "last_serial": 6816892, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "9cb0747e6f4412affff95008d40216cf", "sha256": "e2c93a200acf5221a79d7e7e57af72e2ee37270acfe24ed40402c52e7d6afcb3"}, "downloads": -1, "filename": "templatequery-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9cb0747e6f4412affff95008d40216cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9492, "upload_time": "2020-03-15T18:48:58", "upload_time_iso_8601": "2020-03-15T18:48:58.874119Z", "url": "https://files.pythonhosted.org/packages/f0/4d/cb0876e2555c45dc82e5523f2c2855a298d7ca33b2320b40633c1336d11d/templatequery-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05fc5226a3266ae9a967bc1574abdc12", "sha256": "9451d9c0a214f20967667c4a6d94e15fb55199d3115792645079fa5ba13ccf63"}, "downloads": -1, "filename": "templatequery-0.1.1.tar.gz", "has_sig": false, "md5_digest": "05fc5226a3266ae9a967bc1574abdc12", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7013, "upload_time": "2020-03-15T18:49:00", "upload_time_iso_8601": "2020-03-15T18:49:00.120322Z", "url": "https://files.pythonhosted.org/packages/61/e8/6e26faa779365ab50ba86cfa912bf38da8ed8235a5ae78735d2a9c737ed8/templatequery-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6d7b9c3a07ca9a2f48908200f5b493c6", "sha256": "f3923fd123a321a7f20a85500d28e086680c3f012dfa060f6825bb601f53fa89"}, "downloads": -1, "filename": "templatequery-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6d7b9c3a07ca9a2f48908200f5b493c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9662, "upload_time": "2020-03-15T19:53:13", "upload_time_iso_8601": "2020-03-15T19:53:13.269917Z", "url": "https://files.pythonhosted.org/packages/9d/71/0713b8f5e2fec4c9c3ade92e334f1674af7d2f473f62ac311642a3f16ddc/templatequery-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70d704740130e59643d83de3a043c658", "sha256": "f73320dce9c6f56a90b34009f9a450ceee4afd3cebd2ba2abb5b862e42bf22a0"}, "downloads": -1, "filename": "templatequery-0.1.2.tar.gz", "has_sig": false, "md5_digest": "70d704740130e59643d83de3a043c658", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7373, "upload_time": "2020-03-15T19:53:14", "upload_time_iso_8601": "2020-03-15T19:53:14.205002Z", "url": "https://files.pythonhosted.org/packages/e6/0d/c439cc9c7db624f18a21b2dba8ced69a36c673b65a7e9cc3d23306300aa4/templatequery-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8513a729bda36287f7cff292be976375", "sha256": "40d00866f428d60cb1cf0e4e691d382c73492d7b097de714d5478f39b16770aa"}, "downloads": -1, "filename": "templatequery-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8513a729bda36287f7cff292be976375", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9660, "upload_time": "2020-03-15T19:59:56", "upload_time_iso_8601": "2020-03-15T19:59:56.518612Z", "url": "https://files.pythonhosted.org/packages/98/70/6a2bdee982ead2a7ebc8f7e4b0aa8fe113c74a762756a9ae0973c70a41de/templatequery-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81831fe97cd52972f65a0d41909c5d6f", "sha256": "e7fa6b30ec2e60d873bccd3b91744c783589d457950780b5bb76c455a6fc79e0"}, "downloads": -1, "filename": "templatequery-0.1.3.tar.gz", "has_sig": false, "md5_digest": "81831fe97cd52972f65a0d41909c5d6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7369, "upload_time": "2020-03-15T19:59:57", "upload_time_iso_8601": "2020-03-15T19:59:57.689408Z", "url": "https://files.pythonhosted.org/packages/b6/54/932e307531a8bcff5c3056aeb4b59becdcbacc8e213b05ec5c22c4e4e2eb/templatequery-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8513a729bda36287f7cff292be976375", "sha256": "40d00866f428d60cb1cf0e4e691d382c73492d7b097de714d5478f39b16770aa"}, "downloads": -1, "filename": "templatequery-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8513a729bda36287f7cff292be976375", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9660, "upload_time": "2020-03-15T19:59:56", "upload_time_iso_8601": "2020-03-15T19:59:56.518612Z", "url": "https://files.pythonhosted.org/packages/98/70/6a2bdee982ead2a7ebc8f7e4b0aa8fe113c74a762756a9ae0973c70a41de/templatequery-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81831fe97cd52972f65a0d41909c5d6f", "sha256": "e7fa6b30ec2e60d873bccd3b91744c783589d457950780b5bb76c455a6fc79e0"}, "downloads": -1, "filename": "templatequery-0.1.3.tar.gz", "has_sig": false, "md5_digest": "81831fe97cd52972f65a0d41909c5d6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7369, "upload_time": "2020-03-15T19:59:57", "upload_time_iso_8601": "2020-03-15T19:59:57.689408Z", "url": "https://files.pythonhosted.org/packages/b6/54/932e307531a8bcff5c3056aeb4b59becdcbacc8e213b05ec5c22c4e4e2eb/templatequery-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:43 2020"}