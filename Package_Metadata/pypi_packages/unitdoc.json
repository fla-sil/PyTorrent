{"info": {"author": "Deniz Bozyigit", "author_email": "deniz195@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# Unitdoc\n\nUnitdoc is a Python library for dealing with data objects which describe physical objects with units and easy serialization. Let's look at an example. First, import unitdoc and create the registry that you will use in your application:\n```python\nfrom unitdoc import UnitDocRegistry\n\nudr = UnitDocRegistry()\n```\n\nLet's create a class that represents a battery\n```python\nimport attr\n\n@udr.serialize()   \n@attr.s()\nclass Battery(object):\n    name = attr.ib()\n\n    weight = udr.attrib(default='45g')\n    volume = udr.attrib(default='16ml', default_unit='ml')\n    capacity = udr.attrib(default='3.0Ah')\n    voltage = udr.attrib(default='3.6V', description ='Average voltage')\n```\n\nWe can create an instance of `Battery`, which will be a normal `attr` object (see [attrs library](https://github.com/python-attrs/attrs)), which features e.g. a nice `repr` function:\n```python\na_battery = Battery(name = 'battery', weight='43g')\nprint(a_battery)\n# outputs: Battery(name='battery', weight=<Quantity(43, 'gram')>, volume=<Quantity(16, 'milliliter')>, capacity=<Quantity(3.0, 'Ah')>, voltage=<Quantity(3.6, 'volt')>)\n```\n\n\nWe can use the attributes of the battery in any operation that are allowed by the pint package:\n```python\nenergy = (a_battery.capacity * a_battery.voltage).to('Wh')\nenergy_density = (energy / a_battery.weight).to('Wh/kg')\nprint(f'{energy} @  {energy_density}')\n# outputs: 10.8 Wh @  251.2 Wh / kg\n```\n\nNow let's save and reload our battery object:\n```python\n# look at serialized form\nprint(a_battery.serialize())\n\n# outputs:\nname: battery\nweight: !unit 43 g\nvolume: !unit 16 ml\ncapacity: !unit 3 Ah\nvoltage: !unit 3.6 V\n```\n\nThis can be easily saved to a file and reloaded again:\n```python\nfn = 'a_battery.yaml'\n# save to yaml file\nwith open(fn, 'w') as f:\n    f.write(a_battery.serialize())\n\n# load from yaml file\nwith open(fn, 'r') as f:\n    a_loaded_battery = Battery.deserialize(f.read())\n\nassert a_battery == a_loaded_battery    \n```\n\n## More features\nUnitdoc facilitates certain operations, which can improve your code. \n\nIf you specify `default_unit` in an attribute, quantities are automatically normalized to that unit:\n```python\na_battery = Battery(name = 'battery', volume='15903 mm^3')\nprint(a_battery.volume)\n# outputs: 15.9 ml\n```\n\nIf a `default_unit` is specified, any incompatible unit will raise an exception:\n```python\nfrom unitdoc import DimensionalityError\n\ntry:\n    a_battery = Battery(name = 'battery', volume='42 g')\nexcept DimensionalityError as e:\n    print(e)\n# outputs: Cannot convert from 'gram' ([mass]) to 'milliliter' ([length] ** 3)\n```\n\nYou can retrieve description of parameters, for e.g. data representation code\n```python\nfrom unitdoc import get_attr_description\nprint(get_attr_description(a_battery.__class__, 'voltage'))\n# outputs: Average voltage\n```\n\n\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install unitdoc:\n\n```bash\npip install unitdoc\n```\n\nAlternatively, install the latest version from git:\n```bash\ngit clone https://github.com/deniz195/unitdoc\npython unitdoc/setup.py install --user\n```\n\n## Related packages\nUnitdoc is based on the following amazing packages:\n\n- [pint](https://pint.readthedocs.io/) deals with the units\n- [ruamel.yamls](https://yaml.readthedocs.io/en/latest/) deals with (de)serializing from semi-structured data (nested dictionaries)\n- [attrs](https://github.com/python-attrs/attrs) deals with the boilerplate of data classes\n- [cattr](https://github.com/Tinche/cattrs) deals with the unstructuring and restructuring of classes for (de)serialization\n\nThe UnitDocRegistry creates registries/converters/parsers for each package and aggregates them. You can leverage the features of each package:\n\nUse unit registry from pint:\n```python\nq = udr.ureg('1000gram').to('kg')\nprint(q)\n# outputs: 1 kg\n```\n\nUse yaml parser from ruaml.yaml:\n```python\nq_yaml = udr.yaml.dump(dict(weight=q))\nprint(q_yaml)\n# outputs: weight: !unit 1 kg\n```\n\nUse cattr converter:\n```python\n@udr.serialize()   \n@attr.s()\nclass Thing(object):\n    weight = udr.attrib(default='45g', description ='Total weight')\n\na_thing = Thing()\na_thing_dict = udr.cattr.unstructure(a_thing)\n\nassert type(a_thing_dict) == dict\nprint(a_thing_dict['weight'])\n# output: 45 g\n```\n\n## Restrictions\nGiven the restrictions of the attrs package, updating attributes safely requires certain precautions. E.g. given the `Battery` class from above the following is possible but not desirable\n```python\na_battery = Battery(name = 'battery')\na_battery.volume = 99\ntype(a_battery.volume)\n# outputs: int\n```\nThis is not desirable, because unit check and normalizatin is not performed. \n\nAn good way to avoid this (and other problems) is to use keyword only (`kw_only=True`) and frozen (`frozen=True`) `attr` objects. \n```python\n@udr.serialize()   \n@attr.s(kw_only=True, frozen=True)\nclass BetterBattery(object):\n    name = attr.ib()\n\n    weight = udr.attrib(default='45g')\n    volume = udr.attrib(default='16ml', default_unit='ml')\n    capacity = udr.attrib(default='3.0Ah')\n    voltage = udr.attrib(default='3.6V', description ='Average voltage')\n```\n\nThe keyword only restriction, will not allow the creation of objects from positional parameters, so that the following line fails with a Type error:\n```python\na_battery = BetterBattery('battery', '42g', '16ml') \n```\nThis is good, because positional arguments can be dangerous when data model changes over time. The following line creates a new object and is stable if the class changes\n```python\na_battery = BetterBattery(name='battery', weight='42g', volume='16ml') \n```\n\nThe frozen instance restriction does not allow to mutate an object, so that this line will fail with a `FrozenInstanceError`\n```python\na_battery.volume = 99 \n```\nTo update values, you can use the attr.evolve function, which creates a new object with the updated value\n```python\na_battery = attr.evolve(a_battery, volume='12cm^3')\n```\nIn this case unit conversion and checks are performed as expected.\n\nWhile unitdoc works with regular `attr` classes (`@attr.s()`), we strongly recommend using `@attr.s(kw_only=True, frozen=True)`.\n\n\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/deniz195/unitdoc", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "unitdoc", "package_url": "https://pypi.org/project/unitdoc/", "platform": "", "project_url": "https://pypi.org/project/unitdoc/", "project_urls": {"Homepage": "https://github.com/deniz195/unitdoc"}, "release_url": "https://pypi.org/project/unitdoc/0.2.3/", "requires_dist": ["attrs", "cattrs", "attr-descriptions (>=0.1.3)", "ruamel.yaml", "pint-mtools (>=0.12.3)", "python-dateutil"], "requires_python": "", "summary": "Classes that describe physical objects with units and easy serialization.", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Unitdoc</h1>\n<p>Unitdoc is a Python library for dealing with data objects which describe physical objects with units and easy serialization. Let's look at an example. First, import unitdoc and create the registry that you will use in your application:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unitdoc</span> <span class=\"kn\">import</span> <span class=\"n\">UnitDocRegistry</span>\n\n<span class=\"n\">udr</span> <span class=\"o\">=</span> <span class=\"n\">UnitDocRegistry</span><span class=\"p\">()</span>\n</pre>\n<p>Let's create a class that represents a battery</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">attr</span>\n\n<span class=\"nd\">@udr</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span>   \n<span class=\"nd\">@attr</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">Battery</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">ib</span><span class=\"p\">()</span>\n\n    <span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'45g'</span><span class=\"p\">)</span>\n    <span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'16ml'</span><span class=\"p\">,</span> <span class=\"n\">default_unit</span><span class=\"o\">=</span><span class=\"s1\">'ml'</span><span class=\"p\">)</span>\n    <span class=\"n\">capacity</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'3.0Ah'</span><span class=\"p\">)</span>\n    <span class=\"n\">voltage</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'3.6V'</span><span class=\"p\">,</span> <span class=\"n\">description</span> <span class=\"o\">=</span><span class=\"s1\">'Average voltage'</span><span class=\"p\">)</span>\n</pre>\n<p>We can create an instance of <code>Battery</code>, which will be a normal <code>attr</code> object (see <a href=\"https://github.com/python-attrs/attrs\" rel=\"nofollow\">attrs library</a>), which features e.g. a nice <code>repr</code> function:</p>\n<pre><span class=\"n\">a_battery</span> <span class=\"o\">=</span> <span class=\"n\">Battery</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'battery'</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"s1\">'43g'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a_battery</span><span class=\"p\">)</span>\n<span class=\"c1\"># outputs: Battery(name='battery', weight=&lt;Quantity(43, 'gram')&gt;, volume=&lt;Quantity(16, 'milliliter')&gt;, capacity=&lt;Quantity(3.0, 'Ah')&gt;, voltage=&lt;Quantity(3.6, 'volt')&gt;)</span>\n</pre>\n<p>We can use the attributes of the battery in any operation that are allowed by the pint package:</p>\n<pre><span class=\"n\">energy</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a_battery</span><span class=\"o\">.</span><span class=\"n\">capacity</span> <span class=\"o\">*</span> <span class=\"n\">a_battery</span><span class=\"o\">.</span><span class=\"n\">voltage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">'Wh'</span><span class=\"p\">)</span>\n<span class=\"n\">energy_density</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">energy</span> <span class=\"o\">/</span> <span class=\"n\">a_battery</span><span class=\"o\">.</span><span class=\"n\">weight</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">'Wh/kg'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">energy</span><span class=\"si\">}</span><span class=\"s1\"> @  </span><span class=\"si\">{</span><span class=\"n\">energy_density</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># outputs: 10.8 Wh @  251.2 Wh / kg</span>\n</pre>\n<p>Now let's save and reload our battery object:</p>\n<pre><span class=\"c1\"># look at serialized form</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a_battery</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># outputs:</span>\n<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">battery</span>\n<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"err\">!</span><span class=\"n\">unit</span> <span class=\"mi\">43</span> <span class=\"n\">g</span>\n<span class=\"n\">volume</span><span class=\"p\">:</span> <span class=\"err\">!</span><span class=\"n\">unit</span> <span class=\"mi\">16</span> <span class=\"n\">ml</span>\n<span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"err\">!</span><span class=\"n\">unit</span> <span class=\"mi\">3</span> <span class=\"n\">Ah</span>\n<span class=\"n\">voltage</span><span class=\"p\">:</span> <span class=\"err\">!</span><span class=\"n\">unit</span> <span class=\"mf\">3.6</span> <span class=\"n\">V</span>\n</pre>\n<p>This can be easily saved to a file and reloaded again:</p>\n<pre><span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"s1\">'a_battery.yaml'</span>\n<span class=\"c1\"># save to yaml file</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">a_battery</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># load from yaml file</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">a_loaded_battery</span> <span class=\"o\">=</span> <span class=\"n\">Battery</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">a_battery</span> <span class=\"o\">==</span> <span class=\"n\">a_loaded_battery</span>    \n</pre>\n<h2>More features</h2>\n<p>Unitdoc facilitates certain operations, which can improve your code.</p>\n<p>If you specify <code>default_unit</code> in an attribute, quantities are automatically normalized to that unit:</p>\n<pre><span class=\"n\">a_battery</span> <span class=\"o\">=</span> <span class=\"n\">Battery</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'battery'</span><span class=\"p\">,</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"s1\">'15903 mm^3'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a_battery</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"p\">)</span>\n<span class=\"c1\"># outputs: 15.9 ml</span>\n</pre>\n<p>If a <code>default_unit</code> is specified, any incompatible unit will raise an exception:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unitdoc</span> <span class=\"kn\">import</span> <span class=\"n\">DimensionalityError</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">a_battery</span> <span class=\"o\">=</span> <span class=\"n\">Battery</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'battery'</span><span class=\"p\">,</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"s1\">'42 g'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">DimensionalityError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"c1\"># outputs: Cannot convert from 'gram' ([mass]) to 'milliliter' ([length] ** 3)</span>\n</pre>\n<p>You can retrieve description of parameters, for e.g. data representation code</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unitdoc</span> <span class=\"kn\">import</span> <span class=\"n\">get_attr_description</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_attr_description</span><span class=\"p\">(</span><span class=\"n\">a_battery</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"s1\">'voltage'</span><span class=\"p\">))</span>\n<span class=\"c1\"># outputs: Average voltage</span>\n</pre>\n<h2>Installation</h2>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install unitdoc:</p>\n<pre>pip install unitdoc\n</pre>\n<p>Alternatively, install the latest version from git:</p>\n<pre>git clone https://github.com/deniz195/unitdoc\npython unitdoc/setup.py install --user\n</pre>\n<h2>Related packages</h2>\n<p>Unitdoc is based on the following amazing packages:</p>\n<ul>\n<li><a href=\"https://pint.readthedocs.io/\" rel=\"nofollow\">pint</a> deals with the units</li>\n<li><a href=\"https://yaml.readthedocs.io/en/latest/\" rel=\"nofollow\">ruamel.yamls</a> deals with (de)serializing from semi-structured data (nested dictionaries)</li>\n<li><a href=\"https://github.com/python-attrs/attrs\" rel=\"nofollow\">attrs</a> deals with the boilerplate of data classes</li>\n<li><a href=\"https://github.com/Tinche/cattrs\" rel=\"nofollow\">cattr</a> deals with the unstructuring and restructuring of classes for (de)serialization</li>\n</ul>\n<p>The UnitDocRegistry creates registries/converters/parsers for each package and aggregates them. You can leverage the features of each package:</p>\n<p>Use unit registry from pint:</p>\n<pre><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">ureg</span><span class=\"p\">(</span><span class=\"s1\">'1000gram'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">'kg'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n<span class=\"c1\"># outputs: 1 kg</span>\n</pre>\n<p>Use yaml parser from ruaml.yaml:</p>\n<pre><span class=\"n\">q_yaml</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">q_yaml</span><span class=\"p\">)</span>\n<span class=\"c1\"># outputs: weight: !unit 1 kg</span>\n</pre>\n<p>Use cattr converter:</p>\n<pre><span class=\"nd\">@udr</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span>   \n<span class=\"nd\">@attr</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">Thing</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'45g'</span><span class=\"p\">,</span> <span class=\"n\">description</span> <span class=\"o\">=</span><span class=\"s1\">'Total weight'</span><span class=\"p\">)</span>\n\n<span class=\"n\">a_thing</span> <span class=\"o\">=</span> <span class=\"n\">Thing</span><span class=\"p\">()</span>\n<span class=\"n\">a_thing_dict</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">cattr</span><span class=\"o\">.</span><span class=\"n\">unstructure</span><span class=\"p\">(</span><span class=\"n\">a_thing</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">a_thing_dict</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">dict</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a_thing_dict</span><span class=\"p\">[</span><span class=\"s1\">'weight'</span><span class=\"p\">])</span>\n<span class=\"c1\"># output: 45 g</span>\n</pre>\n<h2>Restrictions</h2>\n<p>Given the restrictions of the attrs package, updating attributes safely requires certain precautions. E.g. given the <code>Battery</code> class from above the following is possible but not desirable</p>\n<pre><span class=\"n\">a_battery</span> <span class=\"o\">=</span> <span class=\"n\">Battery</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'battery'</span><span class=\"p\">)</span>\n<span class=\"n\">a_battery</span><span class=\"o\">.</span><span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"mi\">99</span>\n<span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">a_battery</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"p\">)</span>\n<span class=\"c1\"># outputs: int</span>\n</pre>\n<p>This is not desirable, because unit check and normalizatin is not performed.</p>\n<p>An good way to avoid this (and other problems) is to use keyword only (<code>kw_only=True</code>) and frozen (<code>frozen=True</code>) <code>attr</code> objects.</p>\n<pre><span class=\"nd\">@udr</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span>   \n<span class=\"nd\">@attr</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">(</span><span class=\"n\">kw_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">frozen</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">BetterBattery</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">ib</span><span class=\"p\">()</span>\n\n    <span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'45g'</span><span class=\"p\">)</span>\n    <span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'16ml'</span><span class=\"p\">,</span> <span class=\"n\">default_unit</span><span class=\"o\">=</span><span class=\"s1\">'ml'</span><span class=\"p\">)</span>\n    <span class=\"n\">capacity</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'3.0Ah'</span><span class=\"p\">)</span>\n    <span class=\"n\">voltage</span> <span class=\"o\">=</span> <span class=\"n\">udr</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'3.6V'</span><span class=\"p\">,</span> <span class=\"n\">description</span> <span class=\"o\">=</span><span class=\"s1\">'Average voltage'</span><span class=\"p\">)</span>\n</pre>\n<p>The keyword only restriction, will not allow the creation of objects from positional parameters, so that the following line fails with a Type error:</p>\n<pre><span class=\"n\">a_battery</span> <span class=\"o\">=</span> <span class=\"n\">BetterBattery</span><span class=\"p\">(</span><span class=\"s1\">'battery'</span><span class=\"p\">,</span> <span class=\"s1\">'42g'</span><span class=\"p\">,</span> <span class=\"s1\">'16ml'</span><span class=\"p\">)</span> \n</pre>\n<p>This is good, because positional arguments can be dangerous when data model changes over time. The following line creates a new object and is stable if the class changes</p>\n<pre><span class=\"n\">a_battery</span> <span class=\"o\">=</span> <span class=\"n\">BetterBattery</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'battery'</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"s1\">'42g'</span><span class=\"p\">,</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"s1\">'16ml'</span><span class=\"p\">)</span> \n</pre>\n<p>The frozen instance restriction does not allow to mutate an object, so that this line will fail with a <code>FrozenInstanceError</code></p>\n<pre><span class=\"n\">a_battery</span><span class=\"o\">.</span><span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"mi\">99</span> \n</pre>\n<p>To update values, you can use the attr.evolve function, which creates a new object with the updated value</p>\n<pre><span class=\"n\">a_battery</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">evolve</span><span class=\"p\">(</span><span class=\"n\">a_battery</span><span class=\"p\">,</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"s1\">'12cm^3'</span><span class=\"p\">)</span>\n</pre>\n<p>In this case unit conversion and checks are performed as expected.</p>\n<p>While unitdoc works with regular <code>attr</code> classes (<code>@attr.s()</code>), we strongly recommend using <code>@attr.s(kw_only=True, frozen=True)</code>.</p>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>\n<p>Please make sure to update tests as appropriate.</p>\n<h2>License</h2>\n<p><a href=\"https://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 6911428, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "621e1614b444ed4af7b361b1c0f33d5e", "sha256": "65936f806d50c419eb90e1b3a8f28b033912dd85806159a0dcb86ea5527f5713"}, "downloads": -1, "filename": "unitdoc-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "621e1614b444ed4af7b361b1c0f33d5e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7502, "upload_time": "2019-08-18T15:31:44", "upload_time_iso_8601": "2019-08-18T15:31:44.153384Z", "url": "https://files.pythonhosted.org/packages/b9/74/c87b9c4fec7e05919f8d33e5dc0be4deb70212efcb307e86b80f2055d32e/unitdoc-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6276d6d041bbf8b175bab0a06dacd5b4", "sha256": "5ee65f54f4f2475dd38af2cadbc2030a566054f813cc78d03634d44f339ebadc"}, "downloads": -1, "filename": "unitdoc-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6276d6d041bbf8b175bab0a06dacd5b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8519, "upload_time": "2019-08-18T15:31:46", "upload_time_iso_8601": "2019-08-18T15:31:46.249996Z", "url": "https://files.pythonhosted.org/packages/74/19/2e2150b8074afd1b3343999b5773f991fdbd8106cfc96521044fa7307eee/unitdoc-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "b23d14c799e341118242a124c53aa506", "sha256": "eaf795e31e6418039186df3177c639d05aac257afc600b623162640edf04c097"}, "downloads": -1, "filename": "unitdoc-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b23d14c799e341118242a124c53aa506", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7498, "upload_time": "2020-03-30T08:22:53", "upload_time_iso_8601": "2020-03-30T08:22:53.165463Z", "url": "https://files.pythonhosted.org/packages/78/da/1d84aa0b3fee03dde27eaf97c3ac593f7781bde8f53f4abe9e1744d3314e/unitdoc-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1531edd4832ae9a9baca4f7ff500fca0", "sha256": "341e81710150fdbff89ca3476e820799bba2957686dd04a344e8bfb138602026"}, "downloads": -1, "filename": "unitdoc-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1531edd4832ae9a9baca4f7ff500fca0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8515, "upload_time": "2020-03-30T08:22:54", "upload_time_iso_8601": "2020-03-30T08:22:54.772248Z", "url": "https://files.pythonhosted.org/packages/82/cd/b9025bf0ae1d9c4c04297b2d397b7d693ec35fa62b0a1e7d4463fe1ba41a/unitdoc-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "50dcb84a00c15b334c91c1b51bd29dd6", "sha256": "e91aed331129248efa3d79548d11fb1dfdf89a3a1a10dcffaf81e43510f9ab57"}, "downloads": -1, "filename": "unitdoc-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "50dcb84a00c15b334c91c1b51bd29dd6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7503, "upload_time": "2020-03-30T08:37:47", "upload_time_iso_8601": "2020-03-30T08:37:47.103499Z", "url": "https://files.pythonhosted.org/packages/27/56/b64382fc7a6e51fac811faf53d2b45418249558f3d12ee97ab57743d1f90/unitdoc-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4b60ee148bf25a16348f3548acef13d", "sha256": "46b4a9b29b21d843533b2129d9f97889604a3c1fe5a705f77fb9e904c682dc0c"}, "downloads": -1, "filename": "unitdoc-0.2.3.tar.gz", "has_sig": false, "md5_digest": "a4b60ee148bf25a16348f3548acef13d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8518, "upload_time": "2020-03-30T08:37:50", "upload_time_iso_8601": "2020-03-30T08:37:50.053659Z", "url": "https://files.pythonhosted.org/packages/6f/9e/7b62563057ebac66b86366a00c2f26aa35be62e02cc0e7a757331dd0c62d/unitdoc-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "50dcb84a00c15b334c91c1b51bd29dd6", "sha256": "e91aed331129248efa3d79548d11fb1dfdf89a3a1a10dcffaf81e43510f9ab57"}, "downloads": -1, "filename": "unitdoc-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "50dcb84a00c15b334c91c1b51bd29dd6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7503, "upload_time": "2020-03-30T08:37:47", "upload_time_iso_8601": "2020-03-30T08:37:47.103499Z", "url": "https://files.pythonhosted.org/packages/27/56/b64382fc7a6e51fac811faf53d2b45418249558f3d12ee97ab57743d1f90/unitdoc-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4b60ee148bf25a16348f3548acef13d", "sha256": "46b4a9b29b21d843533b2129d9f97889604a3c1fe5a705f77fb9e904c682dc0c"}, "downloads": -1, "filename": "unitdoc-0.2.3.tar.gz", "has_sig": false, "md5_digest": "a4b60ee148bf25a16348f3548acef13d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8518, "upload_time": "2020-03-30T08:37:50", "upload_time_iso_8601": "2020-03-30T08:37:50.053659Z", "url": "https://files.pythonhosted.org/packages/6f/9e/7b62563057ebac66b86366a00c2f26aa35be62e02cc0e7a757331dd0c62d/unitdoc-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:23 2020"}