{"info": {"author": "Jonathan Hartley", "author_email": "tartley@tartley.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Games/Entertainment"], "description": "> *I've seen things you people wouldn't believe. Attack ships on fire off the\n> shoulder of Orion. I watched c-beams glitter in the dark, near the\n> Tannh\u00e4user Gate. All those moments will be lost, in time, like tears in\n> rain. Time to die.*\n\n[![click to see animation](screenshots/cbeams.png)](https://asciinema.org/a/141032)\n\nClick the screenshot for an asciicast showing it in motion (Thanks asciinema!)\nIt looks even better running in a large terminal locally, where the animation\nis smoother. You should download and run it!\n\n    $ pip install --user cbeams\n    $ cbeams\n\n# Downloading as a binary executable\n\nOlder releases contained a Linux binary executable, downloaded from:\n\n    https://github.com/tartley/cbeams/releases\n\nBut I'm not building those any more. Get it of PyPI using pip as above.\n\n# Downloading as source\n\n## Dependencies\n\nDeveloped on on Ubuntu 14.04, likely works on other Linux.\nDoes work on OSX.\nDoes not work on Windows.\n\nTested on Python 3.4 & 3.5. Recent releases on 3.8.\nProbably also runs on other 3.x.\nDoes not run on 2.x.\n\nPython dependencies are specified in setup.py.\n\n# Usage\n\n    cbeams [-o]\n    cbeams [-h]\n\n    -o  Overwrites one screenful of the existing terminal contents\n    -h  Displays help.\n\nPressing ctrl-C exits cbeams, flipping back to the regular terminal buffer, so\nthe animation doesn't overwrite any of your previous terminal contents.\n\nFor fun, there's also a '-o' arg, which overwrites the terminal text without\nflipping buffers. So you can see the expanding circles slowly eat away at your\nexisting terminal text, but then when you ctrl-c, it's not possible to restore\nthe terminal. So one screenful of your terminal text is overwritten and lost.\n\n# Why did I develop this?\n\nThe traditional way to do colors or animation in a terminal is to use the\nvenerable UNIX library 'curses', or its open source clone 'ncurses'. There are\nmany Python packages that expose ncurses for various uses. Anyone who has used\nthese knows that curses is a definite contender for one of the worst APIs in\nexistence. It systematically exposes callers to reams of the incidental\ncomplexity of the underlying implementation, accumulated by supporting decades\nof generations of different terminals and terminal emulators.\n\nFortunately, nowadays there is a better way. Erik Rose's 'Blessings' package\nlayers a sane API on top of ncurses. The documentation page shows how 21 lines\nof incomprehensible code using curses is transformed into four straightforward\nlines of code using blessings.\n\nI wanted an excuse to learn how blessings works, and cbeams is the result.\n\nI tag it onto the end of long-running commands to use as a visual notification\nthat the command has finished.\n\n# How it works\n\nAside from the use of Blessings, the other fun part of this project was in\nrepresenting the circles.\n\nObviously the model represents circles as a center point, radius, and a color.\nTo display these, we convert it into a representation that's useful for\noutputting to the terminal. Namely, each circle is converted into a sequence of\nhorizontal slices. Each slice has a vertical position, a leftmost start\nposition, and a rightmost end position. To display this to the terminal, we\njust print a line of colored space characters for each slice. Care was taken to\nensure that the resulting printed shape ended up symmetrical about both the\nvertical and horizontal axes.\n\nInterestingly, this representation as a series of horizontal slices lends\nitself to representing other arbitrary shapes as well as just circles.\n\nWith this in mind, obviously the animation doesn't actually display just\ncircles. They are annuli or rings. So each ring is modelled as two circles, an\nouter with a color, and an inner with a lesser radius.\n\nTo display a ring, we don't just draw the outer circle then overwrite it by\ndrawing the inner circle in black. This would display an annoying flicker\n(there's no double-buffer or vsync), and would also prevent us from being able\nto see through the holes in each ring. Instead, we perform the spatial\nsubtraction of 'outer_circle - inner_circle' to construct a new shape - the\nring as a series of horizontal slices.\n\nIt was tempting to write an arbitrary spatial operator to do this, capable of\nsubtracting any arbitrary shape from another shape, each represented as a\nseries of slices, resulting in a new series of slices. As satisfying as this\nmight have been it's clearly out of scope for this project, and as such,\ntest-driven development instead correctly steered me towards a simpler\nfunction, that used its knowledge of what the input shapes are to produce the\nrequired output in fewer lines of code.\n\nGiven this, drawing an annulus can use the exact same routine that we\npreviously described to draw a circle. Just iterate over the slices, printing\nan appropriate length horizontal strip of colored spaces for each.\n\nIn each successive frame then, we asymptotically increase the inner and outer\nradii of each annulus towards the annulus' predetermined 'max radius'. When the\ninner radius gets close enough to that value, we remove that annulus from the\nworld.\n\nThere's an extra layer of complexity though. What we've described above would\nwork great if there was a double-buffering mechanism, whereby each frame erased\nthe whole back buffer, draw the next frame in its entirety there, and then\nflipped buffers. This mechanism doesn't exist though. Hence, drawing\nconsecutive frames as described above doesn't erase the color from a character\nsquare once an annulus' inner-radius passes over it.\n\nTo achieve that, instead of drawing the desired appearance of the current\nframe, we instead draw the delta between the current frame and the last one.\nHence, we draw a thin colored annulus outside the outer radius, and a think\nblack annulus inside the inner radius.\n\nThe width of these thin \"delta\" annuli are just the difference between the\ncurrent radius value and the last frame. Hence, they are usually less than one\ncharacter wide, taking the form of just a series of disconnected dots speckling\nthe outer and inner edges of each visible circle. Over successive frames, the\ncolored dots slowly expand the outer radius, while the black ones eat away at\nthe inside radius, growing the black hole there.\n\nDrawing the tiny deltas between successive frames like this prevents\noverlapping circles from flickering badly as they would if we continually\noverdrew each whole annulus on every frame.\n\nAlso, it ends up making the program run faster, and hence the animation\nlook pleasantly smoother, because we have far fewer characters to draw to\nthe terminal each frame.\n\nWe also have a random probability of adding new annuli into the world at each\nframe. This probability varies sinusoidally over time, so that there are\nquieter and noisier moments in the animation.\n\nNew annuli are assigned a randomly chosen color from a set of currently allowed\ncolors. We add and remove colors from that set over time, so that sometimes all\nour rings are the same colors, sometimes two colors, and sometimes many colors.\nThis helps to keep the animation evolving over time, instead of looking too\n'samey' all the time. \n\n# Hacking\n\nTo populate a virtualenv, run tests, etc, see the commands in the Makefile.\nThese can often work in Windows too, under Bash shells like Cygwin, Msys.\n\nPopulating the virtualenv in the manner shown in the Makefile will also\nadd \"-e .\" to the virtualenv, which adds this project in 'develop mode',\nmeaning both that source edits are immediately visible within the virtualenv,\nand that the application entry points listed in setup.py are converted into\nexecutable scripts on the PATH.\n\n# Thanks\n\nTo Erik Rose, for the fabulous Blessings package.\nhttps://pypi.python.org/pypi/blessings\n\n# Links & Contact\n\nPython package: http://pypi.python.org/pypi/cbeams/\n\nBinaries, source, issues: https://github.com/tartley/cbeams/\n\nAuthor: Jonathan Hartley, email: tartley at domain tartley.com, Twitter: @tartley.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/cbeams/", "keywords": "console blessings ansi terminal animation", "license": "", "maintainer": "", "maintainer_email": "", "name": "cbeams", "package_url": "https://pypi.org/project/cbeams/", "platform": "", "project_url": "https://pypi.org/project/cbeams/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/cbeams/"}, "release_url": "https://pypi.org/project/cbeams/1.0.3/", "requires_dist": ["blessings (>=1.6)", "docopt (>=0.6.1)"], "requires_python": "", "summary": "A command-line program which draws pretty animated colored circles in the terminal.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n<p><em>I've seen things you people wouldn't believe. Attack ships on fire off the\nshoulder of Orion. I watched c-beams glitter in the dark, near the\nTannh\u00e4user Gate. All those moments will be lost, in time, like tears in\nrain. Time to die.</em></p>\n</blockquote>\n<p><a href=\"https://asciinema.org/a/141032\" rel=\"nofollow\"><img alt=\"click to see animation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f09de66cbafc32b50eec8327037ba49eee71e415/73637265656e73686f74732f636265616d732e706e67\"></a></p>\n<p>Click the screenshot for an asciicast showing it in motion (Thanks asciinema!)\nIt looks even better running in a large terminal locally, where the animation\nis smoother. You should download and run it!</p>\n<pre><code>$ pip install --user cbeams\n$ cbeams\n</code></pre>\n<h1>Downloading as a binary executable</h1>\n<p>Older releases contained a Linux binary executable, downloaded from:</p>\n<pre><code>https://github.com/tartley/cbeams/releases\n</code></pre>\n<p>But I'm not building those any more. Get it of PyPI using pip as above.</p>\n<h1>Downloading as source</h1>\n<h2>Dependencies</h2>\n<p>Developed on on Ubuntu 14.04, likely works on other Linux.\nDoes work on OSX.\nDoes not work on Windows.</p>\n<p>Tested on Python 3.4 &amp; 3.5. Recent releases on 3.8.\nProbably also runs on other 3.x.\nDoes not run on 2.x.</p>\n<p>Python dependencies are specified in setup.py.</p>\n<h1>Usage</h1>\n<pre><code>cbeams [-o]\ncbeams [-h]\n\n-o  Overwrites one screenful of the existing terminal contents\n-h  Displays help.\n</code></pre>\n<p>Pressing ctrl-C exits cbeams, flipping back to the regular terminal buffer, so\nthe animation doesn't overwrite any of your previous terminal contents.</p>\n<p>For fun, there's also a '-o' arg, which overwrites the terminal text without\nflipping buffers. So you can see the expanding circles slowly eat away at your\nexisting terminal text, but then when you ctrl-c, it's not possible to restore\nthe terminal. So one screenful of your terminal text is overwritten and lost.</p>\n<h1>Why did I develop this?</h1>\n<p>The traditional way to do colors or animation in a terminal is to use the\nvenerable UNIX library 'curses', or its open source clone 'ncurses'. There are\nmany Python packages that expose ncurses for various uses. Anyone who has used\nthese knows that curses is a definite contender for one of the worst APIs in\nexistence. It systematically exposes callers to reams of the incidental\ncomplexity of the underlying implementation, accumulated by supporting decades\nof generations of different terminals and terminal emulators.</p>\n<p>Fortunately, nowadays there is a better way. Erik Rose's 'Blessings' package\nlayers a sane API on top of ncurses. The documentation page shows how 21 lines\nof incomprehensible code using curses is transformed into four straightforward\nlines of code using blessings.</p>\n<p>I wanted an excuse to learn how blessings works, and cbeams is the result.</p>\n<p>I tag it onto the end of long-running commands to use as a visual notification\nthat the command has finished.</p>\n<h1>How it works</h1>\n<p>Aside from the use of Blessings, the other fun part of this project was in\nrepresenting the circles.</p>\n<p>Obviously the model represents circles as a center point, radius, and a color.\nTo display these, we convert it into a representation that's useful for\noutputting to the terminal. Namely, each circle is converted into a sequence of\nhorizontal slices. Each slice has a vertical position, a leftmost start\nposition, and a rightmost end position. To display this to the terminal, we\njust print a line of colored space characters for each slice. Care was taken to\nensure that the resulting printed shape ended up symmetrical about both the\nvertical and horizontal axes.</p>\n<p>Interestingly, this representation as a series of horizontal slices lends\nitself to representing other arbitrary shapes as well as just circles.</p>\n<p>With this in mind, obviously the animation doesn't actually display just\ncircles. They are annuli or rings. So each ring is modelled as two circles, an\nouter with a color, and an inner with a lesser radius.</p>\n<p>To display a ring, we don't just draw the outer circle then overwrite it by\ndrawing the inner circle in black. This would display an annoying flicker\n(there's no double-buffer or vsync), and would also prevent us from being able\nto see through the holes in each ring. Instead, we perform the spatial\nsubtraction of 'outer_circle - inner_circle' to construct a new shape - the\nring as a series of horizontal slices.</p>\n<p>It was tempting to write an arbitrary spatial operator to do this, capable of\nsubtracting any arbitrary shape from another shape, each represented as a\nseries of slices, resulting in a new series of slices. As satisfying as this\nmight have been it's clearly out of scope for this project, and as such,\ntest-driven development instead correctly steered me towards a simpler\nfunction, that used its knowledge of what the input shapes are to produce the\nrequired output in fewer lines of code.</p>\n<p>Given this, drawing an annulus can use the exact same routine that we\npreviously described to draw a circle. Just iterate over the slices, printing\nan appropriate length horizontal strip of colored spaces for each.</p>\n<p>In each successive frame then, we asymptotically increase the inner and outer\nradii of each annulus towards the annulus' predetermined 'max radius'. When the\ninner radius gets close enough to that value, we remove that annulus from the\nworld.</p>\n<p>There's an extra layer of complexity though. What we've described above would\nwork great if there was a double-buffering mechanism, whereby each frame erased\nthe whole back buffer, draw the next frame in its entirety there, and then\nflipped buffers. This mechanism doesn't exist though. Hence, drawing\nconsecutive frames as described above doesn't erase the color from a character\nsquare once an annulus' inner-radius passes over it.</p>\n<p>To achieve that, instead of drawing the desired appearance of the current\nframe, we instead draw the delta between the current frame and the last one.\nHence, we draw a thin colored annulus outside the outer radius, and a think\nblack annulus inside the inner radius.</p>\n<p>The width of these thin \"delta\" annuli are just the difference between the\ncurrent radius value and the last frame. Hence, they are usually less than one\ncharacter wide, taking the form of just a series of disconnected dots speckling\nthe outer and inner edges of each visible circle. Over successive frames, the\ncolored dots slowly expand the outer radius, while the black ones eat away at\nthe inside radius, growing the black hole there.</p>\n<p>Drawing the tiny deltas between successive frames like this prevents\noverlapping circles from flickering badly as they would if we continually\noverdrew each whole annulus on every frame.</p>\n<p>Also, it ends up making the program run faster, and hence the animation\nlook pleasantly smoother, because we have far fewer characters to draw to\nthe terminal each frame.</p>\n<p>We also have a random probability of adding new annuli into the world at each\nframe. This probability varies sinusoidally over time, so that there are\nquieter and noisier moments in the animation.</p>\n<p>New annuli are assigned a randomly chosen color from a set of currently allowed\ncolors. We add and remove colors from that set over time, so that sometimes all\nour rings are the same colors, sometimes two colors, and sometimes many colors.\nThis helps to keep the animation evolving over time, instead of looking too\n'samey' all the time.</p>\n<h1>Hacking</h1>\n<p>To populate a virtualenv, run tests, etc, see the commands in the Makefile.\nThese can often work in Windows too, under Bash shells like Cygwin, Msys.</p>\n<p>Populating the virtualenv in the manner shown in the Makefile will also\nadd \"-e .\" to the virtualenv, which adds this project in 'develop mode',\nmeaning both that source edits are immediately visible within the virtualenv,\nand that the application entry points listed in setup.py are converted into\nexecutable scripts on the PATH.</p>\n<h1>Thanks</h1>\n<p>To Erik Rose, for the fabulous Blessings package.\n<a href=\"https://pypi.python.org/pypi/blessings\" rel=\"nofollow\">https://pypi.python.org/pypi/blessings</a></p>\n<h1>Links &amp; Contact</h1>\n<p>Python package: <a href=\"http://pypi.python.org/pypi/cbeams/\" rel=\"nofollow\">http://pypi.python.org/pypi/cbeams/</a></p>\n<p>Binaries, source, issues: <a href=\"https://github.com/tartley/cbeams/\" rel=\"nofollow\">https://github.com/tartley/cbeams/</a></p>\n<p>Author: Jonathan Hartley, email: tartley at domain tartley.com, Twitter: @tartley.</p>\n\n          </div>"}, "last_serial": 7070674, "releases": {"1.0.0rc1": [{"comment_text": "", "digests": {"md5": "0f06651098d66fa992630850170d1992", "sha256": "a8209d0bedb9cc07f1676e1fcf0d59c1fc4b01f01c0b6d851fda82c7a4753ecc"}, "downloads": -1, "filename": "cbeams-1.0.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "0f06651098d66fa992630850170d1992", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8404, "upload_time": "2016-01-07T15:06:53", "upload_time_iso_8601": "2016-01-07T15:06:53.289379Z", "url": "https://files.pythonhosted.org/packages/88/ad/e015144e2d568f5ceaa3f22fe51f8bb1798473b961e17890596408d92d8d/cbeams-1.0.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2a0cb1728387c9f2c036bba659500a3", "sha256": "28c73069ec74e34bfeee42645534a5363c327c4155c344fa5463406b806d5a46"}, "downloads": -1, "filename": "cbeams-1.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "a2a0cb1728387c9f2c036bba659500a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7122, "upload_time": "2016-01-07T15:07:21", "upload_time_iso_8601": "2016-01-07T15:07:21.543300Z", "url": "https://files.pythonhosted.org/packages/7b/78/a025762ec602e1e0d563067f082358dfb52ea153dcbb989c24ce68ef7a0b/cbeams-1.0.0rc1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "e984c8b6a8067c176e84bf28542eff60", "sha256": "661ae9b1b2ab007d361eb0743f0ac253176de5aa5418bc826afb26205b197769"}, "downloads": -1, "filename": "cbeams-1.0.0rc1.zip", "has_sig": false, "md5_digest": "e984c8b6a8067c176e84bf28542eff60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12078, "upload_time": "2016-01-07T15:07:26", "upload_time_iso_8601": "2016-01-07T15:07:26.446072Z", "url": "https://files.pythonhosted.org/packages/db/df/25ae05fa94ce86aab7cee38b15b9b0e4dd10848b5b1e3ac36b34e549f611/cbeams-1.0.0rc1.zip", "yanked": false}], "1.0.0rc3": [{"comment_text": "", "digests": {"md5": "f355403e5bad22c152642f5c0b27ff51", "sha256": "e3a84e5d9bcb2a975661fe90e0c05efe784deb0b50015a0ffeccfd190796a7c4"}, "downloads": -1, "filename": "cbeams-1.0.0rc3-py3-none-any.whl", "has_sig": false, "md5_digest": "f355403e5bad22c152642f5c0b27ff51", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8439, "upload_time": "2016-01-08T04:50:00", "upload_time_iso_8601": "2016-01-08T04:50:00.777670Z", "url": "https://files.pythonhosted.org/packages/e2/2d/b48df221621b5d17456e0b55e8d05c077c08ec84f951974d0714125606db/cbeams-1.0.0rc3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96503b97c542c89910326c6968c3b506", "sha256": "a58e4fcd273ea88487938b867c70718c29664944d534268484e8e55e40e25089"}, "downloads": -1, "filename": "cbeams-1.0.0rc3.tar.gz", "has_sig": false, "md5_digest": "96503b97c542c89910326c6968c3b506", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7116, "upload_time": "2016-01-08T04:52:24", "upload_time_iso_8601": "2016-01-08T04:52:24.973491Z", "url": "https://files.pythonhosted.org/packages/a5/f1/28efe83cbed2b7ec7f72d9a1904478471519dd065714b69ba931fafa842d/cbeams-1.0.0rc3.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "1ee9866d341a0141f3d6e63a75b663cd", "sha256": "229e6bdaa58d6b02371ecc7959cf7af32a077de50dda336ec8f1389fcb76dee5"}, "downloads": -1, "filename": "cbeams-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1ee9866d341a0141f3d6e63a75b663cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9651, "upload_time": "2016-01-26T20:33:43", "upload_time_iso_8601": "2016-01-26T20:33:43.608940Z", "url": "https://files.pythonhosted.org/packages/0a/23/c643b4e54e03a3525df67883c912c8a8eafc7d4a47ccc696a8236e1c49c1/cbeams-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54adcd677000ac0e8bdd1272525107ae", "sha256": "52811be4a4d037eab5ee426c5b295f409997ace44e130580849166374913b878"}, "downloads": -1, "filename": "cbeams-1.0.1.tar.gz", "has_sig": false, "md5_digest": "54adcd677000ac0e8bdd1272525107ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7947, "upload_time": "2016-01-26T20:34:14", "upload_time_iso_8601": "2016-01-26T20:34:14.845301Z", "url": "https://files.pythonhosted.org/packages/ec/73/0cad795ceccf2467398e40a11c24b3f7a48e62d7bff1cf7c9b2be451702d/cbeams-1.0.1.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "e637ef3608c9f46b867aeea260a18940", "sha256": "fb09318247ba15feb30f64c5af4875669b6251149b5047adc819f36a53973b62"}, "downloads": -1, "filename": "cbeams-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e637ef3608c9f46b867aeea260a18940", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10435, "upload_time": "2020-04-21T19:28:50", "upload_time_iso_8601": "2020-04-21T19:28:50.623985Z", "url": "https://files.pythonhosted.org/packages/b2/f1/d2060870fb049452ab2782c5423856fa28f666a09f8cf280cf2250d78560/cbeams-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "508a2885f1e99c48a3effb907a83ff1a", "sha256": "f10dac5ac01cdfd32edf82b5c1638a3891112b3052b44e069adbb33acd93eca9"}, "downloads": -1, "filename": "cbeams-1.0.3.tar.gz", "has_sig": false, "md5_digest": "508a2885f1e99c48a3effb907a83ff1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14353, "upload_time": "2020-04-21T19:28:51", "upload_time_iso_8601": "2020-04-21T19:28:51.498216Z", "url": "https://files.pythonhosted.org/packages/ac/5b/4ec3f5510b468dbb7d0c617b09cc23e308f13eb774e54cdd3a6a0cc01803/cbeams-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e637ef3608c9f46b867aeea260a18940", "sha256": "fb09318247ba15feb30f64c5af4875669b6251149b5047adc819f36a53973b62"}, "downloads": -1, "filename": "cbeams-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e637ef3608c9f46b867aeea260a18940", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10435, "upload_time": "2020-04-21T19:28:50", "upload_time_iso_8601": "2020-04-21T19:28:50.623985Z", "url": "https://files.pythonhosted.org/packages/b2/f1/d2060870fb049452ab2782c5423856fa28f666a09f8cf280cf2250d78560/cbeams-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "508a2885f1e99c48a3effb907a83ff1a", "sha256": "f10dac5ac01cdfd32edf82b5c1638a3891112b3052b44e069adbb33acd93eca9"}, "downloads": -1, "filename": "cbeams-1.0.3.tar.gz", "has_sig": false, "md5_digest": "508a2885f1e99c48a3effb907a83ff1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14353, "upload_time": "2020-04-21T19:28:51", "upload_time_iso_8601": "2020-04-21T19:28:51.498216Z", "url": "https://files.pythonhosted.org/packages/ac/5b/4ec3f5510b468dbb7d0c617b09cc23e308f13eb774e54cdd3a6a0cc01803/cbeams-1.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:10 2020"}