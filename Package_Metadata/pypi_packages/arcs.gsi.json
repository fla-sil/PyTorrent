{"info": {"author": "Russell Sim", "author_email": "russell.sim@arcs.org.au", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Topic :: Security :: Cryptography", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Distributed Computing"], "description": ".. contents::\n\nIntroduction\n============\n\nThis library provides some utility classes and functions for deailing with X509 certificates. Most of the tasks performed by these classes are trivial but they require use of the M2Crypto classes which can be a pain. The problem isn't that the M2Crypto classes are complex, it just that when doing GSI tasks i find myself repeating work in different projects.\n\n>>> import arcs.gsi.certificate\n>>> r = arcs.gsi.certificate.CertificateRequest()\n>>> r.set_dn(\"DC=au,DC=org,DC=arcs,DC=test,O=VPAC,CN=Russell Sim\")\n>>> r.sign()\n>>> print r.get_cert_req().as_text()\nCertificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: DC=au, DC=org, DC=arcs, DC=test, O=VPAC, CN=Russell Sim\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n            RSA Public Key: (2048 bit)\n                Modulus (2048 bit):\n                    ...\n                Exponent: 65537 (0x10001)\n        Attributes:\n            a0:00\n    Signature Algorithm: sha1WithRSAEncryption\n        ...\n<BLANKLINE>\n\nGenerating a request with a 1024 bit key for compatablity with older applications.\n\n>>> r = arcs.gsi.certificate.CertificateRequest(dn=\"DC=au,DC=org,DC=arcs,DC=test,O=VPAC,CN=Russell Sim\", keySize=1024)\n>>> r.sign()\n>>> print r\nCertificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: DC=au, DC=org, DC=arcs, DC=test, O=VPAC, CN=Russell Sim\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n            RSA Public Key: (1024 bit)\n                Modulus (1024 bit):\n                    ...\n                Exponent: 65537 (0x10001)\n        Attributes:\n            a0:00\n    Signature Algorithm: sha1WithRSAEncryption\n        ...\n<BLANKLINE>\n\nIt's easier to access a certificate without needing to introspect M2Crypto to figure out the calls.\n\n>>> r\n-----BEGIN CERTIFICATE REQUEST-----\n...\n-----END CERTIFICATE REQUEST-----\n<BLANKLINE>\n\n>>> r = arcs.gsi.certificate.CertificateRequest(dn=\"DC=au,DC=org,DC=arcs,DC=test,O=VPAC,CN=Russell Sim\", keySize=1024)\n\nExtensions are passed in as a list of dictionarys.\n\n>>> r.add_extensions([{'critical': False, 'name': 'ExtendedKeyUsage', 'value': 'clientAuth'}, {'critical': True, 'name': 'KeyUsage', 'value': 'Digital Signature, Key Encipherment'}, {'critical': False, 'name': 'CertificatePolicies', 'value': '1.3.6.1.4.1.31863.1.0.1'}, {'critical': False, 'name': 'SubjectAltName', 'value': 'email:russell@vpac.org'}])\n>>> r.sign()\n>>> print r\nCertificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: DC=au, DC=org, DC=arcs, DC=test, O=VPAC, CN=Russell Sim\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n            RSA Public Key: (1024 bit)\n                Modulus (1024 bit):\n                ...\n                Exponent: 65537 (0x10001)\n        Attributes:\n        Requested Extensions:\n            X509v3 Extended Key Usage: \n                TLS Web Client Authentication\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Certificate Policies: \n                Policy: 1.3.6.1.4.1.31863.1.0.1\n<BLANKLINE>\n            X509v3 Subject Alternative Name: \n                email:russell@vpac.org\n    Signature Algorithm: sha1WithRSAEncryption\n    ...\n<BLANKLINE>\n\nCreating certificates\n---------------------\n\nCreating a certificate, currently this can't be done from a request because there are no methods to extract the extensions from a request.\n\n>>> c = arcs.gsi.certificate.Certificate()\n>>> c.set_dn(\"DC=au,DC=org,DC=arcs,DC=test,O=VPAC,CN=Russell Sim\")\n>>> c.add_extensions([{'critical': False, 'name': 'ExtendedKeyUsage', 'value': 'clientAuth'}, {'critical': True, 'name': 'KeyUsage', 'value': 'Digital Signature, Key Encipherment'}, {'critical': False, 'name': 'CertificatePolicies', 'value': '1.3.6.1.4.1.31863.1.0.1'}, {'critical': False, 'name': 'SubjectAltName', 'value': 'email:russell@vpac.org'}])\n>>> c.set_version(2)\n>>> c.set_serial_number()\n>>> c.set_times()\n>>> c.set_issuer_name(c.get_subject())\n>>> k = arcs.gsi.key.Key()\n>>> c.sign(k)\n\nCreating a proxy certificate\n----------------------------\n\n>>> p = arcs.gsi.proxy.ProxyCertificate(c)\n>>> p.sign()\n>>> print p\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: ... (0x...)\n        Signature Algorithm: sha1WithRSAEncryption\n        Issuer: DC=au, DC=org, DC=arcs, DC=test, O=VPAC, CN=Russell Sim\n        Validity\n            Not Before: ...\n            Not After : ...\n        Subject: DC=au, DC=org, DC=arcs, DC=test, O=VPAC, CN=Russell Sim, CN=...\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n            RSA Public Key: (2048 bit)\n                Modulus (2048 bit):\n                ...\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment, Data Encipherment\n            Proxy Certificate Information: critical\n                Path Length Constraint: infinite\n                Policy Language: Inherit all\n<BLANKLINE>\n    Signature Algorithm: sha1WithRSAEncryption\n        ...\n<BLANKLINE>\n\n\n\n\n\nChangelog\n=========\n\n1.2 - Unreleased\n----------------\n* Key class now accepts PEM formated keys [Russell]\n* Python 2.6 compatability, removed dependency on xpath [Russell]\n* Now using nose testing [Russell]\n\n\n1.1 - (2009-10-29)\n------------------\n* updated documentation, including addition of sphinx [Russell]\n* Jython hack added to support webstart [Markus]\n* Jython example code added [Markus]\n* added slcs support functions [Russell]\n* Centos ignores M2Crypto requirement [Russell]\n* New certificates now have a start time of -5min [Sam]\n* Updated proxy name generation to avoid encoding errors [Russell]\n\n\n1.0 (2009-07-08)\n----------------\n\n* Initial release\n* Certificate Classes added\n* Proxy Classes added\n* Key Classes added", "description_content_type": null, "docs_url": null, "download_url": "http://code.arcs.org.au/pypi/simple/arcs.gsi/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.arcs.org.au/gitorious/arcs-gsi/arcs-gsi", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "arcs.gsi", "package_url": "https://pypi.org/project/arcs.gsi/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/arcs.gsi/", "project_urls": {"Download": "http://code.arcs.org.au/pypi/simple/arcs.gsi/", "Homepage": "http://code.arcs.org.au/gitorious/arcs-gsi/arcs-gsi"}, "release_url": "https://pypi.org/project/arcs.gsi/1.2/", "requires_dist": null, "requires_python": null, "summary": "Library to assist GSI authentication and certificate handling in python.", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id3\" rel=\"nofollow\">Introduction</a><ul>\n<li><a href=\"#creating-certificates\" id=\"id4\" rel=\"nofollow\">Creating certificates</a></li>\n<li><a href=\"#creating-a-proxy-certificate\" id=\"id5\" rel=\"nofollow\">Creating a proxy certificate</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id6\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#unreleased\" id=\"id7\" rel=\"nofollow\">1.2 - Unreleased</a></li>\n<li><a href=\"#id1\" id=\"id8\" rel=\"nofollow\">1.1 - (2009-10-29)</a></li>\n<li><a href=\"#id2\" id=\"id9\" rel=\"nofollow\">1.0 (2009-07-08)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Introduction</a></h2>\n<p>This library provides some utility classes and functions for deailing with X509 certificates. Most of the tasks performed by these classes are trivial but they require use of the M2Crypto classes which can be a pain. The problem isn\u2019t that the M2Crypto classes are complex, it just that when doing GSI tasks i find myself repeating work in different projects.</p>\n<pre>&gt;&gt;&gt; import arcs.gsi.certificate\n&gt;&gt;&gt; r = arcs.gsi.certificate.CertificateRequest()\n&gt;&gt;&gt; r.set_dn(\"DC=au,DC=org,DC=arcs,DC=test,O=VPAC,CN=Russell Sim\")\n&gt;&gt;&gt; r.sign()\n&gt;&gt;&gt; print r.get_cert_req().as_text()\nCertificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: DC=au, DC=org, DC=arcs, DC=test, O=VPAC, CN=Russell Sim\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n            RSA Public Key: (2048 bit)\n                Modulus (2048 bit):\n                    ...\n                Exponent: 65537 (0x10001)\n        Attributes:\n            a0:00\n    Signature Algorithm: sha1WithRSAEncryption\n        ...\n&lt;BLANKLINE&gt;\n</pre>\n<p>Generating a request with a 1024 bit key for compatablity with older applications.</p>\n<pre>&gt;&gt;&gt; r = arcs.gsi.certificate.CertificateRequest(dn=\"DC=au,DC=org,DC=arcs,DC=test,O=VPAC,CN=Russell Sim\", keySize=1024)\n&gt;&gt;&gt; r.sign()\n&gt;&gt;&gt; print r\nCertificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: DC=au, DC=org, DC=arcs, DC=test, O=VPAC, CN=Russell Sim\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n            RSA Public Key: (1024 bit)\n                Modulus (1024 bit):\n                    ...\n                Exponent: 65537 (0x10001)\n        Attributes:\n            a0:00\n    Signature Algorithm: sha1WithRSAEncryption\n        ...\n&lt;BLANKLINE&gt;\n</pre>\n<p>It\u2019s easier to access a certificate without needing to introspect M2Crypto to figure out the calls.</p>\n<pre>&gt;&gt;&gt; r\n-----BEGIN CERTIFICATE REQUEST-----\n...\n-----END CERTIFICATE REQUEST-----\n&lt;BLANKLINE&gt;\n</pre>\n<pre>&gt;&gt;&gt; r = arcs.gsi.certificate.CertificateRequest(dn=\"DC=au,DC=org,DC=arcs,DC=test,O=VPAC,CN=Russell Sim\", keySize=1024)\n</pre>\n<p>Extensions are passed in as a list of dictionarys.</p>\n<pre>&gt;&gt;&gt; r.add_extensions([{'critical': False, 'name': 'ExtendedKeyUsage', 'value': 'clientAuth'}, {'critical': True, 'name': 'KeyUsage', 'value': 'Digital Signature, Key Encipherment'}, {'critical': False, 'name': 'CertificatePolicies', 'value': '1.3.6.1.4.1.31863.1.0.1'}, {'critical': False, 'name': 'SubjectAltName', 'value': 'email:russell@vpac.org'}])\n&gt;&gt;&gt; r.sign()\n&gt;&gt;&gt; print r\nCertificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: DC=au, DC=org, DC=arcs, DC=test, O=VPAC, CN=Russell Sim\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n            RSA Public Key: (1024 bit)\n                Modulus (1024 bit):\n                ...\n                Exponent: 65537 (0x10001)\n        Attributes:\n        Requested Extensions:\n            X509v3 Extended Key Usage:\n                TLS Web Client Authentication\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Certificate Policies:\n                Policy: 1.3.6.1.4.1.31863.1.0.1\n&lt;BLANKLINE&gt;\n            X509v3 Subject Alternative Name:\n                email:russell@vpac.org\n    Signature Algorithm: sha1WithRSAEncryption\n    ...\n&lt;BLANKLINE&gt;\n</pre>\n<div id=\"creating-certificates\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Creating certificates</a></h3>\n<p>Creating a certificate, currently this can\u2019t be done from a request because there are no methods to extract the extensions from a request.</p>\n<pre>&gt;&gt;&gt; c = arcs.gsi.certificate.Certificate()\n&gt;&gt;&gt; c.set_dn(\"DC=au,DC=org,DC=arcs,DC=test,O=VPAC,CN=Russell Sim\")\n&gt;&gt;&gt; c.add_extensions([{'critical': False, 'name': 'ExtendedKeyUsage', 'value': 'clientAuth'}, {'critical': True, 'name': 'KeyUsage', 'value': 'Digital Signature, Key Encipherment'}, {'critical': False, 'name': 'CertificatePolicies', 'value': '1.3.6.1.4.1.31863.1.0.1'}, {'critical': False, 'name': 'SubjectAltName', 'value': 'email:russell@vpac.org'}])\n&gt;&gt;&gt; c.set_version(2)\n&gt;&gt;&gt; c.set_serial_number()\n&gt;&gt;&gt; c.set_times()\n&gt;&gt;&gt; c.set_issuer_name(c.get_subject())\n&gt;&gt;&gt; k = arcs.gsi.key.Key()\n&gt;&gt;&gt; c.sign(k)\n</pre>\n</div>\n<div id=\"creating-a-proxy-certificate\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Creating a proxy certificate</a></h3>\n<pre>&gt;&gt;&gt; p = arcs.gsi.proxy.ProxyCertificate(c)\n&gt;&gt;&gt; p.sign()\n&gt;&gt;&gt; print p\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: ... (0x...)\n        Signature Algorithm: sha1WithRSAEncryption\n        Issuer: DC=au, DC=org, DC=arcs, DC=test, O=VPAC, CN=Russell Sim\n        Validity\n            Not Before: ...\n            Not After : ...\n        Subject: DC=au, DC=org, DC=arcs, DC=test, O=VPAC, CN=Russell Sim, CN=...\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n            RSA Public Key: (2048 bit)\n                Modulus (2048 bit):\n                ...\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment, Data Encipherment\n            Proxy Certificate Information: critical\n                Path Length Constraint: infinite\n                Policy Language: Inherit all\n&lt;BLANKLINE&gt;\n    Signature Algorithm: sha1WithRSAEncryption\n        ...\n&lt;BLANKLINE&gt;\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"unreleased\">\n<h3><a href=\"#id7\" rel=\"nofollow\">1.2 - Unreleased</a></h3>\n<ul>\n<li>Key class now accepts PEM formated keys [Russell]</li>\n<li>Python 2.6 compatability, removed dependency on xpath [Russell]</li>\n<li>Now using nose testing [Russell]</li>\n</ul>\n</div>\n<div id=\"id1\">\n<h3><a href=\"#id8\" rel=\"nofollow\">1.1 - (2009-10-29)</a></h3>\n<ul>\n<li>updated documentation, including addition of sphinx [Russell]</li>\n<li>Jython hack added to support webstart [Markus]</li>\n<li>Jython example code added [Markus]</li>\n<li>added slcs support functions [Russell]</li>\n<li>Centos ignores M2Crypto requirement [Russell]</li>\n<li>New certificates now have a start time of -5min [Sam]</li>\n<li>Updated proxy name generation to avoid encoding errors [Russell]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id9\" rel=\"nofollow\">1.0 (2009-07-08)</a></h3>\n<ul>\n<li>Initial release</li>\n<li>Certificate Classes added</li>\n<li>Proxy Classes added</li>\n<li>Key Classes added</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 786409, "releases": {"1.0": [], "1.2": [], "1.2dev-20091120": [{"comment_text": "", "digests": {"md5": "f2311a748bd31b3b18d91e1645b49d04", "sha256": "d5bf3991110a48dc13ea9dc457335792464d2b22d9b13386cc47bf975b121bc3"}, "downloads": -1, "filename": "arcs.gsi-1.2dev-20091120.tar.gz", "has_sig": false, "md5_digest": "f2311a748bd31b3b18d91e1645b49d04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31493, "upload_time": "2009-11-20T03:44:15", "upload_time_iso_8601": "2009-11-20T03:44:15.039877Z", "url": "https://files.pythonhosted.org/packages/59/35/c7d8d5406efd1f4724496675ed7318385a0f462cd5ea341befb8b22fd845/arcs.gsi-1.2dev-20091120.tar.gz", "yanked": false}]}, "urls": [], "timestamp": "Thu May  7 18:17:21 2020"}