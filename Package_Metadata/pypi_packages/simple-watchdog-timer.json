{"info": {"author": "Christoffer Hjortlund", "author_email": "hjortlund@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "simple_watchdog_timer\n=====================\n\nRequirements\n-------------\n\n* Python -- one of the following:\n\n  - CPython_ : >= 3.3\n  - PyPy_ : Latest version\n\n.. _CPython: https://www.python.org/\n.. _PyPy: https://pypy.org/\n\nInstallation\n------------\n\nPackage is uploaded on `PyPI <https://pypi.org/project/simple_watchdog_timer>`_.\n\nYou can install it with pip::\n\n    $ python3 -m pip install simple_watchdog_timer\n\n\nBackwards compatibility\n-----------------------\n\nBackwards compatibility is only guaranteed between minor versions above the stable version (1.0)\nTherefore it's advised to to pin the module on a version ether the specific version like:\nsimple_watchdog_timer==X.X.X\n\nor get the latest minor version:\nsimple_watchdog_timer~=X.X.X\n\nSee more examples of how to pin version in `PEP-440 <https://www.python.org/dev/peps/pep-0440/#compatible-release>`_.\n\n\nDocumentation\n-------------\n\nFor support, please refer to `StackOverflow <https://stackoverflow.com/>`_.\n\nExample\n-------\n\nThe following example showcases the usage\n\n.. code:: python\n\n    import simple_watchdog_timer as swt\n    from random import uniform\n    from time import sleep\n\n\n    def cb(dog):\n        # When the callback gets triggered, it's good practice to pause the WDT to prevent it firing again, while you are handling the action required when it triggers\n        dog.pause()\n\n        # Do something when the WDT triggers...\n        print('WDT Triggered')\n\n        # Update / reset the internal WDT timer (dog.reset() does the same), this is important to avoid the time spent in the callback to influence the next triggering\n        dog.update()\n\n        # Resume the WDT\n        dog.resume()\n\n        # ...or:\n\n        # If you would like to completely stop the WDT\n        # dog.stop()\n\n        # But you regret and want to start it again\n        # dog.start()\n\n        # Tip: stop() and start() can also be used instead of the more manual pause, update and resume if that is preferred (more simple, but less in-line expressive)\n\n\n    def main():\n        wdt = swt.WDT(check_interval_sec=0.01, trigger_delta_sec=0.50, callback=cb)\n\n        while True:\n            zzz_sec = uniform(0, 0.60)\n            print('Sleep for {}'.format(zzz_sec))\n            sleep(zzz_sec)\n\n            wdt.update()\n\n\n    if __name__ == '__main__':\n        main()\n\nThis example will print:\n\n.. code:: python\n\n    Raw data:\n    Sleep for 0.1492276414753453\n    Sleep for 0.5913061085397784\n    WDT Triggered\n    Sleep for 0.17619615161373772\n    Sleep for 0.5853218597734956\n    WDT Triggered\n    Sleep for 0.38154937243934783\n    Sleep for 0.5000195244886919\n    WDT Triggered\n    Sleep for 0.08607711764377268\n    Sleep for 0.31192761174090605\n    Sleep for 0.02722456895623042\n\nLicense\n-------\n\nTimedDict is released under the MIT License. See LICENSE for more information.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hjortlund/simple_watchdog_timer", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "simple-watchdog-timer", "package_url": "https://pypi.org/project/simple-watchdog-timer/", "platform": "", "project_url": "https://pypi.org/project/simple-watchdog-timer/", "project_urls": {"Homepage": "https://github.com/hjortlund/simple_watchdog_timer"}, "release_url": "https://pypi.org/project/simple-watchdog-timer/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "A simple WatchDog Timer (WDT) to trigger events if inactivity, of a time dependent task, occur for a specified amount of time.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python \u2013 one of the following:<ul>\n<li><a href=\"https://www.python.org/\" rel=\"nofollow\">CPython</a> : &gt;= 3.3</li>\n<li><a href=\"https://pypy.org/\" rel=\"nofollow\">PyPy</a> : Latest version</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Package is uploaded on <a href=\"https://pypi.org/project/simple_watchdog_timer\" rel=\"nofollow\">PyPI</a>.</p>\n<p>You can install it with pip:</p>\n<pre>$ python3 -m pip install simple_watchdog_timer\n</pre>\n</div>\n<div id=\"backwards-compatibility\">\n<h2>Backwards compatibility</h2>\n<p>Backwards compatibility is only guaranteed between minor versions above the stable version (1.0)\nTherefore it\u2019s advised to to pin the module on a version ether the specific version like:\nsimple_watchdog_timer==X.X.X</p>\n<p>or get the latest minor version:\nsimple_watchdog_timer~=X.X.X</p>\n<p>See more examples of how to pin version in <a href=\"https://www.python.org/dev/peps/pep-0440/#compatible-release\" rel=\"nofollow\">PEP-440</a>.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>For support, please refer to <a href=\"https://stackoverflow.com/\" rel=\"nofollow\">StackOverflow</a>.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>The following example showcases the usage</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">simple_watchdog_timer</span> <span class=\"k\">as</span> <span class=\"nn\">swt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">uniform</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">cb</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"p\">):</span>\n    <span class=\"c1\"># When the callback gets triggered, it's good practice to pause the WDT to prevent it firing again, while you are handling the action required when it triggers</span>\n    <span class=\"n\">dog</span><span class=\"o\">.</span><span class=\"n\">pause</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Do something when the WDT triggers...</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'WDT Triggered'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Update / reset the internal WDT timer (dog.reset() does the same), this is important to avoid the time spent in the callback to influence the next triggering</span>\n    <span class=\"n\">dog</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Resume the WDT</span>\n    <span class=\"n\">dog</span><span class=\"o\">.</span><span class=\"n\">resume</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># ...or:</span>\n\n    <span class=\"c1\"># If you would like to completely stop the WDT</span>\n    <span class=\"c1\"># dog.stop()</span>\n\n    <span class=\"c1\"># But you regret and want to start it again</span>\n    <span class=\"c1\"># dog.start()</span>\n\n    <span class=\"c1\"># Tip: stop() and start() can also be used instead of the more manual pause, update and resume if that is preferred (more simple, but less in-line expressive)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">wdt</span> <span class=\"o\">=</span> <span class=\"n\">swt</span><span class=\"o\">.</span><span class=\"n\">WDT</span><span class=\"p\">(</span><span class=\"n\">check_interval_sec</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">trigger_delta_sec</span><span class=\"o\">=</span><span class=\"mf\">0.50</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">cb</span><span class=\"p\">)</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">zzz_sec</span> <span class=\"o\">=</span> <span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.60</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sleep for </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">zzz_sec</span><span class=\"p\">))</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">zzz_sec</span><span class=\"p\">)</span>\n\n        <span class=\"n\">wdt</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>This example will print:</p>\n<pre><span class=\"n\">Raw</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n<span class=\"n\">Sleep</span> <span class=\"k\">for</span> <span class=\"mf\">0.1492276414753453</span>\n<span class=\"n\">Sleep</span> <span class=\"k\">for</span> <span class=\"mf\">0.5913061085397784</span>\n<span class=\"n\">WDT</span> <span class=\"n\">Triggered</span>\n<span class=\"n\">Sleep</span> <span class=\"k\">for</span> <span class=\"mf\">0.17619615161373772</span>\n<span class=\"n\">Sleep</span> <span class=\"k\">for</span> <span class=\"mf\">0.5853218597734956</span>\n<span class=\"n\">WDT</span> <span class=\"n\">Triggered</span>\n<span class=\"n\">Sleep</span> <span class=\"k\">for</span> <span class=\"mf\">0.38154937243934783</span>\n<span class=\"n\">Sleep</span> <span class=\"k\">for</span> <span class=\"mf\">0.5000195244886919</span>\n<span class=\"n\">WDT</span> <span class=\"n\">Triggered</span>\n<span class=\"n\">Sleep</span> <span class=\"k\">for</span> <span class=\"mf\">0.08607711764377268</span>\n<span class=\"n\">Sleep</span> <span class=\"k\">for</span> <span class=\"mf\">0.31192761174090605</span>\n<span class=\"n\">Sleep</span> <span class=\"k\">for</span> <span class=\"mf\">0.02722456895623042</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>TimedDict is released under the MIT License. See LICENSE for more information.</p>\n</div>\n\n          </div>"}, "last_serial": 4359960, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1305b5a2fc09cc06a7b9b29cc472bf14", "sha256": "ee43dc8ffb3db75bfde70ad32450ecde3f74d2e103e6edb502245db90c7df8fe"}, "downloads": -1, "filename": "simple_watchdog_timer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1305b5a2fc09cc06a7b9b29cc472bf14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3358, "upload_time": "2018-09-28T15:43:59", "upload_time_iso_8601": "2018-09-28T15:43:59.828920Z", "url": "https://files.pythonhosted.org/packages/ce/ae/a3fcabf0d13ab2163d258607d862f2a59eb82b6fc2df3614e33864467910/simple_watchdog_timer-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3ae14963db66c14158414446706321e8", "sha256": "5d5b3e366cfcc1d82146a4f8237e49463a59cc8ccac5542edc1b26cd760310f2"}, "downloads": -1, "filename": "simple_watchdog_timer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3ae14963db66c14158414446706321e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3530, "upload_time": "2018-10-10T13:23:46", "upload_time_iso_8601": "2018-10-10T13:23:46.868121Z", "url": "https://files.pythonhosted.org/packages/1f/89/effec63c05486da013ccace5db25257921c9bdb390c359f0d12ce123d37f/simple_watchdog_timer-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ae14963db66c14158414446706321e8", "sha256": "5d5b3e366cfcc1d82146a4f8237e49463a59cc8ccac5542edc1b26cd760310f2"}, "downloads": -1, "filename": "simple_watchdog_timer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3ae14963db66c14158414446706321e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3530, "upload_time": "2018-10-10T13:23:46", "upload_time_iso_8601": "2018-10-10T13:23:46.868121Z", "url": "https://files.pythonhosted.org/packages/1f/89/effec63c05486da013ccace5db25257921c9bdb390c359f0d12ce123d37f/simple_watchdog_timer-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:51 2020"}