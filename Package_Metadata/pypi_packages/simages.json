{"info": {"author": "Justin Shenk", "author_email": "shenkjustin@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# :monkey: simages:monkey:\n[![PyPI version](https://badge.fury.io/py/simages.svg)](https://badge.fury.io/py/simages) [![Build Status](https://travis-ci.com/justinshenk/simages.svg?branch=master)](https://travis-ci.com/justinshenk/simages)  [![Documentation Status](https://readthedocs.org/projects/simages/badge/?version=latest)](https://simages.readthedocs.io/en/latest/?badge=latest) [![DOI](https://zenodo.org/badge/188052094.svg)](https://zenodo.org/badge/latestdoi/188052094) [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/justinshenk/simages/master?filepath=demo.ipynb)\n\n\nFind similar images within a dataset. \n\nUseful for removing duplicate images from a dataset after scraping images with [google-images-download](https://github.com/hardikvasa/google-images-download).\n\nThe Python API returns `pairs, duplicates`, where pairs are the (ordered) closest pairs and distances is the \ncorresponding embedding distance.\n\n### Install\n\nSee the [installation docs](https://simages.readthedocs.io/en/latest/install.html) for all details. \n\n```bash\npip install simages\n```\n\nor install from source:\n\n```bash\ngit clone https://github.com/justinshenk/simages\ncd simages\npip install .\n```\n\nTo install the interactive interface, [install mongodb](https://docs.mongodb.com/manual/installation/) and use rather `pip install \"simages[all]\"`.\n\n### Demo\n\n1. Minimal command-line interface with ```simages-show```:\n\n![simages_demo](images/simages_demo.gif)\n\n2. Interactive image deletion with ```simages add/find```:\n![simages_web_demo](images/screenshot_server.png)\n\n### Usage\n\nTwo interfaces exist:\n\n1. matplotlib interface which plots the duplicates for visual inspection\n2. mongodb + flask interface which allows interactive deletion [optional]\n\n#### Minimal interface\n\nIn your console, enter the directory with images and use `simages-show`:\n\n```bash\n$ simages-show --data-dir .\n```\n\n```\nusage: simages-show [-h] [--data-dir DATA_DIR] [--show-train]\n                    [--epochs EPOCHS] [--num-channels NUM_CHANNELS]\n                    [--pairs PAIRS] [--zdim ZDIM] [-s]\n\n  -h, --help            show this help message and exit\n  --data-dir DATA_DIR, -d DATA_DIR\n                        Folder containing image data\n  --show-train, -t      Show training of embedding extractor every epoch\n  --epochs EPOCHS, -e EPOCHS\n                        Number of passes of dataset through model for\n                        training. More is better but takes more time.\n  --num-channels NUM_CHANNELS, -c NUM_CHANNELS\n                        Number of channels for data (1 for grayscale, 3 for\n                        color)\n  --pairs PAIRS, -p PAIRS\n                        Number of pairs of images to show\n  --zdim ZDIM, -z ZDIM  Compression bits (bigger generally performs better but\n                        takes more time)\n  -s, --show            Show closest pairs\n\n```\n\n#### Web Interface [Optional]\n\nNote: To install the web interface API, [install and run mongodb](https://docs.mongodb.com/manual/installation/) and use `pip install \"simages[all]\"` to install optional dependencies.\n\nAdd your pictures to the database (this will take some time depending on the number of pictures)\n\n```\nsimages add <images_folder_path>\n```\n\nA webpage will come up with all of the similar or duplicate pictures:\n```\nsimages find <images_folder_path>\n```\n\n```\nUsage:\n    simages add <path> ... [--db=<db_path>] [--parallel=<num_processes>]\n    simages remove <path> ... [--db=<db_path>]\n    simages clear [--db=<db_path>]\n    simages show [--db=<db_path>]\n    simages find <path> [--print] [--delete] [--match-time] [--trash=<trash_path>] [--db=<db_path>] [--epochs=<epochs>]\n    simages -h | --help\nOptions:\n    -h, --help                Show this screen\n    --db=<db_path>            The location of the database or a MongoDB URI. (default: ./db)\n    --parallel=<num_processes> The number of parallel processes to run to hash the image\n                               files (default: number of CPUs).\n    find:\n        --print               Only print duplicate files rather than displaying HTML file\n        --delete              Move all found duplicate pictures to the trash. This option takes priority over --print.\n        --match-time          Adds the extra constraint that duplicate images must have the\n                              same capture times in order to be considered.\n        --trash=<trash_path>  Where files will be put when they are deleted (default: ./Trash)\n        --epochs=<epochs>     Epochs for training [default: 2]\n```\n\n\n### Python APIs\n\n#### Numpy array\n\n```python\nfrom simages import find_duplicates\nimport numpy as np\n\narray_data = np.random.random(100, 3, 48, 48)# N x C x H x W\npairs, distances = find_duplicates(array_data)\n\n```\n\n#### Folder\n\n```python\nfrom simages import find_duplicates\n\ndata_dir = \"my_images_folder\"\npairs, distances = find_duplicates(data_dir)\n\n```\n\nDefault options for `find_duplicates` are:\n\n```python\ndef find_duplicates(\n    input: Union[str or np.ndarray],\n    n: int = 5,\n    num_epochs: int = 2,\n    num_channels: int = 3,\n    show: bool = False,\n    show_train: bool = False,\n    **kwargs\n):\n    \"\"\"Find duplicates in dataset. Either `array` or `data_dir` must be specified.\n\n    Args:\n        input (str or np.ndarray): folder directory or N x C x H x W array\n        n (int): number of closest pairs to identify\n        num_epochs (int): how long to train the autoencoder (more is generally better)\n        show (bool): display the closest pairs\n        show_train (bool): show output every\n        z_dim (int): size of compression (more is generally better, but slower)\n        kwargs (dict): etc, passed to `EmbeddingExtractor`\n\n    Returns:\n        pairs (np.ndarray): indices for closest pairs of images, n x 2 array\n        distances (np.ndarray): distances of each pair to each other\n```\n\n#### `Embeddings` API\n\n```python\nfrom simages import Embeddings\nimport numpy as np\n\nN = 1000\ndata = np.random.random((N, 28, 28))\nembeddings = Embeddings(data)\n\n# Access the array\narray = embeddings.array # N x z (compression size)\n\n# Get 10 closest pairs of images\npairs, distances = embeddings.duplicates(n=5)\n\n```\n\n```python\nIn [0]: pairs\nOut[0]: array([[912, 990], [716, 790], [907, 943], [483, 492], [806, 883]])\n\nIn [1]: distances\nOut[1]: array([0.00148035, 0.00150703, 0.00158789, 0.00168699, 0.00168721])\n```\n\n#### `EmbeddingExtractor` API\n\n```python\nfrom simages import EmbeddingExtractor\nimport numpy as np\n\nN = 1000\ndata = np.random.random((N, 28, 28))\nextractor = EmbeddingExtractor(data, num_channels=1) # grayscale\n\n# Show 10 closest pairs of images\npairs, distances = extractor.show_duplicates(n=10)\n\n```\n\nClass attributes and parameters:\n\n```python\nclass EmbeddingExtractor:\n    \"\"\"Extract embeddings from data with models and allow visualization.\n\n    Attributes:\n        trainloader (torch loader)\n        evalloader (torch loader)\n        model (torch.nn.Module)\n        embeddings (np.ndarray)\n\n    \"\"\"\n    def __init__(\n        self,\n        input:Union[str, np.ndarray],\n        num_channels=None,\n        num_epochs=2,\n        batch_size=32,\n        show_train=True,\n        show=False,\n        z_dim=8,\n        **kwargs,\n    ):\n    \"\"\"Inits EmbeddingExtractor with input, either `str` or `np.nd.array`, performs training and validation.\n\n    Args:\n    input (np.ndarray or str): data\n    num_channels (int): grayscale = 1, color = 3\n    num_epochs (int): more is better (generally)\n    batch_size (int): number of images per batch\n    show_train (bool): show intermediate training results\n    show (bool): show closest pairs\n    z_dim (int): compression size\n    kwargs (dict)\n\n    \"\"\"\n\n```\n\nSpecify tne number of pairs to identify with the parameter `n`.\n\n### How it works\n\n*simages* uses a convolutional autoencoder with PyTorch and compares the latent representations with [closely](https://github.com/justinshenk/closely) :triangular_ruler:.\n\n#### Dependencies\n\n*simages* depends on\nthe following packages:\n\n- [closely](https://github.com/justinshenk/closely)\n- [torch](https://pytorch.org)\n- [torchvision](https://pytorch.org)\n- scikit-learn\n- matplotlib\n\nOptional dependencies, installed with `pip install simages[all]` include:\n\n- pymongodb\n- fastcluster\n- flask\n- jinja\n- dnspython\n- python-magic\n- termcolor\n\n### Cite\n\nIf you use simages, please cite it:\n```\n    @misc{justin_shenk_2019_3237830,\n      author       = {Justin Shenk},\n      title        = {justinshenk/simages: v19.0.1},\n      month        = jun,\n      year         = 2019,\n      doi          = {10.5281/zenodo.3237830},\n      url          = {https://doi.org/10.5281/zenodo.3237830}\n    }\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/justinshenk/simages", "keywords": "images,photos,duplicates,preprocessing,similar data", "license": "MIT", "maintainer": "Justin Shenk", "maintainer_email": "shenkjustin@gmail.com", "name": "simages", "package_url": "https://pypi.org/project/simages/", "platform": "", "project_url": "https://pypi.org/project/simages/", "project_urls": {"Homepage": "https://github.com/justinshenk/simages"}, "release_url": "https://pypi.org/project/simages/19.0.2.post1/", "requires_dist": ["numpy", "scipy", "torch (>=1.0)", "torchvision (>=0.3)", "Pillow", "closely", "pymongo", "flask", "jinja2 (>=2.10)", "more-itertools", "Flask-Cors", "dnspython", "Werkzeug", "python-magic", "termcolor", "coverage ; extra == 'dev'", "pytest ; extra == 'dev'", "sphinx ; extra == 'dev'", "wheel ; extra == 'dev'", "pre-commit ; extra == 'dev'", "sphinx ; extra == 'docs'", "coverage ; extra == 'tests'", "pytest ; extra == 'tests'"], "requires_python": ">= 3.6", "summary": "Find similar images in a dataset", "version": "19.0.2.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>:monkey: simages:monkey:</h1>\n<p><a href=\"https://badge.fury.io/py/simages\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/362ea990987caa40171a175239dad9abef6ee4e9/68747470733a2f2f62616467652e667572792e696f2f70792f73696d616765732e737667\"></a> <a href=\"https://travis-ci.com/justinshenk/simages\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5348a9ebcb03e4f20bffd3d4f63b3de9e8cb535a/68747470733a2f2f7472617669732d63692e636f6d2f6a757374696e7368656e6b2f73696d616765732e7376673f6272616e63683d6d6173746572\"></a>  <a href=\"https://simages.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/179c144bed94588d9aaac2277a0cffdb00cb7f08/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73696d616765732f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://zenodo.org/badge/latestdoi/188052094\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a8384e1c2be8b24a47c7c8d19a3696dc772f9e4/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3138383035323039342e737667\"></a> <a href=\"https://mybinder.org/v2/gh/justinshenk/simages/master?filepath=demo.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<p>Find similar images within a dataset.</p>\n<p>Useful for removing duplicate images from a dataset after scraping images with <a href=\"https://github.com/hardikvasa/google-images-download\" rel=\"nofollow\">google-images-download</a>.</p>\n<p>The Python API returns <code>pairs, duplicates</code>, where pairs are the (ordered) closest pairs and distances is the\ncorresponding embedding distance.</p>\n<h3>Install</h3>\n<p>See the <a href=\"https://simages.readthedocs.io/en/latest/install.html\" rel=\"nofollow\">installation docs</a> for all details.</p>\n<pre>pip install simages\n</pre>\n<p>or install from source:</p>\n<pre>git clone https://github.com/justinshenk/simages\n<span class=\"nb\">cd</span> simages\npip install .\n</pre>\n<p>To install the interactive interface, <a href=\"https://docs.mongodb.com/manual/installation/\" rel=\"nofollow\">install mongodb</a> and use rather <code>pip install \"simages[all]\"</code>.</p>\n<h3>Demo</h3>\n<ol>\n<li>Minimal command-line interface with <code>simages-show</code>:</li>\n</ol>\n<p><img alt=\"simages_demo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc659a0bdea2744408f91a59ab058644278d73a2/696d616765732f73696d616765735f64656d6f2e676966\"></p>\n<ol>\n<li>Interactive image deletion with <code>simages add/find</code>:\n<img alt=\"simages_web_demo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/987dc93411b96014d0f6fe9c4d6b74b049244569/696d616765732f73637265656e73686f745f7365727665722e706e67\"></li>\n</ol>\n<h3>Usage</h3>\n<p>Two interfaces exist:</p>\n<ol>\n<li>matplotlib interface which plots the duplicates for visual inspection</li>\n<li>mongodb + flask interface which allows interactive deletion [optional]</li>\n</ol>\n<h4>Minimal interface</h4>\n<p>In your console, enter the directory with images and use <code>simages-show</code>:</p>\n<pre>$ simages-show --data-dir .\n</pre>\n<pre><code>usage: simages-show [-h] [--data-dir DATA_DIR] [--show-train]\n                    [--epochs EPOCHS] [--num-channels NUM_CHANNELS]\n                    [--pairs PAIRS] [--zdim ZDIM] [-s]\n\n  -h, --help            show this help message and exit\n  --data-dir DATA_DIR, -d DATA_DIR\n                        Folder containing image data\n  --show-train, -t      Show training of embedding extractor every epoch\n  --epochs EPOCHS, -e EPOCHS\n                        Number of passes of dataset through model for\n                        training. More is better but takes more time.\n  --num-channels NUM_CHANNELS, -c NUM_CHANNELS\n                        Number of channels for data (1 for grayscale, 3 for\n                        color)\n  --pairs PAIRS, -p PAIRS\n                        Number of pairs of images to show\n  --zdim ZDIM, -z ZDIM  Compression bits (bigger generally performs better but\n                        takes more time)\n  -s, --show            Show closest pairs\n\n</code></pre>\n<h4>Web Interface [Optional]</h4>\n<p>Note: To install the web interface API, <a href=\"https://docs.mongodb.com/manual/installation/\" rel=\"nofollow\">install and run mongodb</a> and use <code>pip install \"simages[all]\"</code> to install optional dependencies.</p>\n<p>Add your pictures to the database (this will take some time depending on the number of pictures)</p>\n<pre><code>simages add &lt;images_folder_path&gt;\n</code></pre>\n<p>A webpage will come up with all of the similar or duplicate pictures:</p>\n<pre><code>simages find &lt;images_folder_path&gt;\n</code></pre>\n<pre><code>Usage:\n    simages add &lt;path&gt; ... [--db=&lt;db_path&gt;] [--parallel=&lt;num_processes&gt;]\n    simages remove &lt;path&gt; ... [--db=&lt;db_path&gt;]\n    simages clear [--db=&lt;db_path&gt;]\n    simages show [--db=&lt;db_path&gt;]\n    simages find &lt;path&gt; [--print] [--delete] [--match-time] [--trash=&lt;trash_path&gt;] [--db=&lt;db_path&gt;] [--epochs=&lt;epochs&gt;]\n    simages -h | --help\nOptions:\n    -h, --help                Show this screen\n    --db=&lt;db_path&gt;            The location of the database or a MongoDB URI. (default: ./db)\n    --parallel=&lt;num_processes&gt; The number of parallel processes to run to hash the image\n                               files (default: number of CPUs).\n    find:\n        --print               Only print duplicate files rather than displaying HTML file\n        --delete              Move all found duplicate pictures to the trash. This option takes priority over --print.\n        --match-time          Adds the extra constraint that duplicate images must have the\n                              same capture times in order to be considered.\n        --trash=&lt;trash_path&gt;  Where files will be put when they are deleted (default: ./Trash)\n        --epochs=&lt;epochs&gt;     Epochs for training [default: 2]\n</code></pre>\n<h3>Python APIs</h3>\n<h4>Numpy array</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simages</span> <span class=\"kn\">import</span> <span class=\"n\">find_duplicates</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">array_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">)</span><span class=\"c1\"># N x C x H x W</span>\n<span class=\"n\">pairs</span><span class=\"p\">,</span> <span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"n\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">array_data</span><span class=\"p\">)</span>\n</pre>\n<h4>Folder</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simages</span> <span class=\"kn\">import</span> <span class=\"n\">find_duplicates</span>\n\n<span class=\"n\">data_dir</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_images_folder\"</span>\n<span class=\"n\">pairs</span><span class=\"p\">,</span> <span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"n\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">data_dir</span><span class=\"p\">)</span>\n</pre>\n<p>Default options for <code>find_duplicates</code> are:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">find_duplicates</span><span class=\"p\">(</span>\n    <span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"ow\">or</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span>\n    <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"n\">num_epochs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">num_channels</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">show_train</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n<span class=\"p\">):</span>\n    <span class=\"s2\">\"\"\"Find duplicates in dataset. Either `array` or `data_dir` must be specified.</span>\n\n<span class=\"s2\">    Args:</span>\n<span class=\"s2\">        input (str or np.ndarray): folder directory or N x C x H x W array</span>\n<span class=\"s2\">        n (int): number of closest pairs to identify</span>\n<span class=\"s2\">        num_epochs (int): how long to train the autoencoder (more is generally better)</span>\n<span class=\"s2\">        show (bool): display the closest pairs</span>\n<span class=\"s2\">        show_train (bool): show output every</span>\n<span class=\"s2\">        z_dim (int): size of compression (more is generally better, but slower)</span>\n<span class=\"s2\">        kwargs (dict): etc, passed to `EmbeddingExtractor`</span>\n\n<span class=\"s2\">    Returns:</span>\n<span class=\"s2\">        pairs (np.ndarray): indices for closest pairs of images, n x 2 array</span>\n<span class=\"s2\">        distances (np.ndarray): distances of each pair to each other</span>\n</pre>\n<h4><code>Embeddings</code> API</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simages</span> <span class=\"kn\">import</span> <span class=\"n\">Embeddings</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">))</span>\n<span class=\"n\">embeddings</span> <span class=\"o\">=</span> <span class=\"n\">Embeddings</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access the array</span>\n<span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"n\">embeddings</span><span class=\"o\">.</span><span class=\"n\">array</span> <span class=\"c1\"># N x z (compression size)</span>\n\n<span class=\"c1\"># Get 10 closest pairs of images</span>\n<span class=\"n\">pairs</span><span class=\"p\">,</span> <span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"n\">embeddings</span><span class=\"o\">.</span><span class=\"n\">duplicates</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span> <span class=\"n\">pairs</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span> <span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">912</span><span class=\"p\">,</span> <span class=\"mi\">990</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">716</span><span class=\"p\">,</span> <span class=\"mi\">790</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">907</span><span class=\"p\">,</span> <span class=\"mi\">943</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">483</span><span class=\"p\">,</span> <span class=\"mi\">492</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">806</span><span class=\"p\">,</span> <span class=\"mi\">883</span><span class=\"p\">]])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">distances</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.00148035</span><span class=\"p\">,</span> <span class=\"mf\">0.00150703</span><span class=\"p\">,</span> <span class=\"mf\">0.00158789</span><span class=\"p\">,</span> <span class=\"mf\">0.00168699</span><span class=\"p\">,</span> <span class=\"mf\">0.00168721</span><span class=\"p\">])</span>\n</pre>\n<h4><code>EmbeddingExtractor</code> API</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simages</span> <span class=\"kn\">import</span> <span class=\"n\">EmbeddingExtractor</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">))</span>\n<span class=\"n\">extractor</span> <span class=\"o\">=</span> <span class=\"n\">EmbeddingExtractor</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">num_channels</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># grayscale</span>\n\n<span class=\"c1\"># Show 10 closest pairs of images</span>\n<span class=\"n\">pairs</span><span class=\"p\">,</span> <span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"n\">extractor</span><span class=\"o\">.</span><span class=\"n\">show_duplicates</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>Class attributes and parameters:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">EmbeddingExtractor</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Extract embeddings from data with models and allow visualization.</span>\n\n<span class=\"sd\">    Attributes:</span>\n<span class=\"sd\">        trainloader (torch loader)</span>\n<span class=\"sd\">        evalloader (torch loader)</span>\n<span class=\"sd\">        model (torch.nn.Module)</span>\n<span class=\"sd\">        embeddings (np.ndarray)</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"nb\">input</span><span class=\"p\">:</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span>\n        <span class=\"n\">num_channels</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">num_epochs</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span>\n        <span class=\"n\">show_train</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">z_dim</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Inits EmbeddingExtractor with input, either `str` or `np.nd.array`, performs training and validation.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">    input (np.ndarray or str): data</span>\n<span class=\"sd\">    num_channels (int): grayscale = 1, color = 3</span>\n<span class=\"sd\">    num_epochs (int): more is better (generally)</span>\n<span class=\"sd\">    batch_size (int): number of images per batch</span>\n<span class=\"sd\">    show_train (bool): show intermediate training results</span>\n<span class=\"sd\">    show (bool): show closest pairs</span>\n<span class=\"sd\">    z_dim (int): compression size</span>\n<span class=\"sd\">    kwargs (dict)</span>\n\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<p>Specify tne number of pairs to identify with the parameter <code>n</code>.</p>\n<h3>How it works</h3>\n<p><em>simages</em> uses a convolutional autoencoder with PyTorch and compares the latent representations with <a href=\"https://github.com/justinshenk/closely\" rel=\"nofollow\">closely</a> :triangular_ruler:.</p>\n<h4>Dependencies</h4>\n<p><em>simages</em> depends on\nthe following packages:</p>\n<ul>\n<li><a href=\"https://github.com/justinshenk/closely\" rel=\"nofollow\">closely</a></li>\n<li><a href=\"https://pytorch.org\" rel=\"nofollow\">torch</a></li>\n<li><a href=\"https://pytorch.org\" rel=\"nofollow\">torchvision</a></li>\n<li>scikit-learn</li>\n<li>matplotlib</li>\n</ul>\n<p>Optional dependencies, installed with <code>pip install simages[all]</code> include:</p>\n<ul>\n<li>pymongodb</li>\n<li>fastcluster</li>\n<li>flask</li>\n<li>jinja</li>\n<li>dnspython</li>\n<li>python-magic</li>\n<li>termcolor</li>\n</ul>\n<h3>Cite</h3>\n<p>If you use simages, please cite it:</p>\n<pre><code>    @misc{justin_shenk_2019_3237830,\n      author       = {Justin Shenk},\n      title        = {justinshenk/simages: v19.0.1},\n      month        = jun,\n      year         = 2019,\n      doi          = {10.5281/zenodo.3237830},\n      url          = {https://doi.org/10.5281/zenodo.3237830}\n    }\n</code></pre>\n\n          </div>"}, "last_serial": 5415152, "releases": {"19.0.0.dev0": [{"comment_text": "", "digests": {"md5": "b29c32a4dd58fd1993ca7042007ffc6d", "sha256": "8d373cc3c6c26d88a5656e3cdf38a9ed7ac92e89ec3f0a3e6f987b9cb32230f6"}, "downloads": -1, "filename": "simages-19.0.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "b29c32a4dd58fd1993ca7042007ffc6d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 10379, "upload_time": "2019-05-28T17:15:23", "upload_time_iso_8601": "2019-05-28T17:15:23.392198Z", "url": "https://files.pythonhosted.org/packages/79/cc/91d0cb1c9dc2940dcc15806029b78051e6554dcba38ef30e844ccef61a8f/simages-19.0.0.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d509d08c9deb404b0d0548231eea716e", "sha256": "19e8ce464bfb40bc96748603c3db87ff779b5b322dfba418cca2137cbb725670"}, "downloads": -1, "filename": "simages-19.0.0.dev0.tar.gz", "has_sig": false, "md5_digest": "d509d08c9deb404b0d0548231eea716e", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 10296, "upload_time": "2019-05-28T17:15:25", "upload_time_iso_8601": "2019-05-28T17:15:25.478184Z", "url": "https://files.pythonhosted.org/packages/a3/ce/cd6aa784a1939cbe384f947c88d2888190d0d9f0fd087e2ab710d79df2ee/simages-19.0.0.dev0.tar.gz", "yanked": false}], "19.0.0.dev1": [{"comment_text": "", "digests": {"md5": "f542cf3ae1dfc5ad8ec476096ea5f2fb", "sha256": "2f58ccf61ac276e09ac9499784e5fcac8952d3a9ed6eec32ff1824e6f1c867ae"}, "downloads": -1, "filename": "simages-19.0.0.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "f542cf3ae1dfc5ad8ec476096ea5f2fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 12664, "upload_time": "2019-05-28T19:51:43", "upload_time_iso_8601": "2019-05-28T19:51:43.305666Z", "url": "https://files.pythonhosted.org/packages/9d/4a/f1405261dee60ac48a85ca9a07347e35c7b364d10aedcbfd5e998ffc606d/simages-19.0.0.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13dc5ae6db948cbb5df4a05369975aab", "sha256": "08f8e5e8a7052d47e2d6952595191e8a4bda9548a1c771b7c767626e2a0f626f"}, "downloads": -1, "filename": "simages-19.0.0.dev1.tar.gz", "has_sig": false, "md5_digest": "13dc5ae6db948cbb5df4a05369975aab", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 12894, "upload_time": "2019-05-28T19:51:44", "upload_time_iso_8601": "2019-05-28T19:51:44.908138Z", "url": "https://files.pythonhosted.org/packages/45/db/b71b848ada11d69066eb1aa3531648f31c0b3945f23a7e8600425a6e377c/simages-19.0.0.dev1.tar.gz", "yanked": false}], "19.0.0.dev2": [{"comment_text": "", "digests": {"md5": "dff8c6614a74b703e41eff8597fc6e97", "sha256": "31b6dd64a7ceba0448dd2f92237e54657e32ce07b6fadf11a1053bcd26748a2a"}, "downloads": -1, "filename": "simages-19.0.0.dev2-py3-none-any.whl", "has_sig": false, "md5_digest": "dff8c6614a74b703e41eff8597fc6e97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 13305, "upload_time": "2019-05-29T11:06:43", "upload_time_iso_8601": "2019-05-29T11:06:43.898235Z", "url": "https://files.pythonhosted.org/packages/80/e5/2b4579511385a6744820624b204e3db9a6200e5dee24715ee732ced8e89e/simages-19.0.0.dev2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d946e3081eb7efbd7f3105faad4747b3", "sha256": "7611ca1770418a0a46d61f4bf9599df6436372f4d4ba76931069e5425b6d5839"}, "downloads": -1, "filename": "simages-19.0.0.dev2.tar.gz", "has_sig": false, "md5_digest": "d946e3081eb7efbd7f3105faad4747b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 14103, "upload_time": "2019-05-29T11:06:45", "upload_time_iso_8601": "2019-05-29T11:06:45.575644Z", "url": "https://files.pythonhosted.org/packages/fe/91/7dbbbfd65cc60e9ff0508364bdaab023a2c8f5d728e45b83927499e22094/simages-19.0.0.dev2.tar.gz", "yanked": false}], "19.0.0.dev3": [{"comment_text": "", "digests": {"md5": "89a54a5d0ba7e3b663fdbbdda1d1e55b", "sha256": "9ea11d477f7567bcc2ca8f47b4377ec947621f7d3449da70d069e55808c1f696"}, "downloads": -1, "filename": "simages-19.0.0.dev3.tar.gz", "has_sig": false, "md5_digest": "89a54a5d0ba7e3b663fdbbdda1d1e55b", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 3802592, "upload_time": "2019-05-30T17:22:40", "upload_time_iso_8601": "2019-05-30T17:22:40.076540Z", "url": "https://files.pythonhosted.org/packages/ec/2c/0cf42e16829946392fa16e90af848946c3442b261d527062e4d343f2b415/simages-19.0.0.dev3.tar.gz", "yanked": false}], "19.0.1": [{"comment_text": "", "digests": {"md5": "d4437a5e2de2b9819209338bf2589d17", "sha256": "a499c80054b16c21d247ede3ff650a1fcb973f9851704e9d698ecff6c7e2cbe2"}, "downloads": -1, "filename": "simages-19.0.1.tar.gz", "has_sig": false, "md5_digest": "d4437a5e2de2b9819209338bf2589d17", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 3813201, "upload_time": "2019-06-03T11:21:55", "upload_time_iso_8601": "2019-06-03T11:21:55.278869Z", "url": "https://files.pythonhosted.org/packages/bf/fa/6b39094eaad7ab134ef097148fe94d8fc5b6a9b336fdc00821f28ac3f2c1/simages-19.0.1.tar.gz", "yanked": false}], "19.0.2": [{"comment_text": "", "digests": {"md5": "7762e4fec1ab165a061d390e759333d0", "sha256": "526d04b8d6495965f142f77bce80c11ba30c32289e2d3987efc0a1adf74065ed"}, "downloads": -1, "filename": "simages-19.0.2.tar.gz", "has_sig": false, "md5_digest": "7762e4fec1ab165a061d390e759333d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 3812673, "upload_time": "2019-06-09T17:53:13", "upload_time_iso_8601": "2019-06-09T17:53:13.157681Z", "url": "https://files.pythonhosted.org/packages/f3/92/c48244c64cb63e501d74b3c840b2fe484dd22afbc90b6817790aaf4c8c82/simages-19.0.2.tar.gz", "yanked": false}], "19.0.2.post0": [{"comment_text": "", "digests": {"md5": "b6078eeed2b3d67a14ce193215597065", "sha256": "9c54cde28f4544e7bb96e33cc0594938e4ceaf1ade957654169946889ab75846"}, "downloads": -1, "filename": "simages-19.0.2.post0-py3-none-any.whl", "has_sig": false, "md5_digest": "b6078eeed2b3d67a14ce193215597065", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 24048, "upload_time": "2019-06-17T14:55:03", "upload_time_iso_8601": "2019-06-17T14:55:03.000593Z", "url": "https://files.pythonhosted.org/packages/8d/d7/335a476c6673efd875ee51827609f43f5f4b66780d7774c6c7aa57e17051/simages-19.0.2.post0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be2c8ea4f5c40fec4a76b7cc5bd6b875", "sha256": "96af3b0b46726045ed34932b58b5b60ce3df2e4c4ea5422fd1623b5168cb63b0"}, "downloads": -1, "filename": "simages-19.0.2.post0.tar.gz", "has_sig": false, "md5_digest": "be2c8ea4f5c40fec4a76b7cc5bd6b875", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 11689323, "upload_time": "2019-06-17T14:55:15", "upload_time_iso_8601": "2019-06-17T14:55:15.210661Z", "url": "https://files.pythonhosted.org/packages/99/c1/859925aa5a3693ca79e9622f1ce7c373eea09c504545c828d5ca6226e5b5/simages-19.0.2.post0.tar.gz", "yanked": false}], "19.0.2.post1": [{"comment_text": "", "digests": {"md5": "97df955edc12c9b96001ea4e831afb5d", "sha256": "34da55f1528d02d3539e9084d0367f33e335068a9552cc89c92b49a19f13d73e"}, "downloads": -1, "filename": "simages-19.0.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "97df955edc12c9b96001ea4e831afb5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 24046, "upload_time": "2019-06-17T14:59:13", "upload_time_iso_8601": "2019-06-17T14:59:13.558370Z", "url": "https://files.pythonhosted.org/packages/09/f2/f0da30ba689f46e6a6a6d3a7957818717fddd6b9f6a1cd88b7fdfbae92c1/simages-19.0.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4463d3f6482291a0fdf8ca335d1f996", "sha256": "00ebca4b65e77b8b62507b166cba99c6dd51a38a5a0b6251d7fc8b7f2025239b"}, "downloads": -1, "filename": "simages-19.0.2.post1.tar.gz", "has_sig": false, "md5_digest": "e4463d3f6482291a0fdf8ca335d1f996", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 11689317, "upload_time": "2019-06-17T14:59:27", "upload_time_iso_8601": "2019-06-17T14:59:27.341753Z", "url": "https://files.pythonhosted.org/packages/c8/82/9b61c292ef5ff2f2bb53e64abdcdc456a54a291c0152fa8336f86ec88c9f/simages-19.0.2.post1.tar.gz", "yanked": false}], "19.0.3.dev0": [{"comment_text": "", "digests": {"md5": "7be1e95e4880be65217c4eff1b341f39", "sha256": "74bd0741c8131a5248dcb68275b750bdbc2b686dfc0e5ba0db0aefb372d9a49f"}, "downloads": -1, "filename": "simages-19.0.3.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "7be1e95e4880be65217c4eff1b341f39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 24011, "upload_time": "2019-06-18T13:13:00", "upload_time_iso_8601": "2019-06-18T13:13:00.745138Z", "url": "https://files.pythonhosted.org/packages/bc/91/67c1d79b8789dbe89d43c34797f24d34acf3e8c372663b05bdca7ef761e0/simages-19.0.3.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17ea0a8dccce56bffc4ba0a07a345e3b", "sha256": "066d44ad38eae844b402ccb83af2926f13ca01ef3ed8f6f905392e9491be6c52"}, "downloads": -1, "filename": "simages-19.0.3.dev0.tar.gz", "has_sig": false, "md5_digest": "17ea0a8dccce56bffc4ba0a07a345e3b", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 11689127, "upload_time": "2019-06-18T13:13:05", "upload_time_iso_8601": "2019-06-18T13:13:05.499715Z", "url": "https://files.pythonhosted.org/packages/b1/f9/e71c903d9fc75baba1f59dcdc98dfc502b98c0e3ed40c72a5cd955a3a682/simages-19.0.3.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97df955edc12c9b96001ea4e831afb5d", "sha256": "34da55f1528d02d3539e9084d0367f33e335068a9552cc89c92b49a19f13d73e"}, "downloads": -1, "filename": "simages-19.0.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "97df955edc12c9b96001ea4e831afb5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 24046, "upload_time": "2019-06-17T14:59:13", "upload_time_iso_8601": "2019-06-17T14:59:13.558370Z", "url": "https://files.pythonhosted.org/packages/09/f2/f0da30ba689f46e6a6a6d3a7957818717fddd6b9f6a1cd88b7fdfbae92c1/simages-19.0.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4463d3f6482291a0fdf8ca335d1f996", "sha256": "00ebca4b65e77b8b62507b166cba99c6dd51a38a5a0b6251d7fc8b7f2025239b"}, "downloads": -1, "filename": "simages-19.0.2.post1.tar.gz", "has_sig": false, "md5_digest": "e4463d3f6482291a0fdf8ca335d1f996", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 11689317, "upload_time": "2019-06-17T14:59:27", "upload_time_iso_8601": "2019-06-17T14:59:27.341753Z", "url": "https://files.pythonhosted.org/packages/c8/82/9b61c292ef5ff2f2bb53e64abdcdc456a54a291c0152fa8336f86ec88c9f/simages-19.0.2.post1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:20 2020"}