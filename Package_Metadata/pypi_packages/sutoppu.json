{"info": {"author": "u8slvn", "author_email": "u8slvn@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing"], "description": "# Sutoppu\n\n[![Pypi Version](https://img.shields.io/pypi/v/sutoppu.svg)](https://pypi.org/project/sutoppu/)\n[![Python Version](https://img.shields.io/pypi/pyversions/sutoppu)](https://pypi.org/project/sutoppu/)\n[![Build Status](https://travis-ci.org/u8slvn/sutoppu.svg?branch=master)](https://travis-ci.org/u8slvn/sutoppu)\n[![Coverage Status](https://coveralls.io/repos/github/u8slvn/sutoppu/badge.svg?branch=master)](https://coveralls.io/github/u8slvn/sutoppu?branch=master)\n[![Project license](https://img.shields.io/pypi/l/sutoppu)](https://pypi.org/project/sutoppu/)\n\n**Sutoppu** (\u30b9\u30c8\u30c3\u30d7 - Japanese from English *Stop*) is a simple python implementation of Specification pattern.\n\n## What is Specification Pattern?\n\nSee [Wikipedia](https://en.wikipedia.org/wiki/Specification_pattern).\n\n> In computer programming, the specification pattern is a particular software design pattern, whereby business rules can be recombined by chaining the business rules together using boolean logic. The pattern is frequently used in the context of domain-driven design.\n\nMore information: [Eric Evans and Martin Fowler article about Specifications](https://www.martinfowler.com/apsupp/spec.pdf)\n\n## Basic usage\n\n### Installation\n\n```sh\n$ pip install sutoppu\n```\n\n### Usage\n\n```python\nfrom sutoppu import Specification\n\n\nclass Fruit:\n    def __init__(self, color: str, sweet: bool, bitter: bool):\n        self.color = color\n        self.sweet = sweet\n        self.bitter = bitter\n\n\nclass FruitIsBitter(Specification):\n    description = 'The given fruit must be bitter.'\n\n    def is_satisfied_by(self, fruit: Fruit):\n        return fruit.bitter is True\n\n\nclass FruitIsSweet(Specification):\n    description = 'The given fruit must be sweet.'\n\n    def is_satisfied_by(self, fruit: Fruit):\n        return fruit.sweet is True\n\n\nclass FruitIsColored(Specification):\n    description = 'The given fruit must be {color}.'\n\n    def __init__(self, color):\n        super().__init__()\n        self.color = color\n        self.description = self.description.format(color=color)\n\n    def is_satisfied_by(self, fruit: Fruit):\n        return self.color == fruit.color\n```\n\n```python\n>>> lemon = Fruit(color='yellow', sweet=False, bitter=True)\n>>> is_a_lemon = FruitIsColored('yellow') & FruitIsBitter() & ~FruitIsSweet()\n>>> is_a_lemon.is_satisfied_by(lemon)\nTrue\n```\n\n### Operators\n\nAnd:\n\n```python\n>>> my_spec = SpecificationA() & SpecificationB()\n```\n\nOr:\n\n```python\n>>> my_spec = SpecificationA() | SpecificationB()\n```\n\nNot:\n\n```python\n>>> my_spec = ~SpecificationA()\n```\n\n### Lighter syntax\n\nIf you do not find the `is_satisfied_by` method very convenient you can also directly call the specification as below.\n\n```python\n>>> lemon = Fruit(color='yellow', sweet=False, bitter=True)\n>>> is_a_lime = FruitIsColored('green') & FruitIsBitter() & ~FruitIsSweet()\n>>> is_a_lime(lemon)\nFalse\n```\n\n### Error reporting\n\nIt can be difficult to know which specification failed in a complex rule. Sutoppu allows to list all the failed specifications by getting the `errors` attribute after use.\nThe `errors` attribute is reset each time the specification is used. For each failed specification, it returns a dict with the name of the specification class for key and the description provide in the class for value. In the case where the specification failed with a `not` condition, the description are prefixed with `Not ~`.\n\n```python\n>>> apple = Fruit(color='red', sweet=True, bitter=False)\n>>> is_a_lemon = FruitIsColored('yellow') & FruitIsBitter() & ~ FruitIsSweet()\n>>> is_a_lemon.is_satisfied_by(apple)\nFalse\n>>> is_a_lemon.errors\n{\n    'FruitIsColored': 'The given fruit must be yellow.',\n    'FruitIsBitter': 'The given fruit must be bitter.',\n    'FruitIsSweet': 'Not ~ The given fruit must be sweet.'\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/u8slvn/sutoppu/archive/0.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/u8slvn/sutoppu", "keywords": "specification,specification-patternDDD,domain-driven-designbusiness-rules,verification", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sutoppu", "package_url": "https://pypi.org/project/sutoppu/", "platform": "all", "project_url": "https://pypi.org/project/sutoppu/", "project_urls": {"Download": "https://github.com/u8slvn/sutoppu/archive/0.1.0.tar.gz", "Homepage": "https://github.com/u8slvn/sutoppu"}, "release_url": "https://pypi.org/project/sutoppu/0.1.0/", "requires_dist": ["pytest (>=5.0.1) ; extra == 'dev'", "pytest-cov (>=2.7.1) ; extra == 'dev'", "pytest-mock (>=1.10.4) ; extra == 'dev'", "coverage (>=4.5.3) ; extra == 'dev'", "flake8 (>=3.7.7) ; extra == 'dev'", "bandit (>=1.6.2) ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "A simple python implementation of Specification pattern.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sutoppu</h1>\n<p><a href=\"https://pypi.org/project/sutoppu/\" rel=\"nofollow\"><img alt=\"Pypi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ad987e109a776c9c4a9255f10af86b9ce2abc73/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7375746f7070752e737667\"></a>\n<a href=\"https://pypi.org/project/sutoppu/\" rel=\"nofollow\"><img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7380cf969b2202da65681e4e1c37aef29994aee0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7375746f707075\"></a>\n<a href=\"https://travis-ci.org/u8slvn/sutoppu\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b04feea7f73fc68883a3ce55ae0eab66a1808583/68747470733a2f2f7472617669732d63692e6f72672f7538736c766e2f7375746f7070752e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/u8slvn/sutoppu?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b38eb3a2745afa6ba188c47dc7b189acc1d901b8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7538736c766e2f7375746f7070752f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/sutoppu/\" rel=\"nofollow\"><img alt=\"Project license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1882bc45147cfb6c7042ac7fa01b21afa7aacd17/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7375746f707075\"></a></p>\n<p><strong>Sutoppu</strong> (\u30b9\u30c8\u30c3\u30d7 - Japanese from English <em>Stop</em>) is a simple python implementation of Specification pattern.</p>\n<h2>What is Specification Pattern?</h2>\n<p>See <a href=\"https://en.wikipedia.org/wiki/Specification_pattern\" rel=\"nofollow\">Wikipedia</a>.</p>\n<blockquote>\n<p>In computer programming, the specification pattern is a particular software design pattern, whereby business rules can be recombined by chaining the business rules together using boolean logic. The pattern is frequently used in the context of domain-driven design.</p>\n</blockquote>\n<p>More information: <a href=\"https://www.martinfowler.com/apsupp/spec.pdf\" rel=\"nofollow\">Eric Evans and Martin Fowler article about Specifications</a></p>\n<h2>Basic usage</h2>\n<h3>Installation</h3>\n<pre>$ pip install sutoppu\n</pre>\n<h3>Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sutoppu</span> <span class=\"kn\">import</span> <span class=\"n\">Specification</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Fruit</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sweet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">bitter</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">color</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sweet</span> <span class=\"o\">=</span> <span class=\"n\">sweet</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bitter</span> <span class=\"o\">=</span> <span class=\"n\">bitter</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FruitIsBitter</span><span class=\"p\">(</span><span class=\"n\">Specification</span><span class=\"p\">):</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'The given fruit must be bitter.'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_satisfied_by</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fruit</span><span class=\"p\">:</span> <span class=\"n\">Fruit</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">fruit</span><span class=\"o\">.</span><span class=\"n\">bitter</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FruitIsSweet</span><span class=\"p\">(</span><span class=\"n\">Specification</span><span class=\"p\">):</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'The given fruit must be sweet.'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_satisfied_by</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fruit</span><span class=\"p\">:</span> <span class=\"n\">Fruit</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">fruit</span><span class=\"o\">.</span><span class=\"n\">sweet</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FruitIsColored</span><span class=\"p\">(</span><span class=\"n\">Specification</span><span class=\"p\">):</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'The given fruit must be </span><span class=\"si\">{color}</span><span class=\"s1\">.'</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">color</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">color</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_satisfied_by</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fruit</span><span class=\"p\">:</span> <span class=\"n\">Fruit</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">fruit</span><span class=\"o\">.</span><span class=\"n\">color</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lemon</span> <span class=\"o\">=</span> <span class=\"n\">Fruit</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'yellow'</span><span class=\"p\">,</span> <span class=\"n\">sweet</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">bitter</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">is_a_lemon</span> <span class=\"o\">=</span> <span class=\"n\">FruitIsColored</span><span class=\"p\">(</span><span class=\"s1\">'yellow'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">FruitIsBitter</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">FruitIsSweet</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">is_a_lemon</span><span class=\"o\">.</span><span class=\"n\">is_satisfied_by</span><span class=\"p\">(</span><span class=\"n\">lemon</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<h3>Operators</h3>\n<p>And:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_spec</span> <span class=\"o\">=</span> <span class=\"n\">SpecificationA</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"n\">SpecificationB</span><span class=\"p\">()</span>\n</pre>\n<p>Or:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_spec</span> <span class=\"o\">=</span> <span class=\"n\">SpecificationA</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"n\">SpecificationB</span><span class=\"p\">()</span>\n</pre>\n<p>Not:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_spec</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">SpecificationA</span><span class=\"p\">()</span>\n</pre>\n<h3>Lighter syntax</h3>\n<p>If you do not find the <code>is_satisfied_by</code> method very convenient you can also directly call the specification as below.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lemon</span> <span class=\"o\">=</span> <span class=\"n\">Fruit</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'yellow'</span><span class=\"p\">,</span> <span class=\"n\">sweet</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">bitter</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">is_a_lime</span> <span class=\"o\">=</span> <span class=\"n\">FruitIsColored</span><span class=\"p\">(</span><span class=\"s1\">'green'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">FruitIsBitter</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">FruitIsSweet</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">is_a_lime</span><span class=\"p\">(</span><span class=\"n\">lemon</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<h3>Error reporting</h3>\n<p>It can be difficult to know which specification failed in a complex rule. Sutoppu allows to list all the failed specifications by getting the <code>errors</code> attribute after use.\nThe <code>errors</code> attribute is reset each time the specification is used. For each failed specification, it returns a dict with the name of the specification class for key and the description provide in the class for value. In the case where the specification failed with a <code>not</code> condition, the description are prefixed with <code>Not ~</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">apple</span> <span class=\"o\">=</span> <span class=\"n\">Fruit</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"n\">sweet</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bitter</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">is_a_lemon</span> <span class=\"o\">=</span> <span class=\"n\">FruitIsColored</span><span class=\"p\">(</span><span class=\"s1\">'yellow'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">FruitIsBitter</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span> <span class=\"n\">FruitIsSweet</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">is_a_lemon</span><span class=\"o\">.</span><span class=\"n\">is_satisfied_by</span><span class=\"p\">(</span><span class=\"n\">apple</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">is_a_lemon</span><span class=\"o\">.</span><span class=\"n\">errors</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'FruitIsColored'</span><span class=\"p\">:</span> <span class=\"s1\">'The given fruit must be yellow.'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'FruitIsBitter'</span><span class=\"p\">:</span> <span class=\"s1\">'The given fruit must be bitter.'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'FruitIsSweet'</span><span class=\"p\">:</span> <span class=\"s1\">'Not ~ The given fruit must be sweet.'</span>\n<span class=\"p\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 5636725, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f3ff204660e026c5f8426580ffd3b122", "sha256": "11b9b7b612e5eb5261a4f24cb6e88e82fa1c01dc8de42a542481d6d3953733ba"}, "downloads": -1, "filename": "sutoppu-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f3ff204660e026c5f8426580ffd3b122", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5072, "upload_time": "2019-08-05T22:24:16", "upload_time_iso_8601": "2019-08-05T22:24:16.029469Z", "url": "https://files.pythonhosted.org/packages/74/6e/fec2619b5cdda2a6c461a02ef1e1854be04f3c9363a8e0e17b5150e73936/sutoppu-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "885f8d5f3c7ea1ca10f9c7ba57389ced", "sha256": "2d5a6bf58abb85026a55640a64c8615b43694153f0e3717fc6d41422d9d233fa"}, "downloads": -1, "filename": "sutoppu-0.1.0.tar.gz", "has_sig": false, "md5_digest": "885f8d5f3c7ea1ca10f9c7ba57389ced", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5234, "upload_time": "2019-08-05T22:24:18", "upload_time_iso_8601": "2019-08-05T22:24:18.419844Z", "url": "https://files.pythonhosted.org/packages/5f/2f/33bdca1d1a41fa08cf93ac836730b3e404eaf027aa8080f17961c6c41c45/sutoppu-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f3ff204660e026c5f8426580ffd3b122", "sha256": "11b9b7b612e5eb5261a4f24cb6e88e82fa1c01dc8de42a542481d6d3953733ba"}, "downloads": -1, "filename": "sutoppu-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f3ff204660e026c5f8426580ffd3b122", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5072, "upload_time": "2019-08-05T22:24:16", "upload_time_iso_8601": "2019-08-05T22:24:16.029469Z", "url": "https://files.pythonhosted.org/packages/74/6e/fec2619b5cdda2a6c461a02ef1e1854be04f3c9363a8e0e17b5150e73936/sutoppu-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "885f8d5f3c7ea1ca10f9c7ba57389ced", "sha256": "2d5a6bf58abb85026a55640a64c8615b43694153f0e3717fc6d41422d9d233fa"}, "downloads": -1, "filename": "sutoppu-0.1.0.tar.gz", "has_sig": false, "md5_digest": "885f8d5f3c7ea1ca10f9c7ba57389ced", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5234, "upload_time": "2019-08-05T22:24:18", "upload_time_iso_8601": "2019-08-05T22:24:18.419844Z", "url": "https://files.pythonhosted.org/packages/5f/2f/33bdca1d1a41fa08cf93ac836730b3e404eaf027aa8080f17961c6c41c45/sutoppu-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:55 2020"}