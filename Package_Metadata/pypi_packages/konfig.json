{"info": {"author": "Tarek Ziade", "author_email": "tarek@mozilla.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Programming Language :: Python"], "description": "======\nKonfig\n======\n\nYet another configuration object. Compatible with the updated `configparser\n<https://pypi.python.org/pypi/configparser>`_.\n\n|travis| |master-coverage|\n\n\n.. |master-coverage| image::\n    https://coveralls.io/repos/mozilla-services/konfig/badge.svg?branch=master\n    :alt: Coverage\n    :target: https://coveralls.io/r/mozilla-services/konfig\n\n.. |travis| image:: https://travis-ci.org/mozilla-services/konfig.svg?branch=master\n    :target: https://travis-ci.org/mozilla-services/konfig\n\n\nUsage\n=====\n\n.. code-block:: python\n\n   >>> from konfig import Config\n   >>> c = Config('myconfig.ini')\n\n\nThen read `configparser's documentation\n<http://docs.python.org/3/library/configparser.html>`_ for the APIs.\n\nKonfig as some extra APIs like **as_args()**, which will return\nthe config file as argparse compatible arguments::\n\n    >>> c.as_args()\n    ['--other-stuff', '10', '--httpd', '--statsd-endpoint', 'http://ok']\n\n\nFor automatic filtering, you can also pass an argparse parser object\nto **scan_args()**. I will iterate over the arguments you've defined in the\nparser and look for them in the config file, then return a list of args\nlike **as_args()**. You can then use this list directly\nwith **parser.parse_args()** - or complete it with sys.argv or whatever.\n\n    >>> import argparse\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--log-level', dest='loglevel')\n    >>> parser.add_argument('--log-output', dest='logoutput')\n    >>> parser.add_argument('--daemon', dest='daemonize', action='store_true')\n\n    >>> config = Config('myconfig.ini')\n    >>> args_from_config = config.scan_args(parser)\n\n    >>> parser.parse_args(args=sys.argv[1:]+args_from_config)\n\n\nSyntax Definition\n=================\n\nThe configuration file is a ini-based file. (See\nhttp://en.wikipedia.org/wiki/INI_file for more details.) Variables name can be\nassigned values, and grouped into sections. A line that starts with \"#\" is\ncommented out. Empty lines are also removed.\n\nExample:\n\n.. code-block:: ini\n\n  [section1]\n  # comment\n  name = value\n  name2 = \"other value\"\n\n  [section2]\n  foo = bar\n\nIni readers in Python, PHP and other languages understand this syntax.\nAlthough, there are subtle differences in the way they interpret values and in\nparticular if/how they convert them.\n\nValues conversion\n=================\n\nHere are a set of rules for converting values:\n\n- If value is quoted with \" chars, it's a string. This notation is useful to\n  include \"=\" characters in the value. In case the value contains a \" character,\n  it must be escaped with a \"\\\" character.\n\n- When the value is composed of digits and optionally prefixed by \"-\", it's\n  tentatively converted to an integer or a long depending on the language. If the\n  number exceeds the range available in the language, it's left as a string.\n\n- If the value is \"true\" or \"false\", it's converted to a boolean, or 0 and 1\n  when the language does not have a boolean type.\n\n- A value can be an environment variable : \"${VAR}\" is replaced by the value of\n  VAR if found in the environment. If the variable is not found, an error must be\n  raised.\n\n- A value can contains multiple lines. When read, lines are converted into a\n  sequence of values. Each new line for a multiple lines value must start with a\n  least one space or tab character.\n\nExamples:\n\n.. code-block:: ini\n\n  [section1]\n  # comment\n  a_flag = True\n  a_number = 1\n  a_string = \"other=value\"\n  another_string = other value\n  a_list = one\n           two\n           three\n  user = ${USERNAME}\n\n\nExtending a file\n================\n\nAn INI file can extend another file. For this, a \"DEFAULT\" section must contain\nan \"extends\" variable that can point to one or several INI files which will be\nmerged to the current file by adding new sections and values.\n\nIf the file pointed in \"extends\" contains section/variable names that already\nexist in the original file, they will not override existing ones.\n\nHere's an example: you have a public config file and want to keep some database\npasswords private. You can have those password in a separate file.\n\npublic.ini:\n\n.. code-block:: ini\n\n  [database]\n  user = tarek\n  password = PUBLIC\n\n  [section2]\n  foo = baz\n  bas = bar\n\n\nAnd then in private.ini:\n\n.. code-block:: ini\n\n  [DEFAULT]\n  extends = public.ini\n\n  [database]\n  password = secret\n\nNow if you use *private.ini* you will get:\n\n.. code-block:: ini\n\n  [database]\n  user = tarek\n  password = secret\n\n  [section2]\n  foo = baz\n  bas = bar\n\n\n\nTo point several files, the multi-line notation can be used:\n\n.. code-block:: ini\n\n  [DEFAULT]\n  extends = public1.ini\n            public2.ini\n\n\nWhen several files are provided, they are processed sequentially. So if the\nfirst one has a value that is also present in the second, the second one will\nbe ignored. This means that the configuration goes from the most specialized to\nthe most common.\n\nOverride mode\n=============\n\nIf you want to extend a file and have existing values overridden,\nyou can use \"overrides\" instead of \"extends\".\n\nHere's an example.  file2.ini:\n\n.. code-block:: ini\n\n  [section1]\n  name2 = \"other value\"\n\n  [section2]\n  foo = baz\n  bas = bar\n\n\nfile1.ini:\n\n.. code-block:: ini\n\n  [DEFAULT]\n  overrides = file2.ini\n\n  [section2]\n  foo = bar\n\n\nResult if you use *file1.ini*:\n\n.. code-block:: ini\n\n  [section1]\n  name2 = \"other value\"\n\n  [section2]\n  foo = baz\n  bas = bar\n\nIn *section2*, notice that *foo* is now *baz*.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mozilla-services/konfig", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "konfig", "package_url": "https://pypi.org/project/konfig/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/konfig/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mozilla-services/konfig"}, "release_url": "https://pypi.org/project/konfig/1.1/", "requires_dist": null, "requires_python": null, "summary": "Yet Another Config Parser.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Yet another configuration object. Compatible with the updated <a href=\"https://pypi.python.org/pypi/configparser\" rel=\"nofollow\">configparser</a>.</p>\n<p><a href=\"https://travis-ci.org/mozilla-services/konfig\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/978655cd6011f5aaa40e996dc4f0c175485f434a/68747470733a2f2f7472617669732d63692e6f72672f6d6f7a696c6c612d73657276696365732f6b6f6e6669672e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/mozilla-services/konfig\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86c7ab1503b37e0374c2d4e36b511a9e3a795383/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d6f7a696c6c612d73657276696365732f6b6f6e6669672f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">konfig</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"s1\">'myconfig.ini'</span><span class=\"p\">)</span>\n</pre>\n<p>Then read <a href=\"http://docs.python.org/3/library/configparser.html\" rel=\"nofollow\">configparser\u2019s documentation</a> for the APIs.</p>\n<p>Konfig as some extra APIs like <strong>as_args()</strong>, which will return\nthe config file as argparse compatible arguments:</p>\n<pre>&gt;&gt;&gt; c.as_args()\n['--other-stuff', '10', '--httpd', '--statsd-endpoint', 'http://ok']\n</pre>\n<p>For automatic filtering, you can also pass an argparse parser object\nto <strong>scan_args()</strong>. I will iterate over the arguments you\u2019ve defined in the\nparser and look for them in the config file, then return a list of args\nlike <strong>as_args()</strong>. You can then use this list directly\nwith <strong>parser.parse_args()</strong> - or complete it with sys.argv or whatever.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import argparse\n&gt;&gt;&gt; parser = argparse.ArgumentParser()\n&gt;&gt;&gt; parser.add_argument('--log-level', dest='loglevel')\n&gt;&gt;&gt; parser.add_argument('--log-output', dest='logoutput')\n&gt;&gt;&gt; parser.add_argument('--daemon', dest='daemonize', action='store_true')\n</pre>\n<pre>&gt;&gt;&gt; config = Config('myconfig.ini')\n&gt;&gt;&gt; args_from_config = config.scan_args(parser)\n</pre>\n<pre>&gt;&gt;&gt; parser.parse_args(args=sys.argv[1:]+args_from_config)\n</pre>\n</blockquote>\n</div>\n<div id=\"syntax-definition\">\n<h2>Syntax Definition</h2>\n<p>The configuration file is a ini-based file. (See\n<a href=\"http://en.wikipedia.org/wiki/INI_file\" rel=\"nofollow\">http://en.wikipedia.org/wiki/INI_file</a> for more details.) Variables name can be\nassigned values, and grouped into sections. A line that starts with \u201c#\u201d is\ncommented out. Empty lines are also removed.</p>\n<p>Example:</p>\n<pre><span class=\"k\">[section1]</span>\n<span class=\"c1\"># comment</span>\n<span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"s\">value</span>\n<span class=\"na\">name2</span> <span class=\"o\">=</span> <span class=\"s\">\"other value\"</span>\n\n<span class=\"k\">[section2]</span>\n<span class=\"na\">foo</span> <span class=\"o\">=</span> <span class=\"s\">bar</span>\n</pre>\n<p>Ini readers in Python, PHP and other languages understand this syntax.\nAlthough, there are subtle differences in the way they interpret values and in\nparticular if/how they convert them.</p>\n</div>\n<div id=\"values-conversion\">\n<h2>Values conversion</h2>\n<p>Here are a set of rules for converting values:</p>\n<ul>\n<li>If value is quoted with \u201d chars, it\u2019s a string. This notation is useful to\ninclude \u201c=\u201d characters in the value. In case the value contains a \u201d character,\nit must be escaped with a \u201c\u201d character.</li>\n<li>When the value is composed of digits and optionally prefixed by \u201c-\u201c, it\u2019s\ntentatively converted to an integer or a long depending on the language. If the\nnumber exceeds the range available in the language, it\u2019s left as a string.</li>\n<li>If the value is \u201ctrue\u201d or \u201cfalse\u201d, it\u2019s converted to a boolean, or 0 and 1\nwhen the language does not have a boolean type.</li>\n<li>A value can be an environment variable : \u201c${VAR}\u201d is replaced by the value of\nVAR if found in the environment. If the variable is not found, an error must be\nraised.</li>\n<li>A value can contains multiple lines. When read, lines are converted into a\nsequence of values. Each new line for a multiple lines value must start with a\nleast one space or tab character.</li>\n</ul>\n<p>Examples:</p>\n<pre><span class=\"k\">[section1]</span>\n<span class=\"c1\"># comment</span>\n<span class=\"na\">a_flag</span> <span class=\"o\">=</span> <span class=\"s\">True</span>\n<span class=\"na\">a_number</span> <span class=\"o\">=</span> <span class=\"s\">1</span>\n<span class=\"na\">a_string</span> <span class=\"o\">=</span> <span class=\"s\">\"other=value\"</span>\n<span class=\"na\">another_string</span> <span class=\"o\">=</span> <span class=\"s\">other value</span>\n<span class=\"na\">a_list</span> <span class=\"o\">=</span> <span class=\"s\">one\n         two\n         three</span>\n<span class=\"na\">user</span> <span class=\"o\">=</span> <span class=\"s\">${USERNAME}</span>\n</pre>\n</div>\n<div id=\"extending-a-file\">\n<h2>Extending a file</h2>\n<p>An INI file can extend another file. For this, a \u201cDEFAULT\u201d section must contain\nan \u201cextends\u201d variable that can point to one or several INI files which will be\nmerged to the current file by adding new sections and values.</p>\n<p>If the file pointed in \u201cextends\u201d contains section/variable names that already\nexist in the original file, they will not override existing ones.</p>\n<p>Here\u2019s an example: you have a public config file and want to keep some database\npasswords private. You can have those password in a separate file.</p>\n<p>public.ini:</p>\n<pre><span class=\"k\">[database]</span>\n<span class=\"na\">user</span> <span class=\"o\">=</span> <span class=\"s\">tarek</span>\n<span class=\"na\">password</span> <span class=\"o\">=</span> <span class=\"s\">PUBLIC</span>\n\n<span class=\"k\">[section2]</span>\n<span class=\"na\">foo</span> <span class=\"o\">=</span> <span class=\"s\">baz</span>\n<span class=\"na\">bas</span> <span class=\"o\">=</span> <span class=\"s\">bar</span>\n</pre>\n<p>And then in private.ini:</p>\n<pre><span class=\"k\">[DEFAULT]</span>\n<span class=\"na\">extends</span> <span class=\"o\">=</span> <span class=\"s\">public.ini</span>\n\n<span class=\"k\">[database]</span>\n<span class=\"na\">password</span> <span class=\"o\">=</span> <span class=\"s\">secret</span>\n</pre>\n<p>Now if you use <em>private.ini</em> you will get:</p>\n<pre><span class=\"k\">[database]</span>\n<span class=\"na\">user</span> <span class=\"o\">=</span> <span class=\"s\">tarek</span>\n<span class=\"na\">password</span> <span class=\"o\">=</span> <span class=\"s\">secret</span>\n\n<span class=\"k\">[section2]</span>\n<span class=\"na\">foo</span> <span class=\"o\">=</span> <span class=\"s\">baz</span>\n<span class=\"na\">bas</span> <span class=\"o\">=</span> <span class=\"s\">bar</span>\n</pre>\n<p>To point several files, the multi-line notation can be used:</p>\n<pre><span class=\"k\">[DEFAULT]</span>\n<span class=\"na\">extends</span> <span class=\"o\">=</span> <span class=\"s\">public1.ini\n          public2.ini</span>\n</pre>\n<p>When several files are provided, they are processed sequentially. So if the\nfirst one has a value that is also present in the second, the second one will\nbe ignored. This means that the configuration goes from the most specialized to\nthe most common.</p>\n</div>\n<div id=\"override-mode\">\n<h2>Override mode</h2>\n<p>If you want to extend a file and have existing values overridden,\nyou can use \u201coverrides\u201d instead of \u201cextends\u201d.</p>\n<p>Here\u2019s an example.  file2.ini:</p>\n<pre><span class=\"k\">[section1]</span>\n<span class=\"na\">name2</span> <span class=\"o\">=</span> <span class=\"s\">\"other value\"</span>\n\n<span class=\"k\">[section2]</span>\n<span class=\"na\">foo</span> <span class=\"o\">=</span> <span class=\"s\">baz</span>\n<span class=\"na\">bas</span> <span class=\"o\">=</span> <span class=\"s\">bar</span>\n</pre>\n<p>file1.ini:</p>\n<pre><span class=\"k\">[DEFAULT]</span>\n<span class=\"na\">overrides</span> <span class=\"o\">=</span> <span class=\"s\">file2.ini</span>\n\n<span class=\"k\">[section2]</span>\n<span class=\"na\">foo</span> <span class=\"o\">=</span> <span class=\"s\">bar</span>\n</pre>\n<p>Result if you use <em>file1.ini</em>:</p>\n<pre><span class=\"k\">[section1]</span>\n<span class=\"na\">name2</span> <span class=\"o\">=</span> <span class=\"s\">\"other value\"</span>\n\n<span class=\"k\">[section2]</span>\n<span class=\"na\">foo</span> <span class=\"o\">=</span> <span class=\"s\">baz</span>\n<span class=\"na\">bas</span> <span class=\"o\">=</span> <span class=\"s\">bar</span>\n</pre>\n<p>In <em>section2</em>, notice that <em>foo</em> is now <em>baz</em>.</p>\n</div>\n\n          </div>"}, "last_serial": 2552137, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "67e8ac0849f667e3ceeab27c6ae02b17", "sha256": "e073da2f7e1062f6839d58377145a5bce82ed803a3e5582c47deab1c249667fd"}, "downloads": -1, "filename": "konfig-0.1.tar.gz", "has_sig": false, "md5_digest": "67e8ac0849f667e3ceeab27c6ae02b17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5780, "upload_time": "2013-02-28T15:51:19", "upload_time_iso_8601": "2013-02-28T15:51:19.023738Z", "url": "https://files.pythonhosted.org/packages/8b/98/5a41e639353037d1f6f97f1b4650123045dda58c850e2ac2bd44a70ce020/konfig-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "01fbedf1a2a413541b269f4534d42714", "sha256": "6f0d66c1c7809d1583edf80db8cdbf9c13b6934758b190716195536364a1609a"}, "downloads": -1, "filename": "konfig-0.2.tar.gz", "has_sig": false, "md5_digest": "01fbedf1a2a413541b269f4534d42714", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6583, "upload_time": "2013-03-07T12:32:46", "upload_time_iso_8601": "2013-03-07T12:32:46.999838Z", "url": "https://files.pythonhosted.org/packages/cf/1b/c5f847c813caeba7b07cac60bf3c583d25a19bfcd78feaf0d73375683874/konfig-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "cdba9f27a231894ec9a74c7ad3d0b629", "sha256": "ff951daddb4a0484c0cf16f7a6900b56c63bbd3d38961f55f66bf7ae23fb230a"}, "downloads": -1, "filename": "konfig-0.3.tar.gz", "has_sig": false, "md5_digest": "cdba9f27a231894ec9a74c7ad3d0b629", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6645, "upload_time": "2013-05-02T15:46:19", "upload_time_iso_8601": "2013-05-02T15:46:19.965716Z", "url": "https://files.pythonhosted.org/packages/f5/c3/47e15970d799e344570e9605e5a1cc85c818ae40585e447631d64f4e8d8a/konfig-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "e3a836f99641f5688b23d60849741ce9", "sha256": "31eff05cf493273d2b7a941a9b7bd96fdc1070ed3fb06f76329bd37236abbfcd"}, "downloads": -1, "filename": "konfig-0.4.tar.gz", "has_sig": false, "md5_digest": "e3a836f99641f5688b23d60849741ce9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6688, "upload_time": "2013-05-02T16:11:42", "upload_time_iso_8601": "2013-05-02T16:11:42.897668Z", "url": "https://files.pythonhosted.org/packages/00/16/6e820bda52fee3e22a6080d9ecac5e0693b4c1c42e11a4422f0b8b25b59b/konfig-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "250eb2df4c355bd8d794be8a1eb14dff", "sha256": "8addafbd9589e01d00705b6dd056e9609c1ac0b9b14fa685284b383dbd6424cf"}, "downloads": -1, "filename": "konfig-0.5.tar.gz", "has_sig": false, "md5_digest": "250eb2df4c355bd8d794be8a1eb14dff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6928, "upload_time": "2013-05-23T11:40:27", "upload_time_iso_8601": "2013-05-23T11:40:27.636352Z", "url": "https://files.pythonhosted.org/packages/c6/22/845d2ea03a5b049774d98437e0a31fd5a510cc73f5fa84b860c3daad3f55/konfig-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "3df992dadbbabb3407da0ca2bf10d0f9", "sha256": "35c9840b23092e20df75938e4be35b97cba6babf9d62edd83fdb11784cd2993d"}, "downloads": -1, "filename": "konfig-0.6.tar.gz", "has_sig": false, "md5_digest": "3df992dadbbabb3407da0ca2bf10d0f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8677, "upload_time": "2013-06-19T11:37:24", "upload_time_iso_8601": "2013-06-19T11:37:24.538527Z", "url": "https://files.pythonhosted.org/packages/23/6d/ae187b26b7f9847e3a9d00775b1d7f07913562031dca3ce789aa8ca4dad5/konfig-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "17730516792c79c626fbbbeff25653e1", "sha256": "f1127023d5a7f54dc4885c3a8728d4bb9a1df079676a5cef0a79d104205ce42b"}, "downloads": -1, "filename": "konfig-0.7.tar.gz", "has_sig": false, "md5_digest": "17730516792c79c626fbbbeff25653e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9388, "upload_time": "2013-07-16T13:48:47", "upload_time_iso_8601": "2013-07-16T13:48:47.955915Z", "url": "https://files.pythonhosted.org/packages/83/cf/e48d0b6f799117cde449c2bcb1ec4bc94ef63b3360fa96543079cf37767f/konfig-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "7bbfa45fb5f084d303745b63551a6db6", "sha256": "9a0157342c1b69004aeeec7bce2b042f4e640e1b456ceb38393697882526a38e"}, "downloads": -1, "filename": "konfig-0.8.tar.gz", "has_sig": false, "md5_digest": "7bbfa45fb5f084d303745b63551a6db6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9476, "upload_time": "2013-07-29T11:10:51", "upload_time_iso_8601": "2013-07-29T11:10:51.880612Z", "url": "https://files.pythonhosted.org/packages/06/30/1e25e90839f763fff18d57f2776e691e9b9a20add4eb74b101ed0834d840/konfig-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "dabc925653161ffaa8bf477488dc6b3f", "sha256": "3e4049faeaf7d980f527486d45cbcf35cd0c98c0d6e5f76100668bca71348241"}, "downloads": -1, "filename": "konfig-0.9.tar.gz", "has_sig": false, "md5_digest": "dabc925653161ffaa8bf477488dc6b3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8813, "upload_time": "2014-04-28T09:38:32", "upload_time_iso_8601": "2014-04-28T09:38:32.114723Z", "url": "https://files.pythonhosted.org/packages/90/73/54c97a09b43917870beda7fb058e2a5ee3fb734fd824de1c16d195e8ed8f/konfig-0.9.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "94f358e00b2dd7557bdb6922df6030ab", "sha256": "02394f5ecf6177ae66e2c92a5fa4b487a93fcee9490008fb12a7746f7f5f5b50"}, "downloads": -1, "filename": "konfig-1.0.tar.gz", "has_sig": false, "md5_digest": "94f358e00b2dd7557bdb6922df6030ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8891, "upload_time": "2017-01-03T16:01:27", "upload_time_iso_8601": "2017-01-03T16:01:27.017051Z", "url": "https://files.pythonhosted.org/packages/e8/da/bf5b03ff37add74396e1d6b80b1b046ab76ee88f5377bcc56c00a702a865/konfig-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "368e7c217d31de6c5918c740da6e8dfb", "sha256": "7aa4c6463d6c13f4c98c02a998cbef4729da9ad69b676627acc8d3b3efb02b57"}, "downloads": -1, "filename": "konfig-1.1.tar.gz", "has_sig": false, "md5_digest": "368e7c217d31de6c5918c740da6e8dfb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9043, "upload_time": "2017-01-03T19:08:35", "upload_time_iso_8601": "2017-01-03T19:08:35.574851Z", "url": "https://files.pythonhosted.org/packages/3d/0c/2d61f29390063d9aabd20f1859b846faeb9e82711aae1ad92c5663264b00/konfig-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "368e7c217d31de6c5918c740da6e8dfb", "sha256": "7aa4c6463d6c13f4c98c02a998cbef4729da9ad69b676627acc8d3b3efb02b57"}, "downloads": -1, "filename": "konfig-1.1.tar.gz", "has_sig": false, "md5_digest": "368e7c217d31de6c5918c740da6e8dfb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9043, "upload_time": "2017-01-03T19:08:35", "upload_time_iso_8601": "2017-01-03T19:08:35.574851Z", "url": "https://files.pythonhosted.org/packages/3d/0c/2d61f29390063d9aabd20f1859b846faeb9e82711aae1ad92c5663264b00/konfig-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:01 2020"}