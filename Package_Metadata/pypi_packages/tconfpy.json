{"info": {"author": "Tim Daneliuk", "author_email": "tconfpy@tundraware.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable"], "description": "'tconfpy' is an advanced configuration file parser and validator for\r\nPython programs.  By using 'tconfpy', Python programmers can provide\r\ntheir users with an external configuration file for setting program\r\noptions, defining defaults, and so on.  'tconfpy' offloads the\r\nresponsibility for parsing and validating a configuration file from\r\nthe main application. The Python programmer need only deal\r\nwith the results and any errors or warnings generated during the\r\nparsing process.\r\n\r\n'tconfpy' recognizes a rich configuration language and provides a\r\nnumber of sophisticated programming features including:\r\n\r\n    - The ability to breakup large configurations into smaller pieces\r\n      via the '.include' directive.\r\n\r\n    - Support for string substitution and concatenation throughout the\r\n      configuration file via string variables.  Variables may be\r\n      locally declared, a reference to a symbol already in the\r\n      symbol table, or a reference to an environment variable.\r\n\r\n    - A complete set of conditional directives for selective\r\n      processing of configuration options. Both existential (\"If\r\n      variable exists ...\") and comparison (\"if string equals/does not\r\n      equal string ...\") forms are provided, as is an '.else'\r\n      directive.\r\n\r\n    - The ability to instantiate program options prior to reading a\r\n      configuration file and make them mandatory by declaring those\r\n      options as Read-Only.\r\n\r\n    - Optional type validation to ensure that a user enters a value\r\n      appropriate for boolean, integer, floating point, string, or\r\n      complex data.\r\n\r\n    - Optional value validation to ensure that a configuration option\r\n      is either within a specified range or one of an enumerated set\r\n      of possible values.  For configuration options which are string\r\n      types, 'tconfpy', can optionally specify min/max string lengths\r\n      and enumerate a set of legitimate regular expressions that the\r\n      string must match.\r\n\r\n    - The ability to define an arbitrary number of lexical namespaces.\r\n\r\n    - The ability to use the various features of 'tconfpy' as a pre-\r\n      processor for any other text (including source code for other\r\n      programming languages and Python itself) via the '.literal'\r\n      directive.\r\n\r\n    - The ability to \"template\" classes of variables, thereby predefining\r\n      the type and value restrictions for such variables.  This makes\r\n      'tconfpy' useful as a building block for data validation tools.\r\n\r\n    - An optional debug capability which returns detailed information\r\n      about each line parsed.\r\n\r\n    - Includes a test driver program for learning how to program with\r\n      'tconfpy' and for debugging and testing your own configuration\r\n      files.\r\n\r\n    - Comes with approximately 40 pages of documentation including a\r\n      Programmer's API Reference and a User's Guide to the 'tconfpy'\r\n      configuration language.  Documentation is provided in several\r\n      formats including Unix 'man', Plain Text, html, pdf, and\r\n      Postscript.\r\n\r\n'tconfpy' is a Pure Python module and is platform-independent.\r\nIt should work identically on any platform on which Python runs.", "description_content_type": null, "docs_url": null, "download_url": "http://www.tundraware.com/Software/tconfpy", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.tundraware.com/Software/tconfpy", "keywords": "Parse Configuration Language .ini .rc", "license": "Free for individuals,  Small fee for commercial use.", "maintainer": "Tim Daneliuk", "maintainer_email": "tconfpy@tundraware.com", "name": "tconfpy", "package_url": "https://pypi.org/project/tconfpy/", "platform": "All", "project_url": "https://pypi.org/project/tconfpy/", "project_urls": {"Download": "http://www.tundraware.com/Software/tconfpy", "Homepage": "http://www.tundraware.com/Software/tconfpy"}, "release_url": "https://pypi.org/project/tconfpy/2.112/", "requires_dist": null, "requires_python": null, "summary": "Advanced Configuration File Parser", "version": "2.112", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>\u2018tconfpy\u2019 is an advanced configuration file parser and validator for\nPython programs.  By using \u2018tconfpy\u2019, Python programmers can provide\ntheir users with an external configuration file for setting program\noptions, defining defaults, and so on.  \u2018tconfpy\u2019 offloads the\nresponsibility for parsing and validating a configuration file from\nthe main application. The Python programmer need only deal\nwith the results and any errors or warnings generated during the\nparsing process.</p>\n<p>\u2018tconfpy\u2019 recognizes a rich configuration language and provides a\nnumber of sophisticated programming features including:</p>\n<blockquote>\n<ul>\n<li>The ability to breakup large configurations into smaller pieces\nvia the \u2018.include\u2019 directive.</li>\n<li>Support for string substitution and concatenation throughout the\nconfiguration file via string variables.  Variables may be\nlocally declared, a reference to a symbol already in the\nsymbol table, or a reference to an environment variable.</li>\n<li>A complete set of conditional directives for selective\nprocessing of configuration options. Both existential (\u201cIf\nvariable exists \u2026\u201d) and comparison (\u201cif string equals/does not\nequal string \u2026\u201d) forms are provided, as is an \u2018.else\u2019\ndirective.</li>\n<li>The ability to instantiate program options prior to reading a\nconfiguration file and make them mandatory by declaring those\noptions as Read-Only.</li>\n<li>Optional type validation to ensure that a user enters a value\nappropriate for boolean, integer, floating point, string, or\ncomplex data.</li>\n<li>Optional value validation to ensure that a configuration option\nis either within a specified range or one of an enumerated set\nof possible values.  For configuration options which are string\ntypes, \u2018tconfpy\u2019, can optionally specify min/max string lengths\nand enumerate a set of legitimate regular expressions that the\nstring must match.</li>\n<li>The ability to define an arbitrary number of lexical namespaces.</li>\n<li>The ability to use the various features of \u2018tconfpy\u2019 as a pre-\nprocessor for any other text (including source code for other\nprogramming languages and Python itself) via the \u2018.literal\u2019\ndirective.</li>\n<li>The ability to \u201ctemplate\u201d classes of variables, thereby predefining\nthe type and value restrictions for such variables.  This makes\n\u2018tconfpy\u2019 useful as a building block for data validation tools.</li>\n<li>An optional debug capability which returns detailed information\nabout each line parsed.</li>\n<li>Includes a test driver program for learning how to program with\n\u2018tconfpy\u2019 and for debugging and testing your own configuration\nfiles.</li>\n<li>Comes with approximately 40 pages of documentation including a\nProgrammer\u2019s API Reference and a User\u2019s Guide to the \u2018tconfpy\u2019\nconfiguration language.  Documentation is provided in several\nformats including Unix \u2018man\u2019, Plain Text, html, pdf, and\nPostscript.</li>\n</ul>\n</blockquote>\n<p>\u2018tconfpy\u2019 is a Pure Python module and is platform-independent.\nIt should work identically on any platform on which Python runs.</p>\n\n          </div>"}, "last_serial": 4677, "releases": {"2.112": []}, "urls": [], "timestamp": "Fri May  8 02:57:19 2020"}