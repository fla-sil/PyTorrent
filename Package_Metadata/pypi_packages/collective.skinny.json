{"info": {"author": "Daniel Nouri", "author_email": "daniel.nouri@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Zope2", "Intended Audience :: Developers", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "collective.skinny\n        =================\n        \n        What is Skinny?\n        ---------------\n        \n        It's a package to help you get started quickly with developing a\n        seperate, public-facing skin for your Plone site.  It's been described\n        as being vastly easier than skinning Plone the conventional way.  But\n        it also has a few drawbacks; one being that you can't use it for\n        community sites where people other than your site editors log in and\n        modify content.\n        \n        If you're struggling with skinning your Plone site, do try it out and\n        give feedback.  The package comes with an example skin that shows you\n        how it works.\n        \n        Skinny has been discussed here:\n        \n        - http://danielnouri.org/blog/devel/zope/plone-3-theming-shanes-theme.html\n        - http://danielnouri.org/blog/devel/zope/plone-3-theming-for-mortals-part2.html\n        - http://danielnouri.org/blog/devel/zope/plone-3-theming-for-mortals.html\n        - http://weblion.psu.edu/news/viewlets-barriers-for-plone-newbies\n        - http://danielnouri.org/blog/devel/zope/plone-3-theming-for-you.html\n        \n        Usage\n        -----\n        \n        Look at the package's ``configure.zcml`` file for instructions on how\n        to activate the public skin to actually see it.\n        \n        This package is both an example and a library.  The easiest way to\n        start using it is to just copy the package and modify.\n        \n        The better way is to use it as a library and extend it with your own\n        package.  When doing so, you'll probably want to start out by\n        subclassing and overriding through ZCML the main view, which lives in\n        ``main.Main``.  Look at the ``configure.zcml`` file for pointers.\n        \n        To get started, look at the ``templates/`` directory.  The ``main.pt``\n        template is where everything is wired together.  You can render other\n        templates in the same directory by saying ``view/render_spam``, which\n        will render the ``spam.pt`` template.\n        \n        Writing views for content objects works similarly.  Look at\n        ``templates/content/document.pt`` to see how this can work.  This\n        template is found and used because it corresponds to the\n        ``portal_type`` of the content object you're displaying.  Thus, you\n        can make your own view for Smart Folders by putting a ``topic.pt``\n        template into the same directory, to give an example.  If no content\n        view is found, we'll try and display Plone's default view for you.\n        \n        All of Plone's views such as ``@@plone_context_state`` and friends are\n        available as usual in templates.  In addition, there's a handy\n        shortcut for looking up tools: Using ``view/portal_spam`` will return\n        the ``portal_spam`` tool from your Plone site.  (Try\n        ``view/portal_url`` for a working example ;-).\n        \n        Screenshot\n        ----------\n        \n        The example in this package looks something like this:\n        \n        .. image:: http://danielnouri.org/media/acme-website.png\n        \n        Feedback\n        --------\n        \n        We'd like to make this package work as easy as possible for you.  Let\n        us know if you have any comments or questions by using the `Plone User\n        Interface & Design`_ or the `Plone Add-on Product developers`_ list.\n        \n        .. _Plone User Interface & Design: http://plone.org/support/forums/ui\n        .. _Plone Add-on Product developers: http://plone.org/support/forums/addons\n        \n        Thanks\n        ======\n        \n        The following people helped with support, code, patches, etc:\n        \n          - Martin Aspeli\n          - Pelle Krogholt\n          - Shane Graber\n          - Sylvain Viollon\n        \n        Changelog\n        =========\n        \n        0.6 - 2010-11-20\n        ----------------\n        \n        - In ``collective.skinny.content.Content``, add\n          ``allow_fallback_to_plone_views`` variable to control whether or not\n          we should allow fallback to the default Plone views.  If you set\n          this to False, you can control the types that'll be visible in your\n          public skin.\n        \n        - In ``collective.skinny.main.Main``, render media content inline.\n        \n        - Add ``language`` method for getting current language's code to Main view.\n        \n        - Add ``instance`` in the call to ViewPageTemplateFile instance.  This\n          makes skinny incompatible with Zope 2.11 and lower, and fixes this\n          problem with more recent versions of Zope::\n        \n            Module collective.skinny.base, line 27, in render_template\n            TypeError: __call__() takes at least 2 arguments (1 given)\n        \n        0.5 - 2009-04-20\n        ----------------\n        \n        - Allow any non-HTML resources from Plone to be served.  The previous\n          \"no leak\" fix turned out to be a bit too strict, e.g. it wouldn't\n          allow images from content to be served in the public skin.\n        \n        - Patch site_properties to return the empty list for\n          ``typesUseViewActionInListings`` so that images and files don't get\n          a ``/view`` at the end when looking at the public skin, and thus can\n          be skinned with Skinny.  To make you own view for images, add a\n          ``templates/content/image.pt``.\n        \n        0.4 - 2009-04-16\n        ----------------\n        \n        - Don't leak Plone views like ``folder_listing`` anymore in the public\n          skin.\n        \n        0.3 - 2009-01-26\n        ----------------\n        \n        - No longer require ``python:`` statements for rendering parts; use\n          ``view/render_$part``.\n        \n        - Make portal tools available through ``view/portal_url`` and the\n          like.\n        \n        - Add a ``render_viewlet`` convenience function to ``base.py`` that\n          allows the reuse of Plone's viewlets in the public skin.  Look at\n          ``main.MyNavigation`` for a usage example.\n        \n        0.2 - 2009-01-22\n        ----------------\n        \n        - Instead of displaying the login form when an Unauthorized error is\n          raised, display a 404 page in the public skin.  This will make pages\n          like ``/edit`` invisible.\n        \n        0.1 - 2009-01-22\n        ----------------\n        \n        - Initial release", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/collective.skinny", "keywords": "plone zope public skin template theming", "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "collective.skinny", "package_url": "https://pypi.org/project/collective.skinny/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.skinny/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/collective.skinny"}, "release_url": "https://pypi.org/project/collective.skinny/0.6/", "requires_dist": null, "requires_python": null, "summary": "Plone theming for mortals: A simple example to get you started quickly with your own public skin", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            collective.skinny<br>        =================<br>        <br>        What is Skinny?<br>        ---------------<br>        <br>        It's a package to help you get started quickly with developing a<br>        seperate, public-facing skin for your Plone site.  It's been described<br>        as being vastly easier than skinning Plone the conventional way.  But<br>        it also has a few drawbacks; one being that you can't use it for<br>        community sites where people other than your site editors log in and<br>        modify content.<br>        <br>        If you're struggling with skinning your Plone site, do try it out and<br>        give feedback.  The package comes with an example skin that shows you<br>        how it works.<br>        <br>        Skinny has been discussed here:<br>        <br>        - http://danielnouri.org/blog/devel/zope/plone-3-theming-shanes-theme.html<br>        - http://danielnouri.org/blog/devel/zope/plone-3-theming-for-mortals-part2.html<br>        - http://danielnouri.org/blog/devel/zope/plone-3-theming-for-mortals.html<br>        - http://weblion.psu.edu/news/viewlets-barriers-for-plone-newbies<br>        - http://danielnouri.org/blog/devel/zope/plone-3-theming-for-you.html<br>        <br>        Usage<br>        -----<br>        <br>        Look at the package's ``configure.zcml`` file for instructions on how<br>        to activate the public skin to actually see it.<br>        <br>        This package is both an example and a library.  The easiest way to<br>        start using it is to just copy the package and modify.<br>        <br>        The better way is to use it as a library and extend it with your own<br>        package.  When doing so, you'll probably want to start out by<br>        subclassing and overriding through ZCML the main view, which lives in<br>        ``main.Main``.  Look at the ``configure.zcml`` file for pointers.<br>        <br>        To get started, look at the ``templates/`` directory.  The ``main.pt``<br>        template is where everything is wired together.  You can render other<br>        templates in the same directory by saying ``view/render_spam``, which<br>        will render the ``spam.pt`` template.<br>        <br>        Writing views for content objects works similarly.  Look at<br>        ``templates/content/document.pt`` to see how this can work.  This<br>        template is found and used because it corresponds to the<br>        ``portal_type`` of the content object you're displaying.  Thus, you<br>        can make your own view for Smart Folders by putting a ``topic.pt``<br>        template into the same directory, to give an example.  If no content<br>        view is found, we'll try and display Plone's default view for you.<br>        <br>        All of Plone's views such as ``@@plone_context_state`` and friends are<br>        available as usual in templates.  In addition, there's a handy<br>        shortcut for looking up tools: Using ``view/portal_spam`` will return<br>        the ``portal_spam`` tool from your Plone site.  (Try<br>        ``view/portal_url`` for a working example ;-).<br>        <br>        Screenshot<br>        ----------<br>        <br>        The example in this package looks something like this:<br>        <br>        .. image:: http://danielnouri.org/media/acme-website.png<br>        <br>        Feedback<br>        --------<br>        <br>        We'd like to make this package work as easy as possible for you.  Let<br>        us know if you have any comments or questions by using the `Plone User<br>        Interface &amp; Design`_ or the `Plone Add-on Product developers`_ list.<br>        <br>        .. _Plone User Interface &amp; Design: http://plone.org/support/forums/ui<br>        .. _Plone Add-on Product developers: http://plone.org/support/forums/addons<br>        <br>        Thanks<br>        ======<br>        <br>        The following people helped with support, code, patches, etc:<br>        <br>          - Martin Aspeli<br>          - Pelle Krogholt<br>          - Shane Graber<br>          - Sylvain Viollon<br>        <br>        Changelog<br>        =========<br>        <br>        0.6 - 2010-11-20<br>        ----------------<br>        <br>        - In ``collective.skinny.content.Content``, add<br>          ``allow_fallback_to_plone_views`` variable to control whether or not<br>          we should allow fallback to the default Plone views.  If you set<br>          this to False, you can control the types that'll be visible in your<br>          public skin.<br>        <br>        - In ``collective.skinny.main.Main``, render media content inline.<br>        <br>        - Add ``language`` method for getting current language's code to Main view.<br>        <br>        - Add ``instance`` in the call to ViewPageTemplateFile instance.  This<br>          makes skinny incompatible with Zope 2.11 and lower, and fixes this<br>          problem with more recent versions of Zope::<br>        <br>            Module collective.skinny.base, line 27, in render_template<br>            TypeError: __call__() takes at least 2 arguments (1 given)<br>        <br>        0.5 - 2009-04-20<br>        ----------------<br>        <br>        - Allow any non-HTML resources from Plone to be served.  The previous<br>          \"no leak\" fix turned out to be a bit too strict, e.g. it wouldn't<br>          allow images from content to be served in the public skin.<br>        <br>        - Patch site_properties to return the empty list for<br>          ``typesUseViewActionInListings`` so that images and files don't get<br>          a ``/view`` at the end when looking at the public skin, and thus can<br>          be skinned with Skinny.  To make you own view for images, add a<br>          ``templates/content/image.pt``.<br>        <br>        0.4 - 2009-04-16<br>        ----------------<br>        <br>        - Don't leak Plone views like ``folder_listing`` anymore in the public<br>          skin.<br>        <br>        0.3 - 2009-01-26<br>        ----------------<br>        <br>        - No longer require ``python:`` statements for rendering parts; use<br>          ``view/render_$part``.<br>        <br>        - Make portal tools available through ``view/portal_url`` and the<br>          like.<br>        <br>        - Add a ``render_viewlet`` convenience function to ``base.py`` that<br>          allows the reuse of Plone's viewlets in the public skin.  Look at<br>          ``main.MyNavigation`` for a usage example.<br>        <br>        0.2 - 2009-01-22<br>        ----------------<br>        <br>        - Instead of displaying the login form when an Unauthorized error is<br>          raised, display a 404 page in the public skin.  This will make pages<br>          like ``/edit`` invisible.<br>        <br>        0.1 - 2009-01-22<br>        ----------------<br>        <br>        - Initial release\n          </div>"}, "last_serial": 788208, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "999d4bc8f9ffb779e7dff641151da4ce", "sha256": "4334c6d8f1171270f12d40ec8fe0bb1406a00407e975052777cecf33d177e08c"}, "downloads": -1, "filename": "collective.skinny-0.1.tar.gz", "has_sig": false, "md5_digest": "999d4bc8f9ffb779e7dff641151da4ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5219, "upload_time": "2009-01-22T01:02:10", "upload_time_iso_8601": "2009-01-22T01:02:10Z", "url": "https://files.pythonhosted.org/packages/cc/5c/fc2ec3fd76f64430dd733a0588db4b805f0345e13d525f4c6d6fe26e4e31/collective.skinny-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d5db64c572331e16f3e0b9426e607f25", "sha256": "16cb9181416498f66883f6d26ff534226b6c04b03a9195512bbdc4f12737fb0f"}, "downloads": -1, "filename": "collective.skinny-0.2.tar.gz", "has_sig": false, "md5_digest": "d5db64c572331e16f3e0b9426e607f25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6038, "upload_time": "2009-01-22T15:10:00", "upload_time_iso_8601": "2009-01-22T15:10:00Z", "url": "https://files.pythonhosted.org/packages/dc/51/ac3c72ac85069c82ffa9673299f976df4c23f1cda10fc2f01ce7380cdb09/collective.skinny-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "b6b088aef5876c358e3d8bfc6c0b53e1", "sha256": "734ba765d6159ca2f289876dcc324a67e785ab243b32ce5791be5203f49c7256"}, "downloads": -1, "filename": "collective.skinny-0.3.tar.gz", "has_sig": false, "md5_digest": "b6b088aef5876c358e3d8bfc6c0b53e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19341, "upload_time": "2009-01-26T00:48:41", "upload_time_iso_8601": "2009-01-26T00:48:41Z", "url": "https://files.pythonhosted.org/packages/fa/91/bfc39d73743d5bf6596fcb4f3a12cbab6434a5a62524e392b6e6ebf0fdcf/collective.skinny-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "6fd2ecf37937864a96d374e73a98cceb", "sha256": "306b70ba92510934f0621505f5e93957ec9cc466b599b267d79a38fde445858e"}, "downloads": -1, "filename": "collective.skinny-0.4.tar.gz", "has_sig": false, "md5_digest": "6fd2ecf37937864a96d374e73a98cceb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19698, "upload_time": "2009-04-16T21:20:04", "upload_time_iso_8601": "2009-04-16T21:20:04.187556Z", "url": "https://files.pythonhosted.org/packages/88/b5/7a81d52736b63cba1ba961dd333f59f129099da58cdcb42eefe0c1479619/collective.skinny-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "a39a528284854a0f45c488d19bbc572c", "sha256": "81321009f13438c056983420381e9b7eeb626db10388d8783ae5a99271933778"}, "downloads": -1, "filename": "collective.skinny-0.5.tar.gz", "has_sig": false, "md5_digest": "a39a528284854a0f45c488d19bbc572c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20700, "upload_time": "2009-04-20T16:49:14", "upload_time_iso_8601": "2009-04-20T16:49:14.301431Z", "url": "https://files.pythonhosted.org/packages/76/cb/05bf03a335430e94c7743a1ff815a7c17622684fcaffb753adeb1fba4464/collective.skinny-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "c267231115bba7fac9089cf3e08164a7", "sha256": "3ef56bdf46258177bc1b299797b919cb48cf279639a842549a76146c3662eee0"}, "downloads": -1, "filename": "collective.skinny-0.6.tar.gz", "has_sig": false, "md5_digest": "c267231115bba7fac9089cf3e08164a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23126, "upload_time": "2010-11-20T22:33:02", "upload_time_iso_8601": "2010-11-20T22:33:02.512005Z", "url": "https://files.pythonhosted.org/packages/81/f6/2ae71b2918b38cb409cd4f9bc2092247a3151c83e50fd35be0c0c82e01f8/collective.skinny-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c267231115bba7fac9089cf3e08164a7", "sha256": "3ef56bdf46258177bc1b299797b919cb48cf279639a842549a76146c3662eee0"}, "downloads": -1, "filename": "collective.skinny-0.6.tar.gz", "has_sig": false, "md5_digest": "c267231115bba7fac9089cf3e08164a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23126, "upload_time": "2010-11-20T22:33:02", "upload_time_iso_8601": "2010-11-20T22:33:02.512005Z", "url": "https://files.pythonhosted.org/packages/81/f6/2ae71b2918b38cb409cd4f9bc2092247a3151c83e50fd35be0c0c82e01f8/collective.skinny-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:49 2020"}