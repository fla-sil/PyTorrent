{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.7", "Topic :: Security", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Python 3 SDK for Baikal\n\nSDK to easilly generate tokens for an application in the 4th platform.\n\n> NOTE: Starting from v0.1.3, the license has changed to Apache 2.0\n\n## Installation\n\nYou can install easily with pip:\n\n```bash\npip install baikal-sdk\n```\n\n## Usage\n\n**Create a client**\n```python\nfrom clients.baikal_client import OpenIDClient\n\n\noid_client = OpenIDClient(\n    authserver_endpoint='http://auth.xxx.baikalplatform.com', # authserver endpoint\n    client_id='your_oauth_client_id',\n    client_secret='your_oauth_client_secret',\n    # For using grantUser method (jwt-bearer grant type)\n    client_keys=[{ 'key': 'stringWithTheKey', format: 'pem' }],  # optional\n    issuer='http://yourserver.com/',  # your jwt issuer id\n    private_certs_path='/path/to/certs/directory'  # directory to read certificates/private keys.\n)\n```\n\n**Get an access_token for a user using jwt-bearer**\n```python\naccess_token = oid_client.grant_user(\n  'userSUB',\n  ['list', 'of', 'scopes'],\n  ['list', 'of', 'purposes'],\n  authorization_id='46921050-e97c-418b-928c-4158256be92c', # optional\n  identifier={'id': 'my-phone-number', 'type': 'phone_number'} # optional\n)\n```\n**Get a client_credentials access_token**\n```python\naccess_token = oid_client.grant_client(\n  scopes=['list', 'of', 'scopes'] #optional\n  purposes=['list', 'of', 'purposes'] #optional\n)\n```\n\n**Expose your public keys in a server route to use with a `jwt-bearer`**\n\nIf you have configured your issuer in the authserver to read from an endpoint,\nyou should expose your public keys in an accessible route.\n\n```python\noid_client.get_jwk_set()\n```\nThis will output the public part of your keys to be directly exposed in JWK format (required by authserver and any OIDC server).\n\n## Configuration\n\nThe `OpenIDClient` configuration will be read from environment if ommited\n```inc\nexport BAIKAL_AUTHSERVER_ENDPOINT='https://auth.xxx.baikalplatform.com'\nexport BAIKAL_CLIENT_ID='your_oauth_client_id'\nexport BAIKAL_CLIENT_SECRET='your_oauth_client_secret'\nexport BAIKAL_ISSUER='http://yourserver.com/'\nexport BAIKAL_PRIVATE_CERTS_PATH='/path/to/certs/directory'\n```\n\nSupported certs format are (should match the file extension):\n* json: JSON stringified JWK\n* private: DER encoded 'raw' private key\n* pkcs8: DER encoded (unencrypted!) PKCS8 private key\n* public: DER encoded SPKI public key (alternate to 'spki')\n* spki: DER encoded SPKI public key\n* pkix: DER encoded PKIX X.509 certificate\n* x509: DER encoded PKIX X.509 certificate\n* pem: PEM encoded of PKCS8 / SPKI / PKIX\n\nGrant public methods accept a request config as the last argument,\nto allow specifying headers and timeout per-request (in seconds):\n\n```python\naccess_token = oid_client.grant_client(\n    scopes=[\"scope1\"],\n    headers={\n        'X-Correlator': '1234-5678-9012-3456-7890'\n    },\n    timeout=30\n)\n```\n\nIf you are using the library with a 4th Platform development environment, you can accept self-signed certs setting this environment variable:\n\n```\nexport BAIKAL_VERIFY_CERTS=False  # Accept self signed certs for authserver communication (not used in token validation)\n```\n\n## Generate private keys\n\nIt's not needed to have private keys generated from a secured authority. For oauth2 verify you can use self-generated keys. Here it's included some tips.\n\nIf you want to generate different keys (in JWK format) for development purpose you can use https://mkjwk.org/.\n\n### Generate a RSA private key (with SHA 256 hash, RS256) (using openssl)\n\n````bash\nopenssl genrsa -des3 -out private-rsa-protected.pem 2048\n````\n\nThis will produce a private rsa key of 2048 bits protected with a password, in order to remove the password and use directly the private key in the library you can run this:\n\n```bash\nopenssl rsa -in private-rsa-protected.pem -out private-rsa.pem\n# rm private-rsa-protected.pem\n\n```\n\nThe private-rsa.pem can be used with the library to generate assertions and to expose the public key part as stated before. Just place the pem in your directory and point the sdk private_certs_path to it.\nThe public key is automatically generated in JWK as you can check in the expose your public keys section.\n\nIt's not recommended to use rsa keys bigger than 2048 (e.g 4096) as the computational cost is not worth. It's better to have a keys rotation policy every given time (e.g. a week). It's also not recommended\nto use keys of 1024 length as it can be cracked.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Telefonica/baikal-sdk/python", "keywords": "", "license": "Apache 2.0", "maintainer": "4th Platform team", "maintainer_email": "4pf@telefonica.com", "name": "baikal-sdk", "package_url": "https://pypi.org/project/baikal-sdk/", "platform": "", "project_url": "https://pypi.org/project/baikal-sdk/", "project_urls": {"Homepage": "https://github.com/Telefonica/baikal-sdk/python"}, "release_url": "https://pypi.org/project/baikal-sdk/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "SDK to generate tokens for the 4th Platform", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python 3 SDK for Baikal</h1>\n<p>SDK to easilly generate tokens for an application in the 4th platform.</p>\n<blockquote>\n<p>NOTE: Starting from v0.1.3, the license has changed to Apache 2.0</p>\n</blockquote>\n<h2>Installation</h2>\n<p>You can install easily with pip:</p>\n<pre>pip install baikal-sdk\n</pre>\n<h2>Usage</h2>\n<p><strong>Create a client</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clients.baikal_client</span> <span class=\"kn\">import</span> <span class=\"n\">OpenIDClient</span>\n\n\n<span class=\"n\">oid_client</span> <span class=\"o\">=</span> <span class=\"n\">OpenIDClient</span><span class=\"p\">(</span>\n    <span class=\"n\">authserver_endpoint</span><span class=\"o\">=</span><span class=\"s1\">'http://auth.xxx.baikalplatform.com'</span><span class=\"p\">,</span> <span class=\"c1\"># authserver endpoint</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'your_oauth_client_id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'your_oauth_client_secret'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># For using grantUser method (jwt-bearer grant type)</span>\n    <span class=\"n\">client_keys</span><span class=\"o\">=</span><span class=\"p\">[{</span> <span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'stringWithTheKey'</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"s1\">'pem'</span> <span class=\"p\">}],</span>  <span class=\"c1\"># optional</span>\n    <span class=\"n\">issuer</span><span class=\"o\">=</span><span class=\"s1\">'http://yourserver.com/'</span><span class=\"p\">,</span>  <span class=\"c1\"># your jwt issuer id</span>\n    <span class=\"n\">private_certs_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/certs/directory'</span>  <span class=\"c1\"># directory to read certificates/private keys.</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Get an access_token for a user using jwt-bearer</strong></p>\n<pre><span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">oid_client</span><span class=\"o\">.</span><span class=\"n\">grant_user</span><span class=\"p\">(</span>\n  <span class=\"s1\">'userSUB'</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"s1\">'list'</span><span class=\"p\">,</span> <span class=\"s1\">'of'</span><span class=\"p\">,</span> <span class=\"s1\">'scopes'</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"s1\">'list'</span><span class=\"p\">,</span> <span class=\"s1\">'of'</span><span class=\"p\">,</span> <span class=\"s1\">'purposes'</span><span class=\"p\">],</span>\n  <span class=\"n\">authorization_id</span><span class=\"o\">=</span><span class=\"s1\">'46921050-e97c-418b-928c-4158256be92c'</span><span class=\"p\">,</span> <span class=\"c1\"># optional</span>\n  <span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my-phone-number'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'phone_number'</span><span class=\"p\">}</span> <span class=\"c1\"># optional</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Get a client_credentials access_token</strong></p>\n<pre><span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">oid_client</span><span class=\"o\">.</span><span class=\"n\">grant_client</span><span class=\"p\">(</span>\n  <span class=\"n\">scopes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'list'</span><span class=\"p\">,</span> <span class=\"s1\">'of'</span><span class=\"p\">,</span> <span class=\"s1\">'scopes'</span><span class=\"p\">]</span> <span class=\"c1\">#optional</span>\n  <span class=\"n\">purposes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'list'</span><span class=\"p\">,</span> <span class=\"s1\">'of'</span><span class=\"p\">,</span> <span class=\"s1\">'purposes'</span><span class=\"p\">]</span> <span class=\"c1\">#optional</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Expose your public keys in a server route to use with a <code>jwt-bearer</code></strong></p>\n<p>If you have configured your issuer in the authserver to read from an endpoint,\nyou should expose your public keys in an accessible route.</p>\n<pre><span class=\"n\">oid_client</span><span class=\"o\">.</span><span class=\"n\">get_jwk_set</span><span class=\"p\">()</span>\n</pre>\n<p>This will output the public part of your keys to be directly exposed in JWK format (required by authserver and any OIDC server).</p>\n<h2>Configuration</h2>\n<p>The <code>OpenIDClient</code> configuration will be read from environment if ommited</p>\n<pre>export BAIKAL_AUTHSERVER_ENDPOINT='https://auth.xxx.baikalplatform.com'\nexport BAIKAL_CLIENT_ID='your_oauth_client_id'\nexport BAIKAL_CLIENT_SECRET='your_oauth_client_secret'\nexport BAIKAL_ISSUER='http://yourserver.com/'\nexport BAIKAL_PRIVATE_CERTS_PATH='/path/to/certs/directory'\n</pre>\n<p>Supported certs format are (should match the file extension):</p>\n<ul>\n<li>json: JSON stringified JWK</li>\n<li>private: DER encoded 'raw' private key</li>\n<li>pkcs8: DER encoded (unencrypted!) PKCS8 private key</li>\n<li>public: DER encoded SPKI public key (alternate to 'spki')</li>\n<li>spki: DER encoded SPKI public key</li>\n<li>pkix: DER encoded PKIX X.509 certificate</li>\n<li>x509: DER encoded PKIX X.509 certificate</li>\n<li>pem: PEM encoded of PKCS8 / SPKI / PKIX</li>\n</ul>\n<p>Grant public methods accept a request config as the last argument,\nto allow specifying headers and timeout per-request (in seconds):</p>\n<pre><span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">oid_client</span><span class=\"o\">.</span><span class=\"n\">grant_client</span><span class=\"p\">(</span>\n    <span class=\"n\">scopes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"scope1\"</span><span class=\"p\">],</span>\n    <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'X-Correlator'</span><span class=\"p\">:</span> <span class=\"s1\">'1234-5678-9012-3456-7890'</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">30</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If you are using the library with a 4th Platform development environment, you can accept self-signed certs setting this environment variable:</p>\n<pre><code>export BAIKAL_VERIFY_CERTS=False  # Accept self signed certs for authserver communication (not used in token validation)\n</code></pre>\n<h2>Generate private keys</h2>\n<p>It's not needed to have private keys generated from a secured authority. For oauth2 verify you can use self-generated keys. Here it's included some tips.</p>\n<p>If you want to generate different keys (in JWK format) for development purpose you can use <a href=\"https://mkjwk.org/\" rel=\"nofollow\">https://mkjwk.org/</a>.</p>\n<h3>Generate a RSA private key (with SHA 256 hash, RS256) (using openssl)</h3>\n<pre>openssl genrsa -des3 -out private-rsa-protected.pem <span class=\"m\">2048</span>\n</pre>\n<p>This will produce a private rsa key of 2048 bits protected with a password, in order to remove the password and use directly the private key in the library you can run this:</p>\n<pre>openssl rsa -in private-rsa-protected.pem -out private-rsa.pem\n<span class=\"c1\"># rm private-rsa-protected.pem</span>\n</pre>\n<p>The private-rsa.pem can be used with the library to generate assertions and to expose the public key part as stated before. Just place the pem in your directory and point the sdk private_certs_path to it.\nThe public key is automatically generated in JWK as you can check in the expose your public keys section.</p>\n<p>It's not recommended to use rsa keys bigger than 2048 (e.g 4096) as the computational cost is not worth. It's better to have a keys rotation policy every given time (e.g. a week). It's also not recommended\nto use keys of 1024 length as it can be cracked.</p>\n\n          </div>"}, "last_serial": 7094397, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "f58f6e2536bf8ac73ff211603471ef3f", "sha256": "2a9cf72ef7cd3f04fb35c4e7eb6408129ab2a8c53ebf0b233cfb522df13bfd29"}, "downloads": -1, "filename": "baikal-sdk-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f58f6e2536bf8ac73ff211603471ef3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12397, "upload_time": "2019-09-12T19:55:13", "upload_time_iso_8601": "2019-09-12T19:55:13.958785Z", "url": "https://files.pythonhosted.org/packages/11/f1/c77177ec5358d1aa839f74d4f96b5d115bd9eb042cc8ad4957180b321a18/baikal-sdk-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ecaf1e76f1d68d701b26d4a36babaf7c", "sha256": "a2d54ccc87d7dbb49b1016b724d24414b984622f760ded908bfcc936e51148f7"}, "downloads": -1, "filename": "baikal-sdk-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ecaf1e76f1d68d701b26d4a36babaf7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12480, "upload_time": "2019-09-12T19:58:32", "upload_time_iso_8601": "2019-09-12T19:58:32.969350Z", "url": "https://files.pythonhosted.org/packages/3d/63/71d2da2ae49a6b81134416894e822b3f29ba6c54df4b15ec5db3395fee8a/baikal-sdk-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "05bc6cc56750e6e31ff0b0dbe970cd78", "sha256": "2cd0f99454a1a8bb34d510e1923250b19652d1f13854eb705795ea9946bfed2a"}, "downloads": -1, "filename": "baikal-sdk-0.1.4.tar.gz", "has_sig": false, "md5_digest": "05bc6cc56750e6e31ff0b0dbe970cd78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14444, "upload_time": "2019-09-17T11:41:39", "upload_time_iso_8601": "2019-09-17T11:41:39.320881Z", "url": "https://files.pythonhosted.org/packages/fc/6f/6e805209fb4cb0efb2165095dcf87c78269328de9c41e16d04675648b609/baikal-sdk-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "556430f40717159f7ff6ff4136c9be36", "sha256": "501ba3d0f79499ca5266b1c0b68981b0ea34f0cc1295018288640c1b49c6dfb1"}, "downloads": -1, "filename": "baikal-sdk-0.2.0.tar.gz", "has_sig": false, "md5_digest": "556430f40717159f7ff6ff4136c9be36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12894, "upload_time": "2020-04-24T16:48:14", "upload_time_iso_8601": "2020-04-24T16:48:14.752204Z", "url": "https://files.pythonhosted.org/packages/af/38/dbb8fe417ff7f7b6a0ca414591d92b37d59dac1145cea295eab22620446c/baikal-sdk-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "556430f40717159f7ff6ff4136c9be36", "sha256": "501ba3d0f79499ca5266b1c0b68981b0ea34f0cc1295018288640c1b49c6dfb1"}, "downloads": -1, "filename": "baikal-sdk-0.2.0.tar.gz", "has_sig": false, "md5_digest": "556430f40717159f7ff6ff4136c9be36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12894, "upload_time": "2020-04-24T16:48:14", "upload_time_iso_8601": "2020-04-24T16:48:14.752204Z", "url": "https://files.pythonhosted.org/packages/af/38/dbb8fe417ff7f7b6a0ca414591d92b37d59dac1145cea295eab22620446c/baikal-sdk-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:02 2020"}