{"info": {"author": "xica development team", "author_email": "info@xica.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Pyramid", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Communications :: Chat", "Topic :: Internet :: WWW/HTTP :: HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"], "description": "djehuty\n=======\n\npost webhook manager written in Python\n\nenvironment\n-----------\n\n- Python2.7 expected.\n\ninstall\n-------\n\nYou can use pip.\n\n::\n\n  $ pip install djehuty\n\ncreate djehuty app on heroku\n----------------------------\n\n::\n\n   $ pcreate -s djehuty_server YOUR_PROJECT_NAME\n   $ cd YOUR_PROJECT_NAME\n   $ git init\n   $ heroku create\n\nYou can add existing services and commands...\n\nadd service package in requirements.txt for dependency::\n\n  cliff==1.6.1\n  pyramid==1.5.1\n  cornice==0.16.2\n  uWSGI==2.0.6\n  djehuty==0.0.4\n  # add service package.\n  djehutyslack==0.0.4\n  # add command package.\n  djehutylgtm==0.0.1\n  -e .\n\nadd pyramid.includes entry in ini-paste for pyramid extension::\n\n  pyramid.default_locale_name = en\n  pyramid.includes =\n         djehuty\n  # add module name that has \"includeme\" interface.\n         djehutyslack\n\nor implement your custom service in YOUR_PROJECT_NAME/YOUR_PROJECT_NAME/services.py.\n\nimplement custom service\n------------------------\n\nExample code with comments from djehutyslack<https://github.com/xica/djehutyslack/>.\n\ndjehutyslack/djehutyslack/slack.py\n\n.. code:: python\n\n  # ..snipped..\n\n  from djehuty.service import Service\n\n\n  # inherit djehuty.service.Service.\n  class Slack(Service):\n\n      # add validation(authorization token, user credential, and so on) process.\n      def validate(self, request):\n          token = request.params.get('token')\n          if not token or token != os.environ.get('DJEHUTY_SLACK_OUTGOING_TOKEN'):\n              raise HTTPUnauthorized()\n\n      # parse web hook request and return global argument for command.Command.app_args.\n      def get_service_argument(self, name, request):\n          if name == 'user':\n              return request.params.get('user_name')\n          elif name == 'room':\n              return request.params.get('channel_name')\n          else:\n              raise ValueError('invalid argument name \"{}\"'.format(name))\n\n      # parse web hook request and return \"argv\" list for app.App.run.\n      def make_command_line(self, request):\n          m = re.match(\n              r'^{}\\W*(.*)$'.format(request.params.get('trigger_word', '')),\n              request.params.get('text', '')\n          )\n          return shlex.split(m.group(1).encode('utf8')) if m is not None else []\n\n      # convert value returned by Command.take_action into appropriate response.\n      def make_response(self, result):\n          return {\n              'text': result,\n              'link_names': 1,\n              'parse': 'full',\n          }\n\n  # explicit instantiation required.\n  slack = Slack()\n\nimplement service only package\n--------------------------------------\n\nIf you want to publish your service, you need to implement it as a stand-alone python package and should provide \"includeme\" interface.\n\n::\n\n   $ pcreate -s djehuty_service YOUR_SERVICE_PROJECT_NAME\n   $ cd YOUR_SERVICE_PROJECT_NAME\n   (implement your service and publish it as git repository or PyPI package...)\n\n\"includeme\" example code with comments from djehutyslack.\n\ndjehutyslack/djehutyslack/__init__.py\n\n.. code:: python\n\n  def includeme(config):\n\n    config.scan('djehutyslack.slack')\n\nimplement service in server package\n-----------------------------------\n\nOr if you need not publish your service, simply implement it in your server package and use \"config.scan\".\n\n.. code:: python\n\n  from pyramid.config import Configuration\n\n  # pyramid entry point.\n  def main(global_config, **settings):\n      config = Configurator(settings=settings)\n      # import your service module into Pyramid by \"config.scan\".\n      config.scan('YOUR_PROJECT_NAME.SERVICE_MODULE_NAME')\n      return config.make_wsgi_app()\n\nimplement and add custom command\n--------------------------------\n\ndjehuty.command.Command is almost cliff<http://cliff.readthedocs.org/en/latest/> command.After implementing your command, add command name and command class module path in setup.py entry_points.\n\nExample code with comments from djehuty.command.yo.\n\n.. code:: python\n\n  from djehuty.command import Command\n\n\n  # inherit djehuty.command.Command.\n  class Yo(Command):\n      '''echo yo'''  # add description for help.\n\n      # add argparse style argument and return parser.\n      def get_parser(self, prog_name):\n          parser = Command.get_parser(self, prog_name)\n          parser.add_argument('-g', '--greeting',\n                              default='yo',\n                              help='greeting message')\n          return parser\n\n      # return response text.\n      def take_action(self, parsed_args):\n          return ('@{} '.format(self.app_args.user) if self.app_args.user else '') + parsed_args.greeting\n\nentry_points example code with comments from djehutylgtm<https://github.com/xica/djehutylgtm/>.\n\ndjehutylgtm/setup.py\n\n.. code:: python\n\n  # ..snipped..\n\n  setup(\n      name='djehutylgtm',\n      # ..snipped..\n      entry_points={\n          'djehuty.commands': [\n              'lgtm = djehutylgtm.commands:LGTM',\n          ],\n      },\n  )\n\nimplement command only package\n--------------------------------------\n\nLike a service, if you want to publish your command, you need to implement it as a stand-alone python package.\n\n::\n\n   $ pcreate -s djehuty_command YOUR_COMMAND_PROJECT_NAME\n   $ cd YOUR_COMMAND_PROJECT_NAME\n   (implement your command and publish it as git repository or PyPI package...)\n\ntodo\n----\n\n- Python 3 support\n- unit test\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xica/djehuty", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "djehuty", "package_url": "https://pypi.org/project/djehuty/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/djehuty/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/xica/djehuty"}, "release_url": "https://pypi.org/project/djehuty/0.0.7/", "requires_dist": null, "requires_python": null, "summary": "POST web hook manager", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>post webhook manager written in Python</p>\n<div id=\"environment\">\n<h2>environment</h2>\n<ul>\n<li>Python2.7 expected.</li>\n</ul>\n</div>\n<div id=\"install\">\n<h2>install</h2>\n<p>You can use pip.</p>\n<pre>$ pip install djehuty\n</pre>\n</div>\n<div id=\"create-djehuty-app-on-heroku\">\n<h2>create djehuty app on heroku</h2>\n<pre>$ pcreate -s djehuty_server YOUR_PROJECT_NAME\n$ cd YOUR_PROJECT_NAME\n$ git init\n$ heroku create\n</pre>\n<p>You can add existing services and commands\u2026</p>\n<p>add service package in requirements.txt for dependency:</p>\n<pre>cliff==1.6.1\npyramid==1.5.1\ncornice==0.16.2\nuWSGI==2.0.6\ndjehuty==0.0.4\n# add service package.\ndjehutyslack==0.0.4\n# add command package.\ndjehutylgtm==0.0.1\n-e .\n</pre>\n<p>add pyramid.includes entry in ini-paste for pyramid extension:</p>\n<pre>pyramid.default_locale_name = en\npyramid.includes =\n       djehuty\n# add module name that has \"includeme\" interface.\n       djehutyslack\n</pre>\n<p>or implement your custom service in YOUR_PROJECT_NAME/YOUR_PROJECT_NAME/services.py.</p>\n</div>\n<div id=\"implement-custom-service\">\n<h2>implement custom service</h2>\n<p>Example code with comments from djehutyslack&lt;<a href=\"https://github.com/xica/djehutyslack/\" rel=\"nofollow\">https://github.com/xica/djehutyslack/</a>&gt;.</p>\n<p>djehutyslack/djehutyslack/slack.py</p>\n<pre><span class=\"c1\"># ..snipped..</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">djehuty.service</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span>\n\n\n<span class=\"c1\"># inherit djehuty.service.Service.</span>\n<span class=\"k\">class</span> <span class=\"nc\">Slack</span><span class=\"p\">(</span><span class=\"n\">Service</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># add validation(authorization token, user credential, and so on) process.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'token'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">token</span> <span class=\"ow\">or</span> <span class=\"n\">token</span> <span class=\"o\">!=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'DJEHUTY_SLACK_OUTGOING_TOKEN'</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">HTTPUnauthorized</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># parse web hook request and return global argument for command.Command.app_args.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_service_argument</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'user'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'user_name'</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'room'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'channel_name'</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'invalid argument name \"</span><span class=\"si\">{}</span><span class=\"s1\">\"'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># parse web hook request and return \"argv\" list for app.App.run.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_command_line</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span>\n            <span class=\"sa\">r</span><span class=\"s1\">'^</span><span class=\"si\">{}</span><span class=\"s1\">\\W*(.*)$'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'trigger_word'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)),</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'text'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">shlex</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf8'</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n\n    <span class=\"c1\"># convert value returned by Command.take_action into appropriate response.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"n\">result</span><span class=\"p\">,</span>\n            <span class=\"s1\">'link_names'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s1\">'parse'</span><span class=\"p\">:</span> <span class=\"s1\">'full'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n<span class=\"c1\"># explicit instantiation required.</span>\n<span class=\"n\">slack</span> <span class=\"o\">=</span> <span class=\"n\">Slack</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"implement-service-only-package\">\n<h2>implement service only package</h2>\n<p>If you want to publish your service, you need to implement it as a stand-alone python package and should provide \u201cincludeme\u201d interface.</p>\n<pre>$ pcreate -s djehuty_service YOUR_SERVICE_PROJECT_NAME\n$ cd YOUR_SERVICE_PROJECT_NAME\n(implement your service and publish it as git repository or PyPI package...)\n</pre>\n<p>\u201cincludeme\u201d example code with comments from djehutyslack.</p>\n<p>djehutyslack/djehutyslack/__init__.py</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">includeme</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">):</span>\n\n  <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"s1\">'djehutyslack.slack'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"implement-service-in-server-package\">\n<h2>implement service in server package</h2>\n<p>Or if you need not publish your service, simply implement it in your server package and use \u201cconfig.scan\u201d.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyramid.config</span> <span class=\"kn\">import</span> <span class=\"n\">Configuration</span>\n\n<span class=\"c1\"># pyramid entry point.</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">global_config</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">settings</span><span class=\"p\">):</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configurator</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n    <span class=\"c1\"># import your service module into Pyramid by \"config.scan\".</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"s1\">'YOUR_PROJECT_NAME.SERVICE_MODULE_NAME'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">make_wsgi_app</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"implement-and-add-custom-command\">\n<h2>implement and add custom command</h2>\n<p>djehuty.command.Command is almost cliff&lt;<a href=\"http://cliff.readthedocs.org/en/latest/\" rel=\"nofollow\">http://cliff.readthedocs.org/en/latest/</a>&gt; command.After implementing your command, add command name and command class module path in setup.py entry_points.</p>\n<p>Example code with comments from djehuty.command.yo.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djehuty.command</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n\n<span class=\"c1\"># inherit djehuty.command.Command.</span>\n<span class=\"k\">class</span> <span class=\"nc\">Yo</span><span class=\"p\">(</span><span class=\"n\">Command</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''echo yo'''</span>  <span class=\"c1\"># add description for help.</span>\n\n    <span class=\"c1\"># add argparse style argument and return parser.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_parser</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prog_name</span><span class=\"p\">):</span>\n        <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"o\">.</span><span class=\"n\">get_parser</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prog_name</span><span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'-g'</span><span class=\"p\">,</span> <span class=\"s1\">'--greeting'</span><span class=\"p\">,</span>\n                            <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'yo'</span><span class=\"p\">,</span>\n                            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'greeting message'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parser</span>\n\n    <span class=\"c1\"># return response text.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">take_action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parsed_args</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"s1\">'@</span><span class=\"si\">{}</span><span class=\"s1\"> '</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_args</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_args</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"k\">else</span> <span class=\"s1\">''</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">parsed_args</span><span class=\"o\">.</span><span class=\"n\">greeting</span>\n</pre>\n<p>entry_points example code with comments from djehutylgtm&lt;<a href=\"https://github.com/xica/djehutylgtm/\" rel=\"nofollow\">https://github.com/xica/djehutylgtm/</a>&gt;.</p>\n<p>djehutylgtm/setup.py</p>\n<pre><span class=\"c1\"># ..snipped..</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'djehutylgtm'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ..snipped..</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'djehuty.commands'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'lgtm = djehutylgtm.commands:LGTM'</span><span class=\"p\">,</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"implement-command-only-package\">\n<h2>implement command only package</h2>\n<p>Like a service, if you want to publish your command, you need to implement it as a stand-alone python package.</p>\n<pre>$ pcreate -s djehuty_command YOUR_COMMAND_PROJECT_NAME\n$ cd YOUR_COMMAND_PROJECT_NAME\n(implement your command and publish it as git repository or PyPI package...)\n</pre>\n</div>\n<div id=\"todo\">\n<h2>todo</h2>\n<ul>\n<li>Python 3 support</li>\n<li>unit test</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1251591, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "06fdd7f476dc21d7fca85faf97a92f58", "sha256": "67e5b82478ac5f2ce7aadb74e57b07f3f2481a456ab299bafeabb96f90a12453"}, "downloads": -1, "filename": "djehuty-0.0.3.tar.gz", "has_sig": false, "md5_digest": "06fdd7f476dc21d7fca85faf97a92f58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2984, "upload_time": "2014-08-07T18:57:17", "upload_time_iso_8601": "2014-08-07T18:57:17.447601Z", "url": "https://files.pythonhosted.org/packages/d3/93/50d3e5c648550e678686f15f286c8649d83bdb1a8acc0fc9731bbe584b4f/djehuty-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "c2203ad8ec6fd4033fbc9fd94515039b", "sha256": "a5dd1eff3bbcf52e23c03361dee70dd5e115c7b46c0e19a8d108d2521d1aeda9"}, "downloads": -1, "filename": "djehuty-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c2203ad8ec6fd4033fbc9fd94515039b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3850, "upload_time": "2014-08-25T10:20:38", "upload_time_iso_8601": "2014-08-25T10:20:38.315078Z", "url": "https://files.pythonhosted.org/packages/9e/f7/2c3741c0bc18007a3248b67c267f21c498eac25d08081886520fcca4733e/djehuty-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "fca64af82bda1061ceca2f4b0004b0a8", "sha256": "fe3c227abfa975652554ae73c6d28995fe5092d9e6a4c6002139304367f4b5b6"}, "downloads": -1, "filename": "djehuty-0.0.5.tar.gz", "has_sig": false, "md5_digest": "fca64af82bda1061ceca2f4b0004b0a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3851, "upload_time": "2014-08-25T11:44:38", "upload_time_iso_8601": "2014-08-25T11:44:38.831705Z", "url": "https://files.pythonhosted.org/packages/f0/86/d396bbf464b305d590649721e5e48516b89263dc504b591f409e4f3127ab/djehuty-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "21cb445c3dc56cf0bedfbd375f58dc4d", "sha256": "ddaa82c4483272b84d057a5b130df96a1d2b1a9e165bf03edbcf5201dd74fc89"}, "downloads": -1, "filename": "djehuty-0.0.6.tar.gz", "has_sig": false, "md5_digest": "21cb445c3dc56cf0bedfbd375f58dc4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5171, "upload_time": "2014-10-03T02:47:25", "upload_time_iso_8601": "2014-10-03T02:47:25.477660Z", "url": "https://files.pythonhosted.org/packages/ec/03/533e630d98e10d4cca48e7a5aad8690c18c9b4eb9621b16dd0e89a1236f2/djehuty-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "5cdd4d989d9bc88779a8a9d2244132b5", "sha256": "07116e02f745371d601b159d346060a1d7899c752a6cd30cb3e5c91f4631f1e4"}, "downloads": -1, "filename": "djehuty-0.0.7.tar.gz", "has_sig": false, "md5_digest": "5cdd4d989d9bc88779a8a9d2244132b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5178, "upload_time": "2014-10-08T09:30:52", "upload_time_iso_8601": "2014-10-08T09:30:52.675952Z", "url": "https://files.pythonhosted.org/packages/d8/04/878181e3278eac55793dbaff6b41b7fd88a1b3ce7991c52b663e7f4570a9/djehuty-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5cdd4d989d9bc88779a8a9d2244132b5", "sha256": "07116e02f745371d601b159d346060a1d7899c752a6cd30cb3e5c91f4631f1e4"}, "downloads": -1, "filename": "djehuty-0.0.7.tar.gz", "has_sig": false, "md5_digest": "5cdd4d989d9bc88779a8a9d2244132b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5178, "upload_time": "2014-10-08T09:30:52", "upload_time_iso_8601": "2014-10-08T09:30:52.675952Z", "url": "https://files.pythonhosted.org/packages/d8/04/878181e3278eac55793dbaff6b41b7fd88a1b3ce7991c52b663e7f4570a9/djehuty-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:36 2020"}