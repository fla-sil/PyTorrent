{"info": {"author": "Denis", "author_email": "denis-bz-py@t-online.de", "bugtrack_url": null, "classifiers": [], "description": "## Intergrid: interpolate data given on an N-d rectangular grid\n\nPurpose: interpolate data given on an N-d rectangular grid,\nuniform or non-uniform,\nusing the fast\n[scipy.ndimage.map_coordinates](https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.interpolation.map_coordinates.html).\nNon-uniform grids are first uniformized with\n[numpy.interp](https://docs.scipy.org/doc/numpy/reference/generated/numpy.interp.html).\n\nKeywords, tags: interpolation, rectangular grid, box grid, python, numpy, scipy\n\nBackground:\nthe reader should know some Python and NumPy\n([IPython](https://ipython.org) is invaluable for learning both).\nFor basics of interpolation, see\n[Bilinear interpolation](https://en.wikipedia.org/wiki/Bilinear_interpolation)\non Wikipedia. For `map_coordinates`, see the example under\n[multivariate-spline-interpolation-in-python-scipy](https://stackoverflow.com/questions/6238250/multivariate-spline-interpolation-in-python-scipy)\non stackoverflow.\n\n### Example\n\nSay we have rainfall on a 4 x 5 grid of rectangles, lat 52 .. 55 x lon -10 .. -6,\nand want to interpolate (estimate) rainfall at 1000 query points\nin between the grid points.\n\n\tfrom intergrid.intergrid import Intergrid  # .../intergrid/intergrid.py\n\n        # define the grid --\n    griddata = np.loadtxt(...)  # griddata.shape == (4, 5)\n    lo = np.array([ 52, -10 ])  # lowest lat, lowest lon\n    hi = np.array([ 55, -6 ])   # highest lat, highest lon\n\n        # set up an interpolator function \"interfunc()\" with class Intergrid --\n    interfunc = Intergrid( griddata, lo=lo, hi=hi )\n\n        # generate 1000 random query points, lo <= [lat, lon] <= hi --\n    query_points = lo + np.random.uniform( size=(1000, 2) ) * (hi - lo)\n\n        # get rainfall at the 1000 query points --\n    query_values = interfunc.at( query_points )  # -> 1000 values\n\nWhat this does: for each [lat, lon] in query_points,\n\n1) find the square of `griddata` it's in,\ne.g. [52.5, -8.1] -> [0, 3] [0, 4] [1, 4] [1, 3]\\\n2) do bilinear (multilinear) interpolation in that square,\nusing `scipy.ndimage.map_coordinates` .\n\nCheck:\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; `interfunc( lo ) == griddata[0, 0]`\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; `interfunc( hi ) == griddata[-1, -1]` i.e. `griddata[3, 4]`\n\n\n### Parameters\n\n`griddata`: numpy array_like, 2d 3d 4d ...\\\n`lo, hi`: user coordinates of the corners of griddata, 1d array-like, lo < hi\\\n`maps`: an optional list of `dim` descriptors of piecewise-linear or nonlinear maps,\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.g. [[50, 52, 62, 63], None] \\ \\ # uniformize lat, linear lon; see below\\\n`copy`: make a copy of query_points, default `True`;\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; `copy=False` overwrites query_points, runs in less memory\\\n`verbose`: the default 1 prints a summary of each call, with run time\\\n`order`: interpolation order:\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default 1: bilinear, trilinear ... interpolation using all 2^dim corners\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0: each query point -> the nearest grid point -> the value there\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2 to 5: spline, see below\\\n`prefilter`: the kind of spline:\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default `False`: smoothing B-spline\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; `True`: exact-fit C-R spline\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1/3: Mitchell-Netravali spline, 1/3 B + 2/3 fit\n\n\n### Methods\n\nAfter setting up `interfunc = Intergrid(...)`, either\n\n    query_values = interfunc.at( query_points )  # or\n    query_values = interfunc( query_points )\n\ndo the interpolation. (The latter is `__call__` in python.)\n\n\n### Non-uniform rectangular grids\n\nWhat if our griddata above is at non-uniformly-spaced latitudes,\nsay [50, 52, 62, 63] ?  `Intergrid` can \"uniformize\" these\nbefore interpolation, like this:\n\n    lo = np.array([ 50, -10 ])\n    hi = np.array([ 63, -6 ])\n    maps = [[50, 52, 62, 63], None]  # uniformize lat, linear lon\n    interfunc = Intergrid( griddata, lo=lo, hi=hi, maps=maps )\n\nThis will map (transform, stretch, warp) the lats in query_points column 0\nto array coordinates in the range 0 .. 3, using `np.interp` to do\npiecewise-linear (PWL) mapping:\n\n    50  51  52  53  54  55  56  57  58  59  60  61  62  63   # lo[0] .. hi[0]\n     0  .5   1  1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9  2   3\n\n`maps[1] None` says to map the lons in query_points column 1 linearly:\n\n    -10  -9  -8  -7  -6   # lo[1] .. hi[1]\n      0   1   2   3   4\n\nMapping details\n\nThe query_points are first clipped, then columns mapped linearly or non-linearly,\nthen fed to `map_coordinates` .\\\nIn `dim` dimensions (i.e. axes or columns), `lo` and `hi` are each `dim` numbers,\nthe low and high corners of the data grid.\\\n`maps` is an optional list of `dim` map descriptors, which can be\n\n* `None`: linear-transform that column, `query_points[:,j]`, to `griddata`:\\\n    `lo[j] -> 0`\\\n    `hi[j] -> griddata.shape[j] - 1`\n* a callable function: e.g. `np.log` does\\\n    `query_points[:,j] = np.log( query_points[:,j] )`\n* a *sorted* array describing a non-uniform grid:\\\n    `query_points[:,j] =`\\\n    `np.interp( query_points[:,j], [50, 52, 62, 63], [0, 1, 2, 3] )`\n\n\n### Download\n\n    git clone https://github.com/denis-bz/intergrid.git\n        # ? pip install --user git+https://github.com/denis-bz/intergrid.git\n        # ? pip install --user intergrid\n\n    # tell python where the intergrid directory is, e.g. in your ~/.bashrc:\n    #   export PYTHONPATH=$PYTHONPATH:.../intergrid/\n\n    # test in python or IPython:\n    from intergrid.intergrid import Intergrid  # i.e. .../intergrid/intergrid.py\n\n\n### Splines\n\n`Intergrid( ... order = 0 to 5 )` gives the spline order:\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; `order=1`, the default, does bilinear, trilinear ...\ninterpolation, which looks at the grid data at all 4 8 16 .. 2^dim corners of\nthe box around each query point.\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; `order=0` looks at only the one gridpoint\nnearest each query point &mdash; crude but fast.\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; `order = 2 to 5` does spline interpolation on a uniform\nor uniformized grid, looking at (order+1)^dim neighbors of each query point.\n\n`Intergrid( ... prefilter = False | True | 1/3 )`\nspecifies the kind of spline, for `order >= 2`:\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; `prefilter=0` or `False`, the default: B-spline\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; `prefilter=1` or `True`: exact-fit spline\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; `prefilter=1/3`: M-N spline.\\\nA B-spline goes through smoothed data points,\nwith [1 4 1] smoothing, [0 0 1 0 0] -> [0 1 4 1 0] / 6.\\\nAn exact-fit a.k.a interpolating spline\ngoes through the data points exactly.\nThis is not what you want for noisy data,\nand may also wiggle or overshoot more than B-splines do.\\\nAn M-N spline blends 1/3 B-spline and 2/3 exact-fit; see\nMitchell and Netravali,\n[Reconstruction filters in computer-graphics](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.125.201&rep=rep1&type=pdf) ,\n1988, and the plots from `intergrid/test/MNspline.py`.\n\n<small>\nFine print: Exact-fit or interpolating splines can be local or global.\nCatmull-Rom splines and the original M-N splines are local:\nthey look at 4 neighbors of each query point in 1d, 16 in 2d, 64 in 3d.\nPrefiltering is global, with IIR falloff ~ 1 / 4^distance.\n(I don't know of test images that show a visible difference to local C-R).\nConfusingly, the term \"Cardinal spline\" is sometimes used\nfor local (C-R, FIR),\nand sometimes for global (IIR prefilter, then B-spline).\n\nPrefiltering is a clever transformation\nsuch that `Bspline( transform( data )) = exactfitspline( data )`.\nIt is described in a paper by M. Unser,\n[Splines: A perfect fit for signal and image processing](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.19.6706&rep=rep1&type=pdf) ,\n1999.\n</small>\n\nUniformizing a grid with PWL, then uniform-splining, is fast and simple,\nbut not as smooth as true splining on the original non-uniform grid.\nThe differences will of course depend on the grid spacings\nand on how rough the function is.\n\n\n### Notes\n\nRun any interpolator on *your* data with orders 0, 1 ...\nto get an idea of how the results get smoother, and take longer.\nCheck a few query points by hand; plot some cross-sections.\n\n`griddata` values can be of any numpy integer or floating type: int8 uint8\n.. int32 int64 float32 float64.\nBeware of overflow: interpolating uint8 s can give values outside the range 0 .. 255.\n(Interpolation in `d` dimensions can overshoot by (9/8)^d .)\n`np.float32` will use less memory than `np.float64`,\nbut beware of functions in the flow that silently convert everything\nto float64.  The values must be numbers, not vectors.\n\nCoordinate scaling doesn't matter to `Intergrid`;\ncorner weights are calculated in unit cubes of `griddata`,\nafter scaling and mapping. If for example griddata column 3\nis multiplied by 1000, and lo[3] hi[3] too, the weights are unchanged.\n\nBox grids get big and slow above 5d.\nA cube with steps 0 .1 .2 .. 1.0 in all dimensions\nhas 11^6 ~ 1.8M points in 6d, 11^8 ~ 200M in 8d.\nOne can reduce that only with a coarser grid like 0 .5 1 in some dimensions\n(those that vary the least).\nBut time ~ 2^d per query point grows pretty fast.\n\n`map_coordinates` in 5d with `order=1` looks at 32 corner values, with average weight 3 %.\nIf the weights are roughly equal\n(which they will tend to be, by the central limit theorem ?),\nsharp edges or gradients will be blurred, and colors mixed to a grey fog.\n\nTo see how different interpolators affect images, run matplotlib\n`plt.imshow( interpolation = \"nearest\" / \"bilinear\" / ... )` .\n\n\n### Kinds of grids\n\nTerminology varies, so the basic kinds of box grids\na.k.a. rectangular grids are defined here.\n\nAn integer or Cartesian grid has integer coordinates,\ne.g.  2 x 3 x 5 points in a numpy array:\n`A = np.array((2,3,5)); A[0,0,0], A[0,0,1] .. A[1,2,4]`.\n\nA uniform box grid has nx x ny x nz ... points uniformly spaced,\nlinspace x linspace x linspace ...\nso all boxes have the same size and are axis-aligned.\nExamples: 1024 x 768 pixels on a screen,\nor 4 x 5 points at latitudes [10 20 30 40] x longitudes [-10 -9 -8 -7 -6].\n\nA non-uniform box grid also has nx x ny x nz ... points,\nbut allows non-uniform spacings,\ne.g. latitudes [-10 0 60 70] x longitudes [-10 -9 0 20 40];\nthe boxes have different sizes but are still axis-aligned.\n\n(Scattered data, as the name says, has points anywhere,\nnot only on grid lines.\nTo interpolate scattered data in `scipy`, see\n[scipy.interpolate.griddata](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.griddata.html)\nand\n[scipy.spatial.cKDTree](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.html)\n.)\n\nThere are countless varieties of grids:\ngrids with holes, grids warped to various map projections,\nmultiscale / multiresolution grids ...\n\n\n### Run times\n\nSee intergrid/test/test-4d.py: a 4d grid with 1M scattered query points,\nuniform / non-uniform box grid, on a 2.5Gz i5 iMac:\n\n    shape (361, 720, 47, 8)  98M * 8\n    Intergrid: 617 msec  1000000 points in a (361, 720, 47, 8) grid  0 maps  order 1\n    Intergrid: 788 msec  1000000 points in a (361, 720, 47, 8) grid  4 maps  order 1\n\n\n### See also\n\n[scipy.ndimage.interpolation.map_coordinates](https://docs.scipy.org/doc/scipy-dev/reference/generated/scipy.ndimage.interpolation.map_coordinates.html)\\\n[scipy reference ndimage](https://docs.scipy.org/doc/scipy/reference/tutorial/ndimage.html)\\\n[stackoverflow.com/questions/tagged/scipy+interpolation](https://stackoverflow.com/questions/tagged/scipy+interpolation)\\\n[interpol 2014](https://github.com/denis-bz/interpol) -- intergrid + barypol\\\nGoogle \"regrid | resample\"\\\n`pip search interpol` (also gets string interpolation)\n\n\n### Comments welcome\n\nand testcases most welcome\\\n    &mdash; denis-bz-py at t-online dot de\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/denis-bz/intergrid.git", "keywords": "interpolation box-grid  rectangular-grid  python  numpy  scipy", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "intergrid", "package_url": "https://pypi.org/project/intergrid/", "platform": "", "project_url": "https://pypi.org/project/intergrid/", "project_urls": {"Homepage": "https://github.com/denis-bz/intergrid.git"}, "release_url": "https://pypi.org/project/intergrid/2020.2.20/", "requires_dist": ["numpy", "scipy"], "requires_python": "", "summary": "Interpolate data given on an Nd box grid, uniform or non-uniform, using numpy and scipy", "version": "2020.2.20", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Intergrid: interpolate data given on an N-d rectangular grid</h2>\n<p>Purpose: interpolate data given on an N-d rectangular grid,\nuniform or non-uniform,\nusing the fast\n<a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.interpolation.map_coordinates.html\" rel=\"nofollow\">scipy.ndimage.map_coordinates</a>.\nNon-uniform grids are first uniformized with\n<a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.interp.html\" rel=\"nofollow\">numpy.interp</a>.</p>\n<p>Keywords, tags: interpolation, rectangular grid, box grid, python, numpy, scipy</p>\n<p>Background:\nthe reader should know some Python and NumPy\n(<a href=\"https://ipython.org\" rel=\"nofollow\">IPython</a> is invaluable for learning both).\nFor basics of interpolation, see\n<a href=\"https://en.wikipedia.org/wiki/Bilinear_interpolation\" rel=\"nofollow\">Bilinear interpolation</a>\non Wikipedia. For <code>map_coordinates</code>, see the example under\n<a href=\"https://stackoverflow.com/questions/6238250/multivariate-spline-interpolation-in-python-scipy\" rel=\"nofollow\">multivariate-spline-interpolation-in-python-scipy</a>\non stackoverflow.</p>\n<h3>Example</h3>\n<p>Say we have rainfall on a 4 x 5 grid of rectangles, lat 52 .. 55 x lon -10 .. -6,\nand want to interpolate (estimate) rainfall at 1000 query points\nin between the grid points.</p>\n<pre><code>from intergrid.intergrid import Intergrid  # .../intergrid/intergrid.py\n\n    # define the grid --\ngriddata = np.loadtxt(...)  # griddata.shape == (4, 5)\nlo = np.array([ 52, -10 ])  # lowest lat, lowest lon\nhi = np.array([ 55, -6 ])   # highest lat, highest lon\n\n    # set up an interpolator function \"interfunc()\" with class Intergrid --\ninterfunc = Intergrid( griddata, lo=lo, hi=hi )\n\n    # generate 1000 random query points, lo &lt;= [lat, lon] &lt;= hi --\nquery_points = lo + np.random.uniform( size=(1000, 2) ) * (hi - lo)\n\n    # get rainfall at the 1000 query points --\nquery_values = interfunc.at( query_points )  # -&gt; 1000 values\n</code></pre>\n<p>What this does: for each [lat, lon] in query_points,</p>\n<ol>\n<li>find the square of <code>griddata</code> it's in,\ne.g. [52.5, -8.1] -&gt; [0, 3] [0, 4] [1, 4] [1, 3]\\</li>\n<li>do bilinear (multilinear) interpolation in that square,\nusing <code>scipy.ndimage.map_coordinates</code> .</li>\n</ol>\n<p>Check:<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>interfunc( lo ) == griddata[0, 0]</code><br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>interfunc( hi ) == griddata[-1, -1]</code> i.e. <code>griddata[3, 4]</code></p>\n<h3>Parameters</h3>\n<p><code>griddata</code>: numpy array_like, 2d 3d 4d ...<br>\n<code>lo, hi</code>: user coordinates of the corners of griddata, 1d array-like, lo &lt; hi<br>\n<code>maps</code>: an optional list of <code>dim</code> descriptors of piecewise-linear or nonlinear maps,<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 e.g. [[50, 52, 62, 63], None] \\ \\ # uniformize lat, linear lon; see below<br>\n<code>copy</code>: make a copy of query_points, default <code>True</code>;<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>copy=False</code> overwrites query_points, runs in less memory<br>\n<code>verbose</code>: the default 1 prints a summary of each call, with run time<br>\n<code>order</code>: interpolation order:<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 default 1: bilinear, trilinear ... interpolation using all 2^dim corners<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0: each query point -&gt; the nearest grid point -&gt; the value there<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2 to 5: spline, see below<br>\n<code>prefilter</code>: the kind of spline:<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 default <code>False</code>: smoothing B-spline<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>True</code>: exact-fit C-R spline<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1/3: Mitchell-Netravali spline, 1/3 B + 2/3 fit</p>\n<h3>Methods</h3>\n<p>After setting up <code>interfunc = Intergrid(...)</code>, either</p>\n<pre><code>query_values = interfunc.at( query_points )  # or\nquery_values = interfunc( query_points )\n</code></pre>\n<p>do the interpolation. (The latter is <code>__call__</code> in python.)</p>\n<h3>Non-uniform rectangular grids</h3>\n<p>What if our griddata above is at non-uniformly-spaced latitudes,\nsay [50, 52, 62, 63] ?  <code>Intergrid</code> can \"uniformize\" these\nbefore interpolation, like this:</p>\n<pre><code>lo = np.array([ 50, -10 ])\nhi = np.array([ 63, -6 ])\nmaps = [[50, 52, 62, 63], None]  # uniformize lat, linear lon\ninterfunc = Intergrid( griddata, lo=lo, hi=hi, maps=maps )\n</code></pre>\n<p>This will map (transform, stretch, warp) the lats in query_points column 0\nto array coordinates in the range 0 .. 3, using <code>np.interp</code> to do\npiecewise-linear (PWL) mapping:</p>\n<pre><code>50  51  52  53  54  55  56  57  58  59  60  61  62  63   # lo[0] .. hi[0]\n 0  .5   1  1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9  2   3\n</code></pre>\n<p><code>maps[1] None</code> says to map the lons in query_points column 1 linearly:</p>\n<pre><code>-10  -9  -8  -7  -6   # lo[1] .. hi[1]\n  0   1   2   3   4\n</code></pre>\n<p>Mapping details</p>\n<p>The query_points are first clipped, then columns mapped linearly or non-linearly,\nthen fed to <code>map_coordinates</code> .<br>\nIn <code>dim</code> dimensions (i.e. axes or columns), <code>lo</code> and <code>hi</code> are each <code>dim</code> numbers,\nthe low and high corners of the data grid.<br>\n<code>maps</code> is an optional list of <code>dim</code> map descriptors, which can be</p>\n<ul>\n<li><code>None</code>: linear-transform that column, <code>query_points[:,j]</code>, to <code>griddata</code>:<br>\n<code>lo[j] -&gt; 0</code><br>\n<code>hi[j] -&gt; griddata.shape[j] - 1</code></li>\n<li>a callable function: e.g. <code>np.log</code> does<br>\n<code>query_points[:,j] = np.log( query_points[:,j] )</code></li>\n<li>a <em>sorted</em> array describing a non-uniform grid:<br>\n<code>query_points[:,j] =</code><br>\n<code>np.interp( query_points[:,j], [50, 52, 62, 63], [0, 1, 2, 3] )</code></li>\n</ul>\n<h3>Download</h3>\n<pre><code>git clone https://github.com/denis-bz/intergrid.git\n    # ? pip install --user git+https://github.com/denis-bz/intergrid.git\n    # ? pip install --user intergrid\n\n# tell python where the intergrid directory is, e.g. in your ~/.bashrc:\n#   export PYTHONPATH=$PYTHONPATH:.../intergrid/\n\n# test in python or IPython:\nfrom intergrid.intergrid import Intergrid  # i.e. .../intergrid/intergrid.py\n</code></pre>\n<h3>Splines</h3>\n<p><code>Intergrid( ... order = 0 to 5 )</code> gives the spline order:<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>order=1</code>, the default, does bilinear, trilinear ...\ninterpolation, which looks at the grid data at all 4 8 16 .. 2^dim corners of\nthe box around each query point.<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>order=0</code> looks at only the one gridpoint\nnearest each query point \u2014 crude but fast.<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>order = 2 to 5</code> does spline interpolation on a uniform\nor uniformized grid, looking at (order+1)^dim neighbors of each query point.</p>\n<p><code>Intergrid( ... prefilter = False | True | 1/3 )</code>\nspecifies the kind of spline, for <code>order &gt;= 2</code>:<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>prefilter=0</code> or <code>False</code>, the default: B-spline<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>prefilter=1</code> or <code>True</code>: exact-fit spline<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>prefilter=1/3</code>: M-N spline.<br>\nA B-spline goes through smoothed data points,\nwith [1 4 1] smoothing, [0 0 1 0 0] -&gt; [0 1 4 1 0] / 6.<br>\nAn exact-fit a.k.a interpolating spline\ngoes through the data points exactly.\nThis is not what you want for noisy data,\nand may also wiggle or overshoot more than B-splines do.<br>\nAn M-N spline blends 1/3 B-spline and 2/3 exact-fit; see\nMitchell and Netravali,\n<a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.125.201&amp;rep=rep1&amp;type=pdf\" rel=\"nofollow\">Reconstruction filters in computer-graphics</a> ,\n1988, and the plots from <code>intergrid/test/MNspline.py</code>.</p>\n&lt;small&gt;\nFine print: Exact-fit or interpolating splines can be local or global.\nCatmull-Rom splines and the original M-N splines are local:\nthey look at 4 neighbors of each query point in 1d, 16 in 2d, 64 in 3d.\nPrefiltering is global, with IIR falloff ~ 1 / 4^distance.\n(I don't know of test images that show a visible difference to local C-R).\nConfusingly, the term \"Cardinal spline\" is sometimes used\nfor local (C-R, FIR),\nand sometimes for global (IIR prefilter, then B-spline).\n<p>Prefiltering is a clever transformation\nsuch that <code>Bspline( transform( data )) = exactfitspline( data )</code>.\nIt is described in a paper by M. Unser,\n<a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.19.6706&amp;rep=rep1&amp;type=pdf\" rel=\"nofollow\">Splines: A perfect fit for signal and image processing</a> ,\n1999.\n&lt;/small&gt;</p>\n<p>Uniformizing a grid with PWL, then uniform-splining, is fast and simple,\nbut not as smooth as true splining on the original non-uniform grid.\nThe differences will of course depend on the grid spacings\nand on how rough the function is.</p>\n<h3>Notes</h3>\n<p>Run any interpolator on <em>your</em> data with orders 0, 1 ...\nto get an idea of how the results get smoother, and take longer.\nCheck a few query points by hand; plot some cross-sections.</p>\n<p><code>griddata</code> values can be of any numpy integer or floating type: int8 uint8\n.. int32 int64 float32 float64.\nBeware of overflow: interpolating uint8 s can give values outside the range 0 .. 255.\n(Interpolation in <code>d</code> dimensions can overshoot by (9/8)^d .)\n<code>np.float32</code> will use less memory than <code>np.float64</code>,\nbut beware of functions in the flow that silently convert everything\nto float64.  The values must be numbers, not vectors.</p>\n<p>Coordinate scaling doesn't matter to <code>Intergrid</code>;\ncorner weights are calculated in unit cubes of <code>griddata</code>,\nafter scaling and mapping. If for example griddata column 3\nis multiplied by 1000, and lo[3] hi[3] too, the weights are unchanged.</p>\n<p>Box grids get big and slow above 5d.\nA cube with steps 0 .1 .2 .. 1.0 in all dimensions\nhas 11^6 ~ 1.8M points in 6d, 11^8 ~ 200M in 8d.\nOne can reduce that only with a coarser grid like 0 .5 1 in some dimensions\n(those that vary the least).\nBut time ~ 2^d per query point grows pretty fast.</p>\n<p><code>map_coordinates</code> in 5d with <code>order=1</code> looks at 32 corner values, with average weight 3 %.\nIf the weights are roughly equal\n(which they will tend to be, by the central limit theorem ?),\nsharp edges or gradients will be blurred, and colors mixed to a grey fog.</p>\n<p>To see how different interpolators affect images, run matplotlib\n<code>plt.imshow( interpolation = \"nearest\" / \"bilinear\" / ... )</code> .</p>\n<h3>Kinds of grids</h3>\n<p>Terminology varies, so the basic kinds of box grids\na.k.a. rectangular grids are defined here.</p>\n<p>An integer or Cartesian grid has integer coordinates,\ne.g.  2 x 3 x 5 points in a numpy array:\n<code>A = np.array((2,3,5)); A[0,0,0], A[0,0,1] .. A[1,2,4]</code>.</p>\n<p>A uniform box grid has nx x ny x nz ... points uniformly spaced,\nlinspace x linspace x linspace ...\nso all boxes have the same size and are axis-aligned.\nExamples: 1024 x 768 pixels on a screen,\nor 4 x 5 points at latitudes [10 20 30 40] x longitudes [-10 -9 -8 -7 -6].</p>\n<p>A non-uniform box grid also has nx x ny x nz ... points,\nbut allows non-uniform spacings,\ne.g. latitudes [-10 0 60 70] x longitudes [-10 -9 0 20 40];\nthe boxes have different sizes but are still axis-aligned.</p>\n<p>(Scattered data, as the name says, has points anywhere,\nnot only on grid lines.\nTo interpolate scattered data in <code>scipy</code>, see\n<a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.griddata.html\" rel=\"nofollow\">scipy.interpolate.griddata</a>\nand\n<a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.html\" rel=\"nofollow\">scipy.spatial.cKDTree</a>\n.)</p>\n<p>There are countless varieties of grids:\ngrids with holes, grids warped to various map projections,\nmultiscale / multiresolution grids ...</p>\n<h3>Run times</h3>\n<p>See intergrid/test/test-4d.py: a 4d grid with 1M scattered query points,\nuniform / non-uniform box grid, on a 2.5Gz i5 iMac:</p>\n<pre><code>shape (361, 720, 47, 8)  98M * 8\nIntergrid: 617 msec  1000000 points in a (361, 720, 47, 8) grid  0 maps  order 1\nIntergrid: 788 msec  1000000 points in a (361, 720, 47, 8) grid  4 maps  order 1\n</code></pre>\n<h3>See also</h3>\n<p><a href=\"https://docs.scipy.org/doc/scipy-dev/reference/generated/scipy.ndimage.interpolation.map_coordinates.html\" rel=\"nofollow\">scipy.ndimage.interpolation.map_coordinates</a><br>\n<a href=\"https://docs.scipy.org/doc/scipy/reference/tutorial/ndimage.html\" rel=\"nofollow\">scipy reference ndimage</a><br>\n<a href=\"https://stackoverflow.com/questions/tagged/scipy+interpolation\" rel=\"nofollow\">stackoverflow.com/questions/tagged/scipy+interpolation</a><br>\n<a href=\"https://github.com/denis-bz/interpol\" rel=\"nofollow\">interpol 2014</a> -- intergrid + barypol<br>\nGoogle \"regrid | resample\"<br>\n<code>pip search interpol</code> (also gets string interpolation)</p>\n<h3>Comments welcome</h3>\n<p>and testcases most welcome<br>\n\u2014 denis-bz-py at t-online dot de</p>\n\n          </div>"}, "last_serial": 6681434, "releases": {"2020.2.20": [{"comment_text": "", "digests": {"md5": "3474befcf7cc0891a3e8ea9ad93ad622", "sha256": "91f19439271dc1ff147741d9f20b787e80c03f945b1f5c4d9fce8389f8a26d31"}, "downloads": -1, "filename": "intergrid-2020.2.20-py3-none-any.whl", "has_sig": false, "md5_digest": "3474befcf7cc0891a3e8ea9ad93ad622", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13154, "upload_time": "2020-02-22T18:02:33", "upload_time_iso_8601": "2020-02-22T18:02:33.050672Z", "url": "https://files.pythonhosted.org/packages/6e/92/4e9421b665da2b6142000b1937b03312cf5ed97236d24cb0ac41daeb53c4/intergrid-2020.2.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8616d00228d0ec1e9806fb8a7eae3d1e", "sha256": "f31a58ee26e88705260c7e5dbedf46b1a797ffd84ea1aeff85782dfead754253"}, "downloads": -1, "filename": "intergrid-2020.2.20.tar.gz", "has_sig": false, "md5_digest": "8616d00228d0ec1e9806fb8a7eae3d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15255, "upload_time": "2020-02-22T18:02:35", "upload_time_iso_8601": "2020-02-22T18:02:35.447821Z", "url": "https://files.pythonhosted.org/packages/67/17/d514b09728e70993c0df028d91fe25a8bb22a5a74d5eb76cf6bd377e2c52/intergrid-2020.2.20.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3474befcf7cc0891a3e8ea9ad93ad622", "sha256": "91f19439271dc1ff147741d9f20b787e80c03f945b1f5c4d9fce8389f8a26d31"}, "downloads": -1, "filename": "intergrid-2020.2.20-py3-none-any.whl", "has_sig": false, "md5_digest": "3474befcf7cc0891a3e8ea9ad93ad622", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13154, "upload_time": "2020-02-22T18:02:33", "upload_time_iso_8601": "2020-02-22T18:02:33.050672Z", "url": "https://files.pythonhosted.org/packages/6e/92/4e9421b665da2b6142000b1937b03312cf5ed97236d24cb0ac41daeb53c4/intergrid-2020.2.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8616d00228d0ec1e9806fb8a7eae3d1e", "sha256": "f31a58ee26e88705260c7e5dbedf46b1a797ffd84ea1aeff85782dfead754253"}, "downloads": -1, "filename": "intergrid-2020.2.20.tar.gz", "has_sig": false, "md5_digest": "8616d00228d0ec1e9806fb8a7eae3d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15255, "upload_time": "2020-02-22T18:02:35", "upload_time_iso_8601": "2020-02-22T18:02:35.447821Z", "url": "https://files.pythonhosted.org/packages/67/17/d514b09728e70993c0df028d91fe25a8bb22a5a74d5eb76cf6bd377e2c52/intergrid-2020.2.20.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:29 2020"}