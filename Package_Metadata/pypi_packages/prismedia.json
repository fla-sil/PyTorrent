{"info": {"author": "LecygneNoir", "author_email": "git@lecygnenoir.info", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Affero General Public License v3", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Prismedia\n\nScripting your way to upload videos to peertube and youtube. Works with Python 3.5+.\n\n[TOC]: #\n\n## Table of Contents\n- [Installation](#installation)\n  - [From pip](#from-pip)\n  - [From source](#from-source)\n- [Configuration](#configuration)\n  - [Peertube](#peertube)\n  - [Youtube](#youtube)\n- [Usage](#usage)\n- [Enhanced use of NFO](#enhanced-use-of-nfo)\n- [Features](#features)\n- [Compatibility](#compatibility)\n- [Sources](#sources)\n- [Contributors](#contributors)\n\n## Installation an upgrade\n\n### From pip\n\nSimply install with \n\n```bash\npip install prismedia\n```\n\nUpgrade with \n\n```bash\npip install --upgrade prismedia\n```\n\n### From source\n\nGet the source: \n\n```bash\ngit clone https://git.lecygnenoir.info/LecygneNoir/prismedia.git prismedia\n```\n\nYou may use pip to install requirements: `pip install -r requirements.txt` if you want to use the script directly.  \n(*note:* requirements are generated via `poetry export -f requirements.txt`)\n\nOtherwise, you can use [poetry](https://python-poetry.org), which create a virtualenv for the project directly  \n(Or use the existing virtualenv if one is activated)\n\n```\npoetry install\n```\n\n\n## Configuration\n\nGenerate sample files with `python -m prismedia.genconfig`.  \nThen rename and edit `peertube_secret` and `youtube_secret.json` with your credentials. (see below)\n\n### Peertube\nSet your credentials, peertube server URL.  \nYou can get client_id and client_secret by logging in your peertube website and reaching the URL:  \nhttps://domain.example/api/v1/oauth-clients/local  \nYou can set ``OAUTHLIB_INSECURE_TRANSPORT`` to 1 if you do not use https (not recommended)\n\n### Youtube\nYoutube uses combination of oauth and API access to identify.\n\n**Credentials**\nThe first time you connect, prismedia will open your browser to ask you to authenticate to\nYoutube and allow the app to use your Youtube channel.  \n**It is here you choose which channel you will upload to**.  \nOnce authenticated, the token is stored inside the file ``.youtube_credentials.json``.  \nPrismedia will try to use this file at each launch, and re-ask for authentication if it does not exist.\n\n**Oauth**:  \nThe default youtube_secret.json should allow you to upload some videos.  \nIf you plan a larger usage, please consider creating your own youtube_secret file:\n\n - Go to the [Google console](https://console.developers.google.com/).\n - Create project.\n - Side menu: APIs & auth -> APIs\n - Top menu: Enabled API(s): Enable all Youtube APIs.\n - Side menu: APIs & auth -> Credentials.\n - Create a Client ID: Add credentials -> OAuth 2.0 Client ID -> Other -> Name: prismedia1 -> Create -> OK\n - Download JSON: Under the section \"OAuth 2.0 client IDs\". Save the file to your local system.\n - Save this JSON as your youtube_secret.json file.\n\n## Usage\nSupport only mp4 for cross compatibility between Youtube and Peertube.  \n**Note that all options may be specified in a NFO file!** (see [Enhanced NFO](#enhanced-use-of-nfo))\n\nUpload a video:\n\n```\nprismedia --file=\"yourvideo.mp4\"\n```\n\nSpecify description and tags:\n\n```\nprismedia --file=\"yourvideo.mp4\" -d \"My supa description\" -t \"tag1,tag2,foo\"\n```\n\nProvide a thumbnail:\n\n```\nprismedia --file=\"yourvideo.mp4\" -d \"Video with thumbnail\" --thumbnail=\"/path/to/your/thumbnail.jpg\"\n```\n\n\nUse a NFO file to specify your video options:  \n(See [Enhanced NFO](#enhanced-use-of-nfo) for more precise example)\n```\nprismedia --file=\"yourvideo.mp4\" --nfo /path/to/your/nfo.txt\n```\n\n\nUse --help to get all available options:\n\n```\nOptions:\n  -f, --file=STRING Path to the video file to upload in mp4\n  --name=NAME  Name of the video to upload. (default to video filename)\n  --debug  Trigger some debug information like options used (default: no)\n  -d, --description=STRING  Description of the video. (default: default description)\n  -t, --tags=STRING  Tags for the video. comma separated.\n                     WARN: tags with punctuation (!, ', \", ?, ...)\n                           are not supported by Mastodon to be published from Peertube\n  -c, --category=STRING  Category for the videos, see below. (default: Films)\n  --cca  License should be CreativeCommon Attribution (affects Youtube upload only)\n  -p, --privacy=STRING  Choose between public, unlisted or private. (default: private)\n  --disable-comments  Disable comments (Peertube only as YT API does not support) (default: comments are enabled)\n  --nsfw  Set the video as No Safe For Work (Peertube only as YT API does not support) (default: video is safe)\n  --nfo=STRING  Configure a specific nfo file to set options for the video.\n                By default Prismedia search a .txt based on the video name and will\n                decode the file as UTF-8 (so make sure your nfo file is UTF-8 encoded)\n                See nfo_example.txt for more details\n  --platform=STRING  List of platform(s) to upload to, comma separated.\n                     Supported platforms are youtube and peertube (default is both)\n  --language=STRING  Specify the default language for video. See below for supported language. (default is English)\n  --publishAt=DATE  Publish the video at the given DATE using local server timezone.\n                    DATE should be on the form YYYY-MM-DDThh:mm:ss eg: 2018-03-12T19:00:00\n                    DATE should be in the future\n  --peertubeAt=DATE\n  --youtubeAt=DATE  Override publishAt for the corresponding platform. Allow to create preview on specific platform\n  --thumbnail=STRING    Path to a file to use as a thumbnail for the video.\n                        Supported types are jpg and jpeg.\n                        By default, prismedia search for an image based on video name followed by .jpg or .jpeg\n  --channel=STRING Set the channel to use for the video (Peertube only)\n                    If the channel is not found, spawn an error except if --channelCreate is set.\n  --channelCreate  Create the channel if not exists. (Peertube only, default do not create)\n                   Only relevant if --channel is set.\n  --playlist=STRING Set the playlist to use for the video.\n                    If the playlist is not found, spawn an error except if --playlistCreate is set.\n  --playlistCreate  Create the playlist if not exists. (default do not create)\n                    Only relevant if --playlist is set.\n  -h --help  Show this help.\n  --version  Show version.\n\nCategories:\n  Category is the type of video you upload. Default is films.\n  Here are available categories from Peertube and Youtube:\n    music, films, vehicles,\n    sports, travels, gaming, people,\n    comedy, entertainment, news,\n    how to, education, activism, science & technology,\n    science, technology, animals\n\nLanguages:\n  Language of the video (audio track), choose one. Default is English\n  Here are available languages from Peertube and Youtube:\n    Arabic, English, French, German, Hindi, Italian,\n    Japanese, Korean, Mandarin, Portuguese, Punjabi, Russian, Spanish\n```\n\n## Enhanced use of NFO\nSince Prismedia v0.9.0, the NFO system has been improved to allow hierarchical loading.\nFirst of all, **if you already used nfo**, either with `--nfo` or by using `videoname.txt`, nothing changes :-)\n\nBut you are now able to use a more flexible NFO system, by using priorities. This allow you to set some defaults to avoid recreating a full nfo for each video\n\nBasically, Prismedia will now load options in this order, using the last value found in case of conflict:  \n`nfo.txt < directory_name.txt < video_name.txt < command line NFO < command line argument`\n\nYou'll find a complete set of samples in the [prismedia/samples](prismedia/samples) directory so let's take it as an example:\n```\n$ tree Recipes/\nRecipes/\n\u251c\u2500\u2500 cli_nfo.txt\n\u251c\u2500\u2500 nfo.txt\n\u251c\u2500\u2500 samples.txt\n\u251c\u2500\u2500 yourvideo1.mp4\n\u251c\u2500\u2500 yourvideo1.txt\n\u251c\u2500\u2500 yourvideo1.jpg\n\u251c\u2500\u2500 yourvideo2.mp4\n\u2514\u2500\u2500 yourvideo2.txt\n```\n\nBy using \n```\nprismedia --file=/path/to/Recipes/yourvideo1.mp4 --nfo=/path/to/Recipes/cli_nfo.txt --cca\n```\n\nPrismedia will:\n- look for options in `nfo.txt`\n- look for options in `samples.txt` (from directory name) and erase any previous conflicting options\n- look for options in `yourvideo1.txt` (from video name) and erase any previous conflicting options\n- look for options in `cli_nfo.txt` (from the `--nfo` in command line) and erase any previous conflicting options\n- erase any previous option regarding CCA as it's specified in cli with `--cca`\n- take `yourvideo1.jpg` as thumbnail if no other files has been specified in previous NFO\n\nIn other word, Prismedia will now use option given in cli, then look for option in cli_nfo.txt, then complete with video_name.txt, then directory_name.txt, and finally complete with nfo.txt\n\nIt allows to specify more easily default options for an entire set of video, directory, playlist and so on.\n\n## Features\n\n- [x] Youtube upload\n- [x] Peertube upload\n- Support of videos parameters (description, tags, category, licence, ...)\n  - [x] description\n  - [x] tags (no more than 30 characters per tag as Peertube does not support it)\n  - [x] categories\n  - [x] license: cca or not (Youtube only as Peertube uses Attribution by design)\n  - [x] privacy (between public, unlisted or private)\n  - [x] enabling/disabling comment (Peertube only as Youtube API does not support it)\n  - [x] nsfw (Peertube only as Youtube API does not support it)\n  - [x] set default language\n  - [x] thumbnail\n  - [x] multiple lines description (see [issue 4](https://git.lecygnenoir.info/LecygneNoir/prismedia/issues/4))\n  - [x] add videos to playlist\n  - [x] create playlist\n  - [x] schedule your video with publishAt\n  - [x] combine channel and playlist (Peertube only as channel is Peertube feature). See [issue 40](https://git.lecygnenoir.info/LecygneNoir/prismedia/issues/40) for detailed usage.\n- [x] Use a config file (NFO) file to retrieve videos arguments\n- [x] Allow to choose peertube or youtube upload (to resume failed upload for example)\n- [x] Usable on Desktop (Linux and/or Windows and/or MacOS)\n- [x] Different schedules on platforms to prepare preview\n- [ ] A usable graphical interface\n\n## Compatibility\n\n - If you still use python2, use the version 0.7.1 (no more updated)\n - If you use peertube before 1.0.0-beta4, use the version inside tag 1.0.0-beta3\n\n## Sources\ninspired by [peeror](https://git.rigelk.eu/rigelk/peeror) and [youtube-upload](https://github.com/tokland/youtube-upload)\n\n## Contributors\nThanks to: @Zykino, @meewan, @rigelk \ud83d\ude18", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.lecygnenoir.info/LecygneNoir/prismedia", "keywords": "peertube,youtube,prismedia", "license": "AGPL-3.0-only", "maintainer": "", "maintainer_email": "", "name": "prismedia", "package_url": "https://pypi.org/project/prismedia/", "platform": "", "project_url": "https://pypi.org/project/prismedia/", "project_urls": {"Homepage": "https://git.lecygnenoir.info/LecygneNoir/prismedia", "Repository": "https://git.lecygnenoir.info/LecygneNoir/prismedia"}, "release_url": "https://pypi.org/project/prismedia/0.9.1/", "requires_dist": ["configparser (>=3.7.1,<4.0.0)", "docopt (>=0.6.2,<0.7.0)", "future (>=0.17.1,<0.18.0)", "google-api-python-client (>=1.7.6,<2.0.0)", "google-auth (>=1.6.1,<2.0.0)", "google-auth-httplib2 (>=0.0.3,<0.0.4)", "google-auth-oauthlib (>=0.2.0,<0.3.0)", "httplib2 (>=0.12.1,<0.13.0)", "oauthlib (>=2.1.0,<3.0.0)", "python-magic (>=0.4.15,<0.5.0)", "python-magic-bin (>=0.4.14,<0.5.0); platform_system == \"Windows\"", "requests (>=2.18.4,<3.0.0)", "requests-oauthlib (>=0.8.0,<0.9.0)", "requests-toolbelt (>=0.9.1,<0.10.0)", "schema (>=0.6.8,<0.7.0)", "tzlocal (>=1.5.1,<2.0.0)", "Unidecode (>=1.0.23,<2.0.0)", "uritemplate (>=3.0.0,<4.0.0)", "urllib3 (>=1.22,<2.0)"], "requires_python": ">=3.5", "summary": "scripting your way to upload videos on peertube and youtube", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Prismedia</h1>\n<p>Scripting your way to upload videos to peertube and youtube. Works with Python 3.5+.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#from-pip\" rel=\"nofollow\">From pip</a></li>\n<li><a href=\"#from-source\" rel=\"nofollow\">From source</a></li>\n</ul>\n</li>\n<li><a href=\"#configuration\" rel=\"nofollow\">Configuration</a>\n<ul>\n<li><a href=\"#peertube\" rel=\"nofollow\">Peertube</a></li>\n<li><a href=\"#youtube\" rel=\"nofollow\">Youtube</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#enhanced-use-of-nfo\" rel=\"nofollow\">Enhanced use of NFO</a></li>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#compatibility\" rel=\"nofollow\">Compatibility</a></li>\n<li><a href=\"#sources\" rel=\"nofollow\">Sources</a></li>\n<li><a href=\"#contributors\" rel=\"nofollow\">Contributors</a></li>\n</ul>\n<h2>Installation an upgrade</h2>\n<h3>From pip</h3>\n<p>Simply install with</p>\n<pre>pip install prismedia\n</pre>\n<p>Upgrade with</p>\n<pre>pip install --upgrade prismedia\n</pre>\n<h3>From source</h3>\n<p>Get the source:</p>\n<pre>git clone https://git.lecygnenoir.info/LecygneNoir/prismedia.git prismedia\n</pre>\n<p>You may use pip to install requirements: <code>pip install -r requirements.txt</code> if you want to use the script directly.<br>\n(<em>note:</em> requirements are generated via <code>poetry export -f requirements.txt</code>)</p>\n<p>Otherwise, you can use <a href=\"https://python-poetry.org\" rel=\"nofollow\">poetry</a>, which create a virtualenv for the project directly<br>\n(Or use the existing virtualenv if one is activated)</p>\n<pre><code>poetry install\n</code></pre>\n<h2>Configuration</h2>\n<p>Generate sample files with <code>python -m prismedia.genconfig</code>.<br>\nThen rename and edit <code>peertube_secret</code> and <code>youtube_secret.json</code> with your credentials. (see below)</p>\n<h3>Peertube</h3>\n<p>Set your credentials, peertube server URL.<br>\nYou can get client_id and client_secret by logging in your peertube website and reaching the URL:<br>\n<a href=\"https://domain.example/api/v1/oauth-clients/local\" rel=\"nofollow\">https://domain.example/api/v1/oauth-clients/local</a><br>\nYou can set <code>OAUTHLIB_INSECURE_TRANSPORT</code> to 1 if you do not use https (not recommended)</p>\n<h3>Youtube</h3>\n<p>Youtube uses combination of oauth and API access to identify.</p>\n<p><strong>Credentials</strong>\nThe first time you connect, prismedia will open your browser to ask you to authenticate to\nYoutube and allow the app to use your Youtube channel.<br>\n<strong>It is here you choose which channel you will upload to</strong>.<br>\nOnce authenticated, the token is stored inside the file <code>.youtube_credentials.json</code>.<br>\nPrismedia will try to use this file at each launch, and re-ask for authentication if it does not exist.</p>\n<p><strong>Oauth</strong>:<br>\nThe default youtube_secret.json should allow you to upload some videos.<br>\nIf you plan a larger usage, please consider creating your own youtube_secret file:</p>\n<ul>\n<li>Go to the <a href=\"https://console.developers.google.com/\" rel=\"nofollow\">Google console</a>.</li>\n<li>Create project.</li>\n<li>Side menu: APIs &amp; auth -&gt; APIs</li>\n<li>Top menu: Enabled API(s): Enable all Youtube APIs.</li>\n<li>Side menu: APIs &amp; auth -&gt; Credentials.</li>\n<li>Create a Client ID: Add credentials -&gt; OAuth 2.0 Client ID -&gt; Other -&gt; Name: prismedia1 -&gt; Create -&gt; OK</li>\n<li>Download JSON: Under the section \"OAuth 2.0 client IDs\". Save the file to your local system.</li>\n<li>Save this JSON as your youtube_secret.json file.</li>\n</ul>\n<h2>Usage</h2>\n<p>Support only mp4 for cross compatibility between Youtube and Peertube.<br>\n<strong>Note that all options may be specified in a NFO file!</strong> (see <a href=\"#enhanced-use-of-nfo\" rel=\"nofollow\">Enhanced NFO</a>)</p>\n<p>Upload a video:</p>\n<pre><code>prismedia --file=\"yourvideo.mp4\"\n</code></pre>\n<p>Specify description and tags:</p>\n<pre><code>prismedia --file=\"yourvideo.mp4\" -d \"My supa description\" -t \"tag1,tag2,foo\"\n</code></pre>\n<p>Provide a thumbnail:</p>\n<pre><code>prismedia --file=\"yourvideo.mp4\" -d \"Video with thumbnail\" --thumbnail=\"/path/to/your/thumbnail.jpg\"\n</code></pre>\n<p>Use a NFO file to specify your video options:<br>\n(See <a href=\"#enhanced-use-of-nfo\" rel=\"nofollow\">Enhanced NFO</a> for more precise example)</p>\n<pre><code>prismedia --file=\"yourvideo.mp4\" --nfo /path/to/your/nfo.txt\n</code></pre>\n<p>Use --help to get all available options:</p>\n<pre><code>Options:\n  -f, --file=STRING Path to the video file to upload in mp4\n  --name=NAME  Name of the video to upload. (default to video filename)\n  --debug  Trigger some debug information like options used (default: no)\n  -d, --description=STRING  Description of the video. (default: default description)\n  -t, --tags=STRING  Tags for the video. comma separated.\n                     WARN: tags with punctuation (!, ', \", ?, ...)\n                           are not supported by Mastodon to be published from Peertube\n  -c, --category=STRING  Category for the videos, see below. (default: Films)\n  --cca  License should be CreativeCommon Attribution (affects Youtube upload only)\n  -p, --privacy=STRING  Choose between public, unlisted or private. (default: private)\n  --disable-comments  Disable comments (Peertube only as YT API does not support) (default: comments are enabled)\n  --nsfw  Set the video as No Safe For Work (Peertube only as YT API does not support) (default: video is safe)\n  --nfo=STRING  Configure a specific nfo file to set options for the video.\n                By default Prismedia search a .txt based on the video name and will\n                decode the file as UTF-8 (so make sure your nfo file is UTF-8 encoded)\n                See nfo_example.txt for more details\n  --platform=STRING  List of platform(s) to upload to, comma separated.\n                     Supported platforms are youtube and peertube (default is both)\n  --language=STRING  Specify the default language for video. See below for supported language. (default is English)\n  --publishAt=DATE  Publish the video at the given DATE using local server timezone.\n                    DATE should be on the form YYYY-MM-DDThh:mm:ss eg: 2018-03-12T19:00:00\n                    DATE should be in the future\n  --peertubeAt=DATE\n  --youtubeAt=DATE  Override publishAt for the corresponding platform. Allow to create preview on specific platform\n  --thumbnail=STRING    Path to a file to use as a thumbnail for the video.\n                        Supported types are jpg and jpeg.\n                        By default, prismedia search for an image based on video name followed by .jpg or .jpeg\n  --channel=STRING Set the channel to use for the video (Peertube only)\n                    If the channel is not found, spawn an error except if --channelCreate is set.\n  --channelCreate  Create the channel if not exists. (Peertube only, default do not create)\n                   Only relevant if --channel is set.\n  --playlist=STRING Set the playlist to use for the video.\n                    If the playlist is not found, spawn an error except if --playlistCreate is set.\n  --playlistCreate  Create the playlist if not exists. (default do not create)\n                    Only relevant if --playlist is set.\n  -h --help  Show this help.\n  --version  Show version.\n\nCategories:\n  Category is the type of video you upload. Default is films.\n  Here are available categories from Peertube and Youtube:\n    music, films, vehicles,\n    sports, travels, gaming, people,\n    comedy, entertainment, news,\n    how to, education, activism, science &amp; technology,\n    science, technology, animals\n\nLanguages:\n  Language of the video (audio track), choose one. Default is English\n  Here are available languages from Peertube and Youtube:\n    Arabic, English, French, German, Hindi, Italian,\n    Japanese, Korean, Mandarin, Portuguese, Punjabi, Russian, Spanish\n</code></pre>\n<h2>Enhanced use of NFO</h2>\n<p>Since Prismedia v0.9.0, the NFO system has been improved to allow hierarchical loading.\nFirst of all, <strong>if you already used nfo</strong>, either with <code>--nfo</code> or by using <code>videoname.txt</code>, nothing changes :-)</p>\n<p>But you are now able to use a more flexible NFO system, by using priorities. This allow you to set some defaults to avoid recreating a full nfo for each video</p>\n<p>Basically, Prismedia will now load options in this order, using the last value found in case of conflict:<br>\n<code>nfo.txt &lt; directory_name.txt &lt; video_name.txt &lt; command line NFO &lt; command line argument</code></p>\n<p>You'll find a complete set of samples in the <a href=\"prismedia/samples\" rel=\"nofollow\">prismedia/samples</a> directory so let's take it as an example:</p>\n<pre><code>$ tree Recipes/\nRecipes/\n\u251c\u2500\u2500 cli_nfo.txt\n\u251c\u2500\u2500 nfo.txt\n\u251c\u2500\u2500 samples.txt\n\u251c\u2500\u2500 yourvideo1.mp4\n\u251c\u2500\u2500 yourvideo1.txt\n\u251c\u2500\u2500 yourvideo1.jpg\n\u251c\u2500\u2500 yourvideo2.mp4\n\u2514\u2500\u2500 yourvideo2.txt\n</code></pre>\n<p>By using</p>\n<pre><code>prismedia --file=/path/to/Recipes/yourvideo1.mp4 --nfo=/path/to/Recipes/cli_nfo.txt --cca\n</code></pre>\n<p>Prismedia will:</p>\n<ul>\n<li>look for options in <code>nfo.txt</code></li>\n<li>look for options in <code>samples.txt</code> (from directory name) and erase any previous conflicting options</li>\n<li>look for options in <code>yourvideo1.txt</code> (from video name) and erase any previous conflicting options</li>\n<li>look for options in <code>cli_nfo.txt</code> (from the <code>--nfo</code> in command line) and erase any previous conflicting options</li>\n<li>erase any previous option regarding CCA as it's specified in cli with <code>--cca</code></li>\n<li>take <code>yourvideo1.jpg</code> as thumbnail if no other files has been specified in previous NFO</li>\n</ul>\n<p>In other word, Prismedia will now use option given in cli, then look for option in cli_nfo.txt, then complete with video_name.txt, then directory_name.txt, and finally complete with nfo.txt</p>\n<p>It allows to specify more easily default options for an entire set of video, directory, playlist and so on.</p>\n<h2>Features</h2>\n<ul>\n<li>[x] Youtube upload</li>\n<li>[x] Peertube upload</li>\n<li>Support of videos parameters (description, tags, category, licence, ...)\n<ul>\n<li>[x] description</li>\n<li>[x] tags (no more than 30 characters per tag as Peertube does not support it)</li>\n<li>[x] categories</li>\n<li>[x] license: cca or not (Youtube only as Peertube uses Attribution by design)</li>\n<li>[x] privacy (between public, unlisted or private)</li>\n<li>[x] enabling/disabling comment (Peertube only as Youtube API does not support it)</li>\n<li>[x] nsfw (Peertube only as Youtube API does not support it)</li>\n<li>[x] set default language</li>\n<li>[x] thumbnail</li>\n<li>[x] multiple lines description (see <a href=\"https://git.lecygnenoir.info/LecygneNoir/prismedia/issues/4\" rel=\"nofollow\">issue 4</a>)</li>\n<li>[x] add videos to playlist</li>\n<li>[x] create playlist</li>\n<li>[x] schedule your video with publishAt</li>\n<li>[x] combine channel and playlist (Peertube only as channel is Peertube feature). See <a href=\"https://git.lecygnenoir.info/LecygneNoir/prismedia/issues/40\" rel=\"nofollow\">issue 40</a> for detailed usage.</li>\n</ul>\n</li>\n<li>[x] Use a config file (NFO) file to retrieve videos arguments</li>\n<li>[x] Allow to choose peertube or youtube upload (to resume failed upload for example)</li>\n<li>[x] Usable on Desktop (Linux and/or Windows and/or MacOS)</li>\n<li>[x] Different schedules on platforms to prepare preview</li>\n<li>[ ] A usable graphical interface</li>\n</ul>\n<h2>Compatibility</h2>\n<ul>\n<li>If you still use python2, use the version 0.7.1 (no more updated)</li>\n<li>If you use peertube before 1.0.0-beta4, use the version inside tag 1.0.0-beta3</li>\n</ul>\n<h2>Sources</h2>\n<p>inspired by <a href=\"https://git.rigelk.eu/rigelk/peeror\" rel=\"nofollow\">peeror</a> and <a href=\"https://github.com/tokland/youtube-upload\" rel=\"nofollow\">youtube-upload</a></p>\n<h2>Contributors</h2>\n<p>Thanks to: @Zykino, @meewan, @rigelk \ud83d\ude18</p>\n\n          </div>"}, "last_serial": 7098487, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "4063aaa6928ca28a4e800f98f9337a7d", "sha256": "3efa7282cee01725568f88ee10950538efbbec27ff6087a60257ead803a32c3c"}, "downloads": -1, "filename": "prismedia-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4063aaa6928ca28a4e800f98f9337a7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 33274, "upload_time": "2020-04-11T10:58:29", "upload_time_iso_8601": "2020-04-11T10:58:29.628843Z", "url": "https://files.pythonhosted.org/packages/72/03/69d7051e41767635305364b4b1360b1e8f9f11e46ac33d392654a73b42eb/prismedia-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a6e868906c40810a9715e5c183e7992", "sha256": "4851cf4d9f1aacaa24201f646364253808c4395165e0e10c82096da0e845adc1"}, "downloads": -1, "filename": "prismedia-0.9.0.tar.gz", "has_sig": false, "md5_digest": "7a6e868906c40810a9715e5c183e7992", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 33386, "upload_time": "2020-04-11T10:58:32", "upload_time_iso_8601": "2020-04-11T10:58:32.142131Z", "url": "https://files.pythonhosted.org/packages/82/86/bf2070988859bf32ff653a59ef642cd69790771f765673aa1da0b4831e78/prismedia-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "daa66cc895dc1fd54343f641bc4ad4dd", "sha256": "cadc482ccded405d45e814acd8a5f783be2ddbb139ead2563ab4c12c294fdfee"}, "downloads": -1, "filename": "prismedia-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "daa66cc895dc1fd54343f641bc4ad4dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 33564, "upload_time": "2020-04-25T08:33:52", "upload_time_iso_8601": "2020-04-25T08:33:52.660569Z", "url": "https://files.pythonhosted.org/packages/0a/7b/df069debdef588614075799debde73aecbb7f77d05dd5483f0be427f86a3/prismedia-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e336e5fa3681301a098ba1dabfd383e", "sha256": "ab4c942c1cc168944cd0452b492fa955af062c69f3128181662d95e9ed48a85a"}, "downloads": -1, "filename": "prismedia-0.9.1.tar.gz", "has_sig": false, "md5_digest": "0e336e5fa3681301a098ba1dabfd383e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 33919, "upload_time": "2020-04-25T08:33:54", "upload_time_iso_8601": "2020-04-25T08:33:54.159563Z", "url": "https://files.pythonhosted.org/packages/5a/ac/2e6cb69827a704470fc049b47ab60767a9fdf92788163b43710d80a84278/prismedia-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "daa66cc895dc1fd54343f641bc4ad4dd", "sha256": "cadc482ccded405d45e814acd8a5f783be2ddbb139ead2563ab4c12c294fdfee"}, "downloads": -1, "filename": "prismedia-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "daa66cc895dc1fd54343f641bc4ad4dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 33564, "upload_time": "2020-04-25T08:33:52", "upload_time_iso_8601": "2020-04-25T08:33:52.660569Z", "url": "https://files.pythonhosted.org/packages/0a/7b/df069debdef588614075799debde73aecbb7f77d05dd5483f0be427f86a3/prismedia-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e336e5fa3681301a098ba1dabfd383e", "sha256": "ab4c942c1cc168944cd0452b492fa955af062c69f3128181662d95e9ed48a85a"}, "downloads": -1, "filename": "prismedia-0.9.1.tar.gz", "has_sig": false, "md5_digest": "0e336e5fa3681301a098ba1dabfd383e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 33919, "upload_time": "2020-04-25T08:33:54", "upload_time_iso_8601": "2020-04-25T08:33:54.159563Z", "url": "https://files.pythonhosted.org/packages/5a/ac/2e6cb69827a704470fc049b47ab60767a9fdf92788163b43710d80a84278/prismedia-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:13 2020"}