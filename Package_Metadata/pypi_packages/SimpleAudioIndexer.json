{"info": {"author": "Alireza Rafiei (aalireza)", "author_email": "mail@rafiei.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP :: Indexing/Search", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "SimpleAudioIndexer\n==================\n\n.. image:: http://rafiei.net/assets/sai/sai_logo.png\n         :alt: Simple Audio Indexer: Index audio files and search for a word/phrase or match regex patterns \n         :align: center\n\n|build| |license| |docs| |python| |wheel|\n\n\n- `Description <#description>`__\n- `What can it do? <#what-can-it-do>`__\n- `Documentation <#documentation>`__\n- `Requirements <#requirements>`__\n- `Installation <#installation>`__\n- `Uninstallation <#uninstallation>`__\n- `Demo <#demo>`__\n- `Nice to implement in the future <#nice-to-implement-in-the-future>`__\n- `Contributing <#contributing>`__\n- `Authors <#authors>`__\n- `License <#license>`__\n\n\nDescription\n------------\n\nThis is a Python library and command-line tool that helps you search for a word\nor a phrase within an audio file (wav format). It also builts upon the initial\nsearching capability and provides some [so-called] advanced searching abilities!\n\n\nWhat can it do?\n---------------\n\n+ Index audio files (using Watson (Online/Higher-quality) or CMU Pocketsphinx (Offline/Lower-quality)) and save/load the results.\n+ Searching within audio files in multiple languages (default is English)\n+ Define a timing error for your queries to handle discrepencies.\n+ Define constraints on your queries, e.g. whether to include (sub/super)sequences,\n  results with missing words etc.\n+ Do full blown regex pattern matching!\n\n\nDocumentation\n-------------\n\nTo read the documentation, visit `here <http://simpleaudioindexer.readthedocs.io/>`__.\n\n\nRequirements\n------------\n\n+ Python (v2.7, 3.3, 3.4, 3.5 or 3.6) with pip installed.\n+ Watson API Credentials and/or CMU Pocketsphinx\n+ `sox`\n+ `ffmpeg` (if you choose CMU Pocketsphinx)\n+ `py.text` and `tox` (if you want to run the tests)\n\n\nInstallation\n--------------\nOpen up a terminal and enter:\n\n::\n\n  pip install SimpleAudioIndexer\n\n\nInstallation details can be found at the documentations `here <https://simpleaudioindexer.readthedocs.io/installation/>`__.\n\nThere's a `dockerfile <https://raw.githubusercontent.com/aalireza/SimpleAudioIndexer/master/Dockerfile>`_\nincluded withing the repo if you're unable to do a native installation or are\non a Windows system.\n\n\nUninstallation\n--------------\n\nOpen up a terminal and enter:\n\n::\n\n   pip uninstall SimpleAudioIndexer\n\nUninstalling `sox`, however, is dependent upon whether you're on a Linux or Mac\nsystem. For more information, visit `here <https://simpleaudioindexer.readthedocs.io/installation/#uninstall>`__.\n\n\nDemo\n----\n\nSay you have this audio file:\n\n|small_audio|\n\n\nHave it downloaded to an empty directory for simplicity. We'd refer to that\ndirectory as `SRC_DIR` and the name of this audio file as `small_audio.wav`.\n\nHere's how you can search through it.\n\nCommand-line Usage\n++++++++++++++++++\n\nOpen up a terminal and enter.\n\n::\n\n   $ sai --mode \"ibm\" --username_ibm USERNAME --password_ibm PASSWORD --src_dir SRC_DIR --search \"called\"\n\n   {'called': {'small_audio.wav': [(1.25, 1.71)]}}\n\nReplace `USERNAME` and `PASSWORD` with your IBM Watson's credentials and `SRC_DIR`\nwith the absolute path to the directory you just prepared.\n\nThe out would be, like above, a dictionary that has the query, the file(s) it\nappears in and the all of the (starting second, ending second) of that query.\n\nNote that all commands work uniformally for other engines (i.e. Pocketsphinx),\nfor example the command above can be enterred as:\n\n::\n\n   $ sai --mode \"cmu\" --src_dir SRC_DIR --search \"lives\"\n\n   {'our': {'small_audio': [(2.93, 3.09)]}}\n\nWhich would use Pocketsphinx instead of Watson to get the timestamps. Note that\nthe quality/accuracy of Pocketsphinx is much lower than Watson.\n\nInstead of searching for a word, you could also match a regex pattern, for example:\n\n::\n\n   $ sai --mode ibm --src_dir SRC_DIR --username_ibm USERNAME --password_ibm PASSWORD --regexp \" [a-z][a-z] \"\n\n   {u' in ': {'small_audio.wav': [(2.81, 2.93)]},\n   {u' to ': {'small_audio.wav': [(1.71, 1.81)]}}\n\nThat was the result of searching for two letter words. Note that your results\nwould match any aribtrary regular expressions. \n\nYou may also save and load the indexed data from the command line script. For\nmore information, visit `here <https://simpleaudioindexer.readthedocs.io/usage/#as-a-command-line-script>`__.\n\n\nLibrary Usage\n+++++++++++++\n\nSay you have this file\n\n.. code-block:: python\n\n  >>> from SimpleAudioIndexer import SimpleAudioIndexer as sai\n\nAfterwards, you should create an instance of `sai`\n\n.. code-block:: python\n\n  >>> indexer = sai(mode=\"ibm\", src_dir=\"SRC_DIR\", username_ibm=\"USERNAME\", password_ibm=\"PASSWORD\")\n\nNow you may index all the available audio files by calling `index_audio` method:\n\n.. code-block:: python\n\n  >>> indexer.index_audio()\n\nYou could have a searching generator:\n\n.. code-block:: python\n\n  >>> searcher = indexer.search_gen(query=\"called\")\n  # If you're on python 2.7, instead of below, do print searcher.next()\n  >>> print(next(searcher))\n  {'Query': 'called', 'File Name': 'small_audio.wav', 'Result': (1.25, 1.71)}\n\nNow there are quite a few more arguments implemented for search_gen. Say you\nwanted your search to be case sensitive (by default it's not).\nOr, say you wanted to look for a phrase but there's a timing gap and the indexer\ndidn't pick it up right, you could specify `timing_error`. Or, say some word is\ncompletely missed, then you could specify `missing_word_tolerance` etc.\n\nFor a full list, see the API reference `here <./reference.html\n#SimpleAudioIndexer.SimpleAudioIndexer.search_gen>`__\n\n\nNote that you could also call `search_all` method to have search for a list of\nqueries within all the audio files:\n\nFinally, you could do a regex search!\n\n.. code-block:: python\n\n   >>> print(indexer.search_regexp(pattern=\"[A-Z][^l]* \")\n   {u'Americans are ca': {'small_audio.wav': [(0.21, 1.71)]}}\n\nThere are more functionalities implemented. For detailed explainations, read the\ndocumentation `here <https://simpleaudioindexer.readthedocs.io/usage/#as-a-python-library>`__.\n\n\nNice to implement in the future\n--------------------------------\n\n- Uploading in parallel\n- More control structures for searching (Typos, phoneme based approximation of\n  words using CMU_DICT or NLTK etc.)\n- Searching for an unintelligible audio within the audio files. Possibly by\n  cross correlation or something similar.\n\n\nContributing\n-------------\n\nShould you want to contribute code or ideas, file a bug request or give\nfeedback, Visit the `CONTRIBUTING <https://github.com/aalireza/SimpleAudioIndexer/blob/master/CONTRIBUTING.rst>`_ file.\n\nAuthors\n-------\n\n+ **Alireza Rafiei** - `aalireza <https://github.com/aalireza>`_\n\nSee also the list of `contributors <https://github.com/aalireza/SimpleAudioIndexer/graphs/contributors>`_\nto this project.\n\nLicense\n-------\n\nThis project is licensed under the Apache v2.0 license - see the `LICENCE <https://github.com/aalireza/SimpleAudioIndexer/blob/master/LICENSE>`_\nfile for more details.\n\n\n.. |license| image:: https://img.shields.io/pypi/l/SimpleAudioIndexer.svg\n            :target: LICENSE\n            :alt: Apache v2.0 License\n\n.. |docs| image:: https://readthedocs.org/projects/simpleaudioindexer/badge/?version=latest\n         :target: http://simpleaudioindexer.readthedocs.io/?badge=latest\n         :alt: Documentation Status\n\n.. |build| image:: https://travis-ci.org/aalireza/SimpleAudioIndexer.svg?branch=master\n          :target: https://travis-ci.org/aalireza/SimpleAudioIndexer\n          :alt: Build status\n\n.. |python| image:: https://img.shields.io/pypi/pyversions/SimpleAudioIndexer.svg\n           :alt: Python 2,7, 3,3, 3.4, 3.5, 3.6 supported\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/SimpleAudioIndexer.svg \n          :alt: Wheel ready\n\n.. |small_audio| image:: http://rafiei.net/assets/play_button.png\n                :target: http://rafiei.net/assets/sai/small_audio.wav\n                :alt: Demo audio file\n\n.. _Documentation: https://github.com/aalireza/SimpleAudioIndexer/docs\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/aalireza/SimpleAudioIndexer/tarball/1.0.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aalireza/SimpleAudioIndexer", "keywords": "audio,indexing,search,ibm,watson,anagram,subsequence,supersequence,sequence,timestamp,cmu,sphinx,cpmsphinx,speech,speech recognition", "license": "Apache v2.0", "maintainer": "", "maintainer_email": "", "name": "SimpleAudioIndexer", "package_url": "https://pypi.org/project/SimpleAudioIndexer/", "platform": "", "project_url": "https://pypi.org/project/SimpleAudioIndexer/", "project_urls": {"Download": "https://github.com/aalireza/SimpleAudioIndexer/tarball/1.0.0", "Homepage": "https://github.com/aalireza/SimpleAudioIndexer"}, "release_url": "https://pypi.org/project/SimpleAudioIndexer/1.0.0/", "requires_dist": ["requests"], "requires_python": "", "summary": "Indexes audio files and searches for words/phrases or matches regex patterns within them.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"Simple Audio Indexer: Index audio files and search for a word/phrase or match regex patterns\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/631769ae148a5981c2bac7eecaa111fe10cb07b8/687474703a2f2f7261666965692e6e65742f6173736574732f7361692f7361695f6c6f676f2e706e67\">\n<p><a href=\"https://travis-ci.org/aalireza/SimpleAudioIndexer\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d77ad574f228eb4064e06d3bb5ff75006a8cbdd2/68747470733a2f2f7472617669732d63692e6f72672f61616c6972657a612f53696d706c65417564696f496e64657865722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"Apache v2.0 License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01a2d894a13f265f7e284ad937f0c5d76f4269e7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f53696d706c65417564696f496e64657865722e737667\"></a> <a href=\"http://simpleaudioindexer.readthedocs.io/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7bf9b12c8f5df9c03d40743dceb89eb4939c93a/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73696d706c65617564696f696e64657865722f62616467652f3f76657273696f6e3d6c6174657374\"></a> <img alt=\"Python 2,7, 3,3, 3.4, 3.5, 3.6 supported\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df8166fec2b7941858cd2dc8a7d93db280e8c925/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f53696d706c65417564696f496e64657865722e737667\"> <img alt=\"Wheel ready\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a70368dfb5d07b82328a99c9726c8b5a1b674ad/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f53696d706c65417564696f496e64657865722e737667\"></p>\n<ul>\n<li><a href=\"#description\" rel=\"nofollow\">Description</a></li>\n<li><a href=\"#what-can-it-do\" rel=\"nofollow\">What can it do?</a></li>\n<li><a href=\"#documentation\" rel=\"nofollow\">Documentation</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#uninstallation\" rel=\"nofollow\">Uninstallation</a></li>\n<li><a href=\"#demo\" rel=\"nofollow\">Demo</a></li>\n<li><a href=\"#nice-to-implement-in-the-future\" rel=\"nofollow\">Nice to implement in the future</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#authors\" rel=\"nofollow\">Authors</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<div id=\"description\">\n<h2>Description</h2>\n<p>This is a Python library and command-line tool that helps you search for a word\nor a phrase within an audio file (wav format). It also builts upon the initial\nsearching capability and provides some [so-called] advanced searching abilities!</p>\n</div>\n<div id=\"what-can-it-do\">\n<h2>What can it do?</h2>\n<ul>\n<li>Index audio files (using Watson (Online/Higher-quality) or CMU Pocketsphinx (Offline/Lower-quality)) and save/load the results.</li>\n<li>Searching within audio files in multiple languages (default is English)</li>\n<li>Define a timing error for your queries to handle discrepencies.</li>\n<li>Define constraints on your queries, e.g. whether to include (sub/super)sequences,\nresults with missing words etc.</li>\n<li>Do full blown regex pattern matching!</li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>To read the documentation, visit <a href=\"http://simpleaudioindexer.readthedocs.io/\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python (v2.7, 3.3, 3.4, 3.5 or 3.6) with pip installed.</li>\n<li>Watson API Credentials and/or CMU Pocketsphinx</li>\n<li><cite>sox</cite></li>\n<li><cite>ffmpeg</cite> (if you choose CMU Pocketsphinx)</li>\n<li><cite>py.text</cite> and <cite>tox</cite> (if you want to run the tests)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Open up a terminal and enter:</p>\n<pre>pip install SimpleAudioIndexer\n</pre>\n<p>Installation details can be found at the documentations <a href=\"https://simpleaudioindexer.readthedocs.io/installation/\" rel=\"nofollow\">here</a>.</p>\n<p>There\u2019s a <a href=\"https://raw.githubusercontent.com/aalireza/SimpleAudioIndexer/master/Dockerfile\" rel=\"nofollow\">dockerfile</a>\nincluded withing the repo if you\u2019re unable to do a native installation or are\non a Windows system.</p>\n</div>\n<div id=\"uninstallation\">\n<h2>Uninstallation</h2>\n<p>Open up a terminal and enter:</p>\n<pre>pip uninstall SimpleAudioIndexer\n</pre>\n<p>Uninstalling <cite>sox</cite>, however, is dependent upon whether you\u2019re on a Linux or Mac\nsystem. For more information, visit <a href=\"https://simpleaudioindexer.readthedocs.io/installation/#uninstall\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"demo\">\n<h2>Demo</h2>\n<p>Say you have this audio file:</p>\n<p><a href=\"http://rafiei.net/assets/sai/small_audio.wav\" rel=\"nofollow\"><img alt=\"Demo audio file\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1cddd2f8ae337cd581228a0aab4d9a54b17dd8d/687474703a2f2f7261666965692e6e65742f6173736574732f706c61795f627574746f6e2e706e67\"></a></p>\n<p>Have it downloaded to an empty directory for simplicity. We\u2019d refer to that\ndirectory as <cite>SRC_DIR</cite> and the name of this audio file as <cite>small_audio.wav</cite>.</p>\n<p>Here\u2019s how you can search through it.</p>\n<div id=\"command-line-usage\">\n<h3>Command-line Usage</h3>\n<p>Open up a terminal and enter.</p>\n<pre>$ sai --mode \"ibm\" --username_ibm USERNAME --password_ibm PASSWORD --src_dir SRC_DIR --search \"called\"\n\n{'called': {'small_audio.wav': [(1.25, 1.71)]}}\n</pre>\n<p>Replace <cite>USERNAME</cite> and <cite>PASSWORD</cite> with your IBM Watson\u2019s credentials and <cite>SRC_DIR</cite>\nwith the absolute path to the directory you just prepared.</p>\n<p>The out would be, like above, a dictionary that has the query, the file(s) it\nappears in and the all of the (starting second, ending second) of that query.</p>\n<p>Note that all commands work uniformally for other engines (i.e. Pocketsphinx),\nfor example the command above can be enterred as:</p>\n<pre>$ sai --mode \"cmu\" --src_dir SRC_DIR --search \"lives\"\n\n{'our': {'small_audio': [(2.93, 3.09)]}}\n</pre>\n<p>Which would use Pocketsphinx instead of Watson to get the timestamps. Note that\nthe quality/accuracy of Pocketsphinx is much lower than Watson.</p>\n<p>Instead of searching for a word, you could also match a regex pattern, for example:</p>\n<pre>$ sai --mode ibm --src_dir SRC_DIR --username_ibm USERNAME --password_ibm PASSWORD --regexp \" [a-z][a-z] \"\n\n{u' in ': {'small_audio.wav': [(2.81, 2.93)]},\n{u' to ': {'small_audio.wav': [(1.71, 1.81)]}}\n</pre>\n<p>That was the result of searching for two letter words. Note that your results\nwould match any aribtrary regular expressions.</p>\n<p>You may also save and load the indexed data from the command line script. For\nmore information, visit <a href=\"https://simpleaudioindexer.readthedocs.io/usage/#as-a-command-line-script\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"library-usage\">\n<h3>Library Usage</h3>\n<p>Say you have this file</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">SimpleAudioIndexer</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleAudioIndexer</span> <span class=\"k\">as</span> <span class=\"n\">sai</span>\n</pre>\n<p>Afterwards, you should create an instance of <cite>sai</cite></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">indexer</span> <span class=\"o\">=</span> <span class=\"n\">sai</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">\"ibm\"</span><span class=\"p\">,</span> <span class=\"n\">src_dir</span><span class=\"o\">=</span><span class=\"s2\">\"SRC_DIR\"</span><span class=\"p\">,</span> <span class=\"n\">username_ibm</span><span class=\"o\">=</span><span class=\"s2\">\"USERNAME\"</span><span class=\"p\">,</span> <span class=\"n\">password_ibm</span><span class=\"o\">=</span><span class=\"s2\">\"PASSWORD\"</span><span class=\"p\">)</span>\n</pre>\n<p>Now you may index all the available audio files by calling <cite>index_audio</cite> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">indexer</span><span class=\"o\">.</span><span class=\"n\">index_audio</span><span class=\"p\">()</span>\n</pre>\n<p>You could have a searching generator:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">searcher</span> <span class=\"o\">=</span> <span class=\"n\">indexer</span><span class=\"o\">.</span><span class=\"n\">search_gen</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">\"called\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># If you're on python 2.7, instead of below, do print searcher.next()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">searcher</span><span class=\"p\">))</span>\n<span class=\"p\">{</span><span class=\"s1\">'Query'</span><span class=\"p\">:</span> <span class=\"s1\">'called'</span><span class=\"p\">,</span> <span class=\"s1\">'File Name'</span><span class=\"p\">:</span> <span class=\"s1\">'small_audio.wav'</span><span class=\"p\">,</span> <span class=\"s1\">'Result'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"mf\">1.71</span><span class=\"p\">)}</span>\n</pre>\n<p>Now there are quite a few more arguments implemented for search_gen. Say you\nwanted your search to be case sensitive (by default it\u2019s not).\nOr, say you wanted to look for a phrase but there\u2019s a timing gap and the indexer\ndidn\u2019t pick it up right, you could specify <cite>timing_error</cite>. Or, say some word is\ncompletely missed, then you could specify <cite>missing_word_tolerance</cite> etc.</p>\n<p>For a full list, see the API reference <a href=\"./reference.html#SimpleAudioIndexer.SimpleAudioIndexer.search_gen\" rel=\"nofollow\">here</a></p>\n<p>Note that you could also call <cite>search_all</cite> method to have search for a list of\nqueries within all the audio files:</p>\n<p>Finally, you could do a regex search!</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">indexer</span><span class=\"o\">.</span><span class=\"n\">search_regexp</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s2\">\"[A-Z][^l]* \"</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'Americans are ca'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'small_audio.wav'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mf\">0.21</span><span class=\"p\">,</span> <span class=\"mf\">1.71</span><span class=\"p\">)]}}</span>\n</pre>\n<p>There are more functionalities implemented. For detailed explainations, read the\ndocumentation <a href=\"https://simpleaudioindexer.readthedocs.io/usage/#as-a-python-library\" rel=\"nofollow\">here</a>.</p>\n</div>\n</div>\n<div id=\"nice-to-implement-in-the-future\">\n<h2>Nice to implement in the future</h2>\n<ul>\n<li>Uploading in parallel</li>\n<li>More control structures for searching (Typos, phoneme based approximation of\nwords using CMU_DICT or NLTK etc.)</li>\n<li>Searching for an unintelligible audio within the audio files. Possibly by\ncross correlation or something similar.</li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Should you want to contribute code or ideas, file a bug request or give\nfeedback, Visit the <a href=\"https://github.com/aalireza/SimpleAudioIndexer/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">CONTRIBUTING</a> file.</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<ul>\n<li><strong>Alireza Rafiei</strong> - <a href=\"https://github.com/aalireza\" rel=\"nofollow\">aalireza</a></li>\n</ul>\n<p>See also the list of <a href=\"https://github.com/aalireza/SimpleAudioIndexer/graphs/contributors\" rel=\"nofollow\">contributors</a>\nto this project.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This project is licensed under the Apache v2.0 license - see the <a href=\"https://github.com/aalireza/SimpleAudioIndexer/blob/master/LICENSE\" rel=\"nofollow\">LICENCE</a>\nfile for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 2636029, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "aaac2d64621fcb0e4fa99327fa52c73b", "sha256": "64833ee84bccf4fb2ba3ff87e89a649fe571f76a70e96e53d64ef543c0041e76"}, "downloads": -1, "filename": "SimpleAudioIndexer-0.9.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "aaac2d64621fcb0e4fa99327fa52c73b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25022, "upload_time": "2017-02-04T14:36:33", "upload_time_iso_8601": "2017-02-04T14:36:33.009699Z", "url": "https://files.pythonhosted.org/packages/67/d9/8a3813b85ba5d64702af5a99756cd3fdcf9707f4bcabf9c416f9c47071b7/SimpleAudioIndexer-0.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98942e6ef417c2533af579f4ccda43f2", "sha256": "6d9c058f09fd443d375a11237f3f6982aec641e4209e91aa3f17aeeae38ce11e"}, "downloads": -1, "filename": "SimpleAudioIndexer-0.9.0.tar.gz", "has_sig": true, "md5_digest": "98942e6ef417c2533af579f4ccda43f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99531, "upload_time": "2017-02-04T14:36:34", "upload_time_iso_8601": "2017-02-04T14:36:34.859551Z", "url": "https://files.pythonhosted.org/packages/00/f9/b24f9c33271c9930820116c38b781c700627e2b81153784eeff952377774/SimpleAudioIndexer-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "34e025729dd940d3ce0437d058e87326", "sha256": "b5e9d504b2fc95dea3e6f75d9b388e0fdaad2460979fa2730e9832224fd4fe16"}, "downloads": -1, "filename": "SimpleAudioIndexer-1.0.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "34e025729dd940d3ce0437d058e87326", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43867, "upload_time": "2017-02-12T00:02:50", "upload_time_iso_8601": "2017-02-12T00:02:50.273613Z", "url": "https://files.pythonhosted.org/packages/25/76/5351d3554d408901a913e6dc239ae420017469d2079196cf43e0bcb70cf0/SimpleAudioIndexer-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4041ec8f7a03ad4b00b048cc6b15f211", "sha256": "5c9eae1118c4b33573a1ff88a5114a61cc908b032924d5a134c47ab4546898b2"}, "downloads": -1, "filename": "SimpleAudioIndexer-1.0.0.tar.gz", "has_sig": true, "md5_digest": "4041ec8f7a03ad4b00b048cc6b15f211", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119783, "upload_time": "2017-02-12T00:02:52", "upload_time_iso_8601": "2017-02-12T00:02:52.141266Z", "url": "https://files.pythonhosted.org/packages/4b/8f/4fae47b91a10881c5c4141fefe3553c921c93372d5659c3b269208d8e7df/SimpleAudioIndexer-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34e025729dd940d3ce0437d058e87326", "sha256": "b5e9d504b2fc95dea3e6f75d9b388e0fdaad2460979fa2730e9832224fd4fe16"}, "downloads": -1, "filename": "SimpleAudioIndexer-1.0.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "34e025729dd940d3ce0437d058e87326", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43867, "upload_time": "2017-02-12T00:02:50", "upload_time_iso_8601": "2017-02-12T00:02:50.273613Z", "url": "https://files.pythonhosted.org/packages/25/76/5351d3554d408901a913e6dc239ae420017469d2079196cf43e0bcb70cf0/SimpleAudioIndexer-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4041ec8f7a03ad4b00b048cc6b15f211", "sha256": "5c9eae1118c4b33573a1ff88a5114a61cc908b032924d5a134c47ab4546898b2"}, "downloads": -1, "filename": "SimpleAudioIndexer-1.0.0.tar.gz", "has_sig": true, "md5_digest": "4041ec8f7a03ad4b00b048cc6b15f211", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119783, "upload_time": "2017-02-12T00:02:52", "upload_time_iso_8601": "2017-02-12T00:02:52.141266Z", "url": "https://files.pythonhosted.org/packages/4b/8f/4fae47b91a10881c5c4141fefe3553c921c93372d5659c3b269208d8e7df/SimpleAudioIndexer-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:02 2020"}