{"info": {"author": "Keming Yang", "author_email": "kemingy94@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Ventu\n\n[![pypi](https://img.shields.io/pypi/v/ventu.svg)](https://pypi.python.org/pypi/ventu)\n[![versions](https://img.shields.io/pypi/pyversions/ventu.svg)](https://github.com/zenchars/ventu)\n\nServing the deep learning models easily.\n\n## Install\n\n```sh\npip install vento\n```\n\n## Features\n\n* Only need to implement Model(`preprocess`, `postprocess`, `inference` or `batch_inference`)\n* request & response data check using [pydantic](https://pydantic-docs.helpmanual.io)\n* API document using [SpecTree](https://github.com/0b01001001/spectree)\n* backend service using [falcon](falcon.readthedocs.io/)\n* dynamic batching with [batching](https://github.com/kemingy/batching) using Unix Domain Socket\n    * errors in one request won't affect others in the same batch\n* support all the runtime\n* health check\n\n## Example\n\n### Single Service Demo\n\nsource code can be found in [single_service_demo.py](example/single_service_demo.py)\n\n```python\nfrom ventu import Ventu\nfrom typing import Tuple\nfrom pydantic import BaseModel\nimport logging\nimport numpy\nimport onnxruntime\n\n\n# define the input schema\nclass Input(BaseModel):\n    text: Tuple[(str,) * 3]\n\n\n# define the output schema\nclass Output(BaseModel):\n    label: Tuple[(bool,) * 3]\n\n\nclass CustomModel(Ventu):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # load model\n        self.sess = onnxruntime.InferenceSession('./sigmoid.onnx')\n        self.input_name = self.sess.get_inputs()[0].name\n        self.output_name = self.sess.get_outputs()[0].name\n\n    def preprocess(self, data: Input):\n        # data format is defined in ``Input``\n        words = [sent.split(' ')[:4] for sent in data.text]\n        # padding\n        words = [word + [''] * (4 - len(word)) for word in words]\n        # build embedding\n        emb = [[\n            numpy.random.random(5) if w else [0] * 5\n            for w in word]\n            for word in words]\n        return numpy.array(emb, dtype=numpy.float32)\n\n    def inference(self, data):\n        # model inference\n        return self.sess.run([self.output_name], {self.input_name: data})[0]\n\n    def postprocess(self, data):\n        # generate the same format as defined in ``Output``\n        return {'label': [bool(numpy.mean(d) > 0.5) for d in data]}\n\n\nif __name__ == \"__main__\":\n    logger = logging.getLogger()\n    formatter = logging.Formatter(fmt='%(asctime)s - %(levelname)s - %(module)s - %(message)s')\n    handler = logging.StreamHandler()\n    handler.setFormatter(formatter)\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(handler)\n\n    model = CustomModel(Input, Output)\n    model.run_http(host='localhost', port=8000)\n\n    \"\"\"\n    # try with `httpie`\n    ## health check\n        http :8000/health\n    ## inference \n        http POST :8000/inference text:='[\"hello\", \"world\", \"test\"]'\n    \"\"\"\n```\n\n### Dynamic Batching Demo\n\n**Server**\n\nNeed to run the [batching](https://github.com/kemingy/batching) server first.\n\nTo use batching, you need to overwrite `batch_inference` instead of `inference`.\n\n```python\nimport logging\nfrom pydantic import BaseModel\nfrom ventu import Ventu\n\n\nclass Req(BaseModel):\n    num: int\n\n\nclass Resp(BaseModel):\n    square: int\n\n\nclass ModelInference(Ventu):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def preprocess(self, data: Req):\n        return data.num\n\n    def batch_inference(self, data):\n        return [num ** 2 for num in data]\n\n    def postprocess(self, data):\n        return {'square': data}\n\n\nif __name__ == \"__main__\":\n    logger = logging.getLogger()\n    formatter = logging.Formatter(\n        fmt='%(asctime)s - %(levelname)s - %(module)s - %(message)s')\n    handler = logging.StreamHandler()\n    handler.setFormatter(formatter)\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(handler)\n\n    model = ModelInference(Req, Resp, use_msgpack=True)\n    model.run_socket('batching.socket')\n```\n\n**Client**\n\n```python\nfrom concurrent import futures\nimport httpx\nimport msgpack\n\n\nURL = 'http://localhost:8080'\npacker = msgpack.Packer(\n    autoreset=True,\n    use_bin_type=True,\n)\n\n\ndef request(text):\n    return httpx.post(URL, data=packer.pack({'num': text}))\n\n\nif __name__ == \"__main__\":\n    with futures.ThreadPoolExecutor() as executor:\n        text = (0, 'test', -1, 233)\n        results = executor.map(request, text)\n        for i, resp in enumerate(results):\n            print(\n                f'>> {text[i]} -> [{resp.status_code}]\\n'\n                f'{msgpack.unpackb(resp.content, raw=False)}'\n            )\n```\n\n## Run with Gunicorn as single services\n\n```shell script\ngunicorn -w 2 ventu.app\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kemingy/ventu", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ventu", "package_url": "https://pypi.org/project/ventu/", "platform": "", "project_url": "https://pypi.org/project/ventu/", "project_urls": {"Homepage": "https://github.com/kemingy/ventu"}, "release_url": "https://pypi.org/project/ventu/0.3.0/", "requires_dist": ["falcon (>=2.0)", "spectree (>=0.3.3)", "pydantic (>=1.4)", "msgpack-python (>=0.5.6)"], "requires_python": ">=3.6", "summary": "Host your deep learning models easily.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Ventu</h1>\n<p><a href=\"https://pypi.python.org/pypi/ventu\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/247daa2f5966268d74ed3c182ffb4591092d0703/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f76656e74752e737667\"></a>\n<a href=\"https://github.com/zenchars/ventu\" rel=\"nofollow\"><img alt=\"versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58ff54a5c237c58008a083972f09e8f3fb28a08d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f76656e74752e737667\"></a></p>\n<p>Serving the deep learning models easily.</p>\n<h2>Install</h2>\n<pre>pip install vento\n</pre>\n<h2>Features</h2>\n<ul>\n<li>Only need to implement Model(<code>preprocess</code>, <code>postprocess</code>, <code>inference</code> or <code>batch_inference</code>)</li>\n<li>request &amp; response data check using <a href=\"https://pydantic-docs.helpmanual.io\" rel=\"nofollow\">pydantic</a></li>\n<li>API document using <a href=\"https://github.com/0b01001001/spectree\" rel=\"nofollow\">SpecTree</a></li>\n<li>backend service using <a href=\"falcon.readthedocs.io/\" rel=\"nofollow\">falcon</a></li>\n<li>dynamic batching with <a href=\"https://github.com/kemingy/batching\" rel=\"nofollow\">batching</a> using Unix Domain Socket\n<ul>\n<li>errors in one request won't affect others in the same batch</li>\n</ul>\n</li>\n<li>support all the runtime</li>\n<li>health check</li>\n</ul>\n<h2>Example</h2>\n<h3>Single Service Demo</h3>\n<p>source code can be found in <a href=\"example/single_service_demo.py\" rel=\"nofollow\">single_service_demo.py</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ventu</span> <span class=\"kn\">import</span> <span class=\"n\">Ventu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Tuple</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">onnxruntime</span>\n\n\n<span class=\"c1\"># define the input schema</span>\n<span class=\"k\">class</span> <span class=\"nc\">Input</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[(</span><span class=\"nb\">str</span><span class=\"p\">,)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n\n<span class=\"c1\"># define the output schema</span>\n<span class=\"k\">class</span> <span class=\"nc\">Output</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[(</span><span class=\"nb\">bool</span><span class=\"p\">,)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomModel</span><span class=\"p\">(</span><span class=\"n\">Ventu</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># load model</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sess</span> <span class=\"o\">=</span> <span class=\"n\">onnxruntime</span><span class=\"o\">.</span><span class=\"n\">InferenceSession</span><span class=\"p\">(</span><span class=\"s1\">'./sigmoid.onnx'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">input_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">get_inputs</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">get_outputs</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">preprocess</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Input</span><span class=\"p\">):</span>\n        <span class=\"c1\"># data format is defined in ``Input``</span>\n        <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sent</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">)[:</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">sent</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">]</span>\n        <span class=\"c1\"># padding</span>\n        <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">word</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"s1\">''</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">words</span><span class=\"p\">]</span>\n        <span class=\"c1\"># build embedding</span>\n        <span class=\"n\">emb</span> <span class=\"o\">=</span> <span class=\"p\">[[</span>\n            <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">5</span>\n            <span class=\"k\">for</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"n\">word</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">words</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">emb</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">inference</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"c1\"># model inference</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_name</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">input_name</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">})[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">postprocess</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"c1\"># generate the same format as defined in ``Output``</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'label'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">]}</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n    <span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Formatter</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(module)s</span><span class=\"s1\"> - </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n    <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">CustomModel</span><span class=\"p\">(</span><span class=\"n\">Input</span><span class=\"p\">,</span> <span class=\"n\">Output</span><span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">run_http</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    # try with `httpie`</span>\n<span class=\"sd\">    ## health check</span>\n<span class=\"sd\">        http :8000/health</span>\n<span class=\"sd\">    ## inference </span>\n<span class=\"sd\">        http POST :8000/inference text:='[\"hello\", \"world\", \"test\"]'</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h3>Dynamic Batching Demo</h3>\n<p><strong>Server</strong></p>\n<p>Need to run the <a href=\"https://github.com/kemingy/batching\" rel=\"nofollow\">batching</a> server first.</p>\n<p>To use batching, you need to overwrite <code>batch_inference</code> instead of <code>inference</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ventu</span> <span class=\"kn\">import</span> <span class=\"n\">Ventu</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Req</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Resp</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">square</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ModelInference</span><span class=\"p\">(</span><span class=\"n\">Ventu</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">preprocess</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Req</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">num</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">batch_inference</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">num</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">postprocess</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'square'</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n    <span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Formatter</span><span class=\"p\">(</span>\n        <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(module)s</span><span class=\"s1\"> - </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n    <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ModelInference</span><span class=\"p\">(</span><span class=\"n\">Req</span><span class=\"p\">,</span> <span class=\"n\">Resp</span><span class=\"p\">,</span> <span class=\"n\">use_msgpack</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">run_socket</span><span class=\"p\">(</span><span class=\"s1\">'batching.socket'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Client</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">concurrent</span> <span class=\"kn\">import</span> <span class=\"n\">futures</span>\n<span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">msgpack</span>\n\n\n<span class=\"n\">URL</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost:8080'</span>\n<span class=\"n\">packer</span> <span class=\"o\">=</span> <span class=\"n\">msgpack</span><span class=\"o\">.</span><span class=\"n\">Packer</span><span class=\"p\">(</span>\n    <span class=\"n\">autoreset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">use_bin_type</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">packer</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">({</span><span class=\"s1\">'num'</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">}))</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">233</span><span class=\"p\">)</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">resp</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s1\">'&gt;&gt; </span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> -&gt; [</span><span class=\"si\">{</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"si\">}</span><span class=\"s1\">]</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n                <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">msgpack</span><span class=\"o\">.</span><span class=\"n\">unpackb</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n            <span class=\"p\">)</span>\n</pre>\n<h2>Run with Gunicorn as single services</h2>\n<pre>gunicorn -w <span class=\"m\">2</span> ventu.app\n</pre>\n\n          </div>"}, "last_serial": 7178005, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f8567a82a8cebd6b24a26335e093153a", "sha256": "b9a07a5c318aaca79197263c8b93c2b307b386eb9ffa099ef03f20d7eb05e7cd"}, "downloads": -1, "filename": "ventu-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f8567a82a8cebd6b24a26335e093153a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 1641, "upload_time": "2020-03-24T08:12:31", "upload_time_iso_8601": "2020-03-24T08:12:31.919275Z", "url": "https://files.pythonhosted.org/packages/6c/f0/84b072b81ad22d900cecd85d3aa01fd036d990b584b79829f5d9d964e190/ventu-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9c575abdc06de064515e5b567cd3e8d", "sha256": "d2f8e1a1785581c810609c93d29397512639dcf468e2a7624b69ab6312dda19d"}, "downloads": -1, "filename": "ventu-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a9c575abdc06de064515e5b567cd3e8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1402, "upload_time": "2020-03-24T08:12:34", "upload_time_iso_8601": "2020-03-24T08:12:34.378383Z", "url": "https://files.pythonhosted.org/packages/ba/17/bf77dc092875cec100457e894d89d39380fbf10847907d009af644f4f7f9/ventu-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "59583fc475a05387bd5bd85f372a665e", "sha256": "695b8fe4d3eb4c1a4befd535329ae20e89ecd58e34778b69fc97070d642a0d81"}, "downloads": -1, "filename": "ventu-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "59583fc475a05387bd5bd85f372a665e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4556, "upload_time": "2020-03-25T07:00:45", "upload_time_iso_8601": "2020-03-25T07:00:45.942516Z", "url": "https://files.pythonhosted.org/packages/db/2a/4a9ece4c3dbed02950abd17275b9e5fd46b91a3623c1ff8db07b7f055df4/ventu-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "604e69708d6cbac7abcc95e350cb2ac4", "sha256": "013cd8c5ecacb38b2590af2c843b0b2bcbc16006399ebe85f96150ed14da5ba5"}, "downloads": -1, "filename": "ventu-0.1.0.tar.gz", "has_sig": false, "md5_digest": "604e69708d6cbac7abcc95e350cb2ac4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3759, "upload_time": "2020-03-25T07:00:47", "upload_time_iso_8601": "2020-03-25T07:00:47.233387Z", "url": "https://files.pythonhosted.org/packages/18/c4/b68bfc757f2b62f8a8df4f44529a63406e2c7bda250ba7f34bc9d5513f2d/ventu-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "566623e54db9c20babd89344bdb0b13a", "sha256": "ef9f11676ff34d367ca088d6d02cd324c6f94a96e39d483bb2a7cfd6785c56d0"}, "downloads": -1, "filename": "ventu-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "566623e54db9c20babd89344bdb0b13a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5732, "upload_time": "2020-05-04T03:49:31", "upload_time_iso_8601": "2020-05-04T03:49:31.418700Z", "url": "https://files.pythonhosted.org/packages/5e/86/5394b66984851946d180e3d5681b02cf2ad2f9b2b81bc756dfe48f5d1770/ventu-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ad9447940ce8945cf7b90c2c314b7f6", "sha256": "6dd8ae0d6588e3c2400e00d709a049f1e397e5652f08e164524997aa4ec6590f"}, "downloads": -1, "filename": "ventu-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6ad9447940ce8945cf7b90c2c314b7f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4960, "upload_time": "2020-05-04T03:49:32", "upload_time_iso_8601": "2020-05-04T03:49:32.865192Z", "url": "https://files.pythonhosted.org/packages/c4/f7/401c3e5b78a1de016bfd45687fb5bc7f473f15b9844653fa007e1c1abeb2/ventu-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f833ec597362f36c58b4f102f07c33ec", "sha256": "56d6631c72115f8dff9ff917b5d6ed1cabefe4002f51c59b8b498d7e5c51edfe"}, "downloads": -1, "filename": "ventu-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f833ec597362f36c58b4f102f07c33ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6868, "upload_time": "2020-05-06T06:31:06", "upload_time_iso_8601": "2020-05-06T06:31:06.085123Z", "url": "https://files.pythonhosted.org/packages/ef/d7/9249588e768ce5c68c85ef90f3cd39d4c0be871438d1788d674a6fbd80a7/ventu-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c374c7e9ca35fc3aa23f3cc32cde737", "sha256": "67b03269b6b3cf00d5d4535e472ce742b62b4ef989d7154477245185aad23a42"}, "downloads": -1, "filename": "ventu-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7c374c7e9ca35fc3aa23f3cc32cde737", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6220, "upload_time": "2020-05-06T06:31:07", "upload_time_iso_8601": "2020-05-06T06:31:07.638584Z", "url": "https://files.pythonhosted.org/packages/a0/f3/27d43f59b0041d79fc110a8193b488c366c507d3a786572f739320fd8918/ventu-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f833ec597362f36c58b4f102f07c33ec", "sha256": "56d6631c72115f8dff9ff917b5d6ed1cabefe4002f51c59b8b498d7e5c51edfe"}, "downloads": -1, "filename": "ventu-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f833ec597362f36c58b4f102f07c33ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6868, "upload_time": "2020-05-06T06:31:06", "upload_time_iso_8601": "2020-05-06T06:31:06.085123Z", "url": "https://files.pythonhosted.org/packages/ef/d7/9249588e768ce5c68c85ef90f3cd39d4c0be871438d1788d674a6fbd80a7/ventu-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c374c7e9ca35fc3aa23f3cc32cde737", "sha256": "67b03269b6b3cf00d5d4535e472ce742b62b4ef989d7154477245185aad23a42"}, "downloads": -1, "filename": "ventu-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7c374c7e9ca35fc3aa23f3cc32cde737", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6220, "upload_time": "2020-05-06T06:31:07", "upload_time_iso_8601": "2020-05-06T06:31:07.638584Z", "url": "https://files.pythonhosted.org/packages/a0/f3/27d43f59b0041d79fc110a8193b488c366c507d3a786572f739320fd8918/ventu-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:00 2020"}