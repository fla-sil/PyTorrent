{"info": {"author": "keul", "author_email": "luca@keul.it", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Plone", "Framework :: Zope2", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": ".. contents:: **Table of contents**\n\nMain idea\n=========\n\nOld `Zope2`__  products were heavily based on *skins* resources. A lot of additional information for those\nresources are taken from ``.metadata`` file, so commonly if you have a::\n\n    my_icon.gif\n\n...you will want to have also a::\n\n    my_icon.gif.metadata\n\nIn old Zope/Plone installation (let me say \"before Varnish begin to be a Plone standard\") you can use those\nmetadata for performing associations with *HttpCache* objects, making the user browser to perform some\ncache of resources::\n\n    [default]\n    title=my_icon.gif\n    cache=HTTPCache\n\n__ http://zope.org/\n\nzopemetadatamaker\n=================\n\nThis product will install for you a new executable: ``zopemetadatamaker``. Using this you can automatically create\nyour ``.metadata`` files. when you have a lot of static images, css and javascript files this can save you some times,\nfor example: you downloaded a big Javascript library with a lot of sub-directories inside and other related resources.\n\nHow to use\n----------\n\nThe basic use of the command is something like this::\n\n    zopemetadatamaker *.gif\n\nThis will create for you all \".metadata\" related to all gif file found in the current directory. You need to know that:\n\n* you must provide at least one filter patters\n* the directory where files are searched is the current working directory (but you can customize this, see below).\n\nComplete list of options\n------------------------\n\nHere the full documentation::\n\n    Usage: zopemetadatamaker [options] pattern [patterns]\n\n    Bulk creation of .metadata files for Zope skins resources\n\n    Options:\n      --version             show program's version number and exit\n      -h, --help            show this help message and exit\n      -c METADATA, --content=METADATA\n                            choose a metadata text different from default; use\n                            quoting for multiline input\n      -d, --default         print default metadata (if --content is not provided),\n                            then exit\n      -p PATHS, --path=PATHS\n                            directories path where to look for metadata. You can\n                            use this multiple times. Default is the current\n                            working directory\n      --dry-run             dry run, simply print what I would like to do\n      -f, --force           force .metadata creation; if another one exists it\n                            will be replaced\n      -r, --recursive       search and create recursively inside subdirs\n\nWhat to put in the .metadata content\n------------------------------------\n\nThe default metadata content is like this::\n\n    [default]\n    title=%(filename)s\n    cache=HTTPCache\n\nThe ``%(filename)s`` section will be replaced with the original file name. You can use this, or omit it, when\ndefining you custom ``.metadata``.\n\nI use this default content because it is the minimal \"cache\" information for `Plone CMS`__ static resouces.\n\n__ http://plone.org/\n\n\nChangelog\n=========\n\n0.1.0 (2011-04-04)\n------------------\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/zopemetadatamaker", "keywords": "file zope metadata creator skins", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "zopemetadatamaker", "package_url": "https://pypi.org/project/zopemetadatamaker/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zopemetadatamaker/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective/zopemetadatamaker"}, "release_url": "https://pypi.org/project/zopemetadatamaker/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Bulk creation of .metadata files for Zope skins resources", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"table-of-contents\">\n<p><strong>Table of contents</strong></p>\n<ul>\n<li><a href=\"#main-idea\" id=\"id4\" rel=\"nofollow\">Main idea</a></li>\n<li><a href=\"#zopemetadatamaker\" id=\"id5\" rel=\"nofollow\">zopemetadatamaker</a><ul>\n<li><a href=\"#how-to-use\" id=\"id6\" rel=\"nofollow\">How to use</a></li>\n<li><a href=\"#complete-list-of-options\" id=\"id7\" rel=\"nofollow\">Complete list of options</a></li>\n<li><a href=\"#what-to-put-in-the-metadata-content\" id=\"id8\" rel=\"nofollow\">What to put in the .metadata content</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id9\" rel=\"nofollow\">Changelog</a></li>\n</ul>\n</div>\n<div id=\"main-idea\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Main idea</a></h2>\n<p>Old <a href=\"http://zope.org/\" rel=\"nofollow\">Zope2</a>  products were heavily based on <em>skins</em> resources. A lot of additional information for those\nresources are taken from <tt>.metadata</tt> file, so commonly if you have a:</p>\n<pre>my_icon.gif\n</pre>\n<p>\u2026you will want to have also a:</p>\n<pre>my_icon.gif.metadata\n</pre>\n<p>In old Zope/Plone installation (let me say \u201cbefore Varnish begin to be a Plone standard\u201d) you can use those\nmetadata for performing associations with <em>HttpCache</em> objects, making the user browser to perform some\ncache of resources:</p>\n<pre>[default]\ntitle=my_icon.gif\ncache=HTTPCache\n</pre>\n</div>\n<div id=\"zopemetadatamaker\">\n<h2><a href=\"#id5\" rel=\"nofollow\">zopemetadatamaker</a></h2>\n<p>This product will install for you a new executable: <tt>zopemetadatamaker</tt>. Using this you can automatically create\nyour <tt>.metadata</tt> files. when you have a lot of static images, css and javascript files this can save you some times,\nfor example: you downloaded a big Javascript library with a lot of sub-directories inside and other related resources.</p>\n<div id=\"how-to-use\">\n<h3><a href=\"#id6\" rel=\"nofollow\">How to use</a></h3>\n<p>The basic use of the command is something like this:</p>\n<pre>zopemetadatamaker *.gif\n</pre>\n<p>This will create for you all \u201c.metadata\u201d related to all gif file found in the current directory. You need to know that:</p>\n<ul>\n<li>you must provide at least one filter patters</li>\n<li>the directory where files are searched is the current working directory (but you can customize this, see below).</li>\n</ul>\n</div>\n<div id=\"complete-list-of-options\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Complete list of options</a></h3>\n<p>Here the full documentation:</p>\n<pre>Usage: zopemetadatamaker [options] pattern [patterns]\n\nBulk creation of .metadata files for Zope skins resources\n\nOptions:\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  -c METADATA, --content=METADATA\n                        choose a metadata text different from default; use\n                        quoting for multiline input\n  -d, --default         print default metadata (if --content is not provided),\n                        then exit\n  -p PATHS, --path=PATHS\n                        directories path where to look for metadata. You can\n                        use this multiple times. Default is the current\n                        working directory\n  --dry-run             dry run, simply print what I would like to do\n  -f, --force           force .metadata creation; if another one exists it\n                        will be replaced\n  -r, --recursive       search and create recursively inside subdirs\n</pre>\n</div>\n<div id=\"what-to-put-in-the-metadata-content\">\n<h3><a href=\"#id8\" rel=\"nofollow\">What to put in the .metadata content</a></h3>\n<p>The default metadata content is like this:</p>\n<pre>[default]\ntitle=%(filename)s\ncache=HTTPCache\n</pre>\n<p>The <tt>%(filename)s</tt> section will be replaced with the original file name. You can use this, or omit it, when\ndefining you custom <tt>.metadata</tt>.</p>\n<p>I use this default content because it is the minimal \u201ccache\u201d information for <a href=\"http://plone.org/\" rel=\"nofollow\">Plone CMS</a> static resouces.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Changelog</a></h2>\n<h2 id=\"id3\"><span class=\"section-subtitle\">0.1.0 (2011-04-04)</span></h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 802408, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "00ce8bf4ba0d5ef01296fd6859f7f215", "sha256": "8be1c14098ad569d6ce72c7c66dc7020cf7ce55a7aaf6873abc4a22c2321a60f"}, "downloads": -1, "filename": "zopemetadatamaker-0.1.0.tar.gz", "has_sig": false, "md5_digest": "00ce8bf4ba0d5ef01296fd6859f7f215", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9308, "upload_time": "2011-04-04T17:48:39", "upload_time_iso_8601": "2011-04-04T17:48:39.121310Z", "url": "https://files.pythonhosted.org/packages/f6/7b/3124d559c109b6e3c1b1927bd333bbad47d20e8a9aed3ceffc3318698a32/zopemetadatamaker-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "00ce8bf4ba0d5ef01296fd6859f7f215", "sha256": "8be1c14098ad569d6ce72c7c66dc7020cf7ce55a7aaf6873abc4a22c2321a60f"}, "downloads": -1, "filename": "zopemetadatamaker-0.1.0.tar.gz", "has_sig": false, "md5_digest": "00ce8bf4ba0d5ef01296fd6859f7f215", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9308, "upload_time": "2011-04-04T17:48:39", "upload_time_iso_8601": "2011-04-04T17:48:39.121310Z", "url": "https://files.pythonhosted.org/packages/f6/7b/3124d559c109b6e3c1b1927bd333bbad47d20e8a9aed3ceffc3318698a32/zopemetadatamaker-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:02 2020"}