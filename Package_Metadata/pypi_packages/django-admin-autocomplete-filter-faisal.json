{"info": {"author": "Farhan Khan", "author_email": "farhan0581@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Framework :: Django :: 2.0", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![PyPI version](https://badge.fury.io/py/django-admin-autocomplete-filter.svg)](https://badge.fury.io/py/django-admin-autocomplete-filter)\n\nDjango Admin Autocomplete Filter\n================================\nA simple Django app to render list filters in django admin using autocomplete widget. This app is heavily inspired from [dal-admin-filters.](https://github.com/shamanu4/dal_admin_filters)\n\nOverview:\n---------\n\nDjango comes preshipped with an admin panel which is a great utility to create quick CRUD's.\nThe django 2.0 came with much needed [autocomplete_fields](https://docs.djangoproject.com/en/2.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.autocomplete_fields \"autocomplete_fields\") which uses select2 widget that comes with a search feature that loads the options asynchronously.\nWe can use this in django admin list filter.\n\n\n\nRequirements:\n-----------\nRequires Django version >= 2.0\n\nInstallation:\n------------\nYou can install it via pip or to get the latest version clone this repo.\n\n`\npip install django-admin-autocomplete-filter-faisal\n`\n\nAdd ``admin_auto_filters`` to your ``INSTALLED_APPS`` inside settings.py of your project.\n\nUsage:\n-----\nLet's say we have following models:\n``` python\nclass Artist(models.Model):\n    name = models.CharField(max_length=128)\n\nclass Album(models.Model):\n    name = models.CharField(max_length=64)\n    artist = models.ForeignKey(Artist, on_delete=models.CASCADE)\n    cover = models.CharField(max_length=256, null=True, default=None)\n```\nAnd you would like to filter results in Album Admin on the basis of artist, then you can define `search fields` in Artist and then define filter as:\n\n``` python\nfrom admin_auto_filters.filters import AutocompleteFilter\n\nclass ArtistFilter(AutocompleteFilter):\n    title = 'Artist' # display title\n    field_name = 'artist' # name of the foreign key field\n\nclass ArtistAdmin(admin.ModelAdmin):\n    search_fields = ['name'] # this is required for django's autocomplete functionality\n\t...\n\nclass AlbumAdmin(admin.ModelAdmin):\n    list_filter = [ArtistFilter]\n\n    '''\n       defining this class is required for AutocompleteFilter\n       it's a bug and I am working on it.\n    '''\n    class Media:\n        pass\n\t...\n```\n\nAfter following these steps you may see the filter as:\n\n![](https://raw.githubusercontent.com/farhan0581/django-admin-autocomplete-filter/master/admin_auto_filters/media/screenshot1.png)\n\n![](https://raw.githubusercontent.com/farhan0581/django-admin-autocomplete-filter/master/admin_auto_filters/media/screenshot2.png)\n\n\nNow you can also register your custom view instead of using django admin's search_results to control the results in the autocomplete. For this you will need to create your custom view and register the url in your admin class as shown below:\n\nIn your views.py:\n\n```python\nfrom admin_auto_filters.views import AutocompleteJsonView\n\nclass CustomSearchView(AutocompleteJsonView):\n    def get_queryset(self):\n    '''\n       your custom logic goes here.\n    '''\n        queryset = Artist.objects.all().order_by('name')\n        return queryset\n```\n\nAfter this, register this view in your admin class as:\n\n```python\n\nclass AlbumAdmin(admin.ModelAdmin):\n    list_filter = [ArtistFilter]\n\n    class Media:\n        pass\n\n    def get_urls(self):\n        urls = super().get_urls()\n        custom_urls = [\n            path('custom_search/', self.admin_site.admin_view(CustomSearchView.as_view(model_admin=self)),\n                 name='custom_search'),\n        ]\n        return custom_urls + urls\n```\n\nFinally just tell the filter class to use this new view as:\n\n```python\nclass ArtistFilter(AutocompleteFilter):\n    title = 'Artist'\n    field_name = 'artist'\n\n    def get_autocomplete_url(self, request, model_admin):\n        return reverse('admin:custom_search')\n```\n\nLicense:\n--------\nDjango Admin Autocomplete Filter is an Open Source project licensed under the terms of the GNU GENERAL PUBLIC LICENSE.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/farhan0581/django-admin-autocomplete-filter", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-admin-autocomplete-filter-faisal", "package_url": "https://pypi.org/project/django-admin-autocomplete-filter-faisal/", "platform": "", "project_url": "https://pypi.org/project/django-admin-autocomplete-filter-faisal/", "project_urls": {"Homepage": "https://github.com/farhan0581/django-admin-autocomplete-filter"}, "release_url": "https://pypi.org/project/django-admin-autocomplete-filter-faisal/0.4/", "requires_dist": ["django (>=2.0)"], "requires_python": "", "summary": "A simple Django app to render list filters in django admin using autocomplete widget", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/django-admin-autocomplete-filter\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8e1fd03d3a93db5fbfbebb78d56a24d8401ba11/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d61646d696e2d6175746f636f6d706c6574652d66696c7465722e737667\"></a></p>\n<h1>Django Admin Autocomplete Filter</h1>\n<p>A simple Django app to render list filters in django admin using autocomplete widget. This app is heavily inspired from <a href=\"https://github.com/shamanu4/dal_admin_filters\" rel=\"nofollow\">dal-admin-filters.</a></p>\n<h2>Overview:</h2>\n<p>Django comes preshipped with an admin panel which is a great utility to create quick CRUD's.\nThe django 2.0 came with much needed <a href=\"https://docs.djangoproject.com/en/2.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.autocomplete_fields\" rel=\"nofollow\" title=\"autocomplete_fields\">autocomplete_fields</a> which uses select2 widget that comes with a search feature that loads the options asynchronously.\nWe can use this in django admin list filter.</p>\n<h2>Requirements:</h2>\n<p>Requires Django version &gt;= 2.0</p>\n<h2>Installation:</h2>\n<p>You can install it via pip or to get the latest version clone this repo.</p>\n<p><code>pip install django-admin-autocomplete-filter-faisal</code></p>\n<p>Add <code>admin_auto_filters</code> to your <code>INSTALLED_APPS</code> inside settings.py of your project.</p>\n<h2>Usage:</h2>\n<p>Let's say we have following models:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Artist</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Album</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n    <span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Artist</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">cover</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>And you would like to filter results in Album Admin on the basis of artist, then you can define <code>search fields</code> in Artist and then define filter as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">admin_auto_filters.filters</span> <span class=\"kn\">import</span> <span class=\"n\">AutocompleteFilter</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ArtistFilter</span><span class=\"p\">(</span><span class=\"n\">AutocompleteFilter</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Artist'</span> <span class=\"c1\"># display title</span>\n    <span class=\"n\">field_name</span> <span class=\"o\">=</span> <span class=\"s1\">'artist'</span> <span class=\"c1\"># name of the foreign key field</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ArtistAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">search_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"c1\"># this is required for django's autocomplete functionality</span>\n\t<span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AlbumAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ArtistFilter</span><span class=\"p\">]</span>\n\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">       defining this class is required for AutocompleteFilter</span>\n<span class=\"sd\">       it's a bug and I am working on it.</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Media</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\t<span class=\"o\">...</span>\n</pre>\n<p>After following these steps you may see the filter as:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d028ef83f75e084fd9aa38151b8c140a09d9176/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66617268616e303538312f646a616e676f2d61646d696e2d6175746f636f6d706c6574652d66696c7465722f6d61737465722f61646d696e5f6175746f5f66696c746572732f6d656469612f73637265656e73686f74312e706e67\"></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a818184a806cb1640db915135a85bb7f2afe7f1d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66617268616e303538312f646a616e676f2d61646d696e2d6175746f636f6d706c6574652d66696c7465722f6d61737465722f61646d696e5f6175746f5f66696c746572732f6d656469612f73637265656e73686f74322e706e67\"></p>\n<p>Now you can also register your custom view instead of using django admin's search_results to control the results in the autocomplete. For this you will need to create your custom view and register the url in your admin class as shown below:</p>\n<p>In your views.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">admin_auto_filters.views</span> <span class=\"kn\">import</span> <span class=\"n\">AutocompleteJsonView</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomSearchView</span><span class=\"p\">(</span><span class=\"n\">AutocompleteJsonView</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">       your custom logic goes here.</span>\n<span class=\"sd\">    '''</span>\n        <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Artist</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">queryset</span>\n</pre>\n<p>After this, register this view in your admin class as:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AlbumAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ArtistFilter</span><span class=\"p\">]</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Media</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_urls</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_urls</span><span class=\"p\">()</span>\n        <span class=\"n\">custom_urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'custom_search/'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">admin_site</span><span class=\"o\">.</span><span class=\"n\">admin_view</span><span class=\"p\">(</span><span class=\"n\">CustomSearchView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">model_admin</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)),</span>\n                 <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'custom_search'</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">custom_urls</span> <span class=\"o\">+</span> <span class=\"n\">urls</span>\n</pre>\n<p>Finally just tell the filter class to use this new view as:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ArtistFilter</span><span class=\"p\">(</span><span class=\"n\">AutocompleteFilter</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Artist'</span>\n    <span class=\"n\">field_name</span> <span class=\"o\">=</span> <span class=\"s1\">'artist'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_autocomplete_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">model_admin</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s1\">'admin:custom_search'</span><span class=\"p\">)</span>\n</pre>\n<h2>License:</h2>\n<p>Django Admin Autocomplete Filter is an Open Source project licensed under the terms of the GNU GENERAL PUBLIC LICENSE.</p>\n\n          </div>"}, "last_serial": 6210951, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "f45acd718105df3b5f81221c9bc6f785", "sha256": "6ee554cd8f8e54d19fffbcdf1c488c3deed46a39be433b09718406ea88c3fe99"}, "downloads": -1, "filename": "django_admin_autocomplete_filter_faisal-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f45acd718105df3b5f81221c9bc6f785", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19837, "upload_time": "2019-11-27T21:37:56", "upload_time_iso_8601": "2019-11-27T21:37:56.634602Z", "url": "https://files.pythonhosted.org/packages/0d/24/9dc1b27e980033f44b9ee8756e095928dc9a99039bee39d92101e692cec8/django_admin_autocomplete_filter_faisal-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0d21b6bfc4f6c6c7aec8ae58799943b", "sha256": "ab4e28261da42e6265dea08c087738eb439ff84577c9c61ca875e1911dce76e6"}, "downloads": -1, "filename": "django-admin-autocomplete-filter-faisal-0.3.tar.gz", "has_sig": false, "md5_digest": "c0d21b6bfc4f6c6c7aec8ae58799943b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18995, "upload_time": "2019-11-27T21:38:00", "upload_time_iso_8601": "2019-11-27T21:38:00.216978Z", "url": "https://files.pythonhosted.org/packages/54/2e/578e04624f73fb5cdc5663ae498fa904185b26d34c984f3453c0a61709be/django-admin-autocomplete-filter-faisal-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "10a0bf03f9fef6f2e4e627ff960dff9e", "sha256": "b6997b1fcba284c4ee67766f24a02cfc5cea55b446327cff32edeeeec7ade7c3"}, "downloads": -1, "filename": "django_admin_autocomplete_filter_faisal-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "10a0bf03f9fef6f2e4e627ff960dff9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19753, "upload_time": "2019-11-27T22:00:11", "upload_time_iso_8601": "2019-11-27T22:00:11.413503Z", "url": "https://files.pythonhosted.org/packages/14/f5/26348b876f9fe784392703b681a5419a63028253fa9c8e35e815a25f087d/django_admin_autocomplete_filter_faisal-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a74baebc948e3eb57a5c4f330f7600d1", "sha256": "c3ea1b321a8f9874866489d9819fcbc94424bd17909b939582536315a739a279"}, "downloads": -1, "filename": "django-admin-autocomplete-filter-faisal-0.4.tar.gz", "has_sig": false, "md5_digest": "a74baebc948e3eb57a5c4f330f7600d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18913, "upload_time": "2019-11-27T22:00:13", "upload_time_iso_8601": "2019-11-27T22:00:13.687651Z", "url": "https://files.pythonhosted.org/packages/9d/90/f27cf922a5981a1858f16e15d5cc2ed82d397c34c155b29e17b9d06658cf/django-admin-autocomplete-filter-faisal-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10a0bf03f9fef6f2e4e627ff960dff9e", "sha256": "b6997b1fcba284c4ee67766f24a02cfc5cea55b446327cff32edeeeec7ade7c3"}, "downloads": -1, "filename": "django_admin_autocomplete_filter_faisal-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "10a0bf03f9fef6f2e4e627ff960dff9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19753, "upload_time": "2019-11-27T22:00:11", "upload_time_iso_8601": "2019-11-27T22:00:11.413503Z", "url": "https://files.pythonhosted.org/packages/14/f5/26348b876f9fe784392703b681a5419a63028253fa9c8e35e815a25f087d/django_admin_autocomplete_filter_faisal-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a74baebc948e3eb57a5c4f330f7600d1", "sha256": "c3ea1b321a8f9874866489d9819fcbc94424bd17909b939582536315a739a279"}, "downloads": -1, "filename": "django-admin-autocomplete-filter-faisal-0.4.tar.gz", "has_sig": false, "md5_digest": "a74baebc948e3eb57a5c4f330f7600d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18913, "upload_time": "2019-11-27T22:00:13", "upload_time_iso_8601": "2019-11-27T22:00:13.687651Z", "url": "https://files.pythonhosted.org/packages/9d/90/f27cf922a5981a1858f16e15d5cc2ed82d397c34c155b29e17b9d06658cf/django-admin-autocomplete-filter-faisal-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:51 2020"}