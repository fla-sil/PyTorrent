{"info": {"author": "Ben DeVries", "author_email": "devries.br@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# waffls\n---------\n\n**wa**ter **f**raction **f**rom **L**andsat and **S**entinel-2 imagery\n\n----------------------------------------------------------------------------------------\n\nwaffls is a collection of algorithms for estimating sub-pixel surface water fraction using medium resolution satellite data. Reader classes for Landsat data (Collection-1 and Pre-Collection), Sentinel-2 (10m or 20m resolution SAFE format) and Harmonized Landsat Sentinel-2 (HLS; 10m S10 or 30m S30/L30) data are included.\n\n## Installation\n\n`waffls` is built on top of gdal and a number of python libraries. To install its dependencies using conda:\n\n```bash\nconda config --add channels conda-forge\nconda create -n waffls gdal rasterio joblib cython scipy scikit-learn\n```\n\nYou can then install waffls using `pip` in your new environment:\n\n```bash\nconda activate waffls\npip install waffls\n```\n\nOr to install from source:\n\n```bash\nconda activate waffls\ngit clone https://github.com/bendv/waffls\ncd waffls\npython setup.py install\n```\n\nCheck installation and version:\n\n```bash\npython -c \"import waffls; print(waffls.__version__)\"\n```\n\n## Examples\n\n### Opening a Landsat image\n\nUsing a Collection-1 Landsat TM surface reflectance image:\n\n```python\nimport waffls\ninfile = \"LT050300272011042501T1-SC20190710095708\" # input directory\nimg = waffls.Landsat(infile)\n```\n\nVarious attributes are stored as object attributes:\n\n```python\nprint(img.filepath)\nprint(img.dataset) # Landsat\nprint(img.date) # Acquisition date\nprint(img.dtype) # data type\nprint(img.height, img.width) # dimensions\n```\n\n...and more. For convenience, a `rasterio`-style metadata dictionary is also included:\n\n```python\nprint(img.profile)\n```\n\nBy default, the image data is not read into memory. Do do this, use the `read()` method:\n\n```python\nprint(img.bands) # should be `None`\nimg.read(verbose = True)\nprint(img.bands) # OrderedDict of Image bands as numpy as arrays\n```\n\nTo set the QA mask use the `set_mask()` method. Several optional boolean arguments can be set to apply a saturation (False by default), cloud (True by default), cloud_shadow (True by default), snow (True by default) and cirrus (True by default). Additionally, you can also mask pixels within a specified pixel buffer around the mask by setting `buffer` to an integer value (None by default). \n\n```python\nimg.set_mask()\nprint(img.mask) # 1 indicates mask values, 0 unmasked\n```\n\n\n## Reference\n\nDeVries, B., Huang, C-Q., Lang, M.W., Jones, J.W., Huang, W., Creed, I.F. and Carroll, M.L. 2017. Automated quantification of surface water inundation in wetlands using optical satellite imagery. Remote Sensing, 9(8):807.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bendv/waffls", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "waffls", "package_url": "https://pypi.org/project/waffls/", "platform": "", "project_url": "https://pypi.org/project/waffls/", "project_urls": {"Homepage": "https://github.com/bendv/waffls"}, "release_url": "https://pypi.org/project/waffls/0.3.3/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>waffls</h1>\n<hr>\n<p><strong>wa</strong>ter <strong>f</strong>raction <strong>f</strong>rom <strong>L</strong>andsat and <strong>S</strong>entinel-2 imagery</p>\n<hr>\n<p>waffls is a collection of algorithms for estimating sub-pixel surface water fraction using medium resolution satellite data. Reader classes for Landsat data (Collection-1 and Pre-Collection), Sentinel-2 (10m or 20m resolution SAFE format) and Harmonized Landsat Sentinel-2 (HLS; 10m S10 or 30m S30/L30) data are included.</p>\n<h2>Installation</h2>\n<p><code>waffls</code> is built on top of gdal and a number of python libraries. To install its dependencies using conda:</p>\n<pre>conda config --add channels conda-forge\nconda create -n waffls gdal rasterio joblib cython scipy scikit-learn\n</pre>\n<p>You can then install waffls using <code>pip</code> in your new environment:</p>\n<pre>conda activate waffls\npip install waffls\n</pre>\n<p>Or to install from source:</p>\n<pre>conda activate waffls\ngit clone https://github.com/bendv/waffls\n<span class=\"nb\">cd</span> waffls\npython setup.py install\n</pre>\n<p>Check installation and version:</p>\n<pre>python -c <span class=\"s2\">\"import waffls; print(waffls.__version__)\"</span>\n</pre>\n<h2>Examples</h2>\n<h3>Opening a Landsat image</h3>\n<p>Using a Collection-1 Landsat TM surface reflectance image:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">waffls</span>\n<span class=\"n\">infile</span> <span class=\"o\">=</span> <span class=\"s2\">\"LT050300272011042501T1-SC20190710095708\"</span> <span class=\"c1\"># input directory</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">waffls</span><span class=\"o\">.</span><span class=\"n\">Landsat</span><span class=\"p\">(</span><span class=\"n\">infile</span><span class=\"p\">)</span>\n</pre>\n<p>Various attributes are stored as object attributes:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"p\">)</span> <span class=\"c1\"># Landsat</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">)</span> <span class=\"c1\"># Acquisition date</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span> <span class=\"c1\"># data type</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">)</span> <span class=\"c1\"># dimensions</span>\n</pre>\n<p>...and more. For convenience, a <code>rasterio</code>-style metadata dictionary is also included:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">profile</span><span class=\"p\">)</span>\n</pre>\n<p>By default, the image data is not read into memory. Do do this, use the <code>read()</code> method:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">bands</span><span class=\"p\">)</span> <span class=\"c1\"># should be `None`</span>\n<span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">bands</span><span class=\"p\">)</span> <span class=\"c1\"># OrderedDict of Image bands as numpy as arrays</span>\n</pre>\n<p>To set the QA mask use the <code>set_mask()</code> method. Several optional boolean arguments can be set to apply a saturation (False by default), cloud (True by default), cloud_shadow (True by default), snow (True by default) and cirrus (True by default). Additionally, you can also mask pixels within a specified pixel buffer around the mask by setting <code>buffer</code> to an integer value (None by default).</p>\n<pre><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">set_mask</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">mask</span><span class=\"p\">)</span> <span class=\"c1\"># 1 indicates mask values, 0 unmasked</span>\n</pre>\n<h2>Reference</h2>\n<p>DeVries, B., Huang, C-Q., Lang, M.W., Jones, J.W., Huang, W., Creed, I.F. and Carroll, M.L. 2017. Automated quantification of surface water inundation in wetlands using optical satellite imagery. Remote Sensing, 9(8):807.</p>\n\n          </div>"}, "last_serial": 6633233, "releases": {"0.1.8": [{"comment_text": "", "digests": {"md5": "d64d9a5a8378632d6e7c1eacc93aff01", "sha256": "ae6d606be089fe1ff01584b732ff1b8a591c8594861c2420bea60128f2351fa1"}, "downloads": -1, "filename": "waffls-0.1.8.tar.gz", "has_sig": false, "md5_digest": "d64d9a5a8378632d6e7c1eacc93aff01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68193, "upload_time": "2019-07-23T19:30:03", "upload_time_iso_8601": "2019-07-23T19:30:03.685721Z", "url": "https://files.pythonhosted.org/packages/76/f5/8d7052c386ebbd90472e155e43ca2e69eb504424929c4458682f29eaf5be/waffls-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "1f5ae134748d3fe394ff172253c65ebe", "sha256": "dee338de0eef5403f0f93d9b6dcd3dd089aa8599197cb4b2cf1ced9d317f06af"}, "downloads": -1, "filename": "waffls-0.1.9.tar.gz", "has_sig": false, "md5_digest": "1f5ae134748d3fe394ff172253c65ebe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68136, "upload_time": "2019-07-23T19:42:37", "upload_time_iso_8601": "2019-07-23T19:42:37.649955Z", "url": "https://files.pythonhosted.org/packages/63/4b/6588376cb3e5a518e2b0eccb2fc68ac07bec65831b7283bbaf7296826908/waffls-0.1.9.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "b4f21ef245c779b2734ba453ffc5db0d", "sha256": "f43515d6909379a7529681eaab964d805d5146f7442bd0d2f5df905938de8875"}, "downloads": -1, "filename": "waffls-0.3.2.tar.gz", "has_sig": false, "md5_digest": "b4f21ef245c779b2734ba453ffc5db0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129863, "upload_time": "2019-07-23T22:10:53", "upload_time_iso_8601": "2019-07-23T22:10:53.765714Z", "url": "https://files.pythonhosted.org/packages/fd/bf/f7228051208d8bd2ab0ff6eb54dd13c2b416ea1c058507bbf1983a62d390/waffls-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "a97b137008bd6cac83262b79f1dd8d43", "sha256": "f528fee3ccfff4af60ba9428ee6dd4e92df3b1f16bb525eeaa50bb25c342b238"}, "downloads": -1, "filename": "waffls-0.3.3.tar.gz", "has_sig": false, "md5_digest": "a97b137008bd6cac83262b79f1dd8d43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132538, "upload_time": "2020-02-14T19:33:59", "upload_time_iso_8601": "2020-02-14T19:33:59.266064Z", "url": "https://files.pythonhosted.org/packages/13/86/e7cbae82a199f02f671bb8b6f49cd99f3a9908068834e86d51a3c77ec4d3/waffls-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a97b137008bd6cac83262b79f1dd8d43", "sha256": "f528fee3ccfff4af60ba9428ee6dd4e92df3b1f16bb525eeaa50bb25c342b238"}, "downloads": -1, "filename": "waffls-0.3.3.tar.gz", "has_sig": false, "md5_digest": "a97b137008bd6cac83262b79f1dd8d43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132538, "upload_time": "2020-02-14T19:33:59", "upload_time_iso_8601": "2020-02-14T19:33:59.266064Z", "url": "https://files.pythonhosted.org/packages/13/86/e7cbae82a199f02f671bb8b6f49cd99f3a9908068834e86d51a3c77ec4d3/waffls-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:33:16 2020"}