{"info": {"author": "Timo Stollenwerk & David Rodriguez Fuentes", "author_email": "stollenwerk@kitconcept.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Robot Framework", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython"], "description": "==============================================================================\nA Robot Framework library for React.\n==============================================================================\n\n.. image:: https://travis-ci.org/kitconcept/robotframework-react.svg?branch=master\n    :target: https://travis-ci.org/kitconcept/robotframework-react\n\n.. image:: https://img.shields.io/pypi/status/robotframework-react.svg\n    :target: https://pypi.python.org/pypi/robotframework-react/\n    :alt: Egg Status\n\n.. image:: https://img.shields.io/pypi/v/robotframework-react.svg\n    :target: https://pypi.python.org/pypi/robotframework-react/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/l/robotframework-react.svg\n    :target: https://pypi.python.org/pypi/robotframework-react/\n    :alt: License\n\n|\n\n.. image:: https://raw.githubusercontent.com/kitconcept/robotframework-react/master/kitconcept.png\n   :alt: kitconcept\n   :target: https://kitconcept.com/\n\n\nIntroduction\n------------\n\nReactLibrary is a Robot Framework library for React. It currently provides a single 'Wait for React' keyword that makes sure your React application has been fully loaded and can be interacted with.\n\n\nInstallation\n------------\n\nInstall robotframework-react with pip::\n\n  $ pip install robotframework-react\n\n\nUsage\n-----\n\nIn order to write your first robot test, make sure that you include SeleniumLibrary and ReactLibrary. Create a test.robot file with the following content::\n\n  *** Settings ***\n\n  Library         SeleniumLibrary  timeout=10  implicit_wait=0\n  Library         React Library\n  Suite Setup     Open browser  https://airbnb.com  chrome\n  Suite Teardown  Close browser\n\n\n  *** Test Cases ***\n\n  Scenario: Wait for react\n    Go To  https://airbnb.com\n    Wait for react\n    Page Should Contain  Airbnb Book unique homes\n\n  Scenario: Wait for react with reducer\n    Go To  https://airbnb.com\n    Wait for react  reducer=headlines\n    Page Should Contain  Airbnb Book unique homes\n\n\nKeywords\n--------\n\nrobotframework-react currently only provides a single keyword \"Wait for React\".\nThe keyword makes sure the React app is fully loaded.\n\n\nPlain React Example\n^^^^^^^^^^^^^^^^^^^\n\nWhen used without any parameter, \"Wait for react\" expects the React app to\nset a global variable named \"window.appStatus\" to true when the app is fully\nloaded.\n\nTo make this work with your React app, add a global window.appStatus to your\nindex.js::\n\n  window.appStatus = false\n  const updateStatus = () => {\n    window.appStatus = true\n  }\n\n  ReactDOM.render(<App updateStatus={updateStatus} />, document.getElementById('root'));\n\nAdd an \"isLoading\" state to your App and update it on componentDidMount and componentDidUpdate (App.js)::\n\n  class App extends Component {\n    state = {\n      isLoading: true,\n    }\n\n    componentDidMount() {\n      wait(2000).then(() => {\n        this.setState({ isLoading: false })\n      })\n    }\n\n    componentDidUpdate() {\n      if (!this.state.isLoading) {\n        this.props.updateStatus()\n      }\n    }\n    ...\n  }\n\nYou can find a full working example here: https://github.com/kitconcept/robotframework-react/tree/master/tests/create-react-app\n\nRobot Test: https://github.com/kitconcept/robotframework-react/blob/master/tests/create-react-app/test.robot\n\nRedux\n^^^^^\n\nWhen working with Redux, you have to pass the name of the reducer to the 'Wait for React' keyword::\n\n  Wait for react  reducer=headlines\n\nThe reducer should implement an \"isFetching\" attribute in the Redux state::\n\n  const initialState = {\n    isFetching: false,\n    ...\n  };\n\nInstead of adding \"isFetching\", you can also name the attribute whatever you want, and pass in the \"stateName\" parameter to the 'Wait for react' keyboard::\n\n   Wait for react  reducer=headlines  stateName=isLoading\n\nYou can find a full working example here:\n\nhttps://github.com/kitconcept/robotframework-react/tree/master/tests/create-react-app-with-redux\n\nRobot Test with Redux:\n\nhttps://github.com/kitconcept/robotframework-react/blob/master/tests/create-react-app-with-redux/test.robot\n\n\n\n1.0.0a2 (2018-07-10)\n--------------------\n\n- Switch from robotframework-selenium2library to robotframework-seleniumlibrary.\n  [timo]\n\n- Add a parameter called \"stateName\" to allow configurable attribute name so \"isFetching\" is not required for Redux functionality \n  [bxie1]\n\n1.0.0a1 (2018-03-08)\n--------------------\n\n- Initial release.\n  [timo, davidrf]", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://kitconcept.com", "keywords": "robotframework react javascript", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "robotframework-react", "package_url": "https://pypi.org/project/robotframework-react/", "platform": "", "project_url": "https://pypi.org/project/robotframework-react/", "project_urls": {"Homepage": "https://kitconcept.com"}, "release_url": "https://pypi.org/project/robotframework-react/1.0.0a2/", "requires_dist": null, "requires_python": "", "summary": "A Robot Framework library for React.", "version": "1.0.0a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/kitconcept/robotframework-react\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/kitconcept/robotframework-react.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e58beeaa4b50bc064e886cd2646e6c4f927796e/68747470733a2f2f7472617669732d63692e6f72672f6b6974636f6e636570742f726f626f746672616d65776f726b2d72656163742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/robotframework-react/\" rel=\"nofollow\"><img alt=\"Egg Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d1ca05514a040f9d8a867d2e922587f6b0f8cce/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f726f626f746672616d65776f726b2d72656163742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/robotframework-react/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/abf0c31fdeffe690cbef660fb8b0fabab6a5171f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f726f626f746672616d65776f726b2d72656163742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/robotframework-react/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e097c6db2c77498fb241390cae7d7ce0d51f05e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f726f626f746672616d65776f726b2d72656163742e737667\"></a>\n<div>\n<div><br></div>\n</div>\n<a href=\"https://kitconcept.com/\" rel=\"nofollow\"><img alt=\"kitconcept\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/508a5b82295a8c5f54d088222bc4a396f73d1e81/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6b6974636f6e636570742f726f626f746672616d65776f726b2d72656163742f6d61737465722f6b6974636f6e636570742e706e67\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>ReactLibrary is a Robot Framework library for React. It currently provides a single \u2018Wait for React\u2019 keyword that makes sure your React application has been fully loaded and can be interacted with.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install robotframework-react with pip:</p>\n<pre>$ pip install robotframework-react\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In order to write your first robot test, make sure that you include SeleniumLibrary and ReactLibrary. Create a test.robot file with the following content:</p>\n<pre>*** Settings ***\n\nLibrary         SeleniumLibrary  timeout=10  implicit_wait=0\nLibrary         React Library\nSuite Setup     Open browser  https://airbnb.com  chrome\nSuite Teardown  Close browser\n\n\n*** Test Cases ***\n\nScenario: Wait for react\n  Go To  https://airbnb.com\n  Wait for react\n  Page Should Contain  Airbnb Book unique homes\n\nScenario: Wait for react with reducer\n  Go To  https://airbnb.com\n  Wait for react  reducer=headlines\n  Page Should Contain  Airbnb Book unique homes\n</pre>\n</div>\n<div id=\"keywords\">\n<h2>Keywords</h2>\n<p>robotframework-react currently only provides a single keyword \u201cWait for React\u201d.\nThe keyword makes sure the React app is fully loaded.</p>\n<div id=\"plain-react-example\">\n<h3>Plain React Example</h3>\n<p>When used without any parameter, \u201cWait for react\u201d expects the React app to\nset a global variable named \u201cwindow.appStatus\u201d to true when the app is fully\nloaded.</p>\n<p>To make this work with your React app, add a global window.appStatus to your\nindex.js:</p>\n<pre>window.appStatus = false\nconst updateStatus = () =&gt; {\n  window.appStatus = true\n}\n\nReactDOM.render(&lt;App updateStatus={updateStatus} /&gt;, document.getElementById('root'));\n</pre>\n<p>Add an \u201cisLoading\u201d state to your App and update it on componentDidMount and componentDidUpdate (App.js):</p>\n<pre>class App extends Component {\n  state = {\n    isLoading: true,\n  }\n\n  componentDidMount() {\n    wait(2000).then(() =&gt; {\n      this.setState({ isLoading: false })\n    })\n  }\n\n  componentDidUpdate() {\n    if (!this.state.isLoading) {\n      this.props.updateStatus()\n    }\n  }\n  ...\n}\n</pre>\n<p>You can find a full working example here: <a href=\"https://github.com/kitconcept/robotframework-react/tree/master/tests/create-react-app\" rel=\"nofollow\">https://github.com/kitconcept/robotframework-react/tree/master/tests/create-react-app</a></p>\n<p>Robot Test: <a href=\"https://github.com/kitconcept/robotframework-react/blob/master/tests/create-react-app/test.robot\" rel=\"nofollow\">https://github.com/kitconcept/robotframework-react/blob/master/tests/create-react-app/test.robot</a></p>\n</div>\n<div id=\"redux\">\n<h3>Redux</h3>\n<p>When working with Redux, you have to pass the name of the reducer to the \u2018Wait for React\u2019 keyword:</p>\n<pre>Wait for react  reducer=headlines\n</pre>\n<p>The reducer should implement an \u201cisFetching\u201d attribute in the Redux state:</p>\n<pre>const initialState = {\n  isFetching: false,\n  ...\n};\n</pre>\n<p>Instead of adding \u201cisFetching\u201d, you can also name the attribute whatever you want, and pass in the \u201cstateName\u201d parameter to the \u2018Wait for react\u2019 keyboard:</p>\n<pre>Wait for react  reducer=headlines  stateName=isLoading\n</pre>\n<p>You can find a full working example here:</p>\n<p><a href=\"https://github.com/kitconcept/robotframework-react/tree/master/tests/create-react-app-with-redux\" rel=\"nofollow\">https://github.com/kitconcept/robotframework-react/tree/master/tests/create-react-app-with-redux</a></p>\n<p>Robot Test with Redux:</p>\n<p><a href=\"https://github.com/kitconcept/robotframework-react/blob/master/tests/create-react-app-with-redux/test.robot\" rel=\"nofollow\">https://github.com/kitconcept/robotframework-react/blob/master/tests/create-react-app-with-redux/test.robot</a></p>\n</div>\n</div>\n<div id=\"a2-2018-07-10\">\n<h2>1.0.0a2 (2018-07-10)</h2>\n<ul>\n<li>Switch from robotframework-selenium2library to robotframework-seleniumlibrary.\n[timo]</li>\n<li>Add a parameter called \u201cstateName\u201d to allow configurable attribute name so \u201cisFetching\u201d is not required for Redux functionality\n[bxie1]</li>\n</ul>\n</div>\n<div id=\"a1-2018-03-08\">\n<h2>1.0.0a1 (2018-03-08)</h2>\n<ul>\n<li>Initial release.\n[timo, davidrf]</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4048351, "releases": {"1.0.0a1": [{"comment_text": "", "digests": {"md5": "15ea1f50514d21cc65979276f4bccfef", "sha256": "9dca3dca77cb40138a293149673c5b3c690b25c261bdad25dd692099278296da"}, "downloads": -1, "filename": "robotframework-react-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "15ea1f50514d21cc65979276f4bccfef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54434, "upload_time": "2018-03-08T08:25:03", "upload_time_iso_8601": "2018-03-08T08:25:03.588801Z", "url": "https://files.pythonhosted.org/packages/8a/8b/b8b46b4722478d19e3597f6917d72fb45980b07e19b5407ffce90a9dd5a2/robotframework-react-1.0.0a1.tar.gz", "yanked": false}], "1.0.0a2": [{"comment_text": "", "digests": {"md5": "73fa2d7093eed1226004e28615795af0", "sha256": "4c3010f3368eda3d10fda96598d3b04f7acce25c543a195a10c45b04fdcc9ea4"}, "downloads": -1, "filename": "robotframework-react-1.0.0a2.tar.gz", "has_sig": false, "md5_digest": "73fa2d7093eed1226004e28615795af0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54798, "upload_time": "2018-07-10T19:43:10", "upload_time_iso_8601": "2018-07-10T19:43:10.787822Z", "url": "https://files.pythonhosted.org/packages/c0/4b/dea67e396e693fce04d908eedd695df16a14c4acda1bda3c2fb5fe6d0616/robotframework-react-1.0.0a2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73fa2d7093eed1226004e28615795af0", "sha256": "4c3010f3368eda3d10fda96598d3b04f7acce25c543a195a10c45b04fdcc9ea4"}, "downloads": -1, "filename": "robotframework-react-1.0.0a2.tar.gz", "has_sig": false, "md5_digest": "73fa2d7093eed1226004e28615795af0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54798, "upload_time": "2018-07-10T19:43:10", "upload_time_iso_8601": "2018-07-10T19:43:10.787822Z", "url": "https://files.pythonhosted.org/packages/c0/4b/dea67e396e693fce04d908eedd695df16a14c4acda1bda3c2fb5fe6d0616/robotframework-react-1.0.0a2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:50 2020"}