{"info": {"author": "Dustin Oprea", "author_email": "dustin@randomingenuity.com", "bugtrack_url": null, "classifiers": [], "description": "Overview\n========\n\nThis tool knows how to poll for changes to playlist(s) and to then download the physical videos for the new items automatically (using `youtube-dl <https://github.com/rg3/youtube-dl>`_).\n\n\nFeatures\n========\n\n- More than one playlist can be provided.\n- The state is recorded for each playlist during each call. This is how the differences are calculated.\n- Uses `python-googleautoauth <https://github.com/dsoprea/python-googleautoauth>`_ for authentication.\n- Will gracefully accommodate multiple instances being run concurrently.\n\n\nInstallation\n============\n\n$ pip install youtube-autodownloader\n\n\nUsage\n=====\n\nThe first time you run, you will have to build new credentials. The automatic-authentication flow will automatically run and open a browser window. To specifically run just the authorization, run::\n\n    $ ytad_autoauth\n\nThis works best in a desktop environment. Manual-authorization helper scripts are also provided to support console-only environment.\n\n\nSince YouTube does not enforce uniqueness for playlist names, you are required to provide playlist IDs rather than names.\n\nExample of finding a playlist ID using a playlist name::\n\n    $ ytad_search_playlists Animals\n    PLxaR7YEkaI0xxxxxxxxxxxxxxacWvmEih\n\n    $ ytad_search_playlists Special\n    PLxaR7YEkaI0xxxxxxxxxxxxxxr1gs86gE\n\nExample of checking for and downloading new videos (\"-p\" is a playlist-ID, \"-dp\" is the download-path)::\n\n    $ ytad_autodownload -p PLxaR7YEkaI0xxxxxxxxxxxxxxr1gs86gE -dp \"/storage/videos/$(date '+\\%Y')/Special\"\n    Lion Vs Mongoose: Mongoose Fends Off Four Lions\n    - Playlist: Special\n    - ID: 1TPn1-SJqVM\n    - Download time: 9s\n    - Filename: 20140902 - Lion Vs Mongoose - Mongoose Fends Off Four Lions (1TPn1-SJqVM).mp4\n    - Size: 22.1M\n\n    Slow loris loves getting tickled http://bit.ly/14qLq8x\n    - Playlist: Special\n    - ID: PZ5ACLVjYwM\n    - Download time: 3s\n    - Filename: 20090426 - Slow loris loves getting tickled http -_bit.ly_14qLq8x (PZ5ACLVjYwM).webm\n    - Size: 3.1M\n\n\nTesting\n=======\n\nTo run the tests::\n\n    $ ./test.sh\n\nThe tests will require user interaction with the browser.\n\n\nNotes\n=====\n\n- If you do not wish to download the videos the first time that you run this command, omit the download-path parameter. This will just build the local database. Otherwise, all videos from the playlist will download. This might not be desireable for your use-case.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dsoprea/youtube-autodownloader", "keywords": "youtube", "license": "", "maintainer": "", "maintainer_email": "", "name": "youtube-autodownloader", "package_url": "https://pypi.org/project/youtube-autodownloader/", "platform": "", "project_url": "https://pypi.org/project/youtube-autodownloader/", "project_urls": {"Homepage": "https://github.com/dsoprea/youtube-autodownloader"}, "release_url": "https://pypi.org/project/youtube-autodownloader/0.2.6/", "requires_dist": null, "requires_python": "", "summary": "Tool to auto-download new playlist entries.", "version": "0.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>This tool knows how to poll for changes to playlist(s) and to then download the physical videos for the new items automatically (using <a href=\"https://github.com/rg3/youtube-dl\" rel=\"nofollow\">youtube-dl</a>).</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>More than one playlist can be provided.</li>\n<li>The state is recorded for each playlist during each call. This is how the differences are calculated.</li>\n<li>Uses <a href=\"https://github.com/dsoprea/python-googleautoauth\" rel=\"nofollow\">python-googleautoauth</a> for authentication.</li>\n<li>Will gracefully accommodate multiple instances being run concurrently.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>$ pip install youtube-autodownloader</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The first time you run, you will have to build new credentials. The automatic-authentication flow will automatically run and open a browser window. To specifically run just the authorization, run:</p>\n<pre>$ ytad_autoauth\n</pre>\n<p>This works best in a desktop environment. Manual-authorization helper scripts are also provided to support console-only environment.</p>\n<p>Since YouTube does not enforce uniqueness for playlist names, you are required to provide playlist IDs rather than names.</p>\n<p>Example of finding a playlist ID using a playlist name:</p>\n<pre>$ ytad_search_playlists Animals\nPLxaR7YEkaI0xxxxxxxxxxxxxxacWvmEih\n\n$ ytad_search_playlists Special\nPLxaR7YEkaI0xxxxxxxxxxxxxxr1gs86gE\n</pre>\n<p>Example of checking for and downloading new videos (\u201c-p\u201d is a playlist-ID, \u201c-dp\u201d is the download-path):</p>\n<pre>$ ytad_autodownload -p PLxaR7YEkaI0xxxxxxxxxxxxxxr1gs86gE -dp \"/storage/videos/$(date '+\\%Y')/Special\"\nLion Vs Mongoose: Mongoose Fends Off Four Lions\n- Playlist: Special\n- ID: 1TPn1-SJqVM\n- Download time: 9s\n- Filename: 20140902 - Lion Vs Mongoose - Mongoose Fends Off Four Lions (1TPn1-SJqVM).mp4\n- Size: 22.1M\n\nSlow loris loves getting tickled http://bit.ly/14qLq8x\n- Playlist: Special\n- ID: PZ5ACLVjYwM\n- Download time: 3s\n- Filename: 20090426 - Slow loris loves getting tickled http -_bit.ly_14qLq8x (PZ5ACLVjYwM).webm\n- Size: 3.1M\n</pre>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>To run the tests:</p>\n<pre>$ ./test.sh\n</pre>\n<p>The tests will require user interaction with the browser.</p>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<ul>\n<li>If you do not wish to download the videos the first time that you run this command, omit the download-path parameter. This will just build the local database. Otherwise, all videos from the playlist will download. This might not be desireable for your use-case.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3709499, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "78e04a864efeeed145d17025f4e85287", "sha256": "a47bf559af20f7982133c485b20a6f16c16d9ba52200cbfe09cd161e3d0f9912"}, "downloads": -1, "filename": "youtube-autodownloader-0.2.1.tar.gz", "has_sig": false, "md5_digest": "78e04a864efeeed145d17025f4e85287", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8536, "upload_time": "2018-01-02T06:26:53", "upload_time_iso_8601": "2018-01-02T06:26:53.706476Z", "url": "https://files.pythonhosted.org/packages/4d/b2/05bd0b67a9f80c728e28f8d7a7fea5272e1f423a792baafd61d047f16ddd/youtube-autodownloader-0.2.1.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "76a58f53d2ecb2fc9bb41d944a9e70cb", "sha256": "f4563a4fb00235f9fe2d5e91cfac7f4586489d223190cd76b91602087ffc629c"}, "downloads": -1, "filename": "youtube-autodownloader-0.2.3.tar.gz", "has_sig": false, "md5_digest": "76a58f53d2ecb2fc9bb41d944a9e70cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10793, "upload_time": "2018-01-03T05:27:56", "upload_time_iso_8601": "2018-01-03T05:27:56.234409Z", "url": "https://files.pythonhosted.org/packages/b4/2e/2847adf49621bbb08cf97f6c6814d1a0571a012d58f659371db663874000/youtube-autodownloader-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "59f5ee83d31ad891e0da52bba19f2935", "sha256": "043f169a6f818533ea2f22138c3bb025625849c47583c066a7a433a4db33a226"}, "downloads": -1, "filename": "youtube-autodownloader-0.2.4.tar.gz", "has_sig": false, "md5_digest": "59f5ee83d31ad891e0da52bba19f2935", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10880, "upload_time": "2018-01-03T05:42:57", "upload_time_iso_8601": "2018-01-03T05:42:57.276473Z", "url": "https://files.pythonhosted.org/packages/33/58/4e77e4d7b6c7ef338958e8e544f0502859a6f7ac3953bae46f36686f1b17/youtube-autodownloader-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "695b771dd6a1edbcb8ff817f397947e0", "sha256": "78e7b44f0c23936c008d140b8cacae2ad0d68b541575118fd30cf1a297231e98"}, "downloads": -1, "filename": "youtube-autodownloader-0.2.5.tar.gz", "has_sig": false, "md5_digest": "695b771dd6a1edbcb8ff817f397947e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11414, "upload_time": "2018-02-26T10:51:16", "upload_time_iso_8601": "2018-02-26T10:51:16.160929Z", "url": "https://files.pythonhosted.org/packages/c8/7e/593c8e4ef647e4d68c74675dda4dc78c687f24f0cdc51a00ebad34f4f228/youtube-autodownloader-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "eb11202c3df8bd1324066f1f831a3fb0", "sha256": "950722b1c0761f9cf07f33dd18a9193b5df1b552ada4b5437f703ce7f58d5975"}, "downloads": -1, "filename": "youtube-autodownloader-0.2.6.tar.gz", "has_sig": false, "md5_digest": "eb11202c3df8bd1324066f1f831a3fb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13163, "upload_time": "2018-03-27T08:09:24", "upload_time_iso_8601": "2018-03-27T08:09:24.392591Z", "url": "https://files.pythonhosted.org/packages/ac/63/812b73aec3bf0ef7e607f02781496caba7a4e1f3a1822618ea7178f7f282/youtube-autodownloader-0.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eb11202c3df8bd1324066f1f831a3fb0", "sha256": "950722b1c0761f9cf07f33dd18a9193b5df1b552ada4b5437f703ce7f58d5975"}, "downloads": -1, "filename": "youtube-autodownloader-0.2.6.tar.gz", "has_sig": false, "md5_digest": "eb11202c3df8bd1324066f1f831a3fb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13163, "upload_time": "2018-03-27T08:09:24", "upload_time_iso_8601": "2018-03-27T08:09:24.392591Z", "url": "https://files.pythonhosted.org/packages/ac/63/812b73aec3bf0ef7e607f02781496caba7a4e1f3a1822618ea7178f7f282/youtube-autodownloader-0.2.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:49 2020"}