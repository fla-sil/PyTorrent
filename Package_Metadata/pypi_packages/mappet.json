{"info": {"author": "Rados\u0142aw Szalski", "author_email": "radoslaw.szalski@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup :: XML", "Topic :: Utilities"], "description": ".. image:: https://travis-ci.org/stxnext/mappet.svg\n   :target: https://travis-ci.org/stxnext/mappet\n   :alt: Travis CI\n\n.. image:: http://codecov.io/github/stxnext/mappet/coverage.svg?branch=master\n   :target: http://codecov.io/github/stxnext/mappet?branch=master\n   :alt: Codecov\n\n.. image:: https://codeclimate.com/github/stxnext/mappet/badges/gpa.svg\n   :target: https://codeclimate.com/github/stxnext/mappet\n   :alt: Code Climate\n\n.. image:: http://www.quantifiedcode.com/api/v1/project/4f798b7ea0954d8790f3fe420a5fde0e/badge.svg\n   :target: http://www.quantifiedcode.com/app/project/4f798b7ea0954d8790f3fe420a5fde0e\n   :alt: Code issues\n\n.. image:: https://www.codacy.com/project/badge/4ea440e5fa5045acb376e6461e804179\n   :target: https://www.codacy.com/app/radoslaw-szalski/mappet\n   :alt: Codacy\n\n.. image:: https://readthedocs.org/projects/mappet/badge/?version=latest\n   :target: https://readthedocs.org/projects/mappet/?badge=latest\n   :alt: Documentation Status\n\n\n==========\n``mappet``\n==========\n\n``Mappet`` has been created to enable an easy an intuitive way to work with XML\nstructures in Python code.\n\nA well known ``lxml`` module has been used under the hood, mainly due to XML parsing performance.\n\n\nMappet accepts a string with valid XML, an ``lxml.etree._Element`` object or a dict\nrepresenting the XML tree.\n\n>>> import mappet\n>>> f = open('example.xml', 'r')\n>>> m = mappet.Mappet(f.read())\n\nAs an example, an XML document of the following structure has been used:\n\n.. code-block:: xml\n\n    <?xml version='1.0' encoding='iso-8859-2'?>\n    <a-message>\n        <head>\n            <id seq=\"20\" tstamp=\"2015-07-13T10:55:25+02:00\"/>\n            <initiator>Mr Sender</initiator>\n            <date>2015-07-13T10:56:05.597420+02:00</date>\n            <type>reply-type</type>\n        </head>\n        <auth>\n            <user first-name=\"Name\" last-name=\"LastName\">id</user>\n        </auth>\n        <status>\n            <result>OK</result>\n        </status>\n        <reply>\n            <cars>\n                <Car>\n                    <id>12345</id>\n                    <Manufacturer>BMW</Manufacturer>\n                    <Model_Name>X6</Model_Name>\n                    <Body>SUV</Body>\n                    <Fuel>Diesel</Fuel>\n                    <Doors>5</Doors>\n                    <ccm>3000</ccm>\n                    <HP>256</HP>\n                    <TransType>Automatic</TransType>\n                    <seats>5</seats>\n                    <weight>3690</weight>\n                </Car>\n                <Car>\n                    <id>54321</id>\n                    <Manufacturer>BMW</Manufacturer>\n                    <Model_Name>X1</Model_Name>\n                    <Body>SUV</Body>\n                    <Fuel>Diesel</Fuel>\n                    <Doors>5</Doors>\n                    <ccm>3000</ccm>\n                    <HP>198</HP>\n                    <TransType>Automatic</TransType>\n                    <seats>5</seats>\n                    <weight>2890</weight>\n                </Car>\n            </cars>\n        </reply>\n    </a-message>\n\n\nConventions\n===========\n\nEvery XML node can be accessed in two ways: by attribute and item access.\n\n\nDictionary access:\n------------------\n\nDictionary access is possible thanks to XML document being represented as a\nPython dictionary. Conversion of values is done explicitly.\n\nBy default, values are returned as ``str``.\n\n>>> m['reply']['cars']['Car'][0]['Manufacturer']\n'BMW'\n\nNodes' names are case-sensitive.\n\n\nAttribute access:\n-----------------\n\nDue to restrictions in Python variable names, tag names are normalized for attribute access.\nTag names are normalized to lowercase and hyphens to underlines.\n\nSame example using attribute access (__repr__ is responsible for representing the tag):\n\n>>> m.reply.cars.car[0].manufacturer\nBMW\n\nTo get a string representation use ``get()``.\n\n>>> m.reply.cars.car[0].manufacturer.get()\n'BMW'\n\n``get()`` has two parameters, *default* and *callback*. The first one is returned when then node's value is empty, the\nsecond is a function to be called upon the returned value.\n\n>>> m.reply.cars.car[0].ccm.get(callback=int)\n3000\n\nAlternatively, one can use built-in helper functions, defined in helpers.py\n\n>>> m.reply.cars.car[0].ccm.to_int()\n3000\n\nHelper functions\n================\n\n- to_bool\n- to_int\n- to_str\n- to_string\n- to_float\n- to_time\n- to_datetime\n- to_date", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stxnext/mappet", "keywords": "xml parsing mapping", "license": "GNU Lesser General Public License v3(LGPLv3)", "maintainer": null, "maintainer_email": null, "name": "mappet", "package_url": "https://pypi.org/project/mappet/", "platform": "any", "project_url": "https://pypi.org/project/mappet/", "project_urls": {"Homepage": "https://github.com/stxnext/mappet"}, "release_url": "https://pypi.org/project/mappet/0.1.2/", "requires_dist": ["lxml", "python-dateutil", "pytest; extra == 'testing'", "mock; extra == 'testing'", "tox; extra == 'testing'"], "requires_python": null, "summary": "Work with XML documents as if they were Python objects", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/stxnext/mappet\" rel=\"nofollow\"><img alt=\"Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e9a14a1221fe846b5d7be804700b5d8d29a098a3/68747470733a2f2f7472617669732d63692e6f72672f7374786e6578742f6d61707065742e737667\"></a>\n<a href=\"http://codecov.io/github/stxnext/mappet?branch=master\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/467615458d9ed2460880b9cb1ee0ae9c93b600bc/687474703a2f2f636f6465636f762e696f2f6769746875622f7374786e6578742f6d61707065742f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/stxnext/mappet\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9b1c682ec0f111f35146ba4d9a1535cd524e4ca/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f7374786e6578742f6d61707065742f6261646765732f6770612e737667\"></a>\n<a href=\"http://www.quantifiedcode.com/app/project/4f798b7ea0954d8790f3fe420a5fde0e\" rel=\"nofollow\"><img alt=\"Code issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb22028f1d768e83bb9f45bd63857ebf78411806/687474703a2f2f7777772e7175616e746966696564636f64652e636f6d2f6170692f76312f70726f6a6563742f34663739386237656130393534643837393066336665343230613566646530652f62616467652e737667\"></a>\n<a href=\"https://www.codacy.com/app/radoslaw-szalski/mappet\" rel=\"nofollow\"><img alt=\"Codacy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e84232934e04634f97dcaff9e5cedcaa03f035ad/68747470733a2f2f7777772e636f646163792e636f6d2f70726f6a6563742f62616467652f3465613434306535666135303435616362333736653634363165383034313739\"></a>\n<a href=\"https://readthedocs.org/projects/mappet/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0ef219fe8bd63dd60fa80dd0829d1e5cbd4d394/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6d61707065742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<div id=\"mappet\">\n<h2><tt>mappet</tt></h2>\n<p><tt>Mappet</tt> has been created to enable an easy an intuitive way to work with XML\nstructures in Python code.</p>\n<p>A well known <tt>lxml</tt> module has been used under the hood, mainly due to XML parsing performance.</p>\n<p>Mappet accepts a string with valid XML, an <tt>lxml.etree._Element</tt> object or a dict\nrepresenting the XML tree.</p>\n<pre>&gt;&gt;&gt; import mappet\n&gt;&gt;&gt; f = open('example.xml', 'r')\n&gt;&gt;&gt; m = mappet.Mappet(f.read())\n</pre>\n<p>As an example, an XML document of the following structure has been used:</p>\n<pre><span class=\"cp\">&lt;?xml version='1.0' encoding='iso-8859-2'?&gt;</span>\n<span class=\"nt\">&lt;a-message&gt;</span>\n    <span class=\"nt\">&lt;head&gt;</span>\n        <span class=\"nt\">&lt;id</span> <span class=\"na\">seq=</span><span class=\"s\">\"20\"</span> <span class=\"na\">tstamp=</span><span class=\"s\">\"2015-07-13T10:55:25+02:00\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;initiator&gt;</span>Mr Sender<span class=\"nt\">&lt;/initiator&gt;</span>\n        <span class=\"nt\">&lt;date&gt;</span>2015-07-13T10:56:05.597420+02:00<span class=\"nt\">&lt;/date&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>reply-type<span class=\"nt\">&lt;/type&gt;</span>\n    <span class=\"nt\">&lt;/head&gt;</span>\n    <span class=\"nt\">&lt;auth&gt;</span>\n        <span class=\"nt\">&lt;user</span> <span class=\"na\">first-name=</span><span class=\"s\">\"Name\"</span> <span class=\"na\">last-name=</span><span class=\"s\">\"LastName\"</span><span class=\"nt\">&gt;</span>id<span class=\"nt\">&lt;/user&gt;</span>\n    <span class=\"nt\">&lt;/auth&gt;</span>\n    <span class=\"nt\">&lt;status&gt;</span>\n        <span class=\"nt\">&lt;result&gt;</span>OK<span class=\"nt\">&lt;/result&gt;</span>\n    <span class=\"nt\">&lt;/status&gt;</span>\n    <span class=\"nt\">&lt;reply&gt;</span>\n        <span class=\"nt\">&lt;cars&gt;</span>\n            <span class=\"nt\">&lt;Car&gt;</span>\n                <span class=\"nt\">&lt;id&gt;</span>12345<span class=\"nt\">&lt;/id&gt;</span>\n                <span class=\"nt\">&lt;Manufacturer&gt;</span>BMW<span class=\"nt\">&lt;/Manufacturer&gt;</span>\n                <span class=\"nt\">&lt;Model_Name&gt;</span>X6<span class=\"nt\">&lt;/Model_Name&gt;</span>\n                <span class=\"nt\">&lt;Body&gt;</span>SUV<span class=\"nt\">&lt;/Body&gt;</span>\n                <span class=\"nt\">&lt;Fuel&gt;</span>Diesel<span class=\"nt\">&lt;/Fuel&gt;</span>\n                <span class=\"nt\">&lt;Doors&gt;</span>5<span class=\"nt\">&lt;/Doors&gt;</span>\n                <span class=\"nt\">&lt;ccm&gt;</span>3000<span class=\"nt\">&lt;/ccm&gt;</span>\n                <span class=\"nt\">&lt;HP&gt;</span>256<span class=\"nt\">&lt;/HP&gt;</span>\n                <span class=\"nt\">&lt;TransType&gt;</span>Automatic<span class=\"nt\">&lt;/TransType&gt;</span>\n                <span class=\"nt\">&lt;seats&gt;</span>5<span class=\"nt\">&lt;/seats&gt;</span>\n                <span class=\"nt\">&lt;weight&gt;</span>3690<span class=\"nt\">&lt;/weight&gt;</span>\n            <span class=\"nt\">&lt;/Car&gt;</span>\n            <span class=\"nt\">&lt;Car&gt;</span>\n                <span class=\"nt\">&lt;id&gt;</span>54321<span class=\"nt\">&lt;/id&gt;</span>\n                <span class=\"nt\">&lt;Manufacturer&gt;</span>BMW<span class=\"nt\">&lt;/Manufacturer&gt;</span>\n                <span class=\"nt\">&lt;Model_Name&gt;</span>X1<span class=\"nt\">&lt;/Model_Name&gt;</span>\n                <span class=\"nt\">&lt;Body&gt;</span>SUV<span class=\"nt\">&lt;/Body&gt;</span>\n                <span class=\"nt\">&lt;Fuel&gt;</span>Diesel<span class=\"nt\">&lt;/Fuel&gt;</span>\n                <span class=\"nt\">&lt;Doors&gt;</span>5<span class=\"nt\">&lt;/Doors&gt;</span>\n                <span class=\"nt\">&lt;ccm&gt;</span>3000<span class=\"nt\">&lt;/ccm&gt;</span>\n                <span class=\"nt\">&lt;HP&gt;</span>198<span class=\"nt\">&lt;/HP&gt;</span>\n                <span class=\"nt\">&lt;TransType&gt;</span>Automatic<span class=\"nt\">&lt;/TransType&gt;</span>\n                <span class=\"nt\">&lt;seats&gt;</span>5<span class=\"nt\">&lt;/seats&gt;</span>\n                <span class=\"nt\">&lt;weight&gt;</span>2890<span class=\"nt\">&lt;/weight&gt;</span>\n            <span class=\"nt\">&lt;/Car&gt;</span>\n        <span class=\"nt\">&lt;/cars&gt;</span>\n    <span class=\"nt\">&lt;/reply&gt;</span>\n<span class=\"nt\">&lt;/a-message&gt;</span>\n</pre>\n<div id=\"conventions\">\n<h3>Conventions</h3>\n<p>Every XML node can be accessed in two ways: by attribute and item access.</p>\n<div id=\"dictionary-access\">\n<h4>Dictionary access:</h4>\n<p>Dictionary access is possible thanks to XML document being represented as a\nPython dictionary. Conversion of values is done explicitly.</p>\n<p>By default, values are returned as <tt>str</tt>.</p>\n<pre>&gt;&gt;&gt; m['reply']['cars']['Car'][0]['Manufacturer']\n'BMW'\n</pre>\n<p>Nodes\u2019 names are case-sensitive.</p>\n</div>\n<div id=\"attribute-access\">\n<h4>Attribute access:</h4>\n<p>Due to restrictions in Python variable names, tag names are normalized for attribute access.\nTag names are normalized to lowercase and hyphens to underlines.</p>\n<p>Same example using attribute access (__repr__ is responsible for representing the tag):</p>\n<pre>&gt;&gt;&gt; m.reply.cars.car[0].manufacturer\nBMW\n</pre>\n<p>To get a string representation use <tt>get()</tt>.</p>\n<pre>&gt;&gt;&gt; m.reply.cars.car[0].manufacturer.get()\n'BMW'\n</pre>\n<p><tt>get()</tt> has two parameters, <em>default</em> and <em>callback</em>. The first one is returned when then node\u2019s value is empty, the\nsecond is a function to be called upon the returned value.</p>\n<pre>&gt;&gt;&gt; m.reply.cars.car[0].ccm.get(callback=int)\n3000\n</pre>\n<p>Alternatively, one can use built-in helper functions, defined in helpers.py</p>\n<pre>&gt;&gt;&gt; m.reply.cars.car[0].ccm.to_int()\n3000\n</pre>\n</div>\n</div>\n<div id=\"helper-functions\">\n<h3>Helper functions</h3>\n<ul>\n<li>to_bool</li>\n<li>to_int</li>\n<li>to_str</li>\n<li>to_string</li>\n<li>to_float</li>\n<li>to_time</li>\n<li>to_datetime</li>\n<li>to_date</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1696093, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "4bab0a4dbba35644734dbbb1dcf44028", "sha256": "0f0296c6ab054a37808de475e6c801641d7a51996bf3acd5424bdbd8a0ed5850"}, "downloads": -1, "filename": "mappet-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "4bab0a4dbba35644734dbbb1dcf44028", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13640, "upload_time": "2015-08-12T20:14:32", "upload_time_iso_8601": "2015-08-12T20:14:32.296885Z", "url": "https://files.pythonhosted.org/packages/d4/62/11207be8d9004dad03a4574633d09e2a6162f8d19f0d23d18989fd9cd031/mappet-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a06959e32d9d86229935ade684c99e61", "sha256": "5ebb4a6241cfa8949b6d42357f71f1bee96de73325bb0ade892add58a465e420"}, "downloads": -1, "filename": "mappet-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a06959e32d9d86229935ade684c99e61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10639, "upload_time": "2015-08-12T20:14:36", "upload_time_iso_8601": "2015-08-12T20:14:36.589709Z", "url": "https://files.pythonhosted.org/packages/13/46/cabd295f745a92e3a3d25ab0285fdec05033c737515f8c6997e10cfddef9/mappet-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "faf0bb490f06d1945f6f33d303f5df8c", "sha256": "5547df1e4a7129f44d78ae65f73b2bec95dfc8b38abda6babc1034ecaec573ee"}, "downloads": -1, "filename": "mappet-0.1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "faf0bb490f06d1945f6f33d303f5df8c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13749, "upload_time": "2015-08-27T10:11:49", "upload_time_iso_8601": "2015-08-27T10:11:49.099215Z", "url": "https://files.pythonhosted.org/packages/57/31/a2640e90586af356c6063f2bac91fe11736e45fb7d4c9ff414ce6de9c7f4/mappet-0.1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50310ab48e3952551252936a7c5e2e7f", "sha256": "40c6e394d6986e2a2ec24ad83296c100539886460c6b9110e3842b170198a743"}, "downloads": -1, "filename": "mappet-0.1.2.tar.gz", "has_sig": false, "md5_digest": "50310ab48e3952551252936a7c5e2e7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10724, "upload_time": "2015-08-27T10:11:54", "upload_time_iso_8601": "2015-08-27T10:11:54.154629Z", "url": "https://files.pythonhosted.org/packages/a2/fa/a2b5a78703bb1b93cffebbc534092595b9da88f323bc4d94eaaf4fb7877c/mappet-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "faf0bb490f06d1945f6f33d303f5df8c", "sha256": "5547df1e4a7129f44d78ae65f73b2bec95dfc8b38abda6babc1034ecaec573ee"}, "downloads": -1, "filename": "mappet-0.1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "faf0bb490f06d1945f6f33d303f5df8c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13749, "upload_time": "2015-08-27T10:11:49", "upload_time_iso_8601": "2015-08-27T10:11:49.099215Z", "url": "https://files.pythonhosted.org/packages/57/31/a2640e90586af356c6063f2bac91fe11736e45fb7d4c9ff414ce6de9c7f4/mappet-0.1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50310ab48e3952551252936a7c5e2e7f", "sha256": "40c6e394d6986e2a2ec24ad83296c100539886460c6b9110e3842b170198a743"}, "downloads": -1, "filename": "mappet-0.1.2.tar.gz", "has_sig": false, "md5_digest": "50310ab48e3952551252936a7c5e2e7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10724, "upload_time": "2015-08-27T10:11:54", "upload_time_iso_8601": "2015-08-27T10:11:54.154629Z", "url": "https://files.pythonhosted.org/packages/a2/fa/a2b5a78703bb1b93cffebbc534092595b9da88f323bc4d94eaaf4fb7877c/mappet-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:54 2020"}