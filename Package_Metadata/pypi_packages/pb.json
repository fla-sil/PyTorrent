{"info": {"author": "Simeon Warner", "author_email": "simeon.warner@cornell.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7"], "description": "pb - Python with braces (duck) for easy one-liners\n==================================================\n\nAs an old Perl-hack I really miss the convenience of one-line programs where\nI can easily add block structure. This script emulates the behaviors of \n`perl -e`, `perl -n` and `perl -p` using braces (`{` and `}`) to generate \nPythonesque indentation. There may be other ways to get around this but \nthe goal is to make one-liners as easy as we expect.\n\nExamples:\n\n```\n>./pb 'for j in range(1,10) { for k in range(0,j) { sys.stdout.write(\".\") } sys.stdout.write(\"\\n\") }'\n.\n..\n...\n....\n.....\n......\n.......\n........\n.........\n```\n\nPS. I know this one is very easy as a true Python one-liner:\n\n\n```\n>python -c 'print \"\\n\".join(\".\"*j for j in range (1,10))'\n.\n..\n...\n....\n.....\n......\n.......\n........\n.........\n```", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/zimeon/pb", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pb", "package_url": "https://pypi.org/project/pb/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pb/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/zimeon/pb"}, "release_url": "https://pypi.org/project/pb/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Python with braces for easy one-liners", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>As an old Perl-hack I really miss the convenience of one-line programs where\nI can easily add block structure. This script emulates the behaviors of\n<cite>perl -e</cite>, <cite>perl -n</cite> and <cite>perl -p</cite> using braces (<cite>{</cite> and <cite>}</cite>) to generate\nPythonesque indentation. There may be other ways to get around this but\nthe goal is to make one-liners as easy as we expect.</p>\n<p>Examples:</p>\n<p><tt>`\n<span class=\"pre\">&gt;./pb</span> 'for j in range(1,10) { for k in range(0,j) { <span class=\"pre\">sys.stdout.write(\".\")</span> } <span class=\"pre\">sys.stdout.write(\"\\n\")</span> }'\n.\n..\n...\n<span class=\"pre\">....</span>\n<span class=\"pre\">.....</span>\n<span class=\"pre\">......</span>\n<span class=\"pre\">.......</span>\n<span class=\"pre\">........</span>\n<span class=\"pre\">.........</span>\n`</tt></p>\n<p>PS. I know this one is very easy as a true Python one-liner:</p>\n<p><tt>`\n&gt;python <span class=\"pre\">-c</span> 'print <span class=\"pre\">\"\\n\".join(\".\"*j</span> for j in range <span class=\"pre\">(1,10))'</span>\n.\n..\n...\n<span class=\"pre\">....</span>\n<span class=\"pre\">.....</span>\n<span class=\"pre\">......</span>\n<span class=\"pre\">.......</span>\n<span class=\"pre\">........</span>\n<span class=\"pre\">.........</span>\n`</tt></p>\n\n          </div>"}, "last_serial": 1425950, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 02:57:38 2020"}