{"info": {"author": "William Minchin", "author_email": "w_minchin@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Pelican :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Affero General Public License v3", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===============\nPost Statistics\n===============\n\n``Post Stats`` is a plugin for `Pelican <http://docs.getpelican.com/>`_,\na static site generator written in Python.\n\n``Post Stats`` calculates various statistics about a post and store them in\nan article.stats dictionary:\n\n- ``wc``: how many words\n- ``read_mins``: how many minutes would it take to read this article, based\n  on 250 wpm\n  (`source <http://en.wikipedia.org/wiki/Words_per_minute#Reading_and_comprehension>`_)\n- ``word_counts``: frquency count of all the words in the article; can be\n  used for tag/word clouds\n- ``fi``: Flesch-kincaid Index/ Reading Ease\n  (`more info <http://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests>`_)\n- ``fk``: Flesch-kincaid Grade Level\n\n\nInstallation\n============\n\nThe easiest way to install ``Post Stats`` is through the use of pip. This\nwill also install the required dependencies automatically.\n\n.. code-block:: sh\n\n  pip install minchin.pelican.plugins.post_stats\n\nThen, in your ``pelicanconf.py`` file, add ``Post Stats`` to your list of\nplugins:\n\n.. code-block:: python\n\n  PLUGINS = [\n              # ...\n              'minchin.pelican.plugins.post_stats',\n              # ...\n            ]\n\nYou may also need to configure your template to make use of the statistics\ngenerated.\n\n\nRequirements\n============\n\n``Post Stats`` depends on (and is really only useful with) Pelican. The\nplugin also requries Beautiful Soup 4 to process your content. If the plugin\nis installed from pip, these will automatically be installed. These can also\nbe manually installed with pip:\n\n.. code-block:: sh\n\n   pip install pelican\n   pip install beautifulsoup4\n\n\n\nConfiguration and Usage\n=======================\n\nThis plugin calculates various statistics about a post and store them in\nan article.stats dictionary.\n\nExample:\n\n.. code-block:: python\n\n    {\n        'wc': 2760,\n        'fi': '65.94',\n        'fk': '7.65',\n        'word_counts': Counter({u'to': 98, u'a': 90, u'the': 83, u'of': 50, ...}),\n        'read_mins': 12\n    }\n\nThis allows you to output these values in your templates, like this, for\nexample:\n\n.. code-block:: html+jinja\n\n\t<p title=\"~{{ article.stats['wc'] }} words\">~{{ article.stats['read_mins'] }} min read</p>\n\t<ul>\n\t    <li>Flesch-kincaid Index/ Reading Ease: {{ article.stats['fi'] }}</li>\n\t    <li>Flesch-kincaid Grade Level: {{ article.stats['fk'] }}</li>\n\t</ul>\n\nThe ``word_counts`` variable is a python ``Counter`` dictionary and looks\nsomething like this, with each unique word and it's frequency:\n\n.. code-block:: python\n\n\tCounter({u'to': 98, u'a': 90, u'the': 83, u'of': 50, u'karma': 50, .....\n\nand can be used to create a tag/word cloud for a post.\n\nThere are no user-configurable settings.\n\n\nCredits\n=======\n\n`Original plugin <http://duncanlock.net/blog/2013/06/23/post-statistics-plugin-for-pelican/>`_\nby Duncan Lock (`@dflock <https://github.com/dflock>`_) and\nposted to the `Pelican-Plugins repo\n<https://github.com/getpelican/pelican-plugins>`_.\n\n\nLicense\n=======\n\nThe plugin code is assumed to be under the AGPLv3 license (this is the\nlicense of the Pelican-Plugins repo).", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MinchinWeb/minchin.pelican.plugins.post_stats", "keywords": "", "license": "GNU Affero General Public License v3", "maintainer": "", "maintainer_email": "", "name": "minchin.pelican.plugins.post-stats", "package_url": "https://pypi.org/project/minchin.pelican.plugins.post-stats/", "platform": "any", "project_url": "https://pypi.org/project/minchin.pelican.plugins.post-stats/", "project_urls": {"Homepage": "https://github.com/MinchinWeb/minchin.pelican.plugins.post_stats"}, "release_url": "https://pypi.org/project/minchin.pelican.plugins.post-stats/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "This Pelcan plugin calculates various statistics about a post and stores them in an article.stats dictionary.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>Post Stats</tt> is a plugin for <a href=\"http://docs.getpelican.com/\" rel=\"nofollow\">Pelican</a>,\na static site generator written in Python.</p>\n<p><tt>Post Stats</tt> calculates various statistics about a post and store them in\nan article.stats dictionary:</p>\n<ul>\n<li><tt>wc</tt>: how many words</li>\n<li><tt>read_mins</tt>: how many minutes would it take to read this article, based\non 250 wpm\n(<a href=\"http://en.wikipedia.org/wiki/Words_per_minute#Reading_and_comprehension\" rel=\"nofollow\">source</a>)</li>\n<li><tt>word_counts</tt>: frquency count of all the words in the article; can be\nused for tag/word clouds</li>\n<li><tt>fi</tt>: Flesch-kincaid Index/ Reading Ease\n(<a href=\"http://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests\" rel=\"nofollow\">more info</a>)</li>\n<li><tt>fk</tt>: Flesch-kincaid Grade Level</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The easiest way to install <tt>Post Stats</tt> is through the use of pip. This\nwill also install the required dependencies automatically.</p>\n<pre>pip install minchin.pelican.plugins.post_stats\n</pre>\n<p>Then, in your <tt>pelicanconf.py</tt> file, add <tt>Post Stats</tt> to your list of\nplugins:</p>\n<pre><span class=\"n\">PLUGINS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"c1\"># ...</span>\n            <span class=\"s1\">'minchin.pelican.plugins.post_stats'</span><span class=\"p\">,</span>\n            <span class=\"c1\"># ...</span>\n          <span class=\"p\">]</span>\n</pre>\n<p>You may also need to configure your template to make use of the statistics\ngenerated.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p><tt>Post Stats</tt> depends on (and is really only useful with) Pelican. The\nplugin also requries Beautiful Soup 4 to process your content. If the plugin\nis installed from pip, these will automatically be installed. These can also\nbe manually installed with pip:</p>\n<pre>pip install pelican\npip install beautifulsoup4\n</pre>\n</div>\n<div id=\"configuration-and-usage\">\n<h2>Configuration and Usage</h2>\n<p>This plugin calculates various statistics about a post and store them in\nan article.stats dictionary.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'wc'</span><span class=\"p\">:</span> <span class=\"mi\">2760</span><span class=\"p\">,</span>\n    <span class=\"s1\">'fi'</span><span class=\"p\">:</span> <span class=\"s1\">'65.94'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'fk'</span><span class=\"p\">:</span> <span class=\"s1\">'7.65'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'word_counts'</span><span class=\"p\">:</span> <span class=\"n\">Counter</span><span class=\"p\">({</span><span class=\"sa\">u</span><span class=\"s1\">'to'</span><span class=\"p\">:</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'the'</span><span class=\"p\">:</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'of'</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">}),</span>\n    <span class=\"s1\">'read_mins'</span><span class=\"p\">:</span> <span class=\"mi\">12</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This allows you to output these values in your templates, like this, for\nexample:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"~</span><span class=\"cp\">{{</span> <span class=\"nv\">article.stats</span><span class=\"o\">[</span><span class=\"s1\">'wc'</span><span class=\"o\">]</span> <span class=\"cp\">}}</span><span class=\"s\"> words\"</span><span class=\"p\">&gt;</span>~<span class=\"cp\">{{</span> <span class=\"nv\">article.stats</span><span class=\"o\">[</span><span class=\"s1\">'read_mins'</span><span class=\"o\">]</span> <span class=\"cp\">}}</span> min read<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Flesch-kincaid Index/ Reading Ease: <span class=\"cp\">{{</span> <span class=\"nv\">article.stats</span><span class=\"o\">[</span><span class=\"s1\">'fi'</span><span class=\"o\">]</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Flesch-kincaid Grade Level: <span class=\"cp\">{{</span> <span class=\"nv\">article.stats</span><span class=\"o\">[</span><span class=\"s1\">'fk'</span><span class=\"o\">]</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre>\n<p>The <tt>word_counts</tt> variable is a python <tt>Counter</tt> dictionary and looks\nsomething like this, with each unique word and it\u2019s frequency:</p>\n<pre><span class=\"n\">Counter</span><span class=\"p\">({</span><span class=\"sa\">u</span><span class=\"s1\">'to'</span><span class=\"p\">:</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'the'</span><span class=\"p\">:</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'of'</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'karma'</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"o\">.....</span>\n</pre>\n<p>and can be used to create a tag/word cloud for a post.</p>\n<p>There are no user-configurable settings.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p><a href=\"http://duncanlock.net/blog/2013/06/23/post-statistics-plugin-for-pelican/\" rel=\"nofollow\">Original plugin</a>\nby Duncan Lock (<a href=\"https://github.com/dflock\" rel=\"nofollow\">@dflock</a>) and\nposted to the <a href=\"https://github.com/getpelican/pelican-plugins\" rel=\"nofollow\">Pelican-Plugins repo</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The plugin code is assumed to be under the AGPLv3 license (this is the\nlicense of the Pelican-Plugins repo).</p>\n</div>\n\n          </div>"}, "last_serial": 2811402, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "cc27fcf045fa4b8079c17fd199eb23d4", "sha256": "a96e4d2cc8aba713b031001bc9b2e17e406b387725db9f5beaf5c62a60799ff0"}, "downloads": -1, "filename": "minchin.pelican.plugins.post_stats-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cc27fcf045fa4b8079c17fd199eb23d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8907, "upload_time": "2017-02-22T19:22:27", "upload_time_iso_8601": "2017-02-22T19:22:27.324157Z", "url": "https://files.pythonhosted.org/packages/fb/b1/1ebcf73d4e6076807c289d352b719cb4423679a57a5da343f734fae88edc/minchin.pelican.plugins.post_stats-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eb7755e0d68a81d1801ea788bdf6134", "sha256": "8dd90f8290cb8523e63f452569c65233e69ae7222a91a54c973e254c2c06264e"}, "downloads": -1, "filename": "minchin.pelican.plugins.post_stats-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6eb7755e0d68a81d1801ea788bdf6134", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18322, "upload_time": "2017-02-22T19:21:14", "upload_time_iso_8601": "2017-02-22T19:21:14.394451Z", "url": "https://files.pythonhosted.org/packages/57/5f/4ed12028982d9ae1fc097f80d8f067469de57c6e7dfd780579354a77fbf0/minchin.pelican.plugins.post_stats-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "831dfe0c5eded04921c14cda6414f7e0", "sha256": "a3fe94e9499c0dda36724b30d53fc407a56bc1cfdbc749a78aea8d6fc5d79af0"}, "downloads": -1, "filename": "minchin.pelican.plugins.post_stats-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "831dfe0c5eded04921c14cda6414f7e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9017, "upload_time": "2017-04-18T15:05:37", "upload_time_iso_8601": "2017-04-18T15:05:37.492077Z", "url": "https://files.pythonhosted.org/packages/c7/4d/8c7d3da261b4c2a7c6b1c4ce2433bc8e2c405570274ad5bf17f23bd43322/minchin.pelican.plugins.post_stats-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b56f016531c928a221e65bc0d8484127", "sha256": "ce64592aa74626db2c6e7bd56c1ecc1d571c6123d38f95930b83e6e00cf74cde"}, "downloads": -1, "filename": "minchin.pelican.plugins.post_stats-1.1.1.tar.gz", "has_sig": false, "md5_digest": "b56f016531c928a221e65bc0d8484127", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18431, "upload_time": "2017-04-18T15:04:39", "upload_time_iso_8601": "2017-04-18T15:04:39.089616Z", "url": "https://files.pythonhosted.org/packages/48/5f/0fbdf2b04561cc15cdcf69159fb4c9030bbb738cae9c7e4811e7757339bd/minchin.pelican.plugins.post_stats-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "831dfe0c5eded04921c14cda6414f7e0", "sha256": "a3fe94e9499c0dda36724b30d53fc407a56bc1cfdbc749a78aea8d6fc5d79af0"}, "downloads": -1, "filename": "minchin.pelican.plugins.post_stats-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "831dfe0c5eded04921c14cda6414f7e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9017, "upload_time": "2017-04-18T15:05:37", "upload_time_iso_8601": "2017-04-18T15:05:37.492077Z", "url": "https://files.pythonhosted.org/packages/c7/4d/8c7d3da261b4c2a7c6b1c4ce2433bc8e2c405570274ad5bf17f23bd43322/minchin.pelican.plugins.post_stats-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b56f016531c928a221e65bc0d8484127", "sha256": "ce64592aa74626db2c6e7bd56c1ecc1d571c6123d38f95930b83e6e00cf74cde"}, "downloads": -1, "filename": "minchin.pelican.plugins.post_stats-1.1.1.tar.gz", "has_sig": false, "md5_digest": "b56f016531c928a221e65bc0d8484127", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18431, "upload_time": "2017-04-18T15:04:39", "upload_time_iso_8601": "2017-04-18T15:04:39.089616Z", "url": "https://files.pythonhosted.org/packages/48/5f/0fbdf2b04561cc15cdcf69159fb4c9030bbb738cae9c7e4811e7757339bd/minchin.pelican.plugins.post_stats-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:34 2020"}