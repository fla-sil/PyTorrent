{"info": {"author": "Satoru SATOH", "author_email": "satoru.satoh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup", "Topic :: Utilities"], "description": "=============\nanytemplate\n=============\n\nAbout\n======\n\n.. image:: https://img.shields.io/pypi/v/anytemplate.svg\n   :target: https://pypi.python.org/pypi/anytemplate/\n   :alt: [Latest Version]\n\n.. image:: https://img.shields.io/pypi/pyversions/anytemplate.svg\n   :target: https://pypi.python.org/pypi/anytemplate/\n   :alt: [Python versions]\n\n.. .. image:: https://img.shields.io/pypi/l/anytemplate.svg\n   :target: https://pypi.python.org/pypi/anytemplate/\n   :alt: [MIT License]\n\n.. image:: https://api.travis-ci.org/ssato/python-anytemplate.png?branch=master\n   :target: https://travis-ci.org/ssato/python-anytemplate\n   :alt: [Test status]\n\n.. image:: https://coveralls.io/repos/ssato/python-anytemplate/badge.png\n   :target: https://coveralls.io/r/ssato/python-anytemplate\n   :alt: [Coverage Status]\n\n.. image:: https://landscape.io/github/ssato/python-anytemplate/master/landscape.png\n   :target: https://landscape.io/github/ssato/python-anytemplate/master\n   :alt: [Code Health]\n\nThis is a python library works as an abstraction layer for various python\ntemplate engines and rendering libraries, and provide a few very simple and\neasily understandable APIs to render templates.\n\nAlso a CLI tool called anytemplate_cli is provided to render templates written\nin these template languages.\n\n- Author: Satoru SATOH <ssato@redhat.com>\n- License: MIT\n\nThe following template engines are supported currently:\n\n.. csv-table::\n   :header: \"Name\", \"Notes\"\n   :widths: 15, 65\n\n   `string.Template <https://www.python.org>`_ , Always available as it's included in python standard lib.\n   `jinja2 <http://jinja.pocoo.org>`_ , Highest priory will be given and becomes default if found\n   `mako <http://www.makotemplates.org>`_ ,\n   `tenjin <http://www.kuwata-lab.com/tenjin/>`_ , renders() API is not supported\n   `Cheetah <http://cheetahtemplate.org>`_ , `Cheetah3 <https://pypi.python.org/pypi/Cheetah3/>`_ is needed to use with python 3.x\n   `pystache <https://github.com/defunkt/pystache>`_ ,\n\n.. .. [#] https://pypi.python.org/pypi/Cheetah3/ , which is not yet available in stable Fedora release according to https://apps.fedoraproject.org/packages/python-cheetah.\n\nFeatures\n==========\n\n- Provides very simple and unified APIs for various template engines:\n\n  - anytemplate.renders() to render given template string\n  - anytemplate.render() to render given template file\n\n- Can process template engine specific options:\n\n  - anytemplate.render{s,} allow passing option parameters specific to each template rendering functions behind this library\n  - anytemplate.find_engine() returns an 'engine' object to allow some more fine tunes of template engine specific customization by passing option parameters to them\n\n- Provide a CLI tool called anytemplate_cli to process templates in command line\n\nAPI Usage\n============\n\nAPI Examples\n--------------\n\nCall 'anytemplate.renders' to render given template strings like this:\n\n.. code-block:: python\n\n    result = anytemplate.renders(\"{{ x|default('aaa') }}\", {'x': 'bbb'},\n                                 at_engine=\"jinja2\")\n\nThe first parameter is a template string itself. And the second one is a dict\nor dict-like object which is generally called as 'context' object to\ninstantiate templates. The third one, keyword parameter 'at_engine' is needed\nto find the appropriate template engine to render given template string. This\nkeyword parameter is necessary because it's very difficult and should be almost\nimpossible for any template languages to detect correct template engine only by\ngiven template string itself.\n\nIf 'at_engine' is omitted, a template engine of highest priority is choosen.\nOnly available template engines and libraries are enabled automatically in\nanytemplate, so that that engine will be vary in accordance with your\nenvironment. For example, 'jinja2' is the engine of highest priority in my\ndevelopment envrionment with all supported template engines and libraries\ninstalled:\n\n.. code-block:: python\n\n   In [6]: import anytemplate\n\n   In [7]: anytemplate.find_engine()   # It will return the highest priority one.\n   Out[7]: anytemplate.engines.jinja2.Engine\n\n   In [8]: anytemplate.find_engine().name()\n   Out[8]: 'jinja2'\n\nIt's also possible to some option parameters specific to the template engine\nchoosen with keyword parameters like this:\n\n.. code-block:: python\n\n    # 'strict_undefined' is a parameter for mako.template.Template.__init__().\n    result = anytemplate.renders(\"${x}\", {'x': 'bbb'},\n                                 at_engine=\"mako\",\n                                 strict_undefined=False)\n\nFor details such as generic option parameters list of 'anytemplate.renders',\nsee its help:\n\n.. code-block:: python\n\n  In [20]: help(anytemplate.renders)\n  Help on function renders in module anytemplate.api:\n\n  renders(template_content, context=None, at_paths=None, at_encoding='UTF-8', at_engine=None, at_ask_missing=False, at_cls_args=None, **kwargs)\n      Compile and render given template content and return the result string.\n\n      :param template_content: Template content\n      :param context: A dict or dict-like object to instantiate given\n          template file\n      :param at_paths: Template search paths\n      :param at_encoding: Template encoding\n      :param at_engine: Specify the name of template engine to use explicitly or\n          None to find it automatically anyhow.\n      :param at_cls_args: Arguments passed to instantiate template engine class\n      :param kwargs: Keyword arguments passed to the template engine to\n          render templates with specific features enabled.\n\n      :return: Rendered string\n\n  In [21]:\n\nCall 'anytemplate.render' to render given template file like this:\n\n.. code-block:: python\n\n    result1 = anytemplate.render(\"/path/to/a_template.tmpl\", {'x': 'bbb'},\n                                 at_engine=\"mako\")\n\n    result2 = anytemplate.render(\"another_template.t\", {'y': 'ccc'},\n                                 at_engine=\"tenjin\",\n                                 at_paths=['/path/to/templates/', '.'])\n\nThe parameters are similar to the previous example except for the first one.\n\nThe first parameter is not a template string but a path of template file, may\nbe relative or absolute path, or basename with template search paths\n(at_paths=[PATH_0, PATH_1, ...]) given.\n\nSome module wraps actual template engines in anytemplate supports automatic\ndetection of the engine by file extensions of template files. For example,\nJinja2 template files of which expected file extensions are '.j2' or '.jinja2'\ntypically. So I made that such files are automatically detected as jinja2\ntemplate file and you don't need to specify the engine by 'at_engine' parameter\nlike this:\n\n.. code-block:: python\n\n    # 'jinaj2' template engine is automatically choosen because the extension\n    # of template file is '.j2'.\n    result = anytemplate.render(\"/path/to/a_template.j2\", {'x': 'bbb'})\n\nFor details such as option parameters list of 'anytemplate.render',\nsee its help:\n\n.. code-block:: python\n\n  In [21]: help(anytemplate.render)\n  Help on function render in module anytemplate.api:\n\n  render(filepath, context=None, at_paths=None, at_encoding='UTF-8', at_engine=None, at_ask_missing=False, at_cls_args=None, **kwargs)\n      Compile and render given template file and return the result string.\n\n      :param template: Template file path\n      :param context: A dict or dict-like object to instantiate given\n          template file\n      :param at_paths: Template search paths\n      :param at_encoding: Template encoding\n      :param at_engine: Specify the name of template engine to use explicitly or\n          None to find it automatically anyhow.\n      :param at_cls_args: Arguments passed to instantiate template engine class\n      :param kwargs: Keyword arguments passed to the template engine to\n          render templates with specific features enabled.\n\n      :return: Rendered string\n\n  In [22]:\n\nCLI Usage\n============\n\nCLI help\n-----------\n\n.. code-block:: console\n\n  ssato@localhost% PYTHONPATH=. python anytemplate/cli.py -h\n  Usage: anytemplate/cli.py [OPTION ...] TEMPLATE_FILE\n\n  Options:\n    -h, --help            show this help message and exit\n    -T TEMPLATE_PATHS, --template-path=TEMPLATE_PATHS\n                          Template search path can be specified multiple times.\n                          Note: Dir in which given template exists is always\n                          included in the search paths (at the end of the path\n                          list) regardless of this option.\n    -C CONTEXTS, --context=CONTEXTS\n                          Specify file path and optionally its filetype, to\n                          provides context data to instantiate templates.  The\n                          option argument's format is\n                          [type:]<file_name_or_path_or_glob_pattern> ex. -C\n                          json:common.json -C ./specific.yaml -C yaml:test.dat,\n                          -C yaml:/etc/foo.d/*.conf\n    -E ENGINE, --engine=ENGINE\n                          Specify template engine name such as 'jinja2'\n    -L, --list-engines    List supported template engines in your environment\n    -o OUTPUT, --output=OUTPUT\n                          Output filename [stdout]\n    -v, --verbose         Verbose mode\n    -q, --quiet           Quiet mode\n  ssato@localhost% cat examples/ctx.yml\n  xs:\n    - name: Alice\n    - name: Bob\n    - name: John\n\n  ssato@localhost% cat examples/jinja2.j2\n  {% include \"jinja2-incl.j2\" %}\n  ssato@localhost% cat examples/jinja2-incl.j2\n  {# jinja2 example: #}\n  {% for x in xs if x.name -%}\n  {{ x.name }}\n  {% endfor %}\n  ssato@localhost% PYTHONPATH=. python anytemplate/cli.py -E jinja2 \\\n  > -C examples/ctx.yml examples/jinja2.j2\n\n  Alice\n  Bob\n  John\n\n  ssato@localhost%\n\nCLI Features\n-----------------\n\nMultiple context files support to define template parameters\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe CLI tool (anytemplate_cli) supports to load multiple context files in YAML\nor JSON or others to give template parameters with -C|--context option.\n\nLoading and composing of context files are handled by my another python library\ncalled anyconfig (python-anyconfig) if installed and available on your system.\n\n- anyconfig on PyPI: http://pypi.python.org/pypi/anyconfig/\n- python-anyconfig on github: https://github.com/ssato/python-anyconfig\n\nIf anyconfig is not found on your system, only JSON context files are supported\nformat of context files, by help of python standard json or simplejson library.\n\nTemplate search paths\n^^^^^^^^^^^^^^^^^^^^^^^\n\nTemplate search paths are specified with -T|--template-path option of the CLI\ntool (anytemplate_cli).  This is useful when using 'include' directive in\ntemplates; ex. -T .:templates/.\n\nNOTE: The default search path will be ['.',\ndir_in_which_given_template_file_is] where templatedir is the directory in\nwhich the given template file exists if -T option is not given.  And even if -T\noption is used, templatedir will be appended to that search paths at the end.\n\nBuild & Install\n================\n\nIf you're Fedora or Red Hat Enterprise Linux user, you can build and install\n[s]rpm by yourself:\n\n.. code-block:: console\n\n   $ python setup.py srpm && mock dist/python-anytemplate-<ver_dist>.src.rpm\n\nor:\n\n.. code-block:: console\n\n   $ python setup.py rpm\n\nor you can install pre-built RPMs from one of my copr repos, https://copr.fedorainfracloud.org/coprs/ssato/python-anyconfig/\n\n.. code-block:: console\n\n   # Fedora\n   $ sudo dnf copr enable ssato/python-anyconfig\n   $ sudo dnf install -y python-anytemplate   # or python3-anytemplate (python3 version)\n\n.. code-block:: console\n\n   # RHEL, CentOS\n   $ (cd /etc/yum.repos.d; sudo curl -O https://copr.fedorainfracloud.org/coprs/ssato/python-anyconfig/repo/epel-7/ssato-python-anyconfig-epel-7.repo)\n   $ sudo dnf install -y python-anytemplate   # or python3-anytemplate (python3 version)\n\nOtherwise, try usual ways to build and/or install python modules such like 'pip\ninstall git+https://github.com/ssato/python-anytemplate' and 'python setup.py\nbdist', etc.\n\nHacking\n===========\n\nHow to test\n-------------\n\nI choose tox for manual tests and CI. Try to run 'tox [-e py27]' for example.\n\nTODO & Issues\n===============\n\n- Add descriptions (doctext) of template engine and library specific options: WIP\n- Add descriptions (doctext) how anytemplate wraps each template engine and library: WIP\n- Complete unit tests:\n\n  - Add test cases of each template engine specific options: WIP\n\n- Stablize public and private (internal) APIs:\n\n  - Private APIs still needs a lot of work especially. It's very vague how it should be as each template engine have its own concept and design and I'm not sure how to abstract them yet.\n  - I don't think public APIs have large issues but these be affected by changes of private APIs more or less; I'm thinking to deprecate the keyword parameter 'at_cls_args' for example.\n\nMisc\n======\n\nAlternatives\n---------------\n\nThere are a few libraries works like this:\n\n- TemplateAlchemy: https://pypi.python.org/pypi/TemplateAlchemy/\n- collective.templateengines: https://pypi.python.org/pypi/collective.templateengines\n\nThese look more feature-rich and comprehensive, but I prefer a lot more\nlightweight and thin wrapper library along with CLI tool (template renderer) so\nthat I made anytemplate.\n\nAnd:\n\n- python-jinja2-cli: https://github.com/ssato/python-jinja2-cli\n\nAnytemplate is a successor of python-jinja2-cli.\n\n.. vim:sw=2:ts=2:et:\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ssato/python-anytemplate", "keywords": "", "license": "MIT", "maintainer": "Satoru SATOH", "maintainer_email": "satoru.satoh@gmail.com", "name": "anytemplate", "package_url": "https://pypi.org/project/anytemplate/", "platform": "", "project_url": "https://pypi.org/project/anytemplate/", "project_urls": {"Bug Tracker": "https://github.com/ssato/python-anytemplate/issues", "CI: Travis": "https://travis-ci.org/ssato/python-anytemplate", "Download": "https://pypi.python.org/pypi/anytemplate", "Download RPMs": "https://copr.fedoraproject.org/coprs/ssato/python-anyconfig/", "Homepage": "https://github.com/ssato/python-anytemplate", "Source": "https://github.com/ssato/python-anytemplate"}, "release_url": "https://pypi.org/project/anytemplate/0.1.6/", "requires_dist": ["anyconfig", "jinja2"], "requires_python": "", "summary": "A module to abstract template engines and provide common APIs", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<a href=\"https://pypi.python.org/pypi/anytemplate/\" rel=\"nofollow\"><img alt=\"[Latest Version]\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5cd4acd75f664283105530f5f5c17e26505538e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f616e7974656d706c6174652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/anytemplate/\" rel=\"nofollow\"><img alt=\"[Python versions]\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3dca46b066d7c9809bd09f6febad13be053dc549/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f616e7974656d706c6174652e737667\"></a>\n<a href=\"https://travis-ci.org/ssato/python-anytemplate\" rel=\"nofollow\"><img alt=\"[Test status]\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7f64978f573e2cca90e1ba484db3e5ebd6dcaa6/68747470733a2f2f6170692e7472617669732d63692e6f72672f737361746f2f707974686f6e2d616e7974656d706c6174652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/ssato/python-anytemplate\" rel=\"nofollow\"><img alt=\"[Coverage Status]\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00e8e9ea87c3241bd8f8ef2c11c018adeac4979a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f737361746f2f707974686f6e2d616e7974656d706c6174652f62616467652e706e67\"></a>\n<a href=\"https://landscape.io/github/ssato/python-anytemplate/master\" rel=\"nofollow\"><img alt=\"[Code Health]\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb433024f1ea6886c70596fce732a88dc8a071c6/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f737361746f2f707974686f6e2d616e7974656d706c6174652f6d61737465722f6c616e6473636170652e706e67\"></a>\n<p>This is a python library works as an abstraction layer for various python\ntemplate engines and rendering libraries, and provide a few very simple and\neasily understandable APIs to render templates.</p>\n<p>Also a CLI tool called anytemplate_cli is provided to render templates written\nin these template languages.</p>\n<ul>\n<li>Author: Satoru SATOH &lt;<a href=\"mailto:ssato%40redhat.com\">ssato<span>@</span>redhat<span>.</span>com</a>&gt;</li>\n<li>License: MIT</li>\n</ul>\n<p>The following template engines are supported currently:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Name</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><a href=\"https://www.python.org\" rel=\"nofollow\">string.Template</a></td>\n<td>Always available as it\u2019s included in python standard lib.</td>\n</tr>\n<tr><td><a href=\"http://jinja.pocoo.org\" rel=\"nofollow\">jinja2</a></td>\n<td>Highest priory will be given and becomes default if found</td>\n</tr>\n<tr><td><a href=\"http://www.makotemplates.org\" rel=\"nofollow\">mako</a></td>\n<td>\u00a0</td>\n</tr>\n<tr><td><a href=\"http://www.kuwata-lab.com/tenjin/\" rel=\"nofollow\">tenjin</a></td>\n<td>renders() API is not supported</td>\n</tr>\n<tr><td><a href=\"http://cheetahtemplate.org\" rel=\"nofollow\">Cheetah</a></td>\n<td><a href=\"https://pypi.python.org/pypi/Cheetah3/\" rel=\"nofollow\">Cheetah3</a> is needed to use with python 3.x</td>\n</tr>\n<tr><td><a href=\"https://github.com/defunkt/pystache\" rel=\"nofollow\">pystache</a></td>\n<td>\u00a0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Provides very simple and unified APIs for various template engines:<ul>\n<li>anytemplate.renders() to render given template string</li>\n<li>anytemplate.render() to render given template file</li>\n</ul>\n</li>\n<li>Can process template engine specific options:<ul>\n<li>anytemplate.render{s,} allow passing option parameters specific to each template rendering functions behind this library</li>\n<li>anytemplate.find_engine() returns an \u2018engine\u2019 object to allow some more fine tunes of template engine specific customization by passing option parameters to them</li>\n</ul>\n</li>\n<li>Provide a CLI tool called anytemplate_cli to process templates in command line</li>\n</ul>\n</div>\n<div id=\"api-usage\">\n<h2>API Usage</h2>\n<h2 id=\"api-examples\"><span class=\"section-subtitle\">API Examples</span></h2>\n<p>Call \u2018anytemplate.renders\u2019 to render given template strings like this:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">renders</span><span class=\"p\">(</span><span class=\"s2\">\"{{ x|default('aaa') }}\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"s1\">'bbb'</span><span class=\"p\">},</span>\n                             <span class=\"n\">at_engine</span><span class=\"o\">=</span><span class=\"s2\">\"jinja2\"</span><span class=\"p\">)</span>\n</pre>\n<p>The first parameter is a template string itself. And the second one is a dict\nor dict-like object which is generally called as \u2018context\u2019 object to\ninstantiate templates. The third one, keyword parameter \u2018at_engine\u2019 is needed\nto find the appropriate template engine to render given template string. This\nkeyword parameter is necessary because it\u2019s very difficult and should be almost\nimpossible for any template languages to detect correct template engine only by\ngiven template string itself.</p>\n<p>If \u2018at_engine\u2019 is omitted, a template engine of highest priority is choosen.\nOnly available template engines and libraries are enabled automatically in\nanytemplate, so that that engine will be vary in accordance with your\nenvironment. For example, \u2018jinja2\u2019 is the engine of highest priority in my\ndevelopment envrionment with all supported template engines and libraries\ninstalled:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">anytemplate</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">find_engine</span><span class=\"p\">()</span>   <span class=\"c1\"># It will return the highest priority one.</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">jinja2</span><span class=\"o\">.</span><span class=\"n\">Engine</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">find_engine</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">()</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"s1\">'jinja2'</span>\n</pre>\n<p>It\u2019s also possible to some option parameters specific to the template engine\nchoosen with keyword parameters like this:</p>\n<pre><span class=\"c1\"># 'strict_undefined' is a parameter for mako.template.Template.__init__().</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">renders</span><span class=\"p\">(</span><span class=\"s2\">\"$</span><span class=\"si\">{x}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"s1\">'bbb'</span><span class=\"p\">},</span>\n                             <span class=\"n\">at_engine</span><span class=\"o\">=</span><span class=\"s2\">\"mako\"</span><span class=\"p\">,</span>\n                             <span class=\"n\">strict_undefined</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>For details such as generic option parameters list of \u2018anytemplate.renders\u2019,\nsee its help:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">]:</span> <span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">renders</span><span class=\"p\">)</span>\n<span class=\"n\">Help</span> <span class=\"n\">on</span> <span class=\"n\">function</span> <span class=\"n\">renders</span> <span class=\"ow\">in</span> <span class=\"n\">module</span> <span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"p\">:</span>\n\n<span class=\"n\">renders</span><span class=\"p\">(</span><span class=\"n\">template_content</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">at_paths</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">at_encoding</span><span class=\"o\">=</span><span class=\"s1\">'UTF-8'</span><span class=\"p\">,</span> <span class=\"n\">at_engine</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">at_ask_missing</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">at_cls_args</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">Compile</span> <span class=\"ow\">and</span> <span class=\"n\">render</span> <span class=\"n\">given</span> <span class=\"n\">template</span> <span class=\"n\">content</span> <span class=\"ow\">and</span> <span class=\"k\">return</span> <span class=\"n\">the</span> <span class=\"n\">result</span> <span class=\"n\">string</span><span class=\"o\">.</span>\n\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">template_content</span><span class=\"p\">:</span> <span class=\"n\">Template</span> <span class=\"n\">content</span>\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">A</span> <span class=\"nb\">dict</span> <span class=\"ow\">or</span> <span class=\"nb\">dict</span><span class=\"o\">-</span><span class=\"n\">like</span> <span class=\"nb\">object</span> <span class=\"n\">to</span> <span class=\"n\">instantiate</span> <span class=\"n\">given</span>\n        <span class=\"n\">template</span> <span class=\"n\">file</span>\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">at_paths</span><span class=\"p\">:</span> <span class=\"n\">Template</span> <span class=\"n\">search</span> <span class=\"n\">paths</span>\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">at_encoding</span><span class=\"p\">:</span> <span class=\"n\">Template</span> <span class=\"n\">encoding</span>\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">at_engine</span><span class=\"p\">:</span> <span class=\"n\">Specify</span> <span class=\"n\">the</span> <span class=\"n\">name</span> <span class=\"n\">of</span> <span class=\"n\">template</span> <span class=\"n\">engine</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">explicitly</span> <span class=\"ow\">or</span>\n        <span class=\"kc\">None</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">it</span> <span class=\"n\">automatically</span> <span class=\"n\">anyhow</span><span class=\"o\">.</span>\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">at_cls_args</span><span class=\"p\">:</span> <span class=\"n\">Arguments</span> <span class=\"n\">passed</span> <span class=\"n\">to</span> <span class=\"n\">instantiate</span> <span class=\"n\">template</span> <span class=\"n\">engine</span> <span class=\"k\">class</span>\n    <span class=\"err\">:</span><span class=\"nc\">param</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Keyword</span> <span class=\"n\">arguments</span> <span class=\"n\">passed</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">template</span> <span class=\"n\">engine</span> <span class=\"n\">to</span>\n        <span class=\"n\">render</span> <span class=\"n\">templates</span> <span class=\"k\">with</span> <span class=\"n\">specific</span> <span class=\"n\">features</span> <span class=\"n\">enabled</span><span class=\"o\">.</span>\n\n    <span class=\"p\">:</span><span class=\"k\">return</span><span class=\"p\">:</span> <span class=\"n\">Rendered</span> <span class=\"n\">string</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">21</span><span class=\"p\">]:</span>\n</pre>\n<p>Call \u2018anytemplate.render\u2019 to render given template file like this:</p>\n<pre><span class=\"n\">result1</span> <span class=\"o\">=</span> <span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/a_template.tmpl\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"s1\">'bbb'</span><span class=\"p\">},</span>\n                             <span class=\"n\">at_engine</span><span class=\"o\">=</span><span class=\"s2\">\"mako\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">result2</span> <span class=\"o\">=</span> <span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s2\">\"another_template.t\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'y'</span><span class=\"p\">:</span> <span class=\"s1\">'ccc'</span><span class=\"p\">},</span>\n                             <span class=\"n\">at_engine</span><span class=\"o\">=</span><span class=\"s2\">\"tenjin\"</span><span class=\"p\">,</span>\n                             <span class=\"n\">at_paths</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'/path/to/templates/'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">])</span>\n</pre>\n<p>The parameters are similar to the previous example except for the first one.</p>\n<p>The first parameter is not a template string but a path of template file, may\nbe relative or absolute path, or basename with template search paths\n(at_paths=[PATH_0, PATH_1, \u2026]) given.</p>\n<p>Some module wraps actual template engines in anytemplate supports automatic\ndetection of the engine by file extensions of template files. For example,\nJinja2 template files of which expected file extensions are \u2018.j2\u2019 or \u2018.jinja2\u2019\ntypically. So I made that such files are automatically detected as jinja2\ntemplate file and you don\u2019t need to specify the engine by \u2018at_engine\u2019 parameter\nlike this:</p>\n<pre><span class=\"c1\"># 'jinaj2' template engine is automatically choosen because the extension</span>\n<span class=\"c1\"># of template file is '.j2'.</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/a_template.j2\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"s1\">'bbb'</span><span class=\"p\">})</span>\n</pre>\n<p>For details such as option parameters list of \u2018anytemplate.render\u2019,\nsee its help:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">21</span><span class=\"p\">]:</span> <span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">)</span>\n<span class=\"n\">Help</span> <span class=\"n\">on</span> <span class=\"n\">function</span> <span class=\"n\">render</span> <span class=\"ow\">in</span> <span class=\"n\">module</span> <span class=\"n\">anytemplate</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"p\">:</span>\n\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">at_paths</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">at_encoding</span><span class=\"o\">=</span><span class=\"s1\">'UTF-8'</span><span class=\"p\">,</span> <span class=\"n\">at_engine</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">at_ask_missing</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">at_cls_args</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">Compile</span> <span class=\"ow\">and</span> <span class=\"n\">render</span> <span class=\"n\">given</span> <span class=\"n\">template</span> <span class=\"n\">file</span> <span class=\"ow\">and</span> <span class=\"k\">return</span> <span class=\"n\">the</span> <span class=\"n\">result</span> <span class=\"n\">string</span><span class=\"o\">.</span>\n\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">template</span><span class=\"p\">:</span> <span class=\"n\">Template</span> <span class=\"n\">file</span> <span class=\"n\">path</span>\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">A</span> <span class=\"nb\">dict</span> <span class=\"ow\">or</span> <span class=\"nb\">dict</span><span class=\"o\">-</span><span class=\"n\">like</span> <span class=\"nb\">object</span> <span class=\"n\">to</span> <span class=\"n\">instantiate</span> <span class=\"n\">given</span>\n        <span class=\"n\">template</span> <span class=\"n\">file</span>\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">at_paths</span><span class=\"p\">:</span> <span class=\"n\">Template</span> <span class=\"n\">search</span> <span class=\"n\">paths</span>\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">at_encoding</span><span class=\"p\">:</span> <span class=\"n\">Template</span> <span class=\"n\">encoding</span>\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">at_engine</span><span class=\"p\">:</span> <span class=\"n\">Specify</span> <span class=\"n\">the</span> <span class=\"n\">name</span> <span class=\"n\">of</span> <span class=\"n\">template</span> <span class=\"n\">engine</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">explicitly</span> <span class=\"ow\">or</span>\n        <span class=\"kc\">None</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">it</span> <span class=\"n\">automatically</span> <span class=\"n\">anyhow</span><span class=\"o\">.</span>\n    <span class=\"p\">:</span><span class=\"n\">param</span> <span class=\"n\">at_cls_args</span><span class=\"p\">:</span> <span class=\"n\">Arguments</span> <span class=\"n\">passed</span> <span class=\"n\">to</span> <span class=\"n\">instantiate</span> <span class=\"n\">template</span> <span class=\"n\">engine</span> <span class=\"k\">class</span>\n    <span class=\"err\">:</span><span class=\"nc\">param</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Keyword</span> <span class=\"n\">arguments</span> <span class=\"n\">passed</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">template</span> <span class=\"n\">engine</span> <span class=\"n\">to</span>\n        <span class=\"n\">render</span> <span class=\"n\">templates</span> <span class=\"k\">with</span> <span class=\"n\">specific</span> <span class=\"n\">features</span> <span class=\"n\">enabled</span><span class=\"o\">.</span>\n\n    <span class=\"p\">:</span><span class=\"k\">return</span><span class=\"p\">:</span> <span class=\"n\">Rendered</span> <span class=\"n\">string</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">22</span><span class=\"p\">]:</span>\n</pre>\n</div>\n<div id=\"cli-usage\">\n<h2>CLI Usage</h2>\n<div id=\"cli-help\">\n<h3>CLI help</h3>\n<pre><span class=\"gp\">ssato@localhost%</span> <span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span>. python anytemplate/cli.py -h\n<span class=\"go\">Usage: anytemplate/cli.py [OPTION ...] TEMPLATE_FILE\n\nOptions:\n  -h, --help            show this help message and exit\n  -T TEMPLATE_PATHS, --template-path=TEMPLATE_PATHS\n                        Template search path can be specified multiple times.\n                        Note: Dir in which given template exists is always\n                        included in the search paths (at the end of the path\n                        list) regardless of this option.\n  -C CONTEXTS, --context=CONTEXTS\n                        Specify file path and optionally its filetype, to\n                        provides context data to instantiate templates.  The\n                        option argument's format is\n                        [type:]&lt;file_name_or_path_or_glob_pattern&gt; ex. -C\n                        json:common.json -C ./specific.yaml -C yaml:test.dat,\n                        -C yaml:/etc/foo.d/*.conf\n  -E ENGINE, --engine=ENGINE\n                        Specify template engine name such as 'jinja2'\n  -L, --list-engines    List supported template engines in your environment\n  -o OUTPUT, --output=OUTPUT\n                        Output filename [stdout]\n  -v, --verbose         Verbose mode\n  -q, --quiet           Quiet mode\n</span><span class=\"gp\">ssato@localhost%</span> cat examples/ctx.yml\n<span class=\"go\">xs:\n  - name: Alice\n  - name: Bob\n  - name: John\n\n</span><span class=\"gp\">ssato@localhost%</span> cat examples/jinja2.j2\n<span class=\"go\">{% include \"jinja2-incl.j2\" %}\n</span><span class=\"gp\">ssato@localhost%</span> cat examples/jinja2-incl.j2\n<span class=\"go\">{# jinja2 example: #}\n{% for x in xs if x.name -%}\n{{ x.name }}\n{% endfor %}\n</span><span class=\"gp\">ssato@localhost%</span> <span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span>. python anytemplate/cli.py -E jinja2 <span class=\"se\">\\\n</span>&gt; -C examples/ctx.yml examples/jinja2.j2\n<span class=\"go\">\nAlice\nBob\nJohn\n\n</span><span class=\"gp\">ssato@localhost%</span>\n</pre>\n</div>\n<div id=\"cli-features\">\n<h3>CLI Features</h3>\n<div id=\"multiple-context-files-support-to-define-template-parameters\">\n<h4>Multiple context files support to define template parameters</h4>\n<p>The CLI tool (anytemplate_cli) supports to load multiple context files in YAML\nor JSON or others to give template parameters with -C|\u2013context option.</p>\n<p>Loading and composing of context files are handled by my another python library\ncalled anyconfig (python-anyconfig) if installed and available on your system.</p>\n<ul>\n<li>anyconfig on PyPI: <a href=\"http://pypi.python.org/pypi/anyconfig/\" rel=\"nofollow\">http://pypi.python.org/pypi/anyconfig/</a></li>\n<li>python-anyconfig on github: <a href=\"https://github.com/ssato/python-anyconfig\" rel=\"nofollow\">https://github.com/ssato/python-anyconfig</a></li>\n</ul>\n<p>If anyconfig is not found on your system, only JSON context files are supported\nformat of context files, by help of python standard json or simplejson library.</p>\n</div>\n<div id=\"template-search-paths\">\n<h4>Template search paths</h4>\n<p>Template search paths are specified with -T|\u2013template-path option of the CLI\ntool (anytemplate_cli).  This is useful when using \u2018include\u2019 directive in\ntemplates; ex. -T .:templates/.</p>\n<p>NOTE: The default search path will be [\u2018.\u2019,\ndir_in_which_given_template_file_is] where templatedir is the directory in\nwhich the given template file exists if -T option is not given.  And even if -T\noption is used, templatedir will be appended to that search paths at the end.</p>\n</div>\n</div>\n</div>\n<div id=\"build-install\">\n<h2>Build &amp; Install</h2>\n<p>If you\u2019re Fedora or Red Hat Enterprise Linux user, you can build and install\n[s]rpm by yourself:</p>\n<pre><span class=\"gp\">$</span> python setup.py srpm <span class=\"o\">&amp;&amp;</span> mock dist/python-anytemplate-&lt;ver_dist&gt;.src.rpm\n</pre>\n<p>or:</p>\n<pre><span class=\"gp\">$</span> python setup.py rpm\n</pre>\n<p>or you can install pre-built RPMs from one of my copr repos, <a href=\"https://copr.fedorainfracloud.org/coprs/ssato/python-anyconfig/\" rel=\"nofollow\">https://copr.fedorainfracloud.org/coprs/ssato/python-anyconfig/</a></p>\n<pre><span class=\"gp\">#</span> Fedora\n<span class=\"gp\">$</span> sudo dnf copr <span class=\"nb\">enable</span> ssato/python-anyconfig\n<span class=\"gp\">$</span> sudo dnf install -y python-anytemplate   <span class=\"c1\"># or python3-anytemplate (python3 version)</span>\n</pre>\n<pre><span class=\"gp\">#</span> RHEL, CentOS\n<span class=\"gp\">$</span> <span class=\"o\">(</span><span class=\"nb\">cd</span> /etc/yum.repos.d<span class=\"p\">;</span> sudo curl -O https://copr.fedorainfracloud.org/coprs/ssato/python-anyconfig/repo/epel-7/ssato-python-anyconfig-epel-7.repo<span class=\"o\">)</span>\n<span class=\"gp\">$</span> sudo dnf install -y python-anytemplate   <span class=\"c1\"># or python3-anytemplate (python3 version)</span>\n</pre>\n<p>Otherwise, try usual ways to build and/or install python modules such like \u2018pip\ninstall git+https://github.com/ssato/python-anytemplate\u2019 and \u2018python setup.py\nbdist\u2019, etc.</p>\n</div>\n<div id=\"hacking\">\n<h2>Hacking</h2>\n<h2 id=\"how-to-test\"><span class=\"section-subtitle\">How to test</span></h2>\n<p>I choose tox for manual tests and CI. Try to run \u2018tox [-e py27]\u2019 for example.</p>\n</div>\n<div id=\"todo-issues\">\n<h2>TODO &amp; Issues</h2>\n<ul>\n<li>Add descriptions (doctext) of template engine and library specific options: WIP</li>\n<li>Add descriptions (doctext) how anytemplate wraps each template engine and library: WIP</li>\n<li>Complete unit tests:<ul>\n<li>Add test cases of each template engine specific options: WIP</li>\n</ul>\n</li>\n<li>Stablize public and private (internal) APIs:<ul>\n<li>Private APIs still needs a lot of work especially. It\u2019s very vague how it should be as each template engine have its own concept and design and I\u2019m not sure how to abstract them yet.</li>\n<li>I don\u2019t think public APIs have large issues but these be affected by changes of private APIs more or less; I\u2019m thinking to deprecate the keyword parameter \u2018at_cls_args\u2019 for example.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"misc\">\n<h2>Misc</h2>\n<h2 id=\"alternatives\"><span class=\"section-subtitle\">Alternatives</span></h2>\n<p>There are a few libraries works like this:</p>\n<ul>\n<li>TemplateAlchemy: <a href=\"https://pypi.python.org/pypi/TemplateAlchemy/\" rel=\"nofollow\">https://pypi.python.org/pypi/TemplateAlchemy/</a></li>\n<li>collective.templateengines: <a href=\"https://pypi.python.org/pypi/collective.templateengines\" rel=\"nofollow\">https://pypi.python.org/pypi/collective.templateengines</a></li>\n</ul>\n<p>These look more feature-rich and comprehensive, but I prefer a lot more\nlightweight and thin wrapper library along with CLI tool (template renderer) so\nthat I made anytemplate.</p>\n<p>And:</p>\n<ul>\n<li>python-jinja2-cli: <a href=\"https://github.com/ssato/python-jinja2-cli\" rel=\"nofollow\">https://github.com/ssato/python-jinja2-cli</a></li>\n</ul>\n<p>Anytemplate is a successor of python-jinja2-cli.</p>\n</div>\n\n          </div>"}, "last_serial": 7184853, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "337a0ceea95c92f658d613cbb06f952a", "sha256": "524078dd39262ea5ef6137e39c2dac492a962cc6619dc97bf56a1c52e86153da"}, "downloads": -1, "filename": "anytemplate-0.0.1.tar.gz", "has_sig": false, "md5_digest": "337a0ceea95c92f658d613cbb06f952a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29185, "upload_time": "2015-05-10T04:47:22", "upload_time_iso_8601": "2015-05-10T04:47:22.170574Z", "url": "https://files.pythonhosted.org/packages/5c/8e/da390d90f7d50d568399859868b1ceaf99dcbe87d64e9a42bc26a4746893/anytemplate-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "633da1ba19358e58626e34ab11091fd8", "sha256": "885ebab5e0e70db11fbd9ca7fc9156f874518a69abc39681b8c71790fe3c2148"}, "downloads": -1, "filename": "anytemplate-0.0.2.tar.gz", "has_sig": false, "md5_digest": "633da1ba19358e58626e34ab11091fd8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29260, "upload_time": "2015-05-10T06:15:26", "upload_time_iso_8601": "2015-05-10T06:15:26.036482Z", "url": "https://files.pythonhosted.org/packages/71/9d/2a84de3dca25f6599668827ca45267dbba6cff88553436c221ec3e025dda/anytemplate-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "378192b75537673de12ac27639c6fd25", "sha256": "7be1db05d1b0c6ed89f410ac7306d13f5a59295762a16e4a32c55a71cd640b6b"}, "downloads": -1, "filename": "anytemplate-0.0.3.tar.gz", "has_sig": false, "md5_digest": "378192b75537673de12ac27639c6fd25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31490, "upload_time": "2015-05-11T15:54:15", "upload_time_iso_8601": "2015-05-11T15:54:15.578654Z", "url": "https://files.pythonhosted.org/packages/d0/05/fd940d791daa5e8f9381d7df4db2352a699e22c214a483a8cbf72dc1bd56/anytemplate-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "1c4e06188f6c49d7bc556a69553db657", "sha256": "1dd94d9dffd6adf7e097dcf14c9261af130e4b5505d6525ac6d74bbf8e7fd1dc"}, "downloads": -1, "filename": "anytemplate-0.0.4.tar.gz", "has_sig": false, "md5_digest": "1c4e06188f6c49d7bc556a69553db657", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32155, "upload_time": "2015-06-03T05:08:38", "upload_time_iso_8601": "2015-06-03T05:08:38.661540Z", "url": "https://files.pythonhosted.org/packages/52/19/b550cc832eb6b4a1b66f1e6054481079b4547070bb45a01f3d6138193094/anytemplate-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "9c630afb1f1b59fd52ae04d3ff31a030", "sha256": "bc412b0921ed992edde51ac3f737683156568b67d3ecf5734f3c392ceda0ca7f"}, "downloads": -1, "filename": "anytemplate-0.0.5.tar.gz", "has_sig": false, "md5_digest": "9c630afb1f1b59fd52ae04d3ff31a030", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32680, "upload_time": "2015-06-15T17:46:44", "upload_time_iso_8601": "2015-06-15T17:46:44.215448Z", "url": "https://files.pythonhosted.org/packages/f8/69/d29bfe0e916b8d926504fb674bd574e66e982deeacc0adeed4556685c6ec/anytemplate-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "4dc049174952047e9575ab7f63c6abb4", "sha256": "d457f7fa277af6d6800cfe3f14b177d976cb92a7b01bec9bae1f4614dc513c6e"}, "downloads": -1, "filename": "anytemplate-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4dc049174952047e9575ab7f63c6abb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34111, "upload_time": "2016-11-09T13:35:52", "upload_time_iso_8601": "2016-11-09T13:35:52.214690Z", "url": "https://files.pythonhosted.org/packages/5a/78/3d0b49995f9b7c53be69482d72590e11c58dd3e7ec892c5cb8060281a61e/anytemplate-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e13fefb0b66c51ec54490a78f493805e", "sha256": "aeaea6b0285c9df7bc3693e221d76d33eedade36f9eb6931e355f04e3e55206d"}, "downloads": -1, "filename": "anytemplate-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e13fefb0b66c51ec54490a78f493805e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31466, "upload_time": "2017-04-25T07:18:10", "upload_time_iso_8601": "2017-04-25T07:18:10.359731Z", "url": "https://files.pythonhosted.org/packages/07/30/ea8f7fbd756067bab4f0118bf4b05d5fe4ef12c549b43555a51a79e0f054/anytemplate-0.1.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "36a3f3cdc0692f9fee904432e10a9689", "sha256": "94d19b73fcb05f7dec4ed788bb9bf69eff1611a0e94a44f2f638c8cdc9878b1c"}, "downloads": -1, "filename": "anytemplate-0.1.3.tar.gz", "has_sig": false, "md5_digest": "36a3f3cdc0692f9fee904432e10a9689", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32002, "upload_time": "2017-11-18T01:45:17", "upload_time_iso_8601": "2017-11-18T01:45:17.425763Z", "url": "https://files.pythonhosted.org/packages/e7/01/c9da270632932e1d3c505c58a6ba6e840c42e8f5ab0bd8dab5f2b0c1bf0f/anytemplate-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "7f2c3d2f6de79cb1d061fdef98ab247c", "sha256": "1a5acb18b63909f0098ddd4054860c370e6a8190e11bc5def7bfe80336921d50"}, "downloads": -1, "filename": "anytemplate-0.1.4.tar.gz", "has_sig": false, "md5_digest": "7f2c3d2f6de79cb1d061fdef98ab247c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32032, "upload_time": "2018-04-30T20:10:22", "upload_time_iso_8601": "2018-04-30T20:10:22.219562Z", "url": "https://files.pythonhosted.org/packages/07/0b/f4f11d0ed065b8cc2f4f0c4d6e717a0d7383fcc9062d9a1fe423f0c831e4/anytemplate-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "61b49d5156881a53f1a8a5d01a7a4384", "sha256": "5d18e59ac94c81ee954c470e07d3bf7a3d5d07daab205a2fdcd382ece96250d6"}, "downloads": -1, "filename": "anytemplate-0.1.5.tar.gz", "has_sig": false, "md5_digest": "61b49d5156881a53f1a8a5d01a7a4384", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30350, "upload_time": "2018-08-06T22:57:57", "upload_time_iso_8601": "2018-08-06T22:57:57.254846Z", "url": "https://files.pythonhosted.org/packages/51/22/ab7fc9198c2942e02278a5ac4a375fb934497b5ee7866fc9cebc890e3856/anytemplate-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "3f2ec98e3dd3effa71a40aba3add8ff5", "sha256": "00fc00e6532784294588a7fd6210fd4fd04b20a99dc2f91e868f80e8f901350d"}, "downloads": -1, "filename": "anytemplate-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f2ec98e3dd3effa71a40aba3add8ff5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29740, "upload_time": "2020-05-07T02:39:20", "upload_time_iso_8601": "2020-05-07T02:39:20.569305Z", "url": "https://files.pythonhosted.org/packages/c2/e5/4208649b31cdb38a24e4bc665071b57cda65352ebb7763911a57d98f7f88/anytemplate-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1e936d98f4491549efef30a8480828b", "sha256": "38e33e185423e69a0443ebc2ca577e3dd36ea77ea518f162fc52bde5f4b31ee5"}, "downloads": -1, "filename": "anytemplate-0.1.6.tar.gz", "has_sig": false, "md5_digest": "a1e936d98f4491549efef30a8480828b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36143, "upload_time": "2020-05-07T02:39:23", "upload_time_iso_8601": "2020-05-07T02:39:23.889804Z", "url": "https://files.pythonhosted.org/packages/4c/e2/c1569851f61d5368e8c413261c04072887e55f06fe9b3e61111d08b4f2cb/anytemplate-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f2ec98e3dd3effa71a40aba3add8ff5", "sha256": "00fc00e6532784294588a7fd6210fd4fd04b20a99dc2f91e868f80e8f901350d"}, "downloads": -1, "filename": "anytemplate-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f2ec98e3dd3effa71a40aba3add8ff5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29740, "upload_time": "2020-05-07T02:39:20", "upload_time_iso_8601": "2020-05-07T02:39:20.569305Z", "url": "https://files.pythonhosted.org/packages/c2/e5/4208649b31cdb38a24e4bc665071b57cda65352ebb7763911a57d98f7f88/anytemplate-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1e936d98f4491549efef30a8480828b", "sha256": "38e33e185423e69a0443ebc2ca577e3dd36ea77ea518f162fc52bde5f4b31ee5"}, "downloads": -1, "filename": "anytemplate-0.1.6.tar.gz", "has_sig": false, "md5_digest": "a1e936d98f4491549efef30a8480828b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36143, "upload_time": "2020-05-07T02:39:23", "upload_time_iso_8601": "2020-05-07T02:39:23.889804Z", "url": "https://files.pythonhosted.org/packages/4c/e2/c1569851f61d5368e8c413261c04072887e55f06fe9b3e61111d08b4f2cb/anytemplate-0.1.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:55 2020"}