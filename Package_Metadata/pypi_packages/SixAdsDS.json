{"info": {"author": "Eligijus Bujokas", "author_email": "eligijus@sixads.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# sixadsml\n\nPackage that is used by the SixAds data science department. To know more about sixads,\nvisit https://sixads.net/.\n\nThe github link for this package is https://bitbucket.org/eligijus112/sixadsml/src/master/\n\nInstallation\n\nIn anaconda prompt type (windows users):\n\n```console\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython get-pip.py\npip install SixAdsDS\n```\n\n# sixadsml.clean_text\n\nFunctions for text preprocesing/summarizing.\nA common way to use these functions is to combine them into a pipeline which the input is a list containing strings.\n\n## lemmatize_word\n```python\nlemmatize_word(string_list, engine=<WordNetLemmatizer>)\n```\n\nLemmatize words using one of the WordNet engines\n\nParameters\n----------\n\n**string_list** : list\n    List which stores strings\n\n**engine** : WordNetLemmatizer() (default)\n    An object from the nltk.stem.wodnet library\n\nReturns\n-------\n\n    List with the same length as *string_list* where each word in each\n    string is lemmatized\n\n\n## to_str\n```python\nto_str(string_list)\n```\n\nConverts every list element to str type\n\nParameters\n----------\n\n**string_list** : list\n    List which stores strings\n\nReturns\n-------\n\n    List with the same length as *string_list* where every list element\n    is converted to a str type object\n\n\n## rm_short_words\n```python\nrm_short_words(string_list, lower_bound=1, upper_bound=2)\n```\n\nRemoves characters that are in the range of *lower_bound* and *upper_bound*\n\nParameters\n----------\n\n**string_list** : list\n    List which stores strings\n\n**lower_bound**: int\n    Integer indicating the lower bound of a character length\n\n**upper_bound**: int\n    Integer indicating the upper bound of a character length\n\nReturns\n-------\n\n    List with the same length as *string_list* where every character that is\n    split by whitespace is removed if it has a length in the range\n    [lower_bound, upper_bound]\n\nExamples\n--------\n>>> string_list = ['python is awesome', 'R is good as well']\n\n>>> rm_short_words(string_list)\n\n>>> rm_short_words(string_list, 4, 5)\n\n## to_single\n```python\nto_single(string_list)\n```\n\nConverts every word in string_list to it's singular form.\n\nParameters\n----------\n\n**string_list**: list\n    List which stores strings\n\nReturns\n-------\n\n    List with the same length as *string_list* where every word is converted\n    to singular form\n\n## to_lower\n```python\nto_lower(string_list)\n```\n\nMakes every word in the string_list lowercase\n\nParameters\n----------\n\n**string_list** : list\n    List which stores strings\n\nReturns\n-------\n\n    List with the same length as *string_list* where every word is converted\n    to lowercase\n\n## rm_stop_words\n```python\nrm_stop_words(string_list)\n```\n\nRemoves stop words using the nltk stopwords module.\n\nParameters\n----------\n\n **string_list** : list\n    List which stores strings\n\nReturns\n-------\n\n    List with the same length as *string_list* where every string is without\n    stopwords\n\n## rm_punctuations\n```python\nrm_punctuations(string_list)\n```\n\nRemoves punctuations and other special characters from a string list\n\nParameters\n----------\n\n**string_list** : list\n    List which stores strings\n\nReturns\n-------\n\n    List with the same length as *string_list* where every string is without\n    punctuations and other special characters\n\n## rm_digits\n```python\nrm_digits(string_list)\n```\n\nRemoves digits from a string list\n\nParameters\n----------\n\n**string_list** : list\n    List which stores strings\n\nReturns\n-------\n\n    List with the same length as *string_list* where every string is without\n    digits\n\n## stem_words\n```python\nstem_words(string_list, stemmer=<nltk.stem.snowball.SnowballStemmer object at 0x000001C95E8BCA20>)\n```\n\nA function to stemm the words in a given string vector\n\nParameters\n----------\n\n**string_list** : list\n    List which stores strings\n\n**stemmer** : word stemmer from nltk.stem library;\n     nltk.stem.SnowballStemmer('english') default\n\nReturns\n-------\n\n    List with the same length as *string_list* where every character is stemmed\n\n## clean_ws\n```python\nclean_ws(string_list)\n```\n\nCleans one or more whitespaces\n\nParameters\n----------\n string_list : list\n    List which stores strings\n\nReturns\n-------\n\n    List with the same length as *string_list* where every string has only\n    one or less whitespace\n\n\n## build_vocab\n```python\nbuild_vocab(string_list, verbose=True)\n```\n\nA function that creates a term frequency vocabulary from the text\n\nParameters\n----------\n\n**string_list** : list\n    List which stores strings\n\n**verbose** : boolean; default=True\n     Whether to show the timing of the for loop\n\nReturns\n-------\n\n    dictionary that each key is a unique term in the string_list and\n    the key value is the number of times a certain term appeared in the\n    string\n\nExample\n-------\n>>> string_list = string_list = ['python is awesome', 'R is awesome as well']\n\n>>> build_vocab(string_list)\n\n# sixadsml.images\n\nFunctions to preproces images from the web or a local machine\n\n## img_read_url\n```python\nimg_read_url(url, h=256, w=256, to_grey=False, timeout=2)\n```\n\nReturns an image via an url\n\nParameters\n----------\n\n**url** : string\n    url (in a string format)\n\n**h**: int\n    Desired height of the returned image (px)\n\n**w**: int\n    Desired width of the returned image (px)\n\n**to_grey**: bool\n    should the image be returned in greyscale?\n\n**timeout**: int\n    maximum wait time before dropping the request\n\nReturns\n-------\n\n    A numpy array width dimensions (h, w, 3) or (h, w, 1) if to_grey=True\n\n## img_read_url_PIL\n```python\nimg_read_url_PIL(url, h=256, w=256, timeout=2)\n```\n\nReturns an image via an url (using PIL framework)\n\nParameters\n----------\n\n**url** : string\n    url (in a string format)\n\n**h**: int\n    Desired height of the returned image (px)\n\n**w**: int\n    Desired width of the returned image (px)\n\n**timeout**: int\n    maximum wait time before dropping the request\n\nReturns\n-------\n    PIL.Image.Image\n\n## img_read\n```python\nimg_read(path, h=256, w=256, to_grey=False)\n```\n\nReads an image from the local machine\n\nParameters\n----------\n\n**path** : string\n    path to image on a local machine\n\n**h**: int\n    Desired height of the returned image (px)\n\n**w**: int\n    Desired width of the returned image (px)\n\n**to_grey**: bool\n    Should the image be returned in greyscale?\n\nReturns\n-------\n\n    Numpy array width dimensions (h, w, 3) or (h, w, 1) if to_grey=True\n\n## return_image_hist\n```python\nreturn_image_hist(image, no_bins_per_channel=10, normalize=False)\n```\n\nFunction to get the histogram of the colours in a photo\n\nParameters\n----------\n\n**image** : numpy ndarray\n    A numpy array with the shape (x, y, 3)\n\n**no_bins_per_channel**: int\n    How many bins should a histgoram have for each channel of colors\n\n**normalize** : bool\n    Should the coordinates add up to 1?\n\nReturns\n-------\n\n    A list of size 3 * no_bins_per_channel representing the distribution\n    of colors in the image\n\n\n# sixadsml.utility\n\nUtility functions\n\n## make_connection\n```python\nmake_connection(specs)\n```\n\nCreates a connection based on the information in the *specs*. Ussually,\nthe *specs* dictionary is the output of the *read_yaml* function\n\nParameters\n----------\n\n**specs** : dictionary\n    A dictionary that stores the user, password, host and db keys\n\nReturns\n-------\n\n    An sql_alchemy connection object\n\n## exec_file\n```python\nexec_file(file, add_params=None)\n```\n\nExecutes a file with the .py extension\n\nParameters\n----------\n\n**file**: string\n    path to the python file\n\n**add_params**:\n    additional parameters that are used in the file that is beeing executed\n\nReturns\n-------\n\n    Whatever output the executable file outputs\n\n## read_yaml\n```python\nread_yaml(file)\n```\n\nReads a .yml or .yaml file\n\nParameters\n----------\n\n**path**: string\n\n    path to the .yml or .yaml files\n\nReturns\n-------\n\n    Dictionary with the .yml or .yaml file contents\n\n## chunks_of_n\n```python\nchunks_of_n(l, n)\n```\n\nSplits a list into n equal sizes\n\nParameters\n----------\n\n**l**: list\n\n**n**: int\n\nReturns\n-------\n\n    A list of size *n* with the items of *l* splited equaly\n\n## unique\n```python\nunique(l)\n```\n\nA handy function to return unique elements of a list or a numpy array\n\nParameters\n----------\n\n**l** : list or array\n\nReturns\n-------\n\n    A list or array containing unique elements of l\n\n# sixadsml.sql_utility\n\nFunctions to deal with downloading and writting data to the database\n\n## Get_sql\n```python\nGet_sql(self, /, *args, **kwargs)\n```\n\nClass that deals with downloading data\n\n### get_google_tree\n```python\nGet_sql.get_google_tree(connection)\n```\n\nFunction to download the google taxonomy tree from the sixads database\n\nParameters\n----------\n\n**connection**: sql_alchemy connection object\n\nReturns\n-------\n\n    A pandas dataframe\n\n### get_data\n```python\nGet_sql.get_data(connection, select_part, from_part, where_part='')\n```\n\nFunction that construcs a query from the given parts and executes it\n\nParameters\n----------\n\n**select_part**: list\n    list of strings identifying the desired columns\n\n**from_part**: string\n    the table name\n\n**where_part**: string\n    additional constaints\n\nReturns\n-------\n\n    A pandas dataframe\n\n## Write_sql\n```python\nWrite_sql(self, /, *args, **kwargs)\n```\n\nClass that deals with writting data\n\n### write_to_table\n```python\nWrite_sql.write_to_table(specs, table, data, if_exists='replace')\n```\n\nWrites data to the desired table\n\nParameters\n---------\n\n**specs**: dictionary\n    Must contain the keys user, password, host and db\n\n**table**: string\n    A string refering to the table which we want to write to\n\n**data**: pandas dataframe\n    Data which we want to write to the table\n\n**if_exists**: string\n    What to do if the table already exists. Possible string values:\n    'replace', 'append', 'fail'\n\n\n# sixadsml.embeddings\n\nClass for dealing with word embeddings\n\n## load_from_text\n```python\nload_from_text(path)\n```\n\nReads the word embeddings from a txt documents and saves it as a dictionary\n\nParameters\n----------\n\n**path**: string\n    path to a txt document containing the word embeddings\n\nReturns\n-------\n\n    A dictionary where the key values are individual words and the\n    values are the vectors\n\n## tokenize_text\n```python\ntokenize_text(string_list, max_features, max_len)\n```\n\nCreates a tokenizer from a given text list\n\nParameters\n----------\n\n**string_list**: list\n    List containing strings\n\n**max_features**: int\n    The maximum number of unique words that the tokenizer saves in memory\n\n**max_len**: int\n    The length of the vector into which all elements of *string_list* will\n    be converted to.\n\nReturns\n-------\n\n    A tuple of the tokenized text and the fitted tokenizer for future use.\n    The first element of the tuple is an array of shape (len(*string_list*), max_len)\n\n## create_embedding_matrix\n```python\ncreate_embedding_matrix(embeddings, tokenizer, max_features, embed_size=300)\n```\n\nFunction to create the embedding matrix to use in neural networks. This goes\ndirectly to the embedding layer.\n\nParameters\n----------\n\n**embeddings**: dictionary\n    output of load_from_text() function\n\n**tokenizer**: keras.Tokenizer object\n    output of tokenize_text() function\n\n**max_features**: int\n    how many unique tokens to use\n\n**embed_size**: int\n    how many coordinates does the embedding have; default=300\n\nReturns\n-------\n\n    A numpy.ndarray of shape (max_features, embed_size)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/eligijus112/sixadsml/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "SixAdsDS", "package_url": "https://pypi.org/project/SixAdsDS/", "platform": "", "project_url": "https://pypi.org/project/SixAdsDS/", "project_urls": {"Homepage": "https://bitbucket.org/eligijus112/sixadsml/"}, "release_url": "https://pypi.org/project/SixAdsDS/0.1.6/", "requires_dist": ["inflection", "nltk", "pandas", "sqlalchemy", "PyYAML", "keras", "tensorflow", "sklearn", "tqdm", "pymysql", "opencv-python", "Pillow", "requests"], "requires_python": "", "summary": "Generic functions for SixAds data science projects", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sixadsml</h1>\n<p>Package that is used by the SixAds data science department. To know more about sixads,\nvisit <a href=\"https://sixads.net/\" rel=\"nofollow\">https://sixads.net/</a>.</p>\n<p>The github link for this package is <a href=\"https://bitbucket.org/eligijus112/sixadsml/src/master/\" rel=\"nofollow\">https://bitbucket.org/eligijus112/sixadsml/src/master/</a></p>\n<p>Installation</p>\n<p>In anaconda prompt type (windows users):</p>\n<pre><span class=\"go\">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span>\n<span class=\"go\">python get-pip.py</span>\n<span class=\"go\">pip install SixAdsDS</span>\n</pre>\n<h1>sixadsml.clean_text</h1>\n<p>Functions for text preprocesing/summarizing.\nA common way to use these functions is to combine them into a pipeline which the input is a list containing strings.</p>\n<h2>lemmatize_word</h2>\n<pre><span class=\"n\">lemmatize_word</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">=&lt;</span><span class=\"n\">WordNetLemmatizer</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n<p>Lemmatize words using one of the WordNet engines</p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong> : list\nList which stores strings</p>\n<p><strong>engine</strong> : WordNetLemmatizer() (default)\nAn object from the nltk.stem.wodnet library</p>\n<h2>Returns</h2>\n<pre><code>List with the same length as *string_list* where each word in each\nstring is lemmatized\n</code></pre>\n<h2>to_str</h2>\n<pre><span class=\"n\">to_str</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">)</span>\n</pre>\n<p>Converts every list element to str type</p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong> : list\nList which stores strings</p>\n<h2>Returns</h2>\n<pre><code>List with the same length as *string_list* where every list element\nis converted to a str type object\n</code></pre>\n<h2>rm_short_words</h2>\n<pre><span class=\"n\">rm_short_words</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">,</span> <span class=\"n\">lower_bound</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">upper_bound</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Removes characters that are in the range of <em>lower_bound</em> and <em>upper_bound</em></p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong> : list\nList which stores strings</p>\n<p><strong>lower_bound</strong>: int\nInteger indicating the lower bound of a character length</p>\n<p><strong>upper_bound</strong>: int\nInteger indicating the upper bound of a character length</p>\n<h2>Returns</h2>\n<pre><code>List with the same length as *string_list* where every character that is\nsplit by whitespace is removed if it has a length in the range\n[lower_bound, upper_bound]\n</code></pre>\n<h2>Examples</h2>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>string_list = ['python is awesome', 'R is good as well']</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>rm_short_words(string_list)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>rm_short_words(string_list, 4, 5)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2>to_single</h2>\n<pre><span class=\"n\">to_single</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">)</span>\n</pre>\n<p>Converts every word in string_list to it's singular form.</p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong>: list\nList which stores strings</p>\n<h2>Returns</h2>\n<pre><code>List with the same length as *string_list* where every word is converted\nto singular form\n</code></pre>\n<h2>to_lower</h2>\n<pre><span class=\"n\">to_lower</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">)</span>\n</pre>\n<p>Makes every word in the string_list lowercase</p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong> : list\nList which stores strings</p>\n<h2>Returns</h2>\n<pre><code>List with the same length as *string_list* where every word is converted\nto lowercase\n</code></pre>\n<h2>rm_stop_words</h2>\n<pre><span class=\"n\">rm_stop_words</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">)</span>\n</pre>\n<p>Removes stop words using the nltk stopwords module.</p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong> : list\nList which stores strings</p>\n<h2>Returns</h2>\n<pre><code>List with the same length as *string_list* where every string is without\nstopwords\n</code></pre>\n<h2>rm_punctuations</h2>\n<pre><span class=\"n\">rm_punctuations</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">)</span>\n</pre>\n<p>Removes punctuations and other special characters from a string list</p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong> : list\nList which stores strings</p>\n<h2>Returns</h2>\n<pre><code>List with the same length as *string_list* where every string is without\npunctuations and other special characters\n</code></pre>\n<h2>rm_digits</h2>\n<pre><span class=\"n\">rm_digits</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">)</span>\n</pre>\n<p>Removes digits from a string list</p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong> : list\nList which stores strings</p>\n<h2>Returns</h2>\n<pre><code>List with the same length as *string_list* where every string is without\ndigits\n</code></pre>\n<h2>stem_words</h2>\n<pre><span class=\"n\">stem_words</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">,</span> <span class=\"n\">stemmer</span><span class=\"o\">=&lt;</span><span class=\"n\">nltk</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"o\">.</span><span class=\"n\">snowball</span><span class=\"o\">.</span><span class=\"n\">SnowballStemmer</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x000001C95E8BCA20</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n<p>A function to stemm the words in a given string vector</p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong> : list\nList which stores strings</p>\n<p><strong>stemmer</strong> : word stemmer from nltk.stem library;\nnltk.stem.SnowballStemmer('english') default</p>\n<h2>Returns</h2>\n<pre><code>List with the same length as *string_list* where every character is stemmed\n</code></pre>\n<h2>clean_ws</h2>\n<pre><span class=\"n\">clean_ws</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">)</span>\n</pre>\n<p>Cleans one or more whitespaces</p>\n<h2>Parameters</h2>\n<p>string_list : list\nList which stores strings</p>\n<h2>Returns</h2>\n<pre><code>List with the same length as *string_list* where every string has only\none or less whitespace\n</code></pre>\n<h2>build_vocab</h2>\n<pre><span class=\"n\">build_vocab</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>A function that creates a term frequency vocabulary from the text</p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong> : list\nList which stores strings</p>\n<p><strong>verbose</strong> : boolean; default=True\nWhether to show the timing of the for loop</p>\n<h2>Returns</h2>\n<pre><code>dictionary that each key is a unique term in the string_list and\nthe key value is the number of times a certain term appeared in the\nstring\n</code></pre>\n<h2>Example</h2>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>string_list = string_list = ['python is awesome', 'R is awesome as well']</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>build_vocab(string_list)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h1>sixadsml.images</h1>\n<p>Functions to preproces images from the web or a local machine</p>\n<h2>img_read_url</h2>\n<pre><span class=\"n\">img_read_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">to_grey</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Returns an image via an url</p>\n<h2>Parameters</h2>\n<p><strong>url</strong> : string\nurl (in a string format)</p>\n<p><strong>h</strong>: int\nDesired height of the returned image (px)</p>\n<p><strong>w</strong>: int\nDesired width of the returned image (px)</p>\n<p><strong>to_grey</strong>: bool\nshould the image be returned in greyscale?</p>\n<p><strong>timeout</strong>: int\nmaximum wait time before dropping the request</p>\n<h2>Returns</h2>\n<pre><code>A numpy array width dimensions (h, w, 3) or (h, w, 1) if to_grey=True\n</code></pre>\n<h2>img_read_url_PIL</h2>\n<pre><span class=\"n\">img_read_url_PIL</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Returns an image via an url (using PIL framework)</p>\n<h2>Parameters</h2>\n<p><strong>url</strong> : string\nurl (in a string format)</p>\n<p><strong>h</strong>: int\nDesired height of the returned image (px)</p>\n<p><strong>w</strong>: int\nDesired width of the returned image (px)</p>\n<p><strong>timeout</strong>: int\nmaximum wait time before dropping the request</p>\n<h2>Returns</h2>\n<pre><code>PIL.Image.Image\n</code></pre>\n<h2>img_read</h2>\n<pre><span class=\"n\">img_read</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">to_grey</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Reads an image from the local machine</p>\n<h2>Parameters</h2>\n<p><strong>path</strong> : string\npath to image on a local machine</p>\n<p><strong>h</strong>: int\nDesired height of the returned image (px)</p>\n<p><strong>w</strong>: int\nDesired width of the returned image (px)</p>\n<p><strong>to_grey</strong>: bool\nShould the image be returned in greyscale?</p>\n<h2>Returns</h2>\n<pre><code>Numpy array width dimensions (h, w, 3) or (h, w, 1) if to_grey=True\n</code></pre>\n<h2>return_image_hist</h2>\n<pre><span class=\"n\">return_image_hist</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">no_bins_per_channel</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Function to get the histogram of the colours in a photo</p>\n<h2>Parameters</h2>\n<p><strong>image</strong> : numpy ndarray\nA numpy array with the shape (x, y, 3)</p>\n<p><strong>no_bins_per_channel</strong>: int\nHow many bins should a histgoram have for each channel of colors</p>\n<p><strong>normalize</strong> : bool\nShould the coordinates add up to 1?</p>\n<h2>Returns</h2>\n<pre><code>A list of size 3 * no_bins_per_channel representing the distribution\nof colors in the image\n</code></pre>\n<h1>sixadsml.utility</h1>\n<p>Utility functions</p>\n<h2>make_connection</h2>\n<pre><span class=\"n\">make_connection</span><span class=\"p\">(</span><span class=\"n\">specs</span><span class=\"p\">)</span>\n</pre>\n<p>Creates a connection based on the information in the <em>specs</em>. Ussually,\nthe <em>specs</em> dictionary is the output of the <em>read_yaml</em> function</p>\n<h2>Parameters</h2>\n<p><strong>specs</strong> : dictionary\nA dictionary that stores the user, password, host and db keys</p>\n<h2>Returns</h2>\n<pre><code>An sql_alchemy connection object\n</code></pre>\n<h2>exec_file</h2>\n<pre><span class=\"n\">exec_file</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">add_params</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Executes a file with the .py extension</p>\n<h2>Parameters</h2>\n<p><strong>file</strong>: string\npath to the python file</p>\n<p><strong>add_params</strong>:\nadditional parameters that are used in the file that is beeing executed</p>\n<h2>Returns</h2>\n<pre><code>Whatever output the executable file outputs\n</code></pre>\n<h2>read_yaml</h2>\n<pre><span class=\"n\">read_yaml</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n</pre>\n<p>Reads a .yml or .yaml file</p>\n<h2>Parameters</h2>\n<p><strong>path</strong>: string</p>\n<pre><code>path to the .yml or .yaml files\n</code></pre>\n<h2>Returns</h2>\n<pre><code>Dictionary with the .yml or .yaml file contents\n</code></pre>\n<h2>chunks_of_n</h2>\n<pre><span class=\"n\">chunks_of_n</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n</pre>\n<p>Splits a list into n equal sizes</p>\n<h2>Parameters</h2>\n<p><strong>l</strong>: list</p>\n<p><strong>n</strong>: int</p>\n<h2>Returns</h2>\n<pre><code>A list of size *n* with the items of *l* splited equaly\n</code></pre>\n<h2>unique</h2>\n<pre><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span>\n</pre>\n<p>A handy function to return unique elements of a list or a numpy array</p>\n<h2>Parameters</h2>\n<p><strong>l</strong> : list or array</p>\n<h2>Returns</h2>\n<pre><code>A list or array containing unique elements of l\n</code></pre>\n<h1>sixadsml.sql_utility</h1>\n<p>Functions to deal with downloading and writting data to the database</p>\n<h2>Get_sql</h2>\n<pre><span class=\"n\">Get_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Class that deals with downloading data</p>\n<h3>get_google_tree</h3>\n<pre><span class=\"n\">Get_sql</span><span class=\"o\">.</span><span class=\"n\">get_google_tree</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<p>Function to download the google taxonomy tree from the sixads database</p>\n<h2>Parameters</h2>\n<p><strong>connection</strong>: sql_alchemy connection object</p>\n<h2>Returns</h2>\n<pre><code>A pandas dataframe\n</code></pre>\n<h3>get_data</h3>\n<pre><span class=\"n\">Get_sql</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">select_part</span><span class=\"p\">,</span> <span class=\"n\">from_part</span><span class=\"p\">,</span> <span class=\"n\">where_part</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n</pre>\n<p>Function that construcs a query from the given parts and executes it</p>\n<h2>Parameters</h2>\n<p><strong>select_part</strong>: list\nlist of strings identifying the desired columns</p>\n<p><strong>from_part</strong>: string\nthe table name</p>\n<p><strong>where_part</strong>: string\nadditional constaints</p>\n<h2>Returns</h2>\n<pre><code>A pandas dataframe\n</code></pre>\n<h2>Write_sql</h2>\n<pre><span class=\"n\">Write_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Class that deals with writting data</p>\n<h3>write_to_table</h3>\n<pre><span class=\"n\">Write_sql</span><span class=\"o\">.</span><span class=\"n\">write_to_table</span><span class=\"p\">(</span><span class=\"n\">specs</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">if_exists</span><span class=\"o\">=</span><span class=\"s1\">'replace'</span><span class=\"p\">)</span>\n</pre>\n<p>Writes data to the desired table</p>\n<h2>Parameters</h2>\n<p><strong>specs</strong>: dictionary\nMust contain the keys user, password, host and db</p>\n<p><strong>table</strong>: string\nA string refering to the table which we want to write to</p>\n<p><strong>data</strong>: pandas dataframe\nData which we want to write to the table</p>\n<p><strong>if_exists</strong>: string\nWhat to do if the table already exists. Possible string values:\n'replace', 'append', 'fail'</p>\n<h1>sixadsml.embeddings</h1>\n<p>Class for dealing with word embeddings</p>\n<h2>load_from_text</h2>\n<pre><span class=\"n\">load_from_text</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<p>Reads the word embeddings from a txt documents and saves it as a dictionary</p>\n<h2>Parameters</h2>\n<p><strong>path</strong>: string\npath to a txt document containing the word embeddings</p>\n<h2>Returns</h2>\n<pre><code>A dictionary where the key values are individual words and the\nvalues are the vectors\n</code></pre>\n<h2>tokenize_text</h2>\n<pre><span class=\"n\">tokenize_text</span><span class=\"p\">(</span><span class=\"n\">string_list</span><span class=\"p\">,</span> <span class=\"n\">max_features</span><span class=\"p\">,</span> <span class=\"n\">max_len</span><span class=\"p\">)</span>\n</pre>\n<p>Creates a tokenizer from a given text list</p>\n<h2>Parameters</h2>\n<p><strong>string_list</strong>: list\nList containing strings</p>\n<p><strong>max_features</strong>: int\nThe maximum number of unique words that the tokenizer saves in memory</p>\n<p><strong>max_len</strong>: int\nThe length of the vector into which all elements of <em>string_list</em> will\nbe converted to.</p>\n<h2>Returns</h2>\n<pre><code>A tuple of the tokenized text and the fitted tokenizer for future use.\nThe first element of the tuple is an array of shape (len(*string_list*), max_len)\n</code></pre>\n<h2>create_embedding_matrix</h2>\n<pre><span class=\"n\">create_embedding_matrix</span><span class=\"p\">(</span><span class=\"n\">embeddings</span><span class=\"p\">,</span> <span class=\"n\">tokenizer</span><span class=\"p\">,</span> <span class=\"n\">max_features</span><span class=\"p\">,</span> <span class=\"n\">embed_size</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n</pre>\n<p>Function to create the embedding matrix to use in neural networks. This goes\ndirectly to the embedding layer.</p>\n<h2>Parameters</h2>\n<p><strong>embeddings</strong>: dictionary\noutput of load_from_text() function</p>\n<p><strong>tokenizer</strong>: keras.Tokenizer object\noutput of tokenize_text() function</p>\n<p><strong>max_features</strong>: int\nhow many unique tokens to use</p>\n<p><strong>embed_size</strong>: int\nhow many coordinates does the embedding have; default=300</p>\n<h2>Returns</h2>\n<pre><code>A numpy.ndarray of shape (max_features, embed_size)\n</code></pre>\n\n          </div>"}, "last_serial": 5103876, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b18259eee37d0757534b140058a0dbf7", "sha256": "543ccb2b8eda33d52a6210ffa51e1dd15ee604c93542183bdcb1a80b53231340"}, "downloads": -1, "filename": "SixAdsDS-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b18259eee37d0757534b140058a0dbf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4941, "upload_time": "2019-01-26T10:13:22", "upload_time_iso_8601": "2019-01-26T10:13:22.760597Z", "url": "https://files.pythonhosted.org/packages/9c/01/d16a3a130a7d341626c00e7bc9fcbf9b405e2cb144028f2bb5f5396a028c/SixAdsDS-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "060a23b0c48a076f4b22ac6309b2680e", "sha256": "434392307231ba648e7e738eccadf1ea1c108353c7e2fd35c791ab6f6495c8e0"}, "downloads": -1, "filename": "SixAdsDS-0.0.1.tar.gz", "has_sig": false, "md5_digest": "060a23b0c48a076f4b22ac6309b2680e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3297, "upload_time": "2019-01-26T10:16:24", "upload_time_iso_8601": "2019-01-26T10:16:24.558702Z", "url": "https://files.pythonhosted.org/packages/58/1a/a3fbcda4f393b1c4705760f36a6796f100e93deca1eda774a569698d0fbf/SixAdsDS-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0741b6d8cd899d48815d89bcef87cde0", "sha256": "481a009ee3d1d448ac41b02a367071c44a0aacb60726c211b12f7665ca1267b4"}, "downloads": -1, "filename": "SixAdsDS-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0741b6d8cd899d48815d89bcef87cde0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6014, "upload_time": "2019-01-26T10:45:15", "upload_time_iso_8601": "2019-01-26T10:45:15.628579Z", "url": "https://files.pythonhosted.org/packages/b2/65/7aa0bf263ec4ac365902f7c0a612c6e12a6c12c96e8ac431169d60cc7445/SixAdsDS-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbe6bf3b92cc181a7c469c89168e7d03", "sha256": "99dce7e924f25f2b4cd020d7e478aab55ab6584db99ef79f7dac3e8440652552"}, "downloads": -1, "filename": "SixAdsDS-0.0.2.tar.gz", "has_sig": false, "md5_digest": "cbe6bf3b92cc181a7c469c89168e7d03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3254, "upload_time": "2019-01-26T10:45:16", "upload_time_iso_8601": "2019-01-26T10:45:16.932022Z", "url": "https://files.pythonhosted.org/packages/53/90/6a0e763a936a015d3c8b4cd7233e99c11e41bf31be0385b243177cee2c96/SixAdsDS-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "752ff0bdf2d3d8e736a2c468908ef887", "sha256": "2c06301a7099b8f0fde542468aba9faca170c6c67da7ee88fd20f9675e377b8e"}, "downloads": -1, "filename": "SixAdsDS-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "752ff0bdf2d3d8e736a2c468908ef887", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5020, "upload_time": "2019-01-26T10:50:23", "upload_time_iso_8601": "2019-01-26T10:50:23.508960Z", "url": "https://files.pythonhosted.org/packages/35/8c/51e619312d2140177485c0e7957e749d6cd56bc62b09af1d46140cb68ab0/SixAdsDS-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cffe2caad7a075135b545e89bfa2fec", "sha256": "89896e744d056bea1404a5d5d335edb4462dd34c3e222b411c838a02ea5d1bb2"}, "downloads": -1, "filename": "SixAdsDS-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5cffe2caad7a075135b545e89bfa2fec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3256, "upload_time": "2019-01-26T10:50:24", "upload_time_iso_8601": "2019-01-26T10:50:24.875071Z", "url": "https://files.pythonhosted.org/packages/3a/15/de240afef32659466cec7f807c96c9b84809e3d792ce26374b75cca4fa06/SixAdsDS-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "fe68d424504b3379ff6f60035463b357", "sha256": "85228f35e2d4cc01058cdb044f3cceab9e9b29ef7c86272becedcfad4844f220"}, "downloads": -1, "filename": "SixAdsDS-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "fe68d424504b3379ff6f60035463b357", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5023, "upload_time": "2019-01-26T11:00:37", "upload_time_iso_8601": "2019-01-26T11:00:37.851346Z", "url": "https://files.pythonhosted.org/packages/74/e7/1e3d6337f7b781beb8b0a5a8551d80d802f796a581ce4e123f4d67a02aab/SixAdsDS-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9829f3067513a989cdd9736ee54af2e", "sha256": "868171afd9f8d4a6c2578e764e41a6e35baad32de2b53763598aa52767c33e33"}, "downloads": -1, "filename": "SixAdsDS-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c9829f3067513a989cdd9736ee54af2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3255, "upload_time": "2019-01-26T11:00:39", "upload_time_iso_8601": "2019-01-26T11:00:39.210710Z", "url": "https://files.pythonhosted.org/packages/24/29/877cc93f76c644ddc5163781460b04abed2de44bbe4dddd2f26a86b9f610/SixAdsDS-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "1f1ca3f44858b73693380282eaf3bbbb", "sha256": "78f518c86de43a0932451e38ededf02ae7ea895924249a197bdd3ad0dfe866dc"}, "downloads": -1, "filename": "SixAdsDS-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1f1ca3f44858b73693380282eaf3bbbb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5244, "upload_time": "2019-01-26T13:31:40", "upload_time_iso_8601": "2019-01-26T13:31:40.577539Z", "url": "https://files.pythonhosted.org/packages/44/ed/b31d4dcc29ed59aabd2afa3177c95e8cfc12d5f420e8f70f86c15c686f33/SixAdsDS-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "613bb4efa47e8439b53ee7d795d93c3f", "sha256": "168f45a61c1bc621f2776f989e3ceca71f0598a7ebb46221178d98697571d9d4"}, "downloads": -1, "filename": "SixAdsDS-0.0.5.tar.gz", "has_sig": false, "md5_digest": "613bb4efa47e8439b53ee7d795d93c3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3490, "upload_time": "2019-01-26T13:31:41", "upload_time_iso_8601": "2019-01-26T13:31:41.566296Z", "url": "https://files.pythonhosted.org/packages/2d/18/ef5fdefcc429ea43a5e3671f51d4d02a8d380be4dce3001edeece6c77326/SixAdsDS-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "a74de7dbc4208a2a8299a17e90b35e61", "sha256": "2777687fe0fd2fc6f9567d835e1f2155072b3a32ec29082a8bbec581ea4adac4"}, "downloads": -1, "filename": "SixAdsDS-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a74de7dbc4208a2a8299a17e90b35e61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4882, "upload_time": "2019-01-26T13:54:40", "upload_time_iso_8601": "2019-01-26T13:54:40.016482Z", "url": "https://files.pythonhosted.org/packages/fe/82/5a68058804f7c17592a5b4041a9ae858644e7baa5d359a8cc7e43887bb20/SixAdsDS-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d92a33e40bf2fbb7c836a3eb23723ea9", "sha256": "b9654abf045a1157770e9e1fa9b79c467ff61b232df88449b5fdaadc3114c84b"}, "downloads": -1, "filename": "SixAdsDS-0.0.6.tar.gz", "has_sig": false, "md5_digest": "d92a33e40bf2fbb7c836a3eb23723ea9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3143, "upload_time": "2019-01-26T13:54:41", "upload_time_iso_8601": "2019-01-26T13:54:41.374500Z", "url": "https://files.pythonhosted.org/packages/a9/c2/9371c245637f7b508347bf6663448ac9cfe42b3d7c2379c2497074ef5eea/SixAdsDS-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "cf66e8babaa8093b4fae530ce49ba0fc", "sha256": "45a58f81f09a010464d28a344a863c36957b434aa9760b7d210e20842ff03784"}, "downloads": -1, "filename": "SixAdsDS-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "cf66e8babaa8093b4fae530ce49ba0fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5916, "upload_time": "2019-01-29T06:58:13", "upload_time_iso_8601": "2019-01-29T06:58:13.139211Z", "url": "https://files.pythonhosted.org/packages/e5/99/368241393f1a6839e6948b366e5e0d56d6b512d1c6f7331656ef9bfdd201/SixAdsDS-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cbed10b974e60c97fd3c5c74591bc20", "sha256": "36692277234ddc146f2380d8191ef17fa1eee4982ff096c5bda3c28517222cac"}, "downloads": -1, "filename": "SixAdsDS-0.0.7.tar.gz", "has_sig": false, "md5_digest": "1cbed10b974e60c97fd3c5c74591bc20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3911, "upload_time": "2019-01-29T06:58:14", "upload_time_iso_8601": "2019-01-29T06:58:14.540592Z", "url": "https://files.pythonhosted.org/packages/72/ba/2f7e9a41057a65cb67f935c439670b1ba1043fa56f8f94789e1eeb345468/SixAdsDS-0.0.7.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "2bda36bed3e80f70c38c534b03a72362", "sha256": "ada2995c8a79af0e5593a7b6f388f1b52347bb79effe76db95e0226290c0d74c"}, "downloads": -1, "filename": "SixAdsDS-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2bda36bed3e80f70c38c534b03a72362", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5942, "upload_time": "2019-01-30T07:07:26", "upload_time_iso_8601": "2019-01-30T07:07:26.868657Z", "url": "https://files.pythonhosted.org/packages/de/f3/3d3d8b6939fe6dfd58fd877a63b96efba141121034f0aba03b15542756d3/SixAdsDS-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46cdb6286b2ea99359bcc2e251cfab7a", "sha256": "0e7a9611e98109c7d096e090c29844014885211b09cd4fa10f543e5a37b05efd"}, "downloads": -1, "filename": "SixAdsDS-0.0.9.tar.gz", "has_sig": false, "md5_digest": "46cdb6286b2ea99359bcc2e251cfab7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3942, "upload_time": "2019-01-30T07:07:28", "upload_time_iso_8601": "2019-01-30T07:07:28.677646Z", "url": "https://files.pythonhosted.org/packages/ef/65/2d5175f6597548843abc428c12db1e4c58e725bec7b56842ce85a29026b1/SixAdsDS-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "f4099e2c0731f312898471ba1d035db6", "sha256": "f02818fed9be22d6e711a6afc2967e61cdc9d81c823d14f3abdfa971cf4ba07d"}, "downloads": -1, "filename": "SixAdsDS-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f4099e2c0731f312898471ba1d035db6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6758, "upload_time": "2019-02-05T15:11:04", "upload_time_iso_8601": "2019-02-05T15:11:04.608045Z", "url": "https://files.pythonhosted.org/packages/64/7d/f340b8e00f020f4b6b4c5630ca0719bc7b8aad3641c1ac66225c4dbe0c1c/SixAdsDS-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce6e42a2f7c184762164ea088f003821", "sha256": "f56087abd86c093f18734fbc5615fc61629657f98e436894ad2fb9cc11395d11"}, "downloads": -1, "filename": "SixAdsDS-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ce6e42a2f7c184762164ea088f003821", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4531, "upload_time": "2019-02-05T15:11:06", "upload_time_iso_8601": "2019-02-05T15:11:06.218952Z", "url": "https://files.pythonhosted.org/packages/e7/21/ee92636ca4f8222c57a87bb92af9795ac2e6a87f571d297d99b2f672c9fa/SixAdsDS-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d5910eabe4b62ebb48364de8599d1f4d", "sha256": "4f5c73a9d14b89ecb0a34f01ad3eccb8f5b22819c820d069d5c4fce4f719e597"}, "downloads": -1, "filename": "SixAdsDS-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d5910eabe4b62ebb48364de8599d1f4d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6912, "upload_time": "2019-02-14T13:51:23", "upload_time_iso_8601": "2019-02-14T13:51:23.773695Z", "url": "https://files.pythonhosted.org/packages/f3/11/3e8dfb04248cabbe5f59fd70abb552ca9d1f31b409984cfe3ea4691bc7fb/SixAdsDS-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fc2d1f8cd81d9b7db4f7af91c3ee871", "sha256": "2dd762bfa55cc5d17a625e5f685155475b161628ce7a78c9f779ae7e5bc61c21"}, "downloads": -1, "filename": "SixAdsDS-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7fc2d1f8cd81d9b7db4f7af91c3ee871", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4693, "upload_time": "2019-02-14T13:51:25", "upload_time_iso_8601": "2019-02-14T13:51:25.552207Z", "url": "https://files.pythonhosted.org/packages/87/7c/7ccaae659b5add86b807e611ee56ce5a25d0fe130e86d5e51fabf11afedd/SixAdsDS-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "14d3e6749b5ec778ff6d88a060b73797", "sha256": "d2aaba4dc97ee46c7cac16d74b80116db3523d865f0a914d838bdf1ce9f09488"}, "downloads": -1, "filename": "SixAdsDS-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "14d3e6749b5ec778ff6d88a060b73797", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6911, "upload_time": "2019-02-14T13:54:55", "upload_time_iso_8601": "2019-02-14T13:54:55.353204Z", "url": "https://files.pythonhosted.org/packages/37/5f/efc4d42715bd8cab08da92fb4ee0c51d4a8451a218fdcd1a7752f81a7a16/SixAdsDS-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4c7ebef4f070085c191b426c18a5d9c", "sha256": "dfae44ab88144bce6f46bd34dffe6d00ba5d9ee4550e6b072124162eaeedfa48"}, "downloads": -1, "filename": "SixAdsDS-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e4c7ebef4f070085c191b426c18a5d9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4684, "upload_time": "2019-02-14T13:54:57", "upload_time_iso_8601": "2019-02-14T13:54:57.185319Z", "url": "https://files.pythonhosted.org/packages/8f/4c/73874ef56b50a633e04a0f0d89f25f04e5a9ee661f7a010394805550a1f3/SixAdsDS-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "48f7e2a6cecd559459dc554dc1c4e3a6", "sha256": "222a9b3ad3a3f411c64b346270974a114e0491d2a01cd5ccfcc2f6c35ece1c53"}, "downloads": -1, "filename": "SixAdsDS-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "48f7e2a6cecd559459dc554dc1c4e3a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6913, "upload_time": "2019-02-19T16:04:06", "upload_time_iso_8601": "2019-02-19T16:04:06.138809Z", "url": "https://files.pythonhosted.org/packages/f7/0c/2bb273da8adffa5fcc770d4a60be99a6b2d5e49e36a8a8410f2ace6ffd59/SixAdsDS-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e0c2e68bd815579c72703d73eecb3d2", "sha256": "ba40638991cc8005d80d789f9f78288e60a6788d29d1d45efd42ab5fb3c965ca"}, "downloads": -1, "filename": "SixAdsDS-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6e0c2e68bd815579c72703d73eecb3d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4688, "upload_time": "2019-02-19T16:04:07", "upload_time_iso_8601": "2019-02-19T16:04:07.846292Z", "url": "https://files.pythonhosted.org/packages/bd/e9/4890886a9350640df20d7f611451e89cf9f5d07c1de4939434af7ff08635/SixAdsDS-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d00154b6a75fb573845386449b2dc4f3", "sha256": "c3391fb5d69a089793d8d3d0df359df49df151533fb2f0e7d86c80cb7d783c7b"}, "downloads": -1, "filename": "SixAdsDS-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d00154b6a75fb573845386449b2dc4f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6852, "upload_time": "2019-03-26T11:51:11", "upload_time_iso_8601": "2019-03-26T11:51:11.287421Z", "url": "https://files.pythonhosted.org/packages/67/a5/9c3cddfa441ab86f0f7c1d373bb0e736330b210f032ee5582c521c228d6c/SixAdsDS-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6797d4191f7709402b0cf0fc5a9a1271", "sha256": "7e0924929a8e7a0ee98869f84cb0c1789c2cf67396dc5059eb51ba2d6d1b7e41"}, "downloads": -1, "filename": "SixAdsDS-0.1.4.tar.gz", "has_sig": false, "md5_digest": "6797d4191f7709402b0cf0fc5a9a1271", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4659, "upload_time": "2019-03-26T11:51:12", "upload_time_iso_8601": "2019-03-26T11:51:12.892301Z", "url": "https://files.pythonhosted.org/packages/7d/5c/ac4f84f9c52f84c2ffeafe460891b8cb66b0f7f5a12c8bf4ab64081cf064/SixAdsDS-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "8532effedc1b209415f5dae4a8e3d315", "sha256": "73dfe9fa868896ac4ed8395557914e616e0745722e90e3cc3ad407c17653b431"}, "downloads": -1, "filename": "SixAdsDS-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8532effedc1b209415f5dae4a8e3d315", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11723, "upload_time": "2019-04-05T13:22:45", "upload_time_iso_8601": "2019-04-05T13:22:45.922630Z", "url": "https://files.pythonhosted.org/packages/34/f5/8a08c530fad755b2684af0499745b128fe597c37c056c84c6317de20f877/SixAdsDS-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a67fabea513454276959047e82fbd2e", "sha256": "54bd6b9bf81ddd434e963afad1fee81ab153ce6a37ef5083c833f6ab0fb62cb5"}, "downloads": -1, "filename": "SixAdsDS-0.1.5.tar.gz", "has_sig": false, "md5_digest": "7a67fabea513454276959047e82fbd2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8775, "upload_time": "2019-04-05T13:22:47", "upload_time_iso_8601": "2019-04-05T13:22:47.579503Z", "url": "https://files.pythonhosted.org/packages/08/1d/c6cc3e8e83c625b54f0da93092028b3d21e4581b158506fbf3697302699a/SixAdsDS-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "a133982bba14a4bd4adc3ab05d4be0f2", "sha256": "bede90ba5bb26d6a754c35d7820eb648dd5891e9d4c51b56916c98eb8ccf25b6"}, "downloads": -1, "filename": "SixAdsDS-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a133982bba14a4bd4adc3ab05d4be0f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12194, "upload_time": "2019-04-05T14:05:44", "upload_time_iso_8601": "2019-04-05T14:05:44.997257Z", "url": "https://files.pythonhosted.org/packages/78/c5/636394c3e4b04ffa9cad475c9b376facf78704403b742ae862863dc330dd/SixAdsDS-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b736eceea971127e3d7d019d946615d", "sha256": "8cc61c6c85b0b281c72feb3fb63444c9a906c699c224bd0c6c1ce5c7bfdb85c6"}, "downloads": -1, "filename": "SixAdsDS-0.1.6.tar.gz", "has_sig": false, "md5_digest": "4b736eceea971127e3d7d019d946615d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10363, "upload_time": "2019-04-05T14:05:46", "upload_time_iso_8601": "2019-04-05T14:05:46.247197Z", "url": "https://files.pythonhosted.org/packages/e0/59/b4ea1ea62adc0817a80ef9d1ea107aaa197ce3e47744fbb3b491d8c4226f/SixAdsDS-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a133982bba14a4bd4adc3ab05d4be0f2", "sha256": "bede90ba5bb26d6a754c35d7820eb648dd5891e9d4c51b56916c98eb8ccf25b6"}, "downloads": -1, "filename": "SixAdsDS-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a133982bba14a4bd4adc3ab05d4be0f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12194, "upload_time": "2019-04-05T14:05:44", "upload_time_iso_8601": "2019-04-05T14:05:44.997257Z", "url": "https://files.pythonhosted.org/packages/78/c5/636394c3e4b04ffa9cad475c9b376facf78704403b742ae862863dc330dd/SixAdsDS-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b736eceea971127e3d7d019d946615d", "sha256": "8cc61c6c85b0b281c72feb3fb63444c9a906c699c224bd0c6c1ce5c7bfdb85c6"}, "downloads": -1, "filename": "SixAdsDS-0.1.6.tar.gz", "has_sig": false, "md5_digest": "4b736eceea971127e3d7d019d946615d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10363, "upload_time": "2019-04-05T14:05:46", "upload_time_iso_8601": "2019-04-05T14:05:46.247197Z", "url": "https://files.pythonhosted.org/packages/e0/59/b4ea1ea62adc0817a80ef9d1ea107aaa197ce3e47744fbb3b491d8c4226f/SixAdsDS-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:16 2020"}