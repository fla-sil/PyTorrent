{"info": {"author": "Adriaan Rol et al", "author_email": "adriaan.rol@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# AutoDepGraph \n\n[![PyPI](https://img.shields.io/pypi/v/adaptive.svg)](https://pypi.python.org/pypi/autodepgraph)\n[![Build Status](https://travis-ci.org/AdriaanRol/AutoDepGraph.svg?branch=master)](https://travis-ci.org/AdriaanRol/AutoDepGraph)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/ae46c58617ff45df9ac98446b3dc34ac)](https://www.codacy.com/app/adriaan-rol/AutoDepGraph?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=AdriaanRol/AutoDepGraph&amp;utm_campaign=Badge_Grade) \n[![Coverage Status](https://coveralls.io/repos/github/AdriaanRol/AutoDepGraph/badge.svg?branch=master)](https://coveralls.io/github/AdriaanRol/AutoDepGraph?branch=master)\n[![DOI](https://zenodo.org/badge/85987885.svg)](https://zenodo.org/badge/latestdoi/85987885)\n\nAutoDepGraph is a framework for using dependency graphs to calibrate a system. It is heavily inspired by [\"Physical qubit calibration on a directed acyclic graph\"](https://arxiv.org/abs/1803.03226). \n\n## Overview\nAutoDepGraph consists of two main classes, the CalibrationNode and the Graph.\nCalibration is done by calling a node that one wants to execute, the node contains the logic required to satisfy the nodes it depends on (parents).\n\nA CalibrationNode contains:\n\n- parameters\n    - state\n        + Good (green): check passes\n        + needs calibration (yellow): calibration is not up to date anymore and needs to be updated\n        + Bad (red): calibration or check has failed\n        + unknown (grayed): checks of the node should be run\n        + active (blue): calibration or check in progress\n    - parents: the nodes it depends on \n    - children: nodes that depend on this node\n    - check_function : name of function to be executed when check is called. This can be a method of another instrument.\n    - calibrate_function : name of function to be executed when calibrate is called. This can be a method of another instrument.\n    - calibration_timeout: time in (s) after which a calibration times out. \n\n- function\n    - execute or call\n        + Performs the logic of a node (check state, satisfy requirements) with the goal of moving to a \"good\" state\n    - check\n        + Performs checks to determine and the state of a node\n    - calibrate\n        + Executes the calibration routines of the node\n\nA Graph is a container of nodes, it is used for: \n- new graphs can be created by instantiating a graph and then using the add_node method to define new nodes. \n- loading and saving the graph\n- real-time visualization using pyqtgraph\n    - state of the node determines color of a node\n    - if a node has no calibrate function defined it is a manual node and has a hexagonal instead of a circle as symbol\n    - mouseover information lists more properties (planned)\n\n![Example calibration graph](docs/example_graph.png)\n\n## Examples \nFor an introductory example see the example notebook. If you want to see how to use a specific function, see the tests located in the autodepgraph/tests folder.\n\n## Installation\n- Clone the repository\n- install the [requirements](requirements.txt)\n- navigate to the repository and run `pip install -e .`\n- verify success of installation by running `py.test`\n\n#### N.B. windows can be \"problematic\" \nInstallation on windows is a bit more difficult, this relates mostly to the installation of pygraphviz. To install graphviz and pygraphviz on windows follow these steps: \n\n- get the 64 bit version of ![graphviz for windows](https://github.com/mahkoCosmo/GraphViz_x64/), copy it to e.g., program files and add the bin folder to the system path.\n- the 64 bit version lacks the libxml2.dll, you most likely have this from some other program. You can find this by searching for `libxml2.dll` in the program files folder. After that just copy paste it to the bin folder of graphviz.\n- get pygraphviz by downloading the master from github.\n- Now you will need to edit pygraphviz/graphviz.i and pygraphviz/graphviz_wrap.c according to the changes at https://github.com/Kagami/pygraphviz/tree/py3-windows-iobase. A reference can be found in the _install folder\n- Next install using\n```\npython setup.py install --include-path=\"C:\\Program Files\\graphviz-2.38_x64\\include\" --library-path=\"C:\\Program Files\\graphviz-2.38_x64\\lib\"\n```\n\n- then install autodepgraph and test the installation using `py.test`\n\n## Acknowledgements\nI would like to thank Julian Kelly for the idea of using a dependency graph for calibrations and for early discussions. I would like to thank Joe Weston for discussions and help in working out the initial design. I would like to acknowledge Livio Ciorciaro for disucssions and as a coauthor of this project.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AdriaanRol/AutoDepGraph", "keywords": "graph,calibration framework", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "autodepgraph", "package_url": "https://pypi.org/project/autodepgraph/", "platform": "", "project_url": "https://pypi.org/project/autodepgraph/", "project_urls": {"Homepage": "https://github.com/AdriaanRol/AutoDepGraph"}, "release_url": "https://pypi.org/project/autodepgraph/0.3.4/", "requires_dist": null, "requires_python": "", "summary": "automated tuning based on dependency graph", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AutoDepGraph</h1>\n<p><a href=\"https://pypi.python.org/pypi/autodepgraph\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff08715c3df94a579ab3a2ac0247e46917b39ef2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61646170746976652e737667\"></a>\n<a href=\"https://travis-ci.org/AdriaanRol/AutoDepGraph\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c4fead7a8e244509bc4be0afe39bcda7479c726/68747470733a2f2f7472617669732d63692e6f72672f4164726961616e526f6c2f4175746f44657047726170682e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://www.codacy.com/app/adriaan-rol/AutoDepGraph?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=AdriaanRol/AutoDepGraph&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70f134d9fcdf3a4a9be14ba167ec5148b8abc68d/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6165343663353836313766663435646639616339383434366233646333346163\"></a>\n<a href=\"https://coveralls.io/github/AdriaanRol/AutoDepGraph?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac97f6c418b98d78e011872f702502e79f56aaf2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4164726961616e526f6c2f4175746f44657047726170682f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://zenodo.org/badge/latestdoi/85987885\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41af755766b020ba8792a6c7770941b44d29e241/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f38353938373838352e737667\"></a></p>\n<p>AutoDepGraph is a framework for using dependency graphs to calibrate a system. It is heavily inspired by <a href=\"https://arxiv.org/abs/1803.03226\" rel=\"nofollow\">\"Physical qubit calibration on a directed acyclic graph\"</a>.</p>\n<h2>Overview</h2>\n<p>AutoDepGraph consists of two main classes, the CalibrationNode and the Graph.\nCalibration is done by calling a node that one wants to execute, the node contains the logic required to satisfy the nodes it depends on (parents).</p>\n<p>A CalibrationNode contains:</p>\n<ul>\n<li>\n<p>parameters</p>\n<ul>\n<li>state\n<ul>\n<li>Good (green): check passes</li>\n<li>needs calibration (yellow): calibration is not up to date anymore and needs to be updated</li>\n<li>Bad (red): calibration or check has failed</li>\n<li>unknown (grayed): checks of the node should be run</li>\n<li>active (blue): calibration or check in progress</li>\n</ul>\n</li>\n<li>parents: the nodes it depends on</li>\n<li>children: nodes that depend on this node</li>\n<li>check_function : name of function to be executed when check is called. This can be a method of another instrument.</li>\n<li>calibrate_function : name of function to be executed when calibrate is called. This can be a method of another instrument.</li>\n<li>calibration_timeout: time in (s) after which a calibration times out.</li>\n</ul>\n</li>\n<li>\n<p>function</p>\n<ul>\n<li>execute or call\n<ul>\n<li>Performs the logic of a node (check state, satisfy requirements) with the goal of moving to a \"good\" state</li>\n</ul>\n</li>\n<li>check\n<ul>\n<li>Performs checks to determine and the state of a node</li>\n</ul>\n</li>\n<li>calibrate\n<ul>\n<li>Executes the calibration routines of the node</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>A Graph is a container of nodes, it is used for:</p>\n<ul>\n<li>new graphs can be created by instantiating a graph and then using the add_node method to define new nodes.</li>\n<li>loading and saving the graph</li>\n<li>real-time visualization using pyqtgraph\n<ul>\n<li>state of the node determines color of a node</li>\n<li>if a node has no calibrate function defined it is a manual node and has a hexagonal instead of a circle as symbol</li>\n<li>mouseover information lists more properties (planned)</li>\n</ul>\n</li>\n</ul>\n<p><img alt=\"Example calibration graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01a847164414fe3f2848e7a6c414eccb34eaefc4/646f63732f6578616d706c655f67726170682e706e67\"></p>\n<h2>Examples</h2>\n<p>For an introductory example see the example notebook. If you want to see how to use a specific function, see the tests located in the autodepgraph/tests folder.</p>\n<h2>Installation</h2>\n<ul>\n<li>Clone the repository</li>\n<li>install the <a href=\"requirements.txt\" rel=\"nofollow\">requirements</a></li>\n<li>navigate to the repository and run <code>pip install -e .</code></li>\n<li>verify success of installation by running <code>py.test</code></li>\n</ul>\n<h4>N.B. windows can be \"problematic\"</h4>\n<p>Installation on windows is a bit more difficult, this relates mostly to the installation of pygraphviz. To install graphviz and pygraphviz on windows follow these steps:</p>\n<ul>\n<li>get the 64 bit version of <img alt=\"graphviz for windows\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d13ce22fea07f9292a394c478357e86f46d5566c/68747470733a2f2f6769746875622e636f6d2f6d61686b6f436f736d6f2f477261706856697a5f7836342f\">, copy it to e.g., program files and add the bin folder to the system path.</li>\n<li>the 64 bit version lacks the libxml2.dll, you most likely have this from some other program. You can find this by searching for <code>libxml2.dll</code> in the program files folder. After that just copy paste it to the bin folder of graphviz.</li>\n<li>get pygraphviz by downloading the master from github.</li>\n<li>Now you will need to edit pygraphviz/graphviz.i and pygraphviz/graphviz_wrap.c according to the changes at <a href=\"https://github.com/Kagami/pygraphviz/tree/py3-windows-iobase\" rel=\"nofollow\">https://github.com/Kagami/pygraphviz/tree/py3-windows-iobase</a>. A reference can be found in the _install folder</li>\n<li>Next install using</li>\n</ul>\n<pre><code>python setup.py install --include-path=\"C:\\Program Files\\graphviz-2.38_x64\\include\" --library-path=\"C:\\Program Files\\graphviz-2.38_x64\\lib\"\n</code></pre>\n<ul>\n<li>then install autodepgraph and test the installation using <code>py.test</code></li>\n</ul>\n<h2>Acknowledgements</h2>\n<p>I would like to thank Julian Kelly for the idea of using a dependency graph for calibrations and for early discussions. I would like to thank Joe Weston for discussions and help in working out the initial design. I would like to acknowledge Livio Ciorciaro for disucssions and as a coauthor of this project.</p>\n\n          </div>"}, "last_serial": 6474331, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "6e74ee42d9e812f34af042071a77efd9", "sha256": "6bda5fecffd06404c5750e85f120d746b585d9debef43889cec178b4c6c4481c"}, "downloads": -1, "filename": "autodepgraph-0.2.tar.gz", "has_sig": false, "md5_digest": "6e74ee42d9e812f34af042071a77efd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9699, "upload_time": "2018-05-18T13:36:00", "upload_time_iso_8601": "2018-05-18T13:36:00.986980Z", "url": "https://files.pythonhosted.org/packages/c1/e3/a3fe25690c639bd440aa6719e6f89de2d3bbd9d89fd002b149ddd049f91a/autodepgraph-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "a2454e9b00b62708e74cb2d17ca0c015", "sha256": "5bd6cd17adc92b8da7737a4d9bad39f66c1a3fe499d0d8a82d207ba3fbf033f2"}, "downloads": -1, "filename": "autodepgraph-0.3.tar.gz", "has_sig": false, "md5_digest": "a2454e9b00b62708e74cb2d17ca0c015", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14305, "upload_time": "2018-05-18T13:47:32", "upload_time_iso_8601": "2018-05-18T13:47:32.392577Z", "url": "https://files.pythonhosted.org/packages/03/65/facc7a901d64df59adbbfd7bad7bc6dcfe323d53d9c0d14be92cabe98159/autodepgraph-0.3.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "66e4d8386b7f941ce02c79d96c08f803", "sha256": "8d1a9dbcbd72f708ded38260b19ce8bcededb360ab48b47e346a04cbe3a15765"}, "downloads": -1, "filename": "autodepgraph-0.3.2.tar.gz", "has_sig": false, "md5_digest": "66e4d8386b7f941ce02c79d96c08f803", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8873, "upload_time": "2018-10-30T14:37:41", "upload_time_iso_8601": "2018-10-30T14:37:41.841712Z", "url": "https://files.pythonhosted.org/packages/dc/37/bc645000b8b5d294d624ca8d398e9659210ecb76c6c806e42fd74f61fbda/autodepgraph-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "04838f3bc333e1a4607cc4bc71929fe1", "sha256": "bd28c7a7f7abd03289d391a46a900526514d8e359a00ddb1f1efc1f33a101318"}, "downloads": -1, "filename": "autodepgraph-0.3.3.tar.gz", "has_sig": false, "md5_digest": "04838f3bc333e1a4607cc4bc71929fe1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9092, "upload_time": "2019-04-29T11:15:24", "upload_time_iso_8601": "2019-04-29T11:15:24.066781Z", "url": "https://files.pythonhosted.org/packages/69/70/10004146229cd19a65d9a0a425cf4c1782a4c6d2625925084e9b6ad46429/autodepgraph-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "781cd71a12d76a267953f56c26d23ea5", "sha256": "07eaaf816fcf9697641ef40214ccc2d3c487217691af4c732749651304e10ed2"}, "downloads": -1, "filename": "autodepgraph-0.3.4.tar.gz", "has_sig": false, "md5_digest": "781cd71a12d76a267953f56c26d23ea5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9122, "upload_time": "2020-01-17T17:22:14", "upload_time_iso_8601": "2020-01-17T17:22:14.628703Z", "url": "https://files.pythonhosted.org/packages/2a/0b/86e9f3ae64ae5f57c048878c6377f94cd0749af4594e4b472fd8516d672d/autodepgraph-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "781cd71a12d76a267953f56c26d23ea5", "sha256": "07eaaf816fcf9697641ef40214ccc2d3c487217691af4c732749651304e10ed2"}, "downloads": -1, "filename": "autodepgraph-0.3.4.tar.gz", "has_sig": false, "md5_digest": "781cd71a12d76a267953f56c26d23ea5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9122, "upload_time": "2020-01-17T17:22:14", "upload_time_iso_8601": "2020-01-17T17:22:14.628703Z", "url": "https://files.pythonhosted.org/packages/2a/0b/86e9f3ae64ae5f57c048878c6377f94cd0749af4594e4b472fd8516d672d/autodepgraph-0.3.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:19 2020"}