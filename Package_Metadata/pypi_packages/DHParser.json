{"info": {"author": "Eckhart Arnold", "author_email": "arnold@badw.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Compilers", "Topic :: Text Processing :: Markup"], "description": "DHParser\n========\n\nDHParser - A parser generator and domain specific language (DSL) construction \n           kit for the Digit Humanities\n\n\nFeatures\n--------\n\n* *Fail-tolerant parsing* \n\n* *Customizable error reporting*\n\n* *Unit testing and debugging of grammars*\n\n* *Language-server-support* (https://microsoft.github.io/language-server-protocol/)\n\n* *Beginner friendly*\n\n* *Digital Humanities oriented* (optional XML-workflows!), but open for any application domain\n\n* *Python-based*\n\n\nEase of use\n-----------\n\nkey_value_store.py:\n\n    # A mini-DSL for a key value store\n    from DHParser import *\n  \n    # specify the grammar of your DSL in EBNF-notation\n    grammar = '''@ drop = whitespace, token\n    key_store   = ~ { entry }             \n    entry       = key \"=\" value \n    key         = /\\w+/~                  # Scannerless parsing: Use regular\n    value       = /\\\"[^\"\\n]*\\\"/~          # expressions wherever you like'''\n    \n    # generating a parser is almost as simple as compiling a regular expression    \n    parser_factory = grammar_provider(grammar)\n    parser = parser_factory()             # parser factory for thread-safety\n\nNow, parse some text and extract the data from the Python-shell:\n\n    >>> from key_value_store import parser\n    >>> text = '''\n            title    = \"Odysee 2001\"\n            director = \"Stanley Kubrick\"\n        '''         \n    >>> data = parser(text)  \n    >>> for entry in data.select('entry'):\n            print(entry['key'], entry['value'])\n    \n    title \"Odysee 2001\"\n    director \"Stanley Kubrick\"\n\nOr, serialize as XML:\n    \n    >>> print(data.as_xml())\n    \n    <key_store>\n      <entry>\n        <key>title</key>\n        <value>\"Odysee 2001\"</value>\n      </entry>\n      <entry>\n        <key>director</key>\n        <value>\"Stanley Kubrick\"</value>\n      </entry>\n    </key_store>    \n\n\nLicense\n-------\n\nDHParser is open source software under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0).\n\nCopyright 2016-2019  Eckhart Arnold, Bavarian Academy of Sciences and Humanities\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0e\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\nAuthor\n------\n\nAuthor: Eckhart Arnold, Bavarian Academy of Sciences\nEmail:  arnold@badw.de\n\n\nInstallation\n------------\n\nYou can install DHParser from the Python package index (https://pypi.org)*:\n\n    python -m pip install --user --upgrade DHParser\n\nHowever, as the software is still in an early beta stage, it is\nrecommended that you pull it directly from gitlab (see below).\n\n\nPost-Installaton\n----------------\n\nIt is recommended that you install the `regex`-module\n(https://bitbucket.org/mrabarnett/mrab-regex). If present, DHParser\nwill use `regex` instead of the built-in `re`-module for regular\nexpressions. `regex` is faster and more powerful than `re`.\n\nIn order to speed up DHParser even more, it is recommended that you\nrun the `buildpackages.sh`-script (or `buildpackages.bat` on\nWindows-systems) after installation. This script compiles the\n`stringview.py`-module to C-Code with the cython Python to C compiler\n(https://cython.org). This requires that you have cython and a\nC-compiler installed on your system.\n\n\nSources\n-------\n\nFind the sources on [gitlab.lrz.de/badw-it/DHParser](https://gitlab.lrz.de/badw-it/DHParser) .\nGet them with:\n\n    git clone https://gitlab.lrz.de/badw-it/DHParser\n\nThere exists a mirror of this repository on github:\nhttps://github.com/jecki/DHParser Be aware, though, that the github-mirror\nmay occasionally lag behind a few commits.\n\nPlease contact me, if you are intested in contributing to the\ndevelopment or just using DHParser.\n\n\nDisclaimer\n----------\n\nDHParser is still in development stage. While it is already quite mature, \nthere may still be changes to the API.\n\n\nPurpose\n-------\n\nDHParser is a parser-combinator-based parsing and compiling \ninfrastructure for domain specific languages (DSL) in Digital \nHumanities projects. It leverages the power of Domain specific \nlanguages for the Digital Humanities.\n\nDomain specific languages are widespread in\ncomputer sciences, but seem to be underused in the Digital Humanities.\nWhile DSLs are sometimes introduced to Digital-Humanities-projects as\n[practical adhoc-solution][M\u00fcller_2016], these solutions are often\nsomewhat \"quick and dirty\". In other words they are more of a hack\nthan a technology. The purpose of DHParser is to introduce\n[DSLs as a technology][Arnold_2016] to the Digital Humanities. It is\nbased on the well known technology of [EBNF][ISO_IEC_14977]-based\nparser generators, but employs the more modern form called\n\"[parsing expression grammar][Ford_2004]\" and\n[parser combinators][Ford_20XX] as a variant of the classical\nrecursive descent parser.\n\nWhy another parser generator? There are plenty of good parser\ngenerators out there, e.g. [A\u00f1ez's grako parser generator][A\u00f1ez_2017],\n[Eclipse XText][XText_Website]. However, DHParser is\nintended as a tool that is specifically geared towards digital\nhumanities applications, while most existing parser generators come\nfrom compiler construction toolkits for programming languages.\nWhile I expect DSLs in computer science and DSLs in the Digital\nHumanities to be quite similar as far as the technological realization\nis concerned, the use cases, requirements and challenges are somewhat\ndifferent. For example, in the humanities annotating text is a central\nuse case, which is mostly absent in computer science treatments.\nThese differences might sooner or later require to develop the\nDSL-construction toolkits in a different direction. Also DHParser \nemphasizes and evolutionary development model for grammars with\nunit-testing support, which fits the typical use cases in DH where DSLs \nevolve in a discussion process between technicians and humanists. \nBecause the users of DSLs in the humanities are not necessarily very \ntechnically mindes people, DHParser supports the construction of \nfail-tolerant parsers with good error reporting in terms of locating\nthe errors at the right spot and giving useful error messages. \n\nAlso,\nDHParser shall (in the future) serve as a teaching tool, which\ninfluences some of its design decisions such as, for example, clearly\nseparating the parsing, syntax-tree-transformation and compilation\nstages. Finally, DHParser is intended as a tool to experiment with.  One\npossible research area is, how non\n[context-free grammars](https://en.wikipedia.org/wiki/Context-free_grammar)\nsuch as the grammars of [TeX][tex_stackexchange_no_bnf] or\n[CommonMark][MacFarlane_et_al_2017] can be described with declarative\nlangauges in the spirit of but beyond EBNF, and what extensions of the\nparsing technology are necessary to capture such languages.\n\nPrimary use case at the Bavarian Academy of Sciences and Humanities\n(for the time being): A DSL for the\n\"[Mittellateinische W\u00f6rterbuch](http://www.mlw.badw.de/)\"!\n\nFurther (intended) use cases are:\n\n* LaTeX -> XML/HTML conversion. See this\n  [discussion on why an EBNF-parser for the complete TeX/LaTeX-grammar][tex_stackexchange_no_bnf]\n  is not possible.\n* [CommonMark][MacFarlane_et_al_2017] and other DSLs for cross media\n  publishing of scientific literature, e.g. journal articles.  (Common\n  Mark and Markdown also go beyond what is feasible with pure\n  EBNF-based-parsers.)\n* EBNF itself. DHParser is already self-hosting ;-)\n* XML-parser, just for the fun of it ;-)\n* Digital and cross-media editions\n* Digital dictionaries\n\nFor a simple self-test run `dhparser.py` from the command line. This\ncompiles the EBNF-Grammer in `examples/EBNF/EBNF.ebnf` and outputs the\nPython-based parser class representing that grammar. The concrete and\nabstract syntax tree as well as a full and abbreviated log of the\nparsing process will be stored in a sub-directory named \"LOG\".\n\n\nIntroduction\n------------\n\nSee [Introduction.md](https://gitlab.lrz.de/badw-it/DHParser/blob/master/Introduction.md) for the \nmotivation and an overview how DHParser works or jump right into the \n[Step by Step Guide](https://gitlab.lrz.de/badw-it/DHParser/blob/master/documentation_src/StepByStepGuide.rst) to\nlearn how to setup and use DHParser.\n\n\nReferences and Acknowledment\n----------\n\nJuancarlo A\u00f1ez: grako, a PEG parser generator in Python, 2017. URL:\n[bitbucket.org/apalala/grako][A\u00f1ez_2017]\n\n[A\u00f1ez_2017]: https://bitbucket.org/apalala/grako\n\n\nEckhart Arnold: Dom\u00e4nenspezifische Notationen. Eine (noch)\nuntersch\u00e4tzte Technologie in den Digitalen Geisteswissenschaften,\nPr\u00e4sentation auf dem\n[dhmuc-Workshop: Digitale Editionen und Auszeichnungssprachen](https://dhmuc.hypotheses.org/workshop-digitale-editionen-und-auszeichnungssprachen),\nM\u00fcnchen 2016. Short-URL: [tiny.badw.de/2JVT][Arnold_2016]\n\n[Arnold_2016]: https://f.hypotheses.org/wp-content/blogs.dir/1856/files/2016/12/EA_Pr%C3%A4sentation_Auszeichnungssprachen.pdf\n\nBrian Ford: Parsing Expression Grammars: A Recognition-Based Syntactic\nFoundation, Cambridge\nMassachusetts, 2004. Short-URL:[t1p.de/jihs][Ford_2004]\n\n[Ford_2004]: https://pdos.csail.mit.edu/~baford/packrat/popl04/peg-popl04.pdf\n\n[Ford_20XX]: http://bford.info/packrat/\n\nRichard A. Frost, Rahmatullah Hafiz and Paul Callaghan: Parser\nCombinators for Ambiguous Left-Recursive Grammars, in: P. Hudak and\nD.S. Warren (Eds.): PADL 2008, LNCS 4902, pp. 167\u2013181, Springer-Verlag\nBerlin Heidelberg 2008.\n\nElizabeth Scott and Adrian Johnstone, GLL Parsing,\nin: Electronic Notes in Theoretical Computer Science 253 (2010) 177\u2013189,\n[dotat.at/tmp/gll.pdf][scott_johnstone_2010]\n\n[scott_johnstone_2010]: http://dotat.at/tmp/gll.pdf\n\nDominikus Herzberg: Objekt-orientierte Parser-Kombinatoren in Python,\nBlog-Post, September, 18th 2008 on denkspuren. gedanken, ideen,\nanregungen und links rund um informatik-themen, short-URL:\n[t1p.de/bm3k][Herzberg_2008a]\n\n[Herzberg_2008a]: http://denkspuren.blogspot.de/2008/09/objekt-orientierte-parser-kombinatoren.html\n\nDominikus Herzberg: Eine einfache Grammatik f\u00fcr LaTeX, Blog-Post,\nSeptember, 18th 2008 on denkspuren. gedanken, ideen, anregungen und\nlinks rund um informatik-themen, short-URL:\n[t1p.de/7jzh][Herzberg_2008b]\n\n[Herzberg_2008b]: http://denkspuren.blogspot.de/2008/09/eine-einfache-grammatik-fr-latex.html\n\nDominikus Herzberg: Uniform Syntax, Blog-Post, February, 27th 2007 on\ndenkspuren. gedanken, ideen, anregungen und links rund um\ninformatik-themen, short-URL: [t1p.de/s0zk][Herzberg_2007]\n\n[Herzberg_2007]: http://denkspuren.blogspot.de/2007/02/uniform-syntax.html\n\n[ISO_IEC_14977]: http://www.cl.cam.ac.uk/~mgk25/iso-14977.pdf\n\nJohn MacFarlane, David Greenspan, Vicent Marti, Neil Williams,\nBenjamin Dumke-von der Ehe, Jeff Atwood: CommonMark. A strongly\ndefined, highly compatible specification of\nMarkdown, 2017. [commonmark.org][MacFarlane_et_al_2017]\n\n[MacFarlane_et_al_2017]: http://commonmark.org/\n\nStefan M\u00fcller: DSLs in den digitalen Geisteswissenschaften,\nPr\u00e4sentation auf dem\n[dhmuc-Workshop: Digitale Editionen und Auszeichnungssprachen](https://dhmuc.hypotheses.org/workshop-digitale-editionen-und-auszeichnungssprachen),\nM\u00fcnchen 2016. Short-URL: [tiny.badw.de/2JVy][M\u00fcller_2016]\n\n[M\u00fcller_2016]: https://f.hypotheses.org/wp-content/blogs.dir/1856/files/2016/12/Mueller_Anzeichnung_10_Vortrag_M%C3%BCnchen.pdf\n\nMarkus Voelter, Sbastian Benz, Christian Dietrich, Birgit Engelmann,\nMats Helander, Lennart Kats, Eelco Visser, Guido Wachsmuth:\nDSL Engineering. Designing, Implementing and Using Domain-Specific Languages, 2013.\n[dslbook.org/][Voelter_2013]\n\nChristopher Seaton: A Programming Language Where the Syntax and Semantics\nare Mutuable at Runtime, University of Bristol 2007,\n[chrisseaton.com/katahdin/katahdin.pdf][seaton_2007]\n\nVegard \u00d8ye: General Parser Combinators in Racket, 2012,\n[epsil.github.io/gll/][vegard_2012]\n\n[vegard_2012]: https://epsil.github.io/gll/ \n\n[seaton_2007]: http://chrisseaton.com/katahdin/katahdin.pdf\n\n[voelter_2013]: http://dslbook.org/\n\n[tex_stackexchange_no_bnf]: http://tex.stackexchange.com/questions/4201/is-there-a-bnf-grammar-of-the-tex-language\n\n[tex_stackexchange_latex_parsers]: http://tex.stackexchange.com/questions/4223/what-parsers-for-latex-mathematics-exist-outside-of-the-tex-engines\n\n[XText_website]: https://www.eclipse.org/Xtext/", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.lrz.de/badw-it/DHParser", "keywords": "parser generator,domain specific languages,Digital Humanities,parser combinators,EBNF", "license": "[Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0)", "maintainer": "", "maintainer_email": "", "name": "DHParser", "package_url": "https://pypi.org/project/DHParser/", "platform": "", "project_url": "https://pypi.org/project/DHParser/", "project_urls": {"Homepage": "https://gitlab.lrz.de/badw-it/DHParser"}, "release_url": "https://pypi.org/project/DHParser/0.9.0/", "requires_dist": null, "requires_python": "", "summary": "DHParser - Parser generator and DSL-construction-kit", "version": "0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DHParser</h1>\n<p>DHParser - A parser generator and domain specific language (DSL) construction\nkit for the Digit Humanities</p>\n<h2>Features</h2>\n<ul>\n<li>\n<p><em>Fail-tolerant parsing</em></p>\n</li>\n<li>\n<p><em>Customizable error reporting</em></p>\n</li>\n<li>\n<p><em>Unit testing and debugging of grammars</em></p>\n</li>\n<li>\n<p><em>Language-server-support</em> (<a href=\"https://microsoft.github.io/language-server-protocol/\" rel=\"nofollow\">https://microsoft.github.io/language-server-protocol/</a>)</p>\n</li>\n<li>\n<p><em>Beginner friendly</em></p>\n</li>\n<li>\n<p><em>Digital Humanities oriented</em> (optional XML-workflows!), but open for any application domain</p>\n</li>\n<li>\n<p><em>Python-based</em></p>\n</li>\n</ul>\n<h2>Ease of use</h2>\n<p>key_value_store.py:</p>\n<pre><code># A mini-DSL for a key value store\nfrom DHParser import *\n\n# specify the grammar of your DSL in EBNF-notation\ngrammar = '''@ drop = whitespace, token\nkey_store   = ~ { entry }             \nentry       = key \"=\" value \nkey         = /\\w+/~                  # Scannerless parsing: Use regular\nvalue       = /\\\"[^\"\\n]*\\\"/~          # expressions wherever you like'''\n\n# generating a parser is almost as simple as compiling a regular expression    \nparser_factory = grammar_provider(grammar)\nparser = parser_factory()             # parser factory for thread-safety\n</code></pre>\n<p>Now, parse some text and extract the data from the Python-shell:</p>\n<pre><code>&gt;&gt;&gt; from key_value_store import parser\n&gt;&gt;&gt; text = '''\n        title    = \"Odysee 2001\"\n        director = \"Stanley Kubrick\"\n    '''         \n&gt;&gt;&gt; data = parser(text)  \n&gt;&gt;&gt; for entry in data.select('entry'):\n        print(entry['key'], entry['value'])\n\ntitle \"Odysee 2001\"\ndirector \"Stanley Kubrick\"\n</code></pre>\n<p>Or, serialize as XML:</p>\n<pre><code>&gt;&gt;&gt; print(data.as_xml())\n\n&lt;key_store&gt;\n  &lt;entry&gt;\n    &lt;key&gt;title&lt;/key&gt;\n    &lt;value&gt;\"Odysee 2001\"&lt;/value&gt;\n  &lt;/entry&gt;\n  &lt;entry&gt;\n    &lt;key&gt;director&lt;/key&gt;\n    &lt;value&gt;\"Stanley Kubrick\"&lt;/value&gt;\n  &lt;/entry&gt;\n&lt;/key_store&gt;    \n</code></pre>\n<h2>License</h2>\n<p>DHParser is open source software under the <a href=\"https://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">Apache 2.0 License</a>.</p>\n<p>Copyright 2016-2019  Eckhart Arnold, Bavarian Academy of Sciences and Humanities</p>\n<p>Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n<pre><code>https://www.apache.org/licenses/LICENSE-2.0e\n</code></pre>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n<h2>Author</h2>\n<p>Author: Eckhart Arnold, Bavarian Academy of Sciences\nEmail:  <a href=\"mailto:arnold@badw.de\">arnold@badw.de</a></p>\n<h2>Installation</h2>\n<p>You can install DHParser from the Python package index (<a href=\"https://pypi.org\" rel=\"nofollow\">https://pypi.org</a>)*:</p>\n<pre><code>python -m pip install --user --upgrade DHParser\n</code></pre>\n<p>However, as the software is still in an early beta stage, it is\nrecommended that you pull it directly from gitlab (see below).</p>\n<h2>Post-Installaton</h2>\n<p>It is recommended that you install the <code>regex</code>-module\n(<a href=\"https://bitbucket.org/mrabarnett/mrab-regex\" rel=\"nofollow\">https://bitbucket.org/mrabarnett/mrab-regex</a>). If present, DHParser\nwill use <code>regex</code> instead of the built-in <code>re</code>-module for regular\nexpressions. <code>regex</code> is faster and more powerful than <code>re</code>.</p>\n<p>In order to speed up DHParser even more, it is recommended that you\nrun the <code>buildpackages.sh</code>-script (or <code>buildpackages.bat</code> on\nWindows-systems) after installation. This script compiles the\n<code>stringview.py</code>-module to C-Code with the cython Python to C compiler\n(<a href=\"https://cython.org\" rel=\"nofollow\">https://cython.org</a>). This requires that you have cython and a\nC-compiler installed on your system.</p>\n<h2>Sources</h2>\n<p>Find the sources on <a href=\"https://gitlab.lrz.de/badw-it/DHParser\" rel=\"nofollow\">gitlab.lrz.de/badw-it/DHParser</a> .\nGet them with:</p>\n<pre><code>git clone https://gitlab.lrz.de/badw-it/DHParser\n</code></pre>\n<p>There exists a mirror of this repository on github:\n<a href=\"https://github.com/jecki/DHParser\" rel=\"nofollow\">https://github.com/jecki/DHParser</a> Be aware, though, that the github-mirror\nmay occasionally lag behind a few commits.</p>\n<p>Please contact me, if you are intested in contributing to the\ndevelopment or just using DHParser.</p>\n<h2>Disclaimer</h2>\n<p>DHParser is still in development stage. While it is already quite mature,\nthere may still be changes to the API.</p>\n<h2>Purpose</h2>\n<p>DHParser is a parser-combinator-based parsing and compiling\ninfrastructure for domain specific languages (DSL) in Digital\nHumanities projects. It leverages the power of Domain specific\nlanguages for the Digital Humanities.</p>\n<p>Domain specific languages are widespread in\ncomputer sciences, but seem to be underused in the Digital Humanities.\nWhile DSLs are sometimes introduced to Digital-Humanities-projects as\n<a href=\"https://f.hypotheses.org/wp-content/blogs.dir/1856/files/2016/12/Mueller_Anzeichnung_10_Vortrag_M%C3%BCnchen.pdf\" rel=\"nofollow\">practical adhoc-solution</a>, these solutions are often\nsomewhat \"quick and dirty\". In other words they are more of a hack\nthan a technology. The purpose of DHParser is to introduce\n<a href=\"https://f.hypotheses.org/wp-content/blogs.dir/1856/files/2016/12/EA_Pr%C3%A4sentation_Auszeichnungssprachen.pdf\" rel=\"nofollow\">DSLs as a technology</a> to the Digital Humanities. It is\nbased on the well known technology of <a href=\"http://www.cl.cam.ac.uk/%7Emgk25/iso-14977.pdf\" rel=\"nofollow\">EBNF</a>-based\nparser generators, but employs the more modern form called\n\"<a href=\"https://pdos.csail.mit.edu/%7Ebaford/packrat/popl04/peg-popl04.pdf\" rel=\"nofollow\">parsing expression grammar</a>\" and\n<a href=\"http://bford.info/packrat/\" rel=\"nofollow\">parser combinators</a> as a variant of the classical\nrecursive descent parser.</p>\n<p>Why another parser generator? There are plenty of good parser\ngenerators out there, e.g. <a href=\"https://bitbucket.org/apalala/grako\" rel=\"nofollow\">A\u00f1ez's grako parser generator</a>,\n<a href=\"https://www.eclipse.org/Xtext/\" rel=\"nofollow\">Eclipse XText</a>. However, DHParser is\nintended as a tool that is specifically geared towards digital\nhumanities applications, while most existing parser generators come\nfrom compiler construction toolkits for programming languages.\nWhile I expect DSLs in computer science and DSLs in the Digital\nHumanities to be quite similar as far as the technological realization\nis concerned, the use cases, requirements and challenges are somewhat\ndifferent. For example, in the humanities annotating text is a central\nuse case, which is mostly absent in computer science treatments.\nThese differences might sooner or later require to develop the\nDSL-construction toolkits in a different direction. Also DHParser\nemphasizes and evolutionary development model for grammars with\nunit-testing support, which fits the typical use cases in DH where DSLs\nevolve in a discussion process between technicians and humanists.\nBecause the users of DSLs in the humanities are not necessarily very\ntechnically mindes people, DHParser supports the construction of\nfail-tolerant parsers with good error reporting in terms of locating\nthe errors at the right spot and giving useful error messages.</p>\n<p>Also,\nDHParser shall (in the future) serve as a teaching tool, which\ninfluences some of its design decisions such as, for example, clearly\nseparating the parsing, syntax-tree-transformation and compilation\nstages. Finally, DHParser is intended as a tool to experiment with.  One\npossible research area is, how non\n<a href=\"https://en.wikipedia.org/wiki/Context-free_grammar\" rel=\"nofollow\">context-free grammars</a>\nsuch as the grammars of <a href=\"http://tex.stackexchange.com/questions/4201/is-there-a-bnf-grammar-of-the-tex-language\" rel=\"nofollow\">TeX</a> or\n<a href=\"http://commonmark.org/\" rel=\"nofollow\">CommonMark</a> can be described with declarative\nlangauges in the spirit of but beyond EBNF, and what extensions of the\nparsing technology are necessary to capture such languages.</p>\n<p>Primary use case at the Bavarian Academy of Sciences and Humanities\n(for the time being): A DSL for the\n\"<a href=\"http://www.mlw.badw.de/\" rel=\"nofollow\">Mittellateinische W\u00f6rterbuch</a>\"!</p>\n<p>Further (intended) use cases are:</p>\n<ul>\n<li>LaTeX -&gt; XML/HTML conversion. See this\n<a href=\"http://tex.stackexchange.com/questions/4201/is-there-a-bnf-grammar-of-the-tex-language\" rel=\"nofollow\">discussion on why an EBNF-parser for the complete TeX/LaTeX-grammar</a>\nis not possible.</li>\n<li><a href=\"http://commonmark.org/\" rel=\"nofollow\">CommonMark</a> and other DSLs for cross media\npublishing of scientific literature, e.g. journal articles.  (Common\nMark and Markdown also go beyond what is feasible with pure\nEBNF-based-parsers.)</li>\n<li>EBNF itself. DHParser is already self-hosting ;-)</li>\n<li>XML-parser, just for the fun of it ;-)</li>\n<li>Digital and cross-media editions</li>\n<li>Digital dictionaries</li>\n</ul>\n<p>For a simple self-test run <code>dhparser.py</code> from the command line. This\ncompiles the EBNF-Grammer in <code>examples/EBNF/EBNF.ebnf</code> and outputs the\nPython-based parser class representing that grammar. The concrete and\nabstract syntax tree as well as a full and abbreviated log of the\nparsing process will be stored in a sub-directory named \"LOG\".</p>\n<h2>Introduction</h2>\n<p>See <a href=\"https://gitlab.lrz.de/badw-it/DHParser/blob/master/Introduction.md\" rel=\"nofollow\">Introduction.md</a> for the\nmotivation and an overview how DHParser works or jump right into the\n<a href=\"https://gitlab.lrz.de/badw-it/DHParser/blob/master/documentation_src/StepByStepGuide.rst\" rel=\"nofollow\">Step by Step Guide</a> to\nlearn how to setup and use DHParser.</p>\n<h2>References and Acknowledment</h2>\n<p>Juancarlo A\u00f1ez: grako, a PEG parser generator in Python, 2017. URL:\n<a href=\"https://bitbucket.org/apalala/grako\" rel=\"nofollow\">bitbucket.org/apalala/grako</a></p>\n<p>Eckhart Arnold: Dom\u00e4nenspezifische Notationen. Eine (noch)\nuntersch\u00e4tzte Technologie in den Digitalen Geisteswissenschaften,\nPr\u00e4sentation auf dem\n<a href=\"https://dhmuc.hypotheses.org/workshop-digitale-editionen-und-auszeichnungssprachen\" rel=\"nofollow\">dhmuc-Workshop: Digitale Editionen und Auszeichnungssprachen</a>,\nM\u00fcnchen 2016. Short-URL: <a href=\"https://f.hypotheses.org/wp-content/blogs.dir/1856/files/2016/12/EA_Pr%C3%A4sentation_Auszeichnungssprachen.pdf\" rel=\"nofollow\">tiny.badw.de/2JVT</a></p>\n<p>Brian Ford: Parsing Expression Grammars: A Recognition-Based Syntactic\nFoundation, Cambridge\nMassachusetts, 2004. Short-URL:<a href=\"https://pdos.csail.mit.edu/%7Ebaford/packrat/popl04/peg-popl04.pdf\" rel=\"nofollow\">t1p.de/jihs</a></p>\n<p>Richard A. Frost, Rahmatullah Hafiz and Paul Callaghan: Parser\nCombinators for Ambiguous Left-Recursive Grammars, in: P. Hudak and\nD.S. Warren (Eds.): PADL 2008, LNCS 4902, pp. 167\u2013181, Springer-Verlag\nBerlin Heidelberg 2008.</p>\n<p>Elizabeth Scott and Adrian Johnstone, GLL Parsing,\nin: Electronic Notes in Theoretical Computer Science 253 (2010) 177\u2013189,\n<a href=\"http://dotat.at/tmp/gll.pdf\" rel=\"nofollow\">dotat.at/tmp/gll.pdf</a></p>\n<p>Dominikus Herzberg: Objekt-orientierte Parser-Kombinatoren in Python,\nBlog-Post, September, 18th 2008 on denkspuren. gedanken, ideen,\nanregungen und links rund um informatik-themen, short-URL:\n<a href=\"http://denkspuren.blogspot.de/2008/09/objekt-orientierte-parser-kombinatoren.html\" rel=\"nofollow\">t1p.de/bm3k</a></p>\n<p>Dominikus Herzberg: Eine einfache Grammatik f\u00fcr LaTeX, Blog-Post,\nSeptember, 18th 2008 on denkspuren. gedanken, ideen, anregungen und\nlinks rund um informatik-themen, short-URL:\n<a href=\"http://denkspuren.blogspot.de/2008/09/eine-einfache-grammatik-fr-latex.html\" rel=\"nofollow\">t1p.de/7jzh</a></p>\n<p>Dominikus Herzberg: Uniform Syntax, Blog-Post, February, 27th 2007 on\ndenkspuren. gedanken, ideen, anregungen und links rund um\ninformatik-themen, short-URL: <a href=\"http://denkspuren.blogspot.de/2007/02/uniform-syntax.html\" rel=\"nofollow\">t1p.de/s0zk</a></p>\n<p>John MacFarlane, David Greenspan, Vicent Marti, Neil Williams,\nBenjamin Dumke-von der Ehe, Jeff Atwood: CommonMark. A strongly\ndefined, highly compatible specification of\nMarkdown, 2017. <a href=\"http://commonmark.org/\" rel=\"nofollow\">commonmark.org</a></p>\n<p>Stefan M\u00fcller: DSLs in den digitalen Geisteswissenschaften,\nPr\u00e4sentation auf dem\n<a href=\"https://dhmuc.hypotheses.org/workshop-digitale-editionen-und-auszeichnungssprachen\" rel=\"nofollow\">dhmuc-Workshop: Digitale Editionen und Auszeichnungssprachen</a>,\nM\u00fcnchen 2016. Short-URL: <a href=\"https://f.hypotheses.org/wp-content/blogs.dir/1856/files/2016/12/Mueller_Anzeichnung_10_Vortrag_M%C3%BCnchen.pdf\" rel=\"nofollow\">tiny.badw.de/2JVy</a></p>\n<p>Markus Voelter, Sbastian Benz, Christian Dietrich, Birgit Engelmann,\nMats Helander, Lennart Kats, Eelco Visser, Guido Wachsmuth:\nDSL Engineering. Designing, Implementing and Using Domain-Specific Languages, 2013.\n<a href=\"http://dslbook.org/\" rel=\"nofollow\">dslbook.org/</a></p>\n<p>Christopher Seaton: A Programming Language Where the Syntax and Semantics\nare Mutuable at Runtime, University of Bristol 2007,\n<a href=\"http://chrisseaton.com/katahdin/katahdin.pdf\" rel=\"nofollow\">chrisseaton.com/katahdin/katahdin.pdf</a></p>\n<p>Vegard \u00d8ye: General Parser Combinators in Racket, 2012,\n<a href=\"https://epsil.github.io/gll/\" rel=\"nofollow\">epsil.github.io/gll/</a></p>\n\n          </div>"}, "last_serial": 6002085, "releases": {"0.7.3": [{"comment_text": "", "digests": {"md5": "361c179131e48089b2df49990f887fe4", "sha256": "f0915d69e00a306db0b55182d04a84888b39e85d0b14b42175af57dc44ae6950"}, "downloads": -1, "filename": "DHParser-0.7.3.tar.gz", "has_sig": false, "md5_digest": "361c179131e48089b2df49990f887fe4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80724, "upload_time": "2017-06-27T14:06:45", "upload_time_iso_8601": "2017-06-27T14:06:45.278996Z", "url": "https://files.pythonhosted.org/packages/2d/03/ca0e416b259c43e43531cd6ea9cb3bf14f09eeaf450a12326532d501ca52/DHParser-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "8cb54cb12cb6f102dc1ce4ca060a4438", "sha256": "837ea3121dd0ed8142d3e9d4cb41389e3c845ff7ccb5f8902bcd474f7f3ccc25"}, "downloads": -1, "filename": "DHParser-0.7.4.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "8cb54cb12cb6f102dc1ce4ca060a4438", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 141839, "upload_time": "2017-07-02T06:12:10", "upload_time_iso_8601": "2017-07-02T06:12:10.840762Z", "url": "https://files.pythonhosted.org/packages/06/ad/f2fc6781d9949bb3ee651234212a4256e3acab8f740f3c1883f1442f7475/DHParser-0.7.4.linux-x86_64.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "78f319602f892bd5f041fcd7ebc8afe8", "sha256": "fbbf1e421dcf886d5c42a660848ff1ed356112d8fadcf057b5025cf03c61f9dc"}, "downloads": -1, "filename": "DHParser-0.7.5.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "78f319602f892bd5f041fcd7ebc8afe8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145903, "upload_time": "2017-07-02T08:32:55", "upload_time_iso_8601": "2017-07-02T08:32:55.267669Z", "url": "https://files.pythonhosted.org/packages/72/90/6a990094a427518627ff4cb475ca3c1eb76ad4e30227354646823fffa70e/DHParser-0.7.5.linux-x86_64.tar.gz", "yanked": false}], "0.7.6": [{"comment_text": "", "digests": {"md5": "9d889bda6dcf5dd81f3a0c6ed965bfb6", "sha256": "1bcbd58016d49bd51b0c4aa5ef357b7abce4f138f1b6c15c25eecd23ad8d2077"}, "downloads": -1, "filename": "DHParser-0.7.6.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "9d889bda6dcf5dd81f3a0c6ed965bfb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 147155, "upload_time": "2017-07-08T10:18:31", "upload_time_iso_8601": "2017-07-08T10:18:31.931956Z", "url": "https://files.pythonhosted.org/packages/d5/b7/ad4e393f14f63fb314a537492c5346450914191555a56116c197d00aa09a/DHParser-0.7.6.linux-x86_64.tar.gz", "yanked": false}], "0.7.7": [{"comment_text": "", "digests": {"md5": "82efceff44af1007321cf72f10ca1cfc", "sha256": "97c1de44e3a2b87aba45fe2b1f17c696534c96934844c12187a669289a0ab495"}, "downloads": -1, "filename": "DHParser-0.7.7.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "82efceff44af1007321cf72f10ca1cfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 202629, "upload_time": "2017-09-02T20:04:53", "upload_time_iso_8601": "2017-09-02T20:04:53.088931Z", "url": "https://files.pythonhosted.org/packages/86/65/0939470a4fa243da5b783deef2ee90d30e683ed2396c0c2c6eda5cdfbdf1/DHParser-0.7.7.linux-x86_64.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "baab8526715a27285ee83445109d5d33", "sha256": "0b49561eacb3ae49db25b0142d8bf9998fa5cef122d8f291f879347a38efdb93"}, "downloads": -1, "filename": "DHParser-0.8.0.tar.gz", "has_sig": false, "md5_digest": "baab8526715a27285ee83445109d5d33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 392318, "upload_time": "2018-06-24T07:21:10", "upload_time_iso_8601": "2018-06-24T07:21:10.779130Z", "url": "https://files.pythonhosted.org/packages/c1/6b/3ec494bec1a5488843b1e7346470ce98e3af445cf586cdf22f7a0cfdb509/DHParser-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "eb7afb8c2dd6cc688ba1c16c46e7359e", "sha256": "855bf0f8c5778d7454f2e286b5db53f4bbfe17eed91b5418dc7c9d1d3881cf24"}, "downloads": -1, "filename": "DHParser-0.8.1.tar.gz", "has_sig": false, "md5_digest": "eb7afb8c2dd6cc688ba1c16c46e7359e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 393405, "upload_time": "2018-07-02T19:42:25", "upload_time_iso_8601": "2018-07-02T19:42:25.836164Z", "url": "https://files.pythonhosted.org/packages/09/3d/10a7fb68bf4f6004af3cbe0a2600cb01507b0fb0bf16deb9df25ecd2b67d/DHParser-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "6b887e19443d9adc1db4b6e85740f7ed", "sha256": "422b7a87e04d24d01bceb0fc4b6c782a8d696ab82a5212cd3893ada51d4a6499"}, "downloads": -1, "filename": "DHParser-0.8.2.tar.gz", "has_sig": false, "md5_digest": "6b887e19443d9adc1db4b6e85740f7ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 393798, "upload_time": "2018-07-10T18:53:07", "upload_time_iso_8601": "2018-07-10T18:53:07.235393Z", "url": "https://files.pythonhosted.org/packages/d2/5e/a6b6df784fcd076c8d900df420e0de1ec5ad63a0159b16739c0cd44c4712/DHParser-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "7bf61e3eabb84de9f19d6e29ff9849b3", "sha256": "d9f7cacfb3835b5d488a2d962392604dedd443f0d51ef7c2b61a10aab425f79b"}, "downloads": -1, "filename": "DHParser-0.8.3.tar.gz", "has_sig": false, "md5_digest": "7bf61e3eabb84de9f19d6e29ff9849b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 396095, "upload_time": "2018-08-20T20:04:22", "upload_time_iso_8601": "2018-08-20T20:04:22.880175Z", "url": "https://files.pythonhosted.org/packages/76/d7/be5a29d34819a1b24dffb4c417cd19edee93a01a74b488c3cbacbb08a291/DHParser-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "711c9c9dce5dbbbb29060689b4704cb6", "sha256": "4d6ac51222906d21c61eb519d29e8c209d67b5f87b11662b6844b6f8dd0bf3b3"}, "downloads": -1, "filename": "DHParser-0.8.4.tar.gz", "has_sig": false, "md5_digest": "711c9c9dce5dbbbb29060689b4704cb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 404936, "upload_time": "2019-01-06T11:57:54", "upload_time_iso_8601": "2019-01-06T11:57:54.648435Z", "url": "https://files.pythonhosted.org/packages/61/7c/9af2652e8e61a12171e53b9f822a74d82b5b7d03ed61f5e130c149ddc837/DHParser-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "77be615e1790e01fca5a2458e30dd7ba", "sha256": "9e23a5b69e4a5cc443eb288dc3d6c48ce92dde504c2a90a28ef4fbad98658da7"}, "downloads": -1, "filename": "DHParser-0.8.5.tar.gz", "has_sig": false, "md5_digest": "77be615e1790e01fca5a2458e30dd7ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1725951, "upload_time": "2019-02-10T14:10:14", "upload_time_iso_8601": "2019-02-10T14:10:14.624070Z", "url": "https://files.pythonhosted.org/packages/aa/24/fa0eecedb52ae9777797d82743f2006db9bdd0bf32256e614fa7997485f6/DHParser-0.8.5.tar.gz", "yanked": false}], "0.8.6": [{"comment_text": "", "digests": {"md5": "dd9ece522463079ab9d1c2b216a201ed", "sha256": "8c3d579699e1b6d407848f8d373d7f8e3e518e79df710781d8d54cd70763bb6a"}, "downloads": -1, "filename": "DHParser-0.8.6.tar.gz", "has_sig": false, "md5_digest": "dd9ece522463079ab9d1c2b216a201ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3211816, "upload_time": "2019-03-03T10:08:14", "upload_time_iso_8601": "2019-03-03T10:08:14.394954Z", "url": "https://files.pythonhosted.org/packages/dc/92/9fbc7f8d8f0e0736ddf68649342eb7d7dbb60ba27861d91e675f6ffefdb3/DHParser-0.8.6.tar.gz", "yanked": false}], "0.8.7": [{"comment_text": "", "digests": {"md5": "076961f26a8ec636357e1ee9f1ec9223", "sha256": "eb19f51f18cae58bb2b057d63da05ec4b8d5f6ba0a2457f190195cf236869fbe"}, "downloads": -1, "filename": "DHParser-0.8.7.tar.gz", "has_sig": false, "md5_digest": "076961f26a8ec636357e1ee9f1ec9223", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 456904, "upload_time": "2019-03-03T21:13:26", "upload_time_iso_8601": "2019-03-03T21:13:26.069290Z", "url": "https://files.pythonhosted.org/packages/3d/f8/aad6d13b96f5712e8630783b5a4ae4696db63e769d4cce0996a6e1a445cd/DHParser-0.8.7.tar.gz", "yanked": false}], "0.8.8": [{"comment_text": "", "digests": {"md5": "bce9777df26cc58cc2c05d7e66a9ddbe", "sha256": "a4d80944a375031c146a951a7c01f4d6a94a93c0ee4b22f5eb212ddd27e4d9bf"}, "downloads": -1, "filename": "DHParser-0.8.8.tar.gz", "has_sig": false, "md5_digest": "bce9777df26cc58cc2c05d7e66a9ddbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 456827, "upload_time": "2019-03-04T06:07:39", "upload_time_iso_8601": "2019-03-04T06:07:39.639517Z", "url": "https://files.pythonhosted.org/packages/d5/c5/32b9d0c1922e5f1240dc5e8172e4a962178b2be7da3f5bf67d16b46ea088/DHParser-0.8.8.tar.gz", "yanked": false}], "0.8.9": [{"comment_text": "", "digests": {"md5": "b4082109e237081fb7291831708f84e5", "sha256": "e6093e1a5f8d1a241a81780d9e700f6c8335c01200f018ec132e547f4e292891"}, "downloads": -1, "filename": "DHParser-0.8.9.tar.gz", "has_sig": false, "md5_digest": "b4082109e237081fb7291831708f84e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 587243, "upload_time": "2019-04-07T06:28:16", "upload_time_iso_8601": "2019-04-07T06:28:16.308563Z", "url": "https://files.pythonhosted.org/packages/8e/ee/308f4e241b4571a3068d018f2dca85bbf06af1c059960edc665909282f32/DHParser-0.8.9.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "005b3da83a12b6deb935ab8974005e16", "sha256": "bcfb72c37613e78bbe6ae2f71ca4f3eb28392bdcae8b12f20e17d345c31cd5ab"}, "downloads": -1, "filename": "DHParser-0.9.0.tar.gz", "has_sig": false, "md5_digest": "005b3da83a12b6deb935ab8974005e16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 560926, "upload_time": "2019-10-20T06:16:39", "upload_time_iso_8601": "2019-10-20T06:16:39.434590Z", "url": "https://files.pythonhosted.org/packages/64/d2/99afafc61dcb10c196f301bd2722cbc59e9ffe2e82d8e20bdb114b5d3d00/DHParser-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "005b3da83a12b6deb935ab8974005e16", "sha256": "bcfb72c37613e78bbe6ae2f71ca4f3eb28392bdcae8b12f20e17d345c31cd5ab"}, "downloads": -1, "filename": "DHParser-0.9.0.tar.gz", "has_sig": false, "md5_digest": "005b3da83a12b6deb935ab8974005e16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 560926, "upload_time": "2019-10-20T06:16:39", "upload_time_iso_8601": "2019-10-20T06:16:39.434590Z", "url": "https://files.pythonhosted.org/packages/64/d2/99afafc61dcb10c196f301bd2722cbc59e9ffe2e82d8e20bdb114b5d3d00/DHParser-0.9.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:39 2020"}