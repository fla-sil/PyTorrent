{"info": {"author": "Jonathan Schaeffer", "author_email": "jonathan.schaeffer@univ-grenoble-alpes.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Method /auth for EIDA authentication\n\nThis projects is the implementation of the `/auth` method as described in EIDA.\n\nInput : a signed token (validity will be checked by the program)\n\nOutput : a login and password in the `login:password` form\n\nThis login and password is valid for a certain amount of time (24h typically)\n\n## Playing around\n\n``` shell\npip install gunicorn httpie\ngunicorn --reload -w 1 eidaws_auth:auth\n```\nThen, to send a post request :\n\n``` shell\nhttp localhost:8000/version\nhttp POST localhost:8000 < token.asc\n```\n## Running tests\n\n``` shell\npip install -e .\npytest\n```\n\n\n## Configuration\n\nThe conifguration is set in the `eidawsauth/config.py` file.\n\nThere are 4 classes :\n- `Config` : the root class with some defaults\n- `Production` : the configuration suitable for production\n- `Test` : the configuration suitable for pytest\n- `Dev` : the configuration for the developpment environment\n\nYou can choose the configuration class by setting up the `RUNMODE` environment variable. Default value is DEVELOPMENT\n\n``` shell\nRUNMODE=PRODUCTION gunicorn -w 4 eidaws_auth:aut\n```\n\n## Database initialisation\n\n### User and minimum privileges\n\n``` sql\ngrant connect on database \"resifAuth\" to eidawsauth;\ngrant connect on database \"resifInv-Prod\" to eidawsauth;\n\\c \"resifAuth\"\ngrant select,insert,update,delete on table users,credentials TO eidawsauth ;\ngrant select,update on sequence  users_user_index_seq TO eidawsauth ;\n\\c \"resifInv-Prod\"\ngrant select,insert,update,delete on table eida_temp_users TO eidawsauth;\ngrant select on table networks to eidawsauth;\ngrant select,update on sequence aut_user_user_id_seq to eidawsauth ;\n```\n\n### Expected tables schema\n\n#### AUTHDB\nTable `users`:\nFrom the existing table, we have to add an `expires_at` column.\n\n``` sql\nalter table users add column if not exists expires_at timestamp default value null;\n```\n\nTable `credentials` :\nNo modification to the resifAuth schema\n\n#### PRIVILEDGEDB\nTable `aut_user`.\nNo modification to the resifInv-Prod schema.\n\n``` sql\n  Colonne   |  Type   | Collationnement | NULL-able |                Par d\u00e9faut                 | Stockage |\n------------+---------+-----------------+-----------+-------------------------------------------+----------+\n user_id    | integer |                 | not null  | nextval('aut_user_user_id_seq'::regclass) | plain    |\n network_id | bigint  |                 |           | 0                                         | plain    |\n network    | text    |                 | not null  |                                           | extended |\n start_year | integer |                 | not null  | 0                                         | plain    |\n end_year   | integer |                 | not null  | 0                                         | plain    |\n name       | text    |                 | not null  |                                           | extended |\nIndex :\n    \"aut_user_pkey\" PRIMARY KEY, btree (user_id)\n    \"uniq_aut_user\" UNIQUE CONSTRAINT, btree (network, start_year, end_year, name)\nContraintes de cl\u00e9s \u00e9trang\u00e8res :\n    \"aut_user_network_id_fkey\" FOREIGN KEY (network_id) REFERENCES networks(network_id) ON DELETE SET DEFAULT\n```\n\n\n# Explanations\n\nWhat does this program do ?\n\n## Steps\n\n0. Get all configurations and setup database connections\n1. Read the data from POST request\n   NOTE : We should put a size limit on the WSGI server\n2. Verify the token's signature using the geofon public key\n2. Parse the token's informations\n3. Compute a random login and password\n4. Register this in the resifAuth database, along with the `expires_at` value (24h)\n5. From the `member-of` field in the token :\n   - do the mapping from EPOS names to FDSN reference from the epos_fdsn table in the resifAuth database\n     the FDSN reference is the network name, startyear, endyear\n   - register the login along with the FDSN references and the expiration date in the resifInv-Prod database, table `access`\n6. Return the `login:password` to the client\n\n# Other methods\n\n## /version\n\nreturns the version number and environment string.\n\n## /cleanup\n\nRemove old users, credentials and privileges.\n\nIt's probably a good idea to protect this method at the webserver level.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/resif/ws-eidaauth", "keywords": "", "license": "GPL-3.0", "maintainer": "Jonathan Schaeffer", "maintainer_email": "jonathan.schaeffer@univ-grenoble-alpes.fr", "name": "eidawsauth", "package_url": "https://pypi.org/project/eidawsauth/", "platform": "", "project_url": "https://pypi.org/project/eidawsauth/", "project_urls": {"Homepage": "https://gitlab.com/resif/ws-eidaauth"}, "release_url": "https://pypi.org/project/eidawsauth/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "Implement /auth for EIDA", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Method /auth for EIDA authentication</h1>\n<p>This projects is the implementation of the <code>/auth</code> method as described in EIDA.</p>\n<p>Input : a signed token (validity will be checked by the program)</p>\n<p>Output : a login and password in the <code>login:password</code> form</p>\n<p>This login and password is valid for a certain amount of time (24h typically)</p>\n<h2>Playing around</h2>\n<pre>pip install gunicorn httpie\ngunicorn --reload -w <span class=\"m\">1</span> eidaws_auth:auth\n</pre>\n<p>Then, to send a post request :</p>\n<pre>http localhost:8000/version\nhttp POST localhost:8000 &lt; token.asc\n</pre>\n<h2>Running tests</h2>\n<pre>pip install -e .\npytest\n</pre>\n<h2>Configuration</h2>\n<p>The conifguration is set in the <code>eidawsauth/config.py</code> file.</p>\n<p>There are 4 classes :</p>\n<ul>\n<li><code>Config</code> : the root class with some defaults</li>\n<li><code>Production</code> : the configuration suitable for production</li>\n<li><code>Test</code> : the configuration suitable for pytest</li>\n<li><code>Dev</code> : the configuration for the developpment environment</li>\n</ul>\n<p>You can choose the configuration class by setting up the <code>RUNMODE</code> environment variable. Default value is DEVELOPMENT</p>\n<pre><span class=\"nv\">RUNMODE</span><span class=\"o\">=</span>PRODUCTION gunicorn -w <span class=\"m\">4</span> eidaws_auth:aut\n</pre>\n<h2>Database initialisation</h2>\n<h3>User and minimum privileges</h3>\n<pre><span class=\"k\">grant</span> <span class=\"k\">connect</span> <span class=\"k\">on</span> <span class=\"k\">database</span> <span class=\"ss\">\"resifAuth\"</span> <span class=\"k\">to</span> <span class=\"n\">eidawsauth</span><span class=\"p\">;</span>\n<span class=\"k\">grant</span> <span class=\"k\">connect</span> <span class=\"k\">on</span> <span class=\"k\">database</span> <span class=\"ss\">\"resifInv-Prod\"</span> <span class=\"k\">to</span> <span class=\"n\">eidawsauth</span><span class=\"p\">;</span>\n<span class=\"err\">\\</span><span class=\"k\">c</span> <span class=\"ss\">\"resifAuth\"</span>\n<span class=\"k\">grant</span> <span class=\"k\">select</span><span class=\"p\">,</span><span class=\"k\">insert</span><span class=\"p\">,</span><span class=\"k\">update</span><span class=\"p\">,</span><span class=\"k\">delete</span> <span class=\"k\">on</span> <span class=\"k\">table</span> <span class=\"n\">users</span><span class=\"p\">,</span><span class=\"n\">credentials</span> <span class=\"k\">TO</span> <span class=\"n\">eidawsauth</span> <span class=\"p\">;</span>\n<span class=\"k\">grant</span> <span class=\"k\">select</span><span class=\"p\">,</span><span class=\"k\">update</span> <span class=\"k\">on</span> <span class=\"n\">sequence</span>  <span class=\"n\">users_user_index_seq</span> <span class=\"k\">TO</span> <span class=\"n\">eidawsauth</span> <span class=\"p\">;</span>\n<span class=\"err\">\\</span><span class=\"k\">c</span> <span class=\"ss\">\"resifInv-Prod\"</span>\n<span class=\"k\">grant</span> <span class=\"k\">select</span><span class=\"p\">,</span><span class=\"k\">insert</span><span class=\"p\">,</span><span class=\"k\">update</span><span class=\"p\">,</span><span class=\"k\">delete</span> <span class=\"k\">on</span> <span class=\"k\">table</span> <span class=\"n\">eida_temp_users</span> <span class=\"k\">TO</span> <span class=\"n\">eidawsauth</span><span class=\"p\">;</span>\n<span class=\"k\">grant</span> <span class=\"k\">select</span> <span class=\"k\">on</span> <span class=\"k\">table</span> <span class=\"n\">networks</span> <span class=\"k\">to</span> <span class=\"n\">eidawsauth</span><span class=\"p\">;</span>\n<span class=\"k\">grant</span> <span class=\"k\">select</span><span class=\"p\">,</span><span class=\"k\">update</span> <span class=\"k\">on</span> <span class=\"n\">sequence</span> <span class=\"n\">aut_user_user_id_seq</span> <span class=\"k\">to</span> <span class=\"n\">eidawsauth</span> <span class=\"p\">;</span>\n</pre>\n<h3>Expected tables schema</h3>\n<h4>AUTHDB</h4>\n<p>Table <code>users</code>:\nFrom the existing table, we have to add an <code>expires_at</code> column.</p>\n<pre><span class=\"k\">alter</span> <span class=\"k\">table</span> <span class=\"n\">users</span> <span class=\"k\">add</span> <span class=\"k\">column</span> <span class=\"k\">if</span> <span class=\"k\">not</span> <span class=\"k\">exists</span> <span class=\"n\">expires_at</span> <span class=\"k\">timestamp</span> <span class=\"k\">default</span> <span class=\"n\">value</span> <span class=\"k\">null</span><span class=\"p\">;</span>\n</pre>\n<p>Table <code>credentials</code> :\nNo modification to the resifAuth schema</p>\n<h4>PRIVILEDGEDB</h4>\n<p>Table <code>aut_user</code>.\nNo modification to the resifInv-Prod schema.</p>\n<pre>  <span class=\"n\">Colonne</span>   <span class=\"o\">|</span>  <span class=\"k\">Type</span>   <span class=\"o\">|</span> <span class=\"n\">Collationnement</span> <span class=\"o\">|</span> <span class=\"k\">NULL</span><span class=\"o\">-</span><span class=\"n\">able</span> <span class=\"o\">|</span>                <span class=\"n\">Par</span> <span class=\"n\">d\u00e9faut</span>                 <span class=\"o\">|</span> <span class=\"n\">Stockage</span> <span class=\"o\">|</span>\n<span class=\"c1\">------------+---------+-----------------+-----------+-------------------------------------------+----------+</span>\n <span class=\"n\">user_id</span>    <span class=\"o\">|</span> <span class=\"nb\">integer</span> <span class=\"o\">|</span>                 <span class=\"o\">|</span> <span class=\"k\">not</span> <span class=\"k\">null</span>  <span class=\"o\">|</span> <span class=\"n\">nextval</span><span class=\"p\">(</span><span class=\"s1\">'aut_user_user_id_seq'</span><span class=\"p\">::</span><span class=\"n\">regclass</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">plain</span>    <span class=\"o\">|</span>\n <span class=\"n\">network_id</span> <span class=\"o\">|</span> <span class=\"nb\">bigint</span>  <span class=\"o\">|</span>                 <span class=\"o\">|</span>           <span class=\"o\">|</span> <span class=\"mi\">0</span>                                         <span class=\"o\">|</span> <span class=\"n\">plain</span>    <span class=\"o\">|</span>\n <span class=\"n\">network</span>    <span class=\"o\">|</span> <span class=\"nb\">text</span>    <span class=\"o\">|</span>                 <span class=\"o\">|</span> <span class=\"k\">not</span> <span class=\"k\">null</span>  <span class=\"o\">|</span>                                           <span class=\"o\">|</span> <span class=\"n\">extended</span> <span class=\"o\">|</span>\n <span class=\"n\">start_year</span> <span class=\"o\">|</span> <span class=\"nb\">integer</span> <span class=\"o\">|</span>                 <span class=\"o\">|</span> <span class=\"k\">not</span> <span class=\"k\">null</span>  <span class=\"o\">|</span> <span class=\"mi\">0</span>                                         <span class=\"o\">|</span> <span class=\"n\">plain</span>    <span class=\"o\">|</span>\n <span class=\"n\">end_year</span>   <span class=\"o\">|</span> <span class=\"nb\">integer</span> <span class=\"o\">|</span>                 <span class=\"o\">|</span> <span class=\"k\">not</span> <span class=\"k\">null</span>  <span class=\"o\">|</span> <span class=\"mi\">0</span>                                         <span class=\"o\">|</span> <span class=\"n\">plain</span>    <span class=\"o\">|</span>\n <span class=\"n\">name</span>       <span class=\"o\">|</span> <span class=\"nb\">text</span>    <span class=\"o\">|</span>                 <span class=\"o\">|</span> <span class=\"k\">not</span> <span class=\"k\">null</span>  <span class=\"o\">|</span>                                           <span class=\"o\">|</span> <span class=\"n\">extended</span> <span class=\"o\">|</span>\n<span class=\"k\">Index</span> <span class=\"p\">:</span>\n    <span class=\"ss\">\"aut_user_pkey\"</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span><span class=\"p\">,</span> <span class=\"n\">btree</span> <span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n    <span class=\"ss\">\"uniq_aut_user\"</span> <span class=\"k\">UNIQUE</span> <span class=\"k\">CONSTRAINT</span><span class=\"p\">,</span> <span class=\"n\">btree</span> <span class=\"p\">(</span><span class=\"n\">network</span><span class=\"p\">,</span> <span class=\"n\">start_year</span><span class=\"p\">,</span> <span class=\"n\">end_year</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"n\">Contraintes</span> <span class=\"n\">de</span> <span class=\"n\">cl\u00e9s</span> <span class=\"err\">\u00e9</span><span class=\"n\">trang\u00e8res</span> <span class=\"p\">:</span>\n    <span class=\"ss\">\"aut_user_network_id_fkey\"</span> <span class=\"k\">FOREIGN</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"n\">network_id</span><span class=\"p\">)</span> <span class=\"k\">REFERENCES</span> <span class=\"n\">networks</span><span class=\"p\">(</span><span class=\"n\">network_id</span><span class=\"p\">)</span> <span class=\"k\">ON</span> <span class=\"k\">DELETE</span> <span class=\"k\">SET</span> <span class=\"k\">DEFAULT</span>\n</pre>\n<h1>Explanations</h1>\n<p>What does this program do ?</p>\n<h2>Steps</h2>\n<ol>\n<li>Get all configurations and setup database connections</li>\n<li>Read the data from POST request\nNOTE : We should put a size limit on the WSGI server</li>\n<li>Verify the token's signature using the geofon public key</li>\n<li>Parse the token's informations</li>\n<li>Compute a random login and password</li>\n<li>Register this in the resifAuth database, along with the <code>expires_at</code> value (24h)</li>\n<li>From the <code>member-of</code> field in the token :\n<ul>\n<li>do the mapping from EPOS names to FDSN reference from the epos_fdsn table in the resifAuth database\nthe FDSN reference is the network name, startyear, endyear</li>\n<li>register the login along with the FDSN references and the expiration date in the resifInv-Prod database, table <code>access</code></li>\n</ul>\n</li>\n<li>Return the <code>login:password</code> to the client</li>\n</ol>\n<h1>Other methods</h1>\n<h2>/version</h2>\n<p>returns the version number and environment string.</p>\n<h2>/cleanup</h2>\n<p>Remove old users, credentials and privileges.</p>\n<p>It's probably a good idea to protect this method at the webserver level.</p>\n\n          </div>"}, "last_serial": 5540733, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "868156f2928f9986502071e9018ec340", "sha256": "95268167b071ffc0fd39363079fe47f0117422ba2e28aefcff443121b0d729fa"}, "downloads": -1, "filename": "eidawsauth-0.3.1.tar.gz", "has_sig": false, "md5_digest": "868156f2928f9986502071e9018ec340", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7542, "upload_time": "2019-07-16T13:57:14", "upload_time_iso_8601": "2019-07-16T13:57:14.247456Z", "url": "https://files.pythonhosted.org/packages/12/b5/9b7443d4a84c6b4acb1c44545519e8257048cdd9cfd690045273a7c96653/eidawsauth-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "868156f2928f9986502071e9018ec340", "sha256": "95268167b071ffc0fd39363079fe47f0117422ba2e28aefcff443121b0d729fa"}, "downloads": -1, "filename": "eidawsauth-0.3.1.tar.gz", "has_sig": false, "md5_digest": "868156f2928f9986502071e9018ec340", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7542, "upload_time": "2019-07-16T13:57:14", "upload_time_iso_8601": "2019-07-16T13:57:14.247456Z", "url": "https://files.pythonhosted.org/packages/12/b5/9b7443d4a84c6b4acb1c44545519e8257048cdd9cfd690045273a7c96653/eidawsauth-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:15 2020"}