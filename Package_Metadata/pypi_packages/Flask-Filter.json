{"info": {"author": "Exley McCormick", "author_email": "exleym@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Flask-Filter\nFiltering Extension for Flask / SQLAlchemy\n\n[![Build Status](https://travis-ci.org/exleym/Flask-Filter.svg?branch=master)](https://travis-ci.org/exleym/Flask-Filter)\n[![Coverage Status](https://coveralls.io/repos/github/exleym/Flask-Filter/badge.svg?branch=master)](https://coveralls.io/github/exleym/Flask-Filter?branch=master)\n[![PyPi][pypi-badge]][pypi]\n\nFlask-Filter is a simple [Flask](http://flask.pocoo.org/) extension for\nstandardizing behavior of REST API resource search endpoints. It is\ndesigned to integrate with the [Flask-SQLAlchemy](http://flask-sqlalchemy.pocoo.org/2.3/)\nextension and [Marshmallow](https://marshmallow.readthedocs.io/en/3.0/),\na popular serialization library. Check out our\n[GitHub Pages site](https://exleym.github.io/Flask-Filter/) for the\nfull documentation.\n\nOut-of-the-box, Flask-Filter provides search functionality on top-level\nobject fields via an array of filter objects provided in the JSON body\nof a POST request. For configuring filtering on derived or nested fields\nsee the \"Filtering on Nested Fields\" section of the documentation.\n\n# Installation\nFlask-Filter is available on [PyPi][pypi]. To use this library, we recommend you \ninstall it via pip:\n\n```bash\n(venv)$ pip install flask-filter\n```\n\n# Default Filters\nFlask-Filter supports searching resources based on an array of filters,\nJSON objects with the following structure:\n\n```json\n{\"field\": \"<field_name>\", \"op\": \"<operator>\", \"value\": \"<some_value>\"}\n```\n\nThe built-in filters support the following operators:\n\n| symbol   | operator                     | python filter class   |\n|----------|------------------------------|-----------------------|\n| <        | less-than                    | `LTFilter`            |\n| <=       | less-than or equal to        | `LTEFilter`           |\n| =        | equal to                     | `EqualsFilter`        |\n| >        | greater-than                 | `GTFilter`            |\n| >=       | greater-than or equal to     | `GTEFilter`           |\n| in       | in                           | `InFilter`            |\n| !=       | not equal to                 | `NotEqualsFilter`     |\n| like     | like                         | `LikeFilter`          |\n| contains | many-to-many associated      | `ContainsFilter`      |\n\nNote: Be careful with typing around comparator operators. This version\ndoes not provide rigorous type-checking, which could cause problems for\na user who submits a search like \"find Pets with name greater than\n'Fido'\"\n\nMany-to-many associations can be searched using the `contains` operator.\nFor a Dog object with a many-to-many relationship with \"favorite toys\" \ndefined as Dog.toys = [Toy(), Toy()], you can set the field to \"toys.name\",\nthe operator to \"contains\" and the value to \"Tennis Ball\". This will perform \na SQL \"any\" search on that field / value and return any Dog objects who like \ntennis balls.\n\n# Examples\nThis section demonstrates simplified use-cases for Flask-Filter. For\na complete example app (a Pet Store API), see the `/example` folder.\n\nNote: examples in this readme define simple `/search` endpoints that\nassume a working Flask app has already been initialized, and other\nrequired classes have been defined in a `pet_store` directory. To see\na full implementation, go to `/examples/pet_store`\n\n### Example 1: Manually implementing filters in a flask view\nUsing the `FilterSchema` class directly, you can deserialize an\narray of JSON filters into a list of `flask_filter.Filter` objects\nand directly apply the filters using `Filter.apply` to craft a\nSQLAlchemy query with a complex set of filters.\n\n```python\nfilter_schema = FilterSchema()\npet_schema = PetSchema()\n\n@app.route('/api/v1/pets/search', methods=['POST'])\ndef pet_search():\n    filters = filter_schema.load(request.json.get(\"filters\"), many=True)\n    query = Pet.query\n    for f in filters:\n        query = f.apply(query, Pet, PetSchema)\n    return jsonify(pet_schema.dump(query.all())), 200\n```\n\n### Example 2: Automatically filtering using the `query_with_filters` function\n\n```python\nfrom flask_filter import query_with_filters\npet_schema = PetSchema()\n\n@app.route('/api/v1/pets/search', methods=['POST']\ndef pet_search():\n    pets = query_with_filters(Pet, request.json.get(\"filters\"), PetSchema)\n    return jsonify(pet_schema.dump(pets)), 200\n```\n\n\n### Example 3: Initializing and using the Flask extension object\n\n```python\nfrom flask import Flask\n\nfrom pet_store import Pet, PetSchema  # Model defined as subclass of `db.Model`\nfrom pet_store.extensions import db, filtr  # SQLAlchemy and FlaskFilter objects\n\napp = Flask(__name__)\ndb.init_app(app)\nfiltr.init_app(app)\n\n\n@app.route('/api/v1/pets/search', methods=['POST']\ndef pet_search():\n    pets = filtr.search(Pet, request.json.get(\"filters\"), PetSchema)\n    return jsonify(pet_schema.dump(pets)), 200\n```\n\nor alternatively, if you pre-register the Model and Schema with the\n`FlaskFilter` object you do not need to pass the `Schema` directly to\nthe `search` method:\n\n```python\nfiltr.register_model(Dog, DogSchema)  # Register in the app factory\n```\n\nfollowed by the search execution (without an explicitly-defined schema):\n\n```python\npets = filtr.search(Pet, request.json.get(\"filters\"))\n```\n\n[pypi-badge]: https://badge.fury.io/py/Flask-Filter.svg\n[pypi]: https://pypi.org/project/Flask-Filter/\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/exleym/Flask-Filter", "keywords": "", "license": "Creative Commons Attribution-Noncommercial-Share Alike license", "maintainer": "", "maintainer_email": "", "name": "Flask-Filter", "package_url": "https://pypi.org/project/Flask-Filter/", "platform": "", "project_url": "https://pypi.org/project/Flask-Filter/", "project_urls": {"Homepage": "https://github.com/exleym/Flask-Filter"}, "release_url": "https://pypi.org/project/Flask-Filter/0.1.0.dev3/", "requires_dist": null, "requires_python": "", "summary": "A Flask extension for creating standard resource searches", "version": "0.1.0.dev3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Flask-Filter</h1>\n<p>Filtering Extension for Flask / SQLAlchemy</p>\n<p><a href=\"https://travis-ci.org/exleym/Flask-Filter\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/531d5cf5b27c27badc04d72993145483b692aa39/68747470733a2f2f7472617669732d63692e6f72672f65786c65796d2f466c61736b2d46696c7465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/exleym/Flask-Filter?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7b05126cb9e21dc9891791211f035e0c2ea2b49/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f65786c65796d2f466c61736b2d46696c7465722f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/Flask-Filter/\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d38aedcb0be8aae7c5343021619c2952f6c9e286/68747470733a2f2f62616467652e667572792e696f2f70792f466c61736b2d46696c7465722e737667\"></a></p>\n<p>Flask-Filter is a simple <a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a> extension for\nstandardizing behavior of REST API resource search endpoints. It is\ndesigned to integrate with the <a href=\"http://flask-sqlalchemy.pocoo.org/2.3/\" rel=\"nofollow\">Flask-SQLAlchemy</a>\nextension and <a href=\"https://marshmallow.readthedocs.io/en/3.0/\" rel=\"nofollow\">Marshmallow</a>,\na popular serialization library. Check out our\n<a href=\"https://exleym.github.io/Flask-Filter/\" rel=\"nofollow\">GitHub Pages site</a> for the\nfull documentation.</p>\n<p>Out-of-the-box, Flask-Filter provides search functionality on top-level\nobject fields via an array of filter objects provided in the JSON body\nof a POST request. For configuring filtering on derived or nested fields\nsee the \"Filtering on Nested Fields\" section of the documentation.</p>\n<h1>Installation</h1>\n<p>Flask-Filter is available on <a href=\"https://pypi.org/project/Flask-Filter/\" rel=\"nofollow\">PyPi</a>. To use this library, we recommend you\ninstall it via pip:</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span>$ pip install flask-filter\n</pre>\n<h1>Default Filters</h1>\n<p>Flask-Filter supports searching resources based on an array of filters,\nJSON objects with the following structure:</p>\n<pre><span class=\"p\">{</span><span class=\"nt\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;field_name&gt;\"</span><span class=\"p\">,</span> <span class=\"nt\">\"op\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;operator&gt;\"</span><span class=\"p\">,</span> <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;some_value&gt;\"</span><span class=\"p\">}</span>\n</pre>\n<p>The built-in filters support the following operators:</p>\n<table>\n<thead>\n<tr>\n<th>symbol</th>\n<th>operator</th>\n<th>python filter class</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;</td>\n<td>less-than</td>\n<td><code>LTFilter</code></td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>less-than or equal to</td>\n<td><code>LTEFilter</code></td>\n</tr>\n<tr>\n<td>=</td>\n<td>equal to</td>\n<td><code>EqualsFilter</code></td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>greater-than</td>\n<td><code>GTFilter</code></td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>greater-than or equal to</td>\n<td><code>GTEFilter</code></td>\n</tr>\n<tr>\n<td>in</td>\n<td>in</td>\n<td><code>InFilter</code></td>\n</tr>\n<tr>\n<td>!=</td>\n<td>not equal to</td>\n<td><code>NotEqualsFilter</code></td>\n</tr>\n<tr>\n<td>like</td>\n<td>like</td>\n<td><code>LikeFilter</code></td>\n</tr>\n<tr>\n<td>contains</td>\n<td>many-to-many associated</td>\n<td><code>ContainsFilter</code></td>\n</tr></tbody></table>\n<p>Note: Be careful with typing around comparator operators. This version\ndoes not provide rigorous type-checking, which could cause problems for\na user who submits a search like \"find Pets with name greater than\n'Fido'\"</p>\n<p>Many-to-many associations can be searched using the <code>contains</code> operator.\nFor a Dog object with a many-to-many relationship with \"favorite toys\"\ndefined as Dog.toys = [Toy(), Toy()], you can set the field to \"toys.name\",\nthe operator to \"contains\" and the value to \"Tennis Ball\". This will perform\na SQL \"any\" search on that field / value and return any Dog objects who like\ntennis balls.</p>\n<h1>Examples</h1>\n<p>This section demonstrates simplified use-cases for Flask-Filter. For\na complete example app (a Pet Store API), see the <code>/example</code> folder.</p>\n<p>Note: examples in this readme define simple <code>/search</code> endpoints that\nassume a working Flask app has already been initialized, and other\nrequired classes have been defined in a <code>pet_store</code> directory. To see\na full implementation, go to <code>/examples/pet_store</code></p>\n<h3>Example 1: Manually implementing filters in a flask view</h3>\n<p>Using the <code>FilterSchema</code> class directly, you can deserialize an\narray of JSON filters into a list of <code>flask_filter.Filter</code> objects\nand directly apply the filters using <code>Filter.apply</code> to craft a\nSQLAlchemy query with a complex set of filters.</p>\n<pre><span class=\"n\">filter_schema</span> <span class=\"o\">=</span> <span class=\"n\">FilterSchema</span><span class=\"p\">()</span>\n<span class=\"n\">pet_schema</span> <span class=\"o\">=</span> <span class=\"n\">PetSchema</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/api/v1/pets/search'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">pet_search</span><span class=\"p\">():</span>\n    <span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"n\">filter_schema</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"filters\"</span><span class=\"p\">),</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Pet</span><span class=\"o\">.</span><span class=\"n\">query</span>\n    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">filters</span><span class=\"p\">:</span>\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">Pet</span><span class=\"p\">,</span> <span class=\"n\">PetSchema</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"n\">pet_schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())),</span> <span class=\"mi\">200</span>\n</pre>\n<h3>Example 2: Automatically filtering using the <code>query_with_filters</code> function</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_filter</span> <span class=\"kn\">import</span> <span class=\"n\">query_with_filters</span>\n<span class=\"n\">pet_schema</span> <span class=\"o\">=</span> <span class=\"n\">PetSchema</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/api/v1/pets/search'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">]</span>\n<span class=\"k\">def</span> <span class=\"nf\">pet_search</span><span class=\"p\">():</span>\n    <span class=\"n\">pets</span> <span class=\"o\">=</span> <span class=\"n\">query_with_filters</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"filters\"</span><span class=\"p\">),</span> <span class=\"n\">PetSchema</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"n\">pet_schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">pets</span><span class=\"p\">)),</span> <span class=\"mi\">200</span>\n</pre>\n<h3>Example 3: Initializing and using the Flask extension object</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pet_store</span> <span class=\"kn\">import</span> <span class=\"n\">Pet</span><span class=\"p\">,</span> <span class=\"n\">PetSchema</span>  <span class=\"c1\"># Model defined as subclass of `db.Model`</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pet_store.extensions</span> <span class=\"kn\">import</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">filtr</span>  <span class=\"c1\"># SQLAlchemy and FlaskFilter objects</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n<span class=\"n\">filtr</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/api/v1/pets/search'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">]</span>\n<span class=\"k\">def</span> <span class=\"nf\">pet_search</span><span class=\"p\">():</span>\n    <span class=\"n\">pets</span> <span class=\"o\">=</span> <span class=\"n\">filtr</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"filters\"</span><span class=\"p\">),</span> <span class=\"n\">PetSchema</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"n\">pet_schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">pets</span><span class=\"p\">)),</span> <span class=\"mi\">200</span>\n</pre>\n<p>or alternatively, if you pre-register the Model and Schema with the\n<code>FlaskFilter</code> object you do not need to pass the <code>Schema</code> directly to\nthe <code>search</code> method:</p>\n<pre><span class=\"n\">filtr</span><span class=\"o\">.</span><span class=\"n\">register_model</span><span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">,</span> <span class=\"n\">DogSchema</span><span class=\"p\">)</span>  <span class=\"c1\"># Register in the app factory</span>\n</pre>\n<p>followed by the search execution (without an explicitly-defined schema):</p>\n<pre><span class=\"n\">pets</span> <span class=\"o\">=</span> <span class=\"n\">filtr</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"filters\"</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 7088340, "releases": {"0.1.0.dev1": [{"comment_text": "", "digests": {"md5": "96d27bfc82ca2a2b9e3207d00656c9bd", "sha256": "ddffca3eb542dcdafd9c7fa1122168cb5ad7d1e5ce10c06e9d32d33e8230c2a7"}, "downloads": -1, "filename": "Flask_Filter-0.1.0.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "96d27bfc82ca2a2b9e3207d00656c9bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7394, "upload_time": "2019-10-24T22:22:08", "upload_time_iso_8601": "2019-10-24T22:22:08.589785Z", "url": "https://files.pythonhosted.org/packages/8c/d9/74df8573c7b3182d63f3332499a687aee35c8dde49d94396d31295dd7945/Flask_Filter-0.1.0.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82fcca12c3dda29162d4471bb03f0e10", "sha256": "d468e4aaead10569db4c031a639c825d0e09e545ad3ed70ee32ce7c9a2727bb2"}, "downloads": -1, "filename": "Flask-Filter-0.1.0.dev1.tar.gz", "has_sig": false, "md5_digest": "82fcca12c3dda29162d4471bb03f0e10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5207, "upload_time": "2019-10-24T22:22:10", "upload_time_iso_8601": "2019-10-24T22:22:10.639659Z", "url": "https://files.pythonhosted.org/packages/18/f3/948791ddb1875972539a3e0d2a553cae7750ea849737432929047c8e532c/Flask-Filter-0.1.0.dev1.tar.gz", "yanked": false}], "0.1.0.dev2": [{"comment_text": "", "digests": {"md5": "fcb73e37b44f2aa84d6257bab24421f1", "sha256": "4217fb443353e9152edd6ebea05bd85935909cffc362bd6c585d93076f30ae33"}, "downloads": -1, "filename": "Flask_Filter-0.1.0.dev2-py3-none-any.whl", "has_sig": false, "md5_digest": "fcb73e37b44f2aa84d6257bab24421f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7407, "upload_time": "2019-10-24T23:38:06", "upload_time_iso_8601": "2019-10-24T23:38:06.013253Z", "url": "https://files.pythonhosted.org/packages/03/64/2f10b293f72841850372ffd4d544d47e387081aa31b568193ce34c48f8be/Flask_Filter-0.1.0.dev2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f477f1f73072a9fb85b095ff356356a", "sha256": "af13d7f09e0b6005eef134a000bf0afae75c103c0f3efc536d56d15024c9ad44"}, "downloads": -1, "filename": "Flask-Filter-0.1.0.dev2.tar.gz", "has_sig": false, "md5_digest": "0f477f1f73072a9fb85b095ff356356a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5262, "upload_time": "2019-10-24T23:38:07", "upload_time_iso_8601": "2019-10-24T23:38:07.187982Z", "url": "https://files.pythonhosted.org/packages/56/53/c2d03ca31a96c01b175c22333222319a6b948c191a0e72a1ec1af18ef22d/Flask-Filter-0.1.0.dev2.tar.gz", "yanked": false}], "0.1.0.dev3": [{"comment_text": "", "digests": {"md5": "75911eee6cf7f880b445aad13235af0a", "sha256": "df040e1a6bb6c840ac8230c0d3c6e937208445832b8ce00bfa41d2650b005e99"}, "downloads": -1, "filename": "Flask_Filter-0.1.0.dev3-py3-none-any.whl", "has_sig": false, "md5_digest": "75911eee6cf7f880b445aad13235af0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7951, "upload_time": "2020-04-23T22:41:52", "upload_time_iso_8601": "2020-04-23T22:41:52.602723Z", "url": "https://files.pythonhosted.org/packages/ff/18/ce306fa3e6d2942464ec1acbda5c99ef4b87267e186ec68edfc92c1490bd/Flask_Filter-0.1.0.dev3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f6fbd175f3d81ac19b308ca1c27f9e7", "sha256": "00e35b380ee3784795bc7c9e7d1c8d97cd22bafca29515cb0c6c89fea7fa2a4d"}, "downloads": -1, "filename": "Flask-Filter-0.1.0.dev3.tar.gz", "has_sig": false, "md5_digest": "7f6fbd175f3d81ac19b308ca1c27f9e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5908, "upload_time": "2020-04-23T22:41:54", "upload_time_iso_8601": "2020-04-23T22:41:54.401951Z", "url": "https://files.pythonhosted.org/packages/04/15/b1d905032d845cb9f6ceca809c4f62c46cb15a7e4802d54761cc5111e5d9/Flask-Filter-0.1.0.dev3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "75911eee6cf7f880b445aad13235af0a", "sha256": "df040e1a6bb6c840ac8230c0d3c6e937208445832b8ce00bfa41d2650b005e99"}, "downloads": -1, "filename": "Flask_Filter-0.1.0.dev3-py3-none-any.whl", "has_sig": false, "md5_digest": "75911eee6cf7f880b445aad13235af0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7951, "upload_time": "2020-04-23T22:41:52", "upload_time_iso_8601": "2020-04-23T22:41:52.602723Z", "url": "https://files.pythonhosted.org/packages/ff/18/ce306fa3e6d2942464ec1acbda5c99ef4b87267e186ec68edfc92c1490bd/Flask_Filter-0.1.0.dev3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f6fbd175f3d81ac19b308ca1c27f9e7", "sha256": "00e35b380ee3784795bc7c9e7d1c8d97cd22bafca29515cb0c6c89fea7fa2a4d"}, "downloads": -1, "filename": "Flask-Filter-0.1.0.dev3.tar.gz", "has_sig": false, "md5_digest": "7f6fbd175f3d81ac19b308ca1c27f9e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5908, "upload_time": "2020-04-23T22:41:54", "upload_time_iso_8601": "2020-04-23T22:41:54.401951Z", "url": "https://files.pythonhosted.org/packages/04/15/b1d905032d845cb9f6ceca809c4f62c46cb15a7e4802d54761cc5111e5d9/Flask-Filter-0.1.0.dev3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:52 2020"}