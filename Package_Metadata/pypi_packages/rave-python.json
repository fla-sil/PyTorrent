{"info": {"author": "Flutterwave", "author_email": "developers@flutterwavego.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Rave_Python\n\n## Introduction\nThis is a Python wrapper around the [API](https://flutterwavedevelopers.readme.io/v2.0/reference) for [Rave by Flutterwave](https://rave.flutterwave.com).\n\n#### Payment types implemented:\n* Card Payments\n* Bank Account Payments\n* Ghana Mobile Money Payments\n* Mpesa Payments\n* Rwanda Mobile Money Payments\n* Uganda Mobile Money Payments\n* Zambia Mobile Money Payments\n* Mobile Money Payments for Francophone countries\n* Subaccounts\n* Transfer\n* Subscription (Recurring Payments)\n* Bills payment\n* Payment Plan\n* USSD Payments (Still in Beta Mode)\n\n#### Other features include:\n* Preauthorization charges\n* Refunds\n* Transaction Verification\n* Transfer Recipients\n* Virtual Cards\n* Virtual Accounts\n\n## Installation\nTo install, run\n\n```sh\npip install rave_python\n```\n\nNote: This is currently under active development\n## Import Package\nThe base class for this package is 'Rave'. To use this class, add:\n\n```py\nfrom rave_python import Rave\n```\n\n## Initialization\n\n#### To instantiate in sandbox:\nTo use Rave, instantiate the Rave class with your public key. We recommend that you store your secret key in an environment variable named, ```RAVE_SECRET_KEY```. Instantiating your rave object is therefore as simple as:\n\n```py\nrave = Rave(\"YOUR_PUBLIC_KEY\")\n```\n\n####  To instantiate without environment variables (Sandbox):\nIf you choose not to store your secret key in an environment variable, we do provide a ```usingEnv``` flag which can be set to ```False```, but please be warned, do not use this package without environment variables in production\n\n```py\nrave = Rave(\"YOUR_PUBLIC_KEY\", \"YOUR_SECRET_KEY\", usingEnv = False)\n```\n\n\n#### To instantiate in production:\nTo initialize in production, simply set the ```production``` flag to ```True```. It is highly discouraged but if you choose to not use environment variables, you can do so in the same way mentioned above.\n\n```py\nrave = Rave(\"YOUR_PUBLIC_KEY\", production=True)\n```\n\n# Rave Objects\nThis is the documentation for all of the components of rave_python\n\n## ```rave.Card```\nThis is used to facilitate card transactions.\n\n**Functions included:**\n\n* ```.charge```\n\n* ```.validate```\n\n* ```.verify```\n\n* ```.getTypeOfArgsRequired```\n\n* ```.updatePayload```\n\n<br>\n\n### ```.charge(payload)```\nThis is called to start a card transaction. The payload should be a dictionary containing card information. It should have the parameters:\n\n* ```cardno```,\n\n* ```cvv```, \n\n* ```currency```, \n\n* ```country```, \n\n* ```expirymonth```, \n\n* ```expiryyear```, \n\n* ```amount```, \n\n* ```email```, \n\n* ```phonenumber```,\n\n* ```firstname```, \n\n* ```lastname```, \n\n* ```IP```\n\nOptionally, you can add a custom transaction reference using the ```txRef``` parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the [Misc library](https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py).\n\n\nA sample call is:\n\n```py\nres = rave.Card.charge(payload)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n {'validationRequired': True, 'suggestedAuth': u'PIN', 'flwRef': None, 'authUrl': None, 'error': False, 'txRef': 'MC-1538095398058'}\n ```\n\nThis call raises a ```CardChargeError``` if there was a problem processing your transaction. The ```CardChargeError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.CardChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\nA sample ``` e.err ``` contains:\n\n```py\n{'error': True, 'txRef': 'MC-1530897824739', 'flwRef': None, 'errMsg': 'Sorry, that card number is invalid, please check and try again'}\n```\n\n\n<br>\n\n### ```rave.Misc.updatePayload(authMethod, payload, arg)```\n\nDepending on the suggestedAuth from the charge call, you may need to update the payload with a pin or address. To know which type of authentication you would require, simply call ```rave.Card.getTypeOfArgsRequired(suggestedAuth)```. This returns either ```pin``` or ```address```. \n\nIn the case of ```pin```, you are required to call ```rave.Card.updatePayload(suggestedAuth, payload, pin=\"THE_CUSTOMER_PIN\")```. \n\nIn the case of ```address```, you are required to call ```rave.Card.updatePayload(suggestedAuth, payload, address={ THE_ADDRESS_DICTIONARY })```\n\nA typical address dictionary includes the following parameters:\n\n```billingzip```, \n\n```billingcity```,\n\n```billingaddress```, \n \n```billingstate```,\n \n```billingcountry```\n\n**Note:**\n```suggestedAuth``` is the suggestedAuth returned from the initial charge call and ```payload``` is the original payload\n\n<br>\n\n### ```.validate(txRef)```\n\nAfter a successful charge, most times you will be asked to verify with OTP. To check if this is required, check the ```validationRequired``` key in the ```res``` of the charge call.\n\nTo validate, you need to pass the ```flwRef``` from the ```res``` of the charge call as well as the OTP.\n\nA sample validate call is: \n\n```py\nres2 = rave.Card.validate(res[\"flwRef\"], \"12345\")\n```\n\n#### Returns\n\nThis call returns a dictionary containing the ```txRef```, ```flwRef``` among others if successful. \n\nThis call raises a ```TransactionValidationError``` if the OTP is not correct or there was a problem processing your request. \n\nTo handle this, write:\n\n```py\ntry:\n    # Your charge call\nexcept RaveExceptions.TransactionValidationError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\nA sample ``` e.err ``` contains:\n\n```py\n{'error': True, 'txRef': None, 'flwRef': 'FLW-MOCK-a7911408bd7f55f89f0211819d6fd370', 'errMsg': 'otp is required'}\n```\n\n<br>\n\n### ```.verify(txRef)```\n\nYou can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the ```txRef``` in the ```res``` parameter returned any of the calls (```charge``` or ```validate```). \n\nA sample verify call is:\n\n```py\nres = rave.Card.verify(data[\"txRef\"])\n```\n\n#### Returns\n\nThis call returns a dict with ```txRef```, ```flwRef``` and ```transactionComplete``` which indicates whether the transaction was completed successfully. \n\nSample\n```py\n{'flwRef': None, 'cardToken': u'flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k', 'chargedAmount': 100, 'amount': 100, 'transactionComplete': True, 'error': False, 'txRef': u'MC-1538095718251'}\n```\n\n#### Please note that after charging a card successfully on rave, if you wish to save the card for further charges, in your verify payment response you will find an object: \"cardtoken\": \"flw-t0-f6f915f53a094671d98560272572993e-m03k\".  This is the token you will use for card tokenization. Details are provided below.\n\nIf your call could not be completed successfully, a ```TransactionVerificationError``` is raised.\n\n<br>\n\n### ```.charge(payload_for_saved_card, chargeWithToken=True)```\nThis is called to start a card transaction with a card that has been saved. The payload should be a dictionary containing card information. It should have the parameters:\n\n* ```token```,\n\n* ```country```, \n\n* ```amount```, \n\n* ```email```, \n\n* ```firstname```, \n\n* ```lastname```, \n\n* ```IP```,\n\n* ```txRef```, \n\n* ```currency```\n\n#### NB: email must be the same as before the card was saved\nOptionally, you can add a custom transaction reference using the ```txRef``` parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the [Misc library](https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py).\n\nA sample call is:\n\n```py\nres = rave.Card.charge(payload_for_saved_card, chargeWithToken=True)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n ```py\n {'status': u'success', 'validationRequired': False, 'suggestedAuth': None, 'flwRef': u'FLW-M03K-cdb24d740fb18c242dd277fb1f74d399', 'authUrl': None, 'error': False, 'txRef': 'MC-7666-YU'}\n ```\n\n This call raises a ```CardChargeError``` if a wrong token or email is passed or if there was a problem processing your transaction. The ```CardChargeError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.CardChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\nThis call also raises an ```IncompletePaymentDetailsError``` if any of the required parameters are missing. The ```IncompletePaymentDetailsError``` contains information about which parameter was not included in the payload. You can handle this such as:\n\n```py\ntry:\n    #Your charge call\nexcept RaveExceptions.IncompletePaymentDetailsError as e:\n    print(e.err[\"errMsg\"])\n```\n\nOnce this is done, call ```rave.Card.verify``` passing in the ```txRef``` returned in the response to verify the payment. Sample response:\n\n```py\n{'flwRef': None, 'cardToken': u'flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k', 'chargedAmount': 1000, 'amount': 1000, 'transactionComplete': True, 'error': False, 'txRef': 'MC-7666-YU'}\n```\n\n```rave.Card.verify``` raises a ```TransactionVerificationError``` if an invalid ```txRef``` is supplied. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.CardChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n#### NB: when charging saved cards, you do not need to call rave.card.Validate()\n\n### Complete card charge flow\n\n```py\nfrom rave_python import Rave\nrave = Rave(\"YOUR_PUBLIC_KEY\", \"YOUR_SECRET_KEY\", usingEnv = False)\n\n# Payload with pin\npayload = {\n  \"cardno\": \"5438898014560229\",\n  \"cvv\": \"890\",\n  \"expirymonth\": \"09\",\n  \"expiryyear\": \"19\",\n  \"amount\": \"10\",\n  \"email\": \"user@gmail.com\",\n  \"phonenumber\": \"0902620185\",\n  \"firstname\": \"temi\",\n  \"lastname\": \"desola\",\n  \"IP\": \"355426087298442\",\n}\n\ntry:\n    res = rave.Card.charge(payload)\n\n    if res[\"suggestedAuth\"]:\n        arg = Misc.getTypeOfArgsRequired(res[\"suggestedAuth\"])\n\n        if arg == \"pin\":\n            Misc.updatePayload(res[\"suggestedAuth\"], payload, pin=\"3310\")\n        if arg == \"address\":\n            Misc.updatePayload(res[\"suggestedAuth\"], payload, address= {\"billingzip\": \"07205\", \"billingcity\": \"Hillside\", \"billingaddress\": \"470 Mundet PI\", \"billingstate\": \"NJ\", \"billingcountry\": \"US\"})\n        \n        res = rave.Card.charge(payload)\n\n    if res[\"validationRequired\"]:\n        rave.Card.validate(res[\"flwRef\"], \"\")\n\n    res = rave.Card.verify(res[\"txRef\"])\n    print(res[\"transactionComplete\"])\n\nexcept RaveExceptions.CardChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.TransactionValidationError as e:\n    print(e.err)\n    print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.TransactionVerificationError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"txRef\"])\n```\n\n<br><br>\n## ```rave.Account```\nThis is used to facilitate account transactions.\n\n**Functions included:**\n\n* ```.charge```\n\n* ```.validate```\n\n* ```.verify```\n\n<br>\n\n### ```.charge(payload)```\nThis is called to start an account transaction. The payload should be a dictionary containing card information. It should have the parameters:\n\n* ```accountbank```, \n\n* ```accountnumber```, \n\n* ```amount```, \n\n* ```email```, \n\n* ```phonenumber```, \n\n* ```IP```\n\nOptionally, you can add a custom transaction reference using the ```txRef``` parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the [Misc library](https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py).\n\n\nA sample call is:\n\n```py\nres = rave.Account.charge(payload)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n {'error': False, 'validationRequired': True, 'txRef': 'MC-1530899106006', 'flwRef': 'ACHG-1530899109682', 'authUrl': None}\n```\n\n This call raises an ```AccountChargeError``` if there was a problem processing your transaction. The ```AccountChargeError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.AccountChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\nA sample ``` e.err ``` contains:\n\n```py\n{'error': True, 'txRef': 'MC-1530897824739', 'flwRef': None, 'errMsg': 'Sorry, that account number is invalid, please check and try again'}\n```\n\n<br>\n\n### ```.validate(txRef)```\n\nAfter a successful charge, most times you will be asked to verify with OTP. To check if this is required, check the ```validationRequired``` key in the ```res``` of the charge call.\n\nIn the case that an ```authUrl``` is returned from your charge call, you may skip the validation step and simply pass your authUrl to the end-user. \n\n```py\nauthUrl = res['authUrl']\n```\n\nTo validate, you need to pass the ```flwRef``` from the ```res``` of the charge call as well as the OTP.\n\nA sample validate call is: \n\n```py\nres2 = rave.Account.validate(res[\"flwRef\"], \"12345\")\n```\n\n\n#### Returns\n\nThis call returns a dictionary containing the ```txRef```, ```flwRef``` among others if successful.\n\nThis call raises a ```TransactionValidationError``` if the OTP is not correct or there was a problem processing your request. \n\nTo handle this, write:\n\n```py\ntry:\n    # Your charge call\nexcept RaveExceptions.TransactionValidationError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\nA sample ``` e.err ``` contains:\n\n```py\n{'error': True, 'txRef': 'MC-1530899869968', 'flwRef': 'ACHG-1530899873118', 'errMsg': 'Pending OTP validation'}\n```\n\n\n\n<br>\n\n### ```.verify(txRef)```\n\nYou can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the ```txRef``` in the ```res``` parameter returned any of the calls (```charge``` or ```validate```). \n\nA sample verify call is:\n\n```py\nres = rave.Account.verify(data[\"txRef\"])\n```\n\n#### Returns\n\nThis call returns a dict with ```txRef```, ```flwRef``` and ```transactionComplete``` which indicates whether the transaction was completed successfully. \n\nSample\n\n```py\n{'status': u'success', 'vbvcode': u'N/A', 'chargedamount': 500, 'vbvmessage': u'N/A', 'error': False, 'flwRef': u'ACHG-1538093023787', 'currency': u'NGN', 'amount': 500, 'transactionComplete': True, 'acctmessage': u'Approved Or Completed Successfully', 'chargecode': u'00', 'txRef': u'MC-1538093008498'}\n```\n\nIf your call could not be completed successfully or if a wrong ```txRef``` is passed, a ```TransactionVerificationError``` is raised. You can handle that as such\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.TransactionVerificationError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n\n\n<br>\n\n### Complete account flow\n\n```py\nfrom rave_python import Rave, RaveExceptions, Misc\nrave = Rave(\"ENTER_YOUR_PUBLIC_KEY\", \"ENTER_YOUR_SECRET_KEY\", usingEnv = False)\n# account payload\npayload = {\n  \"accountbank\": \"044\",  # get the bank code from the bank list endpoint.\n  \"accountnumber\": \"0690000031\",\n  \"currency\": \"NGN\",\n  \"country\": \"NG\",\n  \"amount\": \"100\",\n  \"email\": \"test@test.com\",\n  \"phonenumber\": \"0902620185\",\n  \"IP\": \"355426087298442\",\n}\n\ntry:\n    res = rave.Account.charge(payload)\n    if res[\"authUrl\"]:\n        print(res[\"authUrl\"])\n\n    elif res[\"validationRequired\"]:\n        rave.Account.validate(res[\"flwRef\"], \"12345\")\n\n    res = rave.Account.verify(res[\"txRef\"])\n    print(res)\n\nexcept RaveExceptions.AccountChargeError as e:\n    print(e.err)\n    print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.TransactionValidationError as e:\n    print(e.err)\n    print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.TransactionVerificationError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"txRef\"])\n```\n<br><br>\n\n## ```rave.GhMobile```\nThis is used to facilitate Ghanaian mobile money transactions.\n\n**Functions included:**\n\n* ```.charge```\n\n\n* ```.verify```\n\n<br>\n\n### ```.charge(payload)```\nThis is called to start a Ghana mobile money transaction. The payload should be a dictionary containing account information. It should have the parameters:\n\n* ```amount```,\n\n* ```email```, \n\n* ```phonenumber```,\n\n* ```network```,\n\n* ```IP```,\n\n* ```redirect_url```\n\nOptionally, you can add a custom transaction reference using the ```txRef``` parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the [Misc library](https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py).\n\n\nA sample call is:\n\n```py\nres = rave.GhMobile.charge(payload)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'validationRequired': True, 'txRef': 'MC-1530910216380', 'flwRef': 'N/A'}\n```\n\n This call raises a ```TransactionChargeError``` if there was a problem processing your transaction. The ```TransactionChargeError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.TransactionChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n\n```\n\nA sample ``` e.err ``` contains:\n\n```py\n{'error': True, 'txRef': 'MC-1530911537060', 'flwRef': None, 'errMsg': None}\n```\n\n\n<br>\n\n### ```.verify(txRef)```\n\nYou can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the ```txRef``` in the ```res``` parameter returned any of the calls (```charge``` or ```validate```). \n\nA sample verify call is:\n\n```py\nres = rave.GhMobile.verify(data[\"txRef\"])\n```\n\n#### Returns\n\nThis call returns a dict with ```txRef```, ```flwRef``` and ```transactionComplete``` which indicates whether the transaction was completed successfully. \n\nIf your call could not be completed successfully, a ```TransactionVerificationError``` is raised.\n\n<br>\n\n### Complete GhMobile charge flow\n\n```py\nfrom rave_python import Rave, RaveExceptions, Misc\nrave = Rave(\"ENTER_YOUR_PUBLIC_KEY\", \"ENTER_YOUR_SECRET_KEY\", usingEnv = False)\n\n# mobile payload\npayload = {\n  \"amount\": \"50\",\n  \"email\": \"\",\n  \"phonenumber\": \"054709929220\",\n  \"network\": \"MTN\",\n  \"redirect_url\": \"https://rave-webhook.herokuapp.com/receivepayment\",\n  \"IP\":\"\"\n}\n\ntry:\n  res = rave.GhMobile.charge(payload)\n  res = rave.GhMobile.verify(res[\"txRef\"])\n  print(res)\n\nexcept RaveExceptions.TransactionChargeError as e:\n  print(e.err)\n  print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.TransactionVerificationError as e:\n  print(e.err[\"errMsg\"])\n  print(e.err[\"txRef\"])\n```\n\n<br><br>\n\n## ```rave.Mpesa```\nThis is used to facilitate Mpesa transactions.\n\n**Functions included:**\n\n* ```.charge```\n\n\n* ```.verify```\n\n<br>\n\n### ```.charge(payload)```\nThis is called to start an Mpesa transaction. The payload should be a dictionary containing account information. It should have the parameters:\n\n* ```account```, \n\n* ```email```, \n\n* ```phonenumber```, \n\n* ```IP```\n\nOptionally, you can add a custom transaction reference using the ```txRef``` parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the [Misc library](https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py).\n\n\nA sample call is:\n\n```py\nres = rave.Mpesa.charge(payload)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'validationRequired': True, 'txRef': 'MC-1530910216380', 'flwRef': 'N/A'}\n```\n\n This call raises a ```TransactionChargeError``` if there was a problem processing your transaction. The ```TransactionChargeError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.TransactionChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\nA sample ``` e.err ``` contains:\n\n```py\n{'error': True, 'txRef': 'MC-1530910109929', 'flwRef': None, 'errMsg': 'email is required'}\n```\n\n\n<br>\n\n### ```.verify(txRef)```\n\nYou can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the ```txRef``` in the ```res``` parameter returned any of the calls (```charge``` or ```validate```). \n\nA sample verify call is:\n\n```py\nres = rave.Mpesa.verify(data[\"txRef\"])\n```\n\n#### Returns\n\nThis call returns a dict with ```txRef```, ```flwRef``` and ```transactionComplete``` which indicates whether the transaction was completed successfully. \n\nIf your call could not be completed successfully, a ```TransactionVerificationError``` is raised.\n\n<br>\n\n### Complete Mpesa charge flow\n\n```py\nfrom rave_python import Rave, RaveExceptions, Misc\nrave = Rave(\"ENTER_YOUR_PUBLIC_KEY\", \"ENTER_YOUR_SECRET_KEY\", usingEnv = False)\n\n# mobile payload\npayload = {\n    \"amount\": \"100\",\n    \"phonenumber\": \"0926420185\",\n    \"email\": \"user@exampe.com\",\n    \"IP\": \"40.14.290\",\n    \"narration\": \"funds payment\",\n}\n\ntry:\n    res = rave.Mpesa.charge(payload)\n    res = rave.Mpesa.verify(res[\"txRef\"])\n    print(res)\n\nexcept RaveExceptions.TransactionChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.TransactionVerificationError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"txRef\"])\n```\n\n<br><br>\n\n## ```rave.UGMobile```\nThis is used to facilitate Uganda mobile money transactions.\n\n**Functions included:**\n\n* ```.charge```\n\n\n* ```.verify```\n\n<br>\n\n### ```.charge(payload)```\nThis is called to start a Ugandan mobile money transaction. The payload should be a dictionary containing account information. It should have the parameters:\n\n* ```amount```,\n\n* ```email```, \n\n* ```phonenumber```,\n\n* ```IP```,\n\n* ```redirect_url```\n\nOptionally, you can add a custom transaction reference using the ```txRef``` parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the [Misc library](https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py).\n\n\nA sample call is:\n\n```py\nres = rave.UGMobile.charge(payload)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'status': 'success', 'validationRequired': True, 'txRef': 'MC-1544013787279', 'flwRef': 'flwm3s4m0c1544013788481'}\n```\n\n This call raises a ```TransactionChargeError``` if there was a problem processing your transaction. The ```TransactionChargeError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.TransactionChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\nA sample ``` e.err ``` contains:\n\n```py\n{'error': True, 'txRef': 'MC-1530911537060', 'flwRef': None, 'errMsg': None}\n```\n\n\n<br>\n\n### ```.verify(txRef)```\n\nYou can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the ```txRef``` in the ```res``` parameter returned any of the calls (```charge``` or ```validate```). \n\nA sample verify call is:\n\n```py\nres = rave.UGMobile.verify(data[\"txRef\"])\n```\n\n#### Returns\n\nThis call returns a dict with ```txRef```, ```flwRef``` and ```transactionComplete``` which indicates whether the transaction was completed successfully. \n\nIf your call could not be completed successfully, a ```TransactionVerificationError``` is raised.\n\n<br>\n\n### Complete UGMobile charge flow\n\n```py\nfrom rave_python import Rave, RaveExceptions, Misc\nrave = Rave(\"ENTER_YOUR_PUBLIC_KEY\", \"ENTER_YOUR_SECRET_KEY\", usingEnv = False)\n\n# mobile payload\npayload = {\n  \"amount\": \"50\",\n  \"email\": \"\",\n  \"phonenumber\": \"xxxxxxxx\",\n  \"redirect_url\": \"https://rave-webhook.herokuapp.com/receivepayment\",\n  \"IP\":\"\"\n}\n\ntry:\n  res = rave.UGMobile.charge(payload)\n  res = rave.UGMobile.verify(res[\"txRef\"])\n  print(res)\n\nexcept RaveExceptions.TransactionChargeError as e:\n  print(e.err)\n  print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.TransactionVerificationError as e:\n  print(e.err[\"errMsg\"])\n  print(e.err[\"txRef\"])\n```\n\n<br><br>\n\n## ```rave.ZBMobile```\nThis is used to facilitate Zambian mobile money transactions.\n\n**Functions included:**\n\n* ```.charge```\n\n\n* ```.verify```\n\n<br>\n\n### ```.charge(payload)```\nThis is called to start a Zambian mobile money transaction. The payload should be a dictionary containing account information. It should have the parameters:\n\n* ```amount```,\n\n* ```email```, \n\n* ```phonenumber```,\n\n* ```IP```,\n\n* ```redirect_url```\n\nOptionally, you can add a custom transaction reference using the ```txRef``` parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the [Misc library](https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py).\n\n\nA sample call is:\n\n```py\nres = rave.ZBMobile.charge(payload)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'status': 'success', 'validationRequired': True, 'txRef': 'MC-1544013787279', 'flwRef': 'flwm3s4m0c1544013788481'}\n```\n\n This call raises a ```TransactionChargeError``` if there was a problem processing your transaction. The ```TransactionChargeError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.TransactionChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\nA sample ``` e.err ``` contains:\n\n```py\n{'error': True, 'txRef': 'MC-1530911537060', 'flwRef': None, 'errMsg': None}\n```\n\n\n<br>\n\n### ```.verify(txRef)```\n\nYou can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the ```txRef``` in the ```res``` parameter returned any of the calls (```charge``` or ```validate```). \n\nA sample verify call is:\n\n```py\nres = rave.ZBMobile.verify(data[\"txRef\"])\n```\n\n#### Returns\n\nThis call returns a dict with ```txRef```, ```flwRef``` and ```transactionComplete``` which indicates whether the transaction was completed successfully. \n\nIf your call could not be completed successfully, a ```TransactionVerificationError``` is raised.\n\n<br>\n\n### Complete ZBMobile charge flow\n\n```py\nfrom rave_python import Rave, RaveExceptions, Misc\nrave = Rave(\"ENTER_YOUR_PUBLIC_KEY\", \"ENTER_YOUR_SECRET_KEY\", usingEnv = False)\n\n# mobile payload\npayload = {\n  \"amount\": \"50\",\n  \"email\": \"\",\n  \"phonenumber\": \"xxxxxxxx\",\n  \"redirect_url\": \"https://rave-webhook.herokuapp.com/receivepayment\",\n  \"IP\":\"\"\n}\n\ntry:\n  res = rave.ZBMobile.charge(payload)\n  res = rave.ZBMobile.verify(res[\"txRef\"])\n  print(res)\n\nexcept RaveExceptions.TransactionChargeError as e:\n  print(e.err)\n  print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.TransactionVerificationError as e:\n  print(e.err[\"errMsg\"])\n  print(e.err[\"txRef\"])\n```\n\n<br><br>\n\n## ```rave.Francophone```\nThis is used to facilitate mobile money transactions in Ivory Coast, Senegal and Mali.\n\n**Functions included:**\n\n* ```.charge```\n\n\n* ```.verify```\n\n<br>\n\n### ```.charge(payload)```\nThis is called to start a francophone mobile money transaction. The payload should be a dictionary containing account information. It should have the parameters:\n\n* ```amount```,\n\n* ```email```, \n\n* ```phonenumber```,\n\n* ```IP```,\n\n* ```redirect_url```\n\nOptionally, you can add a custom transaction reference using the ```txRef``` parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the [Misc library](https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py).\n\n\nA sample call is:\n\n```py\nres = rave.Francophone.charge(payload)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'validationRequired': True, 'txRef': 'MC-1566482674756', 'flwRef': None, 'suggestedAuth': None, 'redirectUrl': 'https://flutterwaveprodv2.com/flwcinetpay/paymentServlet?reference=FLW186321566482674310'}\n```\n \n The call returns redirect Url ```'redirectUrl':'https://redirecturl.com'``` for the authentication of the transaction. It raises a ```TransactionChargeError``` if there was a problem processing your transaction. The ```TransactionChargeError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.TransactionChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\nA sample ``` e.err ``` contains:\n\n```py\n{'error': True, 'txRef': 'MC-1530911537060', 'flwRef': None, 'errMsg': None}\n```\n\n\n<br>\n\n### ```.verify(txRef)```\n\nYou can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the ```txRef``` in the ```res``` parameter returned any of the calls (```charge``` or ```validate```). \n\nA sample verify call is:\n\n```py\nres = rave.Francophone.verify(data[\"txRef\"])\n```\n\n#### Returns\n\nThis call returns a dict with ```txRef```, ```flwRef``` and ```transactionComplete``` which indicates whether the transaction was completed successfully. \n\nIf your call could not be completed successfully, a ```TransactionVerificationError``` is raised.\n\n<br>\n\n### Complete Francophone mobile money charge flow\n\n```py\nfrom rave_python import Rave, RaveExceptions, Misc\nrave = Rave(\"ENTER_YOUR_PUBLIC_KEY\", \"ENTER_YOUR_SECRET_KEY\", usingEnv = False)\n\n# mobile payload\npayload = {\n  \"amount\": \"50\",\n  \"email\": \"\",\n  \"phonenumber\": \"054709929220\",\n  \"redirect_url\": \"https://rave-webhook.herokuapp.com/receivepayment\",\n  \"IP\":\"\"\n}\n\ntry:\n  res = rave.Francophone.charge(payload)\n  print(res)\n  res = rave.Francophone.verify(res[\"txRef\"])\n  print(res)\n\nexcept RaveExceptions.TransactionChargeError as e:\n  print(e.err)\n  print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.TransactionVerificationError as e:\n  print(e.err[\"errMsg\"])\n  print(e.err[\"txRef\"])\n```\n\n<br><br>\n\n## ```rave.Preauth```\nThis is used to facilitate preauthorized card transactions. This inherits the Card class so any task you can do on Card, you can do with preauth.\n\n**Functions included:**\n\n* ```.charge```\n\n* ```.capture```\n\n* ```.validate```\n\n* ```.verify```\n\n* ```.refund```\n\n* ```.void```\n\n\n<br>\n\n**\nIn order to ```preauthorize``` a card, you must have:\n    1. charged the card initially using ```rave.Card.charge(payload)```\n    2. saved the ```token``` returned to you for that card. A ```token``` looks like this ```flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k```\n**\n\n### ```.charge(cardDetails, chargeWithToken=True, hasFailed=False)```\n\nThis is used to preauthorize a specific amount to be paid by a customer.\n\n**Note:** > it takes the same parameters as Card charge. However, the cardDetails object differs. See below for an example\n\nOnce preauthorized successfully, you can then ```capture``` that ```held``` amount at a later time or date\n\nA sample charge call is:\n\n```py\npayload = {\n    \"token\":\"flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k\",\n    \"country\":\"NG\",\n    \"amount\":1000,\n    \"email\":\"user@gmail.com\",\n    \"firstname\":\"temi\",\n    \"lastname\":\"Oyekole\",\n    \"IP\":\"190.233.222.1\",\n    \"txRef\":\"MC-7666-YU\",\n    \"currency\":\"NGN\"\nrave.Preauth.charge(payload)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'status': 'success', 'validationRequired': False, 'txRef': 'MC-7666-YU', 'flwRef': 'FLW-PREAUTH-M03K-7d01799093ee2db9d8136cf042dc8c37', 'suggestedAuth': None, 'authUrl': None}\n```\n\n This call raises a ```TransactionChargeError``` if there was a problem processing your transaction. The ```TransactionChargeError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.TransactionChargeError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n\n<br>\n\n\n### ```.capture(flwRef)```\n\nThis is used to capture the funds held in the account. Similar to the validate call, it requires you to pass the ```flwRef``` of the transaction.\n\n>Please **NOTE** that the ```flwRef``` must be gotten from the response of the initial charge i.e after calling ```rave.Preauth.charge(payload)```\n\n\nA sample capture call is:\n\n```py\nrave.Preauth.capture(data[\"flwRef\"])\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'status': 'success', 'message': 'Capture complete', 'validationRequired': False, 'txRef': 'MC-7666-YU', 'flwRef': 'FLW-PREAUTH-M03K-0bce8fe1c3561e17e026ddfbbea37fdb'}\n```\n\n This call raises a ```PreauthCaptureError``` if there was a problem processing your transaction. The ```PreauthCaptureError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PreauthCaptureError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n<br>\n\n### ```.void(flwRef)```\n\nThis is used to void a preauth transaction. Similar to the validate call, it requires you to pass the ```flwRef```. \n\n>Please **NOTE** that the ```flwRef``` must be gotten from the response of the initial charge i.e after calling ```rave.Preauth.charge(payload)```\n\n\n\nA sample void call is:\n\n```py\nrave.Preauth.void(data[\"flwRef\"])\n```\n\n<br>\n\n### ```.refund(flwRef)```\n\nThis is used to refund a preauth transaction. Similar to the validate call, it requires you to pass the ```flwRef```. \n\n>Please **NOTE** that the ```flwRef``` must be gotten from the response of the initial charge i.e after calling ```rave.Preauth.charge(payload)```\n\n\n\nA sample void call is:\n\n```py\nrave.Preauth.refund(data[\"flwRef\"])\n```\n\n\n### ```.verify(txRef)```\n\n**See rave.Card.verify above**\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'transactionComplete': True, 'txRef': 'MC-7666-YU', 'flwRef': None, 'amount': 1000, 'chargedAmount': 1000, 'cardToken': 'flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k'}\n```\n\n This call raises a ```TransactionVerificationError``` if there was a problem processing your transaction. The ```TransactionVerificationError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.TransactionVerificationError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n<br>\n\n\n### Complete preauth charge flow\n\n```py\nfrom rave_python import Rave, Misc, RaveExceptions\nrave = Rave(\"ENTER_YOUR_PUBLIC_KEY\", \"ENTER_YOUR_SECRET_KEY\", usingEnv = False)\n\n# Payload with pin\npayload = {\n    \"token\":\"flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k\",\n    \"country\":\"NG\",\n    \"amount\":1000,\n    \"email\":\"user@gmail.com\",\n    \"firstname\":\"temi\",\n    \"lastname\":\"Oyekole\",\n    \"IP\":\"190.233.222.1\",\n    \"txRef\":\"MC-7666-YU\",\n    \"currency\":\"NGN\",\n}\n\ntry:\n    res = rave.Preauth.charge(payload)\n    res = rave.Preauth.capture(res[\"flwRef\"])\n    res = rave.Preauth.verify(res[\"txRef\"])\n    print(res)\n\nexcept RaveExceptions.TransactionChargeError as e:\n    print(e)\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.PreauthCaptureError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n\nexcept RaveExceptions.TransactionVerificationError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"txRef\"])\n```\n\n<br>\n\n## ```rave.SubAccount```\n\nThis is used to initiate and manage payouts\n\n\n**Functions included:**\n\n* ```.create```\n\n* ```.all```\n\n* ```.fetch```\n\n* ```.edit```\n\n* ```.cancel```\n\n<br>\n\n### ```.create(accountDetails)```\n\nThis allows you to create a subaccount plan. It requires a dict ```accountDetails``` containing ```account_bank```, ```account_number```, ```business_name```, ```business_email```, ```business_contact```, ```business_contact_mobile```, ```business_mobile```.\n \n>account_bank: This is the sub-accounts bank ISO code, use the [List of Banks for Transfer](https://developer.flutterwave.com/reference#list-of-banks-for-transfer) endpoint to retrieve a list of bank codes.\n\n>account_number: This is the customer's account number\n\n>business_name: This is the sub-account business name.\n\n>business_email: This is the sub-account business email.\n\n>business_contact: This is the contact person for the sub-account e.g. Richard Hendrix\n\n>business_contact_mobile: Business contact number.\n\n>business_mobile: Primary business contact number.\n\n>split_type: This can be set as   ```percentage``` or ```flat``` when set as percentage it means you want to take a percentage fee on all transactions, and vice versa for flat this means you want to take a flat fee on every transaction.\n\n>split_value: This can be a ```percentage``` value or ```flat``` value depending on what was set on ```split_type```\n\nMore information can be found [here](https://developer.flutterwave.com/v2.0/reference#create-subaccount)\n\n\nA sample create call is:\n\n```py\n res = rave.SubAccount.create({\n\t\"account_bank\": \"044\",\n\t\"account_number\": \"0690000031\",\n\t\"business_name\": \"Jake Stores\",\n\t\"business_email\": \"kwakj@services.com\",\n\t\"business_contact\": \"Amy Parkers\",\n\t\"business_contact_mobile\": \"09083772\",\n\t\"business_mobile\": \"0188883882\",\n    \"split_type\": \"flat\",\n    \"split_value\": 3000\n\t\"meta\": [{\"metaname\": \"MarketplaceID\", \"metavalue\": \"ggs-920900\"}]\n})\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'id': 114, 'data': {'id': 114, 'account_number': '0690000032', 'account_bank': '044', 'business_name': 'Jake Stores', 'fullname': 'Pastor Bright', 'date_created': '2018-10-09T10:43:02.000Z', 'meta': [{'metaname': 'MarketplaceID', 'metavalue': 'ggs-920900'}], 'split_ratio': 1, 'split_type': 'flat', 'split_value': 3000, 'subaccount_id': 'RS_8279B1518A139DD3238328747F322418', 'bank_name': 'ACCESS BANK NIGERIA'}}\n```\n\n This call raises a ```.SubaccountCreationError``` if there was a problem processing your transaction. The ```.SubaccountCreationError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions..SubaccountCreationError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.all()```\n\nThis allows you retrieve all subaccounts \n\nA sample all Subaccounts call is:\n\n```py\nres2 = rave.SubAccount.all()\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'SUBACCOUNTS', 'data': {'page_info': {'total': 3, 'current_page': 1, 'total_pages': 1}, 'subaccounts': [{'id': 114, 'account_number': '0690000032', 'account_bank': '044', 'business_name': 'Jake Stores', 'fullname': 'Pastor Bright', 'date_created': '2018-10-09T10:43:02.000Z', 'meta': [{'metaname': 'MarketplaceID', 'metavalue': 'ggs-920900'}], 'split_ratio': 1, 'split_type': 'flat', 'split_value': 3000, 'subaccount_id': 'RS_8279B1518A139DD3238328747F322418', 'bank_name': 'ACCESS BANK NIGERIA'}, {'id': 107, 'account_number': '0690000031', 'account_bank': '044', 'business_name': 'Jake Stores', 'fullname': 'Forrest Green', 'date_created': '2018-10-05T18:30:09.000Z', 'meta': [{'metaname': 'MarketplaceID', 'metavalue': 'ggs-920900'}], 'split_ratio': 1, 'split_type': 'flat', 'split_value': 100, 'subaccount_id': 'RS_41FFE616A1FA7EA56C85E57F593056F7', 'bank_name': 'ACCESS BANK NIGERIA'}]}}}\n```\n\n This call raises a ```PlanStatusError``` if there was a problem processing your transaction. The ```PlanStatusError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.fetch(subaccount_id)```\n\nThis allows you fetch a subaccount. You may or may not pass in a ```subaccount_id```. If you do not pass in a ```subaccount_id``` all subacocunts will be returned.\n\n>subaccount_id: This is the payment plan ID. It can be gotten from the response returned from creating a plan or from the Rave Dashboard\n\n\nA sample fetch Subaccount call is:\n\n```py\nres2 = rave.SubAccount.fetch(900)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'SUBACCOUNT', 'data': {'id': 106, 'account_number': '0690000035', 'account_bank': '044', 'business_name': 'JK Services', 'fullname': 'Peter Crouch', 'date_created': '2018-10-05T18:24:21.000Z', 'meta': [{'metaname': 'MarketplaceID', 'metavalue': 'ggs-920900'}], 'split_ratio': 1, 'split_type': 'flat', 'split_value': 100, 'subaccount_id': 'RS_0A6C260E1A70934DE6EF2F8CEE46BBB3', 'bank_name': 'ACCESS BANK NIGERIA'}}}\n```\n\n This call raises a ```PlanStatusError``` if there was a problem processing your transaction. The ```PlanStatusError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### Complete SubAccount flow\n\n```py\nfrom rave_python import Rave, Misc, RaveExceptions\nrave = Rave(\"YOUR_PUBLIC_KEY\", \"YOUR_PRIVATE_KEY\", usingEnv = False)\ntry:\n   \n    res = rave.SubAccount.create({\n\t\"account_bank\": \"044\",\n\t\"account_number\": \"0690000032\",\n\t\"business_name\": \"Jake Stores\",\n\t\"business_email\": \"jdhhd@services.com\",\n\t\"business_contact\": \"Amy Parkers\",\n\t\"business_contact_mobile\": \"09083772\",\n\t\"business_mobile\": \"0188883882\",\n    \"split_type\": \"flat\",\n    \"split_value\": 3000,\n\t\"meta\": [{\"metaname\": \"MarketplaceID\", \"metavalue\": \"ggs-920900\"}]\n    })\n    res = rave.SubAccount.fetch('RS_0A6C260E1A70934DE6EF2F8CEE46BBB3')\n    print(res)\n\nexcept RaveExceptions.IncompletePaymentDetailsError as e:\n    print(e)\n\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err)\n\nexcept RaveExceptions.ServerError as e:\n    print(e.err)\n```\n\n<br>\n\n## ```rave.Transfer```\n\nThis is used to initiate and manage payouts\n\n\n**Functions included:**\n\n* ```.initiate```\n\n* ```.bulk```\n\n* ```.fetch```\n\n* ```.all```\n\n* ```.getFee```\n\n* ```.getBalance```\n\n<br>\n\n### ```.initiate(transferDetails)```\n\nThis initiates a transfer to a customer's account. When a transfer is initiated, it comes with a status NEW this means the transfer has been queued for processing.\n\n**Please note that you must pass ```beneficiary_name``` as part of the initiate call. Else an error will be thrown.**\n>Also, if you are doing international transfers, you must pass a meta parameter as part of your payload as shown below:\n\n```py\n\"meta\": [\n    {\n      \"AccountNumber\": \"09182972BH\",\n      \"RoutingNumber\": \"0000000002993\",\n      \"SwiftCode\": \"ABJG190\",\n      \"BankName\": \"BANK OF AMERICA, N.A., SAN FRANCISCO, CA\",\n      \"BeneficiaryName\": \"Mark Cuban\",\n      \"BeneficiaryAddress\": \"San Francisco, 4 Newton\",\n      \"BeneficiaryCountry\": \"US\"\n    }\n]\n```\n\nA sample initiate call is:\n\n```py\nres = rave.Transfer.initiate({\n    \"account_bank\": \"044\",\n    \"account_number\": \"0690000044\",\n    \"amount\": 500,\n    \"narration\": \"New transfer\",\n    \"currency\": \"NGN\",\n    \"beneficiary_name\": \"Kwame Adew\"\n    })\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'id': 2671, 'data': {'id': 2671, 'account_number': '0690000044', 'bank_code': '044', 'fullname': 'Mercedes Daniel', 'date_created': '2018-10-09T08:37:20.000Z', 'currency': 'NGN', 'amount': 500, 'fee': 45, 'status': 'NEW', 'reference': 'MC-1539074239367', 'meta': None, 'narration': 'New transfer', 'complete_message': '', 'requires_approval': 0, 'is_approved': 1, 'bank_name': 'ACCESS BANK NIGERIA'}}\n```\n\n This call raises an ```IncompletePaymentDetailsError``` if there was a problem processing your transaction. The ```IncompletePaymentDetailsError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.IncompletePaymentDetailsError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.bulk(bulkDetails)```\n\nThis initiates a bulk transfer to the customers specified in the ```bulkDetails``` object. When a transfer is initiated, it comes with a status NEW this means the transfer has been queued for processing.\n\nA sample bulk call is:\n\n```py\nres2 = rave.Transfer.bulk({\n    \"title\":\"May Staff Salary\",\n    \"bulk_data\":[\n        {\n            \"Ban\":\"044\",\n            \"Account Number\": \"0690000032\",\n            \"Amount\":500,\n            \"Currency\":\"NGN\",\n            \"Narration\":\"Bulk transfer 1\",\n            \"reference\": \"mk-82973029\"\n        },\n        {\n            \"Bank\":\"044\",\n            \"Account Number\": \"0690000034\",\n            \"Amount\":500,\n            \"Currency\":\"NGN\",\n            \"Narration\":\"Bulk transfer 2\",\n            \"reference\": \"mk-283874750\"\n        }\n    ]\n})\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'status': 'success', 'message': 'BULK-TRANSFER-CREATED', 'id': 499, 'data': {'id': 499, 'date_created': '2018-10-09T09:13:54.000Z', 'approver': 'N/A'}}\n```\n\n This call raises an ```InitiateTransferError``` if there was a problem processing your transaction. The ```InitiateTransferError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.InitiateTransferError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.fetch(reference=None)```\n\nThis allows you retrieve a single transfer. You may or may not pass in a ```reference```. If you do not pass in a reference, all transfers that have been processed will be returned.\n\nA sample fetch call is:\n\n```py\nres2 = rave.Transfer.fetch(\"mk-82973029\")\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'QUERIED-TRANSFERS', 'data': {'page_info': {'total': 0, 'current_page': 0, 'total_pages': 0}, 'transfers': []}}}\n```\n\n This call raises a ```TransferFetchError``` if there was a problem processing your transaction. The ```TransferFetchError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.TransferFetchError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.all()```\n\nThis allows you retrieve all transfers. \n\nA sample all Transfers call is:\n\n```py\nres2 = rave.Transfer.all(\"\")\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'QUERIED-TRANSFERS', 'data': {'page_info': {'total': 19, 'current_page': 1, 'total_pages': 2}, 'transfers': [{'id': 2676, 'account_number': '0690000044', 'bank_code': '044', 'fullname': 'Mercedes Daniel', 'date_created': '2018-10-09T09:37:12.000Z', 'currency': 'NGN', 'debit_currency': None, 'amount': 500, 'fee': 45, 'status': 'PENDING', 'reference': 'MC-1539077832148', 'meta': None, 'narration': 'New transfer', 'approver': None, 'complete_message': '', 'requires_approval': 0, 'is_approved': 1, 'bank_name': 'ACCESS BANK NIGERIA'}, {'id': 2673, 'account_number': '0690000044', 'bank_code': '044', 'fullname': 'Mercedes Daniel', 'date_created': '2018-10-09T09:31:37.000Z', 'currency': 'NGN', 'debit_currency': None, 'amount': 500, 'fee': 45, 'status': 'FAILED', 'reference': 'MC-1539077498173', 'meta': None, 'narration': 'New transfer', 'approver': None, 'complete_message': 'DISBURSE FAILED: Insufficient funds', 'requires_approval': 0, 'is_approved': 1, 'bank_name': 'ACCESS BANK NIGERIA'}, {'id': 2672, 'account_number': '0690000034', 'bank_code': '044', 'fullname': 'Ade Bond', 'date_created': '2018-10-09T09:13:56.000Z', 'currency': 'NGN', 'debit_currency': None, 'amount': 500, 'fee': 45, 'status': 'FAILED', 'reference': None, 'meta': None, 'narration': 'Bulk transfer 2', 'approver': None, 'complete_message': 'DISBURSE FAILED: Insufficient funds', 'requires_approval': 0, 'is_approved': 1, 'bank_name': 'ACCESS BANK NIGERIA'}]}}}\n```\n\n This call raises a ```TransferFetchError``` if there was a problem processing your transaction. The ```TransferFetchError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.TransferFetchError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.getFee(currency)```\n\nThis allows you get transfer rates for all Rave supported currencies. You may or may not pass in a ```currency```. If you do not pass in a ```currency```, all Rave supported currencies transfer rates will be returned.\n\nA sample getFee call is:\n\n```py\nres2 = rave.Transfer.getFee(\"EUR\")\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'TRANSFER-FEES', 'data': [{'id': 6, 'fee_type': 'value', 'currency': 'EUR', 'fee': 35, 'createdAt': None, 'updatedAt': None, 'deletedAt': None, 'AccountId': 1}]}}\n```\n\n ### ```.getBalance(currency)```\n\nThis allows you get your balance in a specified. You may or may not pass in a ```currency```. If you do not pass in a ```currency```, your balance will be returned in the currency specified in your rave account\n\nA sample fetch call is:\n\n```py\nres2 = rave.Transfer.Balance(\"EUR\")\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'WALLET-BALANCE', 'data': {'Id': 27122, 'ShortName': 'EUR', 'WalletNumber': '3855000502677', 'AvailableBalance': 0, 'LedgerBalance': 0}}}\n```\n\n\n<br>\n\n### Complete transfer flow\n\n```py\nfrom rave_python import Rave, RaveExceptions\ntry:\n    rave = Rave(\"ENTER_YOUR_PUBLIC_KEY\", \"ENTER_YOUR_SECRET_KEY\", usingEnv = False)\n\n    res = rave.Transfer.initiate({\n    \"account_bank\": \"044\",\n    \"account_number\": \"0690000044\",\n    \"amount\": 500,\n    \"narration\": \"New transfer\",\n    \"currency\": \"NGN\",\n    \"beneficiary_name\": \"Kwame Adew\"\n    })\n\n    res2 = rave.Transfer.bulk({\n        \"title\": \"test\",\n        \"bulk_data\":[\n        ]\n    })\n    print(res)\n\n    balanceres = rave.Transfer.getBalance(\"NGN\")\n    print(balanceres)\n\nexcept RaveExceptions.IncompletePaymentDetailsError as e:\n    print(e)\n\nexcept RaveExceptions.InitiateTransferError as e:\n    print(e.err)\n\nexcept RaveExceptions.TransferFetchError as e:\n    print(e.err)\n\nexcept RaveExceptions.ServerError as e:\n    print(e.err)\n```\n\n<br>\n\n## ```rave.Subscriptions```\n\nThis is used to initiate and manage Subscriptions\n\n\n**Functions included:**\n\n* ```.all```\n\n* ```.fetch```\n\n* ```.cancel```\n\n* ```.activate```\n\n\n### ```.all()```\n\nThis allows you retrieve all subscriptions \n\nA sample all subscriptions call is:\n\n```py\nres2 = rave.Subscriptions.all()\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'SUBSCRIPTIONS-FETCHED', 'data': {'page_info': {'total': 0, 'current_page': 0, 'total_pages': 0}, 'plansubscriptions': []}}}\n```\n\n This call raises a ```PlanStatusError``` if there was a problem processing your transaction. The ```PlanStatusError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.fetch(subscription_id, subscription_email)```\n\nThis allows you fetch a subscription. You may or may not pass in a ```subscription_id``` or ```subscription_email```. If you do not pass in a ```subscription_id``` or ```subscription_email``` all subscriptions will be returned.\n\n>subscription_id: This is the subscription ID.\n\n>subscription_email: This is the subscription email.\n\n\nA sample fetch subscription call is:\n\n```py\nres2 = rave.Subscriptions.fetchSubscription(900)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'SUBSCRIPTIONS-FETCHED', 'data': {'page_info': {'total': 0, 'current_page': 0, 'total_pages': 0}, 'plansubscriptions': []}}}\n```\n\n This call raises a ```PlanStatusError``` if there was a problem processing your transaction. The ```PlanStatusError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.cancelSubscription(subscription_id)```\n\nThis allows you cancel a subscription.\n\n>subscription_id: This is the subscription ID. It can be gotten from the Rave Dashboard\n\n\nA sample cancel subscription call is:\n\n```py\nres2 = rave.Subscriptions.cancel(900)\n```\n\n This call raises a ```PlanStatusError``` if there was a problem processing your transaction. The ```PlanStatusError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n\n### ```.activate(subscription_id)```\n\nThis allows you activate a subscription.\n\n>subscription_id: This is the subscription ID. It can be gotten from the Rave Dashboard\n\n\nA sample activate subscription call is:\n\n```py\nres2 = rave.Subscriptions.activate(900)\n```\n\n This call raises a ```PlanStatusError``` if there was a problem processing your transaction. The ```PlanStatusError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### Complete Subscriptions flow\n\n```py\nfrom rave_python import Rave, Misc, RaveExceptions\nrave = Rave(\"YOUR_PUBLIC_KEY\", \"YOUR_PRIVATE_KEY\", usingEnv = False)\ntry:\n   \n    res = rave.Subscriptions.all()\n    res = rave.Subscriptions.fetch(880)\n    res = rave.Subscriptions.cancel(880)\n    print(res)\n\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err)\n\nexcept RaveExceptions.ServerError as e:\n    print(e.err)\n```\n\n<br>\n\n## ```rave.PaymentPlan```\n\nThis is used to initiate and manage payment plans\n\n\n**Functions included:**\n\n* ```.create```\n\n* ```.all```\n\n* ```.fetch```\n\n* ```.cancelPlan```\n\n* ```.edit```\n\n<br>\n\n### ```.create(planDetails)```\n\nThis allows a customer to create a payment plan. It requires a dict ```planDetails``` containing ```amount```, ```name```, ```interval```, ```duration```. \n>amount: this is the amount for the plan\n\n>name: This is what would appear on the subscription reminder email\n\n>interval: This are the charge intervals possible values are:\n```\ndaily;\nweekly;\nmonthly;\nyearly;\nquarterly;\nbi-anually;\nevery 2 days;\nevery 90 days;\nevery 5 weeks;\nevery 12 months;\nevery 6 years;\nevery x y (where x is a number and y is the period e.g. every 5 months)\n```\n\n>duration: This is the frequency, it is numeric, e.g. if set to 5 and intervals is set to monthly you would be charged 5 months, and then the subscription stops.\n\nMore information can be found [here](https://developer.flutterwave.com/v2.0/reference#create-payment-plan)\n\n\n**If duration is not passed, any subscribed customer will be charged indefinitely**\n\n\nA sample create call is:\n\n```py\n res = rave.PaymentPlan.create({\n    \"amount\": 1,\n    \"duration\": 5,\n    \"name\": \"Ultimate Play\",\n    \"interval\": \"5\"\n })\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'id': 890, 'data': {'id': 890, 'name': 'Ultimate Play', 'amount': 1, 'interval': 'dai', 'duration': 5, 'status': 'active', 'currency': 'NGN', 'plan_token': 'rpp_af8ea4d5d785d08f47d8', 'date_created': '2018-10-09T10:03:00.000Z'}}\n```\n\n This call raises an ```IncompletePaymentDetailsError``` if there was a problem processing your transaction. The ```IncompletePaymentDetailsError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.IncompletePaymentDetailsError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.all()```\n\nThis allows you retrieve all payment plans. \n\nA sample all plans call is:\n\n```py\nres2 = rave.Transfer.all()\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'QUERIED-PAYMENTPLANS', 'data': {'page_info': {'total': 12, 'current_page': 1, 'total_pages': 2}, 'paymentplans': [{'id': 890, 'name': 'Ultimate Play', 'amount': 1, 'interval': 'dai', 'duration': 5, 'status': 'active', 'currency': 'NGN', 'plan_token': 'rpp_af8ea4d5d785d08f47d8', 'date_created': '2018-10-09T10:03:00.000Z'}, {'id': 885, 'name': 'N/A', 'amount': 0, 'interval': 'daily', 'duration': 0, 'status': 'cancelled', 'currency': 'NGN', 'plan_token': 'rpp_19c8a7af7a06351fd78b', 'date_created': '2018-10-05T17:16:15.000Z'}]}}}\n```\n\n This call raises a ```PlanStatusError``` if there was a problem processing your transaction. The ```PlanStatusError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.fetch(plan_id, plan_name)```\n\nThis allows you fetch a payment plan. You may or may not pass in a ```plan_id``` or ```plan_name```. If you do not pass in a ```plan_id``` or ```plan_name```, all payment plans will be returned.\n\n>plan_id: This is the payment plan ID. It can be gotten from the response returned from creating a plan or from the Rave Dashboard\n\n>plan_name: This is the payment plan name. It can be gotten from the response returned from creating a plan or from the Rave Dashboard\n\nA sample fetch plan call is:\n\n```py\nres2 = rave.Transfer.fetch(900)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'QUERIED-PAYMENTPLANS', 'data': {'page_info': {'total': 1, 'current_page': 1, 'total_pages': 1}, 'paymentplans': [{'id': 890, 'name': 'Ultimate Play', 'amount': 1, 'interval': 'dai', 'duration': 5, 'status': 'active', 'currency': 'NGN', 'plan_token': 'rpp_af8ea4d5d785d08f47d8', 'date_created': '2018-10-09T10:03:00.000Z'}]}}}\n```\n\n This call raises a ```PlanStatusError``` if there was a problem processing your transaction. The ```PlanStatusError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.cancelPlan(plan_id)```\n\nThis allows you cancel a payment plan. It requires that you pass in an ```plan_id```.\n\n>plan_id: This is the payment plan ID. It can be gotten from the response returned from creating a plan or from the Rave Dashboard\n\nA sample cancelPlan call is:\n\n```py\nres2 = rave.Transfer.cancelPlan(900)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'PLAN-CANCELED', 'data': {'id': 890, 'name': 'Ultimate Play', 'uuid': 'rpp_af8ea4d5d785d08f47d8', 'status': 'cancelled', 'start': None, 'stop': None, 'initial_charge_amount': None, 'currency': 'NGN', 'amount': 1, 'duration': 5, 'interval': 'dai', 'createdAt': '2018-10-09T10:03:00.000Z', 'updatedAt': '2018-10-09T10:17:14.000Z', 'deletedAt': None, 'AccountId': 5949, 'paymentpageId': None}}}\n```\n\n This call raises a ```PlanStatusError``` if there was a problem processing your transaction. The ```PlanStatusError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n\n### ```.edit(plan_id, newData={})```\n\nThis allows you edit a payment plan. It requires that you pass in an ```plan_id```. If you do not pass in the ```newData``` dict containing the change you want to make to your plan, the plan stays the same.\n\n>plan_id: This is the payment plan ID. It can be gotten from the response returned from creating a plan or from the Rave Dashboard\n\n>newData: A ```dict``` that must contain one or both of: ```name```, ```status``` as properties. \n>```name``` specifies the new name for your payment plan.\n>```status``` : possible values are ```active``` and ```cancelled```\n\nA sample cancel plan call is:\n\n```py\nres = rave.PaymentPlan.editPlan(880, {\n        \"name\": \"Jack's Plan\",\n        \"status\": \"active\"\n})\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{'error': False, 'returnedData': {'status': 'success', 'message': 'PLAN-EDITED', 'data': {'id': 880, 'name': \"Jack's Plan\", 'uuid': 'rpp_237e94690d8e7089c07b', 'status': 'active', 'start': None, 'stop': None, 'initial_charge_amount': None, 'currency': 'NGN', 'amount': 1, 'duration': 5, 'interval': 'dai', 'createdAt': '2018-10-05T17:13:16.000Z', 'updatedAt': '2018-10-09T10:25:25.000Z', 'deletedAt': None, 'AccountId': 5949, 'paymentpageId': None}}}\n```\n\n This call raises a ```PlanStatusError``` if there was a problem processing your transaction. The ```PlanStatusError``` contains some information about your transaction. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.PlanStatusError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n<br>\n\n### Complete PaymentPlan flow\n\n```py\nfrom rave_python import Rave, Misc, RaveExceptions\nrave = Rave(\"YOUR_PUBLIC_KEY\", \"YOUR_PRIVATE_KEY\", usingEnv = False)\ntry:\n\n    res = rave.PaymentPlan.create({\n        \"amount\": 1,\n        \"duration\": 5,\n        \"name\": \"Ultimate Plan\",\n        \"interval\": \"dai\"\n    })\n    \n    res = rave.PaymentPlan.edit(880, {\n        \"name\": \"Jack's Plan\",\n        \"status\": \"active\"\n    })\n    print(res)\n\nexcept RaveExceptions.IncompletePaymentDetailsError as e:\n    print(e)\n\nexcept RaveExceptions.TransferFetchError as e:\n    print(e.err)\n\nexcept RaveExceptions.ServerError as e:\n    print(e.err)\n```\n\n<br>\n\n## ```rave.Ussd```\n\n>**NOTE:** This payment option is still in beta mode.\n\n<br>\n\n## ```rave.VirtualAccount```\n\nThis is used to create virtual account for transfers.\n\n\n**Functions included:**\n\n* ```.create```\n\n<br>\n\n### ```.create(accountDetails)```\n\nThis allows a customer to create a virtual card. It requires a dict ```vcardDetails``` containing ```email```, ```seckey```, ```is_permanant```, ```frequency```, ```duration``` and  ```narration```.\n\nA sample Create call is:\n\n```py\n res = rave.VirtualAccount.create({\n\t\"email\": \"user@example.com\",\n\t\"seckey\": \"FLWSECK-****************************-X\",\n\t\"is_permanent\": true\n})\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{\n    \"status\": \"success\",\n    \"message\": \"BANKTRANSFERS-ACCOUNTNUMBER-CREATED\",\n    \"data\": {\n        \"response_code\": \"02\",\n        \"response_message\": \"Transaction in progress\",\n        \"flw_reference\": \"FLW-89298329b9794587807aa775cda5db9f\",\n        \"accountnumber\": \"1357960669\",\n        \"accountstatus\": \"ACTIVE\",\n        \"frequency\": \"N/A\",\n        \"bankname\": \"Highstreet MFB\",\n        \"created_on\": \"2019-08-20 12:18:46\",\n        \"expiry_date\": \"N/A\",\n        \"note\": \"Please make a bank transfer to Raver\",\n        \"amount\": null\n    }\n}\n```\n\n This call raises an ```IncompleteAccountDetailsError``` if there was a problem creating your virtual account. The ```IncompleteCardDetailsError``` contains some information about your virtual account. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.IncompleteAccountDetailsError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n<br>\n\n## ```rave.VirtualCard```\n\nThis is used to create virtual cards and carry out other virtual card operations.\n\n\n**Functions included:**\n\n* ```.create```\n\n* ```.all```\n\n* ```.get```\n\n* ```.cancel```\n\n* ```.freeze```\n\n* ```.unfreeze```\n\n* ```.fund```\n\n* ```.withdraw```\n<br>\n\n### ```.create(vcardDetails)```\n\nThis allows a customer to create a virtual card. It requires a dict ```vcardDetails``` containing ```currency```, ```amount```, ```billing name```, ```billing address```, ```billing city```, ```billing state```, ```billing postal code```, ```billing country```\n\nA sample Create call is:\n\n```py\n res = rave.VirtualCard.create({\n    \"currency\": \"NGN\",\n    \"amount\": \"100\",\n    \"billing_name\": \"Corvus james\",\n    \"billing_address\": \"8, Providence Street\",\n    \"billing_city\": \"Lekki\",\n    \"billing_state\": \"Lagos\",\n    \"billing_postal_code\": \"100001\",\n    \"billing_country\": \"NG\",\n })\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{\"status\": \"success\", \"message\": \"Card created successfully\", \"data\": {\"id\": \"c3ff3ac4-784b-4d07-9fc7-b5b9cde75752\", \"AccountId\": 507, \"amount\": \"100.00\", \"currency\": \"NGN\", \"card_hash\": \"c3ff3ac4-784b-4d07-9fc7-b5b9cde75752\", \"cardpan\": \"5563389915692128\", \"maskedpan\": \"556338*******2128\", \"city\": \"Lekki\", \"state\": \"Lagos\", \"address_1\": \"8, Providence Street\", \"address_2\": null, \"zip_code\": \"100001\", \"cvv\": \"408\", \"expiration\": \"2022-01\", \"send_to\": null, \"bin_check_name\": null, \"card_type\": \"mastercard\", \"name_on_card\": \"Corvus james\", \"date_created\": \"2019-01-30T16:45:45.550663+00:00\", \"is_active\": true}}\n```\n\n This call raises an ```IncompleteCardDetailsError``` if there was a problem creating your card. The ```IncompleteCardDetailsError``` contains some information about the error encountered in creating your card. You can handle this as such:\n\n```py\ntry: \n    #Your charge call\nexcept RaveExceptions.IncompleteCardDetailsError as e:\n    print(e.err[\"errMsg\"])\n    print(e.err[\"flwRef\"])\n```\n\n### ```.all()```\n\nThis allows a the user to query all cards \n\nA sample Create call is:\n\n```py\nres = rave.VirtualCard.all()\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{\n    \"status\": \"success\",\n    \"message\": \"SUCCESSFUL\",\n    \"data\": [\n        {\n            \"id\": \"660bae3b-333c-410f-b283-2d181587247f\",\n            \"AccountId\": 507,\n            \"amount\": \"1.00\",\n            \"currency\": \"USD\",\n            \"card_hash\": \"660bae3b-333c-410f-b283-2d181587247f\",\n            \"cardpan\": \"5563384241646062\",\n            \"maskedpan\": \"556338*******6062\",\n            \"city\": \"Hillside\",\n            \"state\": \"New jersey\",\n            \"address_1\": \"471 mundet pl\",\n            \"address_2\": null,\n            \"zip_code\": \"07205\",\n            \"cvv\": \"480\",\n            \"expiration\": \"2022-01\",\n            \"send_to\": null,\n            \"bin_check_name\": null,\n            \"card_type\": \"mastercard\",\n            \"name_on_card\": \"ruby cupp\",\n            \"date_created\": \"2019-01-26T04:00:10.263Z\",\n            \"is_active\": true\n        },\n        {\n            \"id\": \"6b7daf10-ade2-4633-a2ab-ea5495bb0ce2\",\n            \"AccountId\": 507,\n            \"amount\": \"10.00\",\n            \"currency\": \"USD\",\n            \"card_hash\": \"6b7daf10-ade2-4633-a2ab-ea5495bb0ce2\",\n            \"cardpan\": \"5563387512530188\",\n            \"maskedpan\": \"556338*******0188\",\n            \"city\": \"Hillside\",\n            \"state\": \"New jersey\",\n            \"address_1\": \"471 mundet pl\",\n            \"address_2\": null,\n            \"zip_code\": \"07205\",\n            \"cvv\": \"248\",\n            \"expiration\": \"2022-01\",\n            \"send_to\": null,\n            \"bin_check_name\": null,\n            \"card_type\": \"mastercard\",\n            \"name_on_card\": \"Paige graffunder\",\n            \"date_created\": \"2019-01-27T10:52:31.65Z\",\n            \"is_active\": true\n        },\n        {\n            \"id\": \"f32a2067-1b5e-419f-ae5c-69f968ee85db\",\n            \"AccountId\": 507,\n            \"amount\": \"1.00\",\n            \"currency\": \"USD\",\n            \"card_hash\": \"f32a2067-1b5e-419f-ae5c-69f968ee85db\",\n            \"cardpan\": \"5563387304903023\",\n            \"maskedpan\": \"556338*******3023\",\n            \"city\": \"Hillside\",\n            \"state\": \"New jersey\",\n            \"address_1\": \"471 mundet pl\",\n            \"address_2\": null,\n            \"zip_code\": \"07205\",\n            \"cvv\": \"994\",\n            \"expiration\": \"2022-01\",\n            \"send_to\": null,\n            \"bin_check_name\": null,\n            \"card_type\": \"mastercard\",\n            \"name_on_card\": \"Donna Gaydosh\",\n            \"date_created\": \"2019-01-27T11:10:29.333Z\",\n            \"is_active\": true\n        },\n        {\n            \"id\": \"3ff39cd4-4451-403d-874a-f90fa67fd1b8\",\n            \"AccountId\": 507,\n            \"amount\": \"1.00\",\n            \"currency\": \"USD\",\n            \"card_hash\": \"3ff39cd4-4451-403d-874a-f90fa67fd1b8\",\n            \"cardpan\": \"5563380574586529\",\n            \"maskedpan\": \"556338*******6529\",\n            \"city\": \"Hillside\",\n            \"state\": \"New jersey\",\n            \"address_1\": \"471 mundet pl\",\n            \"address_2\": null,\n            \"zip_code\": \"07205\",\n            \"cvv\": \"950\",\n            \"expiration\": \"2022-01\",\n            \"send_to\": null,\n            \"bin_check_name\": null,\n            \"card_type\": \"mastercard\",\n            \"name_on_card\": \"Stephanie elmer\",\n            \"date_created\": \"2019-01-27T11:12:26.68Z\",\n            \"is_active\": true\n        },\n        {\n            \"id\": \"cabbea77-9040-47b4-ac05-b7d1d804173b\",\n            \"AccountId\": 507,\n            \"amount\": \"1.00\",\n            \"currency\": \"USD\",\n            \"card_hash\": \"cabbea77-9040-47b4-ac05-b7d1d804173b\",\n            \"cardpan\": \"5563388312887679\",\n            \"maskedpan\": \"556338*******7679\",\n            \"city\": \"Hillside\",\n            \"state\": \"New jersey\",\n            \"address_1\": \"471 mundet pl\",\n            \"address_2\": null,\n            \"zip_code\": \"07205\",\n            \"cvv\": \"147\",\n            \"expiration\": \"2022-01\",\n            \"send_to\": null,\n            \"bin_check_name\": null,\n            \"card_type\": \"mastercard\",\n            \"name_on_card\": \"Jack Ma\",\n            \"date_created\": \"2019-01-27T15:20:20.52Z\",\n            \"is_active\": true\n        },\n        {\n            \"id\": \"c3ff3ac4-784b-4d07-9fc7-b5b9cde75752\",\n            \"AccountId\": 507,\n            \"amount\": \"12.00\",\n            \"currency\": \"USD\",\n            \"card_hash\": \"c3ff3ac4-784b-4d07-9fc7-b5b9cde75752\",\n            \"cardpan\": \"5563389915692128\",\n            \"maskedpan\": \"556338*******2128\",\n            \"city\": \"Hillside\",\n            \"state\": \"New jersey\",\n            \"address_1\": \"471 mundet pl\",\n            \"address_2\": null,\n            \"zip_code\": \"07205\",\n            \"cvv\": \"408\",\n            \"expiration\": \"2022-01\",\n            \"send_to\": null,\n            \"bin_check_name\": null,\n            \"card_type\": \"mastercard\",\n            \"name_on_card\": \"Jamiu Ganiu\",\n            \"date_created\": \"2019-01-30T16:45:47.233Z\",\n            \"is_active\": true\n        }\n    ]\n}\n```\n\n### ```.get()```\n\nThis allows a the user to query the details of a card with a given id. \n\nA sample Create call is:\n\n```py\ncard_id = \"660bae3b-333c-410f-b283-2d181587247f\"\nres = rave.VirtualCard.getCard(card_id)\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{\n    \"status\": \"success\",\n    \"message\": \"SUCCESSFUL\",\n    \"data\": {\n        \"id\": \"660bae3b-333c-410f-b283-2d181587247f\",\n        \"AccountId\": 507,\n        \"amount\": \"21.00\",\n        \"currency\": \"USD\",\n        \"card_hash\": \"660bae3b-333c-410f-b283-2d181587247f\",\n        \"cardpan\": \"5563384241646062\",\n        \"maskedpan\": \"556338*******6062\",\n        \"city\": \"Hillside\",\n        \"state\": null,\n        \"address_1\": \"471 mundet pl\",\n        \"address_2\": null,\n        \"zip_code\": \"07205\",\n        \"cvv\": \"480\",\n        \"expiration\": \"2022-01\",\n        \"send_to\": null,\n        \"bin_check_name\": null,\n        \"card_type\": \"mastercard\",\n        \"name_on_card\": null,\n        \"date_created\": \"2019-01-30T17:01:47.0972087+00:00\",\n        \"is_active\": true\n    }\n}\n```\n\n### ```.cancel()```\n\nThis allows a the user to terminate the use of a card with a given id permanently. This cancellation results in the permanent deletion of the card. \n\nA sample Create call is:\n\n```py\ncard_id = \"660bae3b-333c-410f-b283-2d181587247f\"\nres = rave.VirtualCard.cancelCard(card_id)\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{\n  \"Status\": \"success\",\n  \"Message\": \"Card terminated successfully\",\n  \"Reference\": null\n}\n```\n\n### ```.freeze()```\n\nThis allows a the user to terminate the use of a card with a given id temporarily. This cancellation results in the temporary suspension of the card \n\nA sample Create call is:\n\n```py\ncard_id = \"660bae3b-333c-410f-b283-2d181587247f\"\nres = rave.VirtualCard.freezeCard(card_id)\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{\n  \"Status\": \"success\",\n  \"Message\": \"Card freeze successful\",\n  \"Reference\": null\n}\n```\n\n### ```.unfreeze()```\n\nThis allows a the user to resume the use of a temporarily suspended or frozen card with a given id. \n\nA sample Create call is:\n\n```py\ncard_id = \"660bae3b-333c-410f-b283-2d181587247f\"\nres = rave.VirtualCard.getCard(card_id)\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{\n  \"Status\": \"success\",\n  \"Message\": \"Card unfreeze successful\",\n  \"Reference\": null\n}\n```\n\n### ```.fund()```\n\nThis allows a the user to add funds to a card with a given id. the `card_id`, `currency` and `amount` are passed into the `.fundCard()` method.\n\nA sample Create call is:\n\n```py\ncard_id = \"660bae3b-333c-410f-b283-2d181587247f\"\nres = rave.VirtualCard.fundCard(card_id, \"NGN\", 2000)\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{\n    \"Status\": \"success\",\n    \"Message\": \"Card was funded successfully\",\n    \"Reference\": null\n}\n```\n\n### ```.Withdraw()```\n\nThis allows a the user to withdraw funds from a card with a given id. the `card id` and `amount` are passed into the `.Withdraw()` method.\n\nA sample Create call is:\n\n```py\ncard_id = \"660bae3b-333c-410f-b283-2d181587247f\"\nres = rave.VirtualCard.Withdraw(card_id, 1000)\nprint(res)\n```\n\n#### Returns\n\nThis call returns a dictionary. A sample response is:\n\n```py\n{\n    \"Status\": \"success\",\n    \"Message\": \"Withdrawal successful\",\n    \"Reference\": null\n}\n```\n<br>\n\n## Run Tests\n\nAll of the SDK's tests are written with Python's ```unittest``` module. The tests currently test:\n```rave.Account```\n```rave.Card```\n```rave.Transfer```\n```rave.Preauth```\n```rave.Subaccount```\n```rave.Subscriptions```\n```rave.Paymentplan```\n\nThey can be run like so:\n\n```sh\npython test.py\n```\n\n>**NOTE:** If the test fails for creating a subaccount, just change the ```account_number``` ```account_bank```  and ```businesss_email``` to something different\n\n>**NOTE:** The test may fail for account validation - ``` Pending OTP validation``` depending on whether the service is down or not\n<br>\n\n## Support\nFor further assistance in using the SDK, you can contact the Developers on [Slack](https://join.slack.com/t/flutterwavedevelopers/shared_invite/enQtNTk3MjgxMjU3ODI5LWFkMjBkYTc0ZGJhM2Q5MTY3YjFkYzAyYmM1ZDZjZjUwMjE4YTc2NjQ1ZGM5ZWE4NDUxMzc4MmExYmI1Yjg5ZWU) and [Email](mailto:developers@flutterwavego.com). You can get more information about the amazing features here [here](https://developer.flutterwave.com/reference#introduction).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Flutterwave/rave-python", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rave-python", "package_url": "https://pypi.org/project/rave-python/", "platform": "", "project_url": "https://pypi.org/project/rave-python/", "project_urls": {"Homepage": "https://github.com/Flutterwave/rave-python"}, "release_url": "https://pypi.org/project/rave-python/1.1.2/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Official Rave Python Wrapper By Flutterwave", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Rave_Python</h1>\n<h2>Introduction</h2>\n<p>This is a Python wrapper around the <a href=\"https://flutterwavedevelopers.readme.io/v2.0/reference\" rel=\"nofollow\">API</a> for <a href=\"https://rave.flutterwave.com\" rel=\"nofollow\">Rave by Flutterwave</a>.</p>\n<h4>Payment types implemented:</h4>\n<ul>\n<li>Card Payments</li>\n<li>Bank Account Payments</li>\n<li>Ghana Mobile Money Payments</li>\n<li>Mpesa Payments</li>\n<li>Rwanda Mobile Money Payments</li>\n<li>Uganda Mobile Money Payments</li>\n<li>Zambia Mobile Money Payments</li>\n<li>Mobile Money Payments for Francophone countries</li>\n<li>Subaccounts</li>\n<li>Transfer</li>\n<li>Subscription (Recurring Payments)</li>\n<li>Bills payment</li>\n<li>Payment Plan</li>\n<li>USSD Payments (Still in Beta Mode)</li>\n</ul>\n<h4>Other features include:</h4>\n<ul>\n<li>Preauthorization charges</li>\n<li>Refunds</li>\n<li>Transaction Verification</li>\n<li>Transfer Recipients</li>\n<li>Virtual Cards</li>\n<li>Virtual Accounts</li>\n</ul>\n<h2>Installation</h2>\n<p>To install, run</p>\n<pre>pip install rave_python\n</pre>\n<p>Note: This is currently under active development</p>\n<h2>Import Package</h2>\n<p>The base class for this package is 'Rave'. To use this class, add:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span>\n</pre>\n<h2>Initialization</h2>\n<h4>To instantiate in sandbox:</h4>\n<p>To use Rave, instantiate the Rave class with your public key. We recommend that you store your secret key in an environment variable named, <code>RAVE_SECRET_KEY</code>. Instantiating your rave object is therefore as simple as:</p>\n<pre><span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR_PUBLIC_KEY\"</span><span class=\"p\">)</span>\n</pre>\n<h4>To instantiate without environment variables (Sandbox):</h4>\n<p>If you choose not to store your secret key in an environment variable, we do provide a <code>usingEnv</code> flag which can be set to <code>False</code>, but please be warned, do not use this package without environment variables in production</p>\n<pre><span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"YOUR_SECRET_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h4>To instantiate in production:</h4>\n<p>To initialize in production, simply set the <code>production</code> flag to <code>True</code>. It is highly discouraged but if you choose to not use environment variables, you can do so in the same way mentioned above.</p>\n<pre><span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">production</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h1>Rave Objects</h1>\n<p>This is the documentation for all of the components of rave_python</p>\n<h2><code>rave.Card</code></h2>\n<p>This is used to facilitate card transactions.</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.charge</code></p>\n</li>\n<li>\n<p><code>.validate</code></p>\n</li>\n<li>\n<p><code>.verify</code></p>\n</li>\n<li>\n<p><code>.getTypeOfArgsRequired</code></p>\n</li>\n<li>\n<p><code>.updatePayload</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.charge(payload)</code></h3>\n<p>This is called to start a card transaction. The payload should be a dictionary containing card information. It should have the parameters:</p>\n<ul>\n<li>\n<p><code>cardno</code>,</p>\n</li>\n<li>\n<p><code>cvv</code>,</p>\n</li>\n<li>\n<p><code>currency</code>,</p>\n</li>\n<li>\n<p><code>country</code>,</p>\n</li>\n<li>\n<p><code>expirymonth</code>,</p>\n</li>\n<li>\n<p><code>expiryyear</code>,</p>\n</li>\n<li>\n<p><code>amount</code>,</p>\n</li>\n<li>\n<p><code>email</code>,</p>\n</li>\n<li>\n<p><code>phonenumber</code>,</p>\n</li>\n<li>\n<p><code>firstname</code>,</p>\n</li>\n<li>\n<p><code>lastname</code>,</p>\n</li>\n<li>\n<p><code>IP</code></p>\n</li>\n</ul>\n<p>Optionally, you can add a custom transaction reference using the <code>txRef</code> parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the <a href=\"https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py\" rel=\"nofollow\">Misc library</a>.</p>\n<p>A sample call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre> <span class=\"p\">{</span><span class=\"s1\">'validationRequired'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'suggestedAuth'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'PIN'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'authUrl'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1538095398058'</span><span class=\"p\">}</span>\n</pre>\n<p>This call raises a <code>CardChargeError</code> if there was a problem processing your transaction. The <code>CardChargeError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">CardChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<p>A sample <code>e.err</code> contains:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530897824739'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'errMsg'</span><span class=\"p\">:</span> <span class=\"s1\">'Sorry, that card number is invalid, please check and try again'</span><span class=\"p\">}</span>\n</pre>\n<br>\n<h3><code>rave.Misc.updatePayload(authMethod, payload, arg)</code></h3>\n<p>Depending on the suggestedAuth from the charge call, you may need to update the payload with a pin or address. To know which type of authentication you would require, simply call <code>rave.Card.getTypeOfArgsRequired(suggestedAuth)</code>. This returns either <code>pin</code> or <code>address</code>.</p>\n<p>In the case of <code>pin</code>, you are required to call <code>rave.Card.updatePayload(suggestedAuth, payload, pin=\"THE_CUSTOMER_PIN\")</code>.</p>\n<p>In the case of <code>address</code>, you are required to call <code>rave.Card.updatePayload(suggestedAuth, payload, address={ THE_ADDRESS_DICTIONARY })</code></p>\n<p>A typical address dictionary includes the following parameters:</p>\n<p><code>billingzip</code>,</p>\n<p><code>billingcity</code>,</p>\n<p><code>billingaddress</code>,</p>\n<p><code>billingstate</code>,</p>\n<p><code>billingcountry</code></p>\n<p><strong>Note:</strong>\n<code>suggestedAuth</code> is the suggestedAuth returned from the initial charge call and <code>payload</code> is the original payload</p>\n<br>\n<h3><code>.validate(txRef)</code></h3>\n<p>After a successful charge, most times you will be asked to verify with OTP. To check if this is required, check the <code>validationRequired</code> key in the <code>res</code> of the charge call.</p>\n<p>To validate, you need to pass the <code>flwRef</code> from the <code>res</code> of the charge call as well as the OTP.</p>\n<p>A sample validate call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">],</span> <span class=\"s2\">\"12345\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary containing the <code>txRef</code>, <code>flwRef</code> among others if successful.</p>\n<p>This call raises a <code>TransactionValidationError</code> if the OTP is not correct or there was a problem processing your request.</p>\n<p>To handle this, write:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<p>A sample <code>e.err</code> contains:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"s1\">'FLW-MOCK-a7911408bd7f55f89f0211819d6fd370'</span><span class=\"p\">,</span> <span class=\"s1\">'errMsg'</span><span class=\"p\">:</span> <span class=\"s1\">'otp is required'</span><span class=\"p\">}</span>\n</pre>\n<br>\n<h3><code>.verify(txRef)</code></h3>\n<p>You can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the <code>txRef</code> in the <code>res</code> parameter returned any of the calls (<code>charge</code> or <code>validate</code>).</p>\n<p>A sample verify call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dict with <code>txRef</code>, <code>flwRef</code> and <code>transactionComplete</code> which indicates whether the transaction was completed successfully.</p>\n<p>Sample</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'cardToken'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k'</span><span class=\"p\">,</span> <span class=\"s1\">'chargedAmount'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'transactionComplete'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'MC-1538095718251'</span><span class=\"p\">}</span>\n</pre>\n<h4>Please note that after charging a card successfully on rave, if you wish to save the card for further charges, in your verify payment response you will find an object: \"cardtoken\": \"flw-t0-f6f915f53a094671d98560272572993e-m03k\".  This is the token you will use for card tokenization. Details are provided below.</h4>\n<p>If your call could not be completed successfully, a <code>TransactionVerificationError</code> is raised.</p>\n<br>\n<h3><code>.charge(payload_for_saved_card, chargeWithToken=True)</code></h3>\n<p>This is called to start a card transaction with a card that has been saved. The payload should be a dictionary containing card information. It should have the parameters:</p>\n<ul>\n<li>\n<p><code>token</code>,</p>\n</li>\n<li>\n<p><code>country</code>,</p>\n</li>\n<li>\n<p><code>amount</code>,</p>\n</li>\n<li>\n<p><code>email</code>,</p>\n</li>\n<li>\n<p><code>firstname</code>,</p>\n</li>\n<li>\n<p><code>lastname</code>,</p>\n</li>\n<li>\n<p><code>IP</code>,</p>\n</li>\n<li>\n<p><code>txRef</code>,</p>\n</li>\n<li>\n<p><code>currency</code></p>\n</li>\n</ul>\n<h4>NB: email must be the same as before the card was saved</h4>\n<p>Optionally, you can add a custom transaction reference using the <code>txRef</code> parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the <a href=\"https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py\" rel=\"nofollow\">Misc library</a>.</p>\n<p>A sample call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload_for_saved_card</span><span class=\"p\">,</span> <span class=\"n\">chargeWithToken</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'validationRequired'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'suggestedAuth'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'FLW-M03K-cdb24d740fb18c242dd277fb1f74d399'</span><span class=\"p\">,</span> <span class=\"s1\">'authUrl'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-7666-YU'</span><span class=\"p\">}</span>\n</pre>\n<p>This call raises a <code>CardChargeError</code> if a wrong token or email is passed or if there was a problem processing your transaction. The <code>CardChargeError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">CardChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<p>This call also raises an <code>IncompletePaymentDetailsError</code> if any of the required parameters are missing. The <code>IncompletePaymentDetailsError</code> contains information about which parameter was not included in the payload. You can handle this such as:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">IncompletePaymentDetailsError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n</pre>\n<p>Once this is done, call <code>rave.Card.verify</code> passing in the <code>txRef</code> returned in the response to verify the payment. Sample response:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'cardToken'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k'</span><span class=\"p\">,</span> <span class=\"s1\">'chargedAmount'</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s1\">'transactionComplete'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-7666-YU'</span><span class=\"p\">}</span>\n</pre>\n<p><code>rave.Card.verify</code> raises a <code>TransactionVerificationError</code> if an invalid <code>txRef</code> is supplied. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">CardChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h4>NB: when charging saved cards, you do not need to call rave.card.Validate()</h4>\n<h3>Complete card charge flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"YOUR_SECRET_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Payload with pin</span>\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"cardno\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5438898014560229\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"cvv\"</span><span class=\"p\">:</span> <span class=\"s2\">\"890\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"expirymonth\"</span><span class=\"p\">:</span> <span class=\"s2\">\"09\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"expiryyear\"</span><span class=\"p\">:</span> <span class=\"s2\">\"19\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"user@gmail.com\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"phonenumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0902620185\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"firstname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"temi\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"lastname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"desola\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"IP\"</span><span class=\"p\">:</span> <span class=\"s2\">\"355426087298442\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"suggestedAuth\"</span><span class=\"p\">]:</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"n\">Misc</span><span class=\"o\">.</span><span class=\"n\">getTypeOfArgsRequired</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"suggestedAuth\"</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">arg</span> <span class=\"o\">==</span> <span class=\"s2\">\"pin\"</span><span class=\"p\">:</span>\n            <span class=\"n\">Misc</span><span class=\"o\">.</span><span class=\"n\">updatePayload</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"suggestedAuth\"</span><span class=\"p\">],</span> <span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">pin</span><span class=\"o\">=</span><span class=\"s2\">\"3310\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">arg</span> <span class=\"o\">==</span> <span class=\"s2\">\"address\"</span><span class=\"p\">:</span>\n            <span class=\"n\">Misc</span><span class=\"o\">.</span><span class=\"n\">updatePayload</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"suggestedAuth\"</span><span class=\"p\">],</span> <span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"billingzip\"</span><span class=\"p\">:</span> <span class=\"s2\">\"07205\"</span><span class=\"p\">,</span> <span class=\"s2\">\"billingcity\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hillside\"</span><span class=\"p\">,</span> <span class=\"s2\">\"billingaddress\"</span><span class=\"p\">:</span> <span class=\"s2\">\"470 Mundet PI\"</span><span class=\"p\">,</span> <span class=\"s2\">\"billingstate\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NJ\"</span><span class=\"p\">,</span> <span class=\"s2\">\"billingcountry\"</span><span class=\"p\">:</span> <span class=\"s2\">\"US\"</span><span class=\"p\">})</span>\n        \n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"validationRequired\"</span><span class=\"p\">]:</span>\n        <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">],</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"transactionComplete\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">CardChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionVerificationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<p><br><br></p>\n<h2><code>rave.Account</code></h2>\n<p>This is used to facilitate account transactions.</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.charge</code></p>\n</li>\n<li>\n<p><code>.validate</code></p>\n</li>\n<li>\n<p><code>.verify</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.charge(payload)</code></h3>\n<p>This is called to start an account transaction. The payload should be a dictionary containing card information. It should have the parameters:</p>\n<ul>\n<li>\n<p><code>accountbank</code>,</p>\n</li>\n<li>\n<p><code>accountnumber</code>,</p>\n</li>\n<li>\n<p><code>amount</code>,</p>\n</li>\n<li>\n<p><code>email</code>,</p>\n</li>\n<li>\n<p><code>phonenumber</code>,</p>\n</li>\n<li>\n<p><code>IP</code></p>\n</li>\n</ul>\n<p>Optionally, you can add a custom transaction reference using the <code>txRef</code> parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the <a href=\"https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py\" rel=\"nofollow\">Misc library</a>.</p>\n<p>A sample call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre> <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'validationRequired'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530899106006'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"s1\">'ACHG-1530899109682'</span><span class=\"p\">,</span> <span class=\"s1\">'authUrl'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n</pre>\n<p>This call raises an <code>AccountChargeError</code> if there was a problem processing your transaction. The <code>AccountChargeError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">AccountChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<p>A sample <code>e.err</code> contains:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530897824739'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'errMsg'</span><span class=\"p\">:</span> <span class=\"s1\">'Sorry, that account number is invalid, please check and try again'</span><span class=\"p\">}</span>\n</pre>\n<br>\n<h3><code>.validate(txRef)</code></h3>\n<p>After a successful charge, most times you will be asked to verify with OTP. To check if this is required, check the <code>validationRequired</code> key in the <code>res</code> of the charge call.</p>\n<p>In the case that an <code>authUrl</code> is returned from your charge call, you may skip the validation step and simply pass your authUrl to the end-user.</p>\n<pre><span class=\"n\">authUrl</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s1\">'authUrl'</span><span class=\"p\">]</span>\n</pre>\n<p>To validate, you need to pass the <code>flwRef</code> from the <code>res</code> of the charge call as well as the OTP.</p>\n<p>A sample validate call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">],</span> <span class=\"s2\">\"12345\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary containing the <code>txRef</code>, <code>flwRef</code> among others if successful.</p>\n<p>This call raises a <code>TransactionValidationError</code> if the OTP is not correct or there was a problem processing your request.</p>\n<p>To handle this, write:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<p>A sample <code>e.err</code> contains:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530899869968'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"s1\">'ACHG-1530899873118'</span><span class=\"p\">,</span> <span class=\"s1\">'errMsg'</span><span class=\"p\">:</span> <span class=\"s1\">'Pending OTP validation'</span><span class=\"p\">}</span>\n</pre>\n<br>\n<h3><code>.verify(txRef)</code></h3>\n<p>You can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the <code>txRef</code> in the <code>res</code> parameter returned any of the calls (<code>charge</code> or <code>validate</code>).</p>\n<p>A sample verify call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dict with <code>txRef</code>, <code>flwRef</code> and <code>transactionComplete</code> which indicates whether the transaction was completed successfully.</p>\n<p>Sample</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'vbvcode'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'N/A'</span><span class=\"p\">,</span> <span class=\"s1\">'chargedamount'</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s1\">'vbvmessage'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'N/A'</span><span class=\"p\">,</span> <span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'ACHG-1538093023787'</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s1\">'transactionComplete'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'acctmessage'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Approved Or Completed Successfully'</span><span class=\"p\">,</span> <span class=\"s1\">'chargecode'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'00'</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'MC-1538093008498'</span><span class=\"p\">}</span>\n</pre>\n<p>If your call could not be completed successfully or if a wrong <code>txRef</code> is passed, a <code>TransactionVerificationError</code> is raised. You can handle that as such</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionVerificationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<br>\n<h3>Complete account flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span><span class=\"p\">,</span> <span class=\"n\">Misc</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"ENTER_YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENTER_YOUR_SECRET_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># account payload</span>\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"accountbank\"</span><span class=\"p\">:</span> <span class=\"s2\">\"044\"</span><span class=\"p\">,</span>  <span class=\"c1\"># get the bank code from the bank list endpoint.</span>\n  <span class=\"s2\">\"accountnumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0690000031\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NGN\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"country\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NG\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"100\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test@test.com\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"phonenumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0902620185\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"IP\"</span><span class=\"p\">:</span> <span class=\"s2\">\"355426087298442\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"authUrl\"</span><span class=\"p\">]:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"authUrl\"</span><span class=\"p\">])</span>\n\n    <span class=\"k\">elif</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"validationRequired\"</span><span class=\"p\">]:</span>\n        <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">],</span> <span class=\"s2\">\"12345\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">AccountChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionVerificationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<p><br><br></p>\n<h2><code>rave.GhMobile</code></h2>\n<p>This is used to facilitate Ghanaian mobile money transactions.</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.charge</code></p>\n</li>\n<li>\n<p><code>.verify</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.charge(payload)</code></h3>\n<p>This is called to start a Ghana mobile money transaction. The payload should be a dictionary containing account information. It should have the parameters:</p>\n<ul>\n<li>\n<p><code>amount</code>,</p>\n</li>\n<li>\n<p><code>email</code>,</p>\n</li>\n<li>\n<p><code>phonenumber</code>,</p>\n</li>\n<li>\n<p><code>network</code>,</p>\n</li>\n<li>\n<p><code>IP</code>,</p>\n</li>\n<li>\n<p><code>redirect_url</code></p>\n</li>\n</ul>\n<p>Optionally, you can add a custom transaction reference using the <code>txRef</code> parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the <a href=\"https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py\" rel=\"nofollow\">Misc library</a>.</p>\n<p>A sample call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">GhMobile</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'validationRequired'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530910216380'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"s1\">'N/A'</span><span class=\"p\">}</span>\n</pre>\n<p>This call raises a <code>TransactionChargeError</code> if there was a problem processing your transaction. The <code>TransactionChargeError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<p>A sample <code>e.err</code> contains:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530911537060'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'errMsg'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n</pre>\n<br>\n<h3><code>.verify(txRef)</code></h3>\n<p>You can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the <code>txRef</code> in the <code>res</code> parameter returned any of the calls (<code>charge</code> or <code>validate</code>).</p>\n<p>A sample verify call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">GhMobile</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dict with <code>txRef</code>, <code>flwRef</code> and <code>transactionComplete</code> which indicates whether the transaction was completed successfully.</p>\n<p>If your call could not be completed successfully, a <code>TransactionVerificationError</code> is raised.</p>\n<br>\n<h3>Complete GhMobile charge flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span><span class=\"p\">,</span> <span class=\"n\">Misc</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"ENTER_YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENTER_YOUR_SECRET_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mobile payload</span>\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"50\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"phonenumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"054709929220\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"network\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MTN\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"redirect_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://rave-webhook.herokuapp.com/receivepayment\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"IP\"</span><span class=\"p\">:</span><span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">GhMobile</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">GhMobile</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionVerificationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<p><br><br></p>\n<h2><code>rave.Mpesa</code></h2>\n<p>This is used to facilitate Mpesa transactions.</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.charge</code></p>\n</li>\n<li>\n<p><code>.verify</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.charge(payload)</code></h3>\n<p>This is called to start an Mpesa transaction. The payload should be a dictionary containing account information. It should have the parameters:</p>\n<ul>\n<li>\n<p><code>account</code>,</p>\n</li>\n<li>\n<p><code>email</code>,</p>\n</li>\n<li>\n<p><code>phonenumber</code>,</p>\n</li>\n<li>\n<p><code>IP</code></p>\n</li>\n</ul>\n<p>Optionally, you can add a custom transaction reference using the <code>txRef</code> parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the <a href=\"https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py\" rel=\"nofollow\">Misc library</a>.</p>\n<p>A sample call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Mpesa</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'validationRequired'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530910216380'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"s1\">'N/A'</span><span class=\"p\">}</span>\n</pre>\n<p>This call raises a <code>TransactionChargeError</code> if there was a problem processing your transaction. The <code>TransactionChargeError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<p>A sample <code>e.err</code> contains:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530910109929'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'errMsg'</span><span class=\"p\">:</span> <span class=\"s1\">'email is required'</span><span class=\"p\">}</span>\n</pre>\n<br>\n<h3><code>.verify(txRef)</code></h3>\n<p>You can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the <code>txRef</code> in the <code>res</code> parameter returned any of the calls (<code>charge</code> or <code>validate</code>).</p>\n<p>A sample verify call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Mpesa</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dict with <code>txRef</code>, <code>flwRef</code> and <code>transactionComplete</code> which indicates whether the transaction was completed successfully.</p>\n<p>If your call could not be completed successfully, a <code>TransactionVerificationError</code> is raised.</p>\n<br>\n<h3>Complete Mpesa charge flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span><span class=\"p\">,</span> <span class=\"n\">Misc</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"ENTER_YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENTER_YOUR_SECRET_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mobile payload</span>\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"100\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"phonenumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0926420185\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"user@exampe.com\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"IP\"</span><span class=\"p\">:</span> <span class=\"s2\">\"40.14.290\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"narration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"funds payment\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Mpesa</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Mpesa</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionVerificationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<p><br><br></p>\n<h2><code>rave.UGMobile</code></h2>\n<p>This is used to facilitate Uganda mobile money transactions.</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.charge</code></p>\n</li>\n<li>\n<p><code>.verify</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.charge(payload)</code></h3>\n<p>This is called to start a Ugandan mobile money transaction. The payload should be a dictionary containing account information. It should have the parameters:</p>\n<ul>\n<li>\n<p><code>amount</code>,</p>\n</li>\n<li>\n<p><code>email</code>,</p>\n</li>\n<li>\n<p><code>phonenumber</code>,</p>\n</li>\n<li>\n<p><code>IP</code>,</p>\n</li>\n<li>\n<p><code>redirect_url</code></p>\n</li>\n</ul>\n<p>Optionally, you can add a custom transaction reference using the <code>txRef</code> parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the <a href=\"https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py\" rel=\"nofollow\">Misc library</a>.</p>\n<p>A sample call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">UGMobile</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'validationRequired'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1544013787279'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"s1\">'flwm3s4m0c1544013788481'</span><span class=\"p\">}</span>\n</pre>\n<p>This call raises a <code>TransactionChargeError</code> if there was a problem processing your transaction. The <code>TransactionChargeError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<p>A sample <code>e.err</code> contains:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530911537060'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'errMsg'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n</pre>\n<br>\n<h3><code>.verify(txRef)</code></h3>\n<p>You can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the <code>txRef</code> in the <code>res</code> parameter returned any of the calls (<code>charge</code> or <code>validate</code>).</p>\n<p>A sample verify call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">UGMobile</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dict with <code>txRef</code>, <code>flwRef</code> and <code>transactionComplete</code> which indicates whether the transaction was completed successfully.</p>\n<p>If your call could not be completed successfully, a <code>TransactionVerificationError</code> is raised.</p>\n<br>\n<h3>Complete UGMobile charge flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span><span class=\"p\">,</span> <span class=\"n\">Misc</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"ENTER_YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENTER_YOUR_SECRET_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mobile payload</span>\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"50\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"phonenumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"xxxxxxxx\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"redirect_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://rave-webhook.herokuapp.com/receivepayment\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"IP\"</span><span class=\"p\">:</span><span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">UGMobile</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">UGMobile</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionVerificationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<p><br><br></p>\n<h2><code>rave.ZBMobile</code></h2>\n<p>This is used to facilitate Zambian mobile money transactions.</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.charge</code></p>\n</li>\n<li>\n<p><code>.verify</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.charge(payload)</code></h3>\n<p>This is called to start a Zambian mobile money transaction. The payload should be a dictionary containing account information. It should have the parameters:</p>\n<ul>\n<li>\n<p><code>amount</code>,</p>\n</li>\n<li>\n<p><code>email</code>,</p>\n</li>\n<li>\n<p><code>phonenumber</code>,</p>\n</li>\n<li>\n<p><code>IP</code>,</p>\n</li>\n<li>\n<p><code>redirect_url</code></p>\n</li>\n</ul>\n<p>Optionally, you can add a custom transaction reference using the <code>txRef</code> parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the <a href=\"https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py\" rel=\"nofollow\">Misc library</a>.</p>\n<p>A sample call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">ZBMobile</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'validationRequired'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1544013787279'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"s1\">'flwm3s4m0c1544013788481'</span><span class=\"p\">}</span>\n</pre>\n<p>This call raises a <code>TransactionChargeError</code> if there was a problem processing your transaction. The <code>TransactionChargeError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<p>A sample <code>e.err</code> contains:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530911537060'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'errMsg'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n</pre>\n<br>\n<h3><code>.verify(txRef)</code></h3>\n<p>You can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the <code>txRef</code> in the <code>res</code> parameter returned any of the calls (<code>charge</code> or <code>validate</code>).</p>\n<p>A sample verify call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">ZBMobile</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dict with <code>txRef</code>, <code>flwRef</code> and <code>transactionComplete</code> which indicates whether the transaction was completed successfully.</p>\n<p>If your call could not be completed successfully, a <code>TransactionVerificationError</code> is raised.</p>\n<br>\n<h3>Complete ZBMobile charge flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span><span class=\"p\">,</span> <span class=\"n\">Misc</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"ENTER_YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENTER_YOUR_SECRET_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mobile payload</span>\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"50\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"phonenumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"xxxxxxxx\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"redirect_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://rave-webhook.herokuapp.com/receivepayment\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"IP\"</span><span class=\"p\">:</span><span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">ZBMobile</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">ZBMobile</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionVerificationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<p><br><br></p>\n<h2><code>rave.Francophone</code></h2>\n<p>This is used to facilitate mobile money transactions in Ivory Coast, Senegal and Mali.</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.charge</code></p>\n</li>\n<li>\n<p><code>.verify</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.charge(payload)</code></h3>\n<p>This is called to start a francophone mobile money transaction. The payload should be a dictionary containing account information. It should have the parameters:</p>\n<ul>\n<li>\n<p><code>amount</code>,</p>\n</li>\n<li>\n<p><code>email</code>,</p>\n</li>\n<li>\n<p><code>phonenumber</code>,</p>\n</li>\n<li>\n<p><code>IP</code>,</p>\n</li>\n<li>\n<p><code>redirect_url</code></p>\n</li>\n</ul>\n<p>Optionally, you can add a custom transaction reference using the <code>txRef</code> parameter. Note that if you do not specify one, it would be automatically generated. We do provide a function for generating transaction references in the <a href=\"https://github.com/Flutterwave/rave-python/blob/master/rave_python/rave_misc.py\" rel=\"nofollow\">Misc library</a>.</p>\n<p>A sample call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Francophone</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'validationRequired'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1566482674756'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'suggestedAuth'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'redirectUrl'</span><span class=\"p\">:</span> <span class=\"s1\">'https://flutterwaveprodv2.com/flwcinetpay/paymentServlet?reference=FLW186321566482674310'</span><span class=\"p\">}</span>\n</pre>\n<p>The call returns redirect Url <code>'redirectUrl':'https://redirecturl.com'</code> for the authentication of the transaction. It raises a <code>TransactionChargeError</code> if there was a problem processing your transaction. The <code>TransactionChargeError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<p>A sample <code>e.err</code> contains:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1530911537060'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'errMsg'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n</pre>\n<br>\n<h3><code>.verify(txRef)</code></h3>\n<p>You can call this to check if your transaction was completed successfully. You have to pass the transaction reference generated at the point of charging. This is the <code>txRef</code> in the <code>res</code> parameter returned any of the calls (<code>charge</code> or <code>validate</code>).</p>\n<p>A sample verify call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Francophone</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dict with <code>txRef</code>, <code>flwRef</code> and <code>transactionComplete</code> which indicates whether the transaction was completed successfully.</p>\n<p>If your call could not be completed successfully, a <code>TransactionVerificationError</code> is raised.</p>\n<br>\n<h3>Complete Francophone mobile money charge flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span><span class=\"p\">,</span> <span class=\"n\">Misc</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"ENTER_YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENTER_YOUR_SECRET_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mobile payload</span>\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"50\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"phonenumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"054709929220\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"redirect_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://rave-webhook.herokuapp.com/receivepayment\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"IP\"</span><span class=\"p\">:</span><span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Francophone</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Francophone</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionVerificationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<p><br><br></p>\n<h2><code>rave.Preauth</code></h2>\n<p>This is used to facilitate preauthorized card transactions. This inherits the Card class so any task you can do on Card, you can do with preauth.</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.charge</code></p>\n</li>\n<li>\n<p><code>.capture</code></p>\n</li>\n<li>\n<p><code>.validate</code></p>\n</li>\n<li>\n<p><code>.verify</code></p>\n</li>\n<li>\n<p><code>.refund</code></p>\n</li>\n<li>\n<p><code>.void</code></p>\n</li>\n</ul>\n<br>\n<p>**\nIn order to <code>preauthorize</code> a card, you must have:\n1. charged the card initially using <code>rave.Card.charge(payload)</code>\n2. saved the <code>token</code> returned to you for that card. A <code>token</code> looks like this <code>flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k</code>\n**</p>\n<h3><code>.charge(cardDetails, chargeWithToken=True, hasFailed=False)</code></h3>\n<p>This is used to preauthorize a specific amount to be paid by a customer.</p>\n<p><strong>Note:</strong> &gt; it takes the same parameters as Card charge. However, the cardDetails object differs. See below for an example</p>\n<p>Once preauthorized successfully, you can then <code>capture</code> that <code>held</code> amount at a later time or date</p>\n<p>A sample charge call is:</p>\n<pre><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"token\"</span><span class=\"p\">:</span><span class=\"s2\">\"flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"country\"</span><span class=\"p\">:</span><span class=\"s2\">\"NG\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span><span class=\"mi\">1000</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"email\"</span><span class=\"p\">:</span><span class=\"s2\">\"user@gmail.com\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"firstname\"</span><span class=\"p\">:</span><span class=\"s2\">\"temi\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"lastname\"</span><span class=\"p\">:</span><span class=\"s2\">\"Oyekole\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"IP\"</span><span class=\"p\">:</span><span class=\"s2\">\"190.233.222.1\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"txRef\"</span><span class=\"p\">:</span><span class=\"s2\">\"MC-7666-YU\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span><span class=\"s2\">\"NGN\"</span>\n<span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Preauth</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'validationRequired'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-7666-YU'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"s1\">'FLW-PREAUTH-M03K-7d01799093ee2db9d8136cf042dc8c37'</span><span class=\"p\">,</span> <span class=\"s1\">'suggestedAuth'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'authUrl'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n</pre>\n<p>This call raises a <code>TransactionChargeError</code> if there was a problem processing your transaction. The <code>TransactionChargeError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<br>\n<h3><code>.capture(flwRef)</code></h3>\n<p>This is used to capture the funds held in the account. Similar to the validate call, it requires you to pass the <code>flwRef</code> of the transaction.</p>\n<blockquote>\n<p>Please <strong>NOTE</strong> that the <code>flwRef</code> must be gotten from the response of the initial charge i.e after calling <code>rave.Preauth.charge(payload)</code></p>\n</blockquote>\n<p>A sample capture call is:</p>\n<pre><span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Preauth</span><span class=\"o\">.</span><span class=\"n\">capture</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Capture complete'</span><span class=\"p\">,</span> <span class=\"s1\">'validationRequired'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-7666-YU'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"s1\">'FLW-PREAUTH-M03K-0bce8fe1c3561e17e026ddfbbea37fdb'</span><span class=\"p\">}</span>\n</pre>\n<p>This call raises a <code>PreauthCaptureError</code> if there was a problem processing your transaction. The <code>PreauthCaptureError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PreauthCaptureError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<br>\n<h3><code>.void(flwRef)</code></h3>\n<p>This is used to void a preauth transaction. Similar to the validate call, it requires you to pass the <code>flwRef</code>.</p>\n<blockquote>\n<p>Please <strong>NOTE</strong> that the <code>flwRef</code> must be gotten from the response of the initial charge i.e after calling <code>rave.Preauth.charge(payload)</code></p>\n</blockquote>\n<p>A sample void call is:</p>\n<pre><span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Preauth</span><span class=\"o\">.</span><span class=\"n\">void</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<br>\n<h3><code>.refund(flwRef)</code></h3>\n<p>This is used to refund a preauth transaction. Similar to the validate call, it requires you to pass the <code>flwRef</code>.</p>\n<blockquote>\n<p>Please <strong>NOTE</strong> that the <code>flwRef</code> must be gotten from the response of the initial charge i.e after calling <code>rave.Preauth.charge(payload)</code></p>\n</blockquote>\n<p>A sample void call is:</p>\n<pre><span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Preauth</span><span class=\"o\">.</span><span class=\"n\">refund</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.verify(txRef)</code></h3>\n<p><strong>See rave.Card.verify above</strong></p>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'transactionComplete'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'txRef'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-7666-YU'</span><span class=\"p\">,</span> <span class=\"s1\">'flwRef'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s1\">'chargedAmount'</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s1\">'cardToken'</span><span class=\"p\">:</span> <span class=\"s1\">'flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k'</span><span class=\"p\">}</span>\n</pre>\n<p>This call raises a <code>TransactionVerificationError</code> if there was a problem processing your transaction. The <code>TransactionVerificationError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionVerificationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<br>\n<h3>Complete preauth charge flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">Misc</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"ENTER_YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENTER_YOUR_SECRET_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Payload with pin</span>\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"token\"</span><span class=\"p\">:</span><span class=\"s2\">\"flw-t1nf-5b0f12d565cd961f73c51370b1340f1f-m03k\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"country\"</span><span class=\"p\">:</span><span class=\"s2\">\"NG\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span><span class=\"mi\">1000</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"email\"</span><span class=\"p\">:</span><span class=\"s2\">\"user@gmail.com\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"firstname\"</span><span class=\"p\">:</span><span class=\"s2\">\"temi\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"lastname\"</span><span class=\"p\">:</span><span class=\"s2\">\"Oyekole\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"IP\"</span><span class=\"p\">:</span><span class=\"s2\">\"190.233.222.1\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"txRef\"</span><span class=\"p\">:</span><span class=\"s2\">\"MC-7666-YU\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span><span class=\"s2\">\"NGN\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Preauth</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Preauth</span><span class=\"o\">.</span><span class=\"n\">capture</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Preauth</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionChargeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PreauthCaptureError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransactionVerificationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"txRef\"</span><span class=\"p\">])</span>\n</pre>\n<br>\n<h2><code>rave.SubAccount</code></h2>\n<p>This is used to initiate and manage payouts</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.create</code></p>\n</li>\n<li>\n<p><code>.all</code></p>\n</li>\n<li>\n<p><code>.fetch</code></p>\n</li>\n<li>\n<p><code>.edit</code></p>\n</li>\n<li>\n<p><code>.cancel</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.create(accountDetails)</code></h3>\n<p>This allows you to create a subaccount plan. It requires a dict <code>accountDetails</code> containing <code>account_bank</code>, <code>account_number</code>, <code>business_name</code>, <code>business_email</code>, <code>business_contact</code>, <code>business_contact_mobile</code>, <code>business_mobile</code>.</p>\n<blockquote>\n<p>account_bank: This is the sub-accounts bank ISO code, use the <a href=\"https://developer.flutterwave.com/reference#list-of-banks-for-transfer\" rel=\"nofollow\">List of Banks for Transfer</a> endpoint to retrieve a list of bank codes.</p>\n</blockquote>\n<blockquote>\n<p>account_number: This is the customer's account number</p>\n</blockquote>\n<blockquote>\n<p>business_name: This is the sub-account business name.</p>\n</blockquote>\n<blockquote>\n<p>business_email: This is the sub-account business email.</p>\n</blockquote>\n<blockquote>\n<p>business_contact: This is the contact person for the sub-account e.g. Richard Hendrix</p>\n</blockquote>\n<blockquote>\n<p>business_contact_mobile: Business contact number.</p>\n</blockquote>\n<blockquote>\n<p>business_mobile: Primary business contact number.</p>\n</blockquote>\n<blockquote>\n<p>split_type: This can be set as   <code>percentage</code> or <code>flat</code> when set as percentage it means you want to take a percentage fee on all transactions, and vice versa for flat this means you want to take a flat fee on every transaction.</p>\n</blockquote>\n<blockquote>\n<p>split_value: This can be a <code>percentage</code> value or <code>flat</code> value depending on what was set on <code>split_type</code></p>\n</blockquote>\n<p>More information can be found <a href=\"https://developer.flutterwave.com/v2.0/reference#create-subaccount\" rel=\"nofollow\">here</a></p>\n<p>A sample create call is:</p>\n<pre> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">SubAccount</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span>\n\t<span class=\"s2\">\"account_bank\"</span><span class=\"p\">:</span> <span class=\"s2\">\"044\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"account_number\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0690000031\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"business_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jake Stores\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"business_email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"kwakj@services.com\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"business_contact\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Amy Parkers\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"business_contact_mobile\"</span><span class=\"p\">:</span> <span class=\"s2\">\"09083772\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"business_mobile\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0188883882\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"split_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"flat\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"split_value\"</span><span class=\"p\">:</span> <span class=\"mi\">3000</span>\n\t<span class=\"s2\">\"meta\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"metaname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MarketplaceID\"</span><span class=\"p\">,</span> <span class=\"s2\">\"metavalue\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ggs-920900\"</span><span class=\"p\">}]</span>\n<span class=\"p\">})</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"s1\">'account_number'</span><span class=\"p\">:</span> <span class=\"s1\">'0690000032'</span><span class=\"p\">,</span> <span class=\"s1\">'account_bank'</span><span class=\"p\">:</span> <span class=\"s1\">'044'</span><span class=\"p\">,</span> <span class=\"s1\">'business_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Jake Stores'</span><span class=\"p\">,</span> <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'Pastor Bright'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T10:43:02.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'meta'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'metaname'</span><span class=\"p\">:</span> <span class=\"s1\">'MarketplaceID'</span><span class=\"p\">,</span> <span class=\"s1\">'metavalue'</span><span class=\"p\">:</span> <span class=\"s1\">'ggs-920900'</span><span class=\"p\">}],</span> <span class=\"s1\">'split_ratio'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'split_type'</span><span class=\"p\">:</span> <span class=\"s1\">'flat'</span><span class=\"p\">,</span> <span class=\"s1\">'split_value'</span><span class=\"p\">:</span> <span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"s1\">'subaccount_id'</span><span class=\"p\">:</span> <span class=\"s1\">'RS_8279B1518A139DD3238328747F322418'</span><span class=\"p\">,</span> <span class=\"s1\">'bank_name'</span><span class=\"p\">:</span> <span class=\"s1\">'ACCESS BANK NIGERIA'</span><span class=\"p\">}}</span>\n</pre>\n<p>This call raises a <code>.SubaccountCreationError</code> if there was a problem processing your transaction. The <code>.SubaccountCreationError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">..</span><span class=\"n\">SubaccountCreationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.all()</code></h3>\n<p>This allows you retrieve all subaccounts</p>\n<p>A sample all Subaccounts call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">SubAccount</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'SUBACCOUNTS'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'page_info'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'current_page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'total_pages'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"s1\">'subaccounts'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"s1\">'account_number'</span><span class=\"p\">:</span> <span class=\"s1\">'0690000032'</span><span class=\"p\">,</span> <span class=\"s1\">'account_bank'</span><span class=\"p\">:</span> <span class=\"s1\">'044'</span><span class=\"p\">,</span> <span class=\"s1\">'business_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Jake Stores'</span><span class=\"p\">,</span> <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'Pastor Bright'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T10:43:02.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'meta'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'metaname'</span><span class=\"p\">:</span> <span class=\"s1\">'MarketplaceID'</span><span class=\"p\">,</span> <span class=\"s1\">'metavalue'</span><span class=\"p\">:</span> <span class=\"s1\">'ggs-920900'</span><span class=\"p\">}],</span> <span class=\"s1\">'split_ratio'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'split_type'</span><span class=\"p\">:</span> <span class=\"s1\">'flat'</span><span class=\"p\">,</span> <span class=\"s1\">'split_value'</span><span class=\"p\">:</span> <span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"s1\">'subaccount_id'</span><span class=\"p\">:</span> <span class=\"s1\">'RS_8279B1518A139DD3238328747F322418'</span><span class=\"p\">,</span> <span class=\"s1\">'bank_name'</span><span class=\"p\">:</span> <span class=\"s1\">'ACCESS BANK NIGERIA'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">107</span><span class=\"p\">,</span> <span class=\"s1\">'account_number'</span><span class=\"p\">:</span> <span class=\"s1\">'0690000031'</span><span class=\"p\">,</span> <span class=\"s1\">'account_bank'</span><span class=\"p\">:</span> <span class=\"s1\">'044'</span><span class=\"p\">,</span> <span class=\"s1\">'business_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Jake Stores'</span><span class=\"p\">,</span> <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'Forrest Green'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-05T18:30:09.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'meta'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'metaname'</span><span class=\"p\">:</span> <span class=\"s1\">'MarketplaceID'</span><span class=\"p\">,</span> <span class=\"s1\">'metavalue'</span><span class=\"p\">:</span> <span class=\"s1\">'ggs-920900'</span><span class=\"p\">}],</span> <span class=\"s1\">'split_ratio'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'split_type'</span><span class=\"p\">:</span> <span class=\"s1\">'flat'</span><span class=\"p\">,</span> <span class=\"s1\">'split_value'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'subaccount_id'</span><span class=\"p\">:</span> <span class=\"s1\">'RS_41FFE616A1FA7EA56C85E57F593056F7'</span><span class=\"p\">,</span> <span class=\"s1\">'bank_name'</span><span class=\"p\">:</span> <span class=\"s1\">'ACCESS BANK NIGERIA'</span><span class=\"p\">}]}}}</span>\n</pre>\n<p>This call raises a <code>PlanStatusError</code> if there was a problem processing your transaction. The <code>PlanStatusError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.fetch(subaccount_id)</code></h3>\n<p>This allows you fetch a subaccount. You may or may not pass in a <code>subaccount_id</code>. If you do not pass in a <code>subaccount_id</code> all subacocunts will be returned.</p>\n<blockquote>\n<p>subaccount_id: This is the payment plan ID. It can be gotten from the response returned from creating a plan or from the Rave Dashboard</p>\n</blockquote>\n<p>A sample fetch Subaccount call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">SubAccount</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'SUBACCOUNT'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">106</span><span class=\"p\">,</span> <span class=\"s1\">'account_number'</span><span class=\"p\">:</span> <span class=\"s1\">'0690000035'</span><span class=\"p\">,</span> <span class=\"s1\">'account_bank'</span><span class=\"p\">:</span> <span class=\"s1\">'044'</span><span class=\"p\">,</span> <span class=\"s1\">'business_name'</span><span class=\"p\">:</span> <span class=\"s1\">'JK Services'</span><span class=\"p\">,</span> <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'Peter Crouch'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-05T18:24:21.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'meta'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'metaname'</span><span class=\"p\">:</span> <span class=\"s1\">'MarketplaceID'</span><span class=\"p\">,</span> <span class=\"s1\">'metavalue'</span><span class=\"p\">:</span> <span class=\"s1\">'ggs-920900'</span><span class=\"p\">}],</span> <span class=\"s1\">'split_ratio'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'split_type'</span><span class=\"p\">:</span> <span class=\"s1\">'flat'</span><span class=\"p\">,</span> <span class=\"s1\">'split_value'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'subaccount_id'</span><span class=\"p\">:</span> <span class=\"s1\">'RS_0A6C260E1A70934DE6EF2F8CEE46BBB3'</span><span class=\"p\">,</span> <span class=\"s1\">'bank_name'</span><span class=\"p\">:</span> <span class=\"s1\">'ACCESS BANK NIGERIA'</span><span class=\"p\">}}}</span>\n</pre>\n<p>This call raises a <code>PlanStatusError</code> if there was a problem processing your transaction. The <code>PlanStatusError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3>Complete SubAccount flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">Misc</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"YOUR_PRIVATE_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n   \n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">SubAccount</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span>\n\t<span class=\"s2\">\"account_bank\"</span><span class=\"p\">:</span> <span class=\"s2\">\"044\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"account_number\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0690000032\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"business_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jake Stores\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"business_email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"jdhhd@services.com\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"business_contact\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Amy Parkers\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"business_contact_mobile\"</span><span class=\"p\">:</span> <span class=\"s2\">\"09083772\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"business_mobile\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0188883882\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"split_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"flat\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"split_value\"</span><span class=\"p\">:</span> <span class=\"mi\">3000</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"meta\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"metaname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MarketplaceID\"</span><span class=\"p\">,</span> <span class=\"s2\">\"metavalue\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ggs-920900\"</span><span class=\"p\">}]</span>\n    <span class=\"p\">})</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">SubAccount</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'RS_0A6C260E1A70934DE6EF2F8CEE46BBB3'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">IncompletePaymentDetailsError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">ServerError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h2><code>rave.Transfer</code></h2>\n<p>This is used to initiate and manage payouts</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.initiate</code></p>\n</li>\n<li>\n<p><code>.bulk</code></p>\n</li>\n<li>\n<p><code>.fetch</code></p>\n</li>\n<li>\n<p><code>.all</code></p>\n</li>\n<li>\n<p><code>.getFee</code></p>\n</li>\n<li>\n<p><code>.getBalance</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.initiate(transferDetails)</code></h3>\n<p>This initiates a transfer to a customer's account. When a transfer is initiated, it comes with a status NEW this means the transfer has been queued for processing.</p>\n<p><strong>Please note that you must pass <code>beneficiary_name</code> as part of the initiate call. Else an error will be thrown.</strong></p>\n<blockquote>\n<p>Also, if you are doing international transfers, you must pass a meta parameter as part of your payload as shown below:</p>\n</blockquote>\n<pre><span class=\"s2\">\"meta\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"AccountNumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"09182972BH\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"RoutingNumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0000000002993\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"SwiftCode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ABJG190\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"BankName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"BANK OF AMERICA, N.A., SAN FRANCISCO, CA\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"BeneficiaryName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mark Cuban\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"BeneficiaryAddress\"</span><span class=\"p\">:</span> <span class=\"s2\">\"San Francisco, 4 Newton\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"BeneficiaryCountry\"</span><span class=\"p\">:</span> <span class=\"s2\">\"US\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>A sample initiate call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">initiate</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"account_bank\"</span><span class=\"p\">:</span> <span class=\"s2\">\"044\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"account_number\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0690000044\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"narration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"New transfer\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NGN\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"beneficiary_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Kwame Adew\"</span>\n    <span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2671</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2671</span><span class=\"p\">,</span> <span class=\"s1\">'account_number'</span><span class=\"p\">:</span> <span class=\"s1\">'0690000044'</span><span class=\"p\">,</span> <span class=\"s1\">'bank_code'</span><span class=\"p\">:</span> <span class=\"s1\">'044'</span><span class=\"p\">,</span> <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'Mercedes Daniel'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T08:37:20.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s1\">'fee'</span><span class=\"p\">:</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'NEW'</span><span class=\"p\">,</span> <span class=\"s1\">'reference'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1539074239367'</span><span class=\"p\">,</span> <span class=\"s1\">'meta'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'narration'</span><span class=\"p\">:</span> <span class=\"s1\">'New transfer'</span><span class=\"p\">,</span> <span class=\"s1\">'complete_message'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">'requires_approval'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'is_approved'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bank_name'</span><span class=\"p\">:</span> <span class=\"s1\">'ACCESS BANK NIGERIA'</span><span class=\"p\">}}</span>\n</pre>\n<p>This call raises an <code>IncompletePaymentDetailsError</code> if there was a problem processing your transaction. The <code>IncompletePaymentDetailsError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">IncompletePaymentDetailsError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.bulk(bulkDetails)</code></h3>\n<p>This initiates a bulk transfer to the customers specified in the <code>bulkDetails</code> object. When a transfer is initiated, it comes with a status NEW this means the transfer has been queued for processing.</p>\n<p>A sample bulk call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">bulk</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"title\"</span><span class=\"p\">:</span><span class=\"s2\">\"May Staff Salary\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"bulk_data\"</span><span class=\"p\">:[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"Ban\"</span><span class=\"p\">:</span><span class=\"s2\">\"044\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"Account Number\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0690000032\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"Amount\"</span><span class=\"p\">:</span><span class=\"mi\">500</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"Currency\"</span><span class=\"p\">:</span><span class=\"s2\">\"NGN\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"Narration\"</span><span class=\"p\">:</span><span class=\"s2\">\"Bulk transfer 1\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"reference\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mk-82973029\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"Bank\"</span><span class=\"p\">:</span><span class=\"s2\">\"044\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"Account Number\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0690000034\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"Amount\"</span><span class=\"p\">:</span><span class=\"mi\">500</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"Currency\"</span><span class=\"p\">:</span><span class=\"s2\">\"NGN\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"Narration\"</span><span class=\"p\">:</span><span class=\"s2\">\"Bulk transfer 2\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"reference\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mk-283874750\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'BULK-TRANSFER-CREATED'</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">499</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">499</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T09:13:54.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'approver'</span><span class=\"p\">:</span> <span class=\"s1\">'N/A'</span><span class=\"p\">}}</span>\n</pre>\n<p>This call raises an <code>InitiateTransferError</code> if there was a problem processing your transaction. The <code>InitiateTransferError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">InitiateTransferError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.fetch(reference=None)</code></h3>\n<p>This allows you retrieve a single transfer. You may or may not pass in a <code>reference</code>. If you do not pass in a reference, all transfers that have been processed will be returned.</p>\n<p>A sample fetch call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s2\">\"mk-82973029\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'QUERIED-TRANSFERS'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'page_info'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'current_page'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'total_pages'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"s1\">'transfers'</span><span class=\"p\">:</span> <span class=\"p\">[]}}}</span>\n</pre>\n<p>This call raises a <code>TransferFetchError</code> if there was a problem processing your transaction. The <code>TransferFetchError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransferFetchError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.all()</code></h3>\n<p>This allows you retrieve all transfers.</p>\n<p>A sample all Transfers call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'QUERIED-TRANSFERS'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'page_info'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"s1\">'current_page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'total_pages'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"s1\">'transfers'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2676</span><span class=\"p\">,</span> <span class=\"s1\">'account_number'</span><span class=\"p\">:</span> <span class=\"s1\">'0690000044'</span><span class=\"p\">,</span> <span class=\"s1\">'bank_code'</span><span class=\"p\">:</span> <span class=\"s1\">'044'</span><span class=\"p\">,</span> <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'Mercedes Daniel'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T09:37:12.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'debit_currency'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s1\">'fee'</span><span class=\"p\">:</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'PENDING'</span><span class=\"p\">,</span> <span class=\"s1\">'reference'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1539077832148'</span><span class=\"p\">,</span> <span class=\"s1\">'meta'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'narration'</span><span class=\"p\">:</span> <span class=\"s1\">'New transfer'</span><span class=\"p\">,</span> <span class=\"s1\">'approver'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'complete_message'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">'requires_approval'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'is_approved'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bank_name'</span><span class=\"p\">:</span> <span class=\"s1\">'ACCESS BANK NIGERIA'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2673</span><span class=\"p\">,</span> <span class=\"s1\">'account_number'</span><span class=\"p\">:</span> <span class=\"s1\">'0690000044'</span><span class=\"p\">,</span> <span class=\"s1\">'bank_code'</span><span class=\"p\">:</span> <span class=\"s1\">'044'</span><span class=\"p\">,</span> <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'Mercedes Daniel'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T09:31:37.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'debit_currency'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s1\">'fee'</span><span class=\"p\">:</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'FAILED'</span><span class=\"p\">,</span> <span class=\"s1\">'reference'</span><span class=\"p\">:</span> <span class=\"s1\">'MC-1539077498173'</span><span class=\"p\">,</span> <span class=\"s1\">'meta'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'narration'</span><span class=\"p\">:</span> <span class=\"s1\">'New transfer'</span><span class=\"p\">,</span> <span class=\"s1\">'approver'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'complete_message'</span><span class=\"p\">:</span> <span class=\"s1\">'DISBURSE FAILED: Insufficient funds'</span><span class=\"p\">,</span> <span class=\"s1\">'requires_approval'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'is_approved'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bank_name'</span><span class=\"p\">:</span> <span class=\"s1\">'ACCESS BANK NIGERIA'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2672</span><span class=\"p\">,</span> <span class=\"s1\">'account_number'</span><span class=\"p\">:</span> <span class=\"s1\">'0690000034'</span><span class=\"p\">,</span> <span class=\"s1\">'bank_code'</span><span class=\"p\">:</span> <span class=\"s1\">'044'</span><span class=\"p\">,</span> <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'Ade Bond'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T09:13:56.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'debit_currency'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s1\">'fee'</span><span class=\"p\">:</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'FAILED'</span><span class=\"p\">,</span> <span class=\"s1\">'reference'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'meta'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'narration'</span><span class=\"p\">:</span> <span class=\"s1\">'Bulk transfer 2'</span><span class=\"p\">,</span> <span class=\"s1\">'approver'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'complete_message'</span><span class=\"p\">:</span> <span class=\"s1\">'DISBURSE FAILED: Insufficient funds'</span><span class=\"p\">,</span> <span class=\"s1\">'requires_approval'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'is_approved'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bank_name'</span><span class=\"p\">:</span> <span class=\"s1\">'ACCESS BANK NIGERIA'</span><span class=\"p\">}]}}}</span>\n</pre>\n<p>This call raises a <code>TransferFetchError</code> if there was a problem processing your transaction. The <code>TransferFetchError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransferFetchError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.getFee(currency)</code></h3>\n<p>This allows you get transfer rates for all Rave supported currencies. You may or may not pass in a <code>currency</code>. If you do not pass in a <code>currency</code>, all Rave supported currencies transfer rates will be returned.</p>\n<p>A sample getFee call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">getFee</span><span class=\"p\">(</span><span class=\"s2\">\"EUR\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'TRANSFER-FEES'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">'fee_type'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'EUR'</span><span class=\"p\">,</span> <span class=\"s1\">'fee'</span><span class=\"p\">:</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"s1\">'createdAt'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'updatedAt'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'deletedAt'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'AccountId'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}]}}</span>\n</pre>\n<h3><code>.getBalance(currency)</code></h3>\n<p>This allows you get your balance in a specified. You may or may not pass in a <code>currency</code>. If you do not pass in a <code>currency</code>, your balance will be returned in the currency specified in your rave account</p>\n<p>A sample fetch call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">Balance</span><span class=\"p\">(</span><span class=\"s2\">\"EUR\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'WALLET-BALANCE'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'Id'</span><span class=\"p\">:</span> <span class=\"mi\">27122</span><span class=\"p\">,</span> <span class=\"s1\">'ShortName'</span><span class=\"p\">:</span> <span class=\"s1\">'EUR'</span><span class=\"p\">,</span> <span class=\"s1\">'WalletNumber'</span><span class=\"p\">:</span> <span class=\"s1\">'3855000502677'</span><span class=\"p\">,</span> <span class=\"s1\">'AvailableBalance'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'LedgerBalance'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}}}</span>\n</pre>\n<br>\n<h3>Complete transfer flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"ENTER_YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENTER_YOUR_SECRET_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">initiate</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"account_bank\"</span><span class=\"p\">:</span> <span class=\"s2\">\"044\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"account_number\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0690000044\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"narration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"New transfer\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NGN\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"beneficiary_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Kwame Adew\"</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">bulk</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"bulk_data\"</span><span class=\"p\">:[</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">})</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n    <span class=\"n\">balanceres</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">getBalance</span><span class=\"p\">(</span><span class=\"s2\">\"NGN\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">balanceres</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">IncompletePaymentDetailsError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">InitiateTransferError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransferFetchError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">ServerError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h2><code>rave.Subscriptions</code></h2>\n<p>This is used to initiate and manage Subscriptions</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.all</code></p>\n</li>\n<li>\n<p><code>.fetch</code></p>\n</li>\n<li>\n<p><code>.cancel</code></p>\n</li>\n<li>\n<p><code>.activate</code></p>\n</li>\n</ul>\n<h3><code>.all()</code></h3>\n<p>This allows you retrieve all subscriptions</p>\n<p>A sample all subscriptions call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Subscriptions</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'SUBSCRIPTIONS-FETCHED'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'page_info'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'current_page'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'total_pages'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"s1\">'plansubscriptions'</span><span class=\"p\">:</span> <span class=\"p\">[]}}}</span>\n</pre>\n<p>This call raises a <code>PlanStatusError</code> if there was a problem processing your transaction. The <code>PlanStatusError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.fetch(subscription_id, subscription_email)</code></h3>\n<p>This allows you fetch a subscription. You may or may not pass in a <code>subscription_id</code> or <code>subscription_email</code>. If you do not pass in a <code>subscription_id</code> or <code>subscription_email</code> all subscriptions will be returned.</p>\n<blockquote>\n<p>subscription_id: This is the subscription ID.</p>\n</blockquote>\n<blockquote>\n<p>subscription_email: This is the subscription email.</p>\n</blockquote>\n<p>A sample fetch subscription call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Subscriptions</span><span class=\"o\">.</span><span class=\"n\">fetchSubscription</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'SUBSCRIPTIONS-FETCHED'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'page_info'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'current_page'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'total_pages'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"s1\">'plansubscriptions'</span><span class=\"p\">:</span> <span class=\"p\">[]}}}</span>\n</pre>\n<p>This call raises a <code>PlanStatusError</code> if there was a problem processing your transaction. The <code>PlanStatusError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.cancelSubscription(subscription_id)</code></h3>\n<p>This allows you cancel a subscription.</p>\n<blockquote>\n<p>subscription_id: This is the subscription ID. It can be gotten from the Rave Dashboard</p>\n</blockquote>\n<p>A sample cancel subscription call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Subscriptions</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">)</span>\n</pre>\n<p>This call raises a <code>PlanStatusError</code> if there was a problem processing your transaction. The <code>PlanStatusError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.activate(subscription_id)</code></h3>\n<p>This allows you activate a subscription.</p>\n<blockquote>\n<p>subscription_id: This is the subscription ID. It can be gotten from the Rave Dashboard</p>\n</blockquote>\n<p>A sample activate subscription call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Subscriptions</span><span class=\"o\">.</span><span class=\"n\">activate</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">)</span>\n</pre>\n<p>This call raises a <code>PlanStatusError</code> if there was a problem processing your transaction. The <code>PlanStatusError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3>Complete Subscriptions flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">Misc</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"YOUR_PRIVATE_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n   \n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Subscriptions</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Subscriptions</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"mi\">880</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Subscriptions</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"mi\">880</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">ServerError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h2><code>rave.PaymentPlan</code></h2>\n<p>This is used to initiate and manage payment plans</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.create</code></p>\n</li>\n<li>\n<p><code>.all</code></p>\n</li>\n<li>\n<p><code>.fetch</code></p>\n</li>\n<li>\n<p><code>.cancelPlan</code></p>\n</li>\n<li>\n<p><code>.edit</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.create(planDetails)</code></h3>\n<p>This allows a customer to create a payment plan. It requires a dict <code>planDetails</code> containing <code>amount</code>, <code>name</code>, <code>interval</code>, <code>duration</code>.</p>\n<blockquote>\n<p>amount: this is the amount for the plan</p>\n</blockquote>\n<blockquote>\n<p>name: This is what would appear on the subscription reminder email</p>\n</blockquote>\n<blockquote>\n<p>interval: This are the charge intervals possible values are:</p>\n</blockquote>\n<pre><code>daily;\nweekly;\nmonthly;\nyearly;\nquarterly;\nbi-anually;\nevery 2 days;\nevery 90 days;\nevery 5 weeks;\nevery 12 months;\nevery 6 years;\nevery x y (where x is a number and y is the period e.g. every 5 months)\n</code></pre>\n<blockquote>\n<p>duration: This is the frequency, it is numeric, e.g. if set to 5 and intervals is set to monthly you would be charged 5 months, and then the subscription stops.</p>\n</blockquote>\n<p>More information can be found <a href=\"https://developer.flutterwave.com/v2.0/reference#create-payment-plan\" rel=\"nofollow\">here</a></p>\n<p><strong>If duration is not passed, any subscribed customer will be charged indefinitely</strong></p>\n<p>A sample create call is:</p>\n<pre> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">PaymentPlan</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"duration\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ultimate Play\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"interval\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5\"</span>\n <span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">890</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">890</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ultimate Play'</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'interval'</span><span class=\"p\">:</span> <span class=\"s1\">'dai'</span><span class=\"p\">,</span> <span class=\"s1\">'duration'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'plan_token'</span><span class=\"p\">:</span> <span class=\"s1\">'rpp_af8ea4d5d785d08f47d8'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T10:03:00.000Z'</span><span class=\"p\">}}</span>\n</pre>\n<p>This call raises an <code>IncompletePaymentDetailsError</code> if there was a problem processing your transaction. The <code>IncompletePaymentDetailsError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">IncompletePaymentDetailsError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.all()</code></h3>\n<p>This allows you retrieve all payment plans.</p>\n<p>A sample all plans call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'QUERIED-PAYMENTPLANS'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'page_info'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s1\">'current_page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'total_pages'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"s1\">'paymentplans'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">890</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ultimate Play'</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'interval'</span><span class=\"p\">:</span> <span class=\"s1\">'dai'</span><span class=\"p\">,</span> <span class=\"s1\">'duration'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'plan_token'</span><span class=\"p\">:</span> <span class=\"s1\">'rpp_af8ea4d5d785d08f47d8'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T10:03:00.000Z'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">885</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'N/A'</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'interval'</span><span class=\"p\">:</span> <span class=\"s1\">'daily'</span><span class=\"p\">,</span> <span class=\"s1\">'duration'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'cancelled'</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'plan_token'</span><span class=\"p\">:</span> <span class=\"s1\">'rpp_19c8a7af7a06351fd78b'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-05T17:16:15.000Z'</span><span class=\"p\">}]}}}</span>\n</pre>\n<p>This call raises a <code>PlanStatusError</code> if there was a problem processing your transaction. The <code>PlanStatusError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.fetch(plan_id, plan_name)</code></h3>\n<p>This allows you fetch a payment plan. You may or may not pass in a <code>plan_id</code> or <code>plan_name</code>. If you do not pass in a <code>plan_id</code> or <code>plan_name</code>, all payment plans will be returned.</p>\n<blockquote>\n<p>plan_id: This is the payment plan ID. It can be gotten from the response returned from creating a plan or from the Rave Dashboard</p>\n</blockquote>\n<blockquote>\n<p>plan_name: This is the payment plan name. It can be gotten from the response returned from creating a plan or from the Rave Dashboard</p>\n</blockquote>\n<p>A sample fetch plan call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'QUERIED-PAYMENTPLANS'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'page_info'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'current_page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'total_pages'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"s1\">'paymentplans'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">890</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ultimate Play'</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'interval'</span><span class=\"p\">:</span> <span class=\"s1\">'dai'</span><span class=\"p\">,</span> <span class=\"s1\">'duration'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'plan_token'</span><span class=\"p\">:</span> <span class=\"s1\">'rpp_af8ea4d5d785d08f47d8'</span><span class=\"p\">,</span> <span class=\"s1\">'date_created'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T10:03:00.000Z'</span><span class=\"p\">}]}}}</span>\n</pre>\n<p>This call raises a <code>PlanStatusError</code> if there was a problem processing your transaction. The <code>PlanStatusError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.cancelPlan(plan_id)</code></h3>\n<p>This allows you cancel a payment plan. It requires that you pass in an <code>plan_id</code>.</p>\n<blockquote>\n<p>plan_id: This is the payment plan ID. It can be gotten from the response returned from creating a plan or from the Rave Dashboard</p>\n</blockquote>\n<p>A sample cancelPlan call is:</p>\n<pre><span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"o\">.</span><span class=\"n\">cancelPlan</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'PLAN-CANCELED'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">890</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ultimate Play'</span><span class=\"p\">,</span> <span class=\"s1\">'uuid'</span><span class=\"p\">:</span> <span class=\"s1\">'rpp_af8ea4d5d785d08f47d8'</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'cancelled'</span><span class=\"p\">,</span> <span class=\"s1\">'start'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'stop'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'initial_charge_amount'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'duration'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'interval'</span><span class=\"p\">:</span> <span class=\"s1\">'dai'</span><span class=\"p\">,</span> <span class=\"s1\">'createdAt'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T10:03:00.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'updatedAt'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T10:17:14.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'deletedAt'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'AccountId'</span><span class=\"p\">:</span> <span class=\"mi\">5949</span><span class=\"p\">,</span> <span class=\"s1\">'paymentpageId'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}}}</span>\n</pre>\n<p>This call raises a <code>PlanStatusError</code> if there was a problem processing your transaction. The <code>PlanStatusError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.edit(plan_id, newData={})</code></h3>\n<p>This allows you edit a payment plan. It requires that you pass in an <code>plan_id</code>. If you do not pass in the <code>newData</code> dict containing the change you want to make to your plan, the plan stays the same.</p>\n<blockquote>\n<p>plan_id: This is the payment plan ID. It can be gotten from the response returned from creating a plan or from the Rave Dashboard</p>\n</blockquote>\n<blockquote>\n<p>newData: A <code>dict</code> that must contain one or both of: <code>name</code>, <code>status</code> as properties.\n<code>name</code> specifies the new name for your payment plan.\n<code>status</code> : possible values are <code>active</code> and <code>cancelled</code></p>\n</blockquote>\n<p>A sample cancel plan call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">PaymentPlan</span><span class=\"o\">.</span><span class=\"n\">editPlan</span><span class=\"p\">(</span><span class=\"mi\">880</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jack's Plan\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"active\"</span>\n<span class=\"p\">})</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'returnedData'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'success'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'PLAN-EDITED'</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">880</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s2\">\"Jack's Plan\"</span><span class=\"p\">,</span> <span class=\"s1\">'uuid'</span><span class=\"p\">:</span> <span class=\"s1\">'rpp_237e94690d8e7089c07b'</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"s1\">'start'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'stop'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'initial_charge_amount'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'NGN'</span><span class=\"p\">,</span> <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'duration'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'interval'</span><span class=\"p\">:</span> <span class=\"s1\">'dai'</span><span class=\"p\">,</span> <span class=\"s1\">'createdAt'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-05T17:13:16.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'updatedAt'</span><span class=\"p\">:</span> <span class=\"s1\">'2018-10-09T10:25:25.000Z'</span><span class=\"p\">,</span> <span class=\"s1\">'deletedAt'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'AccountId'</span><span class=\"p\">:</span> <span class=\"mi\">5949</span><span class=\"p\">,</span> <span class=\"s1\">'paymentpageId'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}}}</span>\n</pre>\n<p>This call raises a <code>PlanStatusError</code> if there was a problem processing your transaction. The <code>PlanStatusError</code> contains some information about your transaction. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">PlanStatusError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<br>\n<h3>Complete PaymentPlan flow</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rave_python</span> <span class=\"kn\">import</span> <span class=\"n\">Rave</span><span class=\"p\">,</span> <span class=\"n\">Misc</span><span class=\"p\">,</span> <span class=\"n\">RaveExceptions</span>\n<span class=\"n\">rave</span> <span class=\"o\">=</span> <span class=\"n\">Rave</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR_PUBLIC_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"YOUR_PRIVATE_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">usingEnv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">PaymentPlan</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"duration\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ultimate Plan\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"interval\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dai\"</span>\n    <span class=\"p\">})</span>\n    \n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">PaymentPlan</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">(</span><span class=\"mi\">880</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jack's Plan\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"active\"</span>\n    <span class=\"p\">})</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">IncompletePaymentDetailsError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">TransferFetchError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">ServerError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h2><code>rave.Ussd</code></h2>\n<blockquote>\n<p><strong>NOTE:</strong> This payment option is still in beta mode.</p>\n</blockquote>\n<br>\n<h2><code>rave.VirtualAccount</code></h2>\n<p>This is used to create virtual account for transfers.</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li><code>.create</code></li>\n</ul>\n<br>\n<h3><code>.create(accountDetails)</code></h3>\n<p>This allows a customer to create a virtual card. It requires a dict <code>vcardDetails</code> containing <code>email</code>, <code>seckey</code>, <code>is_permanant</code>, <code>frequency</code>, <code>duration</code> and  <code>narration</code>.</p>\n<p>A sample Create call is:</p>\n<pre> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">VirtualAccount</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span>\n\t<span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"user@example.com\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"seckey\"</span><span class=\"p\">:</span> <span class=\"s2\">\"FLWSECK-****************************-X\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"is_permanent\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n<span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"success\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"BANKTRANSFERS-ACCOUNTNUMBER-CREATED\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"response_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"02\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"response_message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Transaction in progress\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"flw_reference\"</span><span class=\"p\">:</span> <span class=\"s2\">\"FLW-89298329b9794587807aa775cda5db9f\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"accountnumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1357960669\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"accountstatus\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ACTIVE\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"frequency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"N/A\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"bankname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Highstreet MFB\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"created_on\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-08-20 12:18:46\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"expiry_date\"</span><span class=\"p\">:</span> <span class=\"s2\">\"N/A\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"note\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Please make a bank transfer to Raver\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"n\">null</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This call raises an <code>IncompleteAccountDetailsError</code> if there was a problem creating your virtual account. The <code>IncompleteCardDetailsError</code> contains some information about your virtual account. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">IncompleteAccountDetailsError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<br>\n<h2><code>rave.VirtualCard</code></h2>\n<p>This is used to create virtual cards and carry out other virtual card operations.</p>\n<p><strong>Functions included:</strong></p>\n<ul>\n<li>\n<p><code>.create</code></p>\n</li>\n<li>\n<p><code>.all</code></p>\n</li>\n<li>\n<p><code>.get</code></p>\n</li>\n<li>\n<p><code>.cancel</code></p>\n</li>\n<li>\n<p><code>.freeze</code></p>\n</li>\n<li>\n<p><code>.unfreeze</code></p>\n</li>\n<li>\n<p><code>.fund</code></p>\n</li>\n<li>\n<p><code>.withdraw</code></p>\n</li>\n</ul>\n<br>\n<h3><code>.create(vcardDetails)</code></h3>\n<p>This allows a customer to create a virtual card. It requires a dict <code>vcardDetails</code> containing <code>currency</code>, <code>amount</code>, <code>billing name</code>, <code>billing address</code>, <code>billing city</code>, <code>billing state</code>, <code>billing postal code</code>, <code>billing country</code></p>\n<p>A sample Create call is:</p>\n<pre> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">VirtualCard</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NGN\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"100\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"billing_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Corvus james\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"billing_address\"</span><span class=\"p\">:</span> <span class=\"s2\">\"8, Providence Street\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"billing_city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lekki\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"billing_state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lagos\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"billing_postal_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"100001\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"billing_country\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NG\"</span><span class=\"p\">,</span>\n <span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span><span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"success\"</span><span class=\"p\">,</span> <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Card created successfully\"</span><span class=\"p\">,</span> <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"c3ff3ac4-784b-4d07-9fc7-b5b9cde75752\"</span><span class=\"p\">,</span> <span class=\"s2\">\"AccountId\"</span><span class=\"p\">:</span> <span class=\"mi\">507</span><span class=\"p\">,</span> <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"100.00\"</span><span class=\"p\">,</span> <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NGN\"</span><span class=\"p\">,</span> <span class=\"s2\">\"card_hash\"</span><span class=\"p\">:</span> <span class=\"s2\">\"c3ff3ac4-784b-4d07-9fc7-b5b9cde75752\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cardpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5563389915692128\"</span><span class=\"p\">,</span> <span class=\"s2\">\"maskedpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"556338*******2128\"</span><span class=\"p\">,</span> <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lekki\"</span><span class=\"p\">,</span> <span class=\"s2\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lagos\"</span><span class=\"p\">,</span> <span class=\"s2\">\"address_1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"8, Providence Street\"</span><span class=\"p\">,</span> <span class=\"s2\">\"address_2\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span> <span class=\"s2\">\"zip_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"100001\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cvv\"</span><span class=\"p\">:</span> <span class=\"s2\">\"408\"</span><span class=\"p\">,</span> <span class=\"s2\">\"expiration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2022-01\"</span><span class=\"p\">,</span> <span class=\"s2\">\"send_to\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span> <span class=\"s2\">\"bin_check_name\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span> <span class=\"s2\">\"card_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mastercard\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name_on_card\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Corvus james\"</span><span class=\"p\">,</span> <span class=\"s2\">\"date_created\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-01-30T16:45:45.550663+00:00\"</span><span class=\"p\">,</span> <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"n\">true</span><span class=\"p\">}}</span>\n</pre>\n<p>This call raises an <code>IncompleteCardDetailsError</code> if there was a problem creating your card. The <code>IncompleteCardDetailsError</code> contains some information about the error encountered in creating your card. You can handle this as such:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span> \n    <span class=\"c1\">#Your charge call</span>\n<span class=\"k\">except</span> <span class=\"n\">RaveExceptions</span><span class=\"o\">.</span><span class=\"n\">IncompleteCardDetailsError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"errMsg\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"s2\">\"flwRef\"</span><span class=\"p\">])</span>\n</pre>\n<h3><code>.all()</code></h3>\n<p>This allows a the user to query all cards</p>\n<p>A sample Create call is:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">VirtualCard</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"success\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"SUCCESSFUL\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"660bae3b-333c-410f-b283-2d181587247f\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"AccountId\"</span><span class=\"p\">:</span> <span class=\"mi\">507</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.00\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_hash\"</span><span class=\"p\">:</span> <span class=\"s2\">\"660bae3b-333c-410f-b283-2d181587247f\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cardpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5563384241646062\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"maskedpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"556338*******6062\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hillside\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"New jersey\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"471 mundet pl\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_2\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"zip_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"07205\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cvv\"</span><span class=\"p\">:</span> <span class=\"s2\">\"480\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"expiration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2022-01\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"send_to\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"bin_check_name\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mastercard\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name_on_card\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ruby cupp\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"date_created\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-01-26T04:00:10.263Z\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"6b7daf10-ade2-4633-a2ab-ea5495bb0ce2\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"AccountId\"</span><span class=\"p\">:</span> <span class=\"mi\">507</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10.00\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_hash\"</span><span class=\"p\">:</span> <span class=\"s2\">\"6b7daf10-ade2-4633-a2ab-ea5495bb0ce2\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cardpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5563387512530188\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"maskedpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"556338*******0188\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hillside\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"New jersey\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"471 mundet pl\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_2\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"zip_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"07205\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cvv\"</span><span class=\"p\">:</span> <span class=\"s2\">\"248\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"expiration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2022-01\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"send_to\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"bin_check_name\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mastercard\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name_on_card\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Paige graffunder\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"date_created\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-01-27T10:52:31.65Z\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"f32a2067-1b5e-419f-ae5c-69f968ee85db\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"AccountId\"</span><span class=\"p\">:</span> <span class=\"mi\">507</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.00\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_hash\"</span><span class=\"p\">:</span> <span class=\"s2\">\"f32a2067-1b5e-419f-ae5c-69f968ee85db\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cardpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5563387304903023\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"maskedpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"556338*******3023\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hillside\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"New jersey\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"471 mundet pl\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_2\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"zip_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"07205\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cvv\"</span><span class=\"p\">:</span> <span class=\"s2\">\"994\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"expiration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2022-01\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"send_to\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"bin_check_name\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mastercard\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name_on_card\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Donna Gaydosh\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"date_created\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-01-27T11:10:29.333Z\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3ff39cd4-4451-403d-874a-f90fa67fd1b8\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"AccountId\"</span><span class=\"p\">:</span> <span class=\"mi\">507</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.00\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_hash\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3ff39cd4-4451-403d-874a-f90fa67fd1b8\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cardpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5563380574586529\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"maskedpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"556338*******6529\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hillside\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"New jersey\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"471 mundet pl\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_2\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"zip_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"07205\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cvv\"</span><span class=\"p\">:</span> <span class=\"s2\">\"950\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"expiration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2022-01\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"send_to\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"bin_check_name\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mastercard\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name_on_card\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Stephanie elmer\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"date_created\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-01-27T11:12:26.68Z\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cabbea77-9040-47b4-ac05-b7d1d804173b\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"AccountId\"</span><span class=\"p\">:</span> <span class=\"mi\">507</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.00\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_hash\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cabbea77-9040-47b4-ac05-b7d1d804173b\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cardpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5563388312887679\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"maskedpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"556338*******7679\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hillside\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"New jersey\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"471 mundet pl\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_2\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"zip_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"07205\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cvv\"</span><span class=\"p\">:</span> <span class=\"s2\">\"147\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"expiration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2022-01\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"send_to\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"bin_check_name\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mastercard\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name_on_card\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jack Ma\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"date_created\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-01-27T15:20:20.52Z\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"c3ff3ac4-784b-4d07-9fc7-b5b9cde75752\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"AccountId\"</span><span class=\"p\">:</span> <span class=\"mi\">507</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"12.00\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_hash\"</span><span class=\"p\">:</span> <span class=\"s2\">\"c3ff3ac4-784b-4d07-9fc7-b5b9cde75752\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cardpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5563389915692128\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"maskedpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"556338*******2128\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hillside\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"New jersey\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"471 mundet pl\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"address_2\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"zip_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"07205\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"cvv\"</span><span class=\"p\">:</span> <span class=\"s2\">\"408\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"expiration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2022-01\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"send_to\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"bin_check_name\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"card_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mastercard\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name_on_card\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jamiu Ganiu\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"date_created\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-01-30T16:45:47.233Z\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<h3><code>.get()</code></h3>\n<p>This allows a the user to query the details of a card with a given id.</p>\n<p>A sample Create call is:</p>\n<pre><span class=\"n\">card_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"660bae3b-333c-410f-b283-2d181587247f\"</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">VirtualCard</span><span class=\"o\">.</span><span class=\"n\">getCard</span><span class=\"p\">(</span><span class=\"n\">card_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"success\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"SUCCESSFUL\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"660bae3b-333c-410f-b283-2d181587247f\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"AccountId\"</span><span class=\"p\">:</span> <span class=\"mi\">507</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"21.00\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"card_hash\"</span><span class=\"p\">:</span> <span class=\"s2\">\"660bae3b-333c-410f-b283-2d181587247f\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"cardpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5563384241646062\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"maskedpan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"556338*******6062\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hillside\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"state\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"address_1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"471 mundet pl\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"address_2\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"zip_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"07205\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"cvv\"</span><span class=\"p\">:</span> <span class=\"s2\">\"480\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"expiration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2022-01\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"send_to\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"bin_check_name\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"card_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mastercard\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"name_on_card\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"date_created\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-01-30T17:01:47.0972087+00:00\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h3><code>.cancel()</code></h3>\n<p>This allows a the user to terminate the use of a card with a given id permanently. This cancellation results in the permanent deletion of the card.</p>\n<p>A sample Create call is:</p>\n<pre><span class=\"n\">card_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"660bae3b-333c-410f-b283-2d181587247f\"</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">VirtualCard</span><span class=\"o\">.</span><span class=\"n\">cancelCard</span><span class=\"p\">(</span><span class=\"n\">card_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"Status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"success\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"Message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Card terminated successfully\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"Reference\"</span><span class=\"p\">:</span> <span class=\"n\">null</span>\n<span class=\"p\">}</span>\n</pre>\n<h3><code>.freeze()</code></h3>\n<p>This allows a the user to terminate the use of a card with a given id temporarily. This cancellation results in the temporary suspension of the card</p>\n<p>A sample Create call is:</p>\n<pre><span class=\"n\">card_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"660bae3b-333c-410f-b283-2d181587247f\"</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">VirtualCard</span><span class=\"o\">.</span><span class=\"n\">freezeCard</span><span class=\"p\">(</span><span class=\"n\">card_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"Status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"success\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"Message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Card freeze successful\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"Reference\"</span><span class=\"p\">:</span> <span class=\"n\">null</span>\n<span class=\"p\">}</span>\n</pre>\n<h3><code>.unfreeze()</code></h3>\n<p>This allows a the user to resume the use of a temporarily suspended or frozen card with a given id.</p>\n<p>A sample Create call is:</p>\n<pre><span class=\"n\">card_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"660bae3b-333c-410f-b283-2d181587247f\"</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">VirtualCard</span><span class=\"o\">.</span><span class=\"n\">getCard</span><span class=\"p\">(</span><span class=\"n\">card_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"Status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"success\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"Message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Card unfreeze successful\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"Reference\"</span><span class=\"p\">:</span> <span class=\"n\">null</span>\n<span class=\"p\">}</span>\n</pre>\n<h3><code>.fund()</code></h3>\n<p>This allows a the user to add funds to a card with a given id. the <code>card_id</code>, <code>currency</code> and <code>amount</code> are passed into the <code>.fundCard()</code> method.</p>\n<p>A sample Create call is:</p>\n<pre><span class=\"n\">card_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"660bae3b-333c-410f-b283-2d181587247f\"</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">VirtualCard</span><span class=\"o\">.</span><span class=\"n\">fundCard</span><span class=\"p\">(</span><span class=\"n\">card_id</span><span class=\"p\">,</span> <span class=\"s2\">\"NGN\"</span><span class=\"p\">,</span> <span class=\"mi\">2000</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"Status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"success\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Card was funded successfully\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Reference\"</span><span class=\"p\">:</span> <span class=\"n\">null</span>\n<span class=\"p\">}</span>\n</pre>\n<h3><code>.Withdraw()</code></h3>\n<p>This allows a the user to withdraw funds from a card with a given id. the <code>card id</code> and <code>amount</code> are passed into the <code>.Withdraw()</code> method.</p>\n<p>A sample Create call is:</p>\n<pre><span class=\"n\">card_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"660bae3b-333c-410f-b283-2d181587247f\"</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rave</span><span class=\"o\">.</span><span class=\"n\">VirtualCard</span><span class=\"o\">.</span><span class=\"n\">Withdraw</span><span class=\"p\">(</span><span class=\"n\">card_id</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h4>Returns</h4>\n<p>This call returns a dictionary. A sample response is:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"Status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"success\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Withdrawal successful\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Reference\"</span><span class=\"p\">:</span> <span class=\"n\">null</span>\n<span class=\"p\">}</span>\n</pre>\n<br>\n<h2>Run Tests</h2>\n<p>All of the SDK's tests are written with Python's <code>unittest</code> module. The tests currently test:\n<code>rave.Account</code>\n<code>rave.Card</code>\n<code>rave.Transfer</code>\n<code>rave.Preauth</code>\n<code>rave.Subaccount</code>\n<code>rave.Subscriptions</code>\n<code>rave.Paymentplan</code></p>\n<p>They can be run like so:</p>\n<pre>python test.py\n</pre>\n<blockquote>\n<p><strong>NOTE:</strong> If the test fails for creating a subaccount, just change the <code>account_number</code> <code>account_bank</code>  and <code>businesss_email</code> to something different</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> The test may fail for account validation - <code>Pending OTP validation</code> depending on whether the service is down or not</p>\n</blockquote>\n<br>\n<h2>Support</h2>\n<p>For further assistance in using the SDK, you can contact the Developers on <a href=\"https://join.slack.com/t/flutterwavedevelopers/shared_invite/enQtNTk3MjgxMjU3ODI5LWFkMjBkYTc0ZGJhM2Q5MTY3YjFkYzAyYmM1ZDZjZjUwMjE4YTc2NjQ1ZGM5ZWE4NDUxMzc4MmExYmI1Yjg5ZWU\" rel=\"nofollow\">Slack</a> and <a href=\"mailto:developers@flutterwavego.com\">Email</a>. You can get more information about the amazing features here <a href=\"https://developer.flutterwave.com/reference#introduction\" rel=\"nofollow\">here</a>.</p>\n\n          </div>"}, "last_serial": 6334814, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a8a96b35c2dabf17af2b0ebb7efae4eb", "sha256": "c00021397e1ed1f7e8d57a4fc9bb1707a8735d41f3b44dfcdcf61460b69d032e"}, "downloads": -1, "filename": "rave_python-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a8a96b35c2dabf17af2b0ebb7efae4eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36565, "upload_time": "2019-02-21T19:11:31", "upload_time_iso_8601": "2019-02-21T19:11:31.798772Z", "url": "https://files.pythonhosted.org/packages/a4/23/377bc668a289863c3699ecfd31aae5f338a78af5a6476c14ed261aaaea58/rave_python-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d24b8c0ff547108b4332069906f2d945", "sha256": "a8ea71f0b3c8600247e3a9490e00a1e1ebed3a62fbfc402adcacd756c8d9c7d6"}, "downloads": -1, "filename": "rave_python-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d24b8c0ff547108b4332069906f2d945", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43935, "upload_time": "2019-02-21T19:11:34", "upload_time_iso_8601": "2019-02-21T19:11:34.183871Z", "url": "https://files.pythonhosted.org/packages/07/31/ab24a47fcd432aa5ba21fd3f4faca63d39fe50297670b7914c7a9edd6ab5/rave_python-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7487aeb63e71e6db90d4b6217405f707", "sha256": "6c8ee680cce011eb8a806f569997e1a3dbe776736954ff3ba9ff48fe0b9e5414"}, "downloads": -1, "filename": "rave_python-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7487aeb63e71e6db90d4b6217405f707", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36640, "upload_time": "2019-03-13T14:54:44", "upload_time_iso_8601": "2019-03-13T14:54:44.628980Z", "url": "https://files.pythonhosted.org/packages/92/e8/7b3c25f72d9bc3e0d222c4f9767ec5045d93f5ec976755639df3d95b0cb1/rave_python-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bae738c51c6fdd88eef8a136487c7e99", "sha256": "4ca1ea34c40bc924f418211dc3fa236954682f00c0b62755a7f67725387e9f5e"}, "downloads": -1, "filename": "rave_python-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bae738c51c6fdd88eef8a136487c7e99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44012, "upload_time": "2019-03-13T14:55:04", "upload_time_iso_8601": "2019-03-13T14:55:04.930163Z", "url": "https://files.pythonhosted.org/packages/5e/b7/e9bd72295f0354d3719d2ce8eb444cae10103bd9097eb3be30dbb39a31ad/rave_python-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e6c22835ba58e0a4fcb43ee69abca614", "sha256": "6d54333c39e0ce169b170939ea8f758f6571c435755ca89dafcbc85a7d5a530a"}, "downloads": -1, "filename": "rave_python-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e6c22835ba58e0a4fcb43ee69abca614", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39076, "upload_time": "2019-08-23T11:39:07", "upload_time_iso_8601": "2019-08-23T11:39:07.548086Z", "url": "https://files.pythonhosted.org/packages/5b/09/2186f4f6184c180531ec8a25100978a0a7452f2e161d23b3eca7fa264bd7/rave_python-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "803cf95b33e4795c2e343cdc1a5f8b0c", "sha256": "ccd02f1325ed3b42818d080b1944f7588adb70a1a3322e5dd20a7fccaa2e1232"}, "downloads": -1, "filename": "rave_python-1.0.2.tar.gz", "has_sig": false, "md5_digest": "803cf95b33e4795c2e343cdc1a5f8b0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44223, "upload_time": "2019-08-23T11:39:09", "upload_time_iso_8601": "2019-08-23T11:39:09.501163Z", "url": "https://files.pythonhosted.org/packages/ff/37/45a94226a0c238409a8a46050f276cff1df5b51f9f6bbd9d8a56ddeac586/rave_python-1.0.2.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "1fb3a678b2bf183f11c0e6b1a87312b1", "sha256": "7d0e08833813f10c9397b3d4c3fb75addca60311f5edc94c6326bc522b6c060b"}, "downloads": -1, "filename": "rave_python-1.1.2.tar.gz", "has_sig": false, "md5_digest": "1fb3a678b2bf183f11c0e6b1a87312b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 54915, "upload_time": "2019-12-19T19:26:07", "upload_time_iso_8601": "2019-12-19T19:26:07.930945Z", "url": "https://files.pythonhosted.org/packages/e5/9c/dff5856094b2c621be4ba2e582d18fed51914c97526e6693de268eff21ce/rave_python-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1fb3a678b2bf183f11c0e6b1a87312b1", "sha256": "7d0e08833813f10c9397b3d4c3fb75addca60311f5edc94c6326bc522b6c060b"}, "downloads": -1, "filename": "rave_python-1.1.2.tar.gz", "has_sig": false, "md5_digest": "1fb3a678b2bf183f11c0e6b1a87312b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 54915, "upload_time": "2019-12-19T19:26:07", "upload_time_iso_8601": "2019-12-19T19:26:07.930945Z", "url": "https://files.pythonhosted.org/packages/e5/9c/dff5856094b2c621be4ba2e582d18fed51914c97526e6693de268eff21ce/rave_python-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:01 2020"}