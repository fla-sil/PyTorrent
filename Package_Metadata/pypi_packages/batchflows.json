{"info": {"author": "Paulo Porto", "author_email": "cesarpaulomp@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Batchflows for Python 3\n\nThis tool will help you create and process a lot of data in an organized manner.\nYou can create batches of processing synchronously and asynchronously.\n\n*remember it's in BETA :D*\n\n### Get Started\n\n```python\nimport logging\n\nfrom batchflows.Batch import Batch\nfrom batchflows.Step import Step\n\n#First extend Step class and implement method execute\nclass SaveValueStep(Step):\n    def __init__(self, value_name, value):\n        #Remember name is required if you want use remote steps\n        super().__init__()\n        self.value_name = value_name\n        self.value = value\n\n    # \"_context\" is a dict you can use to store values that will be used in other steps.\n    def execute(self, _context):\n        #do what u have to do here!\n        _context[self.value_name] = self.value\n\n#creating a second step just to make the explanation richer\nclass SumCalculatorStep(Step):\n    def __init__(self, attrs):\n        super().__init__()\n        self.attrs = attrs\n\n    def execute(self, _context):\n        calc = 0.0\n        for attr in self.attrs:\n            calc += _context[attr]\n\n        _context['sum'] = calc\n\n#Here we create our batch!\nbatch = Batch()\nbatch.add_step(SaveValueStep('value01', 1))\nbatch.add_step(SaveValueStep('value02', 4))\nbatch.add_step(SumCalculatorStep(['value01', 'value02', 'other_value']))\n\n#You can add something useful to your steps before starting bath!\nbatch.context['other_value'] = 5\n\n#than execute your batch and be happy ;)\nbatch.execute()\n\nlogging.info(batch.context)\n```\n\n### Let's try run some parallel code\n\n```python\nimport logging\nimport time\n\nfrom batchflows.Batch import Batch\nfrom batchflows.Step import Step, ParallelFlows\n\n\nclass SomeStep(Step):\n    def execute(self, _context):\n        #count to 10 slowly\n        c = 0\n        while c < 10:\n            c += 1\n            print(c)\n            time.sleep(1)\n\n#Create your AsyncFlow\nlazy_counter = ParallelFlows('LazySteps01')\n#add steps so they run in parallel\nlazy_counter.add_step(SomeStep('lazy01'))\nlazy_counter.add_step(SomeStep('lazy02'))\n\nlazy_counter2 = ParallelFlows('LazySteps02')\nlazy_counter2.add_step(SomeStep('lazy03'))\nlazy_counter2.add_step(SomeStep('lazy04'))\n\nbatch = Batch()\nbatch.add_step(lazy_counter)\nbatch.add_step(lazy_counter2)\n\n#batchfllows will wait for each step to finish before executing the next one.\n#In this example lazy_counter will be called first and execute steps \"lazy01\" and \"lazy02\" in parallel.\n#Only when both steps finish ,the batch will star lazy_counter2\nbatch.execute()\n```\n### FileContextmanager and RemoteStep\n\nYou can extend RemoteStep class and make your code to run a remote batch.\nUnfortunately the basic context does not allow remote steps to be performed without customization.\nTo solve this problem we have FileContextManager\n\n# let's start by creating our main batch\n\n```python\ncontext_manager = FileContextManager(\n    filepath='/tmp', #where u set where you want batch create status file\n                     #you can put a disc that all your machines share\n    is_remote_step=False, #default false. You saying here this is the main batch\n    process_id='123ABC', #default random uuid. You can specify an id for the process. \n                         #This field is important for remote batches to be able to write the status file correctly.\n    process_name='batch name' #default random uuid. For the main batch this field has no importance, but for your remote batch\n                              #you need put the same name of remote-step\n    )\n\nbatch = Batch(context_manager=context_manager)\nbatch.add_step(RemoteBatchStep(\n                name='do-a-barrel-roll',\n                timeout=10 #in seconds\n            ))\n\nbatch.execute()\n```\n\n# now let's create our remote batch\n\n```python\ncontext_manager = FileContextManager(\n    filepath='/tmp',\n    is_remote_step=True,\n    process_id='123ABC', #exactly the same a main batch\n    process_name='do-a-barrel-roll'#exactly the same name as step\n    )\n\nbatch = Batch(context_manager=context_manager)\nbatch.add_step(...) # lot of cool things\nbatch.add_step(...) # lot of cool things\nbatch.add_step(...) # lot of cool things\n\nbatch.execute()\n```\n\n### customize your ContextManager\nYou can also extend the ContextManager class and create your way to run remote code.\n\n```python\nclass MyContextManager(ABCContextManager):\n    def __init__(self):\n        self.context = dict()\n        self.steps = []\n\n    #override this method to teach your customization how to identify if remote execution is ready\n    def is_remote_step_done(self, name: str):\n        raise NotImplementedError()\n\n    #override this method if you want to execute some code after batch conclude\n    def upon_completion(self, success: bool, error: str = None):\n        pass\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/pcmporto/batchflows/src/master", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "batchflows", "package_url": "https://pypi.org/project/batchflows/", "platform": "", "project_url": "https://pypi.org/project/batchflows/", "project_urls": {"Homepage": "https://bitbucket.org/pcmporto/batchflows/src/master"}, "release_url": "https://pypi.org/project/batchflows/2.0.0b0/", "requires_dist": null, "requires_python": "", "summary": "library for executing batches of data processing sequentially or asynchronously to python 3", "version": "2.0.0b0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Batchflows for Python 3</h1>\n<p>This tool will help you create and process a lot of data in an organized manner.\nYou can create batches of processing synchronously and asynchronously.</p>\n<p><em>remember it's in BETA :D</em></p>\n<h3>Get Started</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">batchflows.Batch</span> <span class=\"kn\">import</span> <span class=\"n\">Batch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">batchflows.Step</span> <span class=\"kn\">import</span> <span class=\"n\">Step</span>\n\n<span class=\"c1\">#First extend Step class and implement method execute</span>\n<span class=\"k\">class</span> <span class=\"nc\">SaveValueStep</span><span class=\"p\">(</span><span class=\"n\">Step</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value_name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"c1\">#Remember name is required if you want use remote steps</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value_name</span> <span class=\"o\">=</span> <span class=\"n\">value_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"c1\"># \"_context\" is a dict you can use to store values that will be used in other steps.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_context</span><span class=\"p\">):</span>\n        <span class=\"c1\">#do what u have to do here!</span>\n        <span class=\"n\">_context</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n<span class=\"c1\">#creating a second step just to make the explanation richer</span>\n<span class=\"k\">class</span> <span class=\"nc\">SumCalculatorStep</span><span class=\"p\">(</span><span class=\"n\">Step</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"n\">attrs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_context</span><span class=\"p\">):</span>\n        <span class=\"n\">calc</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">:</span>\n            <span class=\"n\">calc</span> <span class=\"o\">+=</span> <span class=\"n\">_context</span><span class=\"p\">[</span><span class=\"n\">attr</span><span class=\"p\">]</span>\n\n        <span class=\"n\">_context</span><span class=\"p\">[</span><span class=\"s1\">'sum'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">calc</span>\n\n<span class=\"c1\">#Here we create our batch!</span>\n<span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">Batch</span><span class=\"p\">()</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">SaveValueStep</span><span class=\"p\">(</span><span class=\"s1\">'value01'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">SaveValueStep</span><span class=\"p\">(</span><span class=\"s1\">'value02'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">SumCalculatorStep</span><span class=\"p\">([</span><span class=\"s1\">'value01'</span><span class=\"p\">,</span> <span class=\"s1\">'value02'</span><span class=\"p\">,</span> <span class=\"s1\">'other_value'</span><span class=\"p\">]))</span>\n\n<span class=\"c1\">#You can add something useful to your steps before starting bath!</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'other_value'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"c1\">#than execute your batch and be happy ;)</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n<h3>Let's try run some parallel code</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">batchflows.Batch</span> <span class=\"kn\">import</span> <span class=\"n\">Batch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">batchflows.Step</span> <span class=\"kn\">import</span> <span class=\"n\">Step</span><span class=\"p\">,</span> <span class=\"n\">ParallelFlows</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeStep</span><span class=\"p\">(</span><span class=\"n\">Step</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_context</span><span class=\"p\">):</span>\n        <span class=\"c1\">#count to 10 slowly</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">while</span> <span class=\"n\">c</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n            <span class=\"n\">c</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Create your AsyncFlow</span>\n<span class=\"n\">lazy_counter</span> <span class=\"o\">=</span> <span class=\"n\">ParallelFlows</span><span class=\"p\">(</span><span class=\"s1\">'LazySteps01'</span><span class=\"p\">)</span>\n<span class=\"c1\">#add steps so they run in parallel</span>\n<span class=\"n\">lazy_counter</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">SomeStep</span><span class=\"p\">(</span><span class=\"s1\">'lazy01'</span><span class=\"p\">))</span>\n<span class=\"n\">lazy_counter</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">SomeStep</span><span class=\"p\">(</span><span class=\"s1\">'lazy02'</span><span class=\"p\">))</span>\n\n<span class=\"n\">lazy_counter2</span> <span class=\"o\">=</span> <span class=\"n\">ParallelFlows</span><span class=\"p\">(</span><span class=\"s1\">'LazySteps02'</span><span class=\"p\">)</span>\n<span class=\"n\">lazy_counter2</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">SomeStep</span><span class=\"p\">(</span><span class=\"s1\">'lazy03'</span><span class=\"p\">))</span>\n<span class=\"n\">lazy_counter2</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">SomeStep</span><span class=\"p\">(</span><span class=\"s1\">'lazy04'</span><span class=\"p\">))</span>\n\n<span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">Batch</span><span class=\"p\">()</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">lazy_counter</span><span class=\"p\">)</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">lazy_counter2</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#batchfllows will wait for each step to finish before executing the next one.</span>\n<span class=\"c1\">#In this example lazy_counter will be called first and execute steps \"lazy01\" and \"lazy02\" in parallel.</span>\n<span class=\"c1\">#Only when both steps finish ,the batch will star lazy_counter2</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<h3>FileContextmanager and RemoteStep</h3>\n<p>You can extend RemoteStep class and make your code to run a remote batch.\nUnfortunately the basic context does not allow remote steps to be performed without customization.\nTo solve this problem we have FileContextManager</p>\n<h1>let's start by creating our main batch</h1>\n<pre><span class=\"n\">context_manager</span> <span class=\"o\">=</span> <span class=\"n\">FileContextManager</span><span class=\"p\">(</span>\n    <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'/tmp'</span><span class=\"p\">,</span> <span class=\"c1\">#where u set where you want batch create status file</span>\n                     <span class=\"c1\">#you can put a disc that all your machines share</span>\n    <span class=\"n\">is_remote_step</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"c1\">#default false. You saying here this is the main batch</span>\n    <span class=\"n\">process_id</span><span class=\"o\">=</span><span class=\"s1\">'123ABC'</span><span class=\"p\">,</span> <span class=\"c1\">#default random uuid. You can specify an id for the process. </span>\n                         <span class=\"c1\">#This field is important for remote batches to be able to write the status file correctly.</span>\n    <span class=\"n\">process_name</span><span class=\"o\">=</span><span class=\"s1\">'batch name'</span> <span class=\"c1\">#default random uuid. For the main batch this field has no importance, but for your remote batch</span>\n                              <span class=\"c1\">#you need put the same name of remote-step</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">Batch</span><span class=\"p\">(</span><span class=\"n\">context_manager</span><span class=\"o\">=</span><span class=\"n\">context_manager</span><span class=\"p\">)</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"n\">RemoteBatchStep</span><span class=\"p\">(</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'do-a-barrel-roll'</span><span class=\"p\">,</span>\n                <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span> <span class=\"c1\">#in seconds</span>\n            <span class=\"p\">))</span>\n\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<h1>now let's create our remote batch</h1>\n<pre><span class=\"n\">context_manager</span> <span class=\"o\">=</span> <span class=\"n\">FileContextManager</span><span class=\"p\">(</span>\n    <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'/tmp'</span><span class=\"p\">,</span>\n    <span class=\"n\">is_remote_step</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">process_id</span><span class=\"o\">=</span><span class=\"s1\">'123ABC'</span><span class=\"p\">,</span> <span class=\"c1\">#exactly the same a main batch</span>\n    <span class=\"n\">process_name</span><span class=\"o\">=</span><span class=\"s1\">'do-a-barrel-roll'</span><span class=\"c1\">#exactly the same name as step</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">Batch</span><span class=\"p\">(</span><span class=\"n\">context_manager</span><span class=\"o\">=</span><span class=\"n\">context_manager</span><span class=\"p\">)</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"c1\"># lot of cool things</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"c1\"># lot of cool things</span>\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">add_step</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"c1\"># lot of cool things</span>\n\n<span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<h3>customize your ContextManager</h3>\n<p>You can also extend the ContextManager class and create your way to run remote code.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyContextManager</span><span class=\"p\">(</span><span class=\"n\">ABCContextManager</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">steps</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"c1\">#override this method to teach your customization how to identify if remote execution is ready</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_remote_step_done</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"c1\">#override this method if you want to execute some code after batch conclude</span>\n    <span class=\"k\">def</span> <span class=\"nf\">upon_completion</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">success</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n\n          </div>"}, "last_serial": 6307780, "releases": {"1.0.1b0": [{"comment_text": "", "digests": {"md5": "f39a843b389f9ba6a0e698c9e426b88c", "sha256": "6712dbac62d4f969326e3ca09063d8be03d3df51d9c970e9c9cf07691e47897f"}, "downloads": -1, "filename": "batchflows-1.0.1b0-py3-none-any.whl", "has_sig": false, "md5_digest": "f39a843b389f9ba6a0e698c9e426b88c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12812, "upload_time": "2019-09-12T00:58:59", "upload_time_iso_8601": "2019-09-12T00:58:59.565118Z", "url": "https://files.pythonhosted.org/packages/eb/c2/b34dc7140b3faa4fc60d15039332fe24e75b66db160cc4e3c4a6c48e8b4f/batchflows-1.0.1b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d021a7894ec2e32ac26a8757fc47ca0b", "sha256": "da84ee50866d521ac3813d42d9413db9d1db321267a4c12f276547458b939b75"}, "downloads": -1, "filename": "batchflows-1.0.1b0.tar.gz", "has_sig": false, "md5_digest": "d021a7894ec2e32ac26a8757fc47ca0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8015, "upload_time": "2019-09-12T00:59:02", "upload_time_iso_8601": "2019-09-12T00:59:02.058551Z", "url": "https://files.pythonhosted.org/packages/ed/47/5e9330c20215dc73d900570d1350b9289ac2b86198794f3d92f06ce08d95/batchflows-1.0.1b0.tar.gz", "yanked": false}], "2.0.0b0": [{"comment_text": "", "digests": {"md5": "e93dc60d341235abcc8cfa0d6cf45df8", "sha256": "c86068f3f2d946d6ae244bd3ebf864199c10e1f00af90f6602e658389457adc9"}, "downloads": -1, "filename": "batchflows-2.0.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "e93dc60d341235abcc8cfa0d6cf45df8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13843, "upload_time": "2019-12-15T21:23:00", "upload_time_iso_8601": "2019-12-15T21:23:00.148295Z", "url": "https://files.pythonhosted.org/packages/db/2f/1857b4538e06e24fdbe8c76cdd500db633478006200fc0f86b7596c851f0/batchflows-2.0.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e6e0729c754b4fc5874f4c34917e86f", "sha256": "178f6c1275e87bbb9d3aa57bf735d64999fc4a4478bd642e15c0c07531f5ee53"}, "downloads": -1, "filename": "batchflows-2.0.0b0.tar.gz", "has_sig": false, "md5_digest": "1e6e0729c754b4fc5874f4c34917e86f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8014, "upload_time": "2019-12-15T21:23:01", "upload_time_iso_8601": "2019-12-15T21:23:01.750188Z", "url": "https://files.pythonhosted.org/packages/d0/9b/a4c478abc5a0535a4a11c192b327b5abce76125b3d32262ca0cb76b4d58b/batchflows-2.0.0b0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e93dc60d341235abcc8cfa0d6cf45df8", "sha256": "c86068f3f2d946d6ae244bd3ebf864199c10e1f00af90f6602e658389457adc9"}, "downloads": -1, "filename": "batchflows-2.0.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "e93dc60d341235abcc8cfa0d6cf45df8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13843, "upload_time": "2019-12-15T21:23:00", "upload_time_iso_8601": "2019-12-15T21:23:00.148295Z", "url": "https://files.pythonhosted.org/packages/db/2f/1857b4538e06e24fdbe8c76cdd500db633478006200fc0f86b7596c851f0/batchflows-2.0.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e6e0729c754b4fc5874f4c34917e86f", "sha256": "178f6c1275e87bbb9d3aa57bf735d64999fc4a4478bd642e15c0c07531f5ee53"}, "downloads": -1, "filename": "batchflows-2.0.0b0.tar.gz", "has_sig": false, "md5_digest": "1e6e0729c754b4fc5874f4c34917e86f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8014, "upload_time": "2019-12-15T21:23:01", "upload_time_iso_8601": "2019-12-15T21:23:01.750188Z", "url": "https://files.pythonhosted.org/packages/d0/9b/a4c478abc5a0535a4a11c192b327b5abce76125b3d32262ca0cb76b4d58b/batchflows-2.0.0b0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:44 2020"}