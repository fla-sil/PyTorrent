{"info": {"author": "Shinya Ohyanagi", "author_email": "sohyanagi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Testing"], "description": "Autodoc\n=======\nGenerate documentation from your unit-test.\n\n.. image:: https://travis-ci.org/heavenshell/py-autodoc.png?branch=master\n\nThis library is Python implementation of Autodoc.\n\n- `Autodoc <https://github.com/r7kamura/autodoc>`_\n- `Test::JsonAPI::Autodoc <https://metacpan.org/pod/Test::JsonAPI::Autodoc>`_\n\nLinks\n-----\n\n- `Repository <https://github.com/heavenshell/py-autodoc>`_\n- `Documentation <http://autodoc.readthedocs.org/en/latest/>`_\n\n\nInstallation\n------------\n\n::\n\n  $ virtualenv --distribute autodoc_sample\n  $ source autodoc/bin/activate\n  $ cd autodoc\n  $ pip install autodoc\n\n\nUsage\n-----\nRun unittest with PYAUTODOC=1 to generate documents for your tests decorated with `@autodoc.generate`.\n\n::\n\n  PYAUTODOC=1 python -m unittest examples/test_unittest.py\n\nIf you use py.test as test runner.\n\n::\n\n  PYAUTODOC=1 py.test tests examples/test_pytest.py\n\nIf you use nose as test runner.\n\n::\n\n  PYAUTODOC=1 nosetests tests examples/test_unittest.py\n\nExample for unittest\n--------------------\n::\n\n  class TestUnittest(TestCase):\n      def setUp(self):\n          app = create_app\n          self.client = TestApp(app)\n\n      @classmethod\n      @autodoc.generate('var/test_unittest.rst')\n      def tearDownClass(cls):\n          pass\n\n      @autodoc.describe('GET /')\n      def test_get(self):\n          \"\"\" GET / \"\"\"\n          res = self.client.get('/')\n          self.assertEqual(res.status_code, 200)\n\n          return res\n\n\n`@autodoc.describe()` describe test name.\n\nFor example `GET /` assigned to generated document.\n\n`@autodoc.generate(path_to_output)` will generate document.\n\n\nExample for py.test\n-------------------\n::\n\n  @pytest.fixture\n  def setup():\n      setup = TestApp(create_app)\n\n      return setup\n\n\n  @autodoc.generate('var/test_pytest.md', template='templates/markdown.md')\n  def teardown_module(module):\n      pass\n\n\n  @autodoc.describe('POST /')\n  def test_post(setup):\n      res = setup.post_json('/', params={'id': 1, 'message': 'foo'})\n      assert res.status_code == 200\n\n      return res\n\n\nExample for requests\n--------------------\n::\n\n  import requests\n\n  class TestUnittest(TestCase):\n    def setUp(self):\n      self.client = requests\n\n    @classmethod\n    @autodoc.generate('var/test_unittest.rst')\n    def tearDownClass(cls):\n      pass\n\n    @autodoc.describe('POST /')\n    def test_post(self):\n      \"\"\" POST / \"\"\"\n      params = {'id': 1, 'message': 'foo'}\n      headers = {'content-type': 'application/json'}\n      res = self.client.post('http://example.com/',\n                             data=params, headers=headers)\n      self.assertEqual(res.status_code, 200)\n\n      return res\n\n\nConventions\n-----------\n\nReturn WebTest or requests response in test method\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPy-Autodoc must return WebTest response.\n\n::\n\n  @autodoc.describe('POST /')\n  def test_post(setup):\n      res = setup.post_json('/', params={'id': 1, 'message': 'foo'})\n      assert res.status_code == 200\n\n      return res # Must return WebTest or requests response.\n\n\n\nGenerate document point\n~~~~~~~~~~~~~~~~~~~~~~~\n\n`@autodoc.generate` will create document.\n\nIf you set `@autodoc.generate` to each test case, document will generate each file.\n\n::\n\n  class TestUnittest(TestCase):\n      def setUp(self):\n          app = create_app\n          self.client = TestApp(app)\n\n      @autodoc.generate('var/indext_get.rst')\n      @autodoc.describe('GET /')\n      def test_get(self):\n          \"\"\" GET / \"\"\"\n          res = self.client.get('/')\n          self.assertEqual(res.status_code, 200)\n\n          return res\n\n      @autodoc.generate('var/foo_get.rst')\n      @autodoc.describe('GET /foo')\n      def test_get(self):\n          \"\"\" GET / \"\"\"\n          res = self.client.get('/foo')\n          self.assertEqual(res.status_code, 200)\n\n          return res\n\nThis will generate `var/index_get.rst` and `var/foo_get.rst`.\n\nIf you want to generate all tests into single file,\ndecorate `@autodoc.generate` to `tearDownClass`, `teardown_module` fixture.\n\n\nConfiguration\n-------------\nYou can configure `@autodoc.generat(output, template=path_to_template)` to change template file.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/heavenshell/py-autodoc", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "autodoc", "package_url": "https://pypi.org/project/autodoc/", "platform": "any", "project_url": "https://pypi.org/project/autodoc/", "project_urls": {"Homepage": "http://github.com/heavenshell/py-autodoc"}, "release_url": "https://pypi.org/project/autodoc/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "Autodoc Python implementation.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Generate documentation from your unit-test.</p>\n<img alt=\"https://travis-ci.org/heavenshell/py-autodoc.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ddae8405d7a7d42ef82b6e65bf3807cfd11330e/68747470733a2f2f7472617669732d63692e6f72672f68656176656e7368656c6c2f70792d6175746f646f632e706e673f6272616e63683d6d6173746572\">\n<p>This library is Python implementation of Autodoc.</p>\n<ul>\n<li><a href=\"https://github.com/r7kamura/autodoc\" rel=\"nofollow\">Autodoc</a></li>\n<li><a href=\"https://metacpan.org/pod/Test::JsonAPI::Autodoc\" rel=\"nofollow\">Test::JsonAPI::Autodoc</a></li>\n</ul>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://github.com/heavenshell/py-autodoc\" rel=\"nofollow\">Repository</a></li>\n<li><a href=\"http://autodoc.readthedocs.org/en/latest/\" rel=\"nofollow\">Documentation</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ virtualenv --distribute autodoc_sample\n$ source autodoc/bin/activate\n$ cd autodoc\n$ pip install autodoc\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Run unittest with PYAUTODOC=1 to generate documents for your tests decorated with <cite>@autodoc.generate</cite>.</p>\n<pre>PYAUTODOC=1 python -m unittest examples/test_unittest.py\n</pre>\n<p>If you use py.test as test runner.</p>\n<pre>PYAUTODOC=1 py.test tests examples/test_pytest.py\n</pre>\n<p>If you use nose as test runner.</p>\n<pre>PYAUTODOC=1 nosetests tests examples/test_unittest.py\n</pre>\n</div>\n<div id=\"example-for-unittest\">\n<h2>Example for unittest</h2>\n<pre>class TestUnittest(TestCase):\n    def setUp(self):\n        app = create_app\n        self.client = TestApp(app)\n\n    @classmethod\n    @autodoc.generate('var/test_unittest.rst')\n    def tearDownClass(cls):\n        pass\n\n    @autodoc.describe('GET /')\n    def test_get(self):\n        \"\"\" GET / \"\"\"\n        res = self.client.get('/')\n        self.assertEqual(res.status_code, 200)\n\n        return res\n</pre>\n<p><cite>@autodoc.describe()</cite> describe test name.</p>\n<p>For example <cite>GET /</cite> assigned to generated document.</p>\n<p><cite>@autodoc.generate(path_to_output)</cite> will generate document.</p>\n</div>\n<div id=\"example-for-py-test\">\n<h2>Example for py.test</h2>\n<pre>@pytest.fixture\ndef setup():\n    setup = TestApp(create_app)\n\n    return setup\n\n\n@autodoc.generate('var/test_pytest.md', template='templates/markdown.md')\ndef teardown_module(module):\n    pass\n\n\n@autodoc.describe('POST /')\ndef test_post(setup):\n    res = setup.post_json('/', params={'id': 1, 'message': 'foo'})\n    assert res.status_code == 200\n\n    return res\n</pre>\n</div>\n<div id=\"example-for-requests\">\n<h2>Example for requests</h2>\n<pre>import requests\n\nclass TestUnittest(TestCase):\n  def setUp(self):\n    self.client = requests\n\n  @classmethod\n  @autodoc.generate('var/test_unittest.rst')\n  def tearDownClass(cls):\n    pass\n\n  @autodoc.describe('POST /')\n  def test_post(self):\n    \"\"\" POST / \"\"\"\n    params = {'id': 1, 'message': 'foo'}\n    headers = {'content-type': 'application/json'}\n    res = self.client.post('http://example.com/',\n                           data=params, headers=headers)\n    self.assertEqual(res.status_code, 200)\n\n    return res\n</pre>\n</div>\n<div id=\"conventions\">\n<h2>Conventions</h2>\n<div id=\"return-webtest-or-requests-response-in-test-method\">\n<h3>Return WebTest or requests response in test method</h3>\n<p>Py-Autodoc must return WebTest response.</p>\n<pre>@autodoc.describe('POST /')\ndef test_post(setup):\n    res = setup.post_json('/', params={'id': 1, 'message': 'foo'})\n    assert res.status_code == 200\n\n    return res # Must return WebTest or requests response.\n</pre>\n</div>\n<div id=\"generate-document-point\">\n<h3>Generate document point</h3>\n<p><cite>@autodoc.generate</cite> will create document.</p>\n<p>If you set <cite>@autodoc.generate</cite> to each test case, document will generate each file.</p>\n<pre>class TestUnittest(TestCase):\n    def setUp(self):\n        app = create_app\n        self.client = TestApp(app)\n\n    @autodoc.generate('var/indext_get.rst')\n    @autodoc.describe('GET /')\n    def test_get(self):\n        \"\"\" GET / \"\"\"\n        res = self.client.get('/')\n        self.assertEqual(res.status_code, 200)\n\n        return res\n\n    @autodoc.generate('var/foo_get.rst')\n    @autodoc.describe('GET /foo')\n    def test_get(self):\n        \"\"\" GET / \"\"\"\n        res = self.client.get('/foo')\n        self.assertEqual(res.status_code, 200)\n\n        return res\n</pre>\n<p>This will generate <cite>var/index_get.rst</cite> and <cite>var/foo_get.rst</cite>.</p>\n<p>If you want to generate all tests into single file,\ndecorate <cite>@autodoc.generate</cite> to <cite>tearDownClass</cite>, <cite>teardown_module</cite> fixture.</p>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>You can configure <cite>@autodoc.generat(output, template=path_to_template)</cite> to change template file.</p>\n</div>\n\n          </div>"}, "last_serial": 3924627, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "6e14f4091412563ed1a1ad25a98fc1d8", "sha256": "ddcab27ac0aa85efcfda7cb56cb61d9c8f418d704c2993a9a813fdb96c6b2154"}, "downloads": -1, "filename": "autodoc-0.1.tar.gz", "has_sig": false, "md5_digest": "6e14f4091412563ed1a1ad25a98fc1d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92490, "upload_time": "2014-01-26T03:25:46", "upload_time_iso_8601": "2014-01-26T03:25:46.962263Z", "url": "https://files.pythonhosted.org/packages/d4/19/9309b616ae2be8e963538435aba0f952933ad69ecf33bbb277fb18451866/autodoc-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5f6a36bb72a7eba1e8827a4d762bdf80", "sha256": "256f90672657860fc3f02d067d41221ba9c7dd3eed4cc514b77779778d5786e1"}, "downloads": -1, "filename": "autodoc-0.2.tar.gz", "has_sig": false, "md5_digest": "5f6a36bb72a7eba1e8827a4d762bdf80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92520, "upload_time": "2014-01-26T08:13:44", "upload_time_iso_8601": "2014-01-26T08:13:44.533206Z", "url": "https://files.pythonhosted.org/packages/7e/04/593f3bf49400d6435d924f5cf49af23dbe9845340e9a471e0306ae97c384/autodoc-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "88cd080a2feb58af7d53666122dc490b", "sha256": "aafb055cc24bd0a9b452166ad9f70e2b591fd20f5bd26b5fca8714c82febd805"}, "downloads": -1, "filename": "autodoc-0.3.tar.gz", "has_sig": false, "md5_digest": "88cd080a2feb58af7d53666122dc490b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93566, "upload_time": "2014-08-09T14:40:28", "upload_time_iso_8601": "2014-08-09T14:40:28.957111Z", "url": "https://files.pythonhosted.org/packages/a6/2e/e78b32f1aa323749b7959c5edeb767be0919b2de5a6fdb5cb4f96115b35c/autodoc-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "86b9651e5a521de2c8a9be8c8ce6c3a7", "sha256": "415dee523a75e940532390170cc3eb0243fc4ab97c19c1097be0c20f955236d2"}, "downloads": -1, "filename": "autodoc-0.4.tar.gz", "has_sig": false, "md5_digest": "86b9651e5a521de2c8a9be8c8ce6c3a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13843, "upload_time": "2018-05-23T16:55:09", "upload_time_iso_8601": "2018-05-23T16:55:09.327571Z", "url": "https://files.pythonhosted.org/packages/4e/3c/fc6815a275e83c157d974782a6b24afe5ac14fd257704b7452fefcd33ee5/autodoc-0.4.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "8dc64fcb77a0a899ec765a636d0830ca", "sha256": "c4387c5a0f1c09b055bb2e384542ee1e016542f313b2a33d904ca77f0460ded3"}, "downloads": -1, "filename": "autodoc-0.5.0.tar.gz", "has_sig": false, "md5_digest": "8dc64fcb77a0a899ec765a636d0830ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14178, "upload_time": "2018-06-03T02:53:33", "upload_time_iso_8601": "2018-06-03T02:53:33.661748Z", "url": "https://files.pythonhosted.org/packages/4e/c3/61f746096d2b6c161bd7f3bf8db1fe741b8805cbf0ac9369b4953c37de35/autodoc-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8dc64fcb77a0a899ec765a636d0830ca", "sha256": "c4387c5a0f1c09b055bb2e384542ee1e016542f313b2a33d904ca77f0460ded3"}, "downloads": -1, "filename": "autodoc-0.5.0.tar.gz", "has_sig": false, "md5_digest": "8dc64fcb77a0a899ec765a636d0830ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14178, "upload_time": "2018-06-03T02:53:33", "upload_time_iso_8601": "2018-06-03T02:53:33.661748Z", "url": "https://files.pythonhosted.org/packages/4e/c3/61f746096d2b6c161bd7f3bf8db1fe741b8805cbf0ac9369b4953c37de35/autodoc-0.5.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:18 2020"}