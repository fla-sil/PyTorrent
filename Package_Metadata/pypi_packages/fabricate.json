{"info": {"author": "Chris Coetzee", "author_email": "chriscz93@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "fabricate\n=========\n\n|Build Status|\n\n**fabricate** is a build tool that finds dependencies automatically for\nany language. It's small and just works. No hidden stuff behind your\nback. It was inspired by Bill McCloskey's make replacement, memoize, but\nfabricate works on\n`Windows <https://github.com/SimonAlfie/fabricate/wiki/HowItWorks#windows-issues>`__\nas well as Linux.\n\n`Get fabricate.py\nnow <https://raw.githubusercontent.com/SimonAlfie/fabricate/master/fabricate.py>`__,\nlearn `how it\nworks <https://github.com/SimonAlfie/fabricate/wiki/HowItWorks>`__, see\nhow to get `in-Python\nhelp <https://github.com/SimonAlfie/fabricate/wiki/Help>`__, or discuss\nit on the `mailing\nlist <http://groups.google.com/group/fabricate-users>`__.\n\nFeatures\n--------\n\n-  Never have to list dependencies.\n-  Never have to specify cleanup rules.\n-  The tool is a single Python file.\n-  It uses MD5 (not timestamps) to check inputs and outputs.\n-  You can learn it all in about 10 minutes.\n-  You can still read your build scripts 3 months later.\n-  Now supports `parallel\n   building <https://github.com/SimonAlfie/fabricate/wiki/ParallelBuilding>`__\n\nShow me an example!\n-------------------\n\n.. code:: python\n\n    from fabricate import *\n\n    sources = ['program', 'util']\n\n    def build():\n        compile()\n        link()\n\n    def compile():\n        for source in sources:\n            run('gcc', '-c', source+'.c')\n\n    def link():\n        objects = [s+'.o' for s in sources]\n        run('gcc', '-o', 'program', objects)\n\n    def clean():\n        autoclean()\n\n    main()\n\nThis isn't the simplest build script you can make with fabricate (see\n`other\nexamples <https://github.com/SimonAlfie/fabricate/wiki/Examples>`__),\nbut it's surprisingly close to some of the more complex scripts we use\nin real life. Things to note:\n\n-  It's an **ordinary Python file.** Use the clarity and power of\n   Python.\n-  **No implicit stuff** like CCFLAGS.\n-  **Explicit is better:** you tell fabricate what commands to run, and\n   it runs them -- but only if their inputs or outputs have changed.\n-  Where you'd use targets in make, you just **use Python functions** --\n   ``build()`` is the default.\n-  You can **easily \"autoclean\"** any build outputs -- fabricate finds\n   build outputs automatically, just like it finds dependencies.\n\nUsing fabricate options\n-----------------------\n\nThe best way to get started is to take one of the examples linked above\nand modify it to suit your project. But you're bound to want to use some\nof the options built into fabricate. To get a list of these:\n\n::\n\n     from fabricate import *\n\n     help(main)\n     help(Builder)\n\nUsing fabricate as a script, a la memoize\n-----------------------------------------\n\nYou can also use fabricate.py as a script and enter commands directly on\nthe command line (see `command line\noptions <https://github.com/SimonAlfie/fabricate/wiki/CommandLineOptions>`__).\nIn the following, each ``gcc`` command will only be run if its\ndependencies have changed:\n\n::\n\n    fabricate.py gcc -c program.c\n    fabricate.py gcc -c util.c\n    fabricate.py gcc -o program program.o util.o\n\nWhy not use make?\n-----------------\n\nFor a start, fabricate won't say \"``*** missing separator``\" if you use\nspaces instead of tabs. And you'll never need to enter dependencies\nmanually, like this:\n\n::\n\n    files.o : files.c defs.h buffer.h command.h\n            cc -c files.c\n\nInstead, you just tell fabricate to ``run('cc', 'file.c')`` and it'll\nfigure out what that command's inputs and outputs are. Next time you\nbuild, the command will only get run if its inputs have changed, or if\nits outputs have been modified or aren't there.\n\nAnd you can use Python's readable string functions instead of producing\nwrite-only make rules, like this one from the make docs:\n\n::\n\n    %.d : %.c\n            @set -e; rm -f $@; $(CC) -M $(CPPFLAGS) $< > $@.$$$$; \\\n            sed 's,\\($*\\)\\.o[ :]*,\\1.o $@ : ,g' < $@.$$$$ > $@; rm -f $@.$$$$\n\nWhat about SCons?\n-----------------\n\nSCons tempted us at first too. It's Python ... isn't it? But just before\nit sucks you in, you realise it's actually `quite\nhard <http://stackoverflow.com/questions/1074062/>`__ to do simple\nthings explicitly.\n\nPython says that *explicit is better than implicit* for a reason, and\nwith fabricate, we've made it so you tell it what you want. It won't do\nthings behind your back based on the `83 different\ntools <http://www.scons.org/doc/HTML/scons-user/a9626.html>`__ it may or\nmay not know about.\n\nCredits\n-------\n\nfabricate is inspired by `Bill McCloskey's\nmemoize <http://www.eecs.berkeley.edu/~billm/memoize.html>`__, but\nfabricate works under Windows as well by using file access times instead\nof strace if strace is not available on your file system. Read more\nabout `how fabricate\nworks. <https://github.com/SimonAlfie/fabricate/wiki/HowItWorks>`__\n\nfabricate was originally developed by the B Hoyts at `Brush\nTechnology <http://brush.co.nz/>`__ for in-house use, and we then\nreleased into the wild. It now has a small but dedicated user base and\nis actively being maintained and improved by Simon Alford, with help\nfrom other fabricate users.\n\nLicense\n-------\n\nLike memoize, fabricate is released under a `New BSD\nlicense <https://github.com/SimonAlfie/fabricate/wiki/License>`__.\nfabricate is Copyright (c) 2009 Brush Technology.\n\n.. |Build Status| image:: https://travis-ci.org/chriscz/fabricate.svg?branch=master\n   :target: https://travis-ci.org/chriscz/fabricate", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SimonAlfie/fabricate/", "keywords": "fabricate make python build", "license": "New BSD License", "maintainer": "", "maintainer_email": "", "name": "fabricate", "package_url": "https://pypi.org/project/fabricate/", "platform": "Operating System :: Microsoft :: Windows", "project_url": "https://pypi.org/project/fabricate/", "project_urls": {"Homepage": "https://github.com/SimonAlfie/fabricate/"}, "release_url": "https://pypi.org/project/fabricate/1.29.0/", "requires_dist": null, "requires_python": "", "summary": "The better build tool. Finds dependencies automatically for any language.", "version": "1.29.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/chriscz/fabricate\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb18b0ff3a983db8b6ec9939d43cb07c47afcfc3/68747470733a2f2f7472617669732d63692e6f72672f6368726973637a2f6661627269636174652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><strong>fabricate</strong> is a build tool that finds dependencies automatically for\nany language. It\u2019s small and just works. No hidden stuff behind your\nback. It was inspired by Bill McCloskey\u2019s make replacement, memoize, but\nfabricate works on\n<a href=\"https://github.com/SimonAlfie/fabricate/wiki/HowItWorks#windows-issues\" rel=\"nofollow\">Windows</a>\nas well as Linux.</p>\n<p><a href=\"https://raw.githubusercontent.com/SimonAlfie/fabricate/master/fabricate.py\" rel=\"nofollow\">Get fabricate.py\nnow</a>,\nlearn <a href=\"https://github.com/SimonAlfie/fabricate/wiki/HowItWorks\" rel=\"nofollow\">how it\nworks</a>, see\nhow to get <a href=\"https://github.com/SimonAlfie/fabricate/wiki/Help\" rel=\"nofollow\">in-Python\nhelp</a>, or discuss\nit on the <a href=\"http://groups.google.com/group/fabricate-users\" rel=\"nofollow\">mailing\nlist</a>.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Never have to list dependencies.</li>\n<li>Never have to specify cleanup rules.</li>\n<li>The tool is a single Python file.</li>\n<li>It uses MD5 (not timestamps) to check inputs and outputs.</li>\n<li>You can learn it all in about 10 minutes.</li>\n<li>You can still read your build scripts 3 months later.</li>\n<li>Now supports <a href=\"https://github.com/SimonAlfie/fabricate/wiki/ParallelBuilding\" rel=\"nofollow\">parallel\nbuilding</a></li>\n</ul>\n</div>\n<div id=\"show-me-an-example\">\n<h2>Show me an example!</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fabricate</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">sources</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'program'</span><span class=\"p\">,</span> <span class=\"s1\">'util'</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">build</span><span class=\"p\">():</span>\n    <span class=\"nb\">compile</span><span class=\"p\">()</span>\n    <span class=\"n\">link</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">compile</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">source</span> <span class=\"ow\">in</span> <span class=\"n\">sources</span><span class=\"p\">:</span>\n        <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'gcc'</span><span class=\"p\">,</span> <span class=\"s1\">'-c'</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">+</span><span class=\"s1\">'.c'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">link</span><span class=\"p\">():</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span><span class=\"o\">+</span><span class=\"s1\">'.o'</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">sources</span><span class=\"p\">]</span>\n    <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'gcc'</span><span class=\"p\">,</span> <span class=\"s1\">'-o'</span><span class=\"p\">,</span> <span class=\"s1\">'program'</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">():</span>\n    <span class=\"n\">autoclean</span><span class=\"p\">()</span>\n\n<span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>This isn\u2019t the simplest build script you can make with fabricate (see\n<a href=\"https://github.com/SimonAlfie/fabricate/wiki/Examples\" rel=\"nofollow\">other\nexamples</a>),\nbut it\u2019s surprisingly close to some of the more complex scripts we use\nin real life. Things to note:</p>\n<ul>\n<li>It\u2019s an <strong>ordinary Python file.</strong> Use the clarity and power of\nPython.</li>\n<li><strong>No implicit stuff</strong> like CCFLAGS.</li>\n<li><strong>Explicit is better:</strong> you tell fabricate what commands to run, and\nit runs them \u2013 but only if their inputs or outputs have changed.</li>\n<li>Where you\u2019d use targets in make, you just <strong>use Python functions</strong> \u2013\n<tt>build()</tt> is the default.</li>\n<li>You can <strong>easily \u201cautoclean\u201d</strong> any build outputs \u2013 fabricate finds\nbuild outputs automatically, just like it finds dependencies.</li>\n</ul>\n</div>\n<div id=\"using-fabricate-options\">\n<h2>Using fabricate options</h2>\n<p>The best way to get started is to take one of the examples linked above\nand modify it to suit your project. But you\u2019re bound to want to use some\nof the options built into fabricate. To get a list of these:</p>\n<pre>from fabricate import *\n\nhelp(main)\nhelp(Builder)\n</pre>\n</div>\n<div id=\"using-fabricate-as-a-script-a-la-memoize\">\n<h2>Using fabricate as a script, a la memoize</h2>\n<p>You can also use fabricate.py as a script and enter commands directly on\nthe command line (see <a href=\"https://github.com/SimonAlfie/fabricate/wiki/CommandLineOptions\" rel=\"nofollow\">command line\noptions</a>).\nIn the following, each <tt>gcc</tt> command will only be run if its\ndependencies have changed:</p>\n<pre>fabricate.py gcc -c program.c\nfabricate.py gcc -c util.c\nfabricate.py gcc -o program program.o util.o\n</pre>\n</div>\n<div id=\"why-not-use-make\">\n<h2>Why not use make?</h2>\n<p>For a start, fabricate won\u2019t say \u201c<tt>*** missing separator</tt>\u201d if you use\nspaces instead of tabs. And you\u2019ll never need to enter dependencies\nmanually, like this:</p>\n<pre>files.o : files.c defs.h buffer.h command.h\n        cc -c files.c\n</pre>\n<p>Instead, you just tell fabricate to <tt><span class=\"pre\">run('cc',</span> 'file.c')</tt> and it\u2019ll\nfigure out what that command\u2019s inputs and outputs are. Next time you\nbuild, the command will only get run if its inputs have changed, or if\nits outputs have been modified or aren\u2019t there.</p>\n<p>And you can use Python\u2019s readable string functions instead of producing\nwrite-only make rules, like this one from the make docs:</p>\n<pre>%.d : %.c\n        @set -e; rm -f $@; $(CC) -M $(CPPFLAGS) $&lt; &gt; $@.$$$$; \\\n        sed 's,\\($*\\)\\.o[ :]*,\\1.o $@ : ,g' &lt; $@.$$$$ &gt; $@; rm -f $@.$$$$\n</pre>\n</div>\n<div id=\"what-about-scons\">\n<h2>What about SCons?</h2>\n<p>SCons tempted us at first too. It\u2019s Python \u2026 isn\u2019t it? But just before\nit sucks you in, you realise it\u2019s actually <a href=\"http://stackoverflow.com/questions/1074062/\" rel=\"nofollow\">quite\nhard</a> to do simple\nthings explicitly.</p>\n<p>Python says that <em>explicit is better than implicit</em> for a reason, and\nwith fabricate, we\u2019ve made it so you tell it what you want. It won\u2019t do\nthings behind your back based on the <a href=\"http://www.scons.org/doc/HTML/scons-user/a9626.html\" rel=\"nofollow\">83 different\ntools</a> it may or\nmay not know about.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>fabricate is inspired by <a href=\"http://www.eecs.berkeley.edu/~billm/memoize.html\" rel=\"nofollow\">Bill McCloskey\u2019s\nmemoize</a>, but\nfabricate works under Windows as well by using file access times instead\nof strace if strace is not available on your file system. Read more\nabout <a href=\"https://github.com/SimonAlfie/fabricate/wiki/HowItWorks\" rel=\"nofollow\">how fabricate\nworks.</a></p>\n<p>fabricate was originally developed by the B Hoyts at <a href=\"http://brush.co.nz/\" rel=\"nofollow\">Brush\nTechnology</a> for in-house use, and we then\nreleased into the wild. It now has a small but dedicated user base and\nis actively being maintained and improved by Simon Alford, with help\nfrom other fabricate users.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Like memoize, fabricate is released under a <a href=\"https://github.com/SimonAlfie/fabricate/wiki/License\" rel=\"nofollow\">New BSD\nlicense</a>.\nfabricate is Copyright (c) 2009 Brush Technology.</p>\n</div>\n\n          </div>"}, "last_serial": 2848911, "releases": {"(latest release)": [{"comment_text": "", "digests": {"md5": "e02128a8fa42a94b950998cb9a463b46", "sha256": "3d52f0a4b42838949893b6d4f101efa419ca11ac042abc14fcda33624576467d"}, "downloads": -1, "filename": "fabricate-1.26.tar.gz", "has_sig": false, "md5_digest": "e02128a8fa42a94b950998cb9a463b46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20337, "upload_time": "2014-05-14T14:51:38", "upload_time_iso_8601": "2014-05-14T14:51:38.674346Z", "url": "https://files.pythonhosted.org/packages/13/5e/8bf8fc0f85cdef85cae6d19befc9a4301e4dbd2538ed24575e40e491f91f/fabricate-1.26.tar.gz", "yanked": false}], "1.29.0": [{"comment_text": "", "digests": {"md5": "3b502192a3c59ade5f6712e4b6f4287c", "sha256": "599c94243ae9ece0778989ed3f557f3769ac5b25618fb28ff3a00c700373cc2c"}, "downloads": -1, "filename": "fabricate-1.29.0.tar.gz", "has_sig": false, "md5_digest": "3b502192a3c59ade5f6712e4b6f4287c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26982, "upload_time": "2017-05-03T11:59:06", "upload_time_iso_8601": "2017-05-03T11:59:06.667424Z", "url": "https://files.pythonhosted.org/packages/2d/8c/54300f46c6eed4494b29a32c8a1f1efa2f8f773c13cacaeda04e510b7c42/fabricate-1.29.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b502192a3c59ade5f6712e4b6f4287c", "sha256": "599c94243ae9ece0778989ed3f557f3769ac5b25618fb28ff3a00c700373cc2c"}, "downloads": -1, "filename": "fabricate-1.29.0.tar.gz", "has_sig": false, "md5_digest": "3b502192a3c59ade5f6712e4b6f4287c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26982, "upload_time": "2017-05-03T11:59:06", "upload_time_iso_8601": "2017-05-03T11:59:06.667424Z", "url": "https://files.pythonhosted.org/packages/2d/8c/54300f46c6eed4494b29a32c8a1f1efa2f8f773c13cacaeda04e510b7c42/fabricate-1.29.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:12 2020"}