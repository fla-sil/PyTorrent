{"info": {"author": "Paco Xander Nathan", "author_email": "ceteri@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Human Machine Interfaces", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Text Processing :: General", "Topic :: Text Processing :: Indexing", "Topic :: Text Processing :: Linguistic"], "description": "# PyTextRank\n\n**PyTextRank** is a Python implementation of *TextRank* as a\n[spaCy pipeline extension](https://spacy.io/universe/project/spacy-pytextrank),\nused to:\n\n  - extract the top-ranked phrases from text documents\n  - infer links from unstructured text into structured data\n  - run extractive summarization of text documents\n\n## Background\n\nNote that **PyTextRank** is intended to provide support for\n[*entity linking*](http://nlpprogress.com/english/entity_linking.html),\nin contrast to the more commonplace usage of\n[*named entity recognition*](http://nlpprogress.com/english/named_entity_recognition.html).\nThese approaches can be used together in complementary ways to improve\nthe results overall.\nThe introduction of graph algorithms -- notably,\n[*eigenvector centrality*](https://demonstrations.wolfram.com/NetworkCentralityUsingEigenvectors/)\n-- provides a more flexible and robust basis for integrating additional\ntechniques that enhance the natural language work being performed.\n\nInternally **PyTextRank** constructs a *lemma graph* to represent links\namong the candidate phrases (e.g., unrecognized entities) and their\nsupporting language.\nGenerally speaking, any means of enriching that graph prior to phrase\nranking will tend to improve results.\nPossible ways to enrich the lemma graph include\n[*coreference resolution*](http://nlpprogress.com/english/coreference_resolution.html)\nand\n[*semantic relations*](https://en.wikipedia.org/wiki/Hyponymy_and_hypernymy),\nas well as leveraging *knowledge graphs* in the general case.\n\nFor example,\n[WordNet](https://spacy.io/universe/project/spacy-wordnet)\nand\n[DBpedia](https://wiki.dbpedia.org/)\nboth provide means for inferring links among entities, and purpose-built knowledge\ngraphs can be applied for specific use cases.\nThese can help enrich a lemma graph even in cases where links are not explicit \nwithin the text.\nConsider a paragraph that mentions `cats` and `kittens` in different sentences: \nan implied semantic relation exists between the two nouns since the lemma `kitten` \nis a hyponym of the lemma `cat` -- such that an inferred link can be added \nbetween them.\n\nThis has an additional benefit of linking parsed and annotated documents\ninto more structured data, and can also be used to support\n[*knowledge graph construction*](https://www.akbc.ws/).\n\nThe *TextRank* algorithm used here is based on research published in:  \n[\"TextRank: Bringing Order into Text\"](https://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf)  \n[**Rada Mihalcea**](https://web.eecs.umich.edu/~mihalcea/), \n[**Paul Tarau**](https://www.cse.unt.edu/~tarau/)  \n[*Empirical Methods in Natural Language Processing*](https://www.researchgate.net/publication/200044196_TextRank_Bringing_Order_into_Texts) (2004)\n\nSeveral modifications in **PyTextRank** improve on the algorithm originally\ndescribed in the paper:\n\n  - fixed a bug: see [Java impl, 2008](https://github.com/ceteri/textrank)\n  - use *lemmatization* in place of stemming\n  - include verbs in the graph (but not in the resulting phrases)\n  - leverage preprocessing via *noun chunking* and *named entity recognition*\n  - provide *extractive summarization* based on ranked phrases\n\nThis implementation was inspired by the\n[Williams 2016](http://mike.place/2016/summarization/)\ntalk on text summarization.\nNote that while there are better approaches for\n[*summarizing text*](http://nlpprogress.com/english/summarization.html),\nquestions linger about some of the top contenders -- see:\n[1](https://arxiv.org/abs/1909.03004),\n[2](https://arxiv.org/abs/1906.02243).\nArguably, having alternatives such as this allow for cost trade-offs.\n\n\n## Installation\n\nPrerequisites:\n\n- [Python 3.x](https://www.python.org/downloads/)\n- [spaCy](https://spacy.io/docs/usage/)\n- [NetworkX](http://networkx.readthedocs.io/)\n- [GraphViz](https://graphviz.readthedocs.io/)\n\nTo install from [PyPi](https://pypi.python.org/pypi/pytextrank):\n\n```\npip install pytextrank\npython -m spacy download en_core_web_sm\n```\n\nIf you install directly from this Git repo, be sure to install the dependencies\nas well:\n\n```\npip install -r requirements.txt\npython -m spacy download en_core_web_sm\n```\n\n\n## Usage\n\n```\nimport spacy\nimport pytextrank\n\n# example text\ntext = \"Compatibility of systems of linear constraints over the set of natural numbers. Criteria of compatibility of a system of linear Diophantine equations, strict inequations, and nonstrict inequations are considered. Upper bounds for components of a minimal set of solutions and algorithms of construction of minimal generating sets of solutions for all types of systems are given. These criteria and the corresponding algorithms for constructing a minimal supporting set of solutions can be used in solving all the considered types systems and systems of mixed types.\"\n\n# load a spaCy model, depending on language, scale, etc.\nnlp = spacy.load(\"en_core_web_sm\")\n\n# add PyTextRank to the spaCy pipeline\ntr = pytextrank.TextRank()\nnlp.add_pipe(tr.PipelineComponent, name=\"textrank\", last=True)\n\ndoc = nlp(text)\n\n# examine the top-ranked phrases in the document\nfor p in doc._.phrases:\n    print(\"{:.4f} {:5d}  {}\".format(p.rank, p.count, p.text))\n    print(p.chunks)\n```\n\nFor other example usage, see the \n[PyTextRank wiki](https://github.com/DerwenAI/pytextrank/wiki).\nIf you need to troubleshoot any problems:\n\n  - use [GitHub issues](https://github.com/DerwenAI/pytextrank/issues) (most recommended)\n  - search [related discussions on StackOverflow](https://stackoverflow.com/search?q=pytextrank)\n  - tweet to `#textrank` on [Twitter](https://twitter.com/search?q=%23textrank) (cc `@pacoid`)\n\nFor related course materials and training, please check for calendar updates in the article\n[\"Natural Language Processing in Python\"](https://medium.com/derwen/natural-language-processing-in-python-832b0a99791b).\n\nLet us know if you find this package useful, tell us about use cases, \ndescribe what else you would like to see integrated, etc.\nFor inquiries about consulting work in machine learning, natural language,\nknowledge graph, and other AI applications, contact \n[Derwen, Inc.](https://derwen.ai/contact)\n\n\n## Links\n\n  - https://spacy.io/universe/project/spacy-pytextrank\n  - https://pypi.org/project/pytextrank/\n\n\n## Testing\n\nTo run the unit tests:\n\n```\ncoverage run -m unittest discover\n```\n\nTo generate a coverage report and upload it to the `codecov.io`\nreporting site:\n\n```\ncoverage report\nbash <(curl -s https://codecov.io/bash) -t @.cc_token\n```\n\nTest coverage reports can be viewed at\n<https://codecov.io/gh/DerwenAI/pytextrank>\n\n\n## Attribution\n\n**PyTextRank** has an [MIT](https://spdx.org/licenses/MIT.html) license,\nwhich is succinct and simplifies use in commercial applications.\n\nPlease use the following BibTeX entry for citing **PyTextRank** in\npublications:\n\n```\n@Misc{PyTextRank,\nauthor = {Nathan, Paco},\ntitle = {PyTextRank, a Python implementation of TextRank for phrase extraction and summarization of text documents},\n    howpublished = {\\url{https://github.com/DerwenAI/pytextrank/}},\n    year = {2016}\n    }\n```\n\n\n## TODOs\n\n  - fix Sphinx errors, generate docs\n  - build a conda package\n  - include more unit tests\n  - show examples of `spacy-wordnet` to enrich the lemma graph\n  - leverage `neuralcoref` to enrich the lemma graph\n  - generate a phrase graph, with entity linking to DBpedia, etc.\n\n\n## Kudos\n\nMany thanks to contributors:\n[@htmartin](https://github.com/htmartin),\n[@williamsmj](https://github.com/williamsmj/),\n[@mattkohl](https://github.com/mattkohl),\n[@vanita5](https://github.com/vanita5),\n[@HarshGrandeur](https://github.com/HarshGrandeur),\n[@mnowotka](https://github.com/mnowotka),\n[@kjam](https://github.com/kjam),\n[@dvsrepo](https://github.com/dvsrepo),\n[@SaiThejeshwar](https://github.com/SaiThejeshwar),\n[@laxatives](https://github.com/laxatives),\n[@dimmu](https://github.com/dimmu), \n[@JasonZhangzy1757](https://github.com/JasonZhangzy1757), \n[@jake-aft](https://github.com/@jake-aft),\n[@junchen1992](https://github.com/@junchen1992),\nencouragement from the wonderful folks at [spaCy](https://github.com/explosion/spaCy),\nplus general support from [Derwen, Inc.](https://derwen.ai/)\n\n[![thx noam](https://github.com/DerwenAI/pytextrank/blob/master/docs/noam.jpg)](https://memegenerator.net/img/instances/66942896.jpg)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/DerwenAI/pytextrank", "keywords": "textrank,spacy,phrase extraction,parsing,extractive summarization,natural language processing,nlp,knowledge graph,graph algorithms,text analytics", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytextrank", "package_url": "https://pypi.org/project/pytextrank/", "platform": "", "project_url": "https://pypi.org/project/pytextrank/", "project_urls": {"Homepage": "http://github.com/DerwenAI/pytextrank"}, "release_url": "https://pypi.org/project/pytextrank/2.0.1/", "requires_dist": ["coverage", "graphviz", "networkx", "spacy"], "requires_python": ">=3.5", "summary": "Python implementation of TextRank for phrase extraction and summarization of text documents", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyTextRank</h1>\n<p><strong>PyTextRank</strong> is a Python implementation of <em>TextRank</em> as a\n<a href=\"https://spacy.io/universe/project/spacy-pytextrank\" rel=\"nofollow\">spaCy pipeline extension</a>,\nused to:</p>\n<ul>\n<li>extract the top-ranked phrases from text documents</li>\n<li>infer links from unstructured text into structured data</li>\n<li>run extractive summarization of text documents</li>\n</ul>\n<h2>Background</h2>\n<p>Note that <strong>PyTextRank</strong> is intended to provide support for\n<a href=\"http://nlpprogress.com/english/entity_linking.html\" rel=\"nofollow\"><em>entity linking</em></a>,\nin contrast to the more commonplace usage of\n<a href=\"http://nlpprogress.com/english/named_entity_recognition.html\" rel=\"nofollow\"><em>named entity recognition</em></a>.\nThese approaches can be used together in complementary ways to improve\nthe results overall.\nThe introduction of graph algorithms -- notably,\n<a href=\"https://demonstrations.wolfram.com/NetworkCentralityUsingEigenvectors/\" rel=\"nofollow\"><em>eigenvector centrality</em></a>\n-- provides a more flexible and robust basis for integrating additional\ntechniques that enhance the natural language work being performed.</p>\n<p>Internally <strong>PyTextRank</strong> constructs a <em>lemma graph</em> to represent links\namong the candidate phrases (e.g., unrecognized entities) and their\nsupporting language.\nGenerally speaking, any means of enriching that graph prior to phrase\nranking will tend to improve results.\nPossible ways to enrich the lemma graph include\n<a href=\"http://nlpprogress.com/english/coreference_resolution.html\" rel=\"nofollow\"><em>coreference resolution</em></a>\nand\n<a href=\"https://en.wikipedia.org/wiki/Hyponymy_and_hypernymy\" rel=\"nofollow\"><em>semantic relations</em></a>,\nas well as leveraging <em>knowledge graphs</em> in the general case.</p>\n<p>For example,\n<a href=\"https://spacy.io/universe/project/spacy-wordnet\" rel=\"nofollow\">WordNet</a>\nand\n<a href=\"https://wiki.dbpedia.org/\" rel=\"nofollow\">DBpedia</a>\nboth provide means for inferring links among entities, and purpose-built knowledge\ngraphs can be applied for specific use cases.\nThese can help enrich a lemma graph even in cases where links are not explicit\nwithin the text.\nConsider a paragraph that mentions <code>cats</code> and <code>kittens</code> in different sentences:\nan implied semantic relation exists between the two nouns since the lemma <code>kitten</code>\nis a hyponym of the lemma <code>cat</code> -- such that an inferred link can be added\nbetween them.</p>\n<p>This has an additional benefit of linking parsed and annotated documents\ninto more structured data, and can also be used to support\n<a href=\"https://www.akbc.ws/\" rel=\"nofollow\"><em>knowledge graph construction</em></a>.</p>\n<p>The <em>TextRank</em> algorithm used here is based on research published in:<br>\n<a href=\"https://web.eecs.umich.edu/%7Emihalcea/papers/mihalcea.emnlp04.pdf\" rel=\"nofollow\">\"TextRank: Bringing Order into Text\"</a><br>\n<a href=\"https://web.eecs.umich.edu/%7Emihalcea/\" rel=\"nofollow\"><strong>Rada Mihalcea</strong></a>,\n<a href=\"https://www.cse.unt.edu/%7Etarau/\" rel=\"nofollow\"><strong>Paul Tarau</strong></a><br>\n<a href=\"https://www.researchgate.net/publication/200044196_TextRank_Bringing_Order_into_Texts\" rel=\"nofollow\"><em>Empirical Methods in Natural Language Processing</em></a> (2004)</p>\n<p>Several modifications in <strong>PyTextRank</strong> improve on the algorithm originally\ndescribed in the paper:</p>\n<ul>\n<li>fixed a bug: see <a href=\"https://github.com/ceteri/textrank\" rel=\"nofollow\">Java impl, 2008</a></li>\n<li>use <em>lemmatization</em> in place of stemming</li>\n<li>include verbs in the graph (but not in the resulting phrases)</li>\n<li>leverage preprocessing via <em>noun chunking</em> and <em>named entity recognition</em></li>\n<li>provide <em>extractive summarization</em> based on ranked phrases</li>\n</ul>\n<p>This implementation was inspired by the\n<a href=\"http://mike.place/2016/summarization/\" rel=\"nofollow\">Williams 2016</a>\ntalk on text summarization.\nNote that while there are better approaches for\n<a href=\"http://nlpprogress.com/english/summarization.html\" rel=\"nofollow\"><em>summarizing text</em></a>,\nquestions linger about some of the top contenders -- see:\n<a href=\"https://arxiv.org/abs/1909.03004\" rel=\"nofollow\">1</a>,\n<a href=\"https://arxiv.org/abs/1906.02243\" rel=\"nofollow\">2</a>.\nArguably, having alternatives such as this allow for cost trade-offs.</p>\n<h2>Installation</h2>\n<p>Prerequisites:</p>\n<ul>\n<li><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3.x</a></li>\n<li><a href=\"https://spacy.io/docs/usage/\" rel=\"nofollow\">spaCy</a></li>\n<li><a href=\"http://networkx.readthedocs.io/\" rel=\"nofollow\">NetworkX</a></li>\n<li><a href=\"https://graphviz.readthedocs.io/\" rel=\"nofollow\">GraphViz</a></li>\n</ul>\n<p>To install from <a href=\"https://pypi.python.org/pypi/pytextrank\" rel=\"nofollow\">PyPi</a>:</p>\n<pre><code>pip install pytextrank\npython -m spacy download en_core_web_sm\n</code></pre>\n<p>If you install directly from this Git repo, be sure to install the dependencies\nas well:</p>\n<pre><code>pip install -r requirements.txt\npython -m spacy download en_core_web_sm\n</code></pre>\n<h2>Usage</h2>\n<pre><code>import spacy\nimport pytextrank\n\n# example text\ntext = \"Compatibility of systems of linear constraints over the set of natural numbers. Criteria of compatibility of a system of linear Diophantine equations, strict inequations, and nonstrict inequations are considered. Upper bounds for components of a minimal set of solutions and algorithms of construction of minimal generating sets of solutions for all types of systems are given. These criteria and the corresponding algorithms for constructing a minimal supporting set of solutions can be used in solving all the considered types systems and systems of mixed types.\"\n\n# load a spaCy model, depending on language, scale, etc.\nnlp = spacy.load(\"en_core_web_sm\")\n\n# add PyTextRank to the spaCy pipeline\ntr = pytextrank.TextRank()\nnlp.add_pipe(tr.PipelineComponent, name=\"textrank\", last=True)\n\ndoc = nlp(text)\n\n# examine the top-ranked phrases in the document\nfor p in doc._.phrases:\n    print(\"{:.4f} {:5d}  {}\".format(p.rank, p.count, p.text))\n    print(p.chunks)\n</code></pre>\n<p>For other example usage, see the\n<a href=\"https://github.com/DerwenAI/pytextrank/wiki\" rel=\"nofollow\">PyTextRank wiki</a>.\nIf you need to troubleshoot any problems:</p>\n<ul>\n<li>use <a href=\"https://github.com/DerwenAI/pytextrank/issues\" rel=\"nofollow\">GitHub issues</a> (most recommended)</li>\n<li>search <a href=\"https://stackoverflow.com/search?q=pytextrank\" rel=\"nofollow\">related discussions on StackOverflow</a></li>\n<li>tweet to <code>#textrank</code> on <a href=\"https://twitter.com/search?q=%23textrank\" rel=\"nofollow\">Twitter</a> (cc <code>@pacoid</code>)</li>\n</ul>\n<p>For related course materials and training, please check for calendar updates in the article\n<a href=\"https://medium.com/derwen/natural-language-processing-in-python-832b0a99791b\" rel=\"nofollow\">\"Natural Language Processing in Python\"</a>.</p>\n<p>Let us know if you find this package useful, tell us about use cases,\ndescribe what else you would like to see integrated, etc.\nFor inquiries about consulting work in machine learning, natural language,\nknowledge graph, and other AI applications, contact\n<a href=\"https://derwen.ai/contact\" rel=\"nofollow\">Derwen, Inc.</a></p>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://spacy.io/universe/project/spacy-pytextrank\" rel=\"nofollow\">https://spacy.io/universe/project/spacy-pytextrank</a></li>\n<li><a href=\"https://pypi.org/project/pytextrank/\" rel=\"nofollow\">https://pypi.org/project/pytextrank/</a></li>\n</ul>\n<h2>Testing</h2>\n<p>To run the unit tests:</p>\n<pre><code>coverage run -m unittest discover\n</code></pre>\n<p>To generate a coverage report and upload it to the <code>codecov.io</code>\nreporting site:</p>\n<pre><code>coverage report\nbash &lt;(curl -s https://codecov.io/bash) -t @.cc_token\n</code></pre>\n<p>Test coverage reports can be viewed at\n<a href=\"https://codecov.io/gh/DerwenAI/pytextrank\" rel=\"nofollow\">https://codecov.io/gh/DerwenAI/pytextrank</a></p>\n<h2>Attribution</h2>\n<p><strong>PyTextRank</strong> has an <a href=\"https://spdx.org/licenses/MIT.html\" rel=\"nofollow\">MIT</a> license,\nwhich is succinct and simplifies use in commercial applications.</p>\n<p>Please use the following BibTeX entry for citing <strong>PyTextRank</strong> in\npublications:</p>\n<pre><code>@Misc{PyTextRank,\nauthor = {Nathan, Paco},\ntitle = {PyTextRank, a Python implementation of TextRank for phrase extraction and summarization of text documents},\n    howpublished = {\\url{https://github.com/DerwenAI/pytextrank/}},\n    year = {2016}\n    }\n</code></pre>\n<h2>TODOs</h2>\n<ul>\n<li>fix Sphinx errors, generate docs</li>\n<li>build a conda package</li>\n<li>include more unit tests</li>\n<li>show examples of <code>spacy-wordnet</code> to enrich the lemma graph</li>\n<li>leverage <code>neuralcoref</code> to enrich the lemma graph</li>\n<li>generate a phrase graph, with entity linking to DBpedia, etc.</li>\n</ul>\n<h2>Kudos</h2>\n<p>Many thanks to contributors:\n<a href=\"https://github.com/htmartin\" rel=\"nofollow\">@htmartin</a>,\n<a href=\"https://github.com/williamsmj/\" rel=\"nofollow\">@williamsmj</a>,\n<a href=\"https://github.com/mattkohl\" rel=\"nofollow\">@mattkohl</a>,\n<a href=\"https://github.com/vanita5\" rel=\"nofollow\">@vanita5</a>,\n<a href=\"https://github.com/HarshGrandeur\" rel=\"nofollow\">@HarshGrandeur</a>,\n<a href=\"https://github.com/mnowotka\" rel=\"nofollow\">@mnowotka</a>,\n<a href=\"https://github.com/kjam\" rel=\"nofollow\">@kjam</a>,\n<a href=\"https://github.com/dvsrepo\" rel=\"nofollow\">@dvsrepo</a>,\n<a href=\"https://github.com/SaiThejeshwar\" rel=\"nofollow\">@SaiThejeshwar</a>,\n<a href=\"https://github.com/laxatives\" rel=\"nofollow\">@laxatives</a>,\n<a href=\"https://github.com/dimmu\" rel=\"nofollow\">@dimmu</a>,\n<a href=\"https://github.com/JasonZhangzy1757\" rel=\"nofollow\">@JasonZhangzy1757</a>,\n<a href=\"https://github.com/@jake-aft\" rel=\"nofollow\">@jake-aft</a>,\n<a href=\"https://github.com/@junchen1992\" rel=\"nofollow\">@junchen1992</a>,\nencouragement from the wonderful folks at <a href=\"https://github.com/explosion/spaCy\" rel=\"nofollow\">spaCy</a>,\nplus general support from <a href=\"https://derwen.ai/\" rel=\"nofollow\">Derwen, Inc.</a></p>\n<p><a href=\"https://memegenerator.net/img/instances/66942896.jpg\" rel=\"nofollow\"><img alt=\"thx noam\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2b43213d57cdd5ec28df7f27cdacf5d8fd13867/68747470733a2f2f6769746875622e636f6d2f44657277656e41492f70797465787472616e6b2f626c6f622f6d61737465722f646f63732f6e6f616d2e6a7067\"></a></p>\n\n          </div>"}, "last_serial": 6736005, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "2a10518c0c7f47269b0299e40ee8205d", "sha256": "412ed08fa3982fb0fe1315bb737b753d813bf6ebcd1c81aae6d83d35e557b3f9"}, "downloads": -1, "filename": "pytextrank-1.0.tar.gz", "has_sig": false, "md5_digest": "2a10518c0c7f47269b0299e40ee8205d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8356, "upload_time": "2017-03-13T17:31:32", "upload_time_iso_8601": "2017-03-13T17:31:32.190520Z", "url": "https://files.pythonhosted.org/packages/94/c0/053428d01bd01e2047c56651c6ea67fac16945eaed8f150435390beea620/pytextrank-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "bd302ee0dfdd9508f72d4dba5d8252d1", "sha256": "ea76f42716a92ab0d30cf1765e5d824d416462b7f54d6ac1381f40270d27362f"}, "downloads": -1, "filename": "pytextrank-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bd302ee0dfdd9508f72d4dba5d8252d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8889, "upload_time": "2017-05-01T03:23:22", "upload_time_iso_8601": "2017-05-01T03:23:22.725512Z", "url": "https://files.pythonhosted.org/packages/80/f4/1753133243756d85fee8afdcc62643552b2ec969e4df62153aeacdf6a6e0/pytextrank-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e3045ddb6995a9321e38ec7aa7b5d466", "sha256": "cc776a0d2fb769db2302903d81c64fa21cf093abd728e3cba0d3607a7faa4529"}, "downloads": -1, "filename": "pytextrank-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e3045ddb6995a9321e38ec7aa7b5d466", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8997, "upload_time": "2017-06-07T22:19:55", "upload_time_iso_8601": "2017-06-07T22:19:55.231542Z", "url": "https://files.pythonhosted.org/packages/e0/02/fcce82967b55680d72e080c1a7119b04db5bb422adf57b5005666409bfb5/pytextrank-1.1.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "d3bbf104f15a5b6b705857a22f3cb909", "sha256": "67ca0feeaed8d83ac09fe8a20ac64f280364c1db26464f8405508cb7a2ad5a1d"}, "downloads": -1, "filename": "pytextrank-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d3bbf104f15a5b6b705857a22f3cb909", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13093, "upload_time": "2019-11-01T18:55:11", "upload_time_iso_8601": "2019-11-01T18:55:11.386874Z", "url": "https://files.pythonhosted.org/packages/b1/42/8a769f6b0655ef9c2dc6a49919ab09f0d7795739b3e95c6b98cb744d3674/pytextrank-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1debfefb43e171a7a3c2d2ae2b0e794", "sha256": "5370dc8e7e4ff70a0a404ef2025841815713fb8105bbdf05d16c1de6429df2cb"}, "downloads": -1, "filename": "pytextrank-1.2.1.tar.gz", "has_sig": false, "md5_digest": "e1debfefb43e171a7a3c2d2ae2b0e794", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10212, "upload_time": "2019-11-01T18:55:12", "upload_time_iso_8601": "2019-11-01T18:55:12.885008Z", "url": "https://files.pythonhosted.org/packages/a8/6f/e7b4389b6b44076493a7b7a5dcffc42502c2f9c433552a03911f6e3e9b6d/pytextrank-1.2.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "96fc43dfcb8c400a7eed0ddebfe966e0", "sha256": "094a6389c0ec8c4821af2bf33e53039362e209fa8a393d4031a906dadafa88c0"}, "downloads": -1, "filename": "pytextrank-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "96fc43dfcb8c400a7eed0ddebfe966e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10594, "upload_time": "2019-11-05T20:41:20", "upload_time_iso_8601": "2019-11-05T20:41:20.256437Z", "url": "https://files.pythonhosted.org/packages/1d/bb/b7f864f862e6fbbbe9c935c5fd006e96fc8cc6c63b74d6c1b8adb668d3d1/pytextrank-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "219ced155bb56da087abbc8f8e671ddb", "sha256": "1d47067f037d1f7e146f70c877d793aacc0d16747ede89e8e254df42437dd9cb"}, "downloads": -1, "filename": "pytextrank-2.0.0.tar.gz", "has_sig": false, "md5_digest": "219ced155bb56da087abbc8f8e671ddb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10543, "upload_time": "2019-11-05T20:41:21", "upload_time_iso_8601": "2019-11-05T20:41:21.957866Z", "url": "https://files.pythonhosted.org/packages/70/8a/b61e272b2e2529ff68c504e50f356ca7e276738306890549c4938b26bf05/pytextrank-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "7b239b1f311a71867e2d45b54af30ebd", "sha256": "26d4cb71f4e2092c7e90a6ee19191bf1feed921cf5701470834ab64a76c054b1"}, "downloads": -1, "filename": "pytextrank-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7b239b1f311a71867e2d45b54af30ebd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10769, "upload_time": "2020-03-02T20:43:25", "upload_time_iso_8601": "2020-03-02T20:43:25.720455Z", "url": "https://files.pythonhosted.org/packages/9d/6d/8895314aae96fd6223a8b728f6b1f75eea2865590449a6d53f2c494a9b5c/pytextrank-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3dfd73a155c7dc649e36c6edae0548e", "sha256": "6a49077431cc60f87ca6bca30c97e9c2fec2282fb9613bcf68eb8f5cb572c4e6"}, "downloads": -1, "filename": "pytextrank-2.0.1.tar.gz", "has_sig": false, "md5_digest": "d3dfd73a155c7dc649e36c6edae0548e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12092, "upload_time": "2020-03-02T20:43:26", "upload_time_iso_8601": "2020-03-02T20:43:26.851223Z", "url": "https://files.pythonhosted.org/packages/7c/c8/31bdd411a9cd4725e0461dbe03e92020117a9d591ee6364d6617909bf718/pytextrank-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b239b1f311a71867e2d45b54af30ebd", "sha256": "26d4cb71f4e2092c7e90a6ee19191bf1feed921cf5701470834ab64a76c054b1"}, "downloads": -1, "filename": "pytextrank-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7b239b1f311a71867e2d45b54af30ebd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10769, "upload_time": "2020-03-02T20:43:25", "upload_time_iso_8601": "2020-03-02T20:43:25.720455Z", "url": "https://files.pythonhosted.org/packages/9d/6d/8895314aae96fd6223a8b728f6b1f75eea2865590449a6d53f2c494a9b5c/pytextrank-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3dfd73a155c7dc649e36c6edae0548e", "sha256": "6a49077431cc60f87ca6bca30c97e9c2fec2282fb9613bcf68eb8f5cb572c4e6"}, "downloads": -1, "filename": "pytextrank-2.0.1.tar.gz", "has_sig": false, "md5_digest": "d3dfd73a155c7dc649e36c6edae0548e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12092, "upload_time": "2020-03-02T20:43:26", "upload_time_iso_8601": "2020-03-02T20:43:26.851223Z", "url": "https://files.pythonhosted.org/packages/7c/c8/31bdd411a9cd4725e0461dbe03e92020117a9d591ee6364d6617909bf718/pytextrank-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:32 2020"}