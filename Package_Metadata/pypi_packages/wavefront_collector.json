{"info": {"author": "Wavefront", "author_email": "mike@wavefront.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: BSD License", "Topic :: Utilities"], "description": "Overview\n========\n\nThe Wavefront collector facilitates external integrations with Wavefront. This allows metrics from external services such as New Relic to be pulled into Wavefront. Each integration is a executed via this utility using the command name specified in the table below.\n\nCurrent Integrations\n====================\n\n+------------------------+--------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+\n| Integration            | Command Name                                                                                                       | Description                                                                                                      | Python File                                                                                                           |\n+========================+====================================================================================================================+==================================================================================================================+=======================================================================================================================+\n| AppDynamics            | `appdynamics <https://github.com/wavefrontHQ/wavefront-collector/blob/master/docs/README.appdynamics.md>`__        | Metrics from AppDynamics                                                                                         | `appdynamics.py <https://github.com/wavefrontHQ/wavefront-collector/blob/master/wavefront/appdynamics.py>`__          |\n+------------------------+--------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+\n| New Relic              | `newrelic <https://github.com/wavefrontHQ/wavefront-collector/blob/master/docs/README.newrelic.md>`__              | Extracts metrics from New Relic API                                                                              | `newrelic.py <https://github.com/wavefrontHQ/wavefront-collector/blob/master/wavefront/newrelic.py>`__                |\n+------------------------+--------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+\n| AWS Cloudwatch         | `awscloudwatch <https://github.com/wavefrontHQ/wavefront-collector/blob/master/docs/README.awscloudwatch.md>`__    | Metrics pulled from AWS Cloudwatch                                                                               | `awscloudwatch.py <https://github.com/wavefrontHQ/wavefront-collector/blob/master/wavefront/awscloudwatch.py>`__      |\n+------------------------+--------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+\n| AWS Billing            | `awsbilling <https://github.com/wavefrontHQ/wavefront-collector/blob/master/docs/README.awsbilling.md>`__          | AWS Billing metrics retrieved from Billing Reports                                                               | `awsbilling.py <https://github.com/wavefrontHQ/wavefront-collector/blob/master/wavefront/awsbilling.py>`__            |\n+------------------------+--------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+\n| Linux System Checker   | `systemchecker <https://github.com/wavefrontHQ/wavefront-collector/blob/master/docs/README.system_checker.md>`__   | Creates Wavefront events when files matching a pattern are found (e.g., core dumps) or when files have changed   | `system\\_checker.py <https://github.com/wavefrontHQ/wavefront-collector/blob/master/wavefront/system_checker.py>`__   |\n+------------------------+--------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------+\n\nInstallation\n============\n\nPrerequisites\n-------------\n\nA couple of Linux development packages are required to run the collector:\n\n#. libffi-devel\n#. openssl-devel\n\nInstall using pip or using the provided setup.py.\n\n::\n\n    > pip install wavefront_collector\n\nExecuting an Integration\n========================\n\nThe ``wf`` script (a symlink to ``wave.py``) is the primary interface to running commands. This script supports 2 methods of running a command:\n\n#. `Command line <#cmdline>`__\n#. `Configuration file <#configfile>`__\n\nRun Method 1: Command Line\n==========================\n\nRunning a command via the command line is the simplest method. It allows you to execute a single integration in either the foreground or background. In this mode, the ``wf`` script has the following command line options:\n\n+----------------+------------+--------------------------------------------------------------------------------------------------------+\n| Argument       | Option     | Description                                                                                            |\n+================+============+========================================================================================================+\n| ``--daemon``   | N/A        | Run in the background as a daemon. The default is foreground without this option.                      |\n+----------------+------------+--------------------------------------------------------------------------------------------------------+\n| ``COMMAND``    | N/A        | Execute the given command (see ``Current Integrations`` section above for names available).            |\n+----------------+------------+--------------------------------------------------------------------------------------------------------+\n| ``--config``   | ``FILE``   | Provide the configuration file to the ``COMMAND``. The default path and file is set by each command.   |\n+----------------+------------+--------------------------------------------------------------------------------------------------------+\n\nAdditional options available in daemon mode (i.e., when using --daemon option):\n\n+---------------+---------------+---------------------------------------------------------------------------------------+\n| Argument      | Option        | Description                                                                           |\n+===============+===============+=======================================================================================+\n| ``--pid``     | ``FILE``      | The path to the PID file where the PID will be written (default: ./wavefront.pid)     |\n+---------------+---------------+---------------------------------------------------------------------------------------+\n| ``--out``     | ``FILE``      | The path to the file that will capture STDOUT and STDERR (default: ./wavefront.out)   |\n+---------------+---------------+---------------------------------------------------------------------------------------+\n| ``--delay``   | ``SECONDS``   | The number of sections to delay between each iteration (default: 90)                  |\n+---------------+---------------+---------------------------------------------------------------------------------------+\n\nCommand Line Examples\n---------------------\n\nExamples of executing the ``systemchecker`` integration from the command line using the ``system_checker.conf`` file.\n\n**``system_checker.conf``**\n\n::\n\n    [global]\n    cache_dir=/tmp/sc-wavefront-cache\n\n    [find_files]\n    paths=/tmp/\n    patterns=core*\n    event_names=core-dump\n\n    [wavefront]\n    api_key=TOKEN\n    api_base=https://INSTANCE.wavefront.com\n\n**Execute the ``systemchecker`` command just once in the foreground**\n\n::\n\n    > wf systemchecker --config system_checker.conf\n\n**Execute the ``systemchecker`` command in the background and continue running every 30s**\n\n::\n\n    > wf --daemon --delay 30 systemchecker --config system_checker.conf\n\nRun Method 2: Configuration File\n================================\n\nThe configuration file execution mode allows you to run one or more commands (either simultaneously or separately). In this mode, the ``wf`` script has the same command line options as the `command line mode <#cmdline>`__. Options specified on the command line take precedence over those in the configuration file. One additional required argument is the configuration file path:\n\n+------------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Argument   | Option     | Description                                                                                                                                                                                            |\n+============+============+========================================================================================================================================================================================================+\n| ``-c``     | ``FILE``   | The configuration file to describe the command(s) to execute. This is the option that puts the script into \"configuration file mode\". See below for the supported options in the configuration file.   |\n+------------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n``-c FILE`` option *must* be supplied on the command line to indicate to ``wf`` that it should determine which command(s) to run from the configuration file ``FILE``.\n\nConfiguration File Specification\n--------------------------------\n\nThis section outlines the specification of the configuration file that the ``wf`` script supports when loading and executing commands from a file rather than the command line.\n\nSection: global\n~~~~~~~~~~~~~~~\n\n+---------------------+-------------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Configuration Key   | Required?   | Default           | Description                                                                                                                                                                                                                                                                                                                  |\n+=====================+=============+===================+==============================================================================================================================================================================================================================================================================================================================+\n| daemon              | N           | false             | Run in the background or foreground. The command line option will override this value.                                                                                                                                                                                                                                       |\n+---------------------+-------------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| out                 | N           | ./wavefront.out   | The file to put the STDOUT and STDERR in. The command line option will override this value. NOTE: This is only valid when in daemon mode                                                                                                                                                                                     |\n+---------------------+-------------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| pid                 | N           | ./wavefront.pid   | The location of the PID file. The command line option will override this value. NOTE: This is only valid when in daemon mode                                                                                                                                                                                                 |\n+---------------------+-------------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| threads             | Y           | None              | The comma-separated list of commands to run in separate threads. The name provided here can be anything as it is just a placeholder for the section name where the configuration of each command resides. Each name listed here requires an additional section in the configuration file labeled ``thread-[thread name]``.   |\n+---------------------+-------------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\nSection: thread-[thread name]\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere should be one section per name listed in the ``threads`` key in the ``global`` section.\n\n+---------------------+-------------+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Configuration Key   | Required?   | Default   | Description                                                                                                                                                                      |\n+=====================+=============+===========+==================================================================================================================================================================================+\n| command             | Y           | None      | The name of the command to execute                                                                                                                                               |\n+---------------------+-------------+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| args                | Y           | None      | The comma separated list of arguments. Each argument should be separated by a comma (even values provided to a given argument). Example: --config,foo.conf,--verbose             |\n+---------------------+-------------+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| delay               | N           | None      | The number of seconds to delay between each iteration of this command being executed. If delay is not set, only one iteration will be executed and the ``wf`` script will end.   |\n+---------------------+-------------+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\nService Script\n==============\n\n``wavefront-collector`` is provided to execute the collector as a service. This script has following options:\n\n``start`` - starts the service running in the background using ``--daemon`` ``--pid /tmp/wavefront-collector.pid`` ``--out /tmp/wavefront-collector.log`` ``-c /opt/wavefront/etc/wavefront-collector.conf``\n\n``stop`` - stops the service by sending a SIGTERM signal to the PID in the PID file ``/tmp/wavefront-collector.pid``\n\n``status`` - prints the current status of the service (running or not) and the last lines of the log file if the service is running\n\n``restart`` - stops, then starts the service using the above commands\n\nConfiguration File Examples\n---------------------------\n\n**Execute ``systemchecker`` and ``awscloudwatch`` in the foreground via the command line mode (iterating once every 60 and 90 seconds respectfully)**\n\n::\n\n    > wf -c example.conf\n\n**``example.conf``**\n\n::\n\n    [global]\n    pid=/tmp/wf.pid\n    out=/tmp/wf.out\n    daemon=false\n    threads=sc1,cloud1\n\n    [thread-sc1]\n    command=systemchecker\n    args=--config,system_checker.conf\n    delay=60\n\n    [thread-cloud1]\n    command=awscloudwatch\n    args=--config,awscloudwatch.conf\n    delay=90\n\nAdditional Details\n==================\n\n-  Create a new command by following these `instructions <docs/README.create_new_integration_command.md>`__", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.wavefront.com", "keywords": "wavefront wavefront_integration collector metrics", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "wavefront_collector", "package_url": "https://pypi.org/project/wavefront_collector/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/wavefront_collector/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://www.wavefront.com"}, "release_url": "https://pypi.org/project/wavefront_collector/0.0.49/", "requires_dist": null, "requires_python": null, "summary": "Wavefront Collector Tools", "version": "0.0.49", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>The Wavefront collector facilitates external integrations with Wavefront. This allows metrics from external services such as New Relic to be pulled into Wavefront. Each integration is a executed via this utility using the command name specified in the table below.</p>\n</div>\n<div id=\"current-integrations\">\n<h2>Current Integrations</h2>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Integration</th>\n<th>Command Name</th>\n<th>Description</th>\n<th>Python File</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>AppDynamics</td>\n<td><a href=\"https://github.com/wavefrontHQ/wavefront-collector/blob/master/docs/README.appdynamics.md\" rel=\"nofollow\">appdynamics</a></td>\n<td>Metrics from AppDynamics</td>\n<td><a href=\"https://github.com/wavefrontHQ/wavefront-collector/blob/master/wavefront/appdynamics.py\" rel=\"nofollow\">appdynamics.py</a></td>\n</tr>\n<tr><td>New Relic</td>\n<td><a href=\"https://github.com/wavefrontHQ/wavefront-collector/blob/master/docs/README.newrelic.md\" rel=\"nofollow\">newrelic</a></td>\n<td>Extracts metrics from New Relic API</td>\n<td><a href=\"https://github.com/wavefrontHQ/wavefront-collector/blob/master/wavefront/newrelic.py\" rel=\"nofollow\">newrelic.py</a></td>\n</tr>\n<tr><td>AWS Cloudwatch</td>\n<td><a href=\"https://github.com/wavefrontHQ/wavefront-collector/blob/master/docs/README.awscloudwatch.md\" rel=\"nofollow\">awscloudwatch</a></td>\n<td>Metrics pulled from AWS Cloudwatch</td>\n<td><a href=\"https://github.com/wavefrontHQ/wavefront-collector/blob/master/wavefront/awscloudwatch.py\" rel=\"nofollow\">awscloudwatch.py</a></td>\n</tr>\n<tr><td>AWS Billing</td>\n<td><a href=\"https://github.com/wavefrontHQ/wavefront-collector/blob/master/docs/README.awsbilling.md\" rel=\"nofollow\">awsbilling</a></td>\n<td>AWS Billing metrics retrieved from Billing Reports</td>\n<td><a href=\"https://github.com/wavefrontHQ/wavefront-collector/blob/master/wavefront/awsbilling.py\" rel=\"nofollow\">awsbilling.py</a></td>\n</tr>\n<tr><td>Linux System Checker</td>\n<td><a href=\"https://github.com/wavefrontHQ/wavefront-collector/blob/master/docs/README.system_checker.md\" rel=\"nofollow\">systemchecker</a></td>\n<td>Creates Wavefront events when files matching a pattern are found (e.g., core dumps) or when files have changed</td>\n<td><a href=\"https://github.com/wavefrontHQ/wavefront-collector/blob/master/wavefront/system_checker.py\" rel=\"nofollow\">system_checker.py</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<h2 id=\"prerequisites\"><span class=\"section-subtitle\">Prerequisites</span></h2>\n<p>A couple of Linux development packages are required to run the collector:</p>\n<ol>\n<li>libffi-devel</li>\n<li>openssl-devel</li>\n</ol>\n<p>Install using pip or using the provided setup.py.</p>\n<pre>&gt; pip install wavefront_collector\n</pre>\n</div>\n<div id=\"executing-an-integration\">\n<h2>Executing an Integration</h2>\n<p>The <tt>wf</tt> script (a symlink to <tt>wave.py</tt>) is the primary interface to running commands. This script supports 2 methods of running a command:</p>\n<ol>\n<li><a href=\"#cmdline\" rel=\"nofollow\">Command line</a></li>\n<li><a href=\"#configfile\" rel=\"nofollow\">Configuration file</a></li>\n</ol>\n</div>\n<div id=\"run-method-1-command-line\">\n<h2>Run Method 1: Command Line</h2>\n<p>Running a command via the command line is the simplest method. It allows you to execute a single integration in either the foreground or background. In this mode, the <tt>wf</tt> script has the following command line options:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Argument</th>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt><span class=\"pre\">--daemon</span></tt></td>\n<td>N/A</td>\n<td>Run in the background as a daemon. The default is foreground without this option.</td>\n</tr>\n<tr><td><tt>COMMAND</tt></td>\n<td>N/A</td>\n<td>Execute the given command (see <tt>Current Integrations</tt> section above for names available).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--config</span></tt></td>\n<td><tt>FILE</tt></td>\n<td>Provide the configuration file to the <tt>COMMAND</tt>. The default path and file is set by each command.</td>\n</tr>\n</tbody>\n</table>\n<p>Additional options available in daemon mode (i.e., when using \u2013daemon option):</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Argument</th>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt><span class=\"pre\">--pid</span></tt></td>\n<td><tt>FILE</tt></td>\n<td>The path to the PID file where the PID will be written (default: ./wavefront.pid)</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--out</span></tt></td>\n<td><tt>FILE</tt></td>\n<td>The path to the file that will capture STDOUT and STDERR (default: ./wavefront.out)</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--delay</span></tt></td>\n<td><tt>SECONDS</tt></td>\n<td>The number of sections to delay between each iteration (default: 90)</td>\n</tr>\n</tbody>\n</table>\n<div id=\"command-line-examples\">\n<h3>Command Line Examples</h3>\n<p>Examples of executing the <tt>systemchecker</tt> integration from the command line using the <tt>system_checker.conf</tt> file.</p>\n<p><strong>``system_checker.conf``</strong></p>\n<pre>[global]\ncache_dir=/tmp/sc-wavefront-cache\n\n[find_files]\npaths=/tmp/\npatterns=core*\nevent_names=core-dump\n\n[wavefront]\napi_key=TOKEN\napi_base=https://INSTANCE.wavefront.com\n</pre>\n<p><strong>Execute the ``systemchecker`` command just once in the foreground</strong></p>\n<pre>&gt; wf systemchecker --config system_checker.conf\n</pre>\n<p><strong>Execute the ``systemchecker`` command in the background and continue running every 30s</strong></p>\n<pre>&gt; wf --daemon --delay 30 systemchecker --config system_checker.conf\n</pre>\n</div>\n</div>\n<div id=\"run-method-2-configuration-file\">\n<h2>Run Method 2: Configuration File</h2>\n<p>The configuration file execution mode allows you to run one or more commands (either simultaneously or separately). In this mode, the <tt>wf</tt> script has the same command line options as the <a href=\"#cmdline\" rel=\"nofollow\">command line mode</a>. Options specified on the command line take precedence over those in the configuration file. One additional required argument is the configuration file path:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Argument</th>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt><span class=\"pre\">-c</span></tt></td>\n<td><tt>FILE</tt></td>\n<td>The configuration file to describe the command(s) to execute. This is the option that puts the script into \u201cconfiguration file mode\u201d. See below for the supported options in the configuration file.</td>\n</tr>\n</tbody>\n</table>\n<p><tt><span class=\"pre\">-c</span> FILE</tt> option <em>must</em> be supplied on the command line to indicate to <tt>wf</tt> that it should determine which command(s) to run from the configuration file <tt>FILE</tt>.</p>\n<div id=\"configuration-file-specification\">\n<h3>Configuration File Specification</h3>\n<p>This section outlines the specification of the configuration file that the <tt>wf</tt> script supports when loading and executing commands from a file rather than the command line.</p>\n<div id=\"section-global\">\n<h4>Section: global</h4>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Configuration Key</th>\n<th>Required?</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>daemon</td>\n<td>N</td>\n<td>false</td>\n<td>Run in the background or foreground. The command line option will override this value.</td>\n</tr>\n<tr><td>out</td>\n<td>N</td>\n<td>./wavefront.out</td>\n<td>The file to put the STDOUT and STDERR in. The command line option will override this value. NOTE: This is only valid when in daemon mode</td>\n</tr>\n<tr><td>pid</td>\n<td>N</td>\n<td>./wavefront.pid</td>\n<td>The location of the PID file. The command line option will override this value. NOTE: This is only valid when in daemon mode</td>\n</tr>\n<tr><td>threads</td>\n<td>Y</td>\n<td>None</td>\n<td>The comma-separated list of commands to run in separate threads. The name provided here can be anything as it is just a placeholder for the section name where the configuration of each command resides. Each name listed here requires an additional section in the configuration file labeled <tt><span class=\"pre\">thread-[thread</span> name]</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"section-thread-thread-name\">\n<h4>Section: thread-[thread name]</h4>\n<p>There should be one section per name listed in the <tt>threads</tt> key in the <tt>global</tt> section.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Configuration Key</th>\n<th>Required?</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>command</td>\n<td>Y</td>\n<td>None</td>\n<td>The name of the command to execute</td>\n</tr>\n<tr><td>args</td>\n<td>Y</td>\n<td>None</td>\n<td>The comma separated list of arguments. Each argument should be separated by a comma (even values provided to a given argument). Example: \u2013config,foo.conf,\u2013verbose</td>\n</tr>\n<tr><td>delay</td>\n<td>N</td>\n<td>None</td>\n<td>The number of seconds to delay between each iteration of this command being executed. If delay is not set, only one iteration will be executed and the <tt>wf</tt> script will end.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div id=\"service-script\">\n<h2>Service Script</h2>\n<p><tt><span class=\"pre\">wavefront-collector</span></tt> is provided to execute the collector as a service. This script has following options:</p>\n<p><tt>start</tt> - starts the service running in the background using <tt><span class=\"pre\">--daemon</span></tt> <tt><span class=\"pre\">--pid</span> <span class=\"pre\">/tmp/wavefront-collector.pid</span></tt> <tt><span class=\"pre\">--out</span> <span class=\"pre\">/tmp/wavefront-collector.log</span></tt> <tt><span class=\"pre\">-c</span> <span class=\"pre\">/opt/wavefront/etc/wavefront-collector.conf</span></tt></p>\n<p><tt>stop</tt> - stops the service by sending a SIGTERM signal to the PID in the PID file <tt><span class=\"pre\">/tmp/wavefront-collector.pid</span></tt></p>\n<p><tt>status</tt> - prints the current status of the service (running or not) and the last lines of the log file if the service is running</p>\n<p><tt>restart</tt> - stops, then starts the service using the above commands</p>\n<div id=\"configuration-file-examples\">\n<h3>Configuration File Examples</h3>\n<p><strong>Execute ``systemchecker`` and ``awscloudwatch`` in the foreground via the command line mode (iterating once every 60 and 90 seconds respectfully)</strong></p>\n<pre>&gt; wf -c example.conf\n</pre>\n<p><strong>``example.conf``</strong></p>\n<pre>[global]\npid=/tmp/wf.pid\nout=/tmp/wf.out\ndaemon=false\nthreads=sc1,cloud1\n\n[thread-sc1]\ncommand=systemchecker\nargs=--config,system_checker.conf\ndelay=60\n\n[thread-cloud1]\ncommand=awscloudwatch\nargs=--config,awscloudwatch.conf\ndelay=90\n</pre>\n</div>\n</div>\n<div id=\"additional-details\">\n<h2>Additional Details</h2>\n<ul>\n<li>Create a new command by following these <a href=\"docs/README.create_new_integration_command.md\" rel=\"nofollow\">instructions</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2332127, "releases": {"0.0.34": [{"comment_text": "", "digests": {"md5": "25da97c15d19786a0024766d5f911e34", "sha256": "ae4d359c86c311dbfe4002f000d0e1663e6fb871548aeaf0ac21fcde4adb29dc"}, "downloads": -1, "filename": "wavefront_collector-0.0.34.tar.gz", "has_sig": false, "md5_digest": "25da97c15d19786a0024766d5f911e34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39515, "upload_time": "2016-08-01T21:35:03", "upload_time_iso_8601": "2016-08-01T21:35:03.141522Z", "url": "https://files.pythonhosted.org/packages/74/ad/57413b95ab2955440020956829e76650260c2e6200c8aeb1d507ea4cc0fd/wavefront_collector-0.0.34.tar.gz", "yanked": false}], "0.0.35": [{"comment_text": "", "digests": {"md5": "7b0e5d3233ab7e0b67410d834f114c24", "sha256": "0ba4526e92aaef0ba3c774a262836cc46ab70491d4447a61ece48fa0e728c0e3"}, "downloads": -1, "filename": "wavefront_collector-0.0.35.tar.gz", "has_sig": false, "md5_digest": "7b0e5d3233ab7e0b67410d834f114c24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39466, "upload_time": "2016-08-02T09:59:01", "upload_time_iso_8601": "2016-08-02T09:59:01.897505Z", "url": "https://files.pythonhosted.org/packages/ce/3c/539688b9e75fb1843c8df6b8efe6b2032e611915b43ec123a477ce86827a/wavefront_collector-0.0.35.tar.gz", "yanked": false}], "0.0.36": [{"comment_text": "", "digests": {"md5": "9464d73be7aa817b6fc348c44277f943", "sha256": "bd9390cfe9b242e908fb0f8901be3faa27d7efa044c1de1db99627a62567ee3f"}, "downloads": -1, "filename": "wavefront_collector-0.0.36.tar.gz", "has_sig": false, "md5_digest": "9464d73be7aa817b6fc348c44277f943", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39461, "upload_time": "2016-08-02T10:01:19", "upload_time_iso_8601": "2016-08-02T10:01:19.994890Z", "url": "https://files.pythonhosted.org/packages/49/72/96cfe50bb72dea639f777e6e2b5fd575afbb3918afd57830f9f429822093/wavefront_collector-0.0.36.tar.gz", "yanked": false}], "0.0.37": [{"comment_text": "", "digests": {"md5": "bd6fab398486d59842fb532b3834cd13", "sha256": "f301d6571ba4fe16e17e058750c5450804e0847b97379c3c7efdccc504ee464e"}, "downloads": -1, "filename": "wavefront_collector-0.0.37.tar.gz", "has_sig": false, "md5_digest": "bd6fab398486d59842fb532b3834cd13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39464, "upload_time": "2016-08-02T10:36:10", "upload_time_iso_8601": "2016-08-02T10:36:10.045103Z", "url": "https://files.pythonhosted.org/packages/a1/f8/39de7850a202889bcb375155dec096b3967217328cd17f49cef0d0509c2a/wavefront_collector-0.0.37.tar.gz", "yanked": false}], "0.0.38": [{"comment_text": "", "digests": {"md5": "9e8210bf2a55e10148b831b37ed15a80", "sha256": "880e5e0f9e355766a8b10e86a3fe18c2bb33466187ef1dbca112fbe3678bd637"}, "downloads": -1, "filename": "wavefront_collector-0.0.38.tar.gz", "has_sig": false, "md5_digest": "9e8210bf2a55e10148b831b37ed15a80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39486, "upload_time": "2016-08-02T10:57:57", "upload_time_iso_8601": "2016-08-02T10:57:57.063504Z", "url": "https://files.pythonhosted.org/packages/c9/c4/c6318d9251ccec7f1127ea4059f266b4d341476729d8bba27be50d5eaa8d/wavefront_collector-0.0.38.tar.gz", "yanked": false}], "0.0.39": [{"comment_text": "", "digests": {"md5": "ea89ca94856616794b11bacdf4a84bdc", "sha256": "95b14add21d46989a60d79de3b1968b0d46e99c1ee1443bd14ac7f277cf67766"}, "downloads": -1, "filename": "wavefront_collector-0.0.39.tar.gz", "has_sig": false, "md5_digest": "ea89ca94856616794b11bacdf4a84bdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39316, "upload_time": "2016-08-02T11:11:47", "upload_time_iso_8601": "2016-08-02T11:11:47.962083Z", "url": "https://files.pythonhosted.org/packages/34/21/b05684de7f9c5247f05a5287df86eedf66e47d200e32dc0f91150dc194c6/wavefront_collector-0.0.39.tar.gz", "yanked": false}], "0.0.40": [{"comment_text": "", "digests": {"md5": "f029c0b93b3288e70acc1d783c0be766", "sha256": "9ee77a084c813d5ab115d83785c65759a7589890236f96088c0fefa78fa7690a"}, "downloads": -1, "filename": "wavefront_collector-0.0.40.tar.gz", "has_sig": false, "md5_digest": "f029c0b93b3288e70acc1d783c0be766", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39326, "upload_time": "2016-08-02T11:39:24", "upload_time_iso_8601": "2016-08-02T11:39:24.550712Z", "url": "https://files.pythonhosted.org/packages/46/87/5eb9b574ea3df7e09a4fb69fb61ecfe164800732218885ffff9d28832287/wavefront_collector-0.0.40.tar.gz", "yanked": false}], "0.0.41": [{"comment_text": "", "digests": {"md5": "4f7b3cecb9f150fb92981f60cb0ac5c9", "sha256": "72c498285ab49074792d9861c0906c6e2dd749ec218fc062a0c9df004a347559"}, "downloads": -1, "filename": "wavefront_collector-0.0.41.tar.gz", "has_sig": false, "md5_digest": "4f7b3cecb9f150fb92981f60cb0ac5c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39373, "upload_time": "2016-08-02T11:58:20", "upload_time_iso_8601": "2016-08-02T11:58:20.071147Z", "url": "https://files.pythonhosted.org/packages/1c/09/0645ad7fc24ff0ed7d734080d260f34bdfdaae71364d6543fffc276d65a0/wavefront_collector-0.0.41.tar.gz", "yanked": false}], "0.0.42": [{"comment_text": "", "digests": {"md5": "f9002baf818671eed9293f0289b4e88a", "sha256": "7907bcd66b7a60c8a2a53e875bf66642fc5ee8def06e1f10eb81b32236730bae"}, "downloads": -1, "filename": "wavefront_collector-0.0.42.tar.gz", "has_sig": false, "md5_digest": "f9002baf818671eed9293f0289b4e88a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39443, "upload_time": "2016-08-02T15:27:57", "upload_time_iso_8601": "2016-08-02T15:27:57.748270Z", "url": "https://files.pythonhosted.org/packages/42/27/417da1dca0a22fb14a8a04ad7d826cc968b18935862529235487b6c1a20f/wavefront_collector-0.0.42.tar.gz", "yanked": false}], "0.0.44": [{"comment_text": "", "digests": {"md5": "67463d17a91b447ce4591fd0d239eb97", "sha256": "6e042225224735a6390f454ebfd44e39d7f751b44d5ecca87c28c244da87607c"}, "downloads": -1, "filename": "wavefront_collector-0.0.44.tar.gz", "has_sig": false, "md5_digest": "67463d17a91b447ce4591fd0d239eb97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39413, "upload_time": "2016-08-02T16:04:20", "upload_time_iso_8601": "2016-08-02T16:04:20.641626Z", "url": "https://files.pythonhosted.org/packages/e9/f7/a4b15373812ca6a99a8a14daeb5fc177b603e7fba39298f60a00ab09b3af/wavefront_collector-0.0.44.tar.gz", "yanked": false}], "0.0.45": [{"comment_text": "", "digests": {"md5": "ecf37b87660db4dfe11b9dfe1c0cadca", "sha256": "57915cc334b557b8abd1b8a2a5eef9c2665f9193c198b6d38edbbd367d6c781e"}, "downloads": -1, "filename": "wavefront_collector-0.0.45.tar.gz", "has_sig": false, "md5_digest": "ecf37b87660db4dfe11b9dfe1c0cadca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39533, "upload_time": "2016-08-02T16:30:39", "upload_time_iso_8601": "2016-08-02T16:30:39.792002Z", "url": "https://files.pythonhosted.org/packages/a4/4a/800c125ecf54b7abba0fb67cd5d776e9f609bfdb0a2c4be45cbdd40a46ce/wavefront_collector-0.0.45.tar.gz", "yanked": false}], "0.0.46": [{"comment_text": "", "digests": {"md5": "4d91aba8c8111a0de30e5e6f93f65ca8", "sha256": "e7aadb2c158caa3b2072b233e4e6cab984e64d6dadbdd26079e21c7338e5c691"}, "downloads": -1, "filename": "wavefront_collector-0.0.46.tar.gz", "has_sig": false, "md5_digest": "4d91aba8c8111a0de30e5e6f93f65ca8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39542, "upload_time": "2016-08-05T00:22:35", "upload_time_iso_8601": "2016-08-05T00:22:35.979824Z", "url": "https://files.pythonhosted.org/packages/6f/01/8b061cbf44b8d58fe5662f303511ae77bdeac5f191a17d76cd6180e1bc5d/wavefront_collector-0.0.46.tar.gz", "yanked": false}], "0.0.47": [{"comment_text": "", "digests": {"md5": "dd3e4cf31f34aed0ac742d355bb0a56a", "sha256": "36efd9b75eeab9388e309a6217349a8abc45fdaabf44fd1844fc90a6b8fd3068"}, "downloads": -1, "filename": "wavefront_collector-0.0.47.tar.gz", "has_sig": false, "md5_digest": "dd3e4cf31f34aed0ac742d355bb0a56a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39505, "upload_time": "2016-08-05T01:18:16", "upload_time_iso_8601": "2016-08-05T01:18:16.942450Z", "url": "https://files.pythonhosted.org/packages/79/5b/896e36e34e41f8003e73005a7e2906ee2a14b6da896c94bc6b90b6e31c0d/wavefront_collector-0.0.47.tar.gz", "yanked": false}], "0.0.48": [{"comment_text": "", "digests": {"md5": "5e96a47f23960d39323f79d3d0233720", "sha256": "1e15f3b89566bf02a15b501812d2d85bd3423b6c66d2d3aa07d097a254d6b598"}, "downloads": -1, "filename": "wavefront_collector-0.0.48.tar.gz", "has_sig": false, "md5_digest": "5e96a47f23960d39323f79d3d0233720", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39501, "upload_time": "2016-08-05T01:23:22", "upload_time_iso_8601": "2016-08-05T01:23:22.482498Z", "url": "https://files.pythonhosted.org/packages/73/5a/596353bf1d02147bbc79d7cf9eaade0bc0da92e2a0837031a3141f0b8dff/wavefront_collector-0.0.48.tar.gz", "yanked": false}], "0.0.49": [{"comment_text": "", "digests": {"md5": "daa711987fabe8d0cf974d00a39c8aed", "sha256": "fa9c499346829fcc9d8eee6818403d003384be453f4cb240f99fc1a90de5243b"}, "downloads": -1, "filename": "wavefront_collector-0.0.49.tar.gz", "has_sig": false, "md5_digest": "daa711987fabe8d0cf974d00a39c8aed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40765, "upload_time": "2016-09-08T19:01:35", "upload_time_iso_8601": "2016-09-08T19:01:35.090354Z", "url": "https://files.pythonhosted.org/packages/1a/38/bfb43d841d777a1a5eefbb51e47395d68800360ba867957e3f295f519d73/wavefront_collector-0.0.49.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "daa711987fabe8d0cf974d00a39c8aed", "sha256": "fa9c499346829fcc9d8eee6818403d003384be453f4cb240f99fc1a90de5243b"}, "downloads": -1, "filename": "wavefront_collector-0.0.49.tar.gz", "has_sig": false, "md5_digest": "daa711987fabe8d0cf974d00a39c8aed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40765, "upload_time": "2016-09-08T19:01:35", "upload_time_iso_8601": "2016-09-08T19:01:35.090354Z", "url": "https://files.pythonhosted.org/packages/1a/38/bfb43d841d777a1a5eefbb51e47395d68800360ba867957e3f295f519d73/wavefront_collector-0.0.49.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:58 2020"}