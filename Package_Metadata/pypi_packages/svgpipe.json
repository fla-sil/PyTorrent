{"info": {"author": "Martin Br\u00f6samle", "author_email": "m@martinbroesamle.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Multimedia :: Graphics", "Topic :: Scientific/Engineering :: Visualization"], "description": "\n\n`svg|pipe` Transactions for existing SVG documents\n==================================================\n\n**Note:** *The project is in an early stage of development. 0.x.x versions do not garantee a stable API.*\n\n`inject` data and SVG content into an existing document, keeping its structure intact.\n\n`extract` data and SVG content from an existing document (planned).\n\n`transfer` data, attributes, etc. between existing SVG elements (planned).\n\n\nMotivation\n----------\n\nGraphics applications are often picky (extremely picky) about the formatting of graphics documents. In order to have SVG files interpreted by your/everybodies favourite vector graphics application, the file structure not only needs to follow the SVG specs, but should follow a precise structure of layers, ids, and other unwritten conventions.\n\nThe project wants to facilitate transactions on existing documents for graphics-based workflows:\n\n + automated SVG generation (e.g. for data visualisation)\n + smooth integration with interactive vector graphics/CAD applications\n + automated data-import into complex pre-formatted graphics documents for visualisation\n\n\nPhilosophy\n----------\n\n`svg|pipe` not only uses SVG documents for import/export of graphical content into/from some existing stock of data. SVG documents are XML documents and can serve as data structures themselves.\n\n\nRequirements and Installation\n-----------------------------\n\nCurrently under development using:\n\n* Python 3.7\n* Pytest 5.2.2.\n\n\nInstall and test\n----------------\n\n```\npip install svgpipe\n```\n\n(on Windows with older pythons you may need `python -m pip install svgpipe`)\n\n\n### run tests\n\nWhen in the package directory, just type:\n```\npytest\n```\n\nWhen the package was installed via `pip`:\n\n```\npytest --pyargs svgpipe\n```\n\n\n### visual inspection of test results\n\nTo get a file output of the SVG content involved in the testing:\n+ Set environment variable `SVGPIPE_TEST_SVG_OUT` to point to the desired output directory.\n+ Make sure the directory/folder exists.\n\nAfter the test run, for each svg injection test there will be three SVG files:\n+ `XXXX_test.svg` (before the injection)\n+ `XXXX_result.svg` (what was actually the case after the injection)\n+ `XXXX_expect.svg` (what should be the case after the injection)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/broesamle/svgpipe", "keywords": "svg,vector graphics,scalable vector graphics,xml,visualisation", "license": "", "maintainer": "", "maintainer_email": "", "name": "svgpipe", "package_url": "https://pypi.org/project/svgpipe/", "platform": "", "project_url": "https://pypi.org/project/svgpipe/", "project_urls": {"Homepage": "https://github.com/broesamle/svgpipe"}, "release_url": "https://pypi.org/project/svgpipe/0.2.0/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Transactions on existing SVG documents: inject/extract/modify", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>svg|pipe</code> Transactions for existing SVG documents</h1>\n<p><strong>Note:</strong> <em>The project is in an early stage of development. 0.x.x versions do not garantee a stable API.</em></p>\n<p><code>inject</code> data and SVG content into an existing document, keeping its structure intact.</p>\n<p><code>extract</code> data and SVG content from an existing document (planned).</p>\n<p><code>transfer</code> data, attributes, etc. between existing SVG elements (planned).</p>\n<h2>Motivation</h2>\n<p>Graphics applications are often picky (extremely picky) about the formatting of graphics documents. In order to have SVG files interpreted by your/everybodies favourite vector graphics application, the file structure not only needs to follow the SVG specs, but should follow a precise structure of layers, ids, and other unwritten conventions.</p>\n<p>The project wants to facilitate transactions on existing documents for graphics-based workflows:</p>\n<ul>\n<li>automated SVG generation (e.g. for data visualisation)</li>\n<li>smooth integration with interactive vector graphics/CAD applications</li>\n<li>automated data-import into complex pre-formatted graphics documents for visualisation</li>\n</ul>\n<h2>Philosophy</h2>\n<p><code>svg|pipe</code> not only uses SVG documents for import/export of graphical content into/from some existing stock of data. SVG documents are XML documents and can serve as data structures themselves.</p>\n<h2>Requirements and Installation</h2>\n<p>Currently under development using:</p>\n<ul>\n<li>Python 3.7</li>\n<li>Pytest 5.2.2.</li>\n</ul>\n<h2>Install and test</h2>\n<pre><code>pip install svgpipe\n</code></pre>\n<p>(on Windows with older pythons you may need <code>python -m pip install svgpipe</code>)</p>\n<h3>run tests</h3>\n<p>When in the package directory, just type:</p>\n<pre><code>pytest\n</code></pre>\n<p>When the package was installed via <code>pip</code>:</p>\n<pre><code>pytest --pyargs svgpipe\n</code></pre>\n<h3>visual inspection of test results</h3>\n<p>To get a file output of the SVG content involved in the testing:</p>\n<ul>\n<li>Set environment variable <code>SVGPIPE_TEST_SVG_OUT</code> to point to the desired output directory.</li>\n<li>Make sure the directory/folder exists.</li>\n</ul>\n<p>After the test run, for each svg injection test there will be three SVG files:</p>\n<ul>\n<li><code>XXXX_test.svg</code> (before the injection)</li>\n<li><code>XXXX_result.svg</code> (what was actually the case after the injection)</li>\n<li><code>XXXX_expect.svg</code> (what should be the case after the injection)</li>\n</ul>\n\n          </div>"}, "last_serial": 6190553, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1785e4b5b7cb1e37a1e75d406594882f", "sha256": "4383b0f5220b9f1371a5022a0c392f217a9a1f48145cda24ea8ff65058ce84b6"}, "downloads": -1, "filename": "svgpipe-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1785e4b5b7cb1e37a1e75d406594882f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11514, "upload_time": "2019-11-23T15:05:51", "upload_time_iso_8601": "2019-11-23T15:05:51.610091Z", "url": "https://files.pythonhosted.org/packages/1b/6d/6fe73985d6ced1eb86a2e5c926473de28930e36f436b403cce35bc141f2f/svgpipe-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3282d3e98314297678db14f1db0cbb0", "sha256": "12275a881f178520f1f83c0a08fcf4c4f44a0a3bebcd96da213da50f87358e9f"}, "downloads": -1, "filename": "svgpipe-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b3282d3e98314297678db14f1db0cbb0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11024, "upload_time": "2019-11-23T15:05:53", "upload_time_iso_8601": "2019-11-23T15:05:53.693548Z", "url": "https://files.pythonhosted.org/packages/66/78/0c709f7fab9e3186c3165e711b06d915de0a311fff5033e17bf853555b53/svgpipe-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b23303d3da7fc47b1f2836c620e8ab2f", "sha256": "32eacdee9669dbc6df78200f2363c5030beb9babd70a1c05c5339c72555ae724"}, "downloads": -1, "filename": "svgpipe-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b23303d3da7fc47b1f2836c620e8ab2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11990, "upload_time": "2019-11-24T17:29:20", "upload_time_iso_8601": "2019-11-24T17:29:20.083095Z", "url": "https://files.pythonhosted.org/packages/97/38/249350825ca17d27ac50ca5078510a4fe0cb93f6c1dc88ddc9b731776780/svgpipe-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2eda1d126d7a462af7a302c5ef017a1d", "sha256": "a570959119e77ab24cc66a46fdabf997187381b079f59cfe962929f2463cca9f"}, "downloads": -1, "filename": "svgpipe-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2eda1d126d7a462af7a302c5ef017a1d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11473, "upload_time": "2019-11-24T17:29:21", "upload_time_iso_8601": "2019-11-24T17:29:21.555630Z", "url": "https://files.pythonhosted.org/packages/f9/54/05b5b980714cbb985d57ead7bf2108b2812499c9c6b254fcdd1d353f31b3/svgpipe-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b23303d3da7fc47b1f2836c620e8ab2f", "sha256": "32eacdee9669dbc6df78200f2363c5030beb9babd70a1c05c5339c72555ae724"}, "downloads": -1, "filename": "svgpipe-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b23303d3da7fc47b1f2836c620e8ab2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11990, "upload_time": "2019-11-24T17:29:20", "upload_time_iso_8601": "2019-11-24T17:29:20.083095Z", "url": "https://files.pythonhosted.org/packages/97/38/249350825ca17d27ac50ca5078510a4fe0cb93f6c1dc88ddc9b731776780/svgpipe-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2eda1d126d7a462af7a302c5ef017a1d", "sha256": "a570959119e77ab24cc66a46fdabf997187381b079f59cfe962929f2463cca9f"}, "downloads": -1, "filename": "svgpipe-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2eda1d126d7a462af7a302c5ef017a1d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11473, "upload_time": "2019-11-24T17:29:21", "upload_time_iso_8601": "2019-11-24T17:29:21.555630Z", "url": "https://files.pythonhosted.org/packages/f9/54/05b5b980714cbb985d57ead7bf2108b2812499c9c6b254fcdd1d353f31b3/svgpipe-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:51 2020"}