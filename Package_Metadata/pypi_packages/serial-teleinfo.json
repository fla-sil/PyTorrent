{"info": {"author": "Ugo M\u00e9da", "author_email": "meda.ugo@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Serial Teleinfo\n\nThis project provides Python utilities to access data from Enedis energy meters using a serial converter :\n\n- `serial_teleinfo` provides the classes to read and parse data\n- `serial_teleinfo.server` is a simple web-server to access live readings through a JSON api\n\nYou will need a serial adapter such as the [Micro Teleinfo](https://www.tindie.com/products/hallard/micro-teleinfo-v20/)\nto use this package.\n\n## Running the server\n\nThe web server exposes a JSON API providing live data read from the energy meter :\n\n```json\n{\n   \"connected\":true,\n   \"ready\":true,\n   \"values\":{\n      \"ISOUSC\": [30, \"A\"],\n      \"BASE\": [804220, \"Wh\"],\n      \"PTEC\": [\"TH\", null],\n      \"IINST\": [1, \"A\"],\n      \"IMAX\": [90, \"A\"],\n      \"PAPP\": [340, \"VA\"],\n      \"HHPHC\": [\"A\", null],\n      \"MOTDETAT\": [\"000000\", null],\n      \"ADCO\": [\"012345678901\", null],\n      \"OPTARIF\": [\"BASE\", null]\n   }\n}\n```\n\n### Configuration file\n\nThe configuration is as follows :\n\n```ini\n[teleinfo]\ndevice=/dev/ttyUSB0\nloglevel=INFO\n\n[http]\nlisten=127.0.0.1:8000\n\n[users]\napiuser=apipassword\n```\n\n- `teleinfo/device` : The path to the serial port.\n- `teleinfo/loglevel` *(optionnal)* : Modifies the log verbosity, it can be `DEBUG`, `INFO`, `WARNING`, `ERROR`. Default is `INFO`.\n- `http/listen` : The host and port to listen to.\n- `users` : A list of user/password allowed to use the API (using basic authentification).\n\n### Using python\n\nInstall the package :\n\n```bash\npip install serial-teleinfo[server]\n```\n\nCreate a configuration file `teleinfo.ini` as described above and run the command :\n\n```bash\npython -m serial_teleinfo.server teleinfo.ini\n```\n\nOnce the server is running, you can access the values at [http://apiuser:apipassword@localhost:8000/status.json](http://apiuser:apipassword@localhost:8000/status.json).\n\n### Using Docker\n\nA docker image is provided, here's an example `docker-compose.yml` :\n\n```yaml\nversion: '3'\nservices:\n  teleinfo:\n    image: ugomeda/serial-teleinfo\n    restart: always\n    devices:\n      - /dev/ttyUSB0\n    environment:\n      HTTP_LISTEN: \"0.0.0.0:7777\"\n      USERS_PASSWORD: \"Str0ngPa55w0rd!\"\n      TELEINFO_LOGLEVEL: \"DEBUG\"\n    ports:\n      - \"7777:7777\"\n```\n\nYou can access the values at [http://apiuser:Str0ngPa55w0rd!@SERVERIP:7777/status.json](http://apiuser:Str0ngPa55w0rd!@SERVERIP:7777/status.json).\n\nThe environment variables are :\n\n| Variable          | Default value |\n|-------------------|---------------|\n| TELEINFO_DEVICE   | /dev/ttyUSB0  |\n| TELEINFO_LOGLEVEL | INFO          |\n| HTTP_LISTEN       | 0.0.0.0:8000  |\n| USERS_USER        | apiuser       |\n| USERS_PASSWORD    | apipassword   |\n\n\n## Using the library\n\nInstall the package :\n\n```bash\npip install serial-teleinfo\n```\n\n### serial_teleinfo.Client\n\nThis class provides direct access to the values read on the serial port.\n\nHere's an example usage :\n\n```python\nimport serial\nfrom serial_teleinfo import Client, TeleinfoException\n\ntry:\n    with Client(\"/dev/ttyUSB0\") as client:\n        while True:\n            print(client.read_value())\nexcept TeleinfoException as e:\n    print(e)\nexcept serial.SerialException as e:\n    print(e)\n```\n\nYou can also refer to the `serial_teleinfo.ValueUpdater` implementation.\n\n### serial_teleinfo.ValueUpdater\n\nThis utility class manages a background thread to update values indefinitely.\nIt will automatically handle reconnection to the serial port and ignore temporary errors or\nreccuring unknown keys.\n\nIt provides 3 main properties :\n\n- `values` : A dictionary with all the values\n- `connected` : True if the client is connected to the meter\n- `ready` : True if all the values are available\n\nYou can also override the `update_value` method to access the read values as they are read.\n\nHeres an example usage :\n\n```python\nimport time\nfrom serial_teleinfo import ValueUpdater\n\n\nclass MyValueUpdater(ValueUpdater):\n    def update_value(self, value):\n        print(f\"Updated {value.key}\")\n\n        super().update_value(value)\n\n\nupdater = MyValueUpdater(\"/dev/ttyUSB0\")\nupdater.start()\n\ntry:\n    while True:\n        print(f\"Connected : {updater.connected}\")\n        print(f\"Ready : {updater.ready}\")\n        for value in updater.values.values():\n            print(value)\n\n        time.sleep(2)\nfinally:\n    updater.stop()\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ugomeda/serial-teleinfo", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "serial-teleinfo", "package_url": "https://pypi.org/project/serial-teleinfo/", "platform": "", "project_url": "https://pypi.org/project/serial-teleinfo/", "project_urls": {"Homepage": "https://github.com/ugomeda/serial-teleinfo"}, "release_url": "https://pypi.org/project/serial-teleinfo/1.0.1/", "requires_dist": ["pyserial", "aiohttp ; extra == 'server'", "http-basic-auth ; extra == 'server'"], "requires_python": ">=3.7", "summary": "Utilities to connect to a Teleinformation serial device", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Serial Teleinfo</h1>\n<p>This project provides Python utilities to access data from Enedis energy meters using a serial converter :</p>\n<ul>\n<li><code>serial_teleinfo</code> provides the classes to read and parse data</li>\n<li><code>serial_teleinfo.server</code> is a simple web-server to access live readings through a JSON api</li>\n</ul>\n<p>You will need a serial adapter such as the <a href=\"https://www.tindie.com/products/hallard/micro-teleinfo-v20/\" rel=\"nofollow\">Micro Teleinfo</a>\nto use this package.</p>\n<h2>Running the server</h2>\n<p>The web server exposes a JSON API providing live data read from the energy meter :</p>\n<pre><span class=\"p\">{</span>\n   <span class=\"nt\">\"connected\"</span><span class=\"p\">:</span><span class=\"kc\">true</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"ready\"</span><span class=\"p\">:</span><span class=\"kc\">true</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"values\"</span><span class=\"p\">:{</span>\n      <span class=\"nt\">\"ISOUSC\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"s2\">\"A\"</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"BASE\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">804220</span><span class=\"p\">,</span> <span class=\"s2\">\"Wh\"</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"PTEC\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"TH\"</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"IINST\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"A\"</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"IMAX\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"s2\">\"A\"</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"PAPP\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">340</span><span class=\"p\">,</span> <span class=\"s2\">\"VA\"</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"HHPHC\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"MOTDETAT\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"000000\"</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"ADCO\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"012345678901\"</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">],</span>\n      <span class=\"nt\">\"OPTARIF\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"BASE\"</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">]</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Configuration file</h3>\n<p>The configuration is as follows :</p>\n<pre><span class=\"k\">[teleinfo]</span>\n<span class=\"na\">device</span><span class=\"o\">=</span><span class=\"s\">/dev/ttyUSB0</span>\n<span class=\"na\">loglevel</span><span class=\"o\">=</span><span class=\"s\">INFO</span>\n\n<span class=\"k\">[http]</span>\n<span class=\"na\">listen</span><span class=\"o\">=</span><span class=\"s\">127.0.0.1:8000</span>\n\n<span class=\"k\">[users]</span>\n<span class=\"na\">apiuser</span><span class=\"o\">=</span><span class=\"s\">apipassword</span>\n</pre>\n<ul>\n<li><code>teleinfo/device</code> : The path to the serial port.</li>\n<li><code>teleinfo/loglevel</code> <em>(optionnal)</em> : Modifies the log verbosity, it can be <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>. Default is <code>INFO</code>.</li>\n<li><code>http/listen</code> : The host and port to listen to.</li>\n<li><code>users</code> : A list of user/password allowed to use the API (using basic authentification).</li>\n</ul>\n<h3>Using python</h3>\n<p>Install the package :</p>\n<pre>pip install serial-teleinfo<span class=\"o\">[</span>server<span class=\"o\">]</span>\n</pre>\n<p>Create a configuration file <code>teleinfo.ini</code> as described above and run the command :</p>\n<pre>python -m serial_teleinfo.server teleinfo.ini\n</pre>\n<p>Once the server is running, you can access the values at <a href=\"http://apiuser:apipassword@localhost:8000/status.json\" rel=\"nofollow\">http://apiuser:apipassword@localhost:8000/status.json</a>.</p>\n<h3>Using Docker</h3>\n<p>A docker image is provided, here's an example <code>docker-compose.yml</code> :</p>\n<pre><span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"s\">'3'</span>\n<span class=\"nt\">services</span><span class=\"p\">:</span>\n  <span class=\"nt\">teleinfo</span><span class=\"p\">:</span>\n    <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ugomeda/serial-teleinfo</span>\n    <span class=\"nt\">restart</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">always</span>\n    <span class=\"nt\">devices</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">/dev/ttyUSB0</span>\n    <span class=\"nt\">environment</span><span class=\"p\">:</span>\n      <span class=\"nt\">HTTP_LISTEN</span><span class=\"p\">:</span> <span class=\"s\">\"0.0.0.0:7777\"</span>\n      <span class=\"nt\">USERS_PASSWORD</span><span class=\"p\">:</span> <span class=\"s\">\"Str0ngPa55w0rd!\"</span>\n      <span class=\"nt\">TELEINFO_LOGLEVEL</span><span class=\"p\">:</span> <span class=\"s\">\"DEBUG\"</span>\n    <span class=\"nt\">ports</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"7777:7777\"</span>\n</pre>\n<p>You can access the values at <a href=\"http://apiuser:Str0ngPa55w0rd!@SERVERIP:7777/status.json\" rel=\"nofollow\">http://apiuser:Str0ngPa55w0rd!@SERVERIP:7777/status.json</a>.</p>\n<p>The environment variables are :</p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TELEINFO_DEVICE</td>\n<td>/dev/ttyUSB0</td>\n</tr>\n<tr>\n<td>TELEINFO_LOGLEVEL</td>\n<td>INFO</td>\n</tr>\n<tr>\n<td>HTTP_LISTEN</td>\n<td>0.0.0.0:8000</td>\n</tr>\n<tr>\n<td>USERS_USER</td>\n<td>apiuser</td>\n</tr>\n<tr>\n<td>USERS_PASSWORD</td>\n<td>apipassword</td>\n</tr></tbody></table>\n<h2>Using the library</h2>\n<p>Install the package :</p>\n<pre>pip install serial-teleinfo\n</pre>\n<h3>serial_teleinfo.Client</h3>\n<p>This class provides direct access to the values read on the serial port.</p>\n<p>Here's an example usage :</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">serial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">serial_teleinfo</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">TeleinfoException</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s2\">\"/dev/ttyUSB0\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">read_value</span><span class=\"p\">())</span>\n<span class=\"k\">except</span> <span class=\"n\">TeleinfoException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">serial</span><span class=\"o\">.</span><span class=\"n\">SerialException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<p>You can also refer to the <code>serial_teleinfo.ValueUpdater</code> implementation.</p>\n<h3>serial_teleinfo.ValueUpdater</h3>\n<p>This utility class manages a background thread to update values indefinitely.\nIt will automatically handle reconnection to the serial port and ignore temporary errors or\nreccuring unknown keys.</p>\n<p>It provides 3 main properties :</p>\n<ul>\n<li><code>values</code> : A dictionary with all the values</li>\n<li><code>connected</code> : True if the client is connected to the meter</li>\n<li><code>ready</code> : True if all the values are available</li>\n</ul>\n<p>You can also override the <code>update_value</code> method to access the read values as they are read.</p>\n<p>Heres an example usage :</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">serial_teleinfo</span> <span class=\"kn\">import</span> <span class=\"n\">ValueUpdater</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyValueUpdater</span><span class=\"p\">(</span><span class=\"n\">ValueUpdater</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Updated </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">update_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">updater</span> <span class=\"o\">=</span> <span class=\"n\">MyValueUpdater</span><span class=\"p\">(</span><span class=\"s2\">\"/dev/ttyUSB0\"</span><span class=\"p\">)</span>\n<span class=\"n\">updater</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Connected : </span><span class=\"si\">{</span><span class=\"n\">updater</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Ready : </span><span class=\"si\">{</span><span class=\"n\">updater</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">updater</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">updater</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 7160393, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ef67c616c13aecf29f40d0f8a7668713", "sha256": "814aa5ac13907823b464d76ce1ad53d9b20448cc25fbe86b137fc4e9447771ee"}, "downloads": -1, "filename": "serial_teleinfo-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ef67c616c13aecf29f40d0f8a7668713", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10975, "upload_time": "2020-05-03T16:43:02", "upload_time_iso_8601": "2020-05-03T16:43:02.202274Z", "url": "https://files.pythonhosted.org/packages/ff/a8/13809823c00882a5891d4af695252c80cc57be35bb67449af5d7d893bfc7/serial_teleinfo-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "673d10a8bfb2b1e9c42360cd99f8f7a9", "sha256": "34d6e34960eacb9d54fdf24aab9f43238c7764688297ea4d10ac9561ecc3bf43"}, "downloads": -1, "filename": "serial-teleinfo-1.0.0.tar.gz", "has_sig": false, "md5_digest": "673d10a8bfb2b1e9c42360cd99f8f7a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8543, "upload_time": "2020-05-03T16:43:04", "upload_time_iso_8601": "2020-05-03T16:43:04.527945Z", "url": "https://files.pythonhosted.org/packages/67/aa/ae61d448cf203060ea9d7b34269f7b90f98a634271468eccaf4eac6bcfc9/serial-teleinfo-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b54330a52a776b220dcdde9e1f398d2a", "sha256": "e4de1da74878a22062385aa40b11064a733cb874fd604629305c3474ea2a2e2a"}, "downloads": -1, "filename": "serial_teleinfo-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b54330a52a776b220dcdde9e1f398d2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11155, "upload_time": "2020-05-03T23:34:36", "upload_time_iso_8601": "2020-05-03T23:34:36.340112Z", "url": "https://files.pythonhosted.org/packages/f8/1b/0e679172057e589fadc88074e63c385bd8d15467be4d1a60faff2ed32764/serial_teleinfo-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "448215b4f6928999eb98df5a050406f6", "sha256": "ce100cc4454bf55a18ae2e53aa83913b58c52eddb9f9d76dc83bd53c5b78c38f"}, "downloads": -1, "filename": "serial-teleinfo-1.0.1.tar.gz", "has_sig": false, "md5_digest": "448215b4f6928999eb98df5a050406f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8805, "upload_time": "2020-05-03T23:34:37", "upload_time_iso_8601": "2020-05-03T23:34:37.514931Z", "url": "https://files.pythonhosted.org/packages/14/fb/d6c9b17531ff1f63aea3d3973f45b4bd2102e1a72572436223e30cd0b63f/serial-teleinfo-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b54330a52a776b220dcdde9e1f398d2a", "sha256": "e4de1da74878a22062385aa40b11064a733cb874fd604629305c3474ea2a2e2a"}, "downloads": -1, "filename": "serial_teleinfo-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b54330a52a776b220dcdde9e1f398d2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11155, "upload_time": "2020-05-03T23:34:36", "upload_time_iso_8601": "2020-05-03T23:34:36.340112Z", "url": "https://files.pythonhosted.org/packages/f8/1b/0e679172057e589fadc88074e63c385bd8d15467be4d1a60faff2ed32764/serial_teleinfo-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "448215b4f6928999eb98df5a050406f6", "sha256": "ce100cc4454bf55a18ae2e53aa83913b58c52eddb9f9d76dc83bd53c5b78c38f"}, "downloads": -1, "filename": "serial-teleinfo-1.0.1.tar.gz", "has_sig": false, "md5_digest": "448215b4f6928999eb98df5a050406f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8805, "upload_time": "2020-05-03T23:34:37", "upload_time_iso_8601": "2020-05-03T23:34:37.514931Z", "url": "https://files.pythonhosted.org/packages/14/fb/d6c9b17531ff1f63aea3d3973f45b4bd2102e1a72572436223e30cd0b63f/serial-teleinfo-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:15 2020"}