{"info": {"author": "Kivy", "author_email": "kivy@kivy.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "[![Coverage Status](https://coveralls.io/repos/github/kivy-garden/graph/badge.svg?branch=master)](https://coveralls.io/github/kivy-garden/graph?branch=master)\n[![Github Build Status](https://github.com/kivy-garden/graph/workflows/Garden%20flower/badge.svg)](https://github.com/kivy-garden/graph/actions)\n\nGraph\n======\n\nThe `Graph` widget is a widget for displaying plots. It supports\ndrawing multiple plot with different colors on the Graph. It also supports\na title, ticks, labeled ticks, grids and a log or linear representation on\nboth the x and y axis, independently.\n\n![Screenshot](/screenshot.png)\n\nTo display a plot. First create a graph which will function as a \"canvas\" for\nthe plots. Then create plot objects e.g. MeshLinePlot and add them to the\ngraph.\n\nTo create a graph with x-axis between 0-100, y-axis between -1 to 1, x and y\nlabels of and X and Y, respectively, x major and minor ticks every 25, 5 units,\nrespectively, y major ticks every 1 units, full x and y grids and with\na red line plot containing a sin wave on this range::\n\n```python\nfrom math import sin\nfrom kivy.garden.graph import Graph, MeshLinePlot\ngraph = Graph(xlabel='X', ylabel='Y', x_ticks_minor=5,\nx_ticks_major=25, y_ticks_major=1,\ny_grid_label=True, x_grid_label=True, padding=5,\nx_grid=True, y_grid=True, xmin=-0, xmax=100, ymin=-1, ymax=1)\nplot = MeshLinePlot(color=[1, 0, 0, 1])\nplot.points = [(x, sin(x / 10.)) for x in range(0, 101)]\ngraph.add_plot(plot)\n```\n\nThe `MeshLinePlot` plot is a particular plot which draws a set of points using\na mesh object. The points are given as a list of tuples, with each tuple\nbeing a (x, y) coordinate in the graph's units.\n\nYou can create different types of plots other than `MeshLinePlot` by inheriting\nfrom the `Plot` class and implementing the required functions. The `Graph` object\nprovides a \"canvas\" to which a Plot's instructions are added. The plot object\nis responsible for updating these instructions to show within the bounding\nbox of the graph the proper plot. The Graph notifies the Plot when it needs\nto be redrawn due to changes. See the `MeshLinePlot` class for how it is done.\n\n\nInstall\n---------\n\n```sh\npip install kivy_garden.graph\n```\n\nCI\n--\n\nEvery push or pull request run the [GitHub Action](https://github.com/kivy-garden/flower/actions) CI.\nIt tests the code on various OS and also generates wheels that can be released on PyPI upon a\ntag. Docs are also generated and uploaded to the repo as well as artifacts of the CI.\n\nTODO\n-------\n\n* add your code\n\nContributing\n--------------\n\nCheck out our [contribution guide](CONTRIBUTING.md) and feel free to improve the flower.\n\nLicense\n---------\n\nThis software is released under the terms of the MIT License.\nPlease see the [LICENSE.txt](LICENSE.txt) file.\n\nHow to release\n===============\n\n* update `__version__` in `kivy-garden/graph/__init__.py` to the latest version.\n* update `CHANGELOG.md` and commit the changes\n* call `git tag -a x.y.z -m \"Tagging version x.y.z\"`\n* call `python setup.py bdist_wheel --universal` and `python setup.py sdist`, which generates the wheel and sdist in the dist/* directory\n* Make sure the dist directory contains the files to be uploaded to pypi and call `twine check dist/*`\n* then call `twine upload dist/*` to upload to pypi.\n* call `git push origin master --tags` to push the latest changes and the tags to github.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kivy-garden/graph", "keywords": "Kivy kivy-garden", "license": "", "maintainer": "", "maintainer_email": "", "name": "kivy-garden.graph", "package_url": "https://pypi.org/project/kivy-garden.graph/", "platform": "", "project_url": "https://pypi.org/project/kivy-garden.graph/", "project_urls": {"Bug Reports": "https://github.com/kivy-garden/graph/issues", "Homepage": "https://github.com/kivy-garden/graph", "Source": "https://github.com/kivy-garden/graph"}, "release_url": "https://pypi.org/project/kivy-garden.graph/0.4.0/", "requires_dist": ["coveralls ; extra == 'ci'", "pycodestyle ; extra == 'ci'", "pytest (>=3.6) ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "pytest-asyncio ; extra == 'dev'", "sphinx-rtd-theme ; extra == 'dev'"], "requires_python": "", "summary": "Display plots in kivy.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://coveralls.io/github/kivy-garden/graph?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d647a29a17a55b76a518b969f1bcc11c18bde6e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b6976792d67617264656e2f67726170682f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/kivy-garden/graph/actions\" rel=\"nofollow\"><img alt=\"Github Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a298e9771f36613264c2fc0b0a1a7c559f142842/68747470733a2f2f6769746875622e636f6d2f6b6976792d67617264656e2f67726170682f776f726b666c6f77732f47617264656e253230666c6f7765722f62616467652e737667\"></a></p>\n<h1>Graph</h1>\n<p>The <code>Graph</code> widget is a widget for displaying plots. It supports\ndrawing multiple plot with different colors on the Graph. It also supports\na title, ticks, labeled ticks, grids and a log or linear representation on\nboth the x and y axis, independently.</p>\n<p><img alt=\"Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b861e3eb311e6db1e0a58a2b8acb089d633c8c83/2f73637265656e73686f742e706e67\"></p>\n<p>To display a plot. First create a graph which will function as a \"canvas\" for\nthe plots. Then create plot objects e.g. MeshLinePlot and add them to the\ngraph.</p>\n<p>To create a graph with x-axis between 0-100, y-axis between -1 to 1, x and y\nlabels of and X and Y, respectively, x major and minor ticks every 25, 5 units,\nrespectively, y major ticks every 1 units, full x and y grids and with\na red line plot containing a sin wave on this range::</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">sin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kivy.garden.graph</span> <span class=\"kn\">import</span> <span class=\"n\">Graph</span><span class=\"p\">,</span> <span class=\"n\">MeshLinePlot</span>\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">'Y'</span><span class=\"p\">,</span> <span class=\"n\">x_ticks_minor</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n<span class=\"n\">x_ticks_major</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">y_ticks_major</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"n\">y_grid_label</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">x_grid_label</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n<span class=\"n\">x_grid</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">y_grid</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">xmin</span><span class=\"o\">=-</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">xmax</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plot</span> <span class=\"o\">=</span> <span class=\"n\">MeshLinePlot</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mf\">10.</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">)]</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_plot</span><span class=\"p\">(</span><span class=\"n\">plot</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>MeshLinePlot</code> plot is a particular plot which draws a set of points using\na mesh object. The points are given as a list of tuples, with each tuple\nbeing a (x, y) coordinate in the graph's units.</p>\n<p>You can create different types of plots other than <code>MeshLinePlot</code> by inheriting\nfrom the <code>Plot</code> class and implementing the required functions. The <code>Graph</code> object\nprovides a \"canvas\" to which a Plot's instructions are added. The plot object\nis responsible for updating these instructions to show within the bounding\nbox of the graph the proper plot. The Graph notifies the Plot when it needs\nto be redrawn due to changes. See the <code>MeshLinePlot</code> class for how it is done.</p>\n<h2>Install</h2>\n<pre>pip install kivy_garden.graph\n</pre>\n<h2>CI</h2>\n<p>Every push or pull request run the <a href=\"https://github.com/kivy-garden/flower/actions\" rel=\"nofollow\">GitHub Action</a> CI.\nIt tests the code on various OS and also generates wheels that can be released on PyPI upon a\ntag. Docs are also generated and uploaded to the repo as well as artifacts of the CI.</p>\n<h2>TODO</h2>\n<ul>\n<li>add your code</li>\n</ul>\n<h2>Contributing</h2>\n<p>Check out our <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">contribution guide</a> and feel free to improve the flower.</p>\n<h2>License</h2>\n<p>This software is released under the terms of the MIT License.\nPlease see the <a href=\"LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a> file.</p>\n<h1>How to release</h1>\n<ul>\n<li>update <code>__version__</code> in <code>kivy-garden/graph/__init__.py</code> to the latest version.</li>\n<li>update <code>CHANGELOG.md</code> and commit the changes</li>\n<li>call <code>git tag -a x.y.z -m \"Tagging version x.y.z\"</code></li>\n<li>call <code>python setup.py bdist_wheel --universal</code> and <code>python setup.py sdist</code>, which generates the wheel and sdist in the dist/* directory</li>\n<li>Make sure the dist directory contains the files to be uploaded to pypi and call <code>twine check dist/*</code></li>\n<li>then call <code>twine upload dist/*</code> to upload to pypi.</li>\n<li>call <code>git push origin master --tags</code> to push the latest changes and the tags to github.</li>\n</ul>\n\n          </div>"}, "last_serial": 6210999, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "730d75202799acdc35fbfb5c761e3334", "sha256": "30cd05e6de5fb85e68a2e2d2215ae2a7989bf03a5dc45d45256a78a3cbed44eb"}, "downloads": -1, "filename": "kivy_garden.graph-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "730d75202799acdc35fbfb5c761e3334", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19444, "upload_time": "2019-11-27T22:03:22", "upload_time_iso_8601": "2019-11-27T22:03:22.990244Z", "url": "https://files.pythonhosted.org/packages/55/96/d3a37741d4d0b235f150d1fa9c0d02100a8ccbe2bfbb260282735a06aec8/kivy_garden.graph-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0261bfa80fe9810ef631281e14e35ff6", "sha256": "4150f454b91dc025c37e69f81d7c1cb521e9164bd8e7db44b1855bf3d715264c"}, "downloads": -1, "filename": "kivy_garden.graph-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0261bfa80fe9810ef631281e14e35ff6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19543, "upload_time": "2019-11-27T22:03:31", "upload_time_iso_8601": "2019-11-27T22:03:31.822878Z", "url": "https://files.pythonhosted.org/packages/79/20/15f5a3e9f6a19168719433e8929f66f28dc534e30da35cdb447b2032e849/kivy_garden.graph-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "730d75202799acdc35fbfb5c761e3334", "sha256": "30cd05e6de5fb85e68a2e2d2215ae2a7989bf03a5dc45d45256a78a3cbed44eb"}, "downloads": -1, "filename": "kivy_garden.graph-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "730d75202799acdc35fbfb5c761e3334", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19444, "upload_time": "2019-11-27T22:03:22", "upload_time_iso_8601": "2019-11-27T22:03:22.990244Z", "url": "https://files.pythonhosted.org/packages/55/96/d3a37741d4d0b235f150d1fa9c0d02100a8ccbe2bfbb260282735a06aec8/kivy_garden.graph-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0261bfa80fe9810ef631281e14e35ff6", "sha256": "4150f454b91dc025c37e69f81d7c1cb521e9164bd8e7db44b1855bf3d715264c"}, "downloads": -1, "filename": "kivy_garden.graph-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0261bfa80fe9810ef631281e14e35ff6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19543, "upload_time": "2019-11-27T22:03:31", "upload_time_iso_8601": "2019-11-27T22:03:31.822878Z", "url": "https://files.pythonhosted.org/packages/79/20/15f5a3e9f6a19168719433e8929f66f28dc534e30da35cdb447b2032e849/kivy_garden.graph-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:30 2020"}