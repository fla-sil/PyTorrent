{"info": {"author": "Dr. Carsten Leue", "author_email": "carsten.leue@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# ReduxPY\n\nImplementation of a Redux store with support for adding feature modules, dynamically. The store exposes a reactive API based on [RxPY](https://pypi.org/project/Rx/).\n\n## What is Redux and Why\n\nComplex applications - client or server - often need to maintain state and the more complex the application becomes the harder it is to keep track of that state. The Redux pattern addresses the management of complex state by following the ideas of [Flux](http://facebook.github.io/flux/), [CQRS](https://martinfowler.com/bliki/CQRS.html), and [Event Sourcing](https://martinfowler.com/eaaDev/EventSourcing.html). \n\nThe [basic principle](https://redux.js.org/introduction/three-principles) boils down to:\n\n- **Single source of truth:** The state of your whole application is stored in an object tree within a single store.\n- **State is read-only:** The only way to change the state is to emit an action, an object describing what happened.\n- **Changes are made with pure functions:** To specify how the state tree is transformed by actions, you write pure reducers.\n\n### The State Tree\n\nAll state is kept in a single, read-only dictionary of type `ReaduxRootState`. This state is maintained and managed by the `ReduxRootStore` object that can be created using the `create_store()` method. The store allows to dispatch actions, listen for state changes and add new features.\n\n### Actions\n\nState cannot be changed but we can create new state based on existing state and an [action](https://redux.js.org/basics/actions). The action describes how the current state will be transformed. \n\nAll state transforms are **synchronous** operations and will be executed by a reducer. \n\n### Reducers\n\n[Reducers](https://redux.js.org/basics/reducers) are pure functions that transform a current state object into a new state object given an action.\n\n### Epics\n\nIt is a basic redux principle that all operations that compute new state are executed by synchronous reducers. In order to implement asynchronous operations we introduce the concept of [Epics](https://redux-observable.js.org/). An epic transforms an action into another action or set of actions and this transform may be executed asynchronously. The resulting actions could in turn give rise to new actions via an epic or they could be interpreted by a reducer.\n\nWe represent an epic as a [reactive operator](https://rxpy.readthedocs.io/en/latest/operators.html) that transforms an action input sequence (and optionally also a state sequence) into an action otput sequence.\n\n### Feature Module\n\nThere should only be one single redux store instance per application. In traditional redux this means that the set of reducers and epics must be known at instantiation time of the store. This makes it hard to compose the overall application from a set of reusable modules.\n\nWe introduce the concept of a feature module, motivated by [dynamic modules](https://github.com/microsoft/redux-dynamic-modules) and [feature store](https://ngrx.io/guide/schematics/feature). \n\nA feature module defines a unique identifier and optionally a reducer, epic and dependencies. The identifier is used to scope state in a top level dictionary and it is possible to add a new feature module to an existing store at any point in time.\n\n\n\n## Providing a feature module\n\nCreate and export an instance of `ReduxFeatureModule` for your module. The module definition consists of:\n\n* a unique module identifier. This identifier is also used as a namespace in the redux state\n* an optional reducer that operates on that namespace\n* an optional epic to handle asynchronous actions\n* an optional list of other feature modules this module depends on\n\n### Example\n\n```python\nfrom redux import create_feature_module, ReduxFeatureModule\n\nsample_feature_module: ReduxFeatureModule = create_feature_module(\n    'SAMPLE_FEATURE', sample_reducer, sample_epic, [dep1, dep2]\n)\n```\n\n## Registering a feature module\n\nRegister the feature module with the root store using the `add_feature_module` method. This will also register all dependent modules in topology order.\n\n```python\nfrom redux import create_store, ReduxRootStore\n\nstore: ReduxRootStore = create_store()\nstore.add_feature_module(sampleFeature)\n```\n\n## Consuming a feature module\n\nUse the `select_feature` method to create a selector for the desired feature.\n\n### Example\n\n```python\nfrom redux import select_feature\n\nselect_sample = select_feature(sample_feature)\n```\n\n## Side effects in Feature Modules\n\nFeature modules may provide side effects, aka epics, for asynchronous processing. Sometimes such epics require an initialization event to execute bootstrapping logic. The store sends an initialization event for this purpose, after a feature module has been initialized. Use the `of_init_feature` method to subscribe to this event.\n\n### Example\n\n```python\nfrom redux import of_init_feature, Epic\nfrom rx.operators import map\n\ninitEpic: Epic = lambda actions_, state_: actions_.pipe(of_init_feature(sample_feature), map(...))\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Carsten-Leue/ReduxPY", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "redux-py", "package_url": "https://pypi.org/project/redux-py/", "platform": "", "project_url": "https://pypi.org/project/redux-py/", "project_urls": {"Homepage": "https://github.com/Carsten-Leue/ReduxPY"}, "release_url": "https://pypi.org/project/redux-py/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Redux implementation for Python", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ReduxPY</h1>\n<p>Implementation of a Redux store with support for adding feature modules, dynamically. The store exposes a reactive API based on <a href=\"https://pypi.org/project/Rx/\" rel=\"nofollow\">RxPY</a>.</p>\n<h2>What is Redux and Why</h2>\n<p>Complex applications - client or server - often need to maintain state and the more complex the application becomes the harder it is to keep track of that state. The Redux pattern addresses the management of complex state by following the ideas of <a href=\"http://facebook.github.io/flux/\" rel=\"nofollow\">Flux</a>, <a href=\"https://martinfowler.com/bliki/CQRS.html\" rel=\"nofollow\">CQRS</a>, and <a href=\"https://martinfowler.com/eaaDev/EventSourcing.html\" rel=\"nofollow\">Event Sourcing</a>.</p>\n<p>The <a href=\"https://redux.js.org/introduction/three-principles\" rel=\"nofollow\">basic principle</a> boils down to:</p>\n<ul>\n<li><strong>Single source of truth:</strong> The state of your whole application is stored in an object tree within a single store.</li>\n<li><strong>State is read-only:</strong> The only way to change the state is to emit an action, an object describing what happened.</li>\n<li><strong>Changes are made with pure functions:</strong> To specify how the state tree is transformed by actions, you write pure reducers.</li>\n</ul>\n<h3>The State Tree</h3>\n<p>All state is kept in a single, read-only dictionary of type <code>ReaduxRootState</code>. This state is maintained and managed by the <code>ReduxRootStore</code> object that can be created using the <code>create_store()</code> method. The store allows to dispatch actions, listen for state changes and add new features.</p>\n<h3>Actions</h3>\n<p>State cannot be changed but we can create new state based on existing state and an <a href=\"https://redux.js.org/basics/actions\" rel=\"nofollow\">action</a>. The action describes how the current state will be transformed.</p>\n<p>All state transforms are <strong>synchronous</strong> operations and will be executed by a reducer.</p>\n<h3>Reducers</h3>\n<p><a href=\"https://redux.js.org/basics/reducers\" rel=\"nofollow\">Reducers</a> are pure functions that transform a current state object into a new state object given an action.</p>\n<h3>Epics</h3>\n<p>It is a basic redux principle that all operations that compute new state are executed by synchronous reducers. In order to implement asynchronous operations we introduce the concept of <a href=\"https://redux-observable.js.org/\" rel=\"nofollow\">Epics</a>. An epic transforms an action into another action or set of actions and this transform may be executed asynchronously. The resulting actions could in turn give rise to new actions via an epic or they could be interpreted by a reducer.</p>\n<p>We represent an epic as a <a href=\"https://rxpy.readthedocs.io/en/latest/operators.html\" rel=\"nofollow\">reactive operator</a> that transforms an action input sequence (and optionally also a state sequence) into an action otput sequence.</p>\n<h3>Feature Module</h3>\n<p>There should only be one single redux store instance per application. In traditional redux this means that the set of reducers and epics must be known at instantiation time of the store. This makes it hard to compose the overall application from a set of reusable modules.</p>\n<p>We introduce the concept of a feature module, motivated by <a href=\"https://github.com/microsoft/redux-dynamic-modules\" rel=\"nofollow\">dynamic modules</a> and <a href=\"https://ngrx.io/guide/schematics/feature\" rel=\"nofollow\">feature store</a>.</p>\n<p>A feature module defines a unique identifier and optionally a reducer, epic and dependencies. The identifier is used to scope state in a top level dictionary and it is possible to add a new feature module to an existing store at any point in time.</p>\n<h2>Providing a feature module</h2>\n<p>Create and export an instance of <code>ReduxFeatureModule</code> for your module. The module definition consists of:</p>\n<ul>\n<li>a unique module identifier. This identifier is also used as a namespace in the redux state</li>\n<li>an optional reducer that operates on that namespace</li>\n<li>an optional epic to handle asynchronous actions</li>\n<li>an optional list of other feature modules this module depends on</li>\n</ul>\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redux</span> <span class=\"kn\">import</span> <span class=\"n\">create_feature_module</span><span class=\"p\">,</span> <span class=\"n\">ReduxFeatureModule</span>\n\n<span class=\"n\">sample_feature_module</span><span class=\"p\">:</span> <span class=\"n\">ReduxFeatureModule</span> <span class=\"o\">=</span> <span class=\"n\">create_feature_module</span><span class=\"p\">(</span>\n    <span class=\"s1\">'SAMPLE_FEATURE'</span><span class=\"p\">,</span> <span class=\"n\">sample_reducer</span><span class=\"p\">,</span> <span class=\"n\">sample_epic</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">dep1</span><span class=\"p\">,</span> <span class=\"n\">dep2</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Registering a feature module</h2>\n<p>Register the feature module with the root store using the <code>add_feature_module</code> method. This will also register all dependent modules in topology order.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redux</span> <span class=\"kn\">import</span> <span class=\"n\">create_store</span><span class=\"p\">,</span> <span class=\"n\">ReduxRootStore</span>\n\n<span class=\"n\">store</span><span class=\"p\">:</span> <span class=\"n\">ReduxRootStore</span> <span class=\"o\">=</span> <span class=\"n\">create_store</span><span class=\"p\">()</span>\n<span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">add_feature_module</span><span class=\"p\">(</span><span class=\"n\">sampleFeature</span><span class=\"p\">)</span>\n</pre>\n<h2>Consuming a feature module</h2>\n<p>Use the <code>select_feature</code> method to create a selector for the desired feature.</p>\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redux</span> <span class=\"kn\">import</span> <span class=\"n\">select_feature</span>\n\n<span class=\"n\">select_sample</span> <span class=\"o\">=</span> <span class=\"n\">select_feature</span><span class=\"p\">(</span><span class=\"n\">sample_feature</span><span class=\"p\">)</span>\n</pre>\n<h2>Side effects in Feature Modules</h2>\n<p>Feature modules may provide side effects, aka epics, for asynchronous processing. Sometimes such epics require an initialization event to execute bootstrapping logic. The store sends an initialization event for this purpose, after a feature module has been initialized. Use the <code>of_init_feature</code> method to subscribe to this event.</p>\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redux</span> <span class=\"kn\">import</span> <span class=\"n\">of_init_feature</span><span class=\"p\">,</span> <span class=\"n\">Epic</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rx.operators</span> <span class=\"kn\">import</span> <span class=\"nb\">map</span>\n\n<span class=\"n\">initEpic</span><span class=\"p\">:</span> <span class=\"n\">Epic</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">actions_</span><span class=\"p\">,</span> <span class=\"n\">state_</span><span class=\"p\">:</span> <span class=\"n\">actions_</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"n\">of_init_feature</span><span class=\"p\">(</span><span class=\"n\">sample_feature</span><span class=\"p\">),</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 6821342, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "54b7b379718488c76396d8a3c0870e61", "sha256": "475abca842802b646b9e3406ba4faf630b089b592a21e2f8c232c0fd5b36fa4b"}, "downloads": -1, "filename": "redux-py-0.0.1.tar.gz", "has_sig": false, "md5_digest": "54b7b379718488c76396d8a3c0870e61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5873, "upload_time": "2020-03-13T21:15:35", "upload_time_iso_8601": "2020-03-13T21:15:35.765908Z", "url": "https://files.pythonhosted.org/packages/a7/51/0c36966d6b9a8954d5bc331166f2cd1fff49acb1a7e14b0751c4fefe6634/redux-py-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0a69be989c00c3ee8bdc8789baa7dbb8", "sha256": "82f5dcf31fad42674633945970e547f1b73a8db2cecb0715de98609acd1abf08"}, "downloads": -1, "filename": "redux-py-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0a69be989c00c3ee8bdc8789baa7dbb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7497, "upload_time": "2020-03-14T20:22:51", "upload_time_iso_8601": "2020-03-14T20:22:51.888300Z", "url": "https://files.pythonhosted.org/packages/6b/12/024845614424afd9e7f9c109189f7895fbf671dd108421c141a4dd0ca1a9/redux-py-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "250f89c3cc44b5a9d538d359c02ec254", "sha256": "ee1d98b590cf0f666c2532df47bb9c5e36db7129e5e25295af431a58c2ce612e"}, "downloads": -1, "filename": "redux-py-0.0.3.tar.gz", "has_sig": false, "md5_digest": "250f89c3cc44b5a9d538d359c02ec254", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10781, "upload_time": "2020-03-16T13:35:36", "upload_time_iso_8601": "2020-03-16T13:35:36.293059Z", "url": "https://files.pythonhosted.org/packages/38/61/641d6984392472b46a8574d9be2ec1d74fc7ef3bd8c6db77f60df2818b7f/redux-py-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "250f89c3cc44b5a9d538d359c02ec254", "sha256": "ee1d98b590cf0f666c2532df47bb9c5e36db7129e5e25295af431a58c2ce612e"}, "downloads": -1, "filename": "redux-py-0.0.3.tar.gz", "has_sig": false, "md5_digest": "250f89c3cc44b5a9d538d359c02ec254", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10781, "upload_time": "2020-03-16T13:35:36", "upload_time_iso_8601": "2020-03-16T13:35:36.293059Z", "url": "https://files.pythonhosted.org/packages/38/61/641d6984392472b46a8574d9be2ec1d74fc7ef3bd8c6db77f60df2818b7f/redux-py-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:30 2020"}