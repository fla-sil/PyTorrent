{"info": {"author": "Fallible", "author_email": "hello@fallible.co", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Console :: Curses", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet", "Topic :: Internet :: Proxy Servers", "Topic :: Internet :: WWW/HTTP", "Topic :: Security", "Topic :: Software Development :: Testing"], "description": "mitmproxy\n^^^^^^^^^\n\nTo install Fallible's version\n---------------------------\n* ``pip install fallixy``\n\nTo run\n------------------\n* ``mitmproxy``\n\n|travis| |appveyor| |coverage| |latest_release| |python_versions|\n\nThis repository contains the **mitmproxy** and **pathod** projects, as well as\ntheir shared networking library, **netlib**.\n\n``mitmproxy`` is an interactive, SSL-capable intercepting proxy with a console\ninterface.\n\n``mitmdump`` is the command-line version of mitmproxy. Think tcpdump for HTTP.\n\n``pathoc`` and ``pathod`` are perverse HTTP client and server applications\ndesigned to let you craft almost any conceivable HTTP request, including ones\nthat creatively violate the standards.\n\n\nDocumentation & Help\n--------------------\n\n\nGeneral information, tutorials, and precompiled binaries can be found on the mitmproxy\nand pathod websites.\n\n|mitmproxy_site| |pathod_site|\n\n\nThe latest documentation for mitmproxy is also available on ReadTheDocs.\n\n|mitmproxy_docs|\n\n\nJoin our discussion forum on Discourse to ask questions, help\neach other solve problems, and come up with new ideas for the project.\n\n|mitmproxy_discourse|\n\n\nJoin our developer chat on Slack if you would like to hack on mitmproxy itself.\n\n|slack|\n\n\nInstallation\n------------\n\nThe installation instructions are `here <http://docs.mitmproxy.org/en/stable/install.html>`_.\nIf you want to contribute changes, keep on reading.\n\n\nHacking\n-------\n\nTo get started hacking on mitmproxy, make sure you have Python_ 3.5.x or above with\nvirtualenv_ installed (you can find installation instructions for virtualenv\n`here <http://virtualenv.readthedocs.org/en/latest/>`_). Then do the following:\n\n.. code-block:: text\n\n    git clone https://github.com/mitmproxy/mitmproxy.git\n    cd mitmproxy\n    ./dev.sh  # powershell .\\dev.ps1 on Windows\n\n\nThe *dev* script will create a virtualenv environment in a directory called\n\"venv\", and install all mandatory and optional dependencies into it. The\nprimary mitmproxy components - mitmproxy, netlib and pathod - are installed as\n\"editable\", so any changes to the source in the repository will be reflected\nlive in the virtualenv.\n\nTo confirm that you're up and running, activate the virtualenv, and run the\nmitmproxy test suite:\n\n.. code-block:: text\n\n    . venv/bin/activate  # venv\\Scripts\\activate on Windows\n    py.test\n\nNote that the main executables for the project - ``mitmdump``, ``mitmproxy``,\n``mitmweb``, ``pathod``, and ``pathoc`` - are all created within the\nvirtualenv. After activating the virtualenv, they will be on your $PATH, and\nyou can run them like any other command:\n\n.. code-block:: text\n\n    mitmdump --version\n\nFor convenience, the project includes an autoenv_ file (`.env`_) that\nauto-activates the virtualenv when you cd into the mitmproxy directory.\n\n\nTesting\n-------\n\nIf you've followed the procedure above, you already have all the development\nrequirements installed, and you can simply run the test suite:\n\n.. code-block:: text\n\n    py.test\n\nPlease ensure that all patches are accompanied by matching changes in the test\nsuite. The project tries to maintain 100% test coverage.\n\nYou can also use `tox` to run a full suite of tests in Python 2.7 and 3.5,\nincluding a quick test to check documentation and code linting.\n\nThe following tox environments are relevant for local testing:\n\n.. code-block:: text\n\n    tox -e py27  # runs all tests with Python 2.7\n    tox -e py35  # runs all tests with Python 3.5\n    tox -e docs  # runs a does-it-compile check on the documentation\n    tox -e lint  # runs the linter for coding style checks\n\nWe support Python 2.7 and 3.5, so please make sure all tests pass in both\nenvironments. Running `tox` ensures all necessary tests are executed.\n\n\nDocumentation\n-------------\n\nThe mitmproxy documentation is build using Sphinx_, which is installed\nautomatically if you set up a development environment as described above. After\ninstallation, you can render the documentation like this:\n\n.. code-block:: text\n\n    cd docs\n    make clean\n    make html\n    make livehtml\n\nThe last command invokes `sphinx-autobuild`_, which watches the Sphinx directory and rebuilds\nthe documentation when a change is detected.\n\nStyle\n-----\n\nKeeping to a consistent code style throughout the project makes it easier to\ncontribute and collaborate. Please stick to the guidelines in\n`PEP8`_ and the `Google Style Guide`_ unless there's a very\ngood reason not to.\n\nThis is automatically enforced on every PR. If we detect a linting error, the\nPR checks will fail and block merging. We are using this command to check for style compliance:\n\n.. code-block:: text\n\n    flake8 --jobs 8 --count mitmproxy netlib pathod examples test\n\n\n.. |mitmproxy_site| image:: https://shields.mitmproxy.org/api/https%3A%2F%2F-mitmproxy.org-blue.svg\n    :target: https://mitmproxy.org/\n    :alt: mitmproxy.org\n\n.. |pathod_site| image:: https://shields.mitmproxy.org/api/https%3A%2F%2F-pathod.net-blue.svg\n    :target: https://pathod.net/\n    :alt: pathod.net\n\n.. |mitmproxy_docs| image:: https://readthedocs.org/projects/mitmproxy/badge/\n    :target: http://docs.mitmproxy.org/en/latest/\n    :alt: mitmproxy documentation\n\n.. |mitmproxy_discourse| image:: https://shields.mitmproxy.org/api/https%3A%2F%2F-discourse.mitmproxy.org-orange.svg\n    :target: https://discourse.mitmproxy.org\n    :alt: Discourse: mitmproxy\n\n.. |slack| image:: http://slack.mitmproxy.org/badge.svg\n    :target: http://slack.mitmproxy.org/\n    :alt: Slack Developer Chat\n\n.. |travis| image:: https://shields.mitmproxy.org/travis/mitmproxy/mitmproxy/master.svg?label=Travis%20build\n    :target: https://travis-ci.org/mitmproxy/mitmproxy\n    :alt: Travis Build Status\n\n.. |appveyor| image:: https://shields.mitmproxy.org/appveyor/ci/mhils/mitmproxy/master.svg?label=Appveyor%20build\n    :target: https://ci.appveyor.com/project/mhils/mitmproxy\n    :alt: Appveyor Build Status\n\n.. |coverage| image:: https://codecov.io/gh/mitmproxy/mitmproxy/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/mitmproxy/mitmproxy\n    :alt: Coverage Status\n\n.. |latest_release| image:: https://shields.mitmproxy.org/pypi/v/mitmproxy.svg\n    :target: https://pypi.python.org/pypi/mitmproxy\n    :alt: Latest Version\n\n.. |python_versions| image:: https://shields.mitmproxy.org/pypi/pyversions/mitmproxy.svg\n    :target: https://pypi.python.org/pypi/mitmproxy\n    :alt: Supported Python versions\n\n.. _Python: https://www.python.org/\n.. _virtualenv: http://virtualenv.readthedocs.org/en/latest/\n.. _autoenv: https://github.com/kennethreitz/autoenv\n.. _.env: https://github.com/mitmproxy/mitmproxy/blob/master/.env\n.. _Sphinx: http://sphinx-doc.org/\n.. _sphinx-autobuild: https://pypi.python.org/pypi/sphinx-autobuild\n.. _issue_tracker: https://github.com/mitmproxy/mitmproxy/issues\n.. _PEP8: https://www.python.org/dev/peps/pep-0008\n.. _Google Style Guide: https://google.github.io/styleguide/pyguide.html", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mkagenius/mitmproxy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fallixy", "package_url": "https://pypi.org/project/fallixy/", "platform": "", "project_url": "https://pypi.org/project/fallixy/", "project_urls": {"Homepage": "http://github.com/mkagenius/mitmproxy"}, "release_url": "https://pypi.org/project/fallixy/0.18.5/", "requires_dist": null, "requires_python": "", "summary": "(Fallible version with extras)An interactive, MITM HTTP proxy for penetration testers and software developers.", "version": "0.18.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            mitmproxy<br>^^^^^^^^^<br><br>To install Fallible's version<br>---------------------------<br>* ``pip install fallixy``<br><br>To run<br>------------------<br>* ``mitmproxy``<br><br>|travis| |appveyor| |coverage| |latest_release| |python_versions|<br><br>This repository contains the **mitmproxy** and **pathod** projects, as well as<br>their shared networking library, **netlib**.<br><br>``mitmproxy`` is an interactive, SSL-capable intercepting proxy with a console<br>interface.<br><br>``mitmdump`` is the command-line version of mitmproxy. Think tcpdump for HTTP.<br><br>``pathoc`` and ``pathod`` are perverse HTTP client and server applications<br>designed to let you craft almost any conceivable HTTP request, including ones<br>that creatively violate the standards.<br><br><br>Documentation &amp; Help<br>--------------------<br><br><br>General information, tutorials, and precompiled binaries can be found on the mitmproxy<br>and pathod websites.<br><br>|mitmproxy_site| |pathod_site|<br><br><br>The latest documentation for mitmproxy is also available on ReadTheDocs.<br><br>|mitmproxy_docs|<br><br><br>Join our discussion forum on Discourse to ask questions, help<br>each other solve problems, and come up with new ideas for the project.<br><br>|mitmproxy_discourse|<br><br><br>Join our developer chat on Slack if you would like to hack on mitmproxy itself.<br><br>|slack|<br><br><br>Installation<br>------------<br><br>The installation instructions are `here &lt;http://docs.mitmproxy.org/en/stable/install.html&gt;`_.<br>If you want to contribute changes, keep on reading.<br><br><br>Hacking<br>-------<br><br>To get started hacking on mitmproxy, make sure you have Python_ 3.5.x or above with<br>virtualenv_ installed (you can find installation instructions for virtualenv<br>`here &lt;http://virtualenv.readthedocs.org/en/latest/&gt;`_). Then do the following:<br><br>.. code-block:: text<br><br>    git clone https://github.com/mitmproxy/mitmproxy.git<br>    cd mitmproxy<br>    ./dev.sh  # powershell .\\dev.ps1 on Windows<br><br><br>The *dev* script will create a virtualenv environment in a directory called<br>\"venv\", and install all mandatory and optional dependencies into it. The<br>primary mitmproxy components - mitmproxy, netlib and pathod - are installed as<br>\"editable\", so any changes to the source in the repository will be reflected<br>live in the virtualenv.<br><br>To confirm that you're up and running, activate the virtualenv, and run the<br>mitmproxy test suite:<br><br>.. code-block:: text<br><br>    . venv/bin/activate  # venv\\Scripts\\activate on Windows<br>    py.test<br><br>Note that the main executables for the project - ``mitmdump``, ``mitmproxy``,<br>``mitmweb``, ``pathod``, and ``pathoc`` - are all created within the<br>virtualenv. After activating the virtualenv, they will be on your $PATH, and<br>you can run them like any other command:<br><br>.. code-block:: text<br><br>    mitmdump --version<br><br>For convenience, the project includes an autoenv_ file (`.env`_) that<br>auto-activates the virtualenv when you cd into the mitmproxy directory.<br><br><br>Testing<br>-------<br><br>If you've followed the procedure above, you already have all the development<br>requirements installed, and you can simply run the test suite:<br><br>.. code-block:: text<br><br>    py.test<br><br>Please ensure that all patches are accompanied by matching changes in the test<br>suite. The project tries to maintain 100% test coverage.<br><br>You can also use `tox` to run a full suite of tests in Python 2.7 and 3.5,<br>including a quick test to check documentation and code linting.<br><br>The following tox environments are relevant for local testing:<br><br>.. code-block:: text<br><br>    tox -e py27  # runs all tests with Python 2.7<br>    tox -e py35  # runs all tests with Python 3.5<br>    tox -e docs  # runs a does-it-compile check on the documentation<br>    tox -e lint  # runs the linter for coding style checks<br><br>We support Python 2.7 and 3.5, so please make sure all tests pass in both<br>environments. Running `tox` ensures all necessary tests are executed.<br><br><br>Documentation<br>-------------<br><br>The mitmproxy documentation is build using Sphinx_, which is installed<br>automatically if you set up a development environment as described above. After<br>installation, you can render the documentation like this:<br><br>.. code-block:: text<br><br>    cd docs<br>    make clean<br>    make html<br>    make livehtml<br><br>The last command invokes `sphinx-autobuild`_, which watches the Sphinx directory and rebuilds<br>the documentation when a change is detected.<br><br>Style<br>-----<br><br>Keeping to a consistent code style throughout the project makes it easier to<br>contribute and collaborate. Please stick to the guidelines in<br>`PEP8`_ and the `Google Style Guide`_ unless there's a very<br>good reason not to.<br><br>This is automatically enforced on every PR. If we detect a linting error, the<br>PR checks will fail and block merging. We are using this command to check for style compliance:<br><br>.. code-block:: text<br><br>    flake8 --jobs 8 --count mitmproxy netlib pathod examples test<br><br><br>.. |mitmproxy_site| image:: https://shields.mitmproxy.org/api/https%3A%2F%2F-mitmproxy.org-blue.svg<br>    :target: https://mitmproxy.org/<br>    :alt: mitmproxy.org<br><br>.. |pathod_site| image:: https://shields.mitmproxy.org/api/https%3A%2F%2F-pathod.net-blue.svg<br>    :target: https://pathod.net/<br>    :alt: pathod.net<br><br>.. |mitmproxy_docs| image:: https://readthedocs.org/projects/mitmproxy/badge/<br>    :target: http://docs.mitmproxy.org/en/latest/<br>    :alt: mitmproxy documentation<br><br>.. |mitmproxy_discourse| image:: https://shields.mitmproxy.org/api/https%3A%2F%2F-discourse.mitmproxy.org-orange.svg<br>    :target: https://discourse.mitmproxy.org<br>    :alt: Discourse: mitmproxy<br><br>.. |slack| image:: http://slack.mitmproxy.org/badge.svg<br>    :target: http://slack.mitmproxy.org/<br>    :alt: Slack Developer Chat<br><br>.. |travis| image:: https://shields.mitmproxy.org/travis/mitmproxy/mitmproxy/master.svg?label=Travis%20build<br>    :target: https://travis-ci.org/mitmproxy/mitmproxy<br>    :alt: Travis Build Status<br><br>.. |appveyor| image:: https://shields.mitmproxy.org/appveyor/ci/mhils/mitmproxy/master.svg?label=Appveyor%20build<br>    :target: https://ci.appveyor.com/project/mhils/mitmproxy<br>    :alt: Appveyor Build Status<br><br>.. |coverage| image:: https://codecov.io/gh/mitmproxy/mitmproxy/branch/master/graph/badge.svg<br>    :target: https://codecov.io/gh/mitmproxy/mitmproxy<br>    :alt: Coverage Status<br><br>.. |latest_release| image:: https://shields.mitmproxy.org/pypi/v/mitmproxy.svg<br>    :target: https://pypi.python.org/pypi/mitmproxy<br>    :alt: Latest Version<br><br>.. |python_versions| image:: https://shields.mitmproxy.org/pypi/pyversions/mitmproxy.svg<br>    :target: https://pypi.python.org/pypi/mitmproxy<br>    :alt: Supported Python versions<br><br>.. _Python: https://www.python.org/<br>.. _virtualenv: http://virtualenv.readthedocs.org/en/latest/<br>.. _autoenv: https://github.com/kennethreitz/autoenv<br>.. _.env: https://github.com/mitmproxy/mitmproxy/blob/master/.env<br>.. _Sphinx: http://sphinx-doc.org/<br>.. _sphinx-autobuild: https://pypi.python.org/pypi/sphinx-autobuild<br>.. _issue_tracker: https://github.com/mitmproxy/mitmproxy/issues<br>.. _PEP8: https://www.python.org/dev/peps/pep-0008<br>.. _Google Style Guide: https://google.github.io/styleguide/pyguide.html\n          </div>"}, "last_serial": 4176242, "releases": {"0.18.1": [{"comment_text": "", "digests": {"md5": "5a8de6c45ed46d78588a5430b01595ea", "sha256": "373fe8ecf81120b8c73d17d6d8965f7022a0dafb7c2b31073973a0b64b565ea0"}, "downloads": -1, "filename": "fallixy-0.18.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5a8de6c45ed46d78588a5430b01595ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1410070, "upload_time": "2016-12-10T19:19:54", "upload_time_iso_8601": "2016-12-10T19:19:54.256101Z", "url": "https://files.pythonhosted.org/packages/c9/85/6ddc577bc0a82c0b6780a8f523d0cfa71f326f0688c0f38e56bc5ba922ad/fallixy-0.18.1-py2.py3-none-any.whl", "yanked": false}], "0.18.2": [{"comment_text": "", "digests": {"md5": "3debb619e7cd2e14197ea4b5f0e0f40e", "sha256": "0a80a539d664829f2aa1853af1d231184c94714fb387a73faf10df109f298f1c"}, "downloads": -1, "filename": "fallixy-0.18.2.tar.gz", "has_sig": false, "md5_digest": "3debb619e7cd2e14197ea4b5f0e0f40e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1343390, "upload_time": "2018-08-15T22:51:29", "upload_time_iso_8601": "2018-08-15T22:51:29.475724Z", "url": "https://files.pythonhosted.org/packages/38/e5/c46f918f55fcac02d98af15efe0204e50145bc5ed5536d15b1b0a0eca0bd/fallixy-0.18.2.tar.gz", "yanked": false}], "0.18.3": [{"comment_text": "", "digests": {"md5": "acc3bbd3e0fa58aa696a031c3c9cbf2b", "sha256": "29b83589a23b6cae87ac692c36e0a8c0463602b0e11b44955f83d01c2b3975f6"}, "downloads": -1, "filename": "fallixy-0.18.3.tar.gz", "has_sig": false, "md5_digest": "acc3bbd3e0fa58aa696a031c3c9cbf2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1343390, "upload_time": "2018-08-16T07:47:01", "upload_time_iso_8601": "2018-08-16T07:47:01.607603Z", "url": "https://files.pythonhosted.org/packages/b2/be/7120dd347a44ca914e9b2d6c0435854223d8f729d15f41417554a4b4ed63/fallixy-0.18.3.tar.gz", "yanked": false}], "0.18.4": [{"comment_text": "", "digests": {"md5": "6e10d791261ac998920fd0ce4a61d7cd", "sha256": "a4e8545c941bc2c3d44d2ca194828bd6045ad3d6b3deac445adbb6715ac562d8"}, "downloads": -1, "filename": "fallixy-0.18.4.tar.gz", "has_sig": false, "md5_digest": "6e10d791261ac998920fd0ce4a61d7cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1343381, "upload_time": "2018-08-16T07:53:24", "upload_time_iso_8601": "2018-08-16T07:53:24.285627Z", "url": "https://files.pythonhosted.org/packages/2f/78/2a99284736a9c0d49b16e64acaceb350183e8d6fa66b0743cf0e6385def4/fallixy-0.18.4.tar.gz", "yanked": false}], "0.18.5": [{"comment_text": "", "digests": {"md5": "f4205d7c8c097db2a1b88293576fb408", "sha256": "b3751d287af17b3fe941b151ce3d4b714ab71717a1f9ebdf990c0157e315f3e5"}, "downloads": -1, "filename": "fallixy-0.18.5.tar.gz", "has_sig": false, "md5_digest": "f4205d7c8c097db2a1b88293576fb408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1343524, "upload_time": "2018-08-16T11:45:01", "upload_time_iso_8601": "2018-08-16T11:45:01.986210Z", "url": "https://files.pythonhosted.org/packages/3a/4e/e121e30688f6d0841d4543d565de86dda8cf93726abbec3446d173f88329/fallixy-0.18.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f4205d7c8c097db2a1b88293576fb408", "sha256": "b3751d287af17b3fe941b151ce3d4b714ab71717a1f9ebdf990c0157e315f3e5"}, "downloads": -1, "filename": "fallixy-0.18.5.tar.gz", "has_sig": false, "md5_digest": "f4205d7c8c097db2a1b88293576fb408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1343524, "upload_time": "2018-08-16T11:45:01", "upload_time_iso_8601": "2018-08-16T11:45:01.986210Z", "url": "https://files.pythonhosted.org/packages/3a/4e/e121e30688f6d0841d4543d565de86dda8cf93726abbec3446d173f88329/fallixy-0.18.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:49 2020"}