{"info": {"author": "Todd Wolfson", "author_email": "todd@twolfson.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Flask", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "flask-json-multidict\n====================\n\n.. image:: https://travis-ci.org/underdogio/flask-json-multidict.png?branch=master\n   :target: https://travis-ci.org/underdogio/flask-json-multidict\n   :alt: Build Status\n\nConvert Flask's `request.get_json`_ dict into a `MultiDict`_ like `request.form`_\n\nThis was written to maintain a consistent API for interacting with both ``request.form`` and ``request.get_json()``. This allows use to leverage ``.get`` with type coercion and ``.getlist``.\n\n.. _`request.get_json`: http://flask.pocoo.org/docs/0.10/api/#flask.Request.get_json\n.. _`MultiDict`: http://werkzeug.pocoo.org/docs/0.10/datastructures/#werkzeug.datastructures.MultiDict\n.. _`request.form`: http://flask.pocoo.org/docs/0.10/api/#flask.Request.form\n\nGetting Started\n---------------\nInstall the module with: ``pip install flask_json_multidict``\n\n.. code:: python\n\n    # Load in our dependencies\n    from flask import Flask, request, jsonify\n    from flask_json_multidict import get_json_multidict\n\n    # Start an application\n    app = Flask(__name__)\n\n    def resolve_request_body():\n        \"\"\"Before every request, resolve `request.body` from either `request.form` or `request.get_json()`\"\"\"\n        request.body = request.form\n        if request.headers['content-type'] == 'application/json':\n            request.body = get_json_multidict(request)\n    app.before_request(resolve_request_body)\n\n    @app.route('/', methods=['POST'])\n    def root():\n        \"\"\"Reply with POST data as we see it\"\"\"\n        body = request.body\n        return jsonify({key: body[key] for key in body})\n        # We can also leverage `request.body.getlist` as we do with `request.form`\n\n\n    if __name__ == '__main__':\n        app.run()\n\n    # $ curl http://localhost:5000/ -X POST --data 'hello=world'\n    # {\"hello\": \"world\"}\n    # $ curl http://localhost:5000/ -X POST -H 'Content-Type: application/json' --data '{\"hello\": \"world\"}\n    # {\"hello\": \"world\"}\n\nDocumentation\n-------------\n``flask-json-multidict`` can be imported via ``flask_json_multidict``.\n\nflask_json_multidict.get_json_multidict(request)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n``get_json_multidict`` walks over the ``json`` provided by ``request.get_json()`` and returns a `MultiDict`_.\n\n- request ``object`` - Current ``request`` being handled by Flask\n\n**Returns:**\n\n- body ``object`` - MultiDict with ``json`` information\n    - If there were any dictionaries or nested lists, then these will be ignored as parameters\n        - This is for consistency with how ``request.form`` behaves\n\n.. code:: python\n\n    # Assume we receive `{\"colors\": [\"red\", \"blue\"]}`\n    body = get_json_multidict(request)\n    body.getlist('colors')  # ['red', 'blue']\n\n    # Assume we receive `{\"hello\": \"world\"}`\n    body = get_json_multidict(request)\n    body.['hello']  # 'world'\n    body.get('hello')  # 'world'\n\n    # Assume we receive `{\"foo\": {\"bar\": \"baz\"}}`\n    # This is the silent ignore of bad parameters\n    body = get_json_multidict(request)\n    body.get('foo')  # None\n\nContributing\n------------\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Test via ``nosetests``.\n\nLicense\n-------\nCopyright (c) 2015 Underdog.io\n\nLicensed under the MIT license.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/underdogio/flask-json-multidict/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/underdogio/flask-json-multidict", "keywords": "flask,request,json,multidict,form", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "flask_json_multidict", "package_url": "https://pypi.org/project/flask_json_multidict/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/flask_json_multidict/", "project_urls": {"Download": "https://github.com/underdogio/flask-json-multidict/archive/master.zip", "Homepage": "https://github.com/underdogio/flask-json-multidict"}, "release_url": "https://pypi.org/project/flask_json_multidict/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Convert Flask's `request.get_json` dict into a MultiDict like `request.form`", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/underdogio/flask-json-multidict\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6f2314ae445bc8d67ea6c056939df3b79329763/68747470733a2f2f7472617669732d63692e6f72672f756e646572646f67696f2f666c61736b2d6a736f6e2d6d756c7469646963742e706e673f6272616e63683d6d6173746572\"></a>\n<p>Convert Flask\u2019s <a href=\"http://flask.pocoo.org/docs/0.10/api/#flask.Request.get_json\" rel=\"nofollow\">request.get_json</a> dict into a <a href=\"http://werkzeug.pocoo.org/docs/0.10/datastructures/#werkzeug.datastructures.MultiDict\" rel=\"nofollow\">MultiDict</a> like <a href=\"http://flask.pocoo.org/docs/0.10/api/#flask.Request.form\" rel=\"nofollow\">request.form</a></p>\n<p>This was written to maintain a consistent API for interacting with both <tt>request.form</tt> and <tt>request.get_json()</tt>. This allows use to leverage <tt>.get</tt> with type coercion and <tt>.getlist</tt>.</p>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>Install the module with: <tt>pip install flask_json_multidict</tt></p>\n<pre><span class=\"c1\"># Load in our dependencies</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">jsonify</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_json_multidict</span> <span class=\"kn\">import</span> <span class=\"n\">get_json_multidict</span>\n\n<span class=\"c1\"># Start an application</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">resolve_request_body</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Before every request, resolve `request.body` from either `request.form` or `request.get_json()`\"\"\"</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">'content-type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'application/json'</span><span class=\"p\">:</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">get_json_multidict</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">before_request</span><span class=\"p\">(</span><span class=\"n\">resolve_request_body</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">root</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Reply with POST data as we see it\"\"\"</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span>\n    <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">({</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">body</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">body</span><span class=\"p\">})</span>\n    <span class=\"c1\"># We can also leverage `request.body.getlist` as we do with `request.form`</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># $ curl http://localhost:5000/ -X POST --data 'hello=world'</span>\n<span class=\"c1\"># {\"hello\": \"world\"}</span>\n<span class=\"c1\"># $ curl http://localhost:5000/ -X POST -H 'Content-Type: application/json' --data '{\"hello\": \"world\"}</span>\n<span class=\"c1\"># {\"hello\": \"world\"}</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p><tt><span class=\"pre\">flask-json-multidict</span></tt> can be imported via <tt>flask_json_multidict</tt>.</p>\n<div id=\"flask-json-multidict-get-json-multidict-request\">\n<h3>flask_json_multidict.get_json_multidict(request)</h3>\n<p><tt>get_json_multidict</tt> walks over the <tt>json</tt> provided by <tt>request.get_json()</tt> and returns a <a href=\"http://werkzeug.pocoo.org/docs/0.10/datastructures/#werkzeug.datastructures.MultiDict\" rel=\"nofollow\">MultiDict</a>.</p>\n<ul>\n<li>request <tt>object</tt> - Current <tt>request</tt> being handled by Flask</li>\n</ul>\n<p><strong>Returns:</strong></p>\n<ul>\n<li><dl>\n<dt>body <tt>object</tt> - MultiDict with <tt>json</tt> information</dt>\n<dd><ul>\n<li><dl>\n<dt>If there were any dictionaries or nested lists, then these will be ignored as parameters</dt>\n<dd><ul>\n<li>This is for consistency with how <tt>request.form</tt> behaves</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<pre><span class=\"c1\"># Assume we receive `{\"colors\": [\"red\", \"blue\"]}`</span>\n<span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">get_json_multidict</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">getlist</span><span class=\"p\">(</span><span class=\"s1\">'colors'</span><span class=\"p\">)</span>  <span class=\"c1\"># ['red', 'blue']</span>\n\n<span class=\"c1\"># Assume we receive `{\"hello\": \"world\"}`</span>\n<span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">get_json_multidict</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"n\">body</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"s1\">'hello'</span><span class=\"p\">]</span>  <span class=\"c1\"># 'world'</span>\n<span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">)</span>  <span class=\"c1\"># 'world'</span>\n\n<span class=\"c1\"># Assume we receive `{\"foo\": {\"bar\": \"baz\"}}`</span>\n<span class=\"c1\"># This is the silent ignore of bad parameters</span>\n<span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">get_json_multidict</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>  <span class=\"c1\"># None</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>In lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Test via <tt>nosetests</tt>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2015 Underdog.io</p>\n<p>Licensed under the MIT license.</p>\n</div>\n\n          </div>"}, "last_serial": 1448088, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "7d7eece96d522ad7847113d9bf5b25fc", "sha256": "26234ff1dd6020b0c2d671b85b2bd3887724be6e18aa36957ede332f9f6ef6b7"}, "downloads": -1, "filename": "flask_json_multidict-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7d7eece96d522ad7847113d9bf5b25fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10955, "upload_time": "2015-03-04T18:03:08", "upload_time_iso_8601": "2015-03-04T18:03:08.579866Z", "url": "https://files.pythonhosted.org/packages/47/d4/ee55bc2e7e1608c563b2dc61bb45c4807c5dfc826a777b4a9085b0f3533f/flask_json_multidict-1.0.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "1235a4c1ec9b1df3754c40e1bc8eb8e1", "sha256": "c45c25d1c2a439999626c645daa8dfc251de4a1e0718de3eb118b57ca9125495"}, "downloads": -1, "filename": "flask_json_multidict-1.0.0.zip", "has_sig": false, "md5_digest": "1235a4c1ec9b1df3754c40e1bc8eb8e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23969, "upload_time": "2015-03-04T18:03:11", "upload_time_iso_8601": "2015-03-04T18:03:11.533826Z", "url": "https://files.pythonhosted.org/packages/f2/14/f301f084d3ad70b995a7fe62e1aa3caacc460e4b810ff0e8d6868805318b/flask_json_multidict-1.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d7eece96d522ad7847113d9bf5b25fc", "sha256": "26234ff1dd6020b0c2d671b85b2bd3887724be6e18aa36957ede332f9f6ef6b7"}, "downloads": -1, "filename": "flask_json_multidict-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7d7eece96d522ad7847113d9bf5b25fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10955, "upload_time": "2015-03-04T18:03:08", "upload_time_iso_8601": "2015-03-04T18:03:08.579866Z", "url": "https://files.pythonhosted.org/packages/47/d4/ee55bc2e7e1608c563b2dc61bb45c4807c5dfc826a777b4a9085b0f3533f/flask_json_multidict-1.0.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "1235a4c1ec9b1df3754c40e1bc8eb8e1", "sha256": "c45c25d1c2a439999626c645daa8dfc251de4a1e0718de3eb118b57ca9125495"}, "downloads": -1, "filename": "flask_json_multidict-1.0.0.zip", "has_sig": false, "md5_digest": "1235a4c1ec9b1df3754c40e1bc8eb8e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23969, "upload_time": "2015-03-04T18:03:11", "upload_time_iso_8601": "2015-03-04T18:03:11.533826Z", "url": "https://files.pythonhosted.org/packages/f2/14/f301f084d3ad70b995a7fe62e1aa3caacc460e4b810ff0e8d6868805318b/flask_json_multidict-1.0.0.zip", "yanked": false}], "timestamp": "Fri May  8 01:02:44 2020"}