{"info": {"author": "Andrew Plummer", "author_email": "plummer574@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Flask", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "Flask Table\n===========\n\nBecause writing HTML is fiddly and all of your tables are basically the\nsame.\n\nQuick Start\n===========\n\n.. code:: python\n\n    # import things\n    from flask_table import Table, Col\n\n    # Declare your table\n    class ItemTable(Table):\n        name = Col('Name')\n        description = Col('Description')\n\n    # Get some objects\n    class Item(object):\n        def __init__(self, name, description):\n            self.name = name\n            self.description = description\n    items = [Item('Name1', 'Description1'),\n             Item('Name2', 'Description2'),\n             Item('Name3', 'Description3')]\n    # Or, equivalently, some dicts\n    items = [dict(name='Name1', description='Description1'),\n             dict(name='Name2', description='Description2'),\n             dict(name='Name3', description='Description3')]\n\n    # Or, more likely, load items from your database with something like\n    items = ItemModel.query.all()\n\n    # Populate the table\n    table = ItemTable(items)\n\n    # Print the html\n    print(table.__html__())\n    # or just {{ table }} from within a Jinja template\n\nWhich gives something like:\n\n.. code:: html\n\n    <table>\n    <thead><tr><th>Name</th><th>Description</th></tr></thead>\n    <tbody>\n    <tr><td>Name1</td><td>Description1</td></tr>\n    <tr><td>Name2</td><td>Description2</td></tr>\n    <tr><td>Name3</td><td>Description3</td></tr>\n    </tbody>\n    </table>\n\nExtra things:\n-------------\n\n-  The attribute used for each column in the declaration of the column\n   is used as the default thing to lookup in each item.\n\n-  The thing that you pass when you populate the table must:\n-  be iterable\n-  contain dicts or objects - there's nothing saying it can't contain\n   some of each. See ``examples/simple_sqlalchemy.py`` for a database\n   example.\n\n-  You can pass attributes to the ``td`` and ``th`` elements by passing\n   a dict of attributes as ``td_html_attrs`` or ``th_html_attrs`` when\n   creating a Col. Or as ``column_html_attrs`` to apply the attributes\n   to both the ``th``\\ s and the ``td``\\ s. (Any that you pass in\n   ``th_html_attrs`` or ``td_html_attrs`` will overwrite any that you\n   also pass with ``column_html_attrs``.) See\n   examples/column\\_html\\_attrs.py for more.\n\n-  There are also LinkCol and ButtonCol that allow links and buttons,\n   which is where the Flask-specific-ness comes in.\n\n-  There are also DateCol and DatetimeCol that format dates and\n   datetimes.\n\n-  Oh, and BoolCol, which does Yes/No.\n\n-  But most importantly, Col is easy to subclass.\n\nTable configuration and options\n===============================\n\nThe following options configure table-level options:\n\n-  ``thead_classes`` - a list of classes to set on the ``<thead>``\n   element.\n\n-  ``no_items`` - a string to display if no items are passed, defaults\n   to ``'No Items'``.\n\n-  ``html_attrs`` - a dictionary of attributes to set on the ``<table>``\n   element.\n\n-  ``classes`` - a list of strings to be set as the ``class`` attribute\n   on the ``<table>`` element.\n\n-  ``table_id`` - a string to set as the ``id`` attribute on the\n   ``<table>`` element.\n\n-  ``border`` - whether the ``border`` should be set on the ``<table>``\n   element.\n\nThese can be set in a few different ways:\n\na) set when defining the table class\n\n   .. code:: python\n\n       class MyTable\n       classes = ['class1', 'class2']\n\nb) passed in the ``options`` argument to ``create_table``.\n\n   .. code:: python\n\n       MyTable = create_table(options={'table_id': 'my-table-id'})\n\nc) passed to the table's ``__init__``\n\n   .. code:: python\n\n       table = MyTable(items, no_items='There is nothing', ...)\n\nNote that a) and b) define an attribute on the table class, but c)\ndefines an attribute on the instance, so anything set like in c) will\noverride anything set in a) or b).\n\nEg:\n\n.. code:: python\n\n    class ItemTable(Table):\n        classes = ['myclass']\n        name = Col('Name')\n    table = ItemTable(items, classes=['otherclass'])\n\nwould create a table with ``class=\"otherclass\"``.\n\nIncluded Col Types\n==================\n\n-  ```OptCol`` <#more-about-optcol>`__ - converts values according to a\n   dictionary of choices. Eg for turning stored codes into human\n   readable text.\n\n-  ```BoolCol`` <#more-about-boolcol>`__ (subclass of OptCol) - converts\n   values to yes/no.\n\n-  ```BoolNaCol`` <#more-about-boolnacol>`__ (subclass of BoolCol) -\n   converts values to yes/no/na.\n\n-  ```DateCol`` <#more-about-datecol>`__ - for dates (uses\n   ``format_date`` from ``babel.dates``).\n\n-  ```DatetimeCol`` <#more-about-datetimecol>`__ - for date-times (uses\n   ``format_datetime`` from ``babel.dates``).\n\n-  ```LinkCol`` <#more-about-linkcol>`__ - creates a link by specifying\n   an endpoint and url\\_kwargs.\n\n-  ```ButtonCol`` <#more-about-buttoncol>`__ (subclass of LinkCol)\n   creates a button that posts the the given address.\n\n-  ```NestedTableCol`` <#more-about-nestedtablecol>`__ - allows nesting\n   of tables inside columns\n\nMore about ``OptCol``\n---------------------\n\nWhen creating the column, you pass some ``choices``. This should be a\ndict with the keys being the values that will be found on the item's\nattribute, and the values will be the text to be displayed.\n\nYou can also set a ``default_key``, or a ``default_value``. The default\nvalue will be used if the value found from the item isn't in the choices\ndict. The default key works in much the same way, but means that if your\ndefault is already in your choices, you can just point to it rather than\nrepeat it.\n\nAnd you can use ``coerce_fn`` if you need to alter the value from the\nitem before looking it up in the dict.\n\nMore about ``BoolCol``\n----------------------\n\nA subclass of ``OptCol`` where the ``choices`` are:\n\n.. code:: python\n\n    {True: 'Yes', False: 'No'}\n\nand the ``coerce_fn`` is ``bool``. So the value from the item is coerced\nto a ``bool`` and then looked up in the choices to get the text to\ndisplay.\n\nIf you want to specify something other than \"Yes\" and \"No\", you can pass\n``yes_display`` and/or ``no_display`` when creating the column. Eg:\n\n.. code:: python\n\n    class MyTable(Table):\n        mybool = BoolCol('myboolcol', yes_display='Affirmative', no_display='Negatory')\n\nMore about ``BoolNaCol``\n------------------------\n\nJust like ``BoolCol``, except displays ``None`` as \"N/A\". Can override\nwith the ``na_display`` argument.\n\nMore about ``DateCol``\n----------------------\n\nFormats a date from the item. Can specify a ``date_format`` to use,\nwhich defaults to ``'short'``, which is passed to\n``babel.dates.format_date``.\n\nMore about ``DatetimeCol``\n--------------------------\n\nFormats a datetime from the item. Can specify a ``datetime_format`` to\nuse, which defaults to ``'short'``, which is passed to\n``babel.dates.format_datetime``.\n\nMore about ``LinkCol``\n----------------------\n\nGives a way of putting a link into a ``td``. You must specify an\n``endpoint`` for the url. You should also specify some ``url_kwargs``.\nThis should be a dict which will be passed as the second argument of\n``url_for``, except the values will be treated as attributes to be\nlooked up on the item. These keys obey the same rules as elsewhere, so\ncan be things like ``'category.name'`` or ``('category', 'name')``.\n\nThe kwarg ``url_kwargs_extra`` allows passing of contants to the url.\nThis can be useful for adding constant GET params to a url.\n\nThe text for the link is acquired in *almost* the same way as with other\ncolumns. However, other columns can be given no ``attr`` or\n``attr_list`` and will use the attribute that the column was given in\nthe table class, but ``LinkCol`` does not, and instead falls back to the\nheading of the column. This make more sense for things like an \"Edit\"\nlink. You can override this fallback with the ``text_fallback`` kwarg.\n\nSet attributes for anchor tag by passing ``anchor_attrs``:\n\n.. code:: python\n\n    name = LinkCol('Name', 'single_item', url_kwargs=dict(id='id'), anchor_attrs={'class': 'myclass'})\n\nMore about ``ButtonCol``\n------------------------\n\nHas all the same options as ``LinkCol`` but instead adds a form and a\nbutton that gets posted to the url.\n\nYou can pass a dict of attributes to add to the button element with the\n``button_attrs`` kwarg.\n\nYou can pass a dict of attributes to add to the form element with the\n``form_attrs`` kwarg.\n\nYou can pass a dict of hidden fields to add into the form element with\nthe ``form_hidden_fields`` kwargs. The keys will be used as the ``name``\nattributes and the values as the ``value`` attributes.\n\nMore about ``NestedTableCol``\n-----------------------------\n\nThis column type makes it possible to nest tables in columns. For each\nnested table column you need to define a subclass of Table as you\nnormally would when defining a table. The name of that Table sub-class\nis the second argument to NestedTableCol.\n\nEg:\n\n.. code:: python\n\n    class MySubTable(Table):\n        a = Col('1st nested table col')\n        b = Col('2nd nested table col')\n\n    class MainTable(Table):\n        id = Col('id')\n        objects = NestedTableCol('objects', MySubTable)\n\nSubclassing Col\n===============\n\n(Look in examples/subclassing.py for a more concrete example)\n\nSuppose our item has an attribute, but we don't want to output the value\ndirectly, we need to alter it first. If the value that we get from the\nitem gives us all the information we need, then we can just override the\ntd\\_format method:\n\n.. code:: python\n\n    class LangCol(Col):\n        def td_format(self, content):\n            if content == 'en_GB':\n                return 'British English'\n            elif content == 'de_DE':\n                return 'German'\n            elif content == 'fr_FR':\n                return 'French'\n            else:\n                return 'Not Specified'\n\nIf you need access to all of information in the item, then we can go a\nstage earlier in the process and override the td\\_contents method:\n\n.. code:: python\n\n    from flask import Markup\n\n    def td_contents(self, i, attr_list):\n        # by default this does\n        # return self.td_format(self.from_attr_list(i, attr_list))\n        return Markup.escape(self.from_attr_list(i, attr_list) + ' for ' + item.name)\n\nAt present, you do still need to be careful about escaping things as you\noverride these methods. Also, because of the way that the Markup class\nworks, you need to be careful about how you concatenate these with other\nstrings.\n\nManipulating ``<tr>``\\ s\n========================\n\n(Look in examples/rows.py for a more concrete example)\n\nSuppose you want to change something about the tr element for some or\nall items. You can do this by overriding your table's ``get_tr_attrs``\nmethod. By default, this method returns an empty dict.\n\nSo, we might want to use something like:\n\n.. code:: python\n\n    class ItemTable(Table):\n        name = Col('Name')\n        description = Col('Description')\n\n        def get_tr_attrs(self, item):\n            if item.important():\n                return {'class': 'important'}\n            else:\n                return {}\n\nwhich would give all trs for items that returned a true value for the\n``important()`` method, a class of \"important\".\n\nDynamically Creating Tables\n===========================\n\n(Look in examples/dynamic.py for a more concrete example)\n\nYou can define a table dynamically too.\n\n.. code:: python\n\n    TableCls = create_table('TableCls')\\\n        .add_column('name', Col('Name'))\\\n        .add_column('description', Col('Description'))\n\nwhich is equivalent to\n\n.. code:: python\n\n    class TableCls(Table):\n        name = Col('Name')\n        description = Col('Description')\n\nbut makes it easier to add columns dynamically.\n\nFor example, you may wish to only add a column based on a condition.\n\n.. code:: python\n\n    TableCls = create_table('TableCls')\\\n        .add_column('name', Col('Name'))\n\n    if condition:\n        TableCls.add_column('description', Col('Description'))\n\nwhich is equivalent to\n\n.. code:: python\n\n    class TableCls(Table):\n        name = Col('Name')\n        description = Col('Description', show=condition)\n\nthanks to the ``show`` option. Use whichever you think makes your code\nmore readable. Though you may still need the dynamic option for\nsomething like\n\n.. code:: python\n\n    TableCls = create_table('TableCls')\n    for i in range(num):\n        TableCls.add_column(str(i), Col(str(i)))\n\nWe can also set some extra options to the table class by passing\n``options`` parameter to ``create_table()``:\n\n.. code:: python\n\n    tbl_options = dict(\n        classes=['cls1', 'cls2'],\n        thead_classes=['cls_head1', 'cls_head2'],\n        no_items='Empty')\n    TableCls = create_table(options=tbl_options)\n\n    # equals to\n\n    class TableCls(Table):\n        classes = ['cls1', 'cls2']\n        thead_classes = ['cls_head1', 'cls_head2']\n        no_items = 'Empty'\n\nSortable Tables\n===============\n\n(Look in examples/sortable.py for a more concrete example)\n\nDefine a table and set its allow\\_sort attribute to True. Now all\ncolumns will be default try to turn their header into a link for\nsorting, unless you set allow\\_sort to False for a column.\n\nYou also must declare a sort\\_url method for that table. Given a\ncol\\_key, this determines the url for link in the header. If reverse is\nTrue, then that means that the table has just been sorted by that column\nand the url can adjust accordingly, ie to now give the address for the\ntable sorted in the reverse direction. It is, however, entirely up to\nyour flask view method to interpret the values given to it from this url\nand to order the results before giving the to the table. The table\nitself will not do any reordering of the items it is given.\n\n.. code:: python\n\n    class SortableTable(Table):\n        name = Col('Name')\n        allow_sort = True\n\n        def sort_url(self, col_key, reverse=False):\n            if reverse:\n                direction =  'desc'\n            else:\n                direction = 'asc'\n            return url_for('index', sort=col_key, direction=direction)\n\nThe Examples\n============\n\nThe ``examples`` directory contains a few pieces of sample code to show\nsome of the concepts and features. They are all intended to be runnable.\nSome of them just output the code they generate, but some (just one,\n``sortable.py``, at present) actually creates a Flask app that you can\naccess.\n\nYou should be able to just run them directly with ``python``, but if you\nhave cloned the repository for the sake of dev, and created a\nvirtualenv, you may find that they generate an import error for\n``flask_table``. This is because ``flask_table`` hasn't been installed,\nand can be rectified by running something like\n``PYTHONPATH=.:./lib/python3.3/site-packages python examples/simple.py``,\nwhich will use the local version of ``flask_table`` including any\nchanges.\n\nAlso, if there is anything that you think is not clear and would be\nhelped by an example, please just ask and I'll happily write one. Only\nyou can help me realise which bits are tricky or non-obvious and help me\nto work on explaining the bits that need explaining.\n\nOther Things\n============\n\nAt the time of first writing, I was not aware of the work of\nDjango-Tables. However, I have now found it and started adapting ideas\nfrom it, where appropriate. For example, allowing items to be dicts as\nwell as objects.\n\n.. |Build Status| image:: https://travis-ci.org/plumdog/flask_table.svg?branch=master\n   :target: https://travis-ci.org/plumdog/flask_table\n.. |Coverage Status| image:: https://coveralls.io/repos/plumdog/flask_table/badge.png?branch=master\n   :target: https://coveralls.io/r/plumdog/flask_table?branch=master", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/plumdog/flask_table", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Flask-Table", "package_url": "https://pypi.org/project/Flask-Table/", "platform": "", "project_url": "https://pypi.org/project/Flask-Table/", "project_urls": {"Homepage": "https://github.com/plumdog/flask_table"}, "release_url": "https://pypi.org/project/Flask-Table/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "HTML tables for use with the Flask micro-framework", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"flask-table\">\n<h2>Flask Table</h2>\n<p>Because writing HTML is fiddly and all of your tables are basically the\nsame.</p>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<pre><span class=\"c1\"># import things</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_table</span> <span class=\"kn\">import</span> <span class=\"n\">Table</span><span class=\"p\">,</span> <span class=\"n\">Col</span>\n\n<span class=\"c1\"># Declare your table</span>\n<span class=\"k\">class</span> <span class=\"nc\">ItemTable</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">)</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Description'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get some objects</span>\n<span class=\"k\">class</span> <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">description</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"s1\">'Name1'</span><span class=\"p\">,</span> <span class=\"s1\">'Description1'</span><span class=\"p\">),</span>\n         <span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"s1\">'Name2'</span><span class=\"p\">,</span> <span class=\"s1\">'Description2'</span><span class=\"p\">),</span>\n         <span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"s1\">'Name3'</span><span class=\"p\">,</span> <span class=\"s1\">'Description3'</span><span class=\"p\">)]</span>\n<span class=\"c1\"># Or, equivalently, some dicts</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Name1'</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Description1'</span><span class=\"p\">),</span>\n         <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Name2'</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Description2'</span><span class=\"p\">),</span>\n         <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Name3'</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Description3'</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># Or, more likely, load items from your database with something like</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">ItemModel</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Populate the table</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">ItemTable</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print the html</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">__html__</span><span class=\"p\">())</span>\n<span class=\"c1\"># or just {{ table }} from within a Jinja template</span>\n</pre>\n<p>Which gives something like:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">table</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">thead</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">tr</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">th</span><span class=\"p\">&gt;</span>Name<span class=\"p\">&lt;/</span><span class=\"nt\">th</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">th</span><span class=\"p\">&gt;</span>Description<span class=\"p\">&lt;/</span><span class=\"nt\">th</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">thead</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">tbody</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">tr</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>Name1<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>Description1<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">tr</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>Name2<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>Description2<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">tr</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>Name3<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>Description3<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">tbody</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">table</span><span class=\"p\">&gt;</span>\n</pre>\n<div id=\"extra-things\">\n<h3>Extra things:</h3>\n<ul>\n<li>The attribute used for each column in the declaration of the column\nis used as the default thing to lookup in each item.</li>\n<li>The thing that you pass when you populate the table must:</li>\n<li>be iterable</li>\n<li>contain dicts or objects - there\u2019s nothing saying it can\u2019t contain\nsome of each. See <tt>examples/simple_sqlalchemy.py</tt> for a database\nexample.</li>\n<li>You can pass attributes to the <tt>td</tt> and <tt>th</tt> elements by passing\na dict of attributes as <tt>td_html_attrs</tt> or <tt>th_html_attrs</tt> when\ncreating a Col. Or as <tt>column_html_attrs</tt> to apply the attributes\nto both the <tt>th</tt>s and the <tt>td</tt>s. (Any that you pass in\n<tt>th_html_attrs</tt> or <tt>td_html_attrs</tt> will overwrite any that you\nalso pass with <tt>column_html_attrs</tt>.) See\nexamples/column_html_attrs.py for more.</li>\n<li>There are also LinkCol and ButtonCol that allow links and buttons,\nwhich is where the Flask-specific-ness comes in.</li>\n<li>There are also DateCol and DatetimeCol that format dates and\ndatetimes.</li>\n<li>Oh, and BoolCol, which does Yes/No.</li>\n<li>But most importantly, Col is easy to subclass.</li>\n</ul>\n</div>\n</div>\n<div id=\"table-configuration-and-options\">\n<h2>Table configuration and options</h2>\n<p>The following options configure table-level options:</p>\n<ul>\n<li><tt>thead_classes</tt> - a list of classes to set on the <tt>&lt;thead&gt;</tt>\nelement.</li>\n<li><tt>no_items</tt> - a string to display if no items are passed, defaults\nto <tt>'No Items'</tt>.</li>\n<li><tt>html_attrs</tt> - a dictionary of attributes to set on the <tt>&lt;table&gt;</tt>\nelement.</li>\n<li><tt>classes</tt> - a list of strings to be set as the <tt>class</tt> attribute\non the <tt>&lt;table&gt;</tt> element.</li>\n<li><tt>table_id</tt> - a string to set as the <tt>id</tt> attribute on the\n<tt>&lt;table&gt;</tt> element.</li>\n<li><tt>border</tt> - whether the <tt>border</tt> should be set on the <tt>&lt;table&gt;</tt>\nelement.</li>\n</ul>\n<p>These can be set in a few different ways:</p>\n<ol>\n<li><p>set when defining the table class</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyTable</span>\n<span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'class1'</span><span class=\"p\">,</span> <span class=\"s1\">'class2'</span><span class=\"p\">]</span>\n</pre>\n</li>\n<li><p>passed in the <tt>options</tt> argument to <tt>create_table</tt>.</p>\n<pre><span class=\"n\">MyTable</span> <span class=\"o\">=</span> <span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'table_id'</span><span class=\"p\">:</span> <span class=\"s1\">'my-table-id'</span><span class=\"p\">})</span>\n</pre>\n</li>\n<li><p>passed to the table\u2019s <tt>__init__</tt></p>\n<pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">MyTable</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">no_items</span><span class=\"o\">=</span><span class=\"s1\">'There is nothing'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<p>Note that a) and b) define an attribute on the table class, but c)\ndefines an attribute on the instance, so anything set like in c) will\noverride anything set in a) or b).</p>\n<p>Eg:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ItemTable</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'myclass'</span><span class=\"p\">]</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">)</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">ItemTable</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'otherclass'</span><span class=\"p\">])</span>\n</pre>\n<p>would create a table with <tt><span class=\"pre\">class=\"otherclass\"</span></tt>.</p>\n</div>\n<div id=\"included-col-types\">\n<h2>Included Col Types</h2>\n<ul>\n<li><tt>`OptCol</tt> &lt;#more-about-optcol&gt;`__ - converts values according to a\ndictionary of choices. Eg for turning stored codes into human\nreadable text.</li>\n<li><tt>`BoolCol</tt> &lt;#more-about-boolcol&gt;`__ (subclass of OptCol) - converts\nvalues to yes/no.</li>\n<li><tt>`BoolNaCol</tt> &lt;#more-about-boolnacol&gt;`__ (subclass of BoolCol) -\nconverts values to yes/no/na.</li>\n<li><tt>`DateCol</tt> &lt;#more-about-datecol&gt;`__ - for dates (uses\n<tt>format_date</tt> from <tt>babel.dates</tt>).</li>\n<li><tt>`DatetimeCol</tt> &lt;#more-about-datetimecol&gt;`__ - for date-times (uses\n<tt>format_datetime</tt> from <tt>babel.dates</tt>).</li>\n<li><tt>`LinkCol</tt> &lt;#more-about-linkcol&gt;`__ - creates a link by specifying\nan endpoint and url_kwargs.</li>\n<li><tt>`ButtonCol</tt> &lt;#more-about-buttoncol&gt;`__ (subclass of LinkCol)\ncreates a button that posts the the given address.</li>\n<li><tt>`NestedTableCol</tt> &lt;#more-about-nestedtablecol&gt;`__ - allows nesting\nof tables inside columns</li>\n</ul>\n<div id=\"more-about-optcol\">\n<h3>More about <tt>OptCol</tt></h3>\n<p>When creating the column, you pass some <tt>choices</tt>. This should be a\ndict with the keys being the values that will be found on the item\u2019s\nattribute, and the values will be the text to be displayed.</p>\n<p>You can also set a <tt>default_key</tt>, or a <tt>default_value</tt>. The default\nvalue will be used if the value found from the item isn\u2019t in the choices\ndict. The default key works in much the same way, but means that if your\ndefault is already in your choices, you can just point to it rather than\nrepeat it.</p>\n<p>And you can use <tt>coerce_fn</tt> if you need to alter the value from the\nitem before looking it up in the dict.</p>\n</div>\n<div id=\"more-about-boolcol\">\n<h3>More about <tt>BoolCol</tt></h3>\n<p>A subclass of <tt>OptCol</tt> where the <tt>choices</tt> are:</p>\n<pre><span class=\"p\">{</span><span class=\"kc\">True</span><span class=\"p\">:</span> <span class=\"s1\">'Yes'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">:</span> <span class=\"s1\">'No'</span><span class=\"p\">}</span>\n</pre>\n<p>and the <tt>coerce_fn</tt> is <tt>bool</tt>. So the value from the item is coerced\nto a <tt>bool</tt> and then looked up in the choices to get the text to\ndisplay.</p>\n<p>If you want to specify something other than \u201cYes\u201d and \u201cNo\u201d, you can pass\n<tt>yes_display</tt> and/or <tt>no_display</tt> when creating the column. Eg:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyTable</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"n\">mybool</span> <span class=\"o\">=</span> <span class=\"n\">BoolCol</span><span class=\"p\">(</span><span class=\"s1\">'myboolcol'</span><span class=\"p\">,</span> <span class=\"n\">yes_display</span><span class=\"o\">=</span><span class=\"s1\">'Affirmative'</span><span class=\"p\">,</span> <span class=\"n\">no_display</span><span class=\"o\">=</span><span class=\"s1\">'Negatory'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"more-about-boolnacol\">\n<h3>More about <tt>BoolNaCol</tt></h3>\n<p>Just like <tt>BoolCol</tt>, except displays <tt>None</tt> as \u201cN/A\u201d. Can override\nwith the <tt>na_display</tt> argument.</p>\n</div>\n<div id=\"more-about-datecol\">\n<h3>More about <tt>DateCol</tt></h3>\n<p>Formats a date from the item. Can specify a <tt>date_format</tt> to use,\nwhich defaults to <tt>'short'</tt>, which is passed to\n<tt>babel.dates.format_date</tt>.</p>\n</div>\n<div id=\"more-about-datetimecol\">\n<h3>More about <tt>DatetimeCol</tt></h3>\n<p>Formats a datetime from the item. Can specify a <tt>datetime_format</tt> to\nuse, which defaults to <tt>'short'</tt>, which is passed to\n<tt>babel.dates.format_datetime</tt>.</p>\n</div>\n<div id=\"more-about-linkcol\">\n<h3>More about <tt>LinkCol</tt></h3>\n<p>Gives a way of putting a link into a <tt>td</tt>. You must specify an\n<tt>endpoint</tt> for the url. You should also specify some <tt>url_kwargs</tt>.\nThis should be a dict which will be passed as the second argument of\n<tt>url_for</tt>, except the values will be treated as attributes to be\nlooked up on the item. These keys obey the same rules as elsewhere, so\ncan be things like <tt>'category.name'</tt> or <tt>('category', 'name')</tt>.</p>\n<p>The kwarg <tt>url_kwargs_extra</tt> allows passing of contants to the url.\nThis can be useful for adding constant GET params to a url.</p>\n<p>The text for the link is acquired in <em>almost</em> the same way as with other\ncolumns. However, other columns can be given no <tt>attr</tt> or\n<tt>attr_list</tt> and will use the attribute that the column was given in\nthe table class, but <tt>LinkCol</tt> does not, and instead falls back to the\nheading of the column. This make more sense for things like an \u201cEdit\u201d\nlink. You can override this fallback with the <tt>text_fallback</tt> kwarg.</p>\n<p>Set attributes for anchor tag by passing <tt>anchor_attrs</tt>:</p>\n<pre><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">LinkCol</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">,</span> <span class=\"s1\">'single_item'</span><span class=\"p\">,</span> <span class=\"n\">url_kwargs</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">),</span> <span class=\"n\">anchor_attrs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'myclass'</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"more-about-buttoncol\">\n<h3>More about <tt>ButtonCol</tt></h3>\n<p>Has all the same options as <tt>LinkCol</tt> but instead adds a form and a\nbutton that gets posted to the url.</p>\n<p>You can pass a dict of attributes to add to the button element with the\n<tt>button_attrs</tt> kwarg.</p>\n<p>You can pass a dict of attributes to add to the form element with the\n<tt>form_attrs</tt> kwarg.</p>\n<p>You can pass a dict of hidden fields to add into the form element with\nthe <tt>form_hidden_fields</tt> kwargs. The keys will be used as the <tt>name</tt>\nattributes and the values as the <tt>value</tt> attributes.</p>\n</div>\n<div id=\"more-about-nestedtablecol\">\n<h3>More about <tt>NestedTableCol</tt></h3>\n<p>This column type makes it possible to nest tables in columns. For each\nnested table column you need to define a subclass of Table as you\nnormally would when defining a table. The name of that Table sub-class\nis the second argument to NestedTableCol.</p>\n<p>Eg:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySubTable</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'1st nested table col'</span><span class=\"p\">)</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'2nd nested table col'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MainTable</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">NestedTableCol</span><span class=\"p\">(</span><span class=\"s1\">'objects'</span><span class=\"p\">,</span> <span class=\"n\">MySubTable</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"subclassing-col\">\n<h2>Subclassing Col</h2>\n<p>(Look in examples/subclassing.py for a more concrete example)</p>\n<p>Suppose our item has an attribute, but we don\u2019t want to output the value\ndirectly, we need to alter it first. If the value that we get from the\nitem gives us all the information we need, then we can just override the\ntd_format method:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">LangCol</span><span class=\"p\">(</span><span class=\"n\">Col</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">td_format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">content</span> <span class=\"o\">==</span> <span class=\"s1\">'en_GB'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'British English'</span>\n        <span class=\"k\">elif</span> <span class=\"n\">content</span> <span class=\"o\">==</span> <span class=\"s1\">'de_DE'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'German'</span>\n        <span class=\"k\">elif</span> <span class=\"n\">content</span> <span class=\"o\">==</span> <span class=\"s1\">'fr_FR'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'French'</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'Not Specified'</span>\n</pre>\n<p>If you need access to all of information in the item, then we can go a\nstage earlier in the process and override the td_contents method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Markup</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">td_contents</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">attr_list</span><span class=\"p\">):</span>\n    <span class=\"c1\"># by default this does</span>\n    <span class=\"c1\"># return self.td_format(self.from_attr_list(i, attr_list))</span>\n    <span class=\"k\">return</span> <span class=\"n\">Markup</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">from_attr_list</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">attr_list</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">' for '</span> <span class=\"o\">+</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<p>At present, you do still need to be careful about escaping things as you\noverride these methods. Also, because of the way that the Markup class\nworks, you need to be careful about how you concatenate these with other\nstrings.</p>\n</div>\n<div id=\"manipulating-tr-s\">\n<h2>Manipulating <tt>&lt;tr&gt;</tt>s</h2>\n<p>(Look in examples/rows.py for a more concrete example)</p>\n<p>Suppose you want to change something about the tr element for some or\nall items. You can do this by overriding your table\u2019s <tt>get_tr_attrs</tt>\nmethod. By default, this method returns an empty dict.</p>\n<p>So, we might want to use something like:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ItemTable</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">)</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Description'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_tr_attrs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">important</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'important'</span><span class=\"p\">}</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>which would give all trs for items that returned a true value for the\n<tt>important()</tt> method, a class of \u201cimportant\u201d.</p>\n</div>\n<div id=\"dynamically-creating-tables\">\n<h2>Dynamically Creating Tables</h2>\n<p>(Look in examples/dynamic.py for a more concrete example)</p>\n<p>You can define a table dynamically too.</p>\n<pre><span class=\"n\">TableCls</span> <span class=\"o\">=</span> <span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"s1\">'TableCls'</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">add_column</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">))</span>\\\n    <span class=\"o\">.</span><span class=\"n\">add_column</span><span class=\"p\">(</span><span class=\"s1\">'description'</span><span class=\"p\">,</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Description'</span><span class=\"p\">))</span>\n</pre>\n<p>which is equivalent to</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TableCls</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">)</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Description'</span><span class=\"p\">)</span>\n</pre>\n<p>but makes it easier to add columns dynamically.</p>\n<p>For example, you may wish to only add a column based on a condition.</p>\n<pre><span class=\"n\">TableCls</span> <span class=\"o\">=</span> <span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"s1\">'TableCls'</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">add_column</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">condition</span><span class=\"p\">:</span>\n    <span class=\"n\">TableCls</span><span class=\"o\">.</span><span class=\"n\">add_column</span><span class=\"p\">(</span><span class=\"s1\">'description'</span><span class=\"p\">,</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Description'</span><span class=\"p\">))</span>\n</pre>\n<p>which is equivalent to</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TableCls</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">)</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Description'</span><span class=\"p\">,</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"n\">condition</span><span class=\"p\">)</span>\n</pre>\n<p>thanks to the <tt>show</tt> option. Use whichever you think makes your code\nmore readable. Though you may still need the dynamic option for\nsomething like</p>\n<pre><span class=\"n\">TableCls</span> <span class=\"o\">=</span> <span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"s1\">'TableCls'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"n\">TableCls</span><span class=\"o\">.</span><span class=\"n\">add_column</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)))</span>\n</pre>\n<p>We can also set some extra options to the table class by passing\n<tt>options</tt> parameter to <tt>create_table()</tt>:</p>\n<pre><span class=\"n\">tbl_options</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'cls1'</span><span class=\"p\">,</span> <span class=\"s1\">'cls2'</span><span class=\"p\">],</span>\n    <span class=\"n\">thead_classes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'cls_head1'</span><span class=\"p\">,</span> <span class=\"s1\">'cls_head2'</span><span class=\"p\">],</span>\n    <span class=\"n\">no_items</span><span class=\"o\">=</span><span class=\"s1\">'Empty'</span><span class=\"p\">)</span>\n<span class=\"n\">TableCls</span> <span class=\"o\">=</span> <span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">tbl_options</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># equals to</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TableCls</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'cls1'</span><span class=\"p\">,</span> <span class=\"s1\">'cls2'</span><span class=\"p\">]</span>\n    <span class=\"n\">thead_classes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'cls_head1'</span><span class=\"p\">,</span> <span class=\"s1\">'cls_head2'</span><span class=\"p\">]</span>\n    <span class=\"n\">no_items</span> <span class=\"o\">=</span> <span class=\"s1\">'Empty'</span>\n</pre>\n</div>\n<div id=\"sortable-tables\">\n<h2>Sortable Tables</h2>\n<p>(Look in examples/sortable.py for a more concrete example)</p>\n<p>Define a table and set its allow_sort attribute to True. Now all\ncolumns will be default try to turn their header into a link for\nsorting, unless you set allow_sort to False for a column.</p>\n<p>You also must declare a sort_url method for that table. Given a\ncol_key, this determines the url for link in the header. If reverse is\nTrue, then that means that the table has just been sorted by that column\nand the url can adjust accordingly, ie to now give the address for the\ntable sorted in the reverse direction. It is, however, entirely up to\nyour flask view method to interpret the values given to it from this url\nand to order the results before giving the to the table. The table\nitself will not do any reordering of the items it is given.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SortableTable</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">)</span>\n    <span class=\"n\">allow_sort</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">sort_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">col_key</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">reverse</span><span class=\"p\">:</span>\n            <span class=\"n\">direction</span> <span class=\"o\">=</span>  <span class=\"s1\">'desc'</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">direction</span> <span class=\"o\">=</span> <span class=\"s1\">'asc'</span>\n        <span class=\"k\">return</span> <span class=\"n\">url_for</span><span class=\"p\">(</span><span class=\"s1\">'index'</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">col_key</span><span class=\"p\">,</span> <span class=\"n\">direction</span><span class=\"o\">=</span><span class=\"n\">direction</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"the-examples\">\n<h2>The Examples</h2>\n<p>The <tt>examples</tt> directory contains a few pieces of sample code to show\nsome of the concepts and features. They are all intended to be runnable.\nSome of them just output the code they generate, but some (just one,\n<tt>sortable.py</tt>, at present) actually creates a Flask app that you can\naccess.</p>\n<p>You should be able to just run them directly with <tt>python</tt>, but if you\nhave cloned the repository for the sake of dev, and created a\nvirtualenv, you may find that they generate an import error for\n<tt>flask_table</tt>. This is because <tt>flask_table</tt> hasn\u2019t been installed,\nand can be rectified by running something like\n<tt><span class=\"pre\">PYTHONPATH=.:./lib/python3.3/site-packages</span> python examples/simple.py</tt>,\nwhich will use the local version of <tt>flask_table</tt> including any\nchanges.</p>\n<p>Also, if there is anything that you think is not clear and would be\nhelped by an example, please just ask and I\u2019ll happily write one. Only\nyou can help me realise which bits are tricky or non-obvious and help me\nto work on explaining the bits that need explaining.</p>\n</div>\n<div id=\"other-things\">\n<h2>Other Things</h2>\n<p>At the time of first writing, I was not aware of the work of\nDjango-Tables. However, I have now found it and started adapting ideas\nfrom it, where appropriate. For example, allowing items to be dicts as\nwell as objects.</p>\n</div>\n\n          </div>"}, "last_serial": 3437879, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0d3726218d64e3a59e72511ef78cb6ca", "sha256": "02d6ba926a26feab2c17e90e4802969da21e0b69348a3c2f4aef1793af0673f1"}, "downloads": -1, "filename": "Flask-Table-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0d3726218d64e3a59e72511ef78cb6ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2135, "upload_time": "2014-05-03T18:04:54", "upload_time_iso_8601": "2014-05-03T18:04:54.727428Z", "url": "https://files.pythonhosted.org/packages/3f/14/af531cb4ab49e7455cfe8fec327f045188ffdc8aad0e20c5ef2cae1c9c12/Flask-Table-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1bdab5a93084b4b1df0160bb33fd29be", "sha256": "ef1a48a8a1689252be067eaea8aa49507abbc8db4bd3084d7eaa868db1aa1ba2"}, "downloads": -1, "filename": "Flask-Table-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1bdab5a93084b4b1df0160bb33fd29be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2155, "upload_time": "2014-05-03T18:14:36", "upload_time_iso_8601": "2014-05-03T18:14:36.516777Z", "url": "https://files.pythonhosted.org/packages/97/a4/2a4c162c31ef37a8d7e9cabaa9e5132632e3ce4b5fd419d233b3fcd64676/Flask-Table-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "fbcaa572efdb57736ed181cbbce0a31d", "sha256": "2df0507b75272130f643b1afe09a6d0fdc73494c6be63bb6021eb0934113e56e"}, "downloads": -1, "filename": "Flask-Table-0.1.2.tar.gz", "has_sig": false, "md5_digest": "fbcaa572efdb57736ed181cbbce0a31d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4178, "upload_time": "2014-05-04T10:13:05", "upload_time_iso_8601": "2014-05-04T10:13:05.597631Z", "url": "https://files.pythonhosted.org/packages/74/f0/45dff31712f320d84d391a9f12064ebc5d8ba843185a4358425dc8a13418/Flask-Table-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "30f03bba5f15820aab49c1f833648b8e", "sha256": "5121ed97ad5a0ade7aebb567d6ae65ca99b4dcdfecccef7b516efdf1aef99b46"}, "downloads": -1, "filename": "Flask-Table-0.1.3.tar.gz", "has_sig": false, "md5_digest": "30f03bba5f15820aab49c1f833648b8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3416, "upload_time": "2014-05-04T10:14:23", "upload_time_iso_8601": "2014-05-04T10:14:23.927832Z", "url": "https://files.pythonhosted.org/packages/64/a0/05b351f8b06b291b93717730ab4fe2076184a52646f86f99645af88a36d1/Flask-Table-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "e3954d0a7cd37879cda55443663e2210", "sha256": "b749aa339aa7963c420f6cfa69247c11e3c2edd885d841063952df641f9823fa"}, "downloads": -1, "filename": "Flask-Table-0.1.4.tar.gz", "has_sig": false, "md5_digest": "e3954d0a7cd37879cda55443663e2210", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3514, "upload_time": "2014-05-04T13:39:52", "upload_time_iso_8601": "2014-05-04T13:39:52.639516Z", "url": "https://files.pythonhosted.org/packages/87/13/8c542a83f860f80e39e3cf21c59870442d00c192e347ec4185bce1bb90dd/Flask-Table-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "3c3fc6724a5e17a649075d6c0372c8fd", "sha256": "3b29a25ab3e96734cd7ccb30f9ba82794295825ad0040780cd390300675d8c3d"}, "downloads": -1, "filename": "Flask-Table-0.1.5.tar.gz", "has_sig": false, "md5_digest": "3c3fc6724a5e17a649075d6c0372c8fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3678, "upload_time": "2014-05-05T13:46:09", "upload_time_iso_8601": "2014-05-05T13:46:09.842923Z", "url": "https://files.pythonhosted.org/packages/5f/34/952adaf6ae8a798a2917c1070401b6d90e206cd72c0d3f13838a6355f50b/Flask-Table-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "c17a7b8d8bcccf66ab85366ee565c39d", "sha256": "c5748467e2bc187408bbf21048edbd5ea2fd71a6547caf8f8f9b511321dd604c"}, "downloads": -1, "filename": "Flask-Table-0.1.6.tar.gz", "has_sig": false, "md5_digest": "c17a7b8d8bcccf66ab85366ee565c39d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5611, "upload_time": "2014-05-05T13:52:57", "upload_time_iso_8601": "2014-05-05T13:52:57.913700Z", "url": "https://files.pythonhosted.org/packages/32/8d/8ca0384c56290f49b7316280aad87000d497e3a168cae42842141d75c546/Flask-Table-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "89a44e0e1e061f41d3aa64776a0eee01", "sha256": "524eb49b4187d8152682851d43a0e3cb6aae633ccfd4ed6ae26a99aa08bbbd19"}, "downloads": -1, "filename": "Flask-Table-0.1.7.tar.gz", "has_sig": false, "md5_digest": "89a44e0e1e061f41d3aa64776a0eee01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5611, "upload_time": "2014-05-05T14:20:49", "upload_time_iso_8601": "2014-05-05T14:20:49.203726Z", "url": "https://files.pythonhosted.org/packages/d2/b1/9a4e2404104d49eb26f4f49b6bd98cf2304854eb0827d6ae5c3bb1b99b85/Flask-Table-0.1.7.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "28de62fb1c7f21d9f9164c78433965fe", "sha256": "101e5f399de7cf22edd3584d518043b98b172d45b11dcb29fd5951adb67f6873"}, "downloads": -1, "filename": "Flask-Table-0.2.0.tar.gz", "has_sig": false, "md5_digest": "28de62fb1c7f21d9f9164c78433965fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5657, "upload_time": "2014-05-05T18:06:45", "upload_time_iso_8601": "2014-05-05T18:06:45.524395Z", "url": "https://files.pythonhosted.org/packages/ab/8c/46ed25f061e784e0be93f72c635445bd0ea48262d37b04c2080947468ff5/Flask-Table-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "84d3dc025b5c2c29dc4b0f121e731cba", "sha256": "bf91904b7db0fc54155267f375824371a31a3fa48ea31e7d7705933d79f294bd"}, "downloads": -1, "filename": "Flask-Table-0.2.1.tar.gz", "has_sig": false, "md5_digest": "84d3dc025b5c2c29dc4b0f121e731cba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6066, "upload_time": "2014-05-31T13:05:03", "upload_time_iso_8601": "2014-05-31T13:05:03.443982Z", "url": "https://files.pythonhosted.org/packages/df/dc/3296d802943bb565d60c9c367d63098bf0f522976297b6651dac0cd528c3/Flask-Table-0.2.1.tar.gz", "yanked": false}], "0.2.10": [{"comment_text": "", "digests": {"md5": "66b7cfeeea2b6a8a5f4c358d241c58f4", "sha256": "262c95eee0caaa93f78946797ed8ed614a48ada59ff14440153f2ff057c9e7ad"}, "downloads": -1, "filename": "Flask-Table-0.2.10.tar.gz", "has_sig": false, "md5_digest": "66b7cfeeea2b6a8a5f4c358d241c58f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13764, "upload_time": "2016-04-20T08:31:22", "upload_time_iso_8601": "2016-04-20T08:31:22.851833Z", "url": "https://files.pythonhosted.org/packages/25/f4/015004e6ebdcd145fbc92cd46535da631631ced1e83422170ab170bc31b6/Flask-Table-0.2.10.tar.gz", "yanked": false}], "0.2.11": [{"comment_text": "", "digests": {"md5": "522e640e3e0f033ccb87a46deb4edd35", "sha256": "27a1f3cb1444b629ce29876707a1c8507588cbb5557a5ca2c3afe893dbd765a5"}, "downloads": -1, "filename": "Flask-Table-0.2.11.tar.gz", "has_sig": false, "md5_digest": "522e640e3e0f033ccb87a46deb4edd35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11043, "upload_time": "2016-07-19T13:59:33", "upload_time_iso_8601": "2016-07-19T13:59:33.170340Z", "url": "https://files.pythonhosted.org/packages/3a/7d/16292b37e2ff266214b922ffce79d76a44622093dc71fc992ff3da62dd57/Flask-Table-0.2.11.tar.gz", "yanked": false}], "0.2.12": [{"comment_text": "", "digests": {"md5": "260dee5847fc85d8a0f1625226eca538", "sha256": "a6776c4305348a57035d0941ef935fb78630d88f747a2adc1318ad74e6e85ac1"}, "downloads": -1, "filename": "Flask-Table-0.2.12.tar.gz", "has_sig": false, "md5_digest": "260dee5847fc85d8a0f1625226eca538", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11436, "upload_time": "2016-08-02T14:16:27", "upload_time_iso_8601": "2016-08-02T14:16:27.753319Z", "url": "https://files.pythonhosted.org/packages/f4/70/48b55d81062807f1c758e1a69fff1365f888ba09a2f221c870f82da2621b/Flask-Table-0.2.12.tar.gz", "yanked": false}], "0.2.13": [{"comment_text": "", "digests": {"md5": "cdcc34c068c9713040e9ce0676c5bf90", "sha256": "a9fa98b4950ee3340703b437d11aac84563595f6e663ce2ff10a8ef830c0442f"}, "downloads": -1, "filename": "Flask-Table-0.2.13.tar.gz", "has_sig": false, "md5_digest": "cdcc34c068c9713040e9ce0676c5bf90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11427, "upload_time": "2016-12-22T16:20:27", "upload_time_iso_8601": "2016-12-22T16:20:27.453390Z", "url": "https://files.pythonhosted.org/packages/cc/74/8fa84fda87481cab295d74c79b32e601bb8ee54b9419f15f51759e2f27ec/Flask-Table-0.2.13.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "0aa52767a553b3435525fe91df6f6a4e", "sha256": "add86c4ad531e07a4295f053bf38943ea448f0206b5e114a48f7391a44499372"}, "downloads": -1, "filename": "Flask-Table-0.2.2.tar.gz", "has_sig": false, "md5_digest": "0aa52767a553b3435525fe91df6f6a4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6338, "upload_time": "2014-07-05T22:54:54", "upload_time_iso_8601": "2014-07-05T22:54:54.678692Z", "url": "https://files.pythonhosted.org/packages/1f/a9/37772146e5a64352509770ba109b03b2b7498fe20c88c2f023b5602a9e09/Flask-Table-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "f341ae9ad5e4b1fd82f77219b893ef87", "sha256": "f48858a8da966e48729dd68b1e3c91b757c141060e6ead6d15480b72324f6d4a"}, "downloads": -1, "filename": "Flask-Table-0.2.3.tar.gz", "has_sig": false, "md5_digest": "f341ae9ad5e4b1fd82f77219b893ef87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6741, "upload_time": "2014-09-10T21:30:10", "upload_time_iso_8601": "2014-09-10T21:30:10.918318Z", "url": "https://files.pythonhosted.org/packages/1d/b1/710256bb85d030ba500c3107233c9bb97c9a08679f368ccfdfd04efb30aa/Flask-Table-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "9f970a7b592a0d7d9b365537e58b896d", "sha256": "3ea3ab7f7722a40b6a77dd8eb02ed2a83898ca3e867fbeafbb515aee482a7559"}, "downloads": -1, "filename": "Flask-Table-0.2.4.tar.gz", "has_sig": false, "md5_digest": "9f970a7b592a0d7d9b365537e58b896d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6813, "upload_time": "2014-09-20T17:04:02", "upload_time_iso_8601": "2014-09-20T17:04:02.725156Z", "url": "https://files.pythonhosted.org/packages/02/1d/2c11435530cefc38f205d425b5d891658b8459179832fd05efcee87697a7/Flask-Table-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "54f470795e7bd9e362ffed7f6bf7336e", "sha256": "ef3fb55e519e7d3bc6498577b85802834da93ca447a2df20f09bc1708056f81a"}, "downloads": -1, "filename": "Flask-Table-0.2.5.tar.gz", "has_sig": false, "md5_digest": "54f470795e7bd9e362ffed7f6bf7336e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6883, "upload_time": "2014-11-23T19:02:20", "upload_time_iso_8601": "2014-11-23T19:02:20.803969Z", "url": "https://files.pythonhosted.org/packages/e7/1b/bb715e0d908e8f329ae0441af06ced55ef06eacd2dd2e50e234fc311b1cf/Flask-Table-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "c7abb277d2631e9ffc0652d0fa8a3586", "sha256": "a0ed01e4e4609908f222efa24c57ff231179b2ec16039126571129b22a5a7f48"}, "downloads": -1, "filename": "Flask-Table-0.2.6.tar.gz", "has_sig": false, "md5_digest": "c7abb277d2631e9ffc0652d0fa8a3586", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7996, "upload_time": "2014-12-08T23:36:43", "upload_time_iso_8601": "2014-12-08T23:36:43.145957Z", "url": "https://files.pythonhosted.org/packages/b9/75/7b184bf7372841714c7a102d7ac32aff754e1f50d25870200a5d4fa9ef4b/Flask-Table-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "794b3902f630099cf7b9227759d8500e", "sha256": "71c46d1cc972aa5c87916a59008ae46ab58716030ca1cbcd1821617a24f6b1f8"}, "downloads": -1, "filename": "Flask-Table-0.2.7.tar.gz", "has_sig": false, "md5_digest": "794b3902f630099cf7b9227759d8500e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8248, "upload_time": "2014-12-09T21:41:39", "upload_time_iso_8601": "2014-12-09T21:41:39.614379Z", "url": "https://files.pythonhosted.org/packages/ad/f1/abdbd635abe93800e9280eb2b187f588dfc28166605749b0f7cb85785e55/Flask-Table-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "c85079b452be5233f0042beab0eb2eed", "sha256": "012ed0d849c60307f3255c2728756b7820e7522dd89bee59bed628f4918aad4f"}, "downloads": -1, "filename": "Flask-Table-0.2.8.tar.gz", "has_sig": false, "md5_digest": "c85079b452be5233f0042beab0eb2eed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11231, "upload_time": "2014-12-14T17:54:17", "upload_time_iso_8601": "2014-12-14T17:54:17.138752Z", "url": "https://files.pythonhosted.org/packages/a2/5d/44bae82e78ce3b0ed0d7b6385aabba2f87b9705c3938676f4514084764f9/Flask-Table-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "c17af95f93739903dcb3e8fea5f5849e", "sha256": "8002be6afd6b15e6f58596922e63438b84125879585fb1f8d1c9f667a98d0173"}, "downloads": -1, "filename": "Flask-Table-0.2.9.tar.gz", "has_sig": false, "md5_digest": "c17af95f93739903dcb3e8fea5f5849e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11797, "upload_time": "2015-11-05T16:23:59", "upload_time_iso_8601": "2015-11-05T16:23:59.864207Z", "url": "https://files.pythonhosted.org/packages/4e/f0/3e26e9f801bec8c87a3bc86276e933713c8e702a433c8e61226b0c7ab6a7/Flask-Table-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "234b207c29536588f16ff140fd7851f7", "sha256": "ed6e0bf42d358daed208b8dc513523340d1e4935d6cd34f7943116a02e974702"}, "downloads": -1, "filename": "Flask-Table-0.3.0.tar.gz", "has_sig": false, "md5_digest": "234b207c29536588f16ff140fd7851f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12235, "upload_time": "2017-01-13T17:48:37", "upload_time_iso_8601": "2017-01-13T17:48:37.446705Z", "url": "https://files.pythonhosted.org/packages/4a/33/7abd1d16d2dcc65aabbf74c3ac15816d19e9f2453266dc40d494b6a625c7/Flask-Table-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "507a9abfd1d6da8574e32485a2c1fcc3", "sha256": "c709b6536074234edee86a05af6701a0283413a41e511e24c0ca8589d8e0382e"}, "downloads": -1, "filename": "Flask-Table-0.3.1.tar.gz", "has_sig": false, "md5_digest": "507a9abfd1d6da8574e32485a2c1fcc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18493, "upload_time": "2017-01-18T22:48:52", "upload_time_iso_8601": "2017-01-18T22:48:52.266633Z", "url": "https://files.pythonhosted.org/packages/d0/bc/2940fc41cc06bc7f800b2c97c4e2b2d9fb6206a04b0e6e3ca300aa0f2cd4/Flask-Table-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "8aad6d255845c256ee00fa742bcd3d0b", "sha256": "5c6024fc39a67a8976fdcc3f7f162f47fecde1b2b205fad4a5c6783ae4e71cfc"}, "downloads": -1, "filename": "Flask-Table-0.3.2.tar.gz", "has_sig": false, "md5_digest": "8aad6d255845c256ee00fa742bcd3d0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18532, "upload_time": "2017-01-18T22:58:17", "upload_time_iso_8601": "2017-01-18T22:58:17.766078Z", "url": "https://files.pythonhosted.org/packages/84/0a/3c69597765d8e1ab9bd7585769f7c0de17df1903f8b5511ab40b5da18c04/Flask-Table-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "0390569a581a99564f2abb3b3d0f1a2e", "sha256": "551194987b1171c41e80bae39af64572f773ff79237811c567bbf6c99d872fb8"}, "downloads": -1, "filename": "Flask-Table-0.3.3.tar.gz", "has_sig": false, "md5_digest": "0390569a581a99564f2abb3b3d0f1a2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18987, "upload_time": "2017-01-30T10:27:39", "upload_time_iso_8601": "2017-01-30T10:27:39.213325Z", "url": "https://files.pythonhosted.org/packages/31/99/879cc987d409a72a2251c8bb8c7714a881f266feea608d6b8e471a1af228/Flask-Table-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "6dcf451d2e7a7b1a39f81c8e0a360c93", "sha256": "87c2a2a046c33b7675c2214c772e84c0fcb6401c69cdcdf73a69932b440680c9"}, "downloads": -1, "filename": "Flask-Table-0.3.4.tar.gz", "has_sig": false, "md5_digest": "6dcf451d2e7a7b1a39f81c8e0a360c93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18996, "upload_time": "2017-01-31T12:37:37", "upload_time_iso_8601": "2017-01-31T12:37:37.185756Z", "url": "https://files.pythonhosted.org/packages/c5/b9/4be7443849d4e96975ab749e0424d8547b29dd487354078955306adf1e88/Flask-Table-0.3.4.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "46199fc1c441d971cba4fa7f3c8e71fc", "sha256": "00775721255d6f48c9c510e280f090fbc0930b75c45b17a38bb93544031bfe3d"}, "downloads": -1, "filename": "Flask-Table-0.4.0.tar.gz", "has_sig": false, "md5_digest": "46199fc1c441d971cba4fa7f3c8e71fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19543, "upload_time": "2017-02-07T17:28:32", "upload_time_iso_8601": "2017-02-07T17:28:32.042467Z", "url": "https://files.pythonhosted.org/packages/f0/86/d461856f555da4da4a1c3098848719bee298f068183e13da1cbabda02e94/Flask-Table-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "9879d222cbf6586e3d2da2eefccd1479", "sha256": "35416afbb79b75be573c7153ce2e2260c3bc52754875dac9fb73d5202f7c96b5"}, "downloads": -1, "filename": "Flask-Table-0.4.1.tar.gz", "has_sig": false, "md5_digest": "9879d222cbf6586e3d2da2eefccd1479", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19697, "upload_time": "2017-02-14T18:04:57", "upload_time_iso_8601": "2017-02-14T18:04:57.009236Z", "url": "https://files.pythonhosted.org/packages/c9/08/e1c31b2b6bb260fb81216650d415935d4cf797b54113b34d209247025c64/Flask-Table-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "e1d31040efa020013d0867df0bde8828", "sha256": "320e5756cd7252e902e03b6cd1087f2c7ebc31364341b482f41f30074d10a770"}, "downloads": -1, "filename": "Flask-Table-0.5.0.tar.gz", "has_sig": false, "md5_digest": "e1d31040efa020013d0867df0bde8828", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18048, "upload_time": "2017-12-22T19:27:33", "upload_time_iso_8601": "2017-12-22T19:27:33.447907Z", "url": "https://files.pythonhosted.org/packages/5c/f8/c8680277a8a0170d6f4c170dc4525f7869134021549eb84b116a75a24b15/Flask-Table-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1d31040efa020013d0867df0bde8828", "sha256": "320e5756cd7252e902e03b6cd1087f2c7ebc31364341b482f41f30074d10a770"}, "downloads": -1, "filename": "Flask-Table-0.5.0.tar.gz", "has_sig": false, "md5_digest": "e1d31040efa020013d0867df0bde8828", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18048, "upload_time": "2017-12-22T19:27:33", "upload_time_iso_8601": "2017-12-22T19:27:33.447907Z", "url": "https://files.pythonhosted.org/packages/5c/f8/c8680277a8a0170d6f4c170dc4525f7869134021549eb84b116a75a24b15/Flask-Table-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:13 2020"}