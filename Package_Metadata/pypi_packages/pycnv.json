{"info": {"author": "Peter Holtermann", "author_email": "peter.holtermann@io-warnemuende.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering"], "description": "\nPython toolbox to read and process Seabird_ cnv files.\n\n.. _Seabird: http://www.seabird.com/\n\nThese text files are the standard output files of the Seabird CTD software.\n\nThe main purpose for pycnv is to create a standardised interface for\nslightly differing naming conventions of sensors in the cnv files and\nthe usage of the `Gibb Sea Water Toolbox (gsw) <https://github.com/TEOS-10/GSW-Python>`_\nfor the calculation of all\nderived parameters as practical salinity, absolute salinity, potential\nand conservative temperature or density. For this purpose pycnv does\nonly need pressure, conductivity and temperature, all other properties\nwill be derived from these. Furthermore pycnv will take care for a\ndifferent absolute salinity computation in the Baltic Sea, by\nautomatically checking of a cast was made in the Baltic Sea and\nchoosing the correct function.\n\n\nInstall\n-------\n\nThe package was developed using python 3.5+, it might work with\nearlier versions, but its not supported. The newest\n`Gibb Sea Water Toolbox (gsw) <https://github.com/TEOS-10/GSW-Python>`_\ndepends also on python 3.5+, pycnv heavily depends on the gsw toolbox. It\ntherefore strongly recommended to use python 3.5+.\n\nUser\n____\n\nInstall as a user\n\n.. code:: bash\n\n   python setup.py install --user\n\nUninstall as a user\n\n.. code:: bash\n\n   pip uninstall pycnv\n\n\n\nDeveloper\n_________\n\nInstall as a developer\n\n.. code:: bash\n\n   python setup.py develop --user\n\nUninstall as a user\n\n.. code:: bash\n\n   pip uninstall pycnv\n\n\nFEATURES\n--------\n\n- The data can be accessed by the original names defined in the cnv\n  file in the named array called data. E.g. header name \"# name 11 =\n  oxsatML/L: Oxygen Saturation, Weiss [ml/l]\" can be accessed like\n  this: data['oxsatML/L'].\n\n- Standard parameters (Temperature, Conductivity, pressure, oxygen)\n  are mapped to standard names. E.g. data['T0'] for the first\n  temperature sensor and data['C1'] for the second conductivity sensor.\n\n- If the standard parameters (C0,T0,p), (C1,T1,p) are available the\n  Gibbs Sea water toolbox is used to calculate absolute salinity, SA,\n  conservative temperature, CT, and potential temperature pt. The data\n  is stored in a second field called computed data:\n  cdata. E.g. cdata['SA00'].\n\n- The module checks if the cast was made in the Baltic Sea, if so, the\n  modified Gibbs sea water functions are automatically used.\n\n- The package provides scripts to search a given folder for cnv files\n  and can create a summary of the folder in a csv format easily\n  readable by python or office programs. The search can be refined by\n  a location or a predefined station.\n\n- Possibility to provide an own function for parsing custom header\n  information.\n\n- Plotting of the profile using `matplotlib <https://matplotlib.org>`_\n\n\n\nUSAGE\n-----\n\nThe package installs the executables:\n\n- pycnv\n\n- pycnv_sum_folder\n\n\nEXAMPLES \n--------\nPlot the in Situ temperature and the conservative temperature of a CTD cast:\n\n.. code:: python\n\n\t  import pycnv\n\t  import pylab as pl\n\t  fname='test.cnv' # A sebaird cnv file\n\t  p = pycnv.pycnv(fname)\n\t  pl.figure(1)\n\t  pl.clf()\n\t  pl.subplot(1,2,1)\n\t  pl.plot(p.data['T'],p.data['p'])\n\t  pl.xlabel(p.units['T'])\n\t  pl.gca().invert_yaxis()\t  \n\t  pl.subplot(1,2,2)\n\t  pl.plot(p.cdata['CT'],p.data['p'])\n\t  pl.xlabel(p)\n\t  pl.gca().invert_yaxis()\n\n\nLists all predefined stations (in terminal):\n\n.. code:: bash\n\n\t  pycnv_sum_folder --list_stations\n\n\nMakes a summary of the folder called cnv_data of all casts around\nstation TF0271 with a radius of 5000 m, prints it to the terminal and\nsaves it into the file TF271.txt  (in terminal):\n\n.. code:: bash\n\n\t  pycnv_sum_folder --data_folder cnv_data --station TF0271 5000 -p -f TF271.txt\n\n\nShow and plot conservative temperature, salinity and potential density of a cnv file into a pdf:\n\n.. code:: bash\n\n\t  pycnv --plot show,save,CT00,SA00,pot_rho00 ctd_cast.cnv\n\n\nInterpolate all CTD casts on station TF0271 onto the same pressure axis and make a netCDF out of it:\n\nsee code pycnv/test/make_netcdf.py\n\n\nDevices tested \n--------------\n\n- SEACAT V4.0g\n\n- SBE 11plus V 5.1e\n\n- SBE 11plus V 5.1g\n\n- Sea-Bird SBE 9 Software Version 4.206\n\n\n\n\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MarineDataTools/pycnv", "keywords": "", "license": "GPLv03", "maintainer": "", "maintainer_email": "", "name": "pycnv", "package_url": "https://pypi.org/project/pycnv/", "platform": "", "project_url": "https://pypi.org/project/pycnv/", "project_urls": {"Homepage": "https://github.com/MarineDataTools/pycnv"}, "release_url": "https://pypi.org/project/pycnv/0.3.9/", "requires_dist": ["gsw", "pyaml", "pyproj", "pytz"], "requires_python": ">=3.4", "summary": "Tool to convert Seabird cnv textfiles", "version": "0.3.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python toolbox to read and process <a href=\"http://www.seabird.com/\" rel=\"nofollow\">Seabird</a> cnv files.</p>\n<p>These text files are the standard output files of the Seabird CTD software.</p>\n<p>The main purpose for pycnv is to create a standardised interface for\nslightly differing naming conventions of sensors in the cnv files and\nthe usage of the <a href=\"https://github.com/TEOS-10/GSW-Python\" rel=\"nofollow\">Gibb Sea Water Toolbox (gsw)</a>\nfor the calculation of all\nderived parameters as practical salinity, absolute salinity, potential\nand conservative temperature or density. For this purpose pycnv does\nonly need pressure, conductivity and temperature, all other properties\nwill be derived from these. Furthermore pycnv will take care for a\ndifferent absolute salinity computation in the Baltic Sea, by\nautomatically checking of a cast was made in the Baltic Sea and\nchoosing the correct function.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<p>The package was developed using python 3.5+, it might work with\nearlier versions, but its not supported. The newest\n<a href=\"https://github.com/TEOS-10/GSW-Python\" rel=\"nofollow\">Gibb Sea Water Toolbox (gsw)</a>\ndepends also on python 3.5+, pycnv heavily depends on the gsw toolbox. It\ntherefore strongly recommended to use python 3.5+.</p>\n<div id=\"user\">\n<h3>User</h3>\n<p>Install as a user</p>\n<pre>python setup.py install --user\n</pre>\n<p>Uninstall as a user</p>\n<pre>pip uninstall pycnv\n</pre>\n</div>\n<div id=\"developer\">\n<h3>Developer</h3>\n<p>Install as a developer</p>\n<pre>python setup.py develop --user\n</pre>\n<p>Uninstall as a user</p>\n<pre>pip uninstall pycnv\n</pre>\n</div>\n</div>\n<div id=\"features\">\n<h2>FEATURES</h2>\n<ul>\n<li>The data can be accessed by the original names defined in the cnv\nfile in the named array called data. E.g. header name \u201c# name 11 =\noxsatML/L: Oxygen Saturation, Weiss [ml/l]\u201d can be accessed like\nthis: data[\u2018oxsatML/L\u2019].</li>\n<li>Standard parameters (Temperature, Conductivity, pressure, oxygen)\nare mapped to standard names. E.g. data[\u2018T0\u2019] for the first\ntemperature sensor and data[\u2018C1\u2019] for the second conductivity sensor.</li>\n<li>If the standard parameters (C0,T0,p), (C1,T1,p) are available the\nGibbs Sea water toolbox is used to calculate absolute salinity, SA,\nconservative temperature, CT, and potential temperature pt. The data\nis stored in a second field called computed data:\ncdata. E.g. cdata[\u2018SA00\u2019].</li>\n<li>The module checks if the cast was made in the Baltic Sea, if so, the\nmodified Gibbs sea water functions are automatically used.</li>\n<li>The package provides scripts to search a given folder for cnv files\nand can create a summary of the folder in a csv format easily\nreadable by python or office programs. The search can be refined by\na location or a predefined station.</li>\n<li>Possibility to provide an own function for parsing custom header\ninformation.</li>\n<li>Plotting of the profile using <a href=\"https://matplotlib.org\" rel=\"nofollow\">matplotlib</a></li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>USAGE</h2>\n<p>The package installs the executables:</p>\n<ul>\n<li>pycnv</li>\n<li>pycnv_sum_folder</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>EXAMPLES</h2>\n<p>Plot the in Situ temperature and the conservative temperature of a CTD cast:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pycnv</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pylab</span> <span class=\"k\">as</span> <span class=\"nn\">pl</span>\n<span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">'test.cnv'</span> <span class=\"c1\"># A sebaird cnv file</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pycnv</span><span class=\"o\">.</span><span class=\"n\">pycnv</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">clf</span><span class=\"p\">()</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'T'</span><span class=\"p\">],</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'p'</span><span class=\"p\">])</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">[</span><span class=\"s1\">'T'</span><span class=\"p\">])</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">invert_yaxis</span><span class=\"p\">()</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">cdata</span><span class=\"p\">[</span><span class=\"s1\">'CT'</span><span class=\"p\">],</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'p'</span><span class=\"p\">])</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">invert_yaxis</span><span class=\"p\">()</span>\n</pre>\n<p>Lists all predefined stations (in terminal):</p>\n<pre>pycnv_sum_folder --list_stations\n</pre>\n<p>Makes a summary of the folder called cnv_data of all casts around\nstation TF0271 with a radius of 5000 m, prints it to the terminal and\nsaves it into the file TF271.txt  (in terminal):</p>\n<pre>pycnv_sum_folder --data_folder cnv_data --station TF0271 <span class=\"m\">5000</span> -p -f TF271.txt\n</pre>\n<p>Show and plot conservative temperature, salinity and potential density of a cnv file into a pdf:</p>\n<pre>pycnv --plot show,save,CT00,SA00,pot_rho00 ctd_cast.cnv\n</pre>\n<p>Interpolate all CTD casts on station TF0271 onto the same pressure axis and make a netCDF out of it:</p>\n<p>see code pycnv/test/make_netcdf.py</p>\n</div>\n<div id=\"devices-tested\">\n<h2>Devices tested</h2>\n<ul>\n<li>SEACAT V4.0g</li>\n<li>SBE 11plus V 5.1e</li>\n<li>SBE 11plus V 5.1g</li>\n<li>Sea-Bird SBE 9 Software Version 4.206</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6059301, "releases": {"0.3.8": [{"comment_text": "", "digests": {"md5": "7e90704e83370cc55aaa9018422eede0", "sha256": "f7fbb4688ef3510d6e2c51cc13960e3a9e02590c62e258612031de422237f17d"}, "downloads": -1, "filename": "pycnv-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "7e90704e83370cc55aaa9018422eede0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 38485, "upload_time": "2019-10-31T08:13:32", "upload_time_iso_8601": "2019-10-31T08:13:32.449760Z", "url": "https://files.pythonhosted.org/packages/f3/4e/574505977e8c1235930e1e3649f91f85a100e816f6bf8eacee3820efaabe/pycnv-0.3.8-py3-none-any.whl", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "1b2931fdda7a695c0628e909c679bba5", "sha256": "7815beacbba7cdce9a2a5d0bd00558b56538003f189dd526ee931dd06b65bfbb"}, "downloads": -1, "filename": "pycnv-0.3.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b2931fdda7a695c0628e909c679bba5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 40246, "upload_time": "2019-10-31T16:05:16", "upload_time_iso_8601": "2019-10-31T16:05:16.928968Z", "url": "https://files.pythonhosted.org/packages/1e/a6/16bbf5c5092977718e5d272449aea7e7b27771df802edc8e2142d88051f4/pycnv-0.3.9-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1b2931fdda7a695c0628e909c679bba5", "sha256": "7815beacbba7cdce9a2a5d0bd00558b56538003f189dd526ee931dd06b65bfbb"}, "downloads": -1, "filename": "pycnv-0.3.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b2931fdda7a695c0628e909c679bba5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 40246, "upload_time": "2019-10-31T16:05:16", "upload_time_iso_8601": "2019-10-31T16:05:16.928968Z", "url": "https://files.pythonhosted.org/packages/1e/a6/16bbf5c5092977718e5d272449aea7e7b27771df802edc8e2142d88051f4/pycnv-0.3.9-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:08:19 2020"}