{"info": {"author": "Anshuman kumar", "author_email": "anshuman@recvani.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# python-recvani\nThis contains the client side api for use with recvani server. Recvani is collabrative learning platform for any bussiness  where a user and item interact. So client can send score for user interactions and ask for recommendation for user. And all these things in real time.\n\nCheck us out  at https://www.recvani.com\n## Features\n* **Ease to integration:** \n\n &nbsp;&nbsp;&nbsp;&nbsp;Integrating is as simple as integrating a database.\n* **Real time system:** \n\n &nbsp;&nbsp;&nbsp;&nbsp;User interaction are taken care within milliseconds for recommendation\n* **Can Scale very easily:** \n\n &nbsp;&nbsp;&nbsp;&nbsp;It can easily support upto millions of users. \n* **Low on cost:** \n\n &nbsp;&nbsp;&nbsp;&nbsp;Cost for deploying will be much less than your inhouse machine learning cost.\n* **Support categorization:** \n\n &nbsp;&nbsp;&nbsp;&nbsp;Client can easily ask for specific category of item for a user.\n\n\n## Installation\nWe can directly install python client using pip\n\n    pip install recvani\n\n\n## Examples\nClient need model name, client key and model key for connecting to recvani server. You can get these by contacting us.\n\n### Creating connection \n\nSetting up connection is quite easy. \n\n    from recvani.rv_client import rv_client\n    #Don't forget to replace these by the keys you will get.\n    client = rv_client(CLIENT_KEY, MODEL_NAME, MODEL_KEY)\n\n### Sending Interacations\n\n#### Send Single Interaction\n\n    from recvani.rv_requests import simple_interaction\n    import time\n\n    USER = \"USER1\"           # unique id for user\n    ITEM = \"ITEM1\"           # item id (item can be news id, video id, product id etc.)\n    SCORE = 1.0              # score client want to give for interaction. Should be devised intelligently\n    ITIME = int(time.time()) # time for the interaction in seconds\n\n    interaction = simple_interaction(USER, ITEM, SCORE, ITIME)\n\n    result = client.send(interaction)  #result will 1 on sucess otherwise exception will be thrown. Better to catch it.\n\n\n#### Send Batch Interactions\n\n    from recvani.rv_requests import batch_interaction, simple_interaction\n    import time\n\n    bi = []\n    bi.append(simple_interaction(\"USER1\", \"ITEM1\", 0.0, int(time.time())))\n    bi.append(simple_interaction(\"USER2\", \"ITEM1\", 1.0, int(time.time())))\n    bi.append(simple_interaction(\"USER1\", \"ITEM2\", 0.0, int(time.time())))\n\n    bis = batch_interaction(bi)\n\n    result = client.send(bis)\n\n\n### Sending Parameters\n\n\nWe can attach tags and expiry time for every item\n\n#### Send expiry time \n\n    from recvani.rv_requests import exp_request\n    import time\n\n    EXP_TIME = time.time() + 30*24*3600 # The time you want to expire the item. \n    rexp = exp_request(\"ITEM1\", EXP_TIME)\n    result = client.send(rexp)\n\n#### Send tags \n\n    from recvani.rv_requests import tag_request\n    TAGS = [\"TAG1\", \"TAG2\"]\n    trequest = tag_request(\"STORY1\", TAGS)\n    result = client.send(trequest)\n\n#### Send in bulk\n\n     from recvani.rv_requests import batch_param, item_param\n     import time\n\n     param1 = item_param(\"ITEM1\", int(time.time()) + 365*24*3600, [\"TAG1\"])\n     param2 = item_param(\"ITEM2\", None, [\"TAG2\"])\n     param3 = item_param(\"ITEM3\", exp_time = int(time.time()) + 365*24*3600)\n\n     bparam = batch_param([param1, param2, param3])\n\n     result = client.send(bparam)\n\n\n\n### Getting Result\n\nWe can get the final recommendation for the user. We can filter history and send you items for particular tag.\n\n#### Overall Recommendation\n\n    from recvani.rv_requests import rec_request \n\n    USER = \"USER1\"      # USER ID\n    COUNT = 10          # Count of Recommended item to fetch\n    TAGS = []           # Tags of item, Empty for overall \n    HISTORY = rec_request.FULL_HISTORY_FILTER     # Will not serve already serverd item.\n\n    rc = rec_request(USER, COUNT, [], HISTORY)\n    result = client.send(rc) # Result will be list of items\n\n#### Tagged Recommedation\n\n    rc = rec_request(USER, COUNT, [[\"TAG1\"]], HISTORY)\n    result = client.send(rc) # Will give 10 stories with \"TAG1\" attached to it  \n\n#### Complex Queries \n\nTags can be used to make complex queries. For Example \n\n    TAGS = [[\"TAG1\", \"TAG2\"], [\"TAG4\"]]\n\nThe inner lists provide intersection and outer lists provide union. The tags above will return  all time which are either marked \"TAG4\" or have both \"TAG1\" and \"TAG2\"  attached to it.\n\n\nFor any help feel free to contact anshuman@recvani.com\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Recvani/python-recvani", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "recvani", "package_url": "https://pypi.org/project/recvani/", "platform": "", "project_url": "https://pypi.org/project/recvani/", "project_urls": {"Homepage": "https://github.com/Recvani/python-recvani"}, "release_url": "https://pypi.org/project/recvani/0.0.8/", "requires_dist": ["requests"], "requires_python": "", "summary": "The client side python apis for making integration with recvani serveers", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-recvani</h1>\n<p>This contains the client side api for use with recvani server. Recvani is collabrative learning platform for any bussiness  where a user and item interact. So client can send score for user interactions and ask for recommendation for user. And all these things in real time.</p>\n<p>Check us out  at <a href=\"https://www.recvani.com\" rel=\"nofollow\">https://www.recvani.com</a></p>\n<h2>Features</h2>\n<ul>\n<li><strong>Ease to integration:</strong></li>\n</ul>\n<p>\u00a0\u00a0\u00a0\u00a0Integrating is as simple as integrating a database.</p>\n<ul>\n<li><strong>Real time system:</strong></li>\n</ul>\n<p>\u00a0\u00a0\u00a0\u00a0User interaction are taken care within milliseconds for recommendation</p>\n<ul>\n<li><strong>Can Scale very easily:</strong></li>\n</ul>\n<p>\u00a0\u00a0\u00a0\u00a0It can easily support upto millions of users.</p>\n<ul>\n<li><strong>Low on cost:</strong></li>\n</ul>\n<p>\u00a0\u00a0\u00a0\u00a0Cost for deploying will be much less than your inhouse machine learning cost.</p>\n<ul>\n<li><strong>Support categorization:</strong></li>\n</ul>\n<p>\u00a0\u00a0\u00a0\u00a0Client can easily ask for specific category of item for a user.</p>\n<h2>Installation</h2>\n<p>We can directly install python client using pip</p>\n<pre><code>pip install recvani\n</code></pre>\n<h2>Examples</h2>\n<p>Client need model name, client key and model key for connecting to recvani server. You can get these by contacting us.</p>\n<h3>Creating connection</h3>\n<p>Setting up connection is quite easy.</p>\n<pre><code>from recvani.rv_client import rv_client\n#Don't forget to replace these by the keys you will get.\nclient = rv_client(CLIENT_KEY, MODEL_NAME, MODEL_KEY)\n</code></pre>\n<h3>Sending Interacations</h3>\n<h4>Send Single Interaction</h4>\n<pre><code>from recvani.rv_requests import simple_interaction\nimport time\n\nUSER = \"USER1\"           # unique id for user\nITEM = \"ITEM1\"           # item id (item can be news id, video id, product id etc.)\nSCORE = 1.0              # score client want to give for interaction. Should be devised intelligently\nITIME = int(time.time()) # time for the interaction in seconds\n\ninteraction = simple_interaction(USER, ITEM, SCORE, ITIME)\n\nresult = client.send(interaction)  #result will 1 on sucess otherwise exception will be thrown. Better to catch it.\n</code></pre>\n<h4>Send Batch Interactions</h4>\n<pre><code>from recvani.rv_requests import batch_interaction, simple_interaction\nimport time\n\nbi = []\nbi.append(simple_interaction(\"USER1\", \"ITEM1\", 0.0, int(time.time())))\nbi.append(simple_interaction(\"USER2\", \"ITEM1\", 1.0, int(time.time())))\nbi.append(simple_interaction(\"USER1\", \"ITEM2\", 0.0, int(time.time())))\n\nbis = batch_interaction(bi)\n\nresult = client.send(bis)\n</code></pre>\n<h3>Sending Parameters</h3>\n<p>We can attach tags and expiry time for every item</p>\n<h4>Send expiry time</h4>\n<pre><code>from recvani.rv_requests import exp_request\nimport time\n\nEXP_TIME = time.time() + 30*24*3600 # The time you want to expire the item. \nrexp = exp_request(\"ITEM1\", EXP_TIME)\nresult = client.send(rexp)\n</code></pre>\n<h4>Send tags</h4>\n<pre><code>from recvani.rv_requests import tag_request\nTAGS = [\"TAG1\", \"TAG2\"]\ntrequest = tag_request(\"STORY1\", TAGS)\nresult = client.send(trequest)\n</code></pre>\n<h4>Send in bulk</h4>\n<pre><code> from recvani.rv_requests import batch_param, item_param\n import time\n\n param1 = item_param(\"ITEM1\", int(time.time()) + 365*24*3600, [\"TAG1\"])\n param2 = item_param(\"ITEM2\", None, [\"TAG2\"])\n param3 = item_param(\"ITEM3\", exp_time = int(time.time()) + 365*24*3600)\n\n bparam = batch_param([param1, param2, param3])\n\n result = client.send(bparam)\n</code></pre>\n<h3>Getting Result</h3>\n<p>We can get the final recommendation for the user. We can filter history and send you items for particular tag.</p>\n<h4>Overall Recommendation</h4>\n<pre><code>from recvani.rv_requests import rec_request \n\nUSER = \"USER1\"      # USER ID\nCOUNT = 10          # Count of Recommended item to fetch\nTAGS = []           # Tags of item, Empty for overall \nHISTORY = rec_request.FULL_HISTORY_FILTER     # Will not serve already serverd item.\n\nrc = rec_request(USER, COUNT, [], HISTORY)\nresult = client.send(rc) # Result will be list of items\n</code></pre>\n<h4>Tagged Recommedation</h4>\n<pre><code>rc = rec_request(USER, COUNT, [[\"TAG1\"]], HISTORY)\nresult = client.send(rc) # Will give 10 stories with \"TAG1\" attached to it  \n</code></pre>\n<h4>Complex Queries</h4>\n<p>Tags can be used to make complex queries. For Example</p>\n<pre><code>TAGS = [[\"TAG1\", \"TAG2\"], [\"TAG4\"]]\n</code></pre>\n<p>The inner lists provide intersection and outer lists provide union. The tags above will return  all time which are either marked \"TAG4\" or have both \"TAG1\" and \"TAG2\"  attached to it.</p>\n<p>For any help feel free to contact <a href=\"mailto:anshuman@recvani.com\">anshuman@recvani.com</a></p>\n\n          </div>"}, "last_serial": 6635213, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "2d9c0cb33279d19ec9636b0d21594bde", "sha256": "9ad27314c74cd41180f7075880e4e32813dfd4e2115b6483fbd855d9466b9ca2"}, "downloads": -1, "filename": "recvani-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2d9c0cb33279d19ec9636b0d21594bde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6219, "upload_time": "2019-11-23T21:32:01", "upload_time_iso_8601": "2019-11-23T21:32:01.552212Z", "url": "https://files.pythonhosted.org/packages/09/34/01ca9d705b518bc2b9724868087985df1a84b1422322f0f6820d3fc03f1c/recvani-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae73f24c88b7d149fd39d5ec74a947e4", "sha256": "3bca34e18ef3f632e7a5c7dfa188b5500bc9d28771a009ffdf24dfaabc7c8617"}, "downloads": -1, "filename": "recvani-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ae73f24c88b7d149fd39d5ec74a947e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3390, "upload_time": "2019-11-23T21:32:04", "upload_time_iso_8601": "2019-11-23T21:32:04.830848Z", "url": "https://files.pythonhosted.org/packages/a1/ce/2f4674898dc840a92f2ff8f61d0cbba136345f93d7cf2bbabe5c8bbcaf7b/recvani-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "95c900abc197a4df15d0a1ac6c1e683d", "sha256": "a0d123ac6d980fbad031dc8fe973bbdb28d9ae7a36578b397d0bf7f63f44c425"}, "downloads": -1, "filename": "recvani-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "95c900abc197a4df15d0a1ac6c1e683d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6330, "upload_time": "2019-11-30T23:54:26", "upload_time_iso_8601": "2019-11-30T23:54:26.207423Z", "url": "https://files.pythonhosted.org/packages/88/37/262dbd19c0aabaedb87551cdb577b6d8cf39f59e1c792b40bc23b1478861/recvani-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ff1a6eab8ffefa1da769bca3d9507ae", "sha256": "36713c079ac2a579415d58899efefe2a6446b69cf7c95c055ac6c37d15a37be3"}, "downloads": -1, "filename": "recvani-0.0.5.tar.gz", "has_sig": false, "md5_digest": "9ff1a6eab8ffefa1da769bca3d9507ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3518, "upload_time": "2019-11-30T23:54:27", "upload_time_iso_8601": "2019-11-30T23:54:27.773338Z", "url": "https://files.pythonhosted.org/packages/69/22/1d72e1b2ed34d4c872a64fbda6c42e3782ad007e40bde8e9b69239314a0c/recvani-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "78e582b795a672ba45d17e90c8abb3b4", "sha256": "9daccd0c594b77d97fd4bd267a38212cce2b0869ae9236e7e86fd9637b5ffd45"}, "downloads": -1, "filename": "recvani-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "78e582b795a672ba45d17e90c8abb3b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7902, "upload_time": "2019-12-02T19:14:43", "upload_time_iso_8601": "2019-12-02T19:14:43.377526Z", "url": "https://files.pythonhosted.org/packages/bf/b0/57c3c23868c039244da32401eff13f3ff050d50c9c9e8736731f1c5011e2/recvani-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e04fa037c6f07de73110ae3a31068b43", "sha256": "582456f4b96946a7675f6f3cf33d82f95de1655b1fdc90a73cda01271a2d7c71"}, "downloads": -1, "filename": "recvani-0.0.6.tar.gz", "has_sig": false, "md5_digest": "e04fa037c6f07de73110ae3a31068b43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6105, "upload_time": "2019-12-02T19:14:45", "upload_time_iso_8601": "2019-12-02T19:14:45.424954Z", "url": "https://files.pythonhosted.org/packages/52/fe/5c0c9dac699ebede1c199730f15bab858d610065355d3be4373abfc6aab3/recvani-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "99a3dc6c09464b6e63819542f8b36c29", "sha256": "df0cf8a38c3b8ba9e1b710e5a19058ce89920f6dfabd4be1b1f6887698cce12e"}, "downloads": -1, "filename": "recvani-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "99a3dc6c09464b6e63819542f8b36c29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7964, "upload_time": "2020-01-27T12:31:12", "upload_time_iso_8601": "2020-01-27T12:31:12.737562Z", "url": "https://files.pythonhosted.org/packages/2e/7f/cdb09eb2a88ab857b9c6da18729792676df1744ff2db5a96455f6170bb9d/recvani-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4a34e802f02f9c93d71a569f1c7d1a3", "sha256": "024987e1ad9231515a9a859f1f920f4152838e48162ea1e88720314ef184dbc8"}, "downloads": -1, "filename": "recvani-0.0.7.tar.gz", "has_sig": false, "md5_digest": "f4a34e802f02f9c93d71a569f1c7d1a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6154, "upload_time": "2020-01-27T12:31:14", "upload_time_iso_8601": "2020-01-27T12:31:14.838787Z", "url": "https://files.pythonhosted.org/packages/d7/95/3dc57016712bb16e6a12f57b1bc95b73bf9db0f71006b2f91818801195cd/recvani-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "b517250157e898783ccbea37de577c82", "sha256": "1a5dbf7a86dbc7c8865329c96cb16569f23bde6d7ff60eac12e9d0851fd0e792"}, "downloads": -1, "filename": "recvani-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b517250157e898783ccbea37de577c82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8048, "upload_time": "2020-02-15T04:53:42", "upload_time_iso_8601": "2020-02-15T04:53:42.739514Z", "url": "https://files.pythonhosted.org/packages/7c/62/f2b84427c1fbe4aca7c6a8c3c67f5d3899aed1469a69c1c730b7ca4e5c07/recvani-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b127c95ddd85181eba60662c825c2b79", "sha256": "63456481136b204ec08fab64bd739e853b54523dd4dab4b4b24546e211399482"}, "downloads": -1, "filename": "recvani-0.0.8.tar.gz", "has_sig": false, "md5_digest": "b127c95ddd85181eba60662c825c2b79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6248, "upload_time": "2020-02-15T04:53:44", "upload_time_iso_8601": "2020-02-15T04:53:44.607728Z", "url": "https://files.pythonhosted.org/packages/82/a0/c2ec2ec457c1ef268cfc5c5b031f3ac128bccecd59b9ef34daaec6fce990/recvani-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b517250157e898783ccbea37de577c82", "sha256": "1a5dbf7a86dbc7c8865329c96cb16569f23bde6d7ff60eac12e9d0851fd0e792"}, "downloads": -1, "filename": "recvani-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b517250157e898783ccbea37de577c82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8048, "upload_time": "2020-02-15T04:53:42", "upload_time_iso_8601": "2020-02-15T04:53:42.739514Z", "url": "https://files.pythonhosted.org/packages/7c/62/f2b84427c1fbe4aca7c6a8c3c67f5d3899aed1469a69c1c730b7ca4e5c07/recvani-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b127c95ddd85181eba60662c825c2b79", "sha256": "63456481136b204ec08fab64bd739e853b54523dd4dab4b4b24546e211399482"}, "downloads": -1, "filename": "recvani-0.0.8.tar.gz", "has_sig": false, "md5_digest": "b127c95ddd85181eba60662c825c2b79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6248, "upload_time": "2020-02-15T04:53:44", "upload_time_iso_8601": "2020-02-15T04:53:44.607728Z", "url": "https://files.pythonhosted.org/packages/82/a0/c2ec2ec457c1ef268cfc5c5b031f3ac128bccecd59b9ef34daaec6fce990/recvani-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:02 2020"}