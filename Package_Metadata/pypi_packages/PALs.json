{"info": {"author": "Randy Syring", "author_email": "randy.syring@level12.io", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": ".. default-role:: code\n\nPostgreSQL Advisory Locks (PALs)\n################################\n\n.. image:: https://circleci.com/gh/level12/pals.svg?style=shield\n    :target: https://circleci.com/gh/level12/pals\n.. image:: https://codecov.io/gh/level12/pals/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/level12/pals\n\n\nIntroduction\n============\n\nPALs makes it easy to use `PostgreSQL Advisory Locks`_ to do distributed application level\nlocking.\n\nDo not confuse this type of locking with table or row locking in PostgreSQL.  It's not the same\nthing.\n\nDistributed application level locking can be implemented by using Redis, Memcache, ZeroMQ and\nothers.  But for those who are already using PostgreSQL, setup & management of another service is\nunnecessary.\n\n.. _PostgreSQL Advisory Locks: https://www.postgresql.org/docs/current/static/explicit-locking.html\n\n\nUsage\n========\n\n.. code:: python\n\n    import datetime as dt\n    import pals\n\n    # Think of the Locker instance as a Lock factory.\n    locker = pals.Locker('my-app-name', 'postgresql://user:pass@server/dbname')\n\n    lock1 = locker.lock('my-lock')\n    lock2 = locker.lock('my-lock')\n\n    # The first acquire works\n    assert lock1.acquire() is True\n\n    # Non blocking version should fail immediately\n    assert lock2.acquire(blocking=False) is False\n\n    # Blocking version should fail after a short time\n    start = dt.datetime.now()\n    acquired = lock2.acquire(acquire_timeout=300)\n    waited_ms = duration(start)\n\n    assert acquired is False\n    assert waited_ms >= 300 and waited_ms < 350\n\n    # Release the lock\n    lock1.release()\n\n    # Non-blocking usage pattern\n    if not lock1.acquire(blocking=False):\n        # Aquire returned False, indicating we did not get the lock.\n        return\n    try:\n        # do your work here\n    finally:\n        lock1.release()\n\n    # If you want to block, you can use a context manager:\n    try:\n        with lock1:\n            # Do your work here\n            pass\n    except pals.AcquireFailure:\n        # This indicates the aquire_timeout was reached before the lock could be aquired.\n        pass\n\n\nRunning Tests Locally\n=====================\n\nSetup Database Connection\n-------------------------\n\nWe have provided a docker-compose file to ease running the tests:\n\n    $ docker-compose up -d\n    $ export PALS_DB_URL=postgresql://postgres:password@localhost:54321/postgres\n\nRun the Tests\n-------------\n\nWith tox::\n\n    $ tox\n\nOr, manually (assuming an activated virtualenv)::\n\n    $ pip install -r requirements/dev.txt\n    $ pip install -e .\n    $ pytest pals/tests/\n\n\nLock Releasing & Expiration\n---------------------------\n\nUnlike locking systems built on cache services like Memcache and Redis, whose keys can be expired\nby the service, there is no faculty for expiring an advisory lock in PostgreSQL.  If a client\nholds a lock and then sleeps/hangs for mins/hours/days, no other client will be able to get that\nlock until the client releases it.  This actually seems like a good thing to us, if a lock is\nacquired, it should be kept until released.\n\nBut what about accidental failures to release the lock?\n\n1. If a developer uses `lock.acquire()` but doesn't later call `lock.release()`?\n2. If code inside a lock accidentally throws an exception (and .release() is not called)?\n3. If the process running the application crashes or the process' server dies?\n\nPALs helps #1 and #2 above in a few different ways:\n\n* Locks work as context managers.  Use them as much as possible to guarantee a lock is released.\n* Locks release their lock when garbage collected.\n* PALs uses a dedicated SQLAlchemy connection pool.  When a connection is returned to the pool,\n  either because a connection `.close()` is called or due to garbage collection of the connection,\n  PALs issues a `pg_advisory_unlock_all()`.  It should therefore be impossible for an idle\n  connection in the pool to ever still be holding a lock.\n\nRegarding #3 above, `pg_advisory_unlock_all()` is implicitly invoked by PostgreSQL whenever a\nconnection (a.k.a session) ends, even if the client disconnects ungracefully.  So if a process\ncrashes or otherwise disappears, PostgreSQL should notice and remove all locks held by that\nconnection/session.\n\nThe possibility could exist that PostgreSQL does not detect a connection has closed and keeps\na lock open indefinitely.  However, in manual testing using `scripts/hang.py` no way was found\nto end the Python process without PostgreSQL detecting it.\n\n\nSee Also\n==========\n\n* https://vladmihalcea.com/how-do-postgresql-advisory-locks-work/\n* https://github.com/binded/advisory-lock\n* https://github.com/vaidik/sherlock\n* https://github.com/Xof/django-pglocks\n\n\n\nChangelog\n=========\n\n0.3.0 released 2019-11-13\n-------------------------\n\nEnhancements\n~~~~~~~~~~~~\n\n- Add acquire timeout and blocking defaults at Locker level (681c3ba_)\n- Adjust default lock timeout from 1s to 30s (5a0963b_)\n\nProject Cleanup\n~~~~~~~~~~~~~~~\n\n- adjust flake8 ignore and other tox project warning (ee123fc_)\n- fix comment in test (0d8eb98_)\n- Additional readme updates (0786766_)\n- update locked dependencies (f5743a6_)\n- Remove Python 3.5 from CI (b63c71a_)\n- Cleaned up the readme code example a bit and added more references (dabb497_)\n- Update setup.py to use SPDX license identifier (b811a99_)\n- remove Pipefiles (0637f39_)\n- move to using piptools for dependency management (af2e91f_)\n\n.. _ee123fc: https://github.com/level12/pals/commit/ee123fc\n.. _681c3ba: https://github.com/level12/pals/commit/681c3ba\n.. _5a0963b: https://github.com/level12/pals/commit/5a0963b\n.. _0d8eb98: https://github.com/level12/pals/commit/0d8eb98\n.. _0786766: https://github.com/level12/pals/commit/0786766\n.. _f5743a6: https://github.com/level12/pals/commit/f5743a6\n.. _b63c71a: https://github.com/level12/pals/commit/b63c71a\n.. _dabb497: https://github.com/level12/pals/commit/dabb497\n.. _b811a99: https://github.com/level12/pals/commit/b811a99\n.. _0637f39: https://github.com/level12/pals/commit/0637f39\n.. _af2e91f: https://github.com/level12/pals/commit/af2e91f\n\n\n0.2.0 released 2019-03-07\n-------------------------\n\n- Fix misspelling of \"acquire\" (737763f_)\n\n.. _737763f: https://github.com/level12/pals/commit/737763f\n\n\n0.1.0 released 2019-02-22\n-------------------------\n\n- Use `lock_timeout` setting to expire blocking calls (d0216ce_)\n- fix tox (1b0ffe2_)\n- rename to PALs (95d5a3c_)\n- improve readme (e8dd6f2_)\n- move tests file to better location (a153af5_)\n- add flake8 dep (3909c95_)\n- fix tests so they work locally too (7102294_)\n- get circleci working (28f16d2_)\n- suppress exceptions in Lock __del__ (e29c1ce_)\n- Add hang.py script (3372ef0_)\n- fix packaging stuff, update readme (cebd976_)\n- initial commit (871b877_)\n\n.. _d0216ce: https://github.com/level12/pals/commit/d0216ce\n.. _1b0ffe2: https://github.com/level12/pals/commit/1b0ffe2\n.. _95d5a3c: https://github.com/level12/pals/commit/95d5a3c\n.. _e8dd6f2: https://github.com/level12/pals/commit/e8dd6f2\n.. _a153af5: https://github.com/level12/pals/commit/a153af5\n.. _3909c95: https://github.com/level12/pals/commit/3909c95\n.. _7102294: https://github.com/level12/pals/commit/7102294\n.. _28f16d2: https://github.com/level12/pals/commit/28f16d2\n.. _e29c1ce: https://github.com/level12/pals/commit/e29c1ce\n.. _3372ef0: https://github.com/level12/pals/commit/3372ef0\n.. _cebd976: https://github.com/level12/pals/commit/cebd976\n.. _871b877: https://github.com/level12/pals/commit/871b877\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/level12/pals", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "PALs", "package_url": "https://pypi.org/project/PALs/", "platform": "", "project_url": "https://pypi.org/project/PALs/", "project_urls": {"Homepage": "https://github.com/level12/pals"}, "release_url": "https://pypi.org/project/PALs/0.3.0/", "requires_dist": ["sqlalchemy"], "requires_python": "", "summary": "Easy distributed locking using PostgreSQL Advisory Locks.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://circleci.com/gh/level12/pals\" rel=\"nofollow\"><img alt=\"https://circleci.com/gh/level12/pals.svg?style=shield\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9cdf1c46365965033520fbce15cc2f753c8389b6/68747470733a2f2f636972636c6563692e636f6d2f67682f6c6576656c31322f70616c732e7376673f7374796c653d736869656c64\"></a>\n<a href=\"https://codecov.io/gh/level12/pals\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/level12/pals/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a715a8f95e003cb74eaab7141347d27b140a4433/68747470733a2f2f636f6465636f762e696f2f67682f6c6576656c31322f70616c732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>PALs makes it easy to use <a href=\"https://www.postgresql.org/docs/current/static/explicit-locking.html\" rel=\"nofollow\">PostgreSQL Advisory Locks</a> to do distributed application level\nlocking.</p>\n<p>Do not confuse this type of locking with table or row locking in PostgreSQL.  It\u2019s not the same\nthing.</p>\n<p>Distributed application level locking can be implemented by using Redis, Memcache, ZeroMQ and\nothers.  But for those who are already using PostgreSQL, setup &amp; management of another service is\nunnecessary.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pals</span>\n\n<span class=\"c1\"># Think of the Locker instance as a Lock factory.</span>\n<span class=\"n\">locker</span> <span class=\"o\">=</span> <span class=\"n\">pals</span><span class=\"o\">.</span><span class=\"n\">Locker</span><span class=\"p\">(</span><span class=\"s1\">'my-app-name'</span><span class=\"p\">,</span> <span class=\"s1\">'postgresql://user:pass@server/dbname'</span><span class=\"p\">)</span>\n\n<span class=\"n\">lock1</span> <span class=\"o\">=</span> <span class=\"n\">locker</span><span class=\"o\">.</span><span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"s1\">'my-lock'</span><span class=\"p\">)</span>\n<span class=\"n\">lock2</span> <span class=\"o\">=</span> <span class=\"n\">locker</span><span class=\"o\">.</span><span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"s1\">'my-lock'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The first acquire works</span>\n<span class=\"k\">assert</span> <span class=\"n\">lock1</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Non blocking version should fail immediately</span>\n<span class=\"k\">assert</span> <span class=\"n\">lock2</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">(</span><span class=\"n\">blocking</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Blocking version should fail after a short time</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n<span class=\"n\">acquired</span> <span class=\"o\">=</span> <span class=\"n\">lock2</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">(</span><span class=\"n\">acquire_timeout</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">waited_ms</span> <span class=\"o\">=</span> <span class=\"n\">duration</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">acquired</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n<span class=\"k\">assert</span> <span class=\"n\">waited_ms</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">300</span> <span class=\"ow\">and</span> <span class=\"n\">waited_ms</span> <span class=\"o\">&lt;</span> <span class=\"mi\">350</span>\n\n<span class=\"c1\"># Release the lock</span>\n<span class=\"n\">lock1</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Non-blocking usage pattern</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">lock1</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">(</span><span class=\"n\">blocking</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Aquire returned False, indicating we did not get the lock.</span>\n    <span class=\"k\">return</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do your work here</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">lock1</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># If you want to block, you can use a context manager:</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">lock1</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Do your work here</span>\n        <span class=\"k\">pass</span>\n<span class=\"k\">except</span> <span class=\"n\">pals</span><span class=\"o\">.</span><span class=\"n\">AcquireFailure</span><span class=\"p\">:</span>\n    <span class=\"c1\"># This indicates the aquire_timeout was reached before the lock could be aquired.</span>\n    <span class=\"k\">pass</span>\n</pre>\n</div>\n<div id=\"running-tests-locally\">\n<h2>Running Tests Locally</h2>\n<div id=\"setup-database-connection\">\n<h3>Setup Database Connection</h3>\n<p>We have provided a docker-compose file to ease running the tests:</p>\n<blockquote>\n$ docker-compose up -d\n$ export PALS_DB_URL=postgresql://postgres:password@localhost:54321/postgres</blockquote>\n</div>\n<div id=\"run-the-tests\">\n<h3>Run the Tests</h3>\n<p>With tox:</p>\n<pre>$ tox\n</pre>\n<p>Or, manually (assuming an activated virtualenv):</p>\n<pre>$ pip install -r requirements/dev.txt\n$ pip install -e .\n$ pytest pals/tests/\n</pre>\n</div>\n<div id=\"lock-releasing-expiration\">\n<h3>Lock Releasing &amp; Expiration</h3>\n<p>Unlike locking systems built on cache services like Memcache and Redis, whose keys can be expired\nby the service, there is no faculty for expiring an advisory lock in PostgreSQL.  If a client\nholds a lock and then sleeps/hangs for mins/hours/days, no other client will be able to get that\nlock until the client releases it.  This actually seems like a good thing to us, if a lock is\nacquired, it should be kept until released.</p>\n<p>But what about accidental failures to release the lock?</p>\n<ol>\n<li>If a developer uses <code>lock.acquire()</code> but doesn\u2019t later call <code>lock.release()</code>?</li>\n<li>If code inside a lock accidentally throws an exception (and .release() is not called)?</li>\n<li>If the process running the application crashes or the process\u2019 server dies?</li>\n</ol>\n<p>PALs helps #1 and #2 above in a few different ways:</p>\n<ul>\n<li>Locks work as context managers.  Use them as much as possible to guarantee a lock is released.</li>\n<li>Locks release their lock when garbage collected.</li>\n<li>PALs uses a dedicated SQLAlchemy connection pool.  When a connection is returned to the pool,\neither because a connection <code>.close()</code> is called or due to garbage collection of the connection,\nPALs issues a <code>pg_advisory_unlock_all()</code>.  It should therefore be impossible for an idle\nconnection in the pool to ever still be holding a lock.</li>\n</ul>\n<p>Regarding #3 above, <code>pg_advisory_unlock_all()</code> is implicitly invoked by PostgreSQL whenever a\nconnection (a.k.a session) ends, even if the client disconnects ungracefully.  So if a process\ncrashes or otherwise disappears, PostgreSQL should notice and remove all locks held by that\nconnection/session.</p>\n<p>The possibility could exist that PostgreSQL does not detect a connection has closed and keeps\na lock open indefinitely.  However, in manual testing using <code>scripts/hang.py</code> no way was found\nto end the Python process without PostgreSQL detecting it.</p>\n</div>\n</div>\n<div id=\"see-also\">\n<h2>See Also</h2>\n<ul>\n<li><a href=\"https://vladmihalcea.com/how-do-postgresql-advisory-locks-work/\" rel=\"nofollow\">https://vladmihalcea.com/how-do-postgresql-advisory-locks-work/</a></li>\n<li><a href=\"https://github.com/binded/advisory-lock\" rel=\"nofollow\">https://github.com/binded/advisory-lock</a></li>\n<li><a href=\"https://github.com/vaidik/sherlock\" rel=\"nofollow\">https://github.com/vaidik/sherlock</a></li>\n<li><a href=\"https://github.com/Xof/django-pglocks\" rel=\"nofollow\">https://github.com/Xof/django-pglocks</a></li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"released-2019-11-13\">\n<h3>0.3.0 released 2019-11-13</h3>\n<div id=\"enhancements\">\n<h4>Enhancements</h4>\n<ul>\n<li>Add acquire timeout and blocking defaults at Locker level (<a href=\"https://github.com/level12/pals/commit/681c3ba\" rel=\"nofollow\">681c3ba</a>)</li>\n<li>Adjust default lock timeout from 1s to 30s (<a href=\"https://github.com/level12/pals/commit/5a0963b\" rel=\"nofollow\">5a0963b</a>)</li>\n</ul>\n</div>\n<div id=\"project-cleanup\">\n<h4>Project Cleanup</h4>\n<ul>\n<li>adjust flake8 ignore and other tox project warning (<a href=\"https://github.com/level12/pals/commit/ee123fc\" rel=\"nofollow\">ee123fc</a>)</li>\n<li>fix comment in test (<a href=\"https://github.com/level12/pals/commit/0d8eb98\" rel=\"nofollow\">0d8eb98</a>)</li>\n<li>Additional readme updates (<a href=\"https://github.com/level12/pals/commit/0786766\" rel=\"nofollow\">0786766</a>)</li>\n<li>update locked dependencies (<a href=\"https://github.com/level12/pals/commit/f5743a6\" rel=\"nofollow\">f5743a6</a>)</li>\n<li>Remove Python 3.5 from CI (<a href=\"https://github.com/level12/pals/commit/b63c71a\" rel=\"nofollow\">b63c71a</a>)</li>\n<li>Cleaned up the readme code example a bit and added more references (<a href=\"https://github.com/level12/pals/commit/dabb497\" rel=\"nofollow\">dabb497</a>)</li>\n<li>Update setup.py to use SPDX license identifier (<a href=\"https://github.com/level12/pals/commit/b811a99\" rel=\"nofollow\">b811a99</a>)</li>\n<li>remove Pipefiles (<a href=\"https://github.com/level12/pals/commit/0637f39\" rel=\"nofollow\">0637f39</a>)</li>\n<li>move to using piptools for dependency management (<a href=\"https://github.com/level12/pals/commit/af2e91f\" rel=\"nofollow\">af2e91f</a>)</li>\n</ul>\n</div>\n</div>\n<div id=\"released-2019-03-07\">\n<h3>0.2.0 released 2019-03-07</h3>\n<ul>\n<li>Fix misspelling of \u201cacquire\u201d (<a href=\"https://github.com/level12/pals/commit/737763f\" rel=\"nofollow\">737763f</a>)</li>\n</ul>\n</div>\n<div id=\"released-2019-02-22\">\n<h3>0.1.0 released 2019-02-22</h3>\n<ul>\n<li>Use <code>lock_timeout</code> setting to expire blocking calls (<a href=\"https://github.com/level12/pals/commit/d0216ce\" rel=\"nofollow\">d0216ce</a>)</li>\n<li>fix tox (<a href=\"https://github.com/level12/pals/commit/1b0ffe2\" rel=\"nofollow\">1b0ffe2</a>)</li>\n<li>rename to PALs (<a href=\"https://github.com/level12/pals/commit/95d5a3c\" rel=\"nofollow\">95d5a3c</a>)</li>\n<li>improve readme (<a href=\"https://github.com/level12/pals/commit/e8dd6f2\" rel=\"nofollow\">e8dd6f2</a>)</li>\n<li>move tests file to better location (<a href=\"https://github.com/level12/pals/commit/a153af5\" rel=\"nofollow\">a153af5</a>)</li>\n<li>add flake8 dep (<a href=\"https://github.com/level12/pals/commit/3909c95\" rel=\"nofollow\">3909c95</a>)</li>\n<li>fix tests so they work locally too (<a href=\"https://github.com/level12/pals/commit/7102294\" rel=\"nofollow\">7102294</a>)</li>\n<li>get circleci working (<a href=\"https://github.com/level12/pals/commit/28f16d2\" rel=\"nofollow\">28f16d2</a>)</li>\n<li>suppress exceptions in Lock __del__ (<a href=\"https://github.com/level12/pals/commit/e29c1ce\" rel=\"nofollow\">e29c1ce</a>)</li>\n<li>Add hang.py script (<a href=\"https://github.com/level12/pals/commit/3372ef0\" rel=\"nofollow\">3372ef0</a>)</li>\n<li>fix packaging stuff, update readme (<a href=\"https://github.com/level12/pals/commit/cebd976\" rel=\"nofollow\">cebd976</a>)</li>\n<li>initial commit (<a href=\"https://github.com/level12/pals/commit/871b877\" rel=\"nofollow\">871b877</a>)</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6144260, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "cf02854625bba2a569ff21950b3a13a5", "sha256": "44ce46c89493ed7a24028404c582f858d64b9600a2486f7ce32c567ef3eb2c70"}, "downloads": -1, "filename": "PALs-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cf02854625bba2a569ff21950b3a13a5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7444, "upload_time": "2019-02-23T02:20:02", "upload_time_iso_8601": "2019-02-23T02:20:02.879815Z", "url": "https://files.pythonhosted.org/packages/22/fe/453fd22dbe1d007b264a78c6d6b53a38804636001b7a133b6af7d6763804/PALs-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b4c8e4982d5e34c87e515212bfeba06", "sha256": "a58e858cef53fe73af75ad1d35638cebf2eaa0b049da48eee53a187ae387a39e"}, "downloads": -1, "filename": "PALs-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1b4c8e4982d5e34c87e515212bfeba06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18458, "upload_time": "2019-02-23T02:20:05", "upload_time_iso_8601": "2019-02-23T02:20:05.951658Z", "url": "https://files.pythonhosted.org/packages/11/86/305fdc9a467e934b8ed8d4801ac284d84249e4e74a9e93ae6dae5b2bf25f/PALs-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5a6a88454f00d8cb9566458d26c455db", "sha256": "af354f8f591dd5dad6afef4d84de78b9b285376f211474c85411cce3fd2e2568"}, "downloads": -1, "filename": "PALs-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5a6a88454f00d8cb9566458d26c455db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7495, "upload_time": "2019-03-07T21:42:33", "upload_time_iso_8601": "2019-03-07T21:42:33.807599Z", "url": "https://files.pythonhosted.org/packages/cc/28/e79f5de89d0187dab9aa2c1fece0b7a89f79f1f145ffb16a249ca0b9fcf7/PALs-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e568ca87ce3d845be9baad0ad5c42b0b", "sha256": "7382180c632665fe02b1a773467547116fc172dfa3e1236503bab60e447c6000"}, "downloads": -1, "filename": "PALs-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e568ca87ce3d845be9baad0ad5c42b0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18538, "upload_time": "2019-03-07T21:42:35", "upload_time_iso_8601": "2019-03-07T21:42:35.131865Z", "url": "https://files.pythonhosted.org/packages/6b/c3/1e2243e4752f1334e240d0ee5458591b534219f43398d5586f421d6fc1d5/PALs-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5a538cfda0af1e9684c29241a9d9c8e9", "sha256": "3ab67fc9589e568a671471590e08234c258b128de8c33e9e676f76f4326cf727"}, "downloads": -1, "filename": "PALs-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5a538cfda0af1e9684c29241a9d9c8e9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7938, "upload_time": "2019-11-14T00:40:22", "upload_time_iso_8601": "2019-11-14T00:40:22.849147Z", "url": "https://files.pythonhosted.org/packages/7b/1b/89ed99f799f95a6f6144951b2fe381717de26fc259a4ee179b661acd28cf/PALs-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc9edccd353ff2bdcee5ecb2a906731b", "sha256": "eb4df5d8d27bfe953c0e80de27067f18f3d2d33b54c1bdad5e04f1d265535d01"}, "downloads": -1, "filename": "PALs-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bc9edccd353ff2bdcee5ecb2a906731b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13199, "upload_time": "2019-11-14T00:40:24", "upload_time_iso_8601": "2019-11-14T00:40:24.554479Z", "url": "https://files.pythonhosted.org/packages/e1/20/88929ceadeaa902bedfe3060ae76a4ae9e284b643cf6fa2f0fc11d093a62/PALs-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5a538cfda0af1e9684c29241a9d9c8e9", "sha256": "3ab67fc9589e568a671471590e08234c258b128de8c33e9e676f76f4326cf727"}, "downloads": -1, "filename": "PALs-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5a538cfda0af1e9684c29241a9d9c8e9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7938, "upload_time": "2019-11-14T00:40:22", "upload_time_iso_8601": "2019-11-14T00:40:22.849147Z", "url": "https://files.pythonhosted.org/packages/7b/1b/89ed99f799f95a6f6144951b2fe381717de26fc259a4ee179b661acd28cf/PALs-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc9edccd353ff2bdcee5ecb2a906731b", "sha256": "eb4df5d8d27bfe953c0e80de27067f18f3d2d33b54c1bdad5e04f1d265535d01"}, "downloads": -1, "filename": "PALs-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bc9edccd353ff2bdcee5ecb2a906731b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13199, "upload_time": "2019-11-14T00:40:24", "upload_time_iso_8601": "2019-11-14T00:40:24.554479Z", "url": "https://files.pythonhosted.org/packages/e1/20/88929ceadeaa902bedfe3060ae76a4ae9e284b643cf6fa2f0fc11d093a62/PALs-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:43 2020"}