{"info": {"author": "@Robpol86", "author_email": "robpol86@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: MacOS X", "Environment :: Win32 (MS Windows)", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries", "Topic :: Terminals", "Topic :: Text Processing :: Markup"], "description": "==========\ncolorclass\n==========\n\nYet another ANSI color text library for Python. Provides \"auto colors\" for dark/light terminals. Works on Linux, OS X,\nand Windows. For Windows support you just need to call ``Windows.enable()`` in your application.\n\nOn Linux/OS X ``autocolors`` are toggled by calling ``set_light_background()`` and ``set_dark_background()``. On Windows\nthis can be done automatically if you call ``Windows.enable(auto_colors=True)``. Even though the latest Windows 10 does\nsupport ANSI color codes natively, you still need to run Windows.enable() to take advantage of automatically detecting\nthe console's background color.\n\nIn Python2.x this library subclasses ``unicode``, while on Python3.x it subclasses ``str``.\n\n* Python 2.6, 2.7, PyPy, PyPy3, 3.3, 3.4, and 3.5 supported on Linux and OS X.\n* Python 2.6, 2.7, 3.3, 3.4, and 3.5 supported on Windows (both 32 and 64 bit versions of Python).\n\n.. image:: https://img.shields.io/appveyor/ci/Robpol86/colorclass/master.svg?style=flat-square&label=AppVeyor%20CI\n    :target: https://ci.appveyor.com/project/Robpol86/colorclass\n    :alt: Build Status Windows\n\n.. image:: https://img.shields.io/travis/Robpol86/colorclass/master.svg?style=flat-square&label=Travis%20CI\n    :target: https://travis-ci.org/Robpol86/colorclass\n    :alt: Build Status\n\n.. image:: https://img.shields.io/coveralls/Robpol86/colorclass/master.svg?style=flat-square&label=Coveralls\n    :target: https://coveralls.io/github/Robpol86/colorclass\n    :alt: Coverage Status\n\n.. image:: https://img.shields.io/pypi/v/colorclass.svg?style=flat-square&label=Latest\n    :target: https://pypi.python.org/pypi/colorclass\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/dm/colorclass.svg?style=flat-square&label=PyPI%20Downloads\n    :target: https://pypi.python.org/pypi/colorclass\n    :alt: Downloads\n\nQuickstart\n==========\n\nInstall:\n\n.. code:: bash\n\n    pip install colorclass\n\nPiped Command Line\n==================\n\nIt is possible to pipe curly-bracket tagged (or regular ANSI coded) text to Python in the command line to produce color\ntext. Some examples:\n\n.. code:: bash\n\n    echo \"{red}Red{/red}\" |python -m colorclass  # Red colored text.\n    echo -e \"\\033[31mRed\\033[0m\" | COLOR_DISABLE=true python -m colorclass  # Strip colors\n    echo -e \"\\033[31mRed\\033[0m\" | COLOR_ENABLE=true python -m colorclass &> file.txt  # Force colors.\n\nExport these environment variables as \"true\" to enable/disable some features:\n\n=============== ============================================\nEnv Variable    Description\n=============== ============================================\nCOLOR_ENABLE    Force colors even when piping to a file.\nCOLOR_DISABLE   Strip all colors from incoming text.\nCOLOR_LIGHT     Use light colored text for dark backgrounds.\nCOLOR_DARK      Use dark colored text for light backgrounds.\n=============== ============================================\n\nExample Implementation\n======================\n\n.. image:: https://github.com/Robpol86/colorclass/raw/master/example.png?raw=true\n   :alt: Example Script Screenshot\n\n.. image:: https://github.com/Robpol86/colorclass/raw/master/example_windows.png?raw=true\n   :alt: Example Windows Screenshot\n\nSource code for the example code is: `example.py <https://github.com/Robpol86/colorclass/blob/master/example.py>`_\n\nUsage\n=====\n\nDifferent colors are chosen using curly-bracket tags, such as ``{red}{/red}``. For a list of available colors, call\n``colorclass.list_tags()``.\n\nThe available \"auto colors\" tags are:\n\n* autoblack\n* autored\n* autogreen\n* autoyellow\n* autoblue\n* automagenta\n* autocyan\n* autowhite\n* autobgblack\n* autobgred\n* autobggreen\n* autobgyellow\n* autobgblue\n* autobgmagenta\n* autobgcyan\n* autobgwhite\n\nMethods of Class instances try to return sane data, such as:\n\n.. code:: python\n\n    from colorclass import Color\n    color_string = Color('{red}Test{/red}')\n\n    color_string\n    u'\\x1b[31mTest\\x1b[39m'\n\n    len(color_string)\n    4\n\n    color_string.istitle()\n    True\n\nThere are also a couple of helper attributes for all Color instances:\n\n.. code:: python\n\n    color_string.value_colors\n    '\\x1b[31mTest\\x1b[39m'\n\n    color_string.value_no_colors\n    'Test'\n\nChangelog\n=========\n\nThis project adheres to `Semantic Versioning <http://semver.org/>`_.\n\n2.2.0 - 2016-05-14\n------------------\n\nAdded\n    * ``disable_if_no_tty()`` function to conditionally disable colors when STDERR and STDOUT are not streams.\n\nChanged\n    * Colors enabled by default always, like it was before v2.0.0.\n\n2.1.1 - 2016-05-10\n------------------\n\nFixed\n    * Printing box drawing characters on Windows from Python 2.6.\n\n2.1.0 - 2016-05-07\n------------------\n\nAdded\n    * ``keep_tags`` boolean keyword argument to Color(). Prevents colorclass from parsing curly brackets.\n    * Automatically skip replacing stderr/stdout streams on latest Windows 10 versions with native ANSI color support.\n\nChanged\n    * Refactored most of windows.py.\n    * Background color determined from either stderr or stdout, instead of just one stream (e.g. piping stderr to file).\n\nFixed\n    * https://github.com/Robpol86/colorclass/issues/16\n    * https://github.com/Robpol86/colorclass/issues/18\n\n2.0.0 - 2016-04-10\n------------------\n\nAdded\n    * Python 3.5 support.\n    * ``enable_all_colors()``, ``is_enabled()``, and ``is_light()`` toggle functions.\n    * Library can be used as a script (e.g. ``echo \"{red}Red{/red}\" |python -m colorclass``).\n    * Ability to add/multiply Color instances just like str.\n    * Ability to iterate a Color instance and have each character keep its color codes.\n\nChanged\n    * Converted library from Python module to a package.\n    * ``set_light_background()`` and ``set_dark_background()`` no longer enable colors. Use ``enable_all_colors()``.\n    * Colors are disabled by default when STDERR and STDOUT are not streams (piped to files/null). Similar to ``grep``.\n    * Reduce size of ANSI escape sequences by removing codes that have no effect. e.g. ``\\033[31;35m`` to ``\\033[35m``.\n    * Color methods that return strings now return Color instances instead of str instances.\n\nFixed\n    * https://github.com/Robpol86/colorclass/issues/15\n    * https://github.com/Robpol86/colorclass/issues/17\n\n1.2.0 - 2015-03-19\n------------------\n\nAdded\n    * Convenience single-color methods by `Marc Abramowitz <https://github.com/msabramo>`_.\n\n1.1.2 - 2015-01-07\n------------------\n\nFixed\n    * Maintaining ``Color`` type through ``.encode()`` and ``.decode()`` chains.\n\n1.1.1 - 2014-11-03\n------------------\n\nFixed\n    * Python 2.7 64-bit original colors bug on Windows.\n    * resetting colors when ``reset_atexit`` is True.\n    * Improved sorting of ``list_tags()``.\n\n1.1.0 - 2014-11-01\n------------------\n\nAdded\n    * Native Windows support and automatic background colors.\n\n1.0.2 - 2014-10-20\n------------------\n\nAdded\n    * Ability to disable/strip out all colors.\n\n1.0.1 - 2014-09-11\n------------------\n\nFixed\n    * ``splitlines()`` method.\n\n1.0.0 - 2014-09-01\n------------------\n\n* Initial release.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Robpol86/colorclass", "keywords": "Shell Bash ANSI ASCII terminal console colors automatic", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "colorclass", "package_url": "https://pypi.org/project/colorclass/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/colorclass/", "project_urls": {"Homepage": "https://github.com/Robpol86/colorclass"}, "release_url": "https://pypi.org/project/colorclass/2.2.0/", "requires_dist": null, "requires_python": "", "summary": "Colorful worry-free console applications for Linux, Mac OS X, and Windows.", "version": "2.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Yet another ANSI color text library for Python. Provides \u201cauto colors\u201d for dark/light terminals. Works on Linux, OS X,\nand Windows. For Windows support you just need to call <tt>Windows.enable()</tt> in your application.</p>\n<p>On Linux/OS X <tt>autocolors</tt> are toggled by calling <tt>set_light_background()</tt> and <tt>set_dark_background()</tt>. On Windows\nthis can be done automatically if you call <tt>Windows.enable(auto_colors=True)</tt>. Even though the latest Windows 10 does\nsupport ANSI color codes natively, you still need to run Windows.enable() to take advantage of automatically detecting\nthe console\u2019s background color.</p>\n<p>In Python2.x this library subclasses <tt>unicode</tt>, while on Python3.x it subclasses <tt>str</tt>.</p>\n<ul>\n<li>Python 2.6, 2.7, PyPy, PyPy3, 3.3, 3.4, and 3.5 supported on Linux and OS X.</li>\n<li>Python 2.6, 2.7, 3.3, 3.4, and 3.5 supported on Windows (both 32 and 64 bit versions of Python).</li>\n</ul>\n<a href=\"https://ci.appveyor.com/project/Robpol86/colorclass\" rel=\"nofollow\"><img alt=\"Build Status Windows\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0bd311061436e4ea5fcbe58d71a63d6c1a515c4d/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f526f62706f6c38362f636f6c6f72636c6173732f6d61737465722e7376673f7374796c653d666c61742d737175617265266c6162656c3d4170705665796f722532304349\"></a>\n<a href=\"https://travis-ci.org/Robpol86/colorclass\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0671852f6743a71306ba2d35f0ad1a96fcd8c50a/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f526f62706f6c38362f636f6c6f72636c6173732f6d61737465722e7376673f7374796c653d666c61742d737175617265266c6162656c3d5472617669732532304349\"></a>\n<a href=\"https://coveralls.io/github/Robpol86/colorclass\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c790e4296e3ead05da083f770f8bf8d1a2b8730a/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f526f62706f6c38362f636f6c6f72636c6173732f6d61737465722e7376673f7374796c653d666c61742d737175617265266c6162656c3d436f766572616c6c73\"></a>\n<a href=\"https://pypi.python.org/pypi/colorclass\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0cca70076207cc41f75f6e77b77248b854de1c48/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6c6f72636c6173732e7376673f7374796c653d666c61742d737175617265266c6162656c3d4c6174657374\"></a>\n<a href=\"https://pypi.python.org/pypi/colorclass\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b8fe8089738e2232f401d9a582daa1042cabd51/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f636f6c6f72636c6173732e7376673f7374796c653d666c61742d737175617265266c6162656c3d50795049253230446f776e6c6f616473\"></a>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Install:</p>\n<pre>pip install colorclass\n</pre>\n</div>\n<div id=\"piped-command-line\">\n<h2>Piped Command Line</h2>\n<p>It is possible to pipe curly-bracket tagged (or regular ANSI coded) text to Python in the command line to produce color\ntext. Some examples:</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"{red}Red{/red}\"</span> <span class=\"p\">|</span>python -m colorclass  <span class=\"c1\"># Red colored text.\n</span><span class=\"nb\">echo</span> -e <span class=\"s2\">\"\\033[31mRed\\033[0m\"</span> <span class=\"p\">|</span> <span class=\"nv\">COLOR_DISABLE</span><span class=\"o\">=</span><span class=\"nb\">true</span> python -m colorclass  <span class=\"c1\"># Strip colors\n</span><span class=\"nb\">echo</span> -e <span class=\"s2\">\"\\033[31mRed\\033[0m\"</span> <span class=\"p\">|</span> <span class=\"nv\">COLOR_ENABLE</span><span class=\"o\">=</span><span class=\"nb\">true</span> python -m colorclass <span class=\"p\">&amp;</span>&gt; file.txt  <span class=\"c1\"># Force colors.</span>\n</pre>\n<p>Export these environment variables as \u201ctrue\u201d to enable/disable some features:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Env Variable</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>COLOR_ENABLE</td>\n<td>Force colors even when piping to a file.</td>\n</tr>\n<tr><td>COLOR_DISABLE</td>\n<td>Strip all colors from incoming text.</td>\n</tr>\n<tr><td>COLOR_LIGHT</td>\n<td>Use light colored text for dark backgrounds.</td>\n</tr>\n<tr><td>COLOR_DARK</td>\n<td>Use dark colored text for light backgrounds.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"example-implementation\">\n<h2>Example Implementation</h2>\n<img alt=\"Example Script Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/080132eae5cf3e538539f14f05eb0527e759d2d7/68747470733a2f2f6769746875622e636f6d2f526f62706f6c38362f636f6c6f72636c6173732f7261772f6d61737465722f6578616d706c652e706e673f7261773d74727565\">\n<img alt=\"Example Windows Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc9ac45e3d8b55a9b2df5963e33ed2a0859d172b/68747470733a2f2f6769746875622e636f6d2f526f62706f6c38362f636f6c6f72636c6173732f7261772f6d61737465722f6578616d706c655f77696e646f77732e706e673f7261773d74727565\">\n<p>Source code for the example code is: <a href=\"https://github.com/Robpol86/colorclass/blob/master/example.py\" rel=\"nofollow\">example.py</a></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Different colors are chosen using curly-bracket tags, such as <tt><span class=\"pre\">{red}{/red}</span></tt>. For a list of available colors, call\n<tt>colorclass.list_tags()</tt>.</p>\n<p>The available \u201cauto colors\u201d tags are:</p>\n<ul>\n<li>autoblack</li>\n<li>autored</li>\n<li>autogreen</li>\n<li>autoyellow</li>\n<li>autoblue</li>\n<li>automagenta</li>\n<li>autocyan</li>\n<li>autowhite</li>\n<li>autobgblack</li>\n<li>autobgred</li>\n<li>autobggreen</li>\n<li>autobgyellow</li>\n<li>autobgblue</li>\n<li>autobgmagenta</li>\n<li>autobgcyan</li>\n<li>autobgwhite</li>\n</ul>\n<p>Methods of Class instances try to return sane data, such as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">colorclass</span> <span class=\"kn\">import</span> <span class=\"n\">Color</span>\n<span class=\"n\">color_string</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{red}</span><span class=\"s1\">Test{/red}'</span><span class=\"p\">)</span>\n\n<span class=\"n\">color_string</span>\n<span class=\"sa\">u</span><span class=\"s1\">'</span><span class=\"se\">\\x1b</span><span class=\"s1\">[31mTest</span><span class=\"se\">\\x1b</span><span class=\"s1\">[39m'</span>\n\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">color_string</span><span class=\"p\">)</span>\n<span class=\"mi\">4</span>\n\n<span class=\"n\">color_string</span><span class=\"o\">.</span><span class=\"n\">istitle</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>There are also a couple of helper attributes for all Color instances:</p>\n<pre><span class=\"n\">color_string</span><span class=\"o\">.</span><span class=\"n\">value_colors</span>\n<span class=\"s1\">'</span><span class=\"se\">\\x1b</span><span class=\"s1\">[31mTest</span><span class=\"se\">\\x1b</span><span class=\"s1\">[39m'</span>\n\n<span class=\"n\">color_string</span><span class=\"o\">.</span><span class=\"n\">value_no_colors</span>\n<span class=\"s1\">'Test'</span>\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>This project adheres to <a href=\"http://semver.org/\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<div id=\"id1\">\n<h3>2.2.0 - 2016-05-14</h3>\n<dl>\n<dt>Added</dt>\n<dd><ul>\n<li><tt>disable_if_no_tty()</tt> function to conditionally disable colors when STDERR and STDOUT are not streams.</li>\n</ul>\n</dd>\n<dt>Changed</dt>\n<dd><ul>\n<li>Colors enabled by default always, like it was before v2.0.0.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id2\">\n<h3>2.1.1 - 2016-05-10</h3>\n<dl>\n<dt>Fixed</dt>\n<dd><ul>\n<li>Printing box drawing characters on Windows from Python 2.6.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id3\">\n<h3>2.1.0 - 2016-05-07</h3>\n<dl>\n<dt>Added</dt>\n<dd><ul>\n<li><tt>keep_tags</tt> boolean keyword argument to Color(). Prevents colorclass from parsing curly brackets.</li>\n<li>Automatically skip replacing stderr/stdout streams on latest Windows 10 versions with native ANSI color support.</li>\n</ul>\n</dd>\n<dt>Changed</dt>\n<dd><ul>\n<li>Refactored most of windows.py.</li>\n<li>Background color determined from either stderr or stdout, instead of just one stream (e.g. piping stderr to file).</li>\n</ul>\n</dd>\n<dt>Fixed</dt>\n<dd><ul>\n<li><a href=\"https://github.com/Robpol86/colorclass/issues/16\" rel=\"nofollow\">https://github.com/Robpol86/colorclass/issues/16</a></li>\n<li><a href=\"https://github.com/Robpol86/colorclass/issues/18\" rel=\"nofollow\">https://github.com/Robpol86/colorclass/issues/18</a></li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id4\">\n<h3>2.0.0 - 2016-04-10</h3>\n<dl>\n<dt>Added</dt>\n<dd><ul>\n<li>Python 3.5 support.</li>\n<li><tt>enable_all_colors()</tt>, <tt>is_enabled()</tt>, and <tt>is_light()</tt> toggle functions.</li>\n<li>Library can be used as a script (e.g. <tt>echo <span class=\"pre\">\"{red}Red{/red}\"</span> |python <span class=\"pre\">-m</span> colorclass</tt>).</li>\n<li>Ability to add/multiply Color instances just like str.</li>\n<li>Ability to iterate a Color instance and have each character keep its color codes.</li>\n</ul>\n</dd>\n<dt>Changed</dt>\n<dd><ul>\n<li>Converted library from Python module to a package.</li>\n<li><tt>set_light_background()</tt> and <tt>set_dark_background()</tt> no longer enable colors. Use <tt>enable_all_colors()</tt>.</li>\n<li>Colors are disabled by default when STDERR and STDOUT are not streams (piped to files/null). Similar to <tt>grep</tt>.</li>\n<li>Reduce size of ANSI escape sequences by removing codes that have no effect. e.g. <tt>\\033[31;35m</tt> to <tt>\\033[35m</tt>.</li>\n<li>Color methods that return strings now return Color instances instead of str instances.</li>\n</ul>\n</dd>\n<dt>Fixed</dt>\n<dd><ul>\n<li><a href=\"https://github.com/Robpol86/colorclass/issues/15\" rel=\"nofollow\">https://github.com/Robpol86/colorclass/issues/15</a></li>\n<li><a href=\"https://github.com/Robpol86/colorclass/issues/17\" rel=\"nofollow\">https://github.com/Robpol86/colorclass/issues/17</a></li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id5\">\n<h3>1.2.0 - 2015-03-19</h3>\n<dl>\n<dt>Added</dt>\n<dd><ul>\n<li>Convenience single-color methods by <a href=\"https://github.com/msabramo\" rel=\"nofollow\">Marc Abramowitz</a>.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id6\">\n<h3>1.1.2 - 2015-01-07</h3>\n<dl>\n<dt>Fixed</dt>\n<dd><ul>\n<li>Maintaining <tt>Color</tt> type through <tt>.encode()</tt> and <tt>.decode()</tt> chains.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id7\">\n<h3>1.1.1 - 2014-11-03</h3>\n<dl>\n<dt>Fixed</dt>\n<dd><ul>\n<li>Python 2.7 64-bit original colors bug on Windows.</li>\n<li>resetting colors when <tt>reset_atexit</tt> is True.</li>\n<li>Improved sorting of <tt>list_tags()</tt>.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id8\">\n<h3>1.1.0 - 2014-11-01</h3>\n<dl>\n<dt>Added</dt>\n<dd><ul>\n<li>Native Windows support and automatic background colors.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id9\">\n<h3>1.0.2 - 2014-10-20</h3>\n<dl>\n<dt>Added</dt>\n<dd><ul>\n<li>Ability to disable/strip out all colors.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id10\">\n<h3>1.0.1 - 2014-09-11</h3>\n<dl>\n<dt>Fixed</dt>\n<dd><ul>\n<li><tt>splitlines()</tt> method.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"id11\">\n<h3>1.0.0 - 2014-09-01</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2116128, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a875ea50176a7a120132199d0bed33e7", "sha256": "d2ad6a947ceb48aba25a43bff3d2baf8c08a822474aa4d12fb54a49557bfb689"}, "downloads": -1, "filename": "colorclass-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a875ea50176a7a120132199d0bed33e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6072, "upload_time": "2014-09-01T22:35:40", "upload_time_iso_8601": "2014-09-01T22:35:40.463706Z", "url": "https://files.pythonhosted.org/packages/25/01/f28cdbfa3447a042d3426d0a547813c26a2079dac1ab9dbf5d6383f14683/colorclass-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "23445df818711fbc07ea6ac54061151c", "sha256": "397f59ae3ecaa978f4b23b59aea78d71032758ed6c229e177ba58fd23ca6f147"}, "downloads": -1, "filename": "colorclass-1.0.1.tar.gz", "has_sig": false, "md5_digest": "23445df818711fbc07ea6ac54061151c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6253, "upload_time": "2014-09-11T20:12:28", "upload_time_iso_8601": "2014-09-11T20:12:28.039048Z", "url": "https://files.pythonhosted.org/packages/a3/9b/63567084dbfb29dd007f2cf415bd5db655b90b2d04956133a09cff242165/colorclass-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "96b23cacba2d7828f922f2ad6cf46ed2", "sha256": "b50bfb904789b5fc6bef04820d46fb39eb0943de5d439fb75e4020eb7b99021e"}, "downloads": -1, "filename": "colorclass-1.0.2.tar.gz", "has_sig": false, "md5_digest": "96b23cacba2d7828f922f2ad6cf46ed2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6376, "upload_time": "2014-10-21T03:25:24", "upload_time_iso_8601": "2014-10-21T03:25:24.105929Z", "url": "https://files.pythonhosted.org/packages/ca/9e/a562e93447c28bc6841fbb7906f2e6f8bf4fda229eeaac5cf6a0383dcbf7/colorclass-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d96f73d4989bf09328f429c9e949f881", "sha256": "6837c7923ebf8ef25ee216d7557943ff2d7e0085e6ae2e55f936c6da6b06ea3a"}, "downloads": -1, "filename": "colorclass-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d96f73d4989bf09328f429c9e949f881", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11309, "upload_time": "2014-11-02T01:18:23", "upload_time_iso_8601": "2014-11-02T01:18:23.358505Z", "url": "https://files.pythonhosted.org/packages/30/b5/77a9ea43725e3ce53c5d3f91a81f965ee70b5909d86c49fa4c64d322645a/colorclass-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "aad4b44de429461f5739a615b8bcda7c", "sha256": "42e7fd65251cf9875b0189b889d6420a567e6a33ea80157f81f6094c2d2d85cc"}, "downloads": -1, "filename": "colorclass-1.1.1.tar.gz", "has_sig": false, "md5_digest": "aad4b44de429461f5739a615b8bcda7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12639, "upload_time": "2014-11-04T04:33:27", "upload_time_iso_8601": "2014-11-04T04:33:27.240124Z", "url": "https://files.pythonhosted.org/packages/9c/b9/33b2691396cffe7029e2513d8ce0aa4b750f446520431b506b722d7726ab/colorclass-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "d045675bd178c8e6fd3dcd0b992bdac4", "sha256": "00e0ee013674487f7eefcfe0aebbcde93781240e3d9f31e74ce78660dfb93e13"}, "downloads": -1, "filename": "colorclass-1.1.2.tar.gz", "has_sig": false, "md5_digest": "d045675bd178c8e6fd3dcd0b992bdac4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13079, "upload_time": "2015-01-08T04:10:25", "upload_time_iso_8601": "2015-01-08T04:10:25.452404Z", "url": "https://files.pythonhosted.org/packages/67/fe/88fbc158f44a36e59f6590ccdb420c01fe2ee0a6dd5017648d5570aac6ac/colorclass-1.1.2.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "190754d4698f97c3a90c518410e359f0", "sha256": "2fb10c87aa2a242d8a8467136d68a3e266a5b7b545bc88bd1585e663c87ef584"}, "downloads": -1, "filename": "colorclass-1.2.0.tar.gz", "has_sig": false, "md5_digest": "190754d4698f97c3a90c518410e359f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13332, "upload_time": "2015-03-20T06:24:50", "upload_time_iso_8601": "2015-03-20T06:24:50.805446Z", "url": "https://files.pythonhosted.org/packages/26/37/88a4855ee9c1334592c503f161317c845c7961fa67a648f60037c00200b6/colorclass-1.2.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "87773d950bfc5a83cf51a3b66ac7c29e", "sha256": "9997db1dc84a4d8e03223ac9db1f52c5f349890e2cdbc9ad4f9bf9280c428b71"}, "downloads": -1, "filename": "colorclass-2.0.0.tar.gz", "has_sig": false, "md5_digest": "87773d950bfc5a83cf51a3b66ac7c29e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16128, "upload_time": "2016-04-10T22:14:48", "upload_time_iso_8601": "2016-04-10T22:14:48.827566Z", "url": "https://files.pythonhosted.org/packages/4e/c5/dc6d0d0adc33cef70068cf8a7b3b24744cf3576a3e0e3d91a0548d16226f/colorclass-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "176fc86b97478b1ef56122565c178224", "sha256": "a4a56006e98e25183d32781cd3e64b49b4813f6d59677df364c8ae680c7ab1cf"}, "downloads": -1, "filename": "colorclass-2.1.0.tar.gz", "has_sig": false, "md5_digest": "176fc86b97478b1ef56122565c178224", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16859, "upload_time": "2016-05-08T02:46:20", "upload_time_iso_8601": "2016-05-08T02:46:20.466825Z", "url": "https://files.pythonhosted.org/packages/7a/e3/232229220db4436670f6496f62bf72db8886320391767daa7a7c5ec89059/colorclass-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "2cda3cfd38230ebba3ce331cf8d71ee3", "sha256": "ac65283485645cc4c137eef37d5d46453925d965ff937a26343a36746925cc7e"}, "downloads": -1, "filename": "colorclass-2.1.1.tar.gz", "has_sig": false, "md5_digest": "2cda3cfd38230ebba3ce331cf8d71ee3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16837, "upload_time": "2016-05-12T03:21:04", "upload_time_iso_8601": "2016-05-12T03:21:04.242958Z", "url": "https://files.pythonhosted.org/packages/b9/62/7c0ca545c593dd92ebbf89b20e69256639f0492a92cbc568223b2586a1a5/colorclass-2.1.1.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "060139e93e31faafeb5d4bdfd6ea0bb8", "sha256": "b05c2a348dfc1aff2d502527d78a5b7b7e2f85da94a96c5081210d8e9ee8e18b"}, "downloads": -1, "filename": "colorclass-2.2.0.tar.gz", "has_sig": false, "md5_digest": "060139e93e31faafeb5d4bdfd6ea0bb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17037, "upload_time": "2016-05-15T02:23:22", "upload_time_iso_8601": "2016-05-15T02:23:22.748233Z", "url": "https://files.pythonhosted.org/packages/37/ea/ae8dbb956939d4392e6a7fdef87fda273854da1128edae016c4104240be8/colorclass-2.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "060139e93e31faafeb5d4bdfd6ea0bb8", "sha256": "b05c2a348dfc1aff2d502527d78a5b7b7e2f85da94a96c5081210d8e9ee8e18b"}, "downloads": -1, "filename": "colorclass-2.2.0.tar.gz", "has_sig": false, "md5_digest": "060139e93e31faafeb5d4bdfd6ea0bb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17037, "upload_time": "2016-05-15T02:23:22", "upload_time_iso_8601": "2016-05-15T02:23:22.748233Z", "url": "https://files.pythonhosted.org/packages/37/ea/ae8dbb956939d4392e6a7fdef87fda273854da1128edae016c4104240be8/colorclass-2.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:38 2020"}