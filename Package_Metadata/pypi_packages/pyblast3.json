{"info": {"author": "Peter Griess, Ben Glick", "author_email": "glick@glick.cloud", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Software Development :: Libraries"], "description": "Running NCBI BLAST manually is of course not rocket science, but this\nmodule provides several benefits over doing so:\n\n* Automatically runs a BLAST process for each CPU on the system;\n  achieves far better throughput than the ``-num_threads`` option\n* Provides an iterator API that emits native Python objects for each\n  BLAST result `as they're produced`, rather than at the end\n* ``Result`` and ``Hit`` objects obviate the need for manually parsing\n  results; all values represented by their native Python types (e.g.\n  ``Hit.evalue`` is a ``float``, etc)\n\n.. _`NCBI BLAST`: http://blast.ncbi.nlm.nih.gov/\n\nExample\n-------\n\nHere's a simple example with comments hilighting some relevant\nfeatures\n\n::\n\n    import pyblast\n    \n    with open('data.fasta') as f:\n        # Use the pyblast.blastx() iterator function\n        for r in pyblast.blastx(f, db='/path/to/swissprot'):\n            msg = 'query {} has {} hits'.format(r.query_id, len(r.hits))\n            if r.hits:\n                # Use Hit.evalue as a float for comparison\n                min_evalue = sorted([h.evalue for h in r.hits])[0]\n                msg += '; minimum evalue {:f}'.format(min_evalue)\n\n            print msg\n\nThis will produce output like the following\n\n::\n\n    query M00181:167:000000000-A4VBV:1:1101:11880:1874 1:N:0:6 has 6 hits; minimum evalue 0.310000\n    query M00181:167:000000000-A4VBV:1:1101:17067:1875 1:N:0:6 has 14 hits; minimum evalue 0.200000\n    query M00181:167:000000000-A4VBV:1:1101:15039:1878 1:N:0:6 has 4 hits; minimum evalue 4.400000\n    query M00181:167:000000000-A4VBV:1:1101:17090:1895 1:N:0:6 has 6 hits; minimum evalue 1.700000\n    query M00181:167:000000000-A4VBV:1:1101:15843:1907 1:N:0:6 has 2 hits; minimum evalue 1.800000\n\n\nAPI\n---\n\n.. _`blastn`:\n\n``blastn(input_file, *args, **kwargs)``\n\nIterator to process the contents of the FASTA ``input_file`` using\n``blastn``; yields `Result`_ objects.\n\nThe ``*args`` and ``**kwargs`` arguments control how `blastn` is\ninvoked. The former are passed as options without values, while the\nlatter are passed as options with values. For example,\n``blastn(some_file, 'ungapped', db='foo/bar')`` will run ``blastn``\nwith the ``-ungapped -db foo/bar`` options.\n\nIn addition, the following keyword arguments are handled specially and\nare not passed on to BLAST:\n\n- ``pb_num_processes``: number of BLAST processes to spawn; default is ``sysconf(SC_NPROCESSORS_ONLN)``\n- ``pb_fields``: iterable of field names to retrieve for each hit; default is `DEFAULT_HIT_FIELDS`_. The list of valid field names (and their meanings) can be found in the ``*** Formatting options`` section of ``blastn -help``.\n\n``blastp(input_file, *args, **kwargs)``\n\nSee documentation for `blastn`_.\n\n``blastx(input_file, *args, **kwargs)``\n\nSee documentation for `blastn`_.\n\n.. _`Result`:\n\n``Result``\n\nThe result of BLAST processing a single query sequence. The set of\nattributes on this object are:\n\n- ``id``: identifier for the query sequence; can be ``None``\n- ``description``: textual description of the query sequence; can be ``None``\n- ``hits``: array of `Hit`_ objects\n\n.. _`Hit`:\n\n``Hit``\n\nA single sequence hit in a `Result`_ object.\n\nThe attributes of this object are the names of the fields requested of\nBLAST. For example, if ``blastn`` was run with ``pb_fields=['qseqid',\n...]`` then one could access the ``qseqid`` value of the ``Hit``\nobject ``h`` like so: ``h.qseqid``. Fields referenced that were not\nrequested of BLAST have a ``None`` value.\n\nIn addition, BLAST fields are converted to their native Python types.\nFor example, ``evalue`` fields are automatically converted to floating\npoint values.\n\n.. _`DEFAULT_HIT_FIELDS`:\n\n``DEFAULT_HIT_FIELDS``\n\nThe default fields returned for each ``Hit`` object.\n\n``VERSION``\n\nThe version of ``pyblast`` that's being used. This can be used to more\neasily than feature detection to determine what features of the module\nare available.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/benhg/pyblast", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyblast3", "package_url": "https://pypi.org/project/pyblast3/", "platform": "", "project_url": "https://pypi.org/project/pyblast3/", "project_urls": {"Homepage": "https://github.com/benhg/pyblast"}, "release_url": "https://pypi.org/project/pyblast3/0.2/", "requires_dist": null, "requires_python": "", "summary": "Run NCBI BLAST with an easy-to-use Pythonic API", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Running NCBI BLAST manually is of course not rocket science, but this\nmodule provides several benefits over doing so:</p>\n<ul>\n<li>Automatically runs a BLAST process for each CPU on the system;\nachieves far better throughput than the <tt><span class=\"pre\">-num_threads</span></tt> option</li>\n<li>Provides an iterator API that emits native Python objects for each\nBLAST result <cite>as they\u2019re produced</cite>, rather than at the end</li>\n<li><tt>Result</tt> and <tt>Hit</tt> objects obviate the need for manually parsing\nresults; all values represented by their native Python types (e.g.\n<tt>Hit.evalue</tt> is a <tt>float</tt>, etc)</li>\n</ul>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Here\u2019s a simple example with comments hilighting some relevant\nfeatures</p>\n<pre>import pyblast\n\nwith open('data.fasta') as f:\n    # Use the pyblast.blastx() iterator function\n    for r in pyblast.blastx(f, db='/path/to/swissprot'):\n        msg = 'query {} has {} hits'.format(r.query_id, len(r.hits))\n        if r.hits:\n            # Use Hit.evalue as a float for comparison\n            min_evalue = sorted([h.evalue for h in r.hits])[0]\n            msg += '; minimum evalue {:f}'.format(min_evalue)\n\n        print msg\n</pre>\n<p>This will produce output like the following</p>\n<pre>query M00181:167:000000000-A4VBV:1:1101:11880:1874 1:N:0:6 has 6 hits; minimum evalue 0.310000\nquery M00181:167:000000000-A4VBV:1:1101:17067:1875 1:N:0:6 has 14 hits; minimum evalue 0.200000\nquery M00181:167:000000000-A4VBV:1:1101:15039:1878 1:N:0:6 has 4 hits; minimum evalue 4.400000\nquery M00181:167:000000000-A4VBV:1:1101:17090:1895 1:N:0:6 has 6 hits; minimum evalue 1.700000\nquery M00181:167:000000000-A4VBV:1:1101:15843:1907 1:N:0:6 has 2 hits; minimum evalue 1.800000\n</pre>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p id=\"blastn\"><tt>blastn(input_file, *args, **kwargs)</tt></p>\n<p>Iterator to process the contents of the FASTA <tt>input_file</tt> using\n<tt>blastn</tt>; yields <a href=\"#result\" rel=\"nofollow\">Result</a> objects.</p>\n<p>The <tt>*args</tt> and <tt>**kwargs</tt> arguments control how <cite>blastn</cite> is\ninvoked. The former are passed as options without values, while the\nlatter are passed as options with values. For example,\n<tt>blastn(some_file, 'ungapped', <span class=\"pre\">db='foo/bar')</span></tt> will run <tt>blastn</tt>\nwith the <tt><span class=\"pre\">-ungapped</span> <span class=\"pre\">-db</span> foo/bar</tt> options.</p>\n<p>In addition, the following keyword arguments are handled specially and\nare not passed on to BLAST:</p>\n<ul>\n<li><tt>pb_num_processes</tt>: number of BLAST processes to spawn; default is <tt>sysconf(SC_NPROCESSORS_ONLN)</tt></li>\n<li><tt>pb_fields</tt>: iterable of field names to retrieve for each hit; default is <a href=\"#default-hit-fields\" rel=\"nofollow\">DEFAULT_HIT_FIELDS</a>. The list of valid field names (and their meanings) can be found in the <tt>*** Formatting options</tt> section of <tt>blastn <span class=\"pre\">-help</span></tt>.</li>\n</ul>\n<p><tt>blastp(input_file, *args, **kwargs)</tt></p>\n<p>See documentation for <a href=\"#blastn\" rel=\"nofollow\">blastn</a>.</p>\n<p><tt>blastx(input_file, *args, **kwargs)</tt></p>\n<p>See documentation for <a href=\"#blastn\" rel=\"nofollow\">blastn</a>.</p>\n<p id=\"result\"><tt>Result</tt></p>\n<p>The result of BLAST processing a single query sequence. The set of\nattributes on this object are:</p>\n<ul>\n<li><tt>id</tt>: identifier for the query sequence; can be <tt>None</tt></li>\n<li><tt>description</tt>: textual description of the query sequence; can be <tt>None</tt></li>\n<li><tt>hits</tt>: array of <a href=\"#hit\" rel=\"nofollow\">Hit</a> objects</li>\n</ul>\n<p id=\"hit\"><tt>Hit</tt></p>\n<p>A single sequence hit in a <a href=\"#result\" rel=\"nofollow\">Result</a> object.</p>\n<p>The attributes of this object are the names of the fields requested of\nBLAST. For example, if <tt>blastn</tt> was run with <tt><span class=\"pre\">pb_fields=['qseqid',</span>\n<span class=\"pre\">...]</span></tt> then one could access the <tt>qseqid</tt> value of the <tt>Hit</tt>\nobject <tt>h</tt> like so: <tt>h.qseqid</tt>. Fields referenced that were not\nrequested of BLAST have a <tt>None</tt> value.</p>\n<p>In addition, BLAST fields are converted to their native Python types.\nFor example, <tt>evalue</tt> fields are automatically converted to floating\npoint values.</p>\n<p id=\"default-hit-fields\"><tt>DEFAULT_HIT_FIELDS</tt></p>\n<p>The default fields returned for each <tt>Hit</tt> object.</p>\n<p><tt>VERSION</tt></p>\n<p>The version of <tt>pyblast</tt> that\u2019s being used. This can be used to more\neasily than feature detection to determine what features of the module\nare available.</p>\n</div>\n\n          </div>"}, "last_serial": 6405879, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "585a57eff3dc6eca22cd318d5ff30883", "sha256": "3396b28afb9cbe40fd0633ed018fedeef2fe98fc75ebe3d39e656b6c82ec71ea"}, "downloads": -1, "filename": "pyblast3-0.2.tar.gz", "has_sig": false, "md5_digest": "585a57eff3dc6eca22cd318d5ff30883", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3230, "upload_time": "2020-01-07T00:40:00", "upload_time_iso_8601": "2020-01-07T00:40:00.278029Z", "url": "https://files.pythonhosted.org/packages/9b/72/ed248835301d519bc74fed460e1ebbae328733ddeb3fcdf7ba6160e1c231/pyblast3-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "585a57eff3dc6eca22cd318d5ff30883", "sha256": "3396b28afb9cbe40fd0633ed018fedeef2fe98fc75ebe3d39e656b6c82ec71ea"}, "downloads": -1, "filename": "pyblast3-0.2.tar.gz", "has_sig": false, "md5_digest": "585a57eff3dc6eca22cd318d5ff30883", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3230, "upload_time": "2020-01-07T00:40:00", "upload_time_iso_8601": "2020-01-07T00:40:00.278029Z", "url": "https://files.pythonhosted.org/packages/9b/72/ed248835301d519bc74fed460e1ebbae328733ddeb3fcdf7ba6160e1c231/pyblast3-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:11 2020"}