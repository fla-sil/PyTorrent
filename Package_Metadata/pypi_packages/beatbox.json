{"info": {"author": "Simon Fell et al", "author_email": "plonesf@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable"], "description": "Introduction\n============\n\nThis is a distutils-packaged and updated version of the `beatbox module`_\nby Simon Fell, which is a Python implementation of a client for the\nSalesforce.com Partner Web Services API.\n\n.. _`beatbox module`: http://www.pocketsoap.com/beatbox/\n\nThis module contains 2 versions of the Salesforce.com client:\n\n XMLClient\n   The original beatbox version of the client which returns xmltramp objects.\n PythonClient\n   Marshalls the returned objects into proper Python data types. e.g. integer\n   fields return integers.\n\n\nCompatibility\n=============\n\nBeatbox supports versions 16.0 through 32.0 of the Salesforce Partner Web\nServices API. However, the following API calls have not been implemented at\nthis time:\n\n * emptyRecycleBin\n * executeListView\n * invalidateSessions\n * logout\n * merge\n * performQuickActions\n * process\n * queryAll\n * undelete\n * describeSObject\n * sendEmail\n * all describe* calls except describeGlobal, describeSObjects, and describeTabs\n\nBeatbox has been tested with Python 2.7.\n\n\nBasic Usage Examples\n====================\n\nInstantiate a Python Salesforce.com client:\n  >>> svc = beatbox.PythonClient()\n  >>> svc.login('username', 'passwordTOKEN')\n  \n(Note that interacting with Salesforce.com via the API requires the use of a\n'security token' which must be appended to the password.)\n\nQuery for contacts with last name 'Doe':\n  >>> res = svc.query(\"SELECT Id, FirstName, LastName FROM Contact WHERE LastName='Doe'\")\n  >>> res[0]\n  {'LastName': 'Doe', 'type': 'Contact', 'Id': '0037000000eRf6vAAC', 'FirstName': 'John'}\n  >>> res[0].Id\n  '0037000000eRf6vAAC'\n\nAdd a new Lead:\n  >>> contact = {'type': 'Lead', 'LastName': 'Glick', 'FirstName': 'David', 'Company': 'Individual'}\n  >>> res = svc.create(contact)\nGet the ID of the newly created Lead:\n  >>> res[0]['id']\n  '00Q7000000RVyiHEAT'\n\nConvert a Lead:\n  >>> res = svc.convertLead({\n  ...     'leadId': '00Q7000000RVyiHEAT',\n  ...     'convertedStatus': 'Closed - Converted',\n  ... })\nGet the ID of the new Contact:\n  >>> str(res[0]['contactId'])\n  '0037000000TEGrsAAH'\n\n\nMore Examples\n=============\n\nThe examples folder contains the examples for the original beatbox. For\nexamples on how to use the PythonClient see\nsrc/beatbox/tests/test_pythonClient.py.\n\nSome of these other products that have been built on top of beatbox can also\nprovide example of use:\n  \n  * `Salesforce Base Connector`_\n  * `Salesforce PFG Adapter`_\n  * `Salesforce Auth Plugin`_\n  * `RSVP for Salesforce`_\n\n.. _`Salesforce Base Connector`: http://plone.org/products/salesforcebaseconnector\n.. _`Salesforce PFG Adapter`: http://plone.org/products/salesforcepfgadapter\n.. _`Salesforce Auth Plugin`: http://plone.org/products/salesforceauthplugin\n.. _`RSVP for Salesforce`: http://plone.org/products/collective.salesforce.rsvp\n\n\nAlternatives\n============\n\n`simple-salesforce`_ is recommended as a client for the Salesforce.com REST API.\n\n.. _`simple-salesforce`: https://pypi.python.org/pypi/simple-salesforce\n\nDavid Lanstein has created a `Python Salesforce Toolkit`_ that is based on the\n`suds`_ SOAP library.  Based on limited tests it appears to be somewhat slower\nthan beatbox for operations that return a lot of data; however, it may be a\nbetter option if you want to be able to automatically generate a service proxy\nfor a new WSDL (such as for the Enterprise web services API).\n\n.. _`Python Salesforce Toolkit`: http://code.google.com/p/salesforce-python-toolkit/\n.. _`suds`: https://fedorahosted.org/suds/\n\nRon Hess from Salesforce.com has adapted beatbox for use with Google App\nEngine.  See http://code.google.com/p/force-app-engine/\n\n\nRunning Tests\n=============\n\nFirst, we need to add some custom fields to the Contacts object in your Salesforce instance:\n\n * Login to your Salesforce.com instance\n * Browse to Setup --> Customize --> Contacts --> Fields --> \"New\" button\n * Add a Picklist (multi-select) labeled \"Favorite Fruit\", then add\n    * Apple\n    * Orange\n    * Pear\n * Leave default of 3 lines and field name should default to \"Favorite_Fruit\"\n * Add a Number labeled \"Favorite Integer\", with 18 places, 0 decimal places\n * Add a Number labeled \"Favorite Float\", with 13 places, 5 decimal places\n\nCreate a sfconfig file in your python path with the following format::\n\n    USERNAME='your salesforce username'\n    PASSWORD='your salesforce passwordTOKEN'\n\nwhere TOKEN is your Salesforce API login token.\n\nAdd './src' to your PYTHONPATH\n\nRun the tests::\n\n    python src/beatbox/tests/test_beatbox.py\n    python src/beatbox/tests/test_pythonClient.py\n\n\nChangelog\n=========\n\n32.1 (2014-12-04)\n-----------------\n\n* Fix bug in convertLead when passed a single object instead of a list.\n  [davisagli]\n\n32.0 (2014-12-01)\n-----------------\n\n* Add support for the convertLead call.\n  [davisagli]\n\n* Update to use version 32.0 of the Salesforce.com partner WSDL by default.\n  [davisagli]\n\n* Don't use _out internal method from XMLGenerator.\n  [smcmahon]\n\n20.0 (2010-11-30)\n-----------------\n\n* Add 'encryptedstring' to the list of types marshalled as strings.  Thanks\n  sobyone.\n  [davisagli]\n\n* Update to use version 20.0 of the Salesforce.com partner WSDL by default.\n  [davisagli]\n\n19.0 (2010-08-23)\n-----------------\n\n* Update marshalling of describeGlobal and describeSObjects responses to\n  include new properties now returned by the API.  For backwards\n  compatibility, we set the types property of the describeGlobal response\n  to a list of the names of all types (which Salesforce now returns in\n  separate DescribeGlobalSObjectResult objects).\n  [davisagli]\n\n* Update to use version 19.0 of the Salesforce.com partner WSDL by default.\n  Also, use the new login.salesforce.com login endpoint by default.\n  [davisagli]\n\n16.1 (2010-03-11)\n-----------------\n\n* Catch and retry on exceptions from the socket library, in addition to ones\n  from httplib.  This fixes a regression introduced in version 16.0.\n  [davisagli]\n\n\n16.0 (2009-11-12)\n-----------------\n\n* Don't strip newlines when marshalling the values of textarea fields.\n  [davisagli]\n\n* Make sure to add a field to fieldsToNull if its Python value is None.\n  [rhettg, davisagli]\n\n* Fix issue where numbers of type long weren't converted to a string.\n  [spleeman, davisagli]\n\n* Only catch HTTP exceptions when retrying a connection.\n  [spleeman, davisagli]\n\n\n16.0b1 (2009-09-08)\n-------------------\n\n* Log beatbox calls at the debug level.\n  [davisagli]\n\n* Fixed a string exception for compatibility with Python 2.6.\n  [davisagli]\n\n* Added support for SOSL searches via the search method.  Thanks to Alex Tokar\n  of Web Collective.\n  [davisagli]\n\n* Added an optional cache for the sObject type descriptions needed for\n  marshalling query results into Python objects. This can avoid an extra\n  describeSObjects API call for each query, but means that the information\n  could become stale if the type metadata is modified in Salesforce.com.\n  The cache is off by default. Turn it on by passing\n  cacheTypeDescriptions=True when instantiating a Python client. The cache may\n  be reset by calling the flushTypeDescriptionsCache method of the Python\n  client.\n  [davisagli]\n\n* Support a full SOQL statement as a parameter to the query method of the\n  Python client.  The old 3-part method signature (fields, sObjectType,\n  conditionalExpression) should continue to work.\n  [davisagli]\n\n* In the Python client, support relationship queries and other queries that may\n  return multiple types of objects.  Object type descriptions (required for\n  marshalling field values into the correct Python type) are cached for the\n  duration of the query after the first time they are used.  Thanks to\n  Melnychuk Taras of Quintagroup.\n  [davisagli]\n\n* In the Python client, queries now return a list-like QueryRecordSet holding\n  a sequence of dict-like QueryRecord objects, instead of a dict containing a\n  list of dicts.  This allows for more Pythonic access such as results[0].Id\n  instead of results['results'][0]['Id'].  The old syntax should still work.\n  Thanks to Melnychuk Taras of Quintagroup.\n  [davisagli]\n\n* Update to use version 16.0 of the Salesforce.com partner WSDL.\n  [davisagli]\n\n\n0.12 (2009-05-13)\n-----------------\n\n* Use the default serverUrl value if the passed value evaluates to boolean\n  False.\n  [davisagli]\n\n0.11 (2009-05-13)\n-----------------\n\n* Access 'created' instead of 'isCreated' in the upsert result. This closes\n  http://code.google.com/p/salesforce-beatbox/issues/detail?id=4\n  [davisagli]\n\n0.10 (2009-05-06)\n-----------------\n\n* Added optional serverUrl parameter when creating a Client.\n  [davisagli]\n\npre 0.9.1.1\n-----------\n\n* ancient history", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/salesforce-beatbox/", "keywords": "python salesforce salesforce.com", "license": "GNU GENERAL PUBLIC LICENSE Version 2", "maintainer": null, "maintainer_email": null, "name": "beatbox", "package_url": "https://pypi.org/project/beatbox/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/beatbox/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/salesforce-beatbox/"}, "release_url": "https://pypi.org/project/beatbox/32.1/", "requires_dist": null, "requires_python": null, "summary": "A Python library for querying/updating Saleforce.com data via SOAP API", "version": "32.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This is a distutils-packaged and updated version of the <a href=\"http://www.pocketsoap.com/beatbox/\" rel=\"nofollow\">beatbox module</a>\nby Simon Fell, which is a Python implementation of a client for the\nSalesforce.com Partner Web Services API.</p>\n<p>This module contains 2 versions of the Salesforce.com client:</p>\n<blockquote>\n<dl>\n<dt>XMLClient</dt>\n<dd>The original beatbox version of the client which returns xmltramp objects.</dd>\n<dt>PythonClient</dt>\n<dd>Marshalls the returned objects into proper Python data types. e.g. integer\nfields return integers.</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<p>Beatbox supports versions 16.0 through 32.0 of the Salesforce Partner Web\nServices API. However, the following API calls have not been implemented at\nthis time:</p>\n<blockquote>\n<ul>\n<li>emptyRecycleBin</li>\n<li>executeListView</li>\n<li>invalidateSessions</li>\n<li>logout</li>\n<li>merge</li>\n<li>performQuickActions</li>\n<li>process</li>\n<li>queryAll</li>\n<li>undelete</li>\n<li>describeSObject</li>\n<li>sendEmail</li>\n<li>all describe* calls except describeGlobal, describeSObjects, and describeTabs</li>\n</ul>\n</blockquote>\n<p>Beatbox has been tested with Python 2.7.</p>\n</div>\n<div id=\"basic-usage-examples\">\n<h2>Basic Usage Examples</h2>\n<dl>\n<dt>Instantiate a Python Salesforce.com client:</dt>\n<dd><pre>&gt;&gt;&gt; svc = beatbox.PythonClient()\n&gt;&gt;&gt; svc.login('username', 'passwordTOKEN')\n</pre>\n</dd>\n</dl>\n<p>(Note that interacting with Salesforce.com via the API requires the use of a\n\u2018security token\u2019 which must be appended to the password.)</p>\n<dl>\n<dt>Query for contacts with last name \u2018Doe\u2019:</dt>\n<dd><pre>&gt;&gt;&gt; res = svc.query(\"SELECT Id, FirstName, LastName FROM Contact WHERE LastName='Doe'\")\n&gt;&gt;&gt; res[0]\n{'LastName': 'Doe', 'type': 'Contact', 'Id': '0037000000eRf6vAAC', 'FirstName': 'John'}\n&gt;&gt;&gt; res[0].Id\n'0037000000eRf6vAAC'\n</pre>\n</dd>\n<dt>Add a new Lead:</dt>\n<dd><pre>&gt;&gt;&gt; contact = {'type': 'Lead', 'LastName': 'Glick', 'FirstName': 'David', 'Company': 'Individual'}\n&gt;&gt;&gt; res = svc.create(contact)\n</pre>\n</dd>\n<dt>Get the ID of the newly created Lead:</dt>\n<dd><pre>&gt;&gt;&gt; res[0]['id']\n'00Q7000000RVyiHEAT'\n</pre>\n</dd>\n<dt>Convert a Lead:</dt>\n<dd><pre>&gt;&gt;&gt; res = svc.convertLead({\n...     'leadId': '00Q7000000RVyiHEAT',\n...     'convertedStatus': 'Closed - Converted',\n... })\n</pre>\n</dd>\n<dt>Get the ID of the new Contact:</dt>\n<dd><pre>&gt;&gt;&gt; str(res[0]['contactId'])\n'0037000000TEGrsAAH'\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"more-examples\">\n<h2>More Examples</h2>\n<p>The examples folder contains the examples for the original beatbox. For\nexamples on how to use the PythonClient see\nsrc/beatbox/tests/test_pythonClient.py.</p>\n<p>Some of these other products that have been built on top of beatbox can also\nprovide example of use:</p>\n<blockquote>\n<ul>\n<li><a href=\"http://plone.org/products/salesforcebaseconnector\" rel=\"nofollow\">Salesforce Base Connector</a></li>\n<li><a href=\"http://plone.org/products/salesforcepfgadapter\" rel=\"nofollow\">Salesforce PFG Adapter</a></li>\n<li><a href=\"http://plone.org/products/salesforceauthplugin\" rel=\"nofollow\">Salesforce Auth Plugin</a></li>\n<li><a href=\"http://plone.org/products/collective.salesforce.rsvp\" rel=\"nofollow\">RSVP for Salesforce</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"alternatives\">\n<h2>Alternatives</h2>\n<p><a href=\"https://pypi.python.org/pypi/simple-salesforce\" rel=\"nofollow\">simple-salesforce</a> is recommended as a client for the Salesforce.com REST API.</p>\n<p>David Lanstein has created a <a href=\"http://code.google.com/p/salesforce-python-toolkit/\" rel=\"nofollow\">Python Salesforce Toolkit</a> that is based on the\n<a href=\"https://fedorahosted.org/suds/\" rel=\"nofollow\">suds</a> SOAP library.  Based on limited tests it appears to be somewhat slower\nthan beatbox for operations that return a lot of data; however, it may be a\nbetter option if you want to be able to automatically generate a service proxy\nfor a new WSDL (such as for the Enterprise web services API).</p>\n<p>Ron Hess from Salesforce.com has adapted beatbox for use with Google App\nEngine.  See <a href=\"http://code.google.com/p/force-app-engine/\" rel=\"nofollow\">http://code.google.com/p/force-app-engine/</a></p>\n</div>\n<div id=\"running-tests\">\n<h2>Running Tests</h2>\n<p>First, we need to add some custom fields to the Contacts object in your Salesforce instance:</p>\n<blockquote>\n<ul>\n<li>Login to your Salesforce.com instance</li>\n<li>Browse to Setup \u2013&gt; Customize \u2013&gt; Contacts \u2013&gt; Fields \u2013&gt; \u201cNew\u201d button</li>\n<li><dl>\n<dt>Add a Picklist (multi-select) labeled \u201cFavorite Fruit\u201d, then add</dt>\n<dd><ul>\n<li>Apple</li>\n<li>Orange</li>\n<li>Pear</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>Leave default of 3 lines and field name should default to \u201cFavorite_Fruit\u201d</li>\n<li>Add a Number labeled \u201cFavorite Integer\u201d, with 18 places, 0 decimal places</li>\n<li>Add a Number labeled \u201cFavorite Float\u201d, with 13 places, 5 decimal places</li>\n</ul>\n</blockquote>\n<p>Create a sfconfig file in your python path with the following format:</p>\n<pre>USERNAME='your salesforce username'\nPASSWORD='your salesforce passwordTOKEN'\n</pre>\n<p>where TOKEN is your Salesforce API login token.</p>\n<p>Add \u2018./src\u2019 to your PYTHONPATH</p>\n<p>Run the tests:</p>\n<pre>python src/beatbox/tests/test_beatbox.py\npython src/beatbox/tests/test_pythonClient.py\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>32.1 (2014-12-04)</h3>\n<ul>\n<li>Fix bug in convertLead when passed a single object instead of a list.\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>32.0 (2014-12-01)</h3>\n<ul>\n<li>Add support for the convertLead call.\n[davisagli]</li>\n<li>Update to use version 32.0 of the Salesforce.com partner WSDL by default.\n[davisagli]</li>\n<li>Don\u2019t use _out internal method from XMLGenerator.\n[smcmahon]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>20.0 (2010-11-30)</h3>\n<ul>\n<li>Add \u2018encryptedstring\u2019 to the list of types marshalled as strings.  Thanks\nsobyone.\n[davisagli]</li>\n<li>Update to use version 20.0 of the Salesforce.com partner WSDL by default.\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>19.0 (2010-08-23)</h3>\n<ul>\n<li>Update marshalling of describeGlobal and describeSObjects responses to\ninclude new properties now returned by the API.  For backwards\ncompatibility, we set the types property of the describeGlobal response\nto a list of the names of all types (which Salesforce now returns in\nseparate DescribeGlobalSObjectResult objects).\n[davisagli]</li>\n<li>Update to use version 19.0 of the Salesforce.com partner WSDL by default.\nAlso, use the new login.salesforce.com login endpoint by default.\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>16.1 (2010-03-11)</h3>\n<ul>\n<li>Catch and retry on exceptions from the socket library, in addition to ones\nfrom httplib.  This fixes a regression introduced in version 16.0.\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>16.0 (2009-11-12)</h3>\n<ul>\n<li>Don\u2019t strip newlines when marshalling the values of textarea fields.\n[davisagli]</li>\n<li>Make sure to add a field to fieldsToNull if its Python value is None.\n[rhettg, davisagli]</li>\n<li>Fix issue where numbers of type long weren\u2019t converted to a string.\n[spleeman, davisagli]</li>\n<li>Only catch HTTP exceptions when retrying a connection.\n[spleeman, davisagli]</li>\n</ul>\n</div>\n<div id=\"b1-2009-09-08\">\n<h3>16.0b1 (2009-09-08)</h3>\n<ul>\n<li>Log beatbox calls at the debug level.\n[davisagli]</li>\n<li>Fixed a string exception for compatibility with Python 2.6.\n[davisagli]</li>\n<li>Added support for SOSL searches via the search method.  Thanks to Alex Tokar\nof Web Collective.\n[davisagli]</li>\n<li>Added an optional cache for the sObject type descriptions needed for\nmarshalling query results into Python objects. This can avoid an extra\ndescribeSObjects API call for each query, but means that the information\ncould become stale if the type metadata is modified in Salesforce.com.\nThe cache is off by default. Turn it on by passing\ncacheTypeDescriptions=True when instantiating a Python client. The cache may\nbe reset by calling the flushTypeDescriptionsCache method of the Python\nclient.\n[davisagli]</li>\n<li>Support a full SOQL statement as a parameter to the query method of the\nPython client.  The old 3-part method signature (fields, sObjectType,\nconditionalExpression) should continue to work.\n[davisagli]</li>\n<li>In the Python client, support relationship queries and other queries that may\nreturn multiple types of objects.  Object type descriptions (required for\nmarshalling field values into the correct Python type) are cached for the\nduration of the query after the first time they are used.  Thanks to\nMelnychuk Taras of Quintagroup.\n[davisagli]</li>\n<li>In the Python client, queries now return a list-like QueryRecordSet holding\na sequence of dict-like QueryRecord objects, instead of a dict containing a\nlist of dicts.  This allows for more Pythonic access such as results[0].Id\ninstead of results[\u2018results\u2019][0][\u2018Id\u2019].  The old syntax should still work.\nThanks to Melnychuk Taras of Quintagroup.\n[davisagli]</li>\n<li>Update to use version 16.0 of the Salesforce.com partner WSDL.\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.12 (2009-05-13)</h3>\n<ul>\n<li>Use the default serverUrl value if the passed value evaluates to boolean\nFalse.\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.11 (2009-05-13)</h3>\n<ul>\n<li>Access \u2018created\u2019 instead of \u2018isCreated\u2019 in the upsert result. This closes\n<a href=\"http://code.google.com/p/salesforce-beatbox/issues/detail?id=4\" rel=\"nofollow\">http://code.google.com/p/salesforce-beatbox/issues/detail?id=4</a>\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.10 (2009-05-06)</h3>\n<ul>\n<li>Added optional serverUrl parameter when creating a Client.\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"pre-0-9-1-1\">\n<h3>pre 0.9.1.1</h3>\n<ul>\n<li>ancient history</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1331470, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "4d5be59defd87a33e646a7b59791c65b", "sha256": "43d5ad801f87bb8e43402b41369edfbda9e3866530526bbc383557d599b604e4"}, "downloads": -1, "filename": "beatbox-0.10.tar.gz", "has_sig": false, "md5_digest": "4d5be59defd87a33e646a7b59791c65b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29285, "upload_time": "2009-05-07T07:38:49", "upload_time_iso_8601": "2009-05-07T07:38:49.033976Z", "url": "https://files.pythonhosted.org/packages/b6/64/beb4af71679bbd7dd2ea780090dce53014dcd3f714527947be866076aa37/beatbox-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "6a4f054a2c3b57ffd0fe5815994020dc", "sha256": "94f930b825c38d51dceb769d30824150fcfb0b6265cf449e6350a266655e750c"}, "downloads": -1, "filename": "beatbox-0.11.tar.gz", "has_sig": false, "md5_digest": "6a4f054a2c3b57ffd0fe5815994020dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29517, "upload_time": "2009-05-14T06:14:42", "upload_time_iso_8601": "2009-05-14T06:14:42.585724Z", "url": "https://files.pythonhosted.org/packages/34/dd/dae8c7eca22df9d1ce025eab61b867dde6d171116934d613a1afeaf3e7f6/beatbox-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "efa565b9f3779c4080c800cba53b80c3", "sha256": "5bcbf94290b731474ba919fbb1e73780cc44fcb14bf25e5a4c981f5e958efffe"}, "downloads": -1, "filename": "beatbox-0.12.tar.gz", "has_sig": false, "md5_digest": "efa565b9f3779c4080c800cba53b80c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29680, "upload_time": "2009-05-14T07:58:44", "upload_time_iso_8601": "2009-05-14T07:58:44.073424Z", "url": "https://files.pythonhosted.org/packages/87/d9/188ecbe6b380c59d6bed287acc4ca3dcfb59a291a87b296d2a7e92750268/beatbox-0.12.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "201bd5e2e73e6a35aef6f9e02c66061a", "sha256": "dba32dc8a611db4efb7f4d8c304f566b299760b4bcba1524f88b7f39be57622a"}, "downloads": -1, "filename": "beatbox-0.9.1-py2.4.egg", "has_sig": false, "md5_digest": "201bd5e2e73e6a35aef6f9e02c66061a", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 36273, "upload_time": "2007-07-13T23:28:40", "upload_time_iso_8601": "2007-07-13T23:28:40Z", "url": "https://files.pythonhosted.org/packages/d9/7f/cb6955e8353a1d0fa0bf8aa3f2ed29404c1bfcb4971f2d6d58ebce9e363f/beatbox-0.9.1-py2.4.egg", "yanked": false}], "0.9.1.1": [{"comment_text": "", "digests": {"md5": "c7a214a5dda0e3fe485d02281410241c", "sha256": "73bb6b3f1c11432c7cee8a09e4596c94c8feff682f766cefc90fec082d2b0e0d"}, "downloads": -1, "filename": "beatbox-0.9.1.1-py2.4.egg", "has_sig": false, "md5_digest": "c7a214a5dda0e3fe485d02281410241c", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 36310, "upload_time": "2007-12-08T01:38:30", "upload_time_iso_8601": "2007-12-08T01:38:30Z", "url": "https://files.pythonhosted.org/packages/8b/62/5def2752e8e9c5f2790c06d1f7aa0ae9aca022bf5e3b6b072ab76202efc2/beatbox-0.9.1.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b63acd7eb286545dc473b7d5d4ec74b", "sha256": "c21138ece635bf068eea4e2e51a9212374effe167eff43f15a65cbb610c01d2f"}, "downloads": -1, "filename": "beatbox-0.9.1.1.tgz", "has_sig": false, "md5_digest": "3b63acd7eb286545dc473b7d5d4ec74b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70915, "upload_time": "2008-05-02T21:06:16", "upload_time_iso_8601": "2008-05-02T21:06:16Z", "url": "https://files.pythonhosted.org/packages/16/ab/ab5acc168090e1b8804c3d4ec122bdb351fd816da98ecd31669e50359926/beatbox-0.9.1.1.tgz", "yanked": false}], "16.0": [{"comment_text": "", "digests": {"md5": "6597f4e9adc80c7d6a1e5770d35144e5", "sha256": "eed18b6f77a866c67c5313015dff22f6358b7d2d07bebe9a4e9088b9149bfb25"}, "downloads": -1, "filename": "beatbox-16.0.tar.gz", "has_sig": false, "md5_digest": "6597f4e9adc80c7d6a1e5770d35144e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33662, "upload_time": "2009-11-12T23:39:16", "upload_time_iso_8601": "2009-11-12T23:39:16.506088Z", "url": "https://files.pythonhosted.org/packages/70/ad/88a8ebb26b7bb667c44378e99b52baf9d3ece2ae4022a3eb1f822e292527/beatbox-16.0.tar.gz", "yanked": false}], "16.0b1": [{"comment_text": "", "digests": {"md5": "d89811f535dbc06c9f8b3d8ad20cbab9", "sha256": "2f9472f0fb0a941c8dbef5ab2020f3bd0cbbaa310cc251fbda7f446fd53b0338"}, "downloads": -1, "filename": "beatbox-16.0b1.tar.gz", "has_sig": false, "md5_digest": "d89811f535dbc06c9f8b3d8ad20cbab9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36427, "upload_time": "2009-09-08T21:26:03", "upload_time_iso_8601": "2009-09-08T21:26:03.260348Z", "url": "https://files.pythonhosted.org/packages/a0/41/208b557fa674ae7db3630acf7e8880c025964261efd12fd6939ec2651fc2/beatbox-16.0b1.tar.gz", "yanked": false}], "16.1": [{"comment_text": "", "digests": {"md5": "d69644031aaaac79b2fe5e55d9839b59", "sha256": "ec26158b69c410af5970c06de64c00d1bf55aabc8acc8661243fb5aa50d59b78"}, "downloads": -1, "filename": "beatbox-16.1.zip", "has_sig": true, "md5_digest": "d69644031aaaac79b2fe5e55d9839b59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45029, "upload_time": "2010-03-11T19:15:31", "upload_time_iso_8601": "2010-03-11T19:15:31.063348Z", "url": "https://files.pythonhosted.org/packages/20/65/756abc0a2048368b6d09e8425cd9cbbbdcb115789fd52e89a2c420c5d180/beatbox-16.1.zip", "yanked": false}], "19.0": [{"comment_text": "", "digests": {"md5": "0794983739709ecc8b27dca20e421fc0", "sha256": "84838080ba0fa6d5498c573508869755e64029bc056d6082bd9a1daab5ad65b7"}, "downloads": -1, "filename": "beatbox-19.0.zip", "has_sig": false, "md5_digest": "0794983739709ecc8b27dca20e421fc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45964, "upload_time": "2010-08-23T23:12:06", "upload_time_iso_8601": "2010-08-23T23:12:06.084682Z", "url": "https://files.pythonhosted.org/packages/6e/94/f3a60bfbbf915f51c14d79f52af92aaf4270a34a35c60acfac352f16627e/beatbox-19.0.zip", "yanked": false}], "20.0": [{"comment_text": "", "digests": {"md5": "c4e231701f732384c3e92f0357b8bf8a", "sha256": "0f7f04760fac3b9c9b89cdb647f0a8e75cea6e1771169287fa0710a1149b9a83"}, "downloads": -1, "filename": "beatbox-20.0.zip", "has_sig": true, "md5_digest": "c4e231701f732384c3e92f0357b8bf8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46199, "upload_time": "2010-11-30T23:31:08", "upload_time_iso_8601": "2010-11-30T23:31:08.238105Z", "url": "https://files.pythonhosted.org/packages/02/ff/e332f4a13f83dccb23993cad689a035ed8c67ac0815dd374e24277fcff4f/beatbox-20.0.zip", "yanked": false}], "32.0": [{"comment_text": "", "digests": {"md5": "654f72c043ae3aa548a80df06bff4a9d", "sha256": "c39dd6aad651e1409708350517d6a623c3f1f51b9543048c36495b95568c2af3"}, "downloads": -1, "filename": "beatbox-32.0.zip", "has_sig": false, "md5_digest": "654f72c043ae3aa548a80df06bff4a9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46612, "upload_time": "2014-12-01T23:49:34", "upload_time_iso_8601": "2014-12-01T23:49:34.283174Z", "url": "https://files.pythonhosted.org/packages/8a/20/d2fb36569023aa548af5f7cd9f434b5b035e7cec6d94de85f8f30b04d451/beatbox-32.0.zip", "yanked": false}], "32.1": [{"comment_text": "", "digests": {"md5": "db2cfbd6194b0862d7e63ac8de00c661", "sha256": "7bb27f4b35561678ee2b6e203f634030401b182de9b0a03f2504f5ce899f3c26"}, "downloads": -1, "filename": "beatbox-32.1.zip", "has_sig": false, "md5_digest": "db2cfbd6194b0862d7e63ac8de00c661", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46727, "upload_time": "2014-12-04T22:41:28", "upload_time_iso_8601": "2014-12-04T22:41:28.006865Z", "url": "https://files.pythonhosted.org/packages/25/5e/80102d878a6bd08711248c376daffec88762f6a674d80e2ce1a16a829b34/beatbox-32.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db2cfbd6194b0862d7e63ac8de00c661", "sha256": "7bb27f4b35561678ee2b6e203f634030401b182de9b0a03f2504f5ce899f3c26"}, "downloads": -1, "filename": "beatbox-32.1.zip", "has_sig": false, "md5_digest": "db2cfbd6194b0862d7e63ac8de00c661", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46727, "upload_time": "2014-12-04T22:41:28", "upload_time_iso_8601": "2014-12-04T22:41:28.006865Z", "url": "https://files.pythonhosted.org/packages/25/5e/80102d878a6bd08711248c376daffec88762f6a674d80e2ce1a16a829b34/beatbox-32.1.zip", "yanked": false}], "timestamp": "Thu May  7 22:37:55 2020"}