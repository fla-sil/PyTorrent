{"info": {"author": "Daniel Povey, Soroush Zargar, Mahsa Yarmohammadi, Jian Wu", "author_email": "dpovey@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: System :: Archiving :: Compression"], "description": "# lilcom\n\n\nThis package lossily compresses floating-point NumPy arrays\ninto byte strings, with an accuracy specified by the user.\nThe main anticipated use is in machine learning applications, for\nstoring things like training data and models.\n\nThis package requires Python 3 and is not compatible with Python 2.\n\n## Installation\n\n### Using PyPi\n\nFrom PyPi you can install this with just\n```\npip3 install lilcom\n```\n\n\n### Using Github Repository\nTo install lilcom first clone the repository;\n```\n\ngit clone git@github.com:danpovey/lilcom.git\n```\n\nthen run setup with `install` argument.\n```\npython3 setup.py install\n```\n(you may need to add the `--user` flag if you don't have system privileges).\nTo test it, you can then cd to `test` and run:\n\n```\npython3 test_interface.py\n```\n\n### How to use this compression method\n\nThe most common usage pattern will be as follows (showing Python code):\n```\n# Let a be a NumPy ndarray with type np.float32 or np.float64\n\n# compress a.\n\nimport lilcom\na_compressed = lilcom.compress(a)\n\n# decompress a\na_decompressed = lilcom.decompress(a_compressed)\n```\nNote: the compression is lossy so `a_decompressed` will not be\nexactly the same as `a`.  The amount of error is determined\nby the optional `tick_power` argument to lilcom.compress();\nthe maximum error per element is 2**(tick_power-1), e.g.\nfor tick_power=8, the maximum error per element is 1/512.\n\nThe algorithm regresses each element on the previous\nelement (for a 1-d array) or, for general n-d arrays,\nall the previous elements along all the axes, i.e.\nwe regress element a[i,j] on a[i-1,j] and a[i,j-1].\nThe regression coefficients are global\n\n\n## Technical details\n\nThe algorithm is based on LPC prediction: LPC coefficients are estimated and it\nis the residual from the LPC prediction that is coded.  The LPC coefficients are\nnot transmitted; they are worked out from the past samples.  The LPC order may\nbe chosen by the user in the range 0 to 14; the default is 4.  The residual is\ncoded with an an exponent and a mantissa, like floating point numbers.  Only 1\nbit per sample is used to encode the exponent; the reason this is feasible is\nthat it is the *difference* in the exponent from sample to sample that is\nactually encoded.  The algorithm works out the lowest codable sequence of\nexponents such that the mantissas are in the codable range.\n\nBecause the LPC coefficients are estimated from past samples, this algorithm\nis very vulnerable to transmission errors: even a single bit error can\nmake the entire file unreadable.  This is acceptable in the kinds of\napplications we have in mind (mainly machine learning).\n\nThe algorithm requires an exact bitwise correspondence between the LPC\ncomputations when compressing and decompressing, so all computations are done in\ninteger arithmetic and great care is taken to ensure that all arithmetic\noperations produce results that are fully defined by the C standard (this means\nthat we need to avoid signed integer overflow and signed right-shift).\n\nThe compression quality is very respectable; at the same bit-rate as MP3 we get\nbetter PSNR, i.e. less compression noise.  (However, bear in mind that MP3 is\noptimized for perceptual quality and not PSNR).  See\n`test/results/reconstruction-test.py` which does these comparisons.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danpovey/lilcom", "keywords": "compression numpy", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lilcom", "package_url": "https://pypi.org/project/lilcom/", "platform": "", "project_url": "https://pypi.org/project/lilcom/", "project_urls": {"Homepage": "https://github.com/danpovey/lilcom"}, "release_url": "https://pypi.org/project/lilcom/1.0.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Lossy-compression utility for sequence data in NumPy", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>lilcom</h1>\n<p>This package lossily compresses floating-point NumPy arrays\ninto byte strings, with an accuracy specified by the user.\nThe main anticipated use is in machine learning applications, for\nstoring things like training data and models.</p>\n<p>This package requires Python 3 and is not compatible with Python 2.</p>\n<h2>Installation</h2>\n<h3>Using PyPi</h3>\n<p>From PyPi you can install this with just</p>\n<pre><code>pip3 install lilcom\n</code></pre>\n<h3>Using Github Repository</h3>\n<p>To install lilcom first clone the repository;</p>\n<pre><code>\ngit clone git@github.com:danpovey/lilcom.git\n</code></pre>\n<p>then run setup with <code>install</code> argument.</p>\n<pre><code>python3 setup.py install\n</code></pre>\n<p>(you may need to add the <code>--user</code> flag if you don't have system privileges).\nTo test it, you can then cd to <code>test</code> and run:</p>\n<pre><code>python3 test_interface.py\n</code></pre>\n<h3>How to use this compression method</h3>\n<p>The most common usage pattern will be as follows (showing Python code):</p>\n<pre><code># Let a be a NumPy ndarray with type np.float32 or np.float64\n\n# compress a.\n\nimport lilcom\na_compressed = lilcom.compress(a)\n\n# decompress a\na_decompressed = lilcom.decompress(a_compressed)\n</code></pre>\n<p>Note: the compression is lossy so <code>a_decompressed</code> will not be\nexactly the same as <code>a</code>.  The amount of error is determined\nby the optional <code>tick_power</code> argument to lilcom.compress();\nthe maximum error per element is 2**(tick_power-1), e.g.\nfor tick_power=8, the maximum error per element is 1/512.</p>\n<p>The algorithm regresses each element on the previous\nelement (for a 1-d array) or, for general n-d arrays,\nall the previous elements along all the axes, i.e.\nwe regress element a[i,j] on a[i-1,j] and a[i,j-1].\nThe regression coefficients are global</p>\n<h2>Technical details</h2>\n<p>The algorithm is based on LPC prediction: LPC coefficients are estimated and it\nis the residual from the LPC prediction that is coded.  The LPC coefficients are\nnot transmitted; they are worked out from the past samples.  The LPC order may\nbe chosen by the user in the range 0 to 14; the default is 4.  The residual is\ncoded with an an exponent and a mantissa, like floating point numbers.  Only 1\nbit per sample is used to encode the exponent; the reason this is feasible is\nthat it is the <em>difference</em> in the exponent from sample to sample that is\nactually encoded.  The algorithm works out the lowest codable sequence of\nexponents such that the mantissas are in the codable range.</p>\n<p>Because the LPC coefficients are estimated from past samples, this algorithm\nis very vulnerable to transmission errors: even a single bit error can\nmake the entire file unreadable.  This is acceptable in the kinds of\napplications we have in mind (mainly machine learning).</p>\n<p>The algorithm requires an exact bitwise correspondence between the LPC\ncomputations when compressing and decompressing, so all computations are done in\ninteger arithmetic and great care is taken to ensure that all arithmetic\noperations produce results that are fully defined by the C standard (this means\nthat we need to avoid signed integer overflow and signed right-shift).</p>\n<p>The compression quality is very respectable; at the same bit-rate as MP3 we get\nbetter PSNR, i.e. less compression noise.  (However, bear in mind that MP3 is\noptimized for perceptual quality and not PSNR).  See\n<code>test/results/reconstruction-test.py</code> which does these comparisons.</p>\n\n          </div>"}, "last_serial": 7082321, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "b7d98a670d3f241011801e3e3895980b", "sha256": "46d278a1ec8c4e478a188a174c7578163e905200a2c2a5cfdcb59a64f02f0304"}, "downloads": -1, "filename": "lilcom-0.0.0-py3.7.egg", "has_sig": false, "md5_digest": "b7d98a670d3f241011801e3e3895980b", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 13634, "upload_time": "2019-10-22T17:48:19", "upload_time_iso_8601": "2019-10-22T17:48:19.998888Z", "url": "https://files.pythonhosted.org/packages/6d/9c/f23f72582343f1a5eb47dd11416b21315e9327e778100a662371d3cfeffb/lilcom-0.0.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5336f7796fc466835226fe3c245353ff", "sha256": "ae84590bf35385477b866de92f6c10c07e205a1584487d6af8debed1ebe88c0a"}, "downloads": -1, "filename": "lilcom-0.0.0-py3.7-macosx-10.14-x86_64.egg", "has_sig": false, "md5_digest": "5336f7796fc466835226fe3c245353ff", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 23848, "upload_time": "2019-10-22T17:48:17", "upload_time_iso_8601": "2019-10-22T17:48:17.564830Z", "url": "https://files.pythonhosted.org/packages/17/7f/7e7a41668c61c41b2e4bea5fe340237ed01a1d07e8515e30d9a9dd26dd86/lilcom-0.0.0-py3.7-macosx-10.14-x86_64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ef52b2b7f61dfd10e2fff6cebd25b5a", "sha256": "f5bf14fc8671bced4ca98c73cb5f42ec521270bce47cd5f30cc73ff554d6f096"}, "downloads": -1, "filename": "lilcom-0.0.0.tar.gz", "has_sig": false, "md5_digest": "5ef52b2b7f61dfd10e2fff6cebd25b5a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 52467, "upload_time": "2019-10-22T17:48:21", "upload_time_iso_8601": "2019-10-22T17:48:21.760848Z", "url": "https://files.pythonhosted.org/packages/74/be/05927e43b78b9ed156b3dff397a15c413510311d6d8756abb1729efeba65/lilcom-0.0.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "dfd70fd2c1dcbf356988132a464eba60", "sha256": "65449b02955608889288e617a040d3b862d8e22dca38726f07159cabbee45f4d"}, "downloads": -1, "filename": "lilcom-0.1.0-py3.7-macosx-10.14-x86_64.egg", "has_sig": false, "md5_digest": "dfd70fd2c1dcbf356988132a464eba60", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 21875, "upload_time": "2020-04-23T06:59:34", "upload_time_iso_8601": "2020-04-23T06:59:34.853802Z", "url": "https://files.pythonhosted.org/packages/61/9d/b46661f79e74aae7872040ca344312a4e0656b82f6431477331f6be933c2/lilcom-0.1.0-py3.7-macosx-10.14-x86_64.egg", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "034aa92c5f5808fd3865e9601a7ddb81", "sha256": "43b41bbeb7ed9229436ca69200f011b5b85a92f90caec9ce867b8e05144ccc2a"}, "downloads": -1, "filename": "lilcom-1.0.0-py3.7-macosx-10.14-x86_64.egg", "has_sig": false, "md5_digest": "034aa92c5f5808fd3865e9601a7ddb81", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 20922, "upload_time": "2020-04-23T06:59:36", "upload_time_iso_8601": "2020-04-23T06:59:36.111388Z", "url": "https://files.pythonhosted.org/packages/96/cf/6d4437cb9f58c8272dfe3e432bd32799cd13d8e505766d507182a4ab2da9/lilcom-1.0.0-py3.7-macosx-10.14-x86_64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "242b936168b707359ec7edf0c885624d", "sha256": "487f076783c11ed84d822250011310563ab9b5bc71314370549feee96e9aa8d2"}, "downloads": -1, "filename": "lilcom-1.0.0.tar.gz", "has_sig": false, "md5_digest": "242b936168b707359ec7edf0c885624d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24988, "upload_time": "2020-04-23T06:59:37", "upload_time_iso_8601": "2020-04-23T06:59:37.669592Z", "url": "https://files.pythonhosted.org/packages/01/5b/db6478a825d300a6a42beee6b8e31ed7ce48105cd73b87c73cce52aa8bd1/lilcom-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "034aa92c5f5808fd3865e9601a7ddb81", "sha256": "43b41bbeb7ed9229436ca69200f011b5b85a92f90caec9ce867b8e05144ccc2a"}, "downloads": -1, "filename": "lilcom-1.0.0-py3.7-macosx-10.14-x86_64.egg", "has_sig": false, "md5_digest": "034aa92c5f5808fd3865e9601a7ddb81", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 20922, "upload_time": "2020-04-23T06:59:36", "upload_time_iso_8601": "2020-04-23T06:59:36.111388Z", "url": "https://files.pythonhosted.org/packages/96/cf/6d4437cb9f58c8272dfe3e432bd32799cd13d8e505766d507182a4ab2da9/lilcom-1.0.0-py3.7-macosx-10.14-x86_64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "242b936168b707359ec7edf0c885624d", "sha256": "487f076783c11ed84d822250011310563ab9b5bc71314370549feee96e9aa8d2"}, "downloads": -1, "filename": "lilcom-1.0.0.tar.gz", "has_sig": false, "md5_digest": "242b936168b707359ec7edf0c885624d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24988, "upload_time": "2020-04-23T06:59:37", "upload_time_iso_8601": "2020-04-23T06:59:37.669592Z", "url": "https://files.pythonhosted.org/packages/01/5b/db6478a825d300a6a42beee6b8e31ed7ce48105cd73b87c73cce52aa8bd1/lilcom-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:55 2020"}