{"info": {"author": "loganluo", "author_email": "chong.luo@cidatahub.com", "bugtrack_url": null, "classifiers": [], "description": "==================\nfusiontree.upload\n==================\n\n    .. image:: ./docs/upload/images/coverage.svg\n\n\n\u6811\u878d\u6570\u636e\u878d\u5408\u5e73\u53f0\u6570\u636e\u4e0a\u4f20\u57fa\u7840\u6a21\u5757\uff0c\u4f5c\u4e3a\u662f\u6570\u636e\u6e90\u548c\u76ee\u6807\u8868\u7684\u8fde\u63a5\u5668\uff0c\u5b9e\u65bd\u56e2\u961f\u7528\u4e8e\u7f16\u5199\u4e0a\u4f20\u811a\u672c\uff0c\u5b58\u50a8\u5e73\u53f0\u7528\u4e8e\u8c03\u7528\u4e0a\u4f20\u811a\u672c\u3002\n\n    .. image:: docs/uploads/images/uploads\u5de5\u4f5c\u6d41\u7a0b.png\n\ninstall\n-------\n\ndownload from `fusionflow.upload <https://codeup.teambition.com/fusiontree/fusionplatform/fusionflow.upload>`_\nor pip install directly::\n\n    pip install git+https://codeup.teambition.com/fusiontree/fusionplatform/fusionflow.upload.git\n\n\nconfigure\n---------\n**script level configure**\n\nsome data-realted configuration must be specified to ensure\ndata transformed correctly for you bussiness logic\nlike *\"data region\"* related which timezone used to when save\ndate information. table object will use these configs\nwhen transform data from src to dest.\n\nglobal variables following pattern ``__upload_{name}__`` consider\nas configure settings, ``fusionflow.upload.SrcTables`` will\nfill up these configurations to tables found in scripts::\n\n    __upload_timezone__ = 'GMT+08'\n\n**instance and subclass level configs**\ninstance and subclass also can override these settings by pass\nparameters directly through instantiation and subclass attribute.\nlike other required parameters::\n\n    SubTable(Table):\n        timezone = 'GMT+08'\n\n\n    table = Table(timezone='GMT+08')\n\n\n.. caution::\n    subclass can directly interpret these settings on their declared\n    module, however instance can use module level configurations themself.\n\n    subclass declaration must be global variables\n\n\n\nusage\n------\n1. write source scripts\n~~~~~~~~~~~~~~~~~~~~~~~~\nthere are two ways to write source table extract scripts\n\n\n1. by subclass ``fusionflow.upload.Table``::\n\n\n    from fusionflow.upload import Table\n\n    class Employ(Table):\n        def extract(self):\n            yield [{\"colname\": \"colvalue\"}, ...]\n\n    ...\n\n\n2. by instantiation package-include subclass::\n\n    python\n    from datetime import *\n    from fusionflwo.upload.network import ApiTable\n\n    def parse_api_data(data):\n        rows = data[\"dataList\"]\n        {'cioStatus': 2, 'inTime': '2020-02-24 00:00:22', 'outTime': '2020-02-24 00:23:00', 'plateNo': '\u6caaBT2741', 'recordId': '33930092'}\n        for row in rows:\n            d = {}\n            for key, value in row.items():\n                if key in (\"inTime\", \"outTime\"):\n                    d[key] = datetime.strptime(value, \"%Y-%m-%d %H:%M:%S\")\n                elif key == \"recordId\":\n                    d[key] = int(value)\n                else:\n                    d[key] = value\n            yield d\n    parkcar_table = ApiTable(uri, table_name='parkcar_table', params={\"bizDate\": (lambda : (date.today() - timedelta(days=1)).strftime(\"%Y%m%d\"))}, parser=parse_api_data)\n\n\n2. parse source scripts\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nget table objects through scripts::\n\n    from fusionflow.upload import SrcTables\n\n    src_tables = SrcTable(\"path/to/src/script\")\n    print(src_tables.tables)\n\n\nextract data from table::\n\n\n    table1 = src_tables.tables[0]\n\n    # get table1 field type\n    fields = table1.fields\n\n    # extract data\n    # table object is iterator, can use in for loop\n    for row in table1:\n        print(row)\n\n\nDjango Itergration\n+++++++++++++++++++\n\n``Table`` class also provide a attribute ``django_fields``\nto convert field type\nto ``django.db.models.fields.Field``,\nto use this feature, use must install\n``django`` moduel manually, or through::\n\n    git clone git@codeup.teambition.com:fusiontree/fusionplatform/fusionflow.upload.git\n    pip install .[db]\n\nthe django_feilds can access from::\n\n    from fusionflow.upload.db.oracle import OraceDatabaseTable\n\n    table = OracleDatabaseTable(username=user,password=passwd, host='localhost')\n    print(table.django_fields)\n\n3. validation\n~~~~~~~~~~~~~~\n\ntables can add validator to  check input value is business\nor logical leagal , validator can added through\nsubclass parameter `validators`, instantiation parameter\n``validators``, or register through ``table.registe_validator``,\n\n**must register all validators before fetch any data**\n\ncurrect support two types of validator:\n\n1. row-leve validator (not implemented currently)\n2. field value validator\n\n**example**\n\nsubclass method::\n\n    class FileTable(Table):\n        def extract(self):\n            for data in emp_table():\n                yield data\n\n        def validate_empno(self, value):\n            assert int(value) < 7800, value\n\n\nregister in run time::\n\n    # at instantiation\n    def emp_ge_7600(value):\n        assert int(value) > 7600\n    f = FileTable(validate_empno=[emp_ge_7600])\n\n    # through api\n    validator_str = \"\"\"def empno_is_digit(value):\n       assert value.isdigit()\n    \"\"\"\n    f.registe_validator('empno', validator_str)\n\n    ```\n\n\ntest\n-----\nuse `pytest <https://docs.pytest.org/en/latest/contents.html>`_ test\nafter clone this repo,  run::\n\n    ./test\n\ntest also itegrate with `setuptools`, afte `git clone` source run::\n\n    python setup.py test\n\nsupport format\n-----------------\n\nthere types of easy-used subtable class provided,\ndirectly instantiate them\n\n* ``DatabaseTable`` -- RDMS table source\n* ``ApiTable`` -- application programming iterface, load from remote\n* ``FileTable`` -- excel, csv, tsv, xml like file\n\ncontact\n-----------\n`logan <chong.luo@cidatahub.com>`_\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fusionflow-upload", "package_url": "https://pypi.org/project/fusionflow-upload/", "platform": "", "project_url": "https://pypi.org/project/fusionflow-upload/", "project_urls": null, "release_url": "https://pypi.org/project/fusionflow-upload/0.1.5/", "requires_dist": ["Click (==7.0)", "cx-Oracle (==7.3.0)", "Django (==2.2.7)", "requests (==2.23.0)"], "requires_python": ">=3.3", "summary": "", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n<img alt=\"./docs/upload/images/coverage.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8d2319028c225fbf493be6719e042316bb78cec/2e2f646f63732f75706c6f61642f696d616765732f636f7665726167652e737667\">\n</blockquote>\n<p>\u6811\u878d\u6570\u636e\u878d\u5408\u5e73\u53f0\u6570\u636e\u4e0a\u4f20\u57fa\u7840\u6a21\u5757\uff0c\u4f5c\u4e3a\u662f\u6570\u636e\u6e90\u548c\u76ee\u6807\u8868\u7684\u8fde\u63a5\u5668\uff0c\u5b9e\u65bd\u56e2\u961f\u7528\u4e8e\u7f16\u5199\u4e0a\u4f20\u811a\u672c\uff0c\u5b58\u50a8\u5e73\u53f0\u7528\u4e8e\u8c03\u7528\u4e0a\u4f20\u811a\u672c\u3002</p>\n<blockquote>\n<img alt=\"docs/uploads/images/uploads\u5de5\u4f5c\u6d41\u7a0b.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a54a78c1dea77f0cf4cfda0c6f4fe0772430e683/646f63732f75706c6f6164732f696d616765732f75706c6f616473e5b7a5e4bd9ce6b581e7a88b2e706e67\">\n</blockquote>\n<div id=\"install\">\n<h2>install</h2>\n<p>download from <a href=\"https://codeup.teambition.com/fusiontree/fusionplatform/fusionflow.upload\" rel=\"nofollow\">fusionflow.upload</a>\nor pip install directly:</p>\n<pre>pip install git+https://codeup.teambition.com/fusiontree/fusionplatform/fusionflow.upload.git\n</pre>\n</div>\n<div id=\"configure\">\n<h2>configure</h2>\n<p><strong>script level configure</strong></p>\n<p>some data-realted configuration must be specified to ensure\ndata transformed correctly for you bussiness logic\nlike <em>\u201cdata region\u201d</em> related which timezone used to when save\ndate information. table object will use these configs\nwhen transform data from src to dest.</p>\n<p>global variables following pattern <tt>__upload_{name}__</tt> consider\nas configure settings, <tt>fusionflow.upload.SrcTables</tt> will\nfill up these configurations to tables found in scripts:</p>\n<pre>__upload_timezone__ = 'GMT+08'\n</pre>\n<p><strong>instance and subclass level configs</strong>\ninstance and subclass also can override these settings by pass\nparameters directly through instantiation and subclass attribute.\nlike other required parameters:</p>\n<pre>SubTable(Table):\n    timezone = 'GMT+08'\n\n\ntable = Table(timezone='GMT+08')\n</pre>\n<div>\n<p>Caution!</p>\n<p>subclass can directly interpret these settings on their declared\nmodule, however instance can use module level configurations themself.</p>\n<p>subclass declaration must be global variables</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>usage</h2>\n<div id=\"write-source-scripts\">\n<h3>1. write source scripts</h3>\n<p>there are two ways to write source table extract scripts</p>\n<ol>\n<li><p>by subclass <tt>fusionflow.upload.Table</tt>:</p>\n<pre>from fusionflow.upload import Table\n\nclass Employ(Table):\n    def extract(self):\n        yield [{\"colname\": \"colvalue\"}, ...]\n\n...\n</pre>\n</li>\n<li><p>by instantiation package-include subclass:</p>\n<pre>python\nfrom datetime import *\nfrom fusionflwo.upload.network import ApiTable\n\ndef parse_api_data(data):\n    rows = data[\"dataList\"]\n    {'cioStatus': 2, 'inTime': '2020-02-24 00:00:22', 'outTime': '2020-02-24 00:23:00', 'plateNo': '\u6caaBT2741', 'recordId': '33930092'}\n    for row in rows:\n        d = {}\n        for key, value in row.items():\n            if key in (\"inTime\", \"outTime\"):\n                d[key] = datetime.strptime(value, \"%Y-%m-%d %H:%M:%S\")\n            elif key == \"recordId\":\n                d[key] = int(value)\n            else:\n                d[key] = value\n        yield d\nparkcar_table = ApiTable(uri, table_name='parkcar_table', params={\"bizDate\": (lambda : (date.today() - timedelta(days=1)).strftime(\"%Y%m%d\"))}, parser=parse_api_data)\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"parse-source-scripts\">\n<h3>2. parse source scripts</h3>\n<p>get table objects through scripts:</p>\n<pre>from fusionflow.upload import SrcTables\n\nsrc_tables = SrcTable(\"path/to/src/script\")\nprint(src_tables.tables)\n</pre>\n<p>extract data from table:</p>\n<pre>table1 = src_tables.tables[0]\n\n# get table1 field type\nfields = table1.fields\n\n# extract data\n# table object is iterator, can use in for loop\nfor row in table1:\n    print(row)\n</pre>\n<div id=\"django-itergration\">\n<h4>Django Itergration</h4>\n<p><tt>Table</tt> class also provide a attribute <tt>django_fields</tt>\nto convert field type\nto <tt>django.db.models.fields.Field</tt>,\nto use this feature, use must install\n<tt>django</tt> moduel manually, or through:</p>\n<pre>git clone git@codeup.teambition.com:fusiontree/fusionplatform/fusionflow.upload.git\npip install .[db]\n</pre>\n<p>the django_feilds can access from:</p>\n<pre>from fusionflow.upload.db.oracle import OraceDatabaseTable\n\ntable = OracleDatabaseTable(username=user,password=passwd, host='localhost')\nprint(table.django_fields)\n</pre>\n</div>\n</div>\n<div id=\"validation\">\n<h3>3. validation</h3>\n<p>tables can add validator to  check input value is business\nor logical leagal , validator can added through\nsubclass parameter <cite>validators</cite>, instantiation parameter\n<tt>validators</tt>, or register through <tt>table.registe_validator</tt>,</p>\n<p><strong>must register all validators before fetch any data</strong></p>\n<p>currect support two types of validator:</p>\n<ol>\n<li>row-leve validator (not implemented currently)</li>\n<li>field value validator</li>\n</ol>\n<p><strong>example</strong></p>\n<p>subclass method:</p>\n<pre>class FileTable(Table):\n    def extract(self):\n        for data in emp_table():\n            yield data\n\n    def validate_empno(self, value):\n        assert int(value) &lt; 7800, value\n</pre>\n<p>register in run time:</p>\n<pre># at instantiation\ndef emp_ge_7600(value):\n    assert int(value) &gt; 7600\nf = FileTable(validate_empno=[emp_ge_7600])\n\n# through api\nvalidator_str = \"\"\"def empno_is_digit(value):\n   assert value.isdigit()\n\"\"\"\nf.registe_validator('empno', validator_str)\n\n```\n</pre>\n</div>\n</div>\n<div id=\"test\">\n<h2>test</h2>\n<p>use <a href=\"https://docs.pytest.org/en/latest/contents.html\" rel=\"nofollow\">pytest</a> test\nafter clone this repo,  run:</p>\n<pre>./test\n</pre>\n<p>test also itegrate with <cite>setuptools</cite>, afte <cite>git clone</cite> source run:</p>\n<pre>python setup.py test\n</pre>\n</div>\n<div id=\"support-format\">\n<h2>support format</h2>\n<p>there types of easy-used subtable class provided,\ndirectly instantiate them</p>\n<ul>\n<li><tt>DatabaseTable</tt> \u2013 RDMS table source</li>\n<li><tt>ApiTable</tt> \u2013 application programming iterface, load from remote</li>\n<li><tt>FileTable</tt> \u2013 excel, csv, tsv, xml like file</li>\n</ul>\n</div>\n<div id=\"contact\">\n<h2>contact</h2>\n<p><a href=\"mailto:chong.luo%40cidatahub.com\">logan</a></p>\n</div>\n\n          </div>"}, "last_serial": 6800088, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "a4ce06137ad24062d45bcccf402df40e", "sha256": "3d5d1bc7362c9f083043d49d07beed727595161abaa4e36c6e98ee2206c8b006"}, "downloads": -1, "filename": "fusionflow.upload-0.0.6-py3.6.egg", "has_sig": false, "md5_digest": "a4ce06137ad24062d45bcccf402df40e", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.3", "size": 38330, "upload_time": "2020-03-04T14:49:54", "upload_time_iso_8601": "2020-03-04T14:49:54.552090Z", "url": "https://files.pythonhosted.org/packages/09/dd/bdffb9e01e0061d3663a1e1619b9e8c07d46f5790ea274aa70b666002f45/fusionflow.upload-0.0.6-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c985ffe683e313bb506d5356fbda359", "sha256": "8967313dfd90da1e0e8763d5ff718c20d9a3ccb4d2c4d3fa66cf2b98b6a1fa42"}, "downloads": -1, "filename": "fusionflow_upload-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6c985ffe683e313bb506d5356fbda359", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 16110, "upload_time": "2020-03-04T15:11:00", "upload_time_iso_8601": "2020-03-04T15:11:00.090862Z", "url": "https://files.pythonhosted.org/packages/a8/61/aa97e64a1fc3d46fcb7987f789719353a7780db2996993a76260b2a76018/fusionflow_upload-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1efd402c2a88eb39ea3d604c470e9d31", "sha256": "25c26cfb47664204db914d44ee2f537ec11f5a940c056556d5a3f4628748edaa"}, "downloads": -1, "filename": "fusionflow.upload-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1efd402c2a88eb39ea3d604c470e9d31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 15461, "upload_time": "2020-03-05T07:31:24", "upload_time_iso_8601": "2020-03-05T07:31:24.247703Z", "url": "https://files.pythonhosted.org/packages/53/92/27c1d5cfcc8a43d369f5d3478f8a9ebec3aaf3458cc35e2f04a19f3bb77c/fusionflow.upload-0.0.6-py3-none-any.whl", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "108e803ac3e588d8a5665a0046794396", "sha256": "072d6ee59dd0cf169eafe08929b80afe5573278bf4a077f73ac82988dc34a85d"}, "downloads": -1, "filename": "fusionflow_upload-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "108e803ac3e588d8a5665a0046794396", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 17997, "upload_time": "2020-03-04T15:49:09", "upload_time_iso_8601": "2020-03-04T15:49:09.571655Z", "url": "https://files.pythonhosted.org/packages/14/bf/b57b57571cd376a4befdbb3fbece83e7e22055bd512b47245357358f343d/fusionflow_upload-0.0.7-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "8a89e0c5f6cc4eb03fd0d742c63977ec", "sha256": "d24fe7b7aa2ad01ab680d68e319958cb1061af3011e7ee936fc112cb1d199f00"}, "downloads": -1, "filename": "fusionflow_upload-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8a89e0c5f6cc4eb03fd0d742c63977ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 17349, "upload_time": "2020-03-10T07:25:51", "upload_time_iso_8601": "2020-03-10T07:25:51.266540Z", "url": "https://files.pythonhosted.org/packages/49/ea/2c098b1f8178085d88ef9d851bdaf13f0408829cc6b6352f14d94aa7b153/fusionflow_upload-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0754d5610a4ecbf6d544e20e8741f8f3", "sha256": "73a6c7592723957abc4b43cd20829477f4513f05a8885aca7b4ee645a505a1a3"}, "downloads": -1, "filename": "fusionflow_upload-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0754d5610a4ecbf6d544e20e8741f8f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 17350, "upload_time": "2020-03-05T12:41:00", "upload_time_iso_8601": "2020-03-05T12:41:00.075488Z", "url": "https://files.pythonhosted.org/packages/ef/75/7b7503d740a32462ed4cdfc083791f3d6b9bc0451f4a999354bd9ebce0ab/fusionflow_upload-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0f728054a747db6410ab71d4c1f07021", "sha256": "c5721ed87caf94cb1e3a83284187ebbd5748b1c6d61c634737dd96f59824ec55"}, "downloads": -1, "filename": "fusionflow_upload-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0f728054a747db6410ab71d4c1f07021", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 21510, "upload_time": "2020-03-10T07:25:53", "upload_time_iso_8601": "2020-03-10T07:25:53.164677Z", "url": "https://files.pythonhosted.org/packages/ac/71/f7ee5b451fda9757b63602de4ed09f8218d5f6743b8481aff7877c7c69e3/fusionflow_upload-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "343e35991070cfe8eda4dea93e6f4543", "sha256": "c4c1e282471a0cfaa5395d19d8562be065d0b735ab4121ec368b1c96dc38cd41"}, "downloads": -1, "filename": "fusionflow_upload-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "343e35991070cfe8eda4dea93e6f4543", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 22396, "upload_time": "2020-03-11T02:36:54", "upload_time_iso_8601": "2020-03-11T02:36:54.576178Z", "url": "https://files.pythonhosted.org/packages/b6/88/ccce10f5ac8594f7c94c70734b4a6ed4adc7c89713d4dc6f1cd3f17a1812/fusionflow_upload-0.1.3-py3-none-any.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "c7d8a46fb5015c2af04d9f61e7b12c31", "sha256": "dc1480d2030f0050317a23f9b02e82605bd470b8dc1e7d6b25db1a14242bc00a"}, "downloads": -1, "filename": "fusionflow_upload-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c7d8a46fb5015c2af04d9f61e7b12c31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 22587, "upload_time": "2020-03-12T10:35:45", "upload_time_iso_8601": "2020-03-12T10:35:45.501975Z", "url": "https://files.pythonhosted.org/packages/9d/77/9a8cf00a2ae5c1a67861566ded1ef0bf0de7b80096782764a7ff381bdd16/fusionflow_upload-0.1.4-py3-none-any.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "05b13aeaf5857615d3ee7b264de1e8e4", "sha256": "4be23a6c8a01947142864e4db91cffcbf9a4b4350c2d57667beb9e41c14f35fa"}, "downloads": -1, "filename": "fusionflow_upload-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "05b13aeaf5857615d3ee7b264de1e8e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 22986, "upload_time": "2020-03-12T15:36:03", "upload_time_iso_8601": "2020-03-12T15:36:03.561252Z", "url": "https://files.pythonhosted.org/packages/ad/34/22f803ce421a8f61eab6a9e94ccfc8b0576d522c869ca1a1fecf81e3969c/fusionflow_upload-0.1.5-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "05b13aeaf5857615d3ee7b264de1e8e4", "sha256": "4be23a6c8a01947142864e4db91cffcbf9a4b4350c2d57667beb9e41c14f35fa"}, "downloads": -1, "filename": "fusionflow_upload-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "05b13aeaf5857615d3ee7b264de1e8e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 22986, "upload_time": "2020-03-12T15:36:03", "upload_time_iso_8601": "2020-03-12T15:36:03.561252Z", "url": "https://files.pythonhosted.org/packages/ad/34/22f803ce421a8f61eab6a9e94ccfc8b0576d522c869ca1a1fecf81e3969c/fusionflow_upload-0.1.5-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:59:35 2020"}