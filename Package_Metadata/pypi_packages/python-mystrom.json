{"info": {"author": "Fabian Affolter", "author_email": "fabian@affolter-engineering.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Utilities"], "description": "python-mystrom |License| |PyPI|\n===================================\n\nAsynchronous Python API client for interacting with `myStrom <https://mystrom.ch>`_\ndevices.\n\nThis module is not official, developed, supported or endorsed by myStrom AG.\nFor questions and other inquiries, use the issue tracker in this repo please.\n\nWithout the support of myStrom AG it would have taken much longer to create\nthis module which is the base for the integration into\n`Home Assistant <https://home-assistant.io>`_. myStrom AG has provided and is\nstill providing hardware, valuable feedback and advice. Their continuous\nsupport make further development of this module possible.\n\nRequirements\n------------\n\nYou need to have `Python <https://www.python.org>`_ installed.\n\n- `myStrom <https://mystrom.ch>`_ device (bulb, plug or button)\n- The ``python-mystrom`` requirements\n- Network connection\n- Devices connected to your network\n\nInstallation\n------------\n\nThe package is available in the `Python Package Index <https://pypi.python.org/>`_ .\n\n.. code:: bash\n\n    $ pip3 install python-mystrom\n\nPlug/switch\n-----------\n\nAt the moment the following endpoints are covered according `https://api.mystrom.ch <https://api.mystrom.ch>`_:\n\n- ``/report``: for getting the current state and the power consumption\n- ``/relay``: for setting the relay state\n\nYou will still be able to use your device with the smartphone application,\n``curl`` or other tools. The samples below shows how to use the switch with\n``httpie`` and ``curl`` along with ``python-mystrom``.\n\n.. code:: bash\n\n    $ http http://IP_ADDRESS_PLUG/report\n    HTTP/1.1 200 OK\n    Content-Length: 39\n    Content-Type: application/json\n    Date: Mon, 15 Feb 2016 17:52:21 GMT\n\n    {\n        \"power\": 51.630947,\n        \"relay\": true\n    }\n\n.. code:: bash\n\n    $ curl -X GET http://IP_ADDRESS_PLUG/relay?state=1\n\n\nBulb\n----\n\nIf the bulb is on then you should be able to retrieve the current state of\nthe bulb.\n\nBrowse to http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB or use a\ncommand-line tool.\n\n.. code:: bash\n\n    $ curl -d \"color=0;0;100\" -d \"action=on\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\n    {\n\t\"5DFF7FAHZ987\": \t{\n\t\t\"on\": true,\n\t\t\"color\": \"0;0;100\",\n\t\t\"mode\": \"hsv\",\n\t\t\"ramp\": 100,\n\t\t\"notifyurl\": \"\"\n\t    }\n    }\n\nThe bulbs are not able to handle payload formatted as JSON. It's required to\nuse ``application/x-www-form-urlencoded``. Keep that in mind if something is\nnot working, especially around setting the color with HSV.\n\nIf you are planning to use your bulbs with `Home Assistant <https://home-assistant.io>`_\nset the bulb to a state from `Colors` with the app or use the command below.\n\n.. code:: bash\n\n    $ curl -d \"color=0;0;100\" IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\n\n\nSet State\n`````````\nYou can set the state with a POST request and a payload.\n\n- **on**: ``curl -d \"action=on\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB``\n- **off**:  ``curl -d \"action=off\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB``\n- **toggle**: ``$ curl -d \"action=toggle\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB``\n\nSet Color RGB\n`````````````\nOne of the supported modes for setting the color is **RBG**.\n\n- **white**: ``$ curl -d \"color=FF000000\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB``\n- **red**: ``$ curl -d \"color=00FF0000\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB``\n- **green**: ``$ curl -d \"color=0000FF00\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB``\n- **blue**: ``$ curl -d \"color=000000FF\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB``\n\nSet Color HSV (Hue, Saturation, Value)\n``````````````````````````````````````\nIt's also possible to use **HSV**.\n\n.. code:: bash\n\n    $ curl -d \"color=0;0;100\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\n\nWhile \"color=\" is composed with hue, saturation, and value.\n\nSet Mono (white)\n````````````````\nIf you only want to set the \"white\" color of the bulb, use **mono**.\n\n.. code:: bash\n\n    $ curl -d \"color=10;100\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\n\n\"color=\" contains the value for the color temperature (from 1 to 18) and the\nbrightness (from 0 to 100).\n\nDimming (ramp)\n``````````````\nAdd **ramp** and an interval to set up the transition time while changing\ncolors.\n\n.. code:: bash\n\n    $ curl -d \"action=on&ramp=1000&color=00FF0000\" http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\n\nThe unit of measurement for ramp is milliseconds (ms).\n\nButton\n------\nThe buttons can be set with the myStrom app or directly via HTTP requests.\n\nTo set the configuration the payload must contains the relevant details for\nthe actions:\n\n``$ curl -v -d \"single=<url>&double=<url>&long=<url>&touch=<url>\" http://IP_ADDRESS_BUTTON/api/v1/device/MAC_ADDRESS_BUTTON``\n\nAvailable actions:\n\n- **single**: Short push (approx. 1/2 seconds)\n- **double**: 2x sequential short pushes (within 2 seconds)\n- **long**: Long push (approx. 2 seconds)\n- **touch**: Touch of the button's surface (only affective for the WiFi\n  Button +)\n\nThe button is set up to extend the life span of the battery as much as\npossible. This means that only within the first 3 minutes or when connected\nto an USB port/USB charger and the battery is not full, the button is able\nto receive configuration information or publish its details.\n\n``mystrom`` helper tool\n-----------------------\nThe command-line tool ``mystrom`` can help to set up the buttons and get the\ndetails from bulbs and plugs.\n\n.. code:: bash\n\n   $ mystrom\n   Usage: mystrom [OPTIONS] COMMAND [ARGS]...\n\n     Simple command-line tool to get and set the values of a myStrom devices.\n\n     This tool can set the targets of a myStrom button for the different\n     available actions single, double, long and touch.\n\n   Options:\n     --version  Show the version and exit.\n     --help     Show this message and exit.\n\n   Commands:\n     bulb    Get and set details of a myStrom bulb.\n     button  Get and set details of a myStrom button.\n     config  Get and set the configuration of a myStrom...\n\n\nThe examples shows how to get the details of a given bulb.\n\n.. code:: bash\n\n   $ mystrom config read\n   IP address of the myStrom device: IP_ADDRESS_BULB\n   MAC address of the device: MAC_ADDRESS_BULB\n   Read configuration from IP_ADDRESS_BULB\n   {\n      'MAC_ADDRESS_BULB':{\n         'type':'rgblamp',\n         'battery':False,\n         'reachable':True,\n         'meshroot':False,\n         'on':True,\n         'color':'191;90;14',\n         'mode':'hsv',\n         'ramp':100,\n         'power':0.953,\n         'fw_version':'2.25'\n      }\n   }\n\nExample usage of the module\n---------------------------\nThe sample below shows how to use this Python module.\n\n.. code:: python\n\n    import pymystrom\n\n    plug = pymystrom.MyStromPlug('IP_ADDRESS_PLUG')\n\n    # Preserve state\n    STATE_ON = plug.get_relay_state()\n\n    # Switch relay on if the plug is currently off\n    if not STATE_ON:\n        print(\"Relay will be switched on\")\n        plug.set_relay_on()\n        # Wait a few seconds to get a reading of the power consumption\n        print(\"Waiting for a couple of seconds...\")\n        time.sleep(10)\n\n    # Get the new state of the switch\n    print(\"Relay state:\", plug.get_relay_state())\n    print(\"Power consumption:\", plug.get_consumption())\n\n    # Switch relay off if it was off.\n    if not STATE_ON:\n        plug.set_relay_off()\n\nExamples for the bulb can be found in the directory ``examples``.\n\nLicense\n-------\n\n``python-mystrom`` is licensed under MIT, for more details check LICENSE.\n\n.. |License| image:: https://img.shields.io/badge/License-MIT-green.svg\n   :target: https://pypi.python.org/pypi/python-mystrom\n   :alt: License\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/python-mystrom.svg\n   :target: https://pypi.python.org/pypi/python-mystrom\n   :alt: PyPI release\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fabaff/python-mystrom", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-mystrom", "package_url": "https://pypi.org/project/python-mystrom/", "platform": "", "project_url": "https://pypi.org/project/python-mystrom/", "project_urls": {"Homepage": "https://github.com/fabaff/python-mystrom"}, "release_url": "https://pypi.org/project/python-mystrom/1.1.2/", "requires_dist": null, "requires_python": "", "summary": "Asynchronous Python API client for interacting with myStrom devices", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Asynchronous Python API client for interacting with <a href=\"https://mystrom.ch\" rel=\"nofollow\">myStrom</a>\ndevices.</p>\n<p>This module is not official, developed, supported or endorsed by myStrom AG.\nFor questions and other inquiries, use the issue tracker in this repo please.</p>\n<p>Without the support of myStrom AG it would have taken much longer to create\nthis module which is the base for the integration into\n<a href=\"https://home-assistant.io\" rel=\"nofollow\">Home Assistant</a>. myStrom AG has provided and is\nstill providing hardware, valuable feedback and advice. Their continuous\nsupport make further development of this module possible.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>You need to have <a href=\"https://www.python.org\" rel=\"nofollow\">Python</a> installed.</p>\n<ul>\n<li><a href=\"https://mystrom.ch\" rel=\"nofollow\">myStrom</a> device (bulb, plug or button)</li>\n<li>The <tt><span class=\"pre\">python-mystrom</span></tt> requirements</li>\n<li>Network connection</li>\n<li>Devices connected to your network</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The package is available in the <a href=\"https://pypi.python.org/\" rel=\"nofollow\">Python Package Index</a> .</p>\n<pre>$ pip3 install python-mystrom\n</pre>\n</div>\n<div id=\"plug-switch\">\n<h2>Plug/switch</h2>\n<p>At the moment the following endpoints are covered according <a href=\"https://api.mystrom.ch\" rel=\"nofollow\">https://api.mystrom.ch</a>:</p>\n<ul>\n<li><tt>/report</tt>: for getting the current state and the power consumption</li>\n<li><tt>/relay</tt>: for setting the relay state</li>\n</ul>\n<p>You will still be able to use your device with the smartphone application,\n<tt>curl</tt> or other tools. The samples below shows how to use the switch with\n<tt>httpie</tt> and <tt>curl</tt> along with <tt><span class=\"pre\">python-mystrom</span></tt>.</p>\n<pre>$ http http://IP_ADDRESS_PLUG/report\nHTTP/1.1 <span class=\"m\">200</span> OK\nContent-Length: <span class=\"m\">39</span>\nContent-Type: application/json\nDate: Mon, <span class=\"m\">15</span> Feb <span class=\"m\">2016</span> <span class=\"m\">17</span>:52:21 GMT\n\n<span class=\"o\">{</span>\n    <span class=\"s2\">\"power\"</span>: <span class=\"m\">51</span>.630947,\n    <span class=\"s2\">\"relay\"</span>: <span class=\"nb\">true</span>\n<span class=\"o\">}</span>\n</pre>\n<pre>$ curl -X GET http://IP_ADDRESS_PLUG/relay?state<span class=\"o\">=</span><span class=\"m\">1</span>\n</pre>\n</div>\n<div id=\"bulb\">\n<h2>Bulb</h2>\n<p>If the bulb is on then you should be able to retrieve the current state of\nthe bulb.</p>\n<p>Browse to <a href=\"http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\" rel=\"nofollow\">http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB</a> or use a\ncommand-line tool.</p>\n<pre>$ curl -d <span class=\"s2\">\"color=0;0;100\"</span> -d <span class=\"s2\">\"action=on\"</span> http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\n<span class=\"o\">{</span>\n    <span class=\"s2\">\"5DFF7FAHZ987\"</span>:         <span class=\"o\">{</span>\n            <span class=\"s2\">\"on\"</span>: true,\n            <span class=\"s2\">\"color\"</span>: <span class=\"s2\">\"0;0;100\"</span>,\n            <span class=\"s2\">\"mode\"</span>: <span class=\"s2\">\"hsv\"</span>,\n            <span class=\"s2\">\"ramp\"</span>: <span class=\"m\">100</span>,\n            <span class=\"s2\">\"notifyurl\"</span>: <span class=\"s2\">\"\"</span>\n        <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n<p>The bulbs are not able to handle payload formatted as JSON. It\u2019s required to\nuse <tt><span class=\"pre\">application/x-www-form-urlencoded</span></tt>. Keep that in mind if something is\nnot working, especially around setting the color with HSV.</p>\n<p>If you are planning to use your bulbs with <a href=\"https://home-assistant.io\" rel=\"nofollow\">Home Assistant</a>\nset the bulb to a state from <cite>Colors</cite> with the app or use the command below.</p>\n<pre>$ curl -d <span class=\"s2\">\"color=0;0;100\"</span> IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\n</pre>\n<div id=\"set-state\">\n<h3>Set State</h3>\n<p>You can set the state with a POST request and a payload.</p>\n<ul>\n<li><strong>on</strong>: <tt>curl <span class=\"pre\">-d</span> \"action=on\" <span class=\"pre\">http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB</span></tt></li>\n<li><strong>off</strong>:  <tt>curl <span class=\"pre\">-d</span> \"action=off\" <span class=\"pre\">http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB</span></tt></li>\n<li><strong>toggle</strong>: <tt>$ curl <span class=\"pre\">-d</span> \"action=toggle\" <span class=\"pre\">http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB</span></tt></li>\n</ul>\n</div>\n<div id=\"set-color-rgb\">\n<h3>Set Color RGB</h3>\n<p>One of the supported modes for setting the color is <strong>RBG</strong>.</p>\n<ul>\n<li><strong>white</strong>: <tt>$ curl <span class=\"pre\">-d</span> \"color=FF000000\" <span class=\"pre\">http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB</span></tt></li>\n<li><strong>red</strong>: <tt>$ curl <span class=\"pre\">-d</span> \"color=00FF0000\" <span class=\"pre\">http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB</span></tt></li>\n<li><strong>green</strong>: <tt>$ curl <span class=\"pre\">-d</span> \"color=0000FF00\" <span class=\"pre\">http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB</span></tt></li>\n<li><strong>blue</strong>: <tt>$ curl <span class=\"pre\">-d</span> \"color=000000FF\" <span class=\"pre\">http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB</span></tt></li>\n</ul>\n</div>\n<div id=\"set-color-hsv-hue-saturation-value\">\n<h3>Set Color HSV (Hue, Saturation, Value)</h3>\n<p>It\u2019s also possible to use <strong>HSV</strong>.</p>\n<pre>$ curl -d <span class=\"s2\">\"color=0;0;100\"</span> http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\n</pre>\n<p>While \u201ccolor=\u201d is composed with hue, saturation, and value.</p>\n</div>\n<div id=\"set-mono-white\">\n<h3>Set Mono (white)</h3>\n<p>If you only want to set the \u201cwhite\u201d color of the bulb, use <strong>mono</strong>.</p>\n<pre>$ curl -d <span class=\"s2\">\"color=10;100\"</span> http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\n</pre>\n<p>\u201ccolor=\u201d contains the value for the color temperature (from 1 to 18) and the\nbrightness (from 0 to 100).</p>\n</div>\n<div id=\"dimming-ramp\">\n<h3>Dimming (ramp)</h3>\n<p>Add <strong>ramp</strong> and an interval to set up the transition time while changing\ncolors.</p>\n<pre>$ curl -d <span class=\"s2\">\"action=on&amp;ramp=1000&amp;color=00FF0000\"</span> http://IP_ADDRESS_BULB/api/v1/device/MAC_ADDRESS_BULB\n</pre>\n<p>The unit of measurement for ramp is milliseconds (ms).</p>\n</div>\n</div>\n<div id=\"button\">\n<h2>Button</h2>\n<p>The buttons can be set with the myStrom app or directly via HTTP requests.</p>\n<p>To set the configuration the payload must contains the relevant details for\nthe actions:</p>\n<p><tt>$ curl <span class=\"pre\">-v</span> <span class=\"pre\">-d</span> <span class=\"pre\">\"single=&lt;url&gt;&amp;double=&lt;url&gt;&amp;long=&lt;url&gt;&amp;touch=&lt;url&gt;\"</span> <span class=\"pre\">http://IP_ADDRESS_BUTTON/api/v1/device/MAC_ADDRESS_BUTTON</span></tt></p>\n<p>Available actions:</p>\n<ul>\n<li><strong>single</strong>: Short push (approx. 1/2 seconds)</li>\n<li><strong>double</strong>: 2x sequential short pushes (within 2 seconds)</li>\n<li><strong>long</strong>: Long push (approx. 2 seconds)</li>\n<li><strong>touch</strong>: Touch of the button\u2019s surface (only affective for the WiFi\nButton +)</li>\n</ul>\n<p>The button is set up to extend the life span of the battery as much as\npossible. This means that only within the first 3 minutes or when connected\nto an USB port/USB charger and the battery is not full, the button is able\nto receive configuration information or publish its details.</p>\n</div>\n<div id=\"mystrom-helper-tool\">\n<h2><tt>mystrom</tt> helper tool</h2>\n<p>The command-line tool <tt>mystrom</tt> can help to set up the buttons and get the\ndetails from bulbs and plugs.</p>\n<pre>$ mystrom\nUsage: mystrom <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n\n  Simple command-line tool to get and <span class=\"nb\">set</span> the values of a myStrom devices.\n\n  This tool can <span class=\"nb\">set</span> the targets of a myStrom button <span class=\"k\">for</span> the different\n  available actions single, double, long and touch.\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  bulb    Get and <span class=\"nb\">set</span> details of a myStrom bulb.\n  button  Get and <span class=\"nb\">set</span> details of a myStrom button.\n  config  Get and <span class=\"nb\">set</span> the configuration of a myStrom...\n</pre>\n<p>The examples shows how to get the details of a given bulb.</p>\n<pre>$ mystrom config <span class=\"nb\">read</span>\nIP address of the myStrom device: IP_ADDRESS_BULB\nMAC address of the device: MAC_ADDRESS_BULB\nRead configuration from IP_ADDRESS_BULB\n<span class=\"o\">{</span>\n   <span class=\"s1\">'MAC_ADDRESS_BULB'</span>:<span class=\"o\">{</span>\n      <span class=\"s1\">'type'</span>:<span class=\"s1\">'rgblamp'</span>,\n      <span class=\"s1\">'battery'</span>:False,\n      <span class=\"s1\">'reachable'</span>:True,\n      <span class=\"s1\">'meshroot'</span>:False,\n      <span class=\"s1\">'on'</span>:True,\n      <span class=\"s1\">'color'</span>:<span class=\"s1\">'191;90;14'</span>,\n      <span class=\"s1\">'mode'</span>:<span class=\"s1\">'hsv'</span>,\n      <span class=\"s1\">'ramp'</span>:100,\n      <span class=\"s1\">'power'</span>:0.953,\n      <span class=\"s1\">'fw_version'</span>:<span class=\"s1\">'2.25'</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<div id=\"example-usage-of-the-module\">\n<h2>Example usage of the module</h2>\n<p>The sample below shows how to use this Python module.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pymystrom</span>\n\n<span class=\"n\">plug</span> <span class=\"o\">=</span> <span class=\"n\">pymystrom</span><span class=\"o\">.</span><span class=\"n\">MyStromPlug</span><span class=\"p\">(</span><span class=\"s1\">'IP_ADDRESS_PLUG'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Preserve state</span>\n<span class=\"n\">STATE_ON</span> <span class=\"o\">=</span> <span class=\"n\">plug</span><span class=\"o\">.</span><span class=\"n\">get_relay_state</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Switch relay on if the plug is currently off</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">STATE_ON</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Relay will be switched on\"</span><span class=\"p\">)</span>\n    <span class=\"n\">plug</span><span class=\"o\">.</span><span class=\"n\">set_relay_on</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Wait a few seconds to get a reading of the power consumption</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Waiting for a couple of seconds...\"</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the new state of the switch</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Relay state:\"</span><span class=\"p\">,</span> <span class=\"n\">plug</span><span class=\"o\">.</span><span class=\"n\">get_relay_state</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Power consumption:\"</span><span class=\"p\">,</span> <span class=\"n\">plug</span><span class=\"o\">.</span><span class=\"n\">get_consumption</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Switch relay off if it was off.</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">STATE_ON</span><span class=\"p\">:</span>\n    <span class=\"n\">plug</span><span class=\"o\">.</span><span class=\"n\">set_relay_off</span><span class=\"p\">()</span>\n</pre>\n<p>Examples for the bulb can be found in the directory <tt>examples</tt>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><tt><span class=\"pre\">python-mystrom</span></tt> is licensed under MIT, for more details check LICENSE.</p>\n</div>\n\n          </div>"}, "last_serial": 7001818, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "dcdbe66efd4839b77947425af14e8507", "sha256": "e6cebc8c5a031b633371a08cc61488754185e9f82ffd5eeea99a715b18f9d6fc"}, "downloads": -1, "filename": "python-mystrom-0.2.1.tar.gz", "has_sig": false, "md5_digest": "dcdbe66efd4839b77947425af14e8507", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2173, "upload_time": "2016-02-17T23:28:55", "upload_time_iso_8601": "2016-02-17T23:28:55.077670Z", "url": "https://files.pythonhosted.org/packages/d8/64/e4003bbc1968daa0cb7a361e8238d8e86d0c6977b301537962d047bda797/python-mystrom-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "0ee13aa521c9cf61ce53d2d8f010a047", "sha256": "aa164f4cafbd6e1e99d5d8caa4b3b3726758a1ff3591da1dbd30eedf36106d48"}, "downloads": -1, "filename": "python-mystrom-0.2.2.tar.gz", "has_sig": false, "md5_digest": "0ee13aa521c9cf61ce53d2d8f010a047", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2287, "upload_time": "2016-02-17T23:32:24", "upload_time_iso_8601": "2016-02-17T23:32:24.605197Z", "url": "https://files.pythonhosted.org/packages/63/5d/478a1007e4d42f4b4936aaeba7fa975a9fa20b899df55167dcc73b1b1ba4/python-mystrom-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "6f18c2fca5a9f8bcce598264477f7576", "sha256": "0f00136fb5908842d5396af513d94b0c8c4cbdac6fd16f7fb24f322843b1e33d"}, "downloads": -1, "filename": "python-mystrom-0.2.3.tar.gz", "has_sig": false, "md5_digest": "6f18c2fca5a9f8bcce598264477f7576", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2451, "upload_time": "2016-03-25T23:41:21", "upload_time_iso_8601": "2016-03-25T23:41:21.802079Z", "url": "https://files.pythonhosted.org/packages/48/78/d95caba887a49d116b44033405672d8e96a48992214a272860caee471c1a/python-mystrom-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "63595129472e687fe411cd63c2cc8adf", "sha256": "05de3eaa6e2f75a854fc9f1dfec0cfa196fdae85116ada3e3f01c9a12463d645"}, "downloads": -1, "filename": "python-mystrom-0.2.4.tar.gz", "has_sig": false, "md5_digest": "63595129472e687fe411cd63c2cc8adf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2504, "upload_time": "2016-06-27T12:24:47", "upload_time_iso_8601": "2016-06-27T12:24:47.299877Z", "url": "https://files.pythonhosted.org/packages/8c/57/969d5554a0e9d4f46eb13d0c683fb1f5c84eb49b80f84899e71f45d735db/python-mystrom-0.2.4.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "35c07418c7c12c89e82c8a02b69bba44", "sha256": "6decbb847de409eeb96ab4cb7105a3804c3f5d3b83cee966a7816d60fc7da515"}, "downloads": -1, "filename": "python-mystrom-0.3.1.tar.gz", "has_sig": false, "md5_digest": "35c07418c7c12c89e82c8a02b69bba44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2487, "upload_time": "2016-06-29T18:28:19", "upload_time_iso_8601": "2016-06-29T18:28:19.728453Z", "url": "https://files.pythonhosted.org/packages/cb/7d/7075bb3ae9dbf7e0552fe38d0bc5f7c35214c7eb79ad20a8f1535c58e280/python-mystrom-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "f00231dbe4560f6acdc67ebb4d95a2b8", "sha256": "f40e43153ea23eac96e53f7656120b6b036afac60e0899649fcf0539c0e4fe28"}, "downloads": -1, "filename": "python-mystrom-0.3.2.tar.gz", "has_sig": false, "md5_digest": "f00231dbe4560f6acdc67ebb4d95a2b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2487, "upload_time": "2016-06-29T18:41:35", "upload_time_iso_8601": "2016-06-29T18:41:35.369081Z", "url": "https://files.pythonhosted.org/packages/97/93/c8223575d30d48cc8528badf66004de91a09685b5dac069a4622a6050de7/python-mystrom-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "4e95cc2c135e1dfcb8801d5f816ec365", "sha256": "f28931ee6bec3707366abef63ca2c1a6d553f5d952481e2393e8f3c2e5c803a5"}, "downloads": -1, "filename": "python-mystrom-0.3.3.tar.gz", "has_sig": false, "md5_digest": "4e95cc2c135e1dfcb8801d5f816ec365", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2522, "upload_time": "2016-07-15T09:25:07", "upload_time_iso_8601": "2016-07-15T09:25:07.472387Z", "url": "https://files.pythonhosted.org/packages/a0/5d/4541481c8bfd5e8ac9ed4585794d67d1187de8fd1f17831e0af1e60677b0/python-mystrom-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "e889868a9c5f1c99a6d2fce4fc74c12e", "sha256": "b7ddd1d583875fbc19a9c0cc9161d0b7744e3cbf3edf8253d3b0c7d5c31d2ca1"}, "downloads": -1, "filename": "python-mystrom-0.3.4.tar.gz", "has_sig": false, "md5_digest": "e889868a9c5f1c99a6d2fce4fc74c12e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2507, "upload_time": "2016-07-15T10:01:33", "upload_time_iso_8601": "2016-07-15T10:01:33.232774Z", "url": "https://files.pythonhosted.org/packages/70/c3/cba223f6b925276cbcac82c014d065b91b5ce69d2fb6252b814984d67604/python-mystrom-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "047a4dc0f63163e3c1ec5120efbae2fe", "sha256": "d6cf2a170615ff98091a05350ec656fc0f5a983035a62123e714996b0063e0ef"}, "downloads": -1, "filename": "python-mystrom-0.3.5.tar.gz", "has_sig": false, "md5_digest": "047a4dc0f63163e3c1ec5120efbae2fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2521, "upload_time": "2016-07-15T14:06:06", "upload_time_iso_8601": "2016-07-15T14:06:06.425775Z", "url": "https://files.pythonhosted.org/packages/b4/f0/900cdb3b212a13f653b0c873226216c56930dd5f7ad2e9763fcb01da3017/python-mystrom-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "b02039068f4c4b5c2ba29201aadbb941", "sha256": "01b732d222779a0f39e45720d4e757143952979c5a2d71ce00ed3bf72a8ec32d"}, "downloads": -1, "filename": "python-mystrom-0.3.6.tar.gz", "has_sig": false, "md5_digest": "b02039068f4c4b5c2ba29201aadbb941", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2961, "upload_time": "2016-07-15T14:30:54", "upload_time_iso_8601": "2016-07-15T14:30:54.631927Z", "url": "https://files.pythonhosted.org/packages/4c/0d/be83accf6308bdc1cee96b3ab592ec166c3d16fdca7f7aa313b80b11b2e3/python-mystrom-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "bdb680e9993c9defc8867681e3742597", "sha256": "deefe29b7dd9c335ca758242c702ea033eb4daf13f8b5c8d1906fcd30524d6bc"}, "downloads": -1, "filename": "python-mystrom-0.3.7.tar.gz", "has_sig": false, "md5_digest": "bdb680e9993c9defc8867681e3742597", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4156, "upload_time": "2017-04-08T16:19:13", "upload_time_iso_8601": "2017-04-08T16:19:13.302096Z", "url": "https://files.pythonhosted.org/packages/b8/be/5db770c4c7a57520573e77b43245898a87c757761288038bdbf4ad4e8a71/python-mystrom-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "6f410ce01874bce31c9a3a319c4f0350", "sha256": "db2aa526a7eed2c3a7e9d14b98e0f0bdc2f4c020efb489e36bac2ec2009c9281"}, "downloads": -1, "filename": "python-mystrom-0.3.8.tar.gz", "has_sig": false, "md5_digest": "6f410ce01874bce31c9a3a319c4f0350", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4214, "upload_time": "2017-04-17T20:13:57", "upload_time_iso_8601": "2017-04-17T20:13:57.959801Z", "url": "https://files.pythonhosted.org/packages/40/1b/38b29e5a05d22fefd86bd9825ebdaf6f50f47ae32a421195d574056cc08b/python-mystrom-0.3.8.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "bd400567db4103002719838c8dee97d5", "sha256": "2f16ddd265ea52389d1711431081accdd6f2d160b24ad45f4c0a22748f781ff9"}, "downloads": -1, "filename": "python-mystrom-0.4.0.tar.gz", "has_sig": false, "md5_digest": "bd400567db4103002719838c8dee97d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6853, "upload_time": "2018-01-23T11:34:48", "upload_time_iso_8601": "2018-01-23T11:34:48.594119Z", "url": "https://files.pythonhosted.org/packages/38/58/3cc2028b7d473527f560fdbc319593df0263a9db77df9ef45ce389bbb002/python-mystrom-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "aa6db83536041501d2e2af17ba616da3", "sha256": "3fbf21854cc202153fc6db87efce8f119f8bb8c61419dc52b207aa62dac6d595"}, "downloads": -1, "filename": "python-mystrom-0.4.1.tar.gz", "has_sig": false, "md5_digest": "aa6db83536041501d2e2af17ba616da3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9124, "upload_time": "2018-03-27T07:51:01", "upload_time_iso_8601": "2018-03-27T07:51:01.383223Z", "url": "https://files.pythonhosted.org/packages/c3/07/e75a18d823e225b63824989f7f108f055c37869f54a81c0b8920460150b3/python-mystrom-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "316c2cfea3bd5c58ca2f8f90bba147bc", "sha256": "b0092dc013d6bef9fb1711268d2928254305453007590dba1eba454e854b21a1"}, "downloads": -1, "filename": "python-mystrom-0.4.2.tar.gz", "has_sig": false, "md5_digest": "316c2cfea3bd5c58ca2f8f90bba147bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9143, "upload_time": "2018-03-27T07:59:00", "upload_time_iso_8601": "2018-03-27T07:59:00.037388Z", "url": "https://files.pythonhosted.org/packages/fe/be/a9faecf75217286b8e9afbe4e9dc5213a1f615d7f01f869f657d4dda3dbd/python-mystrom-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "506d93ce2b99f2ce0a4449d2bc8845c3", "sha256": "60b3ba396aec3dc00ab5622e64066f44dcd570291d4718079ac2d0a0c885e131"}, "downloads": -1, "filename": "python-mystrom-0.4.3.tar.gz", "has_sig": false, "md5_digest": "506d93ce2b99f2ce0a4449d2bc8845c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9448, "upload_time": "2018-06-07T06:33:23", "upload_time_iso_8601": "2018-06-07T06:33:23.867013Z", "url": "https://files.pythonhosted.org/packages/b4/51/4729299ea31f7734277c0a4760694d1cf30ba23c9cfed239455435dab696/python-mystrom-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "afba65a1416b22e4dd0b74cd3982053e", "sha256": "d46f8538709553b5b807d7060f6bc79c8010ad1e87a565314afe821250d775aa"}, "downloads": -1, "filename": "python-mystrom-0.4.4.tar.gz", "has_sig": false, "md5_digest": "afba65a1416b22e4dd0b74cd3982053e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9425, "upload_time": "2018-06-07T07:11:08", "upload_time_iso_8601": "2018-06-07T07:11:08.725908Z", "url": "https://files.pythonhosted.org/packages/64/d9/3a4d3ec273e5b34b7001845ec1f7ad6aef0c353066b3556ecd45a3b2c153/python-mystrom-0.4.4.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "5c70863db9c4ccf7d46995d4396f4e23", "sha256": "3de3b9c0e5d5492e8870a19a0dde43fbd1a66f263ecf89c1885b92c7f62fa925"}, "downloads": -1, "filename": "python-mystrom-0.5.0.tar.gz", "has_sig": false, "md5_digest": "5c70863db9c4ccf7d46995d4396f4e23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9633, "upload_time": "2019-02-27T11:18:54", "upload_time_iso_8601": "2019-02-27T11:18:54.276998Z", "url": "https://files.pythonhosted.org/packages/a1/bf/74b97251ff36ca937c4de615543bde0cbb77c82913a3be7eb3f092c882a8/python-mystrom-0.5.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e6b95972608b0b550c56d4c8ed38c4f9", "sha256": "eb38413a397dbc1046dc374950a0c85d2a8f3f9037492716a46dcf42706b390b"}, "downloads": -1, "filename": "python-mystrom-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e6b95972608b0b550c56d4c8ed38c4f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12151, "upload_time": "2020-01-05T18:06:24", "upload_time_iso_8601": "2020-01-05T18:06:24.628049Z", "url": "https://files.pythonhosted.org/packages/a9/fc/6f04e7d821c81c83ed0ff869ee31d74874c6af8b7d1e93d034681fa39193/python-mystrom-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "159105b01a33a4b534f6ee5cef0f7e5f", "sha256": "abcfe65cafb1ee29731e6436cd879c7de5c2a7561cba2d9fbf8290ef925fcea7"}, "downloads": -1, "filename": "python-mystrom-1.1.0.tar.gz", "has_sig": false, "md5_digest": "159105b01a33a4b534f6ee5cef0f7e5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12663, "upload_time": "2020-04-11T21:03:45", "upload_time_iso_8601": "2020-04-11T21:03:45.361382Z", "url": "https://files.pythonhosted.org/packages/96/75/492337227cbfd2ba497ea3f200c17fbc198613c340dd13d8776fa32b8b1f/python-mystrom-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "3dc3ca1130d7d824c12cfe6b199784a4", "sha256": "344e98555395e5a5faaf70f78ca30a66d1c35d65bd4b7cabc64105934298f7a6"}, "downloads": -1, "filename": "python-mystrom-1.1.1.tar.gz", "has_sig": false, "md5_digest": "3dc3ca1130d7d824c12cfe6b199784a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12679, "upload_time": "2020-04-11T21:36:52", "upload_time_iso_8601": "2020-04-11T21:36:52.688121Z", "url": "https://files.pythonhosted.org/packages/29/a0/8af1f41106012afbe21f19797e33e06f7bf8eb4653b01ea0ff015ea06abe/python-mystrom-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "be1a537ebf35a4f655a751ef2c557487", "sha256": "a126b0251ae3484f7b624010a32467b72992dead423cbf0c1f1e9ef2de7d201c"}, "downloads": -1, "filename": "python-mystrom-1.1.2.tar.gz", "has_sig": false, "md5_digest": "be1a537ebf35a4f655a751ef2c557487", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12692, "upload_time": "2020-04-11T21:42:58", "upload_time_iso_8601": "2020-04-11T21:42:58.713591Z", "url": "https://files.pythonhosted.org/packages/7c/04/872881c0d2be2e1ace1d9faed4e26204e5a81efaab7ecde3d32e2fa0b2ec/python-mystrom-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be1a537ebf35a4f655a751ef2c557487", "sha256": "a126b0251ae3484f7b624010a32467b72992dead423cbf0c1f1e9ef2de7d201c"}, "downloads": -1, "filename": "python-mystrom-1.1.2.tar.gz", "has_sig": false, "md5_digest": "be1a537ebf35a4f655a751ef2c557487", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12692, "upload_time": "2020-04-11T21:42:58", "upload_time_iso_8601": "2020-04-11T21:42:58.713591Z", "url": "https://files.pythonhosted.org/packages/7c/04/872881c0d2be2e1ace1d9faed4e26204e5a81efaab7ecde3d32e2fa0b2ec/python-mystrom-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:26 2020"}