{"info": {"author": "Horacio Hoyos Rodriguez", "author_email": "arcanefoam@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Snitcher\n========\n\n.. image:: https://circleci.com/bb/arcanefoam/snitcher/tree/master.svg?style=shield\n    :target: https://circleci.com/bb/arcanefoam/snitcher/tree/master\n\n.. image:: https://coveralls.io/repos/bitbucket/arcanefoam/snitcher/badge.svg?branch=master\n     :target: https://coveralls.io/bitbucket/arcanefoam/snitcher?branch=master\n\n.. image:: https://readthedocs.org/projects/snitcher/badge/?version=latest\n    :target: http://snitcher.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nSnitcher provides a simple, reusable notification mechanism based on the subscriber pattern. Agents interested in\nreceiving scoops from a Snitcher register with it. Invocation of the *s_inform* method on the Snitcher will cause all\nregistered agents to receive a notification (via the Agent's *notify* method).\n\nQuickStart\n----------\n\nInstallation\n~~~~~~~~~~~~\n\nCurrently you can only install from source. Clone or download and extract the repository and navigate to the folder\nwhere the sources are::\n\n    python3 setup.py install\n\nAdjust for the specific python command available in your environment (but it has to be Python 3.5+)\n\nUsing Snitchers\n---------------\n\nThe Snitcher class is intended to be inherited by other classes that want to provide a subscriber notification\nmechanism. Snitcher methods are prefixed with \"s\\_\" so that they are less likely to clash with existing or\ninherited API.\n\nAgents interested in being informed by the Snitcher are registered using the *s\\_register\\_agent* method. Agents\nmust have a method with signature *notify(self, \\*args, \\*\\*kwargs)*. When the *s\\_inform* method is invoked in the\nSnitcher, all registered Agents are informed. Any parameters passed to the *s\\_inform* method are forwarded to the\nAgents::\n\n    >>> from snitcher import Snitcher\n    >>> class Worker(Snitcher):\n    ...     def do_work(self, work):\n    ...         for w in work:\n    ...             print(\"working on {}\".format(w))\n    ...         self.s_inform()    # Let agents know work is done\n    ...\n    >>> class Supervisor:\n    ...     def notify(self, *args, **kwargs):\n    ...         print(\"Worker done\")\n    ...\n    >>> w1 = Worker()\n    >>> work = [\"loadA\", \"loadB\"]\n    >>> boss = Supervisor()\n    >>> w1.s_register_agent(boss)\n    >>> w1.do_work(work)\n    working on loadA\n    working on loadB\n    Worker done\n\nThe Scoop class provides a convenient container for passing information from the Snitcher to the agents. The Scoop\nclass provides a single attribute to indicate the type of Scoop (this should be enough for simple notifications).\nTo facilitate batch notifications the Scoop class provides a simple nesting mechanisms in which Scoops can be added\nto other Scoops (via the *s\\_add* method). Scoops are iterable, allowing all nested scoops to be easily visited.\nThe *s\\_add* method correctly builds the scoop chain so all nested scoops can be added to a single head scoop and in\nmore chaotic environments to any scoop in the chain. The Scoop class can be extended to add more fields in order to\ntailor the information packet to the specific application::\n\n    >>> from datetime import datetime\n    >>> from snithcer import Scoop\n    >>> import time\n    >>> class WorkerScoop(Scoop):\n    ...     def __init__(self, type, started, finished):\n    ...         super().__init__(type)\n    ...         self.started = started\n    ...         self.finished = finished\n    ...\n    >>> class Worker(Snitcher):\n    ...     def do_work(self, work):\n    ...         scoop = None\n    ...         for w in work:\n    ...             start = datetime.now()\n    ...             print(\"working on {}\".format(w))\n    ...             time.sleep(2)\n    ...             s = WorkerScoop(type=\"Work\", started=start, finished=datetime.now())\n    ...             if scoop is None:\n    ...                 scoop = s\n    ...             else:\n    ...                 scoop.s_add(s)\n    ...         self.s_inform(scoop)\n    >>> class Supervisor:\n    ...     def notify(self, scoop):\n    ...         info = [(str(s.starter),str(s.finished)) for s in scoop]\n    ...         print(\"Worker done with: {}, details: {}\".format(scoop.type, info))\n    >>> w1 = Worker()\n    >>> work = [\"loadA\",\"loadB\"]\n    >>> boss = Supervisor()\n    >>> w1.s_add_agent(boss)\n    >>> w1.do_work(work)\n    working on loadA\n    working on loadB\n    Worker done with: Work, details: [('2017-09-30 22:44:09.576904', '2017-09-30 22:44:11.577410'), ('2017-09-30 22:44:11.577410', '2017-09-30 22:44:13.577559')]\n\n\nTo support existing APIs the agent can specify an alternative method to receive the notifications when being registered\nwith the Snitcher. The supplied method should be queried from the agent instance (i.e. not from the agent class).\nFinally, the Snitcher has a flag (*s\\_chatty*) that controls whether agents are informed during the invocation of the\ninform method::\n\n    >>> class Worker(Snitcher):\n    ...     def do_work(self, work):\n    ...         scoop = None\n    ...         for w in work:\n    ...             start = datetime.now()\n    ...             print(\"working on {}\".format(w))\n    ...             time.sleep(2)\n    ...             s = WorkerScoop(type=\"Work\", started=start, finished=datetime.now())\n    ...             if scoop is None:\n    ...                 scoop = s\n    ...             else:\n    ...                 scoop.s_add(s)\n    ...         self.s_inform(scoop)\n    ...\n    ...     def do_break(self, duration):\n    ...         start = datetime.now()\n    ...         time.sleep(duration)\n    ...         s = WorkerScoop(type=\"Break\", started=start, finished=datetime.now())\n    ...         self.s_inform(s)\n\n    >>> class Supervisor:\n    ...     def supervise(self, scoop):\n    ...         info = [(str(s.started), str(s.finished)) for s in scoop]\n    ...         print(\"Worker done with: {}, details: {}\".format(scoop.type, info))\n\n    >>> w1 = Worker()\n    >>> work = [\"loadA\", \"loadB\"]\n    >>> boss = Supervisor()\n    >>> w1.s_register_agent(boss, boss.supervise)   # Provide the preferred notification method\n    >>> w1.do_work(work)\n    working on loadA\n    working on loadB\n    Worker done with: Work, details: [('2017-10-03 19:39:43.534965', '2017-10-03 19:39:45.535265'), ('2017-10-03 19:39:45.535265', '2017-10-03 19:39:47.536316')]\n    >>> w1.do_break(2)\n    Worker done with: Break, details: [('2017-10-03 19:39:47.536316', '2017-10-03 19:39:49.536355')]\n    >>> w1.s_chatty = False     # Don't monitor breaks\n    >>> w1.do_break(2)\n    >>> w1.s_chatty = True      # Monitor back\n    >>> work = [\"loadE\", \"loadF\"]\n    >>> w1.do_work(work)\n    working on loadE\n    working on loadF\n    Worker done with: Work, details: [('2017-10-03 19:39:55.537225', '2017-10-03 19:39:57.537791'), ('2017-10-03 19:39:57.537791', '2017-10-03 19:39:59.538375')]\n\n\nLogging\n-------\n\nThe Snitcher logs agent register/unregister events at the *info* level. Errors that result from problems accessing the\nagents's notification method\n\n\nChangelog\n=========\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n[Unreleased]\n------------\n\n\n[0.2.1] - 2018-04-23\n--------------------\n\nAdded\n~~~~~\n- Add tests to improve coverage.\n- Completed the README, added example.\n- Added *args and **kwargs to Snitcher init to improve inheritance support.\n- Improved logging messages\n\n[0.1.6] - 2017-08-27\n--------------------\nInitial release. Includes the first API implementation, tests and documentation.\n\n.. Added\n   ~~~~~\n   Changed\n   ~~~~~~~\n   Fixed\n   ~~~~~\n   Removed\n   ~~~~~~~\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/arcanefoam/snitcher", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "snitcher", "package_url": "https://pypi.org/project/snitcher/", "platform": "any", "project_url": "https://pypi.org/project/snitcher/", "project_urls": {"Homepage": "http://bitbucket.org/arcanefoam/snitcher"}, "release_url": "https://pypi.org/project/snitcher/0.2.2/", "requires_dist": null, "requires_python": "", "summary": "Provides a simple listener/observer library.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Snitcher<br>========<br><br>.. image:: https://circleci.com/bb/arcanefoam/snitcher/tree/master.svg?style=shield<br>    :target: https://circleci.com/bb/arcanefoam/snitcher/tree/master<br><br>.. image:: https://coveralls.io/repos/bitbucket/arcanefoam/snitcher/badge.svg?branch=master<br>     :target: https://coveralls.io/bitbucket/arcanefoam/snitcher?branch=master<br><br>.. image:: https://readthedocs.org/projects/snitcher/badge/?version=latest<br>    :target: http://snitcher.readthedocs.io/en/latest/?badge=latest<br>    :alt: Documentation Status<br><br>Snitcher provides a simple, reusable notification mechanism based on the subscriber pattern. Agents interested in<br>receiving scoops from a Snitcher register with it. Invocation of the *s_inform* method on the Snitcher will cause all<br>registered agents to receive a notification (via the Agent's *notify* method).<br><br>QuickStart<br>----------<br><br>Installation<br>~~~~~~~~~~~~<br><br>Currently you can only install from source. Clone or download and extract the repository and navigate to the folder<br>where the sources are::<br><br>    python3 setup.py install<br><br>Adjust for the specific python command available in your environment (but it has to be Python 3.5+)<br><br>Using Snitchers<br>---------------<br><br>The Snitcher class is intended to be inherited by other classes that want to provide a subscriber notification<br>mechanism. Snitcher methods are prefixed with \"s\\_\" so that they are less likely to clash with existing or<br>inherited API.<br><br>Agents interested in being informed by the Snitcher are registered using the *s\\_register\\_agent* method. Agents<br>must have a method with signature *notify(self, \\*args, \\*\\*kwargs)*. When the *s\\_inform* method is invoked in the<br>Snitcher, all registered Agents are informed. Any parameters passed to the *s\\_inform* method are forwarded to the<br>Agents::<br><br>    &gt;&gt;&gt; from snitcher import Snitcher<br>    &gt;&gt;&gt; class Worker(Snitcher):<br>    ...     def do_work(self, work):<br>    ...         for w in work:<br>    ...             print(\"working on {}\".format(w))<br>    ...         self.s_inform()    # Let agents know work is done<br>    ...<br>    &gt;&gt;&gt; class Supervisor:<br>    ...     def notify(self, *args, **kwargs):<br>    ...         print(\"Worker done\")<br>    ...<br>    &gt;&gt;&gt; w1 = Worker()<br>    &gt;&gt;&gt; work = [\"loadA\", \"loadB\"]<br>    &gt;&gt;&gt; boss = Supervisor()<br>    &gt;&gt;&gt; w1.s_register_agent(boss)<br>    &gt;&gt;&gt; w1.do_work(work)<br>    working on loadA<br>    working on loadB<br>    Worker done<br><br>The Scoop class provides a convenient container for passing information from the Snitcher to the agents. The Scoop<br>class provides a single attribute to indicate the type of Scoop (this should be enough for simple notifications).<br>To facilitate batch notifications the Scoop class provides a simple nesting mechanisms in which Scoops can be added<br>to other Scoops (via the *s\\_add* method). Scoops are iterable, allowing all nested scoops to be easily visited.<br>The *s\\_add* method correctly builds the scoop chain so all nested scoops can be added to a single head scoop and in<br>more chaotic environments to any scoop in the chain. The Scoop class can be extended to add more fields in order to<br>tailor the information packet to the specific application::<br><br>    &gt;&gt;&gt; from datetime import datetime<br>    &gt;&gt;&gt; from snithcer import Scoop<br>    &gt;&gt;&gt; import time<br>    &gt;&gt;&gt; class WorkerScoop(Scoop):<br>    ...     def __init__(self, type, started, finished):<br>    ...         super().__init__(type)<br>    ...         self.started = started<br>    ...         self.finished = finished<br>    ...<br>    &gt;&gt;&gt; class Worker(Snitcher):<br>    ...     def do_work(self, work):<br>    ...         scoop = None<br>    ...         for w in work:<br>    ...             start = datetime.now()<br>    ...             print(\"working on {}\".format(w))<br>    ...             time.sleep(2)<br>    ...             s = WorkerScoop(type=\"Work\", started=start, finished=datetime.now())<br>    ...             if scoop is None:<br>    ...                 scoop = s<br>    ...             else:<br>    ...                 scoop.s_add(s)<br>    ...         self.s_inform(scoop)<br>    &gt;&gt;&gt; class Supervisor:<br>    ...     def notify(self, scoop):<br>    ...         info = [(str(s.starter),str(s.finished)) for s in scoop]<br>    ...         print(\"Worker done with: {}, details: {}\".format(scoop.type, info))<br>    &gt;&gt;&gt; w1 = Worker()<br>    &gt;&gt;&gt; work = [\"loadA\",\"loadB\"]<br>    &gt;&gt;&gt; boss = Supervisor()<br>    &gt;&gt;&gt; w1.s_add_agent(boss)<br>    &gt;&gt;&gt; w1.do_work(work)<br>    working on loadA<br>    working on loadB<br>    Worker done with: Work, details: [('2017-09-30 22:44:09.576904', '2017-09-30 22:44:11.577410'), ('2017-09-30 22:44:11.577410', '2017-09-30 22:44:13.577559')]<br><br><br>To support existing APIs the agent can specify an alternative method to receive the notifications when being registered<br>with the Snitcher. The supplied method should be queried from the agent instance (i.e. not from the agent class).<br>Finally, the Snitcher has a flag (*s\\_chatty*) that controls whether agents are informed during the invocation of the<br>inform method::<br><br>    &gt;&gt;&gt; class Worker(Snitcher):<br>    ...     def do_work(self, work):<br>    ...         scoop = None<br>    ...         for w in work:<br>    ...             start = datetime.now()<br>    ...             print(\"working on {}\".format(w))<br>    ...             time.sleep(2)<br>    ...             s = WorkerScoop(type=\"Work\", started=start, finished=datetime.now())<br>    ...             if scoop is None:<br>    ...                 scoop = s<br>    ...             else:<br>    ...                 scoop.s_add(s)<br>    ...         self.s_inform(scoop)<br>    ...<br>    ...     def do_break(self, duration):<br>    ...         start = datetime.now()<br>    ...         time.sleep(duration)<br>    ...         s = WorkerScoop(type=\"Break\", started=start, finished=datetime.now())<br>    ...         self.s_inform(s)<br><br>    &gt;&gt;&gt; class Supervisor:<br>    ...     def supervise(self, scoop):<br>    ...         info = [(str(s.started), str(s.finished)) for s in scoop]<br>    ...         print(\"Worker done with: {}, details: {}\".format(scoop.type, info))<br><br>    &gt;&gt;&gt; w1 = Worker()<br>    &gt;&gt;&gt; work = [\"loadA\", \"loadB\"]<br>    &gt;&gt;&gt; boss = Supervisor()<br>    &gt;&gt;&gt; w1.s_register_agent(boss, boss.supervise)   # Provide the preferred notification method<br>    &gt;&gt;&gt; w1.do_work(work)<br>    working on loadA<br>    working on loadB<br>    Worker done with: Work, details: [('2017-10-03 19:39:43.534965', '2017-10-03 19:39:45.535265'), ('2017-10-03 19:39:45.535265', '2017-10-03 19:39:47.536316')]<br>    &gt;&gt;&gt; w1.do_break(2)<br>    Worker done with: Break, details: [('2017-10-03 19:39:47.536316', '2017-10-03 19:39:49.536355')]<br>    &gt;&gt;&gt; w1.s_chatty = False     # Don't monitor breaks<br>    &gt;&gt;&gt; w1.do_break(2)<br>    &gt;&gt;&gt; w1.s_chatty = True      # Monitor back<br>    &gt;&gt;&gt; work = [\"loadE\", \"loadF\"]<br>    &gt;&gt;&gt; w1.do_work(work)<br>    working on loadE<br>    working on loadF<br>    Worker done with: Work, details: [('2017-10-03 19:39:55.537225', '2017-10-03 19:39:57.537791'), ('2017-10-03 19:39:57.537791', '2017-10-03 19:39:59.538375')]<br><br><br>Logging<br>-------<br><br>The Snitcher logs agent register/unregister events at the *info* level. Errors that result from problems accessing the<br>agents's notification method<br><br><br>Changelog<br>=========<br>All notable changes to this project will be documented in this file.<br><br>The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)<br>and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).<br><br>[Unreleased]<br>------------<br><br><br>[0.2.1] - 2018-04-23<br>--------------------<br><br>Added<br>~~~~~<br>- Add tests to improve coverage.<br>- Completed the README, added example.<br>- Added *args and **kwargs to Snitcher init to improve inheritance support.<br>- Improved logging messages<br><br>[0.1.6] - 2017-08-27<br>--------------------<br>Initial release. Includes the first API implementation, tests and documentation.<br><br>.. Added<br>   ~~~~~<br>   Changed<br>   ~~~~~~~<br>   Fixed<br>   ~~~~~<br>   Removed<br>   ~~~~~~~<br><br><br>\n          </div>"}, "last_serial": 3800432, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "d0e9385407500f632584e542a51be6df", "sha256": "a804e80381da02eb8f1aabab029f3e0076893b79e129615f4c5791afdd61f083"}, "downloads": -1, "filename": "snitcher-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d0e9385407500f632584e542a51be6df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6054, "upload_time": "2018-04-23T20:31:14", "upload_time_iso_8601": "2018-04-23T20:31:14.836119Z", "url": "https://files.pythonhosted.org/packages/9e/0e/6ac5f8387e680120f850f215bec0bdc5cf320481449e9b56890e9da721d5/snitcher-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca301d0a99bfe70a94daebad49c18506", "sha256": "2f6455d23883e77116317a58fee91dd0807a1788682eaac30d522f60098c991d"}, "downloads": -1, "filename": "snitcher-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ca301d0a99bfe70a94daebad49c18506", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8523, "upload_time": "2018-04-23T20:31:15", "upload_time_iso_8601": "2018-04-23T20:31:15.785487Z", "url": "https://files.pythonhosted.org/packages/ea/66/94b940662ed4e02779f69fee8a5f4ff38e22122bc94ddd7cd121ff1a46a2/snitcher-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d798b8294c162220574d878ce915a4ed", "sha256": "7484cc8b2f5d144eaaca63cb1c129ac2d074662428212f7fc9d067f2ac132310"}, "downloads": -1, "filename": "snitcher-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d798b8294c162220574d878ce915a4ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6070, "upload_time": "2018-04-23T20:56:47", "upload_time_iso_8601": "2018-04-23T20:56:47.646641Z", "url": "https://files.pythonhosted.org/packages/8b/d4/2614e3d5e065b68a2d30c7a7c2abbf7537606f09a43fd076006f43f3314e/snitcher-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4886bdf5d2590d2d369ed36333c685f4", "sha256": "299c05ab8466f5a17bbd49cd045f8412f1c58204976b8d65cf07461b1afe3c4f"}, "downloads": -1, "filename": "snitcher-0.2.2.tar.gz", "has_sig": false, "md5_digest": "4886bdf5d2590d2d369ed36333c685f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8500, "upload_time": "2018-04-23T20:56:48", "upload_time_iso_8601": "2018-04-23T20:56:48.558634Z", "url": "https://files.pythonhosted.org/packages/c8/e3/878204ee24e3e999a44bade8e34a22d4c0ff1512331218707eef8af4246b/snitcher-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d798b8294c162220574d878ce915a4ed", "sha256": "7484cc8b2f5d144eaaca63cb1c129ac2d074662428212f7fc9d067f2ac132310"}, "downloads": -1, "filename": "snitcher-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d798b8294c162220574d878ce915a4ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6070, "upload_time": "2018-04-23T20:56:47", "upload_time_iso_8601": "2018-04-23T20:56:47.646641Z", "url": "https://files.pythonhosted.org/packages/8b/d4/2614e3d5e065b68a2d30c7a7c2abbf7537606f09a43fd076006f43f3314e/snitcher-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4886bdf5d2590d2d369ed36333c685f4", "sha256": "299c05ab8466f5a17bbd49cd045f8412f1c58204976b8d65cf07461b1afe3c4f"}, "downloads": -1, "filename": "snitcher-0.2.2.tar.gz", "has_sig": false, "md5_digest": "4886bdf5d2590d2d369ed36333c685f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8500, "upload_time": "2018-04-23T20:56:48", "upload_time_iso_8601": "2018-04-23T20:56:48.558634Z", "url": "https://files.pythonhosted.org/packages/c8/e3/878204ee24e3e999a44bade8e34a22d4c0ff1512331218707eef8af4246b/snitcher-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:22 2020"}