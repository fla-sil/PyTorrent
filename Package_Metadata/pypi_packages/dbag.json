{"info": {"author": "Wes Winham", "author_email": "winhamwr@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Dbag- Easy time-series metrics and dashboarding \n===============================================\n\nDbag is a simple Django app to help you remember, graph and create dashboards\nfor arbitrary metrics that change over time. \n\nIt's best used to graph things like: \n\n* number of active user accounts\n* % of users who have logged in today\n* number of new blog comments\n  \nThese are things that are easy to run a query or a quick bit of python to\ndetermine the answer to the question *right now* but that are hard or fuzzy to\ncalculate for periods in the past. You want to figure out your number every day\nand then remember it so you can display fancy graphs and trending (and you want\nthese graphs to just work and be pretty). You also want to reduce complexity by\nusing your existing Django database backend to hold all of the data.\n\nWhy Dbag?\n---------\n\nDbag fills a niche not currently well-covered by existing solutions. Dbag is\nsimpler than existing tools because it does less. If you meet the following \nconditions, it might be right for you:\n\n* You want to collect a small to moderate amount of data and daily resolution\n  is good enough.\n* You have many different ways of getting the data, but you want to collect it\n  from one place.\n* You want the simplicity of builtin metric types to get commonly-needed Django\n  metrics, but you also want the flexibility to define arbitrary python\n  functions to collect data.\n* You want simple dashboarding that you can use internally and expose to your\n  users without a lot of work (and it should be pretty).\n* You want to be able to interact with your metrics via Django's ORM if necessary.\n* You want the option to tie a metric to a specific object in your database. If\n  you have a `Customer` object, you might want the number of active accounts on\n  each specific customer.\n\nWhat you should use instead\n---------------------------\n\nIf that's not what you're looking for, then one of the following is probably a\nbetter option.\n\nOperations and SysAdmin Graphing\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere several great system information graphing applications like\n, `munin <http://munin-monitoring.org/>`_\nand `cacti <http://www.cacti.net/>`_ if you want to see CPU usage over time.\nThese are better if you want to know how disk usage is trending across 30\ndifferent nodes.\n\nCapture Events\n~~~~~~~~~~~~~~\n\n`Mixpanel <http://mixpanel.com/>`_, `statsd <https://github.com/etsy/statsd>`_,\n`Google Analytics <http://www.google.com/analytics/>`_, etc are all better at\ncapturing events and high-frequency data. Use them if that's all you need. Dbag\nwould fit in to that equation if you want to regularly slice off or corelate\ndata from those sources and display the changes over time on a dashboard.\n\nGraph Anything\n~~~~~~~~~~~~~~\n\nIf you just want to dump any kind of data at any volume in to one system and\nthen graph it a thousand different ways, you should use\n`graphite <http://graphite.wikidot.com/>`_. You'll want to put it on a different\nserver and you'll need to figure it out, but you'll get as much scalability and\nflexibility as you need. `dbag` actually works well in combination with\ngraphite if you'd like to display simple dashboards of summarized date to your\nusers.\n\nOther Django Dashboards\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are some other Django dashboarding-ish apps around.\n\n* This one isn't meant to be general-purpose, but is used specifically for\n  grabbing metrics for the `Django project\n  dashboard <https://github.com/jacobian/django-dev-dashboard>`_. It has very\n  attractive panels with a optional sparklines and a nice master/default\n  layout. Visual inspiration was taken heavily from this project and `dbag` can\n  be used to effectively recreate the Django project dashboard..\n* This sub-project in\n  `djutils <http://charlesleifer.com/docs/djutils/django-utils/dashboard/panels.html>`_\n  effectively re-creates Munin using Django. It allows you to collect and\n  aggregate very granular data using whatever python code you'd like. It does\n  not however let you create parameterized panels and metrics (meaning that if\n  you wanted to create separate panels for every ``Customer`` in your database,\n  you'd need to write python code registering a panel for each customer.\n* These exist but `aren't <http://code.google.com/p/django-dashboard/>`_\n  `documented <https://github.com/stefanw/django-dashboard>`_ or\n  `maintained <https://github.com/ojii/django-dashboard>`_.\n\nInstallation\n------------\n\n1. Get the project source and install it::\n\n    $ pip install dbag\n\n2. Add `dbag` to your tuple of ``INSTALLED_APPS``.\n3. Add the dbag urls to your ``urls.py``. Eg::\n\n        urlpatterns = patterns('',\n            url('^dbag/', include('dbag.urls'),\n        )\n\n    If you're not using `Nexus <https://github.com/dcramer/nexus>`_ then you\n    also need to add this to ``urls.py`` for automatic ``MetricType``\n    discovery::\n\n        import dbag\n        dbag.autodiscover()\n\n3. Create the database schema::\n  \n\n        $ ./manage.py syncdb\n\n    or if you're using `South <http://south.aeracode.org/>`_ ::\n    \n        $ ./manage.py syncdb --migrate\n\n4. Configure some initial metrics::\n\n    $ ./manage.py dbag_init\n\n5. If you're already using `Celery <http://celeryproject.org/>`_ then\n    ensure that\n    `celerybeat <http://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html#starting-celerybeat>`_\n    is running. Otherwise, you can run:: \n    \n        $ ./manage.py dbag_output_cronjob > /etc/cron.d/dbag_collect_metrics \n    \n    to set up a cron job to collect your metrics every day. You'll need to\n   edit the resulting file to use the correct paths and the correct user. \n\n6. If you want to force collection of your first days worth of metrics, you can also run::\n\n       $ ./manage.py dbag_collect_metrics\n\n   Alternatively, you can generate some random fake data to demo with using::\n\n       $ ./manage.py dbag_fake_metrics\n\n7. Now start up your devserver, login and visit \n   `http://localhost:8000/dbag/ <http://localhost:8000/dbag/>`_\n   (or wherever you told your ``urls.py`` to point for dbag).\n\nAdd a New Metric\n----------------\n\nYou can add new metrics to start collecting either through the `Nexus\n<https://github.com/dcramer/nexus>`_ frontend or via the API in python. Either\nway you'll be choosing 5 things to define your metric.\n\n**metric_type_label** \n    The label for the type of metric we're collecting. These python subclasses\n    of ``dbag.metric_types.MetricType`` are registered with dbag (with a unique\n    label) and define how a metric is gathered and what options are required to\n    gather it. Included examples are an ``ActiveUsersCount`` type that optionally\n    takes an ORM filter to define a subset of users and a ``MixpanelEvent`` type\n    that takes an event name and optional properties to slice and records the\n    value for the day.\n\n**label** \n    The human-readable name of this metric.\n\n**slug** \n    A unique slug identifying this metric.\n\n**description** \n    An optional long-form description of this metric.\n\n**do_collect** \n    Whether or not to collect new values for this metric (default to False).\n\n**kwargs** \n    Some MetricTypes take required or optional keyword configuration arguments.\n    In the following example, ``mp_property`` is an optional keyword argument.\n\n\nAn example API call to create a metric might be::\n\n    from dbag import dbag_manager\n    dbag_manager.create_metric(\n        'MixpanelEvent', \n        label='superuser comments', \n        slug='superuser_comments', \n        description=\"number of comments made by superusers\", \n        unit_label=\"comment\",\n        unit_label_plural=\"comments\",\n        mp_property=\"is_superuser=true\")\n\n\nCreate a New MetricType\n-----------------------\n\nYou can add a new MetricType whenever you need to gather/summarize data from a\nnew source. An example would be a MetricType that used github's API to count\nthe number of open tickets on a specific project. Subclass\n``dbag.metric_types.MetricType`` with your object, put it in a\n``dbag_metric_types`` module in one of your ``INSTALLED_APPS`` and then call::\n\n    from dbag import dbag_manager\n    dbag_manager.register_metric_type(<your label>, <your class>)\n\nFor now, check the builtin types located at ``dbag.metric_types`` for details.\n\nDbag? Really?\n-------------\n\nA defensible rationalization is that the name is short for \"data bag.\"\n\nIs it Awesome?\n--------------\n\nYes. Increasingly so.\n\nTODO- maybe?\n------------\n\n* Add support for Flask and Pyramid (or others?)\n* Provide a REST API for accessing metrics data", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/winhamwr/dbag", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "dbag", "package_url": "https://pypi.org/project/dbag/", "platform": "any", "project_url": "https://pypi.org/project/dbag/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/winhamwr/dbag"}, "release_url": "https://pypi.org/project/dbag/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "Dbag- Easy time-series metrics and dashboarding", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Dbag- Easy time-series metrics and dashboarding <br>===============================================<br><br>Dbag is a simple Django app to help you remember, graph and create dashboards<br>for arbitrary metrics that change over time. <br><br>It's best used to graph things like: <br><br>* number of active user accounts<br>* % of users who have logged in today<br>* number of new blog comments<br>  <br>These are things that are easy to run a query or a quick bit of python to<br>determine the answer to the question *right now* but that are hard or fuzzy to<br>calculate for periods in the past. You want to figure out your number every day<br>and then remember it so you can display fancy graphs and trending (and you want<br>these graphs to just work and be pretty). You also want to reduce complexity by<br>using your existing Django database backend to hold all of the data.<br><br>Why Dbag?<br>---------<br><br>Dbag fills a niche not currently well-covered by existing solutions. Dbag is<br>simpler than existing tools because it does less. If you meet the following <br>conditions, it might be right for you:<br><br>* You want to collect a small to moderate amount of data and daily resolution<br>  is good enough.<br>* You have many different ways of getting the data, but you want to collect it<br>  from one place.<br>* You want the simplicity of builtin metric types to get commonly-needed Django<br>  metrics, but you also want the flexibility to define arbitrary python<br>  functions to collect data.<br>* You want simple dashboarding that you can use internally and expose to your<br>  users without a lot of work (and it should be pretty).<br>* You want to be able to interact with your metrics via Django's ORM if necessary.<br>* You want the option to tie a metric to a specific object in your database. If<br>  you have a `Customer` object, you might want the number of active accounts on<br>  each specific customer.<br><br>What you should use instead<br>---------------------------<br><br>If that's not what you're looking for, then one of the following is probably a<br>better option.<br><br>Operations and SysAdmin Graphing<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>There several great system information graphing applications like<br>, `munin &lt;http://munin-monitoring.org/&gt;`_<br>and `cacti &lt;http://www.cacti.net/&gt;`_ if you want to see CPU usage over time.<br>These are better if you want to know how disk usage is trending across 30<br>different nodes.<br><br>Capture Events<br>~~~~~~~~~~~~~~<br><br>`Mixpanel &lt;http://mixpanel.com/&gt;`_, `statsd &lt;https://github.com/etsy/statsd&gt;`_,<br>`Google Analytics &lt;http://www.google.com/analytics/&gt;`_, etc are all better at<br>capturing events and high-frequency data. Use them if that's all you need. Dbag<br>would fit in to that equation if you want to regularly slice off or corelate<br>data from those sources and display the changes over time on a dashboard.<br><br>Graph Anything<br>~~~~~~~~~~~~~~<br><br>If you just want to dump any kind of data at any volume in to one system and<br>then graph it a thousand different ways, you should use<br>`graphite &lt;http://graphite.wikidot.com/&gt;`_. You'll want to put it on a different<br>server and you'll need to figure it out, but you'll get as much scalability and<br>flexibility as you need. `dbag` actually works well in combination with<br>graphite if you'd like to display simple dashboards of summarized date to your<br>users.<br><br>Other Django Dashboards<br>~~~~~~~~~~~~~~~~~~~~~~~<br><br>There are some other Django dashboarding-ish apps around.<br><br>* This one isn't meant to be general-purpose, but is used specifically for<br>  grabbing metrics for the `Django project<br>  dashboard &lt;https://github.com/jacobian/django-dev-dashboard&gt;`_. It has very<br>  attractive panels with a optional sparklines and a nice master/default<br>  layout. Visual inspiration was taken heavily from this project and `dbag` can<br>  be used to effectively recreate the Django project dashboard..<br>* This sub-project in<br>  `djutils &lt;http://charlesleifer.com/docs/djutils/django-utils/dashboard/panels.html&gt;`_<br>  effectively re-creates Munin using Django. It allows you to collect and<br>  aggregate very granular data using whatever python code you'd like. It does<br>  not however let you create parameterized panels and metrics (meaning that if<br>  you wanted to create separate panels for every ``Customer`` in your database,<br>  you'd need to write python code registering a panel for each customer.<br>* These exist but `aren't &lt;http://code.google.com/p/django-dashboard/&gt;`_<br>  `documented &lt;https://github.com/stefanw/django-dashboard&gt;`_ or<br>  `maintained &lt;https://github.com/ojii/django-dashboard&gt;`_.<br><br>Installation<br>------------<br><br>1. Get the project source and install it::<br><br>    $ pip install dbag<br><br>2. Add `dbag` to your tuple of ``INSTALLED_APPS``.<br>3. Add the dbag urls to your ``urls.py``. Eg::<br><br>        urlpatterns = patterns('',<br>            url('^dbag/', include('dbag.urls'),<br>        )<br><br>    If you're not using `Nexus &lt;https://github.com/dcramer/nexus&gt;`_ then you<br>    also need to add this to ``urls.py`` for automatic ``MetricType``<br>    discovery::<br><br>        import dbag<br>        dbag.autodiscover()<br><br>3. Create the database schema::<br>  <br><br>        $ ./manage.py syncdb<br><br>    or if you're using `South &lt;http://south.aeracode.org/&gt;`_ ::<br>    <br>        $ ./manage.py syncdb --migrate<br><br>4. Configure some initial metrics::<br><br>    $ ./manage.py dbag_init<br><br>5. If you're already using `Celery &lt;http://celeryproject.org/&gt;`_ then<br>    ensure that<br>    `celerybeat &lt;http://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html#starting-celerybeat&gt;`_<br>    is running. Otherwise, you can run:: <br>    <br>        $ ./manage.py dbag_output_cronjob &gt; /etc/cron.d/dbag_collect_metrics <br>    <br>    to set up a cron job to collect your metrics every day. You'll need to<br>   edit the resulting file to use the correct paths and the correct user. <br><br>6. If you want to force collection of your first days worth of metrics, you can also run::<br><br>       $ ./manage.py dbag_collect_metrics<br><br>   Alternatively, you can generate some random fake data to demo with using::<br><br>       $ ./manage.py dbag_fake_metrics<br><br>7. Now start up your devserver, login and visit <br>   `http://localhost:8000/dbag/ &lt;http://localhost:8000/dbag/&gt;`_<br>   (or wherever you told your ``urls.py`` to point for dbag).<br><br>Add a New Metric<br>----------------<br><br>You can add new metrics to start collecting either through the `Nexus<br>&lt;https://github.com/dcramer/nexus&gt;`_ frontend or via the API in python. Either<br>way you'll be choosing 5 things to define your metric.<br><br>**metric_type_label** <br>    The label for the type of metric we're collecting. These python subclasses<br>    of ``dbag.metric_types.MetricType`` are registered with dbag (with a unique<br>    label) and define how a metric is gathered and what options are required to<br>    gather it. Included examples are an ``ActiveUsersCount`` type that optionally<br>    takes an ORM filter to define a subset of users and a ``MixpanelEvent`` type<br>    that takes an event name and optional properties to slice and records the<br>    value for the day.<br><br>**label** <br>    The human-readable name of this metric.<br><br>**slug** <br>    A unique slug identifying this metric.<br><br>**description** <br>    An optional long-form description of this metric.<br><br>**do_collect** <br>    Whether or not to collect new values for this metric (default to False).<br><br>**kwargs** <br>    Some MetricTypes take required or optional keyword configuration arguments.<br>    In the following example, ``mp_property`` is an optional keyword argument.<br><br><br>An example API call to create a metric might be::<br><br>    from dbag import dbag_manager<br>    dbag_manager.create_metric(<br>        'MixpanelEvent', <br>        label='superuser comments', <br>        slug='superuser_comments', <br>        description=\"number of comments made by superusers\", <br>        unit_label=\"comment\",<br>        unit_label_plural=\"comments\",<br>        mp_property=\"is_superuser=true\")<br><br><br>Create a New MetricType<br>-----------------------<br><br>You can add a new MetricType whenever you need to gather/summarize data from a<br>new source. An example would be a MetricType that used github's API to count<br>the number of open tickets on a specific project. Subclass<br>``dbag.metric_types.MetricType`` with your object, put it in a<br>``dbag_metric_types`` module in one of your ``INSTALLED_APPS`` and then call::<br><br>    from dbag import dbag_manager<br>    dbag_manager.register_metric_type(&lt;your label&gt;, &lt;your class&gt;)<br><br>For now, check the builtin types located at ``dbag.metric_types`` for details.<br><br>Dbag? Really?<br>-------------<br><br>A defensible rationalization is that the name is short for \"data bag.\"<br><br>Is it Awesome?<br>--------------<br><br>Yes. Increasingly so.<br><br>TODO- maybe?<br>------------<br><br>* Add support for Flask and Pyramid (or others?)<br>* Provide a REST API for accessing metrics data\n          </div>"}, "last_serial": 788840, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "d9e0fcc8b2bb0e2bcf4932da0c754323", "sha256": "cd974dc2dcfa23f4814f70a5ac8c472ab43912c25d35e7c9f96c4cf5f8302b54"}, "downloads": -1, "filename": "dbag-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d9e0fcc8b2bb0e2bcf4932da0c754323", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17509, "upload_time": "2011-11-18T22:41:22", "upload_time_iso_8601": "2011-11-18T22:41:22.136725Z", "url": "https://files.pythonhosted.org/packages/a3/61/0db979c87ce419580bb7feece271ba4b8d99488873bd5fd1531deb07bb0a/dbag-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "1993b7b706f0b23565b8c9840fea1186", "sha256": "71b211d4b2bda92edf88d5db4ae77090bdd20f82302c941d56c73e81ee0b3094"}, "downloads": -1, "filename": "dbag-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1993b7b706f0b23565b8c9840fea1186", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72322, "upload_time": "2011-11-21T23:00:11", "upload_time_iso_8601": "2011-11-21T23:00:11.961649Z", "url": "https://files.pythonhosted.org/packages/ee/4c/17bc34ad79e20f54929bd24178843f50fa7721ac8cbd916c134ce1bf3d64/dbag-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1993b7b706f0b23565b8c9840fea1186", "sha256": "71b211d4b2bda92edf88d5db4ae77090bdd20f82302c941d56c73e81ee0b3094"}, "downloads": -1, "filename": "dbag-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1993b7b706f0b23565b8c9840fea1186", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72322, "upload_time": "2011-11-21T23:00:11", "upload_time_iso_8601": "2011-11-21T23:00:11.961649Z", "url": "https://files.pythonhosted.org/packages/ee/4c/17bc34ad79e20f54929bd24178843f50fa7721ac8cbd916c134ce1bf3d64/dbag-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:59 2020"}