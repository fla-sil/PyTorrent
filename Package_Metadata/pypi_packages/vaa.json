{"info": {"author": "Gram Orsinium", "author_email": "master_fess@mail.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# VAA\n\nVAlidators Adapter makes validation by any existing validator with the same interface.\n\nSupported validators:\n\n| validator | adapter |\n| --------- | ------- |\n| [Cerberus](http://docs.python-cerberus.org/en/stable/) | `va.cerberus` |\n| [Django Forms](https://docs.djangoproject.com/en/2.2/topics/forms/) | `va.django` |\n| [Marshmallow](https://marshmallow.readthedocs.io/en/stable/) | `va.marshmallow` |\n| [PySchemes](https://github.com/spy16/pyschemes) | `va.pyschemes` |\n| [Django REST Framework](https://www.django-rest-framework.org/) | `va.restframework` |\n| [WTForms](https://wtforms.readthedocs.io/en/stable/) | `va.wtforms` |\n\n```bash\npython3 -m pip install --user vaa\n```\n\n## Example\n\n```python\nimport marshmallow\nimport vaa\n\n@vaa.marshmallow\nclass Scheme(marshmallow.Schema):\n  id = marshmallow.fields.Int(required=True)\n  name = marshmallow.fields.Str(required=True)\n```\n\n## Validating data\n\nAll schemes adopted by vaa has the same interface:\n\n```python\nvalidator = Scheme({'id': '1', 'name': 'Oleg'})\nvalidator.is_valid()    # True\nvalidator.cleaned_data  # {'name': 'Oleg', 'id': 1}\n\nvalidator = Scheme({'id': 'no', 'name': 'Oleg'})\nvalidator.is_valid()    # False\nvalidator.errors        # [Error(message='Not a valid integer.', field='id')]\n```\n\n## Simple scheme\n\nIf you want to do validation with simple function, you can use `va.simple` adapter. For example, you want to check that in dict `{'a': ..., 'b': ...}` both values are positive. There are many ways to do so.\n\nIt can return `bool`:\n\n```python\n@vaa.simple\ndef validate(a, b) -> bool:\n  return a > 0 and b > 0\n```\n\nOr return message for error:\n\n```python\n@vaa.simple\ndef validate(a, b) -> bool:\n  if a > 0 and b > 0:\n    return True\n  return 'should be positive'\n```\n\nOr return errors dict:\n\n```python\n@vaa.simple\ndef validate(a, b) -> bool:\n  if a <= 0:\n    return {'a': 'should be positive'}\n  if b <= 0:\n    return {'b': 'should be positive'}\n  return True\n```\n\nOr raise `va.ValidationError` with error message or dict:\n\n```python\n@vaa.simple\ndef validate(a, b) -> bool:\n  if a > 0 and b > 0:\n      return True\n  raise vaa.ValidationError('should be positive')\n```\n\nAlso, if you want to get the original dict without unpacking it into keyword arguments, do a function that accepts only one `_` argument:\n\n```python\n@vaa.simple\ndef validate(_):\n  return _['a'] > 0 and _['b'] > 0\n```\n\nIn that dict keys can be accessed as attributes:\n\n```python\n@vaa.simple\ndef validate(_):\n  return _.a > 0 and _.b > 0\n```\n\nChoose the best way and follow it. Avoid mixing them in one project.\n\n## Unknown scheme\n\nIf you're making a library that should accept any validator without explicit vaa usage, use `vaa.wrap`:\n\n```python\nclass Scheme(marshmallow.Schema):\n  id = marshmallow.fields.Int(required=True)\n  name = marshmallow.fields.Str(required=True)\n\nvalidator = vaa.wrap(Scheme)({'id': 'no', 'name': 'Oleg'})\nvalidator = Scheme({'id': 'no', 'name': 'Oleg'})\nvalidator.is_valid()    # False\nvalidator.errors        # [Error(message='Not a valid integer.', field='id')]\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "None", "license": "None", "maintainer": "", "maintainer_email": "", "name": "vaa", "package_url": "https://pypi.org/project/vaa/", "platform": "None", "project_url": "https://pypi.org/project/vaa/", "project_urls": {"Homepage": "https://github.com/life4/vaa"}, "release_url": "https://pypi.org/project/vaa/0.2.1/", "requires_dist": ["cerberus; extra == \"validators\"", "django; extra == \"validators\"", "djangorestframework; extra == \"validators\"", "marshmallow>=3.0.1; extra == \"validators\"", "pyschemes; extra == \"validators\"", "pytest; extra == \"tests\"", "wtforms; extra == \"validators\""], "requires_python": "", "summary": "Validators Adapter. The common interface for all validators.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>VAA</h1>\n<p>VAlidators Adapter makes validation by any existing validator with the same interface.</p>\n<p>Supported validators:</p>\n<table>\n<thead>\n<tr>\n<th>validator</th>\n<th>adapter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://docs.python-cerberus.org/en/stable/\" rel=\"nofollow\">Cerberus</a></td>\n<td><code>va.cerberus</code></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.djangoproject.com/en/2.2/topics/forms/\" rel=\"nofollow\">Django Forms</a></td>\n<td><code>va.django</code></td>\n</tr>\n<tr>\n<td><a href=\"https://marshmallow.readthedocs.io/en/stable/\" rel=\"nofollow\">Marshmallow</a></td>\n<td><code>va.marshmallow</code></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/spy16/pyschemes\" rel=\"nofollow\">PySchemes</a></td>\n<td><code>va.pyschemes</code></td>\n</tr>\n<tr>\n<td><a href=\"https://www.django-rest-framework.org/\" rel=\"nofollow\">Django REST Framework</a></td>\n<td><code>va.restframework</code></td>\n</tr>\n<tr>\n<td><a href=\"https://wtforms.readthedocs.io/en/stable/\" rel=\"nofollow\">WTForms</a></td>\n<td><code>va.wtforms</code></td>\n</tr></tbody></table>\n<pre>python3 -m pip install --user vaa\n</pre>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">marshmallow</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vaa</span>\n\n<span class=\"nd\">@vaa</span><span class=\"o\">.</span><span class=\"n\">marshmallow</span>\n<span class=\"k\">class</span> <span class=\"nc\">Scheme</span><span class=\"p\">(</span><span class=\"n\">marshmallow</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n  <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">marshmallow</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">marshmallow</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Validating data</h2>\n<p>All schemes adopted by vaa has the same interface:</p>\n<pre><span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">Scheme</span><span class=\"p\">({</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Oleg'</span><span class=\"p\">})</span>\n<span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>    <span class=\"c1\"># True</span>\n<span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span>  <span class=\"c1\"># {'name': 'Oleg', 'id': 1}</span>\n\n<span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">Scheme</span><span class=\"p\">({</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'no'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Oleg'</span><span class=\"p\">})</span>\n<span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>    <span class=\"c1\"># False</span>\n<span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">errors</span>        <span class=\"c1\"># [Error(message='Not a valid integer.', field='id')]</span>\n</pre>\n<h2>Simple scheme</h2>\n<p>If you want to do validation with simple function, you can use <code>va.simple</code> adapter. For example, you want to check that in dict <code>{'a': ..., 'b': ...}</code> both values are positive. There are many ways to do so.</p>\n<p>It can return <code>bool</code>:</p>\n<pre><span class=\"nd\">@vaa</span><span class=\"o\">.</span><span class=\"n\">simple</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n  <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">b</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n</pre>\n<p>Or return message for error:</p>\n<pre><span class=\"nd\">@vaa</span><span class=\"o\">.</span><span class=\"n\">simple</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">b</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n  <span class=\"k\">return</span> <span class=\"s1\">'should be positive'</span>\n</pre>\n<p>Or return errors dict:</p>\n<pre><span class=\"nd\">@vaa</span><span class=\"o\">.</span><span class=\"n\">simple</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'should be positive'</span><span class=\"p\">}</span>\n  <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'should be positive'</span><span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<p>Or raise <code>va.ValidationError</code> with error message or dict:</p>\n<pre><span class=\"nd\">@vaa</span><span class=\"o\">.</span><span class=\"n\">simple</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">b</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"kc\">True</span>\n  <span class=\"k\">raise</span> <span class=\"n\">vaa</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"s1\">'should be positive'</span><span class=\"p\">)</span>\n</pre>\n<p>Also, if you want to get the original dict without unpacking it into keyword arguments, do a function that accepts only one <code>_</code> argument:</p>\n<pre><span class=\"nd\">@vaa</span><span class=\"o\">.</span><span class=\"n\">simple</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">_</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">_</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n</pre>\n<p>In that dict keys can be accessed as attributes:</p>\n<pre><span class=\"nd\">@vaa</span><span class=\"o\">.</span><span class=\"n\">simple</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n</pre>\n<p>Choose the best way and follow it. Avoid mixing them in one project.</p>\n<h2>Unknown scheme</h2>\n<p>If you're making a library that should accept any validator without explicit vaa usage, use <code>vaa.wrap</code>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Scheme</span><span class=\"p\">(</span><span class=\"n\">marshmallow</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n  <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">marshmallow</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">marshmallow</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">vaa</span><span class=\"o\">.</span><span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"n\">Scheme</span><span class=\"p\">)({</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'no'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Oleg'</span><span class=\"p\">})</span>\n<span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">Scheme</span><span class=\"p\">({</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'no'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Oleg'</span><span class=\"p\">})</span>\n<span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>    <span class=\"c1\"># False</span>\n<span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">errors</span>        <span class=\"c1\"># [Error(message='Not a valid integer.', field='id')]</span>\n</pre>\n\n          </div>"}, "last_serial": 7032198, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "959271db4fd7d3122db2544f3ca79876", "sha256": "77bc8d90d6f411ed62d890de572c541ef89442f60207cb0d51d22ee7a68123dd"}, "downloads": -1, "filename": "vaa-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "959271db4fd7d3122db2544f3ca79876", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4082, "upload_time": "2019-10-01T14:10:44", "upload_time_iso_8601": "2019-10-01T14:10:44.682807Z", "url": "https://files.pythonhosted.org/packages/73/9f/e6e8812eda67e9b2be32f2c959c400b58a6a76aaecb841271509de56689a/vaa-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6391d9c35ae3109e852a1f0f88f573b", "sha256": "3483516ef271f2c1b4e137b8200b08f3ed9ad98355532a1a709280896731221e"}, "downloads": -1, "filename": "vaa-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d6391d9c35ae3109e852a1f0f88f573b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2418, "upload_time": "2019-10-01T14:10:48", "upload_time_iso_8601": "2019-10-01T14:10:48.645871Z", "url": "https://files.pythonhosted.org/packages/ad/65/05dd7519628af43ace3ea571536bf33392942b8073db0da5b7ae6f61c728/vaa-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "71a1710ef84f4ede217357f8e000d982", "sha256": "65e3d40be28daa3fc2f27126609d716ebc88616b23c4d8918bd0bcd28a4ac8f6"}, "downloads": -1, "filename": "vaa-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "71a1710ef84f4ede217357f8e000d982", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4081, "upload_time": "2019-10-01T14:11:36", "upload_time_iso_8601": "2019-10-01T14:11:36.999461Z", "url": "https://files.pythonhosted.org/packages/ff/90/b545ad4ec5068c8751c56550d5d85ce1bb47016fb3d5a0c8d97e14321ebb/vaa-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19a061c8f8580afe63f755928075dd2d", "sha256": "d5f5c9d25937c2fa76f27c87684c80a206d414c58965689c1dfcc8e2e8b13f07"}, "downloads": -1, "filename": "vaa-0.1.1.tar.gz", "has_sig": false, "md5_digest": "19a061c8f8580afe63f755928075dd2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2417, "upload_time": "2019-10-01T14:11:38", "upload_time_iso_8601": "2019-10-01T14:11:38.547336Z", "url": "https://files.pythonhosted.org/packages/5f/b0/2987ade6f03caeec0b56f775f8a7a4494942740e0b53f0b58b7d0a3cc7c8/vaa-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "dd74251421c8e7c156d9631579cdc693", "sha256": "1c1136c43d2aa6c0073d97afef367f0b1f13f7a88851458a7e7def445de16d9d"}, "downloads": -1, "filename": "vaa-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "dd74251421c8e7c156d9631579cdc693", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6028, "upload_time": "2019-10-01T14:18:27", "upload_time_iso_8601": "2019-10-01T14:18:27.402787Z", "url": "https://files.pythonhosted.org/packages/1f/59/fab946270c1f1f0c005db62da21ad1a2a8e9c81eb5918a173048f524ce13/vaa-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed9b01ad0a56393165ffdf238bcd9aa6", "sha256": "7102c656090208d68e460bce03abed5c5e973637afb1f7c375f9a9b2df8c07d6"}, "downloads": -1, "filename": "vaa-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ed9b01ad0a56393165ffdf238bcd9aa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4851, "upload_time": "2019-10-01T14:18:29", "upload_time_iso_8601": "2019-10-01T14:18:29.246865Z", "url": "https://files.pythonhosted.org/packages/d9/8a/12eb1c54fc9302d2fc1a81ff742bce0b41c293ba7e69f7734e813808758a/vaa-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "e20e8bc8717cdd18864e5d29a2146de2", "sha256": "260c853653b0b2eeb0bde6e1f7402f7500f36d3fdea41d2699bdf31fa57142f9"}, "downloads": -1, "filename": "vaa-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e20e8bc8717cdd18864e5d29a2146de2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6088, "upload_time": "2019-10-01T15:49:08", "upload_time_iso_8601": "2019-10-01T15:49:08.582779Z", "url": "https://files.pythonhosted.org/packages/c2/4f/2f250019ad95464eb83825519013a160ec946991077fcdd28fe4c96509cd/vaa-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52c2c3f41c3a433eba280cfdf9e662db", "sha256": "2c19dcf7b75c5b815c9cb02340db2b38e0e9b3a80e8a29a1524161d4173be7fc"}, "downloads": -1, "filename": "vaa-0.1.3.tar.gz", "has_sig": false, "md5_digest": "52c2c3f41c3a433eba280cfdf9e662db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4899, "upload_time": "2019-10-01T15:49:10", "upload_time_iso_8601": "2019-10-01T15:49:10.157117Z", "url": "https://files.pythonhosted.org/packages/fc/1c/2698aaa2daf8fbdba5b0817f003d816a0b583c4925f8c5085c6aa9ae0ce1/vaa-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "2efc0439d069ef1421afe9fe96ae5a94", "sha256": "2fc051e15968012498bb79ef10c667c293a6c71edb0ada2793f5d8ea55a6fae3"}, "downloads": -1, "filename": "vaa-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2efc0439d069ef1421afe9fe96ae5a94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6147, "upload_time": "2019-10-02T10:08:09", "upload_time_iso_8601": "2019-10-02T10:08:09.135700Z", "url": "https://files.pythonhosted.org/packages/eb/64/5e4a8443e4e4610d1b3fc539e7ca5df149f97e3358e40c8651a98725fd86/vaa-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09700f00915e9fe8fb70f59947465491", "sha256": "578f2ece43ddf9f5e1adb906737736ddd2db16bdfde7c1b65e1a750fa502c8c0"}, "downloads": -1, "filename": "vaa-0.1.4.tar.gz", "has_sig": false, "md5_digest": "09700f00915e9fe8fb70f59947465491", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11427, "upload_time": "2019-10-02T10:08:10", "upload_time_iso_8601": "2019-10-02T10:08:10.882695Z", "url": "https://files.pythonhosted.org/packages/4d/31/e4a7fea6cb674e3461b9a7fd68b72d752fe9203b20d67ae2a96bc529602c/vaa-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "None", "digests": {"md5": "a7f009acedf7ffa34359070feb0afe87", "sha256": "02328ae7afff675a089ecd6cfca24787bf56a5fe70ffe154ba3ae62d8e4a4e06"}, "downloads": -1, "filename": "vaa-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a7f009acedf7ffa34359070feb0afe87", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7644, "upload_time": "2020-04-16T11:02:05", "upload_time_iso_8601": "2020-04-16T11:02:05.536550Z", "url": "https://files.pythonhosted.org/packages/8a/ed/bb251dfc0a0a8e4caaded7d535fe20f6976ac4f1261c47f54ecc5e62e810/vaa-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "None", "digests": {"md5": "83ccf3c3f984800f9e2c74d676a67913", "sha256": "04090e6433f164a9c3b9ea09a15ae1663115397f4489b85ca632a0b9e88075ea"}, "downloads": -1, "filename": "vaa-0.2.0.tar.gz", "has_sig": false, "md5_digest": "83ccf3c3f984800f9e2c74d676a67913", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7538, "upload_time": "2020-04-16T11:02:03", "upload_time_iso_8601": "2020-04-16T11:02:03.816084Z", "url": "https://files.pythonhosted.org/packages/1f/2d/f16860e00c2a3598b5be66bb85726aa9829cb2b94f03f1086f9113c8f3c6/vaa-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "None", "digests": {"md5": "3114a5d875f19bbf9d2ab8e62d9d818a", "sha256": "8f638e47e633739f5fb2912d36c5c01f7d757ce9f9508745dcae1eb0b8f1778f"}, "downloads": -1, "filename": "vaa-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3114a5d875f19bbf9d2ab8e62d9d818a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8244, "upload_time": "2020-04-16T13:34:52", "upload_time_iso_8601": "2020-04-16T13:34:52.412451Z", "url": "https://files.pythonhosted.org/packages/78/90/2008188c9427f118587e038e2a00f4247c07acec09fc934b2addeda668f2/vaa-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "None", "digests": {"md5": "3c16ee150c2cbde30ed0800f7bc5384a", "sha256": "55a4419d8b094aacffb82d748b09abe5ca35fe603675ebdab7571373e7d3bf8a"}, "downloads": -1, "filename": "vaa-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3c16ee150c2cbde30ed0800f7bc5384a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8066, "upload_time": "2020-04-16T13:34:50", "upload_time_iso_8601": "2020-04-16T13:34:50.057649Z", "url": "https://files.pythonhosted.org/packages/e2/74/369907e565282db1952aa70c244f425d6d158c1c096306e0552afaab5bfd/vaa-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "None", "digests": {"md5": "3114a5d875f19bbf9d2ab8e62d9d818a", "sha256": "8f638e47e633739f5fb2912d36c5c01f7d757ce9f9508745dcae1eb0b8f1778f"}, "downloads": -1, "filename": "vaa-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3114a5d875f19bbf9d2ab8e62d9d818a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8244, "upload_time": "2020-04-16T13:34:52", "upload_time_iso_8601": "2020-04-16T13:34:52.412451Z", "url": "https://files.pythonhosted.org/packages/78/90/2008188c9427f118587e038e2a00f4247c07acec09fc934b2addeda668f2/vaa-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "None", "digests": {"md5": "3c16ee150c2cbde30ed0800f7bc5384a", "sha256": "55a4419d8b094aacffb82d748b09abe5ca35fe603675ebdab7571373e7d3bf8a"}, "downloads": -1, "filename": "vaa-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3c16ee150c2cbde30ed0800f7bc5384a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8066, "upload_time": "2020-04-16T13:34:50", "upload_time_iso_8601": "2020-04-16T13:34:50.057649Z", "url": "https://files.pythonhosted.org/packages/e2/74/369907e565282db1952aa70c244f425d6d158c1c096306e0552afaab5bfd/vaa-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:21 2020"}