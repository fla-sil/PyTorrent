{"info": {"author": "Index Management Team", "author_email": "im@dxfeed.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Cython", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Office/Business :: Financial"], "description": "# dxfeed package\n\nThis package provides access to [dxFeed](https://www.dxfeed.com/) streaming data.\nThe library is build as a thin wrapper over [dxFeed C-API library](https://github.com/dxFeed/dxfeed-c-api).\nWe use [Cython](https://cython.org/) in this project as it combines flexibility, reliability and\nusability in writing C extensions.\n\nThis package already contains basic C-API functions related to creating connections, subscriptions etc.\nMoreover default listeners (functions responsible for event processing) are ready to use. The user is also able to\nwrite his own custom listener in Cython\n\n## Installation\n\n**Requirements:** python >3.6, pandas\n\n```python\npip3 install pandas\n```\n\nInstall package via PyPI\n\n```python\npip3 install dxfeed\n``` \n\n## Basic usage\n\nAll the functions in C API have similar ones in Python with the same name. Not all arguments are\nsupported by now, this work is in progress.\n\n**Import dxfeed library**:\n\n```python\nimport dxfeed as dx\n``` \n\n**Create connection**:\n\n```python\ncon = dx.dxf_create_connection(address='demo.dxfeed.com:7300')\n```\n\n**Create one or several subscriptions of certain event types**:\n```python\nsub1 = dx.dxf_create_subscription(con, 'Trade')\nsub2 = dx.dxf_create_subscription(con, 'Quote')\n```\n'Trade', 'Quote', 'Summary', 'Profile', 'Order', 'TimeAndSale', 'Candle', 'TradeETH', 'SpreadOrder',\n'Greeks', 'TheoPrice', 'Underlying', 'Series', 'Configuration' event types are supported.\n\n**Attach listeners**:\n```python\ndx.dxf_attach_listener(sub1)\ndx.dxf_attach_listener(sub2)\n```\n\n**Add tickers you want to get data for**:\n```python\ndx.dxf_add_symbols(sub1, ['AAPL', 'MSFT'])\ndx.dxf_add_symbols(sub2, ['AAPL', 'C'])\n```\n\n`dxfeed` has default listeners for each event type, but you are able to write \nyour custom one. You can find how to do it at `example/Custom listener example.ipynb`.\n\n**Look at the data**:\n```python\nsub1.get_data()\nsub2.get_data()\n```\nThe data is stored in Subscription class. You can also turn dict to pandas DataFrame simply calling\n`sub1.to_dataframe()`.\n\n**Detach the listener, if you want to stop recieving data**:\n```python\ndx.dxf_detach_listener(sub1)\ndx.dxf_detach_listener(sub2)\n```\n\n**Finally, close your connection**:\n```python\ndx.dxf_close_connection(con)\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MPL-2.0", "maintainer": "", "maintainer_email": "", "name": "dxfeed", "package_url": "https://pypi.org/project/dxfeed/", "platform": "", "project_url": "https://pypi.org/project/dxfeed/", "project_urls": {"Documentation": "https://docs.dxfeed.com/python/index.html", "Source code": "https://github.com/dxFeed/dxfeed-python-api"}, "release_url": "https://pypi.org/project/dxfeed/0.2.0/", "requires_dist": ["pandas (>=0.25.1,<0.26.0)"], "requires_python": ">=3.6,<4.0", "summary": "DXFeed Python API via C API", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dxfeed package</h1>\n<p>This package provides access to <a href=\"https://www.dxfeed.com/\" rel=\"nofollow\">dxFeed</a> streaming data.\nThe library is build as a thin wrapper over <a href=\"https://github.com/dxFeed/dxfeed-c-api\" rel=\"nofollow\">dxFeed C-API library</a>.\nWe use <a href=\"https://cython.org/\" rel=\"nofollow\">Cython</a> in this project as it combines flexibility, reliability and\nusability in writing C extensions.</p>\n<p>This package already contains basic C-API functions related to creating connections, subscriptions etc.\nMoreover default listeners (functions responsible for event processing) are ready to use. The user is also able to\nwrite his own custom listener in Cython</p>\n<h2>Installation</h2>\n<p><strong>Requirements:</strong> python &gt;3.6, pandas</p>\n<pre><span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"n\">pandas</span>\n</pre>\n<p>Install package via PyPI</p>\n<pre><span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"n\">dxfeed</span>\n</pre>\n<h2>Basic usage</h2>\n<p>All the functions in C API have similar ones in Python with the same name. Not all arguments are\nsupported by now, this work is in progress.</p>\n<p><strong>Import dxfeed library</strong>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dxfeed</span> <span class=\"k\">as</span> <span class=\"nn\">dx</span>\n</pre>\n<p><strong>Create connection</strong>:</p>\n<pre><span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">dx</span><span class=\"o\">.</span><span class=\"n\">dxf_create_connection</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'demo.dxfeed.com:7300'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Create one or several subscriptions of certain event types</strong>:</p>\n<pre><span class=\"n\">sub1</span> <span class=\"o\">=</span> <span class=\"n\">dx</span><span class=\"o\">.</span><span class=\"n\">dxf_create_subscription</span><span class=\"p\">(</span><span class=\"n\">con</span><span class=\"p\">,</span> <span class=\"s1\">'Trade'</span><span class=\"p\">)</span>\n<span class=\"n\">sub2</span> <span class=\"o\">=</span> <span class=\"n\">dx</span><span class=\"o\">.</span><span class=\"n\">dxf_create_subscription</span><span class=\"p\">(</span><span class=\"n\">con</span><span class=\"p\">,</span> <span class=\"s1\">'Quote'</span><span class=\"p\">)</span>\n</pre>\n<p>'Trade', 'Quote', 'Summary', 'Profile', 'Order', 'TimeAndSale', 'Candle', 'TradeETH', 'SpreadOrder',\n'Greeks', 'TheoPrice', 'Underlying', 'Series', 'Configuration' event types are supported.</p>\n<p><strong>Attach listeners</strong>:</p>\n<pre><span class=\"n\">dx</span><span class=\"o\">.</span><span class=\"n\">dxf_attach_listener</span><span class=\"p\">(</span><span class=\"n\">sub1</span><span class=\"p\">)</span>\n<span class=\"n\">dx</span><span class=\"o\">.</span><span class=\"n\">dxf_attach_listener</span><span class=\"p\">(</span><span class=\"n\">sub2</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Add tickers you want to get data for</strong>:</p>\n<pre><span class=\"n\">dx</span><span class=\"o\">.</span><span class=\"n\">dxf_add_symbols</span><span class=\"p\">(</span><span class=\"n\">sub1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'AAPL'</span><span class=\"p\">,</span> <span class=\"s1\">'MSFT'</span><span class=\"p\">])</span>\n<span class=\"n\">dx</span><span class=\"o\">.</span><span class=\"n\">dxf_add_symbols</span><span class=\"p\">(</span><span class=\"n\">sub2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'AAPL'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">])</span>\n</pre>\n<p><code>dxfeed</code> has default listeners for each event type, but you are able to write\nyour custom one. You can find how to do it at <code>example/Custom listener example.ipynb</code>.</p>\n<p><strong>Look at the data</strong>:</p>\n<pre><span class=\"n\">sub1</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">sub2</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n</pre>\n<p>The data is stored in Subscription class. You can also turn dict to pandas DataFrame simply calling\n<code>sub1.to_dataframe()</code>.</p>\n<p><strong>Detach the listener, if you want to stop recieving data</strong>:</p>\n<pre><span class=\"n\">dx</span><span class=\"o\">.</span><span class=\"n\">dxf_detach_listener</span><span class=\"p\">(</span><span class=\"n\">sub1</span><span class=\"p\">)</span>\n<span class=\"n\">dx</span><span class=\"o\">.</span><span class=\"n\">dxf_detach_listener</span><span class=\"p\">(</span><span class=\"n\">sub2</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Finally, close your connection</strong>:</p>\n<pre><span class=\"n\">dx</span><span class=\"o\">.</span><span class=\"n\">dxf_close_connection</span><span class=\"p\">(</span><span class=\"n\">con</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7138606, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "52a7230ef1170c7d686b0f3bce5da755", "sha256": "234f20f9eaae85fc52a64092a82c7bfcc2c601886081e681c3ef63da6fab4330"}, "downloads": -1, "filename": "dxfeed-0.1.0.tar.gz", "has_sig": false, "md5_digest": "52a7230ef1170c7d686b0f3bce5da755", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 406718, "upload_time": "2020-04-07T13:31:52", "upload_time_iso_8601": "2020-04-07T13:31:52.556986Z", "url": "https://files.pythonhosted.org/packages/a0/40/0f0bc3a6c44f80c9e2d477649e59666b3b7ccdd1f32ad6a962da0f7728ce/dxfeed-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "166c36a4f00ecc9c118bcf89cc0a71a2", "sha256": "a134268c323f98d0a82de7274d2df779a9ec3c57d1f21e6908e4b6c02829093a"}, "downloads": -1, "filename": "dxfeed-0.1.1.tar.gz", "has_sig": false, "md5_digest": "166c36a4f00ecc9c118bcf89cc0a71a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 406463, "upload_time": "2020-04-22T14:13:13", "upload_time_iso_8601": "2020-04-22T14:13:13.065965Z", "url": "https://files.pythonhosted.org/packages/1d/a0/9c580793f23718f15065a01beb36c3d7de54bdf8c3c33427e2603138a18c/dxfeed-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "091502915f1390e1bc008625dfaf3ffc", "sha256": "12ea98a9e5661af5640777cd18de9bf192eccfc3a25a0ef689cffda5fe909d18"}, "downloads": -1, "filename": "dxfeed-0.2.0.tar.gz", "has_sig": false, "md5_digest": "091502915f1390e1bc008625dfaf3ffc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 407103, "upload_time": "2020-04-30T16:26:36", "upload_time_iso_8601": "2020-04-30T16:26:36.957131Z", "url": "https://files.pythonhosted.org/packages/82/4a/4840d60837c60b9cb7dfdb6c79866741b3ce2509fed1d2a2710577034ebd/dxfeed-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "091502915f1390e1bc008625dfaf3ffc", "sha256": "12ea98a9e5661af5640777cd18de9bf192eccfc3a25a0ef689cffda5fe909d18"}, "downloads": -1, "filename": "dxfeed-0.2.0.tar.gz", "has_sig": false, "md5_digest": "091502915f1390e1bc008625dfaf3ffc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 407103, "upload_time": "2020-04-30T16:26:36", "upload_time_iso_8601": "2020-04-30T16:26:36.957131Z", "url": "https://files.pythonhosted.org/packages/82/4a/4840d60837c60b9cb7dfdb6c79866741b3ce2509fed1d2a2710577034ebd/dxfeed-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:48 2020"}