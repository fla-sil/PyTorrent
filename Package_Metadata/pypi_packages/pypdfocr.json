{"info": {"author": "Virantha N. Ekanayake", "author_email": "virantha@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "PyPDFOCR - Tesseract-OCR based PDF filing\n=========================================\n\n|image0| |image1| |image2| |passing| |quality| |Coverage Status|\n\nThis program will help manage your scanned PDFs by doing the following:\n\n-  Take a scanned PDF file and run OCR on it (using the Tesseract OCR\n   software from Google), generating a searchable PDF\n-  Optionally, watch a folder for incoming scanned PDFs and\n   automatically run OCR on them\n-  Optionally, file the scanned PDFs into directories based on simple\n   keyword matching that you specify\n-  Evernote auto-upload and filing based on keyword search\n-  Email status when it files your PDF\n\nMore links:\n\n-  `Blog @ virantha.com <http://virantha.com/category/pypdfocr.html>`__\n-  `Documentation @ gitpages <http://virantha.github.com/pypdfocr/html>`__\n-  `Source @ github <https://www.github.com/virantha/pypdfocr>`__\n\nUsage:\n######\n\nSingle conversion:\n~~~~~~~~~~~~~~~~~~\n\n::\n\n    pypdfocr filename.pdf\n\n    --> filename_ocr.pdf will be generated\n\nIf you have a language pack installed, then you can specify it with the\n``-l`` option:\n\n::\n\n    pypdfocr -l spa filename.pdf\n\nFolder monitoring:\n~~~~~~~~~~~~~~~~~~\n\n::\n\n    pypdfocr -w watch_directory\n\n    --> Every time a pdf file is added to `watch_directory` it will be OCR'ed\n\nAutomatic filing:\n~~~~~~~~~~~~~~~~~\n\nTo automatically move the OCR'ed pdf to a directory based on a keyword,\nuse the -f option and specify a configuration file (described below):\n\n::\n\n    pypdfocr filename.pdf -f -c config.yaml\n\nYou can also do this in folder monitoring mode:\n\n::\n\n    pypdfocr -w watch_directory -f -c config.yaml\n\nFiling based on filename match:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf no keywords match the contents of the filename, you can optionally\nallow it to fallback to trying to find keyword matches with the PDF\nfilename using the -n option. For example, you may have receipts always\nnamed as ``receipt_2013_12_2.pdf`` by your scanner, and you want to move\nthis to a folder called 'receipts'. Assuming you have a keyword\n``receipt`` matching to folder ``receipts`` in your configuration file\nas described below, you can run the following and have this filed even\nif the content of the pdf does not contain the text 'receipt':\n\n::\n\n    pypdfocr filename.pdf -f -c config.yaml -n\n\nConfiguration file for automatic PDF filing\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe config.yaml file above is a simple folder to keyword matching text\nfile. It determines where your OCR'ed PDFs (and optionally, the original\nscanned PDF) are placed after processing. An example is given below:\n\n::\n\n    target_folder: \"docs/filed\"\n    default_folder: \"docs/filed/manual_sort\"\n    original_move_folder: \"docs/originals\"\n\n    folders:\n        finances:\n            - american express\n            - chase card\n            - internal revenue service\n        travel:\n            - boarding pass\n            - airlines\n            - expedia\n            - orbitz\n        receipts:\n            - receipt\n\nThe ``target_folder`` is the root of your filing cabinet. Any PDF moving\nwill happen in sub-directories under this directory.\n\nThe ``folders`` section defines your filing directories and the keywords\nassociated with them. In this example, we have three filing directories\n(finances, travl, receipts), and some associated keywords for each\nfiling directory. For example, if your OCR'ed PDF contains the phrase\n\"american express\" (in any upper/lower case), it will be filed into\n``docs/filed/finances``\n\nThe ``default_folder`` is where the OCR'ed PDF is moved to if there is\nno keyword match.\n\nThe ``original_move_folder`` is optional (you can comment it out with\n``#`` in front of that line), but if specified, the original scanned PDF\nis moved into this directory after OCR is done. Otherwise, if this field\nis not present or commented out, your original PDF will stay where it\nwas found.\n\nIf there is any naming conflict during filing, the program will add an\nunderscore followed by a number to each filename, in order to avoid\noverwriting files that may already be present.\n\nEvernote upload:\n~~~~~~~~~~~~~~~~\n\nEvernote authentication token\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo enable Evernote support, you will need to `get a developer token for\nyour Evernote\naccount. <https://www.evernote.com/api/DeveloperToken.action>`__. You\nshould note that this script will never delete or modify existing notes\nin your account, and limits itself to creating new Notebooks and Notes.\nOnce you get that token, you copy and paste it into your configuration\nfile as shown below\n\nEvernote filing usage\n^^^^^^^^^^^^^^^^^^^^^\n\nTo automatically upload the OCR'ed pdf to a folder based on a keyword,\nuse the ``-e`` option instead of the ``-f`` auto filing option.\n\n::\n\n    pypdfocr filename.pdf -e -c config.yaml\n\nSimilarly, you can also do this in folder monitoring mode:\n\n::\n\n    pypdfocr -w watch_directory -e -c config.yaml\n\nEvernote filing configuration file\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe config file shown above only needs to change slightly. The folders\nsection is completely unchanged, but note that ``target_folder`` is the\nname of your \"Notebook stack\" in Evernote, and the ``default_folder``\nshould just be the default Evernote upload notebook name.\n\n::\n\n    target_folder: \"evernote_stack\"\n    default_folder: \"default\"\n    original_move_folder: \"docs/originals\"\n    evernote_developer_token: \"YOUR_TOKEN\"\n\n    folders:\n        finances:\n            - american express\n            - chase card\n            - internal revenue service\n        travel:\n            - boarding pass\n            - airlines\n            - expedia\n            - orbitz\n        receipts:\n            - receipt\n\nAuto email\n~~~~~~~~~~\n\nYou can have PyPDFOCR email you everytime it converts a file and files\nit. You need to first specify the following lines in the configuration\nfile and then use the ``-m`` option when invoking ``pypdfocr``:\n\n::\n\n    mail_smtp_server: \"smtp.gmail.com:587\"\n    mail_smtp_login: \"virantha@gmail.com\"\n    mail_smtp_password: \"PASSWORD\"\n    mail_from_addr: \"virantha@gmail.com\"\n    mail_to_list: \n        - \"virantha@gmail.com\"\n        - \"person2@gmail.com\"\n\n\nAdvanced options\n################\n\nFine-tuning Tesseract/Ghostscript/others\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can specify Tesseract and Ghostscript executable locations manually, as\nwell as the number of concurrent processes allowed during preprocessing and\ntesseract.  Use the following in your configuration file:\n\n::\n\n    tesseract:\n        binary: \"/usr/bin/tesseract\"\n        threads: 8\n\n    ghostscript:\n        binary: \"/usr/local/bin/gs\"\n\n    preprocess:\n        threads: 8\n\nHandling disk time-outs\n~~~~~~~~~~~~~~~~~~~~~~~\nIf you need to increase the time interval (default 3 seconds) between new\ndocument scans when pypdfocr is watching a directory, you can specify the following\noption in the configuration file:\n\n::\n    \n    watch:\n        scan_interval: 6\n\nInstallation\n############\n\nUsing pip\n~~~~~~~~~\n\nPyPDFOCR is available in PyPI, so you can just run:\n\n::\n\n    pip install pypdfocr\n\nPlease note that some of the 3rd-party libraries required by PyPDFOCR wiill\nrequire some build tools, especially on a default Ubuntu system.  If you run\ninto any issues using pip install, you may want to install the\nfollowing packages on Ubuntu and try again:\n\n- gcc\n- libjpeg-dev\n- zlib-bin\n- zlib1g-dev\n- python-dev\n\nFor those on **Windows**, because it's such a pain to get all the PIL\nand PDF dependencies installed, I've gone ahead and made an executable\ncalled\n`pypdfocr.exe <https://github.com/virantha/pypdfocr/blob/master/dist/pypdfocr.exe?raw=true>`__\n\nYou still need to install Tesseract, GhostScript, etc. as detailed below in\nthe external dependencies list.\n\nManual install\n~~~~~~~~~~~~~~\n\nClone the source directly from github (you need to have git installed):\n\n::\n\n    git clone https://github.com/virantha/pypdfocr.git\n\nThen, install the following third-party python libraries:\n\n-  Pillow (Python Imaging Library) https://pillow.readthedocs.org/en/3.1.x/\n-  ReportLab (PDF generation library)\n   http://www.reportlab.com/opensource/\n-  Watchdog (Cross-platform fhlesystem events monitoring)\n   https://pypi.python.org/pypi/watchdog\n-  PyPDF2 (Pure python pdf library)\n\nThese can all be installed via pip:\n\n::\n\n    pip install Pillow\n    pip install reportlab\n    pip install watchdog\n    pip install pypdf2\n\n\nYou will also need to install the external dependencies listed below.\n\nExternal Dependencies\n~~~~~~~~~~~~~~~~~~~~~\n\nPyPDFOCR relies on the following (free) programs being installed and in\nthe path:\n\n-  Tesseract OCR software https://code.google.com/p/tesseract-ocr/\n-  GhostScript http://www.ghostscript.com/\n-  ImageMagick http://www.imagemagick.org/\n-  Poppler http://poppler.freedesktop.org/  (`Windows <http://sourceforge.net/projects/poppler-win32/>`__)\n\nPoppler is only required if you want pypdfocr to figure out the original PDF resolution\nautomatically; just make sure you have ``pdfimages`` in your path.   Note that the \n`xpdf <http://www.foolabs.com/xpdf/download.html>`__ provided ``pdfimages`` does not work for this, \nbecause it does not support the ``-list`` option to list the table of images in a PDF file.\n\nOn Mac OS X, you can install these using homebrew:\n\n::\n\n    brew install tesseract\n    brew install ghostscript\n    brew install poppler\n    brew install imagemagick\n\nOn Windows, please use the installers provided on their download pages.\n\n\\*\\* Important \\*\\* Tesseract version 3.02.02 or newer required\n(apparently 3.02.01-6 and possibly others do not work due to a hocr\noutput format change that I'm not planning to address). On Ubuntu, you\nmay need to compile and install it manually by following `these\ninstructions <http://miphol.com/muse/2013/05/install-tesseract-ocr-on-ubunt.html>`__\n\nAlso note that if you want Tesseract to recognize rotated documents (upside down, or rotated 90 degrees)\nthen you need to find your tessdata directory and do the following:\n\n::\n\n    cd /usr/local/share/tessdata \n    cp eng.traineddata osd.traineddata \n\n``osd`` stands for Orientation and Script Detection, so you need to copy the .traineddata\nfor whatever language you want to scan in as ``osd.traineddata``.  If you don't do this step, \nthen any landscape document will produce garbage\n\nDisclaimer\n##########\n\nWhile test coverage is at 84% right now, Sphinx docs generation is at an\nearly stage. The software is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n.. |image0| image:: https://badge.fury.io/py/pypdfocr.png\n   :target: https://pypi.python.org/pypi/pypdfocr\n.. |image1| image:: https://pypip.in/d/pypdfocr/badge.png\n.. |image2| image:: https://pypip.in/license/pypdfocr/badge.png\n.. |passing| image:: https://scrutinizer-ci.com/g/virantha/pypdfocr/badges/build.png?b=master\n.. |quality| image:: https://scrutinizer-ci.com/g/virantha/pypdfocr/badges/quality-score.png?b=master\n.. |Coverage Status| image:: https://coveralls.io/repos/virantha/pypdfocr/badge.png?branch=develop\n   :target: https://coveralls.io/r/virantha/pypdfocr\n\n=======  ========   ======\nVersion  Date       Changes\n-------  --------   ------\n\nv0.9.1   10/11/16   Fixes (#43, #41)\nv0.9.0   2/29/16    Fixed rotated page text, Mac OS X invisible fonts, and pdf merge slowdown\nv0.8.5   2/21/16    Better ctrl-c and cleanup behavior\nv0.8.4   2/18/16    Maintenance release\nv0.8.3   2/18/16    Bug fix for multiprocessing on windows, ctrl-c interrupt, and integer keywords\nv0.8.2   12/8/14    Fixed imagemagick invocation on windows.  Parallelized preprocessing and tesseract execution\nv0.8.1   12/5/14    Added --skip-preprocess option, scan_interval option, and fixed too many open files bug during page overlay\nv0.8.0   10/27/14   Added preprocessing to clean up prior to tesseract, bug fixes on file names with spaces/dots\nv0.7.6   9/10/14    Fixed issue 17 rotation bug\nv0.7.5   8/18/14    Update for Tesseract 3.03 .hocr filename change\nv0.7.4   3/28/14    Bug fix on pdf assembly\nv0.7.3   3/27/14    Modified internals to use single image per page (instead of multipage tiff). Also enabled orientation detection\nv0.7.2   3/26/14    Switched from Pil to Pillow. Now uses original images from PDF in output pdf (no dpi/color/quality changes!)\nv0.7.1   3/25/14    OCR Language is now an option\nv0.7.0   3/25/14    Now honors original pdf resolution\nv0.6.1   2/16/14    Bug fix for pdfs with only numbers in the filename\nv0.6.0   1/16/14    Added filing based on filename match as fallback, added tesseract version check\nv0.5.4   1/12/14    Fixed bug with reordering of text pages on certain platforms(glob)\nv0.5.3   12/12/13   Fix to evernote server specification\nv0.5.2   12/08/13   Fix to lowercase keywords\nv0.5.1   11/02/13   Fixed a bunch of windows critical path handling issues\nv0.5.0   10/30/13   Email status added, 90% test coverage\nv0.4.1   10/28/13   Made HOCR parsing more robust\nv0.4.0   10/28/13   Added early Evernote upload support\nv0.3.1   10/24/13   Path fix on windows\nv0.3.0   10/23/13   Added filing of converted pdfs using a configuration file to specify target directories based on keyword matches in the pdf text\nv0.2.2   10/22/13   Added a console script to put the pypdfocr script into your bin\nv0.2.1   10/22/13   Fix to initial packaging problem.\nv0.2.0   10/21/13   Initial release.\n=======  ========   ======\n\nTodo list\n=========\n\n- #43 version check for tesseract\n- On windows, search for pdfimages and imagemagick instead of relying on path\n- Split up into flow steps  \n- Run more robustness tests for watching networked shares\n- Add more docstrings\n- Add more option specifiers to tesseract and ghostscript", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "ASL 2.0", "maintainer": "", "maintainer_email": "", "name": "pypdfocr", "package_url": "https://pypi.org/project/pypdfocr/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pypdfocr/", "project_urls": null, "release_url": "https://pypi.org/project/pypdfocr/0.9.1/", "requires_dist": null, "requires_python": "", "summary": "Converts a scanned PDF into an OCR'ed pdf using Tesseract-OCR and Ghostscript", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pypdfocr-tesseract-ocr-based-pdf-filing\">\n<h2>PyPDFOCR - Tesseract-OCR based PDF filing</h2>\n<p><a href=\"https://pypi.python.org/pypi/pypdfocr\" rel=\"nofollow\"><img alt=\"image0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73685f304fdfdac692013dccc49eb23bf2666cb0/68747470733a2f2f62616467652e667572792e696f2f70792f70797064666f63722e706e67\"></a> <img alt=\"image1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7dcdd832981fea8095acb6c4f838707bba82e57f/68747470733a2f2f70797069702e696e2f642f70797064666f63722f62616467652e706e67\"> <img alt=\"image2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca912ea17d84267658a2dc836fce35260003f885/68747470733a2f2f70797069702e696e2f6c6963656e73652f70797064666f63722f62616467652e706e67\"> <img alt=\"passing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4c183726f4c3a74321d4c6738716f1a594a2b5f/68747470733a2f2f7363727574696e697a65722d63692e636f6d2f672f766972616e7468612f70797064666f63722f6261646765732f6275696c642e706e673f623d6d6173746572\"> <img alt=\"quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2543404b966ed21a2e1292438e4337c530de9723/68747470733a2f2f7363727574696e697a65722d63692e636f6d2f672f766972616e7468612f70797064666f63722f6261646765732f7175616c6974792d73636f72652e706e673f623d6d6173746572\"> <a href=\"https://coveralls.io/r/virantha/pypdfocr\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/23473c4f69104391ace392994b3f4a62d42ab2bb/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f766972616e7468612f70797064666f63722f62616467652e706e673f6272616e63683d646576656c6f70\"></a></p>\n<p>This program will help manage your scanned PDFs by doing the following:</p>\n<ul>\n<li>Take a scanned PDF file and run OCR on it (using the Tesseract OCR\nsoftware from Google), generating a searchable PDF</li>\n<li>Optionally, watch a folder for incoming scanned PDFs and\nautomatically run OCR on them</li>\n<li>Optionally, file the scanned PDFs into directories based on simple\nkeyword matching that you specify</li>\n<li>Evernote auto-upload and filing based on keyword search</li>\n<li>Email status when it files your PDF</li>\n</ul>\n<p>More links:</p>\n<ul>\n<li><a href=\"http://virantha.com/category/pypdfocr.html\" rel=\"nofollow\">Blog @ virantha.com</a></li>\n<li><a href=\"http://virantha.github.com/pypdfocr/html\" rel=\"nofollow\">Documentation @ gitpages</a></li>\n<li><a href=\"https://www.github.com/virantha/pypdfocr\" rel=\"nofollow\">Source @ github</a></li>\n</ul>\n<div id=\"usage\">\n<h3>Usage:</h3>\n<div id=\"single-conversion\">\n<h4>Single conversion:</h4>\n<pre>pypdfocr filename.pdf\n\n--&gt; filename_ocr.pdf will be generated\n</pre>\n<p>If you have a language pack installed, then you can specify it with the\n<tt><span class=\"pre\">-l</span></tt> option:</p>\n<pre>pypdfocr -l spa filename.pdf\n</pre>\n</div>\n<div id=\"folder-monitoring\">\n<h4>Folder monitoring:</h4>\n<pre>pypdfocr -w watch_directory\n\n--&gt; Every time a pdf file is added to `watch_directory` it will be OCR'ed\n</pre>\n</div>\n<div id=\"automatic-filing\">\n<h4>Automatic filing:</h4>\n<p>To automatically move the OCR\u2019ed pdf to a directory based on a keyword,\nuse the -f option and specify a configuration file (described below):</p>\n<pre>pypdfocr filename.pdf -f -c config.yaml\n</pre>\n<p>You can also do this in folder monitoring mode:</p>\n<pre>pypdfocr -w watch_directory -f -c config.yaml\n</pre>\n</div>\n<div id=\"filing-based-on-filename-match\">\n<h4>Filing based on filename match:</h4>\n<p>If no keywords match the contents of the filename, you can optionally\nallow it to fallback to trying to find keyword matches with the PDF\nfilename using the -n option. For example, you may have receipts always\nnamed as <tt>receipt_2013_12_2.pdf</tt> by your scanner, and you want to move\nthis to a folder called \u2018receipts\u2019. Assuming you have a keyword\n<tt>receipt</tt> matching to folder <tt>receipts</tt> in your configuration file\nas described below, you can run the following and have this filed even\nif the content of the pdf does not contain the text \u2018receipt\u2019:</p>\n<pre>pypdfocr filename.pdf -f -c config.yaml -n\n</pre>\n<div id=\"configuration-file-for-automatic-pdf-filing\">\n<h5>Configuration file for automatic PDF filing</h5>\n<p>The config.yaml file above is a simple folder to keyword matching text\nfile. It determines where your OCR\u2019ed PDFs (and optionally, the original\nscanned PDF) are placed after processing. An example is given below:</p>\n<pre>target_folder: \"docs/filed\"\ndefault_folder: \"docs/filed/manual_sort\"\noriginal_move_folder: \"docs/originals\"\n\nfolders:\n    finances:\n        - american express\n        - chase card\n        - internal revenue service\n    travel:\n        - boarding pass\n        - airlines\n        - expedia\n        - orbitz\n    receipts:\n        - receipt\n</pre>\n<p>The <tt>target_folder</tt> is the root of your filing cabinet. Any PDF moving\nwill happen in sub-directories under this directory.</p>\n<p>The <tt>folders</tt> section defines your filing directories and the keywords\nassociated with them. In this example, we have three filing directories\n(finances, travl, receipts), and some associated keywords for each\nfiling directory. For example, if your OCR\u2019ed PDF contains the phrase\n\u201camerican express\u201d (in any upper/lower case), it will be filed into\n<tt>docs/filed/finances</tt></p>\n<p>The <tt>default_folder</tt> is where the OCR\u2019ed PDF is moved to if there is\nno keyword match.</p>\n<p>The <tt>original_move_folder</tt> is optional (you can comment it out with\n<tt>#</tt> in front of that line), but if specified, the original scanned PDF\nis moved into this directory after OCR is done. Otherwise, if this field\nis not present or commented out, your original PDF will stay where it\nwas found.</p>\n<p>If there is any naming conflict during filing, the program will add an\nunderscore followed by a number to each filename, in order to avoid\noverwriting files that may already be present.</p>\n</div>\n</div>\n<div id=\"evernote-upload\">\n<h4>Evernote upload:</h4>\n<div id=\"evernote-authentication-token\">\n<h5>Evernote authentication token</h5>\n<p>To enable Evernote support, you will need to <a href=\"https://www.evernote.com/api/DeveloperToken.action\" rel=\"nofollow\">get a developer token for\nyour Evernote\naccount.</a>. You\nshould note that this script will never delete or modify existing notes\nin your account, and limits itself to creating new Notebooks and Notes.\nOnce you get that token, you copy and paste it into your configuration\nfile as shown below</p>\n</div>\n<div id=\"evernote-filing-usage\">\n<h5>Evernote filing usage</h5>\n<p>To automatically upload the OCR\u2019ed pdf to a folder based on a keyword,\nuse the <tt><span class=\"pre\">-e</span></tt> option instead of the <tt><span class=\"pre\">-f</span></tt> auto filing option.</p>\n<pre>pypdfocr filename.pdf -e -c config.yaml\n</pre>\n<p>Similarly, you can also do this in folder monitoring mode:</p>\n<pre>pypdfocr -w watch_directory -e -c config.yaml\n</pre>\n</div>\n<div id=\"evernote-filing-configuration-file\">\n<h5>Evernote filing configuration file</h5>\n<p>The config file shown above only needs to change slightly. The folders\nsection is completely unchanged, but note that <tt>target_folder</tt> is the\nname of your \u201cNotebook stack\u201d in Evernote, and the <tt>default_folder</tt>\nshould just be the default Evernote upload notebook name.</p>\n<pre>target_folder: \"evernote_stack\"\ndefault_folder: \"default\"\noriginal_move_folder: \"docs/originals\"\nevernote_developer_token: \"YOUR_TOKEN\"\n\nfolders:\n    finances:\n        - american express\n        - chase card\n        - internal revenue service\n    travel:\n        - boarding pass\n        - airlines\n        - expedia\n        - orbitz\n    receipts:\n        - receipt\n</pre>\n</div>\n</div>\n<div id=\"auto-email\">\n<h4>Auto email</h4>\n<p>You can have PyPDFOCR email you everytime it converts a file and files\nit. You need to first specify the following lines in the configuration\nfile and then use the <tt><span class=\"pre\">-m</span></tt> option when invoking <tt>pypdfocr</tt>:</p>\n<pre>mail_smtp_server: \"smtp.gmail.com:587\"\nmail_smtp_login: \"virantha@gmail.com\"\nmail_smtp_password: \"PASSWORD\"\nmail_from_addr: \"virantha@gmail.com\"\nmail_to_list:\n    - \"virantha@gmail.com\"\n    - \"person2@gmail.com\"\n</pre>\n</div>\n</div>\n<div id=\"advanced-options\">\n<h3>Advanced options</h3>\n<div id=\"fine-tuning-tesseract-ghostscript-others\">\n<h4>Fine-tuning Tesseract/Ghostscript/others</h4>\n<p>You can specify Tesseract and Ghostscript executable locations manually, as\nwell as the number of concurrent processes allowed during preprocessing and\ntesseract.  Use the following in your configuration file:</p>\n<pre>tesseract:\n    binary: \"/usr/bin/tesseract\"\n    threads: 8\n\nghostscript:\n    binary: \"/usr/local/bin/gs\"\n\npreprocess:\n    threads: 8\n</pre>\n</div>\n<div id=\"handling-disk-time-outs\">\n<h4>Handling disk time-outs</h4>\n<p>If you need to increase the time interval (default 3 seconds) between new\ndocument scans when pypdfocr is watching a directory, you can specify the following\noption in the configuration file:</p>\n<pre>watch:\n    scan_interval: 6\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<div id=\"using-pip\">\n<h4>Using pip</h4>\n<p>PyPDFOCR is available in PyPI, so you can just run:</p>\n<pre>pip install pypdfocr\n</pre>\n<p>Please note that some of the 3rd-party libraries required by PyPDFOCR wiill\nrequire some build tools, especially on a default Ubuntu system.  If you run\ninto any issues using pip install, you may want to install the\nfollowing packages on Ubuntu and try again:</p>\n<ul>\n<li>gcc</li>\n<li>libjpeg-dev</li>\n<li>zlib-bin</li>\n<li>zlib1g-dev</li>\n<li>python-dev</li>\n</ul>\n<p>For those on <strong>Windows</strong>, because it\u2019s such a pain to get all the PIL\nand PDF dependencies installed, I\u2019ve gone ahead and made an executable\ncalled\n<a href=\"https://github.com/virantha/pypdfocr/blob/master/dist/pypdfocr.exe?raw=true\" rel=\"nofollow\">pypdfocr.exe</a></p>\n<p>You still need to install Tesseract, GhostScript, etc. as detailed below in\nthe external dependencies list.</p>\n</div>\n<div id=\"manual-install\">\n<h4>Manual install</h4>\n<p>Clone the source directly from github (you need to have git installed):</p>\n<pre>git clone https://github.com/virantha/pypdfocr.git\n</pre>\n<p>Then, install the following third-party python libraries:</p>\n<ul>\n<li>Pillow (Python Imaging Library) <a href=\"https://pillow.readthedocs.org/en/3.1.x/\" rel=\"nofollow\">https://pillow.readthedocs.org/en/3.1.x/</a></li>\n<li>ReportLab (PDF generation library)\n<a href=\"http://www.reportlab.com/opensource/\" rel=\"nofollow\">http://www.reportlab.com/opensource/</a></li>\n<li>Watchdog (Cross-platform fhlesystem events monitoring)\n<a href=\"https://pypi.python.org/pypi/watchdog\" rel=\"nofollow\">https://pypi.python.org/pypi/watchdog</a></li>\n<li>PyPDF2 (Pure python pdf library)</li>\n</ul>\n<p>These can all be installed via pip:</p>\n<pre>pip install Pillow\npip install reportlab\npip install watchdog\npip install pypdf2\n</pre>\n<p>You will also need to install the external dependencies listed below.</p>\n</div>\n<div id=\"external-dependencies\">\n<h4>External Dependencies</h4>\n<p>PyPDFOCR relies on the following (free) programs being installed and in\nthe path:</p>\n<ul>\n<li>Tesseract OCR software <a href=\"https://code.google.com/p/tesseract-ocr/\" rel=\"nofollow\">https://code.google.com/p/tesseract-ocr/</a></li>\n<li>GhostScript <a href=\"http://www.ghostscript.com/\" rel=\"nofollow\">http://www.ghostscript.com/</a></li>\n<li>ImageMagick <a href=\"http://www.imagemagick.org/\" rel=\"nofollow\">http://www.imagemagick.org/</a></li>\n<li>Poppler <a href=\"http://poppler.freedesktop.org/\" rel=\"nofollow\">http://poppler.freedesktop.org/</a>  (<a href=\"http://sourceforge.net/projects/poppler-win32/\" rel=\"nofollow\">Windows</a>)</li>\n</ul>\n<p>Poppler is only required if you want pypdfocr to figure out the original PDF resolution\nautomatically; just make sure you have <tt>pdfimages</tt> in your path.   Note that the\n<a href=\"http://www.foolabs.com/xpdf/download.html\" rel=\"nofollow\">xpdf</a> provided <tt>pdfimages</tt> does not work for this,\nbecause it does not support the <tt><span class=\"pre\">-list</span></tt> option to list the table of images in a PDF file.</p>\n<p>On Mac OS X, you can install these using homebrew:</p>\n<pre>brew install tesseract\nbrew install ghostscript\nbrew install poppler\nbrew install imagemagick\n</pre>\n<p>On Windows, please use the installers provided on their download pages.</p>\n<p>** Important ** Tesseract version 3.02.02 or newer required\n(apparently 3.02.01-6 and possibly others do not work due to a hocr\noutput format change that I\u2019m not planning to address). On Ubuntu, you\nmay need to compile and install it manually by following <a href=\"http://miphol.com/muse/2013/05/install-tesseract-ocr-on-ubunt.html\" rel=\"nofollow\">these\ninstructions</a></p>\n<p>Also note that if you want Tesseract to recognize rotated documents (upside down, or rotated 90 degrees)\nthen you need to find your tessdata directory and do the following:</p>\n<pre>cd /usr/local/share/tessdata\ncp eng.traineddata osd.traineddata\n</pre>\n<p><tt>osd</tt> stands for Orientation and Script Detection, so you need to copy the .traineddata\nfor whatever language you want to scan in as <tt>osd.traineddata</tt>.  If you don\u2019t do this step,\nthen any landscape document will produce garbage</p>\n</div>\n</div>\n<div id=\"disclaimer\">\n<h3>Disclaimer</h3>\n<p>While test coverage is at 84% right now, Sphinx docs generation is at an\nearly stage. The software is distributed on an \u201cAS IS\u201d BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Version</td>\n<td>Date</td>\n<td>Changes</td>\n</tr>\n<tr><td>v0.9.1</td>\n<td>10/11/16</td>\n<td>Fixes (#43, #41)</td>\n</tr>\n<tr><td>v0.9.0</td>\n<td>2/29/16</td>\n<td>Fixed rotated page text, Mac OS X invisible fonts, and pdf merge slowdown</td>\n</tr>\n<tr><td>v0.8.5</td>\n<td>2/21/16</td>\n<td>Better ctrl-c and cleanup behavior</td>\n</tr>\n<tr><td>v0.8.4</td>\n<td>2/18/16</td>\n<td>Maintenance release</td>\n</tr>\n<tr><td>v0.8.3</td>\n<td>2/18/16</td>\n<td>Bug fix for multiprocessing on windows, ctrl-c interrupt, and integer keywords</td>\n</tr>\n<tr><td>v0.8.2</td>\n<td>12/8/14</td>\n<td>Fixed imagemagick invocation on windows.  Parallelized preprocessing and tesseract execution</td>\n</tr>\n<tr><td>v0.8.1</td>\n<td>12/5/14</td>\n<td>Added \u2013skip-preprocess option, scan_interval option, and fixed too many open files bug during page overlay</td>\n</tr>\n<tr><td>v0.8.0</td>\n<td>10/27/14</td>\n<td>Added preprocessing to clean up prior to tesseract, bug fixes on file names with spaces/dots</td>\n</tr>\n<tr><td>v0.7.6</td>\n<td>9/10/14</td>\n<td>Fixed issue 17 rotation bug</td>\n</tr>\n<tr><td>v0.7.5</td>\n<td>8/18/14</td>\n<td>Update for Tesseract 3.03 .hocr filename change</td>\n</tr>\n<tr><td>v0.7.4</td>\n<td>3/28/14</td>\n<td>Bug fix on pdf assembly</td>\n</tr>\n<tr><td>v0.7.3</td>\n<td>3/27/14</td>\n<td>Modified internals to use single image per page (instead of multipage tiff). Also enabled orientation detection</td>\n</tr>\n<tr><td>v0.7.2</td>\n<td>3/26/14</td>\n<td>Switched from Pil to Pillow. Now uses original images from PDF in output pdf (no dpi/color/quality changes!)</td>\n</tr>\n<tr><td>v0.7.1</td>\n<td>3/25/14</td>\n<td>OCR Language is now an option</td>\n</tr>\n<tr><td>v0.7.0</td>\n<td>3/25/14</td>\n<td>Now honors original pdf resolution</td>\n</tr>\n<tr><td>v0.6.1</td>\n<td>2/16/14</td>\n<td>Bug fix for pdfs with only numbers in the filename</td>\n</tr>\n<tr><td>v0.6.0</td>\n<td>1/16/14</td>\n<td>Added filing based on filename match as fallback, added tesseract version check</td>\n</tr>\n<tr><td>v0.5.4</td>\n<td>1/12/14</td>\n<td>Fixed bug with reordering of text pages on certain platforms(glob)</td>\n</tr>\n<tr><td>v0.5.3</td>\n<td>12/12/13</td>\n<td>Fix to evernote server specification</td>\n</tr>\n<tr><td>v0.5.2</td>\n<td>12/08/13</td>\n<td>Fix to lowercase keywords</td>\n</tr>\n<tr><td>v0.5.1</td>\n<td>11/02/13</td>\n<td>Fixed a bunch of windows critical path handling issues</td>\n</tr>\n<tr><td>v0.5.0</td>\n<td>10/30/13</td>\n<td>Email status added, 90% test coverage</td>\n</tr>\n<tr><td>v0.4.1</td>\n<td>10/28/13</td>\n<td>Made HOCR parsing more robust</td>\n</tr>\n<tr><td>v0.4.0</td>\n<td>10/28/13</td>\n<td>Added early Evernote upload support</td>\n</tr>\n<tr><td>v0.3.1</td>\n<td>10/24/13</td>\n<td>Path fix on windows</td>\n</tr>\n<tr><td>v0.3.0</td>\n<td>10/23/13</td>\n<td>Added filing of converted pdfs using a configuration file to specify target directories based on keyword matches in the pdf text</td>\n</tr>\n<tr><td>v0.2.2</td>\n<td>10/22/13</td>\n<td>Added a console script to put the pypdfocr script into your bin</td>\n</tr>\n<tr><td>v0.2.1</td>\n<td>10/22/13</td>\n<td>Fix to initial packaging problem.</td>\n</tr>\n<tr><td>v0.2.0</td>\n<td>10/21/13</td>\n<td>Initial release.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"todo-list\">\n<h2>Todo list</h2>\n<ul>\n<li>#43 version check for tesseract</li>\n<li>On windows, search for pdfimages and imagemagick instead of relying on path</li>\n<li>Split up into flow steps</li>\n<li>Run more robustness tests for watching networked shares</li>\n<li>Add more docstrings</li>\n<li>Add more option specifiers to tesseract and ghostscript</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2393891, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "550edbfecffd87fdfeb741729fcd57ee", "sha256": "8aac482a39a17979469f9142826a7ae031c6f2b1a8f7216e6338580b2ae53efd"}, "downloads": -1, "filename": "pypdfocr-0.2.tar.gz", "has_sig": false, "md5_digest": "550edbfecffd87fdfeb741729fcd57ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8604, "upload_time": "2013-10-22T15:57:40", "upload_time_iso_8601": "2013-10-22T15:57:40.050606Z", "url": "https://files.pythonhosted.org/packages/82/81/75e0d6798d55a6709b36fc7cc4083d809f224fae03dddc50bf89aa8cbe9c/pypdfocr-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c33d198b0ba37284bd27c748a6ad2e67", "sha256": "e43558b2dc3ea8e7d2a90c1caf396b1857276de360cf11eeae2179101d69d16b"}, "downloads": -1, "filename": "pypdfocr-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c33d198b0ba37284bd27c748a6ad2e67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12601, "upload_time": "2013-10-22T16:44:15", "upload_time_iso_8601": "2013-10-22T16:44:15.283728Z", "url": "https://files.pythonhosted.org/packages/b7/2c/e12ca87130502b0567a9143133146925dda0ba028aa64721a22ba0dae272/pypdfocr-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "e0f450f2727ec511866c00cd70a089e9", "sha256": "4052f16c048f8020c3225b2abc820512ca688b0c11a72d251a09c854b951f248"}, "downloads": -1, "filename": "pypdfocr-0.2.2.tar.gz", "has_sig": false, "md5_digest": "e0f450f2727ec511866c00cd70a089e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12751, "upload_time": "2013-10-22T17:49:54", "upload_time_iso_8601": "2013-10-22T17:49:54.997235Z", "url": "https://files.pythonhosted.org/packages/1a/0c/9cd45a1bb266a4b101d658ab04589c9edd32efc6d0121f4ea6a5ac24901a/pypdfocr-0.2.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "8ec3edd43b82821cd2adfe10d36a74b5", "sha256": "31ee784c6d65847ceca032dcf8d7e9879547b159b4d269ce247d310c6a017053"}, "downloads": -1, "filename": "pypdfocr-0.3.tar.gz", "has_sig": false, "md5_digest": "8ec3edd43b82821cd2adfe10d36a74b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18592, "upload_time": "2013-10-23T19:41:35", "upload_time_iso_8601": "2013-10-23T19:41:35.307141Z", "url": "https://files.pythonhosted.org/packages/5c/41/a5d035b6b1e947dd35f991a3eed2684fd94a531a3c38ce34ac13afd488b3/pypdfocr-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "79bdcfea724623812ef2d10a86622196", "sha256": "bbe970f65079ef901586bd3b18218341bea8b0d906a7a33b2697711cce0f18db"}, "downloads": -1, "filename": "pypdfocr-0.3.1.tar.gz", "has_sig": false, "md5_digest": "79bdcfea724623812ef2d10a86622196", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19798, "upload_time": "2013-10-24T18:54:49", "upload_time_iso_8601": "2013-10-24T18:54:49.936024Z", "url": "https://files.pythonhosted.org/packages/b9/ad/30fe51f6e42cd4291f22b2ac2551282e46cd0754b518ee833e4a4bb5606e/pypdfocr-0.3.1.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "cc80d75dc05e15c48054d1cf408e5d55", "sha256": "b6b32a135245b94657683a07add23afcd96cfc8e6b88569eae2c54cd659b35bd"}, "downloads": -1, "filename": "pypdfocr-0.4.tar.gz", "has_sig": false, "md5_digest": "cc80d75dc05e15c48054d1cf408e5d55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23997, "upload_time": "2013-10-28T15:41:26", "upload_time_iso_8601": "2013-10-28T15:41:26.707419Z", "url": "https://files.pythonhosted.org/packages/67/a9/a6d3742da43910fdd03a92e22b40463cce9f5790fcd8691c368d42afff10/pypdfocr-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "683bf7e20c0f72969e3dcbc7acf91cc7", "sha256": "60ff2e9df9bd034a44bf7ff1f2401e0e6651fc5df5dff0f9d835d73ea2eb7e75"}, "downloads": -1, "filename": "pypdfocr-0.4.1.tar.gz", "has_sig": false, "md5_digest": "683bf7e20c0f72969e3dcbc7acf91cc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25271, "upload_time": "2013-10-29T02:29:20", "upload_time_iso_8601": "2013-10-29T02:29:20.441667Z", "url": "https://files.pythonhosted.org/packages/23/c7/8124ead46c3e4e5d30d5da46765d085ec6c2259c21d0045391c6fdb7b3d8/pypdfocr-0.4.1.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "b9679e87207c770ffda0dab4978c8b6f", "sha256": "534ffef5d472808a4f94f3bb61265f790e64a43fe2621c728de73e5b6b1d2c26"}, "downloads": -1, "filename": "pypdfocr-0.5.tar.gz", "has_sig": false, "md5_digest": "b9679e87207c770ffda0dab4978c8b6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29365, "upload_time": "2013-10-31T03:24:05", "upload_time_iso_8601": "2013-10-31T03:24:05.237232Z", "url": "https://files.pythonhosted.org/packages/13/6c/79652f251195bcfa2e5e3d18bdf7afe382c1fffdf9a3d1ccf1abf8d99675/pypdfocr-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "0e7bf90b445a0d8bdab9e3cd61c7c378", "sha256": "5e4085e4880959b6e489f2c8e5974d8f002a0e69c52147f083c3b007aae76afa"}, "downloads": -1, "filename": "pypdfocr-0.5.1.tar.gz", "has_sig": false, "md5_digest": "0e7bf90b445a0d8bdab9e3cd61c7c378", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30418, "upload_time": "2013-11-03T01:50:15", "upload_time_iso_8601": "2013-11-03T01:50:15.339099Z", "url": "https://files.pythonhosted.org/packages/b2/51/575c7c8212950739144b958e65053ffcd26eba2be0d8de07ade8e5b3df49/pypdfocr-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "2aa732de25b396b6df51f3f4969a2a13", "sha256": "5b65dabc8d7ab1d07960179686c345977f01ef25a436882de99d1e8faf47166c"}, "downloads": -1, "filename": "pypdfocr-0.5.2.tar.gz", "has_sig": false, "md5_digest": "2aa732de25b396b6df51f3f4969a2a13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30935, "upload_time": "2013-12-11T20:18:29", "upload_time_iso_8601": "2013-12-11T20:18:29.049379Z", "url": "https://files.pythonhosted.org/packages/90/00/688073d4ff9c64afb5660ebd87f929deb03e502ecbc489e4631564154076/pypdfocr-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "de03c9bb535edf5550674a362f56cf3a", "sha256": "e21227c41080d2c2455b397b6a7b32876ff8cc476bb68d6c97dd680689e6f86f"}, "downloads": -1, "filename": "pypdfocr-0.5.3.tar.gz", "has_sig": false, "md5_digest": "de03c9bb535edf5550674a362f56cf3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31006, "upload_time": "2013-12-12T20:00:41", "upload_time_iso_8601": "2013-12-12T20:00:41.804819Z", "url": "https://files.pythonhosted.org/packages/a8/45/cd388cca77564a8ab58365cfce72e4cb779ccb4d38380e8f778fa89f66f6/pypdfocr-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "0f99751d9e1929a9415393e660c382e9", "sha256": "b652754b1604f8d153ebadffb96fc430ad5d5aac49cbafb8d9fcafcd18362cef"}, "downloads": -1, "filename": "pypdfocr-0.5.4.tar.gz", "has_sig": false, "md5_digest": "0f99751d9e1929a9415393e660c382e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31457, "upload_time": "2014-01-13T04:16:42", "upload_time_iso_8601": "2014-01-13T04:16:42.706398Z", "url": "https://files.pythonhosted.org/packages/e3/d0/e137f679e1bade67b7c4dcad068c107af5bd62ec708495b7f51f20324ba0/pypdfocr-0.5.4.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "13dced4aafcf0461ad97fab367321c5a", "sha256": "92d2ae4b340d2f3f710651b3e21bff51b606dad44a887c37446addfc04835021"}, "downloads": -1, "filename": "pypdfocr-0.6.0.tar.gz", "has_sig": false, "md5_digest": "13dced4aafcf0461ad97fab367321c5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34429, "upload_time": "2014-01-17T04:04:16", "upload_time_iso_8601": "2014-01-17T04:04:16.920359Z", "url": "https://files.pythonhosted.org/packages/b9/79/1ee3ebcf13bb57dcbb2b2284a9d25981d09f3df308b9584af20e2b2e73df/pypdfocr-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "e09090f0eb37fe4dd18f7136c40df3a8", "sha256": "a6854e23c4887dfcec0269d8eac7abb6cee3daec7f5ba81c80e31246aa397866"}, "downloads": -1, "filename": "pypdfocr-0.6.1.tar.gz", "has_sig": false, "md5_digest": "e09090f0eb37fe4dd18f7136c40df3a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34736, "upload_time": "2014-02-16T20:25:50", "upload_time_iso_8601": "2014-02-16T20:25:50.513576Z", "url": "https://files.pythonhosted.org/packages/9f/36/77d6385bee788e1ab4803b31a014127391a963c3d25dff866d9575b82abf/pypdfocr-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "cfb362eaf84b89b4b1752506719c2f9b", "sha256": "feef2da5bc56abfdd2b4839daff95d1874e8e1f3af79c481de2b8ff59ee8f197"}, "downloads": -1, "filename": "pypdfocr-0.7.0.tar.gz", "has_sig": false, "md5_digest": "cfb362eaf84b89b4b1752506719c2f9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38200, "upload_time": "2014-03-25T19:38:35", "upload_time_iso_8601": "2014-03-25T19:38:35.283340Z", "url": "https://files.pythonhosted.org/packages/26/ee/4502e575aaadc8a67022cee4476f9485fe58e60f6b9cee0c6fa493c09d89/pypdfocr-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "c75dee5d297d79d4dbd93d2a096e1c33", "sha256": "6b85cc28a905301532a7f1762ef2f3d81da780867ee1a4726f5b2fcaf3136f52"}, "downloads": -1, "filename": "pypdfocr-0.7.1.tar.gz", "has_sig": false, "md5_digest": "c75dee5d297d79d4dbd93d2a096e1c33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36181, "upload_time": "2014-03-26T03:09:15", "upload_time_iso_8601": "2014-03-26T03:09:15.040875Z", "url": "https://files.pythonhosted.org/packages/46/57/0e1fec65ab23e0489258daebaf1c408036db4019f510c1d8aa7628391f3d/pypdfocr-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "c4b6b3a45cb3c9fcae741f07f046f7d2", "sha256": "80947e3e12622ac0480e65c42e6a05e18a0a48d2a0b1861a248e279adf535037"}, "downloads": -1, "filename": "pypdfocr-0.7.2.tar.gz", "has_sig": false, "md5_digest": "c4b6b3a45cb3c9fcae741f07f046f7d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37240, "upload_time": "2014-03-26T19:34:16", "upload_time_iso_8601": "2014-03-26T19:34:16.516985Z", "url": "https://files.pythonhosted.org/packages/c0/99/fc2b36c54eb1b896a91d6f99541bbd651983c4161d7c1c38023d4cc9f087/pypdfocr-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "6be41d81d7a7107648986bc87e7595d2", "sha256": "d79835b81baea80b823762b827a55442c4aa3b1543a54bf2a02275c41557664d"}, "downloads": -1, "filename": "pypdfocr-0.7.3.tar.gz", "has_sig": false, "md5_digest": "6be41d81d7a7107648986bc87e7595d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38162, "upload_time": "2014-03-27T19:43:02", "upload_time_iso_8601": "2014-03-27T19:43:02.308257Z", "url": "https://files.pythonhosted.org/packages/7f/62/52b8172c21e720b10fd696ab6b849b8f441dc1b0f180d3b3c15f690a1195/pypdfocr-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "116b4cb6f82824b9aa07a21ecba5799a", "sha256": "5b3ead53b8dd83337465e7a0c0f573be07e86128d11cfb73a035804b1f0723cb"}, "downloads": -1, "filename": "pypdfocr-0.7.4.tar.gz", "has_sig": false, "md5_digest": "116b4cb6f82824b9aa07a21ecba5799a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38259, "upload_time": "2014-03-28T18:38:11", "upload_time_iso_8601": "2014-03-28T18:38:11.035980Z", "url": "https://files.pythonhosted.org/packages/d4/eb/bb3939ee51f25a514ca98ed4c9407b22e2f8875e680177d3b566579cf422/pypdfocr-0.7.4.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "0878ab2e391d0e0903c2b724dd2f30c9", "sha256": "3eb05ac630bb37eb71bf499e246eecacf54a59b19a6f7718b1e569143587e75d"}, "downloads": -1, "filename": "pypdfocr-0.7.5.tar.gz", "has_sig": false, "md5_digest": "0878ab2e391d0e0903c2b724dd2f30c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38441, "upload_time": "2014-08-18T18:52:01", "upload_time_iso_8601": "2014-08-18T18:52:01.040255Z", "url": "https://files.pythonhosted.org/packages/a2/f4/8b50a3aacc08f2983f15b677d04cf478129be404e11fbaac25889d51c106/pypdfocr-0.7.5.tar.gz", "yanked": false}], "0.7.6": [{"comment_text": "", "digests": {"md5": "7a13feb06789d282be7ee60300a00272", "sha256": "e36d2e1a7c8faf699ba1249477d343bd605ea209e42183a6d27bf24ee7d36066"}, "downloads": -1, "filename": "pypdfocr-0.7.6.tar.gz", "has_sig": false, "md5_digest": "7a13feb06789d282be7ee60300a00272", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38985, "upload_time": "2014-09-10T18:57:52", "upload_time_iso_8601": "2014-09-10T18:57:52.379374Z", "url": "https://files.pythonhosted.org/packages/ec/0e/59156a7bf434cd2d0934e4d4cecfae71c2d60a2d2da94de859a729e2dab5/pypdfocr-0.7.6.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "278e1521325849d2722fe22fd253c9b7", "sha256": "a94b7ccda8e3459e6ce6557c1c2d11bda7a0e16b5ddc5abcfb265e1b72b88cc9"}, "downloads": -1, "filename": "pypdfocr-0.8.0.tar.gz", "has_sig": false, "md5_digest": "278e1521325849d2722fe22fd253c9b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40296, "upload_time": "2014-10-27T21:18:36", "upload_time_iso_8601": "2014-10-27T21:18:36.198234Z", "url": "https://files.pythonhosted.org/packages/85/e3/d87761f7cdd11d0c3faf7a1df5a99958942876db69ee34e27aea25cb50a6/pypdfocr-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "d903ae2c68378c77e3363595155dad06", "sha256": "edd27c4844203087b9d864693b3a2a78cf48f0427f7cc7cf22a6fbe2fe86da85"}, "downloads": -1, "filename": "pypdfocr-0.8.1.tar.gz", "has_sig": false, "md5_digest": "d903ae2c68378c77e3363595155dad06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40155, "upload_time": "2014-12-05T22:22:19", "upload_time_iso_8601": "2014-12-05T22:22:19.638348Z", "url": "https://files.pythonhosted.org/packages/cf/d7/6f22a8e08a2ddcc3d78cbf3566084f6493ace2d7bdfabb82cf73a08d9822/pypdfocr-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "30226a751afb3fa503fadde96bbb7af7", "sha256": "b9419a2ef729f245ba308cfac625d2571eb54a291cdbe2d19eba28cf8d05efed"}, "downloads": -1, "filename": "pypdfocr-0.8.2.tar.gz", "has_sig": false, "md5_digest": "30226a751afb3fa503fadde96bbb7af7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40780, "upload_time": "2014-12-08T19:47:00", "upload_time_iso_8601": "2014-12-08T19:47:00.986834Z", "url": "https://files.pythonhosted.org/packages/3c/db/ff072fef3a061175752ae29310235e73346582caaa0cc7bfcfa8a43f8468/pypdfocr-0.8.2.tar.gz", "yanked": false}], "0.8.3": [], "0.8.4": [{"comment_text": "", "digests": {"md5": "a717e1a51a38bac7eedf0b06edd6f813", "sha256": "98e7fba95d01bb329570519dcb8c5409321972a7992023c5d42ed15bcbf809f0"}, "downloads": -1, "filename": "pypdfocr-0.8.4.tar.gz", "has_sig": false, "md5_digest": "a717e1a51a38bac7eedf0b06edd6f813", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42271, "upload_time": "2016-02-18T20:43:12", "upload_time_iso_8601": "2016-02-18T20:43:12.110710Z", "url": "https://files.pythonhosted.org/packages/d6/af/a841f9c24eafec55a98ce197b49652a0fec46814950563e1c3d282910227/pypdfocr-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "6c10dcca52a88f680ae767377f0ae64f", "sha256": "6e81851567241208714b9d20641399f9122fb49f818c210dd2062f12f6a53b16"}, "downloads": -1, "filename": "pypdfocr-0.8.5.tar.gz", "has_sig": false, "md5_digest": "6c10dcca52a88f680ae767377f0ae64f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42770, "upload_time": "2016-02-22T04:10:29", "upload_time_iso_8601": "2016-02-22T04:10:29.693760Z", "url": "https://files.pythonhosted.org/packages/4f/50/574bf1c4f50556a27171b2eea7af512df05e21f06725384d58fdb3003495/pypdfocr-0.8.5.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "9955c14eb302fe176e2a50beca9b5fa8", "sha256": "8f854c86f21d20289c9fe7f60e9332c9a89e47baef078d82ba11d1ea43568a70"}, "downloads": -1, "filename": "pypdfocr-0.9.0.tar.gz", "has_sig": false, "md5_digest": "9955c14eb302fe176e2a50beca9b5fa8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43080, "upload_time": "2016-03-02T14:26:52", "upload_time_iso_8601": "2016-03-02T14:26:52.549823Z", "url": "https://files.pythonhosted.org/packages/ae/4c/f95a6cb83ee524286f1ce6bdf6c71d8bbb5009cfe343e20c1b205b6d1098/pypdfocr-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "23d7deb772e6fa9aa89fef257efd68a0", "sha256": "8d261d0afad0e12d4228689a4286952fc660c8c60c75c398b38158075fb9f782"}, "downloads": -1, "filename": "pypdfocr-0.9.1.tar.gz", "has_sig": false, "md5_digest": "23d7deb772e6fa9aa89fef257efd68a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43219, "upload_time": "2016-10-11T18:45:18", "upload_time_iso_8601": "2016-10-11T18:45:18.444359Z", "url": "https://files.pythonhosted.org/packages/c3/23/1bf42cb12af63d498fcd425882815c21efef37800514dbad9fa28918df5e/pypdfocr-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23d7deb772e6fa9aa89fef257efd68a0", "sha256": "8d261d0afad0e12d4228689a4286952fc660c8c60c75c398b38158075fb9f782"}, "downloads": -1, "filename": "pypdfocr-0.9.1.tar.gz", "has_sig": false, "md5_digest": "23d7deb772e6fa9aa89fef257efd68a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43219, "upload_time": "2016-10-11T18:45:18", "upload_time_iso_8601": "2016-10-11T18:45:18.444359Z", "url": "https://files.pythonhosted.org/packages/c3/23/1bf42cb12af63d498fcd425882815c21efef37800514dbad9fa28918df5e/pypdfocr-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:47 2020"}