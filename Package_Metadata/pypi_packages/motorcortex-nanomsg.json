{"info": {"author": "Tony Simpson", "author_email": "agjasimpson@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"], "description": "nanomsg-python\n==============\n\nPython library for [nanomsg](http://nanomsg.org/) which does not compromise on\nusability or performance.\n\nLike nanomsg this library is still experimental, the API is fairly stable but\nif you plan to use it at this time be prepared to get your hands dirty,\nfixes and enhancements are very welcome.\n\nThe following versions of Python are supported CPython 2.6+, 3.2+ and Pypy 2.1.0+\n\nBugs and change requests can be made\n[here](https://github.com/tonysimpson/nanomsg-python/issues).\n\n\nnanommsg library in /usr/local\n==============================\n\n\nIf you're nanomsg is in /usr/local and your machine is not configured to find it there you can rename the usr_local_setup.cfg to setup.cfg to fix the problem.\n\n\nExample\n=======\n\n```python\nfrom __future__ import print_function\nfrom nanomsg import Socket, PAIR, PUB\ns1 = Socket(PAIR)\ns2 = Socket(PAIR)\ns1.bind('inproc://bob')\ns2.connect('inproc://bob')\ns1.send(b'hello nanomsg')\nprint(s2.recv())\ns1.close()\ns2.close()\n```\n\nOr if you don't mind nesting you can use Socket as a context manager\n\n```python\nwith Socket(PUB) as pub_socket:\n    .... do something with pub_socket\n# socket is closed\n```\n\nThe lower level API is also available if you need the additional control or\nperformance, but it is harder to use. Error checking left out for brevity.\n\n```python\nfrom nanomsg import wrapper as nn_wrapper\nfrom nanomsg import PAIR, AF_SP\n\ns1 = nn_wrapper.nn_socket(AF_SP, PAIR)\ns2 = nn_wrapper.nn_socket(AF_SP, PAIR)\nnn_wrapper.nn_bind(s1, 'inproc://bob')\nnn_wrapper.nn_connect(s2, 'inproc://bob')\nnn_wrapper.nn_send(s1, b'hello nanomsg', 0)\nresult, buffer = nn_wrapper.nn_recv(s2, 0)\nprint(bytes(buffer))\nnn_wrapper.nn_term()\n```\n\nLicense\n=======\n\nMIT\n\n\nAuthors\n=======\n\n[Tony Simpson](https://github.com/tonysimpson)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tonysimpson/nanomsg-python", "keywords": "nanomsg,driver", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "motorcortex-nanomsg", "package_url": "https://pypi.org/project/motorcortex-nanomsg/", "platform": "", "project_url": "https://pypi.org/project/motorcortex-nanomsg/", "project_urls": {"Homepage": "https://github.com/tonysimpson/nanomsg-python"}, "release_url": "https://pypi.org/project/motorcortex-nanomsg/1.1.7/", "requires_dist": null, "requires_python": "", "summary": "Python library for nanomsg.", "version": "1.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nanomsg-python</h1>\n<p>Python library for <a href=\"http://nanomsg.org/\" rel=\"nofollow\">nanomsg</a> which does not compromise on\nusability or performance.</p>\n<p>Like nanomsg this library is still experimental, the API is fairly stable but\nif you plan to use it at this time be prepared to get your hands dirty,\nfixes and enhancements are very welcome.</p>\n<p>The following versions of Python are supported CPython 2.6+, 3.2+ and Pypy 2.1.0+</p>\n<p>Bugs and change requests can be made\n<a href=\"https://github.com/tonysimpson/nanomsg-python/issues\" rel=\"nofollow\">here</a>.</p>\n<h1>nanommsg library in /usr/local</h1>\n<p>If you're nanomsg is in /usr/local and your machine is not configured to find it there you can rename the usr_local_setup.cfg to setup.cfg to fix the problem.</p>\n<h1>Example</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nanomsg</span> <span class=\"kn\">import</span> <span class=\"n\">Socket</span><span class=\"p\">,</span> <span class=\"n\">PAIR</span><span class=\"p\">,</span> <span class=\"n\">PUB</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">PAIR</span><span class=\"p\">)</span>\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">PAIR</span><span class=\"p\">)</span>\n<span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"s1\">'inproc://bob'</span><span class=\"p\">)</span>\n<span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'inproc://bob'</span><span class=\"p\">)</span>\n<span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello nanomsg'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">())</span>\n<span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>Or if you don't mind nesting you can use Socket as a context manager</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">Socket</span><span class=\"p\">(</span><span class=\"n\">PUB</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pub_socket</span><span class=\"p\">:</span>\n    <span class=\"o\">....</span> <span class=\"n\">do</span> <span class=\"n\">something</span> <span class=\"k\">with</span> <span class=\"n\">pub_socket</span>\n<span class=\"c1\"># socket is closed</span>\n</pre>\n<p>The lower level API is also available if you need the additional control or\nperformance, but it is harder to use. Error checking left out for brevity.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nanomsg</span> <span class=\"kn\">import</span> <span class=\"n\">wrapper</span> <span class=\"k\">as</span> <span class=\"n\">nn_wrapper</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nanomsg</span> <span class=\"kn\">import</span> <span class=\"n\">PAIR</span><span class=\"p\">,</span> <span class=\"n\">AF_SP</span>\n\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">nn_wrapper</span><span class=\"o\">.</span><span class=\"n\">nn_socket</span><span class=\"p\">(</span><span class=\"n\">AF_SP</span><span class=\"p\">,</span> <span class=\"n\">PAIR</span><span class=\"p\">)</span>\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">nn_wrapper</span><span class=\"o\">.</span><span class=\"n\">nn_socket</span><span class=\"p\">(</span><span class=\"n\">AF_SP</span><span class=\"p\">,</span> <span class=\"n\">PAIR</span><span class=\"p\">)</span>\n<span class=\"n\">nn_wrapper</span><span class=\"o\">.</span><span class=\"n\">nn_bind</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"s1\">'inproc://bob'</span><span class=\"p\">)</span>\n<span class=\"n\">nn_wrapper</span><span class=\"o\">.</span><span class=\"n\">nn_connect</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"s1\">'inproc://bob'</span><span class=\"p\">)</span>\n<span class=\"n\">nn_wrapper</span><span class=\"o\">.</span><span class=\"n\">nn_send</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'hello nanomsg'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">nn_wrapper</span><span class=\"o\">.</span><span class=\"n\">nn_recv</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">))</span>\n<span class=\"n\">nn_wrapper</span><span class=\"o\">.</span><span class=\"n\">nn_term</span><span class=\"p\">()</span>\n</pre>\n<h1>License</h1>\n<p>MIT</p>\n<h1>Authors</h1>\n<p><a href=\"https://github.com/tonysimpson\" rel=\"nofollow\">Tony Simpson</a></p>\n\n          </div>"}, "last_serial": 4581368, "releases": {"1.1.5": [{"comment_text": "", "digests": {"md5": "1fe7d9af636bbcdb70059da5ed458cff", "sha256": "77604b08677309d21634bd3eb4f4d0fdc36c1d397f817c0aeb91be91d72b86bb"}, "downloads": -1, "filename": "motorcortex-nanomsg-1.1.5.tar.gz", "has_sig": false, "md5_digest": "1fe7d9af636bbcdb70059da5ed458cff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12540, "upload_time": "2018-12-10T10:35:29", "upload_time_iso_8601": "2018-12-10T10:35:29.571132Z", "url": "https://files.pythonhosted.org/packages/3e/73/539270c756601b685bac1c10f0a843c7d212bb06801ee1ea38d1d342c52a/motorcortex-nanomsg-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "949069696563d1358d47d6db184d1357", "sha256": "7d7f9bdf381f93c2253871b3228f538e86a00ccdec1edca366a9f7667a77690b"}, "downloads": -1, "filename": "motorcortex-nanomsg-1.1.6.tar.gz", "has_sig": false, "md5_digest": "949069696563d1358d47d6db184d1357", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12528, "upload_time": "2018-12-10T10:43:13", "upload_time_iso_8601": "2018-12-10T10:43:13.470239Z", "url": "https://files.pythonhosted.org/packages/80/72/08d68bc44c1ef849b3dd3918d551afaa92159091bb983551874ce6257fde/motorcortex-nanomsg-1.1.6.tar.gz", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "8f3c6c4519e16a698117ba3a69207d8b", "sha256": "ecee3535c7a8b7f8cb2190366b4d176ef81ab33fbcb231447db658558ba7dd7f"}, "downloads": -1, "filename": "motorcortex_nanomsg-1.1.7-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "8f3c6c4519e16a698117ba3a69207d8b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 89525, "upload_time": "2018-12-10T13:05:54", "upload_time_iso_8601": "2018-12-10T13:05:54.801592Z", "url": "https://files.pythonhosted.org/packages/20/44/ae1b53bd5fd842dff5feb12dbda12e7b6c02ad4d864e9424aa92e4041ba9/motorcortex_nanomsg-1.1.7-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e2aa618f440464a3efd249802e65aae", "sha256": "f7641dc70d7a674d607c5e63a249fc3e3bf30ebc6ec26e5a8b45e0586d2f0f04"}, "downloads": -1, "filename": "motorcortex_nanomsg-1.1.7-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "6e2aa618f440464a3efd249802e65aae", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 114667, "upload_time": "2018-12-10T16:05:53", "upload_time_iso_8601": "2018-12-10T16:05:53.974577Z", "url": "https://files.pythonhosted.org/packages/ec/1e/f052ac186cb375b771adb5f62acd1161198b4c55c1a4c792f2834d3fcaef/motorcortex_nanomsg-1.1.7-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9a81e13d9993067941eadfdd964ee75", "sha256": "0dda049baf52de1d40bca7b8b0084ea8ac69f212a1fb0e731055e02d06f9b45d"}, "downloads": -1, "filename": "motorcortex-nanomsg-1.1.7.tar.gz", "has_sig": false, "md5_digest": "b9a81e13d9993067941eadfdd964ee75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12535, "upload_time": "2018-12-10T11:02:49", "upload_time_iso_8601": "2018-12-10T11:02:49.166546Z", "url": "https://files.pythonhosted.org/packages/1a/d6/71dbec56f9edf52ab2714deda1cb24f2dc9b45b11cc1ca09589ec6528641/motorcortex-nanomsg-1.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8f3c6c4519e16a698117ba3a69207d8b", "sha256": "ecee3535c7a8b7f8cb2190366b4d176ef81ab33fbcb231447db658558ba7dd7f"}, "downloads": -1, "filename": "motorcortex_nanomsg-1.1.7-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "8f3c6c4519e16a698117ba3a69207d8b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 89525, "upload_time": "2018-12-10T13:05:54", "upload_time_iso_8601": "2018-12-10T13:05:54.801592Z", "url": "https://files.pythonhosted.org/packages/20/44/ae1b53bd5fd842dff5feb12dbda12e7b6c02ad4d864e9424aa92e4041ba9/motorcortex_nanomsg-1.1.7-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e2aa618f440464a3efd249802e65aae", "sha256": "f7641dc70d7a674d607c5e63a249fc3e3bf30ebc6ec26e5a8b45e0586d2f0f04"}, "downloads": -1, "filename": "motorcortex_nanomsg-1.1.7-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "6e2aa618f440464a3efd249802e65aae", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 114667, "upload_time": "2018-12-10T16:05:53", "upload_time_iso_8601": "2018-12-10T16:05:53.974577Z", "url": "https://files.pythonhosted.org/packages/ec/1e/f052ac186cb375b771adb5f62acd1161198b4c55c1a4c792f2834d3fcaef/motorcortex_nanomsg-1.1.7-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9a81e13d9993067941eadfdd964ee75", "sha256": "0dda049baf52de1d40bca7b8b0084ea8ac69f212a1fb0e731055e02d06f9b45d"}, "downloads": -1, "filename": "motorcortex-nanomsg-1.1.7.tar.gz", "has_sig": false, "md5_digest": "b9a81e13d9993067941eadfdd964ee75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12535, "upload_time": "2018-12-10T11:02:49", "upload_time_iso_8601": "2018-12-10T11:02:49.166546Z", "url": "https://files.pythonhosted.org/packages/1a/d6/71dbec56f9edf52ab2714deda1cb24f2dc9b45b11cc1ca09589ec6528641/motorcortex-nanomsg-1.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:33 2020"}