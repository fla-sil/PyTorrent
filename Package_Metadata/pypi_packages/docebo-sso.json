{"info": {"author": "Chris Dee", "author_email": "chris.dee@optimizely.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7"], "description": "Docebo-SSO\n==========\n\nThis package is meant to allow a simple python interface to add a third\nparty Single Sign On to the Docebo Learning Management System. Docebo's\nSSO does not create a user that doesn't exist, or update the credentials\nof a user that does exist.\n\nUsage\n-----\n\nThere are two ways to use this package, depending on the amount of\ncustomization that you need with Docebo's sign on.\n\nUser API\n~~~~~~~~\n\nThe user API is a simple, flexible set of methods to sync a Docebo user\nwith a locally created user object. To ue the methods, the User object\nmust first be instantiated with all of the information to be synced with\nthe user from Docebo\n\nA full list of valid user parameters can be found at Docebo's API\nreference:\nhttps://www.docebo.com/wp-content/uploads/media/Docebo\\_APImanual.pdf\n\n.. code:: sh\n\n    from docebo_sso import user as docebo_user\n\n    new_user = docebo_user.User(\n     userid='batman',\n     firstname='john',\n     lastname='Doe',\n     ...\n    )\n\nNext, the API and SSO keys and the hosting domain for your LMS must be\ninitialized. This method will also create the appropriate hashes and\ntokens necessary for using Docebo's API\n\n.. code:: sh\n\n    docebo_user.initialize_keys(\n     domain='http://example.docebosaas.com'\n     api_key='xxxxxxxxxx'\n     api_secret='xxxxxxxxxx'\n     sso_token='xxxxxx'\n    )\n\nFinally, you can use the methods in the User api to interact with Docebo\n-- the methods use the parameters you input into the User object and\ngenerate valid params/api\\_keys.\n\n.. code:: sh\n\n    if new_user.exists():\n      new_user.update()\n    else:\n      new_user.create()\n\n    redirect_url = new_user.signin()\n\nThe above is a simple script to create the local user initialized in the\nfirst step if their userid doesn't exist on Docebo, and update their\nuser parameters if they do exist.\n\nredirect\\_url will contain a valid, signed, URL to signin to that user's\naccount on Docebo that can be redirected to or pasted into a browser.\n\nAvailable methods are:\n\n.. code:: sh\n\n    All of these methods return boolean values for success for easy control flow\n\n    from docebo_sso import user as docebo_user\n\n    # Initialize user object with keys, secrets and domain\n    docebo_user.initialize_keys(self, domain, api_secret, api_key, sso_secret)\n\n    # Verify user exists in Docebo (by username)\n    # Hits /api/user/checkUsername\n    exists(self)\n\n    # Update remote user params from local user information\n    update(self)\n\n    # Create a new user based on local user \n    # Hits /api/user/create\n    create(self)\n\n    # Delete user\n    # Hits /api/user/delete\n    delete(self)\n\n    # Sign user in (if account exists), and return URL which will sign that user into their docebo account\n    signin(self)\n\nIn order to call delete or update, the docebo unique-id for that given user is required.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ncreate() and exists() automatically add this field on success\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also use the following method to add the uid manually.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    new_user.set_docebo_unique_id(#####)\n\nMethods API\n^^^^^^^^^^^\n\nThe second method of interaction is less abstracted, but gives more\ncontrol over the params. Where the User API generates params and fills\nin information for the user, the Methods API requires the user to input\na set of params as a dictionary at every call.\n\nThe correct format for the params generated for each method can be found\nat:\nhttps://www.docebo.com/wp-content/uploads/media/Docebo\\_APImanual.pdf\n\nThe api\\_key, api\\_secret and sso\\_secret must still be initialized as\nin the User API.\n\nAvailable methods are:\n\n.. code:: sh\n\n    from docebo_sso import methods as docebo_methods\n\n    #These methods return the json body of the responses they receive.\n\n    # Verify user exists in Docebo\n    docebo_methods.verify_user(self, params)\n\n    # Update user params w/input params\n    docebo_methods.edit_user(self, params)\n\n    # Create a new user given input params\n    # Gives an 'empty response' error if user already exists\n    docebo_methods.create_user(self, params)\n\n    # Delete user corresponding to provided unique_id\n    docebo_methods.delete_user(self, params)\n\n    # Sign user in (if account exists), and return URL which will sign that user into their docebo account\n    docebo_methods.setup_valid_docebo_sso_path_and_params(self, username)\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/optimizely/docebo-SSO", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "docebo-sso", "package_url": "https://pypi.org/project/docebo-sso/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/docebo-sso/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/optimizely/docebo-SSO"}, "release_url": "https://pypi.org/project/docebo-sso/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Single Sign On Implementation for the Docebo LMS", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package is meant to allow a simple python interface to add a third\nparty Single Sign On to the Docebo Learning Management System. Docebo\u2019s\nSSO does not create a user that doesn\u2019t exist, or update the credentials\nof a user that does exist.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>There are two ways to use this package, depending on the amount of\ncustomization that you need with Docebo\u2019s sign on.</p>\n<div id=\"user-api\">\n<h3>User API</h3>\n<p>The user API is a simple, flexible set of methods to sync a Docebo user\nwith a locally created user object. To ue the methods, the User object\nmust first be instantiated with all of the information to be synced with\nthe user from Docebo</p>\n<p>A full list of valid user parameters can be found at Docebo\u2019s API\nreference:\n<a href=\"https://www.docebo.com/wp-content/uploads/media/Docebo_APImanual.pdf\" rel=\"nofollow\">https://www.docebo.com/wp-content/uploads/media/Docebo_APImanual.pdf</a></p>\n<pre>from docebo_sso import user as docebo_user\n\n<span class=\"nv\">new_user</span> <span class=\"o\">=</span> docebo_user.User<span class=\"o\">(</span>\n <span class=\"nv\">userid</span><span class=\"o\">=</span><span class=\"s1\">'batman'</span>,\n <span class=\"nv\">firstname</span><span class=\"o\">=</span><span class=\"s1\">'john'</span>,\n <span class=\"nv\">lastname</span><span class=\"o\">=</span><span class=\"s1\">'Doe'</span>,\n ...\n<span class=\"o\">)</span>\n</pre>\n<p>Next, the API and SSO keys and the hosting domain for your LMS must be\ninitialized. This method will also create the appropriate hashes and\ntokens necessary for using Docebo\u2019s API</p>\n<pre>docebo_user.initialize_keys<span class=\"o\">(</span>\n <span class=\"nv\">domain</span><span class=\"o\">=</span><span class=\"s1\">'http://example.docebosaas.com'</span>\n <span class=\"nv\">api_key</span><span class=\"o\">=</span><span class=\"s1\">'xxxxxxxxxx'</span>\n <span class=\"nv\">api_secret</span><span class=\"o\">=</span><span class=\"s1\">'xxxxxxxxxx'</span>\n <span class=\"nv\">sso_token</span><span class=\"o\">=</span><span class=\"s1\">'xxxxxx'</span>\n<span class=\"o\">)</span>\n</pre>\n<p>Finally, you can use the methods in the User api to interact with Docebo\n\u2013 the methods use the parameters you input into the User object and\ngenerate valid params/api_keys.</p>\n<pre><span class=\"k\">if</span> new_user.exists<span class=\"o\">()</span>:\n  new_user.update<span class=\"o\">()</span>\n<span class=\"k\">else</span>:\n  new_user.create<span class=\"o\">()</span>\n\n<span class=\"nv\">redirect_url</span> <span class=\"o\">=</span> new_user.signin<span class=\"o\">()</span>\n</pre>\n<p>The above is a simple script to create the local user initialized in the\nfirst step if their userid doesn\u2019t exist on Docebo, and update their\nuser parameters if they do exist.</p>\n<p>redirect_url will contain a valid, signed, URL to signin to that user\u2019s\naccount on Docebo that can be redirected to or pasted into a browser.</p>\n<p>Available methods are:</p>\n<pre>All of these methods <span class=\"k\">return</span> boolean values <span class=\"k\">for</span> success <span class=\"k\">for</span> easy control flow\n\nfrom docebo_sso import user as docebo_user\n\n<span class=\"c1\"># Initialize user object with keys, secrets and domain\n</span>docebo_user.initialize_keys<span class=\"o\">(</span>self, domain, api_secret, api_key, sso_secret<span class=\"o\">)</span>\n\n<span class=\"c1\"># Verify user exists in Docebo (by username)\n# Hits /api/user/checkUsername\n</span>exists<span class=\"o\">(</span>self<span class=\"o\">)</span>\n\n<span class=\"c1\"># Update remote user params from local user information\n</span>update<span class=\"o\">(</span>self<span class=\"o\">)</span>\n\n<span class=\"c1\"># Create a new user based on local user\n# Hits /api/user/create\n</span>create<span class=\"o\">(</span>self<span class=\"o\">)</span>\n\n<span class=\"c1\"># Delete user\n# Hits /api/user/delete\n</span>delete<span class=\"o\">(</span>self<span class=\"o\">)</span>\n\n<span class=\"c1\"># Sign user in (if account exists), and return URL which will sign that user into their docebo account\n</span>signin<span class=\"o\">(</span>self<span class=\"o\">)</span>\n</pre>\n</div>\n<div id=\"in-order-to-call-delete-or-update-the-docebo-unique-id-for-that-given-user-is-required\">\n<h3>In order to call delete or update, the docebo unique-id for that given user is required.</h3>\n</div>\n<div id=\"create-and-exists-automatically-add-this-field-on-success\">\n<h3>create() and exists() automatically add this field on success</h3>\n</div>\n<div id=\"you-can-also-use-the-following-method-to-add-the-uid-manually\">\n<h3>You can also use the following method to add the uid manually.</h3>\n<pre>new_user.set_docebo_unique_id<span class=\"o\">(</span><span class=\"c1\">#####)</span>\n</pre>\n<div id=\"methods-api\">\n<h4>Methods API</h4>\n<p>The second method of interaction is less abstracted, but gives more\ncontrol over the params. Where the User API generates params and fills\nin information for the user, the Methods API requires the user to input\na set of params as a dictionary at every call.</p>\n<p>The correct format for the params generated for each method can be found\nat:\n<a href=\"https://www.docebo.com/wp-content/uploads/media/Docebo_APImanual.pdf\" rel=\"nofollow\">https://www.docebo.com/wp-content/uploads/media/Docebo_APImanual.pdf</a></p>\n<p>The api_key, api_secret and sso_secret must still be initialized as\nin the User API.</p>\n<p>Available methods are:</p>\n<pre>from docebo_sso import methods as docebo_methods\n\n<span class=\"c1\">#These methods return the json body of the responses they receive.\n</span>\n<span class=\"c1\"># Verify user exists in Docebo\n</span>docebo_methods.verify_user<span class=\"o\">(</span>self, params<span class=\"o\">)</span>\n\n<span class=\"c1\"># Update user params w/input params\n</span>docebo_methods.edit_user<span class=\"o\">(</span>self, params<span class=\"o\">)</span>\n\n<span class=\"c1\"># Create a new user given input params\n# Gives an 'empty response' error if user already exists\n</span>docebo_methods.create_user<span class=\"o\">(</span>self, params<span class=\"o\">)</span>\n\n<span class=\"c1\"># Delete user corresponding to provided unique_id\n</span>docebo_methods.delete_user<span class=\"o\">(</span>self, params<span class=\"o\">)</span>\n\n<span class=\"c1\"># Sign user in (if account exists), and return URL which will sign that user into their docebo account\n</span>docebo_methods.setup_valid_docebo_sso_path_and_params<span class=\"o\">(</span>self, username<span class=\"o\">)</span>\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1891883, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ee807b09eacfbfa869e0092f4a11ddb8", "sha256": "1eb08730c00da1ced7073b07a125a0e148566022f64cba673eabea487a2bb0b9"}, "downloads": -1, "filename": "docebo-sso-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ee807b09eacfbfa869e0092f4a11ddb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4831, "upload_time": "2015-08-04T21:05:37", "upload_time_iso_8601": "2015-08-04T21:05:37.242538Z", "url": "https://files.pythonhosted.org/packages/34/ea/14673c7176ac86b378ed766480807ef0ea479f896b4b48b5aaae292a4c57/docebo-sso-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "19e16a5e61543eaa301d82bc34ddb824", "sha256": "53c04d57d1537563c49121354dc7e357d07fd14f535e9fb25f55d3e02a665954"}, "downloads": -1, "filename": "docebo-sso-0.0.2.tar.gz", "has_sig": false, "md5_digest": "19e16a5e61543eaa301d82bc34ddb824", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4838, "upload_time": "2015-08-04T22:13:36", "upload_time_iso_8601": "2015-08-04T22:13:36.026130Z", "url": "https://files.pythonhosted.org/packages/1a/c4/480b67b057e2804eaed5587f255fe6afee70f7ea5483e19054d0a26d7eed/docebo-sso-0.0.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "047bc3983fc54798317ba22284f18e04", "sha256": "a3694b44945b27e8ce056a23c4508d52fdd43ee03d02d34f8355858cd658add7"}, "downloads": -1, "filename": "docebo-sso-1.0.0.tar.gz", "has_sig": false, "md5_digest": "047bc3983fc54798317ba22284f18e04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4847, "upload_time": "2016-01-06T21:33:03", "upload_time_iso_8601": "2016-01-06T21:33:03.453834Z", "url": "https://files.pythonhosted.org/packages/c2/e9/fe2dfb83accbbf6f3fb42f92e68229fa04ff18f4ca1f04f2ea030066eb93/docebo-sso-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "047bc3983fc54798317ba22284f18e04", "sha256": "a3694b44945b27e8ce056a23c4508d52fdd43ee03d02d34f8355858cd658add7"}, "downloads": -1, "filename": "docebo-sso-1.0.0.tar.gz", "has_sig": false, "md5_digest": "047bc3983fc54798317ba22284f18e04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4847, "upload_time": "2016-01-06T21:33:03", "upload_time_iso_8601": "2016-01-06T21:33:03.453834Z", "url": "https://files.pythonhosted.org/packages/c2/e9/fe2dfb83accbbf6f3fb42f92e68229fa04ff18f4ca1f04f2ea030066eb93/docebo-sso-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:57 2020"}