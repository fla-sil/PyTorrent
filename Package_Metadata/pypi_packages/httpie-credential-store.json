{"info": {"author": "Ihor Kalnytskyi", "author_email": "ihor@kalnytskyi.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "Credential store plugin for HTTPie\n==================================\n\nHTTPie Credential Store is an `HTTPie`_ authentication plugin that looks\nfor credentials using a given URL and attaches them to the ongoing HTTP\nrequest. That said, you don't need to memorize and/or look for\ntokens/username/passwords anymore. Simply add them to the credential\nstore and everything else will be done for you by this plugin. It goes\nwithout saying that this plugin supports various secured secret storages\nsuch as system keychains or password managers (see keychain providers).\n\nEager to get started? Just start with installing!\n\n.. code:: bash\n\n   $ python3 -m pip install httpie-credential-store\n\n\nUsage\n-----\n\n.. note:: Please, do not forget to activate the plugin by invoking\n          ``http`` with ``-A creds`` option.\n\nOnce installed, the plugin will look for credentials in the credential\nfile. The credential file is stored in HTTPie configuration directory.\nSo on Linux/macOS, it will look for ``~/.httpie/credentials.json``,\nwhile on Windows - for ``%APPDATA%\\httpie\\credentials.json``. The\ncredential file will not be created for you, you're fully responsible\nfor creating one.\n\nBy its nature, the credentials file is a JSON array of credential\nrecords. Each credential record consists of the following properties:\n\n* ``url`` (*required*) is a regular expression pattern that is used to\n  map credential record to the ongoing HTTP request. I.e. if the regular\n  expression matches URL of the ongoing HTTP request, credentials of\n  matched record must be attached.\n\n* ``auth`` (*required*) is an authentication provider to use for a given\n  record. The provider will be used to attach credentials to the ongoing\n  HTTP request if the record is matched.\n\n* ``id`` (*optional*) is unique identifier of the credential record that\n  can be used to solve ambiguousness between two or more matched\n  credential records. By using ``id`` one may achieve support of\n  multiple accounts for the same service.\n\nExample:\n\n.. code:: json\n\n   [\n     {\n       \"url\": \"api.github.com\",\n       \"auth\": {\n         \"provider\": \"token\",\n         \"token\": \"your-github-oauth-token\",\n         \"scheme\": \"token\"\n       }\n     },\n     {\n       \"id\": \"bots\",\n       \"url\": \"api.github.com\",\n       \"auth\": {\n         \"provider\": \"token\",\n         \"token\": \"bots-github-oauth-token\",\n         \"scheme\": \"token\"\n       }\n     }\n   ]\n\nThe example above assumes you store your secrets unencrypted in the\ncredential file. Despite enforcing you to set sole access permissions\nfor the credential file, it's not secured and, hence, not recommended.\nHTTPie Credential Store plugin can pull secrets and other sensitive\ninformation out from password managers or system keychains. For\ninstance, you can pull your token from the `password store`_ by using\nthe following credential record:\n\n.. code:: json\n\n   [\n     {\n       \"url\": \"api.github.com\",\n       \"auth\": {\n         \"provider\": \"token\",\n         \"scheme\": \"token\",\n         \"token\": {\n           \"keychain\": \"password-store\",\n           \"name\": \"github.com/ikalnytskyi/token\"\n         }\n       }\n     }\n   ]\n\nOnce the credential store is filled, you're ready to use the plugin at\nyour will. In order to activate the plugin, you must pass ``-A creds``\nor ``-A credential-store`` to ``http`` executable.\n\n.. code:: bash\n\n   $ http -A creds https://api.github.com\n\nOptionally, you can provide an ID of the credential record to use by\npassing ``-a`` argument.\n\n.. code:: bash\n\n   $ http -A creds -a bots https://api.github.com\n\n\nAuthentication providers\n------------------------\n\nHTTPie Credential Store comes with the following authentication\nproviders out of box.\n\n\n``basic``\n.........\n\nThe 'Basic' HTTP authentication scheme as defined in :RFC:`7617`.\nTransmits credentials as username/password pairs, encoded using Base64.\n\n.. code:: json\n\n   {\n     \"provider\": \"basic\",\n     \"username\": \"ikalnytskyi\",\n     \"password\": \"p@ss\"\n   }\n\nwhere\n\n* ``username`` is a username to authenticate\n* ``password`` is a password of the authenticating user\n\n\n``digest``\n..........\n\nThe 'Digest' HTTP authentication scheme as defined in :RFC:`2617`. It\napplies a hash function to the username and password before sending them\nover the network.\n\n.. code:: json\n\n   {\n     \"provider\": \"digest\",\n     \"username\": \"ikalnytskyi\",\n     \"password\": \"p@ss\"\n   }\n\nwhere\n\n* ``username`` is a username to authenticate\n* ``password`` is a password of the authenticating user\n\n\n``token``\n.........\n\nThe 'Token' HTTP authentication scheme (also called 'Bearer') transmits\ntoken in the ``Authorization`` HTTP header.\n\n.. code:: json\n\n   {\n     \"provider\": \"token\",\n     \"token\": \"t0k3n\",\n     \"scheme\": \"JWT\"\n   }\n\nwhere\n\n* ``token`` is a token of the authenticating user\n* ``scheme`` (optional, default: \"Bearer\") is an authenticating scheme\n\n\n``header``\n..........\n\nThe 'Header' HTTP authentication is not exactly an authentication\nscheme. It's rather a way to pass any free-formed HTTP header with\nsecret or not.\n\n.. code:: json\n\n   {\n     \"provider\": \"header\",\n     \"name\": \"X-Extra-Key\",\n     \"value\": \"k3y\"\n   }\n\nwhere\n\n* ``name`` is an HTTP header name to use\n* ``value`` is an HTTP header value to pass\n\n\n``multiple``\n............\n\nThis is a fake authentication scheme even in terms of this plugin. It\ndoes no auth but chains and applies one or more providers\nsimultaneously. It's something you will (likely) never use.\n\n.. code:: json\n\n   {\n     \"provider\": \"multiple\",\n     \"providers\": [\n       {\n         \"provider\": \"token\",\n         \"token\": \"t0k3n\"\n       },\n       {\n         \"provider\": \"header\",\n         \"name\": \"X-Extra-Key\",\n         \"value\": \"k3y\"\n       }\n     ]\n   }\n\nwhere\n\n* ``providers`` is a list of auth providers to use simultaneously\n\n\nKeychain providers\n------------------\n\nThe plugin supports a bunch of keychains that can be used to pull\nsecrets from secured storage.\n\n\n``shell``\n.........\n\nShell provider is nothing more but a mere shell command to execute. The\ncommand must return a secret to the plugin via standard output stream.\nThis is a universal approach that can be used to glue together various\nunsupported password managers and/or keychains.\n\nExample:\n\n.. code:: json\n\n   {\n     \"keychain\": \"shell\",\n     \"command\": \"cat ~/path/to/secret | tr -d '\\n'\"\n   }\n\nwhere\n\n* ``command`` is a shell command to execute\n\n\n\n``system``\n..........\n\nSystem provider, as the name suggests, use your system keychain to pull\nsecrets from. It may be **KWallet**, **GNOME Keyring**, **macOS\nKeychain** or even **Windows Credential Locker**.\n\nExample:\n\n.. code:: json\n\n   {\n     \"keychain\": \"system\",\n     \"service\": \"github\",\n     \"username\": \"ikalnytskyi\"\n   }\n\nwhere\n\n* ``service`` is a service to pull data for\n* ``username`` is a username for that service to pull data for\n\n\n``password-store``\n..................\n\nPassword store provider is a bridge between this plugin and the\n`password store`_. It invokes ``pass`` on your system and pulls the\nsecret from the first line of the stored record (normally password).\n\nExample:\n\n.. code:: json\n\n   {\n     \"keychain\": \"password-store\",\n     \"name\": \"github.com/ikalnytskyi\"\n   }\n\nwhere\n\n* ``name`` is a pass name in terms of the password store\n\nFAQ\n---\n\n* **Q**: How to learn which credentials have been attached to the request?\n\n  **A**: Unfortunately, due to late credentials binding, it's impossible\n  to learn which credentials have been used by running ``http --debug``\n  command. Nevertheless, one can check amends made by auth providers by\n  inspect HTTP headers transmitted within the request by passing ``-v``\n  argument to HTTPie: ``http -v``.\n\n\n.. _HTTPie: https://httpie.org/\n.. _password store: https://www.passwordstore.org/\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ikalnytskyi/httpie-credential-store", "keywords": "httpie,credential,store,keychain,plugin,auth", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "httpie-credential-store", "package_url": "https://pypi.org/project/httpie-credential-store/", "platform": "", "project_url": "https://pypi.org/project/httpie-credential-store/", "project_urls": {"Homepage": "https://github.com/ikalnytskyi/httpie-credential-store", "Repository": "https://github.com/ikalnytskyi/httpie-credential-store"}, "release_url": "https://pypi.org/project/httpie-credential-store/2.0.0/", "requires_dist": ["httpie (>=2.0,<3.0)", "keyring (>=21.0,<22.0)"], "requires_python": ">=3.6,<4.0", "summary": "HTTPie: one auth to rule them all!", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>HTTPie Credential Store is an <a href=\"https://httpie.org/\" rel=\"nofollow\">HTTPie</a> authentication plugin that looks\nfor credentials using a given URL and attaches them to the ongoing HTTP\nrequest. That said, you don\u2019t need to memorize and/or look for\ntokens/username/passwords anymore. Simply add them to the credential\nstore and everything else will be done for you by this plugin. It goes\nwithout saying that this plugin supports various secured secret storages\nsuch as system keychains or password managers (see keychain providers).</p>\n<p>Eager to get started? Just start with installing!</p>\n<pre>$ python3 -m pip install httpie-credential-store\n</pre>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div>\n<p>Note</p>\n<p>Please, do not forget to activate the plugin by invoking\n<tt>http</tt> with <tt><span class=\"pre\">-A</span> creds</tt> option.</p>\n</div>\n<p>Once installed, the plugin will look for credentials in the credential\nfile. The credential file is stored in HTTPie configuration directory.\nSo on Linux/macOS, it will look for <tt><span class=\"pre\">~/.httpie/credentials.json</span></tt>,\nwhile on Windows - for <tt><span class=\"pre\">%APPDATA%\\httpie\\credentials.json</span></tt>. The\ncredential file will not be created for you, you\u2019re fully responsible\nfor creating one.</p>\n<p>By its nature, the credentials file is a JSON array of credential\nrecords. Each credential record consists of the following properties:</p>\n<ul>\n<li><tt>url</tt> (<em>required</em>) is a regular expression pattern that is used to\nmap credential record to the ongoing HTTP request. I.e. if the regular\nexpression matches URL of the ongoing HTTP request, credentials of\nmatched record must be attached.</li>\n<li><tt>auth</tt> (<em>required</em>) is an authentication provider to use for a given\nrecord. The provider will be used to attach credentials to the ongoing\nHTTP request if the record is matched.</li>\n<li><tt>id</tt> (<em>optional</em>) is unique identifier of the credential record that\ncan be used to solve ambiguousness between two or more matched\ncredential records. By using <tt>id</tt> one may achieve support of\nmultiple accounts for the same service.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"api.github.com\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"auth\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"token\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"your-github-oauth-token\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"scheme\"</span><span class=\"p\">:</span> <span class=\"s2\">\"token\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bots\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"api.github.com\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"auth\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"token\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bots-github-oauth-token\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"scheme\"</span><span class=\"p\">:</span> <span class=\"s2\">\"token\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>The example above assumes you store your secrets unencrypted in the\ncredential file. Despite enforcing you to set sole access permissions\nfor the credential file, it\u2019s not secured and, hence, not recommended.\nHTTPie Credential Store plugin can pull secrets and other sensitive\ninformation out from password managers or system keychains. For\ninstance, you can pull your token from the <a href=\"https://www.passwordstore.org/\" rel=\"nofollow\">password store</a> by using\nthe following credential record:</p>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"api.github.com\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"auth\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"token\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"scheme\"</span><span class=\"p\">:</span> <span class=\"s2\">\"token\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"keychain\"</span><span class=\"p\">:</span> <span class=\"s2\">\"password-store\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"github.com/ikalnytskyi/token\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Once the credential store is filled, you\u2019re ready to use the plugin at\nyour will. In order to activate the plugin, you must pass <tt><span class=\"pre\">-A</span> creds</tt>\nor <tt><span class=\"pre\">-A</span> <span class=\"pre\">credential-store</span></tt> to <tt>http</tt> executable.</p>\n<pre>$ http -A creds https://api.github.com\n</pre>\n<p>Optionally, you can provide an ID of the credential record to use by\npassing <tt><span class=\"pre\">-a</span></tt> argument.</p>\n<pre>$ http -A creds -a bots https://api.github.com\n</pre>\n</div>\n<div id=\"authentication-providers\">\n<h2>Authentication providers</h2>\n<p>HTTPie Credential Store comes with the following authentication\nproviders out of box.</p>\n<div id=\"basic\">\n<h3><tt>basic</tt></h3>\n<p>The \u2018Basic\u2019 HTTP authentication scheme as defined in <a href=\"http://tools.ietf.org/html/rfc7617.html\" rel=\"nofollow\">RFC 7617</a>.\nTransmits credentials as username/password pairs, encoded using Base64.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"basic\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ikalnytskyi\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"p@ss\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>where</p>\n<ul>\n<li><tt>username</tt> is a username to authenticate</li>\n<li><tt>password</tt> is a password of the authenticating user</li>\n</ul>\n</div>\n<div id=\"digest\">\n<h3><tt>digest</tt></h3>\n<p>The \u2018Digest\u2019 HTTP authentication scheme as defined in <a href=\"http://tools.ietf.org/html/rfc2617.html\" rel=\"nofollow\">RFC 2617</a>. It\napplies a hash function to the username and password before sending them\nover the network.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"digest\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ikalnytskyi\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"p@ss\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>where</p>\n<ul>\n<li><tt>username</tt> is a username to authenticate</li>\n<li><tt>password</tt> is a password of the authenticating user</li>\n</ul>\n</div>\n<div id=\"token\">\n<h3><tt>token</tt></h3>\n<p>The \u2018Token\u2019 HTTP authentication scheme (also called \u2018Bearer\u2019) transmits\ntoken in the <tt>Authorization</tt> HTTP header.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"token\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"t0k3n\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"scheme\"</span><span class=\"p\">:</span> <span class=\"s2\">\"JWT\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>where</p>\n<ul>\n<li><tt>token</tt> is a token of the authenticating user</li>\n<li><tt>scheme</tt> (optional, default: \u201cBearer\u201d) is an authenticating scheme</li>\n</ul>\n</div>\n<div id=\"header\">\n<h3><tt>header</tt></h3>\n<p>The \u2018Header\u2019 HTTP authentication is not exactly an authentication\nscheme. It\u2019s rather a way to pass any free-formed HTTP header with\nsecret or not.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"header\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"X-Extra-Key\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"k3y\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>where</p>\n<ul>\n<li><tt>name</tt> is an HTTP header name to use</li>\n<li><tt>value</tt> is an HTTP header value to pass</li>\n</ul>\n</div>\n<div id=\"multiple\">\n<h3><tt>multiple</tt></h3>\n<p>This is a fake authentication scheme even in terms of this plugin. It\ndoes no auth but chains and applies one or more providers\nsimultaneously. It\u2019s something you will (likely) never use.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"multiple\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"providers\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"token\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"t0k3n\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"header\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"X-Extra-Key\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"k3y\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>where</p>\n<ul>\n<li><tt>providers</tt> is a list of auth providers to use simultaneously</li>\n</ul>\n</div>\n</div>\n<div id=\"keychain-providers\">\n<h2>Keychain providers</h2>\n<p>The plugin supports a bunch of keychains that can be used to pull\nsecrets from secured storage.</p>\n<div id=\"shell\">\n<h3><tt>shell</tt></h3>\n<p>Shell provider is nothing more but a mere shell command to execute. The\ncommand must return a secret to the plugin via standard output stream.\nThis is a universal approach that can be used to glue together various\nunsupported password managers and/or keychains.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"keychain\"</span><span class=\"p\">:</span> <span class=\"s2\">\"shell\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cat ~/path/to/secret | tr -d '\\n'\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>where</p>\n<ul>\n<li><tt>command</tt> is a shell command to execute</li>\n</ul>\n</div>\n<div id=\"system\">\n<h3><tt>system</tt></h3>\n<p>System provider, as the name suggests, use your system keychain to pull\nsecrets from. It may be <strong>KWallet</strong>, <strong>GNOME Keyring</strong>, <strong>macOS\nKeychain</strong> or even <strong>Windows Credential Locker</strong>.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"keychain\"</span><span class=\"p\">:</span> <span class=\"s2\">\"system\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"service\"</span><span class=\"p\">:</span> <span class=\"s2\">\"github\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ikalnytskyi\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>where</p>\n<ul>\n<li><tt>service</tt> is a service to pull data for</li>\n<li><tt>username</tt> is a username for that service to pull data for</li>\n</ul>\n</div>\n<div id=\"password-store\">\n<h3><tt><span class=\"pre\">password-store</span></tt></h3>\n<p>Password store provider is a bridge between this plugin and the\n<a href=\"https://www.passwordstore.org/\" rel=\"nofollow\">password store</a>. It invokes <tt>pass</tt> on your system and pulls the\nsecret from the first line of the stored record (normally password).</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"keychain\"</span><span class=\"p\">:</span> <span class=\"s2\">\"password-store\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"github.com/ikalnytskyi\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>where</p>\n<ul>\n<li><tt>name</tt> is a pass name in terms of the password store</li>\n</ul>\n</div>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<ul>\n<li><p><strong>Q</strong>: How to learn which credentials have been attached to the request?</p>\n<p><strong>A</strong>: Unfortunately, due to late credentials binding, it\u2019s impossible\nto learn which credentials have been used by running <tt>http <span class=\"pre\">--debug</span></tt>\ncommand. Nevertheless, one can check amends made by auth providers by\ninspect HTTP headers transmitted within the request by passing <tt><span class=\"pre\">-v</span></tt>\nargument to HTTPie: <tt>http <span class=\"pre\">-v</span></tt>.</p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6519597, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "cee988c39dd5bed7d29900eadcccc154", "sha256": "9e766e0fd83152b90c76f7399b90e352ee2ed90f3f72c5f3737c4edbb1c445dd"}, "downloads": -1, "filename": "httpie_credential_store-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cee988c39dd5bed7d29900eadcccc154", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8436, "upload_time": "2019-11-30T15:48:15", "upload_time_iso_8601": "2019-11-30T15:48:15.871175Z", "url": "https://files.pythonhosted.org/packages/77/7b/11c853ecbdf0390dadda56141705ebc1e256a6c5fbb8ba4a48788464d959/httpie_credential_store-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2debed06504c8ffab78bd43dbd3e84b9", "sha256": "df399dfbf23d194eaddc20aa69b155bcceeac4931c9122881fd5b24eb08c255a"}, "downloads": -1, "filename": "httpie-credential-store-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2debed06504c8ffab78bd43dbd3e84b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8305, "upload_time": "2019-11-30T15:48:13", "upload_time_iso_8601": "2019-11-30T15:48:13.641686Z", "url": "https://files.pythonhosted.org/packages/ba/e2/194b3c7a43ba416d42c0e2026d10a49dc80feef2691c6c49c8c193503625/httpie-credential-store-1.0.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "1a6a5667de9cea8730c078bcb432c3c0", "sha256": "d056945c71f81aff4dffef7e09262559e1b78cae86442fc4e3305c466dc1dd2d"}, "downloads": -1, "filename": "httpie_credential_store-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1a6a5667de9cea8730c078bcb432c3c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8432, "upload_time": "2020-01-25T18:56:41", "upload_time_iso_8601": "2020-01-25T18:56:41.828011Z", "url": "https://files.pythonhosted.org/packages/3b/af/8e11a324c44adc8415658ca7def1af0e0364d0694259096c50b8972ed6b2/httpie_credential_store-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7af49699a2cbc2e9375792b674b683f", "sha256": "c4dc332ae6b6252b09f2bfffd61a2a5647d1f4347fd3e080431e42fde6457d7e"}, "downloads": -1, "filename": "httpie-credential-store-2.0.0.tar.gz", "has_sig": false, "md5_digest": "e7af49699a2cbc2e9375792b674b683f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8415, "upload_time": "2020-01-25T18:56:40", "upload_time_iso_8601": "2020-01-25T18:56:40.450467Z", "url": "https://files.pythonhosted.org/packages/23/85/085b28f5a209b17fa1e5ca24649407303212b3f5e89422f34a435b6cfd43/httpie-credential-store-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a6a5667de9cea8730c078bcb432c3c0", "sha256": "d056945c71f81aff4dffef7e09262559e1b78cae86442fc4e3305c466dc1dd2d"}, "downloads": -1, "filename": "httpie_credential_store-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1a6a5667de9cea8730c078bcb432c3c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8432, "upload_time": "2020-01-25T18:56:41", "upload_time_iso_8601": "2020-01-25T18:56:41.828011Z", "url": "https://files.pythonhosted.org/packages/3b/af/8e11a324c44adc8415658ca7def1af0e0364d0694259096c50b8972ed6b2/httpie_credential_store-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7af49699a2cbc2e9375792b674b683f", "sha256": "c4dc332ae6b6252b09f2bfffd61a2a5647d1f4347fd3e080431e42fde6457d7e"}, "downloads": -1, "filename": "httpie-credential-store-2.0.0.tar.gz", "has_sig": false, "md5_digest": "e7af49699a2cbc2e9375792b674b683f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8415, "upload_time": "2020-01-25T18:56:40", "upload_time_iso_8601": "2020-01-25T18:56:40.450467Z", "url": "https://files.pythonhosted.org/packages/23/85/085b28f5a209b17fa1e5ca24649407303212b3f5e89422f34a435b6cfd43/httpie-credential-store-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:08 2020"}