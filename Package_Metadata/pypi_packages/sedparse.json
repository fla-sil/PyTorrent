{"info": {"author": "Aurelio Jargas", "author_email": "aurelio@aurelio.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development"], "description": "# sedparse\n\n- Author: Aurelio Jargas\n- License: GPLv3\n- Tested with Python 2.7, 3.4, 3.5, 3.6, 3.7 and 3.8 (see [.travis.yml](https://github.com/aureliojargas/sedparse/blob/master/.travis.yml))\n\nA translation from C to Python of GNU sed's parser for sed scripts.\n\nAfter running sedparse in your sed script, the resulting \"[AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree)\" is available in different formats:\n\n- List of objects (translated C structs)\n- List of dictionaries\n- JSON\n\nFor a complete reference on how the different sed commands are mapped by the parser, see:\n\n- [tests/reference.sed](https://github.com/aureliojargas/sedparse/blob/master/tests/reference.sed) - original sed script\n- [tests/reference.json](https://github.com/aureliojargas/sedparse/blob/master/tests/reference.json) - JSON generated by sedparse\n\n\n## About the translation\n\nI copied the original code in C and translated everything to Python, line by line.\n\nTo make it feasible to keep this code updated with future GNU sed code, this is a literal translation, trying to mimic as much as possible of the original code. That includes using the same API, same logic, same variable and method names and same data structures. Pythonic code? Sorry, not here.\n\nThe accuracy of the parser is checked by extensive unit tests in [tests/](https://github.com/aureliojargas/sedparse/tree/master/tests).\n\nSedparse was translated from this GNU sed version:\n\nhttp://git.savannah.gnu.org/cgit/sed.git/commit/?id=a9cb52bcf39f0ee307301ac73c11acb24372b9d8\n\n    commit a9cb52bcf39f0ee307301ac73c11acb24372b9d8\n    Author: Assaf Gordon <assafgordon@gmail.com>\n    Date:   Sun Jun 2 01:14:00 2019 -0600\n\n> Note that this is not a full GNU sed implementation.\n> Only the parser for sed scripts was translated.\n> Check https://github.com/GillesArcas/PythonSed for a working sed in Python.\n\n\n## Sedparse extensions to the original parser\n\n- Preserves comments\n- Preserves blank lines between commands\n- Preserves original flags for the `s` command\n- Preserves original flags for regex addresses\n\n\n## Installation\n\n    pip install --user sedparse\n    sedparse --help\n\nAlternatively, you can just download and run the [sedparse.py](https://raw.githubusercontent.com/aureliojargas/sedparse/master/sedparse.py) file, since it is self-contained with no external dependencies.\n\n\n## Usage from the command line\n\nThe informed sed script will be parsed and checked for syntax errors. If everything is fine, a JSON representation of the script is sent to STDOUT.\n\nJust like in sed, you can inform the sed script using one or more `-e` options:\n\n```console\n$ sedparse -e \"s/foo/bar/g\" -e \"5d\"\n[\n    {\n        \"cmd\": \"s\",\n        \"line\": 1,\n        \"x\": {\n            \"cmd_subst\": {\n                \"regx\": {\n                    \"flags\": \"g\",\n                    \"pattern\": \"foo\",\n                    \"slash\": \"/\"\n                },\n                \"replacement\": {\n                    \"text\": \"bar\"\n                }\n            }\n        }\n    },\n    {\n        \"a1\": {\n            \"addr_number\": 5,\n            \"addr_type\": 3\n        },\n        \"cmd\": \"d\",\n        \"line\": 1\n    }\n]\n$\n```\n\nOr you can inform the sed script as a file argument using `-f`:\n\n```console\n$ echo '1,10!d' > head.sed\n$ sedparse -f head.sed\n[\n    {\n        \"a1\": {\n            \"addr_number\": 1,\n            \"addr_type\": 3\n        },\n        \"a2\": {\n            \"addr_number\": 10,\n            \"addr_type\": 3\n        },\n        \"addr_bang\": true,\n        \"cmd\": \"d\",\n        \"line\": 1\n    }\n]\n$ rm head.sed\n$\n```\n\nOr even as text coming from STDIN when using the special `-` file:\n\n```console\n$ echo '\\EXTREMITIES' | sedparse -f -\n[\n    {\n        \"a1\": {\n            \"addr_regex\": {\n                \"flags\": \"MI\",\n                \"pattern\": \"XTR\",\n                \"slash\": \"E\"\n            },\n            \"addr_type\": 2\n        },\n        \"cmd\": \"T\",\n        \"line\": 1,\n        \"x\": {\n            \"label_name\": \"IES\"\n        }\n    }\n]\n$\n```\n\n\n## Usage as a Python module\n\nUse `sedparse.compile_string()` to parse a string as a sed script. You must inform a list that will be appended in-place with the parsed commands.\n\n```python\n>>> import sedparse\n>>> sedscript = \"\"\"\\\n... 11,/foo/ {\n...     $!N\n...     s/\\\\n/-/gi\n... }\n... \"\"\"\n>>> parsed = []\n>>> sedparse.compile_string(parsed, sedscript)\n>>>\n```\n\nEach sed command is represented by a `struct_sed_cmd` instance.\n\n```python\n>>> import pprint\n>>> pprint.pprint(parsed)  # doctest:+ELLIPSIS\n[struct_sed_cmd(line=1, cmd='{', ...),\n struct_sed_cmd(line=2, cmd='N', ...),\n struct_sed_cmd(line=3, cmd='s', ...),\n struct_sed_cmd(line=4, cmd='}', ...)]\n>>>\n```\n\nYou can `str()` each command, or any of its inner structs, to get their \"human readable\" representation.\n\n```python\n>>> [str(x) for x in parsed]\n['11,/foo/ {', '$ !N', 's/\\\\n/-/gi', '}']\n>>> str(parsed[0])\n'11,/foo/ {'\n>>> str(parsed[0].a1)\n'11'\n>>> str(parsed[0].a2)\n'/foo/'\n>>>\n```\n\nUse `.to_dict()` to convert a command into a Python dictionary.\n\n```python\n>>> cmd_n = parsed[1]\n>>> str(cmd_n)\n'$ !N'\n>>> pprint.pprint(cmd_n.to_dict())\n{'a1': {'addr_type': 7}, 'addr_bang': True, 'cmd': 'N', 'line': 2}\n>>>\n>>> pprint.pprint(cmd_n.to_dict(remove_empty=False))\n{'a1': {'addr_number': 0, 'addr_regex': None, 'addr_step': 0, 'addr_type': 7},\n 'a2': None,\n 'addr_bang': True,\n 'cmd': 'N',\n 'line': 2,\n 'x': {'cmd_subst': {'outf': {'name': ''},\n                     'regx': {'flags': '', 'pattern': '', 'slash': ''},\n                     'replacement': {'text': ''}},\n       'cmd_txt': {'text': []},\n       'comment': '',\n       'fname': '',\n       'int_arg': -1,\n       'label_name': ''}}\n>>>\n```\n\nUse `.to_json()` to convert a command into JSON.\n\n```python\n>>> print(cmd_n.to_json())\n{\n    \"a1\": {\n        \"addr_type\": 7\n    },\n    \"addr_bang\": true,\n    \"cmd\": \"N\",\n    \"line\": 2\n}\n>>>\n```\n\nHave fun!\n\n```python\n>>> [x.cmd for x in parsed]  # list of commands\n['{', 'N', 's', '}']\n>>> [str(x) for x in parsed if x.a1 is None]  # commands with no address\n['s/\\\\n/-/gi', '}']\n>>> [str(x) for x in parsed if x.addr_bang]  # commands with bang !\n['$ !N']\n>>> [x.x.comment for x in parsed if x.x.comment]  # extract all comments\n[]\n>>> [x.x.fname for x in parsed if x.cmd in \"rRwW\"]  # list of read/write filenames\n[]\n>>>\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aureliojargas/sedparse", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sedparse", "package_url": "https://pypi.org/project/sedparse/", "platform": "", "project_url": "https://pypi.org/project/sedparse/", "project_urls": {"Bug Tracker": "https://github.com/aureliojargas/sedparse/issues", "Homepage": "https://github.com/aureliojargas/sedparse", "Source Code": "https://github.com/aureliojargas/sedparse"}, "release_url": "https://pypi.org/project/sedparse/0.1.2/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "GNU sed's parser translated from C to Python", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sedparse</h1>\n<ul>\n<li>Author: Aurelio Jargas</li>\n<li>License: GPLv3</li>\n<li>Tested with Python 2.7, 3.4, 3.5, 3.6, 3.7 and 3.8 (see <a href=\"https://github.com/aureliojargas/sedparse/blob/master/.travis.yml\" rel=\"nofollow\">.travis.yml</a>)</li>\n</ul>\n<p>A translation from C to Python of GNU sed's parser for sed scripts.</p>\n<p>After running sedparse in your sed script, the resulting \"<a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\" rel=\"nofollow\">AST</a>\" is available in different formats:</p>\n<ul>\n<li>List of objects (translated C structs)</li>\n<li>List of dictionaries</li>\n<li>JSON</li>\n</ul>\n<p>For a complete reference on how the different sed commands are mapped by the parser, see:</p>\n<ul>\n<li><a href=\"https://github.com/aureliojargas/sedparse/blob/master/tests/reference.sed\" rel=\"nofollow\">tests/reference.sed</a> - original sed script</li>\n<li><a href=\"https://github.com/aureliojargas/sedparse/blob/master/tests/reference.json\" rel=\"nofollow\">tests/reference.json</a> - JSON generated by sedparse</li>\n</ul>\n<h2>About the translation</h2>\n<p>I copied the original code in C and translated everything to Python, line by line.</p>\n<p>To make it feasible to keep this code updated with future GNU sed code, this is a literal translation, trying to mimic as much as possible of the original code. That includes using the same API, same logic, same variable and method names and same data structures. Pythonic code? Sorry, not here.</p>\n<p>The accuracy of the parser is checked by extensive unit tests in <a href=\"https://github.com/aureliojargas/sedparse/tree/master/tests\" rel=\"nofollow\">tests/</a>.</p>\n<p>Sedparse was translated from this GNU sed version:</p>\n<p><a href=\"http://git.savannah.gnu.org/cgit/sed.git/commit/?id=a9cb52bcf39f0ee307301ac73c11acb24372b9d8\" rel=\"nofollow\">http://git.savannah.gnu.org/cgit/sed.git/commit/?id=a9cb52bcf39f0ee307301ac73c11acb24372b9d8</a></p>\n<pre><code>commit a9cb52bcf39f0ee307301ac73c11acb24372b9d8\nAuthor: Assaf Gordon &lt;assafgordon@gmail.com&gt;\nDate:   Sun Jun 2 01:14:00 2019 -0600\n</code></pre>\n<blockquote>\n<p>Note that this is not a full GNU sed implementation.\nOnly the parser for sed scripts was translated.\nCheck <a href=\"https://github.com/GillesArcas/PythonSed\" rel=\"nofollow\">https://github.com/GillesArcas/PythonSed</a> for a working sed in Python.</p>\n</blockquote>\n<h2>Sedparse extensions to the original parser</h2>\n<ul>\n<li>Preserves comments</li>\n<li>Preserves blank lines between commands</li>\n<li>Preserves original flags for the <code>s</code> command</li>\n<li>Preserves original flags for regex addresses</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip install --user sedparse\nsedparse --help\n</code></pre>\n<p>Alternatively, you can just download and run the <a href=\"https://raw.githubusercontent.com/aureliojargas/sedparse/master/sedparse.py\" rel=\"nofollow\">sedparse.py</a> file, since it is self-contained with no external dependencies.</p>\n<h2>Usage from the command line</h2>\n<p>The informed sed script will be parsed and checked for syntax errors. If everything is fine, a JSON representation of the script is sent to STDOUT.</p>\n<p>Just like in sed, you can inform the sed script using one or more <code>-e</code> options:</p>\n<pre><span class=\"gp\">$</span> sedparse -e <span class=\"s2\">\"s/foo/bar/g\"</span> -e <span class=\"s2\">\"5d\"</span>\n<span class=\"go\">[</span>\n<span class=\"go\">    {</span>\n<span class=\"go\">        \"cmd\": \"s\",</span>\n<span class=\"go\">        \"line\": 1,</span>\n<span class=\"go\">        \"x\": {</span>\n<span class=\"go\">            \"cmd_subst\": {</span>\n<span class=\"go\">                \"regx\": {</span>\n<span class=\"go\">                    \"flags\": \"g\",</span>\n<span class=\"go\">                    \"pattern\": \"foo\",</span>\n<span class=\"go\">                    \"slash\": \"/\"</span>\n<span class=\"go\">                },</span>\n<span class=\"go\">                \"replacement\": {</span>\n<span class=\"go\">                    \"text\": \"bar\"</span>\n<span class=\"go\">                }</span>\n<span class=\"go\">            }</span>\n<span class=\"go\">        }</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">    {</span>\n<span class=\"go\">        \"a1\": {</span>\n<span class=\"go\">            \"addr_number\": 5,</span>\n<span class=\"go\">            \"addr_type\": 3</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">        \"cmd\": \"d\",</span>\n<span class=\"go\">        \"line\": 1</span>\n<span class=\"go\">    }</span>\n<span class=\"go\">]</span>\n<span class=\"gp\">$</span>\n</pre>\n<p>Or you can inform the sed script as a file argument using <code>-f</code>:</p>\n<pre><span class=\"gp\">$</span> <span class=\"nb\">echo</span> <span class=\"s1\">'1,10!d'</span> &gt; head.sed\n<span class=\"gp\">$</span> sedparse -f head.sed\n<span class=\"go\">[</span>\n<span class=\"go\">    {</span>\n<span class=\"go\">        \"a1\": {</span>\n<span class=\"go\">            \"addr_number\": 1,</span>\n<span class=\"go\">            \"addr_type\": 3</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">        \"a2\": {</span>\n<span class=\"go\">            \"addr_number\": 10,</span>\n<span class=\"go\">            \"addr_type\": 3</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">        \"addr_bang\": true,</span>\n<span class=\"go\">        \"cmd\": \"d\",</span>\n<span class=\"go\">        \"line\": 1</span>\n<span class=\"go\">    }</span>\n<span class=\"go\">]</span>\n<span class=\"gp\">$</span> rm head.sed\n<span class=\"gp\">$</span>\n</pre>\n<p>Or even as text coming from STDIN when using the special <code>-</code> file:</p>\n<pre><span class=\"gp\">$</span> <span class=\"nb\">echo</span> <span class=\"s1\">'\\EXTREMITIES'</span> <span class=\"p\">|</span> sedparse -f -\n<span class=\"go\">[</span>\n<span class=\"go\">    {</span>\n<span class=\"go\">        \"a1\": {</span>\n<span class=\"go\">            \"addr_regex\": {</span>\n<span class=\"go\">                \"flags\": \"MI\",</span>\n<span class=\"go\">                \"pattern\": \"XTR\",</span>\n<span class=\"go\">                \"slash\": \"E\"</span>\n<span class=\"go\">            },</span>\n<span class=\"go\">            \"addr_type\": 2</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">        \"cmd\": \"T\",</span>\n<span class=\"go\">        \"line\": 1,</span>\n<span class=\"go\">        \"x\": {</span>\n<span class=\"go\">            \"label_name\": \"IES\"</span>\n<span class=\"go\">        }</span>\n<span class=\"go\">    }</span>\n<span class=\"go\">]</span>\n<span class=\"gp\">$</span>\n</pre>\n<h2>Usage as a Python module</h2>\n<p>Use <code>sedparse.compile_string()</code> to parse a string as a sed script. You must inform a list that will be appended in-place with the parsed commands.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">sedparse</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sedscript</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">... 11,/foo/ {</span>\n<span class=\"s2\">...     $!N</span>\n<span class=\"s2\">...     s/</span><span class=\"se\">\\\\</span><span class=\"s2\">n/-/gi</span>\n<span class=\"s2\">... }</span>\n<span class=\"s2\">... \"\"\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sedparse</span><span class=\"o\">.</span><span class=\"n\">compile_string</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"p\">,</span> <span class=\"n\">sedscript</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>Each sed command is represented by a <code>struct_sed_cmd</code> instance.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pprint</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"p\">[</span><span class=\"n\">struct_sed_cmd</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"o\">=</span><span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">),</span>\n <span class=\"n\">struct_sed_cmd</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"o\">=</span><span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">),</span>\n <span class=\"n\">struct_sed_cmd</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"o\">=</span><span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">),</span>\n <span class=\"n\">struct_sed_cmd</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"o\">=</span><span class=\"s1\">'}'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>You can <code>str()</code> each command, or any of its inner structs, to get their \"human readable\" representation.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">parsed</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'11,/foo/ {'</span><span class=\"p\">,</span> <span class=\"s1\">'$ !N'</span><span class=\"p\">,</span> <span class=\"s1\">'s/</span><span class=\"se\">\\\\</span><span class=\"s1\">n/-/gi'</span><span class=\"p\">,</span> <span class=\"s1\">'}'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"s1\">'11,/foo/ {'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">a1</span><span class=\"p\">)</span>\n<span class=\"s1\">'11'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">a2</span><span class=\"p\">)</span>\n<span class=\"s1\">'/foo/'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>Use <code>.to_dict()</code> to convert a command into a Python dictionary.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cmd_n</span> <span class=\"o\">=</span> <span class=\"n\">parsed</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">cmd_n</span><span class=\"p\">)</span>\n<span class=\"s1\">'$ !N'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">cmd_n</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">())</span>\n<span class=\"p\">{</span><span class=\"s1\">'a1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'addr_type'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">},</span> <span class=\"s1\">'addr_bang'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'cmd'</span><span class=\"p\">:</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'line'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">cmd_n</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">remove_empty</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n<span class=\"p\">{</span><span class=\"s1\">'a1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'addr_number'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'addr_regex'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'addr_step'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'addr_type'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">},</span>\n <span class=\"s1\">'a2'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n <span class=\"s1\">'addr_bang'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n <span class=\"s1\">'cmd'</span><span class=\"p\">:</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span>\n <span class=\"s1\">'line'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n <span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'cmd_subst'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'outf'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">},</span>\n                     <span class=\"s1\">'regx'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'flags'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">'pattern'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">'slash'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">},</span>\n                     <span class=\"s1\">'replacement'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">}},</span>\n       <span class=\"s1\">'cmd_txt'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"p\">[]},</span>\n       <span class=\"s1\">'comment'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n       <span class=\"s1\">'fname'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n       <span class=\"s1\">'int_arg'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n       <span class=\"s1\">'label_name'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">}}</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>Use <code>.to_json()</code> to convert a command into JSON.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cmd_n</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">())</span>\n<span class=\"p\">{</span>\n    <span class=\"s2\">\"a1\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"addr_type\"</span><span class=\"p\">:</span> <span class=\"mi\">7</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"addr_bang\"</span><span class=\"p\">:</span> <span class=\"n\">true</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"cmd\"</span><span class=\"p\">:</span> <span class=\"s2\">\"N\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"line\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>Have fun!</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">cmd</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">parsed</span><span class=\"p\">]</span>  <span class=\"c1\"># list of commands</span>\n<span class=\"p\">[</span><span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"s1\">'}'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">parsed</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">a1</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">]</span>  <span class=\"c1\"># commands with no address</span>\n<span class=\"p\">[</span><span class=\"s1\">'s/</span><span class=\"se\">\\\\</span><span class=\"s1\">n/-/gi'</span><span class=\"p\">,</span> <span class=\"s1\">'}'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">parsed</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">addr_bang</span><span class=\"p\">]</span>  <span class=\"c1\"># commands with bang !</span>\n<span class=\"p\">[</span><span class=\"s1\">'$ !N'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">comment</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">parsed</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"p\">]</span>  <span class=\"c1\"># extract all comments</span>\n<span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">fname</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">parsed</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">cmd</span> <span class=\"ow\">in</span> <span class=\"s2\">\"rRwW\"</span><span class=\"p\">]</span>  <span class=\"c1\"># list of read/write filenames</span>\n<span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n\n          </div>"}, "last_serial": 6191517, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "873d0dd56e2433638650ffbe0a1505b3", "sha256": "94568180bf6a91d30637de831fffc58797341e1ac2e6d542ba6d59f6faa9631d"}, "downloads": -1, "filename": "sedparse-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "873d0dd56e2433638650ffbe0a1505b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 30213, "upload_time": "2019-11-14T23:30:29", "upload_time_iso_8601": "2019-11-14T23:30:29.648468Z", "url": "https://files.pythonhosted.org/packages/66/b2/1c2db8015ea1b21f3e43f9fd275018863a48a549e749cfc1fddbbe9deae5/sedparse-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e322ab22093b17a712c26808877a3fe9", "sha256": "0c6e21d879c7facb7cee265082f924c49576a1bee362aea272abda6d51b600b5"}, "downloads": -1, "filename": "sedparse-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e322ab22093b17a712c26808877a3fe9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 18336, "upload_time": "2019-11-14T23:30:32", "upload_time_iso_8601": "2019-11-14T23:30:32.379045Z", "url": "https://files.pythonhosted.org/packages/e1/3c/56304e88a161aa88ba0e09cf547d180c9f3b0a2655b46b2557082dddb4fe/sedparse-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "37cacd26523f37a259e2eee459c72ace", "sha256": "d60d9bbb57b18aff67d037c7e1b7bb77a89b4a0e05f458889de3f5b223625aff"}, "downloads": -1, "filename": "sedparse-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "37cacd26523f37a259e2eee459c72ace", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 30202, "upload_time": "2019-11-15T00:42:26", "upload_time_iso_8601": "2019-11-15T00:42:26.298089Z", "url": "https://files.pythonhosted.org/packages/2b/15/8b1b271efc78b97eeeffc7c3ec8021d96391c55f3666087267b221a2ac90/sedparse-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "124ff0679a0e4a1c90edf1d3ea0a61e7", "sha256": "688cbfbce6fd1616cca26d5872c934d614a79f2ef2184662c689d4fbbad6dedd"}, "downloads": -1, "filename": "sedparse-0.1.1.tar.gz", "has_sig": false, "md5_digest": "124ff0679a0e4a1c90edf1d3ea0a61e7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 18327, "upload_time": "2019-11-15T00:42:28", "upload_time_iso_8601": "2019-11-15T00:42:28.130778Z", "url": "https://files.pythonhosted.org/packages/8f/13/5df308a700653a22e2081d008106839e820f81b2f1afe25ec842ab7c2a0a/sedparse-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "49a420993da435131c6f7be8e223189c", "sha256": "a1eee1de952fe5cdfc734eccc322255b12463b9f6f74aff01f537dbac0b94362"}, "downloads": -1, "filename": "sedparse-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "49a420993da435131c6f7be8e223189c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 30382, "upload_time": "2019-11-24T23:36:32", "upload_time_iso_8601": "2019-11-24T23:36:32.148215Z", "url": "https://files.pythonhosted.org/packages/22/f6/8c1aa5abfacae8ef5e4797bac78751124aa9f47f4aaeeebdaa1e91f21f6a/sedparse-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e3377cf82e7019b70808f7fb5ab553b", "sha256": "1ac98faedb52230dc077b2e0e2363268c06fc76f5e130ff9d976b05328884506"}, "downloads": -1, "filename": "sedparse-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6e3377cf82e7019b70808f7fb5ab553b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 18510, "upload_time": "2019-11-24T23:36:33", "upload_time_iso_8601": "2019-11-24T23:36:33.690972Z", "url": "https://files.pythonhosted.org/packages/97/4a/50ae1265c1a7d6e54e646330466b3c5f57fc8e4ee3bd8c69dd1ca303bade/sedparse-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49a420993da435131c6f7be8e223189c", "sha256": "a1eee1de952fe5cdfc734eccc322255b12463b9f6f74aff01f537dbac0b94362"}, "downloads": -1, "filename": "sedparse-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "49a420993da435131c6f7be8e223189c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 30382, "upload_time": "2019-11-24T23:36:32", "upload_time_iso_8601": "2019-11-24T23:36:32.148215Z", "url": "https://files.pythonhosted.org/packages/22/f6/8c1aa5abfacae8ef5e4797bac78751124aa9f47f4aaeeebdaa1e91f21f6a/sedparse-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e3377cf82e7019b70808f7fb5ab553b", "sha256": "1ac98faedb52230dc077b2e0e2363268c06fc76f5e130ff9d976b05328884506"}, "downloads": -1, "filename": "sedparse-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6e3377cf82e7019b70808f7fb5ab553b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 18510, "upload_time": "2019-11-24T23:36:33", "upload_time_iso_8601": "2019-11-24T23:36:33.690972Z", "url": "https://files.pythonhosted.org/packages/97/4a/50ae1265c1a7d6e54e646330466b3c5f57fc8e4ee3bd8c69dd1ca303bade/sedparse-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:51 2020"}