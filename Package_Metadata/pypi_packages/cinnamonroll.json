{"info": {"author": "Ibon", "author_email": "ibonescartin@protonmail.com", "bugtrack_url": null, "classifiers": [], "description": "![GitHub top language](https://img.shields.io/github/languages/top/ibonn/cinnamon)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/c9d6a9d4fe844f43899037994b7c309e)](https://www.codacy.com/manual/ibonn/cinnamon?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ibonn/cinnamon&amp;utm_campaign=Badge_Grade)\n[![Maintainability](https://api.codeclimate.com/v1/badges/4fe2a55cd752e8c350cc/maintainability)](https://codeclimate.com/github/ibonn/cinnamon/maintainability)\n[![PyPI download month](https://img.shields.io/pypi/dm/cinnamonroll.svg)](https://pypi.python.org/pypi/cinnamonroll/)\n[![PyPI download week](https://img.shields.io/pypi/dw/cinnamonroll.svg)](https://pypi.python.org/pypi/cinnamonroll/)\n[![PyPI download day](https://img.shields.io/pypi/dd/cinnamonroll.svg)](https://pypi.python.org/pypi/cinnamonroll/)\n\n![Cinnamon logo](/cinnamon.png)\n\n# Cinnamon\n\nWith cinnamon you can automatically generate the wrapper for many web APIs without coding.\nThink of it as an universal API wrapper. It also helps you to roll your own API without a major effort.\nDon't worry if you want a wrapper for a site that does not support Cinnamon, there is a list of recipes available\n[here](https://ibonn.github.io/cinnamon/) for some sites.\n## Table of contents\n\n  * [Introduction](#introduction)\n  * [Features](#features)\n  * [Installation](#installation)\n  * [The client](#the-client)\n  * [The server](#the-server)\n  * [Examples](#examples)\n\n## Introduction\n\nCinnamon lets you generate the wrapper for a web API without coding. Plain and simple.\nJust give Cinnamon the path to the recipe and it will automatically build the wrapper for\nyou.\n\nYou can also setup your API server and develop an API easily. This API will be compatible with\nCinnamon, so you dont have to worry about the wrapper.\n\n## Features\n\n  * Easily roll your own API\n  * Get the wrapper for your API without coding\n    * Supports OAuth2\n  * Get the wrapper for third party APIs easily\n\n## Installation\nTo install Cinnamon just run\n```\npip install cinnamonroll\n```\n\n## The client\n\nTo use the client, just import it and give it the path to the recipe.\nThen you will be able to use the API easily. It is as simple as this:\n\n``` python\nimport oauth2 as oauth\nfrom cinnamon import Cinnamon\n\n# Twitter requires OAuth\nconsumer = oauth.Consumer(key=CONSUMER_KEY, secret=CONSUMER_SECRET)\ntoken = oauth.Token(key=ACCESS_KEY, secret=ACCESS_SECRET)\nclient = oauth.Client(consumer, token)\n\n# Get the Twitter wrapper\nc = Cinnamon('https://ibonn.github.io/cinnamon/recipes/twitter.json')\ntwitter_wrapper = c.get_roll(client)\n\n# Create a tweet\ntwitter_wrapper.tweet(status=\"This tweet was created using Cinnamon\")\n```\n\n### Supported languages\n\nThe client is available for the following languages:\n\n  * Python\n\nFuture releases will support:\n\n  * .NET (C#/VB.NET)\n\n## The server\n\nUsing the server to deploy your API is as easy as using the client. You just\nhave to use decorators around the functions you want to be accessible and Cinnamon\nwill handle everything else\n\n``` python\nfrom cinnamon import CinnamonAPI\n\nc = CinnamonAPI()\n# Add a method\n@c.add_method(\"/greet/[name]/[age]\")\ndef say_hello(name:str, age:int=9) -> str:\n    \"\"\" \n    Greet the user. The name must be a string and the age an integer.\n    Age is optional, default value is 9\n    \"\"\"\n    return 'Hello {}! I see you are {} years old...'.format(name, age)\n\n# Add a constant\nc.add_constant('version', 'Beta')\n\n# Run the server\nc.run('/recipe')\n```\n\nNow you can use the client as follows\n\n``` python\nfrom cinnamon import Cinnamon\nc = Cinnamon('http://localhost:4380/recipe')\napi = c.get_roll()\nprint(api.say_hello(name='John'))\n```\n\nwhich will print on the client screen:\n\n    Hello John! I see you are 9 years old...\n\n## TODO\n\n  * Add documentation\n  * Start developing the .NET client\n  * Remove redundant code\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/cinnamonroll/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ibonn/cinnamon", "keywords": "API,wrapper,WSGI", "license": "GPL-3.0", "maintainer": "", "maintainer_email": "", "name": "cinnamonroll", "package_url": "https://pypi.org/project/cinnamonroll/", "platform": "", "project_url": "https://pypi.org/project/cinnamonroll/", "project_urls": {"Download": "https://pypi.org/project/cinnamonroll/", "Homepage": "https://github.com/ibonn/cinnamon"}, "release_url": "https://pypi.org/project/cinnamonroll/0.3/", "requires_dist": ["oauth2", "requests"], "requires_python": "", "summary": "Roll your own API and API wrappers for any language easily with this universal API wrapper", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"GitHub top language\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/171c724042152284619449f780fadd234b8a5499/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c616e6775616765732f746f702f69626f6e6e2f63696e6e616d6f6e\">\n<a href=\"https://www.codacy.com/manual/ibonn/cinnamon?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ibonn/cinnamon&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c0a33c6252f1aa8b3831e4f66f3a0bd0ff848d9/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6339643661396434666538343466343338393930333739393462376333303965\"></a>\n<a href=\"https://codeclimate.com/github/ibonn/cinnamon/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a05dc5c29c3d79b465b2e0330f06d89781a4fa9f/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f34666532613535636437353265386333353063632f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://pypi.python.org/pypi/cinnamonroll/\" rel=\"nofollow\"><img alt=\"PyPI download month\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d154f131d147e640bad8df5dd529f84843cef58/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f63696e6e616d6f6e726f6c6c2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cinnamonroll/\" rel=\"nofollow\"><img alt=\"PyPI download week\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19d7d00f553e70349d37122656fd3e7fe4dc6056/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64772f63696e6e616d6f6e726f6c6c2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cinnamonroll/\" rel=\"nofollow\"><img alt=\"PyPI download day\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad136afc13e6b3ed2eaf66f19879fc4d738b1aa7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f63696e6e616d6f6e726f6c6c2e737667\"></a></p>\n<p><img alt=\"Cinnamon logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b94d8f9543fd5b96a058a9c77e15e5556f062c54/2f63696e6e616d6f6e2e706e67\"></p>\n<h1>Cinnamon</h1>\n<p>With cinnamon you can automatically generate the wrapper for many web APIs without coding.\nThink of it as an universal API wrapper. It also helps you to roll your own API without a major effort.\nDon't worry if you want a wrapper for a site that does not support Cinnamon, there is a list of recipes available\n<a href=\"https://ibonn.github.io/cinnamon/\" rel=\"nofollow\">here</a> for some sites.</p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#introduction\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#the-client\" rel=\"nofollow\">The client</a></li>\n<li><a href=\"#the-server\" rel=\"nofollow\">The server</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n</ul>\n<h2>Introduction</h2>\n<p>Cinnamon lets you generate the wrapper for a web API without coding. Plain and simple.\nJust give Cinnamon the path to the recipe and it will automatically build the wrapper for\nyou.</p>\n<p>You can also setup your API server and develop an API easily. This API will be compatible with\nCinnamon, so you dont have to worry about the wrapper.</p>\n<h2>Features</h2>\n<ul>\n<li>Easily roll your own API</li>\n<li>Get the wrapper for your API without coding\n<ul>\n<li>Supports OAuth2</li>\n</ul>\n</li>\n<li>Get the wrapper for third party APIs easily</li>\n</ul>\n<h2>Installation</h2>\n<p>To install Cinnamon just run</p>\n<pre><code>pip install cinnamonroll\n</code></pre>\n<h2>The client</h2>\n<p>To use the client, just import it and give it the path to the recipe.\nThen you will be able to use the API easily. It is as simple as this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">oauth2</span> <span class=\"k\">as</span> <span class=\"nn\">oauth</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cinnamon</span> <span class=\"kn\">import</span> <span class=\"n\">Cinnamon</span>\n\n<span class=\"c1\"># Twitter requires OAuth</span>\n<span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"n\">oauth</span><span class=\"o\">.</span><span class=\"n\">Consumer</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">CONSUMER_KEY</span><span class=\"p\">,</span> <span class=\"n\">secret</span><span class=\"o\">=</span><span class=\"n\">CONSUMER_SECRET</span><span class=\"p\">)</span>\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">oauth</span><span class=\"o\">.</span><span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">ACCESS_KEY</span><span class=\"p\">,</span> <span class=\"n\">secret</span><span class=\"o\">=</span><span class=\"n\">ACCESS_SECRET</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">oauth</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the Twitter wrapper</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Cinnamon</span><span class=\"p\">(</span><span class=\"s1\">'https://ibonn.github.io/cinnamon/recipes/twitter.json'</span><span class=\"p\">)</span>\n<span class=\"n\">twitter_wrapper</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get_roll</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a tweet</span>\n<span class=\"n\">twitter_wrapper</span><span class=\"o\">.</span><span class=\"n\">tweet</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">\"This tweet was created using Cinnamon\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Supported languages</h3>\n<p>The client is available for the following languages:</p>\n<ul>\n<li>Python</li>\n</ul>\n<p>Future releases will support:</p>\n<ul>\n<li>.NET (C#/VB.NET)</li>\n</ul>\n<h2>The server</h2>\n<p>Using the server to deploy your API is as easy as using the client. You just\nhave to use decorators around the functions you want to be accessible and Cinnamon\nwill handle everything else</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cinnamon</span> <span class=\"kn\">import</span> <span class=\"n\">CinnamonAPI</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">CinnamonAPI</span><span class=\"p\">()</span>\n<span class=\"c1\"># Add a method</span>\n<span class=\"nd\">@c</span><span class=\"o\">.</span><span class=\"n\">add_method</span><span class=\"p\">(</span><span class=\"s2\">\"/greet/[name]/[age]\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\" </span>\n<span class=\"sd\">    Greet the user. The name must be a string and the age an integer.</span>\n<span class=\"sd\">    Age is optional, default value is 9</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Hello </span><span class=\"si\">{}</span><span class=\"s1\">! I see you are </span><span class=\"si\">{}</span><span class=\"s1\"> years old...'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add a constant</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">add_constant</span><span class=\"p\">(</span><span class=\"s1\">'version'</span><span class=\"p\">,</span> <span class=\"s1\">'Beta'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run the server</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'/recipe'</span><span class=\"p\">)</span>\n</pre>\n<p>Now you can use the client as follows</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cinnamon</span> <span class=\"kn\">import</span> <span class=\"n\">Cinnamon</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Cinnamon</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:4380/recipe'</span><span class=\"p\">)</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get_roll</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">say_hello</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">))</span>\n</pre>\n<p>which will print on the client screen:</p>\n<pre><code>Hello John! I see you are 9 years old...\n</code></pre>\n<h2>TODO</h2>\n<ul>\n<li>Add documentation</li>\n<li>Start developing the .NET client</li>\n<li>Remove redundant code</li>\n</ul>\n\n          </div>"}, "last_serial": 6068180, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "b6503fe68d5bbc3f627d350459164e2d", "sha256": "3527a103529f658b0087602d38156275fafb8c4b69a176790545aa083dd13987"}, "downloads": -1, "filename": "cinnamonroll-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b6503fe68d5bbc3f627d350459164e2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21108, "upload_time": "2019-11-02T13:52:41", "upload_time_iso_8601": "2019-11-02T13:52:41.161588Z", "url": "https://files.pythonhosted.org/packages/25/5b/0dda4c518d58b93d4128ab73af13a813b0c627cce2efbe49f12a91b14d76/cinnamonroll-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b18c2c4273f129d27425d8bf0cffedf", "sha256": "0d16ec966666f1c84a4d03ee7749199bdb3a2dd5b1f8a46e95af5fb865b821c9"}, "downloads": -1, "filename": "cinnamonroll-0.3.tar.gz", "has_sig": false, "md5_digest": "5b18c2c4273f129d27425d8bf0cffedf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8198, "upload_time": "2019-11-02T13:52:42", "upload_time_iso_8601": "2019-11-02T13:52:42.865954Z", "url": "https://files.pythonhosted.org/packages/53/ba/494a78d700401dfbee68763a6ac255046dbbb3ed8a481e7e695a3a2c2b24/cinnamonroll-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6503fe68d5bbc3f627d350459164e2d", "sha256": "3527a103529f658b0087602d38156275fafb8c4b69a176790545aa083dd13987"}, "downloads": -1, "filename": "cinnamonroll-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b6503fe68d5bbc3f627d350459164e2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21108, "upload_time": "2019-11-02T13:52:41", "upload_time_iso_8601": "2019-11-02T13:52:41.161588Z", "url": "https://files.pythonhosted.org/packages/25/5b/0dda4c518d58b93d4128ab73af13a813b0c627cce2efbe49f12a91b14d76/cinnamonroll-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b18c2c4273f129d27425d8bf0cffedf", "sha256": "0d16ec966666f1c84a4d03ee7749199bdb3a2dd5b1f8a46e95af5fb865b821c9"}, "downloads": -1, "filename": "cinnamonroll-0.3.tar.gz", "has_sig": false, "md5_digest": "5b18c2c4273f129d27425d8bf0cffedf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8198, "upload_time": "2019-11-02T13:52:42", "upload_time_iso_8601": "2019-11-02T13:52:42.865954Z", "url": "https://files.pythonhosted.org/packages/53/ba/494a78d700401dfbee68763a6ac255046dbbb3ed8a481e7e695a3a2c2b24/cinnamonroll-0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:22 2020"}