{"info": {"author": "Vincent Sarago", "author_email": "vincent@developmentseed.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: GIS"], "description": "# rio-cogeo\n\nCloud Optimized GeoTIFF (COG) creation and validation plugin for Rasterio\n\n\n[![Packaging status](https://badge.fury.io/py/rio-cogeo.svg)](https://badge.fury.io/py/rio-cogeo)\n[![CircleCI](https://circleci.com/gh/cogeotiff/rio-cogeo.svg?style=svg)](https://circleci.com/gh/cogeotiff/rio-cogeo)\n[![codecov](https://codecov.io/gh/cogeotiff/rio-cogeo/branch/master/graph/badge.svg)](https://codecov.io/gh/cogeotiff/rio-cogeo)\n\n## Cloud Optimized GeoTIFF\n\nThis plugin aim to facilitate the creation and validation of Cloud Optimized\nGeoTIFF (COG or COGEO). While it respects the\n[COG specifications](https://github.com/cogeotiff/cog-spec/blob/master/spec.md), this plugin also\nenforce several features:\n\n- **Internal overviews** (User can remove overview with option `--overview-level 0`)\n- **Internal tiles** (default profiles have 512x512 internal tiles)\n\n**Important**: Starting from GDAL 3.1 a new COG generator driver will be added ([doc](https://gdal.org/drivers/raster/cog.html), [discussion](https://lists.osgeo.org/pipermail/gdal-dev/2019-May/050169.html)) and will make `rio-cogeo` kinda obsolete.\n\n## Install\n\n```bash\n$ pip install -U pip\n$ pip install rio-cogeo\n```\n\nOr install from source:\n\n```\n$ git clone https://github.com/cogeotiff/rio-cogeo.git\n$ cd rio-cogeo\n$ pip install -U pip\n$ pip install -e .\n```\n\n## CLI\n\n\n```\n$ rio cogeo --help\n  Usage: rio cogeo [OPTIONS] COMMAND [ARGS]...\n\n  Rasterio cogeo subcommands.\n\n  Options:\n    --help  Show this message and exit.\n\n  Commands:\n    create    Create COGEO\n    validate  Validate COGEO\n```\n\n- Create a Cloud Optimized Geotiff.\n\n```\n$ rio cogeo create --help\n  Usage: rio cogeo create [OPTIONS] INPUT OUTPUT\n\n    Create Cloud Optimized Geotiff.\n\n  Options:\n    -b, --bidx BIDX                  Band indexes to copy.\n    -p, --cog-profile [jpeg|webp|zstd|lzw|deflate|packbits|lzma|lerc|lerc_deflate|lerc_zstd|raw]\n                                     CloudOptimized GeoTIFF profile (default: deflate).\n    --nodata NUMBER|nan              Set nodata masking values for input dataset.\n    --add-mask                       Force output dataset creation with an internal mask (convert alpha band or nodata to mask).\n    -t, --dtype [ubyte|uint8|uint16|int16|uint32|int32|float32|float64] Output data type.\n    --overview-level INTEGER         Overview level (if not provided, appropriate overview level will be selected until the\n                                     smallest overview is smaller than the value of the internal blocksize)\n    --overview-resampling [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|gauss]\n                                     Overview creation resampling algorithm (default: nearest).\n    --overview-blocksize TEXT        Overview's internal tile size (default defined by GDAL_TIFF_OVR_BLOCKSIZE env or 128)\n    -w, --web-optimized              Create COGEO optimized for Web.\n    --latitude-adjustment / --global-maxzoom\n                                     Use dataset native mercator resolution for MAX_ZOOM calculation (linked to dataset\n                                     center latitude, default) or ensure MAX_ZOOM equality for multiple dataset accross latitudes.\n    -r, --resampling [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|gauss]\n                                     Resampling algorithm (default: nearest). Will only be applied with the `--web-optimized` option.\n    --in-memory / --no-in-memory     Force processing raster in memory / not in memory (default: process in memory if smaller than 120 million pixels)\n    --allow-intermediate-compression Allow intermediate file compression to reduce memory/disk footprint.\n    --forward-band-tags              Forward band tags to output bands.\n    --threads THREADS                Number of worker threads for multi-threaded compression (default: ALL_CPUS)\n    --co, --profile NAME=VALUE       Driver specific creation options. See the documentation for the selected output driver for more information.\n    -q, --quiet                      Remove progressbar and other non-error output.\n    --help                           Show this message and exit.\n```\n\n- Check if a Cloud Optimized Geotiff is valid.\n\n```\n$ rio cogeo validate --help\nUsage: rio cogeo validate [OPTIONS] INPUT\n\n  Validate Cloud Optimized Geotiff.\n\nOptions:\n  --strict  Treat warnings as errors.\n  --help    Show this message and exit.\n```\n\nThe `strict` options will treat warnings (e.g missing overviews) as errors.\n\n### Examples\n\n```bash\n# Create a COGEO with DEFLATE compression (Using default `Deflate` profile)\n$ rio cogeo create mydataset.tif mydataset_jpeg.tif\n\n# Validate COGEO\n$ rio cogeo validate mydataset_jpeg.tif\n\n# Create a COGEO with JPEG profile and the first 3 bands of the data and add internal mask\n$ rio cogeo create mydataset.tif mydataset_jpeg.tif -b 1,2,3 --add-mask --cog-profile jpeg\n```\n\n## Default COGEO profiles\n\nDefault profiles are tiled with 512x512 blocksizes.\n\n**JPEG**\n\n- JPEG compression\n- PIXEL interleave\n- YCbCr (3 bands) colorspace or MINISBLACK (1 band)\n- limited to uint8 datatype and 3 bands data\n\n**WEBP**\n\n- WEBP compression\n- PIXEL interleave\n- limited to uint8 datatype and 3 or 4 bands data\n- Non-Standard, might not be supported by software not build against GDAL+internal libtiff + libwebp\n- Available for GDAL>=2.4.0\n\n**ZSTD**\n\n- ZSTD compression\n- PIXEL interleave\n- Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd\n- Available for GDAL>=2.3.0\n\n*Note* in Nov 2018, there was a change in libtiff's ZSTD tags which create incompatibility for old ZSTD compressed GeoTIFF [(link)](https://lists.osgeo.org/pipermail/gdal-dev/2018-November/049289.html)\n\n**LZW**\n\n- LZW compression\n- PIXEL interleave\n\n**DEFLATE**\n\n- DEFLATE compression\n- PIXEL interleave\n\n**PACKBITS**\n\n- PACKBITS compression\n- PIXEL interleave\n\n**LZMA**\n\n- LZMA compression\n- PIXEL interleave\n\n**LERC**\n\n- LERC compression\n- PIXEL interleave\n- Default MAX_Z_ERROR=0 (lossless)\n- Non-Standard, might not be supported by software not build against GDAL + internal libtiff\n- Available for GDAL>=2.4.0\n\n**LERC_DEFLATE**\n\n- LERC_DEFLATE compression\n- PIXEL interleave\n- Default MAX_Z_ERROR=0 (lossless)\n- Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd\n- Available for GDAL>=2.4.0\n\n**LERC_ZSTD**\n\n- LERC_ZSTD compression\n- PIXEL interleave\n- Default MAX_Z_ERROR=0 (lossless)\n- Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd\n- Available for GDAL>=2.4.0\n\n**RAW**\n\n- NO compression\n- PIXEL interleave\n\n**Profiles can be extended by providing '--co' option in command line**\n\n\n```bash\n# Create a COGEO without compression and with 1024x1024 block size and 256 overview blocksize\n$ rio cogeo create mydataset.tif mydataset_raw.tif --co BLOCKXSIZE=1024 --co BLOCKYSIZE=1024 --cog-profile raw --overview-blocksize 256\n```\n\nSee https://gdal.org/drivers/raster/gtiff.html#creation-options for full details of creation options.\n\n## API\n\nRio-cogeo can also be integrated directly in your custom script. See [rio_cogeo.cogeo.cog_translate](https://github.com/cogeotiff/rio-cogeo/blob/master/rio_cogeo/cogeo.py#L53-L108) function.\n\ne.g:\n\n```python\nfrom rio_cogeo.cogeo import cog_translate\n\ndef _translate(src_path, dst_path, profile=\"webp\", profile_options={}, **options):\n    \"\"\"Convert image to COG.\"\"\"\n    # Format creation option (see gdalwarp `-co` option)\n    output_profile = cog_profiles.get(profile)\n    output_profile.update(dict(BIGTIFF=\"IF_SAFER\"))\n    output_profile.update(profile_options)\n\n    # Dataset Open option (see gdalwarp `-oo` option)\n    config = dict(\n        GDAL_NUM_THREADS=\"ALL_CPUS\",\n        GDAL_TIFF_INTERNAL_MASK=True,\n        GDAL_TIFF_OVR_BLOCKSIZE=\"128\",\n    )\n\n    cog_translate(\n        src_path,\n        dst_path,\n        output_profile,\n        config=config,\n        in_memory=False,\n        quiet=True,\n        **options,\n    )\n    return True\n```\nref: https://github.com/developmentseed/cogeo-watchbot/blob/81df27470dd2eb7032d512c35af853b006d1c035/app/translator.py#L34-L56\n\n\n### Using the API with in MemoryFile\n\n1. Create COG from numpy array\n```python\nimport numpy\n\nimport mercantile\n\nfrom rasterio.io import MemoryFile\nfrom rasterio.transform import from_bounds\n\nfrom rio_cogeo.cogeo import cog_translate\nfrom rio_cogeo.profiles import cog_profiles\n\n# Create GeoTIFF profile\nbounds = mercantile.bounds(mercantile.Tile(0,0,0))\nsrc_transform = from_bounds(*bounds, 1024 1024)\n\nsrc_profile = dict(\n    driver=\"GTiff\",\n    dtype=\"float32\",\n    count=3,\n    height=1024,\n    width=1024,\n    crs=\"epsg:4326\",\n    transform=dst_transform,\n)\n\nimg_array = tile = numpy.random.rand(3, 1024, 1024)\n\nwith MemoryFile() as memfile:\n    with memfile.open(**src_profile) as mem:\n        # Populate the input file with numpy array\n        mem.write(img_array)\n        \n        dst_profile = cog_profiles.get(\"deflate\")        \n        cog_translate(\n            mem,\n            \"my-output-cog.tif\",\n            dst_profile,\n            in_memory=True,\n            quiet=True,\n        )\n```\n2. Create output COG in Memory\n\n```python\nfrom rasterio.io import MemoryFile\n\nfrom rio_cogeo.cogeo import cog_translate\nfrom rio_cogeo.profiles import cog_profiles\n\nfrom boto3.session import Session as boto3_session\n\ndst_profile = cog_profiles.get(\"deflate\")\n\nwith MemoryFile() as mem_dst:\n    # Important, we pass `mem_dst.name` as output dataset path\n    cog_translate(\"my-input-file.tif\", mem_dst.name, profile, in_memory=True)\n\n    # You can then use the memoryfile to do something else like\n    # upload to AWS S3\n    client = boto3_session.client(\"s3\")\n    client.upload_fileobj(mem_dst, \"my-bucket\", \"my-key\")\n```\n\n\n## Web-Optimized COG\n\nrio-cogeo provide a *--web-optimized* option which aims to create a web-tiling friendly COG.\n\nOutput dataset features:\n\n- bounds and internal tiles aligned with web-mercator grid.\n- raw data and overviews resolution match mercator zoom level resolution.\n\n**Important**\n\nBecause the mercator projection does not respect the distance, when working with\nmultiple images covering different latitudes, you may want to use the *--global-maxzoom* option\nto create output dataset having the same MAX_ZOOM (raw data resolution).\n\nBecause it will certainly create a larger file, a nodata value or alpha band should\nbe present in the input dataset. If not the original data will be surrounded by black (0) data.\n\n\n## Internal tile size\n\nBy default rio cogeo will create a dataset with 512x512 internal tile size.\nThis can be updated by passing `--co BLOCKXSIZE=64 --co BLOCKYSIZE=64` options.\n\n**Web tiling optimization**\n\nif the input dataset is aligned to web mercator grid, the internal tile size\nshould be equal to the web map tile size (256 or 512px). Dataset should be compressed.\n\nif the input dataset is not aligned to web mercator grid, the tiler will need\nto fetch multiple internal tiles. Because GDAL can merge range request, using\nsmall internal tiles (e.g 128) will reduce the number of byte transfered and\nminimized the useless bytes transfered.\n\n\nGDAL configuration to merge consecutive range requests\n\n```\nGDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES\nGDAL_HTTP_MULTIPLEX=YES\nGDAL_HTTP_VERSION=2\n```\n\n## Overview levels\n\nBy default rio cogeo will calculate the optimal overview level based on dataset\nsize and internal tile size (overview should not be smaller than internal tile\nsize (e.g 512px). Overview level will be translated to decimation level of\npower of two:\n\n```python\noverview_level = 3\noverviews = [2 ** j for j in range(1, overview_level + 1)]\nprint(overviews)\n[2, 4, 8]\n```\n\n## GDAL Version\n\nIt is recommanded to use GDAL > 2.3.2. Previous version might not be able to\ncreate proper COGs (ref: https://github.com/OSGeo/gdal/issues/754).\n\n\nMore info in https://github.com/cogeotiff/rio-cogeo/issues/55\n\n\n## Nodata, Alpha and Mask\n\nBy default rio-cogeo will forward any nodata value or alpha channel to the\noutput COG.\n\nIf your dataset type is **Byte** or **Unit16**, you could use internal bit mask\n(with the `--add-mask` option) to replace the Nodata value or Alpha band in\noutput dataset (supported by most GDAL based backends).\n\nNote: when adding a `mask` with an input dataset having an alpha band you'll\nneed to use the `bidx` options to remove it from the output dataset.\n\n```bash\n# Replace the alpha band by an internal mask\n$ rio cogeo mydataset_withalpha.tif mydataset_withmask.tif --cog-profile raw --add-mask --bidx 1,2,3\n```\n\n**Important**\n\nUsing internal nodata value with lossy compression (`webp`, `jpeg`) is not\nrecommanded. Please use internal masking (or alpha band if using webp).\n\n## Contribution & Development\n\nThe rio-cogeo project was begun at Mapbox and has been transferred to the\nCogeoTIFF organization in January 2019.\n\nIssues and pull requests are more than welcome.\n\n**dev install**\n\n```bash\n$ git clone https://github.com/cogeotiff/rio-cogeo.git\n$ cd rio-cogeo\n$ pip install -e .[dev]\n```\n\n**Python3.6 only**\n\nThis repo is set to use `pre-commit` to run *flake8*, *pydocstring* and *black*\n(\"uncompromising Python code formatter\") when commiting new code.\n\n```bash\n$ pre-commit install\n```\n\n## Extras\n\nBlog post on good and bad COG formats: https://medium.com/@_VincentS_/do-you-really-want-people-using-your-data-ec94cd94dc3f\n\nCheckout [rio-glui](https://github.com/mapbox/rio-glui/) or [rio-viz](https://github.com/developmentseed/rio-viz) rasterio plugins to explore COG locally in your web browser.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cogeotiff/rio-cogeo", "keywords": "COGEO CloudOptimized Geotiff rasterio", "license": "BSD-3", "maintainer": "", "maintainer_email": "", "name": "rio-cogeo", "package_url": "https://pypi.org/project/rio-cogeo/", "platform": "", "project_url": "https://pypi.org/project/rio-cogeo/", "project_urls": {"Homepage": "https://github.com/cogeotiff/rio-cogeo"}, "release_url": "https://pypi.org/project/rio-cogeo/1.1.10/", "requires_dist": null, "requires_python": "", "summary": "CloudOptimized GeoTIFF (COGEO) creation plugin for rasterio", "version": "1.1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>rio-cogeo</h1>\n<p>Cloud Optimized GeoTIFF (COG) creation and validation plugin for Rasterio</p>\n<p><a href=\"https://badge.fury.io/py/rio-cogeo\" rel=\"nofollow\"><img alt=\"Packaging status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36b6d52a90d4d44fd0244cfab2df86394c8bbf05/68747470733a2f2f62616467652e667572792e696f2f70792f72696f2d636f67656f2e737667\"></a>\n<a href=\"https://circleci.com/gh/cogeotiff/rio-cogeo\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a211af2854a983d94c2217422bbfc7b6d82adb03/68747470733a2f2f636972636c6563692e636f6d2f67682f636f67656f746966662f72696f2d636f67656f2e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/cogeotiff/rio-cogeo\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1775a2adf9ec5c4f54772128cf2da0dc9147780d/68747470733a2f2f636f6465636f762e696f2f67682f636f67656f746966662f72696f2d636f67656f2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h2>Cloud Optimized GeoTIFF</h2>\n<p>This plugin aim to facilitate the creation and validation of Cloud Optimized\nGeoTIFF (COG or COGEO). While it respects the\n<a href=\"https://github.com/cogeotiff/cog-spec/blob/master/spec.md\" rel=\"nofollow\">COG specifications</a>, this plugin also\nenforce several features:</p>\n<ul>\n<li><strong>Internal overviews</strong> (User can remove overview with option <code>--overview-level 0</code>)</li>\n<li><strong>Internal tiles</strong> (default profiles have 512x512 internal tiles)</li>\n</ul>\n<p><strong>Important</strong>: Starting from GDAL 3.1 a new COG generator driver will be added (<a href=\"https://gdal.org/drivers/raster/cog.html\" rel=\"nofollow\">doc</a>, <a href=\"https://lists.osgeo.org/pipermail/gdal-dev/2019-May/050169.html\" rel=\"nofollow\">discussion</a>) and will make <code>rio-cogeo</code> kinda obsolete.</p>\n<h2>Install</h2>\n<pre>$ pip install -U pip\n$ pip install rio-cogeo\n</pre>\n<p>Or install from source:</p>\n<pre><code>$ git clone https://github.com/cogeotiff/rio-cogeo.git\n$ cd rio-cogeo\n$ pip install -U pip\n$ pip install -e .\n</code></pre>\n<h2>CLI</h2>\n<pre><code>$ rio cogeo --help\n  Usage: rio cogeo [OPTIONS] COMMAND [ARGS]...\n\n  Rasterio cogeo subcommands.\n\n  Options:\n    --help  Show this message and exit.\n\n  Commands:\n    create    Create COGEO\n    validate  Validate COGEO\n</code></pre>\n<ul>\n<li>Create a Cloud Optimized Geotiff.</li>\n</ul>\n<pre><code>$ rio cogeo create --help\n  Usage: rio cogeo create [OPTIONS] INPUT OUTPUT\n\n    Create Cloud Optimized Geotiff.\n\n  Options:\n    -b, --bidx BIDX                  Band indexes to copy.\n    -p, --cog-profile [jpeg|webp|zstd|lzw|deflate|packbits|lzma|lerc|lerc_deflate|lerc_zstd|raw]\n                                     CloudOptimized GeoTIFF profile (default: deflate).\n    --nodata NUMBER|nan              Set nodata masking values for input dataset.\n    --add-mask                       Force output dataset creation with an internal mask (convert alpha band or nodata to mask).\n    -t, --dtype [ubyte|uint8|uint16|int16|uint32|int32|float32|float64] Output data type.\n    --overview-level INTEGER         Overview level (if not provided, appropriate overview level will be selected until the\n                                     smallest overview is smaller than the value of the internal blocksize)\n    --overview-resampling [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|gauss]\n                                     Overview creation resampling algorithm (default: nearest).\n    --overview-blocksize TEXT        Overview's internal tile size (default defined by GDAL_TIFF_OVR_BLOCKSIZE env or 128)\n    -w, --web-optimized              Create COGEO optimized for Web.\n    --latitude-adjustment / --global-maxzoom\n                                     Use dataset native mercator resolution for MAX_ZOOM calculation (linked to dataset\n                                     center latitude, default) or ensure MAX_ZOOM equality for multiple dataset accross latitudes.\n    -r, --resampling [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|gauss]\n                                     Resampling algorithm (default: nearest). Will only be applied with the `--web-optimized` option.\n    --in-memory / --no-in-memory     Force processing raster in memory / not in memory (default: process in memory if smaller than 120 million pixels)\n    --allow-intermediate-compression Allow intermediate file compression to reduce memory/disk footprint.\n    --forward-band-tags              Forward band tags to output bands.\n    --threads THREADS                Number of worker threads for multi-threaded compression (default: ALL_CPUS)\n    --co, --profile NAME=VALUE       Driver specific creation options. See the documentation for the selected output driver for more information.\n    -q, --quiet                      Remove progressbar and other non-error output.\n    --help                           Show this message and exit.\n</code></pre>\n<ul>\n<li>Check if a Cloud Optimized Geotiff is valid.</li>\n</ul>\n<pre><code>$ rio cogeo validate --help\nUsage: rio cogeo validate [OPTIONS] INPUT\n\n  Validate Cloud Optimized Geotiff.\n\nOptions:\n  --strict  Treat warnings as errors.\n  --help    Show this message and exit.\n</code></pre>\n<p>The <code>strict</code> options will treat warnings (e.g missing overviews) as errors.</p>\n<h3>Examples</h3>\n<pre><span class=\"c1\"># Create a COGEO with DEFLATE compression (Using default `Deflate` profile)</span>\n$ rio cogeo create mydataset.tif mydataset_jpeg.tif\n\n<span class=\"c1\"># Validate COGEO</span>\n$ rio cogeo validate mydataset_jpeg.tif\n\n<span class=\"c1\"># Create a COGEO with JPEG profile and the first 3 bands of the data and add internal mask</span>\n$ rio cogeo create mydataset.tif mydataset_jpeg.tif -b <span class=\"m\">1</span>,2,3 --add-mask --cog-profile jpeg\n</pre>\n<h2>Default COGEO profiles</h2>\n<p>Default profiles are tiled with 512x512 blocksizes.</p>\n<p><strong>JPEG</strong></p>\n<ul>\n<li>JPEG compression</li>\n<li>PIXEL interleave</li>\n<li>YCbCr (3 bands) colorspace or MINISBLACK (1 band)</li>\n<li>limited to uint8 datatype and 3 bands data</li>\n</ul>\n<p><strong>WEBP</strong></p>\n<ul>\n<li>WEBP compression</li>\n<li>PIXEL interleave</li>\n<li>limited to uint8 datatype and 3 or 4 bands data</li>\n<li>Non-Standard, might not be supported by software not build against GDAL+internal libtiff + libwebp</li>\n<li>Available for GDAL&gt;=2.4.0</li>\n</ul>\n<p><strong>ZSTD</strong></p>\n<ul>\n<li>ZSTD compression</li>\n<li>PIXEL interleave</li>\n<li>Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd</li>\n<li>Available for GDAL&gt;=2.3.0</li>\n</ul>\n<p><em>Note</em> in Nov 2018, there was a change in libtiff's ZSTD tags which create incompatibility for old ZSTD compressed GeoTIFF <a href=\"https://lists.osgeo.org/pipermail/gdal-dev/2018-November/049289.html\" rel=\"nofollow\">(link)</a></p>\n<p><strong>LZW</strong></p>\n<ul>\n<li>LZW compression</li>\n<li>PIXEL interleave</li>\n</ul>\n<p><strong>DEFLATE</strong></p>\n<ul>\n<li>DEFLATE compression</li>\n<li>PIXEL interleave</li>\n</ul>\n<p><strong>PACKBITS</strong></p>\n<ul>\n<li>PACKBITS compression</li>\n<li>PIXEL interleave</li>\n</ul>\n<p><strong>LZMA</strong></p>\n<ul>\n<li>LZMA compression</li>\n<li>PIXEL interleave</li>\n</ul>\n<p><strong>LERC</strong></p>\n<ul>\n<li>LERC compression</li>\n<li>PIXEL interleave</li>\n<li>Default MAX_Z_ERROR=0 (lossless)</li>\n<li>Non-Standard, might not be supported by software not build against GDAL + internal libtiff</li>\n<li>Available for GDAL&gt;=2.4.0</li>\n</ul>\n<p><strong>LERC_DEFLATE</strong></p>\n<ul>\n<li>LERC_DEFLATE compression</li>\n<li>PIXEL interleave</li>\n<li>Default MAX_Z_ERROR=0 (lossless)</li>\n<li>Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd</li>\n<li>Available for GDAL&gt;=2.4.0</li>\n</ul>\n<p><strong>LERC_ZSTD</strong></p>\n<ul>\n<li>LERC_ZSTD compression</li>\n<li>PIXEL interleave</li>\n<li>Default MAX_Z_ERROR=0 (lossless)</li>\n<li>Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd</li>\n<li>Available for GDAL&gt;=2.4.0</li>\n</ul>\n<p><strong>RAW</strong></p>\n<ul>\n<li>NO compression</li>\n<li>PIXEL interleave</li>\n</ul>\n<p><strong>Profiles can be extended by providing '--co' option in command line</strong></p>\n<pre><span class=\"c1\"># Create a COGEO without compression and with 1024x1024 block size and 256 overview blocksize</span>\n$ rio cogeo create mydataset.tif mydataset_raw.tif --co <span class=\"nv\">BLOCKXSIZE</span><span class=\"o\">=</span><span class=\"m\">1024</span> --co <span class=\"nv\">BLOCKYSIZE</span><span class=\"o\">=</span><span class=\"m\">1024</span> --cog-profile raw --overview-blocksize <span class=\"m\">256</span>\n</pre>\n<p>See <a href=\"https://gdal.org/drivers/raster/gtiff.html#creation-options\" rel=\"nofollow\">https://gdal.org/drivers/raster/gtiff.html#creation-options</a> for full details of creation options.</p>\n<h2>API</h2>\n<p>Rio-cogeo can also be integrated directly in your custom script. See <a href=\"https://github.com/cogeotiff/rio-cogeo/blob/master/rio_cogeo/cogeo.py#L53-L108\" rel=\"nofollow\">rio_cogeo.cogeo.cog_translate</a> function.</p>\n<p>e.g:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rio_cogeo.cogeo</span> <span class=\"kn\">import</span> <span class=\"n\">cog_translate</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_translate</span><span class=\"p\">(</span><span class=\"n\">src_path</span><span class=\"p\">,</span> <span class=\"n\">dst_path</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"s2\">\"webp\"</span><span class=\"p\">,</span> <span class=\"n\">profile_options</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Convert image to COG.\"\"\"</span>\n    <span class=\"c1\"># Format creation option (see gdalwarp `-co` option)</span>\n    <span class=\"n\">output_profile</span> <span class=\"o\">=</span> <span class=\"n\">cog_profiles</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"p\">)</span>\n    <span class=\"n\">output_profile</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">BIGTIFF</span><span class=\"o\">=</span><span class=\"s2\">\"IF_SAFER\"</span><span class=\"p\">))</span>\n    <span class=\"n\">output_profile</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">profile_options</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Dataset Open option (see gdalwarp `-oo` option)</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">GDAL_NUM_THREADS</span><span class=\"o\">=</span><span class=\"s2\">\"ALL_CPUS\"</span><span class=\"p\">,</span>\n        <span class=\"n\">GDAL_TIFF_INTERNAL_MASK</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">GDAL_TIFF_OVR_BLOCKSIZE</span><span class=\"o\">=</span><span class=\"s2\">\"128\"</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">cog_translate</span><span class=\"p\">(</span>\n        <span class=\"n\">src_path</span><span class=\"p\">,</span>\n        <span class=\"n\">dst_path</span><span class=\"p\">,</span>\n        <span class=\"n\">output_profile</span><span class=\"p\">,</span>\n        <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span>\n        <span class=\"n\">in_memory</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<p>ref: <a href=\"https://github.com/developmentseed/cogeo-watchbot/blob/81df27470dd2eb7032d512c35af853b006d1c035/app/translator.py#L34-L56\" rel=\"nofollow\">https://github.com/developmentseed/cogeo-watchbot/blob/81df27470dd2eb7032d512c35af853b006d1c035/app/translator.py#L34-L56</a></p>\n<h3>Using the API with in MemoryFile</h3>\n<ol>\n<li>Create COG from numpy array</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">mercantile</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">rasterio.io</span> <span class=\"kn\">import</span> <span class=\"n\">MemoryFile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rasterio.transform</span> <span class=\"kn\">import</span> <span class=\"n\">from_bounds</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">rio_cogeo.cogeo</span> <span class=\"kn\">import</span> <span class=\"n\">cog_translate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rio_cogeo.profiles</span> <span class=\"kn\">import</span> <span class=\"n\">cog_profiles</span>\n\n<span class=\"c1\"># Create GeoTIFF profile</span>\n<span class=\"n\">bounds</span> <span class=\"o\">=</span> <span class=\"n\">mercantile</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"p\">(</span><span class=\"n\">mercantile</span><span class=\"o\">.</span><span class=\"n\">Tile</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">src_transform</span> <span class=\"o\">=</span> <span class=\"n\">from_bounds</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"mi\">1024</span> <span class=\"mi\">1024</span><span class=\"p\">)</span>\n\n<span class=\"n\">src_profile</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"n\">driver</span><span class=\"o\">=</span><span class=\"s2\">\"GTiff\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s2\">\"float32\"</span><span class=\"p\">,</span>\n    <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">,</span>\n    <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">,</span>\n    <span class=\"n\">crs</span><span class=\"o\">=</span><span class=\"s2\">\"epsg:4326\"</span><span class=\"p\">,</span>\n    <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">dst_transform</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">img_array</span> <span class=\"o\">=</span> <span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">MemoryFile</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">memfile</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">memfile</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">src_profile</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">mem</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Populate the input file with numpy array</span>\n        <span class=\"n\">mem</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">img_array</span><span class=\"p\">)</span>\n        \n        <span class=\"n\">dst_profile</span> <span class=\"o\">=</span> <span class=\"n\">cog_profiles</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"deflate\"</span><span class=\"p\">)</span>        \n        <span class=\"n\">cog_translate</span><span class=\"p\">(</span>\n            <span class=\"n\">mem</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"my-output-cog.tif\"</span><span class=\"p\">,</span>\n            <span class=\"n\">dst_profile</span><span class=\"p\">,</span>\n            <span class=\"n\">in_memory</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Create output COG in Memory</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rasterio.io</span> <span class=\"kn\">import</span> <span class=\"n\">MemoryFile</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">rio_cogeo.cogeo</span> <span class=\"kn\">import</span> <span class=\"n\">cog_translate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rio_cogeo.profiles</span> <span class=\"kn\">import</span> <span class=\"n\">cog_profiles</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">boto3.session</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span> <span class=\"k\">as</span> <span class=\"n\">boto3_session</span>\n\n<span class=\"n\">dst_profile</span> <span class=\"o\">=</span> <span class=\"n\">cog_profiles</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"deflate\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">MemoryFile</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">mem_dst</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Important, we pass `mem_dst.name` as output dataset path</span>\n    <span class=\"n\">cog_translate</span><span class=\"p\">(</span><span class=\"s2\">\"my-input-file.tif\"</span><span class=\"p\">,</span> <span class=\"n\">mem_dst</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">,</span> <span class=\"n\">in_memory</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># You can then use the memoryfile to do something else like</span>\n    <span class=\"c1\"># upload to AWS S3</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">boto3_session</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s2\">\"s3\"</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">upload_fileobj</span><span class=\"p\">(</span><span class=\"n\">mem_dst</span><span class=\"p\">,</span> <span class=\"s2\">\"my-bucket\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my-key\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Web-Optimized COG</h2>\n<p>rio-cogeo provide a <em>--web-optimized</em> option which aims to create a web-tiling friendly COG.</p>\n<p>Output dataset features:</p>\n<ul>\n<li>bounds and internal tiles aligned with web-mercator grid.</li>\n<li>raw data and overviews resolution match mercator zoom level resolution.</li>\n</ul>\n<p><strong>Important</strong></p>\n<p>Because the mercator projection does not respect the distance, when working with\nmultiple images covering different latitudes, you may want to use the <em>--global-maxzoom</em> option\nto create output dataset having the same MAX_ZOOM (raw data resolution).</p>\n<p>Because it will certainly create a larger file, a nodata value or alpha band should\nbe present in the input dataset. If not the original data will be surrounded by black (0) data.</p>\n<h2>Internal tile size</h2>\n<p>By default rio cogeo will create a dataset with 512x512 internal tile size.\nThis can be updated by passing <code>--co BLOCKXSIZE=64 --co BLOCKYSIZE=64</code> options.</p>\n<p><strong>Web tiling optimization</strong></p>\n<p>if the input dataset is aligned to web mercator grid, the internal tile size\nshould be equal to the web map tile size (256 or 512px). Dataset should be compressed.</p>\n<p>if the input dataset is not aligned to web mercator grid, the tiler will need\nto fetch multiple internal tiles. Because GDAL can merge range request, using\nsmall internal tiles (e.g 128) will reduce the number of byte transfered and\nminimized the useless bytes transfered.</p>\n<p>GDAL configuration to merge consecutive range requests</p>\n<pre><code>GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES\nGDAL_HTTP_MULTIPLEX=YES\nGDAL_HTTP_VERSION=2\n</code></pre>\n<h2>Overview levels</h2>\n<p>By default rio cogeo will calculate the optimal overview level based on dataset\nsize and internal tile size (overview should not be smaller than internal tile\nsize (e.g 512px). Overview level will be translated to decimation level of\npower of two:</p>\n<pre><span class=\"n\">overview_level</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">overviews</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">**</span> <span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">overview_level</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">overviews</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n</pre>\n<h2>GDAL Version</h2>\n<p>It is recommanded to use GDAL &gt; 2.3.2. Previous version might not be able to\ncreate proper COGs (ref: <a href=\"https://github.com/OSGeo/gdal/issues/754\" rel=\"nofollow\">https://github.com/OSGeo/gdal/issues/754</a>).</p>\n<p>More info in <a href=\"https://github.com/cogeotiff/rio-cogeo/issues/55\" rel=\"nofollow\">https://github.com/cogeotiff/rio-cogeo/issues/55</a></p>\n<h2>Nodata, Alpha and Mask</h2>\n<p>By default rio-cogeo will forward any nodata value or alpha channel to the\noutput COG.</p>\n<p>If your dataset type is <strong>Byte</strong> or <strong>Unit16</strong>, you could use internal bit mask\n(with the <code>--add-mask</code> option) to replace the Nodata value or Alpha band in\noutput dataset (supported by most GDAL based backends).</p>\n<p>Note: when adding a <code>mask</code> with an input dataset having an alpha band you'll\nneed to use the <code>bidx</code> options to remove it from the output dataset.</p>\n<pre><span class=\"c1\"># Replace the alpha band by an internal mask</span>\n$ rio cogeo mydataset_withalpha.tif mydataset_withmask.tif --cog-profile raw --add-mask --bidx <span class=\"m\">1</span>,2,3\n</pre>\n<p><strong>Important</strong></p>\n<p>Using internal nodata value with lossy compression (<code>webp</code>, <code>jpeg</code>) is not\nrecommanded. Please use internal masking (or alpha band if using webp).</p>\n<h2>Contribution &amp; Development</h2>\n<p>The rio-cogeo project was begun at Mapbox and has been transferred to the\nCogeoTIFF organization in January 2019.</p>\n<p>Issues and pull requests are more than welcome.</p>\n<p><strong>dev install</strong></p>\n<pre>$ git clone https://github.com/cogeotiff/rio-cogeo.git\n$ <span class=\"nb\">cd</span> rio-cogeo\n$ pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p><strong>Python3.6 only</strong></p>\n<p>This repo is set to use <code>pre-commit</code> to run <em>flake8</em>, <em>pydocstring</em> and <em>black</em>\n(\"uncompromising Python code formatter\") when commiting new code.</p>\n<pre>$ pre-commit install\n</pre>\n<h2>Extras</h2>\n<p>Blog post on good and bad COG formats: <a href=\"https://medium.com/@_VincentS_/do-you-really-want-people-using-your-data-ec94cd94dc3f\" rel=\"nofollow\">https://medium.com/@_VincentS_/do-you-really-want-people-using-your-data-ec94cd94dc3f</a></p>\n<p>Checkout <a href=\"https://github.com/mapbox/rio-glui/\" rel=\"nofollow\">rio-glui</a> or <a href=\"https://github.com/developmentseed/rio-viz\" rel=\"nofollow\">rio-viz</a> rasterio plugins to explore COG locally in your web browser.</p>\n\n          </div>"}, "last_serial": 7190370, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "7b572fad34df4c246e5aecf86c08ddd4", "sha256": "05940d0523b3c0d400177b29a2a33712b84881bbeb82e713a1b9f064422591f9"}, "downloads": -1, "filename": "rio-cogeo-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7b572fad34df4c246e5aecf86c08ddd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16545, "upload_time": "2019-04-19T13:26:33", "upload_time_iso_8601": "2019-04-19T13:26:33.261944Z", "url": "https://files.pythonhosted.org/packages/5a/38/2101a892aac52350401adc8648401ece8ffbec374bc8915a3700aaf0df10/rio-cogeo-1.0.0.tar.gz", "yanked": false}], "1.0.dev1": [{"comment_text": "", "digests": {"md5": "24032f05cf02c1247a4a3908dbc4a7a3", "sha256": "f0937ca49a08ba34af985f5a90b6c422e242000884c15f95d4a1fb3221ba2877"}, "downloads": -1, "filename": "rio-cogeo-1.0.dev1.tar.gz", "has_sig": false, "md5_digest": "24032f05cf02c1247a4a3908dbc4a7a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5061, "upload_time": "2018-06-13T17:37:14", "upload_time_iso_8601": "2018-06-13T17:37:14.995624Z", "url": "https://files.pythonhosted.org/packages/81/e0/0b9371e8e74b21a2605b42450b074961656e338badc0dcf574880d6f3d9d/rio-cogeo-1.0.dev1.tar.gz", "yanked": false}], "1.0.dev10": [{"comment_text": "", "digests": {"md5": "c5f0853a050e92cb5fff92c8b6e3d6f1", "sha256": "c29e5d1b6b69c7926831e5ae3c73cf7fab63143ad6406548c93fce3ddaeead88"}, "downloads": -1, "filename": "rio-cogeo-1.0.dev10.tar.gz", "has_sig": false, "md5_digest": "c5f0853a050e92cb5fff92c8b6e3d6f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6404, "upload_time": "2019-02-12T19:28:26", "upload_time_iso_8601": "2019-02-12T19:28:26.247078Z", "url": "https://files.pythonhosted.org/packages/b2/74/ecca540c50ca03bff9145fdef5d1514bc1f64363f74529c1edddbb23b8a6/rio-cogeo-1.0.dev10.tar.gz", "yanked": false}], "1.0.dev2": [{"comment_text": "", "digests": {"md5": "5b858b8991972f03cfa3dec7a1501b65", "sha256": "4e5d1be9e60cd2078b32ba4ecb2f5e5113e1dbed847a1fff022b5cdbf78d6a1d"}, "downloads": -1, "filename": "rio-cogeo-1.0.dev2.tar.gz", "has_sig": false, "md5_digest": "5b858b8991972f03cfa3dec7a1501b65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5270, "upload_time": "2018-06-28T14:37:48", "upload_time_iso_8601": "2018-06-28T14:37:48.302055Z", "url": "https://files.pythonhosted.org/packages/7b/27/2daa186a29c9f28e7d6266b8574c57689d99e15a17fe657c4551518a853c/rio-cogeo-1.0.dev2.tar.gz", "yanked": false}], "1.0.dev3": [{"comment_text": "", "digests": {"md5": "9b1fb23c7c2ced9af6a2fc141c5b2d2e", "sha256": "59a0bd25d3854e9576ebce616e303165122117f974b8581868366a911906d052"}, "downloads": -1, "filename": "rio-cogeo-1.0.dev3.tar.gz", "has_sig": false, "md5_digest": "9b1fb23c7c2ced9af6a2fc141c5b2d2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5407, "upload_time": "2018-07-05T16:46:28", "upload_time_iso_8601": "2018-07-05T16:46:28.062631Z", "url": "https://files.pythonhosted.org/packages/ee/99/6cc1dfe8bfc992ee9dc5ee6c2b1e62dba8cea9f8e1609d8959a675db330e/rio-cogeo-1.0.dev3.tar.gz", "yanked": false}], "1.0.dev4": [{"comment_text": "", "digests": {"md5": "13cbbefe72a0e6777a6ead9afce5d35c", "sha256": "b137146b9451227f3571a3c113669991bc6936a157d1fcaabd6c4c2e60bae04d"}, "downloads": -1, "filename": "rio-cogeo-1.0.dev4.tar.gz", "has_sig": false, "md5_digest": "13cbbefe72a0e6777a6ead9afce5d35c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5411, "upload_time": "2018-07-16T18:32:07", "upload_time_iso_8601": "2018-07-16T18:32:07.761673Z", "url": "https://files.pythonhosted.org/packages/cc/80/09f98100b08a37f3a3f76d88d8bf78cff9d28e442df82f71708598a2d79c/rio-cogeo-1.0.dev4.tar.gz", "yanked": false}], "1.0.dev5": [{"comment_text": "", "digests": {"md5": "bf05a028aa7222faacd5b29924c2c8bc", "sha256": "d9bc704595621719d70902d7538dea42c378358877aabdede401c77444500ba5"}, "downloads": -1, "filename": "rio-cogeo-1.0.dev5.tar.gz", "has_sig": false, "md5_digest": "bf05a028aa7222faacd5b29924c2c8bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5347, "upload_time": "2018-08-15T14:27:31", "upload_time_iso_8601": "2018-08-15T14:27:31.286392Z", "url": "https://files.pythonhosted.org/packages/db/83/99154ee7e0df7800121f8c16a962f7cd1a6747a586250300dae28d0a3fb3/rio-cogeo-1.0.dev5.tar.gz", "yanked": false}], "1.0.dev6": [{"comment_text": "", "digests": {"md5": "06c8c801efb945e878343590789c51d0", "sha256": "38437c331b0ce6a2d512edd6fdf9edcf48034265b89e8bfe46ce43a0de0f7bff"}, "downloads": -1, "filename": "rio-cogeo-1.0.dev6.tar.gz", "has_sig": false, "md5_digest": "06c8c801efb945e878343590789c51d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5324, "upload_time": "2018-08-23T20:33:09", "upload_time_iso_8601": "2018-08-23T20:33:09.249263Z", "url": "https://files.pythonhosted.org/packages/2e/9b/04d481050d6593f3b472f3a50d9b4a527522e10fda99e51bec85968d54f6/rio-cogeo-1.0.dev6.tar.gz", "yanked": false}], "1.0.dev7": [{"comment_text": "", "digests": {"md5": "dc094136cfd855feea8efb14c3bd4fb5", "sha256": "2043420f595d4189fc7c103aea1c789b38b24fff5dcb780695299a20196dc205"}, "downloads": -1, "filename": "rio-cogeo-1.0.dev7.tar.gz", "has_sig": false, "md5_digest": "dc094136cfd855feea8efb14c3bd4fb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5398, "upload_time": "2018-09-12T17:58:49", "upload_time_iso_8601": "2018-09-12T17:58:49.854840Z", "url": "https://files.pythonhosted.org/packages/1a/bf/8f904d533f1c30a84ef761ca7f77fd3d0a0b6334bcccb9eea755bd0d9a39/rio-cogeo-1.0.dev7.tar.gz", "yanked": false}], "1.0.dev8": [{"comment_text": "", "digests": {"md5": "ea846366b929e0aa1cfe29584bf91696", "sha256": "9c6787926f6f375f71ab5ea17a415bf6bfefe717b7a19f28f0625993eaa40c5d"}, "downloads": -1, "filename": "rio-cogeo-1.0.dev8.tar.gz", "has_sig": false, "md5_digest": "ea846366b929e0aa1cfe29584bf91696", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5481, "upload_time": "2018-10-03T00:41:33", "upload_time_iso_8601": "2018-10-03T00:41:33.978038Z", "url": "https://files.pythonhosted.org/packages/33/35/bba17b5f99320d3c1367b4661305d4582b62cc979acd7826f21e68dc88d1/rio-cogeo-1.0.dev8.tar.gz", "yanked": false}], "1.0.dev9": [{"comment_text": "", "digests": {"md5": "99ceb832af85168bed8e05dc01976098", "sha256": "071fcaba202d72e131f4a2239ec641c34cae6706bce22f66ff01b90cf5d3cc66"}, "downloads": -1, "filename": "rio-cogeo-1.0.dev9.tar.gz", "has_sig": false, "md5_digest": "99ceb832af85168bed8e05dc01976098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6284, "upload_time": "2019-02-11T18:38:54", "upload_time_iso_8601": "2019-02-11T18:38:54.292718Z", "url": "https://files.pythonhosted.org/packages/08/bc/f357e8a95d69afa95cb8fb97c321d7a2924e10407748984fb9a749138729/rio-cogeo-1.0.dev9.tar.gz", "yanked": false}], "1.0b0": [{"comment_text": "", "digests": {"md5": "d66914405cdcf3c7057d36871ec96273", "sha256": "7b4eeacc0ac5e6e02bb0055a3e010cb75d93c827275e752cb74ffddb6107b492"}, "downloads": -1, "filename": "rio-cogeo-1.0b0.tar.gz", "has_sig": false, "md5_digest": "d66914405cdcf3c7057d36871ec96273", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12094, "upload_time": "2019-03-15T13:09:26", "upload_time_iso_8601": "2019-03-15T13:09:26.617561Z", "url": "https://files.pythonhosted.org/packages/fd/a9/08dfb02c4f2e26f1494b83988860b8b63c25d9ff12c4d9e9a20b372d2c72/rio-cogeo-1.0b0.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "0df61ddee666c1bc62b220e2ad29c9d7", "sha256": "93f6a3d0021c0473cf3a51970341671ccc047299f0112fd22af256e6bc70cc7f"}, "downloads": -1, "filename": "rio-cogeo-1.0b1.tar.gz", "has_sig": false, "md5_digest": "0df61ddee666c1bc62b220e2ad29c9d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12165, "upload_time": "2019-03-25T13:56:30", "upload_time_iso_8601": "2019-03-25T13:56:30.631627Z", "url": "https://files.pythonhosted.org/packages/dc/2c/f73bbe42f7620dd38acee8b38bdb9b59fc366aeccb6a47e18df66a2bd0f4/rio-cogeo-1.0b1.tar.gz", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "ae4995a68efc42e4793bd4252e6de04a", "sha256": "3292ddbcc87c33dd6448adbbd5e769dd64d59b951316b1922a7cfb3696895dfe"}, "downloads": -1, "filename": "rio-cogeo-1.0b2.tar.gz", "has_sig": false, "md5_digest": "ae4995a68efc42e4793bd4252e6de04a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12316, "upload_time": "2019-03-27T16:30:21", "upload_time_iso_8601": "2019-03-27T16:30:21.165024Z", "url": "https://files.pythonhosted.org/packages/76/6a/ef1f503c4baf1998bb865d30076bdfd2905addcc3607ec573ced4277419b/rio-cogeo-1.0b2.tar.gz", "yanked": false}], "1.0b3": [{"comment_text": "", "digests": {"md5": "22aad97dfe8a814cef5f3863f2733761", "sha256": "470af5e7cba13bbb3227780d8f89f22acfda455585bb25e712d08ed2d28e4070"}, "downloads": -1, "filename": "rio-cogeo-1.0b3.tar.gz", "has_sig": false, "md5_digest": "22aad97dfe8a814cef5f3863f2733761", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13432, "upload_time": "2019-03-30T13:27:01", "upload_time_iso_8601": "2019-03-30T13:27:01.937873Z", "url": "https://files.pythonhosted.org/packages/e6/8f/cd78cf1f2efa826cc591ed3c349c48f27ee75292fb74e9d75ad8d9751738/rio-cogeo-1.0b3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "bf968f1c3ff9fca17f8ce33a3b06d805", "sha256": "250777ed283811ce6c363e8ef108c382b451465206be68973807bf2ae80cc8f3"}, "downloads": -1, "filename": "rio-cogeo-1.1.0.tar.gz", "has_sig": false, "md5_digest": "bf968f1c3ff9fca17f8ce33a3b06d805", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16776, "upload_time": "2019-07-17T04:12:29", "upload_time_iso_8601": "2019-07-17T04:12:29.559813Z", "url": "https://files.pythonhosted.org/packages/30/c6/2ec9c1a00e42b39c11f7466d82c55f0c89c0b6de9b7799ad034cf40b96ff/rio-cogeo-1.1.0.tar.gz", "yanked": false}], "1.1.10": [{"comment_text": "", "digests": {"md5": "8320573d4215bf9a2b791afe4ed7cc64", "sha256": "f8fa5ff445b5fdb663c877dfc8b68ca9ae34df1938fa412344c189dad216fdd1"}, "downloads": -1, "filename": "rio-cogeo-1.1.10.tar.gz", "has_sig": false, "md5_digest": "8320573d4215bf9a2b791afe4ed7cc64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20217, "upload_time": "2020-02-21T17:22:31", "upload_time_iso_8601": "2020-02-21T17:22:31.365366Z", "url": "https://files.pythonhosted.org/packages/f1/f0/9257859fc84ecf4959206d2da3e93ff313b70f4777e93a22073d778bb96b/rio-cogeo-1.1.10.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "da330c1415685bad5e4dd72cdcf4602c", "sha256": "b82c130addeed04b1b440e81044fa824c23f9272cc767b08791ce4cef82781a4"}, "downloads": -1, "filename": "rio-cogeo-1.1.2.tar.gz", "has_sig": false, "md5_digest": "da330c1415685bad5e4dd72cdcf4602c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17172, "upload_time": "2019-09-12T14:54:35", "upload_time_iso_8601": "2019-09-12T14:54:35.166884Z", "url": "https://files.pythonhosted.org/packages/68/f5/63efdc58b78284917d75aa190a17bae4a8ddc4022b162bfba82d965850d9/rio-cogeo-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "3b4afe01591a292251ce87ba8f60d8b8", "sha256": "6149ff9f045ee659ef1d35aadef510050d697691e516a2c5a0bfc5c2c9f50201"}, "downloads": -1, "filename": "rio-cogeo-1.1.3.tar.gz", "has_sig": false, "md5_digest": "3b4afe01591a292251ce87ba8f60d8b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17874, "upload_time": "2019-09-16T16:01:34", "upload_time_iso_8601": "2019-09-16T16:01:34.804748Z", "url": "https://files.pythonhosted.org/packages/6a/a3/ff8fe84338a9299c3e8248f2041f6ff76b12cfe5011f195cf3c9e6e851b2/rio-cogeo-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "26085ed2440225ce1b9754b66e2db7f6", "sha256": "c94f23a54ae1f1eba24f2a56a90795d16b8b258d624df4591fedd7b3d874b9f5"}, "downloads": -1, "filename": "rio-cogeo-1.1.4.tar.gz", "has_sig": false, "md5_digest": "26085ed2440225ce1b9754b66e2db7f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18731, "upload_time": "2019-10-03T16:33:19", "upload_time_iso_8601": "2019-10-03T16:33:19.787243Z", "url": "https://files.pythonhosted.org/packages/cd/c7/5dccd98f6c141032f6b464dd340f411a9fb85760a4b842e87b8fb3d1527a/rio-cogeo-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "a2b9498c121fe8326c2cc575ea9b0bb7", "sha256": "48c74c203a1ed8dc3746658f701ab65671722dd4b5d500cb41247b5cab4ca8f0"}, "downloads": -1, "filename": "rio-cogeo-1.1.5.tar.gz", "has_sig": false, "md5_digest": "a2b9498c121fe8326c2cc575ea9b0bb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18870, "upload_time": "2019-10-04T16:14:27", "upload_time_iso_8601": "2019-10-04T16:14:27.530785Z", "url": "https://files.pythonhosted.org/packages/fa/79/71ae44c182358e9b2feda7c3e11b5cb61273b7581b0131a2d788d80329a2/rio-cogeo-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "a71471429ec4693bdbc4fc208b72c05e", "sha256": "1bd56c23af16e91b68df187ad22cf70f62f783fdd8a9d5f471fb405a4c6349de"}, "downloads": -1, "filename": "rio-cogeo-1.1.6.tar.gz", "has_sig": false, "md5_digest": "a71471429ec4693bdbc4fc208b72c05e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18401, "upload_time": "2019-11-14T04:04:16", "upload_time_iso_8601": "2019-11-14T04:04:16.447521Z", "url": "https://files.pythonhosted.org/packages/9c/8b/503ed28c467d6b9d2c4676dba2493c0bbae72484d9cb73ee04a9d9d752f0/rio-cogeo-1.1.6.tar.gz", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "bc319e4f775e6babc6e2ce8f39a0f46b", "sha256": "0e734e54ed88337817700fe20ef587931be082fd2fb7544495257bec8d018d90"}, "downloads": -1, "filename": "rio-cogeo-1.1.7.tar.gz", "has_sig": false, "md5_digest": "bc319e4f775e6babc6e2ce8f39a0f46b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19909, "upload_time": "2019-12-02T16:22:18", "upload_time_iso_8601": "2019-12-02T16:22:18.025074Z", "url": "https://files.pythonhosted.org/packages/26/67/1648632d1f433e1f4ab4e55ecbb639f290634e2b4c426d6ebf0952c29b8b/rio-cogeo-1.1.7.tar.gz", "yanked": false}], "1.1.8": [{"comment_text": "", "digests": {"md5": "f5035ce06ca715c216eb91c50798203c", "sha256": "25fecb1ec19d685bcef961fdbfc37cb5436f377f353b4b7775755b5dd4557266"}, "downloads": -1, "filename": "rio-cogeo-1.1.8.tar.gz", "has_sig": false, "md5_digest": "f5035ce06ca715c216eb91c50798203c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20030, "upload_time": "2020-01-08T17:53:23", "upload_time_iso_8601": "2020-01-08T17:53:23.211411Z", "url": "https://files.pythonhosted.org/packages/2e/90/40638ddabe9c483c0550696a335229df0d71b6499ac15f5a30d708d83d24/rio-cogeo-1.1.8.tar.gz", "yanked": false}], "1.1.9": [{"comment_text": "", "digests": {"md5": "6dfa0e6ec206fe951dd8a81008e3aa30", "sha256": "91aef989fa1a4386051ebf087a6f0f9995babb9cd5856b3c1734b45ea6b1ae7f"}, "downloads": -1, "filename": "rio-cogeo-1.1.9.tar.gz", "has_sig": false, "md5_digest": "6dfa0e6ec206fe951dd8a81008e3aa30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20071, "upload_time": "2020-02-06T19:52:39", "upload_time_iso_8601": "2020-02-06T19:52:39.885485Z", "url": "https://files.pythonhosted.org/packages/b7/b1/ae20df1706f18148a3b2b1dea71596c24bda319a3caaa04f97b7caee0b36/rio-cogeo-1.1.9.tar.gz", "yanked": false}], "2.0a1": [{"comment_text": "", "digests": {"md5": "889e47a9df18a0112458ddea904e0bbd", "sha256": "d85275306a0ee559174028ae791f8ef123ec070a23f3ca230c6ad7916219aab6"}, "downloads": -1, "filename": "rio-cogeo-2.0a1.tar.gz", "has_sig": false, "md5_digest": "889e47a9df18a0112458ddea904e0bbd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 20712, "upload_time": "2020-05-07T17:26:43", "upload_time_iso_8601": "2020-05-07T17:26:43.911028Z", "url": "https://files.pythonhosted.org/packages/50/a5/78f26d6ea51d9744e483fccf898c2091801a00de3f0bdae5d014a4928137/rio-cogeo-2.0a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8320573d4215bf9a2b791afe4ed7cc64", "sha256": "f8fa5ff445b5fdb663c877dfc8b68ca9ae34df1938fa412344c189dad216fdd1"}, "downloads": -1, "filename": "rio-cogeo-1.1.10.tar.gz", "has_sig": false, "md5_digest": "8320573d4215bf9a2b791afe4ed7cc64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20217, "upload_time": "2020-02-21T17:22:31", "upload_time_iso_8601": "2020-02-21T17:22:31.365366Z", "url": "https://files.pythonhosted.org/packages/f1/f0/9257859fc84ecf4959206d2da3e93ff313b70f4777e93a22073d778bb96b/rio-cogeo-1.1.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:33 2020"}