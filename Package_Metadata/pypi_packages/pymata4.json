{"info": {"author": "Alan Yorinks", "author_email": "MisterYsLab@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Other Environment", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# pymata4\n\n### A high performance, Python client for the Arduino Firmata Protocol.\nPymata4 is a Firmata client that, like its asyncio sibling,\n [pymata-express,](https://mryslab.github.io/pymata-express/)\n allows you to control an Arduino using the high-performance FirmataExpress sketch.\n  It uses a conventional Python API for those that do not need or wish to use the asyncio programming paradigm of pymata-express.\n\n### A [User's Guide is available,](https://mryslab.github.io/pymata4/) containing an annotated API as well as links to working examples.\n\n### It supports both an enhanced version of StandardaFirmata 2.5.8, called FirmataExpress, as well as StandardFirmata. \n* **[FirmataExpress](https://github.com/MrYsLab/FirmataExpress) adds support for:**\n     * **HC-SR04 Ultrasonic Distance Sensors using a single pin.**\n     * **Stepper Motors.**\n     * **Piezo Tone Generation.**\n     * **Baud rate of 115200**\n\n<h2><u>Major features</u></h2>\n\n* **Fully documented <a href=\"https://htmlpreview.github.com/?https://github.com/MrYsLab/pymata4/blob/master/html/pymata4/index.html\" target=\"_blank\">intuitive API</a>**\n\n\n* **Python 3.7+ compatible.**\n\n* **Set the pin mode and go!**\n\n* **Data change events may be associated with a callback function, or each pin can be polled for its last event change.**\n\n    * **Each data change event is time-stamped and logged.**\n\n* **[User's Guide](https://mryslab.github.io/pymata4/), Including Examples.**\n\n* **Implements 100% of the StandardFirmata Protocol (StandardFirmata 2.5.8).**\n\n* **Advanced auto-detection of Arduino devices (when using FirmataExpress).**\n\nHere is an example that monitors data changes on a digital input pin. It demonstrates both callback and \npolling techniques\n\n```python\nimport time\nimport sys\nfrom pymata4 import pymata4\n\n\"\"\"\nSetup a pin for digital input and monitor its changes\nBoth polling and callback are being used in this example.\n\"\"\"\n\n# Setup a pin for analog input and monitor its changes\nDIGITAL_PIN = 12  # arduino pin number\nPOLL_TIME = 5  # number of seconds between polls\n\n# Callback data indices\n# Callback data indices\nCB_PIN_MODE = 0\nCB_PIN = 1\nCB_VALUE = 2\nCB_TIME = 3\n\n\ndef the_callback(data):\n    \"\"\"\n    A callback function to report data changes.\n    This will print the pin number, its reported value and\n    the date and time when the change occurred\n\n    :param data: [pin, current reported value, pin_mode, timestamp]\n    \"\"\"\n    date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME]))\n    print(f'Pin: {data[CB_PIN]} Value: {data[CB_VALUE]} Time Stamp: {date}')\n\n\ndef digital_in(my_board, pin):\n    \"\"\"\n     This function establishes the pin as a\n     digital input. Any changes on this pin will\n     be reported through the call back function.\n\n     :param my_board: a pymata_express instance\n     :param pin: Arduino pin number\n     \"\"\"\n\n    # set the pin mode\n    my_board.set_pin_mode_digital_input(pin, callback=the_callback)\n\n    while True:\n        try:\n            # Do a read of the last value reported every 5 seconds and print it\n            # digital_read returns A tuple of last value change and the time that it occurred\n            value, time_stamp = my_board.digital_read(pin)\n            date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time_stamp))\n            # value\n            print(f'Polling - last value: {value} received on {date} ')\n            time.sleep(POLL_TIME)\n        except KeyboardInterrupt:\n            board.shutdown()\n            sys.exit(0)\n\nboard = pymata4.Pymata4()\n\ntry:\n    digital_in(board, DIGITAL_PIN)\nexcept KeyboardInterrupt:\n    board.shutdown()\n    sys.exit(0)\n\n```\n\nAnd here is the console output:\n```bash\npymata4:  Version 1.00\n\nCopyright (c) 2020 Alan Yorinks All Rights Reserved.\n\nOpening all potential serial ports...\n\t/dev/ttyACM0\n\nWaiting 4 seconds(arduino_wait) for Arduino devices to reset...\n\nSearching for an Arduino configured with an arduino_instance = 1\nArduino compatible device found and connected to /dev/ttyACM0\n\nRetrieving Arduino Firmware ID...\nArduino Firmware ID: 2.5 FirmataExpress.ino\n\nRetrieving analog map...\nAuto-discovery complete. Found 20 Digital Pins and 6 Analog Pins\n\n\nPolling - last change: 0 change received on 1969-12-31 19:00:00 \nPin: 12 Value: 0 Time Stamp: 2020-03-07 08:52:10\nPin: 12 Value: 1 Time Stamp: 2020-03-07 08:52:12\nPolling - last value: 1 received on 2020-03-07 08:52:12 \n```\n\n\nThis project was developed with [Pycharm](https://www.jetbrains.com/pycharm/?from=pymata4) ![logo](https://github.com/MrYsLab/python_banyan/blob/master/images/icon_PyCharm.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/MrYsLab/pymata4", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MrYsLab/pymata4", "keywords": "Firmata,Arduino,Protocol,Python", "license": "", "maintainer": "", "maintainer_email": "", "name": "pymata4", "package_url": "https://pypi.org/project/pymata4/", "platform": "", "project_url": "https://pypi.org/project/pymata4/", "project_urls": {"Download": "https://github.com/MrYsLab/pymata4", "Homepage": "https://github.com/MrYsLab/pymata4"}, "release_url": "https://pypi.org/project/pymata4/1.2/", "requires_dist": ["pyserial"], "requires_python": "", "summary": "A Python Protocol Abstraction Library For Arduino Firmata", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pymata4</h1>\n<h3>A high performance, Python client for the Arduino Firmata Protocol.</h3>\n<p>Pymata4 is a Firmata client that, like its asyncio sibling,\n<a href=\"https://mryslab.github.io/pymata-express/\" rel=\"nofollow\">pymata-express,</a>\nallows you to control an Arduino using the high-performance FirmataExpress sketch.\nIt uses a conventional Python API for those that do not need or wish to use the asyncio programming paradigm of pymata-express.</p>\n<h3>A <a href=\"https://mryslab.github.io/pymata4/\" rel=\"nofollow\">User's Guide is available,</a> containing an annotated API as well as links to working examples.</h3>\n<h3>It supports both an enhanced version of StandardaFirmata 2.5.8, called FirmataExpress, as well as StandardFirmata.</h3>\n<ul>\n<li><strong><a href=\"https://github.com/MrYsLab/FirmataExpress\" rel=\"nofollow\">FirmataExpress</a> adds support for:</strong>\n<ul>\n<li><strong>HC-SR04 Ultrasonic Distance Sensors using a single pin.</strong></li>\n<li><strong>Stepper Motors.</strong></li>\n<li><strong>Piezo Tone Generation.</strong></li>\n<li><strong>Baud rate of 115200</strong></li>\n</ul>\n</li>\n</ul>\n<h2>&lt;u&gt;Major features&lt;/u&gt;</h2>\n<ul>\n<li>\n<p><strong>Fully documented <a href=\"https://htmlpreview.github.com/?https://github.com/MrYsLab/pymata4/blob/master/html/pymata4/index.html\" rel=\"nofollow\">intuitive API</a></strong></p>\n</li>\n<li>\n<p><strong>Python 3.7+ compatible.</strong></p>\n</li>\n<li>\n<p><strong>Set the pin mode and go!</strong></p>\n</li>\n<li>\n<p><strong>Data change events may be associated with a callback function, or each pin can be polled for its last event change.</strong></p>\n<ul>\n<li><strong>Each data change event is time-stamped and logged.</strong></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://mryslab.github.io/pymata4/\" rel=\"nofollow\">User's Guide</a>, Including Examples.</strong></p>\n</li>\n<li>\n<p><strong>Implements 100% of the StandardFirmata Protocol (StandardFirmata 2.5.8).</strong></p>\n</li>\n<li>\n<p><strong>Advanced auto-detection of Arduino devices (when using FirmataExpress).</strong></p>\n</li>\n</ul>\n<p>Here is an example that monitors data changes on a digital input pin. It demonstrates both callback and\npolling techniques</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pymata4</span> <span class=\"kn\">import</span> <span class=\"n\">pymata4</span>\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Setup a pin for digital input and monitor its changes</span>\n<span class=\"sd\">Both polling and callback are being used in this example.</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"c1\"># Setup a pin for analog input and monitor its changes</span>\n<span class=\"n\">DIGITAL_PIN</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>  <span class=\"c1\"># arduino pin number</span>\n<span class=\"n\">POLL_TIME</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>  <span class=\"c1\"># number of seconds between polls</span>\n\n<span class=\"c1\"># Callback data indices</span>\n<span class=\"c1\"># Callback data indices</span>\n<span class=\"n\">CB_PIN_MODE</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">CB_PIN</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">CB_VALUE</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">CB_TIME</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">the_callback</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    A callback function to report data changes.</span>\n<span class=\"sd\">    This will print the pin number, its reported value and</span>\n<span class=\"sd\">    the date and time when the change occurred</span>\n\n<span class=\"sd\">    :param data: [pin, current reported value, pin_mode, timestamp]</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S'</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">localtime</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">CB_TIME</span><span class=\"p\">]))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Pin: </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">CB_PIN</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> Value: </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">CB_VALUE</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> Time Stamp: </span><span class=\"si\">{</span><span class=\"n\">date</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">digital_in</span><span class=\"p\">(</span><span class=\"n\">my_board</span><span class=\"p\">,</span> <span class=\"n\">pin</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">     This function establishes the pin as a</span>\n<span class=\"sd\">     digital input. Any changes on this pin will</span>\n<span class=\"sd\">     be reported through the call back function.</span>\n\n<span class=\"sd\">     :param my_board: a pymata_express instance</span>\n<span class=\"sd\">     :param pin: Arduino pin number</span>\n<span class=\"sd\">     \"\"\"</span>\n\n    <span class=\"c1\"># set the pin mode</span>\n    <span class=\"n\">my_board</span><span class=\"o\">.</span><span class=\"n\">set_pin_mode_digital_input</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">the_callback</span><span class=\"p\">)</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Do a read of the last value reported every 5 seconds and print it</span>\n            <span class=\"c1\"># digital_read returns A tuple of last value change and the time that it occurred</span>\n            <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">time_stamp</span> <span class=\"o\">=</span> <span class=\"n\">my_board</span><span class=\"o\">.</span><span class=\"n\">digital_read</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">)</span>\n            <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S'</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">localtime</span><span class=\"p\">(</span><span class=\"n\">time_stamp</span><span class=\"p\">))</span>\n            <span class=\"c1\"># value</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Polling - last value: </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s1\"> received on </span><span class=\"si\">{</span><span class=\"n\">date</span><span class=\"si\">}</span><span class=\"s1\"> '</span><span class=\"p\">)</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">POLL_TIME</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n            <span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">pymata4</span><span class=\"o\">.</span><span class=\"n\">Pymata4</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">digital_in</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">DIGITAL_PIN</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n    <span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>And here is the console output:</p>\n<pre>pymata4:  Version <span class=\"m\">1</span>.00\n\nCopyright <span class=\"o\">(</span>c<span class=\"o\">)</span> <span class=\"m\">2020</span> Alan Yorinks All Rights Reserved.\n\nOpening all potential serial ports...\n\t/dev/ttyACM0\n\nWaiting <span class=\"m\">4</span> seconds<span class=\"o\">(</span>arduino_wait<span class=\"o\">)</span> <span class=\"k\">for</span> Arduino devices to reset...\n\nSearching <span class=\"k\">for</span> an Arduino configured with an <span class=\"nv\">arduino_instance</span> <span class=\"o\">=</span> <span class=\"m\">1</span>\nArduino compatible device found and connected to /dev/ttyACM0\n\nRetrieving Arduino Firmware ID...\nArduino Firmware ID: <span class=\"m\">2</span>.5 FirmataExpress.ino\n\nRetrieving analog map...\nAuto-discovery complete. Found <span class=\"m\">20</span> Digital Pins and <span class=\"m\">6</span> Analog Pins\n\n\nPolling - last change: <span class=\"m\">0</span> change received on <span class=\"m\">1969</span>-12-31 <span class=\"m\">19</span>:00:00 \nPin: <span class=\"m\">12</span> Value: <span class=\"m\">0</span> Time Stamp: <span class=\"m\">2020</span>-03-07 <span class=\"m\">08</span>:52:10\nPin: <span class=\"m\">12</span> Value: <span class=\"m\">1</span> Time Stamp: <span class=\"m\">2020</span>-03-07 <span class=\"m\">08</span>:52:12\nPolling - last value: <span class=\"m\">1</span> received on <span class=\"m\">2020</span>-03-07 <span class=\"m\">08</span>:52:12 \n</pre>\n<p>This project was developed with <a href=\"https://www.jetbrains.com/pycharm/?from=pymata4\" rel=\"nofollow\">Pycharm</a> <img alt=\"logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e807df4817ce6e4b18b1c8e2de436e422f94b6e3/68747470733a2f2f6769746875622e636f6d2f4d7259734c61622f707974686f6e5f62616e79616e2f626c6f622f6d61737465722f696d616765732f69636f6e5f5079436861726d2e706e67\"></p>\n\n          </div>"}, "last_serial": 7028019, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "241d471ce86ad0482b6e67710175a874", "sha256": "7875c5755512d4f588112b2ee868aeebc4f83774d033428563f3f5dd96abcdd8"}, "downloads": -1, "filename": "pymata4-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "241d471ce86ad0482b6e67710175a874", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20604, "upload_time": "2020-03-28T15:42:01", "upload_time_iso_8601": "2020-03-28T15:42:01.685896Z", "url": "https://files.pythonhosted.org/packages/fb/b7/dea33651b3fc4d92d54d095ca3077122927e8d2b829f2f64da5512ee0b98/pymata4-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b301e457701b3662f812d71d52f02e27", "sha256": "685ba8b6b5e079775a6688f506877ce671029564493cc8f3cd8e2a3975f8ffd9"}, "downloads": -1, "filename": "pymata4-1.0.tar.gz", "has_sig": false, "md5_digest": "b301e457701b3662f812d71d52f02e27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20746, "upload_time": "2020-03-28T15:42:04", "upload_time_iso_8601": "2020-03-28T15:42:04.219744Z", "url": "https://files.pythonhosted.org/packages/c9/94/ef46ccda64e83bee0e7b11d23a81008f3ea3ade98f80026743379b2e9151/pymata4-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "dd1785ca06ab65f37cc480a352c2d3ac", "sha256": "46a7f2444f1e971ea9ba48e882ecc21dfcd277061c3f91c330930997985b5d97"}, "downloads": -1, "filename": "pymata4-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dd1785ca06ab65f37cc480a352c2d3ac", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20626, "upload_time": "2020-04-02T15:45:24", "upload_time_iso_8601": "2020-04-02T15:45:24.410085Z", "url": "https://files.pythonhosted.org/packages/1d/23/d79ece2109fb499688d608777afc10d85a4e3c871cec704ec42b6132013a/pymata4-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "164ff1424e6fc2cf462c5aa584402be4", "sha256": "39397b23166bddb4249cc2e06130c81760ede8c3fbe85d23a9de20e955f48fec"}, "downloads": -1, "filename": "pymata4-1.1.tar.gz", "has_sig": false, "md5_digest": "164ff1424e6fc2cf462c5aa584402be4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20752, "upload_time": "2020-04-02T15:45:26", "upload_time_iso_8601": "2020-04-02T15:45:26.693267Z", "url": "https://files.pythonhosted.org/packages/5c/f1/951c8a7ed5f6d17d0f45db27c5c073d5056bd6256c316be4196393aeedef/pymata4-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "2bd43ab8492803f8befd88c615665fdd", "sha256": "bb5f2a7d5891c1e7b0091159ac64af95e6c9de590e4e03426308493df63532bf"}, "downloads": -1, "filename": "pymata4-1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2bd43ab8492803f8befd88c615665fdd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20648, "upload_time": "2020-04-15T22:55:06", "upload_time_iso_8601": "2020-04-15T22:55:06.841343Z", "url": "https://files.pythonhosted.org/packages/2b/86/75f01cc9aaa2745b20666d42222bcbeb719fee522c4ca717010791bf039a/pymata4-1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f809ef230fae5e8c056b54f6f7352be", "sha256": "faeb34c64479d7d055fdcfc7d5cdb8ac194b3c918e1b232be60517796ea41156"}, "downloads": -1, "filename": "pymata4-1.2.tar.gz", "has_sig": false, "md5_digest": "4f809ef230fae5e8c056b54f6f7352be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20777, "upload_time": "2020-04-15T22:55:10", "upload_time_iso_8601": "2020-04-15T22:55:10.505711Z", "url": "https://files.pythonhosted.org/packages/19/c1/f1d45ad95a9173805393f5a59d8475df856c7c2cf3f6eab3d6184228d114/pymata4-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2bd43ab8492803f8befd88c615665fdd", "sha256": "bb5f2a7d5891c1e7b0091159ac64af95e6c9de590e4e03426308493df63532bf"}, "downloads": -1, "filename": "pymata4-1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2bd43ab8492803f8befd88c615665fdd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20648, "upload_time": "2020-04-15T22:55:06", "upload_time_iso_8601": "2020-04-15T22:55:06.841343Z", "url": "https://files.pythonhosted.org/packages/2b/86/75f01cc9aaa2745b20666d42222bcbeb719fee522c4ca717010791bf039a/pymata4-1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f809ef230fae5e8c056b54f6f7352be", "sha256": "faeb34c64479d7d055fdcfc7d5cdb8ac194b3c918e1b232be60517796ea41156"}, "downloads": -1, "filename": "pymata4-1.2.tar.gz", "has_sig": false, "md5_digest": "4f809ef230fae5e8c056b54f6f7352be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20777, "upload_time": "2020-04-15T22:55:10", "upload_time_iso_8601": "2020-04-15T22:55:10.505711Z", "url": "https://files.pythonhosted.org/packages/19/c1/f1d45ad95a9173805393f5a59d8475df856c7c2cf3f6eab3d6184228d114/pymata4-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:29 2020"}