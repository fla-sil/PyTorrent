{"info": {"author": "TitanSnow", "author_email": "tttnns1024@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Environment :: Win32 (MS Windows)", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: Microsoft :: Windows :: Windows 10", "Operating System :: Microsoft :: Windows :: Windows 7", "Operating System :: Microsoft :: Windows :: Windows 8", "Operating System :: Microsoft :: Windows :: Windows 8.1", "Operating System :: Microsoft :: Windows :: Windows Server 2003", "Operating System :: Microsoft :: Windows :: Windows Server 2008", "Operating System :: Microsoft :: Windows :: Windows Vista", "Operating System :: Microsoft :: Windows :: Windows XP", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Terminals"], "description": "========\nyawinpty\n========\nyet another winpty binding for python\n\n.. image:: https://ci.appveyor.com/api/projects/status/vaa9vkgs8ihivyg9?svg=true\n  :target: https://ci.appveyor.com/project/TitanSnow/yawinpty\n  :alt: Build status\n.. image:: https://img.shields.io/github/license/PSoWin/yawinpty.svg\n  :target: LICENSE\n  :alt: LICENSE\n.. image:: https://img.shields.io/pypi/v/yawinpty.svg\n  :target: https://pypi.org/project/yawinpty\n  :alt: PyPI version\n.. image:: https://img.shields.io/pypi/status/yawinpty.svg\n  :target: https://pypi.org/project/yawinpty\n  :alt: Development status\n.. image:: https://img.shields.io/pypi/dm/yawinpty.svg\n  :target: https://pypi.org/project/yawinpty\n  :alt: Download per month\n.. image:: https://img.shields.io/pypi/wheel/yawinpty.svg\n  :target: https://pypi.org/project/yawinpty\n  :alt: wheel\n.. image:: https://img.shields.io/pypi/pyversions/yawinpty.svg\n  :target: https://pypi.org/project/yawinpty\n  :alt: Support python versions\n\ninstall\n=======\n\n.. code-block:: bash\n\n  pip install yawinpty\n\nruntime library dependency of pre-built wheels\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\npython 3.5+\n  depends on `Visual C++ Redistributable for Visual Studio 2015`_\n\nolder python\n  depends on *both* `Visual C++ Redistributable for Visual Studio 2015`_ and `Microsoft Visual C++ 2008 Redistributable Package`_\n\n.. _`Visual C++ Redistributable for Visual Studio 2015`: https://www.microsoft.com/en-us/download/details.aspx?id=48145\n.. _`Microsoft Visual C++ 2008 Redistributable Package`: https://www.microsoft.com/en-us/download/details.aspx?id=5582\n\nbuild from source\n=================\n\npython 3.5+\n  install `Visual C++ 2015 Build Tools`_, then use ``python setup.py build`` to build\n\nolder python\n  +----------+-----------------------+\n  |Visual C++|CPython version        |\n  +==========+=======================+\n  |10.0      |3.3, 3.4               |\n  +----------+-----------------------+\n  |9.0       |2.6, 2.7, 3.0, 3.1, 3.2|\n  +----------+-----------------------+\n\n \u807dinstall *both* `Visual C++ 2015 Build Tools`_ and the matching version of Visual C++ Build Tools. open \"Visual C++ *2015* Build Tools Command Prompt\" with the same arch as python, then use ``python setup.py build`` to build\n\n.. _`Visual C++ 2015 Build Tools`: http://landinghub.visualstudio.com/visual-cpp-build-tools\n\nbasic example\n=============\n\n.. code-block:: python\n\n  from yawinpty import *\n\n  with Pty() as pty:\n      pty.spawn(SpawnConfig(SpawnConfig.flag.auto_shutdown, cmdline='python -c \"print(\\'HelloWorld!\\')\"'))\n      with open(pty.conout_name(), 'r') as f:\n          print(f.read())\n\n\nusing ``yawinpty``\n==================\n\nthe common goal to use ``yawinpty`` is to open a pseudo terminal then spawn a process in it and send input to it's stdin and get output from it's stdout. yawinpty.Pty wrapper a pseudo-terminal and do the jobs\n\n*class* yawinpty.\\ *Pty*\\ (*config=yawinpty.Config()*)\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\nyawinpty.Pty accept a instance of yawinpty.Config as its config\n\n*class* yawinpty.\\ *Config*\\ (:emphasis:`\\*flags`)\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\nfor the flags to init a \"config class\" is commonly a set of Class.flag.\\*. example\\:\n\n.. code-block:: python\n\n  cfg = yawinpty.Config(yawinpty.Config.flag.plain_output)\n\n``help(yawinpty.Config.flag)`` for more supported flags\n\nfor ``yawinpty.SpawnConfig`` it's similar\n\n``help(yawinpty.Config)`` for more methods\n\ninstances of the ``Pty`` class have the following methods\\:\n\nPty.\\ *conin_name*\\ ()\n>>>>>>>>>>>>>>>>>>>>>>\n\nPty.\\ *conout_name*\\ ()\n>>>>>>>>>>>>>>>>>>>>>>>\n\nPty.\\ *conerr_name*\\ ()\n>>>>>>>>>>>>>>>>>>>>>>>\n\nget the name of console in/out/err pipe. the name could be passed to builtin ``open`` to open the pipe\n\nPty.\\ *agent_process_id*\\ ()\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\nget the process id of the agent process\n\nPty.\\ *set_size*\\ ()\n>>>>>>>>>>>>>>>>>>>>\n\nset window size of the terminal\n\nPty.\\ *spawn*\\ (\\ *spawn_config*\\ )\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\nspawn a process in the pty. spawn_config is a instance of ``yawinpty.SpawnConfig``. note that one Pty instance could only spawn once otherwise ``yawinpty.RespawnError`` would be raised\n\nreturns a tuple of *process id, thread id* of spawned process\n\n*class* yawinpty.\\ *SpawnConfig*\\ (:emphasis:`\\*spawnFlags, appname=None, cmdline=None, cwd=None, env=None`)\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n``spawnFlags``\n  the flags from ``yawinpty.SpawnConfig.flag``\n``appname``\n  full path to executable file. can be ``None`` if ``cmdline`` is specified\n``cmdline``\n  command line passed to the spawned process\n``cwd``\n  working directory for the spawned process\n``env``\n  the environ for the spawned process, a dict like ``{'VAR1': 'VAL1', 'VAR2': 'VAL2'}``\n\nnote that init a ``SpawnConfig`` *does not* spawn a process. a process is spawned only when calling ``Pty.spawn()``. one SpawnConfig instance could be used multitimes\n\nPty.\\ *wait_agent*\\ (\\ *timeout = yawinpty.INFINITE*\\ )\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\nPty.\\ *wait_subprocess*\\ (\\ *timeout = yawinpty.INFINITE*\\ )\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\nwait for agent/spawned process to exit. raise yawinpty.TimeoutExpired if out of timeout\n\nPty.\\ *close*\\ ()\n>>>>>>>>>>>>>>>>>\n\nkill processes not exited, close pty and release Windows resource\n\nexceptions\n>>>>>>>>>>\n\nall winpty related exceptions are subclasses of ``yawinpty.WinptyError``. ``help(yawinpty)`` for more information\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PSoWin/yawinpty", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "yawinpty-extra", "package_url": "https://pypi.org/project/yawinpty-extra/", "platform": "Windows", "project_url": "https://pypi.org/project/yawinpty-extra/", "project_urls": {"Homepage": "https://github.com/PSoWin/yawinpty"}, "release_url": "https://pypi.org/project/yawinpty-extra/0.1.0.dev1/", "requires_dist": ["pypiwin32", "yawinpty (>=0.4.3.dev4)"], "requires_python": "", "summary": "yet another winpty binding for python (extra package)", "version": "0.1.0.dev1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>yet another winpty binding for python</p>\n<a href=\"https://ci.appveyor.com/project/TitanSnow/yawinpty\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55ebb737253511b4ff955e9f2db61cba640328cb/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f76616139766b677338696869767967393f7376673d74727565\"></a>\n<a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"LICENSE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb7337d1096f1f3cf8ace5b600d455afdc1856e9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f50536f57696e2f796177696e7074792e737667\"></a>\n<a href=\"https://pypi.org/project/yawinpty\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3a6e18aebe69a2f70ed94ca1516c77a4029a1df/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f796177696e7074792e737667\"></a>\n<a href=\"https://pypi.org/project/yawinpty\" rel=\"nofollow\"><img alt=\"Development status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d868ff47e1b7299f575ff4c7bb034793fd7f39c8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f796177696e7074792e737667\"></a>\n<a href=\"https://pypi.org/project/yawinpty\" rel=\"nofollow\"><img alt=\"Download per month\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32e3b78508f05cbcf051138512ffedcf63fe0e63/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f796177696e7074792e737667\"></a>\n<a href=\"https://pypi.org/project/yawinpty\" rel=\"nofollow\"><img alt=\"wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c81b53b37eb5e2e5ba253c585c9c8fc66d99d92d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f796177696e7074792e737667\"></a>\n<a href=\"https://pypi.org/project/yawinpty\" rel=\"nofollow\"><img alt=\"Support python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c860a4cad661f43f99272552d6a4201ba98d70d2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f796177696e7074792e737667\"></a>\n<div id=\"install\">\n<h2>install</h2>\n<pre>pip install yawinpty\n</pre>\n<div id=\"runtime-library-dependency-of-pre-built-wheels\">\n<h3>runtime library dependency of pre-built wheels</h3>\n<dl>\n<dt>python 3.5+</dt>\n<dd>depends on <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=48145\" rel=\"nofollow\">Visual C++ Redistributable for Visual Studio 2015</a></dd>\n<dt>older python</dt>\n<dd>depends on <em>both</em> <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=48145\" rel=\"nofollow\">Visual C++ Redistributable for Visual Studio 2015</a> and <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=5582\" rel=\"nofollow\">Microsoft Visual C++ 2008 Redistributable Package</a></dd>\n</dl>\n</div>\n</div>\n<div id=\"build-from-source\">\n<h2>build from source</h2>\n<dl>\n<dt>python 3.5+</dt>\n<dd>install <a href=\"http://landinghub.visualstudio.com/visual-cpp-build-tools\" rel=\"nofollow\">Visual C++ 2015 Build Tools</a>, then use <tt>python setup.py build</tt> to build</dd>\n<dt>older python</dt>\n<dd><blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Visual C++</th>\n<th>CPython version</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>10.0</td>\n<td>3.3, 3.4</td>\n</tr>\n<tr><td>9.0</td>\n<td>2.6, 2.7, 3.0, 3.1, 3.2</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>\u807dinstall <em>both</em> <a href=\"http://landinghub.visualstudio.com/visual-cpp-build-tools\" rel=\"nofollow\">Visual C++ 2015 Build Tools</a> and the matching version of Visual C++ Build Tools. open \u201cVisual C++ <em>2015</em> Build Tools Command Prompt\u201d with the same arch as python, then use <tt>python setup.py build</tt> to build</p>\n</dd>\n</dl>\n</div>\n<div id=\"basic-example\">\n<h2>basic example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yawinpty</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Pty</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pty</span><span class=\"p\">:</span>\n    <span class=\"n\">pty</span><span class=\"o\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">SpawnConfig</span><span class=\"p\">(</span><span class=\"n\">SpawnConfig</span><span class=\"o\">.</span><span class=\"n\">flag</span><span class=\"o\">.</span><span class=\"n\">auto_shutdown</span><span class=\"p\">,</span> <span class=\"n\">cmdline</span><span class=\"o\">=</span><span class=\"s1\">'python -c \"print(</span><span class=\"se\">\\'</span><span class=\"s1\">HelloWorld!</span><span class=\"se\">\\'</span><span class=\"s1\">)\"'</span><span class=\"p\">))</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">pty</span><span class=\"o\">.</span><span class=\"n\">conout_name</span><span class=\"p\">(),</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"using-yawinpty\">\n<h2>using <tt>yawinpty</tt></h2>\n<p>the common goal to use <tt>yawinpty</tt> is to open a pseudo terminal then spawn a process in it and send input to it\u2019s stdin and get output from it\u2019s stdout. yawinpty.Pty wrapper a pseudo-terminal and do the jobs</p>\n<div id=\"class-yawinpty-pty-config-yawinpty-config\">\n<h3><em>class</em> yawinpty.<em>Pty</em>(<em>config=yawinpty.Config()</em>)</h3>\n<p>yawinpty.Pty accept a instance of yawinpty.Config as its config</p>\n</div>\n<div id=\"class-yawinpty-config-flags\">\n<h3><em>class</em> yawinpty.<em>Config</em>(<em>*flags</em>)</h3>\n<p>for the flags to init a \u201cconfig class\u201d is commonly a set of Class.flag.*. example:</p>\n<pre><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">yawinpty</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">yawinpty</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">flag</span><span class=\"o\">.</span><span class=\"n\">plain_output</span><span class=\"p\">)</span>\n</pre>\n<p><tt>help(yawinpty.Config.flag)</tt> for more supported flags</p>\n<p>for <tt>yawinpty.SpawnConfig</tt> it\u2019s similar</p>\n<p><tt>help(yawinpty.Config)</tt> for more methods</p>\n<p>instances of the <tt>Pty</tt> class have the following methods:</p>\n</div>\n<div id=\"pty-conin-name\">\n<h3>Pty.<em>conin_name</em>()</h3>\n</div>\n<div id=\"pty-conout-name\">\n<h3>Pty.<em>conout_name</em>()</h3>\n</div>\n<div id=\"pty-conerr-name\">\n<h3>Pty.<em>conerr_name</em>()</h3>\n<p>get the name of console in/out/err pipe. the name could be passed to builtin <tt>open</tt> to open the pipe</p>\n</div>\n<div id=\"pty-agent-process-id\">\n<h3>Pty.<em>agent_process_id</em>()</h3>\n<p>get the process id of the agent process</p>\n</div>\n<div id=\"pty-set-size\">\n<h3>Pty.<em>set_size</em>()</h3>\n<p>set window size of the terminal</p>\n</div>\n<div id=\"pty-spawn-spawn-config\">\n<h3>Pty.<em>spawn</em>(<em>spawn_config</em>)</h3>\n<p>spawn a process in the pty. spawn_config is a instance of <tt>yawinpty.SpawnConfig</tt>. note that one Pty instance could only spawn once otherwise <tt>yawinpty.RespawnError</tt> would be raised</p>\n<p>returns a tuple of <em>process id, thread id</em> of spawned process</p>\n</div>\n<div id=\"class-yawinpty-spawnconfig-spawnflags-appname-none-cmdline-none-cwd-none-env-none\">\n<h3><em>class</em> yawinpty.<em>SpawnConfig</em>(<em>*spawnFlags, appname=None, cmdline=None, cwd=None, env=None</em>)</h3>\n<dl>\n<dt><tt>spawnFlags</tt></dt>\n<dd>the flags from <tt>yawinpty.SpawnConfig.flag</tt></dd>\n<dt><tt>appname</tt></dt>\n<dd>full path to executable file. can be <tt>None</tt> if <tt>cmdline</tt> is specified</dd>\n<dt><tt>cmdline</tt></dt>\n<dd>command line passed to the spawned process</dd>\n<dt><tt>cwd</tt></dt>\n<dd>working directory for the spawned process</dd>\n<dt><tt>env</tt></dt>\n<dd>the environ for the spawned process, a dict like <tt>{'VAR1': 'VAL1', 'VAR2': 'VAL2'}</tt></dd>\n</dl>\n<p>note that init a <tt>SpawnConfig</tt> <em>does not</em> spawn a process. a process is spawned only when calling <tt>Pty.spawn()</tt>. one SpawnConfig instance could be used multitimes</p>\n</div>\n<div id=\"pty-wait-agent-timeout-yawinpty-infinite\">\n<h3>Pty.<em>wait_agent</em>(<em>timeout = yawinpty.INFINITE</em>)</h3>\n</div>\n<div id=\"pty-wait-subprocess-timeout-yawinpty-infinite\">\n<h3>Pty.<em>wait_subprocess</em>(<em>timeout = yawinpty.INFINITE</em>)</h3>\n<p>wait for agent/spawned process to exit. raise yawinpty.TimeoutExpired if out of timeout</p>\n</div>\n<div id=\"pty-close\">\n<h3>Pty.<em>close</em>()</h3>\n<p>kill processes not exited, close pty and release Windows resource</p>\n</div>\n<div id=\"exceptions\">\n<h3>exceptions</h3>\n<p>all winpty related exceptions are subclasses of <tt>yawinpty.WinptyError</tt>. <tt>help(yawinpty)</tt> for more information</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3026213, "releases": {"0.1.0.dev1": [{"comment_text": "", "digests": {"md5": "a0183eb4cdd477e17d949e93b92cb888", "sha256": "0e522895fa13a2476739badf6062b3cebeb6a80b7b68c79cee54761fcd5af2ae"}, "downloads": -1, "filename": "yawinpty_extra-0.1.0.dev1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a0183eb4cdd477e17d949e93b92cb888", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6721, "upload_time": "2017-07-16T07:50:27", "upload_time_iso_8601": "2017-07-16T07:50:27.328006Z", "url": "https://files.pythonhosted.org/packages/a4/81/c98523f8ac136c0522c9d02a4574a37b62eba75cc829dc9e7dc878bd0a14/yawinpty_extra-0.1.0.dev1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a0183eb4cdd477e17d949e93b92cb888", "sha256": "0e522895fa13a2476739badf6062b3cebeb6a80b7b68c79cee54761fcd5af2ae"}, "downloads": -1, "filename": "yawinpty_extra-0.1.0.dev1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a0183eb4cdd477e17d949e93b92cb888", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6721, "upload_time": "2017-07-16T07:50:27", "upload_time_iso_8601": "2017-07-16T07:50:27.328006Z", "url": "https://files.pythonhosted.org/packages/a4/81/c98523f8ac136c0522c9d02a4574a37b62eba75cc829dc9e7dc878bd0a14/yawinpty_extra-0.1.0.dev1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:22:39 2020"}