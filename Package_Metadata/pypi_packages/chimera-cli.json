{"info": {"author": "Me", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# CLI\n\nThe chimera CLI handles basic communication with the chimera cluster and image building through docker. All commands should be run from a folder that is contained in a git repository, since the CLI relies on it's tagging to tag images in the build process.\n\n## Installation\nRun the following command on this folder\n```Bash\nmake build\n```\n## Init\n\nThe `init` command initializes a repository to contain the needed files for the CLI. Should be run on an empty directory, and will prompt the user to inform all needed information for connection with the cluster.\n\n### Usage\n\n    chimera init [-h] [--help]\n\n## Deploy\n\nThe `deploy` command sends chimera elements to the chimera cluster. All chimera elements should be defined in `YAML` files, which should be in the following format\n\n### Pipeline\n\n    version: 1.0\n    type: pipeline # this specifies the type of the yaml (required) (pipeline or channel)\n\n    namespace: example # this is the name of the namespace (required)\n\n    name: example_pipeline # this is the name of the pipeline (required)\n\n    apps:   # this is the definition of the nodes in the pipeline (required)\n    \t# many nodes can be defined in a pipeline, and all\n    \t# will be deployed upon deploying the pipeline\n\n    \texample_node1: # this is the name of the node (required)\n\n    \t\tbuild:  # this is the necessary information \n    \t\t\t# for the build of the node (required)\n    \t\t\timage: example_image # image path (required)\n    \t\t\tcontext: example_node1 # Dockerfile context (required)\n\n    \t\tinputs: # defines the names of the input channels (optional)\n    \t\t\t- example_channel1\n\n    \t\toutputs: # defines the names of the output channels (optional)\n    \t\t\t- example_channel2\n\n    \t\texpose: 80      # port which should be exposed in the ingress\n    \t\t\t\t# the node will be accessible through the path\n    \t\t\t\t# {namespace}.inspr.com/{name}\n    \t\t\t\t# where namespace is the name of the namespace\n    \t\t\t\t# and name is the name of the node\n    \t\t\t\t# (optional)\n\n    \t\treplicas: 2     # number of replicas of the kubernetes deployment\n    \t\t\t\t# object (optional) (default: 3)\n\n    \t\tenv:    # defines the environment variables which should be passed\n    \t\t\t# on to the deployment object (optional)\n\n    \t\t\tEXAMPLE_VARIABLE: EXAMPLE_VALUE # definition of an environment variable\n\n\n### Channel\n\n    version: 1.0\n\n    type: channel # this specifies the type of the yaml (required) (pipeline or channel)\n\n    namespace: example # this is the name of the namespace (required)\n\n    channels: # from here starts the channel definition (required)\n    \texample_channel1: example_channel1.avsc # this is the definition of a channel\n    \t\t\t\t\t\t# the definition consists on the name\n    \t\t\t\t\t\t# of the channel on the left and the\n    \t\t\t\t\t\t# corresponding avro schema file on\n    \t\t\t\t\t\t# the right (required)\n\n### Usage\n\n    chimera deploy [-h] [--namespace NAMESPACE] {pipeline,channel}\n\nThe `namespace` argument specifies the namespace from which elements will be deployed. When specified, only elements defined in the corresponding namespace will be created and sent to the cluster.\n\n### Subcommands\n\nThe `pipeline` and `channel` subcommands specify what type of elements will be sent to chimera. When neither is specified, both are sent to the cluster.\n\nWhenever a `pipeline` is set to be sent, it triggers the build for the image in it's apps. This build is made through `docker` and tags the image with the current `git describe` command output.\n\n### Subcommand arguments\n\nThe `name` argument specifies the name of the pipeline or channel that will be sent to chimera. When specified, only the pipelines or channels that have that name will be sent.\n\n## Delete\n\nThe `delete` command deletes an element from chimera. When using the command, the `namespace` argument must be set.\n\n### Usage\n\n    chimera delete [-h] [--namespace NAMESPACE] {pipeline,channel} \n\nThe `delete` command needs namespace specification. When the namespace is not set, the command fails.\n\n### Subcommands\n\nThe `pipeline` and `channel` subcommands specify which type of elements will be deleted from chimera. When neither is set, both pipelines and channels contained in the specified namespace will be deleted.\n\n### Subcommand arguments\n\nThe `name` argument from the subcommands specify the name of the pipeline or channel that will be deleted from the chimera cluster. When not set, all of the corresponding elements will be deleted from the given namespace.\n\n## Get\n\nThe `get` command gets information from the running chimera cluster's namespaces, pipelines and channels.\n\n### Usage\n\n    chimera get [-h] [--namespace NAMESPACE] {pipeline,channel}\n\nThe `namespace` argument specifies which namespace you want to get the information from. When not specified, the cluster will respond with information from all namespaces.\n\n### Subcommands\n\nThe `pipeline` and `channel` subcommands specify which type of elements will be gotten from the chimera cluster. Currently, there is no information on specific pipelines and channels, so whenever you send the command, the information on all of the specified type will be received.\n\n## Watch\n\nThe `watch` command starts a routine that looks for changes in files contained in the contexts specified in the pipeline YAML files, and triggers a build process to them whenever there is a change.\n\n\n\n### Usage\n\n    chimera watch [-h] [--help]# Chimera CLI\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "chimera-cli", "package_url": "https://pypi.org/project/chimera-cli/", "platform": "", "project_url": "https://pypi.org/project/chimera-cli/", "project_urls": null, "release_url": "https://pypi.org/project/chimera-cli/1.0/", "requires_dist": ["setuptools", "requests", "pyyaml", "avro-python3", "docker", "git-python", "watchdog"], "requires_python": ">=3.6", "summary": "Command line interface for chimera", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CLI</h1>\n<p>The chimera CLI handles basic communication with the chimera cluster and image building through docker. All commands should be run from a folder that is contained in a git repository, since the CLI relies on it's tagging to tag images in the build process.</p>\n<h2>Installation</h2>\n<p>Run the following command on this folder</p>\n<pre>make build\n</pre>\n<h2>Init</h2>\n<p>The <code>init</code> command initializes a repository to contain the needed files for the CLI. Should be run on an empty directory, and will prompt the user to inform all needed information for connection with the cluster.</p>\n<h3>Usage</h3>\n<pre><code>chimera init [-h] [--help]\n</code></pre>\n<h2>Deploy</h2>\n<p>The <code>deploy</code> command sends chimera elements to the chimera cluster. All chimera elements should be defined in <code>YAML</code> files, which should be in the following format</p>\n<h3>Pipeline</h3>\n<pre><code>version: 1.0\ntype: pipeline # this specifies the type of the yaml (required) (pipeline or channel)\n\nnamespace: example # this is the name of the namespace (required)\n\nname: example_pipeline # this is the name of the pipeline (required)\n\napps:   # this is the definition of the nodes in the pipeline (required)\n\t# many nodes can be defined in a pipeline, and all\n\t# will be deployed upon deploying the pipeline\n\n\texample_node1: # this is the name of the node (required)\n\n\t\tbuild:  # this is the necessary information \n\t\t\t# for the build of the node (required)\n\t\t\timage: example_image # image path (required)\n\t\t\tcontext: example_node1 # Dockerfile context (required)\n\n\t\tinputs: # defines the names of the input channels (optional)\n\t\t\t- example_channel1\n\n\t\toutputs: # defines the names of the output channels (optional)\n\t\t\t- example_channel2\n\n\t\texpose: 80      # port which should be exposed in the ingress\n\t\t\t\t# the node will be accessible through the path\n\t\t\t\t# {namespace}.inspr.com/{name}\n\t\t\t\t# where namespace is the name of the namespace\n\t\t\t\t# and name is the name of the node\n\t\t\t\t# (optional)\n\n\t\treplicas: 2     # number of replicas of the kubernetes deployment\n\t\t\t\t# object (optional) (default: 3)\n\n\t\tenv:    # defines the environment variables which should be passed\n\t\t\t# on to the deployment object (optional)\n\n\t\t\tEXAMPLE_VARIABLE: EXAMPLE_VALUE # definition of an environment variable\n</code></pre>\n<h3>Channel</h3>\n<pre><code>version: 1.0\n\ntype: channel # this specifies the type of the yaml (required) (pipeline or channel)\n\nnamespace: example # this is the name of the namespace (required)\n\nchannels: # from here starts the channel definition (required)\n\texample_channel1: example_channel1.avsc # this is the definition of a channel\n\t\t\t\t\t\t# the definition consists on the name\n\t\t\t\t\t\t# of the channel on the left and the\n\t\t\t\t\t\t# corresponding avro schema file on\n\t\t\t\t\t\t# the right (required)\n</code></pre>\n<h3>Usage</h3>\n<pre><code>chimera deploy [-h] [--namespace NAMESPACE] {pipeline,channel}\n</code></pre>\n<p>The <code>namespace</code> argument specifies the namespace from which elements will be deployed. When specified, only elements defined in the corresponding namespace will be created and sent to the cluster.</p>\n<h3>Subcommands</h3>\n<p>The <code>pipeline</code> and <code>channel</code> subcommands specify what type of elements will be sent to chimera. When neither is specified, both are sent to the cluster.</p>\n<p>Whenever a <code>pipeline</code> is set to be sent, it triggers the build for the image in it's apps. This build is made through <code>docker</code> and tags the image with the current <code>git describe</code> command output.</p>\n<h3>Subcommand arguments</h3>\n<p>The <code>name</code> argument specifies the name of the pipeline or channel that will be sent to chimera. When specified, only the pipelines or channels that have that name will be sent.</p>\n<h2>Delete</h2>\n<p>The <code>delete</code> command deletes an element from chimera. When using the command, the <code>namespace</code> argument must be set.</p>\n<h3>Usage</h3>\n<pre><code>chimera delete [-h] [--namespace NAMESPACE] {pipeline,channel} \n</code></pre>\n<p>The <code>delete</code> command needs namespace specification. When the namespace is not set, the command fails.</p>\n<h3>Subcommands</h3>\n<p>The <code>pipeline</code> and <code>channel</code> subcommands specify which type of elements will be deleted from chimera. When neither is set, both pipelines and channels contained in the specified namespace will be deleted.</p>\n<h3>Subcommand arguments</h3>\n<p>The <code>name</code> argument from the subcommands specify the name of the pipeline or channel that will be deleted from the chimera cluster. When not set, all of the corresponding elements will be deleted from the given namespace.</p>\n<h2>Get</h2>\n<p>The <code>get</code> command gets information from the running chimera cluster's namespaces, pipelines and channels.</p>\n<h3>Usage</h3>\n<pre><code>chimera get [-h] [--namespace NAMESPACE] {pipeline,channel}\n</code></pre>\n<p>The <code>namespace</code> argument specifies which namespace you want to get the information from. When not specified, the cluster will respond with information from all namespaces.</p>\n<h3>Subcommands</h3>\n<p>The <code>pipeline</code> and <code>channel</code> subcommands specify which type of elements will be gotten from the chimera cluster. Currently, there is no information on specific pipelines and channels, so whenever you send the command, the information on all of the specified type will be received.</p>\n<h2>Watch</h2>\n<p>The <code>watch</code> command starts a routine that looks for changes in files contained in the contexts specified in the pipeline YAML files, and triggers a build process to them whenever there is a change.</p>\n<h3>Usage</h3>\n<pre><code>chimera watch [-h] [--help]# Chimera CLI\n</code></pre>\n\n          </div>"}, "last_serial": 6944101, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "17a1f2ead78b5e91c900b9b002314044", "sha256": "abf263f63c8ff81c95423c1ccac64af5bae44c7d292ac389deb070a57d8036c3"}, "downloads": -1, "filename": "chimera_cli-1.0-py3.7.egg", "has_sig": false, "md5_digest": "17a1f2ead78b5e91c900b9b002314044", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 14869, "upload_time": "2020-04-03T15:21:09", "upload_time_iso_8601": "2020-04-03T15:21:09.419772Z", "url": "https://files.pythonhosted.org/packages/c1/af/817a1b163a8433f9ad9a711a10705f4beec1a4fc3588584543519ecdbb2f/chimera_cli-1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "77b1c607cdcd03633f5362fed704f5c7", "sha256": "0cb734ee0cea84e76ecf9e91ed504926cd20d88fea8b2cc9397869c8a65e3474"}, "downloads": -1, "filename": "chimera_cli-1.0-py3.8.egg", "has_sig": false, "md5_digest": "77b1c607cdcd03633f5362fed704f5c7", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.6", "size": 17858, "upload_time": "2020-04-03T15:21:10", "upload_time_iso_8601": "2020-04-03T15:21:10.713956Z", "url": "https://files.pythonhosted.org/packages/8b/83/9792a1717429be05746c71ed7b4457402629e45330270289339e7cbac193/chimera_cli-1.0-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3364e71ccccc8eccf8a810637eaa879f", "sha256": "b599ac0f560c4df7aabf1445e8a4b231985332db487f73c407ebcb0d4cc7afe1"}, "downloads": -1, "filename": "chimera_cli-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3364e71ccccc8eccf8a810637eaa879f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12432, "upload_time": "2020-04-03T15:21:06", "upload_time_iso_8601": "2020-04-03T15:21:06.908138Z", "url": "https://files.pythonhosted.org/packages/22/2e/bcdcc14e9ca4190b193220807a2ebdbb8193beeb56b3056866c59ce0e424/chimera_cli-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55612522cb96ad55426fc4210db1fae5", "sha256": "0d59e89d0072d5895ada5ce0a38ad7fafe56e10c01c1270c696ac47c4be26fc7"}, "downloads": -1, "filename": "chimera_cli-1.0.tar.gz", "has_sig": false, "md5_digest": "55612522cb96ad55426fc4210db1fae5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10074, "upload_time": "2020-04-03T15:21:11", "upload_time_iso_8601": "2020-04-03T15:21:11.751417Z", "url": "https://files.pythonhosted.org/packages/23/7d/fe1ef233164c2e24e525b316050b6a85a773099e97d63f2e0f47660bc973/chimera_cli-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17a1f2ead78b5e91c900b9b002314044", "sha256": "abf263f63c8ff81c95423c1ccac64af5bae44c7d292ac389deb070a57d8036c3"}, "downloads": -1, "filename": "chimera_cli-1.0-py3.7.egg", "has_sig": false, "md5_digest": "17a1f2ead78b5e91c900b9b002314044", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 14869, "upload_time": "2020-04-03T15:21:09", "upload_time_iso_8601": "2020-04-03T15:21:09.419772Z", "url": "https://files.pythonhosted.org/packages/c1/af/817a1b163a8433f9ad9a711a10705f4beec1a4fc3588584543519ecdbb2f/chimera_cli-1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "77b1c607cdcd03633f5362fed704f5c7", "sha256": "0cb734ee0cea84e76ecf9e91ed504926cd20d88fea8b2cc9397869c8a65e3474"}, "downloads": -1, "filename": "chimera_cli-1.0-py3.8.egg", "has_sig": false, "md5_digest": "77b1c607cdcd03633f5362fed704f5c7", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.6", "size": 17858, "upload_time": "2020-04-03T15:21:10", "upload_time_iso_8601": "2020-04-03T15:21:10.713956Z", "url": "https://files.pythonhosted.org/packages/8b/83/9792a1717429be05746c71ed7b4457402629e45330270289339e7cbac193/chimera_cli-1.0-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3364e71ccccc8eccf8a810637eaa879f", "sha256": "b599ac0f560c4df7aabf1445e8a4b231985332db487f73c407ebcb0d4cc7afe1"}, "downloads": -1, "filename": "chimera_cli-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3364e71ccccc8eccf8a810637eaa879f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12432, "upload_time": "2020-04-03T15:21:06", "upload_time_iso_8601": "2020-04-03T15:21:06.908138Z", "url": "https://files.pythonhosted.org/packages/22/2e/bcdcc14e9ca4190b193220807a2ebdbb8193beeb56b3056866c59ce0e424/chimera_cli-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55612522cb96ad55426fc4210db1fae5", "sha256": "0d59e89d0072d5895ada5ce0a38ad7fafe56e10c01c1270c696ac47c4be26fc7"}, "downloads": -1, "filename": "chimera_cli-1.0.tar.gz", "has_sig": false, "md5_digest": "55612522cb96ad55426fc4210db1fae5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10074, "upload_time": "2020-04-03T15:21:11", "upload_time_iso_8601": "2020-04-03T15:21:11.751417Z", "url": "https://files.pythonhosted.org/packages/23/7d/fe1ef233164c2e24e525b316050b6a85a773099e97d63f2e0f47660bc973/chimera_cli-1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:35 2020"}