{"info": {"author": "Wes Mason", "author_email": "wes@serverdensity.com", "bugtrack_url": null, "classifiers": [], "description": "densli\n======\n\nAbout densli\n------------\n``densli`` is a command line client for accessing the `Server Density <http://www.serverdensity.com>`_ `API <https://github.com/serverdensity/sd-api-docs>`_ with the following features:\n\n * Store authentication details in a config file, or pass them as command options\n * Extensive error checking\n * Display metric ranges as a sparklines graph\n * Pretty ``TERM`` colours!\n * Outputs JSON in an indented human readable (but still machine readable) format\n * Can accept data to send as JSON via piped ``stdin``\n * Suppress none JSON data output via option to pipe data to other processes\n * Flexible ways to define API endpoints and data to send (different API path formats and add data via ``stdin``, named options or as extra unnamed arguments)\n\nInstallation\n------------\nThe app can be installed from PyPi using ``pip``::\n\n    pip install densli\n\nOr cloned from `Github <http://www.github.com/>`_ using ``git``::\n\n    git clone git://github.com/serverdensity/densli.git\n    cd densli\n    python setup.py install\n\nUsage\n-----\ndensli uses a JSON config file to store authentication info (account / username / passord), and other options.\nTo create an example config file you can edit with your SD details just run\n``densli`` for the first time, it will report where it has created the config\nfile (this is usually in a standard location for configurations for your\noperating system, e.g. under ``$HOME/Library/Application Support/Densli`` under OS X).\n\nDENSLI_HOME environment variable\n********************************\n\nThe location for this config file can be changed using the environment variable ``DENSLI_HOME``, e.g.::\n\n    DENSLI_HOME=~/.densli\n    export DENSLI_HOME\n    densli ...\n\nAny or all of the auth details can be overridden as options passed to densli, this is useful for running from scripts where you don't want to keep your auth details stored in a file, e.g.::\n\n    densli --username=myusername --password=mypassword --account=myaccount.serverdensity.com ...\n\n--help\n******\n\nYou can get a list/descrption of all the available options using ``-h`` or ``--help`` options.\n\nAPI endpoints\n*************\n\nYou can use densli to get results back from any of the `Server Density API <https://github.com/serverdensity/sd-api-docs>`_ endpoints, for example to access the `devices list <https://github.com/serverdensity/sd-api-docs/blob/master/sections/devices.md#list>`_::\n\n    densli devices list\n\nThe above format \"<section> <method>\" can also be represented using a '/' or '.', e.g.:\n\n * ``devices.list``\n * ``devices/list``\n\ndata\n****\n\nData to send to an endpoint can be defined as name-value pairs (seperated by an equals sign ``=``) using multiple ``-d`` or ``--data`` options, as piped in JSON, or as trailing name-value pair arguements, e.g. these are all the same::\n\n    densli metrics getLatest -d deviceId=4e95d575160ba0212b003356\n\n    densli metrics getLatest --data=deviceId=4e95d575160ba0212b003356\n\n    densli metrics getLatest deviceId=4e95d575160ba0212b003356\n\n    echo '{ \"deviceId\": \"4e95d575160ba0212b003356\" }' | densli metrics getLatest\n\n--quiet\n*******\n\ndensli is rather vocal about picking up settings and how it handles things (via ``STDOUT``), or about errors (via ``STDERR``), you might not want anything sent to ``STDOUT`` if you're piping densli's output to another process, to silence non-API output use the ``-q`` or ``-quiet`` options.\n\n--spark\n*******\n\nThe default output for densli commands is human-readable JSON (indented with 4 spaces, regardless of the format that came back from the SD API), but for the `metrics getRange <https://github.com/serverdensity/sd-api-docs/blob/master/sections/metrics.md#get-range>`_ endpoint you can also get results outputted as a sparkline bargraphs (using the unicode characters 9601-9608) with the ``-s`` or ``--spark`` option, e.g.::\n\n    densli metrics getRange -d deviceId=4e95d575160ba0212b003356 -d metric=diskUsage \\\n    -d rangeStart=012-08-25T00:00:00 -d rangeEnd=012-08-30T00:00:00 --spark\n\nWill output something like::\n\n    >>> /dev Used for 012-08-25T00:00:00 - 012-08-30T00:00:00:\n    \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\n    >>> /boot Used for 012-08-25T00:00:00 - 012-08-30T00:00:00:\n    \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\n    >>> / Used for 012-08-25T00:00:00 - 012-08-30T00:00:00:\n    \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2586\u2583\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\n    >>> /var/lib/ureadahead/debugfs Used for 012-08-25T00:00:00 - 012-08-30T00:00:00:\n    \u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2586\u2583\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\n\nBy default sparkline graphs are limited to a width of 20 characters for display purposes, but you can override this by setting the \"max_graph_width\" option to an integer of your choice in your ``config.json`` file.\n\n--timeago\n*********\n\nA shortcut for defining a relative time offset for ``metrics.getRange`` calls is provided with the ``-t`` and ``--timeago`` options. This lets you easily see recent metrics for a period up to right now, and accepts days, hours, minutes, and seconds in various formats, e.g.::\n\n    densli metrics getRange deviceId=4e95d575160ba0212b003356 metric=diskUsage \\\n    --spark -t 30m # past 30 minutes\n\n    densli metrics getRange deviceId=4e95d575160ba0212b003356 metric=diskUsage \\\n    --spark -t 1hour # past hour\n\n    densli metrics getRange deviceId=4e95d575160ba0212b003356 metric=diskUsage \\\n    --spark -timeago=\"1h 15min\" # past hour and a quarter\n\n    densli metrics getRange deviceId=4e95d575160ba0212b003356 metric=diskUsage \\\n    --spark -timeago=\"1d 30s\" # past day and 30 seconds\n\n--postback\n**********\n\nTo make sending postbacks to the `metrics.postback endpoint\n<https://github.com/serverdensity/sd-api-docs/blob/master/sections/metrics.md#postback>`_ with piped in data more convenient you can use the ``-P`` or ``--postback`` option to flag ``STDIN`` data as a raw JSON payload which will be sent in a ``payload`` field as the postback endpoint expects, e.g.::\n\n    echo '{ \"agentKey\": \"blah\", \"someMetric\": [...], \"someOtherMetric\": 1.0 }' \\\n    | densli metrics postback deviceId=4e95d575160ba0212b003356 --postback", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/serverdensity/densli", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "densli", "package_url": "https://pypi.org/project/densli/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/densli/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/serverdensity/densli"}, "release_url": "https://pypi.org/project/densli/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "CLI tool for working with the ServerDensity.com API", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about-densli\">\n<h2>About densli</h2>\n<p><tt>densli</tt> is a command line client for accessing the <a href=\"http://www.serverdensity.com\" rel=\"nofollow\">Server Density</a> <a href=\"https://github.com/serverdensity/sd-api-docs\" rel=\"nofollow\">API</a> with the following features:</p>\n<blockquote>\n<ul>\n<li>Store authentication details in a config file, or pass them as command options</li>\n<li>Extensive error checking</li>\n<li>Display metric ranges as a sparklines graph</li>\n<li>Pretty <tt>TERM</tt> colours!</li>\n<li>Outputs JSON in an indented human readable (but still machine readable) format</li>\n<li>Can accept data to send as JSON via piped <tt>stdin</tt></li>\n<li>Suppress none JSON data output via option to pipe data to other processes</li>\n<li>Flexible ways to define API endpoints and data to send (different API path formats and add data via <tt>stdin</tt>, named options or as extra unnamed arguments)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The app can be installed from PyPi using <tt>pip</tt>:</p>\n<pre>pip install densli\n</pre>\n<p>Or cloned from <a href=\"http://www.github.com/\" rel=\"nofollow\">Github</a> using <tt>git</tt>:</p>\n<pre>git clone git://github.com/serverdensity/densli.git\ncd densli\npython setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>densli uses a JSON config file to store authentication info (account / username / passord), and other options.\nTo create an example config file you can edit with your SD details just run\n<tt>densli</tt> for the first time, it will report where it has created the config\nfile (this is usually in a standard location for configurations for your\noperating system, e.g. under <tt>$HOME/Library/Application Support/Densli</tt> under OS X).</p>\n<div id=\"densli-home-environment-variable\">\n<h3>DENSLI_HOME environment variable</h3>\n<p>The location for this config file can be changed using the environment variable <tt>DENSLI_HOME</tt>, e.g.:</p>\n<pre>DENSLI_HOME=~/.densli\nexport DENSLI_HOME\ndensli ...\n</pre>\n<p>Any or all of the auth details can be overridden as options passed to densli, this is useful for running from scripts where you don\u2019t want to keep your auth details stored in a file, e.g.:</p>\n<pre>densli --username=myusername --password=mypassword --account=myaccount.serverdensity.com ...\n</pre>\n</div>\n<div id=\"help\">\n<h3>\u2013help</h3>\n<p>You can get a list/descrption of all the available options using <tt><span class=\"pre\">-h</span></tt> or <tt><span class=\"pre\">--help</span></tt> options.</p>\n</div>\n<div id=\"api-endpoints\">\n<h3>API endpoints</h3>\n<p>You can use densli to get results back from any of the <a href=\"https://github.com/serverdensity/sd-api-docs\" rel=\"nofollow\">Server Density API</a> endpoints, for example to access the <a href=\"https://github.com/serverdensity/sd-api-docs/blob/master/sections/devices.md#list\" rel=\"nofollow\">devices list</a>:</p>\n<pre>densli devices list\n</pre>\n<p>The above format \u201c&lt;section&gt; &lt;method&gt;\u201d can also be represented using a \u2018/\u2019 or \u2018.\u2019, e.g.:</p>\n<blockquote>\n<ul>\n<li><tt>devices.list</tt></li>\n<li><tt>devices/list</tt></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"data\">\n<h3>data</h3>\n<p>Data to send to an endpoint can be defined as name-value pairs (seperated by an equals sign <tt>=</tt>) using multiple <tt><span class=\"pre\">-d</span></tt> or <tt><span class=\"pre\">--data</span></tt> options, as piped in JSON, or as trailing name-value pair arguements, e.g. these are all the same:</p>\n<pre>densli metrics getLatest -d deviceId=4e95d575160ba0212b003356\n\ndensli metrics getLatest --data=deviceId=4e95d575160ba0212b003356\n\ndensli metrics getLatest deviceId=4e95d575160ba0212b003356\n\necho '{ \"deviceId\": \"4e95d575160ba0212b003356\" }' | densli metrics getLatest\n</pre>\n</div>\n<div id=\"quiet\">\n<h3>\u2013quiet</h3>\n<p>densli is rather vocal about picking up settings and how it handles things (via <tt>STDOUT</tt>), or about errors (via <tt>STDERR</tt>), you might not want anything sent to <tt>STDOUT</tt> if you\u2019re piping densli\u2019s output to another process, to silence non-API output use the <tt><span class=\"pre\">-q</span></tt> or <tt><span class=\"pre\">-quiet</span></tt> options.</p>\n</div>\n<div id=\"spark\">\n<h3>\u2013spark</h3>\n<p>The default output for densli commands is human-readable JSON (indented with 4 spaces, regardless of the format that came back from the SD API), but for the <a href=\"https://github.com/serverdensity/sd-api-docs/blob/master/sections/metrics.md#get-range\" rel=\"nofollow\">metrics getRange</a> endpoint you can also get results outputted as a sparkline bargraphs (using the unicode characters 9601-9608) with the <tt><span class=\"pre\">-s</span></tt> or <tt><span class=\"pre\">--spark</span></tt> option, e.g.:</p>\n<pre>densli metrics getRange -d deviceId=4e95d575160ba0212b003356 -d metric=diskUsage \\\n-d rangeStart=012-08-25T00:00:00 -d rangeEnd=012-08-30T00:00:00 --spark\n</pre>\n<p>Will output something like:</p>\n<pre>&gt;&gt;&gt; /dev Used for 012-08-25T00:00:00 - 012-08-30T00:00:00:\n\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\n&gt;&gt;&gt; /boot Used for 012-08-25T00:00:00 - 012-08-30T00:00:00:\n\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\n&gt;&gt;&gt; / Used for 012-08-25T00:00:00 - 012-08-30T00:00:00:\n\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2586\u2583\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\n&gt;&gt;&gt; /var/lib/ureadahead/debugfs Used for 012-08-25T00:00:00 - 012-08-30T00:00:00:\n\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2586\u2583\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\n</pre>\n<p>By default sparkline graphs are limited to a width of 20 characters for display purposes, but you can override this by setting the \u201cmax_graph_width\u201d option to an integer of your choice in your <tt>config.json</tt> file.</p>\n</div>\n<div id=\"timeago\">\n<h3>\u2013timeago</h3>\n<p>A shortcut for defining a relative time offset for <tt>metrics.getRange</tt> calls is provided with the <tt><span class=\"pre\">-t</span></tt> and <tt><span class=\"pre\">--timeago</span></tt> options. This lets you easily see recent metrics for a period up to right now, and accepts days, hours, minutes, and seconds in various formats, e.g.:</p>\n<pre>densli metrics getRange deviceId=4e95d575160ba0212b003356 metric=diskUsage \\\n--spark -t 30m # past 30 minutes\n\ndensli metrics getRange deviceId=4e95d575160ba0212b003356 metric=diskUsage \\\n--spark -t 1hour # past hour\n\ndensli metrics getRange deviceId=4e95d575160ba0212b003356 metric=diskUsage \\\n--spark -timeago=\"1h 15min\" # past hour and a quarter\n\ndensli metrics getRange deviceId=4e95d575160ba0212b003356 metric=diskUsage \\\n--spark -timeago=\"1d 30s\" # past day and 30 seconds\n</pre>\n</div>\n<div id=\"postback\">\n<h3>\u2013postback</h3>\n<p>To make sending postbacks to the <a href=\"https://github.com/serverdensity/sd-api-docs/blob/master/sections/metrics.md#postback\" rel=\"nofollow\">metrics.postback endpoint</a> with piped in data more convenient you can use the <tt><span class=\"pre\">-P</span></tt> or <tt><span class=\"pre\">--postback</span></tt> option to flag <tt>STDIN</tt> data as a raw JSON payload which will be sent in a <tt>payload</tt> field as the postback endpoint expects, e.g.:</p>\n<pre>echo '{ \"agentKey\": \"blah\", \"someMetric\": [...], \"someOtherMetric\": 1.0 }' \\\n| densli metrics postback deviceId=4e95d575160ba0212b003356 --postback\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 751558, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3e3547182be2e137f53b25d9029ebc04", "sha256": "e99b9fa4ee65b770db215a434d57c3f003eb1e1ccede5787981de32ebcd068ea"}, "downloads": -1, "filename": "densli-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3e3547182be2e137f53b25d9029ebc04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7760, "upload_time": "2012-08-31T10:36:34", "upload_time_iso_8601": "2012-08-31T10:36:34.244385Z", "url": "https://files.pythonhosted.org/packages/a2/4e/36522e591d38fb984487cebca80cf8ffefa81265ac5b1ad850b303926556/densli-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ea44150895323f3c66ad2c459c82521b", "sha256": "e414ffaae277112b528eba9108f22213bfff1cf674d2906b7b343a0829b9a4e0"}, "downloads": -1, "filename": "densli-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ea44150895323f3c66ad2c459c82521b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7849, "upload_time": "2012-08-31T10:37:02", "upload_time_iso_8601": "2012-08-31T10:37:02.444193Z", "url": "https://files.pythonhosted.org/packages/ce/8c/2fdd79195435341782dfa6462aa5ddb4cca127e1dafe134c81f872e9ffda/densli-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "4d606103e874cfe52aa1827f545305ee", "sha256": "506a2cad86e05684ae9eb56e6ceaf02674f0cff5bf823f2c19e81ce5a93d394a"}, "downloads": -1, "filename": "densli-1.0.2.tar.gz", "has_sig": false, "md5_digest": "4d606103e874cfe52aa1827f545305ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8720, "upload_time": "2012-08-31T21:41:45", "upload_time_iso_8601": "2012-08-31T21:41:45.870867Z", "url": "https://files.pythonhosted.org/packages/7e/51/ff7a056f631778870831d6bd2174150d7bf586fbd1d35007129b624291b4/densli-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "71bd01509f2c5a0e15640dc048e73089", "sha256": "8a606446c4aa429c3d64f2ff6cfcd9a3dac94be553751eb201835119efd9f36e"}, "downloads": -1, "filename": "densli-1.0.3.tar.gz", "has_sig": false, "md5_digest": "71bd01509f2c5a0e15640dc048e73089", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8855, "upload_time": "2012-09-05T09:33:41", "upload_time_iso_8601": "2012-09-05T09:33:41.743863Z", "url": "https://files.pythonhosted.org/packages/ab/4e/7516be7af1772f2428a0d06a57553b63539e04939be3c012128032a5d71f/densli-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71bd01509f2c5a0e15640dc048e73089", "sha256": "8a606446c4aa429c3d64f2ff6cfcd9a3dac94be553751eb201835119efd9f36e"}, "downloads": -1, "filename": "densli-1.0.3.tar.gz", "has_sig": false, "md5_digest": "71bd01509f2c5a0e15640dc048e73089", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8855, "upload_time": "2012-09-05T09:33:41", "upload_time_iso_8601": "2012-09-05T09:33:41.743863Z", "url": "https://files.pythonhosted.org/packages/ab/4e/7516be7af1772f2428a0d06a57553b63539e04939be3c012128032a5d71f/densli-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:06 2020"}