{"info": {"author": "Vincenzo Arcidiacono", "author_email": "vinci1it2000@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: European Union Public Licence 1.1 (EUPL 1.1)", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "\nAbout xlref\n***********\n\n**xlref** is an useful library to capture by a simple reference (e.g.,\n*A1(RD):..:RD*) a table with non-empty cells from Excel-sheets when\nits exact position is not known beforehand.\n\nThis code was inspired by the *xleash* module of the `pandalone\n<https://github.com/pandalone/pandalone>`_ library. The reason of\ndeveloping a similar tool was to have a smaller library to install and\nimprove the performances of reading *.xlsx* files.\n\n\nInstallation\n************\n\nTo install it use (with root privileges):\n\n::\n\n   $ pip install xlref\n\nOr download the last git version and use (with root privileges):\n\n::\n\n   $ python setup.py install\n\n\nTutorial\n********\n\nA typical example is *capturing* a table with a \u201cheader\u201d row and\nconvert into a dictionary. The code below shows how to do it:\n\n>>> import xlref as xl\n>>> _ref = 'excel.xlsx#ref!A1(RD):RD[%s]'  \n>>> ref = xl.Ref(_ref % '\"dict\"')\n>>> ref.range  # Captured range.\nB2:C24\n>>> values = ref.values; values  # Captured values.\n{...}\n>>> values['st-cell-move']\n'#D5(RU):H1(DL)'\n\nYou can notice from the code above that all the values of the\ndictionary are references. To parse it recursively, there are two\noptions:\n\n..\n\n   1. add the \u201crecursive\u201d filter before the \u201cdict\u201d:\n\n       >>> values = xl.Ref(_ref % '\"recursive\", \"dict\"').values\n       >>> values['st-cell-move'].tolist()\n       [[1.0, 2.0, 3.0],\n        [4.0, 5.0, 6.0],\n        [7.0, 8.0, 9.0]]\n\n   2. apply a filter onto dictionary\u2019 values using the extra\n       functionality of the \u201cdict\u201d filter:\n\n       >>> values = xl.Ref(_ref % '{\"fun\": \"dict\", \"value\":\"ref\"}').values\n       >>> values['st-cell-move'].tolist()\n       [[1.0, 2.0, 3.0],\n        [4.0, 5.0, 6.0],\n        [7.0, 8.0, 9.0]]\n\nYou have also the possibility to define and use your custom filters as\nfollows:\n\n>>> import numpy as np\n>>> xl.FILTERS['my-filter'] = lambda parent, x: np.sum(x)\n>>> xl.Ref('#D5(RU):H1(DL)[\"my-filter\"]', ref).values\n45.0\n\nAn alternative way is to use directly the methods of the filtered\nresults as follows:\n\n>>> xl.Ref('#D5(RU):H1(DL)[\"sum\"]', ref).values\n45.0\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/vinci1it2000/xlref/tarball/v1.0.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vinci1it2000/xlref", "keywords": "python,utility,library,data,scientific,range,engineering,data,excel,tables,reader,reference", "license": "EUPL 1.1+", "maintainer": "", "maintainer_email": "", "name": "xlref", "package_url": "https://pypi.org/project/xlref/", "platform": "", "project_url": "https://pypi.org/project/xlref/", "project_urls": {"Documentation": "http://xlref.readthedocs.io", "Donate": "https://donorbox.org/xlref", "Download": "https://github.com/vinci1it2000/xlref/tarball/v1.0.0", "Homepage": "https://github.com/vinci1it2000/xlref", "Issue tracker": "https://github.com/vinci1it2000/xlref/issues"}, "release_url": "https://pypi.org/project/xlref/1.0.0/", "requires_dist": ["click", "click-log", "schedula (>=1.1.1)", "numpy", "pandas", "xlrd"], "requires_python": "", "summary": "Excel table reader library.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about-xlref\">\n<h2>About xlref</h2>\n<p><strong>xlref</strong> is an useful library to capture by a simple reference (e.g.,\n<em>A1(RD):..:RD</em>) a table with non-empty cells from Excel-sheets when\nits exact position is not known beforehand.</p>\n<p>This code was inspired by the <em>xleash</em> module of the <a href=\"https://github.com/pandalone/pandalone\" rel=\"nofollow\">pandalone</a> library. The reason of\ndeveloping a similar tool was to have a smaller library to install and\nimprove the performances of reading <em>.xlsx</em> files.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install it use (with root privileges):</p>\n<pre>$ pip install xlref\n</pre>\n<p>Or download the last git version and use (with root privileges):</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"tutorial\">\n<h2>Tutorial</h2>\n<p>A typical example is <em>capturing</em> a table with a \u201cheader\u201d row and\nconvert into a dictionary. The code below shows how to do it:</p>\n<pre>&gt;&gt;&gt; import xlref as xl\n&gt;&gt;&gt; _ref = 'excel.xlsx#ref!A1(RD):RD[%s]'\n&gt;&gt;&gt; ref = xl.Ref(_ref % '\"dict\"')\n&gt;&gt;&gt; ref.range  # Captured range.\nB2:C24\n&gt;&gt;&gt; values = ref.values; values  # Captured values.\n{...}\n&gt;&gt;&gt; values['st-cell-move']\n'#D5(RU):H1(DL)'\n</pre>\n<p>You can notice from the code above that all the values of the\ndictionary are references. To parse it recursively, there are two\noptions:</p>\n<blockquote>\n<ol>\n<li><p>add the \u201crecursive\u201d filter before the \u201cdict\u201d:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; values = xl.Ref(_ref % '\"recursive\", \"dict\"').values\n&gt;&gt;&gt; values['st-cell-move'].tolist()\n[[1.0, 2.0, 3.0],\n [4.0, 5.0, 6.0],\n [7.0, 8.0, 9.0]]\n</pre>\n</blockquote>\n</li>\n<li><dl>\n<dt>apply a filter onto dictionary\u2019 values using the extra</dt>\n<dd><p>functionality of the \u201cdict\u201d filter:</p>\n<pre>&gt;&gt;&gt; values = xl.Ref(_ref % '{\"fun\": \"dict\", \"value\":\"ref\"}').values\n&gt;&gt;&gt; values['st-cell-move'].tolist()\n[[1.0, 2.0, 3.0],\n [4.0, 5.0, 6.0],\n [7.0, 8.0, 9.0]]\n</pre>\n</dd>\n</dl>\n</li>\n</ol>\n</blockquote>\n<p>You have also the possibility to define and use your custom filters as\nfollows:</p>\n<pre>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; xl.FILTERS['my-filter'] = lambda parent, x: np.sum(x)\n&gt;&gt;&gt; xl.Ref('#D5(RU):H1(DL)[\"my-filter\"]', ref).values\n45.0\n</pre>\n<p>An alternative way is to use directly the methods of the filtered\nresults as follows:</p>\n<pre>&gt;&gt;&gt; xl.Ref('#D5(RU):H1(DL)[\"sum\"]', ref).values\n45.0\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6984712, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e6056a04d79e5985b89e1807ed2cf8a4", "sha256": "24eaa89d781b6e528c6796d44b79b242de28533168f6048a6f9676010c306cfb"}, "downloads": -1, "filename": "xlref-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e6056a04d79e5985b89e1807ed2cf8a4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16694, "upload_time": "2020-04-09T10:05:48", "upload_time_iso_8601": "2020-04-09T10:05:48.044627Z", "url": "https://files.pythonhosted.org/packages/5c/2c/b8f6077a3ef8c14484b4a1dc52d5327548054ae04b5ece3a30125507e741/xlref-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e60cdcc6f0ab1854316f80a391a58dd6", "sha256": "8add7474b6198bee770f640f68e58cdcd61110f1f3c53a5a3eca65c533e911a9"}, "downloads": -1, "filename": "xlref-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e60cdcc6f0ab1854316f80a391a58dd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13943, "upload_time": "2020-04-09T10:05:50", "upload_time_iso_8601": "2020-04-09T10:05:50.619592Z", "url": "https://files.pythonhosted.org/packages/b4/c2/2310bd7c5f3047981a6719f196abb227099622de62834b737459aa7c231e/xlref-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e6056a04d79e5985b89e1807ed2cf8a4", "sha256": "24eaa89d781b6e528c6796d44b79b242de28533168f6048a6f9676010c306cfb"}, "downloads": -1, "filename": "xlref-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e6056a04d79e5985b89e1807ed2cf8a4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16694, "upload_time": "2020-04-09T10:05:48", "upload_time_iso_8601": "2020-04-09T10:05:48.044627Z", "url": "https://files.pythonhosted.org/packages/5c/2c/b8f6077a3ef8c14484b4a1dc52d5327548054ae04b5ece3a30125507e741/xlref-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e60cdcc6f0ab1854316f80a391a58dd6", "sha256": "8add7474b6198bee770f640f68e58cdcd61110f1f3c53a5a3eca65c533e911a9"}, "downloads": -1, "filename": "xlref-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e60cdcc6f0ab1854316f80a391a58dd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13943, "upload_time": "2020-04-09T10:05:50", "upload_time_iso_8601": "2020-04-09T10:05:50.619592Z", "url": "https://files.pythonhosted.org/packages/b4/c2/2310bd7c5f3047981a6719f196abb227099622de62834b737459aa7c231e/xlref-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:16 2020"}