{"info": {"author": "Greg Guthe", "author_email": "foxsec+dependencyscan@mozilla.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Natural Language :: English", "Programming Language :: Python :: 3 :: Only", "Topic :: Security", "Topic :: Software Development :: Quality Assurance"], "description": "## find-package-rugaru\n\n`find-package-rugaru` finds open source dependent packages in a git\nrepository and tests and flags suspicious open source packages (like\n[the legendary rugaru](https://en.wikipedia.org/wiki/Rougarou)).\n\n*NB: this project is in an alpha state and its APIs are not stable*\n\n\n### Scanner\n\n#### Installation\n\n##### Requirements\n\n* docker >=18.06.3\n* python 3.8+ and pip\n* [jq](https://stedolan.github.io/jq/)\n* system packages to build psycopg2 (e.g. `build-essential libpq-dev` on debian buster)\n\nAfter installing the above requirements:\n\n```console\n$ git clone https://github.com/mozilla-services/find-package-rugaru.git\n$ cd find-package-rugaru\n$ make install install-dev\n$ docker pull mozilla/dependencyscan\n$ docker pull postgres:12\n```\n\n#### Example Usage\n\n1. start a local postgres database:\n\n```console\n$ make start-db\n```\n\n1. run one or more of the analysis scripts:\n\n  * `./bin/analyze_package.sh <package_name> [<package_version>]`\n  * `./bin/analyze_repo.sh <repository_url>`\n\n```console\n$ ./bin/analyze_package.sh lodash 4.17.15\nanalyzing lodash@4.17.15 saving intermediate results to /tmp/dep-obs.g7mNNBaLyVjR\n...\n\n2020-02-27 17:31:31,900 - fpr - INFO - pipeline finished\nnull\n2020-02-27 17:31:32,403 - fpr - INFO - pipeline finished\n$\n```\n\nor if you have more time to scan all git tags of the lodash repo:\n\n```console\n./bin/analyze_repo.sh https://github.com/lodash/lodash.git\nanalyzing tags of https://github.com/lodash/lodash.git saving intermediate results to /tmp/dep-obs.5pvSrfbn6Nox\n...\n```\n\nCheck the source of the scripts to find additional configuration\nvia environment variables.\n\n1. Inspect the results in the local database:\n\n```console\nmake db-shell\nPGPASSWORD=postgres psql -U postgres -h localhost -p 5432 dependency_observatory\npsql (12.2 (Ubuntu 12.2-2.pgdg18.04+1), server 12.1 (Debian 12.1-1.pgdg100+1))\nType \"help\" for help.\n\ndependency_observatory=# \\x on\nExpanded display is on.\ndependency_observatory=# SELECT * FROM package_versions WHERE name = 'lodash' ORDER BY inserted_at DESC;\n-[ RECORD 1 ]-------------------------------------------------------\nid          | 102\nname        | lodash\nversion     | 4.17.15\nlanguage    | node\nurl         | https://registry.npmjs.org/lodash/-/lodash-4.17.15.tgz\nrepo_url    |\nrepo_commit |\ninserted_at | 2020-02-26 17:12:47.373348\nupdated_at  |\n```\n\n#### Pipelines\n\nThe scripts are composed of components called pipelines (for lack of a\nbetter term). For example `analyze_package.sh` will:\n\n1. fetch information about the package from the npm registry\n1. filter for git refs to clone and, if specified, the matching version\n1. find dependency manifests or lockfiles (e.g. `package.json`) for each ref in a `debian:buster-slim` docker image\n1. run `npm install --save=true`, `npm list --json`, and `npm audit --json` in the project root for each ref in a `node:10-buster-slim` docker image\n1. postprocess and save the results to the local postgres database\n\nEach individual pipeline can be run on its own. For example the\nfollowing `find_git_refs` pipeline used in `analyze_repo.sh` will find\ngit tags for the `mozilla-services/channelserver` project:\n\n```console\n$ echo '{\"repo_url\": \"https://github.com/mozilla-services/channelserver\"}' | docker run -i --rm -v /var/run/docker.sock:/var/run/docker.sock --name fpr-test mozilla/dependencyscan python fpr/run_pipeline.py -v find_git_refs\n```\n\n### Current Pipelines (from -h output)\n\n```console\n    crate_graph         Parses the output of the cargo metadata pipeline and\n                        writes a .dot file of the dependencies to outfile\n    dep_graph           Parses the output of the cargo metadata pipeline and\n                        writes a .dot file of the dependencies to outfile\n    fetch_package_data  Fetches additional data about a dependency.\n    find_dep_files      Given a repo_url, clones the repo, lists git refs for\n                        each tag\n    find_git_refs       Given a repo_url, clones the repo, lists git refs for\n                        each tag TODO: every Nth commit, or commit every time\n                        interval. TODO: since and until args TODO: find\n                        branches\n    github_metadata     Given an input file with repo urls metadata output\n                        fetches dependency and vulnerability metadata from\n                        GitHub and an optional GitHub PAT and outputs them to\n                        jsonl and optionally saves them to a local SQLite3 DB.\n    postprocess         Post processes tasks for various outputs e.g.\n                        flattening deps, filtering and extracting fields, etc.\n                        Does not spin up containers or hit the network.\n    run_repo_tasks      Runs tasks on a checked out git ref with dep. files\n    rust_changelog      Given ordered cargo metadata output for git refs from\n                        the same repo: 1. builds a dict of manifest filename\n                        to cargo meta 2. groups the output into pairs (i.e. 1,\n                        2, 3 -> (1, 2), (2, 3) in the provided order 3.\n                        compares each pair as follows: a. compare each\n                        manifest filename: 1) count new and removed\n                        dependencies 2) new and removed authors and repo urls\n                        TODO: output a diff of the updated dep code (need to\n                        update the cargo metadata pipeline to pull these)\n                        TODO: take audit output to show new and fixed Rust\n                        vulns TODO: detect dep version changes\n    save_to_db          Saves JSON lines to a postgres DB\n```\n\nSee `bin/analyze_*` scripts and `Makefile` for example usage.\n\nThey feed into each other as follows (`*` indicates deprecated, removed or otherwise broken pipelines):\n\n![pipelines graph](./docs/pipelines.dot.svg)\n\n##### Pipeline API\n\n*Note that this interface may be subject to change*\n\n\nEach pipeline:\n\n* reads and writes [JSON lines (basically newline delimited JSON objects)](https://jsonlines.org/)\n\n* uses the args `-i,--infile` and `-o,--outfile` that respectively default to stdin and stdout to allow pipelining\n\n* run as a python asyncio generator\n\n\nSee [the design doc](./design.md) for why this interface was chosen.\n\n\n###### Adding a pipeline\n\n1. copy an existing file from `fpr/pipelines/`\n1. give it a new name in its `Pipeline` model declaration\n1. add it to `fpr/pipelines/__init__.py`", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mozilla-services/dependency-observatory-scanner", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dependency-observatory-scanner", "package_url": "https://pypi.org/project/dependency-observatory-scanner/", "platform": "", "project_url": "https://pypi.org/project/dependency-observatory-scanner/", "project_urls": {"Homepage": "https://github.com/mozilla-services/dependency-observatory-scanner"}, "release_url": "https://pypi.org/project/dependency-observatory-scanner/2020.4.15/", "requires_dist": null, "requires_python": ">=3.8", "summary": "Dependency Observatory Scanner: a scanner for software packages and dependencies", "version": "2020.4.15", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>find-package-rugaru</h2>\n<p><code>find-package-rugaru</code> finds open source dependent packages in a git\nrepository and tests and flags suspicious open source packages (like\n<a href=\"https://en.wikipedia.org/wiki/Rougarou\" rel=\"nofollow\">the legendary rugaru</a>).</p>\n<p><em>NB: this project is in an alpha state and its APIs are not stable</em></p>\n<h3>Scanner</h3>\n<h4>Installation</h4>\n<h5>Requirements</h5>\n<ul>\n<li>docker &gt;=18.06.3</li>\n<li>python 3.8+ and pip</li>\n<li><a href=\"https://stedolan.github.io/jq/\" rel=\"nofollow\">jq</a></li>\n<li>system packages to build psycopg2 (e.g. <code>build-essential libpq-dev</code> on debian buster)</li>\n</ul>\n<p>After installing the above requirements:</p>\n<pre><span class=\"gp\">$</span> git clone https://github.com/mozilla-services/find-package-rugaru.git\n<span class=\"gp\">$</span> <span class=\"nb\">cd</span> find-package-rugaru\n<span class=\"gp\">$</span> make install install-dev\n<span class=\"gp\">$</span> docker pull mozilla/dependencyscan\n<span class=\"gp\">$</span> docker pull postgres:12\n</pre>\n<h4>Example Usage</h4>\n<ol>\n<li>start a local postgres database:</li>\n</ol>\n<pre><span class=\"gp\">$</span> make start-db\n</pre>\n<ol>\n<li>run one or more of the analysis scripts:</li>\n</ol>\n<ul>\n<li><code>./bin/analyze_package.sh &lt;package_name&gt; [&lt;package_version&gt;]</code></li>\n<li><code>./bin/analyze_repo.sh &lt;repository_url&gt;</code></li>\n</ul>\n<pre><span class=\"gp\">$</span> ./bin/analyze_package.sh lodash <span class=\"m\">4</span>.17.15\n<span class=\"go\">analyzing lodash@4.17.15 saving intermediate results to /tmp/dep-obs.g7mNNBaLyVjR</span>\n<span class=\"go\">...</span>\n\n<span class=\"go\">2020-02-27 17:31:31,900 - fpr - INFO - pipeline finished</span>\n<span class=\"go\">null</span>\n<span class=\"go\">2020-02-27 17:31:32,403 - fpr - INFO - pipeline finished</span>\n<span class=\"gp\">$</span>\n</pre>\n<p>or if you have more time to scan all git tags of the lodash repo:</p>\n<pre><span class=\"go\">./bin/analyze_repo.sh https://github.com/lodash/lodash.git</span>\n<span class=\"go\">analyzing tags of https://github.com/lodash/lodash.git saving intermediate results to /tmp/dep-obs.5pvSrfbn6Nox</span>\n<span class=\"go\">...</span>\n</pre>\n<p>Check the source of the scripts to find additional configuration\nvia environment variables.</p>\n<ol>\n<li>Inspect the results in the local database:</li>\n</ol>\n<pre><span class=\"go\">make db-shell</span>\n<span class=\"go\">PGPASSWORD=postgres psql -U postgres -h localhost -p 5432 dependency_observatory</span>\n<span class=\"go\">psql (12.2 (Ubuntu 12.2-2.pgdg18.04+1), server 12.1 (Debian 12.1-1.pgdg100+1))</span>\n<span class=\"go\">Type \"help\" for help.</span>\n\n<span class=\"go\">dependency_observatory=# \\x on</span>\n<span class=\"go\">Expanded display is on.</span>\n<span class=\"go\">dependency_observatory=# SELECT * FROM package_versions WHERE name = 'lodash' ORDER BY inserted_at DESC;</span>\n<span class=\"go\">-[ RECORD 1 ]-------------------------------------------------------</span>\n<span class=\"go\">id          | 102</span>\n<span class=\"go\">name        | lodash</span>\n<span class=\"go\">version     | 4.17.15</span>\n<span class=\"go\">language    | node</span>\n<span class=\"go\">url         | https://registry.npmjs.org/lodash/-/lodash-4.17.15.tgz</span>\n<span class=\"go\">repo_url    |</span>\n<span class=\"go\">repo_commit |</span>\n<span class=\"go\">inserted_at | 2020-02-26 17:12:47.373348</span>\n<span class=\"go\">updated_at  |</span>\n</pre>\n<h4>Pipelines</h4>\n<p>The scripts are composed of components called pipelines (for lack of a\nbetter term). For example <code>analyze_package.sh</code> will:</p>\n<ol>\n<li>fetch information about the package from the npm registry</li>\n<li>filter for git refs to clone and, if specified, the matching version</li>\n<li>find dependency manifests or lockfiles (e.g. <code>package.json</code>) for each ref in a <code>debian:buster-slim</code> docker image</li>\n<li>run <code>npm install --save=true</code>, <code>npm list --json</code>, and <code>npm audit --json</code> in the project root for each ref in a <code>node:10-buster-slim</code> docker image</li>\n<li>postprocess and save the results to the local postgres database</li>\n</ol>\n<p>Each individual pipeline can be run on its own. For example the\nfollowing <code>find_git_refs</code> pipeline used in <code>analyze_repo.sh</code> will find\ngit tags for the <code>mozilla-services/channelserver</code> project:</p>\n<pre><span class=\"gp\">$</span> <span class=\"nb\">echo</span> <span class=\"s1\">'{\"repo_url\": \"https://github.com/mozilla-services/channelserver\"}'</span> <span class=\"p\">|</span> docker run -i --rm -v /var/run/docker.sock:/var/run/docker.sock --name fpr-test mozilla/dependencyscan python fpr/run_pipeline.py -v find_git_refs\n</pre>\n<h3>Current Pipelines (from -h output)</h3>\n<pre><span class=\"go\">    crate_graph         Parses the output of the cargo metadata pipeline and</span>\n<span class=\"go\">                        writes a .dot file of the dependencies to outfile</span>\n<span class=\"go\">    dep_graph           Parses the output of the cargo metadata pipeline and</span>\n<span class=\"go\">                        writes a .dot file of the dependencies to outfile</span>\n<span class=\"go\">    fetch_package_data  Fetches additional data about a dependency.</span>\n<span class=\"go\">    find_dep_files      Given a repo_url, clones the repo, lists git refs for</span>\n<span class=\"go\">                        each tag</span>\n<span class=\"go\">    find_git_refs       Given a repo_url, clones the repo, lists git refs for</span>\n<span class=\"go\">                        each tag TODO: every Nth commit, or commit every time</span>\n<span class=\"go\">                        interval. TODO: since and until args TODO: find</span>\n<span class=\"go\">                        branches</span>\n<span class=\"go\">    github_metadata     Given an input file with repo urls metadata output</span>\n<span class=\"go\">                        fetches dependency and vulnerability metadata from</span>\n<span class=\"go\">                        GitHub and an optional GitHub PAT and outputs them to</span>\n<span class=\"go\">                        jsonl and optionally saves them to a local SQLite3 DB.</span>\n<span class=\"go\">    postprocess         Post processes tasks for various outputs e.g.</span>\n<span class=\"go\">                        flattening deps, filtering and extracting fields, etc.</span>\n<span class=\"go\">                        Does not spin up containers or hit the network.</span>\n<span class=\"go\">    run_repo_tasks      Runs tasks on a checked out git ref with dep. files</span>\n<span class=\"go\">    rust_changelog      Given ordered cargo metadata output for git refs from</span>\n<span class=\"go\">                        the same repo: 1. builds a dict of manifest filename</span>\n<span class=\"go\">                        to cargo meta 2. groups the output into pairs (i.e. 1,</span>\n<span class=\"go\">                        2, 3 -&gt; (1, 2), (2, 3) in the provided order 3.</span>\n<span class=\"go\">                        compares each pair as follows: a. compare each</span>\n<span class=\"go\">                        manifest filename: 1) count new and removed</span>\n<span class=\"go\">                        dependencies 2) new and removed authors and repo urls</span>\n<span class=\"go\">                        TODO: output a diff of the updated dep code (need to</span>\n<span class=\"go\">                        update the cargo metadata pipeline to pull these)</span>\n<span class=\"go\">                        TODO: take audit output to show new and fixed Rust</span>\n<span class=\"go\">                        vulns TODO: detect dep version changes</span>\n<span class=\"go\">    save_to_db          Saves JSON lines to a postgres DB</span>\n</pre>\n<p>See <code>bin/analyze_*</code> scripts and <code>Makefile</code> for example usage.</p>\n<p>They feed into each other as follows (<code>*</code> indicates deprecated, removed or otherwise broken pipelines):</p>\n<p><img alt=\"pipelines graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba7210a110f9adc88929ee78a1da5ab78bd3581a/2e2f646f63732f706970656c696e65732e646f742e737667\"></p>\n<h5>Pipeline API</h5>\n<p><em>Note that this interface may be subject to change</em></p>\n<p>Each pipeline:</p>\n<ul>\n<li>\n<p>reads and writes <a href=\"https://jsonlines.org/\" rel=\"nofollow\">JSON lines (basically newline delimited JSON objects)</a></p>\n</li>\n<li>\n<p>uses the args <code>-i,--infile</code> and <code>-o,--outfile</code> that respectively default to stdin and stdout to allow pipelining</p>\n</li>\n<li>\n<p>run as a python asyncio generator</p>\n</li>\n</ul>\n<p>See <a href=\"./design.md\" rel=\"nofollow\">the design doc</a> for why this interface was chosen.</p>\n<h6>Adding a pipeline</h6>\n<ol>\n<li>copy an existing file from <code>fpr/pipelines/</code></li>\n<li>give it a new name in its <code>Pipeline</code> model declaration</li>\n<li>add it to <code>fpr/pipelines/__init__.py</code></li>\n</ol>\n\n          </div>"}, "last_serial": 7028179, "releases": {"2020.3.24": [{"comment_text": "", "digests": {"md5": "c8ab728166b073bfd65d023d8942a3f2", "sha256": "303b4f4bf14aec0b7d92a6a647529528b8a1d09dcd1de153d28f0b0ab0cc3be5"}, "downloads": -1, "filename": "dependency_observatory_scanner-2020.3.24-py3-none-any.whl", "has_sig": false, "md5_digest": "c8ab728166b073bfd65d023d8942a3f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 81940, "upload_time": "2020-03-24T23:03:19", "upload_time_iso_8601": "2020-03-24T23:03:19.251763Z", "url": "https://files.pythonhosted.org/packages/c0/a1/3925540068471d5c9a776b22eb730601268b239fe3d10edaeb5ddc8f2d5e/dependency_observatory_scanner-2020.3.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0e81c371ccd5c574a5ba9303610c420", "sha256": "190ffb3fa325913c9130aecc2b371d34d38d5e243f3b69aefd9e8947d2faa2e3"}, "downloads": -1, "filename": "dependency-observatory-scanner-2020.3.24.tar.gz", "has_sig": false, "md5_digest": "f0e81c371ccd5c574a5ba9303610c420", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 910939, "upload_time": "2020-03-24T23:03:22", "upload_time_iso_8601": "2020-03-24T23:03:22.332450Z", "url": "https://files.pythonhosted.org/packages/42/6b/3bc1b44d17c26a8061f356e8a6362cd3e9041e9c972a9e37171322c64524/dependency-observatory-scanner-2020.3.24.tar.gz", "yanked": false}], "2020.3.25a2": [{"comment_text": "", "digests": {"md5": "7d72bd03073e0d9e184f427cd7f2d60f", "sha256": "4417a95749470efec0b9d5de5ed4a85fbb0dddba8d5637e2281355abea9a068a"}, "downloads": -1, "filename": "dependency_observatory_scanner-2020.3.25a2-py3-none-any.whl", "has_sig": false, "md5_digest": "7d72bd03073e0d9e184f427cd7f2d60f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 82161, "upload_time": "2020-03-25T21:16:28", "upload_time_iso_8601": "2020-03-25T21:16:28.284083Z", "url": "https://files.pythonhosted.org/packages/3a/d4/ea95db0d7e36a0ddf3d219df771f776ece4608542de7722ee351b9974970/dependency_observatory_scanner-2020.3.25a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ab67a0fa037e327aa7e7c3c25a28ab9", "sha256": "16c55d111b7daf14cff4ca20a4cf665441cf5c9f7d9e66a891dd3b7e65ebfd3f"}, "downloads": -1, "filename": "dependency-observatory-scanner-2020.3.25a2.tar.gz", "has_sig": false, "md5_digest": "1ab67a0fa037e327aa7e7c3c25a28ab9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 911339, "upload_time": "2020-03-25T21:16:29", "upload_time_iso_8601": "2020-03-25T21:16:29.841212Z", "url": "https://files.pythonhosted.org/packages/5e/03/4d6f493542111b961677e587d8a0dac701cb42e73b59ff6e9c766a5da75e/dependency-observatory-scanner-2020.3.25a2.tar.gz", "yanked": false}], "2020.4.15": [{"comment_text": "", "digests": {"md5": "ae63f18728172be7e2eb195b537d97a6", "sha256": "fd2cbd6d084591610fa022881e67842208652e29dd17abd54d7e258322d73f9f"}, "downloads": -1, "filename": "dependency-observatory-scanner-2020.4.15.tar.gz", "has_sig": false, "md5_digest": "ae63f18728172be7e2eb195b537d97a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 912392, "upload_time": "2020-04-15T23:43:58", "upload_time_iso_8601": "2020-04-15T23:43:58.378711Z", "url": "https://files.pythonhosted.org/packages/80/1d/3e02f0bb80ce2170700bbd212da263ad90f1736193b2a6fabf3fb987da1f/dependency-observatory-scanner-2020.4.15.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae63f18728172be7e2eb195b537d97a6", "sha256": "fd2cbd6d084591610fa022881e67842208652e29dd17abd54d7e258322d73f9f"}, "downloads": -1, "filename": "dependency-observatory-scanner-2020.4.15.tar.gz", "has_sig": false, "md5_digest": "ae63f18728172be7e2eb195b537d97a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 912392, "upload_time": "2020-04-15T23:43:58", "upload_time_iso_8601": "2020-04-15T23:43:58.378711Z", "url": "https://files.pythonhosted.org/packages/80/1d/3e02f0bb80ce2170700bbd212da263ad90f1736193b2a6fabf3fb987da1f/dependency-observatory-scanner-2020.4.15.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:05 2020"}