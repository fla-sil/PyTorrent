{"info": {"author": "Chester Koh", "author_email": "chester8991@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# sutdobfs\n\n[![Build Status](https://travis-ci.com/OpenSUTD/sutdobfs.svg?branch=master)](https://travis-ci.com/OpenSUTD/sutdobfs)\n[![PyPI version](https://badge.fury.io/py/sutdobfs.svg)](https://badge.fury.io/py/sutdobfs)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/sutdobfs)\n![license](https://img.shields.io/github/license/OpenSUTD/sutdobfs)\n[![Coverage Status](https://coveralls.io/repos/github/OpenSUTD/sutdobfs/badge.svg?branch=master)](https://coveralls.io/github/OpenSUTD/sutdobfs?branch=master)\n\n__a gift from a senior to the final batch of students taking the last round of Digital World in 2020__\n## Singapore University of Technical Difficulties Obfuscator\n\nIs normal Python code too boring? Do you want to make your code more `d a n k`? Don't want your friend to copy your Python homework? Want to make your Digital World Prof's life hard when grading your 1D/2D assignments (and get zero in the process)?\n\nIntroducing `sutdobfs`, the **SUTD Obfuscator** for Python. With this tool, easily turn your variable and (inner) function names into something established in collaboration with MIT.\n\nBefore (99 bottles of beer):\n\n```python\ndef main():\n    def sing(b, end):\n        print(b or 'No more', 'bottle' + ('s' if b - 1 else ''), end)\n\n    for i in range(99, 0, -1):\n        sing(i, 'of beer on the wall,')\n        sing(i, 'of beer,')\n        print('Take one down, pass it around,')\n        sing(i - 1, 'of beer on the wall.\\n')\n``` \n\nAfter (99 bottles of DANK MEMES):\n\n```python\ndef main():\n    def professional_practice_programme(established_in_collaboration_with_MIT, professional_practice_programme_copy):\n        print(established_in_collaboration_with_MIT or 'No more', 'bottle' + ('s' if established_in_collaboration_with_MIT - 1 else ''), professional_practice_programme_copy)\n\n    for eleven_to_one_student_to_faculty_ratio in range(99, 0, -1):\n        professional_practice_programme(eleven_to_one_student_to_faculty_ratio, 'of beer on the wall,')\n        professional_practice_programme(eleven_to_one_student_to_faculty_ratio, 'of beer,')\n        print('Take one down, pass it around,')\n        professional_practice_programme(eleven_to_one_student_to_faculty_ratio - 1, 'of beer on the wall.\\n')\n```\n\nThe best part? This tool actually produces **real functioning code you can submit on Vocareum!** Now you don't have to worry about getting hit with plagiarism warnings anymore.\n\nThis tool works on all sorts of programs, large and small. For reference, here is the [meme'd version of the A* algorithm from Rosetta Code](https://pastebin.com/fNwh8qr3).\n\n## Installation and Usage\n\n### Using on Vocareum\n\nFor maximum dank, why not use it directly on Vocareum itself?\n\nIn the Terminal window of your Vocareum workspace, enter the following:\n\n```bash\npip install --user sutdobfs\n```\n\n> If you have trouble pasting into the terminal, Right Click > Paste instead.\n\n![vocareum-install](.github/img/voca-1.png)\n\nNow you can meme your homework files in the Vocareum workspace:\n\n```bash\nsutdobfs your_homework_file.py\n```\n\n![vocareum-workspace](.github/img/voca-2.png)\n\n![vocareum-obfs](.github/img/voca-3.png)\n\nThis produces a new file in your workspace called `your_homework_file.sutd.py`, filled with glorious dank memes. Click on the workspace window on the left to let it refresh and open the file:\n\n![vocareum-result](.github/img/voca-4.png)\n\nYeah, try plagarising this.\n\n> Because Vocareum workspaces are ephemeral (i.e. they may be destroyed when you leave the workspace), you may need to rerun the installation command if you leave Vocareum and come back later.\n\n### Local Installs\n\nOpen your terminal (or **anaconda prompt** if you installed anaconda \u2013 find it in your start menu) and type the following\n\n```bash\npip install sutdobfs\n```\n\nUsage is the same:\n```bash\nsutdobfs your_file.py\n```\n\nThis outputs the obfuscated file in your the same directory called `your_file.sutd.py`. The output file name and location can be changed in [Advanced Usage](#advanced-usage).\n\n> If you get a \"command not found\" error, Python executables are likely not in your PATH. Either fix your PATH or use `python3 -m sutdobfs` instead.\n\n### Upgrading (Local Installs)\n\nTo get the dankest of memes, you will need to update whenever the meme list is updated:\n\n```bash\npip install --upgrade sutdobfs\n```\n\nIf it says \"requirement already satisfied\", but you can clearly see that [the latest version on PyPI](https://pypi.org/project/sutdobfs/) is greater than what you have, simply nuke and start over:\n\n```bash\npip uninstall sutdobfs\npip install sutdobfs\n```\n\n## How this works\n\n`sutdobfs` uses the `tokenizer` module in the Python standard library to parse through source files. `sutdobfs` will scan through your code and identify variable and function names that are safe to rename: only names in the [local and enclosed scopes](https://www.geeksforgeeks.org/scope-resolution-in-python-legb-rule/) will be renamed (if you're interested in the algorithm that determines scope, check the [Gatekeeper source code](sutdobfs/gatekeepers/__init__.py)). Candidate replacements are pulled from a  \"dictionary\" (actually a `.txt` file) of memes to replace these variable names. In case of a name collision (too few memes), `_copy` will be appended to the end of the variable name. Finally, a new Python file (same filename ending with `.sutd.py` in the same directory by default) containing the memed names is be created.\n\nThe default list of memes can be found in the [memes.txt](sutdobfs/memes/memes.txt) file. Feel free to add more memes to the list using GitHub! If you're new to GitHub, this is a great way to learn how to use GitHub to collaborate \u2013 read the [contributing guide](CONTRIBUTING.md) for more information.\n\n## Advanced Usage\n\n### Custom output path\n\nSimply add another argument to the command line to customize the path of the output file:\n\n```bash\nsutdobfs input_file.py output_file.py\n```\n\n### Random Names for Memes\n\nBy default, names are chosen using hashing: that means the same variable name will always result in the same meme (for the same meme dictionary). If you would like a random meme to be chosen every time you run the obfsucator, add the `--random` option:\n\n```bash\nsutdobfs input_file.py --random\n```\n\n### Sequential Names for Memes\n\nTo guarantee that all memes in the dictionary are used before memes are recycled, pass the `--sequential` (or `--seq`) argument:\n\n```bash\nsutdobfs input_file.py --seq\n``` \n\nThis will assign memes based on the order `sutdobfs` encounters names in your source code. This can be combined with the `--random` option:\n\n```bash\nsutdobfs input_file.py --seq --random\n```\n\n### Custom Meme Dictionaries\n\nYou can specify your own text file containing memes to be used in the replacement process:\n\n```bash\nsutdobfs input_file.py --memes your_meme.txt\n```\n\nPython 3 supports unicode characters in other languages (but not emoji). Get creative!\n\nHere's an example using the built-in `jojo.txt` meme dictionary:\n\n```python\ndef main():\n    def even_speedwagon_is_afraid(ORA_ORA_ORA_ORA, \u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9):\n        print(ORA_ORA_ORA_ORA or 'No more', 'bottle' + ('s' if ORA_ORA_ORA_ORA - 1 else ''), \u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9)\n\n    for \u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0 in range(99, 0, -1):\n        even_speedwagon_is_afraid(\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0, 'of beer on the wall,')\n        even_speedwagon_is_afraid(\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0, 'of beer,')\n        print('Take one down, pass it around,')\n        even_speedwagon_is_afraid(\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0 - 1, 'of beer on the wall.\\n')\n```\n\nNote that your custom filename cannot be the same as the built-in ones found in the [meme folder](sutdobfs/memes), otherwise the built-in files will be used instead.\n\n## Limitations\n\nAt the moment, this tool cannot meme [f-strings](https://realpython.com/python-f-strings/), because the `tokenzier` module reads f-strings as a single giant string. I am working hard on a f-string lexer, in the meantime, please use the older [`str.format` method](https://docs.python.org/3/library/stdtypes.html#str.format) instead.\n\nThis tool will break if your code attempts to perform imports in a local scope. I will not fix this, because you're [not supposed to](https://stackoverflow.com/a/1188672) use the import keyword like that anyway.\n\nThis tool is offered on a best effort basis with absolutely no warranty. If you find a bug or have a suggestion, please open an issue on this GitHub repository and include the sample file that you tried to meme.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/OpenSUTD/sutdobfs", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sutdobfs", "package_url": "https://pypi.org/project/sutdobfs/", "platform": "", "project_url": "https://pypi.org/project/sutdobfs/", "project_urls": {"Homepage": "https://github.com/OpenSUTD/sutdobfs"}, "release_url": "https://pypi.org/project/sutdobfs/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "SUTD Obfuscator \u2013 Establish your variable names in collaboration with MIT", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sutdobfs</h1>\n<p><a href=\"https://travis-ci.com/OpenSUTD/sutdobfs\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3b6fd66fc3fafba7b492e632d458997b60146b3/68747470733a2f2f7472617669732d63692e636f6d2f4f70656e535554442f737574646f6266732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/sutdobfs\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d03c39a3af175080175dcbc0a93b949fc3f89ed/68747470733a2f2f62616467652e667572792e696f2f70792f737574646f6266732e737667\"></a>\n<img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3c3a00051947f74773ea48ec131eb59e3dc5895/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f737574646f626673\">\n<img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c480da2988c033dfea1508fa448b8fcd2a30e10/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4f70656e535554442f737574646f626673\">\n<a href=\"https://coveralls.io/github/OpenSUTD/sutdobfs?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3781fe77fab58e897b592a9aa006ceac3dde8a64/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4f70656e535554442f737574646f6266732f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><strong>a gift from a senior to the final batch of students taking the last round of Digital World in 2020</strong></p>\n<h2>Singapore University of Technical Difficulties Obfuscator</h2>\n<p>Is normal Python code too boring? Do you want to make your code more <code>d a n k</code>? Don't want your friend to copy your Python homework? Want to make your Digital World Prof's life hard when grading your 1D/2D assignments (and get zero in the process)?</p>\n<p>Introducing <code>sutdobfs</code>, the <strong>SUTD Obfuscator</strong> for Python. With this tool, easily turn your variable and (inner) function names into something established in collaboration with MIT.</p>\n<p>Before (99 bottles of beer):</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sing</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"ow\">or</span> <span class=\"s1\">'No more'</span><span class=\"p\">,</span> <span class=\"s1\">'bottle'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s1\">'s'</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">''</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">sing</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s1\">'of beer on the wall,'</span><span class=\"p\">)</span>\n        <span class=\"n\">sing</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s1\">'of beer,'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Take one down, pass it around,'</span><span class=\"p\">)</span>\n        <span class=\"n\">sing</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'of beer on the wall.</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>After (99 bottles of DANK MEMES):</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">professional_practice_programme</span><span class=\"p\">(</span><span class=\"n\">established_in_collaboration_with_MIT</span><span class=\"p\">,</span> <span class=\"n\">professional_practice_programme_copy</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">established_in_collaboration_with_MIT</span> <span class=\"ow\">or</span> <span class=\"s1\">'No more'</span><span class=\"p\">,</span> <span class=\"s1\">'bottle'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s1\">'s'</span> <span class=\"k\">if</span> <span class=\"n\">established_in_collaboration_with_MIT</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">''</span><span class=\"p\">),</span> <span class=\"n\">professional_practice_programme_copy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">eleven_to_one_student_to_faculty_ratio</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">professional_practice_programme</span><span class=\"p\">(</span><span class=\"n\">eleven_to_one_student_to_faculty_ratio</span><span class=\"p\">,</span> <span class=\"s1\">'of beer on the wall,'</span><span class=\"p\">)</span>\n        <span class=\"n\">professional_practice_programme</span><span class=\"p\">(</span><span class=\"n\">eleven_to_one_student_to_faculty_ratio</span><span class=\"p\">,</span> <span class=\"s1\">'of beer,'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Take one down, pass it around,'</span><span class=\"p\">)</span>\n        <span class=\"n\">professional_practice_programme</span><span class=\"p\">(</span><span class=\"n\">eleven_to_one_student_to_faculty_ratio</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'of beer on the wall.</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>The best part? This tool actually produces <strong>real functioning code you can submit on Vocareum!</strong> Now you don't have to worry about getting hit with plagiarism warnings anymore.</p>\n<p>This tool works on all sorts of programs, large and small. For reference, here is the <a href=\"https://pastebin.com/fNwh8qr3\" rel=\"nofollow\">meme'd version of the A* algorithm from Rosetta Code</a>.</p>\n<h2>Installation and Usage</h2>\n<h3>Using on Vocareum</h3>\n<p>For maximum dank, why not use it directly on Vocareum itself?</p>\n<p>In the Terminal window of your Vocareum workspace, enter the following:</p>\n<pre>pip install --user sutdobfs\n</pre>\n<blockquote>\n<p>If you have trouble pasting into the terminal, Right Click &gt; Paste instead.</p>\n</blockquote>\n<p><img alt=\"vocareum-install\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97136c36fa008bcc410f82a44556f5fbcfec6bf0/2e6769746875622f696d672f766f63612d312e706e67\"></p>\n<p>Now you can meme your homework files in the Vocareum workspace:</p>\n<pre>sutdobfs your_homework_file.py\n</pre>\n<p><img alt=\"vocareum-workspace\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa1a3961b1029cbfc9ce0a5bd50fe32dc19092ae/2e6769746875622f696d672f766f63612d322e706e67\"></p>\n<p><img alt=\"vocareum-obfs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5d7fde61e6b6156cf59b3a331e14fb83ef77ccd/2e6769746875622f696d672f766f63612d332e706e67\"></p>\n<p>This produces a new file in your workspace called <code>your_homework_file.sutd.py</code>, filled with glorious dank memes. Click on the workspace window on the left to let it refresh and open the file:</p>\n<p><img alt=\"vocareum-result\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d17c713773fb7967d4c4b19875b4fe923b77480/2e6769746875622f696d672f766f63612d342e706e67\"></p>\n<p>Yeah, try plagarising this.</p>\n<blockquote>\n<p>Because Vocareum workspaces are ephemeral (i.e. they may be destroyed when you leave the workspace), you may need to rerun the installation command if you leave Vocareum and come back later.</p>\n</blockquote>\n<h3>Local Installs</h3>\n<p>Open your terminal (or <strong>anaconda prompt</strong> if you installed anaconda \u2013 find it in your start menu) and type the following</p>\n<pre>pip install sutdobfs\n</pre>\n<p>Usage is the same:</p>\n<pre>sutdobfs your_file.py\n</pre>\n<p>This outputs the obfuscated file in your the same directory called <code>your_file.sutd.py</code>. The output file name and location can be changed in <a href=\"#advanced-usage\" rel=\"nofollow\">Advanced Usage</a>.</p>\n<blockquote>\n<p>If you get a \"command not found\" error, Python executables are likely not in your PATH. Either fix your PATH or use <code>python3 -m sutdobfs</code> instead.</p>\n</blockquote>\n<h3>Upgrading (Local Installs)</h3>\n<p>To get the dankest of memes, you will need to update whenever the meme list is updated:</p>\n<pre>pip install --upgrade sutdobfs\n</pre>\n<p>If it says \"requirement already satisfied\", but you can clearly see that <a href=\"https://pypi.org/project/sutdobfs/\" rel=\"nofollow\">the latest version on PyPI</a> is greater than what you have, simply nuke and start over:</p>\n<pre>pip uninstall sutdobfs\npip install sutdobfs\n</pre>\n<h2>How this works</h2>\n<p><code>sutdobfs</code> uses the <code>tokenizer</code> module in the Python standard library to parse through source files. <code>sutdobfs</code> will scan through your code and identify variable and function names that are safe to rename: only names in the <a href=\"https://www.geeksforgeeks.org/scope-resolution-in-python-legb-rule/\" rel=\"nofollow\">local and enclosed scopes</a> will be renamed (if you're interested in the algorithm that determines scope, check the <a href=\"sutdobfs/gatekeepers/__init__.py\" rel=\"nofollow\">Gatekeeper source code</a>). Candidate replacements are pulled from a  \"dictionary\" (actually a <code>.txt</code> file) of memes to replace these variable names. In case of a name collision (too few memes), <code>_copy</code> will be appended to the end of the variable name. Finally, a new Python file (same filename ending with <code>.sutd.py</code> in the same directory by default) containing the memed names is be created.</p>\n<p>The default list of memes can be found in the <a href=\"sutdobfs/memes/memes.txt\" rel=\"nofollow\">memes.txt</a> file. Feel free to add more memes to the list using GitHub! If you're new to GitHub, this is a great way to learn how to use GitHub to collaborate \u2013 read the <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">contributing guide</a> for more information.</p>\n<h2>Advanced Usage</h2>\n<h3>Custom output path</h3>\n<p>Simply add another argument to the command line to customize the path of the output file:</p>\n<pre>sutdobfs input_file.py output_file.py\n</pre>\n<h3>Random Names for Memes</h3>\n<p>By default, names are chosen using hashing: that means the same variable name will always result in the same meme (for the same meme dictionary). If you would like a random meme to be chosen every time you run the obfsucator, add the <code>--random</code> option:</p>\n<pre>sutdobfs input_file.py --random\n</pre>\n<h3>Sequential Names for Memes</h3>\n<p>To guarantee that all memes in the dictionary are used before memes are recycled, pass the <code>--sequential</code> (or <code>--seq</code>) argument:</p>\n<pre>sutdobfs input_file.py --seq\n</pre>\n<p>This will assign memes based on the order <code>sutdobfs</code> encounters names in your source code. This can be combined with the <code>--random</code> option:</p>\n<pre>sutdobfs input_file.py --seq --random\n</pre>\n<h3>Custom Meme Dictionaries</h3>\n<p>You can specify your own text file containing memes to be used in the replacement process:</p>\n<pre>sutdobfs input_file.py --memes your_meme.txt\n</pre>\n<p>Python 3 supports unicode characters in other languages (but not emoji). Get creative!</p>\n<p>Here's an example using the built-in <code>jojo.txt</code> meme dictionary:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">even_speedwagon_is_afraid</span><span class=\"p\">(</span><span class=\"n\">ORA_ORA_ORA_ORA</span><span class=\"p\">,</span> <span class=\"n\">\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ORA_ORA_ORA_ORA</span> <span class=\"ow\">or</span> <span class=\"s1\">'No more'</span><span class=\"p\">,</span> <span class=\"s1\">'bottle'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s1\">'s'</span> <span class=\"k\">if</span> <span class=\"n\">ORA_ORA_ORA_ORA</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">''</span><span class=\"p\">),</span> <span class=\"n\">\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9\u30aa\u30e9</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">even_speedwagon_is_afraid</span><span class=\"p\">(</span><span class=\"n\">\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0</span><span class=\"p\">,</span> <span class=\"s1\">'of beer on the wall,'</span><span class=\"p\">)</span>\n        <span class=\"n\">even_speedwagon_is_afraid</span><span class=\"p\">(</span><span class=\"n\">\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0</span><span class=\"p\">,</span> <span class=\"s1\">'of beer,'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Take one down, pass it around,'</span><span class=\"p\">)</span>\n        <span class=\"n\">even_speedwagon_is_afraid</span><span class=\"p\">(</span><span class=\"n\">\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0\u30e0\u30c0</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'of beer on the wall.</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>Note that your custom filename cannot be the same as the built-in ones found in the <a href=\"sutdobfs/memes\" rel=\"nofollow\">meme folder</a>, otherwise the built-in files will be used instead.</p>\n<h2>Limitations</h2>\n<p>At the moment, this tool cannot meme <a href=\"https://realpython.com/python-f-strings/\" rel=\"nofollow\">f-strings</a>, because the <code>tokenzier</code> module reads f-strings as a single giant string. I am working hard on a f-string lexer, in the meantime, please use the older <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\" rel=\"nofollow\"><code>str.format</code> method</a> instead.</p>\n<p>This tool will break if your code attempts to perform imports in a local scope. I will not fix this, because you're <a href=\"https://stackoverflow.com/a/1188672\" rel=\"nofollow\">not supposed to</a> use the import keyword like that anyway.</p>\n<p>This tool is offered on a best effort basis with absolutely no warranty. If you find a bug or have a suggestion, please open an issue on this GitHub repository and include the sample file that you tried to meme.</p>\n\n          </div>"}, "last_serial": 6558111, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2ef6d16e109f3c967bc35f4925dd4997", "sha256": "1190b1e74bf2a98ddd94683fde004edf5fecf0992aae228271835e74f514e727"}, "downloads": -1, "filename": "sutdobfs-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ef6d16e109f3c967bc35f4925dd4997", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9647, "upload_time": "2020-02-02T10:16:45", "upload_time_iso_8601": "2020-02-02T10:16:45.045928Z", "url": "https://files.pythonhosted.org/packages/c8/e0/83f8d2bcb5d9e5cff53c24cf4b8cdf7629f0ae68cb55857be1e36b349bb7/sutdobfs-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45c7e7339b5d238b4a5bc985636f5284", "sha256": "2045c23c82e9771db74c8a62083f560008df0fcc9acf1ad822b3d0bfd0b736a3"}, "downloads": -1, "filename": "sutdobfs-1.0.0.tar.gz", "has_sig": false, "md5_digest": "45c7e7339b5d238b4a5bc985636f5284", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6227, "upload_time": "2020-02-02T10:16:47", "upload_time_iso_8601": "2020-02-02T10:16:47.510564Z", "url": "https://files.pythonhosted.org/packages/7b/0b/6c69de34f33ae592f511d34695254ca4a55cdcdb456de2a68e18f5c70f21/sutdobfs-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e86c650123a6bedc0a088f58924d7d67", "sha256": "50b3bf35dcb41cbd24937f836837e281dad7c5c8f5cf44f074939f91b04c0abb"}, "downloads": -1, "filename": "sutdobfs-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e86c650123a6bedc0a088f58924d7d67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9643, "upload_time": "2020-02-02T10:22:03", "upload_time_iso_8601": "2020-02-02T10:22:03.176456Z", "url": "https://files.pythonhosted.org/packages/5e/7f/6200f00cbce8379cf65deb8c7c8e3f4248dcc7a03225623fd3605d1c5945/sutdobfs-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68d95fa74b36173a032c6d9e531f306c", "sha256": "89f8c073144673cd537317fb6c51e4e50574366a6d5492a3688450a2c3ef2a6e"}, "downloads": -1, "filename": "sutdobfs-1.0.1.tar.gz", "has_sig": false, "md5_digest": "68d95fa74b36173a032c6d9e531f306c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6227, "upload_time": "2020-02-02T10:22:06", "upload_time_iso_8601": "2020-02-02T10:22:06.376197Z", "url": "https://files.pythonhosted.org/packages/a1/fe/e3babe2642ee4644bf5309c36a2ba20408287614e390c7678d0ff8cadaf3/sutdobfs-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2fac5b144125e59360a8452990df518b", "sha256": "2c3ff85a74ea2f2af0a125f7f9980e29affd0306aa52b1d7387cfc2d4a51ee83"}, "downloads": -1, "filename": "sutdobfs-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2fac5b144125e59360a8452990df518b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11895, "upload_time": "2020-02-02T10:37:31", "upload_time_iso_8601": "2020-02-02T10:37:31.949239Z", "url": "https://files.pythonhosted.org/packages/90/52/eb25f5dc3895bf8e4a8ce293db5bcb70d11fc5b0edce73be0ddd5f8d16ad/sutdobfs-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04a98b2211def8aebb585a3463ead6e9", "sha256": "c8fa4ec575bff822496dc424d6c0c21ec3a9fe72e9710d0724f9e1f6ad69659a"}, "downloads": -1, "filename": "sutdobfs-1.0.2.tar.gz", "has_sig": false, "md5_digest": "04a98b2211def8aebb585a3463ead6e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9444, "upload_time": "2020-02-02T10:37:36", "upload_time_iso_8601": "2020-02-02T10:37:36.050783Z", "url": "https://files.pythonhosted.org/packages/a1/34/a7110d17b2e2314d376c61a15e3a50ae75295aa44cb2367daa0a02cb152e/sutdobfs-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "eccb1a320a995c26691ea65a03e69c30", "sha256": "9d5bd20965c2aaa95e32880213a1316e151d24bf6764d3f7915b318620ab1014"}, "downloads": -1, "filename": "sutdobfs-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "eccb1a320a995c26691ea65a03e69c30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9775, "upload_time": "2020-02-02T10:40:45", "upload_time_iso_8601": "2020-02-02T10:40:45.221742Z", "url": "https://files.pythonhosted.org/packages/ab/e3/a211fe4a4f7ef3ee97830e64de0476aa8fa1c88afae0d2c7629314ca05f6/sutdobfs-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22daa02e1ec26855b5e6ea5296adcff4", "sha256": "f861d487f66835555ff9a671a644ae885fd32c70949dee085cb5aeca492f3652"}, "downloads": -1, "filename": "sutdobfs-1.0.3.tar.gz", "has_sig": false, "md5_digest": "22daa02e1ec26855b5e6ea5296adcff4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9449, "upload_time": "2020-02-02T10:40:47", "upload_time_iso_8601": "2020-02-02T10:40:47.262963Z", "url": "https://files.pythonhosted.org/packages/f6/d0/5cdb0abbdcbcd685e45d8c74e613cf13acdb956333f9dfe5d35c112ed7bc/sutdobfs-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "02b4d5715fb7737a8b690512d4e45972", "sha256": "6500ae1acf1557e0db02f75a3c32cf922c4084a24046fb8df1a53ce8ae019edc"}, "downloads": -1, "filename": "sutdobfs-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "02b4d5715fb7737a8b690512d4e45972", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10337, "upload_time": "2020-02-02T13:50:21", "upload_time_iso_8601": "2020-02-02T13:50:21.438313Z", "url": "https://files.pythonhosted.org/packages/87/5a/2220c10dd835972115facf8e543ae9a5d7b7f5f521a988e3e37435ca9a80/sutdobfs-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "105d2275c933c90d6ee1b58f36d14960", "sha256": "34c6c0de5a243cf26fdc3503f3613651a4384652ad6d8564b10cdd7b59b4bd7e"}, "downloads": -1, "filename": "sutdobfs-1.0.4.tar.gz", "has_sig": false, "md5_digest": "105d2275c933c90d6ee1b58f36d14960", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11397, "upload_time": "2020-02-02T13:50:23", "upload_time_iso_8601": "2020-02-02T13:50:23.959102Z", "url": "https://files.pythonhosted.org/packages/d1/86/9b9877522c0b84809355b4e4e6fc85549b9183d0a42cc08b0516431286ab/sutdobfs-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "02b4d5715fb7737a8b690512d4e45972", "sha256": "6500ae1acf1557e0db02f75a3c32cf922c4084a24046fb8df1a53ce8ae019edc"}, "downloads": -1, "filename": "sutdobfs-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "02b4d5715fb7737a8b690512d4e45972", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10337, "upload_time": "2020-02-02T13:50:21", "upload_time_iso_8601": "2020-02-02T13:50:21.438313Z", "url": "https://files.pythonhosted.org/packages/87/5a/2220c10dd835972115facf8e543ae9a5d7b7f5f521a988e3e37435ca9a80/sutdobfs-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "105d2275c933c90d6ee1b58f36d14960", "sha256": "34c6c0de5a243cf26fdc3503f3613651a4384652ad6d8564b10cdd7b59b4bd7e"}, "downloads": -1, "filename": "sutdobfs-1.0.4.tar.gz", "has_sig": false, "md5_digest": "105d2275c933c90d6ee1b58f36d14960", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11397, "upload_time": "2020-02-02T13:50:23", "upload_time_iso_8601": "2020-02-02T13:50:23.959102Z", "url": "https://files.pythonhosted.org/packages/d1/86/9b9877522c0b84809355b4e4e6fc85549b9183d0a42cc08b0516431286ab/sutdobfs-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:56 2020"}