{"info": {"author": "Gonzalo Bulnes Guilpain", "author_email": "gon.bulnes@fastmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<p align='center'><img width=\"128\" src='./vendor/noto-emoji-owl.png' alt=\"An owl emoji\"/></p>\n<h1 align='center'>Simulated Time</h1>\n\n<p align=\"center\">A testing (and partial) replacement for Python's <code>time</code> package, for fully-controlled time-dependent tests.</p>\n<p align=\"center\"><a href=\"https://pypi.org/project/stime\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/stime.svg\" /></a></p>\n\n<br /><br />\n\nTesting functions that depend on time is always tricky, and can take long. To save time and avoid relying on `time.sleep()`, this package allows to fast-forward time arbitrarily.\n\nIt implements the functions `stime.time()` and `stime.monotonic()`.\n\n<br />\n\n> **Note**: This package in not meant to replace [`time`][time] in production! Only in testing environments!\n\n  [time]: https://docs.python.org/3/library/time.html\n\nUsage\n-----\n\nThe idea is to make your code to use `stime.test()` instead of `time.test()` while it is being tested.\n\nIdeally, the code you want to test is receiving a time source through _dependency injection_, like the `Timer` class in the example below.\n\nIf the code you are testing is not using dependency injection, it is likely that you can still override the time function in your tests. That is less elegant, but can be a fair trade-off to avoid having its test suite rely on `time.sleep()`.\n\nOnce your code is using `stime`, you can precisely control the output of `stime.time()` (or `stime.monotonic()`) using `stime.reset()` and `stime.tick()`:\n\n- **`tick(n)`**: increments the current time by `n` seconds (e.g. `1.3` seconds)\n- **`reset(t)`**: (re-)sets the current time to the timestamp `t` (e.g. `1561120200`)\n\n### Example\n\nFind the full code for this example in [`examples/timer`](./examples/timer)!\n\n```python\n# test_timer.py\n\nimport unittest\nimport stime # \u2460\nfrom timer import Timer # your package with time-dependent functions to be tested\n\nclass TestTimer(unittest.TestCase):\n\n    def test_timer_rings_for_five_seconds_starting_at_alarm_time(self):\n        # create a new timer using stime as a time source\n        cooking_timer = Timer(time_source=stime)\n        cooking_timer.set_alarm(1561120200) # Unix timestamp for 21 June 2019 around noon\n\n        stime.reset(1561120199) # \u2461 a second before alarm time\n        is_ringing = cooking_timer.is_ringing() # calls stime.time() because it is the timer time_source\n        self.assertEqual(is_ringing, False, \"expected the timer NOT to ring before alarm time\")\n\n        stime.reset(1561120200) # \u2462 exactly alarm time\n        is_ringing = cooking_timer.is_ringing() # calls stime.time() because it is the timer time_source\n        self.assertEqual(is_ringing, True, \"expected the timer to ring at alarm time\")\n\n        stime.tick(5) # \u2463 5 seconds after alarm time\n        is_ringing = cooking_timer.is_ringing() # calls stime.time() because it is the timer time_source\n        self.assertEqual(is_ringing, True, \"expected the timer to be ringing 5 seconds after alarm time\")\n\n        stime.tick() # \u2464 add 1 more second\n        is_ringing = cooking_timer.is_ringing() # calls stime.time() because it is the timer time_source\n        self.assertEqual(is_ringing, False, \"expected the timer NOT to be ringing 6 seconds after alarm time\")\n\n# [...]\n```\n\n- \u2460 Import `stime` where you would have imported `time` if it wasn't testing.\n- \u2461 Set the current time to whatever is convenient...\n- \u2462 Reset it as often as needed...\n- \u2463 Fast-forward when convenient...\n- \u2464 or progress one second at a time!\n\nDevelopment\n-----------\n\n### Getting started\n\nOptionally, create a virtual environment for this project and activate it.\n\n```bash\npython -m venv timer_venv # assuming Python 3\n. timer_venv/bin/activate\n```\n\nThen do your thing!\n\n```bash\n# run the example test suite:\npython test_timer.py\n\n# once you're done deactivate the virtual environment if you use one:\ndeactivate\n```\n\n### Release\n\n```bash\n# Install the latest setuptools and wheel (in a virtual environment eventually)\npip install --upgrade setuptools wheel\n\n# Update the package version number and tag it:\nvim setup.py\ngit tag -a 'v1.0.0' -m 'Initial release'\ngit push origin master --tags\n\n# Build the distribution files\nmake build\n\n# And upload them to PyPI\nmake upload_to_pypi\n```\n\nCredits\n-------\n\nThe owl emoji in the header was rendered from an SVG that belongs to Google and [was published under the Apache License v2.0 as part of Noto Emoji](https://github.com/googlei18n/noto-emoji).\n\nLicense\n-------\n\n    stime\n    Copyright (C) 2019 Gonzalo Bulnes Guilpain\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gonzalo-bulnes/stime", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "stime", "package_url": "https://pypi.org/project/stime/", "platform": "", "project_url": "https://pypi.org/project/stime/", "project_urls": {"Homepage": "https://github.com/gonzalo-bulnes/stime"}, "release_url": "https://pypi.org/project/stime/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "A testing (and partial) replacement for the time package, for fully-controlled time-dependent tests.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\"><img alt=\"An owl emoji\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db44074edd6715befbfbe3a62a3d1995d4624d37/2e2f76656e646f722f6e6f746f2d656d6f6a692d6f776c2e706e67\" width=\"128\"></p>\n<h1>Simulated Time</h1>\n<p align=\"center\">A testing (and partial) replacement for Python's <code>time</code> package, for fully-controlled time-dependent tests.</p>\n<p align=\"center\"><a href=\"https://pypi.org/project/stime\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/91e69bf8c5311de320445b8ad01fa0353a647842/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7374696d652e737667\"></a></p>\n<p><br><br></p>\n<p>Testing functions that depend on time is always tricky, and can take long. To save time and avoid relying on <code>time.sleep()</code>, this package allows to fast-forward time arbitrarily.</p>\n<p>It implements the functions <code>stime.time()</code> and <code>stime.monotonic()</code>.</p>\n<br>\n<blockquote>\n<p><strong>Note</strong>: This package in not meant to replace <a href=\"https://docs.python.org/3/library/time.html\" rel=\"nofollow\"><code>time</code></a> in production! Only in testing environments!</p>\n</blockquote>\n<h2>Usage</h2>\n<p>The idea is to make your code to use <code>stime.test()</code> instead of <code>time.test()</code> while it is being tested.</p>\n<p>Ideally, the code you want to test is receiving a time source through <em>dependency injection</em>, like the <code>Timer</code> class in the example below.</p>\n<p>If the code you are testing is not using dependency injection, it is likely that you can still override the time function in your tests. That is less elegant, but can be a fair trade-off to avoid having its test suite rely on <code>time.sleep()</code>.</p>\n<p>Once your code is using <code>stime</code>, you can precisely control the output of <code>stime.time()</code> (or <code>stime.monotonic()</code>) using <code>stime.reset()</code> and <code>stime.tick()</code>:</p>\n<ul>\n<li><strong><code>tick(n)</code></strong>: increments the current time by <code>n</code> seconds (e.g. <code>1.3</code> seconds)</li>\n<li><strong><code>reset(t)</code></strong>: (re-)sets the current time to the timestamp <code>t</code> (e.g. <code>1561120200</code>)</li>\n</ul>\n<h3>Example</h3>\n<p>Find the full code for this example in <a href=\"./examples/timer\" rel=\"nofollow\"><code>examples/timer</code></a>!</p>\n<pre><span class=\"c1\"># test_timer.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">stime</span> <span class=\"c1\"># \u2460</span>\n<span class=\"kn\">from</span> <span class=\"nn\">timer</span> <span class=\"kn\">import</span> <span class=\"n\">Timer</span> <span class=\"c1\"># your package with time-dependent functions to be tested</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TestTimer</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_timer_rings_for_five_seconds_starting_at_alarm_time</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># create a new timer using stime as a time source</span>\n        <span class=\"n\">cooking_timer</span> <span class=\"o\">=</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"n\">time_source</span><span class=\"o\">=</span><span class=\"n\">stime</span><span class=\"p\">)</span>\n        <span class=\"n\">cooking_timer</span><span class=\"o\">.</span><span class=\"n\">set_alarm</span><span class=\"p\">(</span><span class=\"mi\">1561120200</span><span class=\"p\">)</span> <span class=\"c1\"># Unix timestamp for 21 June 2019 around noon</span>\n\n        <span class=\"n\">stime</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"mi\">1561120199</span><span class=\"p\">)</span> <span class=\"c1\"># \u2461 a second before alarm time</span>\n        <span class=\"n\">is_ringing</span> <span class=\"o\">=</span> <span class=\"n\">cooking_timer</span><span class=\"o\">.</span><span class=\"n\">is_ringing</span><span class=\"p\">()</span> <span class=\"c1\"># calls stime.time() because it is the timer time_source</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">is_ringing</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">\"expected the timer NOT to ring before alarm time\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">stime</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"mi\">1561120200</span><span class=\"p\">)</span> <span class=\"c1\"># \u2462 exactly alarm time</span>\n        <span class=\"n\">is_ringing</span> <span class=\"o\">=</span> <span class=\"n\">cooking_timer</span><span class=\"o\">.</span><span class=\"n\">is_ringing</span><span class=\"p\">()</span> <span class=\"c1\"># calls stime.time() because it is the timer time_source</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">is_ringing</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">\"expected the timer to ring at alarm time\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">stime</span><span class=\"o\">.</span><span class=\"n\">tick</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\"># \u2463 5 seconds after alarm time</span>\n        <span class=\"n\">is_ringing</span> <span class=\"o\">=</span> <span class=\"n\">cooking_timer</span><span class=\"o\">.</span><span class=\"n\">is_ringing</span><span class=\"p\">()</span> <span class=\"c1\"># calls stime.time() because it is the timer time_source</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">is_ringing</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">\"expected the timer to be ringing 5 seconds after alarm time\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">stime</span><span class=\"o\">.</span><span class=\"n\">tick</span><span class=\"p\">()</span> <span class=\"c1\"># \u2464 add 1 more second</span>\n        <span class=\"n\">is_ringing</span> <span class=\"o\">=</span> <span class=\"n\">cooking_timer</span><span class=\"o\">.</span><span class=\"n\">is_ringing</span><span class=\"p\">()</span> <span class=\"c1\"># calls stime.time() because it is the timer time_source</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">is_ringing</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">\"expected the timer NOT to be ringing 6 seconds after alarm time\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [...]</span>\n</pre>\n<ul>\n<li>\u2460 Import <code>stime</code> where you would have imported <code>time</code> if it wasn't testing.</li>\n<li>\u2461 Set the current time to whatever is convenient...</li>\n<li>\u2462 Reset it as often as needed...</li>\n<li>\u2463 Fast-forward when convenient...</li>\n<li>\u2464 or progress one second at a time!</li>\n</ul>\n<h2>Development</h2>\n<h3>Getting started</h3>\n<p>Optionally, create a virtual environment for this project and activate it.</p>\n<pre>python -m venv timer_venv <span class=\"c1\"># assuming Python 3</span>\n. timer_venv/bin/activate\n</pre>\n<p>Then do your thing!</p>\n<pre><span class=\"c1\"># run the example test suite:</span>\npython test_timer.py\n\n<span class=\"c1\"># once you're done deactivate the virtual environment if you use one:</span>\ndeactivate\n</pre>\n<h3>Release</h3>\n<pre><span class=\"c1\"># Install the latest setuptools and wheel (in a virtual environment eventually)</span>\npip install --upgrade setuptools wheel\n\n<span class=\"c1\"># Update the package version number and tag it:</span>\nvim setup.py\ngit tag -a <span class=\"s1\">'v1.0.0'</span> -m <span class=\"s1\">'Initial release'</span>\ngit push origin master --tags\n\n<span class=\"c1\"># Build the distribution files</span>\nmake build\n\n<span class=\"c1\"># And upload them to PyPI</span>\nmake upload_to_pypi\n</pre>\n<h2>Credits</h2>\n<p>The owl emoji in the header was rendered from an SVG that belongs to Google and <a href=\"https://github.com/googlei18n/noto-emoji\" rel=\"nofollow\">was published under the Apache License v2.0 as part of Noto Emoji</a>.</p>\n<h2>License</h2>\n<pre><code>stime\nCopyright (C) 2019 Gonzalo Bulnes Guilpain\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n</code></pre>\n\n          </div>"}, "last_serial": 5434840, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "a51c72a54c93b5dd1792ac6d59ebf1be", "sha256": "93573a312fb90651260fca62d3d8cdfe3ea771ab2d1c1ab6a41a3433d364fb48"}, "downloads": -1, "filename": "stime-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a51c72a54c93b5dd1792ac6d59ebf1be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16532, "upload_time": "2019-06-22T14:15:25", "upload_time_iso_8601": "2019-06-22T14:15:25.047324Z", "url": "https://files.pythonhosted.org/packages/06/37/1ef6c23ec316ee57a815794a13cee9d4b9f0571085a33029f42d58f93667/stime-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f647da5823f27393469c034731962c11", "sha256": "845f3c1b0574c1f7e3bca7f1936c78b4db1560b43d1d7ff7cab9f0fa2ac94bfe"}, "downloads": -1, "filename": "stime-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f647da5823f27393469c034731962c11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3886, "upload_time": "2019-06-22T14:15:27", "upload_time_iso_8601": "2019-06-22T14:15:27.339466Z", "url": "https://files.pythonhosted.org/packages/e3/da/c5521ae1723decc3c0cd4e6c50d898f8d29e4048ad90b4baf89a22f15c5a/stime-0.1.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "304d410a742177909e460e7bfb44b79a", "sha256": "a911b381c5c31dce29a4d6f5547248fc664fae2701d761639e832e96dfc5eaf0"}, "downloads": -1, "filename": "stime-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "304d410a742177909e460e7bfb44b79a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16927, "upload_time": "2019-06-22T14:40:02", "upload_time_iso_8601": "2019-06-22T14:40:02.126972Z", "url": "https://files.pythonhosted.org/packages/fb/0c/7217618901c3d87beb13f59287170a4859c2b20cdbdd60a4a0efd6fbc04d/stime-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05a27231de27638a3de13c9d4304782a", "sha256": "5bf56469afe6194c95a2c8a47200eaff008d488e089026c1a5da9e770e12104f"}, "downloads": -1, "filename": "stime-1.0.0.tar.gz", "has_sig": false, "md5_digest": "05a27231de27638a3de13c9d4304782a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4381, "upload_time": "2019-06-22T14:40:04", "upload_time_iso_8601": "2019-06-22T14:40:04.002595Z", "url": "https://files.pythonhosted.org/packages/dc/8d/943ef63770aecbc93ed7805ea58bfec5a44c1bab7887cf94ab28537dab8a/stime-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "304d410a742177909e460e7bfb44b79a", "sha256": "a911b381c5c31dce29a4d6f5547248fc664fae2701d761639e832e96dfc5eaf0"}, "downloads": -1, "filename": "stime-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "304d410a742177909e460e7bfb44b79a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16927, "upload_time": "2019-06-22T14:40:02", "upload_time_iso_8601": "2019-06-22T14:40:02.126972Z", "url": "https://files.pythonhosted.org/packages/fb/0c/7217618901c3d87beb13f59287170a4859c2b20cdbdd60a4a0efd6fbc04d/stime-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05a27231de27638a3de13c9d4304782a", "sha256": "5bf56469afe6194c95a2c8a47200eaff008d488e089026c1a5da9e770e12104f"}, "downloads": -1, "filename": "stime-1.0.0.tar.gz", "has_sig": false, "md5_digest": "05a27231de27638a3de13c9d4304782a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4381, "upload_time": "2019-06-22T14:40:04", "upload_time_iso_8601": "2019-06-22T14:40:04.002595Z", "url": "https://files.pythonhosted.org/packages/dc/8d/943ef63770aecbc93ed7805ea58bfec5a44c1bab7887cf94ab28537dab8a/stime-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:56 2020"}