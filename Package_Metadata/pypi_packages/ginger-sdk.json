{"info": {"author": "Ginger Payments", "author_email": "dev@gingerpayments.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Ginger Python bindings\n\n[![Build Status](https://travis-ci.org/gingerpayments/ginger-php.svg)](https://travis-ci.org/gingerpayments/ginger-python.svg)\n[![MIT License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://github.com/gingerpayments/ginger-php/blob/master/LICENSE)\n\n## Requirements\n\n* Python 3.6 or later\n* requests 2.20 or later\n\n## Installation\n\nYou can install the Python bindings from PyPI:\n\n```shell script\npip install ginger-sdk\n```\n\nYou can also use the Python bindings without using the Python Package Index by placing the ginger_sdk directory\nsomewhere in your `PYTHONPATH`.\n\n## Getting started\n\nFirst create a new API client with your API key and API endpoint:\n\n```python\nfrom ginger_sdk import Ginger\n\nclient = Ginger.create_client('https://api.example.com', 'your-api-key')\n```\n\n### Initiating a payment\n\nYou can start a new payment by creating a new order:\n\n```python\norder = client.create_order(\n    {\n        'merchant_order_id': 'my-custom-order-id-12345',\n        'currency': 'EUR',\n        'amount': 2500,  # Amount in cents\n        'description': 'Purchase order 12345',\n        'return_url': 'https://www.example.com',\n        'transactions': [\n            {\n                'payment_method': 'credit-card',\n            }\n        ]\n    }\n)\n```\n\nOnce you've created your order, a transaction is created and associated with it. You will need to redirect the user to\nthe transaction's payment URL, which you can retrieve as follows:\n\n```python\npayment_url = order['order_url']\n```\n\nIt is also recommended that you store the order's ID somewhere, so you can retrieve information about it later:\n\n```python\norder_id = order['id']\n```\n\nThere is a lot more data related to an order. Please refer to the API documentation provided by your PSP to learn more\nabout the various payment methods and options.\n\n### Getting an order\n\nIf you want to retrieve an existing order, use the `get_order` method on the client:\n\n```python\norder = client.get_order(order_id)\n```\n\nThis will return an associative array with all order information.\n\n### Updating an order\n\nSome fields are not read-only and you are able to update them after order has been created. You can do this using\nthe `update_order` method on the client:\n\n```python\norder = client.get_order(order_id)\norder['description'] = 'New Order Description'\nupdated_order = client.update_order(order)\n```\n\n### Initiating a refund\n\nYou can refund an existing order by using the `refund_order` method on the client:\n\n```python\nrefund_order = client.refund_order(order_id, {'amount': 123, 'description': 'My refund'})\n```\n\n### Capturing an order\n\nYou can initiate a capture of an order's transaction by using the `capture_order_transaction` method:\n\n```python\nclient.capture_order_transaction(order_id, transaction_id)\n```\n\n### Getting the iDEAL issuers\n\nWhen you create an order with the iDEAL payment method, you need to provide an issuer ID. The issuer ID is an identifier\nof the bank the user has selected. You can retrieve all possible issuers by using the `get_ideal_issuers` method:\n\n```python\nissuers = client.get_ideal_issuers()\n```\n\nYou can then use this information to present a list to the user of possible banks to choose from.\n\n### Custom requests\n\nYou can send any request that the API accepts using the `send` method. E.g. instead of using the `create_order` method\nyou could also use the following:\n\n```python\nresult = client.send(\n    'POST',      # Request method\n    '/orders/',  # API path\n    order_data   # Data to send with the request; optional\n)\n```\n\nThe `$result` variable would then contain the decoded JSON returned by the API.\n\n## Using a different CA bundle\n\nIf you need to use a different CA bundle than the one that comes with your system, you can install the Certifi package\nfrom PyPI.\n\n```shell script\npip install certifi\n```\n\nThe certificates supplied by Certifi will be automatically used.\n\n## Custom HTTP client\n\nThis library ships with its own minimal HTTP client for compatibility reasons. If you would like to use a different HTTP\nclient, you can do so by extending the `ginger_sdk.http_client.HttpClient` abstract base class and then constructing\nyour own client:\n\n```python\nfrom ginger_sdk.api_client import ApiClient\n\nmy_http_client = MyHttpClient()\nclient = ApiClient(my_http_client)\n```\n\nMake sure your HTTP client prefixes the endpoint URL and API version to all requests, and uses HTTP basic auth to\nauthenticate with the API using your API key.\n\n## API documentation\n\nFor the complete API documentation please prefer to the resources provided by your PSP.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gingerpayments/ginger-python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ginger-sdk", "package_url": "https://pypi.org/project/ginger-sdk/", "platform": "", "project_url": "https://pypi.org/project/ginger-sdk/", "project_urls": {"Homepage": "https://github.com/gingerpayments/ginger-python"}, "release_url": "https://pypi.org/project/ginger-sdk/2.1.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "The official Ginger Payments Python SDK", "version": "2.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Ginger Python bindings</h1>\n<p><a href=\"https://travis-ci.org/gingerpayments/ginger-python.svg\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50b0e01a2f7df0325fafb7ed6f185feff61dd9c5/68747470733a2f2f7472617669732d63692e6f72672f67696e6765727061796d656e74732f67696e6765722d7068702e737667\"></a>\n<a href=\"https://github.com/gingerpayments/ginger-php/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28c5b39bdf2da9ce3c367dcfe49e46905cf7d242/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e737667\"></a></p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6 or later</li>\n<li>requests 2.20 or later</li>\n</ul>\n<h2>Installation</h2>\n<p>You can install the Python bindings from PyPI:</p>\n<pre>pip install ginger-sdk\n</pre>\n<p>You can also use the Python bindings without using the Python Package Index by placing the ginger_sdk directory\nsomewhere in your <code>PYTHONPATH</code>.</p>\n<h2>Getting started</h2>\n<p>First create a new API client with your API key and API endpoint:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ginger_sdk</span> <span class=\"kn\">import</span> <span class=\"n\">Ginger</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Ginger</span><span class=\"o\">.</span><span class=\"n\">create_client</span><span class=\"p\">(</span><span class=\"s1\">'https://api.example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'your-api-key'</span><span class=\"p\">)</span>\n</pre>\n<h3>Initiating a payment</h3>\n<p>You can start a new payment by creating a new order:</p>\n<pre><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_order</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'merchant_order_id'</span><span class=\"p\">:</span> <span class=\"s1\">'my-custom-order-id-12345'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'EUR'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">2500</span><span class=\"p\">,</span>  <span class=\"c1\"># Amount in cents</span>\n        <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'Purchase order 12345'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'return_url'</span><span class=\"p\">:</span> <span class=\"s1\">'https://www.example.com'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'transactions'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s1\">'payment_method'</span><span class=\"p\">:</span> <span class=\"s1\">'credit-card'</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Once you've created your order, a transaction is created and associated with it. You will need to redirect the user to\nthe transaction's payment URL, which you can retrieve as follows:</p>\n<pre><span class=\"n\">payment_url</span> <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"s1\">'order_url'</span><span class=\"p\">]</span>\n</pre>\n<p>It is also recommended that you store the order's ID somewhere, so you can retrieve information about it later:</p>\n<pre><span class=\"n\">order_id</span> <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]</span>\n</pre>\n<p>There is a lot more data related to an order. Please refer to the API documentation provided by your PSP to learn more\nabout the various payment methods and options.</p>\n<h3>Getting an order</h3>\n<p>If you want to retrieve an existing order, use the <code>get_order</code> method on the client:</p>\n<pre><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_order</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">)</span>\n</pre>\n<p>This will return an associative array with all order information.</p>\n<h3>Updating an order</h3>\n<p>Some fields are not read-only and you are able to update them after order has been created. You can do this using\nthe <code>update_order</code> method on the client:</p>\n<pre><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_order</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">)</span>\n<span class=\"n\">order</span><span class=\"p\">[</span><span class=\"s1\">'description'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'New Order Description'</span>\n<span class=\"n\">updated_order</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">update_order</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n</pre>\n<h3>Initiating a refund</h3>\n<p>You can refund an existing order by using the <code>refund_order</code> method on the client:</p>\n<pre><span class=\"n\">refund_order</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">refund_order</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'My refund'</span><span class=\"p\">})</span>\n</pre>\n<h3>Capturing an order</h3>\n<p>You can initiate a capture of an order's transaction by using the <code>capture_order_transaction</code> method:</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">capture_order_transaction</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">,</span> <span class=\"n\">transaction_id</span><span class=\"p\">)</span>\n</pre>\n<h3>Getting the iDEAL issuers</h3>\n<p>When you create an order with the iDEAL payment method, you need to provide an issuer ID. The issuer ID is an identifier\nof the bank the user has selected. You can retrieve all possible issuers by using the <code>get_ideal_issuers</code> method:</p>\n<pre><span class=\"n\">issuers</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_ideal_issuers</span><span class=\"p\">()</span>\n</pre>\n<p>You can then use this information to present a list to the user of possible banks to choose from.</p>\n<h3>Custom requests</h3>\n<p>You can send any request that the API accepts using the <code>send</code> method. E.g. instead of using the <code>create_order</code> method\nyou could also use the following:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span>\n    <span class=\"s1\">'POST'</span><span class=\"p\">,</span>      <span class=\"c1\"># Request method</span>\n    <span class=\"s1\">'/orders/'</span><span class=\"p\">,</span>  <span class=\"c1\"># API path</span>\n    <span class=\"n\">order_data</span>   <span class=\"c1\"># Data to send with the request; optional</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The <code>$result</code> variable would then contain the decoded JSON returned by the API.</p>\n<h2>Using a different CA bundle</h2>\n<p>If you need to use a different CA bundle than the one that comes with your system, you can install the Certifi package\nfrom PyPI.</p>\n<pre>pip install certifi\n</pre>\n<p>The certificates supplied by Certifi will be automatically used.</p>\n<h2>Custom HTTP client</h2>\n<p>This library ships with its own minimal HTTP client for compatibility reasons. If you would like to use a different HTTP\nclient, you can do so by extending the <code>ginger_sdk.http_client.HttpClient</code> abstract base class and then constructing\nyour own client:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ginger_sdk.api_client</span> <span class=\"kn\">import</span> <span class=\"n\">ApiClient</span>\n\n<span class=\"n\">my_http_client</span> <span class=\"o\">=</span> <span class=\"n\">MyHttpClient</span><span class=\"p\">()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ApiClient</span><span class=\"p\">(</span><span class=\"n\">my_http_client</span><span class=\"p\">)</span>\n</pre>\n<p>Make sure your HTTP client prefixes the endpoint URL and API version to all requests, and uses HTTP basic auth to\nauthenticate with the API using your API key.</p>\n<h2>API documentation</h2>\n<p>For the complete API documentation please prefer to the resources provided by your PSP.</p>\n\n          </div>"}, "last_serial": 5919572, "releases": {"2.1.3": [{"comment_text": "", "digests": {"md5": "ecffd967de8463a209014d654d9d9289", "sha256": "b04daaba52005d50cc9a7232a920f2b45a3a6b768cc36ea36cb86009fed47ab6"}, "downloads": -1, "filename": "ginger-sdk-2.1.3.tar.gz", "has_sig": false, "md5_digest": "ecffd967de8463a209014d654d9d9289", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5163, "upload_time": "2019-10-02T19:00:15", "upload_time_iso_8601": "2019-10-02T19:00:15.811942Z", "url": "https://files.pythonhosted.org/packages/03/3e/bf7626283e7f9654296e8c66d46696287bd8928a999d479be8d2374c891b/ginger-sdk-2.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ecffd967de8463a209014d654d9d9289", "sha256": "b04daaba52005d50cc9a7232a920f2b45a3a6b768cc36ea36cb86009fed47ab6"}, "downloads": -1, "filename": "ginger-sdk-2.1.3.tar.gz", "has_sig": false, "md5_digest": "ecffd967de8463a209014d654d9d9289", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5163, "upload_time": "2019-10-02T19:00:15", "upload_time_iso_8601": "2019-10-02T19:00:15.811942Z", "url": "https://files.pythonhosted.org/packages/03/3e/bf7626283e7f9654296e8c66d46696287bd8928a999d479be8d2374c891b/ginger-sdk-2.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:24 2020"}