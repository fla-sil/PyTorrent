{"info": {"author": "Damien \"dee\" Coureau", "author_email": "kabaret-dev@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7"], "description": "# kabaret.flow_contextual_dict\n\nThis package provide the `ContextualView` class and the `get_contextual_dict` function.\n\nTogether, they give your flow users the ability to use defined value\nanywhere in the branch underneeth and override those values where you \nsee fit in the branches.\n\nEverything is explained here, but if your of the kind that prefers to read and execute code, there is a demo flow in the package for that. Install the package an create a new project with the type `kabaret.flow_contextual_dict.demo_flow.DemoFlow`.\n\n## Concept\n\nHere is a quick example with this classic structure where `settings` are `ContextualView` Objects:\n```\nProject\n    settings\n    episodes\n        ep001\n            settings\n            sequences\n                seq001\n                    settings\n                    shots\n                        shot001\n                            settings\n                            anim\n                                settings\n                                init_action\n                                bake_action\n                            lighting\n                                settings\n                                init_action\n                                render_action\n                            comp\n                                settings\n                                init_action\n                                render_action\n                        shot002\n                seq002\n                    ...\n        ep002\n            ...\n```\nLet's say in the `Project.settings` defines `fps=24` and a `pool=\"ANY\"`.\nEvery object in the episodes branch can call `get_contextual_dict()` to receive a dict like `{fps:24, pool:\"ANY\"}`.\nMost likely, action of every step/department of every shot will use this.\n\nNow let's say the sequence `seq002` is in a hurry and you want to dispatch all actions on your farm's \"SUPER_COMPUTERS\" pool. All you need is to \"override\" with `pool=\"SUPER_COMPUTERS\"` in `ep002.settings`.\n\nYou can do this in each `settings` in the flow, and you can also \"add\" values in each of them (those \"overrides\" and \"adds\" are called \"edits\").\n\nIn a nutshell, it's a cascading dict, or as some call it: a **contextual dict**.\n\n## Install\n\n`pip install kabaret.flow_contextual_dict`\n\nPlease use a virtual env, it is good for you and your karma ^^\n\n## Usage\n\n### Defining Contexts\n\nIn order to add a contextual dict in your flow, you just need to add\na Child relation to a `ContextualView`:\n```\nclass Shot(flow.Object):\n\n    settings = flow.Child(contextualView)\n    ...\n\n```\n\nThe name of the relation is very important:\n- Overrides stacking is based on this name so you need to use the same\nname along your branch in order for overrides to work as expected.\n- It defines the \"context_name\" argument to use for `get_contextual_dict()` calls.\n\nSo this will not work:\n```\nProject\n    settings\n    episodes\n        ep001\n            episode_settings\n```\nBut this will:\n```\nProject \n    settings\n    episodes\n        ep001\n            settings\n```\nNote that you can use `Child().ui(label=\"Episode Settings\")` if you *really* want to display a different name in the GUI.\n\nThis gives the ability to use several contexts in the same flow.\nIn this structure, all * marked item are `ContextualView`. There is two\ncontext defined: `settings` and `config`. The first one drives values by `sequences` and `shots`, the second one only affects `episodes`.\n```\nProject\n    settings *\n    config *\n    episodes\n        ep001\n        config *\n        sequences\n            seq001\n                settings *\n                shots\n                    shot001\n                        settings *\n```\n\n### Editing Context Values\n\nOnce your flow is salted with `ContextualView`, the user will be able to\nadd value using the *\"Add\"* action and to edit values by double clicking on them.\n\nIf you want, for debug or inquiry, you can inspect the edits done thru a `ContectualView` by using its \"Show Edits\" actions. It will bring you to\na page showing only values defined here. Double-clicking one of those items\nwill show you more information, especially **the history of modification** for this value (what changed, who did it, and when).\nYou will also be able to change the override value, as well as disable/enable it.\n\nYou can also programatically edit the context by defining `get_default_contextual_edits(context_name)` methods returning a dict of value to use if no override exists for them.\n\nIn other words: user edits made with `ContextualView` actions will override values returned by a local or upstream `get_default_contextual_edits()` method.\n\n### Using Context Values\n\nIn order to get a context dict, you just need to call `get_contextual_dict(leaf, context_name)`. The `leaf` is the point in the branch where you want the value to be evaluated. It will most of the time be `self`. \n\nHere is an example in an Action.run():\n```\nclass SubmitRender(flow.Action):\n\n    render_settings = flow.Child(ContextualView)\n\n    def run(self, button):\n        if button == 'Confirm':\n            context = get_contextual_dict(\n                self, 'render_settings'\n            )\n            my_dispatcher.submit(\n                scene=self.get_scene_path(),\n                fps=context.get('fps', 24),\n                pool=context.get('pool', 'ANY'),\n            )\n```\nNote that the second arg of the `get_contextual_dict()` call must match\nthe name of each `ContextualView` to evaluate in the upstream branch.\n\nAlso note that using a `ContextualView` as the Action Child has drawbacks in term of UX. We're waiting for a update of `kabaret` to fix this.\n\n### Default Value\n\nAt the base of your context, you will probably want to have a set of default values.\n\nYou will do this by adding a 'get_default_contextual_edits()` method returning the default value.\n\nLet's say your `Project` is the first level for you settings. You would\ndo something like:\n```\nclass Project(flow.Object):\n\n    settings = flow.Child(ContextualView)\n    episodes = flow.Child(Episodes)\n\n    def get_default_contextual_edits(self, context_name):\n        if context_name == 'settings':\n            return dict(\n                fps=30,\n                pool=\"ANY\"\n            )\n```\n\n## Special Case\n\nSometimes, you will want to put the visualisation/edition of the contextual values aside from the branch it affect.\n\nAn example would be the settings of a project. They affect the **WHOLE UNIVERSE** so maybe you wouldn't want them to show on the first page all users land to...\n\nA classic aproach is to use an `admin` group and shove all geeky stuff in it:\n```\nProject\n    word_of_the_day\n    episodes\n        ...\n    admin\n        settings\n        config\n        preferences\n```\n\nIn this case, the `settings` object is not inside the `episodes` branch so it does not affect it. This is a fail at being usefull :/\n\nTo fix this, you can define inside `Project` a `get_contextual_view` method that returns a `ContextView` to consider as if it was its Child:\n```\nclass Project(flow.Object):\n    \n    word_of_the_day = flow.Chid(WOTD)\n    episodes = flow.Child(Episodes)\n    admin = flow.Child(ProjectAdmin)\n\n    def get_contextual_view(self, context_name):\n        if context_name == 'settings':\n            return self.admin.settings\n        elif context_name == 'config'\n            return self.admin.config\n\n    def get_default_contextual_edits(self, context_name):\n        if context_name == 'settings':\n            return dict(\n                fps=30,\n                pool=\"ANY\"\n            )\n```\n\n**Note** that the default value must still be provided by the `Project` class !", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/kabaretstudio/kabaret.flow_contextual_dict", "keywords": "vfx animation pipeline asset library", "license": "LGPLv3+", "maintainer": "", "maintainer_email": "", "name": "kabaret.flow-contextaul-dict", "package_url": "https://pypi.org/project/kabaret.flow-contextaul-dict/", "platform": "", "project_url": "https://pypi.org/project/kabaret.flow-contextaul-dict/", "project_urls": {"Homepage": "https://gitlab.com/kabaretstudio/kabaret.flow_contextual_dict"}, "release_url": "https://pypi.org/project/kabaret.flow-contextaul-dict/0.1.1/", "requires_dist": null, "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*", "summary": "kabaret.flow contextual dict", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>kabaret.flow_contextual_dict</h1>\n<p>This package provide the <code>ContextualView</code> class and the <code>get_contextual_dict</code> function.</p>\n<p>Together, they give your flow users the ability to use defined value\nanywhere in the branch underneeth and override those values where you\nsee fit in the branches.</p>\n<p>Everything is explained here, but if your of the kind that prefers to read and execute code, there is a demo flow in the package for that. Install the package an create a new project with the type <code>kabaret.flow_contextual_dict.demo_flow.DemoFlow</code>.</p>\n<h2>Concept</h2>\n<p>Here is a quick example with this classic structure where <code>settings</code> are <code>ContextualView</code> Objects:</p>\n<pre><code>Project\n    settings\n    episodes\n        ep001\n            settings\n            sequences\n                seq001\n                    settings\n                    shots\n                        shot001\n                            settings\n                            anim\n                                settings\n                                init_action\n                                bake_action\n                            lighting\n                                settings\n                                init_action\n                                render_action\n                            comp\n                                settings\n                                init_action\n                                render_action\n                        shot002\n                seq002\n                    ...\n        ep002\n            ...\n</code></pre>\n<p>Let's say in the <code>Project.settings</code> defines <code>fps=24</code> and a <code>pool=\"ANY\"</code>.\nEvery object in the episodes branch can call <code>get_contextual_dict()</code> to receive a dict like <code>{fps:24, pool:\"ANY\"}</code>.\nMost likely, action of every step/department of every shot will use this.</p>\n<p>Now let's say the sequence <code>seq002</code> is in a hurry and you want to dispatch all actions on your farm's \"SUPER_COMPUTERS\" pool. All you need is to \"override\" with <code>pool=\"SUPER_COMPUTERS\"</code> in <code>ep002.settings</code>.</p>\n<p>You can do this in each <code>settings</code> in the flow, and you can also \"add\" values in each of them (those \"overrides\" and \"adds\" are called \"edits\").</p>\n<p>In a nutshell, it's a cascading dict, or as some call it: a <strong>contextual dict</strong>.</p>\n<h2>Install</h2>\n<p><code>pip install kabaret.flow_contextual_dict</code></p>\n<p>Please use a virtual env, it is good for you and your karma ^^</p>\n<h2>Usage</h2>\n<h3>Defining Contexts</h3>\n<p>In order to add a contextual dict in your flow, you just need to add\na Child relation to a <code>ContextualView</code>:</p>\n<pre><code>class Shot(flow.Object):\n\n    settings = flow.Child(contextualView)\n    ...\n\n</code></pre>\n<p>The name of the relation is very important:</p>\n<ul>\n<li>Overrides stacking is based on this name so you need to use the same\nname along your branch in order for overrides to work as expected.</li>\n<li>It defines the \"context_name\" argument to use for <code>get_contextual_dict()</code> calls.</li>\n</ul>\n<p>So this will not work:</p>\n<pre><code>Project\n    settings\n    episodes\n        ep001\n            episode_settings\n</code></pre>\n<p>But this will:</p>\n<pre><code>Project \n    settings\n    episodes\n        ep001\n            settings\n</code></pre>\n<p>Note that you can use <code>Child().ui(label=\"Episode Settings\")</code> if you <em>really</em> want to display a different name in the GUI.</p>\n<p>This gives the ability to use several contexts in the same flow.\nIn this structure, all * marked item are <code>ContextualView</code>. There is two\ncontext defined: <code>settings</code> and <code>config</code>. The first one drives values by <code>sequences</code> and <code>shots</code>, the second one only affects <code>episodes</code>.</p>\n<pre><code>Project\n    settings *\n    config *\n    episodes\n        ep001\n        config *\n        sequences\n            seq001\n                settings *\n                shots\n                    shot001\n                        settings *\n</code></pre>\n<h3>Editing Context Values</h3>\n<p>Once your flow is salted with <code>ContextualView</code>, the user will be able to\nadd value using the <em>\"Add\"</em> action and to edit values by double clicking on them.</p>\n<p>If you want, for debug or inquiry, you can inspect the edits done thru a <code>ContectualView</code> by using its \"Show Edits\" actions. It will bring you to\na page showing only values defined here. Double-clicking one of those items\nwill show you more information, especially <strong>the history of modification</strong> for this value (what changed, who did it, and when).\nYou will also be able to change the override value, as well as disable/enable it.</p>\n<p>You can also programatically edit the context by defining <code>get_default_contextual_edits(context_name)</code> methods returning a dict of value to use if no override exists for them.</p>\n<p>In other words: user edits made with <code>ContextualView</code> actions will override values returned by a local or upstream <code>get_default_contextual_edits()</code> method.</p>\n<h3>Using Context Values</h3>\n<p>In order to get a context dict, you just need to call <code>get_contextual_dict(leaf, context_name)</code>. The <code>leaf</code> is the point in the branch where you want the value to be evaluated. It will most of the time be <code>self</code>.</p>\n<p>Here is an example in an Action.run():</p>\n<pre><code>class SubmitRender(flow.Action):\n\n    render_settings = flow.Child(ContextualView)\n\n    def run(self, button):\n        if button == 'Confirm':\n            context = get_contextual_dict(\n                self, 'render_settings'\n            )\n            my_dispatcher.submit(\n                scene=self.get_scene_path(),\n                fps=context.get('fps', 24),\n                pool=context.get('pool', 'ANY'),\n            )\n</code></pre>\n<p>Note that the second arg of the <code>get_contextual_dict()</code> call must match\nthe name of each <code>ContextualView</code> to evaluate in the upstream branch.</p>\n<p>Also note that using a <code>ContextualView</code> as the Action Child has drawbacks in term of UX. We're waiting for a update of <code>kabaret</code> to fix this.</p>\n<h3>Default Value</h3>\n<p>At the base of your context, you will probably want to have a set of default values.</p>\n<p>You will do this by adding a 'get_default_contextual_edits()` method returning the default value.</p>\n<p>Let's say your <code>Project</code> is the first level for you settings. You would\ndo something like:</p>\n<pre><code>class Project(flow.Object):\n\n    settings = flow.Child(ContextualView)\n    episodes = flow.Child(Episodes)\n\n    def get_default_contextual_edits(self, context_name):\n        if context_name == 'settings':\n            return dict(\n                fps=30,\n                pool=\"ANY\"\n            )\n</code></pre>\n<h2>Special Case</h2>\n<p>Sometimes, you will want to put the visualisation/edition of the contextual values aside from the branch it affect.</p>\n<p>An example would be the settings of a project. They affect the <strong>WHOLE UNIVERSE</strong> so maybe you wouldn't want them to show on the first page all users land to...</p>\n<p>A classic aproach is to use an <code>admin</code> group and shove all geeky stuff in it:</p>\n<pre><code>Project\n    word_of_the_day\n    episodes\n        ...\n    admin\n        settings\n        config\n        preferences\n</code></pre>\n<p>In this case, the <code>settings</code> object is not inside the <code>episodes</code> branch so it does not affect it. This is a fail at being usefull :/</p>\n<p>To fix this, you can define inside <code>Project</code> a <code>get_contextual_view</code> method that returns a <code>ContextView</code> to consider as if it was its Child:</p>\n<pre><code>class Project(flow.Object):\n    \n    word_of_the_day = flow.Chid(WOTD)\n    episodes = flow.Child(Episodes)\n    admin = flow.Child(ProjectAdmin)\n\n    def get_contextual_view(self, context_name):\n        if context_name == 'settings':\n            return self.admin.settings\n        elif context_name == 'config'\n            return self.admin.config\n\n    def get_default_contextual_edits(self, context_name):\n        if context_name == 'settings':\n            return dict(\n                fps=30,\n                pool=\"ANY\"\n            )\n</code></pre>\n<p><strong>Note</strong> that the default value must still be provided by the <code>Project</code> class !</p>\n\n          </div>"}, "last_serial": 6892451, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a1e509098eefbcc06059deb479d00fa9", "sha256": "ff11c74fc93b5d823a35f97ed937eaf36bb8345a7721ac56de6d477a277d83e5"}, "downloads": -1, "filename": "kabaret.flow_contextaul_dict-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a1e509098eefbcc06059deb479d00fa9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*", "size": 21184, "upload_time": "2020-03-25T23:55:40", "upload_time_iso_8601": "2020-03-25T23:55:40.560051Z", "url": "https://files.pythonhosted.org/packages/d8/01/cf936759311eb434b5fc4b2bdc1fcd4cb0ff81e12664226075963b90d5f4/kabaret.flow_contextaul_dict-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "7e9f3c3f4ab541636b933d99c0c316d7", "sha256": "116bb17a570ae2d584e3d0854e0b60ea1ab5efd63e58f5009d8058502fe549e1"}, "downloads": -1, "filename": "kabaret.flow_contextaul_dict-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7e9f3c3f4ab541636b933d99c0c316d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*", "size": 27709, "upload_time": "2020-03-26T22:43:14", "upload_time_iso_8601": "2020-03-26T22:43:14.999741Z", "url": "https://files.pythonhosted.org/packages/51/96/e93385d1a53481f6c984130186ac92f1c9662e9b5da5637c3212b680dcb3/kabaret.flow_contextaul_dict-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d7321db74cca406e92089712148bf2e8", "sha256": "210b6d0bfdfe5c97af65332d41f4eea4d4ac5155752e87083a1a0e7acd6a6d9f"}, "downloads": -1, "filename": "kabaret.flow_contextaul_dict-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d7321db74cca406e92089712148bf2e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*", "size": 27707, "upload_time": "2020-03-26T22:47:44", "upload_time_iso_8601": "2020-03-26T22:47:44.645750Z", "url": "https://files.pythonhosted.org/packages/08/8a/4948aa0e2a0d8dfe77909c83c12fcb25814bfcd2ac2f11f98780d5473f0a/kabaret.flow_contextaul_dict-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7321db74cca406e92089712148bf2e8", "sha256": "210b6d0bfdfe5c97af65332d41f4eea4d4ac5155752e87083a1a0e7acd6a6d9f"}, "downloads": -1, "filename": "kabaret.flow_contextaul_dict-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d7321db74cca406e92089712148bf2e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*", "size": 27707, "upload_time": "2020-03-26T22:47:44", "upload_time_iso_8601": "2020-03-26T22:47:44.645750Z", "url": "https://files.pythonhosted.org/packages/08/8a/4948aa0e2a0d8dfe77909c83c12fcb25814bfcd2ac2f11f98780d5473f0a/kabaret.flow_contextaul_dict-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:54 2020"}