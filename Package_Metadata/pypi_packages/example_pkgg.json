{"info": {"author": "Example Author", "author_email": "author@example.com", "bugtrack_url": null, "classifiers": [], "description": "Citing fastFM\n=============\n\nThe library fastFM is an academic project. The time and resources spent developing fastFM are therefore justified \nby the number of citations of the software. If you publish scientific articles using fastFM, please cite the following article (bibtex entry `citation.bib <http://jmlr.org/papers/v17/15-355.bib>`_).\n\n    Bayer, I. \"fastFM: A Library for Factorization Machines\" Journal of Machine Learning Research 17, pp. 1-5 (2016)\n\n\nfastFM: A Library for Factorization Machines\n============================================\n\n.. image:: https://travis-ci.org/ibayer/fastFM.svg?branch=master\n   :target: https://travis-ci.org/ibayer/fastFM\n   \n   \n.. image:: https://img.shields.io/badge/platform-OSX|Linux-lightgrey.svg\n  :target: https://travis-ci.org/ibayer/fastFM\n  \n.. image:: https://img.shields.io/pypi/l/Django.svg   \n   :target: https://travis-ci.org/ibayer/fastFM\n\nThis repository allows you to use Factorization Machines in **Python** (2.7 & 3.x) with the well known **scikit-learn API**.\nAll performance critical code as been written in C and wrapped with Cython. fastFM provides \nstochastic gradient descent (SGD) and coordinate descent (CD) optimization routines as well as Markov Chain Monte Carlo (MCMC) for Bayesian inference.\nThe solvers can be used for regression, classification and ranking problems. Detailed usage instructions can be found in the `online documentation  <http://ibayer.github.io/fastFM>`_ and on `arXiv <http://arxiv.org/abs/1505.00641>`_.\n\nSupported Operating Systems\n---------------------------\nfastFM has a continuous integration / testing servers (Travis) for **Linux (Ubuntu 14.04 LTS)**\nand **OS X Mavericks**. Other OS are not actively supported.\n\nUsage\n-----\n.. code-block:: python\n\n    from fastFM import als\n    fm = als.FMRegression(n_iter=1000, init_stdev=0.1, rank=2, l2_reg_w=0.1, l2_reg_V=0.5)\n    fm.fit(X_train, y_train)\n    y_pred = fm.predict(X_test)\n\n\nTutorials and other information are available `here <http://arxiv.org/abs/1505.00641>`_.\nThe C code is available as `subrepository <https://github.com/ibayer/fastFM-core>`_ and provides \na stand alone command line interface. If you have still **questions** after reading the documentation please open a issue at GitHub.\n\n+----------------+------------------+-----------------------------+\n| Task           | Solver           | Loss                        |\n+================+==================+=============================+\n| Regression     | als, mcmc, sgd   | Square Loss                 |\n+----------------+------------------+-----------------------------+\n| Classification | als, mcmc, sgd   | Probit(Map), Probit, Sigmoid|\n+----------------+------------------+-----------------------------+\n| Ranking        | sgd              | BPR                         |\n+----------------+------------------+-----------------------------+\n*Supported solvers and tasks*\n\nInstallation\n------------\n\n**binary install (64bit only)**\n\n``pip install fastFM``\n\n**source install**\n\n*Please make sure, that Python and OS bit version agree, e.g. 32bit Python on 64bit OS won't work.*\n\n.. code-block:: bash\n\n    # Install cblas and python-dev header (Linux only).\n    # - cblas can be installed with libatlas-base-dev or libopenblas-dev (Ubuntu)\n    $ sudo apt-get install python-dev libopenblas-dev\n\n    # Clone the repo including submodules (or clone + `git submodule update --init --recursive`)\n    $ git clone --recursive https://github.com/ibayer/fastFM.git\n\n    # Enter the root directory\n    $ cd fastFM\n\n    # Install Python dependencies (Cython>=0.22, numpy, pandas, scipy, scikit-learn)\n    $ pip install -r ./requirements.txt\n\n    # Compile the C extension.\n    $ make                      # build with default python version (python)\n    $ PYTHON=python3 make       # build with custom python version (python3)\n\n    # Install fastFM\n    $ pip install .\n\n\nTests\n-----\n\nThe Python tests (``pip install nose``) can be run with:\n``nosetests fastFM/fastFM/tests``\n\nPlease refer to the fastFM-core README for instruction on how to run the C tests at ``fastFM/fastFM-core/src/tests``.\n\nContribution\n------------\n\n* Star this repository: keeps contributors motivated\n* Open a issue: report bugs or suggest improvements\n* Fix errors in the documentation: small changes matter\n* Contribute code\n\n**Contributions are very welcome!** Since this project lives on GitHub we reommend \nto open a pull request (PR) for code contributions as early as possible. This is the \nfastest way to get feedback and allows `Travis CI <https://travis-ci.org/ibayer/fastFM>`_ to run checks on your changes.\n\nMost information you need to setup your **development environment** can be learned by adapting the great instructions on https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md . Please ensure that your contribution conforms to the `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ Coding Style and includes unit tests where appropriate. More valuable guidelines that apply to fastFM can be found at http://scikit-learn.org/stable/developers/contributing.html#coding-guidelines .\n\n\n**Contributors**\n\n* `aaossa <https://github.com/aaossa/>`_\n* `altimin <https://github.com/altimin>`_\n* `bdaskalov <https://github.com/bdaskalov>`_\n* `chezou <https://github.com/chezou>`_\n* `macks22 <https://github.com/macks22>`_\n* `takuti <https://github.com/takuti>`_\n* `ibayer <https://github.com/ibayer>`_\n\nLicense: BSD\n------------\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pypa/sampleproject", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "example_pkgg", "package_url": "https://pypi.org/project/example_pkgg/", "platform": "", "project_url": "https://pypi.org/project/example_pkgg/", "project_urls": {"Homepage": "https://github.com/pypa/sampleproject"}, "release_url": "https://pypi.org/project/example_pkgg/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A small example package", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Citing fastFM<br>=============<br><br>The library fastFM is an academic project. The time and resources spent developing fastFM are therefore justified <br>by the number of citations of the software. If you publish scientific articles using fastFM, please cite the following article (bibtex entry `citation.bib &lt;http://jmlr.org/papers/v17/15-355.bib&gt;`_).<br><br>    Bayer, I. \"fastFM: A Library for Factorization Machines\" Journal of Machine Learning Research 17, pp. 1-5 (2016)<br><br><br>fastFM: A Library for Factorization Machines<br>============================================<br><br>.. image:: https://travis-ci.org/ibayer/fastFM.svg?branch=master<br>   :target: https://travis-ci.org/ibayer/fastFM<br>   <br>   <br>.. image:: https://img.shields.io/badge/platform-OSX|Linux-lightgrey.svg<br>  :target: https://travis-ci.org/ibayer/fastFM<br>  <br>.. image:: https://img.shields.io/pypi/l/Django.svg   <br>   :target: https://travis-ci.org/ibayer/fastFM<br><br>This repository allows you to use Factorization Machines in **Python** (2.7 &amp; 3.x) with the well known **scikit-learn API**.<br>All performance critical code as been written in C and wrapped with Cython. fastFM provides <br>stochastic gradient descent (SGD) and coordinate descent (CD) optimization routines as well as Markov Chain Monte Carlo (MCMC) for Bayesian inference.<br>The solvers can be used for regression, classification and ranking problems. Detailed usage instructions can be found in the `online documentation  &lt;http://ibayer.github.io/fastFM&gt;`_ and on `arXiv &lt;http://arxiv.org/abs/1505.00641&gt;`_.<br><br>Supported Operating Systems<br>---------------------------<br>fastFM has a continuous integration / testing servers (Travis) for **Linux (Ubuntu 14.04 LTS)**<br>and **OS X Mavericks**. Other OS are not actively supported.<br><br>Usage<br>-----<br>.. code-block:: python<br><br>    from fastFM import als<br>    fm = als.FMRegression(n_iter=1000, init_stdev=0.1, rank=2, l2_reg_w=0.1, l2_reg_V=0.5)<br>    fm.fit(X_train, y_train)<br>    y_pred = fm.predict(X_test)<br><br><br>Tutorials and other information are available `here &lt;http://arxiv.org/abs/1505.00641&gt;`_.<br>The C code is available as `subrepository &lt;https://github.com/ibayer/fastFM-core&gt;`_ and provides <br>a stand alone command line interface. If you have still **questions** after reading the documentation please open a issue at GitHub.<br><br>+----------------+------------------+-----------------------------+<br>| Task           | Solver           | Loss                        |<br>+================+==================+=============================+<br>| Regression     | als, mcmc, sgd   | Square Loss                 |<br>+----------------+------------------+-----------------------------+<br>| Classification | als, mcmc, sgd   | Probit(Map), Probit, Sigmoid|<br>+----------------+------------------+-----------------------------+<br>| Ranking        | sgd              | BPR                         |<br>+----------------+------------------+-----------------------------+<br>*Supported solvers and tasks*<br><br>Installation<br>------------<br><br>**binary install (64bit only)**<br><br>``pip install fastFM``<br><br>**source install**<br><br>*Please make sure, that Python and OS bit version agree, e.g. 32bit Python on 64bit OS won't work.*<br><br>.. code-block:: bash<br><br>    # Install cblas and python-dev header (Linux only).<br>    # - cblas can be installed with libatlas-base-dev or libopenblas-dev (Ubuntu)<br>    $ sudo apt-get install python-dev libopenblas-dev<br><br>    # Clone the repo including submodules (or clone + `git submodule update --init --recursive`)<br>    $ git clone --recursive https://github.com/ibayer/fastFM.git<br><br>    # Enter the root directory<br>    $ cd fastFM<br><br>    # Install Python dependencies (Cython&gt;=0.22, numpy, pandas, scipy, scikit-learn)<br>    $ pip install -r ./requirements.txt<br><br>    # Compile the C extension.<br>    $ make                      # build with default python version (python)<br>    $ PYTHON=python3 make       # build with custom python version (python3)<br><br>    # Install fastFM<br>    $ pip install .<br><br><br>Tests<br>-----<br><br>The Python tests (``pip install nose``) can be run with:<br>``nosetests fastFM/fastFM/tests``<br><br>Please refer to the fastFM-core README for instruction on how to run the C tests at ``fastFM/fastFM-core/src/tests``.<br><br>Contribution<br>------------<br><br>* Star this repository: keeps contributors motivated<br>* Open a issue: report bugs or suggest improvements<br>* Fix errors in the documentation: small changes matter<br>* Contribute code<br><br>**Contributions are very welcome!** Since this project lives on GitHub we reommend <br>to open a pull request (PR) for code contributions as early as possible. This is the <br>fastest way to get feedback and allows `Travis CI &lt;https://travis-ci.org/ibayer/fastFM&gt;`_ to run checks on your changes.<br><br>Most information you need to setup your **development environment** can be learned by adapting the great instructions on https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md . Please ensure that your contribution conforms to the `PEP8 &lt;http://www.python.org/dev/peps/pep-0008/&gt;`_ Coding Style and includes unit tests where appropriate. More valuable guidelines that apply to fastFM can be found at http://scikit-learn.org/stable/developers/contributing.html#coding-guidelines .<br><br><br>**Contributors**<br><br>* `aaossa &lt;https://github.com/aaossa/&gt;`_<br>* `altimin &lt;https://github.com/altimin&gt;`_<br>* `bdaskalov &lt;https://github.com/bdaskalov&gt;`_<br>* `chezou &lt;https://github.com/chezou&gt;`_<br>* `macks22 &lt;https://github.com/macks22&gt;`_<br>* `takuti &lt;https://github.com/takuti&gt;`_<br>* `ibayer &lt;https://github.com/ibayer&gt;`_<br><br>License: BSD<br>------------<br>\n          </div>"}, "last_serial": 4085551, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "52c7da24ea65618dff4da1f790cfee6e", "sha256": "d508f4b031ee00a727593d90f1188850905d1c945ff3a6effd06d7aafd6230b5"}, "downloads": -1, "filename": "example_pkgg-0.0.1.tar.gz", "has_sig": false, "md5_digest": "52c7da24ea65618dff4da1f790cfee6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3727, "upload_time": "2018-07-20T11:52:36", "upload_time_iso_8601": "2018-07-20T11:52:36.702278Z", "url": "https://files.pythonhosted.org/packages/78/14/5dde9d9ffbf579301c5dbe0e29c062f06a1fd6157ca762b641c5b16c771f/example_pkgg-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "52c7da24ea65618dff4da1f790cfee6e", "sha256": "d508f4b031ee00a727593d90f1188850905d1c945ff3a6effd06d7aafd6230b5"}, "downloads": -1, "filename": "example_pkgg-0.0.1.tar.gz", "has_sig": false, "md5_digest": "52c7da24ea65618dff4da1f790cfee6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3727, "upload_time": "2018-07-20T11:52:36", "upload_time_iso_8601": "2018-07-20T11:52:36.702278Z", "url": "https://files.pythonhosted.org/packages/78/14/5dde9d9ffbf579301c5dbe0e29c062f06a1fd6157ca762b641c5b16c771f/example_pkgg-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:00 2020"}