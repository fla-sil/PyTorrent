{"info": {"author": "Hong-She Liang", "author_email": "starofrainnight@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "licenraptor\n===========\n\n.. image:: https://img.shields.io/pypi/v/licenraptor.svg\n    :target: https://pypi.python.org/pypi/licenraptor\n\n.. image:: https://travis-ci.org/starofrainnight/licenraptor.svg?branch=master\n    :target: https://travis-ci.org/starofrainnight/licenraptor\n\n.. image:: https://ci.appveyor.com/api/projects/status/github/starofrainnight/licenraptor?svg=true\n    :target: https://ci.appveyor.com/project/starofrainnight/licenraptor\n\nlicense is a Python library providing some metadata about common free software licenses, such as\nGNU GPL, MIT and others. It is compatible with Python 3.4+.\n\nBasic usage\n-----------\n\nTo get a license, you can use `SPDX license identifier <http://spdx.org/licenses/>`_:\n\n.. code-block:: python\n\n    import licenraptor\n    mit = licenraptor.find('MIT')\n\nEach license is a static class providing a few properties:\n\n* ``id`` - the SPDX identifier\n* ``name`` - a human readable name of the license\n* ``rpm`` - `license identifier used in Fedora, RHEL and CentOS RPMs <https://fedoraproject.org/wiki/Licensing:Main#Good_Licenses>`_\n* ``python`` - `PyPI classifier <https://pypi.python.org/pypi?%3Aaction=list_classifiers>`_\n* ``url`` - link to a license description or website\n\n.. code-block:: python\n\n    mit.python\n    'License :: OSI Approved :: MIT License'\n\nLicense classes also offer a static method ``render()`` that will output the entire license text.\nSome variables have to be passed to it, usually ``name``, ``email`` and optional ``year``\n(current year is used when omitted).\n\n.. code-block:: python\n\n    mit.render(name='Petr Foo', email='petr@foo.org')\n    '''The MIT License (MIT)\n\n    Copyright (c) 2015 Petr Foo <petr@foo.org>\n\n    Permission is hereby granted... (snip)'''\n\nSome licenses (such as the ones from GPL family) also have a header text, that's supposed to be\nadded to each source file. ``header()`` is used to render that, but be careful, if the license does\nnot use special header, ``AttributeError`` is risen.\n\n.. code-block:: python\n\n    mit.header(name='Petr Foo', email='petr@foo.org')\n    AttributeError: The MIT license uses no header\n\nIf you want to search the licenses by some other key, you can:\n\n.. code-block:: python\n\n    bsd = licenraptor.find_by_key('rpm', 'BSD')\n    bsd\n    [licenraptor.licenses.BSD3ClauseLicense, licenraptor.licenses.BSD2ClauseLicense]\n\n``bsd`` is now a list, because unlike SPDX identifiers, other keys might not always be unique. If\nyou only need the first license with such identifier, you can pass ``multiple=False`` to\n``find_by_key()``:\n\n.. code-block:: python\n\n    bsd = licenraptor.find_by_key('rpm', 'BSD', multiple=False)\n    bsd\n    licenraptor.licenses.BSD3ClauseLicense\n\nIf such license is not found, you'll get ``KeyError`` instead, the same as with regular ``find()``.\n\nIn case you would like to perform a lot of searches by some key, you can build and index, which\nshould (in theory) make the searches faster (no measurements have been performed).\n\n.. code-block:: python\n\n    licenraptor.build_index('rpm')\n\nIn case you want to get rid of an index, use ``licenraptor.delete_index(key)``. It is safe to call it\neven if the index does not exist.\n\nIt is also possible to use ``find_by_function()`` to find licenses that match a certain expression.\nThe function should accept one argument (the license class) and return True if the license is\nsupposed to be in the results:\n\n.. code-block:: python\n\n    osi = licenraptor.find_by_function(lambda l: l.python.startswith('License :: OSI Approved :: '))\n\nAgain, it returns a list and has ``multiple`` argument to change that.\n\nIn case a simple function is not enough, you can iterate over all the license with\n``licenraptor.iter()``:\n\n.. code-block:: python\n\n    for cls in licenraptor.iter():\n        # do something\n\nAdding licenses\n---------------\n\nThe current license list is in no way much extensive, so maybe your favorite license is not in\nthere. If you wish to change that, add the license to ``license/licenses.py`` and a template(s) to\n``license/templates``, and send a `pull request on GitHub\n<https://github.com/hroncok/license/pulls>`_. See the current licenses to learn how to do it.\nA license class looks like this:\n\n.. code-block:: python\n\n    class AGPLv3LaterLicense(licenraptor.base.License):\n        '''\n        GNU Affero General Public License v3.0 or later\n        '''\n        id = 'AGPL-3.0+'\n        rpm = 'AGPLv3+'\n        python = 'License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)'\n        url = 'http://www.gnu.org/licenses/agpl-3.0.html'\n\nOne license can inherit from other and omit the keys that are equal. Note that the docstring is\nimportant and it is used as ``name`` property. License template is named as ``id``, header template\nis named with ``__header`` suffix.\n\nIf you wish to add custom licenses in your code, you can do that as well. If you won't use\n``render()`` or ``header()``, the thing is simple. Just define such class anywhere and call\n``licenraptor.register()`` on it.\n\nHowever, if you would then call ``render()`` or ``header()``, the template would hove not been\nfound. In that case, you have to create a *Custom Base License* with a ``jinja2`` template loader.\n\n.. code-block:: python\n\n    CustomBaseLicense = licenraptor.base.custom_license_base_class(loader=jinja2.FileSystemLoader('path/to/templates'))\n\n    class CustomLicense(CustomBaseLicense):\n        ...\n\n    licenraptor.register(CustomLicense)\n\nThe ``loader`` can be any valid `jinja2 loader <http://jinja.pocoo.org/docs/dev/api/#loaders>`_.\nIf you wish to register multiple classes at once, you can use ``licenraptor.autoregister()`` that will\nregister all classes present in given module. You will not want to register your\n``CustomBaseLicense``, so you'll pass it in the ``ignore`` argument.\n\n.. code-block:: python\n\n    licenraptor.autoregister(sys.modules[__name__], ignore=[CustomBaseLicense])\n\nNote that if you add custom licenses and use ``licenraptor.build_index()``, you want to build the index\nafter registering them. Calling ``build_index()`` multiple times is safe.\n\n(Possibly) Frequently Asked Questions\n-------------------------------------\n\nWhy are licenses represented as subclasses and not instances of ``License``?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis way, it is easier to inherit data between multiple licenses. The definition of classes is\neasier maintainable and readable.\n\nWhere the library name `licenraptor` came from?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOh, Miro Hron\u010dok suggest this name in his project `license <https://github.com/hroncok/license>`_\nwhich this project fork from :)\n\nAren't there already Python tools that can render license texts?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYes, they are. However all of them are command line utilities and provide no API for Python\nprogrammers.\n\n* `choosealicense-cli <https://pypi.python.org/pypi/choosealicense-cli>`_\n* `licenser <https://pypi.python.org/pypi/licenser>`_\n* `licen <https://pypi.python.org/pypi/licen>`_\n* `garnish <https://pypi.python.org/pypi/garnish>`_\n\n\n\n\n=======\nHistory\n=======\n\n0.2.0 (2018-06-29)\n------------------\n\n* Changed package name to 'licenraptor'", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/starofrainnight/licenraptor", "keywords": "licenraptor,licenraptor", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "licenraptor", "package_url": "https://pypi.org/project/licenraptor/", "platform": "", "project_url": "https://pypi.org/project/licenraptor/", "project_urls": {"Homepage": "https://github.com/starofrainnight/licenraptor"}, "release_url": "https://pypi.org/project/licenraptor/0.2.2/", "requires_dist": null, "requires_python": "", "summary": "Library that encapsulates free software licenses", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/licenraptor\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/licenraptor.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b6c59dc8665d7b61f2925d5d1d0ae95c4808dc0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c6963656e726170746f722e737667\"></a>\n<a href=\"https://travis-ci.org/starofrainnight/licenraptor\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/starofrainnight/licenraptor.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3a8fc2d69de8a1d2c0aa4c2443a168841fb9354/68747470733a2f2f7472617669732d63692e6f72672f737461726f667261696e6e696768742f6c6963656e726170746f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/starofrainnight/licenraptor\" rel=\"nofollow\"><img alt=\"https://ci.appveyor.com/api/projects/status/github/starofrainnight/licenraptor?svg=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1bc94fa524b33857f49a182952b5afaa613feba0/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f737461726f667261696e6e696768742f6c6963656e726170746f723f7376673d74727565\"></a>\n<p>license is a Python library providing some metadata about common free software licenses, such as\nGNU GPL, MIT and others. It is compatible with Python 3.4+.</p>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<p>To get a license, you can use <a href=\"http://spdx.org/licenses/\" rel=\"nofollow\">SPDX license identifier</a>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">licenraptor</span>\n<span class=\"n\">mit</span> <span class=\"o\">=</span> <span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'MIT'</span><span class=\"p\">)</span>\n</pre>\n<p>Each license is a static class providing a few properties:</p>\n<ul>\n<li><tt>id</tt> - the SPDX identifier</li>\n<li><tt>name</tt> - a human readable name of the license</li>\n<li><tt>rpm</tt> - <a href=\"https://fedoraproject.org/wiki/Licensing:Main#Good_Licenses\" rel=\"nofollow\">license identifier used in Fedora, RHEL and CentOS RPMs</a></li>\n<li><tt>python</tt> - <a href=\"https://pypi.python.org/pypi?%3Aaction=list_classifiers\" rel=\"nofollow\">PyPI classifier</a></li>\n<li><tt>url</tt> - link to a license description or website</li>\n</ul>\n<pre><span class=\"n\">mit</span><span class=\"o\">.</span><span class=\"n\">python</span>\n<span class=\"s1\">'License :: OSI Approved :: MIT License'</span>\n</pre>\n<p>License classes also offer a static method <tt>render()</tt> that will output the entire license text.\nSome variables have to be passed to it, usually <tt>name</tt>, <tt>email</tt> and optional <tt>year</tt>\n(current year is used when omitted).</p>\n<pre><span class=\"n\">mit</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Petr Foo'</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'petr@foo.org'</span><span class=\"p\">)</span>\n<span class=\"sd\">'''The MIT License (MIT)\n\nCopyright (c) 2015 Petr Foo &lt;petr@foo.org&gt;\n\nPermission is hereby granted... (snip)'''</span>\n</pre>\n<p>Some licenses (such as the ones from GPL family) also have a header text, that\u2019s supposed to be\nadded to each source file. <tt>header()</tt> is used to render that, but be careful, if the license does\nnot use special header, <tt>AttributeError</tt> is risen.</p>\n<pre><span class=\"n\">mit</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Petr Foo'</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'petr@foo.org'</span><span class=\"p\">)</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">MIT</span> <span class=\"n\">license</span> <span class=\"n\">uses</span> <span class=\"n\">no</span> <span class=\"n\">header</span>\n</pre>\n<p>If you want to search the licenses by some other key, you can:</p>\n<pre><span class=\"n\">bsd</span> <span class=\"o\">=</span> <span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">find_by_key</span><span class=\"p\">(</span><span class=\"s1\">'rpm'</span><span class=\"p\">,</span> <span class=\"s1\">'BSD'</span><span class=\"p\">)</span>\n<span class=\"n\">bsd</span>\n<span class=\"p\">[</span><span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">licenses</span><span class=\"o\">.</span><span class=\"n\">BSD3ClauseLicense</span><span class=\"p\">,</span> <span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">licenses</span><span class=\"o\">.</span><span class=\"n\">BSD2ClauseLicense</span><span class=\"p\">]</span>\n</pre>\n<p><tt>bsd</tt> is now a list, because unlike SPDX identifiers, other keys might not always be unique. If\nyou only need the first license with such identifier, you can pass <tt>multiple=False</tt> to\n<tt>find_by_key()</tt>:</p>\n<pre><span class=\"n\">bsd</span> <span class=\"o\">=</span> <span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">find_by_key</span><span class=\"p\">(</span><span class=\"s1\">'rpm'</span><span class=\"p\">,</span> <span class=\"s1\">'BSD'</span><span class=\"p\">,</span> <span class=\"n\">multiple</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">bsd</span>\n<span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">licenses</span><span class=\"o\">.</span><span class=\"n\">BSD3ClauseLicense</span>\n</pre>\n<p>If such license is not found, you\u2019ll get <tt>KeyError</tt> instead, the same as with regular <tt>find()</tt>.</p>\n<p>In case you would like to perform a lot of searches by some key, you can build and index, which\nshould (in theory) make the searches faster (no measurements have been performed).</p>\n<pre><span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">build_index</span><span class=\"p\">(</span><span class=\"s1\">'rpm'</span><span class=\"p\">)</span>\n</pre>\n<p>In case you want to get rid of an index, use <tt>licenraptor.delete_index(key)</tt>. It is safe to call it\neven if the index does not exist.</p>\n<p>It is also possible to use <tt>find_by_function()</tt> to find licenses that match a certain expression.\nThe function should accept one argument (the license class) and return True if the license is\nsupposed to be in the results:</p>\n<pre><span class=\"n\">osi</span> <span class=\"o\">=</span> <span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">find_by_function</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">python</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'License :: OSI Approved :: '</span><span class=\"p\">))</span>\n</pre>\n<p>Again, it returns a list and has <tt>multiple</tt> argument to change that.</p>\n<p>In case a simple function is not enough, you can iterate over all the license with\n<tt>licenraptor.iter()</tt>:</p>\n<pre><span class=\"k\">for</span> <span class=\"bp\">cls</span> <span class=\"ow\">in</span> <span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">iter</span><span class=\"p\">():</span>\n    <span class=\"c1\"># do something</span>\n</pre>\n</div>\n<div id=\"adding-licenses\">\n<h2>Adding licenses</h2>\n<p>The current license list is in no way much extensive, so maybe your favorite license is not in\nthere. If you wish to change that, add the license to <tt>license/licenses.py</tt> and a template(s) to\n<tt>license/templates</tt>, and send a <a href=\"https://github.com/hroncok/license/pulls\" rel=\"nofollow\">pull request on GitHub</a>. See the current licenses to learn how to do it.\nA license class looks like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AGPLv3LaterLicense</span><span class=\"p\">(</span><span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">License</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''\n    GNU Affero General Public License v3.0 or later\n    '''</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"s1\">'AGPL-3.0+'</span>\n    <span class=\"n\">rpm</span> <span class=\"o\">=</span> <span class=\"s1\">'AGPLv3+'</span>\n    <span class=\"n\">python</span> <span class=\"o\">=</span> <span class=\"s1\">'License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)'</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://www.gnu.org/licenses/agpl-3.0.html'</span>\n</pre>\n<p>One license can inherit from other and omit the keys that are equal. Note that the docstring is\nimportant and it is used as <tt>name</tt> property. License template is named as <tt>id</tt>, header template\nis named with <tt>__header</tt> suffix.</p>\n<p>If you wish to add custom licenses in your code, you can do that as well. If you won\u2019t use\n<tt>render()</tt> or <tt>header()</tt>, the thing is simple. Just define such class anywhere and call\n<tt>licenraptor.register()</tt> on it.</p>\n<p>However, if you would then call <tt>render()</tt> or <tt>header()</tt>, the template would hove not been\nfound. In that case, you have to create a <em>Custom Base License</em> with a <tt>jinja2</tt> template loader.</p>\n<pre><span class=\"n\">CustomBaseLicense</span> <span class=\"o\">=</span> <span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">custom_license_base_class</span><span class=\"p\">(</span><span class=\"n\">loader</span><span class=\"o\">=</span><span class=\"n\">jinja2</span><span class=\"o\">.</span><span class=\"n\">FileSystemLoader</span><span class=\"p\">(</span><span class=\"s1\">'path/to/templates'</span><span class=\"p\">))</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomLicense</span><span class=\"p\">(</span><span class=\"n\">CustomBaseLicense</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">CustomLicense</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>loader</tt> can be any valid <a href=\"http://jinja.pocoo.org/docs/dev/api/#loaders\" rel=\"nofollow\">jinja2 loader</a>.\nIf you wish to register multiple classes at once, you can use <tt>licenraptor.autoregister()</tt> that will\nregister all classes present in given module. You will not want to register your\n<tt>CustomBaseLicense</tt>, so you\u2019ll pass it in the <tt>ignore</tt> argument.</p>\n<pre><span class=\"n\">licenraptor</span><span class=\"o\">.</span><span class=\"n\">autoregister</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"vm\">__name__</span><span class=\"p\">],</span> <span class=\"n\">ignore</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">CustomBaseLicense</span><span class=\"p\">])</span>\n</pre>\n<p>Note that if you add custom licenses and use <tt>licenraptor.build_index()</tt>, you want to build the index\nafter registering them. Calling <tt>build_index()</tt> multiple times is safe.</p>\n</div>\n<div id=\"possibly-frequently-asked-questions\">\n<h2>(Possibly) Frequently Asked Questions</h2>\n<div id=\"why-are-licenses-represented-as-subclasses-and-not-instances-of-license\">\n<h3>Why are licenses represented as subclasses and not instances of <tt>License</tt>?</h3>\n<p>This way, it is easier to inherit data between multiple licenses. The definition of classes is\neasier maintainable and readable.</p>\n</div>\n<div id=\"where-the-library-name-licenraptor-came-from\">\n<h3>Where the library name <cite>licenraptor</cite> came from?</h3>\n<p>Oh, Miro Hron\u010dok suggest this name in his project <a href=\"https://github.com/hroncok/license\" rel=\"nofollow\">license</a>\nwhich this project fork from :)</p>\n</div>\n<div id=\"aren-t-there-already-python-tools-that-can-render-license-texts\">\n<h3>Aren\u2019t there already Python tools that can render license texts?</h3>\n<p>Yes, they are. However all of them are command line utilities and provide no API for Python\nprogrammers.</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/choosealicense-cli\" rel=\"nofollow\">choosealicense-cli</a></li>\n<li><a href=\"https://pypi.python.org/pypi/licenser\" rel=\"nofollow\">licenser</a></li>\n<li><a href=\"https://pypi.python.org/pypi/licen\" rel=\"nofollow\">licen</a></li>\n<li><a href=\"https://pypi.python.org/pypi/garnish\" rel=\"nofollow\">garnish</a></li>\n</ul>\n<div id=\"history\">\n<h4>History</h4>\n</div>\n</div>\n</div>\n<div id=\"id1\">\n<h2>0.2.0 (2018-06-29)</h2>\n<ul>\n<li>Changed package name to \u2018licenraptor\u2019</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7004716, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "e0fd31b76119aa0060354488c418fc73", "sha256": "7ff7221b0de3c64a06d059c32d9fe2fce30fcdc4942331f984f8ee55edab8bde"}, "downloads": -1, "filename": "licenraptor-0.2.1.zip", "has_sig": false, "md5_digest": "e0fd31b76119aa0060354488c418fc73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26584, "upload_time": "2018-06-30T08:39:08", "upload_time_iso_8601": "2018-06-30T08:39:08.810567Z", "url": "https://files.pythonhosted.org/packages/1b/08/58a9c33f81764d7d9b1f2f019bb91584a3ca1119c8aef3c6a91772be3196/licenraptor-0.2.1.zip", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d488e568f35cb7b62397d9309f833c60", "sha256": "c9360bda940b6a1b2fa11490399f42965dd92e8c4160b093a1994f513f88d102"}, "downloads": -1, "filename": "licenraptor-0.2.2.zip", "has_sig": false, "md5_digest": "d488e568f35cb7b62397d9309f833c60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129562, "upload_time": "2020-04-12T14:18:38", "upload_time_iso_8601": "2020-04-12T14:18:38.968314Z", "url": "https://files.pythonhosted.org/packages/03/27/1760e970d345a88c93a5de2eed943f073fb7ca4df88f08a8956f4c3cf687/licenraptor-0.2.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d488e568f35cb7b62397d9309f833c60", "sha256": "c9360bda940b6a1b2fa11490399f42965dd92e8c4160b093a1994f513f88d102"}, "downloads": -1, "filename": "licenraptor-0.2.2.zip", "has_sig": false, "md5_digest": "d488e568f35cb7b62397d9309f833c60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129562, "upload_time": "2020-04-12T14:18:38", "upload_time_iso_8601": "2020-04-12T14:18:38.968314Z", "url": "https://files.pythonhosted.org/packages/03/27/1760e970d345a88c93a5de2eed943f073fb7ca4df88f08a8956f4c3cf687/licenraptor-0.2.2.zip", "yanked": false}], "timestamp": "Fri May  8 00:46:11 2020"}