{"info": {"author": "Johan Herland", "author_email": "johan@herland.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: AsyncIO", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# asyncjobs\n\n[![Tests](https://github.com/jherland/asyncjobs/workflows/tests/badge.svg)](\nhttps://github.com/jherland/asyncjobs/actions)\n[![Build Status](https://travis-ci.org/jherland/asyncjobs.svg?branch=master)](\nhttps://travis-ci.org/jherland/asyncjobs)\n[![PyPI version](https://badge.fury.io/py/asyncjobs.svg)](\nhttps://badge.fury.io/py/asyncjobs)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/asyncjobs)](\nhttps://pypi.org/project/asyncjobs/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](\nhttps://opensource.org/licenses/MIT)\n\nAsynchronous job scheduler.\nUsing asyncio to run jobs in worker threads/processes.\n\n## Description\n\nA job scheduler for running asynchronous (and synchronous) jobs with\ndependencies using asyncio. Jobs are identified by their _name_ and implement\nan async `__call__` method. Jobs may await other jobs or schedule work to be\ndone in a thread or subprocess. Jobs are run by a Scheduler, which control the\nexecution of the jobs, as well as the number of concurrent threads and\nprocesses doing work. The Scheduler emits events which allow e.g. progress and\nstatistics to be easily collected and monitored. A separate module is provided\nto turn Scheduler events into an interactive scheduling plot:\n\n![Example schedule plot](\nhttps://github.com/jherland/asyncjobs/raw/master/examples/random_jobs_plot.png)\n\nJobs complete successfully by returning (with or without a return value). Any\nexception propagated from a job's `__call__` method is regarded as a failure.\nAny job that depend on (i.e. await the result of) another job will be\nautomatically cancelled by the scheduler if that other job fails.\nThe Scheduler handles cancellation (e.g. _Ctrl-C_) by cancelling all ongoing\nand remaining tasks as quickly and cleanly as possible.\n\n## Usage examples\n\n### Run three simple jobs in sequence\n\n```python\nimport asyncio\nfrom asyncjobs import Job, Scheduler\n\n# Helper function\ndef sleep():\n    import time\n    print(f'{time.ctime()}: Sleep for a second')\n    time.sleep(1)\n    print(f'{time.ctime()}: Finished sleep')\n\n# Job #1 prints uptime\njob1 = Job('#1')\njob1.subprocess_argv = ['uptime']\n\n# Job #2 waits for #1 and then sleeps in a thread\njob2 = Job('#2', deps={'#1'})\njob2.thread_func = sleep\n\n# Job #3 waits for #2 and then prints uptime (again)\njob3 = Job('#3', deps={'#2'})\njob3.subprocess_argv = ['uptime']\n\n# Run all jobs in the scheduler\ns = Scheduler()\nfor job in [job1, job2, job3]:\n    s.add(job)\nasyncio.run(s.run())\n```\n\n([code also available here](\nhttps://github.com/jherland/asyncjobs/blob/master/examples/simple_usage.py))\nshould produce output like this:\n\n```\n 16:35:58  up 9 days  3:29,  1 user,  load average: 0.62, 0.55, 0.55\nTue Feb 25 16:35:58 2020: Sleep for a second\nTue Feb 25 16:35:59 2020: Finished sleep\n 16:35:59  up 9 days  3:29,  1 user,  load average: 0.62, 0.55, 0.55\n```\n\n### Fetching web content in parallel\n\n[This example](\nhttps://github.com/jherland/asyncjobs/blob/master/examples/random_wikipedia.py)\nfetches a random Wikipedia article, and then follows links to other articles\nuntil 10 articles have been fetched. Sample output:\n\n```\n    fetching https://en.wikipedia.org/wiki/Special:Random...\n  * [Indonesia\u2013Mongolia relations] links to 7 articles\n      fetching https://en.wikipedia.org/wiki/Indonesia...\n      fetching https://en.wikipedia.org/wiki/Mongolia...\n      fetching https://en.wikipedia.org/wiki/Jakarta...\n      fetching https://en.wikipedia.org/wiki/Mongolian_National_University,_Ulan_Bator...\n    * [Mongolia] links to 529 articles\n      fetching https://en.wikipedia.org/wiki/Sukarno...\n    * [Indonesia] links to 697 articles\n      fetching https://en.wikipedia.org/wiki/Megawati_Soekarnoputri...\n    * [Jakarta] links to 757 articles\n      fetching https://en.wikipedia.org/wiki/Susilo_Bambang_Yudhoyono...\n    * [Mongolian National University] links to 2 articles\n        fetching https://en.wikipedia.org/wiki/Mongolian_language...\n    * [Sukarno] links to 523 articles\n        fetching https://en.wikipedia.org/wiki/Mongolian_script...\n    * [Susilo Bambang Yudhoyono] links to 159 articles\n    * [Megawati Sukarnoputri] links to 88 articles\n      * [Mongolian language] links to 259 articles\n      * [Mongolian script] links to 142 articles\n\n```\n\n### Wasting time efficiently across multiple threads\n\n[The final example](\nhttps://github.com/jherland/asyncjobs/blob/master/examples/random_jobs.py)\n(which was used to produce the schedule plot above) simulates a simple build\nsystem: It creates a number of jobs (default: 10), each job sleeps for some\nrandom time (default: <=100ms), and has some probability of depending on each\npreceding job (default: 0.5). After awaiting its dependencies, each job may\nalso split portions of its work into one or more sub-jobs, and await their\ncompletion, before finishing its remaining work. Everything is scheduled\nacross a fixed number of worker threads (default: 4).\n\n## Installation\n\nRun the following to install:\n\n```bash\n$ pip install asyncjobs\n```\n\n## Development\n\nTo work on asyncjobs, clone [this repo](https://github.com/jherland/asyncjobs/),\nand run the following (in a virtualenv) to get everything you need to develop\nand run tests:\n\n```bash\n$ pip install -e .[dev]\n```\n\nAdditionally, if you want to generate scheduling plots (as seen above), you\nneed a couple more dependencies ([`plotly`](https://plotly.com/python/) and\n[`numpy`](https://numpy.org/)):\n\n```bash\n$ pip install -e .[dev,plot]\n```\n\nAlternatively, if you are using [Nix](https://nixos.org/nix/), use the included\n`shell.nix` to get a development environment with everything automatically\ninstalled:\n\n```bash\n$ nix-shell\n```\n\nUse [`nox`](https://nox.thea.codes/) to run all tests, formatters and linters:\n\n```bash\n$ nox\n```\n\nThis will run the test suite under all supported Python versions, format the\ncode with [`black`](https://black.readthedocs.io/) and run the\n[`flake8`](https://flake8.pycqa.org/) linter.\n\n## Contributing\n\nMain development happens at <https://github.com/jherland/asyncjobs/>.\nPost issues and PRs there.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jherland/asyncjobs", "keywords": "async asyncio job scheduler", "license": "", "maintainer": "", "maintainer_email": "", "name": "asyncjobs", "package_url": "https://pypi.org/project/asyncjobs/", "platform": "", "project_url": "https://pypi.org/project/asyncjobs/", "project_urls": {"Homepage": "https://github.com/jherland/asyncjobs"}, "release_url": "https://pypi.org/project/asyncjobs/0.1.2/", "requires_dist": ["black ; extra == 'dev'", "flake8 ; extra == 'dev'", "nox ; extra == 'dev'", "check-manifest ; extra == 'dist'", "twine ; extra == 'dist'", "wheel ; extra == 'dist'", "numpy ; extra == 'plot'", "plotly ; extra == 'plot'", "pytest (>=5.4.0) ; extra == 'test'", "pytest-asyncio ; extra == 'test'", "requests ; extra == 'test'"], "requires_python": ">=3.6", "summary": "Asynchronous job scheduler", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>asyncjobs</h1>\n<p><a href=\"https://github.com/jherland/asyncjobs/actions\" rel=\"nofollow\"><img alt=\"Tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acd267091dba6a96737b76d81a9dc2bca434e30c/68747470733a2f2f6769746875622e636f6d2f6a6865726c616e642f6173796e636a6f62732f776f726b666c6f77732f74657374732f62616467652e737667\"></a>\n<a href=\"https://travis-ci.org/jherland/asyncjobs\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea9c0f7f6cca31032861011861f0cb7aa18a8e11/68747470733a2f2f7472617669732d63692e6f72672f6a6865726c616e642f6173796e636a6f62732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/asyncjobs\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a740f4be753ef53eae6ccd88ff44fab654f77a9/68747470733a2f2f62616467652e667572792e696f2f70792f6173796e636a6f62732e737667\"></a>\n<a href=\"https://pypi.org/project/asyncjobs/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04db845d1761953af777e3bdb16317c160b4ecc7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6173796e636a6f6273\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<p>Asynchronous job scheduler.\nUsing asyncio to run jobs in worker threads/processes.</p>\n<h2>Description</h2>\n<p>A job scheduler for running asynchronous (and synchronous) jobs with\ndependencies using asyncio. Jobs are identified by their <em>name</em> and implement\nan async <code>__call__</code> method. Jobs may await other jobs or schedule work to be\ndone in a thread or subprocess. Jobs are run by a Scheduler, which control the\nexecution of the jobs, as well as the number of concurrent threads and\nprocesses doing work. The Scheduler emits events which allow e.g. progress and\nstatistics to be easily collected and monitored. A separate module is provided\nto turn Scheduler events into an interactive scheduling plot:</p>\n<p><img alt=\"Example schedule plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dadac1e0e045965aba1d0297beb6f2e3d818c930/68747470733a2f2f6769746875622e636f6d2f6a6865726c616e642f6173796e636a6f62732f7261772f6d61737465722f6578616d706c65732f72616e646f6d5f6a6f62735f706c6f742e706e67\"></p>\n<p>Jobs complete successfully by returning (with or without a return value). Any\nexception propagated from a job's <code>__call__</code> method is regarded as a failure.\nAny job that depend on (i.e. await the result of) another job will be\nautomatically cancelled by the scheduler if that other job fails.\nThe Scheduler handles cancellation (e.g. <em>Ctrl-C</em>) by cancelling all ongoing\nand remaining tasks as quickly and cleanly as possible.</p>\n<h2>Usage examples</h2>\n<h3>Run three simple jobs in sequence</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">asyncjobs</span> <span class=\"kn\">import</span> <span class=\"n\">Job</span><span class=\"p\">,</span> <span class=\"n\">Scheduler</span>\n\n<span class=\"c1\"># Helper function</span>\n<span class=\"k\">def</span> <span class=\"nf\">sleep</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">ctime</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s1\">: Sleep for a second'</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">ctime</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s1\">: Finished sleep'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Job #1 prints uptime</span>\n<span class=\"n\">job1</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"s1\">'#1'</span><span class=\"p\">)</span>\n<span class=\"n\">job1</span><span class=\"o\">.</span><span class=\"n\">subprocess_argv</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'uptime'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Job #2 waits for #1 and then sleeps in a thread</span>\n<span class=\"n\">job2</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"s1\">'#2'</span><span class=\"p\">,</span> <span class=\"n\">deps</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'#1'</span><span class=\"p\">})</span>\n<span class=\"n\">job2</span><span class=\"o\">.</span><span class=\"n\">thread_func</span> <span class=\"o\">=</span> <span class=\"n\">sleep</span>\n\n<span class=\"c1\"># Job #3 waits for #2 and then prints uptime (again)</span>\n<span class=\"n\">job3</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"s1\">'#3'</span><span class=\"p\">,</span> <span class=\"n\">deps</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'#2'</span><span class=\"p\">})</span>\n<span class=\"n\">job3</span><span class=\"o\">.</span><span class=\"n\">subprocess_argv</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'uptime'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Run all jobs in the scheduler</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Scheduler</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">job</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">job1</span><span class=\"p\">,</span> <span class=\"n\">job2</span><span class=\"p\">,</span> <span class=\"n\">job3</span><span class=\"p\">]:</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">job</span><span class=\"p\">)</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<p>(<a href=\"https://github.com/jherland/asyncjobs/blob/master/examples/simple_usage.py\" rel=\"nofollow\">code also available here</a>)\nshould produce output like this:</p>\n<pre><code> 16:35:58  up 9 days  3:29,  1 user,  load average: 0.62, 0.55, 0.55\nTue Feb 25 16:35:58 2020: Sleep for a second\nTue Feb 25 16:35:59 2020: Finished sleep\n 16:35:59  up 9 days  3:29,  1 user,  load average: 0.62, 0.55, 0.55\n</code></pre>\n<h3>Fetching web content in parallel</h3>\n<p><a href=\"https://github.com/jherland/asyncjobs/blob/master/examples/random_wikipedia.py\" rel=\"nofollow\">This example</a>\nfetches a random Wikipedia article, and then follows links to other articles\nuntil 10 articles have been fetched. Sample output:</p>\n<pre><code>    fetching https://en.wikipedia.org/wiki/Special:Random...\n  * [Indonesia\u2013Mongolia relations] links to 7 articles\n      fetching https://en.wikipedia.org/wiki/Indonesia...\n      fetching https://en.wikipedia.org/wiki/Mongolia...\n      fetching https://en.wikipedia.org/wiki/Jakarta...\n      fetching https://en.wikipedia.org/wiki/Mongolian_National_University,_Ulan_Bator...\n    * [Mongolia] links to 529 articles\n      fetching https://en.wikipedia.org/wiki/Sukarno...\n    * [Indonesia] links to 697 articles\n      fetching https://en.wikipedia.org/wiki/Megawati_Soekarnoputri...\n    * [Jakarta] links to 757 articles\n      fetching https://en.wikipedia.org/wiki/Susilo_Bambang_Yudhoyono...\n    * [Mongolian National University] links to 2 articles\n        fetching https://en.wikipedia.org/wiki/Mongolian_language...\n    * [Sukarno] links to 523 articles\n        fetching https://en.wikipedia.org/wiki/Mongolian_script...\n    * [Susilo Bambang Yudhoyono] links to 159 articles\n    * [Megawati Sukarnoputri] links to 88 articles\n      * [Mongolian language] links to 259 articles\n      * [Mongolian script] links to 142 articles\n\n</code></pre>\n<h3>Wasting time efficiently across multiple threads</h3>\n<p><a href=\"https://github.com/jherland/asyncjobs/blob/master/examples/random_jobs.py\" rel=\"nofollow\">The final example</a>\n(which was used to produce the schedule plot above) simulates a simple build\nsystem: It creates a number of jobs (default: 10), each job sleeps for some\nrandom time (default: &lt;=100ms), and has some probability of depending on each\npreceding job (default: 0.5). After awaiting its dependencies, each job may\nalso split portions of its work into one or more sub-jobs, and await their\ncompletion, before finishing its remaining work. Everything is scheduled\nacross a fixed number of worker threads (default: 4).</p>\n<h2>Installation</h2>\n<p>Run the following to install:</p>\n<pre>$ pip install asyncjobs\n</pre>\n<h2>Development</h2>\n<p>To work on asyncjobs, clone <a href=\"https://github.com/jherland/asyncjobs/\" rel=\"nofollow\">this repo</a>,\nand run the following (in a virtualenv) to get everything you need to develop\nand run tests:</p>\n<pre>$ pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p>Additionally, if you want to generate scheduling plots (as seen above), you\nneed a couple more dependencies (<a href=\"https://plotly.com/python/\" rel=\"nofollow\"><code>plotly</code></a> and\n<a href=\"https://numpy.org/\" rel=\"nofollow\"><code>numpy</code></a>):</p>\n<pre>$ pip install -e .<span class=\"o\">[</span>dev,plot<span class=\"o\">]</span>\n</pre>\n<p>Alternatively, if you are using <a href=\"https://nixos.org/nix/\" rel=\"nofollow\">Nix</a>, use the included\n<code>shell.nix</code> to get a development environment with everything automatically\ninstalled:</p>\n<pre>$ nix-shell\n</pre>\n<p>Use <a href=\"https://nox.thea.codes/\" rel=\"nofollow\"><code>nox</code></a> to run all tests, formatters and linters:</p>\n<pre>$ nox\n</pre>\n<p>This will run the test suite under all supported Python versions, format the\ncode with <a href=\"https://black.readthedocs.io/\" rel=\"nofollow\"><code>black</code></a> and run the\n<a href=\"https://flake8.pycqa.org/\" rel=\"nofollow\"><code>flake8</code></a> linter.</p>\n<h2>Contributing</h2>\n<p>Main development happens at <a href=\"https://github.com/jherland/asyncjobs/\" rel=\"nofollow\">https://github.com/jherland/asyncjobs/</a>.\nPost issues and PRs there.</p>\n\n          </div>"}, "last_serial": 7176831, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1ea3e6f87a6d1e797c32adcc0ffe69dd", "sha256": "2b23b829435be46a56869658e38026f07db84409e507bb927e9b1ccbfb629a8d"}, "downloads": -1, "filename": "asyncjobs-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1ea3e6f87a6d1e797c32adcc0ffe69dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15802, "upload_time": "2020-04-27T10:35:26", "upload_time_iso_8601": "2020-04-27T10:35:26.202722Z", "url": "https://files.pythonhosted.org/packages/7b/40/f19f310f62e434ea8eac0fa4076af5eb7e0478f3450c9bd816ca992835f8/asyncjobs-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67dbe922c2f9e237008de9d2f685336c", "sha256": "3f1d0a8629aa6802197abfa9fdcd228cbfa36a33463305389324f7b53c05bcc0"}, "downloads": -1, "filename": "asyncjobs-0.1.tar.gz", "has_sig": false, "md5_digest": "67dbe922c2f9e237008de9d2f685336c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 113089, "upload_time": "2020-04-27T10:35:28", "upload_time_iso_8601": "2020-04-27T10:35:28.615872Z", "url": "https://files.pythonhosted.org/packages/ce/b1/9e72a84e33e5c563704447a1e73028c1ed03d1a33d16ef905ba1b886c221/asyncjobs-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "bf7a31337fb8371836c7b32db231e1b5", "sha256": "94d8587f9c125095ba55422c723b4ce835d9f893098b1ed5088cec2b9068752b"}, "downloads": -1, "filename": "asyncjobs-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bf7a31337fb8371836c7b32db231e1b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15829, "upload_time": "2020-04-27T10:49:04", "upload_time_iso_8601": "2020-04-27T10:49:04.607494Z", "url": "https://files.pythonhosted.org/packages/28/e9/05258d94ab08edd531759eca3e31a750d59379ff05da2d83f3c1ab46d58f/asyncjobs-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61fad30c58b60cfefb9ea7d5140b2ade", "sha256": "dd7bf5d0f54e380edf560458e630e89b8ba4371b8b6cc54641898c04926cf530"}, "downloads": -1, "filename": "asyncjobs-0.1.1.tar.gz", "has_sig": false, "md5_digest": "61fad30c58b60cfefb9ea7d5140b2ade", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 113117, "upload_time": "2020-04-27T10:49:07", "upload_time_iso_8601": "2020-04-27T10:49:07.226937Z", "url": "https://files.pythonhosted.org/packages/c3/ec/e57b29e970814cdc9fae79fec4f371845668fcbcec47fab6afcc75b4d21d/asyncjobs-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "aab22f67ccf2bb9e221e2f459d1781ef", "sha256": "a6539dad37cb6d97cca475ced377179158b0dbfd53810bb41875da005a5f979a"}, "downloads": -1, "filename": "asyncjobs-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "aab22f67ccf2bb9e221e2f459d1781ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16028, "upload_time": "2020-05-06T01:20:03", "upload_time_iso_8601": "2020-05-06T01:20:03.025195Z", "url": "https://files.pythonhosted.org/packages/52/37/1988263bee6ea3a23599be034fdb40d2887c080c513cd2168d9032960f17/asyncjobs-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8294795bbcff512e4541547d7d0977e0", "sha256": "1fd5fe51bde0719321737712874fbd3235b248105f4b0b538346650268145b96"}, "downloads": -1, "filename": "asyncjobs-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8294795bbcff512e4541547d7d0977e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 113727, "upload_time": "2020-05-06T01:20:06", "upload_time_iso_8601": "2020-05-06T01:20:06.579091Z", "url": "https://files.pythonhosted.org/packages/70/fb/48bb21c0ab5f33eceeece15a5caeb77bb483729ed8da5dc3dae09e74c5fb/asyncjobs-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aab22f67ccf2bb9e221e2f459d1781ef", "sha256": "a6539dad37cb6d97cca475ced377179158b0dbfd53810bb41875da005a5f979a"}, "downloads": -1, "filename": "asyncjobs-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "aab22f67ccf2bb9e221e2f459d1781ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16028, "upload_time": "2020-05-06T01:20:03", "upload_time_iso_8601": "2020-05-06T01:20:03.025195Z", "url": "https://files.pythonhosted.org/packages/52/37/1988263bee6ea3a23599be034fdb40d2887c080c513cd2168d9032960f17/asyncjobs-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8294795bbcff512e4541547d7d0977e0", "sha256": "1fd5fe51bde0719321737712874fbd3235b248105f4b0b538346650268145b96"}, "downloads": -1, "filename": "asyncjobs-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8294795bbcff512e4541547d7d0977e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 113727, "upload_time": "2020-05-06T01:20:06", "upload_time_iso_8601": "2020-05-06T01:20:06.579091Z", "url": "https://files.pythonhosted.org/packages/70/fb/48bb21c0ab5f33eceeece15a5caeb77bb483729ed8da5dc3dae09e74c5fb/asyncjobs-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:43 2020"}