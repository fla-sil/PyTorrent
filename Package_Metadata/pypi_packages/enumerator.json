{"info": {"author": "Erik Dominguez, Steve Coward", "author_email": "maleus@overflowsecurity.com, steve@sugarstack.io", "bugtrack_url": null, "classifiers": [], "description": "enumerator\r\n==========\r\n\r\nContributors:\r\n\r\n-  Erik Dominguez (IRC: Maleus \\| Twitter: @Maleus21) (original concept\r\n   and script author, Maleus@overflowsecurity.com) - http://overflowsecurity.com\r\n-  Steve Coward (IRC: felux \\| Twitter: @sugarstackio) -\r\n   http://sugarstack.io\r\n\r\nenumerator is a tool built to assist in automating the often tedious\r\ntask of enumerating a target or list of targets during a penetration\r\ntest.\r\n\r\nenumerator is built around the Kali Linux distro. To use this on other\r\nLinux distros, please ensure the following tools are installed:\r\n\r\n-  nmap\r\n-  nikto, dirb (http enumeration)\r\n-  hydra (ftp enumeration)\r\n-  enum4linux (netbios enumeration)\r\n\r\n**Windows is NOT supported at this time.**\r\n\r\nAvailable Service Modules\r\n-------------------------\r\n\r\n-  FTP (hydra ftp login enumeration, nmap ftp NSE scripts)\r\n-  HTTP (nikto scan, dirb directory enumeration)\r\n-  Netbios (enum4linux scan)\r\n-  RPC (showmount output)\r\n-  SSH (hydra ssh login enumeration, nmap ssh NSE ssh-hostkey\r\n   enumeration)\r\n\r\nChangelog\r\n---------\r\n\r\n**v0.1.4** - Added SSH service module, changed all bruteforce options to\r\nuse 'tiny' credentials file instead of 'micro', reverted nmap TCP scan\r\noptions, minor bug fixes.\r\n\r\n**v0.1.3** - enumerator now takes either a file path or single host\r\nparameter to use.\r\n\r\n**v0.1.2** - Refactored service classification rules out to individual\r\nservice modules and updated class GenericService to validate new service\r\nrules. Created ProcessManager to handle process related tasks.\r\n\r\n**v0.1.1** - Corrected issue with flooding system with processes, now\r\nmoved to use multiprocessing.Pool().\r\n\r\nInstallation\r\n------------\r\n\r\nWhile not required, it is advised to create a virtualenv for enumerator\r\nto avoid conflicts with different versions of required packages. If\r\nyou're unfamiliar with virtualenv, please follow `this\r\nguide <http://docs.python-guide.org/en/latest/dev/virtualenvs/>`__.\r\n\r\nUse `pip <http://pip.readthedocs.org/en/latest/installing.html>`__ to\r\ninstall the required libraries:\r\n\r\n.. code:: sh\r\n\r\n    (venv) $ pip install enumerator\r\n\r\nor alternatively, if you have cloned the enumerator repository:\r\n\r\n.. code:: sh\r\n\r\n    (venv) $ python setup.py install\r\n\r\nUsage\r\n-----\r\n\r\nTo run, enumerator takes one of two parameters; either a file path to a\r\ntext file with a list of IP addresses, one per line.\r\n\r\n-  ``-f``, ``--file`` - path to a text file with a list of IP addresses,\r\n   one per line.\r\n-  ``-s``, ``--single`` - a single IP address.\r\n\r\n.. code:: sh\r\n\r\n    (venv) $ enumerator -f /root/Desktop/hosts.txt\r\n\r\n.. code:: sh\r\n\r\n    (venv) $ enumerator -s 10.1.1.215\r\n\r\nenumerator will then asynchronously begin scanning using nmap. Once nmap\r\nfinishes, the nmap results are parsed and passed to a system which,\r\nbased upon a simple set of rules, delegates further service-level\r\nenumeration to service-specific modules found in ``lib/``. Each service\r\nmodule defines specific enumeration applications to be run, and will run\r\neach process against the target, writing any results to file for review.\r\n\r\nCurrently, enumerator output is very minimal, so it's safe to say that\r\nwhen the enumerator script finishes, all hosts have been thoroughly\r\nscanned. Future versions of enumerator will have better in-time\r\nreporting of enumeration progress. Results are saved in ``results/``,\r\nand each host will have their own folder, within which all enumeration\r\nprocess output is saved for review once enumerator completes.\r\n\r\nExtending enumerator\r\n--------------------\r\n\r\nenumerator is designed to be (relatively) easily extended for additional\r\nservice enumeration! Follow these steps to add your own additional\r\nservice enumeration:\r\n\r\nCreating a NEW service module:\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n-  Create folder in ``lib/`` for your service module and related files.\r\n-  Create service module file and \\_\\_init\\_\\_.py inside the folder\r\n   created above.\r\n-  The service module should be identical in syntax to existing service\r\n   modules.\r\n-  ``SERVICE_DEFINITION`` is a special set of key:value rules to\r\n   classify a service. Details below.\r\n-  ``PROCESSES`` should contain the literal command(s) to be run. Follow\r\n   the named parameter syntax for any variable strings.\r\n-  Update the ``params`` dictionary within the ``scan()`` method to\r\n   match parameterized string vars set in ``PROCESSES``.\r\n-  In ``lib/delegator.py``, import your new module along with the\r\n   existing module imports.\r\n-  In ``lib/delegator.py``, instantiate your service module and add the\r\n   object to the ``service_modules`` list.\r\n\r\nIn order to test a newly created service module, it is much easier to\r\ntest by invoking the module directly as opposed to running enumerator.\r\nMake sure that your new service module follows the same syntax as\r\nexisting module scripts at the very bottom of the script. Update those\r\ncalls to match the syntax required for your new service module. To run,\r\nuse the following syntax from the root directory of enumerator,\r\nreplacing names and input parameters as needed:\r\n\r\n.. code:: sh\r\n\r\n    (venv) $ python -m enumerator.lib.<service>.<service> <ip> <port> <output directory>\r\n\r\nUpdating an existing service module:\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n-  To add a new service enumeration command to an existing module,\r\n   simply update ``PROCESSES`` with the command to be invoked. Be sure\r\n   that any named parameters are passed in the ``scan()`` call.\r\n\r\nCreating and Updating service definitions\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n``SERVICE_DEFINITION`` defines what attributes classify a particular\r\nservice. Two keys, ``service`` and ``port`` are available to define the\r\nservice. Following two examples and how they translate:\r\n\r\n-  ``service:ftp`` - The value ``'ftp'`` should be present in nmap's\r\n   'service' value.\r\n-  ``service:http,-proxy or port:8081`` - The value ``'http'`` should be\r\n   in 'service', the value ``'proxy'`` should **not** be in 'service' or\r\n   the value ``'port'`` should contain the value ``'8081'``.\r\n\r\nUpdating nmap process command line parameters:\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nGenerally speaking, editing these defined parameters may negatively\r\nimpact the service enumeration modules, so take care with what is being\r\nmodified! Configurable ``nmap`` options such as type of TCP connection\r\nsyntax, port ranges may certainly be modified to suit the specific use\r\ncase. These changes are made in ``lib/nmap.py`` in the ``PROCESSES``\r\nconstant defined near the top of the script.\r\n\r\nAdditional Information\r\n======================\r\n\r\nenumerator is being actively maintained! The ``TODO`` file will be kept\r\nupdated with various known bug fixes, minor or major features to be\r\nworked on. If you're interested in working on a new feature or would\r\nlike to submit new service enumeration modules to the project, by all\r\nmeans fork us! Maleus and felux (Steve Coward) are always around on IRC\r\nif you'd like to join us! You can find us on **Freenode** at\r\n**#overflowsec**.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/enumerator/", "keywords": "", "license": "LICENSE.txt", "maintainer": "Steve Coward", "maintainer_email": "steve@sugarstack.io", "name": "enumerator", "package_url": "https://pypi.org/project/enumerator/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/enumerator/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/enumerator/"}, "release_url": "https://pypi.org/project/enumerator/0.1.4/", "requires_dist": null, "requires_python": null, "summary": "enumerator is a tool built to assist in automating the often tedious task of enumerating a target or list of targets during a penetration test.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"enumerator\">\n<h2>enumerator</h2>\n<p>Contributors:</p>\n<ul>\n<li>Erik Dominguez (IRC: Maleus | Twitter: @Maleus21) (original concept\nand script author, <a href=\"mailto:Maleus%40overflowsecurity.com\">Maleus<span>@</span>overflowsecurity<span>.</span>com</a>) - <a href=\"http://overflowsecurity.com\" rel=\"nofollow\">http://overflowsecurity.com</a></li>\n<li>Steve Coward (IRC: felux | Twitter: @sugarstackio) -\n<a href=\"http://sugarstack.io\" rel=\"nofollow\">http://sugarstack.io</a></li>\n</ul>\n<p>enumerator is a tool built to assist in automating the often tedious\ntask of enumerating a target or list of targets during a penetration\ntest.</p>\n<p>enumerator is built around the Kali Linux distro. To use this on other\nLinux distros, please ensure the following tools are installed:</p>\n<ul>\n<li>nmap</li>\n<li>nikto, dirb (http enumeration)</li>\n<li>hydra (ftp enumeration)</li>\n<li>enum4linux (netbios enumeration)</li>\n</ul>\n<p><strong>Windows is NOT supported at this time.</strong></p>\n<div id=\"available-service-modules\">\n<h3>Available Service Modules</h3>\n<ul>\n<li>FTP (hydra ftp login enumeration, nmap ftp NSE scripts)</li>\n<li>HTTP (nikto scan, dirb directory enumeration)</li>\n<li>Netbios (enum4linux scan)</li>\n<li>RPC (showmount output)</li>\n<li>SSH (hydra ssh login enumeration, nmap ssh NSE ssh-hostkey\nenumeration)</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<p><strong>v0.1.4</strong> - Added SSH service module, changed all bruteforce options to\nuse \u2018tiny\u2019 credentials file instead of \u2018micro\u2019, reverted nmap TCP scan\noptions, minor bug fixes.</p>\n<p><strong>v0.1.3</strong> - enumerator now takes either a file path or single host\nparameter to use.</p>\n<p><strong>v0.1.2</strong> - Refactored service classification rules out to individual\nservice modules and updated class GenericService to validate new service\nrules. Created ProcessManager to handle process related tasks.</p>\n<p><strong>v0.1.1</strong> - Corrected issue with flooding system with processes, now\nmoved to use multiprocessing.Pool().</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>While not required, it is advised to create a virtualenv for enumerator\nto avoid conflicts with different versions of required packages. If\nyou\u2019re unfamiliar with virtualenv, please follow <a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\" rel=\"nofollow\">this\nguide</a>.</p>\n<p>Use <a href=\"http://pip.readthedocs.org/en/latest/installing.html\" rel=\"nofollow\">pip</a> to\ninstall the required libraries:</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ pip install enumerator\n</pre>\n<p>or alternatively, if you have cloned the enumerator repository:</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>To run, enumerator takes one of two parameters; either a file path to a\ntext file with a list of IP addresses, one per line.</p>\n<ul>\n<li><tt><span class=\"pre\">-f</span></tt>, <tt><span class=\"pre\">--file</span></tt> - path to a text file with a list of IP addresses,\none per line.</li>\n<li><tt><span class=\"pre\">-s</span></tt>, <tt><span class=\"pre\">--single</span></tt> - a single IP address.</li>\n</ul>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ enumerator -f /root/Desktop/hosts.txt\n</pre>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ enumerator -s <span class=\"m\">10</span>.1.1.215\n</pre>\n<p>enumerator will then asynchronously begin scanning using nmap. Once nmap\nfinishes, the nmap results are parsed and passed to a system which,\nbased upon a simple set of rules, delegates further service-level\nenumeration to service-specific modules found in <tt>lib/</tt>. Each service\nmodule defines specific enumeration applications to be run, and will run\neach process against the target, writing any results to file for review.</p>\n<p>Currently, enumerator output is very minimal, so it\u2019s safe to say that\nwhen the enumerator script finishes, all hosts have been thoroughly\nscanned. Future versions of enumerator will have better in-time\nreporting of enumeration progress. Results are saved in <tt>results/</tt>,\nand each host will have their own folder, within which all enumeration\nprocess output is saved for review once enumerator completes.</p>\n</div>\n<div id=\"extending-enumerator\">\n<h3>Extending enumerator</h3>\n<p>enumerator is designed to be (relatively) easily extended for additional\nservice enumeration! Follow these steps to add your own additional\nservice enumeration:</p>\n<div id=\"creating-a-new-service-module\">\n<h4>Creating a NEW service module:</h4>\n<ul>\n<li>Create folder in <tt>lib/</tt> for your service module and related files.</li>\n<li>Create service module file and __init__.py inside the folder\ncreated above.</li>\n<li>The service module should be identical in syntax to existing service\nmodules.</li>\n<li><tt>SERVICE_DEFINITION</tt> is a special set of key:value rules to\nclassify a service. Details below.</li>\n<li><tt>PROCESSES</tt> should contain the literal command(s) to be run. Follow\nthe named parameter syntax for any variable strings.</li>\n<li>Update the <tt>params</tt> dictionary within the <tt>scan()</tt> method to\nmatch parameterized string vars set in <tt>PROCESSES</tt>.</li>\n<li>In <tt>lib/delegator.py</tt>, import your new module along with the\nexisting module imports.</li>\n<li>In <tt>lib/delegator.py</tt>, instantiate your service module and add the\nobject to the <tt>service_modules</tt> list.</li>\n</ul>\n<p>In order to test a newly created service module, it is much easier to\ntest by invoking the module directly as opposed to running enumerator.\nMake sure that your new service module follows the same syntax as\nexisting module scripts at the very bottom of the script. Update those\ncalls to match the syntax required for your new service module. To run,\nuse the following syntax from the root directory of enumerator,\nreplacing names and input parameters as needed:</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python -m enumerator.lib.&lt;service&gt;.&lt;service&gt; &lt;ip&gt; &lt;port&gt; &lt;output directory&gt;\n</pre>\n</div>\n<div id=\"updating-an-existing-service-module\">\n<h4>Updating an existing service module:</h4>\n<ul>\n<li>To add a new service enumeration command to an existing module,\nsimply update <tt>PROCESSES</tt> with the command to be invoked. Be sure\nthat any named parameters are passed in the <tt>scan()</tt> call.</li>\n</ul>\n</div>\n<div id=\"creating-and-updating-service-definitions\">\n<h4>Creating and Updating service definitions</h4>\n<p><tt>SERVICE_DEFINITION</tt> defines what attributes classify a particular\nservice. Two keys, <tt>service</tt> and <tt>port</tt> are available to define the\nservice. Following two examples and how they translate:</p>\n<ul>\n<li><tt>service:ftp</tt> - The value <tt>'ftp'</tt> should be present in nmap\u2019s\n\u2018service\u2019 value.</li>\n<li><tt><span class=\"pre\">service:http,-proxy</span> or port:8081</tt> - The value <tt>'http'</tt> should be\nin \u2018service\u2019, the value <tt>'proxy'</tt> should <strong>not</strong> be in \u2018service\u2019 or\nthe value <tt>'port'</tt> should contain the value <tt>'8081'</tt>.</li>\n</ul>\n</div>\n<div id=\"updating-nmap-process-command-line-parameters\">\n<h4>Updating nmap process command line parameters:</h4>\n<p>Generally speaking, editing these defined parameters may negatively\nimpact the service enumeration modules, so take care with what is being\nmodified! Configurable <tt>nmap</tt> options such as type of TCP connection\nsyntax, port ranges may certainly be modified to suit the specific use\ncase. These changes are made in <tt>lib/nmap.py</tt> in the <tt>PROCESSES</tt>\nconstant defined near the top of the script.</p>\n</div>\n</div>\n</div>\n<div id=\"additional-information\">\n<h2>Additional Information</h2>\n<p>enumerator is being actively maintained! The <tt>TODO</tt> file will be kept\nupdated with various known bug fixes, minor or major features to be\nworked on. If you\u2019re interested in working on a new feature or would\nlike to submit new service enumeration modules to the project, by all\nmeans fork us! Maleus and felux (Steve Coward) are always around on IRC\nif you\u2019d like to join us! You can find us on <strong>Freenode</strong> at\n<strong>#overflowsec</strong>.</p>\n</div>\n\n          </div>"}, "last_serial": 1229623, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8251b321d2dd368dfeb2f0313dad1897", "sha256": "f92e5b996a01bc2db5395a1cd8f01785c819138ce0b0f101003d63acbc82df57"}, "downloads": -1, "filename": "enumerator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8251b321d2dd368dfeb2f0313dad1897", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8562, "upload_time": "2014-09-09T23:11:29", "upload_time_iso_8601": "2014-09-09T23:11:29.457278Z", "url": "https://files.pythonhosted.org/packages/19/cb/941abbaebca3af4ae6ef1e2b648ac87514a21e22f52afef87654f007b6bf/enumerator-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2dae3a1264a4bb0ee0f322e8786b6c2e", "sha256": "0b33bdaf85619df158834b75fb7d3722f2f354a3440ed2c5f6fdd8fdfc517a1e"}, "downloads": -1, "filename": "enumerator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2dae3a1264a4bb0ee0f322e8786b6c2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8645, "upload_time": "2014-09-11T02:56:19", "upload_time_iso_8601": "2014-09-11T02:56:19.577078Z", "url": "https://files.pythonhosted.org/packages/83/c5/a7362d9a588aaf4668396153337b233c382beb217c765ad62be68baf1f70/enumerator-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3c26405b142b980e771612634729bfe6", "sha256": "6367128df2d10bcb5090368b26a37bc03edf3a5e4209a62a261e353f545e822d"}, "downloads": -1, "filename": "enumerator-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3c26405b142b980e771612634729bfe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9612, "upload_time": "2014-09-13T03:32:11", "upload_time_iso_8601": "2014-09-13T03:32:11.118625Z", "url": "https://files.pythonhosted.org/packages/27/e0/bd40acd6d2ce64d46881458cecedda6567713addddea343de72c6c9f151e/enumerator-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "49b20d24abc1fbcbe2a658a461db9e44", "sha256": "0e467d90f09a626f382bef230459fc20537d4dcf3db0694eb11b348764bc98a5"}, "downloads": -1, "filename": "enumerator-0.1.3.tar.gz", "has_sig": false, "md5_digest": "49b20d24abc1fbcbe2a658a461db9e44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9938, "upload_time": "2014-09-15T02:27:00", "upload_time_iso_8601": "2014-09-15T02:27:00.906052Z", "url": "https://files.pythonhosted.org/packages/db/0f/0099fc1c224c33ea0c2231708fb0824b471b11e3f3d14ccb80f3f1cb144a/enumerator-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "e9b7a00de830d1704aeb4f5f1ee9c811", "sha256": "9b6c758e5c7a98c162d49da0ce06b03bbb1697abea6945aba1bcc8262fdab930"}, "downloads": -1, "filename": "enumerator-0.1.4.tar.gz", "has_sig": false, "md5_digest": "e9b7a00de830d1704aeb4f5f1ee9c811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10716, "upload_time": "2014-09-18T18:09:34", "upload_time_iso_8601": "2014-09-18T18:09:34.420657Z", "url": "https://files.pythonhosted.org/packages/ee/07/bd35df776ef076709c815b7c9dd21d496d7c02369cf5bd20c109c07e9072/enumerator-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e9b7a00de830d1704aeb4f5f1ee9c811", "sha256": "9b6c758e5c7a98c162d49da0ce06b03bbb1697abea6945aba1bcc8262fdab930"}, "downloads": -1, "filename": "enumerator-0.1.4.tar.gz", "has_sig": false, "md5_digest": "e9b7a00de830d1704aeb4f5f1ee9c811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10716, "upload_time": "2014-09-18T18:09:34", "upload_time_iso_8601": "2014-09-18T18:09:34.420657Z", "url": "https://files.pythonhosted.org/packages/ee/07/bd35df776ef076709c815b7c9dd21d496d7c02369cf5bd20c109c07e9072/enumerator-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:12 2020"}