{"info": {"author": "Roman Evstifeev", "author_email": "someuniquename@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Android", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Utilities"], "description": "This package provides decorators that will try to acquire redis lock\nbefore calling decorated function.\n\nInstallation\n------------\n\n.. code:: bash\n\n    pip install dumblock\n\nUsage\n-----\n\nSet ``DUMBLOCK_REDIS_URL`` in your django settings:\n\n.. code:: python\n\n    DUMBLOCK_REDIS_URL = \"redis://localhost:6379\"\n\nlock\\_or\\_exit\n~~~~~~~~~~~~~~\n\nDecorator. Before decorated function starts, try to acquire redis lock\nwith specified key. If lock is acquired successfully, proceed executing\nthe function. Otherwise, return immediately. The ``key`` argument can\ncontain templated string, wich will be rendered with args and kwargs,\npassed to the function.\n\nExample:\n\n.. code:: python\n\n    @lock_or_exit('lock_work_{}')\n    def workwork(x):\n        pass\n\n    workwork(3)  # Will try to acquire redis lock 'lock_work_3'\n\nlock\\_wait\n~~~~~~~~~~\n\nDecorator. Before decorated function starts, try to acquire redis lock\nwith specified key, waiting for ``waittime`` seconds if needed. If lock\nis acquired successfully, proceed executing the function. Otherwise,\nraise ``dumblock.TimeoutError``. The ``key`` argument can contain\ntemplated string, wich will be rendered with args and kwargs, passed to\nthe function.\n\nExample:\n\n.. code:: python\n\n    @lock_wait('lock_work_{}', waittime=4)\n    def workwork(x):\n        pass\n\n    workwork(3)  # Will try to acquire redis lock 'lock_work_3' for 4 seconds\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Fak3/dumblock", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dumblock", "package_url": "https://pypi.org/project/dumblock/", "platform": "", "project_url": "https://pypi.org/project/dumblock/", "project_urls": {"Homepage": "https://github.com/Fak3/dumblock"}, "release_url": "https://pypi.org/project/dumblock/0.1/", "requires_dist": null, "requires_python": "", "summary": "redis lock decorators for django", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides decorators that will try to acquire redis lock\nbefore calling decorated function.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install dumblock\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Set <tt>DUMBLOCK_REDIS_URL</tt> in your django settings:</p>\n<pre><span class=\"n\">DUMBLOCK_REDIS_URL</span> <span class=\"o\">=</span> <span class=\"s2\">\"redis://localhost:6379\"</span>\n</pre>\n<div id=\"lock-or-exit\">\n<h3>lock_or_exit</h3>\n<p>Decorator. Before decorated function starts, try to acquire redis lock\nwith specified key. If lock is acquired successfully, proceed executing\nthe function. Otherwise, return immediately. The <tt>key</tt> argument can\ncontain templated string, wich will be rendered with args and kwargs,\npassed to the function.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@lock_or_exit</span><span class=\"p\">(</span><span class=\"s1\">'lock_work_</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">workwork</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">workwork</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Will try to acquire redis lock 'lock_work_3'</span>\n</pre>\n</div>\n<div id=\"lock-wait\">\n<h3>lock_wait</h3>\n<p>Decorator. Before decorated function starts, try to acquire redis lock\nwith specified key, waiting for <tt>waittime</tt> seconds if needed. If lock\nis acquired successfully, proceed executing the function. Otherwise,\nraise <tt>dumblock.TimeoutError</tt>. The <tt>key</tt> argument can contain\ntemplated string, wich will be rendered with args and kwargs, passed to\nthe function.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@lock_wait</span><span class=\"p\">(</span><span class=\"s1\">'lock_work_</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">waittime</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">workwork</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">workwork</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Will try to acquire redis lock 'lock_work_3' for 4 seconds</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3755387, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4ae9c83af75dfbcf34367f8e14d43f35", "sha256": "84af2bf28140a42ffbb90fb2d64bbe8010a7c43cddefca6985c57c37facd0000"}, "downloads": -1, "filename": "dumblock-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4ae9c83af75dfbcf34367f8e14d43f35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4168, "upload_time": "2018-04-11T12:52:55", "upload_time_iso_8601": "2018-04-11T12:52:55.844790Z", "url": "https://files.pythonhosted.org/packages/29/eb/63dbd66897fe184f4c83cc4f405b4380b458abe6000f766a8ab05873291d/dumblock-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06205206362f276d197d07861eca64cf", "sha256": "1a27af91b55706f54fb26036e058f3fe7fe2be3c7e882964d2ddecf14b09bda4"}, "downloads": -1, "filename": "dumblock-0.1.tar.gz", "has_sig": false, "md5_digest": "06205206362f276d197d07861eca64cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2449, "upload_time": "2018-04-11T12:52:56", "upload_time_iso_8601": "2018-04-11T12:52:56.744414Z", "url": "https://files.pythonhosted.org/packages/30/67/2466e7765750ba1ceae8ad270d9c41f191a36647bc685a4c6934e7d58b29/dumblock-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ae9c83af75dfbcf34367f8e14d43f35", "sha256": "84af2bf28140a42ffbb90fb2d64bbe8010a7c43cddefca6985c57c37facd0000"}, "downloads": -1, "filename": "dumblock-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4ae9c83af75dfbcf34367f8e14d43f35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4168, "upload_time": "2018-04-11T12:52:55", "upload_time_iso_8601": "2018-04-11T12:52:55.844790Z", "url": "https://files.pythonhosted.org/packages/29/eb/63dbd66897fe184f4c83cc4f405b4380b458abe6000f766a8ab05873291d/dumblock-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06205206362f276d197d07861eca64cf", "sha256": "1a27af91b55706f54fb26036e058f3fe7fe2be3c7e882964d2ddecf14b09bda4"}, "downloads": -1, "filename": "dumblock-0.1.tar.gz", "has_sig": false, "md5_digest": "06205206362f276d197d07861eca64cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2449, "upload_time": "2018-04-11T12:52:56", "upload_time_iso_8601": "2018-04-11T12:52:56.744414Z", "url": "https://files.pythonhosted.org/packages/30/67/2466e7765750ba1ceae8ad270d9c41f191a36647bc685a4c6934e7d58b29/dumblock-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:04 2020"}