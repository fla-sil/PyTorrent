{"info": {"author": "Ben Emery", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": ".. image:: https://travis-ci.org/benemery/pyguard.svg?branch=master\n    :target: https://travis-ci.org/benemery/pyguard\n\n.. image:: https://coveralls.io/repos/benemery/pyguard/badge.svg?branch=master\n  :target: https://coveralls.io/r/benemery/pyguard?branch=master\n\nPyGuard\n=======\n\nA python auto test runner inspired by the `guard <https://github.com/guard/guard>`_ project.\n\nA simple example that runs all the tests when a file is modified would look something like this:\n\n.. code-block:: python\n\n    from filewatch import file_updated_subject, Watcher\n\n    from pyguard import guardian, GuardianObserver, RegexRule, RuleManager\n\n    manager = RuleManager(cmd='py.test pyguard')\n    manager.register_rules(\n            RegexRule(regex=r'.*/pyguard/.*'),\n        )\n\n    guardian.register_manager(manager)\n\n    # Set up our file observer\n    file_updated_subject.register_observer(GuardianObserver())\n\n    # Get our watcher going\n    watcher = Watcher()\n    watcher.run()\n\nAny ``RuleManager`` that you create will execute the given command whenever a registered rule matches a supplied file path.\n\nTo make things a little more granular, we can register a different set of rules. i.e.\n\n.. code-block:: python\n\n    ...\n\n    manager = RuleManager(cmd='py.test pyguard/tests/test_{test_name}.py')\n    manager.register_rules(\n            RegexRule(regex=r'.*/rules.py', cmd_augmentation={'test_name' : 'rules'}),\n            RegexRule(regex=r'.*/core.py', cmd_augmentation={'test_name' : 'guardian'}),\n        )\n\n    guardian.register_manager(manager)\n\n    ...\n\n\nTo enforce a particular naming convention we can take things even further using named groups within the regex itself. If we have say a ``views.py`` and we know that the tests for said views exist in ``test_views.py``, then we can simple use:\n\n.. code-block:: python\n\n    ...\n\n    manager = RuleManager(cmd='py.test pyguard/tests/test_{test_name}.py')\n    manager.register_rules(\n            RegexRule(regex=r'.*/(?P<test_name>views).py'),\n        )\n\n    guardian.register_manager(manager)\n\n    ...", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/benemery/0.0.4/tarball/pyguard", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/benemery/pyguard", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pyguard", "package_url": "https://pypi.org/project/pyguard/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyguard/", "project_urls": {"Download": "https://github.com/benemery/0.0.4/tarball/pyguard", "Homepage": "https://github.com/benemery/pyguard"}, "release_url": "https://pypi.org/project/pyguard/0.0.4/", "requires_dist": null, "requires_python": null, "summary": "Python auto test runner", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/benemery/pyguard\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/benemery/pyguard.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1b0d4b4ba56ba6e74e84fc32c235ac45660bb49d/68747470733a2f2f7472617669732d63692e6f72672f62656e656d6572792f707967756172642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/benemery/pyguard?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/benemery/pyguard/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec42a7e1ca9318ed10dbfdeb81b0e3c3b9d72dc6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f62656e656d6572792f707967756172642f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"pyguard\">\n<h2>PyGuard</h2>\n<p>A python auto test runner inspired by the <a href=\"https://github.com/guard/guard\" rel=\"nofollow\">guard</a> project.</p>\n<p>A simple example that runs all the tests when a file is modified would look something like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">filewatch</span> <span class=\"kn\">import</span> <span class=\"n\">file_updated_subject</span><span class=\"p\">,</span> <span class=\"n\">Watcher</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyguard</span> <span class=\"kn\">import</span> <span class=\"n\">guardian</span><span class=\"p\">,</span> <span class=\"n\">GuardianObserver</span><span class=\"p\">,</span> <span class=\"n\">RegexRule</span><span class=\"p\">,</span> <span class=\"n\">RuleManager</span>\n\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">RuleManager</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"o\">=</span><span class=\"s1\">'py.test pyguard'</span><span class=\"p\">)</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">register_rules</span><span class=\"p\">(</span>\n        <span class=\"n\">RegexRule</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'.*/pyguard/.*'</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">guardian</span><span class=\"o\">.</span><span class=\"n\">register_manager</span><span class=\"p\">(</span><span class=\"n\">manager</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set up our file observer</span>\n<span class=\"n\">file_updated_subject</span><span class=\"o\">.</span><span class=\"n\">register_observer</span><span class=\"p\">(</span><span class=\"n\">GuardianObserver</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Get our watcher going</span>\n<span class=\"n\">watcher</span> <span class=\"o\">=</span> <span class=\"n\">Watcher</span><span class=\"p\">()</span>\n<span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Any <tt>RuleManager</tt> that you create will execute the given command whenever a registered rule matches a supplied file path.</p>\n<p>To make things a little more granular, we can register a different set of rules. i.e.</p>\n<pre><span class=\"o\">...</span>\n\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">RuleManager</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"o\">=</span><span class=\"s1\">'py.test pyguard/tests/test_</span><span class=\"si\">{test_name}</span><span class=\"s1\">.py'</span><span class=\"p\">)</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">register_rules</span><span class=\"p\">(</span>\n        <span class=\"n\">RegexRule</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'.*/rules.py'</span><span class=\"p\">,</span> <span class=\"n\">cmd_augmentation</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'test_name'</span> <span class=\"p\">:</span> <span class=\"s1\">'rules'</span><span class=\"p\">}),</span>\n        <span class=\"n\">RegexRule</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'.*/core.py'</span><span class=\"p\">,</span> <span class=\"n\">cmd_augmentation</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'test_name'</span> <span class=\"p\">:</span> <span class=\"s1\">'guardian'</span><span class=\"p\">}),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">guardian</span><span class=\"o\">.</span><span class=\"n\">register_manager</span><span class=\"p\">(</span><span class=\"n\">manager</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n</pre>\n<p>To enforce a particular naming convention we can take things even further using named groups within the regex itself. If we have say a <tt>views.py</tt> and we know that the tests for said views exist in <tt>test_views.py</tt>, then we can simple use:</p>\n<pre><span class=\"o\">...</span>\n\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">RuleManager</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"o\">=</span><span class=\"s1\">'py.test pyguard/tests/test_</span><span class=\"si\">{test_name}</span><span class=\"s1\">.py'</span><span class=\"p\">)</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">register_rules</span><span class=\"p\">(</span>\n        <span class=\"n\">RegexRule</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'.*/(?P&lt;test_name&gt;views).py'</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">guardian</span><span class=\"o\">.</span><span class=\"n\">register_manager</span><span class=\"p\">(</span><span class=\"n\">manager</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1387125, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "84581672eafd61419e2633f8bcef65d2", "sha256": "79af61547dae5ee8338f2a961349c9fa54bd8be5a4597195da72b344253e680f"}, "downloads": -1, "filename": "pyguard-0.0.4.tar.gz", "has_sig": false, "md5_digest": "84581672eafd61419e2633f8bcef65d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2746, "upload_time": "2015-01-18T20:31:49", "upload_time_iso_8601": "2015-01-18T20:31:49.346934Z", "url": "https://files.pythonhosted.org/packages/f1/b5/b130b4447deeb35fe0b53f36fffe4450a2b54ef8f96a36f72a461824155c/pyguard-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "84581672eafd61419e2633f8bcef65d2", "sha256": "79af61547dae5ee8338f2a961349c9fa54bd8be5a4597195da72b344253e680f"}, "downloads": -1, "filename": "pyguard-0.0.4.tar.gz", "has_sig": false, "md5_digest": "84581672eafd61419e2633f8bcef65d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2746, "upload_time": "2015-01-18T20:31:49", "upload_time_iso_8601": "2015-01-18T20:31:49.346934Z", "url": "https://files.pythonhosted.org/packages/f1/b5/b130b4447deeb35fe0b53f36fffe4450a2b54ef8f96a36f72a461824155c/pyguard-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:35 2020"}