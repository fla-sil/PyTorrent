{"info": {"author": "Quora, Inc.", "author_email": "asynq@quora.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "*****\nqcore\n*****\n.. image:: https://travis-ci.org/quora/qcore.svg?branch=master\n    :target: https://travis-ci.org/quora/qcore\n\n``qcore`` is a library of common utility functions used at Quora. It is used to\nabstract out common functionality for other Quora libraries like `asynq <https://github.com/quora/asynq>`_.\n\nIts component modules are discussed below. See the docstrings in the code\nitself for more detail.\n\nqcore.asserts\n-------------\n\nWhen a normal Python assert fails, it only indicates that there was a failure,\nnot what the bad values were that caused the assert to fail. This module\nprovides rich assertion helpers that automatically produce better error\nmessages. For example:\n\n.. code-block:: python\n\n    >>> from qcore.asserts import assert_eq\n    >>> assert 5 == 2 * 2\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    AssertionError\n    >>> assert_eq(5, 2 * 2)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"qcore/asserts.py\", line 82, in assert_eq\n        assert expected == actual, _assert_fail_message(message, expected, actual, '!=', extra)\n    AssertionError: 5 != 4\n\nSimilar methods are provided by the standard library's ``unittest`` package,\nbut those are tied to the ``TestCase`` class instead of being standalone\nfunctions.\n\nqcore.caching\n-------------\n\nThis provides helpers for caching data. Some examples include:\n\n.. code-block:: python\n\n    from qcore.caching import cached_per_instance, lazy_constant\n\n    @lazy_constant\n    def some_function():\n        # this will only be executed the first time some_function() is called;\n        # afterwards it will be cached\n        return expensive_computation()\n\n    class SomeClass(object):\n        @cached_per_instance()\n        def some_method(self, a, b):\n            # for any instance of SomeClass, this will only be executed once\n            return expensive_computation(a, b)\n\nqcore.debug\n-----------\n\nThis module provides some helpers useful for debugging Python. Among others, it\nincludes the ``@qcore.debug.trace()`` decorator, which can be used to trace\nevery time a function is called.\n\nqcore.decorators\n----------------\n\nThis module provides an abstraction for class-based decorators that supports\ntransparently decorating functions, methods, classmethods, and staticmethods\nwhile also providing the option to add additional custom attributes. For\nexample, it could be used to provide a caching decorator that adds a ``.dirty``\nattribute to decorated functions to dirty their cache:\n\n.. code-block:: python\n\n    from qcore.decorators import DecoratorBase, DecoratorBinder, decorate\n\n    class CacheDecoratorBinder(DecoratorBinder):\n        def dirty(self, *args):\n            if self.instance is None:\n                return self.decorator.dirty(*args)\n            else:\n                return self.decorator.dirty(self.instance, *args)\n\n    class CacheDecorator(DecoratorBase):\n        binder_cls = CacheDecoratorBinder\n\n        def __init__(self, *args):\n            super(CacheDecorator, self).__init__(*args)\n            self._cache = {}\n\n        def dirty(self, *args):\n            try:\n                del self._cache[args]\n            except KeyError:\n                pass\n\n        def __call__(self, *args):\n            try:\n                return self._cache[args]\n            except KeyError:\n                value = self.fn(*args)\n                self._cache[args] = value\n                return value\n\n    cached = decorate(CacheDecorator)\n\nqcore.enum\n----------\n\nThis module provides an abstraction for defining enums. You can define an enum\nas follows:\n\n.. code-block:: python\n\n    from qcore.enum import Enum\n\n    class Color(Enum):\n        red = 1\n        green = 2\n        blue = 3\n\nqcore.errors\n------------\n\nThis module provides some commonly useful exception classes and helpers for\nreraising exceptions from a different place.\n\nqcore.events\n------------\n\nThis provides an abstraction for registering events and running callbacks.\nExample usage:\n\n.. code-block:: python\n\n    >>> from qcore.events import EventHook\n    >>> event = EventHook()\n    >>> def callback():\n    ...     print('callback called')\n    ...\n    >>> event.subscribe(callback)\n    >>> event.trigger()\n    callback called\n\nqcore.helpers\n-------------\n\nThis provides a number of small helper functions.\n\nqcore.inspectable_class\n-----------------------\n\nThis provides a base class that automatically provides hashing, equality\nchecks, and a readable ``repr()`` result. Example usage:\n\n.. code-block:: python\n\n    >>> from qcore.inspectable_class import InspectableClass\n    >>> class Pair(InspectableClass):\n    ...     def __init__(self, a, b):\n    ...         self.a = a\n    ...         self.b = b\n    ...\n    >>> Pair(1, 2)\n    Pair(a=1, b=2)\n    >>> Pair(1, 2) == Pair(1, 2)\n    True\n\nqcore.inspection\n----------------\n\nThis provides functionality similar to the standard ``inspect`` module. Among\nothers, it includes the ``get_original_fn`` function, which extracts the\nunderlying function from a ``qcore.decorators``-decorated object.\n\nqcore.microtime\n---------------\n\nThis includes helpers for dealing with time, represented as an integer number\nof microseconds since the Unix epoch.\n\nqcore.testing\n-------------\n\nThis provides helpers to use in unit tests. Among others, it provides an\n``Anything`` object that compares equal to any other Python object.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/quora/qcore", "keywords": "quora core common utility", "license": "Apache Software License", "maintainer": null, "maintainer_email": null, "name": "qcore-nocython", "package_url": "https://pypi.org/project/qcore-nocython/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/qcore-nocython/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/quora/qcore"}, "release_url": "https://pypi.org/project/qcore-nocython/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Quora's core utility library", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/quora/qcore\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/quora/qcore.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43a1eabec3cfdad686c17318186f7cdf20011681/68747470733a2f2f7472617669732d63692e6f72672f71756f72612f71636f72652e7376673f6272616e63683d6d6173746572\"></a>\n<p><tt>qcore</tt> is a library of common utility functions used at Quora. It is used to\nabstract out common functionality for other Quora libraries like <a href=\"https://github.com/quora/asynq\" rel=\"nofollow\">asynq</a>.</p>\n<p>Its component modules are discussed below. See the docstrings in the code\nitself for more detail.</p>\n<div id=\"qcore-asserts\">\n<h2>qcore.asserts</h2>\n<p>When a normal Python assert fails, it only indicates that there was a failure,\nnot what the bad values were that caused the assert to fail. This module\nprovides rich assertion helpers that automatically produce better error\nmessages. For example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">qcore.asserts</span> <span class=\"kn\">import</span> <span class=\"n\">assert_eq</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">assert</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"ne\">AssertionError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">assert_eq</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"qcore/asserts.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">82</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">assert_eq</span>\n    <span class=\"k\">assert</span> <span class=\"n\">expected</span> <span class=\"o\">==</span> <span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"n\">_assert_fail_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">,</span> <span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"s1\">'!='</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"p\">)</span>\n<span class=\"ne\">AssertionError</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"o\">!=</span> <span class=\"mi\">4</span>\n</pre>\n<p>Similar methods are provided by the standard library\u2019s <tt>unittest</tt> package,\nbut those are tied to the <tt>TestCase</tt> class instead of being standalone\nfunctions.</p>\n</div>\n<div id=\"qcore-caching\">\n<h2>qcore.caching</h2>\n<p>This provides helpers for caching data. Some examples include:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qcore.caching</span> <span class=\"kn\">import</span> <span class=\"n\">cached_per_instance</span><span class=\"p\">,</span> <span class=\"n\">lazy_constant</span>\n\n<span class=\"nd\">@lazy_constant</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_function</span><span class=\"p\">():</span>\n    <span class=\"c1\"># this will only be executed the first time some_function() is called;</span>\n    <span class=\"c1\"># afterwards it will be cached</span>\n    <span class=\"k\">return</span> <span class=\"n\">expensive_computation</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"nd\">@cached_per_instance</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">some_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"c1\"># for any instance of SomeClass, this will only be executed once</span>\n        <span class=\"k\">return</span> <span class=\"n\">expensive_computation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"qcore-debug\">\n<h2>qcore.debug</h2>\n<p>This module provides some helpers useful for debugging Python. Among others, it\nincludes the <tt>@qcore.debug.trace()</tt> decorator, which can be used to trace\nevery time a function is called.</p>\n</div>\n<div id=\"qcore-decorators\">\n<h2>qcore.decorators</h2>\n<p>This module provides an abstraction for class-based decorators that supports\ntransparently decorating functions, methods, classmethods, and staticmethods\nwhile also providing the option to add additional custom attributes. For\nexample, it could be used to provide a caching decorator that adds a <tt>.dirty</tt>\nattribute to decorated functions to dirty their cache:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qcore.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">DecoratorBase</span><span class=\"p\">,</span> <span class=\"n\">DecoratorBinder</span><span class=\"p\">,</span> <span class=\"n\">decorate</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CacheDecoratorBinder</span><span class=\"p\">(</span><span class=\"n\">DecoratorBinder</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dirty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">dirty</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"n\">dirty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CacheDecorator</span><span class=\"p\">(</span><span class=\"n\">DecoratorBase</span><span class=\"p\">):</span>\n    <span class=\"n\">binder_cls</span> <span class=\"o\">=</span> <span class=\"n\">CacheDecoratorBinder</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CacheDecorator</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cache</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dirty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cache</span><span class=\"p\">[</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cache</span><span class=\"p\">[</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cache</span><span class=\"p\">[</span><span class=\"n\">args</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n<span class=\"n\">cached</span> <span class=\"o\">=</span> <span class=\"n\">decorate</span><span class=\"p\">(</span><span class=\"n\">CacheDecorator</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"qcore-enum\">\n<h2>qcore.enum</h2>\n<p>This module provides an abstraction for defining enums. You can define an enum\nas follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qcore.enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">green</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">blue</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</pre>\n</div>\n<div id=\"qcore-errors\">\n<h2>qcore.errors</h2>\n<p>This module provides some commonly useful exception classes and helpers for\nreraising exceptions from a different place.</p>\n</div>\n<div id=\"qcore-events\">\n<h2>qcore.events</h2>\n<p>This provides an abstraction for registering events and running callbacks.\nExample usage:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">qcore.events</span> <span class=\"kn\">import</span> <span class=\"n\">EventHook</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">EventHook</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'callback called'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">trigger</span><span class=\"p\">()</span>\n<span class=\"n\">callback</span> <span class=\"n\">called</span>\n</pre>\n</div>\n<div id=\"qcore-helpers\">\n<h2>qcore.helpers</h2>\n<p>This provides a number of small helper functions.</p>\n</div>\n<div id=\"qcore-inspectable-class\">\n<h2>qcore.inspectable_class</h2>\n<p>This provides a base class that automatically provides hashing, equality\nchecks, and a readable <tt>repr()</tt> result. Example usage:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">qcore.inspectable_class</span> <span class=\"kn\">import</span> <span class=\"n\">InspectableClass</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Pair</span><span class=\"p\">(</span><span class=\"n\">InspectableClass</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"qcore-inspection\">\n<h2>qcore.inspection</h2>\n<p>This provides functionality similar to the standard <tt>inspect</tt> module. Among\nothers, it includes the <tt>get_original_fn</tt> function, which extracts the\nunderlying function from a <tt>qcore.decorators</tt>-decorated object.</p>\n</div>\n<div id=\"qcore-microtime\">\n<h2>qcore.microtime</h2>\n<p>This includes helpers for dealing with time, represented as an integer number\nof microseconds since the Unix epoch.</p>\n</div>\n<div id=\"qcore-testing\">\n<h2>qcore.testing</h2>\n<p>This provides helpers to use in unit tests. Among others, it provides an\n<tt>Anything</tt> object that compares equal to any other Python object.</p>\n</div>\n\n          </div>"}, "last_serial": 2619663, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "1021a8200b5a72df6ead7f63708c9f3f", "sha256": "dd7a94b3a7eac4f6088e0ef53930e35c6b4b18a071f42d595a4363052131a5ba"}, "downloads": -1, "filename": "qcore-nocython-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1021a8200b5a72df6ead7f63708c9f3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27042, "upload_time": "2017-02-04T22:58:54", "upload_time_iso_8601": "2017-02-04T22:58:54.302577Z", "url": "https://files.pythonhosted.org/packages/11/f9/65caa31ac429694ace172042c0bdd3e69e6e6aa5bdbf1df5f018dbaadc23/qcore-nocython-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1021a8200b5a72df6ead7f63708c9f3f", "sha256": "dd7a94b3a7eac4f6088e0ef53930e35c6b4b18a071f42d595a4363052131a5ba"}, "downloads": -1, "filename": "qcore-nocython-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1021a8200b5a72df6ead7f63708c9f3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27042, "upload_time": "2017-02-04T22:58:54", "upload_time_iso_8601": "2017-02-04T22:58:54.302577Z", "url": "https://files.pythonhosted.org/packages/11/f9/65caa31ac429694ace172042c0bdd3e69e6e6aa5bdbf1df5f018dbaadc23/qcore-nocython-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:57 2020"}