{"info": {"author": "Yuan Chang", "author_email": "pyslvs@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Documentation", "Topic :: Utilities", "Typing :: Typed"], "description": "[![Build status](https://img.shields.io/travis/KmolYuan/apimd.svg?logo=travis)](https://travis-ci.org/KmolYuan/apimd)\n[![PyPI](https://img.shields.io/pypi/v/apimd.svg)](https://pypi.org/project/apimd/)\n\n# apimd\n\nA Python API compiler for universal Markdown syntax.\n\nRequired Python 3.7 and above.\n\n## Install\n\nInstall by pip:\n\n```bash\npip install apimd\n```\n\nFrom Git repository:\n\n```bash\npython setup.py install\n```\n\nRun directly:\n\n```bash\npython launcher.py --help\n```\n\n## Command\n\nFollowing syntax are allowed:\n\n```bash\napimd module_name\napimd Module-Name=module_name\napimd \"Module Name=module_name\"\n```\n\nThe first is the readable name of the package;\nthe second is the name used in import syntax.\nPlease make sure you can import the package by the given name in current path.\n\nThe output path can be choose by \"-d\" and \"--dir\" option, default is `docs`.\nMultiple modules are supported either.\n\n```bash\napimd module1 module2 -d out_path\n```\n\nIf you just want to test, use dry run.\n\n```bash\napimd module --dry\n```\n\n## Rules\n\nBasically, this compiler can extract docstrings\nfrom those \"public\" objects:\n\n+ Modules\n+ Functions\n+ Generators\n+ Classes and its methods\n\nAccording to PEP 8, \"**public**\" means a name can't starts with underscore symbol \"`_`\".\nAnd the magic methods are not \"public\" too, apart from `__init__` method.\n([Naming Conventions])\n\nBuiltins object (`int`, `str`, `list`, `dict`, etc.) has no docstring their owned.\nSo even they are public name style or listed in `__all__`,\nthis compiler will still skip them (like `__version__` or `MY_GLOBAL`).\nPlease pack them into functions or classes such as `Enum`,\nor mention them in the docstring of root module.\n\nIn module wise, a package force required a list object `__all__` to show all of\nglobal names to prevent external imported names and `from m import *` syntax.\n([Global Variable Names])\n\nThis compiler can detect properties, class attributes, static methods and abstract methods as well.\nObject attributes should be noted in the stub files or use Variable Annotations ([PEP 526]).\n\n[Naming Conventions]: https://www.python.org/dev/peps/pep-0008/#naming-conventions\n[Global Variable Names]: https://www.python.org/dev/peps/pep-0008/#global-variable-names\n[PEP 526]: https://www.python.org/dev/peps/pep-0526/\n\n## Stubs\n\nIf a module has a stub file, the stub file will be loaded instead of the module.\nBut docstring should be still written in module first.\n\n## Inner links\n\nThe docstring can refer the names in the same module or same class.\nUse `[name]`, `[class.attribute]` or `[attribute]` syntax to refer them.\nBut if attribute name is conflict with global name, the global name will preferred.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/KmolYuan/apimd", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "apimd", "package_url": "https://pypi.org/project/apimd/", "platform": "", "project_url": "https://pypi.org/project/apimd/", "project_urls": {"Homepage": "https://github.com/KmolYuan/apimd"}, "release_url": "https://pypi.org/project/apimd/1.0.2/", "requires_dist": null, "requires_python": ">=3.7", "summary": "A Python API compiler for universal Markdown syntax.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/KmolYuan/apimd\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ffea4278bc9fa74093d0fb63198680d0bdcbf97/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f4b6d6f6c5975616e2f6170696d642e7376673f6c6f676f3d747261766973\"></a>\n<a href=\"https://pypi.org/project/apimd/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/333a3ba16f6e99222402cfd323a81aa93a0d5fdf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6170696d642e737667\"></a></p>\n<h1>apimd</h1>\n<p>A Python API compiler for universal Markdown syntax.</p>\n<p>Required Python 3.7 and above.</p>\n<h2>Install</h2>\n<p>Install by pip:</p>\n<pre>pip install apimd\n</pre>\n<p>From Git repository:</p>\n<pre>python setup.py install\n</pre>\n<p>Run directly:</p>\n<pre>python launcher.py --help\n</pre>\n<h2>Command</h2>\n<p>Following syntax are allowed:</p>\n<pre>apimd module_name\napimd Module-Name<span class=\"o\">=</span>module_name\napimd <span class=\"s2\">\"Module Name=module_name\"</span>\n</pre>\n<p>The first is the readable name of the package;\nthe second is the name used in import syntax.\nPlease make sure you can import the package by the given name in current path.</p>\n<p>The output path can be choose by \"-d\" and \"--dir\" option, default is <code>docs</code>.\nMultiple modules are supported either.</p>\n<pre>apimd module1 module2 -d out_path\n</pre>\n<p>If you just want to test, use dry run.</p>\n<pre>apimd module --dry\n</pre>\n<h2>Rules</h2>\n<p>Basically, this compiler can extract docstrings\nfrom those \"public\" objects:</p>\n<ul>\n<li>Modules</li>\n<li>Functions</li>\n<li>Generators</li>\n<li>Classes and its methods</li>\n</ul>\n<p>According to PEP 8, \"<strong>public</strong>\" means a name can't starts with underscore symbol \"<code>_</code>\".\nAnd the magic methods are not \"public\" too, apart from <code>__init__</code> method.\n(<a href=\"https://www.python.org/dev/peps/pep-0008/#naming-conventions\" rel=\"nofollow\">Naming Conventions</a>)</p>\n<p>Builtins object (<code>int</code>, <code>str</code>, <code>list</code>, <code>dict</code>, etc.) has no docstring their owned.\nSo even they are public name style or listed in <code>__all__</code>,\nthis compiler will still skip them (like <code>__version__</code> or <code>MY_GLOBAL</code>).\nPlease pack them into functions or classes such as <code>Enum</code>,\nor mention them in the docstring of root module.</p>\n<p>In module wise, a package force required a list object <code>__all__</code> to show all of\nglobal names to prevent external imported names and <code>from m import *</code> syntax.\n(<a href=\"https://www.python.org/dev/peps/pep-0008/#global-variable-names\" rel=\"nofollow\">Global Variable Names</a>)</p>\n<p>This compiler can detect properties, class attributes, static methods and abstract methods as well.\nObject attributes should be noted in the stub files or use Variable Annotations (<a href=\"https://www.python.org/dev/peps/pep-0526/\" rel=\"nofollow\">PEP 526</a>).</p>\n<h2>Stubs</h2>\n<p>If a module has a stub file, the stub file will be loaded instead of the module.\nBut docstring should be still written in module first.</p>\n<h2>Inner links</h2>\n<p>The docstring can refer the names in the same module or same class.\nUse <code>[name]</code>, <code>[class.attribute]</code> or <code>[attribute]</code> syntax to refer them.\nBut if attribute name is conflict with global name, the global name will preferred.</p>\n\n          </div>"}, "last_serial": 6679827, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3f2b8ab6e02e9187422c0de222836935", "sha256": "a5bd14e609641e88cdd8c4d2b0db1e3d23f09f6d5df4fbced50df7abaed2406f"}, "downloads": -1, "filename": "apimd-1.0.0-cp37.cp38-none-any.whl", "has_sig": false, "md5_digest": "3f2b8ab6e02e9187422c0de222836935", "packagetype": "bdist_wheel", "python_version": "cp37.cp38", "requires_python": ">=3.7", "size": 8423, "upload_time": "2020-02-04T07:33:03", "upload_time_iso_8601": "2020-02-04T07:33:03.872678Z", "url": "https://files.pythonhosted.org/packages/58/f4/756dd341bd61e34c9e734849700476474cbe3e68092f19232a63e5ce3a53/apimd-1.0.0-cp37.cp38-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "924fe0f93b24baa8b15372f0e099afb8", "sha256": "a7ff19c4aef811cedc251a3ecc06c19b36fb5aade01bad3bccc1a9644723fdb0"}, "downloads": -1, "filename": "apimd-1.0.1-cp37.cp38-none-any.whl", "has_sig": false, "md5_digest": "924fe0f93b24baa8b15372f0e099afb8", "packagetype": "bdist_wheel", "python_version": "cp37.cp38", "requires_python": ">=3.7", "size": 8640, "upload_time": "2020-02-07T06:09:39", "upload_time_iso_8601": "2020-02-07T06:09:39.159047Z", "url": "https://files.pythonhosted.org/packages/da/3f/670839e04081dd8692fbcbbe1a89fdae53e8b2aae6e0f2e8d8275038fc40/apimd-1.0.1-cp37.cp38-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "7a76f115b21f85c4de0a330b9065fef7", "sha256": "5aa087423ddb50fe31556ac50da12d2df594c88fd249248d5c04596e8a77842d"}, "downloads": -1, "filename": "apimd-1.0.2-cp37.cp38-none-any.whl", "has_sig": false, "md5_digest": "7a76f115b21f85c4de0a330b9065fef7", "packagetype": "bdist_wheel", "python_version": "cp37.cp38", "requires_python": ">=3.7", "size": 8957, "upload_time": "2020-02-22T07:47:05", "upload_time_iso_8601": "2020-02-22T07:47:05.558210Z", "url": "https://files.pythonhosted.org/packages/e8/f4/bc126fc0dc602bda41a1c0e7ae1cd36744a51fe3b2645907fce59f5c5022/apimd-1.0.2-cp37.cp38-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7a76f115b21f85c4de0a330b9065fef7", "sha256": "5aa087423ddb50fe31556ac50da12d2df594c88fd249248d5c04596e8a77842d"}, "downloads": -1, "filename": "apimd-1.0.2-cp37.cp38-none-any.whl", "has_sig": false, "md5_digest": "7a76f115b21f85c4de0a330b9065fef7", "packagetype": "bdist_wheel", "python_version": "cp37.cp38", "requires_python": ">=3.7", "size": 8957, "upload_time": "2020-02-22T07:47:05", "upload_time_iso_8601": "2020-02-22T07:47:05.558210Z", "url": "https://files.pythonhosted.org/packages/e8/f4/bc126fc0dc602bda41a1c0e7ae1cd36744a51fe3b2645907fce59f5c5022/apimd-1.0.2-cp37.cp38-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:17:47 2020"}