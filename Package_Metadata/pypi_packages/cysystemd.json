{"info": {"author": "Dmitry Orlov <me@mosquito.su>", "author_email": "me@mosquito.su", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Natural Language :: Russian", "Operating System :: POSIX :: Linux", "Programming Language :: Cython", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries", "Topic :: System", "Topic :: System :: Operating System"], "description": "SystemD wrapper in Cython\n=========================\n\n.. image:: https://img.shields.io/pypi/v/cysystemd.svg\n    :target: https://pypi.python.org/pypi/cysystemd/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/wheel/cysystemd.svg\n    :target: https://pypi.python.org/pypi/cysystemd/\n\n.. image:: https://img.shields.io/pypi/pyversions/cysystemd.svg\n    :target: https://pypi.python.org/pypi/cysystemd/\n\n.. image:: https://img.shields.io/pypi/l/cysystemd.svg\n    :target: https://pypi.python.org/pypi/cysystemd/\n\n\nPython systemd wrapper using Cython\n\n\n.. contents:: Table of contents\n\n\nInstallation\n------------\n\nAll packages available on\n`github releases <https://github.com/mosquito/cysystemd/releases>`_.\n\n\nDebian/Ubuntu\n+++++++++++++\n\nInstall repository key\n\n.. code-block:: bash\n\n   wget -qO - 'https://bintray.com/user/downloadSubjectPublicKey?username=bintray' | \\\n      apt-key add -\n\n\nInstall the repository file\n\nDebian Jessie:\n\n.. code-block:: bash\n\n   echo \"deb http://dl.bintray.com/mosquito/cysystemd jessie main\" > /etc/apt/sources.list.d/cysystemd.list\n   apt-get update\n   apt-get install python-cysystemd python3-cysystemd\n\nUbuntu Xenial:\n\n.. code-block:: bash\n\n   echo \"deb http://dl.bintray.com/mosquito/cysystemd xenial main\" > /etc/apt/sources.list.d/cysystemd.list\n   apt-get update\n   apt-get install python-cysystemd python3-cysystemd\n\nUbuntu Bionic:\n\n.. code-block:: bash\n\n   echo \"deb http://dl.bintray.com/mosquito/cysystemd bionic main\" > /etc/apt/sources.list.d/cysystemd.list\n   apt-get update\n   apt-get install python-cysystemd python3-cysystemd\n\n\nCentos 7\n++++++++\n\n.. code-block:: bash\n\n   yum localinstall \\\n      https://github.com/mosquito/cysystemd/releases/download/0.17.1/python-cysystemd-0.17.1-1.centos7.x86_64.rpm\n\n\nInstallation from sources\n+++++++++++++++++++++++++\n\nYou should install systemd headers\n\nFor debian users:\n\n\n.. code-block:: bash\n\n    apt-get install build-essential \\\n        libsystemd-journal-dev \\\n        libsystemd-daemon-dev \\\n        libsystemd-dev\n\n\nFor CentOS/RHEL\n\n.. code-block:: bash\n\n    yum install gcc systemd-devel\n\n\nAnd install it from pypi\n\n.. code-block:: bash\n\n    pip install cysystemd\n\n\nUsage examples\n--------------\n\nWriting to journald\n+++++++++++++++++++\n\nLogging handler for python logger\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    from cysystemd import journal\n    import logging\n    import uuid\n\n    logging.basicConfig(level=logging.DEBUG)\n    logger = logging.getLogger()\n    logger.addHandler(journal.JournaldLogHandler())\n\n    try:\n        log.info(\"Trying to do something\")\n        raise Exception('foo')\n    except:\n        logger.exception(\"Test Exception %s\", 1)\n\n\nSystemd daemon notification\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n.. code-block:: python\n\n    from cysystemd.daemon import notify, Notification\n\n    # Send READY=1\n    notify(Notification.READY)\n\n    # Send status\n    notify(Notification.STATUS, \"I'm fine.\")\n\n    # Send stopping\n    notify(Notification.STOPPING)\n\n\nWrite message into Systemd journal\n\n\n.. code-block:: python\n\n    from cysystemd import journal\n\n\n    journal.write(\"Hello Lennart\")\n\n    # Or send structured data\n    journal.send(\n        message=\"Hello Lennart\",\n        priority=journal.Priority.INFO,\n        some_field='some value',\n    )\n\n\nReading journald\n++++++++++++++++\n\nReading all systemd records\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   from cysystemd.reader import JournalReader, JournalOpenMode\n\n   journal_reader = JournalReader()\n   journal_reader.open(JournalOpenMode.SYSTEM)\n   journal_reader.seek_head()\n\n   for record in journal_reader:\n      print(record.data['MESSAGE'])\n\n\nRead only cron logs\n~~~~~~~~~~~~~~~~~~~\n\n.. _read-only-cron-logs:\n\n.. code-block:: python\n\n   from cysystemd.reader import JournalReader, JournalOpenMode, Rule\n\n\n   rules = (\n      Rule(\"SYSLOG_IDENTIFIER\", \"CRON\") &\n      Rule(\"_SYSTEMD_UNIT\", \"crond.service\") |\n      Rule(\"_SYSTEMD_UNIT\", \"cron.service\")\n   )\n\n   cron_reader = JournalReader()\n   cron_reader.open(JournalOpenMode.SYSTEM)\n   cron_reader.seek_head()\n   cron_reader.add_filter(rules)\n\n   for record in cron_reader:\n      print(record.data['MESSAGE'])\n\n\nPolling records\n~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   from cysystemd.reader import JournalReader, JournalOpenMode\n\n\n   reader = JournalReader()\n   reader.open(JournalOpenMode.SYSTEM)\n   reader.seek_tail()\n\n   poll_timeout = 255\n\n   while True:\n      reader.wait(poll_timeout)\n\n      for record in reader:\n         print(record.data['MESSAGE'])\n\n\nJournalD open modes\n~~~~~~~~~~~~~~~~~~~\n\n* CURRENT_USER\n* LOCAL_ONLY\n* RUNTIME_ONLY\n* SYSTEM\n* SYSTEM_ONLY\n\n\n.. code-block:: python\n\n   from cysystemd.reader import JournalReader, JournalOpenMode\n\n   reader = JournalReader()\n   reader.open(JournalOpenMode.CURRENT_USER)\n\n\nJournalD entry\n~~~~~~~~~~~~~~\n\nJournalEntry class has some special properties and methods:\n\n* ``data`` - journal entry content (``dict``)\n* ``date`` - entry timestamp (``datetime`` instance)\n* ``cursor`` - systemd identification bytes for this entry\n* ``boot_id()`` - returns bootid\n* ``get_realtime_sec()`` - entry epoch (``float``)\n* ``get_realtime_usec()`` - entry epoch (``int`` microseconds)\n* ``get_monotonic_sec()`` - entry monotonic time (``float``)\n* ``get_monotonic_usec()`` - entry monotonic time (``int`` microseconds)\n* ``__getitem__(key)`` - shoutcut for ``entry.data[key]``\n\n\nJournalD reader\n~~~~~~~~~~~~~~~\n\nJournalReader class has some special properties and methods:\n\n* ``open(flags=JournalOpenMode.CURRENT_USER)`` - opening journald\n  with selected mode\n* ``open_directory(path)`` - opening journald from path\n* ``open_files(*filename)`` - opening journald from files\n* ``data_threshold`` - may be used to get or set the data field size threshold\n  for data returned by fething entry data.\n* ``closed`` - returns True when journal reader closed\n* ``locked`` - returns True when journal reader locked\n* ``idle`` - returns True when journal reader opened\n* ``seek_head`` - move reader pointer to the first entry\n* ``seek_tail`` - move reader pointer to the last entry\n* ``seek_monotonic_usec`` - seeks to the entry with the specified monotonic\n  timestamp, i.e. CLOCK_MONOTONIC. Since monotonic time restarts on every\n  reboot a boot ID needs to be specified as well.\n* ``seek_realtime_usec`` - seeks to the entry with the specified realtime\n  (wallclock) timestamp, i.e. CLOCK_REALTIME. Note that the realtime clock\n  is not necessarily monotonic. If a realtime timestamp is ambiguous, it is\n  not defined which position is sought to.\n* ``seek_cursor`` - seeks to the entry located at the specified cursor\n  (see ``JournalEntry.cursor``).\n* ``wait(timeout)`` - It will synchronously wait until the journal gets\n  changed. The maximum time this call sleeps may be controlled with the\n  timeout_usec parameter.\n* ``__iter__`` - returns JournalReader object\n* ``__next__`` - calls ``next()`` or raise ``StopIteration``\n* ``next(skip=0)`` - returns the next ``JournalEntry``. The ``skip``\n  parameter skips some entries.\n* ``previous(skip=0)`` - returns the previous ``JournalEntry``.\n  The ``skip`` parameter skips some entries.\n* ``skip_next(skip)`` - skips next entries.\n* ``skip_previous(skip)`` - skips next entries.\n* ``add_filter(rule)`` - adding filter rule.\n  See `read-only-cron-logs`_ as example.\n* ``clear_filter`` - reset all filters\n* ``fd`` - returns a special file descriptor\n* ``events`` - returns ``EPOLL`` events\n* ``timeout`` - returns internal timeout\n* ``process_events()`` - After each poll() wake-up process_events() needs\n  to be called to process events. This call will also indicate what kind of\n  change has been detected.\n* ``get_catalog()`` - retrieves a message catalog entry for the current\n  journal entry. This will look up an entry in the message catalog by using\n  the \"MESSAGE_ID=\" field of the current journal entry. Before returning\n  the entry all journal field names in the catalog entry text enclosed in\n  \"@\" will be replaced by the respective field values of the current entry.\n  If a field name referenced in the message catalog entry does not exist,\n  in the current journal entry, the \"@\" will be removed, but the field name\n  otherwise left untouched.\n* ``get_catalog_for_message_id(message_id: UUID)`` - works similar to\n  ``get_catalog()`` but the entry is looked up by the specified\n  message ID (no open journal context is necessary for this),\n  and no field substitution is performed.\n\n\nAsyncio support\n+++++++++++++++\n\nInitial ``asyncio`` support for reading journal asynchronously.\n\nAsyncJournalReader\n~~~~~~~~~~~~~~~~~~\n\nBlocking methods were wrapped by threads.\nMethod ``wait()`` use epoll on journald file descriptor.\n\n.. code-block:: python\n\n   import asyncio\n   import json\n\n   from cysystemd.reader import JournalOpenMode\n   from cysystemd.async_reader import AsyncJournalReader\n\n\n   async def main():\n       reader = AsyncJournalReader()\n       await reader.open(JournalOpenMode.SYSTEM)\n       await reader.seek_tail()\n\n       while await reader.wait():\n           async for record in reader:\n               print(\n                   json.dumps(\n                       record.data,\n                       indent=1,\n                       sort_keys=True\n                   )\n               )\n\n   if __name__ == '__main__':\n       asyncio.run(main())", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mosquito/cysystemd", "keywords": "systemd,python,daemon,sd_notify,cython", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "cysystemd", "package_url": "https://pypi.org/project/cysystemd/", "platform": "POSIX", "project_url": "https://pypi.org/project/cysystemd/", "project_urls": {"Homepage": "http://github.com/mosquito/cysystemd"}, "release_url": "https://pypi.org/project/cysystemd/1.3.2/", "requires_dist": null, "requires_python": "", "summary": "SystemD wrapper in Cython", "version": "1.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/cysystemd/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e211fd98dd570a39c4da7b974306c098545886b7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f637973797374656d642e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cysystemd/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/wheel/cysystemd.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b81f6d2835459a6906d7b59c1138e4f26647cec/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f637973797374656d642e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cysystemd/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/cysystemd.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d69da13be91df8aad13c621a5ed4d5c5e906ed0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f637973797374656d642e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cysystemd/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/cysystemd.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a19d280a81dd6c74bd6b9cfa7506a2de1227f29f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f637973797374656d642e737667\"></a>\n<p>Python systemd wrapper using Cython</p>\n<div id=\"table-of-contents\">\n<p>Table of contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#debian-ubuntu\" id=\"id3\" rel=\"nofollow\">Debian/Ubuntu</a></li>\n<li><a href=\"#centos-7\" id=\"id4\" rel=\"nofollow\">Centos 7</a></li>\n<li><a href=\"#installation-from-sources\" id=\"id5\" rel=\"nofollow\">Installation from sources</a></li>\n</ul>\n</li>\n<li><a href=\"#usage-examples\" id=\"id6\" rel=\"nofollow\">Usage examples</a><ul>\n<li><a href=\"#writing-to-journald\" id=\"id7\" rel=\"nofollow\">Writing to journald</a><ul>\n<li><a href=\"#logging-handler-for-python-logger\" id=\"id8\" rel=\"nofollow\">Logging handler for python logger</a></li>\n<li><a href=\"#systemd-daemon-notification\" id=\"id9\" rel=\"nofollow\">Systemd daemon notification</a></li>\n</ul>\n</li>\n<li><a href=\"#reading-journald\" id=\"id10\" rel=\"nofollow\">Reading journald</a><ul>\n<li><a href=\"#reading-all-systemd-records\" id=\"id11\" rel=\"nofollow\">Reading all systemd records</a></li>\n<li><a href=\"#read-only-cron-logs\" id=\"id12\" rel=\"nofollow\">Read only cron logs</a></li>\n<li><a href=\"#polling-records\" id=\"id13\" rel=\"nofollow\">Polling records</a></li>\n<li><a href=\"#journald-open-modes\" id=\"id14\" rel=\"nofollow\">JournalD open modes</a></li>\n<li><a href=\"#journald-entry\" id=\"id15\" rel=\"nofollow\">JournalD entry</a></li>\n<li><a href=\"#journald-reader\" id=\"id16\" rel=\"nofollow\">JournalD reader</a></li>\n</ul>\n</li>\n<li><a href=\"#asyncio-support\" id=\"id17\" rel=\"nofollow\">Asyncio support</a><ul>\n<li><a href=\"#asyncjournalreader\" id=\"id18\" rel=\"nofollow\">AsyncJournalReader</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Installation</a></h2>\n<p>All packages available on\n<a href=\"https://github.com/mosquito/cysystemd/releases\" rel=\"nofollow\">github releases</a>.</p>\n<div id=\"debian-ubuntu\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Debian/Ubuntu</a></h3>\n<p>Install repository key</p>\n<pre>wget -qO - <span class=\"s1\">'https://bintray.com/user/downloadSubjectPublicKey?username=bintray'</span> <span class=\"p\">|</span> <span class=\"se\">\\\n</span>   apt-key add -\n</pre>\n<p>Install the repository file</p>\n<p>Debian Jessie:</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"deb http://dl.bintray.com/mosquito/cysystemd jessie main\"</span> &gt; /etc/apt/sources.list.d/cysystemd.list\napt-get update\napt-get install python-cysystemd python3-cysystemd\n</pre>\n<p>Ubuntu Xenial:</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"deb http://dl.bintray.com/mosquito/cysystemd xenial main\"</span> &gt; /etc/apt/sources.list.d/cysystemd.list\napt-get update\napt-get install python-cysystemd python3-cysystemd\n</pre>\n<p>Ubuntu Bionic:</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"deb http://dl.bintray.com/mosquito/cysystemd bionic main\"</span> &gt; /etc/apt/sources.list.d/cysystemd.list\napt-get update\napt-get install python-cysystemd python3-cysystemd\n</pre>\n</div>\n<div id=\"centos-7\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Centos 7</a></h3>\n<pre>yum localinstall <span class=\"se\">\\\n</span>   https://github.com/mosquito/cysystemd/releases/download/0.17.1/python-cysystemd-0.17.1-1.centos7.x86_64.rpm\n</pre>\n</div>\n<div id=\"installation-from-sources\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Installation from sources</a></h3>\n<p>You should install systemd headers</p>\n<p>For debian users:</p>\n<pre>apt-get install build-essential <span class=\"se\">\\\n</span>    libsystemd-journal-dev <span class=\"se\">\\\n</span>    libsystemd-daemon-dev <span class=\"se\">\\\n</span>    libsystemd-dev\n</pre>\n<p>For CentOS/RHEL</p>\n<pre>yum install gcc systemd-devel\n</pre>\n<p>And install it from pypi</p>\n<pre>pip install cysystemd\n</pre>\n</div>\n</div>\n<div id=\"usage-examples\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Usage examples</a></h2>\n<div id=\"writing-to-journald\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Writing to journald</a></h3>\n<div id=\"logging-handler-for-python-logger\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Logging handler for python logger</a></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysystemd</span> <span class=\"kn\">import</span> <span class=\"n\">journal</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">journal</span><span class=\"o\">.</span><span class=\"n\">JournaldLogHandler</span><span class=\"p\">())</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Trying to do something\"</span><span class=\"p\">)</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"s2\">\"Test Exception </span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"systemd-daemon-notification\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Systemd daemon notification</a></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysystemd.daemon</span> <span class=\"kn\">import</span> <span class=\"n\">notify</span><span class=\"p\">,</span> <span class=\"n\">Notification</span>\n\n<span class=\"c1\"># Send READY=1</span>\n<span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">Notification</span><span class=\"o\">.</span><span class=\"n\">READY</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Send status</span>\n<span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">Notification</span><span class=\"o\">.</span><span class=\"n\">STATUS</span><span class=\"p\">,</span> <span class=\"s2\">\"I'm fine.\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Send stopping</span>\n<span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">Notification</span><span class=\"o\">.</span><span class=\"n\">STOPPING</span><span class=\"p\">)</span>\n</pre>\n<p>Write message into Systemd journal</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysystemd</span> <span class=\"kn\">import</span> <span class=\"n\">journal</span>\n\n\n<span class=\"n\">journal</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"Hello Lennart\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or send structured data</span>\n<span class=\"n\">journal</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span>\n    <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"Hello Lennart\"</span><span class=\"p\">,</span>\n    <span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"n\">journal</span><span class=\"o\">.</span><span class=\"n\">Priority</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span>\n    <span class=\"n\">some_field</span><span class=\"o\">=</span><span class=\"s1\">'some value'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"reading-journald\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Reading journald</a></h3>\n<div id=\"reading-all-systemd-records\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Reading all systemd records</a></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysystemd.reader</span> <span class=\"kn\">import</span> <span class=\"n\">JournalReader</span><span class=\"p\">,</span> <span class=\"n\">JournalOpenMode</span>\n\n<span class=\"n\">journal_reader</span> <span class=\"o\">=</span> <span class=\"n\">JournalReader</span><span class=\"p\">()</span>\n<span class=\"n\">journal_reader</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">JournalOpenMode</span><span class=\"o\">.</span><span class=\"n\">SYSTEM</span><span class=\"p\">)</span>\n<span class=\"n\">journal_reader</span><span class=\"o\">.</span><span class=\"n\">seek_head</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">journal_reader</span><span class=\"p\">:</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'MESSAGE'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"read-only-cron-logs\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Read only cron logs</a></h4>\n<pre id=\"id1\"><span class=\"kn\">from</span> <span class=\"nn\">cysystemd.reader</span> <span class=\"kn\">import</span> <span class=\"n\">JournalReader</span><span class=\"p\">,</span> <span class=\"n\">JournalOpenMode</span><span class=\"p\">,</span> <span class=\"n\">Rule</span>\n\n\n<span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n   <span class=\"n\">Rule</span><span class=\"p\">(</span><span class=\"s2\">\"SYSLOG_IDENTIFIER\"</span><span class=\"p\">,</span> <span class=\"s2\">\"CRON\"</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span>\n   <span class=\"n\">Rule</span><span class=\"p\">(</span><span class=\"s2\">\"_SYSTEMD_UNIT\"</span><span class=\"p\">,</span> <span class=\"s2\">\"crond.service\"</span><span class=\"p\">)</span> <span class=\"o\">|</span>\n   <span class=\"n\">Rule</span><span class=\"p\">(</span><span class=\"s2\">\"_SYSTEMD_UNIT\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cron.service\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">cron_reader</span> <span class=\"o\">=</span> <span class=\"n\">JournalReader</span><span class=\"p\">()</span>\n<span class=\"n\">cron_reader</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">JournalOpenMode</span><span class=\"o\">.</span><span class=\"n\">SYSTEM</span><span class=\"p\">)</span>\n<span class=\"n\">cron_reader</span><span class=\"o\">.</span><span class=\"n\">seek_head</span><span class=\"p\">()</span>\n<span class=\"n\">cron_reader</span><span class=\"o\">.</span><span class=\"n\">add_filter</span><span class=\"p\">(</span><span class=\"n\">rules</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">cron_reader</span><span class=\"p\">:</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'MESSAGE'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"polling-records\">\n<h4><a href=\"#id13\" rel=\"nofollow\">Polling records</a></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysystemd.reader</span> <span class=\"kn\">import</span> <span class=\"n\">JournalReader</span><span class=\"p\">,</span> <span class=\"n\">JournalOpenMode</span>\n\n\n<span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">JournalReader</span><span class=\"p\">()</span>\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">JournalOpenMode</span><span class=\"o\">.</span><span class=\"n\">SYSTEM</span><span class=\"p\">)</span>\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">seek_tail</span><span class=\"p\">()</span>\n\n<span class=\"n\">poll_timeout</span> <span class=\"o\">=</span> <span class=\"mi\">255</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n   <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">poll_timeout</span><span class=\"p\">)</span>\n\n   <span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n      <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'MESSAGE'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"journald-open-modes\">\n<h4><a href=\"#id14\" rel=\"nofollow\">JournalD open modes</a></h4>\n<ul>\n<li>CURRENT_USER</li>\n<li>LOCAL_ONLY</li>\n<li>RUNTIME_ONLY</li>\n<li>SYSTEM</li>\n<li>SYSTEM_ONLY</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysystemd.reader</span> <span class=\"kn\">import</span> <span class=\"n\">JournalReader</span><span class=\"p\">,</span> <span class=\"n\">JournalOpenMode</span>\n\n<span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">JournalReader</span><span class=\"p\">()</span>\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">JournalOpenMode</span><span class=\"o\">.</span><span class=\"n\">CURRENT_USER</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"journald-entry\">\n<h4><a href=\"#id15\" rel=\"nofollow\">JournalD entry</a></h4>\n<p>JournalEntry class has some special properties and methods:</p>\n<ul>\n<li><tt>data</tt> - journal entry content (<tt>dict</tt>)</li>\n<li><tt>date</tt> - entry timestamp (<tt>datetime</tt> instance)</li>\n<li><tt>cursor</tt> - systemd identification bytes for this entry</li>\n<li><tt>boot_id()</tt> - returns bootid</li>\n<li><tt>get_realtime_sec()</tt> - entry epoch (<tt>float</tt>)</li>\n<li><tt>get_realtime_usec()</tt> - entry epoch (<tt>int</tt> microseconds)</li>\n<li><tt>get_monotonic_sec()</tt> - entry monotonic time (<tt>float</tt>)</li>\n<li><tt>get_monotonic_usec()</tt> - entry monotonic time (<tt>int</tt> microseconds)</li>\n<li><tt>__getitem__(key)</tt> - shoutcut for <tt>entry.data[key]</tt></li>\n</ul>\n</div>\n<div id=\"journald-reader\">\n<h4><a href=\"#id16\" rel=\"nofollow\">JournalD reader</a></h4>\n<p>JournalReader class has some special properties and methods:</p>\n<ul>\n<li><tt>open(flags=JournalOpenMode.CURRENT_USER)</tt> - opening journald\nwith selected mode</li>\n<li><tt>open_directory(path)</tt> - opening journald from path</li>\n<li><tt><span class=\"pre\">open_files(*filename)</span></tt> - opening journald from files</li>\n<li><tt>data_threshold</tt> - may be used to get or set the data field size threshold\nfor data returned by fething entry data.</li>\n<li><tt>closed</tt> - returns True when journal reader closed</li>\n<li><tt>locked</tt> - returns True when journal reader locked</li>\n<li><tt>idle</tt> - returns True when journal reader opened</li>\n<li><tt>seek_head</tt> - move reader pointer to the first entry</li>\n<li><tt>seek_tail</tt> - move reader pointer to the last entry</li>\n<li><tt>seek_monotonic_usec</tt> - seeks to the entry with the specified monotonic\ntimestamp, i.e. CLOCK_MONOTONIC. Since monotonic time restarts on every\nreboot a boot ID needs to be specified as well.</li>\n<li><tt>seek_realtime_usec</tt> - seeks to the entry with the specified realtime\n(wallclock) timestamp, i.e. CLOCK_REALTIME. Note that the realtime clock\nis not necessarily monotonic. If a realtime timestamp is ambiguous, it is\nnot defined which position is sought to.</li>\n<li><tt>seek_cursor</tt> - seeks to the entry located at the specified cursor\n(see <tt>JournalEntry.cursor</tt>).</li>\n<li><tt>wait(timeout)</tt> - It will synchronously wait until the journal gets\nchanged. The maximum time this call sleeps may be controlled with the\ntimeout_usec parameter.</li>\n<li><tt>__iter__</tt> - returns JournalReader object</li>\n<li><tt>__next__</tt> - calls <tt>next()</tt> or raise <tt>StopIteration</tt></li>\n<li><tt>next(skip=0)</tt> - returns the next <tt>JournalEntry</tt>. The <tt>skip</tt>\nparameter skips some entries.</li>\n<li><tt>previous(skip=0)</tt> - returns the previous <tt>JournalEntry</tt>.\nThe <tt>skip</tt> parameter skips some entries.</li>\n<li><tt>skip_next(skip)</tt> - skips next entries.</li>\n<li><tt>skip_previous(skip)</tt> - skips next entries.</li>\n<li><tt>add_filter(rule)</tt> - adding filter rule.\nSee <a href=\"#id1\" rel=\"nofollow\">read-only-cron-logs</a> as example.</li>\n<li><tt>clear_filter</tt> - reset all filters</li>\n<li><tt>fd</tt> - returns a special file descriptor</li>\n<li><tt>events</tt> - returns <tt>EPOLL</tt> events</li>\n<li><tt>timeout</tt> - returns internal timeout</li>\n<li><tt>process_events()</tt> - After each poll() wake-up process_events() needs\nto be called to process events. This call will also indicate what kind of\nchange has been detected.</li>\n<li><tt>get_catalog()</tt> - retrieves a message catalog entry for the current\njournal entry. This will look up an entry in the message catalog by using\nthe \u201cMESSAGE_ID=\u201d field of the current journal entry. Before returning\nthe entry all journal field names in the catalog entry text enclosed in\n\u201c@\u201d will be replaced by the respective field values of the current entry.\nIf a field name referenced in the message catalog entry does not exist,\nin the current journal entry, the \u201c@\u201d will be removed, but the field name\notherwise left untouched.</li>\n<li><tt>get_catalog_for_message_id(message_id: UUID)</tt> - works similar to\n<tt>get_catalog()</tt> but the entry is looked up by the specified\nmessage ID (no open journal context is necessary for this),\nand no field substitution is performed.</li>\n</ul>\n</div>\n</div>\n<div id=\"asyncio-support\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Asyncio support</a></h3>\n<p>Initial <tt>asyncio</tt> support for reading journal asynchronously.</p>\n<div id=\"asyncjournalreader\">\n<h4><a href=\"#id18\" rel=\"nofollow\">AsyncJournalReader</a></h4>\n<p>Blocking methods were wrapped by threads.\nMethod <tt>wait()</tt> use epoll on journald file descriptor.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">cysystemd.reader</span> <span class=\"kn\">import</span> <span class=\"n\">JournalOpenMode</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cysystemd.async_reader</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncJournalReader</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">AsyncJournalReader</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">JournalOpenMode</span><span class=\"o\">.</span><span class=\"n\">SYSTEM</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">seek_tail</span><span class=\"p\">()</span>\n\n    <span class=\"k\">while</span> <span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">():</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span>\n                <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span>\n                    <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                    <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                    <span class=\"n\">sort_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7012835, "releases": {"0.16.2": [{"comment_text": "", "digests": {"md5": "45be55d9846db5206de812612df0fa03", "sha256": "7b84bb3cf9b4b692ea77a197ba2696a4b4f286f7699508d8f88d6ad20b9037d3"}, "downloads": -1, "filename": "cysystemd-0.16.2.tar.gz", "has_sig": false, "md5_digest": "45be55d9846db5206de812612df0fa03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 170814, "upload_time": "2018-09-06T19:15:16", "upload_time_iso_8601": "2018-09-06T19:15:16.508692Z", "url": "https://files.pythonhosted.org/packages/c6/35/3ea53f8ee1662c1a7a16208e4f266c6ff56f403aae95efa49847ea67c9a2/cysystemd-0.16.2.tar.gz", "yanked": false}], "0.17.1": [{"comment_text": "", "digests": {"md5": "5ef062b922275ea2994cdf63aab85266", "sha256": "04941a73cb0fe214b4c9ab032e81da1a0d28a4f932404ec89514865bd52f9a77"}, "downloads": -1, "filename": "cysystemd-0.17.1.tar.gz", "has_sig": false, "md5_digest": "5ef062b922275ea2994cdf63aab85266", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 169887, "upload_time": "2018-09-06T20:59:59", "upload_time_iso_8601": "2018-09-06T20:59:59.817248Z", "url": "https://files.pythonhosted.org/packages/54/39/994eec23f5f421577f9e7bea674c2dc377bc4805c65bfb20fecc5c580538/cysystemd-0.17.1.tar.gz", "yanked": false}], "0.17.2": [{"comment_text": "", "digests": {"md5": "9e1d44edecba1ada9371acf9d39171d7", "sha256": "7da8b39781f3d636594070319b08afa2ec6689e2f433cc68c854fd83916b1cf9"}, "downloads": -1, "filename": "cysystemd-0.17.2.tar.gz", "has_sig": false, "md5_digest": "9e1d44edecba1ada9371acf9d39171d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 175368, "upload_time": "2018-10-27T20:57:31", "upload_time_iso_8601": "2018-10-27T20:57:31.990746Z", "url": "https://files.pythonhosted.org/packages/dd/9d/b2a7365b4b7ddd991ebddbe8fb17aa0bcee9fdbcab7deabc9afb9b4528b1/cysystemd-0.17.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "0f8d02e6702382af034b1b5989a7160a", "sha256": "d053dfa809a5e84520a9d650c741bee48f127f25bb9dd4ac87206ac318c1edd9"}, "downloads": -1, "filename": "cysystemd-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0f8d02e6702382af034b1b5989a7160a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 193228, "upload_time": "2018-11-24T12:45:22", "upload_time_iso_8601": "2018-11-24T12:45:22.100851Z", "url": "https://files.pythonhosted.org/packages/b7/64/9ab14a4682c39a5be35d99743f86a9d1b0c8955217bb7957d6af910e880a/cysystemd-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "858465d1cb2d47f8c80bff355c14f154", "sha256": "b4de9515d7b295914f3132e2eeb652d32f140c2919efc5e29f0dd770be0dda04"}, "downloads": -1, "filename": "cysystemd-1.1.1.tar.gz", "has_sig": false, "md5_digest": "858465d1cb2d47f8c80bff355c14f154", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 192144, "upload_time": "2019-02-18T13:23:58", "upload_time_iso_8601": "2019-02-18T13:23:58.502787Z", "url": "https://files.pythonhosted.org/packages/e2/1e/f11e985e99ed3a6ce1804663aac84205c72c287d4070ee55ee02f470da3d/cysystemd-1.1.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "df78aeb76136b7d15314b9e4a01424ed", "sha256": "4304f19f5f1ffd4328ede63df984dd4cdbf3f1369380a4ada58a384405e0f1df"}, "downloads": -1, "filename": "cysystemd-1.3.2.tar.gz", "has_sig": false, "md5_digest": "df78aeb76136b7d15314b9e4a01424ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194055, "upload_time": "2020-04-13T21:13:26", "upload_time_iso_8601": "2020-04-13T21:13:26.402996Z", "url": "https://files.pythonhosted.org/packages/14/0e/616dfd467fc200e52a1a7cd7ab2d81d1154189d8f585cb8d0e2da3bc260a/cysystemd-1.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df78aeb76136b7d15314b9e4a01424ed", "sha256": "4304f19f5f1ffd4328ede63df984dd4cdbf3f1369380a4ada58a384405e0f1df"}, "downloads": -1, "filename": "cysystemd-1.3.2.tar.gz", "has_sig": false, "md5_digest": "df78aeb76136b7d15314b9e4a01424ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194055, "upload_time": "2020-04-13T21:13:26", "upload_time_iso_8601": "2020-04-13T21:13:26.402996Z", "url": "https://files.pythonhosted.org/packages/14/0e/616dfd467fc200e52a1a7cd7ab2d81d1154189d8f585cb8d0e2da3bc260a/cysystemd-1.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:03 2020"}