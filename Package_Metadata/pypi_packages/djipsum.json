{"info": {"author": "Agus Makmun (Summon Agus)", "author_email": "agus@python.web.id", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "Djipsum\n====================================\n\n.. image:: https://img.shields.io/pypi/v/djipsum.svg?style=flat-square&label=version\n   :target: https://pypi.python.org/pypi/djipsum\n\n.. image:: https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\n   :target: https://raw.githubusercontent.com/agusmakmun/djipsum/master/LICENSE\n\n.. image:: https://img.shields.io/pypi/pyversions/djipsum.svg?style=flat-square\n   :target: https://github.com/agusmakmun/djipsum\n\n.. image:: https://img.shields.io/pypi/dm/djipsum.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/djipsum\n\n\nDjango Lorem Ipsum Generator - Command plugin to generate (fake content data) for Django model, and uses `Faker Factory`_ package for API Faker Model.\n\n.. image:: http://i.imgur.com/8vg0KoC.png\n\n\nInstall\n----------------------\n\nDjipsum is available directly from `PyPI`_:\n\n::\n\n    $ pip install djipsum\n\n\n***).** And don't forget to add ``djipsum`` to your ``INSTALLED_APPS`` setting `(without migrations)`.\n\n\nRequirements\n----------------------\n\n* ``Django>=1.10.1``\n* ``Faker>=0.7.3``\n\n\nUsage\n----------------------\n\n::\n\n    usage: djipsum -h [-h] [-dv] [-auto] [-cg CUSTOM_GENERATOR]\n                      [--app APP] [--model MODEL] [--max MAX]\n\n    To generate awesome lorem ipsum for your model!\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -dv, --djipsum_version\n                            Show djipsum version number and exit.\n      -auto, --auto_gen     Automatic generate lorem ipsum from custom generator\n                            class.\n      -cg, --custom_generator CUSTOM_GENERATOR\n                            Custom a function generator (full path) for auto-gen.\n      --app APP             The app name.\n      --model MODEL         The model class name.\n      --max MAX             Maximum generate lorem ipsum.\n\n\nExample\n----------------------\n\n::\n\n    # Default 10 objects\n    $ ./manage.py djipsum --app testapp --model TestField\n\n    # Custom Maximum objects\n    $ ./manage.py djipsum --app testapp --model TestField --max=5\n\n\nAPI\n----------------------\n\nThe Djipsum Faker Model providing additional library from `Faker Factory`_ for more than efficient to use.\n\n**1. Basic API**\n\n::\n\n    >>> from djipsum.faker import FakerModel\n    >>> faker = FakerModel(app='app_name', model='ModelName')\n    >>> faker.fake_email() # From Djipsum\n    'admin@gmail.com'\n    >>> faker.fake.email() # From Faker Factory\n    'smithadrian@hotmail.com'\n    >>>\n\n**2. Example API Usage**\n\n::\n\n    >>> from djipsum.faker import FakerModel\n    >>> faker = FakerModel(app='app_blog', model='Post')\n    >>> for _ in range(2):\n    ...     fields = {\n    ...         'user': faker.fake_relations(\n    ...             type='fk',\n    ...             field_name='user'\n    ...         ),\n    ...         'title': faker.fake.text(max_nb_chars=100),\n    ...         'slug': faker.fake.slug(\n    ...             faker.fake.text(max_nb_chars=50)\n    ...         ),\n    ...         'categories': faker.fake_relations(\n    ...             type='m2m',\n    ...             field_name='categories'\n    ...         ),\n    ...         'description': ' '.join(faker.fake.paragraphs()),\n    ...         'created': str(faker.fake.date_time()),\n    ...         'publish': faker.fake_boolean(),\n    ...     }\n    ...     faker.create(fields)\n    ...\n    <Post: Sit sunt nam aperiam ratione consequatur. Animi cupiditate atque totam.>\n    <Post: Tempora porro sint quasi nisi totam doloremque repellat. Ducimus nesciunt impedit animi.>\n    >>>\n\n\n**3. Using custom Management command**\n\nThis an example to create custom special faker file as a tool for unittests.\nFor example i need to save this script into file of ``app_blog.blogfaker.py``\n\n::\n\n    from djipsum.faker import FakerModel\n\n\n    def postfaker(maximum=10):\n        \"\"\"\n        Sample custom generator.\n        Djipsum already handled with `--max` command.\n        But, recomended to set default integer `maximum` like above.\n        \"\"\"\n        faker = FakerModel(\n            app='app_blog',\n            model='Post'\n        )\n        object_list = [] # for print out after created the objects.\n\n        for _ in range(maximum):\n            fields = {\n                'user': faker.fake_relations(\n                    type='fk',\n                    field_name='user'\n                ),\n                'title': faker.fake.text(max_nb_chars=100),\n                'slug': faker.fake.slug(\n                    faker.fake.text(max_nb_chars=50)\n                ),\n                'categories': faker.fake_relations(\n                    type='m2m',\n                    field_name='categories'\n                ),\n                'description': ' '.join(faker.fake.paragraphs()),\n                'created': str(faker.fake.date_time()),\n                'publish': faker.fake_boolean(),\n            }\n            instance = faker.create(fields)\n            object_list.append(instance)\n        return object_list\n\n\nAnd then, you also can access it via djipsum command such as below. This should be create **2** objects.\n\n::\n\n    ./manage.py djipsum --auto_gen --custom_generator=app_blog.blogfaker.postfaker --max=2\n\n    # OR\n\n    ./manage.py djipsum -auto -cg=app_blog.blogfaker.postfaker --max=2\n\n\n\nSupported Fields\n----------------------\n\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| Char Types                    | Integer/Float Types        | Relationship Types       | Other Types        |\n+===============================+============================+==========================+====================+\n| CharField                     | IntegerField               | ForeignKey               | BinaryField        |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| TextField                     | SmallIntegerField          | ManyToManyField          | DurationField      |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| EmailField                    | BigIntegerField            | OneToOneField (not yet)  | BooleanField       |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| SlugField                     | DecimalField               | OneToManyField (not yet) | NullBooleanField   |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| URLField                      | PositiveIntegerField       |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| UUIDField                     | FloatField                 |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| GenericIPAddressField         | PositiveSmallIntegerField  |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| CommaSeparatedIntegerField    |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| DateTimeField                 |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| DateField                     |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| TimeField                     |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| ImageField                    |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| FileField                     |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| FilePathField (not yet)       |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n\n\nRefference Faker Model Fields\n-------------------------------\n\n``fake = <faker.generator.Generator object>``\n    Providing the package from Faker Factory.\n\n``djipsum_fields(self)``\n    Extended from class ``DjipsumFields`` for some special fields.\n\n``fake_binary(self)``\n    Return random binary format.\n    Faker Factory also provide about this binary.\n\n    **Example:**\n\n    ``b\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"``, ``b\"\\x0b\\x0c\\x0e\\x0f\"``, etc.\n\n    - from Djipsum\n        ``faker.fake_binary()``\n\n    - from Faker Factory\n        ``faker.fake.binary(length=10)``\n\n``fake_chars_or_choice(self, field_name)``\n    Return fake chars or choice it if the ``field_name`` has choices.\n    Then, returning random value from it. This specially for ``CharField``.\n\n    **Usage:**\n\n    ``faker.fake_chars_or_choice('field_name')``\n\n    **Example for field:**\n\n    ::\n\n        TYPE_CHOICES = (\n          ('project', 'I wanna to talk about project'),\n          ('feedback', 'I want to report a bugs or give feedback'),\n          ('hello', 'I just want to say hello')\n        )\n        type = models.CharField(max_length=200, choices=TYPE_CHOICES)\n\n``fake_comma_separated_integer(self)``\n    Return the unique integers in the string.\n    This specially for ``CommaSeparatedIntegerField``.\n\n    **Example:**\n\n    ``'6,1,7'``, ``'4,5,1,3,2'``, ``'2,7,9,3,5,4,1'``\n\n``fake_decimal(self, field_name)``\n    Validate if the field has a ``max_digits`` and ``decimal_places``\n    And generating the unique decimal number.\n\n    **Usage:**\n\n    ``faker.fake_decimal('field_name')``\n\n    **Example:**\n\n    ``10.7``, ``13041.00``, ``200.000.000``\n\n``fake_boolean(self)``\n    **Example:**\n\n    ``True, False``\n\n``fake_null_boolean(self)``\n    Faker Factory also provide about this null boolean.\n\n    **Example:**\n\n    ``None``, ``True``, ``False``\n\n    - from Djipsum\n        ``faker.fake_null_boolean()``\n\n    - from Faker Factory\n        ``faker.fake.null_boolean()``\n\n``fake_float(self)``\n    **Example:**\n\n    ``0.69``, ``20.55``, ``98.12``\n\n``fake_email(self)``\n    Faker Factory also provide about this email.\n\n    **Example:**\n\n    ``'agus@python.web.id'``, ``'sample@gmail.com'``, ``'hello@yahoo.com'``\n\n    - from Djipsum\n        ``faker.fake_email()``\n\n    - from Faker Factory\n        ``faker.fake.email()``\n\n``fake_file(self)``\n    Return string name of file.\n    Faker Factory also provide about this file.\n\n    **Example:**\n\n    ``'file.zip'``, ``'awesomefile.tar.gz'``, ``'samplefile.docx'``, ``'djipsum.pdf'``\n\n    - from Djipsum\n        ``faker.fake_file()``\n\n    - from Faker Factory\n        ``faker.fake.file_name()``\n\n``fake_image(self)``\n    Return string name of image.\n\n    **Example:**\n\n    ``'avatar.jpg'``, ``'djipsum.jpeg'``, ``'sampleimage.png'``, ``'awesome_django.gif'``\n\n``fake_ipaddress(self)``\n    Faker Factory also provide about this ipaddress,\n    such as ipv4, ipv6, ...etc\n\n    **Example:**\n\n    ``'192.168.1.1'``, ``'66.249.65.54'``, ``'255.255.255.0'``, ``'2001:db8:a0b:12f0::1'``\n\n    - from Djipsum\n        ``faker.fake_ipaddress()``\n\n    - from Faker Factory\n        ``faker.fake.ipv4()``, ``faker.fake.ipv6()``\n\n``fake_slug(self)``\n    Optionall unique slug with ``uuid`` to handle ``unique=True``.\n    Faker Factory also provide about this slug.\n\n    **Example:**\n\n    ``this-my-slug``, ``hello-world-93daf03138dsa0``\n\n    - from Djipsum\n        ``faker.fake_slug()``\n\n    - from Faker Factory\n        ``faker.fake.slug(faker.fake.text(max_nb_chars=50))``\n\n``fake_paragraphs(self)``\n    Generate the paragraphs for ``TextField``.\n    Faker Factory also provide about this paragraphs.\n\n    **Example:**\n\n    - from Djipsum\n        ``faker.fake_paragraphs()``\n\n    - from Faker Factory\n        ``' '.join(faker.fake.paragraphs())``\n\n``fake_url(self)``\n    Generate the url for ``URLField``.\n    Faker Factory also provide about this url.\n\n    **Example:**\n\n    ``https://python.web.id``, ``http://dracos-linux.org``\n\n    - from Djipsum\n        ``faker.fake_url()``\n\n    - from Faker Factory\n        ``faker.fake.url()``\n\n``fake_uuid(self)``\n    Generate the unique uuid\n    from ``uuid1``, ``uuid3``, ``uuid4``, or ``uuid5``.\n\n    **Example:**\n\n    ``fb3d6e7f82db47dcaaca46bdd82b24a5``, ``886313e13b8a53729b900c9aee199e5d``\n\n``fake_relations(self, type, field_name)``\n    Return the dictionary of object/s relation\n    to process the Relationship.\n\n    **Example:**\n\n    - Foreign Key:\n        ``faker.fake_relations(type='fk', field_name='author')``\n\n    - Many To Many:\n        ``faker.fake_relations(type='m2m', field_name='categories')``\n\nLicense\n----------------------\n\n- `MIT`_\n\n\n.. _PyPI: https://pypi.python.org/pypi/djipsum\n.. _MIT: https://github.com/agusmakmun/djipsum/blob/master/LICENSE\n.. _Faker Factory: https://github.com/joke2k/faker\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/agusmakmun/djipsum/tarball/v1.1.5", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/agusmakmun/djipsum/", "keywords": "djipsum", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "djipsum", "package_url": "https://pypi.org/project/djipsum/", "platform": "", "project_url": "https://pypi.org/project/djipsum/", "project_urls": {"Download": "https://github.com/agusmakmun/djipsum/tarball/v1.1.5", "Homepage": "https://github.com/agusmakmun/djipsum/"}, "release_url": "https://pypi.org/project/djipsum/1.1.5/", "requires_dist": null, "requires_python": "", "summary": "Django Lorem Ipsum Generator - Command plugin to generate (fake content data) for Django model.", "version": "1.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/djipsum\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/djipsum.svg?style=flat-square&amp;label=version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2c735ce9843a56692febe6851091170faef19b1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a697073756d2e7376673f7374796c653d666c61742d737175617265266c6162656c3d76657273696f6e\"></a>\n<a href=\"https://raw.githubusercontent.com/agusmakmun/djipsum/master/LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d01dca179e5892f8f0e2e136225f10faa1ca41f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/agusmakmun/djipsum\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/djipsum.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd1504901b9687b90378b8862d4ae67f8e8e9a72/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a697073756d2e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.python.org/pypi/djipsum\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/djipsum.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73640ff7abf481de7019ea6b3f3d7b1207c80ae1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f646a697073756d2e7376673f7374796c653d666c61742d737175617265\"></a>\n<p>Django Lorem Ipsum Generator - Command plugin to generate (fake content data) for Django model, and uses <a href=\"https://github.com/joke2k/faker\" rel=\"nofollow\">Faker Factory</a> package for API Faker Model.</p>\n<img alt=\"http://i.imgur.com/8vg0KoC.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb908f30755f20a4700b2fb9ccf19756b68594ba/687474703a2f2f692e696d6775722e636f6d2f387667304b6f432e706e67\">\n<div id=\"install\">\n<h2>Install</h2>\n<p>Djipsum is available directly from <a href=\"https://pypi.python.org/pypi/djipsum\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install djipsum\n</pre>\n<p><strong>*).</strong> And don\u2019t forget to add <tt>djipsum</tt> to your <tt>INSTALLED_APPS</tt> setting <cite>(without migrations)</cite>.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li><tt><span class=\"pre\">Django&gt;=1.10.1</span></tt></li>\n<li><tt><span class=\"pre\">Faker&gt;=0.7.3</span></tt></li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>usage: djipsum -h [-h] [-dv] [-auto] [-cg CUSTOM_GENERATOR]\n                  [--app APP] [--model MODEL] [--max MAX]\n\nTo generate awesome lorem ipsum for your model!\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -dv, --djipsum_version\n                        Show djipsum version number and exit.\n  -auto, --auto_gen     Automatic generate lorem ipsum from custom generator\n                        class.\n  -cg, --custom_generator CUSTOM_GENERATOR\n                        Custom a function generator (full path) for auto-gen.\n  --app APP             The app name.\n  --model MODEL         The model class name.\n  --max MAX             Maximum generate lorem ipsum.\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre># Default 10 objects\n$ ./manage.py djipsum --app testapp --model TestField\n\n# Custom Maximum objects\n$ ./manage.py djipsum --app testapp --model TestField --max=5\n</pre>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>The Djipsum Faker Model providing additional library from <a href=\"https://github.com/joke2k/faker\" rel=\"nofollow\">Faker Factory</a> for more than efficient to use.</p>\n<p><strong>1. Basic API</strong></p>\n<pre>&gt;&gt;&gt; from djipsum.faker import FakerModel\n&gt;&gt;&gt; faker = FakerModel(app='app_name', model='ModelName')\n&gt;&gt;&gt; faker.fake_email() # From Djipsum\n'admin@gmail.com'\n&gt;&gt;&gt; faker.fake.email() # From Faker Factory\n'smithadrian@hotmail.com'\n&gt;&gt;&gt;\n</pre>\n<p><strong>2. Example API Usage</strong></p>\n<pre>&gt;&gt;&gt; from djipsum.faker import FakerModel\n&gt;&gt;&gt; faker = FakerModel(app='app_blog', model='Post')\n&gt;&gt;&gt; for _ in range(2):\n...     fields = {\n...         'user': faker.fake_relations(\n...             type='fk',\n...             field_name='user'\n...         ),\n...         'title': faker.fake.text(max_nb_chars=100),\n...         'slug': faker.fake.slug(\n...             faker.fake.text(max_nb_chars=50)\n...         ),\n...         'categories': faker.fake_relations(\n...             type='m2m',\n...             field_name='categories'\n...         ),\n...         'description': ' '.join(faker.fake.paragraphs()),\n...         'created': str(faker.fake.date_time()),\n...         'publish': faker.fake_boolean(),\n...     }\n...     faker.create(fields)\n...\n&lt;Post: Sit sunt nam aperiam ratione consequatur. Animi cupiditate atque totam.&gt;\n&lt;Post: Tempora porro sint quasi nisi totam doloremque repellat. Ducimus nesciunt impedit animi.&gt;\n&gt;&gt;&gt;\n</pre>\n<p><strong>3. Using custom Management command</strong></p>\n<p>This an example to create custom special faker file as a tool for unittests.\nFor example i need to save this script into file of <tt>app_blog.blogfaker.py</tt></p>\n<pre>from djipsum.faker import FakerModel\n\n\ndef postfaker(maximum=10):\n    \"\"\"\n    Sample custom generator.\n    Djipsum already handled with `--max` command.\n    But, recomended to set default integer `maximum` like above.\n    \"\"\"\n    faker = FakerModel(\n        app='app_blog',\n        model='Post'\n    )\n    object_list = [] # for print out after created the objects.\n\n    for _ in range(maximum):\n        fields = {\n            'user': faker.fake_relations(\n                type='fk',\n                field_name='user'\n            ),\n            'title': faker.fake.text(max_nb_chars=100),\n            'slug': faker.fake.slug(\n                faker.fake.text(max_nb_chars=50)\n            ),\n            'categories': faker.fake_relations(\n                type='m2m',\n                field_name='categories'\n            ),\n            'description': ' '.join(faker.fake.paragraphs()),\n            'created': str(faker.fake.date_time()),\n            'publish': faker.fake_boolean(),\n        }\n        instance = faker.create(fields)\n        object_list.append(instance)\n    return object_list\n</pre>\n<p>And then, you also can access it via djipsum command such as below. This should be create <strong>2</strong> objects.</p>\n<pre>./manage.py djipsum --auto_gen --custom_generator=app_blog.blogfaker.postfaker --max=2\n\n# OR\n\n./manage.py djipsum -auto -cg=app_blog.blogfaker.postfaker --max=2\n</pre>\n</div>\n<div id=\"supported-fields\">\n<h2>Supported Fields</h2>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Char Types</th>\n<th>Integer/Float Types</th>\n<th>Relationship Types</th>\n<th>Other Types</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>CharField</td>\n<td>IntegerField</td>\n<td>ForeignKey</td>\n<td>BinaryField</td>\n</tr>\n<tr><td>TextField</td>\n<td>SmallIntegerField</td>\n<td>ManyToManyField</td>\n<td>DurationField</td>\n</tr>\n<tr><td>EmailField</td>\n<td>BigIntegerField</td>\n<td>OneToOneField (not yet)</td>\n<td>BooleanField</td>\n</tr>\n<tr><td>SlugField</td>\n<td>DecimalField</td>\n<td>OneToManyField (not yet)</td>\n<td>NullBooleanField</td>\n</tr>\n<tr><td>URLField</td>\n<td>PositiveIntegerField</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>UUIDField</td>\n<td>FloatField</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>GenericIPAddressField</td>\n<td>PositiveSmallIntegerField</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>CommaSeparatedIntegerField</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>DateTimeField</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>DateField</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>TimeField</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>ImageField</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>FileField</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>FilePathField (not yet)</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"refference-faker-model-fields\">\n<h2>Refference Faker Model Fields</h2>\n<dl>\n<dt><tt>fake = &lt;faker.generator.Generator object&gt;</tt></dt>\n<dd>Providing the package from Faker Factory.</dd>\n<dt><tt>djipsum_fields(self)</tt></dt>\n<dd>Extended from class <tt>DjipsumFields</tt> for some special fields.</dd>\n<dt><tt>fake_binary(self)</tt></dt>\n<dd><p>Return random binary format.\nFaker Factory also provide about this binary.</p>\n<p><strong>Example:</strong></p>\n<p><tt><span class=\"pre\">b\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"</span></tt>, <tt><span class=\"pre\">b\"\\x0b\\x0c\\x0e\\x0f\"</span></tt>, etc.</p>\n<ul>\n<li><dl>\n<dt>from Djipsum</dt>\n<dd><tt>faker.fake_binary()</tt></dd>\n</dl>\n</li>\n<li><dl>\n<dt>from Faker Factory</dt>\n<dd><tt>faker.fake.binary(length=10)</tt></dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt><tt>fake_chars_or_choice(self, field_name)</tt></dt>\n<dd><p>Return fake chars or choice it if the <tt>field_name</tt> has choices.\nThen, returning random value from it. This specially for <tt>CharField</tt>.</p>\n<p><strong>Usage:</strong></p>\n<p><tt><span class=\"pre\">faker.fake_chars_or_choice('field_name')</span></tt></p>\n<p><strong>Example for field:</strong></p>\n<pre>TYPE_CHOICES = (\n  ('project', 'I wanna to talk about project'),\n  ('feedback', 'I want to report a bugs or give feedback'),\n  ('hello', 'I just want to say hello')\n)\ntype = models.CharField(max_length=200, choices=TYPE_CHOICES)\n</pre>\n</dd>\n<dt><tt>fake_comma_separated_integer(self)</tt></dt>\n<dd><p>Return the unique integers in the string.\nThis specially for <tt>CommaSeparatedIntegerField</tt>.</p>\n<p><strong>Example:</strong></p>\n<p><tt>'6,1,7'</tt>, <tt>'4,5,1,3,2'</tt>, <tt>'2,7,9,3,5,4,1'</tt></p>\n</dd>\n<dt><tt>fake_decimal(self, field_name)</tt></dt>\n<dd><p>Validate if the field has a <tt>max_digits</tt> and <tt>decimal_places</tt>\nAnd generating the unique decimal number.</p>\n<p><strong>Usage:</strong></p>\n<p><tt><span class=\"pre\">faker.fake_decimal('field_name')</span></tt></p>\n<p><strong>Example:</strong></p>\n<p><tt>10.7</tt>, <tt>13041.00</tt>, <tt>200.000.000</tt></p>\n</dd>\n<dt><tt>fake_boolean(self)</tt></dt>\n<dd><p><strong>Example:</strong></p>\n<p><tt>True, False</tt></p>\n</dd>\n<dt><tt>fake_null_boolean(self)</tt></dt>\n<dd><p>Faker Factory also provide about this null boolean.</p>\n<p><strong>Example:</strong></p>\n<p><tt>None</tt>, <tt>True</tt>, <tt>False</tt></p>\n<ul>\n<li><dl>\n<dt>from Djipsum</dt>\n<dd><tt>faker.fake_null_boolean()</tt></dd>\n</dl>\n</li>\n<li><dl>\n<dt>from Faker Factory</dt>\n<dd><tt>faker.fake.null_boolean()</tt></dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt><tt>fake_float(self)</tt></dt>\n<dd><p><strong>Example:</strong></p>\n<p><tt>0.69</tt>, <tt>20.55</tt>, <tt>98.12</tt></p>\n</dd>\n<dt><tt>fake_email(self)</tt></dt>\n<dd><p>Faker Factory also provide about this email.</p>\n<p><strong>Example:</strong></p>\n<p><tt>'agus@python.web.id'</tt>, <tt>'sample@gmail.com'</tt>, <tt>'hello@yahoo.com'</tt></p>\n<ul>\n<li><dl>\n<dt>from Djipsum</dt>\n<dd><tt>faker.fake_email()</tt></dd>\n</dl>\n</li>\n<li><dl>\n<dt>from Faker Factory</dt>\n<dd><tt>faker.fake.email()</tt></dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt><tt>fake_file(self)</tt></dt>\n<dd><p>Return string name of file.\nFaker Factory also provide about this file.</p>\n<p><strong>Example:</strong></p>\n<p><tt>'file.zip'</tt>, <tt>'awesomefile.tar.gz'</tt>, <tt>'samplefile.docx'</tt>, <tt>'djipsum.pdf'</tt></p>\n<ul>\n<li><dl>\n<dt>from Djipsum</dt>\n<dd><tt>faker.fake_file()</tt></dd>\n</dl>\n</li>\n<li><dl>\n<dt>from Faker Factory</dt>\n<dd><tt>faker.fake.file_name()</tt></dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt><tt>fake_image(self)</tt></dt>\n<dd><p>Return string name of image.</p>\n<p><strong>Example:</strong></p>\n<p><tt>'avatar.jpg'</tt>, <tt>'djipsum.jpeg'</tt>, <tt>'sampleimage.png'</tt>, <tt>'awesome_django.gif'</tt></p>\n</dd>\n<dt><tt>fake_ipaddress(self)</tt></dt>\n<dd><p>Faker Factory also provide about this ipaddress,\nsuch as ipv4, ipv6, \u2026etc</p>\n<p><strong>Example:</strong></p>\n<p><tt>'192.168.1.1'</tt>, <tt>'66.249.65.54'</tt>, <tt>'255.255.255.0'</tt>, <tt><span class=\"pre\">'2001:db8:a0b:12f0::1'</span></tt></p>\n<ul>\n<li><dl>\n<dt>from Djipsum</dt>\n<dd><tt>faker.fake_ipaddress()</tt></dd>\n</dl>\n</li>\n<li><dl>\n<dt>from Faker Factory</dt>\n<dd><tt>faker.fake.ipv4()</tt>, <tt>faker.fake.ipv6()</tt></dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt><tt>fake_slug(self)</tt></dt>\n<dd><p>Optionall unique slug with <tt>uuid</tt> to handle <tt>unique=True</tt>.\nFaker Factory also provide about this slug.</p>\n<p><strong>Example:</strong></p>\n<p><tt><span class=\"pre\">this-my-slug</span></tt>, <tt><span class=\"pre\">hello-world-93daf03138dsa0</span></tt></p>\n<ul>\n<li><dl>\n<dt>from Djipsum</dt>\n<dd><tt>faker.fake_slug()</tt></dd>\n</dl>\n</li>\n<li><dl>\n<dt>from Faker Factory</dt>\n<dd><tt>faker.fake.slug(faker.fake.text(max_nb_chars=50))</tt></dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt><tt>fake_paragraphs(self)</tt></dt>\n<dd><p>Generate the paragraphs for <tt>TextField</tt>.\nFaker Factory also provide about this paragraphs.</p>\n<p><strong>Example:</strong></p>\n<ul>\n<li><dl>\n<dt>from Djipsum</dt>\n<dd><tt>faker.fake_paragraphs()</tt></dd>\n</dl>\n</li>\n<li><dl>\n<dt>from Faker Factory</dt>\n<dd><tt>' <span class=\"pre\">'.join(faker.fake.paragraphs())</span></tt></dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt><tt>fake_url(self)</tt></dt>\n<dd><p>Generate the url for <tt>URLField</tt>.\nFaker Factory also provide about this url.</p>\n<p><strong>Example:</strong></p>\n<p><tt><span class=\"pre\">https://python.web.id</span></tt>, <tt><span class=\"pre\">http://dracos-linux.org</span></tt></p>\n<ul>\n<li><dl>\n<dt>from Djipsum</dt>\n<dd><tt>faker.fake_url()</tt></dd>\n</dl>\n</li>\n<li><dl>\n<dt>from Faker Factory</dt>\n<dd><tt>faker.fake.url()</tt></dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt><tt>fake_uuid(self)</tt></dt>\n<dd><p>Generate the unique uuid\nfrom <tt>uuid1</tt>, <tt>uuid3</tt>, <tt>uuid4</tt>, or <tt>uuid5</tt>.</p>\n<p><strong>Example:</strong></p>\n<p><tt>fb3d6e7f82db47dcaaca46bdd82b24a5</tt>, <tt>886313e13b8a53729b900c9aee199e5d</tt></p>\n</dd>\n<dt><tt>fake_relations(self, type, field_name)</tt></dt>\n<dd><p>Return the dictionary of object/s relation\nto process the Relationship.</p>\n<p><strong>Example:</strong></p>\n<ul>\n<li><dl>\n<dt>Foreign Key:</dt>\n<dd><tt><span class=\"pre\">faker.fake_relations(type='fk',</span> <span class=\"pre\">field_name='author')</span></tt></dd>\n</dl>\n</li>\n<li><dl>\n<dt>Many To Many:</dt>\n<dd><tt><span class=\"pre\">faker.fake_relations(type='m2m',</span> <span class=\"pre\">field_name='categories')</span></tt></dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<ul>\n<li><a href=\"https://github.com/agusmakmun/djipsum/blob/master/LICENSE\" rel=\"nofollow\">MIT</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3392022, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "06c57a39d90fa097cf592cfc70e70034", "sha256": "1bd86b88a0e7ba7ff4f4e916ffb55a12e396e22c25899ef0e257a880843b0ffb"}, "downloads": -1, "filename": "djipsum-1.0.0.tar.gz", "has_sig": false, "md5_digest": "06c57a39d90fa097cf592cfc70e70034", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5765, "upload_time": "2016-10-11T05:29:35", "upload_time_iso_8601": "2016-10-11T05:29:35.921249Z", "url": "https://files.pythonhosted.org/packages/6c/39/0970d8aa68e6d0475afbe9d9bfc5cf74cb733cbf397f6819f843478a7582/djipsum-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "df709e47cb435bbf2b23ad89afff2293", "sha256": "1601b9ffbadc6b377cb55c29b478a49a3b70c47ff97977331d3ee3b1e84ffdc3"}, "downloads": -1, "filename": "djipsum-1.0.1.tar.gz", "has_sig": false, "md5_digest": "df709e47cb435bbf2b23ad89afff2293", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6070, "upload_time": "2016-10-12T08:24:55", "upload_time_iso_8601": "2016-10-12T08:24:55.805235Z", "url": "https://files.pythonhosted.org/packages/f5/63/3ad11625458b8de28e2d342da61d93d003ffca0524353c43e10f7feab3a2/djipsum-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "7402f8186159d508d57c0a6970495a43", "sha256": "2c025e2cb9cb551b7a7e39c9e0304773e36bb6be3e56d19802262a3ca4a45051"}, "downloads": -1, "filename": "djipsum-1.0.2.tar.gz", "has_sig": false, "md5_digest": "7402f8186159d508d57c0a6970495a43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6595, "upload_time": "2016-10-12T18:51:02", "upload_time_iso_8601": "2016-10-12T18:51:02.913538Z", "url": "https://files.pythonhosted.org/packages/df/20/344cf7c3a4d2560df957d3cc3459abd80953fef6c908690a04d6dfab1eb0/djipsum-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "747a6d17d9766fa6e3558ca44d7cd433", "sha256": "764a5329666fcdf41a01b34b9a230e5c168ae880aad5873d28483cf40a11c12b"}, "downloads": -1, "filename": "djipsum-1.0.3.tar.gz", "has_sig": false, "md5_digest": "747a6d17d9766fa6e3558ca44d7cd433", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6598, "upload_time": "2016-10-12T19:09:19", "upload_time_iso_8601": "2016-10-12T19:09:19.087330Z", "url": "https://files.pythonhosted.org/packages/ce/74/659bcd323a24afe9fa3662be9087206b3200c40ea25a6ef24c39fa8b15df/djipsum-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "f254fd96758b35071f56e8335b7aa9bb", "sha256": "c347b956e10d34634e2b200ee2921cb477a3c71d712b37cde11644dadbfc1ffb"}, "downloads": -1, "filename": "djipsum-1.0.4.tar.gz", "has_sig": false, "md5_digest": "f254fd96758b35071f56e8335b7aa9bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9564, "upload_time": "2016-10-14T18:45:53", "upload_time_iso_8601": "2016-10-14T18:45:53.013636Z", "url": "https://files.pythonhosted.org/packages/e6/26/330b6669f17d2d2466a83fd0e09fcd7ed6f32f11d9a50528f77d25121374/djipsum-1.0.4.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "d741d1e7ca209836118938e4ea098566", "sha256": "d47eaf8e922495591c0731992c9f66fcc7afa347d99f03ce0fa23aece8a1cc5f"}, "downloads": -1, "filename": "djipsum-1.0.4.zip", "has_sig": false, "md5_digest": "d741d1e7ca209836118938e4ea098566", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16597, "upload_time": "2016-10-14T18:54:08", "upload_time_iso_8601": "2016-10-14T18:54:08.681154Z", "url": "https://files.pythonhosted.org/packages/87/cf/894c6fa3a70a2c1d0788dc03a46128b4df061dc62ec379f976f3ef20eacf/djipsum-1.0.4.zip", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "cac6035d47a34be5d8ad0efcb8354b83", "sha256": "9944eba56782763fb4a1b85c87043970361e4a0dcdd47f7934c5548fd0f0fcda"}, "downloads": -1, "filename": "djipsum-1.0.5.tar.gz", "has_sig": false, "md5_digest": "cac6035d47a34be5d8ad0efcb8354b83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9476, "upload_time": "2016-10-14T18:56:09", "upload_time_iso_8601": "2016-10-14T18:56:09.788365Z", "url": "https://files.pythonhosted.org/packages/45/49/0d45160400d2e0e7610cf2cecf36b7288f4b0d5f8aab7b7c6b1a2bdee397/djipsum-1.0.5.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "56103846450a643203497e60d1f54f12", "sha256": "9af1e42a765bed1c2714dcb5ef602b9f83f2b42a4a855a0bd5edb3aba09df809"}, "downloads": -1, "filename": "djipsum-1.0.5.zip", "has_sig": false, "md5_digest": "56103846450a643203497e60d1f54f12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16426, "upload_time": "2016-10-14T18:57:16", "upload_time_iso_8601": "2016-10-14T18:57:16.235448Z", "url": "https://files.pythonhosted.org/packages/cb/9a/88d2c49d15d871aebbfd0a256f85aeadf1201105f19053af935c83a5b567/djipsum-1.0.5.zip", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "cc06cc6cc3a5a87eaecdbb00abec2ccf", "sha256": "d245ab846d12707b1bf965c44fbff43cbc3a2a108b31b8f45592ab7a16d9757f"}, "downloads": -1, "filename": "djipsum-1.0.6.zip", "has_sig": false, "md5_digest": "cc06cc6cc3a5a87eaecdbb00abec2ccf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14818, "upload_time": "2016-10-14T19:02:31", "upload_time_iso_8601": "2016-10-14T19:02:31.904056Z", "url": "https://files.pythonhosted.org/packages/0d/37/3a95c45e6993cbcfc02a8d5eed34fc8731037f68a7901c6574b2956c71c9/djipsum-1.0.6.zip", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "46367936158062b3974676656974a902", "sha256": "d5cd5774eac4654ba413e9bc77a70c85ac914b3a5287e04a5803945c4358cad6"}, "downloads": -1, "filename": "djipsum-1.0.7.tar.gz", "has_sig": false, "md5_digest": "46367936158062b3974676656974a902", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9547, "upload_time": "2016-10-14T19:11:27", "upload_time_iso_8601": "2016-10-14T19:11:27.275150Z", "url": "https://files.pythonhosted.org/packages/52/2b/9d37eaa6f4c5c311ae6c2fb5804fdfadb44d32803f878a2c0d380aa78818/djipsum-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "c02e3aec54d0aa1707678ff05e120143", "sha256": "fec23578c8535d9631107bbb52fbee5ba4af8af83a23ca256f992db945377b17"}, "downloads": -1, "filename": "djipsum-1.0.8.tar.gz", "has_sig": false, "md5_digest": "c02e3aec54d0aa1707678ff05e120143", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9835, "upload_time": "2016-10-20T06:33:13", "upload_time_iso_8601": "2016-10-20T06:33:13.091793Z", "url": "https://files.pythonhosted.org/packages/2a/27/24ae44f66fd51774064adead03d38b9b0a0965fbbd19c5a3878772d203b7/djipsum-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "32635630a63cfff2a08539c9e3c61dc6", "sha256": "ba3aacf1ec9e69ff1746cc91fbb5fbdf8696df95a2927f1ebdb7336242149058"}, "downloads": -1, "filename": "djipsum-1.0.9.tar.gz", "has_sig": false, "md5_digest": "32635630a63cfff2a08539c9e3c61dc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10171, "upload_time": "2016-12-01T21:40:26", "upload_time_iso_8601": "2016-12-01T21:40:26.767634Z", "url": "https://files.pythonhosted.org/packages/b5/2b/602825f3933a5d98df228c278081d184ed5ee442e45b1ef0795c5e5df305/djipsum-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d3aeac11c2592f3b5b6bebbb1bd7d8e8", "sha256": "9527573b9282269a1bbe98da4057c3d158b527b9a96feafe18a8fa4f83c8eaa3"}, "downloads": -1, "filename": "djipsum-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d3aeac11c2592f3b5b6bebbb1bd7d8e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12850, "upload_time": "2016-12-03T16:01:36", "upload_time_iso_8601": "2016-12-03T16:01:36.815603Z", "url": "https://files.pythonhosted.org/packages/0b/35/22b72285edb04dc80da12d25d0aecba04ecd0b63d6d0ee7bca0361cf2648/djipsum-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "e786f35d1a37c75a5f34202e09e1d9d2", "sha256": "082df87a9a7eec91ad743037681602c03593437a605b6a1dcdacf3e3008ab8e1"}, "downloads": -1, "filename": "djipsum-1.1.1.tar.gz", "has_sig": false, "md5_digest": "e786f35d1a37c75a5f34202e09e1d9d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12962, "upload_time": "2016-12-03T21:03:52", "upload_time_iso_8601": "2016-12-03T21:03:52.428563Z", "url": "https://files.pythonhosted.org/packages/3e/61/65c26aa1a5c457cef7e90d97c8b09e1de3ebbd92f68ce9877deaf23c9897/djipsum-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "b999bd2946f61c77314959bfdeee8854", "sha256": "e83acf7663ae23f79c3a3a58c1aeae00dd1106d3dde374cdd2e4c2cbb26baf76"}, "downloads": -1, "filename": "djipsum-1.1.2.tar.gz", "has_sig": false, "md5_digest": "b999bd2946f61c77314959bfdeee8854", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12348, "upload_time": "2016-12-04T23:54:37", "upload_time_iso_8601": "2016-12-04T23:54:37.628465Z", "url": "https://files.pythonhosted.org/packages/c8/9f/8e87ea7b7f2f120f213aeb3a98a0b38d3a171d7391826d29769c5329557b/djipsum-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "feeed1e2a6ffb47150a0dfaf232f34b9", "sha256": "0ab8afa4fbb32bb2aff7bb0ca2890a2a8b39184734271cdcf2f8619cd08e4b0e"}, "downloads": -1, "filename": "djipsum-1.1.3.tar.gz", "has_sig": false, "md5_digest": "feeed1e2a6ffb47150a0dfaf232f34b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14668, "upload_time": "2016-12-05T02:18:19", "upload_time_iso_8601": "2016-12-05T02:18:19.140209Z", "url": "https://files.pythonhosted.org/packages/8b/df/7d49dd918e8251fbc41c3e5a80d0c73dce31bf4d51968c02d685020e2cfa/djipsum-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "2f05537bb4d3c1991f80605af4c6df95", "sha256": "0083d8d08469e01efaa8592665096d87529bff9fa90b1a37a6b28c0f3e71c5bb"}, "downloads": -1, "filename": "djipsum-1.1.4.tar.gz", "has_sig": false, "md5_digest": "2f05537bb4d3c1991f80605af4c6df95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14926, "upload_time": "2016-12-05T02:36:09", "upload_time_iso_8601": "2016-12-05T02:36:09.536582Z", "url": "https://files.pythonhosted.org/packages/56/34/0e457d69ca9d060bd8279dbda744c755398e32299ac5496a137d48f33131/djipsum-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "f839ab0c464e9d68ff1cf412759cdf74", "sha256": "fb2879ac486ded2d92f85573afb1a00bb4776ad0ed5b7a51543116f89b4c1fbd"}, "downloads": -1, "filename": "djipsum-1.1.5.tar.gz", "has_sig": false, "md5_digest": "f839ab0c464e9d68ff1cf412759cdf74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14964, "upload_time": "2017-12-05T22:27:41", "upload_time_iso_8601": "2017-12-05T22:27:41.234714Z", "url": "https://files.pythonhosted.org/packages/5a/0c/857ce7e77d602bf1c6d4797363da04aa7a5457031968668e81ad152326ae/djipsum-1.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f839ab0c464e9d68ff1cf412759cdf74", "sha256": "fb2879ac486ded2d92f85573afb1a00bb4776ad0ed5b7a51543116f89b4c1fbd"}, "downloads": -1, "filename": "djipsum-1.1.5.tar.gz", "has_sig": false, "md5_digest": "f839ab0c464e9d68ff1cf412759cdf74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14964, "upload_time": "2017-12-05T22:27:41", "upload_time_iso_8601": "2017-12-05T22:27:41.234714Z", "url": "https://files.pythonhosted.org/packages/5a/0c/857ce7e77d602bf1c6d4797363da04aa7a5457031968668e81ad152326ae/djipsum-1.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:33 2020"}