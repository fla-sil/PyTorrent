{"info": {"author": "Netlandish Inc.", "author_email": "geeks@netlandish.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "====================\ndjango-trello-broker\n====================\n:Info: Django app to integrate BitBucket POST hooks and Trello boards\n:Version: 0.3\n:Author: Peter Sanchez <peter@netlandish.com> - Netlandish Inc. (http://www.netlandish.com)\n\nDependencies\n============\n\n* Python 2.7+\n* Django 1.7+\n* trello 0.9.1+\n* requests 2.2.1+\n\n\nInstallation\n============\n\nPIP::\n\n    pip install django-trello-broker\n\nBasic Manual Install::\n\n    $ python setup.py build\n    $ sudo python setup.py install\n\nAlternative Install (Manually):\n\n| Place trello_broker directory in your Python path. Either in your Python installs site-packages directory or set your $PYTHONPATH environment variable to include a directory where the trello_broker directory lives.\n\n\nUsage\n=====\n\n#. Add 'trello_broker' to your INSTALLED_APPS\n\n#. Add 'trello_broker.urls' somewhere in your url structure. Example::\n\n    urlpatterns = patterns('',\n        url(r'^admin/', include(admin.site.urls)),\n        url(r'^broker', include('trello_broker.urls')),\n        ... (all your other urls here) ...\n    )\n\n#. Add at least 1 Trello Token to the database. Example::\n\n    $ ./manage.py add_trello_token\n    Enter your Trello applications name.\n\n    App Name: Netlandish Bot\n\n    Enter your Trello user API Key. You can get it from:\n\n    https://trello.com/1/appKey/generate\n\n    API Key: <Our Super Secret Key Here>\n\n    Go to the following URL to get your API Token:\n\n    https://trello.com/1/authorize?key=<Our Super Secret Key Here>&name=Netlandish+Bot&expiration=never&response_type=token&scope=read,write\n\n    API Token: <Our Super Secret Token Here>\n    Saved token (ID: 1) to the database.\n\n#. Now you can automatically populate all Trello boards the new token has access to. Example::\n\n    $ ./manage.py populate_trello_boards\n    Processing token Netlandish Bot\n    Processing board BracketWire Development\n    Processing board Bracketwire Planning\n    Processing board CHAP Development\n    Processing board CHAP Planning\n    Processing board CartFreak Development\n    Processing board CartFreak Planning\n    .......\n\n#. Go to http://yourdomain.com/admin/ (or your admin URL) and add BitBucket Repositories. After saving you'll be able to add a new \"Rule\". Once you save that rule, you'll be able to add another. Currently there are only 2 rules allowed. \"Referenced\" and \"Fixes / Closes\".\n\n  **Referenced**\n    When a card has been referenced in a commit message, this rule will be triggered.\n\n  Example\n    Simply using \"#<card-short-id>\" works. For instance, \"Starting working on new feature for #213\"\n\n\n  **Fixes / Closes**\n    When a card has been referenced in a commit message but also uses a \"fix\" or \"close\" prefix\n\n  Example:\n    One of the following words following by the card short ID. Words are \"fix(ed|es)\" or \"close(d|s)\". This is case insensitive. For instance, \"Finished work for new feature. Closes #213\"\n\n  .. image:: http://all-media.s3.amazonaws.com/images/broker_admin.png\n     :align: center\n     :width: 1000px\n     :height: 575px\n     :target: http://all-media.s3.amazonaws.com/images/broker_admin.png\n\n#. Add the post hook to your BitBucket repository settings. See `BitBucket POST\nHook Management <https://confluence.atlassian.com/display/BITBUCKET/POST+hook+management?continue=https%3A%2F%2Fconfluence.atlassian.com%2Fdisplay%2FBITBUCKET%2FPOST%2Bhook%2Bmanagement&application=cac>`_\n\n  *Note* Be sure to include the access_key if you stored one in your BitBucket Repo in the Django Admin. For instance, if you used \"foobar\" as your access key in Django admin, in the BitBucket settings you need to pass in the access key like so: http://yourdomain.com/broker/?access_key=foobar\n\n\nSettings\n========\n\nThere are a few settings that the application supports.\n\n#. TRELLO_BROKER_USE_CELERY - Defaults to False. If True, the broker processor will use the celery task \"celery_process_commits\" which is simply a wrapper for the normal \"process_commits\" function to run via your celery setup.\n\n#. TRELLO_BROKER_RESTRICT_IPS - Defaults to False. If True, the broker will check that the client sending the request comes from the specified BitBucket broker servers. See: `BitBucket IP List Here <https://confluence.atlassian.com/display/BITBUCKET/What+are+the+Bitbucket+IP+addresses+I+should+use+to+configure+my+corporate+firewall>`_\n\n#. TRELLO_BROKER_BITBUCKET_IPS - A list of client IP's that are allowed to POST to the broker. Default's to ::\n\n    ['131.103.20.165', '131.103.20.166']\n\n   This setting depends on TRELLO_BROKER_RESTRICT_IPS being set to True\n\n\nTemplates\n=========\n\nThere is a single template that is used and it holds the message used to generate the comment left on the Trello card.::\n\n    trello_broker/update_message.txt\n\nBy default the template contains the following::\n\n    Commit ```{{ changeset }}``` committed by {{ author }} with the message ```{{ commit_message }}``` - View at: {{ commit_url }}\n\nThe following is the context that will be passed to the template::\n\n    context = {\n        'author': commit['author'],\n        'author_full': commit['raw_author'],\n        'changeset': commit['node'],\n        'changeset_full': commit['raw_node'],\n        'commit_url': urljoin(base_commit_url, commit['raw_node']),\n        'commit_message': commit['message'],\n    }\n\nthe value of the \"base_commit_url\" variable is pieced together from data provided by BitBucket. It's essentially \"https://bitbucket.org/username/reponame\". See `BitBucket POST Hook Management <https://confluence.atlassian.com/display/BITBUCKET/POST+hook+management?continue=https%3A%2F%2Fconfluence.atlassian.com%2Fdisplay%2FBITBUCKET%2FPOST%2Bhook%2Bmanagement&application=cac>`_ docs for examples of what the JSON data looks like\n\n\nAdmin Actions\n=============\n\nAlso included is a simple Admin Action that makes it easy for you to re-populate one, or many, of your Trello boards via the Admin list page. Just select the boards you want to update, select the action, hit \"Go\".\n\n  .. image:: http://all-media.s3.amazonaws.com/images/broker_actions.png\n     :align: center\n     :width: 1000px\n     :height: 229px\n     :target: http://all-media.s3.amazonaws.com/images/broker_actions.png\n\n\nExample in Action\n=================\n\nHere's a simple screenshot from one of our development cards\n\n  .. image:: http://all-media.s3.amazonaws.com/images/in_action.png\n     :align: center\n     :target: http://all-media.s3.amazonaws.com/images/in_action.png\n\n==================\nCommercial Support\n==================\n\nThis software, and lots of other software like it, has been built in support of many of\nNetlandish's own projects, and the projects of our clients. We would love to help you \non your next project so get in touch by dropping us a note at hello@netlandish.com.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/netlandish/django-trello-broker/", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "django-trello-broker", "package_url": "https://pypi.org/project/django-trello-broker/", "platform": "any", "project_url": "https://pypi.org/project/django-trello-broker/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/netlandish/django-trello-broker/"}, "release_url": "https://pypi.org/project/django-trello-broker/0.3/", "requires_dist": null, "requires_python": null, "summary": "Django app that integrats BitBucket POST hook calls and your Trello boards.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-trello-broker\">\n<h2>django-trello-broker</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Info:</th><td>Django app to integrate BitBucket POST hooks and Trello boards</td>\n</tr>\n<tr><th>Version:</th><td>0.3</td>\n</tr>\n<tr><th>Author:</th><td>Peter Sanchez &lt;<a href=\"mailto:peter%40netlandish.com\">peter<span>@</span>netlandish<span>.</span>com</a>&gt; - Netlandish Inc. (<a href=\"http://www.netlandish.com\" rel=\"nofollow\">http://www.netlandish.com</a>)</td>\n</tr>\n</tbody>\n</table>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<ul>\n<li>Python 2.7+</li>\n<li>Django 1.7+</li>\n<li>trello 0.9.1+</li>\n<li>requests 2.2.1+</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>PIP:</p>\n<pre>pip install django-trello-broker\n</pre>\n<p>Basic Manual Install:</p>\n<pre>$ python setup.py build\n$ sudo python setup.py install\n</pre>\n<p>Alternative Install (Manually):</p>\n<div>\n<div>Place trello_broker directory in your Python path. Either in your Python installs site-packages directory or set your $PYTHONPATH environment variable to include a directory where the trello_broker directory lives.</div>\n</div>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<ol>\n<li><p>Add \u2018trello_broker\u2019 to your INSTALLED_APPS</p>\n</li>\n<li><p>Add \u2018trello_broker.urls\u2019 somewhere in your url structure. Example:</p>\n<pre>urlpatterns = patterns('',\n    url(r'^admin/', include(admin.site.urls)),\n    url(r'^broker', include('trello_broker.urls')),\n    ... (all your other urls here) ...\n)\n</pre>\n</li>\n<li><p>Add at least 1 Trello Token to the database. Example:</p>\n<pre>$ ./manage.py add_trello_token\nEnter your Trello applications name.\n\nApp Name: Netlandish Bot\n\nEnter your Trello user API Key. You can get it from:\n\nhttps://trello.com/1/appKey/generate\n\nAPI Key: &lt;Our Super Secret Key Here&gt;\n\nGo to the following URL to get your API Token:\n\nhttps://trello.com/1/authorize?key=&lt;Our Super Secret Key Here&gt;&amp;name=Netlandish+Bot&amp;expiration=never&amp;response_type=token&amp;scope=read,write\n\nAPI Token: &lt;Our Super Secret Token Here&gt;\nSaved token (ID: 1) to the database.\n</pre>\n</li>\n<li><p>Now you can automatically populate all Trello boards the new token has access to. Example:</p>\n<pre>$ ./manage.py populate_trello_boards\nProcessing token Netlandish Bot\nProcessing board BracketWire Development\nProcessing board Bracketwire Planning\nProcessing board CHAP Development\nProcessing board CHAP Planning\nProcessing board CartFreak Development\nProcessing board CartFreak Planning\n.......\n</pre>\n</li>\n<li><p>Go to <a href=\"http://yourdomain.com/admin/\" rel=\"nofollow\">http://yourdomain.com/admin/</a> (or your admin URL) and add BitBucket Repositories. After saving you\u2019ll be able to add a new \u201cRule\u201d. Once you save that rule, you\u2019ll be able to add another. Currently there are only 2 rules allowed. \u201cReferenced\u201d and \u201cFixes / Closes\u201d.</p>\n</li>\n</ol>\n<blockquote>\n<dl>\n<dt><strong>Referenced</strong></dt>\n<dd>When a card has been referenced in a commit message, this rule will be triggered.</dd>\n<dt>Example</dt>\n<dd>Simply using \u201c#&lt;card-short-id&gt;\u201d works. For instance, \u201cStarting working on new feature for #213\u201d</dd>\n<dt><strong>Fixes / Closes</strong></dt>\n<dd>When a card has been referenced in a commit message but also uses a \u201cfix\u201d or \u201cclose\u201d prefix</dd>\n<dt>Example:</dt>\n<dd>One of the following words following by the card short ID. Words are \u201cfix(ed|es)\u201d or \u201cclose(d|s)\u201d. This is case insensitive. For instance, \u201cFinished work for new feature. Closes #213\u201d</dd>\n</dl>\n<a href=\"http://all-media.s3.amazonaws.com/images/broker_admin.png\" rel=\"nofollow\"><img alt=\"http://all-media.s3.amazonaws.com/images/broker_admin.png\" class=\"align-center\" height=\"575px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/132ac269f22bb46426b44b5a6fc835940e525af4/687474703a2f2f616c6c2d6d656469612e73332e616d617a6f6e6177732e636f6d2f696d616765732f62726f6b65725f61646d696e2e706e67\" width=\"1000px\"></a>\n</blockquote>\n<p>#. Add the post hook to your BitBucket repository settings. See <a href=\"https://confluence.atlassian.com/display/BITBUCKET/POST+hook+management?continue=https%3A%2F%2Fconfluence.atlassian.com%2Fdisplay%2FBITBUCKET%2FPOST%2Bhook%2Bmanagement&amp;application=cac\" rel=\"nofollow\">BitBucket POST\nHook Management</a></p>\n<blockquote>\n<em>Note</em> Be sure to include the access_key if you stored one in your BitBucket Repo in the Django Admin. For instance, if you used \u201cfoobar\u201d as your access key in Django admin, in the BitBucket settings you need to pass in the access key like so: <a href=\"http://yourdomain.com/broker/?access_key=foobar\" rel=\"nofollow\">http://yourdomain.com/broker/?access_key=foobar</a></blockquote>\n</div>\n<div id=\"settings\">\n<h3>Settings</h3>\n<p>There are a few settings that the application supports.</p>\n<ol>\n<li><p>TRELLO_BROKER_USE_CELERY - Defaults to False. If True, the broker processor will use the celery task \u201ccelery_process_commits\u201d which is simply a wrapper for the normal \u201cprocess_commits\u201d function to run via your celery setup.</p>\n</li>\n<li><p>TRELLO_BROKER_RESTRICT_IPS - Defaults to False. If True, the broker will check that the client sending the request comes from the specified BitBucket broker servers. See: <a href=\"https://confluence.atlassian.com/display/BITBUCKET/What+are+the+Bitbucket+IP+addresses+I+should+use+to+configure+my+corporate+firewall\" rel=\"nofollow\">BitBucket IP List Here</a></p>\n</li>\n<li><p>TRELLO_BROKER_BITBUCKET_IPS - A list of client IP\u2019s that are allowed to POST to the broker. Default\u2019s to</p>\n<pre>['131.103.20.165', '131.103.20.166']\n</pre>\n<p>This setting depends on TRELLO_BROKER_RESTRICT_IPS being set to True</p>\n</li>\n</ol>\n</div>\n<div id=\"templates\">\n<h3>Templates</h3>\n<p>There is a single template that is used and it holds the message used to generate the comment left on the Trello card.:</p>\n<pre>trello_broker/update_message.txt\n</pre>\n<p>By default the template contains the following:</p>\n<pre>Commit ```{{ changeset }}``` committed by {{ author }} with the message ```{{ commit_message }}``` - View at: {{ commit_url }}\n</pre>\n<p>The following is the context that will be passed to the template:</p>\n<pre>context = {\n    'author': commit['author'],\n    'author_full': commit['raw_author'],\n    'changeset': commit['node'],\n    'changeset_full': commit['raw_node'],\n    'commit_url': urljoin(base_commit_url, commit['raw_node']),\n    'commit_message': commit['message'],\n}\n</pre>\n<p>the value of the \u201cbase_commit_url\u201d variable is pieced together from data provided by BitBucket. It\u2019s essentially \u201c<a href=\"https://bitbucket.org/username/reponame\" rel=\"nofollow\">https://bitbucket.org/username/reponame</a>\u201d. See <a href=\"https://confluence.atlassian.com/display/BITBUCKET/POST+hook+management?continue=https%3A%2F%2Fconfluence.atlassian.com%2Fdisplay%2FBITBUCKET%2FPOST%2Bhook%2Bmanagement&amp;application=cac\" rel=\"nofollow\">BitBucket POST Hook Management</a> docs for examples of what the JSON data looks like</p>\n</div>\n<div id=\"admin-actions\">\n<h3>Admin Actions</h3>\n<p>Also included is a simple Admin Action that makes it easy for you to re-populate one, or many, of your Trello boards via the Admin list page. Just select the boards you want to update, select the action, hit \u201cGo\u201d.</p>\n<blockquote>\n<a href=\"http://all-media.s3.amazonaws.com/images/broker_actions.png\" rel=\"nofollow\"><img alt=\"http://all-media.s3.amazonaws.com/images/broker_actions.png\" class=\"align-center\" height=\"229px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7df8d472d551b66d848f2f14c36d227b1e7f9ab/687474703a2f2f616c6c2d6d656469612e73332e616d617a6f6e6177732e636f6d2f696d616765732f62726f6b65725f616374696f6e732e706e67\" width=\"1000px\"></a>\n</blockquote>\n</div>\n<div id=\"example-in-action\">\n<h3>Example in Action</h3>\n<p>Here\u2019s a simple screenshot from one of our development cards</p>\n<blockquote>\n<a href=\"http://all-media.s3.amazonaws.com/images/in_action.png\" rel=\"nofollow\"><img alt=\"http://all-media.s3.amazonaws.com/images/in_action.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f735cc2cc5ae39daf26ed9328e3aff888d0321a4/687474703a2f2f616c6c2d6d656469612e73332e616d617a6f6e6177732e636f6d2f696d616765732f696e5f616374696f6e2e706e67\"></a>\n</blockquote>\n</div>\n</div>\n<div id=\"commercial-support\">\n<h2>Commercial Support</h2>\n<p>This software, and lots of other software like it, has been built in support of many of\nNetlandish\u2019s own projects, and the projects of our clients. We would love to help you\non your next project so get in touch by dropping us a note at <a href=\"mailto:hello%40netlandish.com\">hello<span>@</span>netlandish<span>.</span>com</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2361331, "releases": {"0.1b0": [{"comment_text": "", "digests": {"md5": "d0d839f82dab95f901ba9f62b6a1f2c7", "sha256": "b950f727a96b4c3b3be581bce1f20282b28b87a7240bebf080c02702e82a9b29"}, "downloads": -1, "filename": "django-trello-broker-0.1b0.tar.gz", "has_sig": false, "md5_digest": "d0d839f82dab95f901ba9f62b6a1f2c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11747, "upload_time": "2014-12-01T01:07:58", "upload_time_iso_8601": "2014-12-01T01:07:58.294952Z", "url": "https://files.pythonhosted.org/packages/66/4c/87f62975efd7c0b8bbb9bedab3b05209429aface5c3551f794c5ae5974e0/django-trello-broker-0.1b0.tar.gz", "yanked": false}], "0.2b0": [{"comment_text": "", "digests": {"md5": "15b6d2e4913d9ed7285d226739450995", "sha256": "ca16b8b04665cfe9f4ff35663f328709530cff86fd1b8e2696a33a39df31dd45"}, "downloads": -1, "filename": "django-trello-broker-0.2b0.tar.gz", "has_sig": false, "md5_digest": "15b6d2e4913d9ed7285d226739450995", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12513, "upload_time": "2015-12-12T01:04:23", "upload_time_iso_8601": "2015-12-12T01:04:23.917041Z", "url": "https://files.pythonhosted.org/packages/7f/fb/717b6e38012954ee5c74dbe54d7ec1f2ea583dc0d29d79a5af523d380b23/django-trello-broker-0.2b0.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "5b393a4049232fdb2c87517928800884", "sha256": "701993af2978109ab279172d9faa2c9709ecfc91b7915d434fb54fe7db2f99ca"}, "downloads": -1, "filename": "django-trello-broker-0.3.tar.gz", "has_sig": false, "md5_digest": "5b393a4049232fdb2c87517928800884", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12788, "upload_time": "2016-09-24T14:25:10", "upload_time_iso_8601": "2016-09-24T14:25:10.146615Z", "url": "https://files.pythonhosted.org/packages/08/8f/89acce4ca0c4b5e589275aaee2684d916e48d607afc6aee38112aae0a1df/django-trello-broker-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5b393a4049232fdb2c87517928800884", "sha256": "701993af2978109ab279172d9faa2c9709ecfc91b7915d434fb54fe7db2f99ca"}, "downloads": -1, "filename": "django-trello-broker-0.3.tar.gz", "has_sig": false, "md5_digest": "5b393a4049232fdb2c87517928800884", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12788, "upload_time": "2016-09-24T14:25:10", "upload_time_iso_8601": "2016-09-24T14:25:10.146615Z", "url": "https://files.pythonhosted.org/packages/08/8f/89acce4ca0c4b5e589275aaee2684d916e48d607afc6aee38112aae0a1df/django-trello-broker-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:19 2020"}