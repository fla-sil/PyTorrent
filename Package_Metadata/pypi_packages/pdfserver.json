{"info": {"author": "Christoph Burgmer", "author_email": "cburgmer@ira.uka.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application", "Topic :: Office/Business", "Topic :: Utilities"], "description": "Pdfserver is a webservice that offers common PDF operations like joining\ndocuments, selecting pages or \"n pages on one\". It is built on top of the\nPython based microframework Flask and depends on pyPdf to manipulate PDFs.\n\nRationale\n=========\nPowerful tools to manipulate PDF exist but they are not universally\navailable on all systems or not simple to use. This server allows anyone to\nquickly solve most common PDF operations over the web.\n\nIf you don't trust other servers with your data, deploy a copy yourself!\n\nExample\n=======\nSee http://pdfserverapp.appspot.com/ for an example installation.\n\nDependencies\n============\n(see ``requirements.txt``)\n\n* Python (>= 2.5, < 3.0), http://www.python.org\n* Flask (tested on 0.6), http://flask.pocoo.org/\n* Flask-Babel, http://packages.python.org/Flask-Babel/\n* Flask-Script (>= 0.3.1), http://bitbucket.org/danjac/flask-script\n* SQLAlchemy (probably >= 0.6.0), http://www.sqlalchemy.org/\n* pyPdf (>= 1.13),\n  http://pybrary.net/pyPdf/\n\nOptionally\n----------\n* python-reportlab (tested with 2.4) for adding watermarks,\n  http://www.reportlab.com/software/opensource/rl-toolkit/\n* celery (tested with 2.0.0) for asynchronous request handling (not needed on\n  Google App Engine), http://celeryq.org/\n\nAlready included\n----------------\n* jQuery & jQuery UI (tested with 1.8.4) (both already shipped with pdfserver),\n  needs at least UI core, \"Sortable\" and \"Dialog\" from jQuery UI,\n  http://jquery.com/\n* jQuery plugin: Validation,\n  http://bassistance.de/jquery-plugins/jquery-plugin-validation/\n* jNotify jQuery Plug-in, unobtrusive notification system\n  http://www.givainc.com/labs/jnotify_jquery_plugin.htm\n\nFeatures\n========\n* Simple, yet powerful\n* Designed to work with&without Javascript\n* N pages on one\n* Joining of files\n* Selecting pages & page ranges\n* Rotate pages\n* Add watermark to pages\n* Runs on the Google App Engine\n* Handle builds asynchronously\n\nChanges\n=======\n0.6\n\n* Use SQLAlchemy broker backend for celery by default\n* Fix breakage due to incompatible Flask change\n* Fix test for ordering of uploaded files\n\n0.5\n\n* Fix setup.py statics\n* Show warning if cookies not enabled\n* Update pyPdf dependency\n* Enable testing for celery task backend\n\n0.4\n\n* Handle upload and remove actions through Ajax\n* Support for asynchronous PDF generation\n* Fix max upload size handling for App Engine\n* Unittests\n* Action messages\n\n0.3\n\n* Renamed to \"pdfserver\" from \"django-pdfserver\"\n* \"N pages on one\" feature\n* Move to Flask from Django\n* Google App Engine support\n\n0.2.1\n\n* Page rotation\n* Watermark feature\n* Page range validation\n\nDeploy\n======\n\nDownload and extract the soure code.\n\nCreate a virtualenv in the extracted folder and install requirements::\n\n    $ virtualenv env\n    $ source env/bin/activate\n    $ pip install -r requirements.txt\n\nYou can simply run the development server with::\n\n    $ python manage.py createdb\n    $ mkdir uploads\n    $ python manage.py runserver\n\nGeneral\n-------\n\n1. Make sure the given upload directory and database can be written to and are\n   not accessible from the outside (if on a public server).\n\n2. When not in debug mode make sure to serve static files under ``static``.\n\n3. Give a ``SECRET_KEY`` and keep it secret so that sessions can be signed and\n   users cannot see files uploaded by others.\n\n4. Create the database by running::\n\n    $ python manage.py createdb\n\nCelery\n------\nFor optional, asynchronous generation of the resulting PDF install celery and\nkombu-sqlalchemy (you may also use default broker RabbitMQ, see \nhttp://celeryq.org/docs/getting-started/broker-installation.html)::\n\n    $ pip install -r celery_requirements.txt\n\nRun celeryd from the project's directory to handle tasks asynchronously::\n\n    $ celeryd\n\nThe Google App Engine has its own dereferred library which is automatically\nused.\n\nServe as CGI\n------------\n\nSee pdfserver.cgi for an example on how to run pdfserver through the\ntraditional CGI interface.\n\nGoogle App Engine\n-----------------\n\nFor pdfserver to run on the App Engine you need to download and copy\ndependencies locally. Run the following in the extracted folder::\n\n    # Get dependencies\n    $ mkdir tmp\n    $ pip install -r requirements.txt distribute --build=tmp --src=tmp \\\n      --no-install --ignore-installed\n    $ mv tmp/Babel/babel/ tmp/Flask/flask/ tmp/Flask-Babel/flaskext/ \\\n      tmp/Jinja2/jinja2/ tmp/pyPdf/pyPdf/ tmp/pytz/pytz \\\n      tmp/speaklater/speaklater.py tmp/Werkzeug/werkzeug/ \\\n      tmp/reportlab/src/reportlab/ tmp/distribute/pkg_resources.py .\n    $ rm -rf tmp\n    # Add a secret key\n    $ $EDITOR appengine.py\n    # Choose your application name\n    $ $EDITOR app.yaml\n    # Run the development server\n    $ /usr/local/google_appengine/dev_appserver.py .\n    # Finally upload\n    $ /usr/local/google_appengine/appcfg.py update .\n\nIf tasks won't get executed (you can check under\nhttp://localhost:8080/_ah/admin/tasks?queue=default), you might got hitten\nby bug http://code.google.com/p/appengine-mapreduce/issues/detail?id=9,\nsee workaround there.\n\nContact\n=======\nPlease report bugs to http://github.com/cburgmer/pdfserver/issues.\n\nChristoph Burgmer <cburgmer (at) ira uka de>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pdfserverapp.appspot.com/", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "pdfserver", "package_url": "https://pypi.org/project/pdfserver/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pdfserver/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pdfserverapp.appspot.com/"}, "release_url": "https://pypi.org/project/pdfserver/0.6/", "requires_dist": null, "requires_python": null, "summary": "Pdfserver is a webservice that offers common PDF operations like joining documents, selecting pages or \"n pages on one\".", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pdfserver is a webservice that offers common PDF operations like joining\ndocuments, selecting pages or \u201cn pages on one\u201d. It is built on top of the\nPython based microframework Flask and depends on pyPdf to manipulate PDFs.</p>\n<div id=\"rationale\">\n<h2>Rationale</h2>\n<p>Powerful tools to manipulate PDF exist but they are not universally\navailable on all systems or not simple to use. This server allows anyone to\nquickly solve most common PDF operations over the web.</p>\n<p>If you don\u2019t trust other servers with your data, deploy a copy yourself!</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>See <a href=\"http://pdfserverapp.appspot.com/\" rel=\"nofollow\">http://pdfserverapp.appspot.com/</a> for an example installation.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>(see <tt>requirements.txt</tt>)</p>\n<ul>\n<li>Python (&gt;= 2.5, &lt; 3.0), <a href=\"http://www.python.org\" rel=\"nofollow\">http://www.python.org</a></li>\n<li>Flask (tested on 0.6), <a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">http://flask.pocoo.org/</a></li>\n<li>Flask-Babel, <a href=\"http://packages.python.org/Flask-Babel/\" rel=\"nofollow\">http://packages.python.org/Flask-Babel/</a></li>\n<li>Flask-Script (&gt;= 0.3.1), <a href=\"http://bitbucket.org/danjac/flask-script\" rel=\"nofollow\">http://bitbucket.org/danjac/flask-script</a></li>\n<li>SQLAlchemy (probably &gt;= 0.6.0), <a href=\"http://www.sqlalchemy.org/\" rel=\"nofollow\">http://www.sqlalchemy.org/</a></li>\n<li>pyPdf (&gt;= 1.13),\n<a href=\"http://pybrary.net/pyPdf/\" rel=\"nofollow\">http://pybrary.net/pyPdf/</a></li>\n</ul>\n<div id=\"optionally\">\n<h3>Optionally</h3>\n<ul>\n<li>python-reportlab (tested with 2.4) for adding watermarks,\n<a href=\"http://www.reportlab.com/software/opensource/rl-toolkit/\" rel=\"nofollow\">http://www.reportlab.com/software/opensource/rl-toolkit/</a></li>\n<li>celery (tested with 2.0.0) for asynchronous request handling (not needed on\nGoogle App Engine), <a href=\"http://celeryq.org/\" rel=\"nofollow\">http://celeryq.org/</a></li>\n</ul>\n</div>\n<div id=\"already-included\">\n<h3>Already included</h3>\n<ul>\n<li>jQuery &amp; jQuery UI (tested with 1.8.4) (both already shipped with pdfserver),\nneeds at least UI core, \u201cSortable\u201d and \u201cDialog\u201d from jQuery UI,\n<a href=\"http://jquery.com/\" rel=\"nofollow\">http://jquery.com/</a></li>\n<li>jQuery plugin: Validation,\n<a href=\"http://bassistance.de/jquery-plugins/jquery-plugin-validation/\" rel=\"nofollow\">http://bassistance.de/jquery-plugins/jquery-plugin-validation/</a></li>\n<li>jNotify jQuery Plug-in, unobtrusive notification system\n<a href=\"http://www.givainc.com/labs/jnotify_jquery_plugin.htm\" rel=\"nofollow\">http://www.givainc.com/labs/jnotify_jquery_plugin.htm</a></li>\n</ul>\n</div>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Simple, yet powerful</li>\n<li>Designed to work with&amp;without Javascript</li>\n<li>N pages on one</li>\n<li>Joining of files</li>\n<li>Selecting pages &amp; page ranges</li>\n<li>Rotate pages</li>\n<li>Add watermark to pages</li>\n<li>Runs on the Google App Engine</li>\n<li>Handle builds asynchronously</li>\n</ul>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<p>0.6</p>\n<ul>\n<li>Use SQLAlchemy broker backend for celery by default</li>\n<li>Fix breakage due to incompatible Flask change</li>\n<li>Fix test for ordering of uploaded files</li>\n</ul>\n<p>0.5</p>\n<ul>\n<li>Fix setup.py statics</li>\n<li>Show warning if cookies not enabled</li>\n<li>Update pyPdf dependency</li>\n<li>Enable testing for celery task backend</li>\n</ul>\n<p>0.4</p>\n<ul>\n<li>Handle upload and remove actions through Ajax</li>\n<li>Support for asynchronous PDF generation</li>\n<li>Fix max upload size handling for App Engine</li>\n<li>Unittests</li>\n<li>Action messages</li>\n</ul>\n<p>0.3</p>\n<ul>\n<li>Renamed to \u201cpdfserver\u201d from \u201cdjango-pdfserver\u201d</li>\n<li>\u201cN pages on one\u201d feature</li>\n<li>Move to Flask from Django</li>\n<li>Google App Engine support</li>\n</ul>\n<p>0.2.1</p>\n<ul>\n<li>Page rotation</li>\n<li>Watermark feature</li>\n<li>Page range validation</li>\n</ul>\n</div>\n<div id=\"deploy\">\n<h2>Deploy</h2>\n<p>Download and extract the soure code.</p>\n<p>Create a virtualenv in the extracted folder and install requirements:</p>\n<pre>$ virtualenv env\n$ source env/bin/activate\n$ pip install -r requirements.txt\n</pre>\n<p>You can simply run the development server with:</p>\n<pre>$ python manage.py createdb\n$ mkdir uploads\n$ python manage.py runserver\n</pre>\n<div id=\"general\">\n<h3>General</h3>\n<ol>\n<li><p>Make sure the given upload directory and database can be written to and are\nnot accessible from the outside (if on a public server).</p>\n</li>\n<li><p>When not in debug mode make sure to serve static files under <tt>static</tt>.</p>\n</li>\n<li><p>Give a <tt>SECRET_KEY</tt> and keep it secret so that sessions can be signed and\nusers cannot see files uploaded by others.</p>\n</li>\n<li><p>Create the database by running:</p>\n<pre>$ python manage.py createdb\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"celery\">\n<h3>Celery</h3>\n<p>For optional, asynchronous generation of the resulting PDF install celery and\nkombu-sqlalchemy (you may also use default broker RabbitMQ, see\n<a href=\"http://celeryq.org/docs/getting-started/broker-installation.html\" rel=\"nofollow\">http://celeryq.org/docs/getting-started/broker-installation.html</a>):</p>\n<pre>$ pip install -r celery_requirements.txt\n</pre>\n<p>Run celeryd from the project\u2019s directory to handle tasks asynchronously:</p>\n<pre>$ celeryd\n</pre>\n<p>The Google App Engine has its own dereferred library which is automatically\nused.</p>\n</div>\n<div id=\"serve-as-cgi\">\n<h3>Serve as CGI</h3>\n<p>See pdfserver.cgi for an example on how to run pdfserver through the\ntraditional CGI interface.</p>\n</div>\n<div id=\"google-app-engine\">\n<h3>Google App Engine</h3>\n<p>For pdfserver to run on the App Engine you need to download and copy\ndependencies locally. Run the following in the extracted folder:</p>\n<pre># Get dependencies\n$ mkdir tmp\n$ pip install -r requirements.txt distribute --build=tmp --src=tmp \\\n  --no-install --ignore-installed\n$ mv tmp/Babel/babel/ tmp/Flask/flask/ tmp/Flask-Babel/flaskext/ \\\n  tmp/Jinja2/jinja2/ tmp/pyPdf/pyPdf/ tmp/pytz/pytz \\\n  tmp/speaklater/speaklater.py tmp/Werkzeug/werkzeug/ \\\n  tmp/reportlab/src/reportlab/ tmp/distribute/pkg_resources.py .\n$ rm -rf tmp\n# Add a secret key\n$ $EDITOR appengine.py\n# Choose your application name\n$ $EDITOR app.yaml\n# Run the development server\n$ /usr/local/google_appengine/dev_appserver.py .\n# Finally upload\n$ /usr/local/google_appengine/appcfg.py update .\n</pre>\n<p>If tasks won\u2019t get executed (you can check under\n<a href=\"http://localhost:8080/_ah/admin/tasks?queue=default\" rel=\"nofollow\">http://localhost:8080/_ah/admin/tasks?queue=default</a>), you might got hitten\nby bug <a href=\"http://code.google.com/p/appengine-mapreduce/issues/detail?id=9\" rel=\"nofollow\">http://code.google.com/p/appengine-mapreduce/issues/detail?id=9</a>,\nsee workaround there.</p>\n</div>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>Please report bugs to <a href=\"http://github.com/cburgmer/pdfserver/issues\" rel=\"nofollow\">http://github.com/cburgmer/pdfserver/issues</a>.</p>\n<p>Christoph Burgmer &lt;cburgmer (at) ira uka de&gt;</p>\n</div>\n\n          </div>"}, "last_serial": 796135, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "6abd06a08b3ac466a8441531d8ffab4a", "sha256": "d529d18c1e9fc92f4f9effedd631c24f63f8a6d77bd503d1886f7d663405b73a"}, "downloads": -1, "filename": "pdfserver-0.3.tar.gz", "has_sig": true, "md5_digest": "6abd06a08b3ac466a8441531d8ffab4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117420, "upload_time": "2010-10-11T23:35:48", "upload_time_iso_8601": "2010-10-11T23:35:48.149708Z", "url": "https://files.pythonhosted.org/packages/1c/b1/d03a3b704855bb8b27a663f6511c21f6d0afd8edc650f292bdb9f2c3edaf/pdfserver-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "619d6c73762299434bbc66cca36897c9", "sha256": "5193274fc0e960b397d6108714f11c3bc1953f16ae771692faf89dcdef3c3ad3"}, "downloads": -1, "filename": "pdfserver-0.4.tar.gz", "has_sig": true, "md5_digest": "619d6c73762299434bbc66cca36897c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144387, "upload_time": "2010-11-07T23:39:42", "upload_time_iso_8601": "2010-11-07T23:39:42.935073Z", "url": "https://files.pythonhosted.org/packages/6c/fd/bf813fe3dc74a658efe0cc3fa82394c0016567624a18897f58ea32013754/pdfserver-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "e423c8af58223dd257105a4f84cb63a8", "sha256": "f8050c480831f68e53a43afd860959c1f3b9962dec83ea5df39589f5bf444749"}, "downloads": -1, "filename": "pdfserver-0.5.tar.gz", "has_sig": false, "md5_digest": "e423c8af58223dd257105a4f84cb63a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145708, "upload_time": "2011-05-02T22:50:34", "upload_time_iso_8601": "2011-05-02T22:50:34.247995Z", "url": "https://files.pythonhosted.org/packages/ef/3a/a790c5ff23ed3d48459273448f2e14741de0f868179723a0ea8179aa8193/pdfserver-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "8c4363eb55393c4773bb9d337e9d90d6", "sha256": "f54934254e05862261dcc1496280e4b816404e53dea5720ed5c8163f6828eb04"}, "downloads": -1, "filename": "pdfserver-0.6.tar.gz", "has_sig": true, "md5_digest": "8c4363eb55393c4773bb9d337e9d90d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145436, "upload_time": "2012-03-11T18:32:26", "upload_time_iso_8601": "2012-03-11T18:32:26.036856Z", "url": "https://files.pythonhosted.org/packages/df/aa/9b4ec6ff6faf1a8f142902aa9793703090df5c1fb240a3923d4196ae74b7/pdfserver-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c4363eb55393c4773bb9d337e9d90d6", "sha256": "f54934254e05862261dcc1496280e4b816404e53dea5720ed5c8163f6828eb04"}, "downloads": -1, "filename": "pdfserver-0.6.tar.gz", "has_sig": true, "md5_digest": "8c4363eb55393c4773bb9d337e9d90d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145436, "upload_time": "2012-03-11T18:32:26", "upload_time_iso_8601": "2012-03-11T18:32:26.036856Z", "url": "https://files.pythonhosted.org/packages/df/aa/9b4ec6ff6faf1a8f142902aa9793703090df5c1fb240a3923d4196ae74b7/pdfserver-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:09 2020"}