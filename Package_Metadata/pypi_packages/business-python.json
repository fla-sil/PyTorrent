{"info": {"author": "GoCardless", "author_email": "engineering@gocardless.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Office/Business :: Scheduling", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Business (Python)\n\n[![circleci-badge](https://circleci.com/gh/gocardless/business-python.svg?style=shield)](https://app.circleci.com/pipelines/github/gocardless/business-python) [![pypi-badge](https://badge.fury.io/py/business-python.svg)](https://badge.fury.io/py/business-python)\n\nDate calculations based on business calendars. (Python 3.6+)\n\nPython implementation of https://github.com/gocardless/business\n\n## Documentation\n\nTo get business, simply:\n\n```bash\n$ pip install business-python\n```\n\n### Getting started\n\nGet started with business by creating an instance of the calendar class, passing in a hash that specifies which days of the week are considered working days, and which days are holidays.\n\n```python\nfrom business.calendar import Calendar\n\ncalendar = Calendar(\n  working_days=[\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"],\n  # array items are either parseable date strings, or real datetime.date objects\n  holidays=[\"January 1st, 2020\", \"April 10th, 2020\"],\n  extra_working_dates=[],\n)\n```\n\n`extra_working_dates` key makes the calendar to consider a weekend day as a working day.\n\nA few calendar configs are bundled with the package (see [business/data](<(business/data)>) for details). Load them by calling the `load` class method on `Calendar`.\n\n```python\ncalendar = Calendar.load(\"weekdays\")\n```\n\nIf `working_days` is missing, then common default is used (mon-fri).\nIf `holidays` is missing, \"no holidays\" assumed.\nIf `extra_working_dates` is missing, then no changes in `working_days` will happen.\n\nElements of `holidays` and `extra_working_dates` may be either strings that `Calendar.parse_date()` can understand, or YYYY-MM-DD (which is considered as a Date by Python YAML itself).\n\n```yaml\nholidays:\n  - 2017-01-08 # Same as January 8th, 2017\n```\n\nThe `load_cache` method allows a thread safe way to avoid reloading the same calendar multiple times, and provides a performant way to dynamically load calendars for different requests.\n\n```python\ncalendar = Calendar.load_cache(\"weekdays\")\n```\n\n### Input data types\n\nThe `parse_date` method is used to process the input date(s) in each method and return a `datetime.date` object.\n\n```python\nCalendar.parse_date(\"2019-01-01\")\n# => datetime.date(2019, 1, 1)\n```\n\nSupported data types are:\n\n- `datetime.date`\n- `datetime.datetime`\n- `pandas.Timestamp` (treated as `datetime.datetime`)\n- date string parseable by [`dateutil.parser.parse`](https://dateutil.readthedocs.io/en/stable/parser.html#dateutil.parser.parse)\n\n`numpy.datetime64` is not supported, but can be converted to `datetime.date`:\n\n```python\nnumpy.datetime64('2014-06-01T23:00:05.453000000').astype('M8[D]').astype('O')\n# =>  datetime.date(2014, 6, 1)\n```\n\n### Checking for business days\n\nTo check whether a given date is a business day (falls on one of the specified working days or extra working dates, and is not a holiday), use the `is_business_day` method on `Calendar`.\n\n```python\ncalendar.is_business_day(\"Monday, 8 June 2020\")\n# => true\ncalendar.is_business_day(\"Sunday, 7 June 2020\")\n# => false\n```\n\n### Custom calendars\n\nTo use a calendar you've written yourself, you need to add the directory it's stored in as an additional calendar load path:\n\n```python\nCalendar.additional_load_paths = ['path/to/your/calendar/directory']\n```\n\nYou can then load the calendar as normal.\n\n### Business day arithmetic\n\n> For our purposes, date-based calculations are sufficient. Supporting time-based calculations as well makes the code significantly more complex. We chose to avoid this extra complexity by sticking solely to date-based mathematics.\n\nThe `add_business_days` method is used to perform business day arithmetic on dates.\n\n```python\ninput_date = Calendar.parse_date(\"Thursday, 12 June 2014\")\ncalendar.add_business_days(input_date, 4).strftime(\"%A, %d %B %Y\")\n# => \"Wednesday, 18 June 2014\"\ncalendar.add_business_days(input_date, -4).strftime(\"%A, %d %B %Y\")\n# => \"Friday, 06 June 2014\"\n```\n\nThe `roll_forward` and `roll_backward` methods snap a date to a nearby business day. If provided with a business day, they will return that date. Otherwise, they will advance (forward for `roll_forward` and backward for `roll_backward`) until a business day is found.\n\n```python\ninput_date = Calendar.parse_date(\"Saturday, 14 June 2014\")\ncalendar.roll_forward(input_date).strftime(\"%A, %d %B %Y\")\n# => \"Monday, 16 June 2014\"\ncalendar.roll_backward(input_date).strftime(\"%A, %d %B %Y\")\n# => \"Friday, 13 June 2014\"\n```\n\nIn contrast, the `next_business_day` and `previous_business_day` methods will always move to a next or previous date until a business day is found, regardless if the input provided is a business day.\n\n```python\ninput_date = Calendar.parse_date(\"Monday, 9 June 2014\")\ncalendar.roll_forward(input_date).strftime(\"%A, %d %B %Y\")\n# => \"Monday, 09 June 2014\"\ncalendar.next_business_day(input_date).strftime(\"%A, %d %B %Y\")\n# => \"Tuesday, 10 June 2014\"\ncalendar.previous_business_day(input_date).strftime(\"%A, %d %B %Y\")\n# => \"Friday, 06 June 2014\"\n```\n\nTo count the number of business days between two dates, pass the dates to `business_days_between`. This method counts from start of the first date to start of the second date. So, assuming no holidays, there would be two business days between a Monday and a Wednesday.\n\n```python\nfrom datetime import timedelta\n\ninput_date = Calendar.parse_date(\"Saturday, 14 June 2014\")\ncalendar.business_days_between(input_date, input_date + timedelta(days=7))\n# => 5\n```\n\nThe `get_business_day_of_month` method return the running total of business days for a given date in that month. This method counts the number of business days from the start of the first day of the month to the given input date.\n\n```python\ninput_date = Calendar.parse_date(\"Thursday, 12 June 2014\")\ncalendar.get_business_day_of_month(input_date)\n# => 9\n```\n\n### Included Calendars\n\nWe include some calendar data with this package but give no guarantees of its accuracy. The calendars that we include are:\n\n- ACH (United States)\n- Bacs\n- Bankgirot\n- BECS (Australia)\n- BECSNZ (New Zealand)\n- PAD (Canada)\n- Betalingsservice\n- Target (SEPA)\n- TargetFrance (SEPA + French bank holidays)\n\n## License & Contributing\n\n- This is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\n- Bug reports and pull requests are welcome on GitHub at https://github.com/gocardless/business-python.\n\nGoCardless \u2665 open source. If you do too, come [join us](https://gocardless.com/about/jobs).\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gocardless/business-python", "keywords": "business days,working days,calendar,date", "license": "", "maintainer": "", "maintainer_email": "", "name": "business-python", "package_url": "https://pypi.org/project/business-python/", "platform": "", "project_url": "https://pypi.org/project/business-python/", "project_urls": {"Homepage": "https://github.com/gocardless/business-python", "Repository": "https://github.com/gocardless/business-python"}, "release_url": "https://pypi.org/project/business-python/1.0.2/", "requires_dist": ["importlib_metadata (>=1.6.0,<2.0.0); python_version < \"3.8\"", "python-dateutil (>=2.8.1,<3.0.0)", "pyyaml (>=5.3.1,<6.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "Date calculations based on business calendars.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Business (Python)</h1>\n<p><a href=\"https://app.circleci.com/pipelines/github/gocardless/business-python\" rel=\"nofollow\"><img alt=\"circleci-badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3604ab4e4b994f884f480a65f9672666b0c322b2/68747470733a2f2f636972636c6563692e636f6d2f67682f676f636172646c6573732f627573696e6573732d707974686f6e2e7376673f7374796c653d736869656c64\"></a> <a href=\"https://badge.fury.io/py/business-python\" rel=\"nofollow\"><img alt=\"pypi-badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/858f07ae112e4dd98691f82f7cc6399ed36ae611/68747470733a2f2f62616467652e667572792e696f2f70792f627573696e6573732d707974686f6e2e737667\"></a></p>\n<p>Date calculations based on business calendars. (Python 3.6+)</p>\n<p>Python implementation of <a href=\"https://github.com/gocardless/business\" rel=\"nofollow\">https://github.com/gocardless/business</a></p>\n<h2>Documentation</h2>\n<p>To get business, simply:</p>\n<pre>$ pip install business-python\n</pre>\n<h3>Getting started</h3>\n<p>Get started with business by creating an instance of the calendar class, passing in a hash that specifies which days of the week are considered working days, and which days are holidays.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">business.calendar</span> <span class=\"kn\">import</span> <span class=\"n\">Calendar</span>\n\n<span class=\"n\">calendar</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">(</span>\n  <span class=\"n\">working_days</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"monday\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tuesday\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wednesday\"</span><span class=\"p\">,</span> <span class=\"s2\">\"thursday\"</span><span class=\"p\">,</span> <span class=\"s2\">\"friday\"</span><span class=\"p\">],</span>\n  <span class=\"c1\"># array items are either parseable date strings, or real datetime.date objects</span>\n  <span class=\"n\">holidays</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"January 1st, 2020\"</span><span class=\"p\">,</span> <span class=\"s2\">\"April 10th, 2020\"</span><span class=\"p\">],</span>\n  <span class=\"n\">extra_working_dates</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n<span class=\"p\">)</span>\n</pre>\n<p><code>extra_working_dates</code> key makes the calendar to consider a weekend day as a working day.</p>\n<p>A few calendar configs are bundled with the package (see <a href=\"(business/data)\" rel=\"nofollow\">business/data</a> for details). Load them by calling the <code>load</code> class method on <code>Calendar</code>.</p>\n<pre><span class=\"n\">calendar</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"weekdays\"</span><span class=\"p\">)</span>\n</pre>\n<p>If <code>working_days</code> is missing, then common default is used (mon-fri).\nIf <code>holidays</code> is missing, \"no holidays\" assumed.\nIf <code>extra_working_dates</code> is missing, then no changes in <code>working_days</code> will happen.</p>\n<p>Elements of <code>holidays</code> and <code>extra_working_dates</code> may be either strings that <code>Calendar.parse_date()</code> can understand, or YYYY-MM-DD (which is considered as a Date by Python YAML itself).</p>\n<pre><span class=\"nt\">holidays</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">2017-01-08</span> <span class=\"c1\"># Same as January 8th, 2017</span>\n</pre>\n<p>The <code>load_cache</code> method allows a thread safe way to avoid reloading the same calendar multiple times, and provides a performant way to dynamically load calendars for different requests.</p>\n<pre><span class=\"n\">calendar</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"n\">load_cache</span><span class=\"p\">(</span><span class=\"s2\">\"weekdays\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Input data types</h3>\n<p>The <code>parse_date</code> method is used to process the input date(s) in each method and return a <code>datetime.date</code> object.</p>\n<pre><span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"n\">parse_date</span><span class=\"p\">(</span><span class=\"s2\">\"2019-01-01\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; datetime.date(2019, 1, 1)</span>\n</pre>\n<p>Supported data types are:</p>\n<ul>\n<li><code>datetime.date</code></li>\n<li><code>datetime.datetime</code></li>\n<li><code>pandas.Timestamp</code> (treated as <code>datetime.datetime</code>)</li>\n<li>date string parseable by <a href=\"https://dateutil.readthedocs.io/en/stable/parser.html#dateutil.parser.parse\" rel=\"nofollow\"><code>dateutil.parser.parse</code></a></li>\n</ul>\n<p><code>numpy.datetime64</code> is not supported, but can be converted to <code>datetime.date</code>:</p>\n<pre><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">(</span><span class=\"s1\">'2014-06-01T23:00:05.453000000'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">'M8[D]'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">'O'</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt;  datetime.date(2014, 6, 1)</span>\n</pre>\n<h3>Checking for business days</h3>\n<p>To check whether a given date is a business day (falls on one of the specified working days or extra working dates, and is not a holiday), use the <code>is_business_day</code> method on <code>Calendar</code>.</p>\n<pre><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">is_business_day</span><span class=\"p\">(</span><span class=\"s2\">\"Monday, 8 June 2020\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; true</span>\n<span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">is_business_day</span><span class=\"p\">(</span><span class=\"s2\">\"Sunday, 7 June 2020\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; false</span>\n</pre>\n<h3>Custom calendars</h3>\n<p>To use a calendar you've written yourself, you need to add the directory it's stored in as an additional calendar load path:</p>\n<pre><span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"n\">additional_load_paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'path/to/your/calendar/directory'</span><span class=\"p\">]</span>\n</pre>\n<p>You can then load the calendar as normal.</p>\n<h3>Business day arithmetic</h3>\n<blockquote>\n<p>For our purposes, date-based calculations are sufficient. Supporting time-based calculations as well makes the code significantly more complex. We chose to avoid this extra complexity by sticking solely to date-based mathematics.</p>\n</blockquote>\n<p>The <code>add_business_days</code> method is used to perform business day arithmetic on dates.</p>\n<pre><span class=\"n\">input_date</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"n\">parse_date</span><span class=\"p\">(</span><span class=\"s2\">\"Thursday, 12 June 2014\"</span><span class=\"p\">)</span>\n<span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">add_business_days</span><span class=\"p\">(</span><span class=\"n\">input_date</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%A, </span><span class=\"si\">%d</span><span class=\"s2\"> %B %Y\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; \"Wednesday, 18 June 2014\"</span>\n<span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">add_business_days</span><span class=\"p\">(</span><span class=\"n\">input_date</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%A, </span><span class=\"si\">%d</span><span class=\"s2\"> %B %Y\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; \"Friday, 06 June 2014\"</span>\n</pre>\n<p>The <code>roll_forward</code> and <code>roll_backward</code> methods snap a date to a nearby business day. If provided with a business day, they will return that date. Otherwise, they will advance (forward for <code>roll_forward</code> and backward for <code>roll_backward</code>) until a business day is found.</p>\n<pre><span class=\"n\">input_date</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"n\">parse_date</span><span class=\"p\">(</span><span class=\"s2\">\"Saturday, 14 June 2014\"</span><span class=\"p\">)</span>\n<span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">roll_forward</span><span class=\"p\">(</span><span class=\"n\">input_date</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%A, </span><span class=\"si\">%d</span><span class=\"s2\"> %B %Y\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; \"Monday, 16 June 2014\"</span>\n<span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">roll_backward</span><span class=\"p\">(</span><span class=\"n\">input_date</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%A, </span><span class=\"si\">%d</span><span class=\"s2\"> %B %Y\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; \"Friday, 13 June 2014\"</span>\n</pre>\n<p>In contrast, the <code>next_business_day</code> and <code>previous_business_day</code> methods will always move to a next or previous date until a business day is found, regardless if the input provided is a business day.</p>\n<pre><span class=\"n\">input_date</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"n\">parse_date</span><span class=\"p\">(</span><span class=\"s2\">\"Monday, 9 June 2014\"</span><span class=\"p\">)</span>\n<span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">roll_forward</span><span class=\"p\">(</span><span class=\"n\">input_date</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%A, </span><span class=\"si\">%d</span><span class=\"s2\"> %B %Y\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; \"Monday, 09 June 2014\"</span>\n<span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">next_business_day</span><span class=\"p\">(</span><span class=\"n\">input_date</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%A, </span><span class=\"si\">%d</span><span class=\"s2\"> %B %Y\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; \"Tuesday, 10 June 2014\"</span>\n<span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">previous_business_day</span><span class=\"p\">(</span><span class=\"n\">input_date</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%A, </span><span class=\"si\">%d</span><span class=\"s2\"> %B %Y\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; \"Friday, 06 June 2014\"</span>\n</pre>\n<p>To count the number of business days between two dates, pass the dates to <code>business_days_between</code>. This method counts from start of the first date to start of the second date. So, assuming no holidays, there would be two business days between a Monday and a Wednesday.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n\n<span class=\"n\">input_date</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"n\">parse_date</span><span class=\"p\">(</span><span class=\"s2\">\"Saturday, 14 June 2014\"</span><span class=\"p\">)</span>\n<span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">business_days_between</span><span class=\"p\">(</span><span class=\"n\">input_date</span><span class=\"p\">,</span> <span class=\"n\">input_date</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"c1\"># =&gt; 5</span>\n</pre>\n<p>The <code>get_business_day_of_month</code> method return the running total of business days for a given date in that month. This method counts the number of business days from the start of the first day of the month to the given input date.</p>\n<pre><span class=\"n\">input_date</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"n\">parse_date</span><span class=\"p\">(</span><span class=\"s2\">\"Thursday, 12 June 2014\"</span><span class=\"p\">)</span>\n<span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">get_business_day_of_month</span><span class=\"p\">(</span><span class=\"n\">input_date</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; 9</span>\n</pre>\n<h3>Included Calendars</h3>\n<p>We include some calendar data with this package but give no guarantees of its accuracy. The calendars that we include are:</p>\n<ul>\n<li>ACH (United States)</li>\n<li>Bacs</li>\n<li>Bankgirot</li>\n<li>BECS (Australia)</li>\n<li>BECSNZ (New Zealand)</li>\n<li>PAD (Canada)</li>\n<li>Betalingsservice</li>\n<li>Target (SEPA)</li>\n<li>TargetFrance (SEPA + French bank holidays)</li>\n</ul>\n<h2>License &amp; Contributing</h2>\n<ul>\n<li>This is available as open source under the terms of the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT License</a>.</li>\n<li>Bug reports and pull requests are welcome on GitHub at <a href=\"https://github.com/gocardless/business-python\" rel=\"nofollow\">https://github.com/gocardless/business-python</a>.</li>\n</ul>\n<p>GoCardless \u2665 open source. If you do too, come <a href=\"https://gocardless.com/about/jobs\" rel=\"nofollow\">join us</a>.</p>\n\n          </div>"}, "last_serial": 7186826, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "053fbe4224e595e89e826378b95a0c57", "sha256": "d6a9587177c20cbef7df1b65d6ae08de96b1524e82ef8c8f6540c91ce5de42be"}, "downloads": -1, "filename": "business_python-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "053fbe4224e595e89e826378b95a0c57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 13264, "upload_time": "2020-04-20T11:01:44", "upload_time_iso_8601": "2020-04-20T11:01:44.038460Z", "url": "https://files.pythonhosted.org/packages/66/03/381c496c1d3f998bc4fd3a16b8ff27a8c5c7a3e5b4b46fe2db7068f9caa4/business_python-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d18f2bacf3b5d9a67deeae700b44771", "sha256": "803e523c4449c74a17a3a8fa5bd27a251296d402bafa0573c4a1c45c3976b485"}, "downloads": -1, "filename": "business-python-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3d18f2bacf3b5d9a67deeae700b44771", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13341, "upload_time": "2020-04-20T11:01:41", "upload_time_iso_8601": "2020-04-20T11:01:41.547609Z", "url": "https://files.pythonhosted.org/packages/83/5c/e03b2c9b7004ba69b28d6c564866942a44b5160d54c559038c24b4dea856/business-python-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "565ddff30b10bf906265b8f2ce6afcc7", "sha256": "8bd01da19842621d02ea0a953d90e2fb0c8b04436542beb40a9735854be37945"}, "downloads": -1, "filename": "business_python-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "565ddff30b10bf906265b8f2ce6afcc7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 13275, "upload_time": "2020-05-04T09:57:30", "upload_time_iso_8601": "2020-05-04T09:57:30.401364Z", "url": "https://files.pythonhosted.org/packages/1d/ec/6a5b02d45e61de9da77410661c4a5d6f50dcab5732822a76af12ac3db685/business_python-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "429faf970f3b550657c6152e0b81c5a6", "sha256": "aa0c3b5788bfdecaf3ead5e4bf13776a8c7313fc2f269d0dc54d9e4c38091e7c"}, "downloads": -1, "filename": "business-python-1.0.1.tar.gz", "has_sig": false, "md5_digest": "429faf970f3b550657c6152e0b81c5a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13374, "upload_time": "2020-05-04T09:57:29", "upload_time_iso_8601": "2020-05-04T09:57:29.049432Z", "url": "https://files.pythonhosted.org/packages/5d/f5/aa3b05e45330db5619e24afeaaa3e306cf04050f12df33b401848e355d43/business-python-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "9af064b1647066eb944a8b2063b4ef61", "sha256": "3a924ed1b7a060e9910901e13957b1ec750c35a613e12ce92a7efc98653c0dff"}, "downloads": -1, "filename": "business_python-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9af064b1647066eb944a8b2063b4ef61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 13526, "upload_time": "2020-05-07T09:26:56", "upload_time_iso_8601": "2020-05-07T09:26:56.370890Z", "url": "https://files.pythonhosted.org/packages/35/1b/7d5a2c15f41d29b4c376667f0acf48537c0e414ec8cde649058da982027b/business_python-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "801e227a73d944842b5af4c1d56beebe", "sha256": "e1c7159114f81a94d8f9b1f3463d2d5f5103b6a473a07caa6644757c650881bd"}, "downloads": -1, "filename": "business-python-1.0.2.tar.gz", "has_sig": false, "md5_digest": "801e227a73d944842b5af4c1d56beebe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13550, "upload_time": "2020-05-07T09:26:54", "upload_time_iso_8601": "2020-05-07T09:26:54.910803Z", "url": "https://files.pythonhosted.org/packages/df/ed/489ecc0de580afd4fb10f04470234a32dce183078c4d486087bbe6ddf427/business-python-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9af064b1647066eb944a8b2063b4ef61", "sha256": "3a924ed1b7a060e9910901e13957b1ec750c35a613e12ce92a7efc98653c0dff"}, "downloads": -1, "filename": "business_python-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9af064b1647066eb944a8b2063b4ef61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 13526, "upload_time": "2020-05-07T09:26:56", "upload_time_iso_8601": "2020-05-07T09:26:56.370890Z", "url": "https://files.pythonhosted.org/packages/35/1b/7d5a2c15f41d29b4c376667f0acf48537c0e414ec8cde649058da982027b/business_python-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "801e227a73d944842b5af4c1d56beebe", "sha256": "e1c7159114f81a94d8f9b1f3463d2d5f5103b6a473a07caa6644757c650881bd"}, "downloads": -1, "filename": "business-python-1.0.2.tar.gz", "has_sig": false, "md5_digest": "801e227a73d944842b5af4c1d56beebe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13550, "upload_time": "2020-05-07T09:26:54", "upload_time_iso_8601": "2020-05-07T09:26:54.910803Z", "url": "https://files.pythonhosted.org/packages/df/ed/489ecc0de580afd4fb10f04470234a32dce183078c4d486087bbe6ddf427/business-python-1.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:56 2020"}