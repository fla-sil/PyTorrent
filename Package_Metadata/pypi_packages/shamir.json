{"info": {"author": "Kurt Rose", "author_email": "kurt@kurtrose.com", "bugtrack_url": null, "classifiers": [], "description": "shamir\r\n''''''\r\n\r\nFast, secure, pure python implementation of Shamir's secret sharing algorithm.\r\n\r\nhttps://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing\r\n\r\n\r\nwhy to use it\r\n'''''''''''''\r\n\r\nShamir's secret sharing is useful for providing an \"N of M\" layer.\r\nFor example, password recovery security questions could be cryptographically\r\nimeplemented with this algorithm.  Security question answers are\r\nput through a key-derivation-function (KDF) or hash and each one is used to\r\nencrypt a different secret.  Then, the answer to any say 5 of 11 security\r\nquestions would be enouch to recover the secret.\r\n\r\nhow to use it\r\n'''''''''''''\r\n\r\n.. code-block:: python\r\n    secret, shares = make_random_secret(3, 5)\r\n    # generate shares such that 3 of 5 can recover the secret\r\n    secret = recover_secret(shares)\r\n\r\n\r\nShamir's secret sharing algorithm operates on integer X, Y points,\r\nand the secret it stores is a random integer.  To be useful, it must be\r\ncombined with other algorithms.  Here's a high level example:\r\n\r\n.. code-block:: python\r\n    # encrypt, decrypt, hash, and kdf are external functions\r\n\r\n    def two_of_three_encrypt(plaintext, pw0, pw1, pw2):\r\n        'given a plaintext, secure it so that any 2 may access in the future'\r\n        secret, shares = shamir.make_random_shares(2, 3)\r\n        def encrypt_share(share, pw):\r\n            return encrypt(key=kdf(pw), plaintext=repr(share))\r\n        return (\r\n            encrypt(key=hash(hex(secret)), plaintext=plaintext)) + tuple(\r\n            [encrypt(key=kef(pw), plaintext=repr(share))\r\n             for pw, share in zip((pw0, pw1, pw2), shares)])\r\n\r\n    def two_of_three_decrypt(encrypted, pwA, pwB):\r\n        'recover the plaintext given 2 of the 3 passwords used to secure'\r\n        ciphertext, shares = encrypted[0], encrypted[1:]\r\n        keyA, keyB = kdf(pwA), kdf(pwB)\r\n        decrypted_shares = []\r\n        for share in shares:\r\n            for key in (keyA, keyB):\r\n                try:\r\n                    decrypted_shares.append(\r\n                        decrypt(key=keyA, ciphertext=share))\r\n                except Exception:\r\n                    pass\r\n        if len(decrypted_shares) < 2:\r\n            raise ValueError('bad password')\r\n        return decrypt(\r\n            key=hash(hex(shamir.recover_secret(decrypted_shares))),\r\n            ciphertext=ciphertext)\r\n\r\n\r\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kurtbrose/shamir", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "shamir", "package_url": "https://pypi.org/project/shamir/", "platform": "", "project_url": "https://pypi.org/project/shamir/", "project_urls": {"Homepage": "https://github.com/kurtbrose/shamir"}, "release_url": "https://pypi.org/project/shamir/17.12.0/", "requires_dist": null, "requires_python": "", "summary": "", "version": "17.12.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            shamir\n<br>''''''\n<br>\n<br>Fast, secure, pure python implementation of Shamir's secret sharing algorithm.\n<br>\n<br>https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing\n<br>\n<br>\n<br>why to use it\n<br>'''''''''''''\n<br>\n<br>Shamir's secret sharing is useful for providing an \"N of M\" layer.\n<br>For example, password recovery security questions could be cryptographically\n<br>imeplemented with this algorithm.  Security question answers are\n<br>put through a key-derivation-function (KDF) or hash and each one is used to\n<br>encrypt a different secret.  Then, the answer to any say 5 of 11 security\n<br>questions would be enouch to recover the secret.\n<br>\n<br>how to use it\n<br>'''''''''''''\n<br>\n<br>.. code-block:: python\n<br>    secret, shares = make_random_secret(3, 5)\n<br>    # generate shares such that 3 of 5 can recover the secret\n<br>    secret = recover_secret(shares)\n<br>\n<br>\n<br>Shamir's secret sharing algorithm operates on integer X, Y points,\n<br>and the secret it stores is a random integer.  To be useful, it must be\n<br>combined with other algorithms.  Here's a high level example:\n<br>\n<br>.. code-block:: python\n<br>    # encrypt, decrypt, hash, and kdf are external functions\n<br>\n<br>    def two_of_three_encrypt(plaintext, pw0, pw1, pw2):\n<br>        'given a plaintext, secure it so that any 2 may access in the future'\n<br>        secret, shares = shamir.make_random_shares(2, 3)\n<br>        def encrypt_share(share, pw):\n<br>            return encrypt(key=kdf(pw), plaintext=repr(share))\n<br>        return (\n<br>            encrypt(key=hash(hex(secret)), plaintext=plaintext)) + tuple(\n<br>            [encrypt(key=kef(pw), plaintext=repr(share))\n<br>             for pw, share in zip((pw0, pw1, pw2), shares)])\n<br>\n<br>    def two_of_three_decrypt(encrypted, pwA, pwB):\n<br>        'recover the plaintext given 2 of the 3 passwords used to secure'\n<br>        ciphertext, shares = encrypted[0], encrypted[1:]\n<br>        keyA, keyB = kdf(pwA), kdf(pwB)\n<br>        decrypted_shares = []\n<br>        for share in shares:\n<br>            for key in (keyA, keyB):\n<br>                try:\n<br>                    decrypted_shares.append(\n<br>                        decrypt(key=keyA, ciphertext=share))\n<br>                except Exception:\n<br>                    pass\n<br>        if len(decrypted_shares) &lt; 2:\n<br>            raise ValueError('bad password')\n<br>        return decrypt(\n<br>            key=hash(hex(shamir.recover_secret(decrypted_shares))),\n<br>            ciphertext=ciphertext)\n<br>\n<br>\n<br>\n          </div>"}, "last_serial": 3406880, "releases": {"17.12.0": [{"comment_text": "", "digests": {"md5": "26388ef015bffcf1f96ab69a2d1a4dd4", "sha256": "d0d7433faa914e7ebfe10c96577221b31fe00ae0cce9f391c29cf63855a246c1"}, "downloads": -1, "filename": "shamir-17.12.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "26388ef015bffcf1f96ab69a2d1a4dd4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5190, "upload_time": "2017-12-11T08:19:07", "upload_time_iso_8601": "2017-12-11T08:19:07.238869Z", "url": "https://files.pythonhosted.org/packages/5f/d4/8b6dd0cfb3e9a94f5364a2b857dd4467f063b7d7273a0f8b32d251694dd1/shamir-17.12.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9811f01f64e303069601fcec1e813cb6", "sha256": "0b355c78c810e75ee9a140b07aeebac66ef2f623fbc77da612a8b20c5697c043"}, "downloads": -1, "filename": "shamir-17.12.0.tar.gz", "has_sig": false, "md5_digest": "9811f01f64e303069601fcec1e813cb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3361, "upload_time": "2017-12-11T08:19:08", "upload_time_iso_8601": "2017-12-11T08:19:08.555364Z", "url": "https://files.pythonhosted.org/packages/94/65/09838fa1463f36141b63a914ffcd5d488d90214d7ede609ef6d423c00f01/shamir-17.12.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26388ef015bffcf1f96ab69a2d1a4dd4", "sha256": "d0d7433faa914e7ebfe10c96577221b31fe00ae0cce9f391c29cf63855a246c1"}, "downloads": -1, "filename": "shamir-17.12.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "26388ef015bffcf1f96ab69a2d1a4dd4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5190, "upload_time": "2017-12-11T08:19:07", "upload_time_iso_8601": "2017-12-11T08:19:07.238869Z", "url": "https://files.pythonhosted.org/packages/5f/d4/8b6dd0cfb3e9a94f5364a2b857dd4467f063b7d7273a0f8b32d251694dd1/shamir-17.12.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9811f01f64e303069601fcec1e813cb6", "sha256": "0b355c78c810e75ee9a140b07aeebac66ef2f623fbc77da612a8b20c5697c043"}, "downloads": -1, "filename": "shamir-17.12.0.tar.gz", "has_sig": false, "md5_digest": "9811f01f64e303069601fcec1e813cb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3361, "upload_time": "2017-12-11T08:19:08", "upload_time_iso_8601": "2017-12-11T08:19:08.555364Z", "url": "https://files.pythonhosted.org/packages/94/65/09838fa1463f36141b63a914ffcd5d488d90214d7ede609ef6d423c00f01/shamir-17.12.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:49 2020"}