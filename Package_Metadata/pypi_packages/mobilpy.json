{"info": {"author": "Andrei Onel", "author_email": "andrei@edumo.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Topic :: Office/Business :: Financial", "Topic :: Text Processing :: Markup :: XML"], "description": "mobilPy\n=======\n\nmobilPy helps you with everything you need to implement\n`mobilPay <https://www.mobilpay.ro/public/en/>`__'s online payment\nsolution. Steps: - create an account - get approved - create a merchant\n- download keys (private and public) - copy the signature (just a\nstring)\n\n*NOTE* You will have two private keys: for testing and production. The\npublic key is the same.\n\nInstall\n-------\n\nTo install the library, run:\n\n.. code:: sh\n\n    pip install mobilpy\n\nUsage\n-----\n\n.. code:: python\n\n    from mobilpy import Client\n\n    # the signature for your account\n    signature = 'DLAN-1R5V-19EN-XXXX-NFJA'\n    # the path to the public key\n    public_key = \"./sandbox.DLAN-1R5V-19EN-XXXX-NFJA.public.cer\"\n    # the private_key\n    private_key = \"./sandbox.DLAN-1R5V-19EN-XXXX-NFJA.private.key\"\n\n    client = Client(signature=signature, public_key=public_key, private_key=private_key)\n\n    # optional dict containing details about the customer\n    # if they are sent, the customer will have a short checkout by skipping the second step in the payment flow\n    billing_details = {\n        \"first_name\": \"\",\n        \"last_name\": \"\",\n        \"address\": \"\",\n        \"phone\": \"\",\n        \"email\": \"\"\n    }\n    # optional dict with details that you would need internally\n    # these are returned when the webhook is called\n    params = {\n        \"subscription_id\": \"\",\n        \"basket_id\": \"\",\n        etc.\n    }\n\n    options = {\n        \"order_id\": \"\" # int/string, max 64 length\n        \"currency\": \"RON\", # string, RON or other\n        \"amount\": 1, # float, between 0.10 and 99999\n        \"customer_id\": \"\", # int/string\n        \"details\": \"\",  # string, description for this transaction\n        \"billing\": billing_details, # dict, OPTIONAL\n        \"params\": params, # dict, OPTIONAL,\n        \n        # the webhook where the response from mobilPay will be sent\n        \"confirm_url\": \"\",\n        # the url where the user will be redirected\n        \"return_url\": \"\"\n    }\n    response = client.create_payment_data(**options)\n\nThe ``response`` is an dict that has two keys: ``env_key`` and ``data``.\nThese need to be used in the front end and make the request to mobilPay.\n\nFor example, the HTML might look like this:\n\n.. code:: html\n\n    <form action=\"http://sandboxsecure.mobilpay.ro\" method=\"post\">\n        <input type=\"hidden\" name=\"env_key\" value=\"{{ env_key }}\">\n        <input type=\"hidden\" name=\"data\" value=\"{{ data }}\">\n        \n        <input type=\"submit\" value=\"Send\">\n    </form>\n\nThe POST urls for the form are:\n\ntesting:\n  ``http://sandboxsecure.mobilpay.ro`` \nproduction:\n  ``https://secure.mobilpay.ro``\n\nWebhook\n-------\n\nmobilPay will make a ``POST`` request to the url you set as\n``confirm_url``. mobilPy has methods to help you parse it and offer a\nresponse.\n\n.. code:: python\n\n    post = # get the post data\n    env_key = post.get('env_key')\n    data = post.get('data')\n\n    client = Client(signature=signature, public_key=public_key, private_key=private_key)\n\n    request_xml = client.decrypt_message(env_key, data)\n    request_object = client.parse_webhook_request(request_xml)\n\n    # do some magic\n\nIn order to check if the transaction was successful you need to check\n``error_code`` AND ``action``:\n\n.. code:: python\n\n    transaction_successful = request_object.get('error_code') == '0' and request_object.get('action') == 'confirmed'\n    if transaction_successful:\n      # everything is ok\n\nCreating a response\n-------------------\n\nYou need to let mobilPay know if everything is ok on your end or if\nsomething weird happened. If everything is ok you can create a response\nlike this:\n\n.. code:: python\n\n    message = \"All good captain\"\n    response_xml = client.create_reponse(message=message)\n\nIf you had an error:\n\n.. code:: python\n\n    # message that will help you debug. it will appear in your dashboard\n    message = \"Everything is on fire\"\n    # this can be \"1\" (temporary error) or \"2\" (permanent error)\n    error_type = \"1\"\n    # your internal error code. a number maybe. OPTIONAL\n    error_code = ''\n    response_xml = client.create_reponse(message=message, error_type=error_type, error_code=error_code)\n\nThe response doesn't need to be encrypted. Just respond with the xml.\n\nCrediting\n---------\n\nIf a transaction was credited from the Dashboard, mobilPay will make a\nnew webhook ``POST``. You can check for that:\n\n.. code:: python\n\n    # if the transaction was credited from mobilpay\n    if request_object.get('action') == 'credit':\n      # do something\n      # return a reponse\n\nTODO\n====\n\nSome things that still need to be done:\n\n- tests\n- add support for: instalements, recurrence\n- maybe add prefilled credit card data payments?\n\n\nDisclaimer\n----------\nThis library is not associated in any way with mobilPay\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/onel/mobilpy", "keywords": "online payments mobilpay netopia", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mobilpy", "package_url": "https://pypi.org/project/mobilpy/", "platform": "", "project_url": "https://pypi.org/project/mobilpy/", "project_urls": {"Homepage": "https://github.com/onel/mobilpy"}, "release_url": "https://pypi.org/project/mobilpy/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "Library that helps create the XML necessary for online payments with MobilPay", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"mobilpy\">\n<h2>mobilPy</h2>\n<p>mobilPy helps you with everything you need to implement\n<a href=\"https://www.mobilpay.ro/public/en/\" rel=\"nofollow\">mobilPay</a>\u2019s online payment\nsolution. Steps: - create an account - get approved - create a merchant\n- download keys (private and public) - copy the signature (just a\nstring)</p>\n<p><em>NOTE</em> You will have two private keys: for testing and production. The\npublic key is the same.</p>\n<div id=\"install\">\n<h3>Install</h3>\n<p>To install the library, run:</p>\n<pre>pip install mobilpy\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mobilpy</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"c1\"># the signature for your account</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"s1\">'DLAN-1R5V-19EN-XXXX-NFJA'</span>\n<span class=\"c1\"># the path to the public key</span>\n<span class=\"n\">public_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"./sandbox.DLAN-1R5V-19EN-XXXX-NFJA.public.cer\"</span>\n<span class=\"c1\"># the private_key</span>\n<span class=\"n\">private_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"./sandbox.DLAN-1R5V-19EN-XXXX-NFJA.private.key\"</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">public_key</span><span class=\"o\">=</span><span class=\"n\">public_key</span><span class=\"p\">,</span> <span class=\"n\">private_key</span><span class=\"o\">=</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># optional dict containing details about the customer</span>\n<span class=\"c1\"># if they are sent, the customer will have a short checkout by skipping the second step in the payment flow</span>\n<span class=\"n\">billing_details</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"last_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"address\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"phone\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n<span class=\"c1\"># optional dict with details that you would need internally</span>\n<span class=\"c1\"># these are returned when the webhook is called</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"subscription_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"basket_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"n\">etc</span><span class=\"o\">.</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"order_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span> <span class=\"c1\"># int/string, max 64 length</span>\n    <span class=\"s2\">\"currency\"</span><span class=\"p\">:</span> <span class=\"s2\">\"RON\"</span><span class=\"p\">,</span> <span class=\"c1\"># string, RON or other</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"c1\"># float, between 0.10 and 99999</span>\n    <span class=\"s2\">\"customer_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"c1\"># int/string</span>\n    <span class=\"s2\">\"details\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>  <span class=\"c1\"># string, description for this transaction</span>\n    <span class=\"s2\">\"billing\"</span><span class=\"p\">:</span> <span class=\"n\">billing_details</span><span class=\"p\">,</span> <span class=\"c1\"># dict, OPTIONAL</span>\n    <span class=\"s2\">\"params\"</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"c1\"># dict, OPTIONAL,</span>\n\n    <span class=\"c1\"># the webhook where the response from mobilPay will be sent</span>\n    <span class=\"s2\">\"confirm_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># the url where the user will be redirected</span>\n    <span class=\"s2\">\"return_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_payment_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>response</tt> is an dict that has two keys: <tt>env_key</tt> and <tt>data</tt>.\nThese need to be used in the front end and make the request to mobilPay.</p>\n<p>For example, the HTML might look like this:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">\"http://sandboxsecure.mobilpay.ro\"</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">\"post\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"hidden\"</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"env_key\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"{{ env_key }}\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"hidden\"</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"data\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"{{ data }}\"</span><span class=\"p\">&gt;</span>\n\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"Send\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n</pre>\n<p>The POST urls for the form are:</p>\n<dl>\n<dt>testing:</dt>\n<dd><tt><span class=\"pre\">http://sandboxsecure.mobilpay.ro</span></tt></dd>\n<dt>production:</dt>\n<dd><tt><span class=\"pre\">https://secure.mobilpay.ro</span></tt></dd>\n</dl>\n</div>\n<div id=\"webhook\">\n<h3>Webhook</h3>\n<p>mobilPay will make a <tt>POST</tt> request to the url you set as\n<tt>confirm_url</tt>. mobilPy has methods to help you parse it and offer a\nresponse.</p>\n<pre><span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"c1\"># get the post data</span>\n<span class=\"n\">env_key</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'env_key'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">public_key</span><span class=\"o\">=</span><span class=\"n\">public_key</span><span class=\"p\">,</span> <span class=\"n\">private_key</span><span class=\"o\">=</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n\n<span class=\"n\">request_xml</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">decrypt_message</span><span class=\"p\">(</span><span class=\"n\">env_key</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">request_object</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">parse_webhook_request</span><span class=\"p\">(</span><span class=\"n\">request_xml</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># do some magic</span>\n</pre>\n<p>In order to check if the transaction was successful you need to check\n<tt>error_code</tt> AND <tt>action</tt>:</p>\n<pre><span class=\"n\">transaction_successful</span> <span class=\"o\">=</span> <span class=\"n\">request_object</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'error_code'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'0'</span> <span class=\"ow\">and</span> <span class=\"n\">request_object</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'action'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'confirmed'</span>\n<span class=\"k\">if</span> <span class=\"n\">transaction_successful</span><span class=\"p\">:</span>\n  <span class=\"c1\"># everything is ok</span>\n</pre>\n</div>\n<div id=\"creating-a-response\">\n<h3>Creating a response</h3>\n<p>You need to let mobilPay know if everything is ok on your end or if\nsomething weird happened. If everything is ok you can create a response\nlike this:</p>\n<pre><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">\"All good captain\"</span>\n<span class=\"n\">response_xml</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_reponse</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<p>If you had an error:</p>\n<pre><span class=\"c1\"># message that will help you debug. it will appear in your dashboard</span>\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">\"Everything is on fire\"</span>\n<span class=\"c1\"># this can be \"1\" (temporary error) or \"2\" (permanent error)</span>\n<span class=\"n\">error_type</span> <span class=\"o\">=</span> <span class=\"s2\">\"1\"</span>\n<span class=\"c1\"># your internal error code. a number maybe. OPTIONAL</span>\n<span class=\"n\">error_code</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"n\">response_xml</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_reponse</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">error_type</span><span class=\"o\">=</span><span class=\"n\">error_type</span><span class=\"p\">,</span> <span class=\"n\">error_code</span><span class=\"o\">=</span><span class=\"n\">error_code</span><span class=\"p\">)</span>\n</pre>\n<p>The response doesn\u2019t need to be encrypted. Just respond with the xml.</p>\n</div>\n<div id=\"crediting\">\n<h3>Crediting</h3>\n<p>If a transaction was credited from the Dashboard, mobilPay will make a\nnew webhook <tt>POST</tt>. You can check for that:</p>\n<pre><span class=\"c1\"># if the transaction was credited from mobilpay</span>\n<span class=\"k\">if</span> <span class=\"n\">request_object</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'action'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'credit'</span><span class=\"p\">:</span>\n  <span class=\"c1\"># do something</span>\n  <span class=\"c1\"># return a reponse</span>\n</pre>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<p>Some things that still need to be done:</p>\n<ul>\n<li>tests</li>\n<li>add support for: instalements, recurrence</li>\n<li>maybe add prefilled credit card data payments?</li>\n</ul>\n<div id=\"disclaimer\">\n<h3>Disclaimer</h3>\n<p>This library is not associated in any way with mobilPay</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6324549, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "99c641bd270b29e306fcf8dfad23135c", "sha256": "0adc6e7d58d131fb0c65ff1da14e16049643d01c15e7ebec236a12279b55e0ec"}, "downloads": -1, "filename": "mobilpy-0.1.tar.gz", "has_sig": false, "md5_digest": "99c641bd270b29e306fcf8dfad23135c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3947, "upload_time": "2019-01-06T16:51:07", "upload_time_iso_8601": "2019-01-06T16:51:07.841231Z", "url": "https://files.pythonhosted.org/packages/bb/2b/1e7c86429de5a32b95aeee27174ce6aa21b026f0a23ece10396e9f441124/mobilpy-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "66d072f2dc4da2ec5583fab263bc8c3c", "sha256": "913fd01747bb2f7fd8e567e2dfe736a5cfd500ddc535a454469116d1bca90445"}, "downloads": -1, "filename": "mobilpy-0.2.tar.gz", "has_sig": false, "md5_digest": "66d072f2dc4da2ec5583fab263bc8c3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6163, "upload_time": "2019-01-06T19:16:34", "upload_time_iso_8601": "2019-01-06T19:16:34.514520Z", "url": "https://files.pythonhosted.org/packages/c0/9b/e7837bb7ea5dac015de1cc2e59fadd0b264c92de5c7c3bb796b5feb07c7f/mobilpy-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "a05966cae630dd00b57724f6e216b093", "sha256": "6bb0f48cc0b2caffce969118a9212818c6d1bc9903f8cc6e9925b122d2ddefcb"}, "downloads": -1, "filename": "mobilpy-0.3.tar.gz", "has_sig": false, "md5_digest": "a05966cae630dd00b57724f6e216b093", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6212, "upload_time": "2019-01-20T14:48:46", "upload_time_iso_8601": "2019-01-20T14:48:46.152009Z", "url": "https://files.pythonhosted.org/packages/4c/1d/3a5cb669ff80ad4b06403e6c39c5b6a5d29eafaa9aa5e7e4ecd47a5b14f6/mobilpy-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "6807ce6bd7ff495bc024ea89d614304f", "sha256": "07098a3162bd1c09f4a67f395aef6414e6a71bf9e98dfb817194fcf6b65acd40"}, "downloads": -1, "filename": "mobilpy-0.4.tar.gz", "has_sig": false, "md5_digest": "6807ce6bd7ff495bc024ea89d614304f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6438, "upload_time": "2019-12-18T09:39:12", "upload_time_iso_8601": "2019-12-18T09:39:12.467737Z", "url": "https://files.pythonhosted.org/packages/54/ff/fc4e0d80e15665cd9cd4bfd030d4da598e23f9c1cc65f2ecbe4f1dfd6586/mobilpy-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "4b4a3e9177bab182debfa1468b55a58b", "sha256": "e593f2384759b09178e0e07f81ce20a3d775a7f514c443d411e2f19b0a824a9a"}, "downloads": -1, "filename": "mobilpy-0.4.1.tar.gz", "has_sig": false, "md5_digest": "4b4a3e9177bab182debfa1468b55a58b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6435, "upload_time": "2019-12-18T09:53:24", "upload_time_iso_8601": "2019-12-18T09:53:24.554776Z", "url": "https://files.pythonhosted.org/packages/17/7c/dacdc6bceb89e01ad0bc8dfa0d8bc6efe472cfcdbfd82679fea3d9213e22/mobilpy-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b4a3e9177bab182debfa1468b55a58b", "sha256": "e593f2384759b09178e0e07f81ce20a3d775a7f514c443d411e2f19b0a824a9a"}, "downloads": -1, "filename": "mobilpy-0.4.1.tar.gz", "has_sig": false, "md5_digest": "4b4a3e9177bab182debfa1468b55a58b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6435, "upload_time": "2019-12-18T09:53:24", "upload_time_iso_8601": "2019-12-18T09:53:24.554776Z", "url": "https://files.pythonhosted.org/packages/17/7c/dacdc6bceb89e01ad0bc8dfa0d8bc6efe472cfcdbfd82679fea3d9213e22/mobilpy-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:07 2020"}