{"info": {"author": "Martin J. Levy", "author_email": "martin@cloudflare.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "rpki-rtr-client\n===============\n\nINTRODUCTION\n------------\n\nA simple client-side implementation of the RTR\n`RFC8210 <https://tools.ietf.org/html/rfc8210>`__ protocol in Python.\nSee Cloudflare's blogs on\n`RPKI <https://blog.cloudflare.com/tag/rpki/>`__ for more open source\nRPKI code. ## INSTALL Presently the code is easiest to install via\ngithub.\n\n::\n\n       $ pip3 install pytricia\n       ...\n       $\n\n       $ git clone https://github.com/cloudflare/rpki-rtr-client.git\n       ...\n       $ cd rpki-rtr-client\n       $\n\nThe `pytricia <https://pypi.org/project/pytricia/>`__ package is used\nfor storing a routing table. ## USAGE Cloudflare provides an open RTR\nserver at ``rtr.rpki.cloudflare.com`` port ``8282`` based on\nCloudflare's `GoRTR <https://github.com/cloudflare/gortr>`__ open source\nRTR server.\n\nUsage is via the ``--help`` argument.\n\n::\n\n       $ rtr_client/rtr_client.py --help\n       usage: rtr_client [-H|--help] [-v|--verbose] [-h|--host] hostname [-p|--port] portnumber [-s|--serial] serialnumber [-t|--timeout] seconds [-d|--dump] \n       $\n\nThe Cloudflare open RTR server default hostname and port are compiled\ninto the source code. You can specify your own host and port via the\ncommand line ``-h|--host`` and ``-p|--port`` arguments.\n\n::\n\n       $ rtr_client/rtr_client.py --host rtr.rpki.cloudflare.com --port 8282\n       ...\n       ^C\n       $\n\nA modocom of debug information is available to show the serial number\nand the progress of accepting announce/widthdraw valid ROAs. The code\nwill always show the progress of serial numbers plus the number of valid\nROAs associated with that serial number.\n\n::\n\n       DUMP ROUTES: serial=133 announce=130401/withdraw=0\n       NEW SERIAL 0->133\n\nAs the protocol continues to sync, the messages show progress on the\nrouting list.\n\n::\n\n       DUMP ROUTES: serial=381 announce=18/withdraw=2\n       NEW SERIAL 380->381\n\nThe ``.`` debug message simply mean that PDUs have been transfered\nbetween RTR server and RTR client.\n\nDATA FILES\n----------\n\nThere's a data directory created with JSON files of every serial numbers\nworth of ROA data. The directory is sorted by ``YYYY-MM`` and the files\ninclude the full date (in UTC).\n\n::\n\n       $ ls -lt data/\n       total 0\n       drwxr-xr-x  7 martin martin  224 Feb 11 09:36 2020-02\n       $\n\n       $ ls -lt data/2020-02\n       total 21592\n       -rw-r--r--  1 martin martin  5520676 Feb 16 18:22 2020-02-17-022209.routes.00000365.json\n       -rw-r--r--  1 martin martin  5520676 Feb 16 18:42 2020-02-17-024242.routes.00000838.json\n       -rw-r--r--  1 martin martin      412 Feb 16 19:56 2020-02-17-035645.routes.00000841.json\n       -rw-r--r--  1 martin martin      272 Feb 16 20:16 2020-02-17-041647.routes.00000842.json\n       -rw-r--r--  1 martin martin      643 Feb 16 20:36 2020-02-17-043649.routes.00000843.json\n       $\n\nYou can review those files for how many RTR announce/withdraw ROAs were\nprocessed.\n\n::\n\n       $ for f in data/2020-02/*.json ; do echo \"$f `jq -r '.routes.announce[]|.ip' < $f | wc -l` `jq -r '.routes.withdraw[]|.ip' < $f | wc -l`\" ; done\n       data/2020-02/2020-02-17-022209.routes.00000365.json   128483        0\n       data/2020-02/2020-02-17-024242.routes.00000838.json   128483        0\n       data/2020-02/2020-02-17-035645.routes.00000841.json        3        6\n       data/2020-02/2020-02-17-041647.routes.00000842.json        5        0\n       data/2020-02/2020-02-17-043649.routes.00000843.json        9        5\n       $\n\nYou can list the ROAs. A ``null`` mean that no MaxLen has been specified\nin the ROA.\n\n::\n\n       $ jq -r '.routes.announce[]|.ip,.asn,.maxlen' data/2020-02/*0838.json | paste - - - | sort -V | head\n       1.0.0.0/24      13335   null\n       1.1.1.0/24      13335   null\n       1.9.0.0/16      4788    24\n       1.9.12.0/24     65037   null\n       1.9.21.0/24     24514   null\n       1.9.23.0/24     65120   null\n       1.9.31.0/24     65077   null\n       1.9.65.0/24     24514   null\n       1.34.0.0/15     3462    24\n       1.36.0.0/16     4760    null\n       $\n\nAdditionally, the full list of valid ROAs is dumped into\n``data/routingtable.json`` which can then be used the ``show`` command:\n\n::\n\n       $ rtr_client/rtr_show.py 1.37.0.0/16 112.198.0.0/16\n       ROUTE            ROA              MaxLen ASN\n       1.37.0.0/16      1.37.0.0/16         /17 AS4775\n       ROUTE            ROA              MaxLen ASN\n       112.198.0.0/16   112.198.0.0/16      /24 AS4775\n       $\n\nThe ``-l`` argument will show add more specific ROAs.\n\nThe code can also dump the raw binary protocol and then replay that data\nto debug the protocol with the ``-d|--dump`` argument. This generates a\n``data/__________-raw-data.bin`` file. The ``file_process.py`` command\nwill process that file.\n\nCHANGELOG\n---------\n\n-  This is the first release and while it works, it is not ready for\n   prime time\n-  Directory format updated to split by YYYY-MM in case it gets big\n   (plus the serial number may not be sequential)\n-  Moved from 3rd party ``netaddr`` package to Python's ``ipaddress``\n   data type\n-  All internal cidr's are stored as ``ipaddress`` types and JSON\n   processing now handles that type correctly\n-  Added valid route table and show command\n-  Renamed show.py to rtr\\_show.py\n-  moved code to rtr\\_client folder\n-  Added -V/--version flags\n-  Added support for tracking session\\_id's\n-  Fixed route dump duplication after session restart\n-  First pass at pypi packaging\n\nLICENSE\n-------\n\nLicensed under the BSD 3 License. See `LICENSE.txt <LICENSE.txt>`__\nfile.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cloudflare/rpki-rtr-client", "keywords": "RFC9210", "license": "BSD 3", "maintainer": "", "maintainer_email": "", "name": "rpki-rtr-client", "package_url": "https://pypi.org/project/rpki-rtr-client/", "platform": "", "project_url": "https://pypi.org/project/rpki-rtr-client/", "project_urls": {"Homepage": "https://github.com/cloudflare/rpki-rtr-client"}, "release_url": "https://pypi.org/project/rpki-rtr-client/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "A simple client-side implementation of the RTR RFC8210 protocol in Python", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>INTRODUCTION</h2>\n<p>A simple client-side implementation of the RTR\n<a href=\"https://tools.ietf.org/html/rfc8210\" rel=\"nofollow\">RFC8210</a> protocol in Python.\nSee Cloudflare\u2019s blogs on\n<a href=\"https://blog.cloudflare.com/tag/rpki/\" rel=\"nofollow\">RPKI</a> for more open source\nRPKI code. ## INSTALL Presently the code is easiest to install via\ngithub.</p>\n<pre>$ pip3 install pytricia\n...\n$\n\n$ git clone https://github.com/cloudflare/rpki-rtr-client.git\n...\n$ cd rpki-rtr-client\n$\n</pre>\n<p>The <a href=\"https://pypi.org/project/pytricia/\" rel=\"nofollow\">pytricia</a> package is used\nfor storing a routing table. ## USAGE Cloudflare provides an open RTR\nserver at <tt>rtr.rpki.cloudflare.com</tt> port <tt>8282</tt> based on\nCloudflare\u2019s <a href=\"https://github.com/cloudflare/gortr\" rel=\"nofollow\">GoRTR</a> open source\nRTR server.</p>\n<p>Usage is via the <tt><span class=\"pre\">--help</span></tt> argument.</p>\n<pre>$ rtr_client/rtr_client.py --help\nusage: rtr_client [-H|--help] [-v|--verbose] [-h|--host] hostname [-p|--port] portnumber [-s|--serial] serialnumber [-t|--timeout] seconds [-d|--dump]\n$\n</pre>\n<p>The Cloudflare open RTR server default hostname and port are compiled\ninto the source code. You can specify your own host and port via the\ncommand line <tt><span class=\"pre\">-h|--host</span></tt> and <tt><span class=\"pre\">-p|--port</span></tt> arguments.</p>\n<pre>$ rtr_client/rtr_client.py --host rtr.rpki.cloudflare.com --port 8282\n...\n^C\n$\n</pre>\n<p>A modocom of debug information is available to show the serial number\nand the progress of accepting announce/widthdraw valid ROAs. The code\nwill always show the progress of serial numbers plus the number of valid\nROAs associated with that serial number.</p>\n<pre>DUMP ROUTES: serial=133 announce=130401/withdraw=0\nNEW SERIAL 0-&gt;133\n</pre>\n<p>As the protocol continues to sync, the messages show progress on the\nrouting list.</p>\n<pre>DUMP ROUTES: serial=381 announce=18/withdraw=2\nNEW SERIAL 380-&gt;381\n</pre>\n<p>The <tt>.</tt> debug message simply mean that PDUs have been transfered\nbetween RTR server and RTR client.</p>\n</div>\n<div id=\"data-files\">\n<h2>DATA FILES</h2>\n<p>There\u2019s a data directory created with JSON files of every serial numbers\nworth of ROA data. The directory is sorted by <tt><span class=\"pre\">YYYY-MM</span></tt> and the files\ninclude the full date (in UTC).</p>\n<pre>$ ls -lt data/\ntotal 0\ndrwxr-xr-x  7 martin martin  224 Feb 11 09:36 2020-02\n$\n\n$ ls -lt data/2020-02\ntotal 21592\n-rw-r--r--  1 martin martin  5520676 Feb 16 18:22 2020-02-17-022209.routes.00000365.json\n-rw-r--r--  1 martin martin  5520676 Feb 16 18:42 2020-02-17-024242.routes.00000838.json\n-rw-r--r--  1 martin martin      412 Feb 16 19:56 2020-02-17-035645.routes.00000841.json\n-rw-r--r--  1 martin martin      272 Feb 16 20:16 2020-02-17-041647.routes.00000842.json\n-rw-r--r--  1 martin martin      643 Feb 16 20:36 2020-02-17-043649.routes.00000843.json\n$\n</pre>\n<p>You can review those files for how many RTR announce/withdraw ROAs were\nprocessed.</p>\n<pre>$ for f in data/2020-02/*.json ; do echo \"$f `jq -r '.routes.announce[]|.ip' &lt; $f | wc -l` `jq -r '.routes.withdraw[]|.ip' &lt; $f | wc -l`\" ; done\ndata/2020-02/2020-02-17-022209.routes.00000365.json   128483        0\ndata/2020-02/2020-02-17-024242.routes.00000838.json   128483        0\ndata/2020-02/2020-02-17-035645.routes.00000841.json        3        6\ndata/2020-02/2020-02-17-041647.routes.00000842.json        5        0\ndata/2020-02/2020-02-17-043649.routes.00000843.json        9        5\n$\n</pre>\n<p>You can list the ROAs. A <tt>null</tt> mean that no MaxLen has been specified\nin the ROA.</p>\n<pre>$ jq -r '.routes.announce[]|.ip,.asn,.maxlen' data/2020-02/*0838.json | paste - - - | sort -V | head\n1.0.0.0/24      13335   null\n1.1.1.0/24      13335   null\n1.9.0.0/16      4788    24\n1.9.12.0/24     65037   null\n1.9.21.0/24     24514   null\n1.9.23.0/24     65120   null\n1.9.31.0/24     65077   null\n1.9.65.0/24     24514   null\n1.34.0.0/15     3462    24\n1.36.0.0/16     4760    null\n$\n</pre>\n<p>Additionally, the full list of valid ROAs is dumped into\n<tt>data/routingtable.json</tt> which can then be used the <tt>show</tt> command:</p>\n<pre>$ rtr_client/rtr_show.py 1.37.0.0/16 112.198.0.0/16\nROUTE            ROA              MaxLen ASN\n1.37.0.0/16      1.37.0.0/16         /17 AS4775\nROUTE            ROA              MaxLen ASN\n112.198.0.0/16   112.198.0.0/16      /24 AS4775\n$\n</pre>\n<p>The <tt><span class=\"pre\">-l</span></tt> argument will show add more specific ROAs.</p>\n<p>The code can also dump the raw binary protocol and then replay that data\nto debug the protocol with the <tt><span class=\"pre\">-d|--dump</span></tt> argument. This generates a\n<tt><span class=\"pre\">data/__________-raw-data.bin</span></tt> file. The <tt>file_process.py</tt> command\nwill process that file.</p>\n</div>\n<div id=\"changelog\">\n<h2>CHANGELOG</h2>\n<ul>\n<li>This is the first release and while it works, it is not ready for\nprime time</li>\n<li>Directory format updated to split by YYYY-MM in case it gets big\n(plus the serial number may not be sequential)</li>\n<li>Moved from 3rd party <tt>netaddr</tt> package to Python\u2019s <tt>ipaddress</tt>\ndata type</li>\n<li>All internal cidr\u2019s are stored as <tt>ipaddress</tt> types and JSON\nprocessing now handles that type correctly</li>\n<li>Added valid route table and show command</li>\n<li>Renamed show.py to rtr_show.py</li>\n<li>moved code to rtr_client folder</li>\n<li>Added -V/\u2013version flags</li>\n<li>Added support for tracking session_id\u2019s</li>\n<li>Fixed route dump duplication after session restart</li>\n<li>First pass at pypi packaging</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>LICENSE</h2>\n<p>Licensed under the BSD 3 License. See <a href=\"LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a>\nfile.</p>\n</div>\n\n          </div>"}, "last_serial": 6963607, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "8715567d1dcc2c2df7f9baafc15d9cd6", "sha256": "7475521f21ef2d6970d6923532fde319e52fd1af4eef8bba0726fcb6aedf7d67"}, "downloads": -1, "filename": "rpki-rtr-client-1.0.2.tar.gz", "has_sig": true, "md5_digest": "8715567d1dcc2c2df7f9baafc15d9cd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11498, "upload_time": "2020-03-05T04:48:13", "upload_time_iso_8601": "2020-03-05T04:48:13.741655Z", "url": "https://files.pythonhosted.org/packages/37/03/b5d491b6d992cd7159989c2399427a04b88b09e4111ad4a93d3bd2555f9a/rpki-rtr-client-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "ef033fd991ef38e4243005c1c9ccab10", "sha256": "1a0cd6f084be433d26b7b295ee8dff134c68e72ab23a77b867183ab3cee63061"}, "downloads": -1, "filename": "rpki-rtr-client-1.0.3.tar.gz", "has_sig": true, "md5_digest": "ef033fd991ef38e4243005c1c9ccab10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11846, "upload_time": "2020-04-06T18:37:11", "upload_time_iso_8601": "2020-04-06T18:37:11.435016Z", "url": "https://files.pythonhosted.org/packages/fb/bf/7d6e09b48ff60282deeedbf23b6b0d33549735f4d09ddab1c7e16e4c1a32/rpki-rtr-client-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef033fd991ef38e4243005c1c9ccab10", "sha256": "1a0cd6f084be433d26b7b295ee8dff134c68e72ab23a77b867183ab3cee63061"}, "downloads": -1, "filename": "rpki-rtr-client-1.0.3.tar.gz", "has_sig": true, "md5_digest": "ef033fd991ef38e4243005c1c9ccab10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11846, "upload_time": "2020-04-06T18:37:11", "upload_time_iso_8601": "2020-04-06T18:37:11.435016Z", "url": "https://files.pythonhosted.org/packages/fb/bf/7d6e09b48ff60282deeedbf23b6b0d33549735f4d09ddab1c7e16e4c1a32/rpki-rtr-client-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:52 2020"}