{"info": {"author": "openAware B.V.", "author_email": "legal@openaware.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Python Substrate Interface\n\n[![Travis CI Build Status](https://api.travis-ci.org/polkascan/py-substrate-interface.svg?branch=master)](https://travis-ci.org/polkascan/py-substrate-interface)\n[![Latest Version](https://img.shields.io/pypi/v/substrateinterface.svg)](https://pypi.org/project/substrateinterface/) \n[![Supported Python versions](https://img.shields.io/pypi/pyversions/substrateinterface.svg)](https://pypi.org/project/substrateinterface/)\n[![License](https://img.shields.io/pypi/l/substrateinterface.svg)](https://github.com/polkascan/py-substrate-interface/blob/master/LICENSE)\n\nPython Substrate Interface Library\n\n## Description\nThis library specializes in interfacing with a Substrate node, providing additional convenience methods to deal with\nSCALE encoding/decoding (the default output and input format of the Substrate JSONRPC), metadata parsing, type registry \nmanagement and versioning of types.\n\n## Documentation\nhttps://polkascan.github.io/py-substrate-interface/\n\n## Installation\n```bash\npip install substrateinterface\n```\n\n## Examples\n\nSimple example, initialize interface and get head block hash of Kusama chain:\n\n### Initialization\n\n```python\nsubstrate = SubstrateInterface(\n    url=\"wss://kusama-rpc.polkadot.io/\",\n    address_type=2,\n    type_registry_preset='kusama'\n)\n\nsubstrate.get_chain_head() \n```\nNote on support for wss, this is still quite limited at the moment as connections are not reused yet. Until support is\nimproved it is prefered to use http endpoints (e.g. http://127.0.0.1:9933)\n\n### Get extrinsics for a certain block\n\n```python\n# Set block_hash to None for chaintip\nblock_hash = \"0x588930468212316d8a75ede0bec0bc949451c164e2cea07ccfc425f497b077b7\"\n\n# Retrieve extrinsics in block\nresult = substrate.get_runtime_block(block_hash=block_hash)\n\nfor extrinsic in result['block']['extrinsics']:\n\n    if 'account_id' in extrinsic:\n        signed_by_address = ss58_encode(address=extrinsic['account_id'], address_type=2)\n    else:\n        signed_by_address = None\n\n    print('\\nModule: {}\\nCall: {}\\nSigned by: {}'.format(\n        extrinsic['call_module'],\n        extrinsic['call_function'],\n        signed_by_address\n    ))\n\n    # Loop through params\n    for param in extrinsic['params']:\n\n        if param['type'] == 'Address':\n            param['value'] = ss58_encode(address=param['value'], address_type=2)\n\n        if param['type'] == 'Compact<Balance>':\n            param['value'] = '{} DOT'.format(param['value'] / 10**12)\n\n        print(\"Param '{}': {}\".format(param['name'], param['value']))\n```\n\n\n### Make a storage call\nThe modules and storage functions are provided in the metadata (see `substrate.get_metadata_storage_functions()`), \nparameters will be automatically converted to SCALE-bytes (also including decoding of SS58 addresses).   \n\n```python\nprint(\"\\n\\nCurrent balance: {} DOT\".format(\n    substrate.get_runtime_state(\n        module='Balances',\n        storage_function='FreeBalance',\n        params=['EaG2CRhJWPb7qmdcJvy3LiWdh26Jreu9Dx6R1rXxPmYXoDk']\n    ).get('result') / 10**12\n))\n```\n\nOr get a historic balance at a certain block hash:\n\n```python\nprint(\"Balance @ {}: {} DOT\".format(\n    block_hash, \n    substrate.get_runtime_state(\n        module='Balances',\n        storage_function='FreeBalance',\n        params=['EaG2CRhJWPb7qmdcJvy3LiWdh26Jreu9Dx6R1rXxPmYXoDk'],\n        block_hash=block_hash\n    ).get('result') / 10**12\n))\n```\n\n### Compose call\n\nPy-substrate-interface will also let you compose calls you can use as an unsigned extrinsic or as a proposal:\n\n```python\npayload = substrate.compose_call(\n    call_module='Balances',\n    call_function='transfer',\n    call_params={\n        'dest': 'EaG2CRhJWPb7qmdcJvy3LiWdh26Jreu9Dx6R1rXxPmYXoDk',\n        'value': 1000000000000\n    }\n)\n```\n\nPy-substrate-interface makes it also possible to easily interprete changed types and historic runtimes. As an example\nwe create an (not very useful) historic call of a module that has been removed later on: retrieval of historic metadata and \napply the correct version of types in the type registry is all done automatically. Because parsing of metadata and \ntype registry is quite heavy, the result will be cached per runtime id. In the future there could be support for \ncaching backends like Redis to make this cache more persistent.\n\nCreate an unsigned extrinsic of a module that was removed by providing block hash:\n\n```python\npayload = substrate.compose_call(\n    call_module='Nicks',\n    call_function='clear_name',\n    call_params={},\n    block_hash=\"0x918107632d7994d50f3661db3af353d2aa378f696e47a393bab573f63f7d6c3a\"\n)\n```\n\n## License\nhttps://github.com/polkascan/py-substrate-interface/blob/master/LICENSE\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/polkascan/py-substrate-interface", "keywords": "interface polkascan polkadot substrate blockchain rpc", "license": "", "maintainer": "", "maintainer_email": "", "name": "substrateinterface", "package_url": "https://pypi.org/project/substrateinterface/", "platform": "", "project_url": "https://pypi.org/project/substrateinterface/", "project_urls": {"Homepage": "https://github.com/polkascan/py-substrate-interface"}, "release_url": "https://pypi.org/project/substrateinterface/0.9.3/", "requires_dist": ["asyncio (==3.4.3)", "websockets (==8.1)", "base58 (==1.0.3)", "certifi (==2019.6.16)", "chardet (==3.0.4)", "idna (==2.8)", "requests (==2.22.0)", "urllib3 (==1.25.3)", "xxhash (==1.3.0)", "scalecodec (>=0.9.3)", "coverage ; extra == 'test'", "pytest ; extra == 'test'"], "requires_python": ">=3.6, <4", "summary": "Library for interfacing with a Substrate node", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Substrate Interface</h1>\n<p><a href=\"https://travis-ci.org/polkascan/py-substrate-interface\" rel=\"nofollow\"><img alt=\"Travis CI Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a076c7aa353a62621dd79baccffbb8c59cfebc95/68747470733a2f2f6170692e7472617669732d63692e6f72672f706f6c6b617363616e2f70792d7375627374726174652d696e746572666163652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/substrateinterface/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/adc51d9f6fc14b5cd0d940c28bfe97601b4e1e94/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f737562737472617465696e746572666163652e737667\"></a>\n<a href=\"https://pypi.org/project/substrateinterface/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63ff734b6acd4e123ce67884d0fb16c997c2261b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f737562737472617465696e746572666163652e737667\"></a>\n<a href=\"https://github.com/polkascan/py-substrate-interface/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe5fb6c52ed485e5ab23e168b8ce6a5b2dc77891/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f737562737472617465696e746572666163652e737667\"></a></p>\n<p>Python Substrate Interface Library</p>\n<h2>Description</h2>\n<p>This library specializes in interfacing with a Substrate node, providing additional convenience methods to deal with\nSCALE encoding/decoding (the default output and input format of the Substrate JSONRPC), metadata parsing, type registry\nmanagement and versioning of types.</p>\n<h2>Documentation</h2>\n<p><a href=\"https://polkascan.github.io/py-substrate-interface/\" rel=\"nofollow\">https://polkascan.github.io/py-substrate-interface/</a></p>\n<h2>Installation</h2>\n<pre>pip install substrateinterface\n</pre>\n<h2>Examples</h2>\n<p>Simple example, initialize interface and get head block hash of Kusama chain:</p>\n<h3>Initialization</h3>\n<pre><span class=\"n\">substrate</span> <span class=\"o\">=</span> <span class=\"n\">SubstrateInterface</span><span class=\"p\">(</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"wss://kusama-rpc.polkadot.io/\"</span><span class=\"p\">,</span>\n    <span class=\"n\">address_type</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">type_registry_preset</span><span class=\"o\">=</span><span class=\"s1\">'kusama'</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">substrate</span><span class=\"o\">.</span><span class=\"n\">get_chain_head</span><span class=\"p\">()</span> \n</pre>\n<p>Note on support for wss, this is still quite limited at the moment as connections are not reused yet. Until support is\nimproved it is prefered to use http endpoints (e.g. <a href=\"http://127.0.0.1:9933\" rel=\"nofollow\">http://127.0.0.1:9933</a>)</p>\n<h3>Get extrinsics for a certain block</h3>\n<pre><span class=\"c1\"># Set block_hash to None for chaintip</span>\n<span class=\"n\">block_hash</span> <span class=\"o\">=</span> <span class=\"s2\">\"0x588930468212316d8a75ede0bec0bc949451c164e2cea07ccfc425f497b077b7\"</span>\n\n<span class=\"c1\"># Retrieve extrinsics in block</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">substrate</span><span class=\"o\">.</span><span class=\"n\">get_runtime_block</span><span class=\"p\">(</span><span class=\"n\">block_hash</span><span class=\"o\">=</span><span class=\"n\">block_hash</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">extrinsic</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'block'</span><span class=\"p\">][</span><span class=\"s1\">'extrinsics'</span><span class=\"p\">]:</span>\n\n    <span class=\"k\">if</span> <span class=\"s1\">'account_id'</span> <span class=\"ow\">in</span> <span class=\"n\">extrinsic</span><span class=\"p\">:</span>\n        <span class=\"n\">signed_by_address</span> <span class=\"o\">=</span> <span class=\"n\">ss58_encode</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"n\">extrinsic</span><span class=\"p\">[</span><span class=\"s1\">'account_id'</span><span class=\"p\">],</span> <span class=\"n\">address_type</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">signed_by_address</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">Module: </span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\">Call: </span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\">Signed by: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">extrinsic</span><span class=\"p\">[</span><span class=\"s1\">'call_module'</span><span class=\"p\">],</span>\n        <span class=\"n\">extrinsic</span><span class=\"p\">[</span><span class=\"s1\">'call_function'</span><span class=\"p\">],</span>\n        <span class=\"n\">signed_by_address</span>\n    <span class=\"p\">))</span>\n\n    <span class=\"c1\"># Loop through params</span>\n    <span class=\"k\">for</span> <span class=\"n\">param</span> <span class=\"ow\">in</span> <span class=\"n\">extrinsic</span><span class=\"p\">[</span><span class=\"s1\">'params'</span><span class=\"p\">]:</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">param</span><span class=\"p\">[</span><span class=\"s1\">'type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'Address'</span><span class=\"p\">:</span>\n            <span class=\"n\">param</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ss58_encode</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"n\">param</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">],</span> <span class=\"n\">address_type</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">param</span><span class=\"p\">[</span><span class=\"s1\">'type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'Compact&lt;Balance&gt;'</span><span class=\"p\">:</span>\n            <span class=\"n\">param</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> DOT'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Param '</span><span class=\"si\">{}</span><span class=\"s2\">': </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">],</span> <span class=\"n\">param</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">]))</span>\n</pre>\n<h3>Make a storage call</h3>\n<p>The modules and storage functions are provided in the metadata (see <code>substrate.get_metadata_storage_functions()</code>),\nparameters will be automatically converted to SCALE-bytes (also including decoding of SS58 addresses).</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">Current balance: </span><span class=\"si\">{}</span><span class=\"s2\"> DOT\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n    <span class=\"n\">substrate</span><span class=\"o\">.</span><span class=\"n\">get_runtime_state</span><span class=\"p\">(</span>\n        <span class=\"n\">module</span><span class=\"o\">=</span><span class=\"s1\">'Balances'</span><span class=\"p\">,</span>\n        <span class=\"n\">storage_function</span><span class=\"o\">=</span><span class=\"s1\">'FreeBalance'</span><span class=\"p\">,</span>\n        <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'EaG2CRhJWPb7qmdcJvy3LiWdh26Jreu9Dx6R1rXxPmYXoDk'</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'result'</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">12</span>\n<span class=\"p\">))</span>\n</pre>\n<p>Or get a historic balance at a certain block hash:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Balance @ </span><span class=\"si\">{}</span><span class=\"s2\">: </span><span class=\"si\">{}</span><span class=\"s2\"> DOT\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n    <span class=\"n\">block_hash</span><span class=\"p\">,</span> \n    <span class=\"n\">substrate</span><span class=\"o\">.</span><span class=\"n\">get_runtime_state</span><span class=\"p\">(</span>\n        <span class=\"n\">module</span><span class=\"o\">=</span><span class=\"s1\">'Balances'</span><span class=\"p\">,</span>\n        <span class=\"n\">storage_function</span><span class=\"o\">=</span><span class=\"s1\">'FreeBalance'</span><span class=\"p\">,</span>\n        <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'EaG2CRhJWPb7qmdcJvy3LiWdh26Jreu9Dx6R1rXxPmYXoDk'</span><span class=\"p\">],</span>\n        <span class=\"n\">block_hash</span><span class=\"o\">=</span><span class=\"n\">block_hash</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'result'</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">12</span>\n<span class=\"p\">))</span>\n</pre>\n<h3>Compose call</h3>\n<p>Py-substrate-interface will also let you compose calls you can use as an unsigned extrinsic or as a proposal:</p>\n<pre><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">substrate</span><span class=\"o\">.</span><span class=\"n\">compose_call</span><span class=\"p\">(</span>\n    <span class=\"n\">call_module</span><span class=\"o\">=</span><span class=\"s1\">'Balances'</span><span class=\"p\">,</span>\n    <span class=\"n\">call_function</span><span class=\"o\">=</span><span class=\"s1\">'transfer'</span><span class=\"p\">,</span>\n    <span class=\"n\">call_params</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'dest'</span><span class=\"p\">:</span> <span class=\"s1\">'EaG2CRhJWPb7qmdcJvy3LiWdh26Jreu9Dx6R1rXxPmYXoDk'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">1000000000000</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Py-substrate-interface makes it also possible to easily interprete changed types and historic runtimes. As an example\nwe create an (not very useful) historic call of a module that has been removed later on: retrieval of historic metadata and\napply the correct version of types in the type registry is all done automatically. Because parsing of metadata and\ntype registry is quite heavy, the result will be cached per runtime id. In the future there could be support for\ncaching backends like Redis to make this cache more persistent.</p>\n<p>Create an unsigned extrinsic of a module that was removed by providing block hash:</p>\n<pre><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">substrate</span><span class=\"o\">.</span><span class=\"n\">compose_call</span><span class=\"p\">(</span>\n    <span class=\"n\">call_module</span><span class=\"o\">=</span><span class=\"s1\">'Nicks'</span><span class=\"p\">,</span>\n    <span class=\"n\">call_function</span><span class=\"o\">=</span><span class=\"s1\">'clear_name'</span><span class=\"p\">,</span>\n    <span class=\"n\">call_params</span><span class=\"o\">=</span><span class=\"p\">{},</span>\n    <span class=\"n\">block_hash</span><span class=\"o\">=</span><span class=\"s2\">\"0x918107632d7994d50f3661db3af353d2aa378f696e47a393bab573f63f7d6c3a\"</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>License</h2>\n<p><a href=\"https://github.com/polkascan/py-substrate-interface/blob/master/LICENSE\" rel=\"nofollow\">https://github.com/polkascan/py-substrate-interface/blob/master/LICENSE</a></p>\n\n          </div>"}, "last_serial": 6571888, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "2053d8072ce74d94c127d36942b7e1b4", "sha256": "35468145dfa88bab21393e8320b116327ba64fe2183a4b53312f0cbbd332e72e"}, "downloads": -1, "filename": "substrateinterface-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2053d8072ce74d94c127d36942b7e1b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 55819, "upload_time": "2020-01-30T20:52:17", "upload_time_iso_8601": "2020-01-30T20:52:17.036450Z", "url": "https://files.pythonhosted.org/packages/4b/6f/1edcb2f3dd005cc6d995567ea2e08ace2a95c78034e2420b52ea23125e5f/substrateinterface-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb54967fd6fcbd2aa9199c1d65af64ef", "sha256": "91ef2320e1c0960148a5992c08d6d29bff43e832bb6661c70dc3a92edf8096b6"}, "downloads": -1, "filename": "substrateinterface-0.9.0.tar.gz", "has_sig": false, "md5_digest": "eb54967fd6fcbd2aa9199c1d65af64ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 44528, "upload_time": "2020-01-30T20:52:19", "upload_time_iso_8601": "2020-01-30T20:52:19.326366Z", "url": "https://files.pythonhosted.org/packages/66/5d/81b52e9a925133b819e214d55436d0b701b22bbe0c7b9930e7f8b26ba172/substrateinterface-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "e05ab0010ce2f54f668dcf8a65d30484", "sha256": "ff194a12dd5005647fd8f6917004ccdd17b134b7ee2a11bd81a464fcb3189fae"}, "downloads": -1, "filename": "substrateinterface-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e05ab0010ce2f54f668dcf8a65d30484", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 56067, "upload_time": "2020-01-31T08:44:32", "upload_time_iso_8601": "2020-01-31T08:44:32.342414Z", "url": "https://files.pythonhosted.org/packages/49/13/ef88418bd74fe9209eaad614b9e12f073c3e8884ac71069b3b6fa1974bc2/substrateinterface-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42e8b13782574e67691ee8070d90af98", "sha256": "a43af9c812d7211dace3d6988b722fb6c1c405ee7fc07c44b39db68bf078415a"}, "downloads": -1, "filename": "substrateinterface-0.9.1.tar.gz", "has_sig": false, "md5_digest": "42e8b13782574e67691ee8070d90af98", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 44760, "upload_time": "2020-01-31T08:44:35", "upload_time_iso_8601": "2020-01-31T08:44:35.454575Z", "url": "https://files.pythonhosted.org/packages/ac/10/73352094e604371db8e43c3f26d6a00f0c18546cae31c3d6a04c2ad580a8/substrateinterface-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "f982643845c8ea3b33ea18bd6e1f6c20", "sha256": "0704833aad2b7d4f587b56c448e3459527125badd33e2962f790d75dc2e437a5"}, "downloads": -1, "filename": "substrateinterface-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f982643845c8ea3b33ea18bd6e1f6c20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 56067, "upload_time": "2020-02-03T13:51:12", "upload_time_iso_8601": "2020-02-03T13:51:12.406201Z", "url": "https://files.pythonhosted.org/packages/ee/68/0d3f70b054d7d4fe75ab63329356651275f191382563a3ca416d083f5b24/substrateinterface-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ee020f7ede5c1f12703dfe328884b08", "sha256": "151e0d1f8632e3a0d8c0f0ff2cedcf49f753cd91379af35e14abd090d8f1ae1b"}, "downloads": -1, "filename": "substrateinterface-0.9.2.tar.gz", "has_sig": false, "md5_digest": "7ee020f7ede5c1f12703dfe328884b08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 44768, "upload_time": "2020-02-03T13:51:14", "upload_time_iso_8601": "2020-02-03T13:51:14.879364Z", "url": "https://files.pythonhosted.org/packages/c0/52/ca284e58c68fc31d2a7d49a48b16de66d4e0db313f9315cc4e30022a8940/substrateinterface-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "55c5c1075b0feffb78aaf01e91547a9d", "sha256": "bea38b769bdff383068a833bc750b639f2492a7539449394b4391da0ae59aff1"}, "downloads": -1, "filename": "substrateinterface-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "55c5c1075b0feffb78aaf01e91547a9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 56323, "upload_time": "2020-02-04T21:58:54", "upload_time_iso_8601": "2020-02-04T21:58:54.383557Z", "url": "https://files.pythonhosted.org/packages/90/5f/5c9880084e5a1d82ea648a86f90b7ad65886bbd46a923b4b47f8e8391799/substrateinterface-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ef2f5bae0f5fdf3f0e269799ad32533", "sha256": "7190360d43feaa171a202d3fe775ad44bd1fa0a5c82d8b39a4f19c4113282464"}, "downloads": -1, "filename": "substrateinterface-0.9.3.tar.gz", "has_sig": false, "md5_digest": "4ef2f5bae0f5fdf3f0e269799ad32533", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 45188, "upload_time": "2020-02-04T21:58:56", "upload_time_iso_8601": "2020-02-04T21:58:56.212919Z", "url": "https://files.pythonhosted.org/packages/f1/15/053a195e05113b28b64a0dc1dd925ca683516c9a4f10d7930c9987bad4cc/substrateinterface-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55c5c1075b0feffb78aaf01e91547a9d", "sha256": "bea38b769bdff383068a833bc750b639f2492a7539449394b4391da0ae59aff1"}, "downloads": -1, "filename": "substrateinterface-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "55c5c1075b0feffb78aaf01e91547a9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 56323, "upload_time": "2020-02-04T21:58:54", "upload_time_iso_8601": "2020-02-04T21:58:54.383557Z", "url": "https://files.pythonhosted.org/packages/90/5f/5c9880084e5a1d82ea648a86f90b7ad65886bbd46a923b4b47f8e8391799/substrateinterface-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ef2f5bae0f5fdf3f0e269799ad32533", "sha256": "7190360d43feaa171a202d3fe775ad44bd1fa0a5c82d8b39a4f19c4113282464"}, "downloads": -1, "filename": "substrateinterface-0.9.3.tar.gz", "has_sig": false, "md5_digest": "4ef2f5bae0f5fdf3f0e269799ad32533", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 45188, "upload_time": "2020-02-04T21:58:56", "upload_time_iso_8601": "2020-02-04T21:58:56.212919Z", "url": "https://files.pythonhosted.org/packages/f1/15/053a195e05113b28b64a0dc1dd925ca683516c9a4f10d7930c9987bad4cc/substrateinterface-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:38 2020"}