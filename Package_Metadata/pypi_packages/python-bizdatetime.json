{"info": {"author": "Sergiy Kuzmenko", "author_email": "sergiy@kuzmenko.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Office/Business :: Scheduling", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "ABOUT\r\n        =====\r\n        \r\n        python-bizdatetime is a simple library for performing business day arithmetic.\r\n        \r\n        \r\n        KNOWN LIMITATIONS\r\n        =================\r\n        \r\n        Rotating weekends/holidays are not supported (e.g., two days working, third day\r\n        off).\r\n        \r\n        Business hour arithmetic is not (yet) supported.\r\n        \r\n        \r\n        DEFINITIONS\r\n        ===========\r\n        \r\n        Weekend\r\n            Weekly repeating non-business day. Weekend does not have to be at the end\r\n            (or beginning) or the week. Weekends do not have to be consecutive days.\r\n        \r\n        Holiday\r\n            Like weekend, holiday is a non-business day. Unlike weekend, holiday does\r\n            not have weekly regularity. It is just a date. Holiday can coincide with\r\n            weekend.\r\n        \r\n        Policy\r\n            Is a (possibly empty) collection of holidays and holidays. All calculations\r\n            are performed within a policy.\r\n        \r\n        \r\n        SAMPLE USAGE\r\n        ============\r\n        \r\n        All business day arithmetic is performed in the context of policy::\r\n            \r\n            from bizdatetime import *\r\n            from datetime import date\r\n            policy = Policy(weekends=(SAT, SUN), holidays=(date(2011,7,1),))\r\n            day = date(2011, 6, 29) # Wednesday\r\n            print policy.add(day, 2) # add 2 business dates -> Monday after the long weekend\r\n            print policy.biz_day_delta(date(2011, 7, 4), date(2011, 6, 30)) # one holiday, one weekend between\r\n        \r\n        The output of the above program will be::\r\n        \r\n            datetime.date(2011, 7, 4)\r\n            1\r\n        \r\n        Policy method docstrings contain more examples.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/shelldweller/python-bizdatetime", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "python-bizdatetime", "package_url": "https://pypi.org/project/python-bizdatetime/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/python-bizdatetime/", "project_urls": {"Homepage": "https://bitbucket.org/shelldweller/python-bizdatetime"}, "release_url": "https://pypi.org/project/python-bizdatetime/0.1/", "requires_dist": null, "requires_python": null, "summary": "Module for performing simple business day arithmetic", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ABOUT\n<br>        =====\n<br>        \n<br>        python-bizdatetime is a simple library for performing business day arithmetic.\n<br>        \n<br>        \n<br>        KNOWN LIMITATIONS\n<br>        =================\n<br>        \n<br>        Rotating weekends/holidays are not supported (e.g., two days working, third day\n<br>        off).\n<br>        \n<br>        Business hour arithmetic is not (yet) supported.\n<br>        \n<br>        \n<br>        DEFINITIONS\n<br>        ===========\n<br>        \n<br>        Weekend\n<br>            Weekly repeating non-business day. Weekend does not have to be at the end\n<br>            (or beginning) or the week. Weekends do not have to be consecutive days.\n<br>        \n<br>        Holiday\n<br>            Like weekend, holiday is a non-business day. Unlike weekend, holiday does\n<br>            not have weekly regularity. It is just a date. Holiday can coincide with\n<br>            weekend.\n<br>        \n<br>        Policy\n<br>            Is a (possibly empty) collection of holidays and holidays. All calculations\n<br>            are performed within a policy.\n<br>        \n<br>        \n<br>        SAMPLE USAGE\n<br>        ============\n<br>        \n<br>        All business day arithmetic is performed in the context of policy::\n<br>            \n<br>            from bizdatetime import *\n<br>            from datetime import date\n<br>            policy = Policy(weekends=(SAT, SUN), holidays=(date(2011,7,1),))\n<br>            day = date(2011, 6, 29) # Wednesday\n<br>            print policy.add(day, 2) # add 2 business dates -&gt; Monday after the long weekend\n<br>            print policy.biz_day_delta(date(2011, 7, 4), date(2011, 6, 30)) # one holiday, one weekend between\n<br>        \n<br>        The output of the above program will be::\n<br>        \n<br>            datetime.date(2011, 7, 4)\n<br>            1\n<br>        \n<br>        Policy method docstrings contain more examples.\n          </div>"}, "last_serial": 319598, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 03:18:40 2020"}