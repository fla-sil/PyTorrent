{"info": {"author": "Tictail AB", "author_email": "tech@tictail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Topic :: Software Development :: Libraries"], "description": "tictail-python\n==============\n\n[![Build Status](https://travis-ci.org/tictail/tictail-python.svg?branch=master)](https://travis-ci.org/tictail/tictail-python)\n\nPython bindings for the Tictail API ([API reference](https://tictail.com/developers/documentation/api-reference/)).\n\n### Installation\n\nThe easiest way to install `tictail-python` is via `pip`:\n\n```shell\n$ pip install tictail\n```\n\nAlternatively, you can download the [source](https://github.com/tictail/tictail-python/releases) and then run:\n\n```shell\n$ python setup.py install\n```\n\n#### Mac OS X\n\nYou might get the following error on Mac OS X:\n\n```\nclang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]\n```\n\nThis is caused by the latest (5.1) version of Xcode which ships with a compiler\nthat treats unknown passed parameters as errors. The workaround is to set the\nARCHFLAGS environment variable to treat such errors as warnings:\n\n```shell\n$ ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future pip install tictail\n```\n\n### Version Support\n\n`tictail-python` supports Python 2.6 and 2.7. Python 3.2+ support is coming soon.\n\n### Dependencies\n\nThe following packages will be installed together with `tictail-python`:\n\n- `requests==2.2.1`\n- `pyasn1==0.1.6`\n- `pyOpenSSL==0.13`\n- `ndg-httpsclient==0.3.2`\n\n### Contributing\n\nFor bugs and feature requests, please open an [issue](https://github.com/tictail/tictail-python/issues). If you'd like to contribute\nto the development of `tictail-python` \u2013 a fact of grandiose awesomeness \u2013 then clone the repo, install the development dependencies and hack away. Make sure you include tests, update the changelog and add your name to the contributors list.\n\n### Testing\n\nThe library uses `pytest` and `coverage` for unit and integration tests. Run `make test` to\nrun all the tests. Alternatively, you can use the `py.test` binary to run specific tests.\n\n### Quickstart\n\nThe Tictail platform uses OAuth 2.0 for authentication so you need to create your application and obtain an access token for a store. The details of how to do that are not in the scope of this document, but the [authentication](https://tictail.com/developers/documentation/authentication/) section of the documentation has a nice set of instructions and best practices.\n\nOnce you have an access token you can instantiate the `Tictail` client and get the store associated with the token:\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\n```\n\n### Configuration\n\nThe `Tictail` client comes preconfigured with sane defaults. If you wish to\noverride the default configuration, you can supply the constructor with a configuration\ndictionary:\n\n```python\nfrom tictail import Tictail\n\nconfig = {\n  'timeout': 40\n}\nclient = Tictail('<access_token>', config=config)\n```\n\nSee `client.py` for details on what can be overriden.\n\n### Usage & Examples\n\n#### Store\n\nReference: [Store](https://tictail.com/developers/documentation/api-reference/#Store)\n\nThe `Store` resource is the only top-level API object and exposes properties for\nall its subresources which are documented further below.\n\n**Retrieving a store**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\n```\n\nAn example (partial) response:\n\n```python\n>>> print store\nStore({\n  'contact_email': u'thestartupstore@example.com',\n  'country': u'SE',\n  'currency': u'SEK',\n  'dashboard_url': u'https://tictail.com/dashboard/store/thestartupstore',\n  'description': u'Support your local Startup! ...',\n  'id': u't',\n  'language': u'en',\n  'logotype': [...],\n  'name': u'The Startup Store',\n  'sandbox': False,\n  'storekeeper_email': u'johndoe@example.com',\n  'url': u'http://thestartupstore.tictail.com'\n})\n```\n\n#### Card\n\nReference: [Card](https://tictail.com/developers/documentation/api-reference/#Card)\n\nCards are how you get your content into the feed of the store. The `Card` resource\nonly allows for creating cards at this point.\n\n**Creating a new card**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\ncard = store.cards.create({\n  'title': 'Check out this amazing site',\n  'action': 'http://example.com',\n  'card_type': 'media',\n  'content': {\n    'header': 'You will not regret this'\n  }\n})\n```\n\nAn example response:\n\n```python\n>>> print card\nCard({\n  'action': u'http://example.com',\n  'card_type': u'media',\n  'content': {\n    u'header': u'You will not regret this'\n  },\n  'created_at': u'2014-04-23T20:25:47.745085',\n  'id': u'fREx',\n  'modified_at': u'2014-04-23T20:25:47.752799',\n  'title': u'Check out this amazing site'\n})\n```\n\n#### Product\n\nReference: [Product](https://tictail.com/developers/documentation/api-reference/#Product)\n\nUsing the `Product` resource you can list all the visible products of a store or get a specific product by id.\nListing products accepts four optional query parameters:\n\n- `limit` for page size\n- `before` and `after` for paginating on products created before or after a product with a given id\n- `categories` for filtering products on certain categories\n\n**List 50 products created after the product with id '7bxv'**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\nproducts = store.products.all(after='7bxv', limit=50)\n```\n\n**List all shirts (id:'aVr') and jeans (id: 'bEt2')**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\nproducts = store.products.all(categories=['aVr', 'bEt2'])\n```\n\n**Retrieve a specific product**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\nproduct = store.products.get('7bxv')\n```\n\nAn example response:\n\n```python\n>>> print product\nProduct({\n  'created_at': u'2014-01-29T13:41:43',\n  'currency': u'PLN',\n  'description': u'',\n  'id': u'7bxv',\n  'images': [],\n  'modified_at': u'2014-01-29T13:41:43',\n  'price': 1200,\n  'price_includes_tax': True,\n  'quantity': None,\n  'slug': u'super-duper-tshirt',\n  'status': u'published',\n  'store_id': u'scV',\n  'title': u'super duper tshirt',\n  'unlimited': True,\n  'variations': []\n})\n```\n\n#### Customer\n\nReference: [Customer](https://tictail.com/developers/documentation/api-reference/#Customer)\n\nThe `Customer` resource returns all the customers of a store, i.e people that bought\nsomething at least once from that store. Listing customers accepts three optional\nquery parameters:\n\n- `limit` for page size\n- `before` and `after` for paginating on customers created before or after a customers with a given id\n\n**Retrieve a specific customer**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\ncustomer = store.customers.get('7')\n```\n\n**List all customers**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\ncustomers = store.customers.all()\n```\n\nAn example response:\n\n```python\n>>> print customer\nCustomer({\n 'country': u'SE',\n 'created_at': u'2012-12-10T19:31:07',\n 'email': u'johndoe@example.com',\n 'id': u'bz21',\n 'language': u'en',\n 'modified_at': None,\n 'name': u'John Doe'\n})\n```\n\n#### Follower\n\nReference: [Follower](https://tictail.com/developers/documentation/api-reference/#Follower)\n\nThe `Follower` resource returns all the followers of a store. Listing followers accepts three optional\nquery parameters:\n\n- `limit` for page size\n- `before` and `after` for paginating on followers created before or after a follower with a given id\n\n**Create a follower**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\nfollower = store.followers.create({'email': 'newfollower@example.com'})\n```\n\n**Delete a follower**\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\n\n# You can either delete a follower from the `Collection`...\ndeleted = store.followers.delete(7)\nassert deleted\n\n# ...or from the `Resource` itself.\nfollower = store.followers.all()[0]\ndeleted = follower.delete()\nassert deleted\n```\n\n**List all followers**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\nfollowers = store.followers.all()\n```\n\n**List all followers created before the follower with id '7aN'**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\nfollowers = store.followers.all(before='7aN')\n```\n\nAn example response:\n\n```python\n>>> print follower\nFollower({\n  'created_at': u'2013-12-10T19:31:07',\n  'modified_at': None,\n  'email': u'johndoe@example.com',\n  'id': u'NZUr'\n})\n```\n\n#### Order\n\nReference: [Order](https://tictail.com/developers/documentation/api-reference/#Order)\n\nThe `Order` resource returns all the orders of a store. If you wish to get the customers\nof the store then use the `Customer` resource instead. Listing orders accepts\nfive optional query parameters:\n\n- `limit` for page size\n- `before` and `after` for for paginating on orders created before or after a orders with a given id\n- `modified_before` and `modified_after` for paginating on orders modified before or after a given date (the date\n  can be either a string in `ISO 8601` format or a `datetime` object)\n\n**List all orders after a specific id**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\norders = store.orders.all(after='aFQX')\n```\n\n**List all orders modified after a date**\n\n```python\nfrom datetime import datetime\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\n\n# Using a datetime object...\nnow = datetime.now()\norders = store.orders.all(modified_after=now)\n\n# ...or a string.\norders = store.orders.all(modified_after=now.isoformat())\n```\n\n**Retrieve a specific order**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\norder = store.orders.get('aFQX')\n```\n\nAn example (partial) response:\n\n```python\n>>> print order\nOrder({\n  'customer': {\n    'name': u'John Doe',\n    ...\n  },\n  'transaction': {\n    'status': u'paid',\n    ...\n  },\n  'prices_include_vat': True,\n  'discounts': [],\n  'items': [{\n    'currency': u'SEK',\n    'price': 0,\n    ...\n  },\n  ...\n  ],\n  'fullfilment': {\n    'status': u'unhandled',\n    ...\n  },\n  'price': 0,\n  'id': u'aFQX',\n  'vat': {\n    'price': 0,\n    'rate': u'0.250000'\n  }\n})\n```\n\n#### Theme\n\nReference: [Theme](https://tictail.com/developers/documentation/api-reference/#Theme)\n\nThe `Theme` resource is a singleton resource that returns the currently active\ntheme of the store.\n\n**Get the theme**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\ntheme = store.theme.get()\n```\n\nAn example (partial) response:\n\n```python\n>>> print theme\nTheme({\n 'id': u'Ag',\n 'markup': u'<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n...'\n})\n```\n\n#### Category\n\nReference: [Category](https://tictail.com/developers/documentation/api-reference/#Category)\n\nThe `Category` resource returns the categories which make up the store's navigation.\nThey are implemented as a classical parent-child hierarchy, limited to one level of depth.\n\n**List all categories**\n\n```python\nfrom tictail import Tictail\n\nclient = Tictail('<access_token>')\nstore = client.me()\ncategories = store.categories.all()\n```\n\nAn example (partial) response:\n\n```python\n>>> print categories\n[\n Category({\n  'created_at': u'2012-05-01T00:47:16',\n  'id': u'dn',\n  'modified_at': u'2012-02-13T16:58:40',\n  'parent_id': None,\n  'position': 0,\n  'title': u'Stickers'\n }),\n Category({\n  'created_at': u'2012-10-29T12:02:09',\n  'id': u'dA',\n  'modified_at': None,\n  'parent_id': u'dn',\n  'position': 1,\n  'title': u'DevAwsmbx'\n })\n ...\n]\n```", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/tictail/tictail-python/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tictail/tictail-python", "keywords": "tictail,rest,api", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "tictail", "package_url": "https://pypi.org/project/tictail/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tictail/", "project_urls": {"Download": "https://github.com/tictail/tictail-python/releases", "Homepage": "https://github.com/tictail/tictail-python"}, "release_url": "https://pypi.org/project/tictail/0.2.2/", "requires_dist": null, "requires_python": null, "summary": "Python bindings for the Tictail API", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            tictail-python<br>==============<br><br>[![Build Status](https://travis-ci.org/tictail/tictail-python.svg?branch=master)](https://travis-ci.org/tictail/tictail-python)<br><br>Python bindings for the Tictail API ([API reference](https://tictail.com/developers/documentation/api-reference/)).<br><br>### Installation<br><br>The easiest way to install `tictail-python` is via `pip`:<br><br>```shell<br>$ pip install tictail<br>```<br><br>Alternatively, you can download the [source](https://github.com/tictail/tictail-python/releases) and then run:<br><br>```shell<br>$ python setup.py install<br>```<br><br>#### Mac OS X<br><br>You might get the following error on Mac OS X:<br><br>```<br>clang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]<br>```<br><br>This is caused by the latest (5.1) version of Xcode which ships with a compiler<br>that treats unknown passed parameters as errors. The workaround is to set the<br>ARCHFLAGS environment variable to treat such errors as warnings:<br><br>```shell<br>$ ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future pip install tictail<br>```<br><br>### Version Support<br><br>`tictail-python` supports Python 2.6 and 2.7. Python 3.2+ support is coming soon.<br><br>### Dependencies<br><br>The following packages will be installed together with `tictail-python`:<br><br>- `requests==2.2.1`<br>- `pyasn1==0.1.6`<br>- `pyOpenSSL==0.13`<br>- `ndg-httpsclient==0.3.2`<br><br>### Contributing<br><br>For bugs and feature requests, please open an [issue](https://github.com/tictail/tictail-python/issues). If you'd like to contribute<br>to the development of `tictail-python` \u2013 a fact of grandiose awesomeness \u2013 then clone the repo, install the development dependencies and hack away. Make sure you include tests, update the changelog and add your name to the contributors list.<br><br>### Testing<br><br>The library uses `pytest` and `coverage` for unit and integration tests. Run `make test` to<br>run all the tests. Alternatively, you can use the `py.test` binary to run specific tests.<br><br>### Quickstart<br><br>The Tictail platform uses OAuth 2.0 for authentication so you need to create your application and obtain an access token for a store. The details of how to do that are not in the scope of this document, but the [authentication](https://tictail.com/developers/documentation/authentication/) section of the documentation has a nice set of instructions and best practices.<br><br>Once you have an access token you can instantiate the `Tictail` client and get the store associated with the token:<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>```<br><br>### Configuration<br><br>The `Tictail` client comes preconfigured with sane defaults. If you wish to<br>override the default configuration, you can supply the constructor with a configuration<br>dictionary:<br><br>```python<br>from tictail import Tictail<br><br>config = {<br>  'timeout': 40<br>}<br>client = Tictail('&lt;access_token&gt;', config=config)<br>```<br><br>See `client.py` for details on what can be overriden.<br><br>### Usage &amp; Examples<br><br>#### Store<br><br>Reference: [Store](https://tictail.com/developers/documentation/api-reference/#Store)<br><br>The `Store` resource is the only top-level API object and exposes properties for<br>all its subresources which are documented further below.<br><br>**Retrieving a store**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>```<br><br>An example (partial) response:<br><br>```python<br>&gt;&gt;&gt; print store<br>Store({<br>  'contact_email': u'thestartupstore@example.com',<br>  'country': u'SE',<br>  'currency': u'SEK',<br>  'dashboard_url': u'https://tictail.com/dashboard/store/thestartupstore',<br>  'description': u'Support your local Startup! ...',<br>  'id': u't',<br>  'language': u'en',<br>  'logotype': [...],<br>  'name': u'The Startup Store',<br>  'sandbox': False,<br>  'storekeeper_email': u'johndoe@example.com',<br>  'url': u'http://thestartupstore.tictail.com'<br>})<br>```<br><br>#### Card<br><br>Reference: [Card](https://tictail.com/developers/documentation/api-reference/#Card)<br><br>Cards are how you get your content into the feed of the store. The `Card` resource<br>only allows for creating cards at this point.<br><br>**Creating a new card**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>card = store.cards.create({<br>  'title': 'Check out this amazing site',<br>  'action': 'http://example.com',<br>  'card_type': 'media',<br>  'content': {<br>    'header': 'You will not regret this'<br>  }<br>})<br>```<br><br>An example response:<br><br>```python<br>&gt;&gt;&gt; print card<br>Card({<br>  'action': u'http://example.com',<br>  'card_type': u'media',<br>  'content': {<br>    u'header': u'You will not regret this'<br>  },<br>  'created_at': u'2014-04-23T20:25:47.745085',<br>  'id': u'fREx',<br>  'modified_at': u'2014-04-23T20:25:47.752799',<br>  'title': u'Check out this amazing site'<br>})<br>```<br><br>#### Product<br><br>Reference: [Product](https://tictail.com/developers/documentation/api-reference/#Product)<br><br>Using the `Product` resource you can list all the visible products of a store or get a specific product by id.<br>Listing products accepts four optional query parameters:<br><br>- `limit` for page size<br>- `before` and `after` for paginating on products created before or after a product with a given id<br>- `categories` for filtering products on certain categories<br><br>**List 50 products created after the product with id '7bxv'**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>products = store.products.all(after='7bxv', limit=50)<br>```<br><br>**List all shirts (id:'aVr') and jeans (id: 'bEt2')**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>products = store.products.all(categories=['aVr', 'bEt2'])<br>```<br><br>**Retrieve a specific product**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>product = store.products.get('7bxv')<br>```<br><br>An example response:<br><br>```python<br>&gt;&gt;&gt; print product<br>Product({<br>  'created_at': u'2014-01-29T13:41:43',<br>  'currency': u'PLN',<br>  'description': u'',<br>  'id': u'7bxv',<br>  'images': [],<br>  'modified_at': u'2014-01-29T13:41:43',<br>  'price': 1200,<br>  'price_includes_tax': True,<br>  'quantity': None,<br>  'slug': u'super-duper-tshirt',<br>  'status': u'published',<br>  'store_id': u'scV',<br>  'title': u'super duper tshirt',<br>  'unlimited': True,<br>  'variations': []<br>})<br>```<br><br>#### Customer<br><br>Reference: [Customer](https://tictail.com/developers/documentation/api-reference/#Customer)<br><br>The `Customer` resource returns all the customers of a store, i.e people that bought<br>something at least once from that store. Listing customers accepts three optional<br>query parameters:<br><br>- `limit` for page size<br>- `before` and `after` for paginating on customers created before or after a customers with a given id<br><br>**Retrieve a specific customer**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>customer = store.customers.get('7')<br>```<br><br>**List all customers**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>customers = store.customers.all()<br>```<br><br>An example response:<br><br>```python<br>&gt;&gt;&gt; print customer<br>Customer({<br> 'country': u'SE',<br> 'created_at': u'2012-12-10T19:31:07',<br> 'email': u'johndoe@example.com',<br> 'id': u'bz21',<br> 'language': u'en',<br> 'modified_at': None,<br> 'name': u'John Doe'<br>})<br>```<br><br>#### Follower<br><br>Reference: [Follower](https://tictail.com/developers/documentation/api-reference/#Follower)<br><br>The `Follower` resource returns all the followers of a store. Listing followers accepts three optional<br>query parameters:<br><br>- `limit` for page size<br>- `before` and `after` for paginating on followers created before or after a follower with a given id<br><br>**Create a follower**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>follower = store.followers.create({'email': 'newfollower@example.com'})<br>```<br><br>**Delete a follower**<br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br><br># You can either delete a follower from the `Collection`...<br>deleted = store.followers.delete(7)<br>assert deleted<br><br># ...or from the `Resource` itself.<br>follower = store.followers.all()[0]<br>deleted = follower.delete()<br>assert deleted<br>```<br><br>**List all followers**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>followers = store.followers.all()<br>```<br><br>**List all followers created before the follower with id '7aN'**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>followers = store.followers.all(before='7aN')<br>```<br><br>An example response:<br><br>```python<br>&gt;&gt;&gt; print follower<br>Follower({<br>  'created_at': u'2013-12-10T19:31:07',<br>  'modified_at': None,<br>  'email': u'johndoe@example.com',<br>  'id': u'NZUr'<br>})<br>```<br><br>#### Order<br><br>Reference: [Order](https://tictail.com/developers/documentation/api-reference/#Order)<br><br>The `Order` resource returns all the orders of a store. If you wish to get the customers<br>of the store then use the `Customer` resource instead. Listing orders accepts<br>five optional query parameters:<br><br>- `limit` for page size<br>- `before` and `after` for for paginating on orders created before or after a orders with a given id<br>- `modified_before` and `modified_after` for paginating on orders modified before or after a given date (the date<br>  can be either a string in `ISO 8601` format or a `datetime` object)<br><br>**List all orders after a specific id**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>orders = store.orders.all(after='aFQX')<br>```<br><br>**List all orders modified after a date**<br><br>```python<br>from datetime import datetime<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br><br># Using a datetime object...<br>now = datetime.now()<br>orders = store.orders.all(modified_after=now)<br><br># ...or a string.<br>orders = store.orders.all(modified_after=now.isoformat())<br>```<br><br>**Retrieve a specific order**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>order = store.orders.get('aFQX')<br>```<br><br>An example (partial) response:<br><br>```python<br>&gt;&gt;&gt; print order<br>Order({<br>  'customer': {<br>    'name': u'John Doe',<br>    ...<br>  },<br>  'transaction': {<br>    'status': u'paid',<br>    ...<br>  },<br>  'prices_include_vat': True,<br>  'discounts': [],<br>  'items': [{<br>    'currency': u'SEK',<br>    'price': 0,<br>    ...<br>  },<br>  ...<br>  ],<br>  'fullfilment': {<br>    'status': u'unhandled',<br>    ...<br>  },<br>  'price': 0,<br>  'id': u'aFQX',<br>  'vat': {<br>    'price': 0,<br>    'rate': u'0.250000'<br>  }<br>})<br>```<br><br>#### Theme<br><br>Reference: [Theme](https://tictail.com/developers/documentation/api-reference/#Theme)<br><br>The `Theme` resource is a singleton resource that returns the currently active<br>theme of the store.<br><br>**Get the theme**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>theme = store.theme.get()<br>```<br><br>An example (partial) response:<br><br>```python<br>&gt;&gt;&gt; print theme<br>Theme({<br> 'id': u'Ag',<br> 'markup': u'&lt;!DOCTYPE html&gt;\\n&lt;html lang=\"en\"&gt;\\n&lt;head&gt;\\n...'<br>})<br>```<br><br>#### Category<br><br>Reference: [Category](https://tictail.com/developers/documentation/api-reference/#Category)<br><br>The `Category` resource returns the categories which make up the store's navigation.<br>They are implemented as a classical parent-child hierarchy, limited to one level of depth.<br><br>**List all categories**<br><br>```python<br>from tictail import Tictail<br><br>client = Tictail('&lt;access_token&gt;')<br>store = client.me()<br>categories = store.categories.all()<br>```<br><br>An example (partial) response:<br><br>```python<br>&gt;&gt;&gt; print categories<br>[<br> Category({<br>  'created_at': u'2012-05-01T00:47:16',<br>  'id': u'dn',<br>  'modified_at': u'2012-02-13T16:58:40',<br>  'parent_id': None,<br>  'position': 0,<br>  'title': u'Stickers'<br> }),<br> Category({<br>  'created_at': u'2012-10-29T12:02:09',<br>  'id': u'dA',<br>  'modified_at': None,<br>  'parent_id': u'dn',<br>  'position': 1,<br>  'title': u'DevAwsmbx'<br> })<br> ...<br>]<br>```\n          </div>"}, "last_serial": 1103300, "releases": {"-0.1-": [], "0.2.0": [{"comment_text": "", "digests": {"md5": "5181cd1bd09b0c28061cd1bc459d6bc7", "sha256": "679ddc5958cf9d8b3c695601f1b581ca807d474d0748937f95a8dcd24ba4998a"}, "downloads": -1, "filename": "tictail-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5181cd1bd09b0c28061cd1bc459d6bc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14345, "upload_time": "2014-05-24T22:46:41", "upload_time_iso_8601": "2014-05-24T22:46:41.038769Z", "url": "https://files.pythonhosted.org/packages/c8/d9/bd032668a6581d5863cbc898d060920140be26a556fbae59ad447807c06f/tictail-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "597167cf171e7174adc709e4f5c832fe", "sha256": "ac520d8200297288574c76fc24402f9854f6b6aabd68fb3ddc9a156b37852f2c"}, "downloads": -1, "filename": "tictail-0.2.1.tar.gz", "has_sig": false, "md5_digest": "597167cf171e7174adc709e4f5c832fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15460, "upload_time": "2014-05-24T22:57:03", "upload_time_iso_8601": "2014-05-24T22:57:03.539484Z", "url": "https://files.pythonhosted.org/packages/26/5e/ee73192a13afe872e56a279c54c99390154280b9271a642485046b55e984/tictail-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "baf3026173f58c5b6baa2d51c69c5f4e", "sha256": "e9cd52ca8bdf22ca2006692c7a75843b100e58d4291d0454ce8af4a895996015"}, "downloads": -1, "filename": "tictail-0.2.2.tar.gz", "has_sig": false, "md5_digest": "baf3026173f58c5b6baa2d51c69c5f4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15990, "upload_time": "2014-05-24T23:04:32", "upload_time_iso_8601": "2014-05-24T23:04:32.869669Z", "url": "https://files.pythonhosted.org/packages/85/d4/ac54e94e30f48e08aab99c573e055a2da02d5992ded0ddd4eb3e08a848dc/tictail-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "baf3026173f58c5b6baa2d51c69c5f4e", "sha256": "e9cd52ca8bdf22ca2006692c7a75843b100e58d4291d0454ce8af4a895996015"}, "downloads": -1, "filename": "tictail-0.2.2.tar.gz", "has_sig": false, "md5_digest": "baf3026173f58c5b6baa2d51c69c5f4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15990, "upload_time": "2014-05-24T23:04:32", "upload_time_iso_8601": "2014-05-24T23:04:32.869669Z", "url": "https://files.pythonhosted.org/packages/85/d4/ac54e94e30f48e08aab99c573e055a2da02d5992ded0ddd4eb3e08a848dc/tictail-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:30 2020"}