{"info": {"author": "Florian Leitner", "author_email": "florian.leitner@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "License :: OSI Approved :: GNU Affero General Public License v3", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Medical Science Apps.", "Topic :: Software Development :: Libraries", "Topic :: Text Processing", "Topic :: Text Processing :: Linguistic"], "description": "=====\nmedic\n=====\n-------------------------------------------------\na command-line tool to manage a mirror of MEDLINE\n-------------------------------------------------\n\nThe Swiss Army knife to parse MEDLINE_ XML files or\ndownload eUtils' PubMed_ XML records,\nbootstrapping a local MEDLINE/PubMed database,\nupdating and/or deleting the records, and\nwriting the contents of selected PMIDs into flat-files.\nA more in-depth tutorial for this tool is part of my blog_.\n\n.. image:: https://zenodo.org/badge/4016/fnl/medic.png\n   :target: https://zenodo.org/record/9968\n   :alt: DOI:10.5281/zendo.9968\n\nDOI:10.5281/zendo.9968\n\nSynopsis\n========\n\n::\n\n  medic [options] CMD FILE|PMID...\n\n  man medic\n  medic --help\n  medic --output /tmp parse baseline/medline*.xml.gz\n  medic --update parse update/medline*.xml.gz\n  medic --info delete delete.txt\n  medic --url sqlite:///tmp.db insert pubmed.xml\n  medic --pmid-lists update pmids_to_fetch_online.txt\n  medic --all update medline13n1000.xml\n  medic --format html write 1028734 1298474 > out.html\n  medic --logfile log.txt write pmid_list.txt\n\nSetup\n=====\n\nIf you are **not** using ``pip install medic``, install all\ndependencies/requirements::\n\n  pip install sqlalchemy\n  # only if using python3 < 3.2:\n  pip install argparse \n\nInstall the **DB driver** you prefer to use (supported are PostgreSQL\nand SQLite, with the latter part of the Python StdLib)::\n\n  pip install psycopg2 \n\nCreate the PostgreSQL database::\n\n  createdb medline \n\nIf you are fine working with SQLite, you only need to use the path to the\nSQLite DB file in the URL option (that will implicitly \"create\" the DB)::\n\n  medic insert --url sqlite:///tmp.db 123456\n\nTo *create the tables in an empty DB*, you can just \"try\" to fetch a record:\nAs the DB is empty, this will not write anything, but SQL Alchemy will create\nthe tables for you in the DB::\n\n  medic write 123 # for PostgreSQL\n  medic --url sqlite:///tmp.db write 123 # for SQLite\n\nDescription\n===========\n\n``medic [options] COMMAND PMID|FILE...``\n\nThe ``--url URL`` option represents the DSN of the database and might\nbe needed (default: ``postgresql://localhost/medline``); For example:\n\nPostgreSQL\n  ``postgresql://host//dbname``\nSQLite DB\n  ``sqlite:////absolute/path/to/foo.db`` or\n  ``sqlite:///relative/path/to/foo.db``\n\nThe five **COMMAND** arguments:\n\n``insert``\n  Create records in the DB by parsing MEDLINE XML files or\n  by downloading PubMed XML from NCBI eUtils for a list of PMIDs.\n  The insert fails if the record already exists in the DB.\n``write`` *\n  Write records as MEDLINE_ files to a directory, each file named as\n  \"<pmid>.txt\". Alternatively, just the TIAB (title and abstract) plain-text\n  can be output, and finally, a single file in TSV or HTML format can be\n  generated (see option ``--format``).\n  If the requested PMID does not exist in the DB, the command does not fail,\n  but the relevant file, row, or element will not have been written.\n``update``\n  Insert or update records in the DB (instead of creating them); note that\n  if a record exists, but is added with ``create``, this would throw an\n  `IntegrityError`. If you are not sure if the records are in the DB or\n  not, use ``update`` (N.B. that ``update`` is slower).\n``delete`` *\n  Delete records from the DB for a list of PMIDs (using ``--pmid-lists``)\n``parse``\n  Does not interact with the DB, but rather creates \".tab\" files for each\n  table that later can be used to load a database, particularly useful when\n  bootstrapping a large collection.\n\n\\* Note that ``write`` and ``delete`` can only use PMID lists (option\n``--pmid-lists``), so for these two commands, that option is always active\n(implicitly).\n\nFor example, to download two PubMed records by PMID and update them in\nthe DB::\n\n  medic update 100000 123456\n\nAdd a single MEDLINE or PubMed XML file to the database::\n\n  medic insert pudmed.xml\n\nNote that if the suffix \".gz\" is present, the parser automatically\ndecompresses the XML file(s) first. This feature *only* works with\nGNU-zipped files and the \".gz\" suffix must be present.\n\nExport a few records from the database as HTML (to \"articles.html\")::\n\n  medic write --format html --output articles.html 292837491 128374 213487\n\nWrite the content of the entire database (in MEDLINE format, to STDOUT)::\n\n  medic write ALL\n\nTherefore, command line arguments are treated as follows:\n\ninteger values\n  are always treated as PMIDs to download PubMed XML data\nall other values\n  are always treated as MEDLINE XML files to parse\n  **unless** you use the option ``--pmid-lists``\nfiles ending in \".gz\"\n  are treated as gzipped MEDLINE XML files\n\nRequirements\n============\n\n- Python 3.2+\n- SQL Alchemy 0.8+\n- PostgreSQL 8.4+ or SQLite 3.7+\n\n*Note* that while any DB supported by SQL Alchemy should work, all other DBs\nare **untested**.\n\nLoading MEDLINE\n===============\n\nPlease be aware that the MEDLINE distribution **is not unique**, meaning that\nit contains a few records multiple times (see the section about\n**Version IDs**).\n\nParsing and loading the baseline into a PostgreSQL DB on the same machine::\n\n  medic parse baseline/medline14n*.xml.gz\n\n  for table in citations abstracts authors chemicals databases \\\n  descriptors identifiers keywords publication_types qualifiers sections; \n    do psql medline -c \"COPY $table FROM '`pwd`/${table}.tab';\";\n  done\n\nFor the update files, you need to go *one-by-one*, adding each one *in order*,\nand using the flag ``--update`` when parsing the XML. After parsing an XML file\nand *before* loading the dump, run ``medic delete delete.txt`` to get rid of\nall entities that will be updated or should be removed (PMIDs listed as\n``DeleteCitation``\\ s)::\n\n  # parse a MEDLINE update file:\n  medic --update parse medline14n1234.xml.gz\n\n  # delete its updated and DeleteCitation records:\n  medic delete delete.txt\n\n  # load (COPY) all tables for that MEDLINE file:\n  for table in citations abstracts authors chemicals databases \\\n  descriptors identifiers keywords publication_types qualifiers sections; \n    do psql medline -c \"COPY $table FROM '`pwd`/${table}.tab';\";\n  done\n\nAlternatively - simpler but slower - you can just ``update`` from the XML\ndirectly::\n\n  medic update medline14n1234.xml.gz\n\nVersion IDs\n===========\n\nMEDLINE has began to use versions to allow publishers to add multiple citations\nfor the same PMID. This only occurs with 71 articles from one journal,\n\"PLOS Curr\", in the 2013 baseline, creating a total of 149 non-unique records.\n\nAs this is the only journal and as there may only be one record per PMID in the\ndatabase, alternative versions are currently being ignored. In other words, if\na MedlineCitation has a VersionID value other than \"1\", those records can be\nskipped to avoid DB errors from non-unique records.\n\nFor example, in the 2013 baseline, PMID 20029614 is present ten times in the\nbaseline, each version at a different stage of revision. Because it is the\nfirst entry (in the order they appear in the baseline files) without a\n``VersionID`` or a version of \"1\" that is the relevant record, ``medic`` by\ndefault filters citations with other versions than \"1\". If you do want to\nprocess other versions of a citation, use the option ``--all``.\n\nTo summarize, *medic* by default **removes** alternate citations.\n\nDatabase Tables\n===============\n\nCitation (citations)\n  **pmid**:BIGINT, *status*:ENUM(state), *year*:SMALLINT,\n  *title*:TEXT, *journal*:VARCHAR(256),\n  *pub_date*:VARCHAR(256), issue:VARCHAR(256), pagination:VARCHAR(256),\n  *created*:DATE, completed:DATE, revised:DATE, modified:DATE\n\nAbstract (abstracts)\n  **pmid**:FK(Citation), **source**:ENUM(type), copyright:TEXT\n\nSection (sections)\n  **pmid**:FK(Citation), **source**:ENUM(type), **seq**:SMALLINT,\n  *name*:ENUM(section), label:VARCHAR(256), *content*:TEXT, *truncated*:BOOLEAN\n\nAuthor (authors)\n  **pmid**:FK(Citation), **pos**:SMALLINT, *name*:TEXT,\n  initials:VARCHAR(128), forename:VARCHAR(128), suffix:VARCHAR(128),\n\nPublicationType (publication_types)\n  **pmid**:FK(Citation), **value**:VARCHAR(256)\n\nDescriptor (descriptors)\n  **pmid**:FK(Citation), **num**:SMALLINT, major:BOOL, *name*:TEXT\n\nQualifier (qualifiers)\n  **pmid**:FK(Descriptor), **num**:FK(Descriptor), **sub**:SMALLINT,\n  major:BOOL, *name*:TEXT\n\nIdentifier (identifiers)\n  **pmid**:FK(Citation), **namespace**:VARCHAR(32), *value*:VARCHAR(256)\n\nDatabase (databases)\n  **pmid**:FK(Citation), **name**:VARCHAR(32), **accession**:VARCHAR(256)\n\nChemical (chemicals)\n  **pmid**:FK(Citation), **idx**:VARCHAR(32), uid:VARCHAR(256),\n  *name*:VARCHAR(256)\n\nKeyword (keywords)\n  **pmid**:FK(Citation), **owner**:ENUM(owner), **cnt**:SMALLINT,\n  major:BOOL, *value*:TEXT\n\n- **bold** (Composite) Primary Key\n- *italic* NOT NULL (Strings that may not be NULL are also never empty.)\n\nSupported XML Elements\n======================\n\nEntities\n--------\n\n- MedlineCitation and ArticleTitle (``Citation`` and ``Identifier``)\n- Abstract and OtherAbstract (``Abstract`` and ``Section``)\n- Author (``Author``)\n- Chemical (``Chemical``)\n- DataBank (``Database``)\n- Keyword (``Keyword``)\n- MeshHeading (``Descriptor`` and ``Qualifier``)\n- PublicationType (``PublicationType``)\n- DeleteCitation (for deleting records when parsing updates)\n\nFields/Values\n-------------\n\n- Abstract (with \"NLM\" as ``Abstract.source``)\n- AbstractText (``Section.name`` \"Abstract\" or the *NlmCategory*, ``Section.content`` with *Label* as ``Section.label``)\n- AccessionNumber (``Database.accession``)\n- ArticleId (``Identifier.value`` with *IdType* as ``Identifier.namesapce``; only available in online PubMed XML)\n- ArticleTitle (``Citation.title``; if empty, use the VernacularTitle or set to \"UNKNOWN\")\n- CollectiveName (``Author.name``)\n- CopyrightInformation (``Abstract.copyright``)\n- DataBankName (``Database.name``)\n- DateCompleted (``Citation.completed``)\n- DateCreated (``Citation.created``)\n- DateRevised (``Citation.revised``)\n- DescriptorName (``Descriptor.name`` with *MajorTopicYN* as ``Descriptor.major``)\n- ELocationID (``Identifier.value`` with *EIdType* as ``Identifier.namespace``)\n- ForeName (``Author.forename``)\n- Initials (``Author.initials``)\n- Issue (``Citation.issue``)\n- Keyword (``Keyword.value`` with *Owner* as ``Keyword.owner`` and *MajorTopicYN* as ``Keyword.major``)\n- LastName (``Author.name``)\n- MedlineCitation (with *Status* as ``Citation.status``)\n- MedlineTA (``Citation.journal``)\n- NameOfSubstance (``Chemical.name``)\n- MedlinePgn (``Citation.pagination``)\n- OtherAbstract (with *Type* as ``Abstract.source``)\n- OtherID (``Identifier.value`` iff *Source* is \"PMC\" with ``Identifier.namespace`` as \"pmc\")\n- PMID (``Citation.pmid``)\n- PubDate (``Citation.pub_date`` and ``Citation.year``)\n- PublicationType (``PublicationType.value``)\n- QualifierName (``Qualifier.name`` with *MajorTopicYN* as ``Qualifier.major``)\n- RegistryNumber (``Chemical.uid``)\n- Suffix (``Author.suffix``)\n- VernacularTitle (``Citation.title`` if AbstractTitle is empty)\n- Volume (``Citation.issue``)\n\nVersion History\n===============\n\n2.4.1\n  - Fixed a bug while parsing \"PubDate\" records that asserted the wrong length.\n    Thanks to Josef Steiner for reporting it.\n2.4.0\n  - Added a ``year`` column to table ``citations`` to make it easier to select for\n    the year of publication. To migrate/update your DB, run these two commands::\n\n        ALTER TABLE citations ADD \"year\" smallint NOT NULL DEFAULT 0;\n        UPDATE citations SET year = substring(pub_date FROM '^[12][890][0-9][0-9]')::int;\n\n    Note that the (currently) oldest publications in MEDLINE are from 1809,\n    from the first issue of the journal \"Med Chir Trans\".\n2.3.1\n  - Fixed a bug when fetching all records on PubMed from database with \"ALL\".\n2.3.0\n  - Added special argument \"ALL\" to write/delete all records.\n2.2.0\n  - Ensured compatibility with the MEDLINE DTD updates for 2015 and cleaned some\n    code pieces.\n    Includes a fix for the bad (long) keyword in PMID 25114415 (with a carriage\n    return).\n  - A column was added to the ORM, resulting in backwards incompatible change:\n    From this version on, the trailing string \"``(ABSTRACT TRUNCATED AT xxx\n    WORDS)``\" is stripped from AbstractText and instead the flag ``truncated``\n    has be added to table ``sections`` and is set if the string was present (but\n    has been removed); To migrate your Postgres database, please run::\n\n        ALTER TABLE sections ADD \"truncated\" boolean NOT NULL DEFAULT 'false';\n\n    Note that for one case this produces a Section with just one whitespace\n    character, because the original content was only the \"ABSTRACT TRUNCATED...\"\n    message.\n  - MEDLINE formatted output is now written to STDOUT or a single file, because\n    it makes selecting specific fields with grep very easy. Records are\n    separated with an empty line.\n2.1.7\n  - Work-around for the limit of SQLite that only lets you use 999 variables per\n    query.\n  - Corrected the outdated VernacularTitle documentation in this document.\n2.1.6\n  - Work-around for parsing citations that have an empty ArticleTitle element\n    (which they shouldn't, according to the DTD): Either use the VernacularTitle\n    (e.g., PMID 22536004), or otherwise set the title to \"UNKNOWN\" (the empty\n    string is not a valid title) and log a warning.\n  - Work-around for non-unique PublicationType entries (e.g., PMID 10500000):\n    drop non-unique PublicationTypes (with the same PMID and value).\n  - Corrected left-over \"Medline\" entity names in this document to \"Citation\".\n2.1.5\n  - Added page_size=MAX and synchronous=OFF pragmas for SQLite DBs (hat-tip to\n    Jason)\n2.1.4\n  - A MEDLINE issue found by Jason: PMID 24073073 has an empty keyword and\n    keyword list that should not be there; Medic prevents adding improper data\n    to the DB by raising an AssertionError.\n    To deal with such cases, medic now ensures each keyword is non-empty before\n    attempting to generate a database entry and drops empty (i.e.,\n    whitespace-only) keyword data.\n2.1.3\n  - Jason Hennessey changed the (absolute) path of medic's man-page, set to\n    ``/usr/local/share/man`` in the setup script, to a relative location\n    (``share/man``) to avoid issues when installing medic in a virtualenv\n2.1.2\n  - fixed a bug where SQLite did not find the implicit FK->PK reference\n    (thanks to Jason Hennessey for reporting the issue)\n2.1.1\n  - added SQLite temporary DB example URL to help output\n  - refactored HTML output code\n2.1.0\n  - DB schema change from: ``records() -> sections(content)``\n    to: ``citations(title) -> abstracts(copyright) -> sections(content)``\n  - name change: the entity/table Medline/records is now called\n    Citation/citations\n  - title and copyright text is no longer stored in Section/sections\n  - added a new Abstract/abstracts entity/table with a ``copyright`` attribute\n    (formerly stored in ``sections.content`` with ``name`` = 'Copyright') \n  - added a new ``citations.title`` attribute\n    (formerly stored in ``sections.content`` with ``name`` = 'Title') \n  - added a new ``source`` primary-key attribute to Section and Abstract\n    (set to either 'NLM' for regular Abstract elements or to\n    the value of the OtherAbstract Type attribute for other abstracts)\n  - skipping \"Abstract available from the publisher.\"-only abstracts\n2.0.2\n  - made the use of ``--pmid-lists`` for ``delete`` and ``write`` implicit\n  - added instructions to bootstrap the tables in a PostgreSQL DB\n  - minor improvements to this manual\n  - fixed a bug when inserting/updating from MEDLINE XML files\n2.0.1\n  - fixed a bug that lead to skipping of abstracts\n    (thanks to Chris Roeder for detecting the issue)\n2.0.0\n  - added Keywords and PublicationTypes\n  - added MEDLINE publication date, volume, issue, and pagination support\n  - added MEDLINE output format and made it the default\n  - DB structure change: descriptors.major and qualifiers.major columns swapped\n  - DB structure change: section.name is now an untyped varchar (OtherAbstract\n    separation)\n  - cleaned up the ORM test cases\n1.1.1\n  - code cleanup (PEP8, PyFlake)\n  - fixed an issue where the parser would not leave the skipping state\n1.1.0\n  - ``--update parse`` now writes a file to use with ``--pmid-lists delete``\n  - fixed a bug with CRUD manager\n  - added a man page\n1.0.2\n  - fixes to make the PyPi version and ``pip install medic`` work\n1.0.1\n  - updates to the setup.py and README.rst files\n1.0.0\n  - initial release\n\nCopyright and License\n=====================\n\nLicense: `GNU GPL v3`_\\ .\nCopyright 2012-2014 Florian Leitner. All rights reserved.\n\n.. _GNU GPL v3: http://www.gnu.org/licenses/gpl-3.0.html\n.. _MEDLINE: http://www.nlm.nih.gov/bsd/mms/medlineelements.html\n.. _PubMed: http://www.ncbi.nlm.nih.gov/pubmed\n.. _blog: http://fnl.es/medline-kung-fu.html", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fnl/medic", "keywords": null, "license": "GNU GPL v3", "maintainer": null, "maintainer_email": null, "name": "medic", "package_url": "https://pypi.org/project/medic/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/medic/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/fnl/medic"}, "release_url": "https://pypi.org/project/medic/2.4.1/", "requires_dist": null, "requires_python": null, "summary": "A command line tool to manage a PubMed DB mirror.", "version": "2.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The Swiss Army knife to parse <a href=\"http://www.nlm.nih.gov/bsd/mms/medlineelements.html\" rel=\"nofollow\">MEDLINE</a> XML files or\ndownload eUtils\u2019 <a href=\"http://www.ncbi.nlm.nih.gov/pubmed\" rel=\"nofollow\">PubMed</a> XML records,\nbootstrapping a local MEDLINE/PubMed database,\nupdating and/or deleting the records, and\nwriting the contents of selected PMIDs into flat-files.\nA more in-depth tutorial for this tool is part of my <a href=\"http://fnl.es/medline-kung-fu.html\" rel=\"nofollow\">blog</a>.</p>\n<a href=\"https://zenodo.org/record/9968\" rel=\"nofollow\"><img alt=\"DOI:10.5281/zendo.9968\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2f4b64a3367a3c0238bb483ebc17901c423d3453/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f343031362f666e6c2f6d656469632e706e67\"></a>\n<p>DOI:10.5281/zendo.9968</p>\n<div id=\"synopsis\">\n<h2>Synopsis</h2>\n<pre>medic [options] CMD FILE|PMID...\n\nman medic\nmedic --help\nmedic --output /tmp parse baseline/medline*.xml.gz\nmedic --update parse update/medline*.xml.gz\nmedic --info delete delete.txt\nmedic --url sqlite:///tmp.db insert pubmed.xml\nmedic --pmid-lists update pmids_to_fetch_online.txt\nmedic --all update medline13n1000.xml\nmedic --format html write 1028734 1298474 &gt; out.html\nmedic --logfile log.txt write pmid_list.txt\n</pre>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>If you are <strong>not</strong> using <tt>pip install medic</tt>, install all\ndependencies/requirements:</p>\n<pre>pip install sqlalchemy\n# only if using python3 &lt; 3.2:\npip install argparse\n</pre>\n<p>Install the <strong>DB driver</strong> you prefer to use (supported are PostgreSQL\nand SQLite, with the latter part of the Python StdLib):</p>\n<pre>pip install psycopg2\n</pre>\n<p>Create the PostgreSQL database:</p>\n<pre>createdb medline\n</pre>\n<p>If you are fine working with SQLite, you only need to use the path to the\nSQLite DB file in the URL option (that will implicitly \u201ccreate\u201d the DB):</p>\n<pre>medic insert --url sqlite:///tmp.db 123456\n</pre>\n<p>To <em>create the tables in an empty DB</em>, you can just \u201ctry\u201d to fetch a record:\nAs the DB is empty, this will not write anything, but SQL Alchemy will create\nthe tables for you in the DB:</p>\n<pre>medic write 123 # for PostgreSQL\nmedic --url sqlite:///tmp.db write 123 # for SQLite\n</pre>\n</div>\n<div id=\"description\">\n<h2>Description</h2>\n<p><tt>medic [options] COMMAND <span class=\"pre\">PMID|FILE...</span></tt></p>\n<p>The <tt><span class=\"pre\">--url</span> URL</tt> option represents the DSN of the database and might\nbe needed (default: <tt><span class=\"pre\">postgresql://localhost/medline</span></tt>); For example:</p>\n<dl>\n<dt>PostgreSQL</dt>\n<dd><tt><span class=\"pre\">postgresql://host//dbname</span></tt></dd>\n<dt>SQLite DB</dt>\n<dd><tt><span class=\"pre\">sqlite:////absolute/path/to/foo.db</span></tt> or\n<tt><span class=\"pre\">sqlite:///relative/path/to/foo.db</span></tt></dd>\n</dl>\n<p>The five <strong>COMMAND</strong> arguments:</p>\n<dl>\n<dt><tt>insert</tt></dt>\n<dd>Create records in the DB by parsing MEDLINE XML files or\nby downloading PubMed XML from NCBI eUtils for a list of PMIDs.\nThe insert fails if the record already exists in the DB.</dd>\n<dt><tt>write</tt> *</dt>\n<dd>Write records as <a href=\"http://www.nlm.nih.gov/bsd/mms/medlineelements.html\" rel=\"nofollow\">MEDLINE</a> files to a directory, each file named as\n\u201c&lt;pmid&gt;.txt\u201d. Alternatively, just the TIAB (title and abstract) plain-text\ncan be output, and finally, a single file in TSV or HTML format can be\ngenerated (see option <tt><span class=\"pre\">--format</span></tt>).\nIf the requested PMID does not exist in the DB, the command does not fail,\nbut the relevant file, row, or element will not have been written.</dd>\n<dt><tt>update</tt></dt>\n<dd>Insert or update records in the DB (instead of creating them); note that\nif a record exists, but is added with <tt>create</tt>, this would throw an\n<cite>IntegrityError</cite>. If you are not sure if the records are in the DB or\nnot, use <tt>update</tt> (N.B. that <tt>update</tt> is slower).</dd>\n<dt><tt>delete</tt> *</dt>\n<dd>Delete records from the DB for a list of PMIDs (using <tt><span class=\"pre\">--pmid-lists</span></tt>)</dd>\n<dt><tt>parse</tt></dt>\n<dd>Does not interact with the DB, but rather creates \u201c.tab\u201d files for each\ntable that later can be used to load a database, particularly useful when\nbootstrapping a large collection.</dd>\n</dl>\n<p>* Note that <tt>write</tt> and <tt>delete</tt> can only use PMID lists (option\n<tt><span class=\"pre\">--pmid-lists</span></tt>), so for these two commands, that option is always active\n(implicitly).</p>\n<p>For example, to download two PubMed records by PMID and update them in\nthe DB:</p>\n<pre>medic update 100000 123456\n</pre>\n<p>Add a single MEDLINE or PubMed XML file to the database:</p>\n<pre>medic insert pudmed.xml\n</pre>\n<p>Note that if the suffix \u201c.gz\u201d is present, the parser automatically\ndecompresses the XML file(s) first. This feature <em>only</em> works with\nGNU-zipped files and the \u201c.gz\u201d suffix must be present.</p>\n<p>Export a few records from the database as HTML (to \u201carticles.html\u201d):</p>\n<pre>medic write --format html --output articles.html 292837491 128374 213487\n</pre>\n<p>Write the content of the entire database (in MEDLINE format, to STDOUT):</p>\n<pre>medic write ALL\n</pre>\n<p>Therefore, command line arguments are treated as follows:</p>\n<dl>\n<dt>integer values</dt>\n<dd>are always treated as PMIDs to download PubMed XML data</dd>\n<dt>all other values</dt>\n<dd>are always treated as MEDLINE XML files to parse\n<strong>unless</strong> you use the option <tt><span class=\"pre\">--pmid-lists</span></tt></dd>\n<dt>files ending in \u201c.gz\u201d</dt>\n<dd>are treated as gzipped MEDLINE XML files</dd>\n</dl>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.2+</li>\n<li>SQL Alchemy 0.8+</li>\n<li>PostgreSQL 8.4+ or SQLite 3.7+</li>\n</ul>\n<p><em>Note</em> that while any DB supported by SQL Alchemy should work, all other DBs\nare <strong>untested</strong>.</p>\n</div>\n<div id=\"loading-medline\">\n<h2>Loading MEDLINE</h2>\n<p>Please be aware that the MEDLINE distribution <strong>is not unique</strong>, meaning that\nit contains a few records multiple times (see the section about\n<strong>Version IDs</strong>).</p>\n<p>Parsing and loading the baseline into a PostgreSQL DB on the same machine:</p>\n<pre>medic parse baseline/medline14n*.xml.gz\n\nfor table in citations abstracts authors chemicals databases \\\ndescriptors identifiers keywords publication_types qualifiers sections;\n  do psql medline -c \"COPY $table FROM '`pwd`/${table}.tab';\";\ndone\n</pre>\n<p>For the update files, you need to go <em>one-by-one</em>, adding each one <em>in order</em>,\nand using the flag <tt><span class=\"pre\">--update</span></tt> when parsing the XML. After parsing an XML file\nand <em>before</em> loading the dump, run <tt>medic delete delete.txt</tt> to get rid of\nall entities that will be updated or should be removed (PMIDs listed as\n<tt>DeleteCitation</tt>s):</p>\n<pre># parse a MEDLINE update file:\nmedic --update parse medline14n1234.xml.gz\n\n# delete its updated and DeleteCitation records:\nmedic delete delete.txt\n\n# load (COPY) all tables for that MEDLINE file:\nfor table in citations abstracts authors chemicals databases \\\ndescriptors identifiers keywords publication_types qualifiers sections;\n  do psql medline -c \"COPY $table FROM '`pwd`/${table}.tab';\";\ndone\n</pre>\n<p>Alternatively - simpler but slower - you can just <tt>update</tt> from the XML\ndirectly:</p>\n<pre>medic update medline14n1234.xml.gz\n</pre>\n</div>\n<div id=\"version-ids\">\n<h2>Version IDs</h2>\n<p>MEDLINE has began to use versions to allow publishers to add multiple citations\nfor the same PMID. This only occurs with 71 articles from one journal,\n\u201cPLOS Curr\u201d, in the 2013 baseline, creating a total of 149 non-unique records.</p>\n<p>As this is the only journal and as there may only be one record per PMID in the\ndatabase, alternative versions are currently being ignored. In other words, if\na MedlineCitation has a VersionID value other than \u201c1\u201d, those records can be\nskipped to avoid DB errors from non-unique records.</p>\n<p>For example, in the 2013 baseline, PMID 20029614 is present ten times in the\nbaseline, each version at a different stage of revision. Because it is the\nfirst entry (in the order they appear in the baseline files) without a\n<tt>VersionID</tt> or a version of \u201c1\u201d that is the relevant record, <tt>medic</tt> by\ndefault filters citations with other versions than \u201c1\u201d. If you do want to\nprocess other versions of a citation, use the option <tt><span class=\"pre\">--all</span></tt>.</p>\n<p>To summarize, <em>medic</em> by default <strong>removes</strong> alternate citations.</p>\n</div>\n<div id=\"database-tables\">\n<h2>Database Tables</h2>\n<dl>\n<dt>Citation (citations)</dt>\n<dd><strong>pmid</strong>:BIGINT, <em>status</em>:ENUM(state), <em>year</em>:SMALLINT,\n<em>title</em>:TEXT, <em>journal</em>:VARCHAR(256),\n<em>pub_date</em>:VARCHAR(256), issue:VARCHAR(256), pagination:VARCHAR(256),\n<em>created</em>:DATE, completed:DATE, revised:DATE, modified:DATE</dd>\n<dt>Abstract (abstracts)</dt>\n<dd><strong>pmid</strong>:FK(Citation), <strong>source</strong>:ENUM(type), copyright:TEXT</dd>\n<dt>Section (sections)</dt>\n<dd><strong>pmid</strong>:FK(Citation), <strong>source</strong>:ENUM(type), <strong>seq</strong>:SMALLINT,\n<em>name</em>:ENUM(section), label:VARCHAR(256), <em>content</em>:TEXT, <em>truncated</em>:BOOLEAN</dd>\n<dt>Author (authors)</dt>\n<dd><strong>pmid</strong>:FK(Citation), <strong>pos</strong>:SMALLINT, <em>name</em>:TEXT,\ninitials:VARCHAR(128), forename:VARCHAR(128), suffix:VARCHAR(128),</dd>\n<dt>PublicationType (publication_types)</dt>\n<dd><strong>pmid</strong>:FK(Citation), <strong>value</strong>:VARCHAR(256)</dd>\n<dt>Descriptor (descriptors)</dt>\n<dd><strong>pmid</strong>:FK(Citation), <strong>num</strong>:SMALLINT, major:BOOL, <em>name</em>:TEXT</dd>\n<dt>Qualifier (qualifiers)</dt>\n<dd><strong>pmid</strong>:FK(Descriptor), <strong>num</strong>:FK(Descriptor), <strong>sub</strong>:SMALLINT,\nmajor:BOOL, <em>name</em>:TEXT</dd>\n<dt>Identifier (identifiers)</dt>\n<dd><strong>pmid</strong>:FK(Citation), <strong>namespace</strong>:VARCHAR(32), <em>value</em>:VARCHAR(256)</dd>\n<dt>Database (databases)</dt>\n<dd><strong>pmid</strong>:FK(Citation), <strong>name</strong>:VARCHAR(32), <strong>accession</strong>:VARCHAR(256)</dd>\n<dt>Chemical (chemicals)</dt>\n<dd><strong>pmid</strong>:FK(Citation), <strong>idx</strong>:VARCHAR(32), uid:VARCHAR(256),\n<em>name</em>:VARCHAR(256)</dd>\n<dt>Keyword (keywords)</dt>\n<dd><strong>pmid</strong>:FK(Citation), <strong>owner</strong>:ENUM(owner), <strong>cnt</strong>:SMALLINT,\nmajor:BOOL, <em>value</em>:TEXT</dd>\n</dl>\n<ul>\n<li><strong>bold</strong> (Composite) Primary Key</li>\n<li><em>italic</em> NOT NULL (Strings that may not be NULL are also never empty.)</li>\n</ul>\n</div>\n<div id=\"supported-xml-elements\">\n<h2>Supported XML Elements</h2>\n<div id=\"entities\">\n<h3>Entities</h3>\n<ul>\n<li>MedlineCitation and ArticleTitle (<tt>Citation</tt> and <tt>Identifier</tt>)</li>\n<li>Abstract and OtherAbstract (<tt>Abstract</tt> and <tt>Section</tt>)</li>\n<li>Author (<tt>Author</tt>)</li>\n<li>Chemical (<tt>Chemical</tt>)</li>\n<li>DataBank (<tt>Database</tt>)</li>\n<li>Keyword (<tt>Keyword</tt>)</li>\n<li>MeshHeading (<tt>Descriptor</tt> and <tt>Qualifier</tt>)</li>\n<li>PublicationType (<tt>PublicationType</tt>)</li>\n<li>DeleteCitation (for deleting records when parsing updates)</li>\n</ul>\n</div>\n<div id=\"fields-values\">\n<h3>Fields/Values</h3>\n<ul>\n<li>Abstract (with \u201cNLM\u201d as <tt>Abstract.source</tt>)</li>\n<li>AbstractText (<tt>Section.name</tt> \u201cAbstract\u201d or the <em>NlmCategory</em>, <tt>Section.content</tt> with <em>Label</em> as <tt>Section.label</tt>)</li>\n<li>AccessionNumber (<tt>Database.accession</tt>)</li>\n<li>ArticleId (<tt>Identifier.value</tt> with <em>IdType</em> as <tt>Identifier.namesapce</tt>; only available in online PubMed XML)</li>\n<li>ArticleTitle (<tt>Citation.title</tt>; if empty, use the VernacularTitle or set to \u201cUNKNOWN\u201d)</li>\n<li>CollectiveName (<tt>Author.name</tt>)</li>\n<li>CopyrightInformation (<tt>Abstract.copyright</tt>)</li>\n<li>DataBankName (<tt>Database.name</tt>)</li>\n<li>DateCompleted (<tt>Citation.completed</tt>)</li>\n<li>DateCreated (<tt>Citation.created</tt>)</li>\n<li>DateRevised (<tt>Citation.revised</tt>)</li>\n<li>DescriptorName (<tt>Descriptor.name</tt> with <em>MajorTopicYN</em> as <tt>Descriptor.major</tt>)</li>\n<li>ELocationID (<tt>Identifier.value</tt> with <em>EIdType</em> as <tt>Identifier.namespace</tt>)</li>\n<li>ForeName (<tt>Author.forename</tt>)</li>\n<li>Initials (<tt>Author.initials</tt>)</li>\n<li>Issue (<tt>Citation.issue</tt>)</li>\n<li>Keyword (<tt>Keyword.value</tt> with <em>Owner</em> as <tt>Keyword.owner</tt> and <em>MajorTopicYN</em> as <tt>Keyword.major</tt>)</li>\n<li>LastName (<tt>Author.name</tt>)</li>\n<li>MedlineCitation (with <em>Status</em> as <tt>Citation.status</tt>)</li>\n<li>MedlineTA (<tt>Citation.journal</tt>)</li>\n<li>NameOfSubstance (<tt>Chemical.name</tt>)</li>\n<li>MedlinePgn (<tt>Citation.pagination</tt>)</li>\n<li>OtherAbstract (with <em>Type</em> as <tt>Abstract.source</tt>)</li>\n<li>OtherID (<tt>Identifier.value</tt> iff <em>Source</em> is \u201cPMC\u201d with <tt>Identifier.namespace</tt> as \u201cpmc\u201d)</li>\n<li>PMID (<tt>Citation.pmid</tt>)</li>\n<li>PubDate (<tt>Citation.pub_date</tt> and <tt>Citation.year</tt>)</li>\n<li>PublicationType (<tt>PublicationType.value</tt>)</li>\n<li>QualifierName (<tt>Qualifier.name</tt> with <em>MajorTopicYN</em> as <tt>Qualifier.major</tt>)</li>\n<li>RegistryNumber (<tt>Chemical.uid</tt>)</li>\n<li>Suffix (<tt>Author.suffix</tt>)</li>\n<li>VernacularTitle (<tt>Citation.title</tt> if AbstractTitle is empty)</li>\n<li>Volume (<tt>Citation.issue</tt>)</li>\n</ul>\n</div>\n</div>\n<div id=\"version-history\">\n<h2>Version History</h2>\n<dl>\n<dt>2.4.1</dt>\n<dd><ul>\n<li>Fixed a bug while parsing \u201cPubDate\u201d records that asserted the wrong length.\nThanks to Josef Steiner for reporting it.</li>\n</ul>\n</dd>\n<dt>2.4.0</dt>\n<dd><ul>\n<li><p>Added a <tt>year</tt> column to table <tt>citations</tt> to make it easier to select for\nthe year of publication. To migrate/update your DB, run these two commands:</p>\n<pre>ALTER TABLE citations ADD \"year\" smallint NOT NULL DEFAULT 0;\nUPDATE citations SET year = substring(pub_date FROM '^[12][890][0-9][0-9]')::int;\n</pre>\n<p>Note that the (currently) oldest publications in MEDLINE are from 1809,\nfrom the first issue of the journal \u201cMed Chir Trans\u201d.</p>\n</li>\n</ul>\n</dd>\n<dt>2.3.1</dt>\n<dd><ul>\n<li>Fixed a bug when fetching all records on PubMed from database with \u201cALL\u201d.</li>\n</ul>\n</dd>\n<dt>2.3.0</dt>\n<dd><ul>\n<li>Added special argument \u201cALL\u201d to write/delete all records.</li>\n</ul>\n</dd>\n<dt>2.2.0</dt>\n<dd><ul>\n<li><p>Ensured compatibility with the MEDLINE DTD updates for 2015 and cleaned some\ncode pieces.\nIncludes a fix for the bad (long) keyword in PMID 25114415 (with a carriage\nreturn).</p>\n</li>\n<li><p>A column was added to the ORM, resulting in backwards incompatible change:\nFrom this version on, the trailing string \u201c<tt>(ABSTRACT TRUNCATED AT xxx\nWORDS)</tt>\u201d is stripped from AbstractText and instead the flag <tt>truncated</tt>\nhas be added to table <tt>sections</tt> and is set if the string was present (but\nhas been removed); To migrate your Postgres database, please run:</p>\n<pre>ALTER TABLE sections ADD \"truncated\" boolean NOT NULL DEFAULT 'false';\n</pre>\n<p>Note that for one case this produces a Section with just one whitespace\ncharacter, because the original content was only the \u201cABSTRACT TRUNCATED\u2026\u201d\nmessage.</p>\n</li>\n<li><p>MEDLINE formatted output is now written to STDOUT or a single file, because\nit makes selecting specific fields with grep very easy. Records are\nseparated with an empty line.</p>\n</li>\n</ul>\n</dd>\n<dt>2.1.7</dt>\n<dd><ul>\n<li>Work-around for the limit of SQLite that only lets you use 999 variables per\nquery.</li>\n<li>Corrected the outdated VernacularTitle documentation in this document.</li>\n</ul>\n</dd>\n<dt>2.1.6</dt>\n<dd><ul>\n<li>Work-around for parsing citations that have an empty ArticleTitle element\n(which they shouldn\u2019t, according to the DTD): Either use the VernacularTitle\n(e.g., PMID 22536004), or otherwise set the title to \u201cUNKNOWN\u201d (the empty\nstring is not a valid title) and log a warning.</li>\n<li>Work-around for non-unique PublicationType entries (e.g., PMID 10500000):\ndrop non-unique PublicationTypes (with the same PMID and value).</li>\n<li>Corrected left-over \u201cMedline\u201d entity names in this document to \u201cCitation\u201d.</li>\n</ul>\n</dd>\n<dt>2.1.5</dt>\n<dd><ul>\n<li>Added page_size=MAX and synchronous=OFF pragmas for SQLite DBs (hat-tip to\nJason)</li>\n</ul>\n</dd>\n<dt>2.1.4</dt>\n<dd><ul>\n<li>A MEDLINE issue found by Jason: PMID 24073073 has an empty keyword and\nkeyword list that should not be there; Medic prevents adding improper data\nto the DB by raising an AssertionError.\nTo deal with such cases, medic now ensures each keyword is non-empty before\nattempting to generate a database entry and drops empty (i.e.,\nwhitespace-only) keyword data.</li>\n</ul>\n</dd>\n<dt>2.1.3</dt>\n<dd><ul>\n<li>Jason Hennessey changed the (absolute) path of medic\u2019s man-page, set to\n<tt>/usr/local/share/man</tt> in the setup script, to a relative location\n(<tt>share/man</tt>) to avoid issues when installing medic in a virtualenv</li>\n</ul>\n</dd>\n<dt>2.1.2</dt>\n<dd><ul>\n<li>fixed a bug where SQLite did not find the implicit FK-&gt;PK reference\n(thanks to Jason Hennessey for reporting the issue)</li>\n</ul>\n</dd>\n<dt>2.1.1</dt>\n<dd><ul>\n<li>added SQLite temporary DB example URL to help output</li>\n<li>refactored HTML output code</li>\n</ul>\n</dd>\n<dt>2.1.0</dt>\n<dd><ul>\n<li>DB schema change from: <tt>records() <span class=\"pre\">-&gt;</span> sections(content)</tt>\nto: <tt>citations(title) <span class=\"pre\">-&gt;</span> abstracts(copyright) <span class=\"pre\">-&gt;</span> sections(content)</tt></li>\n<li>name change: the entity/table Medline/records is now called\nCitation/citations</li>\n<li>title and copyright text is no longer stored in Section/sections</li>\n<li>added a new Abstract/abstracts entity/table with a <tt>copyright</tt> attribute\n(formerly stored in <tt>sections.content</tt> with <tt>name</tt> = \u2018Copyright\u2019)</li>\n<li>added a new <tt>citations.title</tt> attribute\n(formerly stored in <tt>sections.content</tt> with <tt>name</tt> = \u2018Title\u2019)</li>\n<li>added a new <tt>source</tt> primary-key attribute to Section and Abstract\n(set to either \u2018NLM\u2019 for regular Abstract elements or to\nthe value of the OtherAbstract Type attribute for other abstracts)</li>\n<li>skipping \u201cAbstract available from the publisher.\u201d-only abstracts</li>\n</ul>\n</dd>\n<dt>2.0.2</dt>\n<dd><ul>\n<li>made the use of <tt><span class=\"pre\">--pmid-lists</span></tt> for <tt>delete</tt> and <tt>write</tt> implicit</li>\n<li>added instructions to bootstrap the tables in a PostgreSQL DB</li>\n<li>minor improvements to this manual</li>\n<li>fixed a bug when inserting/updating from MEDLINE XML files</li>\n</ul>\n</dd>\n<dt>2.0.1</dt>\n<dd><ul>\n<li>fixed a bug that lead to skipping of abstracts\n(thanks to Chris Roeder for detecting the issue)</li>\n</ul>\n</dd>\n<dt>2.0.0</dt>\n<dd><ul>\n<li>added Keywords and PublicationTypes</li>\n<li>added MEDLINE publication date, volume, issue, and pagination support</li>\n<li>added MEDLINE output format and made it the default</li>\n<li>DB structure change: descriptors.major and qualifiers.major columns swapped</li>\n<li>DB structure change: section.name is now an untyped varchar (OtherAbstract\nseparation)</li>\n<li>cleaned up the ORM test cases</li>\n</ul>\n</dd>\n<dt>1.1.1</dt>\n<dd><ul>\n<li>code cleanup (PEP8, PyFlake)</li>\n<li>fixed an issue where the parser would not leave the skipping state</li>\n</ul>\n</dd>\n<dt>1.1.0</dt>\n<dd><ul>\n<li><tt><span class=\"pre\">--update</span> parse</tt> now writes a file to use with <tt><span class=\"pre\">--pmid-lists</span> delete</tt></li>\n<li>fixed a bug with CRUD manager</li>\n<li>added a man page</li>\n</ul>\n</dd>\n<dt>1.0.2</dt>\n<dd><ul>\n<li>fixes to make the PyPi version and <tt>pip install medic</tt> work</li>\n</ul>\n</dd>\n<dt>1.0.1</dt>\n<dd><ul>\n<li>updates to the setup.py and README.rst files</li>\n</ul>\n</dd>\n<dt>1.0.0</dt>\n<dd><ul>\n<li>initial release</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"copyright-and-license\">\n<h2>Copyright and License</h2>\n<p>License: <a href=\"http://www.gnu.org/licenses/gpl-3.0.html\" rel=\"nofollow\">GNU GPL v3</a>.\nCopyright 2012-2014 Florian Leitner. All rights reserved.</p>\n</div>\n\n          </div>"}, "last_serial": 1741517, "releases": {"1": [{"comment_text": "", "digests": {"md5": "eaee798b4736fd75f1c63f2b1596d6d5", "sha256": "d67757e989acd70426124774cb28612ff04fac3c05eb746be025f8c657e83a19"}, "downloads": -1, "filename": "medic-1.tar.gz", "has_sig": false, "md5_digest": "eaee798b4736fd75f1c63f2b1596d6d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18783, "upload_time": "2013-10-24T15:55:51", "upload_time_iso_8601": "2013-10-24T15:55:51.237510Z", "url": "https://files.pythonhosted.org/packages/64/d2/5b1907e601eef05a37c08a72489959900076c8ec6b4dafdf87949ccf3d48/medic-1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "f17841094c7539429152a6f8e892e133", "sha256": "e4820e4eb5d2493e8e966462be084a31ad742396482b03d68257e07f4d1ab031"}, "downloads": -1, "filename": "medic-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f17841094c7539429152a6f8e892e133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18792, "upload_time": "2013-10-24T16:01:53", "upload_time_iso_8601": "2013-10-24T16:01:53.550186Z", "url": "https://files.pythonhosted.org/packages/25/fb/9e8215108002197870e1d4efea5b0107b2a116a5836cc69508cb9e1c7af3/medic-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c4b2deeb50a9d46e08d43fdc6c999af1", "sha256": "c331d478f82c78a7b8b42e2c474ab8df1d4bcdc7e895b2965145cdccba7edada"}, "downloads": -1, "filename": "medic-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c4b2deeb50a9d46e08d43fdc6c999af1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18812, "upload_time": "2013-10-24T16:03:27", "upload_time_iso_8601": "2013-10-24T16:03:27.619074Z", "url": "https://files.pythonhosted.org/packages/22/b5/5df109cc715394f5248c1fd5a4eab35577ed88f214ea3f4526d1d8c808b8/medic-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "1fc4e45ec0a12b516c53854de9db336c", "sha256": "9848097e18bcc90f4de52d018ff91a2eb606754983e3329c97516cadf29faf82"}, "downloads": -1, "filename": "medic-1.0.2.tar.gz", "has_sig": false, "md5_digest": "1fc4e45ec0a12b516c53854de9db336c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18831, "upload_time": "2013-10-24T16:04:37", "upload_time_iso_8601": "2013-10-24T16:04:37.827368Z", "url": "https://files.pythonhosted.org/packages/89/d5/521d3e5d0dc65c5dd273355396a7f0d9d56c46ab4635c5807f0906827238/medic-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "dc9d90ad8f09ea590b7bb0a00ab187f9", "sha256": "fc2cd86dae074fe9afdc043cef8513b2aa318a3c157abdc1cdd72d9fa7c95fa1"}, "downloads": -1, "filename": "medic-1.1.0.tar.gz", "has_sig": false, "md5_digest": "dc9d90ad8f09ea590b7bb0a00ab187f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21791, "upload_time": "2013-10-25T11:20:14", "upload_time_iso_8601": "2013-10-25T11:20:14.821574Z", "url": "https://files.pythonhosted.org/packages/c9/a6/c2fd4ddac1a5c4f9700b97f3279caf40ecf6ed7661c5f41de0c240c347f1/medic-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "32daa011d68842ff545acd3533587be8", "sha256": "d5afa50606e030d4973e514ef00137d92478695751d6b7b93f5cef0b52c79264"}, "downloads": -1, "filename": "medic-1.1.1.tar.gz", "has_sig": false, "md5_digest": "32daa011d68842ff545acd3533587be8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21916, "upload_time": "2013-10-25T15:13:49", "upload_time_iso_8601": "2013-10-25T15:13:49.494084Z", "url": "https://files.pythonhosted.org/packages/d8/b5/a9c1403f13390e48c7bfc482718fa64c9e320760a532c1ca4339a66c3ec6/medic-1.1.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "823e497d4a51284c134dd2be64d04005", "sha256": "e1fcd7aa3c7b70eda9aeb1c4d08665dfad45f728e443bb5d385f8a9c5684007d"}, "downloads": -1, "filename": "medic-2.0.0.tar.gz", "has_sig": false, "md5_digest": "823e497d4a51284c134dd2be64d04005", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24789, "upload_time": "2013-10-31T09:45:02", "upload_time_iso_8601": "2013-10-31T09:45:02.977092Z", "url": "https://files.pythonhosted.org/packages/bf/33/1896fe827fd8226af44c88d42589a6161805e429adec4b8d105fe04e259a/medic-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "dec6ca9dfb5525aee252297058162504", "sha256": "98c51bc3c604bfbdf4afb11f91c31f38bed23220245848f4df48d4310245d8fa"}, "downloads": -1, "filename": "medic-2.0.1.tar.gz", "has_sig": false, "md5_digest": "dec6ca9dfb5525aee252297058162504", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24834, "upload_time": "2013-11-08T10:43:51", "upload_time_iso_8601": "2013-11-08T10:43:51.202407Z", "url": "https://files.pythonhosted.org/packages/a5/7f/d114e172cd757859cb32d6409fb54d9687f1f460e51c1185fb8a6f323a56/medic-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "e077789c938284560f012e88b0ceb41c", "sha256": "fd3fbc5be143380291e615a4bfbfa78189ce54e818c2315b105d88643a298b87"}, "downloads": -1, "filename": "medic-2.0.2.tar.gz", "has_sig": false, "md5_digest": "e077789c938284560f012e88b0ceb41c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25486, "upload_time": "2013-11-11T10:59:35", "upload_time_iso_8601": "2013-11-11T10:59:35.920884Z", "url": "https://files.pythonhosted.org/packages/68/b8/14ea68d343be8e3572d68557fed1309662ab6dacd4650d065747c5eff2e5/medic-2.0.2.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "f8e82aef39ab4d1608f3a784ff76e989", "sha256": "c4545483089d5023fd33eb7d320b4866543caab6005e1589bc34e61804e39913"}, "downloads": -1, "filename": "medic-2.1.0.tar.gz", "has_sig": false, "md5_digest": "f8e82aef39ab4d1608f3a784ff76e989", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26678, "upload_time": "2013-11-23T12:08:26", "upload_time_iso_8601": "2013-11-23T12:08:26.587697Z", "url": "https://files.pythonhosted.org/packages/17/40/e6fd660b80496d1e1fafcbab4359597ae49ab1eb4448430a5da4290554d3/medic-2.1.0.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "186e4f7d158cc3d5a5370c10bb134c59", "sha256": "e7834102987a98495fa856dc1e8ca5d8bc3feeccc75d2d1e8a7845a752bfaac4"}, "downloads": -1, "filename": "medic-2.1.2.tar.gz", "has_sig": false, "md5_digest": "186e4f7d158cc3d5a5370c10bb134c59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27007, "upload_time": "2014-03-04T07:55:08", "upload_time_iso_8601": "2014-03-04T07:55:08.039162Z", "url": "https://files.pythonhosted.org/packages/24/65/6988013a8b2178fc2291a778bf5ac4214e4a34c68530110cb176dd651ae9/medic-2.1.2.tar.gz", "yanked": false}], "2.1.3": [{"comment_text": "", "digests": {"md5": "1dec0fcb35f4e1cb1ce327f8387e29a5", "sha256": "fafa2e4aa747dd8ae88e03fe1702385e11403061ed8ebe38ed9f67e38dc448b5"}, "downloads": -1, "filename": "medic-2.1.3.tar.gz", "has_sig": false, "md5_digest": "1dec0fcb35f4e1cb1ce327f8387e29a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27516, "upload_time": "2014-03-31T09:24:35", "upload_time_iso_8601": "2014-03-31T09:24:35.913309Z", "url": "https://files.pythonhosted.org/packages/3d/07/923cb97094a618372441eabd3fa435efa9271b84c5f95815fd5191741c48/medic-2.1.3.tar.gz", "yanked": false}], "2.1.5": [{"comment_text": "", "digests": {"md5": "64d39efff85e4262c1a26d2e72faa4b2", "sha256": "13f0b7a14ef723654ae7d52744f692ec88d7856bdbc1e21fd853734d262abde2"}, "downloads": -1, "filename": "medic-2.1.5.tar.gz", "has_sig": false, "md5_digest": "64d39efff85e4262c1a26d2e72faa4b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27960, "upload_time": "2014-09-27T12:13:40", "upload_time_iso_8601": "2014-09-27T12:13:40.098445Z", "url": "https://files.pythonhosted.org/packages/3a/42/32651ec5ec1bbd6d687f31ced4a7e4c9fae13216bc11ceb1c7ae2a3d9904/medic-2.1.5.tar.gz", "yanked": false}], "2.1.6": [{"comment_text": "", "digests": {"md5": "aa4537d00cc78ceb93c474bf46508be7", "sha256": "6ae032880611e3642bc0437b9d9f83bd6a351a56b02a1566527eed2e5070608c"}, "downloads": -1, "filename": "medic-2.1.6.tar.gz", "has_sig": false, "md5_digest": "aa4537d00cc78ceb93c474bf46508be7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28539, "upload_time": "2014-10-23T13:39:06", "upload_time_iso_8601": "2014-10-23T13:39:06.870851Z", "url": "https://files.pythonhosted.org/packages/d0/c3/53327fd9a38d4f06dca73b7f085f04d4bc5edb3db7695655308f06ca9c8f/medic-2.1.6.tar.gz", "yanked": false}], "2.1.7": [{"comment_text": "", "digests": {"md5": "f1bb4be3c53a18f00125b14740e82030", "sha256": "dff4e6fa83d44cb77c5b4d56920776da1693df4dec047bc3e8b305317b2c9faf"}, "downloads": -1, "filename": "medic-2.1.7.tar.gz", "has_sig": false, "md5_digest": "f1bb4be3c53a18f00125b14740e82030", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28797, "upload_time": "2014-10-23T14:36:45", "upload_time_iso_8601": "2014-10-23T14:36:45.038722Z", "url": "https://files.pythonhosted.org/packages/8f/2f/56bed227c9f0ecadf557255717ee755cc0d80158989587f1a3783f1bcc95/medic-2.1.7.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "77614b96a49629939ee6746f8bafa05f", "sha256": "bf4448314090079703029cec5f034c3a47d53a69d9ced03f43822456d46a0d86"}, "downloads": -1, "filename": "medic-2.2.0.tar.gz", "has_sig": false, "md5_digest": "77614b96a49629939ee6746f8bafa05f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29814, "upload_time": "2014-12-30T16:01:10", "upload_time_iso_8601": "2014-12-30T16:01:10.043134Z", "url": "https://files.pythonhosted.org/packages/05/60/c9f6cdcdea052946b47fed0dde16c647985e201e7833933067fee1d03c57/medic-2.2.0.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "64c5e2ea138730ab4d3504529589b1d1", "sha256": "6e4524b75bb410b33badb085d4c32969e4eb69df251b4b8d1ff22d82c9f6d569"}, "downloads": -1, "filename": "medic-2.3.0.tar.gz", "has_sig": false, "md5_digest": "64c5e2ea138730ab4d3504529589b1d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30265, "upload_time": "2015-01-19T14:30:20", "upload_time_iso_8601": "2015-01-19T14:30:20.902772Z", "url": "https://files.pythonhosted.org/packages/08/65/dabab19d712d9083d61f08084a271a41e8b0d5aa10bc65ad0bda33a418d9/medic-2.3.0.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "486f9542824ed0db34da7cc8c8c8427c", "sha256": "4b0ac8973b41d3feb2edd549a694a515b03cbfbbad501412c2dc3af5ba6786c4"}, "downloads": -1, "filename": "medic-2.3.1.tar.gz", "has_sig": false, "md5_digest": "486f9542824ed0db34da7cc8c8c8427c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30282, "upload_time": "2015-01-22T22:30:40", "upload_time_iso_8601": "2015-01-22T22:30:40.479983Z", "url": "https://files.pythonhosted.org/packages/17/e2/395834f1014be69f4aa9c66724382437ca808ad28d033a1788d9206f4a1d/medic-2.3.1.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "53171ea8dfab31ab6f37db239e48ffff", "sha256": "b8591af64b5eade49df122f972fecbd6af8a8ce2c5434e6a7dffd6c17a1f3063"}, "downloads": -1, "filename": "medic-2.4.0.tar.gz", "has_sig": false, "md5_digest": "53171ea8dfab31ab6f37db239e48ffff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30663, "upload_time": "2015-04-10T16:16:56", "upload_time_iso_8601": "2015-04-10T16:16:56.168004Z", "url": "https://files.pythonhosted.org/packages/7d/a7/885883bb4d07d746624bbdbe0d22e49e605c2905396374d863c5412cf30d/medic-2.4.0.tar.gz", "yanked": false}], "2.4.1": [{"comment_text": "", "digests": {"md5": "ee90e9f4ebc11875be02544bc0b4c25a", "sha256": "352334989002dbf23ed9462c664d9300e3b530e87723593749dcab3a62e317e6"}, "downloads": -1, "filename": "medic-2.4.1.tar.gz", "has_sig": false, "md5_digest": "ee90e9f4ebc11875be02544bc0b4c25a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30731, "upload_time": "2015-09-28T08:42:40", "upload_time_iso_8601": "2015-09-28T08:42:40.113068Z", "url": "https://files.pythonhosted.org/packages/ec/cd/26c99eabf5f4bf6d5e699c87d47a653438ee434a07a66a2696ca14a7729c/medic-2.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee90e9f4ebc11875be02544bc0b4c25a", "sha256": "352334989002dbf23ed9462c664d9300e3b530e87723593749dcab3a62e317e6"}, "downloads": -1, "filename": "medic-2.4.1.tar.gz", "has_sig": false, "md5_digest": "ee90e9f4ebc11875be02544bc0b4c25a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30731, "upload_time": "2015-09-28T08:42:40", "upload_time_iso_8601": "2015-09-28T08:42:40.113068Z", "url": "https://files.pythonhosted.org/packages/ec/cd/26c99eabf5f4bf6d5e699c87d47a653438ee434a07a66a2696ca14a7729c/medic-2.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:34 2020"}