{"info": {"author": "Marcus D. Sherman", "author_email": "mdsherm@umich.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: Unix", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Information Analysis"], "description": "[![Conda Version](https://img.shields.io/conda/vn/conda-forge/pygff.svg)](https://anaconda.org/conda-forge/pygff) \n[![PyPI version](https://badge.fury.io/py/pygff.svg)](https://badge.fury.io/py/pygff)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://github.com/betteridiot/pygff/blob/master/LICENSE) \n</br>\n\n# Installation:\n\nThere are multiple options available for installation\n\n```bash\n# Recommended: from conda-forge\nconda install -c conda-forge pygff\n\n# From PyPI\npip install pygff\n\n# From GitHub\ngit clone https://github.com/betteridiot/pygff.git\ncd pygff\npython3 ./setup.py install\n\n```\n\nOptionally, you may want to test the program. A very small testing suite has been\nprovided. **Note**: *`pytest` is required* for testing.\n\nIf you choose to test the program on your current environment/build:\n\n```bash\n# If installed from conda-forge or the PyPI\npytest --pyargs pygff\n\n# Or, if installed from source\npython ./setup.py test\n\n```\n\n---\n# 'As-is' Warranty:\nThis program was written expressly for the purposes of education at the University\nof Michigan's Department of Computational Medicine & Bioinformatics. It was only\nintended to work for a specific subset of GFF/GTF files: **GFF3 files**. No promises are\nmade as to its wider functionality.\n\n---\n# Background:\nThe General Feature Format (GFF) was developed as a way to succinctly represent\ngenomic features (e.g. exons, introns, genes, etc). They are a 9-column, tab-delimited\nplain text (or gzip compressed) file. The 9 columns are described as such:\n\n| Column | Content | Description |\n| :----- | :-----: | :---------- |\n| 1 | seqid | The ID of the landmark used to establish the coordinate system for the current feature |\n| 2 | source | The source is a free text qualifier intended to describe the algorithm or operating procedure that generated this feature |\n| 3 | type | The type of the feature (previously called the \"method\") |\n| 4 | start | The start coordinate of the feature, given in positive 1-based integer coordinates, relative to the landmark given in column one |\n| 5 | end | The end coordinate of the feature, given in positive 1-based integer coordinates, relative to the landmark given in column one |\n| 6 | score | The score of the feature, a floating point number |\n| 7 | strand | The strand of the feature. '+' for positive strand (relative to the landmark), '-' for minus strand, and '.' for features that are not stranded |\n| 8 | phase | For features of type \"CDS\", the phase indicates where the feature begins with reference to the reading frame |\n| 9 | attributes | A list of feature attributes in the format tag=value |\n\n**Note**: this information was taken, in part, from [The Sequence Ontology](https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md) group's GitHub.\n\n---\n# Description:\n`pygff` was written to provide a helpful interface when handling GFF3 files. It \nallows the user to easily process the parsed GFF3 content, entry-by-entry, in a \nlazily generated way.\n\nHowever, an additional functionality was written that produces a GFF3 index \non the fly. This index allows for *pseudo-random access*. Due to how it is implemented, \nit is not recommended that this program is run from the command line directly since\nthe index is ephemeral by nature.\n\n`pygff` exposes two classes for dealing with GFF3 data:\n\n### `pygff.GffFile`:\nMain class of the pygff package\n\nHandles the opening, iterating, and closing GFF3 files. Can handle both\nzipped and unzipped GFF3 files.\n\nWhen iterated, it lazily returns a `pygff.GffEntry` object. These objects\ncan be compared against each other and programmatically accessed for all traits.\n\n**Args**:\n1. `filename` (`str`): /path/to/file.gff[.gz]\n2. `periods` (`int`): For indexing purposes, the period to determine thresholding (default: 3)\n\n**Raises**:\n* `TypeError` if GFF file is not version 3\n\nAnd exposes the `pygff.GffFile.fetch(seqid, start, stop)` method:\n\nGenerator that fetches all GFF entries within a given region. \n\nAlso can only pull specific *types* of GFF entries (if supplied)\n\n**Args**:\n1. `seqid` (`str`): name of the chromosome of scaffold\n2. `start` (`int`): start position of the feature (1-indexed)\n3. `end` (`int`): end position of the feature (1-indexed)\n4. `type` (`str`): GFF feature type (default: None)\n\n**Yields**:\n* (`pygff.GffEntry`): A given GFF entry from the region of interest\n\n### `pygff.GffEntry`:\nAn object that represents a single GFF entry. \n\nThis object also has the ability to perform total ordered comparison\noperations (<, <=, ==, !=, >=, >) based on seqid first, then start\nposition, and finally the end position.\n\n**Attributes**:\n1. `seqid` (`str`): name of the chromosome of scaffold</br>\n2. `source` (`str`): name of the program that generated the feature</br>\n3. `type` (`str`): type of feature</br>\n4. `start` (`int`): start position of the feature (1-indexed)</br>\n5. `end` (`int`): end position of the feature (1-indexed)</br>\n6. `score` (`float`): a quality score of the feature</br>\n7. `strand` (`str`): either '+' (forward), '-'(reverse), or '.'</br>\n8. `phase` (`int`): 0,1, or 2 that indicates that the first base of the is the first base of the codon</br>\n9. `attributes` (`dict`): a dictionary of all tag/value pairs</br>\n\n---\n# Quickstart\n\n### Importing\n\n```python\n\nimport pygff\n\n```\n\n### Sequential Iteration\n\n```python\n\nwith pygff.GffFile('/path/to/file.gff[.gz]') as gff:\n    for entry in gff:\n        do_something(entry)\n\n```\n\n### *Pseudo*-Random Access\n\n```python\ngff = pygff.GffFile('/path/to/file.gff[.gz]')\nfor entry in gff.fetch('chr1', 123040, 128040):\n    do_something(entry)\n\n```\n\n### Output\n\n```python\n\nwith open('outfile.gff', 'wb') as outfile:\n    with pygff.GffFile('/path/to/file.gff[.gz]') as gff:\n        for entry in gff:\n            # Some filtering\n            print(entry, file = outfile)\n\n```\n\n---\n# Contributing & Code of Conduct:\nThis project is built on Open Science, Open Source, and Open Minds. To encourage\nan environment of inclusivity and positivity, please see our [Code of Conduct](https://github.com/betteridiot/pygff/blob/master/CODE_OF_CONDUCT.md).\n\nIf you are interested in contributing to the project, please see the [CONTRIBUTING](https://github.com/betteridiot/pygff/blob/master/CONTRIBUTING.md) guidelines", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/betteridiot/pygff", "keywords": "gff parsing bioinformatics genomics", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "pygff", "package_url": "https://pypi.org/project/pygff/", "platform": "", "project_url": "https://pypi.org/project/pygff/", "project_urls": {"Homepage": "https://github.com/betteridiot/pygff"}, "release_url": "https://pypi.org/project/pygff/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Utility program for parsing GFF3 files", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://anaconda.org/conda-forge/pygff\" rel=\"nofollow\"><img alt=\"Conda Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12cda46f32e1d2bd6b24fb89bcfb8d3a913d302c/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f70796766662e737667\"></a>\n<a href=\"https://badge.fury.io/py/pygff\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1324716d3cb93a082bb590e1c463db185a8bdbe0/68747470733a2f2f62616467652e667572792e696f2f70792f70796766662e737667\"></a>\n<a href=\"https://github.com/betteridiot/pygff/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/110fcca60a43a8ea37b1a5bda616e639325f2f30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667\"></a>\n<br></p>\n<h1>Installation:</h1>\n<p>There are multiple options available for installation</p>\n<pre><span class=\"c1\"># Recommended: from conda-forge</span>\nconda install -c conda-forge pygff\n\n<span class=\"c1\"># From PyPI</span>\npip install pygff\n\n<span class=\"c1\"># From GitHub</span>\ngit clone https://github.com/betteridiot/pygff.git\n<span class=\"nb\">cd</span> pygff\npython3 ./setup.py install\n</pre>\n<p>Optionally, you may want to test the program. A very small testing suite has been\nprovided. <strong>Note</strong>: <em><code>pytest</code> is required</em> for testing.</p>\n<p>If you choose to test the program on your current environment/build:</p>\n<pre><span class=\"c1\"># If installed from conda-forge or the PyPI</span>\npytest --pyargs pygff\n\n<span class=\"c1\"># Or, if installed from source</span>\npython ./setup.py <span class=\"nb\">test</span>\n</pre>\n<hr>\n<h1>'As-is' Warranty:</h1>\n<p>This program was written expressly for the purposes of education at the University\nof Michigan's Department of Computational Medicine &amp; Bioinformatics. It was only\nintended to work for a specific subset of GFF/GTF files: <strong>GFF3 files</strong>. No promises are\nmade as to its wider functionality.</p>\n<hr>\n<h1>Background:</h1>\n<p>The General Feature Format (GFF) was developed as a way to succinctly represent\ngenomic features (e.g. exons, introns, genes, etc). They are a 9-column, tab-delimited\nplain text (or gzip compressed) file. The 9 columns are described as such:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Column</th>\n<th align=\"center\">Content</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"center\">seqid</td>\n<td align=\"left\">The ID of the landmark used to establish the coordinate system for the current feature</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"center\">source</td>\n<td align=\"left\">The source is a free text qualifier intended to describe the algorithm or operating procedure that generated this feature</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"center\">type</td>\n<td align=\"left\">The type of the feature (previously called the \"method\")</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"center\">start</td>\n<td align=\"left\">The start coordinate of the feature, given in positive 1-based integer coordinates, relative to the landmark given in column one</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"center\">end</td>\n<td align=\"left\">The end coordinate of the feature, given in positive 1-based integer coordinates, relative to the landmark given in column one</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"center\">score</td>\n<td align=\"left\">The score of the feature, a floating point number</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"center\">strand</td>\n<td align=\"left\">The strand of the feature. '+' for positive strand (relative to the landmark), '-' for minus strand, and '.' for features that are not stranded</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"center\">phase</td>\n<td align=\"left\">For features of type \"CDS\", the phase indicates where the feature begins with reference to the reading frame</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"center\">attributes</td>\n<td align=\"left\">A list of feature attributes in the format tag=value</td>\n</tr></tbody></table>\n<p><strong>Note</strong>: this information was taken, in part, from <a href=\"https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md\" rel=\"nofollow\">The Sequence Ontology</a> group's GitHub.</p>\n<hr>\n<h1>Description:</h1>\n<p><code>pygff</code> was written to provide a helpful interface when handling GFF3 files. It\nallows the user to easily process the parsed GFF3 content, entry-by-entry, in a\nlazily generated way.</p>\n<p>However, an additional functionality was written that produces a GFF3 index\non the fly. This index allows for <em>pseudo-random access</em>. Due to how it is implemented,\nit is not recommended that this program is run from the command line directly since\nthe index is ephemeral by nature.</p>\n<p><code>pygff</code> exposes two classes for dealing with GFF3 data:</p>\n<h3><code>pygff.GffFile</code>:</h3>\n<p>Main class of the pygff package</p>\n<p>Handles the opening, iterating, and closing GFF3 files. Can handle both\nzipped and unzipped GFF3 files.</p>\n<p>When iterated, it lazily returns a <code>pygff.GffEntry</code> object. These objects\ncan be compared against each other and programmatically accessed for all traits.</p>\n<p><strong>Args</strong>:</p>\n<ol>\n<li><code>filename</code> (<code>str</code>): /path/to/file.gff[.gz]</li>\n<li><code>periods</code> (<code>int</code>): For indexing purposes, the period to determine thresholding (default: 3)</li>\n</ol>\n<p><strong>Raises</strong>:</p>\n<ul>\n<li><code>TypeError</code> if GFF file is not version 3</li>\n</ul>\n<p>And exposes the <code>pygff.GffFile.fetch(seqid, start, stop)</code> method:</p>\n<p>Generator that fetches all GFF entries within a given region.</p>\n<p>Also can only pull specific <em>types</em> of GFF entries (if supplied)</p>\n<p><strong>Args</strong>:</p>\n<ol>\n<li><code>seqid</code> (<code>str</code>): name of the chromosome of scaffold</li>\n<li><code>start</code> (<code>int</code>): start position of the feature (1-indexed)</li>\n<li><code>end</code> (<code>int</code>): end position of the feature (1-indexed)</li>\n<li><code>type</code> (<code>str</code>): GFF feature type (default: None)</li>\n</ol>\n<p><strong>Yields</strong>:</p>\n<ul>\n<li>(<code>pygff.GffEntry</code>): A given GFF entry from the region of interest</li>\n</ul>\n<h3><code>pygff.GffEntry</code>:</h3>\n<p>An object that represents a single GFF entry.</p>\n<p>This object also has the ability to perform total ordered comparison\noperations (&lt;, &lt;=, ==, !=, &gt;=, &gt;) based on seqid first, then start\nposition, and finally the end position.</p>\n<p><strong>Attributes</strong>:</p>\n<ol>\n<li><code>seqid</code> (<code>str</code>): name of the chromosome of scaffold<br></li>\n<li><code>source</code> (<code>str</code>): name of the program that generated the feature<br></li>\n<li><code>type</code> (<code>str</code>): type of feature<br></li>\n<li><code>start</code> (<code>int</code>): start position of the feature (1-indexed)<br></li>\n<li><code>end</code> (<code>int</code>): end position of the feature (1-indexed)<br></li>\n<li><code>score</code> (<code>float</code>): a quality score of the feature<br></li>\n<li><code>strand</code> (<code>str</code>): either '+' (forward), '-'(reverse), or '.'<br></li>\n<li><code>phase</code> (<code>int</code>): 0,1, or 2 that indicates that the first base of the is the first base of the codon<br></li>\n<li><code>attributes</code> (<code>dict</code>): a dictionary of all tag/value pairs<br></li>\n</ol>\n<hr>\n<h1>Quickstart</h1>\n<h3>Importing</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygff</span>\n</pre>\n<h3>Sequential Iteration</h3>\n<pre><span class=\"k\">with</span> <span class=\"n\">pygff</span><span class=\"o\">.</span><span class=\"n\">GffFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.gff[.gz]'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">gff</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">gff</span><span class=\"p\">:</span>\n        <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">)</span>\n</pre>\n<h3><em>Pseudo</em>-Random Access</h3>\n<pre><span class=\"n\">gff</span> <span class=\"o\">=</span> <span class=\"n\">pygff</span><span class=\"o\">.</span><span class=\"n\">GffFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.gff[.gz]'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">gff</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'chr1'</span><span class=\"p\">,</span> <span class=\"mi\">123040</span><span class=\"p\">,</span> <span class=\"mi\">128040</span><span class=\"p\">):</span>\n    <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">)</span>\n</pre>\n<h3>Output</h3>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'outfile.gff'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">outfile</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">pygff</span><span class=\"o\">.</span><span class=\"n\">GffFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.gff[.gz]'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">gff</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">gff</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Some filtering</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">,</span> <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">outfile</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h1>Contributing &amp; Code of Conduct:</h1>\n<p>This project is built on Open Science, Open Source, and Open Minds. To encourage\nan environment of inclusivity and positivity, please see our <a href=\"https://github.com/betteridiot/pygff/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">Code of Conduct</a>.</p>\n<p>If you are interested in contributing to the project, please see the <a href=\"https://github.com/betteridiot/pygff/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING</a> guidelines</p>\n\n          </div>"}, "last_serial": 4662402, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8d422a4d699396deee5b5078d18c9b39", "sha256": "fce5fb10672681f56e661fffda0f8541481c9e65342c32dbc9a1667cef329e30"}, "downloads": -1, "filename": "pygff-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8d422a4d699396deee5b5078d18c9b39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10239, "upload_time": "2019-01-04T18:10:38", "upload_time_iso_8601": "2019-01-04T18:10:38.125456Z", "url": "https://files.pythonhosted.org/packages/ad/ad/25371ca54022af008bed57d9c775525d13ebf3feb4f8395092f69a620145/pygff-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "dceac863062c26c3a8d826536be45061", "sha256": "39b92b4394b63df84287b14e4dd842e812a9acee0c5663910b0c8e083a90d301"}, "downloads": -1, "filename": "pygff-0.0.2.tar.gz", "has_sig": false, "md5_digest": "dceac863062c26c3a8d826536be45061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10371, "upload_time": "2019-01-05T01:54:56", "upload_time_iso_8601": "2019-01-05T01:54:56.970832Z", "url": "https://files.pythonhosted.org/packages/7e/ae/5af7de62aa89eedc3260a163b66a626fd6375c36e9d9594902bb8fa81e20/pygff-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dceac863062c26c3a8d826536be45061", "sha256": "39b92b4394b63df84287b14e4dd842e812a9acee0c5663910b0c8e083a90d301"}, "downloads": -1, "filename": "pygff-0.0.2.tar.gz", "has_sig": false, "md5_digest": "dceac863062c26c3a8d826536be45061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10371, "upload_time": "2019-01-05T01:54:56", "upload_time_iso_8601": "2019-01-05T01:54:56.970832Z", "url": "https://files.pythonhosted.org/packages/7e/ae/5af7de62aa89eedc3260a163b66a626fd6375c36e9d9594902bb8fa81e20/pygff-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:03 2020"}