{"info": {"author": "Bachynin Ivan", "author_email": "bachynin.i@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Utilities"], "description": "easy_flags\n==========\n\nThe goal of this nano-project is to provide simple alternative for ``argparse`` by adding some new features:\n\n#. easy definition\n#. type checking (with static type checking tools)\n#. reusability\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install easy_flags\n\n\nBasic example\n-------------\n\nfoo.py\n\n.. code-block:: python\n\n    from easy_flags import SimpleConfig\n\n    class MyConfig(SimpleConfig):\n        int_val = 4\n        bool_val = True\n        with_doc = 0.4, 'some docs'  # type: float\n        without_default = None, int, 'another docs'  # type: bool\n\n    if __name__ == '__main__':\n        # command line arguments will be parsed after ::define call\n        c = MyConfig().define().print()\n        print('bool_val:', c.bool_val)\n\n\nRun:\n\n.. code-block::\n\n    $ python foo.py\n\n    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    |  bool_val        : True\n    |  int_val         : 4\n    |  with_doc        : 0.4\n    |  without_default : None\n    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    bool_val: True\n\n    Process finished with exit code 0\n\n\n    $ python foo.py -h\n\n    usage: foo.py [-h] [--bool_val | --no-bool_val] [--int_val INT_VAL]\n                         [--with_doc WITH_DOC] [--without_default WITHOUT_DEFAULT]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --bool_val            bool, default: True\n      --no-bool_val\n      --int_val INT_VAL     int, default: 4\n      --with_doc WITH_DOC   float, default: 0.4 - some docs\n      --without_default WITHOUT_DEFAULT\n                            int, default: None - another docs\n\n\nAlternative definition\n----------------------\n\n.. code-block:: python\n\n    from easy_flags import Config, IntField, BoolField, FloatField\n\n    class MyConfig(Config):\n        int_val = IntField(4)\n        bool_val = BoolField(default=True)\n        with_doc = FloatField(0.4, 'some docs')\n        without_default = IntField(doc='another docs')\n\n\nReusabillity\n------------\n\n.. code-block:: python\n\n    from easy_flags import Config\n\n    class ModelConfig(Config):\n        layers = 4\n        time_steps = 256\n        cell_size = 256\n        dropout = 1.0\n\n    # same as model config + additional parameters\n    class TrainingConfig(ModelConfig):\n        lr = 0.001\n        epochs = 10000\n        dropout = 0.9  # change parent arg\n\n\nDocstrings\n----------\n\nIf you want to add help message for field (which will be displayed if you run script with ``--help`` flag), then you need to add it  after flags' default value:\n\n.. code-block:: python\n\n    class ExampleConfig(BaseConfig):\n        foo = 5.0, 'Some float field.'\n        bar = 'field with only default docstring'\n\n.. code-block:: bash\n\n    ./script.py --help\n    usage: test_base.py [-h] [--bar BAR] [--foo FOO]\n\n    optional arguments:\n      -h, --help  show this help message and exit\n      --bar BAR   String field, default='field with default docstring'.\n      --foo FOO   Float field, default=5.0. Some float field.\n\n\n\nBooleans\n--------\n\nBoolean flag with spefied in config name will set destination value to ``True``, and the same flag prefixed with 'no-' will set value to ``False``\n\n.. code-block:: python\n\n    class ExampleConfig(BaseConfig):\n        cache = True\n        f = False\n\n\n.. code-block:: bash\n\n    ./script --cache -f\n    # cache=True, f=True\n\n    ./script --no-cache --no-f\n    # cache=False, f=False\n\n\n\nShort flag names\n----------------\n\nIf flag name consists only from one letter then it can be specified with one dash instead of two.\n\n.. code-block:: python\n\n    class ExampleConfig(BaseConfig):\n        e = 100, 'number of epochs'\n        b = True\n\n\n.. code-block:: bash\n\n    ./train.py -e 42 -b\n    # also valid with two dashes\n    ./train.py --e 42 --b\n    ./train.py --e 42 --no-b\n\n\n\nSpecify type for tuples\n-----------------------\n\n.. code-block:: python\n\n    class ExampleConfig(BaseConfig):\n        lr = 0.001, 'learning rate'\n    conf = ExampleConfig()\n    conf.define()\n\n\nIn example above pre-defined ``conf.lr`` is obviously not a float and some static checkers after typec hecking will make a warning that they expected a float as argument for some function but got tuple instead. Fortunately we can help IDE by adding special comment with proper after-define type:\n\n.. code-block:: python\n\n    class ExampleConfig(BaseConfig):\n        lr = 0.001, 'learning rate'  # type: float\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vaniakosmos/easy_flags", "keywords": "flags,argparse", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "easy-flags", "package_url": "https://pypi.org/project/easy-flags/", "platform": "", "project_url": "https://pypi.org/project/easy-flags/", "project_urls": {"Homepage": "https://github.com/vaniakosmos/easy_flags"}, "release_url": "https://pypi.org/project/easy-flags/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Simplified flags definition.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The goal of this nano-project is to provide simple alternative for <tt>argparse</tt> by adding some new features:</p>\n<ol>\n<li>easy definition</li>\n<li>type checking (with static type checking tools)</li>\n<li>reusability</li>\n</ol>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install easy_flags\n</pre>\n</div>\n<div id=\"basic-example\">\n<h2>Basic example</h2>\n<p>foo.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easy_flags</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleConfig</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">SimpleConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">int_val</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n    <span class=\"n\">bool_val</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">with_doc</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s1\">'some docs'</span>  <span class=\"c1\"># type: float</span>\n    <span class=\"n\">without_default</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"s1\">'another docs'</span>  <span class=\"c1\"># type: bool</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># command line arguments will be parsed after ::define call</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">MyConfig</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'bool_val:'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">bool_val</span><span class=\"p\">)</span>\n</pre>\n<p>Run:</p>\n<pre>$ python foo.py\n\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n|  bool_val        : True\n|  int_val         : 4\n|  with_doc        : 0.4\n|  without_default : None\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nbool_val: True\n\nProcess finished with exit code 0\n\n\n$ python foo.py -h\n\nusage: foo.py [-h] [--bool_val | --no-bool_val] [--int_val INT_VAL]\n                     [--with_doc WITH_DOC] [--without_default WITHOUT_DEFAULT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --bool_val            bool, default: True\n  --no-bool_val\n  --int_val INT_VAL     int, default: 4\n  --with_doc WITH_DOC   float, default: 0.4 - some docs\n  --without_default WITHOUT_DEFAULT\n                        int, default: None - another docs\n</pre>\n</div>\n<div id=\"alternative-definition\">\n<h2>Alternative definition</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easy_flags</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"n\">IntField</span><span class=\"p\">,</span> <span class=\"n\">BoolField</span><span class=\"p\">,</span> <span class=\"n\">FloatField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n    <span class=\"n\">int_val</span> <span class=\"o\">=</span> <span class=\"n\">IntField</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"n\">bool_val</span> <span class=\"o\">=</span> <span class=\"n\">BoolField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">with_doc</span> <span class=\"o\">=</span> <span class=\"n\">FloatField</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s1\">'some docs'</span><span class=\"p\">)</span>\n    <span class=\"n\">without_default</span> <span class=\"o\">=</span> <span class=\"n\">IntField</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s1\">'another docs'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"reusabillity\">\n<h2>Reusabillity</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easy_flags</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ModelConfig</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n    <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n    <span class=\"n\">time_steps</span> <span class=\"o\">=</span> <span class=\"mi\">256</span>\n    <span class=\"n\">cell_size</span> <span class=\"o\">=</span> <span class=\"mi\">256</span>\n    <span class=\"n\">dropout</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n\n<span class=\"c1\"># same as model config + additional parameters</span>\n<span class=\"k\">class</span> <span class=\"nc\">TrainingConfig</span><span class=\"p\">(</span><span class=\"n\">ModelConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>\n    <span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n    <span class=\"n\">dropout</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span>  <span class=\"c1\"># change parent arg</span>\n</pre>\n</div>\n<div id=\"docstrings\">\n<h2>Docstrings</h2>\n<p>If you want to add help message for field (which will be displayed if you run script with <tt><span class=\"pre\">--help</span></tt> flag), then you need to add it  after flags\u2019 default value:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleConfig</span><span class=\"p\">(</span><span class=\"n\">BaseConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span><span class=\"p\">,</span> <span class=\"s1\">'Some float field.'</span>\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"s1\">'field with only default docstring'</span>\n</pre>\n<pre>./script.py --help\nusage: test_base.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--bar BAR<span class=\"o\">]</span> <span class=\"o\">[</span>--foo FOO<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help  show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --bar BAR   String field, <span class=\"nv\">default</span><span class=\"o\">=</span><span class=\"s1\">'field with default docstring'</span>.\n  --foo FOO   Float field, <span class=\"nv\">default</span><span class=\"o\">=</span><span class=\"m\">5</span>.0. Some float field.\n</pre>\n</div>\n<div id=\"booleans\">\n<h2>Booleans</h2>\n<p>Boolean flag with spefied in config name will set destination value to <tt>True</tt>, and the same flag prefixed with \u2018no-\u2018 will set value to <tt>False</tt></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleConfig</span><span class=\"p\">(</span><span class=\"n\">BaseConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<pre>./script --cache -f\n<span class=\"c1\"># cache=True, f=True\n</span>\n./script --no-cache --no-f\n<span class=\"c1\"># cache=False, f=False</span>\n</pre>\n</div>\n<div id=\"short-flag-names\">\n<h2>Short flag names</h2>\n<p>If flag name consists only from one letter then it can be specified with one dash instead of two.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleConfig</span><span class=\"p\">(</span><span class=\"n\">BaseConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'number of epochs'</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<pre>./train.py -e <span class=\"m\">42</span> -b\n<span class=\"c1\"># also valid with two dashes\n</span>./train.py --e <span class=\"m\">42</span> --b\n./train.py --e <span class=\"m\">42</span> --no-b\n</pre>\n</div>\n<div id=\"specify-type-for-tuples\">\n<h2>Specify type for tuples</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleConfig</span><span class=\"p\">(</span><span class=\"n\">BaseConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"s1\">'learning rate'</span>\n<span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">ExampleConfig</span><span class=\"p\">()</span>\n<span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">()</span>\n</pre>\n<p>In example above pre-defined <tt>conf.lr</tt> is obviously not a float and some static checkers after typec hecking will make a warning that they expected a float as argument for some function but got tuple instead. Fortunately we can help IDE by adding special comment with proper after-define type:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleConfig</span><span class=\"p\">(</span><span class=\"n\">BaseConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"s1\">'learning rate'</span>  <span class=\"c1\"># type: float</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4197189, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "37dd1d1b767659a6ffe09c1f55b5652d", "sha256": "2b4e357cd6cdd7ba5e58b9edb06eeeef34187f4b510585b4e59b4b22728c7b45"}, "downloads": -1, "filename": "easy_flags-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "37dd1d1b767659a6ffe09c1f55b5652d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4086, "upload_time": "2018-04-07T20:45:26", "upload_time_iso_8601": "2018-04-07T20:45:26.048309Z", "url": "https://files.pythonhosted.org/packages/12/e4/c38f8ce18362fd722a3733ec59579a4f33aa6c5df4f6d11af2085eb663c0/easy_flags-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "444d82763c2c5ddca451f5731e763426", "sha256": "b20ace670831fbb8949658a51e723ddfc8bd142c56855263375584fdd48b8125"}, "downloads": -1, "filename": "easy_flags-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "444d82763c2c5ddca451f5731e763426", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4088, "upload_time": "2018-04-07T20:50:05", "upload_time_iso_8601": "2018-04-07T20:50:05.636745Z", "url": "https://files.pythonhosted.org/packages/e9/85/64de153e511126c5eff2282332a240d118ae6c5f41326b328ba71a303b3d/easy_flags-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "abb087e1bb56ac0584d69794c01cfbb3", "sha256": "45c5841ddc367d476a0e7d788f1b2f219f5377864e612cc19dab7723fe903529"}, "downloads": -1, "filename": "easy_flags-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "abb087e1bb56ac0584d69794c01cfbb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7432, "upload_time": "2018-04-08T12:59:40", "upload_time_iso_8601": "2018-04-08T12:59:40.533987Z", "url": "https://files.pythonhosted.org/packages/b9/0e/0b3096cb2317a0295a0e90f1bcc235b91a7578b70d344fc77fd50f6d515a/easy_flags-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "fff7ac9cb589b95a371853b43c8df2f0", "sha256": "efb1e65a67d1cce16be805beaaab42bdebc4d1957492e28cb818ad19a8ece043"}, "downloads": -1, "filename": "easy_flags-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fff7ac9cb589b95a371853b43c8df2f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7513, "upload_time": "2018-07-26T12:24:39", "upload_time_iso_8601": "2018-07-26T12:24:39.730072Z", "url": "https://files.pythonhosted.org/packages/5a/84/0167afd6e63bb78be75448dd3bd0e06e3238e099ac9a8683b4db9e17aa4d/easy_flags-0.1.3-py3-none-any.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "39eb955404667274aa84e7f84f9b41d4", "sha256": "b7a8e34812131b1351cedcdc1437b3037b849302e16cf8f858cca1e2258dd765"}, "downloads": -1, "filename": "easy_flags-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "39eb955404667274aa84e7f84f9b41d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7606, "upload_time": "2018-07-28T19:33:56", "upload_time_iso_8601": "2018-07-28T19:33:56.380444Z", "url": "https://files.pythonhosted.org/packages/4a/42/1530fd89c78abe336e967f3a4794ef6df87438ba704b5d091208836c1aac/easy_flags-0.1.4-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "328a3c78c510d5e769647b42fefe3f8a", "sha256": "950a1ed876b1d54894a57d7374e97c3381d40749dd86c89605b32ffba2e2beb8"}, "downloads": -1, "filename": "easy_flags-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "328a3c78c510d5e769647b42fefe3f8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8780, "upload_time": "2018-08-14T16:11:35", "upload_time_iso_8601": "2018-08-14T16:11:35.954439Z", "url": "https://files.pythonhosted.org/packages/bd/5a/9d89ac6ded2dbd6041cbc525f4423051f3bf82a8cc3223ea53f740efb410/easy_flags-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "5c972f26c194a7a0aca0893cae810d07", "sha256": "d9d8da38cb2ac426894abfdb254b3dce3417cff23bb10edf716c80a5358c499f"}, "downloads": -1, "filename": "easy_flags-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c972f26c194a7a0aca0893cae810d07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8762, "upload_time": "2018-08-22T18:06:27", "upload_time_iso_8601": "2018-08-22T18:06:27.125623Z", "url": "https://files.pythonhosted.org/packages/44/3b/a4c868d8412f11fbd4f7d0b5051d89ee26228fb1a427e561509c694042d0/easy_flags-0.2.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c972f26c194a7a0aca0893cae810d07", "sha256": "d9d8da38cb2ac426894abfdb254b3dce3417cff23bb10edf716c80a5358c499f"}, "downloads": -1, "filename": "easy_flags-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c972f26c194a7a0aca0893cae810d07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8762, "upload_time": "2018-08-22T18:06:27", "upload_time_iso_8601": "2018-08-22T18:06:27.125623Z", "url": "https://files.pythonhosted.org/packages/44/3b/a4c868d8412f11fbd4f7d0b5051d89ee26228fb1a427e561509c694042d0/easy_flags-0.2.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:48:23 2020"}