{"info": {"author": "tp7309", "author_email": "yiyou7309@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "# TTPassGen\n\n[![Build Status](https://travis-ci.org/tp7309/TTPassGen.svg?branch=master)](https://travis-ci.org/tp7309/TTPassGen)\n[![Coverage Status](https://coveralls.io/repos/github/tp7309/TTPassGen/badge.svg?branch=master)](https://coveralls.io/github/tp7309/TTPassGen?branch=master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/25f05aa766c34eea9b9692725237e873)](https://www.codacy.com/app/tp7309/TTPassGen?utm_source=github.com&utm_medium=referral&utm_content=tp7309/TTPassGen&utm_campaign=Badge_Grade)\n[![Rawsec's CyberSecurity Inventory](https://inventory.rawsec.ml/img/badges/Rawsec-inventoried-FF5050_flat.svg)](https://inventory.rawsec.ml/tools.html#TTPassGen)\n\nTTPassGen is a highly flexiable and scriptable password dictionary generator base on Python, you can easily use various rules to generate the desired combination of words.\n\nREADME i18n: [\u4e2d\u6587\u8bf4\u660e](https://github.com/tp7309/TTPassGen/blob/master/README_zh_CN.md)\n\n# Features\n\n- generate password use combination\u3001permulation\u3001conditional rules and so on.\n- support all characters or words(from wordlist option) that can make up a password, some built-in charset has been provided, such as lowercase letter list and numeric list.\n- you can specify the order and frequency of each element in the word.\n- simple rule format, and easy to use, rule could be defined similar regex's style.\n- time-consuming estimates, output size estimates, and real-time progress reports.\n- unicode word support by using wordlist option.\n- generation of large amounts of passwords at once, no output size limit.\n- support split output by file size.\n\n# Install\n\n`TTPassGen` can be easily installed using pip:\n\n```\npip install ttpassgen\n```\n\n# Requirements\n\nPython 3.5 or later. if you are using windows, you could just use the [release version](https://github.com/tp7309/TTPassGen/releases), no need python environment.\n\n# Quick Start\n\n> Switch to the project's `ttpassgen` directory if you want use ttpassgen by downloaded source code.\n\nExample: Generate word list and output to `out.txt`, the word start with numbers, only allow 1\u30012\u30013, appear 2 or 3 times, end with `xyz`.\n\n```\nttpassgen -r \"[123]{2:3}xyz\" out.txt\n```\n\nDone.\n\n# Options\n\n```\nC:\\Users\\tp730>ttpassgen --help\nUsage: ttpassgen [OPTIONS] OUTPUT\nOptions:\n  -m, --mode INTEGER             generation mode:\n\n                                 0 = combination rule mode\n                                 [default: 0]\n  -d, --dictlist TEXT            read wordlist from the file, multi files\n                                 should by seperated by comma.\n  -r, --rule TEXT                define word format, $0 means refer first\n                                 file in dictlist option, some built-in char arrays:\n\n                                 ?l = abcdefghijklmnopqrstuvwxyz\n                                 ?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ\n                                 ?d = 0123456789\n                                 ?s = !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n                                 ?a = ?l?u?d?s\n                                 ?q = ]\n\n                                 example: [?dA]{1:2}$0\n                                 view *RuleTypes* section for more information.\n                                 [default: '']\n  -c, --dict_cache INTEGER       each element in 'dictlist' option represents\n                                 a dict file path, this option define the\n                                 maximum amount of memory(MB) that can be used,\n                                 increasing this value when the file is large\n                                 may increase the build speed.  [default: 500]\n  -g, --global_repeat_mode TEXT  global repeat mode, the value is used when the repeat mode of rule is not specified:\n\n                                 ? = 0 or 1 repetitions\n                                 * = 0 or more repetitions\n                                 [default: ?]\n  -p, --part_size INTEGER        when result data is huge, split package\n                                 size(MB) will be applied, 0 is unlimited.\n                                 [default: 0]\n  -a, --append_mode INTEGER      whether append content to OUTPUT or not.\n                                 [default: 0]\n  -s, --seperator TEXT           wword seperator for output file, by default, Mac/Linudx: \\n, Windows: \\r\\n\".\n                                 [default: Mac/Linux: \\n, Windows: \\r\\n]\n  --inencoding TEXT              dict file encoding.\n  --outencoding TEXT             output file encoding.  [default: utf-8]\n  --help                         Show this message and exit.\n```\n\nThe output file uses `utf-8` encoding by default, it is recommended to use _Notepad++_ to open this file.\n\n# RuleTypes\n\n**TTPassGen** supports three rule type, which can specified with the `--rule` option, you can use these rules at the same time.\n\n## CharArrayRule\n\nGenerate a word based on the defined char array and repeat information.\nRule format\uff1a\n\n```\n[]{min_repeat:max_repeat:repeat_mode}\n```\n\n### CharArray\n\nUse **[]** to wrap all chars.\n\nBuilt-in char arrays:\n\n```\n//lowercase letters\n?l = abcdefghijklmnopqrstuvwxyz\n\n//Uppercase letters\n?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n//Number list\n?d = 0123456789\n\n//Special character list\n?s = !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n\n//A collection of the above list\n?a = ?l?u?d?s\n\n//']', chars are wrapped with '[]', so if what put ']' into '[]', use '?q' instead of ']'.\n?q = ]\n```\n\nFor example, **[?d]** means to select char from number list.\n\n### RepeatFormat\n\n```\n{min_repeat:max_repeat:repeat_mode}\n```\n\nFor `CharArrayRule`, repeat times is the length of the word to be generated.\n\n- `min_repeat`\n  minimum repeat times\n- `max_repeat`\n  maximum repeat times\n- `repeat_mode`\n  char repeat mode\n\nDefine rule similar regex's style:\n\n**[]** 1 repetitions.\n`[123] -> 1 2 3`\n\n**[]?** 0 or 1 repetitions.\n`[123]? -> '' 1 2 3`\n\n**[]{m:n:r}** repeat `m` to `n` times.\nRepeat mode support `?` and `*`.\n\n- repeatMode is '?', each char appears 0 or 1 times in word.\n\n  `[123]{1:2:?} -> 1 2 3 12 13 21 23 31 32`\n\n- repeatMode is '\\*', each char appears 0 or more times in word.\n\n  `[123]{1:2:*} -> 1 2 3 11 12 13 21 22 23 31 32 33`\n\nShort rule format:\n\n- **[]{m:n}**\n\n  same as `[]{m:m:global_repeat_mode}`\n\n- **[]{n}**\n\n  same as `[]{n:n:global_repeat_mode}`\n\n- **[]{n:r}**\n\n  same as `[]{n:n:r}`\n\n### Example\n\nGenerate 8-digit numeric password:\n\n```\n[?d]{8:8:*} or [?d]{8:*} or [1234567890]{8:8:*}\n```\n\nGenerate an 8-digit numeric password, and each char in the password can appear at most once. Because the default value of `global repeat mode` is '?', so you can skip set repeat_mode:\n\n```\n[?d]{8:8:?} or [?d]{8}\n```\n\nGenerate a password of 7 to 8 digits in length. The word can be composed of upper and lower case letters, numbers, and `_`:\n\n```\n[?l?u?d_]{7:8:*}\n```\n\nUse characters 1, 2, and 3 to generate a 4-digit password, and each character can appear at most once in each word:\n\n```\n[123]{4}  //Error! the length of word cannot be greater than the char array size.\n[123]{2}[123]{2}  //Correct.\n```\n\n## StringArrayRule\n\nGenerate a word based on the defined string array and repeat information.\nRule format\uff1a\n\n- `$(string1,string2){min_repeat:max_repeat:repeat_mode}`\n\n  String array, each string is splited by comma, no spaces.\n\n- `string`\n\n  Normal string, same as `$(string){1:1:?}`.\n\nLike `CharArrayRule`, but `StringArrayRule` does not support `Short rule format`.\n\n### Example\n\nGenerate an 8-digit numeric password, end with `abc`:\n\n```\n[?d]{8:8:*}abc\n```\n\nChoose a number from (10,20,30), then append it after 'age':\n\n```\nage$(10,20,30){1:1:?}\n```\n\nChoose a number from (10,20,30), then append it after 'age', end with 'x' or 'y':\n\n```\nage$(10,20,30){1:1:?}[xy]\n```\n\n## DictRule\n\nRead string from file(txt file). The dictionary file path can be specified by the `--dictlist` option. For example,`$0` means to refer 0th dictionary file.\n\nRule format:\n\n```\n$index\n```\n\n`DictRule` not support repeat mode.\n\n### Example\n\ncontent of `in.txt`:\n\n```\nab\ncd\n```\n\ncontent of `in2.txt`:\n\n```\n12\n34\n```\n\nWhen `--dictlist` option defined as `in.dict,in2.dict` and _seperator_ is one space, run following command\uff1a\n\n```bash\nttpassgen --dictlist \"in.txt,in2.txt\" --rule \"$0[_]?$1\" -s \" \" out.txt\n```\n\nOutput:\n\n```\nab12 ab34 ab_12 ab_34 cd12 cd34 cd_12 cd_34\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tp7309/TTPassGen", "keywords": "ttpassgen crunch password-generator wordlist password-dict password-dict-generator brute-force word-combination", "license": "Apache License Version 2.0", "maintainer": "", "maintainer_email": "", "name": "ttpassgen", "package_url": "https://pypi.org/project/ttpassgen/", "platform": "", "project_url": "https://pypi.org/project/ttpassgen/", "project_urls": {"Homepage": "https://github.com/tp7309/TTPassGen"}, "release_url": "https://pypi.org/project/ttpassgen/1.1.2/", "requires_dist": ["click", "tqdm"], "requires_python": "", "summary": "A highly flexiable and scriptable password dictionary generator.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TTPassGen</h1>\n<p><a href=\"https://travis-ci.org/tp7309/TTPassGen\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/821b1c077abe7ca1434689c8ca58f9ab931b6fe0/68747470733a2f2f7472617669732d63692e6f72672f7470373330392f54545061737347656e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/tp7309/TTPassGen?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bafdea5f6b8f43bec9d709be24664cb395350a74/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7470373330392f54545061737347656e2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://www.codacy.com/app/tp7309/TTPassGen?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=tp7309/TTPassGen&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6115a58820fc69e144db3e904c09abb99f062f08/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3235663035616137363663333465656139623936393237323532333765383733\"></a>\n<a href=\"https://inventory.rawsec.ml/tools.html#TTPassGen\" rel=\"nofollow\"><img alt=\"Rawsec's CyberSecurity Inventory\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c9f54ccfeb3d2020c31085416d88c946e981d68/68747470733a2f2f696e76656e746f72792e7261777365632e6d6c2f696d672f6261646765732f5261777365632d696e76656e746f726965642d4646353035305f666c61742e737667\"></a></p>\n<p>TTPassGen is a highly flexiable and scriptable password dictionary generator base on Python, you can easily use various rules to generate the desired combination of words.</p>\n<p>README i18n: <a href=\"https://github.com/tp7309/TTPassGen/blob/master/README_zh_CN.md\" rel=\"nofollow\">\u4e2d\u6587\u8bf4\u660e</a></p>\n<h1>Features</h1>\n<ul>\n<li>generate password use combination\u3001permulation\u3001conditional rules and so on.</li>\n<li>support all characters or words(from wordlist option) that can make up a password, some built-in charset has been provided, such as lowercase letter list and numeric list.</li>\n<li>you can specify the order and frequency of each element in the word.</li>\n<li>simple rule format, and easy to use, rule could be defined similar regex's style.</li>\n<li>time-consuming estimates, output size estimates, and real-time progress reports.</li>\n<li>unicode word support by using wordlist option.</li>\n<li>generation of large amounts of passwords at once, no output size limit.</li>\n<li>support split output by file size.</li>\n</ul>\n<h1>Install</h1>\n<p><code>TTPassGen</code> can be easily installed using pip:</p>\n<pre><code>pip install ttpassgen\n</code></pre>\n<h1>Requirements</h1>\n<p>Python 3.5 or later. if you are using windows, you could just use the <a href=\"https://github.com/tp7309/TTPassGen/releases\" rel=\"nofollow\">release version</a>, no need python environment.</p>\n<h1>Quick Start</h1>\n<blockquote>\n<p>Switch to the project's <code>ttpassgen</code> directory if you want use ttpassgen by downloaded source code.</p>\n</blockquote>\n<p>Example: Generate word list and output to <code>out.txt</code>, the word start with numbers, only allow 1\u30012\u30013, appear 2 or 3 times, end with <code>xyz</code>.</p>\n<pre><code>ttpassgen -r \"[123]{2:3}xyz\" out.txt\n</code></pre>\n<p>Done.</p>\n<h1>Options</h1>\n<pre><code>C:\\Users\\tp730&gt;ttpassgen --help\nUsage: ttpassgen [OPTIONS] OUTPUT\nOptions:\n  -m, --mode INTEGER             generation mode:\n\n                                 0 = combination rule mode\n                                 [default: 0]\n  -d, --dictlist TEXT            read wordlist from the file, multi files\n                                 should by seperated by comma.\n  -r, --rule TEXT                define word format, $0 means refer first\n                                 file in dictlist option, some built-in char arrays:\n\n                                 ?l = abcdefghijklmnopqrstuvwxyz\n                                 ?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ\n                                 ?d = 0123456789\n                                 ?s = !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~\n                                 ?a = ?l?u?d?s\n                                 ?q = ]\n\n                                 example: [?dA]{1:2}$0\n                                 view *RuleTypes* section for more information.\n                                 [default: '']\n  -c, --dict_cache INTEGER       each element in 'dictlist' option represents\n                                 a dict file path, this option define the\n                                 maximum amount of memory(MB) that can be used,\n                                 increasing this value when the file is large\n                                 may increase the build speed.  [default: 500]\n  -g, --global_repeat_mode TEXT  global repeat mode, the value is used when the repeat mode of rule is not specified:\n\n                                 ? = 0 or 1 repetitions\n                                 * = 0 or more repetitions\n                                 [default: ?]\n  -p, --part_size INTEGER        when result data is huge, split package\n                                 size(MB) will be applied, 0 is unlimited.\n                                 [default: 0]\n  -a, --append_mode INTEGER      whether append content to OUTPUT or not.\n                                 [default: 0]\n  -s, --seperator TEXT           wword seperator for output file, by default, Mac/Linudx: \\n, Windows: \\r\\n\".\n                                 [default: Mac/Linux: \\n, Windows: \\r\\n]\n  --inencoding TEXT              dict file encoding.\n  --outencoding TEXT             output file encoding.  [default: utf-8]\n  --help                         Show this message and exit.\n</code></pre>\n<p>The output file uses <code>utf-8</code> encoding by default, it is recommended to use <em>Notepad++</em> to open this file.</p>\n<h1>RuleTypes</h1>\n<p><strong>TTPassGen</strong> supports three rule type, which can specified with the <code>--rule</code> option, you can use these rules at the same time.</p>\n<h2>CharArrayRule</h2>\n<p>Generate a word based on the defined char array and repeat information.\nRule format\uff1a</p>\n<pre><code>[]{min_repeat:max_repeat:repeat_mode}\n</code></pre>\n<h3>CharArray</h3>\n<p>Use <strong>[]</strong> to wrap all chars.</p>\n<p>Built-in char arrays:</p>\n<pre><code>//lowercase letters\n?l = abcdefghijklmnopqrstuvwxyz\n\n//Uppercase letters\n?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n//Number list\n?d = 0123456789\n\n//Special character list\n?s = !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~\n\n//A collection of the above list\n?a = ?l?u?d?s\n\n//']', chars are wrapped with '[]', so if what put ']' into '[]', use '?q' instead of ']'.\n?q = ]\n</code></pre>\n<p>For example, <strong>[?d]</strong> means to select char from number list.</p>\n<h3>RepeatFormat</h3>\n<pre><code>{min_repeat:max_repeat:repeat_mode}\n</code></pre>\n<p>For <code>CharArrayRule</code>, repeat times is the length of the word to be generated.</p>\n<ul>\n<li><code>min_repeat</code>\nminimum repeat times</li>\n<li><code>max_repeat</code>\nmaximum repeat times</li>\n<li><code>repeat_mode</code>\nchar repeat mode</li>\n</ul>\n<p>Define rule similar regex's style:</p>\n<p><strong>[]</strong> 1 repetitions.\n<code>[123] -&gt; 1 2 3</code></p>\n<p><strong>[]?</strong> 0 or 1 repetitions.\n<code>[123]? -&gt; '' 1 2 3</code></p>\n<p><strong>[]{m:n:r}</strong> repeat <code>m</code> to <code>n</code> times.\nRepeat mode support <code>?</code> and <code>*</code>.</p>\n<ul>\n<li>\n<p>repeatMode is '?', each char appears 0 or 1 times in word.</p>\n<p><code>[123]{1:2:?} -&gt; 1 2 3 12 13 21 23 31 32</code></p>\n</li>\n<li>\n<p>repeatMode is '*', each char appears 0 or more times in word.</p>\n<p><code>[123]{1:2:*} -&gt; 1 2 3 11 12 13 21 22 23 31 32 33</code></p>\n</li>\n</ul>\n<p>Short rule format:</p>\n<ul>\n<li>\n<p><strong>[]{m:n}</strong></p>\n<p>same as <code>[]{m:m:global_repeat_mode}</code></p>\n</li>\n<li>\n<p><strong>[]{n}</strong></p>\n<p>same as <code>[]{n:n:global_repeat_mode}</code></p>\n</li>\n<li>\n<p><strong>[]{n:r}</strong></p>\n<p>same as <code>[]{n:n:r}</code></p>\n</li>\n</ul>\n<h3>Example</h3>\n<p>Generate 8-digit numeric password:</p>\n<pre><code>[?d]{8:8:*} or [?d]{8:*} or [1234567890]{8:8:*}\n</code></pre>\n<p>Generate an 8-digit numeric password, and each char in the password can appear at most once. Because the default value of <code>global repeat mode</code> is '?', so you can skip set repeat_mode:</p>\n<pre><code>[?d]{8:8:?} or [?d]{8}\n</code></pre>\n<p>Generate a password of 7 to 8 digits in length. The word can be composed of upper and lower case letters, numbers, and <code>_</code>:</p>\n<pre><code>[?l?u?d_]{7:8:*}\n</code></pre>\n<p>Use characters 1, 2, and 3 to generate a 4-digit password, and each character can appear at most once in each word:</p>\n<pre><code>[123]{4}  //Error! the length of word cannot be greater than the char array size.\n[123]{2}[123]{2}  //Correct.\n</code></pre>\n<h2>StringArrayRule</h2>\n<p>Generate a word based on the defined string array and repeat information.\nRule format\uff1a</p>\n<ul>\n<li>\n<p><code>$(string1,string2){min_repeat:max_repeat:repeat_mode}</code></p>\n<p>String array, each string is splited by comma, no spaces.</p>\n</li>\n<li>\n<p><code>string</code></p>\n<p>Normal string, same as <code>$(string){1:1:?}</code>.</p>\n</li>\n</ul>\n<p>Like <code>CharArrayRule</code>, but <code>StringArrayRule</code> does not support <code>Short rule format</code>.</p>\n<h3>Example</h3>\n<p>Generate an 8-digit numeric password, end with <code>abc</code>:</p>\n<pre><code>[?d]{8:8:*}abc\n</code></pre>\n<p>Choose a number from (10,20,30), then append it after 'age':</p>\n<pre><code>age$(10,20,30){1:1:?}\n</code></pre>\n<p>Choose a number from (10,20,30), then append it after 'age', end with 'x' or 'y':</p>\n<pre><code>age$(10,20,30){1:1:?}[xy]\n</code></pre>\n<h2>DictRule</h2>\n<p>Read string from file(txt file). The dictionary file path can be specified by the <code>--dictlist</code> option. For example,<code>$0</code> means to refer 0th dictionary file.</p>\n<p>Rule format:</p>\n<pre><code>$index\n</code></pre>\n<p><code>DictRule</code> not support repeat mode.</p>\n<h3>Example</h3>\n<p>content of <code>in.txt</code>:</p>\n<pre><code>ab\ncd\n</code></pre>\n<p>content of <code>in2.txt</code>:</p>\n<pre><code>12\n34\n</code></pre>\n<p>When <code>--dictlist</code> option defined as <code>in.dict,in2.dict</code> and <em>seperator</em> is one space, run following command\uff1a</p>\n<pre>ttpassgen --dictlist <span class=\"s2\">\"in.txt,in2.txt\"</span> --rule <span class=\"s2\">\"</span><span class=\"nv\">$0</span><span class=\"s2\">[_]?</span><span class=\"nv\">$1</span><span class=\"s2\">\"</span> -s <span class=\"s2\">\" \"</span> out.txt\n</pre>\n<p>Output:</p>\n<pre><code>ab12 ab34 ab_12 ab_34 cd12 cd34 cd_12 cd_34\n</code></pre>\n\n          </div>"}, "last_serial": 7142635, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "31b95f4f14d190d39e5e604234d9bdb8", "sha256": "3d04d5cc1fa9fd11b51e44d2143e2214b5f2d228ebe0e37e5069dd7397dcb311"}, "downloads": -1, "filename": "ttpassgen-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "31b95f4f14d190d39e5e604234d9bdb8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15492, "upload_time": "2017-06-04T14:44:55", "upload_time_iso_8601": "2017-06-04T14:44:55.501196Z", "url": "https://files.pythonhosted.org/packages/85/a9/57f22f0308e41e5212c0bb442d7516e40107eb8f38d5b370aad55283c6d5/ttpassgen-1.0.1-py2.py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e4a6f516edf47d1c116dc0019e87a8cb", "sha256": "43a419d50c0647ab501147bdbe2bb31cbb2a26300a4cddcee167d1b91e41481f"}, "downloads": -1, "filename": "ttpassgen-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e4a6f516edf47d1c116dc0019e87a8cb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15504, "upload_time": "2017-07-23T07:23:39", "upload_time_iso_8601": "2017-07-23T07:23:39.221806Z", "url": "https://files.pythonhosted.org/packages/e1/6b/2c6ff059b276e570ba625e91f097fb4573630031ceaba65f2d484ee52929/ttpassgen-1.0.2-py2.py3-none-any.whl", "yanked": false}], "1.0.4.1": [{"comment_text": "", "digests": {"md5": "78d37b9c55dd936bd13a2f7cba9063b4", "sha256": "bee3be9d3fa68773a2d3cdc93ee931dfac31e832f33376bb484bad2aedeeee70"}, "downloads": -1, "filename": "ttpassgen-1.0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "78d37b9c55dd936bd13a2f7cba9063b4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8644, "upload_time": "2018-08-08T04:49:19", "upload_time_iso_8601": "2018-08-08T04:49:19.538049Z", "url": "https://files.pythonhosted.org/packages/3b/a4/bdf55ecaeebe41b50a7231c30302b16f44c6831dc4968cdc745ed22b3810/ttpassgen-1.0.4.1-py2.py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "5c9a0105ebe33523d96ed2a7f092b2a0", "sha256": "2769da4fab863dc56273165583f58a19e3ce4599f8d0eb030298ca71a39fd905"}, "downloads": -1, "filename": "ttpassgen-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5c9a0105ebe33523d96ed2a7f092b2a0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14842, "upload_time": "2020-04-25T08:40:33", "upload_time_iso_8601": "2020-04-25T08:40:33.606652Z", "url": "https://files.pythonhosted.org/packages/9c/a9/b2b85824835cff83a6a4958241595b6538b8417a18eb6965737fcaf34576/ttpassgen-1.1.1-py2.py3-none-any.whl", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "c4c26c95156ea6cd892c77d917b922d3", "sha256": "21701c51748dc161e4efc8f866e612c8f30c0289eaead76d6b685e3ad674a6a1"}, "downloads": -1, "filename": "ttpassgen-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c4c26c95156ea6cd892c77d917b922d3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15038, "upload_time": "2020-05-01T04:23:50", "upload_time_iso_8601": "2020-05-01T04:23:50.740995Z", "url": "https://files.pythonhosted.org/packages/6c/27/cfe79d4f803b5ccd5e98080407b431b95378c7df670a9f3cc1bd233e3572/ttpassgen-1.1.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c4c26c95156ea6cd892c77d917b922d3", "sha256": "21701c51748dc161e4efc8f866e612c8f30c0289eaead76d6b685e3ad674a6a1"}, "downloads": -1, "filename": "ttpassgen-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c4c26c95156ea6cd892c77d917b922d3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15038, "upload_time": "2020-05-01T04:23:50", "upload_time_iso_8601": "2020-05-01T04:23:50.740995Z", "url": "https://files.pythonhosted.org/packages/6c/27/cfe79d4f803b5ccd5e98080407b431b95378c7df670a9f3cc1bd233e3572/ttpassgen-1.1.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:44:59 2020"}