{"info": {"author": "Wyatt Baldwin", "author_email": "self@wyattbaldwin.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "Dijkstar\n++++++++\n\nDijkstar is an implementation of Dijkstra's single-source shortest-paths\nalgorithm. If a destination node is given, the algorithm halts when that\nnode is reached; otherwise it continues until paths from the source node\nto all other nodes are found.\n\nAccepts an optional cost (or \"weight\") function that will be called on\nevery iteration.\n\nAlso accepts an optional heuristic function that is used to push the\nalgorithm toward a destination instead of fanning out in every\ndirection. Using such a heuristic function converts Dijkstra to A* (and\nthis is where the name \"Dijkstar\" comes from).\n\nPerformance is decent on a graph with 100,000+ nodes. Runs in around .5\nseconds on average.\n\nExample::\n\n    >>> from dijkstar import Graph, find_path\n    >>> graph = Graph()\n    >>> graph.add_edge(1, 2, 110)\n    >>> graph.add_edge(2, 3, 125)\n    >>> graph.add_edge(3, 4, 108)\n    >>> find_path(graph, 1, 4)\n    PathInfo(\n        nodes=[1, 2, 3, 4],\n        edges=[110, 125, 108],\n        costs=[110, 125, 108],\n        total_cost=343)\n\nIn this example, the edges are just simple numeric values--110, 125,\n108--that could represent lengths, such as the length of a street\nsegment between two intersections. ``find_path`` will use these values\ndirectly as costs.\n\nExample with cost function::\n\n    >>> from dijkstar import Graph, find_path\n    >>> graph = Graph()\n    >>> graph.add_edge(1, 2, (110, 'Main Street'))\n    >>> graph.add_edge(2, 3, (125, 'Main Street'))\n    >>> graph.add_edge(3, 4, (108, '1st Street'))\n    >>> def cost_func(u, v, edge, prev_edge):\n    ...     length, name = edge\n    ...     if prev_edge:\n    ...         prev_name = prev_edge[1]\n    ...     else:\n    ...         prev_name = None\n    ...     cost = length\n    ...     if name != prev_name:\n    ...         cost += 10\n    ...     return cost\n    ...\n    >>> find_path(graph, 1, 4, cost_func=cost_func)\n    PathInfo(\n        nodes=[1, 2, 3, 4],\n        edges=[(110, 'Main Street'), (125, 'Main Street'), (108, '1st Street')],\n        costs=[120, 125, 118],\n        total_cost=363)\n\nThe cost function is passed the current node (u), a neighbor (v) of the\ncurrent node, the edge that connects u to v, and the edge that was\ntraversed previously to get to the current node.\n\nA cost function is most useful when computing costs dynamically. If\ncosts in your graph are fixed, a cost function will only add unnecessary\noverhead. In the example above, a penalty is added when the street name\nchanges.\n\nWhen using a cost function, one recommendation is to compute a base cost when\npossible. For example, for a graph that represents a street network, the base\ncost for each street segment (edge) could be the length of the segment\nmultiplied by the speed limit. There are two advantages to this: the size of\nthe graph will be smaller and the cost function will be doing less work, which\nmay improve performance.\n\nGraph Export & Import\n=====================\n\nThe graph can be saved to disk (pickled) like so::\n\n    >>> graph.dump(path)\n\nAnd read back like this (load is a classmethod that returns a\npopulated Graph instance)::\n\n    >>> Graph.load(path)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wylee/Dijkstar", "keywords": "Dijkstra A* algorithms", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Dijkstar", "package_url": "https://pypi.org/project/Dijkstar/", "platform": "", "project_url": "https://pypi.org/project/Dijkstar/", "project_urls": {"Homepage": "https://github.com/wylee/Dijkstar"}, "release_url": "https://pypi.org/project/Dijkstar/2.5.0/", "requires_dist": null, "requires_python": "", "summary": "Dijkstra/A*", "version": "2.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Dijkstar is an implementation of Dijkstra\u2019s single-source shortest-paths\nalgorithm. If a destination node is given, the algorithm halts when that\nnode is reached; otherwise it continues until paths from the source node\nto all other nodes are found.</p>\n<p>Accepts an optional cost (or \u201cweight\u201d) function that will be called on\nevery iteration.</p>\n<p>Also accepts an optional heuristic function that is used to push the\nalgorithm toward a destination instead of fanning out in every\ndirection. Using such a heuristic function converts Dijkstra to A* (and\nthis is where the name \u201cDijkstar\u201d comes from).</p>\n<p>Performance is decent on a graph with 100,000+ nodes. Runs in around .5\nseconds on average.</p>\n<p>Example:</p>\n<pre>&gt;&gt;&gt; from dijkstar import Graph, find_path\n&gt;&gt;&gt; graph = Graph()\n&gt;&gt;&gt; graph.add_edge(1, 2, 110)\n&gt;&gt;&gt; graph.add_edge(2, 3, 125)\n&gt;&gt;&gt; graph.add_edge(3, 4, 108)\n&gt;&gt;&gt; find_path(graph, 1, 4)\nPathInfo(\n    nodes=[1, 2, 3, 4],\n    edges=[110, 125, 108],\n    costs=[110, 125, 108],\n    total_cost=343)\n</pre>\n<p>In this example, the edges are just simple numeric values\u2013110, 125,\n108\u2013that could represent lengths, such as the length of a street\nsegment between two intersections. <tt>find_path</tt> will use these values\ndirectly as costs.</p>\n<p>Example with cost function:</p>\n<pre>&gt;&gt;&gt; from dijkstar import Graph, find_path\n&gt;&gt;&gt; graph = Graph()\n&gt;&gt;&gt; graph.add_edge(1, 2, (110, 'Main Street'))\n&gt;&gt;&gt; graph.add_edge(2, 3, (125, 'Main Street'))\n&gt;&gt;&gt; graph.add_edge(3, 4, (108, '1st Street'))\n&gt;&gt;&gt; def cost_func(u, v, edge, prev_edge):\n...     length, name = edge\n...     if prev_edge:\n...         prev_name = prev_edge[1]\n...     else:\n...         prev_name = None\n...     cost = length\n...     if name != prev_name:\n...         cost += 10\n...     return cost\n...\n&gt;&gt;&gt; find_path(graph, 1, 4, cost_func=cost_func)\nPathInfo(\n    nodes=[1, 2, 3, 4],\n    edges=[(110, 'Main Street'), (125, 'Main Street'), (108, '1st Street')],\n    costs=[120, 125, 118],\n    total_cost=363)\n</pre>\n<p>The cost function is passed the current node (u), a neighbor (v) of the\ncurrent node, the edge that connects u to v, and the edge that was\ntraversed previously to get to the current node.</p>\n<p>A cost function is most useful when computing costs dynamically. If\ncosts in your graph are fixed, a cost function will only add unnecessary\noverhead. In the example above, a penalty is added when the street name\nchanges.</p>\n<p>When using a cost function, one recommendation is to compute a base cost when\npossible. For example, for a graph that represents a street network, the base\ncost for each street segment (edge) could be the length of the segment\nmultiplied by the speed limit. There are two advantages to this: the size of\nthe graph will be smaller and the cost function will be doing less work, which\nmay improve performance.</p>\n<div id=\"graph-export-import\">\n<h2>Graph Export &amp; Import</h2>\n<p>The graph can be saved to disk (pickled) like so:</p>\n<pre>&gt;&gt;&gt; graph.dump(path)\n</pre>\n<p>And read back like this (load is a classmethod that returns a\npopulated Graph instance):</p>\n<pre>&gt;&gt;&gt; Graph.load(path)\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6315161, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "ef260e27ffd8a17c4b43a5f77b68a655", "sha256": "18e5966c7dd4cb7aa5826ce140c406173e3e431c1ffb4683b0045029a74ab1ba"}, "downloads": -1, "filename": "Dijkstar-1.0.tar.gz", "has_sig": false, "md5_digest": "ef260e27ffd8a17c4b43a5f77b68a655", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4472, "upload_time": "2008-08-29T04:28:09", "upload_time_iso_8601": "2008-08-29T04:28:09Z", "url": "https://files.pythonhosted.org/packages/b0/a5/585cb1b06683137bfb2651d792f688a92fe25c2705c6b5e0656c5e8d33de/Dijkstar-1.0.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "35b7d602dd723e1467ffa3dbab5f871a", "sha256": "3dc6712083fa34819f23e9638beee3d18b6d04c21ebbf6c3e4d5013daace6163"}, "downloads": -1, "filename": "Dijkstar-2.0.tar.gz", "has_sig": false, "md5_digest": "35b7d602dd723e1467ffa3dbab5f871a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6932, "upload_time": "2013-03-26T19:31:05", "upload_time_iso_8601": "2013-03-26T19:31:05.217740Z", "url": "https://files.pythonhosted.org/packages/d7/f4/59ebaa733a14e96e0f466187e82812137579c395c38a708756c516f156ad/Dijkstar-2.0.tar.gz", "yanked": false}], "2.0b2": [{"comment_text": "", "digests": {"md5": "a774c44287f17b7648187554a91ccaa2", "sha256": "69ff9b91b979e033134da368030bba1d96ceca8f77803b49ec1188f0f6cfb8b7"}, "downloads": -1, "filename": "Dijkstar-2.0b2.tar.gz", "has_sig": false, "md5_digest": "a774c44287f17b7648187554a91ccaa2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6012, "upload_time": "2012-12-05T06:35:23", "upload_time_iso_8601": "2012-12-05T06:35:23.327150Z", "url": "https://files.pythonhosted.org/packages/c9/e4/5428e42494014e9d505033edbf58751d1b733c35e4dd3f38193efcc28179/Dijkstar-2.0b2.tar.gz", "yanked": false}], "2.0b3": [{"comment_text": "", "digests": {"md5": "d5739d1de7891e079170504d6bd6caa3", "sha256": "be5852f80b5e8740e436d4301c84cd2e2503bc2e493fc1f17b79d7834a624562"}, "downloads": -1, "filename": "Dijkstar-2.0b3.zip", "has_sig": false, "md5_digest": "d5739d1de7891e079170504d6bd6caa3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8675, "upload_time": "2012-12-07T02:40:33", "upload_time_iso_8601": "2012-12-07T02:40:33.402240Z", "url": "https://files.pythonhosted.org/packages/81/b0/4a288eeca9566c0a3afefa6d931e8b5378374c92af7060499c4965b2c176/Dijkstar-2.0b3.zip", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "1ed460e5b6aa38afff8a264baf18a50c", "sha256": "706174a97de152c6bd11167aafde3b4c904a4e869029f1182a4ef7b8ab53ca5d"}, "downloads": -1, "filename": "Dijkstar-2.1.tar.gz", "has_sig": false, "md5_digest": "1ed460e5b6aa38afff8a264baf18a50c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7550, "upload_time": "2014-02-02T07:19:12", "upload_time_iso_8601": "2014-02-02T07:19:12.387421Z", "url": "https://files.pythonhosted.org/packages/2c/cc/6bf88c3282b1df1402c877cd1e8869d0329fa03fc513676b19106676ef36/Dijkstar-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "f6b8b9bab43c09d4128a612397d236b0", "sha256": "47f67f744a43c5b5940a5e72a2de45dc6e0ceb744d7a604f22fda1547b035f1b"}, "downloads": -1, "filename": "Dijkstar-2.2.tar.gz", "has_sig": false, "md5_digest": "f6b8b9bab43c09d4128a612397d236b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7651, "upload_time": "2014-04-01T00:28:28", "upload_time_iso_8601": "2014-04-01T00:28:28.587897Z", "url": "https://files.pythonhosted.org/packages/41/3c/c8b35b2f2477f12d5920d548fd1fd593dddf129faf18d54fb146f96c92f1/Dijkstar-2.2.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "02715dee2ed591b4400ed7ac67881105", "sha256": "b45d0b02146a45dec80805db2eadfd255d2b274e43f0cbb42276f5d5ec440ca6"}, "downloads": -1, "filename": "Dijkstar-2.3.0.tar.gz", "has_sig": false, "md5_digest": "02715dee2ed591b4400ed7ac67881105", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8238, "upload_time": "2017-11-10T02:09:07", "upload_time_iso_8601": "2017-11-10T02:09:07.768108Z", "url": "https://files.pythonhosted.org/packages/4a/f1/99a6c449140ce1aa8e9eb8f78fbb48ba2362c9018565ae04fdbbaa3ddf7f/Dijkstar-2.3.0.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "22a6687d35443628f700d3e30780bb9c", "sha256": "596d413b54c2c2f30a66ad06bea27a141f8c725ffa89b149e9cc55ec84edea8b"}, "downloads": -1, "filename": "Dijkstar-2.4.0.tar.gz", "has_sig": false, "md5_digest": "22a6687d35443628f700d3e30780bb9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8201, "upload_time": "2018-01-01T21:59:16", "upload_time_iso_8601": "2018-01-01T21:59:16.727302Z", "url": "https://files.pythonhosted.org/packages/87/47/99c60dc0257c751ba59e31cc72f044d5f9d90c1f8960418723e2812d6bb0/Dijkstar-2.4.0.tar.gz", "yanked": false}], "2.5.0": [{"comment_text": "", "digests": {"md5": "f30be25d6159f0fad3f1d95fddb878fd", "sha256": "bf3f71c80a36b33524905c3b59af06758070d3cede060e42fb273acd8399d0ae"}, "downloads": -1, "filename": "Dijkstar-2.5.0.tar.gz", "has_sig": false, "md5_digest": "f30be25d6159f0fad3f1d95fddb878fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15201, "upload_time": "2019-11-08T03:37:59", "upload_time_iso_8601": "2019-11-08T03:37:59.220696Z", "url": "https://files.pythonhosted.org/packages/29/4c/788b3ae6c1c948b727e36cc1466e6cbe9b4932bca1386f10893e83b9dd40/Dijkstar-2.5.0.tar.gz", "yanked": false}], "3.0a1": [{"comment_text": "", "digests": {"md5": "b1b29303542e6e4615993c9d4b994b4b", "sha256": "94c47327bf0c26a3ea1e2482082b525e41b821d95e6808085a543384775efb5a"}, "downloads": -1, "filename": "Dijkstar-3.0a1.tar.gz", "has_sig": false, "md5_digest": "b1b29303542e6e4615993c9d4b994b4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28451, "upload_time": "2019-11-15T04:44:02", "upload_time_iso_8601": "2019-11-15T04:44:02.127561Z", "url": "https://files.pythonhosted.org/packages/98/4d/e1e8016e93168bafc6bce58fa17646d9da846ad87b8f3e0d23026e3c69a1/Dijkstar-3.0a1.tar.gz", "yanked": false}], "3.0a2": [{"comment_text": "", "digests": {"md5": "d11fc72209ca6f3d834fbf3496c40534", "sha256": "f605e54a992c882c6c9eecf61aeadd40f0b110d6f01c1e31ad4bf0e0bf5510cb"}, "downloads": -1, "filename": "Dijkstar-3.0a2.tar.gz", "has_sig": false, "md5_digest": "d11fc72209ca6f3d834fbf3496c40534", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29643, "upload_time": "2019-11-16T18:48:00", "upload_time_iso_8601": "2019-11-16T18:48:00.410240Z", "url": "https://files.pythonhosted.org/packages/1d/1d/8360672262f2d1f5b63c512e208dfbbbd7d62de420ac64038d2ef4715ff8/Dijkstar-3.0a2.tar.gz", "yanked": false}], "3.0a3": [{"comment_text": "", "digests": {"md5": "2db928f9d86e73868fb83e0e59859da6", "sha256": "69d4bca0dcc37d0ee21627eccbf326a3f3a31e33ef41781a26d66303053ddc63"}, "downloads": -1, "filename": "Dijkstar-3.0a3.tar.gz", "has_sig": false, "md5_digest": "2db928f9d86e73868fb83e0e59859da6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29951, "upload_time": "2019-11-17T23:41:02", "upload_time_iso_8601": "2019-11-17T23:41:02.820782Z", "url": "https://files.pythonhosted.org/packages/ea/ba/295333f7801151100e56e1334e96a0b0a74f0b774309aff2ee8cb449f67e/Dijkstar-3.0a3.tar.gz", "yanked": false}], "3.0a4": [{"comment_text": "", "digests": {"md5": "4adf6e654d9f567037b0d0c9dea77b81", "sha256": "b36c9477880d7e20c98bf77c3375e6ad36b7733b35c3374a9737d09f541c22c9"}, "downloads": -1, "filename": "Dijkstar-3.0a4.tar.gz", "has_sig": false, "md5_digest": "4adf6e654d9f567037b0d0c9dea77b81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27912, "upload_time": "2019-12-17T03:50:51", "upload_time_iso_8601": "2019-12-17T03:50:51.682247Z", "url": "https://files.pythonhosted.org/packages/9e/a7/3251b024855725e648e2db24cf955c5177d02130e6bff9dbac55d06cbd9f/Dijkstar-3.0a4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f30be25d6159f0fad3f1d95fddb878fd", "sha256": "bf3f71c80a36b33524905c3b59af06758070d3cede060e42fb273acd8399d0ae"}, "downloads": -1, "filename": "Dijkstar-2.5.0.tar.gz", "has_sig": false, "md5_digest": "f30be25d6159f0fad3f1d95fddb878fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15201, "upload_time": "2019-11-08T03:37:59", "upload_time_iso_8601": "2019-11-08T03:37:59.220696Z", "url": "https://files.pythonhosted.org/packages/29/4c/788b3ae6c1c948b727e36cc1466e6cbe9b4932bca1386f10893e83b9dd40/Dijkstar-2.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:23 2020"}