{"info": {"author": "thefumbduck", "author_email": "51268203+thefumbduck@users.noreply.github.com", "bugtrack_url": null, "classifiers": [], "description": "# betterwinreg\n\nA sane way of working with the Windows registry.\n\n## Getting a RegistryKey instance\n\nTo get a `RegistryKey` instance, simply do:\n\n```python\nfrom betterwinreg.key import RegistryKey\nkey = RegistryKey('HKEY_MY_HKEY/Path/To/Key/You/Want')\n```\n\nYou can also use backslashes:\n\n```python\nkey = RegistryKey('HKEY_MY_KEY\\\\Path\\\\To\\\\Key\\\\You\\\\Want')\n```\n\nOr, if you don't want to escape every backslash, you can use raw strings:\n\n```python\nkey = RegistryKey(r'HKEY_MY_KEY\\Path\\To\\Key\\You\\Want')\n```\n\n## Getting values\n\nYou can get a specific value by using a dict-like syntax:\n\n```python\nmy_value = key['Value']\n```\n\nYou can also iterate though all the values a key has:\n\n```python\nfor name, value in key.values().items():\n    # do some stuff\n```\n\nFor example, you would get the wallpaper path by doing:\n\n```python\nwallpaper_path = RegistryKey(r'HKEY_CURRENT_USER\\Control Panel\\Desktop')['WallPaper']\n```\n\nNote that getting a value returns a special object that represents the registry type. You can use it normally, but doing stuff with it will make it a regular instance of the base type.\n\n```python\n>>> RegistryKey(r'HKEY_CURRENT_USER\\Control Panel\\Desktop')['WallPaper']\nSz('D:\\\\Pictures\\\\wallpaper.png')\n```\n\n## Setting and deleting values\n\nSince registry types are different than Python types, you need to specify what type the registry value will be set to.\n\n```python\nfrom betterwinreg.value import Sz\nRegistryKey(r'HKEY_CURRENT_USER\\Control Panel\\Desktop')['WallPaper'] = Sz(r'D:\\Pictures\\wallpaper.png')\n```\n\nTo delete a value, you can use `del`:\n\n```python\ndel RegistryKey(r'HKEY_CLASSES_ROOT\\Directory\\Shell\\git_shell')['WallPaper']\n```\n\n## Navigating through the registry\n\nThe main ways to move through the registry are using `subkeys()` and `parent`, and concatenating in a Path-like way.\n\n```python\n>>> RegistryKey(r'HKEY_CURRENT_USER\\Control Panel\\Desktop').parent\nRegistryKey('HKEY_CURRENT_USER\\\\Control Panel')\n\n>>> RegistryKey(r'HKEY_CURRENT_USER\\Control Panel\\Desktop').subkeys()\n[RegistryKey('HKEY_CURRENT_USER\\\\Control Panel\\\\Desktop\\\\Colors'), RegistryKey('HKEY_CURRENT_USER\\\\Control Panel\\\\Desktop\\\\WindowMetrics'), RegistryKey('HKEY_CURRENT_USER\\\\Control Panel\\\\Desktop\\\\MuiCached')]\n```\n\nYou can also join `RegistryKey`s in a `Path`-like manner:\n\n```python\n>>> RegistryKey(r'HKEY_CURRENT_USER\\Control Panel') / 'Desktop'\nRegistryKey('HKEY_CURRENT_USER\\\\Control Panel\\\\Desktop')\n```\n\n## Notes\n\nOnly tested on Windows 10 64-bit. **It won't work on 32-bit**, because of some incompatible API calls (e.g. `RegDeleteKeyEx`).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thefumbduck/betterwinreg", "keywords": "winreg windows registry oop", "license": "GNU GPL v3", "maintainer": "", "maintainer_email": "", "name": "betterwinreg", "package_url": "https://pypi.org/project/betterwinreg/", "platform": "", "project_url": "https://pypi.org/project/betterwinreg/", "project_urls": {"Bug tracker": "https://github.com/thefumbduck/betterwinreg/issues", "Documentation": "https://github.com/thefumbduck/betterwinreg", "Homepage": "https://github.com/thefumbduck/betterwinreg", "Source code": "https://github.com/thefumbduck/betterwinreg"}, "release_url": "https://pypi.org/project/betterwinreg/1.0.0/", "requires_dist": null, "requires_python": ">=3.7", "summary": "A sane way of working with the Windows registry", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>betterwinreg</h1>\n<p>A sane way of working with the Windows registry.</p>\n<h2>Getting a RegistryKey instance</h2>\n<p>To get a <code>RegistryKey</code> instance, simply do:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">betterwinreg.key</span> <span class=\"kn\">import</span> <span class=\"n\">RegistryKey</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"s1\">'HKEY_MY_HKEY/Path/To/Key/You/Want'</span><span class=\"p\">)</span>\n</pre>\n<p>You can also use backslashes:</p>\n<pre><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"s1\">'HKEY_MY_KEY</span><span class=\"se\">\\\\</span><span class=\"s1\">Path</span><span class=\"se\">\\\\</span><span class=\"s1\">To</span><span class=\"se\">\\\\</span><span class=\"s1\">Key</span><span class=\"se\">\\\\</span><span class=\"s1\">You</span><span class=\"se\">\\\\</span><span class=\"s1\">Want'</span><span class=\"p\">)</span>\n</pre>\n<p>Or, if you don't want to escape every backslash, you can use raw strings:</p>\n<pre><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'HKEY_MY_KEY\\Path\\To\\Key\\You\\Want'</span><span class=\"p\">)</span>\n</pre>\n<h2>Getting values</h2>\n<p>You can get a specific value by using a dict-like syntax:</p>\n<pre><span class=\"n\">my_value</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"s1\">'Value'</span><span class=\"p\">]</span>\n</pre>\n<p>You can also iterate though all the values a key has:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"c1\"># do some stuff</span>\n</pre>\n<p>For example, you would get the wallpaper path by doing:</p>\n<pre><span class=\"n\">wallpaper_path</span> <span class=\"o\">=</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'HKEY_CURRENT_USER\\Control Panel\\Desktop'</span><span class=\"p\">)[</span><span class=\"s1\">'WallPaper'</span><span class=\"p\">]</span>\n</pre>\n<p>Note that getting a value returns a special object that represents the registry type. You can use it normally, but doing stuff with it will make it a regular instance of the base type.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'HKEY_CURRENT_USER\\Control Panel\\Desktop'</span><span class=\"p\">)[</span><span class=\"s1\">'WallPaper'</span><span class=\"p\">]</span>\n<span class=\"n\">Sz</span><span class=\"p\">(</span><span class=\"s1\">'D:</span><span class=\"se\">\\\\</span><span class=\"s1\">Pictures</span><span class=\"se\">\\\\</span><span class=\"s1\">wallpaper.png'</span><span class=\"p\">)</span>\n</pre>\n<h2>Setting and deleting values</h2>\n<p>Since registry types are different than Python types, you need to specify what type the registry value will be set to.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">betterwinreg.value</span> <span class=\"kn\">import</span> <span class=\"n\">Sz</span>\n<span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'HKEY_CURRENT_USER\\Control Panel\\Desktop'</span><span class=\"p\">)[</span><span class=\"s1\">'WallPaper'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Sz</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'D:\\Pictures\\wallpaper.png'</span><span class=\"p\">)</span>\n</pre>\n<p>To delete a value, you can use <code>del</code>:</p>\n<pre><span class=\"k\">del</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'HKEY_CLASSES_ROOT\\Directory\\Shell\\git_shell'</span><span class=\"p\">)[</span><span class=\"s1\">'WallPaper'</span><span class=\"p\">]</span>\n</pre>\n<h2>Navigating through the registry</h2>\n<p>The main ways to move through the registry are using <code>subkeys()</code> and <code>parent</code>, and concatenating in a Path-like way.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'HKEY_CURRENT_USER\\Control Panel\\Desktop'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n<span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"s1\">'HKEY_CURRENT_USER</span><span class=\"se\">\\\\</span><span class=\"s1\">Control Panel'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'HKEY_CURRENT_USER\\Control Panel\\Desktop'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">subkeys</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"s1\">'HKEY_CURRENT_USER</span><span class=\"se\">\\\\</span><span class=\"s1\">Control Panel</span><span class=\"se\">\\\\</span><span class=\"s1\">Desktop</span><span class=\"se\">\\\\</span><span class=\"s1\">Colors'</span><span class=\"p\">),</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"s1\">'HKEY_CURRENT_USER</span><span class=\"se\">\\\\</span><span class=\"s1\">Control Panel</span><span class=\"se\">\\\\</span><span class=\"s1\">Desktop</span><span class=\"se\">\\\\</span><span class=\"s1\">WindowMetrics'</span><span class=\"p\">),</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"s1\">'HKEY_CURRENT_USER</span><span class=\"se\">\\\\</span><span class=\"s1\">Control Panel</span><span class=\"se\">\\\\</span><span class=\"s1\">Desktop</span><span class=\"se\">\\\\</span><span class=\"s1\">MuiCached'</span><span class=\"p\">)]</span>\n</pre>\n<p>You can also join <code>RegistryKey</code>s in a <code>Path</code>-like manner:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'HKEY_CURRENT_USER\\Control Panel'</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"s1\">'Desktop'</span>\n<span class=\"n\">RegistryKey</span><span class=\"p\">(</span><span class=\"s1\">'HKEY_CURRENT_USER</span><span class=\"se\">\\\\</span><span class=\"s1\">Control Panel</span><span class=\"se\">\\\\</span><span class=\"s1\">Desktop'</span><span class=\"p\">)</span>\n</pre>\n<h2>Notes</h2>\n<p>Only tested on Windows 10 64-bit. <strong>It won't work on 32-bit</strong>, because of some incompatible API calls (e.g. <code>RegDeleteKeyEx</code>).</p>\n\n          </div>"}, "last_serial": 7011932, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "edcce00db51d318c9959591378b409f2", "sha256": "73fdc8b33e4ea80a6d661933fec9ca03973ce04c36040675cbdf6c3716690a5e"}, "downloads": -1, "filename": "betterwinreg-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "edcce00db51d318c9959591378b409f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18200, "upload_time": "2020-04-13T18:38:15", "upload_time_iso_8601": "2020-04-13T18:38:15.865135Z", "url": "https://files.pythonhosted.org/packages/39/34/83078fcde6e19334edd0989404549fb6150fab439504a038c170efb4362d/betterwinreg-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9ebf4308e2da0188f9213ba5658b313", "sha256": "23e32909938687ac757f27d84367b07f13b890de5c1b79a5d8fb2acb40dadc6c"}, "downloads": -1, "filename": "betterwinreg-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d9ebf4308e2da0188f9213ba5658b313", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5143, "upload_time": "2020-04-13T18:38:18", "upload_time_iso_8601": "2020-04-13T18:38:18.287568Z", "url": "https://files.pythonhosted.org/packages/a5/9c/59e37e7a602435dc1df50c6b6538c411a8a6c98dfdd3f2d5d94edfa038d3/betterwinreg-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "edcce00db51d318c9959591378b409f2", "sha256": "73fdc8b33e4ea80a6d661933fec9ca03973ce04c36040675cbdf6c3716690a5e"}, "downloads": -1, "filename": "betterwinreg-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "edcce00db51d318c9959591378b409f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18200, "upload_time": "2020-04-13T18:38:15", "upload_time_iso_8601": "2020-04-13T18:38:15.865135Z", "url": "https://files.pythonhosted.org/packages/39/34/83078fcde6e19334edd0989404549fb6150fab439504a038c170efb4362d/betterwinreg-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9ebf4308e2da0188f9213ba5658b313", "sha256": "23e32909938687ac757f27d84367b07f13b890de5c1b79a5d8fb2acb40dadc6c"}, "downloads": -1, "filename": "betterwinreg-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d9ebf4308e2da0188f9213ba5658b313", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5143, "upload_time": "2020-04-13T18:38:18", "upload_time_iso_8601": "2020-04-13T18:38:18.287568Z", "url": "https://files.pythonhosted.org/packages/a5/9c/59e37e7a602435dc1df50c6b6538c411a8a6c98dfdd3f2d5d94edfa038d3/betterwinreg-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:41 2020"}