{"info": {"author": "Joachim Ungar", "author_email": "joachim.ungar@eox.at", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "# godale\n\nDebauchery tools for concurrent task execution.\n\n[![pipeline status](https://gitlab.eox.at/maps/godale/badges/master/pipeline.svg)](https://gitlab.eox.at/maps/godale/commits/master)\n[![coverage report](https://gitlab.eox.at/maps/godale/badges/master/coverage.svg)](https://gitlab.eox.at/maps/godale/commits/master)\n\nHere you find wrappers around some `concurrent.futures`, `multiprocessing` and `billiard` functions\nto facilitate switching between parallelization implementations:\n\n- `concurrent.futures` multithreading: Python 3 standard tool for multithreading\n- `concurrent.futures` multiprocessing: Python 3 standard tool for multiprocessing\n- `multiprocessing` multiprocessing: Python 3 standard tool for multiprocessing\n- `billiard` multiprocessing: Multiprocessing for `celery` workers.\n\nAll four currently implemented wrappers handle parallel execution of the tasks and yield\nresult (`FinishedTask`) objects having `result()` and `exception()` methods. This enables\ncatching of exceptions without cancelling remaining tasks.\n\n\n## Usage:\n\n\n```python\nfrom godale import Executor\n\n# the first function argument will be replaced by items from the \"items\" argument below\n# subsequent arguments and keyword arguments can be passed on using \"fargs\" and \"fkwargs\"\ndef _worker_function(a, b, some_kwarg=None):\n    return a * b\n\n\n# multiprocessing the Python 3 way\nexecutor = Executor(executor=\"concurrent_processes\")\nfor task in executor.as_completed(\n    func=_worker_function,  # function to be executed\n    iterable=range(100),  # items to be parallelized\n    fargs=(10, ),  # other function arguments\n    fkwargs={\"a_kwarg\"=True}  # function keyword arguments\n):\n    try:\n        print(task.result())\n    except ValueError:\n        print(\"task failed\")\n\n\n# multithreading the Python 3 way\nexecutor = Executor(executor=\"concurrent_threads\")\nfor task in executor.as_completed(\n    func=_worker_function,\n    iterable=range(100),\n    fargs=(10, )\n):\n    try:\n        print(task.result())\n    except ValueError:\n        print(\"task failed\")\n\n\n# multiprocessing within a celery worker\nexecutor = Executor(executor=\"billiard\")\nfor task in executor.as_completed(\n    func=_worker_function,\n    iterable=range(100),\n    fargs=(10, )\n):\n    try:\n        print(task.result())\n    except ValueError:\n        print(\"task failed\")\n\n\n# using the multiprocessing standard module\nexecutor = Executor(executor=\"multiprocessing\")\nfor task in executor.as_completed(\n    func=_worker_function,\n    iterable=range(100),\n    fargs=(10, )\n):\n    try:\n        print(task.result())\n    except ValueError:\n        print(\"task failed\")\n\n\n# use different start_method than \"fork\"\n# NOTE: with concurrent.futures and Python 3.6 and earlier, \"start_method\" other than\n# \"fork\" will raise an RuntimeError\nfor task in executor.as_completed(\n    func=_worker_function,\n    iterable=range(100),\n    fargs=(10, ),\n    start_method=\"spawn\"\n):\n    try:\n        print(task.result())\n    except ValueError:\n        print(\"task failed\")\n\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "godale", "package_url": "https://pypi.org/project/godale/", "platform": "", "project_url": "https://pypi.org/project/godale/", "project_urls": null, "release_url": "https://pypi.org/project/godale/0.2/", "requires_dist": ["billiard"], "requires_python": "", "summary": "concurrent execution in various flavors", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>godale</h1>\n<p>Debauchery tools for concurrent task execution.</p>\n<p><a href=\"https://gitlab.eox.at/maps/godale/commits/master\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/343ec16eecd0bcfeac44706d3c40761e3db536b0/68747470733a2f2f6769746c61622e656f782e61742f6d6170732f676f64616c652f6261646765732f6d61737465722f706970656c696e652e737667\"></a>\n<a href=\"https://gitlab.eox.at/maps/godale/commits/master\" rel=\"nofollow\"><img alt=\"coverage report\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb0191b1a81d0c9c8257cde777a2afad52f77d25/68747470733a2f2f6769746c61622e656f782e61742f6d6170732f676f64616c652f6261646765732f6d61737465722f636f7665726167652e737667\"></a></p>\n<p>Here you find wrappers around some <code>concurrent.futures</code>, <code>multiprocessing</code> and <code>billiard</code> functions\nto facilitate switching between parallelization implementations:</p>\n<ul>\n<li><code>concurrent.futures</code> multithreading: Python 3 standard tool for multithreading</li>\n<li><code>concurrent.futures</code> multiprocessing: Python 3 standard tool for multiprocessing</li>\n<li><code>multiprocessing</code> multiprocessing: Python 3 standard tool for multiprocessing</li>\n<li><code>billiard</code> multiprocessing: Multiprocessing for <code>celery</code> workers.</li>\n</ul>\n<p>All four currently implemented wrappers handle parallel execution of the tasks and yield\nresult (<code>FinishedTask</code>) objects having <code>result()</code> and <code>exception()</code> methods. This enables\ncatching of exceptions without cancelling remaining tasks.</p>\n<h2>Usage:</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">godale</span> <span class=\"kn\">import</span> <span class=\"n\">Executor</span>\n\n<span class=\"c1\"># the first function argument will be replaced by items from the \"items\" argument below</span>\n<span class=\"c1\"># subsequent arguments and keyword arguments can be passed on using \"fargs\" and \"fkwargs\"</span>\n<span class=\"k\">def</span> <span class=\"nf\">_worker_function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">some_kwarg</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span>\n\n\n<span class=\"c1\"># multiprocessing the Python 3 way</span>\n<span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">Executor</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"s2\">\"concurrent_processes\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">as_completed</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">_worker_function</span><span class=\"p\">,</span>  <span class=\"c1\"># function to be executed</span>\n    <span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span>  <span class=\"c1\"># items to be parallelized</span>\n    <span class=\"n\">fargs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">),</span>  <span class=\"c1\"># other function arguments</span>\n    <span class=\"n\">fkwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"a_kwarg\"</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">}</span>  <span class=\"c1\"># function keyword arguments</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"task failed\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># multithreading the Python 3 way</span>\n<span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">Executor</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"s2\">\"concurrent_threads\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">as_completed</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">_worker_function</span><span class=\"p\">,</span>\n    <span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"n\">fargs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"task failed\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># multiprocessing within a celery worker</span>\n<span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">Executor</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"s2\">\"billiard\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">as_completed</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">_worker_function</span><span class=\"p\">,</span>\n    <span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"n\">fargs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"task failed\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># using the multiprocessing standard module</span>\n<span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">Executor</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"s2\">\"multiprocessing\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">as_completed</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">_worker_function</span><span class=\"p\">,</span>\n    <span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"n\">fargs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"task failed\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># use different start_method than \"fork\"</span>\n<span class=\"c1\"># NOTE: with concurrent.futures and Python 3.6 and earlier, \"start_method\" other than</span>\n<span class=\"c1\"># \"fork\" will raise an RuntimeError</span>\n<span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">as_completed</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">_worker_function</span><span class=\"p\">,</span>\n    <span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"n\">fargs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n    <span class=\"n\">start_method</span><span class=\"o\">=</span><span class=\"s2\">\"spawn\"</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"task failed\"</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6536895, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "972a42c91964cb181cb0959a78c0c5fd", "sha256": "3594ee90af5c13382089104deaeed61ae6774f7f8c355c247bc89d628255f013"}, "downloads": -1, "filename": "godale-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "972a42c91964cb181cb0959a78c0c5fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6291, "upload_time": "2020-01-29T09:15:40", "upload_time_iso_8601": "2020-01-29T09:15:40.931106Z", "url": "https://files.pythonhosted.org/packages/41/f1/f4c8e1ba12bffe0896ce7dd387413fdab670dab65b3b09eb90a94f96ab6c/godale-0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "972a42c91964cb181cb0959a78c0c5fd", "sha256": "3594ee90af5c13382089104deaeed61ae6774f7f8c355c247bc89d628255f013"}, "downloads": -1, "filename": "godale-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "972a42c91964cb181cb0959a78c0c5fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6291, "upload_time": "2020-01-29T09:15:40", "upload_time_iso_8601": "2020-01-29T09:15:40.931106Z", "url": "https://files.pythonhosted.org/packages/41/f1/f4c8e1ba12bffe0896ce7dd387413fdab670dab65b3b09eb90a94f96ab6c/godale-0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:56:00 2020"}