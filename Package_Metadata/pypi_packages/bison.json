{"info": {"author": "Erick Daniszewski", "author_email": "edaniszewski@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "<p align=\"center\">\n    <a href=\"https://travis-ci.org/edaniszewski/bison\"><img src=\"https://travis-ci.org/edaniszewski/bison.svg?branch=master\" /></a>\n    <a href='https://coveralls.io/github/edaniszewski/bison'><img src='https://coveralls.io/repos/github/edaniszewski/bison/badge.svg' /></a>\n    <a href=\"https://pypi.python.org/pypi/bison\"><img src=\"https://img.shields.io/pypi/v/bison.svg\"></a>\n    <a href=\"LICENSE\"><img src=\"https://img.shields.io/github/license/edaniszewski/bison.svg\"></a>\n\n<h1 align=\"center\">bison</h1>\n</p>\n\n<p align=\"center\">Python application configuration</p>\n\n\n## What is Bison?\nBison is a configuration solution for Python applications that aims to be simple\nand intuitive. It supports:\n* reading from YAML config files\n* reading from environment variables\n* setting explicit values\n* setting defaults\n* configuration validation\n* configuration access/manipulation with dot notation\n\nInstead of implementing custom configuration reading and parsing, you can use\nBison to handle it for you.\n\nBison was inspired by [Viper][viper] and the lack of good\napplication configuration solutions for Python (at least, in my opinion). Documentation\nfor Bison can be found on [ReadtheDocs][docs]\n\nBison uses the following precedence order. Each item in the list takes precedence\nover the item below it.\n- override (e.g. calling `Bison.set()`)\n- environment\n- config file\n- defaults\n\n## Installation\nBison can be installed with `pip`\n```\npip install bison\n```\nor with `pipenv`\n```\npipenv install bison\n```\n\n## Using Bison\n### Creating a configuration Scheme\nA configuration scheme is not required by Bison, but having one allows you to set default\nvalues for configuration fields as well as do configuration validation. It is pretty easy\nto create a new Scheme:\n\n```python\nscheme = bison.Scheme()\n```\n\nA Scheme is really just a container for configuration options, so without any options, a\nScheme is somewhat useless.\n\n#### Configuration Options\nThere are currently three types of configuration options:\n- `bison.Option`\n- `bison.DictOption`\n- `bison.ListOption`\n\nTheir intended functionality should be mostly obvious from their names. An `Option` represents\na singular value in a configuration. A `DictOption` represents a dictionary or mapping of values\nin a configuration. A `ListOption` represents a list of values in a configuration.\n\nSee the [documentation][docs] for more on how options can be configured.\n\nAny number of options can be added to a Scheme, but as a simple example we can define a Scheme\nwhich expects a key \"log\", and a key \"count\".\n\n```python\nscheme = bison.Scheme(\n    bison.Option('log'),\n    bison.Option('count'),\n)\n```\n\n#### Configuration Validation\nValidation operates based on the constraints set on the options. Above, there are no\nconstraints (other than the need for those keys to exist), so any value for \"log\" and\n\"count\" will pass validation.\n\nAn option can be constrained in different ways by using its keyword arguments. For example,\nto ensure the value for \"count\" is an integer,\n```python\nbison.Option('count', field_type=int)\n```\n\nOr, to restrict the values to a set of choices\n```python\nbison.Option('log', choices=['debug', 'info', 'warn', 'error'])\n```\n\nThe [documentation][docs] goes into more detail about other validation settings.\n\n#### Setting Defaults\nIf a default value is not set on an option, it is considered required. In these cases,\nif the key specified by that value is not present in the parse configuration, it will\ncause a validation failure.\n\nIf a default value is set, then the absence of that field in the configuration will not\ncause a validation failure.\n\n```python\nbison.Option('log', default='info')\n```\n\n### Configuring Bison\nOnce you have a Scheme to use (if you'd like to), it will need to be passed to a Bison\nobject to manage the config building. \n\n```python\nscheme = bison.Scheme()\nconfig = bison.Bison(scheme)\n```\n\nThere are a few options that can be set on the Bison object to change how it\nsearches for and builds the unified configuration. \n\nFor reading configuration files\n```python\nconfig.config_name = 'config'  # name of the config file (no extension)\nconfig.add_config_paths(       # paths to look in for the config file\n    '.',\n    '/tmp/app'\n)\nconfig.config_format = bison.YAML # the config format to use\n```\n\nFor reading environment variables\n```python\nconfig.env_prefix = \"MY_APP\"  # the prefix to use for environment variables\nconfig.auto_env = True  #  automatically bind all options to env variables based on their key\n```\n\n### Building the unified config\nOnce the scheme has been set (if using) and Bison has been configured, the only thing\nleft to do is to read in all the config sources and parse them into a unified config.\nThis is done simply with\n```python\nconfig.parse()\n```\n\n### Example\nBelow is a complete example for parsing a hypothetical application configuration which\nis described by the following YAML config.\n```yaml\nlog: debug\nport: 5000\nsettings:\n  requests:\n    timeout: 3\nbackends:\n  - host: 10.1.2.3\n    port: 5001\n  - host: 10.1.2.4\n    port: 5013\n  - host: 10.1.2.5\n    port: 5044\n```\n\n```python\nimport bison\n\n# the scheme for the configuration. this allows us to set defaults\n# and validate configuration data\nconfig_scheme = bison.Scheme(\n    bison.Option('log', default='info', choices=['debug', 'info', 'warn', 'error']),\n    bison.Option('port', field_type=int),\n    bison.DictOption('settings', scheme=bison.Scheme(\n        bison.DictOption('requests', scheme=bison.Scheme(\n            bison.Option('timeout', field_type=int)\n        ))\n    )),\n    bison.ListOption('backends', member_scheme=bison.Scheme(\n        bison.Option('host', field_type=str),\n        bison.Option('port', field_type=int)\n    ))\n)\n\n# create a new Bison instance to store and manage configuration data\nconfig = bison.Bison(scheme=config_scheme)\n\n# set the config file name to 'app' (default is 'config') and set the\n# search paths to '.' and '/tmp/app/config'\nconfig.config_name = 'app'\nconfig.add_config_paths('.', '/tmp/app/config')\n\n# set the environment variable prefix and enable auto-env\nconfig.env_prefix = 'MY_APP'\nconfig.auto_env = True\n\n# finally, parse the config sources to build the unified configuration\nconfig.parse()\n```\n\nSee the [example](example) directory for this example along with demonstrations\nof how to access configuration data.\n\n## Future Work\nThere is more that can be done to improve Bison and expand its functionality. If\nyou wish to contribute, open a pull request. If you have questions or feature requests,\nopen an issue. Below are some high level ideas for future improvements:\n\n* Support additional configuration formats (JSON, TOML, ...)\n* Versioned configurations\n\n\n[docs]: http://readthedocs\n[viper]: https://github.com/spf13/viper\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/edaniszewski/bison", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bison", "package_url": "https://pypi.org/project/bison/", "platform": "", "project_url": "https://pypi.org/project/bison/", "project_urls": {"Homepage": "https://github.com/edaniszewski/bison"}, "release_url": "https://pypi.org/project/bison/0.1.2/", "requires_dist": ["pyyaml (>=4.2b1)"], "requires_python": ">=3.4", "summary": "Python application configuration", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n    <a href=\"https://travis-ci.org/edaniszewski/bison\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84cbedb2b8c067000da357a4715103b2e0814db8/68747470733a2f2f7472617669732d63692e6f72672f6564616e69737a6577736b692f6269736f6e2e7376673f6272616e63683d6d6173746572\"></a>\n    <a href=\"https://coveralls.io/github/edaniszewski/bison\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6d7769d6da9941ea27f3e605c4e1218093405c7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6564616e69737a6577736b692f6269736f6e2f62616467652e737667\"></a>\n    <a href=\"https://pypi.python.org/pypi/bison\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a0dc9cc4f662cee126e0060baff08b7707b5e7b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6269736f6e2e737667\"></a>\n    <a href=\"LICENSE\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2438fd025473fb5a88aaea4dbc43c16833d4e484/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6564616e69737a6577736b692f6269736f6e2e737667\"></a>\n</p><h1>bison</h1>\n<p></p>\n<p align=\"center\">Python application configuration</p>\n<h2>What is Bison?</h2>\n<p>Bison is a configuration solution for Python applications that aims to be simple\nand intuitive. It supports:</p>\n<ul>\n<li>reading from YAML config files</li>\n<li>reading from environment variables</li>\n<li>setting explicit values</li>\n<li>setting defaults</li>\n<li>configuration validation</li>\n<li>configuration access/manipulation with dot notation</li>\n</ul>\n<p>Instead of implementing custom configuration reading and parsing, you can use\nBison to handle it for you.</p>\n<p>Bison was inspired by <a href=\"https://github.com/spf13/viper\" rel=\"nofollow\">Viper</a> and the lack of good\napplication configuration solutions for Python (at least, in my opinion). Documentation\nfor Bison can be found on <a href=\"http://readthedocs\" rel=\"nofollow\">ReadtheDocs</a></p>\n<p>Bison uses the following precedence order. Each item in the list takes precedence\nover the item below it.</p>\n<ul>\n<li>override (e.g. calling <code>Bison.set()</code>)</li>\n<li>environment</li>\n<li>config file</li>\n<li>defaults</li>\n</ul>\n<h2>Installation</h2>\n<p>Bison can be installed with <code>pip</code></p>\n<pre><code>pip install bison\n</code></pre>\n<p>or with <code>pipenv</code></p>\n<pre><code>pipenv install bison\n</code></pre>\n<h2>Using Bison</h2>\n<h3>Creating a configuration Scheme</h3>\n<p>A configuration scheme is not required by Bison, but having one allows you to set default\nvalues for configuration fields as well as do configuration validation. It is pretty easy\nto create a new Scheme:</p>\n<pre><span class=\"n\">scheme</span> <span class=\"o\">=</span> <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Scheme</span><span class=\"p\">()</span>\n</pre>\n<p>A Scheme is really just a container for configuration options, so without any options, a\nScheme is somewhat useless.</p>\n<h4>Configuration Options</h4>\n<p>There are currently three types of configuration options:</p>\n<ul>\n<li><code>bison.Option</code></li>\n<li><code>bison.DictOption</code></li>\n<li><code>bison.ListOption</code></li>\n</ul>\n<p>Their intended functionality should be mostly obvious from their names. An <code>Option</code> represents\na singular value in a configuration. A <code>DictOption</code> represents a dictionary or mapping of values\nin a configuration. A <code>ListOption</code> represents a list of values in a configuration.</p>\n<p>See the <a href=\"http://readthedocs\" rel=\"nofollow\">documentation</a> for more on how options can be configured.</p>\n<p>Any number of options can be added to a Scheme, but as a simple example we can define a Scheme\nwhich expects a key \"log\", and a key \"count\".</p>\n<pre><span class=\"n\">scheme</span> <span class=\"o\">=</span> <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Scheme</span><span class=\"p\">(</span>\n    <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"s1\">'log'</span><span class=\"p\">),</span>\n    <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Configuration Validation</h4>\n<p>Validation operates based on the constraints set on the options. Above, there are no\nconstraints (other than the need for those keys to exist), so any value for \"log\" and\n\"count\" will pass validation.</p>\n<p>An option can be constrained in different ways by using its keyword arguments. For example,\nto ensure the value for \"count\" is an integer,</p>\n<pre><span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"n\">field_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n</pre>\n<p>Or, to restrict the values to a set of choices</p>\n<pre><span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"s1\">'log'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'debug'</span><span class=\"p\">,</span> <span class=\"s1\">'info'</span><span class=\"p\">,</span> <span class=\"s1\">'warn'</span><span class=\"p\">,</span> <span class=\"s1\">'error'</span><span class=\"p\">])</span>\n</pre>\n<p>The <a href=\"http://readthedocs\" rel=\"nofollow\">documentation</a> goes into more detail about other validation settings.</p>\n<h4>Setting Defaults</h4>\n<p>If a default value is not set on an option, it is considered required. In these cases,\nif the key specified by that value is not present in the parse configuration, it will\ncause a validation failure.</p>\n<p>If a default value is set, then the absence of that field in the configuration will not\ncause a validation failure.</p>\n<pre><span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"s1\">'log'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'info'</span><span class=\"p\">)</span>\n</pre>\n<h3>Configuring Bison</h3>\n<p>Once you have a Scheme to use (if you'd like to), it will need to be passed to a Bison\nobject to manage the config building.</p>\n<pre><span class=\"n\">scheme</span> <span class=\"o\">=</span> <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Scheme</span><span class=\"p\">()</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Bison</span><span class=\"p\">(</span><span class=\"n\">scheme</span><span class=\"p\">)</span>\n</pre>\n<p>There are a few options that can be set on the Bison object to change how it\nsearches for and builds the unified configuration.</p>\n<p>For reading configuration files</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">config_name</span> <span class=\"o\">=</span> <span class=\"s1\">'config'</span>  <span class=\"c1\"># name of the config file (no extension)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">add_config_paths</span><span class=\"p\">(</span>       <span class=\"c1\"># paths to look in for the config file</span>\n    <span class=\"s1\">'.'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'/tmp/app'</span>\n<span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">config_format</span> <span class=\"o\">=</span> <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">YAML</span> <span class=\"c1\"># the config format to use</span>\n</pre>\n<p>For reading environment variables</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">env_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"MY_APP\"</span>  <span class=\"c1\"># the prefix to use for environment variables</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">auto_env</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\">#  automatically bind all options to env variables based on their key</span>\n</pre>\n<h3>Building the unified config</h3>\n<p>Once the scheme has been set (if using) and Bison has been configured, the only thing\nleft to do is to read in all the config sources and parse them into a unified config.\nThis is done simply with</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n</pre>\n<h3>Example</h3>\n<p>Below is a complete example for parsing a hypothetical application configuration which\nis described by the following YAML config.</p>\n<pre><span class=\"nt\">log</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">debug</span>\n<span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5000</span>\n<span class=\"nt\">settings</span><span class=\"p\">:</span>\n  <span class=\"nt\">requests</span><span class=\"p\">:</span>\n    <span class=\"nt\">timeout</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">3</span>\n<span class=\"nt\">backends</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">10.1.2.3</span>\n    <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5001</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">10.1.2.4</span>\n    <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5013</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">10.1.2.5</span>\n    <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5044</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bison</span>\n\n<span class=\"c1\"># the scheme for the configuration. this allows us to set defaults</span>\n<span class=\"c1\"># and validate configuration data</span>\n<span class=\"n\">config_scheme</span> <span class=\"o\">=</span> <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Scheme</span><span class=\"p\">(</span>\n    <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"s1\">'log'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'info'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'debug'</span><span class=\"p\">,</span> <span class=\"s1\">'info'</span><span class=\"p\">,</span> <span class=\"s1\">'warn'</span><span class=\"p\">,</span> <span class=\"s1\">'error'</span><span class=\"p\">]),</span>\n    <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"n\">field_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">),</span>\n    <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">DictOption</span><span class=\"p\">(</span><span class=\"s1\">'settings'</span><span class=\"p\">,</span> <span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Scheme</span><span class=\"p\">(</span>\n        <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">DictOption</span><span class=\"p\">(</span><span class=\"s1\">'requests'</span><span class=\"p\">,</span> <span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Scheme</span><span class=\"p\">(</span>\n            <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"s1\">'timeout'</span><span class=\"p\">,</span> <span class=\"n\">field_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n        <span class=\"p\">))</span>\n    <span class=\"p\">)),</span>\n    <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">ListOption</span><span class=\"p\">(</span><span class=\"s1\">'backends'</span><span class=\"p\">,</span> <span class=\"n\">member_scheme</span><span class=\"o\">=</span><span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Scheme</span><span class=\"p\">(</span>\n        <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"s1\">'host'</span><span class=\"p\">,</span> <span class=\"n\">field_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">),</span>\n        <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"n\">field_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"p\">))</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># create a new Bison instance to store and manage configuration data</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">bison</span><span class=\"o\">.</span><span class=\"n\">Bison</span><span class=\"p\">(</span><span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"n\">config_scheme</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the config file name to 'app' (default is 'config') and set the</span>\n<span class=\"c1\"># search paths to '.' and '/tmp/app/config'</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">config_name</span> <span class=\"o\">=</span> <span class=\"s1\">'app'</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">add_config_paths</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'/tmp/app/config'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the environment variable prefix and enable auto-env</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">env_prefix</span> <span class=\"o\">=</span> <span class=\"s1\">'MY_APP'</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">auto_env</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># finally, parse the config sources to build the unified configuration</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n</pre>\n<p>See the <a href=\"example\" rel=\"nofollow\">example</a> directory for this example along with demonstrations\nof how to access configuration data.</p>\n<h2>Future Work</h2>\n<p>There is more that can be done to improve Bison and expand its functionality. If\nyou wish to contribute, open a pull request. If you have questions or feature requests,\nopen an issue. Below are some high level ideas for future improvements:</p>\n<ul>\n<li>Support additional configuration formats (JSON, TOML, ...)</li>\n<li>Versioned configurations</li>\n</ul>\n\n          </div>"}, "last_serial": 5913802, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7c77e696bd15019fae2a6438f77919f6", "sha256": "59bccffa9ece93f4d4d0cb2ab510beaab74ae7c2b786c6fcea474cc94807a74b"}, "downloads": -1, "filename": "bison-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7c77e696bd15019fae2a6438f77919f6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 23911, "upload_time": "2018-03-08T05:57:54", "upload_time_iso_8601": "2018-03-08T05:57:54.087299Z", "url": "https://files.pythonhosted.org/packages/d0/59/1665577e705feaa2f0135e0de779cbb0f75b546ca8ddbfbc4960431dc0a0/bison-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce4bc1e3c06889101566dcf3620d27a0", "sha256": "23cc83070c8d003c2e70b91365da7cc8c5ecaa9c97eeb01f7edfc349952ae717"}, "downloads": -1, "filename": "bison-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ce4bc1e3c06889101566dcf3620d27a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 17123, "upload_time": "2018-03-08T05:57:56", "upload_time_iso_8601": "2018-03-08T05:57:56.168603Z", "url": "https://files.pythonhosted.org/packages/4c/2b/be4601218f6c5e968da2580c0ece23fead89781ccaec938017e11699e19b/bison-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bb15f5a9932b990d6dc4e142bd82b7a6", "sha256": "8633e4ac289512d61f2d73a986c4f5a94a2535e1f53213348da0222b58c91b8e"}, "downloads": -1, "filename": "bison-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bb15f5a9932b990d6dc4e142bd82b7a6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 25166, "upload_time": "2018-03-08T17:40:25", "upload_time_iso_8601": "2018-03-08T17:40:25.925673Z", "url": "https://files.pythonhosted.org/packages/3f/c2/c46b550c022c09e7d15b4d37a2df0c0447b57cf8fcddc65e9819e4bfe14e/bison-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "522ed7ff0a90bac9522ae53f5f757d9d", "sha256": "3356096b71327fb8038eafa89d031788062a40a0e922d6d83f8b280031ddbdc1"}, "downloads": -1, "filename": "bison-0.0.2.tar.gz", "has_sig": false, "md5_digest": "522ed7ff0a90bac9522ae53f5f757d9d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 18252, "upload_time": "2018-03-08T17:40:27", "upload_time_iso_8601": "2018-03-08T17:40:27.409964Z", "url": "https://files.pythonhosted.org/packages/f7/9a/4b37eb7296a40467cc07ce75883c2e492fc510f38d9ac8345003dee04216/bison-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "3bc0b374cda44cb0bdde57c434800975", "sha256": "c08efc64a57407c1d1531f2821f87487a062c9202d23ecf6a4fa92fc58e8b848"}, "downloads": -1, "filename": "bison-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3bc0b374cda44cb0bdde57c434800975", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 25545, "upload_time": "2018-03-08T22:02:50", "upload_time_iso_8601": "2018-03-08T22:02:50.792770Z", "url": "https://files.pythonhosted.org/packages/ff/57/87ca4488fb5f3babeb90db6404b1f0c372c08c720bf0d6b401af964fd90f/bison-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b2ef54428443494129de736a5540d4c", "sha256": "56082387e8d7a50c9d935df0c05aa227d0522d6f41b9095b5811c3a73cab2846"}, "downloads": -1, "filename": "bison-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9b2ef54428443494129de736a5540d4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 18575, "upload_time": "2018-03-08T22:02:52", "upload_time_iso_8601": "2018-03-08T22:02:52.519952Z", "url": "https://files.pythonhosted.org/packages/7d/95/dbe84d3e9740ae547d93546fabc682063d36956840c762fe8ec8ae605074/bison-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "00a310984bcf1dec530355998f9e40a9", "sha256": "0133620cbf406fc2f3ad7760789790aeb419e92a2d4e911ffd38c17bc3faa9a5"}, "downloads": -1, "filename": "bison-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "00a310984bcf1dec530355998f9e40a9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 25690, "upload_time": "2018-03-09T15:05:01", "upload_time_iso_8601": "2018-03-09T15:05:01.257700Z", "url": "https://files.pythonhosted.org/packages/76/dc/e2dca597ca2023c8c1a8fc489b5380e5966e90a74b8a1337cb8ce7c08fa3/bison-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "583cae63f8c79c76425e02d62801c5a6", "sha256": "d388968a09c2d623441237f41db8988b7bc3447ce8f3ff15c1ac248ffc629f8d"}, "downloads": -1, "filename": "bison-0.0.4.tar.gz", "has_sig": false, "md5_digest": "583cae63f8c79c76425e02d62801c5a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 18711, "upload_time": "2018-03-09T15:05:02", "upload_time_iso_8601": "2018-03-09T15:05:02.631412Z", "url": "https://files.pythonhosted.org/packages/80/28/8b964f2a11569b75f2c108eb50d3bf142c67eeb4e2d2e0b0d697331f24c3/bison-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "51f5b3fb4535b4d46b8a0e0b661e41bf", "sha256": "38a2b8ce685601239d80d3e46366654eb1c761c9d0f5003b60ec52654a82201e"}, "downloads": -1, "filename": "bison-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51f5b3fb4535b4d46b8a0e0b661e41bf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 26852, "upload_time": "2018-03-16T13:15:15", "upload_time_iso_8601": "2018-03-16T13:15:15.853846Z", "url": "https://files.pythonhosted.org/packages/d4/22/eb1c27e9dddfd66653773424fa1b65c50076492efde8eab4fe3d6a27eb9e/bison-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b9a334097e2d1e3da208013dcfa0e7d", "sha256": "21990e3bdfb4d9ec779b9362a4a7b7ada24d93e70f5c0bdfb9c5ec092fda8a5f"}, "downloads": -1, "filename": "bison-0.0.5.tar.gz", "has_sig": false, "md5_digest": "4b9a334097e2d1e3da208013dcfa0e7d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 19822, "upload_time": "2018-03-16T13:15:17", "upload_time_iso_8601": "2018-03-16T13:15:17.862441Z", "url": "https://files.pythonhosted.org/packages/cf/55/e2677c8f8c73ced5241414596f39acf606a526b71c88e5c4a754f4ec28f8/bison-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "9621dd13cbcebc5c8a455db220cda549", "sha256": "248e91451117b5519721c52fb27f5f9be3a4ada82bfcf3329ee026d2ae9615cf"}, "downloads": -1, "filename": "bison-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9621dd13cbcebc5c8a455db220cda549", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 27474, "upload_time": "2018-09-01T20:05:25", "upload_time_iso_8601": "2018-09-01T20:05:25.313617Z", "url": "https://files.pythonhosted.org/packages/23/76/f20ec2b5c4dfb9a8fc8ef80e4df25e7bdc808861a0f95222c3540150d497/bison-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "859e989141b5ee6edde0996acfc85782", "sha256": "be0c1eaa92f02969534088b59d0645a071e66d7c34fcfc956e9e50e91ad6cf0e"}, "downloads": -1, "filename": "bison-0.0.6.tar.gz", "has_sig": false, "md5_digest": "859e989141b5ee6edde0996acfc85782", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 23303, "upload_time": "2018-09-01T20:05:26", "upload_time_iso_8601": "2018-09-01T20:05:26.535451Z", "url": "https://files.pythonhosted.org/packages/90/55/ecc94c0fd082117e4fa5b35e39d1efa7579a087d589493d27fb2ca17a6a9/bison-0.0.6.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "5c5e20a58251879114d6a5e2b0ffa12c", "sha256": "79fa44a2b3ea68b9b9dd62baec646191324cb227c41980eb96a0c52d47188ccc"}, "downloads": -1, "filename": "bison-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5c5e20a58251879114d6a5e2b0ffa12c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 27574, "upload_time": "2018-10-26T14:27:09", "upload_time_iso_8601": "2018-10-26T14:27:09.062800Z", "url": "https://files.pythonhosted.org/packages/28/ff/c55f567dc3c852a8d051ff77e3eacb550afe1089389920b8bcf816f28bfb/bison-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9bec8d85942dcb9a28f493052d875a7c", "sha256": "5e7b54f9164daf3409c7b047ae6fe8cb47a39a47a70cab93054c7e2bffc25ff3"}, "downloads": -1, "filename": "bison-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9bec8d85942dcb9a28f493052d875a7c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 23448, "upload_time": "2018-10-26T14:27:10", "upload_time_iso_8601": "2018-10-26T14:27:10.601219Z", "url": "https://files.pythonhosted.org/packages/28/04/1e83ca95c5f50f90f050a368d9a7ac578e7331c7a2e975c89f7c1b255985/bison-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9ca8d05de45ad6c6f503419fa88c7be2", "sha256": "b1786da1714ceec08baf95fea0c5cfa2292d04c0c51674d2347a8652de10ef61"}, "downloads": -1, "filename": "bison-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9ca8d05de45ad6c6f503419fa88c7be2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 24382, "upload_time": "2019-08-15T18:49:07", "upload_time_iso_8601": "2019-08-15T18:49:07.011152Z", "url": "https://files.pythonhosted.org/packages/5a/2e/89ab234959dd45ef5f868cca61933c9e0ffc84f4a1fe083a48e97d0105b0/bison-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b8694a178a997a09923a4ec6d7e8fe9", "sha256": "13105bb75fa30b35f7ade15a76c5654f0769bc0b4162ff014764ac42c50d1715"}, "downloads": -1, "filename": "bison-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9b8694a178a997a09923a4ec6d7e8fe9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 24413, "upload_time": "2019-08-15T18:49:08", "upload_time_iso_8601": "2019-08-15T18:49:08.617188Z", "url": "https://files.pythonhosted.org/packages/4a/f1/bbba71c9e6ea6ebf97cf44e4cb7e2f409c34d00aa477a345c9c49fa9e892/bison-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "001f39a56d178ba06ed1346e01eebec5", "sha256": "394aa780aa7bc0e6ea5d719aa97e1be8f1633b1a8a7f6c1cd0ae15a45e4336da"}, "downloads": -1, "filename": "bison-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "001f39a56d178ba06ed1346e01eebec5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 24502, "upload_time": "2019-10-01T17:12:39", "upload_time_iso_8601": "2019-10-01T17:12:39.040705Z", "url": "https://files.pythonhosted.org/packages/e7/60/8aa4308a82fd5fecb0728bfbbe4006a7e7498210c3e3fc4a048f8bdd6c9c/bison-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9364917f1b9fe4045f3213a82acca2b0", "sha256": "9b93a38a4acb1d3b04b1472c4cbdfd0e6317db9f77a3393cfbaf1b641ef90666"}, "downloads": -1, "filename": "bison-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9364917f1b9fe4045f3213a82acca2b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 24548, "upload_time": "2019-10-01T17:12:40", "upload_time_iso_8601": "2019-10-01T17:12:40.555406Z", "url": "https://files.pythonhosted.org/packages/2d/e0/6eb6a24e4400536db9958310b81e6448b7055766e59ec2273db4a4d6b322/bison-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "001f39a56d178ba06ed1346e01eebec5", "sha256": "394aa780aa7bc0e6ea5d719aa97e1be8f1633b1a8a7f6c1cd0ae15a45e4336da"}, "downloads": -1, "filename": "bison-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "001f39a56d178ba06ed1346e01eebec5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 24502, "upload_time": "2019-10-01T17:12:39", "upload_time_iso_8601": "2019-10-01T17:12:39.040705Z", "url": "https://files.pythonhosted.org/packages/e7/60/8aa4308a82fd5fecb0728bfbbe4006a7e7498210c3e3fc4a048f8bdd6c9c/bison-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9364917f1b9fe4045f3213a82acca2b0", "sha256": "9b93a38a4acb1d3b04b1472c4cbdfd0e6317db9f77a3393cfbaf1b641ef90666"}, "downloads": -1, "filename": "bison-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9364917f1b9fe4045f3213a82acca2b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 24548, "upload_time": "2019-10-01T17:12:40", "upload_time_iso_8601": "2019-10-01T17:12:40.555406Z", "url": "https://files.pythonhosted.org/packages/2d/e0/6eb6a24e4400536db9958310b81e6448b7055766e59ec2273db4a4d6b322/bison-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:20 2020"}