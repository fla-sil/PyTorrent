{"info": {"author": "Stephen Goodman", "author_email": "stephen.goodman@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "=============================\nbitfield_manager\n=============================\n\n.. image:: https://badge.fury.io/py/django-bitfield-manager.svg\n    :target: https://badge.fury.io/py/django-bitfield-manager\n\n.. image:: https://travis-ci.org/goodmase/django-bitfield-manager.svg?branch=master\n    :target: https://travis-ci.org/goodmase/django-bitfield-manager\n\n.. image:: https://codecov.io/gh/goodmase/django-bitfield-manager/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/goodmase/django-bitfield-manager\n\n.. image:: https://readthedocs.org/projects/django-bitfield-manager/badge/?version=latest\n    :target: http://django-bitfield-manager.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nAutomatic bitfield management for Django Models.\n\n\nQuickstart\n----------\n\nInstall bitfield_manager::\n\n    pip install django-bitfield-manager\n\nAdd it to your `INSTALLED_APPS`:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'bitfield_manager',\n        ...\n    )\n\n\nUsage\n--------\nFirst you'll need a parent model with a status field\n\n.. code-block:: python\n\n    from django.db import models\n    from bitfield_manager.models import ParentBitfieldModel, ChildBitfieldModelMixin\n\n\n    class ParentExample(ParentBitfieldModel):\n        status = models.BigIntegerField()\n\n    def __str__(self):  # __unicode__ on Python 2\n        return \"status: %i\" % self.status\n\nThen for all models you want django-bitfield-manager to manage add the BitfieldMeta with a list of parent models.\nThe list of parent models takes in a tuple. The first field is the source that will be modified. The\nsource should be a BigIntegerField or BitField (if using django-bitfield). The 2nd field\nis the bitflag to use (i.e. 0 will be 1 << 0, 1 will be 1 << 1, etc.)\n\n.. code-block:: python\n\n    class ChildExample1(ChildBitfieldModelMixin, models.Model):\n        parent = models.ForeignKey('ParentExample', null=True)\n\n        class BitfieldMeta:\n            parent_models = [('parent', 'status', 0)]\n\n    class ChildExample2(ChildBitfieldModelMixin, models.Model):\n        parent = models.ForeignKey('ParentExample', null=True)\n\n        class BitfieldMeta:\n            parent_models = [('parent.status', 1)]\n\nNow when creating/deleting child models the parent status should update\n\n.. code-block:: python\n\n    # create the model\n    p = ParentExample.objects.create(status=0)\n    p2 = ParentExample.objects.create(status=0)\n    # add a child p.status is now 1\n    c1 = ChildExample1.objects.create(parent=p)\n\n    # add the other child. p.status is now 3\n    c2 = ChildExample2.objects.create(parent=p)\n\n    # deleting a child will refresh the status. p.status is now 2\n    c1.delete()\n\n    # updates or mass deletes will require manual refresh\n    # p.status will be 2 and p2.status will be 0\n    ChildExample2.objects.filter(parent=p).update(parent=p2)\n\n    # trigger a manual refresh. p.status is now correct with a status of 0\n    p.force_status_refresh()\n\n    # if you know the related models modified you can specify them\n    # p2.status is now 2\n    p2.force_status_refresh(related_models=[ChildExample2])\n\n    # force status refresh will work with models multiple levels deep. Specify the search_depth to search\n    # more than 1 level deep\n    p2.force_status_refresh(search_depth=2)\n\n\n\nFeatures\n--------\n\n* Allows for automatic bitfield management for Django Models.\n* Will update the status when models are added or deleted\n* Supports multi-level relationships (use dot syntax)\n* Supports django-bitfield\n\nRunning Tests\n-------------\n\nDoes the code actually work?\n\n::\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install tox\n    (myenv) $ tox\n\nCredits\n-------\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n0.3.0 (2017-01-31)\n++++++++++++++++++\n* Added example\n* Changed the parent_models models tuple from ('parent', 'child', 0) to ('parent.child', 0)\n* additional unit tests\n* bug fixes\n\n0.2.0 (2017-01-27)\n++++++++++++++++++\n\n* Added django-bitfield support\n* No longer uses signals\n* Added mixin for child models (ChildBitfieldModelMixin)\n* Added support for one-to-one and limited support for m2m fields\n* Added support for models multiple levels deep (using dot syntax)\n\n\n0.1.0 (2017-01-18)\n++++++++++++++++++\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/goodmase/django-bitfield-manager", "keywords": "django-bitfield-manager", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-bitfield-manager", "package_url": "https://pypi.org/project/django-bitfield-manager/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-bitfield-manager/", "project_urls": {"Homepage": "https://github.com/goodmase/django-bitfield-manager"}, "release_url": "https://pypi.org/project/django-bitfield-manager/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "Automatically manage bitfields in django models", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/django-bitfield-manager\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-bitfield-manager.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8e4bdb2f87fab21ffab87de4ea85b003b550535/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d6269746669656c642d6d616e616765722e737667\"></a>\n<a href=\"https://travis-ci.org/goodmase/django-bitfield-manager\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/goodmase/django-bitfield-manager.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fde8f5774b73213f24a3d1696b40b4ba9e9dc5db/68747470733a2f2f7472617669732d63692e6f72672f676f6f646d6173652f646a616e676f2d6269746669656c642d6d616e616765722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/goodmase/django-bitfield-manager\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/goodmase/django-bitfield-manager/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/baf3fbed56a70cbb431c7e95d8a8a54452860c8c/68747470733a2f2f636f6465636f762e696f2f67682f676f6f646d6173652f646a616e676f2d6269746669656c642d6d616e616765722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"http://django-bitfield-manager.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dae5fc323cf7e17f1f9f82e014ad6ef90d1aceec/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646a616e676f2d6269746669656c642d6d616e616765722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Automatic bitfield management for Django Models.</p>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Install bitfield_manager:</p>\n<pre>pip install django-bitfield-manager\n</pre>\n<p>Add it to your <cite>INSTALLED_APPS</cite>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'bitfield_manager'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>First you\u2019ll need a parent model with a status field</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bitfield_manager.models</span> <span class=\"kn\">import</span> <span class=\"n\">ParentBitfieldModel</span><span class=\"p\">,</span> <span class=\"n\">ChildBitfieldModelMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ParentExample</span><span class=\"p\">(</span><span class=\"n\">ParentBitfieldModel</span><span class=\"p\">):</span>\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BigIntegerField</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># __unicode__ on Python 2</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"status: </span><span class=\"si\">%i</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span>\n</pre>\n<p>Then for all models you want django-bitfield-manager to manage add the BitfieldMeta with a list of parent models.\nThe list of parent models takes in a tuple. The first field is the source that will be modified. The\nsource should be a BigIntegerField or BitField (if using django-bitfield). The 2nd field\nis the bitflag to use (i.e. 0 will be 1 &lt;&lt; 0, 1 will be 1 &lt;&lt; 1, etc.)</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ChildExample1</span><span class=\"p\">(</span><span class=\"n\">ChildBitfieldModelMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'ParentExample'</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">BitfieldMeta</span><span class=\"p\">:</span>\n        <span class=\"n\">parent_models</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'parent'</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ChildExample2</span><span class=\"p\">(</span><span class=\"n\">ChildBitfieldModelMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'ParentExample'</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">BitfieldMeta</span><span class=\"p\">:</span>\n        <span class=\"n\">parent_models</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'parent.status'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n</pre>\n<p>Now when creating/deleting child models the parent status should update</p>\n<pre><span class=\"c1\"># create the model</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ParentExample</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">ParentExample</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\"># add a child p.status is now 1</span>\n<span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">ChildExample1</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># add the other child. p.status is now 3</span>\n<span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">ChildExample2</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># deleting a child will refresh the status. p.status is now 2</span>\n<span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># updates or mass deletes will require manual refresh</span>\n<span class=\"c1\"># p.status will be 2 and p2.status will be 0</span>\n<span class=\"n\">ChildExample2</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">p2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># trigger a manual refresh. p.status is now correct with a status of 0</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">force_status_refresh</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># if you know the related models modified you can specify them</span>\n<span class=\"c1\"># p2.status is now 2</span>\n<span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"n\">force_status_refresh</span><span class=\"p\">(</span><span class=\"n\">related_models</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">ChildExample2</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># force status refresh will work with models multiple levels deep. Specify the search_depth to search</span>\n<span class=\"c1\"># more than 1 level deep</span>\n<span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"n\">force_status_refresh</span><span class=\"p\">(</span><span class=\"n\">search_depth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Allows for automatic bitfield management for Django Models.</li>\n<li>Will update the status when models are added or deleted</li>\n<li>Supports multi-level relationships (use dot syntax)</li>\n<li>Supports django-bitfield</li>\n</ul>\n</div>\n<div id=\"running-tests\">\n<h2>Running Tests</h2>\n<p>Does the code actually work?</p>\n<pre>source &lt;YOURVIRTUALENV&gt;/bin/activate\n(myenv) $ pip install tox\n(myenv) $ tox\n</pre>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Tools used in rendering this package:</p>\n<ul>\n<li><a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a></li>\n<li><a href=\"https://github.com/pydanny/cookiecutter-djangopackage\" rel=\"nofollow\">cookiecutter-djangopackage</a></li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.3.0 (2017-01-31)</h3>\n<ul>\n<li>Added example</li>\n<li>Changed the parent_models models tuple from (\u2018parent\u2019, \u2018child\u2019, 0) to (\u2018parent.child\u2019, 0)</li>\n<li>additional unit tests</li>\n<li>bug fixes</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.0 (2017-01-27)</h3>\n<ul>\n<li>Added django-bitfield support</li>\n<li>No longer uses signals</li>\n<li>Added mixin for child models (ChildBitfieldModelMixin)</li>\n<li>Added support for one-to-one and limited support for m2m fields</li>\n<li>Added support for models multiple levels deep (using dot syntax)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0 (2017-01-18)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2610240, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b2a54eed9e1181e8d0916edfa856bf18", "sha256": "ba535f4d077fc5fdc7ada3009ba1b4b008c51a5d560405eded9d4c67cf2f3c3a"}, "downloads": -1, "filename": "django-bitfield-manager-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b2a54eed9e1181e8d0916edfa856bf18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6327, "upload_time": "2017-01-31T21:31:26", "upload_time_iso_8601": "2017-01-31T21:31:26.417125Z", "url": "https://files.pythonhosted.org/packages/75/61/6b279ee302cbfa73d603bc580367c408a21d822a3d4d38abbcd555600a70/django-bitfield-manager-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4539d147b3f8932bf0f19f39bb7e033f", "sha256": "39b192312193023f7d44a38fd1dc40bce732892192af4a4986f1113490241615"}, "downloads": -1, "filename": "django-bitfield-manager-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4539d147b3f8932bf0f19f39bb7e033f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7833, "upload_time": "2017-01-31T21:31:12", "upload_time_iso_8601": "2017-01-31T21:31:12.333246Z", "url": "https://files.pythonhosted.org/packages/88/6d/78f7ced4f7456491e225a0593bdb3ea91db6fec987c6efc29c4da7bc439e/django-bitfield-manager-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "fb353b6b52e93ddc1f365daa1664fd55", "sha256": "a52ec01fa25d5a269c12d5fbd9507fbd310c4ed5397559c5d516704545826234"}, "downloads": -1, "filename": "django-bitfield-manager-0.3.0.tar.gz", "has_sig": false, "md5_digest": "fb353b6b52e93ddc1f365daa1664fd55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7636, "upload_time": "2017-01-31T21:30:49", "upload_time_iso_8601": "2017-01-31T21:30:49.209466Z", "url": "https://files.pythonhosted.org/packages/67/b8/1e72e81289aeba38bcb9ec8b37f121bee5324dcdca9bc943c08df5a00bfb/django-bitfield-manager-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "4612bd8bd116b12e498f6745f9ad80a7", "sha256": "95c43cd0a1734d4314ce0eaedf0a65622cf2d0e637293b34cc9bab32fcc6abe4"}, "downloads": -1, "filename": "django-bitfield-manager-0.3.1.tar.gz", "has_sig": false, "md5_digest": "4612bd8bd116b12e498f6745f9ad80a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7637, "upload_time": "2017-01-31T21:26:51", "upload_time_iso_8601": "2017-01-31T21:26:51.677850Z", "url": "https://files.pythonhosted.org/packages/bd/a2/031cce9b682cf38f2e92d805a54bd24ad6c2660906f1da2f1941dcc7cd55/django-bitfield-manager-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4612bd8bd116b12e498f6745f9ad80a7", "sha256": "95c43cd0a1734d4314ce0eaedf0a65622cf2d0e637293b34cc9bab32fcc6abe4"}, "downloads": -1, "filename": "django-bitfield-manager-0.3.1.tar.gz", "has_sig": false, "md5_digest": "4612bd8bd116b12e498f6745f9ad80a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7637, "upload_time": "2017-01-31T21:26:51", "upload_time_iso_8601": "2017-01-31T21:26:51.677850Z", "url": "https://files.pythonhosted.org/packages/bd/a2/031cce9b682cf38f2e92d805a54bd24ad6c2660906f1da2f1941dcc7cd55/django-bitfield-manager-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:25 2020"}