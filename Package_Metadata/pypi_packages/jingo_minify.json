{"info": {"author": "Dave Dash, James Socol", "author_email": "dd@mozilla.com, james@mozilla.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Environment :: Web Environment :: Mozilla", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "============\nJingo Minify\n============\n\nJingo Minify is DEPRECATED\n--------------------------\n\nIn version 1.8, Django added support for multiple template engines, and provided\na Jinja2 backend.  The django-jinja_ project leverages that to support Jinja2,\nwhile Jingo does not.\n\n**django-jinja is recommended for new projects.** Jingo >=0.8 supports Django\n1.8, but it will not be maintained beyond version 0.9, and **will not** support\nDjango 1.9 or above.  If you're already using Jingo, and not ready to make `the\nswitch`_, Jingo should continue to work for now, though not without some effort.\n\n0.9_ will be the last release of Jingo, unless a new maintainer comes along with\na new direction.\n\nSince Jingo is no longer maintained, Jingo Minify is also deprecated.\n\nAs of 0.9, Jingo's built-in helpers are provided via a `Jinja2 extension`_ to\nsimplify moving away from Jingo. The entire ``jingo/ext.py`` file can be copied\ninto another project, or referenced as ``'jingo.ext.JingoExtension'``. Used in\nthis way, Jingo plays nicely with django-jinja (and theoretically Django's\nbuilt-in Jinja2 backend).\n\n.. _django-jinja: https://github.com/niwinz/django-jinja\n.. _the switch: http://bluesock.org/~willkg/blog/mozilla/input_django_1_8_upgrade.html#switching-from-jingo-to-django-jinja\n.. _Jinja2: http://jinja.pocoo.org/2/\n.. _0.9: https://https://pypi.python.org/pypi/jingo/0.9.0\n.. _Jinja2 extension: https://github.com/jbalogh/jingo/blob/master/jingo/ext.py\n\n\nJingo Minify is an CSS/JS bundler and minifier for use with Jingo_, a connector\nto use Jinja2_ templates with Django_.\n\n.. image:: https://api.travis-ci.org/jsocol/jingo-minify.png\n\n\nInstalling Jingo Minify\n=======================\n\n\nRequirements\n------------\n\n* **Django 1.4**\n\n* **Jingo and Jinja2**. Jingo Minify is not designed for Django templates.\n\nOne of the following:\n\n* **Java**. If you want to use YUI Compressor.\n\n* **NodeJS**. If you want to use UglifyJS_ and clean-css_.\n\nOptionally:\n\n* **less**. Jingo Minify supports less_, if you have ``lessc`` available.\n* **sass**. Jingo Minify supports sass_, if you have ``sass`` available.\n* **stylus**. Jingo Minify supports stylus_, if you have ``stylus`` available.\n\n\nInstallation\n------------\n\nConfigure the following settings::\n\n    # Jingo Minify uses the YUICompressor internally, so needs Java.\n    JAVA_BIN = '/path/to/java'\n\n    # If you want to use less, set this:\n    LESS_BIN = '/path/to/lessc' # Probably just 'lessc'\n\n    # If you want to use sass, set this:\n    SASS_BIN = '/path/to/sass'\n\n    # If you want to use node-based minifiers, set these:\n    UGLIFY_BIN = '/path/to/uglifyjs' # Probably just 'uglify'\n    CLEANCSS_BIN = '/path/to/cleancss' # Probably just 'cleancss'\n\n\t# If you want to use a specific git executable, set this:\n\tGIT_BIN = '/path/to/git'  # Default to 'git'\n\n\t# If you use a different git root for assets\n\tJINGO_MINIFY_ASSETS_GIT_ROOT = '.'\n\n\t# If you want a different JINGO_MINIFY_ROOT than static\n\tJINGO_MINIFY_ROOT = '/var/www/example.com/static/'\n\n    # Add jingo_minify to INSTALLED_APPS\n    INSTALLED_APPS = (\n        # ...\n        'jingo_minify',\n        # ...\n    )\n\n    # This is the important part.\n    MINIFY_BUNDLES = {\n        'css': {},\n        'js': {},\n    }\n\n\nNote: If you're using Django 1.4, but want to use MEDIA_ROOT and MEDIA_URL\nfor static assets instead of conventional Django 1.4 STATIC_ROOT and\nSTATIC_URL, you should also set::\n\n    JINGO_MINIFY_USE_STATIC = False\n\n\nConfiguring\n===========\n\nJingo Minify deals with *bundles*, which lets you organize your code into\nmultiple files but combine them into very few groups for your users to\ndownload.\n\nBundles are set up in the ``MINIFY_BUNDLES`` setting. For example::\n\n    MINIFY_BUNDLES = {\n        'css': {\n            'common': (\n                'css/reset.css',\n                'css/layout.css',\n            ),\n        },\n        'js': {\n            'common': (\n                'js/lib/jquery.js',\n                'js/common.js',\n            ),\n        },\n    }\n\nThis creates one CSS bundle and one JS bundle, both called ``common``. The file\npaths are relative to the ``MEDIA_ROOT`` setting.\n\nYou can create any number or combination of CSS and JS bundles, and include any\nnumber of files in each, but **do not create empty bundles**.\n\nUsing Bundled Files\n-------------------\n\nFor development, you probably don't want to rebundle the files all the time.\nJust set\n\n::\n\n    TEMPLATE_DEBUG = True\n\nin your settings, and Jingo Minify will automatically use the uncompressed\nfiles. Set ``TEMPLATE_DEBUG`` to ``False`` to use the bundled versions.\n\nIn Templates\n============\n\nTo include a bundle in a template, use either the ``css`` or ``js`` functions.\nFor example::\n\n    {# My Jinja2 Template #}\n    <html>\n    <head>\n      <title>My Page</title>\n      {{ css('common') }}\n    </head>\n    <body>\n      <h1>My page</h1>\n      {{ js('common') }}\n    </body>\n    </html>\n\nThis will include the code (``<link>`` and ``<script>`` tags) to include the\nbundles on the page. It will generate the HTML for either the individual files\nor the bundled files based on ``TEMPLATE_DEBUG``.\n\n\nMedia Types\n-----------\n\nThe ``css()`` helper will, by default, generate ``<link>`` tags with a\n``media`` attribute set to ``screen,projection,tv``. You can override this by\npassing an optional second parameter to the ``css()`` helper, e.g.::\n\n    {{ css('print-bundle', 'print') }}\n\nThis would create a ``<link>`` tag with ``media=\"print\"``.\n\n\nBundling and Minifying\n======================\n\nTo bundle and minify your CSS and JS, run the management command::\n\n    ./manage.py compress_assets\n\nThis will create two files per bundle in your ``media`` directory, one that\nlooks like ``bundle-all.js`` (or ``.css``) and one that looks like\n``bundle-min.js``. Only the ``*-min.*`` version will be used. It also creates a\nfile called ``build.py`` along side ``manage.py`` that contains unique IDs\nbased on the SHA of the current git checkout.\n\n\nMinifier Options\n----------------\n\nYou can choose between YUICompressor (Java) or UglifyJS/clean-css (node) for\nminifying.  You don't have to do anything to get YUICompressor working.\n\nIf you want to use the node counterparts, just add ``UGLIFY_BIN`` and\n``CLEANCSS_BIN`` (set to the correct paths, of course) to your ``settings.py``.\nYou can see the actual syntax if you look at the Installation section of this\nREADME.\n\n\nCache Busting Individual Images\n==============================\n\nDepending on your CDN, you may need to cache-bust assets referenced in the CSS.\nTo do this, add the following to your settings::\n\n    CACHEBUST_IMGS = True\n\nIt will go through your CSS, and find any reference to local resources.  It\nwill append the short id for the commit that most recently modified the\nresource, so that it only cache busts resources that are actually modified.\n\nThe list of images that couldn't be found can be displayed by running the\ncommand with `--verbosity=2` (or `-v2`).\n\n::\n\n    manage.py compress_assets -v2\n\n.. note::\n    This is off by default.  It does a lot of I/O, so be careful if you have\n    large amounts of massive images.  Additionally, it uses a hash of the file.\n    This isn't 100% collision proof, but it should be more than good enough.\n\n\nUsing LESS\n==========\n\nIf you want to use less_ files and have ``LESS_BIN`` defined, LESS is\nsupported automatically in a few ways.\n\n* To use a LESS file, simply include a file in a CSS bundle that ends with\n  ``.less``.\n\n* For development, if you want to use the LESS JavaScript runtime compiler,\n  you'll have to figure out how to include it in your project.\n\n* If you want to compile LESS on the server, even in development, add a\n  setting: ``LESS_PREPROCESS = True``. Your LESS files will be recompiled on\n  every request.\n\n* In production, LESS files are automatically compiled before being bundled\n  with the rest of the CSS.\n\n\nUsing SASS or Stylus\n====================\n\nIf you want to use sass_ or stylus_ files, you must define ```SASS_BIN`` or\n``STYLUS_BIN``, respectively.\n\n* To use a SASS or Stylus file, simply include a file in a CSS bundle that\n  ends with ``.sass`` or ``.scss`` (SASS) or ``.styl`` (Stylus).\n\n* Your SASS/Stylus files, if changed, will be recompiled on every request -\n  even in development.\n\n* In production, Sass/Stylus files are automatically compiled before being\n  bundled with the rest of the CSS.\n\n\nRunning tests\n=============\n\nTo run the tests::\n\n    $ python run_tests.py\n\n\n.. _Jingo: https://github.com/jbalogh/jingo\n.. _Jinja2: http://jinja.pocoo.org/docs/\n.. _Django: https://www.djangoproject.com/\n.. _less: http://lesscss.org/\n.. _sass: http://sass-lang.com/\n.. _stylus: http://learnboost.github.com/stylus/\n.. _UglifyJS: https://github.com/mishoo/UglifyJS\n.. _clean-css: https://github.com/GoalSmashers/clean-css\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/jsocol/jingo-minify", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "jingo_minify", "package_url": "https://pypi.org/project/jingo_minify/", "platform": "", "project_url": "https://pypi.org/project/jingo_minify/", "project_urls": {"Homepage": "http://github.com/jsocol/jingo-minify"}, "release_url": "https://pypi.org/project/jingo_minify/0.7.0/", "requires_dist": ["jingo (>=0.8)"], "requires_python": "", "summary": "DEPRECATED - A Django app that will concat and minify JS and CSS.", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ============<br>Jingo Minify<br>============<br><br>Jingo Minify is DEPRECATED<br>--------------------------<br><br>In version 1.8, Django added support for multiple template engines, and provided<br>a Jinja2 backend.  The django-jinja_ project leverages that to support Jinja2,<br>while Jingo does not.<br><br>**django-jinja is recommended for new projects.** Jingo &gt;=0.8 supports Django<br>1.8, but it will not be maintained beyond version 0.9, and **will not** support<br>Django 1.9 or above.  If you're already using Jingo, and not ready to make `the<br>switch`_, Jingo should continue to work for now, though not without some effort.<br><br>0.9_ will be the last release of Jingo, unless a new maintainer comes along with<br>a new direction.<br><br>Since Jingo is no longer maintained, Jingo Minify is also deprecated.<br><br>As of 0.9, Jingo's built-in helpers are provided via a `Jinja2 extension`_ to<br>simplify moving away from Jingo. The entire ``jingo/ext.py`` file can be copied<br>into another project, or referenced as ``'jingo.ext.JingoExtension'``. Used in<br>this way, Jingo plays nicely with django-jinja (and theoretically Django's<br>built-in Jinja2 backend).<br><br>.. _django-jinja: https://github.com/niwinz/django-jinja<br>.. _the switch: http://bluesock.org/~willkg/blog/mozilla/input_django_1_8_upgrade.html#switching-from-jingo-to-django-jinja<br>.. _Jinja2: http://jinja.pocoo.org/2/<br>.. _0.9: https://https://pypi.python.org/pypi/jingo/0.9.0<br>.. _Jinja2 extension: https://github.com/jbalogh/jingo/blob/master/jingo/ext.py<br><br><br>Jingo Minify is an CSS/JS bundler and minifier for use with Jingo_, a connector<br>to use Jinja2_ templates with Django_.<br><br>.. image:: https://api.travis-ci.org/jsocol/jingo-minify.png<br><br><br>Installing Jingo Minify<br>=======================<br><br><br>Requirements<br>------------<br><br>* **Django 1.4**<br><br>* **Jingo and Jinja2**. Jingo Minify is not designed for Django templates.<br><br>One of the following:<br><br>* **Java**. If you want to use YUI Compressor.<br><br>* **NodeJS**. If you want to use UglifyJS_ and clean-css_.<br><br>Optionally:<br><br>* **less**. Jingo Minify supports less_, if you have ``lessc`` available.<br>* **sass**. Jingo Minify supports sass_, if you have ``sass`` available.<br>* **stylus**. Jingo Minify supports stylus_, if you have ``stylus`` available.<br><br><br>Installation<br>------------<br><br>Configure the following settings::<br><br>    # Jingo Minify uses the YUICompressor internally, so needs Java.<br>    JAVA_BIN = '/path/to/java'<br><br>    # If you want to use less, set this:<br>    LESS_BIN = '/path/to/lessc' # Probably just 'lessc'<br><br>    # If you want to use sass, set this:<br>    SASS_BIN = '/path/to/sass'<br><br>    # If you want to use node-based minifiers, set these:<br>    UGLIFY_BIN = '/path/to/uglifyjs' # Probably just 'uglify'<br>    CLEANCSS_BIN = '/path/to/cleancss' # Probably just 'cleancss'<br><br>\t# If you want to use a specific git executable, set this:<br>\tGIT_BIN = '/path/to/git'  # Default to 'git'<br><br>\t# If you use a different git root for assets<br>\tJINGO_MINIFY_ASSETS_GIT_ROOT = '.'<br><br>\t# If you want a different JINGO_MINIFY_ROOT than static<br>\tJINGO_MINIFY_ROOT = '/var/www/example.com/static/'<br><br>    # Add jingo_minify to INSTALLED_APPS<br>    INSTALLED_APPS = (<br>        # ...<br>        'jingo_minify',<br>        # ...<br>    )<br><br>    # This is the important part.<br>    MINIFY_BUNDLES = {<br>        'css': {},<br>        'js': {},<br>    }<br><br><br>Note: If you're using Django 1.4, but want to use MEDIA_ROOT and MEDIA_URL<br>for static assets instead of conventional Django 1.4 STATIC_ROOT and<br>STATIC_URL, you should also set::<br><br>    JINGO_MINIFY_USE_STATIC = False<br><br><br>Configuring<br>===========<br><br>Jingo Minify deals with *bundles*, which lets you organize your code into<br>multiple files but combine them into very few groups for your users to<br>download.<br><br>Bundles are set up in the ``MINIFY_BUNDLES`` setting. For example::<br><br>    MINIFY_BUNDLES = {<br>        'css': {<br>            'common': (<br>                'css/reset.css',<br>                'css/layout.css',<br>            ),<br>        },<br>        'js': {<br>            'common': (<br>                'js/lib/jquery.js',<br>                'js/common.js',<br>            ),<br>        },<br>    }<br><br>This creates one CSS bundle and one JS bundle, both called ``common``. The file<br>paths are relative to the ``MEDIA_ROOT`` setting.<br><br>You can create any number or combination of CSS and JS bundles, and include any<br>number of files in each, but **do not create empty bundles**.<br><br>Using Bundled Files<br>-------------------<br><br>For development, you probably don't want to rebundle the files all the time.<br>Just set<br><br>::<br><br>    TEMPLATE_DEBUG = True<br><br>in your settings, and Jingo Minify will automatically use the uncompressed<br>files. Set ``TEMPLATE_DEBUG`` to ``False`` to use the bundled versions.<br><br>In Templates<br>============<br><br>To include a bundle in a template, use either the ``css`` or ``js`` functions.<br>For example::<br><br>    {# My Jinja2 Template #}<br>    &lt;html&gt;<br>    &lt;head&gt;<br>      &lt;title&gt;My Page&lt;/title&gt;<br>      {{ css('common') }}<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>      &lt;h1&gt;My page&lt;/h1&gt;<br>      {{ js('common') }}<br>    &lt;/body&gt;<br>    &lt;/html&gt;<br><br>This will include the code (``&lt;link&gt;`` and ``&lt;script&gt;`` tags) to include the<br>bundles on the page. It will generate the HTML for either the individual files<br>or the bundled files based on ``TEMPLATE_DEBUG``.<br><br><br>Media Types<br>-----------<br><br>The ``css()`` helper will, by default, generate ``&lt;link&gt;`` tags with a<br>``media`` attribute set to ``screen,projection,tv``. You can override this by<br>passing an optional second parameter to the ``css()`` helper, e.g.::<br><br>    {{ css('print-bundle', 'print') }}<br><br>This would create a ``&lt;link&gt;`` tag with ``media=\"print\"``.<br><br><br>Bundling and Minifying<br>======================<br><br>To bundle and minify your CSS and JS, run the management command::<br><br>    ./manage.py compress_assets<br><br>This will create two files per bundle in your ``media`` directory, one that<br>looks like ``bundle-all.js`` (or ``.css``) and one that looks like<br>``bundle-min.js``. Only the ``*-min.*`` version will be used. It also creates a<br>file called ``build.py`` along side ``manage.py`` that contains unique IDs<br>based on the SHA of the current git checkout.<br><br><br>Minifier Options<br>----------------<br><br>You can choose between YUICompressor (Java) or UglifyJS/clean-css (node) for<br>minifying.  You don't have to do anything to get YUICompressor working.<br><br>If you want to use the node counterparts, just add ``UGLIFY_BIN`` and<br>``CLEANCSS_BIN`` (set to the correct paths, of course) to your ``settings.py``.<br>You can see the actual syntax if you look at the Installation section of this<br>README.<br><br><br>Cache Busting Individual Images<br>==============================<br><br>Depending on your CDN, you may need to cache-bust assets referenced in the CSS.<br>To do this, add the following to your settings::<br><br>    CACHEBUST_IMGS = True<br><br>It will go through your CSS, and find any reference to local resources.  It<br>will append the short id for the commit that most recently modified the<br>resource, so that it only cache busts resources that are actually modified.<br><br>The list of images that couldn't be found can be displayed by running the<br>command with `--verbosity=2` (or `-v2`).<br><br>::<br><br>    manage.py compress_assets -v2<br><br>.. note::<br>    This is off by default.  It does a lot of I/O, so be careful if you have<br>    large amounts of massive images.  Additionally, it uses a hash of the file.<br>    This isn't 100% collision proof, but it should be more than good enough.<br><br><br>Using LESS<br>==========<br><br>If you want to use less_ files and have ``LESS_BIN`` defined, LESS is<br>supported automatically in a few ways.<br><br>* To use a LESS file, simply include a file in a CSS bundle that ends with<br>  ``.less``.<br><br>* For development, if you want to use the LESS JavaScript runtime compiler,<br>  you'll have to figure out how to include it in your project.<br><br>* If you want to compile LESS on the server, even in development, add a<br>  setting: ``LESS_PREPROCESS = True``. Your LESS files will be recompiled on<br>  every request.<br><br>* In production, LESS files are automatically compiled before being bundled<br>  with the rest of the CSS.<br><br><br>Using SASS or Stylus<br>====================<br><br>If you want to use sass_ or stylus_ files, you must define ```SASS_BIN`` or<br>``STYLUS_BIN``, respectively.<br><br>* To use a SASS or Stylus file, simply include a file in a CSS bundle that<br>  ends with ``.sass`` or ``.scss`` (SASS) or ``.styl`` (Stylus).<br><br>* Your SASS/Stylus files, if changed, will be recompiled on every request -<br>  even in development.<br><br>* In production, Sass/Stylus files are automatically compiled before being<br>  bundled with the rest of the CSS.<br><br><br>Running tests<br>=============<br><br>To run the tests::<br><br>    $ python run_tests.py<br><br><br>.. _Jingo: https://github.com/jbalogh/jingo<br>.. _Jinja2: http://jinja.pocoo.org/docs/<br>.. _Django: https://www.djangoproject.com/<br>.. _less: http://lesscss.org/<br>.. _sass: http://sass-lang.com/<br>.. _stylus: http://learnboost.github.com/stylus/<br>.. _UglifyJS: https://github.com/mishoo/UglifyJS<br>.. _clean-css: https://github.com/GoalSmashers/clean-css<br><br><br>\n          </div>"}, "last_serial": 2738724, "releases": {"0.3.2": [{"comment_text": "", "digests": {"md5": "4acd8cd1b03d5f28f4e8d9a7ef79d034", "sha256": "663ac8d1bf5b6aab27556f52c06ae821f3c7d44f2b34f3edf7e838c312e1ff25"}, "downloads": -1, "filename": "jingo_minify-0.3.2.tar.gz", "has_sig": false, "md5_digest": "4acd8cd1b03d5f28f4e8d9a7ef79d034", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3810, "upload_time": "2011-03-21T14:37:12", "upload_time_iso_8601": "2011-03-21T14:37:12.817271Z", "url": "https://files.pythonhosted.org/packages/eb/28/ad6142f7df922875a56e568b9f34da4254147452800d64c0702a8f291ab6/jingo_minify-0.3.2.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "5e4494a4f63a8057d26499fda749c50f", "sha256": "8f36d10501f439a0ed3f5282a2313af9ef6927de4a25f19a86c9cab51be6fdfc"}, "downloads": -1, "filename": "jingo_minify-0.4.tar.gz", "has_sig": false, "md5_digest": "5e4494a4f63a8057d26499fda749c50f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4159, "upload_time": "2011-04-20T23:13:22", "upload_time_iso_8601": "2011-04-20T23:13:22.718460Z", "url": "https://files.pythonhosted.org/packages/b2/c2/bf8d4c710c4f1565dbb62f4384bfe3e8ec0feece56f9f9f864d6308f891e/jingo_minify-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "fa90596c2949c7dedef5f2fefeb44ee1", "sha256": "cc3c3fdea03081316eafef660968e981e0418b6d2a9606a0a3fe8503634386c8"}, "downloads": -1, "filename": "jingo_minify-0.5.tar.gz", "has_sig": false, "md5_digest": "fa90596c2949c7dedef5f2fefeb44ee1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9135, "upload_time": "2011-10-31T23:45:07", "upload_time_iso_8601": "2011-10-31T23:45:07.922421Z", "url": "https://files.pythonhosted.org/packages/e4/a3/a1cbdea4ddedd7b1bd155b51b62be5095f5fe8dd7b853c4df032b64ea402/jingo_minify-0.5.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "2c8c1a23a1c36bf4f4bd95150e75ecfb", "sha256": "5b804282fb5b00738a279633b2f1943aefbc0b9e3c5b8c12eeade6d96ce262f0"}, "downloads": -1, "filename": "jingo_minify-0.6.0-py2-none-any.whl", "has_sig": false, "md5_digest": "2c8c1a23a1c36bf4f4bd95150e75ecfb", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 863615, "upload_time": "2017-02-17T14:31:57", "upload_time_iso_8601": "2017-02-17T14:31:57.479357Z", "url": "https://files.pythonhosted.org/packages/cc/c2/06527e16ae858e1a2d7af4e3806214bf61ac9f958f0c1ce2fb5a39ff323b/jingo_minify-0.6.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16c4f9dd80bf96652d5e460b7e4bdcb3", "sha256": "f74ce033cb25852d936679ec56fde55455a1812a151494eb93436734fe9e3a55"}, "downloads": -1, "filename": "jingo_minify-0.6.0.tar.gz", "has_sig": false, "md5_digest": "16c4f9dd80bf96652d5e460b7e4bdcb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 864928, "upload_time": "2017-02-17T14:31:59", "upload_time_iso_8601": "2017-02-17T14:31:59.721755Z", "url": "https://files.pythonhosted.org/packages/44/53/dbda6ccdcbc4f3b9da94f6e18edb25ff1b99a43414e277c3dbc7b1dc7c42/jingo_minify-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "9b8b67084721922ab146a0065d5a3718", "sha256": "1427946e8d4082c909a98dbacfe1cd908cbdc83572003e1a0236da02b350e31f"}, "downloads": -1, "filename": "jingo_minify-0.7.0-py2-none-any.whl", "has_sig": false, "md5_digest": "9b8b67084721922ab146a0065d5a3718", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 866520, "upload_time": "2017-03-29T13:52:23", "upload_time_iso_8601": "2017-03-29T13:52:23.529922Z", "url": "https://files.pythonhosted.org/packages/35/ac/5588096deb7739020e6dee5922860a5fe512f0b9b8c85a7669cdc345280f/jingo_minify-0.7.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f212700cd98f1504a15b5fbed608334c", "sha256": "f47ec7868467a1b270e115c301a4270137836ddb7b5f57552e65dff5c86aee05"}, "downloads": -1, "filename": "jingo_minify-0.7.0.tar.gz", "has_sig": false, "md5_digest": "f212700cd98f1504a15b5fbed608334c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 867212, "upload_time": "2017-03-29T13:52:26", "upload_time_iso_8601": "2017-03-29T13:52:26.502445Z", "url": "https://files.pythonhosted.org/packages/d8/1b/4dfe7d89c8fd385642875b1af515e4c8ac9bbc0cd02b011169191c489025/jingo_minify-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b8b67084721922ab146a0065d5a3718", "sha256": "1427946e8d4082c909a98dbacfe1cd908cbdc83572003e1a0236da02b350e31f"}, "downloads": -1, "filename": "jingo_minify-0.7.0-py2-none-any.whl", "has_sig": false, "md5_digest": "9b8b67084721922ab146a0065d5a3718", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 866520, "upload_time": "2017-03-29T13:52:23", "upload_time_iso_8601": "2017-03-29T13:52:23.529922Z", "url": "https://files.pythonhosted.org/packages/35/ac/5588096deb7739020e6dee5922860a5fe512f0b9b8c85a7669cdc345280f/jingo_minify-0.7.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f212700cd98f1504a15b5fbed608334c", "sha256": "f47ec7868467a1b270e115c301a4270137836ddb7b5f57552e65dff5c86aee05"}, "downloads": -1, "filename": "jingo_minify-0.7.0.tar.gz", "has_sig": false, "md5_digest": "f212700cd98f1504a15b5fbed608334c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 867212, "upload_time": "2017-03-29T13:52:26", "upload_time_iso_8601": "2017-03-29T13:52:26.502445Z", "url": "https://files.pythonhosted.org/packages/d8/1b/4dfe7d89c8fd385642875b1af515e4c8ac9bbc0cd02b011169191c489025/jingo_minify-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:39 2020"}