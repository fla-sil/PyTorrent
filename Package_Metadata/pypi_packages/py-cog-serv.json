{"info": {"author": "Rob Truxal", "author_email": "rtruxal2020@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Intro\n=====\n\nVERSION=0.0.2 | supports Python 2.7\n\n\n####An Overly Explanatory Intro to Cognitive Services aka Bing Search API v5\n\n This code has been designed as a teaching tool. Where applicable, efficiency has been sacrificed to make functionality clear. The first file you should check out is `py-cog-serv.source.constants`. Snippits of it are shown in the \"Usage\" section below. As of now, this tool supports only basic web-search. Contributions are welcome and needed!\n\n\nInstallation\n============\nThis module is not yet packaged. Until then, here is a sample import into REPL.\nThe following assumes your current working directory is `.../PATH/TO/py-cog-serv`\n```py\n>>> import os, sys\n>>> sys.path.append(os.getcwd())\n>>> from source.SearchWeb import BingWebSearch\n```\n\n\nUsage\n=====\n####Step 1: Customize Headers & Optional Query Params\n You'll notice that `constants.py` has two classes included in it: `user_constants` and `static_constants`.\n * `user_constants` gives access to the default headers and query-modifiers used when a `BingWebSearch` object is instantiated.\n * `static_constants` can be used as reference. Check out:\n    * `static_constants.COUNTRY_CODES`\n    * `static_constants.MARKET_CODES`\n    * `static_constants.SPECIALTY_APIS`\n    * `static_constants.BASE_ENDPOINT` as well as the alternative formats of the other `static_constant.XXX_ENDPOINT`s listed.\n\nStudy the constants page, it will guide you through the decisions you're in charge of making. The tool will take care of their implementation. Do **NOT** enter your key into the header in step 1. It must be passed manually to the constructor in step 2.\n\nFrom `source.constants.user_constants`:\n```py\n    ###############################################\n    ## Enter default-header customizations here. ##\n    ###############################################\n    HEADERS['Ocp-Apim-Subscription-Key'] = None\n    HEADERS['User-Agent'] = user_agent.firefox\n    HEADERS['X-Search-ClientIP'] = gethostbyname(gethostname())\n    HEADERS['X-MSEdge-ClientID']= None\n    HEADERS['Accept'] = None\n    HEADERS['Accept-Language'] = None\n    HEADERS['X-Search-Location'] = None\n\n    ###############################################\n    ##     Enter query customizations here.      ##\n    ###############################################\n    ## Web Params:\n    INCLUDED_PARAMS['cc'] = None  # <--(See static_constants.COUNTRY_CODES below for available options)\n    INCLUDED_PARAMS['count'] = None  # <--(Enter a number from 0-50. Must by type==str. EX: count of 5 should be \"5\")\n    INCLUDED_PARAMS['freshness'] = None  # <--(Poss values are 'Day', 'Week', or 'Month')\n    INCLUDED_PARAMS['mkt'] = None  # <--(See static_constants.MARKET_CODES below for available options)\n    INCLUDED_PARAMS['offset'] = None  # <--(Use this in conjunction with totalEstimatedMatches and count to page. Same format as 'count')\n    INCLUDED_PARAMS['responseFilter'] = None  # <--(Poss values are 'Computation', 'Images', 'News', 'RelatedSearches', SpellSuggestions', 'TimeZone', 'Videos', or 'Webpages')\n    INCLUDED_PARAMS['safeSearch'] = None  # <--(Poss values are 'Off', 'Moderate', and 'Strict.')\n    INCLUDED_PARAMS['setLang'] = None  # <--(See ISO 639-1, 2-letter language codes here: https://www.loc.gov/standards/iso639-2/php/code_list.php)\n    INCLUDED_PARAMS['textDecorations'] = None  # <--(Case-insensitive boolean. '(t|T)rue', or '(f|F)alse')\n    INCLUDED_PARAMS['textFormat'] = None  # <--(Poss values are 'Raw', and 'HTML.' Default is 'Raw' if left blank.)\n```\n\n\n####Step 2: Search For Web Results:\n```py\n>>> from py-cog-serv.source.SearchWeb import BingWebSearch\n>>> search_query = \"ENTER YOUR ARBITRARY SEARCH TERMS HERE\"\n>>> web_searcher = BingWebSearch(api_key=api_key, query=search_query, safe=False, headers=constants.HEADERS, addtnl_params=constants.INCLUDED_PARAMS)\n>>> # see source.constants.static_constants.BASE_QUERY_PARAMS for compatible params. Must be in {param : value} format\n>>> return_json = web_searcher.search(limit=50)\n>>> # 50 is the maximum number results returned per query. Pagination is in the works.\n```\n\n\n\nNotes\n=====\n\n2016-11-15: Added support & checking-mechanism for web-search query parameters\n\n\nMassive swaths of this v5 API interface were graciously stolen from py-bing-search which you can find here: https://github.com/tristantao/py-bing-search\n\n\nI AM NOT A PROFESSIONAL PROGRAMMER AND JUST STARTING THIS.\n\nPLEASE HELP ME MAKE THIS NOT AWFUL.\n\n\nTODO\n=====\n* Parse the return JSON!...like any of it! just do something it's a mess!\n* Add image/news/video classes w/ support for API-specific querying\n    * Base Endpoint URLs for these are partially built in class \"constants\"\n* Fix query params-checking. **FINISHED-(ALPHA)**\n* Parse queries into URLs better. **FINISHED-(ALPHA)**\n    * Use requests.utils.quote or some-such to encode things properly.\n* Set up error handling for query/second errors. Use time.sleep(1).\n* Implement paging with self.current_offset.\n* Ensure Python3 compatibility w/ try: except: statement for manual header entry.\n    * (Currently using `raw_input`)", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rtruxal/py-cog-serv", "keywords": "Azure,Bing,API,Search,Cognitive Services,v5", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "py-cog-serv", "package_url": "https://pypi.org/project/py-cog-serv/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/py-cog-serv/", "project_urls": {"Homepage": "https://github.com/rtruxal/py-cog-serv"}, "release_url": "https://pypi.org/project/py-cog-serv/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "A simple lightweight python wrapper for the Azure Bing Search API.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Intro<br>=====<br><br>VERSION=0.0.2 | supports Python 2.7<br><br><br>####An Overly Explanatory Intro to Cognitive Services aka Bing Search API v5<br><br> This code has been designed as a teaching tool. Where applicable, efficiency has been sacrificed to make functionality clear. The first file you should check out is `py-cog-serv.source.constants`. Snippits of it are shown in the \"Usage\" section below. As of now, this tool supports only basic web-search. Contributions are welcome and needed!<br><br><br>Installation<br>============<br>This module is not yet packaged. Until then, here is a sample import into REPL.<br>The following assumes your current working directory is `.../PATH/TO/py-cog-serv`<br>```py<br>&gt;&gt;&gt; import os, sys<br>&gt;&gt;&gt; sys.path.append(os.getcwd())<br>&gt;&gt;&gt; from source.SearchWeb import BingWebSearch<br>```<br><br><br>Usage<br>=====<br>####Step 1: Customize Headers &amp; Optional Query Params<br> You'll notice that `constants.py` has two classes included in it: `user_constants` and `static_constants`.<br> * `user_constants` gives access to the default headers and query-modifiers used when a `BingWebSearch` object is instantiated.<br> * `static_constants` can be used as reference. Check out:<br>    * `static_constants.COUNTRY_CODES`<br>    * `static_constants.MARKET_CODES`<br>    * `static_constants.SPECIALTY_APIS`<br>    * `static_constants.BASE_ENDPOINT` as well as the alternative formats of the other `static_constant.XXX_ENDPOINT`s listed.<br><br>Study the constants page, it will guide you through the decisions you're in charge of making. The tool will take care of their implementation. Do **NOT** enter your key into the header in step 1. It must be passed manually to the constructor in step 2.<br><br>From `source.constants.user_constants`:<br>```py<br>    ###############################################<br>    ## Enter default-header customizations here. ##<br>    ###############################################<br>    HEADERS['Ocp-Apim-Subscription-Key'] = None<br>    HEADERS['User-Agent'] = user_agent.firefox<br>    HEADERS['X-Search-ClientIP'] = gethostbyname(gethostname())<br>    HEADERS['X-MSEdge-ClientID']= None<br>    HEADERS['Accept'] = None<br>    HEADERS['Accept-Language'] = None<br>    HEADERS['X-Search-Location'] = None<br><br>    ###############################################<br>    ##     Enter query customizations here.      ##<br>    ###############################################<br>    ## Web Params:<br>    INCLUDED_PARAMS['cc'] = None  # &lt;--(See static_constants.COUNTRY_CODES below for available options)<br>    INCLUDED_PARAMS['count'] = None  # &lt;--(Enter a number from 0-50. Must by type==str. EX: count of 5 should be \"5\")<br>    INCLUDED_PARAMS['freshness'] = None  # &lt;--(Poss values are 'Day', 'Week', or 'Month')<br>    INCLUDED_PARAMS['mkt'] = None  # &lt;--(See static_constants.MARKET_CODES below for available options)<br>    INCLUDED_PARAMS['offset'] = None  # &lt;--(Use this in conjunction with totalEstimatedMatches and count to page. Same format as 'count')<br>    INCLUDED_PARAMS['responseFilter'] = None  # &lt;--(Poss values are 'Computation', 'Images', 'News', 'RelatedSearches', SpellSuggestions', 'TimeZone', 'Videos', or 'Webpages')<br>    INCLUDED_PARAMS['safeSearch'] = None  # &lt;--(Poss values are 'Off', 'Moderate', and 'Strict.')<br>    INCLUDED_PARAMS['setLang'] = None  # &lt;--(See ISO 639-1, 2-letter language codes here: https://www.loc.gov/standards/iso639-2/php/code_list.php)<br>    INCLUDED_PARAMS['textDecorations'] = None  # &lt;--(Case-insensitive boolean. '(t|T)rue', or '(f|F)alse')<br>    INCLUDED_PARAMS['textFormat'] = None  # &lt;--(Poss values are 'Raw', and 'HTML.' Default is 'Raw' if left blank.)<br>```<br><br><br>####Step 2: Search For Web Results:<br>```py<br>&gt;&gt;&gt; from py-cog-serv.source.SearchWeb import BingWebSearch<br>&gt;&gt;&gt; search_query = \"ENTER YOUR ARBITRARY SEARCH TERMS HERE\"<br>&gt;&gt;&gt; web_searcher = BingWebSearch(api_key=api_key, query=search_query, safe=False, headers=constants.HEADERS, addtnl_params=constants.INCLUDED_PARAMS)<br>&gt;&gt;&gt; # see source.constants.static_constants.BASE_QUERY_PARAMS for compatible params. Must be in {param : value} format<br>&gt;&gt;&gt; return_json = web_searcher.search(limit=50)<br>&gt;&gt;&gt; # 50 is the maximum number results returned per query. Pagination is in the works.<br>```<br><br><br><br>Notes<br>=====<br><br>2016-11-15: Added support &amp; checking-mechanism for web-search query parameters<br><br><br>Massive swaths of this v5 API interface were graciously stolen from py-bing-search which you can find here: https://github.com/tristantao/py-bing-search<br><br><br>I AM NOT A PROFESSIONAL PROGRAMMER AND JUST STARTING THIS.<br><br>PLEASE HELP ME MAKE THIS NOT AWFUL.<br><br><br>TODO<br>=====<br>* Parse the return JSON!...like any of it! just do something it's a mess!<br>* Add image/news/video classes w/ support for API-specific querying<br>    * Base Endpoint URLs for these are partially built in class \"constants\"<br>* Fix query params-checking. **FINISHED-(ALPHA)**<br>* Parse queries into URLs better. **FINISHED-(ALPHA)**<br>    * Use requests.utils.quote or some-such to encode things properly.<br>* Set up error handling for query/second errors. Use time.sleep(1).<br>* Implement paging with self.current_offset.<br>* Ensure Python3 compatibility w/ try: except: statement for manual header entry.<br>    * (Currently using `raw_input`)\n          </div>"}, "last_serial": 2467963, "releases": {"0.0.2": []}, "urls": [], "timestamp": "Fri May  8 03:08:15 2020"}