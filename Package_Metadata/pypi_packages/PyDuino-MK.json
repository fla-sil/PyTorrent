{"info": {"author": "Nelson Tran", "author_email": "mail@ntt.io", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7"], "description": "<h1 id=\"pyduino-mk\">PyDuino-MK</h1>\r\n<p>A simple Python API that interacts (via serial communication) with Arduino devices for USB mouse and keyboard emulation. It is compatible with all Arduino devices (Leonardo, Micro, etc.) that support the Arduino Mouse/Keyboard libraries.</p>\r\n<h1 id=\"features\">Features</h1>\r\n<ul>\r\n<li>Simple Python 2.7 API</li>\r\n<li>Absolute Mouse Positioning</li>\r\n<li>Vanilla Arduino (w/o HID modifications)</li>\r\n<li>Extended mouse and keyboard functions</li>\r\n<li>Bezier curve mouse movement</li>\r\n<li>Human-like keyboard typing</li>\r\n</ul>\r\n<h1 id=\"requirements\">Requirements</h1>\r\n<ul>\r\n<li><a href=\"https://www.python.org/\">Python 2.7.x</a> (does not currently work with Python 3.x)</li>\r\n<li><a href=\"http://pyserial.sourceforge.net/\">PySerial 2.7</a></li>\r\n<li><a href=\"http://www.arduino.cc/en/Main/Software\">Arduino IDE 1.6+</a></li>\r\n<li>A compatible Arduino device</li>\r\n</ul>\r\n<h1 id=\"installation\">Installation</h1>\r\n<p>To install PyDuino-MK from the PyPI repository, run the following from a command line:</p>\r\n<pre><code>pip install pyduino_mk\r\n</code></pre><p>To install PyDuino-MK locally from the source directory, <code>cd</code> to the <code>python</code> directory containing <code>setup.py</code> and run:</p>\r\n<pre><code>python setup.py build install\r\n</code></pre><h1 id=\"setup\">Setup</h1>\r\n<ol>\r\n<li>Plug your Arduino device into a computer via USB.</li>\r\n<li><code>cd</code> to the <code>arduino</code> folder and open the <code>arduino.ino</code> file in the Arduino IDE.</li>\r\n<li>Upload the sketch to the Arduino device.</li>\r\n</ol>\r\n<p>After the Arduino sketch has been uploaded, the Arduino device is now ready to accept serial messages from the Python API.</p>\r\n<h1 id=\"usage\">Usage</h1>\r\n<p>To use PyDuino-MK, you must first import the Arduino-MK mouse/keyboard constants and the <code>Arduino</code> class encapsulating the Arduino commands. The mouse/keyboard constants are used to designate mouse buttons (i.e. <code>MOUSE_LEFT</code>, <code>MOUSE_RIGHT</code>) and keyboard keys (i.e. <code>F1</code>, <code>CTRL</code>, <code>INSERT</code>).</p>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> arduino_mk.constants <span class=\"hljs-keyword\">import</span> *\r\n<span class=\"hljs-keyword\">from</span> arduino_mk <span class=\"hljs-keyword\">import</span> Arduino\r\n</code></pre>\r\n<p>Instantiating the <code>Arduino</code> class is simple and easy.</p>\r\n<pre><code class=\"lang-python\">arduino = Arduino()\r\n</code></pre>\r\n<p>PyDuino-MK automatically detects and establishes a connection with the serial port that the Arduino device resides on. But if for any reason PyDuino-MK is unable to do so, a port can be explicitly provided as an optional parameter.</p>\r\n<pre><code class=\"lang-python\">arduino = Arduino(port=<span class=\"hljs-string\">'COM5'</span>)  <span class=\"hljs-comment\"># Windows example</span>\r\n</code></pre>\r\n<pre><code class=\"lang-python\">arduino = Arduino(port=<span class=\"hljs-string\">'/dev/tty.usbmodemfa141'</span>)  <span class=\"hljs-comment\"># OSX example</span>\r\n</code></pre>\r\n<pre><code class=\"lang-python\">arduino = Arduino(port=<span class=\"hljs-string\">'/dev/ttyS2'</span>)  <span class=\"hljs-comment\"># Linux example</span>\r\n</code></pre>\r\n<h2 id=\"moving-the-mouse\">Moving the Mouse</h2>\r\n<p>PyDuino-MK provides a couple of modules for moving the mouse from one location to another. These modules take two arguments that represent a Cartesian coordinate. A coordinate system where the top-left of the screen represents the origin, <code>(0, 0)</code>, such that pixel coordinates increase in the right and down directions is assumed.</p>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Calling this module will move the mouse from the current mouse position to </span>\r\n<span class=\"hljs-comment\"># a specified mouse position in a linear motion.</span>\r\narduino.move(<span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">300</span>)\r\n</code></pre>\r\n<p><img src=\"https://cloud.githubusercontent.com/assets/10904556/8178406/a19b4b9c-13c2-11e5-847e-b364a73d7445.gif\" alt=\"besenham\"></p>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Calling this module will move the mouse from the current mouse position to </span>\r\n<span class=\"hljs-comment\"># a specified mouse position in a cubic bezier motion. This module generates</span>\r\n<span class=\"hljs-comment\"># two random control points every call to vary the mouse paths.</span>\r\narduino.bezier_move(<span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">300</span>)\r\n</code></pre>\r\n<p><img src=\"https://cloud.githubusercontent.com/assets/10904556/8178416/b67bfdae-13c2-11e5-9a39-234df8d34675.gif\" alt=\"bezier\"></p>\r\n<h2 id=\"clicking-the-mouse\">Clicking the Mouse</h2>\r\n<p>To click using the mouse, call the <code>click(button)</code> module. This module holds down the designated button for a random interval between 50-100ms and then releases the button to resemble a human-like click motion.</p>\r\n<p>All of the click modules have the default parameter value, <code>MOUSE_LEFT</code>.</p>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Left-click (2 ways)</span>\r\narduino.click()\r\narduino.click(MOUSE_LEFT)\r\n</code></pre>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Middle-click</span>\r\narduino.click(MOUSE_MIDDLE)\r\n</code></pre>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Right-click</span>\r\narduino.click(MOUSE_RIGHT)\r\n</code></pre>\r\n<p>To click without briefly holding the mouse button down, use the <code>fast_click(button)</code> module.</p>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Auto-click very quickly</span>\r\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">True</span>:\r\n    arduino.fast_click(MOUSE_LEFT)\r\n</code></pre>\r\n<p>Use the <code>press(button)</code> and <code>release(button)</code> modules to hold down a mouse button and release it on command.</p>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> time\r\n\r\n<span class=\"hljs-comment\"># Hold the right mouse button for 5 seconds</span>\r\narduino.press(MOUSE_RIGHT)\r\ntime.sleep(<span class=\"hljs-number\">5</span>)\r\narduino.release(MOUSE_RIGHT)\r\n</code></pre>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Drag the left mouse button to (500, 500)</span>\r\narduino.press()\r\narduino.bezier_move(<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">500</span>)\r\narduino.release()\r\n</code></pre>\r\n<h2 id=\"using-the-keyboard\">Using the Keyboard</h2>\r\n<p>To send a character or a string <strong>as a single keystroke</strong>, use the <code>write(character)</code> or <code>write(string)</code> module.</p>\r\n<p>All keyboard modules will work <strong>only</strong> with ASCII characters that correspond to a key on the keyboard. With the exception of backspace, passing the ASCII codes for non-printable characters as arguments will produce undefined results.</p>\r\n<p>However, modifier keys (such as Ctrl, Shift, Alt) may be passed as arguments. The modifier key constants are available and can be imported from <code>pyduino_mk.constants</code>. The names of the constants are almost identical to the <a href=\"http://www.arduino.cc/en/Reference/KeyboardModifiers\">Arduino keyboard modifiers</a>. The only difference is that the constants omit the <code>KEY_</code> prefix. <code>KEY_LEFT_CTRL</code> becomes <code>LEFT_CTRL</code>, <code>KEY_CAPS_LOCK</code> becomes <code>CAPS_LOCK</code>, and so on.</p>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Write the letter 'A' in two ways. A character or an integer ordinal </span>\r\n<span class=\"hljs-comment\"># representing the character can be used as an argument.</span>\r\narduino.write(<span class=\"hljs-string\">'A'</span>)\r\narduino.write(<span class=\"hljs-number\">65</span>)\r\n</code></pre>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Write 'Hello world!' through the Arduino keyboard as a single keystroke.</span>\r\narduino.write(<span class=\"hljs-string\">'Hello world!'</span>)\r\n</code></pre>\r\n<p>Like the mouse, keyboard keys can also be held down and released. The <code>press(button)</code> and <code>release(button)</code> modules are overloaded for the keyboard. <code>releaseAll()</code> can be used to release all keys that are held down.</p>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Hit Ctrl+Alt+Delete</span>\r\narduino.press(LEFT_CTRL)\r\narduino.press(LEFT_ALT)\r\narduino.press(DELETE)\r\narduino.releaseAll()\r\n</code></pre>\r\n<h2 id=\"realistic-human-typing\">Realistic Human Typing</h2>\r\n<p>Instead of writing messages as a single keystroke, messages may also be sent as a series of keystrokes. One of the extended keyboard functionality provided by PyDuino-MK is human typing emulation. This is available through the <code>type(string)</code> module. By default, the module will type at a rate of 80 wpm at 96% accuracy. If mistakes occur, the Arduino will pause for a brief moment and correct the mistake. Mistakes may be disabled for 100% accuracy if desired.</p>\r\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># 80 wpm with 85% accuracy</span>\r\narduino.type(<span class=\"hljs-string\">'https://github.com/nelsontran/PyDuino-MK/'</span>, accuracy=<span class=\"hljs-number\">85</span>)\r\n</code></pre>\r\n<p><img src=\"https://cloud.githubusercontent.com/assets/10904556/8180364/ffa5fd22-13d1-11e5-9b7b-0b76537b862f.gif\" alt=\"typing\"></p>\r\n<h3 id=\"optional-parameters\">Optional parameters</h3>\r\n<ul>\r\n<li><code>wpm</code> (int) - words per minute (assuming 5 characters per word) <strong>without</strong> taking mistakes into account.</li>\r\n<li><code>mistakes</code> (bool) - True/False value that determines whether to make mistakes or not.</li>\r\n<li><code>accuracy</code> (int) - Value between 1 and 100, representing a percentage, that determines typing accuracy.</li>\r\n</ul>\r\n<h1 id=\"notes\">Notes</h1>\r\n<p>Keep in mind that all of the Arduino modules are blocking until the Arduino device has completed the action. For example, calling <code>move(destination)</code> will cause the Python script to hang until the Arduino has finished moving the cursor to the destination. If you call <code>type()</code> with a long message and a slow WPM with low accuracy, expect to wait a while for the call to finish.</p>\r\n<h1 id=\"license\">License</h1>\r\n<p>PyDuino-MK is licensed under the MIT License (see <code>LICENSE</code> for details).</p>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nelsontran/PyDuino-MK", "keywords": "python arduino mouse keyboard", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PyDuino-MK", "package_url": "https://pypi.org/project/PyDuino-MK/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/PyDuino-MK/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/nelsontran/PyDuino-MK"}, "release_url": "https://pypi.org/project/PyDuino-MK/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "A simple Python API that interacts with Arduino devices for USB mouse and keyboard emulation.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            &lt;h1 id=\"pyduino-mk\"&gt;PyDuino-MK&lt;/h1&gt;\n<br>&lt;p&gt;A simple Python API that interacts (via serial communication) with Arduino devices for USB mouse and keyboard emulation. It is compatible with all Arduino devices (Leonardo, Micro, etc.) that support the Arduino Mouse/Keyboard libraries.&lt;/p&gt;\n<br>&lt;h1 id=\"features\"&gt;Features&lt;/h1&gt;\n<br>&lt;ul&gt;\n<br>&lt;li&gt;Simple Python 2.7 API&lt;/li&gt;\n<br>&lt;li&gt;Absolute Mouse Positioning&lt;/li&gt;\n<br>&lt;li&gt;Vanilla Arduino (w/o HID modifications)&lt;/li&gt;\n<br>&lt;li&gt;Extended mouse and keyboard functions&lt;/li&gt;\n<br>&lt;li&gt;Bezier curve mouse movement&lt;/li&gt;\n<br>&lt;li&gt;Human-like keyboard typing&lt;/li&gt;\n<br>&lt;/ul&gt;\n<br>&lt;h1 id=\"requirements\"&gt;Requirements&lt;/h1&gt;\n<br>&lt;ul&gt;\n<br>&lt;li&gt;&lt;a href=\"https://www.python.org/\"&gt;Python 2.7.x&lt;/a&gt; (does not currently work with Python 3.x)&lt;/li&gt;\n<br>&lt;li&gt;&lt;a href=\"http://pyserial.sourceforge.net/\"&gt;PySerial 2.7&lt;/a&gt;&lt;/li&gt;\n<br>&lt;li&gt;&lt;a href=\"http://www.arduino.cc/en/Main/Software\"&gt;Arduino IDE 1.6+&lt;/a&gt;&lt;/li&gt;\n<br>&lt;li&gt;A compatible Arduino device&lt;/li&gt;\n<br>&lt;/ul&gt;\n<br>&lt;h1 id=\"installation\"&gt;Installation&lt;/h1&gt;\n<br>&lt;p&gt;To install PyDuino-MK from the PyPI repository, run the following from a command line:&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code&gt;pip install pyduino_mk\n<br>&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To install PyDuino-MK locally from the source directory, &lt;code&gt;cd&lt;/code&gt; to the &lt;code&gt;python&lt;/code&gt; directory containing &lt;code&gt;setup.py&lt;/code&gt; and run:&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code&gt;python setup.py build install\n<br>&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=\"setup\"&gt;Setup&lt;/h1&gt;\n<br>&lt;ol&gt;\n<br>&lt;li&gt;Plug your Arduino device into a computer via USB.&lt;/li&gt;\n<br>&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; to the &lt;code&gt;arduino&lt;/code&gt; folder and open the &lt;code&gt;arduino.ino&lt;/code&gt; file in the Arduino IDE.&lt;/li&gt;\n<br>&lt;li&gt;Upload the sketch to the Arduino device.&lt;/li&gt;\n<br>&lt;/ol&gt;\n<br>&lt;p&gt;After the Arduino sketch has been uploaded, the Arduino device is now ready to accept serial messages from the Python API.&lt;/p&gt;\n<br>&lt;h1 id=\"usage\"&gt;Usage&lt;/h1&gt;\n<br>&lt;p&gt;To use PyDuino-MK, you must first import the Arduino-MK mouse/keyboard constants and the &lt;code&gt;Arduino&lt;/code&gt; class encapsulating the Arduino commands. The mouse/keyboard constants are used to designate mouse buttons (i.e. &lt;code&gt;MOUSE_LEFT&lt;/code&gt;, &lt;code&gt;MOUSE_RIGHT&lt;/code&gt;) and keyboard keys (i.e. &lt;code&gt;F1&lt;/code&gt;, &lt;code&gt;CTRL&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;).&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; arduino_mk.constants &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; *\n<br>&lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; arduino_mk &lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; Arduino\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;p&gt;Instantiating the &lt;code&gt;Arduino&lt;/code&gt; class is simple and easy.&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;arduino = Arduino()\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;p&gt;PyDuino-MK automatically detects and establishes a connection with the serial port that the Arduino device resides on. But if for any reason PyDuino-MK is unable to do so, a port can be explicitly provided as an optional parameter.&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;arduino = Arduino(port=&lt;span class=\"hljs-string\"&gt;'COM5'&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# Windows example&lt;/span&gt;\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;arduino = Arduino(port=&lt;span class=\"hljs-string\"&gt;'/dev/tty.usbmodemfa141'&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# OSX example&lt;/span&gt;\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;arduino = Arduino(port=&lt;span class=\"hljs-string\"&gt;'/dev/ttyS2'&lt;/span&gt;)  &lt;span class=\"hljs-comment\"&gt;# Linux example&lt;/span&gt;\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;h2 id=\"moving-the-mouse\"&gt;Moving the Mouse&lt;/h2&gt;\n<br>&lt;p&gt;PyDuino-MK provides a couple of modules for moving the mouse from one location to another. These modules take two arguments that represent a Cartesian coordinate. A coordinate system where the top-left of the screen represents the origin, &lt;code&gt;(0, 0)&lt;/code&gt;, such that pixel coordinates increase in the right and down directions is assumed.&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Calling this module will move the mouse from the current mouse position to &lt;/span&gt;\n<br>&lt;span class=\"hljs-comment\"&gt;# a specified mouse position in a linear motion.&lt;/span&gt;\n<br>arduino.move(&lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;)\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;p&gt;&lt;img src=\"https://cloud.githubusercontent.com/assets/10904556/8178406/a19b4b9c-13c2-11e5-847e-b364a73d7445.gif\" alt=\"besenham\"&gt;&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Calling this module will move the mouse from the current mouse position to &lt;/span&gt;\n<br>&lt;span class=\"hljs-comment\"&gt;# a specified mouse position in a cubic bezier motion. This module generates&lt;/span&gt;\n<br>&lt;span class=\"hljs-comment\"&gt;# two random control points every call to vary the mouse paths.&lt;/span&gt;\n<br>arduino.bezier_move(&lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;300&lt;/span&gt;)\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;p&gt;&lt;img src=\"https://cloud.githubusercontent.com/assets/10904556/8178416/b67bfdae-13c2-11e5-9a39-234df8d34675.gif\" alt=\"bezier\"&gt;&lt;/p&gt;\n<br>&lt;h2 id=\"clicking-the-mouse\"&gt;Clicking the Mouse&lt;/h2&gt;\n<br>&lt;p&gt;To click using the mouse, call the &lt;code&gt;click(button)&lt;/code&gt; module. This module holds down the designated button for a random interval between 50-100ms and then releases the button to resemble a human-like click motion.&lt;/p&gt;\n<br>&lt;p&gt;All of the click modules have the default parameter value, &lt;code&gt;MOUSE_LEFT&lt;/code&gt;.&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Left-click (2 ways)&lt;/span&gt;\n<br>arduino.click()\n<br>arduino.click(MOUSE_LEFT)\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Middle-click&lt;/span&gt;\n<br>arduino.click(MOUSE_MIDDLE)\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Right-click&lt;/span&gt;\n<br>arduino.click(MOUSE_RIGHT)\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;p&gt;To click without briefly holding the mouse button down, use the &lt;code&gt;fast_click(button)&lt;/code&gt; module.&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Auto-click very quickly&lt;/span&gt;\n<br>&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;True&lt;/span&gt;:\n<br>    arduino.fast_click(MOUSE_LEFT)\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;p&gt;Use the &lt;code&gt;press(button)&lt;/code&gt; and &lt;code&gt;release(button)&lt;/code&gt; modules to hold down a mouse button and release it on command.&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; time\n<br>\n<br>&lt;span class=\"hljs-comment\"&gt;# Hold the right mouse button for 5 seconds&lt;/span&gt;\n<br>arduino.press(MOUSE_RIGHT)\n<br>time.sleep(&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n<br>arduino.release(MOUSE_RIGHT)\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Drag the left mouse button to (500, 500)&lt;/span&gt;\n<br>arduino.press()\n<br>arduino.bezier_move(&lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;)\n<br>arduino.release()\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;h2 id=\"using-the-keyboard\"&gt;Using the Keyboard&lt;/h2&gt;\n<br>&lt;p&gt;To send a character or a string &lt;strong&gt;as a single keystroke&lt;/strong&gt;, use the &lt;code&gt;write(character)&lt;/code&gt; or &lt;code&gt;write(string)&lt;/code&gt; module.&lt;/p&gt;\n<br>&lt;p&gt;All keyboard modules will work &lt;strong&gt;only&lt;/strong&gt; with ASCII characters that correspond to a key on the keyboard. With the exception of backspace, passing the ASCII codes for non-printable characters as arguments will produce undefined results.&lt;/p&gt;\n<br>&lt;p&gt;However, modifier keys (such as Ctrl, Shift, Alt) may be passed as arguments. The modifier key constants are available and can be imported from &lt;code&gt;pyduino_mk.constants&lt;/code&gt;. The names of the constants are almost identical to the &lt;a href=\"http://www.arduino.cc/en/Reference/KeyboardModifiers\"&gt;Arduino keyboard modifiers&lt;/a&gt;. The only difference is that the constants omit the &lt;code&gt;KEY_&lt;/code&gt; prefix. &lt;code&gt;KEY_LEFT_CTRL&lt;/code&gt; becomes &lt;code&gt;LEFT_CTRL&lt;/code&gt;, &lt;code&gt;KEY_CAPS_LOCK&lt;/code&gt; becomes &lt;code&gt;CAPS_LOCK&lt;/code&gt;, and so on.&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Write the letter 'A' in two ways. A character or an integer ordinal &lt;/span&gt;\n<br>&lt;span class=\"hljs-comment\"&gt;# representing the character can be used as an argument.&lt;/span&gt;\n<br>arduino.write(&lt;span class=\"hljs-string\"&gt;'A'&lt;/span&gt;)\n<br>arduino.write(&lt;span class=\"hljs-number\"&gt;65&lt;/span&gt;)\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Write 'Hello world!' through the Arduino keyboard as a single keystroke.&lt;/span&gt;\n<br>arduino.write(&lt;span class=\"hljs-string\"&gt;'Hello world!'&lt;/span&gt;)\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;p&gt;Like the mouse, keyboard keys can also be held down and released. The &lt;code&gt;press(button)&lt;/code&gt; and &lt;code&gt;release(button)&lt;/code&gt; modules are overloaded for the keyboard. &lt;code&gt;releaseAll()&lt;/code&gt; can be used to release all keys that are held down.&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# Hit Ctrl+Alt+Delete&lt;/span&gt;\n<br>arduino.press(LEFT_CTRL)\n<br>arduino.press(LEFT_ALT)\n<br>arduino.press(DELETE)\n<br>arduino.releaseAll()\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;h2 id=\"realistic-human-typing\"&gt;Realistic Human Typing&lt;/h2&gt;\n<br>&lt;p&gt;Instead of writing messages as a single keystroke, messages may also be sent as a series of keystrokes. One of the extended keyboard functionality provided by PyDuino-MK is human typing emulation. This is available through the &lt;code&gt;type(string)&lt;/code&gt; module. By default, the module will type at a rate of 80 wpm at 96% accuracy. If mistakes occur, the Arduino will pause for a brief moment and correct the mistake. Mistakes may be disabled for 100% accuracy if desired.&lt;/p&gt;\n<br>&lt;pre&gt;&lt;code class=\"lang-python\"&gt;&lt;span class=\"hljs-comment\"&gt;# 80 wpm with 85% accuracy&lt;/span&gt;\n<br>arduino.type(&lt;span class=\"hljs-string\"&gt;'https://github.com/nelsontran/PyDuino-MK/'&lt;/span&gt;, accuracy=&lt;span class=\"hljs-number\"&gt;85&lt;/span&gt;)\n<br>&lt;/code&gt;&lt;/pre&gt;\n<br>&lt;p&gt;&lt;img src=\"https://cloud.githubusercontent.com/assets/10904556/8180364/ffa5fd22-13d1-11e5-9b7b-0b76537b862f.gif\" alt=\"typing\"&gt;&lt;/p&gt;\n<br>&lt;h3 id=\"optional-parameters\"&gt;Optional parameters&lt;/h3&gt;\n<br>&lt;ul&gt;\n<br>&lt;li&gt;&lt;code&gt;wpm&lt;/code&gt; (int) - words per minute (assuming 5 characters per word) &lt;strong&gt;without&lt;/strong&gt; taking mistakes into account.&lt;/li&gt;\n<br>&lt;li&gt;&lt;code&gt;mistakes&lt;/code&gt; (bool) - True/False value that determines whether to make mistakes or not.&lt;/li&gt;\n<br>&lt;li&gt;&lt;code&gt;accuracy&lt;/code&gt; (int) - Value between 1 and 100, representing a percentage, that determines typing accuracy.&lt;/li&gt;\n<br>&lt;/ul&gt;\n<br>&lt;h1 id=\"notes\"&gt;Notes&lt;/h1&gt;\n<br>&lt;p&gt;Keep in mind that all of the Arduino modules are blocking until the Arduino device has completed the action. For example, calling &lt;code&gt;move(destination)&lt;/code&gt; will cause the Python script to hang until the Arduino has finished moving the cursor to the destination. If you call &lt;code&gt;type()&lt;/code&gt; with a long message and a slow WPM with low accuracy, expect to wait a while for the call to finish.&lt;/p&gt;\n<br>&lt;h1 id=\"license\"&gt;License&lt;/h1&gt;\n<br>&lt;p&gt;PyDuino-MK is licensed under the MIT License (see &lt;code&gt;LICENSE&lt;/code&gt; for details).&lt;/p&gt;\n          </div>"}, "last_serial": 1600360, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9849713bba374558be95a6298f6e6a90", "sha256": "0a29941ef0db3f8f0384256eddbb54ae0eaa4f504df7712dcace37304b80fb5d"}, "downloads": -1, "filename": "pyduino_mk-0.0.1.zip", "has_sig": false, "md5_digest": "9849713bba374558be95a6298f6e6a90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7949, "upload_time": "2015-06-16T09:32:59", "upload_time_iso_8601": "2015-06-16T09:32:59.383160Z", "url": "https://files.pythonhosted.org/packages/4b/8d/207e9fdb08821dca9bfd5601af8077f36c453ff9e27204eed974f0786799/pyduino_mk-0.0.1.zip", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e43fb00b45b2860a8f253d305f7153c6", "sha256": "436dbbf8d7f0f9faf374e8f429437e68cee2d3d9a56954568f252456ae45972e"}, "downloads": -1, "filename": "pyduino_mk-0.0.2.zip", "has_sig": false, "md5_digest": "e43fb00b45b2860a8f253d305f7153c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7948, "upload_time": "2015-06-20T21:41:58", "upload_time_iso_8601": "2015-06-20T21:41:58.351414Z", "url": "https://files.pythonhosted.org/packages/c3/86/e6566a2e37f8faa3f2545f513a82efa8627b73c5b64ee29ff1a0cd7eee63/pyduino_mk-0.0.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e43fb00b45b2860a8f253d305f7153c6", "sha256": "436dbbf8d7f0f9faf374e8f429437e68cee2d3d9a56954568f252456ae45972e"}, "downloads": -1, "filename": "pyduino_mk-0.0.2.zip", "has_sig": false, "md5_digest": "e43fb00b45b2860a8f253d305f7153c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7948, "upload_time": "2015-06-20T21:41:58", "upload_time_iso_8601": "2015-06-20T21:41:58.351414Z", "url": "https://files.pythonhosted.org/packages/c3/86/e6566a2e37f8faa3f2545f513a82efa8627b73c5b64ee29ff1a0cd7eee63/pyduino_mk-0.0.2.zip", "yanked": false}], "timestamp": "Fri May  8 03:06:41 2020"}