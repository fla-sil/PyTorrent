{"info": {"author": "Dead Possum Labs (forked fromn Consensus)", "author_email": "info@consensys.net, d.soldatenko@dplabs.irish", "bugtrack_url": null, "classifiers": [], "description": "tl;dr\n==========\nThe original library from Consensus is quite useful, although it is obviously no longer supported. It's time to remove patches from Dockerfiles ^^\n\n\n\n\neth_rpc_api\n===========\n\nPython client for Ethereum using the JSON-RPC interface\n\n* complete: implements all 62 JSON-RPC methods plus several client-specific methods\n* provides a high-level interface to create contracts on the blockchain and to call contract methods\n\nImportant note\n--------------\n\nThe API is not yet stable, so please use caution when upgrading.\n\nInstallation\n------------\n\nYou may need additional libraries and tools before installing ethjsonrpc.\nIf you see something like that:\n\n.. code:: bash\n    scrypt-1.2.1/libcperciva/crypto/crypto_aes.c:6:10: fatal error: openssl/aes.h: \u041d\u0435\u0442 \u0442\u0430\u043a\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\n     #include <openssl/aes.h>\n              ^~~~~~~~~~~~~~~\n    compilation terminated.\n    error: command 'x86_64-linux-gnu-gcc' failed with exit status 1\n\n\nInstall libssl-dev packqage\n\n\n\nTo install  eth_rpc_api:\n\n.. code:: bash\n\n   $ pip3 install eth_rpc_api\n\n\nMake sure to have a node running an Ethereum client (such as geth) for the library to connect to.\n\nExample\n-------\n\n.. code:: python\n\n   >>> from eth_rpc_api import EthJsonRpc  # to use Parity-specific methods, import ParityEthJsonRpc\n      >>> c = EthJsonRpc('127.0.0.1', 8545)\n      >>> c.net_version()\n      u'1'\n      >>> c.web3_clientVersion()\n      u'Geth/v1.3.3/linux/go1.5.1'\n      >>> c.eth_gasPrice()\n      50000000000\n      >>> c.eth_blockNumber()\n      828948\n   >>> c = EthJsonRpc('127.0.0.1', 8545)\n   >>> c.net_version()\n   u'1'\n   >>> c.web3_clientVersion()\n   u'Geth/v1.3.3/linux/go1.5.1'\n   >>> c.eth_gasPrice()\n   50000000000\n   >>> c.eth_blockNumber()\n   828948\n\n\nHigh-level functionality\n------------------------\n\nThese examples assume the following simple Solidity contract:\n\n.. code::\n\n   contract Example {\n\n       string s;\n\n       function set_s(string new_s) {\n           s = new_s;\n       }\n\n       function get_s() returns (string) {\n           return s;\n       }\n   }\n\n\nCompile it like this:\n\n.. code:: bash\n\n   $ solc --binary stdout example.sol\n\n\nSetup\n`````\n\n.. code:: python\n\n   >>> compiled = '606060405261020f806100136000396000f30060606040526000357c01000000000000000000000000000000000000000000000000000000009004806375d74f3914610044578063e7aab290146100bd57610042565b005b61004f600450610191565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156100af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61010d6004803590602001906004018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050905061010f565b005b806000600050908051906020019082805482825590600052602060002090601f01602090048101928215610160579182015b8281111561015f578251826000505591602001919060010190610141565b5b50905061018b919061016d565b80821115610187576000818150600090555060010161016d565b5090565b50505b50565b60206040519081016040528060008152602001506000600050805480601f0160208091040260200160405190810160405280929190818152602001828054801561020057820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b5050505050905061020c565b9056'\n      >>> from eth_rpc_api import EthJsonRpc  # to use Parity-specific methods, import ParityEthJsonRpc\n      >>> c = EthJsonRpc('127.0.0.1', 8545)\n   >>> from ethjsonrpc import EthJsonRpc  # to use Parity-specific methods, import ParityEthJsonRpc\n   >>> c = EthJsonRpc('127.0.0.1', 8545)\n\n\nCreating a contract on the blockchain\n`````````````````````````````````````\n\n.. code:: python\n\n   >>> # continued from above\n   >>> contract_tx = c.create_contract(c.eth_coinbase(), compiled, gas=300000)\n   >>> # wait here for the contract to be created when a new block is mined\n   >>> contract_addr = c.get_contract_address(contract_tx)\n   >>> contract_addr\n   u'0x24988147f2f2300450103d8c42c43182cf226857'\n\n\nCalling a contract function with a transaction (storing data)\n`````````````````````````````````````````````````````````````\n\n.. code:: python\n\n   >>> # continued from above\n   >>> tx = c.call_with_transaction(c.eth_coinbase(), contract_addr, 'set_s(string)', ['Hello, world'])\n   >>> tx\n   u'0x15bde63d79466e3db5169a913bb2069130ca387033d2ff2e29f4dfbef1bc6e0d'\n\n\nCalling a contract function on the local blockchain (reading data)\n``````````````````````````````````````````````````````````````````\n\n.. code:: python\n\n   >>> # continued from above\n   >>> results = c.call(contract_addr, 'get_s()', [], ['string'])\n   >>> results\n   ['Hello, world']\n\n\nAdditional examples\n-------------------\n\nPlease see ``test.py`` for additional examples.\n\nImplemented JSON-RPC methods\n----------------------------\n\n* web3_clientVersion\n* web3_sha3\n* net_version\n* net_listening\n* net_peerCount\n* eth_protocolVersion\n* eth_syncing\n* eth_coinbase\n* eth_mining\n* eth_hashrate\n* eth_gasPrice\n* eth_accounts\n* eth_blockNumber\n* eth_getBalance\n* eth_getStorageAt\n* eth_getTransactionCount\n* eth_getBlockTransactionCountByHash\n* eth_getBlockTransactionCountByNumber\n* eth_getUncleCountByBlockHash\n* eth_getUncleCountByBlockNumber\n* eth_getCode\n* eth_sign\n* eth_sendTransaction\n* eth_sendRawTransaction\n* eth_call\n* eth_estimateGas\n* eth_getBlockByHash\n* eth_getBlockByNumber\n* eth_getTransactionByHash\n* eth_getTransactionByBlockHashAndIndex\n* eth_getTransactionByBlockNumberAndIndex\n* eth_getTransactionReceipt\n* eth_getUncleByBlockHashAndIndex\n* eth_getUncleByBlockNumberAndIndex\n* eth_getCompilers\n* eth_compileSolidity\n* eth_compileLLL\n* eth_compileSerpent\n* eth_newFilter\n* eth_newBlockFilter\n* eth_newPendingTransactionFilter\n* eth_uninstallFilter\n* eth_getFilterChanges\n* eth_getFilterLogs\n* eth_getLogs\n* eth_getWork\n* eth_submitWork\n* eth_submitHashrate\n* db_putString\n* db_getString\n* db_putHex\n* db_getHex\n* shh_version\n* shh_post\n* shh_newIdentity\n* shh_hasIdentity\n* shh_newGroup\n* shh_addToGroup\n* shh_newFilter\n* shh_uninstallFilter\n* shh_getFilterChanges\n* shh_getMessages\n\nParity-only JSON-RPC methods\n----------------------------\n\nTo use these methods, make sure that you're\n\n* running Parity as your client\n* running with the ``--tracing on`` option\n* using this library's ``ParityEthJsonRpc`` client (not the vanilla ``EthJsonRpc`` client)\n\nMethods:\n\n* trace_filter\n* trace_get\n* trace_transaction\n* trace_block\n\nReference\n---------\n\n* https://github.com/ethereum/wiki/wiki/JSON-RPC\n* https://github.com/ethcore/parity/wiki/JSONRPC-trace-module", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sl4mmer/eth_rpc_api", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "eth-rpc-api", "package_url": "https://pypi.org/project/eth-rpc-api/", "platform": "", "project_url": "https://pypi.org/project/eth-rpc-api/", "project_urls": {"Homepage": "https://github.com/sl4mmer/eth_rpc_api"}, "release_url": "https://pypi.org/project/eth-rpc-api/0.3.10/", "requires_dist": null, "requires_python": "", "summary": "Ethereum JSON-RPC client", "version": "0.3.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            tl;dr<br>==========<br>The original library from Consensus is quite useful, although it is obviously no longer supported. It's time to remove patches from Dockerfiles ^^<br><br><br><br><br>eth_rpc_api<br>===========<br><br>Python client for Ethereum using the JSON-RPC interface<br><br>* complete: implements all 62 JSON-RPC methods plus several client-specific methods<br>* provides a high-level interface to create contracts on the blockchain and to call contract methods<br><br>Important note<br>--------------<br><br>The API is not yet stable, so please use caution when upgrading.<br><br>Installation<br>------------<br><br>You may need additional libraries and tools before installing ethjsonrpc.<br>If you see something like that:<br><br>.. code:: bash<br>    scrypt-1.2.1/libcperciva/crypto/crypto_aes.c:6:10: fatal error: openssl/aes.h: \u041d\u0435\u0442 \u0442\u0430\u043a\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430<br>     #include &lt;openssl/aes.h&gt;<br>              ^~~~~~~~~~~~~~~<br>    compilation terminated.<br>    error: command 'x86_64-linux-gnu-gcc' failed with exit status 1<br><br><br>Install libssl-dev packqage<br><br><br><br>To install  eth_rpc_api:<br><br>.. code:: bash<br><br>   $ pip3 install eth_rpc_api<br><br><br>Make sure to have a node running an Ethereum client (such as geth) for the library to connect to.<br><br>Example<br>-------<br><br>.. code:: python<br><br>   &gt;&gt;&gt; from eth_rpc_api import EthJsonRpc  # to use Parity-specific methods, import ParityEthJsonRpc<br>      &gt;&gt;&gt; c = EthJsonRpc('127.0.0.1', 8545)<br>      &gt;&gt;&gt; c.net_version()<br>      u'1'<br>      &gt;&gt;&gt; c.web3_clientVersion()<br>      u'Geth/v1.3.3/linux/go1.5.1'<br>      &gt;&gt;&gt; c.eth_gasPrice()<br>      50000000000<br>      &gt;&gt;&gt; c.eth_blockNumber()<br>      828948<br>   &gt;&gt;&gt; c = EthJsonRpc('127.0.0.1', 8545)<br>   &gt;&gt;&gt; c.net_version()<br>   u'1'<br>   &gt;&gt;&gt; c.web3_clientVersion()<br>   u'Geth/v1.3.3/linux/go1.5.1'<br>   &gt;&gt;&gt; c.eth_gasPrice()<br>   50000000000<br>   &gt;&gt;&gt; c.eth_blockNumber()<br>   828948<br><br><br>High-level functionality<br>------------------------<br><br>These examples assume the following simple Solidity contract:<br><br>.. code::<br><br>   contract Example {<br><br>       string s;<br><br>       function set_s(string new_s) {<br>           s = new_s;<br>       }<br><br>       function get_s() returns (string) {<br>           return s;<br>       }<br>   }<br><br><br>Compile it like this:<br><br>.. code:: bash<br><br>   $ solc --binary stdout example.sol<br><br><br>Setup<br>`````<br><br>.. code:: python<br><br>   &gt;&gt;&gt; compiled = '606060405261020f806100136000396000f30060606040526000357c01000000000000000000000000000000000000000000000000000000009004806375d74f3914610044578063e7aab290146100bd57610042565b005b61004f600450610191565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156100af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61010d6004803590602001906004018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050905061010f565b005b806000600050908051906020019082805482825590600052602060002090601f01602090048101928215610160579182015b8281111561015f578251826000505591602001919060010190610141565b5b50905061018b919061016d565b80821115610187576000818150600090555060010161016d565b5090565b50505b50565b60206040519081016040528060008152602001506000600050805480601f0160208091040260200160405190810160405280929190818152602001828054801561020057820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b5050505050905061020c565b9056'<br>      &gt;&gt;&gt; from eth_rpc_api import EthJsonRpc  # to use Parity-specific methods, import ParityEthJsonRpc<br>      &gt;&gt;&gt; c = EthJsonRpc('127.0.0.1', 8545)<br>   &gt;&gt;&gt; from ethjsonrpc import EthJsonRpc  # to use Parity-specific methods, import ParityEthJsonRpc<br>   &gt;&gt;&gt; c = EthJsonRpc('127.0.0.1', 8545)<br><br><br>Creating a contract on the blockchain<br>`````````````````````````````````````<br><br>.. code:: python<br><br>   &gt;&gt;&gt; # continued from above<br>   &gt;&gt;&gt; contract_tx = c.create_contract(c.eth_coinbase(), compiled, gas=300000)<br>   &gt;&gt;&gt; # wait here for the contract to be created when a new block is mined<br>   &gt;&gt;&gt; contract_addr = c.get_contract_address(contract_tx)<br>   &gt;&gt;&gt; contract_addr<br>   u'0x24988147f2f2300450103d8c42c43182cf226857'<br><br><br>Calling a contract function with a transaction (storing data)<br>`````````````````````````````````````````````````````````````<br><br>.. code:: python<br><br>   &gt;&gt;&gt; # continued from above<br>   &gt;&gt;&gt; tx = c.call_with_transaction(c.eth_coinbase(), contract_addr, 'set_s(string)', ['Hello, world'])<br>   &gt;&gt;&gt; tx<br>   u'0x15bde63d79466e3db5169a913bb2069130ca387033d2ff2e29f4dfbef1bc6e0d'<br><br><br>Calling a contract function on the local blockchain (reading data)<br>``````````````````````````````````````````````````````````````````<br><br>.. code:: python<br><br>   &gt;&gt;&gt; # continued from above<br>   &gt;&gt;&gt; results = c.call(contract_addr, 'get_s()', [], ['string'])<br>   &gt;&gt;&gt; results<br>   ['Hello, world']<br><br><br>Additional examples<br>-------------------<br><br>Please see ``test.py`` for additional examples.<br><br>Implemented JSON-RPC methods<br>----------------------------<br><br>* web3_clientVersion<br>* web3_sha3<br>* net_version<br>* net_listening<br>* net_peerCount<br>* eth_protocolVersion<br>* eth_syncing<br>* eth_coinbase<br>* eth_mining<br>* eth_hashrate<br>* eth_gasPrice<br>* eth_accounts<br>* eth_blockNumber<br>* eth_getBalance<br>* eth_getStorageAt<br>* eth_getTransactionCount<br>* eth_getBlockTransactionCountByHash<br>* eth_getBlockTransactionCountByNumber<br>* eth_getUncleCountByBlockHash<br>* eth_getUncleCountByBlockNumber<br>* eth_getCode<br>* eth_sign<br>* eth_sendTransaction<br>* eth_sendRawTransaction<br>* eth_call<br>* eth_estimateGas<br>* eth_getBlockByHash<br>* eth_getBlockByNumber<br>* eth_getTransactionByHash<br>* eth_getTransactionByBlockHashAndIndex<br>* eth_getTransactionByBlockNumberAndIndex<br>* eth_getTransactionReceipt<br>* eth_getUncleByBlockHashAndIndex<br>* eth_getUncleByBlockNumberAndIndex<br>* eth_getCompilers<br>* eth_compileSolidity<br>* eth_compileLLL<br>* eth_compileSerpent<br>* eth_newFilter<br>* eth_newBlockFilter<br>* eth_newPendingTransactionFilter<br>* eth_uninstallFilter<br>* eth_getFilterChanges<br>* eth_getFilterLogs<br>* eth_getLogs<br>* eth_getWork<br>* eth_submitWork<br>* eth_submitHashrate<br>* db_putString<br>* db_getString<br>* db_putHex<br>* db_getHex<br>* shh_version<br>* shh_post<br>* shh_newIdentity<br>* shh_hasIdentity<br>* shh_newGroup<br>* shh_addToGroup<br>* shh_newFilter<br>* shh_uninstallFilter<br>* shh_getFilterChanges<br>* shh_getMessages<br><br>Parity-only JSON-RPC methods<br>----------------------------<br><br>To use these methods, make sure that you're<br><br>* running Parity as your client<br>* running with the ``--tracing on`` option<br>* using this library's ``ParityEthJsonRpc`` client (not the vanilla ``EthJsonRpc`` client)<br><br>Methods:<br><br>* trace_filter<br>* trace_get<br>* trace_transaction<br>* trace_block<br><br>Reference<br>---------<br><br>* https://github.com/ethereum/wiki/wiki/JSON-RPC<br>* https://github.com/ethcore/parity/wiki/JSONRPC-trace-module\n          </div>"}, "last_serial": 4330653, "releases": {"0.3.10": [{"comment_text": "", "digests": {"md5": "74013032d078862cc4a2448c9fe496d5", "sha256": "358790ab519cf93573e167ecc4ed4101ddae02bab3b4ec62b96a9d005885948a"}, "downloads": -1, "filename": "eth_rpc_api-0.3.10.tar.gz", "has_sig": false, "md5_digest": "74013032d078862cc4a2448c9fe496d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9849, "upload_time": "2018-10-01T23:14:56", "upload_time_iso_8601": "2018-10-01T23:14:56.045410Z", "url": "https://files.pythonhosted.org/packages/68/f1/e90c59d96a5050cb0764b1602b42d34df0eeaddf9f347ae5faf4fabed8bd/eth_rpc_api-0.3.10.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "74013032d078862cc4a2448c9fe496d5", "sha256": "358790ab519cf93573e167ecc4ed4101ddae02bab3b4ec62b96a9d005885948a"}, "downloads": -1, "filename": "eth_rpc_api-0.3.10.tar.gz", "has_sig": false, "md5_digest": "74013032d078862cc4a2448c9fe496d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9849, "upload_time": "2018-10-01T23:14:56", "upload_time_iso_8601": "2018-10-01T23:14:56.045410Z", "url": "https://files.pythonhosted.org/packages/68/f1/e90c59d96a5050cb0764b1602b42d34df0eeaddf9f347ae5faf4fabed8bd/eth_rpc_api-0.3.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:26 2020"}