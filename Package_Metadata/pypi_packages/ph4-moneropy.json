{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Topic :: Utilities"], "description": "# MoneroPy - A python toolbox for Monero.\n\nCopyright (c) 2016 The MoneroPy Developers.  \nAll rights reserved.\n\nReleased under the BSD 3-Clause License. See [LICENSE](LICENSE).\n\n## About\n\nThis Python 2/3 package aims to be a resource for Monero actions. The package\nimplements basic Monero cryptography, mnemonic key derivation, and key and\naddress creation.\n\nFuture additions and improvements include developing routines for checking if\ntransaction outputs belong to a Monero address, if outputs have been spent, and\ncreating and signing outputs. As this is a being developed under a best-effort\nmodel, there is not a set timeline for the completion of these or other tasks.\nIf you would like to see progress made in a certain area, feel free to\ncontribute.\n\nCurrently, this package is a pure Python implementation of Monero tools and\nprotocol. Future improvements may include using the Monero reference C and C++\nlibraries for some or all cryptography and other functions.\n\n## Installation\n\nMoneroPy will be added to Python's pip once development has somewhat stabilized.\n\nIn the meantime, MoneroPy can be installed by downloading this package and then\nrunning setup.py as follows:\n\n    python setup.py install\n\n## Example\n\nEach module in MoneroPy can be imported and used separately. For example, to\ncreate spend and view keys and derive a wallet address from a mnemonic seed,\n\n    import moneropy.account\n\n    seed = [\"vixen\", \"eavesdrop\", \"fuming\", \"aching\", \"react\", \"waffle\",\n        \"nowhere\", \"water\", \"upon\", \"scoop\", \"aztec\", \"sunken\", \"diplomat\",\n        \"salads\", \"rift\", \"inkling\", \"null\", \"testing\", \"sixteen\", \"return\",\n        \"kitchens\", \"narrate\", \"moisture\", \"nucleus\", \"testing\"]\n\n    spendkey, viewkey, address = moneropy.account.account_from_seed(seed)\n\nFull documentation is under development and will be available soon.\n\n## Unit Testing\n\nUnit tests are available under `tests` using data from Monero software. To run\ntests, navigate to the `tests` directory and execute. For example,\n\n    python test_mnemonic.py\n\nTests should pass on both Python 2.x and Python 3.x. Please run tests (and write\nnew tests where appropriate) when submitting pull requests.\n\nData for testing is stored in `tests/testdata.py`.\n\n## Disclaimer\n\nThis package uses Daniel J. Bernstein's reference ed25519 Python implementation, adapted\nfor Python 3 compatibility. In addition, it uses Renaud Bauvin's reference\nKeccak sponge function implementation (v3.2). Both are available in the public\ndomain, and both are written in pure Python. Therefore, key and address\nderivation using MoneroPy should be considered vulnerable to side-channel\nattacks, and should not be used on shared hardware to prevent, for example,\npotential timing attacks.\n\nMoneroPy uses `os.urandom` to generate a secure mnemonic seed for new wallet\ncreation. Do not use on systems with poor `os.urandom` entropy sources.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/monero-monitor/moneropy", "keywords": "monero", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "ph4-moneropy", "package_url": "https://pypi.org/project/ph4-moneropy/", "platform": "", "project_url": "https://pypi.org/project/ph4-moneropy/", "project_urls": {"Homepage": "https://github.com/monero-monitor/moneropy"}, "release_url": "https://pypi.org/project/ph4-moneropy/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "A python toolbox for Monero.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># MoneroPy - A python toolbox for Monero.</p>\n<p>Copyright (c) 2016 The MoneroPy Developers.\nAll rights reserved.</p>\n<p>Released under the BSD 3-Clause License. See [LICENSE](LICENSE).</p>\n<p>## About</p>\n<p>This Python 2/3 package aims to be a resource for Monero actions. The package\nimplements basic Monero cryptography, mnemonic key derivation, and key and\naddress creation.</p>\n<p>Future additions and improvements include developing routines for checking if\ntransaction outputs belong to a Monero address, if outputs have been spent, and\ncreating and signing outputs. As this is a being developed under a best-effort\nmodel, there is not a set timeline for the completion of these or other tasks.\nIf you would like to see progress made in a certain area, feel free to\ncontribute.</p>\n<p>Currently, this package is a pure Python implementation of Monero tools and\nprotocol. Future improvements may include using the Monero reference C and C++\nlibraries for some or all cryptography and other functions.</p>\n<p>## Installation</p>\n<p>MoneroPy will be added to Python\u2019s pip once development has somewhat stabilized.</p>\n<p>In the meantime, MoneroPy can be installed by downloading this package and then\nrunning setup.py as follows:</p>\n<blockquote>\npython setup.py install</blockquote>\n<p>## Example</p>\n<p>Each module in MoneroPy can be imported and used separately. For example, to\ncreate spend and view keys and derive a wallet address from a mnemonic seed,</p>\n<blockquote>\n<p>import moneropy.account</p>\n<dl>\n<dt>seed = [\u201cvixen\u201d, \u201ceavesdrop\u201d, \u201cfuming\u201d, \u201caching\u201d, \u201creact\u201d, \u201cwaffle\u201d,</dt>\n<dd>\u201cnowhere\u201d, \u201cwater\u201d, \u201cupon\u201d, \u201cscoop\u201d, \u201caztec\u201d, \u201csunken\u201d, \u201cdiplomat\u201d,\n\u201csalads\u201d, \u201crift\u201d, \u201cinkling\u201d, \u201cnull\u201d, \u201ctesting\u201d, \u201csixteen\u201d, \u201creturn\u201d,\n\u201ckitchens\u201d, \u201cnarrate\u201d, \u201cmoisture\u201d, \u201cnucleus\u201d, \u201ctesting\u201d]</dd>\n</dl>\n<p>spendkey, viewkey, address = moneropy.account.account_from_seed(seed)</p>\n</blockquote>\n<p>Full documentation is under development and will be available soon.</p>\n<p>## Unit Testing</p>\n<p>Unit tests are available under <cite>tests</cite> using data from Monero software. To run\ntests, navigate to the <cite>tests</cite> directory and execute. For example,</p>\n<blockquote>\npython test_mnemonic.py</blockquote>\n<p>Tests should pass on both Python 2.x and Python 3.x. Please run tests (and write\nnew tests where appropriate) when submitting pull requests.</p>\n<p>Data for testing is stored in <cite>tests/testdata.py</cite>.</p>\n<p>## Disclaimer</p>\n<p>This package uses Daniel J. Bernstein\u2019s reference ed25519 Python implementation, adapted\nfor Python 3 compatibility. In addition, it uses Renaud Bauvin\u2019s reference\nKeccak sponge function implementation (v3.2). Both are available in the public\ndomain, and both are written in pure Python. Therefore, key and address\nderivation using MoneroPy should be considered vulnerable to side-channel\nattacks, and should not be used on shared hardware to prevent, for example,\npotential timing attacks.</p>\n<p>MoneroPy uses <cite>os.urandom</cite> to generate a secure mnemonic seed for new wallet\ncreation. Do not use on systems with poor <cite>os.urandom</cite> entropy sources.</p>\n\n          </div>"}, "last_serial": 3562064, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b27323de870363aee7c97ecb1398bab9", "sha256": "c1a51019c379e9ca3aa11c4f6bc3d3ce0f3dce388590043d9d6000a124180e95"}, "downloads": -1, "filename": "ph4_moneropy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b27323de870363aee7c97ecb1398bab9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28829, "upload_time": "2018-02-07T23:01:05", "upload_time_iso_8601": "2018-02-07T23:01:05.220787Z", "url": "https://files.pythonhosted.org/packages/f6/2d/ceb2916565387cc9128493284811133023ac73e206b52ebd440c932370ca/ph4_moneropy-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "f0c2ca2c963dbf693b08c4e836312f98", "sha256": "09549fdc3ba44e33ae8a71c2733b24e61944a4c7a2f3fa9448430b2a87c82df8"}, "downloads": -1, "filename": "ph4_moneropy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f0c2ca2c963dbf693b08c4e836312f98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28884, "upload_time": "2018-02-07T23:05:17", "upload_time_iso_8601": "2018-02-07T23:05:17.681846Z", "url": "https://files.pythonhosted.org/packages/0c/0b/828c77948051bc9d0391b90193a19c4a373ea309fa50b3f9c7b840a406cd/ph4_moneropy-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "36cdc0b14bc62dba43a9a85df0c6c89f", "sha256": "c618c4d96117c1f578d068b459f8a40811041b5bea14ac20b42e9b985d2a1e38"}, "downloads": -1, "filename": "ph4_moneropy-0.0.3.tar.gz", "has_sig": false, "md5_digest": "36cdc0b14bc62dba43a9a85df0c6c89f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28867, "upload_time": "2018-02-07T23:10:42", "upload_time_iso_8601": "2018-02-07T23:10:42.970071Z", "url": "https://files.pythonhosted.org/packages/43/17/16a89daa087d34e2990a524ea73b613709b02c2f3d8a5e43e80bcce0b93a/ph4_moneropy-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36cdc0b14bc62dba43a9a85df0c6c89f", "sha256": "c618c4d96117c1f578d068b459f8a40811041b5bea14ac20b42e9b985d2a1e38"}, "downloads": -1, "filename": "ph4_moneropy-0.0.3.tar.gz", "has_sig": false, "md5_digest": "36cdc0b14bc62dba43a9a85df0c6c89f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28867, "upload_time": "2018-02-07T23:10:42", "upload_time_iso_8601": "2018-02-07T23:10:42.970071Z", "url": "https://files.pythonhosted.org/packages/43/17/16a89daa087d34e2990a524ea73b613709b02c2f3d8a5e43e80bcce0b93a/ph4_moneropy-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:39 2020"}