{"info": {"author": "Gareth Jones", "author_email": "", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# AudioDAG\n\n![CI](https://github.com/garethjns/AudioDAG/workflows/CI/badge.svg?branch=master)\n\nConstruct digital audio signals from individual components, designed for psychophysics stimulus generations. Supports lazy construction or in-memory caching,\n\n# Install\n````bash\npip install audiodag\n````\n# Usage\n\n## Signal components\n\nThe audio_dag.signal.component.Component class is designed to handle a function describing ones aspect of a digital signaly. It handles specification of signal properties such as magnitude, duration, and hardware properties such as sampling rate, clipping, and enveloping, etc.\n\nIndividual signal component are defined by inheriting from the base component class. The child should define the ._generate_f method and and handle any additional parameters. For example, to create a sine wave:\n\n````python\nimport numpy as np\n\nfrom audiodag.signal.components.component import Component\n\nclass SineComponent(Component):\n    \"\"\"Class specifically for tonal components.\"\"\"\n    def __init__(self,\n                 freq: int = 2000,\n                 *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.freq = freq\n\n    def _generate_f(self) -> np.ndarray:\n        \"\"\"Generate vector for components\"\"\"\n        return np.sin(np.linspace(0, 4 * np.pi * self.freq, self.duration_pts)) * 0.5 * self.mag\n\nsin = SineComponent(freq=12, mag=1, start=100, fs=5000, duration=1000)\nsin.plot(show=True)\n````\n![example_sine](https://github.com/garethjns/AudioDAG/blob/master/images/example_sine.PNG) \n\nThe generation function is called when Component.y is accessed, and can be optionally cached with cache=True, or generated on the fly on each call. The envelope is applied immediately after signal generation (default = constant).\n\nSome predefined tonal and noise signals are defined in audio_dag.signal.components.noise and .tonal.\n\n## Compound signal components\n\nCompound components handle combining components (and/or other compound components). The CompoundComponent class automatically creates a generation function that combines the generation functions of the supplied components. Similar to the individual events, this is only evaluated when the top objects .y is called (with optional caching). Meaning a whole DAG (or tree) of components can be combined before allocating any time or memory.\n\nIn simple cases, these can be constructed by multiplying components together. For example, to add noise to a sine wave:\n\n\n### Simple - mul\n````python\nfrom audiodag.signal.digital.conversion import db_to_lin\nfrom audiodag.signal.components.tonal import SineComponent\nfrom audiodag.signal.components.noise import NoiseComponent\n\nsin = SineComponent(freq=12, mag=1, fs=5000, duration=1000)\nnoise = NoiseComponent(fs=5000, duration=1000, mag=db_to_lin(ref=1, db_change=-80))\n\ncompound_component = sin * noise\ncompound_component.plot_subplots(show=True)\n````\n![example_mul](https://github.com/garethjns/AudioDAG/blob/master/images/example_mul.PNG) \n\n### Simple - from list\nIn more complex cases, for example where unequal weighting or a new envelope is required, components can be specified in a list.\n\n````python\nfrom audiodag.signal.digital.conversion import db_to_lin\nfrom audiodag.signal.components.tonal import SineComponent\nfrom audiodag.signal.components.noise import NoiseComponent\nfrom audiodag.signal.components.component import CompoundComponent\nfrom audiodag.signal.envelopes.templates import CosEnvelope\n\nsin = SineComponent(freq=12, mag=1, start=100, fs=5000, duration=1000)\nnoise = NoiseComponent(fs=5000, duration=1000, mag=db_to_lin(ref=1, db_change=-80))\n\ncompound_component  = CompoundComponent([sin, noise],\n                                        envelope=CosEnvelope)\ncompound_component.plot_subplots(show=True)\n````\n![example_simple](https://github.com/garethjns/AudioDAG/blob/master/images/example_simple.PNG) \n\n## Complex\n````Python\nfrom audiodag.signal.digital.conversion import db_to_lin\nfrom audiodag.signal.envelopes.templates import IncreasingEnvelope\nfrom audiodag.signal.components.component import CompoundComponent\nfrom audiodag.signal.components.noise import NoiseComponent\nfrom audiodag.signal.components.tonal import SineComponent\n\nstart = 0\nsine_4 = SineComponent(start=start, duration=1400, freq=4)\n\nstart = 200\nduration = 600\nsine_2_6 = CompoundComponent([SineComponent(start=start, duration=duration, freq=2),\n                              SineComponent(start=start, duration=duration, freq=6)])\n\nstart = 600\nduration = 1000\nsine_2_12 = CompoundComponent([SineComponent(start=start, duration=duration, freq=2),\n                               SineComponent(start=start, duration=duration, freq=12)])\nsine_8_10 = CompoundComponent([SineComponent(start=start, duration=duration, freq=8),\n                               SineComponent(start=start, duration=duration, freq=10),\n                               sine_2_12])\n\nnoise = NoiseComponent(start=0, duration=1000, envelope=IncreasingEnvelope,\n                       mag=db_to_lin(ref=1, db_change=-120))\n\nsignal = CompoundComponent([sine_4, sine_2_6, sine_8_10, noise])\n````\n![example_complex](https://github.com/garethjns/AudioDAG/blob/master/images/example_complex.png) \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/garethjns/AudioDAG", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "AudioDAG", "package_url": "https://pypi.org/project/AudioDAG/", "platform": "", "project_url": "https://pypi.org/project/AudioDAG/", "project_urls": {"Homepage": "https://github.com/garethjns/AudioDAG"}, "release_url": "https://pypi.org/project/AudioDAG/0.0.16/", "requires_dist": ["numpy", "seaborn", "pytest"], "requires_python": ">=3.6", "summary": "", "version": "0.0.16", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AudioDAG</h1>\n<p><img alt=\"CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/507410846b06f7a7168848e3c848e8ce528ea904/68747470733a2f2f6769746875622e636f6d2f6761726574686a6e732f417564696f4441472f776f726b666c6f77732f43492f62616467652e7376673f6272616e63683d6d6173746572\"></p>\n<p>Construct digital audio signals from individual components, designed for psychophysics stimulus generations. Supports lazy construction or in-memory caching,</p>\n<h1>Install</h1>\n<pre>pip install audiodag\n</pre>\n<h1>Usage</h1>\n<h2>Signal components</h2>\n<p>The audio_dag.signal.component.Component class is designed to handle a function describing ones aspect of a digital signaly. It handles specification of signal properties such as magnitude, duration, and hardware properties such as sampling rate, clipping, and enveloping, etc.</p>\n<p>Individual signal component are defined by inheriting from the base component class. The child should define the ._generate_f method and and handle any additional parameters. For example, to create a sine wave:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.components.component</span> <span class=\"kn\">import</span> <span class=\"n\">Component</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Class specifically for tonal components.\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n                 <span class=\"n\">freq</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span><span class=\"p\">,</span>\n                 <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"n\">freq</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_generate_f</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Generate vector for components\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">duration_pts</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mag</span>\n\n<span class=\"n\">sin</span> <span class=\"o\">=</span> <span class=\"n\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">mag</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">sin</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"example_sine\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fcc0e1747bc264cde87a307f28e956838cb70cab/68747470733a2f2f6769746875622e636f6d2f6761726574686a6e732f417564696f4441472f626c6f622f6d61737465722f696d616765732f6578616d706c655f73696e652e504e47\"></p>\n<p>The generation function is called when Component.y is accessed, and can be optionally cached with cache=True, or generated on the fly on each call. The envelope is applied immediately after signal generation (default = constant).</p>\n<p>Some predefined tonal and noise signals are defined in audio_dag.signal.components.noise and .tonal.</p>\n<h2>Compound signal components</h2>\n<p>Compound components handle combining components (and/or other compound components). The CompoundComponent class automatically creates a generation function that combines the generation functions of the supplied components. Similar to the individual events, this is only evaluated when the top objects .y is called (with optional caching). Meaning a whole DAG (or tree) of components can be combined before allocating any time or memory.</p>\n<p>In simple cases, these can be constructed by multiplying components together. For example, to add noise to a sine wave:</p>\n<h3>Simple - mul</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.digital.conversion</span> <span class=\"kn\">import</span> <span class=\"n\">db_to_lin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.components.tonal</span> <span class=\"kn\">import</span> <span class=\"n\">SineComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.components.noise</span> <span class=\"kn\">import</span> <span class=\"n\">NoiseComponent</span>\n\n<span class=\"n\">sin</span> <span class=\"o\">=</span> <span class=\"n\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">mag</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">noise</span> <span class=\"o\">=</span> <span class=\"n\">NoiseComponent</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">mag</span><span class=\"o\">=</span><span class=\"n\">db_to_lin</span><span class=\"p\">(</span><span class=\"n\">ref</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">db_change</span><span class=\"o\">=-</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"n\">compound_component</span> <span class=\"o\">=</span> <span class=\"n\">sin</span> <span class=\"o\">*</span> <span class=\"n\">noise</span>\n<span class=\"n\">compound_component</span><span class=\"o\">.</span><span class=\"n\">plot_subplots</span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"example_mul\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b3d6149a8e848502c7ac169bdc441d82102db49/68747470733a2f2f6769746875622e636f6d2f6761726574686a6e732f417564696f4441472f626c6f622f6d61737465722f696d616765732f6578616d706c655f6d756c2e504e47\"></p>\n<h3>Simple - from list</h3>\n<p>In more complex cases, for example where unequal weighting or a new envelope is required, components can be specified in a list.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.digital.conversion</span> <span class=\"kn\">import</span> <span class=\"n\">db_to_lin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.components.tonal</span> <span class=\"kn\">import</span> <span class=\"n\">SineComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.components.noise</span> <span class=\"kn\">import</span> <span class=\"n\">NoiseComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.components.component</span> <span class=\"kn\">import</span> <span class=\"n\">CompoundComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.envelopes.templates</span> <span class=\"kn\">import</span> <span class=\"n\">CosEnvelope</span>\n\n<span class=\"n\">sin</span> <span class=\"o\">=</span> <span class=\"n\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">mag</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">noise</span> <span class=\"o\">=</span> <span class=\"n\">NoiseComponent</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">mag</span><span class=\"o\">=</span><span class=\"n\">db_to_lin</span><span class=\"p\">(</span><span class=\"n\">ref</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">db_change</span><span class=\"o\">=-</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"n\">compound_component</span>  <span class=\"o\">=</span> <span class=\"n\">CompoundComponent</span><span class=\"p\">([</span><span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"p\">],</span>\n                                        <span class=\"n\">envelope</span><span class=\"o\">=</span><span class=\"n\">CosEnvelope</span><span class=\"p\">)</span>\n<span class=\"n\">compound_component</span><span class=\"o\">.</span><span class=\"n\">plot_subplots</span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"example_simple\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/423f31347e843b3b3dfbca3ed5bb5eb083219bc8/68747470733a2f2f6769746875622e636f6d2f6761726574686a6e732f417564696f4441472f626c6f622f6d61737465722f696d616765732f6578616d706c655f73696d706c652e504e47\"></p>\n<h2>Complex</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.digital.conversion</span> <span class=\"kn\">import</span> <span class=\"n\">db_to_lin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.envelopes.templates</span> <span class=\"kn\">import</span> <span class=\"n\">IncreasingEnvelope</span>\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.components.component</span> <span class=\"kn\">import</span> <span class=\"n\">CompoundComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.components.noise</span> <span class=\"kn\">import</span> <span class=\"n\">NoiseComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">audiodag.signal.components.tonal</span> <span class=\"kn\">import</span> <span class=\"n\">SineComponent</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">sine_4</span> <span class=\"o\">=</span> <span class=\"n\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">1400</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>\n<span class=\"n\">sine_2_6</span> <span class=\"o\">=</span> <span class=\"n\">CompoundComponent</span><span class=\"p\">([</span><span class=\"n\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n                              <span class=\"n\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)])</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>\n<span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">sine_2_12</span> <span class=\"o\">=</span> <span class=\"n\">CompoundComponent</span><span class=\"p\">([</span><span class=\"n\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n                               <span class=\"n\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)])</span>\n<span class=\"n\">sine_8_10</span> <span class=\"o\">=</span> <span class=\"n\">CompoundComponent</span><span class=\"p\">([</span><span class=\"n\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">),</span>\n                               <span class=\"n\">SineComponent</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n                               <span class=\"n\">sine_2_12</span><span class=\"p\">])</span>\n\n<span class=\"n\">noise</span> <span class=\"o\">=</span> <span class=\"n\">NoiseComponent</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">envelope</span><span class=\"o\">=</span><span class=\"n\">IncreasingEnvelope</span><span class=\"p\">,</span>\n                       <span class=\"n\">mag</span><span class=\"o\">=</span><span class=\"n\">db_to_lin</span><span class=\"p\">(</span><span class=\"n\">ref</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">db_change</span><span class=\"o\">=-</span><span class=\"mi\">120</span><span class=\"p\">))</span>\n\n<span class=\"n\">signal</span> <span class=\"o\">=</span> <span class=\"n\">CompoundComponent</span><span class=\"p\">([</span><span class=\"n\">sine_4</span><span class=\"p\">,</span> <span class=\"n\">sine_2_6</span><span class=\"p\">,</span> <span class=\"n\">sine_8_10</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"p\">])</span>\n</pre>\n<p><img alt=\"example_complex\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/114a6fac40dd4ea189c857afce3bb019a8617a85/68747470733a2f2f6769746875622e636f6d2f6761726574686a6e732f417564696f4441472f626c6f622f6d61737465722f696d616765732f6578616d706c655f636f6d706c65782e706e67\"></p>\n\n          </div>"}, "last_serial": 6808818, "releases": {"0.0.15": [{"comment_text": "", "digests": {"md5": "f4997829f0b87a9ef9231ce9b6f6e726", "sha256": "6e7e97a32f8ea91b8a1d2402b9614afafe8db5a9594e61edab745054eb8519d7"}, "downloads": -1, "filename": "AudioDAG-0.0.15-py3-none-any.whl", "has_sig": false, "md5_digest": "f4997829f0b87a9ef9231ce9b6f6e726", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 31527, "upload_time": "2020-03-09T13:28:27", "upload_time_iso_8601": "2020-03-09T13:28:27.498368Z", "url": "https://files.pythonhosted.org/packages/e1/0d/4f294412be31c81719776e9cd43ecc8c0d0aa371e143bd9d9f4f40fde2c9/AudioDAG-0.0.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e55e4accd3ec641104e70e48161db67a", "sha256": "d46bedea8a0783427bc0bb6e70ee1036662d4ee199245d041fc8107ed9e07823"}, "downloads": -1, "filename": "AudioDAG-0.0.15.tar.gz", "has_sig": false, "md5_digest": "e55e4accd3ec641104e70e48161db67a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13043, "upload_time": "2020-03-09T13:28:28", "upload_time_iso_8601": "2020-03-09T13:28:28.754393Z", "url": "https://files.pythonhosted.org/packages/38/1d/f6d956a6c3ed897f1d12dfebb70d621f346017bfb8173feda48f0026e234/AudioDAG-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "957f4b5dc520076e19948440e7de5a48", "sha256": "316a5bcab2e6698ab2954472fefcf740fd5876de2c4e24954d3c110b1b2a6829"}, "downloads": -1, "filename": "AudioDAG-0.0.16-py3-none-any.whl", "has_sig": false, "md5_digest": "957f4b5dc520076e19948440e7de5a48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 32898, "upload_time": "2020-03-13T20:47:49", "upload_time_iso_8601": "2020-03-13T20:47:49.750689Z", "url": "https://files.pythonhosted.org/packages/82/11/9923b8184d55967b1b20b21b4e9b237e9d55ab6ee980c915f015dccfd246/AudioDAG-0.0.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e25f9786c0feee91b63d87b9616e7369", "sha256": "1ec54738c32996ddfdfb8c9f16a55a893b46ae0922f90c2d998eaff69e563657"}, "downloads": -1, "filename": "AudioDAG-0.0.16.tar.gz", "has_sig": false, "md5_digest": "e25f9786c0feee91b63d87b9616e7369", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14108, "upload_time": "2020-03-13T20:47:50", "upload_time_iso_8601": "2020-03-13T20:47:50.790881Z", "url": "https://files.pythonhosted.org/packages/56/0d/c989f00b0d69d2b33023c3371045adf8dedba1bf2c8cded5d4ff796904cb/AudioDAG-0.0.16.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "7a8ead23507a4c4a1f362a933ada306d", "sha256": "2c10519004111eb03d02e505ebc395a060159826eb6aafb93776271b3bde9a15"}, "downloads": -1, "filename": "AudioDAG-0.0.8.tar.gz", "has_sig": false, "md5_digest": "7a8ead23507a4c4a1f362a933ada306d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11125, "upload_time": "2020-02-16T15:51:04", "upload_time_iso_8601": "2020-02-16T15:51:04.142905Z", "url": "https://files.pythonhosted.org/packages/5d/a5/2f89c4084b3dacf524e1ecacdb8d2173ca7f8bc769f2c43148c21d46e95c/AudioDAG-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "0a5d6e2ad7356cb1f6c5ad3e14e093a8", "sha256": "ac932d6a411c62cd9ce592cf1ef4a1159d368442c26d93860196ebff49d82d6d"}, "downloads": -1, "filename": "AudioDAG-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "0a5d6e2ad7356cb1f6c5ad3e14e093a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30836, "upload_time": "2020-03-07T14:21:46", "upload_time_iso_8601": "2020-03-07T14:21:46.192037Z", "url": "https://files.pythonhosted.org/packages/9d/73/cd343fc7a9d103f4be24b6b855ad10cb3de866aa13d3426dd512abcf0f67/AudioDAG-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afdb760830a97055c97229d634f7eb59", "sha256": "4bd68ac04b18d605a985c9e97b75df511fde855e2b7e4b2c86400bf4f0eaa7c3"}, "downloads": -1, "filename": "AudioDAG-0.0.9.tar.gz", "has_sig": false, "md5_digest": "afdb760830a97055c97229d634f7eb59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12481, "upload_time": "2020-03-07T14:21:47", "upload_time_iso_8601": "2020-03-07T14:21:47.196848Z", "url": "https://files.pythonhosted.org/packages/22/7f/58226583bad83ea1071279a6c48546ea82bb9530ea61a2c9635f543f7aa6/AudioDAG-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "957f4b5dc520076e19948440e7de5a48", "sha256": "316a5bcab2e6698ab2954472fefcf740fd5876de2c4e24954d3c110b1b2a6829"}, "downloads": -1, "filename": "AudioDAG-0.0.16-py3-none-any.whl", "has_sig": false, "md5_digest": "957f4b5dc520076e19948440e7de5a48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 32898, "upload_time": "2020-03-13T20:47:49", "upload_time_iso_8601": "2020-03-13T20:47:49.750689Z", "url": "https://files.pythonhosted.org/packages/82/11/9923b8184d55967b1b20b21b4e9b237e9d55ab6ee980c915f015dccfd246/AudioDAG-0.0.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e25f9786c0feee91b63d87b9616e7369", "sha256": "1ec54738c32996ddfdfb8c9f16a55a893b46ae0922f90c2d998eaff69e563657"}, "downloads": -1, "filename": "AudioDAG-0.0.16.tar.gz", "has_sig": false, "md5_digest": "e25f9786c0feee91b63d87b9616e7369", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14108, "upload_time": "2020-03-13T20:47:50", "upload_time_iso_8601": "2020-03-13T20:47:50.790881Z", "url": "https://files.pythonhosted.org/packages/56/0d/c989f00b0d69d2b33023c3371045adf8dedba1bf2c8cded5d4ff796904cb/AudioDAG-0.0.16.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:28 2020"}