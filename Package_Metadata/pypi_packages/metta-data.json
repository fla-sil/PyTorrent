{"info": {"author": "Center for Data Science and Public Policy", "author_email": "datascifellows@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Copyright \u00a92017.  The University of Chicago (\u201cChicago\u201d). All Rights Reserved.  \n\nPermission to use, copy, modify, and distribute this software, including all object code and source code, and any accompanying documentation (together the \u201cProgram\u201d) for educational and not-for-profit research purposes, without fee and without a signed licensing agreement, is hereby granted, provided that the above copyright notice, this paragraph and the following three paragraphs appear in all copies, modifications, and distributions. For the avoidance of doubt, educational and not-for-profit research purposes excludes any service or part of selling a service that uses the Program. To obtain a commercial license for the Program, contact the Technology Commercialization and Licensing, Polsky Center for Entrepreneurship and Innovation, University of Chicago, 1452 East 53rd Street, 2nd floor, Chicago, IL 60615.\n\nCreated by Data Science and Public Policy, University of Chicago\n\nThe Program is copyrighted by Chicago. The Program is supplied \"as is\", without any accompanying services from Chicago. Chicago does not warrant that the operation of the Program will be uninterrupted or error-free. The end-user understands that the Program was developed for research purposes and is advised not to rely exclusively on the Program for any reason.\n\nIN NO EVENT SHALL CHICAGO BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THE PROGRAM, EVEN IF CHICAGO HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. CHICAGO SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE PROGRAM PROVIDED HEREUNDER IS PROVIDED \"AS IS\". CHICAGO HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\nDescription: # metta-data\n        Train Matrix and Test Matrix Storage\n        \n        [![Build Status](https://travis-ci.org/dssg/metta-data.svg?branch=master)](https://travis-ci.org/dssg/metta-data)\n        [![codecov](https://codecov.io/gh/dssg/metta-data/branch/master/graph/badge.svg)](https://codecov.io/gh/dssg/metta-data)\n        \n        \n        ##  Description\n        \n        Python library for storing and recalling meta data, and DataFrames of training and\n        testing sets.\n        \n        ## Installation\n        To get the latest stable version:\n        ```\n        pip install metta-data\n        ```\n        \n        To get the current master branch:\n        ```\n        pip install git+git://github.com/dssg/metta-data.git\n        ```\n        \n        \n        ## How-to\n        \n        `metta` expects you to hand it a dictionary for each dataframe with the following keys:\n        - `feature_start_time` (date.datetime): The earliest time that enters your covariate calculations.\n        - `end_time` (date.dateime): The last time that enters your covariate calculations.\n        - `label_timespan` (str): The length of the labeling window you are using in this matrix eg: '1y', '6m'\n        - `label_name` (str): The outcome variable's column name. This column must be in the last position in your dataframe.\n        - `matrix_id` (str): Human readable id for the dataset\n        \n        ### Storing a train and test pair\n        ```\n        import metta\n        \n        \n        train_config = {'feature_start_time': datetime.date(2012, 12, 20),\n                        'end_time': datetime.date(2016, 12, 20),\n                        'label_timespan': '3m',\n                        'label_name': 'inspection_1yr',\n                        'label_type': 'binary',\n                        'matrix_id': 'CDPH_2012',\n                        'feature_names': ['break_last_3yr', 'soil', 'pressure_zone'],\n                        'indices': ['entity_id', 'as_of_date'] }\n        \n        \n        test_config = {'feature_start_time': datetime.date(2015, 12, 20),\n                       'end_time': datetime.date(2016, 12, 21),\n                       'label_timespan': '3m',\n                       'label_name': 'inspection_1yr',\n                       'label_type': 'binary'\n                       'matrix_id': 'CDPH_2015',\n                       'feature_names': ['break_last_3yr', 'soil', 'pressure_zone'],\n                       'inidces': ['entity_id', 'as_of_date'] }\n        \n        \n        metta.archive_train_test(train_config,\n                                 X_train,\n                                 test_config,\n                                 X_test,\n                                 directory='./old_matrices',\n                                 format='hd5',\n                                 overwrite=False)\n        ```\n        \n        ### Storing a train and multiple test sets\n        ```\n        import metta\n        \n        \n        train_config = {'feature_start_time': datetime.date(2012, 12, 20),\n                        'end_time': datetime.date(2016, 12, 20),\n                        'label_timespan': '3m',\n                        'label_name': 'inspection_1yr',\n                        'label_type': 'binary',\n                        'matrix_id': 'CDPH_2012',\n                        'feature_names': ['break_last_3yr', 'soil', 'pressure_zone'],\n                        'indices': ['entity_id', 'as_of_date'] }\n        \n        \n        base_test_config = {'feature_start_time': datetime.date(2015, 12, 20),\n                       'end_time': datetime.date(2016, 12, 21),\n                       'label_timespan': '3m',\n                       'label_name': 'inspection_1yr',\n                       'label_type': 'binary',\n                       'matrix_id': 'CDPH_2015',\n                       'feature_names': ['break_last_3yr', 'soil', 'pressure_zone'],\n                       'indices': ['entity_id', 'as_of_date']}\n        \n        train_uuid = metta.archive_matrix(train_config, X_train, directory='./matrices')\n        \n        test_uuids = []\n        \n        for years in range(1, 5):\n        \ttest_config = base_test_config.copy()\n        \ttest_config['feature_start_time'] += relativedelta(years=years)\n        \ttest_config['end_time'] += relativedelta(years=years)\n        \ttest_config['matrix_id'] = 'CDPH_{}'.format(test_config['end_time'].year)\n        \ttest_uuids.append(metta.archive_matrix(\n        \t\ttest_config,\n        \t\tdf_data,\n        \t\tdirectory='./matrices',\n                overwrite=False,\n        \t\tformat='csv',\n        \t\ttrain_uuid=train_uuid\n        \t))\n        \n        ```\n        \n        \n        ### Uploading to S3\n        ```\n        dict_config = yaml.load(open('aws_keys.yaml'))\n        \n        metta.upload_to_s3(access_key_id=dict_config['AWSAccessKey'],\n                           secret_access_key=dict_config['AWSSecretKey'],\n                           bucket=dict_config['Bucket'],\n                           folder=dict_config['Folder'],\n                           directory='./old_matrices')\n        \n        ```\n        \n        \n        \nKeywords: metta\nPlatform: UNKNOWN\nClassifier: Development Status :: 2 - Pre-Alpha\nClassifier: Intended Audience :: Developers\nClassifier: Natural Language :: English\nClassifier: Programming Language :: Python :: 2\nClassifier: Programming Language :: Python :: 2.6\nClassifier: Programming Language :: Python :: 2.7\nClassifier: Programming Language :: Python :: 3\nClassifier: Programming Language :: Python :: 3.3\nClassifier: Programming Language :: Python :: 3.4\nClassifier: Programming Language :: Python :: 3.5\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dssg/metta-data", "keywords": "", "license": "BY DOWNLOADING metta-data PROGRAM YOU AGREE TO THE FOLLOWING TERMS OF USE:", "maintainer": "", "maintainer_email": "", "name": "metta-data", "package_url": "https://pypi.org/project/metta-data/", "platform": "", "project_url": "https://pypi.org/project/metta-data/", "project_urls": {"Homepage": "https://github.com/dssg/metta-data"}, "release_url": "https://pypi.org/project/metta-data/1.0.0/", "requires_dist": ["PyYAML", "boto3", "numpy", "pandas", "python-dateutil", "tables"], "requires_python": "", "summary": "Store/Read train and test matrices", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            Copyright \u00a92017.  The University of Chicago (\u201cChicago\u201d). All Rights Reserved.  <br><br>Permission to use, copy, modify, and distribute this software, including all object code and source code, and any accompanying documentation (together the \u201cProgram\u201d) for educational and not-for-profit research purposes, without fee and without a signed licensing agreement, is hereby granted, provided that the above copyright notice, this paragraph and the following three paragraphs appear in all copies, modifications, and distributions. For the avoidance of doubt, educational and not-for-profit research purposes excludes any service or part of selling a service that uses the Program. To obtain a commercial license for the Program, contact the Technology Commercialization and Licensing, Polsky Center for Entrepreneurship and Innovation, University of Chicago, 1452 East 53rd Street, 2nd floor, Chicago, IL 60615.<br><br>Created by Data Science and Public Policy, University of Chicago<br><br>The Program is copyrighted by Chicago. The Program is supplied \"as is\", without any accompanying services from Chicago. Chicago does not warrant that the operation of the Program will be uninterrupted or error-free. The end-user understands that the Program was developed for research purposes and is advised not to rely exclusively on the Program for any reason.<br><br>IN NO EVENT SHALL CHICAGO BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THE PROGRAM, EVEN IF CHICAGO HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. CHICAGO SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE PROGRAM PROVIDED HEREUNDER IS PROVIDED \"AS IS\". CHICAGO HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.<br><br>Description: # metta-data<br>        Train Matrix and Test Matrix Storage<br>        <br>        [![Build Status](https://travis-ci.org/dssg/metta-data.svg?branch=master)](https://travis-ci.org/dssg/metta-data)<br>        [![codecov](https://codecov.io/gh/dssg/metta-data/branch/master/graph/badge.svg)](https://codecov.io/gh/dssg/metta-data)<br>        <br>        <br>        ##  Description<br>        <br>        Python library for storing and recalling meta data, and DataFrames of training and<br>        testing sets.<br>        <br>        ## Installation<br>        To get the latest stable version:<br>        ```<br>        pip install metta-data<br>        ```<br>        <br>        To get the current master branch:<br>        ```<br>        pip install git+git://github.com/dssg/metta-data.git<br>        ```<br>        <br>        <br>        ## How-to<br>        <br>        `metta` expects you to hand it a dictionary for each dataframe with the following keys:<br>        - `feature_start_time` (date.datetime): The earliest time that enters your covariate calculations.<br>        - `end_time` (date.dateime): The last time that enters your covariate calculations.<br>        - `label_timespan` (str): The length of the labeling window you are using in this matrix eg: '1y', '6m'<br>        - `label_name` (str): The outcome variable's column name. This column must be in the last position in your dataframe.<br>        - `matrix_id` (str): Human readable id for the dataset<br>        <br>        ### Storing a train and test pair<br>        ```<br>        import metta<br>        <br>        <br>        train_config = {'feature_start_time': datetime.date(2012, 12, 20),<br>                        'end_time': datetime.date(2016, 12, 20),<br>                        'label_timespan': '3m',<br>                        'label_name': 'inspection_1yr',<br>                        'label_type': 'binary',<br>                        'matrix_id': 'CDPH_2012',<br>                        'feature_names': ['break_last_3yr', 'soil', 'pressure_zone'],<br>                        'indices': ['entity_id', 'as_of_date'] }<br>        <br>        <br>        test_config = {'feature_start_time': datetime.date(2015, 12, 20),<br>                       'end_time': datetime.date(2016, 12, 21),<br>                       'label_timespan': '3m',<br>                       'label_name': 'inspection_1yr',<br>                       'label_type': 'binary'<br>                       'matrix_id': 'CDPH_2015',<br>                       'feature_names': ['break_last_3yr', 'soil', 'pressure_zone'],<br>                       'inidces': ['entity_id', 'as_of_date'] }<br>        <br>        <br>        metta.archive_train_test(train_config,<br>                                 X_train,<br>                                 test_config,<br>                                 X_test,<br>                                 directory='./old_matrices',<br>                                 format='hd5',<br>                                 overwrite=False)<br>        ```<br>        <br>        ### Storing a train and multiple test sets<br>        ```<br>        import metta<br>        <br>        <br>        train_config = {'feature_start_time': datetime.date(2012, 12, 20),<br>                        'end_time': datetime.date(2016, 12, 20),<br>                        'label_timespan': '3m',<br>                        'label_name': 'inspection_1yr',<br>                        'label_type': 'binary',<br>                        'matrix_id': 'CDPH_2012',<br>                        'feature_names': ['break_last_3yr', 'soil', 'pressure_zone'],<br>                        'indices': ['entity_id', 'as_of_date'] }<br>        <br>        <br>        base_test_config = {'feature_start_time': datetime.date(2015, 12, 20),<br>                       'end_time': datetime.date(2016, 12, 21),<br>                       'label_timespan': '3m',<br>                       'label_name': 'inspection_1yr',<br>                       'label_type': 'binary',<br>                       'matrix_id': 'CDPH_2015',<br>                       'feature_names': ['break_last_3yr', 'soil', 'pressure_zone'],<br>                       'indices': ['entity_id', 'as_of_date']}<br>        <br>        train_uuid = metta.archive_matrix(train_config, X_train, directory='./matrices')<br>        <br>        test_uuids = []<br>        <br>        for years in range(1, 5):<br>        \ttest_config = base_test_config.copy()<br>        \ttest_config['feature_start_time'] += relativedelta(years=years)<br>        \ttest_config['end_time'] += relativedelta(years=years)<br>        \ttest_config['matrix_id'] = 'CDPH_{}'.format(test_config['end_time'].year)<br>        \ttest_uuids.append(metta.archive_matrix(<br>        \t\ttest_config,<br>        \t\tdf_data,<br>        \t\tdirectory='./matrices',<br>                overwrite=False,<br>        \t\tformat='csv',<br>        \t\ttrain_uuid=train_uuid<br>        \t))<br>        <br>        ```<br>        <br>        <br>        ### Uploading to S3<br>        ```<br>        dict_config = yaml.load(open('aws_keys.yaml'))<br>        <br>        metta.upload_to_s3(access_key_id=dict_config['AWSAccessKey'],<br>                           secret_access_key=dict_config['AWSSecretKey'],<br>                           bucket=dict_config['Bucket'],<br>                           folder=dict_config['Folder'],<br>                           directory='./old_matrices')<br>        <br>        ```<br>        <br>        <br>        <br>Keywords: metta<br>Platform: UNKNOWN<br>Classifier: Development Status :: 2 - Pre-Alpha<br>Classifier: Intended Audience :: Developers<br>Classifier: Natural Language :: English<br>Classifier: Programming Language :: Python :: 2<br>Classifier: Programming Language :: Python :: 2.6<br>Classifier: Programming Language :: Python :: 2.7<br>Classifier: Programming Language :: Python :: 3<br>Classifier: Programming Language :: Python :: 3.3<br>Classifier: Programming Language :: Python :: 3.4<br>Classifier: Programming Language :: Python :: 3.5<br>\n          </div>"}, "last_serial": 3311201, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "46789f7ad5800bc38278e3debe3404d1", "sha256": "43e28652fb2e21be40f2122f9fa29360e77b2b13b215ac5d0839b520345af2e1"}, "downloads": -1, "filename": "metta_data-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "46789f7ad5800bc38278e3debe3404d1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10730, "upload_time": "2017-08-22T19:14:38", "upload_time_iso_8601": "2017-08-22T19:14:38.539014Z", "url": "https://files.pythonhosted.org/packages/6f/ca/c0199b87eb970a0729004c48d1db12971ec1445dbf8a3a01a50b1e293971/metta_data-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4dd2bd878f817289945963d96d2ebce", "sha256": "738c20f6b8404a7c06c84afb8e8b41b187686d6a150c839ac338088ebfad0ad2"}, "downloads": -1, "filename": "metta-data-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a4dd2bd878f817289945963d96d2ebce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8312, "upload_time": "2017-08-22T19:14:39", "upload_time_iso_8601": "2017-08-22T19:14:39.907200Z", "url": "https://files.pythonhosted.org/packages/7d/3b/18b55e172b9231b2412e2adaebcb837631ca0da7e7879847d44016562419/metta-data-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "08e0ccbb1e8396368dfbb10c2cafb4ef", "sha256": "939e28f3d45fec2e7d2fbbfd42e3790ec995e80d9e0491b8a59574740c6ffa5e"}, "downloads": -1, "filename": "metta_data-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "08e0ccbb1e8396368dfbb10c2cafb4ef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10732, "upload_time": "2017-08-22T19:14:37", "upload_time_iso_8601": "2017-08-22T19:14:37.236212Z", "url": "https://files.pythonhosted.org/packages/54/2f/de1ca58ef3c68b8878fd45e20b102e04b7f69ea22bba058a4bb71b0665bb/metta_data-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdc30b54e8a75215d84a3498c93e0410", "sha256": "a71772ba3dded3c3301710c8b650c348b4e1aa9a26c390b93c3c44d912ea4633"}, "downloads": -1, "filename": "metta-data-0.2.2.tar.gz", "has_sig": false, "md5_digest": "bdc30b54e8a75215d84a3498c93e0410", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8312, "upload_time": "2017-08-22T19:14:39", "upload_time_iso_8601": "2017-08-22T19:14:39.461112Z", "url": "https://files.pythonhosted.org/packages/38/d2/0ece09fd666d91bf9a658ddf64b9a0c53b3b5b40ce869bdfab3b390f09ef/metta-data-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a971bdb64421f964d4701fcca9a12201", "sha256": "77bb49f027588055deac4804126dda58f50a9f4f034c41e489ab26bf2ae95354"}, "downloads": -1, "filename": "metta_data-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a971bdb64421f964d4701fcca9a12201", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10729, "upload_time": "2017-07-22T00:00:03", "upload_time_iso_8601": "2017-07-22T00:00:03.362016Z", "url": "https://files.pythonhosted.org/packages/59/80/eb61d864742104854ee4d566925c0de8730fb38e8adc7d58832f1000a17e/metta_data-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dc379c67fbc1e0867941b5cc2a7279f", "sha256": "a1aea2e686e30f88f6d2b6b001a874b060d688e10a86aedf00f21f0e97845725"}, "downloads": -1, "filename": "metta-data-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1dc379c67fbc1e0867941b5cc2a7279f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8309, "upload_time": "2017-07-22T00:00:05", "upload_time_iso_8601": "2017-07-22T00:00:05.153157Z", "url": "https://files.pythonhosted.org/packages/0b/4a/b89522b999bef3780e1240d9fa6632361c42323b8eecf62c633d8b82fc45/metta-data-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "4fa5e51742a2b91fb05f4755cbbcf021", "sha256": "0267ead0052b832d7ed4f07d87bcecf3e1d81e6cc9415f40e2fe93b8cc791b32"}, "downloads": -1, "filename": "metta_data-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4fa5e51742a2b91fb05f4755cbbcf021", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10731, "upload_time": "2017-11-06T23:13:47", "upload_time_iso_8601": "2017-11-06T23:13:47.393265Z", "url": "https://files.pythonhosted.org/packages/ff/ba/96ad0e66aa7f5472734d617806eb71c8ec520dd2956279bcd4b1d5b76643/metta_data-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d94bf598c24e42b154aea1f75232481d", "sha256": "ce2192232bd97c8b9e85199e6414a0fe853747c0c3edc80b2ddb51ab67ea414c"}, "downloads": -1, "filename": "metta-data-0.4.0.tar.gz", "has_sig": false, "md5_digest": "d94bf598c24e42b154aea1f75232481d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7466, "upload_time": "2017-11-06T23:13:49", "upload_time_iso_8601": "2017-11-06T23:13:49.024312Z", "url": "https://files.pythonhosted.org/packages/1d/8b/b2f9fba0796ef798695e4c7d0f8e21679382f5fdf996068fc90faa85f7a5/metta-data-0.4.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e32caabde1e4058faad42430b85bb787", "sha256": "36e5ed8cccf1448f31d8a6b05ad02a809b85c0a220dc2a9a8c8ed3b2c405cf2e"}, "downloads": -1, "filename": "metta_data-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e32caabde1e4058faad42430b85bb787", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10732, "upload_time": "2017-11-06T23:14:18", "upload_time_iso_8601": "2017-11-06T23:14:18.884240Z", "url": "https://files.pythonhosted.org/packages/b2/67/8b37624157f711e2f49204ab779a7196aa3adecdd5d66768084e6d20b9aa/metta_data-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a2dc513b90b1802572ff5a8d1d57091", "sha256": "6c391c2220f44fb5ccfb118a0ad1067e68253e218806326d2f22cd1c47d1e2e5"}, "downloads": -1, "filename": "metta-data-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3a2dc513b90b1802572ff5a8d1d57091", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7466, "upload_time": "2017-11-06T23:14:20", "upload_time_iso_8601": "2017-11-06T23:14:20.002594Z", "url": "https://files.pythonhosted.org/packages/e0/b8/67b11f028807c36b2c6b79396b932765efd040e8f1109381b1859c70c92c/metta-data-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e32caabde1e4058faad42430b85bb787", "sha256": "36e5ed8cccf1448f31d8a6b05ad02a809b85c0a220dc2a9a8c8ed3b2c405cf2e"}, "downloads": -1, "filename": "metta_data-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e32caabde1e4058faad42430b85bb787", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10732, "upload_time": "2017-11-06T23:14:18", "upload_time_iso_8601": "2017-11-06T23:14:18.884240Z", "url": "https://files.pythonhosted.org/packages/b2/67/8b37624157f711e2f49204ab779a7196aa3adecdd5d66768084e6d20b9aa/metta_data-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a2dc513b90b1802572ff5a8d1d57091", "sha256": "6c391c2220f44fb5ccfb118a0ad1067e68253e218806326d2f22cd1c47d1e2e5"}, "downloads": -1, "filename": "metta-data-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3a2dc513b90b1802572ff5a8d1d57091", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7466, "upload_time": "2017-11-06T23:14:20", "upload_time_iso_8601": "2017-11-06T23:14:20.002594Z", "url": "https://files.pythonhosted.org/packages/e0/b8/67b11f028807c36b2c6b79396b932765efd040e8f1109381b1859c70c92c/metta-data-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:36 2020"}