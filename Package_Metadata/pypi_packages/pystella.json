{"info": {"author": "Zachary J Weiner", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "pystella: a distributed and accelerated framework for PDE solving\n=================================================================\n\n.. image:: https://github.com/zachjweiner/pystella/workflows/CI/badge.svg?branch=master\n    :alt: Github Build Status\n    :target: https://github.com/zachjweiner/pystella/actions?query=branch%3Amaster+workflow%3ACI\n.. image:: https://dev.azure.com/zachjweiner/pystella/_apis/build/status/zachjweiner.pystella?branchName=master\n    :alt: Azure Build Status\n    :target: https://dev.azure.com/zachjweiner/pystella/_build/latest?definitionId=1&branchName=master\n.. image:: https://readthedocs.org/projects/pystella/badge/?version=latest\n    :target: https://pystella.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n``pystella`` enables the easy expression of both PDE systems and the algorithms\nto solve them in high-performance computing environments within Python.\nIt provides interfaces to generate custom computational kernels\nvia `loopy <http://mathema.tician.de/software/loopy>`_ which can then be executed\nfrom Python on (multiple) CPUs or GPUs using\n`pyopencl <http://mathema.tician.de/software/pyopencl>`_\nand `mpi4py <https://mpi4py.readthedocs.io/en/stable/>`_.\nMoreover, ``pystella`` implements a number of algorithms for PDE time evolution\nand spatial discretization that can be readily applied to a variety of physical\nsystems.\n\nIts features include:\n\n* code generation for performant element-wise kernels, stencil-based computations,\n  reductions, and histograms\n* distributed domain decomposition and grid boundary sychronization\n* time-stepping algorithms, including low-storage Runge-Kutta schemes\n* finite difference and spectral collocation methods for spatial derivatives\n* a geometric multigrid solver for generic sets of nonlinear boundary-value problems\n  (in beta)\n* wrappers to OpenCL-based Fast Fourier Transforms (FFTs) and distributed\n  CPU FFTs\n* Fourier space methods for field analysis and solving Poisson's equation\n\nAll of the above functionality is configured to run at high performance by default,\nas are the interfaces for generating custom kernels (though this is\nentirely user-configurable!).\nAdditionally, the provided functionality is intended to work seamlessly whether\nrunning in distributed- (i.e., multiple devices) or shared-memory\n(i.e., a single device) contexts without sacrificing performance in either case.\n\n``pystella`` was designed to simulate preheating and gravitational wave production\nafter cosmological inflation and provides a simple way to specify models of this\nprocess.\nHowever, ``pystella`` is also designed to be sufficiently abstract as to provide a\ngood framework for most systems that can be discretized onto grids\n(e.g., lattice field theory, (magneto)hydrodynamics, Einstein's equations,\nelectromagnetism, etc.).\nThe preheating-specific components can be viewed as examples for the symbolic\nrepresentation of arbitrary physical systems as an interface to its code generation\nroutines.\n``pystella`` provides entry points at varying levels of abstraction\u2014so if you like\nthe idea of ``pystella`` but the algorithms you require are not implemented,\nyou can create new interfaces (or extend existing ones) for your purposes\nwith ease.\n(Better yet, consider contributing a PR!)\n\n``pystella`` is `fully documented <https://pystella.readthedocs.io/en/latest/>`_\nand is licensed under the liberal `MIT license\n<http://en.wikipedia.org/wiki/MIT_License>`_.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zachjweiner/pystella", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pystella", "package_url": "https://pypi.org/project/pystella/", "platform": "", "project_url": "https://pypi.org/project/pystella/", "project_urls": {"Homepage": "https://github.com/zachjweiner/pystella"}, "release_url": "https://pypi.org/project/pystella/2019.6/", "requires_dist": ["numpy", "pyopencl", "loo.py (>=2018.2)"], "requires_python": "", "summary": "A code generator for grid-based PDE solving on CPUs and GPUs", "version": "2019.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/zachjweiner/pystella/actions?query=branch%3Amaster+workflow%3ACI\" rel=\"nofollow\"><img alt=\"Github Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dda987202f472ef30afcc340931d0a80191f5553/68747470733a2f2f6769746875622e636f6d2f7a6163686a7765696e65722f70797374656c6c612f776f726b666c6f77732f43492f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://dev.azure.com/zachjweiner/pystella/_build/latest?definitionId=1&amp;branchName=master\" rel=\"nofollow\"><img alt=\"Azure Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57a12561e74c958c508be19efaaa768306f9001c/68747470733a2f2f6465762e617a7572652e636f6d2f7a6163686a7765696e65722f70797374656c6c612f5f617069732f6275696c642f7374617475732f7a6163686a7765696e65722e70797374656c6c613f6272616e63684e616d653d6d6173746572\"></a>\n<a href=\"https://pystella.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/744b521519f6ecb06eef829fca83b0815d4ba955/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70797374656c6c612f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p><tt>pystella</tt> enables the easy expression of both PDE systems and the algorithms\nto solve them in high-performance computing environments within Python.\nIt provides interfaces to generate custom computational kernels\nvia <a href=\"http://mathema.tician.de/software/loopy\" rel=\"nofollow\">loopy</a> which can then be executed\nfrom Python on (multiple) CPUs or GPUs using\n<a href=\"http://mathema.tician.de/software/pyopencl\" rel=\"nofollow\">pyopencl</a>\nand <a href=\"https://mpi4py.readthedocs.io/en/stable/\" rel=\"nofollow\">mpi4py</a>.\nMoreover, <tt>pystella</tt> implements a number of algorithms for PDE time evolution\nand spatial discretization that can be readily applied to a variety of physical\nsystems.</p>\n<p>Its features include:</p>\n<ul>\n<li>code generation for performant element-wise kernels, stencil-based computations,\nreductions, and histograms</li>\n<li>distributed domain decomposition and grid boundary sychronization</li>\n<li>time-stepping algorithms, including low-storage Runge-Kutta schemes</li>\n<li>finite difference and spectral collocation methods for spatial derivatives</li>\n<li>a geometric multigrid solver for generic sets of nonlinear boundary-value problems\n(in beta)</li>\n<li>wrappers to OpenCL-based Fast Fourier Transforms (FFTs) and distributed\nCPU FFTs</li>\n<li>Fourier space methods for field analysis and solving Poisson\u2019s equation</li>\n</ul>\n<p>All of the above functionality is configured to run at high performance by default,\nas are the interfaces for generating custom kernels (though this is\nentirely user-configurable!).\nAdditionally, the provided functionality is intended to work seamlessly whether\nrunning in distributed- (i.e., multiple devices) or shared-memory\n(i.e., a single device) contexts without sacrificing performance in either case.</p>\n<p><tt>pystella</tt> was designed to simulate preheating and gravitational wave production\nafter cosmological inflation and provides a simple way to specify models of this\nprocess.\nHowever, <tt>pystella</tt> is also designed to be sufficiently abstract as to provide a\ngood framework for most systems that can be discretized onto grids\n(e.g., lattice field theory, (magneto)hydrodynamics, Einstein\u2019s equations,\nelectromagnetism, etc.).\nThe preheating-specific components can be viewed as examples for the symbolic\nrepresentation of arbitrary physical systems as an interface to its code generation\nroutines.\n<tt>pystella</tt> provides entry points at varying levels of abstraction\u2014so if you like\nthe idea of <tt>pystella</tt> but the algorithms you require are not implemented,\nyou can create new interfaces (or extend existing ones) for your purposes\nwith ease.\n(Better yet, consider contributing a PR!)</p>\n<p><tt>pystella</tt> is <a href=\"https://pystella.readthedocs.io/en/latest/\" rel=\"nofollow\">fully documented</a>\nand is licensed under the liberal <a href=\"http://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\">MIT license</a>.</p>\n\n          </div>"}, "last_serial": 7176300, "releases": {"2019.6": [{"comment_text": "", "digests": {"md5": "cc87ac8a76571a7e1c1f58bed094a24b", "sha256": "9291c971a2515184a273dec9df47b607d5fbed728b46e4d63e4d4357f2b6be59"}, "downloads": -1, "filename": "pystella-2019.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cc87ac8a76571a7e1c1f58bed094a24b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 90443, "upload_time": "2020-05-05T22:34:56", "upload_time_iso_8601": "2020-05-05T22:34:56.819310Z", "url": "https://files.pythonhosted.org/packages/a7/f9/fb391695a81095a1065e6f34e53f44bae72a475e4f52224999d3d7c7617f/pystella-2019.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b857feae19a73e03109ca408ebeb04f", "sha256": "257e5b5d4ce2a9e645a57e6d1a286fac7c2b5faa336a0bcf89c5c2d060f01ba0"}, "downloads": -1, "filename": "pystella-2019.6.tar.gz", "has_sig": false, "md5_digest": "9b857feae19a73e03109ca408ebeb04f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82868, "upload_time": "2020-05-05T22:34:58", "upload_time_iso_8601": "2020-05-05T22:34:58.673617Z", "url": "https://files.pythonhosted.org/packages/08/e2/874233a3c6d3f2841eead7eac1ed489c98d9381ecca43ccbe145b0b4ca86/pystella-2019.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cc87ac8a76571a7e1c1f58bed094a24b", "sha256": "9291c971a2515184a273dec9df47b607d5fbed728b46e4d63e4d4357f2b6be59"}, "downloads": -1, "filename": "pystella-2019.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cc87ac8a76571a7e1c1f58bed094a24b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 90443, "upload_time": "2020-05-05T22:34:56", "upload_time_iso_8601": "2020-05-05T22:34:56.819310Z", "url": "https://files.pythonhosted.org/packages/a7/f9/fb391695a81095a1065e6f34e53f44bae72a475e4f52224999d3d7c7617f/pystella-2019.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b857feae19a73e03109ca408ebeb04f", "sha256": "257e5b5d4ce2a9e645a57e6d1a286fac7c2b5faa336a0bcf89c5c2d060f01ba0"}, "downloads": -1, "filename": "pystella-2019.6.tar.gz", "has_sig": false, "md5_digest": "9b857feae19a73e03109ca408ebeb04f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82868, "upload_time": "2020-05-05T22:34:58", "upload_time_iso_8601": "2020-05-05T22:34:58.673617Z", "url": "https://files.pythonhosted.org/packages/08/e2/874233a3c6d3f2841eead7eac1ed489c98d9381ecca43ccbe145b0b4ca86/pystella-2019.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:59 2020"}