{"info": {"author": "Peter Kruczkiewicz", "author_email": "peter.kruczkiewicz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "|logo|\n\n|conda| |nbsp| |pypi| |nbsp| |license| |nbsp| |nbsp| Master:|citest-master| |nbsp| Development:|citest-dev| |rtd|\n\n\n\n.. |logo| image:: logo.png\n    :target: https://github.com/phac-nml/biohansel\n.. |pypi| image:: https://badge.fury.io/py/bio-hansel.svg\n    :target: https://pypi.python.org/pypi/bio_hansel/\n.. |license| image:: https://img.shields.io/badge/License-Apache%20v2.0-blue.svg\n    :target: http://www.apache.org/licenses/LICENSE-2.0\n.. |citest-dev|  image:: https://travis-ci.org/phac-nml/biohansel.svg?branch=development\n    :target: https://travis-ci.org/phac-nml/biohansel\n.. |citest-master| image:: https://travis-ci.org/phac-nml/biohansel.svg?branch=master\n    :target: https://travis-ci.org/phac-nml/biohansel\n.. |conda|   image:: https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg\n    :target: https://bioconda.github.io/recipes/bio_hansel/README.html\n.. |nbsp| unicode:: 0xA0\n    :trim:\n.. |rtd| image:: https://readthedocs.org/projects/pip/badge/?version=latest&style=flat\n    :target: https://bio-hansel.readthedocs.io/en/readthedocs/\n\nSubtype microbial whole-genome sequencing (WGS) data using SNV targeting k-mer subtyping schemes.\n\nIncludes 33 bp k-mer SNV subtyping schemes for *Salmonella enterica* subsp. enterica serovars Heidelberg, Enteritidis, and Typhimurium genomes developed by Genevieve Labbe et al., and for *S*. ser Typhi adapted from Wong et al. (https://www.nature.com/articles/ncomms12827).\n\nWorks on genome assemblies (FASTA files) or reads (FASTQ files)! Accepts Gzipped FASTA/FASTQ files as input!\n\nAlso includes a *Mycobacterium tuberculosis* lineage scheme adapted from Coll et al. (https://www.nature.com/articles/ncomms5812) by Daniel Kein.\n\n\nCitation\n========\n\nIf you find the ``biohansel`` tool useful, please cite as:\n\n.. epigraph::\n\n    Rapid and robust genotyping of highly clonal bacterial pathogens using BioHansel, a SNP-based k-mer search pipeline.\n    Genevi\u00e8ve Labb\u00e9, Peter Kruczkiewicz, Philip Mabon, James Robertson, Justin Schonfeld, Daniel Kein, Marisa A. Rankin, Matthew Gopez, Darian Hole, David Son, Natalie Knox, Chad R. Laing, Kyrylo Bessonov, Eduardo Taboada, Catherine Yoshida, Roger P. Johnson, Gary Van Domselaar and John H.E. Nash.\n    [Manuscript in preparation]\n\n\nRead_The_Docs\n==============\n\nMore in-depth information on running and installing biohansel can be found on the `biohansel readthedocs page <https://bio-hansel.readthedocs.io/en/readthedocs/>`_.\n\n\nRequirements and Dependencies\n=============================\n\nEach new build of ``biohansel`` is automatically tested on Linux using `Continuous Integration <https://travis-ci.org/phac-nml/bio_hansel/branches>`_. ``biohansel`` has been confirmed to work on Mac OSX (versions 10.13.5 Beta and 10.12.6) when installed with Conda_.\n\nThese are the dependencies required for ``biohansel``:\n\n- Python_ (>=v3.6)\n    - numpy_ >=1.12.1\n    - pandas_ >=0.20.1\n    - pyahocorasick_ >=1.1.6\n    - attrs_\n\n\nInstallation\n============\n\nWith Conda_\n-----------\n\nInstall ``biohansel`` from Bioconda_ with Conda_ (`Conda installation instructions <https://bioconda.github.io/#install-conda>`_):\n\n.. code-block:: bash\n\n    # setup Conda channels for Bioconda and Conda-Forge (https://bioconda.github.io/#set-up-channels)\n    conda config --add channels defaults\n    conda config --add channels conda-forge\n    conda config --add channels bioconda\n    # install biohansel\n    conda install bio_hansel\n\nWith pip_ from PyPI_\n---------------------\n\nInstall ``biohansel`` from PyPI_ with pip_:\n\n.. code-block:: bash\n\n    pip install bio_hansel\n\nWith pip_ from Github\n---------------------\n\nOr install the latest master branch version directly from Github:\n\n.. code-block:: bash\n\n    pip install git+https://github.com/phac-nml/biohansel.git@master\n\nInstall into Galaxy_ (version >= 17.01)\n---------------------------------------\n\nInstall ``biohansel`` from the main Galaxy_ toolshed:\n\nhttps://toolshed.g2.bx.psu.edu/view/nml/biohansel/ba6a0af656a6\n\n\nUsage\n=====\n\nIf you run ``hansel -h``, you should see the following usage statement:\n\n.. code-block::\n\n    usage: hansel [-h] [-s SCHEME] [--scheme-name SCHEME_NAME]\n                  [-M SCHEME_METADATA] [-p forward_reads reverse_reads]\n                  [-i fasta_path genome_name] [-D INPUT_DIRECTORY]\n                  [-o OUTPUT_SUMMARY] [-O OUTPUT_KMER_RESULTS]\n                  [-S OUTPUT_SIMPLE_SUMMARY] [--force] [--json]\n                  [--min-kmer-freq MIN_KMER_FREQ]\n                  [--max-kmer-freq MAX_KMER_FREQ]\n                  [--low-cov-depth-freq LOW_COV_DEPTH_FREQ]\n                  [--max-missing-kmers MAX_MISSING_KMERS]\n                  [--min-ambiguous-kmers MIN_AMBIGUOUS_KMERS]\n                  [--low-cov-warning LOW_COV_WARNING]\n                  [--max-intermediate-kmers MAX_INTERMEDIATE_KMERS] \n                  [--max-degenerate-kmers MAX_DEGENERATE_KMERS] [-t THREADS]\n                  [-v] [-V]\n                  [F [F ...]]\n\n    Subtype microbial genomes using SNV targeting k-mer subtyping schemes.\n    Includes schemes for Salmonella enterica spp. enterica serovar Heidelberg, Enteritidis, Typhi, and Typhimurium subtyping. Also includes a Mycobacterium tuberculosis scheme called 'tb_lineage'.\n    Developed by Genevi\u00e8ve Labb\u00e9, James Robertson, Peter Kruczkiewicz, Marisa Rankin, Matthew Gopez, Chad R. Laing, Philip Mabon, Kim Ziebell, Aleisha R. Reimer, Lorelee Tschetter, Gary Van Domselaar, Sadjia Bekal, Kimberley A. MacDonald, Linda Hoang, Linda Chui, Danielle Daignault, Durda Slavic, Frank Pollari, E. Jane Parmley, David Son, Darian Hole, Philip Mabon, Elissa Giang, Lok Kan Lee, Jonathan Moffat, Marisa Rankin, Joanne MacKinnon, Roger Johnson, John H.E. Nash.\n\n    positional arguments:\n      F                     Input genome FASTA/FASTQ files (can be Gzipped)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -s SCHEME, --scheme SCHEME\n                            Scheme to use for subtyping (built-in: \"heidelberg\",\n                            \"enteritidis\", \"typhi\", \"typhimurium\", \"tb_lineage\"; OR user-specified:\n                            /path/to/user/scheme)\n      --scheme-name SCHEME_NAME\n                            Custom user-specified SNP substyping scheme name\n      -M SCHEME_METADATA, --scheme-metadata scheme_metadata\n                            Scheme subtype metadata table (.TSV format accepted;\n                            must contain column called \"subtype\")\n      -p forward_reads reverse_reads, --paired-reads forward_reads reverse_reads\n                            FASTQ paired-end reads\n      -i fasta_path genome_name, --input-fasta-genome-name fasta_path genome_name\n                            fasta file path to genome name pair\n      -D INPUT_DIRECTORY, --input-directory INPUT_DIRECTORY\n                            directory of input fasta files (.fasta|.fa|.fna) or\n                            FASTQ files (paired FASTQ should have same basename\n                            with \"_\\d\\.(fastq|fq)\" postfix to be automatically\n                            paired) (files can be Gzipped)\n      -o OUTPUT_SUMMARY, --output-summary OUTPUT_SUMMARY\n                            Subtyping summary output path (tab-delimited)\n      -O OUTPUT_KMER_RESULTS, --output-kmer-results OUTPUT_KMER_RESULTS\n                            Subtyping kmer matching output path (tab-delimited)\n      -S OUTPUT_SIMPLE_SUMMARY, --output-simple-summary OUTPUT_SIMPLE_SUMMARY\n                            Subtyping simple summary output path\n      --force               Force existing output files to be overwritten\n      --json                Output JSON representation of output files\n      --min-kmer-freq MIN_KMER_FREQ\n                            Min k-mer freq/coverage\n      --max-kmer-freq MAX_KMER_FREQ\n                            Max k-mer freq/coverage\n      --low-cov-depth-freq LOW_COV_DEPTH_FREQ\n                            Frequencies below this coverage are considered low\n                            coverage\n      --max-missing-kmers MAX_MISSING_KMERS\n                            Decimal proportion of maximum allowable missing kmers\n                            before being considered an error. (0.0 - 1.0)\n      --min-ambiguous-kmers MIN_AMBIGUOUS_KMERS\n                            Minimum number of missing kmers to be considered an\n                            ambiguous result\n      --low-cov-warning LOW_COV_WARNING\n                            Overall kmer coverage below this value will trigger a\n                            low coverage warning\n      --max-intermediate-kmers MAX_INTERMEDIATE_KMERS\n                            Decimal proportion of maximum allowable missing kmers\n                            to be considered an intermediate subtype. (0.0 - 1.0)\n      --max-degenerate-kmers MAX_DEGENERATE_KMERS\n                            Maximum number of scheme k-mers allowed before\n                            quitting with a usage warning. Default is 100,000\n      -t THREADS, --threads THREADS\n                            Number of parallel threads to run analysis (default=1)\n      -v, --verbose         Logging verbosity level (-v == show warnings; -vvv ==\n                            show debug info)\n      -V, --version         show program's version number and exit\n\n\n\n\nExample Usage\n=============\n\nAnalysis of a single FASTA file\n-------------------------------\n\n.. code-block:: bash\n\n    hansel -s heidelberg -vv -o results.tab -O match_results.tab /path/to/SRR1002850.fasta\n\n\nContents of ``results.tab``:\n\n.. code-block::\n\n    sample  scheme  subtype all_subtypes    kmers_matching_subtype  are_subtypes_consistent inconsistent_subtypes   n_kmers_matching_all    n_kmers_matching_all_total  n_kmers_matching_positive   n_kmers_matching_positive_total n_kmers_matching_subtype    n_kmers_matching_subtype_total  file_path\n    SRR1002850  heidelberg  2.2.2.2.1.4 2; 2.2; 2.2.2; 2.2.2.2; 2.2.2.2.1; 2.2.2.2.1.4  1037658-2.2.2.2.1.4; 2154958-2.2.2.2.1.4; 3785187-2.2.2.2.1.4   True        202 202 17  17  3   3   SRR1002850.fasta\n\n\nContents of ``match_results.tab``:\n\n.. code-block::\n\n    kmername    stitle  pident  length  mismatch    gapopen qstart  qend    sstart  send    evalue  bitscore    qlen    slen    seq coverage    is_trunc    refposition subtype is_pos_kmer sample  file_path   scheme\n    775920-2.2.2.2  NODE_2_length_512016_cov_46.4737_ID_3   100.0   33  0   0   1   33  474875  474907  2.0000000000000002e-11  62.1    33  512016  GTTCAGGTGCTACCGAGGATCGTTTTTGGTGCG   1.0 False   775920  2.2.2.2 True    SRR1002850  SRR1002850.fasta   heidelberg\n    negative3305400-2.1.1.1 NODE_3_length_427905_cov_48.1477_ID_5   100.0   33  0   0   1   33  276235  276267  2.0000000000000002e-11  62.1    33  427905  CATCGTGAAGCAGAACAGACGCGCATTCTTGCT   1.0 False   negative3305400 2.1.1.1 False   SRR1002850  SRR1002850.fasta   heidelberg\n    negative3200083-2.1 NODE_3_length_427905_cov_48.1477_ID_5   100.0   33  0   0   1   33  170918  170950  2.0000000000000002e-11  62.1    33  427905  ACCCGGTCTACCGCAAAATGGAAAGCGATATGC   1.0 False   negative3200083 2.1 False   SRR1002850  SRR1002850.fasta   heidelberg\n    negative3204925-2.2.3.1.5   NODE_3_length_427905_cov_48.1477_ID_5   100.0   33  0   0   1   33  175760  175792  2.0000000000000002e-11  62.1    33  427905  CTCGCTGGCAAGCAGTGCGGGTACTATCGGCGG   1.0 False   negative3204925 2.2.3.1.5   False   SRR1002850  SRR1002850.fasta   heidelberg\n    negative3230678-2.2.2.1.1.1 NODE_3_length_427905_cov_48.1477_ID_5   100.0   33  0   0   1   33  201513  201545  2.0000000000000002e-11  62.1    33  427905  AGCGGTGCGCCAAACCACCCGGAATGATGAGTG   1.0 False   negative3230678 2.2.2.1.1.1 False   SRR1002850  SRR1002850.fasta   heidelberg\n    negative3233869-2.1.1.1.1   NODE_3_length_427905_cov_48.1477_ID_5   100.0   33  0   0   1   33  204704  204736  2.0000000000000002e-11  62.1    33  427905  CAGCGCTGGTATGTGGCTGCACCATCGTCATTA   1.0 False   \n    [Next 196 lines omitted.]\n\n\nAnalysis of a single FASTQ readset\n----------------------------------\n\n.. code-block:: bash\n\n    hansel -s heidelberg -vv -t 4 -o results.tab -O match_results.tab -p SRR5646583_forward.fastqsanger SRR5646583_reverse.fastqsanger\n\n\nContents of ``results.tab``:\n\n.. code-block::\n\n    sample  scheme  subtype all_subtypes    kmers_matching_subtype  are_subtypes_consistent inconsistent_subtypes   n_kmers_matching_all    n_kmers_matching_all_total  n_kmers_matching_positive   n_kmers_matching_positive_total n_kmers_matching_subtype    n_kmers_matching_subtype_total  file_path\n    SRR5646583  heidelberg  2.2.1.1.1.1 2; 2.2; 2.2.1; 2.2.1.1; 2.2.1.1.1; 2.2.1.1.1.1  1983064-2.2.1.1.1.1; 4211912-2.2.1.1.1.1    True        202 202 20  20  2   2   SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger\n\n\nContents of ``match_results.tab``:\n\n.. code-block::\n\n    seq freq    sample  file_path   kmername    is_pos_kmer subtype refposition is_kmer_freq_okay   scheme\n    ACGGTAAAAGAGGACTTGACTGGCGCGATTTGC   68  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    21097-2.2.1.1.1 True    2.2.1.1.1   21097   True    heidelberg\n    AACCGGCGGTATTGGCTGCGGTAAAAGTACCGT   77  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    157792-2.2.1.1.1    True    2.2.1.1.1   157792  True    heidelberg\n    CCGCTGCTTTCTGAAATCGCGCGTCGTTTCAAC   67  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    293728-2.2.1.1  True    2.2.1.1 293728  True    heidelberg\n    GAATAACAGCAAAGTGATCATGATGCCGCTGGA   91  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    607438-2.2.1    True    2.2.1   607438  True    heidelberg\n    CAGTTTTACATCCTGCGAAATGCGCAGCGTCAA   87  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    691203-2.2.1.1  True    2.2.1.1 691203  True    heidelberg\n    CAGGAGAAAGGATGCCAGGGTCAACACGTAAAC   33  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    944885-2.2.1.1.1    True    2.2.1.1.1   944885  True    heidelberg\n    [Next 200 lines omitted.]\n\nAnalysis of all FASTA/FASTQ files in a directory\n------------------------------------------------\n\n.. code-block:: bash\n\n    hansel -s heidelberg -vv --threads <n_cpu> -o results.tab -O match_results.tab -D /path/to/fastas_or_fastqs/\n\n\n``biohansel`` will only attempt to analyze the FASTA/FASTQ files within the specified directory and will not descend into any subdirectories!\n\nMetadata addition to analysis\n-----------------------------\n\nAdd subtype metadata to your analysis results with `-M your-subtype-metadata.tsv`:\n\n.. code-block:: bash\n\n    hansel -s heidelberg -M your-subtype-metadata.tsv -o results.tab -O match_results.tab -D ~/your-reads-directory/\n\nYour metadata table **must** contain a field with the field name `subtype`, e.g.\n\n.. list-table::\n   :header-rows: 1\n\n   * - subtype\n     - host_association\n     - geoloc\n     - genotype_alternative\n   * - 1\n     - human\n     - Canada\n     - A\n   * - 2\n     - cow\n     - USA\n     - B\n\n``biohansel`` accepts metadata table files with the following formats and extensions:\n\n.. list-table:: \n   :header-rows: 1\n\n   * - Format\n     - Extension\n     - Example Filename\n   * - Tab-delimited table/tab-separated values (TSV)\n     - `.tsv`\n     - `my-metadata-table.tsv`\n   * - Tab-delimited table/tab-separated values (TSV)\n     - `.tab`\n     - `my-metadata-table.tab`\n   * - Comma-separated values (CSV)\n     - `.csv`\n     - `my-metadata-table.csv`\n\n\nDevelopment\n===========\n\n\nGet the latest development code using Git from GitHub:\n\n.. code-block:: bash\n\n    git clone https://github.com/phac-nml/biohansel.git\n    cd biohansel/\n    git checkout development\n    # Create a virtual environment (virtualenv) for development\n    virtualenv -p python3 .venv\n    # Activate the newly created virtualenv\n    source .venv/bin/activate\n    # Install biohansel into the virtualenv in \"editable\" mode\n    pip install -e .\n\n\nRun tests with pytest_:\n\n.. code-block:: bash\n\n    # In the biohansel/ root directory, install pytest for running tests\n    pip install pytest\n    # Run all tests in tests/ directory\n    pytest\n    # Or run a specific test module\n    pytest -s tests/test_qc.py\n\n\n\nLegal\n=====\n\nCopyright Government of Canada 2017\n\nWritten by: National Microbiology Laboratory, Public Health Agency of Canada\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis work except in compliance with the License. You may obtain a copy of the\nLicense at:\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n\nContact\n=======\n\n**Gary van Domselaar**: gary.vandomselaar@phac-aspc.gc.ca\n\n\n.. _PyPI: https://pypi.org/project/bio-hansel/\n.. _Conda: https://conda.io/docs/\n.. _Bioconda: https://bioconda.github.io/\n.. _pip: https://pip.pypa.io/en/stable/quickstart/\n.. _numpy: http://www.numpy.org/\n.. _pandas: http://pandas.pydata.org/\n.. _pyahocorasick: http://pyahocorasick.readthedocs.io/en/latest/\n.. _attrs: http://www.attrs.org/en/stable/\n.. _Python: https://www.python.org/\n.. _Galaxy: https://galaxyproject.org/\n.. _pytest: https://docs.pytest.org/en/latest/", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/phac-nml/biohansel", "keywords": "Salmonella enterica Heidelberg Enteritidis SNP kmer subtyping Aho-Corasick", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "bio-hansel", "package_url": "https://pypi.org/project/bio-hansel/", "platform": "", "project_url": "https://pypi.org/project/bio-hansel/", "project_urls": {"Homepage": "https://github.com/phac-nml/biohansel"}, "release_url": "https://pypi.org/project/bio-hansel/2.4.0/", "requires_dist": null, "requires_python": "", "summary": "Subtype microbial whole-genome sequencing (WGS) data using SNV targeting k-mer subtyping schemes.", "version": "2.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/phac-nml/biohansel\" rel=\"nofollow\"><img alt=\"logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/388655114bc901a8aeb49270f41e805988057feb/6c6f676f2e706e67\"></a></p>\n<p><a href=\"https://bioconda.github.io/recipes/bio_hansel/README.html\" rel=\"nofollow\"><img alt=\"conda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d57405c76167565041081cb4647edd8a5620a0a0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f696e7374616c6c253230776974682d62696f636f6e64612d627269676874677265656e2e737667\"></a>\u00a0<a href=\"https://pypi.python.org/pypi/bio_hansel/\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b0fdab196d19f41e9235a421adb9db28c4d74ae/68747470733a2f2f62616467652e667572792e696f2f70792f62696f2d68616e73656c2e737667\"></a>\u00a0<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ee04b9e0c43f92fa3149e4eb7e050b98305f677/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d41706163686525323076322e302d626c75652e737667\"></a>\u00a0\u00a0Master:<a href=\"https://travis-ci.org/phac-nml/biohansel\" rel=\"nofollow\"><img alt=\"citest-master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7c6a5e5fd04df030334ba9a74da5725f4873ecb/68747470733a2f2f7472617669732d63692e6f72672f706861632d6e6d6c2f62696f68616e73656c2e7376673f6272616e63683d6d6173746572\"></a>\u00a0Development:<a href=\"https://travis-ci.org/phac-nml/biohansel\" rel=\"nofollow\"><img alt=\"citest-dev\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c650cfc65ebe92f5b1959a860a4a2cc2493267fa/68747470733a2f2f7472617669732d63692e6f72672f706861632d6e6d6c2f62696f68616e73656c2e7376673f6272616e63683d646576656c6f706d656e74\"></a> <a href=\"https://bio-hansel.readthedocs.io/en/readthedocs/\" rel=\"nofollow\"><img alt=\"rtd\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b507b897cfbaafe5382140c3453a9c92d519671f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7069702f62616467652f3f76657273696f6e3d6c6174657374267374796c653d666c6174\"></a></p>\n<p>Subtype microbial whole-genome sequencing (WGS) data using SNV targeting k-mer subtyping schemes.</p>\n<p>Includes 33 bp k-mer SNV subtyping schemes for <em>Salmonella enterica</em> subsp. enterica serovars Heidelberg, Enteritidis, and Typhimurium genomes developed by Genevieve Labbe et al., and for <em>S</em>. ser Typhi adapted from Wong et al. (<a href=\"https://www.nature.com/articles/ncomms12827\" rel=\"nofollow\">https://www.nature.com/articles/ncomms12827</a>).</p>\n<p>Works on genome assemblies (FASTA files) or reads (FASTQ files)! Accepts Gzipped FASTA/FASTQ files as input!</p>\n<p>Also includes a <em>Mycobacterium tuberculosis</em> lineage scheme adapted from Coll et al. (<a href=\"https://www.nature.com/articles/ncomms5812\" rel=\"nofollow\">https://www.nature.com/articles/ncomms5812</a>) by Daniel Kein.</p>\n<div id=\"citation\">\n<h2>Citation</h2>\n<p>If you find the <tt>biohansel</tt> tool useful, please cite as:</p>\n<blockquote>\nRapid and robust genotyping of highly clonal bacterial pathogens using BioHansel, a SNP-based k-mer search pipeline.\nGenevi\u00e8ve Labb\u00e9, Peter Kruczkiewicz, Philip Mabon, James Robertson, Justin Schonfeld, Daniel Kein, Marisa A. Rankin, Matthew Gopez, Darian Hole, David Son, Natalie Knox, Chad R. Laing, Kyrylo Bessonov, Eduardo Taboada, Catherine Yoshida, Roger P. Johnson, Gary Van Domselaar and John H.E. Nash.\n[Manuscript in preparation]</blockquote>\n</div>\n<div id=\"read-the-docs\">\n<h2>Read_The_Docs</h2>\n<p>More in-depth information on running and installing biohansel can be found on the <a href=\"https://bio-hansel.readthedocs.io/en/readthedocs/\" rel=\"nofollow\">biohansel readthedocs page</a>.</p>\n</div>\n<div id=\"requirements-and-dependencies\">\n<h2>Requirements and Dependencies</h2>\n<p>Each new build of <tt>biohansel</tt> is automatically tested on Linux using <a href=\"https://travis-ci.org/phac-nml/bio_hansel/branches\" rel=\"nofollow\">Continuous Integration</a>. <tt>biohansel</tt> has been confirmed to work on Mac OSX (versions 10.13.5 Beta and 10.12.6) when installed with <a href=\"https://conda.io/docs/\" rel=\"nofollow\">Conda</a>.</p>\n<p>These are the dependencies required for <tt>biohansel</tt>:</p>\n<ul>\n<li><dl>\n<dt><a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> (&gt;=v3.6)</dt>\n<dd><ul>\n<li><a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a> &gt;=1.12.1</li>\n<li><a href=\"http://pandas.pydata.org/\" rel=\"nofollow\">pandas</a> &gt;=0.20.1</li>\n<li><a href=\"http://pyahocorasick.readthedocs.io/en/latest/\" rel=\"nofollow\">pyahocorasick</a> &gt;=1.1.6</li>\n<li><a href=\"http://www.attrs.org/en/stable/\" rel=\"nofollow\">attrs</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"with-conda\">\n<h3>With <a href=\"https://conda.io/docs/\" rel=\"nofollow\">Conda</a></h3>\n<p>Install <tt>biohansel</tt> from <a href=\"https://bioconda.github.io/\" rel=\"nofollow\">Bioconda</a> with <a href=\"https://conda.io/docs/\" rel=\"nofollow\">Conda</a> (<a href=\"https://bioconda.github.io/#install-conda\" rel=\"nofollow\">Conda installation instructions</a>):</p>\n<pre><span class=\"c1\"># setup Conda channels for Bioconda and Conda-Forge (https://bioconda.github.io/#set-up-channels)\n</span>conda config --add channels defaults\nconda config --add channels conda-forge\nconda config --add channels bioconda\n<span class=\"c1\"># install biohansel\n</span>conda install bio_hansel\n</pre>\n</div>\n<div id=\"with-pip-from-pypi\">\n<h3>With <a href=\"https://pip.pypa.io/en/stable/quickstart/\" rel=\"nofollow\">pip</a> from <a href=\"https://pypi.org/project/bio-hansel/\" rel=\"nofollow\">PyPI</a></h3>\n<p>Install <tt>biohansel</tt> from <a href=\"https://pypi.org/project/bio-hansel/\" rel=\"nofollow\">PyPI</a> with <a href=\"https://pip.pypa.io/en/stable/quickstart/\" rel=\"nofollow\">pip</a>:</p>\n<pre>pip install bio_hansel\n</pre>\n</div>\n<div id=\"with-pip-from-github\">\n<h3>With <a href=\"https://pip.pypa.io/en/stable/quickstart/\" rel=\"nofollow\">pip</a> from Github</h3>\n<p>Or install the latest master branch version directly from Github:</p>\n<pre>pip install git+https://github.com/phac-nml/biohansel.git@master\n</pre>\n</div>\n<div id=\"install-into-galaxy-version-17-01\">\n<h3>Install into <a href=\"https://galaxyproject.org/\" rel=\"nofollow\">Galaxy</a> (version &gt;= 17.01)</h3>\n<p>Install <tt>biohansel</tt> from the main <a href=\"https://galaxyproject.org/\" rel=\"nofollow\">Galaxy</a> toolshed:</p>\n<p><a href=\"https://toolshed.g2.bx.psu.edu/view/nml/biohansel/ba6a0af656a6\" rel=\"nofollow\">https://toolshed.g2.bx.psu.edu/view/nml/biohansel/ba6a0af656a6</a></p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>If you run <tt>hansel <span class=\"pre\">-h</span></tt>, you should see the following usage statement:</p>\n<pre>usage: hansel [-h] [-s SCHEME] [--scheme-name SCHEME_NAME]\n              [-M SCHEME_METADATA] [-p forward_reads reverse_reads]\n              [-i fasta_path genome_name] [-D INPUT_DIRECTORY]\n              [-o OUTPUT_SUMMARY] [-O OUTPUT_KMER_RESULTS]\n              [-S OUTPUT_SIMPLE_SUMMARY] [--force] [--json]\n              [--min-kmer-freq MIN_KMER_FREQ]\n              [--max-kmer-freq MAX_KMER_FREQ]\n              [--low-cov-depth-freq LOW_COV_DEPTH_FREQ]\n              [--max-missing-kmers MAX_MISSING_KMERS]\n              [--min-ambiguous-kmers MIN_AMBIGUOUS_KMERS]\n              [--low-cov-warning LOW_COV_WARNING]\n              [--max-intermediate-kmers MAX_INTERMEDIATE_KMERS]\n              [--max-degenerate-kmers MAX_DEGENERATE_KMERS] [-t THREADS]\n              [-v] [-V]\n              [F [F ...]]\n\nSubtype microbial genomes using SNV targeting k-mer subtyping schemes.\nIncludes schemes for Salmonella enterica spp. enterica serovar Heidelberg, Enteritidis, Typhi, and Typhimurium subtyping. Also includes a Mycobacterium tuberculosis scheme called 'tb_lineage'.\nDeveloped by Genevi\u00e8ve Labb\u00e9, James Robertson, Peter Kruczkiewicz, Marisa Rankin, Matthew Gopez, Chad R. Laing, Philip Mabon, Kim Ziebell, Aleisha R. Reimer, Lorelee Tschetter, Gary Van Domselaar, Sadjia Bekal, Kimberley A. MacDonald, Linda Hoang, Linda Chui, Danielle Daignault, Durda Slavic, Frank Pollari, E. Jane Parmley, David Son, Darian Hole, Philip Mabon, Elissa Giang, Lok Kan Lee, Jonathan Moffat, Marisa Rankin, Joanne MacKinnon, Roger Johnson, John H.E. Nash.\n\npositional arguments:\n  F                     Input genome FASTA/FASTQ files (can be Gzipped)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SCHEME, --scheme SCHEME\n                        Scheme to use for subtyping (built-in: \"heidelberg\",\n                        \"enteritidis\", \"typhi\", \"typhimurium\", \"tb_lineage\"; OR user-specified:\n                        /path/to/user/scheme)\n  --scheme-name SCHEME_NAME\n                        Custom user-specified SNP substyping scheme name\n  -M SCHEME_METADATA, --scheme-metadata scheme_metadata\n                        Scheme subtype metadata table (.TSV format accepted;\n                        must contain column called \"subtype\")\n  -p forward_reads reverse_reads, --paired-reads forward_reads reverse_reads\n                        FASTQ paired-end reads\n  -i fasta_path genome_name, --input-fasta-genome-name fasta_path genome_name\n                        fasta file path to genome name pair\n  -D INPUT_DIRECTORY, --input-directory INPUT_DIRECTORY\n                        directory of input fasta files (.fasta|.fa|.fna) or\n                        FASTQ files (paired FASTQ should have same basename\n                        with \"_\\d\\.(fastq|fq)\" postfix to be automatically\n                        paired) (files can be Gzipped)\n  -o OUTPUT_SUMMARY, --output-summary OUTPUT_SUMMARY\n                        Subtyping summary output path (tab-delimited)\n  -O OUTPUT_KMER_RESULTS, --output-kmer-results OUTPUT_KMER_RESULTS\n                        Subtyping kmer matching output path (tab-delimited)\n  -S OUTPUT_SIMPLE_SUMMARY, --output-simple-summary OUTPUT_SIMPLE_SUMMARY\n                        Subtyping simple summary output path\n  --force               Force existing output files to be overwritten\n  --json                Output JSON representation of output files\n  --min-kmer-freq MIN_KMER_FREQ\n                        Min k-mer freq/coverage\n  --max-kmer-freq MAX_KMER_FREQ\n                        Max k-mer freq/coverage\n  --low-cov-depth-freq LOW_COV_DEPTH_FREQ\n                        Frequencies below this coverage are considered low\n                        coverage\n  --max-missing-kmers MAX_MISSING_KMERS\n                        Decimal proportion of maximum allowable missing kmers\n                        before being considered an error. (0.0 - 1.0)\n  --min-ambiguous-kmers MIN_AMBIGUOUS_KMERS\n                        Minimum number of missing kmers to be considered an\n                        ambiguous result\n  --low-cov-warning LOW_COV_WARNING\n                        Overall kmer coverage below this value will trigger a\n                        low coverage warning\n  --max-intermediate-kmers MAX_INTERMEDIATE_KMERS\n                        Decimal proportion of maximum allowable missing kmers\n                        to be considered an intermediate subtype. (0.0 - 1.0)\n  --max-degenerate-kmers MAX_DEGENERATE_KMERS\n                        Maximum number of scheme k-mers allowed before\n                        quitting with a usage warning. Default is 100,000\n  -t THREADS, --threads THREADS\n                        Number of parallel threads to run analysis (default=1)\n  -v, --verbose         Logging verbosity level (-v == show warnings; -vvv ==\n                        show debug info)\n  -V, --version         show program's version number and exit\n</pre>\n</div>\n<div id=\"example-usage\">\n<h2>Example Usage</h2>\n<div id=\"analysis-of-a-single-fasta-file\">\n<h3>Analysis of a single FASTA file</h3>\n<pre>hansel -s heidelberg -vv -o results.tab -O match_results.tab /path/to/SRR1002850.fasta\n</pre>\n<p>Contents of <tt>results.tab</tt>:</p>\n<pre>sample  scheme  subtype all_subtypes    kmers_matching_subtype  are_subtypes_consistent inconsistent_subtypes   n_kmers_matching_all    n_kmers_matching_all_total  n_kmers_matching_positive   n_kmers_matching_positive_total n_kmers_matching_subtype    n_kmers_matching_subtype_total  file_path\nSRR1002850  heidelberg  2.2.2.2.1.4 2; 2.2; 2.2.2; 2.2.2.2; 2.2.2.2.1; 2.2.2.2.1.4  1037658-2.2.2.2.1.4; 2154958-2.2.2.2.1.4; 3785187-2.2.2.2.1.4   True        202 202 17  17  3   3   SRR1002850.fasta\n</pre>\n<p>Contents of <tt>match_results.tab</tt>:</p>\n<pre>kmername    stitle  pident  length  mismatch    gapopen qstart  qend    sstart  send    evalue  bitscore    qlen    slen    seq coverage    is_trunc    refposition subtype is_pos_kmer sample  file_path   scheme\n775920-2.2.2.2  NODE_2_length_512016_cov_46.4737_ID_3   100.0   33  0   0   1   33  474875  474907  2.0000000000000002e-11  62.1    33  512016  GTTCAGGTGCTACCGAGGATCGTTTTTGGTGCG   1.0 False   775920  2.2.2.2 True    SRR1002850  SRR1002850.fasta   heidelberg\nnegative3305400-2.1.1.1 NODE_3_length_427905_cov_48.1477_ID_5   100.0   33  0   0   1   33  276235  276267  2.0000000000000002e-11  62.1    33  427905  CATCGTGAAGCAGAACAGACGCGCATTCTTGCT   1.0 False   negative3305400 2.1.1.1 False   SRR1002850  SRR1002850.fasta   heidelberg\nnegative3200083-2.1 NODE_3_length_427905_cov_48.1477_ID_5   100.0   33  0   0   1   33  170918  170950  2.0000000000000002e-11  62.1    33  427905  ACCCGGTCTACCGCAAAATGGAAAGCGATATGC   1.0 False   negative3200083 2.1 False   SRR1002850  SRR1002850.fasta   heidelberg\nnegative3204925-2.2.3.1.5   NODE_3_length_427905_cov_48.1477_ID_5   100.0   33  0   0   1   33  175760  175792  2.0000000000000002e-11  62.1    33  427905  CTCGCTGGCAAGCAGTGCGGGTACTATCGGCGG   1.0 False   negative3204925 2.2.3.1.5   False   SRR1002850  SRR1002850.fasta   heidelberg\nnegative3230678-2.2.2.1.1.1 NODE_3_length_427905_cov_48.1477_ID_5   100.0   33  0   0   1   33  201513  201545  2.0000000000000002e-11  62.1    33  427905  AGCGGTGCGCCAAACCACCCGGAATGATGAGTG   1.0 False   negative3230678 2.2.2.1.1.1 False   SRR1002850  SRR1002850.fasta   heidelberg\nnegative3233869-2.1.1.1.1   NODE_3_length_427905_cov_48.1477_ID_5   100.0   33  0   0   1   33  204704  204736  2.0000000000000002e-11  62.1    33  427905  CAGCGCTGGTATGTGGCTGCACCATCGTCATTA   1.0 False\n[Next 196 lines omitted.]\n</pre>\n</div>\n<div id=\"analysis-of-a-single-fastq-readset\">\n<h3>Analysis of a single FASTQ readset</h3>\n<pre>hansel -s heidelberg -vv -t <span class=\"m\">4</span> -o results.tab -O match_results.tab -p SRR5646583_forward.fastqsanger SRR5646583_reverse.fastqsanger\n</pre>\n<p>Contents of <tt>results.tab</tt>:</p>\n<pre>sample  scheme  subtype all_subtypes    kmers_matching_subtype  are_subtypes_consistent inconsistent_subtypes   n_kmers_matching_all    n_kmers_matching_all_total  n_kmers_matching_positive   n_kmers_matching_positive_total n_kmers_matching_subtype    n_kmers_matching_subtype_total  file_path\nSRR5646583  heidelberg  2.2.1.1.1.1 2; 2.2; 2.2.1; 2.2.1.1; 2.2.1.1.1; 2.2.1.1.1.1  1983064-2.2.1.1.1.1; 4211912-2.2.1.1.1.1    True        202 202 20  20  2   2   SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger\n</pre>\n<p>Contents of <tt>match_results.tab</tt>:</p>\n<pre>seq freq    sample  file_path   kmername    is_pos_kmer subtype refposition is_kmer_freq_okay   scheme\nACGGTAAAAGAGGACTTGACTGGCGCGATTTGC   68  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    21097-2.2.1.1.1 True    2.2.1.1.1   21097   True    heidelberg\nAACCGGCGGTATTGGCTGCGGTAAAAGTACCGT   77  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    157792-2.2.1.1.1    True    2.2.1.1.1   157792  True    heidelberg\nCCGCTGCTTTCTGAAATCGCGCGTCGTTTCAAC   67  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    293728-2.2.1.1  True    2.2.1.1 293728  True    heidelberg\nGAATAACAGCAAAGTGATCATGATGCCGCTGGA   91  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    607438-2.2.1    True    2.2.1   607438  True    heidelberg\nCAGTTTTACATCCTGCGAAATGCGCAGCGTCAA   87  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    691203-2.2.1.1  True    2.2.1.1 691203  True    heidelberg\nCAGGAGAAAGGATGCCAGGGTCAACACGTAAAC   33  SRR5646583 SRR5646583_forward.fastqsanger; SRR5646583_reverse.fastqsanger    944885-2.2.1.1.1    True    2.2.1.1.1   944885  True    heidelberg\n[Next 200 lines omitted.]\n</pre>\n</div>\n<div id=\"analysis-of-all-fasta-fastq-files-in-a-directory\">\n<h3>Analysis of all FASTA/FASTQ files in a directory</h3>\n<pre>hansel -s heidelberg -vv --threads &lt;n_cpu&gt; -o results.tab -O match_results.tab -D /path/to/fastas_or_fastqs/\n</pre>\n<p><tt>biohansel</tt> will only attempt to analyze the FASTA/FASTQ files within the specified directory and will not descend into any subdirectories!</p>\n</div>\n<div id=\"metadata-addition-to-analysis\">\n<h3>Metadata addition to analysis</h3>\n<p>Add subtype metadata to your analysis results with <cite>-M your-subtype-metadata.tsv</cite>:</p>\n<pre>hansel -s heidelberg -M your-subtype-metadata.tsv -o results.tab -O match_results.tab -D ~/your-reads-directory/\n</pre>\n<p>Your metadata table <strong>must</strong> contain a field with the field name <cite>subtype</cite>, e.g.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>subtype</th>\n<th>host_association</th>\n<th>geoloc</th>\n<th>genotype_alternative</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>1</td>\n<td>human</td>\n<td>Canada</td>\n<td>A</td>\n</tr>\n<tr><td>2</td>\n<td>cow</td>\n<td>USA</td>\n<td>B</td>\n</tr>\n</tbody>\n</table>\n<p><tt>biohansel</tt> accepts metadata table files with the following formats and extensions:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Format</th>\n<th>Extension</th>\n<th>Example Filename</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Tab-delimited table/tab-separated values (TSV)</td>\n<td><cite>.tsv</cite></td>\n<td><cite>my-metadata-table.tsv</cite></td>\n</tr>\n<tr><td>Tab-delimited table/tab-separated values (TSV)</td>\n<td><cite>.tab</cite></td>\n<td><cite>my-metadata-table.tab</cite></td>\n</tr>\n<tr><td>Comma-separated values (CSV)</td>\n<td><cite>.csv</cite></td>\n<td><cite>my-metadata-table.csv</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Get the latest development code using Git from GitHub:</p>\n<pre>git clone https://github.com/phac-nml/biohansel.git\n<span class=\"nb\">cd</span> biohansel/\ngit checkout development\n<span class=\"c1\"># Create a virtual environment (virtualenv) for development\n</span>virtualenv -p python3 .venv\n<span class=\"c1\"># Activate the newly created virtualenv\n</span><span class=\"nb\">source</span> .venv/bin/activate\n<span class=\"c1\"># Install biohansel into the virtualenv in \"editable\" mode\n</span>pip install -e .\n</pre>\n<p>Run tests with <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>:</p>\n<pre><span class=\"c1\"># In the biohansel/ root directory, install pytest for running tests\n</span>pip install pytest\n<span class=\"c1\"># Run all tests in tests/ directory\n</span>pytest\n<span class=\"c1\"># Or run a specific test module\n</span>pytest -s tests/test_qc.py\n</pre>\n</div>\n<div id=\"legal\">\n<h2>Legal</h2>\n<p>Copyright Government of Canada 2017</p>\n<p>Written by: National Microbiology Laboratory, Public Health Agency of Canada</p>\n<p>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use\nthis work except in compliance with the License. You may obtain a copy of the\nLicense at:</p>\n<p><a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></p>\n<p>Unless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.</p>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p><strong>Gary van Domselaar</strong>: <a href=\"mailto:gary.vandomselaar%40phac-aspc.gc.ca\">gary<span>.</span>vandomselaar<span>@</span>phac-aspc<span>.</span>gc<span>.</span>ca</a></p>\n</div>\n\n          </div>"}, "last_serial": 5968450, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c7178ecd9e0f30e7669fe497188d7e49", "sha256": "76cac1d4d7e18bbee01c35aebcc3572eb20bbf30b204e27ab389e2d3ec0e3b85"}, "downloads": -1, "filename": "bio_hansel-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c7178ecd9e0f30e7669fe497188d7e49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52781, "upload_time": "2017-09-12T04:37:37", "upload_time_iso_8601": "2017-09-12T04:37:37.647536Z", "url": "https://files.pythonhosted.org/packages/36/21/07f9c1e48794ea712d5496fb58cfea3ca8539f16ea04cf6e2e78c9309560/bio_hansel-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a7f5bb1055f5f38923d21956b535ab1e", "sha256": "e33110359f35c7be2f43d3a49f9f9eee7c8e6d2381aa8c4be38d016178ce8d13"}, "downloads": -1, "filename": "bio_hansel-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a7f5bb1055f5f38923d21956b535ab1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42715, "upload_time": "2017-10-04T15:10:57", "upload_time_iso_8601": "2017-10-04T15:10:57.645640Z", "url": "https://files.pythonhosted.org/packages/37/9f/37c01a6cd96fa90791a6a579676cd909ee6b11598d58f5179704382d256e/bio_hansel-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "b7f622a24d443d9177c0020ac5b8a2d0", "sha256": "2b7160903f159de16fbebb122c578f2267fa9c4f9aba23e0e32aeddb4ea12321"}, "downloads": -1, "filename": "bio_hansel-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b7f622a24d443d9177c0020ac5b8a2d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47222, "upload_time": "2017-11-30T21:41:51", "upload_time_iso_8601": "2017-11-30T21:41:51.285892Z", "url": "https://files.pythonhosted.org/packages/08/67/e8d5025b10d1e6cae208c738aa3e64c982d25e5f4e8ffb4c79da356edab5/bio_hansel-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6d3e8b61854e8e942d64c9e41373d223", "sha256": "1c708d7c075f3b3a65289d192860ee7b5c30a72d7f9c78f1d106f9b0e3dbba43"}, "downloads": -1, "filename": "bio_hansel-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6d3e8b61854e8e942d64c9e41373d223", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41594, "upload_time": "2017-12-18T15:31:07", "upload_time_iso_8601": "2017-12-18T15:31:07.604142Z", "url": "https://files.pythonhosted.org/packages/4f/24/9d80fe3fcaeadcc8b6273c286dfc79509e56cdcca78a1da3cad700081afe/bio_hansel-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "baac5f895379f73a7bf5b5e5fc91823a", "sha256": "67c0efb2d41e660376e9561f5ba18d21b2ad63bb43a2a75691ad9f1b11d94150"}, "downloads": -1, "filename": "bio_hansel-1.1.1.tar.gz", "has_sig": false, "md5_digest": "baac5f895379f73a7bf5b5e5fc91823a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41488, "upload_time": "2018-01-12T20:12:26", "upload_time_iso_8601": "2018-01-12T20:12:26.852148Z", "url": "https://files.pythonhosted.org/packages/94/d0/d77a0810e1b942d240f4b2576f194524b4464fd6fd2cae4dd41420427b2d/bio_hansel-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "d8a2419bf7f5e76f0d4d92960276d459", "sha256": "46d0e3c5bd12efcc1b5846a9cf589bc1c283a7f0ae0514e6d47e048cf5803bf0"}, "downloads": -1, "filename": "bio_hansel-1.1.2.tar.gz", "has_sig": false, "md5_digest": "d8a2419bf7f5e76f0d4d92960276d459", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41515, "upload_time": "2018-01-22T22:01:45", "upload_time_iso_8601": "2018-01-22T22:01:45.613088Z", "url": "https://files.pythonhosted.org/packages/2a/08/11be644c951bb1d7487bd1660147c2c76d5543686482d082bebc8a5e0914/bio_hansel-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "48bced8f0383f023d60a8f4fc47333eb", "sha256": "69f407b085287a3954f931481556848899d07dab977a36af39376cba761019ed"}, "downloads": -1, "filename": "bio_hansel-1.1.3.tar.gz", "has_sig": false, "md5_digest": "48bced8f0383f023d60a8f4fc47333eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41509, "upload_time": "2018-01-22T22:25:35", "upload_time_iso_8601": "2018-01-22T22:25:35.216572Z", "url": "https://files.pythonhosted.org/packages/91/b2/87bc4eb081fcf3126896a54d5f93dea003baeac48cd817ec55ac459aebd7/bio_hansel-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "013416d5c8ecb24cf38348d597115ba9", "sha256": "4b593703559a8ed985546df9510f7dfb3b82d3b5e8901da6d1d1beaad296f754"}, "downloads": -1, "filename": "bio_hansel-1.1.4.tar.gz", "has_sig": false, "md5_digest": "013416d5c8ecb24cf38348d597115ba9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42558, "upload_time": "2018-01-22T22:37:22", "upload_time_iso_8601": "2018-01-22T22:37:22.836089Z", "url": "https://files.pythonhosted.org/packages/08/1f/46855925602447a600b0e629ae37d1203669c8a8f051802d59a7f9502a14/bio_hansel-1.1.4.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "6a8c67bff40ab300b66d4e52c901be5a", "sha256": "d2764367fa3a082efe45f34f3f45d8d48cd8884d469a60522b6a3ecc42ce0e47"}, "downloads": -1, "filename": "bio_hansel-1.2.0.tar.gz", "has_sig": false, "md5_digest": "6a8c67bff40ab300b66d4e52c901be5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41957, "upload_time": "2018-02-14T17:53:10", "upload_time_iso_8601": "2018-02-14T17:53:10.408146Z", "url": "https://files.pythonhosted.org/packages/39/00/f5018399bc5009d27ce7360e4ff8c3cb62f3d82347cb3508a1302062c6ef/bio_hansel-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "22b64f5a517673ef7a7535a1b1a8c657", "sha256": "0038fd4b27b02873e6f0543c9410e2a4764f8d4143bcd06e512341408d436e22"}, "downloads": -1, "filename": "bio_hansel-1.3.0.tar.gz", "has_sig": false, "md5_digest": "22b64f5a517673ef7a7535a1b1a8c657", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42498, "upload_time": "2018-04-05T14:50:03", "upload_time_iso_8601": "2018-04-05T14:50:03.238459Z", "url": "https://files.pythonhosted.org/packages/94/d4/e8d457bf05960dd6d8e1494947fc534e1b4a4ce905723fca3d0e367df020/bio_hansel-1.3.0.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "74a09f5116e4133a9292b4084ae4db77", "sha256": "d36f129ea84d35ab2941cd15314298e2fadc0ec7340fd0f1d1c778769abc3131"}, "downloads": -1, "filename": "bio_hansel-1.3.2.tar.gz", "has_sig": false, "md5_digest": "74a09f5116e4133a9292b4084ae4db77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43468, "upload_time": "2018-04-30T21:00:33", "upload_time_iso_8601": "2018-04-30T21:00:33.113902Z", "url": "https://files.pythonhosted.org/packages/91/37/979481ad8997ea8f78712c245ddcf080ca04ca67c0e6841be4b763d8b723/bio_hansel-1.3.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "448d2b52e6a9bb83bee253718d65d5aa", "sha256": "057f1a41d896c6db48cad1127d9f13eb730240b55f5c1024e55309caa8d20faa"}, "downloads": -1, "filename": "bio_hansel-2.0.0.tar.gz", "has_sig": false, "md5_digest": "448d2b52e6a9bb83bee253718d65d5aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36297, "upload_time": "2018-05-03T20:25:15", "upload_time_iso_8601": "2018-05-03T20:25:15.818186Z", "url": "https://files.pythonhosted.org/packages/99/79/be7120bc85a74d2e680e88279af72cb3e56e8c84de924bd1c1746e978f57/bio_hansel-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "91441ad44b04f6dc44b9bed6b0bc6ddd", "sha256": "adf185439c1b96a80b70cdc2368464d58b23f798134c6328e35b811bbcff0742"}, "downloads": -1, "filename": "bio_hansel-2.1.0.tar.gz", "has_sig": false, "md5_digest": "91441ad44b04f6dc44b9bed6b0bc6ddd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39286, "upload_time": "2018-07-31T18:11:23", "upload_time_iso_8601": "2018-07-31T18:11:23.535237Z", "url": "https://files.pythonhosted.org/packages/86/f5/47e50fb437164b1c361c5d82304d6e51272af9c94f6265ca325d59bad796/bio_hansel-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "6ca6c89798ae7da97e1d9e0b3fb6a307", "sha256": "726ea3c18b5868e740a48a6f907b7689cab6b32c9fb3cf7edf81b7b571f0b1e4"}, "downloads": -1, "filename": "bio_hansel-2.1.1.tar.gz", "has_sig": false, "md5_digest": "6ca6c89798ae7da97e1d9e0b3fb6a307", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39176, "upload_time": "2019-02-19T23:51:37", "upload_time_iso_8601": "2019-02-19T23:51:37.317190Z", "url": "https://files.pythonhosted.org/packages/f8/60/4062f21a5809c75d8120c6f828923e4092c4253f855f113ca2bd74b48749/bio_hansel-2.1.1.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "44b59c308cca35741b9ba2146d5fb669", "sha256": "e47bfcaf55e35089a700130dddfd025caab6c4e8999c62ccf6cdaf573b609389"}, "downloads": -1, "filename": "bio_hansel-2.2.0.tar.gz", "has_sig": false, "md5_digest": "44b59c308cca35741b9ba2146d5fb669", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57535, "upload_time": "2019-05-19T18:03:26", "upload_time_iso_8601": "2019-05-19T18:03:26.702088Z", "url": "https://files.pythonhosted.org/packages/c5/52/d5ce10e42b5cb4962aa5320e8eb821953bb250ba3a3e4f6d0211e5cd8a6d/bio_hansel-2.2.0.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "b35970333356cf9c6fe44ad1b1d03e98", "sha256": "bb6057be059e76d029a92063fffaacb37759875804d04dafff59cfc1b5933c39"}, "downloads": -1, "filename": "bio_hansel-2.4.0.tar.gz", "has_sig": false, "md5_digest": "b35970333356cf9c6fe44ad1b1d03e98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67157, "upload_time": "2019-10-13T19:20:33", "upload_time_iso_8601": "2019-10-13T19:20:33.319101Z", "url": "https://files.pythonhosted.org/packages/e8/73/a69b388cfcc267836c55a816565fd9c64e682ef2db51f0f9c816c9f952a1/bio_hansel-2.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b35970333356cf9c6fe44ad1b1d03e98", "sha256": "bb6057be059e76d029a92063fffaacb37759875804d04dafff59cfc1b5933c39"}, "downloads": -1, "filename": "bio_hansel-2.4.0.tar.gz", "has_sig": false, "md5_digest": "b35970333356cf9c6fe44ad1b1d03e98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67157, "upload_time": "2019-10-13T19:20:33", "upload_time_iso_8601": "2019-10-13T19:20:33.319101Z", "url": "https://files.pythonhosted.org/packages/e8/73/a69b388cfcc267836c55a816565fd9c64e682ef2db51f0f9c816c9f952a1/bio_hansel-2.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:25 2020"}