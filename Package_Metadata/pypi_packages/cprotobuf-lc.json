{"info": {"author": "huangyi", "author_email": "yi.codeplayer@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "cprotobuf maintained by LeanCloud\n\n- Add generated ``cprotobuf.c`` back into repo, for installation without Cython\n- Switched to setuptools\n\ncprotobuf\n=========\n\nA minimal fast protobuf implementation with cython.\nBenchmark shows that it's much faster than google official expremental cpp-python implementation.\n\nI've been using it in production since 2013, only tested with python2.7, feedback on other python release is welcome.\n\nBenchmark\n=========\n\n.. code-block:: bash\n\n  $ ./setup.py build_ext --inplace\n  $ cd benchmark\n  $ ./bench.sh\n  encode[google official pure python]:\n  10 loops, best of 3: 68.8 msec per loop\n  encode[google official cpp python]:\n  100 loops, best of 3: 19.4 msec per loop\n  encode[py-protobuf][cprotobuf]:\n  100 loops, best of 3: 3.58 msec per loop\n  decode[google official pure python]:\n  10 loops, best of 3: 47.5 msec per loop\n  decode[google official cpp python]:\n  100 loops, best of 3: 4.55 msec per loop\n  decode[py-protobuf][cprotobuf]:\n  100 loops, best of 3: 3.98 msec per loop\n\nTutorial\n========\n\nUse plugin\n----------\n\nYou write a ``person.proto`` file like this:\n\n.. code-block:: protobuf\n\n    package foo;\n\n    message Person {\n      required int32 id = 1;\n      required string name = 2;\n      optional string email = 3;\n    }\n\nAnd a ``people.proto`` file like this:\n\n.. code-block:: protobuf\n\n    package foo;\n    import \"person.proto\";\n\n    message People {\n      repeated Person people = 1;\n    }\n\nThen you compile it with provided plugin:\n\n.. code-block:: bash\n\n    $ protoc --cprotobuf_out=. person.proto people.proto\n\nIf you have trouble to run a protobuf plugin like on windows, you can directly run ``protoc-gen-cprotobuf`` like this:\n\n.. code-block:: bash\n\n    $ protoc -ofoo.pb person.proto people.proto\n    $ protoc-gen-cprotobuf foo.pb -d .\n\nThen you get a python module ``foo_pb.py`` , cprotobuf generate a python module for each package rather than each protocol file.\n\nThe generated code is quite readable:\n\n.. code-block:: python\n\n    # coding: utf-8\n    from cprotobuf import ProtoEntity, Field\n    # file: person.proto\n    class Person(ProtoEntity):\n        id              = Field('int32',\t1)\n        name            = Field('string',\t2)\n        email           = Field('string',\t3, required=False)\n\n    # file: people.proto\n    class People(ProtoEntity):\n        people          = Field(Person,\t1, repeated=True)\n\nActually, if you only use python, you can write this python module, avoid code generation.\n\nThe API\n-------\n\nNow, you have this lovely python module, how to parse and serialize messages?\n\nWhen design this package, We try to minimise the effort of migration, so we keep the names of api akin to protocol buffer's.\n\n.. note::\n    \n    Since this is no need to reuse a message instance and call ``Clear`` on it in python, It don't provide ``Clear`` api,\n    so ``ParseFromString`` is more like ``MergeFromString`` in official implementation, because it don't call ``Clear`` at first.\n\nencode/decode\n~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    >>> from foo_pb import Person, People\n    >>> msg = People()\n    >>> msg.people.add(\n    ...    id = 1,\n    ...    name = 'jim',\n    ...    email = 'jim@gmail.com',\n    ... )\n    >>> s = msg.SerializeToString()\n    >>> msg2 = People()\n    >>> msg2.ParseFromString(s)\n    >>> len(msg2)\n    1\n    >>> msg2.people[0].name\n    'jim'\n\nreflection\n~~~~~~~~~~\n\n.. code-block:: python\n\n    >>> from foo_pb import Person, People\n    >>> dir(Person._fields[0])\n    ['__class__', '__delattr__', '__doc__', '__format__', '__get__', '__getattribute__', '__hash__', '__init__', '__new__', '__pyx_vtable__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'index', 'name', 'packed', 'repeated', 'required', 'wire_type']\n    >>> Person._fields[0].name\n    'email'\n    >>> Person._fieldsmap\n    {1: <cprotobuf.Field object at 0xb74a538c>, 2: <cprotobuf.Field object at 0xb74a541c>, 3: <cprotobuf.Field object at 0xb74a5c8c>}\n    >>> Person._fieldsmap_by_name\n    {'email': <cprotobuf.Field object at 0xb74a5c8c>, 'name': <cprotobuf.Field object at 0xb74a541c>, 'id': <cprotobuf.Field object at 0xb74a538c>}\n\nrepeated container\n~~~~~~~~~~~~~~~~~~\n\nWe use ``RepeatedContainer`` to represent repeated field, ``RepeatedContainer`` is inherited from ``list``, so you can manipulate it like a ``list``, or with apis like google's implementation.\n\n.. code-block:: python\n\n    >>> from foo_pb import Person, People\n    >>> msg = People()\n    >>> msg.people.add(\n    ...    id = 1,\n    ...    name = 'jim',\n    ...    email = 'jim@gmail.com',\n    ... )\n    >>> p = msg.people.add()\n    >>> p.id = 2\n    >>> p.name = 'jake'\n    >>> p.email = 'jake@gmail.com'\n    >>> p2 = Person(id=3, name='lucy', email='lucy@gmail.com')\n    >>> msg.people.append(p2)\n    >>> msg.people.append({\n    ...     'id' : 4,\n    ...     'name' : 'lily',\n    ...     'email' : 'lily@gmail.com',\n    ... })\n\nencode raw data fast\n~~~~~~~~~~~~~~~~~~~~\n\nIf you already have your messages represented as ``list`` and ``dict``, you can encode it without constructing intermidiate objects, getting ride of a lot of overhead:\n\n.. code-block:: python\n\n    >>> from cprotobuf import encode_data\n    >>> from foo_pb import Person, People\n    >>> s = encode_data(People, [\n    ...     { 'id': 1, 'name': 'tom', 'email': 'tom@gmail.com' }\n    ... ])\n    >>> msg = People()\n    >>> msg.ParseFromString(s)\n    >>> msg.people[0].name\n    'tom'\n\nRun Tests\n=========\n\n.. code-block::\n\n    $ nosetests\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/leancloud/cprotobuf", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cprotobuf-lc", "package_url": "https://pypi.org/project/cprotobuf-lc/", "platform": "", "project_url": "https://pypi.org/project/cprotobuf-lc/", "project_urls": {"Homepage": "https://github.com/leancloud/cprotobuf"}, "release_url": "https://pypi.org/project/cprotobuf-lc/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "cprotobuf maintained by LeanCloud", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>cprotobuf maintained by LeanCloud</p>\n<ul>\n<li>Add generated <tt>cprotobuf.c</tt> back into repo, for installation without Cython</li>\n<li>Switched to setuptools</li>\n</ul>\n<div id=\"cprotobuf\">\n<h2>cprotobuf</h2>\n<p>A minimal fast protobuf implementation with cython.\nBenchmark shows that it\u2019s much faster than google official expremental cpp-python implementation.</p>\n<p>I\u2019ve been using it in production since 2013, only tested with python2.7, feedback on other python release is welcome.</p>\n</div>\n<div id=\"benchmark\">\n<h2>Benchmark</h2>\n<pre>$ ./setup.py build_ext --inplace\n$ <span class=\"nb\">cd</span> benchmark\n$ ./bench.sh\nencode<span class=\"o\">[</span>google official pure python<span class=\"o\">]</span>:\n<span class=\"m\">10</span> loops, best of <span class=\"m\">3</span>: <span class=\"m\">68</span>.8 msec per loop\nencode<span class=\"o\">[</span>google official cpp python<span class=\"o\">]</span>:\n<span class=\"m\">100</span> loops, best of <span class=\"m\">3</span>: <span class=\"m\">19</span>.4 msec per loop\nencode<span class=\"o\">[</span>py-protobuf<span class=\"o\">][</span>cprotobuf<span class=\"o\">]</span>:\n<span class=\"m\">100</span> loops, best of <span class=\"m\">3</span>: <span class=\"m\">3</span>.58 msec per loop\ndecode<span class=\"o\">[</span>google official pure python<span class=\"o\">]</span>:\n<span class=\"m\">10</span> loops, best of <span class=\"m\">3</span>: <span class=\"m\">47</span>.5 msec per loop\ndecode<span class=\"o\">[</span>google official cpp python<span class=\"o\">]</span>:\n<span class=\"m\">100</span> loops, best of <span class=\"m\">3</span>: <span class=\"m\">4</span>.55 msec per loop\ndecode<span class=\"o\">[</span>py-protobuf<span class=\"o\">][</span>cprotobuf<span class=\"o\">]</span>:\n<span class=\"m\">100</span> loops, best of <span class=\"m\">3</span>: <span class=\"m\">3</span>.98 msec per loop\n</pre>\n</div>\n<div id=\"tutorial\">\n<h2>Tutorial</h2>\n<div id=\"use-plugin\">\n<h3>Use plugin</h3>\n<p>You write a <tt>person.proto</tt> file like this:</p>\n<pre><span class=\"kn\">package</span> <span class=\"nn\">foo</span><span class=\"p\">;</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">Person</span> <span class=\"p\">{</span>\n  <span class=\"k\">required</span> <span class=\"kt\">int32</span> <span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">required</span> <span class=\"kt\">string</span> <span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"k\">optional</span> <span class=\"kt\">string</span> <span class=\"na\">email</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p>And a <tt>people.proto</tt> file like this:</p>\n<pre><span class=\"kn\">package</span> <span class=\"nn\">foo</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s\">\"person.proto\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">People</span> <span class=\"p\">{</span>\n  <span class=\"k\">repeated</span> <span class=\"n\">Person</span> <span class=\"na\">people</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Then you compile it with provided plugin:</p>\n<pre>$ protoc --cprotobuf_out<span class=\"o\">=</span>. person.proto people.proto\n</pre>\n<p>If you have trouble to run a protobuf plugin like on windows, you can directly run <tt><span class=\"pre\">protoc-gen-cprotobuf</span></tt> like this:</p>\n<pre>$ protoc -ofoo.pb person.proto people.proto\n$ protoc-gen-cprotobuf foo.pb -d .\n</pre>\n<p>Then you get a python module <tt>foo_pb.py</tt> , cprotobuf generate a python module for each package rather than each protocol file.</p>\n<p>The generated code is quite readable:</p>\n<pre><span class=\"c1\"># coding: utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cprotobuf</span> <span class=\"kn\">import</span> <span class=\"n\">ProtoEntity</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"c1\"># file: person.proto</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">ProtoEntity</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span>              <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'int32'</span><span class=\"p\">,</span>        <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span>            <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'string'</span><span class=\"p\">,</span>       <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">email</span>           <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'string'</span><span class=\"p\">,</span>       <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># file: people.proto</span>\n<span class=\"k\">class</span> <span class=\"nc\">People</span><span class=\"p\">(</span><span class=\"n\">ProtoEntity</span><span class=\"p\">):</span>\n    <span class=\"n\">people</span>          <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">repeated</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Actually, if you only use python, you can write this python module, avoid code generation.</p>\n</div>\n<div id=\"the-api\">\n<h3>The API</h3>\n<p>Now, you have this lovely python module, how to parse and serialize messages?</p>\n<p>When design this package, We try to minimise the effort of migration, so we keep the names of api akin to protocol buffer\u2019s.</p>\n<div>\n<p>Note</p>\n<p>Since this is no need to reuse a message instance and call <tt>Clear</tt> on it in python, It don\u2019t provide <tt>Clear</tt> api,\nso <tt>ParseFromString</tt> is more like <tt>MergeFromString</tt> in official implementation, because it don\u2019t call <tt>Clear</tt> at first.</p>\n</div>\n<div id=\"encode-decode\">\n<h4>encode/decode</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foo_pb</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">People</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">People</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'jim'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s1\">'jim@gmail.com'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">SerializeToString</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg2</span> <span class=\"o\">=</span> <span class=\"n\">People</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg2</span><span class=\"o\">.</span><span class=\"n\">ParseFromString</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">msg2</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg2</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'jim'</span>\n</pre>\n</div>\n<div id=\"reflection\">\n<h4>reflection</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foo_pb</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">People</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">_fields</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"p\">[</span><span class=\"s1\">'__class__'</span><span class=\"p\">,</span> <span class=\"s1\">'__delattr__'</span><span class=\"p\">,</span> <span class=\"s1\">'__doc__'</span><span class=\"p\">,</span> <span class=\"s1\">'__format__'</span><span class=\"p\">,</span> <span class=\"s1\">'__get__'</span><span class=\"p\">,</span> <span class=\"s1\">'__getattribute__'</span><span class=\"p\">,</span> <span class=\"s1\">'__hash__'</span><span class=\"p\">,</span> <span class=\"s1\">'__init__'</span><span class=\"p\">,</span> <span class=\"s1\">'__new__'</span><span class=\"p\">,</span> <span class=\"s1\">'__pyx_vtable__'</span><span class=\"p\">,</span> <span class=\"s1\">'__reduce__'</span><span class=\"p\">,</span> <span class=\"s1\">'__reduce_ex__'</span><span class=\"p\">,</span> <span class=\"s1\">'__repr__'</span><span class=\"p\">,</span> <span class=\"s1\">'__setattr__'</span><span class=\"p\">,</span> <span class=\"s1\">'__sizeof__'</span><span class=\"p\">,</span> <span class=\"s1\">'__str__'</span><span class=\"p\">,</span> <span class=\"s1\">'__subclasshook__'</span><span class=\"p\">,</span> <span class=\"s1\">'index'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'packed'</span><span class=\"p\">,</span> <span class=\"s1\">'repeated'</span><span class=\"p\">,</span> <span class=\"s1\">'required'</span><span class=\"p\">,</span> <span class=\"s1\">'wire_type'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">_fields</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'email'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">_fieldsmap</span>\n<span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">cprotobuf</span><span class=\"o\">.</span><span class=\"n\">Field</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0xb74a538c</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">cprotobuf</span><span class=\"o\">.</span><span class=\"n\">Field</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0xb74a541c</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">cprotobuf</span><span class=\"o\">.</span><span class=\"n\">Field</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0xb74a5c8c</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">_fieldsmap_by_name</span>\n<span class=\"p\">{</span><span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">cprotobuf</span><span class=\"o\">.</span><span class=\"n\">Field</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0xb74a5c8c</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">cprotobuf</span><span class=\"o\">.</span><span class=\"n\">Field</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0xb74a541c</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">cprotobuf</span><span class=\"o\">.</span><span class=\"n\">Field</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0xb74a538c</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"repeated-container\">\n<h4>repeated container</h4>\n<p>We use <tt>RepeatedContainer</tt> to represent repeated field, <tt>RepeatedContainer</tt> is inherited from <tt>list</tt>, so you can manipulate it like a <tt>list</tt>, or with apis like google\u2019s implementation.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foo_pb</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">People</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">People</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'jim'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s1\">'jim@gmail.com'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'jake'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s1\">'jake@gmail.com'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'lucy'</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'lucy@gmail.com'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'id'</span> <span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'name'</span> <span class=\"p\">:</span> <span class=\"s1\">'lily'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'email'</span> <span class=\"p\">:</span> <span class=\"s1\">'lily@gmail.com'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"encode-raw-data-fast\">\n<h4>encode raw data fast</h4>\n<p>If you already have your messages represented as <tt>list</tt> and <tt>dict</tt>, you can encode it without constructing intermidiate objects, getting ride of a lot of overhead:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">cprotobuf</span> <span class=\"kn\">import</span> <span class=\"n\">encode_data</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">foo_pb</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">People</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">encode_data</span><span class=\"p\">(</span><span class=\"n\">People</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'tom'</span><span class=\"p\">,</span> <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'tom@gmail.com'</span> <span class=\"p\">}</span>\n<span class=\"o\">...</span> <span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">People</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">ParseFromString</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'tom'</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"run-tests\">\n<h2>Run Tests</h2>\n<pre>$ nosetests\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6022790, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "a601e578f71a1ee5ca7805d0eefa33c4", "sha256": "3e32ae3326cbb1590047b644b0c2aed1efdd37e7bcd5fb9a933fab3da87cfaf4"}, "downloads": -1, "filename": "cprotobuf_lc-0.1.5-cp27-cp27m-macosx_10_12_intel.whl", "has_sig": false, "md5_digest": "a601e578f71a1ee5ca7805d0eefa33c4", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 135329, "upload_time": "2017-10-27T06:43:00", "upload_time_iso_8601": "2017-10-27T06:43:00.153931Z", "url": "https://files.pythonhosted.org/packages/ee/d1/d49c8d2b028c1fd342eb696c24f9521246c849dc9240a89fa79a3e4129c9/cprotobuf_lc-0.1.5-cp27-cp27m-macosx_10_12_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c42dfe62f3b2fed32b23fc307d00e79c", "sha256": "5ffb60be89243c5debe53f1d4f64e8058080d68c62c924238bf7b49edf892c26"}, "downloads": -1, "filename": "cprotobuf-lc-0.1.5.tar.gz", "has_sig": false, "md5_digest": "c42dfe62f3b2fed32b23fc307d00e79c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97451, "upload_time": "2017-10-27T06:42:30", "upload_time_iso_8601": "2017-10-27T06:42:30.335245Z", "url": "https://files.pythonhosted.org/packages/24/2a/8fde3e954f75090fe663110b83c10bfbc574d25d6bbd2c29bccc67ddf411/cprotobuf-lc-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a601e578f71a1ee5ca7805d0eefa33c4", "sha256": "3e32ae3326cbb1590047b644b0c2aed1efdd37e7bcd5fb9a933fab3da87cfaf4"}, "downloads": -1, "filename": "cprotobuf_lc-0.1.5-cp27-cp27m-macosx_10_12_intel.whl", "has_sig": false, "md5_digest": "a601e578f71a1ee5ca7805d0eefa33c4", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 135329, "upload_time": "2017-10-27T06:43:00", "upload_time_iso_8601": "2017-10-27T06:43:00.153931Z", "url": "https://files.pythonhosted.org/packages/ee/d1/d49c8d2b028c1fd342eb696c24f9521246c849dc9240a89fa79a3e4129c9/cprotobuf_lc-0.1.5-cp27-cp27m-macosx_10_12_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c42dfe62f3b2fed32b23fc307d00e79c", "sha256": "5ffb60be89243c5debe53f1d4f64e8058080d68c62c924238bf7b49edf892c26"}, "downloads": -1, "filename": "cprotobuf-lc-0.1.5.tar.gz", "has_sig": false, "md5_digest": "c42dfe62f3b2fed32b23fc307d00e79c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97451, "upload_time": "2017-10-27T06:42:30", "upload_time_iso_8601": "2017-10-27T06:42:30.335245Z", "url": "https://files.pythonhosted.org/packages/24/2a/8fde3e954f75090fe663110b83c10bfbc574d25d6bbd2c29bccc67ddf411/cprotobuf-lc-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:35 2020"}