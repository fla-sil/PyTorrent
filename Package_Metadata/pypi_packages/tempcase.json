{"info": {"author": "Chris L Barnes", "author_email": "barnesc@janelia.hhmi.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# tempcase\n\n[![Build Status](https://travis-ci.org/clbarnes/tempcase.svg?branch=master)](https://travis-ci.org/clbarnes/tempcase)\n\nUtilities for handling python test cases with temporary directories and files, for people using `pyunit`/`unittest`.\n\nSupports python 2.7 and 3.4+.\n\nN.B. the existence of this library is **not** an endorsement of `unittest`. \nUse [`pytest`](https://docs.pytest.org/en/latest/) if you want a powerful, modern, pythonic testing paradigm. \nPlease.\n\n## Motivation\n\nUnit tests should be as isolated as possible, but when testing a file-generating method, it is often inconvenient to \nmanually handle separate output directories with informative names and away from the code.\n\n`pytest` solves this easily with the `tmpdir` fixture, but `unittest` has no such utility.\n\n`tempcase` provides a base class for `unittest`-style test cases with ergonomic methods for creating temporary \ndirectories as required, with automatic cleanup which can be disabled for debugging purposes.\n\n## Installation\n\n```bash\npip install tempcase\n```\n\n## Usage\n\n```python\nimport os\n\nimport tempcase\n\n\nclass MyTestCase(tempcase.TempCase):\n    _project_name = 'mylibrary'\n\n    def test_creates_file(self):\n        \"\"\"\n        Test that ``my_file.txt`` is successfully created.\n        The first call to ``path_to`` for a ``TestCase`` will create a directory in your default temp directory, \n        which has the name of the project as defined above, the name of the ``TestCase``, a timestamp, and a random\n        alphanumeric string.\n        The first call to ``path_to`` for a test method will create a subdirectory within that, named for the \n        test method.\n        The test method directory and its contents will be deleted by ``tearDown``.\n        The ``TestCase`` directory, if empty, will be cleaned up by ``tearDownClass``.\n        \"\"\"\n        fpath = self.path_to('my_file.txt')  # os.path.join-like syntax\n        open(fpath, 'w').close()\n        self.assertTrue(os.path.isfile(fpath))\n\n    def test_something_else(self):\n        \"\"\"No unnecessary directories are created\"\"\"\n        self.assertTrue(True)\n\n    def test_creates_file_no_cleanup(self):\n        \"\"\"\n        Setting ``self._cleanup = False`` anywhere in a test method will disable cleanup just for that method, \n        allowing you to look at the output for debugging purposes.\n        The containing ``TestCase`` directory will also not be deleted.\n        \"\"\"\n        fpath = self.path_to('my_other_file.txt')\n        open(fpath, 'w').close()\n        self.assertTrue(os.path.isfile(fpath))\n        self._cleanup = False\n\n    def tearDown(self):\n        \"\"\"Be sure to call the super() tearDown if you override it! Same goes for tearDownClass.\"\"\"\n        super().tearDown()  # python 3+\n        print(\"I did a tearDown\")\n\n\nclass MyTestCaseWithNoCleanup(tempcase.TempCase):\n    _project_name = 'mylibrary'\n    _cleanup = False\n\n    def test_creates_file(self):\n        \"\"\"This will not be cleaned up, by default\"\"\"\n        fpath = self.path_to('my_file.txt')\n        open(fpath, 'w').close()\n\n    def test_creates_file_with_cleanup(self)\n        \"\"\"You can clean up individual methods if you like\"\"\"\n        self._cleanup = True\n        open(self.path_to('my_file.txt'), 'w').close()\n\n```\n\nFor existing projects with an already-fragile inheritance chain above every test case, and local paths defined in\na method body (not in a `setUp`), the `in_tempdir` decorator may be useful. It creates a temporary directory, \nchanges the working directory, and then changes back and cleans up the temp dir after execution.\n\n```python\nimport unittest\nimport tempcase\n\nclass MyOldTestCase(unittest.TestCase):\n    @tempcase.in_tempdir('my_project')\n    def test_old_code(self):\n        \"\"\"\n        This method has now be ``os.chdir()``'d into a temporary directory which will be cleaned up.\n        The working directory will then automatically switch back to whatever it was before.\n        The directory's cleanup cannot be prevented.\n        \"\"\"\n        open('my_local_file.txt', 'w').close()\n\n    _project_name = 'my_project'  # can be defined in the class or passed to the decorator\n\n    @tempcase.in_tempdir\n    def test_slightly_newer_code(self):\n        pass\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/clbarnes/tempcase", "keywords": "test unittest pyunit tmp temp", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tempcase", "package_url": "https://pypi.org/project/tempcase/", "platform": "", "project_url": "https://pypi.org/project/tempcase/", "project_urls": {"Homepage": "https://github.com/clbarnes/tempcase"}, "release_url": "https://pypi.org/project/tempcase/1.0.0/", "requires_dist": ["backports.tempfile (>=1.0) ; python_version < \"3.4\""], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Utilities for handling python test cases with temporary directories and files, for people using `pyunit`/`unittest`.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tempcase</h1>\n<p><a href=\"https://travis-ci.org/clbarnes/tempcase\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99c260c6ce695ec802f4da1034269313a9d76fc7/68747470733a2f2f7472617669732d63692e6f72672f636c6261726e65732f74656d70636173652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Utilities for handling python test cases with temporary directories and files, for people using <code>pyunit</code>/<code>unittest</code>.</p>\n<p>Supports python 2.7 and 3.4+.</p>\n<p>N.B. the existence of this library is <strong>not</strong> an endorsement of <code>unittest</code>.\nUse <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\"><code>pytest</code></a> if you want a powerful, modern, pythonic testing paradigm.\nPlease.</p>\n<h2>Motivation</h2>\n<p>Unit tests should be as isolated as possible, but when testing a file-generating method, it is often inconvenient to\nmanually handle separate output directories with informative names and away from the code.</p>\n<p><code>pytest</code> solves this easily with the <code>tmpdir</code> fixture, but <code>unittest</code> has no such utility.</p>\n<p><code>tempcase</code> provides a base class for <code>unittest</code>-style test cases with ergonomic methods for creating temporary\ndirectories as required, with automatic cleanup which can be disabled for debugging purposes.</p>\n<h2>Installation</h2>\n<pre>pip install tempcase\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">tempcase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTestCase</span><span class=\"p\">(</span><span class=\"n\">tempcase</span><span class=\"o\">.</span><span class=\"n\">TempCase</span><span class=\"p\">):</span>\n    <span class=\"n\">_project_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mylibrary'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_creates_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Test that ``my_file.txt`` is successfully created.</span>\n<span class=\"sd\">        The first call to ``path_to`` for a ``TestCase`` will create a directory in your default temp directory, </span>\n<span class=\"sd\">        which has the name of the project as defined above, the name of the ``TestCase``, a timestamp, and a random</span>\n<span class=\"sd\">        alphanumeric string.</span>\n<span class=\"sd\">        The first call to ``path_to`` for a test method will create a subdirectory within that, named for the </span>\n<span class=\"sd\">        test method.</span>\n<span class=\"sd\">        The test method directory and its contents will be deleted by ``tearDown``.</span>\n<span class=\"sd\">        The ``TestCase`` directory, if empty, will be cleaned up by ``tearDownClass``.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path_to</span><span class=\"p\">(</span><span class=\"s1\">'my_file.txt'</span><span class=\"p\">)</span>  <span class=\"c1\"># os.path.join-like syntax</span>\n        <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_something_else</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"No unnecessary directories are created\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_creates_file_no_cleanup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Setting ``self._cleanup = False`` anywhere in a test method will disable cleanup just for that method, </span>\n<span class=\"sd\">        allowing you to look at the output for debugging purposes.</span>\n<span class=\"sd\">        The containing ``TestCase`` directory will also not be deleted.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path_to</span><span class=\"p\">(</span><span class=\"s1\">'my_other_file.txt'</span><span class=\"p\">)</span>\n        <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cleanup</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tearDown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Be sure to call the super() tearDown if you override it! Same goes for tearDownClass.\"\"\"</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tearDown</span><span class=\"p\">()</span>  <span class=\"c1\"># python 3+</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I did a tearDown\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTestCaseWithNoCleanup</span><span class=\"p\">(</span><span class=\"n\">tempcase</span><span class=\"o\">.</span><span class=\"n\">TempCase</span><span class=\"p\">):</span>\n    <span class=\"n\">_project_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mylibrary'</span>\n    <span class=\"n\">_cleanup</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_creates_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"This will not be cleaned up, by default\"\"\"</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path_to</span><span class=\"p\">(</span><span class=\"s1\">'my_file.txt'</span><span class=\"p\">)</span>\n        <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_creates_file_with_cleanup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"sd\">\"\"\"You can clean up individual methods if you like\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cleanup</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path_to</span><span class=\"p\">(</span><span class=\"s1\">'my_file.txt'</span><span class=\"p\">),</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>For existing projects with an already-fragile inheritance chain above every test case, and local paths defined in\na method body (not in a <code>setUp</code>), the <code>in_tempdir</code> decorator may be useful. It creates a temporary directory,\nchanges the working directory, and then changes back and cleans up the temp dir after execution.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tempcase</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyOldTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@tempcase</span><span class=\"o\">.</span><span class=\"n\">in_tempdir</span><span class=\"p\">(</span><span class=\"s1\">'my_project'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_old_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        This method has now be ``os.chdir()``'d into a temporary directory which will be cleaned up.</span>\n<span class=\"sd\">        The working directory will then automatically switch back to whatever it was before.</span>\n<span class=\"sd\">        The directory's cleanup cannot be prevented.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'my_local_file.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"n\">_project_name</span> <span class=\"o\">=</span> <span class=\"s1\">'my_project'</span>  <span class=\"c1\"># can be defined in the class or passed to the decorator</span>\n\n    <span class=\"nd\">@tempcase</span><span class=\"o\">.</span><span class=\"n\">in_tempdir</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_slightly_newer_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n\n          </div>"}, "last_serial": 4847659, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "048acefb0bd1e7c203abceecb05c2cb5", "sha256": "aadc8fafd7fe7c757c92ef0de8767c5dc19b9b84ac09e92be672a2062b8e17a9"}, "downloads": -1, "filename": "tempcase-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "048acefb0bd1e7c203abceecb05c2cb5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 5388, "upload_time": "2018-04-11T20:16:44", "upload_time_iso_8601": "2018-04-11T20:16:44.688672Z", "url": "https://files.pythonhosted.org/packages/dc/84/3f959c403ca4584246aa49488fe2337a9062bdb56153a3531c9491a94a20/tempcase-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "284d0da277d2aafba4c65a1dfb6c7c08", "sha256": "ef83c4a3f167fb02a55d7ae19acb93e65f3654d9f8dc0c4f3ab235dd54b0b400"}, "downloads": -1, "filename": "tempcase-0.1.0.tar.gz", "has_sig": false, "md5_digest": "284d0da277d2aafba4c65a1dfb6c7c08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 5860, "upload_time": "2018-04-11T20:16:45", "upload_time_iso_8601": "2018-04-11T20:16:45.545393Z", "url": "https://files.pythonhosted.org/packages/a8/31/232d55ac0def631e22a4868e1e34cf5db32d1af8ad0a53adbdc7fc03dfc8/tempcase-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e70ca26ef3f061ca5079ba7e1982f9cd", "sha256": "252036002d5c94e3e60dc577d69f8ed7bc597345cc292a63390cbf892674ddfc"}, "downloads": -1, "filename": "tempcase-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e70ca26ef3f061ca5079ba7e1982f9cd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 6351, "upload_time": "2019-02-20T22:41:11", "upload_time_iso_8601": "2019-02-20T22:41:11.167154Z", "url": "https://files.pythonhosted.org/packages/91/ea/fc3261679da5577711bd960a1e16a9f42e46e349a479e8a4ab166a71488e/tempcase-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3cb286c6f8b5638f90623e687bc97a7", "sha256": "2f2fb58a598a7d10720906363bece9300ce21a9245ef9e1d8edd978bead4f85a"}, "downloads": -1, "filename": "tempcase-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c3cb286c6f8b5638f90623e687bc97a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 6004, "upload_time": "2019-02-20T22:41:12", "upload_time_iso_8601": "2019-02-20T22:41:12.503903Z", "url": "https://files.pythonhosted.org/packages/38/0c/2856d0b7d413223c18a16ddacd939d99430a0d0a071b8d7ed44b4a85e626/tempcase-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e70ca26ef3f061ca5079ba7e1982f9cd", "sha256": "252036002d5c94e3e60dc577d69f8ed7bc597345cc292a63390cbf892674ddfc"}, "downloads": -1, "filename": "tempcase-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e70ca26ef3f061ca5079ba7e1982f9cd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 6351, "upload_time": "2019-02-20T22:41:11", "upload_time_iso_8601": "2019-02-20T22:41:11.167154Z", "url": "https://files.pythonhosted.org/packages/91/ea/fc3261679da5577711bd960a1e16a9f42e46e349a479e8a4ab166a71488e/tempcase-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3cb286c6f8b5638f90623e687bc97a7", "sha256": "2f2fb58a598a7d10720906363bece9300ce21a9245ef9e1d8edd978bead4f85a"}, "downloads": -1, "filename": "tempcase-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c3cb286c6f8b5638f90623e687bc97a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 6004, "upload_time": "2019-02-20T22:41:12", "upload_time_iso_8601": "2019-02-20T22:41:12.503903Z", "url": "https://files.pythonhosted.org/packages/38/0c/2856d0b7d413223c18a16ddacd939d99430a0d0a071b8d7ed44b4a85e626/tempcase-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:46 2020"}