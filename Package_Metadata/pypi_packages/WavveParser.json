{"info": {"author": "caterina", "author_email": "dalgona91@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "## WavveParser\n\n-----\n\nWavve Popular Episode crawling.\n\n----\n### 1. Data Crawling Info\n\n    #### 3 genres\n\n        1) All genre\n        2) Drama\n        3) Entertainment\n\n    #### 10 page by genre (1 page : 20 / Total 100)\n\n    #### columns \n       - rank : rank by genre\n       - title : program title\n       - broadcast \n       - episode \n       - date : broadcast day\n       - genre : all, Drama, Entertainment\n       - category : Ground Broadcast, General Channel, cableTV\n       - Datetime : crawling date\n----\n\n### 2. Package File\n\n    import pandas as pd\n    import numpy as np\n    import requests\n    import json\n\n----\n\n### 3. Installation\n\n\"\"\"python\n\n    pip install WavveParser\n\n\"\"\"\n\n-------\n### 4. Wavve_parser\n\n\"\"\"python\n\n    import pandas as pd\n    import numpy as np\n    import requests\n    import json\n\n    class WavveParser:\n\n        def __init__(self, datetime, apikey):\n            self.apikey = apikey\n            contents_id = self.getPopularId()\n            self.contents_id_dfs = pd.concat(contents_id, ignore_index=True)\n            self.contents_info = self.getDetailInfo()\n            category_df, categories = self.ParseDetailInfo()\n            category_df['category'] = np.where(category_df['broadcast'].isin(\n                categories['\uc9c0\uc0c1\ud30c']), '\uc9c0\uc0c1\ud30c', np.where(category_df['broadcast'].isin(categories['\uc885\ud3b8']), '\uc885\ud3b8', '\ucf00\uc774\ube14'))\n            category_df['rank'] = category_df.reset_index()[\"index\"]+1\n            category_df['DateTime'] = datetime\n            self.category_df = category_df.reindex(columns = ['rank','title','broadcast','episode', 'date', 'genre', 'category','DateTime'])\n\n\n        def getPopularId(self):\n\n            popular_urls = []\n            contents_id = []\n\n            genres = {\n\n                'all': '\uc804\uccb4',\n                '01': \"\ub4dc\ub77c\ub9c8\",\n                '02': \"\uc608\ub2a5\",\n\n            }\n\n            for genre in genres:\n                for page in range(1, 6):\n                    offset = (page-1) * 20\n                    item_url = f'https://apis.pooq.co.kr/cf/vod/popularcontents?WeekDay=all&broadcastid=6339&came=broadcast&contenttype=vod&genre={genre}&limit=20&offset={offset}&orderby=viewtime&page={page}&uiparent=GN2-VN2&uirank=2&uitype=VN2&apikey={self.apikey}&credential=none&device=pc&drm=wm&partner=pooq&pooqzone=none&region=kor&targetage=auto'\n                    popular_urls.append(item_url)\n\n            for popular_url in popular_urls:\n                req = requests.get(popular_url)\n                data = json.loads(req.text)\n                item_ids = [item['event_list'][0]['bodylist'][3].split(\n                    ':')[1] for item in data['cell_toplist']['celllist']]\n                contents_id.append(pd.DataFrame({'id': item_ids}))\n\n            return contents_id\n\n        def getDetailInfo(self):\n\n            detail_info = []\n\n            for content_id in self.contents_id_dfs['id']:\n                detail_url = f'https://apis.pooq.co.kr/vod/contents/{content_id}?device=pc&partner=pooq&pooqzone=none&region=kor&drm=wm&targetage=auto&apikey={self.apikey}&credential=gnay3eDqvjaYTaFwZFAJ57u0nvz33CA2FoHsr5NsY8OCv2wWeu3ZRgaY9Ci2CjRlAd03D4A%2BIdixX2iwjy6jRFjRGc9qw%2BSkVjGFCJxuSRe86SSYVVK953HfiFKuKb6A3nNVJoHyY6gvgpSgRpyNNeZOzMNkqmc2RcGu%2FWrnAXFDATjT2IpHfym9Ng6rPXCbvkd9q3Y%2FsfQrOSB%2BLRTp4IL6AnvszoJi8ccV9AJhR37vOmwOwiV76z7QJexM054Dhp04KJCHm8HmpZANhV1iOw%3D%3D'\n                req = requests.get(detail_url)\n                data = json.loads(req.text)\n                detail_info.append(data)\n\n            return detail_info\n\n        def ParseDetailInfo(self):\n\n            wavve_list = []\n\n            categories = {\n\n                '\uc9c0\uc0c1\ud30c': ['MBC', 'SBS', 'KBS 2TV', 'KBS 1TV', 'KBS'],\n                '\uc885\ud3b8': ['MBN', '\ucc44\ub110A', 'TV\uc870\uc120', 'TV CHOSUN'],\n                '\ucf00\uc774\ube14': ['MBC Every1', 'KBS JOY', 'OCN', 'YTN', '\uc5f0\ud569\ub274\uc2a4TV', 'KTH PLAYY', 'SBS Fil']\n            }\n\n            for content_info in self.contents_info:\n\n                wavve_list.append({\n                    'title': content_info['programtitle'],\n                    'broadcast': content_info['channelname'],\n                    'episode': content_info['episodenumber'],\n                    'date': content_info['releasedate']+\"(\"+content_info['releaseweekday']+\")\",\n                    'genre': content_info['genretext'],\n\n                })\n\n            return pd.DataFrame(wavve_list), categories\n\n\"\"\"\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/CATERINA-SEUL/WavveParser/archive/WavveParser-0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CATERINA-SEUL/WavveParser", "keywords": "wavve", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "WavveParser", "package_url": "https://pypi.org/project/WavveParser/", "platform": "", "project_url": "https://pypi.org/project/WavveParser/", "project_urls": {"Download": "https://github.com/CATERINA-SEUL/WavveParser/archive/WavveParser-0.1.tar.gz", "Homepage": "https://github.com/CATERINA-SEUL/WavveParser"}, "release_url": "https://pypi.org/project/WavveParser/0.1/", "requires_dist": null, "requires_python": ">=3", "summary": "wavve parser", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>WavveParser</h2>\n<hr>\n<p>Wavve Popular Episode crawling.</p>\n<hr>\n<h3>1. Data Crawling Info</h3>\n<pre><code>#### 3 genres\n\n    1) All genre\n    2) Drama\n    3) Entertainment\n\n#### 10 page by genre (1 page : 20 / Total 100)\n\n#### columns \n   - rank : rank by genre\n   - title : program title\n   - broadcast \n   - episode \n   - date : broadcast day\n   - genre : all, Drama, Entertainment\n   - category : Ground Broadcast, General Channel, cableTV\n   - Datetime : crawling date\n</code></pre>\n<hr>\n<h3>2. Package File</h3>\n<pre><code>import pandas as pd\nimport numpy as np\nimport requests\nimport json\n</code></pre>\n<hr>\n<h3>3. Installation</h3>\n<p>\"\"\"python</p>\n<pre><code>pip install WavveParser\n</code></pre>\n<p>\"\"\"</p>\n<hr>\n<h3>4. Wavve_parser</h3>\n<p>\"\"\"python</p>\n<pre><code>import pandas as pd\nimport numpy as np\nimport requests\nimport json\n\nclass WavveParser:\n\n    def __init__(self, datetime, apikey):\n        self.apikey = apikey\n        contents_id = self.getPopularId()\n        self.contents_id_dfs = pd.concat(contents_id, ignore_index=True)\n        self.contents_info = self.getDetailInfo()\n        category_df, categories = self.ParseDetailInfo()\n        category_df['category'] = np.where(category_df['broadcast'].isin(\n            categories['\uc9c0\uc0c1\ud30c']), '\uc9c0\uc0c1\ud30c', np.where(category_df['broadcast'].isin(categories['\uc885\ud3b8']), '\uc885\ud3b8', '\ucf00\uc774\ube14'))\n        category_df['rank'] = category_df.reset_index()[\"index\"]+1\n        category_df['DateTime'] = datetime\n        self.category_df = category_df.reindex(columns = ['rank','title','broadcast','episode', 'date', 'genre', 'category','DateTime'])\n\n\n    def getPopularId(self):\n\n        popular_urls = []\n        contents_id = []\n\n        genres = {\n\n            'all': '\uc804\uccb4',\n            '01': \"\ub4dc\ub77c\ub9c8\",\n            '02': \"\uc608\ub2a5\",\n\n        }\n\n        for genre in genres:\n            for page in range(1, 6):\n                offset = (page-1) * 20\n                item_url = f'https://apis.pooq.co.kr/cf/vod/popularcontents?WeekDay=all&amp;broadcastid=6339&amp;came=broadcast&amp;contenttype=vod&amp;genre={genre}&amp;limit=20&amp;offset={offset}&amp;orderby=viewtime&amp;page={page}&amp;uiparent=GN2-VN2&amp;uirank=2&amp;uitype=VN2&amp;apikey={self.apikey}&amp;credential=none&amp;device=pc&amp;drm=wm&amp;partner=pooq&amp;pooqzone=none&amp;region=kor&amp;targetage=auto'\n                popular_urls.append(item_url)\n\n        for popular_url in popular_urls:\n            req = requests.get(popular_url)\n            data = json.loads(req.text)\n            item_ids = [item['event_list'][0]['bodylist'][3].split(\n                ':')[1] for item in data['cell_toplist']['celllist']]\n            contents_id.append(pd.DataFrame({'id': item_ids}))\n\n        return contents_id\n\n    def getDetailInfo(self):\n\n        detail_info = []\n\n        for content_id in self.contents_id_dfs['id']:\n            detail_url = f'https://apis.pooq.co.kr/vod/contents/{content_id}?device=pc&amp;partner=pooq&amp;pooqzone=none&amp;region=kor&amp;drm=wm&amp;targetage=auto&amp;apikey={self.apikey}&amp;credential=gnay3eDqvjaYTaFwZFAJ57u0nvz33CA2FoHsr5NsY8OCv2wWeu3ZRgaY9Ci2CjRlAd03D4A%2BIdixX2iwjy6jRFjRGc9qw%2BSkVjGFCJxuSRe86SSYVVK953HfiFKuKb6A3nNVJoHyY6gvgpSgRpyNNeZOzMNkqmc2RcGu%2FWrnAXFDATjT2IpHfym9Ng6rPXCbvkd9q3Y%2FsfQrOSB%2BLRTp4IL6AnvszoJi8ccV9AJhR37vOmwOwiV76z7QJexM054Dhp04KJCHm8HmpZANhV1iOw%3D%3D'\n            req = requests.get(detail_url)\n            data = json.loads(req.text)\n            detail_info.append(data)\n\n        return detail_info\n\n    def ParseDetailInfo(self):\n\n        wavve_list = []\n\n        categories = {\n\n            '\uc9c0\uc0c1\ud30c': ['MBC', 'SBS', 'KBS 2TV', 'KBS 1TV', 'KBS'],\n            '\uc885\ud3b8': ['MBN', '\ucc44\ub110A', 'TV\uc870\uc120', 'TV CHOSUN'],\n            '\ucf00\uc774\ube14': ['MBC Every1', 'KBS JOY', 'OCN', 'YTN', '\uc5f0\ud569\ub274\uc2a4TV', 'KTH PLAYY', 'SBS Fil']\n        }\n\n        for content_info in self.contents_info:\n\n            wavve_list.append({\n                'title': content_info['programtitle'],\n                'broadcast': content_info['channelname'],\n                'episode': content_info['episodenumber'],\n                'date': content_info['releasedate']+\"(\"+content_info['releaseweekday']+\")\",\n                'genre': content_info['genretext'],\n\n            })\n\n        return pd.DataFrame(wavve_list), categories\n</code></pre>\n<p>\"\"\"</p>\n\n          </div>"}, "last_serial": 7117379, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e946236c247c4df553328c62c3a41924", "sha256": "db3343c619bdf58c9ed1f8c3ae1b7bcc1a8f3d4000f9026f5105f644f7458da8"}, "downloads": -1, "filename": "WavveParser-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e946236c247c4df553328c62c3a41924", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4617, "upload_time": "2020-04-28T05:32:00", "upload_time_iso_8601": "2020-04-28T05:32:00.814509Z", "url": "https://files.pythonhosted.org/packages/cd/59/f6047f7e2fb9bc7ccb3c0b98c80cfb36ba7eaf9086e128a0644c15801596/WavveParser-0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e946236c247c4df553328c62c3a41924", "sha256": "db3343c619bdf58c9ed1f8c3ae1b7bcc1a8f3d4000f9026f5105f644f7458da8"}, "downloads": -1, "filename": "WavveParser-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e946236c247c4df553328c62c3a41924", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4617, "upload_time": "2020-04-28T05:32:00", "upload_time_iso_8601": "2020-04-28T05:32:00.814509Z", "url": "https://files.pythonhosted.org/packages/cd/59/f6047f7e2fb9bc7ccb3c0b98c80cfb36ba7eaf9086e128a0644c15801596/WavveParser-0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:31:54 2020"}