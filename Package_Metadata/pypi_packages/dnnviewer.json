{"info": {"author": "A. Hue", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Deep Neural Network viewer\n\nA **dashboard to inspect deep neural network models**, providing interactive view on the layer and unit weights and gradients, as well as activation maps.\n\nCurrent version is targeted at the **image classification**. However, coming version will target more diverse tasks.\n\nThis project is for learning and teaching purpose, do not try to display a network with hundreds of layers.\n\n![Screenshot](assets/screenshots/screen4_1024.png)\n\n# Install\n\nInstall with PIP\n\n```shell script\n$ pip install dnnviewer\n```\n\nRun `dnnviewer` with one of the examples below, or with you own model (see below for capabilities and limitations)\n\nAccess the web application at http://127.0.0.1:8050\n\n\n# Running the program\n\nCurrently accepted input formats are Keras Sequential models written to file in Checkpoint format or HDF5. A series of checkpoints along training epochs is also accepted as exemplified below.\n\nSome test models are provided in the GIT repository `dnnviewer-data` to clone from Github or download a zip from the [repository page](https://github.com/tonio73/dnnviewer-data)\n\n```shell script\n$ git clone https://github.com/tonio73/dnnviewer-data.git\n```\n\nTest data is provided by Keras.\n\n### Selecting the model within the application`\n\nLaunch the application with command line `--model-directories` that set a comma separated list of directory paths where the models are located\n\n```shell\n$ dnnviewer --model-directories dnnviewer-data/models,dnnviewer-data/models/FashionMNIST_checkpoints\n```\n\nThen select the network model and the corresponding test data (optional) on the user interface\n\n![Model selection UI](assets/screenshots/select_model1.png)\n\nModels containing the '{epoch}' tag are sequences over epochs. They are detected based on the pattern set by \ncommand line option `--sequence-pattern` whose default is `{model}_{epoch}\n\n### Loading a single model\n\nKeras models are loaded from Checkpoint or HDF5 format with option `--model-keras <file>`\n\n#### CIFAR-10 Convolutional neural network\n\n```shell\n$ dnnviewer --model-keras dnnviewer-data/models/CIFAR-10_CNN5.h5 --test-dataset cifar-10\n```\n\n#### MNIST Convolutional neural network based on LeNet5\n\n```shell\n$ dnnviewer --model-keras dnnviewer-data/models/MNIST_LeNet60.h5 --test-dataset mnist\n```\n\n### Loading several epochs of a model\n\nSeries of models along training epochs are loaded using the argument `--sequence-keras <path>` and the pattern `{epoch}` within the provided path. See below on how to generate these checkpoints.\n\n#### Fashion MNIST convolutionnal network\n\n```shell\n$ dnnviewer --sequence-keras \"dnnviewer-data/models/FashionMNIST_checkpoints/model1_{epoch}\" --test-dataset fashion-mnist\n```\n\n# Generating the models\n\n## From Tensorflow 2.0 Keras\n\nNote: Only Sequential models are currently supported.\n\n### Save a single model\n\nUse the `save()`method of _keras.models.Model_ class the output file format is either Tensorflow Checkpoint or HDF5 based on the extension. \n\n```python\nmodel1.save('models/MNIST_LeNet60.h5')\n```\n\n### Save models during training\n\nThe Keras standard callback `tensorflow.keras.callbacks.ModelCheckpoint` is saving the model every epoch or a defined period of epochs:\n\n```python\nfrom tensorflow import keras\nfrom tensorflow.keras.callbacks import ModelCheckpoint\n\nmodel1 = keras.models.Sequential()\n#...\n\ncallbacks = [\n    ModelCheckpoint(\n        filepath='checkpoints_cnn-mnistfashion/model1_{epoch}',\n        save_best_only=False,\n        verbose=1)\n]\n\nhist1 = model1.fit(train_images, train_labels, \n                   epochs=nEpochs, validation_split=0.2, batch_size=batch_size,\n                   verbose=0, callbacks=callbacks)\n```\n\n# Current capabilities\n\n- Load **Tensorflow Keras Sequential** models and create a display of the network\n- Targeted at image classification task (assume image as input, class as output)\n- Display series of models over training epochs\n- Interactive display and unit weights through connections within the network and histograms\n- Supported layers\n  - Dense\n  - Convolution 2D\n  - Flatten\n  - Input\n- Ignored layers (no impact on the representation)\n  - Dropout, ActivityRegularization, SpatialDropout1D/2D/3D\n  - All pooling layers\n  - BatchNormalization\n  - Activation\n- Unsupported layers\n  - Reshape, Permute, RepeatVector, Lambda, Masking\n  - Recurrent layers (LSTM, GRU...)\n  - Embedding layers\n  - Merge layers\n\n\n# Developer documentation\n\nSee [developer.md](docs/developer.md)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tonio73/dnnviewer", "keywords": "DNN,CNN,Interpretability,Tensorflow,Keras", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dnnviewer", "package_url": "https://pypi.org/project/dnnviewer/", "platform": "", "project_url": "https://pypi.org/project/dnnviewer/", "project_urls": {"Homepage": "https://github.com/tonio73/dnnviewer"}, "release_url": "https://pypi.org/project/dnnviewer/0.1.0.dev10/", "requires_dist": ["numpy", "tensorflow (>=2.0)", "tensorflow-datasets", "plotly (>=4.0)", "dash", "dash-core-components", "dash-html-components", "dash-bootstrap-components", "pillow"], "requires_python": ">=3.5", "summary": "Deep Neural Network inspection: view weights, gradients and activations", "version": "0.1.0.dev10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Deep Neural Network viewer</h1>\n<p>A <strong>dashboard to inspect deep neural network models</strong>, providing interactive view on the layer and unit weights and gradients, as well as activation maps.</p>\n<p>Current version is targeted at the <strong>image classification</strong>. However, coming version will target more diverse tasks.</p>\n<p>This project is for learning and teaching purpose, do not try to display a network with hundreds of layers.</p>\n<p><img alt=\"Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e0c37154c0b69825f7d27d1e701b58da68d74a0/6173736574732f73637265656e73686f74732f73637265656e345f313032342e706e67\"></p>\n<h1>Install</h1>\n<p>Install with PIP</p>\n<pre>$ pip install dnnviewer\n</pre>\n<p>Run <code>dnnviewer</code> with one of the examples below, or with you own model (see below for capabilities and limitations)</p>\n<p>Access the web application at <a href=\"http://127.0.0.1:8050\" rel=\"nofollow\">http://127.0.0.1:8050</a></p>\n<h1>Running the program</h1>\n<p>Currently accepted input formats are Keras Sequential models written to file in Checkpoint format or HDF5. A series of checkpoints along training epochs is also accepted as exemplified below.</p>\n<p>Some test models are provided in the GIT repository <code>dnnviewer-data</code> to clone from Github or download a zip from the <a href=\"https://github.com/tonio73/dnnviewer-data\" rel=\"nofollow\">repository page</a></p>\n<pre>$ git clone https://github.com/tonio73/dnnviewer-data.git\n</pre>\n<p>Test data is provided by Keras.</p>\n<h3>Selecting the model within the application`</h3>\n<p>Launch the application with command line <code>--model-directories</code> that set a comma separated list of directory paths where the models are located</p>\n<pre>$ dnnviewer --model-directories dnnviewer-data/models,dnnviewer-data/models/FashionMNIST_checkpoints\n</pre>\n<p>Then select the network model and the corresponding test data (optional) on the user interface</p>\n<p><img alt=\"Model selection UI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49debb402d656475aaa8eaa8907c3279fd945dde/6173736574732f73637265656e73686f74732f73656c6563745f6d6f64656c312e706e67\"></p>\n<p>Models containing the '{epoch}' tag are sequences over epochs. They are detected based on the pattern set by\ncommand line option <code>--sequence-pattern</code> whose default is `{model}_{epoch}</p>\n<h3>Loading a single model</h3>\n<p>Keras models are loaded from Checkpoint or HDF5 format with option <code>--model-keras &lt;file&gt;</code></p>\n<h4>CIFAR-10 Convolutional neural network</h4>\n<pre>$ dnnviewer --model-keras dnnviewer-data/models/CIFAR-10_CNN5.h5 --test-dataset cifar-10\n</pre>\n<h4>MNIST Convolutional neural network based on LeNet5</h4>\n<pre>$ dnnviewer --model-keras dnnviewer-data/models/MNIST_LeNet60.h5 --test-dataset mnist\n</pre>\n<h3>Loading several epochs of a model</h3>\n<p>Series of models along training epochs are loaded using the argument <code>--sequence-keras &lt;path&gt;</code> and the pattern <code>{epoch}</code> within the provided path. See below on how to generate these checkpoints.</p>\n<h4>Fashion MNIST convolutionnal network</h4>\n<pre>$ dnnviewer --sequence-keras <span class=\"s2\">\"dnnviewer-data/models/FashionMNIST_checkpoints/model1_{epoch}\"</span> --test-dataset fashion-mnist\n</pre>\n<h1>Generating the models</h1>\n<h2>From Tensorflow 2.0 Keras</h2>\n<p>Note: Only Sequential models are currently supported.</p>\n<h3>Save a single model</h3>\n<p>Use the <code>save()</code>method of <em>keras.models.Model</em> class the output file format is either Tensorflow Checkpoint or HDF5 based on the extension.</p>\n<pre><span class=\"n\">model1</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'models/MNIST_LeNet60.h5'</span><span class=\"p\">)</span>\n</pre>\n<h3>Save models during training</h3>\n<p>The Keras standard callback <code>tensorflow.keras.callbacks.ModelCheckpoint</code> is saving the model every epoch or a defined period of epochs:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">keras</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.callbacks</span> <span class=\"kn\">import</span> <span class=\"n\">ModelCheckpoint</span>\n\n<span class=\"n\">model1</span> <span class=\"o\">=</span> <span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">()</span>\n<span class=\"c1\">#...</span>\n\n<span class=\"n\">callbacks</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">ModelCheckpoint</span><span class=\"p\">(</span>\n        <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'checkpoints_cnn-mnistfashion/model1_</span><span class=\"si\">{epoch}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n        <span class=\"n\">save_best_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">hist1</span> <span class=\"o\">=</span> <span class=\"n\">model1</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">train_images</span><span class=\"p\">,</span> <span class=\"n\">train_labels</span><span class=\"p\">,</span> \n                   <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"n\">nEpochs</span><span class=\"p\">,</span> <span class=\"n\">validation_split</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>\n                   <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">callbacks</span><span class=\"o\">=</span><span class=\"n\">callbacks</span><span class=\"p\">)</span>\n</pre>\n<h1>Current capabilities</h1>\n<ul>\n<li>Load <strong>Tensorflow Keras Sequential</strong> models and create a display of the network</li>\n<li>Targeted at image classification task (assume image as input, class as output)</li>\n<li>Display series of models over training epochs</li>\n<li>Interactive display and unit weights through connections within the network and histograms</li>\n<li>Supported layers\n<ul>\n<li>Dense</li>\n<li>Convolution 2D</li>\n<li>Flatten</li>\n<li>Input</li>\n</ul>\n</li>\n<li>Ignored layers (no impact on the representation)\n<ul>\n<li>Dropout, ActivityRegularization, SpatialDropout1D/2D/3D</li>\n<li>All pooling layers</li>\n<li>BatchNormalization</li>\n<li>Activation</li>\n</ul>\n</li>\n<li>Unsupported layers\n<ul>\n<li>Reshape, Permute, RepeatVector, Lambda, Masking</li>\n<li>Recurrent layers (LSTM, GRU...)</li>\n<li>Embedding layers</li>\n<li>Merge layers</li>\n</ul>\n</li>\n</ul>\n<h1>Developer documentation</h1>\n<p>See <a href=\"docs/developer.md\" rel=\"nofollow\">developer.md</a></p>\n\n          </div>"}, "last_serial": 7042889, "releases": {"0.1.0.dev10": [{"comment_text": "", "digests": {"md5": "d67da8fa4c9155624d88ecd59325392c", "sha256": "81a728467a1d9810cf29811b551710305aa1b867eab2f8f4d884fa63a3a1f71d"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev10-py3-none-any.whl", "has_sig": false, "md5_digest": "d67da8fa4c9155624d88ecd59325392c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 36635, "upload_time": "2020-04-17T19:53:18", "upload_time_iso_8601": "2020-04-17T19:53:18.928318Z", "url": "https://files.pythonhosted.org/packages/bc/80/a5532b7d1cdc51061090ac6502cff49b40b8ce1b506d9eb59bac06e4016d/dnnviewer-0.1.0.dev10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6a77bd829519053d86b63fa9773ef08", "sha256": "4c845c2c763840de6419279465152fa1ddbb471edb5bf06f6a04b3980e9a5188"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev10.tar.gz", "has_sig": false, "md5_digest": "f6a77bd829519053d86b63fa9773ef08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25458, "upload_time": "2020-04-17T19:53:20", "upload_time_iso_8601": "2020-04-17T19:53:20.837677Z", "url": "https://files.pythonhosted.org/packages/55/73/d7f2c6750a5db536aa04ab1211ec6700687ceb7098f3865289aecbdbc537/dnnviewer-0.1.0.dev10.tar.gz", "yanked": false}], "0.1.0.dev6": [{"comment_text": "", "digests": {"md5": "9408c1019fcaa64a28ee662b50320b20", "sha256": "daef3c5fc537a8a215c2a3218623c367092730a0f70e052367133a007d58f8e7"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev6-py3-none-any.whl", "has_sig": false, "md5_digest": "9408c1019fcaa64a28ee662b50320b20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27469, "upload_time": "2020-04-08T16:10:58", "upload_time_iso_8601": "2020-04-08T16:10:58.437456Z", "url": "https://files.pythonhosted.org/packages/bd/87/563dad609b20ad28cda766ec5d45d021276be5c9518754f462da3e38a9b4/dnnviewer-0.1.0.dev6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14b2d0cb6fb64276e8ca4a08282f1628", "sha256": "57335464d1a007247a069f8cced7a335435c0a5d513c10de0252bc1fccb3c4cc"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev6.tar.gz", "has_sig": false, "md5_digest": "14b2d0cb6fb64276e8ca4a08282f1628", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19429, "upload_time": "2020-04-08T16:11:00", "upload_time_iso_8601": "2020-04-08T16:11:00.777338Z", "url": "https://files.pythonhosted.org/packages/e3/2c/48eceed250f98f4ba92e33447ebe4c8f847ae0ebaf9998ed52cb53f66ee7/dnnviewer-0.1.0.dev6.tar.gz", "yanked": false}], "0.1.0.dev7": [{"comment_text": "", "digests": {"md5": "e0ce924e6a5991dd59e2660c1bcf0691", "sha256": "b6ca6d95cac9b690835d16d5f61ea800254998890a3df6a83f4920a85f712427"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev7-py3-none-any.whl", "has_sig": false, "md5_digest": "e0ce924e6a5991dd59e2660c1bcf0691", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27211, "upload_time": "2020-04-08T17:07:36", "upload_time_iso_8601": "2020-04-08T17:07:36.383860Z", "url": "https://files.pythonhosted.org/packages/04/82/e326231923b38f01d81faf19c697f03e0a9edfac25e942b60d7d8b49a78a/dnnviewer-0.1.0.dev7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b74d3872832fc11aed46d272b2fa4c2", "sha256": "16b2dcbcc611df7c33b2e45cc24c2a766977ff231a131c51913ed1210e2bbd1d"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev7.tar.gz", "has_sig": false, "md5_digest": "2b74d3872832fc11aed46d272b2fa4c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18771, "upload_time": "2020-04-08T17:07:38", "upload_time_iso_8601": "2020-04-08T17:07:38.834650Z", "url": "https://files.pythonhosted.org/packages/f6/9a/54e4d0ead87792c4e9197bb4903be50fd5c4d47c7f530e811dbbc80fb597/dnnviewer-0.1.0.dev7.tar.gz", "yanked": false}], "0.1.0.dev8": [{"comment_text": "", "digests": {"md5": "0ebb8dee7cf8d09128720e400d2b9c57", "sha256": "e5ebe6f4fa7c3014ea814de37210bae7a6ffc9f9f5748dd47a295614989e971e"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev8-py3-none-any.whl", "has_sig": false, "md5_digest": "0ebb8dee7cf8d09128720e400d2b9c57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29018, "upload_time": "2020-04-10T16:08:41", "upload_time_iso_8601": "2020-04-10T16:08:41.560294Z", "url": "https://files.pythonhosted.org/packages/88/9f/07f6cbf20aa647466ea4ea7b5a2e45bd3d9cda65643deca1d4070e8fed57/dnnviewer-0.1.0.dev8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "586be6e17e84efe0c78afb99205e68c3", "sha256": "7459d2268d8ced37999e7cc7c2b56842e46e72ea4bfdf59748de2df0a8871f1a"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev8.tar.gz", "has_sig": false, "md5_digest": "586be6e17e84efe0c78afb99205e68c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19956, "upload_time": "2020-04-10T16:08:42", "upload_time_iso_8601": "2020-04-10T16:08:42.576442Z", "url": "https://files.pythonhosted.org/packages/ff/00/622d574b599ebf311c0a4f47659e1371af153eb2ac00f4fa7d645b3f811f/dnnviewer-0.1.0.dev8.tar.gz", "yanked": false}], "0.1.0.dev9": [{"comment_text": "", "digests": {"md5": "920f7ffb869088dc9f2ff0bd5650f7d3", "sha256": "9825fa0af8756d42cc21dd9fb3c253d21bf0fdd4167f7b19983f1411836164f8"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev9-py3-none-any.whl", "has_sig": false, "md5_digest": "920f7ffb869088dc9f2ff0bd5650f7d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 33019, "upload_time": "2020-04-13T15:41:31", "upload_time_iso_8601": "2020-04-13T15:41:31.395313Z", "url": "https://files.pythonhosted.org/packages/d4/b3/15c24e71ec3576390790e5d319aea9f67d909f3a5c77474a7b62b04f9511/dnnviewer-0.1.0.dev9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f71975bed36d2220e27381d13246942f", "sha256": "2313de2ed661edee9b01453e3c885f526318b2e9dced96630e9bf96e61d8d8a9"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev9.tar.gz", "has_sig": false, "md5_digest": "f71975bed36d2220e27381d13246942f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 22893, "upload_time": "2020-04-13T15:41:32", "upload_time_iso_8601": "2020-04-13T15:41:32.877742Z", "url": "https://files.pythonhosted.org/packages/df/5a/cbacd5b44bead54117e4fefe4917c80714766f0fddd87dcff0d651291e9c/dnnviewer-0.1.0.dev9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d67da8fa4c9155624d88ecd59325392c", "sha256": "81a728467a1d9810cf29811b551710305aa1b867eab2f8f4d884fa63a3a1f71d"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev10-py3-none-any.whl", "has_sig": false, "md5_digest": "d67da8fa4c9155624d88ecd59325392c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 36635, "upload_time": "2020-04-17T19:53:18", "upload_time_iso_8601": "2020-04-17T19:53:18.928318Z", "url": "https://files.pythonhosted.org/packages/bc/80/a5532b7d1cdc51061090ac6502cff49b40b8ce1b506d9eb59bac06e4016d/dnnviewer-0.1.0.dev10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6a77bd829519053d86b63fa9773ef08", "sha256": "4c845c2c763840de6419279465152fa1ddbb471edb5bf06f6a04b3980e9a5188"}, "downloads": -1, "filename": "dnnviewer-0.1.0.dev10.tar.gz", "has_sig": false, "md5_digest": "f6a77bd829519053d86b63fa9773ef08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25458, "upload_time": "2020-04-17T19:53:20", "upload_time_iso_8601": "2020-04-17T19:53:20.837677Z", "url": "https://files.pythonhosted.org/packages/55/73/d7f2c6750a5db536aa04ab1211ec6700687ceb7098f3865289aecbdbc537/dnnviewer-0.1.0.dev10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:07 2020"}