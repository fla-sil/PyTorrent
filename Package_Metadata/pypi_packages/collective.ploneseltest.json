{"info": {"author": "Martin Aspeli", "author_email": "optilude@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\n============\n\nThis package provides a PloneTestCase-like class for running Selenium tests.\n\nIt requires that you have Selenium RC (http://selenium-rc.openqa.org) running whilst the tests are running. The current version of the Python 'selenium' library (which is an automatically installed dependency of this package) seems to work best with Selenium RC 0.9.2. Once downloaded, run it with:\n\n $ java -jar selenium-server.jar\n \nSee test_example.py for an example of a test that sets up a Plone site and runs a simple test.\n\nSee testcase.py for more information about the convenience methods contained in the SeleniumTestCase base class and the layer it uses to configure Selenium. You may want to use a custom layer derived from this one if you need to manage the Selenium Server information more carefully.\n\nNote that you can set the following environment variables to affect where the Selenium driver looks for the Selenium RC server:\n\n - SELENIUM_HOST, the hostname (default to \"localhost\")\n - SELENIUM_PORT, the hostname (default to \"localhost\")\n - SELENIUM_BROWSER, the browser to launch (defaults to \"\\*chrome\")\n \nUsage\n=====\n\nA simple test case may look like this::\n\n    from collective.ploneseltest import SeleniumTestCase\n\n    class DocumentTestCase(SeleniumTestCase):\n    \n        def afterSetUp(self):\n            \"\"\"Setup for each test\n            \"\"\"\n            self.setRoles(['Manager'])\n            self.login_user()\n        \n        def test_create_document(self):\n            self.selenium.click(\"//dl[@id='plone-contentmenu-factories']/dt/a/span[1]\")\n            self.selenium.click(\"document\")\n            self.wait()\n            self.selenium.type(\"title\", \"Some document\")\n            self.selenium.click(\"name=form_submit\")\n            self.wait()\n            self.failUnless(self.selenium.is_text_present(\"Some document\"))\n\nThe usual test setup and suite boilerplate has been omitted.\n\nSee http://selenium-rc.openqa.org/python.html for more information about available client commands. You may also be interested in http://selenium-ide.openqa.org.\n \nGotchas\n=======\n\nIt is possible to set up state in an afterSetUp() method, e.g.::\n\n    def afterSetUp(self):\n        self.setRoles(['Manager'])\n        ...\n        \nHowever, you should explicitly commit all changes before starting to run Selenium commands::\n\n    import transaction ; transaction.commit()\n    \nTo make this easier, there is a convenience self.open() method. This will open up the Plone site or a page within it. It will perform a commit before doing so, in case there are uncommitted changes.\n\nNote that self.open() is used by self.login_user(), thus to start each test as a logged-in Manager user, you would do::\n\n    def afterSetUp(self):\n        \"\"\"Setup for each test\n        \"\"\"\n        self.setRoles(['Manager'])\n        self.login_user()\n\nChangelog\n=========\n\n1.0b2\n-----\n\n* fixed a bug when selenium would start two times [Domen Kozar]\n\n1.0b1\n-----\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://plone.org", "keywords": "", "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "collective.ploneseltest", "package_url": "https://pypi.org/project/collective.ploneseltest/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.ploneseltest/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://plone.org"}, "release_url": "https://pypi.org/project/collective.ploneseltest/1.0b2/", "requires_dist": null, "requires_python": null, "summary": "Selenium test support for Plone", "version": "1.0b2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This package provides a PloneTestCase-like class for running Selenium tests.</p>\n<p>It requires that you have Selenium RC (<a href=\"http://selenium-rc.openqa.org\" rel=\"nofollow\">http://selenium-rc.openqa.org</a>) running whilst the tests are running. The current version of the Python \u2018selenium\u2019 library (which is an automatically installed dependency of this package) seems to work best with Selenium RC 0.9.2. Once downloaded, run it with:</p>\n<blockquote>\n$ java -jar selenium-server.jar</blockquote>\n<p>See test_example.py for an example of a test that sets up a Plone site and runs a simple test.</p>\n<p>See testcase.py for more information about the convenience methods contained in the SeleniumTestCase base class and the layer it uses to configure Selenium. You may want to use a custom layer derived from this one if you need to manage the Selenium Server information more carefully.</p>\n<p>Note that you can set the following environment variables to affect where the Selenium driver looks for the Selenium RC server:</p>\n<blockquote>\n<ul>\n<li>SELENIUM_HOST, the hostname (default to \u201clocalhost\u201d)</li>\n<li>SELENIUM_PORT, the hostname (default to \u201clocalhost\u201d)</li>\n<li>SELENIUM_BROWSER, the browser to launch (defaults to \u201c*chrome\u201d)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>A simple test case may look like this:</p>\n<pre>from collective.ploneseltest import SeleniumTestCase\n\nclass DocumentTestCase(SeleniumTestCase):\n\n    def afterSetUp(self):\n        \"\"\"Setup for each test\n        \"\"\"\n        self.setRoles(['Manager'])\n        self.login_user()\n\n    def test_create_document(self):\n        self.selenium.click(\"//dl[@id='plone-contentmenu-factories']/dt/a/span[1]\")\n        self.selenium.click(\"document\")\n        self.wait()\n        self.selenium.type(\"title\", \"Some document\")\n        self.selenium.click(\"name=form_submit\")\n        self.wait()\n        self.failUnless(self.selenium.is_text_present(\"Some document\"))\n</pre>\n<p>The usual test setup and suite boilerplate has been omitted.</p>\n<p>See <a href=\"http://selenium-rc.openqa.org/python.html\" rel=\"nofollow\">http://selenium-rc.openqa.org/python.html</a> for more information about available client commands. You may also be interested in <a href=\"http://selenium-ide.openqa.org\" rel=\"nofollow\">http://selenium-ide.openqa.org</a>.</p>\n</div>\n<div id=\"gotchas\">\n<h2>Gotchas</h2>\n<p>It is possible to set up state in an afterSetUp() method, e.g.:</p>\n<pre>def afterSetUp(self):\n    self.setRoles(['Manager'])\n    ...\n</pre>\n<p>However, you should explicitly commit all changes before starting to run Selenium commands:</p>\n<pre>import transaction ; transaction.commit()\n</pre>\n<p>To make this easier, there is a convenience self.open() method. This will open up the Plone site or a page within it. It will perform a commit before doing so, in case there are uncommitted changes.</p>\n<p>Note that self.open() is used by self.login_user(), thus to start each test as a logged-in Manager user, you would do:</p>\n<pre>def afterSetUp(self):\n    \"\"\"Setup for each test\n    \"\"\"\n    self.setRoles(['Manager'])\n    self.login_user()\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"b2\">\n<h3>1.0b2</h3>\n<ul>\n<li>fixed a bug when selenium would start two times [Domen Kozar]</li>\n</ul>\n</div>\n<div id=\"b1\">\n<h3>1.0b1</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 788017, "releases": {"1.0b1": [{"comment_text": "", "digests": {"md5": "72b07b232dceebf669df9248a7c57c44", "sha256": "89b9d8f56e11da3bc52313c56b922611456bbd483a98ed0c5d2d0d818a929e4a"}, "downloads": -1, "filename": "collective.ploneseltest-1.0b1-py2.4.egg", "has_sig": false, "md5_digest": "72b07b232dceebf669df9248a7c57c44", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 8655, "upload_time": "2008-05-29T01:16:20", "upload_time_iso_8601": "2008-05-29T01:16:20Z", "url": "https://files.pythonhosted.org/packages/ad/3b/aaf38c13b959007a9d0222c2632b47ea8934524b984efc6443e6d368118b/collective.ploneseltest-1.0b1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d44be9a2d87bdc6b870b08af0040d2e", "sha256": "7ee9a202e6c7f7c5ab0f1e1eea8e8856c29aacf5455543a1b2d4d7d1a07b860e"}, "downloads": -1, "filename": "collective.ploneseltest-1.0b1.tar.gz", "has_sig": false, "md5_digest": "4d44be9a2d87bdc6b870b08af0040d2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9562, "upload_time": "2008-05-29T01:16:19", "upload_time_iso_8601": "2008-05-29T01:16:19Z", "url": "https://files.pythonhosted.org/packages/89/8f/de6f79c992547ebce55a1ce7f7d1f1c1a6ac446616fd22cea4e3cf53a343/collective.ploneseltest-1.0b1.tar.gz", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "6de6e0ae8647b0bc05cc625f121d1517", "sha256": "b297b0a055455fc0cd45eab3f3d2355e7941e43e0521968773ddba354747242b"}, "downloads": -1, "filename": "collective.ploneseltest-1.0b2-py2.5.egg", "has_sig": false, "md5_digest": "6de6e0ae8647b0bc05cc625f121d1517", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 8509, "upload_time": "2009-10-08T09:10:48", "upload_time_iso_8601": "2009-10-08T09:10:48.084633Z", "url": "https://files.pythonhosted.org/packages/9a/e8/ad3b11e05789de9144d5f29786faa15bf147c2139d34df89dea04d0a3fea/collective.ploneseltest-1.0b2-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "432ed45a53060a3f113001e347b9dbc4", "sha256": "9a784c6edc7b18c0e43f556473e0be073b46cbb80d4d49b4730d173a337390d5"}, "downloads": -1, "filename": "collective.ploneseltest-1.0b2.tar.gz", "has_sig": false, "md5_digest": "432ed45a53060a3f113001e347b9dbc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9722, "upload_time": "2009-10-08T09:10:47", "upload_time_iso_8601": "2009-10-08T09:10:47.898728Z", "url": "https://files.pythonhosted.org/packages/3a/b3/1d5639dc5c13d6c06d734e7259a300fef432124890cdfa0ea796f0dbd175/collective.ploneseltest-1.0b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6de6e0ae8647b0bc05cc625f121d1517", "sha256": "b297b0a055455fc0cd45eab3f3d2355e7941e43e0521968773ddba354747242b"}, "downloads": -1, "filename": "collective.ploneseltest-1.0b2-py2.5.egg", "has_sig": false, "md5_digest": "6de6e0ae8647b0bc05cc625f121d1517", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 8509, "upload_time": "2009-10-08T09:10:48", "upload_time_iso_8601": "2009-10-08T09:10:48.084633Z", "url": "https://files.pythonhosted.org/packages/9a/e8/ad3b11e05789de9144d5f29786faa15bf147c2139d34df89dea04d0a3fea/collective.ploneseltest-1.0b2-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "432ed45a53060a3f113001e347b9dbc4", "sha256": "9a784c6edc7b18c0e43f556473e0be073b46cbb80d4d49b4730d173a337390d5"}, "downloads": -1, "filename": "collective.ploneseltest-1.0b2.tar.gz", "has_sig": false, "md5_digest": "432ed45a53060a3f113001e347b9dbc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9722, "upload_time": "2009-10-08T09:10:47", "upload_time_iso_8601": "2009-10-08T09:10:47.898728Z", "url": "https://files.pythonhosted.org/packages/3a/b3/1d5639dc5c13d6c06d734e7259a300fef432124890cdfa0ea796f0dbd175/collective.ploneseltest-1.0b2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:01 2020"}