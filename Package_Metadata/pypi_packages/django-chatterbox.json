{"info": {"author": "Adam Venturella <aventurella@blitzagency.com>", "author_email": "aventurella@blitzagency.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3"], "description": "Django Chatterbox: Social listening made easy\n==================================================\n\n.. image:: https://img.shields.io/pypi/v/django-chatterbox.svg\n    :target: https://pypi.python.org/pypi/django-chatterbox\n\n.. image:: https://img.shields.io/pypi/dm/django-chatterbox.svg\n        :target: https://pypi.python.org/pypi/django-chatterbox\n\n\nDjango Chatterbox is an Apache2 Licensed Social aggregation tool written with\nmodularity in mind.\n\nAggregating content from multiple social networks is not so much fun.  First\nyou have to handle OAuth, then acquiring keys, managing keys, writing api's\nto get data out of each social network, and then once you have it all, each\nsocial activity looks different.\n\nThis is a pain...a huge pain.\n\nEnter Django Chatterbox.  Chatterbox handles all of the oauth, keys, job\ncreation, api's, response iteration, and normalizing for you.  All you have to\nprovide is a social network key/secret, and Django Chatterbox does the rest.\n\nInstallation\n=============\n\nInstall using `pip`...\n\n.. code-block:: bash\n\n    pip install django-chatterbox\n\nAdd `'chatterbox'` to your `INSTALLED_APPS` setting.\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n\n        'chatterbox',\n    )\n\n\nAppend urls to urls.py\n\n.. code-block:: python\n\n    urlpatterns = patterns(\n        (r'^chatterbox/', include('chatterbox.urls', namespace=\"chatterbox\")),\n    )\n\n\nEXAMPLE TIME!!\n==========================\n\n\nVideo demo here_.\n\n.. _here: https://www.youtube.com/embed/g5q4FBLctvE\n\nor:\n\n- Go to instagram: https://instagram.com/developer/clients/manage/ and register an App\n- Once you have the app created, go here: `/admin/chatterbox/client/add/`\n- Fill out all Client model info using key/secret from instagram.com\n- Once the Model is created, click on it in the admin. Should look like this:\n    .. image:: https://www.evernote.com/shard/s503/sh/e3a0b4d3-8445-4e0e-953c-b170015f5c79/04111dcbb150cd0eb0c41bb760b224fe/deep/0/Change-client---Django-site-admin.png\n- Select the permissions you require (most likely just read permissions)\n- Click 'get authorization'\n- Follow the prompts redirecting you back to the admin\n- You now have a key model added to the admin\n- Next lets create a job, go here: `/admin/chatterbox/job/add/`\n- Select Instagram, Instagram tag search, highlight your key, add a search term\n- You now have everything you need to run a job.  Lets execute it!\n\n.. code-block:: python\n\n    ./manage.py shell\n    from chatterbox.models import Job\n    jobs = Job.objects.all()\n    job = jobs[0]\n    job.run()\n    # you will see...lots of stuff happen :)\n\n\n\nHow does it work?\n==========================\n\nChatterbox comes with a few built in models and features.  Here is a\nquick run down of what you all get...\n\nServices\n----------------\nA service is basically a social network and it's associated interactions.\nChatterbox ships with 4 services out the box: Facebook, Twitter, Instagram,\nand YouTube.  Additional services will likely be added but this is what\ncomes for free atm.\n\nEach service has an associated driver which is the underlying code used\nto interact with that social nework.\n\nClients\n----------------\nIf you have ever worked with any of the social networks you know that\nto interact with it, you need to go grab a key/secret for that social\nnetwork.  Chatterbox clients are the model representation of that key and\nsecret.\n\nKeys\n-------------\nKeys are the result of a client and a user.  Once a Client is created,\nyou use that client to authenticate a user and create a key.  This key\nhas an access token attribute on it used to make outgoing requests.\n\nCollectors\n-------------\nChatterbox ships with a few built in collectors.  Think of collectors as\nthe thing that goes out, collects the social activites, and then saves them.\nFor every social networks possible collection point, we have build out a\ncollector.  ex: i want to search instagram for all activites flagged with\nthe hash \\#cheese.  This would use the collector 'Instagram Tag Search'\n\n\nJobs\n-----\nA job is everything you need to go out, grab data, and bring it back.\nA job holds a collector, key, and any associated arguments needed to\nquery that social network.\n\nActivities\n------------------\nActivities are what is returned from each social network.  It holds a\nnormalized 'blob' object on it (among other things) that can be used\nto access all associated social response\n\n\n\n\nRelease History\n---------------\n\n0.0.5 (2016-01-19)\n++++++++++++++++++\n\n**Added Tumblr support**\n**Added Twitter user search**\n\n\n0.0.1 (2014-01-20)\n++++++++++++++++++\n\n**API Changes**\n**Bugfixes**", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/blitzagency/django-chatterbox", "keywords": "django social chatterbox", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-chatterbox", "package_url": "https://pypi.org/project/django-chatterbox/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-chatterbox/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/blitzagency/django-chatterbox"}, "release_url": "https://pypi.org/project/django-chatterbox/0.0.8/", "requires_dist": null, "requires_python": null, "summary": "Social listening made easy", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-chatterbox-social-listening-made-easy\">\n<h2>Django Chatterbox: Social listening made easy</h2>\n<a href=\"https://pypi.python.org/pypi/django-chatterbox\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/django-chatterbox.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61802ac40304f613def858d99727312566795ab4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d63686174746572626f782e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-chatterbox\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/django-chatterbox.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbe1e018e58f5778e1eb6f011771326d4cfa52e7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f646a616e676f2d63686174746572626f782e737667\"></a>\n<p>Django Chatterbox is an Apache2 Licensed Social aggregation tool written with\nmodularity in mind.</p>\n<p>Aggregating content from multiple social networks is not so much fun.  First\nyou have to handle OAuth, then acquiring keys, managing keys, writing api\u2019s\nto get data out of each social network, and then once you have it all, each\nsocial activity looks different.</p>\n<p>This is a pain\u2026a huge pain.</p>\n<p>Enter Django Chatterbox.  Chatterbox handles all of the oauth, keys, job\ncreation, api\u2019s, response iteration, and normalizing for you.  All you have to\nprovide is a social network key/secret, and Django Chatterbox does the rest.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install using <cite>pip</cite>\u2026</p>\n<pre>pip install django-chatterbox\n</pre>\n<p>Add <cite>\u2018chatterbox\u2019</cite> to your <cite>INSTALLED_APPS</cite> setting.</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n\n    <span class=\"s1\">'chatterbox'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Append urls to urls.py</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^chatterbox/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'chatterbox.urls'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">\"chatterbox\"</span><span class=\"p\">)),</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"example-time\">\n<h2>EXAMPLE TIME!!</h2>\n<p>Video demo <a href=\"https://www.youtube.com/embed/g5q4FBLctvE\" rel=\"nofollow\">here</a>.</p>\n<p>or:</p>\n<ul>\n<li><p>Go to instagram: <a href=\"https://instagram.com/developer/clients/manage/\" rel=\"nofollow\">https://instagram.com/developer/clients/manage/</a> and register an App</p>\n</li>\n<li><p>Once you have the app created, go here: <cite>/admin/chatterbox/client/add/</cite></p>\n</li>\n<li><p>Fill out all Client model info using key/secret from instagram.com</p>\n</li>\n<li><dl>\n<dt>Once the Model is created, click on it in the admin. Should look like this:</dt>\n<dd><img alt=\"https://www.evernote.com/shard/s503/sh/e3a0b4d3-8445-4e0e-953c-b170015f5c79/04111dcbb150cd0eb0c41bb760b224fe/deep/0/Change-client---Django-site-admin.png\" class=\"first last\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49b9799b67596657a19cdf858f92a25d1429e746/68747470733a2f2f7777772e657665726e6f74652e636f6d2f73686172642f733530332f73682f65336130623464332d383434352d346530652d393533632d6231373030313566356337392f30343131316463626231353063643065623063343162623736306232323466652f646565702f302f4368616e67652d636c69656e742d2d2d446a616e676f2d736974652d61646d696e2e706e67\">\n</dd>\n</dl>\n</li>\n<li><p>Select the permissions you require (most likely just read permissions)</p>\n</li>\n<li><p>Click \u2018get authorization\u2019</p>\n</li>\n<li><p>Follow the prompts redirecting you back to the admin</p>\n</li>\n<li><p>You now have a key model added to the admin</p>\n</li>\n<li><p>Next lets create a job, go here: <cite>/admin/chatterbox/job/add/</cite></p>\n</li>\n<li><p>Select Instagram, Instagram tag search, highlight your key, add a search term</p>\n</li>\n<li><p>You now have everything you need to run a job.  Lets execute it!</p>\n</li>\n</ul>\n<pre><span class=\"o\">./</span><span class=\"n\">manage</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">shell</span>\n<span class=\"kn\">from</span> <span class=\"nn\">chatterbox.models</span> <span class=\"kn\">import</span> <span class=\"n\">Job</span>\n<span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">jobs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"c1\"># you will see...lots of stuff happen :)</span>\n</pre>\n</div>\n<div id=\"how-does-it-work\">\n<h2>How does it work?</h2>\n<p>Chatterbox comes with a few built in models and features.  Here is a\nquick run down of what you all get\u2026</p>\n<div id=\"services\">\n<h3>Services</h3>\n<p>A service is basically a social network and it\u2019s associated interactions.\nChatterbox ships with 4 services out the box: Facebook, Twitter, Instagram,\nand YouTube.  Additional services will likely be added but this is what\ncomes for free atm.</p>\n<p>Each service has an associated driver which is the underlying code used\nto interact with that social nework.</p>\n</div>\n<div id=\"clients\">\n<h3>Clients</h3>\n<p>If you have ever worked with any of the social networks you know that\nto interact with it, you need to go grab a key/secret for that social\nnetwork.  Chatterbox clients are the model representation of that key and\nsecret.</p>\n</div>\n<div id=\"keys\">\n<h3>Keys</h3>\n<p>Keys are the result of a client and a user.  Once a Client is created,\nyou use that client to authenticate a user and create a key.  This key\nhas an access token attribute on it used to make outgoing requests.</p>\n</div>\n<div id=\"collectors\">\n<h3>Collectors</h3>\n<p>Chatterbox ships with a few built in collectors.  Think of collectors as\nthe thing that goes out, collects the social activites, and then saves them.\nFor every social networks possible collection point, we have build out a\ncollector.  ex: i want to search instagram for all activites flagged with\nthe hash #cheese.  This would use the collector \u2018Instagram Tag Search\u2019</p>\n</div>\n<div id=\"jobs\">\n<h3>Jobs</h3>\n<p>A job is everything you need to go out, grab data, and bring it back.\nA job holds a collector, key, and any associated arguments needed to\nquery that social network.</p>\n</div>\n<div id=\"activities\">\n<h3>Activities</h3>\n<p>Activities are what is returned from each social network.  It holds a\nnormalized \u2018blob\u2019 object on it (among other things) that can be used\nto access all associated social response</p>\n</div>\n<div id=\"release-history\">\n<h3>Release History</h3>\n<div id=\"id1\">\n<h4>0.0.5 (2016-01-19)</h4>\n<p><strong>Added Tumblr support</strong>\n<strong>Added Twitter user search</strong></p>\n</div>\n<div id=\"id2\">\n<h4>0.0.1 (2014-01-20)</h4>\n<p><strong>API Changes</strong>\n<strong>Bugfixes</strong></p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1912483, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4a9d770aaf040bfdcf0a268a41684d4c", "sha256": "5defba591a4d0257c6c488ab9f282f2471f144c0378033fb7c7aa85531d2c315"}, "downloads": -1, "filename": "django-chatterbox-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4a9d770aaf040bfdcf0a268a41684d4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28902, "upload_time": "2015-03-10T00:22:39", "upload_time_iso_8601": "2015-03-10T00:22:39.602688Z", "url": "https://files.pythonhosted.org/packages/f3/07/5cf95c048e9969f691d5a1bd90a69725621ba660884d91094e2ee367450b/django-chatterbox-0.0.1.tar.gz", "yanked": false}], "0.0.2": [], "0.0.3": [], "0.0.4": [{"comment_text": "", "digests": {"md5": "c064d90be8a40e20d84bd297f96ab30b", "sha256": "1a914399ef4238c2345b2ed4e86a4d0afbaa0bfef468116efa0d764344261227"}, "downloads": -1, "filename": "django-chatterbox-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c064d90be8a40e20d84bd297f96ab30b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 732935, "upload_time": "2015-03-13T00:47:37", "upload_time_iso_8601": "2015-03-13T00:47:37.432705Z", "url": "https://files.pythonhosted.org/packages/ed/17/adb0acfcfad9b05e992c6a3af429a76e27e8ffd2529f9ef5c7c365d7dd5c/django-chatterbox-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "da55f2d999a896c8ac749f98608a29f4", "sha256": "db1c1c66f26264507aeef8c42e6b1d4a17198fd437ae8eaffc306875e4431a13"}, "downloads": -1, "filename": "django-chatterbox-0.0.5.tar.gz", "has_sig": false, "md5_digest": "da55f2d999a896c8ac749f98608a29f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 739921, "upload_time": "2016-01-19T21:50:22", "upload_time_iso_8601": "2016-01-19T21:50:22.435002Z", "url": "https://files.pythonhosted.org/packages/9d/c7/1ed982f18e731a0d88b91426d3ffc554bd5e8fbcc9c512ec10db027b1466/django-chatterbox-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "cce5e77ac17cbcbea29a4fece4833436", "sha256": "0ffa5018fcfa35e0720d3030f58157d160491c8ac14e6fedfe88ccfb4c3a793f"}, "downloads": -1, "filename": "django-chatterbox-0.0.6.tar.gz", "has_sig": false, "md5_digest": "cce5e77ac17cbcbea29a4fece4833436", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 739904, "upload_time": "2016-01-19T21:57:47", "upload_time_iso_8601": "2016-01-19T21:57:47.880382Z", "url": "https://files.pythonhosted.org/packages/17/e8/2f2597548515734fbb9c6a9f7d163b78bc919fe452c8767df51a8f39715a/django-chatterbox-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "511ed6b0709446bbfb5dcf4a757332d0", "sha256": "033e1fcb6219d96b71f7f54a734f19c8a0dc45f9dda796d6116a53878970201d"}, "downloads": -1, "filename": "django-chatterbox-0.0.7.tar.gz", "has_sig": false, "md5_digest": "511ed6b0709446bbfb5dcf4a757332d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 739928, "upload_time": "2016-01-19T22:05:30", "upload_time_iso_8601": "2016-01-19T22:05:30.591211Z", "url": "https://files.pythonhosted.org/packages/83/a2/c5e247e562c6663e4c5121cdce82cac2d8da85e3f762a96f1520270ee3f0/django-chatterbox-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "91f67f346956ef46a4cbe9843fe3ea38", "sha256": "215cdd85ae7e8b883ef7ad0b2edda3411a9f825beaab269fe9fb94d9e161a991"}, "downloads": -1, "filename": "django-chatterbox-0.0.8.tar.gz", "has_sig": false, "md5_digest": "91f67f346956ef46a4cbe9843fe3ea38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 739936, "upload_time": "2016-01-19T22:07:11", "upload_time_iso_8601": "2016-01-19T22:07:11.322858Z", "url": "https://files.pythonhosted.org/packages/3e/9e/6c195a9425660ccce6f451c93fde42d519d1c73beb2d1749cb594b8522f6/django-chatterbox-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "91f67f346956ef46a4cbe9843fe3ea38", "sha256": "215cdd85ae7e8b883ef7ad0b2edda3411a9f825beaab269fe9fb94d9e161a991"}, "downloads": -1, "filename": "django-chatterbox-0.0.8.tar.gz", "has_sig": false, "md5_digest": "91f67f346956ef46a4cbe9843fe3ea38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 739936, "upload_time": "2016-01-19T22:07:11", "upload_time_iso_8601": "2016-01-19T22:07:11.322858Z", "url": "https://files.pythonhosted.org/packages/3e/9e/6c195a9425660ccce6f451c93fde42d519d1c73beb2d1749cb594b8522f6/django-chatterbox-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:10 2020"}