{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "Fyoo\n====\n\n*A CLI for the containerized data orchestration world*\n\n|PyPI Package|\n|Documentation| \n|Git tag|\n|Test status|\n|Code coverage|\n\n\nFyoo is a consistent, extendable, templated CLI for dataflow operations.\nFyoo makes sure that the individual tasks in data orchestration behave\nin the same way, so that every building block is easily understood\nand glued together.\n\nUsing Flows\n```````````\n\nYou can install Fyoo from PyPI:\n\n.. code-block:: bash\n\n    pip install fyoo\n\nNote: Pipenv_ is the best deterministic dependency tool for building applications.\n\nFyoo provides two main features for those using the Fyoo CLI:\n\n* Consistent templating\n* Easy resource configuration\n\nTemplated Arguments\n+++++++++++++++++++\n\nThe simplest flow (subparser) built in is ``hello``, which\nhas an optional argument for the message. All arguments\non every flow are templated, assuming the argument type is a string.\n\n.. code-block:: bash\n\n   fyoo hello --message 'The date is {{ date() }}'\n   # The date is 2020-02-25\n\nBut arguments on Fyoo precurse the Flow subcommand, so\nyou can provide context in the same way on every different\nFlow. Arguments to `fyoo` will always be the same, \nbut the Flow subcommand may have any arguments it wishes.\n\n.. code-block:: bash\n\n    # `hello` has an optional argument --message,\n    # and `touch` has a required argument filename.\n    # But both receive context from the --jinja-context\n    # argument on `fyoo`.\n\n    fyoo --jinja-context='{\"a\": \"any_var\"}' \\\n      hello --message 'Hello {{ a }}!'\n    # Hello any_var!\n\n    fyoo --jinja-context='{\"a\": \"any_var\"}' \\\n      touch '{{ a }}.txt'\n    ls -Ut | head -1\n    # any_var.txt\n\nResource Configuration\n++++++++++++++++++++++\n\nNote: Run postgres in the background if you'd like to\ntry the following examples:\n\n.. code-block:: bash\n\n    docker run --name fyoo-pg \\\n        -e POSTGRES_PASSWORD=secretpass \\\n        -p 5432:5432 \\\n        -d postgres\n\nFyoo resources are configured in a single way for all Flows.\nSimply add to a ``fyoo.ini`` file, and run Fyoo from the same\ndirectory.\n\n.. code-block:: ini\n\n    # fyoo.ini\n\n    [postgres]\n    username = postgres\n    password = %(FYOO_POSTGRES_PASSWORD)s\n    host = 127.0.0.1\n\n.. code-block:: bash\n\n    FYOO_POSTGRES_PASSWORD=supersecret \\\n    fyoo \\\n      postgres_query_to_csv_file \\\n      'select {{ date() }} as d' out.csv\n    cat out.csv\n    # d\n    # \"2020-01-01\"\n\nRunning it All Together\n+++++++++++++++++++++++\n\nThe real power of Fyoo comes together when you use templating\nand resources together. Template and resource specification\nare generally static, so they can and should be declaratively\nset (with particular resource credentials provided at runtime).\nThis means that executable arguments never change.\n\nHere is an example putting it all together.\nWe use the contents of a sql template file to run a\nquery, and output to a csv file of the current date.\n\n.. code-block:: sql\n\n    -- table_counter.tpl.sql\n\n    {% for i in range(0, num) %}\n      {% if not loop.first %}union all{% endif %}\n      select {{ i }} as a\n    {% endfor %}\n\n\n.. code-block:: bash\n\n    FYOO_POSTGRES_PASSWORD=supersecret \\\n    fyoo \\\n      --jinja-context '{\"num\": 5}' \\\n      postgres_query_to_csv_file \\\n      \"$(cat table_counter.tpl.sql)\" \\\n      'results-{{ date() }}.csv'\n\nBuilding Flows\n``````````````\n\nFlows are Fyoo's subcommands, which are written as functions.\nFyoo decorators allow you to build custom CLIs quickly and\neasily. When writing a Flow, you simply need to know your arguments\nand ``FyooResource``'s that you will use. There are three main decorators.\n\n``@fyoo.flow`` will do one thing:\n\n#. *Usage*: Expose your Flow function as a CLI subcommand of `fyoo`\n\nOnce you have a Flow, ``@fyoo.argument`` will do two things\nif your Flow needs arguments:\n\n#. *Usage*: Add an argparse argument to the Flow CLI\n#. *Implementation*: Add a templated in version of that CLI argument\n   as a keyword argument to the Flow function,\n\nLastly, ``@fyoo.resource`` will do one thing if your\nFlow needs a resource:\n\n#. *Usage*: Add that resource as a keyword argument to the Flow function,\n   based on the contents of ``fyoo.ini``.\n\nHere is a minimalist example of ``fyoo postgres_query_to_csv_file``,\nwith less optional arguments than the real version:\n\n.. code-block:: python\n\n    @fyoo.argument('--query-batch-size', type=int, default=10_000)\n    @fyoo.argument('target')\n    @fyoo.argument('sql')\n    @fyoo.resource(PostgresResource)\n    @fyoo.flow()\n    def postgres_query_to_csv_file(\n            postgres: Connection,\n            sql: str,\n            target: str,\n            query_batch_size: int,\n    ):\n        result_proxy: ResultProxy = postgres.execute(sql)\n\n        with open(target, 'w') as f:\n            writer = csv.writer(f)\n            writer.writerow(result_proxy.keys())\n            while result_proxy.returns_rows:\n                rows = result_proxy.fetchmany(query_batch_size)\n                if not rows:\n                    break\n                writer.writerows(rows)\n\n.. links\n\n.. |PyPI Package| image:: https://img.shields.io/pypi/v/fyoo.svg\n   :target: https://pypi.python.org/pypi/fyoo/\n.. |Documentation| image:: https://readthedocs.org/projects/fyoo/badge/?version=latest\n    :target: https://fyoo.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n.. |Git tag| image:: https://img.shields.io/github/tag/brian-bk/fyoo.svg\n   :target: https://github.com/brian-bk/fyoo/commit/\n.. |Test status| image:: https://circleci.com/gh/brian-bk/fyoo/tree/master.svg?style=svg\n    :target: https://circleci.com/gh/brian-bk/fyoo/tree/master\n.. |Code coverage| image:: https://codecov.io/gh/brian-bk/fyoo/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/brian-bk/fyoo\n.. _Pipenv: https://pipenv-fork.readthedocs.io/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fyoo", "package_url": "https://pypi.org/project/fyoo/", "platform": "", "project_url": "https://pypi.org/project/fyoo/", "project_urls": null, "release_url": "https://pypi.org/project/fyoo/0.0.1b2/", "requires_dist": ["configparser", "jinja2", "coverage ; extra == 'all'", "pytest-cov ; extra == 'all'", "autopep8 ; extra == 'all'", "pytest ; extra == 'all'", "pytest-env ; extra == 'all'", "twine ; extra == 'all'", "mysqlclient ; extra == 'all'", "sphinx-rtd-theme ; extra == 'all'", "sphinx-argparse ; extra == 'all'", "codecov ; extra == 'all'", "sphinx ; extra == 'all'", "sphinx-autobuild ; extra == 'all'", "sqlalchemy ; extra == 'all'", "pylint ; extra == 'all'", "psycopg2 ; extra == 'all'", "coverage ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "autopep8 ; extra == 'dev'", "pytest ; extra == 'dev'", "pytest-env ; extra == 'dev'", "twine ; extra == 'dev'", "sphinx-rtd-theme ; extra == 'dev'", "sphinx-argparse ; extra == 'dev'", "codecov ; extra == 'dev'", "sphinx ; extra == 'dev'", "sphinx-autobuild ; extra == 'dev'", "pylint ; extra == 'dev'", "mysqlclient ; extra == 'mysql'", "sqlalchemy ; extra == 'mysql'", "psycopg2 ; extra == 'postgres'", "sqlalchemy ; extra == 'postgres'", "pylint ; extra == 'test'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'", "pytest-env ; extra == 'test'"], "requires_python": ">=3.7", "summary": "", "version": "0.0.1b2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>A CLI for the containerized data orchestration world</em></p>\n<p><a href=\"https://pypi.python.org/pypi/fyoo/\" rel=\"nofollow\"><img alt=\"PyPI Package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/151d35ce0bbb3e47517d82336ee5bd68698ad3ee/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f66796f6f2e737667\"></a>\n<a href=\"https://fyoo.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8daf739e9ed68d6f5272f8de717d6af4564744d8/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f66796f6f2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/brian-bk/fyoo/commit/\" rel=\"nofollow\"><img alt=\"Git tag\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e550cd98d9f95dc8a45222fe8b403adde1451a0d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f627269616e2d626b2f66796f6f2e737667\"></a>\n<a href=\"https://circleci.com/gh/brian-bk/fyoo/tree/master\" rel=\"nofollow\"><img alt=\"Test status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40df3b54c80c22f3abf23db3658824e54c37e1a1/68747470733a2f2f636972636c6563692e636f6d2f67682f627269616e2d626b2f66796f6f2f747265652f6d61737465722e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/brian-bk/fyoo\" rel=\"nofollow\"><img alt=\"Code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a6ab066b661bc8b2ec4f33442b336d9bf2a7b04/68747470733a2f2f636f6465636f762e696f2f67682f627269616e2d626b2f66796f6f2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Fyoo is a consistent, extendable, templated CLI for dataflow operations.\nFyoo makes sure that the individual tasks in data orchestration behave\nin the same way, so that every building block is easily understood\nand glued together.</p>\n<div id=\"using-flows\">\n<h2>Using Flows</h2>\n<p>You can install Fyoo from PyPI:</p>\n<pre>pip install fyoo\n</pre>\n<p>Note: <a href=\"https://pipenv-fork.readthedocs.io/\" rel=\"nofollow\">Pipenv</a> is the best deterministic dependency tool for building applications.</p>\n<p>Fyoo provides two main features for those using the Fyoo CLI:</p>\n<ul>\n<li>Consistent templating</li>\n<li>Easy resource configuration</li>\n</ul>\n<div id=\"templated-arguments\">\n<h3>Templated Arguments</h3>\n<p>The simplest flow (subparser) built in is <tt>hello</tt>, which\nhas an optional argument for the message. All arguments\non every flow are templated, assuming the argument type is a string.</p>\n<pre>fyoo hello --message <span class=\"s1\">'The date is {{ date() }}'</span>\n<span class=\"c1\"># The date is 2020-02-25</span>\n</pre>\n<p>But arguments on Fyoo precurse the Flow subcommand, so\nyou can provide context in the same way on every different\nFlow. Arguments to <cite>fyoo</cite> will always be the same,\nbut the Flow subcommand may have any arguments it wishes.</p>\n<pre><span class=\"c1\"># `hello` has an optional argument --message,\n# and `touch` has a required argument filename.\n# But both receive context from the --jinja-context\n# argument on `fyoo`.\n</span>\nfyoo --jinja-context<span class=\"o\">=</span><span class=\"s1\">'{\"a\": \"any_var\"}'</span> <span class=\"se\">\\\n</span>  hello --message <span class=\"s1\">'Hello {{ a }}!'</span>\n<span class=\"c1\"># Hello any_var!\n</span>\nfyoo --jinja-context<span class=\"o\">=</span><span class=\"s1\">'{\"a\": \"any_var\"}'</span> <span class=\"se\">\\\n</span>  touch <span class=\"s1\">'{{ a }}.txt'</span>\nls -Ut <span class=\"p\">|</span> head -1\n<span class=\"c1\"># any_var.txt</span>\n</pre>\n</div>\n<div id=\"resource-configuration\">\n<h3>Resource Configuration</h3>\n<p>Note: Run postgres in the background if you\u2019d like to\ntry the following examples:</p>\n<pre>docker run --name fyoo-pg <span class=\"se\">\\\n</span>    -e <span class=\"nv\">POSTGRES_PASSWORD</span><span class=\"o\">=</span>secretpass <span class=\"se\">\\\n</span>    -p <span class=\"m\">5432</span>:5432 <span class=\"se\">\\\n</span>    -d postgres\n</pre>\n<p>Fyoo resources are configured in a single way for all Flows.\nSimply add to a <tt>fyoo.ini</tt> file, and run Fyoo from the same\ndirectory.</p>\n<pre><span class=\"c1\"># fyoo.ini</span>\n\n<span class=\"k\">[postgres]</span>\n<span class=\"na\">username</span> <span class=\"o\">=</span> <span class=\"s\">postgres</span>\n<span class=\"na\">password</span> <span class=\"o\">=</span> <span class=\"s\">%(FYOO_POSTGRES_PASSWORD)s</span>\n<span class=\"na\">host</span> <span class=\"o\">=</span> <span class=\"s\">127.0.0.1</span>\n</pre>\n<pre><span class=\"nv\">FYOO_POSTGRES_PASSWORD</span><span class=\"o\">=</span>supersecret <span class=\"se\">\\\n</span>fyoo <span class=\"se\">\\\n</span>  postgres_query_to_csv_file <span class=\"se\">\\\n</span>  <span class=\"s1\">'select {{ date() }} as d'</span> out.csv\ncat out.csv\n<span class=\"c1\"># d\n# \"2020-01-01\"</span>\n</pre>\n</div>\n<div id=\"running-it-all-together\">\n<h3>Running it All Together</h3>\n<p>The real power of Fyoo comes together when you use templating\nand resources together. Template and resource specification\nare generally static, so they can and should be declaratively\nset (with particular resource credentials provided at runtime).\nThis means that executable arguments never change.</p>\n<p>Here is an example putting it all together.\nWe use the contents of a sql template file to run a\nquery, and output to a csv file of the current date.</p>\n<pre><span class=\"c1\">-- table_counter.tpl.sql\n</span>\n<span class=\"err\">{</span><span class=\"o\">%</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"o\">%</span><span class=\"err\">}</span>\n  <span class=\"err\">{</span><span class=\"o\">%</span> <span class=\"k\">if</span> <span class=\"k\">not</span> <span class=\"n\">loop</span><span class=\"p\">.</span><span class=\"k\">first</span> <span class=\"o\">%</span><span class=\"err\">}</span><span class=\"k\">union</span> <span class=\"k\">all</span><span class=\"err\">{</span><span class=\"o\">%</span> <span class=\"n\">endif</span> <span class=\"o\">%</span><span class=\"err\">}</span>\n  <span class=\"k\">select</span> <span class=\"err\">{{</span> <span class=\"n\">i</span> <span class=\"err\">}}</span> <span class=\"k\">as</span> <span class=\"n\">a</span>\n<span class=\"err\">{</span><span class=\"o\">%</span> <span class=\"n\">endfor</span> <span class=\"o\">%</span><span class=\"err\">}</span>\n</pre>\n<pre><span class=\"nv\">FYOO_POSTGRES_PASSWORD</span><span class=\"o\">=</span>supersecret <span class=\"se\">\\\n</span>fyoo <span class=\"se\">\\\n</span>  --jinja-context <span class=\"s1\">'{\"num\": 5}'</span> <span class=\"se\">\\\n</span>  postgres_query_to_csv_file <span class=\"se\">\\\n</span>  <span class=\"s2\">\"</span><span class=\"k\">$(</span>cat table_counter.tpl.sql<span class=\"k\">)</span><span class=\"s2\">\"</span> <span class=\"se\">\\\n</span>  <span class=\"s1\">'results-{{ date() }}.csv'</span>\n</pre>\n</div>\n</div>\n<div id=\"building-flows\">\n<h2>Building Flows</h2>\n<p>Flows are Fyoo\u2019s subcommands, which are written as functions.\nFyoo decorators allow you to build custom CLIs quickly and\neasily. When writing a Flow, you simply need to know your arguments\nand <tt>FyooResource</tt>\u2019s that you will use. There are three main decorators.</p>\n<p><tt>@fyoo.flow</tt> will do one thing:</p>\n<ol>\n<li><em>Usage</em>: Expose your Flow function as a CLI subcommand of <cite>fyoo</cite></li>\n</ol>\n<p>Once you have a Flow, <tt>@fyoo.argument</tt> will do two things\nif your Flow needs arguments:</p>\n<ol>\n<li><em>Usage</em>: Add an argparse argument to the Flow CLI</li>\n<li><em>Implementation</em>: Add a templated in version of that CLI argument\nas a keyword argument to the Flow function,</li>\n</ol>\n<p>Lastly, <tt>@fyoo.resource</tt> will do one thing if your\nFlow needs a resource:</p>\n<ol>\n<li><em>Usage</em>: Add that resource as a keyword argument to the Flow function,\nbased on the contents of <tt>fyoo.ini</tt>.</li>\n</ol>\n<p>Here is a minimalist example of <tt>fyoo postgres_query_to_csv_file</tt>,\nwith less optional arguments than the real version:</p>\n<pre><span class=\"nd\">@fyoo</span><span class=\"o\">.</span><span class=\"n\">argument</span><span class=\"p\">(</span><span class=\"s1\">'--query-batch-size'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">10_000</span><span class=\"p\">)</span>\n<span class=\"nd\">@fyoo</span><span class=\"o\">.</span><span class=\"n\">argument</span><span class=\"p\">(</span><span class=\"s1\">'target'</span><span class=\"p\">)</span>\n<span class=\"nd\">@fyoo</span><span class=\"o\">.</span><span class=\"n\">argument</span><span class=\"p\">(</span><span class=\"s1\">'sql'</span><span class=\"p\">)</span>\n<span class=\"nd\">@fyoo</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"n\">PostgresResource</span><span class=\"p\">)</span>\n<span class=\"nd\">@fyoo</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">postgres_query_to_csv_file</span><span class=\"p\">(</span>\n        <span class=\"n\">postgres</span><span class=\"p\">:</span> <span class=\"n\">Connection</span><span class=\"p\">,</span>\n        <span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">query_batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">result_proxy</span><span class=\"p\">:</span> <span class=\"n\">ResultProxy</span> <span class=\"o\">=</span> <span class=\"n\">postgres</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">writer</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerow</span><span class=\"p\">(</span><span class=\"n\">result_proxy</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"k\">while</span> <span class=\"n\">result_proxy</span><span class=\"o\">.</span><span class=\"n\">returns_rows</span><span class=\"p\">:</span>\n            <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">result_proxy</span><span class=\"o\">.</span><span class=\"n\">fetchmany</span><span class=\"p\">(</span><span class=\"n\">query_batch_size</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">rows</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerows</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6796988, "releases": {"0.0.1b1": [{"comment_text": "", "digests": {"md5": "ce0e000e2e2120b7f8b7b048dba71c2e", "sha256": "0759b8ce567c663c8b6f40481dcd504ad8ba0b9fb59c69d27a01d45962c8f545"}, "downloads": -1, "filename": "fyoo-0.0.1b1-py3-none-any.whl", "has_sig": false, "md5_digest": "ce0e000e2e2120b7f8b7b048dba71c2e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 19503, "upload_time": "2020-03-12T03:37:41", "upload_time_iso_8601": "2020-03-12T03:37:41.545943Z", "url": "https://files.pythonhosted.org/packages/44/7f/5d5a63cc70ce1fb75db1daa7930ac5d770444859905717fcdec7e612c79a/fyoo-0.0.1b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "baffb3aabdd5a21aedbdeccc19642a65", "sha256": "fe80497168586fc2093edbea00cfbea1572c2e6644c1c5f0c1a7758f36775ecb"}, "downloads": -1, "filename": "fyoo-0.0.1b1.tar.gz", "has_sig": false, "md5_digest": "baffb3aabdd5a21aedbdeccc19642a65", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13425, "upload_time": "2020-03-12T03:37:43", "upload_time_iso_8601": "2020-03-12T03:37:43.003966Z", "url": "https://files.pythonhosted.org/packages/64/3e/eeeaa151c0e0ae8a49d54ca9fe9a88c3a44d3a330446baf7d9672663db1e/fyoo-0.0.1b1.tar.gz", "yanked": false}], "0.0.1b2": [{"comment_text": "", "digests": {"md5": "09548b9a03fc85ec782f3b1fb3e9ba88", "sha256": "bacba4ca5f7ce8f95b7f1b85cd73cba9c6fc7ed13359f05608b72ebf92d894df"}, "downloads": -1, "filename": "fyoo-0.0.1b2-py3-none-any.whl", "has_sig": false, "md5_digest": "09548b9a03fc85ec782f3b1fb3e9ba88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 19511, "upload_time": "2020-03-12T03:56:04", "upload_time_iso_8601": "2020-03-12T03:56:04.620467Z", "url": "https://files.pythonhosted.org/packages/f7/76/4a8e3a3a5949e8175f80613a105bfd99742626d194916d2c65ebd7b1b159/fyoo-0.0.1b2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a4e3aa69a863c2db7ddc0b0dcd14251", "sha256": "cc27bc1effc93e22a0636016c270173e78462890949b876f0ea9fefbbb5e933b"}, "downloads": -1, "filename": "fyoo-0.0.1b2.tar.gz", "has_sig": false, "md5_digest": "5a4e3aa69a863c2db7ddc0b0dcd14251", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13448, "upload_time": "2020-03-12T03:56:05", "upload_time_iso_8601": "2020-03-12T03:56:05.998834Z", "url": "https://files.pythonhosted.org/packages/d6/b0/cc5ab3d0071b5efcaf1f569354d5f726a48d64bfc4c4295f552be83b5bbd/fyoo-0.0.1b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09548b9a03fc85ec782f3b1fb3e9ba88", "sha256": "bacba4ca5f7ce8f95b7f1b85cd73cba9c6fc7ed13359f05608b72ebf92d894df"}, "downloads": -1, "filename": "fyoo-0.0.1b2-py3-none-any.whl", "has_sig": false, "md5_digest": "09548b9a03fc85ec782f3b1fb3e9ba88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 19511, "upload_time": "2020-03-12T03:56:04", "upload_time_iso_8601": "2020-03-12T03:56:04.620467Z", "url": "https://files.pythonhosted.org/packages/f7/76/4a8e3a3a5949e8175f80613a105bfd99742626d194916d2c65ebd7b1b159/fyoo-0.0.1b2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a4e3aa69a863c2db7ddc0b0dcd14251", "sha256": "cc27bc1effc93e22a0636016c270173e78462890949b876f0ea9fefbbb5e933b"}, "downloads": -1, "filename": "fyoo-0.0.1b2.tar.gz", "has_sig": false, "md5_digest": "5a4e3aa69a863c2db7ddc0b0dcd14251", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13448, "upload_time": "2020-03-12T03:56:05", "upload_time_iso_8601": "2020-03-12T03:56:05.998834Z", "url": "https://files.pythonhosted.org/packages/d6/b0/cc5ab3d0071b5efcaf1f569354d5f726a48d64bfc4c4295f552be83b5bbd/fyoo-0.0.1b2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:27 2020"}