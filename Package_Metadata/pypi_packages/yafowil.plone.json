{"info": {"author": "BlueDynamics Alliance", "author_email": "dev@bluedynamics.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Plone", "Framework :: Plone :: 4.3", "Framework :: Plone :: 5.1", "Framework :: Plone :: 5.2", "Framework :: Zope", "Framework :: Zope :: 2", "Framework :: Zope :: 4", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "This is the **Plone Integration** for `YAFOWIL\n<http://pypi.python.org/pypi/yafowil>`_\n\n\nFunctionality\n=============\n\n\nResources Integration with GenericSetup\n---------------------------------------\n\nAddon widgets may provide custom javascripts, CSS, images and so on.\n\nThis package registers the directories containing these assets as\nresource directories. Thus they can be accessed from the webbrowser.\nThe registration schema is ``++resource++MODULENAME/...``.\n\nThe \"YAFOWIL Form Library\" GS profile registers all resources related to\nso called \"resource groups\" in the CSS and javascript registries.\n\nThis resource groups must be enabled explicitly(!). The resource groups\nconfiguration happens via the portal registry.\n\nYou need to provide a Generic setup profile containing a ``registry.xml`` with\nthe resource groups configuration, e.g.::\n\n    <!-- yafowil.widget.array -->\n    <record name=\"yafowil.widget.array.common\">\n      <field type=\"plone.registry.field.Bool\">\n        <title>Array widget common resources</title>\n      </field>\n      <value>True</value>\n    </record>\n\nThe record ``name`` maps to the resource group name.\n\n.. note::\n\n    The profile to register the resoures in resource registries (the default\n    profile) must run AFTER the resource groups have been configured. Thus you\n    are forced to use 2 profiles; one registering the resource groups, and one\n    depending on the resource groups profile and the yafowil profile in it's\n    ``metadata.xml``. In other words, if you add a plugin\n    (like yafowil.widget.autocomplete) ``after yafowil.plone installation``\n    you MUST re-install yafowil.plone in order to get new plugin's resources\n    registered.\n\nTake a look into ``registry.xml`` of the\n``yafowil.plone:profiles/demoresources`` profile for more examples or consider\nthe referring resource providing code inside the addon widgets, usually\ncontained in the packages ``__init__.py`` file to get available resource\ngroups.\n\n\nIntegration with Translation\n----------------------------\n\nThe package adds an translation method for Zope2 i18n messages. It's added\nusing by defining a global preprocessor\n\n\nRequest wrapper\n---------------\n\nThis package registers a global preprocessor for YAFOWIL. It wraps the Zope2\nrequest by an own request instance providing the behavior expected by YAFOWIL.\nSpezial behaviors:\n\nFile Uploads provided by Zope2 as ``ZPublisher.HTTPRequest.Fileupload``\nobjects are turned into Dicts with the keys:\n\n**file**\n    file-like object to read data from\n\n**filename**\n    submitted name of the upload\n\n**mimetype**\n    type of the upload\n\n**headers**\n    all headers\n\n**original**\n    keeps the original ``ZPublisher.HTTPRequest.Fileupload`` object\n\n\nBase Forms\n----------\n\nThis package ships with base forms to be extended.\n\nThe following form base classes are available:\n\n**yafowil.plone.form.BaseForm**\n    does not define a ```__call__``` method: define a template in ZCML or a\n    ```__call__``` method. It provides a method named ```render_form```\n    which processes and renders the form.\n\n**yafowil.plone.form.Form**\n    renders the naked form on ``__call__``.\n\n**yafowil.plone.form.YAMLBaseForm**\n    similar to ``BaseForm`` above. Expects properties ``form_template``\n    pointing to a YAML file and ``message_factory`` providing the message\n    factory used for YAML message strings.\n\n**yafowil.plone.form.YAMLForm**\n    similar to ``YAMLBaseForm`` renders the naked YAML form on ``__call__``.\n\nConcrete implementation may look like::\n\n    >>> from yafowil.base import factory\n    >>> from yafowil.plone.form import Form\n\n    >>> class MyForm(Form):\n    ...     action_resource = '@@view_name_callable_by_browser'\n    ...\n    ...     def prepare(self):\n    ...         form = factory(\n    ...             'form',\n    ...             name='myform',\n    ...             props={\n    ...                 'action': self.form_action,\n    ...             })\n    ...\n    ...         # form widgets creation here...\n    ...\n    ...         self.form = form\n\nConvenience for creating YAML forms::\n\n    >>> from zope.i18nmessageid import MessageFactory\n    >>> from yafowil.plone.form import YAMLBaseForm\n\n    >>> class MyYAMLForm(YAMLBaseForm):\n    ...     action_resource = '@@view_name_callable_by_browser'\n    ...     form_template = 'package.name:forms/myform.yaml'\n    ...     message_factory = MessageFactory('package.name')\n\nForm classes inherit from ``Products.Five.BrowserPage``, thus they\nmust be registered via ZCML ``browser:page`` directive::\n\n    <browser:page\n      for=\"*\"\n      name=\"form_registration_name\"\n      class=\".forms.MyYAMLForm\"\n      template=\"myyamlform.pt\"\n      permission=\"cmf.ModifyPortalContent\"\n    />\n\nForms build with this base form classes need a template in\norder to insert such a form in a layout. It must be called inside a\nwrapper template ```myform.yaml```::\n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"\n          xmlns:tal=\"http://xml.zope.org/namespaces/tal\"\n          xmlns:metal=\"http://xml.zope.org/namespaces/metal\"\n          xmlns:i18n=\"http://xml.zope.org/namespaces/i18n\"\n          lang=\"en\"\n          metal:use-macro=\"context/main_template/macros/master\"\n          i18n:domain=\"package.name\">\n      <body>\n        <metal:content-core fill-slot=\"content-core\">\n          <metal:block define-macro=\"content-core\">\n            <tal:form replace=\"structure view/render_form\" />\n          </metal:block>\n        </metal:content-core>\n      </body>\n    </html>\n\n\nIn Plone 5.x,\nwhen not using one of the BaseForms,\nthe **CSS/JS resources for YAFOWIL are not loaded** automatically.\n\nAdd the following lines in order to load it::\n\n    from Products.CMFPlone.resources import add_bundle_on_request\n\n    ...\n\n    class MyViewWithYafowil(BrowserView):\n\n    def __init__(self, context, request):\n        super(MyViewWithYafowil, self).__init__(context, request)\n        add_bundle_on_request(request, 'yafowil')\n\n\nDetailed Documentation\n======================\n\nIf you're interested to dig deeper: The\n`detailed YAFOWIL documentation <http://yafowil.info>`_ is available.\nRead it and learn how to create your example application with YAFOWIL.\n\n\nSource Code\n===========\n\nThe sources are in a GIT DVCS with its main branches at\n`github <http://github.com/bluedynamics/yafowil.plone>`_.\n\n\nContributors\n============\n\n- Jens W. Klein <jens [at] bluedynamics [dot] com>\n\n- Peter Holzer <hpeter [at] agitator [dot] com>\n\n- Benjamin Stefaner <bs [at] kleinundpartner [dot] at>\n\n- Robert Niederreiter <rnix [at] squarewave [dot] at>\n\nHistory\n=======\n\n3.0.0 (2019-02-19)\n------------------\n\n- Add resources explicit in pages using YAFOWIL.\n  Do not deliver the CSS/JS chunk on every request.\n  Code using yafoil w/o the ``yafowil.plone.form.*`` as base class need a minimal modification.\n  See README.\n  [jensens]\n\n- Use ``self.context`` instead of ``context`` in ``CSRFProtectionBehavior``\n  when looking up fallback root key manager.\n  [rnix]\n\n- Deliver resources as `plone.stableResource` to cache JS/CSS in browser.\n  [jensens]\n\n- Python 3 support:\n  [reinhardt]\n\n  - Replaced UserDict\n  - Replaced old-style relative import\n  - Fixed StringIO import\n  - Fixed text handling\n\n- Deliver jqueryui on request and remove dependency on collective.js.jqueryui\n  [agitator]\n\n2.4.1 (2017-03-10)\n------------------\n\n- Reduce logging verbosity on load from info to debug.\n  [jensens]\n\n\n2.4.0 (2017-03-10)\n------------------\n\n- Introduce ``yafowil.plone.form.CSRFProtectionBehavior``.\n  [rnix]\n\n\n2.3.1 (2016-09-14)\n------------------\n\n- Fix yafowil dependency minimal version\n  [jensens]\n\n\n2.3 (2016-09-09)\n----------------\n\n- Use ``yafowil.utils.entry_point`` decorator.\n  [rnix]\n\n- Plone 5 support.\n  [rnix]\n\n\n2.2 (2015-10-10)\n----------------\n\n- Use ``pkg_resources.get_distribution`` instead of catching ``ImportError``\n  to check whether TinyMCE is installed.\n  [rnix]\n\n- Make dependency on Products.TinyMCE a soft dependency.\n  [thet]\n\n\n2.1 (2013-06-03)\n----------------\n\n- Set applyPrefix for CSS resources to True, so that referenced images can\n  still be found.\n  [thet, 2014-05-06]\n\n- Integrate translations.\n  [rnix, 2014-05-01]\n\n\n2.0.2\n-----\n\n- fix resource group names\n  [thet]\n\n- correct getSite import, cleanup\n  [thet]\n\n2.0.1\n-----\n\n- Provdide default ``title`` attribute value for ``richtext`` blueprint of\n  ``yafowil.widget.richtext`` addon widget in order to provide ``TinyMCE``\n  configuration as expected by plone integration.\n  [rnix]\n\n2.0\n---\n\n- YAFOWIL resource including configuration via generic setup.\n  [rnix, 2012-10-03]\n\n1.3.1\n-----\n\n- Simplify base forms for plone.\n  [jensens, 2012-05-21]\n\n- Not ZIP safe!\n  [jensens, 2012-04-15]\n\n1.3\n---\n\n- GS profile marker - fix wrong filename.\n  [rnix, 2012-04-11]\n\n- Add ``yafowil.plone.form`` module containing base classes.\n  [rnix, 2012-04-11]\n\n\n1.2\n---\n\n- Rename to yafowil.plone - seems a 2 at the end of a package name confuses\n  easy_install. wtf!?\n  [jensens, 2012-03-20]\n\n\n1.1\n---\n\n- Depend on yafowil 1.3 in setup.py and bump version.\n  [jensens, 2012-03-20]\n\n\n1.0\n---\n\n- Resources are registered using the new plugin infrastructure.\n  Theres now an import step for generic setup registering all javascripts and\n  stylesheets provided by the plugins. They are registred without any\n  thirdparty dependencies. If a resource is already registered its registration\n  is skipped. Such its possible to register or overide the defaults using xml\n  files.\n  [jensens, 2012-02-01]\n\n- Automatic browserresources for plugins.\n  [jensens, 2012-02-16]\n\n- Depends on yafowil 1.3 plugin infrastucture.\n  [jensens, 2012-02-15]\n\n- Example form and senseful default-classes and plans for plone.\n  [hpeter, bennyboy, 2012-02-15]\n\n\n1.0-beta\n--------\n\n- Made it work.\n  [jensens, rnix, et al, 2010-12-27]\n\nLicense\n=======\n\nCopyright (c) 2010-2016, BlueDynamics Alliance, Austria\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this \n  list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this \n  list of conditions and the following disclaimer in the documentation and/or \n  other materials provided with the distribution.\n* Neither the name of the BlueDynamics Alliance nor the names of its \n  contributors may be used to endorse or promote products derived from this \n  software without specific prior written permission.\n      \nTHIS SOFTWARE IS PROVIDED BY BlueDynamics Alliance ``AS IS`` AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL BlueDynamics Alliance BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bluedynamics/yafowil.plone", "keywords": "zope2 plone request response html input widgets", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "yafowil.plone", "package_url": "https://pypi.org/project/yafowil.plone/", "platform": "", "project_url": "https://pypi.org/project/yafowil.plone/", "project_urls": {"Homepage": "https://github.com/bluedynamics/yafowil.plone"}, "release_url": "https://pypi.org/project/yafowil.plone/3.0.0/", "requires_dist": null, "requires_python": "", "summary": "Plone Integration with YAFOWIL", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is the <strong>Plone Integration</strong> for <a href=\"http://pypi.python.org/pypi/yafowil\" rel=\"nofollow\">YAFOWIL</a></p>\n<div id=\"functionality\">\n<h2>Functionality</h2>\n<div id=\"resources-integration-with-genericsetup\">\n<h3>Resources Integration with GenericSetup</h3>\n<p>Addon widgets may provide custom javascripts, CSS, images and so on.</p>\n<p>This package registers the directories containing these assets as\nresource directories. Thus they can be accessed from the webbrowser.\nThe registration schema is <tt><span class=\"pre\">++resource++MODULENAME/...</span></tt>.</p>\n<p>The \u201cYAFOWIL Form Library\u201d GS profile registers all resources related to\nso called \u201cresource groups\u201d in the CSS and javascript registries.</p>\n<p>This resource groups must be enabled explicitly(!). The resource groups\nconfiguration happens via the portal registry.</p>\n<p>You need to provide a Generic setup profile containing a <tt>registry.xml</tt> with\nthe resource groups configuration, e.g.:</p>\n<pre>&lt;!-- yafowil.widget.array --&gt;\n&lt;record name=\"yafowil.widget.array.common\"&gt;\n  &lt;field type=\"plone.registry.field.Bool\"&gt;\n    &lt;title&gt;Array widget common resources&lt;/title&gt;\n  &lt;/field&gt;\n  &lt;value&gt;True&lt;/value&gt;\n&lt;/record&gt;\n</pre>\n<p>The record <tt>name</tt> maps to the resource group name.</p>\n<div>\n<p>Note</p>\n<p>The profile to register the resoures in resource registries (the default\nprofile) must run AFTER the resource groups have been configured. Thus you\nare forced to use 2 profiles; one registering the resource groups, and one\ndepending on the resource groups profile and the yafowil profile in it\u2019s\n<tt>metadata.xml</tt>. In other words, if you add a plugin\n(like yafowil.widget.autocomplete) <tt>after yafowil.plone installation</tt>\nyou MUST re-install yafowil.plone in order to get new plugin\u2019s resources\nregistered.</p>\n</div>\n<p>Take a look into <tt>registry.xml</tt> of the\n<tt>yafowil.plone:profiles/demoresources</tt> profile for more examples or consider\nthe referring resource providing code inside the addon widgets, usually\ncontained in the packages <tt>__init__.py</tt> file to get available resource\ngroups.</p>\n</div>\n<div id=\"integration-with-translation\">\n<h3>Integration with Translation</h3>\n<p>The package adds an translation method for Zope2 i18n messages. It\u2019s added\nusing by defining a global preprocessor</p>\n</div>\n<div id=\"request-wrapper\">\n<h3>Request wrapper</h3>\n<p>This package registers a global preprocessor for YAFOWIL. It wraps the Zope2\nrequest by an own request instance providing the behavior expected by YAFOWIL.\nSpezial behaviors:</p>\n<p>File Uploads provided by Zope2 as <tt>ZPublisher.HTTPRequest.Fileupload</tt>\nobjects are turned into Dicts with the keys:</p>\n<dl>\n<dt><strong>file</strong></dt>\n<dd>file-like object to read data from</dd>\n<dt><strong>filename</strong></dt>\n<dd>submitted name of the upload</dd>\n<dt><strong>mimetype</strong></dt>\n<dd>type of the upload</dd>\n<dt><strong>headers</strong></dt>\n<dd>all headers</dd>\n<dt><strong>original</strong></dt>\n<dd>keeps the original <tt>ZPublisher.HTTPRequest.Fileupload</tt> object</dd>\n</dl>\n</div>\n<div id=\"base-forms\">\n<h3>Base Forms</h3>\n<p>This package ships with base forms to be extended.</p>\n<p>The following form base classes are available:</p>\n<dl>\n<dt><strong>yafowil.plone.form.BaseForm</strong></dt>\n<dd>does not define a <tt>`__call__`</tt> method: define a template in ZCML or a\n<tt>`__call__`</tt> method. It provides a method named <tt>`render_form`</tt>\nwhich processes and renders the form.</dd>\n<dt><strong>yafowil.plone.form.Form</strong></dt>\n<dd>renders the naked form on <tt>__call__</tt>.</dd>\n<dt><strong>yafowil.plone.form.YAMLBaseForm</strong></dt>\n<dd>similar to <tt>BaseForm</tt> above. Expects properties <tt>form_template</tt>\npointing to a YAML file and <tt>message_factory</tt> providing the message\nfactory used for YAML message strings.</dd>\n<dt><strong>yafowil.plone.form.YAMLForm</strong></dt>\n<dd>similar to <tt>YAMLBaseForm</tt> renders the naked YAML form on <tt>__call__</tt>.</dd>\n</dl>\n<p>Concrete implementation may look like:</p>\n<pre>&gt;&gt;&gt; from yafowil.base import factory\n&gt;&gt;&gt; from yafowil.plone.form import Form\n\n&gt;&gt;&gt; class MyForm(Form):\n...     action_resource = '@@view_name_callable_by_browser'\n...\n...     def prepare(self):\n...         form = factory(\n...             'form',\n...             name='myform',\n...             props={\n...                 'action': self.form_action,\n...             })\n...\n...         # form widgets creation here...\n...\n...         self.form = form\n</pre>\n<p>Convenience for creating YAML forms:</p>\n<pre>&gt;&gt;&gt; from zope.i18nmessageid import MessageFactory\n&gt;&gt;&gt; from yafowil.plone.form import YAMLBaseForm\n\n&gt;&gt;&gt; class MyYAMLForm(YAMLBaseForm):\n...     action_resource = '@@view_name_callable_by_browser'\n...     form_template = 'package.name:forms/myform.yaml'\n...     message_factory = MessageFactory('package.name')\n</pre>\n<p>Form classes inherit from <tt>Products.Five.BrowserPage</tt>, thus they\nmust be registered via ZCML <tt>browser:page</tt> directive:</p>\n<pre>&lt;browser:page\n  for=\"*\"\n  name=\"form_registration_name\"\n  class=\".forms.MyYAMLForm\"\n  template=\"myyamlform.pt\"\n  permission=\"cmf.ModifyPortalContent\"\n/&gt;\n</pre>\n<p>Forms build with this base form classes need a template in\norder to insert such a form in a layout. It must be called inside a\nwrapper template <tt>`myform.yaml`</tt>:</p>\n<pre>&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"\n      xmlns:tal=\"http://xml.zope.org/namespaces/tal\"\n      xmlns:metal=\"http://xml.zope.org/namespaces/metal\"\n      xmlns:i18n=\"http://xml.zope.org/namespaces/i18n\"\n      lang=\"en\"\n      metal:use-macro=\"context/main_template/macros/master\"\n      i18n:domain=\"package.name\"&gt;\n  &lt;body&gt;\n    &lt;metal:content-core fill-slot=\"content-core\"&gt;\n      &lt;metal:block define-macro=\"content-core\"&gt;\n        &lt;tal:form replace=\"structure view/render_form\" /&gt;\n      &lt;/metal:block&gt;\n    &lt;/metal:content-core&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>In Plone 5.x,\nwhen not using one of the BaseForms,\nthe <strong>CSS/JS resources for YAFOWIL are not loaded</strong> automatically.</p>\n<p>Add the following lines in order to load it:</p>\n<pre>from Products.CMFPlone.resources import add_bundle_on_request\n\n...\n\nclass MyViewWithYafowil(BrowserView):\n\ndef __init__(self, context, request):\n    super(MyViewWithYafowil, self).__init__(context, request)\n    add_bundle_on_request(request, 'yafowil')\n</pre>\n</div>\n</div>\n<div id=\"detailed-documentation\">\n<h2>Detailed Documentation</h2>\n<p>If you\u2019re interested to dig deeper: The\n<a href=\"http://yafowil.info\" rel=\"nofollow\">detailed YAFOWIL documentation</a> is available.\nRead it and learn how to create your example application with YAFOWIL.</p>\n</div>\n<div id=\"source-code\">\n<h2>Source Code</h2>\n<p>The sources are in a GIT DVCS with its main branches at\n<a href=\"http://github.com/bluedynamics/yafowil.plone\" rel=\"nofollow\">github</a>.</p>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>Jens W. Klein &lt;jens [at] bluedynamics [dot] com&gt;</li>\n<li>Peter Holzer &lt;hpeter [at] agitator [dot] com&gt;</li>\n<li>Benjamin Stefaner &lt;bs [at] kleinundpartner [dot] at&gt;</li>\n<li>Robert Niederreiter &lt;rnix [at] squarewave [dot] at&gt;</li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>3.0.0 (2019-02-19)</h3>\n<ul>\n<li>Add resources explicit in pages using YAFOWIL.\nDo not deliver the CSS/JS chunk on every request.\nCode using yafoil w/o the <tt>yafowil.plone.form.*</tt> as base class need a minimal modification.\nSee README.\n[jensens]</li>\n<li>Use <tt>self.context</tt> instead of <tt>context</tt> in <tt>CSRFProtectionBehavior</tt>\nwhen looking up fallback root key manager.\n[rnix]</li>\n<li>Deliver resources as <cite>plone.stableResource</cite> to cache JS/CSS in browser.\n[jensens]</li>\n<li>Python 3 support:\n[reinhardt]<ul>\n<li>Replaced UserDict</li>\n<li>Replaced old-style relative import</li>\n<li>Fixed StringIO import</li>\n<li>Fixed text handling</li>\n</ul>\n</li>\n<li>Deliver jqueryui on request and remove dependency on collective.js.jqueryui\n[agitator]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>2.4.1 (2017-03-10)</h3>\n<ul>\n<li>Reduce logging verbosity on load from info to debug.\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>2.4.0 (2017-03-10)</h3>\n<ul>\n<li>Introduce <tt>yafowil.plone.form.CSRFProtectionBehavior</tt>.\n[rnix]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>2.3.1 (2016-09-14)</h3>\n<ul>\n<li>Fix yafowil dependency minimal version\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>2.3 (2016-09-09)</h3>\n<ul>\n<li>Use <tt>yafowil.utils.entry_point</tt> decorator.\n[rnix]</li>\n<li>Plone 5 support.\n[rnix]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>2.2 (2015-10-10)</h3>\n<ul>\n<li>Use <tt>pkg_resources.get_distribution</tt> instead of catching <tt>ImportError</tt>\nto check whether TinyMCE is installed.\n[rnix]</li>\n<li>Make dependency on Products.TinyMCE a soft dependency.\n[thet]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>2.1 (2013-06-03)</h3>\n<ul>\n<li>Set applyPrefix for CSS resources to True, so that referenced images can\nstill be found.\n[thet, 2014-05-06]</li>\n<li>Integrate translations.\n[rnix, 2014-05-01]</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>2.0.2</h3>\n<ul>\n<li>fix resource group names\n[thet]</li>\n<li>correct getSite import, cleanup\n[thet]</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>2.0.1</h3>\n<ul>\n<li>Provdide default <tt>title</tt> attribute value for <tt>richtext</tt> blueprint of\n<tt>yafowil.widget.richtext</tt> addon widget in order to provide <tt>TinyMCE</tt>\nconfiguration as expected by plone integration.\n[rnix]</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>2.0</h3>\n<ul>\n<li>YAFOWIL resource including configuration via generic setup.\n[rnix, 2012-10-03]</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>1.3.1</h3>\n<ul>\n<li>Simplify base forms for plone.\n[jensens, 2012-05-21]</li>\n<li>Not ZIP safe!\n[jensens, 2012-04-15]</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>1.3</h3>\n<ul>\n<li>GS profile marker - fix wrong filename.\n[rnix, 2012-04-11]</li>\n<li>Add <tt>yafowil.plone.form</tt> module containing base classes.\n[rnix, 2012-04-11]</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>1.2</h3>\n<ul>\n<li>Rename to yafowil.plone - seems a 2 at the end of a package name confuses\neasy_install. wtf!?\n[jensens, 2012-03-20]</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>1.1</h3>\n<ul>\n<li>Depend on yafowil 1.3 in setup.py and bump version.\n[jensens, 2012-03-20]</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>1.0</h3>\n<ul>\n<li>Resources are registered using the new plugin infrastructure.\nTheres now an import step for generic setup registering all javascripts and\nstylesheets provided by the plugins. They are registred without any\nthirdparty dependencies. If a resource is already registered its registration\nis skipped. Such its possible to register or overide the defaults using xml\nfiles.\n[jensens, 2012-02-01]</li>\n<li>Automatic browserresources for plugins.\n[jensens, 2012-02-16]</li>\n<li>Depends on yafowil 1.3 plugin infrastucture.\n[jensens, 2012-02-15]</li>\n<li>Example form and senseful default-classes and plans for plone.\n[hpeter, bennyboy, 2012-02-15]</li>\n</ul>\n</div>\n<div id=\"beta\">\n<h3>1.0-beta</h3>\n<ul>\n<li>Made it work.\n[jensens, rnix, et al, 2010-12-27]</li>\n</ul>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2010-2016, BlueDynamics Alliance, Austria\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:</p>\n<ul>\n<li>Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright notice, this\nlist of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.</li>\n<li>Neither the name of the BlueDynamics Alliance nor the names of its\ncontributors may be used to endorse or promote products derived from this\nsoftware without specific prior written permission.</li>\n</ul>\n<p>THIS SOFTWARE IS PROVIDED BY BlueDynamics Alliance <tt>AS IS</tt> AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL BlueDynamics Alliance BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n</div>\n\n          </div>"}, "last_serial": 5613662, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "fd8a7aaf2ae2b0daf0a81d382f2685c5", "sha256": "ad34bed1c2988e55edeccba8aeb7bf8f2f120601ab5746249beb716a49422b9a"}, "downloads": -1, "filename": "yafowil.plone-1.2.tar.gz", "has_sig": false, "md5_digest": "fd8a7aaf2ae2b0daf0a81d382f2685c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7342, "upload_time": "2012-03-20T15:32:40", "upload_time_iso_8601": "2012-03-20T15:32:40.927941Z", "url": "https://files.pythonhosted.org/packages/9c/4a/7fe9ae27bc1286fc98259a392474618f66731dfb68a45831b4de3efb2fcb/yafowil.plone-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "dd6477e4f1bd98beff4bd7a53f631ca4", "sha256": "f3e6309e7b1b5e6c5003dd56c1c69b346a8389a463d68af0299cbc972b1e5750"}, "downloads": -1, "filename": "yafowil.plone-1.3.tar.gz", "has_sig": false, "md5_digest": "dd6477e4f1bd98beff4bd7a53f631ca4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11339, "upload_time": "2012-04-11T16:56:23", "upload_time_iso_8601": "2012-04-11T16:56:23.776386Z", "url": "https://files.pythonhosted.org/packages/09/ed/7ee88547e49bb4dc07f1d13472dcb5aa594309398b9ab759e686a1fd7758/yafowil.plone-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "e21cc948af4c6eac8f0831467e8233a9", "sha256": "7abf4ff655a13a4a90ae45ec6ee821c17f8717d4da0923af6f8e7f8aa181c0bc"}, "downloads": -1, "filename": "yafowil.plone-1.3.1.tar.gz", "has_sig": false, "md5_digest": "e21cc948af4c6eac8f0831467e8233a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8414, "upload_time": "2012-04-15T21:54:16", "upload_time_iso_8601": "2012-04-15T21:54:16.982725Z", "url": "https://files.pythonhosted.org/packages/44/38/e368bcf4eb7bfa2560fccd46e85c80b59a5809818bd5da022501ee9beb46/yafowil.plone-1.3.1.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "482a869b999ffc4999f990421d22230a", "sha256": "17c8218f5a409a6a630ab71b4a2a3e78b222ad16c8e8275ce2bfcbeb366b520d"}, "downloads": -1, "filename": "yafowil.plone-2.0.tar.gz", "has_sig": false, "md5_digest": "482a869b999ffc4999f990421d22230a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12184, "upload_time": "2012-10-10T13:11:36", "upload_time_iso_8601": "2012-10-10T13:11:36.494322Z", "url": "https://files.pythonhosted.org/packages/27/69/7555d2968036e09206dedf18a388cc8cc8edb8b33d42ffa6e4c0dcedbc08/yafowil.plone-2.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "cd6981310bfb07a3b46478a022664352", "sha256": "8be213b1840b0eaeca81e8e414051150e1fc014aa63187cec012205a260127f0"}, "downloads": -1, "filename": "yafowil.plone-2.0.1.tar.gz", "has_sig": false, "md5_digest": "cd6981310bfb07a3b46478a022664352", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12944, "upload_time": "2012-10-29T07:39:58", "upload_time_iso_8601": "2012-10-29T07:39:58.418440Z", "url": "https://files.pythonhosted.org/packages/af/01/773a67ce4b51a5c877d905a4872cd3c6dceae5c44aaef854244e35e5d1bd/yafowil.plone-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "b7308e7b6c241d3a146f2361ec864ab2", "sha256": "33508be07abdc60605f4cafa23e51d314903bebbb4616bce171484cbde8d742e"}, "downloads": -1, "filename": "yafowil.plone-2.0.2.tar.gz", "has_sig": false, "md5_digest": "b7308e7b6c241d3a146f2361ec864ab2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12027, "upload_time": "2013-06-26T20:19:49", "upload_time_iso_8601": "2013-06-26T20:19:49.852179Z", "url": "https://files.pythonhosted.org/packages/0c/ac/93fc27cc3934c074ddacd8b21f6d6006746d75d4057e10e89d2402024f6c/yafowil.plone-2.0.2.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "a6986c31404bff3097f7379355e7e60c", "sha256": "58a4f1b634b5e209d584124912b95a2fed2fdd530033831c0dbc6f78dd614ae1"}, "downloads": -1, "filename": "yafowil.plone-2.1.tar.gz", "has_sig": false, "md5_digest": "a6986c31404bff3097f7379355e7e60c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14661, "upload_time": "2014-06-03T22:02:10", "upload_time_iso_8601": "2014-06-03T22:02:10.440959Z", "url": "https://files.pythonhosted.org/packages/eb/0f/8051eb5429b173a8c94b719c7eca709675b902ac33f4db21f55354874d9f/yafowil.plone-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "6dcbd2cc4e8a49a2fbf2a3c53860cd6a", "sha256": "fef90eb9bfd1484daa4bfc1302c3dc7d2fb4ff5189f081c3801c65f8ab7858de"}, "downloads": -1, "filename": "yafowil.plone-2.2.tar.gz", "has_sig": false, "md5_digest": "6dcbd2cc4e8a49a2fbf2a3c53860cd6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14683, "upload_time": "2015-10-10T06:31:26", "upload_time_iso_8601": "2015-10-10T06:31:26.399440Z", "url": "https://files.pythonhosted.org/packages/89/7d/74006a6118f6178e676bc2c71d5d952b168f8bf49feae26aff4a2072e499/yafowil.plone-2.2.tar.gz", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "63cee0fb93ac8864c4c58b4546422897", "sha256": "d7d1811fad3fee90388a92a24bc5da36f1a5647e05a4a7a93b037dd51f32f80e"}, "downloads": -1, "filename": "yafowil.plone-2.3.tar.gz", "has_sig": false, "md5_digest": "63cee0fb93ac8864c4c58b4546422897", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30351, "upload_time": "2016-09-09T14:45:49", "upload_time_iso_8601": "2016-09-09T14:45:49.867357Z", "url": "https://files.pythonhosted.org/packages/ab/cb/02235c8e28b56ed805c20f248138dddc6c6cfb294d91735ee21473dc40e0/yafowil.plone-2.3.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "12b60c94ab5209af917a111bbfb7f447", "sha256": "276f017bdca9d7f612cb4cf650c7c0e79d86bd5b64d2a3d4e7f0cc6dab61c9cf"}, "downloads": -1, "filename": "yafowil.plone-2.3.1.tar.gz", "has_sig": false, "md5_digest": "12b60c94ab5209af917a111bbfb7f447", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30424, "upload_time": "2016-09-14T09:01:31", "upload_time_iso_8601": "2016-09-14T09:01:31.585642Z", "url": "https://files.pythonhosted.org/packages/da/68/7a721f775bda793c8ed9f0561baa45560b3d1c4d542a75721b717d7b7f67/yafowil.plone-2.3.1.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "22a4502dc9661f36f53a80f372c10b8b", "sha256": "49442a011c24f97224714d8b50d281fb879a14c4961183cf44a911a411879108"}, "downloads": -1, "filename": "yafowil.plone-2.4.0.tar.gz", "has_sig": false, "md5_digest": "22a4502dc9661f36f53a80f372c10b8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30911, "upload_time": "2017-03-10T11:05:08", "upload_time_iso_8601": "2017-03-10T11:05:08.966123Z", "url": "https://files.pythonhosted.org/packages/f4/3b/6d467b8fc5222996b2891ce8dabe2f7d5ab03470fe12b87f11d086f3ad8b/yafowil.plone-2.4.0.tar.gz", "yanked": false}], "2.4.1": [{"comment_text": "", "digests": {"md5": "baf1a35ee925fe7c4d2c593d4dbf7a07", "sha256": "ca3f4848bb9cd3e7f0ee741ec9d1d24894f2435972f9b0e4bc18f3edc21c40c9"}, "downloads": -1, "filename": "yafowil.plone-2.4.1.tar.gz", "has_sig": false, "md5_digest": "baf1a35ee925fe7c4d2c593d4dbf7a07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28880, "upload_time": "2017-03-10T11:30:01", "upload_time_iso_8601": "2017-03-10T11:30:01.215117Z", "url": "https://files.pythonhosted.org/packages/cb/1b/2a2825d4a0ee4fc74421459dd8d7cca59bcd62ba4ae34d8f8274a62c8d45/yafowil.plone-2.4.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "580f09cb794338ec67ca3a17da6a1b4a", "sha256": "aa1f8aef271bc77d3adb0862afd8f3f94c0246868a9fc07afe301c228344c198"}, "downloads": -1, "filename": "yafowil.plone-3.0.0.tar.gz", "has_sig": false, "md5_digest": "580f09cb794338ec67ca3a17da6a1b4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127154, "upload_time": "2019-02-19T10:12:04", "upload_time_iso_8601": "2019-02-19T10:12:04.953868Z", "url": "https://files.pythonhosted.org/packages/88/cc/a90f9ca54bcf8c1bb0e5efd14979e58f4d5e95910dfa703f8f8e9b2908ff/yafowil.plone-3.0.0.tar.gz", "yanked": false}], "4.0.0a1": [{"comment_text": "", "digests": {"md5": "0d62dc33600c40f7411cf561117f6ae6", "sha256": "a27fbc692a0227c319f4f13e69ad13a5bc5263f7c41e3ca1771cd7ec90e7b709"}, "downloads": -1, "filename": "yafowil.plone-4.0.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "0d62dc33600c40f7411cf561117f6ae6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 167040, "upload_time": "2019-06-11T14:31:02", "upload_time_iso_8601": "2019-06-11T14:31:02.490854Z", "url": "https://files.pythonhosted.org/packages/dc/5c/b3204759d14688256cb58fc6d8b48825dae51d1de407311a11b21cf64067/yafowil.plone-4.0.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb964b2d20c7e119fdf6b30e10d810f3", "sha256": "4859e55308917c19e1d0aba1bff3c3b57c488e215e132caf900ee6606318a063"}, "downloads": -1, "filename": "yafowil.plone-4.0.0a1.tar.gz", "has_sig": false, "md5_digest": "bb964b2d20c7e119fdf6b30e10d810f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144027, "upload_time": "2019-06-11T14:31:04", "upload_time_iso_8601": "2019-06-11T14:31:04.942037Z", "url": "https://files.pythonhosted.org/packages/39/41/4fd72c7c88ee0585da7ee716bdd9e90ecb058e28be73da0f9b564b05a1cd/yafowil.plone-4.0.0a1.tar.gz", "yanked": false}], "4.0.0a2": [{"comment_text": "", "digests": {"md5": "93166c97445b5737bd2d46861456048c", "sha256": "0118557b4c399a5fa0d29e092bd29b04e7835bb24c5c8a59067a434482e97e03"}, "downloads": -1, "filename": "yafowil.plone-4.0.0a2.tar.gz", "has_sig": false, "md5_digest": "93166c97445b5737bd2d46861456048c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 142077, "upload_time": "2019-07-10T13:37:11", "upload_time_iso_8601": "2019-07-10T13:37:11.841182Z", "url": "https://files.pythonhosted.org/packages/5c/f4/4e208304f6479f6789dc95bb231083ce4c7c7a240ba5931232b9d7124e94/yafowil.plone-4.0.0a2.tar.gz", "yanked": false}], "4.0.0a3": [{"comment_text": "", "digests": {"md5": "f9baa45b9c51dc1fb43278307e6c83a1", "sha256": "5358310ad8d2782b81e6da3d396a4e0e59b33161ea488275ccf384b37996f323"}, "downloads": -1, "filename": "yafowil.plone-4.0.0a3.tar.gz", "has_sig": false, "md5_digest": "f9baa45b9c51dc1fb43278307e6c83a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 142880, "upload_time": "2019-07-31T14:09:19", "upload_time_iso_8601": "2019-07-31T14:09:19.042776Z", "url": "https://files.pythonhosted.org/packages/f9/5d/90ec8e9bc4bc6bb5c919fcc37d615e686f180e6a655c4e018dfae781a1fe/yafowil.plone-4.0.0a3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "580f09cb794338ec67ca3a17da6a1b4a", "sha256": "aa1f8aef271bc77d3adb0862afd8f3f94c0246868a9fc07afe301c228344c198"}, "downloads": -1, "filename": "yafowil.plone-3.0.0.tar.gz", "has_sig": false, "md5_digest": "580f09cb794338ec67ca3a17da6a1b4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127154, "upload_time": "2019-02-19T10:12:04", "upload_time_iso_8601": "2019-02-19T10:12:04.953868Z", "url": "https://files.pythonhosted.org/packages/88/cc/a90f9ca54bcf8c1bb0e5efd14979e58f4d5e95910dfa703f8f8e9b2908ff/yafowil.plone-3.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:23:42 2020"}