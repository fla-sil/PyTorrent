{"info": {"author": "Resulto Dev Team", "author_email": "dev@resulto.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Database", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-db-sanitizer - Anonymizes sensitive database data for Django projects\n============================================================================\n\n:Authors:\n  Resulto Developpement Web Inc.\n:Version: 0.1.0\n\nThis project's main goal is to provide a way to anonymize the data of\nspecific database fields by explicitly configuring said fields with specific\nanonymization strategies.\n\nThe anonymization process provides a \"Production-like\" copy of your database\nwithout sensitive information which can then be used in a development\nenvironment.\n\n\nRequirements\n------------\n\ndjango-db-sanitizer works and has been tested with Python 2.7 and 3.5.\nIt requires Django 1.8+ and fake-factory 0.5.7+.\n\nInstallation\n------------\n\nInstall the library\n~~~~~~~~~~~~~~~~~~~\n\n::\n\n    pip install django-db-sanitizer\n\n\nAdd the library to your INSTALLED_APPS in your Django Settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'django_db_sanitizer',\n    )\n\n\nImportant Notes\n---------------\n\n**DO NOT RUN IN YOUR PRODUCTION ENVIRONMENT!**\n\nIn its current state, django-db-sanitizer will run its sanitizing command and\noperations on your default database.\n\nWhile there are plans to investigate the possibility of allowing the sanitizing\nprocess to run on alternate databases, this is not yet implemented.\n\nIt is recommended to run django-db-sanitizer on a copy of your application and\ndatabase running on your local machine.\n\nPlease read the **Usage** section below for more information.\n\nUsage\n-----\n\nCreating db_sanitizer.py\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nConfiguration of django-db-sanitizer works similarly to the configuration of\nthe Django admin site.\n\nTo use django-db-sanitizer for one of your Django apps, create a\n``db_sanitizer.py`` file into said Django app just as you would create an\n``admin.py`` file for the Django admin site.\n\nModel and field declarations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInside the ``db_sanitizer.py`` file of your app, you must explicitly register\nwhich fields of which models will be sanitized using an explicitly declared\nSanitizer class.\n\nIn the following example, the ``notes`` text field of the ``Profile`` class\nwill be sanitized using the ``LoremIpsumSanitizer`` sanitizing strategy,\nfilling the contents of the field with *Lorem Ipsum* text.\n\n::\n\n    from django_db_sanitizer import sanitizer_registry, LoremIpsumSanitizer\n\n    from my_app.models import Profile\n\n    sanitizer_registry.register(Profile, [\"notes\"], LoremIpsumSanitizer)\n\nCustomizing the sanitizing process\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndjango-db-sanitizer is meant to be easy to extend. It is easily possible to\noverride or extend classes from django-db-sanitizer to:\n\n- Filter querysets on which the sanitizing process is applied\n- Modify existing Sanitizer classes to alter their behavior\n- Add your own new Sanitizer classes\n- Add your own Updater classes to control how values are saved to the database\n- And more...\n\nPlease refer to the ``test_app`` in django-db-sanitizer's ``test_project``\nwithin the repository for a number of examples on how to achieve this.\n\nRunning the sanitizing process\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCurrently, the only way to run the sanitizing process is to use the included\nDjango command, like so:\n\n::\n\n    python manage.py sanitize_my_database\n\nThis command does not use or require any arguments for the time being.\n\nPlease note that the sanitizing process is irreversible. It is recommended to\nrun django-db-sanitizer on a copy of your application and database running on\nyour local machine.\n\nLicense\n-------\n\nThis software is licensed under the `New BSD License`. See the `LICENSE` file\nin the repository for the full license text.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/resulto-admin/django-db-sanitizer", "keywords": "django database", "license": "New BSD", "maintainer": null, "maintainer_email": null, "name": "django-db-sanitizer", "package_url": "https://pypi.org/project/django-db-sanitizer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-db-sanitizer/", "project_urls": {"Homepage": "https://github.com/resulto-admin/django-db-sanitizer"}, "release_url": "https://pypi.org/project/django-db-sanitizer/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Database data anonymizer for Django projects.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Authors:</th>\n<td>Resulto Developpement Web Inc.</td></tr>\n<tr><th>Version:</th>\n<td>0.1.0</td></tr>\n</tbody>\n</table>\n<p>This project\u2019s main goal is to provide a way to anonymize the data of\nspecific database fields by explicitly configuring said fields with specific\nanonymization strategies.</p>\n<p>The anonymization process provides a \u201cProduction-like\u201d copy of your database\nwithout sensitive information which can then be used in a development\nenvironment.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>django-db-sanitizer works and has been tested with Python 2.7 and 3.5.\nIt requires Django 1.8+ and fake-factory 0.5.7+.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"install-the-library\">\n<h3>Install the library</h3>\n<pre>pip install django-db-sanitizer\n</pre>\n</div>\n<div id=\"add-the-library-to-your-installed-apps-in-your-django-settings\">\n<h3>Add the library to your INSTALLED_APPS in your Django Settings</h3>\n<pre>INSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django_db_sanitizer',\n)\n</pre>\n</div>\n</div>\n<div id=\"important-notes\">\n<h2>Important Notes</h2>\n<p><strong>DO NOT RUN IN YOUR PRODUCTION ENVIRONMENT!</strong></p>\n<p>In its current state, django-db-sanitizer will run its sanitizing command and\noperations on your default database.</p>\n<p>While there are plans to investigate the possibility of allowing the sanitizing\nprocess to run on alternate databases, this is not yet implemented.</p>\n<p>It is recommended to run django-db-sanitizer on a copy of your application and\ndatabase running on your local machine.</p>\n<p>Please read the <strong>Usage</strong> section below for more information.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"creating-db-sanitizer-py\">\n<h3>Creating db_sanitizer.py</h3>\n<p>Configuration of django-db-sanitizer works similarly to the configuration of\nthe Django admin site.</p>\n<p>To use django-db-sanitizer for one of your Django apps, create a\n<tt>db_sanitizer.py</tt> file into said Django app just as you would create an\n<tt>admin.py</tt> file for the Django admin site.</p>\n</div>\n<div id=\"model-and-field-declarations\">\n<h3>Model and field declarations</h3>\n<p>Inside the <tt>db_sanitizer.py</tt> file of your app, you must explicitly register\nwhich fields of which models will be sanitized using an explicitly declared\nSanitizer class.</p>\n<p>In the following example, the <tt>notes</tt> text field of the <tt>Profile</tt> class\nwill be sanitized using the <tt>LoremIpsumSanitizer</tt> sanitizing strategy,\nfilling the contents of the field with <em>Lorem Ipsum</em> text.</p>\n<pre>from django_db_sanitizer import sanitizer_registry, LoremIpsumSanitizer\n\nfrom my_app.models import Profile\n\nsanitizer_registry.register(Profile, [\"notes\"], LoremIpsumSanitizer)\n</pre>\n</div>\n<div id=\"customizing-the-sanitizing-process\">\n<h3>Customizing the sanitizing process</h3>\n<p>django-db-sanitizer is meant to be easy to extend. It is easily possible to\noverride or extend classes from django-db-sanitizer to:</p>\n<ul>\n<li>Filter querysets on which the sanitizing process is applied</li>\n<li>Modify existing Sanitizer classes to alter their behavior</li>\n<li>Add your own new Sanitizer classes</li>\n<li>Add your own Updater classes to control how values are saved to the database</li>\n<li>And more\u2026</li>\n</ul>\n<p>Please refer to the <tt>test_app</tt> in django-db-sanitizer\u2019s <tt>test_project</tt>\nwithin the repository for a number of examples on how to achieve this.</p>\n</div>\n<div id=\"running-the-sanitizing-process\">\n<h3>Running the sanitizing process</h3>\n<p>Currently, the only way to run the sanitizing process is to use the included\nDjango command, like so:</p>\n<pre>python manage.py sanitize_my_database\n</pre>\n<p>This command does not use or require any arguments for the time being.</p>\n<p>Please note that the sanitizing process is irreversible. It is recommended to\nrun django-db-sanitizer on a copy of your application and database running on\nyour local machine.</p>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This software is licensed under the <cite>New BSD License</cite>. See the <cite>LICENSE</cite> file\nin the repository for the full license text.</p>\n</div>\n\n          </div>"}, "last_serial": 2087236, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "50d0d3ea93b2d340cc000b463e29357f", "sha256": "319414b7456c5386744e25cca4ec12419c7778a329c8bdc8adcaad02ab08949e"}, "downloads": -1, "filename": "django_db_sanitizer-0.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "50d0d3ea93b2d340cc000b463e29357f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23699, "upload_time": "2016-04-27T17:30:28", "upload_time_iso_8601": "2016-04-27T17:30:28.768559Z", "url": "https://files.pythonhosted.org/packages/2f/d4/b3e13c2f9f2d52cc9fc74a649fecdf9e012e051ace20ecaa391edb9b3bce/django_db_sanitizer-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ca4a0117377ea4f0cd53e775eff257f", "sha256": "f43905a54cd1835a7c27c771999cad93c8d31e5401b31b92b00747c4d3db6640"}, "downloads": -1, "filename": "django-db-sanitizer-0.1.0.tar.gz", "has_sig": true, "md5_digest": "3ca4a0117377ea4f0cd53e775eff257f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13351, "upload_time": "2016-04-27T17:30:44", "upload_time_iso_8601": "2016-04-27T17:30:44.525799Z", "url": "https://files.pythonhosted.org/packages/ab/91/c62a5e8e2aefab97c0c722d887a032d8194b285a98caa67728c701cc1a43/django-db-sanitizer-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "50d0d3ea93b2d340cc000b463e29357f", "sha256": "319414b7456c5386744e25cca4ec12419c7778a329c8bdc8adcaad02ab08949e"}, "downloads": -1, "filename": "django_db_sanitizer-0.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "50d0d3ea93b2d340cc000b463e29357f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23699, "upload_time": "2016-04-27T17:30:28", "upload_time_iso_8601": "2016-04-27T17:30:28.768559Z", "url": "https://files.pythonhosted.org/packages/2f/d4/b3e13c2f9f2d52cc9fc74a649fecdf9e012e051ace20ecaa391edb9b3bce/django_db_sanitizer-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ca4a0117377ea4f0cd53e775eff257f", "sha256": "f43905a54cd1835a7c27c771999cad93c8d31e5401b31b92b00747c4d3db6640"}, "downloads": -1, "filename": "django-db-sanitizer-0.1.0.tar.gz", "has_sig": true, "md5_digest": "3ca4a0117377ea4f0cd53e775eff257f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13351, "upload_time": "2016-04-27T17:30:44", "upload_time_iso_8601": "2016-04-27T17:30:44.525799Z", "url": "https://files.pythonhosted.org/packages/ab/91/c62a5e8e2aefab97c0c722d887a032d8194b285a98caa67728c701cc1a43/django-db-sanitizer-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:38 2020"}