{"info": {"author": "Marcus Ekelund", "author_email": "marcus.ekelund@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "pyopenkeyval\n============\n\n`OpenKeyval.org <http://openkeyval.org/>`__ is a service for easily\nstoring and retrieving key/value pairs via HTTP. *pyopenkeyval* is a\nPython interface to this service, presented as a dict-like object that\naccesses data on OpenKeyval.\n\nInstalling\n----------\n\n::\n\n    $ sudo python setup.py install\n\nExamples\n--------\n\nNormal usage\n~~~~~~~~~~~~\n\n::\n\n    from pyopenkeyval import pyopenkeyval\n    okv = pyopenkeyval()\n    okv['example'] = 'Hello, online key/value storage!'\n    print okv['example']\n\nIf you need the result from storing a value, use the ``store()`` method\ninstead:\n\n::\n\n    result = okv.store('example', 'Hello, online key/value storage!')\n    print result['read_only_key']\n\nTo check if a key has a value, use the ``in`` keyword. Note that this\nwill also cache the value if caching is activated.\n\n::\n\n    if 'example' in okv:\n         ...\n\nDeleting keys\n~~~~~~~~~~~~~\n\nTo delete a key, either set its value to '' or use the ``del`` keyword:\n\n::\n\n    del okv['example']\n\nCaching\n~~~~~~~\n\nIf you want to cache retrieved values locally, set the ``cache_time``\nargument when constructing the ``pyopenkeyval`` object. This specifies\nthe number of seconds to cache individual values.\n\n::\n\n    okv = pyopenkeyval(cache_time=60)\n\nTo clear the cache completely at any time, call the ``clear_cache()``\nmethod.\n\nSSL support\n~~~~~~~~~~~\n\nOpenKeyval.org also supports SSL over HTTPS for more secure transfer of\ndata. To use SSL, set the ``ssl`` argument to True.\n\n::\n\n    okv = pyopenkeyval(ssl=True)\n\nNote that the HTTP och HTTPS versions of OpenKeyval.org are completely\nseparate. Values set in one can't be fetched from the other.\n\nPython 3\n--------\n\n*pyopenkeyval* is since version 0.3 compatible with Python 3. It must,\nhowever, either be installed using ``setup.py`` (as described above)\nbefore use, or manually be converted using the ``2to3`` tool.\n\nAlso note that values fetched will be returned as ``bytes``. To use\nthese as strings, call the ``.decode()`` method on them first. When\nsetting values, either ``str`` or ``bytes`` can be used.\n\nRequirements\n------------\n\nPython 2.5 and lower require *simplejson* to be installed.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/marcuse/pyopenkeyval", "keywords": null, "license": "Public domain", "maintainer": null, "maintainer_email": null, "name": "pyopenkeyval", "package_url": "https://pypi.org/project/pyopenkeyval/", "platform": "any", "project_url": "https://pypi.org/project/pyopenkeyval/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/marcuse/pyopenkeyval"}, "release_url": "https://pypi.org/project/pyopenkeyval/0.4/", "requires_dist": null, "requires_python": null, "summary": "pyopenkeyval: A simple interface to OpenKeyval.org", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://openkeyval.org/\" rel=\"nofollow\">OpenKeyval.org</a> is a service for easily\nstoring and retrieving key/value pairs via HTTP. <em>pyopenkeyval</em> is a\nPython interface to this service, presented as a dict-like object that\naccesses data on OpenKeyval.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<pre>$ sudo python setup.py install\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"normal-usage\">\n<h3>Normal usage</h3>\n<pre>from pyopenkeyval import pyopenkeyval\nokv = pyopenkeyval()\nokv['example'] = 'Hello, online key/value storage!'\nprint okv['example']\n</pre>\n<p>If you need the result from storing a value, use the <tt>store()</tt> method\ninstead:</p>\n<pre>result = okv.store('example', 'Hello, online key/value storage!')\nprint result['read_only_key']\n</pre>\n<p>To check if a key has a value, use the <tt>in</tt> keyword. Note that this\nwill also cache the value if caching is activated.</p>\n<pre>if 'example' in okv:\n     ...\n</pre>\n</div>\n<div id=\"deleting-keys\">\n<h3>Deleting keys</h3>\n<p>To delete a key, either set its value to \u2018\u2019 or use the <tt>del</tt> keyword:</p>\n<pre>del okv['example']\n</pre>\n</div>\n<div id=\"caching\">\n<h3>Caching</h3>\n<p>If you want to cache retrieved values locally, set the <tt>cache_time</tt>\nargument when constructing the <tt>pyopenkeyval</tt> object. This specifies\nthe number of seconds to cache individual values.</p>\n<pre>okv = pyopenkeyval(cache_time=60)\n</pre>\n<p>To clear the cache completely at any time, call the <tt>clear_cache()</tt>\nmethod.</p>\n</div>\n<div id=\"ssl-support\">\n<h3>SSL support</h3>\n<p>OpenKeyval.org also supports SSL over HTTPS for more secure transfer of\ndata. To use SSL, set the <tt>ssl</tt> argument to True.</p>\n<pre>okv = pyopenkeyval(ssl=True)\n</pre>\n<p>Note that the HTTP och HTTPS versions of OpenKeyval.org are completely\nseparate. Values set in one can\u2019t be fetched from the other.</p>\n</div>\n</div>\n<div id=\"python-3\">\n<h2>Python 3</h2>\n<p><em>pyopenkeyval</em> is since version 0.3 compatible with Python 3. It must,\nhowever, either be installed using <tt>setup.py</tt> (as described above)\nbefore use, or manually be converted using the <tt>2to3</tt> tool.</p>\n<p>Also note that values fetched will be returned as <tt>bytes</tt>. To use\nthese as strings, call the <tt>.decode()</tt> method on them first. When\nsetting values, either <tt>str</tt> or <tt>bytes</tt> can be used.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Python 2.5 and lower require <em>simplejson</em> to be installed.</p>\n</div>\n\n          </div>"}, "last_serial": 952028, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "20add212b090d7046b29ce92c70fe46c", "sha256": "a5a06e852fed562e49fc8c2d6bbfc1a923aa3518f19c4771d0c8f2f6e18acd0f"}, "downloads": -1, "filename": "pyopenkeyval-0.4.tar.gz", "has_sig": false, "md5_digest": "20add212b090d7046b29ce92c70fe46c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1562, "upload_time": "2013-12-17T17:10:47", "upload_time_iso_8601": "2013-12-17T17:10:47.039182Z", "url": "https://files.pythonhosted.org/packages/30/6a/4db7aa0fe429aa5145a6e08fec0d5810c8cfc53b8afcdccb941fded4f993/pyopenkeyval-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "20add212b090d7046b29ce92c70fe46c", "sha256": "a5a06e852fed562e49fc8c2d6bbfc1a923aa3518f19c4771d0c8f2f6e18acd0f"}, "downloads": -1, "filename": "pyopenkeyval-0.4.tar.gz", "has_sig": false, "md5_digest": "20add212b090d7046b29ce92c70fe46c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1562, "upload_time": "2013-12-17T17:10:47", "upload_time_iso_8601": "2013-12-17T17:10:47.039182Z", "url": "https://files.pythonhosted.org/packages/30/6a/4db7aa0fe429aa5145a6e08fec0d5810c8cfc53b8afcdccb941fded4f993/pyopenkeyval-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:10 2020"}