{"info": {"author": "Tzeng", "author_email": "tseng0211@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "autolink_py\r\n============\r\n\r\nThe Repo extracts url/email substring from given string and converts it into\r\nlinks(or any customized format).Currenty, we apply HTML and MARKDOWN replacement\r\ntype, and also apply easy way to customize the replacement.\r\n\r\nInstallation\r\n-------------\r\n\r\nInstallation using ``pip``:\r\n\r\n.. code-block:: bash\r\n\r\n    pip install autolink_py\r\n\r\nUsage\r\n------\r\n\r\n- replace URL with html format\r\n\r\n.. code-block:: python\r\n    \r\n    from autolink_py.core import AutoLinker\r\n\r\n    text = 'This website is google.com'\r\n\r\n    al = AutoLinker()\r\n    new_text = al.linkify(text, replaced_type='HTML')\r\n\r\n    # new_text -> 'This website is <a href=\"http://google.com\">google.com</a>'\r\n\r\n\r\n- replace URL with markdown format\r\n\r\n.. code-block:: python\r\n\r\n    from autolink_py.core import AutoLinker\r\n\r\n    text = 'This website is google.com'\r\n\r\n    al = AutoLinker()\r\n    new_text = al.linkify(text, replaced_type='MARKDOWN')\r\n\r\n    # new_text -> 'This website is [google.com](http://google.com)'\r\n\r\n\r\n- replace URL with customized format\r\n\r\n.. code-block:: python\r\n\r\n    # example: 'google.com' -> '<google.com><http://google.com>'\r\n\r\n    from autolink_py.core import AutoLinker\r\n\r\n    class NewAutoLinker(AutoLinker):\r\n\r\n        def replace_url(self, text, url):\r\n\r\n            '''\r\n            implement replace_url to customize the format you need.\r\n\r\n            Params:\r\n                text: url text that shown originally\r\n                url: newly generated link including complete protocal based on text.\r\n            '''\r\n\r\n            return u'<{0}><{1}>'.format(text, url)\r\n\r\n    text = 'The website is google.com'\r\n\r\n    nal = NewAutoLinker()\r\n    new_text = nal.linkify(text)\r\n\r\n    # new_text -> 'The website is <google.com><http://google.com>'\r\n\r\n\r\nCredits\r\n-------\r\n\r\nThe core algorithm is referred by the open source Repo: `autolink <https://github.com/Suor/autolink>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/joanne-tseng/autolink_py", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "autolink_py", "package_url": "https://pypi.org/project/autolink_py/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/autolink_py/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/joanne-tseng/autolink_py"}, "release_url": "https://pypi.org/project/autolink_py/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The Repo extracts url/email substring from given string and converts it into\nlinks(or any customized format).Currenty, we apply HTML and MARKDOWN replacement\ntype, and also apply easy way to customize the replacement.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installation using <tt>pip</tt>:</p>\n<pre>pip install autolink_py\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ul>\n<li>replace URL with html format</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autolink_py.core</span> <span class=\"kn\">import</span> <span class=\"n\">AutoLinker</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'This website is google.com'</span>\n\n<span class=\"n\">al</span> <span class=\"o\">=</span> <span class=\"n\">AutoLinker</span><span class=\"p\">()</span>\n<span class=\"n\">new_text</span> <span class=\"o\">=</span> <span class=\"n\">al</span><span class=\"o\">.</span><span class=\"n\">linkify</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">replaced_type</span><span class=\"o\">=</span><span class=\"s1\">'HTML'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># new_text -&gt; 'This website is &lt;a href=\"http://google.com\"&gt;google.com&lt;/a&gt;'</span>\n</pre>\n<ul>\n<li>replace URL with markdown format</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autolink_py.core</span> <span class=\"kn\">import</span> <span class=\"n\">AutoLinker</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'This website is google.com'</span>\n\n<span class=\"n\">al</span> <span class=\"o\">=</span> <span class=\"n\">AutoLinker</span><span class=\"p\">()</span>\n<span class=\"n\">new_text</span> <span class=\"o\">=</span> <span class=\"n\">al</span><span class=\"o\">.</span><span class=\"n\">linkify</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">replaced_type</span><span class=\"o\">=</span><span class=\"s1\">'MARKDOWN'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># new_text -&gt; 'This website is [google.com](http://google.com)'</span>\n</pre>\n<ul>\n<li>replace URL with customized format</li>\n</ul>\n<pre><span class=\"c1\"># example: 'google.com' -&gt; '&lt;google.com&gt;&lt;http://google.com&gt;'</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">autolink_py.core</span> <span class=\"kn\">import</span> <span class=\"n\">AutoLinker</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NewAutoLinker</span><span class=\"p\">(</span><span class=\"n\">AutoLinker</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">replace_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">):</span>\n\n        <span class=\"sd\">'''\n        implement replace_url to customize the format you need.\n\n        Params:\n            text: url text that shown originally\n            url: newly generated link including complete protocal based on text.\n        '''</span>\n\n        <span class=\"k\">return</span> <span class=\"sa\">u</span><span class=\"s1\">'&lt;</span><span class=\"si\">{0}</span><span class=\"s1\">&gt;&lt;</span><span class=\"si\">{1}</span><span class=\"s1\">&gt;'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'The website is google.com'</span>\n\n<span class=\"n\">nal</span> <span class=\"o\">=</span> <span class=\"n\">NewAutoLinker</span><span class=\"p\">()</span>\n<span class=\"n\">new_text</span> <span class=\"o\">=</span> <span class=\"n\">nal</span><span class=\"o\">.</span><span class=\"n\">linkify</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># new_text -&gt; 'The website is &lt;google.com&gt;&lt;http://google.com&gt;'</span>\n</pre>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>The core algorithm is referred by the open source Repo: <a href=\"https://github.com/Suor/autolink\" rel=\"nofollow\">autolink</a></p>\n</div>\n\n          </div>"}, "last_serial": 2250866, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "cb2764f82b302d835e7f1cd0552ac1a4", "sha256": "2163723aa35c5b61888e8248ac9103aababc599750bf397536571611bf9467b2"}, "downloads": -1, "filename": "autolink_py-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cb2764f82b302d835e7f1cd0552ac1a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4994, "upload_time": "2016-07-14T09:21:39", "upload_time_iso_8601": "2016-07-14T09:21:39.886989Z", "url": "https://files.pythonhosted.org/packages/5f/9e/f15f7414e25b5611687b4045b30e0ca06ba9cceb8999034e304b12961409/autolink_py-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "62da11761ee8287e3f8b53202874a180", "sha256": "c809242f033f5d7ab1ba0eb951abe471e3b0f7f368e6cc18af3d48c3dd3d0651"}, "downloads": -1, "filename": "autolink_py-0.2.0.tar.gz", "has_sig": false, "md5_digest": "62da11761ee8287e3f8b53202874a180", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5140, "upload_time": "2016-07-27T08:35:26", "upload_time_iso_8601": "2016-07-27T08:35:26.839304Z", "url": "https://files.pythonhosted.org/packages/0f/30/609794d88403cac3a835a497748eb401d6002da76d9784da9c0e5a095018/autolink_py-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "0964175394109ad822b08e0fe5206430", "sha256": "cf09714fad5f144565b7b650991dddbfe3adcb5fa4bcd0778f40bda3c266169a"}, "downloads": -1, "filename": "autolink_py-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0964175394109ad822b08e0fe5206430", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5163, "upload_time": "2016-07-29T06:47:38", "upload_time_iso_8601": "2016-07-29T06:47:38.656093Z", "url": "https://files.pythonhosted.org/packages/87/99/98ee29fd10cd2b2e42d752a1c7d42387b7f4740d2b227a993dbcf3fd0cbe/autolink_py-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0964175394109ad822b08e0fe5206430", "sha256": "cf09714fad5f144565b7b650991dddbfe3adcb5fa4bcd0778f40bda3c266169a"}, "downloads": -1, "filename": "autolink_py-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0964175394109ad822b08e0fe5206430", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5163, "upload_time": "2016-07-29T06:47:38", "upload_time_iso_8601": "2016-07-29T06:47:38.656093Z", "url": "https://files.pythonhosted.org/packages/87/99/98ee29fd10cd2b2e42d752a1c7d42387b7f4740d2b227a993dbcf3fd0cbe/autolink_py-0.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:16 2020"}