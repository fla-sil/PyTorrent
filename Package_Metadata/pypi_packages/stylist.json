{"info": {"author": "Met Office", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Quality Assurance"], "description": "![](https://github.com/MetOffice/stylist/workflows/Python%20package/badge.svg)\n\n# Stylist\n\nThe immediate need was for a code style checking tool which understood Fortran.\nSuch things being quite thin on the ground. However very few large software\nprojects are implemented in a single language. Thus a tool was developed which\nprovided a framework to aid in delivering support for multiple languages and\nmultiple style choices.\n\nThe framework supports multiple styles, each consisting of multiple rules.\nEach of these may be one of two types, those which treat the source as a text\nfile and those which treat it as a parse tree.\n\nThe project is still in its infancy so only a few rules have been implemented\nand only for fortran.\n\n## Design\n\nIn the past we have used text based tools and there's a surprising amount you\ncan do with regular expressions. However once context becomes important they\ncan become a liability. In those cases it is much better to have the parse\ntree.\n\nAt the moment the tool is only able to flag up where a style rule has been\nbroken. For some things this is the best we can hope for but for others\nwe might aspire to correct the problem.\n\nFor instance the current check for missing `implicit none` statements might,\nin the future, insert them where they are missing.\n\nSome UML class diagrams have been prepared which may be found in the\n`documentation` directory. These make use of the\n[PlantUML](https://plantuml.com) tool to render.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MetOffice/stylist", "keywords": "linter fortran psyclone", "license": "", "maintainer": "", "maintainer_email": "", "name": "stylist", "package_url": "https://pypi.org/project/stylist/", "platform": "", "project_url": "https://pypi.org/project/stylist/", "project_urls": {"Bug Reports": "https://github.com/MetOffice/stylist/issues", "Homepage": "https://github.com/MetOffice/stylist", "Source": "https://github.com/MetOffice/stylist/"}, "release_url": "https://pypi.org/project/stylist/0.1/", "requires_dist": ["fparser", "check-manifest ; extra == 'dev'", "flake8 ; extra == 'dev'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'"], "requires_python": ">=3.6, <4", "summary": "Extensible code style checker currently supporting Fortran, PSyclone DSL, etc", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc1a0ebb26d9a1d39b6a44a36ed8d8bb2d9da7a4/68747470733a2f2f6769746875622e636f6d2f4d65744f66666963652f7374796c6973742f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"></p>\n<h1>Stylist</h1>\n<p>The immediate need was for a code style checking tool which understood Fortran.\nSuch things being quite thin on the ground. However very few large software\nprojects are implemented in a single language. Thus a tool was developed which\nprovided a framework to aid in delivering support for multiple languages and\nmultiple style choices.</p>\n<p>The framework supports multiple styles, each consisting of multiple rules.\nEach of these may be one of two types, those which treat the source as a text\nfile and those which treat it as a parse tree.</p>\n<p>The project is still in its infancy so only a few rules have been implemented\nand only for fortran.</p>\n<h2>Design</h2>\n<p>In the past we have used text based tools and there's a surprising amount you\ncan do with regular expressions. However once context becomes important they\ncan become a liability. In those cases it is much better to have the parse\ntree.</p>\n<p>At the moment the tool is only able to flag up where a style rule has been\nbroken. For some things this is the best we can hope for but for others\nwe might aspire to correct the problem.</p>\n<p>For instance the current check for missing <code>implicit none</code> statements might,\nin the future, insert them where they are missing.</p>\n<p>Some UML class diagrams have been prepared which may be found in the\n<code>documentation</code> directory. These make use of the\n<a href=\"https://plantuml.com\" rel=\"nofollow\">PlantUML</a> tool to render.</p>\n\n          </div>"}, "last_serial": 6317918, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2f50a982eb60850739c0a2fbc6e87ad0", "sha256": "3279112085eb38cd114c61851e2a4ba926df847b0398253fcaa068451de555a1"}, "downloads": -1, "filename": "stylist-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2f50a982eb60850739c0a2fbc6e87ad0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 14733, "upload_time": "2019-12-17T14:10:51", "upload_time_iso_8601": "2019-12-17T14:10:51.911801Z", "url": "https://files.pythonhosted.org/packages/2c/f7/84a382c2f61ae0ae30e3f6d781fc63bad7630250abeae7f4f986c483249c/stylist-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fd53dd12de5b3f64f4f772ed3635822", "sha256": "e178164596e20e719a8b15963ad37369c85beec356a652314e878d8173da505d"}, "downloads": -1, "filename": "stylist-0.1.tar.gz", "has_sig": false, "md5_digest": "3fd53dd12de5b3f64f4f772ed3635822", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 15445, "upload_time": "2019-12-17T14:10:54", "upload_time_iso_8601": "2019-12-17T14:10:54.071774Z", "url": "https://files.pythonhosted.org/packages/05/72/a11f1f0ec5316effe6945eef2f15419b5fd988bb1dde049d1b17d0129b1c/stylist-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f50a982eb60850739c0a2fbc6e87ad0", "sha256": "3279112085eb38cd114c61851e2a4ba926df847b0398253fcaa068451de555a1"}, "downloads": -1, "filename": "stylist-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2f50a982eb60850739c0a2fbc6e87ad0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 14733, "upload_time": "2019-12-17T14:10:51", "upload_time_iso_8601": "2019-12-17T14:10:51.911801Z", "url": "https://files.pythonhosted.org/packages/2c/f7/84a382c2f61ae0ae30e3f6d781fc63bad7630250abeae7f4f986c483249c/stylist-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fd53dd12de5b3f64f4f772ed3635822", "sha256": "e178164596e20e719a8b15963ad37369c85beec356a652314e878d8173da505d"}, "downloads": -1, "filename": "stylist-0.1.tar.gz", "has_sig": false, "md5_digest": "3fd53dd12de5b3f64f4f772ed3635822", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 15445, "upload_time": "2019-12-17T14:10:54", "upload_time_iso_8601": "2019-12-17T14:10:54.071774Z", "url": "https://files.pythonhosted.org/packages/05/72/a11f1f0ec5316effe6945eef2f15419b5fd988bb1dde049d1b17d0129b1c/stylist-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:49 2020"}