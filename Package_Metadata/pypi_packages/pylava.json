{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Natural Language :: Russian", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance"], "description": "Pylava\n======\nPylava is a community maintained fork of `Pylama\n<https://github.com/klen/pylama>`_.\n\n.. image:: https://travis-ci.com/pylava/pylava.svg?branch=master\n    :target: https://travis-ci.com/pylava/pylava\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/pylava/pylava/badge.svg?branch=master\n    :target: https://coveralls.io/github/pylava/pylava?branch=master\n    :alt: Coveralls\n\n.. image:: https://img.shields.io/pypi/v/pylava.svg\n    :target: https://pypi.org/project/pylava/\n    :alt: Version\n\n.. image:: https://readthedocs.org/projects/pylavadocs/badge/?version=latest\n    :target: https://pylavadocs.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nPylava is a code audit tool for Python and JavaScript. Pylava wraps\nthese tools:\n\n* pycodestyle_ (formerly pep8) \u00a9 2012-2013, Florent Xicluna;\n* pydocstyle_ (formerly pep257 by Vladimir Keleshev) \u00a9 2014, Amir Rachum;\n* PyFlakes_ \u00a9 2005-2013, Kevin Watters;\n* Mccabe_ \u00a9 Ned Batchelder;\n* Pylint_ \u00a9 2013, Logilab (should be installed 'pylama_pylint' module);\n* Radon_ \u00a9 Michele Lacchia\n* gjslint_ \u00a9 The Closure Linter Authors (should be installed 'pylama_gjslint' module);\n\n.. _pycodestyle: https://github.com/PyCQA/pycodestyle\n.. _pydocstyle: https://github.com/PyCQA/pydocstyle/\n.. _PyFlakes: https://github.com/pyflakes/pyflakes\n.. _Mccabe: http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html\n.. _Pylint: http://pylint.org\n.. _Radon: https://github.com/rubik/radon\n.. _gjslint: https://developers.google.com/closure/utilities\n\n\n.. contents::\n\n\nCredits\n-------\nThanks to:\n\n- `Kirill Klenov <https://github.com/klen>`_ for creating and\n  maintaining the original Pylama project. This fork named Pylava is a\n  derivative work based on Kirill Klenov's Pylama project.\n- Contributors to Pylama.\n- Contributors to Pylava.\n\n\nNew in Pylava\n-------------\nThis fork of Pylama differs from the original Pylama project in the\nfollowing areas:\n\n- Pylama does not work with Python 3.7 due to `Pylama issue #123\n  <https://github.com/klen/pylama/issues/123>`_. While there is a pull\n  request to resolve the issue, they are not being merged into the\n  project due to lack of maintenance. This fork named Pylava is meant\n  for merging useful pull requests into the project, so that the project\n  can satsify the current needs of Python developers. This is the\n  primary reason why this fork was created.\n\n- The licensing terms of Pylama are unclear. The README of the original\n  Pylama project mentioned:\n\n    Licensed under a `BSD license`_.\n\n  It is unclear which BSD license (BSD-3-Clause or BSD-2-Clause) is\n  meant here. Moreover there are references to the GNU Lesser General\n  Public License (GNU LGPL) also in the project. See `Pylama issue #64\n  <https://github.com/klen/pylama/issues/64>`_ for more about this.\n\n  This fork interprets the license section of the README to mean that\n  the Pylama project is available under a BSD license in addition to\n  certain files being available under GNU LGPL due to the mentions of\n  GNU LGPL in such files.\n\n  Further, this fork named Pylava (a derivative work based on Pylama) is\n  distributed under the terms of the MIT license which is allowed by BSD\n  licenses.\n\n- While the original Pylama project uses the ``develop`` branch as the\n  active development branch, this fork uses the ``master`` branch as the\n  active development branch.\n\n.. _BSD license: http://www.linfo.org/bsdlicense.html\n\n\nDocumentation\n-------------\nDocumentation is available at https://pylavadocs.readthedocs.io/. Pull\nrequests with documentation enhancements and/or fixes are awesome and\nmost welcome.\n\n\nRequirements\n------------\n- Python (2.7, 3.4, 3.5, 3.6, or 3.7)\n- To use JavaScript checker (``gjslint``) you need to install\n  ``python-gflags`` with ``pip install python-gflags``.\n- If your tests are failing on Win platform you are missing:\n  ``curses`` - http://www.lfd.uci.edu/~gohlke/pythonlibs/\n  (The curses library supplies a terminal-independent screen-painting\n  and keyboard-handling facility for text-based terminals)\n\n\nInstallation\n------------\nEnter the following command to install Pylava. ::\n\n    $ pip install pylava\n\nWith Python 3, you may need to enter the following command instead. ::\n\n    $ pip3 install pylava\n\n\nQuick Start\n-----------\nPylava is easy to use and really fun for checking code quality. Just run\n`pylava` and get common output from all pylava plugins (pycodestyle_,\nPyFlakes_ and etc)\n\nRecursively check the current directory. ::\n\n    $ pylava\n\nRecursively check a path. ::\n\n    $ pylava <path_to_directory_or_file>\n\nIgnore errors ::\n\n    $ pylava -i W,E501\n\nNote: You could choose a group of errors ``D``,``E1``, etc., or special\nerrors ``C0312``.\n\nChoose code checkers ::\n\n    $ pylava -l \"pycodestyle,mccabe\"\n\nChoose code checkers for JavaScript::\n\n    $ pylava --linters=gjslint --ignore=E:0010 <path_to_directory_or_file>\n\n.. _options:\n\n\nSet Pylava (checkers) options\n-----------------------------\nCommand line options\n~~~~~~~~~~~~~~~~~~~~\n::\n\n    $ pylava --help\n\n    usage: pylava [-h] [--verbose] [--version] [--format {pycodestyle,pylint}]\n                  [--select SELECT] [--sort SORT] [--linters LINTERS]\n                  [--ignore IGNORE] [--skip SKIP] [--report REPORT] [--hook]\n                  [--async] [--options OPTIONS] [--force] [--abspath]\n                  [paths [paths ...]]\n\n    Code audit tool for python.\n\n    positional arguments:\n      paths                 Paths to files or directories for code check.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --verbose, -v         Verbose mode.\n      --version             show program's version number and exit\n      --format {pycodestyle,pylint}, -f {pycodestyle,pylint}\n                            Choose errors format (pycodestyle, pylint).\n      --select SELECT, -s SELECT\n                            Select errors and warnings. (comma-separated list)\n      --sort SORT           Sort result by error types. Ex. E,W,D\n      --linters LINTERS, -l LINTERS\n                            Select linters. (comma-separated). Choices are\n                            mccabe,pycodestyle,pyflakes,pydocstyle.\n      --ignore IGNORE, -i IGNORE\n                            Ignore errors and warnings. (comma-separated)\n      --skip SKIP           Skip files by masks (comma-separated, Ex.\n                            */messages.py)\n      --report REPORT, -r REPORT\n                            Send report to file [REPORT]\n      --hook                Install Git (Mercurial) hook.\n      --async               Enable async mode. Useful for checking a lot of\n                            files. Not supported by pylint.\n      --options FILE, -o FILE\n                            Specify configuration file. Looks for pylava.ini,\n                            setup.cfg, tox.ini, or pytest.ini in the current\n                            directory.\n      --force, -F           Force code checking (if linter doesnt allow)\n      --abspath, -a         Use absolute paths in output.\n\n\nFile modelines\n~~~~~~~~~~~~~~\nYou can set options for Pylava inside a source file. Use\npylava *modeline* for this.\n\nFormat: ::\n\n    # pylava:{name1}={value1}:{name2}={value2}:...\n\nExample: ::\n\n     .. Somethere in code\n     # pylava:ignore=W:select=W301\n\nDisable code checking for current file: ::\n\n     .. Somethere in code\n     # pylava:skip=1\n\nThose options have a higher priority.\n\n\nSkip lines (noqa)\n~~~~~~~~~~~~~~~~~\nJust add `# noqa` in end of line to ignore.\n\nExample:\n\n.. code:: python\n\n    def urgent_fuction():\n        unused_var = 'No errors here' # noqa\n\n\nConfiguration file\n~~~~~~~~~~~~~~~~~~\nPylava looks for a configuration file in the current directory.\n\nThe program searches for the first matching ini-style configuration file in\nthe directories of command line argument. Pylava looks for the configuration\nin this order: ::\n\n    pylava.ini\n    setup.cfg\n    tox.ini\n    pytest.ini\n\nThe ``--option`` / ``-o`` argument can be used to specify a\nconfiguration file.\n\nPylava searches for sections whose names start with `pylava`.\n\nThe `pylava` section configures global options like `linters` and `skip`.\n\nExample: ::\n\n    [pylava]\n    format = pylint\n    skip = */.tox/*,*/.env/*\n    linters = pylint,mccabe\n    ignore = F0401,C0111,E731\n\n\nSet Code-checkers' options\n~~~~~~~~~~~~~~~~~~~~~~~~~~\nYou could set options for special code checker with pylava configurations.\n\nExample: ::\n\n    [pylava:pyflakes]\n    builtins = _\n\n    [pylava:pycodestyle]\n    max_line_length = 100\n\n    [pylava:pylint]\n    max_line_length = 100\n    disable = R\n\nSee code-checkers' documentation for more info.\n\n\nSet options for file (group of files)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nYou could set options for special file (group of files)\nwith sections:\n\nThe options have a higher priority than in the `pylava` section.\n\nExample: ::\n\n    [pylava:*/pylava/main.py]\n    ignore = C901,R0914,W0212\n    select = R\n\n    [pylava:*/tests.py]\n    ignore = C0110\n\n    [pylava:*/setup.py]\n    skip = 1\n\n\nPytest integration\n------------------\nPylava has Pytest_ support. The package automatically registers itself\nas a pytest plugin during installation. Pylava also supports\n`pytest_cache` plugin.\n\nCheck files with pylava: ::\n\n    pytest --pylava ...\n\nRecommended way to set pylava options when using pytest \u2014 configuration\nfiles (see below).\n\n.. _Pytest: http://pytest.org\n\nWriting a linter\n----------------\nYou can write a custom extension for Pylava. Custom linter should be a\npython module. Name should be like ``pylava_<name>``.\n\nIn ``setup.py``, ``pylava.linter`` entry point should be defined.\n\nExample:\n\n.. code:: python\n\n    setup(\n        # ...\n        entry_points={\n            'pylava.linter': ['lintername = pylava_lintername.main:Linter'],\n        }\n        # ...\n    )\n\n``Linter`` should be instance of ``pylava.lint.Linter`` class. Must\nimplement two methods:\n\n- ``allow`` takes a path and returns true if linter can check this file for errors.\n- ``run`` takes a path and meta keywords params and returns a list of errors.\n\nExample\n~~~~~~~\nJust a virtual 'WOW' checker.\n\nsetup.py:\n\n.. code:: python\n\n    setup(\n        name='pylava_wow',\n        install_requires=[ 'setuptools' ],\n        entry_points={\n            'pylava.linter': ['wow = pylava_wow.main:Linter'],\n        }\n        # ...\n    )\n\npylava_wow.py:\n\n.. code:: python\n\n    from pylava.lint import Linter as BaseLinter\n\n    class Linter(BaseLinter):\n\n        def allow(self, path):\n            return 'wow' in path\n\n        def run(self, path, **meta):\n            with open(path) as f:\n                if 'wow' in f.read():\n                    return [{\n                        lnum: 0,\n                        col: 0,\n                        text: 'Wow has been found.',\n                        type: 'WOW'\n                    }]\n\n\nRun pylava from python code\n---------------------------\n.. code:: python\n\n    from pylava.main import check_path, parse_options\n\n    # Use and/or modify 0 or more of the options defined as keys in the\n    # variable my_redefined_options below. To use defaults for any\n    # option, remove that key completely.\n    my_redefined_options = {\n        'linters': ['pep257', 'pydocstyle', 'pycodestyle', 'pyflakes' ...],\n        'ignore': ['D203', 'D213', 'D406', 'D407', 'D413' ...],\n        'select': ['R1705' ...],\n        'sort': 'F,E,W,C,D,...',\n        'skip': '*__init__.py,*/test/*.py,...',\n        'async': True,\n        'force': True\n        ...\n    }\n    # relative path of the directory in which pylama should check\n    my_path = '...'\n\n    options = parse_options([my_path], **my_redefined_options)\n    errors = check_path(options, rootdir='.')\n\n\n\nSupport\n-------\nTo report bugs, suggest improvements, or ask questions, please create a\nnew issue at http://github.com/pylava/pylava/issues.\n\n\nContributing\n------------\nDevelopment of Pylava happens at the ``master`` branch of\nhttps://github.com/pylava/pylava.\n\n\nContributors\n------------\nSee AUTHORS_.\n\n.. _AUTHORS: https://github.com/pylava/pylava/blob/master/AUTHORS.rst\n\n\nLicense\n-------\nThis is free software. You are permitted to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of it, under the\nterms of the MIT License. See LICENSE.rst_ for the complete license.\n\nThis software is provided WITHOUT ANY WARRANTY; without even the implied\nwarranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See\nLICENSE.rst_ for the complete disclaimer.\n\n.. _LICENSE.rst: https://github.com/pylava/pylava/blob/master/LICENSE.rst\n\nThe original README from Pylama that made Pylama available under a BSD\nlicense and the original LICENSE file with the GNU LGPL license text are\narchived in the `pylama-archive\n<https://github.com/pylava/pylava/tree/master/pylama-archive>`_\ndirectory.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pylava/pylava", "keywords": "pylint,pep8,pycodestyle,pyflakes,mccabe,linter,qa,pep257,pydocstyle", "license": "MIT", "maintainer": "Susam Pal", "maintainer_email": "susam@susam.in", "name": "pylava", "package_url": "https://pypi.org/project/pylava/", "platform": "Any", "project_url": "https://pypi.org/project/pylava/", "project_urls": {"Homepage": "https://github.com/pylava/pylava"}, "release_url": "https://pypi.org/project/pylava/0.2.2/", "requires_dist": ["mccabe (>=0.5.2)", "pycodestyle (>=2.3.1)", "pydocstyle (>=2.0.0)", "pyflakes (>=1.5.0)"], "requires_python": "", "summary": "Pylava -- Code audit tool for Python", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pylava is a community maintained fork of <a href=\"https://github.com/klen/pylama\" rel=\"nofollow\">Pylama</a>.</p>\n<a href=\"https://travis-ci.com/pylava/pylava\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4106b3f60ae4bf00b0bd5b16de1a7d3578208251/68747470733a2f2f7472617669732d63692e636f6d2f70796c6176612f70796c6176612e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/pylava/pylava?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54050fb0cd94e78014b63f0c1655ce3fabc3b8b2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f70796c6176612f70796c6176612f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/pylava/\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33f6fb614a2e2ec180c430959e9865a4862da371/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70796c6176612e737667\"></a>\n<a href=\"https://pylavadocs.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8125c1fb7efb15a15f5f6b25fe3a1ed8df279f05/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796c617661646f63732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Pylava is a code audit tool for Python and JavaScript. Pylava wraps\nthese tools:</p>\n<ul>\n<li><a href=\"https://github.com/PyCQA/pycodestyle\" rel=\"nofollow\">pycodestyle</a> (formerly pep8) \u00a9 2012-2013, Florent Xicluna;</li>\n<li><a href=\"https://github.com/PyCQA/pydocstyle/\" rel=\"nofollow\">pydocstyle</a> (formerly pep257 by Vladimir Keleshev) \u00a9 2014, Amir Rachum;</li>\n<li><a href=\"https://github.com/pyflakes/pyflakes\" rel=\"nofollow\">PyFlakes</a> \u00a9 2005-2013, Kevin Watters;</li>\n<li><a href=\"http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html\" rel=\"nofollow\">Mccabe</a> \u00a9 Ned Batchelder;</li>\n<li><a href=\"http://pylint.org\" rel=\"nofollow\">Pylint</a> \u00a9 2013, Logilab (should be installed \u2018pylama_pylint\u2019 module);</li>\n<li><a href=\"https://github.com/rubik/radon\" rel=\"nofollow\">Radon</a> \u00a9 Michele Lacchia</li>\n<li><a href=\"https://developers.google.com/closure/utilities\" rel=\"nofollow\">gjslint</a> \u00a9 The Closure Linter Authors (should be installed \u2018pylama_gjslint\u2019 module);</li>\n</ul>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#credits\" id=\"id1\" rel=\"nofollow\">Credits</a></li>\n<li><a href=\"#new-in-pylava\" id=\"id2\" rel=\"nofollow\">New in Pylava</a></li>\n<li><a href=\"#documentation\" id=\"id3\" rel=\"nofollow\">Documentation</a></li>\n<li><a href=\"#requirements\" id=\"id4\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" id=\"id5\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#quick-start\" id=\"id6\" rel=\"nofollow\">Quick Start</a></li>\n<li><a href=\"#set-pylava-checkers-options\" id=\"id7\" rel=\"nofollow\">Set Pylava (checkers) options</a><ul>\n<li><a href=\"#command-line-options\" id=\"id8\" rel=\"nofollow\">Command line options</a></li>\n<li><a href=\"#file-modelines\" id=\"id9\" rel=\"nofollow\">File modelines</a></li>\n<li><a href=\"#skip-lines-noqa\" id=\"id10\" rel=\"nofollow\">Skip lines (noqa)</a></li>\n<li><a href=\"#configuration-file\" id=\"id11\" rel=\"nofollow\">Configuration file</a></li>\n<li><a href=\"#set-code-checkers-options\" id=\"id12\" rel=\"nofollow\">Set Code-checkers\u2019 options</a></li>\n<li><a href=\"#set-options-for-file-group-of-files\" id=\"id13\" rel=\"nofollow\">Set options for file (group of files)</a></li>\n</ul>\n</li>\n<li><a href=\"#pytest-integration\" id=\"id14\" rel=\"nofollow\">Pytest integration</a></li>\n<li><a href=\"#writing-a-linter\" id=\"id15\" rel=\"nofollow\">Writing a linter</a><ul>\n<li><a href=\"#example\" id=\"id16\" rel=\"nofollow\">Example</a></li>\n</ul>\n</li>\n<li><a href=\"#run-pylava-from-python-code\" id=\"id17\" rel=\"nofollow\">Run pylava from python code</a></li>\n<li><a href=\"#support\" id=\"id18\" rel=\"nofollow\">Support</a></li>\n<li><a href=\"#contributing\" id=\"id19\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#contributors\" id=\"id20\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#license\" id=\"id21\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"credits\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Credits</a></h2>\n<p>Thanks to:</p>\n<ul>\n<li><a href=\"https://github.com/klen\" rel=\"nofollow\">Kirill Klenov</a> for creating and\nmaintaining the original Pylama project. This fork named Pylava is a\nderivative work based on Kirill Klenov\u2019s Pylama project.</li>\n<li>Contributors to Pylama.</li>\n<li>Contributors to Pylava.</li>\n</ul>\n</div>\n<div id=\"new-in-pylava\">\n<h2><a href=\"#id2\" rel=\"nofollow\">New in Pylava</a></h2>\n<p>This fork of Pylama differs from the original Pylama project in the\nfollowing areas:</p>\n<ul>\n<li><p>Pylama does not work with Python 3.7 due to <a href=\"https://github.com/klen/pylama/issues/123\" rel=\"nofollow\">Pylama issue #123</a>. While there is a pull\nrequest to resolve the issue, they are not being merged into the\nproject due to lack of maintenance. This fork named Pylava is meant\nfor merging useful pull requests into the project, so that the project\ncan satsify the current needs of Python developers. This is the\nprimary reason why this fork was created.</p>\n</li>\n<li><p>The licensing terms of Pylama are unclear. The README of the original\nPylama project mentioned:</p>\n<blockquote>\n<p>Licensed under a <a href=\"http://www.linfo.org/bsdlicense.html\" rel=\"nofollow\">BSD license</a>.</p>\n</blockquote>\n<p>It is unclear which BSD license (BSD-3-Clause or BSD-2-Clause) is\nmeant here. Moreover there are references to the GNU Lesser General\nPublic License (GNU LGPL) also in the project. See <a href=\"https://github.com/klen/pylama/issues/64\" rel=\"nofollow\">Pylama issue #64</a> for more about this.</p>\n<p>This fork interprets the license section of the README to mean that\nthe Pylama project is available under a BSD license in addition to\ncertain files being available under GNU LGPL due to the mentions of\nGNU LGPL in such files.</p>\n<p>Further, this fork named Pylava (a derivative work based on Pylama) is\ndistributed under the terms of the MIT license which is allowed by BSD\nlicenses.</p>\n</li>\n<li><p>While the original Pylama project uses the <tt>develop</tt> branch as the\nactive development branch, this fork uses the <tt>master</tt> branch as the\nactive development branch.</p>\n</li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Documentation</a></h2>\n<p>Documentation is available at <a href=\"https://pylavadocs.readthedocs.io/\" rel=\"nofollow\">https://pylavadocs.readthedocs.io/</a>. Pull\nrequests with documentation enhancements and/or fixes are awesome and\nmost welcome.</p>\n</div>\n<div id=\"requirements\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Requirements</a></h2>\n<ul>\n<li>Python (2.7, 3.4, 3.5, 3.6, or 3.7)</li>\n<li>To use JavaScript checker (<tt>gjslint</tt>) you need to install\n<tt><span class=\"pre\">python-gflags</span></tt> with <tt>pip install <span class=\"pre\">python-gflags</span></tt>.</li>\n<li>If your tests are failing on Win platform you are missing:\n<tt>curses</tt> - <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" rel=\"nofollow\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>\n(The curses library supplies a terminal-independent screen-painting\nand keyboard-handling facility for text-based terminals)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Installation</a></h2>\n<p>Enter the following command to install Pylava.</p>\n<pre>$ pip install pylava\n</pre>\n<p>With Python 3, you may need to enter the following command instead.</p>\n<pre>$ pip3 install pylava\n</pre>\n</div>\n<div id=\"quick-start\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Quick Start</a></h2>\n<p>Pylava is easy to use and really fun for checking code quality. Just run\n<cite>pylava</cite> and get common output from all pylava plugins (<a href=\"https://github.com/PyCQA/pycodestyle\" rel=\"nofollow\">pycodestyle</a>,\n<a href=\"https://github.com/pyflakes/pyflakes\" rel=\"nofollow\">PyFlakes</a> and etc)</p>\n<p>Recursively check the current directory.</p>\n<pre>$ pylava\n</pre>\n<p>Recursively check a path.</p>\n<pre>$ pylava &lt;path_to_directory_or_file&gt;\n</pre>\n<p>Ignore errors</p>\n<pre>$ pylava -i W,E501\n</pre>\n<p>Note: You could choose a group of errors <tt>D</tt>,``E1``, etc., or special\nerrors <tt>C0312</tt>.</p>\n<p>Choose code checkers</p>\n<pre>$ pylava -l \"pycodestyle,mccabe\"\n</pre>\n<p>Choose code checkers for JavaScript:</p>\n<pre>$ pylava --linters=gjslint --ignore=E:0010 &lt;path_to_directory_or_file&gt;\n</pre>\n</div>\n<div id=\"set-pylava-checkers-options\">\n<span id=\"options\"></span><h2><a href=\"#id7\" rel=\"nofollow\">Set Pylava (checkers) options</a></h2>\n<div id=\"command-line-options\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Command line options</a></h3>\n<pre>$ pylava --help\n\nusage: pylava [-h] [--verbose] [--version] [--format {pycodestyle,pylint}]\n              [--select SELECT] [--sort SORT] [--linters LINTERS]\n              [--ignore IGNORE] [--skip SKIP] [--report REPORT] [--hook]\n              [--async] [--options OPTIONS] [--force] [--abspath]\n              [paths [paths ...]]\n\nCode audit tool for python.\n\npositional arguments:\n  paths                 Paths to files or directories for code check.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --verbose, -v         Verbose mode.\n  --version             show program's version number and exit\n  --format {pycodestyle,pylint}, -f {pycodestyle,pylint}\n                        Choose errors format (pycodestyle, pylint).\n  --select SELECT, -s SELECT\n                        Select errors and warnings. (comma-separated list)\n  --sort SORT           Sort result by error types. Ex. E,W,D\n  --linters LINTERS, -l LINTERS\n                        Select linters. (comma-separated). Choices are\n                        mccabe,pycodestyle,pyflakes,pydocstyle.\n  --ignore IGNORE, -i IGNORE\n                        Ignore errors and warnings. (comma-separated)\n  --skip SKIP           Skip files by masks (comma-separated, Ex.\n                        */messages.py)\n  --report REPORT, -r REPORT\n                        Send report to file [REPORT]\n  --hook                Install Git (Mercurial) hook.\n  --async               Enable async mode. Useful for checking a lot of\n                        files. Not supported by pylint.\n  --options FILE, -o FILE\n                        Specify configuration file. Looks for pylava.ini,\n                        setup.cfg, tox.ini, or pytest.ini in the current\n                        directory.\n  --force, -F           Force code checking (if linter doesnt allow)\n  --abspath, -a         Use absolute paths in output.\n</pre>\n</div>\n<div id=\"file-modelines\">\n<h3><a href=\"#id9\" rel=\"nofollow\">File modelines</a></h3>\n<p>You can set options for Pylava inside a source file. Use\npylava <em>modeline</em> for this.</p>\n<p>Format:</p>\n<pre># pylava:{name1}={value1}:{name2}={value2}:...\n</pre>\n<p>Example:</p>\n<pre>.. Somethere in code\n# pylava:ignore=W:select=W301\n</pre>\n<p>Disable code checking for current file:</p>\n<pre>.. Somethere in code\n# pylava:skip=1\n</pre>\n<p>Those options have a higher priority.</p>\n</div>\n<div id=\"skip-lines-noqa\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Skip lines (noqa)</a></h3>\n<p>Just add <cite># noqa</cite> in end of line to ignore.</p>\n<p>Example:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">urgent_fuction</span><span class=\"p\">():</span>\n    <span class=\"n\">unused_var</span> <span class=\"o\">=</span> <span class=\"s1\">'No errors here'</span> <span class=\"c1\"># noqa</span>\n</pre>\n</div>\n<div id=\"configuration-file\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Configuration file</a></h3>\n<p>Pylava looks for a configuration file in the current directory.</p>\n<p>The program searches for the first matching ini-style configuration file in\nthe directories of command line argument. Pylava looks for the configuration\nin this order:</p>\n<pre>pylava.ini\nsetup.cfg\ntox.ini\npytest.ini\n</pre>\n<p>The <tt><span class=\"pre\">--option</span></tt> / <tt><span class=\"pre\">-o</span></tt> argument can be used to specify a\nconfiguration file.</p>\n<p>Pylava searches for sections whose names start with <cite>pylava</cite>.</p>\n<p>The <cite>pylava</cite> section configures global options like <cite>linters</cite> and <cite>skip</cite>.</p>\n<p>Example:</p>\n<pre>[pylava]\nformat = pylint\nskip = */.tox/*,*/.env/*\nlinters = pylint,mccabe\nignore = F0401,C0111,E731\n</pre>\n</div>\n<div id=\"set-code-checkers-options\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Set Code-checkers\u2019 options</a></h3>\n<p>You could set options for special code checker with pylava configurations.</p>\n<p>Example:</p>\n<pre>[pylava:pyflakes]\nbuiltins = _\n\n[pylava:pycodestyle]\nmax_line_length = 100\n\n[pylava:pylint]\nmax_line_length = 100\ndisable = R\n</pre>\n<p>See code-checkers\u2019 documentation for more info.</p>\n</div>\n<div id=\"set-options-for-file-group-of-files\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Set options for file (group of files)</a></h3>\n<p>You could set options for special file (group of files)\nwith sections:</p>\n<p>The options have a higher priority than in the <cite>pylava</cite> section.</p>\n<p>Example:</p>\n<pre>[pylava:*/pylava/main.py]\nignore = C901,R0914,W0212\nselect = R\n\n[pylava:*/tests.py]\nignore = C0110\n\n[pylava:*/setup.py]\nskip = 1\n</pre>\n</div>\n</div>\n<div id=\"pytest-integration\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Pytest integration</a></h2>\n<p>Pylava has <a href=\"http://pytest.org\" rel=\"nofollow\">Pytest</a> support. The package automatically registers itself\nas a pytest plugin during installation. Pylava also supports\n<cite>pytest_cache</cite> plugin.</p>\n<p>Check files with pylava:</p>\n<pre>pytest --pylava ...\n</pre>\n<p>Recommended way to set pylava options when using pytest \u2014 configuration\nfiles (see below).</p>\n</div>\n<div id=\"writing-a-linter\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Writing a linter</a></h2>\n<p>You can write a custom extension for Pylava. Custom linter should be a\npython module. Name should be like <tt>pylava_&lt;name&gt;</tt>.</p>\n<p>In <tt>setup.py</tt>, <tt>pylava.linter</tt> entry point should be defined.</p>\n<p>Example:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'pylava.linter'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'lintername = pylava_lintername.main:Linter'</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n</pre>\n<p><tt>Linter</tt> should be instance of <tt>pylava.lint.Linter</tt> class. Must\nimplement two methods:</p>\n<ul>\n<li><tt>allow</tt> takes a path and returns true if linter can check this file for errors.</li>\n<li><tt>run</tt> takes a path and meta keywords params and returns a list of errors.</li>\n</ul>\n<div id=\"example\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Example</a></h3>\n<p>Just a virtual \u2018WOW\u2019 checker.</p>\n<p>setup.py:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'pylava_wow'</span><span class=\"p\">,</span>\n    <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span> <span class=\"s1\">'setuptools'</span> <span class=\"p\">],</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'pylava.linter'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'wow = pylava_wow.main:Linter'</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>pylava_wow.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylava.lint</span> <span class=\"kn\">import</span> <span class=\"n\">Linter</span> <span class=\"k\">as</span> <span class=\"n\">BaseLinter</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Linter</span><span class=\"p\">(</span><span class=\"n\">BaseLinter</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">allow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'wow'</span> <span class=\"ow\">in</span> <span class=\"n\">path</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">meta</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s1\">'wow'</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span> <span class=\"p\">[{</span>\n                    <span class=\"n\">lnum</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"n\">col</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"s1\">'Wow has been found.'</span><span class=\"p\">,</span>\n                    <span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"s1\">'WOW'</span>\n                <span class=\"p\">}]</span>\n</pre>\n</div>\n</div>\n<div id=\"run-pylava-from-python-code\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Run pylava from python code</a></h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylava.main</span> <span class=\"kn\">import</span> <span class=\"n\">check_path</span><span class=\"p\">,</span> <span class=\"n\">parse_options</span>\n\n<span class=\"c1\"># Use and/or modify 0 or more of the options defined as keys in the</span>\n<span class=\"c1\"># variable my_redefined_options below. To use defaults for any</span>\n<span class=\"c1\"># option, remove that key completely.</span>\n<span class=\"n\">my_redefined_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'linters'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'pep257'</span><span class=\"p\">,</span> <span class=\"s1\">'pydocstyle'</span><span class=\"p\">,</span> <span class=\"s1\">'pycodestyle'</span><span class=\"p\">,</span> <span class=\"s1\">'pyflakes'</span> <span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s1\">'ignore'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'D203'</span><span class=\"p\">,</span> <span class=\"s1\">'D213'</span><span class=\"p\">,</span> <span class=\"s1\">'D406'</span><span class=\"p\">,</span> <span class=\"s1\">'D407'</span><span class=\"p\">,</span> <span class=\"s1\">'D413'</span> <span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s1\">'select'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'R1705'</span> <span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s1\">'sort'</span><span class=\"p\">:</span> <span class=\"s1\">'F,E,W,C,D,...'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'skip'</span><span class=\"p\">:</span> <span class=\"s1\">'*__init__.py,*/test/*.py,...'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'async'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'force'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">}</span>\n<span class=\"c1\"># relative path of the directory in which pylama should check</span>\n<span class=\"n\">my_path</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span>\n\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">parse_options</span><span class=\"p\">([</span><span class=\"n\">my_path</span><span class=\"p\">],</span> <span class=\"o\">**</span><span class=\"n\">my_redefined_options</span><span class=\"p\">)</span>\n<span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">check_path</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"n\">rootdir</span><span class=\"o\">=</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"support\">\n<h2><a href=\"#id18\" rel=\"nofollow\">Support</a></h2>\n<p>To report bugs, suggest improvements, or ask questions, please create a\nnew issue at <a href=\"http://github.com/pylava/pylava/issues\" rel=\"nofollow\">http://github.com/pylava/pylava/issues</a>.</p>\n</div>\n<div id=\"contributing\">\n<h2><a href=\"#id19\" rel=\"nofollow\">Contributing</a></h2>\n<p>Development of Pylava happens at the <tt>master</tt> branch of\n<a href=\"https://github.com/pylava/pylava\" rel=\"nofollow\">https://github.com/pylava/pylava</a>.</p>\n</div>\n<div id=\"contributors\">\n<h2><a href=\"#id20\" rel=\"nofollow\">Contributors</a></h2>\n<p>See <a href=\"https://github.com/pylava/pylava/blob/master/AUTHORS.rst\" rel=\"nofollow\">AUTHORS</a>.</p>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id21\" rel=\"nofollow\">License</a></h2>\n<p>This is free software. You are permitted to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of it, under the\nterms of the MIT License. See <a href=\"https://github.com/pylava/pylava/blob/master/LICENSE.rst\" rel=\"nofollow\">LICENSE.rst</a> for the complete license.</p>\n<p>This software is provided WITHOUT ANY WARRANTY; without even the implied\nwarranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See\n<a href=\"https://github.com/pylava/pylava/blob/master/LICENSE.rst\" rel=\"nofollow\">LICENSE.rst</a> for the complete disclaimer.</p>\n<p>The original README from Pylama that made Pylama available under a BSD\nlicense and the original LICENSE file with the GNU LGPL license text are\narchived in the <a href=\"https://github.com/pylava/pylava/tree/master/pylama-archive\" rel=\"nofollow\">pylama-archive</a>\ndirectory.</p>\n</div>\n\n          </div>"}, "last_serial": 4376282, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1b8c0f16287ffbcad9bf11df893e9386", "sha256": "83e18f229ce2f68f826ef3b3ce4b6796a55769ab427d8c5f80a9105dd618a695"}, "downloads": -1, "filename": "pylava-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b8c0f16287ffbcad9bf11df893e9386", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26094, "upload_time": "2018-08-15T10:45:35", "upload_time_iso_8601": "2018-08-15T10:45:35.981972Z", "url": "https://files.pythonhosted.org/packages/77/de/5d081c54e028037c15b225011152b35612f8bd99fcade2988344f5804cb0/pylava-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d49f42ece18eaad8adae98169fc60f1d", "sha256": "1600361913a7daa0157053733d44b346d2e9cb954e8bf5bae2c1a1c8122eced6"}, "downloads": -1, "filename": "pylava-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d49f42ece18eaad8adae98169fc60f1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30060, "upload_time": "2018-08-15T10:42:37", "upload_time_iso_8601": "2018-08-15T10:42:37.244061Z", "url": "https://files.pythonhosted.org/packages/57/0c/1356d0d57c6eddde18b4c6159609cabe9a11f8bcfffe7b37d612fd637f67/pylava-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3542136e724bbd347ed09f75a51b4abb", "sha256": "cf21d63a01f2b8076727cf5677632d6767c34954797aecc89935fcac61047b10"}, "downloads": -1, "filename": "pylava-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3542136e724bbd347ed09f75a51b4abb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26085, "upload_time": "2018-08-15T10:58:01", "upload_time_iso_8601": "2018-08-15T10:58:01.758542Z", "url": "https://files.pythonhosted.org/packages/e2/44/1b04d4e329eef4d1d2bede21a54a657ad45f6106b7df3443cb3e09f789a3/pylava-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fee30fdb0893d8d33dabf629a5c77fd6", "sha256": "b4e7e75f7521ab8d6d5c29779986825f826d6a91f402d4976099ea75e14b2cb1"}, "downloads": -1, "filename": "pylava-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fee30fdb0893d8d33dabf629a5c77fd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29596, "upload_time": "2018-08-15T10:56:19", "upload_time_iso_8601": "2018-08-15T10:56:19.068053Z", "url": "https://files.pythonhosted.org/packages/52/d6/dbbba1aa699b8a3dafffc3bc80559d4510c91c4a2cf609a9502de071094b/pylava-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a0e6a5ea51c84b202807fc14e6e889b8", "sha256": "98b6acba48055901129ad3d3b14096b92ebe1f8b88577677a14a3224d05f1600"}, "downloads": -1, "filename": "pylava-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a0e6a5ea51c84b202807fc14e6e889b8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26394, "upload_time": "2018-08-15T14:18:51", "upload_time_iso_8601": "2018-08-15T14:18:51.608878Z", "url": "https://files.pythonhosted.org/packages/11/34/3e23cc4c325dc3159b5ae7f399c41eac0934ae93354d81113761290a5ef9/pylava-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d677c984860b6b6641661c245074e43a", "sha256": "d342be2041b1696351de980a8c608f7ca5ffec0059c8cdb26481303cee25230d"}, "downloads": -1, "filename": "pylava-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d677c984860b6b6641661c245074e43a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26515, "upload_time": "2018-08-15T14:18:53", "upload_time_iso_8601": "2018-08-15T14:18:53.982273Z", "url": "https://files.pythonhosted.org/packages/ab/dd/c7bd361062c29c1e75def94c22a8f2fe0ac2b5963adb956b003914590b6d/pylava-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8391c273f6480d638e638c105ba6c9c9", "sha256": "39813844ff4551268f8b5bbf67d28691dec45577a6ae32853d469f9a625d9680"}, "downloads": -1, "filename": "pylava-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8391c273f6480d638e638c105ba6c9c9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26703, "upload_time": "2018-08-24T10:02:57", "upload_time_iso_8601": "2018-08-24T10:02:57.298370Z", "url": "https://files.pythonhosted.org/packages/24/ac/53c13b44c1743429f910c97f774de0402c5f3d5c8de9f583b2c5e86c0fe0/pylava-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bde52e2808be889131a9b0d1df607a23", "sha256": "8de84b4ba3747505120f0e38723035f8c942a558bd6db13e364c29d9bf705457"}, "downloads": -1, "filename": "pylava-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bde52e2808be889131a9b0d1df607a23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27107, "upload_time": "2018-08-24T10:02:59", "upload_time_iso_8601": "2018-08-24T10:02:59.453000Z", "url": "https://files.pythonhosted.org/packages/c0/b9/b689befdb18ce7f6dc996d2a84346c202dc93f21f381be345103ee345c58/pylava-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ae0c50089a878c0e71a7eae6cea831fb", "sha256": "20d12927f866c2d31c7d16cc4201a02c36ad26212f36f13e6725e0c40502520e"}, "downloads": -1, "filename": "pylava-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ae0c50089a878c0e71a7eae6cea831fb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26703, "upload_time": "2018-08-27T14:53:13", "upload_time_iso_8601": "2018-08-27T14:53:13.937536Z", "url": "https://files.pythonhosted.org/packages/2a/1b/a976fc7958aea3ffbb1b1a437b965f7260fa5d55a1eba15c6a09fde90b94/pylava-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20a56d83b62967919aabdf3aca8eafb4", "sha256": "667320f3a9eab9f3528b6a83e4e7e92eb8b4791a654402b2f48fd927f01a81a1"}, "downloads": -1, "filename": "pylava-0.2.1.tar.gz", "has_sig": false, "md5_digest": "20a56d83b62967919aabdf3aca8eafb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32787, "upload_time": "2018-08-27T14:53:16", "upload_time_iso_8601": "2018-08-27T14:53:16.657688Z", "url": "https://files.pythonhosted.org/packages/78/08/67f025c8f3721042f94212823fd3a3b99fc35772e26b4acca50bb50c238e/pylava-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "15a0449dd56c7230a4a9f5ea4e88b318", "sha256": "b2fc881e9112a36f5a8a97bdbbedfa1704bbb65c34afa630e6df31532ae20994"}, "downloads": -1, "filename": "pylava-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "15a0449dd56c7230a4a9f5ea4e88b318", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26703, "upload_time": "2018-10-15T04:55:03", "upload_time_iso_8601": "2018-10-15T04:55:03.506356Z", "url": "https://files.pythonhosted.org/packages/e9/6f/74f09c1fb41e6f9171e0d1ea1c35cd436e92ef35498da8cbe946e03e5414/pylava-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b87387c54eb65552ab86f061a5360363", "sha256": "dcdecb6668cb8c4a38e0ee4fdb5f4d9488793af57bc040d89b0d1142f13b8622"}, "downloads": -1, "filename": "pylava-0.2.2.tar.gz", "has_sig": false, "md5_digest": "b87387c54eb65552ab86f061a5360363", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27085, "upload_time": "2018-10-15T04:55:05", "upload_time_iso_8601": "2018-10-15T04:55:05.484356Z", "url": "https://files.pythonhosted.org/packages/37/05/de2b3c4f34a802f0ee225adbc8f4ecf8f18b1b5e2aa9c04233a07df3b864/pylava-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15a0449dd56c7230a4a9f5ea4e88b318", "sha256": "b2fc881e9112a36f5a8a97bdbbedfa1704bbb65c34afa630e6df31532ae20994"}, "downloads": -1, "filename": "pylava-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "15a0449dd56c7230a4a9f5ea4e88b318", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26703, "upload_time": "2018-10-15T04:55:03", "upload_time_iso_8601": "2018-10-15T04:55:03.506356Z", "url": "https://files.pythonhosted.org/packages/e9/6f/74f09c1fb41e6f9171e0d1ea1c35cd436e92ef35498da8cbe946e03e5414/pylava-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b87387c54eb65552ab86f061a5360363", "sha256": "dcdecb6668cb8c4a38e0ee4fdb5f4d9488793af57bc040d89b0d1142f13b8622"}, "downloads": -1, "filename": "pylava-0.2.2.tar.gz", "has_sig": false, "md5_digest": "b87387c54eb65552ab86f061a5360363", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27085, "upload_time": "2018-10-15T04:55:05", "upload_time_iso_8601": "2018-10-15T04:55:05.484356Z", "url": "https://files.pythonhosted.org/packages/37/05/de2b3c4f34a802f0ee225adbc8f4ecf8f18b1b5e2aa9c04233a07df3b864/pylava-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:18 2020"}