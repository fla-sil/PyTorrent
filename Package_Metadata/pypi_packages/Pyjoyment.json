{"info": {"author": "Piotr Roszatycki", "author_email": "piotr.roszatycki@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "License :: OSI Approved :: Artistic License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic :: Software Development :: Testing", "Topic :: Text Processing :: Markup :: HTML"], "description": ".. image:: https://img.shields.io/pypi/v/Pyjoyment.png\r\n   :target: https://pypi.python.org/pypi/Pyjoyment\r\n.. image:: https://travis-ci.org/dex4er/Pyjoyment.png?branch=master\r\n   :target: https://travis-ci.org/dex4er/Pyjoyment\r\n.. image:: https://readthedocs.org/projects/pyjoyment/badge/?version=latest\r\n   :target: http://pyjoyment.readthedocs.org/en/latest/\r\n\r\nPyjoyment\r\n=========\r\n\r\nAn asynchronous, event driver web framework for the Python programming language.\r\n\r\nPyjoyment provides own reactor which handles I/O and timer events in its own\r\nmain event loop but it supports other loops, ie. libev, asyncio.\r\n\r\nPyjoyment uses intensively own event emmiter which should be familiar for\r\nNode.JS programmers.\r\n\r\nIt provides tool set for parsing and creating HTTP messages and HTML documents.\r\nIt also supports WSGI interface.\r\n\r\nPyjoyment is compatible with Python 2.7+, Python 3.3+ and PyPy 2.4+. It doesn't\r\nrequire any external libraries or compilers.\r\n\r\nSee http://www.pyjoyment.net/\r\n\r\nPyjoyment is based on `Mojolicious <http://mojolicio.us>`_: a next generation\r\nweb framework for the Perl programming language.\r\n\r\nStatus\r\n======\r\n\r\nEarly developement stage. Implemented already:\r\n\r\n* WSGI adapter\r\n* HTTP standalone async-io server\r\n* WebSockets client and server\r\n* HTTP user agent with TLS/SSL support\r\n* JSON pointers implementation based on ``RFC6901``\r\n* Embedded files loader\r\n* HTML/XML DOM parser with CSS selectors\r\n* URL parser with container classes for URL, path and querystring\r\n* Non-blocking TCP client and server\r\n* Simple logging object\r\n* Synchronizer and sequentializer of multiple events\r\n* Main event loop which handle IO and timer events\r\n* Event emitter with subscriptions\r\n* Low level event reactor based on ``select(2)`` and ``poll(2)``\r\n* Convenient functions and classed for unicode and byte strings and lists\r\n* Lazy properties for objects\r\n* Test units with API based on Perl's ``Test::More`` and `TAP <http://testanything.org/>`_ protocol\r\n\r\nExamples\r\n========\r\n\r\nWeb scraping\r\n------------\r\n\r\n.. code-block:: python\r\n\r\n   import Pyjo.UserAgent\r\n   from Pyjo.String.Unicode import u\r\n\r\n   tx = Pyjo.UserAgent.new().get('https://html.spec.whatwg.org')\r\n   for n in tx.res.dom('#named-character-references-table tbody > tr').each():\r\n       u(n.at('td > code').text + ' ' + n.children('td')[1].text).trim().say()\r\n\r\n\r\n\r\nURL manipulation\r\n----------------\r\n\r\n.. code-block:: python\r\n\r\n   import Pyjo.URL\r\n   from Pyjo.String.Unicode import u\r\n\r\n   # 'ssh+git://git@github.com/dex4er/Pyjoyment.git'\r\n   url = Pyjo.URL.new('https://github.com/dex4er/Pyjoyment')\r\n   print(url.set(scheme='ssh+git', userinfo='git', path=u(url.path) + '.git'))\r\n\r\n   # 'http://metacpan.org/search?q=Mojo::URL&size=20'\r\n   print(Pyjo.URL.new('http://metacpan.org/search')\r\n         .set(query={'q': 'Mojo::URL', 'size': 20}))\r\n\r\n\r\nNon-blocking TCP client/server\r\n------------------------------\r\n\r\n.. code-block:: python\r\n\r\n   import Pyjo.IOLoop\r\n\r\n\r\n   # Listen on port 3000\r\n   @Pyjo.IOLoop.server(port=3000)\r\n   def server(loop, stream, cid):\r\n\r\n       @stream.on\r\n       def read(stream, chunk):\r\n           # Process input chunk\r\n           print(\"Server: {0}\".format(chunk.decode('utf-8')))\r\n\r\n           # Write response\r\n           stream.write(b\"HTTP/1.1 200 OK\\x0d\\x0a\\x0d\\x0a\")\r\n\r\n           # Disconnect client\r\n           stream.close_gracefully()\r\n\r\n\r\n   # Connect to port 3000\r\n   @Pyjo.IOLoop.client(port=3000)\r\n   def client(loop, err, stream):\r\n\r\n       @stream.on\r\n       def read(stream, chunk):\r\n           # Process input\r\n           print(\"Client: {0}\".format(chunk.decode('utf-8')))\r\n\r\n       # Write request\r\n       stream.write(b\"GET / HTTP/1.1\\x0d\\x0a\\x0d\\x0a\")\r\n\r\n\r\n   # Add a timer\r\n   @Pyjo.IOLoop.timer(3)\r\n   def timeouter(loop):\r\n       print(\"Timeout\")\r\n       # Shutdown server\r\n       loop.remove(server)\r\n\r\n\r\n   # Start event loop\r\n   Pyjo.IOLoop.start()\r\n\r\n\r\nStandalone HTTP server serving embedded template file\r\n------------------------------------------------------\r\n\r\n.. code-block:: python\r\n\r\n   # -*- coding: utf-8 -*-\r\n\r\n   import Pyjo.Server.Daemon\r\n   import Pyjo.URL\r\n\r\n   from Pyjo.Loader import embedded_file\r\n   from Pyjo.Util import b, u\r\n\r\n   import sys\r\n\r\n\r\n   opts = dict([['address', '0.0.0.0'], ['port', 3000]] + list(map(lambda a: a.split('='), sys.argv[1:])))\r\n   listen = str(Pyjo.URL.new(scheme='http', host=opts['address'], port=opts['port']))\r\n\r\n   daemon = Pyjo.Server.Daemon.new(listen=[listen])\r\n   daemon.unsubscribe('request')\r\n\r\n\r\n   # Embedded template file\r\n   DATA = u(r'''\r\n   @@ index.html.tpl\r\n   <!DOCTYPE html>\r\n   <html>\r\n   <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>Pyjoyment</title>\r\n   </head>\r\n   <body>\r\n   <h1>\u2665 Pyjoyment \u2665</h1>\r\n   <h2>This page is served by Pyjoyment framework.</h2>\r\n   <p>{method} request for {path}</p>\r\n   </body>\r\n   </html>\r\n   ''')\r\n\r\n\r\n   @daemon.on\r\n   def request(daemon, tx):\r\n       # Request\r\n       method = tx.req.method\r\n       path = tx.req.url.path\r\n\r\n       # Template\r\n       template = embedded_file(sys.modules[__name__], 'index.html.tpl')\r\n\r\n       # Response\r\n       tx.res.code = 200\r\n       tx.res.headers.content_type = 'text/html; charset=utf-8'\r\n       tx.res.body = b(template.format(**locals()))\r\n\r\n       # Resume transaction\r\n       tx.resume()\r\n\r\n\r\n   daemon.run()", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/dex4er/Pyjoyment/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/dex4er/Pyjoyment", "keywords": "async framework html http mojo mojolicious pyjo pyjoyment tap test websocket wsgi", "license": "Artistic", "maintainer": "", "maintainer_email": "", "name": "Pyjoyment", "package_url": "https://pypi.org/project/Pyjoyment/", "platform": "", "project_url": "https://pypi.org/project/Pyjoyment/", "project_urls": {"Download": "https://github.com/dex4er/Pyjoyment/archive/master.zip", "Homepage": "http://github.com/dex4er/Pyjoyment"}, "release_url": "https://pypi.org/project/Pyjoyment/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "An asynchronous, event driver web framework for the Python programming language.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/Pyjoyment\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/Pyjoyment.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54ed7ba321e97cfc5a36f8e2f501dde2786fe823/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f50796a6f796d656e742e706e67\"></a>\n<a href=\"https://travis-ci.org/dex4er/Pyjoyment\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/dex4er/Pyjoyment.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43122bfd6fdf395f58dc58b9b2f6c2aee7f518ff/68747470733a2f2f7472617669732d63692e6f72672f6465783465722f50796a6f796d656e742e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://pyjoyment.readthedocs.org/en/latest/\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/pyjoyment/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbf49596d3594349254693d6a5faa62e379ad9e2/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796a6f796d656e742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<div id=\"pyjoyment\">\n<h2>Pyjoyment</h2>\n<p>An asynchronous, event driver web framework for the Python programming language.</p>\n<p>Pyjoyment provides own reactor which handles I/O and timer events in its own\nmain event loop but it supports other loops, ie. libev, asyncio.</p>\n<p>Pyjoyment uses intensively own event emmiter which should be familiar for\nNode.JS programmers.</p>\n<p>It provides tool set for parsing and creating HTTP messages and HTML documents.\nIt also supports WSGI interface.</p>\n<p>Pyjoyment is compatible with Python 2.7+, Python 3.3+ and PyPy 2.4+. It doesn\u2019t\nrequire any external libraries or compilers.</p>\n<p>See <a href=\"http://www.pyjoyment.net/\" rel=\"nofollow\">http://www.pyjoyment.net/</a></p>\n<p>Pyjoyment is based on <a href=\"http://mojolicio.us\" rel=\"nofollow\">Mojolicious</a>: a next generation\nweb framework for the Perl programming language.</p>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>Early developement stage. Implemented already:</p>\n<ul>\n<li>WSGI adapter</li>\n<li>HTTP standalone async-io server</li>\n<li>WebSockets client and server</li>\n<li>HTTP user agent with TLS/SSL support</li>\n<li>JSON pointers implementation based on <tt>RFC6901</tt></li>\n<li>Embedded files loader</li>\n<li>HTML/XML DOM parser with CSS selectors</li>\n<li>URL parser with container classes for URL, path and querystring</li>\n<li>Non-blocking TCP client and server</li>\n<li>Simple logging object</li>\n<li>Synchronizer and sequentializer of multiple events</li>\n<li>Main event loop which handle IO and timer events</li>\n<li>Event emitter with subscriptions</li>\n<li>Low level event reactor based on <tt>select(2)</tt> and <tt>poll(2)</tt></li>\n<li>Convenient functions and classed for unicode and byte strings and lists</li>\n<li>Lazy properties for objects</li>\n<li>Test units with API based on Perl\u2019s <tt><span class=\"pre\">Test::More</span></tt> and <a href=\"http://testanything.org/\" rel=\"nofollow\">TAP</a> protocol</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"web-scraping\">\n<h3>Web scraping</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">Pyjo.UserAgent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Pyjo.String.Unicode</span> <span class=\"kn\">import</span> <span class=\"n\">u</span>\n\n<span class=\"n\">tx</span> <span class=\"o\">=</span> <span class=\"n\">Pyjo</span><span class=\"o\">.</span><span class=\"n\">UserAgent</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://html.spec.whatwg.org'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">dom</span><span class=\"p\">(</span><span class=\"s1\">'#named-character-references-table tbody &gt; tr'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">each</span><span class=\"p\">():</span>\n    <span class=\"n\">u</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"s1\">'td &gt; code'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">(</span><span class=\"s1\">'td'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">trim</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">say</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"url-manipulation\">\n<h3>URL manipulation</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">Pyjo.URL</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Pyjo.String.Unicode</span> <span class=\"kn\">import</span> <span class=\"n\">u</span>\n\n<span class=\"c1\"># 'ssh+git://git@github.com/dex4er/Pyjoyment.git'</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">Pyjo</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'https://github.com/dex4er/Pyjoyment'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"s1\">'ssh+git'</span><span class=\"p\">,</span> <span class=\"n\">userinfo</span><span class=\"o\">=</span><span class=\"s1\">'git'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">u</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'.git'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 'http://metacpan.org/search?q=Mojo::URL&amp;size=20'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Pyjo</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'http://metacpan.org/search'</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">'Mojo::URL'</span><span class=\"p\">,</span> <span class=\"s1\">'size'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">}))</span>\n</pre>\n</div>\n<div id=\"non-blocking-tcp-client-server\">\n<h3>Non-blocking TCP client/server</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">Pyjo.IOLoop</span>\n\n\n<span class=\"c1\"># Listen on port 3000</span>\n<span class=\"nd\">@Pyjo</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">server</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">cid</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@stream</span><span class=\"o\">.</span><span class=\"n\">on</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">chunk</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Process input chunk</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Server: </span><span class=\"si\">{0}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)))</span>\n\n        <span class=\"c1\"># Write response</span>\n        <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"HTTP/1.1 200 OK</span><span class=\"se\">\\x0d\\x0a\\x0d\\x0a</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Disconnect client</span>\n        <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">close_gracefully</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Connect to port 3000</span>\n<span class=\"nd\">@Pyjo</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">client</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@stream</span><span class=\"o\">.</span><span class=\"n\">on</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">chunk</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Process input</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Client: </span><span class=\"si\">{0}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)))</span>\n\n    <span class=\"c1\"># Write request</span>\n    <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"GET / HTTP/1.1</span><span class=\"se\">\\x0d\\x0a\\x0d\\x0a</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Add a timer</span>\n<span class=\"nd\">@Pyjo</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">timer</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">timeouter</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Timeout\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Shutdown server</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Start event loop</span>\n<span class=\"n\">Pyjo</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"standalone-http-server-serving-embedded-template-file\">\n<h3>Standalone HTTP server serving embedded template file</h3>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">Pyjo.Server.Daemon</span>\n<span class=\"kn\">import</span> <span class=\"nn\">Pyjo.URL</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">Pyjo.Loader</span> <span class=\"kn\">import</span> <span class=\"n\">embedded_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Pyjo.Util</span> <span class=\"kn\">import</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n\n<span class=\"n\">opts</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">([[</span><span class=\"s1\">'address'</span><span class=\"p\">,</span> <span class=\"s1\">'0.0.0.0'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"mi\">3000</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'='</span><span class=\"p\">),</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])))</span>\n<span class=\"n\">listen</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Pyjo</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"s1\">'http'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">opts</span><span class=\"p\">[</span><span class=\"s1\">'address'</span><span class=\"p\">],</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">opts</span><span class=\"p\">[</span><span class=\"s1\">'port'</span><span class=\"p\">]))</span>\n\n<span class=\"n\">daemon</span> <span class=\"o\">=</span> <span class=\"n\">Pyjo</span><span class=\"o\">.</span><span class=\"n\">Server</span><span class=\"o\">.</span><span class=\"n\">Daemon</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">listen</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">listen</span><span class=\"p\">])</span>\n<span class=\"n\">daemon</span><span class=\"o\">.</span><span class=\"n\">unsubscribe</span><span class=\"p\">(</span><span class=\"s1\">'request'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Embedded template file</span>\n<span class=\"n\">DATA</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'''\n@@ index.html.tpl\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Pyjoyment&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;\u2665 Pyjoyment \u2665&lt;/h1&gt;\n&lt;h2&gt;This page is served by Pyjoyment framework.&lt;/h2&gt;\n&lt;p&gt;</span><span class=\"si\">{method}</span><span class=\"s1\"> request for </span><span class=\"si\">{path}</span><span class=\"s1\">&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n'''</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@daemon</span><span class=\"o\">.</span><span class=\"n\">on</span>\n<span class=\"k\">def</span> <span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"n\">daemon</span><span class=\"p\">,</span> <span class=\"n\">tx</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Request</span>\n    <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">method</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">path</span>\n\n    <span class=\"c1\"># Template</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">embedded_file</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"vm\">__name__</span><span class=\"p\">],</span> <span class=\"s1\">'index.html.tpl'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Response</span>\n    <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n    <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"s1\">'text/html; charset=utf-8'</span>\n    <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"nb\">locals</span><span class=\"p\">()))</span>\n\n    <span class=\"c1\"># Resume transaction</span>\n    <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">resume</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">daemon</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2029765, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "31b9372add03cf9c52a31bc74d22027c", "sha256": "2cb11f7d77661348a00d8834456e68a7bcf4c5470c155a697e88096fc04915d5"}, "downloads": -1, "filename": "Pyjoyment-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "31b9372add03cf9c52a31bc74d22027c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 163622, "upload_time": "2016-03-27T12:18:32", "upload_time_iso_8601": "2016-03-27T12:18:32.336177Z", "url": "https://files.pythonhosted.org/packages/d2/87/70ea3ef912637ae2370bfa58a4a6692d9e3c91258f862aea808546bce16b/Pyjoyment-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abd90f78eecc6c1d9e6e093df3c503bb", "sha256": "95439ec44979d839f46a80a54b6fe15899ad1c435166405a1aac0b12bdcee7f0"}, "downloads": -1, "filename": "Pyjoyment-0.0.1.tar.gz", "has_sig": false, "md5_digest": "abd90f78eecc6c1d9e6e093df3c503bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127736, "upload_time": "2016-03-27T12:18:42", "upload_time_iso_8601": "2016-03-27T12:18:42.881607Z", "url": "https://files.pythonhosted.org/packages/2d/d6/1ab9fca946665ed9482c52a80def86f72a330586e20433fc5114848f7515/Pyjoyment-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "31b9372add03cf9c52a31bc74d22027c", "sha256": "2cb11f7d77661348a00d8834456e68a7bcf4c5470c155a697e88096fc04915d5"}, "downloads": -1, "filename": "Pyjoyment-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "31b9372add03cf9c52a31bc74d22027c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 163622, "upload_time": "2016-03-27T12:18:32", "upload_time_iso_8601": "2016-03-27T12:18:32.336177Z", "url": "https://files.pythonhosted.org/packages/d2/87/70ea3ef912637ae2370bfa58a4a6692d9e3c91258f862aea808546bce16b/Pyjoyment-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abd90f78eecc6c1d9e6e093df3c503bb", "sha256": "95439ec44979d839f46a80a54b6fe15899ad1c435166405a1aac0b12bdcee7f0"}, "downloads": -1, "filename": "Pyjoyment-0.0.1.tar.gz", "has_sig": false, "md5_digest": "abd90f78eecc6c1d9e6e093df3c503bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127736, "upload_time": "2016-03-27T12:18:42", "upload_time_iso_8601": "2016-03-27T12:18:42.881607Z", "url": "https://files.pythonhosted.org/packages/2d/d6/1ab9fca946665ed9482c52a80def86f72a330586e20433fc5114848f7515/Pyjoyment-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:44 2020"}