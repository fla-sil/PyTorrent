{"info": {"author": "Fox Danger Piacenti", "author_email": "fox@artconomy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Short Stuff\n\nBy Fox at [Artconomy.com](https://artconomy.com/).\n\nShort Stuff is a set of helper functions used for generating short unique identifiers, such as those used \nin YouTube video IDs or in URL shorteners.\n\nShort Stuff does this by generating random byte strings, running them through base64 encoding and \nthen doing some cleanup for compatibility.\n\nMost distinct about the methodology is that it piggy-backs on UUIDs. That means that if you want to leverage your\ndatabase or library's native UUID support, you can do so, and helper functions are \nprovided for this.\n\n---\n\n## Installation\n\nShort Stuff requires (at least) Python 3.5. It has only been tested on Python 3.7. The tests use \nformatted strings, which were introduced in 3.6.\n\nTo install:\n\n```\npip install short_stuff\n```\n\n## Quick Guide\n\nTo generate a short code:\n\n```\n>>> from short_stuff import gen_shortcode\n>>> gen_shortcode()\n'XtFxMb7qTJ-A'\n```\n\nTo turn this code into a UUID (such as for DB storage):\n\n```\n>>> from short_stuff import unslugify\n>>> unslugify('XtFxMb7qTJ-A')\nUUID('5ed17131-beea-4c9f-8000-000000000000')\n```\n\nNotice that this is a truncated [UUID](https://docs.python.org/3/library/uuid.html), with everything beyond the first\neight bytes zeroed out.\n\nTo turn the UUID back into a slug:\n\n```\n>>> from uuid import UUID\n>>> from short_stuff import slugify\n>>> slugify(UUID('5ed17131-beea-4c9f-8000-000000000000'))\n'XtFxMb7qTJ-A'\n```\n\n\n## Django\n\nFirst class support for Django is provided. Django must be installed to use these features.\nThe ShortCodeField model field is provided and is a special wrapper around UUIDField.\n\n```\nfrom django.db import models\nfrom short_stuff import gen_shortcode\nfrom short_stuff.django.models import ShortCodeField\n\n\nclass Doohickey(models.Model):\n    id = ShortCodeField(primary_key=True, db_index=True, default=gen_shortcode)\n\n```\n\nNote that in most cases you can pass UUIDs to the field and allow it to convert internally.\nThis might be helpful if converting existing models to use shortcodes. Migrations should go smoothly,\nbut please be sure to test!\n\n**NOTICE**: Use `gen_shortcode` and not `gen_shortcode()`! if you don't omit the parentheses, the function\nwill evaluate during the class definition and Django will attempt to set ALL new rows for the table with\nthat default.\n\nNow that you have the shortcodes on your models, you'll want to make it possible to refer to them in your URLs.\n\nTo do this, register the provided path converter:\n\n```\nfrom django.urls import path, register_converter\nfrom short_stuff import ShortCodeConverter\n\nfrom . import views\n\nregister_converter(converters.ShortCodeConverter, 'short_code')\n\nurlpatterns = [\n    path('doohickeys/<short_code:doohickey_id>/', views.doohickey_display),\n    ...\n]\n```\n\nYour view will then be handed the resulting shortcode string as an argument, for easy \nmodel lookup.\n\nAdditionally, a serializer field is provided for use with Django REST\nFramework (it must be installed to use this feature.)\n\n```\nfrom rest_framework.serializers import Serializer\nfrom short_stuff.django.serializers import ShortCodeField\n\nclass ShortCodeSerializer(Serializer):\n    test_field = ShortCodeField()\n```\n\n\n## FAQ\n\n> Is eight bytes enough randomness?\n\nYes.\n\n> Are you sure?\n\nIf you're building something that needs more, you won't wonder. You'll know. \nAnd you'll have money to make it happen right. Hint: YouTube's using eight bytes.\n\n> Ok, but a collision could happen, right? What do I do then?\n\nYour database should prevent the row from being inserted for you. Let it fail-- the cost of adding \ncomplexity rather than having the user resubmit a request for a 1 in 2^34 chance of a clash \nis not worth it.\n\n> What if I don't need UUIDs, or I'd prefer to use integers, or byte strings?\n\nThankfully, [Python's UUID objects](https://docs.python.org/3/library/uuid.html#uuid.UUID.bytes) have properties on \nthem that allow you to retrieve their values in the forms of strings, integers, bytes, etc. In most cases, converting\nto your desired format is one more line of code.\n\n> I'd like to use a different number of bytes than the default 8 that `gen_shortcode` provides.\n\nYou can specify the number of bytes you want to use as an argument, like this:\n\n```\n>>> from short_stuff import gen_shortcode\n>>> gen_shortcode(10)\n'_WMWaDe4RsauOQ'\n```\n\n## Testing\n\nTo run tests, run the following from the repository root:\n\n```\npip install -r testing_requirements.txt\npip install -e .\npytest\n```\n\n## Special Thanks\n\nSpecial thanks to [KathTheDragon](https://github.com/KathTheDragon/) for helping me figure out the \nprobability of collisions.\n\nAnd to Amber, the love of my life, for putting up with me nerding \nout while I stepped through what this library does.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Artconomy/short_stuff/archive/1.0.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Artconomy/short_stuff", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "short-stuff", "package_url": "https://pypi.org/project/short-stuff/", "platform": "", "project_url": "https://pypi.org/project/short-stuff/", "project_urls": {"Download": "https://github.com/Artconomy/short_stuff/archive/1.0.2.tar.gz", "Homepage": "https://github.com/Artconomy/short_stuff"}, "release_url": "https://pypi.org/project/short-stuff/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Set of utilities for managing unique shortcodes.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Short Stuff</h1>\n<p>By Fox at <a href=\"https://artconomy.com/\" rel=\"nofollow\">Artconomy.com</a>.</p>\n<p>Short Stuff is a set of helper functions used for generating short unique identifiers, such as those used\nin YouTube video IDs or in URL shorteners.</p>\n<p>Short Stuff does this by generating random byte strings, running them through base64 encoding and\nthen doing some cleanup for compatibility.</p>\n<p>Most distinct about the methodology is that it piggy-backs on UUIDs. That means that if you want to leverage your\ndatabase or library's native UUID support, you can do so, and helper functions are\nprovided for this.</p>\n<hr>\n<h2>Installation</h2>\n<p>Short Stuff requires (at least) Python 3.5. It has only been tested on Python 3.7. The tests use\nformatted strings, which were introduced in 3.6.</p>\n<p>To install:</p>\n<pre><code>pip install short_stuff\n</code></pre>\n<h2>Quick Guide</h2>\n<p>To generate a short code:</p>\n<pre><code>&gt;&gt;&gt; from short_stuff import gen_shortcode\n&gt;&gt;&gt; gen_shortcode()\n'XtFxMb7qTJ-A'\n</code></pre>\n<p>To turn this code into a UUID (such as for DB storage):</p>\n<pre><code>&gt;&gt;&gt; from short_stuff import unslugify\n&gt;&gt;&gt; unslugify('XtFxMb7qTJ-A')\nUUID('5ed17131-beea-4c9f-8000-000000000000')\n</code></pre>\n<p>Notice that this is a truncated <a href=\"https://docs.python.org/3/library/uuid.html\" rel=\"nofollow\">UUID</a>, with everything beyond the first\neight bytes zeroed out.</p>\n<p>To turn the UUID back into a slug:</p>\n<pre><code>&gt;&gt;&gt; from uuid import UUID\n&gt;&gt;&gt; from short_stuff import slugify\n&gt;&gt;&gt; slugify(UUID('5ed17131-beea-4c9f-8000-000000000000'))\n'XtFxMb7qTJ-A'\n</code></pre>\n<h2>Django</h2>\n<p>First class support for Django is provided. Django must be installed to use these features.\nThe ShortCodeField model field is provided and is a special wrapper around UUIDField.</p>\n<pre><code>from django.db import models\nfrom short_stuff import gen_shortcode\nfrom short_stuff.django.models import ShortCodeField\n\n\nclass Doohickey(models.Model):\n    id = ShortCodeField(primary_key=True, db_index=True, default=gen_shortcode)\n\n</code></pre>\n<p>Note that in most cases you can pass UUIDs to the field and allow it to convert internally.\nThis might be helpful if converting existing models to use shortcodes. Migrations should go smoothly,\nbut please be sure to test!</p>\n<p><strong>NOTICE</strong>: Use <code>gen_shortcode</code> and not <code>gen_shortcode()</code>! if you don't omit the parentheses, the function\nwill evaluate during the class definition and Django will attempt to set ALL new rows for the table with\nthat default.</p>\n<p>Now that you have the shortcodes on your models, you'll want to make it possible to refer to them in your URLs.</p>\n<p>To do this, register the provided path converter:</p>\n<pre><code>from django.urls import path, register_converter\nfrom short_stuff import ShortCodeConverter\n\nfrom . import views\n\nregister_converter(converters.ShortCodeConverter, 'short_code')\n\nurlpatterns = [\n    path('doohickeys/&lt;short_code:doohickey_id&gt;/', views.doohickey_display),\n    ...\n]\n</code></pre>\n<p>Your view will then be handed the resulting shortcode string as an argument, for easy\nmodel lookup.</p>\n<p>Additionally, a serializer field is provided for use with Django REST\nFramework (it must be installed to use this feature.)</p>\n<pre><code>from rest_framework.serializers import Serializer\nfrom short_stuff.django.serializers import ShortCodeField\n\nclass ShortCodeSerializer(Serializer):\n    test_field = ShortCodeField()\n</code></pre>\n<h2>FAQ</h2>\n<blockquote>\n<p>Is eight bytes enough randomness?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>Are you sure?</p>\n</blockquote>\n<p>If you're building something that needs more, you won't wonder. You'll know.\nAnd you'll have money to make it happen right. Hint: YouTube's using eight bytes.</p>\n<blockquote>\n<p>Ok, but a collision could happen, right? What do I do then?</p>\n</blockquote>\n<p>Your database should prevent the row from being inserted for you. Let it fail-- the cost of adding\ncomplexity rather than having the user resubmit a request for a 1 in 2^34 chance of a clash\nis not worth it.</p>\n<blockquote>\n<p>What if I don't need UUIDs, or I'd prefer to use integers, or byte strings?</p>\n</blockquote>\n<p>Thankfully, <a href=\"https://docs.python.org/3/library/uuid.html#uuid.UUID.bytes\" rel=\"nofollow\">Python's UUID objects</a> have properties on\nthem that allow you to retrieve their values in the forms of strings, integers, bytes, etc. In most cases, converting\nto your desired format is one more line of code.</p>\n<blockquote>\n<p>I'd like to use a different number of bytes than the default 8 that <code>gen_shortcode</code> provides.</p>\n</blockquote>\n<p>You can specify the number of bytes you want to use as an argument, like this:</p>\n<pre><code>&gt;&gt;&gt; from short_stuff import gen_shortcode\n&gt;&gt;&gt; gen_shortcode(10)\n'_WMWaDe4RsauOQ'\n</code></pre>\n<h2>Testing</h2>\n<p>To run tests, run the following from the repository root:</p>\n<pre><code>pip install -r testing_requirements.txt\npip install -e .\npytest\n</code></pre>\n<h2>Special Thanks</h2>\n<p>Special thanks to <a href=\"https://github.com/KathTheDragon/\" rel=\"nofollow\">KathTheDragon</a> for helping me figure out the\nprobability of collisions.</p>\n<p>And to Amber, the love of my life, for putting up with me nerding\nout while I stepped through what this library does.</p>\n\n          </div>"}, "last_serial": 7116578, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4ba95e845fd7b760f8efa0c0a2e909b2", "sha256": "87a0a1c9345fbabd4e4d51aa36553850c68b99a972c53f909c73b546542009e3"}, "downloads": -1, "filename": "short_stuff-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4ba95e845fd7b760f8efa0c0a2e909b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11843, "upload_time": "2020-04-02T18:50:22", "upload_time_iso_8601": "2020-04-02T18:50:22.552389Z", "url": "https://files.pythonhosted.org/packages/44/9e/ae683967221f9ee24696a877bf037c060a981725aeb052674dfd5ca1d86e/short_stuff-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4915e37e7c10679fa6d4acbf33a94686", "sha256": "9ae0f9d7940e028914e59fe3ed2271736f67555721058c55ec799f8e3c68e20f"}, "downloads": -1, "filename": "short_stuff-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4915e37e7c10679fa6d4acbf33a94686", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11734, "upload_time": "2020-04-02T19:10:47", "upload_time_iso_8601": "2020-04-02T19:10:47.586649Z", "url": "https://files.pythonhosted.org/packages/ea/8b/9ad32c499d8622b705ad010787400dea3760bcafb125c0e006811927cbea/short_stuff-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "c23de751001edd4791dd122bb9e8a81d", "sha256": "d3acbb05575de7f1009a40668685fc0855f42ff3052461fafdd8dc39e67139bc"}, "downloads": -1, "filename": "short_stuff-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c23de751001edd4791dd122bb9e8a81d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11800, "upload_time": "2020-04-28T02:26:44", "upload_time_iso_8601": "2020-04-28T02:26:44.510542Z", "url": "https://files.pythonhosted.org/packages/7a/0c/e4d98ba379d1c157eb8e2f4217469e05c3c93b982d8709725e7b93369e5b/short_stuff-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c23de751001edd4791dd122bb9e8a81d", "sha256": "d3acbb05575de7f1009a40668685fc0855f42ff3052461fafdd8dc39e67139bc"}, "downloads": -1, "filename": "short_stuff-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c23de751001edd4791dd122bb9e8a81d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11800, "upload_time": "2020-04-28T02:26:44", "upload_time_iso_8601": "2020-04-28T02:26:44.510542Z", "url": "https://files.pythonhosted.org/packages/7a/0c/e4d98ba379d1c157eb8e2f4217469e05c3c93b982d8709725e7b93369e5b/short_stuff-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:39 2020"}