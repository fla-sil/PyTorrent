{"info": {"author": "Steinwurf ApS", "author_email": "contact@steinwurf.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Plugins", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Software Development :: Testing"], "description": "============\nIntroduction\n============\n\n.. image:: https://badge.fury.io/py/pytest-vagrant.svg\n    :target: https://badge.fury.io/py/pytest-vagrant\n\npytest-vagrant provides a py.test fixture for working with vagrant\nin pytest.\n\n.. contents:: Table of Contents:\n   :local:\n\nInstallation\n============\n\nTo install pytest-vagrant::\n\n    pip install pytest-vagrant\n\nUsage\n=====\n\nTo make it easy to use in with `pytest` the Vagrant object can be\ninjected into a test function by using the vagrant fixture.\n\nExample::\n\n    def test_run_fail(vagrant):\n        machine = vagrant.from_box(\n            box=\"hashicorp/bionic64\", name=\"pytest_vagrant\", reset=False)\n\n        with machine.ssh() as ssh:\n            ssh.run(\"some_command\")\n\nThe ``vagrant`` argument is an instance of Vagrant and represents the\nvagrant environment on the machine running the test code.\n\n\nRelase new version\n==================\n\n1. Edit NEWS.rst and wscript (set correct VERSION)\n2. Run ::\n\n    ./waf upload\n\nSource code\n===========\n\nThe main functionality is found in ``src/vagrant.py`` and the\ncorresponding unit test is in ``test/test_vagrant.py`` if you\nwant to play/modify/fix the code this would, in most cases, be the place\nto start.\n\nDeveloper Notes\n===============\n\nWe try to make our projects as independent as possible of a local system setup.\nFor example with our native code (C/C++) we compile as much as possible from\nsource, since this makes us independent of what is currently installed\n(libraries etc.) on a specific machine.\n\nTo \"fetch\" sources we use Waf (https://waf.io/) augmented with dependency\nresolution capabilities: https://github.com/steinwurf/waf\n\nThe goal is to enable a work-flow where running::\n\n    ./waf configure\n    ./waf build --run_tests\n\nConfigures, builds and runs any available tests for a given project, such that\nyou as a developer can start hacking at the code.\n\nFor Python project this is a bit unconventional, but we think it works well.\n\nTests\n=====\n\nThe tests will run automatically by passing ``--run_tests`` to waf::\n\n    ./waf --run_tests\n\nThis follows what seems to be \"best practice\" advise, namely to install the\npackage in editable mode in a virtualenv.\n\nNotes\n=====\n\n* Why use an ``src`` folder (https://hynek.me/articles/testing-packaging/).\n  tl;dr you should run your tests in the same environment as your users would\n  run your code. So by placing the source files in a non-importable folder you\n  avoid accidentally having access to resources not added to the Python\n  package your users will install...\n* Python packaging guide: https://packaging.python.org/distributing/\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/steinwurf/pytest-vagrant", "keywords": "pytest py.test testing unit tests plugin vagrant", "license": "BSD 3-clause \"New\" or \"Revised\" License", "maintainer": "", "maintainer_email": "", "name": "pytest-vagrant", "package_url": "https://pypi.org/project/pytest-vagrant/", "platform": "", "project_url": "https://pypi.org/project/pytest-vagrant/", "project_urls": {"Homepage": "https://github.com/steinwurf/pytest-vagrant"}, "release_url": "https://pypi.org/project/pytest-vagrant/2.0.3/", "requires_dist": ["pytest", "paramiko", "python-slugify"], "requires_python": "", "summary": "A py.test plugin providing access to vagrant.", "version": "2.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/pytest-vagrant\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pytest-vagrant.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af333739f041495d0d67df513cec4a09a127a143/68747470733a2f2f62616467652e667572792e696f2f70792f7079746573742d76616772616e742e737667\"></a>\n<p>pytest-vagrant provides a py.test fixture for working with vagrant\nin pytest.</p>\n<div id=\"table-of-contents\">\n<p>Table of Contents:</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#relase-new-version\" id=\"id3\" rel=\"nofollow\">Relase new version</a></li>\n<li><a href=\"#source-code\" id=\"id4\" rel=\"nofollow\">Source code</a></li>\n<li><a href=\"#developer-notes\" id=\"id5\" rel=\"nofollow\">Developer Notes</a></li>\n<li><a href=\"#tests\" id=\"id6\" rel=\"nofollow\">Tests</a></li>\n<li><a href=\"#notes\" id=\"id7\" rel=\"nofollow\">Notes</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<p>To install pytest-vagrant:</p>\n<pre>pip install pytest-vagrant\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<p>To make it easy to use in with <cite>pytest</cite> the Vagrant object can be\ninjected into a test function by using the vagrant fixture.</p>\n<p>Example:</p>\n<pre>def test_run_fail(vagrant):\n    machine = vagrant.from_box(\n        box=\"hashicorp/bionic64\", name=\"pytest_vagrant\", reset=False)\n\n    with machine.ssh() as ssh:\n        ssh.run(\"some_command\")\n</pre>\n<p>The <tt>vagrant</tt> argument is an instance of Vagrant and represents the\nvagrant environment on the machine running the test code.</p>\n</div>\n<div id=\"relase-new-version\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Relase new version</a></h2>\n<ol>\n<li><p>Edit NEWS.rst and wscript (set correct VERSION)</p>\n</li>\n<li><p>Run</p>\n<pre>./waf upload\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"source-code\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Source code</a></h2>\n<p>The main functionality is found in <tt>src/vagrant.py</tt> and the\ncorresponding unit test is in <tt>test/test_vagrant.py</tt> if you\nwant to play/modify/fix the code this would, in most cases, be the place\nto start.</p>\n</div>\n<div id=\"developer-notes\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Developer Notes</a></h2>\n<p>We try to make our projects as independent as possible of a local system setup.\nFor example with our native code (C/C++) we compile as much as possible from\nsource, since this makes us independent of what is currently installed\n(libraries etc.) on a specific machine.</p>\n<p>To \u201cfetch\u201d sources we use Waf (<a href=\"https://waf.io/\" rel=\"nofollow\">https://waf.io/</a>) augmented with dependency\nresolution capabilities: <a href=\"https://github.com/steinwurf/waf\" rel=\"nofollow\">https://github.com/steinwurf/waf</a></p>\n<p>The goal is to enable a work-flow where running:</p>\n<pre>./waf configure\n./waf build --run_tests\n</pre>\n<p>Configures, builds and runs any available tests for a given project, such that\nyou as a developer can start hacking at the code.</p>\n<p>For Python project this is a bit unconventional, but we think it works well.</p>\n</div>\n<div id=\"tests\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Tests</a></h2>\n<p>The tests will run automatically by passing <tt><span class=\"pre\">--run_tests</span></tt> to waf:</p>\n<pre>./waf --run_tests\n</pre>\n<p>This follows what seems to be \u201cbest practice\u201d advise, namely to install the\npackage in editable mode in a virtualenv.</p>\n</div>\n<div id=\"notes\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Notes</a></h2>\n<ul>\n<li>Why use an <tt>src</tt> folder (<a href=\"https://hynek.me/articles/testing-packaging/\" rel=\"nofollow\">https://hynek.me/articles/testing-packaging/</a>).\ntl;dr you should run your tests in the same environment as your users would\nrun your code. So by placing the source files in a non-importable folder you\navoid accidentally having access to resources not added to the Python\npackage your users will install\u2026</li>\n<li>Python packaging guide: <a href=\"https://packaging.python.org/distributing/\" rel=\"nofollow\">https://packaging.python.org/distributing/</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6865124, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "0579ac65296e4f047bb2fe54c0638658", "sha256": "ee5c7cf55d50234a8cfe84dabb5feff75408b220ded283d6d1e0f802ec17314b"}, "downloads": -1, "filename": "pytest_vagrant-0.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0579ac65296e4f047bb2fe54c0638658", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5979, "upload_time": "2018-06-21T08:40:53", "upload_time_iso_8601": "2018-06-21T08:40:53.031537Z", "url": "https://files.pythonhosted.org/packages/10/1e/4b7edba4d1484f75a3429793a80ff2230272ea41d40d8983acffd2f9e304/pytest_vagrant-0.0.0-py2.py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "9891dcdd9cf13aedf7abb6ac14f8dd12", "sha256": "472a367740aa6cee7a9e6cdfad8205354ac396ab7d1db0223af1e6559f4e5843"}, "downloads": -1, "filename": "pytest_vagrant-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9891dcdd9cf13aedf7abb6ac14f8dd12", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6622, "upload_time": "2018-06-21T14:02:35", "upload_time_iso_8601": "2018-06-21T14:02:35.365416Z", "url": "https://files.pythonhosted.org/packages/b3/94/3c44e66344ad23fe7296cffcd974281adce7358a104626f2993638a23952/pytest_vagrant-1.0.0-py2.py3-none-any.whl", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "b804ee010b8eae285d2fb663a1904071", "sha256": "33d89f0a8654ba32d1008f96aaf371a113d27db2cdf109585880eeeb7832f68f"}, "downloads": -1, "filename": "pytest_vagrant-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b804ee010b8eae285d2fb663a1904071", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13165, "upload_time": "2020-03-08T21:58:43", "upload_time_iso_8601": "2020-03-08T21:58:43.012410Z", "url": "https://files.pythonhosted.org/packages/fd/1c/2691b8e4fd0625c0f3e0b0af049ebef6b37e96a115a7024e57ac9ed01fd4/pytest_vagrant-2.0.0-py2.py3-none-any.whl", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "2b4e60de37ba5c3f8dde6c2ffba9248f", "sha256": "cbd57ea238fb9935e9c335047bbdc371cb8cb2a43d2b2d0f1435ca67a7957abe"}, "downloads": -1, "filename": "pytest_vagrant-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2b4e60de37ba5c3f8dde6c2ffba9248f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13166, "upload_time": "2020-03-09T09:13:42", "upload_time_iso_8601": "2020-03-09T09:13:42.804553Z", "url": "https://files.pythonhosted.org/packages/7c/54/b79612c1bcf546745e80ac00e8a92ae5774a83f436ca0665944cbcd0f087/pytest_vagrant-2.0.1-py2.py3-none-any.whl", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "c3b106694d255a265110c9679e6896cd", "sha256": "c02bb45b556b8be3ba7e934b17275f22abb5878692fbb58fea5d14ea937451e4"}, "downloads": -1, "filename": "pytest_vagrant-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c3b106694d255a265110c9679e6896cd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13266, "upload_time": "2020-03-21T06:42:49", "upload_time_iso_8601": "2020-03-21T06:42:49.277564Z", "url": "https://files.pythonhosted.org/packages/91/ea/756c25b76d503c546dddb47c7da5be0e986c90258ffa5c6cd15bf595ffd8/pytest_vagrant-2.0.2-py2.py3-none-any.whl", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "9a2eff7f11ab30073cdf803ecfa4ef0f", "sha256": "f038c2b78443cf260ae3ccc49004b4731661d07e1bceb8314a81746ff02f4643"}, "downloads": -1, "filename": "pytest_vagrant-2.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9a2eff7f11ab30073cdf803ecfa4ef0f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13526, "upload_time": "2020-03-23T12:22:20", "upload_time_iso_8601": "2020-03-23T12:22:20.744158Z", "url": "https://files.pythonhosted.org/packages/fd/84/76552df3656e61b6f6175eaaecb7345faa72aa5b4fd86955ac746cc333c1/pytest_vagrant-2.0.3-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9a2eff7f11ab30073cdf803ecfa4ef0f", "sha256": "f038c2b78443cf260ae3ccc49004b4731661d07e1bceb8314a81746ff02f4643"}, "downloads": -1, "filename": "pytest_vagrant-2.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9a2eff7f11ab30073cdf803ecfa4ef0f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13526, "upload_time": "2020-03-23T12:22:20", "upload_time_iso_8601": "2020-03-23T12:22:20.744158Z", "url": "https://files.pythonhosted.org/packages/fd/84/76552df3656e61b6f6175eaaecb7345faa72aa5b4fd86955ac746cc333c1/pytest_vagrant-2.0.3-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:36 2020"}