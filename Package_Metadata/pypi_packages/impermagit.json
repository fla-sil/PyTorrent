{"info": {"author": "Edmund Jorgensen", "author_email": "edmund@hut8labs.com", "bugtrack_url": null, "classifiers": [], "description": "==========\nImpermagit\n==========\n\nImpermagit makes it easier to test python programs that use /\nintegrate with git.  For example::\n\n    from impermagit import fleeting_repo\n\n    with fleeting_repo() as repo:\n        # there is not a git repo created in a temporary dir\n        # somewhere, allowing you to do things like:\n\n        # add some files with some contents and commit them\n        repo.commit([('test.txt', 'test contents\\n'),\n                     ('subdir/test2.txt', 'other contents\\n')])\n\n        # update contents\n        repo.commit([('test.txt', 'new test contents\\n')])\n\n        # git rm files by passing None as contents\n        repo.commit([('subdir/test.txt', None)])\n\n        # run arbitrary git cmds in the repo when you don't care\n        # about the output (will raise a GitExeException if it\n        # fails)\n        repo.do_git([\"rm\", \"some-other-file.txt\"])\n\n        # run arbitrary git cmds in the repo and get back\n        # stdout / stderr.\n        with repo.yield_git([\"log\"]) as (out, err):\n            print out.read()\n            print err.read()\n\n     # and here, the repo is gone and the temporary dir deleted.\n\nYou can also create a Repo object directly, if you'd prefer to control\nthe lifecycle more closely::\n\n    from imperagit import Repo\n\n    repo = Repo('/some/dir/you/manage')\n\nBy default, Imperagit uses \"/usr/bin/env git\" as the git executable,\nbut this can be overridden with the git_exe arg to both fleeting_repo\nand Repo.\n\nYou can see more detailed docs with the interactive help::\n\n    >>> import impermagit\n    >>> help(impermagit)\n\nImpermagit requires Python 2.6+, and has not been tested with Python\n3.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/impermagit/", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "impermagit", "package_url": "https://pypi.org/project/impermagit/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/impermagit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/impermagit/"}, "release_url": "https://pypi.org/project/impermagit/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Create temporary git repos in python.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Impermagit makes it easier to test python programs that use /\nintegrate with git.  For example:</p>\n<pre>from impermagit import fleeting_repo\n\nwith fleeting_repo() as repo:\n    # there is not a git repo created in a temporary dir\n    # somewhere, allowing you to do things like:\n\n    # add some files with some contents and commit them\n    repo.commit([('test.txt', 'test contents\\n'),\n                 ('subdir/test2.txt', 'other contents\\n')])\n\n    # update contents\n    repo.commit([('test.txt', 'new test contents\\n')])\n\n    # git rm files by passing None as contents\n    repo.commit([('subdir/test.txt', None)])\n\n    # run arbitrary git cmds in the repo when you don't care\n    # about the output (will raise a GitExeException if it\n    # fails)\n    repo.do_git([\"rm\", \"some-other-file.txt\"])\n\n    # run arbitrary git cmds in the repo and get back\n    # stdout / stderr.\n    with repo.yield_git([\"log\"]) as (out, err):\n        print out.read()\n        print err.read()\n\n # and here, the repo is gone and the temporary dir deleted.\n</pre>\n<p>You can also create a Repo object directly, if you\u2019d prefer to control\nthe lifecycle more closely:</p>\n<pre>from imperagit import Repo\n\nrepo = Repo('/some/dir/you/manage')\n</pre>\n<p>By default, Imperagit uses \u201c/usr/bin/env git\u201d as the git executable,\nbut this can be overridden with the git_exe arg to both fleeting_repo\nand Repo.</p>\n<p>You can see more detailed docs with the interactive help:</p>\n<pre>&gt;&gt;&gt; import impermagit\n&gt;&gt;&gt; help(impermagit)\n</pre>\n<p>Impermagit requires Python 2.6+, and has not been tested with Python\n3.</p>\n\n          </div>"}, "last_serial": 793232, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "aba8280b9e03bf7ac51a50f5bad2f0b8", "sha256": "70558f150c2e3cd92bf65f9cb1dedf2a9c6bc1599a8cbf1c17d56ed009bafb36"}, "downloads": -1, "filename": "impermagit-1.0.0.tar.gz", "has_sig": false, "md5_digest": "aba8280b9e03bf7ac51a50f5bad2f0b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6895, "upload_time": "2013-04-25T20:21:07", "upload_time_iso_8601": "2013-04-25T20:21:07.925732Z", "url": "https://files.pythonhosted.org/packages/b9/66/afe652c2deceef84b2937e45c3ab6bef8baed475b37e0a7263b505b148e0/impermagit-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aba8280b9e03bf7ac51a50f5bad2f0b8", "sha256": "70558f150c2e3cd92bf65f9cb1dedf2a9c6bc1599a8cbf1c17d56ed009bafb36"}, "downloads": -1, "filename": "impermagit-1.0.0.tar.gz", "has_sig": false, "md5_digest": "aba8280b9e03bf7ac51a50f5bad2f0b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6895, "upload_time": "2013-04-25T20:21:07", "upload_time_iso_8601": "2013-04-25T20:21:07.925732Z", "url": "https://files.pythonhosted.org/packages/b9/66/afe652c2deceef84b2937e45c3ab6bef8baed475b37e0a7263b505b148e0/impermagit-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:34 2020"}