{"info": {"author": "@nezlooy", "author_email": "r.bazhin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python", "Topic :: Software Development :: Testing"], "description": "pyZZUF\r\n======\r\n\r\nPython implementation of bit-flip `zzuf`_ mutator.\r\n\r\nNo more ``os.system``, ``subprocess.check_output`` and\r\n``subprocess.Popen`` |:thumbsup:|\r\n\r\nBasic usage\r\n-----------\r\n\r\nInline\r\n~~~~~~\r\n\r\n.. code:: python\r\n\r\n    from pyZZUF import *\r\n\r\n    print pyZZUF('good').mutate()\r\n\r\nOptions\r\n~~~~~~~\r\n\r\n.. code:: python\r\n\r\n    from pyZZUF import *\r\n\r\n    zzuf = pyZZUF('good')\r\n\r\n    # Random seed (default 0)\r\n    zzuf.set_seed(9)\r\n    # Bit fuzzing ratio (default 0.004)\r\n    zzuf.set_ratio(0.91)\r\n\r\n    # Offsets and ranges\r\n    zzuf.set_offset(6)\r\n    # Only fuzz bytes at offsets within <ranges>\r\n    zzuf.set_fuzz_bytes([[0, 3], [6, EOF]])\r\n\r\n    # Protect bytes and characters in <list>\r\n    zzuf.set_protected([0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39])\r\n    # Append more bytes\r\n    zzuf.set_protected(\"0123456789\", True)\r\n\r\n    # Refuse bytes and characters in <list>\r\n    zzuf.set_refused(\"abcd\")\r\n    # Append more bytes\r\n    zzuf.set_refused([0x00, 0xFF], True)\r\n\r\n    # Permit bytes and characters in <list>\r\n    zzuf.set_permitted('bad')\r\n    # Append more bytes\r\n    zzuf.set_permitted('!', True)\r\n\r\n    # Fuzzing mode <mode> ([xor] set unset)\r\n    zzuf.set_fuzz_mode(FUZZ_MODE_XOR)\r\n\r\n    print zzuf.mutate()\r\n\r\nMutagen\r\n~~~~~~~\r\n\r\n.. code:: python\r\n\r\n    zzuf = pyZZUF('good')\r\n\r\n    for data in zzuf.mutagen(start=0.0, stop=1, step=0.1):\r\n        if __debug__:\r\n            seed, ratio, index = data.get_state()\r\n            print data.tostring().encode('hex'), seed, ratio, index\r\n        if data == 'bad!':\r\n            break\r\n\r\nInheritance of the previous state (meat)\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n.. code:: python\r\n\r\n    zzuf = pyZZUF('good')\r\n\r\n    for data in zzuf.mutagen(start=0.0, stop=1, step=0.1, inheritance=True):\r\n        if __debug__:\r\n            seed, ratio, index = data.get_state()\r\n            print data.tostring().encode('hex'), seed, ratio, index\r\n        if data == 'bad!':\r\n            break\r\n\r\nStream-generator with restoring state of mutator\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n.. code:: python\r\n\r\n    obj = pyZZUF('good')\r\n    gen = obj.mutagen(start=0.0, stop=1, step=0.01)\r\n\r\n    while True:\r\n        try:\r\n            data = gen.next()\r\n            seed, ratio, index = data.get_state()\r\n            \r\n            if __debug__:\r\n                print data.tostring().encode('hex'), seed, ratio, index\r\n\r\n            if seed == 20:\r\n                # Set next state of generator (<seed>, <ratio>).\r\n                # In this example, it makes an infinite loop!\r\n                gen.send((0, 0.0))\r\n\r\n            if data == 'bad!':\r\n                break\r\n        except StopIteration:\r\n            break\r\n\r\nCheck of identity\r\n-----------------\r\n\r\n.. code:: bash\r\n\r\n    $ echo -n \"The quick brown fox jumps over the lazy dog\" | zzuf -r0.04 | hd\r\n\r\n    00000000  54 68 65 20 71 75 69 63  6b 20 62 72 6f 57 6c 20  |The quick broWl |\r\n    00000010  66 4f 58 20 6a 75 6f 70  73 24 6f 76 75 72 20 74  |fOX juops$ovur t|\r\n    00000020  68 65 21 6c 61 7a 78 20  66 6f 67                 |he!lazx fog|\r\n    0000002b\r\n\r\n    $ python -c \"import pyZZUF, sys; sys.stdout.write(pyZZUF.pyZZUF('The quick brown fox jumps over the lazy dog', ratio=0.04).mutate().tostring())\" | hd\r\n\r\n    00000000  54 68 65 20 71 75 69 63  6b 20 62 72 6f 57 6c 20  |The quick broWl |\r\n    00000010  66 4f 58 20 6a 75 6f 70  73 24 6f 76 75 72 20 74  |fOX juops$ovur t|\r\n    00000020  68 65 21 6c 61 7a 78 20  66 6f 67                 |he!lazx fog|\r\n    0000002b\r\n\r\nInstallation\r\n------------\r\n\r\n    pip install pyZZUF\r\n\r\nNotes\\*\r\n-------\r\n\r\nUse `PyPy`_ for speedup\r\n\r\n.. _PyPy: http://pypy.org/\r\n\r\n.. _zzuf: http://caca.zoy.org/wiki/zzuf\r\n\r\n.. |:thumbsup:| image:: https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\r\n   :height: 20px\r\n   :width: 20px", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nezlooy/pyZZUF", "keywords": "fuzzer zzuf mutator", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "pyZZUF", "package_url": "https://pypi.org/project/pyZZUF/", "platform": "POSIX,Windows", "project_url": "https://pypi.org/project/pyZZUF/", "project_urls": {"Homepage": "https://github.com/nezlooy/pyZZUF"}, "release_url": "https://pypi.org/project/pyZZUF/0.1/", "requires_dist": null, "requires_python": null, "summary": "Python implementation of zzuf mutator - little bit-flip atomic bomb", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python implementation of bit-flip <a href=\"http://caca.zoy.org/wiki/zzuf\" rel=\"nofollow\">zzuf</a> mutator.</p>\n<p>No more <tt>os.system</tt>, <tt>subprocess.check_output</tt> and\n<tt>subprocess.Popen</tt> <img alt=\":thumbsup:\" height=\"20px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1667740e887698cec615b9a3cde3c2828828bfc0/68747470733a2f2f6173736574732d63646e2e6769746875622e636f6d2f696d616765732f69636f6e732f656d6f6a692f756e69636f64652f31663434642e706e67\" width=\"20px\"></p>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<div id=\"inline\">\n<h3>Inline</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyZZUF</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">pyZZUF</span><span class=\"p\">(</span><span class=\"s1\">'good'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mutate</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"options\">\n<h3>Options</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyZZUF</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">zzuf</span> <span class=\"o\">=</span> <span class=\"n\">pyZZUF</span><span class=\"p\">(</span><span class=\"s1\">'good'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Random seed (default 0)</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_seed</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"c1\"># Bit fuzzing ratio (default 0.004)</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_ratio</span><span class=\"p\">(</span><span class=\"mf\">0.91</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Offsets and ranges</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_offset</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"c1\"># Only fuzz bytes at offsets within &lt;ranges&gt;</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_fuzz_bytes</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">EOF</span><span class=\"p\">]])</span>\n\n<span class=\"c1\"># Protect bytes and characters in &lt;list&gt;</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_protected</span><span class=\"p\">([</span><span class=\"mh\">0x30</span><span class=\"p\">,</span> <span class=\"mh\">0x31</span><span class=\"p\">,</span> <span class=\"mh\">0x32</span><span class=\"p\">,</span> <span class=\"mh\">0x33</span><span class=\"p\">,</span> <span class=\"mh\">0x34</span><span class=\"p\">,</span> <span class=\"mh\">0x35</span><span class=\"p\">,</span> <span class=\"mh\">0x36</span><span class=\"p\">,</span> <span class=\"mh\">0x37</span><span class=\"p\">,</span> <span class=\"mh\">0x38</span><span class=\"p\">,</span> <span class=\"mh\">0x39</span><span class=\"p\">])</span>\n<span class=\"c1\"># Append more bytes</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_protected</span><span class=\"p\">(</span><span class=\"s2\">\"0123456789\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Refuse bytes and characters in &lt;list&gt;</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_refused</span><span class=\"p\">(</span><span class=\"s2\">\"abcd\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Append more bytes</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_refused</span><span class=\"p\">([</span><span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"mh\">0xFF</span><span class=\"p\">],</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Permit bytes and characters in &lt;list&gt;</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_permitted</span><span class=\"p\">(</span><span class=\"s1\">'bad'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Append more bytes</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_permitted</span><span class=\"p\">(</span><span class=\"s1\">'!'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fuzzing mode &lt;mode&gt; ([xor] set unset)</span>\n<span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">set_fuzz_mode</span><span class=\"p\">(</span><span class=\"n\">FUZZ_MODE_XOR</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">mutate</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"mutagen\">\n<h3>Mutagen</h3>\n<pre><span class=\"n\">zzuf</span> <span class=\"o\">=</span> <span class=\"n\">pyZZUF</span><span class=\"p\">(</span><span class=\"s1\">'good'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">mutagen</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">__debug__</span><span class=\"p\">:</span>\n        <span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_state</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'hex'</span><span class=\"p\">),</span> <span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">index</span>\n    <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"s1\">'bad!'</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n</pre>\n</div>\n<div id=\"inheritance-of-the-previous-state-meat\">\n<h3>Inheritance of the previous state (meat)</h3>\n<pre><span class=\"n\">zzuf</span> <span class=\"o\">=</span> <span class=\"n\">pyZZUF</span><span class=\"p\">(</span><span class=\"s1\">'good'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">zzuf</span><span class=\"o\">.</span><span class=\"n\">mutagen</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">inheritance</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">__debug__</span><span class=\"p\">:</span>\n        <span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_state</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'hex'</span><span class=\"p\">),</span> <span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">index</span>\n    <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"s1\">'bad!'</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n</pre>\n</div>\n<div id=\"stream-generator-with-restoring-state-of-mutator\">\n<h3>Stream-generator with restoring state of mutator</h3>\n<pre><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">pyZZUF</span><span class=\"p\">(</span><span class=\"s1\">'good'</span><span class=\"p\">)</span>\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">mutagen</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span>\n        <span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_state</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">__debug__</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'hex'</span><span class=\"p\">),</span> <span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">index</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">seed</span> <span class=\"o\">==</span> <span class=\"mi\">20</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Set next state of generator (&lt;seed&gt;, &lt;ratio&gt;).</span>\n            <span class=\"c1\"># In this example, it makes an infinite loop!</span>\n            <span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"s1\">'bad!'</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n    <span class=\"k\">except</span> <span class=\"ne\">StopIteration</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n</pre>\n</div>\n</div>\n<div id=\"check-of-identity\">\n<h2>Check of identity</h2>\n<pre>$ <span class=\"nb\">echo</span> -n <span class=\"s2\">\"The quick brown fox jumps over the lazy dog\"</span> <span class=\"p\">|</span> zzuf -r0.04 <span class=\"p\">|</span> hd\n\n<span class=\"m\">00000000</span>  <span class=\"m\">54</span> <span class=\"m\">68</span> <span class=\"m\">65</span> <span class=\"m\">20</span> <span class=\"m\">71</span> <span class=\"m\">75</span> <span class=\"m\">69</span> <span class=\"m\">63</span>  6b <span class=\"m\">20</span> <span class=\"m\">62</span> <span class=\"m\">72</span> 6f <span class=\"m\">57</span> 6c <span class=\"m\">20</span>  <span class=\"p\">|</span>The quick broWl <span class=\"p\">|</span>\n<span class=\"m\">00000010</span>  <span class=\"m\">66</span> 4f <span class=\"m\">58</span> <span class=\"m\">20</span> 6a <span class=\"m\">75</span> 6f <span class=\"m\">70</span>  <span class=\"m\">73</span> <span class=\"m\">24</span> 6f <span class=\"m\">76</span> <span class=\"m\">75</span> <span class=\"m\">72</span> <span class=\"m\">20</span> <span class=\"m\">74</span>  <span class=\"p\">|</span>fOX juops<span class=\"nv\">$ovur</span> t<span class=\"p\">|</span>\n<span class=\"m\">00000020</span>  <span class=\"m\">68</span> <span class=\"m\">65</span> <span class=\"m\">21</span> 6c <span class=\"m\">61</span> 7a <span class=\"m\">78</span> <span class=\"m\">20</span>  <span class=\"m\">66</span> 6f <span class=\"m\">67</span>                 <span class=\"p\">|</span>he!lazx fog<span class=\"p\">|</span>\n0000002b\n\n$ python -c <span class=\"s2\">\"import pyZZUF, sys; sys.stdout.write(pyZZUF.pyZZUF('The quick brown fox jumps over the lazy dog', ratio=0.04).mutate().tostring())\"</span> <span class=\"p\">|</span> hd\n\n<span class=\"m\">00000000</span>  <span class=\"m\">54</span> <span class=\"m\">68</span> <span class=\"m\">65</span> <span class=\"m\">20</span> <span class=\"m\">71</span> <span class=\"m\">75</span> <span class=\"m\">69</span> <span class=\"m\">63</span>  6b <span class=\"m\">20</span> <span class=\"m\">62</span> <span class=\"m\">72</span> 6f <span class=\"m\">57</span> 6c <span class=\"m\">20</span>  <span class=\"p\">|</span>The quick broWl <span class=\"p\">|</span>\n<span class=\"m\">00000010</span>  <span class=\"m\">66</span> 4f <span class=\"m\">58</span> <span class=\"m\">20</span> 6a <span class=\"m\">75</span> 6f <span class=\"m\">70</span>  <span class=\"m\">73</span> <span class=\"m\">24</span> 6f <span class=\"m\">76</span> <span class=\"m\">75</span> <span class=\"m\">72</span> <span class=\"m\">20</span> <span class=\"m\">74</span>  <span class=\"p\">|</span>fOX juops<span class=\"nv\">$ovur</span> t<span class=\"p\">|</span>\n<span class=\"m\">00000020</span>  <span class=\"m\">68</span> <span class=\"m\">65</span> <span class=\"m\">21</span> 6c <span class=\"m\">61</span> 7a <span class=\"m\">78</span> <span class=\"m\">20</span>  <span class=\"m\">66</span> 6f <span class=\"m\">67</span>                 <span class=\"p\">|</span>he!lazx fog<span class=\"p\">|</span>\n0000002b\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\npip install pyZZUF</blockquote>\n</div>\n<div id=\"notes\">\n<h2>Notes*</h2>\n<p>Use <a href=\"http://pypy.org/\" rel=\"nofollow\">PyPy</a> for speedup</p>\n</div>\n\n          </div>"}, "last_serial": 5479199, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9f8caee836fa0aee0d8cfeb12ab2fed9", "sha256": "cc27fd45e2b8127aa13e409c1b79379f5fa07bda9de3b21d65b6cbc1ca05bb3e"}, "downloads": -1, "filename": "pyZZUF-0.1-py2.7.egg", "has_sig": false, "md5_digest": "9f8caee836fa0aee0d8cfeb12ab2fed9", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 8033, "upload_time": "2014-11-04T22:08:10", "upload_time_iso_8601": "2014-11-04T22:08:10.703732Z", "url": "https://files.pythonhosted.org/packages/d3/80/c6db42e65c2c7c2fe4cb547716f51e4005f194e2974e498094bd4087f758/pyZZUF-0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6209888d7003430ec644eaace37eac2b", "sha256": "06614a6dc9dc6136ac27ff8ac773454709fb21a285359c16ee4e058e128a941d"}, "downloads": -1, "filename": "pyZZUF-0.1-py2.7.tar.gz", "has_sig": false, "md5_digest": "6209888d7003430ec644eaace37eac2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4344, "upload_time": "2014-11-04T23:40:15", "upload_time_iso_8601": "2014-11-04T23:40:15.546996Z", "url": "https://files.pythonhosted.org/packages/88/e3/b90b1fe2a6bf9a67a9da297185d82b24c7c5d911b58618272445b1278c5d/pyZZUF-0.1-py2.7.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "78ced9264d2658d110691ccfbe4dc61d", "sha256": "ba393f731a145b00f4cf03ac227bebde0c47238a616f27b671f3a2f4a29b4480"}, "downloads": -1, "filename": "pyZZUF-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "78ced9264d2658d110691ccfbe4dc61d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4320, "upload_time": "2019-07-03T02:28:19", "upload_time_iso_8601": "2019-07-03T02:28:19.123362Z", "url": "https://files.pythonhosted.org/packages/37/c4/76457104c8017a7ac1bc8d1e0ce04bb32384979a4023baa9d8be56315d90/pyZZUF-0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f8caee836fa0aee0d8cfeb12ab2fed9", "sha256": "cc27fd45e2b8127aa13e409c1b79379f5fa07bda9de3b21d65b6cbc1ca05bb3e"}, "downloads": -1, "filename": "pyZZUF-0.1-py2.7.egg", "has_sig": false, "md5_digest": "9f8caee836fa0aee0d8cfeb12ab2fed9", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 8033, "upload_time": "2014-11-04T22:08:10", "upload_time_iso_8601": "2014-11-04T22:08:10.703732Z", "url": "https://files.pythonhosted.org/packages/d3/80/c6db42e65c2c7c2fe4cb547716f51e4005f194e2974e498094bd4087f758/pyZZUF-0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6209888d7003430ec644eaace37eac2b", "sha256": "06614a6dc9dc6136ac27ff8ac773454709fb21a285359c16ee4e058e128a941d"}, "downloads": -1, "filename": "pyZZUF-0.1-py2.7.tar.gz", "has_sig": false, "md5_digest": "6209888d7003430ec644eaace37eac2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4344, "upload_time": "2014-11-04T23:40:15", "upload_time_iso_8601": "2014-11-04T23:40:15.546996Z", "url": "https://files.pythonhosted.org/packages/88/e3/b90b1fe2a6bf9a67a9da297185d82b24c7c5d911b58618272445b1278c5d/pyZZUF-0.1-py2.7.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "78ced9264d2658d110691ccfbe4dc61d", "sha256": "ba393f731a145b00f4cf03ac227bebde0c47238a616f27b671f3a2f4a29b4480"}, "downloads": -1, "filename": "pyZZUF-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "78ced9264d2658d110691ccfbe4dc61d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4320, "upload_time": "2019-07-03T02:28:19", "upload_time_iso_8601": "2019-07-03T02:28:19.123362Z", "url": "https://files.pythonhosted.org/packages/37/c4/76457104c8017a7ac1bc8d1e0ce04bb32384979a4023baa9d8be56315d90/pyZZUF-0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:10:23 2020"}