{"info": {"author": "Uli Fouquet", "author_email": "uli@gnufix.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: End Users/Desktop", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Security :: Cryptography", "Topic :: Utilities"], "description": "diceware-list\n=============\n\n|bdg-build| `sources <https://github.com/ulif/diceware-list>`_ | `issues <https://github.com/ulif/diceware-list/issues>`_\n\n.. |bdg-build| image:: https://travis-ci.org/ulif/diceware-list.svg?branch=master\n    :target: https://travis-ci.org/ulif/diceware-list\n    :alt: Build Status\n\nCreate and check wordlists for use with `diceware`_.\n\nThis is not a `diceware`_ implementation, but a helper to create and check\nappropriate wordlists.\n\nCurrently, we provide three scripts:\n\n  - `diceware-list` create wordlists based on input lists\n  - `wlflakes` checks existing wordlists for flaws\n  - `wldownload` downloads Android wordlists\n\n\nInstall\n--------\n\nInstall latest release from pypi_ ::\n\n  (venv) $ pip install diceware-list\n\nor clone repository from github::\n\n  $ git clone https://github.com/ulif/diceware-list.git\n\nPlease consider using `virtualenv`_ for deployment.\n\nIn an active `virtualenv` you can install an executable script of\n`diceware-list` running::\n\n  (venv) $ python setup.py install\n  (venv) $ diceware-list --help\n  usage: diceware-list [-h] [-l LENGTH] [-n] [--ascii] [-d SIDES] [-k]\n                       [--use-416] [-p {none,short,long}] [-v] [--version]\n                       DICTFILE [DICTFILE ...]\n\n\nCreate Wordlists: `diceware-list`\n---------------------------------\n\nThe `diceware-list` script creates new lists out of given ones::\n\n  $ diceware-list -n -l 7776 /usr/share/dict/words\n  11111 a\n  11112 a's\n  ...\n  12353 capt\n  12354 cara\n  12355 carl\n  ...\n  66663 zoos\n  66664 \u00e9clat\n  66665 \u00e9lan\n  66666 \u00e9p\u00e9e\n\nThe main target of `diceware-list` is to provide \"good\"\nwordlists. Wordlists are considered \"good\" if they\n\n- contain enough terms for use with a certain diceware application\n  (for instance 6^6 = 7776 terms if used with six six-sided dice)\n- contain terms as short as possible (to reduce typing)\n- (optionally) contain no words with non-ASCII chars (to enable use\n  with non-localized keyboards)\n- (optionally) are a `prefix code`_, i.e. no complete word in the list is\n  prefix of another word in the list.\n- contain no offending terms\n\nThe last topic is hard to solve technically (hints welcome!), but\n`diceware-list` can help to follow the other design rules.\n\nThe wordlists generated by `diceware-list` are not meant to be kept\nsecret. You might put them on the internet, publish on facebook or\nprint them in the New York Times. Instead the security of the\n`diceware`_ technique relies on the entropy or (in this case)\n\"randomness\" of your dice, computer, etc.\n\nIn other words: Your passphrases will not be safe because of hiding\nyour wordlist. They will be safe because there are so many possible\ncombinations of words you can pick from your wordlist. That means:\nlonger lists are more secure than shorter ones (if really used to full\nextent by your source of randomness with `diceware`_), but hidden\nlists are *not* more secure than public ones.\n\n\nUsage\n-----\n\nFirst, you need a file with words as \"dictionary\". On typical Debian\nsystems such files can be found in ``/usr/share/dicts/``.\n\nThis file can then be fed to `diceware-list` to create a wordlist\nsuitable for use with diceware.::\n\n  $ diceware-list /usr/share/dict/words\n  !\n  !!\n  !!!\n  ...\n  alan\n  alana\n  alar\n  ...\n  zzz\n  zzzz\n\nBy default all input words are filtered and output. Using the `-l` option you\ncan request a certain length of the output wordlist. If an input list provides\nmore terms than needed, we will pick a subset. If there are not enough terms in\nthe input list, an error is raised.\n\nWith `-n` you can tell `diceware-list` to put numbers into each line,\nrepresenting dice throws [#]_ ::\n\n\n  $ diceware_list -n -l 7776 /usr/share/dict/words\n  11111 !\n  11112 !!\n  ...\n  12353 alan\n  12354 alana\n  12355 alar\n  ...\n  66665 zzz\n  66666 zzzz\n\nIf you create a wordlist for use with non-standard dice, for instance for\n10-sided dice, then you can tell with `-d` like this::\n\n  $ diceware_list -n -d 10 -l 10000 /usr/share/dict/words\n  1-1-1-1 aol\n  1-1-1-2 aachen\n  1-1-1-3 aaron\n  ...\n  10-10-10-8 zoomed\n  10-10-10-9 zooms\n  10-10-10-10 zoos\n\nThe `--ascii` option filters terms out, that contain non-ASCII\ncharacters. This can help in generating non-english word lists that\nare usable with regular english keyboards.\n\nThe verbose option `--verbose` can be given multiple times to increase\nverbosity.\n\nSee `--help` for other options.\n\n`diceware-list` follows loosely the recommendations given on\nhttp://diceware.com/ by Mr. Reinhold.\n\n\nCheck wordlists: wlflakes\n-------------------------\n\nFind flakes in wordlists.\n\n::\n  $ wlflakes mywordlist.txt\n\nNo output means: no problems detected.\n\nWe can look for prefix flakes. I.e., we check, whether any line in the given\nfile is the beginning of any other line.\n\n::\n  $ cat wordlist.txt\n  air\n  port\n  airport\n\n  $ wlflakes wordlist.txt\n  wordlist.txt:3: E1 \"air\" from line 1 is a prefix of \"airport\"\n\n\nDouble entries are also shown:\n\n::\n  $ cat wordlist.txt\n  air\n  port\n  air\n\n  $ wlflakes wordlist.txt\n  wordlist.txt:1: E1 \"air\" from line 1 is a prefix of \"air\"\n  wordlist.txt:1: E2 \"air\" appears multiple times\n\n\nMore checks offered by `wlflakes`:\n\nWarnings:\n- show terms containing non-ASCII chars\n- too short list entries (that are easer to bruteforce than to guess)\n\n\n`wlflakes` supports also ``--help`` or ``-h`` to list all options supported.\n\n\nHandle Android wordlists: wldownload\n------------------------------------\n\nAndroid wordlists are a nice source for wordlists. They can be downloaded from\npublic repositories::\n\n  $ wldownload --raw -v\n  Starting download of Android wordlist file.\n  Fetching wordlist from https://android.googlesource.com/platform/pack...\n  Done.\n\n`wldownload` downloads these lists and helps to transform them into lists\nusable for diceware. Be aware, that terms from lists are output on stdout by\ndefault (and Android wordlists contain easily more than 100,000 terms)::\n\n  $ wldownload > mylist\n  $ cat mylist\n  the\n  to\n  ...\n  yt\n  yuk\n\nTerms are output on stdout by default (use shell redirects or ``--outfile`` to\nchange that behaviour).\n\nYou can request non-english wordlists using ``--lang`` or ``-l`` with a\nlanguage code like ``cs`` or ``de``. Use ``--lang-codes`` to list all supported\nlanguage codes.\n\nThe ``--no-offensive`` flag suppresses terms marked as possibly offensive.\n\n\n\nTesting\n-------\n\nIn a clone of the sources you can run tests like this::\n\n  (venv) $ python setup.py test\n\nThis command will download all required packages, especially\n`py.test`_.\n\nYou can also install `py.test`_ manually with `pip`_::\n\n  (venv)$ pip install pytest\n  (venv)$ pip install -e .\n\nand afterwards run tests like so::\n\n  (venv)$ py.test\n\nIf you also install `tox`::\n\n  (venv)$ pip install tox\n\nthen you can run all tests for all supported platforms at once::\n\n  (venv)$ tox\n\n\nCoverage\n--------\n\nTo get a coverage report, you can use the respective `tox` target::\n\n  (venv)$ tox -e cov\n\nOr you use the common `coverage` tool::\n\n  (venv)$ pip install coverage\n  (venv)$ coverage run setup.py test\n  (venv)$ coverage report --include=\"diceware_list.py,libwordlist.py\"\n\n\n.. [#] The wordlist length in this case should be\n       ``(number-of-sides-per-dice)`` powered to\n       ``(number-of-dicethrows)``, for instance 6**5 = 7776 for five\n       six-sided dice or a single six-sided dice thrown five times.\n\n.. _diceware: http://diceware.com/\n.. _pip: https://pip.pypa.io/en/latest/\n.. _`prefix code`: https://en.wikipedia.org/wiki/Prefix_code\n.. _py.test: https://pytest.org/\n.. _pypi: https://pypi.python.org/\n.. _virtualenv: https://virtualenv.pypa.io/\n\n\n\nChanges\n*******\n\n2.1.dev0 (unreleased)\n=====================\n\n- Support also Python 3.6, 3.7 and `pypy3`.\n\n- `diceware-list` allows to limit the set set of allowed chars (``-c`` or\n  ``--chars``).\n\n- `diceware-list` now allows uppercase chars in terms on request (``-u`` or\n  ``--allow-uppercase``).\n\n- `wlflakes` checks now for non ASCII chars in lists and for terms, that are\n  too short and therefore easy to bruteforce.\n\n- Added functions to compute entropy of wordlists and their alphabet chars.\n\n- Fixed #4: terms differing in only upper/lower case, led to double entries in\n  result list.\n\n\n2.0 (2018-01-23)\n================\n\n- Add new `wldownload` command. This is a tool for handling Android wordlists\n  (download, uncompress, parse).\n\n- Add new `wlflakes` command. This is a tool for checking existing\n  wordlists for consistency, cryptoflakes, etc.\n\n- The `diceware-list` option `-l` contains no default any more. If the option\n  is not set, all suitable terms are output.\n\n\n1.0 (2017-02-09)\n================\n\n- The ``dicewarekit.txt`` list is not included in generated lists by\n  default from now on. You can request inclusion with new option\n  `use-kit`.  The old option `no-kit` is not supported any more.\n\n- In numbered output, separate digits by ``-`` to distinguish numbers\n  with more than one digit. Needed at least when generating wordlists\n  for dice with more than 9 sides.\n\n- Rename `-s` option to `-d` (as in ``dice-sides``).\n\n- Logging output now registered under name `libwordlist`.\n\n- Added new module `libwordlist` containing the API parts of `diceware-list`.\n\n- New `--version` option.\n\n- New `--prefix` option. If set prefix code is generated, i.e. lists that\n  contain no item which is prefix of another list item.\n\n- Claim support for Python 3.6.\n\n- Restructure package: all single scripts are now part of a package.\n\n\n0.3 (2016-07-25)\n================\n\n- Install script as `diceware-list` instead of `diceware_list`.\n\n- Allow `--sides` option to support dice that do not have six sides.\n\n\n0.2 (2016-03-18)\n================\n\n- Allow `-v` option multiple times for increased verbosity.\n\n- Pick maximum width terms randomly. Until that change we included all\n  shorter entries and additionally the (alphabetically) first entries\n  of maximum width. Now, we pick a random set of these maximum width\n  entries for the result list.\n\n- Claim support for Python 3.5.\n\n\n0.1 (2016-02-09)\n================\n\n- Initial release.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ulif/diceware-list", "keywords": "diceware wordlist passphrase", "license": "GPL 3.0", "maintainer": "", "maintainer_email": "", "name": "diceware-list", "package_url": "https://pypi.org/project/diceware-list/", "platform": "", "project_url": "https://pypi.org/project/diceware-list/", "project_urls": {"Homepage": "https://github.com/ulif/diceware-list"}, "release_url": "https://pypi.org/project/diceware-list/2.1/", "requires_dist": ["setuptools", "Sphinx ; extra == 'docs'"], "requires_python": "", "summary": "Generate diceware wordlists.", "version": "2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"diceware-list\">\n<h2>diceware-list</h2>\n<p><a href=\"https://travis-ci.org/ulif/diceware-list\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/013f9801c16fd2b4dff45cdf39776a57faae91ca/68747470733a2f2f7472617669732d63692e6f72672f756c69662f64696365776172652d6c6973742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://github.com/ulif/diceware-list\" rel=\"nofollow\">sources</a> | <a href=\"https://github.com/ulif/diceware-list/issues\" rel=\"nofollow\">issues</a></p>\n<p>Create and check wordlists for use with <a href=\"http://diceware.com/\" rel=\"nofollow\">diceware</a>.</p>\n<p>This is not a <a href=\"http://diceware.com/\" rel=\"nofollow\">diceware</a> implementation, but a helper to create and check\nappropriate wordlists.</p>\n<p>Currently, we provide three scripts:</p>\n<blockquote>\n<ul>\n<li><cite>diceware-list</cite> create wordlists based on input lists</li>\n<li><cite>wlflakes</cite> checks existing wordlists for flaws</li>\n<li><cite>wldownload</cite> downloads Android wordlists</li>\n</ul>\n</blockquote>\n<div id=\"install\">\n<h3>Install</h3>\n<p>Install latest release from <a href=\"https://pypi.python.org/\" rel=\"nofollow\">pypi</a></p>\n<pre>(venv) $ pip install diceware-list\n</pre>\n<p>or clone repository from github:</p>\n<pre>$ git clone https://github.com/ulif/diceware-list.git\n</pre>\n<p>Please consider using <a href=\"https://virtualenv.pypa.io/\" rel=\"nofollow\">virtualenv</a> for deployment.</p>\n<p>In an active <cite>virtualenv</cite> you can install an executable script of\n<cite>diceware-list</cite> running:</p>\n<pre>(venv) $ python setup.py install\n(venv) $ diceware-list --help\nusage: diceware-list [-h] [-l LENGTH] [-n] [--ascii] [-d SIDES] [-k]\n                     [--use-416] [-p {none,short,long}] [-v] [--version]\n                     DICTFILE [DICTFILE ...]\n</pre>\n</div>\n<div id=\"create-wordlists-diceware-list\">\n<h3>Create Wordlists: <cite>diceware-list</cite></h3>\n<p>The <cite>diceware-list</cite> script creates new lists out of given ones:</p>\n<pre>$ diceware-list -n -l 7776 /usr/share/dict/words\n11111 a\n11112 a's\n...\n12353 capt\n12354 cara\n12355 carl\n...\n66663 zoos\n66664 \u00e9clat\n66665 \u00e9lan\n66666 \u00e9p\u00e9e\n</pre>\n<p>The main target of <cite>diceware-list</cite> is to provide \u201cgood\u201d\nwordlists. Wordlists are considered \u201cgood\u201d if they</p>\n<ul>\n<li>contain enough terms for use with a certain diceware application\n(for instance 6^6 = 7776 terms if used with six six-sided dice)</li>\n<li>contain terms as short as possible (to reduce typing)</li>\n<li>(optionally) contain no words with non-ASCII chars (to enable use\nwith non-localized keyboards)</li>\n<li>(optionally) are a <a href=\"https://en.wikipedia.org/wiki/Prefix_code\" rel=\"nofollow\">prefix code</a>, i.e. no complete word in the list is\nprefix of another word in the list.</li>\n<li>contain no offending terms</li>\n</ul>\n<p>The last topic is hard to solve technically (hints welcome!), but\n<cite>diceware-list</cite> can help to follow the other design rules.</p>\n<p>The wordlists generated by <cite>diceware-list</cite> are not meant to be kept\nsecret. You might put them on the internet, publish on facebook or\nprint them in the New York Times. Instead the security of the\n<a href=\"http://diceware.com/\" rel=\"nofollow\">diceware</a> technique relies on the entropy or (in this case)\n\u201crandomness\u201d of your dice, computer, etc.</p>\n<p>In other words: Your passphrases will not be safe because of hiding\nyour wordlist. They will be safe because there are so many possible\ncombinations of words you can pick from your wordlist. That means:\nlonger lists are more secure than shorter ones (if really used to full\nextent by your source of randomness with <a href=\"http://diceware.com/\" rel=\"nofollow\">diceware</a>), but hidden\nlists are <em>not</em> more secure than public ones.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>First, you need a file with words as \u201cdictionary\u201d. On typical Debian\nsystems such files can be found in <tt>/usr/share/dicts/</tt>.</p>\n<p>This file can then be fed to <cite>diceware-list</cite> to create a wordlist\nsuitable for use with diceware.:</p>\n<pre>$ diceware-list /usr/share/dict/words\n!\n!!\n!!!\n...\nalan\nalana\nalar\n...\nzzz\nzzzz\n</pre>\n<p>By default all input words are filtered and output. Using the <cite>-l</cite> option you\ncan request a certain length of the output wordlist. If an input list provides\nmore terms than needed, we will pick a subset. If there are not enough terms in\nthe input list, an error is raised.</p>\n<p>With <cite>-n</cite> you can tell <cite>diceware-list</cite> to put numbers into each line,\nrepresenting dice throws <a href=\"#id2\" id=\"id1\" rel=\"nofollow\">[1]</a></p>\n<pre>$ diceware_list -n -l 7776 /usr/share/dict/words\n11111 !\n11112 !!\n...\n12353 alan\n12354 alana\n12355 alar\n...\n66665 zzz\n66666 zzzz\n</pre>\n<p>If you create a wordlist for use with non-standard dice, for instance for\n10-sided dice, then you can tell with <cite>-d</cite> like this:</p>\n<pre>$ diceware_list -n -d 10 -l 10000 /usr/share/dict/words\n1-1-1-1 aol\n1-1-1-2 aachen\n1-1-1-3 aaron\n...\n10-10-10-8 zoomed\n10-10-10-9 zooms\n10-10-10-10 zoos\n</pre>\n<p>The <cite>\u2013ascii</cite> option filters terms out, that contain non-ASCII\ncharacters. This can help in generating non-english word lists that\nare usable with regular english keyboards.</p>\n<p>The verbose option <cite>\u2013verbose</cite> can be given multiple times to increase\nverbosity.</p>\n<p>See <cite>\u2013help</cite> for other options.</p>\n<p><cite>diceware-list</cite> follows loosely the recommendations given on\n<a href=\"http://diceware.com/\" rel=\"nofollow\">http://diceware.com/</a> by Mr. Reinhold.</p>\n</div>\n<div id=\"check-wordlists-wlflakes\">\n<h3>Check wordlists: wlflakes</h3>\n<p>Find flakes in wordlists.</p>\n<dl>\n<dt>::</dt>\n<dd>$ wlflakes mywordlist.txt</dd>\n</dl>\n<p>No output means: no problems detected.</p>\n<p>We can look for prefix flakes. I.e., we check, whether any line in the given\nfile is the beginning of any other line.</p>\n<dl>\n<dt>::</dt>\n<dd><p>$ cat wordlist.txt\nair\nport\nairport</p>\n<p>$ wlflakes wordlist.txt\nwordlist.txt:3: E1 \u201cair\u201d from line 1 is a prefix of \u201cairport\u201d</p>\n</dd>\n</dl>\n<p>Double entries are also shown:</p>\n<dl>\n<dt>::</dt>\n<dd><p>$ cat wordlist.txt\nair\nport\nair</p>\n<p>$ wlflakes wordlist.txt\nwordlist.txt:1: E1 \u201cair\u201d from line 1 is a prefix of \u201cair\u201d\nwordlist.txt:1: E2 \u201cair\u201d appears multiple times</p>\n</dd>\n</dl>\n<p>More checks offered by <cite>wlflakes</cite>:</p>\n<p>Warnings:\n- show terms containing non-ASCII chars\n- too short list entries (that are easer to bruteforce than to guess)</p>\n<p><cite>wlflakes</cite> supports also <tt><span class=\"pre\">--help</span></tt> or <tt><span class=\"pre\">-h</span></tt> to list all options supported.</p>\n</div>\n<div id=\"handle-android-wordlists-wldownload\">\n<h3>Handle Android wordlists: wldownload</h3>\n<p>Android wordlists are a nice source for wordlists. They can be downloaded from\npublic repositories:</p>\n<pre>$ wldownload --raw -v\nStarting download of Android wordlist file.\nFetching wordlist from https://android.googlesource.com/platform/pack...\nDone.\n</pre>\n<p><cite>wldownload</cite> downloads these lists and helps to transform them into lists\nusable for diceware. Be aware, that terms from lists are output on stdout by\ndefault (and Android wordlists contain easily more than 100,000 terms):</p>\n<pre>$ wldownload &gt; mylist\n$ cat mylist\nthe\nto\n...\nyt\nyuk\n</pre>\n<p>Terms are output on stdout by default (use shell redirects or <tt><span class=\"pre\">--outfile</span></tt> to\nchange that behaviour).</p>\n<p>You can request non-english wordlists using <tt><span class=\"pre\">--lang</span></tt> or <tt><span class=\"pre\">-l</span></tt> with a\nlanguage code like <tt>cs</tt> or <tt>de</tt>. Use <tt><span class=\"pre\">--lang-codes</span></tt> to list all supported\nlanguage codes.</p>\n<p>The <tt><span class=\"pre\">--no-offensive</span></tt> flag suppresses terms marked as possibly offensive.</p>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>In a clone of the sources you can run tests like this:</p>\n<pre>(venv) $ python setup.py test\n</pre>\n<p>This command will download all required packages, especially\n<a href=\"https://pytest.org/\" rel=\"nofollow\">py.test</a>.</p>\n<p>You can also install <a href=\"https://pytest.org/\" rel=\"nofollow\">py.test</a> manually with <a href=\"https://pip.pypa.io/en/latest/\" rel=\"nofollow\">pip</a>:</p>\n<pre>(venv)$ pip install pytest\n(venv)$ pip install -e .\n</pre>\n<p>and afterwards run tests like so:</p>\n<pre>(venv)$ py.test\n</pre>\n<p>If you also install <cite>tox</cite>:</p>\n<pre>(venv)$ pip install tox\n</pre>\n<p>then you can run all tests for all supported platforms at once:</p>\n<pre>(venv)$ tox\n</pre>\n</div>\n<div id=\"coverage\">\n<h3>Coverage</h3>\n<p>To get a coverage report, you can use the respective <cite>tox</cite> target:</p>\n<pre>(venv)$ tox -e cov\n</pre>\n<p>Or you use the common <cite>coverage</cite> tool:</p>\n<pre>(venv)$ pip install coverage\n(venv)$ coverage run setup.py test\n(venv)$ coverage report --include=\"diceware_list.py,libwordlist.py\"\n</pre>\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>The wordlist length in this case should be\n<tt><span class=\"pre\">(number-of-sides-per-dice)</span></tt> powered to\n<tt><span class=\"pre\">(number-of-dicethrows)</span></tt>, for instance 6**5 = 7776 for five\nsix-sided dice or a single six-sided dice thrown five times.</td></tr>\n</tbody>\n</table>\n<div id=\"changes\">\n<h4>Changes</h4>\n</div>\n</div>\n</div>\n<div id=\"dev0-unreleased\">\n<h2>2.1.dev0 (unreleased)</h2>\n<ul>\n<li>Support also Python 3.6, 3.7 and <cite>pypy3</cite>.</li>\n<li><cite>diceware-list</cite> allows to limit the set set of allowed chars (<tt><span class=\"pre\">-c</span></tt> or\n<tt><span class=\"pre\">--chars</span></tt>).</li>\n<li><cite>diceware-list</cite> now allows uppercase chars in terms on request (<tt><span class=\"pre\">-u</span></tt> or\n<tt><span class=\"pre\">--allow-uppercase</span></tt>).</li>\n<li><cite>wlflakes</cite> checks now for non ASCII chars in lists and for terms, that are\ntoo short and therefore easy to bruteforce.</li>\n<li>Added functions to compute entropy of wordlists and their alphabet chars.</li>\n<li>Fixed #4: terms differing in only upper/lower case, led to double entries in\nresult list.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h2>2.0 (2018-01-23)</h2>\n<ul>\n<li>Add new <cite>wldownload</cite> command. This is a tool for handling Android wordlists\n(download, uncompress, parse).</li>\n<li>Add new <cite>wlflakes</cite> command. This is a tool for checking existing\nwordlists for consistency, cryptoflakes, etc.</li>\n<li>The <cite>diceware-list</cite> option <cite>-l</cite> contains no default any more. If the option\nis not set, all suitable terms are output.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h2>1.0 (2017-02-09)</h2>\n<ul>\n<li>The <tt>dicewarekit.txt</tt> list is not included in generated lists by\ndefault from now on. You can request inclusion with new option\n<cite>use-kit</cite>.  The old option <cite>no-kit</cite> is not supported any more.</li>\n<li>In numbered output, separate digits by <tt>-</tt> to distinguish numbers\nwith more than one digit. Needed at least when generating wordlists\nfor dice with more than 9 sides.</li>\n<li>Rename <cite>-s</cite> option to <cite>-d</cite> (as in <tt><span class=\"pre\">dice-sides</span></tt>).</li>\n<li>Logging output now registered under name <cite>libwordlist</cite>.</li>\n<li>Added new module <cite>libwordlist</cite> containing the API parts of <cite>diceware-list</cite>.</li>\n<li>New <cite>\u2013version</cite> option.</li>\n<li>New <cite>\u2013prefix</cite> option. If set prefix code is generated, i.e. lists that\ncontain no item which is prefix of another list item.</li>\n<li>Claim support for Python 3.6.</li>\n<li>Restructure package: all single scripts are now part of a package.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h2>0.3 (2016-07-25)</h2>\n<ul>\n<li>Install script as <cite>diceware-list</cite> instead of <cite>diceware_list</cite>.</li>\n<li>Allow <cite>\u2013sides</cite> option to support dice that do not have six sides.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h2>0.2 (2016-03-18)</h2>\n<ul>\n<li>Allow <cite>-v</cite> option multiple times for increased verbosity.</li>\n<li>Pick maximum width terms randomly. Until that change we included all\nshorter entries and additionally the (alphabetically) first entries\nof maximum width. Now, we pick a random set of these maximum width\nentries for the result list.</li>\n<li>Claim support for Python 3.5.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h2>0.1 (2016-02-09)</h2>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6569981, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f3d78525f178325a4ef138ab105c87c7", "sha256": "7e28e50520cd1eefa4afbf73588808a5def464ac1fd4fc1cf8190ea3373a91f4"}, "downloads": -1, "filename": "diceware_list-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f3d78525f178325a4ef138ab105c87c7", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 9760, "upload_time": "2016-02-09T13:17:58", "upload_time_iso_8601": "2016-02-09T13:17:58.590152Z", "url": "https://files.pythonhosted.org/packages/80/29/d59931bfd1ab7bf5c56d2bca70d344854305701a36d217a1caa182f7430e/diceware_list-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fa75f796a6b4f83ff19613542721df0", "sha256": "93a722907ab80f9ede3c9b80c47f581dfec98377ea79c057aafe4cba5637a84c"}, "downloads": -1, "filename": "diceware_list-0.1.tar.gz", "has_sig": false, "md5_digest": "5fa75f796a6b4f83ff19613542721df0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27786, "upload_time": "2016-02-09T13:17:37", "upload_time_iso_8601": "2016-02-09T13:17:37.510096Z", "url": "https://files.pythonhosted.org/packages/54/fb/769c2512575cf0070e2ece169508575a645017d88d1aa50d682036e2be2f/diceware_list-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "609189f2de8c6039b3682fa05d165dbb", "sha256": "2d11a5a1e11c1a4e8e363840f9ae9893613837fcad2e10c79aabb94a1c1d7f74"}, "downloads": -1, "filename": "diceware_list-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "609189f2de8c6039b3682fa05d165dbb", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 11249, "upload_time": "2016-03-18T10:24:23", "upload_time_iso_8601": "2016-03-18T10:24:23.867541Z", "url": "https://files.pythonhosted.org/packages/24/8a/e7f80e5bd9f1c8312f0f23d31e8362b46bd61ad9d6697cd8be0bdd473f67/diceware_list-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e11b3dfbc688bcd39d19a2f0e41d26d8", "sha256": "95f94960d32a8f45b969717685afc7c0459c40f1eedc16aa24057197e12e0bec"}, "downloads": -1, "filename": "diceware_list-0.2.tar.gz", "has_sig": false, "md5_digest": "e11b3dfbc688bcd39d19a2f0e41d26d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29880, "upload_time": "2016-03-18T10:24:16", "upload_time_iso_8601": "2016-03-18T10:24:16.120169Z", "url": "https://files.pythonhosted.org/packages/39/2b/cc6f5e331bc2b10c91f6539dd0da77ad747080b40f2c89bed40404aa076f/diceware_list-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4fbc6dfbeb242023b99bc16b5a3a36c5", "sha256": "e2ffa72258d3ad3caf712f59aa4c2655a0297b33bf10652563e0d8a22048e10c"}, "downloads": -1, "filename": "diceware_list-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4fbc6dfbeb242023b99bc16b5a3a36c5", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 11704, "upload_time": "2016-07-25T11:06:17", "upload_time_iso_8601": "2016-07-25T11:06:17.180201Z", "url": "https://files.pythonhosted.org/packages/48/c7/53065f774bd5d5f78cb2aefa33d4b5d6fc151e28f4c6ce12b909c4f09d9a/diceware_list-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4b0845795d4fd453a43c934d4702672", "sha256": "dbceeddd0a4a75a66e2546fe2edf2a2e1e26534bffef580be4307320bb703498"}, "downloads": -1, "filename": "diceware_list-0.3.tar.gz", "has_sig": false, "md5_digest": "c4b0845795d4fd453a43c934d4702672", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31896, "upload_time": "2016-07-25T11:06:13", "upload_time_iso_8601": "2016-07-25T11:06:13.931963Z", "url": "https://files.pythonhosted.org/packages/13/5c/d9247d7bc2d7e590220aaf5aab2303d8aa530ae2f69e39b288eb214be066/diceware_list-0.3.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "546dd18a0ad435e8926bac4bf5439389", "sha256": "5c8fddce4f73b654d4bc686cf8232eeeff6cb71009146191ed8869df59e4871d"}, "downloads": -1, "filename": "diceware_list-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "546dd18a0ad435e8926bac4bf5439389", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 12744, "upload_time": "2017-02-09T11:00:02", "upload_time_iso_8601": "2017-02-09T11:00:02.137594Z", "url": "https://files.pythonhosted.org/packages/dd/8b/32ef34a369fe479c2ddcc662662bf3fe60845c2b93d08bdae9ab1906c665/diceware_list-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15fb65b26b2a3e6b667c99fa16ca42d3", "sha256": "c98b3d9164661a23f62c3e8d7cdedc33524e88a60c3b3cf9ad46de4781c58bb5"}, "downloads": -1, "filename": "diceware_list-1.0.tar.gz", "has_sig": false, "md5_digest": "15fb65b26b2a3e6b667c99fa16ca42d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38403, "upload_time": "2017-02-09T10:59:59", "upload_time_iso_8601": "2017-02-09T10:59:59.689186Z", "url": "https://files.pythonhosted.org/packages/23/aa/558feaa0b0dfc8b1bf01c6072c737955087c576ceb9f0cd96b85d606f8b6/diceware_list-1.0.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "e2ff55a90177b72e4514fbdd41798bbc", "sha256": "505954e3add5e2f338eb87a42a82813052b552df73ed720527c8d98d8756f07c"}, "downloads": -1, "filename": "diceware_list-2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e2ff55a90177b72e4514fbdd41798bbc", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 14689, "upload_time": "2018-01-23T17:12:02", "upload_time_iso_8601": "2018-01-23T17:12:02.178758Z", "url": "https://files.pythonhosted.org/packages/6d/30/f797605450c812f45d4072d0b084c3b1ae1defd43c05c28ba3bcc36ba899/diceware_list-2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "971c1457c3fb13c39de64be3f05a68b9", "sha256": "9c1c4256ad7a9de6ce23e22e5ad5a9dd5410df9aadc300e98c9b8fdaf07ac734"}, "downloads": -1, "filename": "diceware_list-2.0.tar.gz", "has_sig": false, "md5_digest": "971c1457c3fb13c39de64be3f05a68b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51221, "upload_time": "2018-01-23T17:11:59", "upload_time_iso_8601": "2018-01-23T17:11:59.134384Z", "url": "https://files.pythonhosted.org/packages/e6/0e/308ae53c9d5cec09a644ab85b8eb5d2e7249275af32ade6617aa9bec8e28/diceware_list-2.0.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "389273427d9d97d7deccb40764b5acb2", "sha256": "ce83bd83389eb71e648a11d555ab1efe4ee45b53297f490e334cd64dcc37a3e0"}, "downloads": -1, "filename": "diceware_list-2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "389273427d9d97d7deccb40764b5acb2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22528, "upload_time": "2020-02-04T16:54:47", "upload_time_iso_8601": "2020-02-04T16:54:47.128787Z", "url": "https://files.pythonhosted.org/packages/a8/dd/4e1553d7eb92d90dfcca50affbd03a4947ba0caaefddb5c52513231aac0d/diceware_list-2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "709c83917e80bccacadc901a39929dd8", "sha256": "536ff6fc9664ff64863b8ccb06599c5469352d1046d6593c839ea7166292788d"}, "downloads": -1, "filename": "diceware_list-2.1.tar.gz", "has_sig": false, "md5_digest": "709c83917e80bccacadc901a39929dd8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55829, "upload_time": "2020-02-04T16:54:49", "upload_time_iso_8601": "2020-02-04T16:54:49.051341Z", "url": "https://files.pythonhosted.org/packages/7c/65/528b7c586fcb502e024493c813504a904faf68ab7249125dfba0564b2a64/diceware_list-2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "389273427d9d97d7deccb40764b5acb2", "sha256": "ce83bd83389eb71e648a11d555ab1efe4ee45b53297f490e334cd64dcc37a3e0"}, "downloads": -1, "filename": "diceware_list-2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "389273427d9d97d7deccb40764b5acb2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22528, "upload_time": "2020-02-04T16:54:47", "upload_time_iso_8601": "2020-02-04T16:54:47.128787Z", "url": "https://files.pythonhosted.org/packages/a8/dd/4e1553d7eb92d90dfcca50affbd03a4947ba0caaefddb5c52513231aac0d/diceware_list-2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "709c83917e80bccacadc901a39929dd8", "sha256": "536ff6fc9664ff64863b8ccb06599c5469352d1046d6593c839ea7166292788d"}, "downloads": -1, "filename": "diceware_list-2.1.tar.gz", "has_sig": false, "md5_digest": "709c83917e80bccacadc901a39929dd8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55829, "upload_time": "2020-02-04T16:54:49", "upload_time_iso_8601": "2020-02-04T16:54:49.051341Z", "url": "https://files.pythonhosted.org/packages/7c/65/528b7c586fcb502e024493c813504a904faf68ab7249125dfba0564b2a64/diceware_list-2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:35 2020"}