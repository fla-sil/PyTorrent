{"info": {"author": "nardew", "author_email": "binance.aio@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Typing :: Typed"], "description": "# binance-aio 0.0.3\n\n**Announcement:**`binance-aio` has been replaced by a new library [`cryptoxlib-aio`](https://github.com/nardew/cryptoxlib-aio). `cryptoxlib-aio` offers the very same functionality as `binance-aio` but on top it provides access to multiple cryptoexchanges and other (mostly technical) new features. You can keep using `binance-aio` but please note no new features/bugfixes will be implemented. We recommend to migrate to `cryptoxlib-aio`.\n\n----\n\n[![](https://img.shields.io/badge/python-3.6-blue.svg)](https://www.python.org/downloads/release/python-365/) [![](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/downloads/release/python-374/)\n\n`binance-aio` is a Python library providing access to [binance crypto exchange](https://www.binance.com/en). Library implements binance's REST API as well as websockets.\n\n`binance-aio` is designed as an asynchronous library utilizing modern features of Python and of supporting asynchronous libraries (mainly [async websockets](https://websockets.readthedocs.io/en/stable/) and [aiohttp](https://aiohttp.readthedocs.io/en/stable/)).\n\nFor changes see [CHANGELOG](https://github.com/nardew/binance-aio/blob/master/CHANGELOG.md).\n\n### Features\n- access to limited binance's REST API (account details, market data, order management, ...) and websockets (account feed, market data feed, orderbook feed, ...). Missing REST calls and websocket streams will be added on request and based on our availability.\n- channels bundled in one or multiple websockets processed in parallel \n- lean architecture setting ground for the future extensions and customizations\n- fully asynchronous design aiming for the best performance\n\n### Installation\n```bash\npip install binance-aio\n```\n\n### Prerequisites\n\nDue to dependencies and Python features used by the library please make sure you use Python `3.6` or `3.7`.\n\nBefore starting using `binance-aio`, it is necessary to take care of:\n1. downloading your Binance API and SECRET key from your binance account\n1. generating your certificate that will be used to secure SSL connections. Certificate `certificate.pem` can be generated easily by\n```bash\nopenssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out certificate.pem\n```\n\n### Examples\n#### REST API\n```python\nimport asyncio\nimport pathlib\nimport logging\nimport os\nfrom datetime import datetime\n\nfrom binance.BinanceClient import BinanceClient\nfrom binance.Pair import Pair\nfrom binance.enums import OrderSide, TimeInForce, OrderResponseType\n\nLOG = logging.getLogger(\"binance\")\nLOG.setLevel(logging.DEBUG)\nLOG.addHandler(logging.StreamHandler())\n\nprint(f\"Available loggers: {[name for name in logging.root.manager.loggerDict]}\\n\")\n\nasync def account_update(response : dict) -> None:\n\tprint(f\"Callback {account_update.__name__}: [{response}]\")\n\nasync def order_book_update(response : dict) -> None:\n\tprint(f\"Callback {order_book_update.__name__}: [{response}]\")\n\nasync def trade_update(response : dict) -> None:\n\tlocal_timestamp_ms = int(datetime.now().timestamp() * 1000)\n\tserver_timestamp_ms = response['E']\n\tprint(f\"Trade update timestamp diff [ms]: {local_timestamp_ms - server_timestamp_ms}\")\n\nasync def orderbook_ticker_update(response : dict) -> None:\n\tprint(f\"Callback {orderbook_ticker_update.__name__}: [{response}]\")\n\nasync def run():\n\tprint(\"STARTING BINANCE CLIENT\\n\")\n\n\t# to generate a certificate use 'openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out certificate.pem'\n\tcertificate_path = pathlib.Path(__file__).with_name(\"certificate.pem\")\n\n\t# to retrieve your API/SEC key go to your binance website, create the keys and store them in APIKEY/SECKEY\n\t# environment variables\n\tapi_key = os.environ['APIKEY']\n\tsec_key = os.environ['SECKEY']\n\n\tclient = BinanceClient(certificate_path, api_key, sec_key)\n\n\t# REST api calls\n\tprint(\"REST API\")\n\n\tprint(\"\\nPing:\")\n\tawait client.ping()\n\n\tprint(\"\\nServer time:\")\n\tawait client.get_time()\n\n\tprint(\"\\nExchange info:\")\n\tawait client.get_exchange_info()\n\n\tprint(\"\\nBest order book ticker:\")\n\tawait client.get_best_orderbook_ticker(pair = Pair('ETH', 'BTC'))\n\n\tprint(\"\\nAccount:\")\n\tawait client.get_account(recv_window_ms = 5000)\n\n\tprint(\"\\nCreate limit order:\")\n\tawait client.create_limit_order(Pair(\"ETH\", \"BTC\"), OrderSide.BUY, \"1\", \"0\", time_in_force = TimeInForce.GOOD_TILL_CANCELLED,\n\t                                new_order_response_type = OrderResponseType.FULL)\n\n\tprint(\"\\nDelete order:\")\n\tawait client.delete_order(pair = Pair('ETH', 'BTC'), order_id = \"1\")\n\n\tawait client.close()\n\nif __name__ == \"__main__\":\n\tasyncio.run(run())\n```\n\n#### WEBSOCKETS\n```python\nimport asyncio\nimport pathlib\nimport logging\nimport os\nfrom datetime import datetime\n\nfrom binance.BinanceClient import BinanceClient\nfrom binance.Pair import Pair\nfrom binance.subscriptions import BestOrderBookTickerSubscription, TradeSubscription, AccountSubscription\n\nLOG = logging.getLogger(\"binance\")\nLOG.setLevel(logging.DEBUG)\nLOG.addHandler(logging.StreamHandler())\n\nprint(f\"Available loggers: {[name for name in logging.root.manager.loggerDict]}\\n\")\n\nasync def account_update(response : dict) -> None:\n\tprint(f\"Callback {account_update.__name__}: [{response}]\")\n\nasync def order_book_update(response : dict) -> None:\n\tprint(f\"Callback {order_book_update.__name__}: [{response}]\")\n\nasync def trade_update(response : dict) -> None:\n\tlocal_timestamp_ms = int(datetime.now().timestamp() * 1000)\n\tserver_timestamp_ms = response['E']\n\tprint(f\"Trade update timestamp diff [ms]: {local_timestamp_ms - server_timestamp_ms}\")\n\nasync def orderbook_ticker_update(response : dict) -> None:\n\tprint(f\"Callback {orderbook_ticker_update.__name__}: [{response}]\")\n\nasync def run():\n\tprint(\"STARTING BINANCE CLIENT\\n\")\n\n\t# to generate a certificate use 'openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out certificate.pem'\n\tcertificate_path = pathlib.Path(__file__).with_name(\"certificate.pem\")\n\n\t# to retrieve your API/SEC key go to your binance website, create the keys and store them in API_KEY/SEC_KEY\n\t# environment variables\n\tapi_key = os.environ['APIKEY']\n\tsec_key = os.environ['SECKEY']\n\n\tclient = BinanceClient(certificate_path, api_key, sec_key)\n\n\t# Websockets\n\tprint(\"\\nWEBSOCKETS\\n\")\n\n\tprint(\"\\nCreate listen key:\")\n\tlisten_key = await client.get_listen_key()\n\n\t# Bundle several subscriptions into a single websocket\n\tclient.compose_subscriptions([\n\t\tBestOrderBookTickerSubscription(callbacks = [orderbook_ticker_update]),\n\t\tTradeSubscription(pair = Pair('ETH', 'BTC'), callbacks = [trade_update])\n\t])\n\n\t# Bundle another subscriptions into a separate websocket\n\tprint(listen_key)\n\tclient.compose_subscriptions([\n\t\tAccountSubscription(client, callbacks = [account_update])\n\t])\n\n\t# Execute all websockets asynchronously\n\tawait client.start_subscriptions()\n\n\tawait client.close()\n\nif __name__ == \"__main__\":\n\tasyncio.run(run())\n```\n\nAll examples can be found in `client-example/client.py` in the GitHub repository.\n\n### Support\n\nIf you like the library and you feel like you want to support its further development, enhancements and bugfixing, then it will be of great help and most appreciated if you:\n- file bugs, proposals, pull requests, ...\n- spread the word\n- donate an arbitrary tip\n  * BTC: 15JUgVq3YFoPedEj5wgQgvkZRx5HQoKJC4\n  * ETH: 0xf29304b6af5831030ba99aceb290a3a2129b993d\n  * ADA: DdzFFzCqrhshyLV3wktXFvConETEr9mCfrMo9V3dYz4pz6yNq9PjJusfnn4kzWKQR91pWecEbKoHodPaJzgBHdV2AKeDSfR4sckrEk79\n  * XRP: rhVWrjB9EGDeK4zuJ1x2KXSjjSpsDQSaU6 **+ tag** 599790141\n\n### Contact\n\nIf you feel you want to get in touch, then please\n\n- preferably use Github Issues, or\n- send an e-mail to <img src=\"http://safemail.justlikeed.net/e/160b5d5ea6878dd3d893b9f9fecb6ed7.png\" border=\"0\" align=\"absbottom\">\n\n### Affiliation\n\nIn case you are interested in an automated trading bot, check out our other project [creten](https://github.com/nardew/creten).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nardew/binance-aio", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "binance-aio", "package_url": "https://pypi.org/project/binance-aio/", "platform": "", "project_url": "https://pypi.org/project/binance-aio/", "project_urls": {"Homepage": "https://github.com/nardew/binance-aio"}, "release_url": "https://pypi.org/project/binance-aio/0.0.3/", "requires_dist": ["aiohttp (==3.6.2)", "websockets (==8.1)"], "requires_python": ">=3.6", "summary": "Binance asynchronous python client", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>binance-aio 0.0.3</h1>\n<p><strong>Announcement:</strong><code>binance-aio</code> has been replaced by a new library <a href=\"https://github.com/nardew/cryptoxlib-aio\" rel=\"nofollow\"><code>cryptoxlib-aio</code></a>. <code>cryptoxlib-aio</code> offers the very same functionality as <code>binance-aio</code> but on top it provides access to multiple cryptoexchanges and other (mostly technical) new features. You can keep using <code>binance-aio</code> but please note no new features/bugfixes will be implemented. We recommend to migrate to <code>cryptoxlib-aio</code>.</p>\n<hr>\n<p><a href=\"https://www.python.org/downloads/release/python-365/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01419d339114693587408dd14856677a4789006a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362d626c75652e737667\"></a> <a href=\"https://www.python.org/downloads/release/python-374/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99a5180f32db379110e9948c7de1aaf8f77bf2e8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e372d626c75652e737667\"></a></p>\n<p><code>binance-aio</code> is a Python library providing access to <a href=\"https://www.binance.com/en\" rel=\"nofollow\">binance crypto exchange</a>. Library implements binance's REST API as well as websockets.</p>\n<p><code>binance-aio</code> is designed as an asynchronous library utilizing modern features of Python and of supporting asynchronous libraries (mainly <a href=\"https://websockets.readthedocs.io/en/stable/\" rel=\"nofollow\">async websockets</a> and <a href=\"https://aiohttp.readthedocs.io/en/stable/\" rel=\"nofollow\">aiohttp</a>).</p>\n<p>For changes see <a href=\"https://github.com/nardew/binance-aio/blob/master/CHANGELOG.md\" rel=\"nofollow\">CHANGELOG</a>.</p>\n<h3>Features</h3>\n<ul>\n<li>access to limited binance's REST API (account details, market data, order management, ...) and websockets (account feed, market data feed, orderbook feed, ...). Missing REST calls and websocket streams will be added on request and based on our availability.</li>\n<li>channels bundled in one or multiple websockets processed in parallel</li>\n<li>lean architecture setting ground for the future extensions and customizations</li>\n<li>fully asynchronous design aiming for the best performance</li>\n</ul>\n<h3>Installation</h3>\n<pre>pip install binance-aio\n</pre>\n<h3>Prerequisites</h3>\n<p>Due to dependencies and Python features used by the library please make sure you use Python <code>3.6</code> or <code>3.7</code>.</p>\n<p>Before starting using <code>binance-aio</code>, it is necessary to take care of:</p>\n<ol>\n<li>downloading your Binance API and SECRET key from your binance account</li>\n<li>generating your certificate that will be used to secure SSL connections. Certificate <code>certificate.pem</code> can be generated easily by</li>\n</ol>\n<pre>openssl req -newkey rsa:2048 -new -nodes -x509 -days <span class=\"m\">3650</span> -keyout key.pem -out certificate.pem\n</pre>\n<h3>Examples</h3>\n<h4>REST API</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">binance.BinanceClient</span> <span class=\"kn\">import</span> <span class=\"n\">BinanceClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">binance.Pair</span> <span class=\"kn\">import</span> <span class=\"n\">Pair</span>\n<span class=\"kn\">from</span> <span class=\"nn\">binance.enums</span> <span class=\"kn\">import</span> <span class=\"n\">OrderSide</span><span class=\"p\">,</span> <span class=\"n\">TimeInForce</span><span class=\"p\">,</span> <span class=\"n\">OrderResponseType</span>\n\n<span class=\"n\">LOG</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">\"binance\"</span><span class=\"p\">)</span>\n<span class=\"n\">LOG</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">LOG</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">())</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Available loggers: </span><span class=\"si\">{</span><span class=\"p\">[</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">loggerDict</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">account_update</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Callback </span><span class=\"si\">{</span><span class=\"n\">account_update</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">: [</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s2\">]\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">order_book_update</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Callback </span><span class=\"si\">{</span><span class=\"n\">order_book_update</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">: [</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s2\">]\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">trade_update</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t<span class=\"n\">local_timestamp_ms</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n\t<span class=\"n\">server_timestamp_ms</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'E'</span><span class=\"p\">]</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Trade update timestamp diff [ms]: </span><span class=\"si\">{</span><span class=\"n\">local_timestamp_ms</span> <span class=\"o\">-</span> <span class=\"n\">server_timestamp_ms</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">orderbook_ticker_update</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Callback </span><span class=\"si\">{</span><span class=\"n\">orderbook_ticker_update</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">: [</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s2\">]\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"STARTING BINANCE CLIENT</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n\t<span class=\"c1\"># to generate a certificate use 'openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out certificate.pem'</span>\n\t<span class=\"n\">certificate_path</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"certificate.pem\"</span><span class=\"p\">)</span>\n\n\t<span class=\"c1\"># to retrieve your API/SEC key go to your binance website, create the keys and store them in APIKEY/SECKEY</span>\n\t<span class=\"c1\"># environment variables</span>\n\t<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'APIKEY'</span><span class=\"p\">]</span>\n\t<span class=\"n\">sec_key</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SECKEY'</span><span class=\"p\">]</span>\n\n\t<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">BinanceClient</span><span class=\"p\">(</span><span class=\"n\">certificate_path</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"p\">,</span> <span class=\"n\">sec_key</span><span class=\"p\">)</span>\n\n\t<span class=\"c1\"># REST api calls</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"REST API\"</span><span class=\"p\">)</span>\n\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Ping:\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ping</span><span class=\"p\">()</span>\n\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Server time:\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_time</span><span class=\"p\">()</span>\n\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Exchange info:\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_exchange_info</span><span class=\"p\">()</span>\n\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Best order book ticker:\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_best_orderbook_ticker</span><span class=\"p\">(</span><span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"s1\">'ETH'</span><span class=\"p\">,</span> <span class=\"s1\">'BTC'</span><span class=\"p\">))</span>\n\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Account:\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">(</span><span class=\"n\">recv_window_ms</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>\n\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Create limit order:\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_limit_order</span><span class=\"p\">(</span><span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"s2\">\"ETH\"</span><span class=\"p\">,</span> <span class=\"s2\">\"BTC\"</span><span class=\"p\">),</span> <span class=\"n\">OrderSide</span><span class=\"o\">.</span><span class=\"n\">BUY</span><span class=\"p\">,</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"0\"</span><span class=\"p\">,</span> <span class=\"n\">time_in_force</span> <span class=\"o\">=</span> <span class=\"n\">TimeInForce</span><span class=\"o\">.</span><span class=\"n\">GOOD_TILL_CANCELLED</span><span class=\"p\">,</span>\n\t                                <span class=\"n\">new_order_response_type</span> <span class=\"o\">=</span> <span class=\"n\">OrderResponseType</span><span class=\"o\">.</span><span class=\"n\">FULL</span><span class=\"p\">)</span>\n\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Delete order:\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_order</span><span class=\"p\">(</span><span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"s1\">'ETH'</span><span class=\"p\">,</span> <span class=\"s1\">'BTC'</span><span class=\"p\">),</span> <span class=\"n\">order_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"1\"</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n\t<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<h4>WEBSOCKETS</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">binance.BinanceClient</span> <span class=\"kn\">import</span> <span class=\"n\">BinanceClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">binance.Pair</span> <span class=\"kn\">import</span> <span class=\"n\">Pair</span>\n<span class=\"kn\">from</span> <span class=\"nn\">binance.subscriptions</span> <span class=\"kn\">import</span> <span class=\"n\">BestOrderBookTickerSubscription</span><span class=\"p\">,</span> <span class=\"n\">TradeSubscription</span><span class=\"p\">,</span> <span class=\"n\">AccountSubscription</span>\n\n<span class=\"n\">LOG</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">\"binance\"</span><span class=\"p\">)</span>\n<span class=\"n\">LOG</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">LOG</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">())</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Available loggers: </span><span class=\"si\">{</span><span class=\"p\">[</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">loggerDict</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">account_update</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Callback </span><span class=\"si\">{</span><span class=\"n\">account_update</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">: [</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s2\">]\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">order_book_update</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Callback </span><span class=\"si\">{</span><span class=\"n\">order_book_update</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">: [</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s2\">]\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">trade_update</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t<span class=\"n\">local_timestamp_ms</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n\t<span class=\"n\">server_timestamp_ms</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'E'</span><span class=\"p\">]</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Trade update timestamp diff [ms]: </span><span class=\"si\">{</span><span class=\"n\">local_timestamp_ms</span> <span class=\"o\">-</span> <span class=\"n\">server_timestamp_ms</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">orderbook_ticker_update</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Callback </span><span class=\"si\">{</span><span class=\"n\">orderbook_ticker_update</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">: [</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s2\">]\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"STARTING BINANCE CLIENT</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n\t<span class=\"c1\"># to generate a certificate use 'openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out certificate.pem'</span>\n\t<span class=\"n\">certificate_path</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"certificate.pem\"</span><span class=\"p\">)</span>\n\n\t<span class=\"c1\"># to retrieve your API/SEC key go to your binance website, create the keys and store them in API_KEY/SEC_KEY</span>\n\t<span class=\"c1\"># environment variables</span>\n\t<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'APIKEY'</span><span class=\"p\">]</span>\n\t<span class=\"n\">sec_key</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SECKEY'</span><span class=\"p\">]</span>\n\n\t<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">BinanceClient</span><span class=\"p\">(</span><span class=\"n\">certificate_path</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"p\">,</span> <span class=\"n\">sec_key</span><span class=\"p\">)</span>\n\n\t<span class=\"c1\"># Websockets</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">WEBSOCKETS</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Create listen key:\"</span><span class=\"p\">)</span>\n\t<span class=\"n\">listen_key</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_listen_key</span><span class=\"p\">()</span>\n\n\t<span class=\"c1\"># Bundle several subscriptions into a single websocket</span>\n\t<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">compose_subscriptions</span><span class=\"p\">([</span>\n\t\t<span class=\"n\">BestOrderBookTickerSubscription</span><span class=\"p\">(</span><span class=\"n\">callbacks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">orderbook_ticker_update</span><span class=\"p\">]),</span>\n\t\t<span class=\"n\">TradeSubscription</span><span class=\"p\">(</span><span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"s1\">'ETH'</span><span class=\"p\">,</span> <span class=\"s1\">'BTC'</span><span class=\"p\">),</span> <span class=\"n\">callbacks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">trade_update</span><span class=\"p\">])</span>\n\t<span class=\"p\">])</span>\n\n\t<span class=\"c1\"># Bundle another subscriptions into a separate websocket</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">listen_key</span><span class=\"p\">)</span>\n\t<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">compose_subscriptions</span><span class=\"p\">([</span>\n\t\t<span class=\"n\">AccountSubscription</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">callbacks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">account_update</span><span class=\"p\">])</span>\n\t<span class=\"p\">])</span>\n\n\t<span class=\"c1\"># Execute all websockets asynchronously</span>\n\t<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">start_subscriptions</span><span class=\"p\">()</span>\n\n\t<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n\t<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<p>All examples can be found in <code>client-example/client.py</code> in the GitHub repository.</p>\n<h3>Support</h3>\n<p>If you like the library and you feel like you want to support its further development, enhancements and bugfixing, then it will be of great help and most appreciated if you:</p>\n<ul>\n<li>file bugs, proposals, pull requests, ...</li>\n<li>spread the word</li>\n<li>donate an arbitrary tip\n<ul>\n<li>BTC: 15JUgVq3YFoPedEj5wgQgvkZRx5HQoKJC4</li>\n<li>ETH: 0xf29304b6af5831030ba99aceb290a3a2129b993d</li>\n<li>ADA: DdzFFzCqrhshyLV3wktXFvConETEr9mCfrMo9V3dYz4pz6yNq9PjJusfnn4kzWKQR91pWecEbKoHodPaJzgBHdV2AKeDSfR4sckrEk79</li>\n<li>XRP: rhVWrjB9EGDeK4zuJ1x2KXSjjSpsDQSaU6 <strong>+ tag</strong> 599790141</li>\n</ul>\n</li>\n</ul>\n<h3>Contact</h3>\n<p>If you feel you want to get in touch, then please</p>\n<ul>\n<li>preferably use Github Issues, or</li>\n<li>send an e-mail to <img align=\"absbottom\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4074e7f21dffbca006361e56ad87be878f85e45/687474703a2f2f736166656d61696c2e6a7573746c696b6565642e6e65742f652f31363062356435656136383738646433643839336239663966656362366564372e706e67\"></li>\n</ul>\n<h3>Affiliation</h3>\n<p>In case you are interested in an automated trading bot, check out our other project <a href=\"https://github.com/nardew/creten\" rel=\"nofollow\">creten</a>.</p>\n\n          </div>"}, "last_serial": 6919915, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f517b43300bf4c13ff51a186457d6cb9", "sha256": "4d88a0f25ba004bb2a70846cbbe470bbb163e204e5fafc1308978451b80e1975"}, "downloads": -1, "filename": "binance_aio-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f517b43300bf4c13ff51a186457d6cb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10063, "upload_time": "2020-01-30T19:48:47", "upload_time_iso_8601": "2020-01-30T19:48:47.225905Z", "url": "https://files.pythonhosted.org/packages/6e/47/3b0ca57d909f68cb6ac91ca9173054ec59af20f6f0b2833be88dda8d7a50/binance_aio-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db966e9fbe867fab244226c868e3d8b2", "sha256": "54356152f0fd152d4b9e6a46fcc8201eb221c4fd29139b137d55ecdf1a645d63"}, "downloads": -1, "filename": "binance-aio-0.0.1.tar.gz", "has_sig": false, "md5_digest": "db966e9fbe867fab244226c868e3d8b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8847, "upload_time": "2020-01-30T19:48:54", "upload_time_iso_8601": "2020-01-30T19:48:54.746779Z", "url": "https://files.pythonhosted.org/packages/d1/eb/033a4963dd34e3285b8afa4981c080b7ed98adb905cf6e84236ab10a20c0/binance-aio-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6d9aa91d4eabaa84759472728c543d59", "sha256": "27d70d44d57433a00032fe96a00c2a2cf8869e585a01f3962509681a4192b016"}, "downloads": -1, "filename": "binance_aio-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6d9aa91d4eabaa84759472728c543d59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11178, "upload_time": "2020-03-29T16:31:47", "upload_time_iso_8601": "2020-03-29T16:31:47.821676Z", "url": "https://files.pythonhosted.org/packages/e9/ec/61b286a97c0a903001c8f7b026e1a8502037227c79bdbaf45d1528af2a1d/binance_aio-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a305e3d300b6dc60759e907b4128b55", "sha256": "6e8c033a0bfa3e8b58d3ead5863567050eddc31e2a3455d2aab333a35e6a64b7"}, "downloads": -1, "filename": "binance-aio-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8a305e3d300b6dc60759e907b4128b55", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11982, "upload_time": "2020-03-29T16:31:49", "upload_time_iso_8601": "2020-03-29T16:31:49.791278Z", "url": "https://files.pythonhosted.org/packages/ae/f5/0215a57a1c6027b28c28a7f363a16e006937e861e0cc49e9ef7e3d98578c/binance-aio-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "984a8f806ac11f33b2686a9416de935b", "sha256": "f266a6737b51b32037fc1d09c0b50b879b5f9dcd5febd8b141bb49a94bc22c1d"}, "downloads": -1, "filename": "binance_aio-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "984a8f806ac11f33b2686a9416de935b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11178, "upload_time": "2020-03-31T12:36:20", "upload_time_iso_8601": "2020-03-31T12:36:20.828523Z", "url": "https://files.pythonhosted.org/packages/4f/5f/30e74cc1fdc2f3a401b63c76be2c8932b9e8db9162a3c773cf35008fcdbd/binance_aio-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cb9b046ef30de95f8a020060e06a562", "sha256": "81592564cbaf538b8e464e8ce7043e90d38b27cd4dbc10d6a97bc5cc3c0610a3"}, "downloads": -1, "filename": "binance-aio-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2cb9b046ef30de95f8a020060e06a562", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11977, "upload_time": "2020-03-31T12:36:22", "upload_time_iso_8601": "2020-03-31T12:36:22.585314Z", "url": "https://files.pythonhosted.org/packages/e1/b2/557c3885ea15df1298cad57f5e9a802fa66603dbd564cc4b5cd96e2cf994/binance-aio-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "984a8f806ac11f33b2686a9416de935b", "sha256": "f266a6737b51b32037fc1d09c0b50b879b5f9dcd5febd8b141bb49a94bc22c1d"}, "downloads": -1, "filename": "binance_aio-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "984a8f806ac11f33b2686a9416de935b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11178, "upload_time": "2020-03-31T12:36:20", "upload_time_iso_8601": "2020-03-31T12:36:20.828523Z", "url": "https://files.pythonhosted.org/packages/4f/5f/30e74cc1fdc2f3a401b63c76be2c8932b9e8db9162a3c773cf35008fcdbd/binance_aio-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cb9b046ef30de95f8a020060e06a562", "sha256": "81592564cbaf538b8e464e8ce7043e90d38b27cd4dbc10d6a97bc5cc3c0610a3"}, "downloads": -1, "filename": "binance-aio-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2cb9b046ef30de95f8a020060e06a562", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11977, "upload_time": "2020-03-31T12:36:22", "upload_time_iso_8601": "2020-03-31T12:36:22.585314Z", "url": "https://files.pythonhosted.org/packages/e1/b2/557c3885ea15df1298cad57f5e9a802fa66603dbd564cc4b5cd96e2cf994/binance-aio-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:31 2020"}