{"info": {"author": "Mark Taylor", "author_email": "mark66547ta2@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Documentation", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "# phmdoctest 0.0.5\n\n## Introduction\n\nPython syntax highlighted Markdown doctest\n\nCommand line program to test Python syntax highlighted code\nexamples in Markdown.\n\n- No extra tags or html comments needed in the Markdown. No Markdown edits at all.\n- No `<BLANKLINE>` needed in output. [doctest][4].\n- Synthesizes a pytest test file from examples in Markdown.\n- Reads Python source code and expected\n  terminal output from Markdown fenced code blocks.\n- The test cases are run later by calling pytest.  \n- Get code coverage by running pytest with [coverage][6]. \n- An included Python library: [Development tools API][10].\n  - runs phmdoctest and can run pytest too. *(simulator.py)*\n  - functions to read fenced code blocks from Markdown. *(tool.py)*\n\nphmdoctest does **not** do:\n- setup and teardown\n- catch exceptions\n- ellipsis comparisons\n- Python console >>>, ...\n\n##### master branch status\n[![](https://img.shields.io/pypi/l/phmdoctest.svg)](https://github.com/tmarktaylor/phmdoctest/blob/master/LICENSE.txt)\n[![](https://img.shields.io/pypi/v/phmdoctest.svg)](https://pypi.python.org/pypi/phmdoctest)\n[![](https://img.shields.io/pypi/pyversions/phmdoctest.svg)](https://pypi.python.org/pypi/phmdoctest)\n\n[![](https://readthedocs.org/projects/phmdoctest/badge/?version=latest)](https://phmdoctest.readthedocs.io/en/latest/?badge=latest)\n[![](https://travis-ci.org/tmarktaylor/phmdoctest.svg?branch=master)](https://travis-ci.org/tmarktaylor/phmdoctest)\n[![](https://codecov.io/gh/tmarktaylor/phmdoctest/coverage.svg?branch=master)](https://codecov.io/gh/tmarktaylor/phmdoctest?branch=master)\n\n[Documentation](https://phmdoctest.readthedocs.io/en/latest/) |\n[Homepage](https://github.com/tmarktaylor/phmdoctest) |\n[Build](https://travis-ci.org/tmarktaylor/phmdoctest) |\n[Codecov](https://codecov.io/gh/tmarktaylor/phmdoctest?branch=master) |\n[License](https://github.com/tmarktaylor/phmdoctest/blob/master/LICENSE.txt)\n\n\n## Installation\n    pip install phmdoctest\n\n## Sample usage\n\nGiven the Markdown file [example1.md](doc/example1.md)\nshown in raw form here...\n\n~~~\n# This is Markdown file example1.md\nCode:\n```python3\nfrom enum import Enum\n\nclass Floats(Enum):\n    APPLES = 1\n    CIDER = 2\n    CHERRIES = 3\n    ADUCK = 4\nfor floater in Floats:\n    print(floater)\n```\n\nsample output:\n```\nFloats.APPLES\nFloats.CIDER\nFloats.CHERRIES\nFloats.ADUCK\n```\n~~~\n\nthe command...\n```\nphmdoctest doc/example1.md --outfile test_example1.py\n```\n\ncreates the python source code file `test_example1.py` shown here...\n\n```python\n\"\"\"pytest file built from doc/example1.md\"\"\"\nfrom itertools import zip_longest\n\n\ndef line_by_line_compare_exact(a, b):\n    \"\"\"Line by line helper compare function with assertion for pytest.\"\"\"\n    a_lines = a.splitlines()\n    b_lines = b.splitlines()\n    for a_line, b_line in zip_longest(a_lines, b_lines):\n        assert a_line == b_line\n\n\ndef test_code_4_output_17(capsys):\n    from enum import Enum\n\n    class Floats(Enum):\n        APPLES = 1\n        CIDER = 2\n        CHERRIES = 3\n        ADUCK = 4\n    for floater in Floats:\n        print(floater)\n\n    expected_str = \"\"\"\\\nFloats.APPLES\nFloats.CIDER\nFloats.CHERRIES\nFloats.ADUCK\n\"\"\"\n    line_by_line_compare_exact(a=expected_str, b=capsys.readouterr().out)\n```\n\nThen run a pytest command something like this in your terminal\nto test the Markdown code and expected output blocks.\n\n    pytest --strict \n\nThe `4` in the function name `test_code_4_output_17` is the\nline number in [example1.md](doc/example1.md) of the first line\nof python code. `17` shows the line number of the expected \nterminal output.\n\nphmdoctest tries to generate one test case function for each \nPython-code/expected-output Markdown fenced code block pair.\nThe `--report` option below shows the blocks discovered and\nhow phmdoctest will test them.\n\n## --report option\n\nTo see the [GFM fenced code blocks][3] in the MARKDOWN_FILE use the \n--report option like this:\n\n```\nphmdoctest doc/example2.md --report\n```\n\nwhich lists the fenced code blocks it found in\nthe file [example2.md](doc/example2.md).\nThe `test role` column shows how phmdoctest \nwill test each fenced code block.  \n\n```\n        doc/example2.md fenced blocks\n----------------------------------------------\nblock    line  test    skip pattern/reason\ntype   number  role    quoted and one per line\n----------------------------------------------\npy3         9  code\n           14  output\npy3        20  code\n           26  output\n           31  --\npy3        37  code\npy3        44  code\n           51  output\nyaml       59  --\ntext       67  --\npy3        74  code\n           80  output\n----------------------------------------------\n5 test cases\n1 code blocks missing an output block\n```\n\n## How phmdoctest identifies code and output blocks\n\nphmdoctest uses the PYPI [commonmark][7] project to extract fenced code\nblocks from Markdown. Specification [CommonMark Spec][8] and website [CommonMark][9].\n\nOnly [GFM fenced code blocks][3] are considered.\n\nTo be treated as Python code the opening fence should start \nwith one of these:\n\n    ```python\n    ```python3\n    ```py3\n\nIt is ok if the [info string](https://github.github.com/gfm/#info_string)\nis laden with additional text, phmdoctest will ignore it.  The\nentire info string will be shown in the block type column of the\nreport.\n\nOutput blocks are fenced code blocks that immediately follow a\nPython block and start with an opening fence like this which\nhas an empty info string.\n\n    ```\n\nIf a Python block is followed by another Python block or a fenced code block\nwith a non-empty info string the first Python block has no output. \nphmdoctest will still generate test code for it, but there will be no\nassertion statement.\n\n## Skipping Python blocks with the --skip option\n\nIf you don't want to generate test cases for Python\nblocks use the `--skip TEXT` option. More than one `--skip TEXT` \nis allowed.\n\nThe code in each Python block is searched \nfor the substring `TEXT`.  Zero, one or more blocks will contain\nthe substring. These blocks will not generate test cases in the\noutput file.\n\n- The Python code in the fenced code block is searched.\n- The info string is **not** searched.\n- Output blocks are **not** searched.\n- Only Python code blocks are searched.\n- Case is significant.\n\nThe report shows which Python blocks are skipped\nin the test role column and the Python blocks that \nmatched each --skip TEXT in the skips section.\n\nThis option makes it **very easy** to **inadvertently exclude**\nPython blocks from the test cases.  In the event no test cases are\ngenerated, the option `--fail-nocode` described below is useful.\n\nThree special `--skip TEXT` strings work a little differently.\nThey select one of the first, second, or last of the Python blocks.\nOnly Python blocks are counted.\n- `--skip FIRST` skips the first Python block\n- `--skip SECOND` skips the second Python block\n- `--skip LAST` skips the final Python block\n\n## --skip Example\n\nThis command\n```\nphmdoctest doc/example2.md --skip \"Python 3.7\" --skip LAST --report --outfile test_example2.py\n```\n\nProduces the report\n```\n           doc/example2.md fenced blocks\n---------------------------------------------------\nblock    line  test         skip pattern/reason\ntype   number  role         quoted and one per line\n---------------------------------------------------\npy3         9  code\n           14  output\npy3        20  skip-code    \"Python 3.7\"\n           26  skip-output\n           31  --\npy3        37  code\npy3        44  code\n           51  output\nyaml       59  --\ntext       67  --\npy3        74  skip-code    \"LAST\"\n           80  skip-output\n---------------------------------------------------\n3 test cases\n2 skipped code blocks\n1 code blocks missing an output block\n\n  skip pattern matches (blank means no match)\n------------------------------------------------\nskip pattern  matching code block line number(s)\n------------------------------------------------\nPython 3.7    20\nLAST          74\n------------------------------------------------\n```\n\nand creates the output file [test_example2.py][2]\n\n## -s short option form of --skip\n\nThis is the same command as above using the short `-s` form of the --skip option\nin two places.\nIt produces the same report and outfile.\n```\nphmdoctest doc/example2.md -s \"Python 3.7\" -sLAST --report --outfile test_example2.py\n```\n\n## --fail-nocode\n\nThis option produces a pytest file that will always\nfail when no Python code blocks are found.\n\nIf phmdoctest doesn't find any Python code blocks in the\nMarkdown file a pytest file is still generated.\nThis also happens when `--skip` eliminates all the\nPython code blocks. \nThe generated pytest file will have the function\n`def test_nothing_passes()`.\n\nIf the option `--fail-nocode` is passed to phmdoctest the\nfunction is `def test_nothing_fails()` which raises an\nassertion.\n\n\n## Send outfile to standard output\nTo redirect the above outfile to the standard output stream use one\nof these two commands.\n\nBe sure to leave out `--report` when sending --outfile to standard output.\n```\nphmdoctest doc/example2.md -s \"Python 3.7\" -sLAST --outfile -\n```\nor\n```\nphmdoctest doc/example2.md -s \"Python 3.7\" -sLAST --outfile=-\n```\n\n## Usage\n\n`phmdoctest --help`\n\n```\nUsage: phmdoctest [OPTIONS] MARKDOWN_FILE\n\nOptions:\n  --outfile TEXT   Write generated test case file to path TEXT. \"-\" writes to\n                   stdout.\n  -s, --skip TEXT  Any Python block that contains the substring TEXT is not\n                   tested. More than one --skip TEXT is ok. Double quote if\n                   TEXT contains spaces. For example --skip=\"python 3.7\" will\n                   skip every Python block that contains the substring \"python\n                   3.7\". If TEXT is one of the 3 capitalized strings FIRST\n                   SECOND LAST the first, second, or last Python block in the\n                   Markdown file is skipped. The fenced code block info string\n                   is not searched.\n  --report         Show how the Markdown fenced code blocks are used.\n  --fail-nocode    This option sets behavior when the Markdown file has no\n                   Python fenced code blocks or if all such blocks are\n                   skipped. When this option is present the generated pytest\n                   file has a test function called test_nothing_fails() that\n                   will raise an assertion. If this option is not present the\n                   generated pytest file has test_nothing_passes() which will\n                   never fail.\n  --version        Show the version and exit.\n  --help           Show this message and exit.\n```\n\n## Running on Travis CI  \n\nThe partial script shown below is for Python 3.5 on [Travis CI][5].\nThe script steps are:\n\n- Install pytest.\n- Create a new directory to take the generated test file.\n- Run phmdoctest to generate the test file and print the report.\n- Run pytest suite.\n\nWriting the generated test files to a new directory\nassures an existing test file is not overwritten by mistake.\n\n```yaml\ndist: xenial\nlanguage: python\nsudo: false\n\nmatrix:\n  include:\n    - python: 3.5\n      install:\n        - pip install \".\" pytest\n      script:\n        - mkdir tests/tmp\n        - phmdoctest project.md --report --outfile tests/tmp/test_project_readme.py\n        - pytest --strict -vv tests\n```\n\n## Running phmdoctest from the command line as a Python module\n\nHere is an example:\n\n`python -m phmdoctest doc/example2.md --report`\n\n## Testing phmdoctest from within a Python script\n\n`phmdoctest.simulator` offers the function `run_and_pytest()`\nwhich simulates running phmdoctest from the command line.\n- useful during development\n- creates the --outfile in a temporary directory\n- optionally runs pytest on the outfile \n\nPlease see the [Development tools API section][10] or\nthe docstring of the function `run_and_pytest()` in the file `simulator.py.` \npytest_options are passed as a list of strings as shown below.\n\n```python\nimport phmdoctest.simulator\ncommand = 'phmdoctest doc/example1.md --report --outfile test_me.py'\nsimulator_status = phmdoctest.simulator.run_and_pytest(\n    well_formed_command=command,\n    pytest_options=['--strict', '-v']\n)\nassert simulator_status.runner_status.exit_code == 0\nassert simulator_status.pytest_exit_code == 0\n```\n\n## Hints\n\n- phmdoctest can read the Markdown file from the standard input stream.\n  Use `-` for MARKDOWN_FILE.\n- Write the test file to a temporary directory so that\n  it is always up to date.\n- Its easy to use --output by mistake instead of `--outfile`.\n- If Python code block has no output, put assert statements in the code.\n- phmdoctest ignores Markdown indented code blocks ([Spec][8] section 4.4).\n\n\n## Related projects\n- rundoc\n- byexample\n- doexec\n- egtest\n\n[Recent Changes](doc/recent_changes.md)\n\n[3]: https://github.github.com/gfm/#fenced-code-blocks\n[10]: https://phmdoctest.readthedocs.io/en/latest/doc/api.html\n[2]: https://github.com/tmarktaylor/phmdoctest/blob/master/src/phmdoctest/doc/test_example2.py\n[7]: https://pypi.org/project/commonmark\n[8]: https://spec.commonmark.org\n[9]: https://commonmark.org\n[4]: https://docs.python.org/3/library/doctest.html\n[5]: https://docs.travis-ci.com\n[6]: https://pypi.python.org/project/coverage\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tmarktaylor/phmdoctest", "keywords": "documentation doctest markdown regression testing", "license": "", "maintainer": "", "maintainer_email": "", "name": "phmdoctest", "package_url": "https://pypi.org/project/phmdoctest/", "platform": "", "project_url": "https://pypi.org/project/phmdoctest/", "project_urls": {"Bug Reports": "https:/github.com/tmarktaylor/phmdoctest/issues", "Homepage": "https://github.com/tmarktaylor/phmdoctest", "Source": "https://github.com/tmarktaylor/phmdoctest/"}, "release_url": "https://pypi.org/project/phmdoctest/0.0.5/", "requires_dist": ["Click (<8,>=7.1.1)", "commonmark (<1,>=0.9.1)", "monotable (<4,>=2.1.1)", "recommonmark ; extra == 'docs'", "sphinx ; extra == 'docs'", "sphinx-rtd-theme ; extra == 'docs'", "flake8 ; extra == 'inspect'", "pep8-naming ; extra == 'inspect'", "mypy ; extra == 'inspect'", "typing ; extra == 'inspect'", "check-manifest ; extra == 'inspect'", "twine ; extra == 'inspect'", "coverage ; extra == 'test'", "pytest ; extra == 'test'", "codecov ; extra == 'test'"], "requires_python": ">=3.5", "summary": "Python syntax highlighted Markdown doctest.", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>phmdoctest 0.0.5</h1>\n<h2>Introduction</h2>\n<p>Python syntax highlighted Markdown doctest</p>\n<p>Command line program to test Python syntax highlighted code\nexamples in Markdown.</p>\n<ul>\n<li>No extra tags or html comments needed in the Markdown. No Markdown edits at all.</li>\n<li>No <code>&lt;BLANKLINE&gt;</code> needed in output. <a href=\"https://docs.python.org/3/library/doctest.html\" rel=\"nofollow\">doctest</a>.</li>\n<li>Synthesizes a pytest test file from examples in Markdown.</li>\n<li>Reads Python source code and expected\nterminal output from Markdown fenced code blocks.</li>\n<li>The test cases are run later by calling pytest.</li>\n<li>Get code coverage by running pytest with <a href=\"https://pypi.python.org/project/coverage\" rel=\"nofollow\">coverage</a>.</li>\n<li>An included Python library: <a href=\"https://phmdoctest.readthedocs.io/en/latest/doc/api.html\" rel=\"nofollow\">Development tools API</a>.\n<ul>\n<li>runs phmdoctest and can run pytest too. <em>(simulator.py)</em></li>\n<li>functions to read fenced code blocks from Markdown. <em>(tool.py)</em></li>\n</ul>\n</li>\n</ul>\n<p>phmdoctest does <strong>not</strong> do:</p>\n<ul>\n<li>setup and teardown</li>\n<li>catch exceptions</li>\n<li>ellipsis comparisons</li>\n<li>Python console &gt;&gt;&gt;, ...</li>\n</ul>\n<h5>master branch status</h5>\n<p><a href=\"https://github.com/tmarktaylor/phmdoctest/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf7dbe59f80931466fb11853af7898ea0889521b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f70686d646f63746573742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/phmdoctest\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6158ad7d8307aad33c737d9571a034e49e94d712/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70686d646f63746573742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/phmdoctest\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/138c45ad99b2393a5daf472c506235ac9658de50/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70686d646f63746573742e737667\"></a></p>\n<p><a href=\"https://phmdoctest.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43e9f03122b66904158bf8a57f5e9484bd5a9e62/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70686d646f63746573742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/tmarktaylor/phmdoctest\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65d56b43ab1b3b80e573a589eab871ed8c440312/68747470733a2f2f7472617669732d63692e6f72672f746d61726b7461796c6f722f70686d646f63746573742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/tmarktaylor/phmdoctest?branch=master\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50a4c6e8760688cf3e9911c916ef7dc9d3d788af/68747470733a2f2f636f6465636f762e696f2f67682f746d61726b7461796c6f722f70686d646f63746573742f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><a href=\"https://phmdoctest.readthedocs.io/en/latest/\" rel=\"nofollow\">Documentation</a> |\n<a href=\"https://github.com/tmarktaylor/phmdoctest\" rel=\"nofollow\">Homepage</a> |\n<a href=\"https://travis-ci.org/tmarktaylor/phmdoctest\" rel=\"nofollow\">Build</a> |\n<a href=\"https://codecov.io/gh/tmarktaylor/phmdoctest?branch=master\" rel=\"nofollow\">Codecov</a> |\n<a href=\"https://github.com/tmarktaylor/phmdoctest/blob/master/LICENSE.txt\" rel=\"nofollow\">License</a></p>\n<h2>Installation</h2>\n<pre><code>pip install phmdoctest\n</code></pre>\n<h2>Sample usage</h2>\n<p>Given the Markdown file <a href=\"doc/example1.md\" rel=\"nofollow\">example1.md</a>\nshown in raw form here...</p>\n<pre><code># This is Markdown file example1.md\nCode:\n```python3\nfrom enum import Enum\n\nclass Floats(Enum):\n    APPLES = 1\n    CIDER = 2\n    CHERRIES = 3\n    ADUCK = 4\nfor floater in Floats:\n    print(floater)\n```\n\nsample output:\n```\nFloats.APPLES\nFloats.CIDER\nFloats.CHERRIES\nFloats.ADUCK\n```\n</code></pre>\n<p>the command...</p>\n<pre><code>phmdoctest doc/example1.md --outfile test_example1.py\n</code></pre>\n<p>creates the python source code file <code>test_example1.py</code> shown here...</p>\n<pre><span class=\"sd\">\"\"\"pytest file built from doc/example1.md\"\"\"</span>\n<span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">zip_longest</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">line_by_line_compare_exact</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Line by line helper compare function with assertion for pytest.\"\"\"</span>\n    <span class=\"n\">a_lines</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()</span>\n    <span class=\"n\">b_lines</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">a_line</span><span class=\"p\">,</span> <span class=\"n\">b_line</span> <span class=\"ow\">in</span> <span class=\"n\">zip_longest</span><span class=\"p\">(</span><span class=\"n\">a_lines</span><span class=\"p\">,</span> <span class=\"n\">b_lines</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">a_line</span> <span class=\"o\">==</span> <span class=\"n\">b_line</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_code_4_output_17</span><span class=\"p\">(</span><span class=\"n\">capsys</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Floats</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n        <span class=\"n\">APPLES</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">CIDER</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n        <span class=\"n\">CHERRIES</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"n\">ADUCK</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n    <span class=\"k\">for</span> <span class=\"n\">floater</span> <span class=\"ow\">in</span> <span class=\"n\">Floats</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">floater</span><span class=\"p\">)</span>\n\n    <span class=\"n\">expected_str</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">Floats.APPLES</span>\n<span class=\"s2\">Floats.CIDER</span>\n<span class=\"s2\">Floats.CHERRIES</span>\n<span class=\"s2\">Floats.ADUCK</span>\n<span class=\"s2\">\"\"\"</span>\n    <span class=\"n\">line_by_line_compare_exact</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">expected_str</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">capsys</span><span class=\"o\">.</span><span class=\"n\">readouterr</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Then run a pytest command something like this in your terminal\nto test the Markdown code and expected output blocks.</p>\n<pre><code>pytest --strict \n</code></pre>\n<p>The <code>4</code> in the function name <code>test_code_4_output_17</code> is the\nline number in <a href=\"doc/example1.md\" rel=\"nofollow\">example1.md</a> of the first line\nof python code. <code>17</code> shows the line number of the expected\nterminal output.</p>\n<p>phmdoctest tries to generate one test case function for each\nPython-code/expected-output Markdown fenced code block pair.\nThe <code>--report</code> option below shows the blocks discovered and\nhow phmdoctest will test them.</p>\n<h2>--report option</h2>\n<p>To see the <a href=\"https://github.github.com/gfm/#fenced-code-blocks\" rel=\"nofollow\">GFM fenced code blocks</a> in the MARKDOWN_FILE use the\n--report option like this:</p>\n<pre><code>phmdoctest doc/example2.md --report\n</code></pre>\n<p>which lists the fenced code blocks it found in\nthe file <a href=\"doc/example2.md\" rel=\"nofollow\">example2.md</a>.\nThe <code>test role</code> column shows how phmdoctest\nwill test each fenced code block.</p>\n<pre><code>        doc/example2.md fenced blocks\n----------------------------------------------\nblock    line  test    skip pattern/reason\ntype   number  role    quoted and one per line\n----------------------------------------------\npy3         9  code\n           14  output\npy3        20  code\n           26  output\n           31  --\npy3        37  code\npy3        44  code\n           51  output\nyaml       59  --\ntext       67  --\npy3        74  code\n           80  output\n----------------------------------------------\n5 test cases\n1 code blocks missing an output block\n</code></pre>\n<h2>How phmdoctest identifies code and output blocks</h2>\n<p>phmdoctest uses the PYPI <a href=\"https://pypi.org/project/commonmark\" rel=\"nofollow\">commonmark</a> project to extract fenced code\nblocks from Markdown. Specification <a href=\"https://spec.commonmark.org\" rel=\"nofollow\">CommonMark Spec</a> and website <a href=\"https://commonmark.org\" rel=\"nofollow\">CommonMark</a>.</p>\n<p>Only <a href=\"https://github.github.com/gfm/#fenced-code-blocks\" rel=\"nofollow\">GFM fenced code blocks</a> are considered.</p>\n<p>To be treated as Python code the opening fence should start\nwith one of these:</p>\n<pre><code>```python\n```python3\n```py3\n</code></pre>\n<p>It is ok if the <a href=\"https://github.github.com/gfm/#info_string\" rel=\"nofollow\">info string</a>\nis laden with additional text, phmdoctest will ignore it.  The\nentire info string will be shown in the block type column of the\nreport.</p>\n<p>Output blocks are fenced code blocks that immediately follow a\nPython block and start with an opening fence like this which\nhas an empty info string.</p>\n<pre><code>```\n</code></pre>\n<p>If a Python block is followed by another Python block or a fenced code block\nwith a non-empty info string the first Python block has no output.\nphmdoctest will still generate test code for it, but there will be no\nassertion statement.</p>\n<h2>Skipping Python blocks with the --skip option</h2>\n<p>If you don't want to generate test cases for Python\nblocks use the <code>--skip TEXT</code> option. More than one <code>--skip TEXT</code>\nis allowed.</p>\n<p>The code in each Python block is searched\nfor the substring <code>TEXT</code>.  Zero, one or more blocks will contain\nthe substring. These blocks will not generate test cases in the\noutput file.</p>\n<ul>\n<li>The Python code in the fenced code block is searched.</li>\n<li>The info string is <strong>not</strong> searched.</li>\n<li>Output blocks are <strong>not</strong> searched.</li>\n<li>Only Python code blocks are searched.</li>\n<li>Case is significant.</li>\n</ul>\n<p>The report shows which Python blocks are skipped\nin the test role column and the Python blocks that\nmatched each --skip TEXT in the skips section.</p>\n<p>This option makes it <strong>very easy</strong> to <strong>inadvertently exclude</strong>\nPython blocks from the test cases.  In the event no test cases are\ngenerated, the option <code>--fail-nocode</code> described below is useful.</p>\n<p>Three special <code>--skip TEXT</code> strings work a little differently.\nThey select one of the first, second, or last of the Python blocks.\nOnly Python blocks are counted.</p>\n<ul>\n<li><code>--skip FIRST</code> skips the first Python block</li>\n<li><code>--skip SECOND</code> skips the second Python block</li>\n<li><code>--skip LAST</code> skips the final Python block</li>\n</ul>\n<h2>--skip Example</h2>\n<p>This command</p>\n<pre><code>phmdoctest doc/example2.md --skip \"Python 3.7\" --skip LAST --report --outfile test_example2.py\n</code></pre>\n<p>Produces the report</p>\n<pre><code>           doc/example2.md fenced blocks\n---------------------------------------------------\nblock    line  test         skip pattern/reason\ntype   number  role         quoted and one per line\n---------------------------------------------------\npy3         9  code\n           14  output\npy3        20  skip-code    \"Python 3.7\"\n           26  skip-output\n           31  --\npy3        37  code\npy3        44  code\n           51  output\nyaml       59  --\ntext       67  --\npy3        74  skip-code    \"LAST\"\n           80  skip-output\n---------------------------------------------------\n3 test cases\n2 skipped code blocks\n1 code blocks missing an output block\n\n  skip pattern matches (blank means no match)\n------------------------------------------------\nskip pattern  matching code block line number(s)\n------------------------------------------------\nPython 3.7    20\nLAST          74\n------------------------------------------------\n</code></pre>\n<p>and creates the output file <a href=\"https://github.com/tmarktaylor/phmdoctest/blob/master/src/phmdoctest/doc/test_example2.py\" rel=\"nofollow\">test_example2.py</a></p>\n<h2>-s short option form of --skip</h2>\n<p>This is the same command as above using the short <code>-s</code> form of the --skip option\nin two places.\nIt produces the same report and outfile.</p>\n<pre><code>phmdoctest doc/example2.md -s \"Python 3.7\" -sLAST --report --outfile test_example2.py\n</code></pre>\n<h2>--fail-nocode</h2>\n<p>This option produces a pytest file that will always\nfail when no Python code blocks are found.</p>\n<p>If phmdoctest doesn't find any Python code blocks in the\nMarkdown file a pytest file is still generated.\nThis also happens when <code>--skip</code> eliminates all the\nPython code blocks.\nThe generated pytest file will have the function\n<code>def test_nothing_passes()</code>.</p>\n<p>If the option <code>--fail-nocode</code> is passed to phmdoctest the\nfunction is <code>def test_nothing_fails()</code> which raises an\nassertion.</p>\n<h2>Send outfile to standard output</h2>\n<p>To redirect the above outfile to the standard output stream use one\nof these two commands.</p>\n<p>Be sure to leave out <code>--report</code> when sending --outfile to standard output.</p>\n<pre><code>phmdoctest doc/example2.md -s \"Python 3.7\" -sLAST --outfile -\n</code></pre>\n<p>or</p>\n<pre><code>phmdoctest doc/example2.md -s \"Python 3.7\" -sLAST --outfile=-\n</code></pre>\n<h2>Usage</h2>\n<p><code>phmdoctest --help</code></p>\n<pre><code>Usage: phmdoctest [OPTIONS] MARKDOWN_FILE\n\nOptions:\n  --outfile TEXT   Write generated test case file to path TEXT. \"-\" writes to\n                   stdout.\n  -s, --skip TEXT  Any Python block that contains the substring TEXT is not\n                   tested. More than one --skip TEXT is ok. Double quote if\n                   TEXT contains spaces. For example --skip=\"python 3.7\" will\n                   skip every Python block that contains the substring \"python\n                   3.7\". If TEXT is one of the 3 capitalized strings FIRST\n                   SECOND LAST the first, second, or last Python block in the\n                   Markdown file is skipped. The fenced code block info string\n                   is not searched.\n  --report         Show how the Markdown fenced code blocks are used.\n  --fail-nocode    This option sets behavior when the Markdown file has no\n                   Python fenced code blocks or if all such blocks are\n                   skipped. When this option is present the generated pytest\n                   file has a test function called test_nothing_fails() that\n                   will raise an assertion. If this option is not present the\n                   generated pytest file has test_nothing_passes() which will\n                   never fail.\n  --version        Show the version and exit.\n  --help           Show this message and exit.\n</code></pre>\n<h2>Running on Travis CI</h2>\n<p>The partial script shown below is for Python 3.5 on <a href=\"https://docs.travis-ci.com\" rel=\"nofollow\">Travis CI</a>.\nThe script steps are:</p>\n<ul>\n<li>Install pytest.</li>\n<li>Create a new directory to take the generated test file.</li>\n<li>Run phmdoctest to generate the test file and print the report.</li>\n<li>Run pytest suite.</li>\n</ul>\n<p>Writing the generated test files to a new directory\nassures an existing test file is not overwritten by mistake.</p>\n<pre><span class=\"nt\">dist</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">xenial</span>\n<span class=\"nt\">language</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python</span>\n<span class=\"nt\">sudo</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n\n<span class=\"nt\">matrix</span><span class=\"p\">:</span>\n  <span class=\"nt\">include</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">python</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">3.5</span>\n      <span class=\"nt\">install</span><span class=\"p\">:</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">pip install \".\" pytest</span>\n      <span class=\"nt\">script</span><span class=\"p\">:</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">mkdir tests/tmp</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">phmdoctest project.md --report --outfile tests/tmp/test_project_readme.py</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">pytest --strict -vv tests</span>\n</pre>\n<h2>Running phmdoctest from the command line as a Python module</h2>\n<p>Here is an example:</p>\n<p><code>python -m phmdoctest doc/example2.md --report</code></p>\n<h2>Testing phmdoctest from within a Python script</h2>\n<p><code>phmdoctest.simulator</code> offers the function <code>run_and_pytest()</code>\nwhich simulates running phmdoctest from the command line.</p>\n<ul>\n<li>useful during development</li>\n<li>creates the --outfile in a temporary directory</li>\n<li>optionally runs pytest on the outfile</li>\n</ul>\n<p>Please see the <a href=\"https://phmdoctest.readthedocs.io/en/latest/doc/api.html\" rel=\"nofollow\">Development tools API section</a> or\nthe docstring of the function <code>run_and_pytest()</code> in the file <code>simulator.py.</code>\npytest_options are passed as a list of strings as shown below.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">phmdoctest.simulator</span>\n<span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"s1\">'phmdoctest doc/example1.md --report --outfile test_me.py'</span>\n<span class=\"n\">simulator_status</span> <span class=\"o\">=</span> <span class=\"n\">phmdoctest</span><span class=\"o\">.</span><span class=\"n\">simulator</span><span class=\"o\">.</span><span class=\"n\">run_and_pytest</span><span class=\"p\">(</span>\n    <span class=\"n\">well_formed_command</span><span class=\"o\">=</span><span class=\"n\">command</span><span class=\"p\">,</span>\n    <span class=\"n\">pytest_options</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'--strict'</span><span class=\"p\">,</span> <span class=\"s1\">'-v'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">simulator_status</span><span class=\"o\">.</span><span class=\"n\">runner_status</span><span class=\"o\">.</span><span class=\"n\">exit_code</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"k\">assert</span> <span class=\"n\">simulator_status</span><span class=\"o\">.</span><span class=\"n\">pytest_exit_code</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre>\n<h2>Hints</h2>\n<ul>\n<li>phmdoctest can read the Markdown file from the standard input stream.\nUse <code>-</code> for MARKDOWN_FILE.</li>\n<li>Write the test file to a temporary directory so that\nit is always up to date.</li>\n<li>Its easy to use --output by mistake instead of <code>--outfile</code>.</li>\n<li>If Python code block has no output, put assert statements in the code.</li>\n<li>phmdoctest ignores Markdown indented code blocks (<a href=\"https://spec.commonmark.org\" rel=\"nofollow\">Spec</a> section 4.4).</li>\n</ul>\n<h2>Related projects</h2>\n<ul>\n<li>rundoc</li>\n<li>byexample</li>\n<li>doexec</li>\n<li>egtest</li>\n</ul>\n<p><a href=\"doc/recent_changes.md\" rel=\"nofollow\">Recent Changes</a></p>\n\n          </div>"}, "last_serial": 7061412, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "4c11d8017ec07d12d0cbf9e10e900c05", "sha256": "ac45ac3b4d8d5cc331639ca737be6d955055dee80306d528629e4b15cd147277"}, "downloads": -1, "filename": "phmdoctest-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4c11d8017ec07d12d0cbf9e10e900c05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15279, "upload_time": "2020-03-18T18:51:47", "upload_time_iso_8601": "2020-03-18T18:51:47.260713Z", "url": "https://files.pythonhosted.org/packages/9a/af/1eedbdc62802720aa9c86a051cac9d68f54d5a06cd5eb22a3ea6c6a04fa4/phmdoctest-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a9f1619714cc7347a9256cc5f3c0c6f", "sha256": "0828d3529a1c343e12554b52aaa3af2fb9570962889bb2a7f05139e829c1e4fc"}, "downloads": -1, "filename": "phmdoctest-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2a9f1619714cc7347a9256cc5f3c0c6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26769, "upload_time": "2020-03-18T18:51:49", "upload_time_iso_8601": "2020-03-18T18:51:49.661432Z", "url": "https://files.pythonhosted.org/packages/da/ad/bff0ed1e9b186fd4c784cc11b6519fc8b1d99411a7104b606fd637d74ade/phmdoctest-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "0e03b19c143170854ce5d2965dda6134", "sha256": "cfe12023df6747d7cf0327eb99f761d300e0ed8f4b462b2d962c8db0e07f215f"}, "downloads": -1, "filename": "phmdoctest-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0e03b19c143170854ce5d2965dda6134", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15295, "upload_time": "2020-03-18T19:31:48", "upload_time_iso_8601": "2020-03-18T19:31:48.904542Z", "url": "https://files.pythonhosted.org/packages/61/d4/70c923e07dc1b8af0cea24d8f5035edafcf106a2f888caaf2d2e2ab04cb3/phmdoctest-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "225d99c21f95d35bc53cd7abd2aad692", "sha256": "95cf47477f9aa7e45f785eeb657273907560b45a0a670c948fa81f61d77adb30"}, "downloads": -1, "filename": "phmdoctest-0.0.3.tar.gz", "has_sig": false, "md5_digest": "225d99c21f95d35bc53cd7abd2aad692", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26793, "upload_time": "2020-03-18T19:31:50", "upload_time_iso_8601": "2020-03-18T19:31:50.024967Z", "url": "https://files.pythonhosted.org/packages/68/8e/1c7e7d80271a85ea4588d19a70bf1b60be3464fe17d13ff8796f5a0c10ee/phmdoctest-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "138404c834babe56c31451ebc0109db3", "sha256": "da2733ebab2d6d56127dd6684f3523b7e45ebb4a8c5e508195f0dbe6e98df78e"}, "downloads": -1, "filename": "phmdoctest-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "138404c834babe56c31451ebc0109db3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15427, "upload_time": "2020-04-02T17:28:38", "upload_time_iso_8601": "2020-04-02T17:28:38.377248Z", "url": "https://files.pythonhosted.org/packages/a8/ac/5f40287f5935b0bf97f3fbe8e8626f7cf87d502431710c0886f3099b2e00/phmdoctest-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c8db924d8446cfd028eb5bac90567ce", "sha256": "42f0d6f473919343e653656ddc07cd377a546ca1681c1892549d4b40b6509873"}, "downloads": -1, "filename": "phmdoctest-0.0.4.tar.gz", "has_sig": false, "md5_digest": "8c8db924d8446cfd028eb5bac90567ce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 30803, "upload_time": "2020-04-02T17:28:39", "upload_time_iso_8601": "2020-04-02T17:28:39.513796Z", "url": "https://files.pythonhosted.org/packages/a3/89/198adfe1afdf0a7cdec48f0ad22e962b38ec8e739495f52eab1ba20943c8/phmdoctest-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "ae34128586ebd6beb5faecbb800ef255", "sha256": "b781d01f4086dc3b571e3048b930381dd8ced9106e1cdb536a4ceb41fcadc0e9"}, "downloads": -1, "filename": "phmdoctest-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ae34128586ebd6beb5faecbb800ef255", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15623, "upload_time": "2020-04-20T16:43:07", "upload_time_iso_8601": "2020-04-20T16:43:07.817096Z", "url": "https://files.pythonhosted.org/packages/d6/1c/f5fc23e43314c03451a709fa040b3e0f9ab6e2f2e75944cf69dcc04e064c/phmdoctest-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7104952abe94d2168bafcdbdb0181df9", "sha256": "fb74318c154ffd69112f8a58d12428f6eb71382f141e77d71a8efdb2dc3118cf"}, "downloads": -1, "filename": "phmdoctest-0.0.5.tar.gz", "has_sig": false, "md5_digest": "7104952abe94d2168bafcdbdb0181df9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 32578, "upload_time": "2020-04-20T16:43:09", "upload_time_iso_8601": "2020-04-20T16:43:09.196875Z", "url": "https://files.pythonhosted.org/packages/f9/24/bb6f31e88d564bd27065478edc5984a08ccafd5e660c70bd3ae676f51231/phmdoctest-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae34128586ebd6beb5faecbb800ef255", "sha256": "b781d01f4086dc3b571e3048b930381dd8ced9106e1cdb536a4ceb41fcadc0e9"}, "downloads": -1, "filename": "phmdoctest-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ae34128586ebd6beb5faecbb800ef255", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15623, "upload_time": "2020-04-20T16:43:07", "upload_time_iso_8601": "2020-04-20T16:43:07.817096Z", "url": "https://files.pythonhosted.org/packages/d6/1c/f5fc23e43314c03451a709fa040b3e0f9ab6e2f2e75944cf69dcc04e064c/phmdoctest-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7104952abe94d2168bafcdbdb0181df9", "sha256": "fb74318c154ffd69112f8a58d12428f6eb71382f141e77d71a8efdb2dc3118cf"}, "downloads": -1, "filename": "phmdoctest-0.0.5.tar.gz", "has_sig": false, "md5_digest": "7104952abe94d2168bafcdbdb0181df9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 32578, "upload_time": "2020-04-20T16:43:09", "upload_time_iso_8601": "2020-04-20T16:43:09.196875Z", "url": "https://files.pythonhosted.org/packages/f9/24/bb6f31e88d564bd27065478edc5984a08ccafd5e660c70bd3ae676f51231/phmdoctest-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:29 2020"}