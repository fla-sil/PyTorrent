{"info": {"author": "Marko Ristin", "author_email": "marko@parquery.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5"], "description": "temppathlib\n===========\n\ntemppathlib provides wrappers around ``tempfile`` so that you can directly use them together with ``pathlib`` module.\nWe found it cumbersome to convert ``tempfile`` objects manually to ``pathlib.Path`` whenever we needed a temporary\nfile.\n\nAdditionally, we also provide:\n\n* a context manager ``removing_tree`` that checks if a path exists and recursively deletes it\n  by wrapping ``shutil.rmtree``.\n\n* a context manager ``TmpDirIfNecessary`` that creates a temporary directory if no directory is given and otherwise\n  uses a supplied directory. This is useful when you want to keep some of the temporary files for examination\n  after the program finished. We usually specify an optional ``--operation_dir`` command-line argument to our programs\n  and pass its value to the ``TmpDirIfNecessary``.\n\nIf you need a more complex library to transition from string paths to ``pathlib.Path``, have a look at\nruamel.std.pathlib_.\n\n.. _ruamel.std.pathlib: https://pypi.org/project/ruamel.std.pathlib/\n\nUsage\n=====\n.. code-block:: python\n\n    import pathlib\n\n    import temppathlib\n\n    # create a temporary directory\n    with temppathlib.TemporaryDirectory() as tmp_dir:\n        tmp_pth = tmp_dir.path / \"some-filename.txt\"\n        # do something else with tmp_dir ...\n\n    # create a temporary file\n    with temppathlib.NamedTemporaryFile() as tmp:\n        # write to it\n        tmp.file.write('hello'.encode())\n        tmp.file.flush()\n\n        # you can use its path.\n        target_pth = pathlib.Path('/some/permanent/directory') / tmp.path.name\n\n    # create a temporary directory only if necessary\n    operation_dir = pathlib.Path(\"/some/operation/directory)\n    with temppathlib.TmpDirIfNecessary(path=operation_dir) as op_dir:\n        # do something with the operation directory\n        pth = op_dir.path / \"some-file.txt\"\n\n        # operation_dir is not deleted since 'path' was specified.\n\n\n    with temppathlib.TmpDirIfNecessary() as op_dir:\n        # do something with the operation directory\n        pth = op_dir.path / \"some-file.txt\"\n\n        # op_dir is deleted since 'path' argument was not specified.\n\n    # context manager to remove the path recursively\n    pth = pathlib.Path('/some/directory')\n    with temppathlib.removing_tree(pth):\n        # do something in the directory ...\n        pass\n\nInstallation\n============\n\n* Create a virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* Activate it:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* Install temppathlib with pip:\n\n.. code-block:: bash\n\n    pip3 install temppathlib\n\nDevelopment\n===========\n\n* Check out the repository.\n\n* In the repository root, create the virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* Activate the virtual environment:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* Install the development dependencies:\n\n.. code-block:: bash\n\n    pip3 install -e .[dev]\n\n* We use tox for testing and packaging the distribution. Assuming that the virtual environment has been activated and\n  the development dependencies have been installed, run:\n\n.. code-block:: bash\n\n    tox\n\n* We also provide a set of pre-commit checks that lint and check code for formatting. Run them locally from an activated\n  virtual environment with development dependencies:\n\n.. code-block:: bash\n\n    ./precommit.py\n\n* The pre-commit script can also automatically format the code:\n\n.. code-block:: bash\n\n    ./precommit.py  --overwrite\n\nVersioning\n==========\nWe follow `Semantic Versioning <http://semver.org/spec/v1.0.0.html>`_. The version X.Y.Z indicates:\n\n* X is the major version (backward-incompatible),\n* Y is the minor version (backward-compatible), and\n* Z is the patch version (backward-compatible bug fix).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Parquery/temppathlib", "keywords": "tempfile pathlib temporary file directory mkdtemp mkstemp", "license": "", "maintainer": "", "maintainer_email": "", "name": "temppathlib", "package_url": "https://pypi.org/project/temppathlib/", "platform": "", "project_url": "https://pypi.org/project/temppathlib/", "project_urls": {"Homepage": "https://github.com/Parquery/temppathlib"}, "release_url": "https://pypi.org/project/temppathlib/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "Wraps tempfile to give you pathlib.Path.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"temppathlib\">\n<h2>temppathlib</h2>\n<p>temppathlib provides wrappers around <tt>tempfile</tt> so that you can directly use them together with <tt>pathlib</tt> module.\nWe found it cumbersome to convert <tt>tempfile</tt> objects manually to <tt>pathlib.Path</tt> whenever we needed a temporary\nfile.</p>\n<p>Additionally, we also provide:</p>\n<ul>\n<li>a context manager <tt>removing_tree</tt> that checks if a path exists and recursively deletes it\nby wrapping <tt>shutil.rmtree</tt>.</li>\n<li>a context manager <tt>TmpDirIfNecessary</tt> that creates a temporary directory if no directory is given and otherwise\nuses a supplied directory. This is useful when you want to keep some of the temporary files for examination\nafter the program finished. We usually specify an optional <tt><span class=\"pre\">--operation_dir</span></tt> command-line argument to our programs\nand pass its value to the <tt>TmpDirIfNecessary</tt>.</li>\n</ul>\n<p>If you need a more complex library to transition from string paths to <tt>pathlib.Path</tt>, have a look at\n<a href=\"https://pypi.org/project/ruamel.std.pathlib/\" rel=\"nofollow\">ruamel.std.pathlib</a>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">temppathlib</span>\n\n<span class=\"c1\"># create a temporary directory</span>\n<span class=\"k\">with</span> <span class=\"n\">temppathlib</span><span class=\"o\">.</span><span class=\"n\">TemporaryDirectory</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tmp_dir</span><span class=\"p\">:</span>\n    <span class=\"n\">tmp_pth</span> <span class=\"o\">=</span> <span class=\"n\">tmp_dir</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">/</span> <span class=\"s2\">\"some-filename.txt\"</span>\n    <span class=\"c1\"># do something else with tmp_dir ...</span>\n\n<span class=\"c1\"># create a temporary file</span>\n<span class=\"k\">with</span> <span class=\"n\">temppathlib</span><span class=\"o\">.</span><span class=\"n\">NamedTemporaryFile</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tmp</span><span class=\"p\">:</span>\n    <span class=\"c1\"># write to it</span>\n    <span class=\"n\">tmp</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span>\n    <span class=\"n\">tmp</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># you can use its path.</span>\n    <span class=\"n\">target_pth</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/some/permanent/directory'</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">tmp</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<span class=\"c1\"># create a temporary directory only if necessary</span>\n<span class=\"n\">operation_dir</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"/some/operation/directory)</span>\n<span class=\"k\">with</span> <span class=\"n\">temppathlib</span><span class=\"o\">.</span><span class=\"n\">TmpDirIfNecessary</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">operation_dir</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">op_dir</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do something with the operation directory</span>\n    <span class=\"n\">pth</span> <span class=\"o\">=</span> <span class=\"n\">op_dir</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">/</span> <span class=\"s2\">\"some-file.txt\"</span>\n\n    <span class=\"c1\"># operation_dir is not deleted since 'path' was specified.</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">temppathlib</span><span class=\"o\">.</span><span class=\"n\">TmpDirIfNecessary</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">op_dir</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do something with the operation directory</span>\n    <span class=\"n\">pth</span> <span class=\"o\">=</span> <span class=\"n\">op_dir</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">/</span> <span class=\"s2\">\"some-file.txt\"</span>\n\n    <span class=\"c1\"># op_dir is deleted since 'path' argument was not specified.</span>\n\n<span class=\"c1\"># context manager to remove the path recursively</span>\n<span class=\"n\">pth</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/some/directory'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">temppathlib</span><span class=\"o\">.</span><span class=\"n\">removing_tree</span><span class=\"p\">(</span><span class=\"n\">pth</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do something in the directory ...</span>\n    <span class=\"k\">pass</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li>Create a virtual environment:</li>\n</ul>\n<pre>python3 -m venv venv3\n</pre>\n<ul>\n<li>Activate it:</li>\n</ul>\n<pre><span class=\"nb\">source</span> venv3/bin/activate\n</pre>\n<ul>\n<li>Install temppathlib with pip:</li>\n</ul>\n<pre>pip3 install temppathlib\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<ul>\n<li>Check out the repository.</li>\n<li>In the repository root, create the virtual environment:</li>\n</ul>\n<pre>python3 -m venv venv3\n</pre>\n<ul>\n<li>Activate the virtual environment:</li>\n</ul>\n<pre><span class=\"nb\">source</span> venv3/bin/activate\n</pre>\n<ul>\n<li>Install the development dependencies:</li>\n</ul>\n<pre>pip3 install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<ul>\n<li>We use tox for testing and packaging the distribution. Assuming that the virtual environment has been activated and\nthe development dependencies have been installed, run:</li>\n</ul>\n<pre>tox\n</pre>\n<ul>\n<li>We also provide a set of pre-commit checks that lint and check code for formatting. Run them locally from an activated\nvirtual environment with development dependencies:</li>\n</ul>\n<pre>./precommit.py\n</pre>\n<ul>\n<li>The pre-commit script can also automatically format the code:</li>\n</ul>\n<pre>./precommit.py  --overwrite\n</pre>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>We follow <a href=\"http://semver.org/spec/v1.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>. The version X.Y.Z indicates:</p>\n<ul>\n<li>X is the major version (backward-incompatible),</li>\n<li>Y is the minor version (backward-compatible), and</li>\n<li>Z is the patch version (backward-compatible bug fix).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6548233, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "26c990f904a97ce28006aaf292a03393", "sha256": "95b172534bd8af2e983d607b94a780a424f181d1cd6aab4324a46683531e9c11"}, "downloads": -1, "filename": "temppathlib-1.0.0.tar.gz", "has_sig": false, "md5_digest": "26c990f904a97ce28006aaf292a03393", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4683, "upload_time": "2018-05-03T07:15:01", "upload_time_iso_8601": "2018-05-03T07:15:01.507183Z", "url": "https://files.pythonhosted.org/packages/73/59/d4657f0d164764799e06e175934187f3aef172d415760a6b585d53d0731c/temppathlib-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8bb56c9d963d7c312e5542258e99217a", "sha256": "eb63a87c3af74939ea9eaf4951efa45f19c3f48ff94d3e2a6e4204042cfeee49"}, "downloads": -1, "filename": "temppathlib-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8bb56c9d963d7c312e5542258e99217a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4705, "upload_time": "2018-06-14T05:08:42", "upload_time_iso_8601": "2018-06-14T05:08:42.359307Z", "url": "https://files.pythonhosted.org/packages/45/5e/8d3bb62bf803bd744949711100160d565a276ad592a0eacfc029ff0c1805/temppathlib-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "417ab6e06106827613f05d237f36525b", "sha256": "e192cb6cd900781584d1e1a3467a40b5fe69df33be3b17795553e1ecb69a0193"}, "downloads": -1, "filename": "temppathlib-1.0.2.tar.gz", "has_sig": false, "md5_digest": "417ab6e06106827613f05d237f36525b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4788, "upload_time": "2018-08-03T12:40:51", "upload_time_iso_8601": "2018-08-03T12:40:51.134872Z", "url": "https://files.pythonhosted.org/packages/e8/0f/5f7c4ef618b6bba67de132ef06ab57fcb2f7cdce3e3192f91430eee0ba42/temppathlib-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "333a80a1074d9738cb7b9ba965b8fe61", "sha256": "58eaea9190639591f5005289e128b3b822eb5a3341d538ffdb7e67a73526421a"}, "downloads": -1, "filename": "temppathlib-1.0.3.tar.gz", "has_sig": false, "md5_digest": "333a80a1074d9738cb7b9ba965b8fe61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4842, "upload_time": "2018-08-03T13:20:40", "upload_time_iso_8601": "2018-08-03T13:20:40.698303Z", "url": "https://files.pythonhosted.org/packages/93/93/c08ef671b550c57c2bd57e173795e6669221af847bd3b29702e3df427615/temppathlib-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "333a80a1074d9738cb7b9ba965b8fe61", "sha256": "58eaea9190639591f5005289e128b3b822eb5a3341d538ffdb7e67a73526421a"}, "downloads": -1, "filename": "temppathlib-1.0.3.tar.gz", "has_sig": false, "md5_digest": "333a80a1074d9738cb7b9ba965b8fe61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4842, "upload_time": "2018-08-03T13:20:40", "upload_time_iso_8601": "2018-08-03T13:20:40.698303Z", "url": "https://files.pythonhosted.org/packages/93/93/c08ef671b550c57c2bd57e173795e6669221af847bd3b29702e3df427615/temppathlib-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:39 2020"}