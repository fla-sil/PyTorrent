{"info": {"author": "Adam Geitgey", "author_email": "ageitgey@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "Face Recognition\n================\n\n| Recognize and manipulate faces from Python or from the command line\n  with\n| the world's simplest face recognition library.\n\n| Built using `dlib <http://dlib.net/>`__'s state-of-the-art face\n  recognition\n| built with deep learning. The model has an accuracy of 99.38% on the\n| `Labeled Faces in the Wild <http://vis-www.cs.umass.edu/lfw/>`__\n  benchmark.\n\n| This also provides a simple ``face_recognition`` command line tool\n  that lets\n| you do face recognition on a folder of images from the command line!\n\n| |PyPI|\n| |Build Status|\n| |Documentation Status|\n\nFeatures\n--------\n\nFind faces in pictures\n^^^^^^^^^^^^^^^^^^^^^^\n\nFind all the faces that appear in a picture:\n\n|image3|\n\n.. code:: python\n\n    import face_recognition\n    image = face_recognition.load_image_file(\"your_file.jpg\")\n    face_locations = face_recognition.face_locations(image)\n\nFind and manipulate facial features in pictures\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGet the locations and outlines of each person's eyes, nose, mouth and\nchin.\n\n|image4|\n\n.. code:: python\n\n    import face_recognition\n    image = face_recognition.load_image_file(\"your_file.jpg\")\n    face_landmarks_list = face_recognition.face_landmarks(image)\n\n| Finding facial features is super useful for lots of important stuff.\n  But you can also use for really stupid stuff\n| like applying `digital\n  make-up <https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py>`__\n  (think 'Meitu'):\n\n|image5|\n\nIdentify faces in pictures\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRecognize who appears in each photo.\n\n|image6|\n\n.. code:: python\n\n    import face_recognition\n    known_image = face_recognition.load_image_file(\"biden.jpg\")\n    unknown_image = face_recognition.load_image_file(\"unknown.jpg\")\n\n    biden_encoding = face_recognition.face_encodings(known_image)[0]\n    unknown_encoding = face_recognition.face_encodings(unknown_image)[0]\n\n    results = face_recognition.compare_faces([biden_encoding], unknown_encoding)\n\nYou can even use this library with other Python libraries to do\nreal-time face recognition:\n\n|image7|\n\nSee `this\nexample <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py>`__\nfor the code.\n\nInstallation\n------------\n\nRequirements:\n\n-  Python 3+ or Python 2.7\n-  macOS or Linux (Windows untested)\n-  `Also can run on a Raspberry Pi 2+ (follow these specific\n   instructions) <https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65>`__\n-  A `pre-configured VM\n   image <https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b>`__\n   is also available.\n\nInstall this module from pypi using ``pip3`` (or ``pip2`` for Python 2):\n\n.. code:: bash\n\n    pip3 install face_recognition\n\n| IMPORTANT NOTE: It's very likely that you will run into problems when\n  pip tries to compile\n| the ``dlib`` dependency. If that happens, check out this guide to\n  installing\n| dlib from source (instead of from pip) to fix the error:\n\n`How to install dlib from\nsource <https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf>`__\n\n| After manually installing ``dlib``, try running\n  ``pip3 install face_recognition``\n| again to complete your installation.\n\n| If you are still having trouble installing this, you can also try out\n  this\n| `pre-configured\n  VM <https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b>`__.\n\nUsage\n-----\n\nCommand-Line Interface\n^^^^^^^^^^^^^^^^^^^^^^\n\n| When you install ``face_recognition``, you get a simple command-line\n  program\n| called ``face_recognition`` that you can use to recognize faces in a\n| photograph or folder full for photographs.\n\n| First, you need to provide a folder with one picture of each person\n  you\n| already know. There should be one image file for each person with the\n| files named according to who is in the picture:\n\n|known|\n\nNext, you need a second folder with the files you want to identify:\n\n|unknown|\n\n| Then in you simply run the command ``face_recognition``, passing in\n| the folder of known people and the folder (or single image) with\n  unknown\n| people and it tells you who is in each image:\n\n.. code:: bash\n\n    $ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/\n\n    /unknown_pictures/unknown.jpg,Barack Obama\n    /face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n\n| There's one line in the output for each face. The data is\n  comma-separated\n| with the filename and the name of the person found.\n\n| An ``unknown_person`` is a face in the image that didn't match anyone\n  in\n| your folder of known people.\n\nAdjusting Tolerance / Sensitivity\n'''''''''''''''''''''''''''''''''\n\n| If you are getting multiple matches for the same person, it might be\n  that\n| the people in your photos look very similar and a lower tolerance\n  value\n| is needed to make face comparisons more strict.\n\n| You can do that with the ``--tolerance`` parameter. The default\n  tolerance\n| value is 0.6 and lower numbers make face comparisons more strict:\n\n.. code:: bash\n\n    $ face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/\n\n    /unknown_pictures/unknown.jpg,Barack Obama\n    /face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n\n| If you want to see the face distance calculated for each match in\n  order\n| to adjust the tolerance setting, you can use ``--show-distance true``:\n\n.. code:: bash\n\n    $ face_recognition --show-distance true ./pictures_of_people_i_know/ ./unknown_pictures/\n\n    /unknown_pictures/unknown.jpg,Barack Obama,0.378542298956785\n    /face_recognition_test/unknown_pictures/unknown.jpg,unknown_person,None\n\nMore Examples\n'''''''''''''\n\n| If you simply want to know the names of the people in each photograph\n  but don't\n| care about file names, you could do this:\n\n.. code:: bash\n\n    $ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ | cut -d ',' -f2\n\n    Barack Obama\n    unknown_person\n\nSpeeding up Face Recognition\n''''''''''''''''''''''''''''\n\n| Face recognition can be done in parallel if you have a computer with\n| multiple CPU cores. For example if your system has 4 CPU cores, you\n  can\n| process about 4 times as many images in the same amount of time by\n  using\n| all your CPU cores in parallel.\n\nIf you are using Python 3.4 or newer, pass in a\n``--cpus <number_of_cpu_cores_to_use>`` parameter:\n\n.. code:: bash\n\n    $ face_recognition -cpus 4 ./pictures_of_people_i_know/ ./unknown_pictures/\n\nYou can also pass in ``--cpus -1`` to use all CPU cores in your system.\n\nPython Module\n^^^^^^^^^^^^^\n\n| You can import the ``face_recognition`` module and then easily\n  manipulate\n| faces with just a couple of lines of code. It's super easy!\n\nAPI Docs:\n`https://face-recognition.readthedocs.io <https://face-recognition.readthedocs.io/en/latest/face_recognition.html>`__.\n\nAutomatically find all the faces in an image\n''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    import face_recognition\n\n    image = face_recognition.load_image_file(\"my_picture.jpg\")\n    face_locations = face_recognition.face_locations(image)\n\n    # face_locations is now an array listing the co-ordinates of each face!\n\n| See `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py>`__\n| to try it out.\n\nYou can also opt-in to a somewhat more accurate deep-learning-based face\ndetection model.\n\n| Note: GPU acceleration (via nvidia's CUDA library) is required for\n  good\n| performance with this model. You'll also want to enable CUDA support\n| when compliling ``dlib``.\n\n.. code:: python\n\n    import face_recognition\n\n    image = face_recognition.load_image_file(\"my_picture.jpg\")\n    face_locations = face_recognition.face_locations(image, model=\"cnn\")\n\n    # face_locations is now an array listing the co-ordinates of each face!\n\n| See `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py>`__\n| to try it out.\n\n| If you have a lot of images and a GPU, you can also\n| `find faces in\n  batches <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py>`__.\n\nAutomatically locate the facial features of a person in an image\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    import face_recognition\n\n    image = face_recognition.load_image_file(\"my_picture.jpg\")\n    face_landmarks_list = face_recognition.face_landmarks(image)\n\n    # face_landmarks_list is now an array with the locations of each facial feature in each face.\n    # face_landmarks_list[0]['left_eye'] would be the location and outline of the first person's left eye.\n\n| See `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py>`__\n| to try it out.\n\nRecognize faces in images and identify who they are\n'''''''''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    import face_recognition\n\n    picture_of_me = face_recognition.load_image_file(\"me.jpg\")\n    my_face_encoding = face_recognition.face_encodings(picture_of_me)[0]\n\n    # my_face_encoding now contains a universal 'encoding' of my facial features that can be compared to any other picture of a face!\n\n    unknown_picture = face_recognition.load_image_file(\"unknown.jpg\")\n    unknown_face_encoding = face_recognition.face_encodings(unknown_picture)[0]\n\n    # Now we can see the two face encodings are of the same person with `compare_faces`!\n\n    results = face_recognition.compare_faces([my_face_encoding], unknown_face_encoding)\n\n    if results[0] == True:\n        print(\"It's a picture of me!\")\n    else:\n        print(\"It's not a picture of me!\")\n\n| See `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py>`__\n| to try it out.\n\nPython Code Examples\n--------------------\n\nAll the examples are available\n`here <https://github.com/ageitgey/face_recognition/tree/master/examples>`__.\n\nFace Detection\n^^^^^^^^^^^^^^\n\n-  `Find faces in a\n   photograph <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py>`__\n-  `Find faces in a photograph (using deep\n   learning) <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py>`__\n-  `Find faces in batches of images w/ GPU (using deep\n   learning) <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py>`__\n\nFacial Features\n^^^^^^^^^^^^^^^\n\n-  `Identify specific facial features in a\n   photograph <https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py>`__\n-  `Apply (horribly ugly) digital\n   make-up <https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py>`__\n\nFacial Recognition\n^^^^^^^^^^^^^^^^^^\n\n-  `Find and recognize unknown faces in a photograph based on\n   photographs of known\n   people <https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py>`__\n-  `Compare faces by numeric face distance instead of only True/False\n   matches <https://github.com/ageitgey/face_recognition/blob/master/examples/face_distance.py>`__\n-  `Recognize faces in live video using your webcam - Simple / Slower\n   Version (Requires OpenCV to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam.py>`__\n-  `Recognize faces in live video using your webcam - Faster Version\n   (Requires OpenCV to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py>`__\n-  `Recognize faces in a video file and write out new video file\n   (Requires OpenCV to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_video_file.py>`__\n-  `Recognize faces on a Raspberry Pi w/\n   camera <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_on_raspberry_pi.py>`__\n-  `Run a web service to recognize faces via HTTP (Requires Flask to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/web_service_example.py>`__\n\nHow Face Recognition Works\n--------------------------\n\n| If you want to learn how face location and recognition work instead of\n| depending on a black box library, `read my\n  article <https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78>`__.\n\nCaveats\n-------\n\n-  The face recognition model is trained on adults and does not work\n   very well on children. It tends to mix\n   up children quite easy using the default comparison threshold of 0.6.\n\nDeployment to Cloud Hosts (Heroku, AWS, etc)\n--------------------------------------------\n\n| Since ``face_recognition`` depends on ``dlib`` which is written in\n  C++, it can be tricky to deploy an app\n| using it to a cloud hosting provider like Heroku or AWS.\n\n| To make things easier, there's an example Dockerfile in this repo that\n  shows how to run an app built with\n| ``face_recognition`` in a `Docker <https://www.docker.com/>`__\n  container. With that, you should be able to deploy\n| to any service that supports Docker images.\n\nCommon Issues\n-------------\n\nIssue: ``Illegal instruction (core dumped)`` when using\nface\\_recognition or running examples.\n\n| Solution: ``dlib`` is compiled with SSE4 or AVX support, but your CPU\n  is too old and doesn't support that.\n| You'll need to recompile ``dlib`` after `making the code change\n  outlined\n  here <https://github.com/ageitgey/face_recognition/issues/11#issuecomment-287398611>`__.\n\nIssue:\n``RuntimeError: Unsupported image type, must be 8bit gray or RGB image.``\nwhen running the webcam examples.\n\nSolution: Your webcam probably isn't set up correctly with OpenCV. `Look\nhere for\nmore <https://github.com/ageitgey/face_recognition/issues/21#issuecomment-287779524>`__.\n\nIssue: ``MemoryError`` when running ``pip2 install face_recognition``\n\n| Solution: The face\\_recognition\\_models file is too big for your\n  available pip cache memory. Instead,\n| try ``pip2 --no-cache-dir install face_recognition`` to avoid the\n  issue.\n\nIssue:\n``AttributeError: 'module' object has no attribute 'face_recognition_model_v1'``\n\nSolution: The version of ``dlib`` you have installed is too old. You\nneed version 19.4 or newer. Upgrade ``dlib``.\n\nIssue: ``TypeError: imread() got an unexpected keyword argument 'mode'``\n\nSolution: The version of ``scipy`` you have installed is too old. You\nneed version 0.17 or newer. Upgrade ``scipy``.\n\nThanks\n------\n\n-  Many, many thanks to `Davis King <https://github.com/davisking>`__\n   (`@nulhom <https://twitter.com/nulhom>`__)\n   for creating dlib and for providing the trained facial feature\n   detection and face encoding models\n   used in this library. For more information on the ResNet that powers\n   the face encodings, check out\n   his `blog\n   post <http://blog.dlib.net/2017/02/high-quality-face-recognition-with-deep.html>`__.\n-  Thanks to everyone who works on all the awesome Python data science\n   libraries like numpy, scipy, scikit-image,\n   pillow, etc, etc that makes this kind of stuff so easy and fun in\n   Python.\n-  Thanks to `Cookiecutter <https://github.com/audreyr/cookiecutter>`__\n   and the\n   `audreyr/cookiecutter-pypackage <https://github.com/audreyr/cookiecutter-pypackage>`__\n   project template\n   for making Python project packaging way more tolerable.\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/face_recognition.svg\n   :target: https://pypi.python.org/pypi/face_recognition\n.. |Build Status| image:: https://travis-ci.org/ageitgey/face_recognition.svg?branch=master\n   :target: https://travis-ci.org/ageitgey/face_recognition\n.. |Documentation Status| image:: https://readthedocs.org/projects/face-recognition/badge/?version=latest\n   :target: http://face-recognition.readthedocs.io/en/latest/?badge=latest\n.. |image3| image:: https://cloud.githubusercontent.com/assets/896692/23625227/42c65360-025d-11e7-94ea-b12f28cb34b4.png\n.. |image4| image:: https://cloud.githubusercontent.com/assets/896692/23625282/7f2d79dc-025d-11e7-8728-d8924596f8fa.png\n.. |image5| image:: https://cloud.githubusercontent.com/assets/896692/23625283/80638760-025d-11e7-80a2-1d2779f7ccab.png\n.. |image6| image:: https://cloud.githubusercontent.com/assets/896692/23625229/45e049b6-025d-11e7-89cc-8a71cf89e713.png\n.. |image7| image:: https://cloud.githubusercontent.com/assets/896692/24430398/36f0e3f0-13cb-11e7-8258-4d0c9ce1e419.gif\n.. |known| image:: https://cloud.githubusercontent.com/assets/896692/23582466/8324810e-00df-11e7-82cf-41515eba704d.png\n.. |unknown| image:: https://cloud.githubusercontent.com/assets/896692/23582465/81f422f8-00df-11e7-8b0d-75364f641f58.png\n\n\n\nHistory\n=======\n\n1.0.0 (2017-08-29)\n------------------\n\n* Added support for dlib's CNN face detection model via model=\"cnn\" parameter on face detecion call\n* Added support for GPU batched face detections using dlib's CNN face detector model\n* Added find_faces_in_picture_cnn.py to examples\n* Added find_faces_in_batches.py to examples\n* Added face_rec_from_video_file.py to examples\n* dlib v19.5 is now the minimum required version\n* face_recognition_models v0.2.0 is now the minimum required version\n\n\n0.2.2 (2017-07-07)\n------------------\n\n* Added --show-distance to cli\n* Fixed a bug where --tolerance was ignored in cli if testing a single image\n* Added benchmark.py to examples\n\n\n0.2.1 (2017-07-03)\n------------------\n\n* Added --tolerance to cli\n\n\n0.2.0 (2017-06-03)\n------------------\n\n* The CLI can now take advantage of multiple CPUs. Just pass in the -cpus X parameter where X is the number of CPUs to use.\n* Added face_distance.py example\n* Improved CLI tests to actually test the CLI functionality\n* Updated facerec_on_raspberry_pi.py to capture in rgb (not bgr) format.\n\n\n0.1.14 (2017-04-22)\n-------------------\n\n* Fixed a ValueError crash when using the CLI on Python 2.7\n\n\n0.1.13 (2017-04-20)\n-------------------\n\n* Raspberry Pi support.\n\n\n0.1.12 (2017-04-13)\n-------------------\n\n* Fixed: Face landmarks wasn't returning all chin points.\n\n\n0.1.11 (2017-03-30)\n-------------------\n\n* Fixed a minor bug in the command-line interface.\n\n\n0.1.10 (2017-03-21)\n-------------------\n\n* Minor pref improvements with face comparisons.\n* Test updates.\n\n\n0.1.9 (2017-03-16)\n------------------\n\n* Fix minimum scipy version required.\n\n\n0.1.8 (2017-03-16)\n------------------\n\n* Fix missing Pillow dependency.\n\n\n0.1.7 (2017-03-13)\n------------------\n\n* First working release.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ageitgey/face_recognition", "keywords": "face_recognition", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "friday-face-recognition", "package_url": "https://pypi.org/project/friday-face-recognition/", "platform": "", "project_url": "https://pypi.org/project/friday-face-recognition/", "project_urls": {"Homepage": "https://github.com/ageitgey/face_recognition"}, "release_url": "https://pypi.org/project/friday-face-recognition/1.0.0/", "requires_dist": ["Click (>=6.0)", "Pillow", "face-recognition-models (>=0.2.0)", "friday-dlib", "numpy", "scipy (>=0.17.0)"], "requires_python": "", "summary": "Recognize faces from Python or from the command line", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"face-recognition\">\n<h2>Face Recognition</h2>\n<div>\n<div>Recognize and manipulate faces from Python or from the command line\nwith</div>\n<div>the world\u2019s simplest face recognition library.</div>\n</div>\n<div>\n<div>Built using <a href=\"http://dlib.net/\" rel=\"nofollow\">dlib</a>\u2019s state-of-the-art face\nrecognition</div>\n<div>built with deep learning. The model has an accuracy of 99.38% on the</div>\n<div><a href=\"http://vis-www.cs.umass.edu/lfw/\" rel=\"nofollow\">Labeled Faces in the Wild</a>\nbenchmark.</div>\n</div>\n<div>\n<div>This also provides a simple <tt>face_recognition</tt> command line tool\nthat lets</div>\n<div>you do face recognition on a folder of images from the command line!</div>\n</div>\n<div>\n<div><a href=\"https://pypi.python.org/pypi/face_recognition\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/332bbd27d732a228979d0cbf812500099b55d1f2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666163655f7265636f676e6974696f6e2e737667\"></a></div>\n<div><a href=\"https://travis-ci.org/ageitgey/face_recognition\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b66aafd6bde9dd0d52aeb491f0a74dc48216b30e/68747470733a2f2f7472617669732d63692e6f72672f61676569746765792f666163655f7265636f676e6974696f6e2e7376673f6272616e63683d6d6173746572\"></a></div>\n<div><a href=\"http://face-recognition.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4722f92406b54a738ae604853d6d7800984dfe5c/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f666163652d7265636f676e6974696f6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a></div>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<div id=\"find-faces-in-pictures\">\n<h4>Find faces in pictures</h4>\n<p>Find all the faces that appear in a picture:</p>\n<p><img alt=\"image3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ab6796dd94afd8427bbe2a19b3d8f37cf888200/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3839363639322f32333632353232372f34326336353336302d303235642d313165372d393465612d6231326632386362333462342e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_recognition</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">load_image_file</span><span class=\"p\">(</span><span class=\"s2\">\"your_file.jpg\"</span><span class=\"p\">)</span>\n<span class=\"n\">face_locations</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">face_locations</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"find-and-manipulate-facial-features-in-pictures\">\n<h4>Find and manipulate facial features in pictures</h4>\n<p>Get the locations and outlines of each person\u2019s eyes, nose, mouth and\nchin.</p>\n<p><img alt=\"image4\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/23421adfece2a539c59f2655ba724219acbc658b/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3839363639322f32333632353238322f37663264373964632d303235642d313165372d383732382d6438393234353936663866612e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_recognition</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">load_image_file</span><span class=\"p\">(</span><span class=\"s2\">\"your_file.jpg\"</span><span class=\"p\">)</span>\n<span class=\"n\">face_landmarks_list</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">face_landmarks</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n</pre>\n<div>\n<div>Finding facial features is super useful for lots of important stuff.\nBut you can also use for really stupid stuff</div>\n<div>like applying <a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py\" rel=\"nofollow\">digital\nmake-up</a>\n(think \u2018Meitu\u2019):</div>\n</div>\n<p><img alt=\"image5\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/210725fb9fd2ad83b128fe7be7d965f677ec1337/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3839363639322f32333632353238332f38303633383736302d303235642d313165372d383061322d3164323737396637636361622e706e67\"></p>\n</div>\n<div id=\"identify-faces-in-pictures\">\n<h4>Identify faces in pictures</h4>\n<p>Recognize who appears in each photo.</p>\n<p><img alt=\"image6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac9fc5d63f1d16c90f302e5311b7861a2b81f4bd/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3839363639322f32333632353232392f34356530343962362d303235642d313165372d383963632d3861373163663839653731332e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_recognition</span>\n<span class=\"n\">known_image</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">load_image_file</span><span class=\"p\">(</span><span class=\"s2\">\"biden.jpg\"</span><span class=\"p\">)</span>\n<span class=\"n\">unknown_image</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">load_image_file</span><span class=\"p\">(</span><span class=\"s2\">\"unknown.jpg\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">biden_encoding</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">face_encodings</span><span class=\"p\">(</span><span class=\"n\">known_image</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">unknown_encoding</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">face_encodings</span><span class=\"p\">(</span><span class=\"n\">unknown_image</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">compare_faces</span><span class=\"p\">([</span><span class=\"n\">biden_encoding</span><span class=\"p\">],</span> <span class=\"n\">unknown_encoding</span><span class=\"p\">)</span>\n</pre>\n<p>You can even use this library with other Python libraries to do\nreal-time face recognition:</p>\n<p><img alt=\"image7\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a78359ea27bd2ac223d7efb0f90810d77908461/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3839363639322f32343433303339382f33366630653366302d313363622d313165372d383235382d3464306339636531653431392e676966\"></p>\n<p>See <a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py\" rel=\"nofollow\">this\nexample</a>\nfor the code.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Requirements:</p>\n<ul>\n<li>Python 3+ or Python 2.7</li>\n<li>macOS or Linux (Windows untested)</li>\n<li><a href=\"https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65\" rel=\"nofollow\">Also can run on a Raspberry Pi 2+ (follow these specific\ninstructions)</a></li>\n<li>A <a href=\"https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b\" rel=\"nofollow\">pre-configured VM\nimage</a>\nis also available.</li>\n</ul>\n<p>Install this module from pypi using <tt>pip3</tt> (or <tt>pip2</tt> for Python 2):</p>\n<pre>pip3 install face_recognition\n</pre>\n<div>\n<div>IMPORTANT NOTE: It\u2019s very likely that you will run into problems when\npip tries to compile</div>\n<div>the <tt>dlib</tt> dependency. If that happens, check out this guide to\ninstalling</div>\n<div>dlib from source (instead of from pip) to fix the error:</div>\n</div>\n<p><a href=\"https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf\" rel=\"nofollow\">How to install dlib from\nsource</a></p>\n<div>\n<div>After manually installing <tt>dlib</tt>, try running\n<tt>pip3 install face_recognition</tt></div>\n<div>again to complete your installation.</div>\n</div>\n<div>\n<div>If you are still having trouble installing this, you can also try out\nthis</div>\n<div><a href=\"https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b\" rel=\"nofollow\">pre-configured\nVM</a>.</div>\n</div>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"command-line-interface\">\n<h4>Command-Line Interface</h4>\n<div>\n<div>When you install <tt>face_recognition</tt>, you get a simple command-line\nprogram</div>\n<div>called <tt>face_recognition</tt> that you can use to recognize faces in a</div>\n<div>photograph or folder full for photographs.</div>\n</div>\n<div>\n<div>First, you need to provide a folder with one picture of each person\nyou</div>\n<div>already know. There should be one image file for each person with the</div>\n<div>files named according to who is in the picture:</div>\n</div>\n<p><img alt=\"known\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2f411bce6e4b41d17ce88a893f5cd14af10619f/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3839363639322f32333538323436362f38333234383130652d303064662d313165372d383263662d3431353135656261373034642e706e67\"></p>\n<p>Next, you need a second folder with the files you want to identify:</p>\n<p><img alt=\"unknown\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88a855b6f81bf2e1966c38083589eb3cc753544e/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3839363639322f32333538323436352f38316634323266382d303064662d313165372d386230642d3735333634663634316635382e706e67\"></p>\n<div>\n<div>Then in you simply run the command <tt>face_recognition</tt>, passing in</div>\n<div>the folder of known people and the folder (or single image) with\nunknown</div>\n<div>people and it tells you who is in each image:</div>\n</div>\n<pre>$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n</pre>\n<div>\n<div>There\u2019s one line in the output for each face. The data is\ncomma-separated</div>\n<div>with the filename and the name of the person found.</div>\n</div>\n<div>\n<div>An <tt>unknown_person</tt> is a face in the image that didn\u2019t match anyone\nin</div>\n<div>your folder of known people.</div>\n</div>\n<div id=\"adjusting-tolerance-sensitivity\">\n<h5>Adjusting Tolerance / Sensitivity</h5>\n<div>\n<div>If you are getting multiple matches for the same person, it might be\nthat</div>\n<div>the people in your photos look very similar and a lower tolerance\nvalue</div>\n<div>is needed to make face comparisons more strict.</div>\n</div>\n<div>\n<div>You can do that with the <tt><span class=\"pre\">--tolerance</span></tt> parameter. The default\ntolerance</div>\n<div>value is 0.6 and lower numbers make face comparisons more strict:</div>\n</div>\n<pre>$ face_recognition --tolerance <span class=\"m\">0</span>.54 ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n</pre>\n<div>\n<div>If you want to see the face distance calculated for each match in\norder</div>\n<div>to adjust the tolerance setting, you can use <tt><span class=\"pre\">--show-distance</span> true</tt>:</div>\n</div>\n<pre>$ face_recognition --show-distance <span class=\"nb\">true</span> ./pictures_of_people_i_know/ ./unknown_pictures/\n\n/unknown_pictures/unknown.jpg,Barack Obama,0.378542298956785\n/face_recognition_test/unknown_pictures/unknown.jpg,unknown_person,None\n</pre>\n</div>\n<div id=\"more-examples\">\n<h5>More Examples</h5>\n<div>\n<div>If you simply want to know the names of the people in each photograph\nbut don\u2019t</div>\n<div>care about file names, you could do this:</div>\n</div>\n<pre>$ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ <span class=\"p\">|</span> cut -d <span class=\"s1\">','</span> -f2\n\nBarack Obama\nunknown_person\n</pre>\n</div>\n<div id=\"speeding-up-face-recognition\">\n<h5>Speeding up Face Recognition</h5>\n<div>\n<div>Face recognition can be done in parallel if you have a computer with</div>\n<div>multiple CPU cores. For example if your system has 4 CPU cores, you\ncan</div>\n<div>process about 4 times as many images in the same amount of time by\nusing</div>\n<div>all your CPU cores in parallel.</div>\n</div>\n<p>If you are using Python 3.4 or newer, pass in a\n<tt><span class=\"pre\">--cpus</span> &lt;number_of_cpu_cores_to_use&gt;</tt> parameter:</p>\n<pre>$ face_recognition -cpus <span class=\"m\">4</span> ./pictures_of_people_i_know/ ./unknown_pictures/\n</pre>\n<p>You can also pass in <tt><span class=\"pre\">--cpus</span> <span class=\"pre\">-1</span></tt> to use all CPU cores in your system.</p>\n</div>\n</div>\n<div id=\"python-module\">\n<h4>Python Module</h4>\n<div>\n<div>You can import the <tt>face_recognition</tt> module and then easily\nmanipulate</div>\n<div>faces with just a couple of lines of code. It\u2019s super easy!</div>\n</div>\n<p>API Docs:\n<a href=\"https://face-recognition.readthedocs.io/en/latest/face_recognition.html\" rel=\"nofollow\">https://face-recognition.readthedocs.io</a>.</p>\n<div id=\"automatically-find-all-the-faces-in-an-image\">\n<h5>Automatically find all the faces in an image</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_recognition</span>\n\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">load_image_file</span><span class=\"p\">(</span><span class=\"s2\">\"my_picture.jpg\"</span><span class=\"p\">)</span>\n<span class=\"n\">face_locations</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">face_locations</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># face_locations is now an array listing the co-ordinates of each face!</span>\n</pre>\n<div>\n<div>See <a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py\" rel=\"nofollow\">this\nexample</a></div>\n<div>to try it out.</div>\n</div>\n<p>You can also opt-in to a somewhat more accurate deep-learning-based face\ndetection model.</p>\n<div>\n<div>Note: GPU acceleration (via nvidia\u2019s CUDA library) is required for\ngood</div>\n<div>performance with this model. You\u2019ll also want to enable CUDA support</div>\n<div>when compliling <tt>dlib</tt>.</div>\n</div>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_recognition</span>\n\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">load_image_file</span><span class=\"p\">(</span><span class=\"s2\">\"my_picture.jpg\"</span><span class=\"p\">)</span>\n<span class=\"n\">face_locations</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">face_locations</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s2\">\"cnn\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># face_locations is now an array listing the co-ordinates of each face!</span>\n</pre>\n<div>\n<div>See <a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py\" rel=\"nofollow\">this\nexample</a></div>\n<div>to try it out.</div>\n</div>\n<div>\n<div>If you have a lot of images and a GPU, you can also</div>\n<div><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py\" rel=\"nofollow\">find faces in\nbatches</a>.</div>\n</div>\n</div>\n<div id=\"automatically-locate-the-facial-features-of-a-person-in-an-image\">\n<h5>Automatically locate the facial features of a person in an image</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_recognition</span>\n\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">load_image_file</span><span class=\"p\">(</span><span class=\"s2\">\"my_picture.jpg\"</span><span class=\"p\">)</span>\n<span class=\"n\">face_landmarks_list</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">face_landmarks</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># face_landmarks_list is now an array with the locations of each facial feature in each face.</span>\n<span class=\"c1\"># face_landmarks_list[0]['left_eye'] would be the location and outline of the first person's left eye.</span>\n</pre>\n<div>\n<div>See <a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py\" rel=\"nofollow\">this\nexample</a></div>\n<div>to try it out.</div>\n</div>\n</div>\n<div id=\"recognize-faces-in-images-and-identify-who-they-are\">\n<h5>Recognize faces in images and identify who they are</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_recognition</span>\n\n<span class=\"n\">picture_of_me</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">load_image_file</span><span class=\"p\">(</span><span class=\"s2\">\"me.jpg\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_face_encoding</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">face_encodings</span><span class=\"p\">(</span><span class=\"n\">picture_of_me</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># my_face_encoding now contains a universal 'encoding' of my facial features that can be compared to any other picture of a face!</span>\n\n<span class=\"n\">unknown_picture</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">load_image_file</span><span class=\"p\">(</span><span class=\"s2\">\"unknown.jpg\"</span><span class=\"p\">)</span>\n<span class=\"n\">unknown_face_encoding</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">face_encodings</span><span class=\"p\">(</span><span class=\"n\">unknown_picture</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Now we can see the two face encodings are of the same person with `compare_faces`!</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">face_recognition</span><span class=\"o\">.</span><span class=\"n\">compare_faces</span><span class=\"p\">([</span><span class=\"n\">my_face_encoding</span><span class=\"p\">],</span> <span class=\"n\">unknown_face_encoding</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"It's a picture of me!\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"It's not a picture of me!\"</span><span class=\"p\">)</span>\n</pre>\n<div>\n<div>See <a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py\" rel=\"nofollow\">this\nexample</a></div>\n<div>to try it out.</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"python-code-examples\">\n<h3>Python Code Examples</h3>\n<p>All the examples are available\n<a href=\"https://github.com/ageitgey/face_recognition/tree/master/examples\" rel=\"nofollow\">here</a>.</p>\n<div id=\"face-detection\">\n<h4>Face Detection</h4>\n<ul>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py\" rel=\"nofollow\">Find faces in a\nphotograph</a></li>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py\" rel=\"nofollow\">Find faces in a photograph (using deep\nlearning)</a></li>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py\" rel=\"nofollow\">Find faces in batches of images w/ GPU (using deep\nlearning)</a></li>\n</ul>\n</div>\n<div id=\"facial-features\">\n<h4>Facial Features</h4>\n<ul>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py\" rel=\"nofollow\">Identify specific facial features in a\nphotograph</a></li>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py\" rel=\"nofollow\">Apply (horribly ugly) digital\nmake-up</a></li>\n</ul>\n</div>\n<div id=\"facial-recognition\">\n<h4>Facial Recognition</h4>\n<ul>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py\" rel=\"nofollow\">Find and recognize unknown faces in a photograph based on\nphotographs of known\npeople</a></li>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/face_distance.py\" rel=\"nofollow\">Compare faces by numeric face distance instead of only True/False\nmatches</a></li>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam.py\" rel=\"nofollow\">Recognize faces in live video using your webcam - Simple / Slower\nVersion (Requires OpenCV to be\ninstalled)</a></li>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py\" rel=\"nofollow\">Recognize faces in live video using your webcam - Faster Version\n(Requires OpenCV to be\ninstalled)</a></li>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_video_file.py\" rel=\"nofollow\">Recognize faces in a video file and write out new video file\n(Requires OpenCV to be\ninstalled)</a></li>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_on_raspberry_pi.py\" rel=\"nofollow\">Recognize faces on a Raspberry Pi w/\ncamera</a></li>\n<li><a href=\"https://github.com/ageitgey/face_recognition/blob/master/examples/web_service_example.py\" rel=\"nofollow\">Run a web service to recognize faces via HTTP (Requires Flask to be\ninstalled)</a></li>\n</ul>\n</div>\n</div>\n<div id=\"how-face-recognition-works\">\n<h3>How Face Recognition Works</h3>\n<div>\n<div>If you want to learn how face location and recognition work instead of</div>\n<div>depending on a black box library, <a href=\"https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78\" rel=\"nofollow\">read my\narticle</a>.</div>\n</div>\n</div>\n<div id=\"caveats\">\n<h3>Caveats</h3>\n<ul>\n<li>The face recognition model is trained on adults and does not work\nvery well on children. It tends to mix\nup children quite easy using the default comparison threshold of 0.6.</li>\n</ul>\n</div>\n<div id=\"deployment-to-cloud-hosts-heroku-aws-etc\">\n<h3>Deployment to Cloud Hosts (Heroku, AWS, etc)</h3>\n<div>\n<div>Since <tt>face_recognition</tt> depends on <tt>dlib</tt> which is written in\nC++, it can be tricky to deploy an app</div>\n<div>using it to a cloud hosting provider like Heroku or AWS.</div>\n</div>\n<div>\n<div>To make things easier, there\u2019s an example Dockerfile in this repo that\nshows how to run an app built with</div>\n<div><tt>face_recognition</tt> in a <a href=\"https://www.docker.com/\" rel=\"nofollow\">Docker</a>\ncontainer. With that, you should be able to deploy</div>\n<div>to any service that supports Docker images.</div>\n</div>\n</div>\n<div id=\"common-issues\">\n<h3>Common Issues</h3>\n<p>Issue: <tt>Illegal instruction (core dumped)</tt> when using\nface_recognition or running examples.</p>\n<div>\n<div>Solution: <tt>dlib</tt> is compiled with SSE4 or AVX support, but your CPU\nis too old and doesn\u2019t support that.</div>\n<div>You\u2019ll need to recompile <tt>dlib</tt> after <a href=\"https://github.com/ageitgey/face_recognition/issues/11#issuecomment-287398611\" rel=\"nofollow\">making the code change\noutlined\nhere</a>.</div>\n</div>\n<p>Issue:\n<tt>RuntimeError: Unsupported image type, must be 8bit gray or RGB image.</tt>\nwhen running the webcam examples.</p>\n<p>Solution: Your webcam probably isn\u2019t set up correctly with OpenCV. <a href=\"https://github.com/ageitgey/face_recognition/issues/21#issuecomment-287779524\" rel=\"nofollow\">Look\nhere for\nmore</a>.</p>\n<p>Issue: <tt>MemoryError</tt> when running <tt>pip2 install face_recognition</tt></p>\n<div>\n<div>Solution: The face_recognition_models file is too big for your\navailable pip cache memory. Instead,</div>\n<div>try <tt>pip2 <span class=\"pre\">--no-cache-dir</span> install face_recognition</tt> to avoid the\nissue.</div>\n</div>\n<p>Issue:\n<tt>AttributeError: 'module' object has no attribute 'face_recognition_model_v1'</tt></p>\n<p>Solution: The version of <tt>dlib</tt> you have installed is too old. You\nneed version 19.4 or newer. Upgrade <tt>dlib</tt>.</p>\n<p>Issue: <tt>TypeError: imread() got an unexpected keyword argument 'mode'</tt></p>\n<p>Solution: The version of <tt>scipy</tt> you have installed is too old. You\nneed version 0.17 or newer. Upgrade <tt>scipy</tt>.</p>\n</div>\n<div id=\"thanks\">\n<h3>Thanks</h3>\n<ul>\n<li>Many, many thanks to <a href=\"https://github.com/davisking\" rel=\"nofollow\">Davis King</a>\n(<a href=\"https://twitter.com/nulhom\" rel=\"nofollow\">@nulhom</a>)\nfor creating dlib and for providing the trained facial feature\ndetection and face encoding models\nused in this library. For more information on the ResNet that powers\nthe face encodings, check out\nhis <a href=\"http://blog.dlib.net/2017/02/high-quality-face-recognition-with-deep.html\" rel=\"nofollow\">blog\npost</a>.</li>\n<li>Thanks to everyone who works on all the awesome Python data science\nlibraries like numpy, scipy, scikit-image,\npillow, etc, etc that makes this kind of stuff so easy and fun in\nPython.</li>\n<li>Thanks to <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a>\nand the\n<a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a>\nproject template\nfor making Python project packaging way more tolerable.</li>\n</ul>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>1.0.0 (2017-08-29)</h3>\n<ul>\n<li>Added support for dlib\u2019s CNN face detection model via model=\u201dcnn\u201d parameter on face detecion call</li>\n<li>Added support for GPU batched face detections using dlib\u2019s CNN face detector model</li>\n<li>Added find_faces_in_picture_cnn.py to examples</li>\n<li>Added find_faces_in_batches.py to examples</li>\n<li>Added face_rec_from_video_file.py to examples</li>\n<li>dlib v19.5 is now the minimum required version</li>\n<li>face_recognition_models v0.2.0 is now the minimum required version</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.2 (2017-07-07)</h3>\n<ul>\n<li>Added \u2013show-distance to cli</li>\n<li>Fixed a bug where \u2013tolerance was ignored in cli if testing a single image</li>\n<li>Added benchmark.py to examples</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.2.1 (2017-07-03)</h3>\n<ul>\n<li>Added \u2013tolerance to cli</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.2.0 (2017-06-03)</h3>\n<ul>\n<li>The CLI can now take advantage of multiple CPUs. Just pass in the -cpus X parameter where X is the number of CPUs to use.</li>\n<li>Added face_distance.py example</li>\n<li>Improved CLI tests to actually test the CLI functionality</li>\n<li>Updated facerec_on_raspberry_pi.py to capture in rgb (not bgr) format.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.1.14 (2017-04-22)</h3>\n<ul>\n<li>Fixed a ValueError crash when using the CLI on Python 2.7</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.1.13 (2017-04-20)</h3>\n<ul>\n<li>Raspberry Pi support.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.1.12 (2017-04-13)</h3>\n<ul>\n<li>Fixed: Face landmarks wasn\u2019t returning all chin points.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.1.11 (2017-03-30)</h3>\n<ul>\n<li>Fixed a minor bug in the command-line interface.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.1.10 (2017-03-21)</h3>\n<ul>\n<li>Minor pref improvements with face comparisons.</li>\n<li>Test updates.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.1.9 (2017-03-16)</h3>\n<ul>\n<li>Fix minimum scipy version required.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.1.8 (2017-03-16)</h3>\n<ul>\n<li>Fix missing Pillow dependency.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.1.7 (2017-03-13)</h3>\n<ul>\n<li>First working release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3209340, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f62efa8cbba97b96d276517f93865877", "sha256": "565a089ee24a137fadb5d1af25e3d7674137e83faf68007e6136326c7e89e127"}, "downloads": -1, "filename": "friday_face_recognition-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f62efa8cbba97b96d276517f93865877", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18995, "upload_time": "2017-09-28T07:59:45", "upload_time_iso_8601": "2017-09-28T07:59:45.847068Z", "url": "https://files.pythonhosted.org/packages/8d/a7/012b63e964c66b39098a23ca264edc106b85667229458644fa1aa53f74ae/friday_face_recognition-1.0.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f62efa8cbba97b96d276517f93865877", "sha256": "565a089ee24a137fadb5d1af25e3d7674137e83faf68007e6136326c7e89e127"}, "downloads": -1, "filename": "friday_face_recognition-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f62efa8cbba97b96d276517f93865877", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18995, "upload_time": "2017-09-28T07:59:45", "upload_time_iso_8601": "2017-09-28T07:59:45.847068Z", "url": "https://files.pythonhosted.org/packages/8d/a7/012b63e964c66b39098a23ca264edc106b85667229458644fa1aa53f74ae/friday_face_recognition-1.0.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 01:00:13 2020"}