{"info": {"author": "Rafael R\u00f6mhild", "author_email": "rafael@roemhild.de", "bugtrack_url": null, "classifiers": [], "description": "============================\nMicroPython RuuviTag Scanner\n============================\n\n|pypi|\n\nHarvest data from `RuuviTag BLE Sensor Beacon <http://ruuvitag.com/>`_ with MicroPython Bluetooth enabled micro controller like the `pycom <https://pycom.io/>`_ devices.\n\nmicropython-ruuvitag supports `Data Format 2, 3, 4 and 5 <https://github.com/ruuvi/ruuvi-sensor-protocols>`_.\n\nThis package comes with a scanner and a tracker. The scanner scans for RuuviTags in a pre defined time and return the result. The tracker continuously scans for RuuviTags and call a callback for each tag found.\n\n\nInstallation\n------------\n\nThe easiest way to install the package is via ``upip``:\n\n>>> import upip\n>>> upip.install('micropython-ruuvitag')\n\nFor manual installation copy the ``ruuvitag`` directory with all files to your device ``lib`` directory.\n\nInstall with mpfshell\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: shell\n\n    $ mpfshell ttyUSB0 -s install.mpf\n\n\nScanner\n-------\n\n``RuuviTagScanner`` scans for RuuviTags and decode the data format. The result is a list with named tuples.\n\nScan 10 seconds for RuuviTag sensors and print the result:\n\n.. code-block:: python\n\n    from ruuvitag.scanner import RuuviTagScanner\n\n    rts = RuuviTagScanner()\n\n    for ruuvitag in rts.find_ruuvitags(timeout=10):\n        print(ruuvitag)\n\n\nTracker\n-------\n\n``RuuviTagTracker`` scans for RuuviTags, decode the data format and call a callback with a named tuple if recieved data from tag.\n\n.. code-block:: python\n\n    from ruuvitag.tracker import RuuviTagTracker\n\n    def cb(ruuvitag):\n        print(ruuvitag)\n\n    rtt = RuuviTagTracker()\n    rtt.track_ruuvitags(cb)\n\n\nWhitelist devices\n-----------------\n\nYou can collect data from only the devices you want by define a whitelist with mac addresses. Other Devices then will be ignored. Whitelists can be used with RuuviTagScanner and RuuviTagTracker.\n\n.. code-block:: python\n\n    whitelist = (b'aa:bb:cc:dd:ee:21', b'aa:bb:cc:dd:ee:42',)\n    rts = RuuviTagScanner(whitelist)\n\n\nBlacklist persistence\n---------------------\n\nIf the data from a Bluetooth device can not be decoded, the device get on a blacklist as long the MicroPython device is not resetted. For a persistent device blacklist the list should be saved and reloaded.\n\n>>> from ruuvitag import RuuviTagScanner\n>>> rts = RuuviTagScanner()\n>>> # add back blacklisted devices\n>>> rts.blacklist = [b'aa:bb:cc:dd:ee:21', b'aa:bb:cc:dd:ee:42']\n>>> # run a new scan\n>>> rts.find_ruuvitags(timeout=10)\n>>> # get blacklisted devices\n>>> rts.blacklist\n\n\nNamed tuple formats\n-------------------\n\nData Format 2 and 4 (Eddystone-URL)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    RuuviTagURL = namedtuple('RuuviTagURL', (\n        'mac',\n        'rssi',\n        'format',\n        'humidity',\n        'temperature',\n        'pressure',\n        'id',\n    ))\n\nData Format 3 (RAWv1) and 5 (RAWv2)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    RuuviTagRAW = namedtuple('RuuviTagRAW', (\n        'mac',\n        'rssi',\n        'format',\n        'humidity',\n        'temperature',\n        'pressure',\n        'acceleration_x',\n        'acceleration_y',\n        'acceleration_z',\n        'battery_voltage',\n        'power_info',\n        'movement_counter',\n        'measurement_sequence',\n    ))\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/micropython-ruuvitag.svg\n    :target: https://pypi.python.org/pypi/micropython-ruuvitag/\n    :alt: PyPi Status", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rroemhild/micropython-ruuvitag/", "keywords": "", "license": "MIT", "maintainer": "Rafael R\u00f6mhild", "maintainer_email": "rafael@roemhild.de", "name": "micropython-ruuvitag", "package_url": "https://pypi.org/project/micropython-ruuvitag/", "platform": "", "project_url": "https://pypi.org/project/micropython-ruuvitag/", "project_urls": {"Homepage": "https://github.com/rroemhild/micropython-ruuvitag/"}, "release_url": "https://pypi.org/project/micropython-ruuvitag/0.6.0/", "requires_dist": null, "requires_python": "", "summary": "RuuviTag BLE Sensor Beacon scanner.", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/micropython-ruuvitag/\" rel=\"nofollow\"><img alt=\"PyPi Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88f381c8f05d37f39a93fbc5e6715ed31d7c2fce/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6963726f707974686f6e2d72757576697461672e737667\"></a></p>\n<p>Harvest data from <a href=\"http://ruuvitag.com/\" rel=\"nofollow\">RuuviTag BLE Sensor Beacon</a> with MicroPython Bluetooth enabled micro controller like the <a href=\"https://pycom.io/\" rel=\"nofollow\">pycom</a> devices.</p>\n<p>micropython-ruuvitag supports <a href=\"https://github.com/ruuvi/ruuvi-sensor-protocols\" rel=\"nofollow\">Data Format 2, 3, 4 and 5</a>.</p>\n<p>This package comes with a scanner and a tracker. The scanner scans for RuuviTags in a pre defined time and return the result. The tracker continuously scans for RuuviTags and call a callback for each tag found.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The easiest way to install the package is via <tt>upip</tt>:</p>\n<pre>&gt;&gt;&gt; import upip\n&gt;&gt;&gt; upip.install('micropython-ruuvitag')\n</pre>\n<p>For manual installation copy the <tt>ruuvitag</tt> directory with all files to your device <tt>lib</tt> directory.</p>\n<div id=\"install-with-mpfshell\">\n<h3>Install with mpfshell</h3>\n<pre>$ mpfshell ttyUSB0 -s install.mpf\n</pre>\n</div>\n</div>\n<div id=\"scanner\">\n<h2>Scanner</h2>\n<p><tt>RuuviTagScanner</tt> scans for RuuviTags and decode the data format. The result is a list with named tuples.</p>\n<p>Scan 10 seconds for RuuviTag sensors and print the result:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag.scanner</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTagScanner</span>\n\n<span class=\"n\">rts</span> <span class=\"o\">=</span> <span class=\"n\">RuuviTagScanner</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">ruuvitag</span> <span class=\"ow\">in</span> <span class=\"n\">rts</span><span class=\"o\">.</span><span class=\"n\">find_ruuvitags</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ruuvitag</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"tracker\">\n<h2>Tracker</h2>\n<p><tt>RuuviTagTracker</tt> scans for RuuviTags, decode the data format and call a callback with a named tuple if recieved data from tag.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag.tracker</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTagTracker</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cb</span><span class=\"p\">(</span><span class=\"n\">ruuvitag</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ruuvitag</span><span class=\"p\">)</span>\n\n<span class=\"n\">rtt</span> <span class=\"o\">=</span> <span class=\"n\">RuuviTagTracker</span><span class=\"p\">()</span>\n<span class=\"n\">rtt</span><span class=\"o\">.</span><span class=\"n\">track_ruuvitags</span><span class=\"p\">(</span><span class=\"n\">cb</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"whitelist-devices\">\n<h2>Whitelist devices</h2>\n<p>You can collect data from only the devices you want by define a whitelist with mac addresses. Other Devices then will be ignored. Whitelists can be used with RuuviTagScanner and RuuviTagTracker.</p>\n<pre><span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'aa:bb:cc:dd:ee:21'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'aa:bb:cc:dd:ee:42'</span><span class=\"p\">,)</span>\n<span class=\"n\">rts</span> <span class=\"o\">=</span> <span class=\"n\">RuuviTagScanner</span><span class=\"p\">(</span><span class=\"n\">whitelist</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"blacklist-persistence\">\n<h2>Blacklist persistence</h2>\n<p>If the data from a Bluetooth device can not be decoded, the device get on a blacklist as long the MicroPython device is not resetted. For a persistent device blacklist the list should be saved and reloaded.</p>\n<pre>&gt;&gt;&gt; from ruuvitag import RuuviTagScanner\n&gt;&gt;&gt; rts = RuuviTagScanner()\n&gt;&gt;&gt; # add back blacklisted devices\n&gt;&gt;&gt; rts.blacklist = [b'aa:bb:cc:dd:ee:21', b'aa:bb:cc:dd:ee:42']\n&gt;&gt;&gt; # run a new scan\n&gt;&gt;&gt; rts.find_ruuvitags(timeout=10)\n&gt;&gt;&gt; # get blacklisted devices\n&gt;&gt;&gt; rts.blacklist\n</pre>\n</div>\n<div id=\"named-tuple-formats\">\n<h2>Named tuple formats</h2>\n<div id=\"data-format-2-and-4-eddystone-url\">\n<h3>Data Format 2 and 4 (Eddystone-URL)</h3>\n<pre><span class=\"n\">RuuviTagURL</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'RuuviTagURL'</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'mac'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'rssi'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'format'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'humidity'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'temperature'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'pressure'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'id'</span><span class=\"p\">,</span>\n<span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"data-format-3-rawv1-and-5-rawv2\">\n<h3>Data Format 3 (RAWv1) and 5 (RAWv2)</h3>\n<pre><span class=\"n\">RuuviTagRAW</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'RuuviTagRAW'</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'mac'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'rssi'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'format'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'humidity'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'temperature'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'pressure'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'acceleration_x'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'acceleration_y'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'acceleration_z'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'battery_voltage'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'power_info'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'movement_counter'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'measurement_sequence'</span><span class=\"p\">,</span>\n<span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5726785, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "bf46fc68460ae4865eac7fd2d9ad6c5c", "sha256": "c9de1f93e53013765a21e42b973518cdbf2be2186d0b860348287cdde4a43946"}, "downloads": -1, "filename": "micropython-ruuvitag-0.2.0.tar.gz", "has_sig": true, "md5_digest": "bf46fc68460ae4865eac7fd2d9ad6c5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2041, "upload_time": "2018-01-12T17:46:36", "upload_time_iso_8601": "2018-01-12T17:46:36.173906Z", "url": "https://files.pythonhosted.org/packages/1a/35/d58b30d12a5a09212d22cce59c2485b07fd8cbae89f3de05c35a761b404d/micropython-ruuvitag-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3830dc8adf43deb3cdf1ecc7eb538079", "sha256": "f5b87c66fd256187a93d3f3666cc31b37359c9d11b85ad38b24f1005145d5504"}, "downloads": -1, "filename": "micropython-ruuvitag-0.3.0.tar.gz", "has_sig": true, "md5_digest": "3830dc8adf43deb3cdf1ecc7eb538079", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2737, "upload_time": "2018-01-13T13:07:55", "upload_time_iso_8601": "2018-01-13T13:07:55.257060Z", "url": "https://files.pythonhosted.org/packages/1c/f4/23fa27c879b7931d469d3ff75d63763e18e1840f6150398b5a58a1627a46/micropython-ruuvitag-0.3.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "193c4313e9b16ec1f0969122d2698782", "sha256": "39593bcfbfa5c6f9c30aa602a806e9234a0e08c80e266e5d8e0cd233025ff834"}, "downloads": -1, "filename": "micropython-ruuvitag-0.4.1.tar.gz", "has_sig": true, "md5_digest": "193c4313e9b16ec1f0969122d2698782", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4023, "upload_time": "2018-03-05T22:13:42", "upload_time_iso_8601": "2018-03-05T22:13:42.294513Z", "url": "https://files.pythonhosted.org/packages/ce/69/2a3cd75b9af98ba688c69a9784a044afc25ff35301b7d8520bb1c1d88685/micropython-ruuvitag-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "46a174d8d619aeedc69b8542441c7cbb", "sha256": "751375754ca481c6dd82c87bb7fa9e59555731b3c893d205520e13196093f53c"}, "downloads": -1, "filename": "micropython-ruuvitag-0.4.2.tar.gz", "has_sig": true, "md5_digest": "46a174d8d619aeedc69b8542441c7cbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4047, "upload_time": "2018-03-11T14:23:40", "upload_time_iso_8601": "2018-03-11T14:23:40.998012Z", "url": "https://files.pythonhosted.org/packages/39/d4/99e8cefdd176632727ac8a35800360a5605bf131fbf5a4a034f138861273/micropython-ruuvitag-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "884f0670f8e6303064bcc033a3b324f5", "sha256": "0af96c587cb8ba2c0d1f2a4b7c9eae7b293f8d608a25dd335d4e141f46759c6e"}, "downloads": -1, "filename": "micropython-ruuvitag-0.5.0.tar.gz", "has_sig": true, "md5_digest": "884f0670f8e6303064bcc033a3b324f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3988, "upload_time": "2018-03-18T16:47:13", "upload_time_iso_8601": "2018-03-18T16:47:13.507428Z", "url": "https://files.pythonhosted.org/packages/4d/d8/ba76c69921b83935132de9e9e4df4702a778ec221af5d485fac0633b3832/micropython-ruuvitag-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "539a29e20a16303cad976b8636ee634e", "sha256": "1173530a83aa30d755f0d4c5c231fdaade8890cc7b6593aa885886ed06b70675"}, "downloads": -1, "filename": "micropython-ruuvitag-0.5.1.tar.gz", "has_sig": true, "md5_digest": "539a29e20a16303cad976b8636ee634e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4049, "upload_time": "2018-04-01T21:37:24", "upload_time_iso_8601": "2018-04-01T21:37:24.586184Z", "url": "https://files.pythonhosted.org/packages/6a/a5/0bd68f132059c5bb14df7e17eae2eb1a0c7b4387c1da2992481ea6dd41a2/micropython-ruuvitag-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "be46eb870c80781afd384cab231f4338", "sha256": "49f803e9c3f778708580cde6ffa1a8482a409f5e998624e5bb73112399b0cecf"}, "downloads": -1, "filename": "micropython-ruuvitag-0.5.2.tar.gz", "has_sig": true, "md5_digest": "be46eb870c80781afd384cab231f4338", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4061, "upload_time": "2018-05-29T21:05:28", "upload_time_iso_8601": "2018-05-29T21:05:28.951164Z", "url": "https://files.pythonhosted.org/packages/87/6f/c0f0cf76bc8a9e356fbdb805adf4866ffef003b8215267c6618307219749/micropython-ruuvitag-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "dcdafb4fc259d3ee9fe1b4f0f6c7aed5", "sha256": "525ec6d71c47a1dba430b862973b61c25d559aa5e168eb1fd85d350405581336"}, "downloads": -1, "filename": "micropython-ruuvitag-0.6.0.tar.gz", "has_sig": true, "md5_digest": "dcdafb4fc259d3ee9fe1b4f0f6c7aed5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4143, "upload_time": "2019-08-25T11:36:56", "upload_time_iso_8601": "2019-08-25T11:36:56.446418Z", "url": "https://files.pythonhosted.org/packages/04/6f/571cfbac3910317ebb474495e0f0ed9e09e3b893b1de83689b00f3a9e916/micropython-ruuvitag-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dcdafb4fc259d3ee9fe1b4f0f6c7aed5", "sha256": "525ec6d71c47a1dba430b862973b61c25d559aa5e168eb1fd85d350405581336"}, "downloads": -1, "filename": "micropython-ruuvitag-0.6.0.tar.gz", "has_sig": true, "md5_digest": "dcdafb4fc259d3ee9fe1b4f0f6c7aed5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4143, "upload_time": "2019-08-25T11:36:56", "upload_time_iso_8601": "2019-08-25T11:36:56.446418Z", "url": "https://files.pythonhosted.org/packages/04/6f/571cfbac3910317ebb474495e0f0ed9e09e3b893b1de83689b00f3a9e916/micropython-ruuvitag-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:02 2020"}