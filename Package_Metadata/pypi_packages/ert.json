{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# ert [![Build Status](https://travis-ci.org/equinor/ert.svg?branch=master)](https://travis-ci.org/equinor/ert)\n\nERT - Ensemble based Reservoir Tool - is a tool to run ensemble based on\nreservoir models. ERT was originally devised as tool to do model updating\n(history matching) with the EnKF method, now the primary method for model\nupdating is the Ensemble Smoother (ES).\n\n\nThe `ert` program is based on three different repositories:\n\n1. [libecl](https://github.com/Equinor/libecl) which contains utilities to read and write Eclipse files.\n\n2. [libres](https://github.com/Equinor/libres) utilities to manage reservoir data, and algorithms do actually do model updating.\n\n3. ert - this repository - the actual application and all of the GUI.\n\n##  Building ert\n\n#### 1. Build and install [libecl](https://github.com/Equinor/libecl) and [libres](https://github.com/Equinor/libres). \nWhen configuring `libecl` and\n`libres` you should used the option `-DCMAKE_INSTALL_PREFIX` to tell ``cmake``\nwhere to install. The value passed to `CMAKE_INSTALL_PREFIX` will be needed when\nrunning pip install in point 4, below. For now let us assume that the prefix\n`/local/ert/install` was used.\n\n\n#### 2. Install Python dependencies\n\nIn addition you will need to install `PyQt` For Python 2.7 (`PyQt4`)- this package\ncan not be installed using `pip`, you should probably use the package manager from\nyour operating system. For Python >3.5 you can use `pip install PyQt5`.\n\n#### 3. Update environment variables \nTo ensure that the build system correctly finds the `ecl` Python package you\nneed to set the environment variables `PYTHONPATH` and `LD_LIBRARY_PATH` to\ninclude the `libecl` installation:\n\n```\nbash% export LD_LIBRARY_PATH=/local/ert/install/lib64:$LD_LIBRARY_PATH\nbash% export PYTHONPATH=/local/ert/install/lib/python2.7/site-packages:$PYTHONPATH\n```\n\nObserve that path components `lib64` and `lib/python*.*/site-packages` will\ndepend on your Python version and which Linux distribution you are using. The\nexample given here is for RedHat based distributions.\n\n\n#### 4. Pip install Ert\n\n```\npip install . --prefix=/local/ert/install\n```\n\nWhen this process if over you will have a binary executable `ert` installed in\n`/local/ert/install/bin/ert`. \n\n\n#### 5. Try your new `ert` installation\n\nTo actually get ert to work at your site you need to configure details about\nyour system; at the very least this means you must configure where your\nreservoir simulator is installed. This is described in the *Post installation*\nsection of the [libres README](https://github.com/Equinor/libres). In addition\nyou might want to configure e.g. queue system in the `site-config` file, but\nthat is not strictly necessary for a basic test.\n\nIn the location `test-data/local/example_case` is a small ert case which can be\nused to verify that your installation is basically sound. The example config\nfile looks like this:\n```\n-- This ert configuration file is an example which can be used to check that your\n-- local ert installation is basically sane. This example is not meant to be used\n-- as an automatically run integration test, rather it is meant to be tested\n-- interactively. In addition to the compiled application this will also verify that\n-- the various configuration files are reasonably correctly stitched together.\n--\n-- To actually test this invoke the ert binary you have installed and give the path to\n-- this file as argument:\n--\n--    /path/to/installed/ert/bin/ert example.ert\n-- \n-- The example is based on the ECLIPSE100 forward model, that implies that you must\n-- configure the local eclipse related details corresponding to your site[1].\n-- \n-- NB: the current case has *not* been carefully constructed to demonstrate the\n-- capabilities of ert; from a model updating perspective the current case is\n-- totally uninteresting.\n-- \n-- [1]: This amounts to editing the file ecl_config.yml in the res.fm.ecl python\n-- package from the libres installation. See the documentation in the\n-- ecl_config.yml example file supplied with the libres distribution, or\n-- alternatively the \"Post install configuration\" section in the libres README. \n\nNUM_REALIZATIONS 20\n\nQUEUE_SYSTEM LOCAL\nQUEUE_OPTION LOCAL MAX_RUNNING 4\n\nRUNPATH      output/simulations/runpath/realisation-%d/iter-%d\nENSPATH      output/storage\n\nECLBASE   EXAMPLE%d\nDATA_FILE eclipse/model/SPE1.DATA\nREFCASE   eclipse/refcase/REFCASE\n\nGEN_KW MULT_PORO templates/poro.tmpl   poro.grdecl  parameters/poro.txt\n\n-- This job will copy the file eclipse/input/schedule to the runpath folder. \nSIMULATION_JOB COPY_FILE eclipse/input/schedule  \n\n\n-- This forward model job requires that you have eclipse version 2016.02\n-- installed locally, feel free to modify this to use a different version if\n-- that is what you have installed.\nSIMULATION_JOB ECLIPSE100 2016.2 <ECLBASE>\n\nOBS_CONFIG observations/observations.txt\n\n\n-- This tells ert that you want to load all summary vectors starting with 'W'. \n-- 'F' and 'BPR'. To be able to use the wildcard notation this way you need to \n-- specify a REFCASE.\n\nSUMMARY W*\nSUMMARY F*\nSUMMARY BPR*\n```\n\n**NB: Depending on which reservoir simulator versions you have installed locally\nyou might have to change the eclipse version number 2016.2 to something else.**\n\nTo actually test this go to the `test-data/local/example_case` directory and\nstart `ert` by giving the full path to the installed binary:\n\n```\n   cd test-data/local/example_case\n   /local/ert/install/bin/ert example.ert\n```\n\nThen the `ert` gui should come up and you can press the `Run simulations`\nbutton. In addition to the gui there is a simple text interface which\ncan be invoked with the `--text` option.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Open Source", "maintainer": "", "maintainer_email": "", "name": "ert", "package_url": "https://pypi.org/project/ert/", "platform": "", "project_url": "https://pypi.org/project/ert/", "project_urls": null, "release_url": "https://pypi.org/project/ert/0.2.0/", "requires_dist": ["ansicolors (==1.1.8)", "console-progressbar (==1.1.2)", "decorator", "equinor-libres", "jinja2", "numpy", "pandas", "pluggy", "pyyaml", "qtpy", "scipy", "matplotlib (<3) ; python_version < \"3.0\"", "PyQt5 ; python_version >= \"3.0\"", "matplotlib (<3.2) ; python_version >= \"3.0\""], "requires_python": "", "summary": "", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ert <a href=\"https://travis-ci.org/equinor/ert\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4915e121978aa95af0e67a980e9f4ae5590a19ba/68747470733a2f2f7472617669732d63692e6f72672f657175696e6f722f6572742e7376673f6272616e63683d6d6173746572\"></a></h1>\n<p>ERT - Ensemble based Reservoir Tool - is a tool to run ensemble based on\nreservoir models. ERT was originally devised as tool to do model updating\n(history matching) with the EnKF method, now the primary method for model\nupdating is the Ensemble Smoother (ES).</p>\n<p>The <code>ert</code> program is based on three different repositories:</p>\n<ol>\n<li>\n<p><a href=\"https://github.com/Equinor/libecl\" rel=\"nofollow\">libecl</a> which contains utilities to read and write Eclipse files.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/Equinor/libres\" rel=\"nofollow\">libres</a> utilities to manage reservoir data, and algorithms do actually do model updating.</p>\n</li>\n<li>\n<p>ert - this repository - the actual application and all of the GUI.</p>\n</li>\n</ol>\n<h2>Building ert</h2>\n<h4>1. Build and install <a href=\"https://github.com/Equinor/libecl\" rel=\"nofollow\">libecl</a> and <a href=\"https://github.com/Equinor/libres\" rel=\"nofollow\">libres</a>.</h4>\n<p>When configuring <code>libecl</code> and\n<code>libres</code> you should used the option <code>-DCMAKE_INSTALL_PREFIX</code> to tell <code>cmake</code>\nwhere to install. The value passed to <code>CMAKE_INSTALL_PREFIX</code> will be needed when\nrunning pip install in point 4, below. For now let us assume that the prefix\n<code>/local/ert/install</code> was used.</p>\n<h4>2. Install Python dependencies</h4>\n<p>In addition you will need to install <code>PyQt</code> For Python 2.7 (<code>PyQt4</code>)- this package\ncan not be installed using <code>pip</code>, you should probably use the package manager from\nyour operating system. For Python &gt;3.5 you can use <code>pip install PyQt5</code>.</p>\n<h4>3. Update environment variables</h4>\n<p>To ensure that the build system correctly finds the <code>ecl</code> Python package you\nneed to set the environment variables <code>PYTHONPATH</code> and <code>LD_LIBRARY_PATH</code> to\ninclude the <code>libecl</code> installation:</p>\n<pre><code>bash% export LD_LIBRARY_PATH=/local/ert/install/lib64:$LD_LIBRARY_PATH\nbash% export PYTHONPATH=/local/ert/install/lib/python2.7/site-packages:$PYTHONPATH\n</code></pre>\n<p>Observe that path components <code>lib64</code> and <code>lib/python*.*/site-packages</code> will\ndepend on your Python version and which Linux distribution you are using. The\nexample given here is for RedHat based distributions.</p>\n<h4>4. Pip install Ert</h4>\n<pre><code>pip install . --prefix=/local/ert/install\n</code></pre>\n<p>When this process if over you will have a binary executable <code>ert</code> installed in\n<code>/local/ert/install/bin/ert</code>.</p>\n<h4>5. Try your new <code>ert</code> installation</h4>\n<p>To actually get ert to work at your site you need to configure details about\nyour system; at the very least this means you must configure where your\nreservoir simulator is installed. This is described in the <em>Post installation</em>\nsection of the <a href=\"https://github.com/Equinor/libres\" rel=\"nofollow\">libres README</a>. In addition\nyou might want to configure e.g. queue system in the <code>site-config</code> file, but\nthat is not strictly necessary for a basic test.</p>\n<p>In the location <code>test-data/local/example_case</code> is a small ert case which can be\nused to verify that your installation is basically sound. The example config\nfile looks like this:</p>\n<pre><code>-- This ert configuration file is an example which can be used to check that your\n-- local ert installation is basically sane. This example is not meant to be used\n-- as an automatically run integration test, rather it is meant to be tested\n-- interactively. In addition to the compiled application this will also verify that\n-- the various configuration files are reasonably correctly stitched together.\n--\n-- To actually test this invoke the ert binary you have installed and give the path to\n-- this file as argument:\n--\n--    /path/to/installed/ert/bin/ert example.ert\n-- \n-- The example is based on the ECLIPSE100 forward model, that implies that you must\n-- configure the local eclipse related details corresponding to your site[1].\n-- \n-- NB: the current case has *not* been carefully constructed to demonstrate the\n-- capabilities of ert; from a model updating perspective the current case is\n-- totally uninteresting.\n-- \n-- [1]: This amounts to editing the file ecl_config.yml in the res.fm.ecl python\n-- package from the libres installation. See the documentation in the\n-- ecl_config.yml example file supplied with the libres distribution, or\n-- alternatively the \"Post install configuration\" section in the libres README. \n\nNUM_REALIZATIONS 20\n\nQUEUE_SYSTEM LOCAL\nQUEUE_OPTION LOCAL MAX_RUNNING 4\n\nRUNPATH      output/simulations/runpath/realisation-%d/iter-%d\nENSPATH      output/storage\n\nECLBASE   EXAMPLE%d\nDATA_FILE eclipse/model/SPE1.DATA\nREFCASE   eclipse/refcase/REFCASE\n\nGEN_KW MULT_PORO templates/poro.tmpl   poro.grdecl  parameters/poro.txt\n\n-- This job will copy the file eclipse/input/schedule to the runpath folder. \nSIMULATION_JOB COPY_FILE eclipse/input/schedule  \n\n\n-- This forward model job requires that you have eclipse version 2016.02\n-- installed locally, feel free to modify this to use a different version if\n-- that is what you have installed.\nSIMULATION_JOB ECLIPSE100 2016.2 &lt;ECLBASE&gt;\n\nOBS_CONFIG observations/observations.txt\n\n\n-- This tells ert that you want to load all summary vectors starting with 'W'. \n-- 'F' and 'BPR'. To be able to use the wildcard notation this way you need to \n-- specify a REFCASE.\n\nSUMMARY W*\nSUMMARY F*\nSUMMARY BPR*\n</code></pre>\n<p><strong>NB: Depending on which reservoir simulator versions you have installed locally\nyou might have to change the eclipse version number 2016.2 to something else.</strong></p>\n<p>To actually test this go to the <code>test-data/local/example_case</code> directory and\nstart <code>ert</code> by giving the full path to the installed binary:</p>\n<pre><code>   cd test-data/local/example_case\n   /local/ert/install/bin/ert example.ert\n</code></pre>\n<p>Then the <code>ert</code> gui should come up and you can press the <code>Run simulations</code>\nbutton. In addition to the gui there is a simple text interface which\ncan be invoked with the <code>--text</code> option.</p>\n\n          </div>"}, "last_serial": 7111255, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5419351e0754d0056878b92e297ed682", "sha256": "bc73ce494184b1a626c31c6a3ec15d5646cdbb80803ea668ded993173f26b7dd"}, "downloads": -1, "filename": "ert-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5419351e0754d0056878b92e297ed682", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 791894, "upload_time": "2020-04-27T11:43:45", "upload_time_iso_8601": "2020-04-27T11:43:45.398605Z", "url": "https://files.pythonhosted.org/packages/05/5e/b830106810884292beef2a2a3659aa42726400397303885eeb9e53ee1948/ert-0.1.0-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "fa3beca27d37ebc12ab09e3881fd9324", "sha256": "d15f9208f93c92ccc44f7a1f0060ea4409dfc4181f8bf84030f4d59bb2b487f8"}, "downloads": -1, "filename": "ert-0.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "fa3beca27d37ebc12ab09e3881fd9324", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 791891, "upload_time": "2020-04-27T12:09:21", "upload_time_iso_8601": "2020-04-27T12:09:21.075224Z", "url": "https://files.pythonhosted.org/packages/8a/f7/1941c91dd09db04751efacea339dd9595e21885ba825b2620c3e4ce3b3e7/ert-0.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab4621182fec75be4c15c01004efa9e7", "sha256": "efd1edb978ea9df92282213e257d12e96c6bb2edebf1044956fd7efcd6458bd9"}, "downloads": -1, "filename": "ert-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ab4621182fec75be4c15c01004efa9e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 791890, "upload_time": "2020-04-27T12:03:49", "upload_time_iso_8601": "2020-04-27T12:03:49.976298Z", "url": "https://files.pythonhosted.org/packages/4d/af/eba08cf1a32fdaa509333950a36f7a63003399f44c0db8d895082221ecd7/ert-0.2.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa3beca27d37ebc12ab09e3881fd9324", "sha256": "d15f9208f93c92ccc44f7a1f0060ea4409dfc4181f8bf84030f4d59bb2b487f8"}, "downloads": -1, "filename": "ert-0.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "fa3beca27d37ebc12ab09e3881fd9324", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 791891, "upload_time": "2020-04-27T12:09:21", "upload_time_iso_8601": "2020-04-27T12:09:21.075224Z", "url": "https://files.pythonhosted.org/packages/8a/f7/1941c91dd09db04751efacea339dd9595e21885ba825b2620c3e4ce3b3e7/ert-0.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab4621182fec75be4c15c01004efa9e7", "sha256": "efd1edb978ea9df92282213e257d12e96c6bb2edebf1044956fd7efcd6458bd9"}, "downloads": -1, "filename": "ert-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ab4621182fec75be4c15c01004efa9e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 791890, "upload_time": "2020-04-27T12:03:49", "upload_time_iso_8601": "2020-04-27T12:03:49.976298Z", "url": "https://files.pythonhosted.org/packages/4d/af/eba08cf1a32fdaa509333950a36f7a63003399f44c0db8d895082221ecd7/ert-0.2.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:44 2020"}