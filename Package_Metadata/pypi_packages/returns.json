{"info": {"author": "sobolevn", "author_email": "mail@sobolevn.me", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "[![Returns logo](https://raw.githubusercontent.com/dry-python/brand/master/logo/returns.png)](https://github.com/dry-python/returns)\n\n-----\n\n[![Build Status](https://travis-ci.com/dry-python/returns.svg?branch=master)](https://travis-ci.com/dry-python/returns)\n[![Coverage Status](https://coveralls.io/repos/github/dry-python/returns/badge.svg?branch=master)](https://coveralls.io/github/dry-python/returns?branch=master)\n[![Documentation Status](https://readthedocs.org/projects/returns/badge/?version=latest)](https://returns.readthedocs.io/en/latest/?badge=latest)\n[![Python Version](https://img.shields.io/pypi/pyversions/returns.svg)](https://pypi.org/project/returns/)\n[![wemake-python-styleguide](https://img.shields.io/badge/style-wemake-000000.svg)](https://github.com/wemake-services/wemake-python-styleguide)\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n\n-----\n\nMake your functions return something meaningful, typed, and safe!\n\n\n## Features\n\n- Provides a bunch of primitives to write declarative business logic\n- Enforces better architecture\n- Fully typed with annotations and checked with `mypy`, [PEP561 compatible](https://www.python.org/dev/peps/pep-0561/)\n- Has a bunch of helpers for better composition\n- Pythonic and pleasant to write and to read \ud83d\udc0d\n- Support functions and coroutines, framework agnostic\n- Easy to start: has lots of docs, tests, and tutorials\n\n\n## Installation\n\n```bash\npip install returns\n```\n\nYou might also want to [configure](https://returns.readthedocs.io/en/latest/pages/container.html#type-safety)\n`mypy` correctly and install our plugin\nto fix [this existing issue](https://github.com/python/mypy/issues/3157):\n\n```ini\n# In setup.cfg or mypy.ini:\n[mypy]\nplugins =\n  returns.contrib.mypy.decorator_plugin\n```\n\nWe also recommend to use the same `mypy` settings [we use](https://github.com/wemake-services/wemake-python-styleguide/blob/master/styles/mypy.toml).\n\nMake sure you know how to get started, [check out our docs](https://returns.readthedocs.io/en/latest/)!\n\n\n## Contents\n\n- [Maybe container](#maybe-container) that allows you to write `None`-free code\n- [RequiresContext container](#requirescontext-container) that allows you to use typed functional dependency injection\n- [Result container](#result-container) that let's you to get rid of exceptions\n- [IO marker](#io-marker) and [IOResult](#troublesome-io) that marks all impure operations and structures them\n\n\n## Maybe container\n\n`None` is called the [worst mistake in the history of Computer Science](https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/).\n\nSo, what can we do to check for `None` in our programs?\nYou can use builtin [Optional](https://mypy.readthedocs.io/en/stable/kinds_of_types.html#optional-types-and-the-none-type) type\nand write a lot of `if some is not None:` conditions.\nBut, **having `null` checks here and there makes your code unreadable**.\n\n```python\nuser: Optional[User]\n\nif user is not None:\n     balance = user.get_balance()\n     if balance is not None:\n         balance_credit = balance.credit_amount()\n         if balance_credit is not None and balance_credit > 0:\n             can_buy_stuff = True\nelse:\n    can_buy_stuff = False\n```\n\nOr you can use\n[Maybe](https://returns.readthedocs.io/en/latest/pages/maybe.html) container!\nIt consists of `Some` and `Nothing` types,\nrepresenting existing state and empty (instead of `None`) state respectively.\n\n```python\nfrom typing import Optional\nfrom returns.maybe import Maybe, maybe\n\n@maybe  # decorator to convert existing Optional[int] to Maybe[int]\ndef bad_function() -> Optional[int]:\n    ...\n\nmaybe_result: Maybe[float] = bad_function().map(\n    lambda number: number / 2,\n)\n# => Maybe will return Some[float] only if there's a non-None value\n#    Otherwise, will return Nothing\n```\n\nYou can be sure that `.map()` method won't be called for `Nothing`.\nForget about `None`-related errors forever!\n\nAnd that's how your initial refactored code will look like:\n\n```python\nuser: Optional[User]\n\ncan_buy_stuff: Maybe[bool] = Maybe.new(user).map(  # type hint is not required\n    lambda real_user: real_user.get_balance(),\n).map(\n    lambda balance: balance.credit_amount(),\n).map(\n    lambda balance_credit: balance_credit > 0,\n)\n```\n\nMuch better, isn't it?\n\n\n## RequiresContext container\n\nMany developers do use some kind of [dependency injection](https://github.com/dry-python/dependencies) in Python.\nAnd usually it is based on the idea\nthat there's some kind of a container and assembly process.\n\nFunctional approach is much simplier!\n\nImagine that you have a `django` based game, where you award users with points for each guessed letter in a word (unguessed letters are marked as `'.'`):\n\n```python\nfrom django.http import HttpRequest, HttpResponse\nfrom words_app.logic import calculate_points\n\ndef view(request: HttpRequest) -> HttpResponse:\n    user_word: str = request.POST['word']  # just an example\n    points = calculate_points(user_word)\n    ...  # later you show the result to user somehow\n\n# Somewhere in your `words_app/logic.py`:\n\ndef calculate_points(word: str) -> int:\n    guessed_letters_count = len([letter for letter in word if letter != '.'])\n    return _award_points_for_letters(guessed_letters_count)\n\ndef _award_points_for_letters(guessed: int) -> int:\n    return 0 if guessed < 5 else guessed  # minimum 6 points possible!\n```\n\nAwesome! It works, users are happy, your logic is pure and awesome.\nBut, later you decide to make the game more fun:\nlet's make the minimal accoutable letters threshold\nconfigurable for an extra challenge.\n\nYou can just do it directly:\n\n```python\ndef _award_points_for_letters(guessed: int, threshold: int) -> int:\n    return 0 if guessed < threshold else guessed\n```\n\nThe problem is that `_award_points_for_letters` is deeply nested.\nAnd then you have to pass `threshold` through the whole callstack,\nincluding `calculate_points` and all other functions that might be on the way.\nAll of them will have to accept `threshold` as a parameter!\nThis is not useful at all!\nLarge code bases will struggle a lot from this change.\n\nOk, you can directly use `django.settings` (or similar)\nin your `_award_points_for_letters` function.\nAnd **ruin your pure logic with framework specific details**. That's ugly!\n\nOr you can use `RequiresContext` container. Let's see how our code changes:\n\n```python\nfrom django.conf import settings\nfrom django.http import HttpRequest, HttpResponse\nfrom words_app.logic import calculate_points\n\ndef view(request: HttpRequest) -> HttpResponse:\n    user_word: str = request.POST['word']  # just an example\n    points = calculate_points(user_words)(settings)  # passing the dependencies\n    ...  # later you show the result to user somehow\n\n# Somewhere in your `words_app/logic.py`:\n\nfrom typing_extensions import Protocol\nfrom returns.context import RequiresContext\n\nclass _Deps(Protocol):  # we rely on abstractions, not direct values or types\n    WORD_THRESHOLD: int\n\ndef calculate_points(word: str) -> RequiresContext[_Deps, int]:\n    guessed_letters_count = len([letter for letter in word if letter != '.'])\n    return _award_points_for_letters(guessed_letters_count)\n\ndef _award_points_for_letters(guessed: int) -> RequiresContext[_Deps, int]:\n    return RequiresContext(\n        lambda deps: 0 if guessed < deps.WORD_THRESHOLD else guessed,\n    )\n```\n\nAnd now you can pass your dependencies in a really direct and explicit way.\nAnd have the type-safety to check what you pass to cover your back.\nCheck out [RequiresContext](https://returns.readthedocs.io/en/latest/pages/context.html) docs for more. There you will learn how to make `'.'` also configurable.\n\nWe also have [RequiresContextResult](https://returns.readthedocs.io/en/latest/pages/context.html#requirescontextresult-container)\nfor context-related operations that might fail.\n\n\n## Result container\n\nPlease, make sure that you are also aware of\n[Railway Oriented Programming](https://fsharpforfunandprofit.com/rop/).\n\n### Straight-forward approach\n\nConsider this code that you can find in **any** `python` project.\n\n```python\nimport requests\n\ndef fetch_user_profile(user_id: int) -> 'UserProfile':\n    \"\"\"Fetches UserProfile dict from foreign API.\"\"\"\n    response = requests.get('/api/users/{0}'.format(user_id))\n    response.raise_for_status()\n    return response.json()\n```\n\nSeems legit, does not it?\nIt also seems like a pretty straight forward code to test.\nAll you need is to mock `requests.get` to return the structure you need.\n\nBut, there are hidden problems in this tiny code sample\nthat are almost impossible to spot at the first glance.\n\n### Hidden problems\n\nLet's have a look at the exact same code,\nbut with the all hidden problems explained.\n\n```python\nimport requests\n\ndef fetch_user_profile(user_id: int) -> 'UserProfile':\n    \"\"\"Fetches UserProfile dict from foreign API.\"\"\"\n    response = requests.get('/api/users/{0}'.format(user_id))\n\n    # What if we try to find user that does not exist?\n    # Or network will go down? Or the server will return 500?\n    # In this case the next line will fail with an exception.\n    # We need to handle all possible errors in this function\n    # and do not return corrupt data to consumers.\n    response.raise_for_status()\n\n    # What if we have received invalid JSON?\n    # Next line will raise an exception!\n    return response.json()\n```\n\nNow, all (probably all?) problems are clear.\nHow can we be sure that this function will be safe\nto use inside our complex business logic?\n\nWe really can not be sure!\nWe will have to create **lots** of `try` and `except` cases\njust to catch the expected exceptions.\n\nOur code will become complex and unreadable with all this mess!\n\n### Pipe example\n\n```python\nimport requests\nfrom returns.result import Result, safe\nfrom returns.pipeline import flow\nfrom returns.pointfree import bind\n\ndef fetch_user_profile(user_id: int) -> Result['UserProfile', Exception]:\n    \"\"\"Fetches `UserProfile` TypedDict from foreign API.\"\"\"\n    return flow(\n        user_id,\n        _make_request,\n        bind(_parse_json),\n    )\n\n@safe\ndef _make_request(user_id: int) -> requests.Response:\n    # TODO: we are not yet done with this example, read more about `IO`:\n    response = requests.get('/api/users/{0}'.format(user_id))\n    response.raise_for_status()\n    return response\n\n@safe\ndef _parse_json(response: requests.Response) -> 'UserProfile':\n    return response.json()\n```\n\nNow we have a clean and a safe and declarative way\nto express our business needs:\n\n- We start from making a request, that might fail at any moment,\n- Then parsing the response if the request was successful,\n- And then return the result.\n\nNow, instead of returning regular values\nwe return values wrapped inside a special container\nthanks to the\n[@safe](https://returns.readthedocs.io/en/latest/pages/result.html#safe)\ndecorator. It will return [Success[YourType] or Failure[Exception]](https://returns.readthedocs.io/en/latest/pages/result.html).\nAnd will never throw exception at us!\n\nWe also use [flow](https://returns.readthedocs.io/en/latest/pages/pipeline.html#flow)\nand [bind](https://returns.readthedocs.io/en/latest/pages/pointfree.html#bind)\nfunctions for handy and declarative composition.\n\nThis way we can be sure that our code won't break in\nrandom places due to some implicit exception.\nNow we control all parts and are prepared for the explicit errors.\n\nWe are not yet done with this example,\nlet's continue to improve it in the next chapter.\n\n\n## IO marker\n\nLet's look at our example from another angle.\nAll its functions look like regular ones:\nit is impossible to tell whether they are [pure](https://en.wikipedia.org/wiki/Pure_function)\nor impure from the first sight.\n\nIt leads to a very important consequence:\n*we start to mix pure and impure code together*.\nWe should not do that!\n\nWhen these two concepts are mixed\nwe suffer really bad when testing or reusing it.\nAlmost everything should be pure by default.\nAnd we should explicitly mark impure parts of the program.\n\nThat's why we have created `IO` marker\nto mark impure functions that never fail.\n\nThese impure functions use `random`, current datetime, environment, or console:\n\n```python\nimport random\nimport datetime as dt\n\nfrom returns.io import IO\n\ndef get_random_number() -> IO[int]:  # or use `@impure` decorator\n    return IO(random.randint(1, 10))  # isn't pure, because random\n\nnow: Callable[[], IO[dt.datetime]] = impure(dt.datetime.now)\n\n@impure\ndef return_and_show_next_number(previous: int) -> int:\n    next_number = previous + 1\n    print(next_number)  # isn't pure, because does IO\n    return next_number\n```\n\nNow we can clearly see which functions are pure and which ones are impure.\nThis helps us a lot in building large applications, unit testing you code,\nand composing bussiness logic together.\n\n### Troublesome IO\n\nAs it was already said, we use `IO` when we handle functions that do not fail.\n\nWhat if our function can fail and is impure?\nLike `requests.get()` we had earlier in your example.\n\nThen we have to use `IOResult` instead of a regular `Result`.\nLet's find the difference:\n\n- Our `_parse_json` function always return\n  the same result (hopefully) for the same input:\n  you can either parse valid `json` or fail on invalid one.\n  That's why we return pure `Result`\n- Our `_make_request` function is impure and can fail.\n  Try to send two similar requests with and without internet connection.\n  The result will be different for the same input.\n  That's why we must use `IOResult` here\n\nSo, in order to fulfill our requirement and separate pure code from impure one,\nwe have to refactor our example.\n\n### Explicit IO\n\nLet's make our [IO](https://returns.readthedocs.io/en/latest/pages/io.html)\nexplicit!\n\n```python\nimport requests\nfrom returns.io import IO, IOResult, impure_safe\nfrom returns.result import safe\nfrom returns.pipeline import flow\nfrom returns.pointfree import bind\n\ndef fetch_user_profile(user_id: int) -> IOResult['UserProfile', Exception]:\n    \"\"\"Fetches `UserProfile` TypedDict from foreign API.\"\"\"\n    return flow(\n        user_id,\n        _make_request,\n        # before: def (Response) -> UserProfile\n        # after safe: def (Response) -> ResultE[UserProfile]\n        # after bind: def (ResultE[Response]) -> ResultE[UserProfile]\n        # after lift: def (IOResultE[Response]) -> IOResultE[UserProfile]\n        IOResult.lift_result(bind(_parse_json)),\n    )\n\n@impure_safe\ndef _make_request(user_id: int) -> requests.Response:\n    response = requests.get('/api/users/{0}'.format(user_id))\n    response.raise_for_status()\n    return response\n\n@safe\ndef _parse_json(response: requests.Response) -> 'UserProfile':\n    return response.json()\n```\n\nAnd latter we can [unsafe_perform_io](https://returns.readthedocs.io/en/latest/pages/io.html#unsafe-perform-io)\nsomewhere at the top level of our program to get the pure value.\n\nAs a result of this refactoring session, we know everything about our code:\n\n- Which parts can fail,\n- Which parts are impure,\n- How to compose them in a smart manner.\n\n\n## More!\n\nWant more? [Go to the docs!](https://returns.readthedocs.io)\nOr read these articles:\n\n- [Python exceptions considered an anti-pattern](https://sobolevn.me/2019/02/python-exceptions-considered-an-antipattern)\n- [Enforcing Single Responsibility Principle in Python](https://sobolevn.me/2019/03/enforcing-srp)\n- [Typed functional Dependency Injection in Python](https://sobolevn.me/2020/02/typed-functional-dependency-injection)\n\nDo you have an article to submit? Feel free to open a pull request!\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://returns.readthedocs.io", "keywords": "functional programming,fp,monads,monad,monad transformers,composition,type-safety,mypy,railway-oriented-programming", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "returns", "package_url": "https://pypi.org/project/returns/", "platform": "", "project_url": "https://pypi.org/project/returns/", "project_urls": {"Homepage": "https://returns.readthedocs.io", "Repository": "https://github.com/dry-python/returns"}, "release_url": "https://pypi.org/project/returns/0.13.0/", "requires_dist": ["typing-extensions (>=3.7,<4.0)"], "requires_python": ">=3.6,<4.0", "summary": "Make your functions return something meaningful, typed, and safe!", "version": "0.13.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/dry-python/returns\" rel=\"nofollow\"><img alt=\"Returns logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb9ae3f81284f60d67f9552cc61f162161d63828/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6472792d707974686f6e2f6272616e642f6d61737465722f6c6f676f2f72657475726e732e706e67\"></a></p>\n<hr>\n<p><a href=\"https://travis-ci.com/dry-python/returns\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/419574ae346d20c2f2b7576490549971c9dd7b38/68747470733a2f2f7472617669732d63692e636f6d2f6472792d707974686f6e2f72657475726e732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/dry-python/returns?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36afc4738c150bdd81ebd91b8f1bfcab1d33dca2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6472792d707974686f6e2f72657475726e732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://returns.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e3ccb67e5cff369d1cf9ba3bf458037403781e8/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f72657475726e732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.org/project/returns/\" rel=\"nofollow\"><img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f6eb1c44840f0756fb41a21081d802c42b549208/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72657475726e732e737667\"></a>\n<a href=\"https://github.com/wemake-services/wemake-python-styleguide\" rel=\"nofollow\"><img alt=\"wemake-python-styleguide\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8b7ab66b651e55b1e788d412c25d402dfc132f7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374796c652d77656d616b652d3030303030302e737667\"></a>\n<a href=\"http://mypy-lang.org/\" rel=\"nofollow\"><img alt=\"Checked with mypy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0db8f5dcbf5f340f278004d5db3d16b4cdf33ba/687474703a2f2f7777772e6d7970792d6c616e672e6f72672f7374617469632f6d7970795f62616467652e737667\"></a></p>\n<hr>\n<p>Make your functions return something meaningful, typed, and safe!</p>\n<h2>Features</h2>\n<ul>\n<li>Provides a bunch of primitives to write declarative business logic</li>\n<li>Enforces better architecture</li>\n<li>Fully typed with annotations and checked with <code>mypy</code>, <a href=\"https://www.python.org/dev/peps/pep-0561/\" rel=\"nofollow\">PEP561 compatible</a></li>\n<li>Has a bunch of helpers for better composition</li>\n<li>Pythonic and pleasant to write and to read \ud83d\udc0d</li>\n<li>Support functions and coroutines, framework agnostic</li>\n<li>Easy to start: has lots of docs, tests, and tutorials</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install returns\n</pre>\n<p>You might also want to <a href=\"https://returns.readthedocs.io/en/latest/pages/container.html#type-safety\" rel=\"nofollow\">configure</a>\n<code>mypy</code> correctly and install our plugin\nto fix <a href=\"https://github.com/python/mypy/issues/3157\" rel=\"nofollow\">this existing issue</a>:</p>\n<pre><span class=\"c1\"># In setup.cfg or mypy.ini:</span>\n<span class=\"k\">[mypy]</span>\n<span class=\"na\">plugins</span> <span class=\"o\">=</span><span class=\"s\"></span>\n<span class=\"s\">  returns.contrib.mypy.decorator_plugin</span>\n</pre>\n<p>We also recommend to use the same <code>mypy</code> settings <a href=\"https://github.com/wemake-services/wemake-python-styleguide/blob/master/styles/mypy.toml\" rel=\"nofollow\">we use</a>.</p>\n<p>Make sure you know how to get started, <a href=\"https://returns.readthedocs.io/en/latest/\" rel=\"nofollow\">check out our docs</a>!</p>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#maybe-container\" rel=\"nofollow\">Maybe container</a> that allows you to write <code>None</code>-free code</li>\n<li><a href=\"#requirescontext-container\" rel=\"nofollow\">RequiresContext container</a> that allows you to use typed functional dependency injection</li>\n<li><a href=\"#result-container\" rel=\"nofollow\">Result container</a> that let's you to get rid of exceptions</li>\n<li><a href=\"#io-marker\" rel=\"nofollow\">IO marker</a> and <a href=\"#troublesome-io\" rel=\"nofollow\">IOResult</a> that marks all impure operations and structures them</li>\n</ul>\n<h2>Maybe container</h2>\n<p><code>None</code> is called the <a href=\"https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/\" rel=\"nofollow\">worst mistake in the history of Computer Science</a>.</p>\n<p>So, what can we do to check for <code>None</code> in our programs?\nYou can use builtin <a href=\"https://mypy.readthedocs.io/en/stable/kinds_of_types.html#optional-types-and-the-none-type\" rel=\"nofollow\">Optional</a> type\nand write a lot of <code>if some is not None:</code> conditions.\nBut, <strong>having <code>null</code> checks here and there makes your code unreadable</strong>.</p>\n<pre><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">]</span>\n\n<span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n     <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get_balance</span><span class=\"p\">()</span>\n     <span class=\"k\">if</span> <span class=\"n\">balance</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n         <span class=\"n\">balance_credit</span> <span class=\"o\">=</span> <span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">credit_amount</span><span class=\"p\">()</span>\n         <span class=\"k\">if</span> <span class=\"n\">balance_credit</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">balance_credit</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n             <span class=\"n\">can_buy_stuff</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">can_buy_stuff</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<p>Or you can use\n<a href=\"https://returns.readthedocs.io/en/latest/pages/maybe.html\" rel=\"nofollow\">Maybe</a> container!\nIt consists of <code>Some</code> and <code>Nothing</code> types,\nrepresenting existing state and empty (instead of <code>None</code>) state respectively.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span>\n<span class=\"kn\">from</span> <span class=\"nn\">returns.maybe</span> <span class=\"kn\">import</span> <span class=\"n\">Maybe</span><span class=\"p\">,</span> <span class=\"n\">maybe</span>\n\n<span class=\"nd\">@maybe</span>  <span class=\"c1\"># decorator to convert existing Optional[int] to Maybe[int]</span>\n<span class=\"k\">def</span> <span class=\"nf\">bad_function</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">maybe_result</span><span class=\"p\">:</span> <span class=\"n\">Maybe</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">bad_function</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">number</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; Maybe will return Some[float] only if there's a non-None value</span>\n<span class=\"c1\">#    Otherwise, will return Nothing</span>\n</pre>\n<p>You can be sure that <code>.map()</code> method won't be called for <code>Nothing</code>.\nForget about <code>None</code>-related errors forever!</p>\n<p>And that's how your initial refactored code will look like:</p>\n<pre><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">]</span>\n\n<span class=\"n\">can_buy_stuff</span><span class=\"p\">:</span> <span class=\"n\">Maybe</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Maybe</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>  <span class=\"c1\"># type hint is not required</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">real_user</span><span class=\"p\">:</span> <span class=\"n\">real_user</span><span class=\"o\">.</span><span class=\"n\">get_balance</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">balance</span><span class=\"p\">:</span> <span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">credit_amount</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">balance_credit</span><span class=\"p\">:</span> <span class=\"n\">balance_credit</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Much better, isn't it?</p>\n<h2>RequiresContext container</h2>\n<p>Many developers do use some kind of <a href=\"https://github.com/dry-python/dependencies\" rel=\"nofollow\">dependency injection</a> in Python.\nAnd usually it is based on the idea\nthat there's some kind of a container and assembly process.</p>\n<p>Functional approach is much simplier!</p>\n<p>Imagine that you have a <code>django</code> based game, where you award users with points for each guessed letter in a word (unguessed letters are marked as <code>'.'</code>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpRequest</span><span class=\"p\">,</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">words_app.logic</span> <span class=\"kn\">import</span> <span class=\"n\">calculate_points</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">HttpRequest</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">HttpResponse</span><span class=\"p\">:</span>\n    <span class=\"n\">user_word</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s1\">'word'</span><span class=\"p\">]</span>  <span class=\"c1\"># just an example</span>\n    <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">calculate_points</span><span class=\"p\">(</span><span class=\"n\">user_word</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>  <span class=\"c1\"># later you show the result to user somehow</span>\n\n<span class=\"c1\"># Somewhere in your `words_app/logic.py`:</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">calculate_points</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"n\">guessed_letters_count</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">([</span><span class=\"n\">letter</span> <span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"n\">word</span> <span class=\"k\">if</span> <span class=\"n\">letter</span> <span class=\"o\">!=</span> <span class=\"s1\">'.'</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">_award_points_for_letters</span><span class=\"p\">(</span><span class=\"n\">guessed_letters_count</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_award_points_for_letters</span><span class=\"p\">(</span><span class=\"n\">guessed</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">guessed</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span> <span class=\"k\">else</span> <span class=\"n\">guessed</span>  <span class=\"c1\"># minimum 6 points possible!</span>\n</pre>\n<p>Awesome! It works, users are happy, your logic is pure and awesome.\nBut, later you decide to make the game more fun:\nlet's make the minimal accoutable letters threshold\nconfigurable for an extra challenge.</p>\n<p>You can just do it directly:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">_award_points_for_letters</span><span class=\"p\">(</span><span class=\"n\">guessed</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">guessed</span> <span class=\"o\">&lt;</span> <span class=\"n\">threshold</span> <span class=\"k\">else</span> <span class=\"n\">guessed</span>\n</pre>\n<p>The problem is that <code>_award_points_for_letters</code> is deeply nested.\nAnd then you have to pass <code>threshold</code> through the whole callstack,\nincluding <code>calculate_points</code> and all other functions that might be on the way.\nAll of them will have to accept <code>threshold</code> as a parameter!\nThis is not useful at all!\nLarge code bases will struggle a lot from this change.</p>\n<p>Ok, you can directly use <code>django.settings</code> (or similar)\nin your <code>_award_points_for_letters</code> function.\nAnd <strong>ruin your pure logic with framework specific details</strong>. That's ugly!</p>\n<p>Or you can use <code>RequiresContext</code> container. Let's see how our code changes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpRequest</span><span class=\"p\">,</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">words_app.logic</span> <span class=\"kn\">import</span> <span class=\"n\">calculate_points</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">HttpRequest</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">HttpResponse</span><span class=\"p\">:</span>\n    <span class=\"n\">user_word</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s1\">'word'</span><span class=\"p\">]</span>  <span class=\"c1\"># just an example</span>\n    <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">calculate_points</span><span class=\"p\">(</span><span class=\"n\">user_words</span><span class=\"p\">)(</span><span class=\"n\">settings</span><span class=\"p\">)</span>  <span class=\"c1\"># passing the dependencies</span>\n    <span class=\"o\">...</span>  <span class=\"c1\"># later you show the result to user somehow</span>\n\n<span class=\"c1\"># Somewhere in your `words_app/logic.py`:</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">typing_extensions</span> <span class=\"kn\">import</span> <span class=\"n\">Protocol</span>\n<span class=\"kn\">from</span> <span class=\"nn\">returns.context</span> <span class=\"kn\">import</span> <span class=\"n\">RequiresContext</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">_Deps</span><span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>  <span class=\"c1\"># we rely on abstractions, not direct values or types</span>\n    <span class=\"n\">WORD_THRESHOLD</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">calculate_points</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">RequiresContext</span><span class=\"p\">[</span><span class=\"n\">_Deps</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"n\">guessed_letters_count</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">([</span><span class=\"n\">letter</span> <span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"n\">word</span> <span class=\"k\">if</span> <span class=\"n\">letter</span> <span class=\"o\">!=</span> <span class=\"s1\">'.'</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">_award_points_for_letters</span><span class=\"p\">(</span><span class=\"n\">guessed_letters_count</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_award_points_for_letters</span><span class=\"p\">(</span><span class=\"n\">guessed</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">RequiresContext</span><span class=\"p\">[</span><span class=\"n\">_Deps</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">RequiresContext</span><span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">deps</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">guessed</span> <span class=\"o\">&lt;</span> <span class=\"n\">deps</span><span class=\"o\">.</span><span class=\"n\">WORD_THRESHOLD</span> <span class=\"k\">else</span> <span class=\"n\">guessed</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>And now you can pass your dependencies in a really direct and explicit way.\nAnd have the type-safety to check what you pass to cover your back.\nCheck out <a href=\"https://returns.readthedocs.io/en/latest/pages/context.html\" rel=\"nofollow\">RequiresContext</a> docs for more. There you will learn how to make <code>'.'</code> also configurable.</p>\n<p>We also have <a href=\"https://returns.readthedocs.io/en/latest/pages/context.html#requirescontextresult-container\" rel=\"nofollow\">RequiresContextResult</a>\nfor context-related operations that might fail.</p>\n<h2>Result container</h2>\n<p>Please, make sure that you are also aware of\n<a href=\"https://fsharpforfunandprofit.com/rop/\" rel=\"nofollow\">Railway Oriented Programming</a>.</p>\n<h3>Straight-forward approach</h3>\n<p>Consider this code that you can find in <strong>any</strong> <code>python</code> project.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fetch_user_profile</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'UserProfile'</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Fetches UserProfile dict from foreign API.\"\"\"</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/users/</span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">))</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<p>Seems legit, does not it?\nIt also seems like a pretty straight forward code to test.\nAll you need is to mock <code>requests.get</code> to return the structure you need.</p>\n<p>But, there are hidden problems in this tiny code sample\nthat are almost impossible to spot at the first glance.</p>\n<h3>Hidden problems</h3>\n<p>Let's have a look at the exact same code,\nbut with the all hidden problems explained.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fetch_user_profile</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'UserProfile'</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Fetches UserProfile dict from foreign API.\"\"\"</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/users/</span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># What if we try to find user that does not exist?</span>\n    <span class=\"c1\"># Or network will go down? Or the server will return 500?</span>\n    <span class=\"c1\"># In this case the next line will fail with an exception.</span>\n    <span class=\"c1\"># We need to handle all possible errors in this function</span>\n    <span class=\"c1\"># and do not return corrupt data to consumers.</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># What if we have received invalid JSON?</span>\n    <span class=\"c1\"># Next line will raise an exception!</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<p>Now, all (probably all?) problems are clear.\nHow can we be sure that this function will be safe\nto use inside our complex business logic?</p>\n<p>We really can not be sure!\nWe will have to create <strong>lots</strong> of <code>try</code> and <code>except</code> cases\njust to catch the expected exceptions.</p>\n<p>Our code will become complex and unreadable with all this mess!</p>\n<h3>Pipe example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">returns.result</span> <span class=\"kn\">import</span> <span class=\"n\">Result</span><span class=\"p\">,</span> <span class=\"n\">safe</span>\n<span class=\"kn\">from</span> <span class=\"nn\">returns.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">flow</span>\n<span class=\"kn\">from</span> <span class=\"nn\">returns.pointfree</span> <span class=\"kn\">import</span> <span class=\"n\">bind</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fetch_user_profile</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"s1\">'UserProfile'</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Fetches `UserProfile` TypedDict from foreign API.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">flow</span><span class=\"p\">(</span>\n        <span class=\"n\">user_id</span><span class=\"p\">,</span>\n        <span class=\"n\">_make_request</span><span class=\"p\">,</span>\n        <span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">_parse_json</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nd\">@safe</span>\n<span class=\"k\">def</span> <span class=\"nf\">_make_request</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">:</span>\n    <span class=\"c1\"># TODO: we are not yet done with this example, read more about `IO`:</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/users/</span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">))</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"nd\">@safe</span>\n<span class=\"k\">def</span> <span class=\"nf\">_parse_json</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'UserProfile'</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<p>Now we have a clean and a safe and declarative way\nto express our business needs:</p>\n<ul>\n<li>We start from making a request, that might fail at any moment,</li>\n<li>Then parsing the response if the request was successful,</li>\n<li>And then return the result.</li>\n</ul>\n<p>Now, instead of returning regular values\nwe return values wrapped inside a special container\nthanks to the\n<a href=\"https://returns.readthedocs.io/en/latest/pages/result.html#safe\" rel=\"nofollow\">@safe</a>\ndecorator. It will return <a href=\"https://returns.readthedocs.io/en/latest/pages/result.html\" rel=\"nofollow\">Success[YourType] or Failure[Exception]</a>.\nAnd will never throw exception at us!</p>\n<p>We also use <a href=\"https://returns.readthedocs.io/en/latest/pages/pipeline.html#flow\" rel=\"nofollow\">flow</a>\nand <a href=\"https://returns.readthedocs.io/en/latest/pages/pointfree.html#bind\" rel=\"nofollow\">bind</a>\nfunctions for handy and declarative composition.</p>\n<p>This way we can be sure that our code won't break in\nrandom places due to some implicit exception.\nNow we control all parts and are prepared for the explicit errors.</p>\n<p>We are not yet done with this example,\nlet's continue to improve it in the next chapter.</p>\n<h2>IO marker</h2>\n<p>Let's look at our example from another angle.\nAll its functions look like regular ones:\nit is impossible to tell whether they are <a href=\"https://en.wikipedia.org/wiki/Pure_function\" rel=\"nofollow\">pure</a>\nor impure from the first sight.</p>\n<p>It leads to a very important consequence:\n<em>we start to mix pure and impure code together</em>.\nWe should not do that!</p>\n<p>When these two concepts are mixed\nwe suffer really bad when testing or reusing it.\nAlmost everything should be pure by default.\nAnd we should explicitly mark impure parts of the program.</p>\n<p>That's why we have created <code>IO</code> marker\nto mark impure functions that never fail.</p>\n<p>These impure functions use <code>random</code>, current datetime, environment, or console:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">returns.io</span> <span class=\"kn\">import</span> <span class=\"n\">IO</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_random_number</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">IO</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>  <span class=\"c1\"># or use `@impure` decorator</span>\n    <span class=\"k\">return</span> <span class=\"n\">IO</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>  <span class=\"c1\"># isn't pure, because random</span>\n\n<span class=\"n\">now</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">IO</span><span class=\"p\">[</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">impure</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@impure</span>\n<span class=\"k\">def</span> <span class=\"nf\">return_and_show_next_number</span><span class=\"p\">(</span><span class=\"n\">previous</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"n\">next_number</span> <span class=\"o\">=</span> <span class=\"n\">previous</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">next_number</span><span class=\"p\">)</span>  <span class=\"c1\"># isn't pure, because does IO</span>\n    <span class=\"k\">return</span> <span class=\"n\">next_number</span>\n</pre>\n<p>Now we can clearly see which functions are pure and which ones are impure.\nThis helps us a lot in building large applications, unit testing you code,\nand composing bussiness logic together.</p>\n<h3>Troublesome IO</h3>\n<p>As it was already said, we use <code>IO</code> when we handle functions that do not fail.</p>\n<p>What if our function can fail and is impure?\nLike <code>requests.get()</code> we had earlier in your example.</p>\n<p>Then we have to use <code>IOResult</code> instead of a regular <code>Result</code>.\nLet's find the difference:</p>\n<ul>\n<li>Our <code>_parse_json</code> function always return\nthe same result (hopefully) for the same input:\nyou can either parse valid <code>json</code> or fail on invalid one.\nThat's why we return pure <code>Result</code></li>\n<li>Our <code>_make_request</code> function is impure and can fail.\nTry to send two similar requests with and without internet connection.\nThe result will be different for the same input.\nThat's why we must use <code>IOResult</code> here</li>\n</ul>\n<p>So, in order to fulfill our requirement and separate pure code from impure one,\nwe have to refactor our example.</p>\n<h3>Explicit IO</h3>\n<p>Let's make our <a href=\"https://returns.readthedocs.io/en/latest/pages/io.html\" rel=\"nofollow\">IO</a>\nexplicit!</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">returns.io</span> <span class=\"kn\">import</span> <span class=\"n\">IO</span><span class=\"p\">,</span> <span class=\"n\">IOResult</span><span class=\"p\">,</span> <span class=\"n\">impure_safe</span>\n<span class=\"kn\">from</span> <span class=\"nn\">returns.result</span> <span class=\"kn\">import</span> <span class=\"n\">safe</span>\n<span class=\"kn\">from</span> <span class=\"nn\">returns.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">flow</span>\n<span class=\"kn\">from</span> <span class=\"nn\">returns.pointfree</span> <span class=\"kn\">import</span> <span class=\"n\">bind</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fetch_user_profile</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">IOResult</span><span class=\"p\">[</span><span class=\"s1\">'UserProfile'</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Fetches `UserProfile` TypedDict from foreign API.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">flow</span><span class=\"p\">(</span>\n        <span class=\"n\">user_id</span><span class=\"p\">,</span>\n        <span class=\"n\">_make_request</span><span class=\"p\">,</span>\n        <span class=\"c1\"># before: def (Response) -&gt; UserProfile</span>\n        <span class=\"c1\"># after safe: def (Response) -&gt; ResultE[UserProfile]</span>\n        <span class=\"c1\"># after bind: def (ResultE[Response]) -&gt; ResultE[UserProfile]</span>\n        <span class=\"c1\"># after lift: def (IOResultE[Response]) -&gt; IOResultE[UserProfile]</span>\n        <span class=\"n\">IOResult</span><span class=\"o\">.</span><span class=\"n\">lift_result</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">_parse_json</span><span class=\"p\">)),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nd\">@impure_safe</span>\n<span class=\"k\">def</span> <span class=\"nf\">_make_request</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">:</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/users/</span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">))</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"nd\">@safe</span>\n<span class=\"k\">def</span> <span class=\"nf\">_parse_json</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'UserProfile'</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<p>And latter we can <a href=\"https://returns.readthedocs.io/en/latest/pages/io.html#unsafe-perform-io\" rel=\"nofollow\">unsafe_perform_io</a>\nsomewhere at the top level of our program to get the pure value.</p>\n<p>As a result of this refactoring session, we know everything about our code:</p>\n<ul>\n<li>Which parts can fail,</li>\n<li>Which parts are impure,</li>\n<li>How to compose them in a smart manner.</li>\n</ul>\n<h2>More!</h2>\n<p>Want more? <a href=\"https://returns.readthedocs.io\" rel=\"nofollow\">Go to the docs!</a>\nOr read these articles:</p>\n<ul>\n<li><a href=\"https://sobolevn.me/2019/02/python-exceptions-considered-an-antipattern\" rel=\"nofollow\">Python exceptions considered an anti-pattern</a></li>\n<li><a href=\"https://sobolevn.me/2019/03/enforcing-srp\" rel=\"nofollow\">Enforcing Single Responsibility Principle in Python</a></li>\n<li><a href=\"https://sobolevn.me/2020/02/typed-functional-dependency-injection\" rel=\"nofollow\">Typed functional Dependency Injection in Python</a></li>\n</ul>\n<p>Do you have an article to submit? Feel free to open a pull request!</p>\n\n          </div>"}, "last_serial": 6559604, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "4c6269376ff3d5899810b2d1d4814dbc", "sha256": "50eac880d63bb21adf883a062fd07043d21ca33ec027fd9488d5ace147bb7a6c"}, "downloads": -1, "filename": "returns-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4c6269376ff3d5899810b2d1d4814dbc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 48768, "upload_time": "2019-08-18T14:13:19", "upload_time_iso_8601": "2019-08-18T14:13:19.448681Z", "url": "https://files.pythonhosted.org/packages/83/b1/571afee58555b18082505c144b0b5079a000c5d2966fc72965f79acae447/returns-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfa8ab0e209b57e68db0c8a7646e9f07", "sha256": "3d3cabfebb7175d2401dfd2d68b2f8f053b9280897817f07c35b027188fb4688"}, "downloads": -1, "filename": "returns-0.10.0.tar.gz", "has_sig": false, "md5_digest": "bfa8ab0e209b57e68db0c8a7646e9f07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 17657, "upload_time": "2019-08-18T14:13:21", "upload_time_iso_8601": "2019-08-18T14:13:21.514953Z", "url": "https://files.pythonhosted.org/packages/22/45/ec1cb65ebf6c4743b4e89b14ef2c9f5246f2006aefaf80ac73ac471ea528/returns-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "848ed2e69c03a58f81acad68db35ee28", "sha256": "c70de72c2c4ac0adee77320933f2c80b9b153e0bed8bf8aa3e428a19b5006225"}, "downloads": -1, "filename": "returns-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "848ed2e69c03a58f81acad68db35ee28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 58545, "upload_time": "2019-08-29T21:41:00", "upload_time_iso_8601": "2019-08-29T21:41:00.517481Z", "url": "https://files.pythonhosted.org/packages/a8/14/453ef80f0cfba6bca1396d41c6085598c2bcda26667c9e8a9a2c6999bb2e/returns-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49d7044791d2d56b8b8beb97266ba7bd", "sha256": "5881eb97daa4d62d513104fa4520e625f90d2a9ff7d7827e1cda21645c5b0c76"}, "downloads": -1, "filename": "returns-0.11.0.tar.gz", "has_sig": false, "md5_digest": "49d7044791d2d56b8b8beb97266ba7bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 18935, "upload_time": "2019-08-29T21:41:02", "upload_time_iso_8601": "2019-08-29T21:41:02.110015Z", "url": "https://files.pythonhosted.org/packages/23/44/fac13b51b4f0b5773830200d6eebecb80140f596fae06e7a98bd85129490/returns-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "4872ac5c4b251cfc54feb311567a2749", "sha256": "0f8355aa0e67a595a3a9fc8713dc1dfe1fe9a00fe291edd3fc779033af1a6216"}, "downloads": -1, "filename": "returns-0.12.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4872ac5c4b251cfc54feb311567a2749", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 24751, "upload_time": "2019-12-21T14:03:45", "upload_time_iso_8601": "2019-12-21T14:03:45.853793Z", "url": "https://files.pythonhosted.org/packages/00/f5/bd17c851168bdf1c9b45192c6e3b4deb1368c6f9a4b8bf3b5a985483cb62/returns-0.12.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6298294204d60b4971c83027ae1a158", "sha256": "b45b71ed7ae9e4f8d4ca4b1253f3d55574b495b486bd4221000d16053f1935a8"}, "downloads": -1, "filename": "returns-0.12.0.tar.gz", "has_sig": false, "md5_digest": "e6298294204d60b4971c83027ae1a158", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 21638, "upload_time": "2019-12-21T14:03:47", "upload_time_iso_8601": "2019-12-21T14:03:47.891876Z", "url": "https://files.pythonhosted.org/packages/b9/28/7a626d69bffa03b694b2cdff64d6e244a27123696d7d1ddc9591023319b3/returns-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "4d6320e5194c677f96c7879535c6e5c0", "sha256": "2de5bd9c1a754c76aead1af33cd183ad0ed71fa7199cf67865e28f4fae349b6c"}, "downloads": -1, "filename": "returns-0.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4d6320e5194c677f96c7879535c6e5c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 52111, "upload_time": "2020-02-02T20:21:59", "upload_time_iso_8601": "2020-02-02T20:21:59.603421Z", "url": "https://files.pythonhosted.org/packages/c8/3b/a586b070e89631d9c109f6e9308dba5aa1faa8909fd535161facf47883bb/returns-0.13.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29582d55b7afa1b2838bf7d4de0aecbc", "sha256": "6003e1a4ef414ec36b42b1cf29a8a87c65f305ab5c9ef7a794eaa4cfb5ad5b6e"}, "downloads": -1, "filename": "returns-0.13.0.tar.gz", "has_sig": false, "md5_digest": "29582d55b7afa1b2838bf7d4de0aecbc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 42617, "upload_time": "2020-02-02T20:22:01", "upload_time_iso_8601": "2020-02-02T20:22:01.611693Z", "url": "https://files.pythonhosted.org/packages/ea/6b/db93b593f8bc8282196928ecb45756c6b0403b2612b435b6c5f54ac984d7/returns-0.13.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ec8c719dd853a3f62a76f66043e8c288", "sha256": "78d3fbfad8bf2e1934f1ee84f6bed3fba92ffaae156d441d3b118622379b8d0a"}, "downloads": -1, "filename": "returns-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ec8c719dd853a3f62a76f66043e8c288", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 22775, "upload_time": "2019-01-30T18:55:59", "upload_time_iso_8601": "2019-01-30T18:55:59.580870Z", "url": "https://files.pythonhosted.org/packages/f0/30/e473806d819960ea7b0cbaa240be835f5f7f09ea52b29716f2b6aa0ae788/returns-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4898ebc78056842ec5bc0486664e7693", "sha256": "cd7c37a745255d034fcb03e969a0927a820ae456c2c76c6e1968e6875ab25fac"}, "downloads": -1, "filename": "returns-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4898ebc78056842ec5bc0486664e7693", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8432, "upload_time": "2019-01-30T18:56:12", "upload_time_iso_8601": "2019-01-30T18:56:12.066839Z", "url": "https://files.pythonhosted.org/packages/10/90/90aa7f935f96447bdbde413478cf969cb3448bcc28a1780c0edd0e4398dc/returns-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "98e115b681de32c7f5e3d0d16c48e845", "sha256": "881f759a45cdaa92a52ef183bc1a051163b05389de1b2d30f19d63690e999aa0"}, "downloads": -1, "filename": "returns-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "98e115b681de32c7f5e3d0d16c48e845", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 29774, "upload_time": "2019-02-02T13:30:27", "upload_time_iso_8601": "2019-02-02T13:30:27.942726Z", "url": "https://files.pythonhosted.org/packages/25/1e/c01ebf5a97f6e44fa0f4902329059ce4f0af441824a5498d07d5a161a3b8/returns-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9a28c66cb8e14492da14e468ac38d7c", "sha256": "3899f29bbecd16794eb491fdfa0d98ef7453ea8de867f24bcae680ba23ef2c9d"}, "downloads": -1, "filename": "returns-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d9a28c66cb8e14492da14e468ac38d7c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 9294, "upload_time": "2019-02-02T13:30:29", "upload_time_iso_8601": "2019-02-02T13:30:29.737744Z", "url": "https://files.pythonhosted.org/packages/28/fa/896d164f5bdaae305ca198b3d68c7f9c625dd4c7c28a8dc391a384607822/returns-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "74c377c34a2bdf15f023687f4d5f0db1", "sha256": "3c34473e7fc62294551ac72f19461610e9989c5315e2688a67d819e2c8338bc0"}, "downloads": -1, "filename": "returns-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "74c377c34a2bdf15f023687f4d5f0db1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 29925, "upload_time": "2019-02-02T17:55:56", "upload_time_iso_8601": "2019-02-02T17:55:56.642700Z", "url": "https://files.pythonhosted.org/packages/16/d3/c25201f48b415da7a8205d9723f3a6869b9b94aa5a2f2c17aa0d69eedcf0/returns-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "950b3c56a6bf0e16b496f3614c3ac873", "sha256": "d9dbd06e18bd3291ecf68768ef2d055ba7a48327ab199214988360c48d89a1bb"}, "downloads": -1, "filename": "returns-0.3.1.tar.gz", "has_sig": false, "md5_digest": "950b3c56a6bf0e16b496f3614c3ac873", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 9330, "upload_time": "2019-02-02T17:55:59", "upload_time_iso_8601": "2019-02-02T17:55:59.183836Z", "url": "https://files.pythonhosted.org/packages/18/93/bfad45bce4385e017e35253f2c9fbedfd312720b03c1af5124458c6434d6/returns-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "b218f1bc80a90bf43136f922d384c80b", "sha256": "7684bb25443011fa3d8ac01d72d5d341c96efccd4df689360b17450d86bf40fc"}, "downloads": -1, "filename": "returns-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b218f1bc80a90bf43136f922d384c80b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 21889, "upload_time": "2019-02-04T11:49:19", "upload_time_iso_8601": "2019-02-04T11:49:19.309526Z", "url": "https://files.pythonhosted.org/packages/c7/2b/a87d557db9186f77381ab178baf14fcc7e435924aab1a157b03cbd150a8a/returns-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2703ac484c2f3c1e53c27ac3f6c3e842", "sha256": "1f276bcd3b9ae4105fa5c10b99552196f6f7679c722ba7a2bd0f30fe70ffd73a"}, "downloads": -1, "filename": "returns-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2703ac484c2f3c1e53c27ac3f6c3e842", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10241, "upload_time": "2019-02-04T11:49:21", "upload_time_iso_8601": "2019-02-04T11:49:21.740610Z", "url": "https://files.pythonhosted.org/packages/0c/0a/466461214aec2f673d3c859cffd4ccf4069d227a555bbe97a7d1a7fb2509/returns-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "6942c4f417863de26bd7648bb09d7038", "sha256": "843a60a9da47fb414786046da78103ea4903b51faaf93a9431ef1e607dfdb45a"}, "downloads": -1, "filename": "returns-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6942c4f417863de26bd7648bb09d7038", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 23548, "upload_time": "2019-06-01T11:06:56", "upload_time_iso_8601": "2019-06-01T11:06:56.219893Z", "url": "https://files.pythonhosted.org/packages/aa/72/e29f17e86c0bfdf80608db2c6bac3adb244390f3d1538e798bb907b94338/returns-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03a72ae4b07ed1320ed7782d1c79a2fd", "sha256": "bd920157db625f632eacc2b9e32d089367a22b4ebee69f59538fffe0f1ea2df6"}, "downloads": -1, "filename": "returns-0.5.0.tar.gz", "has_sig": false, "md5_digest": "03a72ae4b07ed1320ed7782d1c79a2fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10213, "upload_time": "2019-06-01T11:06:57", "upload_time_iso_8601": "2019-06-01T11:06:57.937272Z", "url": "https://files.pythonhosted.org/packages/81/17/7c3bb77baa1dc114290db5055d21cebf814ce743731c591a9708609a9261/returns-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "8edb4bd11d697bebdbe6dba0820a6485", "sha256": "b77d66d6ffe8846bda087961e01a32daa760f18e2d6642644d7dd8e9db289356"}, "downloads": -1, "filename": "returns-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8edb4bd11d697bebdbe6dba0820a6485", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 25050, "upload_time": "2019-06-07T11:12:02", "upload_time_iso_8601": "2019-06-07T11:12:02.842833Z", "url": "https://files.pythonhosted.org/packages/a5/9f/9fd2d3bfbd35a2ce81b5032e5fdee14268111cc5fac42e740b05715a002d/returns-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b7da9d0ab0f010f04770c19cacd6307", "sha256": "3ee82e04d15a201a41a069c95ffad225fbc59bf432fa16c59955282dc9c8a1fe"}, "downloads": -1, "filename": "returns-0.6.0.tar.gz", "has_sig": false, "md5_digest": "6b7da9d0ab0f010f04770c19cacd6307", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10460, "upload_time": "2019-06-07T11:12:04", "upload_time_iso_8601": "2019-06-07T11:12:04.679913Z", "url": "https://files.pythonhosted.org/packages/88/41/fb3ee0d0b5e11a0389555944c37a0c559fea82a4e6689728a6adcddc72e0/returns-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "4b60ffc64e60ad454cb1779483a1c428", "sha256": "4ae24494066f50a272c979a3a562e7010e1c13bc3251c54cfaa3071015707177"}, "downloads": -1, "filename": "returns-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4b60ffc64e60ad454cb1779483a1c428", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 29562, "upload_time": "2019-06-11T08:49:54", "upload_time_iso_8601": "2019-06-11T08:49:54.532371Z", "url": "https://files.pythonhosted.org/packages/c3/f9/8a54e06146b8f05a2659780241969424d1203c60d2d3870ea7ce6078b902/returns-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58eb4e31e21cc83328584139b4b38490", "sha256": "70e8e02f142ad23d8d9289317aeef461fdaa4bda451dce08548a60268985a055"}, "downloads": -1, "filename": "returns-0.7.0.tar.gz", "has_sig": false, "md5_digest": "58eb4e31e21cc83328584139b4b38490", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12526, "upload_time": "2019-06-11T08:49:56", "upload_time_iso_8601": "2019-06-11T08:49:56.448191Z", "url": "https://files.pythonhosted.org/packages/c7/be/6c76a324f61c99fa58b268136d8a69c9490179dc4c55c4f9fc4633f093e5/returns-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "864c2573d908a263ff55a53328418406", "sha256": "9650015abcef2783f13a890f875f9f1c96f6be4c61d4def099e8fefb19d762f6"}, "downloads": -1, "filename": "returns-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "864c2573d908a263ff55a53328418406", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 40427, "upload_time": "2019-06-17T11:29:41", "upload_time_iso_8601": "2019-06-17T11:29:41.174371Z", "url": "https://files.pythonhosted.org/packages/ec/d8/3ab34efd1eec6f176e94feee72395f141be28d3a9ba94229659766c2d221/returns-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65a03e5b12313c4f2f35b533e54b9348", "sha256": "9ebfe9838212b3b4d53910f295f3706c6981ede3b025198a85dc6cbbeaeff36c"}, "downloads": -1, "filename": "returns-0.8.0.tar.gz", "has_sig": false, "md5_digest": "65a03e5b12313c4f2f35b533e54b9348", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 15185, "upload_time": "2019-06-17T11:29:43", "upload_time_iso_8601": "2019-06-17T11:29:43.181417Z", "url": "https://files.pythonhosted.org/packages/2e/c4/743ea1d9753ba026c1e8af51067eb1b6c9a656da98da75776a44db324212/returns-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "8df10fa0dfc0d81c4827fc22b813fec0", "sha256": "648ac841ea854952f2a6498aac2751b2d22d4aed5f0b421fda52741ccf8bed1c"}, "downloads": -1, "filename": "returns-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8df10fa0dfc0d81c4827fc22b813fec0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 42442, "upload_time": "2019-07-01T14:25:59", "upload_time_iso_8601": "2019-07-01T14:25:59.135504Z", "url": "https://files.pythonhosted.org/packages/1e/61/1f1c9d3391c9a236b648fdd58e1c0831f74fb97a48e7f4e8d83f0dfebfe1/returns-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f80faa9461d80c026af59eb48bdbdfa2", "sha256": "c85129dfae5590d02428b977c744ed68584051629e66cd2f35f315911d52b07f"}, "downloads": -1, "filename": "returns-0.9.0.tar.gz", "has_sig": false, "md5_digest": "f80faa9461d80c026af59eb48bdbdfa2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 15754, "upload_time": "2019-07-01T14:26:00", "upload_time_iso_8601": "2019-07-01T14:26:00.972884Z", "url": "https://files.pythonhosted.org/packages/13/d4/3234481ab4da97faedee54629f6c0cfdcfc60de60d92d68aec646f7f88ff/returns-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d6320e5194c677f96c7879535c6e5c0", "sha256": "2de5bd9c1a754c76aead1af33cd183ad0ed71fa7199cf67865e28f4fae349b6c"}, "downloads": -1, "filename": "returns-0.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4d6320e5194c677f96c7879535c6e5c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 52111, "upload_time": "2020-02-02T20:21:59", "upload_time_iso_8601": "2020-02-02T20:21:59.603421Z", "url": "https://files.pythonhosted.org/packages/c8/3b/a586b070e89631d9c109f6e9308dba5aa1faa8909fd535161facf47883bb/returns-0.13.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29582d55b7afa1b2838bf7d4de0aecbc", "sha256": "6003e1a4ef414ec36b42b1cf29a8a87c65f305ab5c9ef7a794eaa4cfb5ad5b6e"}, "downloads": -1, "filename": "returns-0.13.0.tar.gz", "has_sig": false, "md5_digest": "29582d55b7afa1b2838bf7d4de0aecbc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 42617, "upload_time": "2020-02-02T20:22:01", "upload_time_iso_8601": "2020-02-02T20:22:01.611693Z", "url": "https://files.pythonhosted.org/packages/ea/6b/db93b593f8bc8282196928ecb45756c6b0403b2612b435b6c5f54ac984d7/returns-0.13.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:22 2020"}