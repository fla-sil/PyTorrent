{"info": {"author": "Rainy Chan", "author_email": "rainydew@qq.com", "bugtrack_url": null, "classifiers": [], "description": "Deep_Json_Compare\r\n=================\r\n\r\nA library to compare any json string/json-like objects.\r\n\r\nFeatures\r\n--------\r\n\r\n-  Compare jsons and print the differences (and where they are,\r\n   recursion supported). Useful for interface testing.\r\n-  Ignore the order of items in a list or not, recursively.\r\n-  Both python 27 and 36 supported.\r\n-  Regular expression supported for string to skip unconcerned keys or\r\n   just to assert the format.\r\n-  Compact **string** and **unicode** (or **bytes** and **str** in\r\n   python3), they are considered equal. Good for non ascii coding\r\n   languages.\r\n-  Support tuples, so results from pymysql.cursors.DictCursor can\r\n   compare with interface response directly.\r\n-  Json type legal check.\r\n-  Support skipping anywhere using argument like *ignore_path=[\u201c/a/1/k\u201d,\r\n   \u201c/a/1/l\u201d]*, dict keys or list indexes. Skipped fields are regarded as\r\n   match. (New)\r\n\r\nQuickStart\r\n----------\r\n\r\n.. code:: shell\r\n\r\n   pip install deepjsoncompare\r\n\r\n.. code:: python\r\n\r\n   from json_compare import Jcompare\r\n   cp=Jcompare()\r\n   print(cp.compare({\"key1\":[\"v1\",\"v2\"],\"key2\":{\"key3\":1}},{\"key1\":[\"v2\",\"v1\"],\"key2\":{\"key3\":2}}))\r\n\r\nto see\r\n\r\n::\r\n\r\n   a is {'key2': {'key3': 1}, 'key1': ['v1', 'v2']}\r\n   b is {'key2': {'key3': 2}, 'key1': ['v2', 'v1']}\r\n   ignore_list_seq = True, re_compare = True\r\n   different value at /key2/key3\r\n   a: 1\r\n   b: 2\r\n   False\r\n\r\nfor more demo and information, just install it and visit the test file\r\n**test_json_compare.py** in **Your Python\r\nPath/Lib/site-packages/deepjsoncompare/**\r\n\r\nSmall Hints\r\n-----------\r\n\r\n-  Datetime in SQL result is not JSON serializable type, use something\r\n   like *CAST(create_time as CHAR) \u2018create_time\u2019* in SQL statement to\r\n   solve it.\r\n\r\nTodo\r\n----\r\n\r\n-  Fuzzy equal when handling floats.\r\n\r\nBug report\r\n----------\r\n\r\n-  Issues and bug reports to rainydew@qq.com.\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://rainydew.blog.csdn.net/article/details/93904318", "keywords": "json compare comparison order unicode fuzzy", "license": "", "maintainer": "", "maintainer_email": "", "name": "deepjsoncompare", "package_url": "https://pypi.org/project/deepjsoncompare/", "platform": "", "project_url": "https://pypi.org/project/deepjsoncompare/", "project_urls": {"Homepage": "https://rainydew.blog.csdn.net/article/details/93904318"}, "release_url": "https://pypi.org/project/deepjsoncompare/1.12/", "requires_dist": null, "requires_python": "", "summary": "(deprecated, moved to <https://pypi.org/project/jsoncomparedeep>) A recursive Json comparing library that handles list orders and fuzzy types", "version": "1.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A library to compare any json string/json-like objects.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Compare jsons and print the differences (and where they are,\nrecursion supported). Useful for interface testing.</li>\n<li>Ignore the order of items in a list or not, recursively.</li>\n<li>Both python 27 and 36 supported.</li>\n<li>Regular expression supported for string to skip unconcerned keys or\njust to assert the format.</li>\n<li>Compact <strong>string</strong> and <strong>unicode</strong> (or <strong>bytes</strong> and <strong>str</strong> in\npython3), they are considered equal. Good for non ascii coding\nlanguages.</li>\n<li>Support tuples, so results from pymysql.cursors.DictCursor can\ncompare with interface response directly.</li>\n<li>Json type legal check.</li>\n<li>Support skipping anywhere using argument like <em>ignore_path=[\u201c/a/1/k\u201d,\n\u201c/a/1/l\u201d]</em>, dict keys or list indexes. Skipped fields are regarded as\nmatch. (New)</li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>QuickStart</h2>\n<pre>pip install deepjsoncompare\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json_compare</span> <span class=\"kn\">import</span> <span class=\"n\">Jcompare</span>\n<span class=\"n\">cp</span><span class=\"o\">=</span><span class=\"n\">Jcompare</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">({</span><span class=\"s2\">\"key1\"</span><span class=\"p\">:[</span><span class=\"s2\">\"v1\"</span><span class=\"p\">,</span><span class=\"s2\">\"v2\"</span><span class=\"p\">],</span><span class=\"s2\">\"key2\"</span><span class=\"p\">:{</span><span class=\"s2\">\"key3\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}},{</span><span class=\"s2\">\"key1\"</span><span class=\"p\">:[</span><span class=\"s2\">\"v2\"</span><span class=\"p\">,</span><span class=\"s2\">\"v1\"</span><span class=\"p\">],</span><span class=\"s2\">\"key2\"</span><span class=\"p\">:{</span><span class=\"s2\">\"key3\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">}}))</span>\n</pre>\n<p>to see</p>\n<pre>a is {'key2': {'key3': 1}, 'key1': ['v1', 'v2']}\nb is {'key2': {'key3': 2}, 'key1': ['v2', 'v1']}\nignore_list_seq = True, re_compare = True\ndifferent value at /key2/key3\na: 1\nb: 2\nFalse\n</pre>\n<p>for more demo and information, just install it and visit the test file\n<strong>test_json_compare.py</strong> in <strong>Your Python\nPath/Lib/site-packages/deepjsoncompare/</strong></p>\n</div>\n<div id=\"small-hints\">\n<h2>Small Hints</h2>\n<ul>\n<li>Datetime in SQL result is not JSON serializable type, use something\nlike <em>CAST(create_time as CHAR) \u2018create_time\u2019</em> in SQL statement to\nsolve it.</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>Fuzzy equal when handling floats.</li>\n</ul>\n</div>\n<div id=\"bug-report\">\n<h2>Bug report</h2>\n<ul>\n<li>Issues and bug reports to <a href=\"mailto:rainydew%40qq.com\">rainydew<span>@</span>qq<span>.</span>com</a>.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5530418, "releases": {"1.12": [{"comment_text": "", "digests": {"md5": "8bac89e70015c67f1203ac4157fc5a03", "sha256": "0edd888d94bc565afe7a71d0dbda183f6c7bd6a798dd32f58ced1c92549b6d26"}, "downloads": -1, "filename": "deepjsoncompare-1.12.tar.gz", "has_sig": false, "md5_digest": "8bac89e70015c67f1203ac4157fc5a03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6544, "upload_time": "2019-07-14T08:53:25", "upload_time_iso_8601": "2019-07-14T08:53:25.516887Z", "url": "https://files.pythonhosted.org/packages/e1/83/41216891a22d63568edb22e7542e5995a4271f91cfa4a9021404dcb7ab0f/deepjsoncompare-1.12.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8bac89e70015c67f1203ac4157fc5a03", "sha256": "0edd888d94bc565afe7a71d0dbda183f6c7bd6a798dd32f58ced1c92549b6d26"}, "downloads": -1, "filename": "deepjsoncompare-1.12.tar.gz", "has_sig": false, "md5_digest": "8bac89e70015c67f1203ac4157fc5a03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6544, "upload_time": "2019-07-14T08:53:25", "upload_time_iso_8601": "2019-07-14T08:53:25.516887Z", "url": "https://files.pythonhosted.org/packages/e1/83/41216891a22d63568edb22e7542e5995a4271f91cfa4a9021404dcb7ab0f/deepjsoncompare-1.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:24 2020"}