{"info": {"author": "InCountry", "author_email": "developers@incountry.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\nInCountry Storage SDK\n============\n\nInstallation\n-----\nThe recommended way to install the SDK is to use `pipenv` (or `pip`):\n```\n$ pipenv install incountry\n```\n\nCountries List\n----\nFor a full list of supported countries and their codes please [follow this link](countries.md).\n\n\nUsage\n-----\nTo access your data in InCountry using Python SDK, you need to create an instance of `Storage` class.\n```python\nfrom incountry import Storage\n\nstorage = Storage(\n    api_key=\"string\",              # Required to be passed in, or as environment variable INC_API_KEY\n    environment_id=\"string\",       # Required to be passed in, or as environment variable INC_ENVIRONMENT_ID\n    endpoint=\"string\",             # Optional. Defines API URL\n    encrypt=bool,                  # Optional. If False, encryption is not used\n    debug=bool,                    # Optional. If True enables some debug logging\n    secret_key_accessor=accessor,  # Instance of SecretKeyAccessor class. Used to fetch encryption secret\n)\n```\n`api_key` and `environment_id` can be fetched from your dashboard on `Incountry` site.\n\n`endpoint` defines API URL and is used to override default one.\n\nYou can turn off encryption (not recommended). Set `encrypt` property to `false` if you want to do this.\n\n#### Encryption key\n\n`secret_key_accessor` is used to pass a secret used for encryption.\n\nNote: even though PBKDF2 is used internally to generate a cryptographically strong encryption key, you must make sure that you use strong enough password.\n\nHere are some examples how you can use `SecretKeyAccessor`.\n```python\n# Get secret from variable\nfrom incountry import SecretKeyAccessor\n\npassword = \"password\"\nsecret_key_accessor = SecretKeyAccessor(lambda: password)\n\n# Get secret via http request\nfrom incountry import SecretKeyAccessor\nimport requests as req\n\ndef get_secret():\n    url = \"<your_secret_url>\"\n    r = req.get(url)\n    return r.json().get(\"secret\") # assuming response is {\"secret\": \"password\"}\n\nsecret_key_accessor = SecretKeyAccessor(get_secret)\n```\n\n### Writing data to Storage\n\nUse `write` method in order to create a record.\n```python\nrecord = storage.write(\n    country=\"string\",      # Required country code of where to store the data\n    key=\"string\",          # Required record key\n    body=\"string\",         # Optional payload\n    profile_key=\"string\",  # Optional\n    range_key=integer,     # Optional\n    key2=\"string\",         # Optional\n    key3=\"string\",         # Optional\n)\n\n# `write` returns created record on success\n```\n#### Encryption\nInCountry uses client-side encryption for your data. Note that only body is encrypted. Some of other fields are hashed.\nHere is how data is transformed and stored in InCountry database:\n```python\n{\n    key,          # hashed\n    body,         # encrypted\n    profile_key,  # hashed\n    range_key,    # plain\n    key2,         # hashed\n    key3,         # hashed\n}\n```\n### Reading stored data\n\nStored record can be read by `key` using `readAsync` method. It accepts an object with two fields: `country` and `key`\n```python\nrecord = storage.read(\n    country=\"string\",      # Required country code\n    key=\"string\",          # Required record key\n)\n```\n\n### Find records\n\nIt is possible to search by random keys using `find` method.\n```python\nrecords = storage.find(country, limit, offset, **filter_kwargs)\n```\nParameters:\n`country` - country code,\n`limit` - maximum amount of records you'd like to retrieve. Defaults to 100,\n`offset` - specifies the number of records to skip,\n`filter_kwargs` - a filter parameters.\n\nHere is the example of how `find` method can be used:\n```python\nrecords = storage.find(country=\"us\", limit=10, offset=10, key2=\"kitty\", key3=[\"mew\", \"purr\"])\n```\nThis call returns all records with `key2` equals `kitty` AND `key3` equals `mew` OR `purr`. The `options` parameter defines the number of records to return and the starting index. It can be used for pagination. Note: SDK returns 100 records at most.\n\nThe return object looks like the following:\n```python\n{\n    \"data\": [...],\n    \"errors\": [...],   # optional\n    \"meta\": {\n        \"limit\": 10,\n        \"offset\": 10,\n        \"total\": 124,  # total records matching filter, ignoring limit\n    }\n}\n```\nYou can use the following types for filter parameters.\nSingle value:\n```python\nkey2=\"kitty\"\n```\nOne of the values:\n```python\nkey3=[\"mew\", \"purr\"]\n```\n`range_key` is a numeric field so you can use range filter requests, for example:\n```python\nrange_key={\"$lt\": 1000} # search for records with range_key < 1000\n```\nAvailable request options for `range_key`: `$lt`, `$lte`, `$gt`, `$gte`.\n\nYou can search by any keys: `key`, `key2`, `key3`, `profile_key`, `range_key`.\n\n#### Error handling\n\nThere could be a situation when `find` method will receive records that could not be decrypted.\nFor example, if one changed the encryption key while the found data is encrypted with the older version of that key.\nIn such cases find() method return data will be as follows:\n\n```python\n{\n    \"data\": [...],  # successfully decrypted records\n    \"errors\": [{\n        \"rawData\",  # raw record which caused decryption error\n        \"error\",    # decryption error description\n    }, ...],\n    \"meta\": { ... }\n}\n```\n\n### Find one record matching filter\n\nIf you need to find the first record matching filter, you can use the `find_one` method.\n```python\nrecord = storage.find_one(country, offset, **filter_kwargs)\n```\nIf record is not found, it will return `None`.\n\n### Delete records\nUse `deleteAsync` method in order to delete a record from InCountry storage. It is only possible using `key` field.\n```python\nstorage.delete(\n    country=\"string\",      # Required country code\n    key=\"string\",          # Required record key\n)\n\n# `delete` will raise an Exception if fails\n```\n\nTesting Locally\n-----\n\n1. In terminal run `pipenv run tests` for unit tests\n2. In terminal run `pipenv run integrations` to run integration tests\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/incountry/sdk-python", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "incountry", "package_url": "https://pypi.org/project/incountry/", "platform": "", "project_url": "https://pypi.org/project/incountry/", "project_urls": {"Homepage": "https://github.com/incountry/sdk-python"}, "release_url": "https://pypi.org/project/incountry/1.1.2/", "requires_dist": ["requests", "cryptography"], "requires_python": ">=3.6.0", "summary": "InCountry Storage SDK", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>InCountry Storage SDK</h1>\n<h2>Installation</h2>\n<p>The recommended way to install the SDK is to use <code>pipenv</code> (or <code>pip</code>):</p>\n<pre><code>$ pipenv install incountry\n</code></pre>\n<h2>Countries List</h2>\n<p>For a full list of supported countries and their codes please <a href=\"countries.md\" rel=\"nofollow\">follow this link</a>.</p>\n<h2>Usage</h2>\n<p>To access your data in InCountry using Python SDK, you need to create an instance of <code>Storage</code> class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">incountry</span> <span class=\"kn\">import</span> <span class=\"n\">Storage</span>\n\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">Storage</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>              <span class=\"c1\"># Required to be passed in, or as environment variable INC_API_KEY</span>\n    <span class=\"n\">environment_id</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>       <span class=\"c1\"># Required to be passed in, or as environment variable INC_ENVIRONMENT_ID</span>\n    <span class=\"n\">endpoint</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>             <span class=\"c1\"># Optional. Defines API URL</span>\n    <span class=\"n\">encrypt</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">,</span>                  <span class=\"c1\"># Optional. If False, encryption is not used</span>\n    <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">,</span>                    <span class=\"c1\"># Optional. If True enables some debug logging</span>\n    <span class=\"n\">secret_key_accessor</span><span class=\"o\">=</span><span class=\"n\">accessor</span><span class=\"p\">,</span>  <span class=\"c1\"># Instance of SecretKeyAccessor class. Used to fetch encryption secret</span>\n<span class=\"p\">)</span>\n</pre>\n<p><code>api_key</code> and <code>environment_id</code> can be fetched from your dashboard on <code>Incountry</code> site.</p>\n<p><code>endpoint</code> defines API URL and is used to override default one.</p>\n<p>You can turn off encryption (not recommended). Set <code>encrypt</code> property to <code>false</code> if you want to do this.</p>\n<h4>Encryption key</h4>\n<p><code>secret_key_accessor</code> is used to pass a secret used for encryption.</p>\n<p>Note: even though PBKDF2 is used internally to generate a cryptographically strong encryption key, you must make sure that you use strong enough password.</p>\n<p>Here are some examples how you can use <code>SecretKeyAccessor</code>.</p>\n<pre><span class=\"c1\"># Get secret from variable</span>\n<span class=\"kn\">from</span> <span class=\"nn\">incountry</span> <span class=\"kn\">import</span> <span class=\"n\">SecretKeyAccessor</span>\n\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s2\">\"password\"</span>\n<span class=\"n\">secret_key_accessor</span> <span class=\"o\">=</span> <span class=\"n\">SecretKeyAccessor</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get secret via http request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">incountry</span> <span class=\"kn\">import</span> <span class=\"n\">SecretKeyAccessor</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span> <span class=\"k\">as</span> <span class=\"nn\">req</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_secret</span><span class=\"p\">():</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;your_secret_url&gt;\"</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"secret\"</span><span class=\"p\">)</span> <span class=\"c1\"># assuming response is {\"secret\": \"password\"}</span>\n\n<span class=\"n\">secret_key_accessor</span> <span class=\"o\">=</span> <span class=\"n\">SecretKeyAccessor</span><span class=\"p\">(</span><span class=\"n\">get_secret</span><span class=\"p\">)</span>\n</pre>\n<h3>Writing data to Storage</h3>\n<p>Use <code>write</code> method in order to create a record.</p>\n<pre><span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span>\n    <span class=\"n\">country</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>      <span class=\"c1\"># Required country code of where to store the data</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>          <span class=\"c1\"># Required record key</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>         <span class=\"c1\"># Optional payload</span>\n    <span class=\"n\">profile_key</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Optional</span>\n    <span class=\"n\">range_key</span><span class=\"o\">=</span><span class=\"n\">integer</span><span class=\"p\">,</span>     <span class=\"c1\"># Optional</span>\n    <span class=\"n\">key2</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>         <span class=\"c1\"># Optional</span>\n    <span class=\"n\">key3</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>         <span class=\"c1\"># Optional</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># `write` returns created record on success</span>\n</pre>\n<h4>Encryption</h4>\n<p>InCountry uses client-side encryption for your data. Note that only body is encrypted. Some of other fields are hashed.\nHere is how data is transformed and stored in InCountry database:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"n\">key</span><span class=\"p\">,</span>          <span class=\"c1\"># hashed</span>\n    <span class=\"n\">body</span><span class=\"p\">,</span>         <span class=\"c1\"># encrypted</span>\n    <span class=\"n\">profile_key</span><span class=\"p\">,</span>  <span class=\"c1\"># hashed</span>\n    <span class=\"n\">range_key</span><span class=\"p\">,</span>    <span class=\"c1\"># plain</span>\n    <span class=\"n\">key2</span><span class=\"p\">,</span>         <span class=\"c1\"># hashed</span>\n    <span class=\"n\">key3</span><span class=\"p\">,</span>         <span class=\"c1\"># hashed</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Reading stored data</h3>\n<p>Stored record can be read by <code>key</code> using <code>readAsync</code> method. It accepts an object with two fields: <code>country</code> and <code>key</code></p>\n<pre><span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span>\n    <span class=\"n\">country</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>      <span class=\"c1\"># Required country code</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>          <span class=\"c1\"># Required record key</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Find records</h3>\n<p>It is possible to search by random keys using <code>find</code> method.</p>\n<pre><span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">country</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">filter_kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters:\n<code>country</code> - country code,\n<code>limit</code> - maximum amount of records you'd like to retrieve. Defaults to 100,\n<code>offset</code> - specifies the number of records to skip,\n<code>filter_kwargs</code> - a filter parameters.</p>\n<p>Here is the example of how <code>find</code> method can be used:</p>\n<pre><span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">country</span><span class=\"o\">=</span><span class=\"s2\">\"us\"</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">key2</span><span class=\"o\">=</span><span class=\"s2\">\"kitty\"</span><span class=\"p\">,</span> <span class=\"n\">key3</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"mew\"</span><span class=\"p\">,</span> <span class=\"s2\">\"purr\"</span><span class=\"p\">])</span>\n</pre>\n<p>This call returns all records with <code>key2</code> equals <code>kitty</code> AND <code>key3</code> equals <code>mew</code> OR <code>purr</code>. The <code>options</code> parameter defines the number of records to return and the starting index. It can be used for pagination. Note: SDK returns 100 records at most.</p>\n<p>The return object looks like the following:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"errors\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">],</span>   <span class=\"c1\"># optional</span>\n    <span class=\"s2\">\"meta\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"limit\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"offset\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"total\"</span><span class=\"p\">:</span> <span class=\"mi\">124</span><span class=\"p\">,</span>  <span class=\"c1\"># total records matching filter, ignoring limit</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can use the following types for filter parameters.\nSingle value:</p>\n<pre><span class=\"n\">key2</span><span class=\"o\">=</span><span class=\"s2\">\"kitty\"</span>\n</pre>\n<p>One of the values:</p>\n<pre><span class=\"n\">key3</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"mew\"</span><span class=\"p\">,</span> <span class=\"s2\">\"purr\"</span><span class=\"p\">]</span>\n</pre>\n<p><code>range_key</code> is a numeric field so you can use range filter requests, for example:</p>\n<pre><span class=\"n\">range_key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"$lt\"</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">}</span> <span class=\"c1\"># search for records with range_key &lt; 1000</span>\n</pre>\n<p>Available request options for <code>range_key</code>: <code>$lt</code>, <code>$lte</code>, <code>$gt</code>, <code>$gte</code>.</p>\n<p>You can search by any keys: <code>key</code>, <code>key2</code>, <code>key3</code>, <code>profile_key</code>, <code>range_key</code>.</p>\n<h4>Error handling</h4>\n<p>There could be a situation when <code>find</code> method will receive records that could not be decrypted.\nFor example, if one changed the encryption key while the found data is encrypted with the older version of that key.\nIn such cases find() method return data will be as follows:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">],</span>  <span class=\"c1\"># successfully decrypted records</span>\n    <span class=\"s2\">\"errors\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">\"rawData\"</span><span class=\"p\">,</span>  <span class=\"c1\"># raw record which caused decryption error</span>\n        <span class=\"s2\">\"error\"</span><span class=\"p\">,</span>    <span class=\"c1\"># decryption error description</span>\n    <span class=\"p\">},</span> <span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"meta\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Find one record matching filter</h3>\n<p>If you need to find the first record matching filter, you can use the <code>find_one</code> method.</p>\n<pre><span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">(</span><span class=\"n\">country</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">filter_kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>If record is not found, it will return <code>None</code>.</p>\n<h3>Delete records</h3>\n<p>Use <code>deleteAsync</code> method in order to delete a record from InCountry storage. It is only possible using <code>key</code> field.</p>\n<pre><span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span>\n    <span class=\"n\">country</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>      <span class=\"c1\"># Required country code</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>          <span class=\"c1\"># Required record key</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># `delete` will raise an Exception if fails</span>\n</pre>\n<h2>Testing Locally</h2>\n<ol>\n<li>In terminal run <code>pipenv run tests</code> for unit tests</li>\n<li>In terminal run <code>pipenv run integrations</code> to run integration tests</li>\n</ol>\n\n          </div>"}, "last_serial": 7077533, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "0e18ee1d6ca6d69b95f453b95b2e1a6c", "sha256": "5604f8386a8d7b560fdcba44e16fed36455bf4198a93f1b360e9769be34b20a9"}, "downloads": -1, "filename": "incountry-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e18ee1d6ca6d69b95f453b95b2e1a6c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 4020, "upload_time": "2019-07-15T23:30:44", "upload_time_iso_8601": "2019-07-15T23:30:44.079489Z", "url": "https://files.pythonhosted.org/packages/e9/63/4fd78f45e5cd10e3134db8b33214d7c75d6d59c7230ecb7eea0f443856d7/incountry-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dd202a3ff47da5fcc6aae5c988c8de8", "sha256": "bf8485855c143d4406ea6a4f14547afbf4b1d6ee72e8d49190a842a21525cb10"}, "downloads": -1, "filename": "incountry-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9dd202a3ff47da5fcc6aae5c988c8de8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4668, "upload_time": "2019-07-15T23:30:45", "upload_time_iso_8601": "2019-07-15T23:30:45.171096Z", "url": "https://files.pythonhosted.org/packages/9b/c4/7a2b5ad9cc3838022b882c71177fda019d358c08e65cdf075ab435708c8c/incountry-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1ac50794703033f66b4398a2eca3c2cd", "sha256": "bd57c7f2d57565d2e97d806c2a32ec3c3af182da47a16e36d2d600a53ad03089"}, "downloads": -1, "filename": "incountry-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1ac50794703033f66b4398a2eca3c2cd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 5089, "upload_time": "2019-07-17T23:58:35", "upload_time_iso_8601": "2019-07-17T23:58:35.175622Z", "url": "https://files.pythonhosted.org/packages/3c/07/1a6c55b494d35cfba74c732780c63144d327481dfddff3925160f851bcfd/incountry-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2402ad8f9733ce2ef8b537795aee4c10", "sha256": "44c65f12756a04de460475f5f7279bce26c732814dccc110a9e553fcc3bb1c2f"}, "downloads": -1, "filename": "incountry-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2402ad8f9733ce2ef8b537795aee4c10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5038, "upload_time": "2019-07-17T23:58:36", "upload_time_iso_8601": "2019-07-17T23:58:36.190127Z", "url": "https://files.pythonhosted.org/packages/8b/40/4c6b57b20d3c410f8adedd8426f943cd45da0a44395304f0d1d77a5f0840/incountry-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "00bb66afa3ad97be44437f3731922019", "sha256": "92bc537d7f996d15e3f7aa63b2c8b0aeab221bd96b44361cd111c38dadb502fc"}, "downloads": -1, "filename": "incountry-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "00bb66afa3ad97be44437f3731922019", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 5765, "upload_time": "2019-08-26T22:33:12", "upload_time_iso_8601": "2019-08-26T22:33:12.860333Z", "url": "https://files.pythonhosted.org/packages/24/6d/8c1feeb6344f893c3009a76a8b3e9afbb7c337f8a33072abec67bf309b44/incountry-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85bb2be70ca9f5663475e32de8018d56", "sha256": "d1f8b57273243fac56c9bb043f562cc8d8b1bbb791471fab8ac2ca2b05efcca0"}, "downloads": -1, "filename": "incountry-0.3.0.tar.gz", "has_sig": false, "md5_digest": "85bb2be70ca9f5663475e32de8018d56", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5690, "upload_time": "2019-08-26T22:33:14", "upload_time_iso_8601": "2019-08-26T22:33:14.511735Z", "url": "https://files.pythonhosted.org/packages/d6/7d/49adcd9a20d9b7bba53e714f3d9f8e690a20c1024a67b284f9e87ff7cd78/incountry-0.3.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "7cf853a63c92c052852ba6c1247a877b", "sha256": "f8720b7bc2c643f8dcdb4ad1691f98853db70da7f098352c46a88fa66f1328c3"}, "downloads": -1, "filename": "incountry-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7cf853a63c92c052852ba6c1247a877b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 8095, "upload_time": "2019-12-20T10:20:11", "upload_time_iso_8601": "2019-12-20T10:20:11.343255Z", "url": "https://files.pythonhosted.org/packages/79/2b/2a367b8d8e5dbfa217467257f7c0603d5a73208a92484b4e26aebae11cd6/incountry-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c7b5ca00084ae30564a2ff9493a2b7e", "sha256": "fc0ea9c28ab7f96bc27166b28e2668c6c402cb2ac6da1b2b342ea801a413875f"}, "downloads": -1, "filename": "incountry-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0c7b5ca00084ae30564a2ff9493a2b7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9285, "upload_time": "2019-12-20T10:20:13", "upload_time_iso_8601": "2019-12-20T10:20:13.164839Z", "url": "https://files.pythonhosted.org/packages/ee/f9/a237b7f982f5b9918173f7ffc6ba6d532ec14195d03df09e24c1d45498da/incountry-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "5ae7b3fa9a1968bffa7254fd88957067", "sha256": "db226e5da9fcd104b6580ddb471eb406c45c7a3ee5fbd38db7ab18afaec20f07"}, "downloads": -1, "filename": "incountry-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5ae7b3fa9a1968bffa7254fd88957067", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 8431, "upload_time": "2020-01-27T13:31:20", "upload_time_iso_8601": "2020-01-27T13:31:20.767570Z", "url": "https://files.pythonhosted.org/packages/db/e4/0833973bb7f8d2dc4c190b5d928944b8c486afacbd4092fb63f34ce32516/incountry-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31035ee81766548fcefa3395dcc81a7b", "sha256": "f8f8f8839394125ac19da6b7bd9e9be162faf70ec627792e3276da19d8183143"}, "downloads": -1, "filename": "incountry-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "31035ee81766548fcefa3395dcc81a7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 8423, "upload_time": "2020-04-22T13:32:17", "upload_time_iso_8601": "2020-04-22T13:32:17.355020Z", "url": "https://files.pythonhosted.org/packages/d6/d7/c859c94e3be32c5465a14253924f404d25d94bab494cd42e64e9c40dd201/incountry-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0f3eab3c0fdd2fb66533d1f287541a8", "sha256": "183ec0fc37bcacaefc84fd0314485552c82ec57babff1f3821c7ea7e063c99ab"}, "downloads": -1, "filename": "incountry-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b0f3eab3c0fdd2fb66533d1f287541a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9710, "upload_time": "2020-01-27T13:31:22", "upload_time_iso_8601": "2020-01-27T13:31:22.279972Z", "url": "https://files.pythonhosted.org/packages/25/5a/ba44bb2f84fc149176a023e7398dd2d7809da7247d15d9d135bfa6d38b66/incountry-1.1.0.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "17f7bbf7df1117175003a360674e19ce", "sha256": "85016b5664ecbe2fafa70eec916bb26069c9eb46bf989e50fe93643a13ca6afc"}, "downloads": -1, "filename": "incountry-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "17f7bbf7df1117175003a360674e19ce", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 8484, "upload_time": "2020-04-22T14:34:24", "upload_time_iso_8601": "2020-04-22T14:34:24.537011Z", "url": "https://files.pythonhosted.org/packages/57/f3/e726f35381633d0b1e4c86d9fbfa10a7b90a2cf8d83da0f5d90e049dc8c3/incountry-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9aa86e16b9beb5e776b59995f6465f24", "sha256": "48fa449b995b6e68d4148bc78d754e4a0c8cc5defa821c177a4d57bb235a8edb"}, "downloads": -1, "filename": "incountry-1.1.2.tar.gz", "has_sig": false, "md5_digest": "9aa86e16b9beb5e776b59995f6465f24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9838, "upload_time": "2020-04-22T14:34:25", "upload_time_iso_8601": "2020-04-22T14:34:25.917930Z", "url": "https://files.pythonhosted.org/packages/c1/51/423ed610d0ae4a337748c653c4e7a5104aa6ce50bfbe3aa120a79de04711/incountry-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17f7bbf7df1117175003a360674e19ce", "sha256": "85016b5664ecbe2fafa70eec916bb26069c9eb46bf989e50fe93643a13ca6afc"}, "downloads": -1, "filename": "incountry-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "17f7bbf7df1117175003a360674e19ce", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 8484, "upload_time": "2020-04-22T14:34:24", "upload_time_iso_8601": "2020-04-22T14:34:24.537011Z", "url": "https://files.pythonhosted.org/packages/57/f3/e726f35381633d0b1e4c86d9fbfa10a7b90a2cf8d83da0f5d90e049dc8c3/incountry-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9aa86e16b9beb5e776b59995f6465f24", "sha256": "48fa449b995b6e68d4148bc78d754e4a0c8cc5defa821c177a4d57bb235a8edb"}, "downloads": -1, "filename": "incountry-1.1.2.tar.gz", "has_sig": false, "md5_digest": "9aa86e16b9beb5e776b59995f6465f24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9838, "upload_time": "2020-04-22T14:34:25", "upload_time_iso_8601": "2020-04-22T14:34:25.917930Z", "url": "https://files.pythonhosted.org/packages/c1/51/423ed610d0ae4a337748c653c4e7a5104aa6ce50bfbe3aa120a79de04711/incountry-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:24 2020"}