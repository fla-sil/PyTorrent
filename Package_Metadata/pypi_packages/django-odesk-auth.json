{"info": {"author": "Anton Strogonoff", "author_email": "anton@strogonoff.name", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "django-odesk-auth\n=================\n\nSimple oDesk (now Upwork) login for your Django-based project.\n\nAt current version it has inflexible and impossible to disable access control.\nIt suits my own needs so far but I plan to improve on this, given demand.\n\nTested with Django 1.6.\n\n**Note: oDesk rebranded as Upwork.**\nVersion 0.2.0 of this library depends on ``python-upwork`` instead of ``python-odesk``,\nand therefore works with new API endpoints.\nFurther support and development, if any, will only be continued for new\n``django-upwork-auth``, which is in the works. (See issue #4.)\n\n\nCreating oDesk OAuth API key\n----------------------------\n\nGo to https://www.odesk.com/services/api/apply.\n\n* Authentication type should be set to \"OAuth 1.0\".\n* Callback URL should be left blank.\n* Permission \"View the structure of your companies/teams\" is currently\n  required to be checked.\n\n\nQuick start\n-----------\n\nProvided you have installed ``django-odesk-auth`` and ``python-upwork==1.0``.\n\n1. Add ``django_odesk_auth`` to INSTALLED_APPS.\n   Make sure you have ``django.contrib.sites`` app in INSTALLED_APPS as well.\n\n2. Add ``django_odesk_auth.backends.ODeskOAuthBackend``\n   to AUTHENTICATION_BACKENDS.\n\n3. Specify ``ODESK_OAUTH_KEY`` and ``ODESK_OAUTH_SECRET`` settings\n   with your key information.\n\n4. Add your_username@odesk.com to ``ODESK_AUTH_ALLOWED_USERS``,\n   and set ``ODESK_AUTH_CREATE_UNKNOWN_USER`` to True.\n\n5. Include ``django_odesk_auth.urls`` in your URL patterns.\n\n6. In your login page template, put a link \"Log in via oDesk\" and point it\n   to ``{% url \"odesk_oauth_login\" %}``.\n\n7. Open login page and click \"Log in via oDesk\" to verify everything works.\n\nImportant: keep ``ODESK_OAUTH_KEY`` and ``ODESK_OAUTH_SECRET`` settings in a file\nthat is not under version control.\n\n\nExample project\n---------------\n\nRequirements: Vagrant, Ansible, and free 8000 port.\n\nFirst, fill in some critical settings in ``example_project/settings.py``\n(see comments in the file).\n\nFrom example_project directory, bring up a VM using provided Vagrantfile\nand run Django development server on it::\n\n    $ vagrant up\n    $ vagrant ssh\n    vm$ cd /vagrant/example_project/\n    vm$ ./manage.py runserver 0.0.0.0:8000\n\nOn your host machine, navigate to 127.0.0.1:8000 and you should be able\nto test Upwork login functionality.\n\n\nAccess control\n--------------\n\nApp has basic access control facilities.\n\nYou can specify who is allowed to log in to your site and who upon login gets\nstaff and/or superuser statuses. This is configured through Django settings.\n\nCurrently access control cannot be turned off.\nYou **have** to explicitly specify at least who is allowed to log in to your site.\n(Yes, this means you can't grant access to everyone yet, unless you hack the app.)\n\nUsers that aren't allowed to log in get ``User.is_active`` flag set to False.\nSee ``utils.update_user_permissions()`` definition if you're interested in other specifics,\nand see available settings below.\n\n\nMaking authenticated oDesk API calls\n------------------------------------\n\nAfter user is successfully authenticated, you can call oDesk API on their behalf.\n\nHere's a quick example::\n\n    from django_odesk_auth import utils, O_ACCESS_TOKEN\n    \n    odesk_client = utils.get_client(request.session[O_ACCESS_TOKEN])\n    print odesk_client.hr.get_teams()\n    # Should output list of teams user has access to\n\nSome notes:\n\n* How you make API calls is up to you. Internally django-odesk-auth\n  uses python-upwork library, and so does this example.\n\n* ``utils.get_client()`` function returns an instance of ``upwork.Client``.\n  Handy if you're using python-upwork library to make API calls.\n\n* OAuth access token, obtained during authentication, is stored\n  under ``request.session[O_ACCESS_TOKEN]``.\n\n\nChecking OAuth access token\n---------------------------\n\nSometimes there's a need to make sure that current user's authentication\nis still valid\u2014that they, for example, didn't revoke access to their account.\n\nFor that you can use ``utils.check_login()`` in Python, or make an AJAX request\nto named URL ``'odesk_oauth_check_login'`` from client side\n(see ``views.oauth_check_login``).\n\n\nAvailable Django settings\n-------------------------\n\nODESK_OAUTH_KEY, ODESK_OAUTH_SECRET  \n  API key information.\n\nODESK_AUTH_CREATE_UNKNOWN_USER = False  \n  Whether to create a new account in Django if given user logs in via oDesk\n  for the first time.\n\nODESK_AUTH_ALLOWED_USERS = ()  \n  oDesk emails of users who are allowed to log in via oDesk.\n\nODESK_AUTH_ADMINS = ()  \n  oDesk emails of users who are marked as ``is_staff`` upon login.\n\nODESK_AUTH_SUPERUSERS = ()  \n  oDesk emails of users who are marked as ``is_superuser`` upon login.\n\nODESK_AUTH_ALLOWED_TEAMS = ()  \n  IDs of oDesk teams, members of which are allowed to log in via oDesk.\n\nODESK_AUTH_ADMIN_TEAMS = ()  \n  IDs of oDesk teams, members of which are marked as ``is_staff`` upon login.\n\nODESK_AUTH_SUPERUSER_TEAMS = ()  \n  IDs of oDesk teams, members of which are marked as ``is_superuser`` upon login.", "description_content_type": null, "docs_url": null, "download_url": "http://github.com/strogonoff/django-odesk-auth", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": null, "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "django-odesk-auth", "package_url": "https://pypi.org/project/django-odesk-auth/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-odesk-auth/", "project_urls": {"Download": "http://github.com/strogonoff/django-odesk-auth"}, "release_url": "https://pypi.org/project/django-odesk-auth/0.2/", "requires_dist": null, "requires_python": null, "summary": "A simple Django app for basic \u201cLog in via Upwork\u201d functionality.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple oDesk (now Upwork) login for your Django-based project.</p>\n<p>At current version it has inflexible and impossible to disable access control.\nIt suits my own needs so far but I plan to improve on this, given demand.</p>\n<p>Tested with Django 1.6.</p>\n<p><strong>Note: oDesk rebranded as Upwork.</strong>\nVersion 0.2.0 of this library depends on <tt><span class=\"pre\">python-upwork</span></tt> instead of <tt><span class=\"pre\">python-odesk</span></tt>,\nand therefore works with new API endpoints.\nFurther support and development, if any, will only be continued for new\n<tt><span class=\"pre\">django-upwork-auth</span></tt>, which is in the works. (See issue #4.)</p>\n<div id=\"creating-odesk-oauth-api-key\">\n<h2>Creating oDesk OAuth API key</h2>\n<p>Go to <a href=\"https://www.odesk.com/services/api/apply\" rel=\"nofollow\">https://www.odesk.com/services/api/apply</a>.</p>\n<ul>\n<li>Authentication type should be set to \u201cOAuth 1.0\u201d.</li>\n<li>Callback URL should be left blank.</li>\n<li>Permission \u201cView the structure of your companies/teams\u201d is currently\nrequired to be checked.</li>\n</ul>\n</div>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<p>Provided you have installed <tt><span class=\"pre\">django-odesk-auth</span></tt> and <tt><span class=\"pre\">python-upwork==1.0</span></tt>.</p>\n<ol>\n<li>Add <tt>django_odesk_auth</tt> to INSTALLED_APPS.\nMake sure you have <tt>django.contrib.sites</tt> app in INSTALLED_APPS as well.</li>\n<li>Add <tt>django_odesk_auth.backends.ODeskOAuthBackend</tt>\nto AUTHENTICATION_BACKENDS.</li>\n<li>Specify <tt>ODESK_OAUTH_KEY</tt> and <tt>ODESK_OAUTH_SECRET</tt> settings\nwith your key information.</li>\n<li>Add <a href=\"mailto:your_username%40odesk.com\">your_username<span>@</span>odesk<span>.</span>com</a> to <tt>ODESK_AUTH_ALLOWED_USERS</tt>,\nand set <tt>ODESK_AUTH_CREATE_UNKNOWN_USER</tt> to True.</li>\n<li>Include <tt>django_odesk_auth.urls</tt> in your URL patterns.</li>\n<li>In your login page template, put a link \u201cLog in via oDesk\u201d and point it\nto <tt>{% url \"odesk_oauth_login\" %}</tt>.</li>\n<li>Open login page and click \u201cLog in via oDesk\u201d to verify everything works.</li>\n</ol>\n<p>Important: keep <tt>ODESK_OAUTH_KEY</tt> and <tt>ODESK_OAUTH_SECRET</tt> settings in a file\nthat is not under version control.</p>\n</div>\n<div id=\"example-project\">\n<h2>Example project</h2>\n<p>Requirements: Vagrant, Ansible, and free 8000 port.</p>\n<p>First, fill in some critical settings in <tt>example_project/settings.py</tt>\n(see comments in the file).</p>\n<p>From example_project directory, bring up a VM using provided Vagrantfile\nand run Django development server on it:</p>\n<pre>$ vagrant up\n$ vagrant ssh\nvm$ cd /vagrant/example_project/\nvm$ ./manage.py runserver 0.0.0.0:8000\n</pre>\n<p>On your host machine, navigate to 127.0.0.1:8000 and you should be able\nto test Upwork login functionality.</p>\n</div>\n<div id=\"access-control\">\n<h2>Access control</h2>\n<p>App has basic access control facilities.</p>\n<p>You can specify who is allowed to log in to your site and who upon login gets\nstaff and/or superuser statuses. This is configured through Django settings.</p>\n<p>Currently access control cannot be turned off.\nYou <strong>have</strong> to explicitly specify at least who is allowed to log in to your site.\n(Yes, this means you can\u2019t grant access to everyone yet, unless you hack the app.)</p>\n<p>Users that aren\u2019t allowed to log in get <tt>User.is_active</tt> flag set to False.\nSee <tt>utils.update_user_permissions()</tt> definition if you\u2019re interested in other specifics,\nand see available settings below.</p>\n</div>\n<div id=\"making-authenticated-odesk-api-calls\">\n<h2>Making authenticated oDesk API calls</h2>\n<p>After user is successfully authenticated, you can call oDesk API on their behalf.</p>\n<p>Here\u2019s a quick example:</p>\n<pre>from django_odesk_auth import utils, O_ACCESS_TOKEN\n\nodesk_client = utils.get_client(request.session[O_ACCESS_TOKEN])\nprint odesk_client.hr.get_teams()\n# Should output list of teams user has access to\n</pre>\n<p>Some notes:</p>\n<ul>\n<li>How you make API calls is up to you. Internally django-odesk-auth\nuses python-upwork library, and so does this example.</li>\n<li><tt>utils.get_client()</tt> function returns an instance of <tt>upwork.Client</tt>.\nHandy if you\u2019re using python-upwork library to make API calls.</li>\n<li>OAuth access token, obtained during authentication, is stored\nunder <tt>request.session[O_ACCESS_TOKEN]</tt>.</li>\n</ul>\n</div>\n<div id=\"checking-oauth-access-token\">\n<h2>Checking OAuth access token</h2>\n<p>Sometimes there\u2019s a need to make sure that current user\u2019s authentication\nis still valid\u2014that they, for example, didn\u2019t revoke access to their account.</p>\n<p>For that you can use <tt>utils.check_login()</tt> in Python, or make an AJAX request\nto named URL <tt>'odesk_oauth_check_login'</tt> from client side\n(see <tt>views.oauth_check_login</tt>).</p>\n</div>\n<div id=\"available-django-settings\">\n<h2>Available Django settings</h2>\n<dl>\n<dt>ODESK_OAUTH_KEY, ODESK_OAUTH_SECRET</dt>\n<dd>API key information.</dd>\n<dt>ODESK_AUTH_CREATE_UNKNOWN_USER = False</dt>\n<dd>Whether to create a new account in Django if given user logs in via oDesk\nfor the first time.</dd>\n<dt>ODESK_AUTH_ALLOWED_USERS = ()</dt>\n<dd>oDesk emails of users who are allowed to log in via oDesk.</dd>\n<dt>ODESK_AUTH_ADMINS = ()</dt>\n<dd>oDesk emails of users who are marked as <tt>is_staff</tt> upon login.</dd>\n<dt>ODESK_AUTH_SUPERUSERS = ()</dt>\n<dd>oDesk emails of users who are marked as <tt>is_superuser</tt> upon login.</dd>\n<dt>ODESK_AUTH_ALLOWED_TEAMS = ()</dt>\n<dd>IDs of oDesk teams, members of which are allowed to log in via oDesk.</dd>\n<dt>ODESK_AUTH_ADMIN_TEAMS = ()</dt>\n<dd>IDs of oDesk teams, members of which are marked as <tt>is_staff</tt> upon login.</dd>\n<dt>ODESK_AUTH_SUPERUSER_TEAMS = ()</dt>\n<dd>IDs of oDesk teams, members of which are marked as <tt>is_superuser</tt> upon login.</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 1605088, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a29b1c93d71701ca217c5c57b955d66c", "sha256": "e9186d9ac201c4fc6eaf2a811d1094bd639b0ac79c81b55913fce0b40deaa43c"}, "downloads": -1, "filename": "django-odesk-auth-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a29b1c93d71701ca217c5c57b955d66c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7656, "upload_time": "2014-03-07T03:00:31", "upload_time_iso_8601": "2014-03-07T03:00:31.257547Z", "url": "https://files.pythonhosted.org/packages/83/8e/dbb5be9d75ab416f6daaf8b70b967d4c97fa80a8d3fbcfe8b1bc4b5c8ca1/django-odesk-auth-0.1.0.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "fcca79865b39c7121ea9a50e1e079eb5", "sha256": "3255dfc2b76a3170eb5289a8cb2b4294d789ee67a05e1c4aade68035dded62c4"}, "downloads": -1, "filename": "django-odesk-auth-0.2.tar.gz", "has_sig": false, "md5_digest": "fcca79865b39c7121ea9a50e1e079eb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8256, "upload_time": "2015-06-24T17:42:22", "upload_time_iso_8601": "2015-06-24T17:42:22.599381Z", "url": "https://files.pythonhosted.org/packages/8f/2d/561e6ce8129cee23dbb3b9a059f30d98a94cb12b82883cb099a452069aec/django-odesk-auth-0.2.tar.gz", "yanked": false}], "0.2-pre2": [{"comment_text": "", "digests": {"md5": "4a6a5bee84c1a749f0959de3b7763e04", "sha256": "26adeea03443b6833512eafc99a5be0939909e5c3b284418f4a2aa665297ec1f"}, "downloads": -1, "filename": "django-odesk-auth-0.2-pre2.tar.gz", "has_sig": false, "md5_digest": "4a6a5bee84c1a749f0959de3b7763e04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8268, "upload_time": "2015-06-15T22:48:14", "upload_time_iso_8601": "2015-06-15T22:48:14.424934Z", "url": "https://files.pythonhosted.org/packages/29/44/b5e44ed62c36ee99c64119c4c25e6904e50b1f34e232294608cddb8554cd/django-odesk-auth-0.2-pre2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fcca79865b39c7121ea9a50e1e079eb5", "sha256": "3255dfc2b76a3170eb5289a8cb2b4294d789ee67a05e1c4aade68035dded62c4"}, "downloads": -1, "filename": "django-odesk-auth-0.2.tar.gz", "has_sig": false, "md5_digest": "fcca79865b39c7121ea9a50e1e079eb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8256, "upload_time": "2015-06-24T17:42:22", "upload_time_iso_8601": "2015-06-24T17:42:22.599381Z", "url": "https://files.pythonhosted.org/packages/8f/2d/561e6ce8129cee23dbb3b9a059f30d98a94cb12b82883cb099a452069aec/django-odesk-auth-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:34 2020"}