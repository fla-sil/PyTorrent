{"info": {"author": "Ross Jacobs", "author_email": "rj@swit.sh", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "# pre-commit hooks\n\n[![Build Status](https://travis-ci.com/pocc/pre-commit-hooks.svg?branch=master)](https://travis-ci.com/pocc/pre-commit-hooks)\n\nThis is a [pre-commit](https://pre-commit.com) hooks repo that\nintegrates five C/C++ linters:\n> [clang-format](https://clang.llvm.org/docs/ClangFormatStyleOptions.html),\n[clang-tidy](https://clang.llvm.org/extra/clang-tidy/),\n[oclint](http://oclint.org/),\n[uncrustify](http://uncrustify.sourceforge.net/),\n[cppcheck](http://cppcheck.sourceforge.net/)\n\nMany of these linters will return 0 on error, which pre-commit will then\nmark as passing. Additionally, pre-commit has\n[a bug](https://github.com/pre-commit/pre-commit/issues/1000)\nwhere arguments after `--` are dropped. This repo's hooks for each command\nwill fail correctly and honor all `--` arguments.\n\nThis repo is available in both python and bash. To use a language, use `rev: $lang`\nin your `.pre-commit-config.yaml`. Master is set to python as the default as it is\neasier to maintain and troubleshoot.\n\n## Example Usage\n\nWith `int main() { int i; return 10; }` in a file `err.cpp`, all five linters should fail on commit:\n\n<p align=\"center\">\n  <img src=\"media/clinters_err.png\" width=\"80%\">\n</p>\n\nUsing clang-format `8.0.0`; clang-tidy `8.0.0`; oclint `0.13`\n\nThe above uses this `.pre-commit-config.yaml`:\n\n```yaml\nfail_fast: false\nrepos:\n  - repo: https://github.com/pocc/pre-commit-hooks\n    rev: python\n    hooks:\n      - id: clang-format\n        args: [--style=Google]\n      - id: clang-tidy\n        args: [-checks=clang-diagnostic-return-type]\n      - id: oclint\n        args: [-enable-clang-static-analyzer, -enable-global-analysis]\n      - id: uncrustify\n      - id: cppcheck\n        args: [--enable=all]\n```\n\n_Note that for your config yaml, you can supply your own args or remove the args line entirely,\ndepending on your use case._\n\n## Using the Hooks\n\nPython3.6+ is required to use these hooks as all 5 invoking scripts are written in it.\nAs this is also the minimum version of pre-commit, this should not be an issue.\n\n\n\n### Installation\n\n_You will need to install these utilities in order to use them. Your package\nmanager may already have them. Below are the package names for each package manager, if available:_\n\n- `apt install clang clang-format clang-tidy uncrustify cppcheck` [1] [2]\n- `yum install llvm uncrustify cppcheck` [2]\n- `brew install llvm oclint uncrustify cppcheck` [3]\n- `choco install llvm uncrustify cppcheck` [4]\n\n[1]: `clang` is a required install for `clang-format` or `clang-tidy` to work.\n\n[2]: oclint takes a couple hours to compile. I've compiled and tarred\n[oclint-v0.15](https://dl.dropboxusercontent.com/s/nu474emafxj2nn5/oclint.tar.gz)\nfor those using linux who want to skip the wait (built on Ubuntu-18.04).\nYou can also download the older [oclint-v0.13.1](https://github.com/oclint/oclint/releases/download/v0.13.1/oclint-0.13.1-x86_64-linux-4.4.0-112-generic.tar.gz)\nfor linux from oclint's github page (see [releases](https://github.com/oclint/oclint/releases)).\n\n[3]: Depending on your brew installation, you may need to install\noclint with `brew cask install oclint`.\n\n[4]: oclint is not available on windows.\n\nIf your package manager is not listed here, it will have similar names for these tools.\nYou can build all of these from source.\n\n### Hook Info\n\n| Hook Info                                                                | Type                 | Languages                             |\n| ------------------------------------------------------------------------ | -------------------- | ------------------------------------- |\n| [clang-format](https://clang.llvm.org/docs/ClangFormatStyleOptions.html) | Formatter            | C, C++, ObjC                          |\n| [clang-tidy](https://clang.llvm.org/extra/clang-tidy/)                   | Static code analyzer | C, C++, ObjC                          |\n| [oclint](http://oclint.org/)                                             | Static code analyzer | C, C++, ObjC                          |\n| [uncrustify](http://uncrustify.sourceforge.net/)                         | Formatter            | C, C++, C#, ObjC, D, Java, Pawn, VALA |\n| [cppcheck](http://cppcheck.sourceforge.net/)                             | Static code analyzer | C, C++                                |\n\n### Hook Option Comparison\n\n| Hook Options                                                             | Fix In Place | Enable all Checks                             | Set key/value |\n| ------------------------------------------------------------------------ | ------------ | --------------------------------------------- | --------------- |\n| [clang-format](https://clang.llvm.org/docs/ClangFormatStyleOptions.html) | `-i`         |                   | |\n| [clang-tidy](https://clang.llvm.org/extra/clang-tidy/)                   | `--fix-errors` [1] | `-checks=*` `-warnings-as-errors=*` [2] | |\n| [oclint](http://oclint.org/)                                             |  | `-enable-global-analysis` `-enable-clang-static-analyzer` | `-rc=<key>=<value>` |\n| [uncrustify](http://uncrustify.sourceforge.net/)                         | `--replace` `--no-backup` [3] |  | `--set key=value` |\n| [cppcheck](http://cppcheck.sourceforge.net/)                             |  | `-enable=all` | |\n\n[1]: `-fix` will fail if there are compiler errors. `-fix-errors` will `-fix`\nand fix compiler errors if it can, like missing semicolons.\n\n[2]: Be careful with `-checks=*`.  can have self-contradictory rules in newer versions of llvm (9+):\nmodernize wants to use [trailing return type](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-trailing-return-type.html)\nbut Fuchsia [disallows it](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-trailing-return.html).\n*Thanks to @rambo.*\n\n[3]: By definition, if you are using `pre-commit`, you are using version control.\nTherefore, it is recommended to avoid needless backup creation by using `--no-backup`.\n\n### Enforcing linter version with --version\n\nSome linters change behavior between versions. To enforce a linter version\n8.0.0, for example, add `--version=8.0.0` to `args:` for that linter. Note that\nthis is a pre-commit hook arg and will be filtered before args are passed to the linter.\n\n### Compilation Database\n\n`clang-tidy` and `oclint` both expect a\n[compilation database](https://clang.llvm.org/docs/JSONCompilationDatabase.html).\nBoth of the hooks for them will ignore the error for not having one.\n\nYou can generate with one `cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ...` if you\nhave a cmake-based project.\n\n### The '--' doubledash option\n\nOptions after `--` like `-std=c++11` will be interpreted correctly for\n`clang-tidy` and `oclint`. Make sure they sequentially follow the `--` argument\nin the hook's args list.\n\n### Standalone Hooks\n\nIf you want to have predictable return codes for your C linters outside of pre-commit,\nthese hooks are available via [PyPI](https://pypi.org/project/CLinters/).\nInstall it with `pip install CLinters`.\nThey are named as `$cmd-hook`, so `clang-format` becomes `clang-format-hook`.\n\nIf you want to run the tests below, you will need to install them from PyPI\nor locally with `pip install .`.\n\n## Development\n\n### Testing\n\nTo run the tests and verify `clang-format`, `clang-tidy`, and `oclint` are\nworking as expected on your system, use `pytest --runslow --internal -vvv`.\nThis will work on both bash and python branches.\n\nTesting is done by using pytest to generate 76 table tests (python branch)\nbased on combinations of args, files, and expected results.\n\nThe default is to skip most (41/76) tests as to run them all takes ~60s. These\npytest options are available to add test types:\n\n* `--runslow`: oclint tests, which take extra time\n* `--internal`: Internal class tests to ensure internal/shell APIs match\n\n**Note**: You can parallelize these tests with `pytest-xdist`. Adding `-n 32`\nto the command creates 32 workers and divides runtime by ~6x in my testing.\n\nTo run all tests serially, run `pytest -x -vvv --internal --runslow` like so:\n\n```bash\npre-commit-hooks$ pytest -x -vvv --internal --runslow\n============================= test session starts ==============================\nplatform darwin -- Python 3.7.6, pytest-5.4.1, py-1.7.0, pluggy-0.13.1 -- /usr/local/opt/python/bin/python3.7\ncachedir: .pytest_cache\nrootdir: /Users/pre-commit-hooks/code/pre-commit-hooks, inifile: pytest.ini\ncollected 76 items\n\ntests/test_hooks.py::TestHooks::test_run[run_cmd_class clang-format on /Users/pre-commit-hooks/code/pre-commit-hooks/tests/files/ok.c] PASSED [  3%]\ntests/test_hooks.py::TestHooks::test_run[run_cmd_class clang-tidy on /Users/pre-commit-hooks/code/pre-commit-hooks/tests/files/ok.c] PASSED [  7%]\n...\n\n============================= 89 passed in 61.86s ==============================\n```\n\n### Why have a script when your hook could be `$command \"$@\"`?\n\nshellcheck keeps things simple by relaying arguments as `shellcheck \"$@\"`.\nThis is not possible with several C/C++ linters because they exit 0 when\nthere are errors. pre-commit registers failures by non-zero exit codes,\nwhich results in false \"passes\".\n\n## Additional Resources\n\n### clang-format\n\n* [Official Docs](https://clang.llvm.org/docs/ClangFormatStyleOptions.html)\n* [clang-format\n  Guide](https://embeddedartistry.com/blog/2017/10/23/creating-and-enforcing-a-coding-standard-with-clang-format) -\n  a good overview and a great place to get started\n* [clang-format Configurator](https://zed0.co.uk/clang-format-configurator/) - Website to\n  interactively design your config while\n* [clang-format Options Explorer](https://clangformat.com/) - Website to interactively\n  understand various options\n* [Source Code](https://github.com/llvm-mirror/clang/tree/master/tools/clang-format)\n\n### clang-tidy\n\n* [Official Docs](https://clang.llvm.org/extra/clang-tidy/)\n* [clang-tidy\n  guide](https://www.kdab.com/clang-tidy-part-1-modernize-source-code-using-c11c14/) -\n  Good place to start\n* [Example\n  usage](https://github.com/KratosMultiphysics/Kratos/wiki/How-to-use-Clang-Tidy-to-automatically-correct-code) -\n  Explanation of how to use clang-tidy by the creators of Kratos\n* [Add your own\n  checks](https://devblogs.microsoft.com/cppblog/exploring-clang-tooling-part-1-extending-clang-tidy/) -\n  Function names must be _awesome_!\n* [Source Code](https://github.com/llvm-mirror/clang-tools-extra/tree/master/clang-tidy)\n\n### oclint\n\n* [Official Docs](http://oclint.org/)\n* [Fastlane Integration](https://docs.fastlane.tools/actions/oclint/)\n* [Source Code](https://github.com/oclint/oclint)\n\n### uncrustify\n\n* [Official Docs](http://uncrustify.sourceforge.net/)\n* [Getting Started with Uncrustify](https://patrickhenson.com/2018/06/07/uncrustify-configuration.html)\n* [Source Code](https://github.com/uncrustify/uncrustify)\n\n### cppcheck\n\n* [Official Docs](http://cppcheck.sourceforge.net/)\n* [Using Cppcheck](https://katecpp.wordpress.com/2015/08/04/cppcheck/)\n* [Source Code](https://github.com/danmar/cppcheck)\n\n## License\n\nApache 2.0", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pocc/pre-commit-hooks", "keywords": "", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "CLinters", "package_url": "https://pypi.org/project/CLinters/", "platform": "", "project_url": "https://pypi.org/project/CLinters/", "project_urls": {"Homepage": "https://github.com/pocc/pre-commit-hooks"}, "release_url": "https://pypi.org/project/CLinters/1.1.1/", "requires_dist": null, "requires_python": ">=3.6.1", "summary": "pre-commit hooks for C linters", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pre-commit hooks</h1>\n<p><a href=\"https://travis-ci.com/pocc/pre-commit-hooks\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cffc77adeddfe43bf3fd1e43cba5a50b348285c5/68747470733a2f2f7472617669732d63692e636f6d2f706f63632f7072652d636f6d6d69742d686f6f6b732e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>This is a <a href=\"https://pre-commit.com\" rel=\"nofollow\">pre-commit</a> hooks repo that\nintegrates five C/C++ linters:</p>\n<blockquote>\n<p><a href=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\" rel=\"nofollow\">clang-format</a>,\n<a href=\"https://clang.llvm.org/extra/clang-tidy/\" rel=\"nofollow\">clang-tidy</a>,\n<a href=\"http://oclint.org/\" rel=\"nofollow\">oclint</a>,\n<a href=\"http://uncrustify.sourceforge.net/\" rel=\"nofollow\">uncrustify</a>,\n<a href=\"http://cppcheck.sourceforge.net/\" rel=\"nofollow\">cppcheck</a></p>\n</blockquote>\n<p>Many of these linters will return 0 on error, which pre-commit will then\nmark as passing. Additionally, pre-commit has\n<a href=\"https://github.com/pre-commit/pre-commit/issues/1000\" rel=\"nofollow\">a bug</a>\nwhere arguments after <code>--</code> are dropped. This repo's hooks for each command\nwill fail correctly and honor all <code>--</code> arguments.</p>\n<p>This repo is available in both python and bash. To use a language, use <code>rev: $lang</code>\nin your <code>.pre-commit-config.yaml</code>. Master is set to python as the default as it is\neasier to maintain and troubleshoot.</p>\n<h2>Example Usage</h2>\n<p>With <code>int main() { int i; return 10; }</code> in a file <code>err.cpp</code>, all five linters should fail on commit:</p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04489529b528172d6e409a9c01cb19a7c78af045/6d656469612f636c696e746572735f6572722e706e67\" width=\"80%\">\n</p>\n<p>Using clang-format <code>8.0.0</code>; clang-tidy <code>8.0.0</code>; oclint <code>0.13</code></p>\n<p>The above uses this <code>.pre-commit-config.yaml</code>:</p>\n<pre><span class=\"nt\">fail_fast</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n<span class=\"nt\">repos</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">repo</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://github.com/pocc/pre-commit-hooks</span>\n    <span class=\"nt\">rev</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python</span>\n    <span class=\"nt\">hooks</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">clang-format</span>\n        <span class=\"nt\">args</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">--style=Google</span><span class=\"p p-Indicator\">]</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">clang-tidy</span>\n        <span class=\"nt\">args</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">-checks=clang-diagnostic-return-type</span><span class=\"p p-Indicator\">]</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">oclint</span>\n        <span class=\"nt\">args</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">-enable-clang-static-analyzer</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">-enable-global-analysis</span><span class=\"p p-Indicator\">]</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">uncrustify</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">cppcheck</span>\n        <span class=\"nt\">args</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">--enable=all</span><span class=\"p p-Indicator\">]</span>\n</pre>\n<p><em>Note that for your config yaml, you can supply your own args or remove the args line entirely,\ndepending on your use case.</em></p>\n<h2>Using the Hooks</h2>\n<p>Python3.6+ is required to use these hooks as all 5 invoking scripts are written in it.\nAs this is also the minimum version of pre-commit, this should not be an issue.</p>\n<h3>Installation</h3>\n<p><em>You will need to install these utilities in order to use them. Your package\nmanager may already have them. Below are the package names for each package manager, if available:</em></p>\n<ul>\n<li><code>apt install clang clang-format clang-tidy uncrustify cppcheck</code> [1] [2]</li>\n<li><code>yum install llvm uncrustify cppcheck</code> [2]</li>\n<li><code>brew install llvm oclint uncrustify cppcheck</code> [3]</li>\n<li><code>choco install llvm uncrustify cppcheck</code> [4]</li>\n</ul>\n<p>[1]: <code>clang</code> is a required install for <code>clang-format</code> or <code>clang-tidy</code> to work.</p>\n<p>[2]: oclint takes a couple hours to compile. I've compiled and tarred\n<a href=\"https://dl.dropboxusercontent.com/s/nu474emafxj2nn5/oclint.tar.gz\" rel=\"nofollow\">oclint-v0.15</a>\nfor those using linux who want to skip the wait (built on Ubuntu-18.04).\nYou can also download the older <a href=\"https://github.com/oclint/oclint/releases/download/v0.13.1/oclint-0.13.1-x86_64-linux-4.4.0-112-generic.tar.gz\" rel=\"nofollow\">oclint-v0.13.1</a>\nfor linux from oclint's github page (see <a href=\"https://github.com/oclint/oclint/releases\" rel=\"nofollow\">releases</a>).</p>\n<p>[3]: Depending on your brew installation, you may need to install\noclint with <code>brew cask install oclint</code>.</p>\n<p>[4]: oclint is not available on windows.</p>\n<p>If your package manager is not listed here, it will have similar names for these tools.\nYou can build all of these from source.</p>\n<h3>Hook Info</h3>\n<table>\n<thead>\n<tr>\n<th>Hook Info</th>\n<th>Type</th>\n<th>Languages</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\" rel=\"nofollow\">clang-format</a></td>\n<td>Formatter</td>\n<td>C, C++, ObjC</td>\n</tr>\n<tr>\n<td><a href=\"https://clang.llvm.org/extra/clang-tidy/\" rel=\"nofollow\">clang-tidy</a></td>\n<td>Static code analyzer</td>\n<td>C, C++, ObjC</td>\n</tr>\n<tr>\n<td><a href=\"http://oclint.org/\" rel=\"nofollow\">oclint</a></td>\n<td>Static code analyzer</td>\n<td>C, C++, ObjC</td>\n</tr>\n<tr>\n<td><a href=\"http://uncrustify.sourceforge.net/\" rel=\"nofollow\">uncrustify</a></td>\n<td>Formatter</td>\n<td>C, C++, C#, ObjC, D, Java, Pawn, VALA</td>\n</tr>\n<tr>\n<td><a href=\"http://cppcheck.sourceforge.net/\" rel=\"nofollow\">cppcheck</a></td>\n<td>Static code analyzer</td>\n<td>C, C++</td>\n</tr></tbody></table>\n<h3>Hook Option Comparison</h3>\n<table>\n<thead>\n<tr>\n<th>Hook Options</th>\n<th>Fix In Place</th>\n<th>Enable all Checks</th>\n<th>Set key/value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\" rel=\"nofollow\">clang-format</a></td>\n<td><code>-i</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://clang.llvm.org/extra/clang-tidy/\" rel=\"nofollow\">clang-tidy</a></td>\n<td><code>--fix-errors</code> [1]</td>\n<td><code>-checks=*</code> <code>-warnings-as-errors=*</code> [2]</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://oclint.org/\" rel=\"nofollow\">oclint</a></td>\n<td></td>\n<td><code>-enable-global-analysis</code> <code>-enable-clang-static-analyzer</code></td>\n<td><code>-rc=&lt;key&gt;=&lt;value&gt;</code></td>\n</tr>\n<tr>\n<td><a href=\"http://uncrustify.sourceforge.net/\" rel=\"nofollow\">uncrustify</a></td>\n<td><code>--replace</code> <code>--no-backup</code> [3]</td>\n<td></td>\n<td><code>--set key=value</code></td>\n</tr>\n<tr>\n<td><a href=\"http://cppcheck.sourceforge.net/\" rel=\"nofollow\">cppcheck</a></td>\n<td></td>\n<td><code>-enable=all</code></td>\n<td></td>\n</tr></tbody></table>\n<p>[1]: <code>-fix</code> will fail if there are compiler errors. <code>-fix-errors</code> will <code>-fix</code>\nand fix compiler errors if it can, like missing semicolons.</p>\n<p>[2]: Be careful with <code>-checks=*</code>.  can have self-contradictory rules in newer versions of llvm (9+):\nmodernize wants to use <a href=\"https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-trailing-return-type.html\" rel=\"nofollow\">trailing return type</a>\nbut Fuchsia <a href=\"https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-trailing-return.html\" rel=\"nofollow\">disallows it</a>.\n<em>Thanks to @rambo.</em></p>\n<p>[3]: By definition, if you are using <code>pre-commit</code>, you are using version control.\nTherefore, it is recommended to avoid needless backup creation by using <code>--no-backup</code>.</p>\n<h3>Enforcing linter version with --version</h3>\n<p>Some linters change behavior between versions. To enforce a linter version\n8.0.0, for example, add <code>--version=8.0.0</code> to <code>args:</code> for that linter. Note that\nthis is a pre-commit hook arg and will be filtered before args are passed to the linter.</p>\n<h3>Compilation Database</h3>\n<p><code>clang-tidy</code> and <code>oclint</code> both expect a\n<a href=\"https://clang.llvm.org/docs/JSONCompilationDatabase.html\" rel=\"nofollow\">compilation database</a>.\nBoth of the hooks for them will ignore the error for not having one.</p>\n<p>You can generate with one <code>cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ...</code> if you\nhave a cmake-based project.</p>\n<h3>The '--' doubledash option</h3>\n<p>Options after <code>--</code> like <code>-std=c++11</code> will be interpreted correctly for\n<code>clang-tidy</code> and <code>oclint</code>. Make sure they sequentially follow the <code>--</code> argument\nin the hook's args list.</p>\n<h3>Standalone Hooks</h3>\n<p>If you want to have predictable return codes for your C linters outside of pre-commit,\nthese hooks are available via <a href=\"https://pypi.org/project/CLinters/\" rel=\"nofollow\">PyPI</a>.\nInstall it with <code>pip install CLinters</code>.\nThey are named as <code>$cmd-hook</code>, so <code>clang-format</code> becomes <code>clang-format-hook</code>.</p>\n<p>If you want to run the tests below, you will need to install them from PyPI\nor locally with <code>pip install .</code>.</p>\n<h2>Development</h2>\n<h3>Testing</h3>\n<p>To run the tests and verify <code>clang-format</code>, <code>clang-tidy</code>, and <code>oclint</code> are\nworking as expected on your system, use <code>pytest --runslow --internal -vvv</code>.\nThis will work on both bash and python branches.</p>\n<p>Testing is done by using pytest to generate 76 table tests (python branch)\nbased on combinations of args, files, and expected results.</p>\n<p>The default is to skip most (41/76) tests as to run them all takes ~60s. These\npytest options are available to add test types:</p>\n<ul>\n<li><code>--runslow</code>: oclint tests, which take extra time</li>\n<li><code>--internal</code>: Internal class tests to ensure internal/shell APIs match</li>\n</ul>\n<p><strong>Note</strong>: You can parallelize these tests with <code>pytest-xdist</code>. Adding <code>-n 32</code>\nto the command creates 32 workers and divides runtime by ~6x in my testing.</p>\n<p>To run all tests serially, run <code>pytest -x -vvv --internal --runslow</code> like so:</p>\n<pre>pre-commit-hooks$ pytest -x -vvv --internal --runslow\n<span class=\"o\">=============================</span> <span class=\"nb\">test</span> session <span class=\"nv\">starts</span> <span class=\"o\">==============================</span>\nplatform darwin -- Python <span class=\"m\">3</span>.7.6, pytest-5.4.1, py-1.7.0, pluggy-0.13.1 -- /usr/local/opt/python/bin/python3.7\ncachedir: .pytest_cache\nrootdir: /Users/pre-commit-hooks/code/pre-commit-hooks, inifile: pytest.ini\ncollected <span class=\"m\">76</span> items\n\ntests/test_hooks.py::TestHooks::test_run<span class=\"o\">[</span>run_cmd_class clang-format on /Users/pre-commit-hooks/code/pre-commit-hooks/tests/files/ok.c<span class=\"o\">]</span> PASSED <span class=\"o\">[</span>  <span class=\"m\">3</span>%<span class=\"o\">]</span>\ntests/test_hooks.py::TestHooks::test_run<span class=\"o\">[</span>run_cmd_class clang-tidy on /Users/pre-commit-hooks/code/pre-commit-hooks/tests/files/ok.c<span class=\"o\">]</span> PASSED <span class=\"o\">[</span>  <span class=\"m\">7</span>%<span class=\"o\">]</span>\n...\n\n<span class=\"o\">=============================</span> <span class=\"m\">89</span> passed in <span class=\"m\">61</span>.86s <span class=\"o\">==============================</span>\n</pre>\n<h3>Why have a script when your hook could be <code>$command \"$@\"</code>?</h3>\n<p>shellcheck keeps things simple by relaying arguments as <code>shellcheck \"$@\"</code>.\nThis is not possible with several C/C++ linters because they exit 0 when\nthere are errors. pre-commit registers failures by non-zero exit codes,\nwhich results in false \"passes\".</p>\n<h2>Additional Resources</h2>\n<h3>clang-format</h3>\n<ul>\n<li><a href=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\" rel=\"nofollow\">Official Docs</a></li>\n<li><a href=\"https://embeddedartistry.com/blog/2017/10/23/creating-and-enforcing-a-coding-standard-with-clang-format\" rel=\"nofollow\">clang-format\nGuide</a> -\na good overview and a great place to get started</li>\n<li><a href=\"https://zed0.co.uk/clang-format-configurator/\" rel=\"nofollow\">clang-format Configurator</a> - Website to\ninteractively design your config while</li>\n<li><a href=\"https://clangformat.com/\" rel=\"nofollow\">clang-format Options Explorer</a> - Website to interactively\nunderstand various options</li>\n<li><a href=\"https://github.com/llvm-mirror/clang/tree/master/tools/clang-format\" rel=\"nofollow\">Source Code</a></li>\n</ul>\n<h3>clang-tidy</h3>\n<ul>\n<li><a href=\"https://clang.llvm.org/extra/clang-tidy/\" rel=\"nofollow\">Official Docs</a></li>\n<li><a href=\"https://www.kdab.com/clang-tidy-part-1-modernize-source-code-using-c11c14/\" rel=\"nofollow\">clang-tidy\nguide</a> -\nGood place to start</li>\n<li><a href=\"https://github.com/KratosMultiphysics/Kratos/wiki/How-to-use-Clang-Tidy-to-automatically-correct-code\" rel=\"nofollow\">Example\nusage</a> -\nExplanation of how to use clang-tidy by the creators of Kratos</li>\n<li><a href=\"https://devblogs.microsoft.com/cppblog/exploring-clang-tooling-part-1-extending-clang-tidy/\" rel=\"nofollow\">Add your own\nchecks</a> -\nFunction names must be <em>awesome</em>!</li>\n<li><a href=\"https://github.com/llvm-mirror/clang-tools-extra/tree/master/clang-tidy\" rel=\"nofollow\">Source Code</a></li>\n</ul>\n<h3>oclint</h3>\n<ul>\n<li><a href=\"http://oclint.org/\" rel=\"nofollow\">Official Docs</a></li>\n<li><a href=\"https://docs.fastlane.tools/actions/oclint/\" rel=\"nofollow\">Fastlane Integration</a></li>\n<li><a href=\"https://github.com/oclint/oclint\" rel=\"nofollow\">Source Code</a></li>\n</ul>\n<h3>uncrustify</h3>\n<ul>\n<li><a href=\"http://uncrustify.sourceforge.net/\" rel=\"nofollow\">Official Docs</a></li>\n<li><a href=\"https://patrickhenson.com/2018/06/07/uncrustify-configuration.html\" rel=\"nofollow\">Getting Started with Uncrustify</a></li>\n<li><a href=\"https://github.com/uncrustify/uncrustify\" rel=\"nofollow\">Source Code</a></li>\n</ul>\n<h3>cppcheck</h3>\n<ul>\n<li><a href=\"http://cppcheck.sourceforge.net/\" rel=\"nofollow\">Official Docs</a></li>\n<li><a href=\"https://katecpp.wordpress.com/2015/08/04/cppcheck/\" rel=\"nofollow\">Using Cppcheck</a></li>\n<li><a href=\"https://github.com/danmar/cppcheck\" rel=\"nofollow\">Source Code</a></li>\n</ul>\n<h2>License</h2>\n<p>Apache 2.0</p>\n\n          </div>"}, "last_serial": 7065295, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8c6ae26bcebdf9811d0ff6f2089d8aa8", "sha256": "42a5419c8927ac4ae6654273ad3ad790f20e8d8256fbea6dfc4e7b12d9e873e1"}, "downloads": -1, "filename": "CLinters-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8c6ae26bcebdf9811d0ff6f2089d8aa8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 7074, "upload_time": "2020-03-22T19:08:21", "upload_time_iso_8601": "2020-03-22T19:08:21.450656Z", "url": "https://files.pythonhosted.org/packages/ce/21/797f27c28783db44d6c4c5b706ebde58d408cef5b2248bde4a594596362b/CLinters-1.0.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "0e480d3053ae6009bb6e9deffdeac857", "sha256": "423e5accfae47b9c29b78414f75d5d1e33314311dea9ccb6419388d0ee904a88"}, "downloads": -1, "filename": "CLinters-1.1.1.tar.gz", "has_sig": false, "md5_digest": "0e480d3053ae6009bb6e9deffdeac857", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 14430, "upload_time": "2020-04-21T04:43:17", "upload_time_iso_8601": "2020-04-21T04:43:17.436461Z", "url": "https://files.pythonhosted.org/packages/b4/b3/302275cde1d086f7b007091e4bbbba68f6ac1d54368cb32dca47f4a4cfed/CLinters-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e480d3053ae6009bb6e9deffdeac857", "sha256": "423e5accfae47b9c29b78414f75d5d1e33314311dea9ccb6419388d0ee904a88"}, "downloads": -1, "filename": "CLinters-1.1.1.tar.gz", "has_sig": false, "md5_digest": "0e480d3053ae6009bb6e9deffdeac857", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 14430, "upload_time": "2020-04-21T04:43:17", "upload_time_iso_8601": "2020-04-21T04:43:17.436461Z", "url": "https://files.pythonhosted.org/packages/b4/b3/302275cde1d086f7b007091e4bbbba68f6ac1d54368cb32dca47f4a4cfed/CLinters-1.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:57 2020"}