{"info": {"author": "Jani Mikkonen", "author_email": "jani.mikkonen@siili.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Operating System :: POSIX :: Other", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "pylint_junit\n============\n\nPylint plugin that generates JUnit based report that can be consumed\nby CI environments like Jenkins, Azure Devops and such.\n\nWhy ?\n=====\n\nAt the time of writing, few tools existed that where able to generate\nJUnit format from pylint output. Both of these projects where not\nhandling \"empty\" results scenario well, eg both cases generated an empty\nfile and that caused issues in ci as the resulting document was not\nproper xml file. Another issue was that issues found by pylint where\nmarked under single testcase failure and this caused atleast Azure to\nreport a single item per file even thought there could have been multiple.\n\nThus, pylint_junit was written.\n\nInstallation\n============\n\nInstall the package with\n\n.. code-block::\n\n   pip install pylint_junit\n\nor add it to your requirements.\n\nUsage\n=====\n\nAfter the plugin has been installed there are few options to take it into use.\n\nAdd following lines into your .pylintrc:\n\n.. code-block::\n\n   [MASTER]\n   load-plugins=pylint_junit\n   [REPORTS]\n   output-format=junit\n\nThis does set the default output to junit, so if still want to run pylint and get\nnormal output, you might want to consider omitting the \"output-format=junit\"\nportion and only when junit format is needed, provide it via command line like this:\n\n.. code-block::\n\n   pylint --output-format=junit src/\n\n\n\nOr, without making any changes to your pylint configuration, you can just pass the class\nas report formatter like this:\n\n.. code-block::\n\n   pylint --output-format=pylint_junit.JUnitReporter src/\n\nDependencies\n============\n\n\n* junit_xml__\n\n__ https://github.com/kyrus/python-junit-xml\n\nBugs / Feedback\n===============\n\nUse Github Issues Tracker @ https://github.com/salabs/pylint_junit/issues", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/omenia/pylint_junit", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pylint-junit", "package_url": "https://pypi.org/project/pylint-junit/", "platform": "any", "project_url": "https://pypi.org/project/pylint-junit/", "project_urls": {"Homepage": "https://github.com/omenia/pylint_junit"}, "release_url": "https://pypi.org/project/pylint-junit/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "pylint reporter for junit format.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pylint-junit\">\n<h2>pylint_junit</h2>\n<p>Pylint plugin that generates JUnit based report that can be consumed\nby CI environments like Jenkins, Azure Devops and such.</p>\n</div>\n<div id=\"why\">\n<h2>Why ?</h2>\n<p>At the time of writing, few tools existed that where able to generate\nJUnit format from pylint output. Both of these projects where not\nhandling \u201cempty\u201d results scenario well, eg both cases generated an empty\nfile and that caused issues in ci as the resulting document was not\nproper xml file. Another issue was that issues found by pylint where\nmarked under single testcase failure and this caused atleast Azure to\nreport a single item per file even thought there could have been multiple.</p>\n<p>Thus, pylint_junit was written.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the package with</p>\n<pre>pip install pylint_junit\n</pre>\n<p>or add it to your requirements.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>After the plugin has been installed there are few options to take it into use.</p>\n<p>Add following lines into your .pylintrc:</p>\n<pre>[MASTER]\nload-plugins=pylint_junit\n[REPORTS]\noutput-format=junit\n</pre>\n<p>This does set the default output to junit, so if still want to run pylint and get\nnormal output, you might want to consider omitting the \u201coutput-format=junit\u201d\nportion and only when junit format is needed, provide it via command line like this:</p>\n<pre>pylint --output-format=junit src/\n</pre>\n<p>Or, without making any changes to your pylint configuration, you can just pass the class\nas report formatter like this:</p>\n<pre>pylint --output-format=pylint_junit.JUnitReporter src/\n</pre>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://github.com/kyrus/python-junit-xml\" rel=\"nofollow\">junit_xml</a></li>\n</ul>\n</div>\n<div id=\"bugs-feedback\">\n<h2>Bugs / Feedback</h2>\n<p>Use Github Issues Tracker @ <a href=\"https://github.com/salabs/pylint_junit/issues\" rel=\"nofollow\">https://github.com/salabs/pylint_junit/issues</a></p>\n</div>\n\n          </div>"}, "last_serial": 5291454, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9f8791c5064b733a1f28409ec4eb15a3", "sha256": "95249b56d2eab2458e4c5c6765eb0b7a0d22bda58a4058de9053741f1d9b28f6"}, "downloads": -1, "filename": "pylint_junit-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9f8791c5064b733a1f28409ec4eb15a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3429, "upload_time": "2019-03-05T14:05:45", "upload_time_iso_8601": "2019-03-05T14:05:45.768449Z", "url": "https://files.pythonhosted.org/packages/93/4f/2c077e0e9658e836cb9b3241e09f1b734966f07a8a333012ce83b48fc551/pylint_junit-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ca06fa78f9262539da8210d0a73c0017", "sha256": "1189343c93e40b5728d0d4294fa609b446ed09f72d2e7de861ef63c38f828714"}, "downloads": -1, "filename": "pylint_junit-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ca06fa78f9262539da8210d0a73c0017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3936, "upload_time": "2019-05-20T10:13:30", "upload_time_iso_8601": "2019-05-20T10:13:30.217199Z", "url": "https://files.pythonhosted.org/packages/02/d6/de718f7193ede25346eacc0058772e5965852e9fb5b5975ca71bba8664e0/pylint_junit-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ca06fa78f9262539da8210d0a73c0017", "sha256": "1189343c93e40b5728d0d4294fa609b446ed09f72d2e7de861ef63c38f828714"}, "downloads": -1, "filename": "pylint_junit-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ca06fa78f9262539da8210d0a73c0017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3936, "upload_time": "2019-05-20T10:13:30", "upload_time_iso_8601": "2019-05-20T10:13:30.217199Z", "url": "https://files.pythonhosted.org/packages/02/d6/de718f7193ede25346eacc0058772e5965852e9fb5b5975ca71bba8664e0/pylint_junit-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:00 2020"}