{"info": {"author": "4teamwork AG", "author_email": "mailto:info@4teamwork.ch", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Plone :: 4.2", "Framework :: Plone :: 4.3", "Framework :: Plone :: 5.0", "Intended Audience :: Developers", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "ftw.blueprints\n==============\n\n``ftw.blueprints`` provides some useful blueprints and includes example cfgs\nfor archetypes and dexterity.\n\nFor more informations about creating blueprints and how to use them see:\n\n- https://github.com/collective/collective.jsonmigrator\n- https://pypi.python.org/pypi/collective.transmogrifier\n\n.. contents:: Table of Contents\n\n\nInstallation\n------------\n\n- Add ``ftw.blueprints`` to your buildout configuration:\n\n.. code:: rst\n\n    [instance]\n    eggs +=\n        ftw.blueprints\n\n- Open view @@jsonmigrator and chose your configuration file\n\nNote: Some of the Archetypes and Dexterity example configs also reference\nsections from `ftw.inflator <https://github.com/4teamwork/ftw.inflator/>`_.\nIf you base your config on one of these, you'll also need to install\n``ftw.inflator``.\n\n\nCompatibility\n-------------\n\nRuns with `Plone <http://www.plone.org/>`_ ``4.2``, ``4.3`` or ``5.0``.\n\nPlone 4.2\n\n.. image:: https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-4.2.x.cfg/badge/icon\n   :target: https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-4.2.x.cfg\n\nPlone 4.3\n\n.. image:: https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-4.3.x.cfg/badge/icon\n   :target: https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-4.3.x.cfg\n\nPlone 5.0\n\n.. image:: https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-5.0.x.cfg/badge/icon\n   :target: https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-5.0.x.cfg\n\n\nBlueprints provided by this package\n-----------------------------------\n\n- ftw.blueprints.fieldmapper\n   - Powerful blueprint to map and change fields from the given item\n     with a static value, lambda expressions, conditions and dict-mapping.\n\n- ftw.blueprints.pathmapper\n   - Map old paths to new paths. Applies the mapping recursively if required.\n\n- ftw.blueprints.childinserter\n   - Inserts a child for the given item\n\n- ftw.blueprints.parentinserter\n   - Inserts a parent for the given item\n\n- ftw.blueprints.additionalobjectinserter\n   - Inserts an object at the given path\n\n- ftw.blueprints.dataupdater\n   - Updates blob data.\n\n- ftw.blueprints.regexreplacer\n   - Replaces values with regex\n\n- ftw.blueprints.logger\n   - Alternate to the printer blueprint. Configurable logging blueprint to\n     log the information given in an expression.\n\n- ftw.blueprints.workflowmanager\n   - Manages the workflow states, transitions and history\n\n- ftw.blueprints.formmailer-fields-inserter\n   - Blueprint to convert the very old PloneFormMailer fields to the new\n     PloneFormGen archetype fields\n\n- ftw.blueprints.contextualportletadder\n   - Adds a portlet on a given context\n\n- ftw.blueprints.unicodeawaremimeencapsulator\n   - Unicode aware plone.app.transmogrifier.mimeencapsulator.\n\n- ftw.blueprints.multilingual.linguaploneitemlinker\n   - Create new translations with plone.app.multilingual from a source that used\n     LinguaPlone.\n\n- ftw.blueprints.positionupdater\n   - A object position in parent blueprint, supporting Plone sites.\n\n- Under construction / deprecated\n   - ftw.blueprints.annotatedefaultviewpathobjects\n   - ftw.blueprints.updatedefaultviewobjectpath\n   - ftw.blueprints.checkisdefaultviewobject\n\nftw.blueprints.fieldmapper\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis blueprint is to map or change values on the item.\n\nRequired options:\n\n- field-mapping\n  - option to map or change fields\n\nUsing field-mapping:\n\n  {'source-key': {option: value}}\n\n- First, you need to define the source-key you want to modifiy.\n- Then you need to define some options:\n\n  - destination: the new name of the key.\n\n    {'plz': {'destination':'zip'}\n\n    Just moves the value of plz to zip\n\n  - static_value: if you want to use a static value, you can use this\n    option:\n\n    {'plz': {'static_value':'3000'}}\n\n    Replaces the value in plz with 3000\n\n  - map_value: in some cases you want to change the values with a map:\n\n    {'plz': {'map_value':{'PLZ 3000': '3000'}}}\n\n    Tf the value of plz is PLZ 3000, it will be replaced with 3000\n\n  - transform: transforms the value with the given function.\n    As parameter, you have the item itself.\n\n    {'plz': {'transform':lambda x: x['plz'] = x['plz'] and \\\n        x['plz'] or '3000'}}\n\n    This example would replace the plz with 3000 if its value is None\n\n  - need_src_key: in some cases you just want to do transforms if the\n    source-key is available.\n\n    {'plz': 'static_value':'3000', need_src_key: True}\n\n    It would just set the static value if the source-key exists on the item.\n\nThe option 'need_src_key' defaults to False. So you can use the\nmapper as a more powerful inserter blueprint. For example you can add\nan attribute to the item which does not exist yet. If the source-key does not\nexist on the item, it will be ignored by the mapper.\n\n.. code::  python\n\n    {'update_show_title': {\n        'destination': 'showTitle',\n        'transform': lambda x: x['title'] and True or False,\n        }\n    }\n\nThis example would set the non existing yet 'showTitle' attribute\non the item to True if the items title is not None.\n\nIts also possible to do transforms on an attribute, after you can map it\nwith the map_value option.\n\n.. code::  python\n\n    {'title': {\n        'destination': 'description',\n        'transform': lambda x: x['title'].lower(),\n        'map_value': {'james': 'bond', 'bud': 'spencer'}\n        }\n    }\n\nFirst it transforms the title to lowercase. If the title contains one\nof the given keys in the map_value option it will be replaced.\nAt the end, it put the transformed and mapped value into the description.\n\nYou can combine all this options together to do powerful mappings\non your item.\n\n.. code::  python\n\n    {'zip': {'static_value':'3000'},\n     'client': {\n         'destination': 'text',\n         'transform': lambda x: x['language'] == \\\n         'en' and 'Customer: %s' % (x['cleint']) or \\\n         'Kunde: %s' % (x['client']),\n         'need_src_key': True\n       }\n    }\n\nFirst we put a static value to the zip attribute.\nAfter we do some stuff with the client attribute. If the client-key\nis available in the items-map, it fills a given\nstring, depending on the language of the object into the text\nattribute.\n\n\nMinimal configuration:\n\n.. code:: cfg\n\n    [fieldmapper]\n    blueprint = ftw.blueprints.fieldmapper\n    field-mapping = python:{}\n\nOptional options:\n\nThere are no optional options.\n\nftw.blueprints.pathmapper\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis Blueprint updates the path for each item.\n\nRequired options:\n\n- mapping\n\n  - An iterable of mappings.\n\n  - Each mapping-item is a tuple (regular_expression, replacement).\n\n  - The mappings are applied exhaustively in the defined order.\n\n  - expression, iterable\n\nMinimal configuration:\n\n.. code:: cfg\n\n    [pathmapper]\n    blueprint = ftw.blueprints.pathmapper\n    mapping = python: (\n        ('^/de/foo/bar', '/foo/bar'),\n        ('^/en/foo/bar', '/foo/qux'),)\n\nOptional options:\n\n- path-key\n  - The key-name for the path that is mapped. It defaults to _path.\n\n- strip_prefixes\n  - A list of prefixes that are stripped from each path if the paths starts with\n  that prefix.\n\nFull configuration\n\n.. code:: cfg\n\n    [pathmapper]\n    blueprint = ftw.blueprints.pathmapper\n    mapping = python: (\n        ('^/de/foo/bar', '/foo/bar'),\n        ('^/en/foo/bar', '/foo/qux'),)\n    path-key = '_gak'\n    strip-prefixes = python: (\n      '/plone/www/irgendwo',)\n\n\nftw.blueprints.typefieldmapper\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis Blueprint maps types and their fields to new types and new fields.\n\nRequired options:\n\n- mapping\n\n  - Nested mapping for types and their fields.\n\n  - The first level maps types.\n\n  - The second levels maps fields of the first level's types.\n\n  - expression, dict\n\nMinimal configuration:\n\n.. code:: cfg\n\n    [typefieldmapper]\n    blueprint = ftw.blueprints.typefieldmapper\n    mapping = python: {\n            'OldType':  ('NewType', {'oldfield': 'newfield'}),\n        }\n\nOptional options:\n\n- type-key\n  - The key-name for the type that is mapped. It defaults to _type.\n\nftw.blueprints.childinserter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis Blueprint inserts a new item to the pipline as a child.\n\nThe new item is not a copy of the parent-item. If you want to use metadata\nof the parent-item, you need to map them with the metadata-key option\n\nRequired options:\n\n- content-type\n  - defines the contenttype of the child object\n  - string\n\n- additional-id\n  - defines the new id of the child object\n  - expression, string\n\n-Minimal configuration:\n\n.. code:: cfg\n\n    [childinserter]\n    blueprint = ftw.blueprints.childinserter\n    content-type = ContentPage\n    additional-id = python: 'downloads'\n\nOptional options:\n\n- metadata-key\n  - metadatamapping for the child as a dict.\n  you can provide metadata from the parent item for the child or you can\n  use lambda expressions to set a new value.\n  - expression, dict\n\n  Using parents metadata:\n\n    {'description': 'title'}\n\n    will get the value of title on parent-item and put it into the description\n    field on child-item\n\n  Using new value:\n\n    {'title': lambda x: 'Images'}\n\n    will put 'Images' into the title field on child-item\n\n- _interfaces\n  - adds interfaces as a list to the child-item\n  - expression, list\n\n- _annotations\n  - adds annotations as a dict to the child-item\n  - expression, dict\n\nFull configuration\n\n.. code:: cfg\n\n    [childinserter]\n    blueprint = ftw.blueprints.childinserter\n    content-type = ContentPage\n    additional-id = python: 'downloads'\n    metadata-key = python: {\n        'title': lambda x: 'Images',\n        'description': 'title',\n        }\n    _interfaces = python: [\n        \"simplelayout.portlet.dropzone.interfaces.ISlotBlock\",\n        \"remove:simplelayout.base.interfaces.ISlotA\"\n        ]\n    _annotations = {'viewname': 'portlet'}\n\nVisual example:\n\n * A = item in pipeline\n * A' = item in pipeline after blueprint\n * B = child in pipeline after the item\n\n.. code::\n\n                +-------------------+\n                | _path: /foo       |\n                | _id: album        | (A)\n                | _type: Folder     |\n                +---------+---------+\n                          |\n                          | 1.0\n                          |\n           +--------------+------------------+\n           |           BLUEPRINT             |\n           |   content-type = Image          |\n           |   additional-id = python: 'bar' |\n           |                                 |\n           +--+------------------------+-----+\n              |                        |\n              |                        | 1.2\n              |                  +-----+-------------+\n              | 1.1              | _path: /foo/bar   |\n              |                  | _id: bar          | (B)\n              |                  | _type: Image      |\n              |                  +-----+-------------+\n    +---------+---------+              |\n    | _path: /foo       |              |\n    | _id: album        | (A')         |\n    | _type: Folder     |              |\n    +---------+---------+              |\n              |                        |\n              | 1.1.1                  | 1.2.1\n              |                        |\n           +--+------------------------+-----+\n\n\nftw.blueprints.parentinserter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis Blueprint inserts a new item to the pipline as a parent.\n\nThe new item is not a copy of the child-item. If you want to use metadata\nof the child-item, you need to map them with the metadata-key option\n\nPleas see the ftw.blueprints.childinserter section documentation for how to\nuse.\n\nVisual Example:\n\n * A = item in pipeline\n * A' = item in pipeline after blueprint\n * B = parent in pipeline after the item\n\n.. code::\n\n                +-------------------+\n                | _path: /foo       |\n                | _id: album        | (A)\n                | _type: Image      |\n                +---------+---------+\n                          |\n                          | 1.0\n                          |\n           +--------------+------------------+\n           |           BLUEPRINT             |\n           |   content-type = Folder         |\n           |   additional-id = python: 'bar' |\n           |                                 |\n           +--+------------------------+-----+\n              |                        |\n              |                        | 1.2\n              |                  +-----+-------------+\n              | 1.1              | _path: /bar/foo   |\n              |                  | _id: album        | (A')\n              |                  | _type: Image      |\n              |                  +-----+-------------+\n    +---------+---------+              |\n    | _path: /bar       |              |\n    | _id: bar          | (B)          |\n    | _type: Folder     |              |\n    +---------+---------+              |\n              |                        |\n              | 1.1.1                  | 1.2.1\n              |                        |\n           +--+------------------------+-----+\n\n\nftw.blueprints.additionalobjectinserter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis Blueprint inserts a new item to the pipline at a given path.\n\nThe new item is not a copy of the item. If you want to use metadata\nof the item, you need to map them with the metadata-key option\n\nRequired options:\n\n- new-path\n  - the path including the id of the object you want create\n  - expression, string\n\n- content-type\n  - defines the contenttype of the new object\n  - string\n\n- additional-id\n  - defines the new id of the new object\n  -expression, string\n\nMinimal configuration:\n\n.. code:: cfg\n\n    [additionalobjectinserter]\n    blueprint = ftw.blueprints.additionalobjectinserter\n    content-type = Contact\n    additional-id = python: 'downloads'\n    new-path = python:'/contacts/contact-%s' % item['_id']\n\nPlease see the ftw.blueprints.childinserter section documentation for more\ninformations about optional options.\n\nVisual Example:\n\n * A = item in pipeline\n * A' = item in pipeline after blueprint\n * B = parent in pipeline after the item\n\n.. code::\n\n                +-------------------+\n                | _path: /foo       |\n                | _id: album        | (A)\n                | _type: Image      |\n                +---------+---------+\n                          |\n                          | 1.0\n                          |\n           +--------------+-----------------------+\n           |           BLUEPRINT                  |\n           |   content-type = Contact             |\n           |   additional-id = python: 'bar'      |\n           |   new-path = python:'/contacts/james |\n           |                                      |\n           +--+------------------------+----------+\n              |                        |\n              |                        | 1.2\n              |                  +-----+-------------+\n              | 1.1              | _path: /foo       |\n              |                  | _id: album        | (A')\n              |                  | _type: Image      |\n              |                  +-----+-------------+\n    +---------+----------------+       |\n    | _path: /contacts/james   |       |\n    | _id: bar                 | (B)   |\n    | _type: Contact           |       |\n    +---------+----------------+       |\n              |                        |\n              | 1.1.1                  | 1.2.1\n              |                        |\n           +--+------------------------+----------+\n\n\nftw.blueprints.workflowmanager\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBlueprint to manage workflows after migration\n\nWhith this blueprint it's possible to migrate the workflowhistory and\nthe reviewstate.\n\nIt provides workflow-mapping, states-mapping and transition-mapping.\n\nRequired options:\n\n- old-workflow-id\n  - the name of the old workflow you want to migrate\n  - String\n\nMinimal configuration:\n\n.. code:: cfg\n\n    [workflowmanager]\n    blueprint = ftw.blueprints.workflowmanager\n    old-workflow-id = simple_publication_workflow\n\nOptional options:\n\n- update-history\n  - default: True\n  - Set it to False if you just want to update the review_state\n\n- new-workflow-id\n  - if the name of the new workflow differs to the old one.\n  - String\n\n- state-map\n  - mapping for the old states to the new ones\n  - expression, dict\n\n- transition-map\n  - mapping for the old transitions to the new ones\n  - expression, dict\n\nFull configuration\n\n.. code:: cfg\n\n    [workflowmanager]\n    blueprint = ftw.blueprints.workflowmanager\n    old-workflow-id = IntranetPublicationWorkflow\n    new-workflow-id = intranet_secure_workflow\n    state-map = python: {\n        'draft': 'intranet_secure_workflow--STATUS--draft',\n        'published': 'intranet_secure_workflow--STATUS--published',\n        'revision': 'intranet_secure_workflow--STATUS--revision'}\n    transition-map = python: {\n        'publish': 'intranet_secure_workflow--TRANSITION--publish',\n        'retract': 'intranet_secure_workflow--TRANSITION--retract'}\n\n\nftw.blueprints.contextualportletadder\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBlueprint to insert a portlet on a given context.\n\nRequired options:\n\n- manager-name\n    - Name of the portletmanager you want to add a portlet\n    - String\n\n- assignment-path\n    - Dotted name path to the portlet assignment you want to add\n    - String\n\n- portlet-id\n    - ID of the portlet you want to add\n    - String\n\nMinimal configuration:\n\n.. code:: cfg\n\n    [contextualportletadder]\n    blueprint = ftw.blueprints.contextualportletadder\n    manager-name = plone.rightcolumn\n    assignment-path = ftw.contentpage.portlets.news_archive_portlet.Assignment\n    portlet-id = news_archive_portlet\n\n\nOptional options:\n\n- portlet-properties\n    - Default properties for the portlet assignment\n    - expression, dict\n\n\nftw.blueprints.formmailer-fields-inserter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBlueprint to convert the very old PloneFormMailer fields to the new\nPloneFormGen archetype fields\n\nThe Problem converting the fields of the PloneFormMailer is, that they aren't\nArchetype fields like in the PloneFormGen. To convert it automatically, we\nuse the formXML function of the Formulator package and put the exported xml-\nform-representation into the item exported with collective.jsonify.\n\nAfter creating the form itself trough the pipeline, we parse the xml and\nconvert it to a transmogrifier item with the archetypes fields.\n\nSee the example ftw.blueprints.pfm2pfg config to see how to integrate\nthe PloneFormMailer migration correctly into the pipeline.\n\nMinimal configuration:\n\n.. code:: cfg\n\n    [formmailer-fields-inserter]\n    blueprint = ftw.blueprints.formmailer-fields-inserter\n\n\nftw.blueprints.unicodeawaremimeencapsulator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMakes plone.app.transmogrifier.mimeencapsulator accept unicode input data. The\nconfiguration options don't change. See `transmogrifier documentation\n<https://pypi.python.org/pypi/plone.app.transmogrifier#mime-encapsulator-section>`_.\n\n\nftw.blueprints.multilingual.linguaploneitemlinker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLinks translations in the new Plone site with plone.app.multilingual. Expects\nthat the source has been translated with LinguaPlone. Furthermore expects that\nPlone content in the new site has already been constructed when this section\nruns.\n\nNote that when you are mapping paths you should also apply the same mapping to\nthe reference to the canonical translation (_translationOf).\n\nMinimal configuration:\n\n.. code:: cfg\n\n    [multilingual]\n    blueprint = ftw.blueprints.multilingual.linguaploneitemlinker\n\nOptional options:\n\n- path-key\n  - The key-name for the new item's path. It defaults to _path.\n\n- canonical-key\n  - The key-name for the boolean that indicates whether this item is a canonical\n  translation. It defaults to _canonicalTranslation.\n\n- translationOf\n  - The key-name for the reference to the canonical translation. It defaults to\n  _translationOf.\n\n\nftw.blueprints.positionupdater\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``positionupdater`` blueprint supports folders and Plone sites.\nIt stores the desired position of each object in its annotations,\nso that we can migrate children separately but keep the position\n(e.g. one FTI at a time).\n\n.. code:: cfg\n\n    [position]\n    blueprint = ftw.blueprints.positionupdater\n\nOptional:\n\n- ``path-key``\n  - The key-name for the new item's path. It defaults to ``_path``.\n\n- ``position-key``\n  - The key-name for the item's position. It defaults to ``_gopip``.\n\n\nLinks\n-----\n\n- Github: https://github.com/4teamwork/ftw.blueprints\n- Issues: https://github.com/4teamwork/ftw.blueprints/issues\n- Continuous integration: https://jenkins.4teamwork.ch/search?q=ftw.blueprints\n\n\nCopyright\n---------\n\nThis package is copyright by `4teamwork <http://www.4teamwork.ch/>`_.\n\n``ftw.blueprints`` is licensed under GNU General Public License, version 2.\n\nChangelog\n=========\n\n\n1.1.1 (2017-01-09)\n------------------\n\n- Multilingual: encode canonicalpath. [libargutxi]\n\n\n1.1.0 (2016-08-29)\n------------------\n\n- Fix Plone 5 tests:\n\n  - Make sure to set unicode titles.\n  - Install p.a.contenttypes:default profile during Plone 5 tests\n  - Use conditional imports for Plone 4 / 5 compatibility in tests.\n  - Ensure we have consistent IDs on Plone 4 and 5.\n\n  [lgraf]\n\n- Make ILanguage import conditional so it works for both Plone 4 and Plone 5.\n  [lgraf]\n\n- Don't hard depend on ftw.inflator.\n  This makes it possible to use ftw.blueprint sections in Plone5 even when ftw.inflator is not upgraded yet.\n  [Guido A.J. Stevens]\n\n- Update imports to work with both Plone 4 and Plone 5\n  [Guido A.J. Stevens]\n\n- Update imports to work with Plone 5\n  [erral]\n\n\n1.0.0 (2015-09-30)\n------------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/4teamwork/ftw.blueprints", "keywords": "", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "ftw.blueprints", "package_url": "https://pypi.org/project/ftw.blueprints/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ftw.blueprints/", "project_urls": {"Homepage": "https://github.com/4teamwork/ftw.blueprints"}, "release_url": "https://pypi.org/project/ftw.blueprints/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Provides useful blueprints for migrations with transmogrifier", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ftw-blueprints\">\n<h2><a href=\"#id4\" rel=\"nofollow\">ftw.blueprints</a></h2>\n<p><tt>ftw.blueprints</tt> provides some useful blueprints and includes example cfgs\nfor archetypes and dexterity.</p>\n<p>For more informations about creating blueprints and how to use them see:</p>\n<ul>\n<li><a href=\"https://github.com/collective/collective.jsonmigrator\" rel=\"nofollow\">https://github.com/collective/collective.jsonmigrator</a></li>\n<li><a href=\"https://pypi.python.org/pypi/collective.transmogrifier\" rel=\"nofollow\">https://pypi.python.org/pypi/collective.transmogrifier</a></li>\n</ul>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#ftw-blueprints\" id=\"id4\" rel=\"nofollow\">ftw.blueprints</a><ul>\n<li><a href=\"#installation\" id=\"id5\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#compatibility\" id=\"id6\" rel=\"nofollow\">Compatibility</a></li>\n<li><a href=\"#blueprints-provided-by-this-package\" id=\"id7\" rel=\"nofollow\">Blueprints provided by this package</a><ul>\n<li><a href=\"#ftw-blueprints-fieldmapper\" id=\"id8\" rel=\"nofollow\">ftw.blueprints.fieldmapper</a></li>\n<li><a href=\"#ftw-blueprints-pathmapper\" id=\"id9\" rel=\"nofollow\">ftw.blueprints.pathmapper</a></li>\n<li><a href=\"#ftw-blueprints-typefieldmapper\" id=\"id10\" rel=\"nofollow\">ftw.blueprints.typefieldmapper</a></li>\n<li><a href=\"#ftw-blueprints-childinserter\" id=\"id11\" rel=\"nofollow\">ftw.blueprints.childinserter</a></li>\n<li><a href=\"#ftw-blueprints-parentinserter\" id=\"id12\" rel=\"nofollow\">ftw.blueprints.parentinserter</a></li>\n<li><a href=\"#ftw-blueprints-additionalobjectinserter\" id=\"id13\" rel=\"nofollow\">ftw.blueprints.additionalobjectinserter</a></li>\n<li><a href=\"#ftw-blueprints-workflowmanager\" id=\"id14\" rel=\"nofollow\">ftw.blueprints.workflowmanager</a></li>\n<li><a href=\"#ftw-blueprints-contextualportletadder\" id=\"id15\" rel=\"nofollow\">ftw.blueprints.contextualportletadder</a></li>\n<li><a href=\"#ftw-blueprints-formmailer-fields-inserter\" id=\"id16\" rel=\"nofollow\">ftw.blueprints.formmailer-fields-inserter</a></li>\n<li><a href=\"#ftw-blueprints-unicodeawaremimeencapsulator\" id=\"id17\" rel=\"nofollow\">ftw.blueprints.unicodeawaremimeencapsulator</a></li>\n<li><a href=\"#ftw-blueprints-multilingual-linguaploneitemlinker\" id=\"id18\" rel=\"nofollow\">ftw.blueprints.multilingual.linguaploneitemlinker</a></li>\n<li><a href=\"#ftw-blueprints-positionupdater\" id=\"id19\" rel=\"nofollow\">ftw.blueprints.positionupdater</a></li>\n</ul>\n</li>\n<li><a href=\"#links\" id=\"id20\" rel=\"nofollow\">Links</a></li>\n<li><a href=\"#copyright\" id=\"id21\" rel=\"nofollow\">Copyright</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id22\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id23\" rel=\"nofollow\">1.1.1 (2017-01-09)</a></li>\n<li><a href=\"#id2\" id=\"id24\" rel=\"nofollow\">1.1.0 (2016-08-29)</a></li>\n<li><a href=\"#id3\" id=\"id25\" rel=\"nofollow\">1.0.0 (2015-09-30)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Installation</a></h3>\n<ul>\n<li>Add <tt>ftw.blueprints</tt> to your buildout configuration:</li>\n</ul>\n<pre>[instance]\neggs +=\n    ftw.blueprints\n</pre>\n<ul>\n<li>Open view @@jsonmigrator and chose your configuration file</li>\n</ul>\n<p>Note: Some of the Archetypes and Dexterity example configs also reference\nsections from <a href=\"https://github.com/4teamwork/ftw.inflator/\" rel=\"nofollow\">ftw.inflator</a>.\nIf you base your config on one of these, you\u2019ll also need to install\n<tt>ftw.inflator</tt>.</p>\n</div>\n<div id=\"compatibility\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Compatibility</a></h3>\n<p>Runs with <a href=\"http://www.plone.org/\" rel=\"nofollow\">Plone</a> <tt>4.2</tt>, <tt>4.3</tt> or <tt>5.0</tt>.</p>\n<p>Plone 4.2</p>\n<a href=\"https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-4.2.x.cfg\" rel=\"nofollow\"><img alt=\"https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-4.2.x.cfg/badge/icon\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7555f687fdb5973c04bd2703f8825818fdc493f/68747470733a2f2f6a656e6b696e732e347465616d776f726b2e63682f6a6f622f6674772e626c75657072696e74732d6d61737465722d746573742d706c6f6e652d342e322e782e6366672f62616467652f69636f6e\"></a>\n<p>Plone 4.3</p>\n<a href=\"https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-4.3.x.cfg\" rel=\"nofollow\"><img alt=\"https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-4.3.x.cfg/badge/icon\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42ba31ea03ab1db7075b0de1054bf24a6f8f394e/68747470733a2f2f6a656e6b696e732e347465616d776f726b2e63682f6a6f622f6674772e626c75657072696e74732d6d61737465722d746573742d706c6f6e652d342e332e782e6366672f62616467652f69636f6e\"></a>\n<p>Plone 5.0</p>\n<a href=\"https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-5.0.x.cfg\" rel=\"nofollow\"><img alt=\"https://jenkins.4teamwork.ch/job/ftw.blueprints-master-test-plone-5.0.x.cfg/badge/icon\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/215a169147e23edf43961a0fe03425b89bc0a206/68747470733a2f2f6a656e6b696e732e347465616d776f726b2e63682f6a6f622f6674772e626c75657072696e74732d6d61737465722d746573742d706c6f6e652d352e302e782e6366672f62616467652f69636f6e\"></a>\n</div>\n<div id=\"blueprints-provided-by-this-package\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Blueprints provided by this package</a></h3>\n<ul>\n<li><dl>\n<dt>ftw.blueprints.fieldmapper</dt>\n<dd><ul>\n<li>Powerful blueprint to map and change fields from the given item\nwith a static value, lambda expressions, conditions and dict-mapping.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.pathmapper</dt>\n<dd><ul>\n<li>Map old paths to new paths. Applies the mapping recursively if required.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.childinserter</dt>\n<dd><ul>\n<li>Inserts a child for the given item</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.parentinserter</dt>\n<dd><ul>\n<li>Inserts a parent for the given item</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.additionalobjectinserter</dt>\n<dd><ul>\n<li>Inserts an object at the given path</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.dataupdater</dt>\n<dd><ul>\n<li>Updates blob data.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.regexreplacer</dt>\n<dd><ul>\n<li>Replaces values with regex</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.logger</dt>\n<dd><ul>\n<li>Alternate to the printer blueprint. Configurable logging blueprint to\nlog the information given in an expression.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.workflowmanager</dt>\n<dd><ul>\n<li>Manages the workflow states, transitions and history</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.formmailer-fields-inserter</dt>\n<dd><ul>\n<li>Blueprint to convert the very old PloneFormMailer fields to the new\nPloneFormGen archetype fields</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.contextualportletadder</dt>\n<dd><ul>\n<li>Adds a portlet on a given context</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.unicodeawaremimeencapsulator</dt>\n<dd><ul>\n<li>Unicode aware plone.app.transmogrifier.mimeencapsulator.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.multilingual.linguaploneitemlinker</dt>\n<dd><ul>\n<li>Create new translations with plone.app.multilingual from a source that used\nLinguaPlone.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>ftw.blueprints.positionupdater</dt>\n<dd><ul>\n<li>A object position in parent blueprint, supporting Plone sites.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Under construction / deprecated</dt>\n<dd><ul>\n<li>ftw.blueprints.annotatedefaultviewpathobjects</li>\n<li>ftw.blueprints.updatedefaultviewobjectpath</li>\n<li>ftw.blueprints.checkisdefaultviewobject</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<div id=\"ftw-blueprints-fieldmapper\">\n<h4><a href=\"#id8\" rel=\"nofollow\">ftw.blueprints.fieldmapper</a></h4>\n<p>This blueprint is to map or change values on the item.</p>\n<p>Required options:</p>\n<ul>\n<li>field-mapping\n- option to map or change fields</li>\n</ul>\n<p>Using field-mapping:</p>\n<blockquote>\n{\u2018source-key\u2019: {option: value}}</blockquote>\n<ul>\n<li><p>First, you need to define the source-key you want to modifiy.</p>\n</li>\n<li><p>Then you need to define some options:</p>\n<ul>\n<li><p>destination: the new name of the key.</p>\n<p>{\u2018plz\u2019: {\u2018destination\u2019:\u2019zip\u2019}</p>\n<p>Just moves the value of plz to zip</p>\n</li>\n<li><p>static_value: if you want to use a static value, you can use this\noption:</p>\n<p>{\u2018plz\u2019: {\u2018static_value\u2019:\u20193000\u2019}}</p>\n<p>Replaces the value in plz with 3000</p>\n</li>\n<li><p>map_value: in some cases you want to change the values with a map:</p>\n<p>{\u2018plz\u2019: {\u2018map_value\u2019:{\u2018PLZ 3000\u2019: \u20183000\u2019}}}</p>\n<p>Tf the value of plz is PLZ 3000, it will be replaced with 3000</p>\n</li>\n<li><p>transform: transforms the value with the given function.\nAs parameter, you have the item itself.</p>\n<dl>\n<dt>{\u2018plz\u2019: {\u2018transform\u2019:lambda x: x[\u2018plz\u2019] = x[\u2018plz\u2019] and </dt>\n<dd><p>x[\u2018plz\u2019] or \u20183000\u2019}}</p>\n</dd>\n</dl>\n<p>This example would replace the plz with 3000 if its value is None</p>\n</li>\n<li><p>need_src_key: in some cases you just want to do transforms if the\nsource-key is available.</p>\n<p>{\u2018plz\u2019: \u2018static_value\u2019:\u20193000\u2019, need_src_key: True}</p>\n<p>It would just set the static value if the source-key exists on the item.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>The option \u2018need_src_key\u2019 defaults to False. So you can use the\nmapper as a more powerful inserter blueprint. For example you can add\nan attribute to the item which does not exist yet. If the source-key does not\nexist on the item, it will be ignored by the mapper.</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'update_show_title'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'destination'</span><span class=\"p\">:</span> <span class=\"s1\">'showTitle'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'transform'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This example would set the non existing yet \u2018showTitle\u2019 attribute\non the item to True if the items title is not None.</p>\n<p>Its also possible to do transforms on an attribute, after you can map it\nwith the map_value option.</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'destination'</span><span class=\"p\">:</span> <span class=\"s1\">'description'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'transform'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span>\n    <span class=\"s1\">'map_value'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'james'</span><span class=\"p\">:</span> <span class=\"s1\">'bond'</span><span class=\"p\">,</span> <span class=\"s1\">'bud'</span><span class=\"p\">:</span> <span class=\"s1\">'spencer'</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>First it transforms the title to lowercase. If the title contains one\nof the given keys in the map_value option it will be replaced.\nAt the end, it put the transformed and mapped value into the description.</p>\n<p>You can combine all this options together to do powerful mappings\non your item.</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'zip'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'static_value'</span><span class=\"p\">:</span><span class=\"s1\">'3000'</span><span class=\"p\">},</span>\n <span class=\"s1\">'client'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n     <span class=\"s1\">'destination'</span><span class=\"p\">:</span> <span class=\"s1\">'text'</span><span class=\"p\">,</span>\n     <span class=\"s1\">'transform'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'language'</span><span class=\"p\">]</span> <span class=\"o\">==</span> \\\n     <span class=\"s1\">'en'</span> <span class=\"ow\">and</span> <span class=\"s1\">'Customer: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'cleint'</span><span class=\"p\">])</span> <span class=\"ow\">or</span> \\\n     <span class=\"s1\">'Kunde: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'client'</span><span class=\"p\">]),</span>\n     <span class=\"s1\">'need_src_key'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>First we put a static value to the zip attribute.\nAfter we do some stuff with the client attribute. If the client-key\nis available in the items-map, it fills a given\nstring, depending on the language of the object into the text\nattribute.</p>\n<p>Minimal configuration:</p>\n<pre><span class=\"k\">[fieldmapper]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.fieldmapper</span>\n<span class=\"na\">field-mapping</span> <span class=\"o\">=</span> <span class=\"s\">python:{}</span>\n</pre>\n<p>Optional options:</p>\n<p>There are no optional options.</p>\n</div>\n<div id=\"ftw-blueprints-pathmapper\">\n<h4><a href=\"#id9\" rel=\"nofollow\">ftw.blueprints.pathmapper</a></h4>\n<p>This Blueprint updates the path for each item.</p>\n<p>Required options:</p>\n<ul>\n<li>mapping<ul>\n<li>An iterable of mappings.</li>\n<li>Each mapping-item is a tuple (regular_expression, replacement).</li>\n<li>The mappings are applied exhaustively in the defined order.</li>\n<li>expression, iterable</li>\n</ul>\n</li>\n</ul>\n<p>Minimal configuration:</p>\n<pre><span class=\"k\">[pathmapper]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.pathmapper</span>\n<span class=\"na\">mapping</span> <span class=\"o\">=</span> <span class=\"s\">python: (\n    ('^/de/foo/bar', '/foo/bar'),\n    ('^/en/foo/bar', '/foo/qux'),)</span>\n</pre>\n<p>Optional options:</p>\n<ul>\n<li>path-key\n- The key-name for the path that is mapped. It defaults to _path.</li>\n<li>strip_prefixes\n- A list of prefixes that are stripped from each path if the paths starts with\nthat prefix.</li>\n</ul>\n<p>Full configuration</p>\n<pre><span class=\"k\">[pathmapper]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.pathmapper</span>\n<span class=\"na\">mapping</span> <span class=\"o\">=</span> <span class=\"s\">python: (\n    ('^/de/foo/bar', '/foo/bar'),\n    ('^/en/foo/bar', '/foo/qux'),)</span>\n<span class=\"na\">path-key</span> <span class=\"o\">=</span> <span class=\"s\">'_gak'</span>\n<span class=\"na\">strip-prefixes</span> <span class=\"o\">=</span> <span class=\"s\">python: (\n  '/plone/www/irgendwo',)</span>\n</pre>\n</div>\n<div id=\"ftw-blueprints-typefieldmapper\">\n<h4><a href=\"#id10\" rel=\"nofollow\">ftw.blueprints.typefieldmapper</a></h4>\n<p>This Blueprint maps types and their fields to new types and new fields.</p>\n<p>Required options:</p>\n<ul>\n<li>mapping<ul>\n<li>Nested mapping for types and their fields.</li>\n<li>The first level maps types.</li>\n<li>The second levels maps fields of the first level\u2019s types.</li>\n<li>expression, dict</li>\n</ul>\n</li>\n</ul>\n<p>Minimal configuration:</p>\n<pre><span class=\"k\">[typefieldmapper]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.typefieldmapper</span>\n<span class=\"na\">mapping</span> <span class=\"o\">=</span> <span class=\"s\">python: {\n        'OldType':  ('NewType', {'oldfield': 'newfield'}),\n    }</span>\n</pre>\n<p>Optional options:</p>\n<ul>\n<li>type-key\n- The key-name for the type that is mapped. It defaults to _type.</li>\n</ul>\n</div>\n<div id=\"ftw-blueprints-childinserter\">\n<h4><a href=\"#id11\" rel=\"nofollow\">ftw.blueprints.childinserter</a></h4>\n<p>This Blueprint inserts a new item to the pipline as a child.</p>\n<p>The new item is not a copy of the parent-item. If you want to use metadata\nof the parent-item, you need to map them with the metadata-key option</p>\n<p>Required options:</p>\n<ul>\n<li>content-type\n- defines the contenttype of the child object\n- string</li>\n<li>additional-id\n- defines the new id of the child object\n- expression, string</li>\n</ul>\n<p>-Minimal configuration:</p>\n<pre><span class=\"k\">[childinserter]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.childinserter</span>\n<span class=\"na\">content-type</span> <span class=\"o\">=</span> <span class=\"s\">ContentPage</span>\n<span class=\"na\">additional-id</span> <span class=\"o\">=</span> <span class=\"s\">python: 'downloads'</span>\n</pre>\n<p>Optional options:</p>\n<ul>\n<li><p>metadata-key\n- metadatamapping for the child as a dict.\nyou can provide metadata from the parent item for the child or you can\nuse lambda expressions to set a new value.\n- expression, dict</p>\n<p>Using parents metadata:</p>\n<blockquote>\n<p>{\u2018description\u2019: \u2018title\u2019}</p>\n<p>will get the value of title on parent-item and put it into the description\nfield on child-item</p>\n</blockquote>\n<p>Using new value:</p>\n<blockquote>\n<p>{\u2018title\u2019: lambda x: \u2018Images\u2019}</p>\n<p>will put \u2018Images\u2019 into the title field on child-item</p>\n</blockquote>\n</li>\n<li><p>_interfaces\n- adds interfaces as a list to the child-item\n- expression, list</p>\n</li>\n<li><p>_annotations\n- adds annotations as a dict to the child-item\n- expression, dict</p>\n</li>\n</ul>\n<p>Full configuration</p>\n<pre><span class=\"k\">[childinserter]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.childinserter</span>\n<span class=\"na\">content-type</span> <span class=\"o\">=</span> <span class=\"s\">ContentPage</span>\n<span class=\"na\">additional-id</span> <span class=\"o\">=</span> <span class=\"s\">python: 'downloads'</span>\n<span class=\"na\">metadata-key</span> <span class=\"o\">=</span> <span class=\"s\">python: {\n    'title': lambda x: 'Images',\n    'description': 'title',\n    }</span>\n<span class=\"na\">_interfaces</span> <span class=\"o\">=</span> <span class=\"s\">python: [\n    \"simplelayout.portlet.dropzone.interfaces.ISlotBlock\",\n    \"remove:simplelayout.base.interfaces.ISlotA\"\n    ]</span>\n<span class=\"na\">_annotations</span> <span class=\"o\">=</span> <span class=\"s\">{'viewname': 'portlet'}</span>\n</pre>\n<p>Visual example:</p>\n<blockquote>\n<ul>\n<li>A = item in pipeline</li>\n<li>A\u2019 = item in pipeline after blueprint</li>\n<li>B = child in pipeline after the item</li>\n</ul>\n</blockquote>\n<pre>            +-------------------+\n            | _path: /foo       |\n            | _id: album        | (A)\n            | _type: Folder     |\n            +---------+---------+\n                      |\n                      | 1.0\n                      |\n       +--------------+------------------+\n       |           BLUEPRINT             |\n       |   content-type = Image          |\n       |   additional-id = python: 'bar' |\n       |                                 |\n       +--+------------------------+-----+\n          |                        |\n          |                        | 1.2\n          |                  +-----+-------------+\n          | 1.1              | _path: /foo/bar   |\n          |                  | _id: bar          | (B)\n          |                  | _type: Image      |\n          |                  +-----+-------------+\n+---------+---------+              |\n| _path: /foo       |              |\n| _id: album        | (A')         |\n| _type: Folder     |              |\n+---------+---------+              |\n          |                        |\n          | 1.1.1                  | 1.2.1\n          |                        |\n       +--+------------------------+-----+\n</pre>\n</div>\n<div id=\"ftw-blueprints-parentinserter\">\n<h4><a href=\"#id12\" rel=\"nofollow\">ftw.blueprints.parentinserter</a></h4>\n<p>This Blueprint inserts a new item to the pipline as a parent.</p>\n<p>The new item is not a copy of the child-item. If you want to use metadata\nof the child-item, you need to map them with the metadata-key option</p>\n<p>Pleas see the ftw.blueprints.childinserter section documentation for how to\nuse.</p>\n<p>Visual Example:</p>\n<blockquote>\n<ul>\n<li>A = item in pipeline</li>\n<li>A\u2019 = item in pipeline after blueprint</li>\n<li>B = parent in pipeline after the item</li>\n</ul>\n</blockquote>\n<pre>            +-------------------+\n            | _path: /foo       |\n            | _id: album        | (A)\n            | _type: Image      |\n            +---------+---------+\n                      |\n                      | 1.0\n                      |\n       +--------------+------------------+\n       |           BLUEPRINT             |\n       |   content-type = Folder         |\n       |   additional-id = python: 'bar' |\n       |                                 |\n       +--+------------------------+-----+\n          |                        |\n          |                        | 1.2\n          |                  +-----+-------------+\n          | 1.1              | _path: /bar/foo   |\n          |                  | _id: album        | (A')\n          |                  | _type: Image      |\n          |                  +-----+-------------+\n+---------+---------+              |\n| _path: /bar       |              |\n| _id: bar          | (B)          |\n| _type: Folder     |              |\n+---------+---------+              |\n          |                        |\n          | 1.1.1                  | 1.2.1\n          |                        |\n       +--+------------------------+-----+\n</pre>\n</div>\n<div id=\"ftw-blueprints-additionalobjectinserter\">\n<h4><a href=\"#id13\" rel=\"nofollow\">ftw.blueprints.additionalobjectinserter</a></h4>\n<p>This Blueprint inserts a new item to the pipline at a given path.</p>\n<p>The new item is not a copy of the item. If you want to use metadata\nof the item, you need to map them with the metadata-key option</p>\n<p>Required options:</p>\n<ul>\n<li>new-path\n- the path including the id of the object you want create\n- expression, string</li>\n<li>content-type\n- defines the contenttype of the new object\n- string</li>\n<li>additional-id\n- defines the new id of the new object\n-expression, string</li>\n</ul>\n<p>Minimal configuration:</p>\n<pre><span class=\"k\">[additionalobjectinserter]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.additionalobjectinserter</span>\n<span class=\"na\">content-type</span> <span class=\"o\">=</span> <span class=\"s\">Contact</span>\n<span class=\"na\">additional-id</span> <span class=\"o\">=</span> <span class=\"s\">python: 'downloads'</span>\n<span class=\"na\">new-path</span> <span class=\"o\">=</span> <span class=\"s\">python:'/contacts/contact-%s' % item['_id']</span>\n</pre>\n<p>Please see the ftw.blueprints.childinserter section documentation for more\ninformations about optional options.</p>\n<p>Visual Example:</p>\n<blockquote>\n<ul>\n<li>A = item in pipeline</li>\n<li>A\u2019 = item in pipeline after blueprint</li>\n<li>B = parent in pipeline after the item</li>\n</ul>\n</blockquote>\n<pre>            +-------------------+\n            | _path: /foo       |\n            | _id: album        | (A)\n            | _type: Image      |\n            +---------+---------+\n                      |\n                      | 1.0\n                      |\n       +--------------+-----------------------+\n       |           BLUEPRINT                  |\n       |   content-type = Contact             |\n       |   additional-id = python: 'bar'      |\n       |   new-path = python:'/contacts/james |\n       |                                      |\n       +--+------------------------+----------+\n          |                        |\n          |                        | 1.2\n          |                  +-----+-------------+\n          | 1.1              | _path: /foo       |\n          |                  | _id: album        | (A')\n          |                  | _type: Image      |\n          |                  +-----+-------------+\n+---------+----------------+       |\n| _path: /contacts/james   |       |\n| _id: bar                 | (B)   |\n| _type: Contact           |       |\n+---------+----------------+       |\n          |                        |\n          | 1.1.1                  | 1.2.1\n          |                        |\n       +--+------------------------+----------+\n</pre>\n</div>\n<div id=\"ftw-blueprints-workflowmanager\">\n<h4><a href=\"#id14\" rel=\"nofollow\">ftw.blueprints.workflowmanager</a></h4>\n<p>Blueprint to manage workflows after migration</p>\n<p>Whith this blueprint it\u2019s possible to migrate the workflowhistory and\nthe reviewstate.</p>\n<p>It provides workflow-mapping, states-mapping and transition-mapping.</p>\n<p>Required options:</p>\n<ul>\n<li>old-workflow-id\n- the name of the old workflow you want to migrate\n- String</li>\n</ul>\n<p>Minimal configuration:</p>\n<pre><span class=\"k\">[workflowmanager]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.workflowmanager</span>\n<span class=\"na\">old-workflow-id</span> <span class=\"o\">=</span> <span class=\"s\">simple_publication_workflow</span>\n</pre>\n<p>Optional options:</p>\n<ul>\n<li>update-history\n- default: True\n- Set it to False if you just want to update the review_state</li>\n<li>new-workflow-id\n- if the name of the new workflow differs to the old one.\n- String</li>\n<li>state-map\n- mapping for the old states to the new ones\n- expression, dict</li>\n<li>transition-map\n- mapping for the old transitions to the new ones\n- expression, dict</li>\n</ul>\n<p>Full configuration</p>\n<pre><span class=\"k\">[workflowmanager]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.workflowmanager</span>\n<span class=\"na\">old-workflow-id</span> <span class=\"o\">=</span> <span class=\"s\">IntranetPublicationWorkflow</span>\n<span class=\"na\">new-workflow-id</span> <span class=\"o\">=</span> <span class=\"s\">intranet_secure_workflow</span>\n<span class=\"na\">state-map</span> <span class=\"o\">=</span> <span class=\"s\">python: {\n    'draft': 'intranet_secure_workflow--STATUS--draft',\n    'published': 'intranet_secure_workflow--STATUS--published',\n    'revision': 'intranet_secure_workflow--STATUS--revision'}</span>\n<span class=\"na\">transition-map</span> <span class=\"o\">=</span> <span class=\"s\">python: {\n    'publish': 'intranet_secure_workflow--TRANSITION--publish',\n    'retract': 'intranet_secure_workflow--TRANSITION--retract'}</span>\n</pre>\n</div>\n<div id=\"ftw-blueprints-contextualportletadder\">\n<h4><a href=\"#id15\" rel=\"nofollow\">ftw.blueprints.contextualportletadder</a></h4>\n<p>Blueprint to insert a portlet on a given context.</p>\n<p>Required options:</p>\n<ul>\n<li><dl>\n<dt>manager-name</dt>\n<dd><ul>\n<li>Name of the portletmanager you want to add a portlet</li>\n<li>String</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>assignment-path</dt>\n<dd><ul>\n<li>Dotted name path to the portlet assignment you want to add</li>\n<li>String</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>portlet-id</dt>\n<dd><ul>\n<li>ID of the portlet you want to add</li>\n<li>String</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<p>Minimal configuration:</p>\n<pre><span class=\"k\">[contextualportletadder]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.contextualportletadder</span>\n<span class=\"na\">manager-name</span> <span class=\"o\">=</span> <span class=\"s\">plone.rightcolumn</span>\n<span class=\"na\">assignment-path</span> <span class=\"o\">=</span> <span class=\"s\">ftw.contentpage.portlets.news_archive_portlet.Assignment</span>\n<span class=\"na\">portlet-id</span> <span class=\"o\">=</span> <span class=\"s\">news_archive_portlet</span>\n</pre>\n<p>Optional options:</p>\n<ul>\n<li><dl>\n<dt>portlet-properties</dt>\n<dd><ul>\n<li>Default properties for the portlet assignment</li>\n<li>expression, dict</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"ftw-blueprints-formmailer-fields-inserter\">\n<h4><a href=\"#id16\" rel=\"nofollow\">ftw.blueprints.formmailer-fields-inserter</a></h4>\n<p>Blueprint to convert the very old PloneFormMailer fields to the new\nPloneFormGen archetype fields</p>\n<p>The Problem converting the fields of the PloneFormMailer is, that they aren\u2019t\nArchetype fields like in the PloneFormGen. To convert it automatically, we\nuse the formXML function of the Formulator package and put the exported xml-\nform-representation into the item exported with collective.jsonify.</p>\n<p>After creating the form itself trough the pipeline, we parse the xml and\nconvert it to a transmogrifier item with the archetypes fields.</p>\n<p>See the example ftw.blueprints.pfm2pfg config to see how to integrate\nthe PloneFormMailer migration correctly into the pipeline.</p>\n<p>Minimal configuration:</p>\n<pre><span class=\"k\">[formmailer-fields-inserter]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.formmailer-fields-inserter</span>\n</pre>\n</div>\n<div id=\"ftw-blueprints-unicodeawaremimeencapsulator\">\n<h4><a href=\"#id17\" rel=\"nofollow\">ftw.blueprints.unicodeawaremimeencapsulator</a></h4>\n<p>Makes plone.app.transmogrifier.mimeencapsulator accept unicode input data. The\nconfiguration options don\u2019t change. See <a href=\"https://pypi.python.org/pypi/plone.app.transmogrifier#mime-encapsulator-section\" rel=\"nofollow\">transmogrifier documentation</a>.</p>\n</div>\n<div id=\"ftw-blueprints-multilingual-linguaploneitemlinker\">\n<h4><a href=\"#id18\" rel=\"nofollow\">ftw.blueprints.multilingual.linguaploneitemlinker</a></h4>\n<p>Links translations in the new Plone site with plone.app.multilingual. Expects\nthat the source has been translated with LinguaPlone. Furthermore expects that\nPlone content in the new site has already been constructed when this section\nruns.</p>\n<p>Note that when you are mapping paths you should also apply the same mapping to\nthe reference to the canonical translation (_translationOf).</p>\n<p>Minimal configuration:</p>\n<pre><span class=\"k\">[multilingual]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.multilingual.linguaploneitemlinker</span>\n</pre>\n<p>Optional options:</p>\n<ul>\n<li>path-key\n- The key-name for the new item\u2019s path. It defaults to _path.</li>\n<li>canonical-key\n- The key-name for the boolean that indicates whether this item is a canonical\ntranslation. It defaults to _canonicalTranslation.</li>\n<li>translationOf\n- The key-name for the reference to the canonical translation. It defaults to\n_translationOf.</li>\n</ul>\n</div>\n<div id=\"ftw-blueprints-positionupdater\">\n<h4><a href=\"#id19\" rel=\"nofollow\">ftw.blueprints.positionupdater</a></h4>\n<p>The <tt>positionupdater</tt> blueprint supports folders and Plone sites.\nIt stores the desired position of each object in its annotations,\nso that we can migrate children separately but keep the position\n(e.g. one FTI at a time).</p>\n<pre><span class=\"k\">[position]</span>\n<span class=\"na\">blueprint</span> <span class=\"o\">=</span> <span class=\"s\">ftw.blueprints.positionupdater</span>\n</pre>\n<p>Optional:</p>\n<ul>\n<li><tt><span class=\"pre\">path-key</span></tt>\n- The key-name for the new item\u2019s path. It defaults to <tt>_path</tt>.</li>\n<li><tt><span class=\"pre\">position-key</span></tt>\n- The key-name for the item\u2019s position. It defaults to <tt>_gopip</tt>.</li>\n</ul>\n</div>\n</div>\n<div id=\"links\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Links</a></h3>\n<ul>\n<li>Github: <a href=\"https://github.com/4teamwork/ftw.blueprints\" rel=\"nofollow\">https://github.com/4teamwork/ftw.blueprints</a></li>\n<li>Issues: <a href=\"https://github.com/4teamwork/ftw.blueprints/issues\" rel=\"nofollow\">https://github.com/4teamwork/ftw.blueprints/issues</a></li>\n<li>Continuous integration: <a href=\"https://jenkins.4teamwork.ch/search?q=ftw.blueprints\" rel=\"nofollow\">https://jenkins.4teamwork.ch/search?q=ftw.blueprints</a></li>\n</ul>\n</div>\n<div id=\"copyright\">\n<h3><a href=\"#id21\" rel=\"nofollow\">Copyright</a></h3>\n<p>This package is copyright by <a href=\"http://www.4teamwork.ch/\" rel=\"nofollow\">4teamwork</a>.</p>\n<p><tt>ftw.blueprints</tt> is licensed under GNU General Public License, version 2.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id22\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id23\" rel=\"nofollow\">1.1.1 (2017-01-09)</a></h3>\n<ul>\n<li>Multilingual: encode canonicalpath. [libargutxi]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id24\" rel=\"nofollow\">1.1.0 (2016-08-29)</a></h3>\n<ul>\n<li><p>Fix Plone 5 tests:</p>\n<ul>\n<li>Make sure to set unicode titles.</li>\n<li>Install p.a.contenttypes:default profile during Plone 5 tests</li>\n<li>Use conditional imports for Plone 4 / 5 compatibility in tests.</li>\n<li>Ensure we have consistent IDs on Plone 4 and 5.</li>\n</ul>\n<p>[lgraf]</p>\n</li>\n<li><p>Make ILanguage import conditional so it works for both Plone 4 and Plone 5.\n[lgraf]</p>\n</li>\n<li><p>Don\u2019t hard depend on ftw.inflator.\nThis makes it possible to use ftw.blueprint sections in Plone5 even when ftw.inflator is not upgraded yet.\n[Guido A.J. Stevens]</p>\n</li>\n<li><p>Update imports to work with both Plone 4 and Plone 5\n[Guido A.J. Stevens]</p>\n</li>\n<li><p>Update imports to work with Plone 5\n[erral]</p>\n</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id25\" rel=\"nofollow\">1.0.0 (2015-09-30)</a></h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6573543, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0c4b744638dcbc5b6bbd9867a80bd640", "sha256": "4a8c9b0e62860fd7ce5b7ba55560ac5e22ceb5eac5407ed85be532c2d440a16c"}, "downloads": -1, "filename": "ftw.blueprints-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0c4b744638dcbc5b6bbd9867a80bd640", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34814, "upload_time": "2015-09-30T13:36:46", "upload_time_iso_8601": "2015-09-30T13:36:46.612738Z", "url": "https://files.pythonhosted.org/packages/a3/3e/20e6ebd5a645001350b7d09b21c3b812f7fcc045471f4e9d32f75072103b/ftw.blueprints-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e1adc7eff0f82e2b4610a5caaad5c13a", "sha256": "5acf1f76f5c500bb4f19fa3654940907f05a8406c7d3d6e50143eb8f4ebcda09"}, "downloads": -1, "filename": "ftw.blueprints-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e1adc7eff0f82e2b4610a5caaad5c13a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36239, "upload_time": "2016-08-29T13:44:57", "upload_time_iso_8601": "2016-08-29T13:44:57.436767Z", "url": "https://files.pythonhosted.org/packages/a8/48/013573a450569af63778955e851baa9f6ba8d56f644621c79babc939007b/ftw.blueprints-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "97ed14260187cd0089d2a48b7a0726e2", "sha256": "9e89b39d766edfe0eeb301237e2ca0f884ca14960df472b1c52f1ba922903606"}, "downloads": -1, "filename": "ftw.blueprints-1.1.1.tar.gz", "has_sig": false, "md5_digest": "97ed14260187cd0089d2a48b7a0726e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36370, "upload_time": "2017-01-09T11:18:16", "upload_time_iso_8601": "2017-01-09T11:18:16.948422Z", "url": "https://files.pythonhosted.org/packages/89/1e/5cb8d10698959475f708dab816b3d587720b93c09b3184bb4359426fd399/ftw.blueprints-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97ed14260187cd0089d2a48b7a0726e2", "sha256": "9e89b39d766edfe0eeb301237e2ca0f884ca14960df472b1c52f1ba922903606"}, "downloads": -1, "filename": "ftw.blueprints-1.1.1.tar.gz", "has_sig": false, "md5_digest": "97ed14260187cd0089d2a48b7a0726e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36370, "upload_time": "2017-01-09T11:18:16", "upload_time_iso_8601": "2017-01-09T11:18:16.948422Z", "url": "https://files.pythonhosted.org/packages/89/1e/5cb8d10698959475f708dab816b3d587720b93c09b3184bb4359426fd399/ftw.blueprints-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:57 2020"}