{"info": {"author": "UNKNOWN", "author_email": "jakub@roztocil.co", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development", "Topic :: System :: Networking", "Topic :: Terminals", "Topic :: Text Processing", "Topic :: Utilities"], "description": "HTTPie: a CLI, cURL-like tool for humans\n########################################\n\nHTTPie (pronounced *aitch-tee-tee-pie*) is a command line HTTP client.\nIts goal is to make CLI interaction with web services as human-friendly\nas possible. It provides a simple ``http`` command that allows for sending\narbitrary HTTP requests using a simple and natural syntax, and displays\ncolorized output. HTTPie can be used for testing, debugging, and\ngenerally interacting with HTTP servers.\n\n\n.. class:: no-web\n\n    .. image:: https://raw.githubusercontent.com/jkbrzt/httpie/master/httpie.png\n        :alt: HTTPie compared to cURL\n        :width: 100%\n        :align: center\n\n\n.. class:: no-web no-pdf\n\n|pypi| |unix_build| |windows_build| |coverage| |gitter|\n\n\n\n.. contents::\n\n.. section-numbering::\n\n\n\nMain features\n=============\n\n* Expressive and intuitive syntax\n* Formatted and colorized terminal output\n* Built-in JSON support\n* Forms and file uploads\n* HTTPS, proxies, and authentication\n* Arbitrary request data\n* Custom headers\n* Persistent sessions\n* Wget-like downloads\n* Python 2.6, 2.7 and 3.x support\n* Linux, Mac OS X and Windows support\n* Plugins\n* Documentation\n* Test coverage\n\n\nInstallation\n============\n\n\nmacOS\n-----\n\n\nOn macOS, HTTPie can be installed via `Homebrew <http://brew.sh/>`_\n(recommended):\n\n.. code-block:: bash\n\n    $ brew install httpie\n\n\nA MacPorts *port* is also available:\n\n.. code-block:: bash\n\n    $ port install httpie\n\nLinux\n-----\n\nMost Linux distributions provide a package that can be installed using the\nsystem package manager, e.g.:\n\n.. code-block:: bash\n\n    # Debian-based distributions such as Ubuntu:\n    $ apt-get install httpie\n\n    # RPM-based distributions:\n    $ yum install httpie\n\n    # Arch Linux\n    $ pacman -S httpie\n\n\nWindows, etc.\n-------------\n\nA universal installation method (that works on Windows, Mac OS X, Linux, \u2026,\nand always provides the latest version) is to use `pip`_:\n\n\n.. code-block:: bash\n\n    # Make sure we have an up-to-date version of pip and setuptools:\n    $ pip install --upgrade pip setuptools\n\n    $ pip install --upgrade httpie\n\n\n(If ``pip`` installation fails for some reason, you can try\n``easy_install httpie`` as a fallback.)\n\n\nDevelopment version\n-------------------\n\nThe latest development version can be installed directly from GitHub:\n\n.. code-block:: bash\n\n    # Mac OS X via Homebrew\n    $ brew install httpie --HEAD\n\n    # Universal\n    $ pip install --upgrade https://github.com/jkbrzt/httpie/archive/master.tar.gz\n\n\nPython version\n--------------\n\nAlthough Python 2.6 and 2.7 are supported as well, it is recommended to install\nHTTPie against the latest Python 3.x whenever possible. That will ensure that\nsome of the newer HTTP features, such as `SNI (Server Name Indication)`_,\nwork out of the box.\nPython 3 is the default for Homebrew installations starting with version 0.9.4.\nTo see which version HTTPie uses, run ``http --debug``.\n\n\nUsage\n=====\n\n\nHello World:\n\n\n.. code-block:: bash\n\n    $ http httpie.org\n\n\nSynopsis:\n\n.. code-block:: bash\n\n    $ http [flags] [METHOD] URL [ITEM [ITEM]]\n\n\nSee also ``http --help``.\n\n\nExamples\n--------\n\nCustom `HTTP method`_, `HTTP headers`_ and `JSON`_ data:\n\n.. code-block:: bash\n\n    $ http PUT example.org X-API-Token:123 name=John\n\n\nSubmitting `forms`_:\n\n.. code-block:: bash\n\n    $ http -f POST example.org hello=World\n\n\nSee the request that is being sent using one of the `output options`_:\n\n.. code-block:: bash\n\n    $ http -v example.org\n\n\nUse `Github API`_ to post a comment on an\n`issue <https://github.com/jkbrzt/httpie/issues/83>`_\nwith `authentication`_:\n\n.. code-block:: bash\n\n    $ http -a USERNAME POST https://api.github.com/repos/jkbrzt/httpie/issues/83/comments body='HTTPie is awesome! :heart:'\n\n\nUpload a file using `redirected input`_:\n\n.. code-block:: bash\n\n    $ http example.org < file.json\n\n\nDownload a file and save it via `redirected output`_:\n\n.. code-block:: bash\n\n    $ http example.org/file > file\n\n\nDownload a file ``wget`` style:\n\n.. code-block:: bash\n\n    $ http --download example.org/file\n\nUse named `sessions`_ to make certain aspects or the communication persistent\nbetween requests to the same host:\n\n.. code-block:: bash\n\n    $ http --session=logged-in -a username:password httpbin.org/get API-Key:123\n\n    $ http --session=logged-in httpbin.org/headers\n\n\nSet a custom ``Host`` header to work around missing DNS records:\n\n.. code-block:: bash\n\n    $ http localhost:8000 Host:example.com\n\n..\n\n\nHTTP method\n===========\n\nThe name of the HTTP method comes right before the URL argument:\n\n.. code-block:: bash\n\n    $ http DELETE example.org/todos/7\n\n\nWhich looks similar to the actual ``Request-Line`` that is sent:\n\n.. code-block:: http\n\n    DELETE /todos/7 HTTP/1.1\n\n\nWhen the ``METHOD`` argument is omitted from the command, HTTPie defaults to\neither ``GET`` (with no request data) or ``POST`` (with request data).\n\n\nRequest URL\n===========\n\nThe only information HTTPie needs to perform a request is a URL.\nThe default scheme is, somewhat unsurprisingly, ``http://``,\nand can be omitted from the argument \u2013 ``http example.org`` works just fine.\n\n\nQuerystring parameters\n----------------------\n\nIf you find yourself manually constructing URLs with\non the terminal, you may appreciate the ``param==value`` syntax for appending\nURL parameters. With that, you don't have to worry about escaping the ``&``\nseparators for your shell. Also, special characters in parameter values,\nwill also automatically escaped (HTTPie otherwise expects the URL to be\nalready escaped). To search for ``HTTPie logo`` on Google Images you could use\nthis command:\n\n.. code-block:: bash\n\n    $ http www.google.com search=='HTTPie logo' tbm==isch\n\n\n.. code-block:: http\n\n    GET /?search=HTTPie+logo&tbm=isch HTTP/1.1\n\n\n\nURL shortcuts for ``localhost``\n-------------------------------\n\nAdditionally, curl-like shorthand for localhost is supported.\nThis means that, for example ``:3000`` would expand to ``http://localhost:3000``\nIf the port is omitted, then port 80 is assumed.\n\n.. code-block:: bash\n\n    $ http :/foo\n\n\n.. code-block:: http\n\n    GET /foo HTTP/1.1\n    Host: localhost\n\n\n.. code-block:: bash\n\n    $ http :3000/bar\n\n\n.. code-block:: http\n\n    GET /bar HTTP/1.1\n    Host: localhost:3000\n\n\n.. code-block:: bash\n\n    $ http :\n\n\n.. code-block:: http\n\n    GET / HTTP/1.1\n    Host: localhost\n\n\nCustom default scheme\n---------------------\n\nYou can use the ``--default-scheme <URL_SCHEME>`` option to create\nshortcuts for other protocols than HTTP:\n\n.. code-block:: bash\n\n    $ alias https='http --default-scheme=https'\n\n\nRequest items\n=============\n\nThere are a few different *request item* types that provide a\nconvenient mechanism for specifying HTTP headers, simple JSON and\nform data, files, and URL parameters.\n\nThey are key/value pairs specified after the URL. All have in\ncommon that they become part of the actual request that is sent and that\ntheir type is distinguished only by the separator used:\n``:``, ``=``, ``:=``, ``==``, ``@``, ``=@``, and ``:=@``. The ones with an\n``@`` expect a file path as value.\n\n+-----------------------+-----------------------------------------------------+\n| Item Type             | Description                                         |\n+=======================+=====================================================+\n| HTTP Headers          | Arbitrary HTTP header, e.g. ``X-API-Token:123``.    |\n| ``Name:Value``        |                                                     |\n+-----------------------+-----------------------------------------------------+\n| URL parameters        | Appends the given name/value pair as a query        |\n| ``name==value``       | string parameter to the URL.                        |\n|                       | The ``==`` separator is used.                       |\n+-----------------------+-----------------------------------------------------+\n| Data Fields           | Request data fields to be serialized as a JSON      |\n| ``field=value``,      | object (default), or to be form-encoded             |\n| ``field=@file.txt``   | (``--form, -f``).                                   |\n+-----------------------+-----------------------------------------------------+\n| Raw JSON fields       | Useful when sending JSON and one or                 |\n| ``field:=json``,      | more fields need to be a ``Boolean``, ``Number``,   |\n| ``field:=@file.json`` | nested ``Object``, or an ``Array``,  e.g.,          |\n|                       | ``meals:='[\"ham\",\"spam\"]'`` or ``pies:=[1,2,3]``    |\n|                       | (note the quotes).                                  |\n+-----------------------+-----------------------------------------------------+\n| Form File Fields      | Only available with ``--form, -f``.                 |\n| ``field@/dir/file``   | For example ``screenshot@~/Pictures/img.png``.      |\n|                       | The presence of a file field results                |\n|                       | in a ``multipart/form-data`` request.               |\n+-----------------------+-----------------------------------------------------+\n\n\nNote that data fields aren't the only way to specify request data:\n`Redirected input`_ is a mechanism for passing arbitrary data request\nrequest.\n\n\nEscaping rules\n--------------\n\nYou can use ``\\`` to escape characters that shouldn't be used as separators\n(or parts thereof). For instance, ``foo\\==bar`` will become a data key/value\npair (``foo=`` and ``bar``) instead of a URL parameter.\n\nOften it is necessary to quote the values, e.g. ``foo='bar baz'``.\n\nIf any of the field names or headers starts with a minus\n(e.g., ``-fieldname``), you need to place all such items after the special\ntoken ``--`` to prevent confusion with ``--arguments``:\n\n.. code-block:: bash\n\n    $ http httpbin.org/post  --  -name-starting-with-dash=foo -Unusual-Header:bar\n\n.. code-block:: http\n\n    POST /post HTTP/1.1\n    -Unusual-Header: bar\n    Content-Type: application/json\n\n    {\n        \"-name-starting-with-dash\": \"value\"\n    }\n\n\n\nJSON\n====\n\nJSON is the *lingua franca* of modern web services and it is also the\n**implicit content type** HTTPie by default uses.\n\n\nSimple example:\n\n.. code-block:: bash\n\n    $ http PUT example.org name=John email=john@example.org\n\n.. code-block:: http\n\n    PUT / HTTP/1.1\n    Accept: application/json, */*\n    Accept-Encoding: gzip, deflate\n    Content-Type: application/json\n    Host: example.org\n\n    {\n        \"name\": \"John\",\n        \"email\": \"john@example.org\"\n    }\n\n\nDefault behaviour\n-----------------\n\n\nIf your command includes some data `request items`_, they are serialized as a JSON\nobject by default. HTTPie also automatically sets the following headers,\nboth of which can be overwritten:\n\n================    =======================================\n``Content-Type``    ``application/json``\n``Accept``          ``application/json, */*``\n================    =======================================\n\n\nExplicit JSON\n-------------\n\nYou can use ``--json, -j`` to explicitly set ``Accept``\nto ``application/json`` regardless of whether you are sending data\n(it's a shortcut for setting the header via the usual header notation:\n``http url Accept:'application/json, */*'``). Additionally,\nHTTPie will try to detect JSON responses even when the\n``Content-Type`` is incorrectly ``text/plain`` or unknown.\n\n\n\nNon-string JSON fields\n----------------------\n\nNon-string fields use the ``:=`` separator, which allows you to embed raw JSON\ninto the resulting object. Text and raw JSON files can also be embedded into\nfields using ``=@`` and ``:=@``:\n\n.. code-block:: bash\n\n    $ http PUT api.example.com/person/1 \\\n        name=John \\\n        age:=29 married:=false hobbies:='[\"http\", \"pies\"]' \\  # Raw JSON\n        description=@about-john.txt \\   # Embed text file\n        bookmarks:=@bookmarks.json      # Embed JSON file\n\n\n.. code-block:: http\n\n    PUT /person/1 HTTP/1.1\n    Accept: application/json, */*\n    Content-Type: application/json\n    Host: api.example.com\n\n    {\n        \"age\": 29,\n        \"hobbies\": [\n            \"http\",\n            \"pies\"\n        ],\n        \"description\": \"John is a nice guy who likes pies.\",\n        \"married\": false,\n        \"name\": \"John\",\n        \"bookmarks\": {\n            \"HTTPie\": \"http://httpie.org\",\n        }\n    }\n\n\nPlease note that with this syntax the command gets unwieldy when sending\ncomplex data. In that case it's always better to use `redirected input`_:\n\n.. code-block:: bash\n\n    $ http POST api.example.com/person/1 < person.json\n\n\nForms\n=====\n\nSubmitting forms is very similar to sending `JSON`_ requests. Often the only\ndifference is in adding the ``--form, -f`` option, which ensures that\ndata fields are serialized as, and ``Content-Type`` is set to,\n``application/x-www-form-urlencoded; charset=utf-8``. It is possible to make\nform data the implicit content type instead of JSON\nvia the `config`_ file.\n\n\nRegular forms\n-------------\n\n.. code-block:: bash\n\n    $ http --form POST api.example.org/person/1 name='John Smith'\n\n\n.. code-block:: http\n\n    POST /person/1 HTTP/1.1\n    Content-Type: application/x-www-form-urlencoded; charset=utf-8\n\n    name=John+Smith\n\n\nFile upload forms\n-----------------\n\nIf one or more file fields is present, the serialization and content type is\n``multipart/form-data``:\n\n.. code-block:: bash\n\n    $ http -f POST example.com/jobs name='John Smith' cv@~/Documents/cv.pdf\n\n\nThe request above is the same as if the following HTML form were\nsubmitted:\n\n.. code-block:: html\n\n    <form enctype=\"multipart/form-data\" method=\"post\" action=\"http://example.com/jobs\">\n        <input type=\"text\" name=\"name\" />\n        <input type=\"file\" name=\"cv\" />\n    </form>\n\nNote that ``@`` is used to simulate a file upload form field, whereas\n``=@`` just embeds the file content as a regular text field value.\n\n\nHTTP headers\n============\n\nTo set custom headers you can use the ``Header:Value`` notation:\n\n.. code-block:: bash\n\n    $ http example.org  User-Agent:Bacon/1.0  'Cookie:valued-visitor=yes;foo=bar'  \\\n        X-Foo:Bar  Referer:http://httpie.org/\n\n\n.. code-block:: http\n\n    GET / HTTP/1.1\n    Accept: */*\n    Accept-Encoding: gzip, deflate\n    Cookie: valued-visitor=yes;foo=bar\n    Host: example.org\n    Referer: http://httpie.org/\n    User-Agent: Bacon/1.0\n    X-Foo: Bar\n\n\nDefault request headers\n-----------------------\n\nThere are a couple of default headers that HTTPie sets:\n\n.. code-block:: http\n\n    GET / HTTP/1.1\n    Accept: */*\n    Accept-Encoding: gzip, deflate\n    User-Agent: HTTPie/<version>\n    Host: <taken-from-URL>\n\n\n\nAny of those\u2014except for ``Host``\u2014can be overwritten and some of them unset.\n\n\n\nEmpty headers and header un-setting\n-----------------------------------\n\nTo unset a previously specified header\n(such a one of the default headers), use ``Header:``:\n\n\n.. code-block:: bash\n\n    $ http httpbin.org/headers Accept: User-Agent:\n\n\nTo send a header with an empty value, use ``Header;``:\n\n\n.. code-block:: bash\n\n    $ http httpbin.org/headers 'Header;'\n\n\nAuthentication\n==============\n\nThe currently supported authentication schemes are Basic and Digest\n(see `auth plugins`_ for more). There are two flags that control authentication:\n\n===================     ======================================================\n``--auth, -a``          Pass a ``username:password`` pair as\n                        the argument. Or, if you only specify a username\n                        (``-a username``), you'll be prompted for\n                        the password before the request is sent.\n                        To send an empty password, pass ``username:``.\n                        The ``username:password@hostname`` URL syntax is\n                        supported as well (but credentials passed via ``-a``\n                        have higher priority).\n\n``--auth-type, -A``     Specify the auth mechanism. Possible values are\n                        ``basic`` and ``digest``. The default value is\n                        ``basic`` so it can often be omitted.\n===================     ======================================================\n\n\n\nBasic auth\n----------\n\n\n.. code-block:: bash\n\n    $ http -a username:password example.org\n\n\nDigest auth\n-----------\n\n\n.. code-block:: bash\n\n    $ http -A digest -a username:password example.org\n\n\nPassword prompt\n---------------\n\n.. code-block:: bash\n\n    $ http -a username example.org\n\n\n``.netrc``\n----------\n\nAuthorization information from your ``~/.netrc`` file is honored as well:\n\n.. code-block:: bash\n\n    $ cat ~/.netrc\n    machine httpbin.org\n    login httpie\n    password test\n\n    $ http httpbin.org/basic-auth/httpie/test\n    HTTP/1.1 200 OK\n    [...]\n\n\nAuth plugins\n------------\n\nAdditional authentication mechanism can be installed as plugins.\nThey can be found on the `Python Package Index <https://pypi.python.org/pypi?%3Aaction=search&term=httpie&submit=search>`_.\nHere's a few picks:\n\n* `httpie-api-auth <https://github.com/pd/httpie-api-auth>`_: ApiAuth\n* `httpie-aws-auth <https://github.com/httpie/httpie-aws-auth>`_: AWS / Amazon S3\n* `httpie-edgegrid <https://github.com/akamai-open/httpie-edgegrid>`_: EdgeGrid\n* `httpie-hmac-auth <https://github.com/guardian/httpie-hmac-auth>`_: HMAC\n* `httpie-jwt-auth <https://github.com/teracyhq/httpie-jwt-auth>`_: JWTAuth (JSON Web Tokens)\n* `httpie-negotiate <https://github.com/ndzou/httpie-negotiate>`_: SPNEGO (GSS Negotiate)\n* `httpie-ntlm <https://github.com/httpie/httpie-ntlm>`_: NTLM (NT LAN Manager)\n* `httpie-oauth <https://github.com/httpie/httpie-oauth>`_: OAuth\n* `requests-hawk <https://github.com/mozilla-services/requests-hawk>`_: Hawk\n\n\n\n\nHTTP redirects\n==============\n\nBy default, HTTP redirects are not followed and only the first\nresponse is shown:\n\n\n.. code-block:: bash\n\n    $ http httpbin.org/redirect/3\n\n\nFollow ``Location``\n-------------------\n\nTo instruct HTTPie to follow the ``Location`` header of ``30x`` responses\nand show the final response instead, use the ``--follow, -F`` option:\n\n\n.. code-block:: bash\n\n    $ http --follow httpbin.org/redirect/3\n\n\nShowing intermediary redirect responses\n---------------------------------------\n\nIf you additionally wish to see the intermediary requests/responses,\nthen use the ``--all`` option as well:\n\n\n.. code-block:: bash\n\n    $ http --follow --all httpbin.org/redirect/3\n\n\n\nLimiting maximum redirects followed\n-----------------------------------\n\nTo change the default limit of maximum ``30`` redirects, use the\n``--max-redirects=<limit>`` option:\n\n\n.. code-block:: bash\n\n    $ http --follow --all --max-redirects=5 httpbin.org/redirect/3\n\n\nProxies\n=======\n\nYou can specify proxies to be used through the ``--proxy`` argument for each\nprotocol (which is included in the value in case of redirects across protocols):\n\n.. code-block:: bash\n\n    $ http --proxy=http:http://10.10.1.10:3128 --proxy=https:https://10.10.1.10:1080 example.org\n\n\nWith Basic authentication:\n\n.. code-block:: bash\n\n    $ http --proxy=http:http://user:pass@10.10.1.10:3128 example.org\n\n\nEnvironment variables\n---------------------\n\nYou can also configure proxies by environment variables ``HTTP_PROXY`` and\n``HTTPS_PROXY``, and the underlying Requests library will pick them up as well.\nIf you want to disable proxies configured through the environment variables for\ncertain hosts, you can specify them in ``NO_PROXY``.\n\nIn your ``~/.bash_profile``:\n\n.. code-block:: bash\n\n export HTTP_PROXY=http://10.10.1.10:3128\n export HTTPS_PROXY=https://10.10.1.10:1080\n export NO_PROXY=localhost,example.com\n\n\nSOCKS\n-----\n\nTo enable SOCKS proxy support please install ``requests[socks]`` using ``pip``:\n\n\n.. code-block:: bash\n\n    $ pip install -U requests[socks]\n\nUsage is the same as for other types of `proxies`_:\n\n.. code-block:: bash\n\n    $ http --proxy=http:socks5://user:pass@host:port --proxy=https:socks5://user:pass@host:port example.org\n\n\nHTTPS\n=====\n\n\nServer SSL certificate verification\n-----------------------------------\n\nTo skip the host's SSL certificate verification, you can pass ``--verify=no``\n(default is ``yes``):\n\n.. code-block:: bash\n\n    $ http --verify=no https://example.org\n\n\nCustom CA bundle\n----------------\n\nYou can also use ``--verify=<CA_BUNDLE_PATH>`` to set a custom CA bundle path:\n\n.. code-block:: bash\n\n    $ http --verify=/ssl/custom_ca_bundle https://example.org\n\n\n\nClient side SSL certificate\n---------------------------\nTo use a client side certificate for the SSL communication, you can pass\nthe path of the cert file with ``--cert``:\n\n.. code-block:: bash\n\n    $ http --cert=client.pem https://example.org\n\n\nIf the private key is not contained in the cert file you may pass the\npath of the key file with ``--cert-key``:\n\n.. code-block:: bash\n\n    $ http --cert=client.crt --cert-key=client.key https://example.org\n\n\nSSL version\n-----------\n\nUse the ``--ssl=<PROTOCOL>`` to specify the desired protocol version to use.\nThis will default to SSL v2.3 which will negotiate the highest protocol that both\nthe server and your installation of OpenSSL support. The available protocols\nare ``ssl2.3``, ``ssl3``, ``tls1``, ``tls1.1``, ``tls1.2``. (The actually\navailable set of protocols may vary depending on your OpenSSL installation.)\n\n.. code-block:: bash\n\n    # Specify the vulnerable SSL v3 protocol to talk to an outdated server:\n    $ http --ssl=ssl3 https://vulnerable.example.org\n\n\nSNI (Server Name Indication)\n----------------------------\n\nIf you use HTTPie with `Python version`_ lower than 2.7.9\n(can be verified with ``http --debug``) and need to talk to servers that\nuse SNI (Server Name Indication) you need to install some additional\ndependencies:\n\n.. code-block:: bash\n\n    $ pip install --upgrade requests[security]\n\n\nYou can use the following command to test SNI support:\n\n.. code-block:: bash\n\n    $ http https://sni.velox.ch\n\n\nOutput options\n==============\n\nBy default, HTTPie only outputs the final response and the whole response\nmessage is printed (headers as well as the body). You can control what should\nbe printed via several options:\n\n=================   =====================================================\n``--headers, -h``   Only the response headers are printed.\n``--body, -b``      Only the response body is printed.\n``--verbose, -v``   Print the whole HTTP exchange (request and response).\n                    This option also enables ``--all`` (see bellow).\n``--print, -p``     Selects parts of the HTTP exchange.\n=================   =====================================================\n\n``--verbose`` can often be useful for debugging the request and generating\ndocumentation examples:\n\n.. code-block:: bash\n\n    $ http --verbose PUT httpbin.org/put hello=world\n    PUT /put HTTP/1.1\n    Accept: application/json, */*\n    Accept-Encoding: gzip, deflate\n    Content-Type: application/json\n    Host: httpbin.org\n    User-Agent: HTTPie/0.2.7dev\n\n    {\n        \"hello\": \"world\"\n    }\n\n\n    HTTP/1.1 200 OK\n    Connection: keep-alive\n    Content-Length: 477\n    Content-Type: application/json\n    Date: Sun, 05 Aug 2012 00:25:23 GMT\n    Server: gunicorn/0.13.4\n\n    {\n        [\u2026]\n    }\n\n\nWhat parts of the HTTP exchange should be printed\n-------------------------------------------------\n\nAll the other `output options`_ are under the hood just shortcuts for\nthe more powerful ``--print, -p``. It accepts a string of characters each\nof which represents a specific part of the HTTP exchange:\n\n==========  ==================\nCharacter   Stands for\n==========  ==================\n``H``       request headers\n``B``       request body\n``h``       response headers\n``b``       response body\n==========  ==================\n\nPrint request and response headers:\n\n.. code-block:: bash\n\n    $ http --print=Hh PUT httpbin.org/put hello=world\n\n\nViewing intermediary requests/responses\n---------------------------------------\n\nTo see all the HTTP communication, i.e. the final request/response as\nwell as any possible  intermediary requests/responses, use the ``--all``\noption. The intermediary HTTP communication include followed redirects\n(with ``--follow``), the first unauthorized request when HTTP digest\nauthentication is used (``--auth=digest``), etc.\n\n.. code-block:: bash\n\n    # Include all responses that lead to the final one:\n    $ http --all --follow httpbin.org/redirect/3\n\n\nThe intermediary requests/response are by default formatted according to\n``--print, -p`` (and its shortcuts described above). If you'd like to change\nthat, use the ``--history-print, -P`` option. It takes the same\narguments as ``--print, -p`` but applies to the intermediary requests only.\n\n\n.. code-block:: bash\n\n    # Print the intermediary requests/responses differently than the final one:\n    $ http -A digest -a foo:bar --all -p Hh -P H httpbin.org/digest-auth/auth/foo/bar\n\n\nConditional body download\n-------------------------\n\nAs an optimization, the response body is downloaded from the server\nonly if it's part of the output. This is similar to performing a ``HEAD``\nrequest, except that it applies to any HTTP method you use.\n\nLet's say that there is an API that returns the whole resource when it is\nupdated, but you are only interested in the response headers to see the\nstatus code after an update:\n\n.. code-block:: bash\n\n    $ http --headers PATCH example.org/Really-Huge-Resource name='New Name'\n\n\nSince we are only printing the HTTP headers here, the connection to the server\nis closed as soon as all the response headers have been received.\nTherefore, bandwidth and time isn't wasted downloading the body\nwhich you don't care about. The response headers are downloaded always,\neven if they are not part of the output\n\n\nRedirected Input\n================\n\nThe universal method for passing request data is through redirected ``stdin``\n(standard input)\u2014piping. Such data is buffered and then with no further\nprocessing used as the request body. There are multiple useful ways to use\npiping:\n\nRedirect from a file:\n\n.. code-block:: bash\n\n    $ http PUT example.com/person/1 X-API-Token:123 < person.json\n\n\nOr the output of another program:\n\n.. code-block:: bash\n\n    $ grep '401 Unauthorized' /var/log/httpd/error_log | http POST example.org/intruders\n\n\nYou can use ``echo`` for simple data:\n\n.. code-block:: bash\n\n    $ echo '{\"name\": \"John\"}' | http PATCH example.com/person/1 X-API-Token:123\n\n\nYou can even pipe web services together using HTTPie:\n\n.. code-block:: bash\n\n    $ http GET https://api.github.com/repos/jkbrzt/httpie | http POST httpbin.org/post\n\n\nYou can use ``cat`` to enter multiline data on the terminal:\n\n.. code-block:: bash\n\n    $ cat | http POST example.com\n    <paste>\n    ^D\n\n\n.. code-block:: bash\n\n    $ cat | http POST example.com/todos Content-Type:text/plain\n    - buy milk\n    - call parents\n    ^D\n\n\nOn OS X, you can send the contents of the clipboard with ``pbpaste``:\n\n.. code-block:: bash\n\n    $ pbpaste | http PUT example.com\n\n\nPassing data through ``stdin`` cannot be combined with data fields specified\non the command line:\n\n\n.. code-block:: bash\n\n    $ echo 'data' | http POST example.org more=data   # This is invalid\n\n\nTo prevent HTTPie from reading ``stdin`` data you can use the\n``--ignore-stdin`` option.\n\n\nRequest data from a filename\n----------------------------\n\nAn alternative to redirected ``stdin`` is specifying a filename (as\n``@/path/to/file``) whose content is used as if it came from ``stdin``.\n\nIt has the advantage that the ``Content-Type``\nheader is automatically set to the appropriate value based on the\nfilename extension. For example, the following request sends the\nverbatim contents of that XML file with ``Content-Type: application/xml``:\n\n.. code-block:: bash\n\n    $ http PUT httpbin.org/put @/data/file.xml\n\n\nTerminal output\n===============\n\nHTTPie does several things by default in order to make its terminal output\neasy to read.\n\n\nColors and formatting\n---------------------\n\nSyntax highlighting is applied to HTTP headers and bodies (where it makes\nsense). You can choose your preferred color scheme via the ``--style`` option\nif you don't like the default one (see ``$ http --help`` for the possible\nvalues).\n\nAlso, the following formatting is applied:\n\n* HTTP headers are sorted by name.\n* JSON data is indented, sorted by keys, and unicode escapes are converted\n  to the characters they represent.\n\nOne of these options can be used to control output processing:\n\n====================   ========================================================\n``--pretty=all``       Apply both colors and formatting.\n                       Default for terminal output.\n``--pretty=colors``    Apply colors.\n``--pretty=format``    Apply formatting.\n``--pretty=none``      Disables output processing.\n                       Default for redirected output.\n====================   ========================================================\n\nBinary data\n-----------\n\nBinary data is suppressed for terminal output, which makes it safe to perform\nrequests to URLs that send back binary data. Binary data is suppressed also in\nredirected, but prettified output. The connection is closed as soon as we know\nthat the response body is binary,\n\n.. code-block:: bash\n\n    $ http example.org/Movie.mov\n\n\nYou will nearly instantly see something like this:\n\n.. code-block:: http\n\n    HTTP/1.1 200 OK\n    Accept-Ranges: bytes\n    Content-Encoding: gzip\n    Content-Type: video/quicktime\n    Transfer-Encoding: chunked\n\n    +-----------------------------------------+\n    | NOTE: binary data not shown in terminal |\n    +-----------------------------------------+\n\n\nRedirected output\n=================\n\nHTTPie uses a different set of defaults for redirected output than for\n`terminal output`_. The differences being:\n\n* Formatting and colors aren't applied (unless ``--pretty`` is specified).\n* Only the response body is printed (unless one of the `output options`_ is set).\n* Also, binary data isn't suppressed.\n\nThe reason is to make piping HTTPie's output to another programs and\ndownloading files work with no extra flags. Most of the time, only the raw\nresponse body is of an interest when the output is redirected.\n\nDownload a file:\n\n.. code-block:: bash\n\n    $ http example.org/Movie.mov > Movie.mov\n\n\nDownload an image of Octocat, resize it using ImageMagick, upload it elsewhere:\n\n.. code-block:: bash\n\n    $ http octodex.github.com/images/original.jpg | convert - -resize 25% -  | http example.org/Octocats\n\n\nForce colorizing and formatting, and show both the request and the response in\n``less`` pager:\n\n.. code-block:: bash\n\n    $ http --pretty=all --verbose example.org | less -R\n\n\nThe ``-R`` flag tells ``less`` to interpret color escape sequences included\nHTTPie`s output.\n\nYou can create a shortcut for invoking HTTPie with colorized and paged output\nby adding the following to your ``~/.bash_profile``:\n\n.. code-block:: bash\n\n    function httpless {\n        # `httpless example.org'\n        http --pretty=all --print=hb \"$@\" | less -R;\n    }\n\n\nDownload mode\n=============\n\nHTTPie features a download mode in which it acts similarly to ``wget``.\n\nWhen enabled using the ``--download, -d`` flag, response headers are printed to\nthe terminal (``stderr``), and a progress bar is shown while the response body\nis being saved to a file.\n\n.. code-block:: bash\n\n    $ http --download https://github.com/jkbrzt/httpie/archive/master.tar.gz\n\n.. code-block:: http\n\n    HTTP/1.1 200 OK\n    Content-Disposition: attachment; filename=httpie-master.tar.gz\n    Content-Length: 257336\n    Content-Type: application/x-gzip\n\n    Downloading 251.30 kB to \"httpie-master.tar.gz\"\n    Done. 251.30 kB in 2.73862s (91.76 kB/s)\n\n\nDownloaded file name\n--------------------\n\nIf not provided via ``--output, -o``, the output filename will be determined\nfrom ``Content-Disposition`` (if available), or from the URL and\n``Content-Type``. If the guessed filename already exists, HTTPie adds a unique\nsuffix to it.\n\n\nPiping while downloading\n------------------------\n\nYou can also redirect the response body to another program while the response\nheaders and progress are still shown in the terminal:\n\n.. code-block:: bash\n\n    $ http -d https://github.com/jkbrzt/httpie/archive/master.tar.gz |  tar zxf -\n\n\n\nResuming downloads\n------------------\n\nIf ``--output, -o`` is specified, you can resume a partial download using the\n``--continue, -c`` option. This only works with servers that support\n``Range`` requests and ``206 Partial Content`` responses. If the server doesn't\nsupport that, the whole file will simply be downloaded:\n\n.. code-block:: bash\n\n    $ http -dco file.zip example.org/file\n\nOther notes\n-----------\n\n* The ``--download`` option only changes how the response body is treated.\n* You can still set custom headers, use sessions, ``--verbose, -v``, etc.\n* ``--download`` always implies ``--follow`` (redirects are followed).\n* HTTPie exits with status code ``1`` (error) if the body hasn't been fully\n  downloaded.\n* ``Accept-Encoding`` cannot be set with ``--download``.\n\n\nStreamed responses\n==================\n\nResponses are downloaded and printed in chunks which allows for streaming\nand large file downloads without using too much memory. However, when\n`colors and formatting`_ is applied, the whole response is buffered and only\nthen processed at once.\n\n\nDisabling buffering\n-------------------\n\nYou can use the ``--stream, -S`` flag to make two things happen:\n\n1. The output is flushed in much smaller chunks without any buffering,\n   which makes HTTPie behave kind of like ``tail -f`` for URLs.\n\n2. Streaming becomes enabled even when the output is prettified: It will be\n   applied to each line of the response and flushed immediately. This makes\n   it possible to have a nice output for long-lived requests, such as one\n   to the Twitter streaming API.\n\n\nExamples use cases\n------------------\n\nPrettified streamed response:\n\n.. code-block:: bash\n\n    $ http --stream -f -a YOUR-TWITTER-NAME https://stream.twitter.com/1/statuses/filter.json track='Justin Bieber'\n\n\nStreamed output by small chunks al\u00e1 ``tail -f``:\n\n.. code-block:: bash\n\n    # Send each new tweet (JSON object) mentioning \"Apple\" to another\n    # server as soon as it arrives from the Twitter streaming API:\n    $ http --stream -f -a YOUR-TWITTER-NAME https://stream.twitter.com/1/statuses/filter.json track=Apple \\\n    | while read tweet; do echo \"$tweet\" | http POST example.org/tweets ; done\n\nSessions\n========\n\nBy default, every request HTTPie makes is completely independent of any\nprevious ones to the same host.\n\n\nHowever, HTTPie also supports persistent\nsessions via the ``--session=SESSION_NAME_OR_PATH`` option. In a session,\ncustom headers\u2014except for the ones starting with ``Content-`` or ``If-``\u2014,\nauthorization, and cookies\n(manually specified or sent by the server) persist between requests\nto the same host.\n\n\n.. code-block:: bash\n\n    # Create a new session\n    $ http --session=/tmp/session.json example.org API-Token:123\n\n    # Re-use an existing session \u2014 API-Token will be set:\n    $ http --session=/tmp/session.json example.org\n\n\n\nAll session data, including credentials, cookie data,\nand custom headers are stored in plain text.\nThat means session files can also be created and edited manually in a text\neditor\u2014they are regular JSON.\n\nNamed sessions\n--------------\n\n\nYou can create one or more named session per host. For example, this is how\nyou can create a new session named ``user1`` for ``example.org``:\n\n.. code-block:: bash\n\n    $ http --session=user1 -a user1:password example.org X-Foo:Bar\n\nFrom now onw, you can refer to the session by its name. When you choose to\nuse the session again, any the previously used authorization and HTTP headers\nwill automatically be set:\n\n.. code-block:: bash\n\n    $ http --session=user1 example.org\n\nTo create or reuse a different session, simple specify a different name:\n\n.. code-block:: bash\n\n    $ http --session=user2 -a user2:password example.org X-Bar:Foo\n\nNamed sessions' data is stored in JSON files in the directory\n``~/.httpie/sessions/<host>/<name>.json``\n(``%APPDATA%\\httpie\\sessions\\<host>\\<name>.json`` on Windows).\n\n\nAnonymous sessions\n------------------\n\nInstead of a name, you can also directly specify a path to a session file. This\nallows for sessions to be re-used across multiple hosts:\n\n.. code-block:: bash\n\n    $ http --session=/tmp/session.json example.org\n    $ http --session=/tmp/session.json admin.example.org\n    $ http --session=~/.httpie/sessions/another.example.org/test.json example.org\n    $ http --session-read-only=/tmp/session.json example.org\n\n\nReadonly session\n----------------\n\nTo use an existing session file without updating it from the request/response\nexchange once it is created, specify the session name via\n``--session-read-only=SESSION_NAME_OR_PATH`` instead.\n\n\nConfig\n======\n\nHTTPie uses a simple JSON config file.\n\n\n\nConfig file location\n--------------------\n\n\nThe default location of the configuration file is ``~/.httpie/config.json``\n(or ``%APPDATA%\\httpie\\config.json`` on Windows). The config directory\nlocation can be changed by setting the ``HTTPIE_CONFIG_DIR``\nenvironment variable. To view the exact location run ``http --debug``.\n\nConfigurable options\n--------------------\n\nThe JSON file contains an object with the following keys:\n\n\n``default_options``\n~~~~~~~~~~~~~~~~~~~\n\n\nAn ``Array`` (by default empty) of default options that should be applied to\nevery invocation of HTTPie.\n\nFor instance, you can use this option to change the default style and output\noptions: ``\"default_options\": [\"--style=fruity\", \"--body\"]`` Another useful\ndefault option could be ``\"--session=default\"`` to make HTTPie always\nuse `sessions`_ (one named ``default`` will automatically be used).\nOr you could change the implicit request content type from JSON to form by\nadding ``--form`` to the list.\n\n\n``__meta__``\n~~~~~~~~~~~~\n\nHTTPie automatically stores some of its metadata here. Please do not change.\n\n\n\nUn-setting previously specified options\n---------------------------------------\n\nDefault options from the config file, or specified any other way,\ncan be unset for a particular invocation via ``--no-OPTION`` arguments passed\non the command line (e.g., ``--no-style`` or ``--no-session``).\n\n\n\nScripting\n=========\n\nWhen using HTTPie from shell scripts, it can be handy to set the\n``--check-status`` flag. It instructs HTTPie to exit with an error if the\nHTTP status is one of ``3xx``, ``4xx``, or ``5xx``. The exit status will\nbe ``3`` (unless ``--follow`` is set), ``4``, or ``5``,\nrespectively.\n\n.. code-block:: bash\n\n    #!/bin/bash\n\n    if http --check-status --ignore-stdin --timeout=2.5 HEAD example.org/health &> /dev/null; then\n        echo 'OK!'\n    else\n        case $? in\n            2) echo 'Request timed out!' ;;\n            3) echo 'Unexpected HTTP 3xx Redirection!' ;;\n            4) echo 'HTTP 4xx Client Error!' ;;\n            5) echo 'HTTP 5xx Server Error!' ;;\n            6) echo 'Exceeded --max-redirects=<n> redirects!' ;;\n            *) echo 'Other Error!' ;;\n        esac\n    fi\n\n\nBest practices\n--------------\n\nThe default behaviour of automatically reading ``stdin`` is typically not\ndesirable during non-interactive invocations. You most likely want\nuse the ``--ignore-stdin`` option to disable it.\n\nIt is a common gotcha that without this option HTTPie seemingly hangs.\nWhat happens is that when HTTPie is invoked for example from a cron job,\n``stdin`` is not connected to a terminal.\nTherefore, rules for `redirected input`_ apply, i.e., HTTPie starts to read it\nexpecting that the request body will be passed through.\nAnd since there's no data nor ``EOF``, it will be stuck. So unless you're\npiping some data to HTTPie, this flag should be used in scripts.\n\nAlso, it's might be good to override the default ``30`` second ``--timeout`` to\nsomething that suits you.\n\n\n\nMeta\n====\n\nInterface design\n----------------\n\nThe syntax of the command arguments closely corresponds to the actual HTTP\nrequests sent over the wire. It has the advantage  that it's easy to remember\nand read. It is often possible to translate an HTTP request to an HTTPie\nargument list just by inlining the request elements. For example, compare this\nHTTP request:\n\n.. code-block:: http\n\n    POST /collection HTTP/1.1\n    X-API-Key: 123\n    User-Agent: Bacon/1.0\n    Content-Type: application/x-www-form-urlencoded\n\n    name=value&name2=value2\n\n\nwith the HTTPie command that sends it:\n\n.. code-block:: bash\n\n    $ http -f POST example.org/collection \\\n      X-API-Key:123 \\\n      User-Agent:Bacon/1.0 \\\n      name=value \\\n      name2=value2\n\n\nNotice that both the order of elements and the syntax is very similar,\nand that only a small portion of the command is used to control HTTPie and\ndoesn't directly correspond to any part of the request (here it's only ``-f``\nasking HTTPie to send a form request).\n\nThe two modes, ``--pretty=all`` (default for terminal) and ``--pretty=none``\n(default for redirected output), allow for both user-friendly interactive use\nand usage from scripts, where HTTPie serves as a generic HTTP client.\n\nAs HTTPie is still under heavy development, the existing command line\nsyntax and some of the ``--OPTIONS`` may change slightly before\nHTTPie reaches its final version ``1.0``. All changes are recorded in the\n`change log`_.\n\n\n\nUser support\n------------\n\nPlease use the following support channels:\n\n* `GitHub issues <https://github.com/jkbr/httpie/issues>`_\n  for bug reports and feature requests.\n* `Our Gitter chat room <https://gitter.im/jkbrzt/httpie>`_\n  to ask questions, discuss features, and for general discussion.\n* `StackOverflow <https://stackoverflow.com>`_\n  to ask questions (please make sure to use the\n  `httpie <http://stackoverflow.com/questions/tagged/httpie>`_ tag).\n* Tweet directly to `@clihttp <https://twitter.com/clihttp>`_.\n* You can also tweet directly to `@jkbrzt`_.\n\n\nRelated projects\n----------------\n\nDependencies\n~~~~~~~~~~~~\n\nUnder the hood, HTTPie uses these two amazing libraries:\n\n* `Requests <http://python-requests.org>`_\n  \u2014 Python HTTP library for humans\n* `Pygments <http://pygments.org/>`_\n  \u2014 Python syntax highlighter\n\n\nHTTPie friends\n~~~~~~~~~~~~~~\n\nHTTPie plays exceptionally well with the following tools:\n\n* `jq <https://stedolan.github.io/jq/>`_\n  \u2014 CLI JSON processor that\n  works great in conjunction with HTTPie\n* `http-prompt <https://github.com/eliangcs/http-prompt>`_\n  \u2014  interactive shell for HTTPie featuring autocomplete\n  and command syntax highlighting\n\n\nContributing\n------------\n\nSee `CONTRIBUTING.rst <https://github.com/jkbrzt/httpie/blob/master/CONTRIBUTING.rst>`_.\n\n\nChange log\n----------\n\nSee `CHANGELOG <https://github.com/jkbrzt/httpie/blob/master/CHANGELOG.rst>`_.\n\n\nArtwork\n-------\n\nSee `claudiatd/httpie-artwork`_\n\n\nLicence\n-------\n\nBSD-3-Clause: `LICENSE <https://github.com/jkbrzt/httpie/blob/master/LICENSE>`_.\n\n\n\nAuthors\n-------\n\n`Jakub Roztocil`_  (`@jkbrzt`_) created HTTPie and `these fine people`_\nhave contributed.\n\n\n.. _pip: http://www.pip-installer.org/en/latest/index.html\n.. _Github API: http://developer.github.com/v3/issues/comments/#create-a-comment\n.. _these fine people: https://github.com/jkbrzt/httpie/contributors\n.. _Jakub Roztocil: http://roztocil.co\n.. _@jkbrzt: https://twitter.com/jkbrzt\n.. _claudiatd/httpie-artwork: https://github.com/claudiatd/httpie-artwork\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/httpie.svg?style=flat-square&label=latest%20stable%20version\n    :target: https://pypi.python.org/pypi/httpie\n    :alt: Latest version released on PyPi\n\n.. |coverage| image:: https://img.shields.io/coveralls/jkbrzt/httpie/master.svg?style=flat-square&label=coverage\n    :target: https://coveralls.io/r/jkbrzt/httpie?branch=master\n    :alt: Test coverage\n\n.. |unix_build| image:: https://img.shields.io/travis/jkbrzt/httpie/master.svg?style=flat-square&label=unix%20build\n    :target: http://travis-ci.org/jkbrzt/httpie\n    :alt: Build status of the master branch on Mac/Linux\n\n.. |windows_build|  image:: https://img.shields.io/appveyor/ci/jkbrzt/httpie.svg?style=flat-square&label=windows%20build\n    :target: https://ci.appveyor.com/project/jkbrzt/httpie\n    :alt: Build status of the master branch on Windows\n\n.. |gitter| image:: https://badges.gitter.im/jkbrzt/httpie.svg\n    :target: https://gitter.im/jkbrzt/httpie\n    :alt: Chat on Gitter", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/jkbrzt/httpie", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://httpie.org/", "keywords": null, "license": "bsd", "maintainer": null, "maintainer_email": null, "name": "readme-test", "package_url": "https://pypi.org/project/readme-test/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/readme-test/", "project_urls": {"Download": "https://github.com/jkbrzt/httpie", "Homepage": "http://httpie.org/"}, "release_url": "https://pypi.org/project/readme-test/8.9.1/", "requires_dist": null, "requires_python": null, "summary": "testing readme rendering on pypi", "version": "8.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>HTTPie (pronounced <em>aitch-tee-tee-pie</em>) is a command line HTTP client.\nIts goal is to make CLI interaction with web services as human-friendly\nas possible. It provides a simple <tt>http</tt> command that allows for sending\narbitrary HTTP requests using a simple and natural syntax, and displays\ncolorized output. HTTPie can be used for testing, debugging, and\ngenerally interacting with HTTP servers.</p>\n<img alt=\"HTTPie compared to cURL\" class=\"no-web align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/573efb5b70c1f0efedb273d4547c04361b839048/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6a6b62727a742f6874747069652f6d61737465722f6874747069652e706e67\" width=\"100%\">\n<p><a href=\"https://pypi.python.org/pypi/httpie\" rel=\"nofollow\"><img alt=\"Latest version released on PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/459ebc93e19e1eae7a04e28e8cf51294e4a5733e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6874747069652e7376673f7374796c653d666c61742d737175617265266c6162656c3d6c6174657374253230737461626c6525323076657273696f6e\"></a> <a href=\"http://travis-ci.org/jkbrzt/httpie\" rel=\"nofollow\"><img alt=\"Build status of the master branch on Mac/Linux\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/026bebe16cf5baedc711398dee5afcd8f02ada55/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6a6b62727a742f6874747069652f6d61737465722e7376673f7374796c653d666c61742d737175617265266c6162656c3d756e69782532306275696c64\"></a> <a href=\"https://ci.appveyor.com/project/jkbrzt/httpie\" rel=\"nofollow\"><img alt=\"Build status of the master branch on Windows\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee9ed600481d0e2b8ed5dd6532c21b54ef76d3bd/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f6a6b62727a742f6874747069652e7376673f7374796c653d666c61742d737175617265266c6162656c3d77696e646f77732532306275696c64\"></a> <a href=\"https://coveralls.io/r/jkbrzt/httpie?branch=master\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36fd1948530004d9cad31d412c8fd0505786f9a8/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6a6b62727a742f6874747069652f6d61737465722e7376673f7374796c653d666c61742d737175617265266c6162656c3d636f766572616765\"></a> <a href=\"https://gitter.im/jkbrzt/httpie\" rel=\"nofollow\"><img alt=\"Chat on Gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdff5c8b68fbfca75eed9cbdf576368f0ad0bfc1/68747470733a2f2f6261646765732e6769747465722e696d2f6a6b62727a742f6874747069652e737667\"></a></p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#main-features\" id=\"id2\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Main features</a></li>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Installation</a><ul>\n<li><a href=\"#macos\" id=\"id4\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0macOS</a></li>\n<li><a href=\"#linux\" id=\"id5\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0Linux</a></li>\n<li><a href=\"#windows-etc\" id=\"id6\" rel=\"nofollow\">2.3\u00a0\u00a0\u00a0Windows, etc.</a></li>\n<li><a href=\"#development-version\" id=\"id7\" rel=\"nofollow\">2.4\u00a0\u00a0\u00a0Development version</a></li>\n<li><a href=\"#python-version\" id=\"id8\" rel=\"nofollow\">2.5\u00a0\u00a0\u00a0Python version</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" id=\"id9\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Usage</a><ul>\n<li><a href=\"#examples\" id=\"id10\" rel=\"nofollow\">3.1\u00a0\u00a0\u00a0Examples</a></li>\n</ul>\n</li>\n<li><a href=\"#http-method\" id=\"id11\" rel=\"nofollow\">4\u00a0\u00a0\u00a0HTTP method</a></li>\n<li><a href=\"#request-url\" id=\"id12\" rel=\"nofollow\">5\u00a0\u00a0\u00a0Request URL</a><ul>\n<li><a href=\"#querystring-parameters\" id=\"id13\" rel=\"nofollow\">5.1\u00a0\u00a0\u00a0Querystring parameters</a></li>\n<li><a href=\"#url-shortcuts-for-localhost\" id=\"id14\" rel=\"nofollow\">5.2\u00a0\u00a0\u00a0URL shortcuts for <tt>localhost</tt></a></li>\n<li><a href=\"#custom-default-scheme\" id=\"id15\" rel=\"nofollow\">5.3\u00a0\u00a0\u00a0Custom default scheme</a></li>\n</ul>\n</li>\n<li><a href=\"#request-items\" id=\"id16\" rel=\"nofollow\">6\u00a0\u00a0\u00a0Request items</a><ul>\n<li><a href=\"#escaping-rules\" id=\"id17\" rel=\"nofollow\">6.1\u00a0\u00a0\u00a0Escaping rules</a></li>\n</ul>\n</li>\n<li><a href=\"#json\" id=\"id18\" rel=\"nofollow\">7\u00a0\u00a0\u00a0JSON</a><ul>\n<li><a href=\"#default-behaviour\" id=\"id19\" rel=\"nofollow\">7.1\u00a0\u00a0\u00a0Default behaviour</a></li>\n<li><a href=\"#explicit-json\" id=\"id20\" rel=\"nofollow\">7.2\u00a0\u00a0\u00a0Explicit JSON</a></li>\n<li><a href=\"#non-string-json-fields\" id=\"id21\" rel=\"nofollow\">7.3\u00a0\u00a0\u00a0Non-string JSON fields</a></li>\n</ul>\n</li>\n<li><a href=\"#forms\" id=\"id22\" rel=\"nofollow\">8\u00a0\u00a0\u00a0Forms</a><ul>\n<li><a href=\"#regular-forms\" id=\"id23\" rel=\"nofollow\">8.1\u00a0\u00a0\u00a0Regular forms</a></li>\n<li><a href=\"#file-upload-forms\" id=\"id24\" rel=\"nofollow\">8.2\u00a0\u00a0\u00a0File upload forms</a></li>\n</ul>\n</li>\n<li><a href=\"#http-headers\" id=\"id25\" rel=\"nofollow\">9\u00a0\u00a0\u00a0HTTP headers</a><ul>\n<li><a href=\"#default-request-headers\" id=\"id26\" rel=\"nofollow\">9.1\u00a0\u00a0\u00a0Default request headers</a></li>\n<li><a href=\"#empty-headers-and-header-un-setting\" id=\"id27\" rel=\"nofollow\">9.2\u00a0\u00a0\u00a0Empty headers and header un-setting</a></li>\n</ul>\n</li>\n<li><a href=\"#authentication\" id=\"id28\" rel=\"nofollow\">10\u00a0\u00a0\u00a0Authentication</a><ul>\n<li><a href=\"#basic-auth\" id=\"id29\" rel=\"nofollow\">10.1\u00a0\u00a0\u00a0Basic auth</a></li>\n<li><a href=\"#digest-auth\" id=\"id30\" rel=\"nofollow\">10.2\u00a0\u00a0\u00a0Digest auth</a></li>\n<li><a href=\"#password-prompt\" id=\"id31\" rel=\"nofollow\">10.3\u00a0\u00a0\u00a0Password prompt</a></li>\n<li><a href=\"#netrc\" id=\"id32\" rel=\"nofollow\">10.4\u00a0\u00a0\u00a0<tt>.netrc</tt></a></li>\n<li><a href=\"#auth-plugins\" id=\"id33\" rel=\"nofollow\">10.5\u00a0\u00a0\u00a0Auth plugins</a></li>\n</ul>\n</li>\n<li><a href=\"#http-redirects\" id=\"id34\" rel=\"nofollow\">11\u00a0\u00a0\u00a0HTTP redirects</a><ul>\n<li><a href=\"#follow-location\" id=\"id35\" rel=\"nofollow\">11.1\u00a0\u00a0\u00a0Follow <tt>Location</tt></a></li>\n<li><a href=\"#showing-intermediary-redirect-responses\" id=\"id36\" rel=\"nofollow\">11.2\u00a0\u00a0\u00a0Showing intermediary redirect responses</a></li>\n<li><a href=\"#limiting-maximum-redirects-followed\" id=\"id37\" rel=\"nofollow\">11.3\u00a0\u00a0\u00a0Limiting maximum redirects followed</a></li>\n</ul>\n</li>\n<li><a href=\"#proxies\" id=\"id38\" rel=\"nofollow\">12\u00a0\u00a0\u00a0Proxies</a><ul>\n<li><a href=\"#environment-variables\" id=\"id39\" rel=\"nofollow\">12.1\u00a0\u00a0\u00a0Environment variables</a></li>\n<li><a href=\"#socks\" id=\"id40\" rel=\"nofollow\">12.2\u00a0\u00a0\u00a0SOCKS</a></li>\n</ul>\n</li>\n<li><a href=\"#https\" id=\"id41\" rel=\"nofollow\">13\u00a0\u00a0\u00a0HTTPS</a><ul>\n<li><a href=\"#server-ssl-certificate-verification\" id=\"id42\" rel=\"nofollow\">13.1\u00a0\u00a0\u00a0Server SSL certificate verification</a></li>\n<li><a href=\"#custom-ca-bundle\" id=\"id43\" rel=\"nofollow\">13.2\u00a0\u00a0\u00a0Custom CA bundle</a></li>\n<li><a href=\"#client-side-ssl-certificate\" id=\"id44\" rel=\"nofollow\">13.3\u00a0\u00a0\u00a0Client side SSL certificate</a></li>\n<li><a href=\"#ssl-version\" id=\"id45\" rel=\"nofollow\">13.4\u00a0\u00a0\u00a0SSL version</a></li>\n<li><a href=\"#sni-server-name-indication\" id=\"id46\" rel=\"nofollow\">13.5\u00a0\u00a0\u00a0SNI (Server Name Indication)</a></li>\n</ul>\n</li>\n<li><a href=\"#output-options\" id=\"id47\" rel=\"nofollow\">14\u00a0\u00a0\u00a0Output options</a><ul>\n<li><a href=\"#what-parts-of-the-http-exchange-should-be-printed\" id=\"id48\" rel=\"nofollow\">14.1\u00a0\u00a0\u00a0What parts of the HTTP exchange should be printed</a></li>\n<li><a href=\"#viewing-intermediary-requests-responses\" id=\"id49\" rel=\"nofollow\">14.2\u00a0\u00a0\u00a0Viewing intermediary requests/responses</a></li>\n<li><a href=\"#conditional-body-download\" id=\"id50\" rel=\"nofollow\">14.3\u00a0\u00a0\u00a0Conditional body download</a></li>\n</ul>\n</li>\n<li><a href=\"#redirected-input\" id=\"id51\" rel=\"nofollow\">15\u00a0\u00a0\u00a0Redirected Input</a><ul>\n<li><a href=\"#request-data-from-a-filename\" id=\"id52\" rel=\"nofollow\">15.1\u00a0\u00a0\u00a0Request data from a filename</a></li>\n</ul>\n</li>\n<li><a href=\"#terminal-output\" id=\"id53\" rel=\"nofollow\">16\u00a0\u00a0\u00a0Terminal output</a><ul>\n<li><a href=\"#colors-and-formatting\" id=\"id54\" rel=\"nofollow\">16.1\u00a0\u00a0\u00a0Colors and formatting</a></li>\n<li><a href=\"#binary-data\" id=\"id55\" rel=\"nofollow\">16.2\u00a0\u00a0\u00a0Binary data</a></li>\n</ul>\n</li>\n<li><a href=\"#redirected-output\" id=\"id56\" rel=\"nofollow\">17\u00a0\u00a0\u00a0Redirected output</a></li>\n<li><a href=\"#download-mode\" id=\"id57\" rel=\"nofollow\">18\u00a0\u00a0\u00a0Download mode</a><ul>\n<li><a href=\"#downloaded-file-name\" id=\"id58\" rel=\"nofollow\">18.1\u00a0\u00a0\u00a0Downloaded file name</a></li>\n<li><a href=\"#piping-while-downloading\" id=\"id59\" rel=\"nofollow\">18.2\u00a0\u00a0\u00a0Piping while downloading</a></li>\n<li><a href=\"#resuming-downloads\" id=\"id60\" rel=\"nofollow\">18.3\u00a0\u00a0\u00a0Resuming downloads</a></li>\n<li><a href=\"#other-notes\" id=\"id61\" rel=\"nofollow\">18.4\u00a0\u00a0\u00a0Other notes</a></li>\n</ul>\n</li>\n<li><a href=\"#streamed-responses\" id=\"id62\" rel=\"nofollow\">19\u00a0\u00a0\u00a0Streamed responses</a><ul>\n<li><a href=\"#disabling-buffering\" id=\"id63\" rel=\"nofollow\">19.1\u00a0\u00a0\u00a0Disabling buffering</a></li>\n<li><a href=\"#examples-use-cases\" id=\"id64\" rel=\"nofollow\">19.2\u00a0\u00a0\u00a0Examples use cases</a></li>\n</ul>\n</li>\n<li><a href=\"#sessions\" id=\"id65\" rel=\"nofollow\">20\u00a0\u00a0\u00a0Sessions</a><ul>\n<li><a href=\"#named-sessions\" id=\"id66\" rel=\"nofollow\">20.1\u00a0\u00a0\u00a0Named sessions</a></li>\n<li><a href=\"#anonymous-sessions\" id=\"id67\" rel=\"nofollow\">20.2\u00a0\u00a0\u00a0Anonymous sessions</a></li>\n<li><a href=\"#readonly-session\" id=\"id68\" rel=\"nofollow\">20.3\u00a0\u00a0\u00a0Readonly session</a></li>\n</ul>\n</li>\n<li><a href=\"#config\" id=\"id69\" rel=\"nofollow\">21\u00a0\u00a0\u00a0Config</a><ul>\n<li><a href=\"#config-file-location\" id=\"id70\" rel=\"nofollow\">21.1\u00a0\u00a0\u00a0Config file location</a></li>\n<li><a href=\"#configurable-options\" id=\"id71\" rel=\"nofollow\">21.2\u00a0\u00a0\u00a0Configurable options</a><ul>\n<li><a href=\"#default-options\" id=\"id72\" rel=\"nofollow\">21.2.1\u00a0\u00a0\u00a0<tt>default_options</tt></a></li>\n<li><a href=\"#meta\" id=\"id73\" rel=\"nofollow\">21.2.2\u00a0\u00a0\u00a0<tt>__meta__</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#un-setting-previously-specified-options\" id=\"id74\" rel=\"nofollow\">21.3\u00a0\u00a0\u00a0Un-setting previously specified options</a></li>\n</ul>\n</li>\n<li><a href=\"#scripting\" id=\"id75\" rel=\"nofollow\">22\u00a0\u00a0\u00a0Scripting</a><ul>\n<li><a href=\"#best-practices\" id=\"id76\" rel=\"nofollow\">22.1\u00a0\u00a0\u00a0Best practices</a></li>\n</ul>\n</li>\n<li><a href=\"#id1\" id=\"id77\" rel=\"nofollow\">23\u00a0\u00a0\u00a0Meta</a><ul>\n<li><a href=\"#interface-design\" id=\"id78\" rel=\"nofollow\">23.1\u00a0\u00a0\u00a0Interface design</a></li>\n<li><a href=\"#user-support\" id=\"id79\" rel=\"nofollow\">23.2\u00a0\u00a0\u00a0User support</a></li>\n<li><a href=\"#related-projects\" id=\"id80\" rel=\"nofollow\">23.3\u00a0\u00a0\u00a0Related projects</a><ul>\n<li><a href=\"#dependencies\" id=\"id81\" rel=\"nofollow\">23.3.1\u00a0\u00a0\u00a0Dependencies</a></li>\n<li><a href=\"#httpie-friends\" id=\"id82\" rel=\"nofollow\">23.3.2\u00a0\u00a0\u00a0HTTPie friends</a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\" id=\"id83\" rel=\"nofollow\">23.4\u00a0\u00a0\u00a0Contributing</a></li>\n<li><a href=\"#change-log\" id=\"id84\" rel=\"nofollow\">23.5\u00a0\u00a0\u00a0Change log</a></li>\n<li><a href=\"#artwork\" id=\"id85\" rel=\"nofollow\">23.6\u00a0\u00a0\u00a0Artwork</a></li>\n<li><a href=\"#licence\" id=\"id86\" rel=\"nofollow\">23.7\u00a0\u00a0\u00a0Licence</a></li>\n<li><a href=\"#authors\" id=\"id87\" rel=\"nofollow\">23.8\u00a0\u00a0\u00a0Authors</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"main-features\">\n<h2><a href=\"#id2\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Main features</a></h2>\n<ul>\n<li>Expressive and intuitive syntax</li>\n<li>Formatted and colorized terminal output</li>\n<li>Built-in JSON support</li>\n<li>Forms and file uploads</li>\n<li>HTTPS, proxies, and authentication</li>\n<li>Arbitrary request data</li>\n<li>Custom headers</li>\n<li>Persistent sessions</li>\n<li>Wget-like downloads</li>\n<li>Python 2.6, 2.7 and 3.x support</li>\n<li>Linux, Mac OS X and Windows support</li>\n<li>Plugins</li>\n<li>Documentation</li>\n<li>Test coverage</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Installation</a></h2>\n<div id=\"macos\">\n<h3><a href=\"#id4\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0macOS</a></h3>\n<p>On macOS, HTTPie can be installed via <a href=\"http://brew.sh/\" rel=\"nofollow\">Homebrew</a>\n(recommended):</p>\n<pre>$ brew install httpie\n</pre>\n<p>A MacPorts <em>port</em> is also available:</p>\n<pre>$ port install httpie\n</pre>\n</div>\n<div id=\"linux\">\n<h3><a href=\"#id5\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0Linux</a></h3>\n<p>Most Linux distributions provide a package that can be installed using the\nsystem package manager, e.g.:</p>\n<pre><span class=\"c1\"># Debian-based distributions such as Ubuntu:\n</span>$ apt-get install httpie\n\n<span class=\"c1\"># RPM-based distributions:\n</span>$ yum install httpie\n\n<span class=\"c1\"># Arch Linux\n</span>$ pacman -S httpie\n</pre>\n</div>\n<div id=\"windows-etc\">\n<h3><a href=\"#id6\" rel=\"nofollow\">2.3\u00a0\u00a0\u00a0Windows, etc.</a></h3>\n<p>A universal installation method (that works on Windows, Mac OS X, Linux, \u2026,\nand always provides the latest version) is to use <a href=\"http://www.pip-installer.org/en/latest/index.html\" rel=\"nofollow\">pip</a>:</p>\n<pre><span class=\"c1\"># Make sure we have an up-to-date version of pip and setuptools:\n</span>$ pip install --upgrade pip setuptools\n\n$ pip install --upgrade httpie\n</pre>\n<p>(If <tt>pip</tt> installation fails for some reason, you can try\n<tt>easy_install httpie</tt> as a fallback.)</p>\n</div>\n<div id=\"development-version\">\n<h3><a href=\"#id7\" rel=\"nofollow\">2.4\u00a0\u00a0\u00a0Development version</a></h3>\n<p>The latest development version can be installed directly from GitHub:</p>\n<pre><span class=\"c1\"># Mac OS X via Homebrew\n</span>$ brew install httpie --HEAD\n\n<span class=\"c1\"># Universal\n</span>$ pip install --upgrade https://github.com/jkbrzt/httpie/archive/master.tar.gz\n</pre>\n</div>\n<div id=\"python-version\">\n<h3><a href=\"#id8\" rel=\"nofollow\">2.5\u00a0\u00a0\u00a0Python version</a></h3>\n<p>Although Python 2.6 and 2.7 are supported as well, it is recommended to install\nHTTPie against the latest Python 3.x whenever possible. That will ensure that\nsome of the newer HTTP features, such as <a href=\"#sni-server-name-indication\" rel=\"nofollow\">SNI (Server Name Indication)</a>,\nwork out of the box.\nPython 3 is the default for Homebrew installations starting with version 0.9.4.\nTo see which version HTTPie uses, run <tt>http <span class=\"pre\">--debug</span></tt>.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id9\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Usage</a></h2>\n<p>Hello World:</p>\n<pre>$ http httpie.org\n</pre>\n<p>Synopsis:</p>\n<pre>$ http <span class=\"o\">[</span>flags<span class=\"o\">]</span> <span class=\"o\">[</span>METHOD<span class=\"o\">]</span> URL <span class=\"o\">[</span>ITEM <span class=\"o\">[</span>ITEM<span class=\"o\">]]</span>\n</pre>\n<p>See also <tt>http <span class=\"pre\">--help</span></tt>.</p>\n<div id=\"examples\">\n<h3><a href=\"#id10\" rel=\"nofollow\">3.1\u00a0\u00a0\u00a0Examples</a></h3>\n<p>Custom <a href=\"#http-method\" rel=\"nofollow\">HTTP method</a>, <a href=\"#http-headers\" rel=\"nofollow\">HTTP headers</a> and <a href=\"#json\" rel=\"nofollow\">JSON</a> data:</p>\n<pre>$ http PUT example.org X-API-Token:123 <span class=\"nv\">name</span><span class=\"o\">=</span>John\n</pre>\n<p>Submitting <a href=\"#forms\" rel=\"nofollow\">forms</a>:</p>\n<pre>$ http -f POST example.org <span class=\"nv\">hello</span><span class=\"o\">=</span>World\n</pre>\n<p>See the request that is being sent using one of the <a href=\"#output-options\" rel=\"nofollow\">output options</a>:</p>\n<pre>$ http -v example.org\n</pre>\n<p>Use <a href=\"http://developer.github.com/v3/issues/comments/#create-a-comment\" rel=\"nofollow\">Github API</a> to post a comment on an\n<a href=\"https://github.com/jkbrzt/httpie/issues/83\" rel=\"nofollow\">issue</a>\nwith <a href=\"#authentication\" rel=\"nofollow\">authentication</a>:</p>\n<pre>$ http -a USERNAME POST https://api.github.com/repos/jkbrzt/httpie/issues/83/comments <span class=\"nv\">body</span><span class=\"o\">=</span><span class=\"s1\">'HTTPie is awesome! :heart:'</span>\n</pre>\n<p>Upload a file using <a href=\"#redirected-input\" rel=\"nofollow\">redirected input</a>:</p>\n<pre>$ http example.org &lt; file.json\n</pre>\n<p>Download a file and save it via <a href=\"#redirected-output\" rel=\"nofollow\">redirected output</a>:</p>\n<pre>$ http example.org/file &gt; file\n</pre>\n<p>Download a file <tt>wget</tt> style:</p>\n<pre>$ http --download example.org/file\n</pre>\n<p>Use named <a href=\"#sessions\" rel=\"nofollow\">sessions</a> to make certain aspects or the communication persistent\nbetween requests to the same host:</p>\n<pre>$ http --session<span class=\"o\">=</span>logged-in -a username:password httpbin.org/get API-Key:123\n\n$ http --session<span class=\"o\">=</span>logged-in httpbin.org/headers\n</pre>\n<p>Set a custom <tt>Host</tt> header to work around missing DNS records:</p>\n<pre>$ http localhost:8000 Host:example.com\n</pre>\n</div>\n</div>\n<div id=\"http-method\">\n<h2><a href=\"#id11\" rel=\"nofollow\">4\u00a0\u00a0\u00a0HTTP method</a></h2>\n<p>The name of the HTTP method comes right before the URL argument:</p>\n<pre>$ http DELETE example.org/todos/7\n</pre>\n<p>Which looks similar to the actual <tt><span class=\"pre\">Request-Line</span></tt> that is sent:</p>\n<pre><span class=\"nf\">DELETE</span> <span class=\"nn\">/todos/7</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n</pre>\n<p>When the <tt>METHOD</tt> argument is omitted from the command, HTTPie defaults to\neither <tt>GET</tt> (with no request data) or <tt>POST</tt> (with request data).</p>\n</div>\n<div id=\"request-url\">\n<h2><a href=\"#id12\" rel=\"nofollow\">5\u00a0\u00a0\u00a0Request URL</a></h2>\n<p>The only information HTTPie needs to perform a request is a URL.\nThe default scheme is, somewhat unsurprisingly, <tt><span class=\"pre\">http://</span></tt>,\nand can be omitted from the argument \u2013 <tt>http example.org</tt> works just fine.</p>\n<div id=\"querystring-parameters\">\n<h3><a href=\"#id13\" rel=\"nofollow\">5.1\u00a0\u00a0\u00a0Querystring parameters</a></h3>\n<p>If you find yourself manually constructing URLs with\non the terminal, you may appreciate the <tt><span class=\"pre\">param==value</span></tt> syntax for appending\nURL parameters. With that, you don\u2019t have to worry about escaping the <tt>&amp;</tt>\nseparators for your shell. Also, special characters in parameter values,\nwill also automatically escaped (HTTPie otherwise expects the URL to be\nalready escaped). To search for <tt>HTTPie logo</tt> on Google Images you could use\nthis command:</p>\n<pre>$ http www.google.com <span class=\"nv\">search</span><span class=\"o\">==</span><span class=\"s1\">'HTTPie logo'</span> <span class=\"nv\">tbm</span><span class=\"o\">==</span>isch\n</pre>\n<pre><span class=\"nf\">GET</span> <span class=\"nn\">/?search=HTTPie+logo&amp;tbm=isch</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n</pre>\n</div>\n<div id=\"url-shortcuts-for-localhost\">\n<h3><a href=\"#id14\" rel=\"nofollow\">5.2\u00a0\u00a0\u00a0URL shortcuts for <tt>localhost</tt></a></h3>\n<p>Additionally, curl-like shorthand for localhost is supported.\nThis means that, for example <tt>:3000</tt> would expand to <tt><span class=\"pre\">http://localhost:3000</span></tt>\nIf the port is omitted, then port 80 is assumed.</p>\n<pre>$ http :/foo\n</pre>\n<pre><span class=\"nf\">GET</span> <span class=\"nn\">/foo</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Host</span><span class=\"o\">:</span> <span class=\"l\">localhost</span>\n</pre>\n<pre>$ http :3000/bar\n</pre>\n<pre><span class=\"nf\">GET</span> <span class=\"nn\">/bar</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Host</span><span class=\"o\">:</span> <span class=\"l\">localhost:3000</span>\n</pre>\n<pre>$ http :\n</pre>\n<pre><span class=\"nf\">GET</span> <span class=\"nn\">/</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Host</span><span class=\"o\">:</span> <span class=\"l\">localhost</span>\n</pre>\n</div>\n<div id=\"custom-default-scheme\">\n<h3><a href=\"#id15\" rel=\"nofollow\">5.3\u00a0\u00a0\u00a0Custom default scheme</a></h3>\n<p>You can use the <tt><span class=\"pre\">--default-scheme</span> &lt;URL_SCHEME&gt;</tt> option to create\nshortcuts for other protocols than HTTP:</p>\n<pre>$ <span class=\"nb\">alias</span> <span class=\"nv\">https</span><span class=\"o\">=</span><span class=\"s1\">'http --default-scheme=https'</span>\n</pre>\n</div>\n</div>\n<div id=\"request-items\">\n<h2><a href=\"#id16\" rel=\"nofollow\">6\u00a0\u00a0\u00a0Request items</a></h2>\n<p>There are a few different <em>request item</em> types that provide a\nconvenient mechanism for specifying HTTP headers, simple JSON and\nform data, files, and URL parameters.</p>\n<p>They are key/value pairs specified after the URL. All have in\ncommon that they become part of the actual request that is sent and that\ntheir type is distinguished only by the separator used:\n<tt>:</tt>, <tt>=</tt>, <tt>:=</tt>, <tt>==</tt>, <tt>@</tt>, <tt>=@</tt>, and <tt>:=@</tt>. The ones with an\n<tt>@</tt> expect a file path as value.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Item Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>HTTP Headers\n<tt>Name:Value</tt></td>\n<td>Arbitrary HTTP header, e.g. <tt><span class=\"pre\">X-API-Token:123</span></tt>.</td>\n</tr>\n<tr><td>URL parameters\n<tt><span class=\"pre\">name==value</span></tt></td>\n<td>Appends the given name/value pair as a query\nstring parameter to the URL.\nThe <tt>==</tt> separator is used.</td>\n</tr>\n<tr><td>Data Fields\n<tt>field=value</tt>,\n<tt><span class=\"pre\">field=@file.txt</span></tt></td>\n<td>Request data fields to be serialized as a JSON\nobject (default), or to be form-encoded\n(<tt><span class=\"pre\">--form,</span> <span class=\"pre\">-f</span></tt>).</td>\n</tr>\n<tr><td>Raw JSON fields\n<tt><span class=\"pre\">field:=json</span></tt>,\n<tt><span class=\"pre\">field:=@file.json</span></tt></td>\n<td>Useful when sending JSON and one or\nmore fields need to be a <tt>Boolean</tt>, <tt>Number</tt>,\nnested <tt>Object</tt>, or an <tt>Array</tt>,  e.g.,\n<tt><span class=\"pre\">meals:='[\"ham\",\"spam\"]'</span></tt> or <tt><span class=\"pre\">pies:=[1,2,3]</span></tt>\n(note the quotes).</td>\n</tr>\n<tr><td>Form File Fields\n<tt><span class=\"pre\">field@/dir/file</span></tt></td>\n<td>Only available with <tt><span class=\"pre\">--form,</span> <span class=\"pre\">-f</span></tt>.\nFor example <tt><span class=\"pre\">screenshot@~/Pictures/img.png</span></tt>.\nThe presence of a file field results\nin a <tt><span class=\"pre\">multipart/form-data</span></tt> request.</td>\n</tr>\n</tbody>\n</table>\n<p>Note that data fields aren\u2019t the only way to specify request data:\n<a href=\"#redirected-input\" rel=\"nofollow\">Redirected input</a> is a mechanism for passing arbitrary data request\nrequest.</p>\n<div id=\"escaping-rules\">\n<h3><a href=\"#id17\" rel=\"nofollow\">6.1\u00a0\u00a0\u00a0Escaping rules</a></h3>\n<p>You can use <tt>\\</tt> to escape characters that shouldn\u2019t be used as separators\n(or parts thereof). For instance, <tt><span class=\"pre\">foo\\==bar</span></tt> will become a data key/value\npair (<tt>foo=</tt> and <tt>bar</tt>) instead of a URL parameter.</p>\n<p>Often it is necessary to quote the values, e.g. <tt><span class=\"pre\">foo='bar</span> baz'</tt>.</p>\n<p>If any of the field names or headers starts with a minus\n(e.g., <tt><span class=\"pre\">-fieldname</span></tt>), you need to place all such items after the special\ntoken <tt><span class=\"pre\">--</span></tt> to prevent confusion with <tt><span class=\"pre\">--arguments</span></tt>:</p>\n<pre>$ http httpbin.org/post  --  -name-starting-with-dash<span class=\"o\">=</span>foo -Unusual-Header:bar\n</pre>\n<pre><span class=\"nf\">POST</span> <span class=\"nn\">/post</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">-Unusual-Header</span><span class=\"o\">:</span> <span class=\"l\">bar</span>\n<span class=\"na\">Content-Type</span><span class=\"o\">:</span> <span class=\"l\">application/json</span>\n\n<span class=\"p\">{</span>\n    <span class=\"nt\">\"-name-starting-with-dash\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"json\">\n<h2><a href=\"#id18\" rel=\"nofollow\">7\u00a0\u00a0\u00a0JSON</a></h2>\n<p>JSON is the <em>lingua franca</em> of modern web services and it is also the\n<strong>implicit content type</strong> HTTPie by default uses.</p>\n<p>Simple example:</p>\n<pre>$ http PUT example.org <span class=\"nv\">name</span><span class=\"o\">=</span>John <span class=\"nv\">email</span><span class=\"o\">=</span>john@example.org\n</pre>\n<pre><span class=\"nf\">PUT</span> <span class=\"nn\">/</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Accept</span><span class=\"o\">:</span> <span class=\"l\">application/json, */*</span>\n<span class=\"na\">Accept-Encoding</span><span class=\"o\">:</span> <span class=\"l\">gzip, deflate</span>\n<span class=\"na\">Content-Type</span><span class=\"o\">:</span> <span class=\"l\">application/json</span>\n<span class=\"na\">Host</span><span class=\"o\">:</span> <span class=\"l\">example.org</span>\n\n<span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"john@example.org\"</span>\n<span class=\"p\">}</span>\n</pre>\n<div id=\"default-behaviour\">\n<h3><a href=\"#id19\" rel=\"nofollow\">7.1\u00a0\u00a0\u00a0Default behaviour</a></h3>\n<p>If your command includes some data <a href=\"#request-items\" rel=\"nofollow\">request items</a>, they are serialized as a JSON\nobject by default. HTTPie also automatically sets the following headers,\nboth of which can be overwritten:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><tt><span class=\"pre\">Content-Type</span></tt></td>\n<td><tt>application/json</tt></td>\n</tr>\n<tr><td><tt>Accept</tt></td>\n<td><tt>application/json, */*</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"explicit-json\">\n<h3><a href=\"#id20\" rel=\"nofollow\">7.2\u00a0\u00a0\u00a0Explicit JSON</a></h3>\n<p>You can use <tt><span class=\"pre\">--json,</span> <span class=\"pre\">-j</span></tt> to explicitly set <tt>Accept</tt>\nto <tt>application/json</tt> regardless of whether you are sending data\n(it\u2019s a shortcut for setting the header via the usual header notation:\n<tt>http url <span class=\"pre\">Accept:'application/json,</span> <span class=\"pre\">*/*'</span></tt>). Additionally,\nHTTPie will try to detect JSON responses even when the\n<tt><span class=\"pre\">Content-Type</span></tt> is incorrectly <tt>text/plain</tt> or unknown.</p>\n</div>\n<div id=\"non-string-json-fields\">\n<h3><a href=\"#id21\" rel=\"nofollow\">7.3\u00a0\u00a0\u00a0Non-string JSON fields</a></h3>\n<p>Non-string fields use the <tt>:=</tt> separator, which allows you to embed raw JSON\ninto the resulting object. Text and raw JSON files can also be embedded into\nfields using <tt>=@</tt> and <tt>:=@</tt>:</p>\n<pre>$ http PUT api.example.com/person/1 <span class=\"se\">\\\n</span>    <span class=\"nv\">name</span><span class=\"o\">=</span>John <span class=\"se\">\\\n</span>    age:<span class=\"o\">=</span><span class=\"m\">29</span> married:<span class=\"o\">=</span><span class=\"nb\">false</span> hobbies:<span class=\"o\">=</span><span class=\"s1\">'[\"http\", \"pies\"]'</span> <span class=\"se\">\\ </span> <span class=\"c1\"># Raw JSON\n</span>    <span class=\"nv\">description</span><span class=\"o\">=</span>@about-john.txt <span class=\"se\">\\ </span>  <span class=\"c1\"># Embed text file\n</span>    bookmarks:<span class=\"o\">=</span>@bookmarks.json      <span class=\"c1\"># Embed JSON file</span>\n</pre>\n<pre><span class=\"nf\">PUT</span> <span class=\"nn\">/person/1</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Accept</span><span class=\"o\">:</span> <span class=\"l\">application/json, */*</span>\n<span class=\"na\">Content-Type</span><span class=\"o\">:</span> <span class=\"l\">application/json</span>\n<span class=\"na\">Host</span><span class=\"o\">:</span> <span class=\"l\">api.example.com</span>\n\n<span class=\"p\">{</span>\n    <span class=\"nt\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">29</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"hobbies\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"http\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"pies\"</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"John is a nice guy who likes pies.\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"married\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"bookmarks\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"HTTPie\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://httpie.org\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Please note that with this syntax the command gets unwieldy when sending\ncomplex data. In that case it\u2019s always better to use <a href=\"#redirected-input\" rel=\"nofollow\">redirected input</a>:</p>\n<pre>$ http POST api.example.com/person/1 &lt; person.json\n</pre>\n</div>\n</div>\n<div id=\"forms\">\n<h2><a href=\"#id22\" rel=\"nofollow\">8\u00a0\u00a0\u00a0Forms</a></h2>\n<p>Submitting forms is very similar to sending <a href=\"#json\" rel=\"nofollow\">JSON</a> requests. Often the only\ndifference is in adding the <tt><span class=\"pre\">--form,</span> <span class=\"pre\">-f</span></tt> option, which ensures that\ndata fields are serialized as, and <tt><span class=\"pre\">Content-Type</span></tt> is set to,\n<tt><span class=\"pre\">application/x-www-form-urlencoded;</span> <span class=\"pre\">charset=utf-8</span></tt>. It is possible to make\nform data the implicit content type instead of JSON\nvia the <a href=\"#config\" rel=\"nofollow\">config</a> file.</p>\n<div id=\"regular-forms\">\n<h3><a href=\"#id23\" rel=\"nofollow\">8.1\u00a0\u00a0\u00a0Regular forms</a></h3>\n<pre>$ http --form POST api.example.org/person/1 <span class=\"nv\">name</span><span class=\"o\">=</span><span class=\"s1\">'John Smith'</span>\n</pre>\n<pre><span class=\"nf\">POST</span> <span class=\"nn\">/person/1</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Content-Type</span><span class=\"o\">:</span> <span class=\"l\">application/x-www-form-urlencoded; charset=utf-8</span>\n\nname=John+Smith\n</pre>\n</div>\n<div id=\"file-upload-forms\">\n<h3><a href=\"#id24\" rel=\"nofollow\">8.2\u00a0\u00a0\u00a0File upload forms</a></h3>\n<p>If one or more file fields is present, the serialization and content type is\n<tt><span class=\"pre\">multipart/form-data</span></tt>:</p>\n<pre>$ http -f POST example.com/jobs <span class=\"nv\">name</span><span class=\"o\">=</span><span class=\"s1\">'John Smith'</span> cv@~/Documents/cv.pdf\n</pre>\n<p>The request above is the same as if the following HTML form were\nsubmitted:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">enctype</span><span class=\"o\">=</span><span class=\"s\">\"multipart/form-data\"</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">\"post\"</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">\"http://example.com/jobs\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text\"</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"file\"</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"cv\"</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Note that <tt>@</tt> is used to simulate a file upload form field, whereas\n<tt>=@</tt> just embeds the file content as a regular text field value.</p>\n</div>\n</div>\n<div id=\"http-headers\">\n<h2><a href=\"#id25\" rel=\"nofollow\">9\u00a0\u00a0\u00a0HTTP headers</a></h2>\n<p>To set custom headers you can use the <tt>Header:Value</tt> notation:</p>\n<pre>$ http example.org  User-Agent:Bacon/1.0  <span class=\"s1\">'Cookie:valued-visitor=yes;foo=bar'</span>  <span class=\"se\">\\\n</span>    X-Foo:Bar  Referer:http://httpie.org/\n</pre>\n<pre><span class=\"nf\">GET</span> <span class=\"nn\">/</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Accept</span><span class=\"o\">:</span> <span class=\"l\">*/*</span>\n<span class=\"na\">Accept-Encoding</span><span class=\"o\">:</span> <span class=\"l\">gzip, deflate</span>\n<span class=\"na\">Cookie</span><span class=\"o\">:</span> <span class=\"l\">valued-visitor=yes;foo=bar</span>\n<span class=\"na\">Host</span><span class=\"o\">:</span> <span class=\"l\">example.org</span>\n<span class=\"na\">Referer</span><span class=\"o\">:</span> <span class=\"l\">http://httpie.org/</span>\n<span class=\"na\">User-Agent</span><span class=\"o\">:</span> <span class=\"l\">Bacon/1.0</span>\n<span class=\"na\">X-Foo</span><span class=\"o\">:</span> <span class=\"l\">Bar</span>\n</pre>\n<div id=\"default-request-headers\">\n<h3><a href=\"#id26\" rel=\"nofollow\">9.1\u00a0\u00a0\u00a0Default request headers</a></h3>\n<p>There are a couple of default headers that HTTPie sets:</p>\n<pre><span class=\"nf\">GET</span> <span class=\"nn\">/</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Accept</span><span class=\"o\">:</span> <span class=\"l\">*/*</span>\n<span class=\"na\">Accept-Encoding</span><span class=\"o\">:</span> <span class=\"l\">gzip, deflate</span>\n<span class=\"na\">User-Agent</span><span class=\"o\">:</span> <span class=\"l\">HTTPie/&lt;version&gt;</span>\n<span class=\"na\">Host</span><span class=\"o\">:</span> <span class=\"l\">&lt;taken-from-URL&gt;</span>\n</pre>\n<p>Any of those\u2014except for <tt>Host</tt>\u2014can be overwritten and some of them unset.</p>\n</div>\n<div id=\"empty-headers-and-header-un-setting\">\n<h3><a href=\"#id27\" rel=\"nofollow\">9.2\u00a0\u00a0\u00a0Empty headers and header un-setting</a></h3>\n<p>To unset a previously specified header\n(such a one of the default headers), use <tt>Header:</tt>:</p>\n<pre>$ http httpbin.org/headers Accept: User-Agent:\n</pre>\n<p>To send a header with an empty value, use <tt>Header;</tt>:</p>\n<pre>$ http httpbin.org/headers <span class=\"s1\">'Header;'</span>\n</pre>\n</div>\n</div>\n<div id=\"authentication\">\n<h2><a href=\"#id28\" rel=\"nofollow\">10\u00a0\u00a0\u00a0Authentication</a></h2>\n<p>The currently supported authentication schemes are Basic and Digest\n(see <a href=\"#auth-plugins\" rel=\"nofollow\">auth plugins</a> for more). There are two flags that control authentication:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><tt><span class=\"pre\">--auth,</span> <span class=\"pre\">-a</span></tt></td>\n<td>Pass a <tt>username:password</tt> pair as\nthe argument. Or, if you only specify a username\n(<tt><span class=\"pre\">-a</span> username</tt>), you\u2019ll be prompted for\nthe password before the request is sent.\nTo send an empty password, pass <tt>username:</tt>.\nThe <tt>username:password@hostname</tt> URL syntax is\nsupported as well (but credentials passed via <tt><span class=\"pre\">-a</span></tt>\nhave higher priority).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--auth-type,</span> <span class=\"pre\">-A</span></tt></td>\n<td>Specify the auth mechanism. Possible values are\n<tt>basic</tt> and <tt>digest</tt>. The default value is\n<tt>basic</tt> so it can often be omitted.</td>\n</tr>\n</tbody>\n</table>\n<div id=\"basic-auth\">\n<h3><a href=\"#id29\" rel=\"nofollow\">10.1\u00a0\u00a0\u00a0Basic auth</a></h3>\n<pre>$ http -a username:password example.org\n</pre>\n</div>\n<div id=\"digest-auth\">\n<h3><a href=\"#id30\" rel=\"nofollow\">10.2\u00a0\u00a0\u00a0Digest auth</a></h3>\n<pre>$ http -A digest -a username:password example.org\n</pre>\n</div>\n<div id=\"password-prompt\">\n<h3><a href=\"#id31\" rel=\"nofollow\">10.3\u00a0\u00a0\u00a0Password prompt</a></h3>\n<pre>$ http -a username example.org\n</pre>\n</div>\n<div id=\"netrc\">\n<h3><a href=\"#id32\" rel=\"nofollow\">10.4\u00a0\u00a0\u00a0<tt>.netrc</tt></a></h3>\n<p>Authorization information from your <tt><span class=\"pre\">~/.netrc</span></tt> file is honored as well:</p>\n<pre>$ cat ~/.netrc\nmachine httpbin.org\nlogin httpie\npassword <span class=\"nb\">test</span>\n\n$ http httpbin.org/basic-auth/httpie/test\nHTTP/1.1 <span class=\"m\">200</span> OK\n<span class=\"o\">[</span>...<span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"auth-plugins\">\n<h3><a href=\"#id33\" rel=\"nofollow\">10.5\u00a0\u00a0\u00a0Auth plugins</a></h3>\n<p>Additional authentication mechanism can be installed as plugins.\nThey can be found on the <a href=\"https://pypi.python.org/pypi?%3Aaction=search&amp;term=httpie&amp;submit=search\" rel=\"nofollow\">Python Package Index</a>.\nHere\u2019s a few picks:</p>\n<ul>\n<li><a href=\"https://github.com/pd/httpie-api-auth\" rel=\"nofollow\">httpie-api-auth</a>: ApiAuth</li>\n<li><a href=\"https://github.com/httpie/httpie-aws-auth\" rel=\"nofollow\">httpie-aws-auth</a>: AWS / Amazon S3</li>\n<li><a href=\"https://github.com/akamai-open/httpie-edgegrid\" rel=\"nofollow\">httpie-edgegrid</a>: EdgeGrid</li>\n<li><a href=\"https://github.com/guardian/httpie-hmac-auth\" rel=\"nofollow\">httpie-hmac-auth</a>: HMAC</li>\n<li><a href=\"https://github.com/teracyhq/httpie-jwt-auth\" rel=\"nofollow\">httpie-jwt-auth</a>: JWTAuth (JSON Web Tokens)</li>\n<li><a href=\"https://github.com/ndzou/httpie-negotiate\" rel=\"nofollow\">httpie-negotiate</a>: SPNEGO (GSS Negotiate)</li>\n<li><a href=\"https://github.com/httpie/httpie-ntlm\" rel=\"nofollow\">httpie-ntlm</a>: NTLM (NT LAN Manager)</li>\n<li><a href=\"https://github.com/httpie/httpie-oauth\" rel=\"nofollow\">httpie-oauth</a>: OAuth</li>\n<li><a href=\"https://github.com/mozilla-services/requests-hawk\" rel=\"nofollow\">requests-hawk</a>: Hawk</li>\n</ul>\n</div>\n</div>\n<div id=\"http-redirects\">\n<h2><a href=\"#id34\" rel=\"nofollow\">11\u00a0\u00a0\u00a0HTTP redirects</a></h2>\n<p>By default, HTTP redirects are not followed and only the first\nresponse is shown:</p>\n<pre>$ http httpbin.org/redirect/3\n</pre>\n<div id=\"follow-location\">\n<h3><a href=\"#id35\" rel=\"nofollow\">11.1\u00a0\u00a0\u00a0Follow <tt>Location</tt></a></h3>\n<p>To instruct HTTPie to follow the <tt>Location</tt> header of <tt>30x</tt> responses\nand show the final response instead, use the <tt><span class=\"pre\">--follow,</span> <span class=\"pre\">-F</span></tt> option:</p>\n<pre>$ http --follow httpbin.org/redirect/3\n</pre>\n</div>\n<div id=\"showing-intermediary-redirect-responses\">\n<h3><a href=\"#id36\" rel=\"nofollow\">11.2\u00a0\u00a0\u00a0Showing intermediary redirect responses</a></h3>\n<p>If you additionally wish to see the intermediary requests/responses,\nthen use the <tt><span class=\"pre\">--all</span></tt> option as well:</p>\n<pre>$ http --follow --all httpbin.org/redirect/3\n</pre>\n</div>\n<div id=\"limiting-maximum-redirects-followed\">\n<h3><a href=\"#id37\" rel=\"nofollow\">11.3\u00a0\u00a0\u00a0Limiting maximum redirects followed</a></h3>\n<p>To change the default limit of maximum <tt>30</tt> redirects, use the\n<tt><span class=\"pre\">--max-redirects=&lt;limit&gt;</span></tt> option:</p>\n<pre>$ http --follow --all --max-redirects<span class=\"o\">=</span><span class=\"m\">5</span> httpbin.org/redirect/3\n</pre>\n</div>\n</div>\n<div id=\"proxies\">\n<h2><a href=\"#id38\" rel=\"nofollow\">12\u00a0\u00a0\u00a0Proxies</a></h2>\n<p>You can specify proxies to be used through the <tt><span class=\"pre\">--proxy</span></tt> argument for each\nprotocol (which is included in the value in case of redirects across protocols):</p>\n<pre>$ http --proxy<span class=\"o\">=</span>http:http://10.10.1.10:3128 --proxy<span class=\"o\">=</span>https:https://10.10.1.10:1080 example.org\n</pre>\n<p>With Basic authentication:</p>\n<pre>$ http --proxy<span class=\"o\">=</span>http:http://user:pass@10.10.1.10:3128 example.org\n</pre>\n<div id=\"environment-variables\">\n<h3><a href=\"#id39\" rel=\"nofollow\">12.1\u00a0\u00a0\u00a0Environment variables</a></h3>\n<p>You can also configure proxies by environment variables <tt>HTTP_PROXY</tt> and\n<tt>HTTPS_PROXY</tt>, and the underlying Requests library will pick them up as well.\nIf you want to disable proxies configured through the environment variables for\ncertain hosts, you can specify them in <tt>NO_PROXY</tt>.</p>\n<p>In your <tt><span class=\"pre\">~/.bash_profile</span></tt>:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">HTTP_PROXY</span><span class=\"o\">=</span>http://10.10.1.10:3128\n<span class=\"nb\">export</span> <span class=\"nv\">HTTPS_PROXY</span><span class=\"o\">=</span>https://10.10.1.10:1080\n<span class=\"nb\">export</span> <span class=\"nv\">NO_PROXY</span><span class=\"o\">=</span>localhost,example.com\n</pre>\n</div>\n<div id=\"socks\">\n<h3><a href=\"#id40\" rel=\"nofollow\">12.2\u00a0\u00a0\u00a0SOCKS</a></h3>\n<p>To enable SOCKS proxy support please install <tt>requests[socks]</tt> using <tt>pip</tt>:</p>\n<pre>$ pip install -U requests<span class=\"o\">[</span>socks<span class=\"o\">]</span>\n</pre>\n<p>Usage is the same as for other types of <a href=\"#proxies\" rel=\"nofollow\">proxies</a>:</p>\n<pre>$ http --proxy<span class=\"o\">=</span>http:socks5://user:pass@host:port --proxy<span class=\"o\">=</span>https:socks5://user:pass@host:port example.org\n</pre>\n</div>\n</div>\n<div id=\"https\">\n<h2><a href=\"#id41\" rel=\"nofollow\">13\u00a0\u00a0\u00a0HTTPS</a></h2>\n<div id=\"server-ssl-certificate-verification\">\n<h3><a href=\"#id42\" rel=\"nofollow\">13.1\u00a0\u00a0\u00a0Server SSL certificate verification</a></h3>\n<p>To skip the host\u2019s SSL certificate verification, you can pass <tt><span class=\"pre\">--verify=no</span></tt>\n(default is <tt>yes</tt>):</p>\n<pre>$ http --verify<span class=\"o\">=</span>no https://example.org\n</pre>\n</div>\n<div id=\"custom-ca-bundle\">\n<h3><a href=\"#id43\" rel=\"nofollow\">13.2\u00a0\u00a0\u00a0Custom CA bundle</a></h3>\n<p>You can also use <tt><span class=\"pre\">--verify=&lt;CA_BUNDLE_PATH&gt;</span></tt> to set a custom CA bundle path:</p>\n<pre>$ http --verify<span class=\"o\">=</span>/ssl/custom_ca_bundle https://example.org\n</pre>\n</div>\n<div id=\"client-side-ssl-certificate\">\n<h3><a href=\"#id44\" rel=\"nofollow\">13.3\u00a0\u00a0\u00a0Client side SSL certificate</a></h3>\n<p>To use a client side certificate for the SSL communication, you can pass\nthe path of the cert file with <tt><span class=\"pre\">--cert</span></tt>:</p>\n<pre>$ http --cert<span class=\"o\">=</span>client.pem https://example.org\n</pre>\n<p>If the private key is not contained in the cert file you may pass the\npath of the key file with <tt><span class=\"pre\">--cert-key</span></tt>:</p>\n<pre>$ http --cert<span class=\"o\">=</span>client.crt --cert-key<span class=\"o\">=</span>client.key https://example.org\n</pre>\n</div>\n<div id=\"ssl-version\">\n<h3><a href=\"#id45\" rel=\"nofollow\">13.4\u00a0\u00a0\u00a0SSL version</a></h3>\n<p>Use the <tt><span class=\"pre\">--ssl=&lt;PROTOCOL&gt;</span></tt> to specify the desired protocol version to use.\nThis will default to SSL v2.3 which will negotiate the highest protocol that both\nthe server and your installation of OpenSSL support. The available protocols\nare <tt>ssl2.3</tt>, <tt>ssl3</tt>, <tt>tls1</tt>, <tt>tls1.1</tt>, <tt>tls1.2</tt>. (The actually\navailable set of protocols may vary depending on your OpenSSL installation.)</p>\n<pre><span class=\"c1\"># Specify the vulnerable SSL v3 protocol to talk to an outdated server:\n</span>$ http --ssl<span class=\"o\">=</span>ssl3 https://vulnerable.example.org\n</pre>\n</div>\n<div id=\"sni-server-name-indication\">\n<h3><a href=\"#id46\" rel=\"nofollow\">13.5\u00a0\u00a0\u00a0SNI (Server Name Indication)</a></h3>\n<p>If you use HTTPie with <a href=\"#python-version\" rel=\"nofollow\">Python version</a> lower than 2.7.9\n(can be verified with <tt>http <span class=\"pre\">--debug</span></tt>) and need to talk to servers that\nuse SNI (Server Name Indication) you need to install some additional\ndependencies:</p>\n<pre>$ pip install --upgrade requests<span class=\"o\">[</span>security<span class=\"o\">]</span>\n</pre>\n<p>You can use the following command to test SNI support:</p>\n<pre>$ http https://sni.velox.ch\n</pre>\n</div>\n</div>\n<div id=\"output-options\">\n<h2><a href=\"#id47\" rel=\"nofollow\">14\u00a0\u00a0\u00a0Output options</a></h2>\n<p>By default, HTTPie only outputs the final response and the whole response\nmessage is printed (headers as well as the body). You can control what should\nbe printed via several options:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><tt><span class=\"pre\">--headers,</span> <span class=\"pre\">-h</span></tt></td>\n<td>Only the response headers are printed.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--body,</span> <span class=\"pre\">-b</span></tt></td>\n<td>Only the response body is printed.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--verbose,</span> <span class=\"pre\">-v</span></tt></td>\n<td>Print the whole HTTP exchange (request and response).\nThis option also enables <tt><span class=\"pre\">--all</span></tt> (see bellow).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--print,</span> <span class=\"pre\">-p</span></tt></td>\n<td>Selects parts of the HTTP exchange.</td>\n</tr>\n</tbody>\n</table>\n<p><tt><span class=\"pre\">--verbose</span></tt> can often be useful for debugging the request and generating\ndocumentation examples:</p>\n<pre>$ http --verbose PUT httpbin.org/put <span class=\"nv\">hello</span><span class=\"o\">=</span>world\nPUT /put HTTP/1.1\nAccept: application/json, */*\nAccept-Encoding: gzip, deflate\nContent-Type: application/json\nHost: httpbin.org\nUser-Agent: HTTPie/0.2.7dev\n\n<span class=\"o\">{</span>\n    <span class=\"s2\">\"hello\"</span>: <span class=\"s2\">\"world\"</span>\n<span class=\"o\">}</span>\n\n\nHTTP/1.1 <span class=\"m\">200</span> OK\nConnection: keep-alive\nContent-Length: <span class=\"m\">477</span>\nContent-Type: application/json\nDate: Sun, <span class=\"m\">05</span> Aug <span class=\"m\">2012</span> <span class=\"m\">00</span>:25:23 GMT\nServer: gunicorn/0.13.4\n\n<span class=\"o\">{</span>\n    <span class=\"o\">[</span>\u2026<span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</pre>\n<div id=\"what-parts-of-the-http-exchange-should-be-printed\">\n<h3><a href=\"#id48\" rel=\"nofollow\">14.1\u00a0\u00a0\u00a0What parts of the HTTP exchange should be printed</a></h3>\n<p>All the other <a href=\"#output-options\" rel=\"nofollow\">output options</a> are under the hood just shortcuts for\nthe more powerful <tt><span class=\"pre\">--print,</span> <span class=\"pre\">-p</span></tt>. It accepts a string of characters each\nof which represents a specific part of the HTTP exchange:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Character</th>\n<th>Stands for</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>H</tt></td>\n<td>request headers</td>\n</tr>\n<tr><td><tt>B</tt></td>\n<td>request body</td>\n</tr>\n<tr><td><tt>h</tt></td>\n<td>response headers</td>\n</tr>\n<tr><td><tt>b</tt></td>\n<td>response body</td>\n</tr>\n</tbody>\n</table>\n<p>Print request and response headers:</p>\n<pre>$ http --print<span class=\"o\">=</span>Hh PUT httpbin.org/put <span class=\"nv\">hello</span><span class=\"o\">=</span>world\n</pre>\n</div>\n<div id=\"viewing-intermediary-requests-responses\">\n<h3><a href=\"#id49\" rel=\"nofollow\">14.2\u00a0\u00a0\u00a0Viewing intermediary requests/responses</a></h3>\n<p>To see all the HTTP communication, i.e. the final request/response as\nwell as any possible  intermediary requests/responses, use the <tt><span class=\"pre\">--all</span></tt>\noption. The intermediary HTTP communication include followed redirects\n(with <tt><span class=\"pre\">--follow</span></tt>), the first unauthorized request when HTTP digest\nauthentication is used (<tt><span class=\"pre\">--auth=digest</span></tt>), etc.</p>\n<pre><span class=\"c1\"># Include all responses that lead to the final one:\n</span>$ http --all --follow httpbin.org/redirect/3\n</pre>\n<p>The intermediary requests/response are by default formatted according to\n<tt><span class=\"pre\">--print,</span> <span class=\"pre\">-p</span></tt> (and its shortcuts described above). If you\u2019d like to change\nthat, use the <tt><span class=\"pre\">--history-print,</span> <span class=\"pre\">-P</span></tt> option. It takes the same\narguments as <tt><span class=\"pre\">--print,</span> <span class=\"pre\">-p</span></tt> but applies to the intermediary requests only.</p>\n<pre><span class=\"c1\"># Print the intermediary requests/responses differently than the final one:\n</span>$ http -A digest -a foo:bar --all -p Hh -P H httpbin.org/digest-auth/auth/foo/bar\n</pre>\n</div>\n<div id=\"conditional-body-download\">\n<h3><a href=\"#id50\" rel=\"nofollow\">14.3\u00a0\u00a0\u00a0Conditional body download</a></h3>\n<p>As an optimization, the response body is downloaded from the server\nonly if it\u2019s part of the output. This is similar to performing a <tt>HEAD</tt>\nrequest, except that it applies to any HTTP method you use.</p>\n<p>Let\u2019s say that there is an API that returns the whole resource when it is\nupdated, but you are only interested in the response headers to see the\nstatus code after an update:</p>\n<pre>$ http --headers PATCH example.org/Really-Huge-Resource <span class=\"nv\">name</span><span class=\"o\">=</span><span class=\"s1\">'New Name'</span>\n</pre>\n<p>Since we are only printing the HTTP headers here, the connection to the server\nis closed as soon as all the response headers have been received.\nTherefore, bandwidth and time isn\u2019t wasted downloading the body\nwhich you don\u2019t care about. The response headers are downloaded always,\neven if they are not part of the output</p>\n</div>\n</div>\n<div id=\"redirected-input\">\n<h2><a href=\"#id51\" rel=\"nofollow\">15\u00a0\u00a0\u00a0Redirected Input</a></h2>\n<p>The universal method for passing request data is through redirected <tt>stdin</tt>\n(standard input)\u2014piping. Such data is buffered and then with no further\nprocessing used as the request body. There are multiple useful ways to use\npiping:</p>\n<p>Redirect from a file:</p>\n<pre>$ http PUT example.com/person/1 X-API-Token:123 &lt; person.json\n</pre>\n<p>Or the output of another program:</p>\n<pre>$ grep <span class=\"s1\">'401 Unauthorized'</span> /var/log/httpd/error_log <span class=\"p\">|</span> http POST example.org/intruders\n</pre>\n<p>You can use <tt>echo</tt> for simple data:</p>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s1\">'{\"name\": \"John\"}'</span> <span class=\"p\">|</span> http PATCH example.com/person/1 X-API-Token:123\n</pre>\n<p>You can even pipe web services together using HTTPie:</p>\n<pre>$ http GET https://api.github.com/repos/jkbrzt/httpie <span class=\"p\">|</span> http POST httpbin.org/post\n</pre>\n<p>You can use <tt>cat</tt> to enter multiline data on the terminal:</p>\n<pre>$ cat <span class=\"p\">|</span> http POST example.com\n&lt;paste&gt;\n^D\n</pre>\n<pre>$ cat <span class=\"p\">|</span> http POST example.com/todos Content-Type:text/plain\n- buy milk\n- call parents\n^D\n</pre>\n<p>On OS X, you can send the contents of the clipboard with <tt>pbpaste</tt>:</p>\n<pre>$ pbpaste <span class=\"p\">|</span> http PUT example.com\n</pre>\n<p>Passing data through <tt>stdin</tt> cannot be combined with data fields specified\non the command line:</p>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s1\">'data'</span> <span class=\"p\">|</span> http POST example.org <span class=\"nv\">more</span><span class=\"o\">=</span>data   <span class=\"c1\"># This is invalid</span>\n</pre>\n<p>To prevent HTTPie from reading <tt>stdin</tt> data you can use the\n<tt><span class=\"pre\">--ignore-stdin</span></tt> option.</p>\n<div id=\"request-data-from-a-filename\">\n<h3><a href=\"#id52\" rel=\"nofollow\">15.1\u00a0\u00a0\u00a0Request data from a filename</a></h3>\n<p>An alternative to redirected <tt>stdin</tt> is specifying a filename (as\n<tt>@/path/to/file</tt>) whose content is used as if it came from <tt>stdin</tt>.</p>\n<p>It has the advantage that the <tt><span class=\"pre\">Content-Type</span></tt>\nheader is automatically set to the appropriate value based on the\nfilename extension. For example, the following request sends the\nverbatim contents of that XML file with <tt><span class=\"pre\">Content-Type:</span> application/xml</tt>:</p>\n<pre>$ http PUT httpbin.org/put @/data/file.xml\n</pre>\n</div>\n</div>\n<div id=\"terminal-output\">\n<h2><a href=\"#id53\" rel=\"nofollow\">16\u00a0\u00a0\u00a0Terminal output</a></h2>\n<p>HTTPie does several things by default in order to make its terminal output\neasy to read.</p>\n<div id=\"colors-and-formatting\">\n<h3><a href=\"#id54\" rel=\"nofollow\">16.1\u00a0\u00a0\u00a0Colors and formatting</a></h3>\n<p>Syntax highlighting is applied to HTTP headers and bodies (where it makes\nsense). You can choose your preferred color scheme via the <tt><span class=\"pre\">--style</span></tt> option\nif you don\u2019t like the default one (see <tt>$ http <span class=\"pre\">--help</span></tt> for the possible\nvalues).</p>\n<p>Also, the following formatting is applied:</p>\n<ul>\n<li>HTTP headers are sorted by name.</li>\n<li>JSON data is indented, sorted by keys, and unicode escapes are converted\nto the characters they represent.</li>\n</ul>\n<p>One of these options can be used to control output processing:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><tt><span class=\"pre\">--pretty=all</span></tt></td>\n<td>Apply both colors and formatting.\nDefault for terminal output.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--pretty=colors</span></tt></td>\n<td>Apply colors.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--pretty=format</span></tt></td>\n<td>Apply formatting.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--pretty=none</span></tt></td>\n<td>Disables output processing.\nDefault for redirected output.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"binary-data\">\n<h3><a href=\"#id55\" rel=\"nofollow\">16.2\u00a0\u00a0\u00a0Binary data</a></h3>\n<p>Binary data is suppressed for terminal output, which makes it safe to perform\nrequests to URLs that send back binary data. Binary data is suppressed also in\nredirected, but prettified output. The connection is closed as soon as we know\nthat the response body is binary,</p>\n<pre>$ http example.org/Movie.mov\n</pre>\n<p>You will nearly instantly see something like this:</p>\n<pre><span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span> <span class=\"m\">200</span> <span class=\"ne\">OK</span>\n<span class=\"na\">Accept-Ranges</span><span class=\"o\">:</span> <span class=\"l\">bytes</span>\n<span class=\"na\">Content-Encoding</span><span class=\"o\">:</span> <span class=\"l\">gzip</span>\n<span class=\"na\">Content-Type</span><span class=\"o\">:</span> <span class=\"l\">video/quicktime</span>\n<span class=\"na\">Transfer-Encoding</span><span class=\"o\">:</span> <span class=\"l\">chunked</span>\n\n+-----------------------------------------+\n| NOTE: binary data not shown in terminal |\n+-----------------------------------------+\n</pre>\n</div>\n</div>\n<div id=\"redirected-output\">\n<h2><a href=\"#id56\" rel=\"nofollow\">17\u00a0\u00a0\u00a0Redirected output</a></h2>\n<p>HTTPie uses a different set of defaults for redirected output than for\n<a href=\"#terminal-output\" rel=\"nofollow\">terminal output</a>. The differences being:</p>\n<ul>\n<li>Formatting and colors aren\u2019t applied (unless <tt><span class=\"pre\">--pretty</span></tt> is specified).</li>\n<li>Only the response body is printed (unless one of the <a href=\"#output-options\" rel=\"nofollow\">output options</a> is set).</li>\n<li>Also, binary data isn\u2019t suppressed.</li>\n</ul>\n<p>The reason is to make piping HTTPie\u2019s output to another programs and\ndownloading files work with no extra flags. Most of the time, only the raw\nresponse body is of an interest when the output is redirected.</p>\n<p>Download a file:</p>\n<pre>$ http example.org/Movie.mov &gt; Movie.mov\n</pre>\n<p>Download an image of Octocat, resize it using ImageMagick, upload it elsewhere:</p>\n<pre>$ http octodex.github.com/images/original.jpg <span class=\"p\">|</span> convert - -resize <span class=\"m\">25</span>% -  <span class=\"p\">|</span> http example.org/Octocats\n</pre>\n<p>Force colorizing and formatting, and show both the request and the response in\n<tt>less</tt> pager:</p>\n<pre>$ http --pretty<span class=\"o\">=</span>all --verbose example.org <span class=\"p\">|</span> less -R\n</pre>\n<p>The <tt><span class=\"pre\">-R</span></tt> flag tells <tt>less</tt> to interpret color escape sequences included\nHTTPie`s output.</p>\n<p>You can create a shortcut for invoking HTTPie with colorized and paged output\nby adding the following to your <tt><span class=\"pre\">~/.bash_profile</span></tt>:</p>\n<pre><span class=\"k\">function</span> httpless <span class=\"o\">{</span>\n    <span class=\"c1\"># `httpless example.org'\n</span>    http --pretty<span class=\"o\">=</span>all --print<span class=\"o\">=</span>hb <span class=\"s2\">\"</span><span class=\"nv\">$@</span><span class=\"s2\">\"</span> <span class=\"p\">|</span> less -R<span class=\"p\">;</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<div id=\"download-mode\">\n<h2><a href=\"#id57\" rel=\"nofollow\">18\u00a0\u00a0\u00a0Download mode</a></h2>\n<p>HTTPie features a download mode in which it acts similarly to <tt>wget</tt>.</p>\n<p>When enabled using the <tt><span class=\"pre\">--download,</span> <span class=\"pre\">-d</span></tt> flag, response headers are printed to\nthe terminal (<tt>stderr</tt>), and a progress bar is shown while the response body\nis being saved to a file.</p>\n<pre>$ http --download https://github.com/jkbrzt/httpie/archive/master.tar.gz\n</pre>\n<pre><span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span> <span class=\"m\">200</span> <span class=\"ne\">OK</span>\n<span class=\"na\">Content-Disposition</span><span class=\"o\">:</span> <span class=\"l\">attachment; filename=httpie-master.tar.gz</span>\n<span class=\"na\">Content-Length</span><span class=\"o\">:</span> <span class=\"l\">257336</span>\n<span class=\"na\">Content-Type</span><span class=\"o\">:</span> <span class=\"l\">application/x-gzip</span>\n\nDownloading 251.30 kB to \"httpie-master.tar.gz\"\nDone. 251.30 kB in 2.73862s (91.76 kB/s)\n</pre>\n<div id=\"downloaded-file-name\">\n<h3><a href=\"#id58\" rel=\"nofollow\">18.1\u00a0\u00a0\u00a0Downloaded file name</a></h3>\n<p>If not provided via <tt><span class=\"pre\">--output,</span> <span class=\"pre\">-o</span></tt>, the output filename will be determined\nfrom <tt><span class=\"pre\">Content-Disposition</span></tt> (if available), or from the URL and\n<tt><span class=\"pre\">Content-Type</span></tt>. If the guessed filename already exists, HTTPie adds a unique\nsuffix to it.</p>\n</div>\n<div id=\"piping-while-downloading\">\n<h3><a href=\"#id59\" rel=\"nofollow\">18.2\u00a0\u00a0\u00a0Piping while downloading</a></h3>\n<p>You can also redirect the response body to another program while the response\nheaders and progress are still shown in the terminal:</p>\n<pre>$ http -d https://github.com/jkbrzt/httpie/archive/master.tar.gz <span class=\"p\">|</span>  tar zxf -\n</pre>\n</div>\n<div id=\"resuming-downloads\">\n<h3><a href=\"#id60\" rel=\"nofollow\">18.3\u00a0\u00a0\u00a0Resuming downloads</a></h3>\n<p>If <tt><span class=\"pre\">--output,</span> <span class=\"pre\">-o</span></tt> is specified, you can resume a partial download using the\n<tt><span class=\"pre\">--continue,</span> <span class=\"pre\">-c</span></tt> option. This only works with servers that support\n<tt>Range</tt> requests and <tt>206 Partial Content</tt> responses. If the server doesn\u2019t\nsupport that, the whole file will simply be downloaded:</p>\n<pre>$ http -dco file.zip example.org/file\n</pre>\n</div>\n<div id=\"other-notes\">\n<h3><a href=\"#id61\" rel=\"nofollow\">18.4\u00a0\u00a0\u00a0Other notes</a></h3>\n<ul>\n<li>The <tt><span class=\"pre\">--download</span></tt> option only changes how the response body is treated.</li>\n<li>You can still set custom headers, use sessions, <tt><span class=\"pre\">--verbose,</span> <span class=\"pre\">-v</span></tt>, etc.</li>\n<li><tt><span class=\"pre\">--download</span></tt> always implies <tt><span class=\"pre\">--follow</span></tt> (redirects are followed).</li>\n<li>HTTPie exits with status code <tt>1</tt> (error) if the body hasn\u2019t been fully\ndownloaded.</li>\n<li><tt><span class=\"pre\">Accept-Encoding</span></tt> cannot be set with <tt><span class=\"pre\">--download</span></tt>.</li>\n</ul>\n</div>\n</div>\n<div id=\"streamed-responses\">\n<h2><a href=\"#id62\" rel=\"nofollow\">19\u00a0\u00a0\u00a0Streamed responses</a></h2>\n<p>Responses are downloaded and printed in chunks which allows for streaming\nand large file downloads without using too much memory. However, when\n<a href=\"#colors-and-formatting\" rel=\"nofollow\">colors and formatting</a> is applied, the whole response is buffered and only\nthen processed at once.</p>\n<div id=\"disabling-buffering\">\n<h3><a href=\"#id63\" rel=\"nofollow\">19.1\u00a0\u00a0\u00a0Disabling buffering</a></h3>\n<p>You can use the <tt><span class=\"pre\">--stream,</span> <span class=\"pre\">-S</span></tt> flag to make two things happen:</p>\n<ol>\n<li>The output is flushed in much smaller chunks without any buffering,\nwhich makes HTTPie behave kind of like <tt>tail <span class=\"pre\">-f</span></tt> for URLs.</li>\n<li>Streaming becomes enabled even when the output is prettified: It will be\napplied to each line of the response and flushed immediately. This makes\nit possible to have a nice output for long-lived requests, such as one\nto the Twitter streaming API.</li>\n</ol>\n</div>\n<div id=\"examples-use-cases\">\n<h3><a href=\"#id64\" rel=\"nofollow\">19.2\u00a0\u00a0\u00a0Examples use cases</a></h3>\n<p>Prettified streamed response:</p>\n<pre>$ http --stream -f -a YOUR-TWITTER-NAME https://stream.twitter.com/1/statuses/filter.json <span class=\"nv\">track</span><span class=\"o\">=</span><span class=\"s1\">'Justin Bieber'</span>\n</pre>\n<p>Streamed output by small chunks al\u00e1 <tt>tail <span class=\"pre\">-f</span></tt>:</p>\n<pre><span class=\"c1\"># Send each new tweet (JSON object) mentioning \"Apple\" to another\n# server as soon as it arrives from the Twitter streaming API:\n</span>$ http --stream -f -a YOUR-TWITTER-NAME https://stream.twitter.com/1/statuses/filter.json <span class=\"nv\">track</span><span class=\"o\">=</span>Apple <span class=\"se\">\\\n</span><span class=\"p\">|</span> <span class=\"k\">while</span> <span class=\"nb\">read</span> tweet<span class=\"p\">;</span> <span class=\"k\">do</span> <span class=\"nb\">echo</span> <span class=\"s2\">\"</span><span class=\"nv\">$tweet</span><span class=\"s2\">\"</span> <span class=\"p\">|</span> http POST example.org/tweets <span class=\"p\">;</span> <span class=\"k\">done</span>\n</pre>\n</div>\n</div>\n<div id=\"sessions\">\n<h2><a href=\"#id65\" rel=\"nofollow\">20\u00a0\u00a0\u00a0Sessions</a></h2>\n<p>By default, every request HTTPie makes is completely independent of any\nprevious ones to the same host.</p>\n<p>However, HTTPie also supports persistent\nsessions via the <tt><span class=\"pre\">--session=SESSION_NAME_OR_PATH</span></tt> option. In a session,\ncustom headers\u2014except for the ones starting with <tt>Content-</tt> or <tt>If-</tt>\u2014,\nauthorization, and cookies\n(manually specified or sent by the server) persist between requests\nto the same host.</p>\n<pre><span class=\"c1\"># Create a new session\n</span>$ http --session<span class=\"o\">=</span>/tmp/session.json example.org API-Token:123\n\n<span class=\"c1\"># Re-use an existing session \u2014 API-Token will be set:\n</span>$ http --session<span class=\"o\">=</span>/tmp/session.json example.org\n</pre>\n<p>All session data, including credentials, cookie data,\nand custom headers are stored in plain text.\nThat means session files can also be created and edited manually in a text\neditor\u2014they are regular JSON.</p>\n<div id=\"named-sessions\">\n<h3><a href=\"#id66\" rel=\"nofollow\">20.1\u00a0\u00a0\u00a0Named sessions</a></h3>\n<p>You can create one or more named session per host. For example, this is how\nyou can create a new session named <tt>user1</tt> for <tt>example.org</tt>:</p>\n<pre>$ http --session<span class=\"o\">=</span>user1 -a user1:password example.org X-Foo:Bar\n</pre>\n<p>From now onw, you can refer to the session by its name. When you choose to\nuse the session again, any the previously used authorization and HTTP headers\nwill automatically be set:</p>\n<pre>$ http --session<span class=\"o\">=</span>user1 example.org\n</pre>\n<p>To create or reuse a different session, simple specify a different name:</p>\n<pre>$ http --session<span class=\"o\">=</span>user2 -a user2:password example.org X-Bar:Foo\n</pre>\n<p>Named sessions\u2019 data is stored in JSON files in the directory\n<tt><span class=\"pre\">~/.httpie/sessions/&lt;host&gt;/&lt;name&gt;.json</span></tt>\n(<tt><span class=\"pre\">%APPDATA%\\httpie\\sessions\\&lt;host&gt;\\&lt;name&gt;.json</span></tt> on Windows).</p>\n</div>\n<div id=\"anonymous-sessions\">\n<h3><a href=\"#id67\" rel=\"nofollow\">20.2\u00a0\u00a0\u00a0Anonymous sessions</a></h3>\n<p>Instead of a name, you can also directly specify a path to a session file. This\nallows for sessions to be re-used across multiple hosts:</p>\n<pre>$ http --session<span class=\"o\">=</span>/tmp/session.json example.org\n$ http --session<span class=\"o\">=</span>/tmp/session.json admin.example.org\n$ http --session<span class=\"o\">=</span>~/.httpie/sessions/another.example.org/test.json example.org\n$ http --session-read-only<span class=\"o\">=</span>/tmp/session.json example.org\n</pre>\n</div>\n<div id=\"readonly-session\">\n<h3><a href=\"#id68\" rel=\"nofollow\">20.3\u00a0\u00a0\u00a0Readonly session</a></h3>\n<p>To use an existing session file without updating it from the request/response\nexchange once it is created, specify the session name via\n<tt><span class=\"pre\">--session-read-only=SESSION_NAME_OR_PATH</span></tt> instead.</p>\n</div>\n</div>\n<div id=\"config\">\n<h2><a href=\"#id69\" rel=\"nofollow\">21\u00a0\u00a0\u00a0Config</a></h2>\n<p>HTTPie uses a simple JSON config file.</p>\n<div id=\"config-file-location\">\n<h3><a href=\"#id70\" rel=\"nofollow\">21.1\u00a0\u00a0\u00a0Config file location</a></h3>\n<p>The default location of the configuration file is <tt><span class=\"pre\">~/.httpie/config.json</span></tt>\n(or <tt><span class=\"pre\">%APPDATA%\\httpie\\config.json</span></tt> on Windows). The config directory\nlocation can be changed by setting the <tt>HTTPIE_CONFIG_DIR</tt>\nenvironment variable. To view the exact location run <tt>http <span class=\"pre\">--debug</span></tt>.</p>\n</div>\n<div id=\"configurable-options\">\n<h3><a href=\"#id71\" rel=\"nofollow\">21.2\u00a0\u00a0\u00a0Configurable options</a></h3>\n<p>The JSON file contains an object with the following keys:</p>\n<div id=\"default-options\">\n<h4><a href=\"#id72\" rel=\"nofollow\">21.2.1\u00a0\u00a0\u00a0<tt>default_options</tt></a></h4>\n<p>An <tt>Array</tt> (by default empty) of default options that should be applied to\nevery invocation of HTTPie.</p>\n<p>For instance, you can use this option to change the default style and output\noptions: <tt>\"default_options\": <span class=\"pre\">[\"--style=fruity\",</span> <span class=\"pre\">\"--body\"]</span></tt> Another useful\ndefault option could be <tt><span class=\"pre\">\"--session=default\"</span></tt> to make HTTPie always\nuse <a href=\"#sessions\" rel=\"nofollow\">sessions</a> (one named <tt>default</tt> will automatically be used).\nOr you could change the implicit request content type from JSON to form by\nadding <tt><span class=\"pre\">--form</span></tt> to the list.</p>\n</div>\n<div id=\"meta\">\n<h4><a href=\"#id73\" rel=\"nofollow\">21.2.2\u00a0\u00a0\u00a0<tt>__meta__</tt></a></h4>\n<p>HTTPie automatically stores some of its metadata here. Please do not change.</p>\n</div>\n</div>\n<div id=\"un-setting-previously-specified-options\">\n<h3><a href=\"#id74\" rel=\"nofollow\">21.3\u00a0\u00a0\u00a0Un-setting previously specified options</a></h3>\n<p>Default options from the config file, or specified any other way,\ncan be unset for a particular invocation via <tt><span class=\"pre\">--no-OPTION</span></tt> arguments passed\non the command line (e.g., <tt><span class=\"pre\">--no-style</span></tt> or <tt><span class=\"pre\">--no-session</span></tt>).</p>\n</div>\n</div>\n<div id=\"scripting\">\n<h2><a href=\"#id75\" rel=\"nofollow\">22\u00a0\u00a0\u00a0Scripting</a></h2>\n<p>When using HTTPie from shell scripts, it can be handy to set the\n<tt><span class=\"pre\">--check-status</span></tt> flag. It instructs HTTPie to exit with an error if the\nHTTP status is one of <tt>3xx</tt>, <tt>4xx</tt>, or <tt>5xx</tt>. The exit status will\nbe <tt>3</tt> (unless <tt><span class=\"pre\">--follow</span></tt> is set), <tt>4</tt>, or <tt>5</tt>,\nrespectively.</p>\n<pre><span class=\"ch\">#!/bin/bash\n</span>\n<span class=\"k\">if</span> http --check-status --ignore-stdin --timeout<span class=\"o\">=</span><span class=\"m\">2</span>.5 HEAD example.org/health <span class=\"p\">&amp;</span>&gt; /dev/null<span class=\"p\">;</span> <span class=\"k\">then</span>\n    <span class=\"nb\">echo</span> <span class=\"s1\">'OK!'</span>\n<span class=\"k\">else</span>\n    <span class=\"k\">case</span> <span class=\"nv\">$?</span> in\n        <span class=\"m\">2</span><span class=\"o\">)</span> <span class=\"nb\">echo</span> <span class=\"s1\">'Request timed out!'</span> <span class=\"p\">;;</span>\n        <span class=\"m\">3</span><span class=\"o\">)</span> <span class=\"nb\">echo</span> <span class=\"s1\">'Unexpected HTTP 3xx Redirection!'</span> <span class=\"p\">;;</span>\n        <span class=\"m\">4</span><span class=\"o\">)</span> <span class=\"nb\">echo</span> <span class=\"s1\">'HTTP 4xx Client Error!'</span> <span class=\"p\">;;</span>\n        <span class=\"m\">5</span><span class=\"o\">)</span> <span class=\"nb\">echo</span> <span class=\"s1\">'HTTP 5xx Server Error!'</span> <span class=\"p\">;;</span>\n        <span class=\"m\">6</span><span class=\"o\">)</span> <span class=\"nb\">echo</span> <span class=\"s1\">'Exceeded --max-redirects=&lt;n&gt; redirects!'</span> <span class=\"p\">;;</span>\n        *<span class=\"o\">)</span> <span class=\"nb\">echo</span> <span class=\"s1\">'Other Error!'</span> <span class=\"p\">;;</span>\n    <span class=\"k\">esac</span>\n<span class=\"k\">fi</span>\n</pre>\n<div id=\"best-practices\">\n<h3><a href=\"#id76\" rel=\"nofollow\">22.1\u00a0\u00a0\u00a0Best practices</a></h3>\n<p>The default behaviour of automatically reading <tt>stdin</tt> is typically not\ndesirable during non-interactive invocations. You most likely want\nuse the <tt><span class=\"pre\">--ignore-stdin</span></tt> option to disable it.</p>\n<p>It is a common gotcha that without this option HTTPie seemingly hangs.\nWhat happens is that when HTTPie is invoked for example from a cron job,\n<tt>stdin</tt> is not connected to a terminal.\nTherefore, rules for <a href=\"#redirected-input\" rel=\"nofollow\">redirected input</a> apply, i.e., HTTPie starts to read it\nexpecting that the request body will be passed through.\nAnd since there\u2019s no data nor <tt>EOF</tt>, it will be stuck. So unless you\u2019re\npiping some data to HTTPie, this flag should be used in scripts.</p>\n<p>Also, it\u2019s might be good to override the default <tt>30</tt> second <tt><span class=\"pre\">--timeout</span></tt> to\nsomething that suits you.</p>\n</div>\n</div>\n<div id=\"id1\">\n<h2><a href=\"#id77\" rel=\"nofollow\">23\u00a0\u00a0\u00a0Meta</a></h2>\n<div id=\"interface-design\">\n<h3><a href=\"#id78\" rel=\"nofollow\">23.1\u00a0\u00a0\u00a0Interface design</a></h3>\n<p>The syntax of the command arguments closely corresponds to the actual HTTP\nrequests sent over the wire. It has the advantage  that it\u2019s easy to remember\nand read. It is often possible to translate an HTTP request to an HTTPie\nargument list just by inlining the request elements. For example, compare this\nHTTP request:</p>\n<pre><span class=\"nf\">POST</span> <span class=\"nn\">/collection</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">X-API-Key</span><span class=\"o\">:</span> <span class=\"l\">123</span>\n<span class=\"na\">User-Agent</span><span class=\"o\">:</span> <span class=\"l\">Bacon/1.0</span>\n<span class=\"na\">Content-Type</span><span class=\"o\">:</span> <span class=\"l\">application/x-www-form-urlencoded</span>\n\nname=value&amp;name2=value2\n</pre>\n<p>with the HTTPie command that sends it:</p>\n<pre>$ http -f POST example.org/collection <span class=\"se\">\\\n</span>  X-API-Key:123 <span class=\"se\">\\\n</span>  User-Agent:Bacon/1.0 <span class=\"se\">\\\n</span>  <span class=\"nv\">name</span><span class=\"o\">=</span>value <span class=\"se\">\\\n</span>  <span class=\"nv\">name2</span><span class=\"o\">=</span>value2\n</pre>\n<p>Notice that both the order of elements and the syntax is very similar,\nand that only a small portion of the command is used to control HTTPie and\ndoesn\u2019t directly correspond to any part of the request (here it\u2019s only <tt><span class=\"pre\">-f</span></tt>\nasking HTTPie to send a form request).</p>\n<p>The two modes, <tt><span class=\"pre\">--pretty=all</span></tt> (default for terminal) and <tt><span class=\"pre\">--pretty=none</span></tt>\n(default for redirected output), allow for both user-friendly interactive use\nand usage from scripts, where HTTPie serves as a generic HTTP client.</p>\n<p>As HTTPie is still under heavy development, the existing command line\nsyntax and some of the <tt><span class=\"pre\">--OPTIONS</span></tt> may change slightly before\nHTTPie reaches its final version <tt>1.0</tt>. All changes are recorded in the\n<a href=\"#change-log\" rel=\"nofollow\">change log</a>.</p>\n</div>\n<div id=\"user-support\">\n<h3><a href=\"#id79\" rel=\"nofollow\">23.2\u00a0\u00a0\u00a0User support</a></h3>\n<p>Please use the following support channels:</p>\n<ul>\n<li><a href=\"https://github.com/jkbr/httpie/issues\" rel=\"nofollow\">GitHub issues</a>\nfor bug reports and feature requests.</li>\n<li><a href=\"https://gitter.im/jkbrzt/httpie\" rel=\"nofollow\">Our Gitter chat room</a>\nto ask questions, discuss features, and for general discussion.</li>\n<li><a href=\"https://stackoverflow.com\" rel=\"nofollow\">StackOverflow</a>\nto ask questions (please make sure to use the\n<a href=\"http://stackoverflow.com/questions/tagged/httpie\" rel=\"nofollow\">httpie</a> tag).</li>\n<li>Tweet directly to <a href=\"https://twitter.com/clihttp\" rel=\"nofollow\">@clihttp</a>.</li>\n<li>You can also tweet directly to <a href=\"https://twitter.com/jkbrzt\" rel=\"nofollow\">@jkbrzt</a>.</li>\n</ul>\n</div>\n<div id=\"related-projects\">\n<h3><a href=\"#id80\" rel=\"nofollow\">23.3\u00a0\u00a0\u00a0Related projects</a></h3>\n<div id=\"dependencies\">\n<h4><a href=\"#id81\" rel=\"nofollow\">23.3.1\u00a0\u00a0\u00a0Dependencies</a></h4>\n<p>Under the hood, HTTPie uses these two amazing libraries:</p>\n<ul>\n<li><a href=\"http://python-requests.org\" rel=\"nofollow\">Requests</a>\n\u2014 Python HTTP library for humans</li>\n<li><a href=\"http://pygments.org/\" rel=\"nofollow\">Pygments</a>\n\u2014 Python syntax highlighter</li>\n</ul>\n</div>\n<div id=\"httpie-friends\">\n<h4><a href=\"#id82\" rel=\"nofollow\">23.3.2\u00a0\u00a0\u00a0HTTPie friends</a></h4>\n<p>HTTPie plays exceptionally well with the following tools:</p>\n<ul>\n<li><a href=\"https://stedolan.github.io/jq/\" rel=\"nofollow\">jq</a>\n\u2014 CLI JSON processor that\nworks great in conjunction with HTTPie</li>\n<li><a href=\"https://github.com/eliangcs/http-prompt\" rel=\"nofollow\">http-prompt</a>\n\u2014  interactive shell for HTTPie featuring autocomplete\nand command syntax highlighting</li>\n</ul>\n</div>\n</div>\n<div id=\"contributing\">\n<h3><a href=\"#id83\" rel=\"nofollow\">23.4\u00a0\u00a0\u00a0Contributing</a></h3>\n<p>See <a href=\"https://github.com/jkbrzt/httpie/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">CONTRIBUTING.rst</a>.</p>\n</div>\n<div id=\"change-log\">\n<h3><a href=\"#id84\" rel=\"nofollow\">23.5\u00a0\u00a0\u00a0Change log</a></h3>\n<p>See <a href=\"https://github.com/jkbrzt/httpie/blob/master/CHANGELOG.rst\" rel=\"nofollow\">CHANGELOG</a>.</p>\n</div>\n<div id=\"artwork\">\n<h3><a href=\"#id85\" rel=\"nofollow\">23.6\u00a0\u00a0\u00a0Artwork</a></h3>\n<p>See <a href=\"https://github.com/claudiatd/httpie-artwork\" rel=\"nofollow\">claudiatd/httpie-artwork</a></p>\n</div>\n<div id=\"licence\">\n<h3><a href=\"#id86\" rel=\"nofollow\">23.7\u00a0\u00a0\u00a0Licence</a></h3>\n<p>BSD-3-Clause: <a href=\"https://github.com/jkbrzt/httpie/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n</div>\n<div id=\"authors\">\n<h3><a href=\"#id87\" rel=\"nofollow\">23.8\u00a0\u00a0\u00a0Authors</a></h3>\n<p><a href=\"http://roztocil.co\" rel=\"nofollow\">Jakub Roztocil</a>  (<a href=\"https://twitter.com/jkbrzt\" rel=\"nofollow\">@jkbrzt</a>) created HTTPie and <a href=\"https://github.com/jkbrzt/httpie/contributors\" rel=\"nofollow\">these fine people</a>\nhave contributed.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2508549, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "83fbf51069fc8a9ee6b25105fa314c71", "sha256": "73487915f2647d9b93d2f5340c9c7b28d7c7ed0da083d27a5bbc7c14e234b946"}, "downloads": -1, "filename": "readme-test-0.1.5.tar.gz", "has_sig": false, "md5_digest": "83fbf51069fc8a9ee6b25105fa314c71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44042, "upload_time": "2016-12-09T11:21:34", "upload_time_iso_8601": "2016-12-09T11:21:34.964249Z", "url": "https://files.pythonhosted.org/packages/e5/dc/99e6460245d218389c8ca01cc2fcf041c1eaae3f349491d34cdb9a4d115d/readme-test-0.1.5.tar.gz", "yanked": false}], "1": [], "2.0.0": [{"comment_text": "", "digests": {"md5": "9a2330051f3dafea7e466f37e18c8243", "sha256": "e07ec8a311000ecc8090a316a64737f27e13be1b07ffca4c2195ffb56c35689d"}, "downloads": -1, "filename": "readme-test-2.0.0.tar.gz", "has_sig": false, "md5_digest": "9a2330051f3dafea7e466f37e18c8243", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43968, "upload_time": "2016-12-09T11:25:38", "upload_time_iso_8601": "2016-12-09T11:25:38.094101Z", "url": "https://files.pythonhosted.org/packages/0a/19/95a25c92568275178c0e61d10003599474a6574a96538879ac9f48afd31a/readme-test-2.0.0.tar.gz", "yanked": false}], "5.3.9": [{"comment_text": "", "digests": {"md5": "c23ee488b3689cf9531503c745f02858", "sha256": "0286d4fb554ad5644bb9921973eb2ade98de6a841fe4fb16332636c1a401281f"}, "downloads": -1, "filename": "readme-test-5.3.9.tar.gz", "has_sig": false, "md5_digest": "c23ee488b3689cf9531503c745f02858", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44042, "upload_time": "2016-12-09T11:25:14", "upload_time_iso_8601": "2016-12-09T11:25:14.677985Z", "url": "https://files.pythonhosted.org/packages/4f/d2/5c8f0f28df7cd6a988e9fe0cb05385a0995f73a2b5c8989773438bf384cf/readme-test-5.3.9.tar.gz", "yanked": false}], "8.9.1": [{"comment_text": "", "digests": {"md5": "ee329b543992c27ff066e59df6949441", "sha256": "3781652a25c1c684d993668c49a53e6c2f7225723ddb3c51f1dc513fbb9314ad"}, "downloads": -1, "filename": "readme-test-8.9.1.tar.gz", "has_sig": false, "md5_digest": "ee329b543992c27ff066e59df6949441", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44613, "upload_time": "2016-12-08T23:22:32", "upload_time_iso_8601": "2016-12-08T23:22:32.609450Z", "url": "https://files.pythonhosted.org/packages/b3/fc/4c2a9ae50fc7d0edecb9d05d6a2e62b1678896dd3a1cf0c343ad96a0e71b/readme-test-8.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee329b543992c27ff066e59df6949441", "sha256": "3781652a25c1c684d993668c49a53e6c2f7225723ddb3c51f1dc513fbb9314ad"}, "downloads": -1, "filename": "readme-test-8.9.1.tar.gz", "has_sig": false, "md5_digest": "ee329b543992c27ff066e59df6949441", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44613, "upload_time": "2016-12-08T23:22:32", "upload_time_iso_8601": "2016-12-08T23:22:32.609450Z", "url": "https://files.pythonhosted.org/packages/b3/fc/4c2a9ae50fc7d0edecb9d05d6a2e62b1678896dd3a1cf0c343ad96a0e71b/readme-test-8.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:25 2020"}