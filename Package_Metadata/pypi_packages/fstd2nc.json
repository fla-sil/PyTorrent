{"info": {"author": "Mike Neish", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Atmospheric Science"], "description": "Overview\n========\nThis module provides a mechanism for converting between FSTD and netCDF file formats, either through Python or the command-line.\n\nBasic Usage\n===========\n\nFrom the command-line\n---------------------\n```\npython -m fstd2nc [options] <infile> <outfile>\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --no-progress         Disable the progress bar.\n  --minimal-metadata    Don't include RPN record attributes and other internal\n                        information in the output metadata. This is the\n                        default behaviour.\n  --rpnstd-metadata     Include all RPN record attributes in the output\n                        metadata.\n  --rpnstd-metadata-list nomvar,...\n                        Specify a minimal set of RPN record attributes to\n                        include in the output file.\n  --ignore-typvar       Tells the converter to ignore the typvar when deciding\n                        if two records are part of the same field. Default is\n                        to split the variable on different typvars.\n  --ignore-etiket       Tells the converter to ignore the etiket when deciding\n                        if two records are part of the same field. Default is\n                        to split the variable on different etikets.\n  --vars VAR1,VAR2,...  Comma-separated list of variables to convert. By\n                        default, all variables are converted.\n  --fill-value FILL_VALUE\n                        The fill value to use for masked (missing) data. Gets\n                        stored as '_FillValue' attribute in the metadata.\n                        Default is '1e+30'.\n  --datev, --squash-forecasts\n                        Use the date of validity for the \"time\" axis. This is\n                        the default.\n  --dateo, --forecast-axis\n                        Use the date of original analysis for the time axis,\n                        and put the forecast times into a separate \"forecast\"\n                        axis.\n  --ensembles           Collect different etikets for the same variable\n                        together into an \"ensemble\" axis.\n  --profile-momentum-vars VAR1,VAR2,...\n                        Comma-separated list of variables that use momentum\n                        levels.\n  --profile-thermodynamic-vars VAR1,VAR2,...\n                        Comma-separated list of variables that use\n                        thermodynamic levels.\n  --missing-bottom-profile-level\n                        Assume the bottom level of the profile data is\n                        missing.\n  --strict-vcoord-match\n                        Require the IP1/IP2/IP3 parameters of the vertical\n                        coordinate to match the IG1/IG2/IG3 paramters of the\n                        field in order to be used. The default behaviour is to\n                        use the vertical record anyway if it's the only one in\n                        the file.\n  --diag-as-model-level\n                        Treat diagnostic (near-surface) data as model level\n                        '1.0'. Normally, this data goes in a separate variable\n                        because it has incompatible units for the vertical\n                        coordinate. Use this option if your variables are\n                        getting split with suffixes '_vgrid4' and '_vgrid5',\n                        and you'd rather keep both sets of levels together in\n                        one variable.\n  --ignore-diag-level   Ignore data on diagnostic (near-surface) height.\n  --subgrid-axis        For data on supergrids, split the subgrids along a\n                        \"subgrid\" axis. The default is to leave the subgrids\n                        stacked together as they are in the RPN file.\n  --keep-LA-LO          Include LA and LO records, even if they appear to be\n                        redundant.\n  --filter CONDITION    Subset RPN file records using the given criteria. For\n                        example, to convert only 24-hour forecasts you could\n                        use --filter ip2==24\n  --exclude NAME,NAME,...\n                        Exclude some axes or derived variables from the\n                        output. Note that axes will only be excluded if they\n                        have a length of 1.\n  --metadata-file METADATA_FILE\n                        Use metadata from the specified file. You can repeat\n                        this option multiple times to build metadata from\n                        different sources.\n  --rename OLDNAME=NEWNAME,...\n                        Apply the specified name changes to the variables.\n  --time-units {seconds,minutes,hours,days}\n                        The units for the output time axis. Default is hours.\n  --reference-date YYYY-MM-DD\n                        The reference date for the output time axis. The\n                        default is the starting date in the RPN file.\n  --msglvl {0,DEBUG,2,INFORM,4,WARNIN,6,ERRORS,8,FATALE,10,SYSTEM,CATAST}\n                        How much information to print to stdout during the\n                        conversion. Default is WARNIN.\n  --nc-format {NETCDF4,NETCDF4_CLASSIC,NETCDF3_CLASSIC,NETCDF3_64BIT_OFFSET,NETCDF3_64BIT_DATA}\n                        Which variant of netCDF to write. Default is NETCDF4.\n  --zlib                Turn on compression for the netCDF file. Only works\n                        for NETCDF4 and NETCDF4_CLASSIC formats.\n  --compression COMPRESSION\n                        Compression level for the netCDF file. Only used if\n                        --zlib is set. Default: 4.\n  -f, --force           Overwrite the output file if it already exists.\n  --no-history          Don't put the command-line invocation in the netCDF\n                        metadata.\n```\n\nUsing in a Python script\n========================\n\nSimple conversion\n--------------------------------------\n```python\nimport fstd2nc\ndata = fstd2nc.Buffer(\"myfile.fst\")\ndata.to_netcdf(\"myfile.nc\")\n```\n\nYou can control `fstd2nc.Buffer` using parameters similar to the command-line arguments.  The usual convention is *--arg-name* from the command-line would be passed as *arg_name* from Python.\n\nFor example:\n```python\nimport fstd2nc\n# Select only TT,HU variables.\ndata = fstd2nc.Buffer(\"myfile.fst\", vars=['TT','HU'])\n# Set the reference date to Jan 1, 2000 in the netCDF file.\ndata.to_netcdf(\"myfile.nc\", reference_date='2000-01-01')\n```\n\nInterfacing with xarray\n---------------------------------------------------------------------------------\n\nFor more complicated conversions, you can manipulate the data as an [xarray.Dataset](http://xarray.pydata.org/en/stable/data-structures.html#dataset) object by using the `to_xarray()` method:\n```python\nimport fstd2nc\n\n# Open the FSTD file.\ndata = fstd2nc.Buffer(\"myfile.fst\")\n\n# Access the data as an xarray.Dataset object.\ndataset = data.to_xarray()\nprint (dataset)\n\n# Convert surface pressure to Pa.\ndataset['P0'] *= 100\ndataset['P0'].attrs['units'] = 'Pa'\n\n# (Can further manipulate the dataset here)\n# ...\n\n# Write the final result to netCDF using xarray:\ndataset.to_netcdf(\"myfile.nc\")\n```\n\nInterfacing with iris\n---------------------------------------------------------------------------------\n\nYou can interface with [iris](https://scitools.org.uk/iris/docs/latest/index.html) by using the `.to_iris()` method (requires iris version 2.0 or greater).\nThis will give you an [iris.cube.CubeList](https://scitools.org.uk/iris/docs/latest/iris/iris/cube.html#iris.cube.CubeList) object:\n```python\nimport fstd2nc\nimport iris.quickplot as qp\nfrom matplotlib import pyplot as pl\n\n# Open the FSTD file.\ndata = fstd2nc.Buffer(\"myfile.fst\")\n\n# Access the data as an iris.cube.CubeList object.\ncubes = data.to_iris()\nprint (cubes)\n\n# Plot all the data (assuming we have 2D fields)\nfor cube in cubes:\n  qp.contourf(cube)\n  pl.gca().coastlines()\n\npl.show()\n```\n\nInterfacing with pygeode\n---------------------------------------------------------------------------------\n\nYou can create a [pygeode.Dataset](http://pygeode.github.io/dataset.html) object using the `.to_pygeode()` method (requires pygeode version 1.2.2 or greater):\n```python\nimport fstd2nc\n\n# Open the FSTD file.\ndata = fstd2nc.Buffer(\"myfile.fst\")\n\n# Access the data as a pygeode.Dataset object.\ndataset = data.to_pygeode()\nprint (dataset)\n```\n\n\nInstalling\n==========\n\nThe easiest way to install is using [pip](https://pip.pypa.io/en/stable):\n```\npip install fstd2nc\n```\n\nIf you're processing many input files into a single netCDF file, you could get some useful features (progress bar, quick file scans) by running:\n```\npip install fstd2nc[manyfiles]\n```\n\nAlternatively, you can install it in a [conda](https://conda.io/docs/index.html) environment:\n```\nconda install -c neishm fstd2nc\n```\n\n\nUsing in a Pydap server\n=======================\n\nThis package includes a handler for [Pydap](https://github.com/pydap/pydap), which enables you to serve your FSTD files via the OPeNDAP protocol.\n\nTo install all the pre-requisites:\n```\npip install pydap fstd2nc[dap]\n```\n\nYou can then test it by running\n```\npydap -d [your data directory]\n```\n\n\nRequirements\n============\n\nBasic requirements\n--------------------\n\nThis package requires [Python-RPN](https://github.com/meteokid/python-rpn) for reading/writing FSTD files, and [netcdf4-python](https://github.com/Unidata/netcdf4-python) for reading/writing netCDF files.\n\nOptional requirements\n---------------------\n\nFor reading large numbers of input files (>100), this utility can leverage [pandas](https://github.com/pandas-dev/pandas) to quickly process the FSTD record headers.\n\nThe [progress](https://github.com/verigak/progress) module is required in order to use the `--progress` option.\n\nThe `.to_xarray()` Python method requires the [xarray](https://github.com/pydata/xarray) and [dask](https://github.com/dask/dask) packages.\n\nThe `.to_iris()` Python method requires the [iris](https://scitools.org.uk/iris/docs/latest/index.html) package, along with the `.to_xarray()` dependencies.\n\nThe `.to_pygeode()` Python method requires the [pygeode](https://github.com/pygeode/pygeode) package, along ith the `.to_xarray()` dependencies.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/neishm/fstd2nc", "keywords": "", "license": "LGPL-3", "maintainer": "", "maintainer_email": "", "name": "fstd2nc", "package_url": "https://pypi.org/project/fstd2nc/", "platform": "", "project_url": "https://pypi.org/project/fstd2nc/", "project_urls": {"Homepage": "https://github.com/neishm/fstd2nc"}, "release_url": "https://pypi.org/project/fstd2nc/0.20190903.1/", "requires_dist": null, "requires_python": "", "summary": "Converts RPN standard files (from Environment Canada) to netCDF files.", "version": "0.20190903.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Overview</h1>\n<p>This module provides a mechanism for converting between FSTD and netCDF file formats, either through Python or the command-line.</p>\n<h1>Basic Usage</h1>\n<h2>From the command-line</h2>\n<pre><code>python -m fstd2nc [options] &lt;infile&gt; &lt;outfile&gt;\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --no-progress         Disable the progress bar.\n  --minimal-metadata    Don't include RPN record attributes and other internal\n                        information in the output metadata. This is the\n                        default behaviour.\n  --rpnstd-metadata     Include all RPN record attributes in the output\n                        metadata.\n  --rpnstd-metadata-list nomvar,...\n                        Specify a minimal set of RPN record attributes to\n                        include in the output file.\n  --ignore-typvar       Tells the converter to ignore the typvar when deciding\n                        if two records are part of the same field. Default is\n                        to split the variable on different typvars.\n  --ignore-etiket       Tells the converter to ignore the etiket when deciding\n                        if two records are part of the same field. Default is\n                        to split the variable on different etikets.\n  --vars VAR1,VAR2,...  Comma-separated list of variables to convert. By\n                        default, all variables are converted.\n  --fill-value FILL_VALUE\n                        The fill value to use for masked (missing) data. Gets\n                        stored as '_FillValue' attribute in the metadata.\n                        Default is '1e+30'.\n  --datev, --squash-forecasts\n                        Use the date of validity for the \"time\" axis. This is\n                        the default.\n  --dateo, --forecast-axis\n                        Use the date of original analysis for the time axis,\n                        and put the forecast times into a separate \"forecast\"\n                        axis.\n  --ensembles           Collect different etikets for the same variable\n                        together into an \"ensemble\" axis.\n  --profile-momentum-vars VAR1,VAR2,...\n                        Comma-separated list of variables that use momentum\n                        levels.\n  --profile-thermodynamic-vars VAR1,VAR2,...\n                        Comma-separated list of variables that use\n                        thermodynamic levels.\n  --missing-bottom-profile-level\n                        Assume the bottom level of the profile data is\n                        missing.\n  --strict-vcoord-match\n                        Require the IP1/IP2/IP3 parameters of the vertical\n                        coordinate to match the IG1/IG2/IG3 paramters of the\n                        field in order to be used. The default behaviour is to\n                        use the vertical record anyway if it's the only one in\n                        the file.\n  --diag-as-model-level\n                        Treat diagnostic (near-surface) data as model level\n                        '1.0'. Normally, this data goes in a separate variable\n                        because it has incompatible units for the vertical\n                        coordinate. Use this option if your variables are\n                        getting split with suffixes '_vgrid4' and '_vgrid5',\n                        and you'd rather keep both sets of levels together in\n                        one variable.\n  --ignore-diag-level   Ignore data on diagnostic (near-surface) height.\n  --subgrid-axis        For data on supergrids, split the subgrids along a\n                        \"subgrid\" axis. The default is to leave the subgrids\n                        stacked together as they are in the RPN file.\n  --keep-LA-LO          Include LA and LO records, even if they appear to be\n                        redundant.\n  --filter CONDITION    Subset RPN file records using the given criteria. For\n                        example, to convert only 24-hour forecasts you could\n                        use --filter ip2==24\n  --exclude NAME,NAME,...\n                        Exclude some axes or derived variables from the\n                        output. Note that axes will only be excluded if they\n                        have a length of 1.\n  --metadata-file METADATA_FILE\n                        Use metadata from the specified file. You can repeat\n                        this option multiple times to build metadata from\n                        different sources.\n  --rename OLDNAME=NEWNAME,...\n                        Apply the specified name changes to the variables.\n  --time-units {seconds,minutes,hours,days}\n                        The units for the output time axis. Default is hours.\n  --reference-date YYYY-MM-DD\n                        The reference date for the output time axis. The\n                        default is the starting date in the RPN file.\n  --msglvl {0,DEBUG,2,INFORM,4,WARNIN,6,ERRORS,8,FATALE,10,SYSTEM,CATAST}\n                        How much information to print to stdout during the\n                        conversion. Default is WARNIN.\n  --nc-format {NETCDF4,NETCDF4_CLASSIC,NETCDF3_CLASSIC,NETCDF3_64BIT_OFFSET,NETCDF3_64BIT_DATA}\n                        Which variant of netCDF to write. Default is NETCDF4.\n  --zlib                Turn on compression for the netCDF file. Only works\n                        for NETCDF4 and NETCDF4_CLASSIC formats.\n  --compression COMPRESSION\n                        Compression level for the netCDF file. Only used if\n                        --zlib is set. Default: 4.\n  -f, --force           Overwrite the output file if it already exists.\n  --no-history          Don't put the command-line invocation in the netCDF\n                        metadata.\n</code></pre>\n<h1>Using in a Python script</h1>\n<h2>Simple conversion</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstd2nc</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">fstd2nc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">(</span><span class=\"s2\">\"myfile.fst\"</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">to_netcdf</span><span class=\"p\">(</span><span class=\"s2\">\"myfile.nc\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can control <code>fstd2nc.Buffer</code> using parameters similar to the command-line arguments.  The usual convention is <em>--arg-name</em> from the command-line would be passed as <em>arg_name</em> from Python.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstd2nc</span>\n<span class=\"c1\"># Select only TT,HU variables.</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">fstd2nc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">(</span><span class=\"s2\">\"myfile.fst\"</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'TT'</span><span class=\"p\">,</span><span class=\"s1\">'HU'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Set the reference date to Jan 1, 2000 in the netCDF file.</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">to_netcdf</span><span class=\"p\">(</span><span class=\"s2\">\"myfile.nc\"</span><span class=\"p\">,</span> <span class=\"n\">reference_date</span><span class=\"o\">=</span><span class=\"s1\">'2000-01-01'</span><span class=\"p\">)</span>\n</pre>\n<h2>Interfacing with xarray</h2>\n<p>For more complicated conversions, you can manipulate the data as an <a href=\"http://xarray.pydata.org/en/stable/data-structures.html#dataset\" rel=\"nofollow\">xarray.Dataset</a> object by using the <code>to_xarray()</code> method:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstd2nc</span>\n\n<span class=\"c1\"># Open the FSTD file.</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">fstd2nc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">(</span><span class=\"s2\">\"myfile.fst\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access the data as an xarray.Dataset object.</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">to_xarray</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert surface pressure to Pa.</span>\n<span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"s1\">'P0'</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"mi\">100</span>\n<span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"s1\">'P0'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">'units'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Pa'</span>\n\n<span class=\"c1\"># (Can further manipulate the dataset here)</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># Write the final result to netCDF using xarray:</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">to_netcdf</span><span class=\"p\">(</span><span class=\"s2\">\"myfile.nc\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Interfacing with iris</h2>\n<p>You can interface with <a href=\"https://scitools.org.uk/iris/docs/latest/index.html\" rel=\"nofollow\">iris</a> by using the <code>.to_iris()</code> method (requires iris version 2.0 or greater).\nThis will give you an <a href=\"https://scitools.org.uk/iris/docs/latest/iris/iris/cube.html#iris.cube.CubeList\" rel=\"nofollow\">iris.cube.CubeList</a> object:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstd2nc</span>\n<span class=\"kn\">import</span> <span class=\"nn\">iris.quickplot</span> <span class=\"k\">as</span> <span class=\"nn\">qp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">pl</span>\n\n<span class=\"c1\"># Open the FSTD file.</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">fstd2nc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">(</span><span class=\"s2\">\"myfile.fst\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access the data as an iris.cube.CubeList object.</span>\n<span class=\"n\">cubes</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">to_iris</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">cubes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plot all the data (assuming we have 2D fields)</span>\n<span class=\"k\">for</span> <span class=\"n\">cube</span> <span class=\"ow\">in</span> <span class=\"n\">cubes</span><span class=\"p\">:</span>\n  <span class=\"n\">qp</span><span class=\"o\">.</span><span class=\"n\">contourf</span><span class=\"p\">(</span><span class=\"n\">cube</span><span class=\"p\">)</span>\n  <span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">coastlines</span><span class=\"p\">()</span>\n\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h2>Interfacing with pygeode</h2>\n<p>You can create a <a href=\"http://pygeode.github.io/dataset.html\" rel=\"nofollow\">pygeode.Dataset</a> object using the <code>.to_pygeode()</code> method (requires pygeode version 1.2.2 or greater):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fstd2nc</span>\n\n<span class=\"c1\"># Open the FSTD file.</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">fstd2nc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">(</span><span class=\"s2\">\"myfile.fst\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access the data as a pygeode.Dataset object.</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">to_pygeode</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span>\n</pre>\n<h1>Installing</h1>\n<p>The easiest way to install is using <a href=\"https://pip.pypa.io/en/stable\" rel=\"nofollow\">pip</a>:</p>\n<pre><code>pip install fstd2nc\n</code></pre>\n<p>If you're processing many input files into a single netCDF file, you could get some useful features (progress bar, quick file scans) by running:</p>\n<pre><code>pip install fstd2nc[manyfiles]\n</code></pre>\n<p>Alternatively, you can install it in a <a href=\"https://conda.io/docs/index.html\" rel=\"nofollow\">conda</a> environment:</p>\n<pre><code>conda install -c neishm fstd2nc\n</code></pre>\n<h1>Using in a Pydap server</h1>\n<p>This package includes a handler for <a href=\"https://github.com/pydap/pydap\" rel=\"nofollow\">Pydap</a>, which enables you to serve your FSTD files via the OPeNDAP protocol.</p>\n<p>To install all the pre-requisites:</p>\n<pre><code>pip install pydap fstd2nc[dap]\n</code></pre>\n<p>You can then test it by running</p>\n<pre><code>pydap -d [your data directory]\n</code></pre>\n<h1>Requirements</h1>\n<h2>Basic requirements</h2>\n<p>This package requires <a href=\"https://github.com/meteokid/python-rpn\" rel=\"nofollow\">Python-RPN</a> for reading/writing FSTD files, and <a href=\"https://github.com/Unidata/netcdf4-python\" rel=\"nofollow\">netcdf4-python</a> for reading/writing netCDF files.</p>\n<h2>Optional requirements</h2>\n<p>For reading large numbers of input files (&gt;100), this utility can leverage <a href=\"https://github.com/pandas-dev/pandas\" rel=\"nofollow\">pandas</a> to quickly process the FSTD record headers.</p>\n<p>The <a href=\"https://github.com/verigak/progress\" rel=\"nofollow\">progress</a> module is required in order to use the <code>--progress</code> option.</p>\n<p>The <code>.to_xarray()</code> Python method requires the <a href=\"https://github.com/pydata/xarray\" rel=\"nofollow\">xarray</a> and <a href=\"https://github.com/dask/dask\" rel=\"nofollow\">dask</a> packages.</p>\n<p>The <code>.to_iris()</code> Python method requires the <a href=\"https://scitools.org.uk/iris/docs/latest/index.html\" rel=\"nofollow\">iris</a> package, along with the <code>.to_xarray()</code> dependencies.</p>\n<p>The <code>.to_pygeode()</code> Python method requires the <a href=\"https://github.com/pygeode/pygeode\" rel=\"nofollow\">pygeode</a> package, along ith the <code>.to_xarray()</code> dependencies.</p>\n\n          </div>"}, "last_serial": 6711891, "releases": {"0.20170427.1": [{"comment_text": "", "digests": {"md5": "c38aab4401810fdbad19d1902306ebab", "sha256": "6a25417ef0b05c77e1a86b95a181e65d6ce0d91b3f6d493b79d3f390f8465fbc"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "c38aab4401810fdbad19d1902306ebab", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1017710, "upload_time": "2017-05-11T19:45:09", "upload_time_iso_8601": "2017-05-11T19:45:09.968696Z", "url": "https://files.pythonhosted.org/packages/1f/98/81c7f9de2c5af9dbabf72852608e9b32421157c0d9c2cdcbc88b34607ffc/fstd2nc-0.20170427.1-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "189de5a484cc6afed463af0cd74c9b89", "sha256": "dad466ccc600c71ea1d5fa4e2ac3a7ab96e6c274b13f42e91283441a758cc15b"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "189de5a484cc6afed463af0cd74c9b89", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1085538, "upload_time": "2017-05-11T19:45:33", "upload_time_iso_8601": "2017-05-11T19:45:33.088692Z", "url": "https://files.pythonhosted.org/packages/d5/3d/549a876ed89a691f0e7359837b6203f746f7cfda1ef1adaba58bb4b98ca9/fstd2nc-0.20170427.1-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d907253f738fcae13d58cfb0d59507b7", "sha256": "2cf99da57cda713cd2bcb08eeeea175e597e5cc51b3ffd0a90bc3b89a60313c8"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "d907253f738fcae13d58cfb0d59507b7", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1017713, "upload_time": "2017-05-11T19:45:54", "upload_time_iso_8601": "2017-05-11T19:45:54.494249Z", "url": "https://files.pythonhosted.org/packages/b0/7a/8652af12a31d70df64d2e4ad4b455f239462531eced3e9b83f7ab8af4bcc/fstd2nc-0.20170427.1-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12b833beadc9b723fdc769edbbc72c61", "sha256": "5c7f8e53a6235cb4a232822d7e3763f63455149a74798af4b02b6720e0776e5f"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "12b833beadc9b723fdc769edbbc72c61", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1085542, "upload_time": "2017-05-11T19:46:17", "upload_time_iso_8601": "2017-05-11T19:46:17.807228Z", "url": "https://files.pythonhosted.org/packages/97/2d/048ef86082aa25dff0314792a259798a31f7cbf1c87e29e596f1e3e4e744/fstd2nc-0.20170427.1-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f6c0551875094dbd8664dc766047bfb", "sha256": "0e1daef24973113766aa8bc6d695203be77e8be4996e5ba01bad6ed3af76b18e"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "6f6c0551875094dbd8664dc766047bfb", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2474983, "upload_time": "2017-05-11T19:47:07", "upload_time_iso_8601": "2017-05-11T19:47:07.224655Z", "url": "https://files.pythonhosted.org/packages/c3/bf/15672f21b14e7b928bd5f70b35c5ec6276ad15238f5ce80f80842052890e/fstd2nc-0.20170427.1-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87cdee384037050406878747fb97dc22", "sha256": "7495271d0fca18c903ef80a3922175adb92012e22eac6784ea944d00e1db8601"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "87cdee384037050406878747fb97dc22", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2809778, "upload_time": "2017-05-11T19:48:03", "upload_time_iso_8601": "2017-05-11T19:48:03.285262Z", "url": "https://files.pythonhosted.org/packages/ee/53/3899446aabe21128dbb58a288c1f2d3d26a214832ba84410513fd22d3c29/fstd2nc-0.20170427.1-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2be50a824c4daad64a8c95c293ed0e83", "sha256": "9e892ec52633195004d5bd17c90d8b116bd292c32dc4616632cc389b02d81cde"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp33-cp33m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "2be50a824c4daad64a8c95c293ed0e83", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 1017781, "upload_time": "2017-06-08T15:14:10", "upload_time_iso_8601": "2017-06-08T15:14:10.415342Z", "url": "https://files.pythonhosted.org/packages/1f/a0/2eb76d503f25e7f83cae8c9a4dabd5bb5386456cb8e32e3050549a97bafc/fstd2nc-0.20170427.1-cp33-cp33m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "716baf36c8e810de5f2bd9f1bfa8b38c", "sha256": "2cbb8c7ce00a694fd50814e7053c96162b3ed5ff60a7ccde73d1bd8615b4eb47"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp33-cp33m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "716baf36c8e810de5f2bd9f1bfa8b38c", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 1085605, "upload_time": "2017-06-08T15:14:30", "upload_time_iso_8601": "2017-06-08T15:14:30.129147Z", "url": "https://files.pythonhosted.org/packages/1d/9a/c5d278e2b547cb64bdfeb1dee00ecc23065458803252d9ea9dacdb3de4c3/fstd2nc-0.20170427.1-cp33-cp33m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a000a46979adb9e6fb1af13fa29bff15", "sha256": "394635cf1ba1b75bb2e21b998f972cefd073eda347e3946f04888fad6a2cad16"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp34-cp34m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "a000a46979adb9e6fb1af13fa29bff15", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1017782, "upload_time": "2017-06-08T15:14:48", "upload_time_iso_8601": "2017-06-08T15:14:48.797718Z", "url": "https://files.pythonhosted.org/packages/fb/14/482bdae47cee36966a76d2b1c19742e39b372fa05ee76d9842f738e28333/fstd2nc-0.20170427.1-cp34-cp34m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15c4e358202a871aded0166818123f91", "sha256": "573a76b4671a72ae24bef6c9d7db0d9718b371a865abf9e6ad06f983c6c206f5"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "15c4e358202a871aded0166818123f91", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1085603, "upload_time": "2017-06-08T15:15:10", "upload_time_iso_8601": "2017-06-08T15:15:10.592206Z", "url": "https://files.pythonhosted.org/packages/32/ad/05e012609371bbbdd67685d4cdac069655a0dd7864879815ae8435726951/fstd2nc-0.20170427.1-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b581c7b2c208994cee1c8aadc67bdd1a", "sha256": "625be85795f94d7874a687176ba885219b9821339752cb40601ca7e1b63995cb"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "b581c7b2c208994cee1c8aadc67bdd1a", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1017781, "upload_time": "2017-06-08T15:15:29", "upload_time_iso_8601": "2017-06-08T15:15:29.729621Z", "url": "https://files.pythonhosted.org/packages/53/9d/d7725848f7ba80bb3ce5dffbbc62e5c636400e4e3ad10f92e455b485ff25/fstd2nc-0.20170427.1-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "545210dc742ed54cf2fc13a4c3a51a24", "sha256": "5770c4a30d6587a11f2374be84b8d81dd41a2e1b727182ba64f42d7e444f9b7f"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "545210dc742ed54cf2fc13a4c3a51a24", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1085605, "upload_time": "2017-06-08T15:15:50", "upload_time_iso_8601": "2017-06-08T15:15:50.011142Z", "url": "https://files.pythonhosted.org/packages/ec/ca/9c42c530087b35876b4f7486489cc713b9b09ea170c0760d1f755cf7f5f8/fstd2nc-0.20170427.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a328f8af9391f2260ec5632c6210334c", "sha256": "c84cd8e1a4c1e662428c382689eff028ee6998ddfc6069e55452ed7268368584"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "a328f8af9391f2260ec5632c6210334c", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1017779, "upload_time": "2017-06-08T15:16:08", "upload_time_iso_8601": "2017-06-08T15:16:08.655825Z", "url": "https://files.pythonhosted.org/packages/f6/44/9c72057fe32617c198df312a1139ecfdd4ec5ec11611850497b744ed3a47/fstd2nc-0.20170427.1-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "331bd226d2ed16ba39b33670bde157f4", "sha256": "d2f6908a3e328b17f1c753cfdf4989ac65a2b153a6ac892852d3f58d5a2344d0"}, "downloads": -1, "filename": "fstd2nc-0.20170427.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "331bd226d2ed16ba39b33670bde157f4", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1085604, "upload_time": "2017-06-08T15:16:29", "upload_time_iso_8601": "2017-06-08T15:16:29.440297Z", "url": "https://files.pythonhosted.org/packages/08/b9/8b619848d05a7bfcdce6d64fc6906ad7c66ab671dfafa908f1979c17942e/fstd2nc-0.20170427.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}], "0.20170712.1": [{"comment_text": "", "digests": {"md5": "3888750f9d72d299dd2c8f7c52f6cfb7", "sha256": "7c378747b383d9c8e2411eeddf25059fb5698b5262bd09794279d59bc11ef3a2"}, "downloads": -1, "filename": "fstd2nc-0.20170712.1.tar.gz", "has_sig": false, "md5_digest": "3888750f9d72d299dd2c8f7c52f6cfb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20110, "upload_time": "2017-07-13T16:09:22", "upload_time_iso_8601": "2017-07-13T16:09:22.524563Z", "url": "https://files.pythonhosted.org/packages/c2/f7/366f84bea59cb32a23bdc8b0dd635041082a934be6297e7bf75026a61906/fstd2nc-0.20170712.1.tar.gz", "yanked": false}], "0.20170728": [{"comment_text": "", "digests": {"md5": "ee4dbed3c5aae6af9b08724e9570ed7e", "sha256": "09ac6b45c8455326c053c1d799778ac926dd5419836c338af64810e12dd1688f"}, "downloads": -1, "filename": "fstd2nc-0.20170728.tar.gz", "has_sig": false, "md5_digest": "ee4dbed3c5aae6af9b08724e9570ed7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21169, "upload_time": "2017-07-28T19:41:50", "upload_time_iso_8601": "2017-07-28T19:41:50.355689Z", "url": "https://files.pythonhosted.org/packages/40/07/47476c38269ae40fcbc4fdace1c9d265e226d89b16ef768f45cf2bd6eaa4/fstd2nc-0.20170728.tar.gz", "yanked": false}], "0.20170728.1": [{"comment_text": "", "digests": {"md5": "d6bc6ee4b620353127a6af0510bad276", "sha256": "43159a74908e39d2e5caf6cf6a771fd6f8fddaaa2f59742e01a0fd8c6efeabc8"}, "downloads": -1, "filename": "fstd2nc-0.20170728.1.tar.gz", "has_sig": false, "md5_digest": "d6bc6ee4b620353127a6af0510bad276", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21248, "upload_time": "2017-08-04T21:01:49", "upload_time_iso_8601": "2017-08-04T21:01:49.727609Z", "url": "https://files.pythonhosted.org/packages/ee/15/a0add91cf6844de4ccb52ca579afd6cc8531fa729b5928c57392d4806651/fstd2nc-0.20170728.1.tar.gz", "yanked": false}], "0.20170908.0": [{"comment_text": "", "digests": {"md5": "75356bc47a0f656f9ef42b1690d07547", "sha256": "8ab9de9bb6bfb919d2dd5f1f3f328eb281462664935c077d941267981dd7257e"}, "downloads": -1, "filename": "fstd2nc-0.20170908.0.tar.gz", "has_sig": false, "md5_digest": "75356bc47a0f656f9ef42b1690d07547", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28367, "upload_time": "2017-09-09T16:40:02", "upload_time_iso_8601": "2017-09-09T16:40:02.815746Z", "url": "https://files.pythonhosted.org/packages/3d/fe/54c3dc9b46da2e73b76955e9f7066162b254226ae44f86e5939ff690289d/fstd2nc-0.20170908.0.tar.gz", "yanked": false}], "0.20170922.0": [{"comment_text": "", "digests": {"md5": "9ecd9de1acc210e259033ac64403dd4f", "sha256": "b3ad59d7aeef2dbbd4c45610eec72a0dc7ef182c7606fd4ce2c86a7105fa17a1"}, "downloads": -1, "filename": "fstd2nc-0.20170922.0.tar.gz", "has_sig": false, "md5_digest": "9ecd9de1acc210e259033ac64403dd4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28504, "upload_time": "2017-09-25T18:24:19", "upload_time_iso_8601": "2017-09-25T18:24:19.472977Z", "url": "https://files.pythonhosted.org/packages/58/4e/39b9667ed700a582a949970be573345b6712655473bf2f310d744e3256a7/fstd2nc-0.20170922.0.tar.gz", "yanked": false}], "0.20171103.0": [{"comment_text": "", "digests": {"md5": "a21c0209a083cf0fb947fdc2db96e25d", "sha256": "1fc7fc8711ece1a086a1b7395ef22f033373b5b47670e6ab1a8b080596d07d4c"}, "downloads": -1, "filename": "fstd2nc-0.20171103.0.tar.gz", "has_sig": false, "md5_digest": "a21c0209a083cf0fb947fdc2db96e25d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28794, "upload_time": "2017-11-06T21:24:13", "upload_time_iso_8601": "2017-11-06T21:24:13.073919Z", "url": "https://files.pythonhosted.org/packages/75/ec/cb68879c5f76215dfe88861c6d6b1b81fcf16ed0cf7ed3e4c0bcd0b80b47/fstd2nc-0.20171103.0.tar.gz", "yanked": false}], "0.20171130.0": [{"comment_text": "", "digests": {"md5": "9a93b79ad1d015725333fa5d7cdedc2f", "sha256": "71859aa057934f7f8b393be5957d159b6cc76332e85aacb2f2a6c114785262ce"}, "downloads": -1, "filename": "fstd2nc-0.20171130.0.tar.gz", "has_sig": false, "md5_digest": "9a93b79ad1d015725333fa5d7cdedc2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33380, "upload_time": "2017-11-30T20:03:36", "upload_time_iso_8601": "2017-11-30T20:03:36.304645Z", "url": "https://files.pythonhosted.org/packages/28/b7/34ad08ddbd2d52851e43289361e8628e7c4e9d1477e6fb79e4650463f321/fstd2nc-0.20171130.0.tar.gz", "yanked": false}], "0.20180220.0": [{"comment_text": "", "digests": {"md5": "63d244e5f8a823382aad398170d496ad", "sha256": "a50948287ca5f45a6878882af95f80d8dee0a59eab14b834892188d871520190"}, "downloads": -1, "filename": "fstd2nc-0.20180220.0.tar.gz", "has_sig": false, "md5_digest": "63d244e5f8a823382aad398170d496ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39263, "upload_time": "2018-03-12T16:59:54", "upload_time_iso_8601": "2018-03-12T16:59:54.673372Z", "url": "https://files.pythonhosted.org/packages/ed/9e/1485a1da5cf341f6ec860160bee5c6dd38426be11ccbaa5ae1e47576f785/fstd2nc-0.20180220.0.tar.gz", "yanked": false}], "0.20180423.0": [{"comment_text": "", "digests": {"md5": "62328b09d860db310f676ee6ad0f6953", "sha256": "ecf79254da47147c4c180dcb59dd73a8a12bc91e933a8c148107dabbf270759a"}, "downloads": -1, "filename": "fstd2nc-0.20180423.0.tar.gz", "has_sig": false, "md5_digest": "62328b09d860db310f676ee6ad0f6953", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41510, "upload_time": "2018-04-23T22:00:00", "upload_time_iso_8601": "2018-04-23T22:00:00.224279Z", "url": "https://files.pythonhosted.org/packages/b1/a7/80e9c94e6a13f25a9c0672f73f1d9a59cc4f899682a3ea381603004e6805/fstd2nc-0.20180423.0.tar.gz", "yanked": false}], "0.20180604.0": [{"comment_text": "", "digests": {"md5": "50e69cc9673b06df05f830244f184a82", "sha256": "24b6329a7303b3ac3adf2535ae589c3c7aa4afc93888bfe73dd0917757656de3"}, "downloads": -1, "filename": "fstd2nc-0.20180604.0.tar.gz", "has_sig": false, "md5_digest": "50e69cc9673b06df05f830244f184a82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42277, "upload_time": "2018-06-04T20:51:00", "upload_time_iso_8601": "2018-06-04T20:51:00.167168Z", "url": "https://files.pythonhosted.org/packages/a4/28/236df74d0023fe4e249491f811b8af497c00bebe4a3e2ef34e94dfca28f2/fstd2nc-0.20180604.0.tar.gz", "yanked": false}], "0.20180706.0": [{"comment_text": "", "digests": {"md5": "1d263357352493654c4463db002f70cd", "sha256": "c5e68b782b653be5dd26462de5a740926fb02b05d9f2dc77bb83308e135618f8"}, "downloads": -1, "filename": "fstd2nc-0.20180706.0.tar.gz", "has_sig": false, "md5_digest": "1d263357352493654c4463db002f70cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47010, "upload_time": "2018-07-06T16:30:55", "upload_time_iso_8601": "2018-07-06T16:30:55.574149Z", "url": "https://files.pythonhosted.org/packages/6c/9d/50c0c521bbe75170fed47db7f2defaa4ac9237c4e47d60016dd5e45d2f48/fstd2nc-0.20180706.0.tar.gz", "yanked": false}], "0.20180706.1": [{"comment_text": "", "digests": {"md5": "a501110af45ea829ca9c8a8df39438e0", "sha256": "9c003db29abec505fae58f1b3522d2b22f6b850d124425dfe95437d7e0efa10e"}, "downloads": -1, "filename": "fstd2nc-0.20180706.1.tar.gz", "has_sig": false, "md5_digest": "a501110af45ea829ca9c8a8df39438e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47836, "upload_time": "2018-08-03T19:23:07", "upload_time_iso_8601": "2018-08-03T19:23:07.933508Z", "url": "https://files.pythonhosted.org/packages/1e/8b/db743b650aba75b7525731892780ef7dd81b276fd9833952b5dabda63de0/fstd2nc-0.20180706.1.tar.gz", "yanked": false}], "0.20180821.0": [{"comment_text": "", "digests": {"md5": "af7f8340eaf1a4d2ab2aa56bab42c7aa", "sha256": "d8fdb0c88540bfceb4853aec64bca462f416060c3d92637e7f4b7a5912f940d4"}, "downloads": -1, "filename": "fstd2nc-0.20180821.0.tar.gz", "has_sig": false, "md5_digest": "af7f8340eaf1a4d2ab2aa56bab42c7aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54356, "upload_time": "2018-08-21T21:23:08", "upload_time_iso_8601": "2018-08-21T21:23:08.255158Z", "url": "https://files.pythonhosted.org/packages/ad/3e/8b45087d0e292cce6bcda80ab9e62d7fb09c0b9ac82f93d4e4b2e225f495/fstd2nc-0.20180821.0.tar.gz", "yanked": false}], "0.20190903.0": [{"comment_text": "", "digests": {"md5": "346c72f4aa4d38f422aeeda6eb496413", "sha256": "388d9e28dd37717d9905a69ee5e4d4a05ddba1c1c5335b47c09f23c7bc41e20e"}, "downloads": -1, "filename": "fstd2nc-0.20190903.0.tar.gz", "has_sig": false, "md5_digest": "346c72f4aa4d38f422aeeda6eb496413", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54976, "upload_time": "2019-09-03T21:30:30", "upload_time_iso_8601": "2019-09-03T21:30:30.302090Z", "url": "https://files.pythonhosted.org/packages/f9/64/1b48fc8785ba4c45f80100e91e3b6318679f6a7a7c08f73a76f08d731f5a/fstd2nc-0.20190903.0.tar.gz", "yanked": false}], "0.20190903.1": [{"comment_text": "", "digests": {"md5": "f7a28feee1335535b4576e5dadb1ff11", "sha256": "716f2939dbe7a8155bd3d49b6064ce99e42cca1a235ddcaad44bc8189ce57692"}, "downloads": -1, "filename": "fstd2nc-0.20190903.1.tar.gz", "has_sig": false, "md5_digest": "f7a28feee1335535b4576e5dadb1ff11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55504, "upload_time": "2020-02-27T16:19:33", "upload_time_iso_8601": "2020-02-27T16:19:33.278194Z", "url": "https://files.pythonhosted.org/packages/5e/bd/4009dace7af2c6a84d34701e2b9a332d8cbb9e7a75ed654762bd89d8c164/fstd2nc-0.20190903.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f7a28feee1335535b4576e5dadb1ff11", "sha256": "716f2939dbe7a8155bd3d49b6064ce99e42cca1a235ddcaad44bc8189ce57692"}, "downloads": -1, "filename": "fstd2nc-0.20190903.1.tar.gz", "has_sig": false, "md5_digest": "f7a28feee1335535b4576e5dadb1ff11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55504, "upload_time": "2020-02-27T16:19:33", "upload_time_iso_8601": "2020-02-27T16:19:33.278194Z", "url": "https://files.pythonhosted.org/packages/5e/bd/4009dace7af2c6a84d34701e2b9a332d8cbb9e7a75ed654762bd89d8c164/fstd2nc-0.20190903.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:01 2020"}