{"info": {"author": "Nikolay Novik", "author_email": "nickolainovik@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Database", "Topic :: Database :: Front-Ends"], "description": "aiomysql\n========\n.. image:: https://travis-ci.com/Privex/aiomysql.svg?branch=master\n    :target: https://travis-ci.com/Privex/aiomysql\n.. image:: https://codecov.io/gh/Privex/aiomysql/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/Privex/aiomysql\n    :alt: Code coverage\n.. image:: https://badge.fury.io/py/privex-aiomysql.svg\n    :target: https://badge.fury.io/py/privex-aiomysql\n    :alt: Latest Version\n.. image:: https://readthedocs.org/projects/aiomysql/badge/?version=latest\n    :target: https://aiomysql.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://badges.gitter.im/Join%20Chat.svg\n    :target: https://gitter.im/aio-libs/Lobby\n    :alt: Chat on Gitter\n\n**aiomysql** is a \"driver\" for accessing a `MySQL` database\nfrom the asyncio_ (PEP-3156/tulip) framework. It depends on and reuses most\nparts of PyMySQL_ . *aiomysql* tries to be like awesome aiopg_ library and\npreserve same api, look and feel.\n\nInternally **aiomysql** is copy of PyMySQL, underlying io calls switched\nto async, basically ``yield from`` and ``asyncio.coroutine`` added in\nproper places)). `sqlalchemy` support ported from aiopg_.\n\n**NOTE:** This is a **fork** maintained by [Privex Inc.](https://www.privex.io), which we use internally to speed up\ndevelopment when we require features / bug fixes that haven't yet / won't be accepted into upstream.\n\n**FORK PACKAGE:** We publish the package ``privex-aiomysql`` to PyPi for this fork. Please be warned that the versioning may not\nmatch upstream's versioning, due to modifications made by ourselves.\n\nDocumentation\n-------------\nhttps://aiomysql.readthedocs.io/\n\n\nMailing List\n------------\nhttps://groups.google.com/forum/#!forum/aio-libs\n\n\nBasic Example\n-------------\n\n**aiomysql** based on PyMySQL_ , and provides same api, you just need\nto use  ``await conn.f()`` or ``yield from conn.f()`` instead of calling\n``conn.f()`` for every method.\n\nProperties are unchanged, so ``conn.prop`` is correct as well as\n``conn.prop = val``.\n\n.. code:: python\n\n    import asyncio\n    import aiomysql\n\n\n    async def test_example(loop):\n        pool = await aiomysql.create_pool(host='127.0.0.1', port=3306,\n                                          user='root', password='',\n                                          db='mysql', loop=loop)\n        async with pool.acquire() as conn:\n            async with conn.cursor() as cur:\n                await cur.execute(\"SELECT 42;\")\n                print(cur.description)\n                (r,) = await cur.fetchone()\n                assert r == 42\n        pool.close()\n        await pool.wait_closed()\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(test_example(loop))\n\n\nExample of SQLAlchemy optional integration\n------------------------------------------\nSqlalchemy support has been ported from aiopg_ so api should be very familiar\nfor aiopg_ user.:\n\n.. code:: python\n\n    import asyncio\n    import sqlalchemy as sa\n\n    from aiomysql.sa import create_engine\n\n\n    metadata = sa.MetaData()\n\n    tbl = sa.Table('tbl', metadata,\n                   sa.Column('id', sa.Integer, primary_key=True),\n                   sa.Column('val', sa.String(255)))\n\n\n    async def go(loop):\n        engine = await create_engine(user='root', db='test_pymysql',\n                                     host='127.0.0.1', password='', loop=loop)\n        async with engine.acquire() as conn:\n            await conn.execute(tbl.insert().values(val='abc'))\n            await conn.execute(tbl.insert().values(val='xyz'))\n\n            async for row in conn.execute(tbl.select()):\n                print(row.id, row.val)\n\n        engine.close()\n        await engine.wait_closed()\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(go(loop))\n\n\nRequirements\n------------\n\n* Python_ 3.5.3+\n* PyMySQL_\n\n\n.. _Python: https://www.python.org\n.. _asyncio: http://docs.python.org/3.5/library/asyncio.html\n.. _aiopg: https://github.com/aio-libs/aiopg\n.. _PyMySQL: https://github.com/PyMySQL/PyMySQL\n.. _Tornado-MySQL: https://github.com/PyMySQL/Tornado-MySQL\n\nChanges\n-------\n\n0.0.20 (2018-12-19)\n^^^^^^^^^^^^^^^^^^^\n\n* Fixed connect_timeout #360\n\n* Fixed support for SQLA executemany #324\n\n* Fix the python 3.7 compatibility #357\n\n* Fixed reuse connections when StreamReader has an exception #339\n\n* Fixes warning when inserting binary strings #326\n\n\n0.0.19 (2018-07-12)\n^^^^^^^^^^^^^^^^^^^\n\n* See v0.0.18\n\n\n0.0.18 (2018-07-09)\n^^^^^^^^^^^^^^^^^^^\n\n* Updated to support latest PyMySQL changes.\n\n* aiomysql now sends client connection info.\n\n* MySQL8+ Support including sha256_password and cached_sha2_password authentication plugins.\n\n* Default max packet length sent to the server is no longer 1.\n\n* Fixes issue where cursor.nextset can hang on query sets that raise errors.\n\n\n0.0.17 (2018-07-06)\n^^^^^^^^^^^^^^^^^^^\n\n* Pinned version of PyMySQL\n\n\n0.0.16 (2018-06-03)\n^^^^^^^^^^^^^^^^^^^\n\n* Added ability to execute precompiled sqlalchemy queries #294 (Thanks @vlanse)\n\n\n0.0.15 (2018-05-20)\n^^^^^^^^^^^^^^^^^^^\n\n* Fixed handling of user-defined types for sqlalchemy  #290\n\n* Fix KeyError when server reports unknown collation #289\n\n\n0.0.14 (2018-04-22)\n^^^^^^^^^^^^^^^^^^^\n\n* Fixed SSL connection finalization  #282\n\n\n0.0.13 (2018-04-19)\n^^^^^^^^^^^^^^^^^^^\n\n* Added SSL support #280 (Thanks @terrycain)\n\n* Fixed __all__ in aiomysql/__init__ #270 (Thanks @matianjun1)\n\n* Added docker fixtures #275 (Thanks @terrycain)\n\n\n0.0.12 (2018-01-18)\n^^^^^^^^^^^^^^^^^^^\n\n* Fixed support for SQLAlchemy 1.2.0\n\n* Fixed argument for cursor.execute in sa engine #239 (Thanks @NotSoSuper)\n\n\n0.0.11 (2017-12-06)\n^^^^^^^^^^^^^^^^^^^\n\n* Fixed README formatting on pypi\n\n\n0.0.10 (2017-12-06)\n^^^^^^^^^^^^^^^^^^^\n\n* Updated regular expressions to be compatible with pymysql #167 (Thanks @AlexLisovoy)\n\n* Added connection recycling in the pool #216\n\n\n0.0.9 (2016-09-14)\n^^^^^^^^^^^^^^^^^^\n\n* Fixed AttributeError in  _request_authentication function #104 (Thanks @ttlttl)\n\n* Fixed legacy auth #105\n\n* uvloop added to test suite #106\n\n* Fixed bug with unicode in json field #107 (Thanks @methane)\n\n\n0.0.8 (2016-08-24)\n^^^^^^^^^^^^^^^^^^\n\n* Default min pool size reduced to 1 #80 (Thanks @Drizzt1991)\n\n* Update to PyMySQL 0.7.5 #89\n\n* Fixed connection cancellation in process of executing a query #79 (Thanks @Drizzt1991)\n\n\n0.0.7 (2016-01-27)\n^^^^^^^^^^^^^^^^^^\n\n* Fix for multiple results issue, ported from pymysql #52\n\n* Fixed useless warning with no_delay option #55\n\n* Added async/await support for Engine, SAConnection, Transaction #57\n\n* pool.release returns future so we can wait on it in __aexit__ #60\n\n* Update to PyMySQL 0.6.7\n\n\n0.0.6 (2015-12-11)\n^^^^^^^^^^^^^^^^^^\n\n* Fixed bug with SA rollback (Thanks @khlyestovillarion!)\n\n* Fixed issue with default no_delay option (Thanks @khlyestovillarion!)\n\n\n0.0.5 (2015-10-28)\n^^^^^^^^^^^^^^^^^^\n\n* no_delay option is deprecated and True by default\n\n* Add Cursor.mogrify() method\n\n* Support for \"LOAD LOCAL INFILE\" query.\n\n* Check connection inside pool, in case of timeout drop it, fixes #25\n\n* Add support of python 3.5 features to pool, connection and cursor\n\n\n0.0.4 (2015-05-23)\n^^^^^^^^^^^^^^^^^^\n\n* Allow to call connection.wait_closed twice.\n\n* Fixed sqlalchemy 1.0.0 support.\n\n* Fix #11: Rename Connection.wait_closed() to .ensure_closed()\n\n* Raise ResourceWarning on non-closed Connection\n\n* Rename Connection.connect to _connect\n\n\n0.0.3 (2015-03-10)\n^^^^^^^^^^^^^^^^^^\n\n* Added support for PyMySQL up to 0.6.6.\n\n* Ported improvements from PyMySQL.\n\n* Added basic documentation.\n\n* Fixed and added more examples.\n\n\n0.0.2 (2015-02-17)\n^^^^^^^^^^^^^^^^^^\n\n* Added MANIFEST.in.\n\n\n0.0.1 (2015-02-17)\n^^^^^^^^^^^^^^^^^^\n\n* Initial release.\n\n* Implemented plain connections: connect, Connection, Cursor.\n\n* Implemented database pools.\n\n* Ported sqlalchemy optional support.\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.python.org/pypi/aiomysql", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aio-libs/aiomysql", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "privex-aiomysql", "package_url": "https://pypi.org/project/privex-aiomysql/", "platform": "POSIX", "project_url": "https://pypi.org/project/privex-aiomysql/", "project_urls": {"Download": "https://pypi.python.org/pypi/aiomysql", "Homepage": "https://github.com/aio-libs/aiomysql"}, "release_url": "https://pypi.org/project/privex-aiomysql/0.0.21/", "requires_dist": ["PyMySQL (<=0.9.2,>=0.9)", "sqlalchemy (>=1.0) ; extra == 'sa'"], "requires_python": "", "summary": "MySQL driver for asyncio.", "version": "0.0.21", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.com/Privex/aiomysql\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/Privex/aiomysql.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3fd4edd5ef4ec4751c6baa4a13e34eb585bba781/68747470733a2f2f7472617669732d63692e636f6d2f5072697665782f61696f6d7973716c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/Privex/aiomysql\" rel=\"nofollow\"><img alt=\"Code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12b77f20524a5aed011ff13f1918153f3f2db784/68747470733a2f2f636f6465636f762e696f2f67682f5072697665782f61696f6d7973716c2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/privex-aiomysql\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28c32a62dae53739e7b2b4b06aab3fbc77e45964/68747470733a2f2f62616467652e667572792e696f2f70792f7072697665782d61696f6d7973716c2e737667\"></a>\n<a href=\"https://aiomysql.readthedocs.io/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3bd59d7a5927414712b9d40c81650cf96670fb32/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696f6d7973716c2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://gitter.im/aio-libs/Lobby\" rel=\"nofollow\"><img alt=\"Chat on Gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/454be82554a06af0fd3393415ef17b59d8550498/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\"></a>\n<p><strong>aiomysql</strong> is a \u201cdriver\u201d for accessing a <cite>MySQL</cite> database\nfrom the <a href=\"http://docs.python.org/3.5/library/asyncio.html\" rel=\"nofollow\">asyncio</a> (PEP-3156/tulip) framework. It depends on and reuses most\nparts of <a href=\"https://github.com/PyMySQL/PyMySQL\" rel=\"nofollow\">PyMySQL</a> . <em>aiomysql</em> tries to be like awesome <a href=\"https://github.com/aio-libs/aiopg\" rel=\"nofollow\">aiopg</a> library and\npreserve same api, look and feel.</p>\n<p>Internally <strong>aiomysql</strong> is copy of PyMySQL, underlying io calls switched\nto async, basically <tt>yield from</tt> and <tt>asyncio.coroutine</tt> added in\nproper places)). <cite>sqlalchemy</cite> support ported from <a href=\"https://github.com/aio-libs/aiopg\" rel=\"nofollow\">aiopg</a>.</p>\n<p><strong>NOTE:</strong> This is a <strong>fork</strong> maintained by [Privex Inc.](<a href=\"https://www.privex.io\" rel=\"nofollow\">https://www.privex.io</a>), which we use internally to speed up\ndevelopment when we require features / bug fixes that haven\u2019t yet / won\u2019t be accepted into upstream.</p>\n<p><strong>FORK PACKAGE:</strong> We publish the package <tt><span class=\"pre\">privex-aiomysql</span></tt> to PyPi for this fork. Please be warned that the versioning may not\nmatch upstream\u2019s versioning, due to modifications made by ourselves.</p>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p><a href=\"https://aiomysql.readthedocs.io/\" rel=\"nofollow\">https://aiomysql.readthedocs.io/</a></p>\n</div>\n<div id=\"mailing-list\">\n<h2>Mailing List</h2>\n<p><a href=\"https://groups.google.com/forum/#!forum/aio-libs\" rel=\"nofollow\">https://groups.google.com/forum/#!forum/aio-libs</a></p>\n</div>\n<div id=\"basic-example\">\n<h2>Basic Example</h2>\n<p><strong>aiomysql</strong> based on <a href=\"https://github.com/PyMySQL/PyMySQL\" rel=\"nofollow\">PyMySQL</a> , and provides same api, you just need\nto use  <tt>await conn.f()</tt> or <tt>yield from conn.f()</tt> instead of calling\n<tt>conn.f()</tt> for every method.</p>\n<p>Properties are unchanged, so <tt>conn.prop</tt> is correct as well as\n<tt>conn.prop = val</tt>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomysql</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_example</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aiomysql</span><span class=\"o\">.</span><span class=\"n\">create_pool</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">3306</span><span class=\"p\">,</span>\n                                      <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'root'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n                                      <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"s1\">'mysql'</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cur</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT 42;\"</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,)</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">()</span>\n            <span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n    <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">test_example</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"example-of-sqlalchemy-optional-integration\">\n<h2>Example of SQLAlchemy optional integration</h2>\n<p>Sqlalchemy support has been ported from <a href=\"https://github.com/aio-libs/aiopg\" rel=\"nofollow\">aiopg</a> so api should be very familiar\nfor <a href=\"https://github.com/aio-libs/aiopg\" rel=\"nofollow\">aiopg</a> user.:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sqlalchemy</span> <span class=\"k\">as</span> <span class=\"nn\">sa</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiomysql.sa</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n\n\n<span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">MetaData</span><span class=\"p\">()</span>\n\n<span class=\"n\">tbl</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'tbl'</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">,</span>\n               <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n               <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'val'</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)))</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'root'</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"s1\">'test_pymysql'</span><span class=\"p\">,</span>\n                                 <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">tbl</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"s1\">'abc'</span><span class=\"p\">))</span>\n        <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">tbl</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"s1\">'xyz'</span><span class=\"p\">))</span>\n\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">tbl</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://www.python.org\" rel=\"nofollow\">Python</a> 3.5.3+</li>\n<li><a href=\"https://github.com/PyMySQL/PyMySQL\" rel=\"nofollow\">PyMySQL</a></li>\n</ul>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>0.0.20 (2018-12-19)</h3>\n<ul>\n<li>Fixed connect_timeout #360</li>\n<li>Fixed support for SQLA executemany #324</li>\n<li>Fix the python 3.7 compatibility #357</li>\n<li>Fixed reuse connections when StreamReader has an exception #339</li>\n<li>Fixes warning when inserting binary strings #326</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.0.19 (2018-07-12)</h3>\n<ul>\n<li>See v0.0.18</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.0.18 (2018-07-09)</h3>\n<ul>\n<li>Updated to support latest PyMySQL changes.</li>\n<li>aiomysql now sends client connection info.</li>\n<li>MySQL8+ Support including sha256_password and cached_sha2_password authentication plugins.</li>\n<li>Default max packet length sent to the server is no longer 1.</li>\n<li>Fixes issue where cursor.nextset can hang on query sets that raise errors.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.0.17 (2018-07-06)</h3>\n<ul>\n<li>Pinned version of PyMySQL</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.0.16 (2018-06-03)</h3>\n<ul>\n<li>Added ability to execute precompiled sqlalchemy queries #294 (Thanks @vlanse)</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.0.15 (2018-05-20)</h3>\n<ul>\n<li>Fixed handling of user-defined types for sqlalchemy  #290</li>\n<li>Fix KeyError when server reports unknown collation #289</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.0.14 (2018-04-22)</h3>\n<ul>\n<li>Fixed SSL connection finalization  #282</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.0.13 (2018-04-19)</h3>\n<ul>\n<li>Added SSL support #280 (Thanks @terrycain)</li>\n<li>Fixed __all__ in aiomysql/__init__ #270 (Thanks @matianjun1)</li>\n<li>Added docker fixtures #275 (Thanks @terrycain)</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.0.12 (2018-01-18)</h3>\n<ul>\n<li>Fixed support for SQLAlchemy 1.2.0</li>\n<li>Fixed argument for cursor.execute in sa engine #239 (Thanks @NotSoSuper)</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.0.11 (2017-12-06)</h3>\n<ul>\n<li>Fixed README formatting on pypi</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.0.10 (2017-12-06)</h3>\n<ul>\n<li>Updated regular expressions to be compatible with pymysql #167 (Thanks @AlexLisovoy)</li>\n<li>Added connection recycling in the pool #216</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.0.9 (2016-09-14)</h3>\n<ul>\n<li>Fixed AttributeError in  _request_authentication function #104 (Thanks @ttlttl)</li>\n<li>Fixed legacy auth #105</li>\n<li>uvloop added to test suite #106</li>\n<li>Fixed bug with unicode in json field #107 (Thanks @methane)</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.0.8 (2016-08-24)</h3>\n<ul>\n<li>Default min pool size reduced to 1 #80 (Thanks @Drizzt1991)</li>\n<li>Update to PyMySQL 0.7.5 #89</li>\n<li>Fixed connection cancellation in process of executing a query #79 (Thanks @Drizzt1991)</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>0.0.7 (2016-01-27)</h3>\n<ul>\n<li>Fix for multiple results issue, ported from pymysql #52</li>\n<li>Fixed useless warning with no_delay option #55</li>\n<li>Added async/await support for Engine, SAConnection, Transaction #57</li>\n<li>pool.release returns future so we can wait on it in __aexit__ #60</li>\n<li>Update to PyMySQL 0.6.7</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>0.0.6 (2015-12-11)</h3>\n<ul>\n<li>Fixed bug with SA rollback (Thanks @khlyestovillarion!)</li>\n<li>Fixed issue with default no_delay option (Thanks @khlyestovillarion!)</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>0.0.5 (2015-10-28)</h3>\n<ul>\n<li>no_delay option is deprecated and True by default</li>\n<li>Add Cursor.mogrify() method</li>\n<li>Support for \u201cLOAD LOCAL INFILE\u201d query.</li>\n<li>Check connection inside pool, in case of timeout drop it, fixes #25</li>\n<li>Add support of python 3.5 features to pool, connection and cursor</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>0.0.4 (2015-05-23)</h3>\n<ul>\n<li>Allow to call connection.wait_closed twice.</li>\n<li>Fixed sqlalchemy 1.0.0 support.</li>\n<li>Fix #11: Rename Connection.wait_closed() to .ensure_closed()</li>\n<li>Raise ResourceWarning on non-closed Connection</li>\n<li>Rename Connection.connect to _connect</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>0.0.3 (2015-03-10)</h3>\n<ul>\n<li>Added support for PyMySQL up to 0.6.6.</li>\n<li>Ported improvements from PyMySQL.</li>\n<li>Added basic documentation.</li>\n<li>Fixed and added more examples.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3>0.0.2 (2015-02-17)</h3>\n<ul>\n<li>Added MANIFEST.in.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3>0.0.1 (2015-02-17)</h3>\n<ul>\n<li>Initial release.</li>\n<li>Implemented plain connections: connect, Connection, Cursor.</li>\n<li>Implemented database pools.</li>\n<li>Ported sqlalchemy optional support.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6885460, "releases": {"0.0.21": [{"comment_text": "", "digests": {"md5": "58aacfe5e2c16774989166c75a9c59ba", "sha256": "21d477210fc84616699dfee56503df49360df225b053389461ca297d7c7efb3f"}, "downloads": -1, "filename": "privex_aiomysql-0.0.21-py3-none-any.whl", "has_sig": false, "md5_digest": "58aacfe5e2c16774989166c75a9c59ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41104, "upload_time": "2020-03-25T22:25:34", "upload_time_iso_8601": "2020-03-25T22:25:34.046781Z", "url": "https://files.pythonhosted.org/packages/d9/5b/dfa4391999288d37f973a6f5ab41100fda946097b00e8150c5d3c14c1b34/privex_aiomysql-0.0.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38966ba822eb7bfeaab19ae4ea039af7", "sha256": "f23a9d1e032123a33b45975b64612ecd3bd828e5790839478950bc3e2c8c3f00"}, "downloads": -1, "filename": "privex_aiomysql-0.0.21.tar.gz", "has_sig": false, "md5_digest": "38966ba822eb7bfeaab19ae4ea039af7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39753, "upload_time": "2020-03-25T22:25:36", "upload_time_iso_8601": "2020-03-25T22:25:36.724911Z", "url": "https://files.pythonhosted.org/packages/88/1a/e6d168bfc18408eb80d6ce60cba0ecb38f48909e15d284927c7e30da3de9/privex_aiomysql-0.0.21.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "58aacfe5e2c16774989166c75a9c59ba", "sha256": "21d477210fc84616699dfee56503df49360df225b053389461ca297d7c7efb3f"}, "downloads": -1, "filename": "privex_aiomysql-0.0.21-py3-none-any.whl", "has_sig": false, "md5_digest": "58aacfe5e2c16774989166c75a9c59ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41104, "upload_time": "2020-03-25T22:25:34", "upload_time_iso_8601": "2020-03-25T22:25:34.046781Z", "url": "https://files.pythonhosted.org/packages/d9/5b/dfa4391999288d37f973a6f5ab41100fda946097b00e8150c5d3c14c1b34/privex_aiomysql-0.0.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38966ba822eb7bfeaab19ae4ea039af7", "sha256": "f23a9d1e032123a33b45975b64612ecd3bd828e5790839478950bc3e2c8c3f00"}, "downloads": -1, "filename": "privex_aiomysql-0.0.21.tar.gz", "has_sig": false, "md5_digest": "38966ba822eb7bfeaab19ae4ea039af7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39753, "upload_time": "2020-03-25T22:25:36", "upload_time_iso_8601": "2020-03-25T22:25:36.724911Z", "url": "https://files.pythonhosted.org/packages/88/1a/e6d168bfc18408eb80d6ce60cba0ecb38f48909e15d284927c7e30da3de9/privex_aiomysql-0.0.21.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:09 2020"}