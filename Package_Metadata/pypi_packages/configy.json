{"info": {"author": "Nickolas Grigoriadis", "author_email": "nagrigoriadis@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "#######\nconfigy\n#######\n\nSimple Configuration manager, plays well with testing.\n\n.. image:: https://travis-ci.org/grigi/configy.svg\n    :target: https://travis-ci.org/grigi/configy?branch=master\n.. image:: https://coveralls.io/repos/grigi/configy/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/grigi/configy?branch=master\n\n\nBasic Usage\n===========\n\nInstall from pypi:\n\n.. code-block:: shell\n\n    pip install configy\n\nSpecify the configuration directives as early in execution as possible:\n\n.. code-block:: python\n\n    import configy\n    \n    try:\n        # Every option is optional, fill in as makes sense.\n        configy.load_config(\n            conf='the_configuration.yaml',  # The default config file if not specified as an ENV var\n            env='CONFIGY_FILE',             # The ENV var to look for a config file\n            defaults='defaults.yaml',       # The defaults that is always loaded.\n            data={'manual': 'defaults'},    # Manually provided defaults loaded\n            case_sensitive=True             # Case Sensitive by default\n        )\n    except configy.ConfigyError as e:\n        # Report config load error to user\n    \nGiven a sample YAML config file of:\n\n.. code-block:: YAML\n\n    Something:\n      value: The Value\n      number: 42\n      bool1: 1\n      bool2: FALSE\n      bool3: y\n\nYou then use it so:\n\n.. code-block:: python\n\n    >>> from configy import config\n    >>> config.Something.value\n    'The Value'\n\nIf you try to access any configuration value that isn't defined you will get an exception:\n\n.. code-block:: python\n\n    >>> config.Something.other\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    KeyError: 'other'\n\nThe config object is just a dictionary, so you can use it as a regular dictionary as well:\n\n.. code-block:: python\n\n    >>> config['Something']['value']\n    'The Value'\n    >>> config.Something.get('other', 'default value')\n    'default value'\n\n\nHelper functions\n----------------\n\nSince you can't guarantee the type of a value in the configuration files (YAML treats everything as text), you need to do type conversion manually.\n\nFor ints and floats it is easy:\n\n.. code-block:: python\n\n    >>> int(config.Something.number)\n    42\n    >> float(config.Something.number)\n    42.0\n\nFor booleans it is a bit more tricky, as a boolean can be represented by many different notations. You also don't have complete control over the notation used. For this we provide a ``to_bool()`` helper function.\n\nIt treats case-insensitively \n\n``True``\n    'y', 'yes', '1', 't','true'\n``False``\n    'n', 'no', '0', 'f', 'false'\n\nAnything else will resort to the provided default (which defaults to False)\n\n.. code-block:: python\n\n    >>> from configy import config, to_bool\n    >>> to_bool(config.Something.bool1)\n    True\n    >>> to_bool(config.Something.bool2)\n    False\n    >>> to_bool(config.Something.bool1)\n    True\n    >>> to_bool(config.Something.number)\n    False\n    >>> to_bool(config.Something.number, True)\n    True\n    >>> to_bool(config.Something.number, None)\n    None\n\n\nHow to overload settings for testing\n====================================\n\nDuring testing, one often wants to override some configuration to test something specific.\nConfigy supports this use case.\n\n.. code-block:: python\n\n    from configy import config, testconfig\n    \n    @testconfig.override_config({\n        'Something': {\n            'other': 'I now exist',\n        },\n        'Extra': 'defined',\n    })\n    def test_override():\n        # Existing values still work as per usual\n        assert config.Something.value == 'The Value'\n        # New values \n        assert config.Something.other == 'I now exist'\n        assert config.Extra == 'defined'\n\nOne can also define configuration to be used:\n\n.. code-block:: python\n\n    @testconfig.load_config(\n        conf='test_config.yaml'\n    )\n    def test_load_config():\n        assert config.testvalue == 'test result'\n\nYou can also define the WHOLE configuration that is loaded for that test:\n\n.. code-block:: python\n\n    @testconfig.load_config(data={\n        'testvalue': 'test result',\n    })\n    def test_load_config_data():\n        assert config.testvalue == 'test result'\n\nAll the testing decorators will work on method, class and function level.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/grigi/configy", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "configy", "package_url": "https://pypi.org/project/configy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/configy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/grigi/configy"}, "release_url": "https://pypi.org/project/configy/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Simple Configuration manager, plays well with testing", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple Configuration manager, plays well with testing.</p>\n<a href=\"https://travis-ci.org/grigi/configy?branch=master\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/grigi/configy.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/544cd2ee4bd23cb7acb59ce946813c71577b8367/68747470733a2f2f7472617669732d63692e6f72672f67726967692f636f6e666967792e737667\"></a>\n<a href=\"https://coveralls.io/github/grigi/configy?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/grigi/configy/badge.svg?branch=master&amp;service=github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe9aa337a5fdce3e5a7a3a6a8bb01e57c59eda64/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f67726967692f636f6e666967792f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<p>Install from pypi:</p>\n<pre>pip install configy\n</pre>\n<p>Specify the configuration directives as early in execution as possible:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">configy</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Every option is optional, fill in as makes sense.</span>\n    <span class=\"n\">configy</span><span class=\"o\">.</span><span class=\"n\">load_config</span><span class=\"p\">(</span>\n        <span class=\"n\">conf</span><span class=\"o\">=</span><span class=\"s1\">'the_configuration.yaml'</span><span class=\"p\">,</span>  <span class=\"c1\"># The default config file if not specified as an ENV var</span>\n        <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"s1\">'CONFIGY_FILE'</span><span class=\"p\">,</span>             <span class=\"c1\"># The ENV var to look for a config file</span>\n        <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"s1\">'defaults.yaml'</span><span class=\"p\">,</span>       <span class=\"c1\"># The defaults that is always loaded.</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'manual'</span><span class=\"p\">:</span> <span class=\"s1\">'defaults'</span><span class=\"p\">},</span>    <span class=\"c1\"># Manually provided defaults loaded</span>\n        <span class=\"n\">case_sensitive</span><span class=\"o\">=</span><span class=\"kc\">True</span>             <span class=\"c1\"># Case Sensitive by default</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">configy</span><span class=\"o\">.</span><span class=\"n\">ConfigyError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Report config load error to user</span>\n</pre>\n<p>Given a sample YAML config file of:</p>\n<pre><span class=\"nt\">Something</span><span class=\"p\">:</span>\n  <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">The Value</span>\n  <span class=\"nt\">number</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">42</span>\n  <span class=\"nt\">bool1</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">1</span>\n  <span class=\"nt\">bool2</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">FALSE</span>\n  <span class=\"nt\">bool3</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">y</span>\n</pre>\n<p>You then use it so:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">configy</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"s1\">'The Value'</span>\n</pre>\n<p>If you try to access any configuration value that isn\u2019t defined you will get an exception:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">other</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"s1\">'other'</span>\n</pre>\n<p>The config object is just a dictionary, so you can use it as a regular dictionary as well:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'Something'</span><span class=\"p\">][</span><span class=\"s1\">'value'</span><span class=\"p\">]</span>\n<span class=\"s1\">'The Value'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'other'</span><span class=\"p\">,</span> <span class=\"s1\">'default value'</span><span class=\"p\">)</span>\n<span class=\"s1\">'default value'</span>\n</pre>\n<div id=\"helper-functions\">\n<h3>Helper functions</h3>\n<p>Since you can\u2019t guarantee the type of a value in the configuration files (YAML treats everything as text), you need to do type conversion manually.</p>\n<p>For ints and floats it is easy:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"mi\">42</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"mf\">42.0</span>\n</pre>\n<p>For booleans it is a bit more tricky, as a boolean can be represented by many different notations. You also don\u2019t have complete control over the notation used. For this we provide a <tt>to_bool()</tt> helper function.</p>\n<p>It treats case-insensitively</p>\n<dl>\n<dt><tt>True</tt></dt>\n<dd>\u2018y\u2019, \u2018yes\u2019, \u20181\u2019, \u2018t\u2019,\u2019true\u2019</dd>\n<dt><tt>False</tt></dt>\n<dd>\u2018n\u2019, \u2018no\u2019, \u20180\u2019, \u2018f\u2019, \u2018false\u2019</dd>\n</dl>\n<p>Anything else will resort to the provided default (which defaults to False)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">configy</span> <span class=\"kn\">import</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">to_bool</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_bool</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">bool1</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_bool</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">bool2</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_bool</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">bool1</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_bool</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_bool</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_bool</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"kc\">None</span>\n</pre>\n</div>\n</div>\n<div id=\"how-to-overload-settings-for-testing\">\n<h2>How to overload settings for testing</h2>\n<p>During testing, one often wants to override some configuration to test something specific.\nConfigy supports this use case.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configy</span> <span class=\"kn\">import</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">testconfig</span>\n\n<span class=\"nd\">@testconfig</span><span class=\"o\">.</span><span class=\"n\">override_config</span><span class=\"p\">({</span>\n    <span class=\"s1\">'Something'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'other'</span><span class=\"p\">:</span> <span class=\"s1\">'I now exist'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'Extra'</span><span class=\"p\">:</span> <span class=\"s1\">'defined'</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_override</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Existing values still work as per usual</span>\n    <span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s1\">'The Value'</span>\n    <span class=\"c1\"># New values</span>\n    <span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Something</span><span class=\"o\">.</span><span class=\"n\">other</span> <span class=\"o\">==</span> <span class=\"s1\">'I now exist'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Extra</span> <span class=\"o\">==</span> <span class=\"s1\">'defined'</span>\n</pre>\n<p>One can also define configuration to be used:</p>\n<pre><span class=\"nd\">@testconfig</span><span class=\"o\">.</span><span class=\"n\">load_config</span><span class=\"p\">(</span>\n    <span class=\"n\">conf</span><span class=\"o\">=</span><span class=\"s1\">'test_config.yaml'</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_load_config</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">testvalue</span> <span class=\"o\">==</span> <span class=\"s1\">'test result'</span>\n</pre>\n<p>You can also define the WHOLE configuration that is loaded for that test:</p>\n<pre><span class=\"nd\">@testconfig</span><span class=\"o\">.</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'testvalue'</span><span class=\"p\">:</span> <span class=\"s1\">'test result'</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_load_config_data</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">testvalue</span> <span class=\"o\">==</span> <span class=\"s1\">'test result'</span>\n</pre>\n<p>All the testing decorators will work on method, class and function level.</p>\n</div>\n\n          </div>"}, "last_serial": 2007504, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "db78ad12f4d061c2331f7bde3b63ec76", "sha256": "d2bac6144acc2f6d1975082db2f95bf651182be17b190b926dca2f1931ac9002"}, "downloads": -1, "filename": "configy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "db78ad12f4d061c2331f7bde3b63ec76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6517, "upload_time": "2015-09-08T07:13:53", "upload_time_iso_8601": "2015-09-08T07:13:53.738569Z", "url": "https://files.pythonhosted.org/packages/1a/11/aa7097fcda560e96f9d24e2a9dee8b03de279354c7458ed05f84057473ed/configy-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ef923b49f05e0a6b348934686fd3b61d", "sha256": "48e1bf3c69afb1cbd8d0685c21d9b28651739340b2253f34d3989235c9564bed"}, "downloads": -1, "filename": "configy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ef923b49f05e0a6b348934686fd3b61d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6759, "upload_time": "2016-03-15T09:26:18", "upload_time_iso_8601": "2016-03-15T09:26:18.167962Z", "url": "https://files.pythonhosted.org/packages/b9/53/3534abed00cf7a1c995d9fea6efa1f3369974e4d05ef6566210bc510f4af/configy-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef923b49f05e0a6b348934686fd3b61d", "sha256": "48e1bf3c69afb1cbd8d0685c21d9b28651739340b2253f34d3989235c9564bed"}, "downloads": -1, "filename": "configy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ef923b49f05e0a6b348934686fd3b61d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6759, "upload_time": "2016-03-15T09:26:18", "upload_time_iso_8601": "2016-03-15T09:26:18.167962Z", "url": "https://files.pythonhosted.org/packages/b9/53/3534abed00cf7a1c995d9fea6efa1f3369974e4d05ef6566210bc510f4af/configy-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:51 2020"}