{"info": {"author": "Philipp Busch", "author_email": "hakkeroid@philippbusch.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries"], "description": "configstacker\n=============\n\n.. start-introduction\n\n.. image:: https://gitlab.com/hakkropolis/configstacker/badges/v0.2.0/pipeline.svg\n    :alt: pipeline status\n    :target: https://gitlab.com/hakkropolis/configstacker/commits/v0.2.0\n\n.. image:: https://gitlab.com/hakkropolis/configstacker/badges/v0.2.0/coverage.svg\n    :alt: coverage report\n    :target: https://gitlab.com/hakkropolis/configstacker/commits/v0.2.0\n\n\nWhat is configstacker?\n----------------------\n\nConfigstacker is a python library with the goal to simplify\nconfiguration handling as much as possible. You can read configurations\nfrom different sources (e.g. files, environment variables and others)\nand load single or merge multiple sources at will. The resulting\nconfiguration object can be used like a dictionary or with dot-notation.\nIf you need additional flexibility configstacker also allows you to\nspecify converters for values or merging strategies for keys that occur\nmultiple times throughout different sources. If this is still not\nsufficient enough configstacker makes it very easy for you to add\nadditional source handlers.\n\n.. code-block:: python\n    :name: single-source-example\n\n    #\n    # Single Source Example\n    #\n    from configstacker import YAMLFile\n\n    config = YAMLFile('/path/to/my/config.yml')\n\n    # Dot-notation access\n    assert config.a_key is True\n\n    # Mixed dictionary and dot-notation access\n    assert config['subsection'].nested_key == 100\n\n    # Dictionary-like interface\n    assert config.keys() == ['a_key', 'subsection']\n\n    # Dictionary dumping on any level\n    assert config.dump() == {'a_key': True, 'subsection': {'nested_key': 100}}\n    assert config.subsection.dump() == {'nested_key': 100}\n\n    # New value assignment\n    config.new_value = 10.0\n    assert config.new_value == 10.0\n\n\n.. code-block:: python\n    :name: multi-source-example\n\n    #\n    # Multi Source Example\n    #\n    import configstacker as cs\n\n    # The resulting configuration object behaves\n    # the same as a single source one.\n    config = cs.StackedConfig(\n        # The order of sources defines their search priority whereas the\n        # last element has the highest one.\n        cs.Environment(prefix='MYAPP'),\n        cs.YAMLFile('/path/to/my/config.yml')\n    )\n\n    # Higher priority values shadow lower priority values.\n    assert config.a_key is False\n\n    # Lower prioritized values which are not shadowed stay accessible.\n    assert config['subsection'].nested_key == 100\n\n    # New values will be added to the source that has the highest\n    # priority and is writable.\n    config.other_new_value = True\n    assert config.other_new_value is True\n\n    # In this case the new item was added to the last element in the\n    # source list.\n    assert config.source_list[-1].other_new_value\n\n.. stop-introduction\n\nExamples for type conversion and merging strategies can be found in the\n`documentation <http://configstacker.readthedocs.io/advanced>`_.\n\n\nLatest Version and History\n--------------------------\n\n.. start-version\n\nConfigstacker adheres to `Semantic Versioning <http://semver.org/>`_.\n\nThe current version is 0.2.0 which means configstacker is still in\na planning phase. As such it is *not meant for production use*. That\nsaid it is already very stable and should hit its first major version\nsoon.\n\n.. stop-version\n\nChanges can be found in `CHANGELOG <CHANGELOG.md>`_.\n\n\n.. start-installation\n\nInstallation\n------------\n\nConfigstacker can be installed with pip and only requires\n`six <https://pypi.python.org/pypi/six>`_ for the minimal installation.\n\n.. code::\n\n    pip install configstacker\n\nHowever, some of the source handlers require additional packages when in\nuse.\n\n * `YAMLFile` requires `pyyaml <https://pypi.python.org/pypi/PyYAML>`_\n\nYou can use the following syntax to install all optional dependencies.\nLeave out those from the brackets you do not need.\n\n.. code::\n\n    pip install configstacker[yaml]\n\n.. note::\n\n    New source handlers with additional dependencies might be added over\n    time.\n\n.. stop-installation\n\n\nDocumentation\n-------------\n\nConfigstacker provides a `user documentation <https://configstacker.readthedocs.io/>`_\non `readthedocs.org <https://readthedocs.org/>`_.\n\n\nLicensing\n---------\n\nPlease see `LICENSE <LICENSE>`_.\n\n\nContribution\n------------\n\nContributions are very welcome. The main development happens on\n`gitlab <https://gitlab.com/hakkropolis/configstacker/issues>`_. For reporting\nissues you can also use `github <https://github.com/hakkeroid/configstacker/issues>`_.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/hakkropolis/configstacker", "keywords": "configuration hierarchy multi stacked configs", "license": "BSD-3-clause", "maintainer": "", "maintainer_email": "", "name": "configstacker", "package_url": "https://pypi.org/project/configstacker/", "platform": "", "project_url": "https://pypi.org/project/configstacker/", "project_urls": {"Bug Tracker": "https://gitlab.com/hakkropolis/configstacker/issues", "Documentation": "https://configstacker.readthedocs.io", "Homepage": "https://gitlab.com/hakkropolis/configstacker", "Source Code": "https://gitlab.com/hakkropolis/configstacker/"}, "release_url": "https://pypi.org/project/configstacker/0.2.0/", "requires_dist": ["six", "pyyaml ; extra == 'yaml'"], "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "summary": "Aggregates multiple configuration sources into one configuration object with dot-notation or dictionary-like access.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://gitlab.com/hakkropolis/configstacker/commits/v0.2.0\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/130577f23725f54156c28127b97e12c25d29b9d1/68747470733a2f2f6769746c61622e636f6d2f68616b6b726f706f6c69732f636f6e666967737461636b65722f6261646765732f76302e322e302f706970656c696e652e737667\"></a>\n<a href=\"https://gitlab.com/hakkropolis/configstacker/commits/v0.2.0\" rel=\"nofollow\"><img alt=\"coverage report\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33bf1ddd2a306cb7dbbc4e745ae4e6ca1cfad72d/68747470733a2f2f6769746c61622e636f6d2f68616b6b726f706f6c69732f636f6e666967737461636b65722f6261646765732f76302e322e302f636f7665726167652e737667\"></a>\n<div id=\"what-is-configstacker\">\n<h2>What is configstacker?</h2>\n<p>Configstacker is a python library with the goal to simplify\nconfiguration handling as much as possible. You can read configurations\nfrom different sources (e.g. files, environment variables and others)\nand load single or merge multiple sources at will. The resulting\nconfiguration object can be used like a dictionary or with dot-notation.\nIf you need additional flexibility configstacker also allows you to\nspecify converters for values or merging strategies for keys that occur\nmultiple times throughout different sources. If this is still not\nsufficient enough configstacker makes it very easy for you to add\nadditional source handlers.</p>\n<pre id=\"single-source-example\"><span class=\"c1\">#</span>\n<span class=\"c1\"># Single Source Example</span>\n<span class=\"c1\">#</span>\n<span class=\"kn\">from</span> <span class=\"nn\">configstacker</span> <span class=\"kn\">import</span> <span class=\"n\">YAMLFile</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">YAMLFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/my/config.yml'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Dot-notation access</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">a_key</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Mixed dictionary and dot-notation access</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'subsection'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">nested_key</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>\n\n<span class=\"c1\"># Dictionary-like interface</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">'a_key'</span><span class=\"p\">,</span> <span class=\"s1\">'subsection'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Dictionary dumping on any level</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'a_key'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'subsection'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'nested_key'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}}</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">subsection</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'nested_key'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># New value assignment</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">new_value</span> <span class=\"o\">=</span> <span class=\"mf\">10.0</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">new_value</span> <span class=\"o\">==</span> <span class=\"mf\">10.0</span>\n</pre>\n<pre id=\"multi-source-example\"><span class=\"c1\">#</span>\n<span class=\"c1\"># Multi Source Example</span>\n<span class=\"c1\">#</span>\n<span class=\"kn\">import</span> <span class=\"nn\">configstacker</span> <span class=\"k\">as</span> <span class=\"nn\">cs</span>\n\n<span class=\"c1\"># The resulting configuration object behaves</span>\n<span class=\"c1\"># the same as a single source one.</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">StackedConfig</span><span class=\"p\">(</span>\n    <span class=\"c1\"># The order of sources defines their search priority whereas the</span>\n    <span class=\"c1\"># last element has the highest one.</span>\n    <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'MYAPP'</span><span class=\"p\">),</span>\n    <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">YAMLFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/my/config.yml'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Higher priority values shadow lower priority values.</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">a_key</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Lower prioritized values which are not shadowed stay accessible.</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'subsection'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">nested_key</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>\n\n<span class=\"c1\"># New values will be added to the source that has the highest</span>\n<span class=\"c1\"># priority and is writable.</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">other_new_value</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">other_new_value</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># In this case the new item was added to the last element in the</span>\n<span class=\"c1\"># source list.</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">source_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">other_new_value</span>\n</pre>\n<p>Examples for type conversion and merging strategies can be found in the\n<a href=\"http://configstacker.readthedocs.io/advanced\" rel=\"nofollow\">documentation</a>.</p>\n</div>\n<div id=\"latest-version-and-history\">\n<h2>Latest Version and History</h2>\n<p>Configstacker adheres to <a href=\"http://semver.org/\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<p>The current version is 0.2.0 which means configstacker is still in\na planning phase. As such it is <em>not meant for production use</em>. That\nsaid it is already very stable and should hit its first major version\nsoon.</p>\n<p>Changes can be found in <a href=\"CHANGELOG.md\" rel=\"nofollow\">CHANGELOG</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Configstacker can be installed with pip and only requires\n<a href=\"https://pypi.python.org/pypi/six\" rel=\"nofollow\">six</a> for the minimal installation.</p>\n<pre>pip install configstacker\n</pre>\n<p>However, some of the source handlers require additional packages when in\nuse.</p>\n<blockquote>\n<ul>\n<li><cite>YAMLFile</cite> requires <a href=\"https://pypi.python.org/pypi/PyYAML\" rel=\"nofollow\">pyyaml</a></li>\n</ul>\n</blockquote>\n<p>You can use the following syntax to install all optional dependencies.\nLeave out those from the brackets you do not need.</p>\n<pre>pip install configstacker[yaml]\n</pre>\n<div>\n<p>Note</p>\n<p>New source handlers with additional dependencies might be added over\ntime.</p>\n</div>\n</div>\n<div id=\"id1\">\n<h2>Documentation</h2>\n<p>Configstacker provides a <a href=\"https://configstacker.readthedocs.io/\" rel=\"nofollow\">user documentation</a>\non <a href=\"https://readthedocs.org/\" rel=\"nofollow\">readthedocs.org</a>.</p>\n</div>\n<div id=\"licensing\">\n<h2>Licensing</h2>\n<p>Please see <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>Contributions are very welcome. The main development happens on\n<a href=\"https://gitlab.com/hakkropolis/configstacker/issues\" rel=\"nofollow\">gitlab</a>. For reporting\nissues you can also use <a href=\"https://github.com/hakkeroid/configstacker/issues\" rel=\"nofollow\">github</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 5571693, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "97d5b45f86608d6cb1ed5adcbb4dd472", "sha256": "75693673d87af3891e05f568886d30fd99439a3f70d89c0549a4f65eb7210ff1"}, "downloads": -1, "filename": "configstacker-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "97d5b45f86608d6cb1ed5adcbb4dd472", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21821, "upload_time": "2019-07-20T20:55:29", "upload_time_iso_8601": "2019-07-20T20:55:29.599413Z", "url": "https://files.pythonhosted.org/packages/4a/cc/3f2896d3c2551860dbc88f294b03ddf9cd18ac76e3f492d7dd05981c23a2/configstacker-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e1d43ae4c61635d72f2a22f9c2919e9", "sha256": "badb7ab9cd2e38c0e7a3e1bb7884b146ae7614400c93e211135b0c9c74ec1e2b"}, "downloads": -1, "filename": "configstacker-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9e1d43ae4c61635d72f2a22f9c2919e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16136, "upload_time": "2019-07-20T20:55:32", "upload_time_iso_8601": "2019-07-20T20:55:32.389039Z", "url": "https://files.pythonhosted.org/packages/16/18/77adbfff1eb14b3b1cf810db1fb1a8d43fc61816bab42cf5b8de3a71373e/configstacker-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7118a720fe7ad48aa19d661f0cd1295d", "sha256": "f5e6057b9f7e536f174b4a47830354d51590667eba3b1fed0fec4186093f91df"}, "downloads": -1, "filename": "configstacker-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7118a720fe7ad48aa19d661f0cd1295d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 22373, "upload_time": "2019-07-23T10:17:26", "upload_time_iso_8601": "2019-07-23T10:17:26.950972Z", "url": "https://files.pythonhosted.org/packages/4b/f3/71de320decad728cbc3bccd265a9e32571129f1999b6047a67e2dea1fe1a/configstacker-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "182b0f6046c3c08fe904d5e1b4523f8f", "sha256": "d11b48f0d772a36d43e99ae637fc2838b4de4fe0a952626e55dc9eee4c3096c8"}, "downloads": -1, "filename": "configstacker-0.2.0.tar.gz", "has_sig": false, "md5_digest": "182b0f6046c3c08fe904d5e1b4523f8f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 16825, "upload_time": "2019-07-23T10:17:28", "upload_time_iso_8601": "2019-07-23T10:17:28.959293Z", "url": "https://files.pythonhosted.org/packages/e3/5b/84d993eb3ab2bb75c83d0f19b851800bcc748756d3973c4b47af2af557db/configstacker-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7118a720fe7ad48aa19d661f0cd1295d", "sha256": "f5e6057b9f7e536f174b4a47830354d51590667eba3b1fed0fec4186093f91df"}, "downloads": -1, "filename": "configstacker-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7118a720fe7ad48aa19d661f0cd1295d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 22373, "upload_time": "2019-07-23T10:17:26", "upload_time_iso_8601": "2019-07-23T10:17:26.950972Z", "url": "https://files.pythonhosted.org/packages/4b/f3/71de320decad728cbc3bccd265a9e32571129f1999b6047a67e2dea1fe1a/configstacker-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "182b0f6046c3c08fe904d5e1b4523f8f", "sha256": "d11b48f0d772a36d43e99ae637fc2838b4de4fe0a952626e55dc9eee4c3096c8"}, "downloads": -1, "filename": "configstacker-0.2.0.tar.gz", "has_sig": false, "md5_digest": "182b0f6046c3c08fe904d5e1b4523f8f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*", "size": 16825, "upload_time": "2019-07-23T10:17:28", "upload_time_iso_8601": "2019-07-23T10:17:28.959293Z", "url": "https://files.pythonhosted.org/packages/e3/5b/84d993eb3ab2bb75c83d0f19b851800bcc748756d3973c4b47af2af557db/configstacker-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:53 2020"}