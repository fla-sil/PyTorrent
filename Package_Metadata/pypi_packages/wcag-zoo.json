{"info": {"author": "Samuel Spencer", "author_email": "sam@aristotlemetadata.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only"], "description": "WCAG Zoo - Scripts for automated accessiblity validation\n========================================================\n\n|wcag-zoo-aa-badge| |appveyor| |travis| |coverage| |pypi| |docs|\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/uyo3jx1em3cmjrku?svg=true\n   :target: https://ci.appveyor.com/project/LegoStormtroopr/wcag-zoo\n   :alt: Appveyor testing status\n   \n.. |travis| image:: https://travis-ci.org/data61/wcag-zoo.svg?branch=master\n    :target: https://travis-ci.org/data61/wcag-zoo\n    :alt: Travis-CI  testing status\n\n.. |coverage| image:: https://coveralls.io/repos/github/data61/wcag-zoo/badge.svg\n    :target: https://coveralls.io/github/data61/wcag-zoo\n    :alt: Coveralls code coverage\n\n.. |pypi| image:: https://badge.fury.io/py/wcag-zoo.svg\n    :target: https://badge.fury.io/py/wcag-zoo\n    :alt: Current version on PyPI\n\n.. |docs| image:: https://readthedocs.org/projects/wcag-zoo/badge/?version=latest\n    :target: http://wcag-zoo.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. rtd-inclusion-marker\n\nWhat is it?\n-----------\n\nWCAG-Zoo is a set of command line tools that help provide basic validation of HTML\nagainst the accessibility guidelines laid out by the W3C Web Content Accessibility Guidelines 2.0.\n\nEach tool checks against a limited set of these and is designed to return simple text output and returns an \nerror (or success) code so it can be integrated into continuous build tools like Travis-CI or Jenkins.\nIt can even be imported into your Python code for additional functionality.\n\nWhy should I care about accessibility guidelines?\n-------------------------------------------------\n\nAccessibility means that everyone can use your site. We often forget that not everyone\nhas perfect vision - or even has vision at all! Complete or partial blindess, color-blindness or just old-age\ncan all impact how readily accessible your website can be. \n\nBy building accessibility checking into your build scripts you can be relatively certain that all people can\nreadily use your website. And if you come across an issue, you identify it early - before you hit production\nand they start causing problems for people.\n\nPlus, integrating accessibility into your build scripts shows that you really care about the usability of your site.\nThese tools won't pick up every issue around accessibility, but they'll pick up enough (and do so automatically)\nand helps demonstrate a commitment to accessibility where possible.\n\nThat sounds like a lot of work, is it really that useful?\n---------------------------------------------------------\n\nGranted, accessibility is tough - and you might question how useful it is.\nIf you have an app targeted to a very niche demographic and are working on tight timeframes,\nmaybe accessibility isn't important right now.\n\nBut some industries, such as Government, Healthcare, Legal and Retail all care **a lot** about WCAG compliance.\nTo the point that in some areas it is legislated or mandated.\nIn some cases not complying with certain accessibility guidelines `can even get sued <https://www.w3.org/WAI/bcase/target-case-study>`_\ncan lead to large, expensive lawsuits!\n\nIf you care about working in any of the above sectors, being able to *prove* you are compliant can be a big plus,\nand having that proof built in to your testing suite means identiying issues earlier before they are a problem.\n\nBut all my pages are dynamically created and I use a CSS pre-processor\n----------------------------------------------------------------------\n\nDoesn't matter. If you can generate them, you can output your HTML and CSS in a build script\nand feed them into the WCAG-Zoo via the command line.\n\n\nBut I have lots of user-generated content! How can I possibly test that?\n------------------------------------------------------------------------\n\nIt doesn't matter if your site is mostly user-generated pages. Testing what you can sets a good example\nto your users. Plus many front-end WYSIWYG editors have their own compliance checkers too.\nThis also sets a good example to your end-users as they know that the rest of the site is WCAG-Compliant\nso they should probably endevour to make sure their own content is too.\n\nSince this is a Python library if you are building a dynamic site where end users can edit HTML that\nuses Python on the server side you can import any of the validators directly into your code\nso you can confirm that the user created markup is valid as well.\n\nLastly, if you are building a dynamic site in a language other than Python you can run any of the command\nline scripts with the ``--json`` or ``-J`` flag and this will produce a JSON output that can be parsed and\nused in your preferred target language.\n\nFor details on this see the section in the documentation titled \"`Using WCAG-Zoo in languages other than Python <//wcag-zoo.readthedocs.io/en/latest/development/using_wcag_zoo_not_in_python.html>`_\".\n\nDo I have to check *every* page?\n--------------------------------\n\nThe good news is probably not. If your CSS is reused across across lots of your site\nthen checking a handful of generate pages is probably good enough.\n\nYou convinced me, how do I use it?\n----------------------------------\n\nTwo ways:\n\n1. `In your build and tests scripts, generate some HTML files and use the command line tools so that\n   you can verify your that the CSS and HTML you output can be read. <//wcag-zoo.readthedocs.io/en/latest/development/using_wcag_zoo_not_in_python.html>`_\n\n2. `If you are using Python, once installed from pip, you can import any or all of the tools and\n   inspect the messages and errors directly using <//wcag-zoo.readthedocs.io/en/latest/development/using_wcag_zoo_in_python.html>`_::\n\n       from wcag_zoo.molerat import molerat\n       messages = molerat(html=some_text, ... )\n       assert len(messages['failed']) == 0\n\n\nI've done all that can I have a badge?\n--------------------------------------\n\nOf course! You are on the honour system with these for now. So if you use WCAG-Zoo in your tests\nand like Github-like badges, pick one of these:\n\n* |wcag-zoo-aa-badge| ``https://img.shields.io/badge/WCAG_Zoo-AA-green.svg``\n* |wcag-zoo-aaa-badge| ``https://img.shields.io/badge/WCAG_Zoo-AAA-green.svg``\n\n.. |wcag-zoo-aa-badge| image:: https://img.shields.io/badge/WCAG_Zoo-AA-green.svg\n   :target: https://github.com/data61/wcag-zoo/wiki/Compliance-Statement\n   :alt: Example badge for WCAG-Zoo Double-A compliance\n   \n.. |wcag-zoo-aaa-badge| image:: https://img.shields.io/badge/WCAG_Zoo-AAA-green.svg\n   :target: https://github.com/data61/wcag-zoo/wiki/Compliance-Statement\n   :alt: Example badge for WCAG-Zoo Triple-A compliance\n\nReSTructured Text::\n\n    .. image:: https://img.shields.io/badge/WCAG_Zoo-AA-green.svg\n       :target: https://github.com/data61/wcag-zoo/wiki/Compliance-Statement\n       :alt: This repository is WCAG-Zoo compliant\n\nMarkdown::\n\n    ![This repository is WCAG-Zoo compliant][wcag-zoo-logo]\n    \n    [wcag-zoo-logo]: https://img.shields.io/badge/WCAG_Zoo-AA-green.svg \"WCAG-Zoo Compliant\"\n\nInstalling\n----------\n\n* Stable: ``pip3 install wcag-zoo``\n* Development: ``pip3 install https://github.com/LegoStormtroopr/wcag-zoo``\n\n\nHow to Use\n----------\n\nAll WCAG-Zoo commands are exposed through ``zookeeper`` from the command line.\n\nCurrent critters include:\n\n* Anteater - checks ``img`` tags for alt tags::\n\n    zookeeper anteater your_file.html --level=AA\n\n* Ayeaye - checks for the presence and uniqueness of accesskeys::\n\n    zookeeper ayeaye your_file.html --level=AA\n\n* Molerat - color contrast checking::\n\n    zookeeper molerat your_file.html --level=AA\n\n* Parade - runs all validators against the given files with allowable exclusions::\n\n    zookeeper parade your_file.html --level=AA\n   \n* Tarsier - tree traveral to check headings are correct::\n\n    zookeeper tarsier your_file.html --level=AA\n\nFor more help on zookeeper from the command line run::\n\n    zookeeper --help\n\nOr for help on a specific command::\n\n    zookeeper ayeaye --help\n\nLimitations\n-----------\n\nAt this point, WCAG-Zoo commands **do not** handle nested media queries, but they do support\nsingle level media queries. So this will be interpreted::\n\n    @media (min-width: 600px) and (max-width: 800px) {\n        .this_rule_works {color:red}\n    }\n\nBut this won't (plus this isn't supported across some browsers)::\n\n    @media (min-width: 600px) {\n        @media (max-width: 800px) {\n            .this_rule_wont_work {color:red}\n        }\n    }", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/data61/wcag-zoo", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "wcag-zoo", "package_url": "https://pypi.org/project/wcag-zoo/", "platform": "", "project_url": "https://pypi.org/project/wcag-zoo/", "project_urls": {"Homepage": "https://github.com/data61/wcag-zoo"}, "release_url": "https://pypi.org/project/wcag-zoo/0.2.6/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/data61/wcag-zoo/wiki/Compliance-Statement\" rel=\"nofollow\"><img alt=\"Example badge for WCAG-Zoo Double-A compliance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9c04e06041d138a8e42f9e0010e74a340283aa7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f574341475f5a6f6f2d41412d677265656e2e737667\"></a> <a href=\"https://ci.appveyor.com/project/LegoStormtroopr/wcag-zoo\" rel=\"nofollow\"><img alt=\"Appveyor testing status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4bfe1d9a6edbd3c12179588bfa9698e29023856b/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f75796f336a7831656d33636d6a726b753f7376673d74727565\"></a> <a href=\"https://travis-ci.org/data61/wcag-zoo\" rel=\"nofollow\"><img alt=\"Travis-CI  testing status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12bba60c4b92ba18fe094f2dc416908bce7d80d0/68747470733a2f2f7472617669732d63692e6f72672f6461746136312f776361672d7a6f6f2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/data61/wcag-zoo\" rel=\"nofollow\"><img alt=\"Coveralls code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a372474d669c7d6189816fa1e091177ea73da93e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6461746136312f776361672d7a6f6f2f62616467652e737667\"></a> <a href=\"https://badge.fury.io/py/wcag-zoo\" rel=\"nofollow\"><img alt=\"Current version on PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fc56ff2c7553ce976ba528f9ab949eab06afb43/68747470733a2f2f62616467652e667572792e696f2f70792f776361672d7a6f6f2e737667\"></a> <a href=\"http://wcag-zoo.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c15d27b777cf9b3de44a409b0a06de9ae49abd0/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f776361672d7a6f6f2f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<div id=\"what-is-it\">\n<h2>What is it?</h2>\n<p>WCAG-Zoo is a set of command line tools that help provide basic validation of HTML\nagainst the accessibility guidelines laid out by the W3C Web Content Accessibility Guidelines 2.0.</p>\n<p>Each tool checks against a limited set of these and is designed to return simple text output and returns an\nerror (or success) code so it can be integrated into continuous build tools like Travis-CI or Jenkins.\nIt can even be imported into your Python code for additional functionality.</p>\n</div>\n<div id=\"why-should-i-care-about-accessibility-guidelines\">\n<h2>Why should I care about accessibility guidelines?</h2>\n<p>Accessibility means that everyone can use your site. We often forget that not everyone\nhas perfect vision - or even has vision at all! Complete or partial blindess, color-blindness or just old-age\ncan all impact how readily accessible your website can be.</p>\n<p>By building accessibility checking into your build scripts you can be relatively certain that all people can\nreadily use your website. And if you come across an issue, you identify it early - before you hit production\nand they start causing problems for people.</p>\n<p>Plus, integrating accessibility into your build scripts shows that you really care about the usability of your site.\nThese tools won\u2019t pick up every issue around accessibility, but they\u2019ll pick up enough (and do so automatically)\nand helps demonstrate a commitment to accessibility where possible.</p>\n</div>\n<div id=\"that-sounds-like-a-lot-of-work-is-it-really-that-useful\">\n<h2>That sounds like a lot of work, is it really that useful?</h2>\n<p>Granted, accessibility is tough - and you might question how useful it is.\nIf you have an app targeted to a very niche demographic and are working on tight timeframes,\nmaybe accessibility isn\u2019t important right now.</p>\n<p>But some industries, such as Government, Healthcare, Legal and Retail all care <strong>a lot</strong> about WCAG compliance.\nTo the point that in some areas it is legislated or mandated.\nIn some cases not complying with certain accessibility guidelines <a href=\"https://www.w3.org/WAI/bcase/target-case-study\" rel=\"nofollow\">can even get sued</a>\ncan lead to large, expensive lawsuits!</p>\n<p>If you care about working in any of the above sectors, being able to <em>prove</em> you are compliant can be a big plus,\nand having that proof built in to your testing suite means identiying issues earlier before they are a problem.</p>\n</div>\n<div id=\"but-all-my-pages-are-dynamically-created-and-i-use-a-css-pre-processor\">\n<h2>But all my pages are dynamically created and I use a CSS pre-processor</h2>\n<p>Doesn\u2019t matter. If you can generate them, you can output your HTML and CSS in a build script\nand feed them into the WCAG-Zoo via the command line.</p>\n</div>\n<div id=\"but-i-have-lots-of-user-generated-content-how-can-i-possibly-test-that\">\n<h2>But I have lots of user-generated content! How can I possibly test that?</h2>\n<p>It doesn\u2019t matter if your site is mostly user-generated pages. Testing what you can sets a good example\nto your users. Plus many front-end WYSIWYG editors have their own compliance checkers too.\nThis also sets a good example to your end-users as they know that the rest of the site is WCAG-Compliant\nso they should probably endevour to make sure their own content is too.</p>\n<p>Since this is a Python library if you are building a dynamic site where end users can edit HTML that\nuses Python on the server side you can import any of the validators directly into your code\nso you can confirm that the user created markup is valid as well.</p>\n<p>Lastly, if you are building a dynamic site in a language other than Python you can run any of the command\nline scripts with the <tt><span class=\"pre\">--json</span></tt> or <tt><span class=\"pre\">-J</span></tt> flag and this will produce a JSON output that can be parsed and\nused in your preferred target language.</p>\n<p>For details on this see the section in the documentation titled \u201c<a href=\"//wcag-zoo.readthedocs.io/en/latest/development/using_wcag_zoo_not_in_python.html\" rel=\"nofollow\">Using WCAG-Zoo in languages other than Python</a>\u201d.</p>\n</div>\n<div id=\"do-i-have-to-check-every-page\">\n<h2>Do I have to check <em>every</em> page?</h2>\n<p>The good news is probably not. If your CSS is reused across across lots of your site\nthen checking a handful of generate pages is probably good enough.</p>\n</div>\n<div id=\"you-convinced-me-how-do-i-use-it\">\n<h2>You convinced me, how do I use it?</h2>\n<p>Two ways:</p>\n<ol>\n<li><p><a href=\"//wcag-zoo.readthedocs.io/en/latest/development/using_wcag_zoo_not_in_python.html\" rel=\"nofollow\">In your build and tests scripts, generate some HTML files and use the command line tools so that\nyou can verify your that the CSS and HTML you output can be read.</a></p>\n</li>\n<li><p><a href=\"//wcag-zoo.readthedocs.io/en/latest/development/using_wcag_zoo_in_python.html\" rel=\"nofollow\">If you are using Python, once installed from pip, you can import any or all of the tools and\ninspect the messages and errors directly using</a>:</p>\n<pre>from wcag_zoo.molerat import molerat\nmessages = molerat(html=some_text, ... )\nassert len(messages['failed']) == 0\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"i-ve-done-all-that-can-i-have-a-badge\">\n<h2>I\u2019ve done all that can I have a badge?</h2>\n<p>Of course! You are on the honour system with these for now. So if you use WCAG-Zoo in your tests\nand like Github-like badges, pick one of these:</p>\n<ul>\n<li><a href=\"https://github.com/data61/wcag-zoo/wiki/Compliance-Statement\" rel=\"nofollow\"><img alt=\"Example badge for WCAG-Zoo Double-A compliance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9c04e06041d138a8e42f9e0010e74a340283aa7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f574341475f5a6f6f2d41412d677265656e2e737667\"></a> <tt><span class=\"pre\">https://img.shields.io/badge/WCAG_Zoo-AA-green.svg</span></tt></li>\n<li><a href=\"https://github.com/data61/wcag-zoo/wiki/Compliance-Statement\" rel=\"nofollow\"><img alt=\"Example badge for WCAG-Zoo Triple-A compliance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa52767b64f8f8911e7f7a421e664f5b9e6aaf12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f574341475f5a6f6f2d4141412d677265656e2e737667\"></a> <tt><span class=\"pre\">https://img.shields.io/badge/WCAG_Zoo-AAA-green.svg</span></tt></li>\n</ul>\n<p>ReSTructured Text:</p>\n<pre>.. image:: https://img.shields.io/badge/WCAG_Zoo-AA-green.svg\n   :target: https://github.com/data61/wcag-zoo/wiki/Compliance-Statement\n   :alt: This repository is WCAG-Zoo compliant\n</pre>\n<p>Markdown:</p>\n<pre>![This repository is WCAG-Zoo compliant][wcag-zoo-logo]\n\n[wcag-zoo-logo]: https://img.shields.io/badge/WCAG_Zoo-AA-green.svg \"WCAG-Zoo Compliant\"\n</pre>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<ul>\n<li>Stable: <tt>pip3 install <span class=\"pre\">wcag-zoo</span></tt></li>\n<li>Development: <tt>pip3 install <span class=\"pre\">https://github.com/LegoStormtroopr/wcag-zoo</span></tt></li>\n</ul>\n</div>\n<div id=\"how-to-use\">\n<h2>How to Use</h2>\n<p>All WCAG-Zoo commands are exposed through <tt>zookeeper</tt> from the command line.</p>\n<p>Current critters include:</p>\n<ul>\n<li><p>Anteater - checks <tt>img</tt> tags for alt tags:</p>\n<pre>zookeeper anteater your_file.html --level=AA\n</pre>\n</li>\n<li><p>Ayeaye - checks for the presence and uniqueness of accesskeys:</p>\n<pre>zookeeper ayeaye your_file.html --level=AA\n</pre>\n</li>\n<li><p>Molerat - color contrast checking:</p>\n<pre>zookeeper molerat your_file.html --level=AA\n</pre>\n</li>\n<li><p>Parade - runs all validators against the given files with allowable exclusions:</p>\n<pre>zookeeper parade your_file.html --level=AA\n</pre>\n</li>\n<li><p>Tarsier - tree traveral to check headings are correct:</p>\n<pre>zookeeper tarsier your_file.html --level=AA\n</pre>\n</li>\n</ul>\n<p>For more help on zookeeper from the command line run:</p>\n<pre>zookeeper --help\n</pre>\n<p>Or for help on a specific command:</p>\n<pre>zookeeper ayeaye --help\n</pre>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>At this point, WCAG-Zoo commands <strong>do not</strong> handle nested media queries, but they do support\nsingle level media queries. So this will be interpreted:</p>\n<pre>@media (min-width: 600px) and (max-width: 800px) {\n    .this_rule_works {color:red}\n}\n</pre>\n<p>But this won\u2019t (plus this isn\u2019t supported across some browsers):</p>\n<pre>@media (min-width: 600px) {\n    @media (max-width: 800px) {\n        .this_rule_wont_work {color:red}\n    }\n}\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6211186, "releases": {"0.0.11": [{"comment_text": "", "digests": {"md5": "ba0ba4c413a74cc814b6407cbfea17f9", "sha256": "3c3ff01c7b5ade3fecda1f7ae179fadfdbf68cd688219e182f83b94ad1ceb842"}, "downloads": -1, "filename": "wcag-zoo-0.0.11.tar.gz", "has_sig": false, "md5_digest": "ba0ba4c413a74cc814b6407cbfea17f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16769, "upload_time": "2017-02-01T22:37:43", "upload_time_iso_8601": "2017-02-01T22:37:43.549610Z", "url": "https://files.pythonhosted.org/packages/69/b5/f9b0cbe82d3052c336b451fa038479d3fb58e54663b7449f8994a18bffed/wcag-zoo-0.0.11.tar.gz", "yanked": false}], "0.0.111": [{"comment_text": "", "digests": {"md5": "5e6169de09b27cfa41f8252d3d1e78ab", "sha256": "a7b4430f97f23efb50489947436e0d36492c39833350747df39a7fe5b93a4736"}, "downloads": -1, "filename": "wcag-zoo-0.0.111.tar.gz", "has_sig": false, "md5_digest": "5e6169de09b27cfa41f8252d3d1e78ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16768, "upload_time": "2017-02-01T22:46:18", "upload_time_iso_8601": "2017-02-01T22:46:18.137377Z", "url": "https://files.pythonhosted.org/packages/79/db/25969292c672fbddedfbcedbcd62469c9a93848452de0ee1a4410291aef3/wcag-zoo-0.0.111.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "cf55b08823746c46af757eb9c283a45a", "sha256": "f3a95dd31a16c468b9734b84c4e044d71db84da592abc7efac29c8842d56ff39"}, "downloads": -1, "filename": "wcag-zoo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cf55b08823746c46af757eb9c283a45a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17180, "upload_time": "2017-02-02T11:29:30", "upload_time_iso_8601": "2017-02-02T11:29:30.194490Z", "url": "https://files.pythonhosted.org/packages/96/06/9305159f25704d592e2b918eb0aeb68af3eebf864fb9359809793a1e9880/wcag-zoo-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "adb33d4882ab7aba8ec7ecc1d2754cb5", "sha256": "bf5a05c8eab591be8fb7e9f57e4e7f4a3ba63b30decda911d30d88bf77656f19"}, "downloads": -1, "filename": "wcag-zoo-0.2.0.tar.gz", "has_sig": false, "md5_digest": "adb33d4882ab7aba8ec7ecc1d2754cb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17582, "upload_time": "2017-08-09T10:51:17", "upload_time_iso_8601": "2017-08-09T10:51:17.056717Z", "url": "https://files.pythonhosted.org/packages/db/fe/c198eaac2ab67e86b35d490ea3c01da27509825aeaee4923cbd9b29d414a/wcag-zoo-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e6ca2a095d06d54b5d67bcec42db8ee4", "sha256": "dd00f5ce61182ec91377e6120d07eda73d9bb77b44621214e412513310e77d10"}, "downloads": -1, "filename": "wcag-zoo-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e6ca2a095d06d54b5d67bcec42db8ee4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17593, "upload_time": "2017-09-11T10:35:29", "upload_time_iso_8601": "2017-09-11T10:35:29.320501Z", "url": "https://files.pythonhosted.org/packages/34/9d/36b3ebbac30197638c62343c63a5263bb3b30f98e5d7633a8c3c7c56397d/wcag-zoo-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "3a52554a38a6556a589df6a52645ef9f", "sha256": "31953934fa069a4e53b86cca8ceef7150de771ee76de84019057ef38e284d4f7"}, "downloads": -1, "filename": "wcag-zoo-0.2.2.tar.gz", "has_sig": false, "md5_digest": "3a52554a38a6556a589df6a52645ef9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17614, "upload_time": "2017-09-12T03:35:14", "upload_time_iso_8601": "2017-09-12T03:35:14.368530Z", "url": "https://files.pythonhosted.org/packages/ba/3a/cac45dc2b204e02f23d2d42376af5f40052638b9bd3bb42bed688bbe2cc2/wcag-zoo-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "f06c53f5e6cb8c563c484667d6729dbe", "sha256": "fba8d905783c481104c5d710e1fdb7176f717b561ddc19511bee967bda26b5cc"}, "downloads": -1, "filename": "wcag-zoo-0.2.3.tar.gz", "has_sig": false, "md5_digest": "f06c53f5e6cb8c563c484667d6729dbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18228, "upload_time": "2017-09-13T07:39:54", "upload_time_iso_8601": "2017-09-13T07:39:54.005133Z", "url": "https://files.pythonhosted.org/packages/75/cf/66ed0c55428bc0e10094ad032a9ec8bc5c51e7cc47fdcde574d62035bbe7/wcag-zoo-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "990aa5e5fd20d1c4eabe03b175af31b8", "sha256": "254914a23e5a78bfa3174e27f480c0837d4c4daf6852bf84d4ac194819fc71f2"}, "downloads": -1, "filename": "wcag-zoo-0.2.4.tar.gz", "has_sig": false, "md5_digest": "990aa5e5fd20d1c4eabe03b175af31b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18353, "upload_time": "2017-12-18T00:54:40", "upload_time_iso_8601": "2017-12-18T00:54:40.091259Z", "url": "https://files.pythonhosted.org/packages/db/73/02c661743f120788e6d60f7f764e260fcb218bc5c079fa3af1f46942791f/wcag-zoo-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "338ba1bcba8dac42d5f8d96e720a5f76", "sha256": "8d42fa64ac7607deb7216d3b5ec313eb4365df1bb7f6f23e9d9bf529772feee9"}, "downloads": -1, "filename": "wcag-zoo-0.2.5.tar.gz", "has_sig": false, "md5_digest": "338ba1bcba8dac42d5f8d96e720a5f76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17443, "upload_time": "2017-12-28T11:32:57", "upload_time_iso_8601": "2017-12-28T11:32:57.836807Z", "url": "https://files.pythonhosted.org/packages/c1/fc/b9a6df1e213cff1bed26c6baba5043388689a47a14703dd1df67edba3c62/wcag-zoo-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "836447a4885444819f1da4f5a91b8c1e", "sha256": "345b387c5be41f5dfb3d774cffce270c0347dbbe1f59aacfd2bdbcf2ac57cd99"}, "downloads": -1, "filename": "wcag-zoo-0.2.6.tar.gz", "has_sig": false, "md5_digest": "836447a4885444819f1da4f5a91b8c1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20924, "upload_time": "2019-11-27T23:07:18", "upload_time_iso_8601": "2019-11-27T23:07:18.643689Z", "url": "https://files.pythonhosted.org/packages/cf/f6/94a7727e69ba6e70cf075e496e6e1f710754422235de637835dd5a5a7831/wcag-zoo-0.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "836447a4885444819f1da4f5a91b8c1e", "sha256": "345b387c5be41f5dfb3d774cffce270c0347dbbe1f59aacfd2bdbcf2ac57cd99"}, "downloads": -1, "filename": "wcag-zoo-0.2.6.tar.gz", "has_sig": false, "md5_digest": "836447a4885444819f1da4f5a91b8c1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20924, "upload_time": "2019-11-27T23:07:18", "upload_time_iso_8601": "2019-11-27T23:07:18.643689Z", "url": "https://files.pythonhosted.org/packages/cf/f6/94a7727e69ba6e70cf075e496e6e1f710754422235de637835dd5a5a7831/wcag-zoo-0.2.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:47 2020"}