{"info": {"author": "Christopher Jordan", "author_email": "christopherjordan87@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "cthulhu\n-------\n.. image:: https://travis-ci.org/cjordan/cthulhu.svg?branch=master\n   :target: https://travis-ci.org/cjordan/cthulhu\n.. image:: https://coveralls.io/repos/github/cjordan/cthulhu/badge.svg?branch=master\n   :target: https://coveralls.io/github/cjordan/cthulhu?branch=master\n\nIonospheric diagnostics and tools. Mostly designed to work with the information provided by RTS calibration logs for EoR analysis, but will work with any other positional data.\n\nUsage\n-----\n``cthulhu`` is designed to interface with the Murchison Widefield Array (MWA) Real-Time System (RTS) calibration software. But, ``cthulhu`` is also modular enough to accept generic ionospheric data; it needs only the expected and apparent positions of sources (provided as \"offsets\" or \"shifts\").\n\n``cthulhu_wrapper.py`` acts as the primary interface for RTS data, and this application is directly responsible for populating the MWA quality-assurance database (QA DB). ``cthulhu_wrapper.py`` also acts as a demonstration of using the ``cthulhu`` library, but it may be easier to follow library usage with examples in the ``notebooks`` directory.\n\nA simple usage of cthulhu is given in \"cthulhu_wrapper.py\". Alternatively, for integration with another script or somesuch::\n\n        from cthulhu.reconstruct import Obsid\n        from cthulhu.plot_tools import generate_diagnostic_figure, raw_and_tec\n        obj = Obsid([ra, dec, ra_shifts, dec_shifts])\n        generate_diagnostic_figure(obj)\n        raw_and_tec(obj)\n\nwhere ``ra``, ``dec``, ``ra_shifts`` and ``dec_shifts`` are lists or numpy arrays containing expected and apparent positions of sources due to ionospheric activity. This will generate plots in the present working directory under ``plots`` and ``raw_and_tec``.\n\nIf interfacing with RTS logs, cthulhu includes scripts to convert RTS logs to pickles, JSONs and YAMLs. These intermediate files are useful because interfacing directly with an RTS log is much slower, and occupy much smaller volumes. Pickles will be approximately one-third the size of a JSON or YAML, but need to be unpacked before being inspected, and are not compatible across all versions of python and computer architectures. In addition, pickles can execute arbitrary code upon opening, so avoid using them whenever possible. YAML is also a lot more readable than JSON, as well as contained in a smaller file size, so use YAML if you can!\n\nLimitations\n-----------\nCurrently, cthulhu expects coordinates to be in a celestial reference frame ($\\alpha$, $\\delta$). However, no coordinate transformations (or etc.) are performed with common operations, so your resulting plots will simply use the values of your input data's coordinate system with default RA/Dec. labels. Other coordinates could be incorporated in the future, but is beyond the scope of this work.\n\nModelling and correcting the \"ionosphere\" from the data is not implemented correctly yet, although this will not involve much work.\n\nBugs? Inconsistencies?\n----------------------\nAbsolutely! If you find something odd, let me know and I'll attempt to fix it ASAP.\n\nContact\n-------\nchristopherjordan87 -at- gmail.com\n\nDependencies\n------------\n- python 2.7.x or 3.x\n- numpy\n- scipy\n- astropy\n- matplotlib\n- future\n- pyGrad2Surf (available on my GitHub_)\n\n.. _GitHub: https://github.com/cjordan/pyGrad2Surf\n\nOptional dependencies\n---------------------\n- PyYAML (human-readable intermediate format, really nice!)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/chjordan/cthulhu", "keywords": "signal processing", "license": "MPL 2.0", "maintainer": "", "maintainer_email": "", "name": "cthulhu", "package_url": "https://pypi.org/project/cthulhu/", "platform": "", "project_url": "https://pypi.org/project/cthulhu/", "project_urls": {"Homepage": "https://gitlab.com/chjordan/cthulhu"}, "release_url": "https://pypi.org/project/cthulhu/0.2.0/", "requires_dist": ["numpy", "scipy", "astropy", "matplotlib", "pyGrad2Surf", "pyyaml", "future"], "requires_python": "", "summary": "Python software suite for various ionospheric analyses", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"cthulhu\">\n<h2>cthulhu</h2>\n<a href=\"https://travis-ci.org/cjordan/cthulhu\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/cjordan/cthulhu.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2824654077b5aaae8c691ea9332c3507006a3d5c/68747470733a2f2f7472617669732d63692e6f72672f636a6f7264616e2f637468756c68752e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/cjordan/cthulhu?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/cjordan/cthulhu/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31e92c866b7612154996f6e540294e827f140fed/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f636a6f7264616e2f637468756c68752f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Ionospheric diagnostics and tools. Mostly designed to work with the information provided by RTS calibration logs for EoR analysis, but will work with any other positional data.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><tt>cthulhu</tt> is designed to interface with the Murchison Widefield Array (MWA) Real-Time System (RTS) calibration software. But, <tt>cthulhu</tt> is also modular enough to accept generic ionospheric data; it needs only the expected and apparent positions of sources (provided as \u201coffsets\u201d or \u201cshifts\u201d).</p>\n<p><tt>cthulhu_wrapper.py</tt> acts as the primary interface for RTS data, and this application is directly responsible for populating the MWA quality-assurance database (QA DB). <tt>cthulhu_wrapper.py</tt> also acts as a demonstration of using the <tt>cthulhu</tt> library, but it may be easier to follow library usage with examples in the <tt>notebooks</tt> directory.</p>\n<p>A simple usage of cthulhu is given in \u201ccthulhu_wrapper.py\u201d. Alternatively, for integration with another script or somesuch:</p>\n<pre>from cthulhu.reconstruct import Obsid\nfrom cthulhu.plot_tools import generate_diagnostic_figure, raw_and_tec\nobj = Obsid([ra, dec, ra_shifts, dec_shifts])\ngenerate_diagnostic_figure(obj)\nraw_and_tec(obj)\n</pre>\n<p>where <tt>ra</tt>, <tt>dec</tt>, <tt>ra_shifts</tt> and <tt>dec_shifts</tt> are lists or numpy arrays containing expected and apparent positions of sources due to ionospheric activity. This will generate plots in the present working directory under <tt>plots</tt> and <tt>raw_and_tec</tt>.</p>\n<p>If interfacing with RTS logs, cthulhu includes scripts to convert RTS logs to pickles, JSONs and YAMLs. These intermediate files are useful because interfacing directly with an RTS log is much slower, and occupy much smaller volumes. Pickles will be approximately one-third the size of a JSON or YAML, but need to be unpacked before being inspected, and are not compatible across all versions of python and computer architectures. In addition, pickles can execute arbitrary code upon opening, so avoid using them whenever possible. YAML is also a lot more readable than JSON, as well as contained in a smaller file size, so use YAML if you can!</p>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>Currently, cthulhu expects coordinates to be in a celestial reference frame ($alpha$, $delta$). However, no coordinate transformations (or etc.) are performed with common operations, so your resulting plots will simply use the values of your input data\u2019s coordinate system with default RA/Dec. labels. Other coordinates could be incorporated in the future, but is beyond the scope of this work.</p>\n<p>Modelling and correcting the \u201cionosphere\u201d from the data is not implemented correctly yet, although this will not involve much work.</p>\n</div>\n<div id=\"bugs-inconsistencies\">\n<h2>Bugs? Inconsistencies?</h2>\n<p>Absolutely! If you find something odd, let me know and I\u2019ll attempt to fix it ASAP.</p>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>christopherjordan87 -at- gmail.com</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>python 2.7.x or 3.x</li>\n<li>numpy</li>\n<li>scipy</li>\n<li>astropy</li>\n<li>matplotlib</li>\n<li>future</li>\n<li>pyGrad2Surf (available on my <a href=\"https://github.com/cjordan/pyGrad2Surf\" rel=\"nofollow\">GitHub</a>)</li>\n</ul>\n</div>\n<div id=\"optional-dependencies\">\n<h2>Optional dependencies</h2>\n<ul>\n<li>PyYAML (human-readable intermediate format, really nice!)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6863045, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ea76c194ca04420df0b4cf52701d2fe3", "sha256": "2c0eef9c75c17fcebd165bf023d57e203fedf6d4c6f46e81ec5364c7d2a4bd39"}, "downloads": -1, "filename": "cthulhu-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ea76c194ca04420df0b4cf52701d2fe3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28071, "upload_time": "2017-10-24T06:33:41", "upload_time_iso_8601": "2017-10-24T06:33:41.568964Z", "url": "https://files.pythonhosted.org/packages/c9/12/a31b87325f1fc416734b0d062eed9ed22f44e50b000f87540e6348e28691/cthulhu-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "df7d89a77469e927130b2c8459388e68", "sha256": "128268d29662689713fffa21d657773b8072f3e5198ecf0bae1ef241c3ccf194"}, "downloads": -1, "filename": "cthulhu-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "df7d89a77469e927130b2c8459388e68", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25290, "upload_time": "2018-06-15T01:57:44", "upload_time_iso_8601": "2018-06-15T01:57:44.364870Z", "url": "https://files.pythonhosted.org/packages/00/20/3bafa6261555e5235b1d758cca1ed2ceec428d98e1f03bf5708fab3c197a/cthulhu-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b3811d2b84b585413397c82b33d6553d", "sha256": "c918d04d179cab8a4055a2cc904110e437c14aa71e2b5435b6f2b36e00391cd6"}, "downloads": -1, "filename": "cthulhu-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b3811d2b84b585413397c82b33d6553d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25316, "upload_time": "2018-06-15T02:48:16", "upload_time_iso_8601": "2018-06-15T02:48:16.382917Z", "url": "https://files.pythonhosted.org/packages/d2/d8/3b2e3d2816a585638bfab9032be9c6ba07116059960c1ccf09c7786e866d/cthulhu-0.1.2-py2.py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0e9a95a865e0eb8c1982f35f718100e2", "sha256": "0226c9fdcb0eabd9ab36756e996270920577773ce8bfc192e8d17554188d0f9a"}, "downloads": -1, "filename": "cthulhu-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e9a95a865e0eb8c1982f35f718100e2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33344, "upload_time": "2020-03-23T03:43:04", "upload_time_iso_8601": "2020-03-23T03:43:04.033596Z", "url": "https://files.pythonhosted.org/packages/81/6e/63eb0dc8cc2ff6a27cfdf41811d774876bf14473cb38c75939192fa98990/cthulhu-0.2.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e9a95a865e0eb8c1982f35f718100e2", "sha256": "0226c9fdcb0eabd9ab36756e996270920577773ce8bfc192e8d17554188d0f9a"}, "downloads": -1, "filename": "cthulhu-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e9a95a865e0eb8c1982f35f718100e2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33344, "upload_time": "2020-03-23T03:43:04", "upload_time_iso_8601": "2020-03-23T03:43:04.033596Z", "url": "https://files.pythonhosted.org/packages/81/6e/63eb0dc8cc2ff6a27cfdf41811d774876bf14473cb38c75939192fa98990/cthulhu-0.2.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:41:37 2020"}