{"info": {"author": "Bill Kudo", "author_email": "bluesky42624@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "PyProg is an Open-Source library for creating progress indicators (e.g. progress bars). It helps you create customizable progress indicators. This library is for Python. It does not have any dependencies.\n\n=============\nCompatibility\n=============\n\nPyProg is compatible with both Python 3 and Python 2, and will also work on Qt Console.\n\n============\nInstallation\n============\n\nLatest build: ``pip install pyprog``\n\nLatest development build: ``pip install git+https://github.com/Bill13579/pyprog.git@develop``\n\nAfter you have installed PyProg, you can test if it has been successfully installed by running ``import pyprog`` in python. If PyProg was installed successfully, it should show no errors.\n\n==================================\nHow to use the PyProg Progress Bar\n==================================\n\nTo create a progress bar, follow these steps:\n\n1. Import PyProg: ``import pyprog``\n2. Create a ``ProgressBar`` object: ``prog = pyprog.ProgressBar(\"\", \"\")``\n3. Show the bar: ``prog.update()``\n4. To update the status, use ``prog.set_stat(<status>)`` to set the status and then use ``prog.update()`` to actually show the change\n5. When finished, use ``prog.end()`` to make the Progress Bar last\n\nExample Code with Fake For loop:\n\n.. code-block:: python\n\n\timport pyprog\n\tfrom time import sleep\n\n\t# Create a PyProg ProgressBar Object\n\tprog = pyprog.ProgressBar(\":-) \", \" OK!\")\n\n\t# Show the initial status\n\tprog.update()\n\n\t# Fake for loop\n\tfor i in range(0, 100):\n\n\t\t# Sleep for a while (This is just to slow down the for loop so that it won't end in an instant)\n\t\tsleep(0.1)\n\n\t\t# Update status\n\t\tprog.set_stat(i + 1)\n\n\t\t# Show (Update) the current status\n\t\tprog.update()\n\n\t# Make the Progress Bar final\n\tprog.end()\n\nOutput:\n\n.. code-block::\n\n\tInitial State: \n\t:-) Progress: 0% --------------------------------------------------  OK!\n\n\tWhen progress is 50: \n\t:-) Progress: 50% #########################-------------------------  OK!\n\n\tFinal State: \n\t:-) Progress: 100% ##################################################  OK!\n\nPretty Progress Bar\n===================\n\nYou can also add more options to make it look good.\n\nAdding options ``complete_symbol=\"\u2588\", not_complete_symbol=\"-\"`` will change the original output to:\n\n.. code-block::\n\n\tInitial State: \n\t:-) Progress: 0% --------------------------------------------------  OK!\n\n\tWhen progress is 50: \n\t:-) Progress: 50% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------------------  OK!\n\n\tFinal State: \n\t:-) Progress: 100% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  OK!\n\nAuto calculate the percentage\n=============================\n\nPyProg can also auto calculate the current percentage. You just need to tell PyProg the total number of things you need to process.\n\nChange the line ``prog = pyprog.ProgressBar(\"\", \"\")`` to ``prog = pyprog.ProgressBar(\"\", \"\", <Total Number of things>)``, and PyProg will calculate the percentage for you based on the status that you give it.\n\nTo use it in our simple progress bar code, if we have 37 tasks to do, we can change this:\n\n.. code-block:: python\n\n\t# Create a PyProg ProgressBar Object\n\tprog = pyprog.ProgressBar(\":-) \", \" OK!\")\n\nto this:\n\n.. code-block:: python\n\n\t# Create a PyProg ProgressBar Object\n\tprog = pyprog.ProgressBar(\":-) \", \" OK!\", 37)\n\nAnd also change the fake for loop from ``for i in range(0, 100):`` to ``for i in range(0, 37):``, and it will auto calculate the percentage and show it to the user.\n\n===================================================\nHow to use the PyProg Progress Indicator (Fraction)\n===================================================\n\nTo create a basic progress indicator (fraction), follow these steps:\n\n1. Import PyProg: ``import pyprog``\n2. Create a ``ProgressIndicatorFraction`` object: ``prog = pyprog.ProgressIndicatorFraction(\"\", \"\", <Total number of things>)`` (Replace \"<Total number of things>\" with the total number of tasks or things you need to process)\n3. Show the indicator: ``prog.update()``\n4. To update the status, use ``prog.set_stat(<status>)`` to set the status and then use ``prog.update()`` to actually show the change\n5. When finished, use ``prog.end()`` to make the Progress Indicator (Fraction) last\n\nExample Code with Fake For loop (We are using 56 as the total in this example):\n\n.. code-block:: python\n\n\timport pyprog\n\tfrom time import sleep\n\n\t# Create a PyProg ProgressIndicatorFraction Object\n\tprog = pyprog.ProgressIndicatorFraction(\":-) \", \" OK!\", 56)\n\n\t# Show the initial status\n\tprog.update()\n\n\t# Fake for loop\n\tfor i in range(0, 56):\n\n\t\t# Sleep for a while (This is just to slow down the for loop so that it won't end in an instant)\n\t\tsleep(0.1)\n\n\t\t# Update status\n\t\tprog.set_stat(i + 1)\n\n\t\t# Show (Update) the current status\n\t\tprog.update()\n\n\t# Make the Progress Indicator (Fraction) final\n\tprog.end()\n\nOutput:\n\n.. code-block::\n\n\tInitial State: \n\t:-) 0/56 OK!\n\n\tWhen half done: \n\t:-) 28/56 OK!\n\n\tFinal State: \n\t:-) 56/56 OK!\n\n=============\nDocumentation\n=============\n\nThe documentation is at the Github page for this project.\n\nGithub page: `<https://github.com/Bill13579/pyprog/>`_\n\n=======\nContact\n=======\n\nIf you want to support me, please contact me at kudoshiko@gmail.com.\n\nMy website is at `<http://www.WhatsYourIdea.com/>`_\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Bill13579/pyprog", "keywords": "progress bar indicator pyprog", "license": "GNU AGPLv3", "maintainer": "", "maintainer_email": "", "name": "pyprog", "package_url": "https://pypi.org/project/pyprog/", "platform": "", "project_url": "https://pypi.org/project/pyprog/", "project_urls": {"Homepage": "https://github.com/Bill13579/pyprog"}, "release_url": "https://pypi.org/project/pyprog/1.1.0.post0/", "requires_dist": null, "requires_python": "", "summary": "A library for creating super customizable progress indicators.", "version": "1.1.0.post0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyProg is an Open-Source library for creating progress indicators (e.g. progress bars). It helps you create customizable progress indicators. This library is for Python. It does not have any dependencies.</p>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<p>PyProg is compatible with both Python 3 and Python 2, and will also work on Qt Console.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Latest build: <tt>pip install pyprog</tt></p>\n<p>Latest development build: <tt>pip install <span class=\"pre\">git+https://github.com/Bill13579/pyprog.git@develop</span></tt></p>\n<p>After you have installed PyProg, you can test if it has been successfully installed by running <tt>import pyprog</tt> in python. If PyProg was installed successfully, it should show no errors.</p>\n</div>\n<div id=\"how-to-use-the-pyprog-progress-bar\">\n<h2>How to use the PyProg Progress Bar</h2>\n<p>To create a progress bar, follow these steps:</p>\n<ol>\n<li>Import PyProg: <tt>import pyprog</tt></li>\n<li>Create a <tt>ProgressBar</tt> object: <tt>prog = <span class=\"pre\">pyprog.ProgressBar(\"\",</span> \"\")</tt></li>\n<li>Show the bar: <tt>prog.update()</tt></li>\n<li>To update the status, use <tt><span class=\"pre\">prog.set_stat(&lt;status&gt;)</span></tt> to set the status and then use <tt>prog.update()</tt> to actually show the change</li>\n<li>When finished, use <tt>prog.end()</tt> to make the Progress Bar last</li>\n</ol>\n<p>Example Code with Fake For loop:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyprog</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"c1\"># Create a PyProg ProgressBar Object</span>\n<span class=\"n\">prog</span> <span class=\"o\">=</span> <span class=\"n\">pyprog</span><span class=\"o\">.</span><span class=\"n\">ProgressBar</span><span class=\"p\">(</span><span class=\"s2\">\":-) \"</span><span class=\"p\">,</span> <span class=\"s2\">\" OK!\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Show the initial status</span>\n<span class=\"n\">prog</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Fake for loop</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># Sleep for a while (This is just to slow down the for loop so that it won't end in an instant)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Update status</span>\n        <span class=\"n\">prog</span><span class=\"o\">.</span><span class=\"n\">set_stat</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Show (Update) the current status</span>\n        <span class=\"n\">prog</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Make the Progress Bar final</span>\n<span class=\"n\">prog</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n</pre>\n<p>Output:</p>\n<pre>Initial State:\n:-) Progress: 0% --------------------------------------------------  OK!\n\nWhen progress is 50:\n:-) Progress: 50% #########################-------------------------  OK!\n\nFinal State:\n:-) Progress: 100% ##################################################  OK!\n</pre>\n<div id=\"pretty-progress-bar\">\n<h3>Pretty Progress Bar</h3>\n<p>You can also add more options to make it look good.</p>\n<p>Adding options <tt><span class=\"pre\">complete_symbol=\"\u2588\",</span> <span class=\"pre\">not_complete_symbol=\"-\"</span></tt> will change the original output to:</p>\n<pre>Initial State:\n:-) Progress: 0% --------------------------------------------------  OK!\n\nWhen progress is 50:\n:-) Progress: 50% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------------------  OK!\n\nFinal State:\n:-) Progress: 100% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  OK!\n</pre>\n</div>\n<div id=\"auto-calculate-the-percentage\">\n<h3>Auto calculate the percentage</h3>\n<p>PyProg can also auto calculate the current percentage. You just need to tell PyProg the total number of things you need to process.</p>\n<p>Change the line <tt>prog = <span class=\"pre\">pyprog.ProgressBar(\"\",</span> \"\")</tt> to <tt>prog = <span class=\"pre\">pyprog.ProgressBar(\"\",</span> \"\", &lt;Total Number of things&gt;)</tt>, and PyProg will calculate the percentage for you based on the status that you give it.</p>\n<p>To use it in our simple progress bar code, if we have 37 tasks to do, we can change this:</p>\n<pre><span class=\"c1\"># Create a PyProg ProgressBar Object</span>\n<span class=\"n\">prog</span> <span class=\"o\">=</span> <span class=\"n\">pyprog</span><span class=\"o\">.</span><span class=\"n\">ProgressBar</span><span class=\"p\">(</span><span class=\"s2\">\":-) \"</span><span class=\"p\">,</span> <span class=\"s2\">\" OK!\"</span><span class=\"p\">)</span>\n</pre>\n<p>to this:</p>\n<pre><span class=\"c1\"># Create a PyProg ProgressBar Object</span>\n<span class=\"n\">prog</span> <span class=\"o\">=</span> <span class=\"n\">pyprog</span><span class=\"o\">.</span><span class=\"n\">ProgressBar</span><span class=\"p\">(</span><span class=\"s2\">\":-) \"</span><span class=\"p\">,</span> <span class=\"s2\">\" OK!\"</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">)</span>\n</pre>\n<p>And also change the fake for loop from <tt>for i in range(0, 100):</tt> to <tt>for i in range(0, 37):</tt>, and it will auto calculate the percentage and show it to the user.</p>\n</div>\n</div>\n<div id=\"how-to-use-the-pyprog-progress-indicator-fraction\">\n<h2>How to use the PyProg Progress Indicator (Fraction)</h2>\n<p>To create a basic progress indicator (fraction), follow these steps:</p>\n<ol>\n<li>Import PyProg: <tt>import pyprog</tt></li>\n<li>Create a <tt>ProgressIndicatorFraction</tt> object: <tt>prog = <span class=\"pre\">pyprog.ProgressIndicatorFraction(\"\",</span> \"\", &lt;Total number of things&gt;)</tt> (Replace \u201c&lt;Total number of things&gt;\u201d with the total number of tasks or things you need to process)</li>\n<li>Show the indicator: <tt>prog.update()</tt></li>\n<li>To update the status, use <tt><span class=\"pre\">prog.set_stat(&lt;status&gt;)</span></tt> to set the status and then use <tt>prog.update()</tt> to actually show the change</li>\n<li>When finished, use <tt>prog.end()</tt> to make the Progress Indicator (Fraction) last</li>\n</ol>\n<p>Example Code with Fake For loop (We are using 56 as the total in this example):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyprog</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"c1\"># Create a PyProg ProgressIndicatorFraction Object</span>\n<span class=\"n\">prog</span> <span class=\"o\">=</span> <span class=\"n\">pyprog</span><span class=\"o\">.</span><span class=\"n\">ProgressIndicatorFraction</span><span class=\"p\">(</span><span class=\"s2\">\":-) \"</span><span class=\"p\">,</span> <span class=\"s2\">\" OK!\"</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Show the initial status</span>\n<span class=\"n\">prog</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Fake for loop</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># Sleep for a while (This is just to slow down the for loop so that it won't end in an instant)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Update status</span>\n        <span class=\"n\">prog</span><span class=\"o\">.</span><span class=\"n\">set_stat</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Show (Update) the current status</span>\n        <span class=\"n\">prog</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Make the Progress Indicator (Fraction) final</span>\n<span class=\"n\">prog</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n</pre>\n<p>Output:</p>\n<pre>Initial State:\n:-) 0/56 OK!\n\nWhen half done:\n:-) 28/56 OK!\n\nFinal State:\n:-) 56/56 OK!\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The documentation is at the Github page for this project.</p>\n<p>Github page: <a href=\"https://github.com/Bill13579/pyprog/\" rel=\"nofollow\">https://github.com/Bill13579/pyprog/</a></p>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>If you want to support me, please contact me at <a href=\"mailto:kudoshiko%40gmail.com\">kudoshiko<span>@</span>gmail<span>.</span>com</a>.</p>\n<p>My website is at <a href=\"http://www.WhatsYourIdea.com/\" rel=\"nofollow\">http://www.WhatsYourIdea.com/</a></p>\n</div>\n\n          </div>"}, "last_serial": 3652816, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "01630a9b5159f7c07534dfea8be83d82", "sha256": "036fd406c9aeffc9f705254bf2f6827f9ddefb041b9493e56e112295e4435963"}, "downloads": -1, "filename": "pyprog-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "01630a9b5159f7c07534dfea8be83d82", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7112, "upload_time": "2018-02-03T12:35:42", "upload_time_iso_8601": "2018-02-03T12:35:42.527725Z", "url": "https://files.pythonhosted.org/packages/a1/ab/d29fab069d18a21dbc1612ec5b4af2cf8c49f6bd9fd89a07066c05a2b916/pyprog-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9a61a4e0b40b5a7f28d2eeddce8ed91", "sha256": "6df7c1355d29a92f75d97ccba0571a7bcd091158628f6bc147842a5c565355f6"}, "downloads": -1, "filename": "pyprog-1.0.tar.gz", "has_sig": false, "md5_digest": "e9a61a4e0b40b5a7f28d2eeddce8ed91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4402, "upload_time": "2018-02-03T12:35:43", "upload_time_iso_8601": "2018-02-03T12:35:43.986821Z", "url": "https://files.pythonhosted.org/packages/13/91/f480afd7181befc8709958a2f99dabc515c042d8c09a11f08117d35f3a65/pyprog-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8f115f49cb8f3d1c08ef0ed806c9cb6f", "sha256": "9e0b1b6e7146cd406b1912f621593fc266b10d664d7505227ed43c11f2e4e393"}, "downloads": -1, "filename": "pyprog-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8f115f49cb8f3d1c08ef0ed806c9cb6f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7109, "upload_time": "2018-02-03T23:33:43", "upload_time_iso_8601": "2018-02-03T23:33:43.749498Z", "url": "https://files.pythonhosted.org/packages/99/31/a0c9d743802b6bb25dd7bbaf58e988b9d87f3e17cdcb7c5666d06465717e/pyprog-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "725efd7eaa65dc1fc8c647afdb156831", "sha256": "8853a34df57fd6671a4ab09767dff85c7b6024477dc59797cc59c05327a8e316"}, "downloads": -1, "filename": "pyprog-1.0.1.tar.gz", "has_sig": false, "md5_digest": "725efd7eaa65dc1fc8c647afdb156831", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4332, "upload_time": "2018-02-03T23:33:45", "upload_time_iso_8601": "2018-02-03T23:33:45.332842Z", "url": "https://files.pythonhosted.org/packages/08/5d/baa51d877e1cc665c7641d6f66a7928b521dbbded4ab2de9416f7b126806/pyprog-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "4efc8b3285f2adfb06c387a024f60da8", "sha256": "99935eb80a0b1b1e73b554aa8aeca582535cf0c470b43904f077f7e153d26618"}, "downloads": -1, "filename": "pyprog-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4efc8b3285f2adfb06c387a024f60da8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7131, "upload_time": "2018-02-04T02:52:28", "upload_time_iso_8601": "2018-02-04T02:52:28.516535Z", "url": "https://files.pythonhosted.org/packages/09/bb/ff8a104b3fb19d11200434b7caca9389b0b61c987e823bc42bcb0d5c827e/pyprog-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e31b9d2800bf8314498535f01725f8b3", "sha256": "4be66bb9a1b7f81c1bd959dd1c467259b16e917a1e89727065d08b15f8836df0"}, "downloads": -1, "filename": "pyprog-1.0.2.tar.gz", "has_sig": false, "md5_digest": "e31b9d2800bf8314498535f01725f8b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4343, "upload_time": "2018-02-04T02:52:30", "upload_time_iso_8601": "2018-02-04T02:52:30.402108Z", "url": "https://files.pythonhosted.org/packages/cd/a3/0faa2440873f30630d3183e98a0046921b7426dbf3c3d3309726934d1f6a/pyprog-1.0.2.tar.gz", "yanked": false}], "1.1.0.post0": [{"comment_text": "", "digests": {"md5": "2fc565271ddcc54d8f92a65116669c2d", "sha256": "7bd6ffb4d7a716719147bc5814657acca66fff5f2d4e6b2cdeae871010e5d40b"}, "downloads": -1, "filename": "pyprog-1.1.0.post0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2fc565271ddcc54d8f92a65116669c2d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7326, "upload_time": "2018-03-09T00:04:25", "upload_time_iso_8601": "2018-03-09T00:04:25.331355Z", "url": "https://files.pythonhosted.org/packages/ae/60/ec4fc4c62e25aed5b163364b294b0cafe88a0932092bfc2086444afadfb0/pyprog-1.1.0.post0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1219b7a950b3617357d23da4be6535ed", "sha256": "f5e1fc33052b527a5a1778694c16d797400d9b561b3df2381e025542800dc525"}, "downloads": -1, "filename": "pyprog-1.1.0.post0.tar.gz", "has_sig": false, "md5_digest": "1219b7a950b3617357d23da4be6535ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4529, "upload_time": "2018-03-09T00:04:27", "upload_time_iso_8601": "2018-03-09T00:04:27.644441Z", "url": "https://files.pythonhosted.org/packages/37/94/fe22a91979933f3b94a6ff1472fe145d5c432d724c80ac13906b3c84c451/pyprog-1.1.0.post0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2fc565271ddcc54d8f92a65116669c2d", "sha256": "7bd6ffb4d7a716719147bc5814657acca66fff5f2d4e6b2cdeae871010e5d40b"}, "downloads": -1, "filename": "pyprog-1.1.0.post0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2fc565271ddcc54d8f92a65116669c2d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7326, "upload_time": "2018-03-09T00:04:25", "upload_time_iso_8601": "2018-03-09T00:04:25.331355Z", "url": "https://files.pythonhosted.org/packages/ae/60/ec4fc4c62e25aed5b163364b294b0cafe88a0932092bfc2086444afadfb0/pyprog-1.1.0.post0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1219b7a950b3617357d23da4be6535ed", "sha256": "f5e1fc33052b527a5a1778694c16d797400d9b561b3df2381e025542800dc525"}, "downloads": -1, "filename": "pyprog-1.1.0.post0.tar.gz", "has_sig": false, "md5_digest": "1219b7a950b3617357d23da4be6535ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4529, "upload_time": "2018-03-09T00:04:27", "upload_time_iso_8601": "2018-03-09T00:04:27.644441Z", "url": "https://files.pythonhosted.org/packages/37/94/fe22a91979933f3b94a6ff1472fe145d5c432d724c80ac13906b3c84c451/pyprog-1.1.0.post0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:05 2020"}