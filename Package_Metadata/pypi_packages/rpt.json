{"info": {"author": "Thomas Perl", "author_email": "m@thp.io", "bugtrack_url": null, "classifiers": [], "description": "Given a list of file names, this will put the list of files into a text\nfile, open that with `$EDITOR` (or `$VISUAL` if `$EDITOR` is not set). After\nthe editor returns, any changed names in the text file will cause a\ncommand (default: `mv`) to be executed with the original and new filename.\n\nThis is very useful in carrying out rename operations that are easy to\nspecify with your text editor, but hard to specify with wildcards.\n\nIf you ever wrote something like this (and -- as seen here -- still got\nshell quoting wrong, because it's tedious), then this tool is for you:\n\n    for f in *.mp3; do; mv \"$f\" \"$(basename $f .mp3)_foo.mp3\"; done\n\nAlso, you can use different commands instead of `mv`, and add options\nfor the input and output parameters (`oggenc <infile> -o <outfile>`):\n\n    rpt -c \"oggenc {old} -o {new}\" *.wav\n\nIf you have a command without `{old}` and `{new}`, `{old} {new}` will be\nappended to the command line (`cp <infile> <outfile>`):\n\n    rpt -c cp *.wav\n\nYou can put `{old}` and `{new}` wherever you want, in different order\nand also multiple times (if needed):\n\n    rpt -c \"mpg123 -w {new} {old}\" *.mp3\n\nTo go all-out silly, you can set the `$EDITOR` variable to something\nthat will automatically change each input line, for example to make\na backup file of every `.py` file in the current folder:\n\n    env EDITOR=\"sed -i -e '/^[^#]/ s/$/.bak/'\" rpt -c cp *.py\n\nThis will use `sed` as the editor and in-place edit the temporary\ntext file created by `rpt` and append `.bak` to all non-comment lines\n(the `/^[^#]/` part) in the input file, and with `cp` as the command\nwill call `cp <filename> <filename>.bak` for every input file.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "http://thp.io/2016/rpt/rpt-2.0.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://thp.io/2016/rpt/", "keywords": "", "license": "Simplified BSD License", "maintainer": "", "maintainer_email": "", "name": "rpt", "package_url": "https://pypi.org/project/rpt/", "platform": "", "project_url": "https://pypi.org/project/rpt/", "project_urls": {"Download": "http://thp.io/2016/rpt/rpt-2.0.0.tar.gz", "Homepage": "http://thp.io/2016/rpt/"}, "release_url": "https://pypi.org/project/rpt/2.0.0/", "requires_dist": null, "requires_python": "", "summary": "# Repetitive command line creation with your editor of choice", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Given a list of file names, this will put the list of files into a text\nfile, open that with <code>$EDITOR</code> (or <code>$VISUAL</code> if <code>$EDITOR</code> is not set). After\nthe editor returns, any changed names in the text file will cause a\ncommand (default: <code>mv</code>) to be executed with the original and new filename.</p>\n<p>This is very useful in carrying out rename operations that are easy to\nspecify with your text editor, but hard to specify with wildcards.</p>\n<p>If you ever wrote something like this (and -- as seen here -- still got\nshell quoting wrong, because it's tedious), then this tool is for you:</p>\n<pre><code>for f in *.mp3; do; mv \"$f\" \"$(basename $f .mp3)_foo.mp3\"; done\n</code></pre>\n<p>Also, you can use different commands instead of <code>mv</code>, and add options\nfor the input and output parameters (<code>oggenc &lt;infile&gt; -o &lt;outfile&gt;</code>):</p>\n<pre><code>rpt -c \"oggenc {old} -o {new}\" *.wav\n</code></pre>\n<p>If you have a command without <code>{old}</code> and <code>{new}</code>, <code>{old} {new}</code> will be\nappended to the command line (<code>cp &lt;infile&gt; &lt;outfile&gt;</code>):</p>\n<pre><code>rpt -c cp *.wav\n</code></pre>\n<p>You can put <code>{old}</code> and <code>{new}</code> wherever you want, in different order\nand also multiple times (if needed):</p>\n<pre><code>rpt -c \"mpg123 -w {new} {old}\" *.mp3\n</code></pre>\n<p>To go all-out silly, you can set the <code>$EDITOR</code> variable to something\nthat will automatically change each input line, for example to make\na backup file of every <code>.py</code> file in the current folder:</p>\n<pre><code>env EDITOR=\"sed -i -e '/^[^#]/ s/$/.bak/'\" rpt -c cp *.py\n</code></pre>\n<p>This will use <code>sed</code> as the editor and in-place edit the temporary\ntext file created by <code>rpt</code> and append <code>.bak</code> to all non-comment lines\n(the <code>/^[^#]/</code> part) in the input file, and with <code>cp</code> as the command\nwill call <code>cp &lt;filename&gt; &lt;filename&gt;.bak</code> for every input file.</p>\n\n          </div>"}, "last_serial": 5995740, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0e9f9511ae4d3daaf2cd6e5f9cc4b302", "sha256": "331dc30a525c693d26d3fafa0956723ba61b8c8da53877e7d554b24a29a7faeb"}, "downloads": -1, "filename": "rpt-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0e9f9511ae4d3daaf2cd6e5f9cc4b302", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4047, "upload_time": "2016-01-07T13:56:56", "upload_time_iso_8601": "2016-01-07T13:56:56.627231Z", "url": "https://files.pythonhosted.org/packages/2b/19/88b1ccbb6a4430f01e529aa89a4d2307b2ff4ed833c492ed92234c8f56c5/rpt-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ca7cdbd3b03015d7208855852599eb9c", "sha256": "b64b9c7433db3bdb02cbfa270631c3cafe8de7556d0553ff08e0e61d1d452376"}, "downloads": -1, "filename": "rpt-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ca7cdbd3b03015d7208855852599eb9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4044, "upload_time": "2016-01-16T21:43:47", "upload_time_iso_8601": "2016-01-16T21:43:47.589575Z", "url": "https://files.pythonhosted.org/packages/cd/17/5d46b773c2b9c4183ad83bd248f3bcab490ceb3f34b80d20d4d96694a856/rpt-1.0.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "d24171b9e5eaa2f98803ea9b96983784", "sha256": "6a665e23351f5f8888a41434464f411e1fb8e66de35509e2db00df6096de544f"}, "downloads": -1, "filename": "rpt-2.0.0.tar.gz", "has_sig": false, "md5_digest": "d24171b9e5eaa2f98803ea9b96983784", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4686, "upload_time": "2019-10-18T13:45:34", "upload_time_iso_8601": "2019-10-18T13:45:34.534778Z", "url": "https://files.pythonhosted.org/packages/dc/99/830ee1d3c34803493068428264c670faa09c0dabfbfcdb5a34299f5da70f/rpt-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d24171b9e5eaa2f98803ea9b96983784", "sha256": "6a665e23351f5f8888a41434464f411e1fb8e66de35509e2db00df6096de544f"}, "downloads": -1, "filename": "rpt-2.0.0.tar.gz", "has_sig": false, "md5_digest": "d24171b9e5eaa2f98803ea9b96983784", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4686, "upload_time": "2019-10-18T13:45:34", "upload_time_iso_8601": "2019-10-18T13:45:34.534778Z", "url": "https://files.pythonhosted.org/packages/dc/99/830ee1d3c34803493068428264c670faa09c0dabfbfcdb5a34299f5da70f/rpt-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:50 2020"}