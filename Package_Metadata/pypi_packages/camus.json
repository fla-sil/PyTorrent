{"info": {"author": "Rafael Izidoro", "author_email": "izidoro.rafa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Utilities"], "description": "# Camus\n**Camus is a raw SQL library enabling an ease integration with the new [Aurora Serverless Data API](\"https://aws.amazon.com/blogs/aws/new-data-api-for-amazon-aurora-serverless/\"). It is a fork of the powerful [Records](\"https://github.com/kennethreitz/records\") library.**\n\n![Camus Aurora Execution](https://raw.githubusercontent.com/rizidoro/camus/master/camus.png)\n## Instalation\n\nThe recommended installation method is `pipenv`:\n\n```shell\n$ pipenv install camus\n```\n\n## Basic Usage\n\nFirst you need to have an Aurora cluster ARN and a Secret ARN. If don't have one yet, just follow the [Data API Getting Started Guide](\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html\").\n\nWith that in hands, let's drop some query to our database:\n\n```python\nimport camus\n\ndb = camus.Database(\n    resource_arn=\"arn:aws:rds:us-east-1:123456789012:cluster:your-cluster-name\",\n    secret_arn=\"arn:aws:secretsmanager:us-east-1:123456789012:secret:your-secret-name-ByH87J\",\n    dbname=\"mydb\",\n)\n\nrows = db.query(\"SELECT * FROM users\")\n```\n\nYou can grab one row at time (like in Records library)\n\n```python\n>>> rows[0]\n<camus.Record at 0x109bfbd30>\n```\n\nOr iterate over them:\n\n```python\n for r in rows:\n     print(r.name, r.email)\n```\n\nLike mentioned before, Camus is a fork of the Records library, so almost all access pattern are equal:\n\n```python\n  row.email\n  row['email']\n  row[3]\n```\n\nOther options include `rows.as_dict()` and `rows.as_dict(ordered=True)`\n\n\n## Transactions\n\nData API transactions are supported by Camus:\n\n```python\nwith db.transaction() as txid:\n    db.query(\"INSERT INTO users (name, email) VALUES (:name, :email)\", name=\"Rafael\", email=\"rafael@email.com\")\n    db.query(\"UPDATE posts SET title = :title WHERE id = :id\", title=\"New Title\", id=999)\n```\n\nIf any exception is raised when executing any of the queries, a rollback is performed automatically.\n\n## That's all folks\nThanks for the awesome @kennethreitz for providing his knowledge on the excelent Records library and\nall the talks he has given over the years!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rizidoro/camus", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "camus", "package_url": "https://pypi.org/project/camus/", "platform": "", "project_url": "https://pypi.org/project/camus/", "project_urls": {"Homepage": "https://github.com/rizidoro/camus"}, "release_url": "https://pypi.org/project/camus/0.3.1/", "requires_dist": ["boto3"], "requires_python": "", "summary": "A Records like database API that works with Aurora Serverless Data API", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Camus</h1>\n<p><strong>Camus is a raw SQL library enabling an ease integration with the new <a href=\"%22https://aws.amazon.com/blogs/aws/new-data-api-for-amazon-aurora-serverless/%22\" rel=\"nofollow\">Aurora Serverless Data API</a>. It is a fork of the powerful <a href=\"%22https://github.com/kennethreitz/records%22\" rel=\"nofollow\">Records</a> library.</strong></p>\n<p><img alt=\"Camus Aurora Execution\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dee5828b063bb7c124ab4775ad90acb267a88423/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f72697a69646f726f2f63616d75732f6d61737465722f63616d75732e706e67\"></p>\n<h2>Instalation</h2>\n<p>The recommended installation method is <code>pipenv</code>:</p>\n<pre>$ pipenv install camus\n</pre>\n<h2>Basic Usage</h2>\n<p>First you need to have an Aurora cluster ARN and a Secret ARN. If don't have one yet, just follow the <a href=\"%22https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html%22\" rel=\"nofollow\">Data API Getting Started Guide</a>.</p>\n<p>With that in hands, let's drop some query to our database:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">camus</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">camus</span><span class=\"o\">.</span><span class=\"n\">Database</span><span class=\"p\">(</span>\n    <span class=\"n\">resource_arn</span><span class=\"o\">=</span><span class=\"s2\">\"arn:aws:rds:us-east-1:123456789012:cluster:your-cluster-name\"</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_arn</span><span class=\"o\">=</span><span class=\"s2\">\"arn:aws:secretsmanager:us-east-1:123456789012:secret:your-secret-name-ByH87J\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"s2\">\"mydb\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT * FROM users\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can grab one row at time (like in Records library)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rows</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">camus</span><span class=\"o\">.</span><span class=\"n\">Record</span> <span class=\"n\">at</span> <span class=\"mh\">0x109bfbd30</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Or iterate over them:</p>\n<pre> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span><span class=\"p\">:</span>\n     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">)</span>\n</pre>\n<p>Like mentioned before, Camus is a fork of the Records library, so almost all access pattern are equal:</p>\n<pre>  <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">email</span>\n  <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'email'</span><span class=\"p\">]</span>\n  <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<p>Other options include <code>rows.as_dict()</code> and <code>rows.as_dict(ordered=True)</code></p>\n<h2>Transactions</h2>\n<p>Data API transactions are supported by Camus:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">txid</span><span class=\"p\">:</span>\n    <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"INSERT INTO users (name, email) VALUES (:name, :email)\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Rafael\"</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s2\">\"rafael@email.com\"</span><span class=\"p\">)</span>\n    <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"UPDATE posts SET title = :title WHERE id = :id\"</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"New Title\"</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">999</span><span class=\"p\">)</span>\n</pre>\n<p>If any exception is raised when executing any of the queries, a rollback is performed automatically.</p>\n<h2>That's all folks</h2>\n<p>Thanks for the awesome @kennethreitz for providing his knowledge on the excelent Records library and\nall the talks he has given over the years!</p>\n\n          </div>"}, "last_serial": 6183127, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3034d6d024aa01445bbc3b30b198c410", "sha256": "326e98830d62284505c62493b1f82faa132c72b2f9ad909fdd34a9d39f48730c"}, "downloads": -1, "filename": "camus-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3034d6d024aa01445bbc3b30b198c410", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2056, "upload_time": "2019-07-23T21:40:37", "upload_time_iso_8601": "2019-07-23T21:40:37.127144Z", "url": "https://files.pythonhosted.org/packages/fb/e9/32f978a2d2ee86d3e42099fa714ed9a1ff86a16ad464d01fbf6a96a028e5/camus-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "482eca7e36805675ce61fb163dcf6d24", "sha256": "10eca038f74614ca7651ceaf4c7c559f45aa04a13ae88be11293482b1fb7d630"}, "downloads": -1, "filename": "camus-0.0.1.tar.gz", "has_sig": false, "md5_digest": "482eca7e36805675ce61fb163dcf6d24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1140, "upload_time": "2019-07-23T21:40:39", "upload_time_iso_8601": "2019-07-23T21:40:39.383490Z", "url": "https://files.pythonhosted.org/packages/1e/c1/df34734509b07dfed5fa1bd2880e866d2c8122c47b8386bf3a21a55f85d3/camus-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a9c3feea7e9ba661d21353bc63dd389c", "sha256": "07d2a4973942757a3e24efa49aefda66f656238ef277289fb8986eecca24a2db"}, "downloads": -1, "filename": "camus-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a9c3feea7e9ba661d21353bc63dd389c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4896, "upload_time": "2019-08-05T18:13:14", "upload_time_iso_8601": "2019-08-05T18:13:14.604415Z", "url": "https://files.pythonhosted.org/packages/34/ea/3c09292271319aedc2d69c90ac4f54fe30c33bec640d809fe5aac094adca/camus-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e148f339a07eb8188c02ab8a202bceb5", "sha256": "39e22403d21d411416e861be204cc669a0c63218f19fd73a559dd61f75a3c9e5"}, "downloads": -1, "filename": "camus-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e148f339a07eb8188c02ab8a202bceb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3525, "upload_time": "2019-08-05T18:13:17", "upload_time_iso_8601": "2019-08-05T18:13:17.688057Z", "url": "https://files.pythonhosted.org/packages/8d/2e/66f5b67b7ead4355fbd0921d0e137fd4740466ac03b2b05c47f7f18924cb/camus-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "c258761547bd557b0d10e433d41aff45", "sha256": "f3555edd9048e63b139490e73459f999cb279c5ba556df925b3471eebde2485a"}, "downloads": -1, "filename": "camus-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c258761547bd557b0d10e433d41aff45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4896, "upload_time": "2019-08-05T18:13:16", "upload_time_iso_8601": "2019-08-05T18:13:16.158266Z", "url": "https://files.pythonhosted.org/packages/1a/9c/0629463f50a48487d9e669a42415e2bfe90ccee1d1f158fcb193b7b33d17/camus-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1c16bfcdbc93618d41104668798a3eb", "sha256": "7670085499a820fced9c63e1264d837383bc1494587d5e06dcb3c10001cc2fe1"}, "downloads": -1, "filename": "camus-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b1c16bfcdbc93618d41104668798a3eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3519, "upload_time": "2019-08-05T18:13:19", "upload_time_iso_8601": "2019-08-05T18:13:19.117027Z", "url": "https://files.pythonhosted.org/packages/35/cd/2c3dc03ae560a32c44078028524a8db2e3ac782c8d85dde3662a9ee894aa/camus-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "428c7144bf4094d94b9f0219af474333", "sha256": "4497842db129f632500e455413f79a44d75d580b5b2ad356839f88c682a00330"}, "downloads": -1, "filename": "camus-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "428c7144bf4094d94b9f0219af474333", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5521, "upload_time": "2019-08-27T19:10:49", "upload_time_iso_8601": "2019-08-27T19:10:49.912817Z", "url": "https://files.pythonhosted.org/packages/32/6d/ed338f9d6eb7aea20052c3d016f56d7f6df4586f04804f4f1bdc5d35a5a5/camus-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "743ec20652125a7d3df92c42f486a045", "sha256": "6d32db2d94e1464e1b5d37495ec4ac78a9842fd566b14ea91dd7e83dbff72490"}, "downloads": -1, "filename": "camus-0.2.0.tar.gz", "has_sig": false, "md5_digest": "743ec20652125a7d3df92c42f486a045", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4644, "upload_time": "2019-08-27T19:10:51", "upload_time_iso_8601": "2019-08-27T19:10:51.506876Z", "url": "https://files.pythonhosted.org/packages/bc/63/c0d5891141f0ee5cca38dc711f814d9b6cd2c8196b7aa14d60d23b3413d6/camus-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f9c8b9cff9935682a80e45e360ba36c6", "sha256": "fb71ec5b16392a722b8af8176f89c5e397e809148ff589a5e664d798a4d2f5f4"}, "downloads": -1, "filename": "camus-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f9c8b9cff9935682a80e45e360ba36c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5679, "upload_time": "2019-09-23T14:38:36", "upload_time_iso_8601": "2019-09-23T14:38:36.698866Z", "url": "https://files.pythonhosted.org/packages/b8/21/3174df5fc8696511ff1159379659902add43f9d1dc3a47777f111e52a6f4/camus-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9aa1106c77ff75e42dc0f2395a14dd99", "sha256": "63e099583ce051c901b94e38dc0913fd3718cb6b5d2d0865b25a0ae49282dca3"}, "downloads": -1, "filename": "camus-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9aa1106c77ff75e42dc0f2395a14dd99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4806, "upload_time": "2019-09-23T14:38:39", "upload_time_iso_8601": "2019-09-23T14:38:39.010780Z", "url": "https://files.pythonhosted.org/packages/e4/7d/e5dbe23fab39eacb2021313861300b973ca1e8d2c9eeb528a8b250ef3310/camus-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "10fb7cdc91f2877666a506c3ac483ff1", "sha256": "d16c773f3cc182c26df029af401b3334d6634cba08b90a0f3c0dbc9f1fcf0f4f"}, "downloads": -1, "filename": "camus-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "10fb7cdc91f2877666a506c3ac483ff1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5688, "upload_time": "2019-11-22T19:58:34", "upload_time_iso_8601": "2019-11-22T19:58:34.996450Z", "url": "https://files.pythonhosted.org/packages/e5/48/aadcdb36d2c29cb5df258f1c27a2bc96b181a04fa1c04403102739f1613e/camus-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "535e3be26123eac7e49cd1e4d27abc66", "sha256": "de0e4236c065ad69975147abce2d1cb66ea8dfcf262d416aa8a22981244c5794"}, "downloads": -1, "filename": "camus-0.3.1.tar.gz", "has_sig": false, "md5_digest": "535e3be26123eac7e49cd1e4d27abc66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4820, "upload_time": "2019-11-22T19:58:37", "upload_time_iso_8601": "2019-11-22T19:58:37.607288Z", "url": "https://files.pythonhosted.org/packages/95/da/9d1268aeab4790f82cd6f07718b810d8161d2659f7ab19ed730c4b72ffc7/camus-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10fb7cdc91f2877666a506c3ac483ff1", "sha256": "d16c773f3cc182c26df029af401b3334d6634cba08b90a0f3c0dbc9f1fcf0f4f"}, "downloads": -1, "filename": "camus-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "10fb7cdc91f2877666a506c3ac483ff1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5688, "upload_time": "2019-11-22T19:58:34", "upload_time_iso_8601": "2019-11-22T19:58:34.996450Z", "url": "https://files.pythonhosted.org/packages/e5/48/aadcdb36d2c29cb5df258f1c27a2bc96b181a04fa1c04403102739f1613e/camus-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "535e3be26123eac7e49cd1e4d27abc66", "sha256": "de0e4236c065ad69975147abce2d1cb66ea8dfcf262d416aa8a22981244c5794"}, "downloads": -1, "filename": "camus-0.3.1.tar.gz", "has_sig": false, "md5_digest": "535e3be26123eac7e49cd1e4d27abc66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4820, "upload_time": "2019-11-22T19:58:37", "upload_time_iso_8601": "2019-11-22T19:58:37.607288Z", "url": "https://files.pythonhosted.org/packages/95/da/9d1268aeab4790f82cd6f07718b810d8161d2659f7ab19ed730c4b72ffc7/camus-0.3.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:33 2020"}