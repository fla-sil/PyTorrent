{"info": {"author": "Caian Benedicto", "author_email": "caian@ggaunicamp.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# CloudPITS / Instance Selection\n\nThis is the initial idea behind Cloud-PITS, which involves selecting a group of instances that provides a price per \ncost ratio that will execute a given SPITS code in less than an user-defined input amount.\nSince this is a prototype it still has a lot of limitations and is not ready for general usage. However the general\nidea behind the algorithm is here.\n\n #### Disclaimer\n\n This is still a proof of concept. The SPITS program used for validation computes the Zero Offset Non-hyperbolic \n Common Reflection Surface (DOI:10.1111/j.1365-2478.2012.01055.x) parameters, therefore there are some parameters that\n  are currenlty tailored for that specific software. This is not yet generic for any SPITS program!\n\n #### How it works\n\n The instance selection algorithm works with a stored database containing previous executions performance \n measurements. By using previous executions information for the same experiment it is possible to infer how the \n current experiment will perform, therefore allows us to create a good initial instance poll. Additionally, by \n verifying periodically how the instances are performing and how expensive they are at a given moment, it is possible\n  to select the types that offer better performance for their money.\n\n The three main files are the following (with their input/output described in their own headers):\n\n    launch/create_ondemand_jm.py\n    populate/simulation.py\n    populate/to_execute.py\n\n The first one (launch/create_ondemand_zocrsomp_jm.py) is used to launch an On-Demand instance that should work as \n the master instance (Job Manager and instance selector). Therefore it is necessary that in some part of the \n user_data variable inserting the code for calling the \"to_execute.py\" code to call this instance selection algorithm\n and start the Job Manager process.\n\n The second one simulates an execution, given previous the information stored in the database and the price log \n stored in a file (populate/log_prices.csv). This allows the user to simulate how much would be spent for each input \n price.\n\n The last one is the actual Python script to be executed, in which the script will start a new poll of instances and \n then verify from time to time for instances that are performing below the desired cost vs performance threshold. \n Replacing bad performing types with better ones. \n\n #### Database\n\n The algorithm extracts information from a database as configured in the \"rds_config.py\" file. The database should be\n  called \"experimentos\" and have the tables as displayed in the picture below. There is a SQL script to generate it \n  in the folder \"databases/\".\n ![](database/experimentos_db.png)\n\n #### Performance measurement report\n\n The worker instances must report their performance to the Job Manager via CloudWatch. To do so, the user needs to \n create a new metric with the following characteristics:\n\n    Namespace='Performance',\n    MetricName='perf_sec',\n    Dimensions=[{'Name': 'Instance Id', 'Value': instance_id},\n                {'Name': 'Type', 'Value': instance_type}]\n\n    Namespace='Performance',\n    MetricName='perf_sec_stdev',\n    Dimensions=[{'Name': 'Instance Id', 'Value': instance_id},\n                {'Name': 'Type', 'Value': instance_type}]\n\n    Namespace='Performance',\n    MetricName='tasks_completed',\n    Dimensions=[{'Name': 'Instance Id', 'Value': instance_id},\n                {'Name': 'Type', 'Value': instance_type}]\n\n This report also goes to the database aforementioned so that future executions use them. Also, they are mandatory so\n  that the instance selection Python script can select the initial poll of instances for the SPITS program being \n  optimized.\n\n #### Dependencies\n\n The program have a few dependencies. They can be installed using the python pip command:\n\n    python3 -m pip install --user -r requirements.txt\n\n Most Python packages already come with the some dependencies installed, however, two of them are not included, namely:\n\n    boto3: To access the AWS instances\n    pymysql: To enable Python to access a MySQL database and perform queries\n\n  Further information about all files are in their own documentations.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hpg-cepetro/CloudPITS", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cloud-pits", "package_url": "https://pypi.org/project/cloud-pits/", "platform": "", "project_url": "https://pypi.org/project/cloud-pits/", "project_urls": {"Homepage": "https://github.com/hpg-cepetro/CloudPITS"}, "release_url": "https://pypi.org/project/cloud-pits/0.0.1/", "requires_dist": ["boto3", "pymysql"], "requires_python": ">=2.6", "summary": "An AWS spot orchestrator for SPITZ enabled programs", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CloudPITS / Instance Selection</h1>\n<p>This is the initial idea behind Cloud-PITS, which involves selecting a group of instances that provides a price per\ncost ratio that will execute a given SPITS code in less than an user-defined input amount.\nSince this is a prototype it still has a lot of limitations and is not ready for general usage. However the general\nidea behind the algorithm is here.</p>\n<h4>Disclaimer</h4>\n<p>This is still a proof of concept. The SPITS program used for validation computes the Zero Offset Non-hyperbolic\nCommon Reflection Surface (DOI:10.1111/j.1365-2478.2012.01055.x) parameters, therefore there are some parameters that\nare currenlty tailored for that specific software. This is not yet generic for any SPITS program!</p>\n<h4>How it works</h4>\n<p>The instance selection algorithm works with a stored database containing previous executions performance\nmeasurements. By using previous executions information for the same experiment it is possible to infer how the\ncurrent experiment will perform, therefore allows us to create a good initial instance poll. Additionally, by\nverifying periodically how the instances are performing and how expensive they are at a given moment, it is possible\nto select the types that offer better performance for their money.</p>\n<p>The three main files are the following (with their input/output described in their own headers):</p>\n<pre><code>launch/create_ondemand_jm.py\npopulate/simulation.py\npopulate/to_execute.py\n</code></pre>\n<p>The first one (launch/create_ondemand_zocrsomp_jm.py) is used to launch an On-Demand instance that should work as\nthe master instance (Job Manager and instance selector). Therefore it is necessary that in some part of the\nuser_data variable inserting the code for calling the \"to_execute.py\" code to call this instance selection algorithm\nand start the Job Manager process.</p>\n<p>The second one simulates an execution, given previous the information stored in the database and the price log\nstored in a file (populate/log_prices.csv). This allows the user to simulate how much would be spent for each input\nprice.</p>\n<p>The last one is the actual Python script to be executed, in which the script will start a new poll of instances and\nthen verify from time to time for instances that are performing below the desired cost vs performance threshold.\nReplacing bad performing types with better ones.</p>\n<h4>Database</h4>\n<p>The algorithm extracts information from a database as configured in the \"rds_config.py\" file. The database should be\ncalled \"experimentos\" and have the tables as displayed in the picture below. There is a SQL script to generate it\nin the folder \"databases/\".\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38ad8e0bb570dfa1a836b24b1fc6e58279e388da/64617461626173652f6578706572696d656e746f735f64622e706e67\"></p>\n<h4>Performance measurement report</h4>\n<p>The worker instances must report their performance to the Job Manager via CloudWatch. To do so, the user needs to\ncreate a new metric with the following characteristics:</p>\n<pre><code>Namespace='Performance',\nMetricName='perf_sec',\nDimensions=[{'Name': 'Instance Id', 'Value': instance_id},\n            {'Name': 'Type', 'Value': instance_type}]\n\nNamespace='Performance',\nMetricName='perf_sec_stdev',\nDimensions=[{'Name': 'Instance Id', 'Value': instance_id},\n            {'Name': 'Type', 'Value': instance_type}]\n\nNamespace='Performance',\nMetricName='tasks_completed',\nDimensions=[{'Name': 'Instance Id', 'Value': instance_id},\n            {'Name': 'Type', 'Value': instance_type}]\n</code></pre>\n<p>This report also goes to the database aforementioned so that future executions use them. Also, they are mandatory so\nthat the instance selection Python script can select the initial poll of instances for the SPITS program being\noptimized.</p>\n<h4>Dependencies</h4>\n<p>The program have a few dependencies. They can be installed using the python pip command:</p>\n<pre><code>python3 -m pip install --user -r requirements.txt\n</code></pre>\n<p>Most Python packages already come with the some dependencies installed, however, two of them are not included, namely:</p>\n<pre><code>boto3: To access the AWS instances\npymysql: To enable Python to access a MySQL database and perform queries\n</code></pre>\n<p>Further information about all files are in their own documentations.</p>\n\n          </div>"}, "last_serial": 5810775, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8db5e6c089835a856e0e9c14f16bc771", "sha256": "ca2bb00238ed3ab157610383e140cef42a4190de393fce3f1fbf9e1662d41331"}, "downloads": -1, "filename": "cloud_pits-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "8db5e6c089835a856e0e9c14f16bc771", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.6", "size": 29926, "upload_time": "2019-09-10T19:15:02", "upload_time_iso_8601": "2019-09-10T19:15:02.396851Z", "url": "https://files.pythonhosted.org/packages/2b/e2/11bcb977e5db60cb4ead20de6375d4421db68e0a5557f1ac6b6227b323fd/cloud_pits-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1230bc73cbcccf1c6804da1f509428a5", "sha256": "1a583d49ee266a473c345d2e37f6f788c7f02d8b630400591a4a4bd6c32a33af"}, "downloads": -1, "filename": "cloud_pits-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1230bc73cbcccf1c6804da1f509428a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.6", "size": 29924, "upload_time": "2019-09-10T19:15:05", "upload_time_iso_8601": "2019-09-10T19:15:05.404364Z", "url": "https://files.pythonhosted.org/packages/ff/d3/861bb4052f47ce963e1c1ff55336b62191de911f42d3f6a8e3ba8fcb34b7/cloud_pits-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a2bd5fb31f964c49b6b1fa02d0c1eff", "sha256": "840f1dba0f32215c3ea29b65c19d9955f60b83ee81a699999a24fa5870fb9249"}, "downloads": -1, "filename": "cloud-pits-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4a2bd5fb31f964c49b6b1fa02d0c1eff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 18821, "upload_time": "2019-09-10T19:15:07", "upload_time_iso_8601": "2019-09-10T19:15:07.176440Z", "url": "https://files.pythonhosted.org/packages/51/f9/f91ccd799401ac35e891bf14241cf5ed73d63567447c5e1c5b716b92099e/cloud-pits-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8db5e6c089835a856e0e9c14f16bc771", "sha256": "ca2bb00238ed3ab157610383e140cef42a4190de393fce3f1fbf9e1662d41331"}, "downloads": -1, "filename": "cloud_pits-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "8db5e6c089835a856e0e9c14f16bc771", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.6", "size": 29926, "upload_time": "2019-09-10T19:15:02", "upload_time_iso_8601": "2019-09-10T19:15:02.396851Z", "url": "https://files.pythonhosted.org/packages/2b/e2/11bcb977e5db60cb4ead20de6375d4421db68e0a5557f1ac6b6227b323fd/cloud_pits-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1230bc73cbcccf1c6804da1f509428a5", "sha256": "1a583d49ee266a473c345d2e37f6f788c7f02d8b630400591a4a4bd6c32a33af"}, "downloads": -1, "filename": "cloud_pits-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1230bc73cbcccf1c6804da1f509428a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.6", "size": 29924, "upload_time": "2019-09-10T19:15:05", "upload_time_iso_8601": "2019-09-10T19:15:05.404364Z", "url": "https://files.pythonhosted.org/packages/ff/d3/861bb4052f47ce963e1c1ff55336b62191de911f42d3f6a8e3ba8fcb34b7/cloud_pits-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a2bd5fb31f964c49b6b1fa02d0c1eff", "sha256": "840f1dba0f32215c3ea29b65c19d9955f60b83ee81a699999a24fa5870fb9249"}, "downloads": -1, "filename": "cloud-pits-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4a2bd5fb31f964c49b6b1fa02d0c1eff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 18821, "upload_time": "2019-09-10T19:15:07", "upload_time_iso_8601": "2019-09-10T19:15:07.176440Z", "url": "https://files.pythonhosted.org/packages/51/f9/f91ccd799401ac35e891bf14241cf5ed73d63567447c5e1c5b716b92099e/cloud-pits-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:47 2020"}