{"info": {"author": "Ruben Branco", "author_email": "ruben.branco@outlook.pt", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "EmbEval\n=======\n\nEmbEval is a framework that aims to provide a way to evaluate\nan arbitrary amount of word embeddings in an arbitrary amount\nof tasks, in parallel.\n\nTo aid with the interpretability of the results, embeval\nresorts to graphs to visualize the performance of the different\ntype of embeddings across each task.\n\nGetting Started\n---------------\n\nInstallation\n^^^^^^^^^^^^\n\nInstall embeval with pip:\n\n.. code:: bash\n\n    pip3 install embeval\n\nUsage (Command Line)\n^^^^^^^^^^^^^^^^^^^^\n\n.. code:: bash\n\n   embeval --help\n       Usage: embeval [OPTIONS] COMMAND [ARGS]...\n\n       Options:\n           --help  Show this message and exit.\n\n       Commands:\n           semantic-similarity\n\n    embeval semantic-similarity --help\n        Usage: embeval semantic-similarity [OPTIONS] EMBEDDING_DIR TESTSET_DIR\n\n        Options:\n            --workers INTEGER               Number of worker processes to use.\n            --output_path TEXT              Path to write output files to.\n            --output_format [text|graph|both]\n            --help                          Show this message and exit.\n\n    embeval semantic-similarity --output_path output/ embeddings/ testsets/\n\nUsing/Extending EmbEval\n-----------------------\n\nTo extend the code to include tasks not provided in the current implementation (contributions would be most welcome), n concepts must be implemented:\n\n- Command (See `Semantic Similarity Command`_) -- This is what will make your task available under the CLI and also will *command* the flow of execution when called upon. `Click`_ is used as the CLI package. The entrypoint for an extended application must import the main cli object and register all the available commands (See `main`_).\n\n- Processing Pipeline (See `generics`_ and `Semantic Similarity Pipeline`_ -- This is where the producer, processor and consumer are implemented to execute tasks. The implementation makes use of the library and methodology of `pseq`_.\n\n- Store (See `Semantic Similarity Store`_) -- Simple object to keep track of evaluation results obtained during the processing pipeline.\n\n- Task (See `Semantic Similarity Task`_) -- A task object which encapsulates needed information to be shared in the pipeline, such as paths to files.\n\n- Visualization (See `text visualization`_) -- Defines a method of visualization.\n\nPlans\n-----\n\n- \u2610 Finish Semantic Similarity visualization.\n- \u2610 Integrate GLUE tasks via `jiant framework`_.\n\nLicense\n-------\n\nDistributed under GPL-3.0 License. See the `LICENSE`_ file for details.\n\n.. _LICENSE: https://github.com/RubenBranco/embeval/blob/master/LICENSE\n.. _Semantic Similarity Command: https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/commands/semantic_similarity.py\n.. _Click: https://click.palletsprojects.com/en/7.x/\n.. _generics: https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/processing/generics.py\n.. _Semantic Similarity Pipeline: https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/processing/semantic_similarity.py\n.. _pseq: https://github.com/luismsgomes/pseq\n.. _Semantic Similarity Store: https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/stores/semantic_similarity.py\n.. _Semantic Similarity Task: https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/tasks/semantic_similarity.py\n.. _text visualization: https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/visualization/text.py\n.. _main: https://github.com/RubenBranco/embeval/blob/master/src/embeval/main.py\n.. _jiant framework: https://github.com/nyu-mll/jiant", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RubenBranco/embeval", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "embeval", "package_url": "https://pypi.org/project/embeval/", "platform": "", "project_url": "https://pypi.org/project/embeval/", "project_urls": {"Homepage": "https://github.com/RubenBranco/embeval"}, "release_url": "https://pypi.org/project/embeval/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "A framework for embedding evaluation automation and visualization.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>EmbEval is a framework that aims to provide a way to evaluate\nan arbitrary amount of word embeddings in an arbitrary amount\nof tasks, in parallel.</p>\n<p>To aid with the interpretability of the results, embeval\nresorts to graphs to visualize the performance of the different\ntype of embeddings across each task.</p>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Install embeval with pip:</p>\n<pre>pip3 install embeval\n</pre>\n</div>\n<div id=\"usage-command-line\">\n<h3>Usage (Command Line)</h3>\n<pre>embeval --help\n    Usage: embeval <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n\n    Options:\n        --help  Show this message and exit.\n\n    Commands:\n        semantic-similarity\n\n embeval semantic-similarity --help\n     Usage: embeval semantic-similarity <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> EMBEDDING_DIR TESTSET_DIR\n\n     Options:\n         --workers INTEGER               Number of worker processes to use.\n         --output_path TEXT              Path to write output files to.\n         --output_format <span class=\"o\">[</span>text<span class=\"p\">|</span>graph<span class=\"p\">|</span>both<span class=\"o\">]</span>\n         --help                          Show this message and exit.\n\n embeval semantic-similarity --output_path output/ embeddings/ testsets/\n</pre>\n</div>\n</div>\n<div id=\"using-extending-embeval\">\n<h2>Using/Extending EmbEval</h2>\n<p>To extend the code to include tasks not provided in the current implementation (contributions would be most welcome), n concepts must be implemented:</p>\n<ul>\n<li>Command (See <a href=\"https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/commands/semantic_similarity.py\" rel=\"nofollow\">Semantic Similarity Command</a>) \u2013 This is what will make your task available under the CLI and also will <em>command</em> the flow of execution when called upon. <a href=\"https://click.palletsprojects.com/en/7.x/\" rel=\"nofollow\">Click</a> is used as the CLI package. The entrypoint for an extended application must import the main cli object and register all the available commands (See <a href=\"https://github.com/RubenBranco/embeval/blob/master/src/embeval/main.py\" rel=\"nofollow\">main</a>).</li>\n<li>Processing Pipeline (See <a href=\"https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/processing/generics.py\" rel=\"nofollow\">generics</a> and <a href=\"https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/processing/semantic_similarity.py\" rel=\"nofollow\">Semantic Similarity Pipeline</a> \u2013 This is where the producer, processor and consumer are implemented to execute tasks. The implementation makes use of the library and methodology of <a href=\"https://github.com/luismsgomes/pseq\" rel=\"nofollow\">pseq</a>.</li>\n<li>Store (See <a href=\"https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/stores/semantic_similarity.py\" rel=\"nofollow\">Semantic Similarity Store</a>) \u2013 Simple object to keep track of evaluation results obtained during the processing pipeline.</li>\n<li>Task (See <a href=\"https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/tasks/semantic_similarity.py\" rel=\"nofollow\">Semantic Similarity Task</a>) \u2013 A task object which encapsulates needed information to be shared in the pipeline, such as paths to files.</li>\n<li>Visualization (See <a href=\"https://github.com/RubenBranco/embeval/blob/master/src/embeval/core/visualization/text.py\" rel=\"nofollow\">text visualization</a>) \u2013 Defines a method of visualization.</li>\n</ul>\n</div>\n<div id=\"plans\">\n<h2>Plans</h2>\n<ul>\n<li>\u2610 Finish Semantic Similarity visualization.</li>\n<li>\u2610 Integrate GLUE tasks via <a href=\"https://github.com/nyu-mll/jiant\" rel=\"nofollow\">jiant framework</a>.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Distributed under GPL-3.0 License. See the <a href=\"https://github.com/RubenBranco/embeval/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file for details.</p>\n</div>\n\n          </div>"}, "last_serial": 5509069, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1828ff14261059f91842fbdb3dedc223", "sha256": "15da8c59573d7170d29ed94917871e6283538ddec9f2cbdfb828cb314481a751"}, "downloads": -1, "filename": "embeval-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1828ff14261059f91842fbdb3dedc223", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1850, "upload_time": "2019-07-04T20:38:32", "upload_time_iso_8601": "2019-07-04T20:38:32.674784Z", "url": "https://files.pythonhosted.org/packages/92/d8/99a537b8f6acf7126add26b929a81afc9f28bd18844524e838dba960c4d0/embeval-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3e994fd95297f6f34dc9355fcb4dc8ee", "sha256": "960cb964cb73d04cd5436a6227588569367c6cf5d4278741d8abd3b87f31c583"}, "downloads": -1, "filename": "embeval-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3e994fd95297f6f34dc9355fcb4dc8ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3993, "upload_time": "2019-07-07T22:03:52", "upload_time_iso_8601": "2019-07-07T22:03:52.785083Z", "url": "https://files.pythonhosted.org/packages/f1/b9/04884908c03187adb0f072dd61edc8230db866e3cdeb19c92ceabd0acd64/embeval-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "7d9de35f415531d516823623b8167959", "sha256": "255274fd3609cab8c801bca631c4af6e32ab91ae8f7ae5f774dfef53e05e20ea"}, "downloads": -1, "filename": "embeval-0.1.3.tar.gz", "has_sig": false, "md5_digest": "7d9de35f415531d516823623b8167959", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5356, "upload_time": "2019-07-09T21:04:05", "upload_time_iso_8601": "2019-07-09T21:04:05.943266Z", "url": "https://files.pythonhosted.org/packages/e3/85/f585989180dee0f748c5c10409fb512fb34bc11d9e4e7051e7575991aca2/embeval-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d9de35f415531d516823623b8167959", "sha256": "255274fd3609cab8c801bca631c4af6e32ab91ae8f7ae5f774dfef53e05e20ea"}, "downloads": -1, "filename": "embeval-0.1.3.tar.gz", "has_sig": false, "md5_digest": "7d9de35f415531d516823623b8167959", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5356, "upload_time": "2019-07-09T21:04:05", "upload_time_iso_8601": "2019-07-09T21:04:05.943266Z", "url": "https://files.pythonhosted.org/packages/e3/85/f585989180dee0f748c5c10409fb512fb34bc11d9e4e7051e7575991aca2/embeval-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:40 2020"}