{"info": {"author": "Doug Winter", "author_email": "doug.winter@isotoma.com", "bugtrack_url": null, "classifiers": [], "description": "====================\ndjango-json-settings\n====================\n\ndjango-json-settings is a small Django application that allows you to provide\nspecific local settings in JSON format, generally for production or other\nnon-developer environments (although it could also be used for settings that\nvary on a per-developer basis).\n\nThis presumes you are deploying into a virtualenv, and it imposes a few\nassumptions about how that virtualenv should be structured, based on standard\nUNIX naming.\n\nWhat it does\n============\n\nWhen deployed in a virtualenv, and called from your settings.py,\ndjango-json-settings looks for a file called::\n\n    <sys.prefix>/etc/settings.json\n\nThis file is then read and it's contents placed into the standard django\nsettings.\n\nYou do this by putting::\n\n    from json_settings import *\n    \nIn your settings.py at an appropriate point.\n\nAdditional magic settings\n=========================\n\nIn addition to this, django-json-settings will set three new values (if they aren't already defined)::\n\n    VAR_DIRECTORY to <sys.prefix>/var\n    STATIC_ROOT to <VAR_DIRECTORY>/static\n    MEDIA_ROOT to <VAR_DIRECTORY>/media\n\nThese are quite useful things to have configured.\n\nHow to use it\n=============\n\nObviously first you should add a dependency to your setup.py on django-json-settings, and then install it.\n\nThen add a call to \"from json_settings import *\" in your settings.py at the\nright point. Generally you should structure your settings.py so that you have\n3 types of setting:\n\n 1. Things that are definitely going to need to be set in production. For example, ADMINS, ALLOWED_HOSTS, SECRET_KEY, STATIC_ROOT\n 2. Things you might want to change in production, but might want to leave alone, for example LOGGING\n 3. Things you don't want to change in production, ever. For example, MIDDLEWARE_CLASSES\n \nYou should put the json_settings import statement after all of those in 2, but before those in 3.\n \nThis means whoever is deploying the software gets lots of choice about the\nenvironment, but can't accidentally hose things that are really core\napplication configuration.\n \nHere is an example settings.py::\n\n    import sys\n    import os\n    \n    DEBUG = True\n    ADMINS = (\n    )\n\n    ALLOWED_HOSTS = []\n    TIME_ZONE = 'Europe/London'\n\n    SECRET_KEY = '*ivd!%8j-=7r36ng^)rmeto(wj)#9)ylzd_hhrzv#x%+a)gs8x'\n\n    SESSION_COOKIE_AGE = 3600\n\n    LANGUAGE_CODE = 'en-us'\n    \n    STATIC_ROOT = 'static/'\n    MEDIA_ROOT = 'media/'\n\n    from json_settings import *\n\n    TEMPLATE_DEBUG = DEBUG\n    MANAGERS = ADMINS\n\n    SITE_ID = 1\n    \n    ...\n    \n\nTesting local settings\n======================\n\nYou can use a different settings file by setting an environment variable\nJSON_SETTINGS::\n\n    JSON_SETTINGS=example.json ./manage.py runserver\n\nIf you want to try some settings out.\n\nError Handling\n==============\n\nIf the settings.json file is invalid then your application will terminate\nwith an error.\n\nIf the file is absent then this is only an error if it was provided using the\nJSON_SETTINGS environment variable. A missing file is otherwise assumed to be\nok (so you can put development defaults in your settings.py and not have a\nlocal settings file at all).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/isotoma/django-json-settings", "keywords": null, "license": "Apache Software License", "maintainer": null, "maintainer_email": null, "name": "django-json-settings", "package_url": "https://pypi.org/project/django-json-settings/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-json-settings/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/isotoma/django-json-settings"}, "release_url": "https://pypi.org/project/django-json-settings/0.2/", "requires_dist": null, "requires_python": null, "summary": "A Django application to let you provide local settings in json format", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            ====================<br>django-json-settings<br>====================<br><br>django-json-settings is a small Django application that allows you to provide<br>specific local settings in JSON format, generally for production or other<br>non-developer environments (although it could also be used for settings that<br>vary on a per-developer basis).<br><br>This presumes you are deploying into a virtualenv, and it imposes a few<br>assumptions about how that virtualenv should be structured, based on standard<br>UNIX naming.<br><br>What it does<br>============<br><br>When deployed in a virtualenv, and called from your settings.py,<br>django-json-settings looks for a file called::<br><br>    &lt;sys.prefix&gt;/etc/settings.json<br><br>This file is then read and it's contents placed into the standard django<br>settings.<br><br>You do this by putting::<br><br>    from json_settings import *<br>    <br>In your settings.py at an appropriate point.<br><br>Additional magic settings<br>=========================<br><br>In addition to this, django-json-settings will set three new values (if they aren't already defined)::<br><br>    VAR_DIRECTORY to &lt;sys.prefix&gt;/var<br>    STATIC_ROOT to &lt;VAR_DIRECTORY&gt;/static<br>    MEDIA_ROOT to &lt;VAR_DIRECTORY&gt;/media<br><br>These are quite useful things to have configured.<br><br>How to use it<br>=============<br><br>Obviously first you should add a dependency to your setup.py on django-json-settings, and then install it.<br><br>Then add a call to \"from json_settings import *\" in your settings.py at the<br>right point. Generally you should structure your settings.py so that you have<br>3 types of setting:<br><br> 1. Things that are definitely going to need to be set in production. For example, ADMINS, ALLOWED_HOSTS, SECRET_KEY, STATIC_ROOT<br> 2. Things you might want to change in production, but might want to leave alone, for example LOGGING<br> 3. Things you don't want to change in production, ever. For example, MIDDLEWARE_CLASSES<br> <br>You should put the json_settings import statement after all of those in 2, but before those in 3.<br> <br>This means whoever is deploying the software gets lots of choice about the<br>environment, but can't accidentally hose things that are really core<br>application configuration.<br> <br>Here is an example settings.py::<br><br>    import sys<br>    import os<br>    <br>    DEBUG = True<br>    ADMINS = (<br>    )<br><br>    ALLOWED_HOSTS = []<br>    TIME_ZONE = 'Europe/London'<br><br>    SECRET_KEY = '*ivd!%8j-=7r36ng^)rmeto(wj)#9)ylzd_hhrzv#x%+a)gs8x'<br><br>    SESSION_COOKIE_AGE = 3600<br><br>    LANGUAGE_CODE = 'en-us'<br>    <br>    STATIC_ROOT = 'static/'<br>    MEDIA_ROOT = 'media/'<br><br>    from json_settings import *<br><br>    TEMPLATE_DEBUG = DEBUG<br>    MANAGERS = ADMINS<br><br>    SITE_ID = 1<br>    <br>    ...<br>    <br><br>Testing local settings<br>======================<br><br>You can use a different settings file by setting an environment variable<br>JSON_SETTINGS::<br><br>    JSON_SETTINGS=example.json ./manage.py runserver<br><br>If you want to try some settings out.<br><br>Error Handling<br>==============<br><br>If the settings.json file is invalid then your application will terminate<br>with an error.<br><br>If the file is absent then this is only an error if it was provided using the<br>JSON_SETTINGS environment variable. A missing file is otherwise assumed to be<br>ok (so you can put development defaults in your settings.py and not have a<br>local settings file at all).\n          </div>"}, "last_serial": 2189293, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c3be67737332a5324282721b840129a7", "sha256": "cf4baf00d99d0ebd5a525e46a5b783170058de85e05f3c0370c3dc9574ca18cd"}, "downloads": -1, "filename": "django-json-settings-0.1.zip", "has_sig": false, "md5_digest": "c3be67737332a5324282721b840129a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11678, "upload_time": "2014-01-17T11:37:34", "upload_time_iso_8601": "2014-01-17T11:37:34.507687Z", "url": "https://files.pythonhosted.org/packages/88/a7/7c91836470263dc0b5ed214106f911c25f6ebd679cb183ad4793c8d63bbe/django-json-settings-0.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "2988d0f15ba7eefc500f08f467c3c446", "sha256": "f856d0d357d0958f0964dd54cc5ad3133f2552628d473c38d2bcebd0960f433d"}, "downloads": -1, "filename": "django-json-settings-0.2.zip", "has_sig": false, "md5_digest": "2988d0f15ba7eefc500f08f467c3c446", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11867, "upload_time": "2016-06-27T12:53:53", "upload_time_iso_8601": "2016-06-27T12:53:53.736349Z", "url": "https://files.pythonhosted.org/packages/09/1f/a4d272a017d766ea3c045db5735a13b7e8cd29d7b94721eea449c2530cfa/django-json-settings-0.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2988d0f15ba7eefc500f08f467c3c446", "sha256": "f856d0d357d0958f0964dd54cc5ad3133f2552628d473c38d2bcebd0960f433d"}, "downloads": -1, "filename": "django-json-settings-0.2.zip", "has_sig": false, "md5_digest": "2988d0f15ba7eefc500f08f467c3c446", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11867, "upload_time": "2016-06-27T12:53:53", "upload_time_iso_8601": "2016-06-27T12:53:53.736349Z", "url": "https://files.pythonhosted.org/packages/09/1f/a4d272a017d766ea3c045db5735a13b7e8cd29d7b94721eea449c2530cfa/django-json-settings-0.2.zip", "yanked": false}], "timestamp": "Fri May  8 00:35:28 2020"}