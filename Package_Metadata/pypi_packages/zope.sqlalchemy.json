{"info": {"author": "Laurence Rowe", "author_email": "laurence@lrowe.co.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Pyramid", "Framework :: Zope :: 3", "Framework :: Zope :: 4", "Framework :: Zope :: 5", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Database", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "***************\nzope.sqlalchemy\n***************\n\n.. contents::\n   :local:\n\nIntroduction\n============\n\nThe aim of this package is to unify the plethora of existing packages\nintegrating SQLAlchemy with Zope's transaction management. As such it seeks\nonly to provide a data manager and makes no attempt to define a `zopeish` way\nto configure engines.\n\nFor WSGI applications, Zope style automatic transaction management is\navailable with `repoze.tm2`_ (used by `Turbogears 2`_ and other systems).\n\nThis package is also used by `pyramid_tm`_ (an add-on of the `Pyramid`_) web\nframework.\n\nYou need to understand `SQLAlchemy`_ and the `Zope transaction manager`_ for\nthis package and this README to make any sense.\n\n.. _repoze.tm2: http://docs.repoze.org/tm2/\n\n.. _pyramid_tm: https://docs.pylonsproject.org/projects/pyramid_tm/dev/\n\n.. _Pyramid: http://pylonsproject.org/\n\n.. _Turbogears 2: http://turbogears.org/\n\n.. _SQLAlchemy: http://sqlalchemy.org/docs/\n\n.. _Zope transaction manager: http://www.zodb.org/en/latest/#transactions\n\nRunning the tests\n=================\n\nThis package is distributed as a buildout. Using your desired python run:\n\n$ python bootstrap.py\n$ ./bin/buildout\n\nThis will download the dependent packages and setup the test script, which may\nbe run with:\n\n$ ./bin/test\n\nor with the standard setuptools test command:\n\n$ ./bin/py setup.py test\n\nTo enable testing with your own database set the TEST_DSN environment variable\nto your sqlalchemy database dsn. Two-phase commit behaviour may be tested by\nsetting the TEST_TWOPHASE variable to a non empty string. e.g:\n\n$ TEST_DSN=postgres://test:test@localhost/test TEST_TWOPHASE=True bin/test\n\nUsage in short\n==============\n\nThe integration between Zope transactions and the SQLAlchemy event system is\ndone using the ``register()`` function on the session factory class.\n\n.. code-block:: python\n\n    from zope.sqlalchemy import register\n    from sqlalchemy import create_engine\n    from sqlalchemy.orm import sessionmaker, scoped_session\n\n    engine = sqlalchemy.create_engine(\"postgresql://scott:tiger@localhost/test\")\n\n    DBSession = scoped_session(sessionmaker(bind=engine))\n    register(DBSession)\n\nInstantiated sessions commits and rollbacks will now be integrated with Zope\ntransactions.\n\n.. code-block:: python\n\n    import transaction\n\n    session = DBSession()\n\n    result = session.execute(\"DELETE FROM objects WHERE id=:id\", {\"id\": 2})\n    row = result.fetchone()\n\n    transaction.commit()\n\n\nFull Example\n============\n\nThis example is lifted directly from the SQLAlchemy declarative documentation.\nFirst the necessary imports.\n\n    >>> from sqlalchemy import *\n    >>> from sqlalchemy.ext.declarative import declarative_base\n    >>> from sqlalchemy.orm import scoped_session, sessionmaker, relation\n    >>> from zope.sqlalchemy import register\n    >>> import transaction\n\nNow to define the mapper classes.\n\n    >>> Base = declarative_base()\n    >>> class User(Base):\n    ...     __tablename__ = 'test_users'\n    ...     id = Column('id', Integer, primary_key=True)\n    ...     name = Column('name', String(50))\n    ...     addresses = relation(\"Address\", backref=\"user\")\n    >>> class Address(Base):\n    ...     __tablename__ = 'test_addresses'\n    ...     id = Column('id', Integer, primary_key=True)\n    ...     email = Column('email', String(50))\n    ...     user_id = Column('user_id', Integer, ForeignKey('test_users.id'))\n\nCreate an engine and setup the tables. Note that for this example to work a\nrecent version of sqlite/pysqlite is required. 3.4.0 seems to be sufficient.\n\n    >>> engine = create_engine(TEST_DSN)\n    >>> Base.metadata.create_all(engine)\n\nNow to create the session itself. As zope is a threaded web server we must use\nscoped sessions. Zope and SQLAlchemy sessions are tied together by using the\nregister\n\n    >>> Session = scoped_session(sessionmaker(bind=engine,\n    ... twophase=TEST_TWOPHASE))\n\nCall the scoped session factory to retrieve a session. You may call this as\nmany times as you like within a transaction and you will always retrieve the\nsame session. At present there are no users in the database.\n\n    >>> session = Session()\n    >>> register(session)\n    <zope.sqlalchemy.datamanager.ZopeTransactionEvents object at ...>\n    >>> session.query(User).all()\n    []\n\nWe can now create a new user and commit the changes using Zope's transaction\nmachinery, just as Zope's publisher would.\n\n    >>> session.add(User(id=1, name='bob'))\n    >>> transaction.commit()\n\nEngine level connections are outside the scope of the transaction integration.\n\n    >>> engine.connect().execute('SELECT * FROM test_users').fetchall()\n    [(1, ...'bob')]\n\nA new transaction requires a new session. Let's add an address.\n\n    >>> session = Session()\n    >>> bob = session.query(User).all()[0]\n    >>> str(bob.name)\n    'bob'\n    >>> bob.addresses\n    []\n    >>> bob.addresses.append(Address(id=1, email='bob@bob.bob'))\n    >>> transaction.commit()\n    >>> session = Session()\n    >>> bob = session.query(User).all()[0]\n    >>> bob.addresses\n    [<Address object at ...>]\n    >>> str(bob.addresses[0].email)\n    'bob@bob.bob'\n    >>> bob.addresses[0].email = 'wrong@wrong'\n\nTo rollback a transaction, use transaction.abort().\n\n    >>> transaction.abort()\n    >>> session = Session()\n    >>> bob = session.query(User).all()[0]\n    >>> str(bob.addresses[0].email)\n    'bob@bob.bob'\n    >>> transaction.abort()\n\nBy default, zope.sqlalchemy puts sessions in an 'active' state when they are\nfirst used. ORM write operations automatically move the session into a\n'changed' state. This avoids unnecessary database commits. Sometimes it\nis necessary to interact with the database directly through SQL. It is not\npossible to guess whether such an operation is a read or a write. Therefore we\nmust manually mark the session as changed when manual SQL statements write\nto the DB.\n\n    >>> session = Session()\n    >>> conn = session.connection()\n    >>> users = Base.metadata.tables['test_users']\n    >>> conn.execute(users.update(users.c.name=='bob'), name='ben')\n    <sqlalchemy.engine...ResultProxy object at ...>\n    >>> from zope.sqlalchemy import mark_changed\n    >>> mark_changed(session)\n    >>> transaction.commit()\n    >>> session = Session()\n    >>> str(session.query(User).all()[0].name)\n    'ben'\n    >>> transaction.abort()\n\nIf this is a problem you may register the events and tell them to place the\nsession in the 'changed' state initially.\n\n    >>> Session.remove()\n    >>> register(Session, 'changed')\n    <zope.sqlalchemy.datamanager.ZopeTransactionEvents object at ...>\n    >>> session = Session()\n    >>> conn = session.connection()\n    >>> conn.execute(users.update(users.c.name=='ben'), name='bob')\n    <sqlalchemy.engine...ResultProxy object at ...>\n    >>> transaction.commit()\n    >>> session = Session()\n    >>> str(session.query(User).all()[0].name)\n    'bob'\n    >>> transaction.abort()\n\nLong-lasting session scopes\n---------------------------\n\nThe default behaviour of the transaction integration is to close the session\nafter a commit. You can tell by trying to access an object after committing:\n\n    >>> bob = session.query(User).all()[0]\n    >>> transaction.commit()\n    >>> bob.name\n    Traceback (most recent call last):\n    DetachedInstanceError: Instance <User at ...> is not bound to a Session; attribute refresh operation cannot proceed...\n\nTo support cases where a session needs to last longer than a transaction (useful\nin test suites) you can specify to keep a session when registering the events:\n\n    >>> Session = scoped_session(sessionmaker(bind=engine,\n    ... twophase=TEST_TWOPHASE))\n    >>> register(Session, keep_session=True)\n    <zope.sqlalchemy.datamanager.ZopeTransactionEvents object at ...>\n    >>> session = Session()\n    >>> bob = session.query(User).all()[0]\n    >>> bob.name = 'bobby'\n    >>> transaction.commit()\n    >>> bob.name\n    u'bobby'\n\nThe session must then be closed manually:\n\n    >>> session.close()\n\n\nDevelopment version\n===================\n\n`GIT version <https://github.com/zopefoundation/zope.sqlalchemy>`_\n\n\nChanges\n=======\n\n1.3 (2020-02-17)\n----------------\n\n* ``.datamanager.register()`` now returns the ``ZopeTransactionEvents``\n  instance which was used to register the events. This allows to change its\n  parameters afterwards.\n  (`#40 <https://github.com/zopefoundation/zope.sqlalchemy/pull/40>`_)\n\n* Add preliminary support for Python 3.9a3.\n\n\n1.2 (2019-10-17)\n----------------\n\n**Breaking Changes**\n\n* Drop support for Python 3.4.\n\n* Add support for Python 3.7 and 3.8.\n\n* Fix deprecation warnings for the event system. We already used it in general\n  but still leveraged the old extension mechanism in some places.\n  (`#31 <https://github.com/zopefoundation/zope.sqlalchemy/issues/31>`_)\n\n  To make things clearer we renamed the ``ZopeTransactionExtension`` class\n  to ``ZopeTransactionEvents``. Existing code using the 'register' version\n  stays compatible.\n\n**Upgrade from 1.1**\n\nYour old code like this:\n\n.. code-block:: python\n\n    from zope.sqlalchemy import ZopeTransactionExtension\n\n    DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension(), **options))\n\nbecomes:\n\n.. code-block:: python\n\n    from zope.sqlalchemy import register\n\n    DBSession = scoped_session(sessionmaker(**options))\n    register(DBSession)\n\n\n\n1.1 (2019-01-03)\n----------------\n\n* Add support to MySQL using pymysql.\n\n\n1.0 (2018-01-31)\n----------------\n\n* Add support for Python 3.4 up to 3.6.\n\n* Support SQLAlchemy 1.2.\n\n* Drop support for Python 2.6, 3.2 and 3.3.\n\n* Drop support for transaction < 1.6.0.\n\n* Fix hazard that could cause SQLAlchemy session not to be committed when\n  transaction is committed in rare situations.\n  (`#23 <https://github.com/zopefoundation/zope.sqlalchemy/pull/23>`_)\n\n\n0.7.7 (2016-06-23)\n------------------\n\n* Support SQLAlchemy 1.1.\n  (`#15 <https://github.com/zopefoundation/zope.sqlalchemy/issues/15>`_)\n\n\n0.7.6 (2015-03-20)\n------------------\n\n* Make version check in register compatible with prereleases.\n\n0.7.5 (2014-06-17)\n------------------\n\n* Ensure mapped objects are expired following a ``transaction.commit()`` when\n  no database commit was required.\n  (`#8 <https://github.com/zopefoundation/zope.sqlalchemy/issues/8>`_)\n\n\n0.7.4 (2014-01-06)\n------------------\n\n* Allow ``session.commit()`` on nested transactions to facilitate integration\n  of existing code that might not use ``transaction.savepoint()``.\n  (`#1 <https://github.com/zopefoundation/zope.sqlalchemy/issues/1>`_)\n\n* Add a new function zope.sqlalchemy.register(), which replaces the\n  direct use of ZopeTransactionExtension to make use\n  of the newer SQLAlchemy event system to establish instrumentation on\n  the given Session instance/class/factory.   Requires at least\n  SQLAlchemy 0.7.\n  (`#4 <https://github.com/zopefoundation/zope.sqlalchemy/issues/4>`_)\n\n* Fix `keep_session=True` doesn't work when a transaction is joined by flush\n  and other manngers bug.\n  (`#5 <https://github.com/zopefoundation/zope.sqlalchemy/issues/5>`_)\n\n\n0.7.3 (2013-09-25)\n------------------\n\n* Prevent the ``Session`` object from getting into a \"wedged\" state if joining\n  a transaction fails. With thread scoped sessions that are reused this can cause\n  persistent errors requiring a server restart.\n  (`#2 <https://github.com/zopefoundation/zope.sqlalchemy/issues/2>`_)\n\n0.7.2 (2013-02-19)\n------------------\n\n* Make life-time of sessions configurable. Specify `keep_session=True` when\n  setting up the SA extension.\n\n* Python 3.3 compatibility.\n\n0.7.1 (2012-05-19)\n------------------\n\n* Use ``@implementer`` as a class decorator instead of ``implements()`` at\n  class scope for compatibility with ``zope.interface`` 4.0.  This requires\n  ``zope.interface`` >= 3.6.0.\n\n0.7 (2011-12-06)\n----------------\n\n* Python 3.2 compatibility.\n\n0.6.1 (2011-01-08)\n------------------\n\n* Update datamanager.mark_changed to handle sessions which have not yet logged\n  a (ORM) query.\n\n\n0.6 (2010-07-24)\n----------------\n\n* Implement should_retry for sqlalchemy.orm.exc.ConcurrentModificationError\n  and serialization errors from PostgreSQL and Oracle.\n  (Specify transaction>=1.1 to use this functionality.)\n\n* Include license files.\n\n* Add ``transaction_manager`` attribute to data managers for compliance with\n  IDataManager interface.\n\n0.5 (2010-06-07)\n----------------\n\n* Remove redundant session.flush() / session.clear() on savepoint operations.\n  These were only needed with SQLAlchemy 0.4.x.\n\n* SQLAlchemy 0.6.x support. Require SQLAlchemy >= 0.5.1.\n\n* Add support for running ``python setup.py test``.\n\n* Pull in pysqlite explicitly as a test dependency.\n\n* Setup sqlalchemy mappers in test setup and clear them in tear down. This\n  makes the tests more robust and clears up the global state after. It\n  caused the tests to fail when other tests in the same run called\n  clear_mappers.\n\n0.4 (2009-01-20)\n----------------\n\nBugs fixed:\n\n* Only raise errors in tpc_abort if we have committed.\n\n* Remove the session id from the SESSION_STATE just before we de-reference the\n  session (i.e. all work is already successfuly completed). This fixes cases\n  where the transaction commit failed but SESSION_STATE was already cleared.  In\n  those cases, the transaction was wedeged as abort would always error.  This\n  happened on PostgreSQL where invalid SQL was used and the error caught.\n\n* Call session.flush() unconditionally in tpc_begin.\n\n* Change error message on session.commit() to be friendlier to non zope users.\n\nFeature changes:\n\n* Support for bulk update and delete with SQLAlchemy 0.5.1\n\n0.3 (2008-07-29)\n----------------\n\nBugs fixed:\n\n* New objects added to a session did not cause a transaction join, so were not\n  committed at the end of the transaction unless the database was accessed.\n  SQLAlchemy 0.4.7 or 0.5beta3 now required.\n\nFeature changes:\n\n* For correctness and consistency with ZODB, renamed the function 'invalidate'\n  to 'mark_changed' and the status 'invalidated' to 'changed'.\n\n0.2 (2008-06-28)\n----------------\n\nFeature changes:\n\n* Updated to support SQLAlchemy 0.5. (0.4.6 is still supported).\n\n0.1 (2008-05-15)\n----------------\n\n* Initial public release.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zopefoundation/zope.sqlalchemy", "keywords": "zope zope3 sqlalchemy", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "zope.sqlalchemy", "package_url": "https://pypi.org/project/zope.sqlalchemy/", "platform": "", "project_url": "https://pypi.org/project/zope.sqlalchemy/", "project_urls": {"Homepage": "https://github.com/zopefoundation/zope.sqlalchemy"}, "release_url": "https://pypi.org/project/zope.sqlalchemy/1.3/", "requires_dist": ["setuptools", "SQLAlchemy (>=0.7)", "transaction (>=1.6.0)", "zope.interface (>=3.6.0)", "zope.testing ; extra == 'test'"], "requires_python": "", "summary": "Minimal Zope/SQLAlchemy transaction integration", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<ul>\n<li><a href=\"#introduction\" id=\"id29\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#running-the-tests\" id=\"id30\" rel=\"nofollow\">Running the tests</a></li>\n<li><a href=\"#usage-in-short\" id=\"id31\" rel=\"nofollow\">Usage in short</a></li>\n<li><a href=\"#full-example\" id=\"id32\" rel=\"nofollow\">Full Example</a><ul>\n<li><a href=\"#long-lasting-session-scopes\" id=\"id33\" rel=\"nofollow\">Long-lasting session scopes</a></li>\n</ul>\n</li>\n<li><a href=\"#development-version\" id=\"id34\" rel=\"nofollow\">Development version</a></li>\n<li><a href=\"#changes\" id=\"id35\" rel=\"nofollow\">Changes</a><ul>\n<li><a href=\"#id1\" id=\"id36\" rel=\"nofollow\">1.3 (2020-02-17)</a></li>\n<li><a href=\"#id3\" id=\"id37\" rel=\"nofollow\">1.2 (2019-10-17)</a></li>\n<li><a href=\"#id5\" id=\"id38\" rel=\"nofollow\">1.1 (2019-01-03)</a></li>\n<li><a href=\"#id6\" id=\"id39\" rel=\"nofollow\">1.0 (2018-01-31)</a></li>\n<li><a href=\"#id8\" id=\"id40\" rel=\"nofollow\">0.7.7 (2016-06-23)</a></li>\n<li><a href=\"#id10\" id=\"id41\" rel=\"nofollow\">0.7.6 (2015-03-20)</a></li>\n<li><a href=\"#id11\" id=\"id42\" rel=\"nofollow\">0.7.5 (2014-06-17)</a></li>\n<li><a href=\"#id13\" id=\"id43\" rel=\"nofollow\">0.7.4 (2014-01-06)</a></li>\n<li><a href=\"#id17\" id=\"id44\" rel=\"nofollow\">0.7.3 (2013-09-25)</a></li>\n<li><a href=\"#id19\" id=\"id45\" rel=\"nofollow\">0.7.2 (2013-02-19)</a></li>\n<li><a href=\"#id20\" id=\"id46\" rel=\"nofollow\">0.7.1 (2012-05-19)</a></li>\n<li><a href=\"#id21\" id=\"id47\" rel=\"nofollow\">0.7 (2011-12-06)</a></li>\n<li><a href=\"#id22\" id=\"id48\" rel=\"nofollow\">0.6.1 (2011-01-08)</a></li>\n<li><a href=\"#id23\" id=\"id49\" rel=\"nofollow\">0.6 (2010-07-24)</a></li>\n<li><a href=\"#id24\" id=\"id50\" rel=\"nofollow\">0.5 (2010-06-07)</a></li>\n<li><a href=\"#id25\" id=\"id51\" rel=\"nofollow\">0.4 (2009-01-20)</a></li>\n<li><a href=\"#id26\" id=\"id52\" rel=\"nofollow\">0.3 (2008-07-29)</a></li>\n<li><a href=\"#id27\" id=\"id53\" rel=\"nofollow\">0.2 (2008-06-28)</a></li>\n<li><a href=\"#id28\" id=\"id54\" rel=\"nofollow\">0.1 (2008-05-15)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id29\" rel=\"nofollow\">Introduction</a></h2>\n<p>The aim of this package is to unify the plethora of existing packages\nintegrating SQLAlchemy with Zope\u2019s transaction management. As such it seeks\nonly to provide a data manager and makes no attempt to define a <cite>zopeish</cite> way\nto configure engines.</p>\n<p>For WSGI applications, Zope style automatic transaction management is\navailable with <a href=\"http://docs.repoze.org/tm2/\" rel=\"nofollow\">repoze.tm2</a> (used by <a href=\"http://turbogears.org/\" rel=\"nofollow\">Turbogears 2</a> and other systems).</p>\n<p>This package is also used by <a href=\"https://docs.pylonsproject.org/projects/pyramid_tm/dev/\" rel=\"nofollow\">pyramid_tm</a> (an add-on of the <a href=\"http://pylonsproject.org/\" rel=\"nofollow\">Pyramid</a>) web\nframework.</p>\n<p>You need to understand <a href=\"http://sqlalchemy.org/docs/\" rel=\"nofollow\">SQLAlchemy</a> and the <a href=\"http://www.zodb.org/en/latest/#transactions\" rel=\"nofollow\">Zope transaction manager</a> for\nthis package and this README to make any sense.</p>\n</div>\n<div id=\"running-the-tests\">\n<h2><a href=\"#id30\" rel=\"nofollow\">Running the tests</a></h2>\n<p>This package is distributed as a buildout. Using your desired python run:</p>\n<p>$ python bootstrap.py\n$ ./bin/buildout</p>\n<p>This will download the dependent packages and setup the test script, which may\nbe run with:</p>\n<p>$ ./bin/test</p>\n<p>or with the standard setuptools test command:</p>\n<p>$ ./bin/py setup.py test</p>\n<p>To enable testing with your own database set the TEST_DSN environment variable\nto your sqlalchemy database dsn. Two-phase commit behaviour may be tested by\nsetting the TEST_TWOPHASE variable to a non empty string. e.g:</p>\n<p>$ TEST_DSN=postgres://test:test@localhost/test TEST_TWOPHASE=True bin/test</p>\n</div>\n<div id=\"usage-in-short\">\n<h2><a href=\"#id31\" rel=\"nofollow\">Usage in short</a></h2>\n<p>The integration between Zope transactions and the SQLAlchemy event system is\ndone using the <tt>register()</tt> function on the session factory class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zope.sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.orm</span> <span class=\"kn\">import</span> <span class=\"n\">sessionmaker</span><span class=\"p\">,</span> <span class=\"n\">scoped_session</span>\n\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"s2\">\"postgresql://scott:tiger@localhost/test\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">DBSession</span> <span class=\"o\">=</span> <span class=\"n\">scoped_session</span><span class=\"p\">(</span><span class=\"n\">sessionmaker</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"n\">engine</span><span class=\"p\">))</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">DBSession</span><span class=\"p\">)</span>\n</pre>\n<p>Instantiated sessions commits and rollbacks will now be integrated with Zope\ntransactions.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">transaction</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">DBSession</span><span class=\"p\">()</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"DELETE FROM objects WHERE id=:id\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">()</span>\n\n<span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"full-example\">\n<h2><a href=\"#id32\" rel=\"nofollow\">Full Example</a></h2>\n<p>This example is lifted directly from the SQLAlchemy declarative documentation.\nFirst the necessary imports.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from sqlalchemy import *\n&gt;&gt;&gt; from sqlalchemy.ext.declarative import declarative_base\n&gt;&gt;&gt; from sqlalchemy.orm import scoped_session, sessionmaker, relation\n&gt;&gt;&gt; from zope.sqlalchemy import register\n&gt;&gt;&gt; import transaction\n</pre>\n</blockquote>\n<p>Now to define the mapper classes.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Base = declarative_base()\n&gt;&gt;&gt; class User(Base):\n...     __tablename__ = 'test_users'\n...     id = Column('id', Integer, primary_key=True)\n...     name = Column('name', String(50))\n...     addresses = relation(\"Address\", backref=\"user\")\n&gt;&gt;&gt; class Address(Base):\n...     __tablename__ = 'test_addresses'\n...     id = Column('id', Integer, primary_key=True)\n...     email = Column('email', String(50))\n...     user_id = Column('user_id', Integer, ForeignKey('test_users.id'))\n</pre>\n</blockquote>\n<p>Create an engine and setup the tables. Note that for this example to work a\nrecent version of sqlite/pysqlite is required. 3.4.0 seems to be sufficient.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; engine = create_engine(TEST_DSN)\n&gt;&gt;&gt; Base.metadata.create_all(engine)\n</pre>\n</blockquote>\n<p>Now to create the session itself. As zope is a threaded web server we must use\nscoped sessions. Zope and SQLAlchemy sessions are tied together by using the\nregister</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Session = scoped_session(sessionmaker(bind=engine,\n... twophase=TEST_TWOPHASE))\n</pre>\n</blockquote>\n<p>Call the scoped session factory to retrieve a session. You may call this as\nmany times as you like within a transaction and you will always retrieve the\nsame session. At present there are no users in the database.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; register(session)\n&lt;zope.sqlalchemy.datamanager.ZopeTransactionEvents object at ...&gt;\n&gt;&gt;&gt; session.query(User).all()\n[]\n</pre>\n</blockquote>\n<p>We can now create a new user and commit the changes using Zope\u2019s transaction\nmachinery, just as Zope\u2019s publisher would.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; session.add(User(id=1, name='bob'))\n&gt;&gt;&gt; transaction.commit()\n</pre>\n</blockquote>\n<p>Engine level connections are outside the scope of the transaction integration.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; engine.connect().execute('SELECT * FROM test_users').fetchall()\n[(1, ...'bob')]\n</pre>\n</blockquote>\n<p>A new transaction requires a new session. Let\u2019s add an address.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; bob = session.query(User).all()[0]\n&gt;&gt;&gt; str(bob.name)\n'bob'\n&gt;&gt;&gt; bob.addresses\n[]\n&gt;&gt;&gt; bob.addresses.append(Address(id=1, email='bob@bob.bob'))\n&gt;&gt;&gt; transaction.commit()\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; bob = session.query(User).all()[0]\n&gt;&gt;&gt; bob.addresses\n[&lt;Address object at ...&gt;]\n&gt;&gt;&gt; str(bob.addresses[0].email)\n'bob@bob.bob'\n&gt;&gt;&gt; bob.addresses[0].email = 'wrong@wrong'\n</pre>\n</blockquote>\n<p>To rollback a transaction, use transaction.abort().</p>\n<blockquote>\n<pre>&gt;&gt;&gt; transaction.abort()\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; bob = session.query(User).all()[0]\n&gt;&gt;&gt; str(bob.addresses[0].email)\n'bob@bob.bob'\n&gt;&gt;&gt; transaction.abort()\n</pre>\n</blockquote>\n<p>By default, zope.sqlalchemy puts sessions in an \u2018active\u2019 state when they are\nfirst used. ORM write operations automatically move the session into a\n\u2018changed\u2019 state. This avoids unnecessary database commits. Sometimes it\nis necessary to interact with the database directly through SQL. It is not\npossible to guess whether such an operation is a read or a write. Therefore we\nmust manually mark the session as changed when manual SQL statements write\nto the DB.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; conn = session.connection()\n&gt;&gt;&gt; users = Base.metadata.tables['test_users']\n&gt;&gt;&gt; conn.execute(users.update(users.c.name=='bob'), name='ben')\n&lt;sqlalchemy.engine...ResultProxy object at ...&gt;\n&gt;&gt;&gt; from zope.sqlalchemy import mark_changed\n&gt;&gt;&gt; mark_changed(session)\n&gt;&gt;&gt; transaction.commit()\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; str(session.query(User).all()[0].name)\n'ben'\n&gt;&gt;&gt; transaction.abort()\n</pre>\n</blockquote>\n<p>If this is a problem you may register the events and tell them to place the\nsession in the \u2018changed\u2019 state initially.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Session.remove()\n&gt;&gt;&gt; register(Session, 'changed')\n&lt;zope.sqlalchemy.datamanager.ZopeTransactionEvents object at ...&gt;\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; conn = session.connection()\n&gt;&gt;&gt; conn.execute(users.update(users.c.name=='ben'), name='bob')\n&lt;sqlalchemy.engine...ResultProxy object at ...&gt;\n&gt;&gt;&gt; transaction.commit()\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; str(session.query(User).all()[0].name)\n'bob'\n&gt;&gt;&gt; transaction.abort()\n</pre>\n</blockquote>\n<div id=\"long-lasting-session-scopes\">\n<h3><a href=\"#id33\" rel=\"nofollow\">Long-lasting session scopes</a></h3>\n<p>The default behaviour of the transaction integration is to close the session\nafter a commit. You can tell by trying to access an object after committing:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; bob = session.query(User).all()[0]\n&gt;&gt;&gt; transaction.commit()\n&gt;&gt;&gt; bob.name\nTraceback (most recent call last):\nDetachedInstanceError: Instance &lt;User at ...&gt; is not bound to a Session; attribute refresh operation cannot proceed...\n</pre>\n</blockquote>\n<p>To support cases where a session needs to last longer than a transaction (useful\nin test suites) you can specify to keep a session when registering the events:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Session = scoped_session(sessionmaker(bind=engine,\n... twophase=TEST_TWOPHASE))\n&gt;&gt;&gt; register(Session, keep_session=True)\n&lt;zope.sqlalchemy.datamanager.ZopeTransactionEvents object at ...&gt;\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; bob = session.query(User).all()[0]\n&gt;&gt;&gt; bob.name = 'bobby'\n&gt;&gt;&gt; transaction.commit()\n&gt;&gt;&gt; bob.name\nu'bobby'\n</pre>\n</blockquote>\n<p>The session must then be closed manually:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; session.close()\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"development-version\">\n<h2><a href=\"#id34\" rel=\"nofollow\">Development version</a></h2>\n<p><a href=\"https://github.com/zopefoundation/zope.sqlalchemy\" rel=\"nofollow\">GIT version</a></p>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id35\" rel=\"nofollow\">Changes</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id36\" rel=\"nofollow\">1.3 (2020-02-17)</a></h3>\n<ul>\n<li><tt>.datamanager.register()</tt> now returns the <tt>ZopeTransactionEvents</tt>\ninstance which was used to register the events. This allows to change its\nparameters afterwards.\n(<a href=\"https://github.com/zopefoundation/zope.sqlalchemy/pull/40\" rel=\"nofollow\">#40</a>)</li>\n<li>Add preliminary support for Python 3.9a3.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id37\" rel=\"nofollow\">1.2 (2019-10-17)</a></h3>\n<p><strong>Breaking Changes</strong></p>\n<ul>\n<li><p>Drop support for Python 3.4.</p>\n</li>\n<li><p>Add support for Python 3.7 and 3.8.</p>\n</li>\n<li><p>Fix deprecation warnings for the event system. We already used it in general\nbut still leveraged the old extension mechanism in some places.\n(<a href=\"https://github.com/zopefoundation/zope.sqlalchemy/issues/31\" rel=\"nofollow\">#31</a>)</p>\n<p>To make things clearer we renamed the <tt>ZopeTransactionExtension</tt> class\nto <tt>ZopeTransactionEvents</tt>. Existing code using the \u2018register\u2019 version\nstays compatible.</p>\n</li>\n</ul>\n<p><strong>Upgrade from 1.1</strong></p>\n<p>Your old code like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zope.sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">ZopeTransactionExtension</span>\n\n<span class=\"n\">DBSession</span> <span class=\"o\">=</span> <span class=\"n\">scoped_session</span><span class=\"p\">(</span><span class=\"n\">sessionmaker</span><span class=\"p\">(</span><span class=\"n\">extension</span><span class=\"o\">=</span><span class=\"n\">ZopeTransactionExtension</span><span class=\"p\">(),</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">))</span>\n</pre>\n<p>becomes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zope.sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span>\n\n<span class=\"n\">DBSession</span> <span class=\"o\">=</span> <span class=\"n\">scoped_session</span><span class=\"p\">(</span><span class=\"n\">sessionmaker</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">))</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">DBSession</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id38\" rel=\"nofollow\">1.1 (2019-01-03)</a></h3>\n<ul>\n<li>Add support to MySQL using pymysql.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id39\" rel=\"nofollow\">1.0 (2018-01-31)</a></h3>\n<ul>\n<li>Add support for Python 3.4 up to 3.6.</li>\n<li>Support SQLAlchemy 1.2.</li>\n<li>Drop support for Python 2.6, 3.2 and 3.3.</li>\n<li>Drop support for transaction &lt; 1.6.0.</li>\n<li>Fix hazard that could cause SQLAlchemy session not to be committed when\ntransaction is committed in rare situations.\n(<a href=\"https://github.com/zopefoundation/zope.sqlalchemy/pull/23\" rel=\"nofollow\">#23</a>)</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id40\" rel=\"nofollow\">0.7.7 (2016-06-23)</a></h3>\n<ul>\n<li>Support SQLAlchemy 1.1.\n(<a href=\"https://github.com/zopefoundation/zope.sqlalchemy/issues/15\" rel=\"nofollow\">#15</a>)</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id41\" rel=\"nofollow\">0.7.6 (2015-03-20)</a></h3>\n<ul>\n<li>Make version check in register compatible with prereleases.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id42\" rel=\"nofollow\">0.7.5 (2014-06-17)</a></h3>\n<ul>\n<li>Ensure mapped objects are expired following a <tt>transaction.commit()</tt> when\nno database commit was required.\n(<a href=\"https://github.com/zopefoundation/zope.sqlalchemy/issues/8\" rel=\"nofollow\">#8</a>)</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id43\" rel=\"nofollow\">0.7.4 (2014-01-06)</a></h3>\n<ul>\n<li>Allow <tt>session.commit()</tt> on nested transactions to facilitate integration\nof existing code that might not use <tt>transaction.savepoint()</tt>.\n(<a href=\"https://github.com/zopefoundation/zope.sqlalchemy/issues/1\" rel=\"nofollow\">#1</a>)</li>\n<li>Add a new function zope.sqlalchemy.register(), which replaces the\ndirect use of ZopeTransactionExtension to make use\nof the newer SQLAlchemy event system to establish instrumentation on\nthe given Session instance/class/factory.   Requires at least\nSQLAlchemy 0.7.\n(<a href=\"https://github.com/zopefoundation/zope.sqlalchemy/issues/4\" rel=\"nofollow\">#4</a>)</li>\n<li>Fix <cite>keep_session=True</cite> doesn\u2019t work when a transaction is joined by flush\nand other manngers bug.\n(<a href=\"https://github.com/zopefoundation/zope.sqlalchemy/issues/5\" rel=\"nofollow\">#5</a>)</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3><a href=\"#id44\" rel=\"nofollow\">0.7.3 (2013-09-25)</a></h3>\n<ul>\n<li>Prevent the <tt>Session</tt> object from getting into a \u201cwedged\u201d state if joining\na transaction fails. With thread scoped sessions that are reused this can cause\npersistent errors requiring a server restart.\n(<a href=\"https://github.com/zopefoundation/zope.sqlalchemy/issues/2\" rel=\"nofollow\">#2</a>)</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3><a href=\"#id45\" rel=\"nofollow\">0.7.2 (2013-02-19)</a></h3>\n<ul>\n<li>Make life-time of sessions configurable. Specify <cite>keep_session=True</cite> when\nsetting up the SA extension.</li>\n<li>Python 3.3 compatibility.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3><a href=\"#id46\" rel=\"nofollow\">0.7.1 (2012-05-19)</a></h3>\n<ul>\n<li>Use <tt>@implementer</tt> as a class decorator instead of <tt>implements()</tt> at\nclass scope for compatibility with <tt>zope.interface</tt> 4.0.  This requires\n<tt>zope.interface</tt> &gt;= 3.6.0.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3><a href=\"#id47\" rel=\"nofollow\">0.7 (2011-12-06)</a></h3>\n<ul>\n<li>Python 3.2 compatibility.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3><a href=\"#id48\" rel=\"nofollow\">0.6.1 (2011-01-08)</a></h3>\n<ul>\n<li>Update datamanager.mark_changed to handle sessions which have not yet logged\na (ORM) query.</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3><a href=\"#id49\" rel=\"nofollow\">0.6 (2010-07-24)</a></h3>\n<ul>\n<li>Implement should_retry for sqlalchemy.orm.exc.ConcurrentModificationError\nand serialization errors from PostgreSQL and Oracle.\n(Specify transaction&gt;=1.1 to use this functionality.)</li>\n<li>Include license files.</li>\n<li>Add <tt>transaction_manager</tt> attribute to data managers for compliance with\nIDataManager interface.</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h3><a href=\"#id50\" rel=\"nofollow\">0.5 (2010-06-07)</a></h3>\n<ul>\n<li>Remove redundant session.flush() / session.clear() on savepoint operations.\nThese were only needed with SQLAlchemy 0.4.x.</li>\n<li>SQLAlchemy 0.6.x support. Require SQLAlchemy &gt;= 0.5.1.</li>\n<li>Add support for running <tt>python setup.py test</tt>.</li>\n<li>Pull in pysqlite explicitly as a test dependency.</li>\n<li>Setup sqlalchemy mappers in test setup and clear them in tear down. This\nmakes the tests more robust and clears up the global state after. It\ncaused the tests to fail when other tests in the same run called\nclear_mappers.</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h3><a href=\"#id51\" rel=\"nofollow\">0.4 (2009-01-20)</a></h3>\n<p>Bugs fixed:</p>\n<ul>\n<li>Only raise errors in tpc_abort if we have committed.</li>\n<li>Remove the session id from the SESSION_STATE just before we de-reference the\nsession (i.e. all work is already successfuly completed). This fixes cases\nwhere the transaction commit failed but SESSION_STATE was already cleared.  In\nthose cases, the transaction was wedeged as abort would always error.  This\nhappened on PostgreSQL where invalid SQL was used and the error caught.</li>\n<li>Call session.flush() unconditionally in tpc_begin.</li>\n<li>Change error message on session.commit() to be friendlier to non zope users.</li>\n</ul>\n<p>Feature changes:</p>\n<ul>\n<li>Support for bulk update and delete with SQLAlchemy 0.5.1</li>\n</ul>\n</div>\n<div id=\"id26\">\n<h3><a href=\"#id52\" rel=\"nofollow\">0.3 (2008-07-29)</a></h3>\n<p>Bugs fixed:</p>\n<ul>\n<li>New objects added to a session did not cause a transaction join, so were not\ncommitted at the end of the transaction unless the database was accessed.\nSQLAlchemy 0.4.7 or 0.5beta3 now required.</li>\n</ul>\n<p>Feature changes:</p>\n<ul>\n<li>For correctness and consistency with ZODB, renamed the function \u2018invalidate\u2019\nto \u2018mark_changed\u2019 and the status \u2018invalidated\u2019 to \u2018changed\u2019.</li>\n</ul>\n</div>\n<div id=\"id27\">\n<h3><a href=\"#id53\" rel=\"nofollow\">0.2 (2008-06-28)</a></h3>\n<p>Feature changes:</p>\n<ul>\n<li>Updated to support SQLAlchemy 0.5. (0.4.6 is still supported).</li>\n</ul>\n</div>\n<div id=\"id28\">\n<h3><a href=\"#id54\" rel=\"nofollow\">0.1 (2008-05-15)</a></h3>\n<ul>\n<li>Initial public release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6646184, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "365f8072798b3ce6f647b195e04f1b87", "sha256": "5ba801199deb91f12abe2b4a7f87e0a1d9710c1e5c37e7be36dd241b8f7c218c"}, "downloads": -1, "filename": "zope.sqlalchemy-0.1-py2.4.egg", "has_sig": false, "md5_digest": "365f8072798b3ce6f647b195e04f1b87", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 21453, "upload_time": "2008-05-15T12:54:51", "upload_time_iso_8601": "2008-05-15T12:54:51Z", "url": "https://files.pythonhosted.org/packages/cc/03/4441849bfaa31a9910f5f3a61a50d680598f1be329b160b7d78f5cfe55b8/zope.sqlalchemy-0.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa6a82602dc5f6cef1d5cb492eb764ca", "sha256": "5fcb160b7009bddeaad02dda090d4d11db53fdb790de2cc0fa1e0c9b2e34f0b2"}, "downloads": -1, "filename": "zope.sqlalchemy-0.1-py2.5.egg", "has_sig": false, "md5_digest": "fa6a82602dc5f6cef1d5cb492eb764ca", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 21284, "upload_time": "2008-05-15T12:54:41", "upload_time_iso_8601": "2008-05-15T12:54:41Z", "url": "https://files.pythonhosted.org/packages/ce/2c/9a8cdcf62a2873a5ffe62727a1c76a4e1ef053426adb45869f527c9d90d3/zope.sqlalchemy-0.1-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "417b56b931139e69ae084659674c6b9d", "sha256": "1098f49ab8a5aab453f252984eb492519fa1f595244f1a29d5d70cadffedac5c"}, "downloads": -1, "filename": "zope.sqlalchemy-0.1.tar.gz", "has_sig": false, "md5_digest": "417b56b931139e69ae084659674c6b9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10319, "upload_time": "2008-05-15T12:54:40", "upload_time_iso_8601": "2008-05-15T12:54:40Z", "url": "https://files.pythonhosted.org/packages/f4/c0/2d9b30581da2f21043ee4a76074901eec3831cfb300b1e3d9b3ccc23318c/zope.sqlalchemy-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "c60d018714e5bc64cb8ed140a5df90e8", "sha256": "6b2102e281e7c0c81bc7f4e670cf11ce2e32c9dcf00c2d9668741dbd7d74a5bd"}, "downloads": -1, "filename": "zope.sqlalchemy-0.2.tar.gz", "has_sig": false, "md5_digest": "c60d018714e5bc64cb8ed140a5df90e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11357, "upload_time": "2008-06-28T14:36:34", "upload_time_iso_8601": "2008-06-28T14:36:34Z", "url": "https://files.pythonhosted.org/packages/44/f3/8eb8761bcf2552db5b415d822180141fb8aa25f2d0a4d204f695458e7111/zope.sqlalchemy-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "3edc2b0f02e778483de64b60ff214df9", "sha256": "b994d783ef03e36afcbc98ab4cc4939f4b6555fd47a3b5860de9637537c700ea"}, "downloads": -1, "filename": "zope.sqlalchemy-0.3.tar.gz", "has_sig": false, "md5_digest": "3edc2b0f02e778483de64b60ff214df9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12622, "upload_time": "2008-07-29T09:46:11", "upload_time_iso_8601": "2008-07-29T09:46:11Z", "url": "https://files.pythonhosted.org/packages/45/2c/38b9663192bf7625ce53ac604f9df313d49f07587b0c7b03f0f2f782c1bc/zope.sqlalchemy-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "245885dc0923fa36216386867cf450ae", "sha256": "96fa5dd6e262f52904ee8431bf9d57c27f3dc63581a02d233f2ae4cda202ed1d"}, "downloads": -1, "filename": "zope.sqlalchemy-0.4.tar.gz", "has_sig": false, "md5_digest": "245885dc0923fa36216386867cf450ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13136, "upload_time": "2009-01-21T10:55:17", "upload_time_iso_8601": "2009-01-21T10:55:17Z", "url": "https://files.pythonhosted.org/packages/83/b9/538d3c753829ad354a8b4f964279a166045ed933a0ca33366941ed77ea6a/zope.sqlalchemy-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "76e048e7854c4fef38d222124f1c8de6", "sha256": "48d31b536cb496f48fc69ed73eb9cff7529d35e67d70e444d7df6cf6942c95df"}, "downloads": -1, "filename": "zope.sqlalchemy-0.5.tar.gz", "has_sig": false, "md5_digest": "76e048e7854c4fef38d222124f1c8de6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12810, "upload_time": "2010-06-07T18:04:17", "upload_time_iso_8601": "2010-06-07T18:04:17.632306Z", "url": "https://files.pythonhosted.org/packages/6e/3b/ea873de36a64e7a7651eabc4e8623033237dd485f18a5fa96ebf90b6abe6/zope.sqlalchemy-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "5c0527e00b4b3a7843c25cf5bc52237f", "sha256": "c2f75ede919c179ffb88ee71a98540fa0c762b147c23161dd51369afe139c0a0"}, "downloads": -1, "filename": "zope.sqlalchemy-0.6.tar.gz", "has_sig": false, "md5_digest": "5c0527e00b4b3a7843c25cf5bc52237f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14997, "upload_time": "2010-07-24T18:28:37", "upload_time_iso_8601": "2010-07-24T18:28:37.458806Z", "url": "https://files.pythonhosted.org/packages/1d/b5/50014eb8f838c0c913d02dc1c4267b67d80d26fd77f5d972ce39679c6fe4/zope.sqlalchemy-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "581205d24a7c87d1e8fa627a32a49bad", "sha256": "2682d47bf628689c3fd29494b9a66567013e9b71577022498250fef99a9b5900"}, "downloads": -1, "filename": "zope.sqlalchemy-0.6.1.tar.gz", "has_sig": false, "md5_digest": "581205d24a7c87d1e8fa627a32a49bad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15254, "upload_time": "2011-01-08T18:11:11", "upload_time_iso_8601": "2011-01-08T18:11:11.425331Z", "url": "https://files.pythonhosted.org/packages/7a/62/e12a62e6e1e6453f638314ea70c154ae83914d0030746591d7acd21b41cf/zope.sqlalchemy-0.6.1.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "dcfed33a03ea009501f4505802ab8d01", "sha256": "893f8a1bc2f4f74f8dce33ba93eb361f067244bff93b16419d4d9df35e248d83"}, "downloads": -1, "filename": "zope.sqlalchemy-0.7.tar.gz", "has_sig": false, "md5_digest": "dcfed33a03ea009501f4505802ab8d01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20882, "upload_time": "2011-12-06T21:19:50", "upload_time_iso_8601": "2011-12-06T21:19:50.403470Z", "url": "https://files.pythonhosted.org/packages/3d/58/5cf008ed435add33c4dfd64d24448b089a5a3885ee124ffec695338aacff/zope.sqlalchemy-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "6b36c571b6966189c9428007cbc024e3", "sha256": "0d7a6da803f468d489dd532d575e14861377809dbc8be58cac6376f0320dfa51"}, "downloads": -1, "filename": "zope.sqlalchemy-0.7.1.tar.gz", "has_sig": false, "md5_digest": "6b36c571b6966189c9428007cbc024e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21448, "upload_time": "2012-05-19T14:55:13", "upload_time_iso_8601": "2012-05-19T14:55:13.507449Z", "url": "https://files.pythonhosted.org/packages/57/56/afcc016e57a558b185085f4e4b434c1c40fd7d1db26c47162318dca1b718/zope.sqlalchemy-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "b654e5d144ed141e13b42591a21a4868", "sha256": "6fd08af2158a9fae7c2d4e1d389c49f2c747f0a1dd80a15eaab207702494eceb"}, "downloads": -1, "filename": "zope.sqlalchemy-0.7.2.zip", "has_sig": false, "md5_digest": "b654e5d144ed141e13b42591a21a4868", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30742, "upload_time": "2013-02-19T23:18:09", "upload_time_iso_8601": "2013-02-19T23:18:09.170959Z", "url": "https://files.pythonhosted.org/packages/92/31/86a1d37ed2fbe749ded8aafe0ae928c2777940ae06a5240e6d0af8b66da9/zope.sqlalchemy-0.7.2.zip", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "8b317b41244fc2e67f2f286890ba59a0", "sha256": "3878ad6b7ef236e2ab2b6a8c0300ab9ca704b2a1f28f2d2c6accda73e996d7b6"}, "downloads": -1, "filename": "zope.sqlalchemy-0.7.3.zip", "has_sig": false, "md5_digest": "8b317b41244fc2e67f2f286890ba59a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33877, "upload_time": "2013-09-25T20:40:05", "upload_time_iso_8601": "2013-09-25T20:40:05.300329Z", "url": "https://files.pythonhosted.org/packages/d8/ca/33be5640a71fcce873564679967556ccb8e8c55c08a6aa51863c48033325/zope.sqlalchemy-0.7.3.zip", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "87758437ec5584a14ed801233b2f348f", "sha256": "79a22a53d24a8a10a22b0f5c448ce97dd3c94d74bdaf540ebcd67b449567c51d"}, "downloads": -1, "filename": "zope.sqlalchemy-0.7.4.zip", "has_sig": false, "md5_digest": "87758437ec5584a14ed801233b2f348f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34663, "upload_time": "2014-01-06T23:31:23", "upload_time_iso_8601": "2014-01-06T23:31:23.531951Z", "url": "https://files.pythonhosted.org/packages/3f/e3/d15799624305564d231a1c5f7d4a7e53437776d29f33468739cfa2864e59/zope.sqlalchemy-0.7.4.zip", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "0a468bd5b8884cd29fb71acbf7eaa31e", "sha256": "e196d1b2cf796f46e2c6127717e359ddd35d8d084a8ba059f0f0fabff245b9e1"}, "downloads": -1, "filename": "zope.sqlalchemy-0.7.5.zip", "has_sig": false, "md5_digest": "0a468bd5b8884cd29fb71acbf7eaa31e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35011, "upload_time": "2014-06-18T01:04:43", "upload_time_iso_8601": "2014-06-18T01:04:43.090801Z", "url": "https://files.pythonhosted.org/packages/da/57/e8554eb4bde5d5670d563bfa041f8f33881486541776253f6c9803a58451/zope.sqlalchemy-0.7.5.zip", "yanked": false}], "0.7.6": [{"comment_text": "", "digests": {"md5": "0f5bf14679951e59007e090b6922688c", "sha256": "52412116ff7c569219dd53ef4eadce9f0ad3e16195aaac867955c3f877bbb06f"}, "downloads": -1, "filename": "zope.sqlalchemy-0.7.6.zip", "has_sig": false, "md5_digest": "0f5bf14679951e59007e090b6922688c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35265, "upload_time": "2015-03-20T18:59:13", "upload_time_iso_8601": "2015-03-20T18:59:13.051731Z", "url": "https://files.pythonhosted.org/packages/d0/e0/5df0d7f9f1955e2e2edecbb1367cf1fa76bc2f84d700661ffd4161c7e2e9/zope.sqlalchemy-0.7.6.zip", "yanked": false}], "0.7.7": [{"comment_text": "", "digests": {"md5": "4e09a383d1e3585fde5c293892a5e0d2", "sha256": "5da8ff6b060f3a47fc0cbc61cfd6a83b959b5e730f95e492edcf7b9bf3ec987a"}, "downloads": -1, "filename": "zope.sqlalchemy-0.7.7.tar.gz", "has_sig": false, "md5_digest": "4e09a383d1e3585fde5c293892a5e0d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24579, "upload_time": "2016-06-23T05:11:44", "upload_time_iso_8601": "2016-06-23T05:11:44.071231Z", "url": "https://files.pythonhosted.org/packages/14/95/47ef5f5fbf5f18dc95d6d39b7dbd690818b541afa724d14ed176e415b134/zope.sqlalchemy-0.7.7.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "77914906236c0f84b4817606780bd44e", "sha256": "9316a1a8bb9e4f9f59332acf1ad2cc8b664f19a4bde5f68be7f61f3e11f80514"}, "downloads": -1, "filename": "zope.sqlalchemy-1.0.tar.gz", "has_sig": false, "md5_digest": "77914906236c0f84b4817606780bd44e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23489, "upload_time": "2018-01-31T09:07:34", "upload_time_iso_8601": "2018-01-31T09:07:34.773336Z", "url": "https://files.pythonhosted.org/packages/75/13/b88b597ef6027b5480f68e022206e4b3ee2310a59bbc85bd3e9eca9566b6/zope.sqlalchemy-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "1f52224a0fb8cbe8f6c6b4ff5bd37bc6", "sha256": "454f71aa475d47ec4c9ed712eb0c31e90952f24dd690f4a0a41d87d6182fe0a2"}, "downloads": -1, "filename": "zope.sqlalchemy-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1f52224a0fb8cbe8f6c6b4ff5bd37bc6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21027, "upload_time": "2019-01-03T14:19:37", "upload_time_iso_8601": "2019-01-03T14:19:37.886826Z", "url": "https://files.pythonhosted.org/packages/7a/a4/ea51b2bef85ee95b54ce84b15124aad061eb35e820f72b11e5e180dea8ca/zope.sqlalchemy-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1026a6a68602ad39fefb705e7dd958e1", "sha256": "81554c5b03fbf924c4144ef835b7900271fbd85cfe81cb6bd95e3ab7aa85189f"}, "downloads": -1, "filename": "zope.sqlalchemy-1.1.tar.gz", "has_sig": false, "md5_digest": "1026a6a68602ad39fefb705e7dd958e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24693, "upload_time": "2019-01-03T14:19:39", "upload_time_iso_8601": "2019-01-03T14:19:39.595978Z", "url": "https://files.pythonhosted.org/packages/b8/4f/4a372512cd37885c572dc7d36d3befe8adecb07e451d1f03723b29c947f2/zope.sqlalchemy-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "1eaabd80a7584901e9986398828b2a4d", "sha256": "882cb812f39a703252f3748e02fcd27a338330763589c8d8bbc4d18d09fb185d"}, "downloads": -1, "filename": "zope.sqlalchemy-1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1eaabd80a7584901e9986398828b2a4d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20761, "upload_time": "2019-10-17T06:12:31", "upload_time_iso_8601": "2019-10-17T06:12:31.962782Z", "url": "https://files.pythonhosted.org/packages/a1/43/b82d9b45a9c990ddadc554ec609442e2857f6347b6f819dc628b0748dbb5/zope.sqlalchemy-1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a6821be3a4797848ac25ec72ea6769b", "sha256": "069eaad5a15f187603f368a10e0e6b0d485663498c2fe2f8ac7e93f810326eeb"}, "downloads": -1, "filename": "zope.sqlalchemy-1.2.tar.gz", "has_sig": false, "md5_digest": "7a6821be3a4797848ac25ec72ea6769b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26657, "upload_time": "2019-10-17T06:12:33", "upload_time_iso_8601": "2019-10-17T06:12:33.971059Z", "url": "https://files.pythonhosted.org/packages/bd/f7/01e671797b619002b90a12faee782328ee60768884c717215ec3153a7228/zope.sqlalchemy-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "0e6c721cee56d13e535135acac7a11ac", "sha256": "607d65c7974b2aa586f0608ca740b03ddb582ad84ceb3545b55ad5a402fd6dff"}, "downloads": -1, "filename": "zope.sqlalchemy-1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e6c721cee56d13e535135acac7a11ac", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21565, "upload_time": "2020-02-17T14:01:45", "upload_time_iso_8601": "2020-02-17T14:01:45.043779Z", "url": "https://files.pythonhosted.org/packages/fa/83/459decec1dd2c14d60f9a360fff989c128abe545a1554a1da64b054a55d4/zope.sqlalchemy-1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62194d82d9ec63a1ad85d7e95e4a74c3", "sha256": "b9c689d39d83856b5a81ac45dbd3317762bf6a2b576c5dd13aaa2c56e0168154"}, "downloads": -1, "filename": "zope.sqlalchemy-1.3.tar.gz", "has_sig": false, "md5_digest": "62194d82d9ec63a1ad85d7e95e4a74c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24256, "upload_time": "2020-02-17T14:01:46", "upload_time_iso_8601": "2020-02-17T14:01:46.562779Z", "url": "https://files.pythonhosted.org/packages/ba/1d/4ddb68ab3661c330b41a2b24f9c806b51e9f66cac5382c608f476bd5403b/zope.sqlalchemy-1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e6c721cee56d13e535135acac7a11ac", "sha256": "607d65c7974b2aa586f0608ca740b03ddb582ad84ceb3545b55ad5a402fd6dff"}, "downloads": -1, "filename": "zope.sqlalchemy-1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e6c721cee56d13e535135acac7a11ac", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21565, "upload_time": "2020-02-17T14:01:45", "upload_time_iso_8601": "2020-02-17T14:01:45.043779Z", "url": "https://files.pythonhosted.org/packages/fa/83/459decec1dd2c14d60f9a360fff989c128abe545a1554a1da64b054a55d4/zope.sqlalchemy-1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62194d82d9ec63a1ad85d7e95e4a74c3", "sha256": "b9c689d39d83856b5a81ac45dbd3317762bf6a2b576c5dd13aaa2c56e0168154"}, "downloads": -1, "filename": "zope.sqlalchemy-1.3.tar.gz", "has_sig": false, "md5_digest": "62194d82d9ec63a1ad85d7e95e4a74c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24256, "upload_time": "2020-02-17T14:01:46", "upload_time_iso_8601": "2020-02-17T14:01:46.562779Z", "url": "https://files.pythonhosted.org/packages/ba/1d/4ddb68ab3661c330b41a2b24f9c806b51e9f66cac5382c608f476bd5403b/zope.sqlalchemy-1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:12 2020"}