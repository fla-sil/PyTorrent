{"info": {"author": "Philippe PRADOS", "author_email": "github@prados.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "# README\n\n## Motivation\nSynchronize a CSV database and PNG/JPEG files to add #hashtag in image description.\nThen, you can synchronize all files with Google drive and search image with *tags*.\n\n## Synopsis\nGoogle drive use only the description meta-data to index an image.\nAfter this synchronisation it's possible to search an image with\n\"`type:image a_hashtag`\".\n```\ntype:image apple\n```\n\nThis tool use [Exiftool](https://github.com/exiftool/exiftool)\n```shell\n$ sudo apt-get install exiftool        # Debian\n$ sudo brew install exiftool           # Mac\n$ sudo yum install perl-Image-ExifTool # CentOS\n...\n...\n```\n\nYou can update the tags inside the description in your CSV file,\nor use some others tools like [XnView](https://www.xnview.com/fr/)\nand extract tags to CSV and descriptions.\n\nBy default, this tool merge the tags from CSV and files.\n\n```shell\n$ # Merge tags from descriptions.csv and selected files, and save all tags in tags.txt\n$ tag_images_for_google_drive -v --db descriptions.csv '**/*.png' '**/*.jpg' \\\n--tagfile tags.txt\n```\n\nBut it's possible to apply tags from database or files only\n```shell\n$ tag_images_for_google_drive -v --from-db   --db descriptions.csv '**/*.png' '**/*.jpg'\n$ tag_images_for_google_drive -v --from-file --db descriptions.csv '**/*.png' '**/*.jpg'\n```\n\nTo add a specific tag for all images in a directory, add it in command line.\n```shell\n$ tag_images_for_google_drive -v --db descriptions.csv -t myimages '**/*.png' '**/*.jpg'\n```\nThe, you can filter theses specifics images with `type:image myimages ...`.\n\nFor more informations\n```shell\n$ tag_images_for_google_drive --help\n```\n\nor [read the documention](https://tag-images-for-google-drives.readthedocs.io/en/latest/)\n\nTo synchronize the google files, you can use different tools.\nIn the proposed Docker image, we use the `google-drive-ocamlfuse`.\n\n## The latest version\nClone the git repository (see upper button)\n\n## Installation\nDifferent solutions is possible.\n\n### Installation from one executable\n- Copy the file 'tag_images_for_google_drive.${OS}' to local directory\n- Rename this file to 'tag_images_for_google_drive'\n- And run-it\n```shell\n$ tag_images_for_google_drive --help\n```\n\n### Installation from PIP\n- In virtualenv or conda env, use\n```shell\n$ pip install tag_images_for_google_drive\n```\n\n- Then, run-it\n\n```shell\n$ tag_images_for_google_drive --help\n```\n\n### Installtion in Docker\n- From the source code, use `make Dockerfile`\n- WARNING, this image have the credential for manipulate all yours Google files\n- Eventually, create a dedicated volume for the GDrive cache\n\n```shell\n> docker volume create --name tag_image_for_google_drive\n```\n\n- Create the container with custom parameters\n\n```shell\n$ docker build \\\n-f Dockerfile \\\n--build-arg OS_VERSION=\"latest\" \\\n--build-arg GDRIVE_ROOT_FOLDER=\"/Images\" \\\n--build-arg PARAMS=\"'**/*.png' '**/*.jpg'\" \\\n--build-arg CRON_FREQUENCE=\"* */12 * * *\" \\\n-t \"$(USER)/tag_image_for_google_drive:latest\" .\n```\n\n- Start the container\n\n```shell\n$ docker run --detach --cpus=0.5 \\\n--privileged \\\n-v tag_image_for_google_drive:/cache\n-i \"$(USER)/tag_image_for_google_drive:latest\"\n```\n\nInside the container, a `google-drive-ocamlfuse` is installed to synchronize the google files\nfrom `GDRIVE_ROOT_FOLDER` in the cache, and a crontab is periodically executed (see `CRON_REQUENCE`)\nto invoke `tag_image_for_google_drive` with `PARAMS`.\n\n### Installation from source\nGo inside the directory and\n\n```bash\n$ make configure\n$ conda activate tag_images_for_google_drive\n$ make install\n```\n\n## Tests\nTo test the project\n\n```bash\n$ make test\n```\n\nTo validate the typing\n\n```bash\n$ make typing\n```\n\nTo validate all the project\n\n```bash\n$ make validate\n```\n\n## Project Organization\n    \u251c\u2500\u2500 Makefile              <- Makefile with commands like `make data` or `make train`\n    \u251c\u2500\u2500 README.md             <- The top-level README for developers using this project.\n    \u251c\u2500\u2500 docs                  <- A default Sphinx project; see sphinx-doc.org for details\n    \u251c\u2500\u2500 setup.py              <- makes project pip installable (pip install -e .[tests])\n    \u2502                            so sources can be imported and dependencies installed\n    \u251c\u2500\u2500 tag_images_for_google_drive                <- Source code for use in this project\n    \u2514\u2500\u2500 tests                 <- Unit and integrations tests ((Mark directory as a sources root).\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pprados/tag_images_for_google_drive", "keywords": "image index google drive", "license": "Apache License", "maintainer": "", "maintainer_email": "", "name": "tag-images-for-google-drive", "package_url": "https://pypi.org/project/tag-images-for-google-drive/", "platform": "", "project_url": "https://pypi.org/project/tag-images-for-google-drive/", "project_urls": {"Homepage": "http://github.com/pprados/tag_images_for_google_drive"}, "release_url": "https://pypi.org/project/tag-images-for-google-drive/1.0/", "requires_dist": ["click", "click-pathlib", "pip ; extra == 'dev'", "twine ; extra == 'dev'", "sphinx ; extra == 'dev'", "sphinx-execute-code ; extra == 'dev'", "sphinx-rtd-theme ; extra == 'dev'", "recommonmark ; extra == 'dev'", "nbsphinx ; extra == 'dev'", "flake8 ; extra == 'dev'", "pylint ; extra == 'dev'", "PyInstaller ; extra == 'dev'", "daff ; extra == 'dev'", "mypy ; extra == 'dev'", "pytest (>=2.8.0) ; extra == 'test'", "pytest-openfiles ; extra == 'test'", "pytest-xdist ; extra == 'test'", "pytest-mock ; extra == 'test'", "unittest2 ; extra == 'test'"], "requires_python": "~=3.7", "summary": "Manage tags and description to be indexed by Google Drive", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>README</h1>\n<h2>Motivation</h2>\n<p>Synchronize a CSV database and PNG/JPEG files to add #hashtag in image description.\nThen, you can synchronize all files with Google drive and search image with <em>tags</em>.</p>\n<h2>Synopsis</h2>\n<p>Google drive use only the description meta-data to index an image.\nAfter this synchronisation it's possible to search an image with\n\"<code>type:image a_hashtag</code>\".</p>\n<pre><code>type:image apple\n</code></pre>\n<p>This tool use <a href=\"https://github.com/exiftool/exiftool\" rel=\"nofollow\">Exiftool</a></p>\n<pre>$ sudo apt-get install exiftool        <span class=\"c1\"># Debian</span>\n$ sudo brew install exiftool           <span class=\"c1\"># Mac</span>\n$ sudo yum install perl-Image-ExifTool <span class=\"c1\"># CentOS</span>\n...\n...\n</pre>\n<p>You can update the tags inside the description in your CSV file,\nor use some others tools like <a href=\"https://www.xnview.com/fr/\" rel=\"nofollow\">XnView</a>\nand extract tags to CSV and descriptions.</p>\n<p>By default, this tool merge the tags from CSV and files.</p>\n<pre>$ <span class=\"c1\"># Merge tags from descriptions.csv and selected files, and save all tags in tags.txt</span>\n$ tag_images_for_google_drive -v --db descriptions.csv <span class=\"s1\">'**/*.png'</span> <span class=\"s1\">'**/*.jpg'</span> <span class=\"se\">\\</span>\n--tagfile tags.txt\n</pre>\n<p>But it's possible to apply tags from database or files only</p>\n<pre>$ tag_images_for_google_drive -v --from-db   --db descriptions.csv <span class=\"s1\">'**/*.png'</span> <span class=\"s1\">'**/*.jpg'</span>\n$ tag_images_for_google_drive -v --from-file --db descriptions.csv <span class=\"s1\">'**/*.png'</span> <span class=\"s1\">'**/*.jpg'</span>\n</pre>\n<p>To add a specific tag for all images in a directory, add it in command line.</p>\n<pre>$ tag_images_for_google_drive -v --db descriptions.csv -t myimages <span class=\"s1\">'**/*.png'</span> <span class=\"s1\">'**/*.jpg'</span>\n</pre>\n<p>The, you can filter theses specifics images with <code>type:image myimages ...</code>.</p>\n<p>For more informations</p>\n<pre>$ tag_images_for_google_drive --help\n</pre>\n<p>or <a href=\"https://tag-images-for-google-drives.readthedocs.io/en/latest/\" rel=\"nofollow\">read the documention</a></p>\n<p>To synchronize the google files, you can use different tools.\nIn the proposed Docker image, we use the <code>google-drive-ocamlfuse</code>.</p>\n<h2>The latest version</h2>\n<p>Clone the git repository (see upper button)</p>\n<h2>Installation</h2>\n<p>Different solutions is possible.</p>\n<h3>Installation from one executable</h3>\n<ul>\n<li>Copy the file 'tag_images_for_google_drive.${OS}' to local directory</li>\n<li>Rename this file to 'tag_images_for_google_drive'</li>\n<li>And run-it</li>\n</ul>\n<pre>$ tag_images_for_google_drive --help\n</pre>\n<h3>Installation from PIP</h3>\n<ul>\n<li>In virtualenv or conda env, use</li>\n</ul>\n<pre>$ pip install tag_images_for_google_drive\n</pre>\n<ul>\n<li>Then, run-it</li>\n</ul>\n<pre>$ tag_images_for_google_drive --help\n</pre>\n<h3>Installtion in Docker</h3>\n<ul>\n<li>From the source code, use <code>make Dockerfile</code></li>\n<li>WARNING, this image have the credential for manipulate all yours Google files</li>\n<li>Eventually, create a dedicated volume for the GDrive cache</li>\n</ul>\n<pre>&gt; docker volume create --name tag_image_for_google_drive\n</pre>\n<ul>\n<li>Create the container with custom parameters</li>\n</ul>\n<pre>$ docker build <span class=\"se\">\\</span>\n-f Dockerfile <span class=\"se\">\\</span>\n--build-arg <span class=\"nv\">OS_VERSION</span><span class=\"o\">=</span><span class=\"s2\">\"latest\"</span> <span class=\"se\">\\</span>\n--build-arg <span class=\"nv\">GDRIVE_ROOT_FOLDER</span><span class=\"o\">=</span><span class=\"s2\">\"/Images\"</span> <span class=\"se\">\\</span>\n--build-arg <span class=\"nv\">PARAMS</span><span class=\"o\">=</span><span class=\"s2\">\"'**/*.png' '**/*.jpg'\"</span> <span class=\"se\">\\</span>\n--build-arg <span class=\"nv\">CRON_FREQUENCE</span><span class=\"o\">=</span><span class=\"s2\">\"* */12 * * *\"</span> <span class=\"se\">\\</span>\n-t <span class=\"s2\">\"</span><span class=\"k\">$(</span>USER<span class=\"k\">)</span><span class=\"s2\">/tag_image_for_google_drive:latest\"</span> .\n</pre>\n<ul>\n<li>Start the container</li>\n</ul>\n<pre>$ docker run --detach --cpus<span class=\"o\">=</span><span class=\"m\">0</span>.5 <span class=\"se\">\\</span>\n--privileged <span class=\"se\">\\</span>\n-v tag_image_for_google_drive:/cache\n-i <span class=\"s2\">\"</span><span class=\"k\">$(</span>USER<span class=\"k\">)</span><span class=\"s2\">/tag_image_for_google_drive:latest\"</span>\n</pre>\n<p>Inside the container, a <code>google-drive-ocamlfuse</code> is installed to synchronize the google files\nfrom <code>GDRIVE_ROOT_FOLDER</code> in the cache, and a crontab is periodically executed (see <code>CRON_REQUENCE</code>)\nto invoke <code>tag_image_for_google_drive</code> with <code>PARAMS</code>.</p>\n<h3>Installation from source</h3>\n<p>Go inside the directory and</p>\n<pre>$ make configure\n$ conda activate tag_images_for_google_drive\n$ make install\n</pre>\n<h2>Tests</h2>\n<p>To test the project</p>\n<pre>$ make <span class=\"nb\">test</span>\n</pre>\n<p>To validate the typing</p>\n<pre>$ make typing\n</pre>\n<p>To validate all the project</p>\n<pre>$ make validate\n</pre>\n<h2>Project Organization</h2>\n<pre><code>\u251c\u2500\u2500 Makefile              &lt;- Makefile with commands like `make data` or `make train`\n\u251c\u2500\u2500 README.md             &lt;- The top-level README for developers using this project.\n\u251c\u2500\u2500 docs                  &lt;- A default Sphinx project; see sphinx-doc.org for details\n\u251c\u2500\u2500 setup.py              &lt;- makes project pip installable (pip install -e .[tests])\n\u2502                            so sources can be imported and dependencies installed\n\u251c\u2500\u2500 tag_images_for_google_drive                &lt;- Source code for use in this project\n\u2514\u2500\u2500 tests                 &lt;- Unit and integrations tests ((Mark directory as a sources root).\n</code></pre>\n\n          </div>"}, "last_serial": 6607697, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "101fc8f61d18f75e7ba20411a26e71b0", "sha256": "7c1dfba00388265cf222773533c3b94074def7f096d15ab3397f5b69b09fdd13"}, "downloads": -1, "filename": "tag_images_for_google_drive-1.0-py3-none-any.whl", "has_sig": true, "md5_digest": "101fc8f61d18f75e7ba20411a26e71b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 20881, "upload_time": "2020-02-11T07:57:55", "upload_time_iso_8601": "2020-02-11T07:57:55.622422Z", "url": "https://files.pythonhosted.org/packages/6d/f4/e6614b8df1e0c33298ef7a4266bdd6bdd0eab83d5fd77f4e6cdd42c55100/tag_images_for_google_drive-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f99b1c2c7fd5b09755acd7e40c19b53b", "sha256": "3bc178f8377be2da7a8a23961415fdccc1050febb3c08883024fac1d3aa899cd"}, "downloads": -1, "filename": "tag_images_for_google_drive-1.0.tar.gz", "has_sig": true, "md5_digest": "f99b1c2c7fd5b09755acd7e40c19b53b", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 2495384, "upload_time": "2020-02-11T07:58:02", "upload_time_iso_8601": "2020-02-11T07:58:02.064696Z", "url": "https://files.pythonhosted.org/packages/dc/08/7b430c07242ea3c1eb7f08a369c16301c845042fdede6ed418adebe44ed3/tag_images_for_google_drive-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "101fc8f61d18f75e7ba20411a26e71b0", "sha256": "7c1dfba00388265cf222773533c3b94074def7f096d15ab3397f5b69b09fdd13"}, "downloads": -1, "filename": "tag_images_for_google_drive-1.0-py3-none-any.whl", "has_sig": true, "md5_digest": "101fc8f61d18f75e7ba20411a26e71b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 20881, "upload_time": "2020-02-11T07:57:55", "upload_time_iso_8601": "2020-02-11T07:57:55.622422Z", "url": "https://files.pythonhosted.org/packages/6d/f4/e6614b8df1e0c33298ef7a4266bdd6bdd0eab83d5fd77f4e6cdd42c55100/tag_images_for_google_drive-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f99b1c2c7fd5b09755acd7e40c19b53b", "sha256": "3bc178f8377be2da7a8a23961415fdccc1050febb3c08883024fac1d3aa899cd"}, "downloads": -1, "filename": "tag_images_for_google_drive-1.0.tar.gz", "has_sig": true, "md5_digest": "f99b1c2c7fd5b09755acd7e40c19b53b", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 2495384, "upload_time": "2020-02-11T07:58:02", "upload_time_iso_8601": "2020-02-11T07:58:02.064696Z", "url": "https://files.pythonhosted.org/packages/dc/08/7b430c07242ea3c1eb7f08a369c16301c845042fdede6ed418adebe44ed3/tag_images_for_google_drive-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:28 2020"}