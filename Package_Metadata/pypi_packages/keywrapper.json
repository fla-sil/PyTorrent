{"info": {"author": "Luis Bosque", "author_email": "luisico@gmai.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Database"], "description": "Motivation\r\n----------\r\n\r\nI usually use Redis for small projects with a dynamic storage component. Most of the times I just need a very simple key-value storage and Redis does a terrific job with that. However not all the applications need a high performance storage but just being very easy to start using them.\r\n\r\nThe idea of this wrapper is to start using JSON based storage at the beginning and in the future, if necessary, move the storate of an application to Redis or any other supported driver without changing a single line of code.\r\n\r\nBasic usage\r\n-----------\r\n\r\nJSON store:\r\n\r\n  import keywrapper  \r\n\r\n  store = keywrapper.new_store('json')  \r\n\r\n  store.set_value('foo', 'bar', '42')  \r\n\r\n  store.get_value('foo', 'bar')  \r\n\r\n\r\n\r\nRedis store:\r\n\r\n\r\n  import keywrapper\r\n \r\n  store = keywrapper.new_store('redis')\r\n\r\n  store.set_value('foo', 'bar', '42')\r\n\r\n  store.get_value('foo', 'bar')\r\n\r\n\r\nMigrate from JSON store to Redis store:\r\n\r\n  import keywrapper\r\n\r\n  json_store = keywrapper.new_store('json')\r\n\r\n  redis_store = keywrapper.new_store('redis')\r\n\r\n  redis_store.restore(json_store.dump())\r\n\r\n\r\nCurrent status\r\n--------------\r\n\r\nThese are the current implemented features:\r\n\r\n* JSON and Redis drivers\r\n* Hash style data type (key, attribute, value)\r\n* set_value and get_value functions\r\n* dump function implemented only in JSON driver\r\n* restore function implemented in both JSON and Redis drivers", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lbosque/keywrapper", "keywords": "", "license": "BSD-3", "maintainer": "", "maintainer_email": "", "name": "keywrapper", "package_url": "https://pypi.org/project/keywrapper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/keywrapper/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/lbosque/keywrapper"}, "release_url": "https://pypi.org/project/keywrapper/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Extremely simple key-value storage wrapper", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"motivation\">\n<h2>Motivation</h2>\n<p>I usually use Redis for small projects with a dynamic storage component. Most of the times I just need a very simple key-value storage and Redis does a terrific job with that. However not all the applications need a high performance storage but just being very easy to start using them.</p>\n<p>The idea of this wrapper is to start using JSON based storage at the beginning and in the future, if necessary, move the storate of an application to Redis or any other supported driver without changing a single line of code.</p>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<p>JSON store:</p>\n<blockquote>\n<p>import keywrapper</p>\n<p>store = keywrapper.new_store(\u2018json\u2019)</p>\n<p>store.set_value(\u2018foo\u2019, \u2018bar\u2019, \u201842\u2019)</p>\n<p>store.get_value(\u2018foo\u2019, \u2018bar\u2019)</p>\n</blockquote>\n<p>Redis store:</p>\n<blockquote>\n<p>import keywrapper</p>\n<p>store = keywrapper.new_store(\u2018redis\u2019)</p>\n<p>store.set_value(\u2018foo\u2019, \u2018bar\u2019, \u201842\u2019)</p>\n<p>store.get_value(\u2018foo\u2019, \u2018bar\u2019)</p>\n</blockquote>\n<p>Migrate from JSON store to Redis store:</p>\n<blockquote>\n<p>import keywrapper</p>\n<p>json_store = keywrapper.new_store(\u2018json\u2019)</p>\n<p>redis_store = keywrapper.new_store(\u2018redis\u2019)</p>\n<p>redis_store.restore(json_store.dump())</p>\n</blockquote>\n</div>\n<div id=\"current-status\">\n<h2>Current status</h2>\n<p>These are the current implemented features:</p>\n<ul>\n<li>JSON and Redis drivers</li>\n<li>Hash style data type (key, attribute, value)</li>\n<li>set_value and get_value functions</li>\n<li>dump function implemented only in JSON driver</li>\n<li>restore function implemented in both JSON and Redis drivers</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1064390, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a37546a1f9ad9871d393d3de34d11574", "sha256": "e9c8d63b04ee6f0438c660c2dd13b1792c7198f2f596d9511a5fef9131f7a137"}, "downloads": -1, "filename": "keywrapper-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a37546a1f9ad9871d393d3de34d11574", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1518, "upload_time": "2014-04-18T13:03:40", "upload_time_iso_8601": "2014-04-18T13:03:40.450951Z", "url": "https://files.pythonhosted.org/packages/28/b7/c037a34da0bbeb21abb8a4a949dab67b37f4c76f6b3e5e47fb29f1268b37/keywrapper-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a37546a1f9ad9871d393d3de34d11574", "sha256": "e9c8d63b04ee6f0438c660c2dd13b1792c7198f2f596d9511a5fef9131f7a137"}, "downloads": -1, "filename": "keywrapper-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a37546a1f9ad9871d393d3de34d11574", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1518, "upload_time": "2014-04-18T13:03:40", "upload_time_iso_8601": "2014-04-18T13:03:40.450951Z", "url": "https://files.pythonhosted.org/packages/28/b7/c037a34da0bbeb21abb8a4a949dab67b37f4c76f6b3e5e47fb29f1268b37/keywrapper-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:54 2020"}