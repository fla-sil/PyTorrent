{"info": {"author": "Richard Ambler", "author_email": "rambler@wya.top", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics"], "description": "\n\n\n![](https://bitbucket.org/ram6ler/python_trotter/wiki/trotter_py.png)\n\nWelcome to trotter, a set of Python 3 classes for representing arrangements\nof arrangements commonly encountered in combinatorics.\n\nClasses have been defined according to whether order is important, items may be repeated, and length is specified.\n\n|Class         |Order Important|Repetition Allowed|Specified Length|\n|:-------------|:-------------:|:----------------:|:--------------:|\n|`Amalgams`    |Yes            |Yes               |Yes             |\n|`Permutations`|Yes            |No                |Yes             |\n|`Compounds`   |Yes            |No                |No              |\n|`Compositions`|No             |Yes               |Yes             |\n|`Combinations`|No             |No                |Yes             |\n|`Subsets`     |No             |No                |No              |\n\nInstances of these classes are indexable pseudo-lists containing all possible arrangements. Since the number of possible arrangements can grow very quickly with the number of items available (and the number of items taken at a time, where applicable), instances do not actually *store* all arrangements but are rather containers of *mappings between integers and arrangements*. This makes it possible to create instances that \"contain\" very large numbers of arrangements.\n\nFor more information, please see the [trotter wiki](https://bitbucket.org/ram6ler/python_trotter/wiki/About.md).\n\n## Example session: pick three words\n\n```python\n>>> # Import the Combinations class.\n... from trotter import *\n>>> \n>>> # A list of words.\n... items = [\"the\", \"parrot\", \"is\", \"not\", \"pining\"]\n>>>\n>>> # A representation of 3-combinations of these words.\n... combos = Combinations(3, items)\n>>>\n>>> # Exactly what is c?\n... print(combos)\nA pseudo-list containing 10 3-combinations of ['the', 'parrot', 'is', 'not', 'pining'].\n>>> \n>>> # How many 3-combinations are there, again?\n... len(combos)\n10\n>>> # Let's see them!\n... for combo in combos: \n...   print(combo)\n... \n['the', 'parrot', 'is']\n['the', 'parrot', 'not']\n['the', 'parrot', 'pining']\n['the', 'is', 'not']\n['the', 'is', 'pining']\n['the', 'not', 'pining']\n['parrot', 'is', 'not']\n['parrot', 'is', 'pining']\n['parrot', 'not', 'pining']\n['is', 'not', 'pining']\n```\n\n## Example session: subsets of letters in a string\n\n```python\n>>> # The items can also be the characters in a string.\n... items = \"spam\"\n>>> # The subsets of the letters in this word\n... # (notice the first is the empty string):\n... for subset in Subsets(items):\n...   print(subset)\n... \n\ns\np\nsp\na\nsa\npa\nspa\nm\nsm\npm\nspm\nam\nsam\npam\nspam\n```\n\n## Example session: a looooong pseudo-list!\n\n```python\n>>> # How many 10-permutations are there \n... # of the 26 letters in the alphabet?\n... letters = \"abcdefghijklmnopqrstuvwxyz\"\n>>> permutations = Permutations(10, letters)\n>>> # Just how big is this list?\n... print(permutations)\nA pseudo-list containing 19275223968000 10-permutations of abcdefghijklmnopqrstuvwxyz.\n>>> # Wow! Almost twenty trillion! Luckily it's only a\n... # pseudo-list and not really stored on the computer!\n... # The word \"algorithms\" is a ten-letter permutation of letters.\n... # What is the index of this word in the list of permutations?\n... permutations.index(\"algorithms\")\n6831894769563\n>>> # Found in a split second - take that, Mathematica!\n>>> # Let's check:\n... print(permutations[6831894769563])\nalgorithms\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://bitbucket.org/ram6ler/python_trotter/get/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/ram6ler/python_trotter", "keywords": "combinations,permutations,combinatorics,amalgams,compositions,subsets,compounds", "license": "", "maintainer": "", "maintainer_email": "", "name": "trotter", "package_url": "https://pypi.org/project/trotter/", "platform": "", "project_url": "https://pypi.org/project/trotter/", "project_urls": {"Download": "https://bitbucket.org/ram6ler/python_trotter/get/master.zip", "Homepage": "https://bitbucket.org/ram6ler/python_trotter"}, "release_url": "https://pypi.org/project/trotter/0.9.0/", "requires_dist": null, "requires_python": ">=3.8", "summary": "Pseudo-lists containing arrangements of item selection types that commonly arise in combinatorics, such as combinations, permutations and subsets.", "version": "0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a63ca7b81c226e8f06eaf04be217e56ba4cc53b2/68747470733a2f2f6269746275636b65742e6f72672f72616d366c65722f707974686f6e5f74726f747465722f77696b692f74726f747465725f70792e706e67\"></p>\n<p>Welcome to trotter, a set of Python 3 classes for representing arrangements\nof arrangements commonly encountered in combinatorics.</p>\n<p>Classes have been defined according to whether order is important, items may be repeated, and length is specified.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Class</th>\n<th align=\"center\">Order Important</th>\n<th align=\"center\">Repetition Allowed</th>\n<th align=\"center\">Specified Length</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>Amalgams</code></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Permutations</code></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Compounds</code></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Compositions</code></td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Combinations</code></td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Subsets</code></td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n</tr></tbody></table>\n<p>Instances of these classes are indexable pseudo-lists containing all possible arrangements. Since the number of possible arrangements can grow very quickly with the number of items available (and the number of items taken at a time, where applicable), instances do not actually <em>store</em> all arrangements but are rather containers of <em>mappings between integers and arrangements</em>. This makes it possible to create instances that \"contain\" very large numbers of arrangements.</p>\n<p>For more information, please see the <a href=\"https://bitbucket.org/ram6ler/python_trotter/wiki/About.md\" rel=\"nofollow\">trotter wiki</a>.</p>\n<h2>Example session: pick three words</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Import the Combinations class.</span>\n<span class=\"o\">...</span> <span class=\"kn\">from</span> <span class=\"nn\">trotter</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># A list of words.</span>\n<span class=\"o\">...</span> <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"the\"</span><span class=\"p\">,</span> <span class=\"s2\">\"parrot\"</span><span class=\"p\">,</span> <span class=\"s2\">\"is\"</span><span class=\"p\">,</span> <span class=\"s2\">\"not\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pining\"</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># A representation of 3-combinations of these words.</span>\n<span class=\"o\">...</span> <span class=\"n\">combos</span> <span class=\"o\">=</span> <span class=\"n\">Combinations</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Exactly what is c?</span>\n<span class=\"o\">...</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">combos</span><span class=\"p\">)</span>\n<span class=\"n\">A</span> <span class=\"n\">pseudo</span><span class=\"o\">-</span><span class=\"nb\">list</span> <span class=\"n\">containing</span> <span class=\"mi\">10</span> <span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">combinations</span> <span class=\"n\">of</span> <span class=\"p\">[</span><span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'parrot'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'not'</span><span class=\"p\">,</span> <span class=\"s1\">'pining'</span><span class=\"p\">]</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># How many 3-combinations are there, again?</span>\n<span class=\"o\">...</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">combos</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Let's see them!</span>\n<span class=\"o\">...</span> <span class=\"k\">for</span> <span class=\"n\">combo</span> <span class=\"ow\">in</span> <span class=\"n\">combos</span><span class=\"p\">:</span> \n<span class=\"o\">...</span>   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">combo</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> \n<span class=\"p\">[</span><span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'parrot'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'parrot'</span><span class=\"p\">,</span> <span class=\"s1\">'not'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'parrot'</span><span class=\"p\">,</span> <span class=\"s1\">'pining'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'not'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'pining'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'not'</span><span class=\"p\">,</span> <span class=\"s1\">'pining'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'parrot'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'not'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'parrot'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'pining'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'parrot'</span><span class=\"p\">,</span> <span class=\"s1\">'not'</span><span class=\"p\">,</span> <span class=\"s1\">'pining'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'not'</span><span class=\"p\">,</span> <span class=\"s1\">'pining'</span><span class=\"p\">]</span>\n</pre>\n<h2>Example session: subsets of letters in a string</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># The items can also be the characters in a string.</span>\n<span class=\"o\">...</span> <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"s2\">\"spam\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># The subsets of the letters in this word</span>\n<span class=\"o\">...</span> <span class=\"c1\"># (notice the first is the empty string):</span>\n<span class=\"o\">...</span> <span class=\"k\">for</span> <span class=\"n\">subset</span> <span class=\"ow\">in</span> <span class=\"n\">Subsets</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> \n\n<span class=\"n\">s</span>\n<span class=\"n\">p</span>\n<span class=\"n\">sp</span>\n<span class=\"n\">a</span>\n<span class=\"n\">sa</span>\n<span class=\"n\">pa</span>\n<span class=\"n\">spa</span>\n<span class=\"n\">m</span>\n<span class=\"n\">sm</span>\n<span class=\"n\">pm</span>\n<span class=\"n\">spm</span>\n<span class=\"n\">am</span>\n<span class=\"n\">sam</span>\n<span class=\"n\">pam</span>\n<span class=\"n\">spam</span>\n</pre>\n<h2>Example session: a looooong pseudo-list!</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># How many 10-permutations are there </span>\n<span class=\"o\">...</span> <span class=\"c1\"># of the 26 letters in the alphabet?</span>\n<span class=\"o\">...</span> <span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"s2\">\"abcdefghijklmnopqrstuvwxyz\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">permutations</span> <span class=\"o\">=</span> <span class=\"n\">Permutations</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">letters</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Just how big is this list?</span>\n<span class=\"o\">...</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">permutations</span><span class=\"p\">)</span>\n<span class=\"n\">A</span> <span class=\"n\">pseudo</span><span class=\"o\">-</span><span class=\"nb\">list</span> <span class=\"n\">containing</span> <span class=\"mi\">19275223968000</span> <span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"n\">permutations</span> <span class=\"n\">of</span> <span class=\"n\">abcdefghijklmnopqrstuvwxyz</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Wow! Almost twenty trillion! Luckily it's only a</span>\n<span class=\"o\">...</span> <span class=\"c1\"># pseudo-list and not really stored on the computer!</span>\n<span class=\"o\">...</span> <span class=\"c1\"># The word \"algorithms\" is a ten-letter permutation of letters.</span>\n<span class=\"o\">...</span> <span class=\"c1\"># What is the index of this word in the list of permutations?</span>\n<span class=\"o\">...</span> <span class=\"n\">permutations</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">\"algorithms\"</span><span class=\"p\">)</span>\n<span class=\"mi\">6831894769563</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Found in a split second - take that, Mathematica!</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Let's check:</span>\n<span class=\"o\">...</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">permutations</span><span class=\"p\">[</span><span class=\"mi\">6831894769563</span><span class=\"p\">])</span>\n<span class=\"n\">algorithms</span>\n</pre>\n\n          </div>"}, "last_serial": 6223494, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "9d9aa091acb675299f58dc4e306e4ba5", "sha256": "35285a41f0c339e70427fb669968f2bf918610867a08ebf95f42f239fba53a41"}, "downloads": -1, "filename": "trotter-0.5.1.tar.gz", "has_sig": false, "md5_digest": "9d9aa091acb675299f58dc4e306e4ba5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3795, "upload_time": "2015-01-26T12:33:18", "upload_time_iso_8601": "2015-01-26T12:33:18.543323Z", "url": "https://files.pythonhosted.org/packages/9d/96/4bd88f413279c59be2f4fdaae608e5d5cd25d2fd541301d3e341aa969595/trotter-0.5.1.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "567478dc28a6ce24e95d8196532cf137", "sha256": "42196fe1c3cc7fabdbdaa0200286f1b3d8113d1fd402a89574c4ae6cb11b5cae"}, "downloads": -1, "filename": "trotter-0.8.0.tar.gz", "has_sig": false, "md5_digest": "567478dc28a6ce24e95d8196532cf137", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5500, "upload_time": "2016-02-11T12:44:05", "upload_time_iso_8601": "2016-02-11T12:44:05.309450Z", "url": "https://files.pythonhosted.org/packages/f7/68/96bf5833b0055d8f06786e0936de7e4abb81ec10c647efd70ac2b26a05fe/trotter-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "534b9417cbd85094f458be4ee7dbefd1", "sha256": "890dc368e3f2fa94f6ee85ad2db3e57306a8b245be70ccd43ee861c5cb886ec6"}, "downloads": -1, "filename": "trotter-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "534b9417cbd85094f458be4ee7dbefd1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 7124, "upload_time": "2019-12-01T06:36:53", "upload_time_iso_8601": "2019-12-01T06:36:53.676509Z", "url": "https://files.pythonhosted.org/packages/7b/79/f0448564be0567500b5cc00178fdc40bf63c5ef452940cfe0d0d12a76827/trotter-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0872d8384bfb7adafa24a09c066dcb8a", "sha256": "66be3a78e200f915648b3c7b8bfef1483f60031f8e827290922e98bcd5263430"}, "downloads": -1, "filename": "trotter-0.9.0.tar.gz", "has_sig": false, "md5_digest": "0872d8384bfb7adafa24a09c066dcb8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 6587, "upload_time": "2019-12-01T06:36:57", "upload_time_iso_8601": "2019-12-01T06:36:57.248974Z", "url": "https://files.pythonhosted.org/packages/c6/1b/249181428d839c4ccadc4a867d3cb29089635195df340d4450be976ae0a8/trotter-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "534b9417cbd85094f458be4ee7dbefd1", "sha256": "890dc368e3f2fa94f6ee85ad2db3e57306a8b245be70ccd43ee861c5cb886ec6"}, "downloads": -1, "filename": "trotter-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "534b9417cbd85094f458be4ee7dbefd1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 7124, "upload_time": "2019-12-01T06:36:53", "upload_time_iso_8601": "2019-12-01T06:36:53.676509Z", "url": "https://files.pythonhosted.org/packages/7b/79/f0448564be0567500b5cc00178fdc40bf63c5ef452940cfe0d0d12a76827/trotter-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0872d8384bfb7adafa24a09c066dcb8a", "sha256": "66be3a78e200f915648b3c7b8bfef1483f60031f8e827290922e98bcd5263430"}, "downloads": -1, "filename": "trotter-0.9.0.tar.gz", "has_sig": false, "md5_digest": "0872d8384bfb7adafa24a09c066dcb8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 6587, "upload_time": "2019-12-01T06:36:57", "upload_time_iso_8601": "2019-12-01T06:36:57.248974Z", "url": "https://files.pythonhosted.org/packages/c6/1b/249181428d839c4ccadc4a867d3cb29089635195df340d4450be976ae0a8/trotter-0.9.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:46:40 2020"}